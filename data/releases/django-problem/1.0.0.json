{
  "info": {
    "author": "Lucas Marie",
    "author_email": "pro@lucas.corsica",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django Problem\n\nA Django application to report a problem / bug in your app.\nA problem is a text description linked to an user and a page.\nA problem can be marked as resolved.\n\n## Features\n* Link custom data to your problem\n* Admin interface to search and filter through all problems\n* Compatible with django rest framework\n* Automatically create a timestamp when a problem is reported and when a problem is marked as resolved\n\n## Installation\n\nInstall the app with\n\n```\npip install django-problem\n```\n\n\nAdd `problem` to your `INSTALLED_APPS` in `settings.py`\n```python\nINSTALLED_APPS = [\n  ...,\n  'problem',\n  ...,\n]\n```\n\nIn `settings.py` add the pages of your application\n\n```python\nPROBLEM = {\n  'PAGES': (\n    ('Home Page', 'Home Page'),\n    ('Settings', 'Settings'),\n  )\n}\n```\n\nRun the migration\n\n```\npython manage.py migrate\n```\n\n## Usage\n\nThe application provide 3 simple templates\n* problem_form.html : A form to create a problem\n* problem_detail.html : Detail view of a problem\n* problem_list.html : List view of all problems\n\nYou can override them by creating a file with the same name in  `templates/problem` in your app.\n\nTo use the application out-of-the-box you can include urls in `urls.py` like this\n```\nurlpatterns += [\n    path('problem/', include('problem.urls')),\n]\n```\n\nIf you want to link custom data to your problem, you can follow the steps below.\n\n### Create a model to link custom data\nCreate a link class in your `models.py`\n\n```python\nfrom problem.models import Problem\n\n\nclass ProblemLink(models.Model):\n    problem = models.OneToOneField(Problem, on_delete=models.CASCADE)\n    mymodel = models.ForeignKey(MyModel, on_delete=models.SET_NULL, null=True)\n```\n\n\n### Create an inline formset  \n\n\n```python\nfrom problem.models import Problem\n\nfrom .models import ProblemLink\n\n\nclass ProblemLinkForm(forms.ModelForm):\n    class Meta:\n        model = ProblemLink\n        fields = '__all__'\n\nProblemLinkFormSet = inlineformset_factory(Problem, ProblemLink, form=ProblemLinkForm, extra=1, can_delete=False)\n```\n\n### Create a custom view\n\nCreate a subclass of the CreateProblem view and override  `add_formset_to_context` and `validate_formset` methods. Then in problem_form.html you can display the problem_link_formset form\n\n\n`add_formset_to_context` is called during the `get_context_data` method.\n\n`validate_formset` is called during the `form_valid` method, after the Problem object has been saved.\n\n```python\nfrom probem.views import CreateProblem\n\nfrom .forms import ProblemLinkFormSet\n\n\nclass CreateProblemLink(CreateProblem):\n    def add_formset_to_context(self, context):\n        context['problem_link_formset'] = ProblemLinkFormSet()\n\n    def validate_formset(self, request, instance):\n        problem_relation_form = ProblemLinkFormSet(request.POST, instance=instance)\n        if problem_relation_form.is_valid():\n            problem_relation_form.save()\n```\n\nIn problem_detail.html and problem_list you can simply access `ProblemLink` to display the linked data.\n\n### Custom admin\nYou can add your custom model as an inline in the admin interface.\n\n```python\nfrom problem.admin import ProblemAdmin\nfrom problem.models import Problem\n\nfrom .models import ProblemLink\n\nclass ProblemLinkInline(admin.StackedInline):\n    model = ProblemLink\n\n\nclass CustomizedProblemAdmin(ProblemAdmin):\n    inlines = (ProblemLinkInline,)\n\n# Unregister the Problem model, to replace it with yours\nadmin.site.unregister(Problem)\nadmin.site.register(Problem, CustomizedProblemAdmin)\n```\n\n### With django-rest-framework\n\nA serializer is provided, you can use it to .\n\n```python\nfrom problem.serializers import ProblemSerializer\nfrom problem.models import Problem\n\nfrom .models import ProblemLink\n\n\nclass ProblemLinkSerializer(ModelSerializer):\n    problem = ProblemSerializer()\n    class Meta:\n        model = ProblemLink\n        fields = ['mymodel', 'problem']\n\n    def create(self, validated_data):\n        problem = validated_data.pop('problem')\n        problem = Problem.objects.create(**problem)\n        problem_link = ProblemLink.objects.create(**validated_data, problem=problem)\n        return problem_link\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Piwit/django-problem",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-problem",
    "package_url": "https://pypi.org/project/django-problem/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-problem/",
    "project_urls": {
      "Homepage": "https://github.com/Piwit/django-problem"
    },
    "release_url": "https://pypi.org/project/django-problem/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django app to report user problem / bug",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7285773,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1033986447841ba6b7d2a4be22c394a903d436a096a10ba06fcd62b8725bd10",
        "md5": "d5f36aa5fce073e7c74cad545e6d7458",
        "sha256": "9a6539185f645ee4a83af07fa9c8c5341f7857d0027d35e892afe32f92630a31"
      },
      "downloads": -1,
      "filename": "django_problem-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d5f36aa5fce073e7c74cad545e6d7458",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9673,
      "upload_time": "2020-05-20T13:04:30",
      "upload_time_iso_8601": "2020-05-20T13:04:30.322115Z",
      "url": "https://files.pythonhosted.org/packages/e1/03/3986447841ba6b7d2a4be22c394a903d436a096a10ba06fcd62b8725bd10/django_problem-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbb44835607dff24b18ea811996619c290d11551f755186a4a72d1104a9b9d6d",
        "md5": "68bfff23beaaf2fe864c9be6341064eb",
        "sha256": "fe2da6481d98809ce0b97dc8232a0ab6ad9bcf0ac4ea6e62d3f43faac2fbb593"
      },
      "downloads": -1,
      "filename": "django-problem-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "68bfff23beaaf2fe864c9be6341064eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7216,
      "upload_time": "2020-05-20T13:05:04",
      "upload_time_iso_8601": "2020-05-20T13:05:04.404472Z",
      "url": "https://files.pythonhosted.org/packages/fb/b4/4835607dff24b18ea811996619c290d11551f755186a4a72d1104a9b9d6d/django-problem-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}