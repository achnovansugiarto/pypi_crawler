{
  "info": {
    "author": "ASI Uniovi",
    "author_email": "jldiaz@uniovi.es",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Malloovia\n\n[<img src=\"https://img.shields.io/badge/python->=3.6-blue.svg?style=flat-square\">](https://www.python.org/downloads/) [<img src=\"https://img.shields.io/pypi/v/malloovia.svg\">](https://pypi.python.org/pypi/malloovia) [<img src=\"http://readthedocs.org/projects/malloovia/badge/?version=latest\" alt=\"Documentation Status\">](http://malloovia.readthedocs.io/en/latest/?badge=latest)  [<img src=\"https://travis-ci.org/asi-uniovi/malloovia.svg?branch=master\" alt=\" Build status\">](https://travis-ci.org/asi-uniovi/malloovia)\n\n\nUse linear programming to allocate applications to cloud infrastructure.\n\n\n* Free software: MIT license\n* Documentation: https://malloovia.readthedocs.io.\n\n\n## Introduction\n\nMalloovia is a Python package to solve virtual machine (VM) allocation problems in Infrastructure as a Service (IaaS) clouds from the point of view of the cloud customer. It was first presented in the paper [\"Cost Minimization of Virtual Machine Allocation in Public Clouds Considering Multiple Applications\"](http://www.atc.uniovi.es/personal/joaquin-entrialgo/pdfs/Entrialgo2017-gecon.pdf) presented at [GECON 2017](http://2017.gecon-conference.org/).\n\nThe problem to solve is: given a cloud infrastructure composed of different virtual machine types, each one with its own hardware characteristics, and prices, some of them with different pricing schemas, such as discounts for reservation over long periods, and given a set of applications to run on that infrastructure, each one with a different performance on each different VM type, and with a different workload over time, find the number of VMs of each type to activate at each timeslot for each application, so that the expected workload is fulfilled for all applications, the cloud provider limits are not exceeded and the total cost is minimized.\n\nIt works in two phases: first, it computes the number of reserved VMs using a Long Term Workload Prediction (LTWP) and then, it computes the number of on-demand for each time slot using a Short Term Workload Prediction (STWP).\n\nMalloovia can be directly used in Python or by a [CLI interface](https://malloovia.readthedocs.io/en/latest/cli.html#cli). The problems and the solutions can be saved using a [YAML format](https://malloovia.readthedocs.io/en/latest/yaml.html).\n\nThis is an example that assumes that the problem definition is in `problems.yaml`, with `problem1` describing the LTWP and `problem2` describing the STWP:\n\n```\n$ malloovia solve problems.yaml --phase-i-id=problem1 --phase-ii-id=problem2\nReading problems.yaml...(0.004s)\nSolving phase I...(0.020s)\nSolving Phase II |███████████████████████████████████| 100.0% - ETA: 0:00:00\n(0.101s)\nWriting solutions in problems-sol.yaml...(0.006s)\n```\n\nThis is an example in Python (explained in more detail in the [Usage section of the documentation](https://malloovia.readthedocs.io/en/latest/usage.html)):\n\n```python\nfrom malloovia import *\n\n# Infrastructure definition\nregion1 = LimitingSet(\"r1\", name=\"us.east\", max_vms=20)\nzone1 =  LimitingSet(\"r1_z1\", name=\"us.east_a\", max_vms=20)\nm3large_z1 = InstanceClass(\n    \"m3large_r1_z1\", name=\"reserved m3.large in us.east_a\",\n    limiting_sets=(zone1,), is_reserved=True,\n    price=7, max_vms=20)\nm4xlarge_r1 = InstanceClass(\n    \"m4xlarge_r1\", name=\"ondemand m4.xlarge in us.east\",\n    limiting_sets=(region1,), is_reserved=False,\n    price=10, max_vms=10)\n\n# Performances\napp0 = App(\"a0\", \"Web server\")\napp1 = App(\"a1\", \"Database\")\nperformances = PerformanceSet(\n    id=\"example_perfs\",\n    values=PerformanceValues({\n        m3large_z1: {app0: 12, app1: 500},\n        m4xlarge_r1: {app0: 44, app1: 1800}\n        })\n)\n\n# Workload\n\n# Long term workload prediction of each app, for Phase I\nltwp_app0 = Workload(\n    \"ltwp0\", description=\"rph to the web server\", app=app0,\n    values=(201, 203, 180, 220, 190, 211, 199, 204, 500, 200)\n)\nltwp_app1 = Workload(\n    \"ltwp1\", description=\"rph to the database\", app=app1,\n    values=(2010, 2035, 1807, 2202, 1910, 2110, 1985, 2033, 5050, 1992)\n)\n\n# Building the problem for phase I and solving\nproblem = Problem(\n    id=\"example1\",\n    name=\"Example problem\",\n    workloads=(ltwp_app0, ltwp_app1),\n    instance_classes=(m3large_z1, m4xlarge_r1),\n    performances=performances\n)\n\nphase_i_solution = PhaseI(problem).solve()\n\n# Building the problem for a timeslot in phase II and solving\nphase_ii = PhaseII(problem, phase_i_solution)\ntimeslot_solution = phase_ii.solve_timeslot(\n    workloads=(Workload(\"stwp0\", app=app0, description=None, values=(315,)),\n               Workload(\"stwp1\", app=app1, description=None, values=(1950,))\n               )\n    )\n\n# Showing the cost and the allocation\nprint(\"Cost:\", timeslot_solution.solving_stats.optimal_cost)\nprint(timeslot_solution.allocation._inspect())\n```\n\nYou can find example problems and solutions in YAML format in the [test data directory](https://github.com/asi-uniovi/malloovia/tree/master/tests/test_data/valid) and in the [GECON 2017 data repository](https://github.com/asi-uniovi/malloovia-data-gecon2017), where you can find [a notebook](https://github.com/asi-uniovi/malloovia-data-gecon2017/blob/master/Malloovia-Gecon2017-data.ipynb) that shows how to compute the solutions from the problems.\n\nPlease, refer to [the documentation](https://malloovia.readthedocs.io/) and the he paper [\"Cost Minimization of Virtual Machine Allocation in Public Clouds Considering Multiple Applications\"](http://www.atc.uniovi.es/personal/joaquin-entrialgo/pdfs/Entrialgo2017-gecon.pdf) for more details.\n\nHistory\n=======\n\n0.1.0 (2017-07-24)\n------------------\n\n* First release on PyPI.\n\n0.2.0 (2017-07-27)\n------------------\n\n* `from malloovia import *` imports all relevant classes and methods.\n* `read_problems_from_github()` added.\n* Integration with Travis-CI and ReadTheDocs.\n* Working on the documentation.\n* Modified YAML schema of the Solutions.\n\n0.3.0 (2017-07-31)\n------------------\n\n* Much improved documentation. Windows installation covered.\n* Command-line interface\n* Changed from PyYAML to ruamel.yaml, much faster\n* Read from YAML now accepts gzipped files too\n* Some bugs fixed in the schema\n\n1.0.0 (2017-11-01)\n------------------\n\n* Incompatible API change: it is required to specify `time_unit` in\n  `InstanceClass`, `PerformanceSet` and `Workload` classes, in order to\n  clarify the time unit for price, performance and workload timeslots.\n* Added utility function to read solutions from yaml files.\n* Revised documentation and code quality. Improved README for github.\n* Minor bugfixes.\n\n1.0.1 (2018-01-12)\n------------------\n\n* Bugfix to make all malloovia classes pickable, allowing for multiprocessing.\n\n1.1.0 (2018-03-16)\n------------------\n\n* New class `PhaseIIGuided` which allows to solve a single timeslot using\n  a given allocation which specifies the minimum number of VMs to keep running.\n\n2.1.1 (2019-06-20)\n------------------\n\n* Internal refactorization of Malloovia Model's classes, which are now based\n  on `typing.NamedTuple` instead of `collections.namedtuple`, which\n  allows for proper type checking and documentation of the fields.\n* Several typing bugs related to YAML export and import fixed.\n* This version introduces backwards incompatibility, since it requires\n  python 3.6+ to run. However the API and usage is the same.\n\n2.2.0 (2020-03-04)\n------------------\n\n* Updated to work with PuLP 2.0 (and fix that version in setup.py)\n* Fixed problem with LP variable names too long wen the number of apps in the problem is large.\n\n2.3.0 (2020-09-25)\n------------------\n\n* Modified to support hybrid clouds via is_private attribute in instance classes\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/asi-uniovi/malloovia",
    "keywords": "malloovia",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "malloovia",
    "package_url": "https://pypi.org/project/malloovia/",
    "platform": "",
    "project_url": "https://pypi.org/project/malloovia/",
    "project_urls": {
      "Homepage": "https://github.com/asi-uniovi/malloovia"
    },
    "release_url": "https://pypi.org/project/malloovia/2.3.0/",
    "requires_dist": [
      "ruamel.yaml",
      "jsonschema",
      "pulp (==2.0)",
      "click",
      "progress"
    ],
    "requires_python": ">=3.6",
    "summary": "Use linear programming to allocate applications to cloud infrastructure",
    "version": "2.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16854326,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b17b29bdf042fe92dcddfd2ed04b25d12eec6e4637878051d5d9a80ff263622f",
        "md5": "975d4d205604636182fc6effc99b0647",
        "sha256": "0ee1c759c281ac592ff25cc19b48bc9551c073a6c7c9b2f12c0114438750f769"
      },
      "downloads": -1,
      "filename": "malloovia-2.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "975d4d205604636182fc6effc99b0647",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 42187,
      "upload_time": "2020-09-25T18:47:54",
      "upload_time_iso_8601": "2020-09-25T18:47:54.592983Z",
      "url": "https://files.pythonhosted.org/packages/b1/7b/29bdf042fe92dcddfd2ed04b25d12eec6e4637878051d5d9a80ff263622f/malloovia-2.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d26604d68ac458241330a6d6f61f3e10cb4b20aeb8be95bb6707626a489abc3e",
        "md5": "2f53ec5e082b6cbb351ae08e35a733c7",
        "sha256": "a0ce918546bca1992436e09888d60a34d300845a0e1aa63218edf5e2bff080a5"
      },
      "downloads": -1,
      "filename": "malloovia-2.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2f53ec5e082b6cbb351ae08e35a733c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 128950,
      "upload_time": "2020-09-25T18:47:56",
      "upload_time_iso_8601": "2020-09-25T18:47:56.354782Z",
      "url": "https://files.pythonhosted.org/packages/d2/66/04d68ac458241330a6d6f61f3e10cb4b20aeb8be95bb6707626a489abc3e/malloovia-2.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}