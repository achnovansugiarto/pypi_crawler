{
  "info": {
    "author": "FOXO Bioscience",
    "author_email": "info@FOXOBioScience.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Framework :: Jupyter",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "`methylize` is a python package for analyzing output from Illumina methylation arrays. It complements `methylprep` and `methylcheck` and provides methods for computing differentially methylated probes and regions, and annotating these regions with the UCSC Genome Browser.  View on [ReadTheDocs.](https://life-epigenetics-methylize.readthedocs-hosted.com/en/latest/)\n\n[![tests](https://github.com/FoxoTech/methylize/workflows/tests/badge.svg)](https://github.com/FoxoTech/methylize/actions/workflows/ci.yml) [![Readthedocs](https://readthedocs.com/projects/life-epigenetics-methylize/badge/?version=latest)](https://life-epigenetics-methylize.readthedocs-hosted.com/en/latest/) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![CircleCI](https://circleci.com/gh/FoxoTech/methylize/tree/master.svg?style=shield)](https://circleci.com/gh/FoxoTech/methylize/tree/master) [![Codacy Badge](https://app.codacy.com/project/badge/Grade/099d26465bd64c2387afa063810a13e6)](https://www.codacy.com/gh/FoxoTech/methylize/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=FOXOBioScience/methylize&amp;utm_campaign=Badge_Grade) [![Coverage Status](https://coveralls.io/repos/github/FoxoTech/methylize/badge.svg?branch=master)](https://coveralls.io/github/FoxoTech/methylize?branch=master) ![PYPI-Downloads](https://img.shields.io/pypi/dm/methylize.svg?label=pypi%20downloads&logo=PyPI&logoColor=white) [![codecov](https://codecov.io/gh/FoxoTech/methylize/branch/master/graph/badge.svg?token=KDV3HHDCTU)](https://codecov.io/gh/FoxoTech/methylize)\n\n## methylize is part of the methylsuite\n\n`methylize` is part of the [methylsuite](https://pypi.org/project/methylsuite/) of python packages that provide functions to analyze DNA methylation data from Illumina's Infinium arrays (27k, 450k, and EPIC, as well as mouse arrays). This package is focused on analysis of processed methylation data, such as EWAS using Manhattan and Volcano plots.\n`methylize` functions are designed to work with a minimum of knowledge and specification required. But you can always override the \"smart\" defaults with custom settings if the default settings don't work for your data. The entire `methylsuite` is designed in this format: to offer ease of use while still maintaining flexibility for customization as needed.\n\n## Methylsuite package components\n\nYou should install all three components, as they work together. The parts include:\n\n- `methylprep`: for processing `idat` files or downloading GEO datasets from NIH. Processing steps include\n   - infer type-I channel switch\n   - NOOB (normal-exponential convolution on out-of-band probe data)\n   - poobah (p-value with out-of-band array hybridization, for filtering low signal-to-noise probes)\n   - qualityMask (to exclude historically less reliable probes)\n   - nonlinear dye bias correction (AKA signal quantile normalization between red/green channels across a sample)\n   - calculate beta-value, m-value, or copy-number matrix\n   - large batch memory management, by splitting it up into smaller batches during processing\n\n- `methylcheck`: (this package) for quality control (QC) and analysis, including\n   - functions for filtering out unreliable probes, based on the published literature\n      - Note that `methylprep process` will exclude a set of unreliable probes by default. You can disable that using the --no_quality_mask option from CLI.\n   - sample outlier detection\n   - array level QC plots, based on Genome Studio functions\n   - a python clone of Illumina's Bead Array Controls Reporter software (QC)\n   - data visualization functions based on `seaborn` and `matplotlib` graphic libraries.\n   - predict sex of human samples from probes\n   - interactive method for assigning samples to groups, based on array data, in a Jupyter notebook\n\n- `methylize` provides more analysis and interpretation functions\n   - differentially methylated probe statistics (between treatment and control samples)\n   - volcano plots (which probes are the most different?)\n   - manhattan plots (where in genome are the differences?)\n\n## Table of Contents\n- [Differentially methylated position (DMP) regression, detection and visualation](docs/demo_diff_meth_pos.ipynb)\n  - [Logistic Regression](docs/methylize_tutorial.html#Differentially-Methylated-Regions-Analysis-with-Binary-Phenotypes)\n  - [Linear Regression](docs/methylize_tutorial.html#Differentially-Methylated-Regions-Analysis-with-Continuous-Numeric-Phenotypes)\n  - [Manhattan Plot](docs/methylize_tutorial.html#Manhattan-Plots)\n  - [Volcano plot](docs/methylize_tutorial.html#Volcano-Plot)\n- [Differentially methylated regions](docs/diff_meth_regions.md)\n  - [Gene annotation with the UCSC Human Genome Browser](docs/diff_meth_regions.html#gene-annotation-with-ucsc-genome-browser)\n\n## Installation\n\n```python\npip3 install methylize\n```\n\nInstallation will also install the other parts of the `methylsuite` (methylprep and methylcheck) if they are not already installed.\n\nIf progress bar is missing:\n    If you don't see a progress bar in your jupyterlab notebook, try this:\n\n    - conda install -c conda-forge nodejs\n    - jupyter labextension install @jupyter-widgets/jupyterlab-manager\n\n## Methylize Package\n\nThe `methylize` package contains both high-level APIs for processing data from local files and low-level functionality allowing you to analyze your data AFTER running `methylprep` and `methylcheck`. For greatest usability, import `methylize` into a Jupyer Notebook along with your processed sample data (a DataFrame of beta values or m-values and a separate DataFrame containing meta data about the samples).\n\n`Methylize` allows you to run linear or logistic regression on all probes and identify points of interest in the methylome where DNA is differentially modified. Then you can use these regression results to create *volcano plots* and *manhattan plots*.\n\n### Sample Manhattan Plot\n![Manhattan Plot](https://github.com/FoxoTech/methylize/blob/master/docs/manhattan_example.png?raw=true)\n\n![Manhattan Plot (alternate coloring)](https://github.com/FoxoTech/methylize/blob/master/docs/manhattan_example2.png?raw=true)\n\n### Sample Volcano Plot\n![Volcano Plot](https://github.com/FoxoTech/methylize/blob/master/docs/volcano_example.png?raw=true)\n\nCustomizable: Plot size, color palette, and cutoff p-value lines can be set by the user.\nExporting: You can export all probe statistics, or just the significant probes as CSV or python pickled DataFrame.\n\n## Differentially methylated position/probe (DMP) detection\n\nThe `diff_meth_pos(meth_data, phenotypes)` function searches for individual differentially methylated positions/probes\n(DMPs) by regressing methylation `beta values` or `M-values` for each sample at a given\ngenomic location against the phenotype data for those samples.\n\n### Phenotypes\n\nCan be provided as\n\n    - a list of strings,\n    - integer binary data,\n    - numeric continuous data\n    - pandas Series, DataFrame or numpy array\n\nOnly 2 phenotypes are allowed with logistic regression. Use Linear regression with numeric (measurement) phenotypes like age or time. You can pass in the GEO meta DataFrame associated with a dataset along with `column=<columnname>` kwarg. The order of the items in the phenotype should match the order of samples in the beta values or M-values.\n\nCovariates are also supported for logistic (but not linear) regression. Pass in `covariates=True` to treat all other columns in a phenotype DataFrame as covariates, or pass in a list of column names to specify specific parts of the DataFrame. Note that supplying too many covariates for small sample sizes will lead to most probes failing with Linear Algebra or Perfect Separation errors.\n\nFor details on all of the other adjustable input parameters, refer to the API for [diff_meth_pos()](docs/source/modules.html#module-methylize.diff_meth_pos)\n\n### Returns\nA pandas dataframe of regression `statistics` with one row for each probe\nand these columns:\n\n    - `Coefficient`: regression coefficient\n    - `StandardError`: standard error    \n    - `95%CI_lower`: lower limit of the coefficient's 95% confidence interval\n    - `95%CI_upper`: upper limit of the coefficient's 95% confidence interval\n    - `PValue`: p-value: phenotype group A vs B - likelihood that the difference is significant for this probe/location\n    - `Rsquared`: proportion (0 to 1) of probe variance explained by your phenotype. Linear Regression Only.\n    - `FDR_QValue`: p-values corrected for multiple comparisons using the Benjamini-Hochberg FDR method. The False Discovery Rate (FDR) corrected p-values will remain comparable, regardless of the number of additional comparisons (probes) you include.\n\n    If a `q_cutoff` is specified, only probes with significant q-values less than the cutoff will be returned in the DataFrame.\n\n## Differentially methylated regions (DMR)\nPass in your `diff_meth_pos` (DMP) stats results DataFrame as input, and it will calculate and annotate differentially methylated regions (DMR) using the `combined-pvalues` pipeline. This function returns list of output files.\n\n    - calculates auto-correlation\n    - combines adjacent p-values\n    - performs false discovery rate (FDR) adjustment\n    - finds regions of enrichment (i.e. series of adjacent low p-values)\n    - assigns significance to those regions\n    - annotates significant regions with possibly relevant nearby Genes,\n      using the UCSC Genome Browser Database\n    - annotates candidate genes with expression levels for the sample tissue type,\n      if user specifies the sample tissue type.\n    - returns everything in a CSV that can be imported into other Genomic analysis packages.\n\nFor more details on customizing the inputs and outputs, see API for the [diff_meth_regions(stats, array_type)](docs/source/modules.html#module-methylize.diff_meth_regions) function.\n\n## Loading processed data\n\nAssuming you previously used `methylprep` to process a data set like this:\n\n```python\npython -m methylprep -v process -d GSE130030 --betas\n```\n\nThis creates two files, `beta_values.pkl` and `sample_sheet_meta_data.pkl`. You can load both in `methylize` like this:\n\nNavigate to the folder where `methylrep` saved its processed files, and start a python interpreter:\n```python\n>>>import methylcheck\n>>>data, meta = methylcheck.load_both()\nINFO:methylize.helpers:loaded data (485512, 14) from 1 pickled files (0.159s)\nINFO:methylize.helpers:meta.Sample_IDs match data.index (OK)\n```\n\nOr if you are running in a notebook, specify the path:\n```python\nimport methylcheck\ndata, meta = methylcheck.load_both('<path_to...>/GSE105018')\n```\n\nThis also validates both files, and ensures that the `Sample_ID` column in meta DataFrame aligns with the column names in the `data DataFrame`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FOXOBioScience/methylize",
    "keywords": "analysis methylation dna data processing life epigenetics illumina parallelization",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "methylize",
    "package_url": "https://pypi.org/project/methylize/",
    "platform": null,
    "project_url": "https://pypi.org/project/methylize/",
    "project_urls": {
      "Documentation": "https://life-epigenetics-methylize.readthedocs-hosted.com/en/latest/",
      "Funding": "https://FOXOBioScience.com/",
      "Homepage": "https://github.com/FOXOBioScience/methylize",
      "Source": "https://github.com/FOXOBioScience/methylize/"
    },
    "release_url": "https://pypi.org/project/methylize/1.1.1/",
    "requires_dist": [
      "pandas",
      "numpy",
      "scipy",
      "statsmodels",
      "matplotlib",
      "methylprep",
      "pymysql",
      "toolshed",
      "interlap",
      "adjustText",
      "joblib",
      "seaborn",
      "pytest ; extra == 'dev'",
      "coverage ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "EWAS Analysis software for Illumina methylation arrays",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14379432,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f58c7ece15c23013c407f231a1d7f13be7a26519e973f2f09423ccfb300673ac",
        "md5": "f872e80c9409b80e33e465915b32295a",
        "sha256": "b72166a37d0b073169098effd216422cdc05dec15e1fc6c01f1e4384ea11838f"
      },
      "downloads": -1,
      "filename": "methylize-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f872e80c9409b80e33e465915b32295a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 96999,
      "upload_time": "2022-07-08T21:17:02",
      "upload_time_iso_8601": "2022-07-08T21:17:02.225572Z",
      "url": "https://files.pythonhosted.org/packages/f5/8c/7ece15c23013c407f231a1d7f13be7a26519e973f2f09423ccfb300673ac/methylize-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02f981a0ee75e11e9a79ba684a2c5dd603cf653759d13b149ba257199f3ea586",
        "md5": "580d929072e89f9bb483dd3ba67d4670",
        "sha256": "b904faa93031976263df3a6bb7be34f401ef068adc8f582544ae2b96d09cc1a6"
      },
      "downloads": -1,
      "filename": "methylize-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "580d929072e89f9bb483dd3ba67d4670",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 78241,
      "upload_time": "2022-07-08T21:17:04",
      "upload_time_iso_8601": "2022-07-08T21:17:04.418105Z",
      "url": "https://files.pythonhosted.org/packages/02/f9/81a0ee75e11e9a79ba684a2c5dd603cf653759d13b149ba257199f3ea586/methylize-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}