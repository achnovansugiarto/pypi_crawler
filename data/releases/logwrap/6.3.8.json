{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        'arg0'=u'''arg0''',  # type: <class 'str'>\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg0''',\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.3.8/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.3.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7463fd8ba3078b4f223184909275b291625d342b36aab935db9eda9a4933b2ff",
        "md5": "960b21e56ea6543d162251ed73eba6b7",
        "sha256": "f715bbedf971e3cd776f3c446a067d0c2ae01ea0d7e522a76e04f05b529f03f2"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "960b21e56ea6543d162251ed73eba6b7",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1038834,
      "upload_time": "2019-11-11T09:59:53",
      "upload_time_iso_8601": "2019-11-11T09:59:53.306988Z",
      "url": "https://files.pythonhosted.org/packages/74/63/fd8ba3078b4f223184909275b291625d342b36aab935db9eda9a4933b2ff/logwrap-6.3.8-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13b609990b7ccc0967baf645d6deb65a6064e6b2e2e55ceec5d22a1f55c1bf02",
        "md5": "8f9fc6f801405c96566af3092b16c6cf",
        "sha256": "eabeebffe77415f48cb6327940466aab020b160e4100f2144e461141811a5404"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "8f9fc6f801405c96566af3092b16c6cf",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1139614,
      "upload_time": "2019-11-11T09:59:56",
      "upload_time_iso_8601": "2019-11-11T09:59:56.232406Z",
      "url": "https://files.pythonhosted.org/packages/13/b6/09990b7ccc0967baf645d6deb65a6064e6b2e2e55ceec5d22a1f55c1bf02/logwrap-6.3.8-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0135fac21ca7d45c900e6ff1bacd2fc1098b3c16addb7742a6ad6bdb39709c9",
        "md5": "ffe2ab082b1578714cc7a25572bdd948",
        "sha256": "fdd0c796938f00cd0dc9c1a0979a62854787fe0f14944782496c136b557979bb"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "ffe2ab082b1578714cc7a25572bdd948",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 161854,
      "upload_time": "2019-11-11T10:30:45",
      "upload_time_iso_8601": "2019-11-11T10:30:45.701900Z",
      "url": "https://files.pythonhosted.org/packages/b0/13/5fac21ca7d45c900e6ff1bacd2fc1098b3c16addb7742a6ad6bdb39709c9/logwrap-6.3.8-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba5e40c9f116e1ebc739738f582bec22dff33a97c848d2252e68ed7d00f4459a",
        "md5": "8afc8ea978ea778a5b78b21ff6897db9",
        "sha256": "740d9b7ac4569bea5ebebf7ce6e23638d9104664eda654ac3fe1935833d92d00"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "8afc8ea978ea778a5b78b21ff6897db9",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 185941,
      "upload_time": "2019-11-11T10:30:52",
      "upload_time_iso_8601": "2019-11-11T10:30:52.107961Z",
      "url": "https://files.pythonhosted.org/packages/ba/5e/40c9f116e1ebc739738f582bec22dff33a97c848d2252e68ed7d00f4459a/logwrap-6.3.8-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4af65fabda9004afb755bccfda943286966aae3a1a175bf9268c02f96696e9df",
        "md5": "358b1d98d407847e5a00db9751b2dd88",
        "sha256": "0a7cb7ce717b7761b84deac9ad866dc84e95328ed3975ce71696a7f570a5dee7"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "358b1d98d407847e5a00db9751b2dd88",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1031032,
      "upload_time": "2019-11-11T09:59:58",
      "upload_time_iso_8601": "2019-11-11T09:59:58.509718Z",
      "url": "https://files.pythonhosted.org/packages/4a/f6/5fabda9004afb755bccfda943286966aae3a1a175bf9268c02f96696e9df/logwrap-6.3.8-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85de89e07406275620ced1d4519bbc1d0c56457842a53709ceef01bc037785d5",
        "md5": "d57c7bbee3cfd5cf112ea295fafd8f3f",
        "sha256": "c748f6c5b6d7fb2727b861dc564f7f99ed51c90e76e8ded3330efebea3c95480"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "d57c7bbee3cfd5cf112ea295fafd8f3f",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1128774,
      "upload_time": "2019-11-11T10:00:01",
      "upload_time_iso_8601": "2019-11-11T10:00:01.000498Z",
      "url": "https://files.pythonhosted.org/packages/85/de/89e07406275620ced1d4519bbc1d0c56457842a53709ceef01bc037785d5/logwrap-6.3.8-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e41380e13f0e030c8829dd7d282e3d69e48c3e93b26aa9bbf08934ec4e2e2a8",
        "md5": "50d7b31622f9d1d249e87b4346b4492c",
        "sha256": "644f645c2d30b7ccb93e1d57f995ca44a1ef11f0c433e42a6d1ba598c99875f4"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "50d7b31622f9d1d249e87b4346b4492c",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 161796,
      "upload_time": "2019-11-11T10:30:44",
      "upload_time_iso_8601": "2019-11-11T10:30:44.107840Z",
      "url": "https://files.pythonhosted.org/packages/6e/41/380e13f0e030c8829dd7d282e3d69e48c3e93b26aa9bbf08934ec4e2e2a8/logwrap-6.3.8-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81c4eff091d28d76802b3622e0c846b0475af65826e4535e060ccaf98333bdf7",
        "md5": "656a51b9499538a7e1881c19c82d15fa",
        "sha256": "effe85d6e2859c929378c359fc0e1cb3ad1f42e50575efc9937969e3b19c4bbf"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "656a51b9499538a7e1881c19c82d15fa",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 186251,
      "upload_time": "2019-11-11T10:30:43",
      "upload_time_iso_8601": "2019-11-11T10:30:43.338819Z",
      "url": "https://files.pythonhosted.org/packages/81/c4/eff091d28d76802b3622e0c846b0475af65826e4535e060ccaf98333bdf7/logwrap-6.3.8-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d73999ea063343ea2451d31eed5071c419e8dcb2422a3b1479395ddfcc7e82f4",
        "md5": "da83b2a12d290ff480637a6b587b0119",
        "sha256": "8d89e3fe2abac4c72c428195ea937a584488d208d5c2cb16543e27b171a9745a"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp38-cp38-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "da83b2a12d290ff480637a6b587b0119",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1143535,
      "upload_time": "2019-11-11T10:00:03",
      "upload_time_iso_8601": "2019-11-11T10:00:03.721722Z",
      "url": "https://files.pythonhosted.org/packages/d7/39/99ea063343ea2451d31eed5071c419e8dcb2422a3b1479395ddfcc7e82f4/logwrap-6.3.8-cp38-cp38-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "519ed749053a463d35277644de4136943b799c4f4f4deba3ce2b8f8d5bb0f7f9",
        "md5": "b41bdb688e19d7371edac9ea70b0101e",
        "sha256": "6c4552c6b9482ce4ffc7c30d23ae13895bc7ff537a813ff498f3f730f748e9f8"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b41bdb688e19d7371edac9ea70b0101e",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1259210,
      "upload_time": "2019-11-11T10:00:06",
      "upload_time_iso_8601": "2019-11-11T10:00:06.237506Z",
      "url": "https://files.pythonhosted.org/packages/51/9e/d749053a463d35277644de4136943b799c4f4f4deba3ce2b8f8d5bb0f7f9/logwrap-6.3.8-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55ee54a26490e188a2746a83cc82fa9b475b155585602871214ccfe0fc26be92",
        "md5": "5b91affa3db096b3a7929f6753fe683f",
        "sha256": "7f60cbc81ad23409e258333a9c7c272c482b5fbeab030c675b3e402ed7a88e58"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp38-cp38m-win32.whl",
      "has_sig": false,
      "md5_digest": "5b91affa3db096b3a7929f6753fe683f",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 168004,
      "upload_time": "2019-11-11T10:30:48",
      "upload_time_iso_8601": "2019-11-11T10:30:48.669116Z",
      "url": "https://files.pythonhosted.org/packages/55/ee/54a26490e188a2746a83cc82fa9b475b155585602871214ccfe0fc26be92/logwrap-6.3.8-cp38-cp38m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7256734b9179395a8abe35c6aaa507b41671ac8dfcf816fc0c184729964e77a",
        "md5": "da0b3f08c8a5b228c60ecff486b96ea3",
        "sha256": "c9e62b03ce58e6920a91b707bdbf943065acdbaa710521af3adaf537ef6e0be0"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-cp38-cp38m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "da0b3f08c8a5b228c60ecff486b96ea3",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 194932,
      "upload_time": "2019-11-11T10:30:50",
      "upload_time_iso_8601": "2019-11-11T10:30:50.842785Z",
      "url": "https://files.pythonhosted.org/packages/c7/25/6734b9179395a8abe35c6aaa507b41671ac8dfcf816fc0c184729964e77a/logwrap-6.3.8-cp38-cp38m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45ab63a8baeaa39535b2235232888292344484a14d8a063f56879e618b84099e",
        "md5": "a5d6a2eac9188677e6790515b319794e",
        "sha256": "e4d9c53935c47d071ec96d4cff01a0a553f7927cf4a50e4f9705b11debd2123a"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5d6a2eac9188677e6790515b319794e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25358,
      "upload_time": "2019-11-11T10:00:08",
      "upload_time_iso_8601": "2019-11-11T10:00:08.296621Z",
      "url": "https://files.pythonhosted.org/packages/45/ab/63a8baeaa39535b2235232888292344484a14d8a063f56879e618b84099e/logwrap-6.3.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e0bad55263d821cfdfd4a98093c5b20d0fe268b7fcfbacf7cbd8dc2d41f09cf",
        "md5": "12f779ad44be50fd1550f1da91ec405b",
        "sha256": "9931fc6c9b854b2a9c2f9a739192b5d057f5a4dfce1009f7c6d20b218e5b72e7"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.8.tar.gz",
      "has_sig": false,
      "md5_digest": "12f779ad44be50fd1550f1da91ec405b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 42031,
      "upload_time": "2019-11-11T10:00:09",
      "upload_time_iso_8601": "2019-11-11T10:00:09.888687Z",
      "url": "https://files.pythonhosted.org/packages/8e/0b/ad55263d821cfdfd4a98093c5b20d0fe268b7fcfbacf7cbd8dc2d41f09cf/logwrap-6.3.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}