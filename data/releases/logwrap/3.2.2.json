{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.org/penguinolog/logwrap.svg?branch=master\n    :target: https://travis-ci.org/python-useful-helpers/logwrap\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 2.7\n    Python 3.4\n    Python 3.5\n    Python 3.6\n    PyPy\n    PyPy3 3.5+\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example:\n\n.. code-block:: python3\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',\n        'arg2'=u'''arg2''',\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',\n        'kwarg2'=u'''kwarg2''',\n        # VAR_KEYWORD:\n        'kwargs'=\n             dict({\n                'kwarg3': u'''kwarg3''',\n             }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLimitations:\n\n* nested wrapping (`@logwrap @deco2 ...`) is not parsed under python 2.7: `functools.wraps` limitation. Please set `logwrap` as the first level decorator.\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n        py2_str=False,  # use bytes for python 2 __repr__ and __str__\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n        py2_str=False,  # use bytes for python 2 __repr__ and __str__\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n        py2_str=False,  # use bytes for python 2 __repr__ and __str__\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nTest environments available:\n\n::\n\n    pep8\n    py27\n    py34\n    py35\n    py36\n    pypy\n    pypy3\n    pylint\n    pep257\n    docs\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.org/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\nCD system\n=========\n`Travis CI: <https://travis-ci.org/python-useful-helpers/logwrap>`_ is used for package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/3.2.2/",
    "requires_dist": [
      "six",
      "typing (>=3.6)",
      "funcsigs (>=1.0); python_version == \"2.7\""
    ],
    "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "3.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9095cd5fff5da16f4cce8cd850b4398dfb908251a3f3b7ee4df355801344c510",
        "md5": "1ba1e3b256109575782614a69c356439",
        "sha256": "95b4697d9e0614bcc6c13505b0a37c5f9b9c345a43c6f5de3ea9665cd1a7ece5"
      },
      "downloads": -1,
      "filename": "logwrap-3.2.2-cp34-cp34m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "1ba1e3b256109575782614a69c356439",
      "packagetype": "bdist_wheel",
      "python_version": "cp34",
      "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
      "size": 577976,
      "upload_time": "2018-03-23T17:43:04",
      "upload_time_iso_8601": "2018-03-23T17:43:04.837125Z",
      "url": "https://files.pythonhosted.org/packages/90/95/cd5fff5da16f4cce8cd850b4398dfb908251a3f3b7ee4df355801344c510/logwrap-3.2.2-cp34-cp34m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8780a34cb7fb398b542bae6aa7b51e58cd05773f15842433069be7b4323b281b",
        "md5": "44ae5a08fe06318c21f4fb1b6dd00aa0",
        "sha256": "54c72f69108d5a6cb393f2df07c04448aee90e22b2b3e473a3d0ac3cb6438c8c"
      },
      "downloads": -1,
      "filename": "logwrap-3.2.2-cp34-cp34m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "44ae5a08fe06318c21f4fb1b6dd00aa0",
      "packagetype": "bdist_wheel",
      "python_version": "cp34",
      "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
      "size": 608143,
      "upload_time": "2018-03-23T17:43:06",
      "upload_time_iso_8601": "2018-03-23T17:43:06.399388Z",
      "url": "https://files.pythonhosted.org/packages/87/80/a34cb7fb398b542bae6aa7b51e58cd05773f15842433069be7b4323b281b/logwrap-3.2.2-cp34-cp34m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9666196cddc95976bf9b8881b466abe246afe184925478b54098de24dbd76cb1",
        "md5": "b0b92166d732cab8227b9cd03cb99dcd",
        "sha256": "679816016c8775e71a575506978c92255307bb4dd70d082b84eda64fb6a40425"
      },
      "downloads": -1,
      "filename": "logwrap-3.2.2-cp35-cp35m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "b0b92166d732cab8227b9cd03cb99dcd",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
      "size": 562356,
      "upload_time": "2018-03-23T17:43:07",
      "upload_time_iso_8601": "2018-03-23T17:43:07.800219Z",
      "url": "https://files.pythonhosted.org/packages/96/66/196cddc95976bf9b8881b466abe246afe184925478b54098de24dbd76cb1/logwrap-3.2.2-cp35-cp35m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f77426bf2c9e5667f219914c2be4b519277ed152d909bec07520af4c35a11afc",
        "md5": "2234092ad02fcf27e295be7c0f4eadef",
        "sha256": "cedeffbdb1a64fd10ede14b6f304d8b518c041b89944977503e69e25b6efeaaf"
      },
      "downloads": -1,
      "filename": "logwrap-3.2.2-cp35-cp35m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "2234092ad02fcf27e295be7c0f4eadef",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
      "size": 597542,
      "upload_time": "2018-03-23T17:43:09",
      "upload_time_iso_8601": "2018-03-23T17:43:09.276666Z",
      "url": "https://files.pythonhosted.org/packages/f7/74/26bf2c9e5667f219914c2be4b519277ed152d909bec07520af4c35a11afc/logwrap-3.2.2-cp35-cp35m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d31dd5b075e6cb1f85a41142fe0f98e426211c8deb252dff5251ace200506dc",
        "md5": "510ef678f704dd625da80ccc1b678e24",
        "sha256": "aed3a42324fcafe67d0d0fbb2735ac5c4b4f6aa1d63e2c05fdb15ca7f39a02e0"
      },
      "downloads": -1,
      "filename": "logwrap-3.2.2-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "510ef678f704dd625da80ccc1b678e24",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
      "size": 576133,
      "upload_time": "2018-03-23T17:43:10",
      "upload_time_iso_8601": "2018-03-23T17:43:10.697388Z",
      "url": "https://files.pythonhosted.org/packages/4d/31/dd5b075e6cb1f85a41142fe0f98e426211c8deb252dff5251ace200506dc/logwrap-3.2.2-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aea0dfcebb262f3cf5f08a4ea0dc38c375792299bec356e591b0324dc53afbb4",
        "md5": "caca41de6316974250347d1e51af8820",
        "sha256": "df2e2d26ed2c4745b4c5cd76fe01f1fe37131384f0a47fbd9e8f449eb300e09b"
      },
      "downloads": -1,
      "filename": "logwrap-3.2.2-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "caca41de6316974250347d1e51af8820",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
      "size": 606670,
      "upload_time": "2018-03-23T17:43:12",
      "upload_time_iso_8601": "2018-03-23T17:43:12.177596Z",
      "url": "https://files.pythonhosted.org/packages/ae/a0/dfcebb262f3cf5f08a4ea0dc38c375792299bec356e591b0324dc53afbb4/logwrap-3.2.2-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c36a9171d3bf8347fe31d4bdd40187a10808169797b99eda925932ad89c56377",
        "md5": "29a96c20d8d2c1931c540086847ef96e",
        "sha256": "aeeec0d3626a66735ba8bcca570ed95e3dd371cd89c20041d42f3de4b29392c6"
      },
      "downloads": -1,
      "filename": "logwrap-3.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "29a96c20d8d2c1931c540086847ef96e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
      "size": 230232,
      "upload_time": "2018-03-23T17:43:13",
      "upload_time_iso_8601": "2018-03-23T17:43:13.786816Z",
      "url": "https://files.pythonhosted.org/packages/c3/6a/9171d3bf8347fe31d4bdd40187a10808169797b99eda925932ad89c56377/logwrap-3.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}