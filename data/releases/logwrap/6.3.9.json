{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        'arg0'=u'''arg0''',  # type: <class 'str'>\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg0''',\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.3.9/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.3.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3b1ff9b5ee1e309b4109de778aa2934e1c1b370d866638741e1c4ad171ace65",
        "md5": "5062721c0935eb30da4f2bb77a8f15a5",
        "sha256": "2d94b627a5fca69e6e2fed90dbaf46dd2d0017ab4a3538dd4654a39886fd1aa1"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "5062721c0935eb30da4f2bb77a8f15a5",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1039932,
      "upload_time": "2019-11-12T09:05:03",
      "upload_time_iso_8601": "2019-11-12T09:05:03.946357Z",
      "url": "https://files.pythonhosted.org/packages/f3/b1/ff9b5ee1e309b4109de778aa2934e1c1b370d866638741e1c4ad171ace65/logwrap-6.3.9-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86e769d431df1a396470536e29c9c0832a13b057be4fca20c42aac97a8a60116",
        "md5": "c4d6863def785d93d92960193f3c206b",
        "sha256": "3bd67a2272b9839c70dc252801b83d619644eae07836659bda4bf094a5632831"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c4d6863def785d93d92960193f3c206b",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1140287,
      "upload_time": "2019-11-12T09:05:06",
      "upload_time_iso_8601": "2019-11-12T09:05:06.322564Z",
      "url": "https://files.pythonhosted.org/packages/86/e7/69d431df1a396470536e29c9c0832a13b057be4fca20c42aac97a8a60116/logwrap-6.3.9-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b56dfd72eac8295fe41e597bfe919bd948778c9d7273762f265c735446dacdb6",
        "md5": "2c3b46b62dec3d1222526233792799f5",
        "sha256": "da18c2274c4098b99fe9ede5a15d630488c447a3a8f863567a620eb08196b534"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "2c3b46b62dec3d1222526233792799f5",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 161869,
      "upload_time": "2019-11-12T08:59:07",
      "upload_time_iso_8601": "2019-11-12T08:59:07.326168Z",
      "url": "https://files.pythonhosted.org/packages/b5/6d/fd72eac8295fe41e597bfe919bd948778c9d7273762f265c735446dacdb6/logwrap-6.3.9-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8168835fb45e6dc5dd3f77e0cc3b5a66c132122503f82612816efb7ea93bc05a",
        "md5": "035c504557a8ed3c4fef2dcdaf2868ea",
        "sha256": "be4dbe1471bfc78062576e0d751dbb57a33cd94f5ac9bbaf9871d5cb074b8bd5"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "035c504557a8ed3c4fef2dcdaf2868ea",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 185958,
      "upload_time": "2019-11-12T08:59:05",
      "upload_time_iso_8601": "2019-11-12T08:59:05.402822Z",
      "url": "https://files.pythonhosted.org/packages/81/68/835fb45e6dc5dd3f77e0cc3b5a66c132122503f82612816efb7ea93bc05a/logwrap-6.3.9-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51562aa257e6a0d5c31e2073325732edad0e226e38053d0ce0ff1a47715b5bdf",
        "md5": "d2721bfd9353f740ac6b6e0306d6c264",
        "sha256": "89687297cd9b9236bd33df004ce81da9698f850dc4966786574d10a84da74a17"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "d2721bfd9353f740ac6b6e0306d6c264",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1031971,
      "upload_time": "2019-11-12T09:05:09",
      "upload_time_iso_8601": "2019-11-12T09:05:09.113288Z",
      "url": "https://files.pythonhosted.org/packages/51/56/2aa257e6a0d5c31e2073325732edad0e226e38053d0ce0ff1a47715b5bdf/logwrap-6.3.9-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4565c3a7c54b36a3765d72858668a83701c4a91d337470a17b51e8b47cc9707",
        "md5": "2a83db8f23ff7a28e0bcbde1fa8ec954",
        "sha256": "e543a3b2e1934d0aa18798a814f45dffd18592d8208def1d0b8b7e946003ed8f"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "2a83db8f23ff7a28e0bcbde1fa8ec954",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1129210,
      "upload_time": "2019-11-12T09:05:11",
      "upload_time_iso_8601": "2019-11-12T09:05:11.414041Z",
      "url": "https://files.pythonhosted.org/packages/f4/56/5c3a7c54b36a3765d72858668a83701c4a91d337470a17b51e8b47cc9707/logwrap-6.3.9-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4be28ae9465cd4932cbe2c489625cba82b69ea448d7345c176e75f251f070fa7",
        "md5": "aac0b88a0aee5459aed33243770b843c",
        "sha256": "f13d09e10a191aa0995b76f7b058fa146233c9a90a8c476b942698384de2d1a7"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "aac0b88a0aee5459aed33243770b843c",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 161809,
      "upload_time": "2019-11-12T08:59:05",
      "upload_time_iso_8601": "2019-11-12T08:59:05.586610Z",
      "url": "https://files.pythonhosted.org/packages/4b/e2/8ae9465cd4932cbe2c489625cba82b69ea448d7345c176e75f251f070fa7/logwrap-6.3.9-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5233f15f35af83bb695bb8990e1bc7b7c9b53615755fac9aad44cd2ed9052423",
        "md5": "0c59b86616e198230723baf19f1209ae",
        "sha256": "aaaf5115a58b6e973bd40c9b192969f4df7e07f305ccbb0770c784b4ecdf6366"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "0c59b86616e198230723baf19f1209ae",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 186267,
      "upload_time": "2019-11-12T08:59:14",
      "upload_time_iso_8601": "2019-11-12T08:59:14.600958Z",
      "url": "https://files.pythonhosted.org/packages/52/33/f15f35af83bb695bb8990e1bc7b7c9b53615755fac9aad44cd2ed9052423/logwrap-6.3.9-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c28d97e9c48edab20fc1968f916bde2d172669d531650ec3708c50816d2813bd",
        "md5": "c7a45d1d55f8765f47d13077e1c92e5e",
        "sha256": "7f6a49d4be29cba531f957c429a9261c136e5316f37ee046000671950f990664"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp38-cp38-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "c7a45d1d55f8765f47d13077e1c92e5e",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1144634,
      "upload_time": "2019-11-12T09:05:13",
      "upload_time_iso_8601": "2019-11-12T09:05:13.736671Z",
      "url": "https://files.pythonhosted.org/packages/c2/8d/97e9c48edab20fc1968f916bde2d172669d531650ec3708c50816d2813bd/logwrap-6.3.9-cp38-cp38-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ffab73ba9dc8f078fb0b58a3704f63f9e2525f80b13c3eab6d32a4ab73c09cc",
        "md5": "c288f281f4af2e4e43027ce60ff78da8",
        "sha256": "a23b5a42adea8c7faae8d802fb6b1639a787b60f872b4d47501c72fd3e40fa4e"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c288f281f4af2e4e43027ce60ff78da8",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1259703,
      "upload_time": "2019-11-12T09:05:16",
      "upload_time_iso_8601": "2019-11-12T09:05:16.032162Z",
      "url": "https://files.pythonhosted.org/packages/3f/fa/b73ba9dc8f078fb0b58a3704f63f9e2525f80b13c3eab6d32a4ab73c09cc/logwrap-6.3.9-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62541a96b7fb2f2b1835b14bfc1f166799de35471f2853f40db0b851a0d4bed7",
        "md5": "b18d4f67a902019ed67f5f2a48983af4",
        "sha256": "c8ee23ef80878c4ab272cc4fc211c8313e8db989a175489b3bc2951bb9b6914e"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp38-cp38m-win32.whl",
      "has_sig": false,
      "md5_digest": "b18d4f67a902019ed67f5f2a48983af4",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 168018,
      "upload_time": "2019-11-12T08:59:05",
      "upload_time_iso_8601": "2019-11-12T08:59:05.381860Z",
      "url": "https://files.pythonhosted.org/packages/62/54/1a96b7fb2f2b1835b14bfc1f166799de35471f2853f40db0b851a0d4bed7/logwrap-6.3.9-cp38-cp38m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e314226b35ffcf3d90f9f0db1897a74e5c02fa23e17555f1ffeed3afae06d766",
        "md5": "113e1ee3a62847987e3a72f8b67556ed",
        "sha256": "4580dbd206a68c3c6070cd37ebf5e2ccc8abb3dbcb373d3c2601dffaeb51f486"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-cp38-cp38m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "113e1ee3a62847987e3a72f8b67556ed",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 194944,
      "upload_time": "2019-11-12T08:58:55",
      "upload_time_iso_8601": "2019-11-12T08:58:55.387534Z",
      "url": "https://files.pythonhosted.org/packages/e3/14/226b35ffcf3d90f9f0db1897a74e5c02fa23e17555f1ffeed3afae06d766/logwrap-6.3.9-cp38-cp38m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88f40fbd32ed123b93e255fabbdf6d4f71f9b1cfd6c3144e7106e289a22a9291",
        "md5": "acafcce8b14373bd9e9ce1d7cd290e2d",
        "sha256": "df4ec1e48c84a480e2b1f31dc57cf242b090f3ed454df82b1e402c9a4fa71689"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "acafcce8b14373bd9e9ce1d7cd290e2d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25377,
      "upload_time": "2019-11-12T09:05:18",
      "upload_time_iso_8601": "2019-11-12T09:05:18.340692Z",
      "url": "https://files.pythonhosted.org/packages/88/f4/0fbd32ed123b93e255fabbdf6d4f71f9b1cfd6c3144e7106e289a22a9291/logwrap-6.3.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42be8b0534579b7cbbfb76754259c9f5661ee27618a6d6511ddd0d0f4d04d9b5",
        "md5": "cca011133057dd17be2b14673a901eac",
        "sha256": "45835faed5464ec5561b9b5fc88ec680cf817f790fa3452f66121ece6dbdaea2"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.9.tar.gz",
      "has_sig": false,
      "md5_digest": "cca011133057dd17be2b14673a901eac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 42110,
      "upload_time": "2019-11-12T09:05:20",
      "upload_time_iso_8601": "2019-11-12T09:05:20.366801Z",
      "url": "https://files.pythonhosted.org/packages/42/be/8b0534579b7cbbfb76754259c9f5661ee27618a6d6511ddd0d0f4d04d9b5/logwrap-6.3.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}