{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n\n.. note:: Python 3.4 and 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example:\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.3.1/",
    "requires_dist": null,
    "requires_python": ">=3.5.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "74f32cdc012c2405b81989a76a0eb06a8da880c8e5701034954be7a4df2f219c",
        "md5": "2c86ba960a10155568151c303dc5a743",
        "sha256": "9d0e683695f28dbd178b3a5086724da63a159d6a99fb6c9992a325fc50759c34"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.1-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "2c86ba960a10155568151c303dc5a743",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.5.0",
      "size": 1037727,
      "upload_time": "2019-05-14T15:38:05",
      "upload_time_iso_8601": "2019-05-14T15:38:05.517737Z",
      "url": "https://files.pythonhosted.org/packages/74/f3/2cdc012c2405b81989a76a0eb06a8da880c8e5701034954be7a4df2f219c/logwrap-6.3.1-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01871fa90cf71ed4eac938d722dc42849e12aea067e02586642fa4038449cb8f",
        "md5": "d077cbaebd9a712fb69d629bee6c72db",
        "sha256": "8099287d091ee6c8b6bc61489cac517d8da384ce1e6a0859e6f889b0701149d0"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.1-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "d077cbaebd9a712fb69d629bee6c72db",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.5.0",
      "size": 1134729,
      "upload_time": "2019-05-14T15:38:08",
      "upload_time_iso_8601": "2019-05-14T15:38:08.014835Z",
      "url": "https://files.pythonhosted.org/packages/01/87/1fa90cf71ed4eac938d722dc42849e12aea067e02586642fa4038449cb8f/logwrap-6.3.1-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69756b05962fd4a173888b5e12f2dc051d5ddfeb1855c456d877b36b8c3d2603",
        "md5": "7c31fb7b0788e33ef3b54acc77304a79",
        "sha256": "abc3fb1375b237cb51eceda167ff3c593f6f30951426fe8bcb952d32c4b0131e"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.1-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "7c31fb7b0788e33ef3b54acc77304a79",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.5.0",
      "size": 159715,
      "upload_time": "2019-05-14T15:37:17",
      "upload_time_iso_8601": "2019-05-14T15:37:17.148125Z",
      "url": "https://files.pythonhosted.org/packages/69/75/6b05962fd4a173888b5e12f2dc051d5ddfeb1855c456d877b36b8c3d2603/logwrap-6.3.1-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d838e491b4b0b0373bf436ad24a666271ec03e9012441074e29df8cde11151c",
        "md5": "1e90e2a484da7ba1dba1e1dbae2ad36e",
        "sha256": "fcb5e04d28c1c8c8d5ed88cb8d57714650942a56c043c17f50b514b56c0041f2"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.1-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "1e90e2a484da7ba1dba1e1dbae2ad36e",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.5.0",
      "size": 183402,
      "upload_time": "2019-05-14T15:37:31",
      "upload_time_iso_8601": "2019-05-14T15:37:31.442796Z",
      "url": "https://files.pythonhosted.org/packages/2d/83/8e491b4b0b0373bf436ad24a666271ec03e9012441074e29df8cde11151c/logwrap-6.3.1-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "74add0dc2206091141c466db37d34bd94ed2aafb84573d82427c13391b65cd9a",
        "md5": "392086d08ce7a5df2cc0f4c306393ebb",
        "sha256": "74d12406e83df1609bd02cf6e1284f669d4481b10c69651bc0daa72ae575c0c2"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.1-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "392086d08ce7a5df2cc0f4c306393ebb",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.5.0",
      "size": 1028558,
      "upload_time": "2019-05-14T15:38:10",
      "upload_time_iso_8601": "2019-05-14T15:38:10.630532Z",
      "url": "https://files.pythonhosted.org/packages/74/ad/d0dc2206091141c466db37d34bd94ed2aafb84573d82427c13391b65cd9a/logwrap-6.3.1-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b946e46d6635428c4b95f9979705979322f5cdb4830e75130f931bb29d37b7e",
        "md5": "8dedd77c9890801275dc9e42d7bd8ebc",
        "sha256": "cd0e2e40716a32cc387715cd53da6a65f23620b1edd53c107c5d5f09e1bd3ded"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.1-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "8dedd77c9890801275dc9e42d7bd8ebc",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.5.0",
      "size": 1123800,
      "upload_time": "2019-05-14T15:38:12",
      "upload_time_iso_8601": "2019-05-14T15:38:12.614885Z",
      "url": "https://files.pythonhosted.org/packages/3b/94/6e46d6635428c4b95f9979705979322f5cdb4830e75130f931bb29d37b7e/logwrap-6.3.1-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1cc4ba656102eeea1f6c3b8040bb9845edc40b9e21958b31d16a17fb3f4a257",
        "md5": "9c660cad1cb4738ab4a2e489ce5ded03",
        "sha256": "f26b90c153b44aa218d1d2c408e7225def7bd69ff2752feb9abd8714dc9fa730"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.1-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "9c660cad1cb4738ab4a2e489ce5ded03",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.5.0",
      "size": 159753,
      "upload_time": "2019-05-14T15:38:42",
      "upload_time_iso_8601": "2019-05-14T15:38:42.418140Z",
      "url": "https://files.pythonhosted.org/packages/a1/cc/4ba656102eeea1f6c3b8040bb9845edc40b9e21958b31d16a17fb3f4a257/logwrap-6.3.1-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b655b30b56a0c03a3239ea36fabe2549f18646faa3a9660af1d2ae4bde1b2cf",
        "md5": "8c6b7b34bbd92f0320bd798d9c0fa6f6",
        "sha256": "f4bb2881f0d594e916be6c70593d9a78764db6b25a42da8d05d311bffb663618"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.1-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "8c6b7b34bbd92f0320bd798d9c0fa6f6",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.5.0",
      "size": 183698,
      "upload_time": "2019-05-14T15:38:25",
      "upload_time_iso_8601": "2019-05-14T15:38:25.073020Z",
      "url": "https://files.pythonhosted.org/packages/7b/65/5b30b56a0c03a3239ea36fabe2549f18646faa3a9660af1d2ae4bde1b2cf/logwrap-6.3.1-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e1ae1a5dda460db7b4f3762fd8749622f7192839ee519ea2c5bd4a24804f2e7",
        "md5": "e8f3ca7e6b361811e8c5386e9035ad90",
        "sha256": "33de1dc0e493c413e1a773c460d572f43373f2295061fc3b0224de3f87f6b68e"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e8f3ca7e6b361811e8c5386e9035ad90",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5.0",
      "size": 25217,
      "upload_time": "2019-05-14T15:38:14",
      "upload_time_iso_8601": "2019-05-14T15:38:14.891721Z",
      "url": "https://files.pythonhosted.org/packages/0e/1a/e1a5dda460db7b4f3762fd8749622f7192839ee519ea2c5bd4a24804f2e7/logwrap-6.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d10d61fd170806174bef90d2539e2eb56a6f66c828152da1d856b986fd38fe16",
        "md5": "aae70709902d620d0d18c4724cb61b32",
        "sha256": "8e025fcd61ea6a921e93a71788179e2bb4f9f0ba9eafc2d014b416347a913cb8"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "aae70709902d620d0d18c4724cb61b32",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.0",
      "size": 41676,
      "upload_time": "2019-05-14T15:38:16",
      "upload_time_iso_8601": "2019-05-14T15:38:16.337817Z",
      "url": "https://files.pythonhosted.org/packages/d1/0d/61fd170806174bef90d2539e2eb56a6f66c828152da1d856b986fd38fe16/logwrap-6.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}