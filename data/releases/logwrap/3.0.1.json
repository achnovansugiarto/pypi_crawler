{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.org/penguinolog/logwrap.svg?branch=master\n    :target: https://travis-ci.org/penguinolog/logwrap\n.. image:: https://coveralls.io/repos/github/penguinolog/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/penguinolog/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/penguinolog/logwrap.svg\n    :target: https://raw.githubusercontent.com/penguinolog/logwrap/master/LICENSE\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/penguinolog/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 2.7\n    Python 3.4\n    Python 3.5\n    Python 3.6\n    PyPy\n    PyPy3 3.5+\n\nThis package includes helpers:\n\n* `logwrap` - main helper\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example:\n\n.. code-block:: python3\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',\n        'arg2'=u'''arg2''',\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',\n        'kwarg2'=u'''kwarg2''',\n        # VAR_KEYWORD:\n        'kwargs'=\n             dict({\n                'kwarg3': u'''kwarg3''',\n             }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLimitations:\n\n* nested wrapping (`@logwrap @deco2 ...`) is not parsed under python 2.7: `functools.wraps` limitation. Please set `logwrap` as the first level decorator.\n\nLogWrap\n-------\nMay be used as `logwrap` with possibility to read and change several parameters later.\n\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n        py2_str=False,  # use bytes for python 2 __repr__ and __str__\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n        py2_str=False,  # use bytes for python 2 __repr__ and __str__\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class. on `pretty_repr` instance of this class is created and executed.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        keyword='repr',  # Currently 'repr' is supported, will be extended in the future\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n        py2_str=False,  # use bytes for python 2 __repr__ and __str__\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nTest environments available:\n\n::\n\n    pep8\n    py27\n    py34\n    py35\n    py36\n    pypy\n    pypy3\n    pylint\n    docs\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.org/penguinolog/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/penguinolog/logwrap>`_ is used for coverage display.\n\nCD system\n=========\n`Travis CI: <https://travis-ci.org/penguinolog/logwrap>`_ is used for package delivery on PyPI.\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/penguinolog/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Homepage": "https://github.com/penguinolog/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/3.0.1/",
    "requires_dist": [
      "six",
      "typing (>=3.6)",
      "funcsigs (>=1.0); python_version == \"2.7\""
    ],
    "requires_python": "",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "3.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad7682d80d02b7f656b0cb55fd38f3ae053b02affb3f09838696c27466557f14",
        "md5": "ff49a5c602c7c3ce28a2291f7e414d8a",
        "sha256": "28395a4eb082207e6fc7b27e6dc2c300054da2d63136a0ad25b6a012e73f72c4"
      },
      "downloads": -1,
      "filename": "logwrap-3.0.1-cp34-cp34m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "ff49a5c602c7c3ce28a2291f7e414d8a",
      "packagetype": "bdist_wheel",
      "python_version": "cp34",
      "requires_python": null,
      "size": 554690,
      "upload_time": "2017-09-12T09:35:43",
      "upload_time_iso_8601": "2017-09-12T09:35:43.952488Z",
      "url": "https://files.pythonhosted.org/packages/ad/76/82d80d02b7f656b0cb55fd38f3ae053b02affb3f09838696c27466557f14/logwrap-3.0.1-cp34-cp34m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18f0c6f9cf336e2ac7c2596b311cf01e412e196e740440de25ae4b8a0f0a6128",
        "md5": "e9e2e3b484ab981449dc12a0f141a377",
        "sha256": "02927faad7c12a66f3da22c0f75687c352780e5d388c3b8265785465462f7a9f"
      },
      "downloads": -1,
      "filename": "logwrap-3.0.1-cp34-cp34m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "e9e2e3b484ab981449dc12a0f141a377",
      "packagetype": "bdist_wheel",
      "python_version": "cp34",
      "requires_python": null,
      "size": 607658,
      "upload_time": "2017-09-12T09:35:46",
      "upload_time_iso_8601": "2017-09-12T09:35:46.565251Z",
      "url": "https://files.pythonhosted.org/packages/18/f0/c6f9cf336e2ac7c2596b311cf01e412e196e740440de25ae4b8a0f0a6128/logwrap-3.0.1-cp34-cp34m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4317806133835d1681220f32d8c7a04fe18f91d555ebc2133cd4ae5f63515861",
        "md5": "c182b35618a8f8e7b8170286bc984472",
        "sha256": "9ae631acfa57ab214819cec5afcffd18ff5f085581a4951a4c1bf1cb07f72e93"
      },
      "downloads": -1,
      "filename": "logwrap-3.0.1-cp35-cp35m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "c182b35618a8f8e7b8170286bc984472",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": null,
      "size": 546616,
      "upload_time": "2017-09-12T09:35:48",
      "upload_time_iso_8601": "2017-09-12T09:35:48.776993Z",
      "url": "https://files.pythonhosted.org/packages/43/17/806133835d1681220f32d8c7a04fe18f91d555ebc2133cd4ae5f63515861/logwrap-3.0.1-cp35-cp35m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "56c4a807b1806c7186af9082470331c30337b7e671c04ca6b16c7fb9ec5c4268",
        "md5": "b3c8ad0a81c6ed3c233f8611cd715aa5",
        "sha256": "51c98977962fccc77fdcb6a22ae24886e16e3bbd65c773993272ef636fe54e4b"
      },
      "downloads": -1,
      "filename": "logwrap-3.0.1-cp35-cp35m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b3c8ad0a81c6ed3c233f8611cd715aa5",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": null,
      "size": 594521,
      "upload_time": "2017-09-12T09:35:50",
      "upload_time_iso_8601": "2017-09-12T09:35:50.802014Z",
      "url": "https://files.pythonhosted.org/packages/56/c4/a807b1806c7186af9082470331c30337b7e671c04ca6b16c7fb9ec5c4268/logwrap-3.0.1-cp35-cp35m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "302225b34588d31d3692c59004f7f914d03ab7cd2ecabc696f78b55b7a055b0d",
        "md5": "bec1eca7015b140e26b23a8f54609448",
        "sha256": "2deded55f6a0ca1cf1275769d8f8697f4ebc172e12076fb599762caf482c6e87"
      },
      "downloads": -1,
      "filename": "logwrap-3.0.1-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "bec1eca7015b140e26b23a8f54609448",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 559263,
      "upload_time": "2017-09-12T09:35:52",
      "upload_time_iso_8601": "2017-09-12T09:35:52.470190Z",
      "url": "https://files.pythonhosted.org/packages/30/22/25b34588d31d3692c59004f7f914d03ab7cd2ecabc696f78b55b7a055b0d/logwrap-3.0.1-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf209b75a7ba1383857ed85ea066a95a7025575453497114b501227c5b639581",
        "md5": "0890eb0b88c8dfaea4bedca58081eeba",
        "sha256": "b71b37981cf7d3157a36729927e9ec83471493aa4fac615c0b7e5bb9836b713e"
      },
      "downloads": -1,
      "filename": "logwrap-3.0.1-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "0890eb0b88c8dfaea4bedca58081eeba",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 612228,
      "upload_time": "2017-09-12T09:35:54",
      "upload_time_iso_8601": "2017-09-12T09:35:54.856920Z",
      "url": "https://files.pythonhosted.org/packages/bf/20/9b75a7ba1383857ed85ea066a95a7025575453497114b501227c5b639581/logwrap-3.0.1-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f31532bd8a6c77c2d4b744ee64d7a09635fcbe77e38c96a88c4ae24a56cb9f6b",
        "md5": "40d781b8011856cf4efc214cfd088bec",
        "sha256": "b8a0c6bc6274f10a70081396c03bf2f188a5caa22e93389f2790719c356c2092"
      },
      "downloads": -1,
      "filename": "logwrap-3.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "40d781b8011856cf4efc214cfd088bec",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 233267,
      "upload_time": "2017-09-12T09:39:30",
      "upload_time_iso_8601": "2017-09-12T09:39:30.656388Z",
      "url": "https://files.pythonhosted.org/packages/f3/15/32bd8a6c77c2d4b744ee64d7a09635fcbe77e38c96a88c4ae24a56cb9f6b/logwrap-3.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}