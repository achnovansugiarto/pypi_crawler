{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip details in log (no traceback, no exception details - just class name)\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        arg0='arg0',  # type: str\n        # POSITIONAL_OR_KEYWORD:\n        arg1='arg1',  # type: str\n        arg2='arg2',  # type: str\n        # VAR_POSITIONAL:\n        args=(),\n        # KEYWORD_ONLY:\n        kwarg1='kwarg1',  # type: str\n        kwarg2='kwarg2',  # type: str\n        # VAR_KEYWORD:\n        kwargs={\n            'kwarg3': 'kwarg3',\n        },\n    )\n    Done: 'example_function1' with result:\n\n     (\n        'arg0',\n        'arg1',\n        'arg2',\n        (),\n        'kwarg1',\n        'kwarg2',\n        {\n            'kwarg3': 'kwarg3',\n        },\n     )\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/7.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "7.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "49df12cb021b39b01d5ab667b2cbb7d5d3a684043ddaf98cb35c9ca6e258eec0",
        "md5": "e2ef4859a181c348d5132d94710c7687",
        "sha256": "52e451732bf0dba8e72adf8a2cdb797b32f55aa0c2512d65e8ba64f014cf77f0"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "e2ef4859a181c348d5132d94710c7687",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1005244,
      "upload_time": "2019-12-17T10:26:41",
      "upload_time_iso_8601": "2019-12-17T10:26:41.938376Z",
      "url": "https://files.pythonhosted.org/packages/49/df/12cb021b39b01d5ab667b2cbb7d5d3a684043ddaf98cb35c9ca6e258eec0/logwrap-7.0.0-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "928de993ca69012b9122f47894303c4f2eb6f5ad0e1120fb164e97c1a33d77e7",
        "md5": "8fdc9b647056064af5f040db42cc8b85",
        "sha256": "b2eee1e2a1f59eecec1510afb36593aa55ccad47664fc0b52bc027555837bbc2"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "8fdc9b647056064af5f040db42cc8b85",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1102487,
      "upload_time": "2019-12-17T10:26:44",
      "upload_time_iso_8601": "2019-12-17T10:26:44.043058Z",
      "url": "https://files.pythonhosted.org/packages/92/8d/e993ca69012b9122f47894303c4f2eb6f5ad0e1120fb164e97c1a33d77e7/logwrap-7.0.0-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53c0af925d2d9eb56fe2750da9ae189da9be50eb307935cddf5016141209df64",
        "md5": "fc5538e9619322eafa1e699cc1968443",
        "sha256": "71b3707acd66fbceb1e884fe46beb9584144f73af9851bf5126b97b09c0a952f"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "fc5538e9619322eafa1e699cc1968443",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 157386,
      "upload_time": "2019-12-17T10:20:40",
      "upload_time_iso_8601": "2019-12-17T10:20:40.570867Z",
      "url": "https://files.pythonhosted.org/packages/53/c0/af925d2d9eb56fe2750da9ae189da9be50eb307935cddf5016141209df64/logwrap-7.0.0-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca99a1be731fac61d8dd26ed030983772375f06af26130b298ea7cd1f98b0675",
        "md5": "43fcc637a0eba64785523ae1515b36f1",
        "sha256": "470662329bdb7ddd7e8c8181e8c1c74b1057241464b654f38d9e110f58b2486d"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "43fcc637a0eba64785523ae1515b36f1",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 180612,
      "upload_time": "2019-12-17T10:20:51",
      "upload_time_iso_8601": "2019-12-17T10:20:51.349737Z",
      "url": "https://files.pythonhosted.org/packages/ca/99/a1be731fac61d8dd26ed030983772375f06af26130b298ea7cd1f98b0675/logwrap-7.0.0-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be3a3977fbb36c08cc7ee33a74aad62cec5ba85c6c6093a5d0db2ea546c5e8b8",
        "md5": "98370659dca99ab54535d7162af26d39",
        "sha256": "5fa3c681e9dec4848780f77a3f3fec51951b5ce764afef1b3a53b64d7b3fe3e6"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "98370659dca99ab54535d7162af26d39",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 997750,
      "upload_time": "2019-12-17T10:26:46",
      "upload_time_iso_8601": "2019-12-17T10:26:46.939640Z",
      "url": "https://files.pythonhosted.org/packages/be/3a/3977fbb36c08cc7ee33a74aad62cec5ba85c6c6093a5d0db2ea546c5e8b8/logwrap-7.0.0-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1ee67b6a2577e28f138c9c5513f36f52f68f602164473a86ec22a220c594dec",
        "md5": "4e1767a6321adb4ca89bf313e295e1e8",
        "sha256": "8e4b1690f4fc7a400017217e5a36feb03dea42e655346302329ac36f72d2f9ee"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "4e1767a6321adb4ca89bf313e295e1e8",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1095816,
      "upload_time": "2019-12-17T10:26:49",
      "upload_time_iso_8601": "2019-12-17T10:26:49.566372Z",
      "url": "https://files.pythonhosted.org/packages/a1/ee/67b6a2577e28f138c9c5513f36f52f68f602164473a86ec22a220c594dec/logwrap-7.0.0-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65e8c2cd1fe217a38952a6964903254928813f6aec7a26f19ff7850bdaeb80d4",
        "md5": "47b8d82440bda2501121fcd7b512df91",
        "sha256": "04cf36157a650d1b99ea69ea4dbdb3622f67ba0dbb514e41b6e2d59a4cc82d7e"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "47b8d82440bda2501121fcd7b512df91",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 157310,
      "upload_time": "2019-12-17T10:20:55",
      "upload_time_iso_8601": "2019-12-17T10:20:55.167528Z",
      "url": "https://files.pythonhosted.org/packages/65/e8/c2cd1fe217a38952a6964903254928813f6aec7a26f19ff7850bdaeb80d4/logwrap-7.0.0-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bfec739036fe6a1b85eb52abb6ec1ed34485efa17470dc9bfa26e99dc2c7db6",
        "md5": "aeeb749631d0897ccf3eca70c10fa318",
        "sha256": "ffe09baa3ead72bb62b73ce301b10c7e595ad345d6e17b04979aac048ba7d868"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "aeeb749631d0897ccf3eca70c10fa318",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 180684,
      "upload_time": "2019-12-17T10:20:44",
      "upload_time_iso_8601": "2019-12-17T10:20:44.219705Z",
      "url": "https://files.pythonhosted.org/packages/4b/fe/c739036fe6a1b85eb52abb6ec1ed34485efa17470dc9bfa26e99dc2c7db6/logwrap-7.0.0-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c71d921f2ea021232609c12e90253976df2607160201467992dd2108a0261e0",
        "md5": "85de72ba52c3da2e35cba1f244b9fa09",
        "sha256": "bccc444504c349fc9ca5edab8faa8cf9269609eb74ea92ff569a533a6fc86cfc"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp38-cp38-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "85de72ba52c3da2e35cba1f244b9fa09",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1107500,
      "upload_time": "2019-12-17T10:26:51",
      "upload_time_iso_8601": "2019-12-17T10:26:51.892651Z",
      "url": "https://files.pythonhosted.org/packages/4c/71/d921f2ea021232609c12e90253976df2607160201467992dd2108a0261e0/logwrap-7.0.0-cp38-cp38-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "375fbbfdcf44fb1d1917c70d1a6d0eb8e6a30a25c0dc94b11883eda54aa36a18",
        "md5": "c1322e1f60b0be32539398b82387c741",
        "sha256": "3cf2e1f92160be5eba521bfb868cee3bc39326994982c931dea5a5a312c340c3"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c1322e1f60b0be32539398b82387c741",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1222331,
      "upload_time": "2019-12-17T10:26:54",
      "upload_time_iso_8601": "2019-12-17T10:26:54.479814Z",
      "url": "https://files.pythonhosted.org/packages/37/5f/bbfdcf44fb1d1917c70d1a6d0eb8e6a30a25c0dc94b11883eda54aa36a18/logwrap-7.0.0-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "908b10fe5d3fa435390f78e50347eb53735a9eae46ae72d78ed91ec26db5901b",
        "md5": "4c075d15bc25a5b155971f9da409e2e9",
        "sha256": "8920171b95cdef1cfaba132ef6e92dea8095ef166b4beeb4feabe3d4f638f105"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp38-cp38m-win32.whl",
      "has_sig": false,
      "md5_digest": "4c075d15bc25a5b155971f9da409e2e9",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 163633,
      "upload_time": "2019-12-17T10:20:39",
      "upload_time_iso_8601": "2019-12-17T10:20:39.550787Z",
      "url": "https://files.pythonhosted.org/packages/90/8b/10fe5d3fa435390f78e50347eb53735a9eae46ae72d78ed91ec26db5901b/logwrap-7.0.0-cp38-cp38m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b411e040834ec9701bc0d4d8cbccb244be045e4a058d5fdef97904f07d04d2f",
        "md5": "cd1275344fff3a49253679b0a47e36b9",
        "sha256": "5e3cac1bd031c5522528f34d497d60405f8db538b7a8d251283ec81beb1eb204"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-cp38-cp38m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "cd1275344fff3a49253679b0a47e36b9",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 188601,
      "upload_time": "2019-12-17T10:20:39",
      "upload_time_iso_8601": "2019-12-17T10:20:39.994663Z",
      "url": "https://files.pythonhosted.org/packages/0b/41/1e040834ec9701bc0d4d8cbccb244be045e4a058d5fdef97904f07d04d2f/logwrap-7.0.0-cp38-cp38m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d800fb896c7e5821c9fa029da70faccc6cb3993aa15b854e93d9eaf60ceb73f0",
        "md5": "0dac163a41ccc13f620b487fa5d36ce3",
        "sha256": "cbd82e0cfee864c88145a537e046dbe3cdd9c1998a54a7591d1101261445b170"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0dac163a41ccc13f620b487fa5d36ce3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25302,
      "upload_time": "2019-12-17T10:26:57",
      "upload_time_iso_8601": "2019-12-17T10:26:57.001250Z",
      "url": "https://files.pythonhosted.org/packages/d8/00/fb896c7e5821c9fa029da70faccc6cb3993aa15b854e93d9eaf60ceb73f0/logwrap-7.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d437b03c923aca28a0266e0cf54252f9c2c7445ba7d9026c14c0f15f8df9e8fc",
        "md5": "658355f567895e0a167e95eebf317f32",
        "sha256": "adfe471797318e507aae3376cec2131044cd3f266d5acf99b5d5d304a54c8373"
      },
      "downloads": -1,
      "filename": "logwrap-7.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "658355f567895e0a167e95eebf317f32",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 41900,
      "upload_time": "2019-12-17T10:26:59",
      "upload_time_iso_8601": "2019-12-17T10:26:59.128842Z",
      "url": "https://files.pythonhosted.org/packages/d4/37/b03c923aca28a0266e0cf54252f9c2c7445ba7d9026c14c0f15f8df9e8fc/logwrap-7.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}