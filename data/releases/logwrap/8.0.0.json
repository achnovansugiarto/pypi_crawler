{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=None,  # if not set: try to find LOGGER, LOG, logger or log object in target module and use it if it logger instance. Fallback: logger named logwrap\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip details in log (no traceback, no exception details - just class name)\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        arg0='arg0',  # type: str\n        # POSITIONAL_OR_KEYWORD:\n        arg1='arg1',  # type: str\n        arg2='arg2',  # type: str\n        # VAR_POSITIONAL:\n        args=(),\n        # KEYWORD_ONLY:\n        kwarg1='kwarg1',  # type: str\n        kwarg2='kwarg2',  # type: str\n        # VAR_KEYWORD:\n        kwargs={\n            'kwarg3': 'kwarg3',\n        },\n    )\n    Done: 'example_function1' with result:\n\n     (\n        'arg0',\n        'arg1',\n        'arg2',\n        (),\n        'kwarg1',\n        'kwarg2',\n        {\n            'kwarg3': 'kwarg3',\n        },\n     )\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/8.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "8.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "44dc7ee62bdd1d70b8a10aafd1fc1072b26090eafd620515a2d45e60f9e55e83",
        "md5": "56403fa73d30fab2fd3e7fa665f0e245",
        "sha256": "ef9af8d0853644bccb8dd9d1542b529d7936b26d57b03c9c765339c636668170"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "56403fa73d30fab2fd3e7fa665f0e245",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1018865,
      "upload_time": "2019-12-18T11:24:33",
      "upload_time_iso_8601": "2019-12-18T11:24:33.235813Z",
      "url": "https://files.pythonhosted.org/packages/44/dc/7ee62bdd1d70b8a10aafd1fc1072b26090eafd620515a2d45e60f9e55e83/logwrap-8.0.0-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25dfb47c5f7860528a3b5c282004f865bcac10cca20fbcc95d90e65ab8a65d31",
        "md5": "ce54381f7c0953d88b12bc4c9f0507fa",
        "sha256": "81fdf1be1a28b72bc7b322e76a4da21d716b9f048f51f1caa6559104f023f957"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ce54381f7c0953d88b12bc4c9f0507fa",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1117673,
      "upload_time": "2019-12-18T11:24:35",
      "upload_time_iso_8601": "2019-12-18T11:24:35.366330Z",
      "url": "https://files.pythonhosted.org/packages/25/df/b47c5f7860528a3b5c282004f865bcac10cca20fbcc95d90e65ab8a65d31/logwrap-8.0.0-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb7bd1a445b741b1e22b4ec149f894113d45ac427a479ea337cde67fed58a00e",
        "md5": "4e5abfb58dce41ddba72a1fed4fc607f",
        "sha256": "e8039fb02fcbb83e8f8db678c5c5d14d64f4a73cb3b1e75264f74811d25bcc10"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "4e5abfb58dce41ddba72a1fed4fc607f",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 158672,
      "upload_time": "2019-12-18T11:16:18",
      "upload_time_iso_8601": "2019-12-18T11:16:18.160178Z",
      "url": "https://files.pythonhosted.org/packages/bb/7b/d1a445b741b1e22b4ec149f894113d45ac427a479ea337cde67fed58a00e/logwrap-8.0.0-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a2fff07abefac64b9172895afc10315c89591dc9de25fc5d73d61667351a656",
        "md5": "36a9a90414ec078b49b0ce8b573a16d9",
        "sha256": "83fd1802a48337c964656d4544483078ffbe9ffc8ad2a3d203fad23b65639720"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "36a9a90414ec078b49b0ce8b573a16d9",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 181951,
      "upload_time": "2019-12-18T11:16:18",
      "upload_time_iso_8601": "2019-12-18T11:16:18.510110Z",
      "url": "https://files.pythonhosted.org/packages/0a/2f/ff07abefac64b9172895afc10315c89591dc9de25fc5d73d61667351a656/logwrap-8.0.0-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca73d7def4ad4f24be0b3f84d4e9181144d658b7baa8df86e3c6476a4788239b",
        "md5": "d3740103a0168d0afdac6a094c412a1e",
        "sha256": "1d592e552993f83470f53f34eaf07bf34db20851055604eb07c084701b98e2b8"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "d3740103a0168d0afdac6a094c412a1e",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1011428,
      "upload_time": "2019-12-18T11:24:38",
      "upload_time_iso_8601": "2019-12-18T11:24:38.145939Z",
      "url": "https://files.pythonhosted.org/packages/ca/73/d7def4ad4f24be0b3f84d4e9181144d658b7baa8df86e3c6476a4788239b/logwrap-8.0.0-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d83e64be109916221f7f2a659cc1b7263445ff8d7384e525dbd17d3f14d0da0",
        "md5": "990c12287f1b2c96e24b16be9955684f",
        "sha256": "649c883cd130001e65a05cd644362dd9b01875f96240070ab04c50ab75835d23"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "990c12287f1b2c96e24b16be9955684f",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1111020,
      "upload_time": "2019-12-18T11:24:40",
      "upload_time_iso_8601": "2019-12-18T11:24:40.569976Z",
      "url": "https://files.pythonhosted.org/packages/4d/83/e64be109916221f7f2a659cc1b7263445ff8d7384e525dbd17d3f14d0da0/logwrap-8.0.0-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cdd3afc214e6baa5aaf270d03c4de09a7a610143abcbbb42197e7ac031d7708c",
        "md5": "c1e4ae0bf4fd20f56bd5e8dba0e62f73",
        "sha256": "9e11da19aeadff3bd2b6382ef63893973c88909802fa7a025e3470d157930771"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "c1e4ae0bf4fd20f56bd5e8dba0e62f73",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 158590,
      "upload_time": "2019-12-18T11:16:16",
      "upload_time_iso_8601": "2019-12-18T11:16:16.318334Z",
      "url": "https://files.pythonhosted.org/packages/cd/d3/afc214e6baa5aaf270d03c4de09a7a610143abcbbb42197e7ac031d7708c/logwrap-8.0.0-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8750a8f2afea41dd7885dbcba47f211c76c559dc6d22d26abfcc4eb1c383888",
        "md5": "43a5d2ef3fdd5ade5ba504d5112750b4",
        "sha256": "5ca1d969eb1110e646c0bece3bedfb92f36b5d41eb491686ab706cc66480bf7a"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "43a5d2ef3fdd5ade5ba504d5112750b4",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 182013,
      "upload_time": "2019-12-18T11:16:07",
      "upload_time_iso_8601": "2019-12-18T11:16:07.554786Z",
      "url": "https://files.pythonhosted.org/packages/f8/75/0a8f2afea41dd7885dbcba47f211c76c559dc6d22d26abfcc4eb1c383888/logwrap-8.0.0-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b929680aaa3940e1f61f58a822df33d3be04b254dae4ace4c4bf8d49af4e8d12",
        "md5": "4ee7691387e0a0eade9905b90c1992e7",
        "sha256": "7e9ad9622768b030d74e59bcb519eadf0026fdcdc4fa00dc3596b685d9f5eb63"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp38-cp38-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "4ee7691387e0a0eade9905b90c1992e7",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1124222,
      "upload_time": "2019-12-18T11:24:42",
      "upload_time_iso_8601": "2019-12-18T11:24:42.964970Z",
      "url": "https://files.pythonhosted.org/packages/b9/29/680aaa3940e1f61f58a822df33d3be04b254dae4ace4c4bf8d49af4e8d12/logwrap-8.0.0-cp38-cp38-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0bd640235b57a6cea4a75870142b8d138fef308b66c3fb509f180e7c08cdc4a",
        "md5": "30a08005be19c1adf150310b087c9a22",
        "sha256": "1c73229c4bafabdd49ff06b0ac0e14b3c099ce14a62d9f4429a88983803972e1"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "30a08005be19c1adf150310b087c9a22",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1239535,
      "upload_time": "2019-12-18T11:24:45",
      "upload_time_iso_8601": "2019-12-18T11:24:45.767052Z",
      "url": "https://files.pythonhosted.org/packages/a0/bd/640235b57a6cea4a75870142b8d138fef308b66c3fb509f180e7c08cdc4a/logwrap-8.0.0-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fa63cf06b55fbaea94994a64476591c0c9dde83327fb8d312391b68a037ff30",
        "md5": "71de7005eeca539f0d3c7dc83b5a9311",
        "sha256": "11082fef22446473a000fb75a707a8f20f47591eede809d6ff9d98d4c56ec392"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp38-cp38m-win32.whl",
      "has_sig": false,
      "md5_digest": "71de7005eeca539f0d3c7dc83b5a9311",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 164374,
      "upload_time": "2019-12-18T11:16:01",
      "upload_time_iso_8601": "2019-12-18T11:16:01.225200Z",
      "url": "https://files.pythonhosted.org/packages/3f/a6/3cf06b55fbaea94994a64476591c0c9dde83327fb8d312391b68a037ff30/logwrap-8.0.0-cp38-cp38m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ed07bc4b127650373846508de1298183a0c29e6d457987790e72dc6456b3b45",
        "md5": "9ce79f9ffd65651712f3cf823c4d1f15",
        "sha256": "39337fe5de93c2c8bfb5e6773282443c89ddaeb6a7661d9695ac24c54661bd9e"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-cp38-cp38m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "9ce79f9ffd65651712f3cf823c4d1f15",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 189940,
      "upload_time": "2019-12-18T11:16:05",
      "upload_time_iso_8601": "2019-12-18T11:16:05.255995Z",
      "url": "https://files.pythonhosted.org/packages/9e/d0/7bc4b127650373846508de1298183a0c29e6d457987790e72dc6456b3b45/logwrap-8.0.0-cp38-cp38m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "546d3d24706cbe4a47707331441b0e1b9a9d28de169cfd7da0bbfbd588d1dbba",
        "md5": "84ee5c27814254501b31c7d552b860a9",
        "sha256": "c52adaf58bb4d91814387a2dc1873bfef960f7197bc16ef495a4c64b904b4461"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "84ee5c27814254501b31c7d552b860a9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 26209,
      "upload_time": "2019-12-18T11:24:47",
      "upload_time_iso_8601": "2019-12-18T11:24:47.996983Z",
      "url": "https://files.pythonhosted.org/packages/54/6d/3d24706cbe4a47707331441b0e1b9a9d28de169cfd7da0bbfbd588d1dbba/logwrap-8.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87e2d1a7953f894d4b9ab69f63d559417c677b348dd97bc1885f62ce32df8a70",
        "md5": "2d81b305cfc14c85228e549247621819",
        "sha256": "1f9c728631e1cd575554f8c819af503446162beb12e66eb4c9e7dc2bdf948552"
      },
      "downloads": -1,
      "filename": "logwrap-8.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2d81b305cfc14c85228e549247621819",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 42479,
      "upload_time": "2019-12-18T11:24:49",
      "upload_time_iso_8601": "2019-12-18T11:24:49.749425Z",
      "url": "https://files.pythonhosted.org/packages/87/e2/d1a7953f894d4b9ab69f63d559417c677b348dd97bc1885f62ce32df8a70/logwrap-8.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}