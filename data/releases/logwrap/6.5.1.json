{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        'arg0'=u'''arg0''',  # type: <class 'str'>\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg0''',\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.5.1/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a9c5ac769bc6bc2a9836296985f16ae5ddd4c0d8af918377f0f8cbe6b14f8d80",
        "md5": "9198984aadb04c0eae05d4199ab245d3",
        "sha256": "ab1e92cd89ef5be1bcc4930f955e5d5da821f5d1cb242208e923308b070fc2b8"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "9198984aadb04c0eae05d4199ab245d3",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1030488,
      "upload_time": "2019-12-05T14:13:05",
      "upload_time_iso_8601": "2019-12-05T14:13:05.193375Z",
      "url": "https://files.pythonhosted.org/packages/a9/c5/ac769bc6bc2a9836296985f16ae5ddd4c0d8af918377f0f8cbe6b14f8d80/logwrap-6.5.1-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "355022088958d131f86efad6e951576abedc46a7b31fa8756cf1b485e7890c84",
        "md5": "86a6f37af6344a007d0fd4d931d6da27",
        "sha256": "27c398ad57a60b0df2579941320c572f0846b63c234810c64e375c6659ab928d"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "86a6f37af6344a007d0fd4d931d6da27",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1126945,
      "upload_time": "2019-12-05T14:13:08",
      "upload_time_iso_8601": "2019-12-05T14:13:08.144267Z",
      "url": "https://files.pythonhosted.org/packages/35/50/22088958d131f86efad6e951576abedc46a7b31fa8756cf1b485e7890c84/logwrap-6.5.1-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8b08b426e347524de4a9057d4fdd96c40133c6183f1c5b9f5da193dbdaefc21",
        "md5": "1c23934438670d3ed2903494b9a11301",
        "sha256": "aed413b44b1fd0d87f5196bcabc68df9ea3fe874b9956cfe17deb865b61cd4d2"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "1c23934438670d3ed2903494b9a11301",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 160551,
      "upload_time": "2019-12-05T19:43:58",
      "upload_time_iso_8601": "2019-12-05T19:43:58.432695Z",
      "url": "https://files.pythonhosted.org/packages/f8/b0/8b426e347524de4a9057d4fdd96c40133c6183f1c5b9f5da193dbdaefc21/logwrap-6.5.1-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e03e8a74c7818987d3b5e12207959ab994c39cabf56069f5514d8b2765c4693",
        "md5": "39a2b2c860fb54c02adce27d5813c217",
        "sha256": "de35d9a474d35aba0d3ca85e1494c053efb70655818e9a81bc86e5edb614bc35"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "39a2b2c860fb54c02adce27d5813c217",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 184559,
      "upload_time": "2019-12-05T19:43:58",
      "upload_time_iso_8601": "2019-12-05T19:43:58.257328Z",
      "url": "https://files.pythonhosted.org/packages/4e/03/e8a74c7818987d3b5e12207959ab994c39cabf56069f5514d8b2765c4693/logwrap-6.5.1-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07cff2fdbb22a4ab23b90ec9898df3c80f7fd31af0f28cb9ee9521de464db097",
        "md5": "b2fd87d1e6f462549675323b89716c75",
        "sha256": "c21c4cc31cba151b6baaeede24063c3834345bb3702d03ff6b5c4caf9889b5dd"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "b2fd87d1e6f462549675323b89716c75",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1022279,
      "upload_time": "2019-12-05T14:13:10",
      "upload_time_iso_8601": "2019-12-05T14:13:10.594887Z",
      "url": "https://files.pythonhosted.org/packages/07/cf/f2fdbb22a4ab23b90ec9898df3c80f7fd31af0f28cb9ee9521de464db097/logwrap-6.5.1-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4da812e6ba11e4c9766df2b2dd284109cae08a3f09fb7c04e464f6c5f61718a5",
        "md5": "5033b50f1369013ed1d1ae20aab24a5b",
        "sha256": "2d54dc73ec8e4e9a8044a0cfe60d029c0fec90ee181d7fce30080fef35ba47a2"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "5033b50f1369013ed1d1ae20aab24a5b",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1120718,
      "upload_time": "2019-12-05T14:13:13",
      "upload_time_iso_8601": "2019-12-05T14:13:13.038086Z",
      "url": "https://files.pythonhosted.org/packages/4d/a8/12e6ba11e4c9766df2b2dd284109cae08a3f09fb7c04e464f6c5f61718a5/logwrap-6.5.1-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69310efaaec5315c5e7cb5126ff182d2f0044272aaebb1174473101f93a81b7f",
        "md5": "f414a11d6453e517beb56ac9ef3ed982",
        "sha256": "84c166597ce5b53a68488fc997b83fe928f1bbcab35aac7f625ed53acb38145d"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "f414a11d6453e517beb56ac9ef3ed982",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 160412,
      "upload_time": "2019-12-05T19:44:00",
      "upload_time_iso_8601": "2019-12-05T19:44:00.539610Z",
      "url": "https://files.pythonhosted.org/packages/69/31/0efaaec5315c5e7cb5126ff182d2f0044272aaebb1174473101f93a81b7f/logwrap-6.5.1-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c703e0e351f8e80147680ee9ae5b4950a9c3c0a56e90ea1f7fcde9997d7b39a5",
        "md5": "68db51cb86d04b3d8423ce8898e4d9b3",
        "sha256": "aa6415a27fee5116202780c7b434bcd80599da04afe7baa67d28ca016d645785"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "68db51cb86d04b3d8423ce8898e4d9b3",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 184401,
      "upload_time": "2019-12-05T19:43:59",
      "upload_time_iso_8601": "2019-12-05T19:43:59.487504Z",
      "url": "https://files.pythonhosted.org/packages/c7/03/e0e351f8e80147680ee9ae5b4950a9c3c0a56e90ea1f7fcde9997d7b39a5/logwrap-6.5.1-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f673aada7365fd2c2d2d297b569c71a39f7fb8b6f90fcf8b468cae6c9944e24a",
        "md5": "af0649c82b2bbc61d435df00401e1d4e",
        "sha256": "2b741e2caeaf097c4459eaa52cdf5329b50912b66bfc90b27fdebc44dbafa377"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp38-cp38-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "af0649c82b2bbc61d435df00401e1d4e",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1133358,
      "upload_time": "2019-12-05T14:13:15",
      "upload_time_iso_8601": "2019-12-05T14:13:15.109359Z",
      "url": "https://files.pythonhosted.org/packages/f6/73/aada7365fd2c2d2d297b569c71a39f7fb8b6f90fcf8b468cae6c9944e24a/logwrap-6.5.1-cp38-cp38-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5be304a60199cd65c4182a7a025bb32239144c460cf5993f8d8c744aa9a6a6d7",
        "md5": "541c6b759314c456895c27349d392afe",
        "sha256": "9268db9ab6b1a3abe3ebbdd6580a5f13bc491e7103ee4b41be1c4c99174ec77f"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "541c6b759314c456895c27349d392afe",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1254750,
      "upload_time": "2019-12-05T14:13:18",
      "upload_time_iso_8601": "2019-12-05T14:13:18.051263Z",
      "url": "https://files.pythonhosted.org/packages/5b/e3/04a60199cd65c4182a7a025bb32239144c460cf5993f8d8c744aa9a6a6d7/logwrap-6.5.1-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb3b94c2fe583441daba2fb44022e559cf2f80687e8b19f73d24c3d1428bc755",
        "md5": "8805e1618ce337ef23ccd36538dc018c",
        "sha256": "5366c3e9c40598fd70e924261c6d7b39ea94c1bc7777c9ca6f058fbaad706f62"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp38-cp38m-win32.whl",
      "has_sig": false,
      "md5_digest": "8805e1618ce337ef23ccd36538dc018c",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 166730,
      "upload_time": "2019-12-05T19:44:02",
      "upload_time_iso_8601": "2019-12-05T19:44:02.737784Z",
      "url": "https://files.pythonhosted.org/packages/eb/3b/94c2fe583441daba2fb44022e559cf2f80687e8b19f73d24c3d1428bc755/logwrap-6.5.1-cp38-cp38m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2061903c68c096ff1f38af8b3fd385627839ec47c01e0fd98cd1e41e091968ab",
        "md5": "c53287df2fe7be9b70a2c59632a3df13",
        "sha256": "2c1670f53f88c6aad0383e82d1f5b8ee8121bcf25f7e6237f06e20290593a514"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-cp38-cp38m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "c53287df2fe7be9b70a2c59632a3df13",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 193138,
      "upload_time": "2019-12-05T19:44:01",
      "upload_time_iso_8601": "2019-12-05T19:44:01.539707Z",
      "url": "https://files.pythonhosted.org/packages/20/61/903c68c096ff1f38af8b3fd385627839ec47c01e0fd98cd1e41e091968ab/logwrap-6.5.1-cp38-cp38m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1d55278060a253574da21abc5ecb5fd8d86f94487d6d25007808de7b457a8b6",
        "md5": "a461a67feb450ec32138aa309f7820fc",
        "sha256": "21fd669c2496e112ed99dec07ba434afe181ef9be464ca33a0e4f4174a2e2f9b"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a461a67feb450ec32138aa309f7820fc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25269,
      "upload_time": "2019-12-05T14:13:20",
      "upload_time_iso_8601": "2019-12-05T14:13:20.024631Z",
      "url": "https://files.pythonhosted.org/packages/b1/d5/5278060a253574da21abc5ecb5fd8d86f94487d6d25007808de7b457a8b6/logwrap-6.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e79dacaf86350fcff0be2c5f374b80c3be03f66e9b88234cd1fb527307a2b85e",
        "md5": "9af30b78be15e0048abcc31671236746",
        "sha256": "3ee75689fcc5e0b25b4fa0930644ea57429d6ae6d570a4fc670796f323964ea5"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9af30b78be15e0048abcc31671236746",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 41861,
      "upload_time": "2019-12-05T14:13:21",
      "upload_time_iso_8601": "2019-12-05T14:13:21.955712Z",
      "url": "https://files.pythonhosted.org/packages/e7/9d/acaf86350fcff0be2c5f374b80c3be03f66e9b88234cd1fb527307a2b85e/logwrap-6.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}