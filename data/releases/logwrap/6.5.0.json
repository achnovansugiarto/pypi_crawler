{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        'arg0'=u'''arg0''',  # type: <class 'str'>\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg0''',\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.5.0/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a275fcbb3da08762af9aa834d213f80d8bdc19de5b785f2a4ad3dc4ac72499e",
        "md5": "21a1d6465b72c714519a4fe9cfd9e045",
        "sha256": "b32b590228b5a369d18cb145b15efb4c492307f7e1ed053310f3941926dd5397"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "21a1d6465b72c714519a4fe9cfd9e045",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1036797,
      "upload_time": "2019-11-24T17:13:12",
      "upload_time_iso_8601": "2019-11-24T17:13:12.647919Z",
      "url": "https://files.pythonhosted.org/packages/1a/27/5fcbb3da08762af9aa834d213f80d8bdc19de5b785f2a4ad3dc4ac72499e/logwrap-6.5.0-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e082d824efcfe8b2d7a9831290f6fb2b83b24635b65bc319a994947d379ac947",
        "md5": "26c71d8da4f1ce8058f16926c14b68ec",
        "sha256": "95f0e0de10e473f78976c1e947fba5468e0c1a7a47c926c77a864b96e441572f"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "26c71d8da4f1ce8058f16926c14b68ec",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1134200,
      "upload_time": "2019-11-24T17:13:15",
      "upload_time_iso_8601": "2019-11-24T17:13:15.164587Z",
      "url": "https://files.pythonhosted.org/packages/e0/82/d824efcfe8b2d7a9831290f6fb2b83b24635b65bc319a994947d379ac947/logwrap-6.5.0-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d72adf0a07bbbaea90ef8ef0ec288d5fcc35bf587f9bf72860d166d81c30123f",
        "md5": "0d9d2283ad9f724e9efbf667cccbc1ed",
        "sha256": "6aad9b3da9ae1e6148b28798dcae551981644fa085f574b219738cca49a31677"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "0d9d2283ad9f724e9efbf667cccbc1ed",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 161080,
      "upload_time": "2019-11-24T17:07:27",
      "upload_time_iso_8601": "2019-11-24T17:07:27.630490Z",
      "url": "https://files.pythonhosted.org/packages/d7/2a/df0a07bbbaea90ef8ef0ec288d5fcc35bf587f9bf72860d166d81c30123f/logwrap-6.5.0-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7654489cab2d9a41e11d3ffce84d07b316961ec608951968e237087a92f77816",
        "md5": "22bbd8a518e3b4f1216c77ec97e6b73a",
        "sha256": "2e805906813c39ef08387b9b549f4a3fc1ef66f35ce9abb917bcf0bb03503d46"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "22bbd8a518e3b4f1216c77ec97e6b73a",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 185327,
      "upload_time": "2019-11-24T17:07:24",
      "upload_time_iso_8601": "2019-11-24T17:07:24.914866Z",
      "url": "https://files.pythonhosted.org/packages/76/54/489cab2d9a41e11d3ffce84d07b316961ec608951968e237087a92f77816/logwrap-6.5.0-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe6afe084a28b9ba4c96c9fd283af0ecf7f287cbd87442d2b34f452a3fdc6b08",
        "md5": "f9b8c2d6ca8f64f2840ab510140e5eaf",
        "sha256": "cf189077f53d04aa404ec430e1f4002990f637324ce85693e15a10d955bd9427"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "f9b8c2d6ca8f64f2840ab510140e5eaf",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1028816,
      "upload_time": "2019-11-24T17:13:18",
      "upload_time_iso_8601": "2019-11-24T17:13:18.237409Z",
      "url": "https://files.pythonhosted.org/packages/fe/6a/fe084a28b9ba4c96c9fd283af0ecf7f287cbd87442d2b34f452a3fdc6b08/logwrap-6.5.0-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "437de2a16cc9b460184b772a4d8561e640457565705be4371e38cbfc29d297a6",
        "md5": "e42fdcedb379d85041f2350390023962",
        "sha256": "cac6b965147042c1b024f5bc26dc147bcc3974bda65a99cd5b94baf8a6bcf30c"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "e42fdcedb379d85041f2350390023962",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1128106,
      "upload_time": "2019-11-24T17:13:20",
      "upload_time_iso_8601": "2019-11-24T17:13:20.729289Z",
      "url": "https://files.pythonhosted.org/packages/43/7d/e2a16cc9b460184b772a4d8561e640457565705be4371e38cbfc29d297a6/logwrap-6.5.0-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c22cdfe9519a8b222965ba14b69d48e61c25f1acc77e7914dd45a35e13004bb4",
        "md5": "13244009f708d1d023322f546accbcd3",
        "sha256": "96d79750c61cc5cafb77137a116b1e0c3ad56bb20de6f942f0f2483fb6db83d0"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "13244009f708d1d023322f546accbcd3",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 161087,
      "upload_time": "2019-11-24T17:07:17",
      "upload_time_iso_8601": "2019-11-24T17:07:17.886821Z",
      "url": "https://files.pythonhosted.org/packages/c2/2c/dfe9519a8b222965ba14b69d48e61c25f1acc77e7914dd45a35e13004bb4/logwrap-6.5.0-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7186d497d018a63839088076ce41f1cc8d99689e24e43047a857361111c3eb1d",
        "md5": "dec4bc4332b0d0e0fd999862fef6b9e1",
        "sha256": "af3258769aa900daa072d9fa713fc7a336e40f382bd770a7649dc73dcf62bed6"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "dec4bc4332b0d0e0fd999862fef6b9e1",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 185201,
      "upload_time": "2019-11-24T17:07:20",
      "upload_time_iso_8601": "2019-11-24T17:07:20.238710Z",
      "url": "https://files.pythonhosted.org/packages/71/86/d497d018a63839088076ce41f1cc8d99689e24e43047a857361111c3eb1d/logwrap-6.5.0-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a19b23e8cd6d78d9c04b5994712ebe152d3463aa1fe59fbfe11ae4622712983",
        "md5": "480c4368167cf481c05f7e8b306c265c",
        "sha256": "7ab201be662eb38f9491d1f2e60b8614c762ad18337f32a7812b2dbaee907861"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp38-cp38-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "480c4368167cf481c05f7e8b306c265c",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1141351,
      "upload_time": "2019-11-24T17:13:23",
      "upload_time_iso_8601": "2019-11-24T17:13:23.531433Z",
      "url": "https://files.pythonhosted.org/packages/0a/19/b23e8cd6d78d9c04b5994712ebe152d3463aa1fe59fbfe11ae4622712983/logwrap-6.5.0-cp38-cp38-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3f32190e602448155d4d6f8706e12e642c6df5b0ca0402d106df2c579db98bd",
        "md5": "e93f40ebadce47dc296ba47cc083e29d",
        "sha256": "88b8a0b497fb335d7cafb187e2a7321c2d9fdd250c3331f2802ac9ed6e5505f3"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "e93f40ebadce47dc296ba47cc083e29d",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1259162,
      "upload_time": "2019-11-24T17:13:26",
      "upload_time_iso_8601": "2019-11-24T17:13:26.132615Z",
      "url": "https://files.pythonhosted.org/packages/b3/f3/2190e602448155d4d6f8706e12e642c6df5b0ca0402d106df2c579db98bd/logwrap-6.5.0-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bddb5e4922893e1dae71b916be9cd75a9171e29e78260198d24e4a84d7fbe64",
        "md5": "e8c80e2bb568a4d759535ba561f49c43",
        "sha256": "0ea1732b2b1d2f1dec0ac2aed44045c5e203c79795ca3eec3fd3324b4b1406e2"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp38-cp38m-win32.whl",
      "has_sig": false,
      "md5_digest": "e8c80e2bb568a4d759535ba561f49c43",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 167546,
      "upload_time": "2019-11-24T17:07:15",
      "upload_time_iso_8601": "2019-11-24T17:07:15.837546Z",
      "url": "https://files.pythonhosted.org/packages/3b/dd/b5e4922893e1dae71b916be9cd75a9171e29e78260198d24e4a84d7fbe64/logwrap-6.5.0-cp38-cp38m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df37fa155d968f149636308a14ffab94959dc18ce32e424c167dce2ec3028e80",
        "md5": "8ce33c06845b3886c6497925c0a7382c",
        "sha256": "c4c8ad2b0999f537531ec1a57f7627fdb57ad5b19b3fe3d8c34ef69da38c3185"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-cp38-cp38m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "8ce33c06845b3886c6497925c0a7382c",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 193780,
      "upload_time": "2019-11-24T17:07:30",
      "upload_time_iso_8601": "2019-11-24T17:07:30.107905Z",
      "url": "https://files.pythonhosted.org/packages/df/37/fa155d968f149636308a14ffab94959dc18ce32e424c167dce2ec3028e80/logwrap-6.5.0-cp38-cp38m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43efefa117f04c1dc49cd56e427fd6e94f0b5dbbc611deacecf22ef9be3f7fe2",
        "md5": "7a7f12345236422ed09cef676ea23e3c",
        "sha256": "ccc2cb641cd5341354a0646ca8c48f2e205eb63df8e69f803ade98fe93ef693d"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7a7f12345236422ed09cef676ea23e3c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25305,
      "upload_time": "2019-11-24T17:13:28",
      "upload_time_iso_8601": "2019-11-24T17:13:28.231529Z",
      "url": "https://files.pythonhosted.org/packages/43/ef/efa117f04c1dc49cd56e427fd6e94f0b5dbbc611deacecf22ef9be3f7fe2/logwrap-6.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d55af17798a09bc79908f1fc85bd6d82a8659c2ad9b9238e51654a7178cdade",
        "md5": "443af6bdcc5c6c007ca8ed1995500658",
        "sha256": "c780f7e0aa98ee0680a1809a184e60eb3a253b776cc5340be39f95f63b3afe15"
      },
      "downloads": -1,
      "filename": "logwrap-6.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "443af6bdcc5c6c007ca8ed1995500658",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 41911,
      "upload_time": "2019-11-24T17:13:30",
      "upload_time_iso_8601": "2019-11-24T17:13:30.217679Z",
      "url": "https://files.pythonhosted.org/packages/4d/55/af17798a09bc79908f1fc85bd6d82a8659c2ad9b9238e51654a7178cdade/logwrap-6.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}