{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.org/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.org/python-useful-helpers/logwrap\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.5\n    Python 3.6\n    Python 3.7\n    PyPy3 3.5+\n\n.. note:: Python 3.4 and 2.7 is supported in versions < 5.0.0\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example:\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLimitations:\n\n* nested wrapping (`@logwrap @deco2 ...`) is not parsed under python 2.7: `functools.wraps` limitation. Please set `logwrap` as the first level decorator.\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.org/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\nCD system\n=========\n`Travis CI: <https://travis-ci.org/python-useful-helpers/logwrap>`_ is used for package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Dennis Dmitriev <dis-xcom@gmail.com>, Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/5.0.1/",
    "requires_dist": [
      "typing (>=3.6); python_version < \"3.8\""
    ],
    "requires_python": ">=3.5.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "5.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "297d7c576f99eab5712240f0040ef230ea00743018685da15b38507a8b0362e1",
        "md5": "5bbfdd92bee703f0925c1edc8d6054ad",
        "sha256": "6c0e0c3d9917de481cd789a9f6a2cf8139198281dbc6d2edc5f7967e321008b3"
      },
      "downloads": -1,
      "filename": "logwrap-5.0.1-cp35-cp35m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "5bbfdd92bee703f0925c1edc8d6054ad",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": ">=3.5.0",
      "size": 801818,
      "upload_time": "2018-08-14T16:31:45",
      "upload_time_iso_8601": "2018-08-14T16:31:45.429697Z",
      "url": "https://files.pythonhosted.org/packages/29/7d/7c576f99eab5712240f0040ef230ea00743018685da15b38507a8b0362e1/logwrap-5.0.1-cp35-cp35m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efcf0111ebdda6a3745cdf3e0ef0a3772621322450f8b5d47548c9e2461a874f",
        "md5": "b51d4012bb16fe4ac6b448901456eb6b",
        "sha256": "940351fb4a8aedf3d129bcc0a14ec1a445bfdeff7cc502ca5dd8f8e02b3be028"
      },
      "downloads": -1,
      "filename": "logwrap-5.0.1-cp35-cp35m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b51d4012bb16fe4ac6b448901456eb6b",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": ">=3.5.0",
      "size": 826717,
      "upload_time": "2018-08-14T16:31:47",
      "upload_time_iso_8601": "2018-08-14T16:31:47.365371Z",
      "url": "https://files.pythonhosted.org/packages/ef/cf/0111ebdda6a3745cdf3e0ef0a3772621322450f8b5d47548c9e2461a874f/logwrap-5.0.1-cp35-cp35m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9291a7a7dea26194f6c9c859dda417da6fa0749a1c4689229666f877bcc28106",
        "md5": "3cd2b70c91d8107dd217bcb7885be74d",
        "sha256": "f4f610a9f4dc2baa933f0bd19f7b673b4887893533c462df35dc9847f7ecaea4"
      },
      "downloads": -1,
      "filename": "logwrap-5.0.1-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "3cd2b70c91d8107dd217bcb7885be74d",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.5.0",
      "size": 826470,
      "upload_time": "2018-08-14T16:31:49",
      "upload_time_iso_8601": "2018-08-14T16:31:49.377709Z",
      "url": "https://files.pythonhosted.org/packages/92/91/a7a7dea26194f6c9c859dda417da6fa0749a1c4689229666f877bcc28106/logwrap-5.0.1-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33ae8abbf75547441899322db22e9d15ac93ee2f174019328708564a8d2d56c2",
        "md5": "c005d2ce8bfbd680947b1bea1324ae1b",
        "sha256": "ff99c5d822e8614fdd75afeb716d65cd61219d7295387040285c4c5bbff8602c"
      },
      "downloads": -1,
      "filename": "logwrap-5.0.1-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c005d2ce8bfbd680947b1bea1324ae1b",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.5.0",
      "size": 848274,
      "upload_time": "2018-08-14T16:31:51",
      "upload_time_iso_8601": "2018-08-14T16:31:51.432060Z",
      "url": "https://files.pythonhosted.org/packages/33/ae/8abbf75547441899322db22e9d15ac93ee2f174019328708564a8d2d56c2/logwrap-5.0.1-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42aa43c95e464d9839e98dfc314d2f3e4d199d378793cf93e077a03449389fff",
        "md5": "959f65902a61efc5bdd9816a080e39f7",
        "sha256": "265c4fd57e73ea02a9ff2a7ef152f2cfbdfc7f0a0371e0fa8d67806372d2466a"
      },
      "downloads": -1,
      "filename": "logwrap-5.0.1-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "959f65902a61efc5bdd9816a080e39f7",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.5.0",
      "size": 819967,
      "upload_time": "2018-08-14T16:31:52",
      "upload_time_iso_8601": "2018-08-14T16:31:52.995392Z",
      "url": "https://files.pythonhosted.org/packages/42/aa/43c95e464d9839e98dfc314d2f3e4d199d378793cf93e077a03449389fff/logwrap-5.0.1-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1ab2f0d861b16efabf4d7c04d317bff3e8b81c1c9b1b4419cb5e0a1266037cf",
        "md5": "0e003e8de52614eb758f00e7e00b2b98",
        "sha256": "1995bbe9d3d7aefafafe0876b780179ab71e0fc5a5c9db542349b362f9a78f8c"
      },
      "downloads": -1,
      "filename": "logwrap-5.0.1-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "0e003e8de52614eb758f00e7e00b2b98",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.5.0",
      "size": 842708,
      "upload_time": "2018-08-14T16:31:54",
      "upload_time_iso_8601": "2018-08-14T16:31:54.933298Z",
      "url": "https://files.pythonhosted.org/packages/a1/ab/2f0d861b16efabf4d7c04d317bff3e8b81c1c9b1b4419cb5e0a1266037cf/logwrap-5.0.1-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be954e9e1d00ef42c849c2c38d7641038d61b6a83425990eb0d3e797c689e71d",
        "md5": "762b95f36640d096fa174a869c916c4f",
        "sha256": "f65a85eef235626d9c1226edf97fa693ebc10b0ea90e5ca07a438b0b7aa6796b"
      },
      "downloads": -1,
      "filename": "logwrap-5.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "762b95f36640d096fa174a869c916c4f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5.0",
      "size": 16483,
      "upload_time": "2018-08-14T16:31:56",
      "upload_time_iso_8601": "2018-08-14T16:31:56.318300Z",
      "url": "https://files.pythonhosted.org/packages/be/95/4e9e1d00ef42c849c2c38d7641038d61b6a83425990eb0d3e797c689e71d/logwrap-5.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "989e91d6e692a427f9998d57ffdbd79d13b54dc3b2c13840f91b0522ea436931",
        "md5": "c7b5617f2d66b9888f81f53529a90fb8",
        "sha256": "e84f850b5db27e086a52b523bc4a0f86d0f76ced710d2e079d01c9dcb6c6ea89"
      },
      "downloads": -1,
      "filename": "logwrap-5.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c7b5617f2d66b9888f81f53529a90fb8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.0",
      "size": 24601,
      "upload_time": "2018-08-14T16:31:57",
      "upload_time_iso_8601": "2018-08-14T16:31:57.531988Z",
      "url": "https://files.pythonhosted.org/packages/98/9e/91d6e692a427f9998d57ffdbd79d13b54dc3b2c13840f91b0522ea436931/logwrap-5.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}