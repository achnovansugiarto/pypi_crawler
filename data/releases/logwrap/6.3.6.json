{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        'arg0'=u'''arg0''',  # type: <class 'str'>\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg0''',\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.3.6/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.3.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9bb59be3077739c3e215c703d7a1481f769a9a6f55c630a005a67e57f34ff223",
        "md5": "861bbad4e4c77f32f88aecf1124c4df9",
        "sha256": "329cda239c6d580fe99b633c18fc5015a971627ef979f6e21962a89c026bdf07"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.6-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "861bbad4e4c77f32f88aecf1124c4df9",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1036885,
      "upload_time": "2019-10-18T11:03:13",
      "upload_time_iso_8601": "2019-10-18T11:03:13.212765Z",
      "url": "https://files.pythonhosted.org/packages/9b/b5/9be3077739c3e215c703d7a1481f769a9a6f55c630a005a67e57f34ff223/logwrap-6.3.6-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "203db82f138bccc0c6a464028bd02a6cf95f66cce8ed4c5ad56666131d473fb0",
        "md5": "e35872609ccfc9c18505a87f25d8ba87",
        "sha256": "746729ab93d36a4583bbec9e0c1739400c6cba30552ff8eaeb7252b4fc196976"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.6-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "e35872609ccfc9c18505a87f25d8ba87",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1136252,
      "upload_time": "2019-10-18T11:03:15",
      "upload_time_iso_8601": "2019-10-18T11:03:15.922785Z",
      "url": "https://files.pythonhosted.org/packages/20/3d/b82f138bccc0c6a464028bd02a6cf95f66cce8ed4c5ad56666131d473fb0/logwrap-6.3.6-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6859ae578646e60bc66deb84748f9c15f145bbed632b6a6515cbdca6fc3f603",
        "md5": "c0681a389b05b8d7103e3ecf0c818477",
        "sha256": "2b2e97ca76c942520afefe776f65bd046db770611bfb7cd7c43da0c12c28202a"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.6-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "c0681a389b05b8d7103e3ecf0c818477",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 161372,
      "upload_time": "2019-10-18T10:56:18",
      "upload_time_iso_8601": "2019-10-18T10:56:18.362781Z",
      "url": "https://files.pythonhosted.org/packages/e6/85/9ae578646e60bc66deb84748f9c15f145bbed632b6a6515cbdca6fc3f603/logwrap-6.3.6-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9932c507057821b0be4b69356101f606375edda5ac815c9348a608a70a07f35e",
        "md5": "cf4887cac4135c18b6f4db5d28ce28ab",
        "sha256": "bec81724de76c98126a005e9564bdcdc0e5489c3809a16988611430c98b5a0cd"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.6-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "cf4887cac4135c18b6f4db5d28ce28ab",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 185362,
      "upload_time": "2019-10-18T10:56:42",
      "upload_time_iso_8601": "2019-10-18T10:56:42.511788Z",
      "url": "https://files.pythonhosted.org/packages/99/32/c507057821b0be4b69356101f606375edda5ac815c9348a608a70a07f35e/logwrap-6.3.6-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2123c1cdf8e920532eb2441e23baecceb4a283501fd7e7496af5700860ea855b",
        "md5": "fd75b910c6e68030aea69ea9cfb84ffd",
        "sha256": "d7b9d57a44f65fdf1b20ba1e530afc870a7fd4c0a30148db5be08362ea38df4a"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.6-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "fd75b910c6e68030aea69ea9cfb84ffd",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1028314,
      "upload_time": "2019-10-18T11:03:18",
      "upload_time_iso_8601": "2019-10-18T11:03:18.659368Z",
      "url": "https://files.pythonhosted.org/packages/21/23/c1cdf8e920532eb2441e23baecceb4a283501fd7e7496af5700860ea855b/logwrap-6.3.6-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42d75804a43651b9c2f42bea17cfa1d7986df05e75c2bc2f78a107f53b12b8d5",
        "md5": "3afb1a92ff2a4ba74485940529e73fa1",
        "sha256": "7948c085419279984a73220883c5b8ce619084f7b678370b3adf74a935b75194"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.6-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "3afb1a92ff2a4ba74485940529e73fa1",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1126442,
      "upload_time": "2019-10-18T11:03:21",
      "upload_time_iso_8601": "2019-10-18T11:03:21.515154Z",
      "url": "https://files.pythonhosted.org/packages/42/d7/5804a43651b9c2f42bea17cfa1d7986df05e75c2bc2f78a107f53b12b8d5/logwrap-6.3.6-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03c198ea954975ed27bc03a7799f9dee7734b95b40eefc31c7a667d0dc9d7fd0",
        "md5": "285f513746825804751d990447e0ede5",
        "sha256": "50abdd0ff5b23cbe0116ed5ee315250c07d3e74cdac7e76ae33a4ea6c7deb22c"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.6-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "285f513746825804751d990447e0ede5",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 161344,
      "upload_time": "2019-10-18T10:57:04",
      "upload_time_iso_8601": "2019-10-18T10:57:04.189977Z",
      "url": "https://files.pythonhosted.org/packages/03/c1/98ea954975ed27bc03a7799f9dee7734b95b40eefc31c7a667d0dc9d7fd0/logwrap-6.3.6-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2187951547b5caff6ced5a5a7db9b9d2b650d47fdf4b7d147db85b073e8349fd",
        "md5": "0db46204459514d4f92172a1a63fb8ea",
        "sha256": "6a71e5cffa7e844b95f7ce1e8b48a8ea8254c0134dd143eb1ebd81cb55c44e04"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.6-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "0db46204459514d4f92172a1a63fb8ea",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 185639,
      "upload_time": "2019-10-18T10:56:59",
      "upload_time_iso_8601": "2019-10-18T10:56:59.706245Z",
      "url": "https://files.pythonhosted.org/packages/21/87/951547b5caff6ced5a5a7db9b9d2b650d47fdf4b7d147db85b073e8349fd/logwrap-6.3.6-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1e07b180e481acc607ecd4cb0abc63eb36cde3eb1af84d15d24f4b8d893987b",
        "md5": "6e846c9f2ba9cdbb5073795e82966430",
        "sha256": "76293d8250917d34e6319ecb7a552d82f9d50ea9f60a0557a832589be238e485"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e846c9f2ba9cdbb5073795e82966430",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25287,
      "upload_time": "2019-10-18T11:03:24",
      "upload_time_iso_8601": "2019-10-18T11:03:24.202094Z",
      "url": "https://files.pythonhosted.org/packages/e1/e0/7b180e481acc607ecd4cb0abc63eb36cde3eb1af84d15d24f4b8d893987b/logwrap-6.3.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbe6d81d3437eaac57289e534b5301c9780a880228ba9a16d77118fa03da1a49",
        "md5": "a9e365c132d5926904ef095a5b14e75d",
        "sha256": "2d62cfecac1d8feeef059a047497b1adebc4dcfb96b569bb308b5c5945f944e1"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "a9e365c132d5926904ef095a5b14e75d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 41897,
      "upload_time": "2019-10-18T11:03:25",
      "upload_time_iso_8601": "2019-10-18T11:03:25.950213Z",
      "url": "https://files.pythonhosted.org/packages/fb/e6/d81d3437eaac57289e534b5301c9780a880228ba9a16d77118fa03da1a49/logwrap-6.3.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}