{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip details in log (no traceback, no exception details - just class name)\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        'arg0'=u'''arg0''',  # type: <class 'str'>\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg0''',\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.6.0/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4031c9e4ed7b34a9a9c60a6595456024986a155b8e73d2d2dd879cf546b29ee3",
        "md5": "6d3b14ec936bf1b805ce7bdcc5c6da4c",
        "sha256": "b6ff31149e02410cd2f95bb82c46fe9aec00af7d86b1661c7b84755e19000280"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "6d3b14ec936bf1b805ce7bdcc5c6da4c",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1030341,
      "upload_time": "2019-12-16T11:40:48",
      "upload_time_iso_8601": "2019-12-16T11:40:48.942788Z",
      "url": "https://files.pythonhosted.org/packages/40/31/c9e4ed7b34a9a9c60a6595456024986a155b8e73d2d2dd879cf546b29ee3/logwrap-6.6.0-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1276107177e847424be38f3365a88d677a626580f0e54d01f1d0ed829df02e6c",
        "md5": "d60b29a7c439abb98eaa83f2cc82dafe",
        "sha256": "25894ceae043dcaa59ed1fba612c3910b6d89648c5649b5eaa7c3a9b9229e6a8"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "d60b29a7c439abb98eaa83f2cc82dafe",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1126913,
      "upload_time": "2019-12-16T11:40:51",
      "upload_time_iso_8601": "2019-12-16T11:40:51.042783Z",
      "url": "https://files.pythonhosted.org/packages/12/76/107177e847424be38f3365a88d677a626580f0e54d01f1d0ed829df02e6c/logwrap-6.6.0-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79b1a783f0dcdccafac0e131374d5e4f54c7c9ad43e217d03bbebb640febc0e0",
        "md5": "587d2f451f5bb42b920179a8b7db34bd",
        "sha256": "1d710001123b9d44a2b3fbb89c35ba206a52f87515cb98a2bac46cd5fbc75f4a"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "587d2f451f5bb42b920179a8b7db34bd",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 160594,
      "upload_time": "2019-12-16T11:33:28",
      "upload_time_iso_8601": "2019-12-16T11:33:28.976920Z",
      "url": "https://files.pythonhosted.org/packages/79/b1/a783f0dcdccafac0e131374d5e4f54c7c9ad43e217d03bbebb640febc0e0/logwrap-6.6.0-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85fdfea4e6b2e4a8726752d184f2fca392c8de5da0360fdb875ffa7f8957f03f",
        "md5": "929b9de74b5da9a9e763f4396c760b9f",
        "sha256": "7c370c25736ca0acfba77298fe65f36090715b1048345490ff9b6912670cca35"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "929b9de74b5da9a9e763f4396c760b9f",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 184594,
      "upload_time": "2019-12-16T11:33:32",
      "upload_time_iso_8601": "2019-12-16T11:33:32.738738Z",
      "url": "https://files.pythonhosted.org/packages/85/fd/fea4e6b2e4a8726752d184f2fca392c8de5da0360fdb875ffa7f8957f03f/logwrap-6.6.0-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d387298320d6b0e62e2c617eafc640fd07fa6b01193579473be802316c1e79e",
        "md5": "31051ed1a2b7a0caa852f103ab07d4ea",
        "sha256": "152b77a3ba0f812f1004695df18d062e0b7671465f14d1177a140f619c9db14b"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "31051ed1a2b7a0caa852f103ab07d4ea",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1022030,
      "upload_time": "2019-12-16T11:40:53",
      "upload_time_iso_8601": "2019-12-16T11:40:53.160007Z",
      "url": "https://files.pythonhosted.org/packages/7d/38/7298320d6b0e62e2c617eafc640fd07fa6b01193579473be802316c1e79e/logwrap-6.6.0-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b6b83ef9bdf6bb0b216183845f3e3cc0059d276b192bd51ac7710ab8166d642",
        "md5": "6e866cd7624cf7d52c91e1b6b102c5ef",
        "sha256": "377568b1781267fc0a195a150b5ba7731e097babc386bd9a573e058d752f9621"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "6e866cd7624cf7d52c91e1b6b102c5ef",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1120705,
      "upload_time": "2019-12-16T11:40:55",
      "upload_time_iso_8601": "2019-12-16T11:40:55.664770Z",
      "url": "https://files.pythonhosted.org/packages/3b/6b/83ef9bdf6bb0b216183845f3e3cc0059d276b192bd51ac7710ab8166d642/logwrap-6.6.0-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4657e7fd70c47caad9c48ff748499ea72fa8a3b35fc85806169a6f6b494535c1",
        "md5": "d475b8a834d102856d3d28e04cb6be0d",
        "sha256": "639ce80d5225002816f88ecf51f6e5b6cafb3e026872c744b2d2a01652a599e9"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "d475b8a834d102856d3d28e04cb6be0d",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 160453,
      "upload_time": "2019-12-16T11:33:34",
      "upload_time_iso_8601": "2019-12-16T11:33:34.318953Z",
      "url": "https://files.pythonhosted.org/packages/46/57/e7fd70c47caad9c48ff748499ea72fa8a3b35fc85806169a6f6b494535c1/logwrap-6.6.0-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a45fbc34f83daa95ab80ed056efea8369bbc540f484cef40b5eb92c1d64d3753",
        "md5": "3872715429ee212ed67f9bae78e499ff",
        "sha256": "08f3c1371e7f1df0359a8162003b59dd24ed45f7cedbac40584e4c368fc37da6"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "3872715429ee212ed67f9bae78e499ff",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 184436,
      "upload_time": "2019-12-16T11:33:25",
      "upload_time_iso_8601": "2019-12-16T11:33:25.238778Z",
      "url": "https://files.pythonhosted.org/packages/a4/5f/bc34f83daa95ab80ed056efea8369bbc540f484cef40b5eb92c1d64d3753/logwrap-6.6.0-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4a61b6a9a63b1a4d9839a8b72c84c102cdc116f54f7838aa86a41add887eafb",
        "md5": "af6d285f3515d9a70efc9de083c5693d",
        "sha256": "76d0ea3f908798b5af03bac8e6c96fb724e06af6a353777568507d0ded3c6503"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp38-cp38-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "af6d285f3515d9a70efc9de083c5693d",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1133850,
      "upload_time": "2019-12-16T11:40:58",
      "upload_time_iso_8601": "2019-12-16T11:40:58.170870Z",
      "url": "https://files.pythonhosted.org/packages/e4/a6/1b6a9a63b1a4d9839a8b72c84c102cdc116f54f7838aa86a41add887eafb/logwrap-6.6.0-cp38-cp38-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4d700d9626df7f27a03bd275fc0c5c2bb1d20f96d804750f875a585b3181ce5",
        "md5": "981d1d20181831502de8533bec3c5c22",
        "sha256": "dbc951203f88bb221e4a8b1e02af7cf403288d38f76ff93d368ada64062c96f6"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "981d1d20181831502de8533bec3c5c22",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1256368,
      "upload_time": "2019-12-16T11:41:00",
      "upload_time_iso_8601": "2019-12-16T11:41:00.870079Z",
      "url": "https://files.pythonhosted.org/packages/e4/d7/00d9626df7f27a03bd275fc0c5c2bb1d20f96d804750f875a585b3181ce5/logwrap-6.6.0-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3343a662851edf1583a92149a1b974301ca84091a2125d5c8769f89b24cd258d",
        "md5": "7de1c24f4dd4069cd2594dce479d0584",
        "sha256": "275ae05269ffae8bcdf2d7fb4180a8c10169950fface5944d62dab9f81f52b9d"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp38-cp38m-win32.whl",
      "has_sig": false,
      "md5_digest": "7de1c24f4dd4069cd2594dce479d0584",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 166771,
      "upload_time": "2019-12-16T11:33:31",
      "upload_time_iso_8601": "2019-12-16T11:33:31.721199Z",
      "url": "https://files.pythonhosted.org/packages/33/43/a662851edf1583a92149a1b974301ca84091a2125d5c8769f89b24cd258d/logwrap-6.6.0-cp38-cp38m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "565ad0f077085efa740d772a68badb9f5baa7bf59e367bed6aa0e1eb23ff17f8",
        "md5": "6097e46a40a3b01f7e23dab8513207da",
        "sha256": "968333161bf89af2d319cb0cbf168688edf30d96406aa033a23b52eb7fb1a94d"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-cp38-cp38m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "6097e46a40a3b01f7e23dab8513207da",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 193176,
      "upload_time": "2019-12-16T11:33:23",
      "upload_time_iso_8601": "2019-12-16T11:33:23.939197Z",
      "url": "https://files.pythonhosted.org/packages/56/5a/d0f077085efa740d772a68badb9f5baa7bf59e367bed6aa0e1eb23ff17f8/logwrap-6.6.0-cp38-cp38m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c43f646254285abe5e44ed655ff7fd6c650b8bd5a1db1ce011c8901a1a592d58",
        "md5": "4bc3f326adf25342eee87d26a6b4fa24",
        "sha256": "eb3e96d2a0e06f72f908ff2234f2bff30b380b812a89268280f257343ea20bf2"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4bc3f326adf25342eee87d26a6b4fa24",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25312,
      "upload_time": "2019-12-16T11:41:03",
      "upload_time_iso_8601": "2019-12-16T11:41:03.047643Z",
      "url": "https://files.pythonhosted.org/packages/c4/3f/646254285abe5e44ed655ff7fd6c650b8bd5a1db1ce011c8901a1a592d58/logwrap-6.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b7ed9767eae31a3f7522c6e716f1a4ed196f03686e4fa940f39dd57a3205265",
        "md5": "5fb2ed0489dede2cf1d3cf6152bebe06",
        "sha256": "d48c66a023ab855ec4a72053e619fcf967ff6d337e3826d801e53e5220f8f396"
      },
      "downloads": -1,
      "filename": "logwrap-6.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5fb2ed0489dede2cf1d3cf6152bebe06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 41952,
      "upload_time": "2019-12-16T11:41:04",
      "upload_time_iso_8601": "2019-12-16T11:41:04.640305Z",
      "url": "https://files.pythonhosted.org/packages/6b/7e/d9767eae31a3f7522c6e716f1a4ed196f03686e4fa940f39dd57a3205265/logwrap-6.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}