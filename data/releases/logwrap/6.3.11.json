{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        'arg0'=u'''arg0''',  # type: <class 'str'>\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg0''',\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.3.11/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.3.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a161e431ba5c79bc1739fc1a373fe27f8cb356279bcf4de7b4452994b31d0ba",
        "md5": "bc8b3d07ba5614d8c638f0c7befca7bf",
        "sha256": "22f3d8949e93b02920402e34bf398a09294b04bab3512a9be408ffb16b005dbb"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "bc8b3d07ba5614d8c638f0c7befca7bf",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1047319,
      "upload_time": "2019-11-15T10:30:04",
      "upload_time_iso_8601": "2019-11-15T10:30:04.198402Z",
      "url": "https://files.pythonhosted.org/packages/5a/16/1e431ba5c79bc1739fc1a373fe27f8cb356279bcf4de7b4452994b31d0ba/logwrap-6.3.11-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f116619c7bf2ccc3105c05d76ffb582c2846d5308a37835ffb61032b5fa2d35e",
        "md5": "087962f59c357392930ca5cdd8900b75",
        "sha256": "89820a3112eb84fc7c21433fdf3196208ba72da30806b24ee7b2c81fe5249b6e"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "087962f59c357392930ca5cdd8900b75",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1147572,
      "upload_time": "2019-11-15T10:30:06",
      "upload_time_iso_8601": "2019-11-15T10:30:06.648302Z",
      "url": "https://files.pythonhosted.org/packages/f1/16/619c7bf2ccc3105c05d76ffb582c2846d5308a37835ffb61032b5fa2d35e/logwrap-6.3.11-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "525d9568dc7bff25892298b7425ee40e3e235aeab1042ac209a5f8e08465fd0d",
        "md5": "c18fd0fb7f480f4510cf76bfffb7c462",
        "sha256": "7a163f2afdfc40cc693a29dae7a8cebac6061b5799764c6f65386622cf0cf3c7"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "c18fd0fb7f480f4510cf76bfffb7c462",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 163569,
      "upload_time": "2019-11-15T10:22:09",
      "upload_time_iso_8601": "2019-11-15T10:22:09.039499Z",
      "url": "https://files.pythonhosted.org/packages/52/5d/9568dc7bff25892298b7425ee40e3e235aeab1042ac209a5f8e08465fd0d/logwrap-6.3.11-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f149c99562cdf501a4b17a109618eaeeb9797b836007f2627cf2dfa3e8d9655c",
        "md5": "6a9c3f13e11e537f9e9be47637e9474b",
        "sha256": "705f59f59614e9f0084c79df4bed09aa85a476fbf3b11151b66b383ccb7450e2"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "6a9c3f13e11e537f9e9be47637e9474b",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 188673,
      "upload_time": "2019-11-15T10:21:59",
      "upload_time_iso_8601": "2019-11-15T10:21:59.396747Z",
      "url": "https://files.pythonhosted.org/packages/f1/49/c99562cdf501a4b17a109618eaeeb9797b836007f2627cf2dfa3e8d9655c/logwrap-6.3.11-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3cf1b347bd9240ca883a9ee1cd578c0a5746528e9a0d23746a0d98386e1c5d02",
        "md5": "e91c55292b854129d9bd43f9060af0fa",
        "sha256": "8650f838546261261cd71d1c075bd2c541e66af4ca246ea07d8a397c0dbbd428"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "e91c55292b854129d9bd43f9060af0fa",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1038239,
      "upload_time": "2019-11-15T10:30:09",
      "upload_time_iso_8601": "2019-11-15T10:30:09.249824Z",
      "url": "https://files.pythonhosted.org/packages/3c/f1/b347bd9240ca883a9ee1cd578c0a5746528e9a0d23746a0d98386e1c5d02/logwrap-6.3.11-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38c58981fef60efda511bf80fcdd1a735eb65f7d5cfd4717f254e4d9f5055bd0",
        "md5": "059e05da45d2244ceb24f627d0fc6006",
        "sha256": "485178ed4d6f0502aa71997e648bb3c3b52f05b3c68a5e1020ce7722976ea936"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "059e05da45d2244ceb24f627d0fc6006",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1138235,
      "upload_time": "2019-11-15T10:30:11",
      "upload_time_iso_8601": "2019-11-15T10:30:11.467751Z",
      "url": "https://files.pythonhosted.org/packages/38/c5/8981fef60efda511bf80fcdd1a735eb65f7d5cfd4717f254e4d9f5055bd0/logwrap-6.3.11-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0f1b4c5eab607b58fda64d3946e99fd011869488b5784a698c1344d19b7c03b",
        "md5": "b2fbbd22dd2462af042f60e661076f2e",
        "sha256": "a95a105c4a14cef2d5a24b307cbbc5cf13be824e46fbc2ff1a6763d0a77975ba"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "b2fbbd22dd2462af042f60e661076f2e",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 163498,
      "upload_time": "2019-11-15T10:22:10",
      "upload_time_iso_8601": "2019-11-15T10:22:10.519729Z",
      "url": "https://files.pythonhosted.org/packages/e0/f1/b4c5eab607b58fda64d3946e99fd011869488b5784a698c1344d19b7c03b/logwrap-6.3.11-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a566b058de2e6f584a1168ea6e5054289916af6725ab62e87563d99ab3eb96d0",
        "md5": "cf51130665c095a83c0195ed3183d8aa",
        "sha256": "ca7e78e15ec5f088c8d6924e83f26e1d2c1987818885962e3f81d78582177ca7"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "cf51130665c095a83c0195ed3183d8aa",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 188379,
      "upload_time": "2019-11-15T10:22:10",
      "upload_time_iso_8601": "2019-11-15T10:22:10.758865Z",
      "url": "https://files.pythonhosted.org/packages/a5/66/b058de2e6f584a1168ea6e5054289916af6725ab62e87563d99ab3eb96d0/logwrap-6.3.11-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af8d18fa9abb3c558d432e1c2e39ed6b031aaaab7e116c1cb85db3a3159309c9",
        "md5": "a520671843a0629dfd93629a77b16b1b",
        "sha256": "6183795e9e0d851720faae0d7f34e0cde727ef10f6570e969a92ea2431bc9cab"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp38-cp38-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "a520671843a0629dfd93629a77b16b1b",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1157038,
      "upload_time": "2019-11-15T10:30:13",
      "upload_time_iso_8601": "2019-11-15T10:30:13.850826Z",
      "url": "https://files.pythonhosted.org/packages/af/8d/18fa9abb3c558d432e1c2e39ed6b031aaaab7e116c1cb85db3a3159309c9/logwrap-6.3.11-cp38-cp38-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9afa94972936ab5689563bed4def8f14a31c456a2add255f5c80f173ca188fe",
        "md5": "84d20f82aca80719462d4d17845af4a1",
        "sha256": "af6e7deb497f24772dbe233923c6d69540213f3cfcc7bed537a1beab658e891d"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "84d20f82aca80719462d4d17845af4a1",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1266913,
      "upload_time": "2019-11-15T10:30:16",
      "upload_time_iso_8601": "2019-11-15T10:30:16.082776Z",
      "url": "https://files.pythonhosted.org/packages/e9/af/a94972936ab5689563bed4def8f14a31c456a2add255f5c80f173ca188fe/logwrap-6.3.11-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa122d0b78cc9992460b79f0cb5e95537465e309b31db172eab79818c27ed57a",
        "md5": "284206a06bedf10b49efcebdb7fd493e",
        "sha256": "1454faf9536f5f5f70b45411ca2a2829e7ba98e1b51bccb8b246020ae89f5fec"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp38-cp38m-win32.whl",
      "has_sig": false,
      "md5_digest": "284206a06bedf10b49efcebdb7fd493e",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 169588,
      "upload_time": "2019-11-15T10:22:10",
      "upload_time_iso_8601": "2019-11-15T10:22:10.549274Z",
      "url": "https://files.pythonhosted.org/packages/fa/12/2d0b78cc9992460b79f0cb5e95537465e309b31db172eab79818c27ed57a/logwrap-6.3.11-cp38-cp38m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8edf59a599e3b41c2536eb70b6ba3e6ea41457471e51a074a0b6f33aa6d867b0",
        "md5": "aa816ee16d76163a55ab9eb62ec38ae3",
        "sha256": "ed8ca6539a74da8a39cbde4e33b0e17768c1c255c90ed3f7e64737465e809740"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-cp38-cp38m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "aa816ee16d76163a55ab9eb62ec38ae3",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 196597,
      "upload_time": "2019-11-15T10:22:01",
      "upload_time_iso_8601": "2019-11-15T10:22:01.919799Z",
      "url": "https://files.pythonhosted.org/packages/8e/df/59a599e3b41c2536eb70b6ba3e6ea41457471e51a074a0b6f33aa6d867b0/logwrap-6.3.11-cp38-cp38m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1896903379ef347035e5b5574e3bcac40a2b9248d06e2f937b6088c105dc298c",
        "md5": "ff0f7fb6c9cd3f1ee15f679137b8cafe",
        "sha256": "9320f1a248f4e85081b789c3fd9d0fb9374900c6022f672137941d862366d55c"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff0f7fb6c9cd3f1ee15f679137b8cafe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25436,
      "upload_time": "2019-11-15T10:30:18",
      "upload_time_iso_8601": "2019-11-15T10:30:18.319435Z",
      "url": "https://files.pythonhosted.org/packages/18/96/903379ef347035e5b5574e3bcac40a2b9248d06e2f937b6088c105dc298c/logwrap-6.3.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5844e3659664e1fcc7c454ca1ff040d25e5c632a93a2e53749257cd0d6fff38",
        "md5": "e5c48bc2fe5cc46ff2561a6d40aae3bd",
        "sha256": "6d75d9eba8ac018cceb75505610b67132936f764f72326344ec3a94b0db86f23"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.11.tar.gz",
      "has_sig": false,
      "md5_digest": "e5c48bc2fe5cc46ff2561a6d40aae3bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 42144,
      "upload_time": "2019-11-15T10:30:20",
      "upload_time_iso_8601": "2019-11-15T10:30:20.406510Z",
      "url": "https://files.pythonhosted.org/packages/c5/84/4e3659664e1fcc7c454ca1ff040d25e5c632a93a2e53749257cd0d6fff38/logwrap-6.3.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}