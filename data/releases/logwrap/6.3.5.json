{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        'arg0'=u'''arg0''',  # type: <class 'str'>\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg0''',\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.3.5/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.3.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3f2e15a210992aed4b217c2253ef16765810fdbf9d5c675e5f8aa88a4ed0b9c",
        "md5": "c29f03aed3f5bc69e5e481d88942c7d9",
        "sha256": "647a8c2fca6c88330bd8c52dae420e025a429a5886319f05abfb3bab93c21742"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.5-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "c29f03aed3f5bc69e5e481d88942c7d9",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1044787,
      "upload_time": "2019-10-16T15:05:36",
      "upload_time_iso_8601": "2019-10-16T15:05:36.567085Z",
      "url": "https://files.pythonhosted.org/packages/e3/f2/e15a210992aed4b217c2253ef16765810fdbf9d5c675e5f8aa88a4ed0b9c/logwrap-6.3.5-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2824ac8fac5bd95e9bd7af8f05e8ca3d0fb4113d91030b3770b444e8a5673499",
        "md5": "9d90ba023d920d21b41908c982143907",
        "sha256": "a9d506713d83d566f3bc7fdee7435be344be54d7fd7feefd8872e72e4f5545cd"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.5-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "9d90ba023d920d21b41908c982143907",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1145174,
      "upload_time": "2019-10-16T15:05:41",
      "upload_time_iso_8601": "2019-10-16T15:05:41.024266Z",
      "url": "https://files.pythonhosted.org/packages/28/24/ac8fac5bd95e9bd7af8f05e8ca3d0fb4113d91030b3770b444e8a5673499/logwrap-6.3.5-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90b0a168da2e11244adbecce199d495464d6d0b6fe94be5d0c18404a69aa4b9f",
        "md5": "67cad169fa1e6fac1f05b20368942d89",
        "sha256": "b453a2de9fa7ac9b44897cfcb96d857a0aa8f3f53987f82c658f1a868e54abf3"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.5-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "67cad169fa1e6fac1f05b20368942d89",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 161374,
      "upload_time": "2019-10-16T15:00:23",
      "upload_time_iso_8601": "2019-10-16T15:00:23.002869Z",
      "url": "https://files.pythonhosted.org/packages/90/b0/a168da2e11244adbecce199d495464d6d0b6fe94be5d0c18404a69aa4b9f/logwrap-6.3.5-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c48905168bef8006ff9c038ab9e2d0f9bd3ee5200d3f7fa8a92a33be088de79e",
        "md5": "ceb8213d047a945ed8ee4094d62aee14",
        "sha256": "176fd642bbaa9927db54fd8a3c670cae2687dc515708902d14fee0c17f663149"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.5-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "ceb8213d047a945ed8ee4094d62aee14",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 185359,
      "upload_time": "2019-10-16T15:00:17",
      "upload_time_iso_8601": "2019-10-16T15:00:17.590781Z",
      "url": "https://files.pythonhosted.org/packages/c4/89/05168bef8006ff9c038ab9e2d0f9bd3ee5200d3f7fa8a92a33be088de79e/logwrap-6.3.5-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d9129817ad54ab7a1231df0ea9c55b04eb7193ce8373f493e40c4712fc56285",
        "md5": "ebcb42ccb702377d20b59ff6e982a83e",
        "sha256": "9cf22e533c8c0629b4323bec18b11fa9c18da2a3ac75199f0796de94ea776227"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.5-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "ebcb42ccb702377d20b59ff6e982a83e",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1036430,
      "upload_time": "2019-10-16T15:05:49",
      "upload_time_iso_8601": "2019-10-16T15:05:49.642625Z",
      "url": "https://files.pythonhosted.org/packages/8d/91/29817ad54ab7a1231df0ea9c55b04eb7193ce8373f493e40c4712fc56285/logwrap-6.3.5-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd28a05af74e0306571455ce150336013b897deae4743cdbf7f3cc75e5c723fe",
        "md5": "8b604774f6ccb6b20805db107dc1bb94",
        "sha256": "aeab14115e53469cb38604887bfa9855f2f538dec2fb6419b0e24be0a58a2fb3"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.5-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "8b604774f6ccb6b20805db107dc1bb94",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1135382,
      "upload_time": "2019-10-16T15:05:56",
      "upload_time_iso_8601": "2019-10-16T15:05:56.218643Z",
      "url": "https://files.pythonhosted.org/packages/dd/28/a05af74e0306571455ce150336013b897deae4743cdbf7f3cc75e5c723fe/logwrap-6.3.5-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "824ebb9931af32ec3fe5e9105a5f2b7b55558afe9cfcb480b348097b229d9d53",
        "md5": "7dfc9c1a7d64f1f95e747339a9e753c4",
        "sha256": "726c403f9d5741aea53fe2b16b9d9d7354c4a367452ac0fbc57a990e93e0d5dc"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.5-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "7dfc9c1a7d64f1f95e747339a9e753c4",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 161343,
      "upload_time": "2019-10-16T14:59:31",
      "upload_time_iso_8601": "2019-10-16T14:59:31.191068Z",
      "url": "https://files.pythonhosted.org/packages/82/4e/bb9931af32ec3fe5e9105a5f2b7b55558afe9cfcb480b348097b229d9d53/logwrap-6.3.5-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b60f924edc50811fb8878cd491b4fdb52a3f847dde3c840351df6801ea4990c",
        "md5": "4478096b968286f11c48c1508fc1150b",
        "sha256": "f9c7ec500f3e40a2458d78762c7eb315b468995ef3fd7d1f7582b13b12ffbfe5"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.5-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "4478096b968286f11c48c1508fc1150b",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 185639,
      "upload_time": "2019-10-16T14:59:20",
      "upload_time_iso_8601": "2019-10-16T14:59:20.558776Z",
      "url": "https://files.pythonhosted.org/packages/6b/60/f924edc50811fb8878cd491b4fdb52a3f847dde3c840351df6801ea4990c/logwrap-6.3.5-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9575490fe639aaf2c8e474f4551da873a0f5ae056549bc20e7db83b2ca25dc0",
        "md5": "e87dc9ba4e911b18c82be2a93914fd19",
        "sha256": "6d0898917d560ec281b337c08515ab6b6b7e5e97b48abdb8aefaba0f553ef709"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e87dc9ba4e911b18c82be2a93914fd19",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25290,
      "upload_time": "2019-10-16T15:06:06",
      "upload_time_iso_8601": "2019-10-16T15:06:06.678460Z",
      "url": "https://files.pythonhosted.org/packages/b9/57/5490fe639aaf2c8e474f4551da873a0f5ae056549bc20e7db83b2ca25dc0/logwrap-6.3.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f88e1eb9d09c7c42a69d4e49b7b5c7197ba2da90796efb839434d7a4df7176dd",
        "md5": "4034c4a0222627ee76c8008d61f30790",
        "sha256": "5384438db6e091574547c01532828e3911368a60abcff16804a39e88bfa8a2b1"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.5.tar.gz",
      "has_sig": false,
      "md5_digest": "4034c4a0222627ee76c8008d61f30790",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 41987,
      "upload_time": "2019-10-16T15:06:10",
      "upload_time_iso_8601": "2019-10-16T15:06:10.958788Z",
      "url": "https://files.pythonhosted.org/packages/f8/8e/1eb9d09c7c42a69d4e49b7b5c7197ba2da90796efb839434d7a4df7176dd/logwrap-6.3.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}