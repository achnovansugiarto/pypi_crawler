{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        'arg0'=u'''arg0''',  # type: <class 'str'>\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg0''',\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.3.4/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c0868e9668058a68798fa7f3e8c66c3a94e7d68c12ef22c27e88b44e8ba1693",
        "md5": "348609c1717447c9b16db9c805254c08",
        "sha256": "92002a75650deb93c295bc03a28335a177c86af1b9d949d7c21ed59ea13c275e"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.4-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "348609c1717447c9b16db9c805254c08",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1044788,
      "upload_time": "2019-10-16T12:03:05",
      "upload_time_iso_8601": "2019-10-16T12:03:05.991050Z",
      "url": "https://files.pythonhosted.org/packages/3c/08/68e9668058a68798fa7f3e8c66c3a94e7d68c12ef22c27e88b44e8ba1693/logwrap-6.3.4-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abb260b9efeaedbed2924886fcf1888b68483c8370336ab03008f62466fff5bf",
        "md5": "ecde0265152dc3a37898ac9a3bc58ca3",
        "sha256": "d341c0659f196163014121fb2ded315c26a6b8f1faf9008d420ccccfb32ded71"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.4-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ecde0265152dc3a37898ac9a3bc58ca3",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1145172,
      "upload_time": "2019-10-16T12:03:08",
      "upload_time_iso_8601": "2019-10-16T12:03:08.934781Z",
      "url": "https://files.pythonhosted.org/packages/ab/b2/60b9efeaedbed2924886fcf1888b68483c8370336ab03008f62466fff5bf/logwrap-6.3.4-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d5e8fbe91daf0c7f8dc17244028b2ca02f6bd950ce51bcff97dc3a4986c7e95",
        "md5": "ffc19e812938ab71c6c7da2254af767c",
        "sha256": "1ec58dc340dde0c8a336b6376a36578b16a5d22baeb2d0a57f4a8ac2c613a948"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.4-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "ffc19e812938ab71c6c7da2254af767c",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 161377,
      "upload_time": "2019-10-16T12:14:24",
      "upload_time_iso_8601": "2019-10-16T12:14:24.950941Z",
      "url": "https://files.pythonhosted.org/packages/9d/5e/8fbe91daf0c7f8dc17244028b2ca02f6bd950ce51bcff97dc3a4986c7e95/logwrap-6.3.4-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5609a059a0620ac566da6685e101324a2f6e252facdcb8dee6d40d0a2e8ef68",
        "md5": "b643a325a94f5bbe915c602cc65a02b2",
        "sha256": "6b5bb9a799cf6169d25bd159d46dd5b4d750a08c255d6a7db783ace1103492d5"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.4-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "b643a325a94f5bbe915c602cc65a02b2",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 185360,
      "upload_time": "2019-10-16T12:14:14",
      "upload_time_iso_8601": "2019-10-16T12:14:14.766145Z",
      "url": "https://files.pythonhosted.org/packages/d5/60/9a059a0620ac566da6685e101324a2f6e252facdcb8dee6d40d0a2e8ef68/logwrap-6.3.4-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f060d951f0ab3090502dd722719e24bd20a0239091a97d06cfc67a7506ae9be",
        "md5": "00596351aa3bcbad5e0bd64368c49c5f",
        "sha256": "a23216d064c450c89d1e6141ce1c2e1750ec73f136ff0e4ffaf22df8f815538c"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.4-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "00596351aa3bcbad5e0bd64368c49c5f",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1036429,
      "upload_time": "2019-10-16T12:03:11",
      "upload_time_iso_8601": "2019-10-16T12:03:11.855374Z",
      "url": "https://files.pythonhosted.org/packages/4f/06/0d951f0ab3090502dd722719e24bd20a0239091a97d06cfc67a7506ae9be/logwrap-6.3.4-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bcc37f4e1f51715579a2deb4a217d77314a1656238b014322e657dc22a61eeb",
        "md5": "0013392e31d003e124877170b434e66a",
        "sha256": "fae3b8ecb2ad217509b280f2a7038473ee0b551dc0d22cd9d1e86228508111ad"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.4-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "0013392e31d003e124877170b434e66a",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1135381,
      "upload_time": "2019-10-16T12:03:14",
      "upload_time_iso_8601": "2019-10-16T12:03:14.821472Z",
      "url": "https://files.pythonhosted.org/packages/6b/cc/37f4e1f51715579a2deb4a217d77314a1656238b014322e657dc22a61eeb/logwrap-6.3.4-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8508b14292d190432c265d03e3a86a92152d691dc2c26e00fe63d9e37e3600cb",
        "md5": "3c37bf08eb11a7e6ab38baaefd2a91f3",
        "sha256": "ca7585cff5ef028762bd7395560b56ea84986c8dc7330399c44ea79952b31130"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.4-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "3c37bf08eb11a7e6ab38baaefd2a91f3",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 161343,
      "upload_time": "2019-10-16T12:14:27",
      "upload_time_iso_8601": "2019-10-16T12:14:27.778974Z",
      "url": "https://files.pythonhosted.org/packages/85/08/b14292d190432c265d03e3a86a92152d691dc2c26e00fe63d9e37e3600cb/logwrap-6.3.4-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2ab93fad53ab3bad28f0c5da155893048372739a8f6528c04d424515d843f01",
        "md5": "b2ff3d021ba48f63b2427938e81fd201",
        "sha256": "9c279ee4e6053e268ceed0c4773ca4c517591420330d21feacbba184baf87b2b"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.4-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "b2ff3d021ba48f63b2427938e81fd201",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 185639,
      "upload_time": "2019-10-16T12:14:13",
      "upload_time_iso_8601": "2019-10-16T12:14:13.362779Z",
      "url": "https://files.pythonhosted.org/packages/d2/ab/93fad53ab3bad28f0c5da155893048372739a8f6528c04d424515d843f01/logwrap-6.3.4-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c42e6019f074c0c30f06feb092c2ab9b60d764561a60c69923d83f0c05f73543",
        "md5": "341a1d21674ebef7397d5c0dcd273eb7",
        "sha256": "36c1294fcdb19e9132f43c182cec00987ddd6ec08f70f32403a497b20f33feba"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "341a1d21674ebef7397d5c0dcd273eb7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25287,
      "upload_time": "2019-10-16T12:03:17",
      "upload_time_iso_8601": "2019-10-16T12:03:17.339710Z",
      "url": "https://files.pythonhosted.org/packages/c4/2e/6019f074c0c30f06feb092c2ab9b60d764561a60c69923d83f0c05f73543/logwrap-6.3.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7126fd5e30113c55d1a18a647f7aba8a2f010b673882266bd4394ad766c5aba",
        "md5": "43488b7fe450d64406ea4577706b319b",
        "sha256": "a04dc1182bf287873cbb58f702e2645a80e324e11fa93d01153abdd74da414d9"
      },
      "downloads": -1,
      "filename": "logwrap-6.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "43488b7fe450d64406ea4577706b319b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 41954,
      "upload_time": "2019-10-16T12:03:19",
      "upload_time_iso_8601": "2019-10-16T12:03:19.241378Z",
      "url": "https://files.pythonhosted.org/packages/e7/12/6fd5e30113c55d1a18a647f7aba8a2f010b673882266bd4394ad766c5aba/logwrap-6.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}