{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logwrap\n=======\n\n.. image:: https://travis-ci.com/python-useful-helpers/logwrap.svg?branch=master\n    :target: https://travis-ci.com/python-useful-helpers/logwrap\n.. image:: https://dev.azure.com/python-useful-helpers/logwrap/_apis/build/status/python-useful-helpers.logwrap?branchName=master\n    :alt: Azure DevOps builds\n    :target: https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1\n.. image:: https://coveralls.io/repos/github/python-useful-helpers/logwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/python-useful-helpers/logwrap?branch=master\n.. image:: https://readthedocs.org/projects/logwrap/badge/?version=latest\n    :target: http://logwrap.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/pyversions/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/pypi/status/logwrap.svg\n    :target: https://pypi.python.org/pypi/logwrap\n.. image:: https://img.shields.io/github/license/python-useful-helpers/logwrap.svg\n    :target: https://raw.githubusercontent.com/python-useful-helpers/logwrap/master/LICENSE\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\nlogwrap is a helper for logging in human-readable format function arguments and call result on function call.\nWhy? Because logging of `*args, **kwargs` become useless with project grow and you need more details in call log.\n\nCons:\n\n* Log records are not single line.\n\nPros:\n\n* Log records are not single 100500 symbols length line.\n  (Especially actual for testing/development environments and for Kibana users).\n* Service free: job is done by this library and it's dependencies. It works at virtualenv\n* Free software: Apache license\n* Open Source: https://github.com/python-useful-helpers/logwrap\n* PyPI packaged: https://pypi.python.org/pypi/logwrap\n* Self-documented code: docstrings with types in comments\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 3.6\n    Python 3.7\n    Python 3.8\n\n.. note:: 2.7 is supported in versions < 5.0.0, python 3.5 in versions < 6 due to syntax changes.\n\nThis package includes helpers:\n\n* `logwrap` - main helper. The same is `LogWrap`.\n\n* `LogWrap` - class with `logwrap` implementation. May be used directly.\n\n* `pretty_repr`\n\n* `pretty_str`\n\n* `PrettyFormat`\n\n* `LogOnAccess` - property with logging on successful get/set/delete or failure.\n\nUsage\n=====\n\nlogwrap\n-------\nThe main decorator. Could be used as not argumented (`@logwrap.logwrap`) and argumented (`@logwrap.logwrap()`).\nNot argumented usage simple calls with default values for all positions.\n\n.. note:: Argumens should be set via keywords only.\n\nArgumented usage with arguments from signature:\n\n.. code-block:: python\n\n    @logwrap.logwrap(\n        log=logging.getLogger(__name__),  # __name__ = 'logwrap'\n        log_level=logging.DEBUG,\n        exc_level=logging.ERROR,\n        max_indent=20,  # forwarded to the pretty_repr\n        spec=None,  # use target callable function for spec\n        blacklisted_names=None,  # list argument names, which should be dropped from log\n        blacklisted_exceptions=None,  # Exceptions to skip in log\n        log_call_args=True,  # Log call arguments before call\n        log_call_args_on_exc=True,  # Log call arguments if exception happens\n        log_traceback = True,  # Log traceback if exception happens\n        log_result_obj=True,  # Log result object\n    )\n\nUsage examples:\n\n.. code-block:: python\n\n    @logwrap.logwrap()\n    def foo():\n        pass\n\nis equal to:\n\n.. code-block:: python\n\n    @logwrap.logwrap\n    def foo():\n        pass\n\nGet decorator for use without parameters:\n\n.. code-block:: python\n\n    get_logs = logwrap.logwrap()  # set required parameters via arguments\n\n    type(get_logs) == LogWrap  # All logic is implemented in LogWrap class starting from version 2.2.0\n\n    @get_logs\n    def foo():\n        pass\n\nCall example (python 3.8):\n\n.. code-block:: python\n\n   import logwrap\n\n   @logwrap.logwrap\n   def example_function1(\n           arg0: str,\n           /,\n           arg1: str,\n           arg2: str='arg2',\n           *args,\n           kwarg1: str,\n           kwarg2: str='kwarg2',\n           **kwargs\n   ) -> tuple():\n       return (arg0, arg1, arg2, args, kwarg1, kwarg2, kwargs)\n\n   example_function1('arg0', 'arg1', kwarg1='kwarg1', kwarg3='kwarg3')\n\nThis code during execution will produce log records:\n\n::\n\n    Calling:\n    'example_function1'(\n        # POSITIONAL_ONLY:\n        'arg0'=u'''arg0''',  # type: <class 'str'>\n        # POSITIONAL_OR_KEYWORD:\n        'arg1'=u'''arg1''',  # type: <class 'str'>\n        'arg2'=u'''arg2''',  # type: <class 'str'>\n        # VAR_POSITIONAL:\n        'args'=(),\n        # KEYWORD_ONLY:\n        'kwarg1'=u'''kwarg1''',  # type: <class 'str'>\n        'kwarg2'=u'''kwarg2''',  # type: <class 'str'>\n        # VAR_KEYWORD:\n        'kwargs'=\n            dict({\n                'kwarg3': u'''kwarg3''',\n            }),\n    )\n    Done: 'example_function1' with result:\n\n     tuple((\n        u'''arg0''',\n        u'''arg1''',\n        u'''arg2''',\n        (),\n        u'''kwarg1''',\n        u'''kwarg2''',\n         dict({\n            'kwarg3': u'''kwarg3''',\n         }),\n     ))\n\nLogWrap\n-------\nExample construction and read from test:\n\n.. code-block:: python\n\n    log_call = logwrap.LogWrap()\n    log_call.log_level == logging.DEBUG\n    log_call.exc_level == logging.ERROR\n    log_call.max_indent == 20\n    log_call.blacklisted_names == []\n    log_call.blacklisted_exceptions == []\n    log_call.log_call_args == True\n    log_call.log_call_args_on_exc == True\n    log_call.log_traceback == True\n    log_call.log_result_obj == True\n\nOn object change, variable types is validated.\n\nIn special cases, when special processing required for parameters logging (hide or change parameters in log),\nit can be done by override `pre_process_param` and `post_process_param`.\n\nSee API documentation for details.\n\n\npretty_repr\n-----------\nThis is specified helper for making human-readable repr on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_repr(\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitation: Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\npretty_str\n----------\nThis is specified helper for making human-readable str on complex objects.\nSignature is self-documenting:\n\n.. code-block:: python\n\n    def pretty_str(\n        src,  # object for __str__\n        indent=0,  # start indent\n        no_indent_start=False,  # do not indent the first level\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nLimitations:\n    Dict like objects is always marked inside `{}` for readability, even if it is `collections.OrderedDict` (standard repr as list of tuples).\n\n    Iterable types is not declared, only brackets is used.\n\n    String and bytes looks the same (its __str__, not __repr__).\n\nPrettyFormat\n------------\nPrettyFormat is the main formatting implementation class.\n`pretty_repr` and `pretty_str` uses instances of subclasses `PrettyRepr` and `PrettyStr` from this class.\nThis class is mostly exposed for typing reasons.\nObject signature:\n\n.. code-block:: python\n\n    def __init__(\n        self,\n        max_indent=20,  # maximum allowed indent level\n        indent_step=4,  # step between indents\n    )\n\nCallable object (`PrettyFormat` instance) signature:\n\n.. code-block:: python\n\n    def __call__(\n        self,\n        src,  # object for repr\n        indent=0,  # start indent\n        no_indent_start=False  # do not indent the first level\n    )\n\nAdopting your code\n------------------\npretty_repr behavior could be overridden for your classes by implementing specific magic method:\n\n.. code-block:: python\n\n    def __pretty_repr__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __repr__ on your object.\n\n.. code-block:: python\n\n    def __pretty_str__(\n        self,\n        parser  # PrettyFormat class instance,\n        indent  # start indent,\n        no_indent_start  # do not indent the first level\n    ):\n        return ...\n\nThis method will be executed instead of __str__ on your object.\n\nLogOnAccess\n-----------\n\nThis special case of property is useful in cases, where a lot of properties should be logged by similar way without writing a lot of code.\n\nBasic API is conform with `property`, but in addition it is possible to customize logger, log levels and log conditions.\n\nUsage examples:\n\n1. Simple usage. All by default.\n   logger is re-used:\n\n    * from instance if available with names `logger` or `log`,\n    * from instance module if available with names `LOGGER`, `log`,\n    * else used internal `logwrap.log_on_access` logger.\n\n  .. code-block:: python\n\n    import logging\n\n    class Target(object):\n\n        def init(self, val='ok')\n            self.val = val\n            self.logger = logging.get_logger(self.__class__.__name__)  # Single for class, follow subclassing\n\n        def __repr__(self):\n            return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n        @logwrap.LogOnAccess\n        def ok(self):\n            return self.val\n\n        @ok.setter\n        def ok(self, val):\n            self.val = val\n\n        @ok.deleter\n        def ok(self):\n            self.val = \"\"\n\n2. Use with global logger for class:\n\n  .. code-block:: python\n\n    class Target(object):\n\n      def init(self, val='ok')\n          self.val = val\n\n      def __repr__(self):\n          return \"{cls}(val={self.val})\".format(cls=self.__class__.__name__, self=self)\n\n      @logwrap.LogOnAccess\n      def ok(self):\n          return self.val\n\n      @ok.setter\n      def ok(self, val):\n          self.val = val\n\n      @ok.deleter\n      def ok(self):\n          self.val = \"\"\n\n      ok.logger = 'test_logger'\n      ok.log_level = logging.INFO\n      ok.exc_level = logging.ERROR\n      ok.log_object_repr = True  # As by default\n      ok.log_before = True  # As by default\n      ok.log_success = True  # As by default\n      ok.log_failure = True  # As by default\n      ok.log_traceback = True  # As by default\n      ok.override_name = None  # As by default: use original name\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nAvailable environments can be collected via `tox -l`\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/python-useful-helpers/logwrap>`_ is used for coverage display.\n\n3. `Azure CI: <https://dev.azure.com/python-useful-helpers/logwrap/_build?definitionId=1>`_ is used for functional tests on Windows.\n\nCD systems\n==========\n1. `Travis CI: <https://travis-ci.com/python-useful-helpers/logwrap>`_ is used for linux and SDIST package delivery on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-useful-helpers/logwrap",
    "keywords": "logging,debugging,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "Alexey Stepanov <penguinolog@gmail.com>, Antonio Esposito <esposito.cloud@gmail.com>, Dennis Dmitriev <dis-xcom@gmail.com>",
    "maintainer_email": "",
    "name": "logwrap",
    "package_url": "https://pypi.org/project/logwrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/logwrap/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-useful-helpers/logwrap/issues",
      "Documentation": "https://logwrap.readthedocs.io/",
      "Homepage": "https://github.com/python-useful-helpers/logwrap"
    },
    "release_url": "https://pypi.org/project/logwrap/6.4.0/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "6.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14071082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e161ea034522b0206c2ff38010257700aa632e3b37e75a379c42dd7dd600c385",
        "md5": "271a452e011eae11422ec5026d52f3a8",
        "sha256": "19b2d00f094077a645949cc881252def6e933e4f2fdaaf2ac5c3a8f0ee4209bf"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "271a452e011eae11422ec5026d52f3a8",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1050824,
      "upload_time": "2019-11-22T09:35:55",
      "upload_time_iso_8601": "2019-11-22T09:35:55.225088Z",
      "url": "https://files.pythonhosted.org/packages/e1/61/ea034522b0206c2ff38010257700aa632e3b37e75a379c42dd7dd600c385/logwrap-6.4.0-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b061bef6d1f444467311016fa05739737177c7180112460c35b06734a367feb",
        "md5": "dbc784d6bcfca74882645262403f72ed",
        "sha256": "5b7bf3c0485041aa0e03b6184606757a4b83801e86248cdfa1a22ba1ec6cf7cf"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "dbc784d6bcfca74882645262403f72ed",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 1150372,
      "upload_time": "2019-11-22T09:35:57",
      "upload_time_iso_8601": "2019-11-22T09:35:57.940885Z",
      "url": "https://files.pythonhosted.org/packages/6b/06/1bef6d1f444467311016fa05739737177c7180112460c35b06734a367feb/logwrap-6.4.0-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08cc700d449d40292e7e0cb72700937c6e7e7dbeb50a9f734a03f026ee858b38",
        "md5": "03b06a57762a0ed55ee422821e233090",
        "sha256": "bc53336afac8362ca3f42ac6dc6879947b35f5a4bed91fe85a8658e31a3ff10a"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "03b06a57762a0ed55ee422821e233090",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 164028,
      "upload_time": "2019-11-22T09:28:51",
      "upload_time_iso_8601": "2019-11-22T09:28:51.009933Z",
      "url": "https://files.pythonhosted.org/packages/08/cc/700d449d40292e7e0cb72700937c6e7e7dbeb50a9f734a03f026ee858b38/logwrap-6.4.0-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f08292512dd75654bc26bc29ed321ea9eb6a14dbd103f09982e27c3a9e6615f",
        "md5": "a1f892ff07672d92456421cac12260ba",
        "sha256": "ea78793efe047e870ba7a3670ad8d61029c01360ffb3f46de9389cc48da1e3b4"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "a1f892ff07672d92456421cac12260ba",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6.0",
      "size": 189391,
      "upload_time": "2019-11-22T09:28:52",
      "upload_time_iso_8601": "2019-11-22T09:28:52.038969Z",
      "url": "https://files.pythonhosted.org/packages/9f/08/292512dd75654bc26bc29ed321ea9eb6a14dbd103f09982e27c3a9e6615f/logwrap-6.4.0-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f9882c4144785a0317a55cc91270bb24beaeba16aa5c603b32a87f13a26330e",
        "md5": "4ff5489b383d55086ffa4a10d72d6137",
        "sha256": "fe5ce48586a1deda659616cc41917f1f414962d1bf092c0801a762e8886b023b"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "4ff5489b383d55086ffa4a10d72d6137",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1041914,
      "upload_time": "2019-11-22T09:36:00",
      "upload_time_iso_8601": "2019-11-22T09:36:00.655212Z",
      "url": "https://files.pythonhosted.org/packages/2f/98/82c4144785a0317a55cc91270bb24beaeba16aa5c603b32a87f13a26330e/logwrap-6.4.0-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce2b9923f516c65b9bf5671f24955b4615f34a6cc7fb365745bf4688352fe03d",
        "md5": "e03d9c32daf2b8d3781fc00a2c6477c8",
        "sha256": "cbefae2924782b8f9d54ea4598a1802fb8c1b22b68f432fa6aa8fb975df50080"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "e03d9c32daf2b8d3781fc00a2c6477c8",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 1143929,
      "upload_time": "2019-11-22T09:36:03",
      "upload_time_iso_8601": "2019-11-22T09:36:03.024709Z",
      "url": "https://files.pythonhosted.org/packages/ce/2b/9923f516c65b9bf5671f24955b4615f34a6cc7fb365745bf4688352fe03d/logwrap-6.4.0-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1ad947cbdc946e592efa1142a778c15d19f693f66d52f584f31e72621212316",
        "md5": "a7d205002dae45d3fb2ffa14e5833898",
        "sha256": "2d1d9a8ccb976c1a57b887d6f95bbc42250ec3fa395c6649f35202b66ecba17b"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "a7d205002dae45d3fb2ffa14e5833898",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 163934,
      "upload_time": "2019-11-22T09:28:54",
      "upload_time_iso_8601": "2019-11-22T09:28:54.271222Z",
      "url": "https://files.pythonhosted.org/packages/f1/ad/947cbdc946e592efa1142a778c15d19f693f66d52f584f31e72621212316/logwrap-6.4.0-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "74653585722b1229b7989f762463cc16a330994770c9b17554e83a3b3aa8535a",
        "md5": "b7925c9df6a553f8f6190af8a158c3f2",
        "sha256": "b372c1656c3334541a6b1b965f9163ada6ecaf12101becc763c217030ee5cc63"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "b7925c9df6a553f8f6190af8a158c3f2",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6.0",
      "size": 189085,
      "upload_time": "2019-11-22T09:28:56",
      "upload_time_iso_8601": "2019-11-22T09:28:56.360416Z",
      "url": "https://files.pythonhosted.org/packages/74/65/3585722b1229b7989f762463cc16a330994770c9b17554e83a3b3aa8535a/logwrap-6.4.0-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1b405045909ad13628260c16c0bc308d8816b2898147c4efdc648a2512761c7",
        "md5": "1b0a2ac929176354d5854aef6257561b",
        "sha256": "f79ffebfb902450549cfb4d1a997939105e15036800490b60f5c399691a9d51e"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp38-cp38-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "1b0a2ac929176354d5854aef6257561b",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1158270,
      "upload_time": "2019-11-22T09:36:05",
      "upload_time_iso_8601": "2019-11-22T09:36:05.249675Z",
      "url": "https://files.pythonhosted.org/packages/b1/b4/05045909ad13628260c16c0bc308d8816b2898147c4efdc648a2512761c7/logwrap-6.4.0-cp38-cp38-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "001bf416a8e018163a906956316ddd75583c618c844bc4f6619181550a3a8a05",
        "md5": "966c419e155419b08b765fefcde09fa1",
        "sha256": "1beceb38706d715558bd9865a565f1de2c9cfc790a3427676a395f46c6f2a346"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "966c419e155419b08b765fefcde09fa1",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 1274671,
      "upload_time": "2019-11-22T09:36:07",
      "upload_time_iso_8601": "2019-11-22T09:36:07.766343Z",
      "url": "https://files.pythonhosted.org/packages/00/1b/f416a8e018163a906956316ddd75583c618c844bc4f6619181550a3a8a05/logwrap-6.4.0-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3c97135de5f50da23770568c5f35533750733e598c73e0c73eb679912d28a8a",
        "md5": "f8e760b1fe00fb675995781bea2bbd7e",
        "sha256": "a7e2e103ca6ee001232258ea6e262844cf37967b14a97e7500065d99284d7961"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp38-cp38m-win32.whl",
      "has_sig": false,
      "md5_digest": "f8e760b1fe00fb675995781bea2bbd7e",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 170405,
      "upload_time": "2019-11-22T09:29:19",
      "upload_time_iso_8601": "2019-11-22T09:29:19.135505Z",
      "url": "https://files.pythonhosted.org/packages/b3/c9/7135de5f50da23770568c5f35533750733e598c73e0c73eb679912d28a8a/logwrap-6.4.0-cp38-cp38m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02d679c71884fe89cf64452dcdee8f979d57a45216fb3b28d72e0c2fd4eaf7ba",
        "md5": "8238f3b104d10843c83757f378f5115f",
        "sha256": "e937b03cc669241c9e3ca5af8f8b858bd37cc1ea394c50148dbe4e81cb2b41a6"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-cp38-cp38m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "8238f3b104d10843c83757f378f5115f",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6.0",
      "size": 197338,
      "upload_time": "2019-11-22T09:29:09",
      "upload_time_iso_8601": "2019-11-22T09:29:09.876345Z",
      "url": "https://files.pythonhosted.org/packages/02/d6/79c71884fe89cf64452dcdee8f979d57a45216fb3b28d72e0c2fd4eaf7ba/logwrap-6.4.0-cp38-cp38m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e420112847a585574ebdd808a8e2c3b1af5fabbc5793b5de25d34f4549eef82a",
        "md5": "f72ac99c74ca93f93d6125e5f5e469b9",
        "sha256": "c8972e73864d902935ef09a8f1d7fd66bfc916c00bd45c09520a719c694778cd"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f72ac99c74ca93f93d6125e5f5e469b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 25468,
      "upload_time": "2019-11-22T09:36:10",
      "upload_time_iso_8601": "2019-11-22T09:36:10.531770Z",
      "url": "https://files.pythonhosted.org/packages/e4/20/112847a585574ebdd808a8e2c3b1af5fabbc5793b5de25d34f4549eef82a/logwrap-6.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab48cec31b12af3040a5a93fa4524b0a82c21baa22dc3ecbd1948ec29530915d",
        "md5": "db4a4d9179cf5c79725a1a48a4f9d435",
        "sha256": "892d207ac98c0e86cab385c69683ac61233af26156693401193f6ca2d370c62a"
      },
      "downloads": -1,
      "filename": "logwrap-6.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "db4a4d9179cf5c79725a1a48a4f9d435",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 42158,
      "upload_time": "2019-11-22T09:36:12",
      "upload_time_iso_8601": "2019-11-22T09:36:12.563148Z",
      "url": "https://files.pythonhosted.org/packages/ab/48/cec31b12af3040a5a93fa4524b0a82c21baa22dc3ecbd1948ec29530915d/logwrap-6.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}