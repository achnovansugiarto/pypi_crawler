{
  "info": {
    "author": "",
    "author_email": "Sorin Sbarnea <sorin.sbarnea@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "# Documentation of mk tool\n\n`mk` is a CLI tool that aims to ease contribution to any open-source project by\nhiding repository implementation details from the casual contributor. With it,\nyou can contribute without having to know all the build and testing tools that\nthe project team already uses, which often have strange requirements.\n\nIf you ever asked yourself one of the below questions, probably you would want\nto try `mk` and if it can help you\n\n- How do I run tests locally?\n- Which are the test suites I can run?\n- Is my change ready to be reviewed?\n- How can I propose a change for review?\n\nRun `mk` inside any cloned repository to display which options you have. No\nconfiguration file is needed as the tool will look for common tools used by the\nrepository and expose their commands.\n\n`mk` is inspired by the tools listed below, but it does not aim to replace them.\n\n- [make](https://www.gnu.org/software/make/)\n- [waf](https://gitlab.com/ita1024/waf)\n- [tox](https://github.com/tox-dev/tox/) and\n  [nox](https://nox.thea.codes/en/stable/)\n- [npm](https://www.npmjs.com/) and [yarn](https://yarnpkg.com/)\n- [pre-commit](https://pre-commit.com/)\n\n## Installation\n\nWe recommend using [`pipx`](https://pipxproject.github.io/pipx/) to install `mk`\nin order to avoid potential dependency conflicts. You can use `pip3 install mk`\nas well.\n\n```shell\npipx install mk\n```\n\n## Run it\n\n![](images/mk-social-preview.png)\n\n## How it works\n\n`mk` inspects the current core repository and detects build tools used by the\nproject, like pre-commit, tox, npm and exposes their commands to the user in a\n**predictable** way.\n\nFor example, you should be able to lint any code repository running only\n`mk lint`, regardless of author preference for picking one way to execute them\nor another.\n\nBe assured that `mk` does not make use of AI to guess what needs to run. As most\nprojects use relatively similar patterns, it is easy to identify the one to\nexecute.\n\nAt this moment, if two tools expose the same command name, the tool will add a\nnumber to its name. In the future, we may decide to either chain them under a\nsingle name or allow some tools to shadow others and avoid duplicates.\n\n## What are the main benefits\n\nOne of the benefits of `mk` is that it should reduce the amount of\nhow-to-contribute documentation the author needs to write.\n\nA considerable amount of maintainer effort can go into producing documentation\nthat makes it easier for someone to make a contribution to a project.\n\nSome projects are less affected than others. That is usually related to how well\ndo the potential contributors know the practices used by the project. Still, if\nyour project has a wide range of uses, you will quickly discover that newbie\ncontributors may hit a knowledge wall. Such a barrier will likely prevent most\nof them from becoming active contributors. The remaining ones will flood the\nproject with questions, distracting other maintainers from doing more advanced\ntasks.\n\nUnless you want to deter contributions, you should plan to make it as easy as\npossible for people to contribute. That is one area where `mk` aims to help.\n\n## Aliases\n\nSimilar to [git aliases](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases),\n`mk` allows typing as little as possible by automatically aliasing commands. For\nexample, you can run `mk lint` just by typing `mk l` as long there is no other\ncommand starting with the same letter. Aliases are available for one, two and\nthree letters prefixes.\n\n## Using mk to propose changes to projects\n\nInstead of writing long list of tasks to follow, we can use a tool that tells\nhim what to do next. For example, `mk` has a build-in command named `up(load)`\nthat aims to ease preparing a local change from being proposed to the project.\n\nThis command detects if it should use GitHub workflow or Gerrit and will run the\nappropriate commands for opening or updating a CR/PR. Users will be allowed to\nupload a change only after passing the minimal set of local tests, preventing\nnoisy mistakes or clog CI/CD pipelines.\n\nIn addition to linting, it will also check that the repository is not in dirty\nstatus or that the testing did not leave untracked files on disk.\n\n## Planned features\n\n- Persistent state of each command run - This means that it will know if a\n  specific command was run and if it failed or not. The state would be linked to\n  the repository state, so modifying a tracked file would reset the state to be\n  unknown. (#20)\n- Configuration file where additional actions can be added. (#21)\n- Dependencies between commands. While some tools support dependencies, many do\n  not. You should be able to declare that a specific command would run only\n  after another one already passed. (#22)\n- Ability to generate CI/CD pipelines so the user would spend less time writing\n  non-portable configuration. (#23)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "mk",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mk",
    "package_url": "https://pypi.org/project/mk/",
    "platform": null,
    "project_url": "https://pypi.org/project/mk/",
    "project_urls": {
      "changelog": "https://github.com/pycontribs/mk/releases",
      "homepage": "https://github.com/pycontribs/mk",
      "repository": "https://github.com/pycontribs/mk"
    },
    "release_url": "https://pypi.org/project/mk/2.2.0/",
    "requires_dist": [
      "GitPython",
      "diskcache (>=5.2.1)",
      "blessings",
      "build (>=0.3.1.post1)",
      "click (>=7.1.2)",
      "colorama",
      "importlib-metadata",
      "pip (>=21.0.1)",
      "pluggy",
      "pygments",
      "pyyaml",
      "rich (>=9.0)",
      "shellingham",
      "subprocess-tee (>=0.3.1)",
      "twine (>=3.4.1)",
      "typer",
      "cairosvg (>=2.6.0) ; extra == 'docs'",
      "markdown-exec (>=1.3.0) ; extra == 'docs'",
      "mkdocs-autorefs ; extra == 'docs'",
      "mkdocs-gen-files (>=0.4.0) ; extra == 'docs'",
      "mkdocs-htmlproofer-plugin (>=0.10.2) ; extra == 'docs'",
      "mkdocs-material-extensions (>=1.1.1) ; extra == 'docs'",
      "mkdocs-material (>=9.0.13) ; extra == 'docs'",
      "mkdocs (>=1.4.2) ; extra == 'docs'",
      "pillow (>=9.4.0) ; extra == 'docs'",
      "pipdeptree (>=2.4.0) ; extra == 'docs'",
      "pymdown-extensions (>=9.9.2) ; extra == 'docs'",
      "coverage ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-benchmark ; extra == 'test'",
      "pytest-plus ; extra == 'test'",
      "tox (>=4.0.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "mk",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17366833,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86415b87d7b98585cbf9cc685b22bb2b928e402652e36fad1f9c8c817cb62fdd",
        "md5": "defbd5161501e164cb7286b9f86eba98",
        "sha256": "9d7db5b862d7dd59dbdbb1cc7185f68a97eaef8b8a0368c50a7d8ee081bb3fbb"
      },
      "downloads": -1,
      "filename": "mk-2.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "defbd5161501e164cb7286b9f86eba98",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 18044,
      "upload_time": "2023-03-06T15:40:56",
      "upload_time_iso_8601": "2023-03-06T15:40:56.784904Z",
      "url": "https://files.pythonhosted.org/packages/86/41/5b87d7b98585cbf9cc685b22bb2b928e402652e36fad1f9c8c817cb62fdd/mk-2.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26cf40b1ed2f22b258a7733a0698db86cd8a529decc7a5af499d224d97ce308e",
        "md5": "3e331c858ef21cb0763b14a21993b9ca",
        "sha256": "f291318a8519e71519aab08212788a27c7e0741fd1e66c392f0be6eaacd70be8"
      },
      "downloads": -1,
      "filename": "mk-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3e331c858ef21cb0763b14a21993b9ca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 184925,
      "upload_time": "2023-03-06T15:40:58",
      "upload_time_iso_8601": "2023-03-06T15:40:58.431797Z",
      "url": "https://files.pythonhosted.org/packages/26/cf/40b1ed2f22b258a7733a0698db86cd8a529decc7a5af499d224d97ce308e/mk-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}