{
  "info": {
    "author": "Amit Dev",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Programming Language :: C",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. image:: https://travis-ci.com/amitdev/lru-dict.svg?branch=master\n    :target: https://travis-ci.com/amitdev/lru-dict\n\nLRU Dict\n========\n\nA fixed size dict like container which evicts Least Recently Used (LRU) items\nonce size limit is exceeded. There are many python implementations available\nwhich does similar things. This is a fast and efficient C implementation.\nLRU maximum capacity can be modified at run-time.\nIf you are looking for pure python version, look `else where <http://www.google.com/search?q=python+lru+dict>`_.\n\nUsage\n=====\n\nThis can be used to build a LRU cache. Usage is almost like a dict.\n\n.. code:: python\n\n  from lru import LRU\n  l = LRU(5)         # Create an LRU container that can hold 5 items\n\n  print l.peek_first_item(), l.peek_last_item()  #return the MRU key and LRU key\n  # Would print None None\n\n  for i in range(5):\n     l[i] = str(i)\n  print l.items()    # Prints items in MRU order\n  # Would print [(4, '4'), (3, '3'), (2, '2'), (1, '1'), (0, '0')]\n\n  print l.peek_first_item(), l.peek_last_item()  #return the MRU key and LRU key\n  # Would print (4, '4') (0, '0')\n\n  l[5] = '5'         # Inserting one more item should evict the old item\n  print l.items()\n  # Would print [(5, '5'), (4, '4'), (3, '3'), (2, '2'), (1, '1')]\n\n  l[3]               # Accessing an item would make it MRU\n  print l.items()\n  # Would print [(3, '3'), (5, '5'), (4, '4'), (2, '2'), (1, '1')]\n  # Now 3 is in front\n\n  l.keys()           # Can get keys alone in MRU order\n  # Would print [3, 5, 4, 2, 1]\n\n  del l[4]           # Delete an item\n  print l.items()\n  # Would print [(3, '3'), (5, '5'), (2, '2'), (1, '1')]\n\n  print l.get_size()\n  # Would print 5\n\n  l.set_size(3)\n  print l.items()\n  # Would print [(3, '3'), (5, '5'), (2, '2')]\n  print l.get_size()\n  # Would print 3\n  print l.has_key(5)\n  # Would print True\n  print 2 in l\n  # Would print True\n\n  l.get_stats()\n  # Would print (1, 0)\n\n\n  l.update(5='0')           # Update an item\n  print l.items()\n  # Would print [(5, '0'), (3, '3'), (2, '2')]\n\n  l.clear()\n  print l.items()\n  # Would print []\n\n  def evicted(key, value):\n    print \"removing: %s, %s\" % (key, value)\n\n  l = LRU(1, callback=evicted)\n\n  l[1] = '1'\n  l[2] = '2'\n  # callback would print removing: 1, 1\n\n  l[2] = '3'\n  # doesn't call the evicted callback\n\n  print l.items()\n  # would print [(2, '3')]\n  \n  del l[2]\n  # doesn't call the evicted callback\n\n  print l.items()\n  # would print []\n\nInstall\n=======\n\n::\n\n  pip install lru-dict\n\nor\n\n::\n\n  easy_install lru_dict\n\n\nWhen to use this\n================\n\nLike mentioned above there are many python implementations of an LRU. Use this\nif you need a faster and memory efficient alternative. It is implemented with a\ndict and associated linked list to keep track of LRU order. See code for a more\ndetailed explanation. To see an indicative comparison with a pure python module,\nconsider a `benchmark <https://gist.github.com/amitdev/5773979>`_ against\n`pylru <https://pypi.python.org/pypi/pylru/>`_ (just chosen at random, it should\nbe similar with other python implementations as well).\n\n::\n\n  $ python bench.py pylru.lrucache\n  Time : 3.31 s, Memory : 453672 Kb\n  $ python bench.py lru.LRU\n  Time : 0.23 s, Memory : 124328 Kb",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/amitdev/lru-dict",
    "keywords": "lru,dict",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lru-dict",
    "package_url": "https://pypi.org/project/lru-dict/",
    "platform": "",
    "project_url": "https://pypi.org/project/lru-dict/",
    "project_urls": {
      "Homepage": "https://github.com/amitdev/lru-dict"
    },
    "release_url": "https://pypi.org/project/lru-dict/1.1.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An Dict like LRU container.",
    "version": "1.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14382711,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68ea997af58d4e6da019ad825a412f93081d9df67e9dda11cfb026a3d7cd0b6c",
        "md5": "855db58f7c909a0524c182076a3acc6b",
        "sha256": "45b81f67d75341d4433abade799a47e9c42a9e22a118531dcb5e549864032d7c"
      },
      "downloads": -1,
      "filename": "lru-dict-1.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "855db58f7c909a0524c182076a3acc6b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10380,
      "upload_time": "2021-02-03T06:58:35",
      "upload_time_iso_8601": "2021-02-03T06:58:35.276979Z",
      "url": "https://files.pythonhosted.org/packages/68/ea/997af58d4e6da019ad825a412f93081d9df67e9dda11cfb026a3d7cd0b6c/lru-dict-1.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}