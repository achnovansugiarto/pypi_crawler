{
  "info": {
    "author": "Amit Dev",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Programming Language :: C",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "LRU Dict\n        ========\n        \n        A fixed size dict like container which evicts Least Recently Used (LRU) items\n        once size limit is exceeded. There are many python implementations available\n        which does similar things. This is a fast and efficient C implementation.\n        LRU maximum capacity can be modified at run-time.\n        If you are looking for pure python version, look `else where <http://www.google.com/search?q=python+lru+dict>`_.\n        \n        Usage\n        =====\n        \n        This can be used to build a LRU cache. Usage is almost like a dict.\n        \n        .. code:: python\n        \n          from lru import LRU\n          l = LRU(5)         # Create an LRU container that can hold 5 items\n          for i in range(5):\n             l[i] = str(i)\n          print l.items()    # Prints items in MRU order\n          # Would print [(4, '4'), (3, '3'), (2, '2'), (1, '1'), (0, '0')]\n        \n          l[5] = '5'         # Inserting one more item should evict the old item\n          print l.items()\n          # Would print [(5, '5'), (4, '4'), (3, '3'), (2, '2'), (1, '1')]\n        \n          l[3]               # Accessing an item would make it MRU\n          print l.items()\n          # Would print [(3, '3'), (5, '5'), (4, '4'), (2, '2'), (1, '1')]\n          # Now 3 is in front\n        \n          l.keys()           # Can get keys alone in MRU order\n          # Would print [3, 5, 4, 2, 1]\n        \n          del l[4]           # Delete an item\n          print l.items()\n          # Would print [(3, '3'), (5, '5'), (2, '2'), (1, '1')]\n        \n          print l.get_size()\n          #Would print 5\n          l.set_size(3)\n          print l.items()\n          # Would print [(3, '3'), (5, '5'), (2, '2')]\n          print l.get_size()\n          # Would print 3\n        \n          l.get_stats()\n          # Would print (1, 0)\n        \n          l.clear()\n          print l.items()\n          #Would print []\n        \n        Install\n        =======\n        \n        ::\n        \n          pip install lru-dict\n        \n        or\n        \n        ::\n        \n          easy_install lru_dict\n        \n        \n        When to use this\n        ================\n        \n        Like mentioned above there are many python implementations of an LRU. Use this\n        if you need a faster and memory efficient alternative. It is implemented with a\n        dict and associated linked list to keep track of LRU order. See code for a more\n        detailed explanation. To see an indicative comparison with a pure python module,\n        consider a `benchmark <https://gist.github.com/amitdev/5773979>`_ against\n        `pylru <https://pypi.python.org/pypi/pylru/>`_ (just chosen at random, it should\n        be similar with other python implementations as well).\n        \n        ::\n        \n          $ python bench.py pylru.lrucache\n          Time : 3.31 s, Memory : 453672 Kb\n          $ python bench.py lru.LRU\n          Time : 0.23 s, Memory : 124328 Kb",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/amitdev/lru-dict",
    "keywords": "lru,dict",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "lru-dict",
    "package_url": "https://pypi.org/project/lru-dict/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/lru-dict/",
    "project_urls": {
      "Homepage": "https://github.com/amitdev/lru-dict"
    },
    "release_url": "https://pypi.org/project/lru-dict/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "An Dict like LRU container.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14382711,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94d379fd241d04d3aac3e4445fc2bca3a935751c031fa53d866ed6c3f2245417",
        "md5": "993cc4463040b1330a1edcbf99118cbc",
        "sha256": "f2b8104cbf6beb2c65a4329c257544ba093a1fb31b66cfab671f6ae23ce34f80"
      },
      "downloads": -1,
      "filename": "lru-dict-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "993cc4463040b1330a1edcbf99118cbc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6781,
      "upload_time": "2014-10-14T15:26:15",
      "upload_time_iso_8601": "2014-10-14T15:26:15.845541Z",
      "url": "https://files.pythonhosted.org/packages/94/d3/79fd241d04d3aac3e4445fc2bca3a935751c031fa53d866ed6c3f2245417/lru-dict-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}