{
  "info": {
    "author": "Martin Brochhaus",
    "author_email": "mbrochh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django Facebook Login\n\n`django-facebook-login` provides an authentication backend and a GraphQL mutation\nthat takes a Facebook user-access-token and the user's email and then does one\nof the following:\n\n- Sign-up new user\n- Connect existing Django user with their Facebook account\n- Login existing, already connected Django user\n\nIn all cases, the user will be authenticated afterwards. This means, unlike\nmost other custom authentication backends, this backend will create a new\nuser if the given credentials (Facebook email + Facebook user access token)\nare not known, yet.\n\nMake sure you read the `Noteworthy Things` below before you decide to use this\nlibrary.\n\n# Quick start\n\n1.  Add \"facebook-login\" to your INSTALLED_APPS setting like this:\n\n    ```py\n    INSTALLED_APPS = [\n        ...\n        'facebook-login',\n    ]\n    ```\n\n1.  Add the `FacebookAuthBackend` to your `AUTHENTICATION_BACKENDS` setting:\n\n    ```py\n    AUTHENTICATION_BACKENDS = (\n        ...,\n        \"facebook_login.auth_backends.FacebookAuthBackend\",\n    )\n    ```\n\n1.  Hook up the mutation in your GraphQL schema:\n\n    ```py\n    # in your main `schema.py`:\n    import graphene\n    from facebook_login import schema as fb_login\n\n    class Mutation(\n        ...\n        fb_login.Mutation,\n        graphene.ObjectType,\n    ):\n        pass\n\n    class Queries(...):\n        pass\n\n    schema = graphene.Schema(query=Queries, mutation=Mutation)\n    ```\n\n1.  Run `python manage.py migrate` to create the `FacebookAccount` table.\n\n1.  Configure the app in your `local_settings.py`:\n\n    ```\n    # Get these values from https://developers.facebook.com/apps/\n    FB_LOGIN_APP_ID = 'YOUR APP ID'\n    FB_LOGIN_APP_SECRET = 'YOUR APP SECRET'\n    ```\n\n# Noteworthy things\n\n## This library does not include frontend code\n\nYou still need extra code on your frontend that retrieves the user\naccess token from Facebook. Usually you would hook up the official Facebook\nlogin button that triggers the official Facebook login popup and then write\nsome code that sends the token that was returned by Facebook to our mutation.\n\n## This library forces the user to grant access to their Facebook email\n\nDuring the official Facebook login popup, the user can decide to revoke access\nto the email address. Other libraries, like django-allauth will have some extra\nviews where the user is then asked to enter an email anyways, after the Facebook\nlogin. We do not care about this. Instead, we will ask the user to press the\nlogin button again and this time please grant access to the email address.\n\n## This library does not return a JWT token or anything like it\n\nPlease note that we don't use JWT in our projects. We use Django's default\nsession based authentication. Therefore, our mutation does not return anything.\n\nOur mutation does call Django's `login()` function, which will save the new\nlogin-state into the user's session. When the mutation returns, it will instruct\nthe browser to save the new session key in the cookie. Our frontend will then\ntrigger a `window.location = /new/url/`, since this is a new request (including\nthe new session key), the server-rendered response will realize that this is a\nnow logged-in user.\n\nIf you would like to disable this behavior, you may provide a custom function\nfor the `FB_LOGIN_SUCCESS_HANDLER` setting (see below).\n\n# Configuration\n\nThis app uses the following settings:\n\n## FB_LOGIN_APP_ID (mandatory)\n\nThis should be your Facebook app-id.\n\n## FB_LOGIN_APP_SECRET (mandatory)\n\nThis should be your Facebook app secret.\n\n## FB_LOGIN_GRAPH_VERSION (optional)\n\n**Default**: `'v5.0'`\n\nYou can set this to a higher version in order to stay compliant with the\nFacebook guidelines. Of course, just bumping the version number does not\nguarantee that this app will still work, but the APIs that we use here have\nbeen pretty stable for years, so it might just work.\n\n## FB_LOGIN_SUCCESS_HANDLER (optional)\n\n**Default**: `facebook_login.utils.success_handler_default`\n\nSet this to your own function in case you need to do additional things\nwhen a user logs in. You can find our original implementation in `utils.success_handler_default()`.\n\nYour custom function may return a string and that string would be passed on\nto the frontend by the mutation as the `extra` key. You will most likely want\nto return something like this: `json.dumps({'token': 'ABC123...'})`.\nIf you do return something (i.e. a JWT token), then the mutation will return\nit to the frontend as the `extra` key.\n\n## FB_LOGIN_ERROR_HANDLER (optional)\n\n**Default**: `facebook_login.utils.error_handler_default`\n\nSet this to your own function, for example if you would like to log certain\nexceptions to Sentry or alert you in other ways when Facebook login attempts\nare crashing. By default, only the user will see error messages on the frontend\nbut you will likely not notice that something is wrong.\n\nYour implementation should look something like this:\n\n```\nfrom facebook_login import exceptions\n\ndef error_handler_custom(facebook_auth_mutation, request, exception):\n    message = ''\n    if isinstance(exception, exceptions.UserEmailException):\n        message = str(exception)\n    else:\n        message = ('Failed to login with Facebook. Our engineers have been'\n                   ' notified. Please try again, later.')\n\n    # log exception to Sentry\n\n    return facebook_auth_mutation(\n        status=400,\n        form_errors=json.dumps({\n            'facebook': [message]\n        }),\n        extra=None,\n    )\n```\n\nAs you can see, this way you can customize the error messages that are shown\nto the user and you can use any logging service that you like.\n\n## FB_LOGIN_API_BASE_URL (optional)\n\n**Default**: `'https://graph.facebook.com/v3.1'`\n\nAllows to override the base API URL, just in case. Of course, we are not sure,\nif a future API would be backwards compatible, so just changing this to a higher\nAPI version number might cause issues with this library.\n\n# Troubleshooting\n\n## KeyError: 'password'\n\nIf this happens, chances are that you are using `django-allauth`. Their\nauthentication backend crashes when Django's `authenticate()` function is\ncalled without a `username` and `password` keyword-argument. As a workaround,\nyou can just make sure that `facebook_login.auth_backends.FacebookAuthBackend`\nappears before other authentication backends.\n\n# Contributing\n\n- Clone this repo\n- `mkvirtualenv --python=python3.6 django-facebook-login`\n- `pip install -r requirements.txt`\n- `pip install -r test_requirements.txt`\n- `fab test`\n- `open htmlcov/index.html`\n- `./manage.py migrate` # This creates a sqlite3 DB\n- `./manage.py createsuperuser`\n- `./manage.py runserver`\n\nUnfortunately, running the local devserver only gives you access to the Django\nadmin. There is no demo-frontend code that would actually call this library's\nbackend code, yet.\n\n# Acknowledgements\n\nThis library was built with love at [The Artling](https://theartling.com)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/theartling/django-facebook-login/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-facebook-login",
    "package_url": "https://pypi.org/project/django-facebook-login/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-facebook-login/",
    "project_urls": {
      "Homepage": "https://github.com/theartling/django-facebook-login/"
    },
    "release_url": "https://pypi.org/project/django-facebook-login/4.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A GraphQL endpoint and authentication backend to signup or login a valid user access token from Facebook",
    "version": "4.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16302633,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63612234050aeba2162cc7e7b3722f97183b8a8b6b4248dff8364e4a678a8a18",
        "md5": "6f2bc2886cb3f90a0247d43b8ae9cd7c",
        "sha256": "682a46ae647a7f39a8d75ef77b1a7149e3e6a935f8168d2525dd875eb6478040"
      },
      "downloads": -1,
      "filename": "django-facebook-login-4.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6f2bc2886cb3f90a0247d43b8ae9cd7c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15872,
      "upload_time": "2021-05-28T06:55:52",
      "upload_time_iso_8601": "2021-05-28T06:55:52.026785Z",
      "url": "https://files.pythonhosted.org/packages/63/61/2234050aeba2162cc7e7b3722f97183b8a8b6b4248dff8364e4a678a8a18/django-facebook-login-4.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}