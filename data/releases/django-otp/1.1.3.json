{
  "info": {
    "author": "Peter Sagerson",
    "author_email": "psagers@ignorare.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Security",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-otp\n==========\n\n.. image:: https://img.shields.io/pypi/v/django-otp?color=blue\n   :target: https://pypi.org/project/django-otp/\n   :alt: PyPI\n.. image:: https://img.shields.io/readthedocs/django-otp-official\n   :target: https://django-otp-official.readthedocs.io/\n   :alt: Documentation\n.. image:: https://img.shields.io/badge/github-django--otp-green\n   :target: https://github.com/django-otp/django-otp\n   :alt: Source\n\nThis project makes it easy to add support for `one-time passwords\n<http://en.wikipedia.org/wiki/One-time_password>`_ (OTPs) to Django. It can be\nintegrated at various levels, depending on how much customization is required.\nIt integrates with ``django.contrib.auth``, although it is not a Django\nauthentication backend. The primary target is developers wishing to incorporate\nOTPs into their Django projects as a form of `two-factor authentication\n<http://en.wikipedia.org/wiki/Two-factor_authentication>`_.\n\nSeveral simple OTP plugins are included and more are available separately. This\npackage also includes an implementation of OATH `HOTP\n<http://tools.ietf.org/html/rfc4226>`_ and `TOTP\n<http://tools.ietf.org/html/rfc6238>`_ for convenience, as these are standard\nOTP algorithms used by multiple plugins.\n\nIf you're looking for a higher-level or more opinionated solution, you might be\ninterested in `django-two-factor-auth\n<https://github.com/Bouke/django-two-factor-auth>`_.\n\nStatus\n------\n\nThis project is stable and maintained, but is no longer actively used by the\nauthor and is not seeing much ongoing investment. Anyone interested in taking\nover aspects of the project should `contact me <https://github.com/psagers>`_.\n\nWell-formed issues and pull requests are welcome, but please see the\nContributing section of the README first.\n\n.. end-of-doc-intro\n\n\nThe Future\n----------\n\nOnce upon a time, everything was usernames and passwords. Or even in the case of\nother authentication mechanisms, a user was either authenticated or not\n(anonymous in Django's terminology). Then there was two-factor authentication,\nwhich could simply be an implementation detail in a binary authentication state,\nbut could also imply levels or degrees of authentication.\n\nThese days, it's increasingly common to see sites with more nuanced\nauthentication state. A site might remember who you are forever—so you're not\nanonymous—but if you try to do anything private, you have to re-authenticate.\nYou may be able to choose from among all of the authentication mechanisms you\nhave configured, or only from some of them. Specific mechanisms may be required\nfor specific actions, such as using your U2F device to access your U2F settings.\n\nIn short, the world seems to be moving beyond the assumptions that originally\ninformed Django's essential authentication design. If I were still investing in\nDjango generally, I would probably start a new multi-factor authentication\nproject that would reflect these changes. It would incorporate the idea that a\nuser may be authenticated by various combinations of mechanisms at any time and\nthat different combinations may be required to satisfy diverse authorization\nrequirements across the site. It would most likely try to disentangle\nauthentication persistence from sessions, at least to some extent. Many sites\nwould not require all of this flexibility, but it would open up possibilities\nfor better experiences by not asking users for more than we require at any\npoint.\n\nIf anyone has a mind to take on a project like this, I'd be happy to offer\nwhatever advice or lessons learned that I can.\n\n\nDevelopment\n-----------\n\nDevelopment dependencies are defined in the Pipfile; use `pipenv`_ to set up a\nsuitable shell.\n\nThe tests in tox.ini cover a representative sample of supported Python and\nDjango versions, as well as running `flake8`_ and `isort`_ for linting and style\nconsistency. Please run `tox` before checking in and sending a pull request.\n\n\nContributing\n------------\n\nAs mentioned above, this project is stable and mature. Issues and pull requests\nare welcome for important bugs and improvements. For non-trivial changes, it's\noften a good idea to start by opening an issue to track the need for a change\nand then optionally open a pull request with a proposed resolution. Issues and\npull requests should also be focused on a single thing. Pull requests that\nbundle together a bunch of loosely related commits are unlikely to go anywhere.\n\nAnother good rule of thumb—for any project, but especially a mature one—is to\nkeep changes as simple as possible. In particular, there should be a high bar\nfor adding new dependencies. Although it can't be ruled out, it seems highly\nunlikely that a new runtime dependency will ever be added. New testing\ndependencies are more likely, but only if there's no other way to address an\nimportant need.\n\nIf there's a development tool that you'd like to use with this project, the\nfirst step is to try to update config files (setup.cfg or similar) to integrate\nthe tool with the existing code. A bit of configuration glue for popular tools\nshould always be safe. If that's not possible, we can consider modifying the\ncode to be compatible with a broader range of tools (without breaking any\nexisting compatibilities). Only as a last resort would a new testing or\ndevelopment tool be incorporated into the project as a dependency.\n\nIt's also good to remember that writing the code is typically the least part of\nthe work. This is true for software development in general, but especially a\nsmall stable project like this. The bulk of the work is in `understanding the\nproblem <http://www.youtube.com/watch?v=f84n5oFoZBc>`_, determining the desired\nattributes of a solution, researching and evaluating alternatives, writing\ndocumentation, designing a testing strategy, etc. Writing the code itself tends\nto be a minor matter that emerges from that process.\n\n\n.. _pipenv: https://pipenv.readthedocs.io/en/latest/\n.. _flake8: https://pypi.org/project/flake8/\n.. _isort: https://pypi.org/project/isort/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/django-otp/django-otp",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-otp",
    "package_url": "https://pypi.org/project/django-otp/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-otp/",
    "project_urls": {
      "Documentation": "https://django-otp-official.readthedocs.io/",
      "Homepage": "https://github.com/django-otp/django-otp",
      "Source": "https://github.com/django-otp/django-otp"
    },
    "release_url": "https://pypi.org/project/django-otp/1.1.3/",
    "requires_dist": [
      "django (>=2.2)",
      "qrcode ; extra == 'qrcode'"
    ],
    "requires_python": "",
    "summary": "A pluggable framework for adding two-factor authentication to Django using one-time passwords.",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17192003,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87a2d0a4587be38d9c5a2981b45ba6386f5b05fa6309a5fe93f8917dc15b1b85",
        "md5": "339ed8fd0a916689dcb6b3855fa61e96",
        "sha256": "8637be826c0465d0fd1710e4472efe9fc83883853a2141fefdbace9358d20003"
      },
      "downloads": -1,
      "filename": "django_otp-1.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "339ed8fd0a916689dcb6b3855fa61e96",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 61438,
      "upload_time": "2021-11-30T18:11:30",
      "upload_time_iso_8601": "2021-11-30T18:11:30.252091Z",
      "url": "https://files.pythonhosted.org/packages/87/a2/d0a4587be38d9c5a2981b45ba6386f5b05fa6309a5fe93f8917dc15b1b85/django_otp-1.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b716774bcfca894416f9f34867b75e60f7282830db140b109916061f77a9c611",
        "md5": "5867b574be787518d9dba164bdcf43d8",
        "sha256": "f002c71d4ea7f514590be00492980d3c87397b73dc20542e1c4fc00b66f2dda1"
      },
      "downloads": -1,
      "filename": "django-otp-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "5867b574be787518d9dba164bdcf43d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 61330,
      "upload_time": "2021-11-30T18:11:31",
      "upload_time_iso_8601": "2021-11-30T18:11:31.727861Z",
      "url": "https://files.pythonhosted.org/packages/b7/16/774bcfca894416f9f34867b75e60f7282830db140b109916061f77a9c611/django-otp-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}