{
  "info": {
    "author": "Chris Laws",
    "author_email": "clawsicus@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: System :: Monitoring"
    ],
    "description": "# dump1090 Exporter\n\n[Dump1090](https://github.com/mutability/dump1090) is a simple Mode S decoder\nfor RTLSDR devices that is commonly used for tracking aircraft. Dump1090 makes\na number of operating metrics available to track the performance of the tool\nand its environment.\n\nThe dump1090exporter collects statistics from dump1090 and exposes it to the\n[Prometheus](https://prometheus.io/) monitoring server for aggregation and\nlater visualisation (e.g. using [Grafana](https://grafana.net/dashboards/768>)).\n\nThis exporter has been reported to work with:\n\n  - the dump1090 mutability fork\n  - the dump1090-fa fork\n  - [readsb](https://github.com/wiedehopf/readsb)\n\n## Install\n\nThe dump1090 exporter is implemented as a Python3.6+ package that can be\ninstalled using the Python package manager *pip*. It is recommended to install\nthis package into a virtual environment.\n\n```shell\n$ pip install dump1090exporter\n```\n\nThe package can optionally make use of the *uvloop* package which provides a\nmore efficient implementation of the asyncio event loop.\n\n```shell\n$ pip install dump1090exporter[uvloop]\n```\n\nThe dump1090exporter has also been packaged into a Docker container. See the\n[Docker](#docker) section below for more details about that.\n\n## Run\n\nThe dump1090 exporter can be run from the command line using the console entry\npoint script configured as part of the installation.\n\nThe dump1090 exporter accepts a number of command line arguments which can be\ndisplayed using the standard command line help request.\n\n```shell\n$ dump1090exporter -h\n```\n\nAn example usage is shown below.\n\n```shell\n$ dump1090exporter \\\n  --resource-path=http://192.168.1.201:8080/data \\\n  --port=9105 \\\n  --latitude=-34.9285 \\\n  --longitude=138.6007 \\\n  --log-level info\n```\n\nThe ``--resource-path`` argument defines the common base path to the various\ndump1090 resources used by the exporter. The resource path can be a URL or a\nfile system location.\n\nIn the example command the exporter is instructed to monitor a dump1090\ninstance running on a machine with the IP address 192.168.1.201 using the port\n8080.\n\nThe dump1090exporter can also monitor dump1090 state via the file system if\nyou run it on the same machine as the dump1090 process. In this scenario you\nwould pass a file system path to the ``--resource-path`` command line argument.\n\nFor example:\n\n```shell\n$ dump1090exporter \\\n  --resource-path=/path/to/dump1090-base-dir/data \\\n  ...\n```\n\nA more concrete example for dump1090-fa would be:\n\n```shell\n$ dump1090exporter \\\n  --resource-path=/run/dump1090-fa/ \\\n  ...\n```\n\nThe exporter uses the ``resources-path`` value to construct the following\nresources:\n\n  - {resource-path}/receiver.json\n  - {resource-path}/aircraft.json\n  - {resource-path}/stats.json\n\nReceiver data is read from ``{resource-path}/receiver.json`` every 10 seconds\nuntil a location can be obtained. Once a location has been read from the\nresource then it is only polled every 300 seconds. However, in most cases the\ndump1090 tool is not configured with the receivers position.\n\nAircraft data is read from ``{resource-path}/aircraft.json`` every 10 seconds.\nThis can be modified by specifying a new value with the ``--aircraft-interval``\nargument.\n\nStatistics data is read from ``{resource-path}/stats.json`` every 60 seconds,\nas the primary metrics being exported are extracted from the *last1min* time\nperiod. This too can be modified by specifying an alternative value with the\n``--stats-interval`` argument.\n\nThe example command uses the ``--port`` argument to instruct the exporter to\nexposes a metrics service on port 9105. This is where Prometheus would scrape\nthe metrics from. By default the port is configured to use 9105 so it only\nneeds to be specified if you want to change the port to a different value.\n\nThe example command uses the ``--latitude`` and ``--longitude`` arguments\nto instruct the exporter to use a specific receiver origin (lat, lon). By\nproviding the exporter with the receiver's location it can calculate ranges\nto aircraft. Note that if the receiver position is set within the dump1090\ntool (and accessible from the ``{resource-path}/receivers.json`` resource)\nthen the exporter will use that data as the origin.\n\nThe metrics that the dump1090 exporter provides to Prometheus can be\naccessed for debug and viewing using curl or a browser by fetching from\nthe metrics route url. For example:\n\n```shell\n$ curl -s http://0.0.0.0:9105/metrics | grep -v \"#\"\ndump1090_aircraft_recent_max_range{time_period=\"latest\"} 1959.0337385807418\ndump1090_messages_total{time_period=\"latest\"} 90741\ndump1090_recent_aircraft_observed{time_period=\"latest\"} 4\ndump1090_recent_aircraft_with_multilateration{time_period=\"latest\"} 0\ndump1090_recent_aircraft_with_position{time_period=\"latest\"} 1\ndump1090_stats_cpr_airborne{time_period=\"last1min\"} 176\ndump1090_stats_cpr_airborne{time_period=\"total\"} 18293\n...\n```\n\nThe metrics exposed by the dump1090-exporter are all prefixed with the\n*dump1090_* string so as to provide a helpful namespacing which makes them\neasier to find in visualisation tools such as Grafana.\n\nThe exporter exposes generalised metrics for statistics and uses the multi\ndimensional label capability of Prometheus metrics to include information\nabout which group the metric is part of.\n\nTo extract information for the peak signal metric that dump1090 aggregated\nover the last 1 minute you would specify the ``time_period`` for that group:\n\n```shell\ndump1090_stats_local_peak_signal{job=\"dump1090\", time_period=\"last1min\"}\n```\n\nIn the ``stats.json`` data there are 5 top level keys that contain statistics\nfor a different time period, defined by the \"start\" and \"end\" subkeys. The top\nlevel keys are:\n\n- *latest* which covers the time between the end of the \"last1min\" period and\n  the current time. In my dump1090 setup this is always empty.\n- *last1min* which covers a recent 1-minute period. This may be up to 1 minute\n  out of date (i.e. \"end\" may be up to 1 minute old)\n- *last5min* which covers a recent 5-minute period. As above, this may be up\n  to 1 minute out of date.\n- *last15min* which covers a recent 15-minute period. As above, this may be up\n  to 1 minute out of date.\n- *total* which covers the entire period from when dump1090 was started up to\n  the current time.\n\nBy default only the *last1min* time period is exported as Prometheus can be\nused for accessing historical data.\n\n\n## Prometheus Configuration\n\nPrometheus needs to be told where to fetch the dump1090 metrics from. The\nPrometheus configuration file should be updated with a new entry under the\n'scrape_configs' block, that looks something like this:\n\n```yaml\nscrape_configs:\n  - job_name: 'dump1090'\n    scrape_interval: 10s\n    scrape_timeout: 5s\n    static_configs:\n      - targets: ['192.168.1.201:9105']\n```\n\n## Visualisation\n\nThe Granfana visualisation tool can display nice looking charts and it\nsupports Prometheus. A [dump1090export](https://grafana.net/dashboards/768)\nGrafana dashboard has been created to demonstrate how the data provided by the\nexporter can be visualised.\n\n![](https://raw.githubusercontent.com/claws/dump1090-exporter/master/screenshot-grafana.png)\n\n## Docker\n\nThe dump1090 exporter has been packaged into a Docker container on DockerHub.\nThis can simplify running it in some environments. The container is configured\nwith an entry point that runs the dump1090 exporter application. The default\ncommand argument is ``--help`` which will display help information.\n\n```shell\n$ docker run -it --rm clawsicus/dump1090exporter\nusage: dump1090exporter [-h] [--resource-path <dump1090 url>]\n...\n```\n\nTo run the dump1090 exporter container in your environment simply pass your\nown custom command line arguments to it:\n\n```shell\n$ docker run -p 9105:9105 \\\n  --detach \\\n  clawsicus/dump1090exporter \\\n  --resource-path=http://192.168.1.201:8080/data \\\n  --latitude=-34.9285 \\\n  --longitude=138.6007\n```\n\nYou can then check the metrics being exposed to Prometheus by fetching them\nusing curl.\n\n```shell\n$ curl http://127.0.0.1:9105/metrics\n```\n\nNext you would configure a Prometheus server to scape the dump1090exporter\ncontainer on port 9105.\n\n\n## Demonstration\n\nA demonstration environment can be found in the ``demo`` directory. It uses\nDocker Compose to orchestrate containers running dump1090exporter, Prometheus\nand Grafana to facilitate experimentation with metric collection and graphing.\n\nThis provides a really quick and easy method for checking out the\ndump1090exporter.\n\n\n## Developer Notes\n\n### Python Release Process\n\nThe following steps are used to make a new software release:\n\n- Ensure current branch is set to master and is up to date.\n\n- Create a virtual environment, install dependencies and the dump1090exporter.\n\n  ```shell\n  $ make venv\n  $ source venv/bin/activate\n  (d1090exp) $\n  ```\n\n- Ensure all checks are passing.\n\n  ```shell\n  (d1090exp) $ make checks\n  ```\n\n- Ensure that the version label in ``__init__.py`` has been updated.\n\n- Create the distribution. This project produces an artefact called a pure\n  Python wheel. Only Python3 is supported by this package.\n\n  ```shell\n  (d1090exp) $ make dist\n  ```\n\n- Upload the new release to PyPI.\n\n  ```shell\n  (d1090exp) $ make dist-upload\n  ```\n\n- Create and push a repo tag to Github.\n\n  ```shell\n  $ git tag YY.MM.MICRO -m \"A meaningful release tag comment\"\n  $ git tag  # check release tag is in list\n  $ git push --tags origin master\n  ```\n\n  - Github will create a release tarball at:\n\n    https://github.com/{username}/{repo}/tarball/{tag}.tar.gz\n\n\n### Docker Release Process\n\nThe following steps are used to make a new software release:\n\n- Generate the dump1090exporter Python package distribution.\n\n  ```shell\n  (d1090exp) $ make dist\n  ```\n\n- Log in to the Docker user account which will hold the public image.\n\n  ```shell\n  (d1090exp) $ docker login\n  username\n  password\n  ```\n\n- Build the dump1090exporter Docker container.\n\n  ```shell\n  (d1090exp) $ docker build -t clawsicus/dump1090exporter .\n  ```\n\n- Perform a simple test of the container by specifying its full namespace to\n  run that container image.\n\n  ```shell\n  $ docker run -it --rm clawsicus/dump1090exporter\n  usage: dump1090exporter [-h] [--resource-path <dump1090 url>]\n  ...\n  ```\n\n- Test the container by configuring it to connect to a dump1090 service.\n\n  ```shell\n  $ docker run -p 9105:9105 \\\n    --detach \\\n    clawsicus/dump1090exporter \\\n    --resource-path=http://192.168.1.201:8080/data \\\n    --latitude=-34.9285 \\\n    --longitude=138.6007\n  ```\n\n  Confirm that metrics are being collected and exposed by checking metrics\n  are being exposed to Prometheus by fetching them using curl.\n\n  ```shell\n  $ curl http://127.0.0.1:9105/metrics\n  ```\n\n- Publish the new container to DockerHub using:\n\n  ```shell\n  (d1090exp) $ docker push clawsicus/dump1090exporter:<version>\n  ```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/claws/dump1090-exporter",
    "keywords": "prometheus,monitoring,metrics,dump1090,ADSB",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dump1090exporter",
    "package_url": "https://pypi.org/project/dump1090exporter/",
    "platform": null,
    "project_url": "https://pypi.org/project/dump1090exporter/",
    "project_urls": {
      "Homepage": "https://github.com/claws/dump1090-exporter"
    },
    "release_url": "https://pypi.org/project/dump1090exporter/22.3.0/",
    "requires_dist": [
      "aiohttp (==3.8.1)",
      "aioprometheus[aiohttp] (==22.3.0)",
      "asynctest (==0.13.0) ; extra == 'develop'",
      "black (==21.9b0) ; extra == 'develop'",
      "coverage (==6.0) ; extra == 'develop'",
      "isort (==5.9.3) ; extra == 'develop'",
      "mypy (==0.910) ; extra == 'develop'",
      "pylint (==2.11.1) ; extra == 'develop'",
      "wheel (==0.37.0) ; extra == 'develop'",
      "uvloop (==0.16.0) ; extra == 'uvloop'"
    ],
    "requires_python": "",
    "summary": "A Prometheus metrics exporter for the dump1090 Mode S decoder for RTLSDR",
    "version": "22.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13167545,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d74de01df4d6cb9119621da315b4e9e7888730605e338a22551a5f90c7a0b33",
        "md5": "433f85aaec1df4898bb5eb35397bb85d",
        "sha256": "5946750948289c747a7beb14bb317529bfb0c5dd418d06d2897693a000b4462c"
      },
      "downloads": -1,
      "filename": "dump1090exporter-22.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "433f85aaec1df4898bb5eb35397bb85d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15260,
      "upload_time": "2022-03-14T08:44:22",
      "upload_time_iso_8601": "2022-03-14T08:44:22.071089Z",
      "url": "https://files.pythonhosted.org/packages/2d/74/de01df4d6cb9119621da315b4e9e7888730605e338a22551a5f90c7a0b33/dump1090exporter-22.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}