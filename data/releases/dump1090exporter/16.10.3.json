{
  "info": {
    "author": "Chris Laws",
    "author_email": "clawsicus@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Topic :: System :: Monitoring"
    ],
    "description": "dump1090 Exporter\n=================\n\n`Dump1090 <https://github.com/MalcolmRobb/dump1090>`_ is a simple Mode S decoder\nfor RTLSDR devices that is commonly used for tracking aircraft. Dump1090 makes\na number of operating metrics available to track the performance of the tool\nand its environment.\n\nThe dump1090exporter collects statistics from dump1090 and exposes it to the\n`Prometheus <https://prometheus.io/>`_ monitoring server for aggregation and\nlater visualisation (e.g. using `Grafana <https://grafana.net/dashboards/768>`_).\n\n\nInstall\n-------\n\nThe dump1090 exporter is written using Python 3 and will not work with\nPython 2. The dump1090 exporter is installed using the Python package manager\n*pip*. The *pip3* alias typically links to the Python3 package manager so\nthe install would look like this:\n\n.. code-block:: console\n\n    pip3 install dump1090exporter\n\nIf you are installing this package within a Python3 virtual environment then\nuse:\n\n.. code-block:: console\n\n    pip install dump1090exporter\n\nThe dump1090exporter is also available as a Docker container. See the *Docker*\nsection below for more details.\n\n\nRun\n---\n\nOnce installed the dump1090 exporter can be easily run from the command\nline as the installation script includes a console entry point.\n\nThe dump1090 exporter accepts a number of command line arguments. These\ncan be found by using the standard command line help request.\n\n.. code-block:: console\n\n    $ dump1090exporter -h\n\nBelow is an example usage.\n\n.. code-block:: console\n\n    $ dump1090exporter \\\n      --url=http://192.168.1.201:8080 \\\n      --port=9105 \\\n      --latitude=-34.9285 \\\n      --longitude=138.6007 \\\n      --debug\n\nIn the example above the exporter is instructed to monitor a dump1090\ninstance running on a machine with the IP address 192.168.1.201 using\nthe default port (8080) used by dump1090 tool. The exporter exposes a\nservice for Prometheus to scrape on port 9105 by default but this can\nbe changed by specifying it with the *--port* argument.\n\nThe example above also instructs the exporter to use a specific receiver\norigin (lat, lon). In this case it is for Adelaide, Australia. In most\ncases the dump1090 tool is not configured with the receivers position.\nBy providing the exporter with the receiver location it can calculate\nranges to aircraft. If the receiver position is already set within the\ndump1090 tool (and accessible from the *data/receivers.json* resource)\nthen the exporter will use that data as the origin.\n\nThe exporter fetches aircraft data (from *data/aircraft.json*) every 10\nseconds. This can be modified by specifying a new value with the\n*--aircraft-interval* argument.\n\nThe exporter fetches statistics data (from *data/stats.json*) every 60\nseconds, as the primary metrics being exported are extracted from the\n*last1min* time period. This too can be modified by specifying a new\nvalue with the *--stats-interval* argument.\n\nThe metrics that the dump1090 exporter provides to Prometheus can be\naccessed for debug and viewing using curl or a browser by fetching from\nthe metrics route url. For example:\n\n.. code-block:: console\n\n    $ curl -s http://0.0.0.0:9105/metrics | grep -v \"#\"\n    dump1090_aircraft_recent_max_range{time_period=\"latest\"} 1959.0337385807418\n    dump1090_messages_total{time_period=\"latest\"} 90741\n    dump1090_recent_aircraft_observed{time_period=\"latest\"} 4\n    dump1090_recent_aircraft_with_multilateration{time_period=\"latest\"} 0\n    dump1090_recent_aircraft_with_position{time_period=\"latest\"} 1\n    dump1090_stats_cpr_airborne{time_period=\"last1min\"} 176\n    dump1090_stats_cpr_airborne{time_period=\"total\"} 18293\n    ...\n\nThe metrics exposed by the dump1090-exporter are all prefixed with the\n*dump1090_* string so as to provide a helpful namespacing which makes them\neasier to find in visualisation tools such as Grafana.\n\nThe exporter exposes generalised metrics for statistics and uses the multi\ndimensional label capability of Prometheus metrics to include information\nabout which group the metric is part of.\n\nTo extract information for the peak signal metric that dump1090 aggregated\nover the last 1 minute you would specify the time_period for that group:\n\n.. code-block:: console\n\n    dump1090_stats_local_peak_signal{job=\"dump1090\", time_period=\"last1min\"}\n\nIn the stats.json data there are 5 top level keys that contain statistics for\na different time period, defined by the \"start\" and \"end\" subkeys. The top\nlevel keys are:\n\n- *latest* which covers the time between the end of the \"last1min\" period and\n  the current time. In my dump1090 setup this is always empty.\n- *last1min* which covers a recent 1-minute period. This may be up to 1 minute\n  out of date (i.e. \"end\" may be up to 1 minute old)\n- *last5min* which covers a recent 5-minute period. As above, this may be up\n  to 1 minute out of date.\n- *last15min* which covers a recent 15-minute period. As above, this may be up\n  to 1 minute out of date.\n- *total* which covers the entire period from when dump1090 was started up to\n  the current time.\n\nBy default only the *last1min* time period is exported as Prometheus can be\nused for accessing historical data.\n\n\nPrometheus Configuration\n------------------------\n\nPrometheus needs to be told where to fetch the dump1090 metrics from. The\nPrometheus configuration file should be updated with a new entry under the\n'scrape_configs' block, that looks something like this:\n\n.. code-block:: yaml\n\n    scrape_configs:\n      - job_name: 'dump1090'\n        scrape_interval: 10s\n        scrape_timeout: 5s\n        static_configs:\n          - targets: ['192.168.1.201:9105']\n\n\nVisualisation\n-------------\n\nThe Granfana visualisation tool can display nice looking charts and it\nsupports Prometheus. A `dump1090export <https://grafana.net/dashboards/768>`_\nGrafana dashboard has been created to demonstrate how the data provided by the\nexporter can be visualised.\n\n.. figure:: screenshot-grafana.png\n\n\nDocker\n------\n\nThe dump1090 exporter has been packaged into a Docker container, which\ncan simplify running it in some environments. The container is configured\nwith an entry point that runs the dump1090 exporter with *--help* as the\ndefault arguement.\n\n.. code-block:: console\n\n    $ docker run -it --rm clawsicus/dump1090exporter\n    usage: dump1090-exporter [-h] [--url <dump1090 url>]\n    ...\n\nTo run the dump1090 exporter container simply pass the standard command\nline arguments to it:\n\n.. code-block:: console\n\n    $ docker run -p 9105:9105 \\\n      --detach \\\n      --restart always \\\n      clawsicus/dump1090exporter \\\n      --url=http://192.168.1.201:8080 \\\n      --latitude=-34.9285 \\\n      --longitude=138.6007\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/claws/dump1090-exporter",
    "keywords": "prometheus,monitoring,metrics,dump1090,ADSB",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dump1090exporter",
    "package_url": "https://pypi.org/project/dump1090exporter/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dump1090exporter/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/claws/dump1090-exporter"
    },
    "release_url": "https://pypi.org/project/dump1090exporter/16.10.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Prometheus metrics exporter for the dump1090 Mode S decoder for RTLSDR",
    "version": "16.10.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13167545,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09a89d3a4d5c9cb5e53bb2bae81568e8a87f96c2133384bbe5de14bffa4ec23c",
        "md5": "8845cb1e4382f00206f248841704ef72",
        "sha256": "03cc50c2cada084345381e39b20591da568da394d7b8d6c99ea2f38710c6dd42"
      },
      "downloads": -1,
      "filename": "dump1090exporter-16.10.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8845cb1e4382f00206f248841704ef72",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11707,
      "upload_time": "2016-10-29T00:44:28",
      "upload_time_iso_8601": "2016-10-29T00:44:28.850785Z",
      "url": "https://files.pythonhosted.org/packages/09/a8/9d3a4d5c9cb5e53bb2bae81568e8a87f96c2133384bbe5de14bffa4ec23c/dump1090exporter-16.10.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}