{
  "info": {
    "author": "Lars Arvestad",
    "author_email": "arve@math.su.se",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# modelmatcher: Rapid identification of evolutionary models\n\nThis tool reads multiple sequence alignments and determines a suitable sequence\nevolution model for your phylogenetic analysis.\n\n## Usage\n\nExample usage:\n\n``` shell\n$ modelmatcher inputfile.fasta\n```\n\nThe input file is a multiple sequence alignmnent in one of these common formats:\n\n* FASTA\n* Clustal\n* NEXUS\n* PHYLIP\n* STOCKHOLM\n\nThe output is a list of models, in order of fit to data, and their modelmatcher score.\nThe base model (such as JTT, WAG, LG, etc) is predicted, as well as whether one should\nadapt to the alignments amino acid composition (i.e., JTT+F, WAG+F, etc).\n\nIf you want to automatically feed the prediction from `modelmatcher` to a phylogenetic inference software, consider using\nthe `-of` option: \n```shell\niqtree  -s infile.phy  -m $(modelmatcher -of iqtree infile.phy)\n```\nThe dollar-parenthesis is a subcommand and the output is a single model name. Only models accepted by the given application (here: IQTREE) are output.\n\n\n\n### Options\n\nOptional options:\n```\n  -h, --help            show this help message and exit\n  -f {guess,fasta,clustal,nexus,phylip,stockholm}, --format {guess,fasta,clustal,nexus,phylip,stockholm}\n                        Specify what sequence type to assume. Be specific if\n                        the file is not recognized automatically. When reading\n                        from stdin, the format is always guessed to be FASTA.\n                        Default: guess\n  -m filename, --model filename\n                        Add the model given in the file to the comparisons.\n  -nf, --no-F-testing   Do not try +F models, i.e., do not test with amino\n                        acid frequencies estimated from the MSA.\n  -s int, --sample-size int\n                        For alignments with many sequences, decide on an upper\n                        bound of sequence pairs to use from the MSA. The\n                        computational complexity grows quadratically in the\n                        number of sequences, so a choice of 5000 bounds the\n                        growth for MSAs with more than 100 sequence.\n  -of {tabular,json,iqtree,raxml,phyml,mrbayes}, --output_format {tabular,json,iqtree,raxml,phyml,mrbayes}\n                        Choose output format. Tabular format is default. JSON\n                        is for convenient later parsing, with some additional\n                        meta-data added. For one-line output convenient for\n                        immediate use by inference tools, consider raxml and\n                        similar choices. Note that the PhyML and MrBayes\n                        options are restricted to their implemented models.\n                        Although PhyML supports the +F models (using the \"-f\n                        e\" option), this is not reflected in the output from\n                        \"modelmatcher -of phyml ...\" at this time.\n  --list-models         Output a list of models implemented in modelmatcher,\n                        then exit.\n  --verbose             Output progress information\n  --version\n```\nSee the section \"Output\" below for some more examples. \n\n\n### Input formats\n\nInput format is detected automatically from the following list, but can also be\nrequested specifically.\n\n* FASTA\n* Phylip\n* Nexus\n* Clustal\n* Stockholm\n\n### Output\n\nThe default output is given as a simple text table, or in JSON format for easy parsing by\nother scripts, ranking possible models in preference order. For example, the command above may yield a table looking like:\n\n```\nWAG             7.972\nVT              8.238\nBLOSUM62        8.478\nJTT             8.864\nJTT-DCMUT       8.917\nLG              9.984\nDCMUT          10.467\nDayhoff        10.495\nFLU            11.211\nHIVb           12.853\nRtREV          14.048\ncpREV          14.186\nHIVw           17.338\nMtZoa          18.476\nMtMAM          21.453\nmtArt          21.741\nMtREV          22.059\n```\nEach model is given with its modelmatcher score.\n\nAlternatively, the same analysis can look like:\n\n``` shell\n$ modelmatcher  --json  inputfile.fasta\n{\"n_observations\": 863692, \"infile\": \"inputfile.fasta\", \"n_seqs\": 66, \"model_ranking\": [[\"WAG\", 7.972410383355675], [\"VT\", 8.238362164888876], [\"BLOSUM62\", 8.478000205922985], [\"JTT\", 8.863578165338444], [\"JTT-DCMUT\", 8.917496451351846], [\"LG\", 9.983874357603963], [\"DCMUT\", 10.466872509785343], [\"Dayhoff\", 10.49522598111376], [\"FLU\", 11.21137482805874], [\"HIVb\", 12.852877789672046], [\"RtREV\", 14.047539707772572], [\"cpREV\", 14.18648653904322], [\"HIVw\", 17.338193829402], [\"MtZoa\", 18.475515151949153], [\"MtMAM\", 21.452528293860837], [\"mtArt\", 21.740741039472418], [\"MtREV\", 22.058622800684176]]}\n```\n\n\n## Install\n\nRecommended installation is:\n```\npip install --upgrade pip\npip install modelmatcher\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/arvestad/modelmatcher",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modelmatcher",
    "package_url": "https://pypi.org/project/modelmatcher/",
    "platform": "",
    "project_url": "https://pypi.org/project/modelmatcher/",
    "project_urls": {
      "Homepage": "https://github.com/arvestad/modelmatcher"
    },
    "release_url": "https://pypi.org/project/modelmatcher/1.2/",
    "requires_dist": [
      "biopython (>=1.70)",
      "numpy",
      "console-progressbar (>=1.1.2)"
    ],
    "requires_python": ">=3.2",
    "summary": "Rapid identification of sequence evolution models",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5976324,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1614ef8ba9d1523fcd8e7ab11c313df9cadd8a8053fb0879f4bd9bcfec375a0c",
        "md5": "ad96e70a1e2f68ae388b3f502cc32a39",
        "sha256": "b309990a195c2d7ea63d85e7a3c85861116cb268c7e3eee23d42ced22354cc5f"
      },
      "downloads": -1,
      "filename": "modelmatcher-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ad96e70a1e2f68ae388b3f502cc32a39",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.2",
      "size": 33182,
      "upload_time": "2019-10-15T11:25:16",
      "upload_time_iso_8601": "2019-10-15T11:25:16.710786Z",
      "url": "https://files.pythonhosted.org/packages/16/14/ef8ba9d1523fcd8e7ab11c313df9cadd8a8053fb0879f4bd9bcfec375a0c/modelmatcher-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cdd41959ee1d121e6309c87b6c40d7480dc3253ed650215ffe09ef26a6b43b51",
        "md5": "b4e40f472f0227a1c339900ac124986e",
        "sha256": "870d66b55ed7a13c542636e7c13b9c12e08660db1d16952fbdb302bc57668101"
      },
      "downloads": -1,
      "filename": "modelmatcher-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b4e40f472f0227a1c339900ac124986e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.2",
      "size": 34575,
      "upload_time": "2019-10-15T11:25:18",
      "upload_time_iso_8601": "2019-10-15T11:25:18.906785Z",
      "url": "https://files.pythonhosted.org/packages/cd/d4/1959ee1d121e6309c87b6c40d7480dc3253ed650215ffe09ef26a6b43b51/modelmatcher-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}