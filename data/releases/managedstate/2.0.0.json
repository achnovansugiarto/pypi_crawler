{
  "info": {
    "author": "immijimmi",
    "author_email": "imranhamid99@msn.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "# managedstate\n\n###### State management inspired by Redux\n\n## Quickstart\n\n### Setup\n\n```python\nfrom managedstate import State\n\ninitial_state = {\n    \"first_key\": [\n        {\n            \"id\": 1,\n            \"second_key\": True\n        },\n        {\n            \"id\": 2,\n            \"second_key\": False\n        }\n    ]\n}\n\nstate = State(initial_state=initial_state)\n```\n\n### Getting the state\n\n- The full state object\n```python\n>>> state.get()\n{'first_key': [{'id': 1, 'second_key': True}, {'id': 2, 'second_key': False}]}\n```\n\n- A sub-state object\n```python\n>>> state.get([\"first_key\", 0, \"second_key\"], defaults=[[], {}, False])\nTrue\n```\n\n- A sub-state object, using a query function\n```python\ndef id_is_1_query(first_key_list):\n    for index, obj in enumerate(first_key_list):\n        if obj[\"id\"] == 1:\n            return index\n```\n```python\n>>> state.get([\"first_key\", KeyQuery(id_is_1_query), \"second_key\"], defaults=[[], {}, False])\nTrue\n```\n\n### Setting the state\n- The full state object\n```python\n>>> state.set({'first_key': [{'id': 3, 'second_key': True}, {'id': 4, 'second_key': False}]})\n>>> state.get()\n{'first_key': [{'id': 3, 'second_key': True}, {'id': 4, 'second_key': False}]}\n```\n\n- A sub-state object, using a query function\n```python\ndef get_id_keyquery(target_id):  # This will dynamically create the query we need, when we need it\n    def id_query(substate):\n        for index, obj in enumerate(substate):\n            if obj[\"id\"] == target_id:\n                return index\n    return KeyQuery(id_query)\n```\n```python\n>>> state.set(False, ['first_key', get_id_keyquery(3), 'second_key'], defaults=[[], {}])\n>>> state.get()\n{'first_key': [{'id': 3, 'second_key': False}, {'id': 4, 'second_key': False}]}\n```\n\n\n## Functionality\n\n### Dependencies\n\nThe State class and the extensions in this package implement Extendable and Extension respectively, from [objectextensions](https://github.com/immijimmi/objectextensions).\nAs such, applying extensions is done by calling the class method `State.with_extensions()` and passing in the extension classes to be applied.\n\nExample code:\n```python\nfrom managedstate import State\nfrom managedstate.extensions import Registrar\n\nstate = State.with_extensions(Registrar)()\n```\n\n### Extensions\n\n*extensions*.**Registrar**  \n&nbsp;&nbsp;&nbsp;&nbsp;Allows specific get and set operations to be registered under a shorthand label for ease of use later.  \n&nbsp;\n\n*extensions*.**Listeners**  \n&nbsp;&nbsp;&nbsp;&nbsp;Provides an easy way to attach observer methods that will be called immediately after `set()` and/or `get()`.  \n&nbsp;\n\n### Data Classes\n\n**AttributeName**(*self, attribute_name: str*)  \n&nbsp;&nbsp;&nbsp;&nbsp;An instance of this class should be provided as a path key when getting or setting the state,  \n&nbsp;&nbsp;&nbsp;&nbsp;to indicate that the next nesting level of the state should be accessed via an object attribute.  \n&nbsp;\n\n**KeyQuery**(*self, path_key_getter: Callable[[Any], Any]*)  \n&nbsp;&nbsp;&nbsp;&nbsp;Instances of this class can be provided as path keys when getting or setting the state,  \n&nbsp;&nbsp;&nbsp;&nbsp;to indicate that the next nesting level of the state should be accessed via the path key returned  \n&nbsp;&nbsp;&nbsp;&nbsp;from its stored function.  \n&nbsp;&nbsp;&nbsp;&nbsp;The function will receive a copy of the state object at the current level of nesting  \n&nbsp;&nbsp;&nbsp;&nbsp;in order to determine what key to return.  \n&nbsp;\n\n*extensions*.**PartialQuery**(*self, path_key_getter: Callable[[Any], Any]*)  \n&nbsp;&nbsp;&nbsp;&nbsp;Instances of this class can be provided as path keys only in `Registrar.register_path()`.  \n&nbsp;&nbsp;&nbsp;&nbsp;When `registered_get()`/`registered_set()` is called with the relevant path label, the function provided below  \n&nbsp;&nbsp;&nbsp;&nbsp;will be called and passed one value from the custom query args list;  \n&nbsp;&nbsp;&nbsp;&nbsp;a valid path key or KeyQuery should be returned.  \n&nbsp;\n\n### Methods\n\nState.**get**(*self, path_keys: Sequence[Any] = (), defaults: Sequence[Any] = ()*)  \n&nbsp;&nbsp;&nbsp;&nbsp;Drills into the state object using the provided path keys in sequence.  \n&nbsp;&nbsp;&nbsp;&nbsp;Any time progressing further into the state object fails, the default value at the relevant index of defaults  \n&nbsp;&nbsp;&nbsp;&nbsp;is substituted in.  \n&nbsp;&nbsp;&nbsp;&nbsp;Returns a copy of the drilled-down state object.  \n&nbsp;\n\nState.**set**(*self, value: Any, path_keys: Sequence[Any] = (), defaults: Sequence[Any] = ()*)  \n&nbsp;&nbsp;&nbsp;&nbsp;Drills into the state object using the provided path keys in sequence.  \n&nbsp;&nbsp;&nbsp;&nbsp;Any time progressing further into the state object fails, the default value at the relevant index of defaults  \n&nbsp;&nbsp;&nbsp;&nbsp;is substituted in.  \n&nbsp;&nbsp;&nbsp;&nbsp;The final path key is used as the index to store a copy of the provided value at  \n&nbsp;&nbsp;&nbsp;&nbsp;inside the drilled-down state object.  \n&nbsp;\n\n*extensions*.Registrar.**register_path**(*self, registered_path_label: str, path_keys: Sequence[Any], defaults: Sequence[Any] = ()*)  \n&nbsp;&nbsp;&nbsp;&nbsp;Saves the provided path keys and defaults under the provided label, so that a custom get or set can be  \n&nbsp;&nbsp;&nbsp;&nbsp;carried out at later times simply by providing the label again in a call to `registered_get()` or `registered_set()`.  \n&nbsp;\n\n*extensions*.Registrar.**registered_get**(*self, registered_path_label: str, custom_query_args: Sequence[Any] = ()*)  \n&nbsp;&nbsp;&nbsp;&nbsp;Calls `get()`, passing in the path keys and defaults previously provided in `register()`.  \n&nbsp;&nbsp;&nbsp;&nbsp;If any of these path keys are instances of PartialQuery, each will be called and passed one value from  \n&nbsp;&nbsp;&nbsp;&nbsp;the custom query args list and is expected to return a valid path key or KeyQuery.  \n&nbsp;\n\n*extensions*.Registrar.**registered_set**(*self, value: Any, registered_path_label: str, custom_query_args: Sequence[Any] = ()*)  \n&nbsp;&nbsp;&nbsp;&nbsp;Calls `set()`, passing in the path keys and defaults previously provided in `register()`.  \n&nbsp;&nbsp;&nbsp;&nbsp;If any of these path keys are instances of PartialQuery, each will be called and passed one value from  \n&nbsp;&nbsp;&nbsp;&nbsp;the custom query args list and is expected to return a valid path key or KeyQuery.  \n&nbsp;\n\n*extensions*.Listeners.**add_listener**(*self, method: str, listener: Callable[[dict], None]*)  \n&nbsp;&nbsp;&nbsp;&nbsp;Adds the provided listener to a set of callbacks for the specified method.  \n&nbsp;&nbsp;&nbsp;&nbsp;These callbacks will receive copies of the method return value and its arguments  \n&nbsp;&nbsp;&nbsp;&nbsp;in the form `(result, self, *args, **kwargs)`.  \n&nbsp;\n\n*extensions*.Listeners.**remove_listener**(*self, method: str, listener: Callable[[dict], None]*)  \n&nbsp;&nbsp;&nbsp;&nbsp;Removes the provided listener from the set of callbacks for the specified method.  \n&nbsp;\n\n### Additional Info\n\n- KeyQuery instances provided as path keys can return any valid path key, *except* another KeyQuery or a PartialQuery.\n- Similarly, PartialQuery instances can return any valid path key except for another PartialQuery (they can however return a KeyQuery)\n- The data classes provided in this package are not designed to be stored inside the state object themselves, and as such their `__hash__` methods have been removed.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/immijimmi/managedstate/archive/refs/tags/v2.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/immijimmi/managedstate",
    "keywords": "state,managed,management,access,data",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "managedstate",
    "package_url": "https://pypi.org/project/managedstate/",
    "platform": null,
    "project_url": "https://pypi.org/project/managedstate/",
    "project_urls": {
      "Download": "https://github.com/immijimmi/managedstate/archive/refs/tags/v2.0.0.tar.gz",
      "Homepage": "https://github.com/immijimmi/managedstate"
    },
    "release_url": "https://pypi.org/project/managedstate/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "State management inspired by Redux",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15337901,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee717b2d1707436e1277907843b4e5cc9529f83eaf6938fdbe9f39ed4a6bf623",
        "md5": "c52235792eaacc57cc6acb125fbf19a0",
        "sha256": "9393cc5cdba76991da8463f926375ffd13a3d9adbc80533f4c924d2500323ce1"
      },
      "downloads": -1,
      "filename": "managedstate-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c52235792eaacc57cc6acb125fbf19a0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10082,
      "upload_time": "2022-07-19T20:28:15",
      "upload_time_iso_8601": "2022-07-19T20:28:15.406050Z",
      "url": "https://files.pythonhosted.org/packages/ee/71/7b2d1707436e1277907843b4e5cc9529f83eaf6938fdbe9f39ed4a6bf623/managedstate-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}