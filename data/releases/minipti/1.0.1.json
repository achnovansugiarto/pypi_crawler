{
  "info": {
    "author": "",
    "author_email": "Jonas Bilal <jonasbilal@outlook.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MiniPTI\r\n\r\n<p align=\"center\">\r\n<img alt=\"flowchart\" src=\"https://www.fhnw.ch/de/medien/logos/media/fhnw_e_10mm.jpg\" class=\"center\">\r\n</p>\r\n\r\nIn this library the python implementation of the algorithm from\r\n[Waveguide based passively demodulated photothermal interferometer for light absorption measurements of trace substances](https://doi.org/10.1364/AO.476868)\r\nis provided.\r\n\r\n### Installation\r\n```bash\r\npip install minipti\r\n```\r\nhttps://pypi.org/project/minipti/1.0/\r\n\r\nThe library can be split into sub-libraries:\r\n\r\n#### 1. Interferometry\r\n\r\nThe Interferometry library provides algorithms to characterise a 3x3 coupler interferometer (calculating the output\r\nphases,\r\namplitudes and offsets of the output DC-signals) for any given, measured DC-signals.\r\nIt also contains an API for calculating the current phase of the interferometer for given DC signals.\r\n\r\nNote that this library is primarily designed for 3x3 couplers, but it can be easily extended for every amount of\r\noutputs.\r\n\r\n#### 2. PTI\r\n\r\nPTI, short for Photo Thermal Inversion, provided the PTI-related algorithm from the mentioned paper above.\r\nThey include an algorithm for common mode noise rejection of high-resolution AC signals, decimation\r\nand the actual PTI inversion.\r\n\r\nNote that both sub-libraries provide only offline routines. Future versions will be provided\r\nas well routines for live data.\r\n\r\nA basic structure of the libraries with their classes is shown in the picture above\r\nfrom the mentioned paper.\r\n\r\nThe picture below shows the basic file structure and the public members of the classes.\r\n\r\n<p align=\"center\">\r\n<img alt=\"flowchart\" src=\"https://raw.githubusercontent.com/bilaljo/MiniPTI/0dad7516c4a8105e1fcbecc22dcb905d3a4bee11/images/flowchart.svg\" class=\"center\">\r\n</p>\r\n\r\n## **Decimation**\r\n\r\nThe measured data for decimation is in binary file format generated from LabView.\r\nIt is good practice to use the decimation object with the ```with``` statement so that the binary fill will\r\nautomatically\r\nbe closed. Note that as the binary file itself can be very large (up to GB) the decimation will read the file\r\nchunk-wise.\r\nread_data reads a block of 50'000 samples of data and decodes them into NumPy arrays. The call of the decimation will\r\nthen process the algorithms described in [1].\r\n\r\n```python\r\nfrom collections import defaultdict\r\n\r\nimport pandas as pd\r\nimport minipti\r\n\r\nbinary_file = \"data.bin\"\r\noutput_data = defaultdict(list)\r\nfor i in range(3):\r\n    output_data[f\"DC CH{i + 1}\"].append(\"s\")\r\n    output_data[f\"Lock In Amplitude CH{i + 1}\"].append(\"V\")\r\n    output_data[f\"Lock In Phase CH{i + 1}\"].append(\"rad\")\r\nwith minipti.pti.Decimation(binary_file) as decimation:\r\n    while decimation.read_data():\r\n        decimation()\r\n        for i in range(3):\r\n            output_data[f\"DC CH{i + 1}\"].append(decimation.dc_down_sampled[i])\r\n            output_data[f\"Lock In Amplitude CH{i}\"].append(decimation.lock_in.amplitude[i])\r\n            output_data[f\"Lock In Phase CH{i}\"].append(decimation.lock_in.phase[i])\r\npd.DataFrame(output_data).to_csv(\"Decimation.csv\")\r\n```\r\n\r\n## **Interferometry**\r\n\r\nThe interferometry provides an API for calculating the interferometric phase and characterising the interferometer\r\n(output phases, amplitudes and offsets). For proper use, it is needed to provide a configuration file. An example of\r\nsuch a file can be found in src/configs/settings.csv. There are also settings files for other couplers and experiments.\r\n\r\n### **Calculating the interferometric Phase**\r\n\r\n```python\r\nimport minipti\r\nimport pandas as pd\r\n\r\ninterferometer = minipti.interferometry.Interferometer()\r\n\r\ninterferometer.settings_file_path = \"configs/settings.csv\"\r\ninterferometer.decimation_filepath = \"data/Decimation_Commercial.csv\"\r\ninterferometer.init_settings()\r\ndata = pd.read_csv(\"data/Decimation_Commercial.csv\")\r\n\r\ndc_signals = data[[f\"DC CH{i}\" for i in range(1, 4)]].to_numpy()\r\n\r\ninterferometer.calculate_offsets(dc_signals)  # Estimate offsets\r\ninterferometer.calculate_amplitudes(dc_signals)  # Estimate amplitudes\r\ninterferometer.calculate_phase(dc_signals)\r\n```\r\n\r\n### **Characterising the Interferometer**\r\n\r\nThe characterisation uses an interferometer object, as well as the PTI Inversion. The accessed fields (output_phases,\r\namplitudes and offsets) are threadsafe via locks. If no output phases, amplitudes or offsets are known, the field\r\n```use_settings``` can be set to ```False```. In this case, the settings will ignore and the parameters will be found by\r\nrepeating of calculating the interferometric phase and parameters.\r\n\r\ncharacterization itself saves the data directly to ```data/Characterization.csv```\r\nif you use the provided wrappers.\r\n\r\n```python\r\nimport minipti\r\n\r\ninterferometer = minipti.interferometry.Interferometer()\r\ninterferometer.settings_file_path = \"configs/settings.csv\"\r\ninterferometer.decimation_filepath = \"data/Decimation_Commercial.csv\"\r\ninterferometer.init_settings()\r\n\r\ncharacterization = minipti.interferometry.Characterization()\r\ncharacterization()\r\n\r\ncharacterization.use_settings = False\r\ncharacterization()\r\n```\r\n\r\n### **Direct usage of API**\r\n\r\n```python\r\nimport minipti\r\nimport pandas as pd\r\n\r\ninterferometer = minipti.interferometry.Interferometer()\r\ndc_signals = pd.read_csv(\"data/Decimation_Commercial.csv\")\r\ncharacterization = minipti.interferometry.Characterization()\r\ninterferometer.settings_path = \"configs/settings.csv\"\r\ncharacterization.signals = dc_signals[[f\"DC CH{i}\" for i in range(1, 4)]].to_numpy()\r\ninterferometer.init_settings()\r\n\r\n# Without knowing any parameter\r\ncharacterization.use_settings = False\r\ncharacterization.iterate_characterization(characterization.signals.T)\r\n\r\n# With knowing the parameters and already calculated phases\r\nphases = pd.read_csv(\"data/PTI_Inversion_Commercial.csv\")\r\ncharacterization.phases = phases[\"Interferometric Phase\"]\r\ncharacterization.characterise_interferometer()\r\n```\r\n\r\n### **PTI Inversion**\r\n\r\nThe PTI inversion algorithms can be applied from a call to the functor or by calling the single function by itself. The\r\nfirst one is recommended if it is needed to run the whole procedure based on Decimation-Files. The second gives access\r\nto the actual API.\r\n\r\n```python\r\nimport minipti\r\n\r\ninterferometer = minipti.interferometry.Interferometer()\r\ninterferometer.decimation_filepath = \"data/Decimation_Commercial.csv\"\r\ninterferometer.settings_path = \"configs/settings.csv\"\r\ninterferometer.init_settings()\r\ninversion = minipti.pti.Inversion(interferometer=interferometer)\r\ninversion()\r\n```\r\n\r\n### **Direct Usage of API**\r\n\r\n```python\r\nimport pandas as pd\r\nimport minipti\r\n\r\ninterferometer = minipti.interferometry.Interferometer()\r\ninterferometer.decimation_filepath = \"data/Decimation_Commercial.csv\"\r\ninterferometer.settings_path = \"configs/settings.csv\"\r\ninterferometer.init_settings()\r\ndata = pd.read_csv(\"data/Decimation_Commercial.csv\")\r\n\r\ninversion = minipti.pti.Inversion(interferometer=interferometer)\r\n\r\ndc_signals = data[[f\"DC CH{i}\" for i in range(1, 4)]].to_numpy()\r\namplitudes = data[[f\"Lock In Amplitude CH{i}\" for i in range(1, 4)]].to_numpy().T\r\ninversion.lock_in.amplitude = amplitudes\r\ninversion.lock_in.phase = data[[f\"Lock In Phase CH{i}\" for i in range(1, 4)]].to_numpy().T\r\n\r\ninterferometer.calculate_phase(dc_signals)\r\ninversion.calculate_sensitivity()\r\ninversion.calculate_pti_signal()\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minipti",
    "package_url": "https://pypi.org/project/minipti/",
    "platform": null,
    "project_url": "https://pypi.org/project/minipti/",
    "project_urls": {
      "Bug Tracker": "https://github.com/bilaljo/MiniPTI/issues",
      "Homepage": "https://www.fhnw.ch/en/about-fhnw/schools/school-of-engineering/institutes/institute-for-sensors-and-electronics/aerosol-measurement-technology",
      "Source": "https://github.com/bilaljo/MiniPTI"
    },
    "release_url": "https://pypi.org/project/minipti/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Provides algorithm for photo thermal interferometry and 3x3 couplers",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16443220,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "add601c4a9dde7f646ea4d938398fa275f233592a23a3e87b229d07d14562fce",
        "md5": "0d8711614205e8a3d7230e2616728073",
        "sha256": "04cfff727700d2da7ec3265e2ceffa3546714f905d6cc50a765718384899af29"
      },
      "downloads": -1,
      "filename": "minipti-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0d8711614205e8a3d7230e2616728073",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 10367,
      "upload_time": "2023-01-16T09:35:25",
      "upload_time_iso_8601": "2023-01-16T09:35:25.188051Z",
      "url": "https://files.pythonhosted.org/packages/ad/d6/01c4a9dde7f646ea4d938398fa275f233592a23a3e87b229d07d14562fce/minipti-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "336ed2ed03e0ebdc7a4caf816f861f737ee141e96af40bcb1d1e9daf13024dcc",
        "md5": "d7339b6b4755bb1653765368477948fa",
        "sha256": "db8d769f3d7289cda92c0b4def2d5d3435eae1c64e7704ba699e0db21db8c402"
      },
      "downloads": -1,
      "filename": "minipti-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d7339b6b4755bb1653765368477948fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 11339,
      "upload_time": "2023-01-16T09:35:27",
      "upload_time_iso_8601": "2023-01-16T09:35:27.502608Z",
      "url": "https://files.pythonhosted.org/packages/33/6e/d2ed03e0ebdc7a4caf816f861f737ee141e96af40bcb1d1e9daf13024dcc/minipti-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}