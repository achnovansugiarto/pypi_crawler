{
  "info": {
    "author": "Mario Orlandi",
    "author_email": "morlandi@brainstorm.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "===========\ndjango-task\n===========\n\n.. image:: https://badge.fury.io/py/django-task.svg\n    :target: https://badge.fury.io/py/django-task\n\n.. image:: https://travis-ci.org/morlandi/django-task.svg?branch=master\n    :target: https://travis-ci.org/morlandi/django-task\n\n.. image:: https://codecov.io/gh/morlandi/django-task/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/morlandi/django-task\n\nA Django app to run new background tasks from either admin or cron, and inspect task history from admin; based on django-rq\n\n.. contents::\n\n.. sectnum::\n\nQuickstart\n----------\n\n1) **Install Django Task**:\n\n.. code-block:: bash\n\n    pip install django-task\n\n2) **Add it to your `INSTALLED_APPS`**:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django_rq',\n        'django_task',\n        ...\n    )\n\n3) **Add Django Task's URL patterns**:\n\n.. code-block:: python\n\n    urlpatterns = [\n        ...\n        path('django_task/', include('django_task.urls', namespace='django_task')),\n        ...\n    ]\n\n4) **Configure Redis and RQ in settings.py**; example:\n\n.. code-block:: python\n\n    #REDIS_URL = 'redis://localhost:6379/0'\n    redis_host = os.environ.get('REDIS_HOST', 'localhost')\n    redis_port = 6379\n    REDIS_URL = 'redis://%s:%d/0' % (redis_host, redis_port)\n\n    CACHES = {\n        'default': {\n            'BACKEND': 'redis_cache.RedisCache',\n            'LOCATION': REDIS_URL\n        },\n    }\n\n    #\n    # RQ config\n    #\n\n    RQ_PREFIX = \"myproject_\"\n    QUEUE_DEFAULT = RQ_PREFIX + 'default'\n    QUEUE_HIGH = RQ_PREFIX + 'high'\n    QUEUE_LOW = RQ_PREFIX + 'low'\n\n    RQ_QUEUES = {\n        QUEUE_DEFAULT: {\n            'URL': REDIS_URL,\n            #'PASSWORD': 'some-password',\n            'DEFAULT_TIMEOUT': 360,\n        },\n        QUEUE_HIGH: {\n            'URL': REDIS_URL,\n            'DEFAULT_TIMEOUT': 500,\n        },\n        QUEUE_LOW: {\n            'URL': REDIS_URL,\n            #'ASYNC': False,\n        },\n    }\n\nNote: if you plan to install many instances of the project on the same server,\nfor each instance use a specific value for `RQ_PREFIX`; for example:\n\n.. code-block:: python\n\n    INSTANCE_PREFIX = \"myproject_\"\n    try:\n        from project.settings.instance_prefix import *\n    except Exception as e:\n        pass\n    RQ_PREFIX = INSTANCE_PREFIX\n\n    QUEUE_DEFAULT = RQ_PREFIX + '_default'\n    QUEUE_LOW = RQ_PREFIX + '_low'\n    QUEUE_HIGH = RQ_PREFIX + '_high'\n\n    ...\n\n5) **Customize django-task specific settings (optional)**:\n\n.. code-block:: python\n\n    RQ_SHOW_ADMIN_LINK = False\n    DJANGOTASK_LOG_ROOT = os.path.abspath(os.path.join(BASE_DIR, '..', 'protected', 'tasklog'))\n    DJANGOTASK_ALWAYS_EAGER = False\n    DJANGOTASK_JOB_TRACE_ENABLED = False\n    DJANGOTASK_REJECT_IF_NO_WORKER_ACTIVE_FOR_QUEUE = True\n\n6) **Optionally, revoke pending tasks at startapp**;\n\nfile `main/apps.py`:\n\n.. code-block:: python\n\n    class MainConfig(AppConfig):\n\n        ...\n\n        def ready(self):\n\n            ...\n            try:\n                from django_task.utils import revoke_pending_tasks\n                revoke_pending_tasks()\n            except Exception as e:\n                print(e)\n\nFeatures\n--------\n\n**Purposes**\n\n- create async tasks either programmatically or from admin\n- monitor async tasks from admin\n- log all tasks in the database for later inspection\n- optionally save task-specific logs in a TextField and/or in a FileField\n\n**Details**\n\n1. each specific job is described my a Model derived from models.Task, which\n   is responsible for:\n\n   - selecting the name for the consumer queue among available queues\n   - collecting and saving all parameters required by the associated job\n   - running the specific job asyncronously\n\n2. a new job can be run either:\n\n   - creating a Task from the Django admin\n   - creating a Task from code, then calling Task.run()\n\n3. job execution workflow:\n\n   - job execution is triggered by task.run(is_async)\n   - job will receive the task.id, and retrieve paramerts from it\n   - on start, job will update task status to 'STARTED' and save job.id for reference\n   - during execution, the job can update the progress indicator\n   - on completion, task status is finally updated to either 'SUCCESS' or 'FAILURE'\n   - See example.jobs.count_beans for an example\n\n\nScreenshots\n-----------\n\n.. image:: example/etc/screenshot_001.png\n\n.. image:: example/etc/screenshot_002.png\n\n\nApp settings\n------------\n\nDJANGOTASK_LOG_ROOT\n    Path for log files.\n\n    Default: None\n\n    Example: os.path.abspath(os.path.join(BASE_DIR, '..', 'protected', 'tasklog'))\n\nDJANGOTASK_ALWAYS_EAGER\n    When True, all task are execute syncronously (useful for debugging and unit testing).\n\n    Default: False\n\nDJANGOTASK_JOB_TRACE_ENABLED\n    Enables low level tracing in Job.run() - for debugging challenging race conditions\n\n    Default: False\n\nDJANGOTASK_REJECT_IF_NO_WORKER_ACTIVE_FOR_QUEUE\n    Rejects task if not active worker is available for the specific task queue\n    when task.run() is called\n\n    Default: False\n\nREDIS_URL\n    Redis server to connect to\n\n    Default: 'redis://localhost:6379/0'\n\n\nRunning Tests\n-------------\n\nDoes the code actually work?\n\nRunning the unit tests from your project::\n\n    python manage.py test -v 2 django_task --settings=django_task.tests.settings\n\nRunning the unit tests from your local fork::\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install tox\n    (myenv) $ tox\n\nor::\n\n    python ./runtests.py\n\nor::\n\n    coverage run --source='.' runtests.py\n    coverage report\n\n\nSupport Job class\n-----------------\n\nStarting from version 0.3.0, some conveniences have been added:\n\n- The @job decorator for job functions is no more required, as Task.run() now\n  uses queue.enqueue() instead of jobfunc.delay(), and retrieves the queue\n  name directly from the Task itself\n\n- each Task can set it's own TASK_TIMEOUT value (expressed in seconds),\n  that when provided overrides the default queue timeout\n\n- a new Job class has been provided to share suggested common logic before and\n  after jobfunc execution\n\n.. code :: python\n\n    class Job(object):\n\n        @classmethod\n        def run(job_class, task_class, task_id):\n\n            from django_task.job import job_trace\n            from rq import get_current_job\n            from django_task.app_settings import REDIS_URL\n\n            job_trace('job.run() enter')\n            task = None\n            result = 'SUCCESS'\n            failure_reason = ''\n\n            try:\n\n                # this raises a \"Could not resolve a Redis connection\" exception in sync mode\n                #job = get_current_job()\n                job = get_current_job(connection=redis.Redis.from_url(REDIS_URL))\n\n                # Retrieve task obj and set as Started\n                task = task_class.get_task_from_id(task_id)\n                task.set_status(status='STARTED', job_id=job.get_id())\n\n                # Execute job passing by task\n                job_class.execute(job, task)\n\n            except Exception as e:\n                job_trace('ERROR: %s' % str(e))\n                job_trace(traceback.format_exc())\n\n                if task:\n                    task.log(logging.ERROR, str(e))\n                    task.log(logging.ERROR, traceback.format_exc())\n                result = 'FAILURE'\n                failure_reason = str(e)\n\n            finally:\n                if task:\n                    task.set_status(status=result, failure_reason=failure_reason)\n                try:\n                    job_class.on_complete(job, task)\n                except Exception as e:\n                    job_trace('NESTED ERROR: Job.on_completed() raises error \"%s\"' % str(e))\n                    job_trace(traceback.format_exc())\n            job_trace('job.run() leave')\n\n        @staticmethod\n        def on_complete(job, task):\n            pass\n\n        @staticmethod\n        def execute(job, task):\n            pass\n\nso you can either override `run()` to implement a different logic,\nor (in most cases) just supply your own `execute()` method, and optionally\noverride `on_complete()` to execute cleanup actions after job completion;\n\nexample:\n\n.. code :: python\n\n    class CountBeansJob(Job):\n\n        @staticmethod\n        def execute(job, task):\n            num_beans = task.num_beans\n            for i in range(0, num_beans):\n                time.sleep(0.01)\n                task.set_progress((i + 1) * 100 / num_beans, step=10)\n\n        @staticmethod\n        def on_complete(job, task):\n            print('task \"%s\" completed with: %s' % (str(task.id), task.status))\n            # An more realistic example from a real project ...\n            # if task.status != 'SUCCESS' or task.error_counter > 0:\n            #    task.alarm = BaseTask.ALARM_STATUS_ALARMED\n            #    task.save(update_fields=['alarm', ])\n\n\n**Execute**\n\nRun consumer:\n\n.. code:: bash\n\n    python manage.py runserver\n\n\nRun worker(s):\n\n.. code:: bash\n\n    python manage.py rqworker low high default\n    python manage.py rqworker low high default\n    ...\n\n**Sample Task**\n\n.. code:: python\n\n    from django.db import models\n    from django.conf import settings\n    from django_task.models import Task\n\n\n    class SendEmailTask(Task):\n\n        sender = models.CharField(max_length=256, null=False, blank=False)\n        recipients = models.TextField(null=False, blank=False,\n            help_text='put addresses in separate rows')\n        subject = models.CharField(max_length=256, null=False, blank=False)\n        message = models.TextField(null=False, blank=True)\n\n        TASK_QUEUE = settings.QUEUE_LOW\n        TASK_TIMEOUT = 60\n        LOG_TO_FIELD = True\n        LOG_TO_FILE = False\n        DEFAULT_VERBOSITY = 2\n\n        @staticmethod\n        def get_jobfunc():\n            from .jobs import SendEmailJob\n            return SendEmailJob\n\nYou can change the `verbosity` dynamically by overridding the verbosity property:\n\n\nWhen using **LOG_TO_FILE = True**, you might want to add a cleanup handler to\nremove the log file when the corresponding record is deleted::\n\n    import os\n    from django.dispatch import receiver\n\n    @receiver(models.signals.post_delete, sender=ImportaCantieriTask)\n    def on_sendemailtask_delete_cleanup(sender, instance, **kwargs):\n        \"\"\"\n        Autodelete logfile on Task delete\n        \"\"\"\n        logfile = instance._logfile()\n        if os.path.isfile(logfile):\n            os.remove(logfile)\n\n\n.. code:: python\n\n    class SendEmailTask(Task):\n\n        @property\n        def verbosity(self):\n            #return self.DEFAULT_VERBOSITY\n            return 1  # either 0, 1 or 2\n\n**Sample Job**\n\n.. code:: python\n\n    from __future__ import print_function\n    import redis\n    import logging\n    import traceback\n    from django.conf import settings\n    from .models import SendEmailTask\n    from django_task.job import Job\n\n\n    class SendEmailJob(Job):\n\n        @staticmethod\n        def execute(job, task):\n            recipient_list = task.recipients.split()\n            sender = task.sender.strip()\n            subject = task.subject.strip()\n            message = task.message\n            from django.core.mail import send_mail\n            send_mail(subject, message, sender, recipient_list)\n\n\n**Sample management command**\n\n.. code:: python\n\n    from django_task.task_command import TaskCommand\n    from django.contrib.auth import get_user_model\n\n    class Command(TaskCommand):\n\n        def add_arguments(self, parser):\n            super(Command, self).add_arguments(parser)\n            parser.add_argument('sender')\n            parser.add_argument('subject')\n            parser.add_argument('message')\n            parser.add_argument('-r', '--recipients', nargs='*')\n            parser.add_argument('-u', '--user', type=str, help=\"Specify username for 'created_by' task field\")\n\n        def handle(self, *args, **options):\n            from tasks.models import SendEmailTask\n\n            # transform the list of recipents into text\n            # (one line for each recipient)\n            options['recipients'] = '\\n'.join(options['recipients']) if options['recipients'] is not None else ''\n\n            # format multiline message\n            options['message'] = options['message'].replace('\\\\n', '\\n')\n\n            if 'user' in options:\n                created_by = get_user_model().objects.get(username=options['user'])\n            else:\n                created_by = None\n\n            self.run_task(SendEmailTask, created_by=created_by, **options)\n\n**Deferred Task retrieval to avoid job vs. Task race condition**\n\nAn helper Task.get_task_from_id() classmethod is supplied to retrieve Task object\nfrom task_id safely.\n\n*Task queues create a new type of race condition. Why ?\nBecause message queues are fast !\nHow fast ?\nFaster than databases.*\n\nSee:\n\nhttps://speakerdeck.com/siloraptor/django-tasty-salad-dos-and-donts-using-celery\n\nA similar generic helper is available for Job-derived needs::\n\n    django_task.utils.get_model_from_id(model_cls, id, timeout=1000, retry_count=10)\n\n\n**Howto separate jobs for different instances on the same machine**\n\nTo sepatare jobs for different instances on the same machine (or more precisely\nfor the same redis connection), override queues names for each instance;\n\nfor example:\n\n.. code:: python\n\n    # file \"settings.py\"\n\n    REDIS_URL = 'redis://localhost:6379/0'\n    ...\n\n    #\n    # RQ config\n    #\n\n    RQ_PREFIX = \"myproject_\"\n    QUEUE_DEFAULT = RQ_PREFIX + 'default'\n    QUEUE_HIGH = RQ_PREFIX + 'high'\n    QUEUE_LOW = RQ_PREFIX + 'low'\n\n    RQ_QUEUES = {\n        QUEUE_DEFAULT: {\n            'URL': REDIS_URL,\n            #'PASSWORD': 'some-password',\n            'DEFAULT_TIMEOUT': 360,\n        },\n        QUEUE_HIGH: {\n            'URL': REDIS_URL,\n            'DEFAULT_TIMEOUT': 500,\n        },\n        QUEUE_LOW: {\n            'URL': REDIS_URL,\n            #'ASYNC': False,\n        },\n    }\n\n    RQ_SHOW_ADMIN_LINK = False\n    DJANGOTASK_LOG_ROOT = os.path.abspath(os.path.join(BASE_DIR, '..', 'protected', 'tasklog'))\n    DJANGOTASK_ALWAYS_EAGER = False\n    DJANGOTASK_JOB_TRACE_ENABLED = False\n    DJANGOTASK_REJECT_IF_NO_WORKER_ACTIVE_FOR_QUEUE = True\n\nthen run worker as follows:\n\n.. code:: python\n\n    python manage.py rqworker myproject_default\n\n**Howto schedule jobs with cron**\n\nCall management command 'count_beans', which in turn executes the required job.\n\nFor example::\n\n    SHELL=/bin/bash\n    PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n    0 * * * *  {{username}}    timeout 55m {{django.pythonpath}}/python {{django.website_home}}/manage.py count_beans 1000 >> {{django.logto}}/cron.log 2>&1\n\nA base class TaskCommand has been provided to simplify the creation of any specific\ntask-related management commad;\n\na derived management command is only responsible for:\n\n- defining suitable command-line parameters\n- selecting the specific Task class and job function\n\nfor example:\n\n.. code:: python\n\n    from django_task.task_command import TaskCommand\n\n\n    class Command(TaskCommand):\n\n        def add_arguments(self, parser):\n            super(Command, self).add_arguments(parser)\n            parser.add_argument('num_beans', type=int)\n\n        def handle(self, *args, **options):\n            from tasks.models import CountBeansTask\n            self.run_task(CountBeansTask, **options)\n\n\nJavascript helpers\n------------------\n\nA few utility views have been supplied for interacting with tasks from javascript.\n\ntasks_info_api\n..............\n\nRetrieve informations about a list of existing tasks\n\nSample usage:\n\n.. code:: javascript\n\n    var tasks = [{\n        id: 'c50bf040-a886-4aed-bf41-4ae794db0941',\n        model: 'tasks.devicetesttask'\n    }, {\n        id: 'e567c651-c8d5-4dc7-9cbf-860988f55022',\n        model: 'tasks.devicetesttask'\n    }];\n\n    $.ajax({\n        url: '/django_task/info/',\n        data: JSON.stringify(tasks),\n        cache: false,\n        type: 'post',\n        dataType: 'json',\n        headers: {'X-CSRFToken': getCookie('csrftoken')}\n    }).done(function(data) {\n        console.log('data: %o', data);\n    });\n\nResult::\n\n    [\n      {\n        \"id\": \"c50bf040-a886-4aed-bf41-4ae794db0941\",\n        \"created_on\": \"2018-10-11T17:45:14.399491+00:00\",\n        \"created_on_display\": \"10/11/2018 19:45:14\",\n        \"created_by\": \"4f943f0b-f5a3-4fd8-bb2e-451d2be107e2\",\n        \"started_on\": null,\n        \"started_on_display\": \"\",\n        \"completed_on\": null,\n        \"completed_on_display\": \"\",\n        \"job_id\": \"\",\n        \"status\": \"PENDING\",\n        \"status_display\": \"<div class=\\\"task_status\\\" data-task-model=\\\"tasks.devicetesttask\\\" data-task-id=\\\"c50bf040-a886-4aed-bf41-4ae794db0941\\\" data-task-status=\\\"PENDING\\\" data-task-complete=\\\"0\\\">PENDING</div>\",\n        \"log_link_display\": \"\",\n        \"failure_reason\": \"\",\n        \"progress\": null,\n        \"progress_display\": \"-\",\n        \"completed\": false,\n        \"duration\": null,\n        \"duration_display\": \"\",\n        \"extra_fields\": {\n        }\n      },\n      ...\n    ]\n\ntask_add_api\n............\n\nCreate and run a new task based on specified parameters\n\nExpected parameters:\n\n- 'task-model' = \"<app_name>.<model_name>\"\n- ... task parameters ...\n\nReturns the id of the new task.\n\nSample usage:\n\n.. code:: javascript\n\n    function exportAcquisition(object_id) {\n        if (confirm('Do you want to export data ?')) {\n\n            var url = '/django_task/add/';\n            var data = JSON.stringify({\n                'task-model': 'tasks.exportdatatask',\n                'source': 'backend.acquisition',\n                'object_id': object_id\n            });\n\n            $.ajax({\n                type: 'POST',\n                url: url,\n                data: data,\n                cache: false,\n                crossDomain: true,\n                dataType: 'json',\n                headers: {'X-CSRFToken': getCookie('csrftoken')}\n            }).done(function(data) {\n                console.log('data: %o', data);\n                alert('New task created: \"' + data.task_id + '\"');\n            }).fail(function(jqXHR, textStatus, errorThrown) {\n                console.log('ERROR: ' + jqXHR.responseText);\n                alert(errorThrown);\n            });\n        }\n        return;\n    }\n\ntask_run_api\n............\n\nSchedule execution of specified task.\n\nReturns job.id or throws error (400).\n\nParameters:\n\n- app_label\n- model_name\n- pk\n- is_async (0 or 1, default=1)\n\nSample usage:\n\n.. code:: javascript\n\n    var task_id = 'c50bf040-a886-4aed-bf41-4ae794db0941';\n\n    $.ajax({\n        url: sprintf('/django_task/tasks/devicetesttask/%s/run/', task_id),\n        cache: false,\n        type: 'get'\n    }).done(function(data) {\n        console.log('data: %o', data);\n    }).fail(function(jqXHR, textStatus, errorThrown) {\n        display_server_error(jqXHR.responseText);\n    });\n\n\nUpdating the tasks listing dynamically in the frontend\n------------------------------------------------------\n\nThe list of Tasks in the admin changelist_view is automatically updated to refresh\nthe progess and status of each running Task.\n\nYou can obtain the same result in the frontend by calling the **DjangoTask.update_tasks()**\njavascript helper, provided you're listing the tasks in an HTML table with a similar layout.\n\nThe simplest way to do it is to use the **render_task_column_names_as_table_row**\nand **render_task_as_table_row** template tags.\n\nExample:\n\n.. code:: html\n\n    {% load i18n django_task_tags %}\n\n    {% if not export_data_tasks %}\n        <div>{% trans 'No recent jobs available' %}</div>\n    {% else %}\n        <table id=\"export_data_tasks\" class=\"table table-striped\">\n            {% with excluded='created_by,created_on,job_id,log_text,mode' %}\n            <thead>\n                <tr>\n                    {{ export_data_tasks.0|render_task_column_names_as_table_row:excluded }}\n                </tr>\n            </thead>\n            <tbody>\n                {% for task in export_data_tasks %}\n                <tr>\n                    {{ task|render_task_as_table_row:excluded }}\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n        {% endwith %}\n    {% endif %}\n\n\n    {% block extrajs %}\n        {{ block.super }}\n        <script type=\"text/javascript\" src=\"{% static 'js/django_task.js' %}\"></script>\n        <script>\n            $(document).ready(function() {\n                DjangoTask.update_tasks(1000, '#export_data_tasks');\n            });\n        </script>\n    {% endblock extrajs %}\n\nFor each fieldname included in the table rows, **render_task_as_table_row** will\ncheck if a FIELDNAME_display() method is available in the Task model, and in case\nwill use it for rendering the field value; otherwise, the field value will be simply\nconverted into a string.\n\nIf the specific derived Task model defines some additional fields (unknown to the base Task model)\nwhich need to be updated regularly by **DjangoTask.update_tasks()**, include them as \"extra_fields\"\nas follows:\n\n.. code:: python\n\n    def as_dict(self):\n        data = super(ExportDataTask, self).as_dict()\n        data['extra_fields'] = {\n            'result_display': mark_safe(self.result_display())\n        }\n        return data\n\n.. image:: example/etc/screenshot_003.png\n\nExample Project for django-task\n-------------------------------\n\nAs example project is provided as a convenience feature to allow potential users\nto try the app straight from the app repo without having to create a django project.\n\nPlease follow the instructions detailed in file `example/README.rst <example/README.rst>`_.\n\n\nCredits\n-------\n\nReferences:\n\n- `A simple app that provides django integration for RQ (Redis Queue) <https://github.com/ui/django-rq>`_\n- `Asynchronous tasks in django with django-rq <https://spapas.github.io/2015/01/27/async-tasks-with-django-rq/>`_\n- `django-rq redux: advanced techniques and tools <https://spapas.github.io/2015/09/01/django-rq-redux/>`_\n- `Benchmark: Shared vs. Dedicated Redis Instances <https://redislabs.com/blog/benchmark-shared-vs-dedicated-redis-instances/>`_\n- `Django tasty salad - DOs and DON'Ts using Celery by Roberto Rosario <https://speakerdeck.com/siloraptor/django-tasty-salad-dos-and-donts-using-celery>`_\n\n\n\n\n\n=======\nHistory\n=======\n\n1.5.1\n-----\n* Moved required imports inside Job.run() so it can be more easily replicated for any needed customization\n* Simpler queues settings\n* Revamped unit testing\n* Cleanup\n\n1.5.0\n-----\n* Support for updating the tasks listing dynamically in the frontend\n* Example provided for task_add_api() javascript helper\n* POSSIBLY INCOMPATIBLE CHANGE: duration and duration_display are now methods rather then properties\n* it traslation for UI messages\n\n1.4.7\n-----\n* Added optional \"created_by\" parameter to TaskCommand utility\n\n1.4.6\n-----\n* replace namespace \"django.jQuery\" with more generic \"jQuery\" in js helpers\n* update example project\n* unit tests added to \"tasks\" app in example project\n\n1.4.5\n-----\n* Quickstart revised in README\n\n1.4.4\n-----\n* Task.get_logger() is now publicly available\n\n1.4.3\n-----\n* restore compatibility with Django 1.11; upgrade rq and django-rq requirements\n\n1.4.2\n-----\n* tasks_info_api() optimized to use a single query\n\n1.4.1\n-----\n* Cleanup: remove redundant REJECTED status\n\n1.4.0\n-----\n* Update requirements (Django >= 2.0, django-rq>=2.0)\n\n1.3.10\n------\n* Use exceptions.TaskError class when raising specific exceptions\n\nv1.3.9\n------\n* removed forgotten pdb.set_trace() in revoke_pending_tasks()\n\nv1.3.8\n------\n* cleanup\n\nv1.3.7\n------\n* cleanup\n\nv1.3.6\n------\n* log queue name\n\nv1.3.5\n------\n* Readme updated\n\nv1.3.4\n------\n* javascript helper views\n* fix Task.set_progress(0)\n\nv1.3.3\n------\n* make sure fields are unique in TaskAdmin fieldsets\n\nv1.3.1\n------\n* unit tests verified with Python 2.7/3.6/3.7 and Django 1.10/2.0\n\nv1.3.0\n------\n* cleanup\n* classify as production/stable\n\nv1.2.5\n------\n* Tested with Django 2.0 and Python 3.7\n* Rename `async` to `is_async` to support Python 3.7\n* DJANGOTASK_REJECT_IF_NO_WORKER_ACTIVE_FOR_QUEUE app setting added\n* example cleanup\n\nv1.2.4\n------\n* API to create and run task via ajax\n\nv1.2.3\n------\n* TaskAdmin: postpone autorun to response_add() to have M2M task parameters (if any) ready\n* Task.clone() supports M2M parameters\n\nv1.2.2\n------\n* property to change verbosity dinamically\n\nv1.2.1\n------\n* util revoke_pending_tasks() added\n\nv1.2.0\n------\n* DJANGOTASK_JOB_TRACE_ENABLED setting added to enable low level tracing in Job.run()\n* Added missing import in utils.py\n\nv1.1.3\n------\n* cleanup: remove get_child() method being Task an abstract class\n* fix: skip Task model (being abstract) in dump_all_tasks and delete_all_tasks management commands\n* generic get_model_from_id() helper\n* Job.on_complete() callback\n\nv1.1.2\n------\n* provide list of pending and completed task status\n\nv1.1.0\n------\n* INCOMPATIBLE CHANGE: Make model Task abstract for better listing performances\n* redundant migrations removed\n* convert request.body to string for Python3\n* pretty print task params in log when task completes\n\nv0.3.8\n------\n* return verbose name as description\n\nv0.3.7\n------\n* description added to Task model\n\nv0.3.6\n------\n* More fixes\n\nv0.3.5\n------\n* log to field fix\n\nv0.3.4\n------\n* log quickview + view\n\nv0.3.3\n------\n* Optionally log to either file or text field\n* Management commands to dump and delete all tasks\n\nv0.3.2\n------\n* search by task.id and task.job_id\n\nv0.3.1\n------\n* Keep track of task mode (sync or async)\n\nv0.3.0\n------\n* new class Job provided to share task-related logic among job funcs\n\nv0.2.0\n------\n* fixes for django 2.x\n\nv0.1.15\n-------\n* hack for  prepopulated_fields\n\nv0.1.14\n-------\n* css fix\n\nv0.1.13\n-------\n* minor fixes\n\nv0.1.12\n-------\n* Deferred Task retrieval to avoid job vs. Task race condition\n* Improved Readme\n\nv0.1.11\n-------\n* superuser can view all tasks, while other users have access to their own tasks only\n* js fix\n\nv0.1.10\n-------\n* prevent task.failure_reason overflow\n\nv0.1.9\n------\n* app settings\n\nv0.1.8\n------\n* always start job from task.run() to prevent any possible race condition\n* task.run(async) can now accept async=False\n\nv0.1.7\n------\n* javascript: use POST to retrieve tasks state for UI update to prevent URL length limit exceed\n\nv0.1.6\n------\n* Improved ui for TaskAdmin\n* Fix unicode literals for Python3\n\nv0.1.5\n------\n* fixes for Django 1.10\n* send_email management command example added\n\nv0.1.4\n------\n* Fix OneToOneRel import for Django < 1.9\n\nv0.1.3\n------\n* Polymorphic behaviour or Task.get_child() restored\n\nv0.1.2\n------\n* TaskCommand.run_task() renamed as TaskCommand.run_job()\n* New TaskCommand.run_task() creates a Task, then runs it;\n  this guarantees that something is traced even when background job will fail\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/morlandi/django-task",
    "keywords": "django-task",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-task",
    "package_url": "https://pypi.org/project/django-task/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-task/",
    "project_urls": {
      "Homepage": "https://github.com/morlandi/django-task"
    },
    "release_url": "https://pypi.org/project/django-task/1.5.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django app to run new background tasks from either admin or cron, and inspect task history from admin; based on django-rq",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16905658,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0c67c4167cdc8f09a00b7174707db6d5989a3aa4aea3ff57ac7de3677bc28e7",
        "md5": "f45918868cbf79bafaa60639fb4f3bde",
        "sha256": "af3599af7f94c60f3d1b77577608c5b0fc8e236399845d7ce12ad09f30e63038"
      },
      "downloads": -1,
      "filename": "django_task-1.5.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f45918868cbf79bafaa60639fb4f3bde",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 42864,
      "upload_time": "2021-04-26T15:41:28",
      "upload_time_iso_8601": "2021-04-26T15:41:28.510573Z",
      "url": "https://files.pythonhosted.org/packages/d0/c6/7c4167cdc8f09a00b7174707db6d5989a3aa4aea3ff57ac7de3677bc28e7/django_task-1.5.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}