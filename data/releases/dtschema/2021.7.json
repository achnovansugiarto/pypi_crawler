{
  "info": {
    "author": "Rob Herring",
    "author_email": "robh@kernel.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Tooling for devicetree validation using YAML and jsonschema\n\nThis repository contains test code for devicetree schema validation using the\n[json-schema](http://json-schema.org/documentation.html) vocabulary. Schema\nfiles are written in YAML (a superset of JSON), and operate on the YAML\nencoding of Devicetree data. Devicetree data must be transcoded from DTS to\nYAML before being used by this tool.\n\n## Data Model\n\nTo understand how validation works, it is important to understand how schema data is organized and used.\nIf you're reading this, I assume you're already familiar with Devicetree and the .dts file format.\n\nIn this repository you will find three kinds of files; *YAML Devicetrees*, *Schemas* and *Meta-Schemas*.\n\n### *YAML Devicetrees*\n\nFound under `./test`\n\n*YAML Devicetrees* files are regular .dts files transcoded into a YAML\nrepresentation.\nThere is no special information in these files.\nThey are used as test cases against the validation tooling.\n\n### *Devicetree Schemas*\n\nFound under `./schemas`\n\n*Devicetree Schemas* describe the format of devicetree data.\nThe raw Devicetree file format is very open ended and doesn't restrict how\ndata is encoded.\nHence, it is easy to make mistakes when writing a Devicetree.\nSchema files impose constraints on what data can be put into a devicetree.\nAs the foundation, a single core schema describes all the common property types\nthat every devicetree node must match.\ne.g. In every node the 'compatible' property must be an array of strings.\nHowever, most devicetree data is heterogeneous as each device binding requires\na different set of data, therefore multiple schema files are used to capture the\ndata format of an entire devicetree.\n\nWhen validating, the tool will load all the schema files it can find and then\niterate over all the nodes of the devicetree.\nFor each node, the tool will determine which schema(s) are applicable and make sure\nthe node data matches the schema constraints.\nNodes failing a schema test will emit an error.\nNodes that don't match any schema will emit a warning.\n\nAs a developer, you would write a devicetree schema file for each new\ndevice binding that you create and add it to the `./schemas` directory.\n\nSchema files also have the dual purpose of documenting a binding.\nWhen you define a new binding, you only have to create one file that contains\nboth the machine-verifiable data format and the documentation.\nDocumentation generation tools are being written to extract documentation\nfrom a schema file and emit a format that can be included in the devicetree\nspecification documents.\n\nDevicetree Schema files are normal YAML files using the jsonschema vocabulary.\n\nThe Devicetree Schema files are simplified to make them more compact.\n\nThe default for arrays in json-schema is they are variable sized. This can be\nrestricted by defining 'minItems', 'maxItems', and 'additionalItems'. For\nDeviceTree Schemas, a fixed size is desired in most cases, so these properties\nare added based on the size of 'items' list.\n\nThe YAML DeviceTree format also makes all string values an array and scalar\nvalues a matrix (in order to define groupings) even when only a single value\nis present. Single entries in schemas are fixed up to match this encoding.\n\n### *Devicetree Meta-Schemas*\n\nFound in `./meta-schemas`\n\n*Devicetree Meta-Schemas* describe the data format of Devicetree Schema files.\nThe Meta-schemas make sure all the binding schemas are in the correct format\nand the tool will emit an error if the format is incorrect.\n\nAs a developer you normally will not need to write metaschema files.\n\nDevicetree Meta-Schema files are normal YAML files using the jsonschema vocabulary.\n\n## Usage\nThere are several tools available in the *tools/* directory.\n\ntools/dt-doc-validate\nThis tool takes a schema file(s) or directory of schema files and validates\nthem against the DT meta-schema.\n\ntools/dt-mk-schema\nThis tool takes user provided schema file(s) plus the core schema files in this\nrepo, removes everything not needed for validation, applies fix-ups to the\nschemas, and outputs a single file with the processed schema. This step is\ndone separately to speed up subsequent validation of YAML Devicetrees.\n\ntools/dt-validate\nThis tool takes user provided YAML Devicetree(s) and either a schema directory\nor pre-processed schema file and validates the YAML Devicetree against the schema.\n\n\n## Installing\nThe project and its dependencies can be installed with pip directly from git:\n\n```\npip3 install git+https://github.com/devicetree-org/dt-schema.git@master\n```\n\nAll executables will be installed. Ensure ~/.local/bin is in the PATH.\n\n\nFor development, clone the git repository manually and run pip on local tree::\n\n```\ngit clone https://github.com/devicetree-org/dt-schema.git\ncd dt-schema\npip3 install -e .\n```\n\n## Dependencies\nNote: The above installation instructions handle all of the dependencies\nautomatically.\n\nThis code depends on Python 3 with the ruamel.yaml, rfc3987, and jsonschema\nlibraries.\n\nOn Debian/Ubuntu, the dependencies can be installed with apt and/or pip. The\nrfc3987 module is not packaged, so pip must be used:\n\n```\napt-get install python3 python-ruamel.yaml\npip3 install rfc3987\n```\n\n\n### jsonschema\nThis code depends on at least version 3.0.0 of the\n[Python jsonschema](https://github.com/Julian/jsonschema/tree/master)\nlibrary for Draft 6 support.\n\nThe module can be installed directly from github with pip:\n\n```\npip3 install git+https://github.com/Julian/jsonschema.git\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/devicetree-org/dt-schema",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtschema",
    "package_url": "https://pypi.org/project/dtschema/",
    "platform": "",
    "project_url": "https://pypi.org/project/dtschema/",
    "project_urls": {
      "Homepage": "https://github.com/devicetree-org/dt-schema"
    },
    "release_url": "https://pypi.org/project/dtschema/2021.7/",
    "requires_dist": [
      "ruamel.yaml (>0.15.69)",
      "jsonschema (>=3.0.1)",
      "rfc3987"
    ],
    "requires_python": ">=3.5",
    "summary": "DeviceTree validation schema and tools",
    "version": "2021.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16642301,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e462bc2f0ef197ba8784e836df535a229aafcbe71a09069155264f2fc3ab40e4",
        "md5": "640284d57be98caf475c60820f0f32a2",
        "sha256": "bfc68f9afd9890b095048d221e06e1d6e4d830955dae2f53f5d852bffbdcf4fc"
      },
      "downloads": -1,
      "filename": "dtschema-2021.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "640284d57be98caf475c60820f0f32a2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 58054,
      "upload_time": "2021-07-26T22:10:33",
      "upload_time_iso_8601": "2021-07-26T22:10:33.080534Z",
      "url": "https://files.pythonhosted.org/packages/e4/62/bc2f0ef197ba8784e836df535a229aafcbe71a09069155264f2fc3ab40e4/dtschema-2021.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32d3f4d924d1ea49c76e58d6139e27b9b44e84e573689862286349e576d02d12",
        "md5": "bb9fa611eee42683977b7b043224f54b",
        "sha256": "d75782458df3a6db17238900233de32eb4ce3788f6413cffc46eef814832540d"
      },
      "downloads": -1,
      "filename": "dtschema-2021.7.tar.gz",
      "has_sig": false,
      "md5_digest": "bb9fa611eee42683977b7b043224f54b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 65535,
      "upload_time": "2021-07-26T22:10:33",
      "upload_time_iso_8601": "2021-07-26T22:10:33.936751Z",
      "url": "https://files.pythonhosted.org/packages/32/d3/f4d924d1ea49c76e58d6139e27b9b44e84e573689862286349e576d02d12/dtschema-2021.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}