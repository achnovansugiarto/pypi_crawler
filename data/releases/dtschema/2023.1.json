{
  "info": {
    "author": "Rob Herring",
    "author_email": "robh@kernel.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Devicetree Schema Tools\n\nThe dtschema module contains tools and schema data for Devicetree\nschema validation using the\n[json-schema](http://json-schema.org/documentation.html) vocabulary.\nThe tools validate Devicetree files using DT binding schema files. The\ntools also validate the DT binding schema files. Schema files are\nwritten in a JSON compatible subset of YAML to be both human and machine\nreadable.\n\n## Data Model\n\nTo understand how validation works, it is important to understand how\nschema data is organized and used. If you're reading this, I assume\nyou're already familiar with Devicetree and the .dts file format.\n\nIn this repository you will find 2 kinds of data files; *Schemas* and\n*Meta-Schemas*.\n\n### *Devicetree Schemas*\n\nFound under `./dtschema/schemas`\n\n*Devicetree Schemas* describe the format of devicetree data.\nThe raw Devicetree file format is very open ended and doesn't restrict how\ndata is encoded.Hence, it is easy to make mistakes when writing a\nDevicetree. Schema files impose the constraints on what data can be put\ninto a Devicetree.\n\nThis repository contains the 'core' schemas which consists of DT\nproperties defined within the DT Specification and common bindings such\nas the GPIO, clock, and PHY bindings.\n\nThis repository does not contain device specific bindings. Those are\ncurrently maintained within the Linux kernel tree alongside Devicetree\nfiles (.dts).\n\nWhen validating, the tool will load all the schema files it can find and then\niterate over all the nodes of the Devicetree.\nFor each node, the tool will determine which schema(s) are applicable and make sure\nthe node data matches the schema constraints.\nNodes failing a schema test will emit an error.\nNodes that don't match any schema can emit a warning.\n\nAs a developer, you would write a Devicetree schema file for each new\ndevice binding that you create and add it to the `./schemas` directory.\n\nSchema files also have the dual purpose of documenting a binding.\nWhen you define a new binding, you only have to create one file that contains\nboth the machine-verifiable data format and the documentation.\n\nDevicetree Schema files are normal YAML files using the jsonschema vocabulary.\n\nThe Devicetree Schema files are simplified to make them more compact.\n\nThe default for arrays in json-schema is they are variable sized. This can be\nrestricted by defining 'minItems', 'maxItems', and 'additionalItems'. For\nDeviceTree Schemas, a fixed size is desired in most cases, so these properties\nare added based on the size of 'items' list.\n\n### *Devicetree Meta-Schemas*\n\nFound in `./dtschema/meta-schemas`\n\n*Devicetree Meta-Schemas* describe the data format of Devicetree Schema files.\nThe Meta-schemas make sure all the binding schemas are in the correct format\nand the tool will emit an error if the format is incorrect. json-schema\nby default is very relaxed in terms of what is allowed in schemas. Unknown\nkeywords are silently ignored as an example. The DT Meta-schemas are designed\nto limit what is allowed and catch common errors in writing schemas.\n\nAs a developer you normally will not need to write metaschema files.\n\nDevicetree Meta-Schema files are normal YAML files using the jsonschema vocabulary.\n\n## Usage\nThere are several tools available in the *tools/* directory.\n\n`tools/dt-doc-validate`\nThis tool takes a schema file(s) or directory of schema files and validates\nthem against the DT meta-schema.\n\nExample:\n```\ndt-doc-validate -u test/schemas test/schemas/good-example.yaml\n```\n\n`tools/dt-mk-schema`\nThis tool takes user-provided schema file(s) plus the core schema files in this\nrepo, removes everything not needed for validation, applies fix-ups to the\nschemas, and outputs a single file with the processed schema. This step\nis optional and can be done separately to speed up subsequent validation\nof Devicetrees.\n\nExample:\n```\ndt-mk-schema -j test/schemas/ > processed-schema.json\n```\n\n`tools/dt-validate`\nThis tool takes user-provided Devicetree(s) and either a schema directory\nor a pre-processed schema file from `dt-mk-schema`, and then validates the\nDevicetree against the schema.\n\nExample:\n```\ndtc -O dtb -o device.dtb test/device.dts\ndt-validate -s processed-schema.json device.dtb\n```\n\n`tools/dt-check-compatible`\nThis tool tests whether a list of compatible strings are found or not in\nthe schemas. By default, a compatible string is printed when it matches\none (or a pattern) in the schemas.\n\nExample:\n```\ndt-check-compatible -s processed-schema.json vendor,a-compatible\n```\n\n## Installing\nThe project and its dependencies can be installed with pip:\n\n```\npip3 install dtschema\n```\n\nor directly from git:\n\n```\npip3 install git+https://github.com/devicetree-org/dt-schema.git@main\n```\n\nAll executables will be installed. Ensure ~/.local/bin is in the PATH.\n\n\nFor development, clone the git repository manually and run pip on local tree::\n\n```\ngit clone https://github.com/devicetree-org/dt-schema.git\ncd dt-schema\npip3 install -e .\n```\n\n## Dependencies\nNote: The above installation instructions handle all of the dependencies\nautomatically.\n\nThis code depends on Python 3 with the pylibfdt, ruamel.yaml, rfc3987, and jsonschema\nlibraries. Installing pylibfdt depends on the 'swig' program.\n\nOn Debian/Ubuntu, the dependencies can be installed with apt and/or pip. The\nrfc3987 module is not packaged, so pip must be used:\n\n```\nsudo apt install swig\nsudo apt install python3 python3-ruamel.yaml\npip3 install rfc3987\n```\n\n\n### jsonschema\nThis code depends on at least version 4.1.2 of the\n[Python jsonschema](https://github.com/Julian/jsonschema/tree/master)\nlibrary for Draft 2019-09 support.\n\nThe module can be installed directly from github with pip:\n\n```\npip3 install git+https://github.com/Julian/jsonschema.git\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/devicetree-org/dt-schema",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtschema",
    "package_url": "https://pypi.org/project/dtschema/",
    "platform": null,
    "project_url": "https://pypi.org/project/dtschema/",
    "project_urls": {
      "Homepage": "https://github.com/devicetree-org/dt-schema"
    },
    "release_url": "https://pypi.org/project/dtschema/2023.1/",
    "requires_dist": [
      "ruamel.yaml (>0.15.69)",
      "jsonschema (>=4.1.2)",
      "rfc3987",
      "pylibfdt"
    ],
    "requires_python": ">=3.5",
    "summary": "DeviceTree validation schema and tools",
    "version": "2023.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16642301,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57025ef6ed26103ed985e5512413c7431f8bc9816a888e8383d03f237d8953b4",
        "md5": "1cfbf68dd06437819baf441c7416945d",
        "sha256": "32aed83d2c99a4e930b9f2cfc8486d48c6abe58d2bd1be9c7fcd6bd374b2b47e"
      },
      "downloads": -1,
      "filename": "dtschema-2023.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1cfbf68dd06437819baf441c7416945d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 85073,
      "upload_time": "2023-01-31T23:40:49",
      "upload_time_iso_8601": "2023-01-31T23:40:49.217916Z",
      "url": "https://files.pythonhosted.org/packages/57/02/5ef6ed26103ed985e5512413c7431f8bc9816a888e8383d03f237d8953b4/dtschema-2023.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64572858f9539f81671e53a3115d2bbc194627439271aab1cef53ebd9ce4544a",
        "md5": "909d7725859b6a2976f51d850b50855e",
        "sha256": "8fc8c269e4c57e9d008af7b32cd33b77afd4ea1ac9552bcfa96b41b9e0c52586"
      },
      "downloads": -1,
      "filename": "dtschema-2023.1.tar.gz",
      "has_sig": false,
      "md5_digest": "909d7725859b6a2976f51d850b50855e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 65480,
      "upload_time": "2023-01-31T23:40:50",
      "upload_time_iso_8601": "2023-01-31T23:40:50.595472Z",
      "url": "https://files.pythonhosted.org/packages/64/57/2858f9539f81671e53a3115d2bbc194627439271aab1cef53ebd9ce4544a/dtschema-2023.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}