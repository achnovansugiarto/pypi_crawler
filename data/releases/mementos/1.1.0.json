{
  "info": {
    "author": "Jonathan Eunice",
    "author_email": "jonathan.eunice@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "| |travisci| |version| |downloads| |supported-versions| |supported-implementations| |wheel| |coverage|\n\n.. |travisci| image:: https://travis-ci.org/jonathaneunice/mementos.svg?branch=master\n    :alt: Travis CI build status\n    :target: https://travis-ci.org/jonathaneunice/mementos\n\n.. |version| image:: http://img.shields.io/pypi/v/mementos.svg?style=flat\n    :alt: PyPI Package latest release\n    :target: https://pypi.python.org/pypi/mementos\n\n.. |downloads| image:: http://img.shields.io/pypi/dm/mementos.svg?style=flat\n    :alt: PyPI Package monthly downloads\n    :target: https://pypi.python.org/pypi/mementos\n\n.. |supported-versions| image:: https://pypip.in/py_versions/mementos/badge.svg?style=flat\n    :alt: Supported versions\n    :target: https://pypi.python.org/pypi/mementos\n\n.. |supported-implementations| image:: https://pypip.in/implementation/mementos/badge.svg?style=flat\n    :alt: Supported implementations\n    :target: https://pypi.python.org/pypi/mementos\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/mementos.svg\n    :alt: Wheel packaging support\n    :target: https://pypi.python.org/pypi/mementos\n\n.. |coverage| image:: https://img.shields.io/badge/test_coverage-100%25-6600CC.svg\n    :alt: Test line coverage\n    :target: https://pypi.python.org/pypi/mementos\n\nA quick way to make Python classes automatically memoize (a.k.a. cache) their\ninstances based on the arguments with which they are instantiated (i.e. args to\ntheir\n``__init__``).\n\nIt's a simple way to avoid repetitively creating\nexpensive-to-create objects, and to make sure objects that have a natural\n'identity' are created only once. If you want to be fancy, ``mementos``\nimplements the `Multiton <https://en.wikipedia.org/wiki/Multiton_pattern>`_\nsoftware pattern.\n\nUsage\n=====\n\nSay you have a class ``Thing`` that requires expensive computation to create, or\nthat should be created only once. Easy peasy::\n\n    from mementos import MementoMetaclass, with_metaclass\n\n    class Thing(with_metaclass(MementoMetaclass, object)):\n\n        def __init__(self, name):\n            self.name = name\n\n        ...\n\nThen ``Thing`` objects will be memoized::\n\n    t1 = Thing(\"one\")\n    t2 = Thing(\"one\")\n    assert t1 is t2    # same instantiation args => same object\n\nPython 2 vs. Python 3\n=====================\n\nPython 2 and 3 have different forms for specifying metaclasses.\nIn Python 2::\n\n    from mementos import MementoMetaclass\n\n    class Thing(object):\n\n        __metaclass__ = MementoMetaclass  # now I'm memoized!\n\n        ...\n\nWhereas Python 3 uses::\n\n    class Thing3(object, metaclass=MementoMetaclass):\n\n        ...\n\n``mementos`` supports either of these. But Python 2 and Python 3 don't\nrecognize each other's syntax for\nmetaclass specification, so straightforward code for one won't even compile for\nthe other. The ``with_metaclass()`` function shown above is the way to go\nfor cross-version compatibility. It's very similar to that found in the\n``six`` cross-version compatibility\nmodule.\n\nCareful with Call Signatures\n============================\n\n``MementoMetaclass`` caches on call signature, which can vary greatly in Python,\neven for logically identical calls. This is especially true if kwargs are used.\nE.g. ``def func(a, b=2): pass`` can be called ``func(1)``, ``func(1, 2)``,\n``func(a=1)``, ``func(1, b=2)``, or ``func(a=2, b=2)``. All of these resolve to\nthe same logical call--and this is just for two parameters! If there is more\nthan one keyword, they can be arbitrarily ordered, creating *many* logically\nidentical permutations.\n\nSo if you instantiate an object once, then again with a logically identical call\nbut using a different calling structure/signature, the object won't be created\nand cached just once--it will be created and cached multiple times.::\n\n    o1 = Thing(\"lovely\")\n    o2 = Thing(name=\"lovely\")\n    assert o1 is not o2     # because the call signature is different\n\nThis may degrade performance, and can also create errors, if you're counting on\n``mementos`` to create just one object. So don't do that. Use a consistent\ncalling style, and it won't be a problem.\n\nIn most cases, this isn't an issue, because objects tend to be instantiated with\na limited number of parameters, and you can take care that you instantiate them\nwith parallel call signatures. Since this works 99% of the time and has a simple\nimplementation, it's worth the price of this inelegance.\n\nPartial Signatures\n==================\n\nIf you want only part of the initialization-time call signature (i.e. arguments\nto ``__init__``) to define an object's identity/cache key, there are two\napproaches. One is to use ``MementoMetaclass`` and design ``__init__`` without\nsuperfluous attributes, then create one or more secondary methods to add/set\nuseful-but-not-essential data. E.g.::\n\n    class OtherThing(with_metaclass(MementoMetaclass, object)):\n\n        def __init__(self, name):\n            self.name = name\n            self.color = None   # unset for now\n            self.weight = None\n\n        def set(self, color=None, weight=None):\n            self.color = color or self.color\n            self.weight = weight or self.weight\n            return self\n\n    ot1 = OtherThing(\"one\").set(color='blue')\n    ot2 = OtherThing(\"one\").set(weight='light')\n    assert ot1 is ot2\n    assert ot1.color == ot2.color == 'blue'\n    assert ot1.weight == ot2.weight == 'light'\n\nOr you can just define your own memoizing metaclass, using the factory function\ndescribed below.\n\nVisiting the Factory\n====================\n\nThe first iteration of ``mementos`` defined a single metaclass. It's since been\nreimplemented as a parameterized meta-metaclass. Cool, huh? That basically means\nthat it defines a function, ``memento_factory()`` that, given a metaclass name\nand a function defining how cache keys are constructed, returns a corresponding\nmetaclass. ``MementoMetaclass`` is the only metaclass that the module\npre-defines, but it's easy to define your own memoizing metaclass.::\n\n    from mementos import memento_factory, with_metaclass\n\n    IdTracker = memento_factory('IdTracker',\n                                lambda cls, args, kwargs: (cls, id(args[0])) )\n\n    class MyTracker(with_metaclass(IdTracker, object)):\n        ...\n\n        # object identity is the object id of first argument to __init__\n        # (and there must be one, else the args[0] reference => IndexError)\n\nThe first argument to ``memento_factory()`` is the name of the metaclass being\ndefined. The second is a callable (e.g. lambda expression or function object)\nthat takes three arguments: a class object, an argument ``list``, and a keyword\narg ``dict``. Note that there is no ``*`` or ``**`` magic--args passed to the\nkey function have already been resolved into basic data structures.\n\nThe callable must return a globally-unique, hashable key for an object. This key\nwill be stored in the ``_memento_cache``, which is a simple ``dict``.\n\nWhen various arguments are used as the cache key/object identity, you may use a\n``tuple`` that includes the class and arguments you want to key off of. This can\nalso help debugging, should you need to examine the ``_memento_cache`` cache\ndirectly. But in cases like the ``IdTracker`` above, it's not mandatory that you\nkeep extra information around. The raw ``id(args[0])`` integer value would\nsuffice, as would a constructed string or other immutable, hashable value.\n\nIn cases where arguments are very flexible, or involve flexible data types,\na high-powered hashing function such as that provided by\n`SuperHash <http://pypi.python.org/pypi/SuperHash>`_ might come in handy.\nE.g.::\n\n    from superhash import superhash\n\n    SuperHashMeta = memento_factory('SuperHashMeta',\n                                lambda cls, args, kwargs: (cls, superhash(args)) )\n\nFor the 1% edge-cases where multiple call variations must be\nconclusively resolved to a unique canonical signature, that can be done on a\ncustom basis (based on the specific args). Or in Python 2.7 and 3.x, the\n``inspect`` module's ``getcallargs()`` function can be used to create a generic\n\"call fingerprint\" that can be used as a key. (See the tests for example code.)\n\nNotes\n=====\n\n* Version 1.1 initiates automatic measurement of test coverage. Line\n  coverage is 100%. *Hooah!*\n\n* See ``CHANGES.rst`` for the extended Change Log.\n\n* ``mementos`` is not to be confused with `memento\n  <http://pypi.python.org/pypi/memento>`_, which does something completely\n  different.\n\n* ``mementos`` was originally derived from `an ActiveState recipe\n  <http://code.activestate.com/recipes/286132-memento-design-pattern-in-python/>`_\n  by Valentino Volonghi. While the current implementation quite different and\n  the scope much broader, the availability of that recipe was what enabled\n  this module and the growing list of modules that depend on it. This is what\n  open source evolution is all about. Thank you, Valentino!\n\n* It is safe to memoize multiple classes at the same time. They will all be\n  stored in the same cache, but their class is a part of the cache key, so the\n  values are distinct.\n\n* This implementation is *not* thread-safe, in and of itself. If you're in a\n  multi-threaded environment, consider wrapping object instantiation in a\n  lock.\n\n* Automated multi-version testing managed with `pytest\n  <http://pypi.python.org/pypi/pytest>`_, `pytest-cov\n  <http://pypi.python.org/pypi/pytest-cov>`_,\n  `coverage <https://pypi.python.org/pypi/coverage/4.0b1>`_\n  and `tox\n  <http://pypi.python.org/pypi/tox>`_. Continuous integration testing\n  with `Travis-CI <https://travis-ci.org/jonathaneunice/intspan>`_.\n  Packaging linting with `pyroma <https://pypi.python.org/pypi/pyroma>`_.\n\n  Successfully packaged for, and\n  tested against, all late-model versions of Python: 2.6, 2.7, 3.2, 3.3,\n  3.4, and 3.5 pre-release (3.5.0b3) as well as PyPy 2.6.0 (based on\n  2.7.9) and PyPy3 2.4.0 (based on 3.2.5). Test line coverage 100%.\n\n* The author, `Jonathan Eunice <mailto:jonathan.eunice@gmail.com>`_\n  or `@jeunice on Twitter <http://twitter.com/jeunice>`_ welcomes\n  your comments and suggestions.\n\nInstallation\n============\n\nTo install or upgrade to the latest version::\n\n    pip install -U mementos\n\nTo ``easy_install`` under a specific Python version (3.3 in this example)::\n\n    python3.3 -m easy_install --upgrade mementos\n\n(You may need to prefix these with ``sudo`` to authorize\ninstallation. In environments without super-user privileges, you may want to\nuse ``pip``'s ``--user`` option, to install only for a single user, rather\nthan system-wide.)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/jeunice/mementos",
    "keywords": null,
    "license": "Apache License 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mementos",
    "package_url": "https://pypi.org/project/mementos/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mementos/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/jeunice/mementos"
    },
    "release_url": "https://pypi.org/project/mementos/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Memoizing metaclass. Drop-dead simple way to create cached objects",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3926378,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41bcbf739414dc23a1ecde5518b32abbf0fe8c1f04695bc6a0210a1860dfe327",
        "md5": "3dfb28166a0d839c8d8be1fbaf62addd",
        "sha256": "739075f56f7644ddcd6ca3fe3034da0723040b5898cdc52a38c5fceebb0e49fd"
      },
      "downloads": -1,
      "filename": "mementos-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3dfb28166a0d839c8d8be1fbaf62addd",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 11213,
      "upload_time": "2015-08-18T14:23:43",
      "upload_time_iso_8601": "2015-08-18T14:23:43.137098Z",
      "url": "https://files.pythonhosted.org/packages/41/bc/bf739414dc23a1ecde5518b32abbf0fe8c1f04695bc6a0210a1860dfe327/mementos-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e25a56137c6ad4b2b14fce350817eafa3ad1d28f4a94d72dc64e9fe43b5ef28",
        "md5": "14d3958989405e39c919b74be1087655",
        "sha256": "38725d7c484d05c8c661f69037dbf65040bda49785f04c6b01c57fa3e2f89092"
      },
      "downloads": -1,
      "filename": "mementos-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "14d3958989405e39c919b74be1087655",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9993,
      "upload_time": "2015-08-18T14:23:38",
      "upload_time_iso_8601": "2015-08-18T14:23:38.838371Z",
      "url": "https://files.pythonhosted.org/packages/9e/25/a56137c6ad4b2b14fce350817eafa3ad1d28f4a94d72dc64e9fe43b5ef28/mementos-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bacf3371539929aa46ed909822b3b3427847492ce326406c80079a2e1c7afd6",
        "md5": "5143a57825c3414c65df76a3f5b4b905",
        "sha256": "116b716159a2831b740052dac071db7afbff4842826b3dcf1ef11f57197d3aff"
      },
      "downloads": -1,
      "filename": "mementos-1.1.0.zip",
      "has_sig": false,
      "md5_digest": "5143a57825c3414c65df76a3f5b4b905",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20624,
      "upload_time": "2015-08-18T14:23:35",
      "upload_time_iso_8601": "2015-08-18T14:23:35.154752Z",
      "url": "https://files.pythonhosted.org/packages/3b/ac/f3371539929aa46ed909822b3b3427847492ce326406c80079a2e1c7afd6/mementos-1.1.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}