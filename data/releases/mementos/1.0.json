{
  "info": {
    "author": "Jonathan Eunice",
    "author_email": "jonathan.eunice@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "A quick way to make Python classes automatically memoize (a.k.a. cache) their\ninstances based on the arguments they are instantiated with (i.e. args to\n``__init__``). It's a simple way to avoid repetitively creating\nexpensive-to-create objects, and to make sure objects that have a\nnatural 'identity'\nare created only once.\n\nUsage\n=====\n\nSay you have a class ``Thing`` that requires expensive computation to create, or\nthat should be created only once. In Python 2.x you can make that happen by\nadding one line to its definition::\n\n    from mementos import MementoMetaclass\n\n    class Thing(object):\n        \n        __metaclass__ = MementoMetaclass  # now I'm memoized!\n        \n        def __init__(self, name):\n            self.name = name\n        \n        ...\n\nThen ``Thing`` objects will be memoized::\n\n    t1 = Thing(\"one\")\n    t2 = Thing(\"one\")\n    assert t1 is t2    # same instantiation args => same object\n    \nPython 3\n========\n\n``mementos`` works in Python 3 just as in Python 2, but with different syntax.\nInstead of the double-underscore class attribute assignment, Python 3 uses a\nkeyword argument at class creation::\n\n    class Thing3(object, metaclass=MementoMetaclass):\n        ...\n       \nUnfortunately, Python 2 and Python 3 don't recognize each other's syntax for\nmetaclass specification, so straightforward code for one won't even compile for\nthe other. You can get around this by using the ``with_metaclass()`` function,\nwhich is similar to that found in the ``six`` cross-version compatibility\nmodule.::\n    \n    from mementos import MementoMetaclass, with_metaclass\n\n    class Thing23(with_metaclass(MementoMetaclass, object)):\n        ...\n\nCareful with Call Signatures\n============================\n\n``MementoMetaclass`` caches on call signature, which can vary if keyword args\nare used. E.g. ``def func(a, b=2)`` could be called ``func(1)``, ``func(1,2)``,\n``func(a=1)``, ``func(1, b=2)``, or ``func(a=2, b=2)``--and all resolve to the\nsame logical call. And this is just for two parameters! If there are more than\none ``kwarg``, they can be arbitrarily ordered, creating *many* logically\nidentical permuations. Thank Goodness Python doesn't allow kwargs to come before\npositional args, else there'd be even more ways to make the same call.\n    \nSo if you instantiate an object once, then again with a logically identical call\nbut using a different calling structure/signature, the object won't be created\nand cached just once--it will be created and cached multiple times.::\n    \n    o1 = Thing(\"lovely\")\n    o2 = Thing(name=\"lovely\")\n    assert o1 is not o2     # because the call signature is different\n        \nThis may degrade performance, and can also create errors, if you're counting on\n``mementos`` to create just one object. So don't do that. Use a consistent\ncalling style, and it won't be a problem.\n\nIn most cases, this isn't an issue, because objects tend to be instanitated with\na limited number of parameters, and you can take care that you instantiate them\nwith parallel call signatures. Since this works 99% of the time and has a simple\nimplementation, it's worth the price of this inelegance.\n    \nIf you want only part of the initialization-time call signature (i.e. arguments\nto ``__init__``) to define an object's identity/cache key, there are two\napproaches. One is to use ``MementoMetaclass`` and design ``__init__`` without\nsuperflous attributes, then create one or more secondary methods to add/set\nuseful-but-not-essential data. E.g.::\n\n    class OtherThing(with_metaclass(MementoMetaclass, object)):\n    \n        def __init__(self, name):\n            self.name = name\n            self.color = None   # unset for now\n            self.weight = None\n            \n        def set(self, color=None, weight=None):\n            self.color = color or self.color\n            self.weight = weight or self.weight\n            return self\n    \n    ot1 = OtherThing(\"one\").set(color='blue')\n    ot2 = OtherThing(\"one\").set(weight='light')\n    assert ot1 is ot2\n    assert ot1.color == ot2.color == 'blue'\n    assert ot1.weight == ot2.weight == 'light'\n\nOr you can just define your own memoizing metaclass, using the factory function\ndescribed below.\n\nVisiting the Factory\n====================\n\nThe first iteration of ``mementos`` defined a single metaclass. It's since been\nreimplemented as a parameterized meta-metaclass. Cool, huh? That basically means\nthat it defines a function, ``memento_factory()`` that, given a metaclass name\nand a function defining how cache keys are constructed, returns a corresponding\nmetaclass. ``MementoMetaclass`` is the only metaclass that the module\npre-defines, but it's easy to define your own memoizing metaclass.::\n\n    from mementos import memento_factory, with_metaclass\n    \n    IdTracker = memento_factory('IdTracker',\n                                lambda cls, args, kwargs: (cls, id(args[0])) )\n                                \n    class MyTracker(with_metaclass(IdTracker, object)):\n        ...\n        \n        # object idenity is the object id of first argument to __init__\n        # (and there must be one, else the args[0] reference => IndexError)\n\nThe first argument to ``memento_factory()`` is the name of the metaclass being\ndefined. The second is a callable (e.g. lambda expression or function object)\nthat takes three arguments: a class object, an argument ``list``, and a keyword\narg ``dict``. Note that there is no ``*`` or ``**`` magic--args passed to the\nkey function have already been resolved into basic data structures.\n\nThe callable must return a globally-unique, hashable key for an object. This key\nwill be stored in the ``_memento_cache``, which is a simple ``dict``.\n\nWhen various arguments are used as the cache key/object identity, you may use a\n``tuple`` that includes the class and arguments you want to key off of. This can\nalso help debugging, should you need to examine the ``_memento_cache`` cache\ndirectly. But in cases like the ``IdTracker`` above, it's not mandatory that you\nkeep extra information around. The raw ``id(args[0])`` integer value would\nsuffice, as would a constructed string or other immutable, hashable value.\n\nIn cases where arguments are very flexible, or involve flexible data types,\na high powered hashing function such as that provided by\n`SuperHash <http://pypi.python.org/pypi/SuperHash>`_ comes in extremely handy.\nE.g.::\n\n    from superhash import superhash\n    \n    SuperHashMeta = memento_factory('SuperHashMeta',\n                                lambda cls, args, kwargs: (cls, superhash(args)) )\n\nFor the 1% edge-cases where multiple call variations must be\nconclusively resolved to a unique canonical signature, that can be done on a\ncustom basis (based on the specific args). Or in Python 2.7 and 3.x, the\n``inspect`` module's ``getcallargs()`` function can be used to create a generic\n\"call fingerprint\" that can be used as a key. (See the tests for example code.)\n\nNotes\n=====\n\n *  ``mementos`` is not to be confused with `memento <http://pypi.python.org/pypi/memento>`_,\n    which does something completely different.\n\n *  Mementos was originally derived from `an ActiveState recipe\n    <http://code.activestate.com/recipes/286132-memento-design-pattern-in-python/>`_\n    by Valentino Volonghi. While the current implementation quite different and\n    the scope much broader, the availability of that recipe was what enabled\n    this module and the growing list of modules that depend on mementos. This is\n    what open source evolution is all about. Thank you, Valentino!\n    \n *  It is safe to memoize multiple classes at the same time. They will all be stored in the same cache, but\n    their class is a part of the cache key, so the values are distinct.\n   \n *  This implementation is *not* thread-safe, in and of itself. If you're\n    in a multi-threaded environment, consider wrapping object instantiation\n    in a lock.\n   \n *  Automated multi-version testing managed with \n    `pytest <http://pypi.python.org/pypi/pytest>`_\n    and `tox <http://pypi.python.org/pypi/tox>`_. Successfully packaged for, and tested against, all late-model verions of\n    Python (2.6, 2.7, 3.2, and 3.3), plus one (2.5) that isn't so very recent,\n    and one (PyPy 1.9, based on Python 2.7.2) that is differently implemented.\n\n\nInstallation\n============\n\n::\n\n    pip install mementos\n    \nTo ``easy_install`` under a specific Python version (3.3 in this example)::\n\n    python3.3 -m easy_install mementos\n    \n(You may need to prefix these with \"sudo \" to authorize installation. If they're\nalready installed, the ``--upgrade`` flag will be helpful; add it right before the\npackage name.)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/jeunice/mementos",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mementos",
    "package_url": "https://pypi.org/project/mementos/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mementos/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/jeunice/mementos"
    },
    "release_url": "https://pypi.org/project/mementos/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Memoizing metaclass. Drop-dead simple way to create cached objects",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3926378,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "076453fa0086af395bea58dec155413bd6af6e0cfed489b0142e968331d44904",
        "md5": "d277080f453339dc2d3a07a87947e964",
        "sha256": "da6ac31d25b98e1274a8c878f227672b13536a2a938c6e5613875811e728d960"
      },
      "downloads": -1,
      "filename": "mementos-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d277080f453339dc2d3a07a87947e964",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8607,
      "upload_time": "2013-09-10T18:11:42",
      "upload_time_iso_8601": "2013-09-10T18:11:42.464210Z",
      "url": "https://files.pythonhosted.org/packages/07/64/53fa0086af395bea58dec155413bd6af6e0cfed489b0142e968331d44904/mementos-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75f999f689935406da1bb235c84dd88ee9308657cce66a30f9aa9a1f0a9d9305",
        "md5": "fa2e8d4198366798465258f297489e3e",
        "sha256": "cc0c9bbcb09af231b19b760485bb332a6ade35222eee8d6729d652af95563fdf"
      },
      "downloads": -1,
      "filename": "mementos-1.0.zip",
      "has_sig": false,
      "md5_digest": "fa2e8d4198366798465258f297489e3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17943,
      "upload_time": "2013-09-10T18:11:40",
      "upload_time_iso_8601": "2013-09-10T18:11:40.655931Z",
      "url": "https://files.pythonhosted.org/packages/75/f9/99f689935406da1bb235c84dd88ee9308657cce66a30f9aa9a1f0a9d9305/mementos-1.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}