{
  "info": {
    "author": "Original: Aaron N. Updated by: Dmitry F.",
    "author_email": "necronomicum169@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "\n![splash-image]\n![ci-image]\n\ndrfpasswordless is a quick way to integrate ‘passwordless’ auth into\nyour Django Rest Framework project using a user’s email address or\nmobile number only (herein referred to as an alias).\n\nBuilt to work with DRF’s own TokenAuthentication system, it sends the\nuser a 6-digit callback token to a given email address or a mobile\nnumber. The user sends it back correctly and they’re given an\nauthentication token (again, provided by Django Rest Framework’s\nTokenAuthentication system).\n\nCallback tokens by default expire after 15 minutes.\n\nExample Usage:\n==============\n\n```bash\ncurl -X POST -d “email=aaron@email.com” localhost:8000/auth/email/\n```\n\nEmail to aaron@email.com:\n\n```\n...\n<h1>Your login token is 815381.</h1>\n...\n```\n\nReturn Stage\n\n```bash\ncurl -X POST -d \"email=aaron@example.com&token=815381\" localhost:8000/auth/token/\n\n> HTTP/1.0 200 OK\n> {\"token\":\"76be2d9ecfaf5fa4226d722bzdd8a4fff207ed0e”}\n```\n\nRequirements\n============\n\n- Python (3.7+)\n- Django (2.2+)\n- Django Rest Framework + AuthToken (3.10+)\n- Python-Twilio (Optional, for mobile.)\n\n\nInstall\n=======\n\n1. Install drfpasswordless\n\n   ```\n   pipenv install drfpasswordless\n   ```\n\n2. Add Django Rest Framework’s Token Authentication to your Django Rest\n   Framework project.\n\n```python\n REST_FRAMEWORK = {\n     'DEFAULT_AUTHENTICATION_CLASSES':\n    ('rest_framework.authentication.TokenAuthentication',\n )}\n\n INSTALLED_APPS = [\n     ...\n     'rest_framework',\n     'rest_framework.authtoken',\n     'drfpasswordless',\n      ...\n ]\n```\n\nAnd run\n```bash\npython manage.py migrate\n```\n\n3. Set which types of contact points are allowed for auth in your\n   Settings.py. The available options are ``EMAIL`` and ``MOBILE``.\n\n```python\nPASSWORDLESS_AUTH = {\n   ..\n   'PASSWORDLESS_AUTH_TYPES': ['EMAIL', 'MOBILE'],\n   ..\n}\n```\n\n   By default drfpasswordless looks for fields named ``email`` or ``mobile``\n   on the User model. If an alias provided doesn’t belong to any given user,\n   a new user is created.\n\n   3a. If you’re using ``email``, see the Configuring Email section\n   below.\n\n   3b. If you’re using ``mobile``, see the Configuring Mobile section\n   below.\n\n4. Add ``drfpasswordless.urls`` to your urls.py\n\n```python\n from django.urls import path, include\n\n urlpatterns = [\n     ..\n     path('', include('drfpasswordless.urls')),\n     ..\n ]\n```\n\n5. You can now POST to either of the endpoints:\n\n```bash\ncurl -X POST -d \"email=aaron@email.com\" localhost:8000/auth/email/\n\n// OR\n\ncurl -X POST -d \"mobile=+15552143912\" localhost:8000/auth/mobile/\n```\n   A 6 digit callback token will be sent to the contact point.\n\n6. The client has 15 minutes to use the 6 digit callback token\n   correctly. If successful, they get an authorization token in exchange\n   which the client can then use with Django Rest Framework’s\n   TokenAuthentication scheme.\n\n```bash\ncurl -X POST -d \"email=aaron@email.com&token=815381\" localhost:8000/auth/token/\n\n> HTTP/1.0 200 OK\n> {\"token\":\"76be2d9ecfaf5fa4226d722bzdd8a4fff207ed0e”}\n```\n\nConfiguring Emails\n------------------\n\nSpecify the email address you’d like to send the callback token from\nwith the ``PASSWORDLESS_EMAIL_NOREPLY_ADDRESS`` setting.\n```python\nPASSWORDLESS_AUTH = {\n   ..\n   'PASSWORDLESS_AUTH_TYPES': ['EMAIL',],\n   'PASSWORDLESS_EMAIL_NOREPLY_ADDRESS': 'noreply@example.com',\n   ..\n}\n```\n\nYou’ll also need to set up an SMTP server to send emails but for\ndevelopment you can set up a dummy development smtp server to test\nemails. Sent emails will print to the console. `Read more\nhere. <https://docs.djangoproject.com/en/3.0/topics/email/#console-backend>`__\n\n```python\n# Settings.py\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n```\n\nConfiguring Mobile\n------------------\n\nYou’ll need to have the python twilio module installed\n\n```bash\npipenv install twilio\n```\n\nand set the ``TWILIO_ACCOUNT_SID`` and ``TWILIO_AUTH_TOKEN`` environment\nvariables. These are read from `os.environ`, so make sure you don't put\nthem in your settings file accidentally.\n\nYou’ll also need to specify the number you send the token from with the\n``PASSWORDLESS_MOBILE_NOREPLY_NUMBER`` setting.\n\nTemplates\n=========\n\nIf you’d like to use a custom email template for your email callback\ntoken, specify your template name with this setting:\n\n```bash\nPASSWORDLESS_AUTH = {\n   ...\n  'PASSWORDLESS_EMAIL_TOKEN_HTML_TEMPLATE_NAME': \"mytemplate.html\"\n}\n```\n\nThe template renders a single variable ``{{ callback_token }}`` which is\nthe 6 digit callback token being sent.\n\nContact Point Validation\n========================\n\nEndpoints can automatically mark themselves as validated when a user\nlogs in with a token sent to a specific endpoint. They can also\nautomatically mark themselves as invalid when a user changes a contact\npoint.\n\nThis is off by default but can be turned on with\n``PASSWORDLESS_USER_MARK_EMAIL_VERIFIED`` or\n``PASSWORDLESS_USER_MARK_MOBILE_VERIFIED``. By default when these are\nenabled they look for the User model fields ``email_verified`` or\n``mobile_verified``.\n\nYou can also use ``auth/verify/email/`` or ``/auth/verify/mobile/`` which will\nautomatically send a token to the endpoint attached to the current\n``request.user``'s email or mobile if available.\n\nYou can then send that token to ``/auth/verify/`` which will double-check\nthat the endpoint belongs to the request.user and mark the alias as verified.\n\nRegistration\n============\n\nAll unrecognized emails and mobile numbers create new accounts by\ndefault. New accounts are automatically set with\n``set_unusable_password()`` but it’s recommended that admins have some\ntype of password.\n\nThis can be turned off with the ``PASSWORDLESS_REGISTER_NEW_USERS``\nsetting.\n\nOther Settings\n==============\n\nHere’s a full list of the configurable defaults.\n\n```python\nDEFAULTS = {\n\n    # Allowed auth types, can be EMAIL, MOBILE, or both.\n    'PASSWORDLESS_AUTH_TYPES': ['EMAIL'],\n\n    # URL Prefix for Authentication Endpoints\n    'PASSWORDLESS_AUTH_PREFIX': 'auth/',\n    \n    #  URL Prefix for Verification Endpoints\n    'PASSWORDLESS_VERIFY_PREFIX': 'auth/verify/',\n\n    # Amount of time that tokens last, in seconds\n    'PASSWORDLESS_TOKEN_EXPIRE_TIME': 15 * 60,\n\n    # The user's email field name\n    'PASSWORDLESS_USER_EMAIL_FIELD_NAME': 'email',\n\n    # The user's mobile field name\n    'PASSWORDLESS_USER_MOBILE_FIELD_NAME': 'mobile',\n\n    # Marks itself as verified the first time a user completes auth via token.\n    # Automatically unmarks itself if email is changed.\n    'PASSWORDLESS_USER_MARK_EMAIL_VERIFIED': False,\n    'PASSWORDLESS_USER_EMAIL_VERIFIED_FIELD_NAME': 'email_verified',\n\n    # Marks itself as verified the first time a user completes auth via token.\n    # Automatically unmarks itself if mobile number is changed.\n    'PASSWORDLESS_USER_MARK_MOBILE_VERIFIED': False,\n    'PASSWORDLESS_USER_MOBILE_VERIFIED_FIELD_NAME': 'mobile_verified',\n\n    # The email the callback token is sent from\n    'PASSWORDLESS_EMAIL_NOREPLY_ADDRESS': None,\n\n    # The email subject\n    'PASSWORDLESS_EMAIL_SUBJECT': \"Your Login Token\",\n\n    # A plaintext email message overridden by the html message. Takes one string.\n    'PASSWORDLESS_EMAIL_PLAINTEXT_MESSAGE': \"Enter this token to sign in: %s\",\n\n    # The email template name.\n    'PASSWORDLESS_EMAIL_TOKEN_HTML_TEMPLATE_NAME': \"passwordless_default_token_email.html\",\n\n    # Your twilio number that sends the callback tokens.\n    'PASSWORDLESS_MOBILE_NOREPLY_NUMBER': None,\n\n    # The message sent to mobile users logging in. Takes one string.\n    'PASSWORDLESS_MOBILE_MESSAGE': \"Use this code to log in: %s\",\n\n    # Registers previously unseen aliases as new users.\n    'PASSWORDLESS_REGISTER_NEW_USERS': True,\n\n    # Suppresses actual SMS for testing\n    'PASSWORDLESS_TEST_SUPPRESSION': False,\n\n    # Context Processors for Email Template\n    'PASSWORDLESS_CONTEXT_PROCESSORS': [],\n\n    # The verification email subject\n    'PASSWORDLESS_EMAIL_VERIFICATION_SUBJECT': \"Your Verification Token\",\n\n    # A plaintext verification email message overridden by the html message. Takes one string.\n    'PASSWORDLESS_EMAIL_VERIFICATION_PLAINTEXT_MESSAGE': \"Enter this verification code: %s\",\n\n    # The verification email template name.\n    'PASSWORDLESS_EMAIL_VERIFICATION_TOKEN_HTML_TEMPLATE_NAME': \"passwordless_default_verification_token_email.html\",\n\n    # The message sent to mobile users logging in. Takes one string.\n    'PASSWORDLESS_MOBILE_VERIFICATION_MESSAGE': \"Enter this verification code: %s\",\n\n    # Automatically send verification email or sms when a user changes their alias.\n    'PASSWORDLESS_AUTO_SEND_VERIFICATION_TOKEN': False,\n\n    # What function is called to construct an authentication tokens when\n    # exchanging a passwordless token for a real user auth token. This function\n    # should take a user and return a tuple of two values. The first value is\n    # the token itself, the second is a boolean value representating whether\n    # the token was newly created.\n    'PASSWORDLESS_AUTH_TOKEN_CREATOR': 'drfpasswordless.utils.create_authentication_token',\n    \n    # What function is called to construct a serializer for drf tokens when\n    # exchanging a passwordless token for a real user auth token.\n    'PASSWORDLESS_AUTH_TOKEN_SERIALIZER': 'drfpasswordless.serializers.TokenResponseSerializer',\n\n    # A dictionary of demo user's primary key mapped to their static pin\n    'PASSWORDLESS_DEMO_USERS': {},\n\n    # configurable function for sending email\n    'PASSWORDLESS_EMAIL_CALLBACK': 'drfpasswordless.utils.send_email_with_callback_token',\n    \n    # configurable function for sending sms\n    'PASSWORDLESS_SMS_CALLBACK': 'drfpasswordless.utils.send_sms_with_callback_token',\n\n    # Token Generation Retry Count\n    'PASSWORDLESS_TOKEN_GENERATION_ATTEMPTS': 3\n\n\n}\n```\n\nTo Do\n----\n\n-  github.io project page\n-  Add MkDocs - http://www.mkdocs.org/\n-  Support non-US mobile numbers\n-  Custom URLs\n-  Change bad settings to 500's\n\nPull requests are encouraged!\n\nDonations & Support\n----\nIf you found drfpasswordless useful, consider giving me a follow\n[@localghost](https://www.twitter.com/aaronykng) on Twitter and\n[@hi.aaron](https://www.instagram.com/hi.aaron) on Instagram.\n\nIf you'd like to go a step further and are using drfpasswordless in your startup\nor business, consider a donation:\n\n- BTC: `3FzSFeKVABL5Adh9Egoxh77gHbtg2kcTPk`\n- ETH: `0x13412a79F06A83B107A8833dB209BECbcb700f24`\n- Square Cash: `$aaron`\n\nLicense\n-------\n\nThe MIT License (MIT)\n\nCopyright (c) 2020 Aaron Ng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n[ci-image]: https://travis-ci.org/aaronn/django-rest-framework-passwordless.svg?branch=master\n[splash-image]: https://i.imgur.com/OdDHAIf.png\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gstr169/drf-passwordless/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drfpasswordless-gstr169",
    "package_url": "https://pypi.org/project/drfpasswordless-gstr169/",
    "platform": null,
    "project_url": "https://pypi.org/project/drfpasswordless-gstr169/",
    "project_urls": {
      "Homepage": "https://github.com/gstr169/drf-passwordless/"
    },
    "release_url": "https://pypi.org/project/drfpasswordless-gstr169/1.0.9/",
    "requires_dist": [
      "Django",
      "djangorestframework"
    ],
    "requires_python": ">=3",
    "summary": "Passwordless auth for Django Rest Framework Token Authentication. Update by Dmitry F.",
    "version": "1.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16563650,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88d19a640488ba1c1d981bff8e27ae1ca189403ba32b052b8b0e21137eb02c56",
        "md5": "58aae3bcc5891797ef8954b608a3d04e",
        "sha256": "a168af0e1446fb53f3e2e1c83c7e8f4fb816a78e37f894d3e33dac84d1959a9f"
      },
      "downloads": -1,
      "filename": "drfpasswordless_gstr169-1.0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "58aae3bcc5891797ef8954b608a3d04e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 27931,
      "upload_time": "2022-12-29T10:15:25",
      "upload_time_iso_8601": "2022-12-29T10:15:25.922367Z",
      "url": "https://files.pythonhosted.org/packages/88/d1/9a640488ba1c1d981bff8e27ae1ca189403ba32b052b8b0e21137eb02c56/drfpasswordless_gstr169-1.0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ec4a968d99ee2b30727d6188c1ed2e789b613343d43770e833ab3091d7d3932",
        "md5": "f1fc61d460cbf692df4e78409c0f2400",
        "sha256": "117fe1c5694f0e335ef5dbcd13eb48dc34a2e40c9a1a151da98958f8e4ff0451"
      },
      "downloads": -1,
      "filename": "drfpasswordless-gstr169-1.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "f1fc61d460cbf692df4e78409c0f2400",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 25263,
      "upload_time": "2022-12-29T10:15:27",
      "upload_time_iso_8601": "2022-12-29T10:15:27.606393Z",
      "url": "https://files.pythonhosted.org/packages/4e/c4/a968d99ee2b30727d6188c1ed2e789b613343d43770e833ab3091d7d3932/drfpasswordless-gstr169-1.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}