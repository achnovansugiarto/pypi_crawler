{
  "info": {
    "author": "Marc Bourqui",
    "author_email": "https://github.com/mbourqui",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Utilities"
    ],
    "description": "|Python| |Django| |License| |PyPI| |Build Status| |Coverage Status|\n\nDjango-EChoices, choices for Django model fields as enumeration\n===============================================================\n\nFeatures\n--------\n\n-  Specialized `enum types <#enum>`__\n-  Specialized `model fields <#modelfield>`__\n\nRequirements\n------------\n\n-  Django >= 1.8.18\n\nInstallation\n------------\n\n1. Run ``pip install django-echoices``\n\nUsage\n-----\n\nEnumeration\n~~~~~~~~~~~\n\nFirst, define your choices enumeration (in your ``models.py`` for\nexample):\n\n::\n\n    from echoices.enums import EChoice\n\n    class EStates(EChoice):\n        # format is: (value -> char or str or int, label -> str)\n        CREATED = ('c', 'Created')\n        SUBMITTED = ('s', 'Submitted')\n\nModel field\n~~~~~~~~~~~\n\nRegular model field\n^^^^^^^^^^^^^^^^^^^\n\nThen, either use a regular model field:\n\n::\n\n    from django.db import models\n\n    class MyModel(models.Model):\n        state = models.CharField(max_length=EStates.max_value_length(),\n                                 choices=EStates.choices(),\n                                 default=EStates.CREATED.value)\n\n**Note**: If your value is an ``int``, you can use\n``models.IntegerField`` instead.\n\nSpecialized field\n^^^^^^^^^^^^^^^^^\n\nYou can also use specialized field. Using such a field, you will then\nonly handle ``Echoice`` instances.\n\n::\n\n    from django.db import models\n    from echoices.fields import make_echoicefield\n\n    class MyModel(models.Model):\n        # `max_length` is set automatically\n        state = make_echoicefield(EStates, default=EStates.CREATED)\n\n**Note**: ``MyModel.state`` will be ``Estates`` instance stored in a\n``EStatesField`` field. See `documentation <#modelfield>`__ for more\ndetails.\n\nDerivation\n~~~~~~~~~~\n\nYou can add your own fields to the ``value`` and ``label`` ones. To do\nso, you have to override the **init**\\ () and your signature must look\nlike: ``self, value, label, *args`` where you replace ``*args`` with\nyour own positional arguments, as you would do when defining a custom\nEnum. Do *not* call the super().\\ **init**\\ (), as ``value`` and\n``label`` are already set internally by ``EChoice``.\n\nAs when dealing with a derived Enum, you can also add your own methods.\n\n::\n\n    from echoices.enums import EChoice\n\n    class EMyChoices(EChoice):\n        \"\"\"Another variant of EChoice with additionnal content\"\"\"\n\n        MY_CHOICE = (1, 'First choice', 'my additional value')\n\n        def __init__(self, value, label, my_arg):\n            self.my_arg = my_arg\n            # Note: super().__init__() shall *not* be called!\n\n        def show_myarg(self):\n            \"\"\"Used as: EMyChoices.MY_CHOICE.show_myarg()\"\"\"\n            print(self.my_arg)\n\n        @classmethod\n        def show_all(cls):\n            \"\"\"Used as: EMyChoices.show_all()\"\"\"\n            print(\", \".join([e.my_arg for e in list(cls)]))\n\nShort documentation\n-------------------\n\nSpecialized enum types\n~~~~~~~~~~~~~~~~~~~~~~\n\n``enums.EChoice``\n^^^^^^^^^^^^^^^^^\n\nBase enum type. Each enum element is a tuple ``(value, label)``, where\n[t]he first element in each tuple is the actual value to be set on the\nmodel, and the second element is the human-readable nameÂ \n\\ `doc <https://docs.djangoproject.com/en/1.11/ref/models/fields/#choices>`__\\ .\nValues **must** be unique. Can be derived for further customization.\n#### ``enums.EOrderedChoice`` Supports ordering of elements.\n``EOrderedChoice.choices()`` takes an extra optional argument,\n``order``, which supports three values: 'sorted', 'reverse' or 'natural'\n(default). If ``sorted``, the choices are ordered according to their\nvalue. If ``reverse``, the choices are ordered according to their value\nas if each comparison were reversed. If ``natural``, the order is the\none used when instantiating the enumeration. #### ``enums.EAutoChoice``\nGenerates auto-incremented numeric values. It's then used like:\n\n::\n\n    from echoices.enums import EAutoChoice\n\n    class EStates(EAutoChoice):\n        # format is: label -> str\n        CREATED = 'Created'\n        SUBMITTED = 'Submitted'\n\nAPI\n^^^\n\nOverriden EnumMeta methods\n''''''''''''''''''''''''''\n\n-  ``EChoice.__getitem__()``, such that you can retrieve an ``EChoice``\n   instance using ``EChoice['my_value']``\n\nAdditional classmethods\n'''''''''''''''''''''''\n\n-  ``choices()`` generates the choices as expected by a Django model\n   field\n-  ``max_value_length()`` returns the max length for the Django model\n   field, if the values are strings\n-  ``values()`` returns a list of all the values\n-  ``get(value, default=None)`` returns the EChoice instance having that\n   value, else returns the default\n\nSpecialized model fields\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n``fields.EChoiceField`` via ``fields.make_echoicefield()``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeal directly with the enum instances instead of their DB storage value.\nThe specialized field will be derived from a ``models.Field`` subclass,\nthe internal representation is deduced from the value type. So for\nexample if the values are strings, then the the ``EChoiceField`` will\nsubclass ``models.CharField``; and if the values are integers then it\nwill be ``models.IntegerField``. Actually supports ``str``, ``int``,\n``float`` and (non-null) ``bool`` as enum values.\n\n``make_echoicefield()`` will return an instance of ``EChoiceField``\nwhich subclasses a field type from ``models.CharField``. The exact name\nof the field type will be ``MyEnumNameField`` in Django >= 1.9, note the\nsuffixed 'Field'. For earlier versions of Django, it will be\n``EChoiceField``.\n\nThus, ``MyModel.my_echoice_field`` will be an ``EChoice`` instance\nstored in an ``EChoiceField`` field.\n\n``fields.MultipleEChoiceField``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSimilar to previous fields, but supports multiple values to be selected.\n`**Not yet implemented** <#3>`__.\n\n.. |Python| image:: https://img.shields.io/badge/Python-3.4,3.5,3.6-blue.svg?style=flat-square\n   :target: /\n.. |Django| image:: https://img.shields.io/badge/Django-1.8,1.9,1.10-blue.svg?style=flat-square\n   :target: /\n.. |License| image:: https://img.shields.io/badge/License-GPLv3-blue.svg?style=flat-square\n   :target: /LICENSE\n.. |PyPI| image:: https://img.shields.io/pypi/v/django_echoices.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/django-echoices\n.. |Build Status| image:: https://travis-ci.org/mbourqui/django-echoices.svg?branch=master\n   :target: https://travis-ci.org/mbourqui/django-echoices\n.. |Coverage Status| image:: https://coveralls.io/repos/github/mbourqui/django-echoices/badge.svg?branch=master\n   :target: https://coveralls.io/github/mbourqui/django-echoices?branch=master",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mbourqui/django-echoices",
    "keywords": "django choices models enum",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-echoices",
    "package_url": "https://pypi.org/project/django-echoices/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-echoices/",
    "project_urls": {
      "Homepage": "https://github.com/mbourqui/django-echoices"
    },
    "release_url": "https://pypi.org/project/django-echoices/2.0.0/",
    "requires_dist": [
      "Django (>=1.8.18)"
    ],
    "requires_python": "",
    "summary": "Choices for Django model fields as enumeration",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7750680,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08f26214fa26399838aed99033d14a3ca58dfef8c8a842afbb737a3464687123",
        "md5": "f91dc97f8588a1cba37502c2bc7f89ed",
        "sha256": "795c4209f146bb2917bdc007e13d3917b5fa75b9352662f972bae8194348adfa"
      },
      "downloads": -1,
      "filename": "django_echoices-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f91dc97f8588a1cba37502c2bc7f89ed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18503,
      "upload_time": "2017-05-22T15:47:13",
      "upload_time_iso_8601": "2017-05-22T15:47:13.885696Z",
      "url": "https://files.pythonhosted.org/packages/08/f2/6214fa26399838aed99033d14a3ca58dfef8c8a842afbb737a3464687123/django_echoices-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f2393b98322b391cf4af856e5cb2e88f96900c520897b599ee34c01034d1679",
        "md5": "3c89e204adf9db19a0e31e4566287933",
        "sha256": "74628eca2c419fd9f05fa5fceb510e702b144bb1711be099b8aaa63388b63642"
      },
      "downloads": -1,
      "filename": "django-echoices-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3c89e204adf9db19a0e31e4566287933",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27177,
      "upload_time": "2017-05-22T15:47:15",
      "upload_time_iso_8601": "2017-05-22T15:47:15.994578Z",
      "url": "https://files.pythonhosted.org/packages/2f/23/93b98322b391cf4af856e5cb2e88f96900c520897b599ee34c01034d1679/django-echoices-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}