{
  "info": {
    "author": "Rudolph Pienaar",
    "author_email": "rudolph.pienaar@childrens.harvard.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Abstract\n\nThis repository contains a simple python script that (1) processes an\n`mbox` style mailbox file, (2) parses out (typically) the last message\nand then (3) re-transmits this using the CLI `m365` toolset. While this\nscript can be used in a completely stand-alone manner to extract a\nmessage from an `mbox` and then *send* using `m365`, it’s main utility\nis when used in a full ecosystem including an email client and `postfix`\nserver.\n\nThe CLI `m365` offers the ability to use Outlook/Office365 to send\nemails. However, this tool is not suited to use as a mail client — it\nmerely offers a means to transmit a message from the command line. More\nuseful would be if existing mail clients could leverage `m365` natively.\nCurrently, however, this is not available. Therefore, `mbox2m365` was\ncreated to complete a \"missing link\" in a full email experience. Using\nthis tool in a configured environment, it is now possible to use *any*\nemail client to transmit messages using Outlook/Office365.\n\n# TL;DR\n\nEven if you’re impatient, it’s a good idea to read this document.\nHowever, assuming you’ve already built the infrastructure, assuming you\nhave installed `m365` (and logged into your Institution from `m365`),\nhave assuming you have setup your email client to email to a dummy local\npostfix account, then you can install `mbox2m365` with a simple\n\n``` bash\npip install mbox2m365\n```\n\nnote at time of writing the PyPI install might not be available. In that\ncase, simply clone this repo and do a\n\n``` bash\n# From the repo root dir\npip install -U .\n```\n\nand fire it off by setting up the monitor on the `mbox` file (here we\nassume the mbox belongs to `rudolph`)\n\n``` bash\ncd /var/mail\nfind . | entr mbox2m365 --mbox rudolph --b64_encode         \\\n                        --sendFromFile --cleanUp            \\\n                        --waitForStragglers 5\n```\n\n(Clearly the above relies on [`entr`](https://github.com/eradman/entr).\nConsult your distro’s repos for the appropriate install. In arch, this\nis `yay -S entr`, in Ubuntu, this is `sudo apt install entr`)\n\n# Security alert!\n\nWait! **Danger, Will Robinson**! Doesn’t this violate security policies?\nI was told my Institution does *not* allow clients like thunderbird to\nconnect to the Outlook server to send emails!\n\nWell, the devil is in the details as the saying goes. This solution does\n*not* violate policy since the \"unauthenticated\" email client is *not*\never connecting/authenticating to the Outlook server. Rather, the\n\"unauthenticated\" email client sends messages to a specially configured\nserver that \"saves\" the emails to a file. Then, a separate program\nteases out the new arrivals and uses the **authenticated** `m365`\nprogram to actually talk to and leverage Outlook to send the email. This\n*separate program* that bridges the mail file to `m365` is none other\nthan this python module.\n\nSo to be pendantic: all credentialing and authentication is handled by\n`m365` and *not* this tool. The end user is still required to\nlogin/authenticate using `m365`. If this has not happened, then\n`mbox2m365` will not work.\n\nAgain, this repo contains **no** authentication tokens/passwords/etc.\n\n# Limitations\n\nLet’s get these out of the way first. This is *not* a full solution for\nlinking a third party email client to Outlook. It gets *close*, IMHO.\nThe limitations are:\n\n- This is not a multi-user solution. All email transmitted to the\n  intermediate helper server is added to a single user `mbox` which when\n  processed by this script means **all** email in that `mbox` will\n  appear to have been transmitted by that user. While in theory it\n  should be possible to support multiple users, either by having a\n  separate helper server per user or by having multiple local users on\n  the mail server and separate `mbox` files, the current solution is\n  clearly not scalable. It is decent though for the single user case.\n\n- Fundmanentally, this solution is limited first and foremost by the\n  capabilities of the CLI `m365 outlook mail send` functionality. Recent\n  updates to `m365` have expanded functionality of this bridge — most\n  notably attachments are now supported. Still pending is full `bcc`\n  support — currently all `bcc` recipients are switched to `cc`.\n\nOther limitations stem from the fact the bridge needs to process the\n`mbox` file *de novo* each time mail is received by the helper server.\nThis means that time to process will increase linearly with `mbox` size.\nThe real world implications of this are still being explored.\n\nFinally, the bridge does make a best effort attempt to *wait* until the\n`mbox` has stabilized before analyzing it. When sending emails to\nmultiple recipients, *each* recipient gets a single complete copy in the\n`mbox` with a single address (the multiple recipient addresses are not\nconserved in the `mbox` but *are* processed by this bridge). While\narguably wasteful, the implication is that while all these recipient\ncopies are appended to the `mbox`, the bridge should wait until all have\nbeen added before processing. Currently the bridge attempts this by\nexamining the `mbox` file size when called, and waiting a small delta\ntime interval and checking if the size has changed again. It will wait\nuntil the size is stable before continuing. The TL;DR is this could\nresult in a processing delay.\n\n# Introduction\n\nThe migration/adoption of Office365 by institutions often poses issues\nand problems for users wishing to use different tools for email\ntransmission, particularly on platforms such as Linux.\n\nWhile it is possible to access various Office365 applications,\nparticularly Outlook, via a web interface, this is often not sufficient\nfor several classes of users, particularly those who find the web\ninterface cumbersome (for instance, the web interface has no (or\nlimited) support for keyboard shortcuts, it is cumbersome if not\nimpossible to automate tasks involving event-driven email) and/or for\nusers who have an existing and efficient email workflow using clients\nsuch as `thunderbird` or `mutt`.\n\nThis small repo houses a small and simple python application with some\nsupporting documentation that provides a solution to the problem of\nsending email from an instituion’s managed domain by leveraging\n`postfix` and some `mbox` processing and then using the CLI tool `m365`.\n\n# Method Summary\n\nThe solution requires some seemingly contortuous steps, but in reality\nis rather simple and can be summarized as follows:\n\n## Reading email\n\nReading emails that are locked away in an Outlook server is best\neffected by simply adding a forward incoming email rule from your\nInstitution Outlook Server (IOS) to an externally accessible email\nprovider (such as `gmail`), allowing this email to be read easily by\ntools such as `thunderbird` or `mutt`.\n\n    ┌─────────────────────────────────┐\n    │IOS that receives incoming email │\n    └┬────────────────────────────────┘\n     │\n     └─────┐\n           │\n          ┌O─────────────────────┐\n          │forwardRule(<message>)│\n          └┬─────────────────────┘\n     ┌─────┘\n     │\n    ┌O────┐\n    │gmail│\n    └┬────┘\n     └─────┐\n           │\n          ┌O──────────────────────┐\n          │clientAccess(<message>)│\n          └O──────────────────────┘\n     ┌─────┘\n     │\n    ┌┴───────────────────────┐\n    │thunderbird / mutt / etc│\n    └────────────────────────┘\n\n## Sending email\n\nThe message is now outside of Outlook, and if the Institution does not\nallow non-authorized clients (often this means they only allow Microsoft\ntools) to connect to the Outlook server, the following work around will\nhelp. Essentially, the outside client should be configured to send email\nusing a properly setup `postfix` server that simply copies the target\nemail to an `mbox` file.\n\nThis `mbox` file is then monitored for any changes, and on a change\n(assumed to mean a new email message has been appended), a new process\nis fired off to parse off the latest message and then use the command\nline `m365` CLI tool to have the IOS send the email.\n\n    ┌───────────────────────┐\n    │thundebird / mutt /etc │\n    └┬──────────────────────┘\n     │\n     └─────┐\n           │\n          ┌O────────────────────────────┐\n          │sendmail(<message>) (postfix)│\n          └┬────────────────────────────┘\n     ┌─────┘\n     │\n    ┌O────┐\n    │mbox │\n    └┬────┘\n     └─────┐\n           │\n          ┌O────────┐\n          │mbox2m365│ <--- this repo!\n          └┬────────┘\n     ┌─────┘\n     │\n    ┌O─────────────┐\n    │m365 <message>│\n    └┬─────────────┘\n     │\n    ┌O────────────────────────────────┐\n    │IOS that transmits outgoing email│\n    └─────────────────────────────────┘\n\n# `mbox2m365`\n\nWhile all the building blocks to effect the solution exist, the one\nmissing piece is the `mbox` to `m365` block, which is provided for by\nthis rather simple python script.\n\n# Setup your helper mail server, `postfix`\n\nFirst, install `postfix`\n\n## Arch\n\n``` bash\nyay -S postfix\n```\n\n## Ubuntu\n\n``` bash\nsudo apt install postfix\n```\n\n# `transport`\n\nNow, edit the `transport` file.\n\n``` bash\nsudo bash\ncd /etc/postfix\ncp transport transport.orig\necho \"* local:rudolph\" >> transport\n```\n\n# `main.cf`\n\nFor the `main.cf` file, do\n\n``` bash\n# Assuming you are still in the /etc/postfix dir in a sudo bash shell...\ncp main.cf main.cf.orig\necho \"mydomain = pangea.net\" >> main.cf\necho \"luser_relay = rudolph@pangea.net\"\necho \"transport_maps = hash:/etc/postfix/transport\" >> main.cf\n```\n\n# enable/restart the services\n\n``` bash\nsudo systemctl enable postfix.service\nsudo systemctl restart postfix.service\n```\n\n# Email client\n\nSimply configure your email client to use the machine running `postfix`\nas your email server. All emails will be appended to the `transport`\nuser’s `mbox` file.\n\n# Fire up `mbox2m365`\n\nThe final piece of the puzzle:\n\n``` bash\ncd /var/mail\nfind . | entr mbox2m365 --mbox rudolph --b64_encode         \\\n                        --sendFromFile --cleanUp            \\\n                        --waitForStragglers 5\n```\n\n*-30-*\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FNNDSC/mbox2m365",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mbox2m365",
    "package_url": "https://pypi.org/project/mbox2m365/",
    "platform": null,
    "project_url": "https://pypi.org/project/mbox2m365/",
    "project_urls": {
      "Homepage": "https://github.com/FNNDSC/mbox2m365"
    },
    "release_url": "https://pypi.org/project/mbox2m365/3.0.10/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "'Send a message stored within an mbox using m365 (Office365)'",
    "version": "3.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17515743,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f96ebd03ef2d3be45b7fcdcbf603cfe23fcbd4db15135dd4d9a1dd7b389281e",
        "md5": "7bfff730430593d796cad6af46708b50",
        "sha256": "790a1b0b117577f13d23ade4840a0a4e88dc1f9fb6b4be6545f4efe4338842d2"
      },
      "downloads": -1,
      "filename": "mbox2m365-3.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "7bfff730430593d796cad6af46708b50",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21473,
      "upload_time": "2023-03-30T20:11:14",
      "upload_time_iso_8601": "2023-03-30T20:11:14.889282Z",
      "url": "https://files.pythonhosted.org/packages/7f/96/ebd03ef2d3be45b7fcdcbf603cfe23fcbd4db15135dd4d9a1dd7b389281e/mbox2m365-3.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}