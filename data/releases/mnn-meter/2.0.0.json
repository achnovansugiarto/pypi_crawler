{
  "info": {
    "author": "Haolin Yan",
    "author_email": "haolinyan_xdu@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "![img.png](img.png)\n---\nTools for quickly building operator \nlatency tables and for accurately predicting \nmodel latency (based on Pytorch and MNN)\n\n[中文版](README_zh.md)\n## 1.Installation\nMMT is used in both server-side and inference-side situations: \n* on the server side, the operator list is generated according to the specified operator space; \nthe delay of a given model is predicted according to the operator delay table. \n* On the inference side, test the operator delay according to the operator list to obtain the operator latency table. \n\nThe server side must install `Pytorch` and `MNN(C++)` at the same time, \nand the inference side must install `MNN(C++)` \n\n**Note: Be sure to add the `build` folder generated by compiling `MNN` to the environment variable!**\n\nAfter configuring the above dependencies, install MMT\n```\npip install mmn-meter\n```\n\n## 2.Start\n### 2.1 Modify your models\nFor your custom model(layer), please override __repr__() with unique representation of the parameters, for example:\n```python\n    def __init__(self, ...)\n     self.name = \"ResNetBasicBlock-%d-%d-%d-%d-\" % (in_channels, out_channels, stride, kernel)\n    ...\n    def __repr__(self):\n        return self.name\n```\n**If the results returned by `__repr__()` cannot be differentiated for the same type of operator input with different parameters, \nit is very easy to cause running errors or measurement errors!**\n\n[See how to modify your model](docs/configuration.md)\n\n### 2.2 Export the operators\nAfter the `mmt=2.x` version, both \n`description file generation` and `function generation` are supported.\n### 2.2.1 Method 1: Write an operator description file\nThe parameters that determine the specific delay of \nan operator include (operator type, operator \ninstantiation parameters, input shape). \nThe specific operator space \nneeds to be expressed in the following way:\n```yaml\nresnet18:\n    ResNetBasicBlock:\n        in_channels: [64, 128, 256, 512]\n        out_channels: [64, 128, 256, 512]\n        stride: [1]\n        kernel: [3, 5, 7]\n        input_shape: [[1, 64, 112, 112], [1, 128, 56, 56], [1, 256, 28, 28], [1, 512, 14, 14]]\n\ntorch.nn:\n    Conv2d:\n        in_channels: [3]\n        out_channels: [64]\n        kernel_size: [7]\n        stride: [2]\n        padding: [3]\n        input_shape: [[1, 3, 224, 224]]\n\n    BatchNorm2d:\n        num_features: [64]\n        input_shape: [[1, 64, 112, 112]]\n\n    ReLU:\n        no_params: true\n        input_shape: [[1, 64, 112, 112]]\n```\n[Refer to how to describe your operator](docs/configuration.md)\n\nThen use the following command to create a list of operators and export the operators to mnn format.\n```python\nfrom mmt.converter import generate_ops_list\n\ngenerate_ops_list(\"ops.yaml\", \"/path/ops_folder\")\n```\n`ops.yaml` is the operator description file, \n`pathops_folder` is the directory where \nthe operator is saved, and the corresponding \n`meta.pkl` will be generated in this directory \nto save the metadata information of the operator.\n\n### 2.2.1 Method 2: Functional Generation\nHighly similar to Mode 1, it is directly registered and generated by using the `mmt.register` function, and supports multiple registration of operators of the same type to reduce redundant operators caused by unnecessary combinations (the disadvantage of Mode 1),\nfor [example](demo/MobileNetV3/convert.py)\n```python\nfrom mmt import register\nimport torch.nn as nn\nfp = \"./mbv3_ops\"\nreg = lambda ops, **kwargs: register(ops, fp, **kwargs)\nreg(nn.Linear,\n    in_features=[576, 1024],\n    out_features=[1024, 1000],\n    bias=[True],\n    input_shape=[[1, 576], [1, 1024]],\n    )\n```\nMethod 1:\n```yaml\ntorch.nn:\n    Linear:\n        in_features: [576, 1024]\n        out_features: [1024, 1000]\n        bias: [True]\n        input_shape: [[1, 576], [1, 1024]]\n```\nThe corresponding operator can be generated by directly running the written file. For more details,\nplease refer to [Example](demo/MobileNetV3/tutorial.md)\n\n\n### 2.3 Record operator delays on the deployment side, and build an operator latency table\n\n```python\nfrom mmt.meter import meter_ops\n\nmeter_ops(\"./ops\", times=100)\n```\n`ops` is the folder where the operator and `meta.pkl` are saved, \n`times` represents the number of repeated tests, \nrun the modified program, the delay of the operator \nwill be calculated, and the operator latency table will be \nsaved as `.ops/meta_latency.pkl` . This file \nspecifically records the metadata and corresponding \nlatency of all operators.\n\n### 2.4 Predicting model latency on the server side\n\n```python\nfrom mmt.parser import predict_latency\n\n...\nmodel = ResNet18()\npred_latency = predict_latency(model, path, [1, 3, 224, 224], verbose=False)\n```\n`path` is the path corresponding to `meta_latency.pkl`. \nNote that the shape of the input tensor must be \nthe same as the `input_shape` set in the operator \ndescription.\n\n## 3 Test the prediction error of MMT\nSpecific reference [MobileNetV3 test](demo/MobileNetV3/tutorial.md)\n\n|Model|Num|err(%)|device|\n|----|----|----|----|\n|ResNet|6561|2.6%(3%)|  40  Intel(R) Xeon(R) Silver 4210R CPU @ 2.40GHz\n|\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mnn-meter",
    "package_url": "https://pypi.org/project/mnn-meter/",
    "platform": null,
    "project_url": "https://pypi.org/project/mnn-meter/",
    "project_urls": {
      "Source": "https://github.com/makerlin1/MMT"
    },
    "release_url": "https://pypi.org/project/mnn-meter/2.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Tools for quickly building operator latency tables and for accurately predicting model latency (based on Pytorch and MNN)",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13743862,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c87c3e1c794d5bb523e9883a52d76ba518be1415cb28ce94d95a9f0d49c29542",
        "md5": "c06b583f1cf14429a19e2baa1afcb848",
        "sha256": "dbbb5049e71c06204e7047ea74b1ebcad3748f1ed4a3192c8f4837bf5168acc0"
      },
      "downloads": -1,
      "filename": "mnn-meter-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c06b583f1cf14429a19e2baa1afcb848",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 413562,
      "upload_time": "2022-05-05T07:10:58",
      "upload_time_iso_8601": "2022-05-05T07:10:58.231233Z",
      "url": "https://files.pythonhosted.org/packages/c8/7c/3e1c794d5bb523e9883a52d76ba518be1415cb28ce94d95a9f0d49c29542/mnn-meter-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}