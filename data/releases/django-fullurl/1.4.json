{
  "info": {
    "author": "David D Lowe",
    "author_email": "daviddlowe.flimm@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/django-fullurl.svg\n    :target: https://pypi.org/project/django-fullurl/\n    :alt: django-fullurl on PyPI\n\n.. image:: https://img.shields.io/pypi/l/django-fullurl.svg\n    :target: https://pypi.org/project/django-fullurl/\n    :alt: django-fullurl on PyPI\n\n.. image:: https://img.shields.io/pypi/wheel/django-fullurl.svg\n    :target: https://pypi.org/project/django-fullurl/\n    :alt: django-fullurl on PyPI\n\n.. image:: https://img.shields.io/pypi/pyversions/django-fullurl.svg\n    :target: https://pypi.org/project/django-fullurl/\n    :alt: django-fullurl on PyPI\n\n.. image:: https://travis-ci.org/Flimm/django-fullurl.svg?branch=master\n    :target: https://travis-ci.org/Flimm/django-fullurl\n    :alt: Travis CI for django-fullurl (master branch)\n\n.. image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\n    :target: https://saythanks.io/to/Flimm\n    :alt: Say Thanks!\n    \n------\n\nIntroduction\n=============\n\n**django-fullurl** adds three new template tags to Django: ``fullurl``, ``fullstatic``, and ``buildfullurl``.\n\n``fullurl`` and ``fullstatic`` behave like ``url`` and ``static`` respectively, but they always return an absolute URL with the scheme and authority/domain parts.\n\nFor example, take this ``url`` tag:\n\n.. code:: html+django\n\n   {% url \"articles:article\" slug=\"hello\" %}\n   \nIn our example, this prints::\n\n    /articles/hello\n    \nThis is called by some an absolute URL, because it begins with a forward-slash. However, it is not an *absolute* absolute URL, because it does not contain the scheme and authority parts.\n\nIf we replace ``url`` with ``fullurl``, it will print this result::\n\n    http://example.com/articles/hello\n    \nBehind the scenes, it uses `request.build_absolute_uri <https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpRequest.build_absolute_uri>`__ to determine the correct scheme and authority/domain parts.\n\nIn the same way that ``fullurl`` extends ``url``, ``fullstatic`` extends the ``static`` template tag.\n\n``buildfullurl`` takes a relative URL as an argument, and prints an absolute URL with the scheme and authority parts. For example:\n\n.. code:: html+django\n\n    {% buildfullurl article.cover.url %}\n\nInstallation\n============\n\nRun on the command-line::\n\n    $ pip install django-fullurl\n    \nMake sure these two apps are included in your ``INSTALLED_APPS`` settings:\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        'django.contrib.staticfiles',\n        'fullurl',\n        # ...\n    ]\n    \nMake sure ``django.template.context_processors.request`` is included in your context processors.\n\nTemplate tags summary\n=====================\n\n- ``{% fullurl \"some-url-name\" v1 v2 %}`` This behaves like the ``url`` Django template tag (`doc <https://docs.djangoproject.com/en/stable/ref/templates/builtins/#url>`__), but it returns a full URL instead of a relative one.\n- ``{% fullstatic \"images/hi.jpg\" %}`` This behaves like the ``static`` Django template tag (`doc <https://docs.djangoproject.com/en/stable/ref/templates/builtins/#static>`__), but it returns a full URL instead of a relative one.\n- ``{% buildfullurl \"/foobar\" %}`` This will convert a relative URL into a full URL using ``request.build_absolute_uri`` (`doc <https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpRequest.build_absolute_uri>`__).\n\nExample usage\n=============\n\nOpenGraph\n---------\n\nOpenGraph URLs need to be absolute, including scheme and authority parts. Here's how you can use ``fullurl`` and ``fullstatic`` to help with this:\n\n.. code:: html+django\n\n    {% load fullurl %}\n    \n    <meta property=\"og:url\" content=\"{% fullurl \"articles:article\" article=article %}\">\n    <meta property=\"og:image\" content=\"{% fullstatic \"cat.jpg\" %}\">\n    \n\nYou can convert a URL from relative to absolute using ``buildfullurl`` tag:\n\n.. code:: html+django\n\n    {% load fullurl %}\n    \n    <meta property=\"og:url\" content=\"{% buildfullurl article.get_absolute_url %}\">\n    <meta property=\"og:image\" content=\"{% buildfullurl article.image.url %}\">\n\nFacebook static share link\n--------------------------\n\nIf you want to create a Facebook share button using a link, you can use the ``sharer.php`` feature. The value for the ``u`` query parameter needs to be an absolute URL, encoded using the ``urlencode`` filter, like this:\n\n.. code:: html+django\n\n   {% load fullurl %}\n\n   <a href=\"https://www.facebook.com/sharer/sharer.php?u={% filter urlencode %}{% buildfullurl article.get_absolute_url %}{% endfilter %}\">\n     Share\n   </a>\n  \n\nSee also\n========\n\nHere are some alternatives, in alphabetical order:\n\n- `django-absoluteuri <https://pypi.org/project/django-absoluteuri/>`__ (`GitHub <https://github.com/fusionbox/django-absoluteuri>`__, `Django Packages <https://djangopackages.org/packages/p/django-absoluteuri/>`__) provides two template tags: ``absoluteuri`` and ``absolutize``. Unlike this app, it uses the site framework to determine the domain to use, which could be an additional database query. This can be useful in some situations, for instance when creating emails.\n- `django-absoluteurl <https://pypi.org/project/django-absoluteurl/>`__ (`GitHub <https://github.com/bgryszko/django-absoluteurl>`__, `Django Packages <https://djangopackages.org/packages/p/django-absoluteurl/>`__) provides a template tag ``absoluteurl`` that works in a similar fashion as ``fullurl``. It does not seem to work in Python 2, or with newer Django versions, however.\n- django-full-url (`GitHub <https://github.com/RRMoelker/django-full-url>`__) allows you to get specific parts of the current URL using code like ``{{ url_parts.domain }}``, among other things. It does not provide the same functionality as this app, the naming similarity was unintentional.\n- `django-urltags <https://pypi.org/project/django-urltags/>`__ (`Django Packages <https://djangopackages.org/packages/p/django-urltags/>`__) provides a few template tags, including ``absurl``, but it hasn't been updated since 2012 and it doesn't seem to work on recent Django versions.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Flimm/django-fullurl",
    "keywords": "django",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fullurl",
    "package_url": "https://pypi.org/project/django-fullurl/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-fullurl/",
    "project_urls": {
      "Change log": "https://github.com/Flimm/django-fullurl/blob/master/CHANGELOG.rst",
      "GitHub": "https://github.com/Flimm/django-fullurl",
      "Homepage": "https://github.com/Flimm/django-fullurl",
      "Say Thanks!": "https://saythanks.io/to/Flimm"
    },
    "release_url": "https://pypi.org/project/django-fullurl/1.4/",
    "requires_dist": [
      "Django (>=1.8)"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*",
    "summary": "Adds three template tags to Django: `fullurl`, `fullstatic` and `buildfullurl`. The template tag `fullurl` acts just like `url`, but it always prints absolute URLs with scheme and domain",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17506712,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78a20b27b89ffc0632b5cfa2ac5ac51a653bf89b7bf10ce671ea421f7781c178",
        "md5": "cc6ffab20b56bb29e87ea0c6c7133a5b",
        "sha256": "4eaf270f00f3409afca4360a2c5f38c5cffc6578382a8998558f6e6dfd22e900"
      },
      "downloads": -1,
      "filename": "django_fullurl-1.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cc6ffab20b56bb29e87ea0c6c7133a5b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*",
      "size": 6485,
      "upload_time": "2023-03-30T08:15:47",
      "upload_time_iso_8601": "2023-03-30T08:15:47.740082Z",
      "url": "https://files.pythonhosted.org/packages/78/a2/0b27b89ffc0632b5cfa2ac5ac51a653bf89b7bf10ce671ea421f7781c178/django_fullurl-1.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}