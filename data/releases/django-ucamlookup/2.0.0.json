{
  "info": {
    "author": "Information Systems Group, University Information Services, University of Cambridge",
    "author_email": "devops@uis.cam.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "# Introduction\n\ndjango-ucamlookup is a library which provides useful methods and templates to integrate your \n[Django](https://www.djangoproject.com/) application with the University of Cambridge University \n[Lookup service](https://www.lookup.cam.ac.uk/). \n\n## Configuration\n\nThe following parameters are optional configurations that you can use in your django settings.\n\n* ``UCAMLOOKUP_HOST``. Optional. Default: ``\"www.lookup.cam.ac.uk\"``. Specifies the hostname used for the \nIbisClientConnection. This is the connection object that will be used to make all API calls related to lookup.\n* ``UCAMLOOKUP_PORT``. Optional. Default: ``443``. Specifies the port used for the \nIbisClientConnection. This is the connection object that will be used to make all API calls related to lookup.\n* ``UCAMLOOKUP_URL_BASE``. Optional. Default: ``\"\"``. Specifies the URL base used for the \nIbisClientConnection. This is the connection object that will be used to make all API calls related to lookup.\n* ``UCAMLOOKUP_CHECK_CERTS``. Optional. Default: ``True``. Indicates if the client should check if the server side\ncertificates are valid.\n* ``UCAMLOOKUP_USERNAME``. Optional. Default: ``None``. Specifies the username used for the \nIbisClientConnection. This is the connection object that will be used to make all API calls related to lookup. We \nrecommend the use of Lookup groups for authentication instead of an individual Raven account.\n* ``UCAMLOOKUP_PASSWORD``. Optional. Default: ``None``. Specifies the password used for the \nIbisClientConnection. This is the connection object that will be used to make all API calls related to lookup. We \nrecommend the use of Lookup groups passwords for authentication instead of an individual Raven account password.\n\n## Use\n\nInstall django-ucamlookup using pip:\n\n```bash\npip install django-ucamlookup\n```\n\nAdd django-ucamlookup to your installed applications in your project configuration settings.py:\n\n```python\n    INSTALLED_APPS=(\n    ...\n        'ucamlookup', \n    ...\n    ),\n```\n\nand the urls entries in the urls.py file:\n\n```python\n    urlpatterns = patterns(\n    ...\n        # lookup/ibis urls\n        url(r'^ucamlookup/', include('ucamlookup.urls')),\n    ...\n    )\n```\n\n## Warning\n\nLookup contains personal data of University of Cambridge members. Make sure that you are only showing this data to \nusers with rights to see this data.\n\n## Networking\n\nIf no optional settings are specified, django-ucamlookup will use ``anonymous`` as username and no password when \nsetting up an IbisClientConnection and executing Lookup APIs. This type of anonymous conneciton is only available\ninside the Cambridge University Network (CUDN). If your application is deployed outside the CUDN you should use the \noptional authentication with ``UCAMLOOKUP_USERNAME`` and  ``UCAMLOOKUP_PASSWORD``.\n\nWe do not recommend the use of individual Raven accounts and instead to set up a Lookup group. Users can generate a \npassword for the group and use the group short name as a username for authentication.\n\n\n## Lookup User\n\ndjango-ucamlookup modifies a User object each time is going to be saved, either new or update, and assigns to its \n*last_name* property the visible name from lookup for that user. The username is used to search for this user in lookup.\n\n## Lookup Group\n\ndjango-ucamlookup includes a new model called LookupGroup that it is used to cache lookup models. It is used to store\nthe lookup group id and its name, and therefore used to reduce the number of call to the lookup service. It can also be\nused to create relation with other models. For example, let's say we have a model called Secret and we only want to let\naccess to it to users inside a certain group or groups. We will create a ManyToMany relation from Secrets to \nLookupGroup.\n\nThe name of the group is retrieve from the lookup service each time the group is saved (new or updated). The name is\nstored in the *name* property of the class and the id of the lookup group is stored in *lookup_id*.\n\nIt is important to say that this model is not used to cache relations between lookup users and lookup groups. These \nrelations are always queried to the live lookup service. The model is only used to let the developer make relations\nbetween models that include lookup groups and cache the name of the group.\n\n## Template macros\n\nTwo macros are available to be used in a template: ucamlookup_users, and ucamlookup_groups. These macros have \njavascript functions that will modify a html input tag to an interactive ajax box with interaction to the lookup \nservice that will let the user use autocomplete and search for lookup users and groups.\n\nIf you want to include an input box to let the user search and introduce a single user or a list of users, use the \nucamlookup_users macro. You should pass as parameters to the macro the html input tag *id* that you want to modify/use\nand if you want to let the user select one or more users with the parameter *multiple*:\n\n```python\n    {% include 'ucamlookup_users.html' with input_tag_id=\"lookup_users\" multiple=true user_list=\"authors\" %}\n```\n\nYou can optionally override the placeholder text.\n\nIf you want to show existing records in the input tag you will need to pass to the view the list of crsids. This list \nneeds to be passed inside a dictionary called *lookup_lists*. The key entry name of the dictionary where the list is\nlocated it is passed to the macro using the variable *user_list* as shown previously. In this example:\n\n```python\n    lookup_lists = {\n        'authors': post.users.all(),\n    }\n```\n\nYou will also have to include the following macro in the head of your template to load the js and css files \nassociated. These macros require jquery if you want to include your own jquery library or you are already using it in\nyour template use the parameter *jquery* to specify it.\n\n```python\n    {% include 'ucamlookup_headers.html' with jquery=True %}\n```\n\nAnd your input tag will be transform into an ajax box that allows the user to search for users using lookup either\nusing their username or their complete name. A list of crsids will be sent as the value of the input tag.\n\nThe same will work for lookup groups, just substitute user by group in the id and in the include.\n\n\n## Admin interface\n\nThe admin interface is tunned to add managing options for the LookupGroup model. The *add* option will show the same\najax-lookup-integrated-input as the template macros described above.\n\nIt also changes the add form for the user and it also shows an interactive ajax lookup-integrated input form when the\nadmin wants to add a new user to the app.\n\nThese input forms allow to search for name and crsid in the case of a new user and for name in the case of a lookup \ngroup.\n\n\n## Available functions\n\nThe module also provides some useful functions to use in your app that do all the calls to the lookup service needed.\n\n*get_group_ids_of_a_user_in_lookup(user)*: Returns the list of group ids of a user\n\n*user_in_groups(user, lookup_groups)*: Check in the lookup webservice if the user is member of any of the groups in the \nLookupGroup list passed by parameter. Returns True if the user is in any of the groups or False otherwise\n\n*def get_institutions(user=None)*: Returns the list of institutions using the lookup ucam service. The institutions of \nthe user passed by parameters will be shown first in the list returned\n\n*validate_crsids(crsids_text)*: It receives a list of crsids (comming from input tag from the template macros described \npreviously) [wich format is separated by commas and with no spaces in between] and returns a list of Users corresponding\nto the crsids passed.\n\n*get_or_create_user_by_crsid(crsid)*: Returns the User corresponding to the crsid passed. If it does not exists in the \ndatabase, it is created.\n\n*get_institution_name_by_id(institution_id, all_institutions=None)*: Returns the name of an institution by the id \npassed. If all_institutions is passed (the result from get_institutions) then the search is done locally using this \nlist instead of a lookup call.\n\nThe last two methods can be used to add institutions to a model and show the name instead of the code in the admin \ninterface \n\n```python\nclass MyModelAdmin(ModelAdmin):\n    all_institutions = get_institutions()\n\n    model = MyModel\n    list_display = ('institution', )\n    list_filter = ('institution_id', )\n\n    def institution(self, obj):\n        return get_institution_name_by_id(obj.institution_id, self.all_institutions)\n\n    institution.admin_order_field = 'institution_id'\n```\n\n# Developing\n\n## Run tests\n\nTox is configured to run on a container with a matrix execution of different versions of python and django combined.\nIt will also show the coverage and any possible PEP8 violations.\n\n```shell\n$ docker-compose up\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/uisautomation/django-ucamlookup.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-ucamlookup",
    "package_url": "https://pypi.org/project/django-ucamlookup/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-ucamlookup/",
    "project_urls": {
      "Homepage": "https://github.com/uisautomation/django-ucamlookup.git"
    },
    "release_url": "https://pypi.org/project/django-ucamlookup/2.0.0/",
    "requires_dist": [
      "django (>=1.11)"
    ],
    "requires_python": "",
    "summary": "A Django module for the University of Cambridge Lookup service",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13236555,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "906947c095895f744ac1aaf15948570f2c03dd310ae35b7706b2dd2900a2b621",
        "md5": "587fdebaa3b62fdcf24661f29cc6c817",
        "sha256": "a4161878a0b0b3545c550f3a5bc9843adbcb75357d32cdae37329b357da9b0d0"
      },
      "downloads": -1,
      "filename": "django_ucamlookup-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "587fdebaa3b62fdcf24661f29cc6c817",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 172342,
      "upload_time": "2019-03-13T17:29:30",
      "upload_time_iso_8601": "2019-03-13T17:29:30.238967Z",
      "url": "https://files.pythonhosted.org/packages/90/69/47c095895f744ac1aaf15948570f2c03dd310ae35b7706b2dd2900a2b621/django_ucamlookup-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea199f463e48188838d8cae3b4dcb763dbc4b3e28f5aadf864bd9ee524390977",
        "md5": "49763045736a36a1b10f4d0a60fcd0bc",
        "sha256": "ee3817abe1c70367549f8e37e72b3a62e7d4699d19a8ca096ca85b8611bfaa97"
      },
      "downloads": -1,
      "filename": "django-ucamlookup-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "49763045736a36a1b10f4d0a60fcd0bc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 145564,
      "upload_time": "2019-03-13T17:29:32",
      "upload_time_iso_8601": "2019-03-13T17:29:32.250789Z",
      "url": "https://files.pythonhosted.org/packages/ea/19/9f463e48188838d8cae3b4dcb763dbc4b3e28f5aadf864bd9ee524390977/django-ucamlookup-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}