{
  "info": {
    "author": "Grant Hussey",
    "author_email": "grant.hussey@nyulangone.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MitoScripts\n\nThis Python package, **MitoScripts**, assists in quantifies mitochondrial morphology. It was written by me, Grant Hussey, as a rotation project in the Holt Lab at NYU Langone Health's Institute of Molecular Biomedicine. \n\nThis package first requires data to be processed into 3D models by using [MitoGraph](https://github.com/vianamp/MitoGraph), an open-source software developed by [Matheus Viana](https://sites.google.com/site/vianamp/).\n\nThis build of MitoScripts works for MitoGraph v3, and was tested on mammilian cells.\n\n ## General Notes and Procedure\n\n MitoGraph is a software that takes z-stack images of mitochondria and produces a 3D model. This Python package, _MitoScripts_, takes the output from MitoGraph and quantifies it.\n\n### Steps \n\n<a name=\"step1\"></a>**1. Acquire your data.**\n\n*Be sure to have a consistent naming scheme for these image files that do not repeat, in order to automate the quantification process downstream.*\n\n <a name=\"step2\"></a>**2. Process your data through MitoGraph.**\n\n**3. Run MitoScripts.**\n\nAfter MitoGraph processing is completed, you get *.gnet* and *.mitograph* files. These are used by MitoScripts to quantify mitochondrial morphology.\n\nFirst, gather the *.gnet* and *.mitograph* files into a single directory. Next, import the python package, which has three modules, [mitographer](#mtgrapher), [mitodata](#mt), and [mitopca](#mtpca). You will most likely only interface with **mitographer**.\n\nAs of now, MitoScripts works best if used in scientific mode in an IDE or a jupyter notebook.\n\n`` import mitodata as mt ``\n\n`` import mitographer as mtgrapher ``\n\n`` import mitopca as mtpca``\n\n**4. Run the analysis of choice.**\n\n&nbsp;\n\n# What MitoScripts Can Do\n\n##  <a name=\"mtgrapher\"></a> MitoGrapher module\n\nThis is the most self-explainatory MitoScripts module. Interface with it to produce automated graphs based on your MitoGraph outputs, *.gnet* and *.mitograph* files.\n\n`create_graph_suite` takes `data_dir`, `data_name`, `name_dict`, and `savefigs`. Produces a scattered box plot graph for a plethora of quantifiable metrics from MitoGraph. This function **returns a Pandas DataFrame** containing the extracted metrics. **Keep this DataFrame for downstream analysis.**\n\n* `data_dir`: the directory of your *.gnet* and *.mitograph* files.\n* `data_name`: a user-defined name unique to the experiment (for example, \"20oct19_treatment_with_chemical_x\")\n* `name_dict`: a [user-defined dictionary that maps your filenames to their respective labels](#name_dic).\n* `savefigs`: set this to `True` to save figures inside of your current directory.\n\n\n`pca_suite` takes `df`, or the DataFrame returned by `create_graph_suite`, and runs a PCA analysis. It also creates a scree plot and a centroid plot (where the centroid of each cluster is graphed instead of the points). It takes `df`, `to_drop`, and `style`.\n\n* `df`: as explained above\n* `to_drop`: defaults to None. If None, will initialize to the automated output of `get_default_col_to_drop`. This removes 1) redundant metrics and 2) irrevelant metrics. Set to a user-defined list if you want to customize the metrics used by MitoPCA.\n\n* `style`: defaults to \"tableau-colorblind10\", a Seaborn style, as defined in the global variable `DEFAULT_STYLE`. \n\n`scatter_length_distribution` takes `data_dir`, `data_name`, `name_dict`, and `savefigs`. Variable definitions are the same as above. This function will create a heatmap that displays the individual distributions of each image to visualize distribution of lengths in each image's greater mitochondrial network.\n\n\n ## <a name=\"mt\"></a>  MitoData module\n\nThis is the main backbone of the MitoGrapher module. Of note, there may be one function you'd interface with:\n\n`analyze_images` takes `data_dir`, `name_dict`, and `data_name` and produces the `df` explained above.\n\n ##  <a name=\"mitopca\"></a> MitoPCA module\n\nThis module is the backbone of `mitographer.pca_suite`. There is one notable function:\n\n`run_special_pca` uses an algorithm to drop columns producing the most dissimilarity in the data, then displays the resultant data's PCA graph. It takes `df`, `threshold`, `min_cols`.\n\n`threshold` and `min_cols` work in tandem. They define two different conditions that the algorithm will stop. `threshold` defines the max cutoff for PC 1's explained variance ratio, while `min_cols` defines the min number of columns in `df` you wish to keep in the final DataFrame. \n\nFor example, let's say I have a DataFrame with 20 columns. The algorithm will start deleting columns that produce the most dissimiliarity. If deleting a column makes PC1's explanied variance ratio greater than `threshold`, it will stop deleting columns, then run a final PCA.\n\nIf `threshold` is not met, then the loop will continue.\n\nSimiarly, the algorithm checks each loop if you've whittled the DataFrame down below `min_cols`. If so, the algorithm will also stop deleting columns and run a final PCA.\n\n&nbsp;\n\n\n# Other Things\n\n### A longer description on `name_dict`\n\n <a name=\"name_dic\"></a> `name_dict` has key:value pairs as filename:treatment_name. For example, lets say you're treating cells with hydrogen peroxide and seeing if there is a change in mitochondrial morphology. You need to save your images in the form of \"control_000\", \"control_001\", \"control_nnn\" and \"h2o2_000\", \"h2o2_001\", \"h2o2_nnn\", then create a name_dict like so: \n\n``\nname_dict = {\n    'control':'Control Group',\n    'h2o2':'With Hydrogen Peroxide'\n}\n``\n\nThis way, your graphs and variables will be displayed with the nicer headers \"Control Group\" and \"With Hydrogen Peroxide.\"\n\n---\n\n### Extended notes for each step\n\n[For Step 1](#step1): \nRead the papers on MitoGraph (namely [this one](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6322684/)) to follow best imaging practices for good MitoGraph results. \n\n[For Step 2](#step2): \nIf you wish to use the normal MitoGraph pipeline, please see [MitoGraph's github repo](https://github.com/vianamp/MitoGraph) for procedure. You may skip to the next step.\n\nOtherwise, if curious, I have provided here my own ImageJ macros based upon those supplied by Matheus that were useful in my pipeline. In order of use: \n\n*Tiff_and_MaxProfs.ijm*: This macro takes a directory of *.nd2* files, the output of our confocal microscope, and produces a *.tif* image for each file. Next, it take sthe *.tif* files and produces a new z-stack containing max projections of each image. *Use case:* In the MitoGraph pipeline, you need to create such a z-stack to assist in cropping out individual cells from each image.\n\n*CropCells_Complete.ijm*: This macro takes a directory containing the *.tif* files from above, the max projection from above, and an ROISet.zip file containing ROIs for each cell (user-defined) and crops out the ROIs, creating one new *.tif* image per ROI. *Use case:* In my pipeline, I need not only a directory containing each one file per cell ROI, as is used in the normal MitoGraph pipeline, but also a directory of directories where each directory contains a single ROI. This extra \"directory of directories\" is used on the compute cluster offered at my institution.\n\n*createMontage.ijm*: This macro creates a montage directly comparing the *.png* file output from MitoGraph (which displays the mitochondrial segmentation) to the original *.tif* for manual quality control. *Use case:* Post-MitoGraph processing, use this to see if any catastrophic segmentation errors occured.\n\n---\n\n**Dependencies**: 'numpy', 'pandas', 'scikit-learn', 'igraph', 'matplotlib', 'seaborn'. Please import these into your environment.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/granthussey/MitoScripts",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mitoscripts",
    "package_url": "https://pypi.org/project/mitoscripts/",
    "platform": "",
    "project_url": "https://pypi.org/project/mitoscripts/",
    "project_urls": {
      "Homepage": "https://github.com/granthussey/MitoScripts"
    },
    "release_url": "https://pypi.org/project/mitoscripts/1.0.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "scikit-learn",
      "igraph",
      "matplotlib",
      "seaborn"
    ],
    "requires_python": ">=3.6",
    "summary": "To assist in quantifying mitochondrial morphology",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6319622,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f040bb77a20354b35db85e680bb67ce47ffbd71606461f8d9c74edfdd07484e",
        "md5": "14d2ed89b8f1354e2a9b749193d92c59",
        "sha256": "01447b378326e367e2dd029777decf392856ae47c8c674f0f16a60dc26c1962d"
      },
      "downloads": -1,
      "filename": "mitoscripts-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14d2ed89b8f1354e2a9b749193d92c59",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4402,
      "upload_time": "2019-12-17T15:10:36",
      "upload_time_iso_8601": "2019-12-17T15:10:36.670627Z",
      "url": "https://files.pythonhosted.org/packages/6f/04/0bb77a20354b35db85e680bb67ce47ffbd71606461f8d9c74edfdd07484e/mitoscripts-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39aed78f9e8f7415218a0cfd6ae64b362b835a81f30bd33b3e4d37c7b8b782d1",
        "md5": "8b7185f9983f2ac6fc82b8b401f6cd7f",
        "sha256": "24fdb92503824bd22a83e529c0969eae68991d71339ec1c85c7533893442da99"
      },
      "downloads": -1,
      "filename": "mitoscripts-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8b7185f9983f2ac6fc82b8b401f6cd7f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4732,
      "upload_time": "2019-12-17T15:10:39",
      "upload_time_iso_8601": "2019-12-17T15:10:39.122815Z",
      "url": "https://files.pythonhosted.org/packages/39/ae/d78f9e8f7415218a0cfd6ae64b362b835a81f30bd33b3e4d37c7b8b782d1/mitoscripts-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}