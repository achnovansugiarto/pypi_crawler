{
  "info": {
    "author": "Rahul Bhargava",
    "author_email": "rahulb@media.mit.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "MediaCloud Python API Client\n============================\n\nThis is the source code of the python client for the `MediaCloud API\nv2 <https://github.com/berkmancenter/mediacloud/blob/master/doc/api_2_0_spec/api_2_0_spec.md>`__.\n\nUsage\n-----\n\nFirst `sign up for an API\nkey <https://core.mediacloud.org/login/register>`__. Then\n\n::\n\n    pip install mediacloud\n\nExamples\n--------\n\nTo get the first 2000 the stories associated with a query and dump the\noutput to json:\n\n.. code:: python\n\n    import mediacloud, json, datetime\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n\n    fetch_size = 1000\n    stories = []\n    last_processed_stories_id = 0\n    while len(stories) < 2000:\n        fetched_stories = mc.storyList('( obama AND policy ) OR ( whitehouse AND policy)', \n                                       solr_filter=[ mc.publish_date_query( datetime.date(2013,1,1), datetime.date(2015,1,1)), \n                                                                             'media_sets_id:1'],\n                                        last_processed_stories_id=last_processed_stories_id, rows= fetch_size)\n        stories.extend( fetched_stories)\n        if len( fetched_stories) < fetch_size:\n            break\n        \n        last_processed_stories_id = stories[-1]['processed_stories_id']\n        \n    print json.dumps(stories)\n\nFind out how many sentences in the US mainstream media that mentioned\n\"Zimbabwe\" and \"president\" in 2013:\n\n.. code:: python\n\n    import mediacloud, datetime\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n    res = mc.sentenceCount('( zimbabwe AND president)', solr_filter=[mc.publish_date_query( datetime.date( 2013, 1, 1), datetime.date( 2014, 1, 1) ), 'media_sets_id:1' ])\n    print res['count'] # prints the number of sentences found\n\nAlternatively, this query could be specified as follows\n\n.. code:: python\n\n    import mediacloud\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n    mc.sentenceCount('( zimbabwe AND president)', '+publish_date:[2013-01-01T00:00:00Z TO 2014-01-01T00:00:00Z} AND +media_sets_id:1')\n    print res['count']\n\nFind the most commonly used words in sentences from the US mainstream\nmedia that mentioned \"Zimbabwe\" and \"president\" in 2013:\n\n.. code:: python\n\n    import mediacloud, datetime\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n    words = mc.wordCount('( zimbabwe AND president)',  solr_filter=[mc.publish_date_query( datetime.date( 2013, 1, 1), datetime.date( 2014, 1, 1) ), 'media_sets_id:1' ] )\n    print words[0]  #prints the most common word\n\nTo find out all the details about one particular story by id:\n\n.. code:: python\n\n    import mediacloud\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n    story = mc.story(169440976)\n    print story['url']  # prints the url the story came from\n\nTo save the first 100 stories from one day to a database:\n\n.. code:: python\n\n    import mediacloud, datetime\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n    db = mediacloud.storage.MongoStoryDatabase('one_day')\n    stories = mc.storyList(mc.publish_date_query( datetime.date (2014, 01, 01), datetime.date(2014,01,02) ), last_processed_stories_id=0,rows=100)\n    [db.addStory(s) for story in stories]\n    print db.storyCount()\n\nTake a look at the ``apitest.py`` and ``storagetest.py`` for more\ndetailed examples.\n\nDevelopment\n-----------\n\nIf you are interested in adding code to this module, first clone `the\nGitHub repository <https://github.com/c4fcm/MediaCloud-API-Client>`__.\n\nTesting\n-------\n\nFirst run all the tests. Copy ``mc-client.config.template`` to\n``mc-client.config`` and edit it. Then run ``python tests.py``. Notice\nyou get a ``mediacloud-api.log`` that tells you about each query it\nruns.\n\nDistribution\n------------\n\n1. Run ``python test.py`` to make sure all the test pass\n2. Update the version number in ``mediacloud/__init__.py``\n3. Make a brief note in the version history section in the README file\n   about the changes\n4. Run ``python setup.py sdist`` to test out a version locally\n5. Then run ``python setup.py sdist upload -r pypitest`` to release a\n   test version to PyPI's test server\n6. Run ``pip install -i https://testpypi.python.org/pypi mediacloud``\n   somewhere and then use it with Python to make sure the test release\n   works.\n7. When you're ready to push to pypi run\n   ``python setup.py sdist upload -r pypi``\n8. Run ``pip install mediacloud`` somewhere and then try it to make sure\n   it worked.\n\nVersion History\n---------------\n\n-  **v2.26.1**: chunk sentence tag calls to avoid URI length limit in\n   PUT requests\n-  **v2.26.0**: add storyCount endpoint, cleanup some failing test cases\n-  **v2.25.0**: add mediaHealth endpoint, support ``ap_stories_id`` flag\n   in storiesList, fix ``controversy_dump_time_slices`` endpoint, remove\n   mediaSet and Dashboard endpoints\n-  **v2.24.1**: fixes tab/spaces bug\n-  **v2.24.0**: adds new params to the ``mediaList`` query (searching by\n   controversy, solr query, tags\\_id, etc)\n-  **v2.23.0**: adds solr date generation helpers\n-  **v2.22.2**: fixes the PyPI readme\n-  **v2.22.1**: moves ``sentenceList`` to the admin client, preps for\n   PyPI release\n-  **v2.22.0**: adds the option to enable ``all_fields`` at the API\n   client level (ie. for all requests)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://mediacloud.org",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mediacloud",
    "package_url": "https://pypi.org/project/mediacloud/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mediacloud/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://mediacloud.org"
    },
    "release_url": "https://pypi.org/project/mediacloud/2.26.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "MediaCloud API Client Library",
    "version": "2.26.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17500262,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e22823d3c78ba87661fc93eee89568ca80d4526badc23a2f01881e1d23fe2660",
        "md5": "65ecc6db24c6de5720ff289fa3146eaa",
        "sha256": "90d82af97565a0bfee244956bc04a340642927408ba8277f7733364da5820806"
      },
      "downloads": -1,
      "filename": "mediacloud-2.26.1.tar.gz",
      "has_sig": false,
      "md5_digest": "65ecc6db24c6de5720ff289fa3146eaa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19569,
      "upload_time": "2016-04-15T16:08:11",
      "upload_time_iso_8601": "2016-04-15T16:08:11.761552Z",
      "url": "https://files.pythonhosted.org/packages/e2/28/23d3c78ba87661fc93eee89568ca80d4526badc23a2f01881e1d23fe2660/mediacloud-2.26.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}