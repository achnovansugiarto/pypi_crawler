{
  "info": {
    "author": "Rahul Bhargava",
    "author_email": "rahulb@media.mit.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "MediaCloud Python API Client\n============================\n\nThis is the source code of the python client for the [MediaCloud API v2](https://github.com/berkmancenter/mediacloud/blob/master/doc/api_2_0_spec/api_2_0_spec.md).\n\nUsage\n-----\n\nFirst [sign up for an API key](https://core.mediacloud.org/login/register).  Then\n```\npip install mediacloud\n```\n\nExamples\n--------\n\nTo get the first 2000 the stories associated with a query and dump the output to json:\n```python\nimport mediacloud, json, datetime\nmc = mediacloud.api.MediaCloud('MY_API_KEY')\n\nfetch_size = 1000\nstories = []\nlast_processed_stories_id = 0\nwhile len(stories) < 2000:\n    fetched_stories = mc.storyList('( obama AND policy ) OR ( whitehouse AND policy)', \n                                   solr_filter=[ mc.publish_date_query( datetime.date(2013,1,1), datetime.date(2015,1,1)), \n                                                                         'tags_id_media:1'],\n                                    last_processed_stories_id=last_processed_stories_id, rows= fetch_size)\n    stories.extend( fetched_stories)\n    if len( fetched_stories) < fetch_size:\n        break\n    \n    last_processed_stories_id = stories[-1]['processed_stories_id']\n    \nprint json.dumps(stories)\n```\n\nFind out how many sentences in the US mainstream media that mentioned \"Zimbabwe\" and \"president\" in 2013:\n```python\nimport mediacloud, datetime\nmc = mediacloud.api.MediaCloud('MY_API_KEY')\nres = mc.sentenceCount('( zimbabwe AND president)', solr_filter=[mc.publish_date_query( datetime.date( 2013, 1, 1), datetime.date( 2014, 1, 1) ), 'tags_id_media:1' ])\nprint res['count'] # prints the number of sentences found\n```\n\nAlternatively, this query could be specified as follows\n```python\nimport mediacloud\nmc = mediacloud.api.MediaCloud('MY_API_KEY')\nmc.sentenceCount('( zimbabwe AND president)', '+publish_date:[2013-01-01T00:00:00Z TO 2014-01-01T00:00:00Z} AND +tags_id_media:1')\nprint res['count']\n```\n\nFind the most commonly used words in sentences from the US mainstream media that mentioned \"Zimbabwe\" and \"president\" in 2013:\n```python\nimport mediacloud, datetime\nmc = mediacloud.api.MediaCloud('MY_API_KEY')\nwords = mc.wordCount('( zimbabwe AND president)',  solr_filter=[mc.publish_date_query( datetime.date( 2013, 1, 1), datetime.date( 2014, 1, 1) ), 'tags_id_media:1' ] )\nprint words[0]  #prints the most common word\n```\n\nTo find out all the details about one particular story by id:\n```python\nimport mediacloud\nmc = mediacloud.api.MediaCloud('MY_API_KEY')\nstory = mc.story(169440976)\nprint story['url']  # prints the url the story came from\n```\n\nTo save the first 100 stories from one day to a database:\n```python\nimport mediacloud, datetime\nmc = mediacloud.api.MediaCloud('MY_API_KEY')\ndb = mediacloud.storage.MongoStoryDatabase('one_day')\nstories = mc.storyList(mc.publish_date_query( datetime.date (2014, 01, 01), datetime.date(2014,01,02) ), last_processed_stories_id=0,rows=100)\n[db.addStory(s) for story in stories]\nprint db.storyCount()\n```\n\nTake a look at the `apitest.py` and `storagetest.py` for more detailed examples.\n\nDevelopment\n-----------\n\nIf you are interested in adding code to this module, first clone [the GitHub repository](https://github.com/c4fcm/MediaCloud-API-Client).\n\n## Testing\n\nFirst run all the tests.  Copy `mc-client.config.template` to `mc-client.config` and edit it.\nThen run `python tests.py`. Notice you get a `mediacloud-api.log` that tells you about each query it runs.\n\n## Distribution\n\n1. Run `python test.py` to make sure all the test pass\n2. Update the version number in `mediacloud/__init__.py`\n3. Make a brief note in the version history section in the README file about the changes\n4. Run `python setup.py sdist` to test out a version locally\n5. Then run `python setup.py sdist upload -r pypitest` to release a test version to PyPI's test server\n6. Run `pip install -i https://testpypi.python.org/pypi mediacloud` somewhere and then use it with Python to make sure the test release works.\n7. When you're ready to push to pypi run `python setup.py sdist upload -r pypi`\n8. Run `pip install mediacloud` somewhere and then try it to make sure it worked.\n\nVersion History\n---------------\n\n* __v2.35.3__: fixes to clear_others support in tag* calls\n* __v2.35.2__: fixes to updateMedia\n* __v2.35.1__: fixes to createTagSet\n* __v2.35.0__: tons of new source-related endpoints\n* __v2.34.0__: new permissons endpoints\n* __v2.33.1__: move topic endpoints to standard client so users can run them\n* __v2.33.0__: lots of new api endpoints for topic management\n* __v2.32.0__: fix links in topicStoryList and topicMediaList\n* __v2.31.0__: migrate dumpsList and timesliceList to snapshotList and timespanList\n* __v2.30.0__: migrate controversyList and controversy to topicList and topic \n* __v2.29.1__: fixes to topicWordCount method return value\n* __v2.29.0__: add topicSentenceCount, and paging for topicMediaList & topicStoriesList endpoints\n* __v2.28.0__: add storyWordMatrix, support long queries via POST automatically\n* __v2.27.0__: first topic endpoints\n* __v2.26.1__: chunk sentence tag calls to avoid URI length limit in PUT requests\n* __v2.26.0__: add storyCount endpoint, cleanup some failing test cases\n* __v2.25.0__: add mediaHealth endpoint, support `ap_stories_id` flag in storiesList, fix `controversy_dump_time_slices` endpoint, remove mediaSet and Dashboard endpoints\n* __v2.24.1__: fixes tab/spaces bug\n* __v2.24.0__: adds new params to the `mediaList` query (searching by controversy, solr query, tags_id, etc)\n* __v2.23.0__: adds solr date generation helpers\n* __v2.22.2__: fixes the PyPI readme\n* __v2.22.1__: moves `sentenceList` to the admin client, preps for PyPI release\n* __v2.22.0__: adds the option to enable `all_fields` at the API client level (ie. for all requests)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://mediacloud.org",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mediacloud",
    "package_url": "https://pypi.org/project/mediacloud/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mediacloud/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://mediacloud.org"
    },
    "release_url": "https://pypi.org/project/mediacloud/2.35.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "MediaCloud API Client Library",
    "version": "2.35.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17500262,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43009499eb3c1126f0ec0d06054f1995ff5fbd6ecc343f4a5f3103c0ef372655",
        "md5": "0049929499e0e50cf967ca5dc6cfb74c",
        "sha256": "f0d28a1226bc734903c80e26ed8a110b49bedc550890c224e5b16c95f8f0b3a9"
      },
      "downloads": -1,
      "filename": "mediacloud-2.35.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0049929499e0e50cf967ca5dc6cfb74c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24123,
      "upload_time": "2016-12-21T17:33:56",
      "upload_time_iso_8601": "2016-12-21T17:33:56.234176Z",
      "url": "https://files.pythonhosted.org/packages/43/00/9499eb3c1126f0ec0d06054f1995ff5fbd6ecc343f4a5f3103c0ef372655/mediacloud-2.35.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}