{
  "info": {
    "author": "Rahul Bhargava",
    "author_email": "rahulb@media.mit.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "MediaCloud Python API Client\n============================\n\nThis is the source code of the python client for the `MediaCloud API\nv2 <https://github.com/berkmancenter/mediacloud/blob/master/doc/api_2_0_spec/api_2_0_spec.md>`__.\n\nUsage\n-----\n\nFirst `sign up for an API\nkey <https://core.mediacloud.org/login/register>`__. Then\n\n::\n\n    pip install mediacloud\n\nExamples\n--------\n\nTo get the first 2000 the stories associated with a query and dump the\noutput to json:\n\n.. code:: python\n\n    import mediacloud, json, datetime\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n\n    fetch_size = 1000\n    stories = []\n    last_processed_stories_id = 0\n    while len(stories) < 2000:\n        fetched_stories = mc.storyList('( obama AND policy ) OR ( whitehouse AND policy)', \n                                       solr_filter=[ mc.publish_date_query( datetime.date(2013,1,1), datetime.date(2015,1,1)), \n                                                                             'tags_id_media:1'],\n                                        last_processed_stories_id=last_processed_stories_id, rows= fetch_size)\n        stories.extend( fetched_stories)\n        if len( fetched_stories) < fetch_size:\n            break\n        \n        last_processed_stories_id = stories[-1]['processed_stories_id']\n        \n    print json.dumps(stories)\n\nFind out how many sentences in the US mainstream media that mentioned\n\"Zimbabwe\" and \"president\" in 2013:\n\n.. code:: python\n\n    import mediacloud, datetime\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n    res = mc.sentenceCount('( zimbabwe AND president)', solr_filter=[mc.publish_date_query( datetime.date( 2013, 1, 1), datetime.date( 2014, 1, 1) ), 'tags_id_media:1' ])\n    print res['count'] # prints the number of sentences found\n\nAlternatively, this query could be specified as follows\n\n.. code:: python\n\n    import mediacloud\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n    results = mc.sentenceCount('( zimbabwe AND president)', '+publish_date:[2013-01-01T00:00:00Z TO 2014-01-01T00:00:00Z} AND +tags_id_media:1')\n    print results['count']\n\nFind the most commonly used words in sentences from the US mainstream\nmedia that mentioned \"Zimbabwe\" and \"president\" in 2013:\n\n.. code:: python\n\n    import mediacloud, datetime\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n    words = mc.wordCount('( zimbabwe AND president)',  solr_filter=[mc.publish_date_query( datetime.date( 2013, 1, 1), datetime.date( 2014, 1, 1) ), 'tags_id_media:1' ] )\n    print words[0]  #prints the most common word\n\nTo find out all the details about one particular story by id:\n\n.. code:: python\n\n    import mediacloud\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n    story = mc.story(169440976)\n    print story['url']  # prints the url the story came from\n\nTo save the first 100 stories from one day to a database:\n\n.. code:: python\n\n    import mediacloud, datetime\n    mc = mediacloud.api.MediaCloud('MY_API_KEY')\n    db = mediacloud.storage.MongoStoryDatabase('one_day')\n    stories = mc.storyList(mc.publish_date_query( datetime.date (2014, 01, 01), datetime.date(2014,01,02) ), last_processed_stories_id=0,rows=100)\n    [db.addStory(s) for s in stories]\n    print db.storyCount()\n\nTake a look at the ``apitest.py`` and ``storagetest.py`` for more\ndetailed examples.\n\nDevelopment\n-----------\n\nIf you are interested in adding code to this module, first clone `the\nGitHub repository <https://github.com/c4fcm/MediaCloud-API-Client>`__.\n\nTesting\n-------\n\nFirst run all the tests. Copy ``mc-client.config.template`` to\n``mc-client.config`` and edit it. Then run ``python tests.py``. Notice\nyou get a ``mediacloud-api.log`` that tells you about each query it\nruns.\n\nDistribution\n------------\n\n1. Run ``python test.py`` to make sure all the test pass\n2. Update the version number in ``mediacloud/__init__.py``\n3. Make a brief note in the version history section in the README file\n   about the changes\n4. Run ``python setup.py sdist`` to test out a version locally\n5. Then run ``python setup.py sdist upload -r pypitest`` to release a\n   test version to PyPI's test server\n6. Run ``pip install -i https://testpypi.python.org/pypi mediacloud``\n   somewhere and then use it with Python to make sure the test release\n   works.\n7. When you're ready to push to pypi run\n   ``python setup.py sdist upload -r pypi``\n8. Run ``pip install mediacloud`` somewhere and then try it to make sure\n   it worked.\n\nVersion History\n---------------\n\n-  **v2.49.0**: fix return value in ``topicReset``\n-  **v2.48.0**: add dangerous ``topicReset`` function\n-  **v2.47.0**: add labelled metadata to story list results\n-  **v2.46.0**: add labelled metadata to media list and media results\n-  **v2.45.0**: add new ``max_stories`` param to topic read, create and\n   update endpoints\n-  **v2.44.0**: add new ``storyIsSyndicatedFromAP`` endpoint and tests\n-  **v2.43.3**: fix source suggestion collection support\n-  **v2.43.2**: fix raw story detail cliff and nytlabels endpoints\n-  **v2.43.1**: make JSON posts py3 compatible\n-  **v2.43.0**: topicList limit option, story-update endpoint, remove\n   story coreNLP support, remove sentence-level tagging\n-  **v2.42.0**: add is\\_logogram option to topic creation and updating\n-  **v2.41.0**: updates to topic stories and media sorting, and\n   ngram\\_size param to word count endpoints\n-  **v2.40.1**: auth api fixes\n-  **v2.40.0**: add support for listing topics by name, or by if they\n   are public or not\n-  **v2.39.2**: work on feed-related calls\n-  **v2.39.1**: fix topicMediaList to accept q as a param\n-  **v2.39.0**: new user reg endpoints, handle unicode in GET queries\n   better\n-  **v2.38.2**: don't default wordcount to English\n-  **v2.38.1**: fix bug in mediaSuggestionsMark for approving media\n   suggestions\n-  **v2.38.0**: add topic media map support\n-  **v2.37.0**: media source feed scraping, topic create/update,\n   snapshot generate, mediaUpdate change\n-  **v2.36.2**: fixed defaults on updateTag\n-  **v2.36.1**: fixed system stats endpoint\n-  **v2.36.0**: added mediaSuggest workflow endpoints\n-  **v2.35.6**: mediaCreate fixes, storyList feed support\n-  **v2.35.5**: create media fixes\n-  **v2.35.4**: create collection fixes\n-  **v2.35.3**: fixes to clear\\_others support in tag\\* calls\n-  **v2.35.2**: fixes to updateMedia\n-  **v2.35.1**: fixes to createTagSet\n-  **v2.35.0**: tons of new source-related endpoints\n-  **v2.34.0**: new permissons endpoints\n-  **v2.33.1**: move topic endpoints to standard client so users can run\n   them\n-  **v2.33.0**: lots of new api endpoints for topic management\n-  **v2.32.0**: fix links in topicStoryList and topicMediaList\n-  **v2.31.0**: migrate dumpsList and timesliceList to snapshotList and\n   timespanList\n-  **v2.30.0**: migrate controversyList and controversy to topicList and\n   topic\n-  **v2.29.1**: fixes to topicWordCount method return value\n-  **v2.29.0**: add topicSentenceCount, and paging for topicMediaList &\n   topicStoriesList endpoints\n-  **v2.28.0**: add storyWordMatrix, support long queries via POST\n   automatically\n-  **v2.27.0**: first topic endpoints\n-  **v2.26.1**: chunk sentence tag calls to avoid URI length limit in\n   PUT requests\n-  **v2.26.0**: add storyCount endpoint, cleanup some failing test cases\n-  **v2.25.0**: add mediaHealth endpoint, support ``ap_stories_id`` flag\n   in storiesList, fix ``controversy_dump_time_slices`` endpoint, remove\n   mediaSet and Dashboard endpoints\n-  **v2.24.1**: fixes tab/spaces bug\n-  **v2.24.0**: adds new params to the ``mediaList`` query (searching by\n   controversy, solr query, tags\\_id, etc)\n-  **v2.23.0**: adds solr date generation helpers\n-  **v2.22.2**: fixes the PyPI readme\n-  **v2.22.1**: moves ``sentenceList`` to the admin client, preps for\n   PyPI release\n-  **v2.22.0**: adds the option to enable ``all_fields`` at the API\n   client level (ie. for all requests)\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://mediacloud.org",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mediacloud",
    "package_url": "https://pypi.org/project/mediacloud/",
    "platform": "",
    "project_url": "https://pypi.org/project/mediacloud/",
    "project_urls": {
      "Homepage": "http://mediacloud.org"
    },
    "release_url": "https://pypi.org/project/mediacloud/2.49.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MediaCloud API Client Library",
    "version": "2.49.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17500262,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00eb5910694037d503b2e092057e6762b36ffdf0e0e5c84f3da0f20654390825",
        "md5": "40c1f99c90efb9a2c8061ac13604cbd5",
        "sha256": "0ac706b6cf9216424bdc4e8c5da48e0ca1e3256b3ea3e73536b7b5e9733fcca4"
      },
      "downloads": -1,
      "filename": "mediacloud-2.49.0.tar.gz",
      "has_sig": false,
      "md5_digest": "40c1f99c90efb9a2c8061ac13604cbd5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28553,
      "upload_time": "2018-03-06T14:23:49",
      "upload_time_iso_8601": "2018-03-06T14:23:49.954083Z",
      "url": "https://files.pythonhosted.org/packages/00/eb/5910694037d503b2e092057e6762b36ffdf0e0e5c84f3da0f20654390825/mediacloud-2.49.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}