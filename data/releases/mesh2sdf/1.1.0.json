{
  "info": {
    "author": "Peng-Shuai Wang",
    "author_email": "wangps@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Mesh2SDF\n\n[![downloads](https://pepy.tech/badge/mesh2sdf)](https://pepy.tech/project/mesh2sdf)\n[![PyPI](https://img.shields.io/pypi/v/mesh2sdf)](https://pypi.org/project/mesh2sdf/)\n\n\nConverts an input mesh to a signed distance field. It can work with arbitrary\nmeshes, even **non-watertight** meshes from ShapeNet.\n\nMesh2SDF is used in our paper \n[Dual Octree Graph Networks (SIGGRAPH 2022)](https://wang-ps.github.io/dualocnn)\nto generate the training data.\n\n## Installation\n\n- Install via the following command:\n    ``` shell\n    pip install mesh2sdf\n    ```\n\n- Alternatively, install from source via the following commands.\n    ``` shell\n    git clone https://github.com/wang-ps/mesh2sdf.git\n    pip install ./mesh2sdf\n    ```\n\n## Example\n\nAfter installing `mesh2sdf`, run the following command to process an input mesh\nfrom ShapeNet:\n\n```shell\npython example/test.py\n```\n\n![Example of a mesh from ShapeNet](https://raw.githubusercontent.com/wang-ps/mesh2sdf/master/example/data/result.png)\n\n\n## How does it work?\n\n- Given an input mesh, we first compute the **unsigned** distance field with the\n  fast sweeping algorithm implemented by\n  [Christopher Batty (SDFGen)](https://github.com/christopherbatty/SDFGen).\n  Note that the unsigned distance field can always be reliably and accurately\n  computed even though the input mesh is non-watertight.\n\n- Then we extract the level sets with a small value **d** with the marching cube\n  algorithm. The extracted level sets are represented with triangle meshes and\n  are guaranteed to be manifold.\n\n- There exist multiple connected components in the extracted meshes, and we only\n  keep the mesh with the largest bounding box.\n\n- Compute the signed distance field again with the kept triangle mesh as the\n  final output. In this way, the signed distance field (SDF) is computed for a\n  non-watertight input mesh.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wang-ps/mesh2sdf",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mesh2sdf",
    "package_url": "https://pypi.org/project/mesh2sdf/",
    "platform": null,
    "project_url": "https://pypi.org/project/mesh2sdf/",
    "project_urls": {
      "Homepage": "https://github.com/wang-ps/mesh2sdf"
    },
    "release_url": "https://pypi.org/project/mesh2sdf/1.1.0/",
    "requires_dist": [
      "numpy",
      "trimesh",
      "scikit-image"
    ],
    "requires_python": ">=3.6",
    "summary": "Compute the signed distance field from an input mesh",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14888197,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea7da226039045d3271acc500a89e4504a1a95149e2124378968a68844477236",
        "md5": "0c295313f206f133183f92cdb739eaf0",
        "sha256": "9c63798c1158220409c0c34d86ab28b58dd3833a47c3cff403fda6cff39da7b1"
      },
      "downloads": -1,
      "filename": "mesh2sdf-1.1.0-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "0c295313f206f133183f92cdb739eaf0",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6",
      "size": 64698,
      "upload_time": "2022-08-26T02:08:19",
      "upload_time_iso_8601": "2022-08-26T02:08:19.067240Z",
      "url": "https://files.pythonhosted.org/packages/ea/7d/a226039045d3271acc500a89e4504a1a95149e2124378968a68844477236/mesh2sdf-1.1.0-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "613ea7192ee9e3822654d8d79a789bf06bdbc7055a39da1afbc439254ba102c5",
        "md5": "256277a9d6da4804e0c6ef70011ad2a5",
        "sha256": "6e90299e9299b36d1cd2b10018aa4f183a2fb7c7b2e60a62975b6d8f6dae57d5"
      },
      "downloads": -1,
      "filename": "mesh2sdf-1.1.0-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "256277a9d6da4804e0c6ef70011ad2a5",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.6",
      "size": 64604,
      "upload_time": "2022-08-26T02:08:20",
      "upload_time_iso_8601": "2022-08-26T02:08:20.440559Z",
      "url": "https://files.pythonhosted.org/packages/61/3e/a7192ee9e3822654d8d79a789bf06bdbc7055a39da1afbc439254ba102c5/mesh2sdf-1.1.0-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12e40c40bf04b1379816a7857f697087b40efbbe259dbffccb977f694f5f8947",
        "md5": "9c7323ae5e83a6df2300f4004809351f",
        "sha256": "a045fa9a6803a0b106db41ff415fd4d72ee39a61b4a73a89a19c3dffd13d6cb5"
      },
      "downloads": -1,
      "filename": "mesh2sdf-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9c7323ae5e83a6df2300f4004809351f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18599,
      "upload_time": "2022-08-26T02:08:21",
      "upload_time_iso_8601": "2022-08-26T02:08:21.844462Z",
      "url": "https://files.pythonhosted.org/packages/12/e4/0c40bf04b1379816a7857f697087b40efbbe259dbffccb977f694f5f8947/mesh2sdf-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}