{
  "info": {
    "author": "TU Dresden",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3"
    ],
    "description": "![BSD 3-clause](https://img.shields.io/badge/license-BSD%203--clause-blue.svg)\n![Python package](https://github.com/metricq/metricq-python/workflows/Python%20package/badge.svg)\n![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)\n[![PyPI](https://img.shields.io/pypi/v/metricq)](https://pypi.org/project/metricq/)\n![PyPI - Wheel](https://img.shields.io/pypi/wheel/metricq)\n[![Docker pulls](https://img.shields.io/docker/pulls/metricq/metricq-python.svg)](https://hub.docker.com/r/metricq/metricq-python)\n[![Documentation](https://img.shields.io/badge/docs-here-informational.svg)](https://metricq.github.io/metricq-python/)\n\n# metricq - python libraries\n\nThis is a python implementation of the MetricQ protocol.\nIt allows you to write Sources and Sinks to easily send and receive data over\nthe MetricQ infrastructure.\n\n## Installation\n\nInstall the package from PyPI:\n\n```sh\n$ pip install metricq\n```\n\n## Examples\n\nThe [`examples`](/tree/master/examples/) directory contains some basic\nexamples.\nTo play around with them, check out a copy of this repository and (in your\nfavourite venv) install their dependencies:\n\n```sh\n$ pip install -e '.[examples]'\n```\n\nA simple Source is implemented in `metricq_source.py`, as is a Sink in `metricq_sink.py`.\nWe will use the former to produce data for a metric called `test.py.dummy`, which we\nwill then receive and print with the latter.\n\nAssuming a MetricQ instance is reachable at `localhost`, configure a\nclient<sup>(consult the documentation of your favourite config provider on how\nto do that)</sup> named `source-py-dummy` to produce values with a frequence of\n0.5Hz (i.e. every 2 seconds) :\n\n```json\n{\n    \"rate\": 0.5\n}\n```\n\nTo start the Source, run:\n\n```sh\n$ ./examples/metricq_source.py --server 'amqp://localhost/' --token 'source-py-dummy'\n```\n\nThis should now send values for the metric `test.py.dummy` in 2-second intervals.\nTo see (in detail) what's going on, add `-v DEBUG` to the arguments above.\n\nOn the other side, run\n\n```sh\n$ ./examples/metricq_sink.py --server 'amqp://localhost/' --metrics 'test.py.dummy'\n```\n\nand you should see new values for the metric `test.py.dummy` appear ever 2 seconds.\n\n## Tools and utility scripts\n\nThe repository [metricq/metricq-tools](https://github.com/metricq/metricq-tools)\ncontains a collection of tools and utility scripts to monitor and administrate\na MetricQ network.\nInstall them from [PyPI](https://pypi.org/project/metricq-tools/):\n\n```\n$ pip install metricq-tools\n```\n\n## Development setup\n\nClone the repository, and in a virtual environment run\n\n```sh\n$ pip install -e '.[dev]'\n```\n\nThis will install all tools necessary for testing and linting.\nTo test code manually, run `pytest`.\nFormat code using `black` and `isort`, or lint with `flake8`.\nTo make sure a source distribution (`sdist`) contains the correct files, run `check-manifest`.\nTools are configured in `setup.cfg` respectively `pyproject.toml`.\n\nTo test code in a fresh environment, run the `tox` test harness:\n\n```sh\n$ tox\n```\n\nThis runs the same step as our CI does.\nIf `tox` passes locally there's high chances that CI steps will pass too.\n\nWe recommend to install our [pre-commit](https://pre-commit.com) hooks:\n\n```sh\n$ pre-commit install\n```\n\nThis way commits that fail tests or do not comply with our code style are rejected right away.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/metricq/metricq-python",
    "keywords": "",
    "license": "BSD 3-clause \"New\" or \"Revised License\"",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metricq",
    "package_url": "https://pypi.org/project/metricq/",
    "platform": null,
    "project_url": "https://pypi.org/project/metricq/",
    "project_urls": {
      "Homepage": "https://github.com/metricq/metricq-python"
    },
    "release_url": "https://pypi.org/project/metricq/4.0.0/",
    "requires_dist": [
      "aio-pika (>=6.7.1,~=6.7)",
      "protobuf (~=3.20.0)",
      "python-dateutil (>=2.8.1,~=2.8)",
      "yarl",
      "setuptools",
      "pytest ; extra == 'dev'",
      "pytest-asyncio ; extra == 'dev'",
      "pytest-mock ; extra == 'dev'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "isort (~=5.0) ; extra == 'dev'",
      "check-manifest ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "aiomonitor ; extra == 'dev'",
      "click ; extra == 'dev'",
      "click-log ; extra == 'dev'",
      "click-completion ; extra == 'dev'",
      "mypy (>=0.900) ; extra == 'dev'",
      "mypy-protobuf ; extra == 'dev'",
      "types-setuptools ; extra == 'dev'",
      "types-protobuf ; extra == 'dev'",
      "types-python-dateutil ; extra == 'dev'",
      "sphinx (~=4.5.0) ; extra == 'dev'",
      "sphinx-rtd-theme (~=1.0.0) ; extra == 'dev'",
      "sphinx-autodoc-typehints (~=1.18.0) ; extra == 'dev'",
      "sphinxcontrib-trio (~=1.1) ; extra == 'dev'",
      "scanpydoc (~=0.7.7) ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "sphinx (~=4.5.0) ; extra == 'docs'",
      "sphinx-rtd-theme (~=1.0.0) ; extra == 'docs'",
      "sphinx-autodoc-typehints (~=1.18.0) ; extra == 'docs'",
      "sphinxcontrib-trio (~=1.1) ; extra == 'docs'",
      "scanpydoc (~=0.7.7) ; extra == 'docs'",
      "aiomonitor ; extra == 'examples'",
      "click ; extra == 'examples'",
      "click-log ; extra == 'examples'",
      "click-completion ; extra == 'examples'",
      "black ; extra == 'lint'",
      "flake8 ; extra == 'lint'",
      "isort (~=5.0) ; extra == 'lint'",
      "check-manifest ; extra == 'lint'",
      "pre-commit ; extra == 'lint'",
      "pytest ; extra == 'test'",
      "pytest-asyncio ; extra == 'test'",
      "pytest-mock ; extra == 'test'",
      "click ; extra == 'tools'",
      "click-log ; extra == 'tools'",
      "click-completion ; extra == 'tools'",
      "humanize (~=2.5) ; extra == 'tools'",
      "python-dateutil (~=2.8) ; extra == 'tools'",
      "numpy ; extra == 'tools'",
      "termplotlib ; extra == 'tools'",
      "mypy (>=0.900) ; extra == 'typing'",
      "mypy-protobuf ; extra == 'typing'",
      "types-setuptools ; extra == 'typing'",
      "types-protobuf ; extra == 'typing'",
      "types-python-dateutil ; extra == 'typing'"
    ],
    "requires_python": ">=3.10",
    "summary": "A highly-scalable, distributed metric data processing framework based on RabbitMQ",
    "version": "4.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15956587,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "deab8e9b2724521e7ca1fef15a038f036aa30c1be2474b83946099711c5edea9",
        "md5": "e9e87e605ff38e136fdb44a0c45fa819",
        "sha256": "d18ec8aa7213745d3c6a9a4eb73476e3928e16f3edd76e778b0aba920e8917ee"
      },
      "downloads": -1,
      "filename": "metricq-4.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e9e87e605ff38e136fdb44a0c45fa819",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 65490,
      "upload_time": "2022-05-30T15:05:12",
      "upload_time_iso_8601": "2022-05-30T15:05:12.913894Z",
      "url": "https://files.pythonhosted.org/packages/de/ab/8e9b2724521e7ca1fef15a038f036aa30c1be2474b83946099711c5edea9/metricq-4.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}