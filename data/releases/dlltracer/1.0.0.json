{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "python@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Win32 (MS Windows)",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# dlltracer\r\n\r\nThe `dlltracer` tool is an assistive tool for diagnosing import errors in\r\nCPython when they are caused by DLL resolution failures on Windows.\r\n\r\nIn general, any DLL load error is reported as an `ImportError` of the top-level\r\nextension module. No more specific information is available for CPython to\r\ndisplay, which can make it difficult to diagnose.\r\n\r\nThis tool uses not-quite-documented performance events to report on the\r\nintermediate steps of importing an extension module. These events are\r\nundocumented and unsupported, so the format has been inferred by example and may\r\nchange, but until it does it will report on the loads that _actually occur_.\r\nHowever, because it can't report on loads that _never_ occur, you'll still need\r\nto do some work to diagnose the root cause of the failure.\r\n\r\nThe most useful static analysis tool is\r\n[dumpbin](https://docs.microsoft.com/cpp/build/reference/dumpbin-reference),\r\nwhich is included with Visual Studio. When passed a DLL or PYD file and the\r\n`/imports` option, it will list all dependencies that _should be_ loaded. It\r\nshows them by name, that is, before path resolution occurs.\r\n\r\n`dlltracer` performs dynamic analysis, which shows the DLLs that are loaded at\r\nruntime with their full paths. Combined with understanding the dependency\r\ngraph of your module, it is easier to diagnose why the overall import fails.\r\n\r\n\r\n# Install\r\n\r\n```\r\npip install dlltracer\r\n```\r\n\r\nWhere the `pip` command may be replaced by a more appropriate command for your\r\nenvironment, such as `python -m pip` or `pip3.9`.\r\n\r\n\r\n# Use\r\n\r\n*Note:* Regardless of how output is collected, this tool *must be run as\r\nAdministrator*. Otherwise, starting a trace will fail with a `PermissionError`.\r\nOnly one thread may be tracing across your entire machine. Because the state\r\nof traces is not well managed by Windows, this tool will attempt to stop any\r\nother running traces.\r\n\r\nA basic trace that prints messages to standard output is:\r\n\r\n```python\r\nimport dlltracer\r\nimport sys\r\n\r\nwith dlltracer.Trace(out=sys.stdout):\r\n    import module_to_trace\r\n```\r\n\r\nThe output may look like this (for `import ssl`):\r\n\r\n```\r\nLoadLibrary \\Device\\HarddiskVolume3\\Windows\\System32\\kernel.appcore.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Program Files\\Python39\\DLLs\\_ssl.pyd\r\nLoadLibrary \\Device\\HarddiskVolume3\\Windows\\System32\\crypt32.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Program Files\\Python39\\DLLs\\libcrypto-1_1.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Program Files\\Python39\\DLLs\\libssl-1_1.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Windows\\System32\\user32.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Windows\\System32\\win32u.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Windows\\System32\\gdi32.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Windows\\System32\\gdi32full.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Windows\\System32\\msvcp_win.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Windows\\System32\\imm32.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Program Files\\Python39\\DLLs\\_socket.pyd\r\nLoadLibrary \\Device\\HarddiskVolume3\\Program Files\\Python39\\DLLs\\select.pyd\r\n```\r\n\r\nA failed import may look like this (for `import ssl` but with `libcrypto-1_1.dll`\r\nmissing):\r\n\r\n```\r\nLoadLibrary \\Device\\HarddiskVolume3\\Windows\\System32\\kernel.appcore.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Program Files\\Python39\\DLLs\\_ssl.pyd\r\nLoadLibrary \\Device\\HarddiskVolume3\\Windows\\System32\\crypt32.dll\r\nLoadLibrary \\Device\\HarddiskVolume3\\Program Files\\Python39\\DLLs\\libssl-1_1.dll\r\nFailed \\Device\\HarddiskVolume3\\Windows\\System32\\crypt32.dll\r\nFailed \\Device\\HarddiskVolume3\\Program Files\\Python39\\DLLs\\libssl-1_1.dll\r\nFailed \\Device\\HarddiskVolume3\\Program Files\\Python39\\DLLs\\_ssl.pyd\r\nTraceback (most recent call last):\r\n  File \"C:\\Projects\\test-script.py\", line 28, in <module>\r\n    import ssl\r\n  File \"C:\\Program Files\\Python39\\lib\\ssl.py\", line 98, in <module>\r\n    import _ssl             # if we can't import it, let the error propagate\r\nImportError: DLL load failed while importing _ssl: The specified module could not be found.\r\n```\r\n\r\nNotice that the missing DLL is never mentioned, and so human analysis is\r\nnecessary to diagnose the root cause.\r\n\r\n## Write to file\r\n\r\nTo write output to a file-like object (anything that can be passed to the\r\n`file=` argument of `print`), pass it as the `out=` argument of `Trace`.\r\n\r\n```python\r\nimport dlltracer\r\n\r\nwith open(\"log.txt\", \"w\") as log:\r\n    with dlltracer.Trace(out=log):\r\n        import module_to_trace\r\n```\r\n\r\n\r\n## Collect to list\r\n\r\nTo collect events to an iterable object, pass `collect=True` to `Trace` and\r\nbind the context manager. The result will be a list containing event objects,\r\ntypically `dlltracer.LoadEvent` and `dlltracer.LoadFailedEvent`.\r\n\r\n```python\r\nimport dlltracer\r\n\r\nwith dlltracer.Trace(collect=True) as events:\r\n    try:\r\n        import module_to_trace\r\n    except ImportError:\r\n        # If we don't handle the error, program will exit before\r\n        # we get to inspect the events.\r\n        pass\r\n\r\n# Inspect the events after ending the trace\r\nall_loaded = {e.path for e in events if isinstance(e, dlltracer.LoadEvent)}\r\nall_failed = {e.path for e in events if isinstance(e, dlltracer.LoadFailedEvent)}\r\n```\r\n\r\n## Raise audit events\r\n\r\nTo raise audit events for DLL loads, pass `audit=True` to `Trace`. The events\r\nraised are `dlltracer.load` and `dlltracer.failed`, and both only include the\r\npath as an argument.\r\n\r\n```python\r\nimport dlltracer\r\nimport sys\r\n\r\ndef hook(event, args):\r\n    if event == \"dlltracer.load\":\r\n        # args = (path,)\r\n        print(\"Loaded\", args[0])\r\n    elif event == \"dlltracer.failed\":\r\n        # args = (path,)\r\n        print(\"Failed\", args[0])\r\n\r\nsys.add_audit_hook(hook)\r\n\r\nwith dlltracer.Trace(audit=True):\r\n    import module_to_trace\r\n```\r\n\r\n\r\n## Additional events\r\n\r\n*Note:* This is mainly intended for development of `dlltracer`.\r\n\r\nBecause event formats may change, and additional events may be of interest but\r\nare not yet handled, passing the `debug=True` option to `Trace` enables all\r\nevents to be collected, written, or audited. Regular events are suppressed.\r\n\r\n```python\r\nimport dlltracer\r\nimport sys\r\n\r\ndef hook(event, args):\r\n    if event != \"dlltracer.debug\":\r\n        return\r\n\r\n    # args schema:\r\n    #   provider is a UUID representing the event source\r\n    #   opcode is an int representing the operation\r\n    #   header is bytes taken directly from the event header\r\n    #   data is bytes taken directly from the event data\r\n    provider, opcode, header, data = args\r\n\r\nsys.add_audit_hook(hook)\r\n\r\nwith dlltracer.Trace(debug=True, audit=True, collect=True, out=sys.stderr) as events:\r\n    try:\r\n        import module_to_trace\r\n    except ImportError:\r\n        pass\r\n\r\nfor e in events:\r\n    assert isinstance(e, dlltracer.DebugEvent)\r\n    # DebugEvent contains provider, opcode, header and data as for the audit event\r\n```\r\n\r\n\r\n# Contribute\r\n\r\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n\r\n\r\n# Trademarks\r\n\r\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft \r\ntrademarks or logos is subject to and must follow \r\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\r\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\r\nAny use of third-party trademarks or logos are subject to those third-party's policies.\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/microsoft/dlltracer-python",
    "keywords": "Windows,Win32,DLL",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dlltracer",
    "package_url": "https://pypi.org/project/dlltracer/",
    "platform": null,
    "project_url": "https://pypi.org/project/dlltracer/",
    "project_urls": {
      "Bug Tracker": "https://github.com/microsoft/dlltracer-python/issues",
      "Homepage": "https://github.com/microsoft/dlltracer-python"
    },
    "release_url": "https://pypi.org/project/dlltracer/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Python module for tracing Windows DLL loads",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14204985,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85cfaf0e6de961be07a95f1988b00ecf19191cf1bb8b1584a0ac3562794e15b4",
        "md5": "16d136b11f833068934ae4e04aeeb0db",
        "sha256": "c42b9a69183886fa9dde3a2df78d4dd9476bc298ee4e02fa75abce88deba31ff"
      },
      "downloads": -1,
      "filename": "dlltracer-1.0.0-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "16d136b11f833068934ae4e04aeeb0db",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.7",
      "size": 55487,
      "upload_time": "2022-06-21T22:50:02",
      "upload_time_iso_8601": "2022-06-21T22:50:02.022423Z",
      "url": "https://files.pythonhosted.org/packages/85/cf/af0e6de961be07a95f1988b00ecf19191cf1bb8b1584a0ac3562794e15b4/dlltracer-1.0.0-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c8bdcae6dbb82d56608d8493e2ebcea4b821935c4a5ad0001f242d63fd6e097",
        "md5": "4cabe45ad926ad387b8bcff625fe735a",
        "sha256": "c73346fa418f8b107a60d0270967445f15c4cb356e916eed7d56f7b0b800bbf8"
      },
      "downloads": -1,
      "filename": "dlltracer-1.0.0-cp311-cp311-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "4cabe45ad926ad387b8bcff625fe735a",
      "packagetype": "bdist_wheel",
      "python_version": "cp311",
      "requires_python": ">=3.7",
      "size": 52626,
      "upload_time": "2022-06-21T22:51:06",
      "upload_time_iso_8601": "2022-06-21T22:51:06.955067Z",
      "url": "https://files.pythonhosted.org/packages/4c/8b/dcae6dbb82d56608d8493e2ebcea4b821935c4a5ad0001f242d63fd6e097/dlltracer-1.0.0-cp311-cp311-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1606abbe609ac30d0427e727572c329218b2b04de5dcb7cbca807e87480b85a",
        "md5": "5f4da3a4b50c038f5a3fdac6f4347117",
        "sha256": "bc06ccc881585e5f91046afd92ef8e6d941437fa7675390f3456b2437c38075c"
      },
      "downloads": -1,
      "filename": "dlltracer-1.0.0-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "5f4da3a4b50c038f5a3fdac6f4347117",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7",
      "size": 54423,
      "upload_time": "2022-06-21T22:49:17",
      "upload_time_iso_8601": "2022-06-21T22:49:17.991515Z",
      "url": "https://files.pythonhosted.org/packages/a1/60/6abbe609ac30d0427e727572c329218b2b04de5dcb7cbca807e87480b85a/dlltracer-1.0.0-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c00a8479e880cf0aef67d22d6931c7055a1f56fb75ab008a1c02cf9bd86b114a",
        "md5": "0541ed72fe739db547215aeaa0f08b5c",
        "sha256": "cfaf3f3ef8accac366c9c3809e6793a7c391f9fc8b0493b544c138829933fb9e"
      },
      "downloads": -1,
      "filename": "dlltracer-1.0.0-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "0541ed72fe739db547215aeaa0f08b5c",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.7",
      "size": 57062,
      "upload_time": "2022-06-21T22:49:00",
      "upload_time_iso_8601": "2022-06-21T22:49:00.714733Z",
      "url": "https://files.pythonhosted.org/packages/c0/0a/8479e880cf0aef67d22d6931c7055a1f56fb75ab008a1c02cf9bd86b114a/dlltracer-1.0.0-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97b12655bf3739ddb36a9c25ae0f72edb8f7f6b3cfd203b57a10d00b17fd137e",
        "md5": "052b2da58309ba4b30fb92e26049eace",
        "sha256": "8d0c2e15d38040966efc9a38e501f56ac5c62fffcc7e97da9ed37a3d215b2bca"
      },
      "downloads": -1,
      "filename": "dlltracer-1.0.0-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "052b2da58309ba4b30fb92e26049eace",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.7",
      "size": 57397,
      "upload_time": "2022-06-21T22:49:07",
      "upload_time_iso_8601": "2022-06-21T22:49:07.471255Z",
      "url": "https://files.pythonhosted.org/packages/97/b1/2655bf3739ddb36a9c25ae0f72edb8f7f6b3cfd203b57a10d00b17fd137e/dlltracer-1.0.0-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95ecc59d0a1142799b56fbbdef7ddcb963eaa612ab6718e2973b3f9f5cd6a07c",
        "md5": "aa4b8a695b9207f448d1747862a785fe",
        "sha256": "29a0987504e982b2d86ed7c89ae772037ec4ee70021177c26e3da28765213faa"
      },
      "downloads": -1,
      "filename": "dlltracer-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "aa4b8a695b9207f448d1747862a785fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 83385,
      "upload_time": "2022-06-21T22:49:05",
      "upload_time_iso_8601": "2022-06-21T22:49:05.223002Z",
      "url": "https://files.pythonhosted.org/packages/95/ec/c59d0a1142799b56fbbdef7ddcb963eaa612ab6718e2973b3f9f5cd6a07c/dlltracer-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}