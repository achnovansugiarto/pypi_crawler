{
  "info": {
    "author": "Peter Bex",
    "author_email": "peter@codeyellow.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Database",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "django-relativedelta\n====================\n\n.. image:: https://travis-ci.org/CodeYellowBV/django-relativedelta.svg?branch=master\n   :target: https://travis-ci.org/CodeYellowBV/django-relativedelta\n\nA Django field for the `dateutil.relativedelta.relativedelta <http://dateutil.readthedocs.io/en/stable/relativedelta.html>`_ class,\nwhich conveniently maps to the `PostgresQL INTERVAL type <https://www.postgresql.org/docs/current/static/datatype-datetime.html#DATATYPE-INTERVAL-INPUT>`_.\n\nThe standard `Django DurationField <https://docs.djangoproject.com/en/1.10/ref/models/fields/#durationfield>`_\nmaps to `Python's datetime.timedelta <https://docs.python.org/3/library/datetime.html#datetime.timedelta>`_, which\nhas support for days and weeks, but not for years and months.  And if you try to read an ``INTERVAL`` that contains\nmonths anyway, information is lost because each month gets converted to 30 days.\n\nYou should use this package when you need to store payment intervals\n(which tend to be monthly or quarterly), publication intervals (which\ncan be weekly but also monthly) and so on, or when you simply don't\nknow what the intervals are going to be and want to offer some\nflexibility.\n\nIf you want to use more advanced recurring dates, you should consider\nusing `django-recurrence <https://github.com/django-recurrence/django-recurrence>`_\ninstead.  This maps to the `dateutil.rrule.rrule <http://dateutil.readthedocs.io/en/stable/rrule.html>`_\nclass, but it doesn't use native database field types, so you can't\nperform arithmetic on them within the database.\n\nUsage\n-----\n\nUsing the field is straightforward.  You can add the field to your\nmodel like so:\n\n.. code:: python\n\n    from django.db import models\n    from relativedeltafield import RelativeDeltaField\n\n    class MyModel(models.Model):\n      rdfield=RelativeDeltaField()\n\nThen later, you can use it:\n\n.. code:: python\n\n    from dateutil.relativedelta import relativedelta\n\n    rd = relativedelta(months=2,days=1,hours=6)\n    my_model = MyModel(rdfield=rd)\n    my_model.save()\n\n\nOr, alternatively, you can use a string with the\n`ISO8601 \"format with designators\" time interval syntax <https://www.postgresql.org/docs/current/static/datatype-datetime.html#DATATYPE-INTERVAL-INPUT>`_:\n\n.. code:: python\n\n    from dateutil.relativedelta import relativedelta\n\n    my_model = MyModel(rdfield='P2M1DT6H')\n    my_model.save()\n\n\nFor convenience, a standard Python ``datetime.timedelta`` object is\nalso accepted:\n\n.. code:: python\n\n    from datetime import timedelta\n\n    td = timedelta(days=62,hours=6)\n    my_model = MyModel(rdfield=td)\n    my_model.save()\n\nAfter a ``full_clean()``, the object will always be converted to a\n_normalized_ ``relativedelta`` instance.  It is highly recommended\nyou use the `django-fullclean <https://github.com/fish-ball/django-fullclean>`_\napp to always force ``full_clean()`` on ``save()``, so you can be\nsure that after a ``save()``, your fields are both normalized\nand validated.\n\n\nLimitations and pitfalls\n------------------------\n\nBecause this field is backed by an ``INTERVAL`` column, it neither\nsupports the relative ``weekday``, ``leapdays``, ``yearday`` and\n``nlyearday`` arguments, nor the absolute arguments ``year``,\n``month``, ``day``, ``hour``, ``second`` and ``microsecond``.\n\nThe ``microseconds`` field is converted to a fractional ``seconds``\nvalue, which might lead to some precision loss due to floating-point\nrepresentation.\n\nThe ``weeks`` field is \"virtual\", being derived from the multiple of 7\ndays.  Thus, any week value in the input interval specification is\nconverted to days and added to the ``days`` field of the interval.\nWhen serializing back to a string, weeks will never be written.\nSimilarly, if the interval contains a multiple of 7 days, you can read\nthis back out from the ``weeks`` property.\n\nDatabases other than PostgreSQL are not supported.\n\nFor consistency reasons, when a relativedelta object is assigned to a\nRelativeDeltaField, it automatically calls ``normalized()`` on\n``full_clean``.  This ensures that the database representation is as\nsimilar to the relativedelta as possible (for instance, fractional\ndays are always converted to hours).\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CodeYellowBV/django-relativedelta",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-relativedelta",
    "package_url": "https://pypi.org/project/django-relativedelta/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-relativedelta/",
    "project_urls": {
      "Homepage": "https://github.com/CodeYellowBV/django-relativedelta"
    },
    "release_url": "https://pypi.org/project/django-relativedelta/1.1.0/",
    "requires_dist": [
      "Django (<4.0,>=1.10)",
      "python-dateutil (>=2.6.0)"
    ],
    "requires_python": "",
    "summary": "Django alternative to DurationField using dateutil.relativedelta",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8473120,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cea4f3aede8e2e036d8f73e12a691c98077876e53f3e7122a8d173b3fa1025a",
        "md5": "d93fd2e8df5e3aca1382baabb28fc3a8",
        "sha256": "cc82fda5e0053eb429d81437dbc3c2acc77db74d8702d7444e1d233c9920d6f7"
      },
      "downloads": -1,
      "filename": "django_relativedelta-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d93fd2e8df5e3aca1382baabb28fc3a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11329,
      "upload_time": "2019-12-12T14:55:54",
      "upload_time_iso_8601": "2019-12-12T14:55:54.189461Z",
      "url": "https://files.pythonhosted.org/packages/5c/ea/4f3aede8e2e036d8f73e12a691c98077876e53f3e7122a8d173b3fa1025a/django_relativedelta-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a51bb5d8dad23cf56e02d50965e1fe05e21168e653f5fda0894b382cb0c321fd",
        "md5": "c8626f49c1f23451179ed9654022d695",
        "sha256": "5178da122d2f557aa46c4927bac094e3963c4975ace4e18436d08d0e5c659642"
      },
      "downloads": -1,
      "filename": "django-relativedelta-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c8626f49c1f23451179ed9654022d695",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7392,
      "upload_time": "2019-12-12T14:55:58",
      "upload_time_iso_8601": "2019-12-12T14:55:58.400085Z",
      "url": "https://files.pythonhosted.org/packages/a5/1b/b5d8dad23cf56e02d50965e1fe05e21168e653f5fda0894b382cb0c321fd/django-relativedelta-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}