{
  "info": {
    "author": "Orinda Harrison",
    "author_email": "mitch@xently.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development"
    ],
    "description": "# Welcome to django-rest-xauth\n\n[![Build Status](https://travis-ci.com/ajharry69/django-rest-xauth.svg?branch=master)](https://travis-ci.com/ajharry69/django-rest-xauth)\n[![Coverage Status](https://coveralls.io/repos/github/ajharry69/django-rest-xauth/badge.svg?branch=master)](https://coveralls.io/github/ajharry69/django-rest-xauth?branch=master)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/5c5b5dbbe3204b3bae605d6b81800d73)](https://www.codacy.com/manual/ajharry69/django-rest-xauth?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ajharry69/django-rest-xauth&amp;utm_campaign=Badge_Grade)\n\nA [custom user model](https://docs.djangoproject.com/en/dev/topics/auth/customizing/) \nbased package with features ranging from JWT and Basic authentication to REST API end-points for signup,signin,\nemail verification, password resetting and account activation.\n\nEmail verification and password resetting are based on hashed verification-code and temporary password respectively. And \naccount activation is based on a combination of user selected security question(provided through the admin portal by site \nadministrator(superuser)) and an answer. For example, a user could configure **what is your favorite color?** security \nquestion and provide **white** as an answer then in case a users account was deactivate he/she will be required to provide \nthe same answer to the same question to re-activate a his/her account.\n\n## Classes dependency structure\n\n`TokenKey` > `Token` > `User` > `AuthenticationBackend` > `Serializer` > `View` > `url_patterns`\n\nMost of the package's features are designed to be independently usable and customizable to suit most needs.\n\n>**NOTE:** the  closer the dependency(use) get to the `url_patterns` the harder it becomes to extend and customize the \n>classes and features before it's predecessor. For example, modifying a `Serializer` without modifying it's dependant \n>`View` and still using unmodified `url_patterns` would most likely result in unexpected behaviour. But on the other \n>hand an extension to the `User` class without a dependency on it's dependant classes(`AuthenticationBackend` e.t.c) \n>will most likely work as expected.\n\n## What makes django-rest-xauth different?\n\n- Custom user class provides most common **optional** fields with reasonable complementary-helper methods e.g. \n`date_of_birth` field that also comes with an age-calculation helper method to help estimate users age\n- Access logging(IP-address should be provided as a `X-Forwarded-For` header)\n- Failed Sign-in attempts logging(IP-address should be provided as a `X-Forwarded-For` header)\n- Password-reset logging(IP-address should be provided as a `X-Forwarded-For` header)\n- Encrypted JWT tokens\n- Security question based account activation in-case account was deactivated\n- Mobile apps friendly:\n    - temporary password based user password reset\n    - verification code based user account activation.\n\n>**N/B:** _temporary passwords_ and _verification codes_ are both generated and returned from the `User` model hence \n>opting to SMS based sending of the _verification codes_ and _temporary passwords_ should be as easy as extending the \n>`User` model, overriding a single method(that also generates and returns the code) and finally changing django's \n>`AUTH_USER_MODEL` to your model name as [explained here](https://docs.djangoproject.com/en/dev/topics/auth/customizing/).\n\n## Getting started\nAdd the following to your Django project's `settings.py` file\n\n```python\nAUTH_USER_MODEL = 'xauth.User'\n\nINSTALLED_APPS = [\n'xauth'\n]\n\nXAUTH = {\n    # occasionally included in emails sent by the API to your users for familiarity\n    'APP_NAME': 'Xently',\n    'TOKEN_KEY': force_str(SECRET_KEY),\n    'TOKEN_EXPIRY': timedelta(days=60),\n    # string. Email addresses to which account / auth-related replies are to be sent.\n    # Also permitted: \"Name <email-address>\"\n    'REPLY_TO_ACCOUNTS_EMAIL_ADDRESSES': [\n        settings.EMAIL_HOST_USER\n    ],\n    # string. Email used to send verification code.\n    # Also permitted: \"Name <email-address>\"\n    'ACCOUNTS_EMAIL': settings.EMAIL_HOST_USER,\n    'ACCOUNTS_EMAIL_PASSWORD': settings.EMAIL_HOST_PASSWORD,\n    'VERIFICATION_CODE_LENGTH': 6,\n    'TEMPORARY_PASSWORD_LENGTH': 8,\n    'VERIFICATION_CODE_EXPIRY': timedelta(hours=1),\n    'TEMPORARY_PASSWORD_EXPIRY': timedelta(minutes=30),\n    'ACCOUNT_ACTIVATION_TOKEN_EXPIRY': timedelta(days=1),\n    # period within which a user is considered new since account creation date\n    'NEWBIE_VALIDITY_PERIOD': timedelta(days=1),\n    'AUTO_HASH_PASSWORD_ON_SAVE': True,\n    'WRAP_DRF_RESPONSE': True,\n    'REQUEST_TOKEN_ENCRYPTED': True,\n    'POST_REQUEST_USERNAME_FIELD': 'username',\n    'POST_REQUEST_PASSWORD_FIELD': 'password',\n    'ENFORCE_ACCOUNT_VERIFICATION': True,\n    # attempts upon which account is to be deactivated after failed sign-in attempts is reached.\n    # 0 or less means no limit\n    'MAXIMUM_SIGN_IN_ATTEMPTS': 0,\n    'VERIFICATION_ENDPOINT': 'verification-code/verify/',\n    'PASSWORD_RESET_ENDPOINT': 'password-reset/verify/',\n    'ACTIVATION_ENDPOINT': 'activation/activate/',\n    # 0 = both(encrypted&non-encrypted),1 = encrypted only, 2 = non-encrypted only\n    'RETURN_TOKEN_TYPE': 0,  \n}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ajharry69/django-rest-xauth",
    "keywords": "django django-rest-framework jwt-bearer-tokens basic-authentication encryption-decryption authorization authentication",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-xauth",
    "package_url": "https://pypi.org/project/django-rest-xauth/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-xauth/",
    "project_urls": {
      "Homepage": "https://github.com/ajharry69/django-rest-xauth",
      "Source": "https://github.com/ajharry69/django-rest-xauth"
    },
    "release_url": "https://pypi.org/project/django-rest-xauth/1.0.0/",
    "requires_dist": [
      "djangorestframework",
      "jwcrypto",
      "timeago"
    ],
    "requires_python": ">=3.6",
    "summary": "A custom user-model based package with features ranging from JWT and Basic authentication to REST API end-points for signup, signin, email verification, password resetting and account activation.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15463070,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b81e7c49c6de41f8a0895fc204b79df184c6bf22e7157447fa976e80c314122a",
        "md5": "7049e75963b296a3c547e078d30df35b",
        "sha256": "eddecf25475380d996b853bd5fcee1a81457d3f08e8a3208945983d7c129359e"
      },
      "downloads": -1,
      "filename": "django_rest_xauth-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7049e75963b296a3c547e078d30df35b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 35186,
      "upload_time": "2020-06-02T22:54:54",
      "upload_time_iso_8601": "2020-06-02T22:54:54.480500Z",
      "url": "https://files.pythonhosted.org/packages/b8/1e/7c49c6de41f8a0895fc204b79df184c6bf22e7157447fa976e80c314122a/django_rest_xauth-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c293f5439babbfece1cabe5e640c1e754f832deee9fe594bd240601502ab66b5",
        "md5": "e59cc681e210a9c7353c4c9d53f6be26",
        "sha256": "29a235024a1d3f2a3ce3c5d81a71f0de1883892fe1ec082ecc6de5cab71c9f1e"
      },
      "downloads": -1,
      "filename": "django-rest-xauth-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e59cc681e210a9c7353c4c9d53f6be26",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 29363,
      "upload_time": "2020-06-02T22:54:57",
      "upload_time_iso_8601": "2020-06-02T22:54:57.393518Z",
      "url": "https://files.pythonhosted.org/packages/c2/93/f5439babbfece1cabe5e640c1e754f832deee9fe594bd240601502ab66b5/django-rest-xauth-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}