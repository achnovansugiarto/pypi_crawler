{
  "info": {
    "author": "Joachim Ungar",
    "author_email": "joachim.ungar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "========\nMapchete\n========\n\nTile-based geodata processing.\n\n.. image:: https://badge.fury.io/py/mapchete.svg\n    :target: https://badge.fury.io/py/mapchete\n\n.. image:: https://travis-ci.org/ungarj/mapchete.svg?branch=master\n    :target: https://travis-ci.org/ungarj/mapchete\n\n.. image:: https://coveralls.io/repos/github/ungarj/mapchete/badge.svg?branch=master\n    :target: https://coveralls.io/github/ungarj/mapchete?branch=master\n\n.. image:: https://readthedocs.org/projects/mapchete/badge/?version=latest\n    :target: http://mapchete.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/pypi/pyversions/mapchete.svg\n    :target: https://pypi.python.org/pypi/mapchete\n\nMapchete processes raster and vector geodata in digestable chunks.\n\nProcessing larger amounts of data requires chunking the input data into smaller tiles\nand process them one by one. Python provides a lot of useful packages to process geodata\nlike shapely_ or numpy_. From within your process code you will have access to the geodata\nin the form of ``NumPy`` arrays for raster data or GeoJSON-like feature dictionaries for\nvector data.\n\nWith the help of fiona_ and rasterio_ Mapchete takes care about resampling and\nreprojecting geodata, applying your Python code to the tiles and writing the output either\ninto a single file or into a directory of files organized in a WMTS_-like tile pyramid.\nDetails on tiling scheme and available map projections are outlined in the\n`tiling documentation`_.\n\n.. _shapely: http://toblerity.org/shapely/\n.. _numpy: http://www.numpy.org/\n.. _fiona: https://github.com/Toblerity/Fiona\n.. _rasterio: https://github.com/mapbox/rasterio/\n.. _WMTS: https://en.wikipedia.org/wiki/Web_Map_Tile_Service\n.. _`tiling documentation`: https://mapchete.readthedocs.io/en/latest/tiling.html\n\n\n.. figure:: https://mapchete.readthedocs.io/en/latest/_images/mercator_pyramid.svg\n   :align: center\n   :target: https://mapchete.readthedocs.io/en/latest/tiling.html\n\n   (standard Web Mercator pyramid used in the web)\n\n\n-----\nUsage\n-----\n\nYou need a ``.mapchete`` file for the process configuration. The configuration is based\non the ``YAML`` syntax.\n\n.. code-block:: yaml\n\n    process: my_python_process.py  # or a Python module path: mypythonpackage.myprocess\n    zoom_levels:\n        min: 0\n        max: 12\n    input:\n        dem: /path/to/dem.tif\n        land_polygons: /path/to/polygon/file.geojson\n    output:\n        format: PNG_hillshade\n        path: /output/path\n    pyramid:\n        grid: mercator\n\n    # process specific parameters\n    resampling: cubic_spline\n\n\nYou also need either a ``.py`` file or a Python module path where you specify the process\nitself.\n\n.. code-block:: python\n\n    def execute(mp, resampling=\"nearest\"):\n\n        # Open elevation model.\n        with mp.open(\"dem\") as src:\n            # Skip tile if there is no data available or read data into a NumPy array.\n            if src.is_empty(1):\n                return \"empty\"\n            else:\n                dem = src.read(1, resampling=resampling)\n\n        # Create hillshade using a built-in hillshade function.\n        hillshade = mp.hillshade(dem)\n\n        # Clip with polygons from vector file and return result.\n        with mp.open(\"land_polygons\") as land_file:\n            return mp.clip(hillshade, land_file.read())\n\n\nYou can then interactively inspect the process output directly on a map in a\nbrowser (first, install dependencies by ``pip install mapchete[serve]`` go to\n``localhost:5000``):\n\n.. code-block:: shell\n\n    $ mapchete serve hillshade.mapchete --memory\n\n\nThe ``serve`` tool recognizes changes in your process configuration or in the\nprocess file. If you edit one of these, just refresh the browser and inspect the\nchanges (note: use the ``--memory`` flag to make sure to reprocess each tile and\nturn off browser caching).\n\nOnce you are done with editing, batch process everything using the ``execute``\ntool.\n\n.. code-block:: shell\n\n    $ mapchete execute hillshade.mapchete\n\n\n-------------\nDocumentation\n-------------\n\nThere are many more options such as zoom-dependent process parameters, metatiling, tile\nbuffers or interpolating from an existing output of a higher zoom level. For deeper\ninsights, please go to the documentation_.\n\n.. _documentation: http://mapchete.readthedocs.io/en/latest/index.html\n\nMapchete is used in many preprocessing steps for the `EOX Maps`_ layers:\n\n* Merge multiple DEMs into one global DEM.\n* Create a customized relief shade for the Terrain Layer.\n* Generalize landmasks & coastline from OSM for multiple zoom levels.\n* Extract cloudless pixel for Sentinel-2 cloudless_.\n\n.. _cloudless: https://cloudless.eox.at/\n.. _`EOX Maps`: http://maps.eox.at/\n\n\n------------\nInstallation\n------------\n\nvia PyPi:\n\n.. code-block:: shell\n\n    $ pip install mapchete\n\n\nfrom source:\n\n.. code-block:: shell\n\n    $ git clone git@github.com:ungarj/mapchete.git && cd mapchete\n    $ pip install .\n\n\n\nTo make sure Rasterio, Fiona and Shapely are properly built against your local GDAL and\nGEOS installations, don't install the binaries but build them on your system:\n\n.. code-block:: shell\n\n    $ pip install --upgrade rasterio fiona shapely --no-binary :all:\n\n\nTo keep the core dependencies minimal if you install mapchete using ``pip``, some features\nare only available if you manually install additional dependencies:\n\n.. code-block:: shell\n\n    # for contour extraction:\n    $ pip install mapchete[contours]\n\n    # for S3 bucket reading and writing:\n    $ pip install mapchete[s3]\n\n    # for mapchete serve:\n    $ pip install mapchete[serve]\n\n    # for VRT generation:\n    $ pip install mapchete[vrt]\n\n\n-------\nLicense\n-------\n\nMIT License\n\nCopyright (c) 2015 - 2021 `EOX IT Services`_\n\n.. _`EOX IT Services`: https://eox.at/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ungarj/mapchete",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mapchete",
    "package_url": "https://pypi.org/project/mapchete/",
    "platform": "",
    "project_url": "https://pypi.org/project/mapchete/",
    "project_urls": {
      "Homepage": "https://github.com/ungarj/mapchete"
    },
    "release_url": "https://pypi.org/project/mapchete/2021.10.1/",
    "requires_dist": [
      "cachetools",
      "cached-property",
      "click (<8,>=7.1.1)",
      "click-plugins",
      "click-spinner",
      "fiona (>=1.8.13.post1)",
      "fsspec",
      "importlib-metadata",
      "importlib-resources",
      "numpy (>=1.16)",
      "oyaml",
      "pyproj",
      "retry",
      "rasterio (<1.2.7,>=1.0.28)",
      "shapely",
      "tilematrix (>=0.20)",
      "tqdm",
      "matplotlib ; extra == 'complete'",
      "dask ; extra == 'complete'",
      "distributed ; extra == 'complete'",
      "geobuf ; extra == 'complete'",
      "fsspec[http] ; extra == 'complete'",
      "aiohttp ; extra == 'complete'",
      "requests ; extra == 'complete'",
      "boto3 ; extra == 'complete'",
      "fsspec[s3] ; extra == 'complete'",
      "s3fs (>=0.5.1) ; extra == 'complete'",
      "flask ; extra == 'complete'",
      "werkzeug (>=0.15) ; extra == 'complete'",
      "pystac ; extra == 'complete'",
      "lxml ; extra == 'complete'",
      "matplotlib ; extra == 'contours'",
      "dask ; extra == 'dask'",
      "distributed ; extra == 'dask'",
      "geobuf ; extra == 'geobuf'",
      "boto3 ; extra == 's3'",
      "fsspec[s3] ; extra == 's3'",
      "s3fs (>=0.5.1) ; extra == 's3'",
      "flask ; extra == 'serve'",
      "werkzeug (>=0.15) ; extra == 'serve'",
      "pystac ; extra == 'stac'",
      "lxml ; extra == 'vrt'"
    ],
    "requires_python": "",
    "summary": "Tile-based geodata processing using rasterio & Fiona",
    "version": "2021.10.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16573525,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc30af9202d7cb365087aa6384f4549231101014089da2d196150f2bb6a56e32",
        "md5": "b45be33d2b118e8f23ad3edf23983137",
        "sha256": "1f5ca1ca54c626aa80effba78a452036d754d1b5b79156837eefd1c54b0c83f4"
      },
      "downloads": -1,
      "filename": "mapchete-2021.10.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b45be33d2b118e8f23ad3edf23983137",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 139179,
      "upload_time": "2021-10-08T14:09:55",
      "upload_time_iso_8601": "2021-10-08T14:09:55.440883Z",
      "url": "https://files.pythonhosted.org/packages/dc/30/af9202d7cb365087aa6384f4549231101014089da2d196150f2bb6a56e32/mapchete-2021.10.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6adfd1bf319f5edc147494e73f7c5c57fdf5bb1082357be2a9ff79d5d358221",
        "md5": "34b3e5dc40cc8f1a116b62d7c5bf7d81",
        "sha256": "e779034a6654eab91b82376b300137dda220b43dd705114a6e95e45a516be2e6"
      },
      "downloads": -1,
      "filename": "mapchete-2021.10.1.tar.gz",
      "has_sig": false,
      "md5_digest": "34b3e5dc40cc8f1a116b62d7c5bf7d81",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 138291,
      "upload_time": "2021-10-08T14:09:58",
      "upload_time_iso_8601": "2021-10-08T14:09:58.549083Z",
      "url": "https://files.pythonhosted.org/packages/b6/ad/fd1bf319f5edc147494e73f7c5c57fdf5bb1082357be2a9ff79d5d358221/mapchete-2021.10.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}