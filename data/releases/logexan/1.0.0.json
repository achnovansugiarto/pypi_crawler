{
  "info": {
    "author": "Palani-SN",
    "author_email": "psn396@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# LogExAn (Logical Expression Analysis)\n\n- A Solver for Solving any Logical Expressions, shortly Reverse calculations of logical expressions for Analysis.\n- Check out the example code in repo ( https://github.com/Palani-SN/LogExAn ) for reference\n\n## LogAn\n\n- Generate an Output of type **Dict/Json** from any Logical expression for direct solutions.\n- Generate an Output of type **Dataframe/MarkDown** from any Logical expression for elaborate solutions\n- Sample usage of the file is as given below (Refer Examples in the repo for detailed Usage)\n\n```python\nfrom LogExAn.LogicalAnalyser import LogAn\n\nCond = \"( ( Var_new_1 == 1 ) && ( ( Var_new_4 == 7 ) || ( Var_new_9 == 12 ) ) )\";\nLA = LogAn(Cond);\n\n# Default Argument 'DICT' returns dict \nasDict = LA.solution(); \nprint('type :', type(asDict), end = '\\n\\n');\nprint(asDict, end = '\\n\\n');\n\n# Argument 'JSON' returns json formatted string (from the Dict)\nasJson = LA.solution('JSON');\nprint('type :', type(asJson), end = '\\n\\n');\nprint(asJson, end = '\\n\\n');\n\n# Default Argument 'DATAFRAME' returns dataframe\nasDataframe = LA.elaborate_solution();\nprint('type :', type(asDataframe), end = '\\n\\n');\nprint(asDataframe, end = '\\n\\n');\n\n# Argument 'MARKDOWN' returns markdown formatted string (from the Dataframe)\nasMarkdown = LA.elaborate_solution('MARKDOWN');\nprint('type :', type(asMarkdown), end = '\\n\\n');\nprint(asMarkdown, end = '\\n\\n');\n\n```\n- The Output of the above code looks as follows\n\n```output\ntype : <class 'dict'>\n\n{'True': {'Var_new_1': [1], 'Var_new_4': [7], 'Var_new_9': [12]}, 'False': {'Var_new_1': [-4, -3, -2, -1, 0, 2, 3, 4, 5, 6], 'Var_new_4': [2, 3, 4, 5, 6, 8, 9, 10, 11, 12], 'Var_new_9': [7, 8, 9, 10, 11, 13, 14, 15, 16, 17]}}\n\ntype : <class 'str'>\n\n{\n    \"False\": {\n        \"Var_new_1\": [\n            -4,\n            -3,\n            -2,\n            -1,\n            0,\n            2,\n            3,\n            4,\n            5,\n            6\n        ],\n        \"Var_new_4\": [\n            2,\n            3,\n            4,\n            5,\n            6,\n            8,\n            9,\n            10,\n            11,\n            12\n        ],\n        \"Var_new_9\": [\n            7,\n            8,\n            9,\n            10,\n            11,\n            13,\n            14,\n            15,\n            16,\n            17\n        ]\n    },\n    \"True\": {\n        \"Var_new_1\": [\n            1\n        ],\n        \"Var_new_4\": [\n            7\n        ],\n        \"Var_new_9\": [\n            12\n        ]\n    }\n}\n\ntype : <class 'pandas.core.frame.DataFrame'>\n\n                            Condition                                              True                                              False\n0   Var_new_1 == 1 and Var_new_4 == 7    {'Var_new_1': [(1, 2)], 'Var_new_4': [(7, 8)]}  {'Var_new_1': [(-4, 1), (2, 7)], 'Var_new_4': ...\n1  Var_new_1 == 1 and Var_new_9 == 12  {'Var_new_1': [(1, 2)], 'Var_new_9': [(12, 13)]}  {'Var_new_1': [(-4, 1), (2, 7)], 'Var_new_9': ...\n\ntype : <class 'str'>\n\n|    | Condition                          | True                                             | False                                                              |\n|---:|:-----------------------------------|:-------------------------------------------------|:-------------------------------------------------------------------|\n|  0 | Var_new_1 == 1 and Var_new_4 == 7  | {'Var_new_1': [(1, 2)], 'Var_new_4': [(7, 8)]}   | {'Var_new_1': [(-4, 1), (2, 7)], 'Var_new_4': [(2, 7), (8, 13)]}   |\n|  1 | Var_new_1 == 1 and Var_new_9 == 12 | {'Var_new_1': [(1, 2)], 'Var_new_9': [(12, 13)]} | {'Var_new_1': [(-4, 1), (2, 7)], 'Var_new_9': [(7, 12), (13, 18)]} |\n\n```\n\n### solution()\n\n- Gets the format to return the direct result of the analysis.(of type dict/json string)\n\n```python\n## Definition\ndef solution(self, format = 'DICT'):\n```\n- Arguments\n  - Arg 1 - format (format of the return value)\n\t- 'DICT' - default argument/returns output as type : <class 'dict'>\n\t- 'JSON' - returns output as type : <class 'str'> (json formatted string of dictionary)\n- Returns \n  - Results \n\t- the result as a dictionary ( if format == 'DICT' )\n\t- the result as a json formatted string ( if format == 'JSON' )\n\n#### Accessing Dictionary (general Format)\n\n- A dictionary with 'True' and 'False' as keys and the corresponding inputs as values\n\n```python\nfrom LogExAn.LogicalAnalyser import LogAn\n\n# entire condition to be enclosed in a bracket\nCond = \" ( ( low_bnd > 2 && low_bnd < 7 ) || ( up_bnd > 15 && up_bnd < 21 ) ) \"; \nLA = LogAn(Cond);\n\n# Accessing only values for the condition to pass (expected result : True)\nvalues_for_true = LA.solution()['True'];\nprint(values_for_true, end = '\\n\\n')\n\n# Access the results as a normal dictionary\nfor var, val in values_for_true.items():\n\tprint(var, val);\n\nprint(end = '\\n')\n\n# Accessing only values for the condition to fail (expected result : False)\nvalues_for_false = LA.solution()['False'];\nprint(values_for_false, end = '\\n\\n')\n\n# Access the results as a normal dictionary\nfor var, val in values_for_false.items():\n\tprint(var, val);\n\n```\n- The Output of the above code looks as follows\n\n```output\n{'low_bnd': [3, 4, 5, 6], 'up_bnd': [16, 17, 18, 19, 20]}\n\nlow_bnd [3, 4, 5, 6]\nup_bnd [16, 17, 18, 19, 20]\n\n{'low_bnd': [-3, -2, -1, 0, 1, 2, 7, 8, 9, 10, 11, 12], 'up_bnd': [10, 11, 12, 13, 14, 15, 21, 22, 23, 24, 25, 26]}\n\nlow_bnd [-3, -2, -1, 0, 1, 2, 7, 8, 9, 10, 11, 12]\nup_bnd [10, 11, 12, 13, 14, 15, 21, 22, 23, 24, 25, 26]\n\n```\n\n### elaborate_solution()\n\n- Gets the format to return the elaborate result of the analysis.(of type dataframe/markdown string)\n\n```python\n## Definition\ndef elaborate_solution(self, format = 'DATAFRAME'):\n```\n- Arguments\n  - Arg 1 - format (format of the return value)\n\t- 'DATAFRAME' - default argument/returns output as type : <class 'pandas.core.frame.DataFrame'>\n\t- 'MARKDOWN' - returns output as type : <class 'str'> (markdown formatted string of dataframe)\n- Returns \n  - Results \n\t- the result as a dataframe ( if format == 'DATAFRAME' )\n\t- the result as a markdown formatted string ( if format == 'MARKDOWN' )\n\n#### Accessing Dataframe (general Format)\n\n- A dataframe with 'True' and 'False' as columns and the corresponding inputs as cells.\n- For detailed usage of dataframe refer pandas documentation here :point_down:      \n\t( https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html ).\n\n```python\nfrom LogExAn.LogicalAnalyser import LogAn\nimport ast\n\nCond = \" ( ( low_bnd >= 2 || up_bnd == 3 ) && ( low_bnd == 4 || up_bnd <= 5 ) ) \"\nLA = LogAn(Cond);\n\n# Accesing direct result\npossible_values = LA.solution();\nprint(possible_values, end = '\\n\\n')\n\n# Accesing result with explanation\nasMarkdown = LA.elaborate_solution('MARKDOWN');\nprint(asMarkdown, end = '\\n\\n')\n\n# Accessing elaborate results as elements of dataframe\nasDf = LA.elaborate_solution();\n\n# Accessing elements of dataframe\nfor idx, row in asDf.iterrows():\n\n    print('-> index : ', idx)\n    print(f'-> Condition {idx+1} : ', row['Condition'])\n\n    print('-> True : ', row['True'])\n    true_results_dict = ast.literal_eval(row['True'])\n    # Access the results as a normal dictionary\n    for var, val in true_results_dict.items():\n        print('---> variable : ', var);\n\n        # Expanding values from list of tuples \n        Expanded_Range = []\n        for tup in val:\n            Expanded_Range += [*range(tup[0],tup[1])];\n        print('---> values : ', Expanded_Range)\n\n    print('-> False : ', row['False'])\n    false_results_dict = ast.literal_eval(row['False'])\n    # Access the results as a normal dictionary\n    for var, val in false_results_dict.items():\n        print('---> variable : ', var);\n\n        # Expanding values from list of tuples \n        Expanded_Range = []\n        for tup in val:\n            Expanded_Range += [*range(tup[0],tup[1])];\n        print('---> values : ', Expanded_Range)\n\n    print();\n\n\n```\n- The Output of the above code looks as follows\n\n```output\n{'True': {'low_bnd': [2, 3, 4, 5, 6, 7], 'up_bnd': [0, 1, 2, 3, 4, 5]}, 'False': {'low_bnd': [-1, 0, 1], 'up_bnd': [6, 7, 8]}}\n\n|    | Condition                     | True                                      | False                                                        |\n|---:|:------------------------------|:------------------------------------------|:-------------------------------------------------------------|\n|  0 | low_bnd >= 2 and low_bnd == 4 | {'low_bnd': [(4, 5)]}                     | {'low_bnd': [(-3, 4), (5, 10)]}                              |\n|  1 | low_bnd >= 2 and up_bnd <= 5  | {'low_bnd': [(2, 8)], 'up_bnd': [(0, 6)]} | {'low_bnd': [(-3, 2)], 'up_bnd': [(6, 11)]}                  |\n|  2 | up_bnd == 3 and low_bnd == 4  | {'up_bnd': [(3, 4)], 'low_bnd': [(4, 5)]} | {'up_bnd': [(-2, 3), (4, 9)], 'low_bnd': [(-1, 4), (5, 10)]} |\n|  3 | up_bnd == 3 and up_bnd <= 5   | {'up_bnd': [(3, 4)]}                      | {'up_bnd': [(-2, 3), (4, 11)]}                               |\n\n-> index :  0\n-> Condition 1 :  low_bnd >= 2 and low_bnd == 4\n-> True :  {'low_bnd': [(4, 5)]}\n---> variable :  low_bnd\n---> values :  [4]\n-> False :  {'low_bnd': [(-3, 4), (5, 10)]}\n---> variable :  low_bnd\n---> values :  [-3, -2, -1, 0, 1, 2, 3, 5, 6, 7, 8, 9]\n\n-> index :  1\n-> Condition 2 :  low_bnd >= 2 and up_bnd <= 5\n-> True :  {'low_bnd': [(2, 8)], 'up_bnd': [(0, 6)]}\n---> variable :  low_bnd\n---> values :  [2, 3, 4, 5, 6, 7]\n---> variable :  up_bnd\n---> values :  [0, 1, 2, 3, 4, 5]\n-> False :  {'low_bnd': [(-3, 2)], 'up_bnd': [(6, 11)]}\n---> variable :  low_bnd\n---> values :  [-3, -2, -1, 0, 1]\n---> variable :  up_bnd\n---> values :  [6, 7, 8, 9, 10]\n\n-> index :  2\n-> Condition 3 :  up_bnd == 3 and low_bnd == 4\n-> True :  {'up_bnd': [(3, 4)], 'low_bnd': [(4, 5)]}\n---> variable :  up_bnd\n---> values :  [3]\n---> variable :  low_bnd\n---> values :  [4]\n-> False :  {'up_bnd': [(-2, 3), (4, 9)], 'low_bnd': [(-1, 4), (5, 10)]}\n---> variable :  up_bnd\n---> values :  [-2, -1, 0, 1, 2, 4, 5, 6, 7, 8]\n---> variable :  low_bnd\n---> values :  [-1, 0, 1, 2, 3, 5, 6, 7, 8, 9]\n\n-> index :  3\n-> Condition 4 :  up_bnd == 3 and up_bnd <= 5\n-> True :  {'up_bnd': [(3, 4)]}\n---> variable :  up_bnd\n---> values :  [3]\n-> False :  {'up_bnd': [(-2, 3), (4, 11)]}\n---> variable :  up_bnd\n---> values :  [-2, -1, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10]\n\n```\n\n## CodeFlow\n\n![](https://github.com/Palani-SN/LogExAn/blob/main/LogExAnCodeFlow.PNG?raw=true)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Palani-SN/LogExAn",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LogExAn",
    "package_url": "https://pypi.org/project/LogExAn/",
    "platform": "",
    "project_url": "https://pypi.org/project/LogExAn/",
    "project_urls": {
      "Homepage": "https://github.com/Palani-SN/LogExAn"
    },
    "release_url": "https://pypi.org/project/LogExAn/1.0.0/",
    "requires_dist": [
      "blessings (~=1.7)",
      "lark (>=1.0.0)",
      "pandas (>=1.3.3)",
      "tabulate (>=0.8.9)",
      "pytest (>=3.7) ; extra == 'dev'",
      "check-manifest ; extra == 'dev'",
      "twine ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Logical Expression Analysis",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12653762,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8321815d1af10bef5cf60a1731f4b1c387bae5df860b4d2b9a83a91a840acd10",
        "md5": "a543b83c0fa60b985bf465d00e2cfec7",
        "sha256": "f59d7ffbb6ee5331adcb7fb2e40785cf216ccdcfb1d199c8f541968b54ecae2d"
      },
      "downloads": -1,
      "filename": "LogExAn-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a543b83c0fa60b985bf465d00e2cfec7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21373,
      "upload_time": "2022-01-22T15:59:27",
      "upload_time_iso_8601": "2022-01-22T15:59:27.001763Z",
      "url": "https://files.pythonhosted.org/packages/83/21/815d1af10bef5cf60a1731f4b1c387bae5df860b4d2b9a83a91a840acd10/LogExAn-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca3b645566ad3152c81cb53b4521b9faf758c54cd574458720e3990c0ab27c96",
        "md5": "c09cf3ac9bf62833064569126cf437b8",
        "sha256": "b326a3018bddb20ebc73bb23bd6d6244d2b397b3a4954115939ac0d137d0b754"
      },
      "downloads": -1,
      "filename": "LogExAn-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c09cf3ac9bf62833064569126cf437b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 58311,
      "upload_time": "2022-01-22T15:59:29",
      "upload_time_iso_8601": "2022-01-22T15:59:29.225260Z",
      "url": "https://files.pythonhosted.org/packages/ca/3b/645566ad3152c81cb53b4521b9faf758c54cd574458720e3990c0ab27c96/LogExAn-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}