{
  "info": {
    "author": "",
    "author_email": "Giovanni Augusto <author@example.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Networking"
    ],
    "description": "# MerakiToolKit\n[![published](https://static.production.devnetcloud.com/codeexchange/assets/images/devnet-published.svg)](https://developer.cisco.com/codeexchange/github/repo/g1augusto/merakitoolkit)\n<br>\n\nMerakiToolKit is a Python application to automate specific tasks with Meraki Cloud networks.<br>\nCurrently supported operations are\n- Pre Shared Key Change (**psk**) on a specific SSID\n  - filter by Organization (multiple)\n  - filter Networks by Network Tags (multiple)\n  - filter Networks by Network names (multiple)\n  - send an email with the PSK change information\n    - email based on jinja2 template\n    - attach any image in the template folder selected\n    - generate a QR code to attach to the email template\n\n<br>\n\n## Changelog (major changes)\n- 02/09/2022 - 1.0.3 - Stable synchronous release\n- 10/09/2022 - 1.1.0 - Stable Asynchronous release\n\n## Installation\n------------------------------------------\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install merakitoolkit.\n\n```bash\npip install merakitoolkit\n```\nAlternatively is possible to clone the git repository hosted on GitHub and install the necessary packages with the included requirements.txt or Pipfile.lock (for pipenv)\n```\ngit clone https://github.com/g1augusto/merakitoolkit.git\n```\n<br>\n\n## Usage\n------------------------------------------\n**NOTE**<br>\nWhen installing MerakiToolKit from **pip** the program can be directly executed\n```\n$ merakitoolkit\nusage: merakitoolkit [-h] [-k APIKEY] {psktemplategen,psk} ...\n```\nWhen cloning MerakiToolKit from **git** it must be executed as a python module (-m)\n```\n$ pipenv run python -m merakitoolkit\nusage: __main__.py [-h] [-k APIKEY] {psktemplategen,psk} ...\n```\n\n### **Operations**\n```\n$ merakitoolkit\nusage: merakitoolkit [-h] [-k APIKEY] {psktemplategen,psk} ...\n\nMeraki Toolkit version 1.0.3.a\n\npositional arguments:\n  {psktemplategen,psk}  meraki operations\n    psktemplategen      Generate PSK email template in local directory\n    psk                 Pre Shared Key modifications\n\noptions:\n  -h, --help            show this help message and exit\n  -k APIKEY, --apikey APIKEY\n                        Meraki API KEY, can be loaded from variable MERAKI_DASHBOARD_API_KEY\n\nCopyright (C) 2022 Giovanni Augusto | License: MIT\n```\n\n### **Pre Shared Key change**\n```\nusage: merakitoolkit psk [-h] [-t TAGS [TAGS ...]] [-v] [-d] [-p PASSPHRASE] [-pr] [-e EMAIL [EMAIL ...]] [-et EMAILTEMPLATE] [--smtp-sender SMTP_SENDER] [--smtp-server SMTP_SERVER] [--smtp-port SMTP_PORT] [--smtp-mode {TLS,STARTTLS,SMTP}]\n                       [--smtp-user SMTP_USER] [--smtp-pass SMTP_PASS] -o ORGANIZATION [ORGANIZATION ...] -n NETWORK [NETWORK ...] -s SSID\n\nChanges a Meraki SSID Pre Shared Key\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t TAGS [TAGS ...], --tags TAGS [TAGS ...]\n                        Specify a list of tags\n  -v, --verbose         Incremental logging level 1: print operation resuls 2: Print concurrent functions execution 3: Print Meraki API calls and save them to local log file\n  -d, --dryrun          Enable a failsafe run by only listing actions without applying them\n  -p PASSPHRASE, --passphrase PASSPHRASE\n                        PSK, can be loaded from env MERAKITK_PSK\n  -pr, --passrandomize  if PSK is given in input, ap\n  -e EMAIL [EMAIL ...], --email EMAIL [EMAIL ...]\n                        Specify a recipient Email or multiple recipients\n  -et EMAILTEMPLATE, --emailtemplate EMAILTEMPLATE\n                        template folder for email, valid only if --email is set\n  --smtp-sender SMTP_SENDER\n                        specify a sender for the email delivery\n  --smtp-server SMTP_SERVER\n                        specify a mailserver, or env MERAKITK_SMTP=<server>:<port>:<mode>:<user>:<pass>\n  --smtp-port SMTP_PORT\n                        specify a mailserver server port\n  --smtp-mode {TLS,STARTTLS,SMTP}\n                        specify connection mode to the mailserver [TLS|STARTTLS|SMTP] default=TLS\n  --smtp-user SMTP_USER\n                        specify an username for SMTP connection\n  --smtp-pass SMTP_PASS\n                        specify a password for SMTP connection\n\nrequired arguments:\n  -o ORGANIZATION [ORGANIZATION ...], --organization ORGANIZATION [ORGANIZATION ...]\n                        Specify one or more Organizations (ALL for all Organizations)\n  -n NETWORK [NETWORK ...], --network NETWORK [NETWORK ...]\n                        Specify one or more networks (ALL for all networks)\n  -s SSID, --ssid SSID  Specify an SSID\n\n```\n\n## Examples\n```\n# SIMULATE a PSK change for an SSID in all networks for an organization, print a report of what would have happened (API KEY, email, PSK are set via env variables)\nmerakitoolkit psk \\ \n--dryrun \\\n--organization MyOrganization \\\n--network ALL \\\n-s \"My SSID\" \\\n--email,\"name.surname1@domain.net\" \"name.surname2@domain.net\" \\\n\n\n# change PSK for SSID in all networks for an organization and sends email aftwerwards (API KEY, email, PSK are set via env variables)\nmerakitoolkit psk \\ \n--organization MyOrganization \\\n--network ALL \\\n-s \"My SSID\" \\\n--email,\"name.surname1@domain.net\" \"name.surname2@domain.net\"\n\n\n# change PSK for SSID in all networks with a specific tag in two organizations (API KEY, email, PSK are set via env variables)\nmerakitoolkit psk \\ \n--organization MyOrganization1 MyOrganization2 \\\n--network ALL \\\n-s \"My SSID\" \\\n-t tag\n```\n<br>\n\nIs always reccommended to perform a first test with **--dryrun** and evaluate if the projected outcome reflects the desired outcome\n\n## Using environment variables\n------------------------------------------\n### MerakiToolKit can be used with all its parameters passed in input via the command line but for some sensible information is better to use the environment variables listed below\n| variable      | Description |\n| ----------- | ------------------------------------------ |\n| MERAKI_DASHBOARD_API_KEY      | [API key generated in Meraki Dashboard](https://documentation.meraki.com/General_Administration/Other_Topics/Cisco_Meraki_Dashboard_API#Enable_API_Access)<br>**MERAKI_DASHBOARD_API_KEY=123456789abcdefghi**       |\n| MERAKITK_SMTP   | SMTP server informations separated by double colon :: in the form: <br>**MERAKITK_SMTP=SMTP_SERVER::PORT::MODE::USERNAME::PASSWORD** |\n|MERAKITK_PSK| Passphrase or list of possible words.<br>When multiple passhprases are available, entropy is always added to the chosen PSK<br>**MERAKITK_PSK=your_password123**<br>or<br>**MERAKITK_PSK=pass1::pass2:pass3:pass4:pass5**\n\n<br><br>\n\n## PSK Change email sample\n------------------------------------------\nIs possible to customize the email content and change/add images, including the logo.\nQR code is automatically generated at each PSK change with the name *qrcode.png* and the related jinja2 variable is *qrcodepng*\n\nEach image included in the template folder chosen is attached to the email template and can be inserted by referring to its filename stripped of the dot:<br>logo.png -> logopng\n<br><br>\nDefault template to customize can be generated by the following command:\n```\npython -m merakitoolkit psktemplategen\n```\nthis will generate a local copy of the default template folder under the ./merakitoolkit folder\n<br>\nin case the folder exists already an incremental number suffix will be added to the newly created one\n\n![email sample image](https://github.com/g1augusto/merakitoolkit/raw/master/docs/emailsample.png \"email sample image\")\n\n## Contributing\n------------------------------------------\nFor major changes, please open an issue first to discuss what you would like to change and if you have specific feature request please open an issue in GitHub\n\nGit repository includes all tests\n\n## License\n------------------------------------------\n[MIT](https://choosealicense.com/licenses/mit/)\n\n## Third party libraries licenses and acknowledgements (THIRDPARTYLICENSES)\n------------------------------------------\n```\nApache-2.0\n        'aiohttp' by None ('https://github.com/aio-libs/aiohttp')\n        'aiosignal' by 'Nikolay Kim <fafhrd91@gmail.com>' ('https://github.com/aio-libs/aiosignal')\n        'async-timeout' by 'Andrew Svetlov <andrew.svetlov@gmail.com> <andrew.svetlov@gmail.com>' ('https://github.com/aio-libs/async-timeout')\n        'frozenlist' by None ('https://github.com/aio-libs/frozenlist')\n        'multidict' by 'Andrew Svetlov <andrew.svetlov@gmail.com>' ('https://github.com/aio-libs/multidict')\n        'requests' by 'Kenneth Reitz <me@kennethreitz.org>' ('https://requests.readthedocs.io')\n        'yarl' by 'Andrew Svetlov <andrew.svetlov@gmail.com>' ('https://github.com/aio-libs/yarl/')\n\nBSD-3-clause\n        'idna' by 'Kim Davies <kim@cynosure.com.au>' ('https://github.com/kjd/idna')\n        'xkcdpass' by 'Steven Tobin <steventtobin@gmail.com>' ('https://github.com/redacted/XKCD-password-generator')\n\nMIT\n        'attrs' by 'Hynek Schlawack <hs@ox.cx>' ('https://www.attrs.org/')\n        'charset-normalizer' by 'Ahmed TAHRI @Ousret <ahmed.tahri@cloudnursery.dev>' ('https://github.com/ousret/charset_normalizer')\n        'meraki' by 'Cisco Meraki <api-feedback@meraki.net>' ('https://github.com/meraki/dashboard-api-python')\n        'pypng' by 'David Jones <drj@pobox.com>' ('https://gitlab.com/drj11/pypng')\n        'urllib3' by 'Andrey Petrov <andrey.petrov@shazow.net>' ('https://urllib3.readthedocs.io/')\n\nMPL-2.0\n        'certifi' by 'Kenneth Reitz <me@kennethreitz.com>' ('https://github.com/certifi/python-certifi')\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "meraki,wireless",
    "license": "MIT License Copyright (c) 2022 Giovanni Augusto Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "merakitoolkit",
    "package_url": "https://pypi.org/project/merakitoolkit/",
    "platform": null,
    "project_url": "https://pypi.org/project/merakitoolkit/",
    "project_urls": {
      "Homepage": "https://github.com/g1augusto/merakitoolkit"
    },
    "release_url": "https://pypi.org/project/merakitoolkit/1.1.0/",
    "requires_dist": [
      "jinja2 (>=3.1.2)",
      "meraki (>=1.24.0)",
      "pypng (>=0.20220715.0)",
      "pyqrcode (>=1.2.1)",
      "xkcdpass (>=1.19.3)",
      "pylint (>=2.15.0) ; extra == 'dev'",
      "pytest (>=7.1.2) ; extra == 'dev'",
      "third-party-license-file-generator (>=2022.3.1) ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "merakitoolkit is a Python application to automate specific tasks with Meraki Cloud networks.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15085642,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dabfcb4af72040c995b1504effab2f3e369376271b5fbd7ca5290f746ebf8954",
        "md5": "d3118635f009dd0a492e3b7a910cbcd4",
        "sha256": "09bc01942761f2135577827093e37687a6b21151a6fc2cf07cd95db6cb6e8a6e"
      },
      "downloads": -1,
      "filename": "merakitoolkit-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d3118635f009dd0a492e3b7a910cbcd4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 16519,
      "upload_time": "2022-09-10T21:35:25",
      "upload_time_iso_8601": "2022-09-10T21:35:25.807703Z",
      "url": "https://files.pythonhosted.org/packages/da/bf/cb4af72040c995b1504effab2f3e369376271b5fbd7ca5290f746ebf8954/merakitoolkit-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fa2035bc9569773bedb81d3093ca88728b7416fd806de44aac9ad126ab17f2b",
        "md5": "e0c5f034ae739663c8ded3468b8e3762",
        "sha256": "bbf8fa3744d8203a0f31ee9dcaf501ca37fd9890d87d3767706c59fe76f203f6"
      },
      "downloads": -1,
      "filename": "merakitoolkit-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e0c5f034ae739663c8ded3468b8e3762",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 25125,
      "upload_time": "2022-09-10T21:35:28",
      "upload_time_iso_8601": "2022-09-10T21:35:28.105592Z",
      "url": "https://files.pythonhosted.org/packages/4f/a2/035bc9569773bedb81d3093ca88728b7416fd806de44aac9ad126ab17f2b/merakitoolkit-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}