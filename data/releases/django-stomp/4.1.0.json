{
  "info": {
    "author": "Ricardo Baltazar Chaves, Willian Antunes",
    "author_email": "Ricardo Baltazar <ricardobchaves6@gmail.com>, Willian Antunes <willian.lima.antunes@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Portuguese (Brazilian)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Django Stomp\n\n[![Build Status](https://dev.azure.com/juntos-somos-mais-loyalty/python/_apis/build/status/django-stomp?branchName=master)](https://dev.azure.com/juntos-somos-mais-loyalty/python/_build/latest?definitionId=23&branchName=master)\n[![Maintainability](https://api.codeclimate.com/v1/badges/381136911e038d1a6887/maintainability)](https://codeclimate.com/github/juntossomosmais/django-stomp/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/381136911e038d1a6887/test_coverage)](https://codeclimate.com/github/juntossomosmais/django-stomp/test_coverage)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![Downloads](https://pepy.tech/badge/django-stomp)](https://pepy.tech/project/django-stomp)\n[![Downloads](https://pepy.tech/badge/django-stomp/month)](https://pepy.tech/project/django-stomp/month)\n[![Downloads](https://pepy.tech/badge/django-stomp/week)](https://pepy.tech/project/django-stomp/week)\n[![PyPI version](https://badge.fury.io/py/django-stomp.svg)](https://badge.fury.io/py/django-stomp)\n[![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/juntossomosmais/django-stomp/blob/master/LICENSE)\n\nA simple implementation of STOMP with Django.\n\nIn theory it can work with any broker which supports STOMP with none or minor adjustments.\n\n## Installation\n\n`pip install django_stomp`\n\nAdd `django_stomp` in your `INSTALLED_APPS` and so be it.\n\n## Configuration process\n\nNot yet fully available, but feel free to see our tests to get insights.\n\n### Consumer\n\nFirst you must create a function which receives an parameter of type `django_stomp.services.consumer.Payload`. Let's suppose the module `app.sample` with the following content:\n\n```python\nimport logging\n\nfrom django_stomp.services.consumer import Payload\n\nlogger = logging.getLogger(__name__)\n\n\ndef my_honest_logic(payload: Payload) -> None:\n    logger.info(\"Yeah, I received a payload from django-stomp!\")\n\n    my_payload = payload.body\n    my_header = payload.headers\n\n    if my_payload.get(\"my-dict-key\"):\n        payload.ack()\n    else:\n        logger.info(\"To DLQ!\")\n        payload.nack()\n```\n\nNow you must provide broker connection details filling out the following parameters at least:\n\n- STOMP_SERVER_HOST\n- STOMP_SERVER_PORT\n- STOMP_USE_SSL\n\nAnd just create the job issuing the following command:\n\n```bash\npython manage.py pubsub \"/queue/your-stuff\" app.sample.my_honest_logic\n```\n\nThat's it ✌️\n\n### Settings\n\nHere is a list of parameters that you can set in your Django project settings:\n\n***STOMP_SERVER_HOST***\n\n  The hostname of the STOMP server.\n\n***STOMP_SERVER_PORT***\n\n  The STOMP server port used to allow STOMP connections.\n\n***STOMP_SERVER_USER***\n\n  The client username to connect to a STOMP server.\n\n***STOMP_SERVER_PASSWORD***\n\n  The client password to connect to a STOMP server.\n\n***STOMP_USE_SSL***\n\n  Set to ``True, true, 1, T, t, Y or y`` in order to all STOMP connections use a SSL/TLS tunnel.\n\n***STOMP_SERVER_STANDBY_HOST***\n\n  The hostname of the STOMP standby server.\n\n***STOMP_SERVER_STANDBY_PORT***\n\n  The STOMP standby server port used to allow STOMP connections.\n\n***STOMP_SERVER_VHOST***\n\n  The virtual host used in the STOMP server.\n\n***STOMP_SUBSCRIPTION_ID***\n\n  Used to identify the subscription in the connection between client and server. See the [STOMP protocol specification\n](https://stomp.github.io/stomp-specification-1.1.html#SUBSCRIBE_id_Header) for more information.\n\n***STOMP_OUTGOING_HEARTBEAT***\n\n  A positive integer to indicates what is the period (in milliseconds) the client will send a frame to the server \nthat indicates its still alive. Set to ``0`` to means that it cannot send any heart-beat frame. See the [STOMP \nprotocol specification](https://stomp.github.io/stomp-specification-1.1.html#Heart-beating) for more information.\nDefaults to 10000 ms.\n\n***STOMP_INCOMING_HEARTBEAT***\n\n  A positive integer to indicates what is the period (in milliseconds) the client will await for a server frame until \nit assumes that the server is still alive. Set to ``0`` to means that it do not want to receive heart-beats. See \nthe [STOMP protocol specification](https://stomp.github.io/stomp-specification-1.1.html#Heart-beating) for more \ninformation. Defaults to 10000 ms.\n\n***STOMP_WAIT_TO_CONNECT***\n\n  A positive integer to indicates how long it needs to await to try to reconnect if an `Exception` in the listener \nlogic is not properly handled.\n\n***STOMP_DURABLE_TOPIC_SUBSCRIPTION***\n\n  Set to ``True, true, 1, T, t, Y or y`` in order to all STOMP topic subscription be durable. See the [RabbitMQ](\nhttps://www.rabbitmq.com/stomp.html#d.dts) take on it or the\n[ActiveMQ](https://activemq.apache.org/how-do-durable-queues-and-topics-work) for more information.\n\n***STOMP_LISTENER_CLIENT_ID***\n\n  A string that represents the client id for a durable subscriber or the listener prefix client id in a non-durable \nsubscription in ActiveMQ.\n\n***STOMP_CORRELATION_ID_REQUIRED***\n\n  A flag that indicates if `correlation-id` header must be required or not. By default this flag is true (good practice \nthinking in future troubleshooting). \nSet to ``False, false, 0, F, f, N or n`` in order to allow consume messages without `correlation-id` header. If it's \nfalse `django-stomp` generates a correlation-id header for the message automatically.\n\n***STOMP_PROCESS_MSG_ON_BACKGROUND***\n\n  A flag to indicate if it should process a received message on background, enabling the broker-consumer communication \nto still take place.\n  Set to ``True, true, 1, T, t, Y or y`` in order to have the message processing on background.\n\n***STOMP_PROCESS_MSG_WORKERS***\n\n  Optional parameter that controls how many workers the pool that manage the background processing should create. If\ndefined, this parameter **must** be an integer!\n\n## Tests\n\nIn order to execute tests for ActiveMQ, execute the following:\n\n    docker-compose up -d broker-activemq\n\nOr for RabbitMQ:\n\n    docker-compose up -d broker-rabbitmq\n\nThen at last:\n\n    pipenv run tox\n\n\n## Known limitations\n\n* Currently, we assume that all dead lettered messages are sent to a queue with the same name as its original \ndestination but prefixed with `DLQ.`, i.e., if your queue is `/queue/some-queue`, the dead letter destination is \nasssumed to be `/queue/DLQ.some-queue`.\n* **Be cautious with the heartbeat functionality**! If your consumer is slow, it could prevent the client to receive \nand process any `heart-beat` frame sent by the server, causing the client to terminate the connection due to a false \npositive heartbeat timeout. You can workaround it with the `STOMP_PROCESS_MSG_ON_BACKGROUND` parameter that uses a\nthread pool to process the message.\n* For the RabbitMQ users: the **django-stomp consumer** always try to connect to a \n[durable queue](https://www.rabbitmq.com/queues.html#durability), so if your queue is not durable, the RabbitMQ broker \nwill not allow the subscription.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/juntossomosmais/django-stomp",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-stomp",
    "package_url": "https://pypi.org/project/django-stomp/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-stomp/",
    "project_urls": {
      "Homepage": "https://github.com/juntossomosmais/django-stomp"
    },
    "release_url": "https://pypi.org/project/django-stomp/4.1.0/",
    "requires_dist": [
      "request-id-django-log (==0.1.1)",
      "stomp.py (~=6.0)",
      "tenacity (~=6.0)"
    ],
    "requires_python": "",
    "summary": "A simple implementation of STOMP with Django",
    "version": "4.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16490369,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cc600fcbd4fccd1a886d03356eaa52f3a0d14eb93da8b1cddaa32bea5c586ac",
        "md5": "86b718b3ba604775b335c76617faa76f",
        "sha256": "b25b80fd28bc3d6847dd997f05d0436231552a077db7b05dbc8e315262c93bbe"
      },
      "downloads": -1,
      "filename": "django_stomp-4.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "86b718b3ba604775b335c76617faa76f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 36069,
      "upload_time": "2020-05-26T15:04:15",
      "upload_time_iso_8601": "2020-05-26T15:04:15.618816Z",
      "url": "https://files.pythonhosted.org/packages/1c/c6/00fcbd4fccd1a886d03356eaa52f3a0d14eb93da8b1cddaa32bea5c586ac/django_stomp-4.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dbd8dffda3afe2ad59c606b7cf84f059f692655628eb14099cbf178af5cc09f1",
        "md5": "e026a0659a0e1d66dcab177ed504c2ef",
        "sha256": "a1bd28ef41206b535dce2d52d545a63505e1b8c3e498698d37e165ba4208dcd1"
      },
      "downloads": -1,
      "filename": "django-stomp-4.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e026a0659a0e1d66dcab177ed504c2ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26472,
      "upload_time": "2020-05-26T15:04:16",
      "upload_time_iso_8601": "2020-05-26T15:04:16.833591Z",
      "url": "https://files.pythonhosted.org/packages/db/d8/dffda3afe2ad59c606b7cf84f059f692655628eb14099cbf178af5cc09f1/django-stomp-4.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}