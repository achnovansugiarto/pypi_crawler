{
  "info": {
    "author": "Peter Kogan",
    "author_email": "kogan.peter@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Mock Generator\n![](https://github.com/pksol/mock_autogen/workflows/CI/badge.svg?branch=master)\n![](https://img.shields.io/pypi/v/mock-generator.svg)\n![](https://img.shields.io/pypi/pyversions/mock-generator.svg)\n![](https://codecov.io/gh/pksol/mock_autogen/branch/master/graph/badge.svg)\n![](https://img.shields.io/powershellgallery/p/DNS.1.1.1.1)\n![](https://img.shields.io/pypi/l/mock-generator.svg)\n\nA tool to generate the basic mocks and asserts for faster unit testing. \n\n## Introduction\nA typical unit test looks like this (AAA pattern):\n* Arrange – Setup and prepare the various objects and prerequisites.\n* Act – Invoke the tested code by calling the tested function.\n* Assert – Verify the outcome. This can be the return value of the tested \nfunction and/or some side effects.\n\nWhen using mocks, much time is wasted on the wiring.\nThe `Arrange` and `Assert` sections are notorious in that regard.\nOnly a fraction of the time is spent on the actual logic of the test.\n\nThis tool is meant to save you time, \nby generating the `Arrange` and `Assert` sections for you. \nThe generated code can then be used as is, or altered according to your needs.\n\n## Usage\nNote: All examples assume usage of the \n[pytest-mock](https://pypi.org/project/pytest-mock/) which is a fixture for\n[pytest](https://pypi.org/project/pytest/).\n\n### Getting Started\nLet's assume you have a module named `tested_module.py` which holds a function\nto process a string sent to it and then add it to a zip file:\n```python\nimport zipfile\n\ndef process_and_zip(zip_path, file_name, contents):\n    processed_contents = \"processed \" + contents  # some complex logic\n    with zipfile.ZipFile(zip_path, 'w') as zip_container:\n        zip_container.writestr(file_name, processed_contents)\n```\nThis is the unit under test, or UUT.\n\nAlthough this is a very short function, \nwriting the test code takes a lot of time. It's the fact that the function uses\na context manager makes the testing more complex than it should be.\n*If you don't believe me, try to manually write mocks and asserts which verify\nthat `zip_container.writestr` was called with the right parameters.*\n\nIn any case, you start with a test skeleton:\n\n```python\nimport mock_autogen\nfrom tests.sample.code.tested_module import process_and_zip\n\ndef test_process_and_zip(mocker):\n    # Arrange: todo  \n\n    # Act: invoking the tested code\n    process_and_zip('/path/to.zip', 'in_zip.txt', 'foo bar')\n\n    # Assert: todo\n```\nNow it's time to use Mock Generator instead of manually writing the 'Arrange' \nand 'Assert' sections.\n\n#### Generating the 'Arrange' section\nTo generate the 'Arrange' section, simply put this code at the beginning of \nyour test function skeleton and run it:\n```python\nmock_autogen.generate_uut_mocks(process_and_zip)\n```\nThis will generate the 'Arrange' section for you:\n```python\n# mocked dependencies\nmock_ZipFile = mocker.MagicMock(name='ZipFile')\nmocker.patch('tests.sample.code.tested_module.zipfile.ZipFile', new=mock_ZipFile)\n```\nThe generated code is returned, printed to the console and also copied to the\nclipboard for your convenience. \nJust paste it (as simple as ctrl+V) at the start of your test function:\n```python\nimport mock_autogen\nfrom tests.sample.code.tested_module import process_and_zip\n\ndef test_process_and_zip(mocker):\n    # mocked dependencies\n    mock_ZipFile = mocker.MagicMock(name='ZipFile')\n    mocker.patch('tests.sample.code.tested_module.zipfile.ZipFile', new=mock_ZipFile)\n\n    # Act: invoking the tested code\n    process_and_zip('/path/to.zip', 'in_zip.txt', 'foo bar')\n\n    # Assert: todo\n```\n\nExcellent! Arrange section is ready.\n\n#### Generating the Assert section\nNow it's time to add the asserts. Add the following code\n**at the 'Assert'** step:\n```python\nmock_autogen.generate_asserts(mock_ZipFile)\n```\nThe `mock_ZipFile` is the mock object you generated earlier.\nNow execute the test function to get the assert section: \n```python\nassert 1 == mock_ZipFile.call_count\nmock_ZipFile.assert_called_once_with('/path/to.zip', 'w')\nmock_ZipFile.return_value.__enter__.assert_called_once_with()\nmock_ZipFile.return_value.__enter__.return_value.writestr.assert_called_once_with('in_zip.txt', 'processed foo bar')\nmock_ZipFile.return_value.__exit__.assert_called_once_with(None, None, None)\n```\nWow, that's a handful of asserts! Some are very useful: \n* Checking that we opened the zip file with the right parameters.\n* Checking that we wrote the correct data to the proper file.\n* Finally, ensuring that `__enter__` and `__exit__` are called, so there \nare no open file handles which could cause problems.\n\nYou can remove any generated line which you find unnecessary.   \n\nPaste that code right after the act phase, and you're done!\n\nThe complete test function:\n```python\nfrom tests.sample.code.tested_module import process_and_zip\n\ndef test_process_and_zip(mocker):\n    # mocked dependencies\n    mock_ZipFile = mocker.MagicMock(name='ZipFile')\n    mocker.patch('tests.sample.code.tested_module.zipfile.ZipFile', new=mock_ZipFile)\n\n    # Act: invoking the tested code\n    process_and_zip('/path/to.zip', 'in_zip.txt', 'foo bar')\n\n    assert 1 == mock_ZipFile.call_count\n    mock_ZipFile.assert_called_once_with('/path/to.zip', 'w')\n    mock_ZipFile.return_value.__enter__.assert_called_once_with()\n    mock_ZipFile.return_value.__enter__.return_value.writestr.assert_called_once_with('in_zip.txt', 'processed foo bar')\n    mock_ZipFile.return_value.__exit__.assert_called_once_with(None, None, None)\n```\nCan you imagine the time it would have taken you to code this on your own?\n\n### What's Next\n#### Asserting Existing Mocks\nAt times, you may be editing a test code already containing mocks, or\nyou choose to write the mocks yourself, to gain some extra control.\n\nMock Generator can generate the assert section for standard \nPython mocks, even if they were not created using the Mock Generator. \n\nPut this after the 'Act' (replace `mock_obj` with your mock object name): \n```python\nimport mock_autogen\nmock_autogen.generate_asserts(mock_obj)\n```\nTake the generated code and paste it at the 'Assert' section. \n\n#### Generating the 'Arrange' and 'Assert' sections in one call\nYou can make the `generate_uut_mocks_with_asserts` call create the \n`generate_asserts` code for you (instead of having to call \n`generate_uut_mocks`):\n```python\nimport mock_autogen\nmock_autogen.generate_uut_mocks_with_asserts(function_under_test)\n```\n\n#### Mocking Everything\nSo far you have seen examples of mocking the dependencies of a single function.\nMock Generator can generate mocks for objects, classes and entire modules!\n\nA great way to learn about those capabilities is to see them in action:\n```python\nfrom mock_autogen import PytestMocker\nPytestMocker(a_module_or_a_class_you_test_and_want_to_mock_its_dependencies).mock_everything().generate() \n```\n`PytestMocker` class has many options to produce different kind of mocks.\nSee its documentation for further details.\n\n## Wrapping up\nI hope that you were convinced that this tool can save you a lot of time. \n\nIf you have improvement suggestions, bug reports, \nor would like to contribute pull requests, let me know.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pksol/mock_autogen",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mock-generator",
    "package_url": "https://pypi.org/project/mock-generator/",
    "platform": "",
    "project_url": "https://pypi.org/project/mock-generator/",
    "project_urls": {
      "Homepage": "https://github.com/pksol/mock_autogen"
    },
    "release_url": "https://pypi.org/project/mock-generator/2.2.0/",
    "requires_dist": [
      "mock (>=3.0.5)",
      "pyperclip (==1.8.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Generate python mocks and assertions quickly",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13825478,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6b5aece00270acb12f57e30e1877523a59837ec3cfac7cac7d8fdd6f7d22982",
        "md5": "323512d2844576f6978f9afc8e7f54a6",
        "sha256": "3f2523f064a2ebfa8ce79833a27997756f4be57b064668980cadf40a6191a2af"
      },
      "downloads": -1,
      "filename": "mock_generator-2.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "323512d2844576f6978f9afc8e7f54a6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 32306,
      "upload_time": "2021-07-05T07:25:48",
      "upload_time_iso_8601": "2021-07-05T07:25:48.972099Z",
      "url": "https://files.pythonhosted.org/packages/b6/b5/aece00270acb12f57e30e1877523a59837ec3cfac7cac7d8fdd6f7d22982/mock_generator-2.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0196d7ec8a6a2a75a3e1d59b1bc6e5cab1f7d3a75a51221e02a8fc1ec6d9aa72",
        "md5": "9dc9fa5e9c7afdca668555403958efa1",
        "sha256": "8e05f6a06c83c851b4540c143ca114b12cb7f4b1c4e62f08049912f90cd7f3b3"
      },
      "downloads": -1,
      "filename": "mock-generator-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9dc9fa5e9c7afdca668555403958efa1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 27147,
      "upload_time": "2021-07-05T07:25:49",
      "upload_time_iso_8601": "2021-07-05T07:25:49.964066Z",
      "url": "https://files.pythonhosted.org/packages/01/96/d7ec8a6a2a75a3e1d59b1bc6e5cab1f7d3a75a51221e02a8fc1ec6d9aa72/mock-generator-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}