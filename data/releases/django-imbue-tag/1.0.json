{
  "info": {
    "author": "Piotr Olejarz",
    "author_email": "d0csheet@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "================\nDjango Imbue Tag\n================\n\nExtension for Django template syntax. Adds tag that can inject template fragments into other template\n\nQuick start\n-----------\n\nModule is compatible (was tested) with following Django versions:\n\n- 3.1\n- 3.0\n- 2.2\n- 2.1\n- 2.0\n\n1. Install module from PyPI::\n\n    pip install django-imbue-tag\n\n2. Add ``django_imbue_tag`` to your INSTALLED_APPS setting::\n\n    INSTALLED_APPS = [\n        ...\n        'django_imbue_tag'\n    ]\n\n\nBasic usage\n-----------\n\nTemplates that are going to be *imbued* with template fragments must be prepared first. In order to do so we must place\nspecial ``{% slot %}`` tag somewhere in template. The template tag does nothing by itself, its only function is to\ndesignate place in with new template will be injected:\n\n``menu.html``::\n\n    {% load imbue_tag %}\n\n    <div>\n        <p>Menu</p>\n        <div>\n            {% slot %}\n        </div>\n    </div>\n\nNow we can use above snippet in other template and inject desired content into ``{% slot %}`` place:\n\n``main.html``::\n\n    {% load imbue_tag %}\n\n    {% imbue 'menu.html' %}\n        <a href=\"{% url 'forms' %}\">Forms</a>\n    {% endimbue %}\n\nThe rendered output should look like this::\n\n    <div>\n        <p>Menu</p>\n        <div>\n            <a href=\"/forms\">Forms</a>\n        </div>\n    </div>\n\n**Note**:\n    You are allowed to use **any** Django template syntax inside ``{% imbue %}`` tag.\n\nContext\n~~~~~~~\n\nTemplate *imbued* by ``{% imbue %}`` has its own context separate from the context in with ``{% imbue %}`` is called. If\nyou want to use any variable form *current* context inside injected template, you must explicitly pass it as a\n``{% imbue %}`` parameter:\n\n``main.html``::\n\n    {% load imbue_tag %}\n\n    {% imbue 'menu.html' label=label %}\n        <a href=\"{% url 'forms' %}\">{{ label }}</a>\n    {% endimbue %}\n\nIt is also allowed to pass constant value::\n\n    {% imbue 'menu.html' label='Forms' %}\n        ...\n\n**Note**:\n    In regard to context ``{% imbue %}`` behaves similarly to ``{% include %}`` and similarly to ``{% include %}`` it\n    also automatically passes ``csrf_token``\n\nMultiple slots\n~~~~~~~~~~~~~~\n\nYou are not limited in number of ``{% slot %}`` that you can have in *imbued* template. Every single one will simply\nreceive exactly the same template that resides inside ``{% imbue %}`` tag:\n\n``warning.html``::\n\n    {% load imbue_tag %}\n\n    <div>\n        <div>{% slot %}</div>\n        <p>{{ txt }}</p>\n        <div>{% slot %}</div>\n    </div>\n\n``main.html``::\n\n    {% load imbue_tag %}\n\n    {% imbue 'menu.html' txt='Dont do that!' %}\n        {% for i in txt %}!{% endfor %}\n    {% endimbue %}\n\nAbove example should result into following HTML::\n\n    <div>\n        <div>!!!!!!!!!!!!!</div>\n        <p>Dont do that!</p>\n        <div>!!!!!!!!!!!!!</div>\n    </div>\n\n\nNamed slots\n-----------\n\nRepeating single template multiple times may be useful but what if you want to place **different** templates in certain\nplaces of *imbued* template? That's what **named slots** are exactly for:\n\n``article.html``::\n\n    {% load imbue_tag %}\n\n    <div>\n        {% slot 'content' %}\n    </div>\n\n    <footer>\n        <p>Author: {% slot 'author' %}</p>\n    </footer>\n\nTo use named slot you simply need to add parameter containing its name. Similarly to normal slots its allowed to define\nmultiple named slots with same name.\n\nUsing template with named slots differs from using template with normal slots:\n\n``main.html``::\n\n    {% load imbue_tag %}\n\n    {% imbue 'article.html' %}\n        {% template_for_slot 'content' %}\n            Hello World!\n        {% end_template_for_slot %}\n\n        {% template_for_slot 'author' %}\n            Mr. Tom\n        {% end_template_for_slot %}\n    {% endimbue %}\n\nAs you can see ``{% imbue %}`` must be now called in a specific manner:\n\n- content that is meant to be placed in slots must now reside inside ``{% template_for_slot %}`` tag. Each tag has a\n  slot name as a parameter that marks its content as template for slot with exactly the same name\n- no other content can be placed inside ``{% imbue %}`` when ``{% template_for_slot %}`` tags are used\n\nAfter rendering we should receive HTML similar to this::\n\n    <div>\n        Hello World!\n    </div>\n\n    <footer>\n        <p>Author: Mr. Tom</p>\n    </footer>\n\n**Note**:\n    ``{% template_for_slot %}`` can also contain any Django compatible template syntax the same as *pure* ``{% imbue %}``",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/docsheet/django-imbue-tag/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-imbue-tag",
    "package_url": "https://pypi.org/project/django-imbue-tag/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-imbue-tag/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/docsheet/django-imbue-tag/"
    },
    "release_url": "https://pypi.org/project/django-imbue-tag/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django application containing special template tag that allows to inject template fragments into another template",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9766508,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67e103753ca13851e6126f0f7ceebff49a45c256d72f2f89ce7507cb88f0157f",
        "md5": "1298400c42719d75b0f81c48ac13ece2",
        "sha256": "79942fe7d93e4113e4551bd5b65f4bc5d9e01a56a21abccc344c9678c8d91099"
      },
      "downloads": -1,
      "filename": "django-imbue-tag-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1298400c42719d75b0f81c48ac13ece2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7925,
      "upload_time": "2021-03-14T15:03:15",
      "upload_time_iso_8601": "2021-03-14T15:03:15.838303Z",
      "url": "https://files.pythonhosted.org/packages/67/e1/03753ca13851e6126f0f7ceebff49a45c256d72f2f89ce7507cb88f0157f/django-imbue-tag-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}