{
  "info": {
    "author": "Vasyl Vaskivskyi",
    "author_email": "vaskivskyi.v@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Image Processing"
    ],
    "description": "[![DOI](https://zenodo.org/badge/506277919.svg)](https://zenodo.org/badge/latestdoi/506277919)\n## MicroAligner: image registration for large scale microscopy\n\n- Automatic, no need to manually select points of interest\n- Fast, most of internal tasks are parallelized\n- Memory efficient, keeps only one image page in the memory at a time\n- Scalable, the more cores you have the faster it works\n- Linear and non-linear alignment, gives best results together in that order\n\nThere are two main methods that can do alignment, and also a pipeline that can run both of them based \non parameters provided in a config file.\n\n### Methods:\n\nAffine feature based registration method first finds image features using `FAST` feature finder. It detects areas with \nlarge intensity changes. After that a `DAISY` feature descriptor collects histograms of oriented gradients\nfor each found feature. Then the described features are matched using `FLANN` based `knn` matcher that finds \ncorrespondence between features of reference and moving images. The matches are filtered according to the distance between the neighbours.\nFinally, the coordinates of matched features are aligned using `RANSAC` algorithm and the affine transformation is computed.\nThis method is good for aligning large linear drifts across images. \n\nNon-linear optical flow based registration uses `Farneback` method that looks for pixels with the highest similarity in the given window.\nThen for each pixel it computes a 2D vector that describes movement of the pixel from one image to the other. \nThis method is good for aligning of small local shifts across images.\n\nIf you have uneven illumination across the image, and it affects the registration quality, \nyou can try to tackle that by enabling image preprocessing with `difference of Gaussians` (`DOG`). \nIt will extract information about strong gradients near the edges\nand discard gradual changes caused by uneven illumination.\n\n### Pipeline:\n\nIf images have z-planes, the script perform maximum intensity projection along the z dimension\nbefore doing the registration, so the alignment happens only in X-Y coordinates.\nThe output image has OME-TIFF metadata, and dimension order TCZYX.\n\nThe pipeline accepts a YAML config file. Please check config_examples folder inside this repo.\n\n### Installation\n\n`pip install microaligner`\n\n### Dependencies\n`numpy tifffile pandas opencv-contrib-python dask scikit-learn scikit-image pint` \\\nAlso check up the `environment.yaml` file.\n\n### Example usage\n\n#### As a pipeline\n**`microaligner config.yaml`**\n\nFor details about the config parameters please refer to the example `config.yaml` provided in this repository.\n\n#### As a module\n\n##### Feature based registration\n```python\nfrom microaligner import FeatureRegistrator, transform_img_with_tmat\nfreg = FeatureRegistrator()\nfreg.ref_img = img1\nfreg.mov_img = img2\ntransformation_matrix = freg.register()\n\nimg2_feature_reg_aligned = transform_img_with_tmat(img2, img2.shape, transformation_matrix)\n```\n\n##### Optical flow based registration\n```python\nfrom microaligner import OptFlowRegistrator, Warper \nofreg = OptFlowRegistrator()\nofreg.ref_img = img1\nofreg.mov_img = img2\nflow_map = ofreg.register()\n\nwarper = Warper()\nwarper.image = img2\nwarper.flow = flow_map\nimg2_optflow_reg_aligned = warper.warp()\n```\n\n### Acknowledgments\n\nThis package could have never been developed without thorough battle-testing by \n[Tong Li](https://github.com/BioinfoTongLI) \nand [Jun Sung Park](https://github.com/jpark27), \nand guidance from [Omer Bayraktar](https://github.com/oabayraktar).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microaligner",
    "package_url": "https://pypi.org/project/microaligner/",
    "platform": "any",
    "project_url": "https://pypi.org/project/microaligner/",
    "project_urls": {
      "Source Code": "https://github.com/VasylVaskivskyi/microaligner"
    },
    "release_url": "https://pypi.org/project/microaligner/1.0.0/",
    "requires_dist": [
      "numpy (>=1.0)",
      "tifffile (>=2020.0)",
      "pandas (>=1.0)",
      "dask (>=2020.0)",
      "scikit-learn (>=1.0)",
      "scikit-image (>=0.19)",
      "pint (>=0.19.2)",
      "opencv-contrib-python (<5.0,>=4.5)"
    ],
    "requires_python": ">=3.7",
    "summary": "MicroAligner: image registration for large scale microscopy",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15375537,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b5e03b6361c0af04bf586133bcb47b2b2cf0a628b4a5567e0789ca68b14b507",
        "md5": "741ec3ba8a936091893b1b0119226bfe",
        "sha256": "d86c34711f6bd9edaae2a29c0526d3ba06f0eb758ed5b58b740aaa0975b1c24a"
      },
      "downloads": -1,
      "filename": "microaligner-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "741ec3ba8a936091893b1b0119226bfe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 63772,
      "upload_time": "2022-10-11T14:54:16",
      "upload_time_iso_8601": "2022-10-11T14:54:16.205227Z",
      "url": "https://files.pythonhosted.org/packages/8b/5e/03b6361c0af04bf586133bcb47b2b2cf0a628b4a5567e0789ca68b14b507/microaligner-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae50c9104fd36b5d6d7c5d02d287a82cd95b576067f7d831bb8061ad4d6ccfb1",
        "md5": "b3a30fdfb47c4dca4fbbff011f5eae67",
        "sha256": "50e8e15a6def78756c8b92187d328cf8d19a1b8f3da562bd28d5f0838cff27f2"
      },
      "downloads": -1,
      "filename": "microaligner-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b3a30fdfb47c4dca4fbbff011f5eae67",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 43669,
      "upload_time": "2022-10-11T14:54:18",
      "upload_time_iso_8601": "2022-10-11T14:54:18.377315Z",
      "url": "https://files.pythonhosted.org/packages/ae/50/c9104fd36b5d6d7c5d02d287a82cd95b576067f7d831bb8061ad4d6ccfb1/microaligner-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}