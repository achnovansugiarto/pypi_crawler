{
  "info": {
    "author": "Tom Carrick",
    "author_email": "tom@carrick.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP :: Site Management"
    ],
    "description": "===============\ndjango-snakeoil\n===============\n\ndjango-snakeoil helps manage your ``<meta>`` tags.\n\nWorks on all supported Django versions using PostgreSQl, or with any database\non Django 3.1+.\n\nIt offers full internationalization support (tags for multiple languages),\ncontent set dynamically from object attributes, automatic Opengraph image\nwidth and heights for ``ImageField``, and more.\n\n`Full documentation <https://django-snakeoil.readthedocs.io/en/latest/index.html>`_\n\nGetting started\n===============\n\nTo install, ``pip install django-snakeoil`` or use your favourite package\nmanager.\n\nYou can use Snakeoil in two ways. If you'd like to attach metadata to an\nobject, you can use the model abstract base class:\n\n.. code-block:: python\n\n    from snakeoil.models import SEOModel\n\n    class Article(SEOModel):\n        title = models.CharField(max_length=200)\n        author = models.ForeignKey(User, on_delete=models.CASCADE)\n        main_image = models.Imagefield(blank=True, null=True)\n\n        @property\n        def author_name(self):\n            return\n\n        @property\n        def snakeoil_metadata(self):\n            metadata = {\n                \"default\": [\n                    {\n                        \"name\": \"author\",\n                        \"content\": self.author.get_full_name(),\n                    },\n                    {\"property\": \"og:title\", \"content\": self.title},\n                ]\n            }\n            if self.main_image:\n                metadata.append(\n                    {\"property\": \"og:image\", \"attribute\": \"main_image\"}\n                )\n            return metadata\n\nYou can also override these tags in the admin per-object.\n\nFor situations where you can't change the model (flatpages, third party apps)\nor don't have one at all, there is an ``SEOPath`` model that maps paths to\nyour meta tags.\n\nTags are added in the admin (or however else you like) as JSON. For example:\n\n.. code-block:: JSON\n\n    {\n        \"default\": [\n            {\"name\": \"description\", \"property\": \"og:description\", \"content\": \"Meta description\"},\n            {\"property\": \"og:title\", \"content\": \"My blog post\"},\n            {\"name\": \"author\", \"attribute\": \"author_name\"},\n            {\"property\": \"og:image\", \"static\": \"img/default.jpg\"}\n        ]\n    }\n\nWhere ``default`` will work for any language. You can replace ``default``\nwith a language code, e.g. \"nl_NL\", and these tags will only display if the\ncurrent language is Dutch. This will generate something like:\n\n.. code-block:: html\n\n    <meta name=\"description\" property=\"og:description\" content=\"Meta description\">\n    <meta property=\"og:title\" \"content=\"My blog post\">\n    <!-- from my_object.author_name -->\n    <meta name=\"author\" content=\"Tom Carrick\">\n    <!-- build a static URL -->\n    <meta property=\"og:image\" content=\"/static/img/default.jpg\">\n\nNote that when using ``static``, width and height are not added, but you may\nadd these yourself. For ``ImageField``, this will be added automatically:\n\n.. code-block:: JSON\n\n    {\n        \"default\": [\n            {\"property\": \"og:image\", \"attribute\": \"main_image\"}\n        ]\n    }\n\nResults in:\n\n.. code-block:: html\n\n    <meta property=\"og:image\" content=\"/media/blog_1_main_image.jpg\">\n    <meta property=\"og:image:width\" content=\"640\">\n    <meta property=\"og:image:height\" content=\"480\">\n\nDjango Templates\n----------------\n\nAdd ``snakeoil`` to your ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        \"snakeoil\",\n        # ...\n    ]\n\nIn your base template, add this where you want the tags to appear:\n\n.. code-block:: html\n\n    {% load snakeoil %}\n    {% block head %}\n        {% meta %}\n    {% endblock %}\n\nThis will automatically find an object based on the ``get_absolute_url()``\nof your model, by looking in the request context. If nothing is found,\nsnakeoil will check for an ``SEOPath`` object for the current path. If\nyou have an object, it is recommended to pass it into the tag directly\nto short-circuit the tag finding mechanisms:\n\n.. code-block:: html\n\n    {% meta my_obj %}\n\nJinja2\n------\n\nSet your environment:\n\n.. code-block:: python\n\n    from jinja2 import Environment\n    from snakeoil.jinja2 import get_meta_tags\n\n    def environment(**options):\n        env = Environment(**options)\n        env.globals.update(\n            {\n                \"get_meta_tags\": get_meta_tags,\n                # ...\n            }\n        )\n        return env\n\nIn your template:\n\n.. code-block:: html\n\n    {% block meta %}\n        {% with meta_tags=get_meta_tags() %}\n            {% include \"snakeoil/seo.jinja2\" %}\n        {% endwith %}\n    {% endblock meta %}\n\nTo pass in an object:\n\n.. code-block:: html\n\n    {% block meta %}\n        {% with meta_tags=get_meta_tags(my_object) %}\n            {% include \"snakeoil/seo.jinja2\" %}\n        {% endwith %}\n    {% endblock meta %}\n\nNotes\n=====\n\nThanks to kezabelle for the name. For those wondering:\n\nMetadata is often used for SEO purposes. A lot of people (rightly or not)\nconsider SEO to be snakeoil. Also, SnakEOil. Very clever, I know.\n\nThe old version of django-snakeoil can be found on the ``old`` branch, but\nwon't be updated.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/knyghty/django-snakeoil",
    "keywords": "django,seo,meta",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-snakeoil",
    "package_url": "https://pypi.org/project/django-snakeoil/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-snakeoil/",
    "project_urls": {
      "Homepage": "https://github.com/knyghty/django-snakeoil"
    },
    "release_url": "https://pypi.org/project/django-snakeoil/1.1.2/",
    "requires_dist": [
      "django"
    ],
    "requires_python": "",
    "summary": "Simple SEO & meta tag management for Django",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12951362,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ef3e85a044ae964eb1795a7c654fff82c141bdbcf811edb6cdec7f82407159f",
        "md5": "8001ea4b096c0c47fc6db3b35a27e77a",
        "sha256": "e672ca19380b702a53631e90d174e6cc0fae3a5be28a0bce927807421c8cc527"
      },
      "downloads": -1,
      "filename": "django_snakeoil-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8001ea4b096c0c47fc6db3b35a27e77a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16577,
      "upload_time": "2022-02-20T14:48:36",
      "upload_time_iso_8601": "2022-02-20T14:48:36.984150Z",
      "url": "https://files.pythonhosted.org/packages/5e/f3/e85a044ae964eb1795a7c654fff82c141bdbcf811edb6cdec7f82407159f/django_snakeoil-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "521f2970f493e697b3841cde5dfffa4b1c75109fd69f8d07fc35cb084c89ab92",
        "md5": "5180eb9eb1e05e3bfca10643693ff679",
        "sha256": "1d0ae03c15570f73e8c0d0586b3bcefdee89a25003856bcdf6744c57cfd38733"
      },
      "downloads": -1,
      "filename": "django-snakeoil-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5180eb9eb1e05e3bfca10643693ff679",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15172,
      "upload_time": "2022-02-20T14:48:38",
      "upload_time_iso_8601": "2022-02-20T14:48:38.553533Z",
      "url": "https://files.pythonhosted.org/packages/52/1f/2970f493e697b3841cde5dfffa4b1c75109fd69f8d07fc35cb084c89ab92/django-snakeoil-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}