{
  "info": {
    "author": "Matthias Erll",
    "author_email": "matthias@erll.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Software Distribution"
    ],
    "description": "Docker-Registry-Util\n====================\n\nSearch and cleanup on Docker Registry v2.\n-----------------------------------------\n\nProject: https://github.com/merll/docker-registry-util\n\nOverview\n========\n\nThis project allows queries on existing repositories and tags of a\nDocker Registry (v2). It comes with a command line utility ``dregutil``,\nbut can also be used as a lightweight API. Besides gathering information\nimages can also be deleted from a private Docker Registry, allowing for\ngarbage collection.\n\nBackground\n==========\n\nIt is a good idea to clean up a private Docker registry every now and\nthen. For example, images that have only been generated for testing\npurposes and never been sent to production could be deleted for freeing\nup storage space.\n\nSince version 2.4.x, the `Docker\nRegistry <https://github.com/docker/distribution/>`__ comes with a\n`garbage\ncollector <https://github.com/docker/distribution/blob/master/docs/garbage-collection.md>`__.\nAccording to its documentation, it deletes all blobs not referred to by\nany image manifest, freeing up space.\n\nThe storage of the Docker registry itself is similar to the Docker host\nimage collection: The Docker Registry works on content-based storage,\nwith the possibility for adding tags. If we take for example an image\nthat has a certain SHA256 digest ``sha256:00...`` and two tags:\n``1.0.0`` and ``latest``. It is possible to address (e.g. fetch) the\nimage using both the digest and either tag. If we upload an image with\ndigest ``sha256:11...`` and tags ``2.0.0`` and ``latest``, the\n``latest`` tag will be removed from the ``sha256:00...`` image.\n\nOther than the Docker API, which tells all the tags of a certain image\nid, the Registry API only lists repositories and tags and shows the\nassociated digest. Technically an identical digest can even be shared by\nmultiple repositories. If we want to remove an image, we want to make\nsure that we do not destroy unknown repositories and tags.\n\nThis utility presents this relation in both ways. When a tag is selected\nfor deletion, its related digests are reverse-checked for an association\nwith any other repository and tag.\n\nThe entire registry tags and digests are read, and then stored locally\nin order to speed up further processes. Therefore, the aforementioned\nreverse-check may take place on outdated information. It is recommended\nto update the cache frequently using the ``--refresh`` argument and -\nlike the Docker Registry garbage collection - only perform any change\noperations under low or no traffic on the registry.\n\nRegistry configuration\n======================\n\nIn order for this tool to work, the Docker Registry needs to be\nconfigured for allowing deletion. In the configuration file, add the\nfollowing:\n\n.. code:: yaml\n\n    delete:\n      enabled: true\n\nBesides that, you need to need to set the environment variable\n``REGISTRY_STORAGE_DELETE_ENABLED`` to ``true`` when creating the\ncontainer. This is not documented in the `Registry Configuration\nReference <https://docs.docker.com/registry/configuration/>`__ but was\nrequired last time I checked and subject to some issue reports (e.g.\n`#989 <https://github.com/docker/distribution/issues/989>`__ and\n`#1573 <https://github.com/docker/distribution/issues/1573>`__).\n\nInstallation\n============\n\nThis library is implemented in Python 3. After `downloading and\ninstalling Python <https://www.python.org/downloads/>`__, installation\nis simply done via ``pip``:\n\n.. code:: bash\n\n    pip install docker-registry-util\n\nfor installing the latest release or\n\n.. code:: bash\n\n    pip install git+https://github.com/merll/docker-registry-util.git\n\nfor installing the latest development version.\n\nGetting started\n===============\n\nThe library first needs to know how to connect to your registry. The\nfollowing can be set via the command line or through environment\nvariables:\n\n+-------------------------+------------------+----------------------------------+\n| Environment variable    | Command line     | Description                      |\n|                         | arg.             |                                  |\n+=========================+==================+==================================+\n| REGISTRY                | -reg             | Registry server to connect to.   |\n+-------------------------+------------------+----------------------------------+\n| REGISTRY\\_USER          | -u               | User for basic authentication.   |\n+-------------------------+------------------+----------------------------------+\n| REGISTRY\\_PASSWORD      | -p               | Password for basic               |\n|                         |                  | authentication.                  |\n+-------------------------+------------------+----------------------------------+\n| REGISTRY\\_USE\\_DIGEST\\_ | --digest-auth    | Use HTTP Digest Authentication   |\n| AUTH                    |                  | instead of basic auth.           |\n+-------------------------+------------------+----------------------------------+\n| REGISTRY\\_CLIENT\\_CERT  | -cert            | Client certificate (and          |\n|                         |                  | optionally key) for the          |\n|                         |                  | registry.                        |\n+-------------------------+------------------+----------------------------------+\n| REGISTRY\\_CLIENT\\_KEY   | -key             | Key for the client certificate,  |\n|                         |                  | if not included in the -cert     |\n|                         |                  | file.                            |\n+-------------------------+------------------+----------------------------------+\n| REQUESTS\\_CA\\_BUNDLE    | -v               | Alternative bundle of            |\n|                         |                  | certificate authorities for      |\n|                         |                  | validating the registry.         |\n+-------------------------+------------------+----------------------------------+\n\nThe ``REGISTRY`` / ``-reg`` specification is required. If\n``REGISTRY_USER`` / ``-u`` is not specified, the tool attempts to look\nup authentication information from the local Docker CLI configuration\n(``~/.docker/config.json``).\n\nWith this basic configuration, you can query the registry contents via\nthe command line, e.g.\n\n.. code:: bash\n\n    dregutil list-repo-names\n\nlists all the repository names from the registry.\n\n.. code:: bash\n\n    dregutil list-tag-names\n\nlists all available repositories and tags.\n\nOn the first start, the tool will query all digests and tags from the\nregistry. In order to speed up operations, this information is stored in\na local cache file named according to the registry name. For example,\nsetting the registry to ``registry.example.com`` stores the cache in\n``registry_example_com_cache.json``. If you have done any upload\noperations or deletes outside of this tool, you can force a refresh\nusing the ``--refresh`` command line argument; you can also relocate the\ncache file using the ``-c`` argument or deactivate the cache entirely\nsetting ``-c None``.\n\nQueries\n=======\n\nQueries will list the digests that are used by particular repositories\nor tags.\n\nRepositories can be queried by exact name:\n\n.. code:: bash\n\n    dregutil query-repos -r my-repo\n\nTags can be listed using exact names or version selectors.\n\n.. code:: bash\n\n    dregutil query-tags -r my-repo -t latest\n\nAlternatively, you can query versions by prepending an operator ``<``,\n``>``, ``<=``, ``>=``, or ``==`` to a version number. Make sure to\nescape the ``>`` and ``<`` for the shell you are using.\n\n.. code:: bash\n\n    dregutil query-tags -r my-repo -t \\<1.4\n\nQueries by regular expressions are also possible.\n\n.. code:: bash\n\n    dregutil query-tags -r my-repo -re 1\\\\.*\n\nFor excluding a tag or version match, use the ``-x`` argument. For a\nRegEx-based exclusion, use ``-xre``.\n\nDeletion\n========\n\nDeleting digests from the registry is possible using the same syntax as\nfor queries, but using ``remove-repos`` or ``remove-tags``.\n\n.. code:: bash\n\n    dregutil remove-repos -r my-repo\n\nremoves all digests that belong to the repository ``my-repo`` from the\nregistry.\n\n.. code:: bash\n\n    dregutil remove-tags -r my-repo -t \\<1.4\n\nmarks all tags of ``my-repo`` as deleted that carry a version number\nlower than ``1.4``.\n\nPartial vs. complete match\n==========================\n\nAs image digests may belong to multiple tags, there is a possibility\nthat you might select tags for deletion that are shared with other\nimages, but that you had not intended to remove. Therefore the default\nbehavior is to reverse-check selected digests against your original\nselection. For example\n\n.. code:: bash\n\n    dregutil remove-tags -r my-repo -t \\<1.4\n\nwill by erase all digests with a version number lower than ``1.4``,\nunless they belong any other tag or repository. If one of the images is\nalso tagged as ``my-repo/one``, it is not removed, unless\n\n.. code:: bash\n\n    dregutil remove-tags -r my-repo -t \\<1.4 one\n\nis specified.\n\nThis behavior can be changed generally using the ``--no-match-all-tags``\ncommand line option. You can also raise an error on the event of\nunexpected intersections using the ``--raise-intersecting-tag``\nargument.\n\nFurther information\n===================\n\nA complete reference to available commands and arguments is available\nvia ``dregutil --help``, or ``dregutil [command] --help`` for details\nabout single command.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/merll/docker-registry-util",
    "keywords": "docker,registry,query,cleanup",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "docker-registry-util",
    "package_url": "https://pypi.org/project/docker-registry-util/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/docker-registry-util/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/merll/docker-registry-util"
    },
    "release_url": "https://pypi.org/project/docker-registry-util/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Search and cleanup on Docker Registry v2.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3334205,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fe42a5aa3e66dbaf037c9777266dbf08ad486cc2c99ab6ec9a33876a35bde93",
        "md5": "6d680a11dfacda9ce6b836f4e8e9a52f",
        "sha256": "46450fb2167b29603bc099e73d27593dada790ae9b1aeb024dfbe050bc5474fd"
      },
      "downloads": -1,
      "filename": "docker_registry_util-1.0.2-py3.5.egg",
      "has_sig": false,
      "md5_digest": "6d680a11dfacda9ce6b836f4e8e9a52f",
      "packagetype": "bdist_egg",
      "python_version": "3.5",
      "requires_python": null,
      "size": 44034,
      "upload_time": "2016-08-22T11:50:14",
      "upload_time_iso_8601": "2016-08-22T11:50:14.085611Z",
      "url": "https://files.pythonhosted.org/packages/5f/e4/2a5aa3e66dbaf037c9777266dbf08ad486cc2c99ab6ec9a33876a35bde93/docker_registry_util-1.0.2-py3.5.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2aee9869dfd2de3ee942dc783852c6e223a8fe7a42186cb3807bfe8c5858b7f",
        "md5": "1f572852dd6aff74acc950badf639940",
        "sha256": "b3e73f431e4aedfe830467d80b1b5bc82abc71512feec9dd66a8e75d13df88d9"
      },
      "downloads": -1,
      "filename": "docker-registry-util-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1f572852dd6aff74acc950badf639940",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16112,
      "upload_time": "2016-08-22T11:50:11",
      "upload_time_iso_8601": "2016-08-22T11:50:11.960469Z",
      "url": "https://files.pythonhosted.org/packages/b2/ae/e9869dfd2de3ee942dc783852c6e223a8fe7a42186cb3807bfe8c5858b7f/docker-registry-util-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}