{
  "info": {
    "author": "Froala Labs",
    "author_email": "xtranophilist@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django Froala WYSIWYG Editor\n\n>django-froala-editor package helps integrate [Froala WYSIWYG HTML editor](https://froala.com/wysiwyg-editor/) with Django.\n\n## Getting started\n\n1. Install the package:\n\n  `pip install django-froala-editor`\n\n  if not update in pypi use this\n  \n  `pip install https://github.com/froala/django-froala-editor/archive/master.zip`\n\nOR\n\nAdd the directory `froala_editor` from this repo to your Python path.\n\n1. Add `froala_editor` to INSTALLED_APPS in `settings.py`.\n\n2. Add the following line to `urlpatterns` in your application's `urls.py`.\n\n```python\n  url(r'^froala_editor/', include('froala_editor.urls')),\n```\n\nSkip this url inclusion if you don't want image and file upload inside WYSIWYG editor. Images from URLs can still be embedded.\n\n## Usage\n\n```python\nfrom django.db import models\nfrom froala_editor.fields import FroalaField\n\nclass Page(models.Model):\n  content = FroalaField()\n```\n\n`FroalaField` uses `froala_editor.widgets.FroalaEditor` as its widget. You may directly use this widget with any of your forms.py:\n\n```python\nfrom django import forms\nfrom froala_editor.widgets import FroalaEditor\n\nclass PageForm(forms.ModelForm):\n  content = forms.CharField(widget=FroalaEditor)\n```\n\n### Usage outside admin\n\nWhen used outside the Django admin, the media files are to be manually included in the template. Inside the ``<head>`` section or before the form is rendered, include:\n\n```python\n{{ form.media }}\n```\n\nIn case of jQuery conflict (when your project template already has jQuery), you need to include the following files instead of `{{ form.media }}` plus the static files for theme (if not default) and required plugins.\n\n```python\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<link href=\"{{STATIC_URL}}froala_editor/css/froala_editor.min.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<link href=\"{{STATIC_URL}}froala_editor/css/froala_style.min.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<script type=\"text/javascript\" src=\"{{STATIC_URL}}froala_editor/js/froala_editor.min.js\"></script>\n```\n\nOr simply, you may use the following in your `settings.py` if you don't want Froala to include jQuery by itself, thus preventing any conflicts:\n\n```python\nFROALA_INCLUDE_JQUERY = False\n```\n\n### Options\n\nFroala Editor provides several options for customizing the editor. See [https://froala.com/wysiwyg-editor/docs](https://froala.com/wysiwyg-editor/docs) for all available options.\nYou can provide a dictionary of these options as `FROALA_EDITOR_OPTIONS` setting in `settings.py`. These options would then be used for all instances of the WYSIWYG editor in the project.\n\nOptions for individual field can also be provided via `FroalaField` or `FroalaEditor` class. This overrides any options set via `FROALA_EDITOR_OPTIONS`:\n\n```python\nfrom django.db import models\nfrom froala_editor.fields import FroalaField\n\nclass Page(models.Model):\n  content = FroalaField(options={\n    'toolbarInline': True,\n  })\n```\n\n```python\nfrom django import forms\nfrom froala_editor.widgets import FroalaEditor\n\nclass PageForm(forms.ModelForm):\n  content = forms.TextField(widget=FroalaEditor(options={\n    'toolbarInline': True,\n  }))\n```\n\n### Theme\n\nYou may provide the name of the theme to be used as `theme` argument to `FroalaField` or `FroalaEditor`.\n\n```python\nfrom django.db import models\nfrom froala_editor.fields import FroalaField\n\nclass Page(models.Model):\n  content = FroalaField(theme='dark')\n```\n\n`FROALA_EDITOR_THEME` can be set in `settings.py` making all instances of the editor to use a theme. However, `theme` argument in `FroalaField` and `FroalaEditor` overrides `FROALA_EDITOR_THEME`. Using a theme named 'dark' would require the existence of the file `froala_editor/static/froala_editor/css/themes/dark.min.css`. Available themes are: 'dark', 'gray' and 'red'.\n\n### Plugins\n\nFroala Editor comes with the plugins: block style, text & background colors, font size, font family, insert video, insert table, media manager, lists and file upload. By default, all plugins are enabled by default in this package. See [https://froala.com/wysiwyg-editor/docs/plugins](<https://froala.com/wysiwyg-editor/docs/plugins>) for all available plugins.\n\n`FROALA_EDITOR_PLUGINS` can be set in `settings.py` to tell which plugins should all instances of Froala Editor be using. By default, it is\n\n```python\nFROALA_EDITOR_PLUGINS = ('align', 'char_counter', 'code_beautifier' ,'code_view', 'colors', 'draggable', 'emoticons',\n        'entities', 'file', 'font_family', 'font_size', 'fullscreen', 'image_manager', 'image', 'inline_style',\n        'line_breaker', 'link', 'lists', 'paragraph_format', 'paragraph_style', 'quick_insert', 'quote', 'save', 'table',\n        'url', 'video')\n```\n\nThe usage of `plugins` argument with `FroalaEditor` or `FroalaField` overrides this for that particular instance.\n\n```python\nfrom django.db import models\nfrom froala_editor.fields import FroalaField\n\nclass Page(models.Model):\n  content = FroalaField(plugins=('font_size', 'font_family'))\n```\n\n### Image upload\n\n`FroalaEditor` and `FroalaField` optionally take in a boolean value for `image_upload` argument to enable or disable image uploads. Image uploads are enabled by default if the urls of this package are included in your urls.py.\n\nYou can use `FROALA_UPLOAD_PATH` setting in `settings.py` to change the path where uploaded files are stored within the `MEDIA_ROOT`. By default, `uploads/froala_editor/images` is used for storing uploaded images.\n\n### Include jQuery\n\njQuery is included by default in form media. If you don't want to include jQuery, you may pass `include_jquery=False` to `FroalaEditor` or `FroalaField`. `FROALA_INCLUDE_JQUERY` can be also set in `settings.py` for project wide effects.\n\n## License\n\nThis package is available under BSD License. However, in order to use Froala WYSIWYG HTML Editor plugin you should purchase a license for it.\n\nSee [https://froala.com/wysiwyg-editor/pricing](https://froala.com/wysiwyg-editor/pricing) for licensing the Froala Editor.\n\nIf you bought a license and got your key, the easiest way to implement it is to put it into the `FROALA_EDITOR_OPTIONS` setting in `settings.py`:\n\n```python\nFROALA_EDITOR_OPTIONS = {\n  'key': '<our key goes here>',\n  # other options\n  # ...\n}",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/froala/django-froala-editor/",
    "keywords": "froala,django,admin,wysiwyg,editor,text,html,editor,rich,web",
    "license": "BSD License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-froala-editor",
    "package_url": "https://pypi.org/project/django-froala-editor/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-froala-editor/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/froala/django-froala-editor/"
    },
    "release_url": "https://pypi.org/project/django-froala-editor/2.6.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "django-froala-editor package helps integrate Froala WYSIWYG HTML editor with Django.",
    "version": "2.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17414871,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f856b2ac0bcc8a6701bd4caadb510bc39555f0157ecb3e722f29bcffff1cbd3f",
        "md5": "400e16ba4c20f900621083949daa69fc",
        "sha256": "bfd0e5aea3d02181b2fbaca6438c6329df9c3f45b24db20f967c2f6364fc4d1f"
      },
      "downloads": -1,
      "filename": "django-froala-editor-2.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "400e16ba4c20f900621083949daa69fc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 272456,
      "upload_time": "2017-05-25T13:48:39",
      "upload_time_iso_8601": "2017-05-25T13:48:39.353603Z",
      "url": "https://files.pythonhosted.org/packages/f8/56/b2ac0bcc8a6701bd4caadb510bc39555f0157ecb3e722f29bcffff1cbd3f/django-froala-editor-2.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}