{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. _CodeMirror: http://codemirror.net/\n.. _CodeMirror Documentation: http://codemirror.net/doc/manual.html\n.. _jQuery: http://jquery.com/\n.. _jQuery.ajax(): http://api.jquery.com/jQuery.ajax/\n.. _Django CSRF: https://docs.djangoproject.com/en/dev/ref/contrib/csrf/\n.. _Django staticfiles: https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/\n.. _Django internationalization system: https://docs.djangoproject.com/en/dev/topics/i18n/\n.. _django-assets: http://pypi.python.org/pypi/django-assets\n.. _ReStructuredText: http://docutils.sourceforge.net/rst.html\n\nIntroduction\n============\n\n**Django-CodeMirror** is a Django application to embed the `CodeMirror`_ editor.\n\nIt was designed to be used in **sveedocuments**, so it is suited for a\n`ReStructuredText`_ environment but `CodeMirror`_ support a large range of syntax\ncoloration modes (PHP, Python, Ruby, Java, HTML, etc..). It is essentialy a jQuery\nplugin on top of `CodeMirror`_ to add some features like :\n\n* A button bar with keyboard shortcuts to use some syntax element in your text;\n* A maximize mode to resize the editor at full browser size;\n* A preview mode;\n* A quicksave option;\n* Support translations with english and french allready shipped;\n* Compatibility with `Django CSRF`_.\n\n**NOTE :** Since the version 3.0, CodeMirror does not really support IE7 and so Django-CodeMirror too.\n\nLinks\n*****\n\n* Download his\n  `PyPi package <http://pypi.python.org/pypi/djangocodemirror>`_;\n* Clone it on his\n  `Github repository <https://github.com/sveetch/djangocodemirror>`_;\n\nRequires\n========\n\nYour project will have to includes a copy of these Javascript libraries :\n\n* `jQuery`_ >= 1.7 (2.0 has not been tested);\n* `CodeMirror`_ == 3.0 but it is allready included as a git submodule or in the Python package;\n\nOptionnally, to use Assets bundles instead of plain assets, you can install `django-assets`_.\n\nInstall\n=======\n\nThe easiest method to install it, is with ``pip`` like this : ::\n\n    pip install djangocodemirror\n\nOr installing it like you want from the Github repository.\n\nSettings\n********\n\nIn your *settings* file add the app to your installed apps :\n\n::\n\n    INSTALLED_APPS = (\n        ...\n        'djangocodemirror',\n        ...\n    )\n\nAnd you will need to have a copy of `CodeMirror`_ in your *statics* directory (see\n`Django staticfiles`_). The jQuery library must be called by your templates,\n**Django-CodeMirror** don't do it for you.\n\nGetting CodeMirror\n******************\n\n`CodeMirror`_ is included as a git submodule, so you can install it from Github. Within the root of the **Django-CodeMirror** repository do this : ::\n\n    git submodule update --init\n\nThis is optionnal, if you want you can download it and install it yourself.\n\nIf you have used ``pip`` to install **Django-CodeMirror**, you don't have to mind about this as `CodeMirror`_ is allready shipped in the PyPi package.\n\nUsage\n=====\n\nDjangoCodeMirror\n****************\n\n`DjangoCodeMirror`_ is the `jQuery`_ plugin on top of `CodeMirror`_, it accepts all\n`CodeMirror`_ options and some additional :\n\nfullscreen\n    This enable the maximize mode at ``true``. It is enabled by default.\nhelp_link\n    Help page link to put in button bar if filled. If the string is empty there will be\n    no help button displayed. When clicked the link is opened in a new window.\nquicksave_url\n    When the string is not empty, it is used as the URL to send data in **POST** request\n    where the view receiver should save the data. This is disabled by default. If the\n    ``csrf`` option is enabled, it will be used in the request.\n\n    The default sended datas are :\n\n    * ``nocache`` : a timestamp used to block some browser caching, this can be ignored;\n    * ``content`` : the textarea content.\n\n    More datas can be sended with the ``quicksave_datas`` option.\nquicksave_datas\n    Expect an object ``{...}`` whose variables will be sended as data in *quicksave*\n    request.\n\n    Or it can be a *string* that determine a variable name to find the object in the\n    global context. This is useful if you want to use a variable that can change and not\n    a defined object at page load.\npreview_url\n    When the string is not empty, it is used as the URL to send data in **POST** request\n    where the view receiver should render the content with a parser. The excepted\n    response must return the HTML fragment rendered. This is disabled by default. If the\n    ``csrf`` option is enabled, it will be used in the request.\n\n    The default sended datas are :\n\n    * ``nocache`` : a timestamp used to block some browser caching, this can be ignored;\n    * ``content`` : the textarea content.\ncsrf\n    Expect a *string* containing the function name which be used to modify a request to\n    add it the needed *token* by `Django CSRF`_. The token will be injected in the\n    request headers. A ready to use function is allready shipped.\n\n    The function have two required arguments :\n\n    * xhr : the `jQuery`_ XMLHTTPRequest to be modified;\n    * settings : the settings object used with `jQuery.ajax()`_.\n\n    You should see the option ``beforeSend`` of `jQuery.ajax()`_ for more details, this\n    is where the csrf function is really used.\ndisplay_cursor_position\n    At ``True`` it enable the display of current line and column in the bottom right of\n    the editor. This option is enabled by default.\nno_tab_char\n    At ``True`` the usage of the tabulation key will not write a tabulation character and\n    spaces will be writed in replacment. The number of spaces will be determined from the\n    *tabSize* option (default to 4) from CodeMirror.\nundo_buttons\n    At ``True`` it display buttons *Undo* and *Redo* in the buttons bar. Enabled by\n    default.\nsettings_cookie\n    When the string is not empty, it is used as the cookie name where to search settings\n    to overwrite the default ones (of Django-CodeMirror).\nsearch_enabled\n    Only for your application settings, the plugin doesn't know of this option. At\n    ``True`` this will enable the *search & replace* feature of `CodeMirror`_. This is\n    enabled by default for `DjangoCodeMirrorField`_ and the demo settings.\n\nA full example of these settings with the plugin :\n\n::\n\n    <div>\n        <textarea id=\"id_content\" rows=\"10\" cols=\"40\" name=\"content\"></textarea>\n        <script language=\"JavaScript\" type=\"text/javascript\">\n        //<![CDATA[\n            my_datas = {'foo': 'bar'};\n            $(document).ready(function() {\n                id_content_codemirror_instance = $('#id_content').djangocodemirror({\n                    \"mode\": \"rst\",\n                    \"csrf\": \"CSRFpass\",\n                    \"fullscreen\": true,\n                    \"help_link\": \"/help/\",\n                    \"quicksave_url\": \"/djangocodemirror-sample/quicksave/\",\n                    \"quicksave_datas\": my_datas,\n                    \"preview_url\": \"/djangocodemirror-sample/preview/\",\n                    \"display_cursor_position\": true,\n                    \"no_tab_char\": true,\n                    \"undo_buttons\": true,\n                    \"settings_cookie\": \"djancocodemirror_settings\",\n                    \"lineNumbers\": true\n                });\n            });\n        //]]>\n        </script>\n    </div>\n\nThe plugin use some additional libraries (allready shipped) :\n\n* `jquery.cookie <https://github.com/carhartl/jquery-cookie>`_ >= 1.3.1 but note that if you use Foundation5 this library is allready shipped in its vendor Javascript libraries;\n\n.. NOTE:: If you directly use the plugin, you will have to load yourself all needed\n          libaries, see `Fields static files`_ for a details of these.\n\n.. WARNING:: Previous versions (<0.7.2) was automatically loading the Javascript init\n             for the field. This is not the default behavior anymore. You should see the\n             ``embed_settings`` widget attribute to enable this behavior. Else you will\n             use the default behavior and manually load the needed Javascript using the\n             given `Template tags`_.\n\nCodeMirrorWidget\n****************\n\nThis is the widget to use in your form fields to apply them an instance of\n`DjangoCodeMirror`_ or `CodeMirror`_. It is accessible at\n``djangocodemirror.fields.CodeMirrorWidget``.\n\nUsage example on a form field :\n\n::\n\n    from djangocodemirror.fields import CodeMirrorWidget\n\n    class CodeMirrorSampleForm(forms.Form):\n        content = forms.CharField(label=u\"Your content\", widget=CodeMirrorWidget)\n\n        def save(self, *args, **kwargs):\n            return\n\nThe widget accept some additional arguments :\n\n* ``codemirror_only`` A *boolean* to disable the `DjangoCodeMirror`_ usage at benefit of\n  `CodeMirror`_. It is ``False`` by default;\n* ``config_name`` : name of the settings to use, a valid key name from\n  ``settings.CODEMIRROR_SETTINGS``;\n* ``codemirror_settings_extra`` an optional dict to override some settings;\n* ``embed_settings`` : A *boolean* to active the automatic embed of the needed\n  Javascript code to launch a CodeMirror instance for the field. This is ``False``\n  by default because there is lots of possible scenarios to manage your assets and\n  Javascript code. So if you active this, DjangoCodeMirror assets must be loaded\n  BEFORE your field appear in the HTML code;\n\nAnother example where the ``content`` field will be a `CodeMirror`_ editor with enabled\nline numbers :\n\n::\n\n    from djangocodemirror.fields import CodeMirrorWidget\n\n    class CodeMirrorSampleForm(forms.Form):\n        content = forms.CharField(label=\"Your content\", widget=CodeMirrorWidget(config_name='default'}))\n\n        def save(self, *args, **kwargs):\n            return\n\nNote that previously, ``CodeMirrorWidget`` required the ``codemirror_attrs`` to directly receives settings as a dict. This is not the behavior anymore, because the widget was not aware of the settings name that is needed with the Assets bundle system. If you don't want to use Assets bundles and want to directly specify settings as a dict, you will have to use the ``CodeMirrorAttrsWidget`` that accepts the same argument as ``CodeMirrorWidget`` but with ``codemirror_attrs`` instead of ``config_name``.\n\nUsing within the Django admin\n-----------------------------\n\nTo use the plugin within your model forms without to edit their admin templates or admin forms, you will have to specify some special arguments. The process is to use the ``_media`` property so the admin can automatically load all of them.\n\nSo for example with a model like this : ::\n\n    class MyModel(models.Model):\n        title = models.CharField('title', blank=False, max_length=255)\n        content = models.TextField('content', blank=False)\n\nYou would have a model admin like this : ::\n\n    class MyModelAdmin(admin.ModelAdmin):\n        formfield_overrides = {\n            models.TextField: {'widget': CodeMirrorWidget(config_name='default', embed_settings=True)},\n        }\n\nNote the ``embed_settings``, it specifies to add the Javascript settings directly bellow the textarea tag and the second one;\n\nCodeMirrorField\n***************\n\nThis inherit from ``django.forms.CharField`` to automatically use `CodeMirrorWidget`_ as\nthe widget field. The widget set the ``codemirror_only`` attribute to ``True`` to use\nonly the `CodeMirror`_ editor.\n\nIt take an additional named argument ``config_name`` like `CodeMirrorWidget`_, his\ndefault value correspond to the ``default`` setting of `CODEMIRROR_SETTINGS`_.\n\n::\n\n    from django import forms\n    from djangocodemirror.fields import CodeMirrorField\n\n    class CodeMirrorSampleForm(forms.Form):\n        content_codemirror = CodeMirrorField(label=u\"Your content\", config_name='default'})\n\n        def save(self, *args, **kwargs):\n            return\n\nDjangoCodeMirrorField\n*********************\n\nIt is identical as `CodeMirrorField`_ but for usage of `DjangoCodeMirror`_ as the widget\nfield.\n\nHis default value for ``config_name`` corresponds to\n`DJANGOCODEMIRROR_DEFAULT_SETTING`_.\n\n::\n\n    from django import forms\n    from djangocodemirror.fields import CodeMirrorField\n\n    class CodeMirrorSampleForm(forms.Form):\n        content_djangocodemirror = DjangoCodeMirrorField(label=u\"Your content\", config_name='djangocodemirror'})\n\n        def save(self, *args, **kwargs):\n            return\n\nApplication settings\n====================\n\nAll default app settings is located in the ``settings_local.py`` file of\n``djangocodemirror``, you can modify them in your project settings using\nthe ``CODEMIRROR_SETTINGS`` setting.\n\nCODEMIRROR_FIELD_INIT_JS\n************************\n\n**Type :** *string*\n\nHTML code to instantiate `CodeMirror`_ in form fields, this is a template string (usable\nwith ``String.format()``) which expect two variable places :\n\n* ``{inputid}`` : Will be the unique field id;\n* ``{settings}`` : Will be a JSON string representation of the editor settings.\n\nDJANGOCODEMIRROR_FIELD_INIT_JS\n******************************\n\n**Type :** *string*\n\nThis identical to `CODEMIRROR_FIELD_INIT_JS`_ but for `DjangoCodeMirror`_ usage only.\n\nCODEMIRROR_SETTINGS\n*******************\n\n**Type :** *dict*\n\nThe settings schemes to use with `CodeMirror`_ and `DjangoCodeMirror`_ editors. Each\neditor form fields use this schemes to get their default settings. Note that these\noptions must be suitable to be transformed by the Python JSON parser.\n\nThe default available settings schemes are :\n\n* ``default`` : Only for enable the option to show line numbers;\n* ``djangocodemirror`` : Minimal options for `DjangoCodeMirror`_ (line numbers and mode\n  ``rst`` for `ReStructuredText`_);\n* ``djangocodemirror_with_preview`` : Same as ``djangocodemirror`` but enable the\n  preview option on ``preview/``;\n* ``djangocodemirror_sample_demo`` : Same as ``djangocodemirror`` but enable all stuff\n  needed in the `Sample demonstration`_.\n\nDJANGOCODEMIRROR_DEFAULT_SETTING\n********************************\n\n**Type :** *string*\n\nThe keyword to use to select the default settings with `DjangoCodeMirrorField`_. Note\nthat `CodeMirrorField`_ always use the keyword ``default`` to select his default\nsettings.\n\nDJANGOCODEMIRROR_TRANSLATIONS\n*****************************\n\n**Type :** *list* or *tuple*\n\nA list of paths for available translations.\n\nCODEMIRROR_THEMES\n*****************\n\n**Type :** *list* or *tuple*\n\nA list of paths for available themes to load with `CodeMirror`_. There is actually no\nloaded theme by default, you will have to set one in your `CODEMIRROR_SETTINGS`_\n\nCODEMIRROR_MODES\n****************\n\n**Type :** *list* or *tuple*\n\nA list of tuples for the various syntax coloration modes supported by `CodeMirror`_.\nThis list is generated from the available mode files in `CodeMirror`_.\n\nFields static files\n===================\n\nAll given paths will be assumed to be in your staticfiles directory\n(see `Django staticfiles`_).\n\nDirect assets\n*************\n\nIf you plan to use the simple assets system, they are now defined in the\n``templates/djangocodemirror/include_field_assets.html`` template, with some conditional\nincludes from the widget settings. This is the default template used with the\n``djangocodemirror_get_assets`` template filter.\n\nBundle assets\n*************\n\nIf you plan to only use Bundle assets with `django-assets`_, assets are defined in the\n``assets.py`` module that is automatically loaded by `django-assets`_. You will have to\nuse the ``djangocodemirror_get_bundles`` template filter, that is using the\n``templates/djangocodemirror/include_field_bundles.html`` template.\n\nTemplate tags\n=============\n\nFor inputs\n**********\n\nYou will need to load the template tags module in your templates like this : ::\n\n    {% load djangocodemirror_inputs %}\n\nFilters\n-------\n\ndjangocodemirror_input_settings\n    Get the generated widget settings and return it as JSON. It take the form field as required argument like this : ::\n\n        {{ form.content|djangocodemirror_input_settings }}\ndjangocodemirror_init_input\n    Return the HTML tag to embed the Javascript init for a djangocodemirror input field. Take the same argument as ``djangocodemirror_input_settings``.\n\nFor assets\n**********\n\nYou will need to load the template tags module in your templates like this : ::\n\n    {% load djangocodemirror_assets %}\n\nFilters\n-------\n\ndjangocodemirror_get_assets\n    Return the html to load all needed assets for all given djangocodemirror fields\n\n    This can only be used on a field that have allready been rendered.\n\n    Usage : ::\n\n        {% load djangocodemirror_assets %}\n\n        <html>\n            <head>\n            ...\n            {% djangocodemirror_get_assets form.myfield1 form.myfield2 %}\n            </head>\n        ...\n        </html>\n\n    Warning, the tag does not throw explicit template errors for invalid fields.\ndjangocodemirror_get_bundles\n    It works exactly like the ``djangocodemirror_get_assets`` except it use django-assets\n    bundles in place of direct assets. You should not use this if you don't have `django-assets`_\n    installed.\n\nSample demonstration\n====================\n\nYou can rapidly insert **Django-CodeMirror** in your project in adding\n``djangocodemirror.urls`` to your project ``urls.py`` file. This will use\n``djangocodemirror.views`` which contains the demonstration views.\n\n::\n\n    urlpatterns = patterns('',\n        ...\n        (r'^djangocodemirror-sample/', include('djangocodemirror.urls')),\n        ...\n    )\n\nThree views are avalaible :\n\n* The editor demonstration on ``djangocodemirror-sample/`` using `ReStructuredText`_;\n* The preview view ``preview/`` used in editor demo, it require **sveedocuments** to\n  work correctly or it will simply return a dummy content. This view accepts only\n  **POST** request and return an empty response for all request type (like GET);\n* The quicksave view ``quicksave/`` used in editor demo, doesn't really save anything,\n  just do some validation. It require **sveedocuments** to work correctly.\n* A public view ``settings/`` usable to edit some settings for the editor. These\n  custom settings will be saved in a cookie.\n\nThe sample view uses the ``djangocodemirror/sample.html`` template that is using by\ndefault the `Direct assets`_. If your project use `Bundle assets`_, you will have to\noverload this template in your project by creating a ``djangocodemirror/sample.html``\ntemplate in your project templates directory and use the correct filter like this :\n\n::\n\n    {% extends \"djangocodemirror/sample_base.html\" %}\n    {% load djangocodemirror_assets %}\n\n    {% block djangocodemirror_assets_loading %}{% djangocodemirror_get_bundles form.content %}{% endblock %}\n\n\nInternationalization and localization\n=====================================\n\nThis application make usage of the `Django internationalization system`_ only in his\ndemonstration. However the editor is translated with his own system using a javascript\nfile for each available language.\n\nTo add a new language, you will have to add a new javascript file that will register the\nnew available language. Just create a file with this :\n\n::\n\n    DCM_Translations[\"NAME\"] = {\n        // Translations goes here\n    };\n\nWhere ``NAME`` is the language locale name to register and ``// Translations goes here``\nmust be replaced by the content to translate. To see a full translation see the french\nversion in ``static/djangocodemirror/djangocodemirror.fr.js`` where you can see all the\nstring to translate.\n\nYou can save your file where you want in your project or application, you will just have\nto register it in the setting `DJANGOCODEMIRROR_TRANSLATIONS`_.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangocodemirror",
    "package_url": "https://pypi.org/project/djangocodemirror/",
    "platform": null,
    "project_url": "https://pypi.org/project/djangocodemirror/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/djangocodemirror/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5228454,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd11ae362675ac06176cccf709c7b5549ce4984c27b76f8ca8e62ab0b33ef466",
        "md5": "90e1b2119289ee788bc4a554bb419703",
        "sha256": "e1788d07a8eb4efbda807e6008850f5825c88b19c076a812b55337792a6e778a"
      },
      "downloads": -1,
      "filename": "djangocodemirror-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "90e1b2119289ee788bc4a554bb419703",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 710626,
      "upload_time": "2016-10-08T23:02:37",
      "upload_time_iso_8601": "2016-10-08T23:02:37.858525Z",
      "url": "https://files.pythonhosted.org/packages/dd/11/ae362675ac06176cccf709c7b5549ce4984c27b76f8ca8e62ab0b33ef466/djangocodemirror-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}