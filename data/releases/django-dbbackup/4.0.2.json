{
  "info": {
    "author": "Archmonger",
    "author_email": "archiethemonger@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database",
      "Topic :: System :: Archiving",
      "Topic :: System :: Archiving :: Backup",
      "Topic :: System :: Archiving :: Compression"
    ],
    "description": "Django Database Backup\n======================\n\n.. image:: https://github.com/jazzband/django-dbbackup/actions/workflows/build.yml/badge.svg\n        :target: https://github.com/jazzband/django-dbbackup/actions\n\n.. image:: https://readthedocs.org/projects/django-dbbackup/badge/?version=stable\n        :target: https://django-dbbackup.readthedocs.io/\n        :alt: Documentation Status\n\n.. image:: https://codecov.io/gh/jazzband/django-dbbackup/branch/master/graph/badge.svg?token=zaYmStcsuX\n        :target: https://codecov.io/gh/jazzband/django-dbbackup\n\n.. image:: https://jazzband.co/static/img/badge.svg\n        :target: https://jazzband.co/\n        :alt: Jazzband\n\nThis Django application provides management commands to help backup and\nrestore your project database and media files with various storages such as\nAmazon S3, Dropbox, local file storage or any Django storage.\n\nIt is made to:\n\n- Allow you to secure your backup with GPG signature and encryption\n- Archive with compression\n- Deal easily with remote archiving\n- Keep your development database up to date\n- Use Crontab or Celery to setup automated backups\n\nDocs\n====\n\nSee our official documentation at `Read The Docs`_.\n\nWhy use DBBackup\n================\n\nThis software doesn't reinvent the wheel, in a few words it is a pipe between\nyour Django project and your backup storage. It tries to use the traditional dump &\nrestore mechanisms, apply compression and/or encryption and use the storage system you desire.\n\nIt gives a simple interface to backup and restore your database or media\nfiles.\n\nManagement Commands\n===================\n\ndbbackup\n--------\n\nBackup your database to the specified storage. By default this will backup all\ndatabases specified in your settings.py file and will not delete any old\nbackups. You can optionally specify a server name to be included in the backup\nfilename.\n\n::\n\n  Usage: ./manage.py dbbackup [options]\n  \n  Options:\n    --noinput             Tells Django to NOT prompt the user for input of any\n                          kind.\n    -q, --quiet           Tells Django to NOT output other text than errors.\n    -c, --clean           Clean up old backup files\n    -d DATABASE, --database=DATABASE\n                          Database to backup (default: everything)\n    -s SERVERNAME, --servername=SERVERNAME\n                          Specify server name to include in backup filename\n    -z, --compress        Compress the backup files\n    -e, --encrypt         Encrypt the backup files\n    -o OUTPUT_FILENAME, --output-filename=OUTPUT_FILENAME\n                          Specify filename on storage\n    -O OUTPUT_PATH, --output-path=OUTPUT_PATH\n                          Specify where to store on local filesystem\n    -x EXCLUDE_TABLES, --exclude-tables=EXCLUDE_TABLES\n                          Exclude tables data from backup (-x 'public.table1, public.table2')\n\ndbrestore\n---------\n\nRestore your database from the specified storage. By default this will lookup\nthe latest backup and restore from that. You may optionally specify a\nservername if you you want to backup a database image that was created from a\ndifferent server. You may also specify an explicit local file to backup from.\n\n::\n\n  Usage: ./manage.py dbrestore [options]\n  \n  Options:\n    --noinput             Tells Django to NOT prompt the user for input of any\n                          kind.\n    -d DATABASE, --database=DATABASE\n                          Database to restore\n    -i INPUT_FILENAME, --input-filename=INPUT_FILENAME\n                          Specify filename to backup from\n    -I INPUT_PATH, --input-path=INPUT_PATH\n                          Specify path on local filesystem to backup from\n    -s SERVERNAME, --servername=SERVERNAME\n                          Use a different servername backup\n    -c, --decrypt         Decrypt data before restoring\n    -p PASSPHRASE, --passphrase=PASSPHRASE\n                          Passphrase for decrypt file\n    -z, --uncompress      Uncompress gzip data before restoring\n\n\nmediabackup\n-----------\n\nBackup media files by get them one by one, include in a TAR file. ::\n\n  Usage: ./manage.py mediabackup [options]\n  \n  Options:\n    --noinput             Tells Django to NOT prompt the user for input of any\n                          kind.\n    -q, --quiet           Tells Django to NOT output other text than errors.\n    -c, --clean           Clean up old backup files\n    -s SERVERNAME, --servername=SERVERNAME\n                          Specify server name to include in backup filename\n    -z, --compress        Compress the archive\n    -e, --encrypt         Encrypt the backup files\n    -o OUTPUT_FILENAME, --output-filename=OUTPUT_FILENAME\n                          Specify filename on storage\n    -O OUTPUT_PATH, --output-path=OUTPUT_PATH\n                          Specify where to store on local filesystem\n\nmediarestore\n------------\n\nRestore media files from storage backup to your media storage. ::\n\n  Usage: ./manage.py mediarestore [options]\n  \n  Options:\n    --noinput             Tells Django to NOT prompt the user for input of any\n                          kind.\n    -q, --quiet           Tells Django to NOT output other text than errors.\n    -i INPUT_FILENAME, --input-filename=INPUT_FILENAME\n                          Specify filename to backup from\n    -I INPUT_PATH, --input-path=INPUT_PATH\n                          Specify path on local filesystem to backup from\n    -e, --decrypt         Decrypt data before restoring\n    -p PASSPHRASE, --passphrase=PASSPHRASE\n                          Passphrase for decrypt file\n    -z, --uncompress      Uncompress gzip data before restoring\n    -r, --replace         Replace existing files\n\nTests\n=====\n\nTests are stored in `dbbackup.tests` and to run them you must launch:\n\n::\n\n    python runtests.py\n\nIn fact, ``runtests.py`` acts as a ``manage.py`` file and all Django commands\nare available. So you could launch:\n\n::\n\n    python runtests.py shell\n\nto get a Python shell configured with the test project. Also all test\ncommand options are available and usable to run only a selection of tests.\nSee `Django test command documentation`_ for more information about it.\n\n.. _`Django test command documentation`: https://docs.djangoproject.com/en/stable/topics/testing/overview/#running-tests\n\nThere are even functional tests: ::\n\n    ./functional.sh\n\nSee documentation for details.\n\nTo run the tests across all supported versions of Django and Python, you\ncan use Tox. Firstly install Tox:\n\n::\n\n    pip install tox\n\nTo run the tests just use the command ``tox`` in the command line.  If you\nwant to run the tests against just one specific test environment you can run\n``tox -e <testenv>``.  For example, to run the tests with Python3.9 and\nDjango3.2 you would run:\n\n::\n\n    tox -e py39-django32\n\nThe available test environments can be found in ``tox.ini``.\n\nContributing\n============\n\n.. image:: https://jazzband.co/static/img/jazzband.svg\n   :target: https://jazzband.co/\n   :alt: Jazzband\n\nThis is a `Jazzband <https://jazzband.co>`_ project. By contributing you agree\nto abide by the `Contributor Code of Conduct <https://jazzband.co/about/conduct>`_\nand follow the `guidelines <https://jazzband.co/about/guidelines>`_.\n\nAll contribution are very welcomed, propositions, problems, bugs and\nenhancement are tracked with `GitHub issues`_ system and patches are submitted\nvia `pull requests`_.\n\nWe use GitHub Actions as continuous integration tools.\n\n.. _`Read The Docs`: https://django-dbbackup.readthedocs.org/\n.. _`GitHub issues`: https://github.com/jazzband/django-dbbackup/issues\n.. _`pull requests`: https://github.com/jazzband/django-dbbackup/pulls\n.. _Coveralls: https://coveralls.io/github/jazzband/django-dbbackup\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jazzband/django-dbbackup",
    "keywords": "django,database,media,backup,amazon,s3,dropbox",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-dbbackup",
    "package_url": "https://pypi.org/project/django-dbbackup/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-dbbackup/",
    "project_urls": {
      "Homepage": "https://github.com/jazzband/django-dbbackup"
    },
    "release_url": "https://pypi.org/project/django-dbbackup/4.0.2/",
    "requires_dist": [
      "django (>=2.2)",
      "pytz"
    ],
    "requires_python": ">=3.6",
    "summary": "Management commands to help backup and restore a project database and media.",
    "version": "4.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15234864,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd241d635364f42dad1d5213a97ada58eccbff8c0a1da906111aca90c0e0c370",
        "md5": "a2260b49649e810cb80088b4c35e18a1",
        "sha256": "3ccde831f1a8268fb031b37a8e7e2de3abb556623023af1e859cd7104c09ea2a"
      },
      "downloads": -1,
      "filename": "django_dbbackup-4.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a2260b49649e810cb80088b4c35e18a1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 56166,
      "upload_time": "2022-09-27T23:29:22",
      "upload_time_iso_8601": "2022-09-27T23:29:22.357997Z",
      "url": "https://files.pythonhosted.org/packages/fd/24/1d635364f42dad1d5213a97ada58eccbff8c0a1da906111aca90c0e0c370/django_dbbackup-4.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ce2bee243c077ad2e5f8c83b0fcdd3eff729cf337d90315040ade69d457e17f",
        "md5": "9082f713c10413c930ea3c9a6c5f25c7",
        "sha256": "1874d684abc22260972a67668a6db3331b24d7e1e8af89eaffdcd61eb27dbc2a"
      },
      "downloads": -1,
      "filename": "django-dbbackup-4.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9082f713c10413c930ea3c9a6c5f25c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 42220,
      "upload_time": "2022-09-27T23:29:24",
      "upload_time_iso_8601": "2022-09-27T23:29:24.722454Z",
      "url": "https://files.pythonhosted.org/packages/7c/e2/bee243c077ad2e5f8c83b0fcdd3eff729cf337d90315040ade69d457e17f/django-dbbackup-4.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}