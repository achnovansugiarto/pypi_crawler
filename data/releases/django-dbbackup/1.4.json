{
  "info": {
    "author": "Michael Shepanski",
    "author_email": "mjs7231@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=======================\n Django Database Backup\n=======================\n\nThis Django application provides management commands to help backup and\nrestore your project database to AmazonS3, Dropbox or Local Disk.\n\n* Keep your important data secure and offsite.\n* Use Crontab or Celery to setup automated backups.\n* Great to keep your development database up to date.\n\nWARNING: Running 'dbrestore' will delete your current datatabase.  Do not\nattempt to run this command if you are not sure that you already have a\nvalid backup file.\n\n\nMANAGEMENT COMMANDS\n-------------------\nDBBackup  - Backup your database to the specified storage. By default this\n            will backup all databases specified in your settings.py file and\n            will not delete any old backups. You can optionally specify a\n            server name to be included in the backup filename.\n            >> dbbackup [-s <servername>] [-d <database>] [--clean]\n\nDBRestore - Restore your database from the specified storage. By default this\n            will lookup the latest backup and restore from that. You may\n            optionally specify a servername if you you want to backup a\n            database image that was created from a different server. You may\n            also specify an explicit local file to backup from.\n            >> dbrestore [-d <database>] [-s <servername>] [-f <localfile>]\n\n\n\n=======================\n DBBackup to Amazon S3\n=======================\n\nIn order to backup to Amazon S3, you'll first need to create an Amazon\nWebservices Account and setup your Amazon S3 bucket. Once that is complete,\nyou can follow the required setup below.\n\n\nSETUP YOUR DJANGO PROJECT\n-------------------------\n1. Install django-dbbackup and the required simples3 dependancy:\n   >> cd django-dbbackup\n   >> python setup.py install\n   >> pip install simples3\n\n2. Add 'dbbackup' to INSTALLED_APPS in your settings.py file.\n\n3. Include the required settings below.\n   DBBACKUP_STORAGE = 'dbbackup.storage.s3_storage'\n   DBBACKUP_S3_BUCKET = '<amazon_bucket_name>'\n   DBBACKUP_S3_ACCESS_KEY = '<amazon_access_key>'\n   DBBACKUP_S3_SECRET_KEY = '<amazon_secret_key>'\n\n4. Now you're ready to use the backup management commands.\n\n\nAVAILABLE SETTINGS\n------------------\nDBBACKUP_S3_BUCKET (required)\n    The name of the Amazon S3 bucket to store your backups. This directory\n    must exist before attempting to create your first backup.\n\nDBBACKUP_S3_ACCESS_KEY (required)\n    Your Amazon Account Access Key. This can be found on your Amazon Account\n    Security Credentials page. Note: Do not share this key with anyone you do\n    not trust with access to your Amazon files.\n\nDBBACKUP_S3_SECRET_KEY (required)\n    Your Amazon Account Secret Key. This can be found in the same location as\n    your Access Key above.\n\nDBBACKUP_S3_DIRECTORY (optional)\n    The directory in your Amazon S3 bucket you wish to save your backups. By\n    default this is set to 'django-dbbackups/'.\n\nDBBACKUP_S3_DOMAIN (optional)\n    Optionally specify the Amazon domain to use when transferring the\n    generated backup files. For example, this can be set to\n    http://s3-eu-west-1.amazonaws.com/. By default, this is\n    'https://s3.amazonaws.com/'.\n\n\n\n=====================\n DBBackup to Dropbox\n=====================\n\nIn order to backup to Dropbox, you'll first need to create a Dropbox Account\nand set it up to communicate with the Django-DBBackup application. Don't\nworry, all instructions are below.\n\n\nSETUP YOUR DROPBOX ACCOUNT\n--------------------------\n1. Login to Dropbox and navigate to Developers Â» MyApps.\n\n2. Click the button to create a new app and name it whatever you like. For\n   reference, I named mine 'Website Backups'.\n\n3. After your app is created, note the options button and more importantly\n   the 'App Key' and 'App Secret' values inside. You'll need those later.\n\n\nSETUP YOUR DJANGO PROJECT\n-------------------------\n1. Install django-dbbackup and the required Python Dropbox Client API. If\n   using Pip, you can install this package using the following command:\n   >> cd django-dbbackup\n   >> python setup.py install\n   >> pip install hg+https://bitbucket.org/dropboxapi/dropbox-client-python\n\n2. Add 'dbbackup' to INSTALLED_APPS in your settings.py file.\n\n3. Include the required settings below.\n   DBBACKUP_STORAGE = 'dbbackup.storage.dropbox_storage'\n   DBBACKUP_TOKENS_FILEPATH = '<local_tokens_filepath>'\n   DBBACKUP_DROPBOX_APP_KEY = '<dropbox_app_key>'\n   DBBACKUP_DROPBOX_APP_SECRET = '<dropbox_app_secret>'\n\n4. Now you're ready to use the backup management commands. The first time you\n   run a command you'll be prompted to visit a Dropbox URL to allow DBBackup\n   access to your Dropbox account.\n\n\nAVAILABLE SETTINGS\n------------------\nDBBACKUP_TOKENS_FILEPATH (required)\n    The local filepath to store the Dropbox oAuth request and tokens. This file\n    will be auto-created, but should be treated like any other password to\n    access your website. NOTE: Do not share these keys with anyone you do not\n    trust with access to your Dropbox files.\n\nDBBACKUP_DROPBOX_APP_KEY (required)\n    Required string containing your Dropbox App Key. NOTE: Do not share these\n    keys with anyone you do not trust with access to your Dropbox files.\n\nDBBACKUP_DROPBOX_APP_SECRET (required)\n    Required string containing your Dropbox App Secret. NOTE: Do not share these\n    keys with anyone you do not trust with access to your Dropbox files.\n\nDBBACKUP_DROPBOX_ACCESS_TYPE (optional)\n    String containing your Dropbox Access Type. This is either 'dropbox' or\n    'app_folder' depending on the access type specified when creating your\n    application on the Dropbox website. This defaults to 'dropbox', assuming\n    your application has full access to your Dropbox folder.\n\nDBBACKUP_DROPBOX_DIRECTORY (optional)\n    The directory in Dropbox you wish to save your backups. By default this is\n    set to '/django-dbbackups/'.\n\n\n========================\n DBBackup to Local Disk\n========================\n\nTo store your database backups on the local filesystem, simply setup the\nrequired settings below. Storing backups to local disk may also be useful for\nDropbox if you already have the offical Dropbox client installed on your\nsystem.\n\n\nSETUP YOUR DJANGO PROJECT\n-------------------------\n1. Install django-dbbackup application:\n   >> cd django-dbbackup\n   >> python setup.py install\n\n2. Add 'dbbackup' to INSTALLED_APPS in your settings.py file.\n\n3. Include the required settings below.\n   DBBACKUP_STORAGE = 'dbbackup.storage.filesystem'\n   DBBACKUP_FILESYSTEM_DIRECTORY = '<local_directory_path>'\n\n4. Now you're ready to use the backup management commands.\n\n\nAVAILABLE SETTINGS\n------------------\nDBBACKUP_FILESYSTEM_DIRECTORY (required)\n    The directory on your local system you wish to save your backups.\n\n\n\n===================\n DATABASE SETTINGS\n===================\n\nThe following databases are supported by this application. You can customize\nthe commands used for backup and the resulting filenames with the following\nsettings.\n\n\nMYSQL\n-----\nDBBACKUP_MYSQL_EXTENSION (optional)\n    Entension to use for a mysql backup. By default this is 'mysql'.\n\nDBBACKUP_MYSQL_BACKUP_COMMANDS (optional)\n    List of commands to use execute when creating a backup. Commands are sent\n    to popen and should be split into shlex tokens. By default, the following\n    command is run:\n    >> mysqldump -u{username} -p{password} {databasename} >\n\nDBBACKUP_MYSQL_RESTORE_COMMANDS (optional)\n    List of commands to use execute when creating a backup. Commands are sent\n    to popen and should be split into shlex tokens. By default, the following\n    command is run:\n    >> mysql -u{username} -p{password} {databasename} <\n\n\nPOSTGRES\n--------\nDBBACKUP_POSTGRES_EXTENSION (optional)\n    Entension to use for a postgres backup. By default this is 'psql'.\n\nDBBACKUP_POSTGRES_BACKUP_COMMANDS (optional)\n    List of commands to use execute when creating a backup. Commands are sent\n    to popen and should be split into shlex tokens. By default, the following\n    command is run:\n    >> pg_dump {databasename} >\n\nDBBACKUP_POSTGRES_RESTORE_COMMANDS (optional)\n    List of commands to use execute when restoring a backup. Commands are sent\n    to popen and should be split into shlex tokens. By default, the following\n    commands are run:\n    >> dropdb {databasename}\n    >> createdb {databasename} --owner={username}\n    >> psql -1 {databasename} <\n\n\nSQLITE\n------\nDBBACKUP_SQLITE_EXTENSION (optional)\n    Entension to use for an sqlite backup. By default this is 'sqlite'.\n\nDBBACKUP_SQLITE_BACKUP_COMMANDS (optional)\n    List of commands to use execute when creating a backup. Commands are sent to\n    popen and should be split into shlex tokens. By default, the following\n    command is run:\n    >> [READ_FILE, '{databasename}']\n\nDBBACKUP_SQLITE_RESTORE_COMMANDS (optional)\n    List of commands to use execute when restoring a backup. Commands are sent\n    to popen and should be split into shlex tokens. By default, the following\n    command is run:\n    >> [WRITE_FILE, '{databasename}']\n\n\n\n==========================\n DEFINING BACKUP COMMANDS\n==========================\n\nWhen creating backup or restore commands, there are a few template variables\nyou can use in the commands (listed below). Also note, ending a command with >\nor < will pipe the file contents from or to the command respectively.\n\n    {databasename}: Name of the database from settings.py\n    {servername}: Optional SERVER_NAME setting in settings.py\n    {datetime}: Current datetime string (see DBBACKUP_DATE_FORMAT).\n    {extension}: File extension for the current database.\n\nThere are also two special commands READ_FILE and WRITE_FILE which take the\nform of a two-item list, the second item being the file to read or write.\nPlease see the SQLite settings above for reference.\n\n\n\n=================\n GLOBAL SETTINGS\n=================\nDBBACKUP_STORAGE (required)\n    String pointing to django-dbbackup location module to use when performing a\n    backup. You can see the exact definitions to use in the required settings\n    for the backup location of your choice above.\n\nDBBACKUP_DATE_FORMAT (optional)\n    The Python datetime format to use when generating the backup filename. By\n    default this is '%Y-%m-%d-%H%M%S'.\n\nDBBACKUP_SERVER_NAME (optional)\n    An optional server name to use when generating the backup filename. This is\n    useful to help distinguish between development and production servers. By\n    default this value is not used and the servername is not included in the\n    generated filename.\n\nDBBACKUP_FILENAME_TEMPLATE (optional)\n    The template to use when generating the backup filename. By default this is\n    '{databasename}-{servername}-{datetime}.{extension}'.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/mjs7231/django-dbbackup",
    "keywords": "django,dropbox,database,backup,amazon,s3",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-dbbackup",
    "package_url": "https://pypi.org/project/django-dbbackup/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-dbbackup/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://bitbucket.org/mjs7231/django-dbbackup"
    },
    "release_url": "https://pypi.org/project/django-dbbackup/1.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Management commands to help backup and restore a project database to AmazonS3, Dropbox or local disk.",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15234864,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f27bc93251cb3c147e7082981bc7b78d2de77a0ab4b6dc7cdb87b3f3f07a9281",
        "md5": "276b54772f9dfbe0f8aae8e6f1e0e841",
        "sha256": "65bbafa54643b90250ef227b10b9f7cf66d61f9dc170cb9ed3fe5d44b33b371c"
      },
      "downloads": -1,
      "filename": "django-dbbackup-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "276b54772f9dfbe0f8aae8e6f1e0e841",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10821,
      "upload_time": "2012-03-14T04:36:06",
      "upload_time_iso_8601": "2012-03-14T04:36:06.762468Z",
      "url": "https://files.pythonhosted.org/packages/f2/7b/c93251cb3c147e7082981bc7b78d2de77a0ab4b6dc7cdb87b3f3f07a9281/django-dbbackup-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}