{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Audit Field Changes on Django Models\n\n[![tests][tests_badge]][tests_link]\n[![coverage][coverage_badge]][coverage_link]\n[![pypi package][pypi_badge]][pypi_link]\n\n[tests_badge]: https://github.com/dimagi/django-field-audit/actions/workflows/tests.yml/badge.svg\n[tests_link]: https://github.com/dimagi/django-field-audit/actions/workflows/tests.yml\n[coverage_badge]: https://github.com/dimagi/django-field-audit/raw/coverage-badge/coverage.svg\n[coverage_link]: https://github.com/dimagi/django-field-audit/actions/workflows/coverage.yml\n[pypi_badge]: https://badge.fury.io/py/django-field-audit.svg\n[pypi_link]: https://pypi.org/project/django-field-audit/\n\nA Django app for auditing field changes on database models.\n\n## Installation\n```\npip install django-field-audit\n```\n\n## Documentation\n\n<!--\nThe [django-field-audit documentation][docs] shows how to use this library to\naudit field changes on Django Models.\n\n[docs]: https://dimagi.github.io/django-field-audit/\n-->\n\n### Django Settings\n\nTo enable the app, add it to your Django `INSTALLED_APPS` configuration and run\nmigrations. Settings example:\n\n```python\nINSTALLED_APPS = [\n    # ...\n    \"field_audit\",\n]\n```\n\nThe \"auditor chain\" (see `FIELD_AUDIT_AUDITORS` in the **Custom settings** table\nbelow) is configured out of the box with the default auditors. If\n`change_context` auditing is desired for authenticated Django requests, add the\napp middleware to your Django `MIDDLEWARE` configuration. For example:\n\n```python\nMIDDLEWARE = [\n    # ...\n    \"field_audit.middleware.FieldAuditMiddleware\",\n]\n```\n\nThe audit chain can be updated to use custom auditors (subclasses of\n`field_audit.auditors.BaseAuditor`). If `change_context` auditing is not\ndesired, the audit chain can be cleared to avoid extra processing:\n\n```python\nFIELD_AUDIT_AUDITORS = []\n```\n\n#### Custom settings details\n\n| Name                              | Description                                                    | Default value when unset\n|:----------------------------------|:---------------------------------------------------------------|:------------------------\n| `FIELD_AUDIT_AUDITEVENT_MANAGER`  | A custom manager to use for the `AuditEvent` Model.            | `field_audit.models.DefaultAuditEventManager`\n| `FIELD_AUDIT_AUDITORS`            | A custom list of auditors for acquiring `change_context` info. | `[\"field_audit.auditors.RequestAuditor\", \"field_audit.auditors.SystemUserAuditor\"]`\n\n### Model Auditing\n\nTo begin auditing Django models, import the `field_audit.audit_fields` decorator\nand decorate models specifying which fields should be audited for changes.\nExample code:\n\n```python\n# flight/models.py\n\nfrom django.db import models\nfrom field_audit import audit_fields\n\n\n@audit_fields(\"tail_number\", \"make_model\", \"operated_by\")\nclass Aircraft(models.Model):\n    id = AutoField(primary_key=True)\n    tail_number = models.CharField(max_length=32, unique=True)\n    make_model = models.CharField(max_length=64)\n    operated_by = models.CharField(max_length=64)\n```\n\n#### Audited DB write operations\n\nBy default, Model and QuerySet methods are audited, with the exception of four\n\"special\" QuerySet methods:\n\n| DB Write Method               | Audited\n|:------------------------------|:-------\n| `Model.delete()`              | Yes\n| `Model.save()`                | Yes\n| `QuerySet.bulk_create()`      | No\n| `QuerySet.bulk_update()`      | No\n| `QuerySet.create()`           | Yes (via `Model.save()`)\n| `QuerySet.delete()`           | No\n| `QuerySet.get_or_create()`    | Yes (via `QuerySet.create()`)\n| `QuerySet.update()`           | No\n| `QuerySet.update_or_create()` | Yes (via `QuerySet.get_or_create()` and `Model.save()`)\n\n#### Auditing Special QuerySet Writes\n\nAuditing for the four \"special\" QuerySet methods that perform DB writes (labeled\n**No** in the table above) _can_ be enabled. This requires three extra usage\ndetails:\n\n1. Enable the feature by calling the audit decorator specifying\n   `@audit_fields(..., audit_special_queryset_writes=True)`.\n2. Configure the model class so its default manager is an instance of\n   `field_audit.models.AuditingManager`.\n3. All calls to the four \"special\" QuerySet write methods require an extra\n   `audit_action` keyword argument whose value is one of:\n   - `field_audit.models.AuditAction.AUDIT`\n   - `field_audit.models.AuditAction.IGNORE`\n\n##### Important Notes\n\n- Specifying `audit_special_queryset_writes=True` (step **1** above) without\n  setting the default manager to an instance of `AuditingManager` (step **2**\n  above) will raise an exception when the model class is evaluated.\n- At this time, only the `QuerySet.delete()` \"special\" write method can actually\n  perform change auditing when called with `audit_action=AuditAction.AUDIT`. The\n  other three methods are currently not implemented and will raise\n  `NotImplementedError` if called with that action. Implementing these remaining\n  methods remains a task for the future, see **TODO** below. All four methods do\n  support `audit_action=AuditAction.IGNORE` usage, however.\n\n#### Bootstrap events for models with existing records\n\nIn the scenario where auditing is enabled for a model with existing data, it can\nbe valuable to generate \"bootstrap\" audit events for all of the existing model\nrecords in order to ensure that there is at least one audit event record for\nevery model instance that currently exists.  There is a migration utility for\nperforming this bootstrap operation. Example code:\n\n```python\n# flight/migrations/0002_bootstrap_aircarft_auditing.py\n\nfrom django.db import migrations, models\nfrom field_audit.utils import run_bootstrap\n\nfrom flight.models import Aircraft\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('flight', '0001_initial'),\n    ]\n\n    operations = [\n        run_bootstrap(Aircraft, [\"tail_number\", \"make_model\", \"operated_by\"])\n    ]\n```\n\n##### Bootstrap events via management command\n\nIf bootstrapping is not suitable during migrations, there is a management command for\nperforming the same operation.  The management command does not accept arbitrary\nfield names for bootstrap records, and uses the fields configured by the\nexisting `audit_fields(...)` decorator on the model. Example (analogous to\nmigration action shown above):\n\n```sh\nmanage.py bootstrap_field_audit_events init Aircraft\n```\n\nAdditionally, if a post-migration bootstrap \"top up\" action is needed, the\nthe management command can also perform this action. A \"top up\" operation\ncreates bootstrap audit events for any existing model records which do not have\na \"create\" or \"bootstrap\" `AuditEvent` record. Note that the management command\nis currently the only way to \"top up\" bootstrap audit events. Example:\n\n```sh\nmanage.py bootstrap_field_audit_events top-up Aircraft\n```\n\n### Using with SQLite\n\nThis app uses Django's `JSONField` which means if you intend to use the app with\na SQLite database, the SQLite `JSON1` extension is required. If your system's\nPython `sqlite3` library doesn't ship with this extension enabled, see\n[this article](https://code.djangoproject.com/wiki/JSON1Extension) for details\non how to enable it.\n\n\n## Contributing\n\nAll feature and bug contributions are expected to be covered by tests.\n\n### Setup for developers\n\nCreate/activate a python virtualenv and install the required dependencies.\n\n```shell\ncd django-field-audit\nmkvirtualenv django-field-audit  # or however you choose to setup your environment\npip install django nose flake8 coverage\n```\n\n### Running tests\n\n**Note**: By default, local tests use an in-memory SQLite database. Ensure that\nyour local Python's `sqlite3` library ships with the `JSON1` extension enabled\n(see [Using with SQLite](#using-with-sqlite)).\n\n- Tests\n  ```shell\n  nosetests\n  ```\n\n- Style check\n  ```shell\n  flake8 --config=setup.cfg\n  ```\n\n- Coverage\n  ```shell\n  coverage run -m nose\n  coverage report -m\n  ```\n\n### Adding migrations\n\nThe example `manage.py` is available for making new migrations.\n\n```shell\npython example/manage.py makemigrations field_audit\n```\n\n### Uploading to PyPI\n\nPackage and upload the generated files.\n\n```shell\npip install -r pkg-requires.txt\n\npython setup.py sdist bdist_wheel\ntwine upload dist/*\n```\n\n## TODO\n\n- Implement auditing for the remaining \"special\" QuerySet write operations:\n  - `bulk_create()`\n  - `bulk_update()`\n  - `update()`\n- Write full library documentation using github.io.\n- Switch to `pytest` to support Python 3.10.\n\n### Backlog\n\n- Add to optimization for `instance.save(save_fields=[...])` [maybe].\n- Support adding new audit fields on the same model at different times (instead\n  of raising `AlreadyAudited`) [maybe].\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dimagi/django-field-audit",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "Joel Miller",
    "maintainer_email": "jmiller@dimagi.com",
    "name": "django-field-audit",
    "package_url": "https://pypi.org/project/django-field-audit/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-field-audit/",
    "project_urls": {
      "Homepage": "https://github.com/dimagi/django-field-audit"
    },
    "release_url": "https://pypi.org/project/django-field-audit/1.2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Audit Field Changes on Django Models",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17148414,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38426d88ab766fca6e4fd3f0e5513deede22e538155c9bbd32ad7165d443bc8b",
        "md5": "9f5b705bb1a7216cbf4c405f5a855c9e",
        "sha256": "523b05f186f0bd175085125722fdc846fe7dbf5a564dffe89ef06f6bf2c2a2c7"
      },
      "downloads": -1,
      "filename": "django_field_audit-1.2.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f5b705bb1a7216cbf4c405f5a855c9e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 21857,
      "upload_time": "2022-09-06T16:19:45",
      "upload_time_iso_8601": "2022-09-06T16:19:45.733449Z",
      "url": "https://files.pythonhosted.org/packages/38/42/6d88ab766fca6e4fd3f0e5513deede22e538155c9bbd32ad7165d443bc8b/django_field_audit-1.2.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2be8c1174a2e731f1086477ccc7c6ec39de28c6d86bfb377362f2d024191f3b8",
        "md5": "986f4993345f82de5b9213da512b8c48",
        "sha256": "e030e819affb03e4c96f75ebb787cd9ec079c61e35f5b3c27643a73b28f664bb"
      },
      "downloads": -1,
      "filename": "django-field-audit-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "986f4993345f82de5b9213da512b8c48",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18367,
      "upload_time": "2022-09-06T16:19:50",
      "upload_time_iso_8601": "2022-09-06T16:19:50.197527Z",
      "url": "https://files.pythonhosted.org/packages/2b/e8/c1174a2e731f1086477ccc7c6ec39de28c6d86bfb377362f2d024191f3b8/django-field-audit-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}