{
  "info": {
    "author": "",
    "author_email": "Tomer Sasson <tomer@thisismatter.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# matter-observability\n\n**Table of Contents**\n\n- [Installation](#installation)\n- [License](./LICENSE)\n\n## Background\n\nThe Matter observability library for Python is a powerful tool for developers looking to improve their observability in Kubernetes environments. Specifically designed to integrate with FastAPI applications, this library offers support for both endpoint and push-gateway integration with Prometheus, allowing developers to easily monitor the performance and behavior of their applications.\n\nThe library provides a range of logging and metrics functionality, giving developers granular visibility into the inner workings of their applications. With logging, developers can easily track and diagnose errors, warnings, and other issues, while metrics enable them to track performance metrics like response time, request volume, and error rates.\n\nIn addition to its powerful logging and metrics capabilities, the Python observability library is designed with scalability in mind. Its push-gateway integration allows developers to easily scale up their monitoring capabilities, while its endpoint integration offers a more lightweight option for smaller deployments.\n\nLooking towards the future, the Python observability library is committed to expanding its functionality to include tracing, giving developers even more insight into the performance and behavior of their applications. Whether you're a seasoned developer or just getting started with observability in Kubernetes, this library offers a powerful and flexible solution for monitoring and debugging your FastAPI applications.\n\n\n## Getting started\n\n### Use for setting Custom Metrics:\n\nSet a Gauge:\n```python\nfrom matter_observability.metrics import (\n    LabeledGauge,\n    GAUGE_CUSTOM,\n)\n\nlabeled_gauge = LabeledGauge(metric=GAUGE_CUSTOM, label=\"your-metric-name\")\nlabeled_gauge.set(10.0)\n```\n\nMeasure Duration:\n```python\nfrom matter_observability.metrics import (\n    LabeledGaugeDuration,\n    GAUGE_PROCESSING_TIME,\n)\n\nlabeled_gauge = LabeledGaugeDuration(metric=GAUGE_PROCESSING_TIME, label=\"test\")\nlabeled_gauge.start()\n# ... some operation\nlabeled_gauge.stop()\n```\n\nSet a Counter:\n```python\nfrom matter_observability.metrics import (\n    LabeledCounter,\n    COUNTER_CUSTOM,\n)\n\nlabeled_counter = LabeledCounter(metric=COUNTER_CUSTOM, label=\"your-metric-name\")\nlabeled_counter.inc()\n```\n\n\n### Use with Decorators:\n\nSet a Gauge - Sync:\n```python\nfrom matter_observability.metrics import (\n    gauge_value,\n)\n\n@gauge_value(label=\"your-metric-name\")\ndef my_func(gauge):\n    gauge.set(10.0)\n\nmy_func()\n```\n\nSet a Gauge - Async:\n```python\nfrom matter_observability.metrics import (\n    gauge_value,\n)\n\n@gauge_value(label=\"your-metric-name\")\nasync def my_func(gauge):\n    gauge.set(10.0)\n\nawait my_func()\n```\n\nMeasure Duration - Sync:\n```python\nfrom matter_observability.metrics import (\n    measure_processing_time,\n)\n\n@measure_processing_time(label=\"your-metric-name\")\ndef my_func():\n    time.sleep(1)\n\nmy_func()\n```\n\nMeasure Duration - Async:\n```python\nfrom matter_observability.metrics import (\n    measure_processing_time,\n)\n@measure_processing_time(label=\"test\")\nasync def my_func():\n    time.sleep(1)\n\nawait my_func()\n```\n\nSet a Counter - Sync:\n```python\nfrom matter_observability.metrics import (\n    count_occurrence,\n)\n\n@count_occurrence(label=\"your-metric-name\")\ndef my_func():\n    pass\n\nmy_func()\n```\n\nSet a Counter - Async:\n```python\nfrom matter_observability.metrics import (\n    count_occurrence,\n)\n\n@count_occurrence(label=\"your-metric-name\")\nasync def my_func():\n    pass\n\nawait my_func()\n```\n\n\n## Installation\n\n```console\npip install matter-observability\n```\n\n## Contributing\n\nMake sure you have all supported python versions installed in your machine:\n\n* 3.10\n* 3.11\n\n### Install hatch in your system\n\n```https://hatch.pypa.io/latest/install/```\n\n### Create the environment\n\n```console\nhatch env create\n```\n\n### Locate the new environment\n\n```console\nhatch env find default\n```\n\nDo your changes...\n\n### Run the tests\n\n```console\nhatch run test\n```\n\nThe command above will run the tests against all supported python versions\ninstalled in your machine. For testing in other operating system you may use the\nconfigured CI in github. \n\n### Bump a new version\n\nIn general, you just need to execute:\n\n```console\nhatch version\n```\n\nThis command will update the minor version. i.e.:\nNo breaking changes and new feature has been added\n\nWe are using [semantic version](https://semver.org/), if you are doing a bug fix:\n\n```console\nhatch version fix\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matter-observability",
    "package_url": "https://pypi.org/project/matter-observability/",
    "platform": null,
    "project_url": "https://pypi.org/project/matter-observability/",
    "project_urls": {
      "Documentation": "https://github.com/Matter-Tech/matter-observability#readme",
      "Issues": "https://github.com/Matter-Tech/matter-observability/issues",
      "Source": "https://github.com/Matter-Tech/matter-observability"
    },
    "release_url": "https://pypi.org/project/matter-observability/1.0.2/",
    "requires_dist": [
      "matter-exceptions==0.1.1",
      "starlette-exporter==0.15.1"
    ],
    "requires_python": ">=3.10",
    "summary": "A template for Matter's observability library",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17335602,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea415d815047eac10c6f975e62291e3f70e57a61b7bcfcc17fe222b8f926ac67",
        "md5": "eee09bdfc7b6982d477f2e1d1dd2a6c0",
        "sha256": "7eedb721a7cefaa82dbf803aeebe995e5a1904b879f61a96ab54cd9f86404e6c"
      },
      "downloads": -1,
      "filename": "matter_observability-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eee09bdfc7b6982d477f2e1d1dd2a6c0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 10012,
      "upload_time": "2023-03-16T17:44:19",
      "upload_time_iso_8601": "2023-03-16T17:44:19.966084Z",
      "url": "https://files.pythonhosted.org/packages/ea/41/5d815047eac10c6f975e62291e3f70e57a61b7bcfcc17fe222b8f926ac67/matter_observability-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}