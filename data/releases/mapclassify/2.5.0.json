{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "# mapclassify: Classification Schemes for Choropleth Maps\n\n[![Continuous Integration](https://github.com/pysal/mapclassify/actions/workflows/testing.yml/badge.svg)](https://github.com/pysal/mapclassify/actions/workflows/testing.yml)\n[![codecov](https://codecov.io/gh/pysal/mapclassify/branch/main/graph/badge.svg)](https://codecov.io/gh/pysal/mapclassify)\n[![PyPI version](https://badge.fury.io/py/mapclassify.svg)](https://badge.fury.io/py/mapclassify)\n[![DOI](https://zenodo.org/badge/88918063.svg)](https://zenodo.org/badge/latestdoi/88918063)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/pysal/mapclassify/main)\n\n`mapclassify` implements a family of classification schemes for choropleth maps.\nIts focus is on the determination of the number of classes, and the assignment\nof observations to those classes. It is intended for use with upstream mapping\nand geovisualization packages (see\n[geopandas](https://geopandas.org/mapping.html) and\n[geoplot](https://residentmario.github.io/geoplot/user_guide/Customizing_Plots.html))\nthat handle the rendering of the maps.\n\nFor further theoretical background see [Rey, S.J., D. Arribas-Bel, and L.J. Wolf (2020) \"Geographic Data Science with PySAL and the PyData Stack”](https://geographicdata.science/book/notebooks/05_choropleth.html).\n\n## Using `mapclassify`\nLoad built-in example data reporting employment density in 58 California counties:\n\n```python\n>>> import mapclassify\n>>> y = mapclassify.load_example()\n>>> y.mean()\n125.92810344827588\n>>> y.min(), y.max()\n(0.13, 4111.4499999999998)\n\n```\n\n## Map Classifiers Supported\n\n### BoxPlot\n\n```python\n>>> mapclassify.BoxPlot(y)\nBoxPlot\n\n     Interval        Count\n--------------------------\n(   -inf,  -52.88] |     0\n( -52.88,    2.57] |    15\n(   2.57,    9.36] |    14\n(   9.36,   39.53] |    14\n(  39.53,   94.97] |     6\n(  94.97, 4111.45] |     9\n```\n\n\n\n### EqualInterval\n\n```python\n>>> mapclassify.EqualInterval(y)\nEqualInterval\n\n     Interval        Count\n--------------------------\n[   0.13,  822.39] |    57\n( 822.39, 1644.66] |     0\n(1644.66, 2466.92] |     0\n(2466.92, 3289.19] |     0\n(3289.19, 4111.45] |     1\n```\n\n### FisherJenks\n\n```python\n>>> import numpy as np\n>>> np.random.seed(123456)\n>>> mapclassify.FisherJenks(y, k=5)\nFisherJenks\n\n     Interval        Count\n--------------------------\n[   0.13,   75.29] |    49\n(  75.29,  192.05] |     3\n( 192.05,  370.50] |     4\n( 370.50,  722.85] |     1\n( 722.85, 4111.45] |     1\n```\n\n### FisherJenksSampled\n\n```python\n>>> np.random.seed(123456)\n>>> x = np.random.exponential(size=(10000,))\n>>> mapclassify.FisherJenks(x, k=5)\nFisherJenks\n\n   Interval      Count\n----------------------\n[ 0.00,  0.64] |  4694\n( 0.64,  1.45] |  2922\n( 1.45,  2.53] |  1584\n( 2.53,  4.14] |   636\n( 4.14, 10.61] |   164\n\n>>> mapclassify.FisherJenksSampled(x, k=5)\nFisherJenksSampled\n\n   Interval      Count\n----------------------\n[ 0.00,  0.70] |  5020\n( 0.70,  1.63] |  2952\n( 1.63,  2.88] |  1454\n( 2.88,  5.32] |   522\n( 5.32, 10.61] |    52\n```\n\n### HeadTailBreaks\n\n```python\n>>> mapclassify.HeadTailBreaks(y)\nHeadTailBreaks\n\n     Interval        Count\n--------------------------\n[   0.13,  125.93] |    50\n( 125.93,  811.26] |     7\n( 811.26, 4111.45] |     1\n```\n\n### JenksCaspall\n\n```python\n>>> mapclassify.JenksCaspall(y, k=5)\nJenksCaspall\n\n     Interval        Count\n--------------------------\n[   0.13,    1.81] |    14\n(   1.81,    7.60] |    13\n(   7.60,   29.82] |    14\n(  29.82,  181.27] |    10\n( 181.27, 4111.45] |     7\n```\n\n### JenksCaspallForced\n\n```python\n>>> mapclassify.JenksCaspallForced(y, k=5)\nJenksCaspallForced\n\n     Interval        Count\n--------------------------\n[   0.13,    1.34] |    12\n(   1.34,    5.90] |    12\n(   5.90,   16.70] |    13\n(  16.70,   50.65] |     9\n(  50.65, 4111.45] |    12\n```\n\n### JenksCaspallSampled\n\n```python\n>>> mapclassify.JenksCaspallSampled(y, k=5)\nJenksCaspallSampled\n\n     Interval        Count\n--------------------------\n[   0.13,   12.02] |    33\n(  12.02,   29.82] |     8\n(  29.82,   75.29] |     8\n(  75.29,  192.05] |     3\n( 192.05, 4111.45] |     6\n```\n\n### MaxP\n\n```python\n>>> mapclassify.MaxP(y)\nMaxP\n\n     Interval        Count\n--------------------------\n[   0.13,    8.70] |    29\n(   8.70,   16.70] |     8\n(  16.70,   20.47] |     1\n(  20.47,   66.26] |    10\n(  66.26, 4111.45] |    10\n```\n\n### [MaximumBreaks](notebooks/maximum_breaks.ipynb)\n\n```python\n>>> mapclassify.MaximumBreaks(y, k=5)\nMaximumBreaks\n\n     Interval        Count\n--------------------------\n[   0.13,  146.00] |    50\n( 146.00,  228.49] |     2\n( 228.49,  546.67] |     4\n( 546.67, 2417.15] |     1\n(2417.15, 4111.45] |     1\n```\n\n### NaturalBreaks\n\n```python\n>>> mapclassify.NaturalBreaks(y, k=5)\nNaturalBreaks\n\n     Interval        Count\n--------------------------\n[   0.13,   75.29] |    49\n(  75.29,  192.05] |     3\n( 192.05,  370.50] |     4\n( 370.50,  722.85] |     1\n( 722.85, 4111.45] |     1\n```\n\n### Quantiles\n\n```python\n>>> mapclassify.Quantiles(y, k=5)\nQuantiles\n\n     Interval        Count\n--------------------------\n[   0.13,    1.46] |    12\n(   1.46,    5.80] |    11\n(   5.80,   13.28] |    12\n(  13.28,   54.62] |    11\n(  54.62, 4111.45] |    12\n```\n\n### Percentiles\n\n```python\n>>> mapclassify.Percentiles(y, pct=[33, 66, 100])\nPercentiles\n\n     Interval        Count\n--------------------------\n[   0.13,    3.36] |    19\n(   3.36,   22.86] |    19\n(  22.86, 4111.45] |    20\n```\n\n### StdMean\n\n```python\n>>> mapclassify.StdMean(y)\nStdMean\n\n     Interval        Count\n--------------------------\n(   -inf, -967.36] |     0\n(-967.36, -420.72] |     0\n(-420.72,  672.57] |    56\n( 672.57, 1219.22] |     1\n(1219.22, 4111.45] |     1\n```\n### UserDefined\n\n```python\n>>> mapclassify.UserDefined(y, bins=[22, 674, 4112])\nUserDefined\n\n     Interval        Count\n--------------------------\n[   0.13,   22.00] |    38\n(  22.00,  674.00] |    18\n( 674.00, 4112.00] |     2\n```\n\n## Alternative API \n\nAs of version 2.4.0 the API has been extended. A `classify` function is now\navailable for a streamlined interface:\n\n```python\n>>> classify(y, 'boxplot')                                  \nBoxPlot                   \n\n     Interval        Count\n--------------------------\n(   -inf,  -52.88] |     0\n( -52.88,    2.57] |    15\n(   2.57,    9.36] |    14\n(   9.36,   39.53] |    14\n(  39.53,   94.97] |     6\n(  94.97, 4111.45] |     9\n\n```\n\n\n\n\n## Use Cases\n\n### Creating and using a classification instance\n\n```python\n>>> bp = mapclassify.BoxPlot(y)\n>>> bp\nBoxPlot\n\n     Interval        Count\n--------------------------\n(   -inf,  -52.88] |     0\n( -52.88,    2.57] |    15\n(   2.57,    9.36] |    14\n(   9.36,   39.53] |    14\n(  39.53,   94.97] |     6\n(  94.97, 4111.45] |     9\n\n>>> bp.bins\narray([ -5.28762500e+01,   2.56750000e+00,   9.36500000e+00,\n         3.95300000e+01,   9.49737500e+01,   4.11145000e+03])\n>>> bp.counts\narray([ 0, 15, 14, 14,  6,  9])\n>>> bp.yb\narray([5, 1, 2, 3, 2, 1, 5, 1, 3, 3, 1, 2, 2, 1, 2, 2, 2, 1, 5, 2, 4, 1, 2,\n       2, 1, 1, 3, 3, 3, 5, 3, 1, 3, 5, 2, 3, 5, 5, 4, 3, 5, 3, 5, 4, 2, 1,\n       1, 4, 4, 3, 3, 1, 1, 2, 1, 4, 3, 2])\n\n```\n\n### Apply\n\n```python\n>>> import mapclassify \n>>> import pandas\n>>> from numpy import linspace as lsp\n>>> data = [lsp(3,8,num=10), lsp(10, 0, num=10), lsp(-5, 15, num=10)]\n>>> data = pandas.DataFrame(data).T\n>>> data\n          0          1          2\n0  3.000000  10.000000  -5.000000\n1  3.555556   8.888889  -2.777778\n2  4.111111   7.777778  -0.555556\n3  4.666667   6.666667   1.666667\n4  5.222222   5.555556   3.888889\n5  5.777778   4.444444   6.111111\n6  6.333333   3.333333   8.333333\n7  6.888889   2.222222  10.555556\n8  7.444444   1.111111  12.777778\n9  8.000000   0.000000  15.000000\n>>> data.apply(mapclassify.Quantiles.make(rolling=True))\n   0  1  2\n0  0  4  0\n1  0  4  0\n2  1  4  0\n3  1  3  0\n4  2  2  1\n5  2  1  2\n6  3  0  4\n7  3  0  4\n8  4  0  4\n9  4  0  4\n\n```\n\n\n## Development Notes\n\nBecause we use `geopandas` in development, and geopandas has stable `mapclassify` as a dependency, setting up a local development installation involves creating a conda environment, then replacing the stable `mapclassify` with the development version of `mapclassify` in the development environment. This can be accomplished with the following steps:\n\n\n```\nconda-env create -f environment.yml\nconda activate mapclassify\nconda remove -n mapclassify mapclassify\npip install -e .\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pysal/mapclassify",
    "keywords": "spatial statistics,geovisualizaiton",
    "license": "3-Clause BSD",
    "maintainer": "Serge Rey, Wei Kang",
    "maintainer_email": "sjsrey@gmail.com, weikang9009@gmail.com",
    "name": "mapclassify",
    "package_url": "https://pypi.org/project/mapclassify/",
    "platform": null,
    "project_url": "https://pypi.org/project/mapclassify/",
    "project_urls": {
      "Homepage": "https://github.com/pysal/mapclassify"
    },
    "release_url": "https://pypi.org/project/mapclassify/2.5.0/",
    "requires_dist": [
      "scipy (>=1.0)",
      "numpy (>=1.3)",
      "scikit-learn",
      "pandas (>=1.0)",
      "networkx",
      "nbshpinx ; extra == 'docs'",
      "numpydoc ; extra == 'docs'",
      "sphinx (>=1.4.3) ; extra == 'docs'",
      "sphinx-gallery ; extra == 'docs'",
      "sphinxcontrib-bibtex ; extra == 'docs'",
      "sphinx-bootstrap-theme ; extra == 'docs'",
      "numba ; extra == 'speedups'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "pytest-xdist ; extra == 'tests'",
      "codecov ; extra == 'tests'",
      "geopandas ; extra == 'tests'",
      "libpysal ; extra == 'tests'",
      "networkx ; extra == 'tests'",
      "palettable ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Classification Schemes for Choropleth Maps.",
    "version": "2.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16637447,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0e366416c37afce85fee750de8641314dda2a5af9457c8802ca4b173874f4e5",
        "md5": "7da11a9017c71a117043de7f26359e1e",
        "sha256": "90299a8ae3a06cdb531f02ab8160a3693ff4bc710ba52c05bec0d0a192b3d608"
      },
      "downloads": -1,
      "filename": "mapclassify-2.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7da11a9017c71a117043de7f26359e1e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 39466,
      "upload_time": "2023-01-14T15:50:49",
      "upload_time_iso_8601": "2023-01-14T15:50:49.985459Z",
      "url": "https://files.pythonhosted.org/packages/c0/e3/66416c37afce85fee750de8641314dda2a5af9457c8802ca4b173874f4e5/mapclassify-2.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a163d5cce1d7deee87721f98c5a72a563d5f5d6e616eaff647b247cdd6538062",
        "md5": "2840c54e78749647b8c2368765145a2f",
        "sha256": "5eb1f782155b5a90ec93c1dc52b300a2fad33117dcf08b7c858ed96da2a7baa0"
      },
      "downloads": -1,
      "filename": "mapclassify-2.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2840c54e78749647b8c2368765145a2f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 61906,
      "upload_time": "2023-01-14T15:50:51",
      "upload_time_iso_8601": "2023-01-14T15:50:51.764180Z",
      "url": "https://files.pythonhosted.org/packages/a1/63/d5cce1d7deee87721f98c5a72a563d5f5d6e616eaff647b247cdd6538062/mapclassify-2.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}