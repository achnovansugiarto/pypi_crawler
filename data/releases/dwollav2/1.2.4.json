{
  "info": {
    "author": "Stephen Ausman",
    "author_email": "stephen@dwolla.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# DwollaV2\n\n![Build Status](https://travis-ci.org/Dwolla/dwolla-v2-python.svg)\n\nDwolla V2 Python client. For the V1 Python client see [Dwolla/dwolla-python](https://github.com/Dwolla/dwolla-python).\n\n[API Documentation](https://docsv2.dwolla.com)\n\n## Installation\n\n```\npip install dwollav2\n```\n\n## `dwollav2.Client`\n\n### Basic usage\n\nCreate a client using your application's consumer key and secret found on the applications page\n([Sandbox][apsandbox], [Production][approd]).\n\n[apsandbox]: https://sandbox.dwolla.com/applications\n[approd]: https://www.dwolla.com/applications\n\n```python\nclient = dwollav2.Client(id = os.environ['DWOLLA_APP_KEY'], secret = os.environ['DWOLLA_APP_SECRET'])\n```\n\n### Using the sandbox environment (optional)\n\n```python\nclient = dwollav2.Client(\n  key = os.environ['DWOLLA_APP_KEY'],\n  secret = os.environ['DWOLLA_APP_SECRET'],\n  environment = 'sandbox'\n)\n```\n\n`environment` defaults to `'production'`.\n\n### Configure an `on_grant` callback (optional)\n\nAn `on_grant` callback is useful for storing new tokens when they are granted. The `on_grant`\ncallback is called with the `Token` that was just granted by the server.\n\n```python\nclient = dwollav2.Client(\n  key = os.environ['DWOLLA_APP_KEY'],\n  secret = os.environ['DWOLLA_APP_SECRET'],\n  on_grant = lambda t: save(t)\n)\n```\n\nIt is highly recommended that you encrypt any token data you store.\n\n## `Token`\n\nTokens can be used to make requests to the Dwolla V2 API. There are two types of tokens:\n\n### Application tokens\n\nApplication tokens are used to access the API on behalf of a consumer application. API resources that\nbelong to an application include: `webhook-subscriptions`, `events`, and `webhooks`. Application\ntokens can be created using the [`client_credentials`][client_credentials] OAuth grant type:\n\n[client_credentials]: https://tools.ietf.org/html/rfc6749#section-4.4\n\n**Note:** If an application has the `ManageCustomers` scope enabled, it can also be used to access\nthe API for White Label Customer related endpoints. Keep in mind, the application must belong to\nsame Dwolla account that will be used when creating and managing White Label Customers in the API.\n\n```python\napplication_token = client.Auth.client()\n```\n\n*Application tokens do not include a `refresh_token`. When an application token expires, generate\na new one using `client.Auth.client()`.*\n\n### Account tokens\n\nAccount tokens are used to access the API on behalf of a Dwolla account. API resources that belong\nto an account include `customers`, `funding-sources`, `documents`, `mass-payments`, `mass-payment-items`,\n`transfers`, and `on-demand-authorizations`.\n\nThere are two ways to get an account token. One is by generating a token at\nhttps://sandbox.dwolla.com/applications (sandbox) or https://www.dwolla.com/applications (production).\n\nYou can instantiate a generated token by doing the following:\n\n```python\naccount_token = client.Token(access_token = '...', refresh_token = '...')\n```\n\nThe other way to get an account token is using the [`authorization_code`][authorization_code]\nOAuth grant type. This flow works by redirecting a user to dwolla.com in order to get authorization\nand sending them back to your website with an authorization code which can be exchanged for a token.\nFor example:\n\n[authorization_code]: https://tools.ietf.org/html/rfc6749#section-4.1\n\nFor more information see the [Request User Authorization][rua] section of the Dwolla V2 docs.\n\n[rua]: https://docsv2.dwolla.com/#request-user-authorization\n\n```python\n# http://www.twobotechnologies.com/blog/2014/02/importance-of-state-in-oauth2.html\nstate = binascii.b2a_hex(os.urandom(15))\nauth = client.Auth(redirect_uri = 'https://yoursite.com/callback',\n                   scope = 'ManageCustomers|Funding',\n                   state = state, # optional\n                   verified_account = True, # optional\n                   dwolla_landing = 'register') # optional\n\n# redirect the user to dwolla.com for authorization\nredirect_to(auth.url)\n\n# exchange the code for a token using the variables provided to the redirect_uri in the query string\ntoken = auth.callback(req.GET)\n```\n\n### Refreshing tokens\n\nTokens with a `refresh_token` can be refreshed using `client.Auth.refresh`, which takes a\n`Token` as its first argument and returns a new token.\n\n```python\nnew_token = client.Auth.refresh(expired_token)\n```\n\n### Initializing pre-existing tokens:\n\n`Token`s can be initialized with the following attributes:\n\n```python\nclient.Token(access_token = '...',\n             refresh_token = '...',\n             expires_in = 123,\n             scope = '...',\n             account_id = '...')\n```\n\n## Requests\n\n`Token`s can make requests using the `#get`, `#post`, and `#delete` methods.\n\n```python\n# GET api.dwolla.com/resource?foo=bar\ntoken.get('resource', foo = 'bar')\n\n# POST api.dwolla.com/resource {\"foo\":\"bar\"}\ntoken.post('resource', foo = 'bar')\n\n# POST api.dwolla.com/resource multipart/form-data foo=...\ntoken.post('resource', foo = ('mclovin.jpg', open('mclovin.jpg', 'rb'), 'image/jpeg'))\n\n# PUT api.dwolla.com/resource {\"foo\":\"bar\"}\ntoken.put('resource', foo = 'bar')\n\n# DELETE api.dwolla.com/resource\ntoken.delete('resource')\n```\n\n#### Setting headers\n\nTo set additional headers on a request you can pass a `dict` of headers as the 3rd argument.\n\nFor example:\n\n```python\ntoken.post('customers', { 'firstName': 'John', 'lastName': 'Doe', 'email': 'jd@doe.com' },\n                        { 'Idempotency-Key': 'a52fcf63-0730-41c3-96e8-7147b5d1fb01' })\n```\n\n## Responses\n\nRequests return a `Response`.\n\n```python\nres = token.get('/')\n\nres.status\n# => 200\n\nres.headers\n# => {'server'=>'cloudflare-nginx', 'date'=>'Mon, 28 Mar 2016 15:30:23 GMT', 'content-type'=>'application/vnd.dwolla.v1.hal+json; charset=UTF-8', 'content-length'=>'150', 'connection'=>'close', 'set-cookie'=>'__cfduid=d9dcd0f586c166d36cbd45b992bdaa11b1459179023; expires=Tue, 28-Mar-17 15:30:23 GMT; path=/; domain=.dwolla.com; HttpOnly', 'x-request-id'=>'69a4e612-5dae-4c52-a6a0-2f921e34a88a', 'cf-ray'=>'28ac1f81875941e3-MSP'}\n\nres.body['_links']['events']['href']\n# => 'https://api-sandbox.dwolla.com/events'\n```\n\n## Errors\n\nIf the server returns an error, a `dwollav2.Error` (or one of its subclasses) will be raised.\n`dwollav2.Error`s are similar to `Response`s.\n\n```python\ntry:\n  token.get('/not-found')\nexcept dwollav2.NotFoundError:\n  e.status\n  # => 404\n\n  e.headers\n  # => {\"server\"=>\"cloudflare-nginx\", \"date\"=>\"Mon, 28 Mar 2016 15:35:32 GMT\", \"content-type\"=>\"application/vnd.dwolla.v1.hal+json; profile=\\\"http://nocarrier.co.uk/profiles/vnd.error/\\\"; charset=UTF-8\", \"content-length\"=>\"69\", \"connection\"=>\"close\", \"set-cookie\"=>\"__cfduid=da1478bfdf3e56275cd8a6a741866ccce1459179332; expires=Tue, 28-Mar-17 15:35:32 GMT; path=/; domain=.dwolla.com; HttpOnly\", \"access-control-allow-origin\"=>\"*\", \"x-request-id\"=>\"667fca74-b53d-43db-bddd-50426a011881\", \"cf-ray\"=>\"28ac270abca64207-MSP\"}\n\n  e.body.code\n  # => \"NotFound\"\nexcept dwollav2.Error:\n  # ...\n```\n\n### `dwollav2.Error` subclasses:\n\n*See https://docsv2.dwolla.com/#errors for more info.*\n\n- `dwollav2.AccessDeniedError`\n- `dwollav2.InvalidCredentialsError`\n- `dwollav2.NotFoundError`\n- `dwollav2.BadRequestError`\n- `dwollav2.InvalidGrantError`\n- `dwollav2.RequestTimeoutError`\n- `dwollav2.ExpiredAccessTokenError`\n- `dwollav2.InvalidRequestError`\n- `dwollav2.ServerError`\n- `dwollav2.ForbiddenError`\n- `dwollav2.InvalidResourceStateError`\n- `dwollav2.TemporarilyUnavailableError`\n- `dwollav2.InvalidAccessTokenError`\n- `dwollav2.InvalidScopeError`\n- `dwollav2.UnauthorizedClientError`\n- `dwollav2.InvalidAccountStatusError`\n- `dwollav2.InvalidScopesError`\n- `dwollav2.UnsupportedGrantTypeError`\n- `dwollav2.InvalidApplicationStatusError`\n- `dwollav2.InvalidVersionError`\n- `dwollav2.UnsupportedResponseTypeError`\n- `dwollav2.InvalidClientError`\n- `dwollav2.MethodNotAllowedError`\n- `dwollav2.ValidationError`\n- `dwollav2.TooManyRequestsError`\n- `dwollav2.ConflictError`\n\n## Development\n\nAfter checking out the repo, run `pip install -r requirements.txt` to install dependencies.\nThen, run `python setup.py test` to run the tests.\n\nTo install this gem onto your local machine, run `pip install -e .`.\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/Dwolla/dwolla-v2-python.\n\n## License\n\nThe package is available as open source under the terms of the [MIT License](https://github.com/Dwolla/dwolla-v2-python).\n\n## Changelog\n\n- **1.2.4** Create a new session for each Token.\n- **1.2.3** Check if IOBase when checking to see if something is a file.\n- **1.2.2** Strip domain from URLs provided to token.* methods.\n- **1.2.1** Update sandbox URLs from uat => sandbox.\n- **1.2.0** Refer to Client id as key.\n- **1.1.8** Support `verified_account` and `dwolla_landing` auth flags\n- **1.1.7** Use session over connections for [performance improvement](http://docs.python-requests.org/en/master/user/advanced/#session-objects) ([#8](https://github.com/Dwolla/dwolla-v2-python/pull/8) - Thanks @bfeeser!)\n- **1.1.5** Fix file upload bug when using with Python 2 ([#6](https://github.com/Dwolla/dwolla-v2-python/issues/6))\n- **1.1.2** Add `TooManyRequestsError` and `ConflictError`\n- **1.1.1** Add MANIFEST.in\n- **1.1.0** Support per-request headers\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://docsv2.dwolla.com",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dwollav2",
    "package_url": "https://pypi.org/project/dwollav2/",
    "platform": "",
    "project_url": "https://pypi.org/project/dwollav2/",
    "project_urls": {
      "Homepage": "https://docsv2.dwolla.com"
    },
    "release_url": "https://pypi.org/project/dwollav2/1.2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Official Dwolla V2 API client",
    "version": "1.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12529877,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1724ebea8b78d67ac807a1653cf10fce3a51e30ad77ad3b0fcf91a0e976d87d8",
        "md5": "47d155820634aaf2f5efd3388a4e8203",
        "sha256": "ad7d89a05da6f9b7aeb0f36213b7bf0a58f4b9c89682d73100f658c187001608"
      },
      "downloads": -1,
      "filename": "dwollav2-1.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "47d155820634aaf2f5efd3388a4e8203",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8869,
      "upload_time": "2017-09-13T22:20:28",
      "upload_time_iso_8601": "2017-09-13T22:20:28.682129Z",
      "url": "https://files.pythonhosted.org/packages/17/24/ebea8b78d67ac807a1653cf10fce3a51e30ad77ad3b0fcf91a0e976d87d8/dwollav2-1.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}