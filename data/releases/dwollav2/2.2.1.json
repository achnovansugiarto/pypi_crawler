{
  "info": {
    "author": "Stephen Ausman",
    "author_email": "stephen@dwolla.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# DwollaV2\n\nDwolla V2 Python client.\n\n[API Documentation](https://docsv2.dwolla.com)\n\n## Installation\n\n`dwollav2` is available on [PyPi](https://pypi.python.org/pypi/dwollav2), and therefore can be installed automagically via [pip](https://pip.pypa.io/en/stable/installing/).\n\n```\npip install dwollav2\n```\n\n## `dwollav2.Client`\n\n### Basic usage\n\nCreate a client using your application's consumer key and secret found on the applications page\n([Sandbox][apsandbox], [Production][approd]).\n\n[apsandbox]: https://dashboard-sandbox.dwolla.com/applications\n[approd]: https://dashboard.dwolla.com/applications\n\n```python\nclient = dwollav2.Client(\n  key = os.environ['DWOLLA_APP_KEY'],\n  secret = os.environ['DWOLLA_APP_SECRET'],\n  environment = 'sandbox', # defaults to 'production'\n  requests = {'timeout': 0.001}\n)\n```\n\n### Configure an `on_grant` callback (optional)\n\nAn `on_grant` callback is useful for storing new tokens when they are granted. The `on_grant`\ncallback is called with the `Token` that was just granted by the server.\n\n```python\nclient = dwollav2.Client(\n  key = os.environ['DWOLLA_APP_KEY'],\n  secret = os.environ['DWOLLA_APP_SECRET'],\n  on_grant = lambda t: save(t)\n)\n```\n\nIt is highly recommended that you encrypt any token data you store.\n\n### Integrations Authorization\n\nCheck out our [Integrations Authorization Guide](https://developers.dwolla.com/integrations/authorization).\n\n## `Token`\n\nTokens can be used to make requests to the Dwolla V2 API.\n\n### Application tokens\n\nApplication access tokens are used to authenticate against the API on behalf of a consumer application. Application tokens can be used to access resources in the API that either belong to the application itself (`webhooks`, `events`, `webhook-subscriptions`) or the partner Account that owns the consumer application (`accounts`, `customers`, `funding-sources`, etc.). Application tokens are obtained by using the [`client_credentials`][client_credentials] OAuth grant type:\n\n[client_credentials]: https://tools.ietf.org/html/rfc6749#section-4.4\n\n```python\napplication_token = client.Auth.client()\n```\n\n_Application tokens do not include a `refresh_token`. When an application token expires, generate\na new one using `client.Auth.client()`._\n\n### Initializing pre-existing tokens:\n\n`Token`s can be initialized with the following attributes:\n\n```python\nclient.Token(access_token = '...',\n             expires_in = 123)\n```\n\n## Requests\n\n`Token`s can make requests using the `#get`, `#post`, and `#delete` methods.\n\n```python\n# GET api.dwolla.com/resource?foo=bar\ntoken.get('resource', foo = 'bar')\n\n# POST api.dwolla.com/resource {\"foo\":\"bar\"}\ntoken.post('resource', foo = 'bar')\n\n# POST api.dwolla.com/resource multipart/form-data foo=...\ntoken.post('resource', foo = ('mclovin.jpg', open('mclovin.jpg', 'rb'), 'image/jpeg'))\n\n# PUT api.dwolla.com/resource {\"foo\":\"bar\"}\ntoken.put('resource', foo = 'bar')\n\n# DELETE api.dwolla.com/resource\ntoken.delete('resource')\n```\n\n#### Setting headers\n\nTo set additional headers on a request you can pass a `dict` of headers as the 3rd argument.\n\nFor example:\n\n```python\ntoken.post('customers', { 'firstName': 'John', 'lastName': 'Doe', 'email': 'jd@doe.com' },\n                        { 'Idempotency-Key': 'a52fcf63-0730-41c3-96e8-7147b5d1fb01' })\n```\n\n## Responses\n\nRequests return a `Response`.\n\n```python\nres = token.get('/')\n\nres.status\n# => 200\n\nres.headers\n# => {'server'=>'cloudflare-nginx', 'date'=>'Mon, 28 Mar 2016 15:30:23 GMT', 'content-type'=>'application/vnd.dwolla.v1.hal+json; charset=UTF-8', 'content-length'=>'150', 'connection'=>'close', 'set-cookie'=>'__cfduid=d9dcd0f586c166d36cbd45b992bdaa11b1459179023; expires=Tue, 28-Mar-17 15:30:23 GMT; path=/; domain=.dwolla.com; HttpOnly', 'x-request-id'=>'69a4e612-5dae-4c52-a6a0-2f921e34a88a', 'cf-ray'=>'28ac1f81875941e3-MSP'}\n\nres.body['_links']['events']['href']\n# => 'https://api-sandbox.dwolla.com/events'\n```\n\n## Errors\n\nIf the server returns an error, a `dwollav2.Error` (or one of its subclasses) will be raised.\n`dwollav2.Error`s are similar to `Response`s.\n\n```python\ntry:\n  token.get('/not-found')\nexcept dwollav2.NotFoundError as e:\n  e.status\n  # => 404\n\n  e.headers\n  # => {\"server\"=>\"cloudflare-nginx\", \"date\"=>\"Mon, 28 Mar 2016 15:35:32 GMT\", \"content-type\"=>\"application/vnd.dwolla.v1.hal+json; profile=\\\"http://nocarrier.co.uk/profiles/vnd.error/\\\"; charset=UTF-8\", \"content-length\"=>\"69\", \"connection\"=>\"close\", \"set-cookie\"=>\"__cfduid=da1478bfdf3e56275cd8a6a741866ccce1459179332; expires=Tue, 28-Mar-17 15:35:32 GMT; path=/; domain=.dwolla.com; HttpOnly\", \"access-control-allow-origin\"=>\"*\", \"x-request-id\"=>\"667fca74-b53d-43db-bddd-50426a011881\", \"cf-ray\"=>\"28ac270abca64207-MSP\"}\n\n  e.body.code\n  # => \"NotFound\"\nexcept dwollav2.Error:\n  # ...\n```\n\n### `dwollav2.Error` subclasses:\n\n_See https://docsv2.dwolla.com/#errors for more info._\n\n- `dwollav2.AccessDeniedError`\n- `dwollav2.InvalidCredentialsError`\n- `dwollav2.NotFoundError`\n- `dwollav2.BadRequestError`\n- `dwollav2.InvalidGrantError`\n- `dwollav2.RequestTimeoutError`\n- `dwollav2.ExpiredAccessTokenError`\n- `dwollav2.InvalidRequestError`\n- `dwollav2.ServerError`\n- `dwollav2.ForbiddenError`\n- `dwollav2.InvalidResourceStateError`\n- `dwollav2.TemporarilyUnavailableError`\n- `dwollav2.InvalidAccessTokenError`\n- `dwollav2.InvalidScopeError`\n- `dwollav2.UnauthorizedClientError`\n- `dwollav2.InvalidAccountStatusError`\n- `dwollav2.InvalidScopesError`\n- `dwollav2.UnsupportedGrantTypeError`\n- `dwollav2.InvalidApplicationStatusError`\n- `dwollav2.InvalidVersionError`\n- `dwollav2.UnsupportedResponseTypeError`\n- `dwollav2.InvalidClientError`\n- `dwollav2.MethodNotAllowedError`\n- `dwollav2.ValidationError`\n- `dwollav2.TooManyRequestsError`\n- `dwollav2.ConflictError`\n\n## Development\n\nAfter checking out the repo, run `pip install -r requirements.txt` to install dependencies.\nThen, run `python setup.py test` to run the tests.\n\nTo install this gem onto your local machine, run `pip install -e .`.\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/Dwolla/dwolla-v2-python.\n\n## License\n\nThe package is available as open source under the terms of the [MIT License](https://github.com/Dwolla/dwolla-v2-python).\n\n## Changelog\n\n- **2.2.1**\n  - Add extra check in URL's to ensure they are clean. [#36](https://github.com/Dwolla/dwolla-v2-python/pull/36).\n- **2.2.0**\n  - Update JSON request bodies to serialize via `simplejson` so datatypes like `Decimal` still\n    serialize like they did pre `2.0.0`\n- **2.1.0**\n  - Do not share `requests.session()` across instances of `dwollav2.Client`\n- **2.0.0**\n  - JSON request bodies now contain sorted keys to ensure the same request body for a given set of\n    arguments, no matter the order they are passed to `dwolla.post`. This ensures the\n    [`Idempotency-Key`][] header will work as intended without additional effort by developers.\n  - **NOTE**: Because this change alters the formatting of JSON request bodies, we are releasing it\n    as a major new version. The request body of a request made with `1.6.0` will not match the\n    request body of the same request made in `2.0.0`. This will nullify the effect of the\n    [`Idempotency-Key`][] header when upgrading, so please take this into account.\n    If you have any questions please [reach out to us](https://discuss.dwolla.com/)!\n    There are no other changes since `1.6.0`.\n- **1.6.0** Allow configuration of `requests` options on `dwollav2.Client`.\n- **1.5.0** Add integrations auth functionality\n- **1.4.0** ~~Pass kwargs from `get`, `post`, and `delete` methods to underlying requests methods.~~ (Removed in v1.6)\n- **1.3.0** Change token URLs, update dependencies.\n- **1.2.4** Create a new session for each Token.\n- **1.2.3** Check if IOBase when checking to see if something is a file.\n- **1.2.2** Strip domain from URLs provided to token.\\* methods.\n- **1.2.1** Update sandbox URLs from uat => sandbox.\n- **1.2.0** Refer to Client id as key.\n- **1.1.8** Support `verified_account` and `dwolla_landing` auth flags\n- **1.1.7** Use session over connections for [performance improvement](http://docs.python-requests.org/en/master/user/advanced/#session-objects) ([#8](https://github.com/Dwolla/dwolla-v2-python/pull/8) - Thanks @bfeeser!)\n- **1.1.5** Fix file upload bug when using with Python 2 ([#6](https://github.com/Dwolla/dwolla-v2-python/issues/6))\n- **1.1.2** Add `TooManyRequestsError` and `ConflictError`\n- **1.1.1** Add MANIFEST.in\n- **1.1.0** Support per-request headers\n\n[`idempotency-key`]: https://docs.dwolla.com/#idempotency-key\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://docsv2.dwolla.com",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dwollav2",
    "package_url": "https://pypi.org/project/dwollav2/",
    "platform": "",
    "project_url": "https://pypi.org/project/dwollav2/",
    "project_urls": {
      "Homepage": "https://docsv2.dwolla.com"
    },
    "release_url": "https://pypi.org/project/dwollav2/2.2.1/",
    "requires_dist": [
      "requests (>=2.9.1)",
      "future (>=0.15.2)"
    ],
    "requires_python": "",
    "summary": "Official Dwolla V2 API client",
    "version": "2.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12529877,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91cbd76c92cb3c0594cd7b573aa936e3c1bd2827f3119a465559b5c753f63ebb",
        "md5": "5c686b98107d90092035b2c1f83b22b7",
        "sha256": "084b83c88e5312862916f0501d45d195b20ad26bf26da706da7994c59b1dca9c"
      },
      "downloads": -1,
      "filename": "dwollav2-2.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c686b98107d90092035b2c1f83b22b7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10146,
      "upload_time": "2022-01-10T16:08:31",
      "upload_time_iso_8601": "2022-01-10T16:08:31.633982Z",
      "url": "https://files.pythonhosted.org/packages/91/cb/d76c92cb3c0594cd7b573aa936e3c1bd2827f3119a465559b5c753f63ebb/dwollav2-2.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f8685719d0a2aceaa4058b73d94c1e946440ca25d55078da958908218b0235a",
        "md5": "cb7445d0eb3f18285b25c5f55852114d",
        "sha256": "2d7a439a65d19bb27572106f53c9124ea28875eeb80e396ebe6413a942c70959"
      },
      "downloads": -1,
      "filename": "dwollav2-2.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cb7445d0eb3f18285b25c5f55852114d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12220,
      "upload_time": "2022-01-10T16:08:33",
      "upload_time_iso_8601": "2022-01-10T16:08:33.156253Z",
      "url": "https://files.pythonhosted.org/packages/8f/86/85719d0a2aceaa4058b73d94c1e946440ca25d55078da958908218b0235a/dwollav2-2.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}