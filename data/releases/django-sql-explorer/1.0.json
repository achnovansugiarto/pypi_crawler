{
  "info": {
    "author": "Chris Clark",
    "author_email": "chris@untrod.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://travis-ci.org/groveco/django-sql-explorer.png?branch=master\r\n   :target: https://travis-ci.org/groveco/django-sql-explorer\r\n\r\nDjango SQL Explorer\r\n===================\r\n\r\nSQL Explorer aims to make the flow of data between people fast, simple, and confusion-free.\r\n\r\nQuickly write and share SQL queries in a simple, usable SQL editor, preview the results in the browser, share links to download CSV files, and keep the information flowing!\r\n\r\nExplorer values simplicity, intuitive use, unobtrusiveness, stability, and the principle of least surprise.\r\n\r\nDjango SQL Explorer is inspired by any number of great query and reporting tools out there.\r\n\r\nThe original idea came from Stack Exchange's `Data Explorer <http://data.stackexchange.com/stackoverflow/queries>`_, but also owes credit to similar projects like `Redash <http://redash.io/>`_ and `Blazer <https://github.com/ankane/blazer>`_.\r\n\r\ndjango-sql-explorer is MIT licensed, and pull requests are welcome.\r\n\r\n**A view of a query**\r\n\r\n.. image:: https://s3-us-west-1.amazonaws.com/django-sql-explorer/2.png\r\n\r\n**Viewing all queries**\r\n\r\n.. image:: https://s3-us-west-1.amazonaws.com/django-sql-explorer/query-list.png\r\n\r\n**Quick access to DB schema info**\r\n\r\n.. image:: https://s3-us-west-1.amazonaws.com/django-sql-explorer/3.png\r\n\r\n**Snapshot query results to S3 & download as csv**\r\n\r\n.. image:: https://s3-us-west-1.amazonaws.com/django-sql-explorer/snapshots.png\r\n\r\n\r\nFeatures\r\n========\r\n\r\n- **Security**\r\n    - Let's not kid ourselves - this tool is all about giving people access to running SQL in production. So if that makes you nervous (and it should) - you've been warned. Explorer makes an effort to not allow terrible things to happen, but be careful! It's recommended you use the EXPLORER_CONNECTION_NAME setting to connect SQL Explorer to a read-only database role.\r\n    - Explorer supports two different permission checks for users of the tool. Users passing the EXPLORER_PERMISSION_CHANGE test can create, edit, delete, and execute queries. Users who do not pass this test but pass the EXPLORER_PERMISSION_VIEW test can only execute queries. Other users cannot access any part of Explorer. Both permission groups are set to is_staff by default and can be overridden in your settings file.\r\n    - Enforces a SQL blacklist so destructive queries don't get executed (delete, drop, alter, update etc). This is not bulletproof and it's recommended that you instead configure a read-only database role, but when not possible the blacklist provides reasonable protection.\r\n- **Easy to get started**\r\n    - Built on Django's ORM, so works with Postgresql, Mysql, and Sqlite.\r\n    - Small number of dependencies.\r\n    - Just want to get in and write some ad-hoc queries? Go nuts with the Playground area.\r\n- *new* **Snapshots**\r\n    - Tick the 'snapshot' box on a query, and Explorer will upload a .csv snapshot of the query results to S3. Configure the snapshot frequency via a celery cron task, e.g. for daily at 1am:\r\n\r\n    .. code-block:: python\r\n\r\n       'explorer.tasks.snapshot_queries': {\r\n           'task': 'explorer.tasks.snapshot_queries',\r\n           'schedule': crontab(hour=1, minute=0)\r\n       }\r\n\r\n    - Requires celery, obviously. Also uses djcelery and tinys3. All of these deps are optional and can be installed with `pip install -r optional-requirements.txt`\r\n    - The checkbox for opting a query into a snapshot is ALL THE WAY on the bottom of the query view (underneath the results table).\r\n- **Email query results**\r\n    - Click the email icon in the query listing view, enter an email address, and the query results (zipped .csv) will be sent to you asynchronously. Very handy for long-running queries.\r\n- **Parameterized Queries**\r\n    - Use $$foo$$ in your queries and Explorer will build a UI to fill out parameters. When viewing a query like 'SELECT * FROM table WHERE id=$$id$$', Explorer will generate UI for the 'id' parameter.\r\n    - Parameters are stashed in the URL, so you can share links to parameterized queries with colleagues\r\n    - Use $$paramName:defaultValue$$ to provide default values for the parameters.\r\n- **Schema Helper**\r\n    - /explorer/schema/ renders a list of your Django apps' table and column names + types that you can refer to while writing queries. Apps can be excluded from this list so users aren't bogged down with tons of irrelevant tables. See settings documentation below for details.\r\n    - This is available quickly as a sidebar helper while composing queries (see screenshot)\r\n    - Quick search for the tables/django models you are looking for. Just start typing!\r\n- **Template Columns**\r\n    - Let's say you have a query like 'select id, email from user' and you'd like to quickly drill through to the profile page for each user in the result. You can create a \"template\" column to do just that.\r\n    - Just set up a template column in your settings file:\r\n\r\n    ``EXPLORER_TRANSFORMS = [('user', '<a href=\"https://yoursite.com/profile/{0}/\">{0}</a>')]``\r\n\r\n    - And change your query to 'SELECT id AS \"user\", email FROM user'. Explorer will match the \"user\" column alias to the transform and merge each cell in that column into the template string. Cool!\r\n- **Pivot Table**\r\n    - Go to the Pivot tab on query results to use the in-browser pivot functionality (provided by Pivottable JS).\r\n    - Hit the link icon on the top right to get a URL to recreate the exact pivot setup to share with colleagues.\r\n- **Query Logs**\r\n    - Explorer will save a snapshot of every query you execute so you can recover lost ad-hoc queries, and see what you've been querying.\r\n    - This also serves as cheap-and-dirty versioning of Queries, and provides the 'run count' property and average duration in milliseconds, by aggregating the logs.\r\n    - You can also quickly share playground queries by copying the link to the playground's query log record -- look on the top right of the sql editor for the link icon.\r\n    - If Explorer gets a lot of use, the logs can get beefy. explorer.tasks contains the 'truncate_querylogs' task that will remove log entries older than <days> (30 days and older in the example below).\r\n\r\n    .. code-block:: python\r\n\r\n       'explorer.tasks.truncate_querylogs': {\r\n           'task': 'explorer.tasks.truncate_querylogs',\r\n           'schedule': crontab(hour=1, minute=0),\r\n           'kwargs': {'days': 30}\r\n       }\r\n- **Power tips**\r\n    - On the query listing page, focus gets set to a search box so you can just navigate to /explorer and start typing the name of your query to find it.\r\n    - Quick search also works after hitting \"Show Schema\" on a query view.\r\n    - Command+Enter and Ctrl+Enter will execute a query when typing in the SQL editor area.\r\n    - Hit the \"Format\" button to format and clean up your SQL (this is non-validating -- just formatting).\r\n    - Use the Query Logs feature to share one-time queries that aren't worth creating a persistent query for. Just run your SQL in the playground, then navigate to /logs and share the link (e.g. /explorer/play/?querylog_id=2428)\r\n    - Click the 'history' link towards the top-right of a saved query to filter the logs down to changes to just that query.\r\n    - If you need to download a query as something other than csv but don't want to globally change delimiters via settings.EXPLORER_CSV_DELIMETER, you can use /query/download?delim=| to get a pipe (or whatever) delimited file. For a tab-delimited file, use delim=tab. Note that the file extension will remain .csv\r\n    - If a query is taking a long time to run (perhaps timing out) and you want to get in there to optimize it, go to /query/123/?show=0. You'll see the normal query detail page, but the query won't execute.\r\n    - Set env vars for EXPLORER_TOKEN_AUTH_ENABLED=TRUE and EXPLORER_TOKEN=<SOME TOKEN> and you have an instant data API. Just:\r\n\r\n    ``curl --header \"X-API-TOKEN: <TOKEN>\" https://www.your-site.com/explorer/<QUERY_ID>/stream?format=csv``\r\n\r\nInstall\r\n=======\r\n\r\nRequires Python 2.7, 3.4, or 3.5. Requires Django 1.7.1 or higher.\r\n\r\nInstall with pip from github:\r\n\r\n``pip install django-sql-explorer``\r\n\r\nAdd to your installed_apps:\r\n\r\n``INSTALLED_APPS = (\r\n...,\r\n'explorer',\r\n...\r\n)``\r\n\r\nAdd the following to your urls.py (all Explorer URLs are restricted via the EXPLORER_PERMISSION_VIEW and EXPLORER_PERMISSION_CHANGE settings. See Settings section below for further documentation.):\r\n\r\n``url(r'^explorer/', include('explorer.urls')),``\r\n\r\nRun migrate to create the tables:\r\n\r\n``python manage.py migrate``\r\n\r\nYou can now browse to https://yoursite/explorer/ and get exploring! It is highly recommended that you also configure Explorer to use a read-only database connection via the EXPLORER_CONNECTION_NAME setting.\r\n\r\nDependencies\r\n============\r\n\r\nAn effort has been made to keep the number of dependencies to a minimum.\r\n\r\n*Python*\r\n\r\n=========================================================== ======= ================\r\nName                                                        Version License\r\n=========================================================== ======= ================\r\n`sqlparse <https://github.com/andialbrecht/sqlparse/>`_     0.1.18  BS\r\n`unicodecsv <https://github.com/jdunck/python-unicodecsv>`_ 0.14.1  BSD\r\n=========================================================== ======= ================\r\n\r\n- sqlparse is Used for SQL formatting\r\n\r\n*Python - Optional Dependencies*\r\n\r\n=========================================================== ======= ================\r\nName                                                        Version License\r\n=========================================================== ======= ================\r\n`celery <http://www.celeryproject.org/>`_                   3.1     BSD\r\n`django-celery <http://www.celeryproject.org/>`_            3.1     BSD\r\n`Factory Boy <https://github.com/rbarrois/factory_boy>`_    2.6.0   MIT\r\n`xlsxwriter <http://xlsxwriter.readthedocs.io/>`_           0.8.5   BSD\r\n`tinys3 <https://github.com/smore-inc/tinys3>`_             0.1.11  MIT\r\n=========================================================== ======= ================\r\n\r\n- Factory Boy is required for tests\r\n- celery is required for the 'email' feature, and for snapshots\r\n- tinys3 is required for snapshots\r\n- xlsxwriter is required for Excel export (csv still works fine without it)\r\n\r\n*JavaScript*\r\n\r\n============================================================ ======== ================\r\nName                                                         Version  License\r\n============================================================ ======== ================\r\n`Twitter Boostrap <http://getbootstrap.com/>`_               3.3.6    MIT\r\n`jQuery <http://jquery.com/>`_                               2.1.4    MIT\r\n`jQuery Cookie <https://github.com/carhartl/jquery-cookie>`_ 1.4.1    MIT\r\n`jQuery UI <https://jqueryui.com>`_                          1.11.4   MIT\r\n`Underscore <http://underscorejs.org/>`_                     1.7.0    MIT\r\n`Codemirror <http://codemirror.net/>`_                       5.15.2   MIT\r\n`floatThead <http://mkoryak.github.io/floatThead/>`_         1.4.0    MIT\r\n`list.js <http://listjs.com>`_                               1.2.0    MIT\r\n`pivottable.js <http://nicolas.kruchten.com/pivottable/>`_   2.0.2    MIT\r\n============================================================ ======== ================\r\n\r\n- All all served from CDNJS except for jQuery UI, which uses a custom build, served locally. pivottable.js relies on jQuery UI but for the Sortable method.\r\n\r\nTests\r\n=====\r\n\r\nFactory Boy is needed if you'd like to run the tests, which can you do easily:\r\n\r\n``python manage.py test``\r\n\r\nand with coverage:\r\n\r\n``coverage run --source='.' manage.py test``\r\n\r\nthen:\r\n\r\n``coverage report``\r\n\r\n...99%! Huzzah!\r\n\r\nThere is also a test_project that you can use to kick the tires. Just creata a new virtualenv, cd into test_project and run start.sh (or walk through the steps yourself) to get a test instance of the app up and running.\r\n\r\nSettings\r\n========\r\n\r\n============================= =============================================================================================================== ================================================================================================================================================\r\nSetting                       Description                                                                                                                                                  Default\r\n============================= =============================================================================================================== ================================================================================================================================================\r\nEXPLORER_SQL_BLACKLIST        Disallowed words in SQL queries to prevent destructive actions.                                                 ('ALTER', 'RENAME ', 'DROP', 'TRUNCATE', 'INSERT INTO', 'UPDATE', 'REPLACE', 'DELETE', 'ALTER', 'CREATE TABLE', 'SCHEMA', 'GRANT', 'OWNER TO')\r\nEXPLORER_SQL_WHITELIST        These phrases are allowed, even though part of the phrase appears in the blacklist.                             ('CREATED', 'DELETED','REGEXP_REPLACE')\r\nEXPLORER_DEFAULT_ROWS         The number of rows to show by default in the preview pane.                                                      1000\r\nEXPLORER_SCHEMA_EXCLUDE_APPS  Don't show schema for these packages in the schema helper.                                                      ('django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.admin')\r\nEXPLORER_CONNECTION_NAME      The name of the Django database connection to use. Ideally set this to a connection with read only permissions  None  # Which means use the 'default' connection\r\nEXPLORER_PERMISSION_VIEW      Callback to check if the user is allowed to view and execute stored queries                                     lambda u: u.is_staff\r\nEXPLORER_PERMISSION_CHANGE    Callback to check if the user is allowed to add/change/delete queries                                           lambda u: u.is_staff\r\nEXPLORER_TRANSFORMS           List of tuples like [('alias', 'Template for {0}')]. See features section of this doc for more info.            []\r\nEXPLORER_RECENT_QUERY_COUNT   The number of recent queries to show at the top of the query listing.                                           10\r\nEXPLORER_GET_USER_QUERY_VIEWS A dict granting view permissions on specific queries of the form {userId:[queryId, ...], ...}                   {}\r\nEXPLORER_TOKEN_AUTH_ENABLED   Bool indicating whether token-authenticated requests should be enabled. See \"Power Tips\", above.                False\r\nEXPLORER_TOKEN                Access token for query results.                                                                                 \"CHANGEME\"\r\nEXPLORER_TASKS_ENABLED        Turn on if you want to use the snapshot_queries celery task, or email report functionality in tasks.py          False\r\nEXPLORER_S3_ACCESS_KEY        S3 Access Key for snapshot upload                                                                               None\r\nEXPLORER_S3_SECRET_KEY        S3 Secret Key for snapshot upload                                                                               None\r\nEXPLORER_S3_BUCKET            S3 Bucket for snapshot upload                                                                                   None\r\nEXPLORER_FROM_EMAIL           The default 'from' address when using async report email functionality                                          \"django-sql-explorer@example.com\"\r\nEXPLORER_DATA_EXPORTERS       The export buttons to use. Default includes Excel, xlsxwriter from optional-requirements.txt is needed          { 'csv': 'explorer.exporters.CSVExporter', 'json': 'explorer.exporters.JSONExporter', 'excel': 'explorer.exporters.ExcelExporter' }\r\n============================= =============================================================================================================== ================================================================================================================================================\r\n\r\nRelease Process\r\n===============\r\n\r\nRelease process is documented `here <https://gist.github.com/chrisclark/07a6b4ef0114fdfa2ee0>`_. If there are problems with the release, please help me improve the process so it doesn't happen again!",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/epantry/django-sql-explorer",
    "keywords": "django sql explorer reports reporting csv database query",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sql-explorer",
    "package_url": "https://pypi.org/project/django-sql-explorer/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-sql-explorer/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/epantry/django-sql-explorer"
    },
    "release_url": "https://pypi.org/project/django-sql-explorer/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A pluggable app that allows users (admins) to execute SQL, view, and export the results. Inspired by Stack Exchange Data Explorer.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17069535,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a550e7b565716c721713909ef92f9118e0f180a784fbb0866376b7d2794179b",
        "md5": "867fda72c5f096fb5fcb318b37f46f33",
        "sha256": "0056814febe1ab9ae3f39a2ec1bcb14d8ed7099a153089f26026856a6b9c5f18"
      },
      "downloads": -1,
      "filename": "django-sql-explorer-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "867fda72c5f096fb5fcb318b37f46f33",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 129964,
      "upload_time": "2016-06-24T21:54:50",
      "upload_time_iso_8601": "2016-06-24T21:54:50.534899Z",
      "url": "https://files.pythonhosted.org/packages/9a/55/0e7b565716c721713909ef92f9118e0f180a784fbb0866376b7d2794179b/django-sql-explorer-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}