{
  "info": {
    "author": "Arni Inaba Kjartansson",
    "author_email": "arni@grid.is",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "log-enricher\n============\n[![CircleCI](https://circleci.com/gh/arni-inaba/log-enricher.svg?style=svg)](https://circleci.com/gh/arni-inaba/log-enricher)\n[![PyPI Downloads](https://img.shields.io/pypi/dm/log-enricher.svg)](https://pypi.org/project/log-enricher/)\n[![PyPI Version](https://img.shields.io/pypi/v/log-enricher.svg)](https://pypi.org/project/log-enricher/)\n[![License](https://img.shields.io/badge/license-mit-blue.svg)](https://pypi.org/project/log-enricher/)\n\nThis is a log enricher, useful for adding custom fields to log records.\n\nThis was developed at [GRID](https://github.com/GRID-is) for use with our\npython backend services and intended to emit structured logs.\n\ninstallation\n------------\n```\npip install log-enricher\n```\n\nconfiguration\n-------------\n\n`log-enricher.initialize_logging(...)` configures the `logging` library and takes in `enrichers`, a list of \nfunctions that return a dictionary. When a log message is sent, the enrichers are run automatically and their \noutput is added to the log message, if structured logging is enabled.\n\nFurthermore, `initialize_logging()` takes a list of `loggers` to use, a switch to control `structured_logs` \n(JSON logs, default on), and a `log_level` setting.\n\nLogs will be output in a structured JSON format by default - if `structured_logs` is `True` - \nor in a plain, console-friendly format if `structured_logs` is `False`.\n\nconfig example\n--------------\n```python\nimport os\n\nfrom log_enricher import initialize_logging, Level\nfrom log_enricher.enrichers import Enricher\n\nclass UserContextEnricher(Enricher):\n    def __call__(self) -> Dict[str, Any]:\n        user_context = get_user_context()\n        return {\"username\": user_context.get(\"username\")}\n\nextra_log_properties = {\n    \"app_version\": Config.APP_VERSION, \"release_stage\": Config.RELEASE_STAGE\n}\n\ndef main():\n    initialize_logging(\n        loggers=[\"uvicorn\", \"sqlalchemy\"],\n        structured_logs=os.environ.get(\"STRUCTURED_LOGS\", True),\n        log_level=Level.INFO,\n        enrichers=[UserContextEnricher(), lambda: extra_log_properties],\n    )\n```\n\nenrichers\n---------\nTo build a log enricher, make a subclass of Enricher, or Callable, and implement `__call__()`. Any method returning \na dict can be used to enrich log records. See [log_enricher/enrichers.py](log_enricher/enrichers.py). The key-value\npairs in the dict are added as attribute-value pairs to the log record. Of course, any method calls in the \nenrichers need to  work in any subsequent context the logging system is called.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/arni-inaba/log-enricher",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "log-enricher",
    "package_url": "https://pypi.org/project/log-enricher/",
    "platform": null,
    "project_url": "https://pypi.org/project/log-enricher/",
    "project_urls": {
      "Homepage": "https://github.com/arni-inaba/log-enricher",
      "Repository": "https://github.com/arni-inaba/log-enricher"
    },
    "release_url": "https://pypi.org/project/log-enricher/2.1.0/",
    "requires_dist": [
      "python-json-logger (>=0.1.11,<0.2.0)",
      "strenum (>=0.4.0,<0.5.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Library to enrich structured logs",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13663255,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48a46aae393a2f13342cb5b0f56d5d39786ded598be9b02cee11983923fa5f42",
        "md5": "dde6a33c008e629e0a57798a4b555157",
        "sha256": "83fb213cf35e3038478790de94cbc71bb8765093aa1658647810e6b6c3c27527"
      },
      "downloads": -1,
      "filename": "log_enricher-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dde6a33c008e629e0a57798a4b555157",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 4128,
      "upload_time": "2022-04-29T08:51:50",
      "upload_time_iso_8601": "2022-04-29T08:51:50.915611Z",
      "url": "https://files.pythonhosted.org/packages/48/a4/6aae393a2f13342cb5b0f56d5d39786ded598be9b02cee11983923fa5f42/log_enricher-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31ef7395f1f2114d0b6f13e11c21dfc13ab923b33f48268abb167920f89ce3c3",
        "md5": "8a8d11116d951189a19cb79901901dd6",
        "sha256": "8c8d5dfe98e74ceca11491e2c5256b43d0175009f5bc9ed23f0a09b3ced8a9a7"
      },
      "downloads": -1,
      "filename": "log-enricher-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8a8d11116d951189a19cb79901901dd6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 4137,
      "upload_time": "2022-04-29T08:51:49",
      "upload_time_iso_8601": "2022-04-29T08:51:49.449587Z",
      "url": "https://files.pythonhosted.org/packages/31/ef/7395f1f2114d0b6f13e11c21dfc13ab923b33f48268abb167920f89ce3c3/log-enricher-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}