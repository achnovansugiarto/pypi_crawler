{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Topic :: Scientific/Engineering",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "Python bindings for the Luminoso client API\n===========================================\n\nThis package contains Python code for interacting with a Luminoso text\nprocessing server through its REST API.\n\nIn this code, instead of having to authenticate each request separately,\nyou make a \"session\" object that keeps track of your login information,\nand call methods on it that will be properly authenticated.\n\nInstallation\n------------\nThis client API is designed to be used with Python 3.\n\nYou can download and install it using a Python package manager:\n\n    pip install luminoso-api\n\nor\n\n    easy_install luminoso-api\n\nOr you can download this repository and install it the usual way:\n\n    python setup.py install\n\nIf you are installing into the main Python environment on a Mac or Unix\nsystem, you will probably need to prefix those commands with `sudo` and\nenter your password, as in `sudo python setup.py install`.\n\nGetting started\n---------------\nYou interact with the API using a LuminosoClient object, which sends HTTP\nrequests to URLs starting with a given path, and keeps track of your\nauthentication information.\n\nBefore you can connect to an API, you will need to go to the UI on the web and\nget a long-lived API token.  (To get a token, go to the \"User settings\" option\nin the upper right dropdown menu, and click the \"API tokens\" button.)  Once you\nhave one, you can use it to connect to the API.\n\nNote that saved tokens are specific for each domain (tokens for\n`daylight.luminoso.com` will not work on an onsite installation, or vice\nversa).\n\n```python\nfrom luminoso_api import LuminosoClient\nproject = LuminosoClient.connect('/projects/my_project_id', token='my_token')\n\n# And then, for instance:\ndocs = project.get('docs', limit=10)\n```\n\nInstead of specifying the token when connecting, you can also use the\nLuminosoClient to save a token to a file, at which point you can connect\nwithout having to specify a token.  (Saving a token can also be done at the\ncommand line; see \"Using the API from the command line\" below.)\n\n```python\nfrom luminoso_api import LuminosoClient\nLuminosoClient.save_token('my_token')\nproject = LuminosoClient.connect('/projects/my_project_id')\ndocs = project.get('docs', limit=10)\n```\n\nNote that all leading and trailing slashes in paths are optional, because the\nLuminosoClient ensures that slashes are put in the right places.  For example,\nall of the following calls will go to the endpoint\n`https://daylight.luminoso.com/api/v5/projects/my_project_id/docs/`:\n\n```python\nLuminosoClient.connect('/projects/my_project_id').get('docs')\nLuminosoClient.connect('projects/my_project_id/').get('/docs')\nLuminosoClient.connect('/projects/my_project_id/').get('docs/')\nLuminosoClient.connect('projects/my_project_id').get('/docs/')\n```\n\nThe connect method also provides an optional timeout parameter. This will set\nboth the connect and read timeout used in the underlying request. If this is set\nand the connection or reading the response on the requests times out then a\nLuminosoTimeoutError exception will be raised.\n\nHTTP methods\n------------\n\nThe URLs you can communicate with are documented at https://daylight.luminoso.com/api/v5/.\nThat documentation is the authoritative source for what you can do with the\nAPI, and this Python code is just here to help you do it.\n\nA LuminosoClient object has methods such as `.get`, `.post`, and `.put`,\nwhich correspond to the corresponding HTTP methods that the API uses. For\nexample, `.get` is used for retrieving information without changing anything,\n`.post` is generally used for creating new things or taking actions, and `.put`\nis generally used for updating information.\n\nExamples\n--------\n\nMost of the time, you'll want your LuminosoClient to refer to a particular\nproject, but one case where you don't is to get a list of projects in the first\nplace:\n\n```python\nfrom luminoso_api import LuminosoClient\nclient = LuminosoClient.connect()\nproject_info_list = client.get('/projects/')\nprint(project_info_list)\n```\n\nAn example of working with a project, including the use of the convenience method `.wait_for_build`:\n\n```python\nfrom luminoso_api import LuminosoClient\nclient = LuminosoClient.connect()\n\n# Create a new project by POSTing its name and language\nproject_id = client.post('/projects/', name='testproject', language='en')['project_id']\n\n# use that project from here on\nproject = client.client_for_path('/projects/' + project_id)\n\ndocs = [{'title': 'First example', 'text': 'This is an example document.'},\n        {'title': 'Second example', 'text': 'Examples are a great source of inspiration.'},\n        {'title': 'Third example', 'text': 'Great things come in threes.'}]\nproject.post('upload', docs=docs)\nproject.post('build')\nproject.wait_for_build()\n\n# When the previous call finishes:\nresponse = project.get('concepts')\nfor concept in response['result']:\n    print('%s - %f' % (concept['texts'][0], concept['relevance']))\n```\n\nVectors\n-------\nThe semantics of terms are represented by \"vector\" objects, which this API\nwill return as inscrutable base64-encoded strings like this:\n\n    'WAB6AJG6kL_6D_6yAHE__R9kSAE8BlgKMo_80y8cCOCCSN-9oAQcABP_TMAFhAmMCUA'\n\nIf you want to look inside these vectors and compare them to each other,\ndownload our library called `pack64`, available as `pip install pack64`. It\nwill turn these into NumPy vectors, so it requires NumPy.\n\n```python\n>>> from pack64 import unpack64\n>>> unpack64('WAB6AJG6kL_6D_6y')\narray([ 0.00046539,  0.00222015, -0.08491898, -0.0014534 , -0.00127411], dtype=float32)\n```\n\nUsing the API from the command line\n-----------------------------------\n\nThis library includes experimental tools usable from the command line:\n`lumi-save-token`, `lumi-api`, `lumi-upload`, and `lumi-download`.  Running them\nwith `-h` will provide more detailed documentation on available parameters.  In\naddition, the following examples may provide some guidance on using `lumi-api`\nto access the API:\n\n```\n# save a token obtained from the UI - note that you must run this first for the following commands to work!\n# (also, this is not a real API token, but yours will look similar)\nlumi-save-token gF1XgbExN30O4DfBXse95vCjm6V069Ko\n\n# get a project list\nlumi-api -b https://daylight.luminoso.com/api/v5/ get /projects\n\n# get a project list in CSV format\nlumi-api -b https://daylight.luminoso.com/api/v5/ get /projects -c\n\n# create a project\nlumi-api -b https://daylight.luminoso.com/api/v5/ post /projects/ -p 'name=project name' -p 'language=en'\n\n# upload documents\n# my_data.json format: {\"docs\":[{\"text\": \"..\", \"title\": \"..\", \"metadata\": [..]}, {\"text\": \"..\", \"title\": \"..\", \"metadata\": [..]}]}\nlumi-api -b https://daylight.luminoso.com/api/v5/ post /projects/my_project_id/upload my_data.json\n\n# build project\n# this takes time, if you want to be notified via email when the build is done, add -j '{\"notify\": true}' parameter\nlumi-api -b https://daylight.luminoso.com/api/v5/ post /projects/my_project_id/build\n\n# get concepts from project\nlumi-api -b https://daylight.luminoso.com/api/v5/ get /projects/my_project_id/concepts\n\n# get project's match counts\nlumi-api -b https://daylight.luminoso.com/api/v5/ get /projects/my_project_id/concepts/match_counts\n\n# create a saved concept\nlumi-api -b https://daylight.luminoso.com/api/v5/ post /projects/my_project_id/concepts/saved -j '{\"concepts\": [{\"texts\": [\"My new concept text\"]}]}'\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "http://github.com/LuminosoInsight/luminoso-api-client-python/tarball/v3.1.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/LuminosoInsight/luminoso-api-client-python",
    "keywords": "",
    "license": "",
    "maintainer": "Luminoso Technologies, Inc.",
    "maintainer_email": "info@luminoso.com",
    "name": "luminoso-api",
    "package_url": "https://pypi.org/project/luminoso-api/",
    "platform": "any",
    "project_url": "https://pypi.org/project/luminoso-api/",
    "project_urls": {
      "Download": "http://github.com/LuminosoInsight/luminoso-api-client-python/tarball/v3.1.0",
      "Homepage": "http://github.com/LuminosoInsight/luminoso-api-client-python"
    },
    "release_url": "https://pypi.org/project/luminoso-api/3.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python client library for communicating with the Luminoso REST API",
    "version": "3.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10988657,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c084a96c45ff4f80b377f8f2ea09ab800cd3d63aa3b762457344f5c80c6554a",
        "md5": "5dac2239a0964c40acf750c9133239f6",
        "sha256": "e816cb15cfae844be1bf76d1029ac1259a81f72b3d262818981387a38fe95ad0"
      },
      "downloads": -1,
      "filename": "luminoso-api-3.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5dac2239a0964c40acf750c9133239f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17915,
      "upload_time": "2021-06-14T21:50:28",
      "upload_time_iso_8601": "2021-06-14T21:50:28.445766Z",
      "url": "https://files.pythonhosted.org/packages/9c/08/4a96c45ff4f80b377f8f2ea09ab800cd3d63aa3b762457344f5c80c6554a/luminoso-api-3.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}