{
  "info": {
    "author": "Mindey",
    "author_email": "mindey@qq.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. image:: https://mindey.com/docs/metaform-logo.png\n\n*One star knowing it all...*\n\n.. code:: python\n\n   # HAVING DATA:\n   DATA = {\n     'a': 1.5,\n     'b': 1458266965.250572,\n     'c': [{'x': {'y': 'LT121000011101001000'}}, {'z': 'Omega'}]}\n\n   # GETTING KNOWLEDGE:\n   SCHEMA = {\n     'a': 'price#EUR|to.decimal',\n     'b': 'timestamp#date|to.unixtime',\n     'c': [{'*': 'contributions',\n       'x': {'*': 'origins', 'y': 'account#IBAN|to.string'},\n       'z': 'company#name|to.string'}],\n   }\n\n   # NORMALIZATION\n   metaform.load(DATA).format(SCHEMA)\n\n   # OR USE '*' TO REFERENCE SCHEMA TO PACK SCHEMA WITH DATA PACKETS:\n   metaform.load(dict(DATA, **{'*': 'https://github.com/wefindx/schema/wiki/Sale#test'})).format()\n\n\nmetaform\n========\n\n.. image:: https://badge.fury.io/py/metaform.svg\n    :target: https://badge.fury.io/py/metaform\n.. image:: https://badges.gitter.im/djrobstep/csvx.svg\n   :alt: Join the chat at https://gitter.im/wefindx/metaform\n   :target: https://gitter.im/wefindx/metaform\n\nMetaform is a package for hierarchical and nested data normalization.\n\n.. image:: https://wiki.mindey.com/shared/shots/53dcf81b7efd0573f07c5f562.png\n   :target: https://wiki.mindey.com/shared/shots/56542f97f99a2b3886baa661f-what-is-metaform.mp4\n\nBasic Usage\n-----------\n\n``pip install metaform``\n\n.. code:: python\n\n   import metaform\n\nIf your data had an asterisk~!\n------------------------------\n.. code:: python\n\n   # INPUT\n   metaform.load({\n     '*': 'https://github.com/mindey/terms/wiki/person#foaf',\n     'url': 'http://dbpedia.org/resource/John_Lennon',\n     'fullname': 'John Lennon',\n     'birthdate': '1940-10-09',\n     'spouse': 'http://dbpedia.org/resource/Cynthia_Lennon'\n   }).format(refresh=True)\n   # (schemas are cached locally, pass refresh=True to redownload)\n\n   # OUTPUT\n   {\n     '*': 'GH:mindey/terms/person#foaf',\n     'jsonld:id': 'http://dbpedia.org/resource/John_Lennon',\n     'foaf:name': 'John Lennon',\n     'schema:birthDate': datetime.datetime(1940, 10, 9, 0, 0),\n     'schema:spouse': 'http://dbpedia.org/resource/Cynthia_Lennon'\n   }\n\nFor example, if you read an API data source:\n--------------------------------------------\n\n.. code:: python\n\n  data = metaform.load('https://www.metaculus.com/api2/questions/')\n  data['*'] ='https://github.com/wefindx/schema/wiki/Topic#metaculuscom-question'\n  data.format()\n  # Try it!\n\nOr, if your filenames had references to schema~\n-----------------------------------------------\n\n.. code:: python\n\n   df = metaform.read_csv(\n     'https://gist.githubusercontent.com/mindey/3f2596e108a5c151f32e1967275a7689/raw/7c4c963219255008fdb438e8b9777cd658eea02e/hello-world.csv',\n     schema={\n       0: 'Timestamp|to.unixtime',\n       1: 'KeyUpOrDown|lambda x: x==\"k↓\" and \"KeyDown\" or (x==\"k↑\" and \"KeyUp\")',\n       2: 'KeyName'},\n     header=None\n   )\n\nAlternatively, save schema to wiki like `here <https://github.com/mindey/schema/wiki/KeyEvent#mykeylogger-01>`_, and include the schema token inside filename by encoding it as sub-extension, that is, rename ``hello-world.csv`` to ``hello-world.GH~mindey+schema+KeyEvent@mykeylogger-01.csv``:\n\n.. code:: python\n\n   # To get schema token for filename (GH~mindey+schema+KeyEvent@mykeylogger-01) do:\n   metaform.metawiki.url2ext('https://github.com/mindey/schema/wiki/KeyEvent#mykeylogger-01')\n\n   # Then rename filename in the source, and just read file remotely or locally from disk:\n   df = metaform.read_csv('https://gist.githubusercontent.com/mindey/f33978b31468097b5003f032d5d85eb8/raw/9541191e4d99c052a7668223697ef0ef9ce37977/hello-world.GH~mindey+schema+KeyEvent@mykeylogger-01.csv', header=None)\n\n\nSo, what's happening here?\n--------------------------\n.. code:: python\n\n   metaform.load( DATA ).format( SCHEMA )\n\nLet’s say we have some data:\n\n.. code:: python\n\n   data = {\n       'hello': 1.0,\n       'world': 2,\n       'how': ['is', {'are': {'you': 'doing'}}]\n   }\n\nWe can get the template for defining schema, by ``metaform.template``:\n\n.. code:: python\n\n   metaform.template(data)\n\n::\n\n   {'*': '',\n    'hello': {'*': ''},\n    'how': [{'*': '', 'are': {'you': {'*': ''}}}],\n    'world': {'*': ''}}\n\nThis provides an opportunity to specify metadata for each key and the\nobject itself. For example:\n\n.. code:: python\n\n   schema = {                        # A #    schema = {\n       '*': 'greeting',              # L #        '*': 'greeting',\n       'hello': {'*': 'length'},     # T #        'hello': 'length',\n       'world': {'*': 'atoms'},      # E #        'world': 'atoms',\n       'how': [                      # R #        'how': [\n            {'*': 'method',          # N #             {'*': 'method',\n             'are': {                # A #              'are': {\n                 '*': 'yup',         # T #                  '*': 'yup',\n                 'you': {'*': 'me'}} # I #                  'you': {'*': 'me'}}\n            }                        # V #             }\n       ]}                            # E #        ]}\n\n   metaform.normalize(data, schema)\n\n::\n\n   {'atoms': 2, 'length': 1.0, 'method': ['is', {'yup': {'me': 'doing'}}]}\n\nWe recommend saving schemas you create for normalizations for data\nanalytics and `driver projects <https://github.com/drivernet>`__ in\ndot-folders ``.schema``, in a JSON or YAML files in that folder.\n\nSo, we have access to all keys, and can specify, what to do with them:\n\n.. code:: python\n\n   schema = {\n       '*': 'greeting',\n       'hello': 'length|lambda x: x+5.',\n       'world': 'atoms|lambda x: str(x)+\"ABC\"',\n       'how': [\n            {'*': 'method',\n             'are': {\n                 '*': 'yup',\n                 'you': {'*': 'me|lambda x: \"-\".join(list(x))'}}\n            }\n       ]}\n\n   metaform.normalize(data, schema)\n\n::\n\n   {'atoms': '2ABC',\n    'length': 6.0,\n    'method': ['is', {'yup': {'me': 'd-o-i-n-g'}}]}\n\nAnd suppose, we want to define a more complex function, inconvenient via\nlambdas:\n\n.. code:: python\n\n   from metaform import converters\n\n   def some_func(x):\n       a = 123\n       b = 345\n       return (b-a)*x\n\n   converters.func = some_func\n\n   schema = {\n       '*': 'greeting',\n       'hello': 'length|to.func',\n       'world': 'atoms|lambda x: str(x)+\"ABC\"',\n       'how': [\n            {'*': 'method',\n             'are': {\n                 '*': 'yup',\n                 'you': {'*': 'me|lambda x: \"-\".join(list(x))'}}\n            }\n       ]}\n\n   metaform.normalize(data, schema)\n\n::\n\n   {'atoms': '2ABC',\n    'length': 222.0,\n    'method': ['is', {'yup': {'me': 'd-o-i-n-g'}}]}\n\nWe just renamed the keys, and normalized values! What else could we\nwant?\n\nNormalizing Data\n----------------\n\nSuppose we have similar data from different sources. For example, topics\nand comments are not so different after all, because if a comment\nbecomes large enough, it can stand as a topic of its own.\n\n.. code:: python\n\n   topics = requests.get('https://api.infty.xyz/topics/?format=json').json()['results']\n   comments = requests.get('https://api.infty.xyz/comments/?format=json').json()['results']\n\nLet’s define templates for them, with the key names and types to match:\n\n.. code:: python\n\n   topics_schema = [{\n     'id': 'topic-id',\n     'type': '|lambda x: {0: \"NEED\", 1: \"GOAL\", 2: \"IDEA\", 3: \"PLAN\", 4: \"STEP\", 5: \"TASK\"}.get(x)',\n     'owner': {'id': 'user-id'},\n     'blockchain': '|lambda x: x and True or False',\n   }]\n\n   normal_topics = metaform.normalize(topics, topics_schema)\n\n   topics_df = pandas.io.json.json_normalize(normal_topics)\n   topics_df.dtypes\n\n::\n\n   blockchain             bool\n   body                 object\n   categories           object\n   categories_names     object\n   children             object\n   comment_count         int64\n   created_date         object\n   data                 object\n   declared            float64\n   editors              object\n   funds               float64\n   is_draft               bool\n   languages            object\n   matched             float64\n   owner.user-id         int64\n   owner.username       object\n   parents              object\n   title                object\n   topic-id              int64\n   type                 object\n   updated_date         object\n   url                  object\n   dtype: object\n\n.. code:: python\n\n   comments_schema = [{\n     'id': 'comment-id',\n     'topic': 'topic-url',\n     'text': 'body',\n     'owner': {'id': 'user-id'},\n     'blockchain': '|lambda x: x and True or False',\n   }]\n\n   normal_comments = metaform.normalize(comments, comments_schema)\n\n   comments_df = pandas.io.json.json_normalize(normal_comments)\n   comments_df.dtypes\n\n::\n\n   assumed_hours      object\n   blockchain           bool\n   body               object\n   claimed_hours      object\n   comment-id          int64\n   created_date       object\n   donated           float64\n   languages          object\n   matched           float64\n   owner.user-id       int64\n   owner.username     object\n   parent             object\n   remains           float64\n   topic-url          object\n   updated_date       object\n   url                object\n   dtype: object\n\n.. code:: python\n\n   df = pandas.concat([topics_df, comments_df], sort=False)\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/wefindx/metaform",
    "keywords": "",
    "license": "ASK FOR PERMISSIONS",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metaform",
    "package_url": "https://pypi.org/project/metaform/",
    "platform": "",
    "project_url": "https://pypi.org/project/metaform/",
    "project_urls": {
      "Homepage": "https://gitlab.com/wefindx/metaform"
    },
    "release_url": "https://pypi.org/project/metaform/1.0.2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A utility for defining metadata for data types and formats.",
    "version": "1.0.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7439235,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "796bf365b0fcf0c99133085b9c3b93928f78f913ebe10516b33e4ed4a1473ffd",
        "md5": "304cf17bf7a261af65304b3be5b45f85",
        "sha256": "82ad18862db4c0b5423128c8a8150d23ffdecf98ed630cd179a6e4309b24b55f"
      },
      "downloads": -1,
      "filename": "metaform-1.0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "304cf17bf7a261af65304b3be5b45f85",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18146,
      "upload_time": "2020-06-09T23:31:27",
      "upload_time_iso_8601": "2020-06-09T23:31:27.810546Z",
      "url": "https://files.pythonhosted.org/packages/79/6b/f365b0fcf0c99133085b9c3b93928f78f913ebe10516b33e4ed4a1473ffd/metaform-1.0.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}