{
  "info": {
    "author": "Mindey",
    "author_email": "mindey@qq.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "metaform\n========\n\n.. image:: https://badge.fury.io/py/metaform.svg\n    :target: https://badge.fury.io/py/metaform\n.. image:: https://badges.gitter.im/djrobstep/csvx.svg\n   :alt: Join the chat at https://gitter.im/wefindx/metaform\n   :target: https://gitter.im/wefindx/metaform\n\nMetaform is a package for hierarchical and nested data normalization.\n\n.. image:: https://wiki.mindey.com/shared/shots/53dcf81b7efd0573f07c5f562.png\n   :target: https://wiki.mindey.com/shared/shots/56542f97f99a2b3886baa661f-what-is-metaform.mp4\n\nBasic Usage\n-----------\n\n``pip install metaform``\n\n.. code:: python\n\n   import metaform\n\nLet’s say we have some data:\n\n.. code:: python\n\n   data = {\n       'hello': 1.0,\n       'world': 2,\n       'how': ['is', {'are': {'you': 'doing'}}]\n   }\n\nWe can get the template for defining schema, by ``metaform.template``:\n\n.. code:: python\n\n   metaform.template(data)\n\n::\n\n   {'*': '',\n    'hello': {'*': ''},\n    'how': [{'*': '', 'are': {'you': {'*': ''}}}],\n    'world': {'*': ''}}\n\nThis provides an opportunity to specify metadata for each key and the\nobject itself. For example:\n\n.. code:: python\n\n   schema = {\n       '*': 'greeting',\n       'hello': {'*': 'length'},\n       'world': {'*': 'atoms'},\n       'how': [\n            {'*': 'method',\n             'are': {\n                 '*': 'yup',\n                 'you': {'*': 'me'}}\n            }\n       ]}\n\n   metaform.normalize(data, schema)\n\n::\n\n   {'atoms': 2, 'length': 1.0, 'method': ['is', {'yup': {'me': 'doing'}}]}\n\nWe recommend saving schemas you create for normalizations for data\nanalytics and `driver projects <https://github.com/drivernet>`__ in\ndot-folders ``.schema``, in a JSON or YAML files in that folder.\n\nSo, we have access to all keys, and can specify, what to do with them:\n\n.. code:: python\n\n   schema = {\n       '*': 'greeting',\n       'hello': {'*': 'length|lambda x: x+5.'},\n       'world': {'*': 'atoms|lambda x: str(x)+\"ABC\"'},\n       'how': [\n            {'*': 'method',\n             'are': {\n                 '*': 'yup',\n                 'you': {'*': 'me|lambda x: \"-\".join(list(x))'}}\n            }\n       ]}\n\n   metaform.normalize(data, schema)\n\n::\n\n   {'atoms': '2ABC',\n    'length': 6.0,\n    'method': ['is', {'yup': {'me': 'd-o-i-n-g'}}]}\n\nAnd suppose, we want to define a more complex function, inconvenient via\nlambdas:\n\n.. code:: python\n\n   from metaform import converters\n\n   def some_func(x):\n       a = 123\n       b = 345\n       return (b-a)*x\n\n   converters.func = some_func\n\n   schema = {\n       '*': 'greeting',\n       'hello': {'*': 'length|converters.func'},\n       'world': {'*': 'atoms|lambda x: str(x)+\"ABC\"'},\n       'how': [\n            {'*': 'method',\n             'are': {\n                 '*': 'yup',\n                 'you': {'*': 'me|lambda x: \"-\".join(list(x))'}}\n            }\n       ]}\n\n   metaform.normalize(data, schema)\n\n::\n\n   {'atoms': '2ABC',\n    'length': 222.0,\n    'method': ['is', {'yup': {'me': 'd-o-i-n-g'}}]}\n\nWe just renamed the keys, and normalized values! What else could we\nwant?\n\nNormalizing Data\n----------------\n\nSuppose we have similar data from different sources. For example, topics\nand comments are not so different after all, because if a comment\nbecomes large enough, it can stand as a topic of its own.\n\n.. code:: python\n\n   topics = requests.get('https://api.infty.xyz/topics/?format=json').json()['results']\n   comments = requests.get('https://api.infty.xyz/comments/?format=json').json()['results']\n\nLet’s define templates for them, with the key names and types to match:\n\n.. code:: python\n\n   topics_schema = [{\n     'id': {'*': 'topic-id'},\n     'type': {'*': '|lambda x: {0: \"NEED\", 1: \"GOAL\", 2: \"IDEA\", 3: \"PLAN\", 4: \"STEP\", 5: \"TASK\"}.get(x)'},\n     'owner': {'username': {'*': ''}, 'id': {'*': 'user-id'}},\n     'blockchain': {'*': '|lambda x: x and True or False'},\n   }]\n\n   normal_topics = metaform.normalize(topics, topics_schema)\n\n   topics_df = pandas.io.json.json_normalize(normal_topics)\n   topics_df.dtypes\n\n::\n\n   blockchain             bool\n   body                 object\n   categories           object\n   categories_names     object\n   children             object\n   comment_count         int64\n   created_date         object\n   data                 object\n   declared            float64\n   editors              object\n   funds               float64\n   is_draft               bool\n   languages            object\n   matched             float64\n   owner.user-id         int64\n   owner.username       object\n   parents              object\n   title                object\n   topic-id              int64\n   type                 object\n   updated_date         object\n   url                  object\n   dtype: object\n\n.. code:: python\n\n   comments_schema = [{\n     'id': {'*': 'comment-id'},\n     'topic': {'*': 'topic-url'},\n     'text': {'*': 'body'},\n     'owner': {'username': {'*': ''}, 'id': {'*': 'user-id'}},\n     'blockchain': {'*': '|lambda x: x and True or False'},\n   }]\n\n   normal_comments = metaform.normalize(comments, comments_schema)\n\n   comments_df = pandas.io.json.json_normalize(normal_comments)\n   comments_df.dtypes\n\n::\n\n   assumed_hours      object\n   blockchain           bool\n   body               object\n   claimed_hours      object\n   comment-id          int64\n   created_date       object\n   donated           float64\n   languages          object\n   matched           float64\n   owner.user-id       int64\n   owner.username     object\n   parent             object\n   remains           float64\n   topic-url          object\n   updated_date       object\n   url                object\n   dtype: object\n\n.. code:: python\n\n   df = pandas.concat([topics_df, comments_df], sort=False)\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/wefindx/metaform",
    "keywords": "",
    "license": "ASK FOR PERMISSIONS",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metaform",
    "package_url": "https://pypi.org/project/metaform/",
    "platform": "",
    "project_url": "https://pypi.org/project/metaform/",
    "project_urls": {
      "Homepage": "https://gitlab.com/wefindx/metaform"
    },
    "release_url": "https://pypi.org/project/metaform/1.0.1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A utility for defining metadata for data types and formats.",
    "version": "1.0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7439235,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2b972f4d1c2c773d20ba84bd1808837630ec45d75eeb0f056e8c0d9aae582cb",
        "md5": "da84cc09bbdca4d4fa922b0db39aee37",
        "sha256": "e8bf0564d8b785e39eb55500ad4080d046808dc2d340d9d6f68f7de924831268"
      },
      "downloads": -1,
      "filename": "metaform-1.0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "da84cc09bbdca4d4fa922b0db39aee37",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14388,
      "upload_time": "2019-11-09T18:41:57",
      "upload_time_iso_8601": "2019-11-09T18:41:57.756687Z",
      "url": "https://files.pythonhosted.org/packages/e2/b9/72f4d1c2c773d20ba84bd1808837630ec45d75eeb0f056e8c0d9aae582cb/metaform-1.0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}