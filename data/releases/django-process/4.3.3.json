{
  "info": {
    "author": "Josue Gomez",
    "author_email": "jgomez@jesrat.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Django Process\n\nIts a reusable app for execute scrits in workflows with dependecies\n\n## Table of Contents\n* [usage](#usage)\n* [tips](#tips)\n    * [execution of the processes](#exec)\n    * [frequency of the process](#freq)\n    * [render job/process workflow](#render-diagram)\n    * [task placement in diagram](#task-placement)\n    * [start job on demand](#job-start)\n    * [reopen task for execution in cascade](#task-reopen)\n    * [access to django builtins](#access-django)\n\n\n## Usage: <a name=\"usage\"></a>\n* pip install django-process\n* add 'process' to installed apps\n* makemigrations and migrate them\n* create a Process and Tasks which belong to the process.\n(The Job is an instance executed of the process, JobTask is an instance executed of the Task you must not create manually any of them !) \n* (optional) you can create dependencies of the tasks for they to run sequentially, if you don't create dependencies the tasks will start all at once\n* execute python manage.py run_jobs \n\n\n# TIPS: <a name=\"tips\"></a>\n## execution of the processes <a name=\"exec\"></a>\njust as simple as\n```pycon\n>>> python manage.py run_jobs\n```\n\n## frequency of the process <a name=\"freq\"></a>\nThe process have a crontab-like configuration for set the frequency.\nLets take the attribute minute for example. You can:\n* use * for all minutes\n* specify a list of minutes 1,3,5,8,25,59\n* specify a range of minutes 1-30\n* combine list and ranges example 1,3,5,8,4-9 will be expanded to: 1,3,4,5,6,7,8,9\n* for the moment it doesnt accept fractions using the / char\n\nyou can use any of those above for the five attributes just like a crontab.\n##### the start job process runs each minute while the tasks manager its always online.   \n\n\n## render process or job object as an workflow diagram <a name=\"render-diagram\"></a>\nin your html code you can render a Process as an image workflow\n* {% load process_diagram %} in your html for use the diagram templatetag\n* {% include \"process/dj-process.html\" %} in your html for include the CSS and JS\n* {{ object|diagram }} to render the object\n```html\n{% load process_diagram %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    {% include \"process/dj-process.html\" %}\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n    <body>\n        {{ object|diagram }}\n    </body>\n</html>\n```\nthis will return an output like this:\n<span align=\"center\">\n<pre>\n<a href=\"https://github.com/Jesrat/django-process\"><img src=\"https://raw.githubusercontent.com/Jesrat/django-process/master/ext/workflow.jpg\" align=\"center\" /></a>\n</pre>\n</span>\n\n## placing a task in an workflow diagram <a name=\"task-placement\"></a>\nTask objects have two attributes: level & offset you can place a task in a workflow diagram using those attributes\nlevels are vertical placement while offset are horizontal placements\n* level: the value for level starts on 0 you can create as many levels as you want in workflow diagram\n* offset: its a percentaje 0% will place your task in the middle 25% places to the right while -25% place the task to the left\n\n\n## starting a Job and its tasks on demand <a name=\"job-start\"></a>\nThe job needs a Process parent to be instanced:\n```pycon\n>>> process = Process.objects.all()[0]\n>>> job, tasks = Job.create(process)\n```\nthis will create the job for the process and also the tasks if the runner is online it will execute immediate\nall the tasks created sequentially if you have defined dependencies for them or all at once if you have not\n\n\n## reopen task for execution in cascasde <a name=\"task-reopen\"></a>\nyou can reopen a task that has been executed already:\n```pycon\n>>> task = JobTask.objects.all()[0]\n>>> task.reopen(main=True)\n```\nthis will reopen the job task for execution again and it will set status awaiting for the childs in CASCADE\n\n## access to django builtins <a name=\"access-django\"></a>\nIf you want to use django functions or access models and their methods in a task-script\n\nyou need first import process.env example:\n```pycon\nimport process.env\nfrom yourapp.models import CustomModel\n\nobjects = CustomModel.objects.all()\nfor obj in objects:\n    print(obj)\n```\nif you do not import process.env you will get an error trying to access django\n\n## this short tutorial does not covers all the power for the app. I will be adding more examples\n## if you got doubts or questions don't hesitate send me a mail or create an issue im always online   \n[mail the author](mailto:jgomez@jesrat.com)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Jesrat/django-process",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-process",
    "package_url": "https://pypi.org/project/django-process/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-process/",
    "project_urls": {
      "Homepage": "https://github.com/Jesrat/django-process"
    },
    "release_url": "https://pypi.org/project/django-process/4.3.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An app for create process workflows and schedule tasks on django",
    "version": "4.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15184014,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abde54f248d899f32f72974c88dc434f9411862af6ad2cd5b87beac13a98f4a4",
        "md5": "72bfb4e82dc21301368a8c834bebaea0",
        "sha256": "58d925cced05b1a58709a10c2e2c5a4caf36ddf972a830e020aaddaa45238f4f"
      },
      "downloads": -1,
      "filename": "django-process-4.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "72bfb4e82dc21301368a8c834bebaea0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 554826,
      "upload_time": "2019-11-22T22:47:57",
      "upload_time_iso_8601": "2019-11-22T22:47:57.130799Z",
      "url": "https://files.pythonhosted.org/packages/ab/de/54f248d899f32f72974c88dc434f9411862af6ad2cd5b87beac13a98f4a4/django-process-4.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}