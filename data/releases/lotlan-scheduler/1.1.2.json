{
  "info": {
    "author": "Peter Detzner, Maximilian HÃ¶rstrup",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# LoTLan Scheduler\n![Unit-Tests](https://github.com/iml130/lotlan-scheduler/workflows/Unit-Tests/badge.svg?branch=feature%2Fgithub-action-for-unittests)\n\nScheduler for [LoTLan](https://lotlan.readthedocs.io/en/latest/) tasks. Parses LoTLan files and accepts events defined in the files to schedule.\n\nThe repository for the LoTLan grammar can be found [here](https://github.com/iml130/LoTLan)\n## Task examples\n\nYou can find many LoTLan files / examples in the LoTLan Scheduler [repository](https://github.com/iml130/lotlan-scheduler) or in the official [Documentation](https://lotlan-scheduler.readthedocs.io)\n\n## Quickstart / Example\n\nHere is an example how the scheduler can be used\n```python\nimport sys\n\nfrom lotlan_scheduler.scheduler import LotlanScheduler\nfrom lotlan_scheduler.api.event import Event\n\n# gets called for each materialflow that is waiting for\n# the triggeredBy condition to be satisfied\n# event information contains info about the events in tb\ndef cb_triggered_by(mf_uuid, _uuid, event_information):\n    print(\"cb_triggered_by from mf: \" + str(mf_uuid))\n    print(\"UUID: \" + str(_uuid), \"Event_Info: \" + str(event_information))\n    # foreach event in event_information\n\n# gets called when triggeredBy condition is satisfied\n# transport_orders contains the next transport orders which \n# can be executed\ndef cb_next_to(mf_uuid, transport_orders):\n    print(\"cb_next_to from mf: \" + str(mf_uuid))\n    print(str(transport_orders))\n\n# gets called for each materialflow that is waiting for\n# the finishedBy condition to be satisfied\n# event information contains info about the events in fb\ndef cb_finished_by(mf_uuid, _uuid, event_information):\n    print(\"cb_finished_by from mf: \" + str(mf_uuid))\n    print(\"UUID: \" + str(_uuid), \"Event_Info: \" + str(event_information))\n\n# gets called if a task with the id _uuid has finished\ndef cb_task_finished(mf_uuid, _uuid):\n    print(\"cb_task_finished from mf: \" + str(mf_uuid))\n    print(\"task with uuid \" + str(_uuid) + \" finished\")\n\n# gets called if every task is finished\n# will never be called if the LoTLan file contains a cycle\ndef cb_all_finished(mf_uuid):\n    print(\"cb_all_finished from mf: \" + str(mf_uuid))\n\n\ndef main():\n    test_flag = False\n    lotlan_string = \"\"\n\n    if len(sys.argv) >= 2:\n        if sys.argv[1] == \"--test\":\n            test_flag = True\n            with open(sys.argv[2], 'r') as file:\n                lotlan_string = file.read()\n        else:\n            with open(sys.argv[1], 'r') as file:\n                lotlan_string = file.read()\n\n        lotlan_logic = LotlanScheduler(lotlan_string, test_flag)\n        material_flows = lotlan_logic.get_materialflows()\n\n        for material_flow in material_flows:\n            material_flow.register_callback_triggered_by(cb_triggered_by)\n            material_flow.register_callback_next_to(cb_next_to)\n            material_flow.register_callback_finished_by(cb_finished_by)\n            material_flow.register_callback_task_finished(cb_task_finished)\n            material_flow.register_callback_all_finished(cb_all_finished)\n            material_flow.start()\n\n        material_flow_running = True\n        while (material_flow_running):\n            _input = str(input(\"Wait for input:>\"))\n            mf_number = 0\n            uid = 0\n            input_name = \"buttonPressed\"\n            input_value = \"True\"\n\n            if _input != \"\":\n                mf_number, uid, input_name, input_value = _input.split(\" \")\n\n            mf_number = int(mf_number)\n\n            if mf_number < len(material_flows):\n                material_flows[mf_number].fire_event(str(uid), Event(input_name, \"\", \"bool\", input_value == \"True\"))\n\n            # check if a material flow is still running\n            # if every material flow is finished we are done otherwise continue\n            material_flow_running = False\n            for mf in material_flows:\n                if mf.is_running() is True:\n                    material_flow_running = True\n\nif __name__ == '__main__':\n    main()\n\n```\n\n## License\nLoTLan Scheduler is licensed under the terms of the Apache license. See [LICENCSE](./LICENSE) for more information.\n\n## Contributors\nPeter Detzner, Maximilian Hoerstrup, Dominik Lux\n\n\n## Conference\n\nP. Detzner, T. Kirks and J. Jost, \"[A Novel Task Language for Natural Interaction in Human-Robot Systems for Warehouse Logistics](https://ieeexplore.ieee.org/document/8845336)\", 2019 14th International Conference on Computer Science & Education (ICCSE), Toronto, ON, Canada, 2019, pp. 725-730.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Lotlan-Scheduler",
    "package_url": "https://pypi.org/project/Lotlan-Scheduler/",
    "platform": "",
    "project_url": "https://pypi.org/project/Lotlan-Scheduler/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/Lotlan-Scheduler/1.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Scheduler for tasks generated from Lotlan files",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9994392,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e4053b6eed0e54b7864a59a5da51b7ece61ba6820e96db3c63f179ecc025b72",
        "md5": "46529846e57c870dba8d06224a75508a",
        "sha256": "42d7534f97faa3f5fc929782f02c7d22bf598e07913fd82e7ff4ccabf66323f0"
      },
      "downloads": -1,
      "filename": "Lotlan_Scheduler-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "46529846e57c870dba8d06224a75508a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 43989,
      "upload_time": "2021-04-07T06:16:20",
      "upload_time_iso_8601": "2021-04-07T06:16:20.832106Z",
      "url": "https://files.pythonhosted.org/packages/0e/40/53b6eed0e54b7864a59a5da51b7ece61ba6820e96db3c63f179ecc025b72/Lotlan_Scheduler-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}