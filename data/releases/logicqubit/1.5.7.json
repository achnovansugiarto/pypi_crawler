{
  "info": {
    "author": "Cleoner Pietralonga",
    "author_email": "cleonerp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# Features\n\n- Numerical and symbolic simulation of quantum algorithms\n- Plot states and current operation, density matrix and measurement graphs\n- The state values can be represented as angles, which helps in the analysis of the fourrier quantum transform.\n- Operations can be performed directly on the instantiated qubit object or using qubit indices.\n- Support GPU\n\n# Table of Contents\n- [Installation](#installation)\n- [Startup](#startup)\n  * [To instantiate a qubit](#to-instantiate-a-qubit)\n  * [To instantiate a qubit register](#to-instantiate-a-qubit-register)\n- [Operations](#operations)\n  * [Operations on one qubit](#operations-on-one-qubit)\n  * [Operations on two qubits](#operations-on-two-qubits)\n  * [List of available gates](#list-of-available-gates)\n- [Code sample](#code-sample)\n- [Other code samples](#other-code-samples)\n\n# Installation\n\npip install logicqubit\n\n# Startup\n\nlogicQuBit  = LogicQuBit(n_qubits, symbolic = True)\n\nWhere n_qubits is the number of qubits, and symbolic defines whether the values a and b of the qubits will be symbolic or not, if the symbolic input is omitted the calculation will be numeric.\n\n## To instantiate a qubit\n\nq  = Qubit()\n\n## To instantiate a qubit register\n\nreg = QubitRegister(num_qubits)\n\n# Operations\n\n## Operations on one qubit\n\nThe operation can be performed as q.Gate(parameters) or logicQuBit.Gate(id_qubit, parameters).\n\n## Operations on two qubits\n\nIn this case, the operation can be performed as q.Gate(control_qubit, parameters) or logicQuBit.Gate(control_qubit, target_qubit, parameters).\n\n*The need for parameters depends on the type of gate.\n\n## List of available gates\n\nSingle-qubit gates: X, Y, Z, V, S, T, H, RX, RY, RZ, U, U1, U2, U3.\n\nTwo-qubits gates: CX or CNOT, CY, CZ, CV, CS, CT, CRX, CRY, CRZ, CU, CU1, CU2, CU3, SWAP.\n\nThree-qubits gates: CCX or Toffoli, Fredkin.\n\n# Code sample\n\n```python\nfrom logicqubit.logic import *\n\nlogicQuBit  = LogicQuBit(3)\n\na = Qubit()\nb = Qubit()\nc = Qubit()\n\na.H()\nb.H()\n\nc.CCX(a,b) # and operation\n```\n\n# Other code samples\n\nhttps://github.com/clnrp/logicqubit-algorithms\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/clnrp/logicqubit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logicqubit",
    "package_url": "https://pypi.org/project/logicqubit/",
    "platform": "",
    "project_url": "https://pypi.org/project/logicqubit/",
    "project_urls": {
      "Homepage": "https://github.com/clnrp/logicqubit"
    },
    "release_url": "https://pypi.org/project/logicqubit/1.5.7/",
    "requires_dist": [
      "sympy",
      "numpy"
    ],
    "requires_python": "",
    "summary": "LogicQubit is a simple library for quantum computing simulation.",
    "version": "1.5.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10412240,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93719235585185afaa259691a60bf65100585f0fc612eacf629295909f6d76c2",
        "md5": "95e4b84cbfc8ee757a0608f71c8f7b07",
        "sha256": "bf24d2fa789612bd15d80efa912fbb68728823a462006efff2e31310dddc5662"
      },
      "downloads": -1,
      "filename": "logicqubit-1.5.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "95e4b84cbfc8ee757a0608f71c8f7b07",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20064,
      "upload_time": "2021-05-09T16:16:49",
      "upload_time_iso_8601": "2021-05-09T16:16:49.233260Z",
      "url": "https://files.pythonhosted.org/packages/93/71/9235585185afaa259691a60bf65100585f0fc612eacf629295909f6d76c2/logicqubit-1.5.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ce8fd1f50249444c0c5bb81e8fc056c34f695478ce4a978c787ae070f9c3701",
        "md5": "bdda5874eb3085340e4a66541b8e2a5c",
        "sha256": "d1eb3f4345420342aeaf50fc94da898510d711225599e7b9e8d8ddf42d419392"
      },
      "downloads": -1,
      "filename": "logicqubit-1.5.7.tar.gz",
      "has_sig": false,
      "md5_digest": "bdda5874eb3085340e4a66541b8e2a5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13584,
      "upload_time": "2021-05-09T16:16:51",
      "upload_time_iso_8601": "2021-05-09T16:16:51.176455Z",
      "url": "https://files.pythonhosted.org/packages/6c/e8/fd1f50249444c0c5bb81e8fc056c34f695478ce4a978c787ae070f9c3701/logicqubit-1.5.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}