{
  "info": {
    "author": "Cleoner Pietralonga",
    "author_email": "cleonerp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# Features\n\n- Numerical and symbolic simulation of quantum algorithms\n- Plot state and current operation, density matrix and measurement graphs\n- The state values can be represented as angles, which helps in the analysis of the fourrier quantum transform.\n- Operations can be performed directly on the instantiated qubit object or using qubit indices.\n- Support GPU\n\n# Table of Contents\n- [Installation](#installation)\n- [Startup](#startup)\n  * [To instantiate a qubit](#to-instantiate-a-qubit)\n  * [To instantiate a qubit register](#to-instantiate-a-qubit-register)\n- [Operations](#operations)\n  * [Operations on one qubit](#operations-on-one-qubit)\n  * [Operations on two qubits](#operations-on-two-qubits)\n  * [List of available gates](#list-of-available-gates)\n- [Measure](#Measure)\n  * [Measure the expected value of one or more qubits](#Measure-the-expected-value-of-one-or-more-qubits)\n  * [Measure one shot on a qubit](#Measure-one-shot-on-a-qubit)\n- [Plot graphs and print state](#Plot-graphs-and-print-state)\n  * [Plot expected values](#Plot-expected-values)\n  * [Plot the density matrix](#Plot-the-density-matrix)\n  * [Print the current state](#Print-the-current-state)\n  * [Print the current state as angles](#Print-the-current-state-as-angles)\n- [Code sample](#code-sample)\n- [Other code samples](#other-code-samples)\n\n# Installation\n\npip install logicqubit\n\n# Startup\n\nlogicQuBit  = LogicQuBit(n_qubits, symbolic = True)\n\nWhere n_qubits is the number of qubits, and symbolic defines whether the values a and b of the qubits will be symbolic or not, if the symbolic input is omitted the calculation will be numeric.\n\n## To instantiate a qubit\n\nq  = Qubit()\n\n## To instantiate a qubit register\n\nreg = QubitRegister(num_qubits)\n\n# Operations\n\n## Operations on one qubit\n\nThe operation can be performed as q.Gate(parameters) or logicQuBit.Gate(id_qubit, parameters).\n\n## Operations on two qubits\n\nIn this case, the operation can be performed as q.Gate(control_qubit, parameters) or logicQuBit.Gate(control_qubit, target_qubit, parameters).\n\n*The need for parameters depends on the type of gate.\n\n\n## List of available gates\n\nSingle-qubit gates: X, Y, Z, V, S, T, H, RX, RY, RZ, U, U1, U2, U3.\n\nTwo-qubits gates: CX or CNOT, CY, CZ, CV, CS, CT, CRX, CRY, CRZ, CU, CU1, CU2, CU3, SWAP.\n\nThree-qubits gates: CCX or Toffoli, Fredkin.\n\n# Measure\n\n## Measure the expected value of one or more qubits\n\nresult = logicQuBit.Measure([q1,q2,..,qn])\n\n## Measure one shot on a qubit\n\nvalue = logicQuBit.Measure_One(qubit)\n\n# Plot graphs and print state\n\n## Plot expected values\n\nlogicQuBit.plot()\n\nGenerate a graph of the values obtained by the Measure([...]).\n\n## Plot the density matrix\n\nlogicQuBit.PlotDensityMatrix()\n\n## Print the current state\n\nlogicQuBit.PrintState()\n\n## Print the current state as angles\n\nlogicQuBit.getPsiAtAngles(degree=True)\n\nThe degree variable defines whether the result will be displayed in degrees or radians.\n\n# Code sample\n\n```python\nfrom logicqubit.logic import *\n\nlogicQuBit  = LogicQuBit(3)\n\na = Qubit()\nb = Qubit()\nc = Qubit()\n\na.H()\nb.H()\n\nc.CCX(a,b) # and operation\n\nlogicQuBit.Measure([c])\nlogicQuBit.Plot()\n```\n![](https://github.com/clnrp/logicqubit/blob/master/images/1620579394.png)\n\n# Other code samples\n\nhttps://github.com/clnrp/logicqubit-algorithms\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/clnrp/logicqubit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logicqubit",
    "package_url": "https://pypi.org/project/logicqubit/",
    "platform": "",
    "project_url": "https://pypi.org/project/logicqubit/",
    "project_urls": {
      "Homepage": "https://github.com/clnrp/logicqubit"
    },
    "release_url": "https://pypi.org/project/logicqubit/1.5.8/",
    "requires_dist": [
      "sympy",
      "numpy"
    ],
    "requires_python": "",
    "summary": "LogicQubit is a simple library for quantum computing simulation.",
    "version": "1.5.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10412240,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "455848d56356b01a793d63011426b4942fbd30addf8e4c80d0c43f353e4bfe1d",
        "md5": "353db6933a12cc0b579debbc6393d235",
        "sha256": "8b0d20f78cf029f194950e58c5dc4c2a03133bdf2ad241f6a07bb0d3b5dae4aa"
      },
      "downloads": -1,
      "filename": "logicqubit-1.5.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "353db6933a12cc0b579debbc6393d235",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20453,
      "upload_time": "2021-05-20T03:06:13",
      "upload_time_iso_8601": "2021-05-20T03:06:13.670226Z",
      "url": "https://files.pythonhosted.org/packages/45/58/48d56356b01a793d63011426b4942fbd30addf8e4c80d0c43f353e4bfe1d/logicqubit-1.5.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e35a6f1fa707dc6fd7fd4bf77e73e214810803343c7c4a05521bc1ecce98751d",
        "md5": "16ebe1fdc439ed866397d752d81dd769",
        "sha256": "3554d7912af5b70a51b87cd51265be0e6f472a06d191f2fb209aeea502425352"
      },
      "downloads": -1,
      "filename": "logicqubit-1.5.8.tar.gz",
      "has_sig": false,
      "md5_digest": "16ebe1fdc439ed866397d752d81dd769",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14464,
      "upload_time": "2021-05-20T03:06:15",
      "upload_time_iso_8601": "2021-05-20T03:06:15.546314Z",
      "url": "https://files.pythonhosted.org/packages/e3/5a/6f1fa707dc6fd7fd4bf77e73e214810803343c7c4a05521bc1ecce98751d/logicqubit-1.5.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}