{
  "info": {
    "author": "Ageu Matheus",
    "author_email": "ageumatheus1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-proxypay\n=================\n\nDjango Proxypay is a [Django Framework](https://www.djangoproject.com/) application/library that facilitates the integration of your Django project with the [Proxypay](https://proxypay.co.ao/) [API](https://developer.proxypay.co.ao/v2/). Allowing to generate referrals, recognize payments and look through Proxypay's webhooks.\n\n> If you are looking for a Python alternative that doesn't use any framework, maybe [proxypay-py](https://pypi.org/project/proxypay-py/) could be useful. [proxypay-py](https://pypi.org/project/proxypay-py/) is the official Proxypay library maintained by [TimeBoxed](http://timeboxed.co.ao/)\n\n----------------------------------------------------------------------------------\n\n### Some Features\n\nThe Django Proxypay really comes to facilitate the integration to the Proxypay API, leaving all interaction with Proxypay totally out of the box. Letting you focus more on data validation and / or the Frontend\n\n* Generate references and store them in the database\n* Verify payment directly from a reference instance\n* Acknowledge payment\n* Recognize payments automatically using Proxypay webhooks\n* Mock Payment, for development tests\n* Of course, Signals, notifying you when a payment is recognized or a reference is created or updated.\n\n------------------------------------------------------------------------------------------------------------------\n\n## Installation\n\nSimple **django-proxypay** can be installed with ``pip``:\n\n    pip install django-proxypay\n\n#### Requirements\n\n* Python ``3.7; 3.8``\n* Django ``2.2; 3.0``\n* requests ``2.23``\n\nThese are the officially supported python and package versions. Other versions will probably work\n\n## Configurations\n\nAs stated above, Django Proxypay is a Django Application. To configure your project you simply need to add ``proxypay`` to your ``INSTALLED_APPS`` and configure the ``PROXYPAY`` variable in the ``settings.py`` file\n\nLike the example below, file ``settings.py``:\n\n```python\n# Your project applications\nINSTALLED_APPS = [\n    'proxypay',\n]\n\n# Proxypay Configurations\nPROXYPAY = {\n    # (str) Your Proxypay authorization token key\n    'PRIVATE_KEY': os.environ.get('PROXYPAY_PRIVATE_KEY'),\n    # (int) Your Proxypay Entity ID\n    'ENTITY': os.environ.get('PROXYPAY_ENTITY'),\n    # (int) Optional, Default days to expire a reference\n    'REFERENCE_DAYS': os.environ.get('PROXYPAY_REFERENCE_DAYS'),\n    # (str) Optional, the proxypay api environment to use\n    # If not set, by default Proxypay will use the sandbox environment if settings.DEBUG is True \n    # and produnction if is False\n    # If set, the value must be sandbox or production\n    'ENV': os.environ.get('PROXYPAY_ENV')\n}\n```\n\n**Note**: That's all, make sure to run the database migrations. Using the commands ``python manage.py makemigrations`` and ``python manage.py migrate`` to generate a table of References in the database\n\n## Basic use\n\n### Creating references and verifying payments\n\nUse the `` proxypay.references.create`` method to create new references. This method will return an instance of `` proxypay.models.Reference``. Which you can use to verify payment and other data such as related entity, reference id and more\n\n```python\nfrom proxypay.references import create\n\n###\n## Creating References\n#\n\n# simple like that\nreference = create(1780.78)\n\n# or\nreference2 = create(\n    # the reference amount\n    amount=3500,\n    # (dict) Optional, custom_fields to add to refence instance and proxypay payment data\n    # Make sure to use just strings\n    fields={\n        'product_type': 'some'\n    },\n    # (int) Optional, Number of days to expire the reference\n    days=3,\n)\n\n# Check if a reference was paid / Acknowledge Payment for this reference\n# will return False or the payment data from Proxypay API in a dict structure\npayment = reference.check_payment() \n```\n\n### Proxypay Webhooks, watching for payments\n\nYou can avoid manually checking for paid references. Django Proxypay comes with a view ready to keep an eye on the Proxypay API Webhooks. This view will check the signature, find the related `` proxypay.models.Reference`` instance and update as paid. At the end it will trigger the `` reference_paid`` signal.\n\nTo use, you only need to add the endpoint that will be used by the Proxypay API. As in the example below. In your `` urls.py`` file:\n\n```python\n# django stuffs\nfrom django.urls import path\nfrom django.contrib import admin\n\n# proxypay watch payments view\nfrom proxypay.payments import watch_payments\n\nurlpatterns = [\n    path( \"admin/\", admin.site.urls),\n    # Note, the URL name can be whatever you want\n    path('proxypay-payments', watch_payments),\n]\n```\n\n**Note**: Don't forget to configure the endpoint in your Proxypay account\n\n### Working with Signals\n\nSignals are the best way to keep an eye on new reference or new payments. So, in your ``signals.py`` file:\n\n```python\nfrom django.dispatch import receiver\nfrom proxypay.signals import reference_paid, reference_created\n\n# receive a paid reference\n@receiver(reference_paid)\ndef handle_paid_reference(sender, reference, **kwargs):\n    # will print out the reference\n    print(f\"Reference {reference.reference} was paid!\")\n    # You can also check the payment data received  from Proxypay\n    print('(dict) Payment Data: ', reference.payment)\n\n# receive a created reference\n@receiver(reference_created)\ndef handle_created_reference(sender, reference, **kwargs):\n    print(f\"Reference {reference.reference} was created!\")\n```\n\n## Mock Payment\n\nIn development mode, you can create fictitious payments to test your application. Using Django's ``manage.py`` in your terminal like below:\n\n```bash\n\n# 123902092 a reference id\npython manage.py proxypay pay 123902092\n\n```\n\nThis command will search for the reference in the database, if found and has not yet been paid, it will make the payment. This time, the signal will be triggered, and you will be able to simulate it as if the payment confirmation came from Proxypay's Webhooks. To perform desired operations\n\n------------------------------------------------------------------------------------------------------------------\n\n## API Reference\n\nOkay, let's see how far django-proxypay can help you...\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AgeuMatheus/django-proxypay",
    "keywords": "django,payments,proxypay,django-proxypay",
    "license": "MIT License",
    "maintainer": "Ageu Matheus",
    "maintainer_email": "ageumatheus1@gmail.com",
    "name": "django-proxypay",
    "package_url": "https://pypi.org/project/django-proxypay/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-proxypay/",
    "project_urls": {
      "Changelog": "https://github.com/AgeuMatheus/django-proxypay/blob/master/HISTORY.md",
      "Homepage": "https://github.com/AgeuMatheus/django-proxypay"
    },
    "release_url": "https://pypi.org/project/django-proxypay/1.2.1/",
    "requires_dist": [
      "Django (>=3)",
      "requests (>=2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Django Proxypay is a Django Framework application/library that facilitates the integration of your Django project with theProxypay API. Allowing to generate referrals, recognize payments and look through Proxypay's webhooks",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12865758,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5db1f0641cfbe4349c75f54ed607136f63b219d03664ecabb5acc76a28941a65",
        "md5": "f03cd3a278615a15022ef4f98d6187c6",
        "sha256": "9f7e07deae2e576f6847eb098a00b85b618ce583b05f1703fb7308c20cbe8f63"
      },
      "downloads": -1,
      "filename": "django_proxypay-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f03cd3a278615a15022ef4f98d6187c6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18250,
      "upload_time": "2021-01-13T16:15:29",
      "upload_time_iso_8601": "2021-01-13T16:15:29.696149Z",
      "url": "https://files.pythonhosted.org/packages/5d/b1/f0641cfbe4349c75f54ed607136f63b219d03664ecabb5acc76a28941a65/django_proxypay-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4ced1b858c05a83c950e2f4fd40dd806afdd8a570402c5076fe0554be003e5a",
        "md5": "f56b4e7315c7a26ce2ff1c71c4336b79",
        "sha256": "473435bc94488867dd9cbd63b020b70cae425eea7ada38d6e600001ccad76eb1"
      },
      "downloads": -1,
      "filename": "django-proxypay-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f56b4e7315c7a26ce2ff1c71c4336b79",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12567,
      "upload_time": "2021-01-13T16:15:32",
      "upload_time_iso_8601": "2021-01-13T16:15:32.874341Z",
      "url": "https://files.pythonhosted.org/packages/d4/ce/d1b858c05a83c950e2f4fd40dd806afdd8a570402c5076fe0554be003e5a/django-proxypay-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}