{
  "info": {
    "author": "NSO / AURA",
    "author_email": "\"aderks@nso.edu\"",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "DKIST Data Validator\n===========================\n\nAn interface containing a validator, and a spec translator for DKIST specs:\n\n- SPEC-0122 Rev C: Data received from the summit\n\n- SPEC-0214 Rev ?: Data published by the Data Center (incomplete)\n\nFeatures\n--------\n\n-  Uses `voluptuous <https://pypi.org/project/voluptuous/>`__ schemas to\n   validate a given input header against dkist specifications\n\n-  3 keyword validations: type validation, required-ness validation, and value validation\n\n-  Failure exceptions include a dictionary of validation failure causes\n\n-  SPEC-0122 to SPEC-0214 translation\n\n\nInstallation\n------------\n\n.. code:: bash\n\n   pip install dkist-header-validator\n\n\nUsage\n--------\nCurrently, this package can be used to validate SPEC122 data or SPEC214 data. Please import the\ncorresponding methods (spec122_validator and Spec122ValidationException, or spec214_validator, Spec214ValidationException).\n\nThis package can be used for validating data, or for validating and translating data (SPEC122 input only).\n\nInput data can be one of:\n    - string file path\n    - File like object\n    - HDUList object\n    - fits.header.Header object\n    - Dictionary of header keys and values\n\nTo validate data:\n\n.. code:: python\n\n    >>> from dkist_header_validator import spec122_validator, Spec122ValidationException\n\n    >>> spec122_validator.validate('dkist_rosa0181200000_observation.fits')\n\nTo validate and translate data:\n\n.. code:: python\n\n    >>> from dkist_header_validator import spec122_validator, Spec122ValidationException\n\n    >>> spec122_validator.validate_and_translate('dkist_rosa0181200000_observation.fits')\n\nWithin the validate and validate_and_translate methods, a series of flags can be set, otherwise they will take their default values:\n    - extra: Default value is true (allow extra keys). This flag determines if extra keywords are allowed in the schema to be validated. Ingest validation should allow extra keys.\n    - return_type: Default value is HDUList. This flag will determine the return type. Can be one of dict, Path, BytesIO, fits.header.Header, HDUList.\n\n\nExamples\n--------\n1. Validate a file:\n\n.. code:: python\n\n    >>> from dkist_header_validator import spec122_validator, Spec122ValidationException\n    >>> spec122_validator.validate('dkist_rosa0181200000_observation.fits', return_type=dict)\n\n    >>> from pathlib import Path\n    >>> spec122_validator.validate('dkist_rosa0181200000_observation.fits', return_type=Path)\n\n2. Validate and translate a file:\n\n.. code:: python\n\n    >>> from dkist_header_validator import spec122_validator, Spec122ValidationException\n    >>> spec122_validator.validate_and_translate('dkist_rosa0181200000_observation.fits')\n\n    >>> spec122_validator.validate_and_translate('dkist_rosa0181200000_observation.fits')\n\n3. Validate headers:\n\n.. code:: python\n\n    >>> from dkist_header_validator import spec122_validator, Spec122ValidationException\n    >>> from astropy.io import fits\n    >>> hdus = fits.open('dkist_rosa0181200000_observation.fits')\n    >>> spec122_validator.validate(hdus[0].header, return_type=dict)\n\n\nThis project is Copyright (c) AURA/NSO.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/dkistdc/dkist-header-validator/src/master/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dkist-header-validator",
    "package_url": "https://pypi.org/project/dkist-header-validator/",
    "platform": "",
    "project_url": "https://pypi.org/project/dkist-header-validator/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/dkistdc/dkist-header-validator/src/master/"
    },
    "release_url": "https://pypi.org/project/dkist-header-validator/1.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "DKIST data validator",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17101911,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5d91cd3b91ab104c6acbae466279476df5f65a2ea891b611ed449c47b4a22a4",
        "md5": "a67ecb31673036995100cb9fa94018f2",
        "sha256": "8ec7a48397d90220d61a291aac4650f1cf8ea579bfa295e8c018a7d29b867ea1"
      },
      "downloads": -1,
      "filename": "dkist-header-validator-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "a67ecb31673036995100cb9fa94018f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 26642,
      "upload_time": "2021-03-17T18:47:00",
      "upload_time_iso_8601": "2021-03-17T18:47:00.804762Z",
      "url": "https://files.pythonhosted.org/packages/c5/d9/1cd3b91ab104c6acbae466279476df5f65a2ea891b611ed449c47b4a22a4/dkist-header-validator-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}