{
  "info": {
    "author": "Michael Murray",
    "author_email": "m.j.murray123@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# The MAME RL Algorithm Training Toolkit\n\n## About\nThis Python library has the to potential to train your reinforcement learning algorithm on almost any arcade game. It is currently available on Linux systems and works as a wrapper around [MAME](http://mamedev.org/). The toolkit allows your algorithm to step through gameplay while recieving the frame data and internal memory address values for tracking the games state, along with sending actions to interact with the game.\n\n## Installation\nYou can use `pip` to install the library, just run:\n```bash\npip install MAMEToolkit\n```\n\n**DISCLAIMER: We are unable to provide you with any game ROMs. It is the users own legal responsibility to acquire a game ROM for emulation. This library should only be used for non-commercial research purposes.**\n\n## Street Fighter Random Agent Demo\nThe toolkit has currently been applied to Street Fighter III Third Strike: Fight for the Future (Japan 990608, NO CD), but can modified for any game available on MAME. The following demonstrates how a random agent can be written for a street fighter environment.\n```python\nimport random\nfrom MAMEToolkit.sf_environment import Environment\n\nroms_path = \"roms/\"\nenv = Environment(\"env1\", roms_path)\nenv.start()\nwhile True:\n    move_action = random.randint(0, 8)\n    attack_action = random.randint(0, 9)\n    frames, reward, round_done, stage_done, game_done = env.step(move_action, attack_action)\n    if game_done:\n        env.new_game()\n    elif stage_done:\n        env.next_stage()\n    elif round_done:\n        env.next_round()\n```\n\nThe toolkit also supports hogwild training:\n```Python\nfrom threading import Thread\nimport random\nfrom MAMEToolkit.sf_environment import Environment\n\n\ndef run_env(env):\n    env.start()\n    while True:\n        move_action = random.randint(0, 8)\n        attack_action = random.randint(0, 9)\n        frames, reward, round_done, stage_done, game_done = env.step(move_action, attack_action)\n        if game_done:\n            env.new_game()\n        elif stage_done:\n            env.next_stage()\n        elif round_done:\n            env.next_round()\n\n\ndef main():\n    workers = 8\n    # Environments must be created outside of the threads\n    roms_path = \"roms/\"\n    envs = [Environment(f\"env{i}\", roms_path) for i in range(workers)]\n    threads = [Thread(target=run_env, args=(envs[i], )) for i in range(workers)]\n    [thread.start() for thread in threads]\n```\n\n![](pics/hogwild3.gif \"Hogwild Random Agents\")\n\n## Setting Up Your Own Game Environment\nIt doesn't take much to interact with the emulator itself using the toolkit, however the challenge comes from finding the memory address values associated with the internal state you care about, and tracking said state with your environment class.\nThe internal memory states of a game can be tracked using the [MAME Cheat Debugger](http://docs.mamedev.org/debugger/cheats.html), which allows you to track how the memory address values of the game change over time.\nTo create an emulation of the game you must first have the ROM for the game you are emulating and know the game ID used by MAME, for example for this version of street fighter it is 'sfiii3n'. \n\n**Game ID's**<br>\nThe id of your game can be found by running:\n```python\nfrom MAMEToolkit.emulator import Emulator\nemulator = Emulator(\"env1\", \"\", \"\", memory_addresses)\n```\nThis will bring up the MAME emulator. You can search through the list of games to find the one you want. The id of the game is always in brackets at the end of the game title.\n\n**Memory Addresses**<br>\nOnce you have these and have determined the memory addresses you wish to track you can start the emulation:\n```python\nfrom MAMEToolkit.emulator import Emulator\nfrom MAMEToolkit.emulator import Address\n\nroms_path = \"roms/\"\ngame_id = \"sfiii3n\"\nmemory_addresses = {\n        \"fighting\": Address('0x0200EE44', 'u8'),\n        \"winsP1\": Address('0x02011383', 'u8'),\n        \"winsP2\": Address('0x02011385', 'u8'),\n        \"healthP1\": Address('0x02068D0B', 's8'),\n        \"healthP2\": Address('0x020691A3', 's8')\n    }\n\nemulator = Emulator(\"env1\", roms_path, \"sfiii3n\", memory_addresses)\n```\nThis will immediately start the emulation and halt it when it toolkit has linked to the emulator process. \n\n**Stepping the emulator**<br>\nOnce the toolkit is linked, you can step the emulator along using the step function:\n```python\ndata = emulator.step([])\n\nframe = data[\"frame\"]\nis_fighting = data[\"fighting\"]\nplayer1_wins = data[\"winsP1\"]\nplayer2_wins = data[\"winsP2\"]\nplayer1_health = data[\"healthP1\"]\nplayer2_health = data[\"healthP2\"]\n```\nThe step function returns the frame data as a NumPy matrix, along with all of the memory address integer values from that timestep.\n\n**Sending inputs**\nTo send actions to the emulator you also need to determine which input ports and fields the game supports. For example, with street fighter to insert a coin the following code is required:\n```python\nfrom MAMEToolkit.emulator import Action\n\ninsert_coin = Action(':INPUTS', 'Coin 1')\ndata = emulator.step([insert_coin])\n```\nTo identify which ports are availble use the list actions command:\n```python\nfrom MAMEToolkit.emulator import list_actions\n\nroms_path = \"roms/\"\ngame_id = \"sfiii3n\"\nprint(list_actions(roms_path, game_id))\n```\nwhich for street fighter returns the list with all the ports and fields available for sending actions to the step function:\n```python\n[\n    {'port': ':scsi:1:cdrom:SCSI_ID', 'field': 'SCSI ID'}, \n    {'port': ':INPUTS', 'field': 'P2 Jab Punch'}, \n    {'port': ':INPUTS', 'field': 'P1 Left'}, \n    {'port': ':INPUTS', 'field': 'P2 Fierce Punch'}, \n    {'port': ':INPUTS', 'field': 'P1 Down'}, \n    {'port': ':INPUTS', 'field': 'P2 Down'}, \n    {'port': ':INPUTS', 'field': 'P2 Roundhouse Kick'}, \n    {'port': ':INPUTS', 'field': 'P2 Strong Punch'}, \n    {'port': ':INPUTS', 'field': 'P1 Strong Punch'}, \n    {'port': ':INPUTS', 'field': '2 Players Start'}, \n    {'port': ':INPUTS', 'field': 'Coin 1'}, \n    {'port': ':INPUTS', 'field': '1 Player Start'}, \n    {'port': ':INPUTS', 'field': 'P2 Right'}, \n    {'port': ':INPUTS', 'field': 'Service 1'}, \n    {'port': ':INPUTS', 'field': 'Coin 2'}, \n    {'port': ':INPUTS', 'field': 'P1 Jab Punch'}, \n    {'port': ':INPUTS', 'field': 'P2 Up'}, \n    {'port': ':INPUTS', 'field': 'P1 Up'}, \n    {'port': ':INPUTS', 'field': 'P1 Right'}, \n    {'port': ':INPUTS', 'field': 'Service Mode'}, \n    {'port': ':INPUTS', 'field': 'P1 Fierce Punch'}, \n    {'port': ':INPUTS', 'field': 'P2 Left'}, \n    {'port': ':EXTRA', 'field': 'P2 Short Kick'}, \n    {'port': ':EXTRA', 'field': 'P2 Forward Kick'}, \n    {'port': ':EXTRA', 'field': 'P1 Forward Kick'}, \n    {'port': ':EXTRA', 'field': 'P1 Roundhouse Kick'}, \n    {'port': ':EXTRA', 'field': 'P1 Short Kick'}\n]\n```\nWe advise you to create an enum of all the possible actions, then send their action values to the emulator, see [the example Actions Enum](https://github.com/BombayCinema/MAMEToolkit/blob/master/Actions.py)\n\nThere is also the problem of transitioning games between non-learnable gameplay screens such as the title screen and character select. To see how this can be implemented please look at the provided [Steps script](https://github.com/BombayCinema/MAMEToolkit/blob/master/Steps.py) and the [Example Street Fighter III Third Strike: Fight for the Future Environment Implementation](https://github.com/BombayCinema/MAMEToolkit/blob/master/Environment.py)\n\nThe emulator class also has a frame_ratio argument which can be used for adjusting the frame rate seen by your algorithm. By default MAME generates frames at 60 frames per second, however, this may be too many frames for your algorithm. The toolkit by default will use a frame_ratio of 3, which means that 1 in 3 frames are sent through the toolkit, this converts the frame rate to 20 frames per second. Using a higher frame_ratio also increases the performance of the toolkit.\n```Python\nfrom MAMEToolkit.emulator import Emulator\n\nemulator = Emulator(roms_path, game_id, memory_addresses, frame_ratio=3)\n```\n\n## Library Performance Benchmarks with PC Specs\nThe development and testing of this toolkit have been completed on an 8-core AMD FX-8300 3.3GHz CPU along with a 3GB GeForce GTX 1060 GPU.\nWith a single random agent, the street fighter environment can be run at 600%+ the normal gameplay speed. And For hogwild training with 8 random agents, the environment can be run at 300%+ the normal gameplay speed.\n\n## Simple ConvNet Agent\nTo ensure that the toolkit is able to train algorithms, a simple 5 layer ConvNet was setup with minimal tuning. The algorithm was able to successfully learn some simple mechanics of Street Fighter, such as combos and blocking. The Street Fighter gameplay works by having the player fight different opponents across 10 stages of increasing difficulty. Initially, the algorithm would reach stage 2 on average, but eventually could reach stage 5 on average after 2200 episodes of training. The learning rate was tracked using the net damage done vs damage taken of a single playthough for each episode.\n\n![](pics/chart.png \"ConvNet Results\")\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/M-J-Murray/MAMEToolkit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MAMEToolkit",
    "package_url": "https://pypi.org/project/MAMEToolkit/",
    "platform": "",
    "project_url": "https://pypi.org/project/MAMEToolkit/",
    "project_urls": {
      "Homepage": "https://github.com/M-J-Murray/MAMEToolkit"
    },
    "release_url": "https://pypi.org/project/MAMEToolkit/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A library to train your RL algorithms against MAME arcade games on Linux",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6263144,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd308bb19ae9429684f32e722ed4bee9254443ba709474d4a8fdb48a079c23e3",
        "md5": "efecfc826c642a8097a0b4c54e9b0dab",
        "sha256": "e63b0eb3643280b801f7d0cf1e9b4134c669972781c4f3918ea36053e18f5eb0"
      },
      "downloads": -1,
      "filename": "MAMEToolkit-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efecfc826c642a8097a0b4c54e9b0dab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 60297770,
      "upload_time": "2018-11-01T23:05:26",
      "upload_time_iso_8601": "2018-11-01T23:05:26.235337Z",
      "url": "https://files.pythonhosted.org/packages/cd/30/8bb19ae9429684f32e722ed4bee9254443ba709474d4a8fdb48a079c23e3/MAMEToolkit-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "838e0bcf2b5efc0ca19aaa873cc395d87de240d3b557bc0895c4a83ff2643214",
        "md5": "8b6ac8036f2d4670d56943b78d88a277",
        "sha256": "d91a9d81e3e18c762555e43621b0219455fbce12e7e5e209e2001a558d981c62"
      },
      "downloads": -1,
      "filename": "MAMEToolkit-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8b6ac8036f2d4670d56943b78d88a277",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 59908974,
      "upload_time": "2018-11-01T23:06:53",
      "upload_time_iso_8601": "2018-11-01T23:06:53.608542Z",
      "url": "https://files.pythonhosted.org/packages/83/8e/0bcf2b5efc0ca19aaa873cc395d87de240d3b557bc0895c4a83ff2643214/MAMEToolkit-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}