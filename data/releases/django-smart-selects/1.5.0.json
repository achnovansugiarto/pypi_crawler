{
  "info": {
    "author": "Patrick Lauber",
    "author_email": "digi@treepy.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Django Smart Selects\n\n[![Build Status](https://travis-ci.org/digi604/django-smart-selects.svg?branch=master)](https://travis-ci.org/digi604/django-smart-selects)\n[![Coverage Status](https://coveralls.io/repos/github/digi604/django-smart-selects/badge.svg?branch=master)](https://coveralls.io/github/digi604/django-smart-selects?branch=master)\n\n\n## Chained Selects\n\nIf you have the following model:\n\n```python\nclass Continent(models.Model):\n    \tname = models.CharField(max_length=255)\n\nclass Country(models.Model):\n    \tcontinent = models.ForeignKey(Continent)\n    \tname = models.CharField(max_length=255)\n\nclass Location(models.Model):\n\tcontinent = models.ForeignKey(Continent)\n\tcountry = models.ForeignKey(Country)\n\tarea = models.ForeignKey(Area)\n\tcity = models.CharField(max_length=50)\n\tstreet = models.CharField(max_length=100)\n```\n\nAnd you want that if you select a continent only the countries are available that are located on this continent and the same for areas you can do the following:\n\n```python\nfrom smart_selects.db_fields import ChainedForeignKey \n\nclass Location(models.Model)\n\tcontinent = models.ForeignKey(Continent)\n\tcountry = ChainedForeignKey(\n\t\tCountry, \n\t\tchained_field=\"continent\",\n\t\tchained_model_field=\"continent\", \n\t\tshow_all=False, \n\t\tauto_choose=True,\n        sort=True\n\t)\n\tarea = ChainedForeignKey(Area, chained_field=\"country\", chained_model_field=\"country\")\n\tcity = models.CharField(max_length=50)\n\tstreet = models.CharField(max_length=100)\n```\n\n### Field options\n\n#### chained_field(required)\n\nThe `chained_field` indicates the field on the same model that should be chained to. In the `Continent`, `Country`, `Location` example, `chained_field` is the name of the field `continent` in model `Location`.\n\n```python\nclass Location(models.Model)\n\tcontinent = models.ForeignKey(Continent)\n```\n\n#### chained_model_field(required)\n\nThe `chained_model_field` indicates the field of the chained model that corresponds to the model linked to by the `chained_field`. In the `Continent`, `Country`, `Location` example, `chained_model_field` is the name of field `continent` in Model `Country`.\n\n```python\nclass Country(models.Model):\n    \tcontinent = models.ForeignKey(Continent)\n```\n\n#### show_all(optional)\n\n`show_all` indicates if only the filtered results should be shown or if you also want to display the other results further down.\n\n#### auto_choose(optional)\n\n`auto_choose` indicates if auto select the choice when there is only one available choice.\n\n\n## Chained ManyToMany Selects\n\nSimilar to `Chained Selects`, but behaves like `ManyToManyField`. For example:\n\n```python\nfrom smart_selects.db_fields import ChainedManyToManyField\n\nclass Publication(models.Model):\n\tname = models.CharField(max_length=255)\n\nclass Writer(models.Model):\n    \tname = models.CharField(max_length=255)\n    \tpublications = models.ManyToManyField('Publication', blank=True, null=True)\n\nclass Book(models.Model):\n    \tpublication = models.ForeignKey(Publication)\n    \twriter = ChainedManyToManyField(\n        \tWriter,\n        \tchained_field=\"publication\",\n        \tchained_model_field=\"publications\",\n        \t)\n    \tname = models.CharField(max_length=255)\n```\n\n\n## Chained ManyToMany Selects HorizontalFiltered (way to mix with django FilteredSelectMultiple)\n\nSimilar to `Chained Selects`, but behaves like `ManyToManyField`. For example:\n\n```python\nfrom smart_selects.db_fields import ChainedManyToManyField\n\nclass Publication(models.Model):\n\tname = models.CharField(max_length=255)\n\nclass Writer(models.Model):\n    \tname = models.CharField(max_length=255)\n    \tpublications = models.ManyToManyField('Publication', blank=True, null=True)\n\nclass Book(models.Model):\n    \tpublication = models.ForeignKey(Publication)\n    \twriter = ChainedManyToManyField(\n        \tWriter,\n\t\thorizontal=True,\n\t\tverbose_name='writer',\n        \tchained_field=\"publication\",\n        \tchained_model_field=\"publications\",\n        \t)\n    \tname = models.CharField(max_length=255)\n```\nwith this little change you can use django horizontal mode view, but do not add the field to admin filter_horizontal\nthis change is not needed:\nadmin.py\n```\n@admin.register(Book)\nclass BookAdmin(admin.ModelAdmin):\n    filter_horizontal = ('writer',) # don't do that because you will be changing the widget.\n```\n\n### Field options\n\n#### chained_field(required)\n\nThe `chained_field` indicates the field on the same model that should be chained to. In the `Publication`, `Writer`, `Book` example, `chained_field` is the name of the field `publication` in model `Book`.\n\n```python\nclass Book(models.Model):\n    \tpublication = models.ForeignKey(Publication)\n```\n\n#### chained_model_field(required)\n\nThe `chained_model_field` indicates the field of the chained model that corresponds to the model linked to by the `chained_field`. In the `Publication`, `Writer`, `Book` example, `chained_model_field` is the name of field `publications` in Model `Writer`.\n\n```python\nclass Writer(models.Model):\n    \tpublications = models.ManyToManyField('Publication', blank=True, null=True)\n```\n\n#### auto_choose(optional)\n\n`auto_choose` indicates if auto select the choice when there is only one available choice.\n\n#### sort (optional, only available on `ChainedForeignKey`)\n\n`sort` indicates if the result set should be sorted lexicographically or not. Disable if you want to use the `Model.ordering` option. Defaults to `True`.\n\n    \n## Grouped Selects\n\nIf you have the following model:\n\n```python\nclass Location(models.Model)\n\tcontinent = models.ForeignKey(Continent)\n\tcountry = models.ForeignKey(Country)\n```\t\t\n\nAnd you want that all countries are grouped by the Continent and that <opt> Groups are used in the select change to the following:\n\n```python\nfrom smart_selects.db_fields import GroupedForeignKey\n\nclass Location(models.Model)\n\tcontinent = models.ForeignKey(Continent)\n\tcountry = GroupedForeignKey(Country, \"continent\")\n```\t\t\n\nThis example assumes that the Country Model has a foreignKey to Continent named \"continent\".\n\t\n\n## Installation\n\n1. Add `smart_selects` to your `INSTALLED_APPS`\n2. Bind the `smart_selects` urls into your project's `urls.py`. This is needed for the `Chained Selects` and `Chained ManyToMany Selects`. For example:\n\n    ```python\n    urlpatterns = patterns('',\n        url(r'^admin/', include(admin.site.urls)),\n        url(r'^chaining/', include('smart_selects.urls')),\n    )\n    ```\n\n\n## Settings\n\n`USE_DJANGO_JQUERY`\n:   By default, `smart_selects` will use the bundled jQuery from Django 1.2's\n    admin area. Set `USE_DJANGO_JQUERY = False` to disable this behaviour.\n\n`JQUERY_URL`\n:   By default, jQuery will be loaded from Google's CDN. If you would prefer to\n    use a different version put the full URL here. Set `JQUERY_URL = False` to disable loading jQuery.\n\n\n\n## TODO\n\n* Add a ChainedCheckboxSelectMultiple widget and adjust `chainedm2m.js` and `chainedfk.js` to build checkboxes in that case",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/digi604/django-smart-selects",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-smart-selects",
    "package_url": "https://pypi.org/project/django-smart-selects/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-smart-selects/",
    "project_urls": {
      "Homepage": "https://github.com/digi604/django-smart-selects"
    },
    "release_url": "https://pypi.org/project/django-smart-selects/1.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django application to handle chained model fields.",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14425707,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "815ae689eb699ddb1530a33821001c8478bfb62ae76fc625842798323cfc93ce",
        "md5": "bf470bdbd7380ad668fc62354b5ccdea",
        "sha256": "d2a48ce7147ab57c68072a148df1e000f2079df2ea72ab8819800cf0ac1bd927"
      },
      "downloads": -1,
      "filename": "django-smart-selects-1.5.0.tar.gz",
      "has_sig": true,
      "md5_digest": "bf470bdbd7380ad668fc62354b5ccdea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19144,
      "upload_time": "2017-04-19T21:19:57",
      "upload_time_iso_8601": "2017-04-19T21:19:57.536909Z",
      "url": "https://files.pythonhosted.org/packages/81/5a/e689eb699ddb1530a33821001c8478bfb62ae76fc625842798323cfc93ce/django-smart-selects-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}