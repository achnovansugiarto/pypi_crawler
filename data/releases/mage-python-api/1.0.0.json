{
  "info": {
    "author": "",
    "author_email": "Tesla Government Developers <developers@teslagovernment.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Mage API Wrapper\n\n## Introduction\nThis script can be imported and used in other python scripts to simplify automated operations relying on the MAGE API.\n\nCommon examples include:\n* Creating events\n* Editing event forms and observations\n* Copying observations from one event to another\n\n## Setup\n1. Clone the repository from GitHub.\n2. Add a `config.py` file to your project folder containing your credentials and MAGE server url. This file should not be uploaded to shared spaces.\n3. Copy `mage_api.py` so it resides alongside your other script(s).\n4. Import `mage_api.py` in your python script(s) to make use of the below functionality.\n\n### Installing Dependencies\n\nTo manage dependencies, this repository includes a `requirements.txt` file. You can install dependencies easily via:\n\n```shell\npip install -r requirements.txt\n```\n\nFor your own projects, you should include a `requirements.txt` file as well. You can generate one by:\n\n```shell\npip install pipreqs\npipreqs .\n```\n\n### Example `config.py`\n\n```py\nmage_environment = 'https://your-mage-url'\n\ncredentials = {\n  'username': 'your_mage_username',\n  'password': 'your_mage_password'\n}\n```\n\n\n## Getting Started\n\nFirst, create a session object which will be used to make all your API calls. This will log you in using the information in `config.py` and store your own MAGE user info as the `own_user` attribute.\n\n```py\nimport mage_api\n\n# instantiate MAGE session\nsession = mage_api.MageClient()\n\n#this is just for demonstration\nprint(session.own_user)\n```\n\nTo make requests, use one of the functions documented below like this:\n\n```py\nimport mage_api\n\n# instantiate MAGE session\nsession = mage_api.MageClient()\n\n# get document for event with an id of 2000\nmy_event = session.get_event(2000)\n```\n\nAPI responses are returned as `formattedResponse` objects with the following attributes:\n\n- `response_code` - indicates success or failure ([Mozilla Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status))\n- `response_body` - any JSON responses formatted as dictionaries, or strings (usually error messages) returned\n- `content` - any downloaded files\n\nGenerally, you'll want to access the `response_body`, which will contain any information for observations or events fetched or added.\n\n```py\nimport mage_api\n\n# instantiate MAGE session\nsession = mage_api.MageClient()\n\n# get document for event with an id of 2000\nmy_event = session.get_event(2000)\n\n# get JSON response as dictionary\nmy_event_document = my_event.response_body\n\n# you can also use pretty_print() for more info\nmy_event.pretty_print()\n```\n\n## Supported MAGE Operations\n\nThe following MAGE operations are supported with simple-to-use class functions (e.g. `session.get_event()`). The list isn't comprehensive at this time, but adding new functions is generally straightforward. Some operations also make use of multiple API calls (e.g. `session.clone_observations()`). Some functions below don't require API calls, and should be accessed directly. They are listed as such (e.g. `mage_api.get_event_forms()`). These usually require you to retrieve a JSON response using another function and pass the dictionary as a parameter.\n\n### Authentication\n\n#### log_out\n\n`log_out` Log out, use this when you're finished\n\n**Parameters**:\n_None_\n\n**Returns:**\nA string indicating successful logout.\n\n### Events\n\n#### get_event\n\n`get_event` Request document for MAGE event, including forms and other metadata.\n\n**Parameters**:\n- `event_id`: `int` numerical ID of requested event\n\n**Returns:**\n`formattedResponse` object with attributes:\n\n- `response_code`\n- `response_body` (requested event document)\n\n#### get_events\n\n`get_events` Request documents for all visible MAGE events.\n\n**Parameters**:\n- `populate`: `bool` include `teams` and `layers` in event documents\n\n**Returns:**\n`formattedResponse` object with attributes:\n- `response_code`\n- `response_body` (list of visible events)\n\n#### create_event\n\n`create_event` Creates new MAGE event and adds user (self) to that event.\n\n**Parameters**:\n- `name`: `string` name for new event\n- `description`: `string` description for new event\n\n**Returns:**\n`formattedResponse` object with attributes:\n- `response_code`\n- `response_body` (created event document)\n\n#### get_event_forms\n\n`get_event_forms` Extracts list of forms from already retrieved event document.\n\n**Parameters**:\n- `event_document`: `dict` event document fetched\n\n**Returns:**\nA list of form documents as dictionaries.\n  \n#### get_event_team\n\n`get_event_team` Extract team ID from already retrieved event document (does not make API call).\n\n**Parameters**:\n- `event_document`: `dict` event document fetched\n\n**Returns:**\nTeam id as an `int`.\n\n### Observations\n\n#### get_observations\n\n`get_observations` Gets all observations meeting specified criteria from specified event.\n\n**Parameters**:\n- `event_id`: `int` numerical id of event\n- `start_date`: `str` filter for observations created after this date/time\n- `end_date`: `str` filter for observations created before this date/time\n- `observation_start_date`: `str` filter for observations with timestamps after this date/time\n- `observation_end_date`: `str` filter for observations with timestamps before this date/time\n- `states`: `str` filter for only `active` or `archive` observations\n\n**Returns:**\n`formattedResponse` object with attributes:\n- `response_code`\n- `response_body` (list of requested observation documents)\n  \n#### create_observation\n\n`create_observation` Creates new observation using provided dictionary and event id.\n\n**Parameters**:\n- `observation`: `dict` dictionary corresponding to valid observation object (format depends on event and forms)\n- `event_id`: `int` numerical id for destination event\n\n**Returns:**\n`formattedResponse` object with attributes:\n- `response_code`\n- `response_body` (created observation document)\n  \n#### clone_event_observations\n\n`clone_event_observations` Creates copies of observations from one event in another, including forms and attachments.\n\nSteps:\n1. Copies forms to event (overwrites existing forms of same name)\n2. Gets specified observations from first event\n3. Copies observations to second event, downloading and re-uploading attachments as needed\n\n**Parameters**:\n- `origin_event_id`: `int` numerical id for event you wish to copy observations FROM\n- `target_event_id`: `int` numerical id for event you wish to copy observations TO\n- `start_date`: `str` filter for observations created after this date/time\n- `end_date`: `str` filter for observations created before this date/time\n- `observation_start_date`: `str` filter for observations with timestamps after this date/time\n- `observation_end_date`: `str` filter for observations with timestamps before this date/time\n\n**Returns:**\n`formattedResponse` object with attributes:\n- `response_code`\n- `response_body` (list of requested observations from origin event)\n  \n#### get_observation_attachments\n\n`get_observation_attachments` Downloads attachments for provided observation document.\n\n**Parameters**:\n- `observation`: `dict` previously retrieved observation document\n\n**Returns:**\n`attachments_mapping` dict:\n\n```\n{\n    'observationId': observation_id,\n    'eventId': event_id,\n    'attachments': [attachment_paths]\n}\n```\n  \n#### create_observation_attachments\n\n`create_observation_attachments` Uploads attachments using provided dict to determine event id, observation id, and attachment locations.\n\n**Parameters**:\n- `attachments_mapping`: `dict`:\n\n```\n{\n    'observationId': observation_id,\n    'eventId': event_id,\n    'attachments': [attachment_paths]\n}\n```\n\n**Returns:**\nA list of `formattedResponse` objects for upload requests with attributes:\n- `response_code`\n- `response_body` (list of requested observations from origin event)\n\n### Forms\n\n#### create_form\n\n`create_form` Create new form in event.\n\n**Parameters**:\n- `form`: `dict` dictionary corresponding to a valid form object\n- `event_id`: `int` numerical id for destination event\n\n**Returns:**\n`formattedResponse` object with attributes:\n- `response_code`\n- `response_body` (created form document)\n  \n#### update_form\n\n`update_form` Replace specified form with provided dictionary.\n\n**Parameters**:\n- `form`: `dict` dictionary corresponding to a valid form object\n- `event_id`: `int` numerical id for destination event\n- `form_id`: `int` numerical id for destination form\n\n**Returns:**\n`formattedResponse` object with attributes:\n- `response_code`\n- `response_body` (updated form document)\n\n#### clone_forms\n\n`clone_forms` Create new form in event.\n\n**Parameters**:\n- `forms_list`: `list` list of dictionaries corresponding to valid form objects\n- `event_id`: `int` numerical id for destination event\n\n**Returns:**\nA dictionary mapping provided form names and ids to created forms and ids.\n\n### Teams\n\n#### session.add_user_to_team\n\n`add_user_to_team` Add specified user to specified team.\n\n**Parameters**:\n- `user`: `dict` user object\n- `team_id`: `int` numerical id for destination team\n\n**Returns:**\n`formattedResponse` object with attributes:\n- `response_code`\n- `response_body` (updated team document)\n  \n### Roles\n\n#### get_roles\n\n`get_roles` Fetch roles for own MAGE user.\n\n**Parameters**:\n_None._\n\n**Returns:**\n`formattedResponse` object with attributes:\n- `response_code`\n- `response_body` (list of available roles for user)\n\n#### grant_event_role\n\n`grant_event_role` Grant event-specific role to specified user.\n\n**Parameters**:\n- `event_id`: `int` numerical id for destination event\n- `user_id`: `str` id for user to grant role\n- `role`: `str` role to grant (owner, manager, guest)\n\n**Returns:**\n`formattedResponse` object with attributes:\n- `response_code`\n- `response_body` (created role document)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "mobile,awareness,GEOINT,geospatial",
    "license": "MIT License Copyright (c) [year] [fullname] Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mage-python-api",
    "package_url": "https://pypi.org/project/mage-python-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/mage-python-api/",
    "project_urls": {
      "Homepage": "https://github.com/TeslaGov/mage-python-api"
    },
    "release_url": "https://pypi.org/project/mage-python-api/1.0.0/",
    "requires_dist": [
      "numpy (>=1.23.2)",
      "pandas (>=1.4.3)",
      "Pillow (>=9.2.0)",
      "requests (>=2.28.1)"
    ],
    "requires_python": ">=3.10.0",
    "summary": "A Python wrapper for the MAGE API.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14816612,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42e4c6c9d8b17e0aacf062d0673f03e87e9764ab9e0ccdacc1ea88f725c58382",
        "md5": "c1e1420ce8ff5f9fa53457b1a4778397",
        "sha256": "fc68277936137ddc84c507e01afd1333c48d6f4a2b28752cf319ad590f5abf55"
      },
      "downloads": -1,
      "filename": "mage_python_api-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c1e1420ce8ff5f9fa53457b1a4778397",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10.0",
      "size": 14772,
      "upload_time": "2022-08-19T18:12:38",
      "upload_time_iso_8601": "2022-08-19T18:12:38.721659Z",
      "url": "https://files.pythonhosted.org/packages/42/e4/c6c9d8b17e0aacf062d0673f03e87e9764ab9e0ccdacc1ea88f725c58382/mage_python_api-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a33d6a2db5c06a121f326389aa86b089663583b71270c452ddd84a74158a6fac",
        "md5": "e5785ac201279ba96188c943d42c6351",
        "sha256": "85d899a00afdc88a650a9241c330d3a07bdb250825ddd3409a966193986b2096"
      },
      "downloads": -1,
      "filename": "mage-python-api-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e5785ac201279ba96188c943d42c6351",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10.0",
      "size": 15647,
      "upload_time": "2022-08-19T18:12:40",
      "upload_time_iso_8601": "2022-08-19T18:12:40.708647Z",
      "url": "https://files.pythonhosted.org/packages/a3/3d/6a2db5c06a121f326389aa86b089663583b71270c452ddd84a74158a6fac/mage-python-api-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}