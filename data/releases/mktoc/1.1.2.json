{
  "info": {
    "author": "Patrick C. McGinty",
    "author_email": "mktoc[@]tuxcoder[dot]com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Topic :: Multimedia :: Sound/Audio :: CD Audio :: CD Writing",
      "Topic :: Multimedia :: Sound/Audio :: Conversion"
    ],
    "description": "mktoc // (c) 2008, Patrick C. McGinty\nmktoc[@]tuxcoder[dot]com\n\nmktoc simplifies the steps needed to create audio CD TOC files for the\ncdrdao CD burning program. For users familiar with ExactAudioCopy or\nCdrWin, TOC files are synonymous with CUE sheets. The primary goal of\nmktoc is to create TOC files using a previously generated CUE sheet.\n\nFeatures:\n   * Create a TOC file from a list of WAV files\n   * Convert an ExactAudioCopy (EAC) CUE file to the TOC format that\n     is usable by cdrdao.\n   * Non-compliant CUE sheet support.\n   * Support for various pregap methods.\n   * Can create offset corrected WAV files for true 'bit-for-bit'\n     accurate copies.\n   * Fuzzy file name logic can correct common file name spelling\n     variations.\n   * Workaround known TOC file parsing bugs in cdrdao.\n\nUsage:\n   mktoc [OPTIONS] < CUE_FILE\n   mktoc [OPTIONS] [[-f] CUE_FILE] [[-o] TOC_FILE]\n   mktoc [OPTIONS] -w WAV_FILES [[-o] TOC_FILE]\n\n   CUE_FILE must contain a valid CUE format. When *_FILE is not\n   provided, the program will read from STDIN. All output will be sent\n   to STDOUT.\n\n   All attempts will be made to preserve any and all information from\n   the input file. For any case where the CUE file contains unknown or\n   bad values, the user will be notified on STDERR.\n\nOptions:\n   --version\n         show program's version number and exit\n\n   -h\n         show help message and exit\n\n   --help\n         show detailed usage instructions and exit\n\n   -a, --allow-missing-wav\n         do not abort when WAV file(s) are missing, (experts only). It\n         is possible when using this option that a bug in cdrdao will\n         create a CD that ignores the pregap definitions in the TOC\n         file. Only use this option if the CUE file does not contain\n         pregaps, or if you do not wish to retain the pregap\n         information.\n\n   -c WAV_OFFSET, --offset-correction=WAV_OFFSET\n         correct reader/writer offset by creating WAV file(s) shifted\n         by WAV_OFFSET samples (original data is not modified)\n\n   -f CUE_FILE, --file=CUE_FILE\n         specify the input CUE file to read\n\n   -o TOC_FILE, --output=TOC_FILE\n         specify the output TOC file to write\n\n   -t, --use-temp\n        write offset corrected WAV files to /tmp directory\n\n   -w, --wave\n        write a TOC file using list of WAV files\n\nExamples:\n\n   1) Create a TOC file from a set of WAV files:\n\n      mktoc -w *.wav\n\n   2) Write a TOC file to 'toc_file.toc', from a set of WAV files:\n\n      mktoc -w *.wav toc_file.toc\n      mktoc -w *.wav > toc_file.toc\n      mktoc -w *.wav -o toc_file.toc\n\n   2) Create a TOC file from a valid CUE file:\n\n      mktoc cue_file.cue\n      mktoc < cue_file.cue\n      mktoc -f cue_file.cue\n\n   3) Write a TOC file to 'toc_file.toc', given an input CUE file:\n\n      mktoc cue_file.cue toc_file.toc\n      mktoc < cue_file.cue > toc_file.toc\n      mktoc -f cue_file.cue -o toc_file.toc\n\n   4) Tell mktoc to ignore missing WAV file errors. There is a\n      potential that the result TOC file will cause cdrdao to loose\n      pregap information during the burn process (see above):\n\n      mktoc -a cue_file.cue\n\n   5) Adjust WAV files for a CD writer offset value. For example, if\n      your CD writer has a -30 sample write offset, it can be\n      corrected by offsetting the input WAV files by +30 samples. New\n      WAV files will be placed in the working directory in a new dir\n      called 'wav+30':\n\n      mktoc -c 30 < cue_file.cue\n\n   6) Adjust WAV files for a CD writer offset value, but create new\n      files in the /tmp directory:\n\n      mktoc -c 30 -t < cue_file.cue\n\nE-mail:\n   mktoc[@]tuxcoder[dot]com\n\nInfo:\n   http://mktoc.googlecode.com\n   http://blog.tuxcoder.com\n\nInstall:\n   1) Any one of the following command will install the program. Make sure to\n      run as root user:\n\n      a) Use 'easy_install' from the setuptools package\n         [http://peak.telecommunity.com/DevCenter/EasyInstall].\n\n         sudo easy_install mktoc\n\n      b) Download the source distribution file and install from the\n         command line.\n\n         tar xzf mktoc-*.tar.gz\n         cd mktoc-*\n         sudo make install\n\n   2) View README for usage instructions.",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/mktoc/",
    "download_url": "http://mktoc.googlecode.com/files/mktoc-1.1.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://mktoc.googlecode.com",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mktoc",
    "package_url": "https://pypi.org/project/mktoc/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mktoc/",
    "project_urls": {
      "Download": "http://mktoc.googlecode.com/files/mktoc-1.1.2.tar.gz",
      "Homepage": "http://mktoc.googlecode.com"
    },
    "release_url": "https://pypi.org/project/mktoc/1.1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Simple command line tool to create TOC files for CD burning with\n          cdrdao.",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3091833,
  "urls": [],
  "vulnerabilities": []
}