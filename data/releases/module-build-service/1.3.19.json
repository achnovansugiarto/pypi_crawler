{
  "info": {
    "author": "The Factory 2.0 Team",
    "author_email": "module-build-service-owner@fedoraproject.org",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "The Module Build Service (MBS) for Modularity\n=============================================\n\nThe MBS coordinates module builds and is responsible for a number of\ntasks:\n\n- Providing an interface for module client-side tooling via which module build\n  submission and build state queries are possible.\n- Verifying the input data (modulemd, RPM SPEC files and others) is available\n  and correct.\n- Preparing the build environment in the supported build systems, such as koji.\n- Scheduling and building of the module components and tracking the build\n  state.\n- Emitting bus messages about all state changes so that other infrastructure\n  services can pick up the work.\n\nDevelopment\n===========\n\nFor help on setting up a development environment, see `docs/CONTRIBUTING.rst`.\n\nClient-side API\n===============\n\nThe orchestrator implements a RESTful interface for module build submission and\nstate querying.  Not all REST methods are supported.  See below for details.\n\nModule build submission\n-----------------------\n\nModule submission is done via posting the modulemd SCM URL.\n\n::\n\n    POST /module-build-service/1/module-builds/\n\n::\n\n    {\n        \"scmurl\": \"git://pkgs.fedoraproject.org/modules/foo.git/foo.yaml?#f1d2d2f924e986ac86fdf7b36c94bcdf32beec15\n    }\n\nThe response, in case of a successful submission, would include the task ID.\n\n::\n\n    HTTP 201 Created\n\n::\n\n    {\n        id: 42\n    }\n\n\nWhen ``YAML_SUBMIT_ALLOWED`` is enabled, it is also possible to submit raw modulemd yaml file by sending\n``multipart/form-data`` request with input file named as ``yaml``.\n\nModule build state query\n------------------------\n\nOnce created, the client can query the current build state by requesting the\nbuild task's URL.  Querying the BPO service might be preferred, however.\n\n::\n\n    GET /module-build-service/1/module-builds/42\n\nThe response, if the task exists, would include various pieces of information\nabout the referenced build task.\n\n::\n\n    HTTP 200 OK\n\n::\n\n    {\n        \"id\": 42,\n        \"state\": \"build\",\n        \"tasks\": {\n            \"rpms\": {\n                \"foo\": {\n                    \"task_id\": 6378,\n                    \"state\": 1,\n                    \"state_reason\": None,\n                    \"nvr\": \"foo-1.2.3-1...\",\n                },\n                \"bar\": {\n                    \"task_id\": 6379,\n                    \"state\": 0,\n                    \"state_reason\": None,\n                    \"nvr\": None,\n                }\n\n            }\n        },\n        ...\n    }\n\n\"id\" is the ID of the task.  \"state\" refers to the orchestrator module\nbuild state and might be one of \"init\", \"wait\", \"build\", \"done\", \"failed\" or\n\"ready\".  \"tasks\" is a dictionary of information about the individual component\nbuilds including their IDs in the backend buildsystem, their state, a reason\nfor their state, and the NVR (if known).\n\nBy adding ``?verbose=1`` to the request, additional detailed information\nabout the module can be obtained.\n\n::\n\n    GET /module-build-service/1/module-builds/42?verbose=1\n\nListing all module builds\n-------------------------\n\nThe list of all tracked builds and their states can be obtained by\nquerying the \"module-builds\" resource.\nThere are a number of configurable GET parameters to change how the\nmodule builds are displayed. These parameters are:\n\n- `verbose` - Shows the builds with the same amount of detail as querying\n  them individually (i.e. verbose=True). This value defaults to False.\n- `page` - Specifies which page should be displayed (e.g. page=3). This\n  value defaults to 1.\n- `per_page` - Specifies how many items per page should be displayed\n  (e.g. per_page=20). This value defaults to 10.\n\nAn example of querying the \"module-builds\" resource without any additional\nparameters::\n\n    GET /module-build-service/1/module-builds/\n\n::\n\n    HTTP 200 OK\n\n::\n\n    {\n      \"items\": [\n        {\n          \"id\": 1,\n          \"state\": 3\n        },\n        {\n          \"id\": 2,\n          \"state\": 3\n        },\n        {\n          \"id\": 3,\n          \"state\": 3\n        },\n        {\n          \"id\": 4,\n          \"state\": 4\n        },\n        {\n          \"id\": 5,\n          \"state\": 4\n        },\n        {\n          \"id\": 6,\n          \"state\": 4\n        },\n        {\n          \"id\": 7,\n          \"state\": 4\n        },\n        {\n          \"id\": 8,\n          \"state\": 4\n        },\n        {\n          \"id\": 9,\n          \"state\": 4\n        },\n        {\n          \"id\": 10,\n          \"state\": 1\n        }\n      ],\n      \"meta\": {\n        \"first\": \"https://127.0.0.1:5000/module-build-service/1/module-builds/?per_page=10&page=1\",\n        \"last\": \"https://127.0.0.1:5000/module-build-service/1/module-builds/?per_page=10&page=3\",\n        \"next\": \"https://127.0.0.1:5000/module-build-service/1/module-builds/?per_page=10&page=2\",\n        \"page\": 1,\n        \"pages\": 3,\n        \"per_page\": 10,\n        \"total\": 30\n      }\n    }\n\n\nAn example of querying the \"module-builds\" resource with the \"verbose\",\n\"per_page\", and the \"page\" parameters::\n\n    GET /module-build-service/1/module-builds/?verbose=true&per_page=3&page=1\n\n::\n\n    HTTP 200 OK\n\n::\n\n    {\n      \"items\": [\n        {\n          \"id\": 1,\n          \"name\": \"testmodule\",\n          \"owner\": \"mprahl\",\n          \"state\": 3,\n          \"tasks\": {\n            \"rpms\": {\n              \"bash\": {\n                \"task_id\": 90109464,\n                \"state\": 1,\n                ...\n              },\n              \"module-build-macros\": {\n                \"task_id\": 90109446,\n                \"state\": 1,\n                ...\n              }\n            }\n          },\n          \"time_completed\": \"2016-08-22T09:44:11Z\",\n          \"time_modified\": \"2016-08-22T09:44:11Z\",\n          \"time_submitted\": \"2016-08-22T09:40:07Z\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"testmodule\",\n          \"owner\": \"ralph\",\n          \"state\": 3,\n          \"tasks\": {\n            \"rpms\": {\n              \"bash\": {\n                \"task_id\": 90109465,\n                \"state\": 1,\n                ...\n              },\n              \"module-build-macros\": {\n                \"task_id\": 90109450,\n                \"state\": 1,\n                ...\n              }\n            }\n          },\n          \"time_completed\": \"2016-08-22T09:54:04Z\",\n          \"time_modified\": \"2016-08-22T09:54:04Z\",\n          \"time_submitted\": \"2016-08-22T09:48:11Z\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"testmodule\",\n          \"owner\": \"mprahl\",\n          \"state\": 3,\n          \"tasks\": {\n            \"rpms\": {\n              \"bash\": {\n                \"task_id\": 90109497,\n                \"state\": 1,\n                ...\n              },\n              \"module-build-macros\": {\n                \"task_id\": 90109480,\n                \"state\": 1,\n                ...\n              }\n            }\n          },\n          \"time_completed\": \"2016-08-22T10:05:08Z\",\n          \"time_modified\": \"2016-08-22T10:05:08Z\",\n          \"time_submitted\": \"2016-08-22T09:58:04Z\"\n        }\n      ],\n      \"meta\": {\n        \"first\": \"https://127.0.0.1:5000/module-build-service/1/module-builds/?per_page=3&page=1\",\n        \"last\": \"https://127.0.0.1:5000/module-build-service/1/module-builds/?per_page=3&page=10\",\n        \"next\": \"https://127.0.0.1:5000/module-build-service/1/module-builds/?per_page=3&page=2\",\n        \"page\": 1,\n        \"pages\": 10,\n        \"per_page\": 3,\n        \"total\": 30\n      }\n    }\n\n\nFiltering module builds\n-----------------------\n\nThe module-builds can be filtered by a variety of GET parameters. These\nparamters are:\n\n- owner - Shows builds submitted by a particular user (e.g. owner=mprahl)\n- state - Shows builds in a particular state (can be the state name or\n  the state ID) (e.g. state=done)\n- submitted_before - Shows builds that were submitted before a particular\n  Zulu ISO 8601 timestamp (e.g. submitted_before=2016-08-23T09:40:07Z)\n- submitted_after - Shows builds that were submitted after a particular\n  Zulu ISO 8601 timestamp (e.g. submitted_after=2016-08-22T09:40:07Z)\n- modified_before - Shows builds that were modified before a particular\n  Zulu ISO 8601 timestamp (e.g. modified_before=2016-08-23T09:40:07Z)\n- modified_after - Shows builds that were modified after a particular\n  Zulu ISO 8601 timestamp (e.g. modified_after=2016-08-22T09:40:07Z)\n- completed_before - Shows builds that were completed before a particular\n  Zulu ISO 8601 timestamp (e.g. completed_before=2016-08-22T09:40:07Z)\n- completed_after - Shows builds that were completed after a particular\n  Zulu ISO 8601 timestamp (e.g. completed_after=2016-08-23T09:40:07Z)\n\nAn example of querying the \"module-builds\" resource with the \"state\",\nand the \"submitted_before\" parameters::\n\n    GET /module-build-service/1/module-builds/?state=done&submitted_before=2016-08-23T08:10:07Z\n\n::\n\n    HTTP 200 OK\n\n::\n\n    {\n      \"items\": [\n        {\n          \"id\": 1,\n          \"state\": 3\n        },\n        {\n          \"id\": 2,\n          \"state\": 3\n        },\n        {\n          \"id\": 3,\n          \"state\": 3\n        }\n      ],\n      \"meta\": {\n        \"first\": \"https://127.0.0.1:5000/module-build-service/1/module-builds/?per_page=10&page=1\",\n        \"last\": \"https://127.0.0.1:5000/module-build-service/1/module-builds/?per_page=10&page=1\",\n        \"page\": 1,\n        \"pages\": 1,\n        \"per_page\": 3,\n        \"total\": 3\n      }\n\nHTTP Response Codes\n-------------------\n\nPossible response codes are for various requests include:\n\n- HTTP 200 OK - The task exists and the query was successful.\n- HTTP 201 Created - The module build task was successfully created.\n- HTTP 400 Bad Request - The client's input isn't a valid request.\n- HTTP 403 Forbidden - The SCM URL is not pointing to a whitelisted SCM server.\n- HTTP 404 Not Found - The requested URL has no handler associated with it or\n  the requested resource doesn't exist.\n- HTTP 409 Conflict - The submitted module's NVR already exists.\n- HTTP 422 Unprocessable Entity - The submitted modulemd file is not valid or\n  the module components cannot be retrieved\n- HTTP 500 Internal Server Error - An unknown error occured.\n- HTTP 501 Not Implemented - The requested URL is valid but the handler isn't\n  implemented yet.\n- HTTP 503 Service Unavailable - The service is down, possibly for maintanance.\n\n_`Module Build States`\n----------------------\n\nYou can see the list of possible states with::\n\n    from module_build_service.models import BUILD_STATES\n    print(BUILD_STATES)\n\nHere's a description of what each of them means:\n\ninit\n~~~~\n\nThis is (obviously) the first state a module build enters.\n\nWhen a user first submits a module build, it enters this state.  We parse the\nmodulemd file, learn the NVR, and create a record for the module build.\n\nThen, we validate that the components are available, and that we can fetch\nthem.  If this is all good, then we set the build to the 'wait' state.  If\nanything goes wrong, we jump immediately to the 'failed' state.\n\nwait\n~~~~\n\nHere, the scheduler picks up tasks in wait and switches to build immediately.\nEventually, we'll add throttling logic here so we don't submit too many\nbuilds for the build system to handle.\n\nbuild\n~~~~~\n\nThe scheduler works on builds in this state.  We prepare the buildroot, submit\nbuilds for all the components, and wait for the results to come back.\n\ndone\n~~~~\n\nOnce all components have succeeded, we set the top-level module build to 'done'.\n\nfailed\n~~~~~~\n\nIf any of the component builds fail, then we set the top-level module\nbuild to 'failed' also.\n\nready\n~~~~~\n\nThis is a state to be set when a module is ready to be part of a\nlarger compose.  perhaps it is set by an external service that knows\nabout the Grand Plan.\n\nBus messages\n============\n\nMessage Topic\n-------------\n\nThe suffix for message topics concerning changes in module state is\n``module.state.change``. Currently, it is expected that these messages are sent\nfrom koji or module_build_service_daemon, i.e. the topic is prefixed with\n``*.buildsys.`` or ``*.module_build_service.``, respectively.\n\nMessage Body\n------------\n\nThe message body is a dictionary with these fields:\n\n``state``\n~~~~~~~~~\n\nThis is the current state of the module, corresponding with the states\ndescribed above in `Module Build States`_.\n\n``name``, ``version``, ``release``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nName, version and release of the module.\n\n``scmurl``\n~~~~~~~~~~\n\nSpecifies the exact repository state from which a module is built.\n\nE.g. ``\"scmurl\": \"git://pkgs.stg.fedoraproject.org/modules/testmodule.git?#020ea37251df5019fde9e7899d2f7d7a987dfbf5\"``\n\n``topdir``\n~~~~~~~~~~\n\nThe toplevel directory containing the trees for each architecture of a module.\nThis field is only present when a module finished building, i.e. with the\nstates 'done' or 'ready'.\n\nConfiguration\n=============\n\nMBS configures itself according to the environment where it runs + according to\nthe following rules (all of them are evaluated from top to bottom):\n\n- DevConfiguration is the initial configuration chosen.\n- If configuration file is found within its final installation location,\n  ProdConfiguration is assumed.\n- If Flask app running within mod_wsgi is detected,\n  ProdConfiguration is assumed.\n- If environment variables determining configuration file/section are found,\n  they are used for configuration. Following environment variables are\n  recognized:\n\n    - `MBS_CONFIG_FILE`: Overrides default configuration file location,\n      typically `/etc/module-build-service/config.py`.\n    - `MBS_CONFIG_SECTION`: Overrides configuration section.\n\n  It is possible to set these values in httpd using `SetEnv`,\n  anywhere in `/etc/profile.d/` etc.\n\n- If test-runtime environment is detected,\n  TestConfiguration is used, otherwise...\n- if `MODULE_BUILD_SERVICE_DEVELOPER_ENV` is set to some reasonable\n  value, DevConfiguration is forced and `config.py` is used directly from the\n  MBS's develop instance. For more information see `docs/CONTRIBUTING.rst`.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pagure.io/fm-orchestrator/",
    "keywords": "module build service fedora modularity koji mock rpm",
    "license": "GPLv2+",
    "maintainer": null,
    "maintainer_email": null,
    "name": "module-build-service",
    "package_url": "https://pypi.org/project/module-build-service/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/module-build-service/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://pagure.io/fm-orchestrator/"
    },
    "release_url": "https://pypi.org/project/module-build-service/1.3.19/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "The Module Build Service for Modularity",
    "version": "1.3.19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16023433,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d37174e2ba1af856d856745a539531eb71738f36cc0ece45b79caa46286e27f",
        "md5": "dee68e1ba7efb60238c15febb5f397ad",
        "sha256": "89815ef72644af4ae74dc8842488ab83cd85ca2af18380041a5d762261a837e9"
      },
      "downloads": -1,
      "filename": "module-build-service-1.3.19.tar.gz",
      "has_sig": false,
      "md5_digest": "dee68e1ba7efb60238c15febb5f397ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2458747,
      "upload_time": "2017-04-07T14:10:05",
      "upload_time_iso_8601": "2017-04-07T14:10:05.834068Z",
      "url": "https://files.pythonhosted.org/packages/5d/37/174e2ba1af856d856745a539531eb71738f36cc0ece45b79caa46286e27f/module-build-service-1.3.19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}