{
  "info": {
    "author": "Balduin Landolt",
    "author_email": "balduin.landolt@dasch.swiss",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DSP-METADATA-GUI Metadata Module\n\nThe `dsp-metadata-gui` is a GUI application written in Python for collecting project specific metadata and turn it into RDF.\n\nAs part of the `dsp-tools`, its aim is to enable researchers and project managers who deposit research data on the DaSCH Service Platform (DSP), to add metadata about the project and datasets to the DSP repository. By providing metadata, the project will be searchable on the platform, which is an integral part of the FAIR principles.\n\nThe metadata follows the schema defined by the [dsp-ontologies](https://github.com/dasch-swiss/dsp-ontologies).\n\n\n\n## Install and run\n\nThe module provides a command line entry point to run the GUI. The only requirement is Python 3 and PIP.\n\nThe application has only been tested on Python 3.9, but it might work on older versions too.\n\n__Note:__ There is a number of known potential issues. See the `troubleshoot` section [here](https://dasch-swiss.github.io/dsp-metadata-gui/usage_overview/#troubleshoot).\n\n\n### Installation via pip\n\nTo install the application, run:\n\n```bash\npip install dsp-metadata-gui\n```\n\nOr respectively:\n\n```shell\npip3 install dsp-metadata-gui\n```\n\nAfterwards, the program can be started by running the command `dsp-metadata` in your terminal of choice.\n\n\n### Installation from source\n\nClone [this repo](https://github.com/dasch-swiss/dsp-metadata-gui) and run `make make-and-run`. If you don't use GNU Make, run the commands specified in the `Makefile` manually.\n\nThis will package the application, install it to your python environment and run the application.\n\n\n\n## Usage\n\n### Collecting Metadata\n\nThe application is divided into two windows:\n\n1. The main window lets you organize a list of projects, for which you can collect metadata. Several actions can be performed with projects, e.g. editing or exporting the project.\n\n2. When editing a project, in the project window, the actual metadata can be added, modified and saved.\n\nTo add a project, you will need the project short code, which is assigned to you by the DaSCH Client Services.  \nA project is always associated with a folder on your local machine. If any files should be included with the metadata import, these files must be within that folder.\nOnce all metadata are added and valid, and the overall RDF graph of the metadata set validates against the ontology, the project can be exported for upload to the DSP.\n\nAll data is locally stored in the file `~/DaSCH/config/repos.data`. for more detail, see [here](https://dasch-swiss.github.io/dsp-metadata-gui/list_view/#local-data-storage).\n\n\n\n### Conversion to V2\n\nThe metadata generated by the application conforms to the first version of the data model for metadata.  \nThis corresponds to the data that can currently be viewed in the [DaSCH Metadata Browser](https://meta.dasch.swiss).\n\nThe initial data model will eventually be replaced by the model V2 which introduces major improvements.  \nMetadata V2 will eventually be collected directly in the web interface rather than in this python application.  \nIn the mean time until the web interface for editing metadata is implemented, this application provides a script to automatically convert V1 `.ttl` files into V2 `.json` files.\n\n> NB: The conversion can not be fully automated, as the model V2 is more rich in information than V1.  \n> For convenience, the conversion adds the string `XX` wherever the output can not be determined with sufficient confidence. __Please check those instances manually.__  \n> The conversion also does some \"guessing\" work, as e.g. the language of literal values or the display text for URLs. If the output can be determined with a sufficient level of confidence, the conversion will ___not___ add `XX`. __However it is still advisable to check the entirety of the output for potential errors.__\n\nV2 JSON metadata can again be converted to V2 RDF metadata, using another script. This should not require any additional data cleaning.\n\nThe most important changes from V1 to V2 include the following additions:\n\n- Support for multi-language literals\n\n- `howToCite` on project level\n\n- `country` property for addresses\n\n- Creation and modification timestamps\n\n- JSON schema validation\n\n\n\n\n## Development\n\n### Development Environment\n\n#### Pipenv\n\nUse `pipenv` for a seamless development experience.  \nIn order to have both dependencies and dev-dependencies installed from the `Pipfile`, set up the virtual environment running\n```\npipenv instal --dev\n```\n\n`pipenv` will manage dependencies as well as a virtual environment. To install packages, use\n```\npipenv install <package-name>\n```\n\nTo create `requirements.txt`, run \n```\npipenv lock -r > requirements.txt\n```\n\nTo bring `setup.py` up to date, run\n```\npipenv run pipenv-setup sync\n```\n\n#### GNU Make\n\n`GNU Make` is used to automatize most tasks.  \nRun `make help` for info on the available targets.\n\n__Note:__ All make targets - except `make run` - should be run from within the `pipenv` shell:  \nEither by running\n```\npipenv run make <target-name>\n```\nor by opening a virtual pipenv shell by running\n```\npipenv shell\nmake <target-name>\n...\nexit\n```\n\n\n### Documentation\n\nThe documentation is created using `mkdocs` and `mkdocstrings` with `markdown_include.include`. To create the documentation, make sure to install all of these, using pip.\n\nTo serve the documentation locally, run `make doc`. To deploy the documentation to github pages, run `make deploy-doc`.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dasch-swiss/dsp-metadata-gui",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dsp-metadata-gui",
    "package_url": "https://pypi.org/project/dsp-metadata-gui/",
    "platform": "",
    "project_url": "https://pypi.org/project/dsp-metadata-gui/",
    "project_urls": {
      "Homepage": "https://github.com/dasch-swiss/dsp-metadata-gui"
    },
    "release_url": "https://pypi.org/project/dsp-metadata-gui/1.3.0/",
    "requires_dist": [
      "beautifulsoup4 (==4.10.0)",
      "certifi (==2021.5.30)",
      "guess-language-spirit (==0.5.3)",
      "isodate (==0.6.0)",
      "jsonschema (==4.0.0)",
      "langdetect (==1.0.9)",
      "langid (==1.1.6)",
      "owlrl (==5.2.3)",
      "pyenchant (==3.2.1)",
      "pyshacl (==0.17.0.post2)",
      "regex (==2021.9.24)",
      "requests (==2.26.0)",
      "textblob (==0.15.3)",
      "validators (==0.18.2)",
      "wxpython (==4.1.1)",
      "pyparsing (==2.4.7) ; python_version >= \"2.6\" and python_version not in \"3.0, 3.1, 3.2, 3.3\"",
      "six (==1.16.0) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3\"",
      "tqdm (==4.62.3) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3\"",
      "attrs (==21.2.0) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3, 3.4\"",
      "urllib3 (==1.26.7) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3, 3.4\" and python_full_version < \"4.0.0\"",
      "charset-normalizer (==2.0.6) ; python_version >= \"3.0\"",
      "idna (==3.2) ; python_version >= \"3.0\"",
      "numpy (==1.21.2) ; python_version >= \"3.0\"",
      "decorator (==5.1.0) ; python_version >= \"3.5\"",
      "click (==8.0.1) ; python_version >= \"3.6\"",
      "joblib (==1.0.1) ; python_version >= \"3.6\"",
      "nltk (==3.6.3) ; python_version >= \"3.6\"",
      "pillow (==8.3.2) ; python_version >= \"3.6\"",
      "pyrsistent (==0.18.0) ; python_version >= \"3.6\"",
      "soupsieve (==2.2.1) ; python_version >= \"3.6\"",
      "rdflib (==6.0.1) ; python_version >= \"3.7\""
    ],
    "requires_python": ">=3.9.0",
    "summary": "Python GUI tool to collect metadata for DSP projects.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16946078,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "837e90da56667e8e33749e74d5a4e116865395d9c514552634cfb61716a12e6f",
        "md5": "9b7374d500611a48105fb280f44cfccf",
        "sha256": "9d118a2081ff37ab0f900783a3062f61a525e3d5830268671f5cc42895fef287"
      },
      "downloads": -1,
      "filename": "dsp_metadata_gui-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b7374d500611a48105fb280f44cfccf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9.0",
      "size": 56555,
      "upload_time": "2021-10-25T14:53:30",
      "upload_time_iso_8601": "2021-10-25T14:53:30.348835Z",
      "url": "https://files.pythonhosted.org/packages/83/7e/90da56667e8e33749e74d5a4e116865395d9c514552634cfb61716a12e6f/dsp_metadata_gui-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e52c911755699b5c6ebf26d8e4205ce4282505d66ab34e6e03fdc329751d48de",
        "md5": "6a66b07f0e5d366c8deedbf5bd71e301",
        "sha256": "7b07e2fd12121a0558f033e4c34e517847cdfbbf22766450ef42ad828934f100"
      },
      "downloads": -1,
      "filename": "dsp-metadata-gui-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6a66b07f0e5d366c8deedbf5bd71e301",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9.0",
      "size": 55743,
      "upload_time": "2021-10-25T14:53:32",
      "upload_time_iso_8601": "2021-10-25T14:53:32.008911Z",
      "url": "https://files.pythonhosted.org/packages/e5/2c/911755699b5c6ebf26d8e4205ce4282505d66ab34e6e03fdc329751d48de/dsp-metadata-gui-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}