{
  "info": {
    "author": "Bavo Van Achte",
    "author_email": "bavo.van.achte@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://img.shields.io/hexpm/l/plug.svg\n    :target: http://www.apache.org/licenses/LICENSE-2.0\n    :alt: Apache2 License\n\n.. image:: https://travis-ci.org/melexis/warnings-plugin.svg?branch=master\n    :target: https://travis-ci.org/melexis/warnings-plugin\n    :alt: Build status\n\n.. image:: https://badge.fury.io/py/mlx.warnings.svg\n    :target: https://badge.fury.io/py/mlx.warnings\n    :alt: Pypi packaged release\n\n.. image:: https://img.shields.io/badge/Documentation-published-brightgreen.svg\n    :target: https://melexis.github.io/warnings-plugin/\n    :alt: Documentation\n\n.. image:: https://scan.coverity.com/projects/15266/badge.svg\n    :target: https://scan.coverity.com/projects/melexis-warnings-plugin\n    :alt: Coverity Scan Build Status\n\n.. image:: https://codecov.io/gh/melexis/warnings-plugin/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/melexis/warnings-plugin\n    :alt: Code Coverage\n\n.. image:: https://codeclimate.com/github/melexis/warnings-plugin/badges/gpa.svg\n    :target: https://codeclimate.com/github/melexis/warnings-plugin\n    :alt: Code Climate Status\n\n.. image:: https://codeclimate.com/github/melexis/warnings-plugin/badges/issue_count.svg\n    :target: https://codeclimate.com/github/melexis/warnings-plugin\n    :alt: Issue Count\n\n.. image:: https://requires.io/github/melexis/warnings-plugin/requirements.svg?branch=master\n    :target: https://requires.io/github/melexis/warnings-plugin/requirements/?branch=master\n    :alt: Requirements Status\n\n.. image:: https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\n    :target: https://github.com/melexis/warnings-plugin/issues\n    :alt: Contributions welcome\n\n\n============================\nCommand line warnings-plugin\n============================\n\nCommand-line alternative for https://github.com/jenkinsci/warnings-plugin.\nUseable with plugin-less CI systems. It can be used with GitLab-CI to enable\nwarning threshold setting for failing the job and for parsing warnings from\nvarious tools and report them as errors.\n\n\n============\nInstallation\n============\n\nEvery release is uploaded to pip so it can be installed simply by using pip.\n\n.. code-block:: bash\n\n    # Python3\n    pip3 install mlx.warnings\n\nYou can find more details in `Installation guide <docs/installation.rst>`_\n\n=====\nUsage\n=====\n\nWarnings plugin parses log messages as well as direct command stream. In case you\nwant to create log file, you will need to redirect your stderr to some text file.\nYou can do that with shell pipes or with\ncommand line arguments to command (if it supports outputting errors to file\ninstead of stderr). Be aware that some commands print warnings on stdout.\n\nAlso warnings plugin log files need to be the last argument as otherwise the\narguments after that are discarded, because they are considered as command\narguments (with or without command flag).\n\n------------\nPipe example\n------------\n\nBelow is one of the ways to redirect your stderr to stdout and save it inside\nfile.\n\n.. code-block:: bash\n\n    yourcommand 2>&1 | tee doc_log.txt\n\n---------------\nCommand example\n---------------\n\nBelow is the command example for the plugin (keep in mind that parse commands are\nrequired).\n\n.. code-block:: bash\n\n    mlx-warnings --command <yourcommand>\n\n---------------\nRunning command\n---------------\n\nThere are few ways to run warnings plugin. If you are playing with Python on\nyour computer you want to use `virtualenv`. This will separate your packages\nper project and there is less chance of some dependency hell. You can\ninitialize virtual environment in current directory by `virtualenv .` .\n\nMelexis Warnings plugin can be called directly from shell/console using:\n\n.. code-block:: bash\n\n    mlx-warnings -h\n\nIt has also possibility to be called as module from `Python3`. In\nthat case command will look like:\n\n.. code-block:: bash\n\n    python3 -m mlx.warnings -h\n\nHelp prints all currently supported commands and their usages.\n\nThe command returns (shell $? variable):\n\n- value 0 when the number of counted warnings is within the supplied minimum and maximum limits: ok,\n- number of counted warnings (positive) when the counter number is not within those limit (1 in case of 0 counted warnings).\n\n---------------------------\nSimple Command line options\n---------------------------\n\nPlugin has two forms of passing the arguments to checkers. The command line\noption which enables checkers and sets minimum and maximum to each checker\nindividually, or the configuration file option which provides more flexibility\nand also traceability as it resides inside repository and provides option to\nadjust minimum and maximum per individual checker.\n\nParse for Sphinx warnings\n-------------------------\n\nAfter you saved your Sphinx warnings to the file, you can parse it with\ncommand:\n\n.. code-block:: bash\n\n    # command line log file\n    mlx-warnings doc_log.txt --sphinx\n    # command line command execution\n    mlx-warnings --sphinx --command <commandforsphinx>\n\n    # explicitly as python module for log file\n    python3 -m mlx.warnings --sphinx doc_log.txt\n    python -m mlx.warnings --sphinx doc_log.txt\n    # explicitly as python module\n    python3 -m mlx.warnings --sphinx --command <commandforsphinx>\n    python -m mlx.warnings --sphinx --command <commandforsphinx>\n\n\nParse for Doxygen warnings\n--------------------------\n\nAfter you saved your Doxygen warnings to the file, you can parse it with\ncommand:\n\n.. code-block:: bash\n\n    # command line log file\n    mlx-warnings doc_log.txt --doxygen\n    # command line command execution\n    mlx-warnings --doxygen --command <commandfordoxygen>\n\n    # explicitly as python module for log file\n    python3 -m mlx.warnings --doxygen doc_log.txt\n    python -m mlx.warnings --doxygen doc_log.txt\n    # explicitly as python module\n    python3 -m mlx.warnings --doxygen --command <commandfordoxygen>\n    python -m mlx.warnings --doxygen --command <commandfordoxygen>\n\n\nParse for Coverity Defects\n--------------------------\n\nCoverity is a static analysis tool which has option to run desktop analysis\non your local changes and report the results back directly in the console.\nYou only need to list affected files and below example lists changed files\nbetween your branch and master, which it then forwards to `cov-run-desktop`:\n\n.. code-block:: bash\n\n    cov-run-desktop --text-output-style=oneline `git diff --name-only --ignore-submodules master`\n\n\nYou can pipe the results to logfile, which you pass to warnings-plugin, or you use\nthe `--command` argument and execute the `cov-run-desktop` through\n\n.. code-block:: bash\n\n    # command line log file\n    mlx-warnings cov-run-desktop-output.txt --coverity\n    # command line command execution\n    mlx-warnings --coverity --command <commandforcoverity>\n\n    # explicitly as python module for log file\n    python3 -m mlx.warnings --coverity cov-run-desktop-output.txt\n    python -m mlx.warnings --coverity cov-run-desktop-output.txt\n    # explicitly as python module\n    python3 -m mlx.warnings --coverity --command <commandforcoverity>\n    python -m mlx.warnings --coverity --command <commandforcoverity>\n\n\nParse for JUnit failures\n------------------------\n\nAfter you saved your JUnit XML output to the file, you can parse it with\ncommand:\n\n.. code-block:: bash\n\n    # command line log file\n    mlx-warnings junit_output.xml --junit\n    # command line command execution\n    mlx-warnings --junit --command <commandforjunit>\n\n    # explicitly as python module for log file\n    python3 -m mlx.warnings --junit junit_output.xml\n    python -m mlx.warnings --junit junit_output.xml\n    # explicitly as python module\n    python3 -m mlx.warnings --junit --command <commandforjunit>\n    python -m mlx.warnings --junit --command <commandforjunit>\n\n\nParse for XMLRunner errors\n--------------------------\n\nWhen you run XMLRunner_,\nthe errors are reported on the output, but they are not marked as failures in\nthe test reports xml files. Since command exits as 1, we could not detect tests\nthat just did not run (not failed). warnings-plugin now parses for the output\nwith command:\n\n.. code-block:: bash\n\n    # command line log file\n    mlx-warnings xmlrunner_log.txt --xmlrunner\n    # command line command execution\n    mlx-warnings --xmlrunner --command <commandforxmlrunner>\n\n    # explicitly as python module for log file\n    python3 -m mlx.warnings --xmlrunner xmlrunner_log.txt\n    python -m mlx.warnings --xmlrunner xmlrunner_log.txt\n    # explicitly as python module\n    python3 -m mlx.warnings --xmlrunner --command <commandforxmlrunner>\n    python -m mlx.warnings --xmlrunner --command <commandforxmlrunner>\n\n.. _XMLRunner: https://github.com/xmlrunner/unittest-xml-reporting\n\n----------------------------------\nConfiguration file to pass options\n----------------------------------\n\nBeside command line, you can pass options through the configuration file.\nConfiguration file is in JSON format with a simple structure.\n\n.. code-block:: json\n\n    {\n        \"sphinx\":{\n            \"enabled\": true,\n            \"min\": 0,\n            \"max\": 0\n        },\n        \"doxygen\":{\n            \"enabled\": false,\n            \"min\": 0,\n            \"max\": 0\n        },\n        \"junit\":{\n            \"enabled\": false,\n            \"min\": 0,\n            \"max\": 0\n        },\n        \"xmlrunner\":{\n            \"enabled\": false,\n            \"min\": 0,\n            \"max\": 0\n        }\n    }\n\nFirst key is `checkername`, then it contains a boolean value for key `enabled`,\nvalue for minimum number of warnings with key `min` and value for maximum\nnumber of warnings with key `max`. This structure allows simple expansion.\n\nTo run the plugin with configuration file you simply pass `--config` flag with\npath to configuration file\n\n.. code-block:: bash\n\n    # command line log file\n    mlx-warnings --config path/to/config.json junit_output.xml\n    # command line command execution\n    mlx-warnings --config path/to/config.json --command <commandforjunit>\n\n\n-------------\nOther options\n-------------\n\nSince the plugin is under active development there are new Features added fast.\nImportant options currently include setting a minimum and a maximum number of warnings\nthat are still acceptable to return 0 (success). Requiring an exact amount of warnings\nusing a single option is also possible. Look at scripts help for more details about the options.\n\nExclude matches with regexes\n----------------------------\n\nIn case you want a checker to exclude certain matches, you can configure\none or more regular expressions in the configuration file on a per-checker basis.\n(Only sphinx, doxygen and xmlrunner checkers are currently supported by this feature.)\nIf a pattern of a regex to exclude is found in a match of the checker's regex, the checker\nwon't count that match. Add the regex(es) as a list of string values for the `exclude` key.\nAn example configuration for the sphinx checker is given below:\n\n.. code-block:: json\n\n    {\n        \"sphinx\":{\n            \"enabled\": true,\n            \"min\": 0,\n            \"max\": 0,\n            \"exclude\": [\n                \"RemovedInSphinx\\\\d+Warning\",\n                \"WARNING: toctree\"\n            ]\n        }\n    }\n\nExclude Sphinx deprecation warnings\n-----------------------------------\n\nThere is a special flag `--exclude-sphinx-deprecation` that lets the sphinx checker exclude\nSphinx deprecation warnings. These warnings match the following regular expression:\n`RemovedInSphinx\\\\d+Warning`. Using this flag results in the same behavior as adding this\nregex to the configuration file as value for the `exclude` key for the sphinx checker.\n\n\n=======================\nIssues and new Features\n=======================\n\nIn case you have any problems with usage of the plugin, please open an issue\non GitHub. Provide as many valid information as possible, as this will help us\nto resolve Issues faster. We would also like to hear your suggestions about new\nfeatures which would help your Continuous Integration run better.\n\n==========\nContribute\n==========\n\nThere is a Contribution guide available if you would like to get involved in\ndevelopment of the plugin. We encourage anyone to contribute to our repository.\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/melexis/warnings-plugin",
    "keywords": "Gitlab CI,warnings,CI",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlx.warnings",
    "package_url": "https://pypi.org/project/mlx.warnings/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mlx.warnings/",
    "project_urls": {
      "Homepage": "https://github.com/melexis/warnings-plugin"
    },
    "release_url": "https://pypi.org/project/mlx.warnings/1.3.1/",
    "requires_dist": [
      "junitparser (>=1.0.0)"
    ],
    "requires_python": "",
    "summary": "Command-line alternative for https://github.com/jenkinsci/warnings-plugin. Useable with plugin-less CI systems.",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16961188,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6521039f0e4946ef317cf1b269919cfc2205e1d0b326c9aef9a1e6b77ebe1373",
        "md5": "e058465b6f5d895e67f3b0a1dd9866f8",
        "sha256": "4f3ff4d12dc04198d6d2e2a10387f51a790d53c07b9687141bcb93ef7ccb9129"
      },
      "downloads": -1,
      "filename": "mlx.warnings-1.3.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e058465b6f5d895e67f3b0a1dd9866f8",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 17052,
      "upload_time": "2020-09-30T09:32:45",
      "upload_time_iso_8601": "2020-09-30T09:32:45.499023Z",
      "url": "https://files.pythonhosted.org/packages/65/21/039f0e4946ef317cf1b269919cfc2205e1d0b326c9aef9a1e6b77ebe1373/mlx.warnings-1.3.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "afa254a949e352dac68e4cfbd355893808bf1e8392cde489b74601dd8e7d1f66",
        "md5": "5b5f102112f233f0e6ad6daa0ec3ae65",
        "sha256": "dfb590bd96d6e70a37f1785cee6d1a6635d9934792c07cfb6744639f35156243"
      },
      "downloads": -1,
      "filename": "mlx.warnings-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5b5f102112f233f0e6ad6daa0ec3ae65",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34022,
      "upload_time": "2020-09-30T09:32:46",
      "upload_time_iso_8601": "2020-09-30T09:32:46.895341Z",
      "url": "https://files.pythonhosted.org/packages/af/a2/54a949e352dac68e4cfbd355893808bf1e8392cde489b74601dd8e7d1f66/mlx.warnings-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}