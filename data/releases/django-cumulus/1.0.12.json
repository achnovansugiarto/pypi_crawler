{
  "info": {
    "author": "Ferrix Hovi, Thomas Schreiber",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Installation\r\n************\r\n\r\nTo install the latest release from PyPI using pip::\r\n\r\n    pip install django-cumulus\r\n\r\nTo install the development version using pip::\r\n\r\n    pip install -e git://github.com/richleland/django-cumulus.git#egg=django-cumulus\r\n\r\nAdd ``cumulus`` to ``INSTALLED_APPS``::\r\n\r\n    INSTALLED_APPS = (\r\n        ...\r\n        'cumulus',\r\n        ...\r\n    )\r\n\r\nUsage\r\n*****\r\n\r\nAdd the following to your project's settings.py file::\r\n\r\n    CUMULUS = {\r\n        'USERNAME': 'YourUsername',\r\n        'API_KEY': 'YourAPIKey',\r\n        'CONTAINER': 'ContainerName'\r\n    }\r\n    DEFAULT_FILE_STORAGE = 'cumulus.storage.OpenStackStorage'\r\n\r\nAlternatively, if you don't want to set the DEFAULT_FILE_STORAGE, you\r\ncan do the following in your models::\r\n\r\n    from cumulus.storage import OpenStackStorage\r\n\r\n    openstack_storage = OpenStackStorage()\r\n\r\n    class Photo(models.Model):\r\n        image = models.ImageField(storage=openstack_storage, upload_to='photos')\r\n        alt_text = models.CharField(max_length=255)\r\n\r\nThen access your files as you normally would through templates::\r\n\r\n    <img src=\"{{ photo.image.url }}\" alt=\"{{ photo.alt_text }}\" />\r\n\r\nOr through Django's default ImageField or FileField api::\r\n\r\n    >>> photo = Photo.objects.get(pk=1)\r\n    >>> photo.image.width\r\n    300\r\n    >>> photo.image.height\r\n    150\r\n    >>> photo.image.url\r\n    http://c0000000.cdn.cloudfiles.rackspacecloud.com/photos/some-image.jpg\r\n\r\nStatic media\r\n************\r\n\r\ndjango-cumulus will work with Django's built-in ``collectstatic``\r\nmanagement command out of the box. You need to supply a few additional\r\nsettings::\r\n\r\n    CUMULUS = {\r\n        'STATIC_CONTAINER': 'YourStaticContainer'\r\n    }\r\n    STATICFILES_STORAGE = 'cumulus.storage.OpenStackStaticStorage'\r\n\r\nContext Processor\r\n*****************\r\n\r\ndjango-cumulus includes an optional context_processor for accessing\r\nthe full CDN_URL of any container files from your templates.\r\n\r\nThis is useful when you're using Swiftclient to serve you static media\r\nsuch as css and javascript and don't have access to the ``ImageField``\r\nor ``FileField``'s url() convenience method.\r\n\r\nAdd ``cumulus.context_processors.cdn_url`` to your list of context processors in your project's settings.py file::\r\n\r\n\r\n    TEMPLATE_CONTEXT_PROCESSORS = (\r\n        ...\r\n        'cumulus.context_processors.cdn_url',\r\n        ...\r\n    )\r\n\r\nNow in your templates you can use {{ CDN_URL }} to output the full path to local media::\r\n\r\n    <link rel=\"stylesheet\" href=\"{{ CDN_URL }}css/style.css\">\r\n\r\nManagement commands\r\n*******************\r\n\r\nsyncstatic\r\n----------\r\n\r\nThis management command synchronizes a local static media folder with\r\na remote container. A few extra settings are required to make use of\r\nthe command.\r\n\r\nAdd the following required settings::\r\n\r\n    CUMULUS = {\r\n        'STATIC_CONTAINER': 'MyStaticContainer', # the name of the container to sync with\r\n        'SERVICENET': False, # whether to use rackspace's internal private network\r\n        'FILTER_LIST': [] # a list of files to exclude from sync\r\n    }\r\n\r\nInvoke the management command::\r\n\r\n    django-admin.py syncstatic\r\n\r\nYou can also perform a test run::\r\n\r\n    django-admin.py syncstatic -t\r\n\r\nFor a full list of available options::\r\n\r\n    django-admin.py help syncstatic\r\n\r\ncontainer_create\r\n----------------\r\n\r\nThis management command creates a new container.\r\n\r\nInvoke the management command::\r\n\r\n    django-admin.py container_create <container_name>\r\n\r\nFor a full list of available options::\r\n\r\n    django-admin.py help container_create\r\n\r\ncontainer_delete\r\n----------------\r\n\r\nThis management command deletes a container.\r\n\r\nInvoke the management command::\r\n\r\n    django-admin.py container_delete <container_name>\r\n\r\nFor a full list of available options::\r\n\r\n    django-admin.py help container_delete\r\n\r\ncontainer_info\r\n--------------\r\n\r\nThis management command gathers information about containers:\r\n\r\nInvoke the management command::\r\n\r\n    django-admin.py container_info [<container_one> <container two> ...]\r\n\r\nFor a full list of available options::\r\n\r\n    django-admin.py help container_info\r\n\r\ncontainer_list\r\n--------------\r\n\r\nThis management command lists all the items in a container to stdout.\r\n\r\nInvoke the management command::\r\n\r\n    django-admin.py container_list <container_name>\r\n\r\nFor a full list of available options::\r\n\r\n    django-admin.py help container_list\r\n\r\nSettings\r\n********\r\n\r\nBelow are the default settings::\r\n\r\n    CUMULUS = {\r\n        'API_KEY': None,\r\n        'AUTH_URL': 'us_authurl',\r\n        'AUTH_TENANT_NAME': None,\r\n        'AUTH_TENANT_ID': None,\r\n        'CNAMES': None,\r\n        'CONTAINER': None,\r\n        'SERVICENET': False,\r\n        'TIMEOUT': 5,\r\n        'TTL': 86400,\r\n        'USE_SSL': False,\r\n        'USERNAME': None,\r\n        'STATIC_CONTAINER': None,\r\n        'FILTER_LIST': [],\r\n        'GZIP_CONTENT_TYPES': [],\r\n        'USE_PYRAX': True,\r\n        'PYRAX_IDENTITY_TYPE': None,\r\n    }\r\n\r\nAPI_KEY\r\n-------\r\n\r\n**Required.** This is your API access key. You can obtain it from the `Rackspace Management Console`_.\r\n\r\n.. _Rackspace Management Console: https://manage.rackspacecloud.com/APIAccess.do\r\n\r\nAUTH_URL\r\n--------\r\n\r\nSet this to the region your account is in. Valid values are ``us_authurl`` (default) and ``uk_authurl``,\r\nor if you are not using rackspace, your swift auth url.\r\n\r\nAUTH_TENANT_NAME and AUTH_TENANT_ID\r\n-----------------------------------\r\n\r\nRequired if you are using your own Openstack Swift rather than rackspaces.\r\n\r\nREGION\r\n------\r\n\r\nSet this to the regional datacenter to connect to. Valid values are ``DFW`` (default) ``ORD`` and ``LON``.\r\n\r\nCNAMES\r\n------\r\n\r\nA mapping of ugly Rackspace URLs to CNAMEd URLs. Example::\r\n\r\n    CUMULUS = {\r\n        'CNAMES': {\r\n            'http://c3417812.r12.cf0.rackcdn.com': 'http://media.mysite.com'\r\n        }\r\n    }\r\n\r\nCONTAINER\r\n---------\r\n\r\n**Required.** The name of the container you want files to be uploaded to.\r\n\r\nFILTER_LIST\r\n-----------\r\n\r\nA list of items to exclude when using the ``syncstatic`` management command. Defaults to an empty list.\r\n\r\nSERVICENET\r\n----------\r\n\r\nSpecifies whether to use Rackspace's private network (True) or not\r\n(False). If you host your sites on Rackspace, you should set this to\r\nTrue in production as you will not incur data transfer fees between\r\nyour server(s) and the cdn on the private network.\r\n\r\nSTATIC_CONTAINER\r\n----------------\r\n\r\nWhen using Django's ``collectstatic`` or django-cumulus's ``syncstatic`` command, this is the name of the container you want static files to be uploaded to.\r\n\r\nTIMEOUT\r\n-------\r\n\r\nThe timeout to use when attempting connections over swiftclient. Defaults to 5 (seconds).\r\n\r\nTTL\r\n---\r\n\r\nThe maximum time (in seconds) until a copy of one of your files distributed into the CDN is re-fetched from your container. Defaults to 86400 (seconds) (24h), the default set by python-cloudfiles.\r\n\r\nNote: After changing TTL, caching servers may not recognize the new TTL for this container until the previous TTL expires.\r\n\r\nUSE_SSL\r\n-------\r\n\r\nWhether or not to retrieve the container URL as http (False) or https (True).\r\n\r\nUSERNAME\r\n--------\r\n\r\n**Required.** This is your API username. You can obtain it from the `Rackspace Management Console`_.\r\n\r\n.. _Rackspace Management Console: https://manage.rackspacecloud.com/APIAccess.do\r\n\r\nHEADERS\r\n-------\r\n\r\nSet headers based on a regular expression in the file name. This can be used to allow Firefox to\r\naccess webfonts across domains::\r\n\r\n   CUMULUS = {\r\n       'HEADERS': (\r\n           (r'.*\\.(eot|otf|woff|ttf)$', {\r\n               'Access-Control-Allow-Origin': '*'\r\n           }),\r\n       )\r\n   }\r\n\r\nGZIP_CONTENT_TYPES\r\n------------------\r\n\r\nSet which content types must be gzipped before sent to the cloud:\r\n\r\n    CUMULUS = {\r\n        'GZIP_CONTENT_TYPES': ['image/jpeg', 'text/css'],\r\n    }\r\n\r\nThe files matching these content types would be gzipped and will have *gzip*\r\ncontent-encoding.\r\n\r\nUSE_PYRAX\r\n---------\r\n\r\nIf True, will use the Official Rackspace's Python SDK for OpenStack/Rackspace\r\nAPIs. Defaults to True.\r\n\r\nNote: Currently this is required even to use your own OpenStack Swift setup.\r\n\r\nPYRAX_IDENTITY_TYPE\r\n-------------------\r\n\r\nPyrax supports different identity types. For now (version 1.4.5 of Pyrax),\r\nthere are two types available: *rackspace* and *keystone*.\r\n\r\nYou **can** specify it through cumulus settings and if you don't, you **must**\r\ndo it through other means (like environment variables or configuration files,\r\nsee Pyrax documentation for more details).\r\n\r\nRequirements\r\n************\r\n\r\n* Django>=1.2\r\n* pyrax==1.4.5\r\n\r\nTests\r\n*****\r\n\r\nTo run the tests, clone `the github repo`_, `install tox`_ and invoke ``tox`` from the clone's root. This will upload two very small files to your container and delete them when the tests have finished running.\r\n\r\n.. _the github repo: https://github.com/richleland/django-cumulus\r\n.. _install tox: http://tox.readthedocs.org/en/latest/index.html\r\n\r\nIssues\r\n******\r\n\r\nTo report issues, please use the issue tracker at https://github.com/richleland/django-cumulus/issues.",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/django-cumulus/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/django-cumulus/django-cumulus/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cumulus",
    "package_url": "https://pypi.org/project/django-cumulus/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-cumulus/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/django-cumulus/django-cumulus/"
    },
    "release_url": "https://pypi.org/project/django-cumulus/1.0.12/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "An interface to the python-swiftclient api through Django.",
    "version": "1.0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4228893,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7beaa68dab37360ae4f40a5e0de520b7e57e06846831c07aef4a1f36997071dd",
        "md5": "062d6d5ca6af91081804bc6c001addcc",
        "sha256": "ffaaed832cc22889aacc8f3aca2f0ac416adfd978f35ea801e2cef84e559a24d"
      },
      "downloads": -1,
      "filename": "django-cumulus-1.0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "062d6d5ca6af91081804bc6c001addcc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26251,
      "upload_time": "2013-12-02T05:47:03",
      "upload_time_iso_8601": "2013-12-02T05:47:03.116930Z",
      "url": "https://files.pythonhosted.org/packages/7b/ea/a68dab37360ae4f40a5e0de520b7e57e06846831c07aef4a1f36997071dd/django-cumulus-1.0.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}