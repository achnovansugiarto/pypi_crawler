{
  "info": {
    "author": "Rich Leland",
    "author_email": "rich@richleland.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Installation\n************\n\nTo install the latest release from PyPI using pip::\n\n    pip install django-cumulus\n\nTo install the development version using pip::\n\n    pip install -e git://github.com/richleland/django-cumulus.git#egg=django-cumulus\n\nAdd ``cumulus`` to ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        ...\n        'cumulus',\n        ...\n    )\n\nUsage\n*****\n\nAdd the following to your project's settings.py file::\n\n    CUMULUS = {\n        'USERNAME': 'YourUsername',\n        'CUMULUS_API_KEY': 'YourAPIKey',\n        'CUMULUS_CONTAINER': 'ContainerName'\n    }\n    DEFAULT_FILE_STORAGE = 'cumulus.storage.CloudFilesStorage'\n\nAlternatively, if you don't want to set the DEFAULT_FILE_STORAGE, you can do the following in your models::\n\n    from cumulus.storage import CloudFilesStorage\n\n    cloudfiles_storage = CloudFilesStorage()\n\n    class Photo(models.Model):\n        image = models.ImageField(storage=cloudfiles_storage, upload_to='photos')\n        alt_text = models.CharField(max_length=255)\n\nThen access your files as you normally would through templates::\n\n    <img src=\"{{ photo.image.url }}\" alt=\"{{ photo.alt_text }}\" />\n\nOr through Django's default ImageField or FileField api::\n\n    >>> photo = Photo.objects.get(pk=1)\n    >>> photo.image.width\n    300\n    >>> photo.image.height\n    150\n    >>> photo.image.url\n    http://c0000000.cdn.cloudfiles.rackspacecloud.com/photos/some-image.jpg\n\nStatic media\n************\n\ndjango-cumulus will work with Django's built-in ``collectstatic`` management command out of the box. You need to supply a few additional settings::\n\n    CUMULUS = {\n        'STATIC_CONTAINER': 'YourStaticContainer'\n    }\n    STATICFILES_STORAGE = 'cumulus.storage.CloudFilesStaticStorage'\n\nContext Processor\n*****************\n\ndjango-cumulus includes an optional context_processor for accessing the full CDN_URL of any container files from your templates.\n\nThis is useful when you're using Cloud Files to serve you static media such as css and javascript and don't have access to the ``ImageField`` or ``FileField``'s url() convenience method.\n\nAdd ``cumulus.context_processors.cdn_url`` to your list of context processors in your project's settings.py file::\n\n\n    TEMPLATE_CONTEXT_PROCESSORS = (\n        ...\n        'cumulus.context_processors.cdn_url',\n        ...\n    )\n\nNow in your templates you can use {{ CDN_URL }} to output the full path to local media::\n\n    <link rel=\"stylesheet\" href=\"{{ CDN_URL }}css/style.css\">\n\nManagement commands\n*******************\n\nsyncstatic\n----------\n\nThis management command synchronizes a local static media folder with a remote container. A few extra settings are required to make use of the command.\n\nAdd the following required settings::\n\n    CUMULUS = {\n        'STATIC_CONTAINER': 'MyStaticContainer', # the name of the container to sync with\n        'USE_SERVICENET': False, # whether to use rackspace's internal private network\n        'CUMULUS_FILTER_LIST': [] # a list of files to exclude from sync\n    }\n\nInvoke the management command::\n\n    django-admin.py syncstatic\n\nYou can also perform a test run::\n\n    django-admin.py syncstatic -t\n\nFor a full list of available options::\n\n    django-admin.py help syncstatic\n\ncontainer_create\n----------------\n\nThis management command creates a new container in Cloud Files.\n\nInvoke the management command::\n\n    django-admin.py container_create <container_name>\n\nFor a full list of available options::\n\n    django-admin.py help container_create\n\ncontainer_delete\n----------------\n\nThis management command deletes a container in Cloud Files.\n\nInvoke the management command::\n\n    django-admin.py container_delete <container_name>\n\nFor a full list of available options::\n\n    django-admin.py help container_delete\n\ncontainer_info\n--------------\n\nThis management command gathers information about containers in Cloud Files.\n\nInvoke the management command::\n\n    django-admin.py container_info [<container_one> <container two> ...]\n\nFor a full list of available options::\n\n    django-admin.py help container_info\n\ncontainer_list\n--------------\n\nThis management command lists all the items in a Cloud Files container to stdout.\n\nInvoke the management command::\n\n    django-admin.py container_list <container_name>\n\nFor a full list of available options::\n\n    django-admin.py help container_list\n\nSettings\n********\n\nBelow are the default settings::\n\n    CUMULUS = {\n        'API_KEY': None,\n        'AUTH_URL': 'us_authurl',\n        'CNAMES': None,\n        'CONTAINER': None,\n        'SERVICENET': False,\n        'TIMEOUT': 5,\n        'TTL': 600,\n        'USE_SSL': False,\n        'USERNAME': None,\n        'STATIC_CONTAINER': None,\n        'FILTER_LIST': []\n    }\n\nAPI_KEY\n-------\n\n**Required.** This is your API access key. You can obtain it from the `Rackspace Management Console`_.\n\n.. _Rackspace Management Console: https://manage.rackspacecloud.com/APIAccess.do\n\nAUTH_URL\n--------\n\nSet this to the region your account is in. Valid values are ``us_authurl`` (default) and ``uk_authurl``.\n\nCNAMES\n------\n\nA mapping of ugly Rackspace URLs to CNAMEd URLs. Example::\n\n    CUMULUS = {\n        'CNAMES': {\n            'http://c3417812.r12.cf0.rackcdn.com': 'http://media.mysite.com'\n        }\n    }\n\nCONTAINER\n---------\n\n**Required.** The name of the container you want files to be uploaded to.\n\nFILTER_LIST\n-----------\n\nA list of items to exclude when using the ``syncstatic`` management command. Defaults to an empty list.\n\nSERVICENET\n----------\n\nSpecifies whether to use Rackspace's private network (True) or not (False). If you host your sites on Rackspace, you should set this to True in production as you will not incur data transfer fees between your server(s) and Cloud Files on the private network.\n\nSTATIC_CONTAINER\n----------------\n\nWhen using Django's ``collectstatic`` or django-cumulus's ``syncstatic`` command, this is the name of the container you want static files to be uploaded to.\n\nTIMEOUT\n-------\n\nThe timeout to use when attempting connections to Cloud Files. Defaults to 5 (seconds).\n\nTTL\n---\n\nCurrently unused.\n\nUSE_SSL\n-------\n\nWhether or not to retrieve the container URL as http (False) or https (True).\n\nUSERNAME\n--------\n\n**Required.** This is your API username. You can obtain it from the `Rackspace Management Console`_.\n\n.. _Rackspace Management Console: https://manage.rackspacecloud.com/APIAccess.do\n\nRequirements\n************\n\n* Django>=1.2\n* python-cloudfiles >= 1.7.9\n\nTests\n*****\n\nTo run the tests, clone `the github repo`_, `install tox`_ and invoke ``tox`` from the clone's root. This will upload two very small files to your container and delete them when the tests have finished running.\n\n.. _the github repo: https://github.com/richleland/django-cumulus\n.. _install tox: http://tox.readthedocs.org/en/latest/index.html\n\nIssues\n******\n\nTo report issues, please use the issue tracker at https://github.com/richleland/django-cumulus/issues.",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/django-cumulus/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/richleland/django-cumulus/",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-cumulus",
    "package_url": "https://pypi.org/project/django-cumulus/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-cumulus/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/richleland/django-cumulus/"
    },
    "release_url": "https://pypi.org/project/django-cumulus/1.0.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "An interface to Rackspace Cloud Files through Django.",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4228893,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60df1fef4f63f96426d49d569b728d23288df5b83311eff384e0805347ec77fc",
        "md5": "e7febe189b46e8915d5c977c26c5052e",
        "sha256": "bef7cbe0d66ffd4142291b9cd495d435ad5e7157e7266ce7b180f675771cd522"
      },
      "downloads": -1,
      "filename": "django-cumulus-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "e7febe189b46e8915d5c977c26c5052e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 123886,
      "upload_time": "2012-01-31T04:31:17",
      "upload_time_iso_8601": "2012-01-31T04:31:17.717419Z",
      "url": "https://files.pythonhosted.org/packages/60/df/1fef4f63f96426d49d569b728d23288df5b83311eff384e0805347ec77fc/django-cumulus-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}