{
  "info": {
    "author": "Rich Leland",
    "author_email": "rich@richleland.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Installation\n************\n\nTo install the latest release (currently 1.0.3) from PyPI using pip::\n\n    pip install django-cumulus\n\nTo install the development version using pip::\n\n    pip install -e git://github.com/richleland/django-cumulus.git#egg=django-cumulus\n\nAdd ``cumulus`` to ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        ...\n        'cumulus',\n        ...\n    )\n\nUsage\n*****\n\nAdd the following to your project's settings.py file::\n\n    CUMULUS_USERNAME = 'YourUsername'\n    CUMULUS_API_KEY = 'YourAPIKey'\n    CUMULUS_CONTAINER = 'ContainerName'\n    DEFAULT_FILE_STORAGE = 'cumulus.storage.CloudFilesStorage'\n\nAlternatively, if you don't want to set the DEFAULT_FILE_STORAGE, you can do the following in your models::\n\n    from cumulus.storage import CloudFilesStorage\n\n    cloudfiles_storage = CloudFilesStorage()\n\n    class Photo(models.Model):\n        image = models.ImageField(storage=cloudfiles_storage, upload_to='photos')\n        alt_text = models.CharField(max_length=255)\n\nThen access your files as you normally would through templates::\n\n    <img src=\"{{ photo.image.url }}\" alt=\"{{ photo.alt_text }}\" />\n\nOr through Django's default ImageField or FileField api::\n\n    >>> photo = Photo.objects.get(pk=1)\n    >>> photo.image.width\n    300\n    >>> photo.image.height\n    150\n    >>> photo.image.url\n    http://c0000000.cdn.cloudfiles.rackspacecloud.com/photos/some-image.jpg\n\nManagement command\n******************\n\ndjango-cumulus ships with a management command for synchronizing a local static media folder with a remote container. A few extra settings are required to make use of the command.\n\nAdd the following required settings::\n\n     # the name of the container to sync with\n    CUMULUS_STATIC_CONTAINER = 'MyStaticContainer'\n\n    # whether to use rackspace's internal private network\n    CUMULUS_USE_SERVICENET = False\n\n    # a list of files to exclude from sync\n    CUMULUS_FILTER_LIST = []\n\nInvoke the management command::\n\n    ./manage.py syncstatic\n\nYou can also perform a test run::\n\n    ./manage.py syncstatic -t\n\nFor a full list of available options::\n\n    ./manage.py help syncstatic\n\nContext Processor\n*****************\n\ndjango-cumulus includes an optional context_processor for accessing the full CDN_URL of any container files from your templates.\n\nThis is useful when you're using Cloud Files to serve you static media such as css and javascript and don't have access to the ``ImageField`` or ``FileField``'s url() convenience method.\n\nAdd ``cumulus.context_processors.cdn_url`` to your list of context processors in your project's settings.py file::\n\n\n    TEMPLATE_CONTEXT_PROCESSORS = (\n        ...\n        'cumulus.context_processors.cdn_url',\n        ...\n    )\n\nNow in your templates you can use {{ CDN_URL }} to output the full path to local media::\n\n    <link rel=\"stylesheet\" href=\"{{ CDN_URL }}css/style.css\">\n\nRequirements\n************\n\n* Django >= 1.1.4\n* python-cloudfiles >= 1.7.8\n\nTests\n*****\n\nTo run the tests, add ``cumulus`` to your ``INSTALLED_APPS`` and run::\n\n    django-admin.py test cumulus\n\nThis will upload two very small files to your container and delete them when the tests have finished running.\n\nIssues\n******\n\nTo report issues, please use the issue tracker at https://github.com/richleland/django-cumulus/issues.",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/django-cumulus/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/richleland/django-cumulus/",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-cumulus",
    "package_url": "https://pypi.org/project/django-cumulus/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-cumulus/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/richleland/django-cumulus/"
    },
    "release_url": "https://pypi.org/project/django-cumulus/1.0.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "An interface to Rackspace Cloud Files through Django.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4228893,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff8e9a18d4306cbddd38fdbf5090a7a1ae38a364abfbf4e1c35f2c28708599f6",
        "md5": "37e4145754ca1c88226aac8e060eb64b",
        "sha256": "30d2fe54f6873a0db7369742bdaa1b72a5178c750551ecf66d43306879143b98"
      },
      "downloads": -1,
      "filename": "django-cumulus-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "37e4145754ca1c88226aac8e060eb64b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 83464,
      "upload_time": "2011-09-02T21:59:17",
      "upload_time_iso_8601": "2011-09-02T21:59:17.307673Z",
      "url": "https://files.pythonhosted.org/packages/ff/8e/9a18d4306cbddd38fdbf5090a7a1ae38a364abfbf4e1c35f2c28708599f6/django-cumulus-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}