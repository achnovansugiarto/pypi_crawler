{
  "info": {
    "author": "Maptek",
    "author_email": "support@maptek.com.au",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: Other/Proprietary License",
      "Natural Language :: English",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "# maptekomf.maptek\nProvides support for inter-operability with the Open Mining Format (OMF) and\nMaptek applications which share an underlying infrastructure. This includes\nBlastLogic, PointStudio and Vulcan GeologyCore.\n\nThe sister package maptekomf.vulcan provides support for inter-operability with\nthe Open Mining Format (OMF) and Maptek Vulcan which does not share the same\nunderlying infrastructure of Maptek's other applications.\n\n## Usage\nThis package can be installed as a Python package and used to develop\nin-house tooling for working with Open Mining Format (OMF) and Maptek\napplications.\n\nAlternatively, it can be provided alongside workflows to enable the Maptek\nWorkbench to provide custom import/export functionality for OMF.\n\n### Set-up workflows\n\n#### Method 1\n1. Install the maptekomf package\n1. Copy/download the workflows to a suitable folder\n1. Run the workflows.\n\n#### Method 2\n1. Download the `maptekomf_with_workflows.zip` archive.\n1. Extract the archive\n1. Run the workflows from the extracted location.\n\n#### Follow-up\nIf you are wishing to export from an application other than PointStudio,\nyou will need to edit the workflow to use the `Get Active Selection` component\nfrom the other application.\n\n### Within a script\n\n#### Import a file to project\n\nThe following script will import a file called `test_file.omf` into the\nMaptek project at the path `/scrapbook/omf/test_file`.\n\n```python\nfrom mapteksdk.project import Project\n\nfrom maptekomf.maptek.importer import omf_to_project\n\nif __name__ == '__main__':\n    with Project() as project:\n        omf_to_project('test_file.omf' project, '/scrapbook/omf/test_file',\n                       overwrite=False)\n```\n\n#### Export selection to OMF\n\nThe following script will export selected objects  into a file called\n`exported.omf`. It will however not skip over any unsupported objects.\n\n```python\nfrom mapteksdk.project import Project\n\nfrom maptekomf.maptek.importer import omf_to_project\n\nif __name__ == '__main__':\n    with Project() as project:\n        omf_to_project(project, project.get_selected(), 'exported.omf')\n```\n\n## Supported application versions\n* Maptek PointStudio 2021 & 2021.1\n* Maptek Vulcan GeologyCore 2021\n\nThe recommended version of the mapteksdk to use this against is mapteksdk-1.3\nwhich is released as part of Maptek Extend Plugins 2021.2. This version that\nintroduced support for Maptek Vulcan GeologyCore.\n\nYou may find it will also work with 1.2 (from 2021.1) and 1.1 (from 2021) for\nPointStudio and BlastLogic however no guarantee or support is offered for that\nsituation.\n\n## Implementation defined behaviour\nThis OMF importer/exporter implementation has the following behaviour that\nmay be different to how other implementations, scripts and applications handle\na given OMF project file. This is done in places where the OMF specification\ndoes not specify how such cases should be handled, especially in cases\nwhere data can't be represented natively in the data format.\n\n### Naming\nThe name of objects in an OMF project are not required to be unique.\nThe names of objects in a given container in a Maptek project must be\nunique.\n\nAs a result, during import if a duplicate name is detected a numerical suffix,\nwill be added. When adding this suffix, if there is an object in the OMF\nproject with that name, it will be skipped even if that element/object won't be\nimported. For example, if an OMF file contained three objects, two called\n\"point_set\" and a third called \"point_set 2\" then the first will be named\n\"point_set\", the second will be named \"point set 3\" so that it does not clash\nwith \"point_set 2\" and the last will be called \"point_set 2\". The name\n\"point_set 1\" will not be used when selecting a unique name; \"point_set\" is\nconsidered the first object.\n\n### Point colouring\nMaptek applications built on a shared underlying infrastructure have the\nconcept of per-point colour.\n\nIf the colours are not all the same when exporting, then they will be written\nas an attribute of type `omf.ColorData` on the object called \"point colours\".\n\nWhen importing, the \"point colours\" attribute will be recognised and read in\nas a colour array. Maptek applications only support one set of colours per\nprimitive (primitive being point, edge, cell or facet). Multiple colour array\nattributes are not supported.\n\n### Cell visibility\nThe Maptek object type `GridSurface` has the concept of point visibility, which\nis a way to hide cells that are not relevant. For example, they may fall\noutside the data range (i.e. the area that was measured/recorded). This is\nachieved by saving it as an attribute for vertices called \"visibility\" in OMF\nand recognising the attribute in the importer.\n\n## Limitations\n\n* Maptek objects of type `Polyline` and `Polygon` will be re-imported as\n  `EdgeNetwork`. There is potential here to improve this situation.\n* Objects cannot have primitive attributes of type \"date time\" in Maptek\n  applications. Importing an OMF element with date time attributes is not\n  supported.\n* The Maptek object type `GridSurface` does not support textures. This means\n  textures for gridded surfaces in an OMF file won't be imported.\n* The Maptek object type `GridSurface` does not support cell colouring.\n* Exporting a `GridSurface` object from a Maptek project may not work, as\n  the `GridSurface` object is more general than the gridded surface object in\n  OMF.\n* Exporting a textured `Surface` from a Maptek project to OMF may not work,\n  as texturing in Maptek applications is more sophisticated than what OMF\n  supports.\n* Only one colour map (legend) will be imported per object. Maptek applications\n  only allow a single colour map to be assigned to an object.\n* Importing colour maps on edge, cell and facet attributes is not supported in\n  the 2021 versions of Maptek applications. If there are strings in the legend,\n  then the strings will still be imported as an edge, cell or facet attribute.\n* Only specific cases of `omf.MappedData` will be imported; at this time, this\n  means string and colour. Only data that was found in the sample data file\n  provided by the OMF GitHub project is handled, as the full scope of what\n  is possible appears to be unbounded.\n* Primitive visibility is not preserved in the export. This means certain\n  types of filtering in Maptek applications will be lost on export.\n* Container hierarchy will not be preserved, as OMF has no concept of\n  containers or folders within its file format. This may be subject to change\n  depending on what other OMF applications handle (for example using\n  backslashes in the names of objects to define a hierarchy).\n\n## Future work\n* Import and export for block models.\n  Support may be added on request; however the plan is to wait until this\n  package is updated to use omf-2.0.\n* Upgrade omf package from 1.0 to 2.0.\n* Add handling for identifying `Polyline` and `Polygon`, so they aren't\n  imported as `EdgeNetwork`.\n\n## Distribution\nThis project is typically distributed as a Python wheel through PyPi.\nHowever, other mechanisms exist.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.maptek.com",
    "keywords": "mining data interchange",
    "license": "Maptek End User Licence Agreement",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maptekomf-maptek",
    "package_url": "https://pypi.org/project/maptekomf-maptek/",
    "platform": "",
    "project_url": "https://pypi.org/project/maptekomf-maptek/",
    "project_urls": {
      "Documentation": "https://help.maptek.com/mapteksdk/",
      "Homepage": "https://www.maptek.com",
      "Support": "https://www.maptek.com/support/index.html"
    },
    "release_url": "https://pypi.org/project/maptekomf-maptek/1.0/",
    "requires_dist": [
      "mapteksdk (<1.4.0,>=1.2.0)",
      "pillow (<9.1.0,>=7.0.0)",
      "omf (==1.0.1)"
    ],
    "requires_python": ">=3.7, <3.9",
    "summary": "Provides interoperability between Maptek SDK and OMF",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14930484,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33dbc3a7bfdee228c3a5ec40ac0674fa723e19c069f2d7aabc090b0e132d5136",
        "md5": "e5e0df615693c6f69da4aa0cf0ad461b",
        "sha256": "3c030d2bc6b92cde057aad29a78578f09ed23b6d2e28c61adeeb49c824c1612e"
      },
      "downloads": -1,
      "filename": "maptekomf_maptek-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e5e0df615693c6f69da4aa0cf0ad461b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7, <3.9",
      "size": 25998,
      "upload_time": "2022-01-24T00:13:48",
      "upload_time_iso_8601": "2022-01-24T00:13:48.100133Z",
      "url": "https://files.pythonhosted.org/packages/33/db/c3a7bfdee228c3a5ec40ac0674fa723e19c069f2d7aabc090b0e132d5136/maptekomf_maptek-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}