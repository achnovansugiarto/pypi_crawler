{
  "info": {
    "author": "blag",
    "author_email": "blag@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Communications :: Email",
      "Topic :: Security :: Cryptography"
    ],
    "description": ".. image:: https://travis-ci.org/blag/django-secure-mail.svg?branch=master\n    :target: https://travis-ci.org/blag/django-secure-mail\n\n.. image:: https://coveralls.io/repos/github/blag/django-secure-mail/badge.svg\n    :target: https://coveralls.io/github/blag/django-secure-mail\n\n\nCreated by `blag <http://github.com/blag>`_. Forked from PR\n`#39 <https://github.com/stephenmcd/django-email-extras/pull/39>`_ and\n`#40 <https://github.com/stephenmcd/django-email-extras/pull/40>`_ of\n`django-email-extras <https://github.com/stephenmcd/django-email-extras>`_ by\n`Stephen McDonald <http://twitter.com/stephen_mcd>`_.\n\nIntroduction\n============\n\ndjango-secure-mail is a Django reusable app providing a mail backend to send\nPGP signed and encrypted emails. When configured to send PGP encrypted email,\nthe ability for admin users to manage PGP keys is also provided.\n\n\nDependencies\n============\n\n* `python-gnupg <https://bitbucket.org/vinay.sajip/python-gnupg>`_ is\n  required for sending PGP encrypted email.\n\n\nInstallation\n============\n\nThe easiest way to install django-secure-mail is directly from PyPi\nusing `pip <https://pip.pypa.io/en/stable/>`_ by running the command\nbelow:\n\n.. code-block:: bash\n\n    $ pip install -U django-secure-mail\n\nOtherwise you can download django-secure-mail and install it directly\nfrom source:\n\n.. code-block:: bash\n\n    $ python setup.py install\n\n\nConfiguration\n=============\n\nOnce installed, first add ``secure_mail`` to your ``INSTALLED_APPS``\nsetting and run the migrations.\n\nThen set ``EMAIL_BACKEND`` in your settings module to\n``'secure_mail.backends.EncryptingSmtpEmailBackend'`` or one of the development\nand testing backends listed in `Development and Testing`_.\n\nAnd finally, you can optionally configure `Sending PGP Signed Email`_.\n\n\nSending PGP Encrypted Email\n===========================\n\n`PGP explanation <https://en.wikipedia.org/wiki/Pretty_Good_Privacy>`_\n\nUsing `python-gnupg`_, two models are defined in ``secure_mail.models`` -\n``Key`` and ``Address`` which represent a PGP key and an email address for a\nsuccessfully imported key. These models exist purely for the sake of importing\nkeys and removing keys for a particular address via the Django\nAdmin.\n\nWhen adding a key, the key is imported into the key ring on\nthe server and the instance of the ``Key`` model is not saved. The\nemail address for the key is also extracted and saved as an\n``Address`` instance.\n\nThe ``Address`` model is then used when sending email to check for\nan existing key to determine whether an email should be encrypted.\nWhen an ``Address`` is deleted via the Django Admin, the key is\nremoved from the key ring on the server.\n\n\nSending PGP Signed Email\n========================\n\nAdding a private/public signing keypair is different than importing a\npublic encryption key, since the private key will be stored on the\nserver.\n\nThis project ships with a Django management command to generate and\nexport signing keys: ``email_signing_key``.\n\nYou first need to set the ``SECURE_MAIL_SIGNING_KEY_DATA`` option in your\nproject's ``settings.py``. This is a dictionary that is passed as keyword arguments directly to ``GPG.gen_key()``, so please read and understand all of\nthe available `options in their documentation <https://pythonhosted.org/python-gnupg/#generating-keys>`_. The default settings are:\n\n.. code-block:: python\n\n    SECURE_MAIL_SIGNING_KEY_DATA = {\n        'key_type': \"RSA\",\n        'key_length': 4096,\n        'name_real': settings.SITE_NAME,\n        'name_comment': \"Outgoing email server\",\n        'name_email': settings.DEFAULT_FROM_EMAIL,\n        'expire_date': '2y',\n    }\n\nYou may wish to change the ``key_type`` to a signing-only type of key,\nsuch as DSA, or the expire date.\n\nOnce you are content with the signing key settings, generate a new\nsigning key with the ``--generate`` option:\n\n.. code-block:: bash\n\n    $ python manage.py email_signing_key --generate\n\nTo work with specific keys, identify them by their fingerprint\n\n.. code-block:: bash\n\n    $ python manage.py email_signing_key 7AB59FE794A7AC12EBA87507EF33F601153CFE28\n\nYou can print the private key to your terminal/console with:\n\n.. code-block:: bash\n\n    $ python manage.py email_signing_key 7AB59FE794A7AC12EBA87507EF33F601153CFE28 --print-private-key\n\nAnd you can upload the public signing key to one or more specified\nkeyservers by passing the key server hostnames with the ``-k`` or\n``--keyserver`` options:\n\n.. code-block:: bash\n\n    $ python manage.py email_signing_key 7AB59FE794A7AC12EBA87507EF33F601153CFE28 -k keys.ubuntu.com keys.redhat.com -k pgp.mit.edu\n\nYou can also perform all tasks with one command:\n\n.. code-block:: bash\n\n    $ python manage.py email_signing_key --generate --keyserver pgp.mit.edu --print-private-key\n\nUse the ``--help`` option to see the complete help text for the command.\n\n\nOptions\n=======\n\nThere are a few settings you can configure in your project's\n``settings.py`` module:\n\n* ``SECURE_MAIL_USE_GNUPG`` - Boolean that controls whether the PGP\n  encryption features are used. Defaults to ``True`` if\n  ``SECURE_MAIL_GNUPG_HOME`` is specified, otherwise ``False``.\n* ``SECURE_MAIL_GNUPG_HOME`` - String representing a custom location\n  for the GNUPG keyring.\n* ``SECURE_MAIL_GNUPG_ENCODING`` - String representing a gnupg encoding.\n  Defaults to GNUPG ``latin-1`` and could be changed to e.g. ``utf-8``\n  if needed.  Check out\n  `python-gnupg docs <https://pythonhosted.org/python-gnupg/#getting-started>`_\n  for more info.\n* ``SECURE_MAIL_ALWAYS_TRUST_KEYS`` - Skip key validation and assume\n  that used keys are always fully trusted.\n* ``SECURE_MAIL_SIGNING_KEY_DATA`` - A dictionary of key options for generating\n  new signing keys.\n* ``SECURE_MAIL_KEY_FINGERPRINT`` - The fingerprint of the key to use when\n  signing outgoing mail, must exist in the configured keyring.\n\n\nDevelopment and Testing\n=======================\n\nThis package provides a backend mixin if you wish to extend the backend or create a custom backend of your own.\n\nExample:\n\n.. code-block:: python\n\n    class EncryptingLocmemEmailBackend(EncryptingEmailBackend, LocmemBackend):\n        pass\n\nIn addition to the ``EncryptingSmtpEmailBackend``, backends that mixin every\nother built-in Django backend are provided. These are:\n\n* ``EncryptingConsoleEmailBackend``\n* ``EncryptingLocmemEmailBackend``\n* ``EncryptingFilebasedEmailBackend``\n\n\nAlternative Django Apps\n=======================\n\nOther Django apps with similar functionality are:\n\n* `django-email-extras <https://github.com/stephenmcd/django-email-extras>`_ -\n  Provides two functions for sending PGP encrypted, multipart emails using\n  Django's template system. Also provides a mail backend that displays HTML\n  mail in the browser during development.\n* `django-gnupg-mails <https://github.com/jandd/django-gnupg-mails>`_ -\n  Provides a ``GnuPGMessage`` (subclass of Django's ``EmailMessage``) to send\n  PGP/MIME signed email.\n\nBoth of those apps require third party app developers to \"opt-in\" to sending\nencrypted mail. This project automatically encrypts and signs all outgoing mail\nfor all apps.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blag/django-secure-mail",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-secure-mail",
    "package_url": "https://pypi.org/project/django-secure-mail/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-secure-mail/",
    "project_urls": {
      "Homepage": "https://github.com/blag/django-secure-mail"
    },
    "release_url": "https://pypi.org/project/django-secure-mail/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django reusable app providing the ability to send PGP encrypted and multipart emails using the Django templating system.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8132552,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91037edd19928311c20d4775d50aeb024583e309c3b90862a6a2874c9c4f86e2",
        "md5": "a89abe1fd088c45c2f374da54658d83a",
        "sha256": "a83fa4f56650928db10944f03236af2e9649a204a3da42c8bc21545a6f35797e"
      },
      "downloads": -1,
      "filename": "django-secure-mail-1.0.0.tar.gz",
      "has_sig": true,
      "md5_digest": "a89abe1fd088c45c2f374da54658d83a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26370,
      "upload_time": "2017-04-18T15:15:32",
      "upload_time_iso_8601": "2017-04-18T15:15:32.405307Z",
      "url": "https://files.pythonhosted.org/packages/91/03/7edd19928311c20d4775d50aeb024583e309c3b90862a6a2874c9c4f86e2/django-secure-mail-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}