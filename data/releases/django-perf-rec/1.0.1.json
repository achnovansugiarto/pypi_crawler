{
  "info": {
    "author": "YPlan",
    "author_email": "adam@yplanapp.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "===============\ndjango-perf-rec\n===============\n\n.. image:: https://img.shields.io/pypi/v/django-perf-rec.svg\n    :target: https://pypi.python.org/pypi/django-perf-rec\n\n.. image:: https://img.shields.io/travis/YPlan/django-perf-rec/master.svg\n        :target: https://travis-ci.org/YPlan/django-perf-rec\n\n\"Keep detailed records of the performance of your Django code.\"\n\n**django-perf-rec** is like Django's ``assertNumQueries`` on steroids. It lets\nyou track the individual queries and cache operations that occur in your code.\nUse it in your tests like so:\n\n.. code-block:: python\n\n    def test_home(self):\n        with django_perf_rec.record():\n            self.client.get('/')\n\nIt then stores a YAML file alongside the test file that tracks the queries and\noperations, looking something like:\n\n.. code-block:: yaml\n\n    MyTests.test_home:\n    - cache|get: home_data\n    - db: 'SELECT ... FROM myapp_table WHERE (myapp_table.id = #)'\n    - db: 'SELECT ... FROM myapp_table WHERE (myapp_table.id = #)'\n\nThen if you re-run the test and the performance record doesn't match, the test\nwill fail. Magic! Just check the YAML file in alongside your test and you have\nunbreakable performance with much better clues about any regressions compared\nto `assertNumQueries`.\n\nInstallation\n============\n\nUse **pip**:\n\n.. code-block:: bash\n\n    pip install django-perf-rec\n\nRequirements\n============\n\nTested with all combinations of:\n\n* Python: 2.7, 3.5\n* Django: 1.9\n\nAPI\n===\n\n``record(file_name=None, record_name=None)``\n--------------------------------------------\n\nReturn a context manager that will be used for a single performance test.\n`file_name` is the name of the performance file to be used, and `record_name`\nis the name of the record inside that file to use. If either of these names is\n`None`, the code assumes you are inside a Django `TestCase` and uses magic\nstack inspection to find that test case, and set `file_name` to the name of the\nfile containing that class with `.py` replaced by `.perf.yml`, and\n`record_name` will be named after the test case + name, plus an optional\ncounter if you invoke `record` multiple times inside the same test method.\n\nWhilst open, the context manager tracks all DB queries on all connections, and\nall cache operations on all defined caches. It names the connection/cache in\nthe tracked operation it uses, except from for the `default` one.\n\nWhen the context manager exits, it will use the list of operations it has\ngathered. If the file `file_name` doesn't exist, or doesn't contain data for\nthe specific `record_name`, it will be created and saved and the test will pass\nwith no assertions. However if the record **does** exist inside the file, the\ncollected record will be compared with the original one, and if different, an\n``AssertionError`` will be raised. This currently has an ugly message but if\nyou're using `pytest <http://pytest.org/>`_ its assertion rewriting will be\nused.\n\nExample:\n\n.. code-block:: python\n\n    import django_perf_rec\n\n    from app.models import Author\n\n    class AuthorPerformanceTests(TestCase):\n\n        def test_special_method(self):\n            with django_perf_rec.record():\n                list(Author.objects.special_method())\n\n\n``TestCaseMixin``\n-----------------\n\nA mixin class to be added to your custom ``TestCase`` subclass so you can use\n**django-perf-rec** across your codebase without needing to import it in each\nindividual test file. It adds one method, ``record_performance()``, whose\nsignature is the same as ``record()`` above.\n\nExample:\n\n.. code-block:: python\n\n    # yplan/test.py\n    from django.test import TestCase as OrigTestCase\n    from django_perf_rec import TestCaseMixin\n\n    class TestCase(TestCaseMixin, OrigTestCase):\n        pass\n\n    # app/tests/models/test_author.py\n    from app.models import Author\n    from yplan.test import TestCase\n\n    class AuthorPerformanceTests(TestCase):\n\n        def test_special_method(self):\n            with self.record_performance():\n                list(Author.objects.special_method())\n\n\n\n\nHistory\n=======\n\nPending release\n---------------\n\n* New release notes go here\n\n1.0.1 (2016-09-20)\n------------------\n\n* Fix ``install_requires`` in ``setup.py``.\n\n\n1.0.0 (2016-09-19)\n------------------\n\n* Initial version with ``record()`` that can record database queries and cache\n  operations and error if they change between test runs.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/YPlan/django-perf-rec",
    "keywords": "D,j,a,n,g,o",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-perf-rec",
    "package_url": "https://pypi.org/project/django-perf-rec/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-perf-rec/",
    "project_urls": {
      "Homepage": "https://github.com/YPlan/django-perf-rec"
    },
    "release_url": "https://pypi.org/project/django-perf-rec/1.0.1/",
    "requires_dist": [
      "Django",
      "PyYAML",
      "patchy",
      "six",
      "sqlparse"
    ],
    "requires_python": "",
    "summary": "Keep detailed records of the performance of your Django code.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024236,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "886ff68c7938f413f009277bf4f114787f6af83fd29e6e83fbc16484822b93ea",
        "md5": "3e5ed5aea648cb347326c6758b18a249",
        "sha256": "bdb22167d0f8c58417d5700928b5d317ae70bdd2f2e75bd60730126c8c084f0a"
      },
      "downloads": -1,
      "filename": "django_perf_rec-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e5ed5aea648cb347326c6758b18a249",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 21826,
      "upload_time": "2016-09-20T09:41:39",
      "upload_time_iso_8601": "2016-09-20T09:41:39.318526Z",
      "url": "https://files.pythonhosted.org/packages/88/6f/f68c7938f413f009277bf4f114787f6af83fd29e6e83fbc16484822b93ea/django_perf_rec-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66361e9fdf494582098aab0b8411c0d23a8c11936efb52b4290d70c7837fd3fe",
        "md5": "2ed0498eb92f346f918c8ccee694a5a2",
        "sha256": "50bcbaf0e970bad09352824a15ae96e964f9a94d32c646b53d6795df2f6d3e38"
      },
      "downloads": -1,
      "filename": "django-perf-rec-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2ed0498eb92f346f918c8ccee694a5a2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14230,
      "upload_time": "2016-09-20T09:41:42",
      "upload_time_iso_8601": "2016-09-20T09:41:42.634161Z",
      "url": "https://files.pythonhosted.org/packages/66/36/1e9fdf494582098aab0b8411c0d23a8c11936efb52b4290d70c7837fd3fe/django-perf-rec-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}