{
  "info": {
    "author": "ZouYJ",
    "author_email": "boyzouyj@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Flow-based process just got Pythonic\n===============================================================================\n\n**dtree** is a library for processing flow-based logical system with complicated\nchain of if-else blocks just like handling a flowchart.\n\nExample\n----------------------------------------------------------------------------\n\nHere is a quick example to get a feeling of **dtree**. Given information of a student like\n```\nstudent = {\n    'age': 15,\n    'interest': 'reading',\n    'gender': 'female',\n}\n```\nfigure out what gift to give with the following logics:\n```\n+++root:\n|      +++age < 12:\n|      |      +++interest = sports:\n|      |      |      ---gender = female --> give note\n|      |      |      ---ELSE --> give football\n|      |      ---ELSE --> give book\n|      +++age >= 15:\n|      |      ---interest = writing --> give note\n|      |      ---ELSE --> give book\n|      +++ELSE:\n|      |      ---gender = male --> give football\n|      |      ---ELSE --> give book\n```\n\n```python\nfrom dtree import *\n\nstudent = {\n    'age': 15,\n    'interest': 'reading',\n    'gender': 'female',\n}\n\nage = ValueAccessor(\"age\", lambda student: student['age'])\ninterest = ValueAccessor(\"interest\", lambda student: student['interest'])\ngender = ValueAccessor(\"gender\", lambda student: student['gender'])\n\nis_male = gender.eq(\"male\")\nis_female = gender.eq(\"female\")\n\n\ndef give(item):\n    print(\"give %s\" % item)\n\n\ngive_book = ToAction(lambda student: give(\"book\"), \"give book\")\ngive_football = ToAction(lambda student: give(\"football\"), \"give football\")\ngive_note = ToAction(lambda student: give(\"note\"), \"give note\")\n\nrule = DTree(Node(\n    (age.lt(12), Node(\n        (interest.eq(\"sports\"), Node(\n            (is_female, give_note),\n            (else_, give_football),\n        )),\n        (else_, give_book),\n    )),\n    (age.ge(15), Node(\n        (interest.eq(\"writing\"), give_note),\n        (else_, give_book),\n    )),\n    (else_, Node(\n        (is_male, give_football),\n        (else_, give_book),\n    )),\n))\n\nrule.run(student)  # give book\n```\n\nInstallation\n-------------------------------------------------------------------------------\n\nUse `pip <http://pip-installer.org>`_ or easy_install::\n\n    pip install dtree-python\n\nAlternatively, you can just drop ``dtree.py`` file into your projectâ€”it is\nself-contained.\n\n- **dtree** is tested with Python 2.6, 2.7, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7 and PyPy.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/boy-zyj/dtree-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtree-python",
    "package_url": "https://pypi.org/project/dtree-python/",
    "platform": "any",
    "project_url": "https://pypi.org/project/dtree-python/",
    "project_urls": {
      "Homepage": "https://github.com/boy-zyj/dtree-python"
    },
    "release_url": "https://pypi.org/project/dtree-python/1.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "a little flow-based process engine implementation",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7202568,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a30cd55ba101112a5801d8657d9a09b1cc1224c6ecad14ecffafc9651b218b38",
        "md5": "96e47e35ccaf5f267e4e1a3fd7e3f08b",
        "sha256": "e0bf05eae925c64ac71038d86e3befb085e731850c5c7f17978dc780ba66a267"
      },
      "downloads": -1,
      "filename": "dtree_python-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "96e47e35ccaf5f267e4e1a3fd7e3f08b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6059,
      "upload_time": "2020-05-09T07:08:04",
      "upload_time_iso_8601": "2020-05-09T07:08:04.125199Z",
      "url": "https://files.pythonhosted.org/packages/a3/0c/d55ba101112a5801d8657d9a09b1cc1224c6ecad14ecffafc9651b218b38/dtree_python-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1edd0ce9ca38a1c371a01d619ba7fba25133c73ef48817f5f6d49d95521f0839",
        "md5": "fd5b9b3586f9b8bda12c71420c3dc232",
        "sha256": "95b3ab756b5fd8d1d18d48145943c82975898e2b4d39056ed45425c49b6c5760"
      },
      "downloads": -1,
      "filename": "dtree-python-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "fd5b9b3586f9b8bda12c71420c3dc232",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5268,
      "upload_time": "2020-05-09T07:08:05",
      "upload_time_iso_8601": "2020-05-09T07:08:05.966466Z",
      "url": "https://files.pythonhosted.org/packages/1e/dd/0ce9ca38a1c371a01d619ba7fba25133c73ef48817f5f6d49d95521f0839/dtree-python-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}