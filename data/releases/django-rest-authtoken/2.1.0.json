{
  "info": {
    "author": "Pascal Wichmann",
    "author_email": "wichmannpas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django-rest-authtoken\nA simple token-based authentication backend for Django Rest Framework that stores cryptographically hashed tokens on the server-side. Unlike the upstream auth token implementation of Django Rest Framework, each login generates a new unique token, providing the ability to revoke (or log out) individual sessions rather than all at onces.\nFurthermore, only cryptographically hashed values of the tokens are stored on the server, thus a leak of the server-side auth token table does not allow an attacker to use any authenticated sessions.\n\n\n## Installation\n\nThis package can be installed via `pip`:\n\n```bash\npip install django-rest-authtoken\n```\n\nTo use it, add it to `INSTALLED_APPS` in the Django settings:\n\n```python\nINSTALLED_APPS = [\n    ...\n    'rest_authtoken',\n    ...\n]\n```\n\n In addition, the package's urls need to be added to the main urlconf:\n\n```python\nurlpatterns = [\n    ...,\n    path('auth/', include('rest_authtoken.urls')),\n    ...,\n]\n```\n\nThis will add the URLs `/auth/login/`, `/auth/logout/`, `/auth/register/` (if registration is enabled), and `/auth/register/confirm/<token:str>` (if registration and email confirmation are enabled).\n\nTo allow authentication using an `Authorization: Token XXXX` HTTP header, the following configuration is required:\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_authtoken.auth.AuthTokenAuthentication',\n    ),\n}\n```\n\n## Usage Examples\n\n### Login\n\nLogin:\n\n```bash\ncurl http://127.0.0.1:8000/auth/login/ --data 'username=john&password=foobar123' -v\n...\n< HTTP/1.1 200 OK\n...\n{\"token\":\"As3pLIG8WeltLyZxoRcjQqu7wqPXhzFOMuxqFJjXa-Pb4tIMpzh-Ti21Nah4r38P\"}\n```\n\nLogin (with specified `USER_SERIALIZER`):\n\n```bash\ncurl http://127.0.0.1:8000/auth/login/ --data 'username=john&password=foobar123' -v\n...\n< HTTP/1.1 200 OK\n...\n{\"token\":\"As3pLIG8WeltLyZxoRcjQqu7wqPXhzFOMuxqFJjXa-Pb4tIMpzh-Ti21Nah4r38P\",\"user\":{\"id\":3,\"username\":\"john\"}}\n```\n\nThe supplied token has to be added to all further API requests in the `Authorization` HTTP header.\n\n### Logout\n\n```bash\ncurl http://127.0.0.1:8000/auth/logout/ -v -H 'Authorization: Token As3pLIG8WeltLyZxoRcjQqu7wqPXhzFOMuxqFJjXa-Pb4tIMpzh-Ti21Nah4r38P' -XDELETE\n...\n> Authorization: Token g8txWxa2N-u97E-VD2E6SPozZWLLePxeLHu1FsXo3J6HZx1o7ldLkQ-kosk0Vgq6\n...\n< HTTP/1.1 204 No Content\n```\n\n### Registration\n\nRegistration (with disabled email confirmation):\n\n```bash\ncurl http://127.0.0.1:8000/auth/register/ --data 'username=john&password=foobar123' -v\n...\n< HTTP/1.1 201 Created\n...\n{\"success\":true}\n```\n\nIf the user exists already:\n\n```bash\ncurl http://127.0.0.1:8000/auth/register/ --data 'username=john&password=foobar123' -v\n...\n< HTTP/1.1 400 Bad Request\n...\n{\"username\":[\"A user with that username already exists.\"]}\n```\n\n## User Serializer\n\nAn optional user serializer can be specified in the settings. If specified, a `user` attribute will be included in successful authentication responses containing the serialized authenticated user. Settings example:\n\n```python\nUSER_SERIALIZER = 'user.serializers.OwnUserSerializer'\n```\n\n## Registration\n\nThe registration is disabled by default. To enable it, the following value is required in the Django settings:\n\n```python\nREGISTRATION_ENABLED = True\n```\n\n\n### Confirmation Email\nIt is possible to optionally enable an email confirmation. An email will be sent upon registration to the provided email address. For this to work, the user model needs to contain a `BooleanField` that stores whether the email address has been confirmed already. If email confirmation should be mandatory to be able to login, this can be set to the `active` field of the user (which is respected by django-rest-authtoken upon login).\n\nA minimal example of a compatible user model could look like this:\n\n```python\nclass User(AbstractUser):\n    email_confirmed = models.BooleanField(default=False)\n```\n\n*Warning:* Remember to reset the value of this field to `False` when the email address is changed. This could be achieved by adding the following methods to the user model (keep in mind that this does not catch all cases, for example if using the `QuerySet`'s `update()` method, or when `update_fields` are specified):\n\n```python\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._initial_email = self.email\n\n    def save(self, *args, **kwargs):\n        if self.email != self._initial_email:\n            self.email_confirmed = False\n        super().save(*args, **kwargs)\n```\n\nIn the Django settings file, the following configuration is required:\n\n```python\nREGISTRATION_EMAIL_CONFIRM = True\nREGISTRATION_EMAIL_CONFIRM_MODEL_FIELD = 'email_confirmed'\nREGISTRATION_EMAIL_CONFIRM_TOKEN_VALIDITY = timedelta(days=1)\nREGISTRATION_EMAIL = {\n    'BASE_URL': 'https://your-super-service.example.org',  # without trailing slash\n    'FROM': 'noreply@example.org',\n    'SUBJECT': 'Confirm your email address for FOOBAR',\n    'MESSAGE': '''Hello {username},\n    please visit the following link to confirm your email address: {url}\n    ''',\n}\n```\n\nThe `MESSAGE` attribute is formatted using the Python `format` function, supplying a `username` and a `url` value. The URL is built based on the supplied `BASE_URL` value in the `REGISTRATION_EMAIL` setting.\n\nFor internationalization, lazy translation methods (e. g., `gettext_lazy`) can be used. Strings will be translated to the language of the request which causes the email to be sent (if it is triggered by a request).\n\nTo send a confirmation email to a user,  `send_confirmation_email(user: get_user_model())` from `rest_authtoken.email_confirmation` can be called with the user object as argument.\n\nUpon successful confirmation, the user is redirected to the path `/`. This can be changed by setting the variable `REGISTRATION_CONFIRM_REDIRECT_PATH` to a different path in the settings.\nIf the provided token is invalid or expired, the user can be redirected to a path by setting `REGISTRATION_CONFIRM_INVALID_REDIRECT_PATH`. If the value is not specified, a 400 Bad Request is returned with a short and generic (plain-text and unformatted) error message.\n**Be careful:** These paths are not checked. You can configure absolute URLs to other domains as well. Make sure not to set this setting to any untrusted value.\n\n#### Manual Confirmation Emails From Django Admin\n\nIf you are using the Django admin app, you can define an action for your user model to manually (re)send confirmation emails to users by defining the following action and supplying it to the `ModelAdmin` (make sure to adapt the field names etc. to your own values):\n\n```python\ndef send_confirmation_emails(modeladmin, request, queryset):\n    for user in queryset.filter(email_confirmed=False):\n        send_confirmation_email(user)\n\n@admin.register(User)\nclass OwnUserAdmin(UserAdmin):\n    ...\n    actions = [send_confirmation_emails]\n    ...\n```\n\n*Attention:* This action may raise an `smtplib.SMTPException` for any of the supplied users, not sending any confirmation mails to users that would have been processed later.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wichmannpas/django-rest-authtoken",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-authtoken",
    "package_url": "https://pypi.org/project/django-rest-authtoken/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-authtoken/",
    "project_urls": {
      "Homepage": "https://github.com/wichmannpas/django-rest-authtoken"
    },
    "release_url": "https://pypi.org/project/django-rest-authtoken/2.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple token-based auth backend for Django Rest Framework storing cryptographically hashed tokens on server-side.",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11127356,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c78a5bbd5d5ddad170587394313261adbd9395938f59618508f64f2365c5a46",
        "md5": "074f2dd7b972a7fddec2900574ff50b3",
        "sha256": "e5d27b795587bab94b8a2c768adf8ffeb3cfbf785b7cd43014a69ae941d0204d"
      },
      "downloads": -1,
      "filename": "django_rest_authtoken-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "074f2dd7b972a7fddec2900574ff50b3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16081,
      "upload_time": "2020-08-23T09:36:07",
      "upload_time_iso_8601": "2020-08-23T09:36:07.455628Z",
      "url": "https://files.pythonhosted.org/packages/2c/78/a5bbd5d5ddad170587394313261adbd9395938f59618508f64f2365c5a46/django_rest_authtoken-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8db69b5082a5c1194a06552bd3472c254261095a8e6776957697fd9bc19869c5",
        "md5": "7423ecf4b6a0e59f89099f3db8aa6217",
        "sha256": "86f1260d029d5ea59e263a7b4429eea61603d5b26fb6c8930e541964b8d3c71a"
      },
      "downloads": -1,
      "filename": "django-rest-authtoken-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7423ecf4b6a0e59f89099f3db8aa6217",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8308,
      "upload_time": "2020-08-23T09:36:09",
      "upload_time_iso_8601": "2020-08-23T09:36:09.065136Z",
      "url": "https://files.pythonhosted.org/packages/8d/b6/9b5082a5c1194a06552bd3472c254261095a8e6776957697fd9bc19869c5/django-rest-authtoken-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}