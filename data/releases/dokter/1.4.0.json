{
  "info": {
    "author": "Fred de Gier",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Topic :: Security",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "# Dokter: the doctor for your Dockerfiles\n\nThe objective of `dokter` is to make your Dockerfiles better, it will make sure that your Dockerfiles:\n- build secure images\n- build smaller images\n- build faster\n- follow best practices\n- are pretty formatted\n\n## Rules information\n\nFor an overview of the rules see: [rules](docs/overview.md)\n\n## DevOps lifecycle\n\nTypically, a CI/CD pipeline consists of roughly the following steps:\n- lint code\n- build Docker image\n- run tests in Docker image\n- scan image for vulnerabilities (hopefully)\n- push image to registry\n- deploy image\n\n`Dokter` fits into the first stage and aims to prevent building an image that exposes credentials or contains \nvulnerabilities, which at the bare minimum saves CI/CD minutes.\n\nSeparate processes like container registry scanning will also run, but they may run only after an image has been pushed,\npotentially already exposing a vulnerable image to the public.\n\n![](docs/img/ci-cd-cycle.jpg)\n\n\n## Video explaining Dokter\n<figure class=\"video_container\">\n    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8aKScUQjMWY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</figure>\n\n## What makes Dokter special?\n\nGood question, `Dokter` is the byproduct of a much bigger effort, \n[GitLab AI Assist](https://about.gitlab.com/handbook/engineering/incubation/ai-assist/), as a first starting point, \nDockerfiles were chosen. A parser was developed to fully parse Dockerfiles in a format that is designed for machine \nlearning. In order to train ML models, there is a need to create a large, rich dataset and in order to do that a good \nanalysis of Dockerfiles is needed. Hence, the creation of `Dokter`. It will start improving your Dockerfiles from day 1\nbut will become much more powerful in the future, eventually it will automatically create Dockerfiles for you.\n\n\n## No telemetry\n\nNo worries, your Dockerfiles remain private, `Dokter` won't share any telemetry with GitLab, perhaps at some point in \ntime when machine learning models would benefit from user feedback, the option to provide anonymous feedback may be, \nwith plenty of user awareness and opt-in, introduced.\n\n## Dynamic parser  \n\nThe parser behind `Dokter` has been designed with data and ML in mind, it supports parsing of all Docker instructions \nand adds support for comments, both actual comments and commented out code. \n\nThe parser also supports dynamic analysis, it's context aware, example:\n\n```dockerfile\nCOPY . /app\n```\n\nIf a static analysis was performed, it would approve the above instruction, `Dokter` however will actually list the \nfiles that are in `.` and analyze them against known files to contain credentials, but also filter against your \n`.dockerignore` file.\n\n## Usage\n\nThere are a couple of ways you can use `Dokter`:\n\n- Local\n- CI/CD\n\nIt is suggested to always use both, but at least run it where you are actually building and publishing your images.\n\n### Local usage\n\nYou will need to install `Dokter` from `pip`\n```bash\npip install dokter \n\n# Or from GitLab\npip install --upgrade dokter --extra-index-url https://gitlab.com/api/v4/projects/36078023/packages/pypi/simple\n\ndokter -d path/to/Dockerfile\n```\nIf you want more information you can either run it in verbose mode or ask to explain a specific rule\n```bash\n# Explain rule dfa001\ndokter -e dfa001\n\n# Run in verbose mode (this will be a lot of text)\ndokter -v -d path/to/Dockerfile\n```\n\nYou can also use docker:\n\n```bash\ndocker run -it -v $(pwd):/app registry.gitlab.com/gitlab-org/incubation-engineering/ai-assist/dokter/dokter:latest dokter -d docter.Dockerfile\n```\n\n### Dockerfile formatting and auto-correction\n\n`Dokter` is capable of creating a pretty formatted Dockerfile, as well as autocorrecting some errors found by the \nanalyzer. It can either show `-s` or write `-w` the file, in case of writing it will overwrite the given Dockerfile, so\nit's easier to review and commit changes. \n\nShell commands will be analyzed using [ShellCheck](http://shellcheck.net) and where possible an error will be corrected\nautomatically.\n\n```bash\ndokter -d Dockerfile -w\n```\n\nIn case of showing, `Dokter` will first output the analysis report followed by the Dockerfile, at this moment it will \noutput a file with some errors corrected but not all. \n\n```bash\ndokter -d Dockerfile -s\n```\n\nYou can also combine `-s` and `-w` to both show and write the Dockerfile.\n\n\n### CI/CD\n\nUsage in GitLab CI example:\n\n```yaml\ndokter:\n  image: registry.gitlab.com/gitlab-org/incubation-engineering/ai-assist/dokter/dokter:latest\n  stage: lint\n  script:\n    - dokter -d Dockerfile\n```\n\n### GitLab Code Quality\n\nTo use the output in GitLab code quality you can use below as an example:\n```yaml\ndokter:\n  image: registry.gitlab.com/gitlab-org/incubation-engineering/ai-assist/dokter/dokter:latest\n  stage: lint\n  script:\n    - dokter -d dokter.Dockerfile --gitlab-codequality\n  artifacts:\n    name: \"$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG\"\n    expire_in: 1 day\n    when: always\n    reports:\n      codequality:\n        - \"dokter-$CI_COMMIT_SHA.json\"\n    paths:\n      - \"dokter-$CI_COMMIT_SHA.json\"\n```\n\n### Automatic merge requests with resolutions\n\nBelow is an example where `Dokter` is used to analyze a Dockerfile and autocorrect it, the output is then committed to a \nnew branch with the following name structure `dokter/<source_branch_name>` and a merge request will be created and\nassigned to the user that started the pipeline. \n\n```yaml\ndokter:\n  image: registry.gitlab.com/gitlab-org/incubation-engineering/ai-assist/dokter/dokter:latest\n  stage: lint\n  variables:\n    DOKTER_DOCKERFILE: Dockerfile\n  before_script:\n    - mkdir -p ~/.ssh && echo \"$DOKTER_SSH_KEY\" > ~/.ssh/id_rsa && chmod -R 700 ~/.ssh\n  script:\n    - dokter -d $DOKTER_DOCKERFILE --gitlab-codequality -w\n  after_script:\n    - bash /create-mr.sh\n  artifacts:\n    name: \"$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG\"\n    expire_in: 1 day\n    when: always\n    reports:\n      codequality:\n        - \"dokter-$CI_COMMIT_SHA.json\"\n    paths:\n      - \"dokter-$CI_COMMIT_SHA.json\"\n  rules:\n    # Very important to prevent a loop :-)\n    - if: $CI_COMMIT_REF_NAME !~ /^dokter/ && $CI_PIPELINE_SOURCE == \"merge_request_event\"\n```\n\n### Gotcha's\n\nBelow are some subjects that could raise questions, errors. \n\n#### Jinja templating\n\nJinja is ignored, what will happen is, the templated lines will get ignored and the Docker instructions \nwill be parsed. \n\nExample:\n```Dockerfile\nFROM scratch\n\n{% if something %} # This line will be considered empty\nRUN echo \"some command\" # This line will be parsed\n{% endif %} # This line will be considered empty\n```\n\n#### Here strings (EOF)\n\nAt this moment if you have a `here string` in your bash command, the Dockerfile will fail, it can not be parsed. Support\nwill be added in the future.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/gitlab-org/incubation-engineering/ai-assist/dokter",
    "keywords": "test,unittest",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dokter",
    "package_url": "https://pypi.org/project/dokter/",
    "platform": null,
    "project_url": "https://pypi.org/project/dokter/",
    "project_urls": {
      "Homepage": "https://gitlab.com/gitlab-org/incubation-engineering/ai-assist/dokter",
      "Source": "https://gitlab.com/gitlab-org/incubation-engineering/ai-assist/dokter/-/tree/main",
      "Tracker": "https://gitlab.com/gitlab-org/incubation-engineering/ai-assist/dokter/-/issues"
    },
    "release_url": "https://pypi.org/project/dokter/1.4.0/",
    "requires_dist": [
      "shellcheck-py (==0.8.0.4)"
    ],
    "requires_python": ">=3.7",
    "summary": "dokter: The doctor for your Dockerfiles",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15006571,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df36c914296355c5b6d3054d846016b76910af64d1f083f0067c5ba8119d4465",
        "md5": "986b9f164103f49a0f851957409424f5",
        "sha256": "ce34ddbc50028e6355a0996a53aea0c6ba5150ced1c65111c266e1d81706d8a9"
      },
      "downloads": -1,
      "filename": "dokter-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "986b9f164103f49a0f851957409424f5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 15353,
      "upload_time": "2022-08-16T08:29:17",
      "upload_time_iso_8601": "2022-08-16T08:29:17.163126Z",
      "url": "https://files.pythonhosted.org/packages/df/36/c914296355c5b6d3054d846016b76910af64d1f083f0067c5ba8119d4465/dokter-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6aa150ea352d55882ee8bedf80619f3e12fe02a114795e9c62b876589584108e",
        "md5": "a65ae9b5e79d6d5f1541d65dc9284abf",
        "sha256": "9ce8006d43f600f4fd33d8d60351568149b55b4373662a0e0aa387ee5bb2c19e"
      },
      "downloads": -1,
      "filename": "dokter-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a65ae9b5e79d6d5f1541d65dc9284abf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17050,
      "upload_time": "2022-08-16T08:29:18",
      "upload_time_iso_8601": "2022-08-16T08:29:18.718545Z",
      "url": "https://files.pythonhosted.org/packages/6a/a1/50ea352d55882ee8bedf80619f3e12fe02a114795e9c62b876589584108e/dokter-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}