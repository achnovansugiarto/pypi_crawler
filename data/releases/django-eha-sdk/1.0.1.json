{
  "info": {
    "author": "eHealth Africa",
    "author_email": "info@ehealthafrica.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Django eHealth SDK\n\nThis library contains the most common features used by the different eHealth django apps.\n\n## Table of contents\n\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [Distribution](#distribution)\n- [Tests](#tests)\n- [Usage](#usage)\n\n\n## Requirements\n\nThis library requires **Python 3.6** and above.\n\nPython libraries:\n\n- [django](https://www.djangoproject.com/) As web framework. (**Above 2**)\n- [django-cors-headers](https://github.com/ottoyiu/django-cors-headers)\n  for handling the server headers required for Cross-Origin Resource Sharing (CORS).\n- [django-debug-toolbar](https://github.com/jazzband/django-debug-toolbar)\n  A configurable set of panels that display various debug information about the current request/response.\n- [django-prometheus](https://github.com/korfuri/django-prometheus)\n  to monitor the application with Prometheus.io.\n- [django-uwsgi](https://github.com/unbit/django-uwsgi)\n  Django related examples/tricks/modules for uWSGI.\n- [djangorestframework](https://www.django-rest-framework.org/)\n  A powerful and flexible toolkit for building Web APIs. (**Above 3.8**)\n- [drf-dynamic-fields](https://github.com/dbrgn/drf-dynamic-fields)\n  Dynamically select only a subset of fields per DRF resource,\n  either using a whitelist or a blacklist.\n- [psycopg2-binary](http://initd.org/psycopg/)\n  Python-PostgreSQL Database Adapter.\n- [pygments](http://pygments.org/)\n  A syntax highlighting package written in Python.\n- [python-json-logger](https://github.com/madzak/python-json-logger)\n  A python library adding a json log formatter.\n- [requests](https://2.python-requests.org//en/master/)\n  HTTP for Humans.\n- [uwsgi](https://uwsgi-docs.readthedocs.io/en/latest/)\n  The uWSGI server.\n\nExtra dependencies (based on settings):\n\n- **cas**\n  - [django-cas-ng](https://github.com/mingchen/django-cas-ng)\n    Django CAS (Central Authentication Service) client. (**Above 3.6**)\n\n- **scheduler**\n  - [django-rq](https://github.com/rq/django-rq)\n    A simple app that provides django integration for RQ (Redis Queue).\n  - [redis](https://github.com/andymccurdy/redis-py)\n    The Python interface to the Redis key-value store.\n  - [rq](https://github.com/rq/rq)\n    Simple, lightweight, library for creating background jobs, and processing them.\n  - [rq-scheduler](https://github.com/rq/rq-scheduler)\n    Small package that adds job scheduling capabilities to RQ.\n\n- **server**\n  - [sentry-sdk](https://github.com/getsentry/sentry-python)\n    Python client for Sentry.\n\n- **storage**\n  - [django-minio-storage](https://github.com/py-pa/django-minio-storage)\n    A django storage driver for minio.\n  - [django-storages](https://django-storages.readthedocs.io/en/latest/)\n    A collection of custom storage backends for Django.\n    Enabled for [boto3](https://github.com/boto/boto3) and\n    [google-cloud-storage](https://github.com/googleapis/google-cloud-python).\n\n- **test**\n  - [coverage](https://coverage.readthedocs.io/)\n    A tool for measuring code coverage of Python programs.\n  - [flake8](http://flake8.pycqa.org/en/latest/)\n    Tool For Style Guide Enforcement.\n  - [flake8-quotes](https://github.com/zheller/flake8-quotes)\n    Flake8 extension for checking quotes in python.\n  - [tblib](https://github.com/ionelmc/python-tblib)\n    Traceback serialization library.\n\n- **webpack**\n  - [django-webpack-loader](https://github.com/owais/django-webpack-loader)\n    Transparently use webpack with django.\n\n*[Return to TOC](#table-of-contents)*\n\n\n## Installation\n\n```bash\n# standalone\npip3 install django_eha_sdk\n\n# with extra dependencies\npip3 install django_eha_sdk[cas,scheduler,server,storage,test,webpack]\n```\n\n*[Return to TOC](#table-of-contents)*\n\n\n## Distribution\n\nHow to create the package distribution\n\nExecute the following command:\n\n```bash\npython3 setup.py bdist_wheel\n```\n\nor\n\n```bash\n./scripts/build.sh\n```\n\n*[Return to TOC](#table-of-contents)*\n\n## Tests\n\nHow to test the library\n\nFirst install dependencies (execute it only once):\n\n```bash\n./scripts/install.sh\n```\n\nAfter that execute the following command:\n\n```bash\nsource ./venv/bin/activate\n./scripts/test.sh\n```\n\nThe file `scripts/test.ini` contains the environment variables used in the tests.\n\n*[Return to TOC](#table-of-contents)*\n\n\n## Usage\n\nAdd this snippet in the `settings.py` file to have the build the django app\nsettings based on the environment variables.\n\n```python\nfrom django_eha_sdk.conf.settings import *  # noqa\n\n# continue with the app specific settings\n# and re-import the settings variables you need to reuse\n# from django_eha_sdk.conf.settings import WHATEVER YOU NEED TO...\n```\n\nAdd this snippet in the `urls.py` file to generate default `urlpatterns`\nbased on the app settings.\n\n```python\nfrom django_eha_sdk.conf.urls import generate_urlpatterns\n\n\nurlpatterns = generate_urlpatterns(token=True, app=[\n    # include here the app specific urls\n])\n```\n\n*[Return to TOC](#table-of-contents)*\n\n\n### Environment variables\n\nThe following environment variables are used to build the app django settings.\nTake a look at the [django settings](https://docs.djangoproject.com/en/2.2/ref/settings/).\n\n#### Generic\n\n- `ADMIN_USERNAME`: `admin` The setup scripts create an initial admin user for the app.\n- `ADMIN_PASSWORD`: `secresecret`.\n- `ADMIN_TOKEN`: `admin_user_auth_token` Used to connect from other modules.\n\n- `APP_LINK`: `https://www.ehealthafrica.org`. The link that appears in the DRF web pages.\n- `APP_NAME`: `eha`. The app name displayed in the web pages.\n- `APP_URL`, `/`. The app url in the server.\n  If host is `http://my-server.org` and the app url is `/my-module`,\n  the app enpoints will be accessible at `http://my-server.org/my-module/...`.\n\n  ```nginx\n  # one NGINX ini file for all modules\n  server {\n    listen                    80;\n    server_name               localhost;\n\n    location /my-module-1 {\n      proxy_pass              http://localhost:8801/my-module-1;\n    }\n  }\n  ```\n\n- `DB_NAME` Database name.\n- `DEBUG` Enables debug mode. Is `false` if unset or set to empty string,\n  anything else is considered `true`.\n- `LOGGING_FORMATTER`: `json`. The app messages format.\n  Possible values: `verbose` or `json`.\n- `LOGGING_LEVEL`: `info` Logging level for app messages.\n  https://docs.python.org/3.7/library/logging.html#levels\n- `TESTING` Indicates if the app executes under test conditions.\n  Is `false` if unset or set to empty string, anything else is considered `true`.\n- `STATIC_URL` : provides a base url for the static assets to be served from.\n\n*[Return to TOC](#table-of-contents)*\n\n#### File Storage System\n\n- `DJANGO_STORAGE_BACKEND`: Used to specify a [Default file storage system](https://docs.djangoproject.com/en/1.11/ref/settings/#default-file-storage).\n  Available options: `minio`, `s3`, `gcs`.\n  More information [here](https://django-storages.readthedocs.io/en/latest/index.html).\n\n##### Minio (`DJANGO_STORAGE_BACKEND=minio`)\n\n- `BUCKET_NAME`: Name of the bucket that will act as MEDIA folder (**mandatory**).\n- `MINIO_STORAGE_ACCESS_KEY`: Minio Access Key.\n- `MINIO_STORAGE_SECRET_KEY`: Minio Secret Access Key.\n- `MINIO_STORAGE_ENDPOINT`: Minio server url endpoint (without scheme).\n- `MINIO_STORAGE_USE_HTTPS`: Whether to use TLS or not. Determines the scheme.\n- `MINIO_STORAGE_AUTO_CREATE_MEDIA_BUCKET`: Whether to create the bucket if it does not already exist.\n- `MINIO_STORAGE_MEDIA_USE_PRESIGNED`: Determines if the media file URLs should be pre-signed.\n\nSee more in https://django-minio-storage.readthedocs.io/en/latest/usage\n\n##### S3 (`DJANGO_STORAGE_BACKEND=s3`)\n\n- `BUCKET_NAME`: Name of the bucket to use on s3 (**mandatory**). Must be unique on s3.\n- `AWS_ACCESS_KEY_ID`: AWS Access Key to your s3 account.\n- `AWS_SECRET_ACCESS_KEY`: AWS Secret Access Key to your s3 account.\n\n##### Google Cloud Storage (`DJANGO_STORAGE_BACKEND=gcs`)\n\n- `BUCKET_NAME`: Name of the bucket to use on gcs (**mandatory**).\n  Create bucket using [Google Cloud Console](https://console.cloud.google.com/)\n  and set appropriate permissions.\n- `GS_ACCESS_KEY_ID`: Google Cloud Access Key.\n  [How to create Access Keys on Google Cloud Storage](https://cloud.google.com/storage/docs/migrating#keys)\n- `GS_SECRET_ACCESS_KEY`: Google Cloud Secret Access Key.\n  [How to create Access Keys on Google Cloud Storage](https://cloud.google.com/storage/docs/migrating#keys)\n\n*[Return to TOC](#table-of-contents)*\n\n#### Multi-tenancy\n\n- `MULTITENANCY`, Enables or disables the feature, is `false` if unset or set\n  to empty string, anything else is considered `true`.\n- `DEFAULT_REALM`, `aether` The default realm for artefacts created\n  if multi-tenancy is not enabled.\n- `REALM_COOKIE`, `aether-realm` The name of the cookie that keeps the current\n  tenant id in the request headers.\n\nThe technical implementation is explained in\n[Multi-tenancy README](/django_eha_sdk/multitenancy/README.md).\n\n*[Return to TOC](#table-of-contents)*\n\n#### uWSGI\n\nThe uWSGI server is responsible for loading our Django applications using\nthe WSGI interface in production.\n\nAny `UWSGI_A_B_C` Translates into the `a-b-c` uswgi option.\n\n> [\n  *When passed as environment variables, options are capitalized and prefixed\n  with UWSGI_, and dashes are substituted with underscores.*\n](https://uwsgi-docs.readthedocs.io/en/latest/Configuration.html#environment-variables)\n\nhttps://uwsgi-docs.readthedocs.io/\n\n*[Return to TOC](#table-of-contents)*\n\n#### Users & Authentication\n\nSet the `KEYCLOAK_SERVER_URL` and `KEYCLOAK_CLIENT_ID` environment variables if\nyou want to use Keycloak as authentication server.\n`KEYCLOAK_CLIENT_ID` (defaults to `eha`) is the public client that allows\nthe aether module to authenticate using the Keycloak REST API.\nThis client id must be added to all the realms used by the aether module.\nThe `KEYCLOAK_SERVER_URL` must include all the path till the realm is indicated,\nusually until `/auth/realms`.\n\nThere are two ways of setting up keycloak:\n\na) In this case the authentication process happens in the server side without\nany further user interaction.\n```ini\n# .env file\nKEYCLOAK_SERVER_URL=http://aether.local/auth/realms\nKEYCLOAK_BEHIND_SCENES=true\n```\n\nb) In this case the user is redirected to the keycloak server to finish the\nsign in step.\n```ini\n# .env file\nKEYCLOAK_SERVER_URL=http://aether.local/auth/realms\nKEYCLOAK_BEHIND_SCENES=\n```\n\nExecute once the `./scripts/setup_keycloak.sh` script to create the keycloak\ndatabase and the default realm+client along with the first user\n(find credentials in the `.env` file).\n\nRead more in [Keycloak](https://www.keycloak.org).\n\n**Note**: Multi-tenancy is automatically enabled if the authentication server\nis keycloak.\n\nSet the `HOSTNAME` and `CAS_SERVER_URL` environment variables if you want to\nactivate the CAS integration in the app.\nSee more in [Django CAS client](https://github.com/mingchen/django-cas-ng).\n\nOther options are to log in via token authentication, via basic authentication\nor via the standard django authentication.\n\nThe available options depend on each container.\n\n*[Return to TOC](#table-of-contents)*\n\n#### Gateway Authentication\n\nSet `GATEWAY_SERVICE_ID` to enable gateway authentication with keycloak.\nThis means that the authentication is handled by a third party system\n(like [Kong](https://konghq.com)) that includes in each request the JSON Web\nToken (JWT) in the `GATEWAY_HEADER_TOKEN` header (defaults to `X-Oauth-Token`).\nThe `GATEWAY_SERVICE_ID` indicates the gateway service, usually matches the\napp/module name like `kernel`, `odk`, `ui`, `sync`.\n\nIn this case the app urls can be reached in several ways:\n\nTrying to access the health endpoint `/health`:\n\n- http://kernel:8100/health using the internal url\n- http://aether.local/my-realm/kernel/health using the gateway url\n\nFor those endpoints that don't depend on the realm and must also be available\n\"unprotected\" we need one more environment variable:\n\n- `GATEWAY_PUBLIC_REALM`: `-` This represents the fake realm that is not protected\n  by the gateway server. In this case the authentication is handled by the other\n  available options, i.e., basic, token, CAS...\n\nThe authorization and admin endpoints don't depend on any realm so the final urls\nuse the public realm.\n\n- http://aether.local/-/odk/accounts/\n- http://aether.local/-/kernel/admin/\n\n*[Return to TOC](#table-of-contents)*\n\n\n## Modules\n\n### Auth\n\nIncludes the methods that allow:\n\n#### To create \"admin\" users via command.\n\n```bash\n# arguments: -u=admin -p=secretsecret -e=admin@ehealthafrica.org -t=01234656789abcdefghij\n./manage.py setup_admin -u=$ADMIN_USERNAME -p=$ADMIN_PASSWORD -t=${ADMIN_TOKEN:-}\n```\n\n#### To create \"users\" with auth token via POST request.\n\nInclude the view entry in the `urls.py` file.\n\n```python\nfrom django.urls import path\nfrom django_eha_sdk.auth.views import obtain_auth_token\n\n\nurlpatterns = [\n    path('get-token', view=obtain_auth_token, name='token'),\n]\n```\n\nThis endpoint is restricted to admin users.\n\n*[Return to TOC](#table-of-contents)*\n\n### Health\n\nIncludes the methods that allow:\n\n#### To check if the system is up.\n\nInclude the view entry in the `urls.py` file.\n\n```python\nfrom django.urls import path\nfrom django_eha_sdk.health.views import health, check_db, check_app\n\n\nurlpatterns = [\n    path('health', view=health, name='health'),           # checks if django responds\n    path('check-db', view=check_db, name='check-db'),     # checks if the db responds\n    path('check-app', view=check_app, name='check-app'),  # returns the app version&co\n]\n```\n\n#### To check connection to another server app.\n\nInclude the view entry in the `urls.py` file.\n\n```python\nfrom django.urls import path\nfrom django_eha_sdk.health.views import check_external\n\n\nurlpatterns = [\n    path('check-app/<slug:name>', view=check_external, name='check-external'),\n]\n```\n\nIndicates if the app should have an URL that checks if an external app server\nis reachable with the provided environment variables `<<APP_NAME>>_URL`\nand `<<APP_NAME>>_TOKEN`.\n\nPossible responses:\n\n- 500 - `Always Look on the Bright Side of Life!!!` ✘\n- 200 - `Brought to you by eHealth Africa - good tech for hard places` ✔\n\n#### To check if an URL is reachable via command.\n\n```bash\n./manage.py check_url -u=http://my-server/url/to/check [-t=auth_token]\n```\n\n*[Return to TOC](#table-of-contents)*\n\n### Conf\n\n#### Settings\n\nImport this snippet in the `settings.py` file to have the common app settings.\n\n```python\nfrom django_eha_sdk.conf.settings import *  # noqa\n```\n\n#### URLs\n\nInclude this snippet in the `urls.py` file to generate default `urlpatterns`\nbased on the app settings.\n\n```python\nfrom django_eha_sdk.conf.urls import generate_urlpatterns\n\n\nurlpatterns = generate_urlpatterns(token=True, app=[\n    # app specific urls\n])\n```\n\nDefault URLs included:\n\n  - the `/health` URL. Always responds with `200` status and an empty content.\n  - the `/check-db` URL. Responds with `500` status if the database is not available.\n  - the `/check-app` URL. Responds with current app version and more.\n  - the `/check-app/{name}` URL. Responds with `500` status if the\n    external app is not reachable with the url and token indicated in the settings.\n  - the `/admin` section URLs.\n  - the `/accounts` URLs, checks if the REST Framework ones, using the templates\n    indicated in `LOGIN_TEMPLATE` and `LOGGED_OUT_TEMPLATE` environment variables,\n    or the CAS ones.\n  - the `debug toolbar` URLs only in `DEBUG` mode.\n\nBased on the arguments:\n\n  - `token`: indicates if the app should be able to create and return\n             user tokens via POST request and activates the URL.\n             The url endpoint is `/token`.\n\n*[Return to TOC](#table-of-contents)*\n\n### Multi-tenancy\n\nThe technical implementation is explained in\n[Multi-tenancy README](/django_eha_sdk/multitenancy/README.md).\n\n*[Return to TOC](#table-of-contents)*\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eHealthAfrica/django-eha-sdk/",
    "keywords": "django,setup,auth,cas,token,keycloak,multitenancy",
    "license": "Apache2 License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-eha-sdk",
    "package_url": "https://pypi.org/project/django-eha-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-eha-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/eHealthAfrica/django-eha-sdk/"
    },
    "release_url": "https://pypi.org/project/django-eha-sdk/1.0.1/",
    "requires_dist": [
      "django-cors-headers",
      "django-debug-toolbar",
      "django-prometheus",
      "django-uwsgi",
      "django (>=2)",
      "djangorestframework (>=3.8)",
      "drf-dynamic-fields",
      "psycopg2-binary",
      "pygments",
      "python-json-logger",
      "requests",
      "urllib3 (>=1.25)",
      "uwsgi",
      "django-cas-ng (>=3.6); extra == 'cas'",
      "django-rq; extra == 'scheduler'",
      "redis; extra == 'scheduler'",
      "rq; extra == 'scheduler'",
      "rq-scheduler; extra == 'scheduler'",
      "sentry-sdk; extra == 'server'",
      "django-minio-storage; extra == 'storage'",
      "django-storages[google,boto3]; extra == 'storage'",
      "coverage; extra == 'test'",
      "flake8; extra == 'test'",
      "flake8-quotes; extra == 'test'",
      "tblib; extra == 'test'",
      "django-webpack-loader; extra == 'webpack'"
    ],
    "requires_python": ">=3.6",
    "summary": "A python library with helpful django tools",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5277983,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc22373651cefb7ea2da7721b38d46450be36b3100f6b295650cc5b3e207917b",
        "md5": "75164a38f1c6aa164b85f180b3f37124",
        "sha256": "2928c161c4235bb9eab287572dc827cf1b02b7539a1f398712510011072ddaaa"
      },
      "downloads": -1,
      "filename": "django_eha_sdk-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "75164a38f1c6aa164b85f180b3f37124",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 113324,
      "upload_time": "2019-05-09T14:27:32",
      "upload_time_iso_8601": "2019-05-09T14:27:32.875364Z",
      "url": "https://files.pythonhosted.org/packages/fc/22/373651cefb7ea2da7721b38d46450be36b3100f6b295650cc5b3e207917b/django_eha_sdk-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}