{
  "info": {
    "author": "Andrew Torsunov, Kirill Borisov",
    "author_email": "torsunov@bars-open.ru, borisov@bars-open.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Natural Language :: Russian",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Data Logging\n===============\n\n:Version: 2.0.2.1\n\n**Data Logging** - логгер действий пользователя в системе. Отслеживаются \nтакие события, как вход, выход пользователя, открытие окон, удаление, \nредактирование, создание записей в БД.\n\n.. Note :: \n    Не реализована поддержка NoSQL решений.\n\n.. Attention ::\n    Массовые операции (Model.objects.delete() и т.д.) над моделями не отслеживаются.\n\n\nЗависимости\n===========\n\nM3 1.5\n\nDjango 1.3\n\nDjango JSON Field \n\nSouth\n\n\nНастройки\n=========\n\nВ ``settings.DATABASE_ROUTERS`` необходимо добавить ``datalogging.dbrouters.DataLoggerRouter``.\nЕсли используется отдельная БД так же необходимо добавить ``datalogging.dbrouters.NotUseDataLoggerDBRouter``.\n\nВ ``settings.MIDDLEWARE_CLASSES`` необходимо добавить  ``datalogging.middleware.CaptureRequestMiddleware`` и\n``datalogging.middleware.RequestTokenMiddleware``.\n\n\n``DATALOGGER_EVENT_TYPE``\n    Разделение событий по типу (системные, юридически важные и т.д.).\n    В дальнейшем, к перечислению можно обратиться через ``EventType``.\n\n    Пример:\n\n    ::\n\n        DATALOGGER_EVENT_TYPE = {\n            'SYSTEM': ('se', u'Системное событие'),\n        }\n\n\n``DATALOGGER_EVENT_CODE``\n    Коды событий, изначально имеются 6 событий: insert, update, delete, login,\n    logout, win_open.\n    В дальнейшем, к перечислению можно обратиться через ``EventCode``.\n\n    Пример:\n\n    ::\n\n        DATALOGGER_EVENT_CODE = {\n            'CUSTOM_EVENT_CODE': ('cec', 'Собственный код события'),\n        }\n\n\n``DATALOGGER_SYSTEMS_ENUM``\n    Перечисление подсистем, в которых возникает событие:\n    В дальнейшем, к перечислению можно обратиться через ``SystemEnum``.\n\n    Пример:\n\n    ::\n\n        DATALOGGER_SYSTEMS_ENUM = {\n            'APPICATION': ('app', u'Основное приложение'),\n        }\n\n\n``DATALOGGER_SUSPECTS_MODEL``\n    Список моделей, состояние которых необходимо отслеживать.\n    Причем, в качестве элемента списка можно использовать как полный путь до\n    модели, так и сокращенный.\n    Как альтернатива, можно указывать DataLoggingManager прямо в классе модели.\n\n    Пример:\n\n    ::\n\n        DATALOGGER_SUSPECTS_MODEL = [\n            'module_name.ModelName',\n            'project_name.core.module_name.models.ModelName',\n        ]\n\n\n``DATALOGGER_EXCLUDE_ACTIONS``\n    Перечисление имен классов паков или экшенов, которые не нужно логировать.\n\n\n``DATALOGGER_EXCLUDE_FIELDS``\n    Перечень полей, которые не надо использовать при сравнении состояний модели.\n\n    Пример:\n\n    ::\n\n        DATALOGGER_EXCLUDE_FIELDS = [\n            'version', 'begin', 'end', 'modified',\n        ]\n\n\n``DATALOGGER_DATABASE``\n    Наименование БД из  ``settings.DATABASES``, которая будет использована в\n    качестве бэкенда для логгера.\n\n    В случае, если БД отлична от основной БД приложения, то необходимо включить\n    в ``settings.DATABASE_ROUTERS`` классы ``NotUseDataLoggerDBRouter`` и \n    ``DataLoggerRouter``. \n    \n    Для корректной работы с миграциями требуется подключить модуль ``datalogging.south_migration``\n    который перекрывает команду South - ``migrate``.\n\n    .. Note ::\n        Так же требуется предварительный запуск команды syncdb.\n\n    Пример:\n\n    ::\n    \n        INSTALLED_APPS += ('datalogging.south_migration',)\n\n        DATALOGGER_DATABASE = 'log_db'\n\n        DATABASE_ROUTERS = (\n            'datalogging.dbrouters.DataLoggerRouter',\n            'datalogging.dbrouters.NotUseDataLoggerDBRouter',\n        )\n\n\n``DATALOGGER_SHUTUP``\n    Если необходимо отключить логгер, то значение должно быть ``True`` в ином случае ``False``.\n\n\n``DATALOGGER_FORGET_SYS_EVENTS``\n    Если необходимо отключить логирование системных событий, то значение должно быть ``True`` в ином случае ``False``.\n\n\n``DATALOGGER_HOOKED_ACTIONS``\n    Для возможности кастомного логирования вызова определенных экшенов, требуется указать их в словаре вида::\n        \n        DATALOGGER_EVENT_CODE = {\n            'CUSTOM_EVENT_CODE': ('cec', 'description event')\n        }\n\n        DATALOGGER_HOOKED_ACTIONS = {\n            'SomeActionClassName': 'CUSTOM_EVENT_CODE'\n        }\n\n    Позже, событие с экшеном можно перехватить по коду в обработчике сигнала post_system_event_signal, в kwargs будут присутствовать action и request.\n\n``DATALOGGER_COMPRESS_FILENAME_TEMPLATE``\n    Определяет формат именования файлов при архивировании логов. По умолчанию ``datalogging-dump-%d-%m-%Y-%H-%M``.\n\n``DATALOGGER_COMPRESS_DESTINATION``\n    Определяет место назначения для архивов лога. По умолчанию: текущая папка.\n\n\nИспользование\n=============\n\nДобавить в ``INSTALLED_APPS``.\n\nДля использования логгера строго необходимо определить обработчики \nсигналов.\n\nСигналы\n-------\n\n``msg_for_log_signal``\n    Сигнал возникает при формировании логгером человекпонятного описания \n    события. В случае, если событие системное(открытие пользователем окошка), то ``model_instance`` будет иметь ``None`` в качестве значения.\n    В качестве возвращаемого значения должна быть представлена строка.\n\n    Передаваемые аргументы:\n\n    - ``log_record`` - экземпляр записи лога,\n    - ``model_instance`` - экземпляр записи модели,\n    - ``fields_dict`` - словарь полей экземпляра модели, где ключ - имя поля, а значение - значение поля в модели.\n\n\n``log_context_signal``\n    Если приложение запущено в режиме фоновой задачи (Celery и т.д.) или в режиме шела, то \n    ``request`` будет ``None``.\n\n    Контекст события должен являться словарем и содержать значения:\n\n    - ``suid`` - ID пользователя в среде, в которой произошло событие,\n    - ``system_type`` - значение из ``SystemEnum`` описывающее текущую среду,\n    - ``event_type`` - значение из ``EventType`` описывающее текущий тип события.\n\n    В качестве возвращаемого значения должен быть представлен словарь.\n\n    Передаваемые аргументы:\n\n    - ``request`` - текущий запрос.\n\n\n``post_snapshot_signal``\n    Вызывается в момент формирования записи об измененном состоянии\n    отслеживаемой модели. Позволяет изменить запись лога перед сохранением.\n\n    Передаваемые аргументы:\n\n    - ``log_record`` - не сохраненный в БД экземпляр записи лога\n\n\n``post_system_event_signal``\n    Вызывается в момент формирования записи о событии происшедшем в\n    системе. Позволяет изменить запись лога перед сохранением.\n\n    Передаваемые аргументы:\n\n    - ``log_record`` - не сохраненный в БД экземпляр записи лога\n\n\nВыборка записей\n---------------\n\n``filter_events`` \n    Позволяет отфильтровать записи лога. По поведению функция схожа\n    с методом ``filter`` в Django ORM, с той лишь разницей, что есть\n    возможность осуществлять поиск по сериализованным в JSON данным.\n\n    Пример (поиск по загловку окна):\n\n    ::\n\n        filter_events(\n            event_code=EventCode.WIN_OPEN,\n            _context__title=u'Заголовок или его часть')\n\n\n``get_events_by_token``\n    Позволяет получить все записи с одинаковым токеном запроса. Т.е.\n    все события возникшие в рамках одного запроса.\n\n    Пример:\n\n    ::\n\n        get_events_by_token(some_log_record.request_token)\n\n\nПример\n------\n\n**settings.py**\n\n::\n\n    ...\n\n    DATALOGGER_DATABASE = 'default'\n    DATALOGGER_EXCLUDE_FIELDS = ('version', 'modified')\n\n    DATALOGGER_EVENT_CODE = {\n        'CRITICAL_CHANGE': ('cc', u'Критичное изменение'),\n    }\n\n    DATALOGGER_SYSTEMS_ENUM = {\n        'APPLICATION': ('app', u'Основное приложение'),\n        'SCHEDULER': ('sch', u'Задачи вызыванные планировщиком'),\n    }\n\n    DATALOGGER_EVENT_TYPE = {\n        'SYSTEM_EVENT': ('se', u'Системное событие'),\n        'LEGALLY_EVENT': ('le', u'Юридически важное событие'),\n    }\n\n**signals.py**\n\n::\n\n    from datalogging.signals import custom_verbose, custom_log_context, post_snapshot\n\n\n    def verbose_handler(sender, log_record, model_instance, fields_dict):\n        model_mapping = {\n            'module.Declaration': u'заявку (ID=%(id)s)',\n            'module.DeclarationUnit': u'привязку заявки (ID=%(declaration_id)s) к учреждению (ID=%(unit_id)s)',\n            'module.Children': u'ребенка (ID=%(id)s)',\n            'module.Pupil': u'запись о зачислении ребенка (ID=%(children_id)s в группу (ID=%(grup_id)s)',\n            'module.Deduct': u'запись об отчислении ребенка (ID=%(children_id)s) из группы (ID=%(group_id)s)',\n            'module.Group': u'группу (ID=%(id)s) учреждения (ID=%(unit_id)s)',\n            'module.Direct': u'направление заявки %(declaration_id)s в группу %(group_id)s'\n        }\n\n        operation_mapping = {\n            EventCode.UPDATE: u'изменил(а)',\n            EventCode.INSERT: u'создал(а)',\n            EventCode.DELETE: u'удалил(а)'\n        }\n        \n        if log_record.event_code == EventCode.WIN_OPEN:\n            return u'Открыто окно: %s' % log_record.context_data['title']\n\n        what = u'запись в \"%s\"' % model_instance._meta.verbose_name\n        if log_record.object_type in model_mapping:\n            what = model_mapping[log_rec.object_type] % fields_dict\n\n        verbose = u'Пользователь (ID=%s) %s %s.' % (\n            log_record.suid,\n            operation_mapping.get(log_rec.event_code),\n            what\n        )\n\n        return verbose\n\n\n    def context_handler(sender, request):\n        if request is None:\n            user_id = None\n            system_type = SystemsEnum.SHELL\n            event_type = EventType.UNDEFINED\n        else:\n            user_id = getattr(request.user, 'id', None)\n            url = request.get_full_path()\n            if '/some_pattern' in url:\n                event_type = EventType.SOME_TYPE\n                system_type = SystemsEnum.APPLICATION\n            elif '/some_diffierent_pattern' in url:\n                event_type = EventType.SOME_DIFFERENT_TYPE\n                system_type = SystemType.SCHEDULER\n\n        return {'suid': user_id, \n                'event_type': event_type,\n                'system_type': system_type}\n\n\n    def post_snapshot_handler(sender, log_record):\n        if log_record.object_type == 'module.SomeModelName' and log_record.event_code = EventCode.UPDATE:\n            log_record.event_code = EventCode.CRITICAL_CHANGE\n\n\n    msg_for_log_signal.connect(verbose_handler, weak=False)\n    log_context_signal.connect(context_handler, weak=False)\n    post_snapshot_signal.connect(post_snapshot_handler, weak=False)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/barsgroup/data-logging",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "m3-datalogging",
    "package_url": "https://pypi.org/project/m3-datalogging/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/m3-datalogging/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/barsgroup/data-logging"
    },
    "release_url": "https://pypi.org/project/m3-datalogging/2.0.2.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Logging system to spy on users.",
    "version": "2.0.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13246082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6067f015237d0409dc6777911428ee45b7bcbbf11d4c2b71f99b6c56e07ca21",
        "md5": "09d800329adced4c19bce2ac0a96d9f3",
        "sha256": "90f7dc52a07c7aa4b69f1b027c9bd2d29be95c4fb684062175c85ef408c9fbbc"
      },
      "downloads": -1,
      "filename": "m3-datalogging-2.0.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "09d800329adced4c19bce2ac0a96d9f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25032,
      "upload_time": "2014-10-02T07:29:53",
      "upload_time_iso_8601": "2014-10-02T07:29:53.491360Z",
      "url": "https://files.pythonhosted.org/packages/d6/06/7f015237d0409dc6777911428ee45b7bcbbf11d4c2b71f99b6c56e07ca21/m3-datalogging-2.0.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}