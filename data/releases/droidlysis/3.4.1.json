{
  "info": {
    "author": "@cryptax",
    "author_email": "aafortinet@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Disassemblers"
    ],
    "description": "# DroidLysis\n\nDroidLysis is a **pre-analysis tool for Android apps**: it performs repetitive and boring tasks we'd typically do at the beginning of any reverse engineering. It disassembles the Android sample, organizes output in directories, and searches for suspicious spots in the code to look at.\nThe output helps the reverse engineer speed up the first few steps of analysis.\n\nDroidLysis can be used over Android packages (apk), Dalvik executables (dex), Zip files (zip), Rar files (rar) or directories of files.\n\n<img src=\"https://img.shields.io/badge/PyPi%20-3.4.1-blue\">\n\n## Quick setup\n\nCan't wait to use DroidLysis? Then, use a Docker container:\n\n```\n$ docker pull cryptax/droidlysis:2023.02\n$ docker run -it --rm -v /tmp/share:/share cryptax/droidlysis:2023.02  /bin/bash\n$ cd /opt/droidlysis\n$ python3 ./droidlysis3.py --help\n```\n\n## Installing DroidLysis\n\n1. Install required system packages\n2. Install Android disassembly tools\n3. Get DroidLysis from the Git repository (preferred) or from pip\n4. Configure `droidconfig.py`\n\nInstall required system packages:\n\n```\nsudo apt-get install default-jre git python3 python3-pip unzip wget libmagic-dev libxml2-dev libxslt-dev\n```\n\nInstall Android disassembly tools: [Apktool](https://ibotpeaches.github.io/Apktool/) , \n[Baksmali](https://bitbucket.org/JesusFreke/smali/downloads), and optionally \n[Dex2jar](https://github.com/pxb1988/dex2jar) and  \n[Procyon](https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler) (note that Procyon only works with Java 8, not Java 11).\n\n```\n$ mkdir -p ~/softs\n$ cd ~/softs\n$ wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.7.0.jar\n$ wget https://bitbucket.org/JesusFreke/smali/downloads/baksmali-2.5.2.jar\n$ wget https://github.com/pxb1988/dex2jar/releases/download/v2.2-SNAPSHOT-2021-10-31/dex-tools-2.2-SNAPSHOT-2021-10-31.zip\n$ unzip dex-tools-2.2-SNAPSHOT-2021-10-31.zip \n$ rm -f dex-tools-2.2-SNAPSHOT-2021-10-31.zip \n```\n\nInstall from Git in a Python virtual environment:\n\n```\n$ python3 -m venv venv\n$ source ./venv/bin/activate\n(venv) $ pip3 install git+https://github.com/cryptax/droidlysis\n```\n\nRun it:\n\n```\ncd droidlysis\n./droidlysis --help\n```\n\nAlternatively, you can install DroidLysis directly from PyPi (`pip3 install droidlysis`).\n\n## Configuration\n\nIf you used the default install commands & directories as specified above, you won't need any configuration. \n\nThe configuration is extremely simple, you only need to tune `droidconfig.py`. Note that if you placed the tools in the default `~/softs` directory as I specified, you don't have to do anything: the tools will be automatically found in that location.\n\n- `APKTOOL_JAR`: set the path to your apktool jar\n- `BAKSMALI_JAR`: set the path to your baksmali jar\n- `DEX2JAR_CMD`: set the path to the folder containing `d2j-dex2.jar.sh`. If you did not install dex2jar, simply provide an invalid path here, for example pointing to a non-existant file.\n- `PROCYON_JAR`: set the path to the procyon decompiler jar. If you don't want Procyon, leave this path to a non existant file.\n- `INSTALL_DIR`: set the path to your DroidLysis instance. Do not forget to set this or DroidLysis won't work correctly!\n\nBy default, `droidconfig.py` searches for tools at the following location:\n\n```python\nAPKTOOL_JAR = os.path.join( os.path.expanduser(\"~/softs\"), \"apktool_2.7.0.jar\")\nBAKSMALI_JAR = os.path.join(os.path.expanduser(\"~/softs\"), \"baksmali-2.5.2.jar\")\nDEX2JAR_CMD = os.path.join(os.path.expanduser(\"~/softs/dex-tools-2.1-SNAPSHOT\"), \"d2j-dex2jar.sh\")\nPROCYON_JAR = os.path.join( os.path.expanduser(\"~/softs\"), \"procyon-decompiler-0.5.36.jar\")\nINSTALL_DIR = os.path.expanduser(\"~/droidlysis\")\n```\n\nOptionally, if you need a specific situation, you might need to tune the following too. \nNormally, the default options will work and you won't have to touch these:\n\n- `SQLALCHEMY`: specify your SQL database.\n- `KEYTOOL`: absolute path of `keytool` which generally ships with Java\n- `SMALI_CONFIGFILE`: smali patterns\n- `WIDE_CONFIGFILE`: resource patterns\n- `ARM_CONFIGFILE`: ARM executable patterns\n- `KIT_CONFIGFILE`: 3rd party SDK patterns\n\n\n## Usage\n\nDroidLysis uses **Python 3**. To launch it and get options:\n\n```\ndroidlysis --help\n```\n\nFor example, test it on [Signal's APK](https://signal.org/android/apk/):\n\n```\ndroidlysis --input Signal-website-universal-release-4.52.4.apk --output /tmp\n```\n\n![](./images/example.png)\n\nDroidLysis outputs:\n\n- A summary on the console (see image above)\n- The unzipped, pre-processed sample in a subdirectory of your output dir. The subdirectory is named using the sample's filename and sha256 sum. For example, if we analyze the Signal application and set `--output /tmp`, the analysis will be written to `/tmp/Signalwebsiteuniversalrelease4.52.4.apk-f3c7d5e38df23925dd0b2fe1f44bfa12bac935a6bc8fe3a485a4436d4487a290`.\n- A database (by default, SQLite `droidlysis.db`) containing properties it noticed.\n\n## Options\n\nGet usage with `droidlysis --help`\n\n- The input can be a file or a directory of files to recursively look into. DroidLysis knows how to process Android packages, DEX, ODEX and ARM executables, ZIP, RAR. DroidLysis won't fail on other type of files (unless there is a bug...) but won't be able to understand the content.\n\n- When processing directories of files, it is typically quite helpful to move processed samples to another location to know what has been processed. This is handled by option `--movein`.  Also, if you are only interested in statistics, you should probably clear the output directory which contains detailed information for each sample: this is option `--clearoutput`. If you want to store all statistics in a SQL database, use `--enable-sql` (see [here](#sqlite_database))\n\n- DEX decompilation is quite long with Procyon, so this option is *disabled* by default. If you want to decompile to Java, use `--enable-procyon`.\n\n- DroidLysis's analysis does not inspect known 3rd party SDK by default, i.e. for instance it won't report any suspicious activity from these. If you want them to be inspected, use option `--no-kit-exception`. This usually creates many more detected properties for the sample, as SDKs (e.g. advertisment) use lots of flagged APIs (get GPS location, get IMEI, get IMSI, HTTP POST...).\n\n## Sample output directory (`--output DIR`)\n\nThis directory contains (when applicable):\n\n- A readable `AndroidManifest.xml`\n- Readable resources in `res`\n- Libraries `lib`, assets `assets`\n- Disassembled Smali code: `smali` (and others)\n- Package meta information: `META-INF`\n- Package contents when simply unzipped in `./unzipped`\n- DEX executable `classes.dex` (and others), and converted to jar: `classes-dex2jar.jar`, and unjarred in `./unjarred`\n\nThe following files are generated by DroidLysis:\n\n- `autoanalysis.md`: lists each pattern DroidLysis detected and where.\n- `report.md`: same as what was printed on the console\n\nIf you do not need the sample output directory to be generated, use the option `--clearoutput`.\n\n## SQLite database{#sqlite_database}\n\nIf you want to process a directory of samples, you'll probably like to store the properties DroidLysis found in a database, to easily parse and query the findings. In that case, use the option `--enable-sql`. This will automatically dump all results in a database named `droidlysis.db`, in a table named `samples`. Each entry in the table is relative to a given sample. Each column is properties DroidLysis tracks.\n\nFor example, to retrieve all filename, SHA256 sum and smali properties of the database:\n\n```\nsqlite> select sha256, sanitized_basename, smali_properties from samples;\nf3c7d5e38df23925dd0b2fe1f44bfa12bac935a6bc8fe3a485a4436d4487a290|Signalwebsiteuniversalrelease4.52.4.apk|{\"send_sms\": true, \"receive_sms\": true, \"abort_broadcast\": true, \"call\": false, \"email\": false, \"answer_call\": false, \"end_call\": true, \"phone_number\": false, \"intent_chooser\": true, \"get_accounts\": true, \"contacts\": false, \"get_imei\": true, \"get_external_storage_stage\": false, \"get_imsi\": false, \"get_network_operator\": false, \"get_active_network_info\": false, \"get_line_number\": true, \"get_sim_country_iso\": true,\n...\n```\n\n## Property patterns\n\nWhat DroidLysis detects can be configured and extended in the files of the `./conf` directory.\n\nA pattern consist of:\n\n- a **tag** name: example `send_sms`. This is to name the property. Must be unique across the `.conf` file.\n- a **pattern**: this is a regexp to be matched. Ex: `;->sendTextMessage|;->sendMultipartTextMessage|SmsManager;->sendDataMessage`. In the `smali.conf` file, this regexp is match on Smali code. In this particular case, there are 3 different ways to send SMS messages from the code: sendTextMessage, sendMultipartTextMessage and sendDataMessage.\n- a **description** (optional): explains the importance of the property and what it means.\n\n```\n[send_sms]\npattern=;->sendTextMessage|;->sendMultipartTextMessage|SmsManager;->sendDataMessage\ndescription=Sending SMS messages\n```\n\n## To do\n\n- Remove the \"caution: filename not matched:  classes6.dex\" which occurs at file extraction in `droidsample.py`\n\n## Updates\n\n- v3.4.1 - Removed dependency to Androguard\n- v3.4.0 - Multidex support\n- v3.3.1 - Improving detection of Base64 strings\n- v3.3.0 - Dumping data to JSON\n- v3.2.1 - IP address detection\n- v3.2.0 - Dex2jar is optional\n- v3.1.0 - Detection of Base64 strings\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cryptax/droidlysis",
    "keywords": "android malware reverse",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "droidlysis",
    "package_url": "https://pypi.org/project/droidlysis/",
    "platform": null,
    "project_url": "https://pypi.org/project/droidlysis/",
    "project_urls": {
      "Homepage": "https://github.com/cryptax/droidlysis"
    },
    "release_url": "https://pypi.org/project/droidlysis/3.4.1/",
    "requires_dist": [
      "configparser (>=4.0.2)",
      "python-magic (==0.4.12)",
      "SQLAlchemy (>=1.1.1)",
      "rarfile (>=3.0)"
    ],
    "requires_python": ">=3.0",
    "summary": "DroidLysis: pre-analysis of suspicious Android samples",
    "version": "3.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17242124,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96cc9c8988486b6833c62ed37e0d8e4fc290bc131aea6c70be86183f3d4404cb",
        "md5": "3ff2e371a45d8a47ba0a03efb8d6a171",
        "sha256": "0dedf88496576b38668ae4ee2beda4038f8c008d85cc4ee9cc94d21093a944c1"
      },
      "downloads": -1,
      "filename": "droidlysis-3.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3ff2e371a45d8a47ba0a03efb8d6a171",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 57624,
      "upload_time": "2023-02-21T14:52:21",
      "upload_time_iso_8601": "2023-02-21T14:52:21.547776Z",
      "url": "https://files.pythonhosted.org/packages/96/cc/9c8988486b6833c62ed37e0d8e4fc290bc131aea6c70be86183f3d4404cb/droidlysis-3.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f22f8c5f1bde4dc5c7e499a022f85447c858235760468fb7509150c5869f66a",
        "md5": "d9d08b9fa03bc0ac535009c405981eaf",
        "sha256": "b042b968fb7d9f91aa17a08714e38f5f8277871a48992892e5d70edb46da17bb"
      },
      "downloads": -1,
      "filename": "droidlysis-3.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d9d08b9fa03bc0ac535009c405981eaf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 54814,
      "upload_time": "2023-02-21T14:52:23",
      "upload_time_iso_8601": "2023-02-21T14:52:23.985630Z",
      "url": "https://files.pythonhosted.org/packages/9f/22/f8c5f1bde4dc5c7e499a022f85447c858235760468fb7509150c5869f66a/droidlysis-3.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}