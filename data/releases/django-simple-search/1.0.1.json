{
  "info": {
    "author": "Greg Brown",
    "author_email": "greg@gregbrown.co.nz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django simple search provides the same functionality and convenience as\n``search_fields`` does in the django admin.\n\nSee http://gregbrown.co.nz/code/django-simple-search/ for more details.\n\n|Circle CI| |codecov| |Latest Version|\n\nInstallation\n------------\n\nDownload the source from\nhttps://pypi.python.org/pypi/django-simple-search/ and run\n``python setup.py install``, or:\n\n::\n\n    > pip install django-simple-search\n\nDjango 1.8 or higher is required.\n\nQuick start\n-----------\n\n::\n\n    from simple_search import search_filter\n    from .models import MyModel\n\n    query = 'test'\n    search_fields = ['^title', 'description', '=id']\n    f = search_filter(search_fields, query)\n    filtered = MyModel.objects.filter(f)\n\nFor convenience you can create a search form class via the provided\nfactory:\n\n::\n\n    from .models import MyModel\n    from simple_search import search_form_factory\n\n    SearchForm = search_form_factory(MyModel.objects.all(),\n                                     ['^title', 'description'])\n\nReference\n---------\n\n``simple_search.search_filter(search_fields, query)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGiven a list of ``search_fields`` to search on and a query, return a\n``models.Q`` object which can be used to filter a queryset.\n\n``search_fields`` behaves exactly like the django admin\n```search_fields`` <https://docs.djangoproject.com/en/1.10/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields>`__\noption. Example:\n\n::\n\n    search_fields = [\n        # match from the start of the title field\n        '^title',\n\n        # match anywhere within the description field\n        'description',\n\n        # match from the start of the related category's title field\n        '^category__title',\n\n        # exact match on object id\n        '=id'\n    ]\n\n``simple_search.search_form_factory(queryset, search_fields)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a search form class which will filter ``queryset`` according to\n``search_fields`` and the form field ``q``. Example:\n\n::\n\n    # forms.py\n    from .models import MyModel\n    from simple_search import search_form_factory\n\n    SearchForm = search_form_factory(MyModel.objects.all(),\n                                     ['^title', 'description'])\n\n    # views.py\n    from django.shortcuts import render\n    from .forms import SearchForm\n\n    @render('search.html')\n    def search(request):\n        form = SearchForm(request.GET or {})\n        if form.is_valid():\n            results = form.get_queryset()\n        else:\n            results = MyModel.objects.none()\n\n        return {\n            'form': form,\n            'results': results,\n        }\n\nRunning tests\n-------------\n\nUse tox (https://pypi.python.org/pypi/tox):\n\n::\n\n    > pip install tox\n    > cd path-to/django-simple-search\n    > tox\n\n.. |Circle CI| image:: https://circleci.com/gh/gregplaysguitar/django-simple-search.svg?style=svg\n   :target: https://circleci.com/gh/gregplaysguitar/django-simple-search\n.. |codecov| image:: https://codecov.io/gh/gregplaysguitar/django-simple-search/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/gregplaysguitar/django-simple-search\n.. |Latest Version| image:: https://img.shields.io/pypi/v/django-simple-search.svg?style=flat\n   :target: https://pypi.python.org/pypi/django-simple-search/\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gregplaysguitar/django-simple-search",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-simple-search",
    "package_url": "https://pypi.org/project/django-simple-search/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-simple-search/",
    "project_urls": {
      "Homepage": "https://github.com/gregplaysguitar/django-simple-search"
    },
    "release_url": "https://pypi.org/project/django-simple-search/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Recurring event tools for django",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2718831,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27873ae03d731e640325e9c7c6fae19d77f14435d3b9c8cc4171b2b2c7e030d3",
        "md5": "2475d839459d3a53924eae91caa59f6a",
        "sha256": "2ee0479bb821cba2f37cd29115f49fce052b5cc55b51f6e8bac6adefaf72564b"
      },
      "downloads": -1,
      "filename": "django-simple-search-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2475d839459d3a53924eae91caa59f6a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4974,
      "upload_time": "2017-03-20T21:12:36",
      "upload_time_iso_8601": "2017-03-20T21:12:36.597475Z",
      "url": "https://files.pythonhosted.org/packages/27/87/3ae03d731e640325e9c7c6fae19d77f14435d3b9c8cc4171b2b2c7e030d3/django-simple-search-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}