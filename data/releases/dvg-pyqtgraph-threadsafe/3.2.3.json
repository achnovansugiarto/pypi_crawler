{
  "info": {
    "author": "Dennis van Gils",
    "author_email": "vangils.dennis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/dvg-pyqtgraph-threadsafe\n    :target: https://pypi.org/project/dvg-pyqtgraph-threadsafe\n.. image:: https://img.shields.io/pypi/pyversions/dvg-pyqtgraph-threadsafe\n    :target: https://pypi.org/project/dvg-pyqtgraph-threadsafe\n.. image:: https://requires.io/github/Dennis-van-Gils/python-dvg-pyqtgraph-threadsafe/requirements.svg?branch=master\n    :target: https://requires.io/github/Dennis-van-Gils/python-dvg-pyqtgraph-threadsafe/requirements/?branch=master\n    :alt: Requirements Status\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n.. image:: https://img.shields.io/badge/License-MIT-purple.svg\n    :target: https://github.com/Dennis-van-Gils/python-dvg-pyqtgraph-threadsafe/blob/master/LICENSE.txt\n\n\nDvG_PyQtGraph_ThreadSafe\n========================\n\n\n*PyQtGraph library providing thread-safe plot curves with underlying (ring)\nbuffers.*\n\nSupports PyQt5, PyQt6, PySide2 and PySide6.\n\n- Github: https://github.com/Dennis-van-Gils/python-dvg-pyqtgraph-threadsafe\n- PyPI: https://pypi.org/project/dvg-pyqtgraph-threadsafe\n\nInstallation::\n\n    pip install dvg-pyqtgraph-threadsafe\n\nDemos can be found in the `demos folder </demos>`_.\n\n.. image:: https://raw.githubusercontent.com/Dennis-van-Gils/python-dvg-pyqtgraph-threadsafe/master/demos/demo_pyqtgraph_threadsafe.png\n\nOverview\n========\n\n\nClasses ``HistoryChartCurve``, ``BufferedPlotCurve`` & ``PlotCurve`` wrap around\na ``pyqtgraph.PlotDataItem`` instance, called a *curve* for convenience. Data\ncan be safely appended or set from out of any thread.\n\nThe (x, y)-curve data is buffered internally to the class, relying on either a\ncircular/ring buffer or a regular array buffer:\n\n    HistoryChartCurve\n        Ring buffer. The plotted x-data will be shifted such that the\n        right-side is always set to 0. I.e., when `x` denotes time, the data is\n        plotted backwards in time, hence the name *history* chart. The most\n        recent data is on the right-side of the ring buffer.\n\n    BufferedPlotCurve\n        Ring buffer. Data will be plotted as is. Can also act as a Lissajous\n        figure.\n\n    PlotCurve\n        Regular array buffer. Data will be plotted as is.\n\nUsage:\n\n    .. code-block:: python\n\n        import sys\n        from PyQt5 import QtWidgets\n        import pyqtgraph as pg\n        from dvg_pyqtgraph_threadsafe import HistoryChartCurve\n\n        class MainWindow(QtWidgets.QWidget):\n            def __init__(self, parent=None, **kwargs):\n                super().__init__(parent, **kwargs)\n\n                self.gw = pg.GraphicsLayoutWidget()\n                self.plot_1 = self.gw.addPlot()\n\n                # Create a HistoryChartCurve and have it wrap around a new PlotDataItem\n                # as set by argument `linked_curve`.\n                self.tscurve_1 = HistoryChartCurve(\n                    capacity=5,\n                    linked_curve=self.plot_1.plot(pen=pg.mkPen('r')),\n                )\n\n                grid = QtWidgets.QGridLayout(self)\n                grid.addWidget(self.gw)\n\n        app = QtWidgets.QApplication(sys.argv)\n        window = MainWindow()\n\n        # The following line could have been executed from inside of another thread:\n        window.tscurve_1.extendData([1, 2, 3, 4, 5], [10, 20, 30, 20, 10])\n\n        # Draw the curve from out of the main thread\n        window.tscurve_1.update()\n\n        window.show()\n        sys.exit(app.exec_())\n\n\nBenchmark\n=========\n\nIf you intend to use this library to plot 100.000s of points at a high frame\nrate on your integrated GPU instead of on a dedicated (performance) GPU,\nyou might run into performance issues. Even when OpenGL hardware\nacceleration is enabled.\n\nI recommend you run the performance benchmark found in the\n`benchmark folder <https://github.com/Dennis-van-Gils/python-dvg-pyqtgraph-threadsafe/tree/master/benchmark>`_.\nIt can test for different PyQtGraph versions and Qt libraries on your\nGPU of choice. I have found that the older ``pyqtgraph 0.11`` library sometimes\nresults in a better performance than ``pyqtgraph 0.12`` on integrated GPUs.\nSee `benchmark results <https://github.com/Dennis-van-Gils/python-dvg-pyqtgraph-threadsafe/blob/master/benchmark/benchmark_results.rst>`_.\n\n\nAPI\n===\n\n\n``class ThreadSafeCurve(capacity: Optional[int], linked_curve: pg.PlotDataItem, shift_right_x_to_zero: bool = False, use_ringbuffer = None)``\n---------------------------------------------------------------------------------------------------------------------------------------------\n\n    Provides the base class for a thread-safe plot *curve* to which\n    (x, y)-data can be safely appended or set from out of any thread. It\n    will wrap around the passed argument ``linked_curve`` of type\n    ``pyqtgraph.PlotDataItem`` and will manage the (x, y)-data buffers\n    underlying the curve.\n\n    Intended multi-threaded operation: One or more threads push new data\n    into the ``ThreadSafeCurve``-buffers. Another thread performs the GUI\n    refresh by calling ``update()`` which will redraw the curve according\n    to the current buffer contents.\n\n    Args:\n        capacity (``int``, optional):\n            When an integer is supplied it defines the maximum number op points\n            each of the x-data and y-data buffers can store. The x-data buffer\n            and the y-data buffer are each a ring buffer. New readings are\n            placed at the end (right-side) of the buffer, pushing out the oldest\n            readings when the buffer has reached its maximum capacity (FIFO).\n            Use methods ``appendData()`` and ``extendData()`` to push in new\n            data.\n\n            When ``None`` is supplied the x-data and y-data buffers are each a\n            regular array buffer of undefined length. Use method ``setData()``\n            to set the data.\n\n        linked_curve (``pyqtgraph.PlotDataItem``):\n            Instance of ``pyqtgraph.PlotDataItem`` to plot the buffered\n            data out into.\n\n        shift_right_x_to_zero (``bool``, optional):\n            When plotting, should the x-data be shifted such that the\n            right-side is always set to 0? Useful for history charts.\n\n            Default: False\n\n        use_ringbuffer (``bool``, deprecated):\n            Deprecated since v3.1.0. Defined for backwards compatibility.\n            Simply supply a value for ``capacity`` to enable use of a ring\n            buffer.\n\n    Attributes:\n        x_axis_divisor (``float``):\n            The x-data in the buffer will be divided by this factor when the\n            plot curve is drawn. Useful to, e.g., transform the x-axis units\n            from milliseconds to seconds or minutes.\n\n            Default: 1\n\n        y_axis_divisor (``float``):\n            Same functionality as ``x_axis_divisor``.\n\n            Default: 1\n\nMethods\n-------\n* ``appendData(x, y)``\n    Append a single (x, y)-data point to the ring buffer.\n\n* ``extendData(x_list, y_list)``\n    Extend the ring buffer with a list of (x, y)-data points.\n\n* ``setData(x_list, y_list)``\n    Set the (x, y)-data of the regular array buffer.\n\n* ``update(create_snapshot: bool = True)``\n    Update the data behind the curve by creating a snapshot of the\n    current contents of the buffer, and redraw the curve on screen.\n\n    You can suppress updating the data behind the curve by setting parameter\n    ``create_snapshot`` to False. The curve will then only be redrawn\n    based on the old data. This is useful when the plot is paused.\n\n* ``clear()``\n    Clear the contents of the curve and redraw.\n\n* ``name()``\n    Get the name of the curve.\n\n* ``isVisible() -> bool``\n* ``setVisible(state: bool = True)``\n\n* ``setDownsampling(*args, **kwargs)``\n    All arguments will be passed onto method\n    ``pyqtgraph.PlotDataItem.setDownsampling()`` of the underlying curve.\n\n\nProperties\n----------\n* ``size -> Tuple[int, int]``:\n    Number of elements currently contained in the underlying (x, y)-\n    buffers of the curve. Note that this is not necessarily the number of\n    elements of the currently drawn curve. Instead, it reflects the current\n    sizes of the data buffers behind it that will be drawn onto screen by\n    the next call to ``update()``.\n\n``class HistoryChartCurve(capacity: int, linked_curve: pg.PlotDataItem)``\n--------------------------------------------------------------------------\n    Bases: ``ThreadSafeCurve``\n\n    Provides a thread-safe curve with underlying ring buffers for the\n    (x, y)-data. New readings are placed at the end (right-side) of the\n    buffer, pushing out the oldest readings when the buffer has reached its\n    maximum capacity (FIFO). Use methods ``appendData()`` and\n    ``extendData()`` to push in new data.\n\n    The plotted x-data will be shifted such that the right-side is always\n    set to 0. I.e., when ``x`` denotes time, the data is plotted backwards\n    in time, hence the name *history* chart.\n\n    See class ``ThreadSafeCurve`` for more details.\n\n``class BufferedPlotCurve(capacity: int, linked_curve: pg.PlotDataItem)``\n--------------------------------------------------------------------------\n    Bases: ``ThreadSafeCurve``\n\n    Provides a thread-safe curve with underlying ring buffers for the\n    (x, y)-data. New readings are placed at the end (right-side) of the\n    buffer, pushing out the oldest readings when the buffer has reached its\n    maximum capacity (FIFO). Use methods ``appendData()`` and\n    ``extendData()`` to push in new data.\n\n    See class ``ThreadSafeCurve`` for more details.\n\n``class PlotCurve(capacity: int, linked_curve: pg.PlotDataItem)``\n--------------------------------------------------------------------------\n    Bases: ``ThreadSafeCurve``\n\n    Provides a thread-safe curve with underlying regular array buffers\n    for the (x, y)-data. Use method ``setData()`` to set the data.\n\n    See class ``ThreadSafeCurve`` for more details.\n\n``class LegendSelect(curves: List[Union[pg.PlotDataItem, ThreadSafeCurve]], hide_toggle_button: bool = False, box_bg_color: QtGui.QColor = QtGui.QColor(0, 0, 0), box_width: int = 40, box_height: int = 23, parent=None)``\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    Bases: ``PyQt5.QtCore.QObject``\n\n    Creates and manages a legend of all passed curves with checkboxes to\n    show or hide each curve. The legend ends with a push button to show or\n    hide all curves in one go. The full set of GUI elements is contained in\n    attribute ``grid`` of type ``PyQt5.QtWidget.QGridLayout`` to be added to\n    your GUI.\n\n    The initial visibility, name and pen of each curve will be retrieved\n    from the members within the passed curves, i.e.:\n\n        * ``curve.isVisible()``\n        * ``curve.name()``\n        * ``curve.opts[\"pen\"]``\n\n    Example grid::\n\n        □ Curve 1  [  /  ]\n        □ Curve 2  [  /  ]\n        □ Curve 3  [  /  ]\n        [ Show / Hide all]\n\n    Args:\n        linked_curves (``List[Union[pyqtgraph.PlotDataItem, ThreadSafeCurve]]``):\n            List of ``pyqtgraph.PlotDataItem`` or ``ThreadSafeCurve`` to be\n            controlled by the legend.\n\n        hide_toggle_button (``bool``, optional):\n            Default: False\n\n        box_bg_color (``QtGui.QColor``, optional):\n            Background color of the legend boxes.\n\n            Default: ``QtGui.QColor(0, 0, 0)``\n\n        box_width (``int``, optional):\n            Default: 40\n\n        box_height (``int``, optional):\n            Default: 23\n\n    Attributes:\n        chkbs (``List[PyQt5.QtWidgets.QCheckbox]``):\n            List of checkboxes to control the visiblity of each curve.\n\n        painted_boxes (``List[PyQt5.QtWidgets.QWidget]``):\n            List of painted boxes illustrating the pen of each curve.\n\n        qpbt_toggle (``PyQt5.QtWidgets.QPushButton``):\n            Push button instance that toggles showing/hiding all curves in\n            one go.\n\n        grid (``PyQt5.QtWidgets.QGridLayout``):\n            The full set of GUI elements combined into a grid to be added\n            to your GUI.\n\nChangelog\n=========\n\n3.2.3 (2022-10-11)\n------------------\n* Fixed bug in PyQt6: `QMessageBox.Yes` --> `QMessageBox.StandardButton.Yes`\n\n3.2.2 (2022-09-18)\n------------------\n* Updated discussion on benchmarks\n* The batch file for auto-creation of the conda environments found in the\n  benchmark folder now uses the conda-forge channel.\n\n3.2.1 (2022-09-17)\n------------------\n* Neater mechanism to support both PyQt and PySide\n* Added benchmarks\n* Improved demos\n\n3.2.0 (2022-09-13)\n------------------\n* Added support for PyQt5, PyQt6, PySide2 and PySide6 as suggested via a pull\n  request by Mathijs van Gorcum (https://github.com/mvgorcum).\n\n3.1.0 (2021-05-10)\n------------------\n* Removed redundant argument ``capacity`` from init ``PlotCurve()``. It is\n  not using a ringbuffer and, hence, does not need a capacity.\n\n3.0.1 (2020-08-07)\n------------------\nBug-fixes:\n\n* The use of ``typing.TypedDict`` broke support under Python 3.6\n  and 3.7. Fixed by conditional import ``typing_extensions``.\n* Curve plotting was broken when ``setClipToView(True)`` and the curve\n  data extended past the viewbox limits, when not using OpenGL. The cause was\n  my incorrect calculation of ``connect``. Fixed by commenting out ``connect``\n  again. Curves will now show continuously (linear interpolation) whenever a NaN\n  is encountered, instead of as correctly fragmented. That's acceptable.\n\n3.0.0 (2020-08-07)\n------------------\n* Renamed parameter ``LegendSelect.curves`` to\n  ``LegendSelect.linked_curves``\n* Changed base of class ``LegendSelect()`` from ``QWidget`` to ``QObject``\n* Added class ``PlotManager()``\n\n2.0.1 (2020-08-03)\n------------------\n* Workaround: ``PyQt5 >= 5.12.3`` causes a bug in ``PyQtGraph`` where a\n  curve won't render if it contains NaNs (but only in the case when OpenGL is\n  disabled). The curve will now be displayed correctly, i.e., fragmented\n  whenever a NaN is encountered. When OpenGL is enabled, linear interpolation\n  will occur at the gaps as per ``pyqtgraph.plotCurveItem.paintGL()``.\n\n2.0.0 (2020-08-02)\n------------------\n* Method names are now conform the ``PyQtGraph`` naming style. I.e.\n  ``setData()`` vs. ``set_data()``, etc.\n* The default values of ``PyQtGraph`` are no longer being overwritten.\n* Added class ``LegendSelect``\n\n1.0.0 (2020-07-30)\n------------------\n* First release on PyPI\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dennis-van-Gils/python-dvg-pyqtgraph-threadsafe",
    "keywords": "ring buffer,circular buffer,pyqtgraph,thread safe,chart,plot",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dvg-pyqtgraph-threadsafe",
    "package_url": "https://pypi.org/project/dvg-pyqtgraph-threadsafe/",
    "platform": null,
    "project_url": "https://pypi.org/project/dvg-pyqtgraph-threadsafe/",
    "project_urls": {
      "Homepage": "https://github.com/Dennis-van-Gils/python-dvg-pyqtgraph-threadsafe",
      "Issue Tracker": "https://github.com/Dennis-van-Gils/python-dvg-pyqtgraph-threadsafe/issues"
    },
    "release_url": "https://pypi.org/project/dvg-pyqtgraph-threadsafe/3.2.3/",
    "requires_dist": [
      "typing-extensions",
      "numpy (~=1.15)",
      "pyqtgraph (~=0.11)",
      "dvg-ringbuffer (~=1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "PyQtGraph library providing thread-safe plot curves with underlying (ring) buffers.",
    "version": "3.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17063776,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60f8c0cc92041b47564fd0937435dd86212196ad96f2296e2db3c43b60cddab0",
        "md5": "a4d0ee3f41100cc26c272976ced763e5",
        "sha256": "342805d164aebdf4d70748094fb60401e5378eb702b73f3c534d1300ab1e6cf7"
      },
      "downloads": -1,
      "filename": "dvg_pyqtgraph_threadsafe-3.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a4d0ee3f41100cc26c272976ced763e5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15025,
      "upload_time": "2022-10-11T15:59:25",
      "upload_time_iso_8601": "2022-10-11T15:59:25.986662Z",
      "url": "https://files.pythonhosted.org/packages/60/f8/c0cc92041b47564fd0937435dd86212196ad96f2296e2db3c43b60cddab0/dvg_pyqtgraph_threadsafe-3.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f18eebc6c8b610565738330185c807d25ceb920c1ac119961890f61877486ed",
        "md5": "79067457bf92ae5bb84af2497857815e",
        "sha256": "708fc63916a327769ea733773645064d0dcaca238e067054c2124a5f1d262cc2"
      },
      "downloads": -1,
      "filename": "dvg-pyqtgraph-threadsafe-3.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "79067457bf92ae5bb84af2497857815e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 102199,
      "upload_time": "2022-10-11T15:59:28",
      "upload_time_iso_8601": "2022-10-11T15:59:28.052042Z",
      "url": "https://files.pythonhosted.org/packages/4f/18/eebc6c8b610565738330185c807d25ceb920c1ac119961890f61877486ed/dvg-pyqtgraph-threadsafe-3.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}