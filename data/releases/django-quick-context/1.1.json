{
  "info": {
    "author": "Bharat Chauhan",
    "author_email": "tell.bhch@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# django-quick-context\n\nA django app for quickly setting global context variables on all templates. \n\nIt also allows fetching model instances from the database directly in the templates, which can be \nvery useful in certain cases such as when the views are controlled by a third party app. \nSee [Example 2](#example-2) for more.\n\n## Installation\n\n```\npip install django-quick-context\n```\n\nThen add `'quick_context.context_processors.quick'` to your `context_processors`:\n\n```python\n# settings.py\n\nTEMPLATES = [\n    {\n        # ...\n        'OPTIONS': {\n            'context_processors': [\n                # ...\n                'quick_context.context_processors.quick',\n            ],\n        },\n    },\n]\n```\n\n## Usage\n\n### Example 1\n\nLet's say you want to make a variable called `currency` available in all templates. \nPut this code in a file where it gets loaded on startup (such as project's or app's `__init__.py` or `apps.py` file).\n\n```python\nfrom quick_context import ContextRegistry\n\nContextRegistry.register(name='currency', value='USD')\n```\n\nThe `quick_context` app makes a variable called `quick` available to every template. \nEvery variable that you register with the `ContextRegistry`, it will be available \nas an attribute of the `quick` variable.\n\nSo, you can access the `currency` variable in the templates like this:\n\n```\n{{ quick.currency }}\n```\n\n### Example 2\n\nThis is a more useful case for using `quick_context`. \n\nSuppose you have a `Notice` model which allows you to display different notices \non different pages in your website. For example, 'Home' page has a different notice \nand 'Contact' page has a different notice.\n\nA sample `Notice` model: \n\n```python\n# models.py\n\nclass Notice(models.Model):\n    name = models.CharField(unique=True)\n    message = models.CharField()\n\n# Let's create a few notices\nNotice.objects.create(name='homepage_notice', message='...')\nNotice.objects.create(name='contact_notice', message='...')\nNotice.objects.create(name='about_notice', message='...')\n```\n\nNow, to include a notice in the template, you'll have to send it the template \ncontext from the view:\n\n```python\n# views.py\n\ndef home_view(request):\n    notice = Notice.objects.get(name='homepage_notice')\n    context = {'notice': notice}\n\n    return ...\n\ndef contact_view(request):\n    # ... same as above ...\n\n# repeat for other view ...\n```\n\nAs you can see, this process is repetitve.\n\n`quick_context` provides a better way to do it. \n\nFirst, register the `Notice` model:\n\n```python\n# models.py\n\nfrom quick_context import ContextRegistry\n\nclass Notice(...):\n    ...\n\nContextRegistry.register_model(name='notice', model=Notice, lookup_field='name')\n```\n\nNow, you can access a notice for a particular page without having to pass it \nfrom the views:\n\n```\n{{ quick.notice.homepage_notice.message }} -> displays message of \"homepage_notice\"\n\n{{ quick.notice.contact_notice.message }} -> displays message of \"contact_notice\"\n```\n\nThe `lookup_field` must be a field which has `unique=True`. This is important \nbecause behind the scenes, `quick_context` just does a `Model.objects.get(...)` lookup \nand `get` expects a single result from the database. If there are more than one results, \nDjango will throw a `MultipleObjectsReturned` exception.\n\n## API\n\n#### `ContextRegistry.register(cls, name, value)`\n\nRegister a global context variable.\n\n**`name`**: (string) Name of the variable.  \n**`value`**: (any) A value for the variable. It can be anything: a string, a class, \ndictionary, etc. \n\n#### `ContextRegistry.register_model(cls, name, model, lookup_field)`\n\nRegister a model.\n\n**`name`**: (string) Name of the variable.  \n**`model`**: (class) The model class.  \n**`lookup_field`**: (string) Name of the field to use for the lookup. Ensure that this \nfield has `unique=True` because `quick_context` just does a `Model.objects.get(...)` \nlookup and `get` expects a single result from the database. If there are more than \none results, Django will throw a `MultipleObjectsReturned` exception.\n\n#### `ContextRegistry.update(cls, name, value)`\n\nUpdates the value of an already registered variable.\n\n**`name`**: (string) Name of the variable.  \n**`value`**: (any) New value for the variable.\n\n\n#### `ContextRegistry.get_registry(cls)`\n\nReturns a list of all the registered variables.\n\n## License\n\n[BSD-3-Clause](LICENSE.txt)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.github.com/bhch/django-quick-context",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-quick-context",
    "package_url": "https://pypi.org/project/django-quick-context/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-quick-context/",
    "project_urls": {
      "Homepage": "https://www.github.com/bhch/django-quick-context"
    },
    "release_url": "https://pypi.org/project/django-quick-context/1.1/",
    "requires_dist": [
      "django (>=1.11)"
    ],
    "requires_python": ">=3.4",
    "summary": "A django app for quickly setting global context variables on all templates.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12081852,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1ba03a5738214e7263d898a2d57e2a450bf9ee478599e87dedc1382c6f39e56",
        "md5": "f154ee78ba9836dcec9842df8582c2c1",
        "sha256": "9af4aa6025fc039bd9e47d55bba9a7dd3e8c00f85f0fadede9dffac8c5beec6c"
      },
      "downloads": -1,
      "filename": "django_quick_context-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f154ee78ba9836dcec9842df8582c2c1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 6329,
      "upload_time": "2021-02-22T15:47:27",
      "upload_time_iso_8601": "2021-02-22T15:47:27.373607Z",
      "url": "https://files.pythonhosted.org/packages/f1/ba/03a5738214e7263d898a2d57e2a450bf9ee478599e87dedc1382c6f39e56/django_quick_context-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4b0439144d4e710782d04e2a2275ecb873e55ccb1f5c23b9ac274481f514045",
        "md5": "96f930883a881d39028b86fc8890bc3f",
        "sha256": "ca81efd582ba5f57744b8e87b3c584448472474a3eeea847ead8d033d8140e6b"
      },
      "downloads": -1,
      "filename": "django-quick-context-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "96f930883a881d39028b86fc8890bc3f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 5720,
      "upload_time": "2021-02-22T15:47:29",
      "upload_time_iso_8601": "2021-02-22T15:47:29.892810Z",
      "url": "https://files.pythonhosted.org/packages/f4/b0/439144d4e710782d04e2a2275ecb873e55ccb1f5c23b9ac274481f514045/django-quick-context-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}