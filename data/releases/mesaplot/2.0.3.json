{
  "info": {
    "author": "Robert Farmer",
    "author_email": "robert.j.farmer37@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Astronomy"
    ],
    "description": "\n\n[![DOI](https://zenodo.org/badge/30720868.svg)](https://zenodo.org/badge/latestdoi/30720868)\n\n\n# mesaplot\nLibrary of python routines to read MESA ouput files and plot MESA quantites\n\n## Installation instructions:\ngit clone the repo then call\n````bash\npython3 setup.py install \n````\n\nDepending on choice of python version, --user can also be passed to install locally\n\n````bash\nmake\n````\n\nCan be called as well\n\n## Testing\n\n````bash\npytest\n````\n\nTo run tests for current python version\n\n````tox\ntox\n````\n\nwill run tests for several python versions\n\n## Contributing\n\nBug reports should go to githubs issue tracker.\n\nRequests for new features should also got to the issue tracker.\n\nIf you wish to submit your own fix/new feature please send a pull request.\n\n\n## Reading data:\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\n````\n\nNow m contains all the useful stuff\n\n### History files\n````python\nm.loadHistory()\n````\nThis loads up the history file data by default it will look for LOGS/history.data.\nBut if you have a different folder to look at then you can either\n\n````python\nm.log_fold='new_folder/LOGS/'\nm.loadHistory()\n````\nor\n````python\nm.loadHistory(f='new_folder/LOGS/')\n````\nNote this will automatically clean the history data of retries, backups and restarts. To write that data back to disk\n````python\nm.scrubHistory()\n````\nWhich will create a file \"LOGS/history.data.scrubbed\" if you don't want that then:\n````python\nm.scrubHistory(fileOut='newFile')\n````\n\nData can be accessed as m.hist.data['COLUMN_NAME'] or m.hist.COLUMN_NAME. The second option is\nalso tab completable. The header information is either m.hist.head['COLUMN_NAME'] or m.hist.COLUMN_NAME.\n\n### Profile files\nTo load a profile file its:\n````python\nm.loadProfile()\n````\nAgain you change the LOGS folder either with log_fold or f=.\nTo choose which file to load, either:\n````python\nm.loadProfile(num=MODEL_NUMBER)\nor\nm.loadProfile(prof=PROFILE_NUMBER)\n````\nWhere MODEL_NUMBER is a MESA model number and PROFILE_NUMBER is the number in the profile file name.\nYou can also set a mode\n````python\nm.loadProfile(num=MODEL_NUMBER,mode='first|lower|upper|nearest')\n````\nThis is for when the model you want isn't in the data. Either we load the first model, the model just before the one you want, the model just after the one you want or the nearest (above or below) the model you want.\nThere are also two special model numbers 0 for first model and a negative number that counts backwards (-1 is the last model, -2 is last but one etc)\n\nData can be accessed as m.prof.data['COLUMN_NAME'] or m.prof.COLUMN_NAME. The second option is\nalso tab completable. The header information is either m.prof.head['COLUMN_NAME'] or m.prof.COLUMN_NAME.\n\n\n## Plotting\n\nHere we'll show the basics of plotting, there are more complex examples for each section. Commands will assume you are in a MESA work folder, such that the data is in a LOGS/ folder.\n\n\n### History data\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadHistory()\np.plotHistory(m,xaxis='star_age',y1='log_center_T',y2='he_core_mass')\n````\n\n### Profile data\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadProfile(num=-1)\np.plotProfile(m,xaxis='mass',y1='logT',y2='ye')\n````\n\n### HR\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadHistory()\np.plotHR(m)\n````\n\n### Kippenhan's\n\nKippenhan plot with model number vs mass. Note all Kippenhan plots\nrequire your history file to have both mixing_regions X and burning_regions Y\nset in your history_columns.list file, where X and Y are integers that \nspecify the maximum number of mixing/burning\nzones in your model, values around 20 will usually suffice. Models going to\ncore collapse may want to increase this limit to 40.\n\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadHistory()\np.plotKip(m,show_mass_loc=True)\n````\n\nKippenhan plot with star age vs mass\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadHistory()\np.plotKip2(m)\n````\n\nGeneric kippenhan plotter\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadHistory()\np.plotKip3(m,show_mass_loc=True)\n````\n![Kippenhan plotKip3 SAGB star](/examples/kip.png?raw=true \"Kippenhan plot\")\n\nNew way of doing plotKip2 (star age vs mass)\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadHistory()\np.plotKip3(m,xaxis='star_age',age_lookback=True,age_log=True)\n````\n![Kippenhan plotKip3 SAGB star 2](/examples/kip_age.png?raw=true \"Kippenhan plot 2\")\n\nProfile based kippenhans\n````python\nimport mesaPlot as mp\n\nm=mp.MESA()\nm.loadHistory()\nm.loadProfile(num=1)\np=mp.plot()\np.plotKip3(m,plot_type='profile',xaxis='model_number',yaxis='mass',zaxis='logRho',mod_min=1,mod_max=3000)\n````\n![Kippenhan plotKip3 SAGB star 3](/examples/kip_prof.png?raw=true \"Kippenhan plot 3\")\n\n\n### Abundances\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadProfile(num=-1)\np.plotAbun(m)\n````\n\n![Basic abundance plot](/examples/abun_basic.png?raw=true \"Abundance plot\")\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadProfile(num=-1)\np.plotAbunByA(m)\n````\n\n![Production plot](/examples/abun_bya.png?raw=true \"Production plot\")\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadProfile(num=-1)\nm2=mp.MESA()\nm2.log_fold='../some/other/mesa/result'\nm2.loadprofile(num=-1)\np.plotAbunByA(m,m2=m2)\n````\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\np.set_solar('ag89')\nm.loadProfile(num=-1)\n#Plot the mass fractions relative to solar\np.plotAbunByA(m,stable=True)\n````\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\np.set_solar('ag89')\nm.loadProfile(num=-1)\nm2=mp.MESA()\nm2.log_fold='../some/other/mesa/result'\nm2.loadprofile(num=-1)\n#Plot the mass fractions relative to solar relative to 2nd model\np.plotAbunByA(m,m2=m2,stable=True)\n````\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadHistory()\n#Use the data in the history file at model_number==model\np.plotAbunByA(m,plot_type='history',model=1000,prefix='log_center_')\n````\n\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\np.set_solar('ag89')\nm.loadHistory()\n#Use the data in the history file, plotting relative to another model number after decaying the isotopes to thier stable versions\np.plotAbunByA(m,plot_type='history',model=1000,model2=1,prefix='surface_',stable=True)\n````\n\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadProfile(num=-1)\np.plotAbunPAndN(m)\n````\n\n![Nuclear abundances plot](/examples/abun_bypandn.png?raw=true \"Nuclear chart\")\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadProfile(num=-1)\np.plotAbunPAndN(m,plot_type='history',model=1000,prefix='log_center_')\n````\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadHistory()\np.plotAbunHist(m)\n````\n\n### Burn data\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadProfile(num=-1)\np.plotBurn(m)\n````\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadHistory()\np.plotBurnHist(m)\n````\n\n### Dynamos\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadProfile(num=-1)\np.plotDynamo(m)\n````\n\n![Dynamo  50M_z2m2_high_rotation](/examples/dynamo1.png?raw=true \"Dynamo 1 plot\")\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadProfile(num=-1)\np.plotDyanmo2(m)\n````\n\n![Dyanmo 2 50M_z2m2_high_rotation](/examples/dynamo2.png?raw=true \"Dynamo 2 plot\")\n\n### Angular momentum mixing\n\n````python\nimport mesaPlot as mp\nm=mp.MESA()\np=mp.plot()\nm.loadProfile(num=-1)\np.plotAngMom(m)\n````\n\n### Time series Profile plots\n````python\nimport mesaPlot as mp\n\nm=mp.MESA()\nm.loadHistory()\nm.loadProfile(num=1)\np=mp.plot()\np.plotSliderProf(m,'plotAbun')\n````\n\nPassing in a string for the name of a plotting function, (only ones based on profile data).\nThis will show that plot with a slider that can be used to iterate over the available profile files\nplotSliderProf will take any extra arguments passed to it and\npass them to the plotting function.\n\n\n### Stacked plots\n\n### Multi profile plots\n\n### Grid plotting\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rjfarmer/mesaPlot",
    "keywords": "",
    "license": "GPLv2+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mesaPlot",
    "package_url": "https://pypi.org/project/mesaPlot/",
    "platform": "unix",
    "project_url": "https://pypi.org/project/mesaPlot/",
    "project_urls": {
      "Homepage": "https://github.com/rjfarmer/mesaPlot"
    },
    "release_url": "https://pypi.org/project/mesaPlot/2.0.3/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "scipy",
      "pandas",
      "pytest",
      "pytest (>=6.0) ; extra == 'testing'",
      "tox (>=3.24) ; extra == 'testing'"
    ],
    "requires_python": ">=3.6",
    "summary": "Library for reading and plotting MESA data",
    "version": "2.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15188938,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e31190dfdaafa109fed2f2c41db14ab10d8b35c9f0d2ff3772f810f83672c3f",
        "md5": "ff5e474538137664580b522236101bd8",
        "sha256": "3eda945495ad3fbaee3b9e22b325cf7bd79e55dc2b3223f226a0fb0c49b399ba"
      },
      "downloads": -1,
      "filename": "mesaPlot-2.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff5e474538137664580b522236101bd8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 50870,
      "upload_time": "2021-12-14T13:37:30",
      "upload_time_iso_8601": "2021-12-14T13:37:30.634500Z",
      "url": "https://files.pythonhosted.org/packages/2e/31/190dfdaafa109fed2f2c41db14ab10d8b35c9f0d2ff3772f810f83672c3f/mesaPlot-2.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c431d54227c1c875f56e8b158aadb1488e6ee218d35fb9fc57169c59bcd368a6",
        "md5": "868318eba920a5412c98937aa5eb0cad",
        "sha256": "969204eca98174bc723e263c9159e733c90886a0f1a1cf4e9076344f3e057b61"
      },
      "downloads": -1,
      "filename": "mesaPlot-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "868318eba920a5412c98937aa5eb0cad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4374721,
      "upload_time": "2021-12-14T13:37:32",
      "upload_time_iso_8601": "2021-12-14T13:37:32.343026Z",
      "url": "https://files.pythonhosted.org/packages/c4/31/d54227c1c875f56e8b158aadb1488e6ee218d35fb9fc57169c59bcd368a6/mesaPlot-2.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}