{
  "info": {
    "author": "Teemu Lehtinen",
    "author_email": "teemu.t.lehtinen@aalto.fi",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# mooc-grader-cont i.e. mgcont\n\nRuns a Docker container for grading an exercise in\n[mooc-grader](https://github.com/apluslms/mooc-grader/) style. This stand-alone\nproject was initiated to accelerate development of automatically assessed\nexercises for mooc-grader. This command-line tool supports one-liner testing\nand opening shell for debugging inside grading containers.\n\nThere are components that could be shared with mooc-grader but currently are\nduplicated – it is up to the mooc-grader project to assess if it makes sense to\ncreate dependencies to ensure identical grading execution.\n\n\n### Installation\n\nRequires [Docker](https://www.docker.com/) installation. The tool is available\nfrom PyPi.\n\n    # pip install mgcont\n\n### Usage\n\n    # mgcont --help\n    usage: __main__.py [-h] [--receiver] [--cleanup] [-c CONFIG]\n                       [-f FILE [FILE ...]] [-d DIR] [--values VALUES] [--debug]\n\n    Constructs and runs grading containers to test exercises for mooc-grader. Use\n    \"docker attach mgcont_receiver\" to view grading results.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --receiver            only start the receiver\n      --cleanup             remove any remaining containers and temporary files\n      -c CONFIG, --config CONFIG\n                            a mooc-grader exercise configuration yaml/json\n      -f FILE [FILE ...], --file FILE [FILE ...]\n                            a file to submit\n      -d DIR, --dir DIR     a directory including the files to submit\n      --values VALUES       a yaml/json file to use as posted values, \"meta\" can\n                            be defined to simulate server provided meta-data\n      --debug               run a debug shell instead of the configured grading\n                            command\n\nWhen mgcont is run, the system always creates a receiver-container and\nconfigures it to receive grading results from other mgcont-commands. When\nattached to a terminal, the receiver logs every HTTP request until the receiver\nis stopped with `ctrl-c`. We recommend to open a second terminal and set it up\nto display grading results before testing exercises, e.g.\n\n    # mgcont --receiver\n    View with: docker attach mgcont_receiver\n    # docker attach mgcont_receiver\n\nThen we can use the first terminal to test exercises and the second to view the\ngrading results. For example, following submits a single selected file to the\nselected exercise for grading. If the exercise is working correctly the result\nwill appear in the receiver terminal.\n\n    # mgcont -c exercise01/config.yaml -f /path/my_program.py\n\nIn contrast to the previous command, following will not run the configured\ngrading `cmd` inside the container but rather execute a bash shell and attach\nto the running container. This allows to e.g. inspect the file system state,\nrun distinct parts of the designed grading process and inspect their outputs,\nand finally run `grade` to see how the collected feedback and results are\ndelivered to the receiver terminal.\n\n    # mgcont -C exercise01/config.yaml --file /path/my_program.py --debug\n    Running debug shell instead of the configured cmd. Attach to it with docker.\n      cmd:     /exercise/run.sh\n      shell:   docker attach infallible_tharp\n    # docker attach infallible_tharp\n    root@1b2d5aaccbd3:/submission# ls -al\n    total 12\n    drwxr-xr-x 2 1496283 70000 4096 Oct 27 11:45 .\n    drwxr-xr-x 1 root    root  4096 Oct 27 11:45 ..\n    -rw-r--r-- 1 1496283 70000  811 Oct 27 11:45 e01_program.py\n    root@1b2d5aaccbd3:/submission# ls /exercise/\n    config.yaml  grader_tests.py  tests.py  run.sh\ttest_config.yaml\n    root@1b2d5aaccbd3:/submission# capture echo \"Results!\"\n    root@1b2d5aaccbd3:/submission# capture echo \"TotalPoints: 1\"\n    root@1b2d5aaccbd3:/submission# capture echo \"MaxPoints: 2\"\n    root@1b2d5aaccbd3:/submission# grade\n    root@1b2d5aaccbd3:/submission# exit\n\nThe following is a convenience command to clean up temporary directories and\nany remaining debug containers, receiver container, docker network, and\ntemporary submission files in the current directory (submission_tmp).\n\n    # mgcont --cleanup\n\nTip: it is a good idea to include `submission_tmp/` in the `.gitignore` to\navoid accidental commits of temporary files.\n\n### Exercise design (for mooc-grader)\n\nThe system has been designed to support automated assessment & feedback – most\ntypically for various types of programming exercises but the design is not\nlimiting the exercises to that use only. Along instructional material, the\nexercise configuration defines post values and/or files that the student\nsubmits for grading. The exercise furthermore defines a `container -> image`\nthat is run for the grading. Various images supporting different programming\nlanguages & environments are available under **apluslms** in\n[GitHub](https://github.com/orgs/apluslms/repositories) and\n[dockerhub](https://hub.docker.com/). The following mounts are made for the\ncontainer\n\n* `/submission` = the submitted values and files\n* `/exercise` = path configured in `container -> mount`\n* other read-only paths configured in `container -> mounts`\n\nThe exercise runs the configured `container -> cmd` inside the container. At\nthe end, the grading must HTTP post the results to `$REC/container-post`. Any\ncontainers that inherit from `apluslms/grading-base` will use a cmd-wrapper\nthat automatically posts the results at the end, unless grading scripts have\nexecuted `grade` to post them before.\n\n* [Exercise configuration documented at mooc-grader](https://github.com/apluslms/mooc-grader/tree/master/courses)\n* [The grading container base](https://github.com/apluslms/grading-base)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/teemulehtinen/mooc-grader-cont",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mgcont",
    "package_url": "https://pypi.org/project/mgcont/",
    "platform": null,
    "project_url": "https://pypi.org/project/mgcont/",
    "project_urls": {
      "Homepage": "https://github.com/teemulehtinen/mooc-grader-cont"
    },
    "release_url": "https://pypi.org/project/mgcont/1.0.4/",
    "requires_dist": [
      "pyyaml",
      "docker"
    ],
    "requires_python": ">=3.6",
    "summary": "Creates an exercise grading container",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15696381,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee728d61501727fe46fa09671a6e7038f1fe61c95590de52075389dd2d7a7ea3",
        "md5": "3adc673e1f1f346b5ecbbde064f1489d",
        "sha256": "c88c44204d28542bf3e823272e16bcb83e7f2ed47a517f93f72c9bfe42f1d452"
      },
      "downloads": -1,
      "filename": "mgcont-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3adc673e1f1f346b5ecbbde064f1489d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10488,
      "upload_time": "2022-11-08T09:48:26",
      "upload_time_iso_8601": "2022-11-08T09:48:26.474878Z",
      "url": "https://files.pythonhosted.org/packages/ee/72/8d61501727fe46fa09671a6e7038f1fe61c95590de52075389dd2d7a7ea3/mgcont-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e0d0b8e3951c467135e2e2ee50eddd5dd62b80c0d3ba8bd613e5cbcc527f575",
        "md5": "c5d58cd2069ca5515741792bb250d2ba",
        "sha256": "ce884b9f600bc1f0c4834204d39264e30edb27adc8351559d64b56c5c3ef5116"
      },
      "downloads": -1,
      "filename": "mgcont-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c5d58cd2069ca5515741792bb250d2ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11289,
      "upload_time": "2022-11-08T09:48:30",
      "upload_time_iso_8601": "2022-11-08T09:48:30.701621Z",
      "url": "https://files.pythonhosted.org/packages/2e/0d/0b8e3951c467135e2e2ee50eddd5dd62b80c0d3ba8bd613e5cbcc527f575/mgcont-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}