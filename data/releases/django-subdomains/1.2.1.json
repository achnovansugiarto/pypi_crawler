{
  "info": {
    "author": "ted kaemming",
    "author_email": "ted@kaemming.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# django-subdomains\n\n## Installation\n\nThis application is available via the\n[Python Package Index](http://pypi.python.org/pypi/django-subdomains) and can\nbe installed with any Python package manager, such as `pip` or `easy_install`\nby running:\n\n    pip install django-subdomains\n\nor\n\n    easy_install django-subdomains\n\nIt is highly recommended to use package version numbers to ensure API\nconsistency.\n\nTo install the latest version from the repository source, clone the repository\nand then run `make install` in the repository directory.\n\n## Configuring Django Settings\n\n1. Add `subdomains.middleware.SubdomainURLRoutingMiddleware` to your\n`MIDDLEWARE_CLASSES` in your Django settings file.\n2. Set up your `SUBDOMAIN_URLCONFS` dictionary in your Django settings file.\n(See the example below.)\n3. Make sure that you've set up your `SITE_ID` in your Django settings file, \nand that the `domain` attribute corresponds to the proper domain name.\n4. ???\n5. Profit!\n\n## Example Configuration\n\n    # This is the URL that will be loaded for any subdomain that is not listed\n    # in SUBDOMAIN_URLCONFS. If you're going use wildcard subdomains, this will\n    # correspond to the wildcarded subdomain. \n    # For example, 'accountname.mysite.com' will load the ROOT_URLCONF, since \n    # it is not defined in SUBDOMAIN_URLCONFS.\n    ROOT_URLCONF = 'myproject.urls.account'\n    \n    SUBDOMAIN_URLCONFS = {\n        # The format for these is 'subdomain': 'urlconf'\n        None: 'myproject.urls.frontend',\n        'www': 'myproject.urls.frontend',\n        'api': 'myproject.urls.api',\n    }\n\n## Usage Notes\n\nThe subdomain is also added to the request, so you can change view logic, \ndepending on it's value, like so:\n\n    def user_profile(request):\n        try:\n            # Retrieve the user account associated with the current subdomain.\n            user = User.objects.get(username=request.subdomain)\n        except User.DoesNotExist:\n            # No user matches the current subdomain, so return a generic 404.\n            raise Http404\n\n### Adding Functionality\n\nYou can also subclass `SubdomainURLRoutingMiddleware` if you'd like, to \nassociate requests with user accounts based on subdomain, etc.\n\n## Settings\n\n### `USE_SUBDOMAIN_EXCEPTION`\n\nDefault: `False`\n\nIf `USE_SUBDOMAIN_EXCEPTION` is set to `True`, an \n`subdomains.exceptions.IncorrectSiteException` will be raised if the domain\nname does not match the `django.contrib.sites.models.Site` instance specified\nby your `SITE_ID`. This setting defaults to `False`, and will instead throw a\nwarning that will not prevent your application from continuing if the `Site` \nis incorrect.\n\n### `REMOVE_WWW_FROM_SUBDOMAIN`\n\nDefault: `False`\n\nIf `REMOVE_WWW_FROM_DOMAIN` is set to `True`, the `domain` attribute of the\n`Site` model will have the `www.` portion stripped before processing. This \nallows for \"www.example.com\" to be used in the `Site`'s `domain` attribute,\nwithout subdomains being resolved to \"___.www.example.com\".\n\n## Contributing\n\nBefore submitting a patch, please make sure to run the test suite, as well as\npyflakes and PEP8 checks. These can be ran from the repository with the command\n`make check test`.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/tkaemming/django-subdomains/",
    "keywords": null,
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-subdomains",
    "package_url": "https://pypi.org/project/django-subdomains/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-subdomains/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/tkaemming/django-subdomains/"
    },
    "release_url": "https://pypi.org/project/django-subdomains/1.2.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Subdomain tools for the Django framework, including subdomain-based URL routing.",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2091000,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd52db9d1b0dbc87fdf60d99f9cdb9ff71d63449c09648afe966ff3da751f321",
        "md5": "a10156f8a9cd703cc11cca2c5bdc89d4",
        "sha256": "3fa46d4ea627767e8febba1f7e82171a6f7995f1be7f16b93873d010b99a2af1"
      },
      "downloads": -1,
      "filename": "django-subdomains-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a10156f8a9cd703cc11cca2c5bdc89d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4147,
      "upload_time": "2012-04-26T22:28:00",
      "upload_time_iso_8601": "2012-04-26T22:28:00.079965Z",
      "url": "https://files.pythonhosted.org/packages/bd/52/db9d1b0dbc87fdf60d99f9cdb9ff71d63449c09648afe966ff3da751f321/django-subdomains-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}