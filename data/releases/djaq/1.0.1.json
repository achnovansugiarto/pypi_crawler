{
  "info": {
    "author": "Paul Wolf",
    "author_email": "paul.wolf@yewleaf.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Djaq\n====\n\n|Python tests| |RTD build| |Python versions| |PyPi version| \n\n\n.. |Python tests| image:: https://github.com/paul-wolf/djaq/actions/workflows/run_unit_tests.yml/badge.svg\n   :target: https://github.com/paul-wolf/djaq/actions/workflows/run_unit_tests.yml\n   :alt: Unit test status\n   \n.. |RTD build| image:: https://readthedocs.org/projects/djaq/badge/?version=latest\n   :target: https://djaq.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. |Python versions| image:: https://img.shields.io/pypi/pyversions/djaq?color=brightgreen\n   :alt: PyPI - Python Version\n\n.. |PyPi version| image:: https://badge.fury.io/py/Djaq.svg\n   :target: https://badge.fury.io/py/Djaq\n   :alt: PyPi Version\n\nDjaq - pronounced “Jack” - is an alternative to the Django QuerySet API. \n\nWhat sets it apart: \n\n* No need to import models \n* Clearer, more natural query syntax\n* More powerful expressions \n* More consistent query syntax without resorting to hacks like ``F()`` expressions, ``annotate()``, ``aggregate()`` \n* Column expressions are entirely evaluated in the database\n* Extensible: you can write your own functions\n* Pandas: Easily turn a query into Pandas Dataframe\n\nThere is also a JSON representation of queries, so you can send queries from a\nclient. It's an instant API to your data. No need to write backend classes and\nserializers.\n\nDjaq queries are strings. A query string for our example dataset might\nlook like this:\n\n.. code:: shell\n\n   DQ(\"Book\", \"name as title, publisher.name as publisher\").go()\n\nThis retrieves a list of book titles with book publisher. But you can\nformulate far more sophisticated queries; see below. You can send Djaq\nqueries from any language, Java, Javascript, golang, etc. to a Django\napplication and get results as JSON. In contrast to REST frameworks,\nlike TastyPie or Django Rest Framework (DRF), you have natural access to\nthe Django ORM from the client.\n\nDjaq sits on top of the Django ORM. It can happily be used alongside\nQuerySets.\n\n-  `Documentation <https://djaq.readthedocs.io>`__\n-  `Installation <https://djaq.readthedocs.io/en/latest/installation.html>`__\n-  `Settings <https://djaq.readthedocs.io/en/latest/settings.html>`__\n-  `Query\n   Usage <https://djaq.readthedocs.io/en/latest/query_usage.html>`__\n-  `Sample\n   Project <https://djaq.readthedocs.io/en/latest/sample_project.html>`__\n\nHere's an example comparison between Djaq and Django QuerySets:\n\n.. code:: python\n\n   DQ(\"Book\", \"\"\"\n       sumif(rating < 3, rating, 0) as below_3,\n       sumif(rating >= 3, rating, 0) as above_3\n       \"\"\")\n\ncompared to QuerySet:\n\n.. code:: python\n   \n   from django.db.models import Count, Q\n   above_3 = Count('book', filter=Q(book__rating__gt=3))\n   below_3 = Count('book', filter=Q(book__rating__lte=3))\n   Publisher.objects.annotate(below_3=below_3).annotate(above_3=above_3)\n\nGet average, maximum, minimum price of books:\n\n.. code:: python\n\n   DQ(\"Book\", \"avg(price), max(price), min(price)\")\n\ncompared to QuerySet:\n\n.. code:: python\n\n   Book.objects.aggregate(Avg('price'), Max('price'), Min('price'))\n\nGet the difference from the average off the maximum price:\n\n.. code:: python\n\n   DQ(\"Book\", \"publisher.name, max(price) - avg(price) as price_diff\")\n\ncompared to QuerySet:\n\n.. code:: python\n\n   from django.db.models import FloatField, Avg, Max\n   Book.objects.values(\"publisher__name\")\n      .annotate(price_diff=Max('price', output_field=FloatField()) - Avg('price', output_field=FloatField()))\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/paul-wolf/djaq",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Djaq",
    "package_url": "https://pypi.org/project/Djaq/",
    "platform": null,
    "project_url": "https://pypi.org/project/Djaq/",
    "project_urls": {
      "Homepage": "https://github.com/paul-wolf/djaq"
    },
    "release_url": "https://pypi.org/project/Djaq/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A string-based Django query language",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15188014,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3b257144bacfffb73a17384c75cbbda30df69828ef9aa1cf04dff20766644fc",
        "md5": "01cfcdfe908ab75a6b4097372bba2c5e",
        "sha256": "ed0f4fbe53ed51c1d5aafa6d579be75ca9dd71ef2f7c93d3baa7841262740019"
      },
      "downloads": -1,
      "filename": "Djaq-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "01cfcdfe908ab75a6b4097372bba2c5e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29606,
      "upload_time": "2022-06-08T07:32:52",
      "upload_time_iso_8601": "2022-06-08T07:32:52.993255Z",
      "url": "https://files.pythonhosted.org/packages/e3/b2/57144bacfffb73a17384c75cbbda30df69828ef9aa1cf04dff20766644fc/Djaq-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}