{
  "info": {
    "author": "Jules Robichaud-Gagnon",
    "author_email": "j.robichaudg+pypi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: System :: Logging"
    ],
    "description": ".. inclusion-marker-introduction-begin\n\ndjango-structlog\n================\n\n| |pypi| |wheels| |build-status| |docs| |coverage| |open_issues| |pull_requests|\n| |django| |python| |license| |black|\n| |watchers| |stars| |forks|\n\n.. |build-status| image:: https://secure.travis-ci.org/jrobichaud/django-structlog.svg?branch=master\n   :target: https://travis-ci.org/jrobichaud/django-structlog\n   :alt: Build Status\n\n.. |pypi| image:: https://img.shields.io/pypi/v/django-structlog.svg\n   :target: https://pypi.org/project/django-structlog/\n   :alt: PyPI version\n\n.. |docs| image:: https://readthedocs.org/projects/django-structlog/badge/?version=latest\n   :target: https://django-structlog.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. |coverage| image:: https://img.shields.io/codecov/c/github/jrobichaud/django-structlog.svg\n   :target: https://codecov.io/gh/jrobichaud/django-structlog\n   :alt: codecov\n\n.. |python| image:: https://img.shields.io/pypi/pyversions/django-structlog.svg\n    :target: https://pypi.org/project/django-structlog/\n    :alt: Supported Python versions\n\n.. |license| image:: https://img.shields.io/pypi/l/django-structlog.svg\n    :target: https://github.com/jrobichaud/django-structlog/blob/master/LICENSE.rst\n    :alt: License\n\n.. |open_issues| image:: https://img.shields.io/github/issues/jrobichaud/django-structlog.svg\n    :target: https://github.com/jrobichaud/django-structlog/issues\n    :alt: GitHub issues\n\n.. |django| image:: https://img.shields.io/pypi/djversions/django-structlog.svg\n    :target: https://pypi.org/project/django-structlog/\n    :alt: PyPI - Django Version\n\n.. |pull_requests| image:: https://img.shields.io/github/issues-pr/jrobichaud/django-structlog.svg\n    :target: https://github.com/jrobichaud/django-structlog/pulls\n    :alt: GitHub pull requests\n\n.. |forks| image:: https://img.shields.io/github/forks/jrobichaud/django-structlog.svg?style=social\n    :target: https://github.com/jrobichaud/django-structlog/\n    :alt: GitHub forks\n\n.. |stars| image:: https://img.shields.io/github/stars/jrobichaud/django-structlog.svg?style=social\n    :target: https://github.com/jrobichaud/django-structlog/\n    :alt: GitHub stars\n\n.. |watchers| image:: https://img.shields.io/github/watchers/jrobichaud/django-structlog.svg?style=social\n    :target: https://github.com/jrobichaud/django-structlog/\n    :alt: GitHub watchers\n\n.. |wheels| image:: https://img.shields.io/pypi/wheel/django-structlog.svg\n    :target: https://pypi.org/project/django-structlog/\n    :alt: PyPI - Wheel\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/python/black\n    :alt: Black\n\n\ndjango-structlog is a structured logging integration for `Django <https://www.djangoproject.com/>`_ project using `structlog <https://www.structlog.org/>`_\n\nLogging will then produce additional cohesive metadata on each logs that makes it easier to track events or incidents.\n\n\nAdditional Popular Integrations\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- `Django REST framework <https://www.django-rest-framework.org/>`_ is supported by default;\n- `Celery <http://www.celeryproject.org/>`_'s task logging requires additional configurations, see `documentation <https://django-structlog.readthedocs.io/en/latest/celery.html>`_ for details.\n\n\nLogging comparison\n^^^^^^^^^^^^^^^^^^\n\nStandard logging:\n~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   >>> import logging\n   >>> logger = logging.get_logger(__name__)\n   >>> logger.info(\"An error occurred\")\n\n.. code-block:: bash\n\n   An error occurred\n\nWell... ok\n\nWith django-structlog and flat_line:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   >>> import structlog\n   >>> logger = structlog.get_logger(__name__)\n   >>> logger.info(\"an_error_occurred\", bar=\"Buz\")\n\n.. code-block:: bash\n\n   timestamp='2019-04-13T19:39:31.089925Z' level='info' event='an_error_occurred' logger='my_awesome_project.my_awesome_module' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' bar='Buz'\n\nThen you can search with commands like:\n\n.. code-block:: bash\n\n   $ cat logs/flat_line.log | grep request_id='3a8f801c-072b-4805-8f38-e1337f363ed4'\n\nWith django-structlog and json\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   >>> import structlog\n   >>> logger = structlog.get_logger(__name__)\n   >>> logger.info(\"an_error_occurred\", bar=\"Buz\")\n\n.. code-block:: json\n\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"an_error_occurred\", \"timestamp\": \"2019-04-13T19:39:31.089925Z\", \"logger\": \"my_awesome_project.my_awesome_module\", \"level\": \"info\", \"bar\": \"Buz\"}\n\nThen you can search with commands like:\n\n.. code-block:: bash\n\n   $ cat logs/json.log | jq '.[] | select(.request_id=\"3a8f801c-072b-4805-8f38-e1337f363ed4\")' -s\n\n.. inclusion-marker-introduction-end\n\n.. inclusion-marker-getting-started-begin\n\nGetting Started\n===============\n\nThese steps will show how to integrate the middleware to your awesome application.\n\nInstallation\n^^^^^^^^^^^^\n\nInstall the library\n\n.. code-block:: bash\n\n   pip install django-structlog\n\nAdd middleware\n\n.. code-block:: python\n\n   MIDDLEWARE = [\n       # ...\n       'django_structlog.middlewares.RequestMiddleware',\n   ]\n\nAdd appropriate structlog configuration to your ``settings.py``\n\n.. code-block:: python\n\n   import structlog\n\n   LOGGING = {\n       \"version\": 1,\n       \"disable_existing_loggers\": False,\n       \"formatters\": {\n           \"json_formatter\": {\n               \"()\": structlog.stdlib.ProcessorFormatter,\n               \"processor\": structlog.processors.JSONRenderer(),\n           },\n           \"plain_console\": {\n               \"()\": structlog.stdlib.ProcessorFormatter,\n               \"processor\": structlog.dev.ConsoleRenderer(),\n           },\n           \"key_value\": {\n               \"()\": structlog.stdlib.ProcessorFormatter,\n               \"processor\": structlog.processors.KeyValueRenderer(key_order=['timestamp', 'level', 'event', 'logger']),\n           },\n       },\n       \"handlers\": {\n           \"console\": {\n               \"class\": \"logging.StreamHandler\",\n               \"formatter\": \"plain_console\",\n           },\n           \"json_file\": {\n               \"class\": \"logging.handlers.WatchedFileHandler\",\n               \"filename\": \"logs/json.log\",\n               \"formatter\": \"json_formatter\",\n           },\n           \"flat_line_file\": {\n               \"class\": \"logging.handlers.WatchedFileHandler\",\n               \"filename\": \"logs/flat_line.log\",\n               \"formatter\": \"key_value\",\n           },\n       },\n       \"loggers\": {\n           \"django_structlog\": {\n               \"handlers\": [\"console\", \"flat_line_file\", \"json_file\"],\n               \"level\": \"INFO\",\n           },\n           \"django_structlog_demo_project\": {\n               \"handlers\": [\"console\", \"flat_line_file\", \"json_file\"],\n               \"level\": \"INFO\",\n           },\n       }\n   }\n\n   structlog.configure(\n       processors=[\n           structlog.stdlib.filter_by_level,\n           structlog.processors.TimeStamper(fmt=\"iso\"),\n           structlog.stdlib.add_logger_name,\n           structlog.stdlib.add_log_level,\n           structlog.stdlib.PositionalArgumentsFormatter(),\n           structlog.processors.StackInfoRenderer(),\n           structlog.processors.format_exc_info,\n           structlog.processors.UnicodeDecoder(),\n           structlog.processors.ExceptionPrettyPrinter(),\n           structlog.stdlib.ProcessorFormatter.wrap_for_formatter,\n       ],\n       context_class=structlog.threadlocal.wrap_dict(dict),\n       logger_factory=structlog.stdlib.LoggerFactory(),\n       wrapper_class=structlog.stdlib.BoundLogger,\n       cache_logger_on_first_use=True,\n   )\n\nStart logging with ``structlog`` instead of ``logging``.\n\n.. code-block:: python\n\n   import structlog\n   logger = structlog.get_logger(__name__)\n\n.. _django_signals:\n\nExtending Request Log Metadata\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBy default only a ``request_id`` and the ``user_id`` are bound from the request but pertinent log metadata may vary from a project to another.\n\nIf you need to add more metadata from the request you can implement a convenient signal receiver to bind them.\n\n.. code-block:: python\n\n   from django.dispatch import receiver\n\n   from django_structlog.signals import bind_extra_request_metadata\n\n\n   @receiver(bind_extra_request_metadata)\n   def bind_user_email(request, logger, **kwargs):\n       logger.bind(user_email=getattr(request.user, 'email', ''))\n\n\n.. inclusion-marker-getting-started-end\n\n.. inclusion-marker-example-outputs-begin\n\nExample outputs\n===============\n\nFlat lines file (\\ ``logs/flat_lines.log``\\ )\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: bash\n\n   timestamp='2019-04-13T19:39:29.321453Z' level='info' event='request_started' logger='django_structlog.middlewares.request' request_id='c53dff1d-3fc5-4257-a78a-9a567c937561' user_id=1 ip='0.0.0.0' request=<WSGIRequest: GET '/'> user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'\n   timestamp='2019-04-13T19:39:29.345207Z' level='info' event='request_finished' logger='django_structlog.middlewares.request' request_id='c53dff1d-3fc5-4257-a78a-9a567c937561' user_id=1 ip='0.0.0.0' code=200\n   timestamp='2019-04-13T19:39:31.086155Z' level='info' event='request_started' logger='django_structlog.middlewares.request' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' request=<WSGIRequest: POST '/success_task'> user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'\n   timestamp='2019-04-13T19:39:31.089925Z' level='info' event='Enqueuing successful task' logger='django_structlog_demo_project.home.views' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0'\n   timestamp='2019-04-13T19:39:31.147590Z' level='info' event='task_enqueued' logger='django_structlog.middlewares.celery' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' child_task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654'\n   timestamp='2019-04-13T19:39:31.153081Z' level='info' event='This is a successful task' logger='django_structlog_demo_project.taskapp.celery' task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0'\n   timestamp='2019-04-13T19:39:31.160043Z' level='info' event='request_finished' logger='django_structlog.middlewares.request' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' code=201\n   timestamp='2019-04-13T19:39:31.162372Z' level='info' event='task_succeed' logger='django_structlog.middlewares.celery' task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' result='None'\n\nJson file (\\ ``logs/json.log``\\ )\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: json\n\n   {\"request_id\": \"c53dff1d-3fc5-4257-a78a-9a567c937561\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"request\": \"<WSGIRequest: GET '/'>\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\", \"event\": \"request_started\", \"timestamp\": \"2019-04-13T19:39:29.321453Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"request_id\": \"c53dff1d-3fc5-4257-a78a-9a567c937561\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"code\": 200, \"event\": \"request_finished\", \"timestamp\": \"2019-04-13T19:39:29.345207Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"request\": \"<WSGIRequest: POST '/success_task'>\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\", \"event\": \"request_started\", \"timestamp\": \"2019-04-13T19:39:31.086155Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"Enqueuing successful task\", \"timestamp\": \"2019-04-13T19:39:31.089925Z\", \"logger\": \"django_structlog_demo_project.home.views\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"child_task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"event\": \"task_enqueued\", \"timestamp\": \"2019-04-13T19:39:31.147590Z\", \"logger\": \"django_structlog.middlewares.celery\", \"level\": \"info\"}\n   {\"task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"This is a successful task\", \"timestamp\": \"2019-04-13T19:39:31.153081Z\", \"logger\": \"django_structlog_demo_project.taskapp.celery\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"code\": 201, \"event\": \"request_finished\", \"timestamp\": \"2019-04-13T19:39:31.160043Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"result\": \"None\", \"event\": \"task_succeed\", \"timestamp\": \"2019-04-13T19:39:31.162372Z\", \"logger\": \"django_structlog.middlewares.celery\", \"level\": \"info\"}\n\n.. inclusion-marker-example-outputs-end\n\n.. inclusion-marker-running-tests-begin\n\nRunning the tests\n=================\n\nNote: For the moment redis is needed to run the tests. The easiest way start docker's demo.\n\n.. code-block:: bash\n\n   docker-compose up --build\n\nIn another shell\n\n.. code-block:: bash\n\n   pip install -r requirements/base.txt\n   pytest\n\n.. inclusion-marker-running-tests-end\n\n\n.. inclusion-marker-demo-begin\n\nDemo app\n========\n\n.. code-block:: bash\n\n   docker-compose up --build\n\nOpen ``http://0.0.0.0:8000/`` in your browser.\n\nNavigate while looking into the log files and shell's output.\n\n.. inclusion-marker-demo-end\n\n\n.. inclusion-marker-authors-begin\n\nAuthors\n=======\n\n\n* **Jules Robichaud-Gagnon** - *Initial work* - `jrobichaud <https://github.com/jrobichaud>`_\n\nSee also the list of `contributors <https://github.com/jrobichaud/django-structlog/contributors>`_ who participated in this project.\n\n.. inclusion-marker-authors-end\n\n\n.. inclusion-marker-acknowledgements-begin\n\nAcknowledgments\n===============\n\n* Big thanks to `@ferd <https://github.com/ferd>`_ for his `bad opinions <https://ferd.ca/erlang-otp-21-s-new-logger.html>`_ that inspired the author enough to spend time on this library.\n* `This issue <https://github.com/hynek/structlog/issues/175>`_ helped the author to figure out how to integrate ``structlog`` in Django.\n* `This stack overflow question <https://stackoverflow.com/questions/43855507/configuring-and-using-structlog-with-django>`_ was also helpful.\n\n.. inclusion-marker-acknowledgements-end\n\nLicense\n=======\n\nThis project is licensed under the MIT License - see the `LICENSE <https://github.com/jrobichaud/django-structlog/blob/master/LICENSE.rst>`_ file for details\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jrobichaud/django-structlog",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-structlog",
    "package_url": "https://pypi.org/project/django-structlog/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-structlog/",
    "project_urls": {
      "Homepage": "https://github.com/jrobichaud/django-structlog"
    },
    "release_url": "https://pypi.org/project/django-structlog/1.3.5/",
    "requires_dist": [
      "django (>=1.11)",
      "structlog",
      "django-ipware"
    ],
    "requires_python": "",
    "summary": "Structured Logging for Django",
    "version": "1.3.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17430645,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8e5254980b4ffc07e2505ae3600f029fc30079172f752d37d2fc81b104d9e9d",
        "md5": "8472e82c537e873815a613df9efccff6",
        "sha256": "9e1b1aecc9fb4ea310c2e0d9d1b34f51be7c2ac49328d17f5359ff92530ad4c6"
      },
      "downloads": -1,
      "filename": "django_structlog-1.3.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8472e82c537e873815a613df9efccff6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10699,
      "upload_time": "2019-12-24T01:43:39",
      "upload_time_iso_8601": "2019-12-24T01:43:39.699669Z",
      "url": "https://files.pythonhosted.org/packages/b8/e5/254980b4ffc07e2505ae3600f029fc30079172f752d37d2fc81b104d9e9d/django_structlog-1.3.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18731c89659b5868cc5da670501db1a09b0384ff0e8d143fcd44be73cbe38f79",
        "md5": "b2cb0182bbd4259aefc54bff7b79d73f",
        "sha256": "e71b7450ed4cc25c6f970afe143dbdd85301d92f5fefe29c9843ce9bca281ed3"
      },
      "downloads": -1,
      "filename": "django-structlog-1.3.5.tar.gz",
      "has_sig": false,
      "md5_digest": "b2cb0182bbd4259aefc54bff7b79d73f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12095,
      "upload_time": "2019-12-24T01:43:41",
      "upload_time_iso_8601": "2019-12-24T01:43:41.750680Z",
      "url": "https://files.pythonhosted.org/packages/18/73/1c89659b5868cc5da670501db1a09b0384ff0e8d143fcd44be73cbe38f79/django-structlog-1.3.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}