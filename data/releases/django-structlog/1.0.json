{
  "info": {
    "author": "Jules Robichaud-Gagnon",
    "author_email": "j.robichaudg+pypi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# django-structlog\n[![Build Status](https://travis-ci.org/jrobichaud/django-structlog.svg?branch=master)](https://travis-ci.org/jrobichaud/django-structlog)\n[![codecov](https://codecov.io/gh/jrobichaud/django-structlog/branch/master/graph/badge.svg)](https://codecov.io/gh/jrobichaud/django-structlog)\n\ndjango-structlog is a structured logging integration for Django project using [structlog](https://www.structlog.org/)\n\nLogging will then produce additional cohesive metadata on each logs that makes it easier to track incident.\n\n####Standard logging:\n```python\n>>> import logging\n>>> logger = logging.get_logger(__name__)\n>>> logger.info(\"An error occured\")\n```\n\n```\nAn error occured\n```\n\nWell... ok\n\n#### With django-structlog and flag_line:\n```python\n>>> import structlog \n>>> logger = structlog.get_logger(__name__)\n>>> logger.info(\"An error occured\", bar=\"Buz\")\n```\n```\ntimestamp='2019-04-13T19:39:31.089925Z' level='info' event='An error occured' logger='my_awesome_project.my_awesome_module' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0'\n```\n\nThen you can search with commands like:\n```bash\n$ cat logs/flat_line.log | grep request_id='3a8f801c-072b-4805-8f38-e1337f363ed4'\n```\n\n#### With django-structlog and json\n```python\n>>> import structlog \n>>> logger = structlog.get_logger(__name__)\n>>> logger.info(\"An error occured\", bar=\"Buz\")\n```\n```json\n{\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"An error occured\", \"timestamp\": \"2019-04-13T19:39:31.089925Z\", \"logger\": \"my_awesome_project.my_awesome_module\", \"level\": \"info\", \"bar\": \"buz\"}\n```\nThen you can search with commands like:\n```bash\n$ cat logs/json.log | jq '.[] | select(.user_id==1)' -s\n```\n\n## Getting Started\n\nThese steps will show how to integrate the middleware to your awesome application.\n\n\n### Installing\n\nInstall the library\n\n```\npip install django-structlog\n```\n\nAdd middleware\n\n```\nMIDDLEWARE = [\n    'django_structlog.middlewares.RequestMiddleware',\n    # ...\n]\n```\n\nAdd appropriate structlog configuration to your `settings.py`\n\n```python\nimport structlog\n\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"json_formatter\": {\n            \"()\": structlog.stdlib.ProcessorFormatter,\n            \"processor\": structlog.processors.JSONRenderer(),\n        },\n        \"plain_console\": {\n            \"()\": structlog.stdlib.ProcessorFormatter,\n            \"processor\": structlog.dev.ConsoleRenderer(),\n        },\n        \"key_value\": {\n            \"()\": structlog.stdlib.ProcessorFormatter,\n            \"processor\": structlog.processors.KeyValueRenderer(key_order=['timestamp', 'level', 'event', 'logger']),\n        },\n    },\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"plain_console\",\n        },\n        \"json_file\": {\n            \"class\": \"logging.handlers.WatchedFileHandler\",\n            \"filename\": \"logs/json.log\",\n            \"formatter\": \"json_formatter\",\n        },\n        \"flat_line_file\": {\n            \"class\": \"logging.handlers.WatchedFileHandler\",\n            \"filename\": \"logs/flat_line.log\",\n            \"formatter\": \"key_value\",\n        },\n    },\n    \"loggers\": {\n        \"django_structlog\": {\n            \"handlers\": [\"console\", \"flat_line_file\", \"json_file\"],\n            \"level\": \"INFO\",\n        },\n        \"django_structlog_demo_project\": {\n            \"handlers\": [\"console\", \"flat_line_file\", \"json_file\"],\n            \"level\": \"INFO\",\n        },\n    }\n}\n\nstructlog.configure(\n    processors=[\n        structlog.stdlib.filter_by_level,\n        structlog.processors.TimeStamper(fmt=\"iso\"),\n        structlog.stdlib.add_logger_name,\n        structlog.stdlib.add_log_level,\n        structlog.stdlib.PositionalArgumentsFormatter(),\n        structlog.processors.StackInfoRenderer(),\n        structlog.processors.format_exc_info,\n        structlog.processors.UnicodeDecoder(),\n        structlog.processors.ExceptionPrettyPrinter(),\n        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,\n    ],\n    context_class=structlog.threadlocal.wrap_dict(dict),\n    logger_factory=structlog.stdlib.LoggerFactory(),\n    wrapper_class=structlog.stdlib.BoundLogger,\n    cache_logger_on_first_use=True,\n)\n```\nStart logging with `structlog` instead of `logging`.\n```python\nimport structlog\nlogger = structlog.get_logger(__name__)\n```\n\n## Example outputs\n\n### Flat lines file (`logs/flat_lines.log`)\n```bash\ntimestamp='2019-04-13T19:39:29.321453Z' level='info' event='Request started' logger='django_structlog.middlewares.request' request_id='c53dff1d-3fc5-4257-a78a-9a567c937561' user_id=1 ip='0.0.0.0' request=<WSGIRequest: GET '/'> user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'\ntimestamp='2019-04-13T19:39:29.345207Z' level='info' event='Request finished' logger='django_structlog.middlewares.request' request_id='c53dff1d-3fc5-4257-a78a-9a567c937561' user_id=1 ip='0.0.0.0' code=200\ntimestamp='2019-04-13T19:39:31.086155Z' level='info' event='Request started' logger='django_structlog.middlewares.request' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' request=<WSGIRequest: POST '/success_task'> user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'\ntimestamp='2019-04-13T19:39:31.089925Z' level='info' event='Enqueuing successful task' logger='django_structlog_demo_project.home.views' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0'\ntimestamp='2019-04-13T19:39:31.147590Z' level='info' event='Task enqueued' logger='django_structlog.middlewares.celery' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654'\ntimestamp='2019-04-13T19:39:31.153081Z' level='info' event='This is a successful task' logger='django_structlog_demo_project.taskapp.celery' task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0'\ntimestamp='2019-04-13T19:39:31.160043Z' level='info' event='Request finished' logger='django_structlog.middlewares.request' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' code=201\ntimestamp='2019-04-13T19:39:31.162372Z' level='info' event='Task success' logger='django_structlog.middlewares.celery' task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' result='None'\n```\n\n### Json file (`logs/json.log`)\n```json\n{\"request_id\": \"c53dff1d-3fc5-4257-a78a-9a567c937561\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"request\": \"<WSGIRequest: GET '/'>\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\", \"event\": \"Request started\", \"timestamp\": \"2019-04-13T19:39:29.321453Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n{\"request_id\": \"c53dff1d-3fc5-4257-a78a-9a567c937561\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"code\": 200, \"event\": \"Request finished\", \"timestamp\": \"2019-04-13T19:39:29.345207Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n{\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"request\": \"<WSGIRequest: POST '/success_task'>\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\", \"event\": \"Request started\", \"timestamp\": \"2019-04-13T19:39:31.086155Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n{\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"Enqueuing successful task\", \"timestamp\": \"2019-04-13T19:39:31.089925Z\", \"logger\": \"django_structlog_demo_project.home.views\", \"level\": \"info\"}\n{\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"event\": \"Task enqueued\", \"timestamp\": \"2019-04-13T19:39:31.147590Z\", \"logger\": \"django_structlog.middlewares.celery\", \"level\": \"info\"}\n{\"task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"This is a successful task\", \"timestamp\": \"2019-04-13T19:39:31.153081Z\", \"logger\": \"django_structlog_demo_project.taskapp.celery\", \"level\": \"info\"}\n{\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"code\": 201, \"event\": \"Request finished\", \"timestamp\": \"2019-04-13T19:39:31.160043Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n{\"task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"result\": \"None\", \"event\": \"Task success\", \"timestamp\": \"2019-04-13T19:39:31.162372Z\", \"logger\": \"django_structlog.middlewares.celery\", \"level\": \"info\"}\n```\n\n\n## Running the tests\nNote: For the moment redis is needed to run the tests. The easiest way start docker's demo. \n\n```bash\ndocker-compose up --build\n```\n\nIn another shell\n```bash\npip install -r requirement/base.txt\npytest\n```\n\n## Demo app\n\n```bash\ndocker-compose up --build\n```\n\nOpen `http://0.0.0.0:8000/` in your browser.\n\nNavigate while looking into the log files and shell's output. \n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/jrobichaud/django-structlog/tags). \n\n## Authors\n\n* **Jules Robichaud-Gagnon** - *Initial work* - [jrobichaud](https://github.com/jrobichaud)\n\nSee also the list of [contributors](https://github.com/jrobichaud/django-structlog/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n## Acknowledgments\n\n- Big thanks to [@ferd](https://github.com/ferd) for his [bad opinions](https://ferd.ca/erlang-otp-21-s-new-logger.html) that inspired the author enough to spend time on this library. \n- [This issue](https://github.com/hynek/structlog/issues/175) helped the author to figure out how to integrate `structlog` in Django.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jrobichaud/django-structlog",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-structlog",
    "package_url": "https://pypi.org/project/django-structlog/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-structlog/",
    "project_urls": {
      "Homepage": "https://github.com/jrobichaud/django-structlog"
    },
    "release_url": "https://pypi.org/project/django-structlog/1.0/",
    "requires_dist": [
      "django (>=1.11structlog)",
      "django-ipware"
    ],
    "requires_python": "",
    "summary": "Structure logging for Django",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17430645,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5356cad61704748f3d1ad06154a938633a5ef0ede4c5be3c8cb4ce7470e61d00",
        "md5": "9b03a6b84d46dff81e09bc82861922b2",
        "sha256": "cd3558073f119f88461db4d46a22b5a3a47869ad90b7cbd4c23803fea114b449"
      },
      "downloads": -1,
      "filename": "django_structlog-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b03a6b84d46dff81e09bc82861922b2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5597,
      "upload_time": "2019-04-13T23:25:10",
      "upload_time_iso_8601": "2019-04-13T23:25:10.730541Z",
      "url": "https://files.pythonhosted.org/packages/53/56/cad61704748f3d1ad06154a938633a5ef0ede4c5be3c8cb4ce7470e61d00/django_structlog-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f4238b7fdb2414455e94b5980706486058ddab37f7a3c3791c9460efb22cd8d",
        "md5": "92b725320b17f0ba4bfa98be278f25c5",
        "sha256": "8afd777759cf3e397b002a1e94730913699a0ae67c62bb87da06a1af555f83da"
      },
      "downloads": -1,
      "filename": "django-structlog-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "92b725320b17f0ba4bfa98be278f25c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4793,
      "upload_time": "2019-04-13T23:25:12",
      "upload_time_iso_8601": "2019-04-13T23:25:12.682187Z",
      "url": "https://files.pythonhosted.org/packages/9f/42/38b7fdb2414455e94b5980706486058ddab37f7a3c3791c9460efb22cd8d/django-structlog-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}