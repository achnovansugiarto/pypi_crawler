{
  "info": {
    "author": "Jules Robichaud-Gagnon",
    "author_email": "j.robichaudg+pypi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: System :: Logging"
    ],
    "description": ".. inclusion-marker-introduction-begin\n\ndjango-structlog\n================\n\n| |pypi| |wheels| |build-status| |docs| |coverage| |open_issues| |pull_requests|\n| |django| |python| |license| |black|\n| |watchers| |stars| |forks|\n\n.. |build-status| image:: https://github.com/jrobichaud/django-structlog/actions/workflows/main.yml/badge.svg?branch=master\n   :target: https://github.com/jrobichaud/django-structlog/actions\n   :alt: Build Status\n\n.. |pypi| image:: https://img.shields.io/pypi/v/django-structlog.svg\n   :target: https://pypi.org/project/django-structlog/\n   :alt: PyPI version\n\n.. |docs| image:: https://readthedocs.org/projects/django-structlog/badge/?version=latest\n   :target: https://django-structlog.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. |coverage| image:: https://img.shields.io/codecov/c/github/jrobichaud/django-structlog.svg\n   :target: https://codecov.io/gh/jrobichaud/django-structlog\n   :alt: codecov\n\n.. |python| image:: https://img.shields.io/pypi/pyversions/django-structlog.svg\n    :target: https://pypi.org/project/django-structlog/\n    :alt: Supported Python versions\n\n.. |license| image:: https://img.shields.io/pypi/l/django-structlog.svg\n    :target: https://github.com/jrobichaud/django-structlog/blob/master/LICENSE.rst\n    :alt: License\n\n.. |open_issues| image:: https://img.shields.io/github/issues/jrobichaud/django-structlog.svg\n    :target: https://github.com/jrobichaud/django-structlog/issues\n    :alt: GitHub issues\n\n.. |django| image:: https://img.shields.io/pypi/djversions/django-structlog.svg\n    :target: https://pypi.org/project/django-structlog/\n    :alt: PyPI - Django Version\n\n.. |pull_requests| image:: https://img.shields.io/github/issues-pr/jrobichaud/django-structlog.svg\n    :target: https://github.com/jrobichaud/django-structlog/pulls\n    :alt: GitHub pull requests\n\n.. |forks| image:: https://img.shields.io/github/forks/jrobichaud/django-structlog.svg?style=social\n    :target: https://github.com/jrobichaud/django-structlog/\n    :alt: GitHub forks\n\n.. |stars| image:: https://img.shields.io/github/stars/jrobichaud/django-structlog.svg?style=social\n    :target: https://github.com/jrobichaud/django-structlog/\n    :alt: GitHub stars\n\n.. |watchers| image:: https://img.shields.io/github/watchers/jrobichaud/django-structlog.svg?style=social\n    :target: https://github.com/jrobichaud/django-structlog/\n    :alt: GitHub watchers\n\n.. |wheels| image:: https://img.shields.io/pypi/wheel/django-structlog.svg\n    :target: https://pypi.org/project/django-structlog/\n    :alt: PyPI - Wheel\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/python/black\n    :alt: Black\n\n\ndjango-structlog is a structured logging integration for `Django <https://www.djangoproject.com/>`_ project using `structlog <https://www.structlog.org/>`_\n\nLogging will then produce additional cohesive metadata on each logs that makes it easier to track events or incidents.\n\n\nAdditional Popular Integrations\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`Django REST framework <https://www.django-rest-framework.org/>`_\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``Django REST framework`` is supported by default. But when using it with ``rest_framework.authentication.TokenAuthentication`` (or other DRF authentications)  ``user_id`` will be only be in ``request_finished`` and ``request_failed`` instead of each logs.\n\nSee `#37  <https://github.com/jrobichaud/django-structlog/issues/37>`_ for details.\n\n`Celery <http://www.celeryproject.org/>`_\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCelery's task logging requires additional configurations, see `documentation <https://django-structlog.readthedocs.io/en/latest/celery.html>`_ for details.\n\n\nLogging comparison\n^^^^^^^^^^^^^^^^^^\n\nStandard logging:\n~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   >>> import logging\n   >>> logger = logging.get_logger(__name__)\n   >>> logger.info(\"An error occurred\")\n\n.. code-block:: bash\n\n   An error occurred\n\nWell... ok\n\nWith django-structlog and flat_line:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   >>> import structlog\n   >>> logger = structlog.get_logger(__name__)\n   >>> logger.info(\"an_error_occurred\", bar=\"Buz\")\n\n.. code-block:: bash\n\n   timestamp='2019-04-13T19:39:31.089925Z' level='info' event='an_error_occurred' logger='my_awesome_project.my_awesome_module' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' bar='Buz'\n\nThen you can search with commands like:\n\n.. code-block:: bash\n\n   $ cat logs/flat_line.log | grep request_id='3a8f801c-072b-4805-8f38-e1337f363ed4'\n\nWith django-structlog and json\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   >>> import structlog\n   >>> logger = structlog.get_logger(__name__)\n   >>> logger.info(\"an_error_occurred\", bar=\"Buz\")\n\n.. code-block:: json\n\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"an_error_occurred\", \"timestamp\": \"2019-04-13T19:39:31.089925Z\", \"logger\": \"my_awesome_project.my_awesome_module\", \"level\": \"info\", \"bar\": \"Buz\"}\n\nThen you can search with commands like:\n\n.. code-block:: bash\n\n   $ cat logs/json.log | jq '.[] | select(.request_id=\"3a8f801c-072b-4805-8f38-e1337f363ed4\")' -s\n\n.. inclusion-marker-introduction-end\n\n.. inclusion-marker-getting-started-begin\n\nGetting Started\n===============\n\nThese steps will show how to integrate the middleware to your awesome application.\n\nInstallation\n^^^^^^^^^^^^\n\nInstall the library\n\n.. code-block:: bash\n\n   pip install django-structlog\n\nAdd middleware\n\n.. code-block:: python\n\n   MIDDLEWARE = [\n       # ...\n       'django_structlog.middlewares.RequestMiddleware',\n   ]\n\nAdd appropriate structlog configuration to your ``settings.py``\n\n.. code-block:: python\n\n   import structlog\n\n   LOGGING = {\n       \"version\": 1,\n       \"disable_existing_loggers\": False,\n       \"formatters\": {\n           \"json_formatter\": {\n               \"()\": structlog.stdlib.ProcessorFormatter,\n               \"processor\": structlog.processors.JSONRenderer(),\n           },\n           \"plain_console\": {\n               \"()\": structlog.stdlib.ProcessorFormatter,\n               \"processor\": structlog.dev.ConsoleRenderer(),\n           },\n           \"key_value\": {\n               \"()\": structlog.stdlib.ProcessorFormatter,\n               \"processor\": structlog.processors.KeyValueRenderer(key_order=['timestamp', 'level', 'event', 'logger']),\n           },\n       },\n       \"handlers\": {\n           \"console\": {\n               \"class\": \"logging.StreamHandler\",\n               \"formatter\": \"plain_console\",\n           },\n           \"json_file\": {\n               \"class\": \"logging.handlers.WatchedFileHandler\",\n               \"filename\": \"logs/json.log\",\n               \"formatter\": \"json_formatter\",\n           },\n           \"flat_line_file\": {\n               \"class\": \"logging.handlers.WatchedFileHandler\",\n               \"filename\": \"logs/flat_line.log\",\n               \"formatter\": \"key_value\",\n           },\n       },\n       \"loggers\": {\n           \"django_structlog\": {\n               \"handlers\": [\"console\", \"flat_line_file\", \"json_file\"],\n               \"level\": \"INFO\",\n           },\n           # Make sure to replace the following logger's name for yours\n           \"django_structlog_demo_project\": {\n               \"handlers\": [\"console\", \"flat_line_file\", \"json_file\"],\n               \"level\": \"INFO\",\n           },\n       }\n   }\n\n   structlog.configure(\n       processors=[\n           structlog.contextvars.merge_contextvars,\n           structlog.stdlib.filter_by_level,\n           structlog.processors.TimeStamper(fmt=\"iso\"),\n           structlog.stdlib.add_logger_name,\n           structlog.stdlib.add_log_level,\n           structlog.stdlib.PositionalArgumentsFormatter(),\n           structlog.processors.StackInfoRenderer(),\n           structlog.processors.format_exc_info,\n           structlog.processors.UnicodeDecoder(),\n           structlog.stdlib.ProcessorFormatter.wrap_for_formatter,\n       ],\n       logger_factory=structlog.stdlib.LoggerFactory(),\n       cache_logger_on_first_use=True,\n   )\n\nStart logging with ``structlog`` instead of ``logging``.\n\n.. code-block:: python\n\n   import structlog\n   logger = structlog.get_logger(__name__)\n\n.. _django_signals:\n\nExtending Request Log Metadata\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBy default only a ``request_id`` and the ``user_id`` are bound from the request but pertinent log metadata may vary from a project to another.\n\nIf you need to add more metadata from the request you can implement a convenient signal receiver to bind them. You can also override existing bound metadata the same way.\n\n.. code-block:: python\n\n   from django.dispatch import receiver\n\n   from django_structlog.signals import bind_extra_request_metadata\n   import structlog\n\n\n   @receiver(bind_extra_request_metadata)\n   def bind_user_email(request, logger, **kwargs):\n       structlog.contextvars.bind_contextvars(user_email=getattr(request.user, 'email', ''))\n\n\nStandard Loggers\n^^^^^^^^^^^^^^^^\n\nIt is also possible to log using standard python logger.\n\nIn your formatters, add the ``foreign_pre_chain`` section, and then add ``structlog.contextvars.merge_contextvars``:\n\n.. code-block:: python\n\n   LOGGING = {\n       \"version\": 1,\n       \"disable_existing_loggers\": False,\n       \"formatters\": {\n           \"json_formatter\": {\n               \"()\": structlog.stdlib.ProcessorFormatter,\n               \"processor\": structlog.processors.JSONRenderer(),\n               # Add this section:\n               \"foreign_pre_chain\": [\n                   structlog.contextvars.merge_contextvars, # <---- add this\n                   # customize the rest as you need\n                   structlog.processors.TimeStamper(fmt=\"iso\"),\n                   structlog.stdlib.add_logger_name,\n                   structlog.stdlib.add_log_level,\n                   structlog.stdlib.PositionalArgumentsFormatter(),\n               ],\n           },\n       },\n       ...\n    }\n\n\n.. inclusion-marker-getting-started-end\n\n\n.. inclusion-marker-example-outputs-begin\n\nExample outputs\n===============\n\nFlat lines file (\\ ``logs/flat_lines.log``\\ )\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: bash\n\n   timestamp='2019-04-13T19:39:29.321453Z' level='info' event='request_started' logger='django_structlog.middlewares.request' request_id='c53dff1d-3fc5-4257-a78a-9a567c937561' user_id=1 ip='0.0.0.0' request=GET / user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'\n   timestamp='2019-04-13T19:39:29.345207Z' level='info' event='request_finished' logger='django_structlog.middlewares.request' request_id='c53dff1d-3fc5-4257-a78a-9a567c937561' user_id=1 ip='0.0.0.0' code=200\n   timestamp='2019-04-13T19:39:31.086155Z' level='info' event='request_started' logger='django_structlog.middlewares.request' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' request=POST /success_task user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'\n   timestamp='2019-04-13T19:39:31.089925Z' level='info' event='Enqueuing successful task' logger='django_structlog_demo_project.home.views' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0'\n   timestamp='2019-04-13T19:39:31.147590Z' level='info' event='task_enqueued' logger='django_structlog.middlewares.celery' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' child_task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654'\n   timestamp='2019-04-13T19:39:31.153081Z' level='info' event='This is a successful task' logger='django_structlog_demo_project.taskapp.celery' task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0'\n   timestamp='2019-04-13T19:39:31.160043Z' level='info' event='request_finished' logger='django_structlog.middlewares.request' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' code=201\n   timestamp='2019-04-13T19:39:31.162372Z' level='info' event='task_succeed' logger='django_structlog.middlewares.celery' task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' result='None'\n\nJson file (\\ ``logs/json.log``\\ )\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: json\n\n   {\"request_id\": \"c53dff1d-3fc5-4257-a78a-9a567c937561\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"request\": \"GET /\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\", \"event\": \"request_started\", \"timestamp\": \"2019-04-13T19:39:29.321453Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"request_id\": \"c53dff1d-3fc5-4257-a78a-9a567c937561\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"code\": 200, \"event\": \"request_finished\", \"timestamp\": \"2019-04-13T19:39:29.345207Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"request\": \"POST /success_task\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\", \"event\": \"request_started\", \"timestamp\": \"2019-04-13T19:39:31.086155Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"Enqueuing successful task\", \"timestamp\": \"2019-04-13T19:39:31.089925Z\", \"logger\": \"django_structlog_demo_project.home.views\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"child_task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"event\": \"task_enqueued\", \"timestamp\": \"2019-04-13T19:39:31.147590Z\", \"logger\": \"django_structlog.middlewares.celery\", \"level\": \"info\"}\n   {\"task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"This is a successful task\", \"timestamp\": \"2019-04-13T19:39:31.153081Z\", \"logger\": \"django_structlog_demo_project.taskapp.celery\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"code\": 201, \"event\": \"request_finished\", \"timestamp\": \"2019-04-13T19:39:31.160043Z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"result\": \"None\", \"event\": \"task_succeed\", \"timestamp\": \"2019-04-13T19:39:31.162372Z\", \"logger\": \"django_structlog.middlewares.celery\", \"level\": \"info\"}\n\n.. inclusion-marker-example-outputs-end\n\n.. inclusion-marker-upgrade-guide-begin\n\nUpgrade Guide\n=============\n\n.. _upgrade_4.0:\n\nUpgrading to 4.0+\n^^^^^^^^^^^^^^^^^\n\n``django-structlog`` drops support of django below 3.2.\n\nMinimum requirements\n~~~~~~~~~~~~~~~~~~~~\n- requires django 3.2+\n- requires python 3.7+\n- requires structlog 21.4.0+\n- (optionally) requires celery 5.1+\n\n\nChanges if you use ``celery``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can now install ``django-structlog`` explicitly with ``celery`` extra in order to validate the compatibility with your version of ``celery``.\n\n\n.. code-block:: bash\n\n    django-structlog[celery]==4.0.0\n\nSee `Installing “Extras” <https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-extras>`_ for more information about this ``pip`` feature.\n\n.. _upgrade_3.0:\n\nUpgrading to 3.0+\n^^^^^^^^^^^^^^^^^\n\n``django-structlog`` now use  `structlog.contextvars.bind_contextvars <https://www.structlog.org/en/stable/contextvars.html>`_ instead of ``threadlocal``.\n\nMinimum requirements\n~~~~~~~~~~~~~~~~~~~~\n- requires python 3.7+\n- requires structlog 21.4.0+\n\n\nChanges you need to do\n~~~~~~~~~~~~~~~~~~~~~~\n\n1. Update structlog settings\n----------------------------\n\n- add ``structlog.contextvars.merge_contextvars`` as first ``processors``\n- remove ``context_class=structlog.threadlocal.wrap_dict(dict),``\n- (if you use standard loggers) add ``structlog.contextvars.merge_contextvars`` in `foreign_pre_chain`\n- (if you use standard loggers) remove ``django_structlog.processors.inject_context_dict,``\n\n\n.. code-block:: python\n\n   structlog.configure(\n       processors=[\n           structlog.contextvars.merge_contextvars, # <---- add this\n           structlog.stdlib.filter_by_level,\n           structlog.processors.TimeStamper(fmt=\"iso\"),\n           structlog.stdlib.add_logger_name,\n           structlog.stdlib.add_log_level,\n           structlog.stdlib.PositionalArgumentsFormatter(),\n           structlog.processors.StackInfoRenderer(),\n           structlog.processors.format_exc_info,\n           structlog.processors.UnicodeDecoder(),\n           structlog.stdlib.ProcessorFormatter.wrap_for_formatter,\n       ],\n       # context_class=structlog.threadlocal.wrap_dict(dict), # <---- remove this\n       logger_factory=structlog.stdlib.LoggerFactory(),\n       cache_logger_on_first_use=True,\n   )\n\n   # If you use standard logging\n   LOGGING = {\n       \"version\": 1,\n       \"disable_existing_loggers\": False,\n       \"formatters\": {\n           \"json_formatter\": {\n               \"()\": structlog.stdlib.ProcessorFormatter,\n               \"processor\": structlog.processors.JSONRenderer(),\n               \"foreign_pre_chain\": [\n                   structlog.contextvars.merge_contextvars, # <---- add this\n                   # django_structlog.processors.inject_context_dict, # <---- remove this\n                   structlog.processors.TimeStamper(fmt=\"iso\"),\n                   structlog.stdlib.add_logger_name,\n                   structlog.stdlib.add_log_level,\n                   structlog.stdlib.PositionalArgumentsFormatter(),\n               ],\n           },\n       },\n       ...\n    }\n\n\n2. Replace all ``logger.bind`` with ``structlog.contextvars.bind_contextvars``\n------------------------------------------------------------------------------\n\n.. code-block:: python\n\n   @receiver(bind_extra_request_metadata)\n   def bind_user_email(request, logger, **kwargs):\n      # logger.bind(user_email=getattr(request.user, 'email', ''))\n      structlog.contextvars.bind_contextvars(user_email=getattr(request.user, 'email', ''))\n\n.. _upgrade_2.0:\n\nUpgrading to 2.0+\n^^^^^^^^^^^^^^^^^\n\n``django-structlog`` was originally developed using the debug configuration `ExceptionPrettyPrinter <https://www.structlog.org/en/stable/api.html#structlog.processors.ExceptionPrettyPrinter>`_ which led to incorrect handling of exception.\n\n- remove ``structlog.processors.ExceptionPrettyPrinter(),`` of your processors.\n- make sure you have ``structlog.processors.format_exc_info,`` in your processors if you want appropriate exception logging.\n\n.. inclusion-marker-upgrade-guide-end\n\n.. inclusion-marker-running-tests-begin\n\nRunning the tests\n=================\n\nNote: For the moment redis is needed to run the tests. The easiest way start docker's demo.\n\n.. code-block:: bash\n\n   docker-compose up --build\n\nIn another shell\n\n.. code-block:: bash\n\n   pip install -r requirements.txt\n   env CELERY_BROKER_URL=redis://0.0.0.0:6379 pytest test_app\n   env CELERY_BROKER_URL=redis://0.0.0.0:6379 DJANGO_SETTINGS_MODULE=config.settings.test_demo_app pytest django_structlog_demo_project\n\n.. inclusion-marker-running-tests-end\n\n\n.. inclusion-marker-demo-begin\n\nDemo app\n========\n\n.. code-block:: bash\n\n   docker-compose up --build\n\nOpen ``http://0.0.0.0:8000/`` in your browser.\n\nNavigate while looking into the log files and shell's output.\n\n.. inclusion-marker-demo-end\n\n\n.. inclusion-marker-authors-begin\n\nAuthors\n=======\n\n\n* **Jules Robichaud-Gagnon** - *Initial work* - `jrobichaud <https://github.com/jrobichaud>`_\n\nSee also the list of `contributors <https://github.com/jrobichaud/django-structlog/contributors>`_ who participated in this project.\n\n.. inclusion-marker-authors-end\n\n\n.. inclusion-marker-acknowledgements-begin\n\nAcknowledgments\n===============\n\n* Big thanks to `@ferd <https://github.com/ferd>`_ for his `bad opinions <https://ferd.ca/erlang-otp-21-s-new-logger.html>`_ that inspired the author enough to spend time on this library.\n* `This issue <https://github.com/hynek/structlog/issues/175>`_ helped the author to figure out how to integrate ``structlog`` in Django.\n* `This stack overflow question <https://stackoverflow.com/questions/43855507/configuring-and-using-structlog-with-django>`_ was also helpful.\n\n.. inclusion-marker-acknowledgements-end\n\nLicense\n=======\n\nThis project is licensed under the MIT License - see the `LICENSE <https://github.com/jrobichaud/django-structlog/blob/master/LICENSE.rst>`_ file for details\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jrobichaud/django-structlog",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-structlog",
    "package_url": "https://pypi.org/project/django-structlog/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-structlog/",
    "project_urls": {
      "Homepage": "https://github.com/jrobichaud/django-structlog"
    },
    "release_url": "https://pypi.org/project/django-structlog/4.0.0/",
    "requires_dist": [
      "django (>=3.2)",
      "structlog (>=21.4.0)",
      "django-ipware",
      "celery (>=5.1) ; extra == 'celery'"
    ],
    "requires_python": ">=3.7",
    "summary": "Structured Logging for Django",
    "version": "4.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17430645,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76dcc44f23e9a0434dcf5943ef3766bf46bb6343d1c6ae5426307172bf977633",
        "md5": "fc83cd9a59c0ea46d512d646cf792972",
        "sha256": "36b7e9a372fb6781f1736dc1b13175e78b702b14b527dcbda463da045ab67e93"
      },
      "downloads": -1,
      "filename": "django_structlog-4.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fc83cd9a59c0ea46d512d646cf792972",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 12721,
      "upload_time": "2022-10-23T01:26:18",
      "upload_time_iso_8601": "2022-10-23T01:26:18.352326Z",
      "url": "https://files.pythonhosted.org/packages/76/dc/c44f23e9a0434dcf5943ef3766bf46bb6343d1c6ae5426307172bf977633/django_structlog-4.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c7f9daca244ce808fda46e5f5c305aa9abe149ba8f1e555beb7d0f3313cbc34",
        "md5": "476155a877ba857e313500845f746731",
        "sha256": "6d507da7bb4e1095f953ee7c151dc82ed57b99f119f7b57f6efffe2ee514f324"
      },
      "downloads": -1,
      "filename": "django-structlog-4.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "476155a877ba857e313500845f746731",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15301,
      "upload_time": "2022-10-23T01:26:20",
      "upload_time_iso_8601": "2022-10-23T01:26:20.373381Z",
      "url": "https://files.pythonhosted.org/packages/6c/7f/9daca244ce808fda46e5f5c305aa9abe149ba8f1e555beb7d0f3313cbc34/django-structlog-4.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}