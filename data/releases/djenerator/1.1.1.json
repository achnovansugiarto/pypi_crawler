{
  "info": {
    "author": "Mostafa M. Mohamed",
    "author_email": "mostafa.amin93@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Djenerator\n\nDjenerator is a simple tool made to generate test/random data from the model descriptions of django.\n\n## Installation\n\n1. Using pip, you can install djenerator using this command:\n\n```bash\n$ pip3 install djenerator\n```\n\n2. Add `'djenerator'` to your `INSTALLED_APPS`:\n\n```python\nINSTALLED_APPS = [\n   'django.contrib.admin',\n   'django.contrib.auth',\n   'django.contrib.contenttypes',\n   'django.contrib.sessions',\n   # ...\n   'djenerator',\n   # ...\n]\n```\n\n## Usage\n\nThe generation of data can be done by a command using the `manage.py` file in your project:\n\n```bash\n$ python3 manage.py jenerate app_name size\n```\n\nEquivalently, this can be done within python code\n\n```python\nfrom djenerator import generate_test_data\ngenerate_test_data(app_name, size)\n```\n\n### To generate for specific models\n\n```bash\n$ python3 manage.py jenerate app_name size --models ModelA ModelB ...\n```\n\nEquivalently, this can be done within python code\n\n```python\nfrom djenerator import generate_test_data\ngenerate_test_data(app_name, size, models_cls=[\"ModelA\", \"ModelB\"])\n```\n\n### To allow some null values\n\nBy default, djenerator generates data for all fields even if null values are allowed. To allow some null values, allow the following option:\n\n```bash\n$ python3 manage.py jenerate app_name size --allow-null\n```\n\nEquivalently, this can be done within python code\n\n```python\nfrom djenerator import generate_test_data\ngenerate_test_data(app_name, size, allow_null=True)\n```\n\n## Writing your custom generators\n\nYou can add a customized values generator for a some fields in some models.\n**This will most likely be required if you are writing your own validators.**\nWriting your customized generator, can be done by adding a class to the module `{app_name}.test_data`:\n1. Write a class with the same name as the model.\n2. For the fields to write a custom generator, write an attirbute with a matching name, with the generator as a value.\n\nThe generator is either a function with no any required arguments that generates random values, or can also be an iterable of all possible values.\n\nAs an example, in an app `testapp`, if `testapp/models.py` is:\n\n```python\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\n\ndef validate_mod91(value):\n    if value % 91 != 0:\n        raise ValidationError(\n            _('%(value)s is not an even number'), params={'value': value},\n        )\n\n\nclass TestModel(models.Model):\n    field1 = models.CharField(max_length=256)\n    field2 = models.BigIntegerField(validators=[validate_mod91])\n    field3 = models.IntegerField()\n\n    class Meta:\n        unique_together = (('field1', 'field2'),)\n```\n\nthen `testapp/test_data.py` will contain the following:\n\n```python\nimport random\n\nclass TestModel:\n    field2 = lambda: random.randint(1, 1000) * 91\n    field3 = list(range(10000))\n```\n\nThe value generator does not necessarily need to always generate unique or valid values, however, it should generate them with high probability.\nIn the example above, the `validate_mod91` checks if a number is divisible by 91, two bad generators can be:\n1. `lambda: random.randint(0, 100000)` will generate valid values but with only 1% chance; however, a chance higher than 20% or even 50% would be much better.\n1. `lambda: random.randint(0, 10) * 91` will generate only 11 unique valid values; however, it is recommended to return a factor higher than the total number of models to be generated (especially if there are `unique` or many `unique_together` constraints).\n\n\n## Running the tests\n\nRun the tests by running the command:\n\n```bash\n$ python3 manage.py test\n```\n\nThe following combinations are tested:\n\n| Django      | Python      | Status |\n| ----------- | ----------- | ------ |\n|    1.10.8   |     3.5     |   ✅   |\n|    1.11.29  |     3.5     |   ✅   |\n|    1.11.29  |     3.6     |   ✅   |\n|    1.11.29  |     3.7     |   ✅   |\n|    2.2.28   |     3.5     |   ✅   |\n|    2.2.28   |     3.6     |   ✅   |\n|    2.2.28   |     3.7     |   ✅   |\n|    3.2.15   |     3.6     |   ✅   |\n|    3.2.15   |     3.7     |   ✅   |\n|    4.0.7    |     3.8     |   ✅   |\n|    4.0.7    |     3.9     |   ✅   |\n|    4.1.1    |     3.8     |   ✅   |\n|    4.1.1    |     3.9     |   ✅   |\n\n## Requirements\n\n1. `django >= 1.10`.\n1. `pytz` is required to be manually installed for `django < 1.11`, otherwise it is installed by django when it is required (it is not required for some higher versions of django).\n1. `pillow` if ImageFields are used, we don't require it be default, but django will.\n\nOur setup requires only `django`, other packages are reported by django.\n\n## TODOs and BUGS\n\nSee: https://github.com/mostafa-mahmoud/djenerator/issues\n",
    "description_content_type": "text/markdown",
    "docs_url": "https://pythonhosted.org/djenerator/",
    "download_url": "https://github.com/mostafa-mahmoud/djenerator/archive/v1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mostafa-mahmoud/djenerator",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djenerator",
    "package_url": "https://pypi.org/project/djenerator/",
    "platform": null,
    "project_url": "https://pypi.org/project/djenerator/",
    "project_urls": {
      "Download": "https://github.com/mostafa-mahmoud/djenerator/archive/v1.1.tar.gz",
      "Homepage": "https://github.com/mostafa-mahmoud/djenerator"
    },
    "release_url": "https://pypi.org/project/djenerator/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple app for generating test data for a given django models description.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15213639,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b181490b3b9b6f92facf1ffb21b5f1a226bfacc3b4355afede6fdd2c70883777",
        "md5": "b3c40390abf4401f78b77290331c67f4",
        "sha256": "7fd67885f3459beb92377dfcbddc6138a30b70a6db0070e0b3e76ac271470cb6"
      },
      "downloads": -1,
      "filename": "djenerator-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b3c40390abf4401f78b77290331c67f4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19842,
      "upload_time": "2022-09-26T01:50:15",
      "upload_time_iso_8601": "2022-09-26T01:50:15.902734Z",
      "url": "https://files.pythonhosted.org/packages/b1/81/490b3b9b6f92facf1ffb21b5f1a226bfacc3b4355afede6fdd2c70883777/djenerator-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}