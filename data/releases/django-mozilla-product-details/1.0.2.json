{
  "info": {
    "author": "Fred Wenzel",
    "author_email": "fwenzel@mozilla.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Environment :: Web Environment :: Mozilla",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Mozilla Product Details for Django\n==================================\n\n|GHACI| |PyPI|\n\n**Mozilla Product Details** is a\n`library <http://viewvc.svn.mozilla.org/vc/libs/product-details/README?view=markup>`__\ncontaining information about the latest versions, localizations, etc. of\n`Mozilla <http://www.mozilla.org>`__ products (most notably Firefox,\nFirefox for mobile, and Thunderbird).\n\nFrom the original `README\nfile <http://viewvc.svn.mozilla.org/vc/libs/product-details/README?view=markup>`__:\n\n::\n\n    This library holds information about the current builds of Firefox and\n    Thunderbird that Mozilla ships including:\n\n    - Latest version numbers for all builds\n    - English and Native names for all languages we support\n\nThis is a `Django <http://www.djangoproject.com/>`__ app allowing this\ndata to be used in Django projects. A Django management command can be\nused as a cron job or called manually to keep the data in sync with\nMozilla.\n\nWhy?\n----\n\nThe `data source <http://svn.mozilla.org/libs/product-details/>`__ of\nMozilla Product Details is a PHP library kept on the Mozilla SVN server,\nand was originally written so it could be included into PHP projects via\nan `SVN external <http://svnbook.red-bean.com/en/1.0/ch07s03.html>`__. A\nsimple ``svn up`` would fetch the latest data when it became available.\n\nIn the meantime, the Product Details library received an additional JSON\nfeed, allowing non-PHP projects to consume the data. If, however, the\nconsumer is not kept in SVN like the library is, there is no easy way to\nkeep the data up to date.\n\nFor Django projects, this app solves that problem.\n\nGetting Started\n---------------\n\nInstalling\n~~~~~~~~~~\n\nInstall this library using ``pip``:\n\n::\n\n    pip install django-mozilla-product-details\n\n... or by downloading the ``product_details`` directory and dropping it\ninto your django project.\n\nAdd ``product_details`` to your ``INSTALLED_APPS`` to enable the\nmanagement commands.\n\nConfiguration\n~~~~~~~~~~~~~\n\nNo configuration should be necessary. However, you can add the\nfollowing settings to your ``settings.py`` file if you disagree with the\ndefaults:\n\n-  ``PROD_DETAILS_URL`` defaults to the JSON directory on the Mozilla\n   SVN server. If you have a secondary mirror at hand, or you want this\n   tool to download completely unrelated JSON files from somewhere else,\n   adjust this setting. Include a trailing slash.\n-  ``PROD_DETAILS_DIR`` is the target directory for the JSON files. It\n   needs to be writable by the user that'll execute the management\n   command, and readable by the user running the Django project.\n   Defaults to: ``.../install_dir_of_this_app/product_details/json/``\n   (only for use with ``PDFileStorage`` backend (see below)).\n\nYou can further decide where the JSON data should be stored by using\na storage backend class. There are 2 provided in the app currently, but\nit should be easy to create a subclass of\n``product_details.storage.ProductDetailsStorage`` and store them wherever\nyou like. The two provided are for the filesystem (the default) and\nthe database. To configure which backend it uses set the following:\n\n-  ``PROD_DETAILS_STORAGE`` a string of the dotted path to a storage\n   class (like in MIDDLEWARE_CLASSES). Available classes included with\n   the app are ``product_details.storage.PDFileStorage`` (default) and\n   ``product_details.storage.PDDatabaseStorage``. To use the database\n   storage class you should run migrations (./manage.py migrate) which\n   will create the database table required to store the data and populate\n   the table with the JSON data included with the library (or the data\n   in the configured data directory). You can then keep the data updated\n   via the ``update_product_details`` management command just like normal.\n\nThis app uses Django's cache framework to store the product data so that\nthe data can be updated on the site without requiring a server restart.\nThe following settings will allow you to control how this works.\n\n-  ``PROD_DETAILS_CACHE_NAME`` defaults to the cache in your ``CACHES``\n   setting called ``default`` (django provides an in-memory cache here\n   by default). If you provide a name of a cache configured in the\n   Django configuration ``CACHES``, it will use that cache to store the\n   file data instead.\n-  ``PROD_DETAILS_CACHE_TIMEOUT`` If set to an integer, it represents\n   the number of seconds the cached data should be kept per file.\n   Defaults to 12 hours.\n\nUpdating the feed\n~~~~~~~~~~~~~~~~~\n\nTo update the data, execute this:\n\n::\n\n    ./manage.py update_product_details\n\nYou want to run this once manually after installing the app. To\nperiodically pull in new data, you can make this a cron job.\n\n**Note:** Please be considerate of the server when adding a cron job.\nThe data does not change often enough to warrant an update every minute\nor so. Most applications will run perfectly fine if you pull new data\nonce a day or even less frequently. When in doubt, contact the author of\nthis library.\n\nUsing the data\n~~~~~~~~~~~~~~\n\nTo use the data, just import the library:\n\n::\n\n    from product_details import product_details\n\nThe library turns all imported JSON files automatically into Python\nobjects. The contents are perhaps best inspected using\n`IPython <http://ipython.scipy.org/>`__.\n\nVersion Compare\n---------------\n\nProduct details comes with an implementation of version comparison code\nfor Mozilla-style product versions. Use it like this:\n\n::\n\n    >>> from product_details.version_compare import Version\n    >>> v1 = Version('4.0b10')\n    >>> v2 = Version('4.0b10pre')\n    >>> v1 < v2\n    False\n\nThe second useful part of the version compare code is generating a list\nof unique versions, sorted by their release date, like this:\n\n::\n\n    >>> from product_details import product_details\n    >>> from product_details.version_compare import version_list\n    >>> version_list(product_details.firefox_history_development_releases)\n    ['3.6.4', '3.6.3', '3.6', '3.6b5', '3.6b4', '3.6b3', '3.6b2', ... ]\n\nCaveats / Known Issues\n----------------------\n\n1. While the management task will not overwrite existing files if the\n   server returns bogus data (i.e., an empty document or unparseable\n   JSON data), this library will also *never delete* a JSON file that\n   was completely removed from the server. This is unlikely to happen\n   very often, though.\n2. You don't want to ``import product_details`` in ``settings.py`` as\n   that would cause an import loop (since product\\_details itself\n   imports ``django.conf.settings``). However, if you must, you can\n   lazily wrap the import like this, mitigating the problem:\n\n   ::\n\n       from django.utils.functional import lazy\n\n       MY_LANGUAGES = ('en-US', 'de')\n       class LazyLangs(list):\n           def __new__(self):\n               from product_details import product_details\n               return [(lang.lower(), product_details.languages[lang]['native'])\n                       for lang in MY_LANGUAGES]\n       LANGUAGES = lazy(LazyLangs, list)()\n3. Using product_details before Django has finished initializing, e.g. in your\n   app's ``__init__.py`` it may raise a\n   ``django.core.exceptions.AppRegistryNotReady`` exception. The lazy loading\n   example from above should help you overcome this issue.\n\nDevelopment\n-----------\n\nPatches are welcome.\n\nTo run tests, install ``tox`` and run ``tox`` from the project root.\nThis will run the tests in Python 3.7, 3.8 and 3.9 against\nvarious appropriate Django versions. If you don't have ``tox`` and/or all the\nversions of Python available, install ``nose``, ``mock``, ``requests``,\n``responses`` and ``Django`` (see ``tox.ini``'s ``deps``) and run the\ntests in your current Python version by running ``./runtests.py``.\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/django-mozilla-product-details.svg\n   :target: https://pypi.python.org/pypi/django-mozilla-product-details\n\n.. |GHACI| image:: https://github.com/mozilla/django-product-details/actions/workflows/ci.yml/badge.svg\n   :target: https://github.com/mozilla/django-product-details/actions\n\nReleasing\n---------\n\n1. Update the version number in ``product_details/__init__.py``.\n2. Add an entry to the change log in the README file.\n3. Tag the commit where you changed the above with the version number: e.g. ``0.14.1``.\n4. Push the commit and tag to the github repo.\n5. Github will build and release the package to PyPI.\n\nChange Log\n----------\n\n1.0.2 - 2022-01-31\n~~~~~~~~~~~~~~~~~~\n\n- Move CI to Github Actions. Thanks stevejalim!\n\n1.0.1 - 2022-01-13\n~~~~~~~~~~~~~~~~~~\n\n- Updates to be able to handle Firefox versions over 100. Thanks robhudson!\n\n1.0.0 - 2022-01-07\n~~~~~~~~~~~~~~~~~~\n\n- Drop Python 2 support.\n- Covert codebase to use black formatting.\n- Update the tox testing configuration to add new Django and Python releases.\n\nThanks to stevejalim and tasos for these improvements.\n\n0.14.1 - 2019-06-03\n~~~~~~~~~~~~~~~~~~~\n\n- Add back last-modified data for directory lists in the data to avoid migration failure.\n\n0.14 - 2019-05-28\n~~~~~~~~~~~~~~~~~\n\n- Remove the last-modified check for directory lists. Fixes #72. Thanks pmac!\n\n0.13.1 - 2019-03-03\n~~~~~~~~~~~~~~~~~~~\n\n- Tweak a migration to make Django 2+ under Python 3 happy. Fixes #68. Thanks peterbe!\n\n0.13 - 2017-08-30\n~~~~~~~~~~~~~~~~~~~\n\n- Lazily load the storage class to avoid import issues in Django 1.9+. Thanks Giorgos!\n\n0.12.1 - 2016-08-18\n~~~~~~~~~~~~~~~~~~~\n\n- Add --database option to management command to allow data to be updated\n  in a configured database other than \"default\".\n\n0.12 - 2016-07-29\n~~~~~~~~~~~~~~~~~\n\n- Update caching strategy to cache all files in a single cache entry. The file contents\n  are interdependent, so caching separately caused errors when timeouts were staggered.\n- Change the default data URL to https://product-details.mozilla.org/1.0/\n  (`bug 1282494 <https://bugzil.la/1282494>`__).\n\n0.11.1 - 2016-04-08\n~~~~~~~~~~~~~~~~~~~\n\n- Include updated JSON data in the release. A problem with deployment in Travis resulted in 0.11\n  failing to include the data.\n\n0.11 - 2016-04-08\n~~~~~~~~~~~~~~~~~\n\n- Wrap the update of JSON data in a transaction when using the database storage backend\n  (`bug 1254664 <https://bugzil.la/1254664>`__).\n- Avoid caching empty data (`bug 1254664 <https://bugzil.la/1254664>`__).\n\nThanks to jgmize for both of these improvements!\n\n0.10 - 2016-01-25\n~~~~~~~~~~~~~~~~~\n\n- Use requests lib to fetch remote data for reliability and better Py3k compatibility.\n- Update management command to avoid Django 1.9 deprecation warnings. Django 1.8 is now the minimum supported version.\n\nThanks to Osmose for both of these improvements!\n\n0.9 - 2015-12-28\n~~~~~~~~~~~~~~~~\n\n- Support for Python 3 and 2 simultaneously! Also provide a universal wheel package.\n- Support for Django 1.9. Thanks Osmose!\n\n0.8.2 - 2015-12-22\n~~~~~~~~~~~~~~~~~~\n\n- Use HTTPS by default to fetch JSON data. Thanks jvehent!\n- Fix product_details.last_update property. It's been broken since 0.8. Thanks for the report diox!\n\n0.8.1 - 2015-10-07\n~~~~~~~~~~~~~~~~~~\n\n- Add a data migration that will import the included JSON file data into the database\n  table upon creation.\n\n0.8 - 2015-09-30\n~~~~~~~~~~~~~~~~\n\n- Add configurable json data file storage backends.\n- Add filesystem and database backends.\n\n0.7.1 - 2015-06-15\n~~~~~~~~~~~~~~~~~~\n\n-  Do not cache a file miss.\n-  Catch an attempt to parse a non-JSON or corrupt file.\n\n0.7 - 2015-05-22\n~~~~~~~~~~~~~~~~\n\n-  Use the Django cache framework to store product data, allowing data to be\n   updated without a server restart.\n-  Add and update tests, setup tox for testing across Python and Django versions,\n   and setup Travis for CI.\n\n0.6 - 2015-05-08\n~~~~~~~~~~~~~~~~\n\n-  Initial PyPI release. Prior to this it was released and installed via github.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mozilla/django-product-details/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mozilla-product-details",
    "package_url": "https://pypi.org/project/django-mozilla-product-details/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-mozilla-product-details/",
    "project_urls": {
      "Homepage": "https://github.com/mozilla/django-product-details/"
    },
    "release_url": "https://pypi.org/project/django-mozilla-product-details/1.0.2/",
    "requires_dist": [
      "Django (>=2.2)",
      "requests (>=2.21.0)"
    ],
    "requires_python": "",
    "summary": "Product and locale details for Mozilla products.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13115454,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2cd28b408c914b995f3c3181bd73886e86b7615eafafecb0459b9e0c8bf01d92",
        "md5": "89c73158f2e2b1e56c9748d31dea089a",
        "sha256": "8ed5f548be1fc8e471fc2f0236f95c9be053619caa2b6761428a651d021547cf"
      },
      "downloads": -1,
      "filename": "django_mozilla_product_details-1.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89c73158f2e2b1e56c9748d31dea089a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 24644,
      "upload_time": "2022-02-23T13:56:19",
      "upload_time_iso_8601": "2022-02-23T13:56:19.572028Z",
      "url": "https://files.pythonhosted.org/packages/2c/d2/8b408c914b995f3c3181bd73886e86b7615eafafecb0459b9e0c8bf01d92/django_mozilla_product_details-1.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67c2fd0bcf9aeedaa83111931a7f5805c227580de71f04a5f390f33bcb44d198",
        "md5": "1896c2af82d6edc46f8b010eefbcc43e",
        "sha256": "404639d91e774241a9b37e7b7576bb020835730d6fafd3b5ec9eaf03afff6b08"
      },
      "downloads": -1,
      "filename": "django-mozilla-product-details-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1896c2af82d6edc46f8b010eefbcc43e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20480,
      "upload_time": "2022-02-23T14:02:27",
      "upload_time_iso_8601": "2022-02-23T14:02:27.136217Z",
      "url": "https://files.pythonhosted.org/packages/67/c2/fd0bcf9aeedaa83111931a7f5805c227580de71f04a5f390f33bcb44d198/django-mozilla-product-details-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}