{
  "info": {
    "author": "Maciej Wisniowski",
    "author_email": "maciej.wisniowski@natcam.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "What is it?\n===========\n\ndjango-datatables-view is a base view for handling server side processing for the awesome datatables (http://datatables.net).\n\ndjango-datatables-view simplifies handling of sorting, filtering and creating JSON output, as defined at:\nhttp://datatables.net/usage/server-side\n\n\nUsage\n=====\n\n1. pip install django-datatables-view\n\n2. views.py:\n\n  django_datatables_view uses GenericViews, so your view should just inherit from base class: BaseDatatableView, and override few things.\n  These are:\n\n  * order_columns - list of column names used for sorting (eg. if user sorts by second column then second column name from this list will be used in order by).\n  * get_initial_queryset - method that should return queryset used to populate datatable\n  * filter_queryset - if you want to filter your datatable then override this method\n  * prepare_results - this method should return list of lists (rows with columns) as needed by datatables\n\n  See example below:\n\n    :::python\n\n        from django_datatables_view.base_datatable_view import BaseDatatableView\n\n        class OrderListJson(BaseDatatableView):\n            # define column names that will be used in sorting\n            # order is important and should be same as order of columns\n            # displayed by datatables. For non sortable columns use empty\n            # value like ''\n            order_columns = ['number', 'user', 'state']\n\n            # set max limit of records returned, this is used to protect our site if someone tries to attack our site\n            # and make it return huge amount of data\n            max_display_length = 500\n\n            def get_initial_queryset(self):\n                # return queryset used as base for futher sorting/filtering\n                # these are simply objects displayed in datatable\n                return MyModel.objects.all()\n\n            def filter_queryset(self, qs):\n                # use request parameters to filter queryset\n\n                # simple example:\n                sSearch = self.request.POST.get('sSearch', None)\n                if sSearch:\n                    qs = qs.filter(name__istartswith=sSearch)\n\n                # more advanced example\n                filter_customer = self.request.POST.get('customer', None)\n\n                if filter_customer:\n                    customer_parts = filter_customer.split(' ')\n                    qs_params = None\n                    for part in customer_parts:\n                        q = Q(customer_firstname__istartswith=part)|Q(customer_lastname__istartswith=part)\n                        qs_params = qs_params | q if qs_params else q\n                    qs = qs.filter(qs_params)\n                return qs\n\n            def prepare_results(self, qs):\n                # prepare list with output column data\n                # queryset is already paginated here\n                json_data = []\n                for item in qs:\n                    json_data.append([\n                        item.number,\n                        \"%s %s\" % (item.customer_firstname, item.customer_lastname),\n                        item.get_state_display(),\n                        item.created.strftime(\"%Y-%m-%d %H:%M:%S\"),\n                        item.modified.strftime(\"%Y-%m-%d %H:%M:%S\")\n                    ])\n                return json_data\n\n3. urls.py\n\n  Add typical django's clause:\n\n    ::: python\n\n        # ...\n        url(r'^my/datatable/data/$', login_required(OrderListJson.as_view()), name='order_list_json'),\n        # ....\n\n4. Define HTML + JavaScript part as usual, eg:\n\n  Example JS:\n\n    ::: javascript\n\n      $(document).ready(function() {\n          var oTable = $('.datatable').dataTable({\n              // ...\n              \"bProcessing\": true,\n              \"bServerSide\": true,\n              \"sAjaxSource\": \"{% url order_list_json %}\"\n          });\n          // ...\n      });",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/pigletto/django-datatables-view",
    "keywords": "django datatables view",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-datatables-view",
    "package_url": "https://pypi.org/project/django-datatables-view/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-datatables-view/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/pigletto/django-datatables-view"
    },
    "release_url": "https://pypi.org/project/django-datatables-view/1.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django datatables view",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13412036,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f16dddfda425982d5d2b95c05f292025d33ab5847bb96ed1fc40b9f8fc605dc",
        "md5": "11a08f384b4e22ce880237bf573fd9e0",
        "sha256": "15fa19e20eb57c13632a9e5be9831b82a98fbd5137acc8ea6f71610e97a4dbaf"
      },
      "downloads": -1,
      "filename": "django-datatables-view-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "11a08f384b4e22ce880237bf573fd9e0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5933,
      "upload_time": "2013-03-17T21:37:55",
      "upload_time_iso_8601": "2013-03-17T21:37:55.000344Z",
      "url": "https://files.pythonhosted.org/packages/9f/16/dddfda425982d5d2b95c05f292025d33ab5847bb96ed1fc40b9f8fc605dc/django-datatables-view-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}