{
  "info": {
    "author": "Maciej Wisniowski",
    "author_email": "maciej.wisniowski@natcam.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "About\n=====\n\ndjango-datatables-view is a base view for handling server side processing for the awesome datatables (http://datatables.net).\n\ndjango-datatables-view simplifies handling of sorting, filtering and creating JSON output, as defined at: http://datatables.net/usage/server-side\n\nExample\n=======\n\nExample project that uses django-datatables-view is available at: https://bitbucket.org/pigletto/django-datatables-view-example/\n\nUsage\n=====\n\n### 1. Install django-datatables-view ###\n  \n    pip install django-datatables-view\n\n### 2. Edit views.py ###\n\n_django_datatables_view_ uses **GenericViews**, so your view should just inherit from base class: **BaseDatatableView**, and override few things.\n  These are:\n\n  * **model** - the model that should be used to populate the datatable\n  * **columns** - the columns that are going to be displayed\n  * **order_columns** - list of column names used for sorting (eg. if user sorts by second column then second column name from this list will be used in order by).\n  * **filter_queryset** - if you want to filter your datatable then override this method\n\n  For more advanced customisation you might want to override:\n\n  * **get_initial_queryset** - method that should return queryset used to populate datatable\n  * **prepare_results** - this method should return list of lists (rows with columns) as needed by datatables\n\n  See example below:\n\n    :::python\n\n        from django_datatables_view.base_datatable_view import BaseDatatableView\n\n        class OrderListJson(BaseDatatableView):\n            # The model we're going to show\n            model = MyModel\n\n            # define the columns that will be returned\n            columns = ['number', 'user', 'state', 'created', 'modified']\n\n            # define column names that will be used in sorting\n            # order is important and should be same as order of columns\n            # displayed by datatables. For non sortable columns use empty\n            # value like ''\n            order_columns = ['number', 'user', 'state']\n\n            # set max limit of records returned, this is used to protect our site if someone tries to attack our site\n            # and make it return huge amount of data\n            max_display_length = 500\n\n            def render_column(self, row, column):\n                # We want to render user as a custom column\n                if column == 'user':\n                    return '%s %s' % (row.customer_firstname, row.customer_lastname)\n                else:\n                    return super(OrderListJson, self).render_column(row, column)\n\n            def filter_queryset(self, qs):\n                # use request parameters to filter queryset\n\n                # simple example:\n                sSearch = self.request.POST.get('sSearch', None)\n                if sSearch:\n                    qs = qs.filter(name__istartswith=sSearch)\n\n                # more advanced example\n                filter_customer = self.request.POST.get('customer', None)\n\n                if filter_customer:\n                    customer_parts = filter_customer.split(' ')\n                    qs_params = None\n                    for part in customer_parts:\n                        q = Q(customer_firstname__istartswith=part)|Q(customer_lastname__istartswith=part)\n                        qs_params = qs_params | q if qs_params else q\n                    qs = qs.filter(qs_params)\n                return qs\n\n### 3. Edit urls.py ###\n\n  Add typical django's urlconf entry:\n\n        # ...\n        url(r'^my/datatable/data/$', login_required(OrderListJson.as_view()), name='order_list_json'),\n        # ....\n\n### 4. Define HTML + JavaScript ###\n\nExample JS:\n\n    $(document).ready(function() {\n        var oTable = $('.datatable').dataTable({\n            // ...\n            \"bProcessing\": true,\n            \"bServerSide\": true,\n            \"sAjaxSource\": \"{% url order_list_json %}\"\n        });\n        // ...\n    });\n\n\n## Another example of views.py customisation ##\n\n    from django_datatables_view.base_datatable_view import BaseDatatableView\n\n    class OrderListJson(BaseDatatableView):\n        order_columns = ['number', 'user', 'state']\n\n        def get_initial_queryset(self):\n            # return queryset used as base for futher sorting/filtering\n            # these are simply objects displayed in datatable\n            # You should not filter data returned here by any filter values entered by user. This is because\n            # we need some base queryset to count total number of records.\n            return MyModel.objects.filter(something=self.kwargs['something'])\n\n        def filter_queryset(self, qs):\n            # use request parameters to filter queryset\n\n            # simple example:\n            sSearch = self.request.POST.get('sSearch', None)\n            if sSearch:\n                qs = qs.filter(name__istartswith=sSearch)\n\n            # more advanced example\n            filter_customer = self.request.POST.get('customer', None)\n\n            if filter_customer:\n                customer_parts = filter_customer.split(' ')\n                qs_params = None\n                for part in customer_parts:\n                    q = Q(customer_firstname__istartswith=part)|Q(customer_lastname__istartswith=part)\n                    qs_params = qs_params | q if qs_params else q\n                qs = qs.filter(qs_params)\n            return qs\n\n        def prepare_results(self, qs):\n            # prepare list with output column data\n            # queryset is already paginated here\n            json_data = []\n            for item in qs:\n                json_data.append([\n                    item.number,\n                    \"%s %s\" % (item.customer_firstname, item.customer_lastname),\n                    item.get_state_display(),\n                    item.created.strftime(\"%Y-%m-%d %H:%M:%S\"),\n                    item.modified.strftime(\"%Y-%m-%d %H:%M:%S\")\n                ])\n            return json_data",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/pigletto/django-datatables-view",
    "keywords": "django datatables view",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-datatables-view",
    "package_url": "https://pypi.org/project/django-datatables-view/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-datatables-view/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/pigletto/django-datatables-view"
    },
    "release_url": "https://pypi.org/project/django-datatables-view/1.7/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django datatables view",
    "version": "1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13412036,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18717f83d69aa661908619106ecb6a1829d6063035576aa427ebe63d11c93654",
        "md5": "ca8e6e3ee93a8222c54c71b2a6064794",
        "sha256": "d4615ee68cf99e6eb67b43eff636cfc7907722571dd62bf0dd6b7184da8917fb"
      },
      "downloads": -1,
      "filename": "django-datatables-view-1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "ca8e6e3ee93a8222c54c71b2a6064794",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6789,
      "upload_time": "2013-11-20T18:46:50",
      "upload_time_iso_8601": "2013-11-20T18:46:50.937655Z",
      "url": "https://files.pythonhosted.org/packages/18/71/7f83d69aa661908619106ecb6a1829d6063035576aa427ebe63d11c93654/django-datatables-view-1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}