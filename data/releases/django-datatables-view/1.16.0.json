{
  "info": {
    "author": "Maciej Wisniowski",
    "author_email": "maciej.wisniowski@natcam.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "About\n=====\n\ndjango-datatables-view is a base view for handling server side\nprocessing for the awesome datatables 1.9.x, 1.10.x\n(http://datatables.net).\n\ndjango-datatables-view simplifies handling of sorting, filtering and\ncreating JSON output, as defined at:\nhttp://datatables.net/examples/server\\_side/\n\nExample\n=======\n\nExample project that uses django-datatables-view is available at:\nhttps://bitbucket.org/pigletto/django-datatables-view-example/\n\nUsage\n=====\n\n1. Install django-datatables-view\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    pip install django-datatables-view\n\n2. Edit views.py\n~~~~~~~~~~~~~~~~\n\n*django\\_datatables\\_view* uses **GenericViews**, so your view should\njust inherit from base class: **BaseDatatableView**, and override few\nthings (there is also a DatatableMixin - pure datatables handler that\ncan be used with the mixins of your choice, eg. django-braces). These\nare:\n\n-  **model** - the model that should be used to populate the datatable\n-  **columns** - the columns that are going to be displayed\n-  **order\\_columns** - list of column names used for sorting (eg. if\n   user sorts by second column then second column name from this list\n   will be used with order by clause).\n-  **filter\\_queryset** - if you want to filter your datatable then\n   override this method\n\nFor more advanced customisation you might want to override:\n\n-  **get\\_initial\\_queryset** - method that should return queryset used\n   to populate datatable\n-  **prepare\\_results** - this method should return list of lists (rows\n   with columns) as needed by datatables\n-  **escape\\_values** - you can set this attribute to False in order to\n   not escape values returned from render\\_column method\n\nThe code is rather simple so do not hesitate to have a look at it.\nMethod that is executed first (and that calls other methods) is\n**get\\_context\\_data**\n\nSee example below:\n\n.. code:: python\n\n\n        from django_datatables_view.base_datatable_view import BaseDatatableView\n        from django.utils.html import escape\n\n        class OrderListJson(BaseDatatableView):\n            # The model we're going to show\n            model = MyModel\n\n            # define the columns that will be returned\n            columns = ['number', 'user', 'state', 'created', 'modified']\n\n            # define column names that will be used in sorting\n            # order is important and should be same as order of columns\n            # displayed by datatables. For non sortable columns use empty\n            # value like ''\n            order_columns = ['number', 'user', 'state', '', '']\n\n            # set max limit of records returned, this is used to protect our site if someone tries to attack our site\n            # and make it return huge amount of data\n            max_display_length = 500\n\n            def render_column(self, row, column):\n                # We want to render user as a custom column\n                if column == 'user':\n                    # escape HTML for security reasons\n                    return escape('{0} {1}'.format(row.customer_firstname, row.customer_lastname))\n                else:\n                    return super(OrderListJson, self).render_column(row, column)\n\n            def filter_queryset(self, qs):\n                # use parameters passed in GET request to filter queryset\n\n                # simple example:\n                search = self.request.GET.get(u'search[value]', None)\n                if search:\n                    qs = qs.filter(name__istartswith=search)\n\n                # more advanced example using extra parameters\n                filter_customer = self.request.GET.get(u'customer', None)\n\n                if filter_customer:\n                    customer_parts = filter_customer.split(' ')\n                    qs_params = None\n                    for part in customer_parts:\n                        q = Q(customer_firstname__istartswith=part)|Q(customer_lastname__istartswith=part)\n                        qs_params = qs_params | q if qs_params else q\n                    qs = qs.filter(qs_params)\n                return qs\n\n3. Edit urls.py\n~~~~~~~~~~~~~~~\n\nAdd typical django's urlconf entry:\n\n.. code:: python\n\n    url(r'^my/datatable/data/$', login_required(OrderListJson.as_view()), name='order_list_json'),\n\n4. Define HTML + JavaScript\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nExample JS:\n\n.. code:: javascript\n\n    $(document).ready(function() {\n        var oTable = $('.datatable').dataTable({\n            // ...\n            \"processing\": true,\n            \"serverSide\": true,\n            \"ajax\": \"{% url 'order_list_json' %}\"\n        });\n        // ...\n    });\n\nAnother example of views.py customisation\n-----------------------------------------\n\n.. code:: python\n\n    from django_datatables_view.base_datatable_view import BaseDatatableView\n    from django.utils.html import escape\n\n    class OrderListJson(BaseDatatableView):\n        order_columns = ['number', 'user', 'state']\n\n        def get_initial_queryset(self):\n            # return queryset used as base for futher sorting/filtering\n            # these are simply objects displayed in datatable\n            # You should not filter data returned here by any filter values entered by user. This is because\n            # we need some base queryset to count total number of records.\n            return MyModel.objects.filter(something=self.kwargs['something'])\n\n        def filter_queryset(self, qs):\n            # use request parameters to filter queryset\n\n            # simple example:\n            search = self.request.GET.get(u'search[value]', None)\n            if search:\n                qs = qs.filter(name__istartswith=search)\n\n            # more advanced example\n            filter_customer = self.request.GET.get(u'customer', None)\n\n            if filter_customer:\n                customer_parts = filter_customer.split(' ')\n                qs_params = None\n                for part in customer_parts:\n                    q = Q(customer_firstname__istartswith=part)|Q(customer_lastname__istartswith=part)\n                    qs_params = qs_params | q if qs_params else q\n                qs = qs.filter(qs_params)\n            return qs\n\n        def prepare_results(self, qs):\n            # prepare list with output column data\n            # queryset is already paginated here\n            json_data = []\n            for item in qs:\n                json_data.append([\n                    escape(item.number),  # escape HTML for security reasons\n                    escape(\"{0} {1}\".format(item.customer_firstname, item.customer_lastname)),  # escape HTML for security reasons\n                    item.get_state_display(),\n                    item.created.strftime(\"%Y-%m-%d %H:%M:%S\"),\n                    item.modified.strftime(\"%Y-%m-%d %H:%M:%S\")\n                ])\n            return json_data\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/pigletto/django-datatables-view",
    "keywords": "django datatables view",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-datatables-view",
    "package_url": "https://pypi.org/project/django-datatables-view/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-datatables-view/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/pigletto/django-datatables-view"
    },
    "release_url": "https://pypi.org/project/django-datatables-view/1.16.0/",
    "requires_dist": [
      "setuptools"
    ],
    "requires_python": "",
    "summary": "Django datatables view",
    "version": "1.16.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13412036,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76b29855357f5dfbc88227f71ce3b49ca254e145aa745f0acc83c9b8d4f1ffe5",
        "md5": "2b4b824e0121a6a7be09e24fc763c019",
        "sha256": "319298cc365900d5939e56a6b8ed0d809782d6bb0bc9c1577d4d474ec406d53a"
      },
      "downloads": -1,
      "filename": "django_datatables_view-1.16.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2b4b824e0121a6a7be09e24fc763c019",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 7248,
      "upload_time": "2018-04-19T09:41:26",
      "upload_time_iso_8601": "2018-04-19T09:41:26.684093Z",
      "url": "https://files.pythonhosted.org/packages/76/b2/9855357f5dfbc88227f71ce3b49ca254e145aa745f0acc83c9b8d4f1ffe5/django_datatables_view-1.16.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4df3e50055e87ed21a6c5c5fbe4105f33cd62a786b7fe15fed09f2ec63db50b7",
        "md5": "3a8cd87eb3a5e95e72932db7681b17e0",
        "sha256": "b1bad13676b0e01f19114e8a2b889d7441938125a996c903d1c5c9df6ccc5321"
      },
      "downloads": -1,
      "filename": "django-datatables-view-1.16.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3a8cd87eb3a5e95e72932db7681b17e0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9621,
      "upload_time": "2018-04-19T09:47:29",
      "upload_time_iso_8601": "2018-04-19T09:47:29.157298Z",
      "url": "https://files.pythonhosted.org/packages/4d/f3/e50055e87ed21a6c5c5fbe4105f33cd62a786b7fe15fed09f2ec63db50b7/django-datatables-view-1.16.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}