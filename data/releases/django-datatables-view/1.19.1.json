{
  "info": {
    "author": "Maciej Wisniowski",
    "author_email": "maciej.wisniowski@natcam.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "About\n=====\n\ndjango-datatables-view is a base view for handling server side\nprocessing for the awesome datatables 1.9.x, 1.10.x\n(http://datatables.net).\n\ndjango-datatables-view simplifies handling of sorting, filtering and\ncreating JSON output, as defined at:\nhttp://datatables.net/examples/server\\_side/\n\nExample\n=======\n\nExample project that uses django-datatables-view is available at:\nhttps://bitbucket.org/pigletto/django-datatables-view-example/\n\nUsage\n=====\n\n1. Install django-datatables-view\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    pip install django-datatables-view\n\n2. Edit views.py\n~~~~~~~~~~~~~~~~\n\n*django\\_datatables\\_view* uses **GenericViews**, so your view should\njust inherit from base class: **BaseDatatableView**, and override few\nthings (there is also a DatatableMixin - pure datatables handler that\ncan be used with the mixins of your choice, eg. django-braces). These\nare:\n\n-  **model** - the model that should be used to populate the datatable\n-  **columns** - the columns that are going to be displayed. If not\n   defined then django\\_datatables\\_view will look for 'name' in the\n   columns definition provided in the request by DataTables, eg.:\n   columnDefs: [{name: 'name', targets: [0]} (only works for datatables\n   1.10+)\n-  **order\\_columns** - list of column names used for sorting (eg. if\n   user sorts by second column then second column name from this list\n   will be used with order by clause). If not defined then\n   django\\_datatables\\_view will look for 'name' in the columns\n   definition provided in the request by DataTables, eg.: columnDefs:\n   [{name: 'name', targets: [0]} (only works for datatables 1.10+)\n-  **filter\\_queryset** - if you want to filter your DataTable in some\n   specific way then override this method. In case of older DataTables\n   (pre 1.10) you need to override this method or there will be no\n   filtering.\n-  **filter\\_method** - returns 'istartswith' by default, you can\n   override it to use different filtering method, e.g. icontains: return\n   self.FILTER\\_ICONTAINS\n\nFor more advanced customisation you might want to override:\n\n-  **get\\_initial\\_queryset** - method that should return queryset used\n   to populate datatable\n-  **prepare\\_results** - this method should return list of lists (rows\n   with columns) as needed by datatables\n-  **escape\\_values** - you can set this attribute to False in order to\n   not escape values returned from render\\_column method\n\nThe code is rather simple so do not hesitate to have a look at it.\nMethod that is executed first (and that calls other methods to execute\nwhole logic) is **get\\_context\\_data**. Definitely have a look at this\nmethod!\n\nSee example below:\n\n.. code:: python\n\n\n        from django_datatables_view.base_datatable_view import BaseDatatableView\n        from django.utils.html import escape\n\n        class OrderListJson(BaseDatatableView):\n            # The model we're going to show\n            model = MyModel\n\n            # define the columns that will be returned\n            columns = ['number', 'user', 'state', 'created', 'modified']\n\n            # define column names that will be used in sorting\n            # order is important and should be same as order of columns\n            # displayed by datatables. For non sortable columns use empty\n            # value like ''\n            order_columns = ['number', 'user', 'state', '', '']\n\n            # set max limit of records returned, this is used to protect our site if someone tries to attack our site\n            # and make it return huge amount of data\n            max_display_length = 500\n\n            def render_column(self, row, column):\n                # We want to render user as a custom column\n                if column == 'user':\n                    # escape HTML for security reasons\n                    return escape('{0} {1}'.format(row.customer_firstname, row.customer_lastname))\n                else:\n                    return super(OrderListJson, self).render_column(row, column)\n\n            def filter_queryset(self, qs):\n                # use parameters passed in GET request to filter queryset\n\n                # simple example:\n                search = self.request.GET.get('search[value]', None)\n                if search:\n                    qs = qs.filter(name__istartswith=search)\n\n                # more advanced example using extra parameters\n                filter_customer = self.request.GET.get('customer', None)\n\n                if filter_customer:\n                    customer_parts = filter_customer.split(' ')\n                    qs_params = None\n                    for part in customer_parts:\n                        q = Q(customer_firstname__istartswith=part)|Q(customer_lastname__istartswith=part)\n                        qs_params = qs_params | q if qs_params else q\n                    qs = qs.filter(qs_params)\n                return qs\n\n3. Edit urls.py\n~~~~~~~~~~~~~~~\n\nAdd typical django's urlconf entry:\n\n.. code:: python\n\n    url(r'^my/datatable/data/$', login_required(OrderListJson.as_view()), name='order_list_json'),\n\n4. Define HTML + JavaScript\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nExample JS:\n\n.. code:: javascript\n\n    $(document).ready(function() {\n        var oTable = $('.datatable').dataTable({\n            // ...\n            \"processing\": true,\n            \"serverSide\": true,\n            \"ajax\": \"{% url 'order_list_json' %}\"\n        });\n        // ...\n    });\n\nAnother example of views.py customisation\n-----------------------------------------\n\n.. code:: python\n\n    from django_datatables_view.base_datatable_view import BaseDatatableView\n    from django.utils.html import escape\n\n    class OrderListJson(BaseDatatableView):\n        order_columns = ['number', 'user', 'state']\n\n        def get_initial_queryset(self):\n            # return queryset used as base for futher sorting/filtering\n            # these are simply objects displayed in datatable\n            # You should not filter data returned here by any filter values entered by user. This is because\n            # we need some base queryset to count total number of records.\n            return MyModel.objects.filter(something=self.kwargs['something'])\n\n        def filter_queryset(self, qs):\n            # use request parameters to filter queryset\n\n            # simple example:\n            search = self.request.GET.get('search[value]', None)\n            if search:\n                qs = qs.filter(name__istartswith=search)\n\n            # more advanced example\n            filter_customer = self.request.GET.get('customer', None)\n\n            if filter_customer:\n                customer_parts = filter_customer.split(' ')\n                qs_params = None\n                for part in customer_parts:\n                    q = Q(customer_firstname__istartswith=part)|Q(customer_lastname__istartswith=part)\n                    qs_params = qs_params | q if qs_params else q\n                qs = qs.filter(qs_params)\n            return qs\n\n        def prepare_results(self, qs):\n            # prepare list with output column data\n            # queryset is already paginated here\n            json_data = []\n            for item in qs:\n                json_data.append([\n                    escape(item.number),  # escape HTML for security reasons\n                    escape(\"{0} {1}\".format(item.customer_firstname, item.customer_lastname)),  # escape HTML for security reasons\n                    item.get_state_display(),\n                    item.created.strftime(\"%Y-%m-%d %H:%M:%S\"),\n                    item.modified.strftime(\"%Y-%m-%d %H:%M:%S\")\n                ])\n            return json_data\n\nYet another example of views.py customisation\n---------------------------------------------\n\nThis sample assumes that list of columns and order columns is defined on\nthe client side (DataTables), eg.:\n\n.. code:: javascript\n\n    $(document).ready(function() {\n        var dt_table = $('.datatable').dataTable({\n            order: [[ 0, \"desc\" ]],\n            columnDefs: [\n                {\n                    name: 'name',\n                    orderable: true,\n                    searchable: true,\n                    targets: [0]\n                },\n                {\n                    name: 'description',\n                    orderable: true,\n                    searchable: true,\n                    targets: [1]\n                }\n            ],\n            searching: true,\n            processing: true,\n            serverSide: true,\n            stateSave: true,\n            ajax: TESTMODEL_LIST_JSON_URL\n        });\n    });\n\n.. code:: python\n\n    class TestModelListJson(BaseDatatableView):\n        model = TestModel\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/pigletto/django-datatables-view",
    "keywords": "django datatables view",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-datatables-view",
    "package_url": "https://pypi.org/project/django-datatables-view/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-datatables-view/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/pigletto/django-datatables-view"
    },
    "release_url": "https://pypi.org/project/django-datatables-view/1.19.1/",
    "requires_dist": [
      "setuptools"
    ],
    "requires_python": "",
    "summary": "Django datatables view",
    "version": "1.19.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13412036,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "135a62e6e99ca42942e604906aa028accf3a9accd7d3ebf58fed4229537504f5",
        "md5": "1dddfcee3545275b607dc455b11221a1",
        "sha256": "03a0fe265c16078e579d152f1fed77a51d1d4ea917aaf732a152bc022a1a6a60"
      },
      "downloads": -1,
      "filename": "django_datatables_view-1.19.1-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "1dddfcee3545275b607dc455b11221a1",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 9921,
      "upload_time": "2019-11-20T21:37:59",
      "upload_time_iso_8601": "2019-11-20T21:37:59.756686Z",
      "url": "https://files.pythonhosted.org/packages/13/5a/62e6e99ca42942e604906aa028accf3a9accd7d3ebf58fed4229537504f5/django_datatables_view-1.19.1-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "822d9fe9c4f3a621b5073344b1e6cfd63f9c9ea40fa322377166c718f14b5f3a",
        "md5": "b3df76a3a0c89af41e0f4b8a876aee28",
        "sha256": "89fca7fc3a5be02fb0c9302f3cf11558bd0adccb3f398df389d6ab8af6db30c3"
      },
      "downloads": -1,
      "filename": "django_datatables_view-1.19.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3df76a3a0c89af41e0f4b8a876aee28",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9920,
      "upload_time": "2019-11-20T21:38:01",
      "upload_time_iso_8601": "2019-11-20T21:38:01.328676Z",
      "url": "https://files.pythonhosted.org/packages/82/2d/9fe9c4f3a621b5073344b1e6cfd63f9c9ea40fa322377166c718f14b5f3a/django_datatables_view-1.19.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ef5197aa5b7c9e3af7b8b774f3da5df26dc94de8de13d926e125a7716451e83",
        "md5": "6ba0bcea91eecfc07f3fcc33ee0b66f6",
        "sha256": "22f9920008bb11eb2a2ac7886ff2151f749a86a08c9cbf999571f32255da3621"
      },
      "downloads": -1,
      "filename": "django-datatables-view-1.19.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6ba0bcea91eecfc07f3fcc33ee0b66f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12701,
      "upload_time": "2019-11-20T21:38:03",
      "upload_time_iso_8601": "2019-11-20T21:38:03.208122Z",
      "url": "https://files.pythonhosted.org/packages/2e/f5/197aa5b7c9e3af7b8b774f3da5df26dc94de8de13d926e125a7716451e83/django-datatables-view-1.19.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}