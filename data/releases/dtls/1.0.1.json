{
  "info": {
    "author": "Ray Brown",
    "author_email": "code@liquibits.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "============================================\nDatagram Transport Layer Security for Python\n============================================\n\nPyDTLS brings Datagram Transport Layer Security (DTLS - RFC 6347:\nhttp://tools.ietf.org/html/rfc6347) to the Python environment. In a\nnutshell, DTLS brings security (encryption, server authentication,\nuser authentication, and message authentication) to UDP datagram\npayloads in a manner equivalent to what SSL/TLS does for TCP stream\ncontent.\n\nDTLS is now very easy to use in Python. If you're familiar with the\nssl module in Python's standard library, you already know how. All it\ntakes is passing a datagram/UDP socket to the *wrap_socket* function\ninstead of a stream/TCP socket. Here's how one sets up the client side\nof a connection::\n\n    import ssl\n    from socket import socket, AF_INET, SOCK_DGRAM\n    from dtls import do_patch\n    do_patch()\n    sock = ssl.wrap_socket(socket(AF_INET, SOCK_DGRAM))\n    sock.connect(('foo.bar.com', 1234))\n    sock.send('Hi there')\n\nDesign Goals\n============\n\nThe primary design goal of PyDTLS is broad availability. It has therefore\nbeen built to be widely compatible with the following:\n\n    * Operating systems: apart from the Python standard library, PyDTLS\n      relies on the OpenSSL library only. OpenSSL is widely ported, and\n      in fact the Python standard library's *ssl* module also uses it.\n    * Python runtime environments: PyDTLS is a package consisting of\n      pure Python modules only. It should therefore be portable to many\n      interpreters and runtime environments. It interfaces with OpenSSL\n      strictly through the standard library's *ctypes* foreign function\n      library.\n    * The Python standard library: the standard library's *ssl* module is\n      Python's de facto interface to SSL/TLS. PyDTLS aims to be compatible\n      with the full public interface presented by this module. The ssl\n      module ought to behave identically with respect to all of its\n      functions and options when used in conjunction with PyDTLS and\n      datagram sockets as when used without PyDTLS and stream sockets.\n    * Connection-based protocols: as outlined below, layering security\n      on top of datagram sockets requires introducing certain\n      connection constructs normally absent from datagram\n      sockets. These constructs have been added in such a way as to be\n      compatible with code that expects to interoperate with\n      connection-oriented stream sockets. For example, code that\n      expects to go through server-side bind/listen/accept connection\n      establishment should be reusable with PyDTLS sockets.\n\nDistributions\n=============\n\nPyDTLS requires version 1.0.0 or higher of the OpenSSL\nlibrary. Earlier versions are reported not to offer stable DTLS\nsupport. Since packaged distributions of this version of OpenSSL are\navailable for many popular operating systems, OpenSSL-1.0.0 is an\ninstallation requirement before PyDTLS functionality can be called.\nOn Ubuntu 12.04 LTS, for example, the Python interpreter links with\nlibcrypto.so.1.0.0 and libssl.so.1.0.0, and so use of PyDTLS requires\nno further installation steps.\n\nIn comparison, installation of OpenSSL on Microsoft Windows operating\nsystems is inconvenient. For this reason, source distributions of\nPyDTLS are available that include OpenSSL dll's for 32-bit and 64-bit\nWindows. For 32-bit Windows, a version built with the MinGW toolchain\nis also available. Its archive includes stripped as well as\nnon-stripped dll's. The latter can be debugged with gdb on\nWindows. All dll's have been linked with the Visual Studio 2008\nversion of the Microsoft C runtime library, msvcr90.dll, the version\nused by CPython 2.7. Installation of Microsoft redistributable runtime\npackages should therefore not be required on machines with CPython\n2.7. The version of OpenSSL distributed with PyDTLS 0.1.0 is 1.0.1c.\n\nThe OpenSSL version used by PyDTLS can be determined from the values\nof *sslconnection's* DTLS_OPENSSL_VERSION_NUMBER,\nDTLS_OPENSSL_VERSION, and DTLS_OPENSSL_VERSION_INFO. These variables\nare available through the *ssl* module also if *do_patch* has been\ncalled (see below). Note that the OpenSSL version used by PyDTLS may\ndiffer from the one used by the *ssl* module.\n\nInterfaces\n==========\n\nPyDTLS' top-level package, *dtls*, provides DTLS support through the\n**SSLConnection** class of its *sslconnection*\nmodule. **SSLConnection** is in-line documented, and\ndtls/test/echo_seq.py demonstrates how to take a simple echo server\nthrough a listen/accept/echo/shutdown sequence using this class. The\ncorresponding client side can look like the snippet at the top of this\ndocument, followed by a call to the *unwrap* method for shutdown (or a\ncall to the **SSLConnection** *shutdown* method, if an instance of\nthis class is used for the client side also). Note that the *dtls*\npackage does not depend on the standard library's *ssl* module, and\n**SSLConnection** can therefore be used in environments where *ssl* is\nunavailable or incompatible.\n\nIt is expected that with the *ssl* module being an established, familiar\ninterface to TLS, it will be the preferred module through which to\naccess DTLS. To do so, one must call the *dtls* package's *do_patch*\nfunction before passing sockets of type SOCK_DGRAM to either *ssl's*\n*wrap_socket* function, or *ssl's* **SSLSocket** constructor.\n\nIt should be noted that once *do_patch* is called, *dtls* will raise\nexceptions of type **ssl.SSLError** instead of its default\n**dtls.err.SSLError**. This allows users' error handling code paths to\nremain identical when interfacing with *ssl* across stream and\ndatagram sockets.\n\nConnection Handling\n===================\n\nThe DTLS protocol implies a connection as an association between two\nnetwork peers where the overall association state is characterized by the\nhandshake status of each peer endpoint (see RFC 6347). The OpenSSL library\nrecords this handshake status in \"SSL\" type instances (a.k.a. struct\nssl_st). Datagrams can be securely sent and received by referring to a\nunique \"SSL\" instance after handshaking has been completed with this\ninstance and its network peer. A connection is implied in that traffic\nmay be directed to or received from only that network peer with whose\n\"SSL\" instance the handshake has been completed. The fact that the\nunderlying network protocol, UDP in most cases, is itself connectionless\nis immaterial.\n\nFurther, in order to prevent denial-of-service attacks on UDP DTLS\nservers, clients must undergo a cookie exchange phase early in the\nhandshaking protocol, and before server-side resources are committed to\na particular client (see section 4.2.1 of RFC 6347). The cookie exchange\nproves to the server that a client can indeed receive IP traffic at\nthe source IP address with which its handshake-initiating ClientHello\ndatagram is marked.\n\nPyDTLS implements this connection establishment through the *connect*\nmethod on the client side, and the *accept* method on the server side.\nThe latter returns a new **dtls.SSLConnection** or **ssl.SSLSocket**\nobject (depending on which interface is used, see above), which is\n\"connected\" to its peer. In addition to the *read* and *write* methods\n(at both interface levels), **SSLSocket's** *send* and *recv* methods\ncan be used; use of *sendto* and *recvfrom* on connected sockets is\nprohibited by *ssl*. *accept* returns peer address information, as\nexpected. Note that when using the *ssl* interface to *dtls*, *listen*\nmust be called before calling *accept*.\n\nDemultiplexing\n==============\n\nAt the network io layer, only datagrams from its connected peer must be\npassed to a **SSLConnection** or **SSLSocket** object (unless the object\nis unconnected on the server-side, in which case in can be in listening\nmode, the initial server-side socket whose role it is to listen for\nincoming client connection requests).\n\nThe initial server-side listening socket is not useful for performing this\ndatagram routing function. This is because it must remain unconnected and\nready to receive additional connection requests from new, unknown clients.\n\nThe function of passing incoming datagrams to the proper connection is\nperformed by the *dtls.demux* package. **SSLConnection** requests a new\nconnection from the demux when a handshake has cleared the cookie\nexchange phase. An efficient implementation of this request is provided\nby the *osnet* module of the demux package: it creates a new socket that\nis bound to the same network interface and port as the listening socket,\nbut connected to the peer. UDP stacks such as the one included with Linux\nroute incoming datagrams to such a connected socket in preference to an\nunconnected socket bound to the same port.\n\nUnfortunately such is not the behavior on Microsoft Windows. Windows\nUDP routes datagrams to whichever currently existing socket bound to\nthe particular port the earliest (and whether or not that socket is\nunconnected, or connected to the datagram's peer, or a different\npeer). Other sockets bound to the same port will not receive traffic,\nif and until they become the earliest bound socket because another\nsocket is closed.\n\nThe demux package therefore provides and automatically selects the module\n*router* on Windows platforms. This module also creates a new socket when\nreceiving a new connection request; but instead of binding this socket\nto the same port as the listening socket, it binds to a new ephemeral\nport. *router* then forwards datagrams originating from the peer for which\na connection was requested to the corresponding socket.\n\nFor efficiency's sake, no forwarding is performed on outgoing traffic.\nInstead, **SSLConnection** directs outgoing traffic from the original\nlistening socket, using *sendto*. At the OpenSSL level this requires\nseparate read and write datagram BIO's for an \"SSL\" instance, one in\n\"connected\" state and one in \"peer set\" state, respectively, and\nassociated with two separate network sockets.\n\nFrom the perspective of a PyDTLS user, this selection of and\ndifference between demux implementations should be transparent, with\nthe possible exception of performance deviation. This transparency\ndoes however have some limits: for example, when *router* is in use,\nthe *accept* methods can return *None*. This happens when\n**SSLConnection** detects that the demux has forwarded a datagram to a\nknown connection instead of initiating a connection to a new peer\nthrough *accept*.  Returning *None* in this case is important whenever\nnon-blocking sockets or sockets with timeouts are used, since another\nsocket might now be readable as a result of the forwarded\ndatagram. *accept* must return so that the application can iterate on\nits asynchronous *select* loop.\n\nShutdown and Unwrapping\n=======================\n\nPyDTLS implements the SSL/TLS shutdown protocol as it has been adapted\nfor DTLS. **SSLConnection's** *shutdown* and **SSLSocket's** *unwrap*\ninvoke this protocol. As is the case with DTLS handshaking in general,\napplications must be prepared to use the *get_timeout* and\n*handle_timeout* methods in addition to re-invoking *shutdown* or\n*unwrap* when sockets become readable and an exception carried\nSSL_ERROR_WANT_READ. (See more on asynchronous IO in the Testing section.)\n\n**SSLConnection's** *shutdown* and **SSLSocket's** *unwrap* return a\n(possibly new) socket that can be used for unsecured communication\nwith the peer, as set forth by the *ssl* module. The demux\ninfrastructure remains in use for this communication until the\nreturned socket is cleaned up.  Note that when the *router* demux is\nin use, the object returned will be one derived from\n*socket.socket*. This is because the send and recv paths must still be\ndirected to two different OS sockets. In addition, the right thing\nhappens if secured communication is resumed over such a socket by\npassing it to *ssl.wrap_socket* or the **SSLConnection**\nconstructor. If *osnet* is used, an actual *socket.socket* instance is\nreturned.\n\nFramework Compatibility\n=======================\n\nPyDTLS sockets have been tested under the following usage modes:\n\n    * Using blocking sockets and sockets with timeouts in\n      multi-threaded UDP servers\n    * Using non-blocking sockets, and in conjunction with the\n      asynchronous socket handler, asyncore\n    * Using blocking sockets, and in conjunction with the network\n      server framework SocketServer - ThreadingTCPServer (this works\n      because of PyDTLS's emulation of connection-related calls)\n\nMulti-thread Support\n====================\n\nUsing multiple threads with OpenSSL requires implementing a locking\ncallback. PyDTLS does implement this, and therefore multi-threaded\nprogramming with PyDTLS is safe in any environment. However, being a\npure Python library, these callbacks do carry some overhead. The *ssl*\nmodule implements an equivalent locking callback in its C extension\nmodule. Not requiring interpreter re-entry, this approach can be\nexpected to perform better. PyDTLS therefore queries OpenSSL as to\nwhether a locking callback is already in place, and does not overwrite\nit if there is. Loading *ssl* can therefore improve performance, even\nwhen only the *sslconnection* interface is used.\n\nNote that loading order does not matter: to obtain the performance\nbenefit, *ssl* can be loaded before or after the dtls package. This is\nbecause *ssl* does not do an equivalent existing locking callback\ncheck, and will simply overwrite the PyDTLS callback if it has already\nbeen installed. But *ssl* should not be loaded while *dtls* operation\nis already in progress, when some locks may be in their acquired\nstate.\n\nAlso note that this performance enhancement is available only on\nplatforms where PyDTLS loads the same OpenSSL shared object as\n*ssl*. On Ubuntu 12.04, for example, this is the case, but on\nMicrosoft Windows it is not.\n\nTesting\n=======\n\nAlmost all of the Python standard library's *ssl* unit tests from the\nmodule *test_ssl.py* have been ported to *dtls.test.unit.py*. All tests\nhave been adjusted to operate with datagram sockets. On Linux, each\ntest is executed four times, varying the address family among IPv4 and\nIPv6 and the demux among *osnet* and *router*. On Windows, where\n*osnet* is unavailable, each test is run twice, once with IPv4 and once\nwith IPv6.\n\nThe unit test suite includes tests for each of the above-mentioned\ncompatible frameworks. The class **AsyncoreEchoServer** serves as an\nexample of how to use non-blocking datagram sockets and implement the\nresulting timeout detection requirements. DTLS in general and OpenSSL\nin particular require being called back when used with non-blocking\nsockets (or sockets with timeout option) after DTLS timeouts expire to\nhandle packet loss using re-transmission during a\nhandshake. Handshaking may occur during any read or write operation,\neven after an initial handshake completes successfully, in case\nrenegotiation is requested by a peer.\n\nRunning with the -v switch executes all unit tests in verbose mode.\n\ndtls/test/test_perf.py implements an interactive performance test\nsuite that compares the raw throughput of TCP, UDP, SSL, and DTLS.\nIt can be executed locally through the loopback interface, or between\nremote clients and servers. In the latter case, test jobs are sent to\nremote connected clients whenever a suite run is initiated through the\ninteractive interface. Run test_perf.py -h for more information.\n\nIt should be noted that comparing the performance of protocols that\ndon't offer congestion control (UDP and DTLS) with those that do (TCP\nand SSL) is a difficult undertaking. Raw throughput even across\ngigabit network links can be expected to suffer without congestion\ncontrol and peers that generate data as fast as possible without\nthrottling (as this test does): the link's throughput will drop\nsignificantly as it enters congestion collapse. Similarly, loopback is\nan imperfect test interface since it rarely drops packets, and never\nduplicates or reorders them (thus negating the relative performance\nbenefits of DTLS over SSL). Nevertheless, some useful insights can be\ngained by observing the operation of test_perf.py, including software\nstack behavior in the presence of some amount of packet loss.\n\nLogging\n=======\n\nThe *dtls* package and its sub-packages log various occurrences,\nprimarily events that can aid debugging. Especially *router* emits many\nmessages when the logging level is set to at least *logging.DEBUG*.\ndtls/test/echo_seq.py activates this logging level during its operation.\n\nCurrently Supported Platforms\n=============================\n\nAt the time of initial release, PyDTLS 0.1.0 has been tested on Ubuntu\n12.04.1 LTS 32-bit and 64-bit, as well as Microsoft Windows 7 32-bit\nand 64-bit, using CPython 2.7.3. Patches with additional platform\nports are welcome.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rbit/pydtls",
    "keywords": null,
    "license": "LICENSE",
    "maintainer": null,
    "maintainer_email": null,
    "name": "Dtls",
    "package_url": "https://pypi.org/project/Dtls/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/Dtls/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/rbit/pydtls"
    },
    "release_url": "https://pypi.org/project/Dtls/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python Datagram Transport Layer Security",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2835569,
  "urls": [
    {
      "comment_text": "Includes MinGW OpenSSL dll's for 32-bit Windows",
      "digests": {
        "blake2b_256": "56e0a5bb68e8a04f5246147b8c906ee25041f3d3e70f86d8a3937f307a604cee",
        "md5": "7f6f04d8330f93e38d8f26acb9ee3b07",
        "sha256": "e1defc1232cf5672adb7d2ebe5e1f5db4b7b466d2349d45a889fc04c324f05a3"
      },
      "downloads": -1,
      "filename": "Dtls-1.0.1.sdist_with_openssl.mingw-win32.tar.gz",
      "has_sig": false,
      "md5_digest": "7f6f04d8330f93e38d8f26acb9ee3b07",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3288669,
      "upload_time": "2014-01-19T05:12:07",
      "upload_time_iso_8601": "2014-01-19T05:12:07.767331Z",
      "url": "https://files.pythonhosted.org/packages/56/e0/a5bb68e8a04f5246147b8c906ee25041f3d3e70f86d8a3937f307a604cee/Dtls-1.0.1.sdist_with_openssl.mingw-win32.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "Includes OpenSSL dll's for 32-bit Windows",
      "digests": {
        "blake2b_256": "89b61a51aa06526212050e72e437c57af107125b21bb1153767f3ac481b950a0",
        "md5": "ac4fe7c17cf5d2c0ba0657bae271d383",
        "sha256": "c9383ece65bf715b5f90e2673e407308048a01dcf3260803edf057fc7180a048"
      },
      "downloads": -1,
      "filename": "Dtls-1.0.1.sdist_with_openssl.win32.zip",
      "has_sig": false,
      "md5_digest": "ac4fe7c17cf5d2c0ba0657bae271d383",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 769371,
      "upload_time": "2014-01-19T05:14:14",
      "upload_time_iso_8601": "2014-01-19T05:14:14.354055Z",
      "url": "https://files.pythonhosted.org/packages/89/b6/1a51aa06526212050e72e437c57af107125b21bb1153767f3ac481b950a0/Dtls-1.0.1.sdist_with_openssl.win32.zip",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "Includes OpenSSL dll's for 64-bit Windows",
      "digests": {
        "blake2b_256": "214314a54deb4339eeb4f85a93df5f288a06978c1dea231b96c092ab31862fa9",
        "md5": "e73406bec8129ff3434c1748b62455f5",
        "sha256": "c074e8f5355036178f113d9cfa09891d90ddb65076c651b7e96805c842afa229"
      },
      "downloads": -1,
      "filename": "Dtls-1.0.1.sdist_with_openssl.win-amd64.zip",
      "has_sig": false,
      "md5_digest": "e73406bec8129ff3434c1748b62455f5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 909051,
      "upload_time": "2014-01-19T05:12:58",
      "upload_time_iso_8601": "2014-01-19T05:12:58.003781Z",
      "url": "https://files.pythonhosted.org/packages/21/43/14a54deb4339eeb4f85a93df5f288a06978c1dea231b96c092ab31862fa9/Dtls-1.0.1.sdist_with_openssl.win-amd64.zip",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2b044317b34dd4b0261acd2d49f62d981183697065c36335daf07b01ff4c99b",
        "md5": "90836167421e9ff761afbebceb4fb539",
        "sha256": "7d22ab871716fecfce6f09e2777a79b9c7ac4dbafc95a2d65b25b210cd99163b"
      },
      "downloads": -1,
      "filename": "Dtls-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "90836167421e9ff761afbebceb4fb539",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 61634,
      "upload_time": "2014-01-19T05:05:22",
      "upload_time_iso_8601": "2014-01-19T05:05:22.161712Z",
      "url": "https://files.pythonhosted.org/packages/f2/b0/44317b34dd4b0261acd2d49f62d981183697065c36335daf07b01ff4c99b/Dtls-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce2a07947407a17d8a2076bed78811c854550944b054ba9a53da140b5bb279de",
        "md5": "c5d19c5b6fad95d610c73a8388468341",
        "sha256": "f3f3bc5150f0222fffead2eefcfd38f6f661f74befb846e8a38d793086c137fc"
      },
      "downloads": -1,
      "filename": "Dtls-1.0.1.zip",
      "has_sig": false,
      "md5_digest": "c5d19c5b6fad95d610c73a8388468341",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 76380,
      "upload_time": "2014-01-19T05:05:19",
      "upload_time_iso_8601": "2014-01-19T05:05:19.516761Z",
      "url": "https://files.pythonhosted.org/packages/ce/2a/07947407a17d8a2076bed78811c854550944b054ba9a53da140b5bb279de/Dtls-1.0.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}