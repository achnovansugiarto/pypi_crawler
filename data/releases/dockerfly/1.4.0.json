{
  "info": {
    "author": "memoryboxes",
    "author_email": "memoryboxes@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "dockerfly，让你的容器更真实\n=====================================\ndockerfly是为了让你的container运行起来\"更像\"一台真正的虚拟机，对网络部分做点包装的小工具。\ndockerfly不是大而全的容器管理工具，如果你要管理10台以上的物理机，或者运维30个以上的服务，那么dockerfly不适合你。\n如果你每天为了开发测试环境的统一而心烦，如果你想在自己的笔记本上为自己的不同项目镜像分门别类，那么dockerfly就是为你准备的。\n\ndockerfly为你搭建穷人版的vSphere (^_^)。\n\n缘起\n========================\n\ndocker推荐一个container内只运行一个进程，网络部分同docker主机共享。使用supervisor管理多进程。\n在很多真实场景下，这种方法局限性很大。\n\n例如，我有一个项目A，里面已经采用了supervisor管理多个进程，另外带有web，我希望能有docker快速建立一个Container，用于平时的测试和开发。\n这样你的选择只能是:\n\n* 建立的container采用端口映射的办法，把80端口映射到docker主机\n\n* 把进程放到supervisor里面，每次run container的时候启动\n\n* 操作需要用 `docker exec -i -t <container_id> bash` 上去\n\n这样的局限很明显的:\n\n* 这台container没有自己的对外IP，很多TestCase跑起来会很复杂\n\n* 我无法同时启动多个占用80端口的container\n\n* 无法在另外一台机器获得shell\n\n* 我自己进程管理的supervisor和docker用的supervisor会混在一起，不干净\n\n解决办法\n--------\n\n在container中开启sshd，把它想象成一台真正的虚拟机。\n\n[baseimage-docker](http://phusion.github.io/baseimage-docker/)也做了一些类似的工作，但是dockerfly将基本镜像，container创建等操作结合起来，更为方便。\n\n\n警告\n--------\n\n已经有很多人警告过这种方法是不可取的，因为docker诞生之初并不是为了构建一个Vmware类的虚拟机来设计的。\n这样做会有安全性上的问题，dockerfly在实现的时候没有过多考虑安全问题，它只是假设你在一台完全由你控制的机器上，方便的搭建开发测试环境。\n\n安装:\n========================\n\n* 推荐linux内核3.18以上，推荐开启docker overlay文件系统。`docker>=1.6`\n\n*  pull一个实验镜像下来\n\n    ```\n    docker pull memorybox/centos6_sshd\n    ```\n\n*  安装dockerfly\n\n    ```\n    git clone https://github.com/memoryboxes/dockerfly.git && pip install -r dockerfly/requirements.txt\n    cd dockerfly && ./run.sh\n    ```\n\n* 将需要Attach的物理网卡(如eth1)设置为混杂模式\n\n    ```\n    ifconfig eth1 promisc\n    ```\n\n* 访问`http://host:80` ，会有一个很简单的web页面，供你创建/删除、启动/停止你的container。\n  创建一台container后，你可以直接ssh登陆，在上面像VMware虚拟机一样操作。\n  tcpdump一下，你可以看到网络数据包和真正的网卡流量是一致的。\n\n怎样工作:\n========================\n\ndockerfly采用了在容器内创建Macvlan网卡的办法来增强docker的网络功能。\n\n* 我有一台物理机或是Vmware虚拟机-PhysicalHostA，有两块网卡:eth0和eth1，同在192.168.1网段，是互通的\n\n        +---------+\n        | Physical|\n        \\ HostA   /\n        |\\       /|\n        | ------  |\n        | eth0 ------ 192.168.1.10/24, gateway:192.168.1.1\n        | eth1 ------ 192.168.1.11/24, gateway:192.168.1.1\n        +---------+\n\n* 首先启动一台docker container\n\n    ```\n    docker run -i -t xxx /bin/bash\n    ```\n\n* 在物理机中创建一个Macvlan网卡Attach到eth1上\n\n    ```\n    ip link add MacVlanEthA link eth1 type macvlan mode bridge\n    ```\n\n* 得到docker container的pid，用ip link命令把虚拟网卡映射到docker的network namespace中\n\n    ```\n    ip link set netns $(docker container pid) MacVlanEthA\n    ```\n\n>> docker的pid可以用dockerfly提供的脚本获取\n\n>> ```\n>> python dockerfly/bin/dockerflyctl.py getpid <container_id>\n>> ```\n\n* 为MacVlanEthA设置IP，路由\n\n    ```\n    docker exec $(docker container id) ip route del default\n    docker exec $(docker container id) ip addr add 192.168.1.100 dev MacVlanEthA\n    docker exec $(docker container id) ip route add default via 192.168.159.1 dev MacVlanEthA\n    ```\n\n* 在docker container xxx内执行:\n\n    ```\n    ifconfig\n    ```\n\n   可以看到MacVlanEthA的ip被设置为192.168.1.100\n\n* 设置物理机eth1为混杂模式\n\n    ```\n    ifconfig eth1 promisc\n    ```\n\n* 在物理机执行:\n\n    ```\n    [PhysicalHostA@localhost]~# ping 192.168.1.100\n    PING 192.168.159.1 (192.168.1.100) 56(84) bytes of data.\n    64 bytes from 192.168.1.100: icmp_seq=1 ttl=128 time=0.663 ms\n    64 bytes from 192.168.1.100: icmp_seq=2 ttl=128 time=0.180 ms\n    ...\n    ```\n\n\n* 用类似的方法添加新的容器及网卡，此时的网络组成如下图:\n\n\n                                                               +-----------------------------------------------+---------------+\n        +---------+                  *******                   |                    Physical host Docker                       |\n        | Physical|                **       **                 |   +---------+           +---------+           +---------+     |\n        \\ hostA   /              **  Local    **               |   | Docker  |           | Docker  |           | Docker  |     |\n        |\\       /|  --------->  *   NetWork   *  <----------- |   \\ hostA   /           \\ hostB   /           \\ hostC   /     |\n        | ------  |              **           **               |   |\\       /|           |\\       /|           |\\       /|     |\n        |eth0,eth1|                **       **                 |   | ------  |           | ------  |           | ------  |     |\n        +---------+                  *******                   |   | MacVlan |           | MacVLan |           |...EthC1 |     |\n                                                               |   | EthA    |           | EthB    |           |   EthC2 |     |\n                                                               |   +---------+           +---------+           +---------+     |\n                                                               |  192.168.1.100         192.168.1.101          192.168.1.102   |\n                                                               |                                               192.168.1.103   |\n                                                               +-----------------------------------------------+---------------+\n\n* 如果你的container内开启sshd服务的话，此时可以直接把这些container当作VMWare的虚拟机来用了。\n\n>> 如何在镜像内开启sshd，可以参考:\n\n>> https://github.com/tutumcloud/tutum-centos\n\n>> https://github.com/tutumcloud/tutum-ubuntu\n\n* 如果你只是想简单试用一下的话，我做了一个基础镜像，默认用户名/密码是:root/rootroot，放在\n\n    https://registry.hub.docker.com/u/memorybox/centos6_sshd/\n\n  可以执行下面命令获取:\n\n  ```\n  docker pull memorybox/centos6_sshd\n  ```\n\n**dockerfly就是将上面这些操作做了一个简单封装，供你轻松地1秒钟启动一台类似Vmware虚拟机。**\n\nCaveats\n========================\n\n再次警示一下，这样做并不是docker的推荐做法。问题如下:\n\n* 多个虚拟网卡绑定到一个混杂模式的物理网卡上，会有网络性能问题\n\n* 在container中开启sshd服务，无法保证安全性\n\n* 用户以root身份在container中操作，容易导致所有container挂掉\n\n* 最后，这些功能其实用Vagrant等工具也可以实现的，只不过是学习成本的大小而已\n\n如果你不Care这些问题，你会感觉使用dockerfly创建的container，感觉和Vmware虚拟机是一样的，而且你获得了近似于物理机的性能，以及秒级别的创建/删除container的能力。\n\n**Different people use Docker for different purposes, so Don't be afraid, but be careful.**\n\nBest Practice:\n========================\n\ndockerfly比较适合下面几个场景:\n\n每日构建\n---------\n\n传统的每日构建一般只会build出二进制包，利用docker，可以每天构建一个带有执行环境的container，这样开发和测试都可以从dockerfly中轻松启用一台即时构建的container，提升开发测试效率。\n\n回归测试\n--------\n\n* 一般回归测试为了保证执行环境的统一，都要在setUp和tearDown中写许多环境相关的代码。\n\n* dockerfly提供了简单的Restful API接口，可以创建/删除/启动/停止/执行命令/拷贝文件等，这样终于可以走进`创建一台机器->跑一个测试`的时代了，而且启动/删除container的动作在秒钟级别，效率很高。环境无疑是最干净的。\n\n临时项目开发\n--------------\n\n像多个python项目环境的隔离，一直用virtualenv之类的工具，用container来隔离会更干净，同时可以将一台机器划分成多个项目的containers，每台container分配一个IP，服务各行其道，互不干扰。\n\n\nReference\n========================\n\n* Linux 上的基础网络设备详解\n\nhttp://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html\n\n* Linux 上虚拟网络与真实网络的映射\n\nhttp://www.ibm.com/developerworks/cn/linux/1312_xiawc_linuxvirtnet/index.html\n\n* 网络虚拟化技术: TUN/TAP MACVLAN MACVTAP\n\nhttps://blog.kghost.info/2013/03/27/linux-network-tun/\n\n* Coupling Docker and Open vSwitch\n\nhttp://fbevmware.blogspot.com/2013/12/coupling-docker-and-open-vswitch.html\n\n* four ways to connect a docker\n\nhttp://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/\n\n* Docker containers should not run an SSH server\n\nhttps://news.ycombinator.com/item?id=7950326\n\n* Proposal: Native Docker Multi-Host Networking\n\nhttps://github.com/docker/docker/issues/8951\n\nLicense (Simplified BSD)\n========================\nhttp://choosealicense.com/licenses/bsd-2-clause/\n\nLATEST VERSION\n========================\n1.4.0\n\n\n\nrelease 1.4.0 2016/07/13\n-------------------------------\n* bug fix: for lock and concurrence\n\nrelease 1.3.0 2016/07/01\n-------------------------------\n* now you can add same eths between different machines\n\n* change daemon server to tornado\n\n\nrelease 1.2.0 2015/06/23\n-------------------------------\nyou can add unlimited virtual eths(0.0.0.0/24) to a container\n\nrelease 1.1.0 2015/04/19\n-------------------------------\nperfect dockerflyui\n\nrelease 1.0.0 2014/12/22\n-------------------------------\nadd dockerfly/bin/dockerflyd\nadd dockerflyui\nadd resize container support in dockerfly/bin/dockerflyctl\n\nrelease 1.0.0-dev 2014/12/18\n-------------------------------\nadd dockerfly ui wrapper\n\nrelease 0.5.0 2014/12/09\n-------------------------------\nsupport auto arp broadcast for gateway\n\nrelease 0.4.0 2014/12/08\n-------------------------------\nbug fix:\ndockerflyctl getpid <container_id>\n\nrelease 0.3.0 2014/12/08\n-------------------------------\nbug fix:\ndockerflyctl command exp\n\nrelease 0.2.0 2014/12/08\n-------------------------------\n\nInitial release.0.1.0 or \"Alpha 1\" (Unreleased) 2014/12/07\n-------------------------------\n\nInitial release.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/memoryboxes/dockerfly",
    "keywords": null,
    "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dockerfly",
    "package_url": "https://pypi.org/project/dockerfly/",
    "platform": "any",
    "project_url": "https://pypi.org/project/dockerfly/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/memoryboxes/dockerfly"
    },
    "release_url": "https://pypi.org/project/dockerfly/1.4.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "a docker tool for create containers easily",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2217966,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef62cae24b1dc2f499dbb584b80eaf528397abd247984e962aacdb7dfa9894e6",
        "md5": "9b6440754534312e68400eb85a9838f3",
        "sha256": "d9e4b21acb6002ffb174fe5edea261519f518c83eb25efeeda49e92d51a280f0"
      },
      "downloads": -1,
      "filename": "dockerfly-1.4.0-py2.7.egg",
      "has_sig": false,
      "md5_digest": "9b6440754534312e68400eb85a9838f3",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 49543,
      "upload_time": "2016-07-13T01:04:24",
      "upload_time_iso_8601": "2016-07-13T01:04:24.387992Z",
      "url": "https://files.pythonhosted.org/packages/ef/62/cae24b1dc2f499dbb584b80eaf528397abd247984e962aacdb7dfa9894e6/dockerfly-1.4.0-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d795230fa43ca92a8957caeb068cd777884ed6872a27621cc4346ac9de40ebf",
        "md5": "ab0e43d4b3f48e3879dd04946ecaad7c",
        "sha256": "d3d1c96f9e617dd6543e3e067f3deef568126b97975c743133562c099a28c775"
      },
      "downloads": -1,
      "filename": "dockerfly-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ab0e43d4b3f48e3879dd04946ecaad7c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20441,
      "upload_time": "2016-07-13T01:04:17",
      "upload_time_iso_8601": "2016-07-13T01:04:17.480586Z",
      "url": "https://files.pythonhosted.org/packages/5d/79/5230fa43ca92a8957caeb068cd777884ed6872a27621cc4346ac9de40ebf/dockerfly-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}