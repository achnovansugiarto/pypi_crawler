{
  "info": {
    "author": "Noortheen Raja",
    "author_email": "jnoortheen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# dynamic-config\nProject configuration variables are declared beforehand and inferred from environment variables or configuration files. Useful while developing and deploying( CI/CD) django web-apps\n\n-------\n\n[![PyPi Version](https://img.shields.io/pypi/v/dynamic-conf.svg?style=flat)](https://pypi.python.org/pypi/dynamic-conf)\n[![Python Version](https://img.shields.io/pypi/pyversions/returns.svg)](https://pypi.org/project/dynamic-conf/)\n\n-------\n\n\n# Install\n```\npip install dynamic-conf\n```\n\n# Features\n- supports `.env` or `.py` files\n- supports casting with type annotations\n- You also don't need to include a sample file. Since the `Config` object would be able to generate `.env.py` itself.\n- It also loads Configuration variables from environment variables.\nThe order of preference is `env variables` > `env.py`\n- Attributes are lazily evaluated.\n\n# Getting Started\n\n- You need to subclass the `Config` class.\n- The config file should define all the variables needed for a project.\n\n```python\n\n# project/conf.py\n\nfrom dynamic_conf import Config, REQUIRED\n\nclass CONFIG(Config):\n    \"\"\"singleton to be used for configuring from os.environ and env.py\"\"\"\n\n    # default settings\n\n    ENV = \"prod\" # optional field with a default value\n\n    DB_NAME = \"db\"\n    DB_HOST = \"127.0.0.1\"\n    DB_USER = \"postgres\"\n    DB_PASS = None # even None could be given as default value\n\n    SECRET_KEY:str # Python 3 only\n    AN_SECRET_KEY = REQUIRED # Python 2 & 3\n```\n\n- to create `project/env.py` just run with the path to CONFIG class's module\n```shell script\n# you could pass environment variables or set already with export\nenv DB_PASS='123' dynamic-conf project/conf.py\n\ndynamic-conf project/conf.py DB_USER='user-1' DB_PASS='123' # pass as list of key-value pair\n\n#to filter environment variables with a prefix\nenv VARS_PREFIX=\"PROD_\" dynamic-conf project/conf.py PROD_DB_USER=\"user-2\"\n```\n\n# Usage\n\n- To use the config simply import and use particular attribute\n```python\n# project/settings.py\nfrom conf import CONFIG\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"HOST\": CONFIG.DB_HOST,\n        \"NAME\": CONFIG.DB_NAME,\n        \"USER\": CONFIG.DB_USER,\n        \"PASSWORD\": CONFIG.DB_PASSWORD,\n        \"PORT\": \"5432\",\n    }\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jnoortheen/dynamic-conf",
    "keywords": "django,configuration,12 factor settings",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynamic-conf",
    "package_url": "https://pypi.org/project/dynamic-conf/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynamic-conf/",
    "project_urls": {
      "Homepage": "https://github.com/jnoortheen/dynamic-conf",
      "Repository": "https://github.com/jnoortheen/dynamic-conf"
    },
    "release_url": "https://pypi.org/project/dynamic-conf/1.0.1/",
    "requires_dist": [
      "arger (>=1.0.10,<2.0.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Easy to manage Config variables separate from App code. Useful while developing and deploying( CI/CD) django web-apps",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8814010,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7db249707ff4a2d6ec0241886da0d208dc83e89440db1966a0b71fb20bc43aa0",
        "md5": "464732fa969caa4f9bd22855e45fc463",
        "sha256": "07faf442c0b4552032df9e1bc809b84cae533f7dc6290866f17028f4d2fdb1af"
      },
      "downloads": -1,
      "filename": "dynamic_conf-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "464732fa969caa4f9bd22855e45fc463",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 7797,
      "upload_time": "2020-12-03T18:40:12",
      "upload_time_iso_8601": "2020-12-03T18:40:12.454950Z",
      "url": "https://files.pythonhosted.org/packages/7d/b2/49707ff4a2d6ec0241886da0d208dc83e89440db1966a0b71fb20bc43aa0/dynamic_conf-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecb60eeccf2dddbef839cd0f7bad54b873d4189bd9185fa1b69ce876d9c0c8f4",
        "md5": "035142252d94cbbbab780026e43b6d51",
        "sha256": "a476970f94486b05fb81a39ea0e7f707747ee5a0b0ac60468d434d21b3e96d83"
      },
      "downloads": -1,
      "filename": "dynamic-conf-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "035142252d94cbbbab780026e43b6d51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 6828,
      "upload_time": "2020-12-03T18:40:10",
      "upload_time_iso_8601": "2020-12-03T18:40:10.764857Z",
      "url": "https://files.pythonhosted.org/packages/ec/b6/0eeccf2dddbef839cd0f7bad54b873d4189bd9185fa1b69ce876d9c0c8f4/dynamic-conf-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}