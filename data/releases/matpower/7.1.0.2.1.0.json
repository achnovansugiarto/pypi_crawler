{
  "info": {
    "author": "Muhammad Yasirroni",
    "author_email": "muhammadyasirroni@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# matpower-pip\n\nMake [MATPOWER](https://github.com/MATPOWER/matpower) installable from [`pypi`](https://pypi.org/project/matpower/). This package make `MATPOWER` copy (currently Version `7.1`) as `python package`. Use this package with [`mypower`](https://github.com/yasirroni/mypower) (the recommended way) or [`oct2py`](https://github.com/blink1073/oct2py) to run `MATPOWER` using octave client. `matlab.engine` is also supported. For the latest docs, read [README on GitHub](https://github.com/yasirroni/matpower-pip#readme).\n\nThis project also listed on [related links](https://matpower.org/related-links/) on matpower official website. Please visit that site to find other useful resources.\n\n## Installation\n\n### `matpower`\n\nFor downloading `MATPOWER` only (maybe you will run it using `matlab.engine` or any other method, or simply want an easy `MATPOWER` downloader):\n\n```plaintext\npip install matpower\n```\n\n### `oct2py` (Windows)\n\nFor callable `matpower` via `oct2py` (require octave on environment system `PATH`):\n\n1. Download [octave](https://www.gnu.org/software/octave/download.html).\n\n2. Install octave, write down the destination path.\n\n3. Open Environment Variable. You can access it by pressing <kbd>Windows-Key</kbd>, type `edit the system environment variables`, and press <kbd>&#9166;Enter</kbd> to search.\n\n4. Add new Environment Variable to execute `octave-cli`. The path is likely to be `C:\\Program Files\\octave-5.2.0-w64\\mingw64\\bin\\octave-cli.exe`.\n\n    Variable name: `OCTAVE_EXECUTABLE`\n\n    Variable value: `location:\\\\of\\\\octave\\\\bin\\\\octave-cli.exe`\n\n5. Restart computer to make `os.environ` recognize the new path.\n\n6. Install `matpower` that include `oct2py`.\n\n    ```plaintext\n    pip install matpower[octave]\n    ```\n\n## Extra (require `oct2py` or `matlab.engine`)\n\nIf `oct2py` or `matlab.engine` is installed, `matpower.start_instance` can be used to run `octave` or `MATLAB` with `MATPOWER` path added. Default engine is `octave`. You also can use `mypower` for added functionality as shown in [`mypower tutorial`](https://github.com/yasirroni/mypower/blob/master/tutorial.py).\n\n```python\nfrom matpower import start_instance\n\nm = start_instance()\nm.runpf() \n```\n\n```python\nfrom matpower import start_instance\n\nm = start_instance()\nmpc = m.eval('case9', verbose=False)\nmpc = m.runpf(mpc)\n```\n\n```python\nfrom matpower import path_matpower\n\nprint(path_matpower) # matpower installation location\n```\n\nSince `mpc = m.runopf()` will make `mpc` contain unsupported `<object opf_model>`, we can avoid it by request maximum number of outputs using `nout='max_nout'` in `octave`.\n\n```python\nfrom matpower import start_instance\n\nm = start_instance()\n\nmpc = m.loadcase('case9');\nmpopt = m.mpoption('verbose', 2);\n[baseMVA, bus, gen, gencost, branch, f, success, et] = m.runopf(mpc, mpopt, nout='max_nout')\n```\n\nAlternatively, it would be better to not parse back value that will not be use on python using `oct2py` `.eval` method. Use `;` to avoid octave print output on running the command.\n\n```python\n# import start_instance to start matpower instance\nfrom matpower import start_instance\n\n# start instance\nm = start_instance()\n\n# use octave native to run some commands\nm.eval(\"mpopt = mpoption('verbose', 2);\")\nm.eval(\"mpc = loadcase('case9');\")\nm.eval(\"r1 = runopf(mpc, mpopt);\") # we avoid parse `r1` that containts unsupported `<object opf_model>`\n\n# fech data to python (.eval is used because .pull is not working in acessing field)\nr1_mpc = {}\nr1_mpc['baseMVA'] = m.eval('r1.baseMVA;')\nr1_mpc['version'] = m.eval('r1.version;')\nr1_mpc['bus'] = m.eval('r1.bus;')\nr1_mpc['gen'] = m.eval('r1.gen;')\nr1_mpc['branch'] = m.eval('r1.branch;')\nr1_mpc['gencost'] = m.eval('r1.gencost;')\n\n# modify variable if necessary\n[GEN_BUS, PG, QG, QMAX, QMIN, VG, MBASE, GEN_STATUS, PMAX, PMIN, MU_PMAX, \n MU_PMIN, MU_QMAX, MU_QMIN, PC1, PC2, QC1MIN, QC1MAX, QC2MIN, QC2MAX, \n RAMP_AGC, RAMP_10, RAMP_30, RAMP_Q, APF] = m.idx_gen(nout='max_nout')\ngen_index = 2 # index of generator to be changed\ngen_index_ = int(gen_index - 1) # -1 due to python indexing start from 0\nPMAX_ = int(PMAX -1) # -1 due to python indexing start from 0\nr1_mpc['gen'][gen_index_,PMAX_] = 110 # in this example, we modify PMAX to be 110\n\n[PQ, PV, REF, NONE, BUS_I, BUS_TYPE, PD, QD, GS, BS, \n BUS_AREA, VM, VA, BASE_KV, ZONE, VMAX, VMIN, LAM_P, \n LAM_Q, MU_VMAX, MU_VMIN] = m.idx_bus(nout='max_nout')\nbus_index = 7 # index of bus to be changed\nbus_index_ = int(bus_index - 1) # -1 due to python indexing start from 0\nPD_ = int(PD-1) # -1 due to python indexing start from 0\nr1_mpc['bus'][bus_index_,int(PD-1)] = 80 # in this example, we modify PD to be 150\n\n# push back value to octave client\nm.push('mpc', r1_mpc) # push r1_mpc in python to mpc in octave\n\n# test if we can retrive pushed value\nmpc = m.pull('mpc')\n\n# test if our pushed variable can be used\nm.eval(\"r1 = runopf(mpc, mpopt);\")\n```\n\nAlso support using `matlab.engine`.\n\n```python\nfrom matpower import start_instance\n\nm = start_instance(engine='matlab') # specify using `matlab.engine` instead of `oct2py`\nmpc = m.runpf('case5', nargout=0)\n```\n\n## Known engine issue\n\n### Octave\n\n1. Push 1D column vector of cell array will change the shape to row vector. See: https://github.com/blink1073/oct2py/issues/221\n\nImpacted case:\n\n    ```python\n    mpc.bus_name\n    ```\n\nSolution:\n\n    ```python\n    mpc.bus_name = mpc.bus_name.reshape(-1,1)\n    ```\n\n2. `m.runopf()` will make `mpc` contain unsupported `<object opf_model>`. See: https://github.com/MATPOWER/matpower/issues/134#issuecomment-1007798733\n\nImpacted case:\n\n    ```python\n    r1 = m.runopf(mpc)\n    ```\n\nSolution:\n\n    ```python\n    m.push('mpc', mpc)\n    m.eval(\"r1 = runopf(mpc, mpopt);\")\n\n    r1_mpc = {}\n    r1_mpc['baseMVA'] = m.eval('r1.baseMVA;')\n    r1_mpc['version'] = m.eval('r1.version;')\n    r1_mpc['bus'] = m.eval('r1.bus;')\n    r1_mpc['gen'] = m.eval('r1.gen;')\n    r1_mpc['branch'] = m.eval('r1.branch;')\n    r1_mpc['gencost'] = m.eval('r1.gencost;')\n    ```\n\n## Versioning\n\nThis package maintain `MATPOWER` version with added version mark, i.e. `MATPOWER 7.1` become `7.1.0.x.x.x` where `.x.x.x` come from `matpower-pip` versioning. The `matpower-pip` versioning is not released on `pypi` since `matpower-pip` is restricted for development only (and development should use git instead).\n\n## TODO\n\n1. `conda` and `docker` installation that include octave-cli installation.\n\n## Authors\n\n* **Muhammad Yasirroni** - [yasirroni](https://github.com/yasirroni)\n\n## Cite\n\nWe do request that publications derived from the use of `matpower-pip` explicitly acknowledge that fact by including all related [MATPOWER publication](https://github.com/MATPOWER/matpower#citing-matpower) and the following citation:\n\n> M. Yasirroni, Sarjiya, \"matpower-pip: Make MATPOWER installable from pypi\", GitHub, 2021. [Online]. Available: https://github.com/yasirroni/matpower-pip.\n\nIf a journal publication from the author to appear soon should be cited instead.\n\n## Acknowledgement\n\nThis repository was supported by the [Faculty of Engineering, Universitas Gadjah Mada](https://ft.ugm.ac.id/en/) under the supervision of [Mr. Sarjiya](https://www.researchgate.net/profile/Sarjiya_Sarjiya). If you use this package, we are very glad if you cite any relevant publication under Mr. Sarjiya's name that can be found on the [semantic scholar](https://www.semanticscholar.org/author/Sarjiya/2267414) or [IEEE](https://ieeexplore.ieee.org/author/37548066400) for the meantime, since publication related to this repository is ongoing. This work is also partly motivated after I found out that `oct2py` supports running `octave` client from `python`, but the only implementation for running `MATPOWER` that I know, that is [oct2pypower](https://github.com/rwl/oct2pypower), requires `docker` and is not newbie-friendly. Nevertheless, I would like to say thank you to all people who contributed to `oct2py`, `oct2pypower`, and more importantly `MATPOWER`.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yasirroni/matpower-pip",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matpower",
    "package_url": "https://pypi.org/project/matpower/",
    "platform": null,
    "project_url": "https://pypi.org/project/matpower/",
    "project_urls": {
      "Homepage": "https://github.com/yasirroni/matpower-pip"
    },
    "release_url": "https://pypi.org/project/matpower/7.1.0.2.1.0/",
    "requires_dist": null,
    "requires_python": ">3.6",
    "summary": "Make MATPOWER installable from pypi.",
    "version": "7.1.0.2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17439653,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6477c86840c37c3ff0d7f31b334ffc9afd2e0c11b69bd975ec1983cbbd04de09",
        "md5": "dfdf5d73bda308f92979e7a4a84a8d67",
        "sha256": "b6dece97fdcc48c5e23262e2c52ec1308a6260e47908d2dc13e459b3317ac67a"
      },
      "downloads": -1,
      "filename": "matpower-7.1.0.2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dfdf5d73bda308f92979e7a4a84a8d67",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.6",
      "size": 28542929,
      "upload_time": "2022-03-30T16:12:53",
      "upload_time_iso_8601": "2022-03-30T16:12:53.167375Z",
      "url": "https://files.pythonhosted.org/packages/64/77/c86840c37c3ff0d7f31b334ffc9afd2e0c11b69bd975ec1983cbbd04de09/matpower-7.1.0.2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}