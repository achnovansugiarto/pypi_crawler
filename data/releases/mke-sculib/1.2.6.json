{
  "info": {
    "author": "Tobias Glaubach",
    "author_email": "tglaubach@mpifr-bonn.mpg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": ".. highlight:: rst\r\n\r\n============================\r\nmke_sculib\r\n============================\r\n\r\nMeerKAT Extension (MKE)\r\n(SCU) Science Computation Unit interface (lib)rary for the MKE antennas and some basic simulators\r\n\r\n-----------------\r\nInstalling\r\n-----------------\r\n\r\n.. code-block:: bash\r\n   pip install mke-sculib\r\n\r\n\r\n-----------------\r\nUsage for Antenna Control:\r\n-----------------\r\n\r\nIn order to connect to the REST API of the Telescope SCU use the library as follows:\r\n\r\n.. code-block:: python\r\n   from mke_sculib.scu import scu\r\n   mpi = scu('134.104.22.44', '8080')\r\n\r\n \r\n\r\n-----------------\r\nUsage as Simulator:\r\n-----------------\r\n\r\nUsing the simulator with the same script as used for operating the telescope can be \r\nachieved like this:\r\n\r\n.. code-block:: python\r\n   from mke_sculib.sim import plot_motion_pyplot as plot_motion\r\n   \r\n   # instead of THIS:\r\n   # from mke_sculib.scu import scu\r\n   # mpi = scu('134.104.22.44', '8080')\r\n\r\n   # do THIS for simulation:\r\n   from mke_sculib.sim import scu_sim as scu\r\n   mpi = scu()\r\n\r\nAfter a test has been done, the whole test history can be plotted in pyplot via:\r\n\r\n.. code-block:: python\r\n   # show the history data\r\n   dfh = mpi.get_history_df(interval_ms = None)\r\n   axs = plot_motion(dfh)\r\n\r\n-----------------\r\nUsing the library within Test Scripts:\r\n-----------------\r\n\r\nAfter installation, the library can be used to script automatic tests. A minimal \r\nexample for a tracking test is given below:\r\n\r\n\r\n.. code-block:: python\r\n   # Init\r\n   import astropy.units as u\r\n   from astropy.time import Time\r\n   import numpy as np\r\n   import pandas as pd\r\n\r\n   import matplotlib.pyplot as plt\r\n   from mke_sculib.sim import plot_motion_pyplot as plot_motion\r\n   from mke_sculib.sim import scu_sim as scu\r\n\r\n   mpi = scu()\r\n\r\n   # Startup \r\n   mpi.unstow()\r\n   mpi.wait_duration(30) # sec\r\n   mpi.activate_dmc()\r\n   mpi.wait_duration(wait10)\r\n\r\n   # Move to starting az, el\r\n   mpi.abs_azimuth(-90, 3) # degree, degree / s\r\n   mpi.abs_elevation(53, 1) # degree, degree / s\r\n   mpi.wait_settle()\r\n   mpi.wait_duration(5) # sec\r\n\r\n   # move to Band 2\r\n   mpi.move_to_band('Band 2')\r\n   mpi.wait_settle()\r\n   mpi.wait_duration(wait5)\r\n\r\n   # make a dummy tracking table\r\n   t = mpi.t_internal + (np.arange(5) * astropy.units.u.s)\r\n   az = np.linspace(-90, -89, len(t))\r\n   el = np.linspace(53, 54, len(t))\r\n\r\n   # start a tracking table\r\n   mpi.upload_track_table(t, az, el)\r\n\r\n   # start logging for my testrun\r\n   mpi.start_logger('full_configuration')\r\n   \r\n   # wait for track table to finish\r\n   mpi.wait_duration(np.ptp(t) + 5)\r\n\r\n   # shut down\r\n   mpi.stop_logger()\r\n   mpi.wait_duration(5)\r\n   mpi.deactivate_dmc()\r\n   mpi.wait_duration(10)\r\n   mpi.stow()\r\n\r\n   # show the sessions data\r\n   df = mpi.get_session_as_df(interval_ms = 100)\r\n   plot_motion(df)\r\n   df.to_csv('testdata_acu.csv')\r\n\r\n\r\nSee also `scripts` for examples on how to use this library\r\n\r\n\r\nHTTP Dummy server\r\n=====\r\n\r\nThis library has a dummy server with dashboard implemented which can run on any machine with anaconda installed. \r\n\r\nSee: `servers` for the examples. \r\n\r\nNOTE: Change the absolut path in the files if necessary\r\n\r\n.. code-block:: bash\r\n   python /servers/dashboard.py\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.mpcdf.mpg.de/tglaubach/mke-sculib",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mke-sculib",
    "package_url": "https://pypi.org/project/mke-sculib/",
    "platform": null,
    "project_url": "https://pypi.org/project/mke-sculib/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.mpcdf.mpg.de/tglaubach/mke-sculib/-/issues",
      "Homepage": "https://gitlab.mpcdf.mpg.de/tglaubach/mke-sculib"
    },
    "release_url": "https://pypi.org/project/mke-sculib/1.2.6/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "MeerKAT Extension (SCU) (lib)rary for the MKE antennas and some basic simulators",
    "version": "1.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15473885,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22ad33a63804ff4934c92e28bb5be73ab0aceb38f8171303d7e451f9151aaeaa",
        "md5": "a5f57800233ef4d9bc0e2f41a10d72f6",
        "sha256": "c1cab953e0b226706edbd526afe9b0ca59e7e2d028b6c1b6537783d20ee0b889"
      },
      "downloads": -1,
      "filename": "mke_sculib-1.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "a5f57800233ef4d9bc0e2f41a10d72f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 34848,
      "upload_time": "2022-07-28T11:39:15",
      "upload_time_iso_8601": "2022-07-28T11:39:15.857834Z",
      "url": "https://files.pythonhosted.org/packages/22/ad/33a63804ff4934c92e28bb5be73ab0aceb38f8171303d7e451f9151aaeaa/mke_sculib-1.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}