{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "License :: Other/Proprietary License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Automation Mojo Waiting Module - mojo-waiting\n\nThis package provides support for enhanced context based waiting.  The waiting code\npatterns used are designed to present the best results in test stacktraces presented\nwhen a wait fails.  This makes the `mojo.waiting` module perfect for use with\ntest frameworks such as `pytest` and `testplus` that show code context in the error\nreport stack traces.\n\nAnother important aspect of the `mojo.waiting` module is that it uses `datetime`\ntimestamps and `timespan` for lengths of time so timeouts in error reporting are easier\nto interpret.\n\n```\n    Traceback (most recent call last):\n    File \"/home/myron/repos/mojo.waiting/source/tests/test_wait_for_it.py\", line 97, in test_basic_wait_for_it_timeout\n        future.result()\n    File \"/usr/lib/python3.10/concurrent/futures/_base.py\", line 451, in result\n        return self.__get_result()\n    File \"/usr/lib/python3.10/concurrent/futures/_base.py\", line 403, in __get_result\n        raise self._exception\n    File \"/usr/lib/python3.10/concurrent/futures/thread.py\", line 58, in run\n        result = self.fn(*self.args, **self.kwargs)\n    File \"/home/myron/repos/mojo.waiting/source/tests/test_wait_for_it.py\", line 88, in wait_task\n        ctxwait.wait_for_it(wait_helper, interval=.5, timeout=2)\n    File \"/home/myron/repos/mojo.waiting/source/packages/ctxwait/waiting.py\", line 103, in wait_for_it\n        raise toerr\n    TimeoutError: Timeout waiting for 'wait_helper':\n        timeout=2 start_time=2023-03-13 14:57:29.860302, end_time=2023-03-13 14:57:31.860302 now_time=2023-03-13 14:57:31.863681 time_diff=0:00:02.003379\n```\n\nThe following is an example of how the `mojo.waiting` module is used.\n\n```{python}\n\n    from ctxwait import WaitContext, wait_for_it\n\n    def some_wait_helper(wctx: WaitContext):\n        finished = False\n\n        // TODO: Check if something is finished, the code and variables used\n        //       here will show up in any tracebacks from pytest or testplus\n        //       because the timeout is being raised in the appropriate scope.\n\n        if not finished and wctx.final_attempt:\n            whatfor = \"Test timeout\"\n            toerr = wctx.create_timeout(whatfor)\n            raise toerr\n\n        return finished\n\n    wait_for_it(some_wait_helper)\n```\n\nThe `wait_for_it` method has many different parameters that can be used to override the\nbehavior of the wait loop.\n\n```{python}\n\n    def wait_for_it(looper: WaitCallback, *largs, what_for: Optional[str]=None, delay: float=DEFAULT_WAIT_DELAY,\n                interval: float=DEFAULT_WAIT_INTERVAL, timeout: float=DEFAULT_WAIT_TIMEOUT,\n                lkwargs: Dict[Any, Any]={}, wctx: Optional[WaitContext]=None):\n        \"\"\"\n            Provides for convenient mechanism to wait for criteria to be met before proceeding.\n\n            :param looper: A callback method that is repeatedly called while it returns `False` up-to\n                        the end of a timeout period, and that will return `True` if a waited on\n                        condition is met prior to a timeout condition being met.\n            :param largs: Arguements to pass to the looper callback function.\n            :param what_for: A breif description of what is being waited for.\n            :param delay: An initial time delay to consume before beginning the waiting process.\n            :param interval: A period of time to delay between rechecks of the wait conditon\n            :param timeout: The maximum period of time in seconds that should be waited before timing out.\n            :param lkwargs: Additional keyword arguments to pass to the looper function\n\n            :raises TimeoutError: A timeout error with details around the wait condition.\n\n            ..note: The 'delay', 'interval' and 'timeout' parameters will be ignored if the 'wctx' parameter\n                    is passed as the wctx (WaitContext) parameter includes these values with it.\n        \"\"\"\n        ...\n```\n\nThe `wait_for_it` function must be passed a method that follows the `WaitCallback` protocol.  The function\ncan have variable arguments and keyword arguements but the first parameter to the `WaitCallback` method\nmust be a `WaitContext` object.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mojo-waiting",
    "package_url": "https://pypi.org/project/mojo-waiting/",
    "platform": null,
    "project_url": "https://pypi.org/project/mojo-waiting/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mojo-waiting/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "Automation Mojo Waiting Module",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17328888,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e184b24cea20cb86357fc164e552996e37f65fa8e3486bb5995b691502f6677b",
        "md5": "287b1b85380ef2f64f4b28c6d4df25a1",
        "sha256": "1038db44b4309e1ec3c23f9af52f1607fb01ee82a852ed1e963425664661f2f5"
      },
      "downloads": -1,
      "filename": "mojo_waiting-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "287b1b85380ef2f64f4b28c6d4df25a1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 9012,
      "upload_time": "2023-03-17T04:31:29",
      "upload_time_iso_8601": "2023-03-17T04:31:29.867171Z",
      "url": "https://files.pythonhosted.org/packages/e1/84/b24cea20cb86357fc164e552996e37f65fa8e3486bb5995b691502f6677b/mojo_waiting-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3077e20f7cc7da4ed34d46d432f76b058cb451636c0a0162b2532c442b67df76",
        "md5": "3b22dd3483be26ba61e63f0241839b70",
        "sha256": "1046ec3391706ff0258f31b660a76bde30878219532b6f2926845768fb36b7e1"
      },
      "downloads": -1,
      "filename": "mojo_waiting-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3b22dd3483be26ba61e63f0241839b70",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 6979,
      "upload_time": "2023-03-17T04:31:32",
      "upload_time_iso_8601": "2023-03-17T04:31:32.224503Z",
      "url": "https://files.pythonhosted.org/packages/30/77/e20f7cc7da4ed34d46d432f76b058cb451636c0a0162b2532c442b67df76/mojo_waiting-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}