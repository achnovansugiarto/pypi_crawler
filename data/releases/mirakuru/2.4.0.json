{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/ClearcodeHQ/mirakuru/master/logo.png\n    :height: 100px\n\nmirakuru\n========\n\nMirakuru is a process orchestration tool designed for functional and integration tests.\n\nMaybe you want to be able to start a database before you start your program\nor maybe you just need to set additional services up for your tests.\nThis is where you should consider using **mirakuru** to add superpowers to your program or tests.\n\n\n.. image:: https://img.shields.io/pypi/v/mirakuru.svg\n    :target: https://pypi.python.org/pypi/mirakuru/\n    :alt: Latest PyPI version\n\n.. image:: https://img.shields.io/pypi/wheel/mirakuru.svg\n    :target: https://pypi.python.org/pypi/mirakuru/\n    :alt: Wheel Status\n\n.. image:: https://img.shields.io/pypi/pyversions/mirakuru.svg\n    :target: https://pypi.python.org/pypi/mirakuru/\n    :alt: Supported Python Versions\n\n.. image:: https://img.shields.io/pypi/l/mirakuru.svg\n    :target: https://pypi.python.org/pypi/mirakuru/\n    :alt: License\n\n\nUsage\n-----\n\nIn a project that relies on multiple processes there might be a need to guard code\nwith tests that verify interprocess communication. So one needs to set up all of\nrequired databases, auxiliary and application services to verify their cooperation.\nSynchronising (or orchestrating) test procedure with tested processes might be a hell.\n\nIf so, then **mirakuru** is what you need.\n\n``Mirakuru`` starts your process and waits for the clear indication that it's running.\nLibrary provides seven executors to fit different cases:\n\n* **SimpleExecutor** - starts a process and does not wait for anything.\n  It is useful to stop or kill a process and its subprocesses.\n  Base class for all the rest of executors.\n* **Executor** - base class for executors verifying if a process has started.\n* **OutputExecutor** - waits for a specified output to be printed by a process.\n* **TCPExecutor** - waits for the ability to connect through TCP with a process.\n* **UnixSocketExecutor** - waits for the ability to connect through Unix socket\n  with a process\n* **HTTPExecutor** - waits for a successful HEAD request (and TCP before).\n* **PidExecutor** - waits for a specified .pid file to exist.\n\nSimpleExecutor\n++++++++++++++\n\nThe simplest executor implementation.\nIt simply starts the process passed to constructor, and reports it as running.\n\n.. code-block:: python\n\n    from mirakuru import SimpleExecutor\n\n    process = SimpleExecutor('my_special_process')\n    process.start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    process.stop()\n\nOutputExecutor\n++++++++++++++\n\nOutputExecutor is the executor that starts the process,\nbut does not report it as started, unless it receives specified marker/banner in\nprocess output.\n\n.. code-block:: python\n\n    from mirakuru import OutputExecutor\n\n    process = OutputExecutor('my_special_process', banner='processed!')\n    process.start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    process.stop()\n\nWhat happens during start here, is that the executor constantly checks output\nproduced by started process, and looks for the banner part occurring within the\noutput.\nOnce the output is identified, as in example `processed!` is found in output.\nIt is considered as started, and executor releases your script from wait to work.\n\n\nTCPExecutor\n+++++++++++\n\nIs the executor that should be used to start\nprocesses that are using TCP connection. This executor tries to connect with\nthe process on given host:port to see if it started accepting connections. Once it\ndoes, it reports the process as started and a code returns to normal execution.\n\n.. code-block:: python\n\n    from mirakuru import TCPExecutor\n\n    process = TCPExecutor('my_special_process', host='localhost', port=1234)\n    process.start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    process.stop()\n\nHTTPExecutor\n++++++++++++\n\nIs executor that will be used to start web applications for example.\nTo start it, you apart from command, you need to pass a URL.\nThis URL will be used to make a (by default) HEAD request. Once successful,\nthe executor will be considered started, and a code will return to normal execution.\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n\n    process = HTTPExecutor('my_special_process', url='http://localhost:6543/status')\n    process.start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    process.stop()\n\nThis executor, however, apart from HEAD request, also inherits TCPExecutor,\nso it'll try to connect to process over TCP first, to determine,\nif it can try to make a HEAD request already.\n\nBy default HTTPExecutor waits until its subprocess responds with 2XX HTTP status code.\nIf you consider other codes as valid you need to specify them in 'status' argument.\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n\n    process = HTTPExecutor('my_special_process', url='http://localhost:6543/status', status='(200|404)')\n    process.start()\n\nThe \"status\" argument can be a single code integer like 200, 404, 500 or a regular expression string -\n'^(2|4)00$', '2\\d\\d', '\\d{3}', etc.\n\nThere's also a possibility to change the request method used to perform request to the server.\nBy default it's HEAD, but GET, POST or other are also possible.\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n\n    process = HTTPExecutor('my_special_process', url='http://localhost:6543/status', status='(200|404)', method='GET')\n    process.start()\n\n\nPidExecutor\n+++++++++++\n\nIs an executor that starts the given\nprocess, and then waits for a given file to be found before it gives back control.\nAn example use for this class is writing integration tests for processes that\nnotify their running by creating a .pid file.\n\n.. code-block:: python\n\n    from mirakuru import PidExecutor\n\n    process = PidExecutor('my_special_process', filename='/var/msp/my_special_process.pid')\n    process.start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    process.stop()\n\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n    from httplib import HTTPConnection, OK\n\n\n    def test_it_works():\n        # The ``./http_server`` here launches some HTTP server on the 6543 port,\n        # but naturally it is not immediate and takes a non-deterministic time:\n        executor = HTTPExecutor(\"./http_server\", url=\"http://127.0.0.1:6543/\")\n\n        # Start the server and wait for it to run (blocking):\n        executor.start()\n        # Here the server should be running!\n        conn = HTTPConnection(\"127.0.0.1\", 6543)\n        conn.request(\"GET\", \"/\")\n        assert conn.getresponse().status is OK\n        executor.stop()\n\n\nA command by which executor spawns a process can be defined by either string or list.\n\n.. code-block:: python\n\n    # command as string\n    TCPExecutor('python -m smtpd -n -c DebuggingServer localhost:1025', host='localhost', port=1025)\n    # command as list\n    TCPExecutor(\n        ['python', '-m', 'smtpd', '-n', '-c', 'DebuggingServer', 'localhost:1025'],\n        host='localhost', port=1025\n    )\n\nUse as a Context manager\n------------------------\n\nStarting\n++++++++\n\nMirakuru executors can also work as a context managers.\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n\n    with HTTPExecutor('my_special_process', url='http://localhost:6543/status') as process:\n\n        # Here you can do your stuff, e.g. communicate with the started process\n        assert process.running() is True\n\n    assert process.running() is False\n\nDefined process starts upon entering context, and exit upon exiting it.\n\nStopping\n++++++++\n\nMirakuru also allows to stop process for given context.\nTo do this, simply use built-in stopped context manager.\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n\n    process = HTTPExecutor('my_special_process', url='http://localhost:6543/status').start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    with process.stopped():\n\n        # Here you will not be able to communicate with the process as it is killed here\n        assert process.running() is False\n\n    assert process.running() is True\n\nDefined process stops upon entering context, and starts upon exiting it.\n\n\nMethods chaining\n++++++++++++++++\n\nMirakuru encourages methods chaining so you can inline some operations, e.g.:\n\n.. code-block:: python\n\n    from mirakuru import SimpleExecutor\n\n    command_stdout = SimpleExecutor('my_special_process').start().stop().output\n\nContributing and reporting bugs\n-------------------------------\n\nSource code is available at: `ClearcodeHQ/mirakuru <https://github.com/ClearcodeHQ/mirakuru>`_.\nIssue tracker is located at `GitHub Issues <https://github.com/ClearcodeHQ/mirakuru/issues>`_.\nProjects `PyPI page <https://pypi.python.org/pypi/mirakuru>`_.\n\nWindows support\n---------------\n\nFrankly, there's none, Python's support differs a bit in required places\nand the team has no experience in developing for Windows.\nHowever we'd welcome contributions that will allow the windows support.\n\nSee:\n\n* `#392 <https://github.com/ClearcodeHQ/mirakuru/issues/392>`_\n* `#336 <https://github.com/ClearcodeHQ/mirakuru/issues/336>`_\n\nAlso, With the introduction of `WSL <https://docs.microsoft.com/en-us/windows/wsl/install-win10>`_\nthe need for raw Windows support might not be that urgant... If you've got any thoughts or are willing to contribute,\nplease start with the issues listed above.\n\nCHANGELOG\n=========\n\n2.4.0\n----------\n\nFeatures\n++++++++\n\n- Replace `exp_sig` executor parameter with `expected_returncode`.\n  Parameter description already assumed that, however handing it assumed full\n  POSIX compatibility on the process side. Now the POSIX is only assumed if no\n  `expected_returncode` is passed to the executor, and returncode is simply that,\n  a returncode, nothing more\n\n2.3.1\n----------\n\nMisc\n++++\n\n- Moved CI to Github Actions\n- Blackified codebase\n- Compacted Documentation into readme (was pretty small anyway)\n\n2.3.0\n----------\n\n- [enhancement] Ability to set up expected exit code for executor. In Java exit codes 1- 127 have \n  special meaning, and the regular exit codes are offset by those of special meaning.\n\n2.2.0\n----------\n\n- [enhancement] If process is being closed and the shutdown won't be clean (won't return exit code 0)\n  mirakuru will now rise ProcessFinishedWithError exception with exit_code\n\n2.1.2\n----------\n\n- [bugfix][macos] Fixed typing issue on macOS\n\n2.1.1\n----------\n\n- [bug] Always close connection for HTTPExecutor after_start_check\n- [enhancement] Log debug message if execption occured during\n  HTTPExecutor start check\n- [ehnancement] adjust typing handling in HTTPExecutor\n\n2.1.0\n----------\n\n- [feature] Drop support for python 3.5. Rely on typing syntax and fstrings that\n  is available since python 3.6 only\n- [ehnancement] For output executor on MacOs fallback to `select.select` for OutputExecutor.\n  Increases compatibility with MacOS where presence of `select.poll` depends\n  on the compiler used.\n- [enhancement] Apply shelx.quote on command parts if command is given as a list\n  Should result in similar results when running such command with or without shell.\n\n2.0.1\n----------\n\n- [repackage] - mark python 3.5 as required. Should disallow installing on python 2\n\n2.0.0\n----------\n\n- [feature] Add UnixSocketExecutor for executors that communicate with Unix Sockets\n- [feature] Mirakuru is now fully type hinted\n- [feature] Drop support for python 2\n- [feature] Allow for configuring process outputs to pipe to\n- [feature] OutputExecutor can now check for banner in stderr\n- [feature] HTTPEecutor now can check status on different method.\n  Along with properly configured payload and headers.\n- [feature] Ability to set custom env vars for orchestrated process\n- [feature] Ability to set custom cwd path for orchestrated process\n- [enhancement] psutil is no longer required on cygwin\n\n1.1.0\n----------\n\n- [enhancement] Executor's timeout to be set for both executor's start and stop\n- [enhancement] It's no longer possible to hang indefinitely on the start\n  or stop. Timeout is set to 3600 seconds by default, with values possible\n  between `0` and `sys.maxsize` with the latter still bit longer\n  than `2924712086` centuries.\n\n1.0.0\n----------\n\n- [enhancement] Do not fail if processes child throw EPERM error\n  during clean up phase\n- [enhancement] Run subprocesses in shell by default on Windows\n- [ehnancement] Do not pass preexec_fn on windows\n\n0.9.0\n----------\n\n- [enhancement] Fallback to kill through SIGTERM on Windows,\n  since SIGKILL is not available\n- [enhancement] detect cases where during stop process already exited,\n  and simply clean up afterwards\n\n0.8.3\n----------\n\n- [enhancement] when killing the process ignore OsError with errno `no such process` as the process have already died.\n- [enhancement] small context manager code cleanup\n\n\n0.8.2\n----------\n\n- [bugfix] atexit cleanup_subprocesses() function now reimports needed functions\n\n\n0.8.1\n----------\n\n- [bugfix] Handle IOErrors from psutil (#112)\n- [bugfix] Pass global vars to atexit cleanup_subprocesses function (#111)\n\n\n0.8.0\n----------\n\n- [feature] Kill all running mirakuru subprocesses on python exit.\n- [enhancement] Prefer psutil library (>=4.0.0) over calling 'ps xe' command to find leaked subprocesses.\n\n\n0.7.0\n----------\n\n- [feature] HTTPExecutor enriched with the 'status' argument.\n  It allows to define which HTTP status code(s) signify that a HTTP server is running.\n- [feature] Changed executor methods to return itself to allow method chaining.\n- [feature] Context Manager to return Executor instance, allows creating Executor instance on the fly.\n- [style] Migrated `%` string formating to `format()`.\n- [style] Explicitly numbered replacement fields in string.\n- [docs] Added documentation for timeouts.\n\n0.6.1\n----------\n\n- [refactoring] Moved source to src directory.\n- [fix, feature] Python 3.5 fixes.\n- [fix] Docstring changes for updated pep257.\n\n0.6.0\n----------\n\n- [fix] Modify MANIFEST to prune tests folder.\n- [feature] HTTPExecutor will now set the default 80 if not present in a URL.\n- [feature] Detect subprocesses exiting erroneously while polling the checks and error early.\n- [fix] Make test_forgotten_stop pass by preventing the shell from optimizing forking out.\n\n0.5.0\n----------\n\n- [style] Corrected code to conform with W503, D210 and E402 linters errors as reported by pylama `6.3.1`.\n- [feature] Introduced a hack that kills all subprocesses of executor process.\n  It requires 'ps xe -ww' command being available in OS otherwise logs error.\n- [refactoring] Classes name convention change.\n  Executor class got renamed into SimpleExecutor and StartCheckExecutor class got renamed into Executor.\n\n0.4.0\n-------\n\n- [feature] Ability to set up custom signal for stopping and killing processes managed by executors.\n- [feature] Replaced explicit parameters with keywords for kwargs handled by basic Executor init method.\n- [feature] Executor now accepts both list and string as a command.\n- [fix] Even it's not recommended to import all but `from mirakuru import *` didn't worked. Now it's fixed.\n- [tests] increased tests coverage.\n  Even test cover 100% of code it doesn't mean they cover 100% of use cases!\n- [code quality] Increased Pylint code evaluation.\n\n0.3.0\n-------\n\n- [feature] Introduced PidExecutor that waits for specified file to be created.\n- [feature] Provided PyPy compatibility.\n- [fix] Closing all resources explicitly.\n\n0.2.0\n-------\n\n- [fix] Kill all children processes of Executor started with shell=True.\n- [feature] Executors are now context managers - to start executors for given context.\n- [feature] Executor.stopped - context manager for stopping executors for given context.\n- [feature] HTTPExecutor and TCPExecutor before .start() check whether port\n  is already used by other processes and raise AlreadyRunning if detects it.\n- [refactoring] Moved python version conditional imports into compat.py module.\n\n\n0.1.4\n-------\n\n- [fix] Fixed an issue where setting shell to True would execute only part of the command.\n\n0.1.3\n-------\n\n- [fix] Fixed an issue where OutputExecutor would hang, if started process stopped producing output.\n\n0.1.2\n-------\n\n- [fix] Removed leftover sleep from TCPExecutor._wait_for_connection.\n\n0.1.1\n-------\n\n- [fix] Fixed `MANIFEST.in`.\n- Updated packaging options.\n\n0.1.0\n-------\n\n- Exposed process attribute on Executor.\n- Exposed port and host on TCPExecutor.\n- Exposed URL on HTTPExecutor.\n- Simplified package structure.\n- Simplified executors operating API.\n- Updated documentation.\n- Added docblocks for every function.\n- Applied license headers.\n- Stripped orchestrators.\n- Forked off from `summon_process`.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ClearcodeHQ/mirakuru",
    "keywords": "process,executor,tests,orchestration",
    "license": "LGPLv3+",
    "maintainer": "Grzegorz Śliwiński",
    "maintainer_email": "fizyk+pypi@fizyk.net.pl",
    "name": "mirakuru",
    "package_url": "https://pypi.org/project/mirakuru/",
    "platform": "",
    "project_url": "https://pypi.org/project/mirakuru/",
    "project_urls": {
      "Homepage": "https://github.com/ClearcodeHQ/mirakuru"
    },
    "release_url": "https://pypi.org/project/mirakuru/2.4.0/",
    "requires_dist": [
      "psutil (>=4.0.0) ; sys_platform != \"cygwin\"",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "python-daemon ; extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "Process executor (not only) for tests.",
    "version": "2.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17062066,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efdf0158e964525301300516c15b580be48f0aabfbe356cf0ceaa409205f92b4",
        "md5": "d710669162e39566340897518683a5f7",
        "sha256": "3e6a554e2f9c849a71cd1667d06347d233894e19e3e78f293c8b0ec6881893ee"
      },
      "downloads": -1,
      "filename": "mirakuru-2.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d710669162e39566340897518683a5f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 29056,
      "upload_time": "2021-05-20T14:50:09",
      "upload_time_iso_8601": "2021-05-20T14:50:09.200392Z",
      "url": "https://files.pythonhosted.org/packages/ef/df/0158e964525301300516c15b580be48f0aabfbe356cf0ceaa409205f92b4/mirakuru-2.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f0f4f668d4a3f21b19cf392b49f089ac671f3327646b09267bdda0addce095f",
        "md5": "aa43d76f9f4487dbc03e989cbc18a10c",
        "sha256": "86e3ed7a40a915b30584927665a90e0421e388fbc71f448e1cfdef09030f4b35"
      },
      "downloads": -1,
      "filename": "mirakuru-2.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "aa43d76f9f4487dbc03e989cbc18a10c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 31507,
      "upload_time": "2021-05-20T14:50:11",
      "upload_time_iso_8601": "2021-05-20T14:50:11.016909Z",
      "url": "https://files.pythonhosted.org/packages/2f/0f/4f668d4a3f21b19cf392b49f089ac671f3327646b09267bdda0addce095f/mirakuru-2.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}