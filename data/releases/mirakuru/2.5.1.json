{
  "info": {
    "author": "",
    "author_email": "Grzegorz Śliwiński <fizyk+pypi@fizyk.dev>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/ClearcodeHQ/mirakuru/master/logo.png\n    :height: 100px\n    \nmirakuru\n========\n\nMirakuru is a process orchestration tool designed for functional and integration tests.\n\nMaybe you want to be able to start a database before you start your program\nor maybe you just need to set additional services up for your tests.\nThis is where you should consider using **mirakuru** to add superpowers to your program or tests.\n\n\n.. image:: https://img.shields.io/pypi/v/mirakuru.svg\n    :target: https://pypi.python.org/pypi/mirakuru/\n    :alt: Latest PyPI version\n\n.. image:: https://img.shields.io/pypi/wheel/mirakuru.svg\n    :target: https://pypi.python.org/pypi/mirakuru/\n    :alt: Wheel Status\n\n.. image:: https://img.shields.io/pypi/pyversions/mirakuru.svg\n    :target: https://pypi.python.org/pypi/mirakuru/\n    :alt: Supported Python Versions\n\n.. image:: https://img.shields.io/pypi/l/mirakuru.svg\n    :target: https://pypi.python.org/pypi/mirakuru/\n    :alt: License\n\n\nUsage\n-----\n\nIn a project that relies on multiple processes there might be a need to guard code\nwith tests that verify interprocess communication. So one needs to set up all of\nrequired databases, auxiliary and application services to verify their cooperation.\nSynchronising (or orchestrating) test procedure with tested processes might be a hell.\n\nIf so, then **mirakuru** is what you need.\n\n``Mirakuru`` starts your process and waits for the clear indication that it's running.\nLibrary provides seven executors to fit different cases:\n\n* **SimpleExecutor** - starts a process and does not wait for anything.\n  It is useful to stop or kill a process and its subprocesses.\n  Base class for all the rest of executors.\n* **Executor** - base class for executors verifying if a process has started.\n* **OutputExecutor** - waits for a specified output to be printed by a process.\n* **TCPExecutor** - waits for the ability to connect through TCP with a process.\n* **UnixSocketExecutor** - waits for the ability to connect through Unix socket\n  with a process\n* **HTTPExecutor** - waits for a successful HEAD request (and TCP before).\n* **PidExecutor** - waits for a specified .pid file to exist.\n\nSimpleExecutor\n++++++++++++++\n\nThe simplest executor implementation.\nIt simply starts the process passed to constructor, and reports it as running.\n\n.. code-block:: python\n\n    from mirakuru import SimpleExecutor\n\n    process = SimpleExecutor('my_special_process')\n    process.start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    process.stop()\n\nOutputExecutor\n++++++++++++++\n\nOutputExecutor is the executor that starts the process,\nbut does not report it as started, unless it receives specified marker/banner in\nprocess output.\n\n.. code-block:: python\n\n    from mirakuru import OutputExecutor\n\n    process = OutputExecutor('my_special_process', banner='processed!')\n    process.start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    process.stop()\n\nWhat happens during start here, is that the executor constantly checks output\nproduced by started process, and looks for the banner part occurring within the\noutput.\nOnce the output is identified, as in example `processed!` is found in output.\nIt is considered as started, and executor releases your script from wait to work.\n\n\nTCPExecutor\n+++++++++++\n\nIs the executor that should be used to start\nprocesses that are using TCP connection. This executor tries to connect with\nthe process on given host:port to see if it started accepting connections. Once it\ndoes, it reports the process as started and a code returns to normal execution.\n\n.. code-block:: python\n\n    from mirakuru import TCPExecutor\n\n    process = TCPExecutor('my_special_process', host='localhost', port=1234)\n    process.start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    process.stop()\n\nHTTPExecutor\n++++++++++++\n\nIs executor that will be used to start web applications for example.\nTo start it, you apart from command, you need to pass a URL.\nThis URL will be used to make a (by default) HEAD request. Once successful,\nthe executor will be considered started, and a code will return to normal execution.\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n\n    process = HTTPExecutor('my_special_process', url='http://localhost:6543/status')\n    process.start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    process.stop()\n\nThis executor, however, apart from HEAD request, also inherits TCPExecutor,\nso it'll try to connect to process over TCP first, to determine,\nif it can try to make a HEAD request already.\n\nBy default HTTPExecutor waits until its subprocess responds with 2XX HTTP status code.\nIf you consider other codes as valid you need to specify them in 'status' argument.\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n\n    process = HTTPExecutor('my_special_process', url='http://localhost:6543/status', status='(200|404)')\n    process.start()\n\nThe \"status\" argument can be a single code integer like 200, 404, 500 or a regular expression string -\n'^(2|4)00$', '2\\d\\d', '\\d{3}', etc.\n\nThere's also a possibility to change the request method used to perform request to the server.\nBy default it's HEAD, but GET, POST or other are also possible.\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n\n    process = HTTPExecutor('my_special_process', url='http://localhost:6543/status', status='(200|404)', method='GET')\n    process.start()\n\n\nPidExecutor\n+++++++++++\n\nIs an executor that starts the given\nprocess, and then waits for a given file to be found before it gives back control.\nAn example use for this class is writing integration tests for processes that\nnotify their running by creating a .pid file.\n\n.. code-block:: python\n\n    from mirakuru import PidExecutor\n\n    process = PidExecutor('my_special_process', filename='/var/msp/my_special_process.pid')\n    process.start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    process.stop()\n\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n    from httplib import HTTPConnection, OK\n\n\n    def test_it_works():\n        # The ``./http_server`` here launches some HTTP server on the 6543 port,\n        # but naturally it is not immediate and takes a non-deterministic time:\n        executor = HTTPExecutor(\"./http_server\", url=\"http://127.0.0.1:6543/\")\n\n        # Start the server and wait for it to run (blocking):\n        executor.start()\n        # Here the server should be running!\n        conn = HTTPConnection(\"127.0.0.1\", 6543)\n        conn.request(\"GET\", \"/\")\n        assert conn.getresponse().status is OK\n        executor.stop()\n\n\nA command by which executor spawns a process can be defined by either string or list.\n\n.. code-block:: python\n\n    # command as string\n    TCPExecutor('python -m smtpd -n -c DebuggingServer localhost:1025', host='localhost', port=1025)\n    # command as list\n    TCPExecutor(\n        ['python', '-m', 'smtpd', '-n', '-c', 'DebuggingServer', 'localhost:1025'],\n        host='localhost', port=1025\n    )\n\nUse as a Context manager\n------------------------\n\nStarting\n++++++++\n\nMirakuru executors can also work as a context managers.\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n\n    with HTTPExecutor('my_special_process', url='http://localhost:6543/status') as process:\n\n        # Here you can do your stuff, e.g. communicate with the started process\n        assert process.running() is True\n\n    assert process.running() is False\n\nDefined process starts upon entering context, and exit upon exiting it.\n\nStopping\n++++++++\n\nMirakuru also allows to stop process for given context.\nTo do this, simply use built-in stopped context manager.\n\n.. code-block:: python\n\n    from mirakuru import HTTPExecutor\n\n    process = HTTPExecutor('my_special_process', url='http://localhost:6543/status').start()\n\n    # Here you can do your stuff, e.g. communicate with the started process\n\n    with process.stopped():\n\n        # Here you will not be able to communicate with the process as it is killed here\n        assert process.running() is False\n\n    assert process.running() is True\n\nDefined process stops upon entering context, and starts upon exiting it.\n\n\nMethods chaining\n++++++++++++++++\n\nMirakuru encourages methods chaining so you can inline some operations, e.g.:\n\n.. code-block:: python\n\n    from mirakuru import SimpleExecutor\n\n    command_stdout = SimpleExecutor('my_special_process').start().stop().output\n\nContributing and reporting bugs\n-------------------------------\n\nSource code is available at: `ClearcodeHQ/mirakuru <https://github.com/ClearcodeHQ/mirakuru>`_.\nIssue tracker is located at `GitHub Issues <https://github.com/ClearcodeHQ/mirakuru/issues>`_.\nProjects `PyPI page <https://pypi.python.org/pypi/mirakuru>`_.\n\nWindows support\n---------------\n\nFrankly, there's none, Python's support differs a bit in required places\nand the team has no experience in developing for Windows.\nHowever we'd welcome contributions that will allow the windows support.\n\nSee:\n\n* `#392 <https://github.com/ClearcodeHQ/mirakuru/issues/392>`_\n* `#336 <https://github.com/ClearcodeHQ/mirakuru/issues/336>`_\n\nAlso, With the introduction of `WSL <https://docs.microsoft.com/en-us/windows/wsl/install-win10>`_\nthe need for raw Windows support might not be that urgant... If you've got any thoughts or are willing to contribute,\nplease start with the issues listed above.\n\n\nRelease\n=======\n\nInstall pipenv and --dev dependencies first, Then run:\n\n.. code-block::\n\n    pipenv run tbump [NEW_VERSION]\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "process,executor,tests,orchestration",
    "license": "GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007  Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.   This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.  0. Additional Definitions.  As used herein, \"this License\" refers to version 3 of the GNU Lesser General Public License, and the \"GNU GPL\" refers to version 3 of the GNU General Public License.  \"The Library\" refers to a covered work governed by this License, other than an Application or a Combined Work as defined below.  An \"Application\" is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.  A \"Combined Work\" is a work produced by combining or linking an Application with the Library.  The particular version of the Library with which the Combined Work was made is also called the \"Linked Version\".  The \"Minimal Corresponding Source\" for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version.  The \"Corresponding Application Code\" for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.  1. Exception to Section 3 of the GNU GPL.  You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.  2. Conveying Modified Versions.  If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version:  a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or  b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy.  3. Object Code Incorporating Material from Library Header Files.  The object code form of an Application may incorporate material from a header file that is part of the Library.  You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following:  a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License.  b) Accompany the object code with a copy of the GNU GPL and this license document.  4. Combined Works.  You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following:  a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License.  b) Accompany the Combined Work with a copy of the GNU GPL and this license document.  c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document.  d) Do one of the following:  0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.  1) Use a suitable shared library mechanism for linking with the Library.  A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version.  e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0, the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1, you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.)  5. Combined Libraries.  You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following:  a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License.  b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.  6. Revised Versions of the GNU Lesser General Public License.  The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.  Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation.  If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mirakuru",
    "package_url": "https://pypi.org/project/mirakuru/",
    "platform": null,
    "project_url": "https://pypi.org/project/mirakuru/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ClearcodeHQ/mirakuru/issues",
      "Changelog": "https://github.com/ClearcodeHQ/mirakuru/blob/v2.5.1/CHANGES.rst",
      "Source": "https://github.com/ClearcodeHQ/mirakuru"
    },
    "release_url": "https://pypi.org/project/mirakuru/2.5.1/",
    "requires_dist": [
      "psutil (>=4.0.0) ; sys_platform != \"cygwin\""
    ],
    "requires_python": ">=3.7",
    "summary": "Process executor (not only) for tests.",
    "version": "2.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17062066,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06fef8c194b5b4fe01c39febf8db5058ec6d6c688511ef66cf9cedfc2b183b5d",
        "md5": "aeb4f33b98a0b94d35dc6e1cbaeec026",
        "sha256": "0a16f897841741f8cd784f790e54d74e61456ba36be9cb9de731b49e2e7a45dc"
      },
      "downloads": -1,
      "filename": "mirakuru-2.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aeb4f33b98a0b94d35dc6e1cbaeec026",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 29203,
      "upload_time": "2023-02-27T09:49:46",
      "upload_time_iso_8601": "2023-02-27T09:49:46.189742Z",
      "url": "https://files.pythonhosted.org/packages/06/fe/f8c194b5b4fe01c39febf8db5058ec6d6c688511ef66cf9cedfc2b183b5d/mirakuru-2.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca2398d0adb9412d61d4f70545946cac1fe06b69de5a5f64c59b9661e68e5633",
        "md5": "12d7e2a4ab443d2b48127b7e458d9d98",
        "sha256": "5a60d641fa92c8bfcd383f6e52f7a0bf3f081da0467fc6e3e6a3f6b3e3e47a7b"
      },
      "downloads": -1,
      "filename": "mirakuru-2.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "12d7e2a4ab443d2b48127b7e458d9d98",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 29659,
      "upload_time": "2023-02-27T09:49:48",
      "upload_time_iso_8601": "2023-02-27T09:49:48.164760Z",
      "url": "https://files.pythonhosted.org/packages/ca/23/98d0adb9412d61d4f70545946cac1fe06b69de5a5f64c59b9661e68e5633/mirakuru-2.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}