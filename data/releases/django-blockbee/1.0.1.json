{
  "info": {
    "author": "BlockBee",
    "author_email": "info@blockbee.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "[<img src=\"https://blockbee.io/static/assets/images/blockbee_logo_nospaces.png\" width=\"300\"/>](image.png)\n\n\n# BlockBee's Django Library\nDjango's implementation of BlockBee's payment gateway\n\n## Requirements:\n\n```\nPython >= 3.0\nDjango >= 2.0\nRequests >= 2.20\n```\n\n\n\n## Install\n\n\n```shell script\npip install django-blockbee\n```\n\n\n[on pypi](https://pypi.python.org/pypi/django-blockbee)\nor\n[on GitHub](https://github.com/blockbee-io/django-blockbee)\n\nAdd to INSTALLED_APPS:\n\n```python\nINSTALLED_APPS = (\n    'blockbee',\n    ...\n)\n```\n\n\nRun migrations:\n\n```shell script\npython3 manage.py migrate blockbee\n```\n\nCollect static files:\n\n```shell script\npython3 manage.py collectstatic\n```\n\nAdd BlockBee's URLs to your project's urls.py file:\n\n```python\nurlpatterns = [\n    path('blockbee/', include('blockbee.urls')),\n    ...\n]\n```\n\n## Configuration\n\nAfter the installation you need to set up Providers for each coin you wish to accept.\n\nYou need to go into your Django Admin and create a new BlockBee ``Provider`` for each coin with your cold wallet address where the funds will be forwarded to.\n\n## Usage\n\n### Creating an Invoice\n\nIn your order creation view, assuming ``user_order`` is your order object:\n\n* ##### If you want the address generated:\n\n```python\nfrom blockbee import Invoice\n\n...\n\n\ndef order_creation_view(request):\n    ...\n    invoice = Invoice(\n        request=request,\n        order_id=user_order.id,\n        coin='btc',\n        value=user_order.value\n    )\n\n    payment_address = invoice.address()\n\n    if payment_address is not None:\n        # Show the payment address to the user\n        ...\n    else:\n# Handle request error, check RequestLogs on Admin\n```\n\n* ##### If you want the `blockbee.models.Request` object:\n\n```python\nfrom blockbee import Invoice\n\n...\n\n\ndef order_creation_view(request):\n    ...\n    invoice = Invoice(\n        request=request,  # This if your view request. It's meant to create the callback URL\n        order_id=user_order.id,\n        coin='btc',\n        value=user_order.value\n    )\n\n    payment_request = invoice.request()\n\n    if payment_request is not None:\n        # Show the payment address to the user\n        ...\n    else:\n# Handle request error, check RequestLogs on Admin\n```\n\n#### Where:\n\n``request`` is Django's view HttpRequest object  \n\n``order_id`` is just your order id  \n\n``coin`` is the ticker of the coin you wish to use, any of our supported coins (https://blockbee.io/cryptocurrencies/). You need to have a ``Provider`` set up for that coin.  \n\n``value`` is an integer of the value of your order\n\n``apikey`` is the API Key that you got from your BlockBee Dashboard\n\n&nbsp;\n\n### Getting notified when the user pays\n\n```python\nfrom django.dispatch import receiver\nfrom blockbee.signals import payment_complete\n\n\n@receiver(payment_complete)\ndef payment_received(order_id, payment, value):\n    # Implement your logic to mark the order as paid and release the goods to the user\n    ...\n```\n\nWhere:  \n\n``order_id`` is the id of the order that you provided earlier, used to fetch your order  \n``payment`` is an ``blockbee.models.Payment`` object with the payment details, such as TXID, number of confirmations, etc.  \n``value`` is the value the user paid\n\n\n#### Important:\n>\n>Don't forget to import your signals file. \n>\n>On your App's `apps.py` file:\n>\n>```python\n>class MyAppConfig(AppConfig):\n>    name = 'MyApp'\n>    \n>    def ready(self):\n>        super(MyAppConfig, self).ready()\n>\n>        # noinspection PyUnresolvedReferences\n>        import MyApp.signals\n>```\n>[django docs](https://docs.djangoproject.com/en/3.0/topics/signals/#django.dispatch.receiver)\n\n\n\n### Using our provided interface\n\nCreate a view in ``views.py``\n\n```python\ndef payment(_r, request_id):\n    try:\n        req = Request.objects.get(id=request_id)\n        coin = req.provider.coin\n\n        qrcode = get_qrcode(coin, req.address_in)\n\n        fiat = get_conversion(coin, 'eur', req.value_requested)\n\n        print(fiat)\n\n        ctx = {\n            'req': req,\n            'qrcode': qrcode,\n            'fiat': fiat['value_coin']\n        }\n\n        return render(_r, 'payment.html', context=ctx)\n\n    except Request.DoesNotExist:\n        pass\n\n    return redirect('store:request')\n```\nIn your template HTML\n\n```djangotemplate\n{% extends 'base.html' %}\n{% load blockbee_helper %}\n{% block content %}\n    {% generate_payment_template %}\n{% endblock %}\n```\n\n&nbsp;\n\n\n### Helpers\n\nThis library has a couple of helpers to help you get started. They are present in the file ``utils.py``.\n\n``blockbee.valid_providers()`` is a method that returns a list of tuples of the active providers that you can just feed into the choices of a ``form.ChoiceField``\n\n``blockbee.get_order_invoices(order_id)`` returns a list of ``blockbee.models.Request`` objects of your order (you can have multiple objects for the same order if the user mistakenly initiated the payment with another coin or if he mistakenly didn't send the full payment)\n\n``blockbee.callback_url(_r, params)`` build your callback URL to provide to ``get_request``. Should be used inside a view since ``_r = request``\n\n&nbsp;\n\n### BlockBee Helper\n\nThis is the helper responsible for the connections ot the API itself. All these functions are in the ``blockbee.py`` file. \n\n``get_info(coin)`` returns the information of all cryptocurrencies or just if ``coin=''`` or a specific cryptocurrency if ``coin='ltc'`` for example. [docs](https://docs.blockbee.io/#operation/info)\n\n``get_supported_coins()`` returns all the support cryptocurrencies. You can consult them in this [list](https://blockbee.io/fees/). \n\n``get_logs(coin, callback_url)`` returns all the callback logs related to a request. ``callback_url`` should be the callback provided to our API. [docs](https://docs.blockbee.io/#operation/logs)\n\n``get_qrcode(coin, address, value, size)`` returns a PNG of a QR Code with the address for payment. [docs](https://docs.blockbee.io/tag/Bitcoin#operation/btcqrcode)\n\n``get_conversion(origin, to, value)`` returns the converted value in the parameter ``value_coin`` to the currency you wish, FIAT or Cryptocurrency.\n\n``get_estimate(coin)`` returns the estimation of the blockchain fees for the cryptocurrency specified in the parameter ``coin``. E.g: ``get_estimate('trc20_usdt')`` [docs](https://docs.blockbee.io/#operation/estimate)\n\n``get_address(coin, params)`` requests a payment address to BlockBee. Params include all the parameters that can be found [here](https://docs.blockbee.io/#operation/create). The parameter ``apikey`` is mandatory.\n\n&nbsp;\n\n### How to use the QR code (with address, coin and value)\n\nTo generate a QR Code you must use ``get_qrcode`` in your view and feed the parameters to your template. To generate a QR Code image you must place content of the API response after ``data:image/png;base64,{{qr_code}}`` so the browser generates the QR Code.\n```djangotemplate\n<img src=\"data:image/png;base64,{{ qrcode.qr_code }}\" alt=\"Payment QR Code\"/>\n```\n\nYou can also make the QR Code clickable.\n\n```djangotemplate\n<a href='{{ qrcode.payment_uri }}'>\n    <img src=\"data:image/png;base64,{{ qrcode.qr_code }}\" alt=\"Payment QR Code\"/>\n</a>\n```\n\nYou can also add a value to the QR Code setting the ``value`` parameter to the value of your order (e.g ``0.2 LTC``). This may not function correctly in some wallets. **Use at your own risk.**\n\n## What is the Store application?\n\nWe made the ``store`` application to provide you with code examples on how to implement our service. It also has the code for our suggested UI (both CSS and HTML).\n\n\n## Help\n\nNeed help?  \nContact us @ https://blockbee.io/contacts/\n\n\n### Changelog \n\n#### 1.0.0\n* Initial Release\n\n#### 1.0.1\n* Minor fixes\n* UI Improvements\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blockbee-io/django-blockbee",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-blockbee",
    "package_url": "https://pypi.org/project/django-blockbee/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-blockbee/",
    "project_urls": {
      "Homepage": "https://github.com/blockbee-io/django-blockbee"
    },
    "release_url": "https://pypi.org/project/django-blockbee/1.0.1/",
    "requires_dist": [
      "django",
      "requests"
    ],
    "requires_python": "",
    "summary": "Django implementation of BlockBee's payment gateway",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16485695,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "373dfdd8847d208eb71ad4c08318ad99021c46e0283a73456839374e26c94014",
        "md5": "9ed4e7dd91618ee353658205f50eeec1",
        "sha256": "10409daf294070686ddfcab2bdb223f7dd986c48f08a2dd035b207bdad344895"
      },
      "downloads": -1,
      "filename": "django_blockbee-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ed4e7dd91618ee353658205f50eeec1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21682,
      "upload_time": "2023-01-06T14:25:57",
      "upload_time_iso_8601": "2023-01-06T14:25:57.594376Z",
      "url": "https://files.pythonhosted.org/packages/37/3d/fdd8847d208eb71ad4c08318ad99021c46e0283a73456839374e26c94014/django_blockbee-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f0a567d9445ca051dce647a097a0c4c77eee12a9ad592e30d0476af6993449c",
        "md5": "522a351c07268d68ce58f9c9da254566",
        "sha256": "d13981688525821d59fcfeed25fefd40e96fc30e00145c84ade4669180374d9e"
      },
      "downloads": -1,
      "filename": "django-blockbee-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "522a351c07268d68ce58f9c9da254566",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19789,
      "upload_time": "2023-01-06T14:25:59",
      "upload_time_iso_8601": "2023-01-06T14:25:59.179918Z",
      "url": "https://files.pythonhosted.org/packages/9f/0a/567d9445ca051dce647a097a0c4c77eee12a9ad592e30d0476af6993449c/django-blockbee-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}