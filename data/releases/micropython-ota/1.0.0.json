{
  "info": {
    "author": "Oliver Gregorius",
    "author_email": "oliver@gregorius.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# micropython-ota\n\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/olivergregorius/micropython_ota/Python%20Build?label=Python%20Build&logo=github)](https://github.com/olivergregorius/micropython_ota/actions/workflows/build.yml)\n[![Python Versions](https://img.shields.io/pypi/pyversions/micropython-ota?label=Python)](https://pypi.org/project/micropython-ota/)\n[![GitHub](https://img.shields.io/github/license/olivergregorius/micropython_ota?label=License)](https://github.com/olivergregorius/micropython_ota/blob/HEAD/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/micropython-ota?label=PyPI)](https://pypi.org/project/micropython-ota/)\n\n## Introduction\n\nMicropython library for upgrading code over-the-air (OTA)\n\n## Preparation\n\nFor OTA updates to work an HTTP server like Apache or nGinx is required to be running and accessible by the device. This server can serve multiple devices and\nmultiple projects at once. The following directory structure must be provided for the OTA updates to work:\n\n```\nserver-root/\n|- <project_name>/\n|  |- version\n|  |- <version>_<filename1>\n|  |- <version>_<filename2>\n|  |- ...\n|- <project_name>/\n   |- version\n   |- <version>_<filename1>\n   |- <version>_<filename2>\n   |- ...\n```\n\nFor each project a directory must exist in the server's document root. Inside this directory a file \"version\" exists containing the version-tag to be pulled\nby the devices, e.g. `v1.0.0`. The source code files to be pulled by the devices are placed right next to the version-file, prefixed by the version-tag.\nThis structure also provides the ability to do a rollback by simply changing the version-tag in the version-file to an older version-tag, as long as the\nrelevant source code files still reside in the directory.\n\nIn the following example two projects \"sample\" and \"big_project\" are configured:\n\n```\nserver-root/\n|- sample/\n|  |- version <-- containing v1.0.1\n|  |- v1.0.0_boot.py\n|  |- v1.0.0_main.py\n|  |- v1.0.1 boot.py\n|  |- v1.0.1 main.py\n|- big_project/\n   |- version <-- containing v1.0.0\n   |- v1.0.0_boot.py\n   |- v1.0.0_main.py\n   |- v1.0.0_data.py\n```\n\n## Usage\n\nThis library provides two methods for\n\n1. handling code updates during boot (`ota_update`) and\n2. checking for code updates at regular intervals (`check_for_ota_update`).\n\nThe library can be installed using [upip](https://docs.micropython.org/en/latest/reference/glossary.html#term-upip), ensure that the device is connected to the\nnetwork:\n\n```python\nimport upip\nupip.install('micropython-ota')\n```\n\nThe `ota_update` method might be called in the boot.py file, right after the network connection has been established:\n\n```python\nimport micropython_ota\n\n# connect to network\n\nota_host = 'http://192.168.2.100'\nproject_name = 'sample'\nfilenames = ['boot.py', 'main.py']\n\nmicropython_ota.ota_update(ota_host, project_name, filenames)\n```\n\nThat's it. On boot the library retrieves the version-file from `http://192.168.2.100/sample/version` and evaluates its content against a locally persisted\nversion-file. (Of course, on the first run the local version-file does not exist, yet. This is treated as a new version being available.)\nIf the versions differ, the source code files listed in `filenames` are updated accordingly and on success the local version-file is updated as well.\n\nFor regular checking for code updates the method `check_for_ota_update` might be called in the course of the regular application logic in main.py, e.g.:\n\n```python\nimport micropython_ota\nimport utime\n\nota_host = 'http://192.168.2.100'\nproject_name = 'sample'\n\nwhile True:\n    # do some other stuff\n    utime.sleep(10)\n    micropython_ota.check_for_ota_update(ota_host, project_name)\n```\n\nIn this case on each iteration the library checks for a new version as described above and reboots the device if a new version is available. After the reboot\nthe `ota_update`-method called in the boot.py performs the actual update.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "OTA,Microcontroller,Micropython",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-ota",
    "package_url": "https://pypi.org/project/micropython-ota/",
    "platform": null,
    "project_url": "https://pypi.org/project/micropython-ota/",
    "project_urls": {
      "Source": "https://github.com/olivergregorius/micropython_ota"
    },
    "release_url": "https://pypi.org/project/micropython-ota/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Micropython library for upgrading code over-the-air (OTA)",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16639799,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c77d2b0882fc26a0382801561d252df5b1f824444453e495fb88886c56e10cb9",
        "md5": "e1c9e74fc63d69167e0afbf8a19c3bdf",
        "sha256": "0b02ec7e39417a7a5c3ff9d6b5953c3feb04a4a52ee92a82ea57f8091742a813"
      },
      "downloads": -1,
      "filename": "micropython_ota-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e1c9e74fc63d69167e0afbf8a19c3bdf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2683,
      "upload_time": "2022-07-16T21:11:11",
      "upload_time_iso_8601": "2022-07-16T21:11:11.031173Z",
      "url": "https://files.pythonhosted.org/packages/c7/7d/2b0882fc26a0382801561d252df5b1f824444453e495fb88886c56e10cb9/micropython_ota-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}