{
  "info": {
    "author": "Oliver Gregorius",
    "author_email": "oliver@gregorius.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# micropython-ota\n\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/olivergregorius/micropython_ota/Python%20Build?label=Python%20Build&logo=github)](https://github.com/olivergregorius/micropython_ota/actions/workflows/build.yml)\n[![Python Versions](https://img.shields.io/pypi/pyversions/micropython-ota?label=Python)](https://pypi.org/project/micropython-ota/)\n[![GitHub](https://img.shields.io/github/license/olivergregorius/micropython_ota?label=License)](https://github.com/olivergregorius/micropython_ota/blob/HEAD/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/micropython-ota?label=PyPI)](https://pypi.org/project/micropython-ota/)\n\n## Introduction\n\nMicropython library for upgrading code over-the-air (OTA)\n\n## Preparation\n\nFor OTA updates to work an HTTP/HTTPS server like Apache or nGinx is required to be running and accessible by the device. This server can serve multiple devices\nand multiple projects at once. There are two supported directory structures of which one must be provided for the OTA updates to work:\n\n1. Version as prefix (default)\n    ```\n    server-root/\n    |- <project_name>/\n    |  |- version\n    |  |- <version>_<filename1>\n    |  |- <version>_<filename2>\n    |  |- ...\n    |- <project_name>/\n       |- version\n       |- <version>_<filename1>\n       |- <version>_<filename2>\n       |- ...\n    ```\n\n2. Version as subdirectory (by setting the parameter `use_version_prefix` to `False`, see [Usage](#usage))\n    ```\n    server-root/\n    |- <project_name>/\n    |  |- version\n    |  |- <version_subdir>\n    |     |- <filename1>\n    |     |- <filename2>\n    |     |- ...\n    |- <project_name>/\n       |- version\n       |- <version_subdir>\n          |- <filename1>\n          |- <filename2>\n          |- ...\n    ```\n\nFor each project a directory must exist in the server's document root. Inside this directory a file \"version\" exists containing the version-tag to be pulled\nby the devices, e.g. `v1.0.0`. The source code files to be pulled by the devices are placed either right next to the version-file, prefixed by the version-tag,\nor in a subdirectory named with the version-tag.\nThis structure also provides the ability to do a rollback by simply changing the version-tag in the version-file to an older version-tag, as long as the\nrelevant source code files still reside in the expected location.\n\nIn the following example two projects \"sample\" and \"big_project\" are configured, using the default, version-prefixed directory structure:\n\n```\nserver-root/\n|- sample/\n|  |- version <-- containing v1.0.1\n|  |- v1.0.0_boot.py\n|  |- v1.0.0_main.py\n|  |- v1.0.1 boot.py\n|  |- v1.0.1 main.py\n|- big_project/\n   |- version <-- containing v1.0.0\n   |- v1.0.0_boot.py\n   |- v1.0.0_main.py\n   |- v1.0.0_data.py\n```\n\n## Installation\n\nThe library can be installed using [upip](https://docs.micropython.org/en/latest/reference/glossary.html#term-upip) or\n[mip](https://docs.micropython.org/en/latest/reference/packages.html). Ensure that the device is connected to the network.\n\n### Installation using upip (Micropython < 1.19)\n\n```python\nimport upip\nupip.install('micropython-ota')\n```\n\n### Installation using mip (Micropython >= 1.19)\n\n#### Py-file\n\n```python\nimport mip\nmip.install('github:olivergregorius/micropython_ota/micropython_ota.py')\n```\n\n#### Cross-compiled mpy-file\n\n**NOTE**: Set the release_version variable accordingly.\n\n```python\nimport mip\nrelease_version='vX.Y.Z'\nmip.install(f'https://github.com/olivergregorius/micropython_ota/releases/download/{release_version}/micropython_ota.mpy')\n```\n\n## Usage\n\nThis library provides two methods for\n\n1. handling code updates during boot (`ota_update`) and\n2. checking for code updates at regular intervals (`check_for_ota_update`).\n\nThe `ota_update` method might be called in the boot.py file, right after the network connection has been established:\n\n```python\nimport micropython_ota\n\n# connect to network\n\nota_host = 'http://192.168.2.100'\nproject_name = 'sample'\nfilenames = ['boot.py', 'main.py']\n\nmicropython_ota.ota_update(ota_host, project_name, filenames, use_version_prefix=True, reset_device=True, timeout=5)\n```\n\nThat's it. On boot the library retrieves the version-file from `http://192.168.2.100/sample/version` and evaluates its content against a locally persisted\nversion-file. (Of course, on the first run the local version-file does not exist, yet. This is treated as a new version being available.)\nIf the versions differ, the source code files listed in `filenames` are updated accordingly and on success the local version-file is updated as well. If the\n`use_version_prefix` is set to True (default) the library expects the 'Version as prefix' directory structure on the server, otherwise it expects the 'Version\nas subdirectory' directory structure (see [Preparation](#preparation)). If the `reset_device`-flag is set to `True` (default) the device will be reset after the\nsuccessful update. The timeout can be set accordingly, by default its value is 5 seconds.\n\nFor regular checking for code updates the method `check_for_ota_update` might be called in the course of the regular application logic in main.py, e.g.:\n\n```python\nimport micropython_ota\nimport utime\n\nota_host = 'http://192.168.2.100'\nproject_name = 'sample'\n\nwhile True:\n    # do some other stuff\n    utime.sleep(10)\n    micropython_ota.check_for_ota_update(ota_host, project_name, timeout=5)\n```\n\nIn this case on each iteration the library checks for a new version as described above and resets the device if a new version is available. After the reset\nthe `ota_update`-method called in the boot.py performs the actual update. This method accepts the timeout setting, too, by default it is set to 5 seconds.\n\n## HTTP(S) Basic Authentication\n\n`ota_update()` and `check_for_ota_update()` methods allow optional `user` and `passwd` parameters.  When specified the library performs a basic authentication\nagainst the server hosting the source files.  Use of HTTPS (versus HTTP) is very highly recommended when using basic authentication as, otherwise, the resulting\nusername and password are sent as plain text i.e. completely unsecure.\n\nHere is the same example as above, but using HTTPS and Basic Authentication:\n\n```python\nimport micropython_ota\n# connect to network\nota_host = 'https://example.com'\nproject_name = 'sample'\nfilenames = ['boot.py', 'main.py']\nuser = 'otauser'\npasswd = 'topsecret' # it's best to place this credential is a secrets.py file\nmicropython_ota.ota_update(ota_host, project_name, filenames, user=user, passwd=passwd, reset_device=True)\n```\n\nThere are plenty of tutorials online on how to set up secured HTTP file access on your webserver, but the basic steps are:\n- get and install an SSL certificate (Let's Encrypt is by far the best choice)\n- enable HTTPS access on your web server\n- prevent directories from listing files\n- enable HTTP Basic Authentication password protection on target directories\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "OTA,Microcontroller,Micropython",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-ota",
    "package_url": "https://pypi.org/project/micropython-ota/",
    "platform": null,
    "project_url": "https://pypi.org/project/micropython-ota/",
    "project_urls": {
      "Source": "https://github.com/olivergregorius/micropython_ota"
    },
    "release_url": "https://pypi.org/project/micropython-ota/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Micropython library for upgrading code over-the-air (OTA)",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16639799,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e5f300df611d913150dee5cc4616a3b8437df0b8372ada9606001cb90e74399",
        "md5": "c7ba810077323e2ae3869c9e593124d0",
        "sha256": "c17c3bc25c29e3425803c04315e5753503ee024c9f24b6159285e61f8945734a"
      },
      "downloads": -1,
      "filename": "micropython_ota-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c7ba810077323e2ae3869c9e593124d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3968,
      "upload_time": "2022-11-15T23:24:01",
      "upload_time_iso_8601": "2022-11-15T23:24:01.474231Z",
      "url": "https://files.pythonhosted.org/packages/0e/5f/300df611d913150dee5cc4616a3b8437df0b8372ada9606001cb90e74399/micropython_ota-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}