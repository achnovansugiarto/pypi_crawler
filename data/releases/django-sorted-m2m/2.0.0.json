{
  "info": {
    "author": "Gregor MÃ¼llegger",
    "author_email": "gregor@muellegger.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "=================\ndjango-sorted-m2m\n=================\n\n|build-status|\n\nThis project is a fork of `django-sortedm2m <http://github.com/gregmuellegger/django-sortedm2m>`_ with added support of Django 2.2 thanks to the code of `@joehybird <https://github.com/joehybird>`_.\nIt is published on PyPI under the name *django-sorted-m2m* (note the additional - betweeen sorted and m2m)\n\n------------\n\n``sortedm2m`` is a drop-in replacement for django's own ``ManyToManyField``.\nThe provided ``SortedManyToManyField`` behaves like the original one but\nremembers the order of added relations.\n\nUsecases\n========\n\nImagine that you have a gallery model and a photo model. Usually you want a\nrelation between these models so you can add multiple photos to one gallery\nbut also want to be able to have the same photo on many galleries.\n\nThis is where you usually can use many to many relation. The downside is that\ndjango's default implementation doesn't provide a way to order the photos in\nthe gallery. So you only have a random ordering which is not suitable in most\ncases.\n\nYou can work around this limitation by using the ``SortedManyToManyField``\nprovided by this package as drop in replacement for django's\n``ManyToManyField``.\n\nRequirements\n============\n\n**django-sortedm2m** runs on Python 2.7, 3.6, 3.7 and up. Django 1.11 and up\nis required\n\nUsage\n=====\n\nUse ``SortedManyToManyField`` like ``ManyToManyField`` in your models::\n\n    from django.db import models\n    from sortedm2m.fields import SortedManyToManyField\n\n    class Photo(models.Model):\n        name = models.CharField(max_length=50)\n        image = models.ImageField(upload_to='...')\n\n    class Gallery(models.Model):\n        name = models.CharField(max_length=50)\n        photos = SortedManyToManyField(Photo)\n\nIf you use the relation in your code like the following, it will remember the\norder in which you have added photos to the gallery. ::\n\n    gallery = Gallery.objects.create(name='Photos ordered by name')\n    for photo in Photo.objects.order_by('name'):\n        gallery.photos.add(photo)\n\n``SortedManyToManyField``\n-------------------------\n\nYou can use the following arguments to modify the default behavior:\n\n``sorted``\n~~~~~~~~~~\n\n**Default:** ``True``\n\nYou can set the ``sorted`` to ``False`` which will force the\n``SortedManyToManyField`` in behaving like Django's original\n``ManyToManyField``. No ordering will be performed on relation nor will the\nintermediate table have a database field for storing ordering information.\n\n``sort_value_field_name``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Default:** ``'sort_value'``\n\nSpecifies how the field is called in the intermediate database table by which\nthe relationship is ordered. You can change its name if you have a legacy\ndatabase that you need to integrate into your application.\n\n``base_class``\n~~~~~~~~~~~~~~\n\n**Default:** ``None``\n\nYou can set the ``base_class``, which is the base class of the through model of\nthe sortedm2m relationship between models to an abstract base class containing\na ``__str__`` method to improve the string representations of sortedm2m\nrelationships.\n\n.. note::\n\n    You also could use it to add additional fields to the through model. But\n    please beware: These fields will not be created or modified by an\n    automatically created migration. You will need to take care of migrations\n    yourself. In most cases when you want to add another field, consider\n    *not* using sortedm2m but use a ordinary Django ManyToManyField and\n    specify `your own through model`_.\n    \n.. _your own through model: https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.ManyToManyField.through\n\nMigrating a ``ManyToManyField`` to be a ``SortedManyToManyField``\n=================================================================\n\nIf you are using Django's migration framework and want to change a\n``ManyToManyField`` to be a ``SortedManyToManyField`` (or the other way\naround), you will find that a migration created by Django's ``makemigrations``\nwill not work as expected.\n\nIn order to migrate a ``ManyToManyField`` to a ``SortedManyToManyField``, you\nchange the field in your models to be a ``SortedManyToManyField`` as\nappropriate and create a new migration with ``manage.py makemigrations``.\nBefore applying it, edit the migration file and change in the ``operations``\nlist ``migrations.AlterField`` to ``AlterSortedManyToManyField`` (import it\nfrom ``sortedm2m.operations``).  This operation will take care of changing the\nintermediate tables, add the ordering field and fill in default values.\n\nAdmin\n=====\n\n``SortedManyToManyField`` provides a custom widget which can be used to sort\nthe selected items. It renders a list of checkboxes that can be sorted by\ndrag'n'drop.\n\nTo use the widget in the admin you need to add ``sortedm2m`` to your\nINSTALLED_APPS settings, like::\n\n   INSTALLED_APPS = (\n       'django.contrib.auth',\n       'django.contrib.contenttypes',\n       'django.contrib.sessions',\n       'django.contrib.sites',\n       'django.contrib.messages',\n       'django.contrib.staticfiles',\n       'django.contrib.admin',\n   \n       'sortedm2m',\n\n       '...',\n   )\n\nOtherwise it will not find the css and js files needed to sort by drag'n'drop.\n\nFinally, make sure *not* to have the model listed in any ``filter_horizontal``\nor ``filter_vertical`` tuples inside of your ``ModelAdmin`` definitions.\n\nIf you did it right, you'll wind up with something like this:\n\n.. image:: http://i.imgur.com/HjIW7MI.jpg\n\nIt's also possible to use the ``SortedManyToManyField`` with admin's\n``raw_id_fields`` option in the ``ModelAdmin`` definition. Add the name of the\n``SortedManyToManyField`` to this list to get a simple text input field. The\norder in which the ids are entered into the input box is used to sort the\nitems of the sorted m2m relation.\n\nExample::\n\n    from django.contrib import admin\n\n    class GalleryAdmin(admin.ModelAdmin):\n        raw_id_fields = ('photos',)\n\nContribute\n==========\n\nYou can find the latest development version on github_. Get there and fork it,\nfile bugs or send me nice wishes.\n\n.. _github: https://github.com/Ponytech/django-sorted-m2m\n\nRunning the tests\n-----------------\n\nI recommend to use ``tox`` to run the tests for all relevant python versions\nall at once. Therefore install ``tox`` with ``pip install tox``, then type in\nthe root directory of the ``django-sortedm2m`` checkout::\n\n   tox\n\nHowever using tox will not include the tests that run against a PostgreSQL\ndatabase. The project therefore contains a ``Vagrantfile`` that uses vagrant_\nto setup a virtual machine including a working PostgreSQL installation. To\nrun the postgres tests, please `install vagrant`_ and then run::\n\n   make test-postgres\n\nThis will bring up and provision the virtual machine and runs the testsuite\nagainst a PostgreSQL database.\n\n.. _vagrant: http://www.vagrantup.com/\n.. _install vagrant: http://www.vagrantup.com/downloads\n\nGet in touch\n------------\n\nFeel free to drop me a message about critique or feature requests. You can get\nin touch with me by mail_ or twitter_.\n\n.. _mail: mailto:hello@ponytech.net\n.. _twitter: http://twitter.com/Ponytech_net\n\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/django-sorted-m2m.svg\n   :alt: PyPI Release\n   :target: https://pypi.python.org/pypi/django-sorted-m2m\n\n.. |build-status| image:: https://travis-ci.org/Ponytech/django-sorted-m2m.png\n   :alt: Build Status\n   :target: https://travis-ci.org/Ponytech/django-sorted-m2m\n\n\nChangelog\n=========\n\n2.0.0\n-----\n\n- Drop support until Django 1.5 to 1.10\n- Drop support of python 2.6, 3.3, 3.4 & pypy\n- Add support of Django 2.0, 2.1 & 2.2\n- Add support or python 3.7\n- Huge code cleanup to remove old compatibility code\n- Add support of custom through models (only for Django >= 2.2)\n\n1.5.0\n-----\n\n* `#101`_: Add support for a custom base class for the many to many intermediate\n  class. See the README for documentation. Thank you Rohith Asrk for the patch.\n* `#87`_: Fix ``AlterSortedManyToManyField`` operation to support custom set\n  ``_sort_field_name``.\n\n.. _#101: https://github.com/gregmuellegger/django-sortedm2m/pull/101\n.. _#87: https://github.com/gregmuellegger/django-sortedm2m/issues/87\n\n1.4.0\n-----\n\n* `#104`_: Add compatibility for Django 1.10 and 1.11!\n  Thank you Frankie Dintino for the patch.\n* `#94`_: Add french translation files. Mainly for strings in the admin.\n  Thanks to ppython for the patch.\n* `#93`_: Prevent users from accidentally importing and using\n  ``ManyToManyField`` instead of ``SortedManyToManyField`` from ``sortedm2m``.\n  Thanks Dayne May for the patch.\n\n.. _#104: https://github.com/gregmuellegger/django-sortedm2m/pull/104\n.. _#94: https://github.com/gregmuellegger/django-sortedm2m/pull/94\n.. _#93: https://github.com/gregmuellegger/django-sortedm2m/pull/93\n\n1.3.3\n-----\n\n* `#91`_ & `#92`_: Fix admin widget, when used with Django 1.10. The add a new\n  item opup was not closing. Thanks to Tipuch for the patch.\n\n.. _#91: https://github.com/gregmuellegger/django-sortedm2m/issues/91\n.. _#92: https://github.com/gregmuellegger/django-sortedm2m/pull/92\n\n1.3.2\n-----\n\n* `#80`_ & `#83`_: Fix ``SortedMultipleChoiceField.clean`` if the validated\n  value is ``None``. Thanks to Alex Mannhold for the patch.\n\n.. _#80: https://github.com/gregmuellegger/django-sortedm2m/issues/80\n.. _#83: https://github.com/gregmuellegger/django-sortedm2m/pull/83\n\n1.3.1\n-----\n\n* `#57`_ & `#81`_: Fix add related object popup error prevents operation when\n  no related objects already exist. Thanks to Vadim Sikora for the fix.\n\n.. _#57: https://github.com/gregmuellegger/django-sortedm2m/issue/57\n.. _#81: https://github.com/gregmuellegger/django-sortedm2m/pull/81\n\n1.3.0\n-----\n\n* `#79`_: Use `.sortedm2m-item` selector in the widget's JavaScript code to\n  target the list items. This was previously `ul.sortedm2m li`. This improves\n  compatibility other markup that does not want to use `ul`/`li` tags. Thanks\n  to Michal Dabski for the patch.\n\n  **Note:** If you use custom markup with the JavaScript code, you need to make\n  sure that the items now have the `sortedm2m-item` class name.\n\n* `#76`_: Add support for to_field_name to SortedMultipleChoiceField. Thanks\n  to Conrad Kramer for the patch.\n\n.. _#76: https://github.com/gregmuellegger/django-sortedm2m/pull/76\n.. _#79: https://github.com/gregmuellegger/django-sortedm2m/pull/79\n\n1.2.2\n-----\n\n* `#75`_: Fix \"add another\" admin popup. It didn't refresh the list of items in Django\n  1.8+. Thanks to Vadim Sikora for the patch.\n\n.. _#75: https://github.com/gregmuellegger/django-sortedm2m/pull/75\n\n1.2.1\n-----\n\n* *skipped*\n\n1.2.0\n-----\n\n* Dropping Python 3.2 support. It has reached end of life in February 2016.\n\n1.1.2\n-----\n\n* `#71`_: Don't break collectstatic for some cases. Therefore we removed the\n  STATIC_URL prefix from the form media definition in\n  ``SortedCheckboxSelectMultiple``. Thanks to Kirill Ermolov for the\n  patch.\n\n.. _#71: https://github.com/gregmuellegger/django-sortedm2m/issues/71\n\n1.1.1\n-----\n\n* `#70`_: CSS fix for Django 1.9 new admin design. Thanks to Maarten Draijer\n  for the patch.\n\n.. _#70: https://github.com/gregmuellegger/django-sortedm2m/pull/70\n\n1.1.0\n-----\n\n* `#59`_, `#65`_, `#68`_: Django 1.9 support. Thanks to Scott Kyle and Jasper Maes for\n  patches.\n* `#67`_: Support for disabling migrations for some models, that can be\n  decided by Django's DB router (with the ``allow_migrate_model`` method).\n  Thanks to @hstanev for the patch.\n\n.. _#59: https://github.com/gregmuellegger/django-sortedm2m/pull/59\n.. _#65: https://github.com/gregmuellegger/django-sortedm2m/pull/65\n.. _#67: https://github.com/gregmuellegger/django-sortedm2m/pull/67\n.. _#68: https://github.com/gregmuellegger/django-sortedm2m/pull/68\n\n1.0.2\n-----\n\n* `#56`_: Fix bug where order is wrong after adding objects. That had to do\n  with using the ``count`` of the m2m objects for the next ``sort_value``\n  value. We now use the corret ``Max`` aggregation to make sure that newly\n  added objects will be in order. Thanks to Scott Kyle for the report and\n  patch.\n\n.. _#56: https://github.com/gregmuellegger/django-sortedm2m/pull/56\n\n1.0.1\n-----\n\n* Performance fix for sorted m2m admin widget. See `#54`_ for details. Thanks\n  to Jonathan Liuti for fixing this.\n\n.. _#54: https://github.com/gregmuellegger/django-sortedm2m/pull/54\n\n1.0.0\n-----\n\n* Hooray, we officially declare **django-sortedm2m** to be stable and\n  promise to be backwards compatible to new releases (we already doing good\n  since since the beginning in that regard).\n* Django 1.8 support for ``AlterSortedManyToManyField`` operation. Thanks to\n  Nicolas TrÃ©segnie for starting the implementation.\n\n0.10.0\n------\n\n* The creation of the sortedm2m intermediate model and database table is now\n  fully done inside of the ``SortedManyToManyField`` class. That makes it much\n  easier to modify the creation of this when creating a custom subclass of this\n  field. See `#49`_ for an example usecase.\n* Adding support for the custom field arguments like ``sorted`` and\n  ``sort_value_field_name`` in Django 1.7 migrations. Thanks to Christian\n  Kohlstedde for the patch.\n\n.. _#49: https://github.com/gregmuellegger/django-sortedm2m/issues/49\n\n0.9.5\n-----\n\n* Fixing ``setup.py`` when run on a system that does not use UTF-8 as default\n  encoding. See `#48`_ for details. Thanks to Richard Mitchell for the patch.\n\n.. _#48: https://github.com/gregmuellegger/django-sortedm2m/pull/48\n\n0.9.4\n-----\n\n* Fix: ``SortedMultipleChoiceField`` did not properly report changes of the\n  data to ``Form.changed_data``. Thanks to @smcoll for the patch.\n\n0.9.3\n-----\n\n* Fix: ``AlterSortedManyToManyField`` operation failed for postgres databases.\n* Testing against MySQL databases.\n\n0.9.2\n-----\n\n* Fix: ``AlterSortedManyToManyField`` operation failed for many to many fields\n  which already contained some data.\n\n0.9.1\n-----\n\n* Fix: When using the sortable admin widget, deselecting an item in the list\n  had not effect. Thank you to madEng84 for the report and patch!\n\n0.9.0\n-----\n\n* Adding ``AlterSortedManyToManyField`` migration operation that allows you to\n  migrate from ``ManyToManyField`` to ``SortedManyToManyField`` and vice\n  versa. Thanks to JoaquÃ­n PÃ©rez for the patch!\n* Fix: Supporting migrations in Django 1.7.4.\n* Fix: The admin widget is not broken anymore for dynamically added inline\n  forms. Thanks to RubÃ©n DÃ­az for the patch!\n\n0.8.1\n-----\n\n* Adding support for Django 1.7 migrations. Thanks to Patryk Hes and Richard\n  Barran for their reports.\n* Adding czech translations. Thanks to @cuchac for the pull request.\n\n0.8.0\n-----\n\n* Adding support for Django 1.7 and dropping support for Django 1.4.\n\n0.7.0\n-----\n\n* Adding support for ``prefetch_related()``. Thanks to Marcin Ossowski for\n  the idea and patch.\n\n0.6.1\n-----\n\n* Correct escaping of *for* attribute in label for the sortedm2m widget. Thanks\n  to Mystic-Mirage for the report and fix.\n\n0.6.0 \n-----\n\n* Python 3 support!\n* Better widget. Thanks to Mike Knoop for the initial patch.\n\n0.5.0\n-----\n\n* Django 1.5 support. Thanks to Antti Kaihola for the patches.\n* Dropping Django 1.3 support. Please use django-sortedm2m<0.5 if you need to\n  use Django 1.3.\n* Adding support for a ``sort_value_field_name`` argument in\n  ``SortedManyToManyField``. Thanks to Trey Hunner for the idea.\n\n0.4.0\n-----\n\n* Django 1.4 support. Thanks to Flavio Curella for the patch.\n* south support is only enabled if south is actually in your INSTALLED_APPS\n  setting. Thanks to tcmb for the report and Florian Ilgenfritz for the patch.\n\n0.3.3\n-----\n\n* South support (via monkeypatching, but anyway... it's there!). Thanks to\n  Chris Church for the patch. South migrations won't pick up a changed\n  ``sorted`` argument though.\n\n0.3.2\n-----\n\n* Use already included jQuery version in global scope and don't override with\n  django's version. Thank you to Hendrik van der Linde for reporting this\n  issue.\n\n0.3.1\n-----\n\n* Fixed packaging error.\n\n0.3.0\n-----\n\n* Heavy internal refactorings. These were necessary to solve a problem with\n  ``SortedManyToManyField`` and a reference to ``'self'``.\n\n0.2.5\n-----\n\n* Forgot to exclude debug print/console.log statements from code. Sorry.\n\n0.2.4\n-----\n\n* Fixing problems with ``SortedCheckboxSelectMultiple`` widget, especially in\n  admin where a \"create and add another item\" popup is available.\n\n0.2.3\n-----\n\n* Fixing issue with primary keys instead of model instances for ``.add()`` and\n  ``.remove()`` methods in ``SortedRelatedManager``.\n\n0.2.2\n-----\n\n* Fixing validation error for ``SortedCheckboxSelectMultiple``. It caused\n  errors if only one value was passed.\n\n0.2.1\n-----\n\n* Removed unnecessary reference of jquery ui css file in\n  ``SortedCheckboxSelectMultiple``. Thanks to Klaas van Schelven and Yuwei Yu\n  for the hint.\n\n0.2.0\n-----\n\n* Added a widget for use in admin.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ponytech/django-sorted-m2m",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sorted-m2m",
    "package_url": "https://pypi.org/project/django-sorted-m2m/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-sorted-m2m/",
    "project_urls": {
      "Homepage": "https://github.com/Ponytech/django-sorted-m2m"
    },
    "release_url": "https://pypi.org/project/django-sorted-m2m/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Drop-in replacement for django's many to many field with sorted relations.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5380490,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ee979336f19bc3b4e1a235fbd5c40d4c14c3bd456d40ab67eb19a2599c23268",
        "md5": "e15f4429b4b094f6c9083d14e78a7fc4",
        "sha256": "f0dcdccd20c0ecf3c70a1cca3c0914c8240dff3d19b6af8e8200c4c912564f90"
      },
      "downloads": -1,
      "filename": "django-sorted-m2m-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e15f4429b4b094f6c9083d14e78a7fc4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30969,
      "upload_time": "2019-06-10T09:26:56",
      "upload_time_iso_8601": "2019-06-10T09:26:56.423014Z",
      "url": "https://files.pythonhosted.org/packages/2e/e9/79336f19bc3b4e1a235fbd5c40d4c14c3bd456d40ab67eb19a2599c23268/django-sorted-m2m-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}