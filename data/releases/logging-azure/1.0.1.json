{
  "info": {
    "author": "Joshua Logan",
    "author_email": "joshua@matcha.wine",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Python Logging Azure Workspace OMS Extension\n\n[![Python](https://img.shields.io/pypi/pyversions/logging-azure.svg)](https://pypi.python.org/pypi/logging-azure)\n[![Version](http://img.shields.io/pypi/v/logging-azure.svg)](https://pypi.python.org/pypi/logging-azure)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nThis package provides an asynchronous solution for uploading application logs to an Azure Log Workspace using their\nprovided REST API, all supplied as a handler and service extension for python builtin `logging` module.\n\nThe service works by instantiating an always-alive (non-daemonized) thread connected to a log request pool in which\nlogs will be queued, then periodically running through the pool in order to send the requests asynchronously in bulk\nusing the `grequests` package. This is all to intend logging safely without interrupting or slowing down the main\nprocess execution as transparently as possible.\n\n## Installation\n\nFor installing via the distributed package via PyPi:\n\n`$ pip install logging-azure`\n\nOr if you which to install from the source, you can checkout the git repository and install using `setuptools`:\n\n`$ python setup.py install`\n\n### Special conditions\n\n#### Installing GEvent\n\nIf you require using this package within a docker distributed application image for example, you will\nbe required to have an available compiler and necessary libraries in order to build `cython` and `gevent` needed for\n`grequests` to run.\n\nIf using an Alpine image for example, this can be accomplished with the following:\n\n```dockerfile\nFROM python:3.7.4-alpine3.9\n\n# Install required dependencies for building like git etc.\nRUN apk add --virtual .build-dep build-base [...]\n\n# Install the python package\nRUN pip install --no-cache-dir logging-azure\n\n# Cleanup no-longer required dependencies for a lighter image\nRUN apk del .build-dep\n```\n\n#### GEvent monkey patching ssl\n\nAs this package leverages the `grequests` package, which itself uses `gevent`, in several cases,\nlike running in a debug Flask server, you may need to monkey patch `gevent` for things to work correctly.\n\nFor this you just need to run the following **as early as possible** within your application:\n\n```python\nfrom gevent import monkey\n\nmonkey.patch_all()\n```\n\nUsually, you are warned by `gevent` itself when running your application if this is needed or not done early enough,\nso it shouldn't be hard to miss.\n\n## Usage\n\n### Package Configuration\n\nThe following environment variables are read to configure the extension and are required:\n\n- `AZURE_LOG_CUSTOMER_ID`: Customer ID for the Azure Log Workspace\n- `AZURE_LOG_SHARED_KEY`: Customer shared key for the Azure Log Workspace\n- `AZURE_LOG_DEFAULT_NAME`: The default \"log type\" name to indicate where the logs are stored.\nThis will be suffixed with \"_CL\" within the Azure Log Workspace.\n\nThe following environment variables are read to tweak some parameters of the extension,\nthey all have default values and therefore are optional:\n\n- `AZURE_LOG_MAX_CONCURRENT_REQUESTS`: *Default: 10* The maximum number of asyncronous requests to handle at once.\nUsed by `grequests`\n- `AZURE_LOG_SEND_FREQUENCY`: *Default: 5* How many seconds the service thread should wait before sending pooled logs.\n\n### Logging Configuration\n\nAs you would any other handler, you only require to define a handler using the\n`logging_azure.handler.AzureLogServiceHandler` class:\n\n```python\n[...]\n    \"handlers\": {\n        \"console\": {\"level\": logging.DEBUG, \"class\": \"logging.StreamHandler\", \"formatter\": \"colorize\"},\n        \"azure_log_oms\": {\n            \"level\": logging.INFO, \"class\": \"logging_azure.handler.AzureLogServiceHandler\", \"formatter\": \"azure\"\n        },\n        \"default\": {\"level\": logging.INFO, \"class\": \"logging.StreamHandler\", \"formatter\": \"default\"},\n    },\n[...]\n```\n\nThen add the handler to your selected logger instance:\n\n```python\n[...]\n    \"loggers\": {\n        LOGGER_NAME: {\n            \"handlers\": [\"console\"] if IS_LOCAL_DEV_INSTANCE else [\"default\", \"azure_log_oms\"],\n            \"level\": LOG_LEVEL,\n            \"propagate\": True,\n        }\n    },\n[...]\n```\n\n## Recommendations\n\n### Set an appropriate log level minimum\n\nIn order to prevent additional cost from Azure Log OMS ingestion for talkative applications, it is recommended to set\nan adequate LOG_LEVEL for your application (avoid `logging.DEBUG` for example).\n\nIt is also recommended to configure your loggers appropriately so the `AzureLogServiveHandler` isn't used during\nlocal development or CI environments for example.\n\nYou are warned.\n\n### Set a clear formatter for messages\n\nThis package supplies a decent amount of information already to complement the message in a clean way by reading the\nlog record in order to facilitate Azure Log OMS Queries and ingestion, so you may only require using a specific\nformatter that will only format the `message` itself as follows:\n\n```python\n[...]\n    \"formatters\": {\n        \"default\": {\n            \"format\": '[%(asctime)s] %(levelname)s %(name)s %(module)s \"%(message)s\"',\n            \"datefmt\": \"%d/%b/%Y %H:%M:%S\",\n        },\n        \"azure\": {\n            \"format\": '%(message)s',\n        },\n[...]\n```\n\nThis provides the following output within the Azure Portal for example:\n\n![AzureLogOMSExample](resources/log_azure_example.jpg)\n\nThis allows for easily creating custom queries and alerts for your application directly from the Azure Log OMS\nsolution.\n\n## Useful links\n\n- [Create a Log Analytics workspace in the Azure portal](https://docs.microsoft.com/en-us/azure/azure-monitor/learn/quick-create-workspace)\n- [Create a Log Analytics workspace with Azure CLI 2.0](https://docs.microsoft.com/en-us/azure/azure-monitor/learn/quick-create-workspace-cli)\n- [Manage access to log data and workspaces in Azure Monitor](https://docs.microsoft.com/en-us/azure/azure-monitor/platform/manage-access)\n- [Azure Monitor pricing](https://azure.microsoft.com/en-us/pricing/details/monitor/)\n\n### Package requirements\n\n- [grequests](https://github.com/spyoungtech/grequests)\n- [gevent](https://github.com/gevent/gevent)\n- [cython](https://github.com/cython/cython)\n- [injector](https://github.com/alecthomas/injector)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matchawine/logging-azure",
    "keywords": "utils",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logging-azure",
    "package_url": "https://pypi.org/project/logging-azure/",
    "platform": "",
    "project_url": "https://pypi.org/project/logging-azure/",
    "project_urls": {
      "Homepage": "https://github.com/matchawine/logging-azure"
    },
    "release_url": "https://pypi.org/project/logging-azure/1.0.1/",
    "requires_dist": [
      "injector (>=0.18.2)",
      "cython (>=0.29.14)",
      "grequests (>=0.4.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "A python async logging handler and service extension for Azure Log Workspace OMS.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6338174,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd781c39830d7e3188029df379bd83165ef299a6814ac7824a661bfd67899aa2",
        "md5": "a32c9dd84e305927b1195f6d9b258c67",
        "sha256": "70934c3f388933d7c236df6fc48424fc44ab014cf11cfb6ab52fbc5349d4202b"
      },
      "downloads": -1,
      "filename": "logging_azure-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a32c9dd84e305927b1195f6d9b258c67",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 20768,
      "upload_time": "2019-12-18T14:08:30",
      "upload_time_iso_8601": "2019-12-18T14:08:30.100818Z",
      "url": "https://files.pythonhosted.org/packages/fd/78/1c39830d7e3188029df379bd83165ef299a6814ac7824a661bfd67899aa2/logging_azure-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "302b9983dd35f279391a192c4b0ad7982506d46898894dd946feb0f86c305960",
        "md5": "b53d50fed4a1f0de8ba94452b4030bc4",
        "sha256": "deae3ced82b645e2badfa50629b9104be65f811bc91e86d0ed800921e63f82ac"
      },
      "downloads": -1,
      "filename": "logging-azure-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b53d50fed4a1f0de8ba94452b4030bc4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21187,
      "upload_time": "2019-12-18T14:08:31",
      "upload_time_iso_8601": "2019-12-18T14:08:31.786779Z",
      "url": "https://files.pythonhosted.org/packages/30/2b/9983dd35f279391a192c4b0ad7982506d46898894dd946feb0f86c305960/logging-azure-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}