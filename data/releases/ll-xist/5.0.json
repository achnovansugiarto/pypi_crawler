{
  "info": {
    "author": "Walter Doerwald",
    "author_email": "walter@livinglogic.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: No Input/Output (Daemon)",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Topic :: Database",
      "Topic :: Internet",
      "Topic :: Internet :: File Transfer Protocol (FTP)",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: Site Management",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Terminals",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Markup :: HTML",
      "Topic :: Text Processing :: Markup :: XML"
    ],
    "description": "XIST provides an extensible HTML and XML generator. XIST is also a XML parser\nwith a very simple and pythonesque tree API. Every XML element type corresponds\nto a Python class and these Python classes provide a conversion method to\ntransform the XML tree (e.g. into HTML). XIST can be considered\n'object oriented XSLT'.\n\nXIST also includes the following modules and packages:\n\n* ``ll.ul4c`` is compiler for a cross-platform templating language with\n  similar capabilities to `Django's templating language`__. ``UL4`` templates\n  are compiled to an internal format, which makes it possible to implement\n  template renderers in other languages and makes the template code \"secure\"\n  (i.e. template code can't open or delete files).\n\n  __ https://docs.djangoproject.com/en/1.5/topics/templates/\n\n  There are implementations for Python, Java, Javascript and PHP.\n\n* ``ll.ul4on`` provides functions for encoding and decoding a lightweight\n  machine-readable text-based format for serializing the object types supported\n  by UL4. It is extensible to allow encoding/decoding arbitrary instances\n  (i.e. it is basically a reimplementation of ``pickle``, but with string\n  input/output instead of bytes and with an eye towards cross-plattform\n  support).\n\n  There are implementations for Python, Java, Javascript and PHP.\n\n* ``ll.orasql`` provides utilities for working with cx_Oracle_:\n\n  - It allows calling functions and procedures with keyword arguments.\n\n  - Query results will be put into Record objects, where database fields\n    are accessible as object attributes.\n\n  - The ``Connection`` class provides methods for iterating through the\n    database metadata.\n\n  - Importing the modules adds support for URLs with the scheme ``oracle`` to\n    ``ll.url``.\n\n  .. _cx_Oracle: http://cx-oracle.sourceforge.net/\n\n* ``ll.make`` is an object oriented make replacement. Like make it allows\n  you to specify dependencies between files and actions to be executed\n  when files don't exist or are out of date with respect to one\n  of their sources. But unlike make you can do this in a object oriented\n  way and targets are not only limited to files.\n\n* ``ll.color`` provides classes and functions for handling RGB color values.\n  This includes the ability to convert between different color models\n  (RGB, HSV, HLS) as well as to and from CSS format, and several functions\n  for modifying and mixing colors.\n\n* ``ll.sisyphus`` provides classes for running Python scripts as cron jobs.\n\n* ``ll.url`` provides classes for parsing and constructing RFC 2396\n  compliant URLs.\n\n* ``ll.nightshade`` can be used to serve the output of PL/SQL\n  functions/procedures with CherryPy__.\n\n* ``ll.misc`` provides several small utility functions and classes.\n\n* ``ll.astyle`` can be used for colored terminal output (via ANSI escape\n  sequences).\n\n* ``ll.daemon`` can be used on UNIX to fork a daemon process.\n\n* ``ll.xml_codec`` contains a complete codec for encoding and decoding XML.\n\n__ http://www.cherrypy.org/\n\n\nChanges in 5.0 (released 06/04/2013)\n------------------------------------\n\n* The HTML namespace (``ll.xist.ns.html``) has been updated to support the\n  current HTML5__ definition.\n\n  __ http://www.w3.org/TR/2012/CR-html5-20121217/\n\n  However old elements/attributes from the previous HTML namespace are still\n  supported.\n\n* XIST now allows arbitrary elements and attributes. ``ll.xist.parse`` will\n  parse any XML file, even if the pool object doesn't contain an element for\n  the element name, and even if an attribute name isn't declared for an element.\n\n  Undeclared elements will be \"plain\" instances of ``ll.xist.xsc.Element``\n  (i.e. not instances of a subclass of ``ll.xist.xsc.Element``) with the\n  attributes ``xmlns`` and ``xmlname`` set accordingly and undeclared\n  attributes will be \"plain\" instances of ``ll.xist.xsc.Attr`` (with\n  proper ``xmlns`` and ``xmlname`` attributes).\n\n  This new feature requires several API changes which will be described below.\n\n* Validation is now off by default, to turn it on pass ``validate=True`` to\n  ``parse.tree`` or ``parse.itertree`` for parsing, or the publisher\n  object or the ``bytes``, ``iterbytes``, ``string`` or\n  ``iterstring`` methods for publishing.\n\n* Accessing an attribute via ``__getattr__`` (i.e.\n  ``htmlelement.attrs.class_``) only works for attributes that are declared\n  for the class, all other attributes must be accessed via ``__getitem__``\n  (i.e. ``htmlelement.attrs[\"class\"]``). ``__getitem__`` always requires\n  the XML name of the attribute. ``__getitem__`` also allows an attribute\n  name for a global attribute in Clark notation (i.e.\n  ``htmlelement.attrs[\"{http://www.w3.org/XML/1998/namespace}lang\"]``). A global\n  attribute can also be accessed via a (namespace name, attribute name) tuple\n  (i.e. ``htmlelement.attrs[(\"http://www.w3.org/XML/1998/namespace\", \"lang\")]``).\n  Using an attribute class or attribute object is also possible (i.e.\n  ``htmlelement.attrs[xml.Attr.lang]`` or\n  ``htmlelement.attrs[xml.Attr.lang('de')]``).\n\n* Using ``__setattr__`` to set attributes only works for declared attributes\n  too. Using ``__setitem__`` to set attributes supports the same kind of\n  arguments as ``__getitem__`` does. For declared attributes the resulting\n  attribute object will always be an instance of the declared attribute class.\n  For all other attributes it will be an instance of ``ll.xist.xsc.Attr``\n  except when an attribute class or instance is used as the key. In this case\n  the attribute will be an instance of that class.\n\n* The methods ``convert``, ``clone``, ``__copy__``,\n  ``__deepcopy__``, ``compacted``, ``withsep``, ``reversed``,\n  ``filtered``, ``shuffled``, ``mapped`` and ``normalized``\n  make sure that plain nodes are copied properly, i.e. they retain their custom\n  ``xmlns`` and ``xmlname`` attributes.\n\n* The keys in an attribute dictionary (i.e. an ``ll.xist.xsc.Attrs``\n  object) are no longer the attribute classes, but the (namespace name,\n  attribute name) tuples::\n\n    >>> node = html.div({xml.Attrs.lang: 'de'}, id='id42', class_='foo')\n    >>> list(node.attrs.keys())\n    [('http://www.w3.org/XML/1998/namespace', 'lang'),\n     (None, 'class'),\n     (None, 'id')]\n\n* For all methods that existed in Python/XML pairs (e.g. ``withnames`` and\n  ``withnames_xml`` in ``xsc.Attrs`` or ``elementclass`` and\n  ``elementclass_xml`` in ``xsc.Pool`` etc.) there is only one version\n  now: A method without the ``_xml`` suffix that accepts the XML version of the\n  name.\n\n* The method ``checkvalid`` has been renamed to ``validate``. It no\n  longer calls ``warnings.warn`` itself, but is a generator that returns\n  the warning objects. Furthermore the ``model`` objects now get passed the\n  complete path instead of only the target node (this is used to implement\n  HTML5's transparent content model).\n\n* Validating whether an attribute is allowed is now done in\n  ``Attrs.validateattr``. The default implementation yields warnings about\n  undeclared local attributes. The HTML5 namespace extends this to also accept\n  any attribute whose name starts with ``data-`` or ``aria-``.\n\n* Node comparison now ignores the classes for elements, entities and processsing\n  instructions, so that plain nodes compare equal to instances of\n  ``Element``, ``Entity`` or ``ProcInst`` subclasses as long\n  as the name and content of the node matches.\n\n* ``ll.xist.parse.Tidy`` no longer has a ``skipbad`` argument.\n\n* Converter contexts now support string as keys (which must be hierarchical\n  dot-separated names similar to Java package names (e.g.\n  ``\"org.example.project.handler\"``) to avoid name collisions).\n\n* The ``docbook`` module has been updated to support DocBook 5.0.\n\n* ``URL`` objects are pickable now.\n\n* When whitespace is removed in the literal text of UL4 templates (via the\n  ``keepws`` parameter), any initial spaces (before the first line feed) are\n  now no longer removed.\n\n* If you have Cython__ installed and the environment variable ``LL_USE_CYTHON``\n  set, several modules will now be compiled into extension modules.\n\n  __ http://www.cython.org/\n\n* It's now possible to expose attributes and methods of objects to UL4\n  templates. Exposing attributes can be done by setting a class or instance\n  attribute ``ul4attrs`` to a sequence of attribute names. Exposing methods can\n  be done with the decorators ``ul4c.expose_method`` and\n  ``ul4c.expose_generatormethod``.\n\n* A new UL4 function ``list`` has been added. This function works like the\n  Python function ``list``, creating a copy of a sequence or materialzing\n  an iterator.\n\n* A new UL4 function ``slice`` has been added. It works like\n  ``itertools.slice``, i.e. returning a slice from an iterator.\n\n* The function ``html.astext`` that converts an XIST tree containing HTML\n  to plain text is now implemented in plain Python so it no longer requires\n  a text mode browser. The function also got more configurable.\n\n* The objects available to ``db2ul4`` scripts have been changed: ``oracle``,\n  ``sqlite`` and ``mysql`` are now objects with a ``connect`` method that\n  returns a connection object. A connection object now has a method ``query``\n  that executes the query and returns an iterator over the results. Furthermore\n  ``query`` supports keyword arguments for parameterized queries, i.e. you\n  can now do::\n\n    <?code db = oracle.connect(\"user/pwd@db\")?>\n    <?for row in db.query(\"select * from foo where bar = :bar\", bar=42)?>\n      <?print row?>\n    <?end for?>\n\n  The ``system`` object now has an ``execute`` method that executes the system\n  command.\n\n* Fixed a bug in ``orasql.OracleFileResource.close`` that surfaced when\n  writing to on Oracle object.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://www.livinglogic.de/Python/Download.html#xist",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.livinglogic.de/Python/xist/",
    "keywords": "ANSI,CSS,CherryPy,FTP,HLS,HSB,HSC,HSV,HTML,HTTP,Oracle,PI,PL/SQL,RFC 2396,RGB,Relax NG,SVG,UNIX,URL,WML,XHTML,XML,XSL-FO,XSLT,build,codec,color,cron,cx_Oracle,daemon,decorator,escape sequence,execnet,fork,iHTML,iterator,job,make,procedure,processing instruction,property,record,schema,ssh,template,templating language,terminal,toxic,user defined function",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "ll-xist",
    "package_url": "https://pypi.org/project/ll-xist/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ll-xist/",
    "project_urls": {
      "Download": "http://www.livinglogic.de/Python/Download.html#xist",
      "Homepage": "http://www.livinglogic.de/Python/xist/"
    },
    "release_url": "https://pypi.org/project/ll-xist/5.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Extensible HTML/XML generator, cross-platform templating language, Oracle utilities and various other tools",
    "version": "5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17113051,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4661060629cb38c6b45dcf91be061608ba8dfb76d1a400dce604077144f2924",
        "md5": "654056b308da36fec8775007c091027e",
        "sha256": "91ebc0a9c022f8c526088cc0d25eef724952c00211404c7cc46369e82a907240"
      },
      "downloads": -1,
      "filename": "ll_xist-5.0-py3.3-macosx-10.7-x86_64.egg",
      "has_sig": false,
      "md5_digest": "654056b308da36fec8775007c091027e",
      "packagetype": "bdist_egg",
      "python_version": "3.3",
      "requires_python": null,
      "size": 1528848,
      "upload_time": "2013-06-04T14:33:22",
      "upload_time_iso_8601": "2013-06-04T14:33:22.499858Z",
      "url": "https://files.pythonhosted.org/packages/f4/66/1060629cb38c6b45dcf91be061608ba8dfb76d1a400dce604077144f2924/ll_xist-5.0-py3.3-macosx-10.7-x86_64.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c6c4e5f67094f6699c5e735b99f7eb5802b57d79286b003772b546d1a4cf2f6",
        "md5": "46692d61dc172a7a00feb70de36f7eee",
        "sha256": "a9b72f410fe90ab0869bbf4df20989a17fcce87a7b64cd90a1afda34a9dad349"
      },
      "downloads": -1,
      "filename": "ll-xist-5.0.tar.bz2",
      "has_sig": false,
      "md5_digest": "46692d61dc172a7a00feb70de36f7eee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 488401,
      "upload_time": "2013-06-04T14:33:04",
      "upload_time_iso_8601": "2013-06-04T14:33:04.262239Z",
      "url": "https://files.pythonhosted.org/packages/7c/6c/4e5f67094f6699c5e735b99f7eb5802b57d79286b003772b546d1a4cf2f6/ll-xist-5.0.tar.bz2",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53d0d6544c0bea8873fb9003ad5d59d59806ae2c18d61df980777916458ee48a",
        "md5": "4baea9ee26418f718797e9d7e482a866",
        "sha256": "c8bf8698a3d3f468787e4a687e15e65e74dd5c30eeda4f0c759572d6ebf52d07"
      },
      "downloads": -1,
      "filename": "ll-xist-5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4baea9ee26418f718797e9d7e482a866",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 580666,
      "upload_time": "2013-06-04T14:33:08",
      "upload_time_iso_8601": "2013-06-04T14:33:08.228425Z",
      "url": "https://files.pythonhosted.org/packages/53/d0/d6544c0bea8873fb9003ad5d59d59806ae2c18d61df980777916458ee48a/ll-xist-5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08a71e20aac26055463144f2901e76ba3c624e33ebbe648843e174e452235daa",
        "md5": "938bf88e1b8aca8b7b176a6d98ff5326",
        "sha256": "3e3d40f050dc264e1a4387df9e288829cf913f7a14e80b2844739396566c7d17"
      },
      "downloads": -1,
      "filename": "ll-xist-5.0.zip",
      "has_sig": false,
      "md5_digest": "938bf88e1b8aca8b7b176a6d98ff5326",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 682135,
      "upload_time": "2013-06-04T14:33:15",
      "upload_time_iso_8601": "2013-06-04T14:33:15.495953Z",
      "url": "https://files.pythonhosted.org/packages/08/a7/1e20aac26055463144f2901e76ba3c624e33ebbe648843e174e452235daa/ll-xist-5.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}