{
  "info": {
    "author": "DAVIDhaker",
    "author_email": "me@davidhaker.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django :: 2",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Natural Language :: English",
      "Natural Language :: Russian",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: Session"
    ],
    "description": "# Django SSO (Single Sign-On) [Beta]\n\nRealization of Single Sign-On for Django.\n\nSupported Django versions:\n\n- `3.*`\n- `4.*`\n\n*Recommended to force specify package version while installing package, this is for security and compatibility reasons.*\n\n\n\n## How it works?\n\nYou should install this library to Django-project, that you planning will the authorization gateway (will keep all user accounts). Then add this library to services wich you wanna to authenticate via SSO gateway and thats all!\n\n\n\n## Installation\n\n### Server side\n\n1) Add to `INSTALLED_APPS` variable the module named `django_sso`.`gateway`\n\n```python\n# project/settings.py\nINSTALLED_APPS = [\n    # ...\n    'django_sso.sso_gateway',\n]\n```\n\n\n\n2) Migrate the gateway models\n\n```python\n./manage.py migrate sso_gateway\n```\n\n\n\n3) Add urls to project:\n\n```python\n# project/urls.py\n\nurlpatterns = [\n\t# ...,\n\tpath('', include('django_sso.sso_gateway.urls')),\n]\n```\n\n\n\n4) In the admin panel you can see now new section, named `SINGLE SIGN-ON`. And in `Subordinated services` you should be create new. With next fields:\n\n- `Name` - Human name of service\n- `Base url` - URL for redirects and access to service endpoints from server side. (Like https://your-service.example).\n- `Enabled` - Are Subordinated service active. (Inactive services can’t communicate with server side and server side can’t communicate with it)\n- `Token` - Automatically generated token you should past to `settings.py ` to your service to `SSO_TOKEN` variable.\n\nThen server side is ready to use!\n\n\n\n##### Optional settings\n\nYou also can provide the timeout of communication with subordinated services via variable in **settings.py**  named as `SSO_SUBORDINATE_COMMUNICATION_TIMEOUT`. This is timeout in seconds. Default value is 0.1s (100ms) per one service.\n\n\n\n### Client side\n\nWhen library attached to client side project. Admin login form will overridden with same view as `login/` in client side.\n\n1) Add `django_sso`.`sso_service` to `INSTALLED_APPS` \n\n```python\n# project/settings.py\nINSTALLED_APPS = [\n    # ...\n    'django_sso.sso_service',\n]\n```\n\n\n\n2) Add urls to service application\n\n```python\n# project/urls.py\n\nurlpatterns = [\n    # ...,\n    path('', include('django_sso.sso_service.urls')),    \n]\n```\n\n\n\n3) Setup settings variables\n\n```python\n# project/settings.py\n\n# Django variable. URL for unlogged users. We redirect it to our view.\nLOGIN_URL = '/login/'\n\n# Specify SSO server base url\nSSO_ROOT = 'https://sso.project.test'\n\n# Specify application token obtained in SSO server in the admin panel\nSSO_TOKEN = 'reej8Vt5kbCPJM9mZQqYsvfxC...'\n\n# Overriding event acceptor class (OPTIONAL). For more details read \"Overriding event acceptor in subordinated service\" partition\nSSO_EVENT_ACCEPTOR_CLASS = 'project.my_overrides.MySSOEventAcceptor'\n```\n\n\n\n## Structure\n\n#### Server side urls\n\n- `login/` - central login form (you can override template `django_sso/login.html`) \n- `logout/` - central logout view. Clear all sessions on all resources for user\n\nInternal library urls (endpoints for services):\n\n- `sso/obtain/` - obtain <u>authorization request</u>\n- `sso/get/` - get SSO token information. (Is authorized for this token? Get user identity from token. etc..)\n- `sso/make_used/` - after successful authentication on client side need to mark authorization request as used.\n- `sso/deauthenticate/` - services sends deauthentication requests to SSO-server. SSO server broadcasts all services to deauthenticate user\n- `__welcome/` - sample view for testing. For logged and unlogged users.\n\n\n\n#### Client side urls\n\n- `login/` - login form. Intermediate form. Obtains authentication request, and redirects to SSO server `/login`. \n- `logout/` - Does deauthenticate user and cast deauthentication event to SSO-server (to `sso/deauthenticate/` on server side).\n- `sso/test/` - Page for test SSO mechanism immediately after install `django_sso`. When you open it in browser: If user are logged in - shows his name or redirect to SSO server and comes back after successful authentication.\n\nLibrary urls for internal usage (endpoints for SSO-server side)\n\n- `sso/event/` - Event acceptor from SSO server. Look to “**SSO with non-Django project / Accepting events**” section\n\n- `sso/accept/` - User after successful authentication comes back. SSO-server redirect it to this URL for make Django authorization. Then after session is up - browser will redirect to the next URL.\n\n\n\n## Overriding\n\n### User and session storage\n\nThis library based on Django user subsystem and Django session subsystem. Also supports custom classes, but he must be based on classical Django classes (AbstractUser / AbstractBaseUser, etc..). This means that you have two ways. One: Do nothing, just install library to gateway/services and just use it. Two: Just pick own classes of user/session with based Django`s mechanisms.\n\n\n\n### Overriding event acceptor in subordinated service\n\nFor event processing you must declare own class and inherit it from base class located in `django_sso.sso_service.backends.EventAcceptor`. Inheritance are necessary. Arguments must  absolutely matches for overridden methods. \n\n```python\n# project/my_overrides.py\nfrom django_sso.sso_service.backends import EventAcceptor\n\n# In case, when you need to do something after deauthentication\nclass MyEventAcceptor(EventAcceptor):\n    def deauthenticate(self, username):\n        super().deauthenticate(usernmae)\n        # Here you can do own actions after deauthentication\n\n        \n# In other case, when you need to override default behavior of class\nclass MyHardEventAcceptor(EventAcceptor):\n    def deauthenticate(self, username):\n        # Here you do own actions\n```\n\n\n\nThen next put path to this class to `settings.py`:\n\n```python\nSSO_EVENT_ACCEPTOR_CLASS = 'project.my_overrides.MySSOEventAcceptor'\n```\n\n\n\n## Debug & develop letter\n\nAll exceptions in SSO mechanism will be logged in console.\n\n\n\nOften occurs error, when developer running gateway and services on same host that is unworkable situation. When it's happens - one service drops others cookies. For developing/runing on one machine multiple services you should separate by hosts. Write in your **hosts file** lines like next:\n\n```hosts\n127.0.0.1\tsso_gateway\n127.0.0.1\tmy_sso_service_1\n127.0.0.1\tmy_sso_service_2\n```\nIf after success authentication on the SSO-gateway system can't send event to subordinated service\n\n\n\nIf after redirect back to service after authorization in gateway occurs any error, user will redirected url `/?sso_broken_token=true` on subordinated service. \n\n\n\nIf user redirected from subordinated service to gateway and successfully authorized on it but the gateway catch error while casting event - user will redirect to gateway page with url `/__welcome/fallback=true`.\n\n# SSO with non-Django project\n\n### Basics\n\nAny external service must be registered in SSO server in admin panel section named  `SINGLE SIGN-ON / Subordinated services`. Then obtained token put to your script for next calls. And make service available directly for SSO server.\n\nIn next examples i’ll use sso_server.test meaning SSO server.\n\n### Login page\n\nWhen unlogged user visit login page. In backend need to requests SSO token from SSO server.\n\nFields:\n\n`token` - obtained from first step from SSO server\n\n`next_url` - relative URL, for redirect after successful authentication. (SSO will generate `Basic URL + Next URL` string and will forward user to it)\n\n```bash\ncurl --request POST \\\n  --url http://sso_server.test/sso/obtain/ \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --header 'X-Token: IJj42agKd231SzinVYqJMqq0buinM0wU' \\\n  --data token=AhTu1Un5zef3eRMGsL3y7AbDt2213123123f \\\n  --data next_url=/successful/page/\n```\n\n\n\nIf all success, server will send to you authentication request token in JSON.\n\n```json\n{\n\t\"token\": \"NmyWRItAye0gDxX7CZhOFs2HKZtT3xyfdrq14TU\"\n}\n```\n\nThen\n\n1) Write token to session. (In PHP - $_SESSION.)\n\n2) Redirect user to http://sso_server.test/login/?sso=NmyWRItAye0gDxX7CZhOFs2HKZtT3xyfdrq14TU. You should put obtained token to URL to “sso” parameter. User will be redirected to SSO login page. \n\nOn SSO login page next:\n\nIf user successful logged on SSO, SSO sends to your event endpoint basic information about user. You should be it write to your authentication system. Then SSO server redirects user back to http://your_service.test/sso/accept/ where script recover SSO token from session and request information from SSO:\n\n`token` - Service token.\n\n`authentication_token` - SSO token, obtained in last step.\n\n```bash\ncurl --request POST \\\n  --url http://sso_server.test/sso/get/ \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --header 'X-Token: IJj42agKdp31SzinVYqJMqq0buinM0wU' \\\n  --data token=AhTu1Un5zef3eRMGsL3y7AbDt2213123123f \\\n  --data authentication_token=NmyWRItAye0gDxX7CZhOFs2HKZtT3xyfdrq14TU\n```\n\nIf user already authorized. It will be returned next JSON:\n\n```json\n{\n    \"authenticated\": True, // Are successful authenticated\n    \"user_identy\": \"somebody\", // User identy (login or email...)\n    \"next_url\": \"/admin/\" // URL for redirect after successful auth\n}\n```\n\nIn any other case:\n\n```json\n{\n\t\"error\": \"Authentication request token is'nt exists\"\n}\n```\n\nIf all success. You need to notify SSO server that token is used. Do next:\n\n`token` - Service token.\n\n`authentication_token` - SSO token, obtained in last step.\n\n```bash\ncurl --request POST \\\n  --url http://sso_server.test/sso/make_used/ \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --header 'X-Token: IJj42agKdp31SzinVYqJMqq0buinM0wU' \\\n  --data token=AhTu1Un5zef3eRMGsL3y7AbDt2213123123f \\\n  --data authentication_token=NmyWRItAye0gDxX7CZhOFs2HKZtT3xyfdrq14TU\n```\n\nAnd you will be get reply:\n\n```json\n{\n\t\"ok\": true\n}\n```\n\n\n\n### Logout page\n\nYou first purge data from session. Then send to SSO server deauthentication event.\n\n`token` - Service token.\n\n`user_identy` - username or email field. Same, that you obtained from http://sso_server.test/sso/get/ at login procedure.\n\n```bash\ncurl --request POST \\\n  --url http://127.0.0.1:5000/sso/deauthenticate/ \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --header 'X-Token: IJj42agKdp31SzinVYqJMqq0buinM0wU' \\\n  --data token=AhTu1Un5zef3eRMGsL3y7AbDt2213123123f \\\n  --data user_identy=someody\n```\n\nWill respond with\n\n```json\n{\n    \"ok\": true\n}\n```\n\nMeaning, that deauthentication completed for all services.\n\n\n\n### Accepting events\n\nYou should create `/sso/event/` endpoint in your project.\n\nWhen user does successful authentication on SSO server, when user deleted or changed on SSO server, this library will send events to all subordinated services information about it. Account was deleted or marked as superuser or something other - SSO-server will emit events to all subordinated services. \n\nFor example. When user is marked as superuser, SSO-server will cast event to all subordinated services to `sso/event/`. Next written all possible events. `type`, `token` fields in event data are permanent.\n\nEvents sends in JSON format via POST request.\n\n##### Create/update account\n\nWhen user created or updated or disabled or marked or unmarked as superuser also every time when user sign’s-in.\n\n```json\n{\n    \"type\": \"update_account\", // Event name\n    \"token\": \"kaIrVNHF4msyLBJeaD4hSO\", // Service token to authenticate SSO server\n    \"username\": \"somebody\", // Value from username field\n    \n    // Next fields may be not included in event. Because user model on SSO don't have it\n    \"is_active\": True, // Are active user now in SSO server\n    \"is_staff\": True, // Are user is staff member\n    \"is_superuser\": Trie, // Are user is superuser\n}\n```\n\n\n\n##### Deauthenticate\n\nWhen user somewhere requested deauthentication. This event will casts to all active subordinated services.\n\n```json\n{\n    \"type\": \"deauthenticate\", // Event name\n    \"token\": \"kaIrVNHF4msyLBJeaD4hSO\", // Service token to authenticate SSO server\n    \"username\": \"somebody\" // Value from username field\n}\n```\n\n\n\nFor all requests to `sso/event/` subordinated service must be return next reponses\n\n```json\n// In successful case\n{\n    \"ok\": True\n}\n\n// Else if failured\n{\n    \"error\": \"Error description here\"\n}\n```\n\n\n\n# To do and coming fixes | roadmap\n\n- [ ] Automatic test on all Django versions while push to master branch\n- [ ] Access control to subordinated services. Possibility to set available services for single user.\n- [ ] Event queue for pushing events instead of immediately pushing. For stability and efficiency.\n- [ ] Integration with popular frameworks and making plug-ins for popular languages. (I can accept your code as part of project - link to repository, for example.)\n- [ ] Integrate with the Sentry\n- [ ] Make auto testing\n\n# Support\n\nThis library in alpha version. Don’t panic. This are draft version. Next time will uploaded fully documented clean version. Plans - make it more better and finish. Also i wanna to make later visual illustrations of logic.\n\nYou can support me via\n\nEthereum: 0x2BD7aA911861029feB08430EEB9a36DC9a8A14d2 (also accept any token :-) )\n\nBUSD/BNB or any token (**BEP20**):  0x74e47ae3A26b8C5cD84d181595cC62723A1B114E\n\n\n\nAny thinks: me@davidhaker.ru\n\nWith love to open source!\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davidhaker/django-sso",
    "keywords": "Django SSO Single Sign-On",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sso",
    "package_url": "https://pypi.org/project/django-sso/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-sso/",
    "project_urls": {
      "Homepage": "https://github.com/davidhaker/django-sso"
    },
    "release_url": "https://pypi.org/project/django-sso/1.1.4/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Django Single Sign-On implementation",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17453807,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09ee0ab9e99b05a478ad28bc27a743e2ca7cc57b232bbe6cf1b14e2035be52c5",
        "md5": "4075666c0a257d8b88337cda43460e71",
        "sha256": "3bac3ea3aade240320bd4659f359bdb00d3423689bfb7f59c90e2c7762024777"
      },
      "downloads": -1,
      "filename": "django_sso-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "4075666c0a257d8b88337cda43460e71",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 26666,
      "upload_time": "2023-01-12T17:41:51",
      "upload_time_iso_8601": "2023-01-12T17:41:51.371064Z",
      "url": "https://files.pythonhosted.org/packages/09/ee/0ab9e99b05a478ad28bc27a743e2ca7cc57b232bbe6cf1b14e2035be52c5/django_sso-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}