{
  "info": {
    "author": "DAVIDhaker",
    "author_email": "me@davidhaker.ru",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Django SSO (Single Sign-On) v1.0.0a\n\nRealization of SSO for Django. \n\nThis library contains two modules.\n\n- <u>Server</u> side - `django_sso.gate` module\n- <u>Service</u> side module - `django_sso`.`service`\n\n\n\n### Concept\n\nConception of module requires Django user subsystem and Django session subsystem - supports custom classes, but he must be based on classical Django classes (AbstractUser / AbstractBaseUser, etc..). This means that you have two ways. One: Do nothing, just install library to server/client and use it. Two: Create own user models based on abstract user classes (models).\n\nOne side - server with all accounts. Two side - many services, who can communicate with SSO server and accept from it base user information.\n\n\n\n## Integration\n\n#### Server side\n\n1) Add to `INSTALLED_APPS` `django_sso`.`gate`\n\n```python\n# project/settings.py\nINSTALLED_APPS = [\n    # ...\n    'django_sso.gate',\n]\n```\n\n\n\n2) Migrate server models\n\n```python\n./manage.py migrate gate\n```\n\n\n\n3) Add urls to project:\n\n```python\n# project/urls.py\n\nurlpatterns = [\n\t# ...,\n\tpath('', include('django_sso.gate.urls')),\n]\n```\n\n\n\n4) In the admin panel you can see now new section, named `SINGLE SIGN-ON`. And in `External services` you should be create new. With next fields:\n\n- `Name` - Human name of service\n- `Base url` - URL for redirects and access to service endpoints from server side. (Like https://your-service.example).\n- `Enabled` - Are external service active. (Inactive services can’t communicate with server side and server side can’t communicate with it)\n- `Token` - Automatically generated token you should past to `settings.py ` to your service to `SSO_TOKEN` variable.\n\n\n\nThen server side is ready to use!\n\n\n\n#### Client side\n\nWhen library app attached to client side app. Admin login form will overridden with same view as `login/` in client side.\n\n1) Add `django_sso`.`service` to `INSTALLED_APPS` \n\n```python\n# project/settings.py\nINSTALLED_APPS = [\n    # ...\n    'django_sso.service',\n]\n```\n\n\n\n2) Add urls to service application\n\n```python\n# project/urls.py\n\nurlpatterns = [\n    # ...,\n    path('', include('django_sso.service.urls')),    \n]\n```\n\n\n\n3) Setup settings variables\n\n```python\n# project/settings.py\n\n# Django variable. URL for unlogged users. We redirect it to our view.\nLOGIN_URL = '/login/'\n\n# Specify SSO server base url\nSSO_ROOT = 'https://sso.project.test'\n\n# Specify application token obtained in SSO server in the admin panel\nSSO_TOKEN = 'reej8Vt5kbCPJM9mZQqYsvfxC...'\n```\n\n\n\n## Structure\n\n#### Server side urls\n\n- `login/` - central login form (you can override template `django_sso/login.html`) \n- `logout/` - central logout view. Clear all sessions on all resources for user\n\nInternal library urls (endpoints for services):\n\n- `sso/obtain/` - obtain <u>authorization request</u>\n- `sso/get/` - get SSO token information. (Is authorized for this token? Get user identity from token. etc..)\n- `sso/make_used/` - after successful authentication on client side need to mark authorization request as used.\n- `sso/deauthenticate/` - services sends deauthentication requests to SSO-server. SSO server broadcasts all services to deauthenticate user\n- `welcome/` - sample view for testing. For logged and unlogged users.\n\n\n\n#### Client side urls\n\n- `login/` - login form. Intermediate form. Obtains authentication request, and redirects to SSO server `/login`. \n- `logout/` - Does deauthenticate user and cast deauthentication event to SSO-server (to `sso/deauthenticate/` on server side).\n- `sso/test/` - Page for test SSO mechanism immediately after install `django_sso`. When you open it in browser: If user are logged in - shows his name or redirect to SSO server and comes back after successful authentication.\n\nLibrary urls for internal usage (endpoints for SSO-server side)\n\n- `sso/push/` - After successful authenticate SSO-server sends to this endpoint basic information about \n\n- `sso/accept/` - User after successful authentication comes back. SSO-server redirect it to this URL for make Django authorization. Then after session is up - browser will redirect to the next URL.\n- `sso/deauthenticate/` - Acceptor for deauthentication messages from server side.\n\n\n\n# To do and coming fixes\n\n- Access control to subordinated services. Possibility to set available services for single user.\n\n- Any changes of user model must be immediately sent do subordinated services.\n\n\n\n# Support\n\nThis library in alpha version. Don’t panic. This are draft version. Next time will uploaded fully documented clean version. Plans - make it more better and finish. Also i wanna to make later visual illustrations of logic.\n\nYou can support me via\n\nEthereum: 0x2BD7aA911861029feB08430EEB9a36DC9a8A14d2 (also accept any token :-) )\n\nBUSD/BNB or any token (**BEP20**):  0x74e47ae3A26b8C5cD84d181595cC62723A1B114E\n\n\n\nAny thinks: me@davidhaker.ru\n\nWith love to open source!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davidhaker/django-sso",
    "keywords": "Django SSO Single Sign-On",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sso",
    "package_url": "https://pypi.org/project/django-sso/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-sso/",
    "project_urls": {
      "Homepage": "https://github.com/davidhaker/django-sso"
    },
    "release_url": "https://pypi.org/project/django-sso/1.0.4.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Django Single Sign-On implementation",
    "version": "1.0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17453807,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad95e2d1f9e7581fb9c19a7f5641c96d44b8c53bfc8af2ec7ae7fe364aa7987a",
        "md5": "08df4b196b7afbb91e0472982c2fc928",
        "sha256": "9d53af59f595455710999e0630d9cb4ca6c68febffa43f256a17d0c668a20c83"
      },
      "downloads": -1,
      "filename": "django_sso-1.0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "08df4b196b7afbb91e0472982c2fc928",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 19204,
      "upload_time": "2022-04-21T21:54:23",
      "upload_time_iso_8601": "2022-04-21T21:54:23.060368Z",
      "url": "https://files.pythonhosted.org/packages/ad/95/e2d1f9e7581fb9c19a7f5641c96d44b8c53bfc8af2ec7ae7fe364aa7987a/django_sso-1.0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}