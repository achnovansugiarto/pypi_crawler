{
  "info": {
    "author": "Fabs",
    "author_email": "fabien.michel@hespul.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: Other/Proprietary License",
      "License :: Public Domain",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![Bitbucket Pipelines](https://img.shields.io/bitbucket/pipelines/hespul/django-reverse-proxy-send-file/master?style=flat-square)\n![license](https://img.shields.io/pypi/l/django-reverse-proxy-send-file?style=flat-square)\n![status](https://img.shields.io/pypi/status/django-reverse-proxy-send-file?style=flat-square)\n![version](https://img.shields.io/pypi/v/django-reverse-proxy-send-file?style=flat-square)\n![pyversion](https://img.shields.io/pypi/pyversions/django-reverse-proxy-send-file?style=flat-square)\n\n# django-reverse-proxy-send-file\n\n## Sumary\n\nThis package help writing views which use the `X-Accel-Redirect` header to have `nginx` serving files but still allow a permission check at django's side\n\n## Intro\n\nThe `storage.ReverseProxySendFileFileSystemStorage` class is a drop-in replacement of django's `FileSystemStorage` which make FileField (or ImageField) url to use the `REVERSE_PROXY_SENDFILE_MEDIA_URL` settings base url instead of MEDIA_URL\n\nThe `storage.ReverseProxySendFileStorageMixin` allow you to apply the overriden `base_url` on any storage class\n\nThe `ReverseProxySendFileView` class handle GET request and return an empty response with nginx's `X-Accel-Redirect` header to order nginx to return the file at given path. The `REVERSE_PROXY_SENDFILE_MEDIA_ROOT` setting must be defined in the nginx context si it can find the file\n\nThe `ReverseProxySendFileView` can be overrided to implement a custom `check_permission` method which verify is the current user is allowed to download the resource.\n\n## Installation\n\nInstall the `django-reverse-proxy-send-file` pypi package.\nex:\n\n- `poetry add django-reverse-proxy-send-file`\n- `pip install django-reverse-proxy-send-file`\n\n## Usage\n\nSee example section bellow\n\n## Settings\n\n| Name                                        | Default     | Description                                                                                                                             |\n| ------------------------------------------- | ----------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| REVERSE_PROXY_SENDFILE_MEDIA_ROOT           | MEDIA_ROOT  | Base path in django's context where to store media files when uploaded (used by Storage class)                                          |\n| REVERSE_PROXY_SENDFILE_MEDIA_URL            | `\"smedia/\"` | URL that handle the resources that should be served by the reverse proxy.                                                               |\n| REVERSE_PROXY_SENDFILE_REVERSE_PROXY_ROOT   | `\"smedia/\"` | Base path in reverse-proxy's context which is sent back to reverse-proxy in header so it can find the file                              |\n| REVERSE_PROXY_SENDFILE_MODE                 | `\"nginx\"`   | Possible values: `\"nginx\"` or `\"apache\"`. <br> `nginx` mode will use `X-Accel-Redirect` header.<br> `apache` mode will use `X-Sendfile` |\n| REVERSE_PROXY_SENDFILE_HEADER_NAME          | `None`      | A custom header name. If set this header will be used regardless `REVERSE_PROXY_SENDFILE_MODE` setting.                                 |\n| REVERSE_PROXY_SENDFILE_DEBUG_SERVE_RESOURCE | `True`      | In django's `DEBUG` mode, the resource is directly served by the dev server.                                                            |\n\n## Exemple\n\n### `settings.py`\n\n```python\n...\nREVERSE_PROXY_SENDFILE_MEDIA_URL = \"smedia/\"\nREVERSE_PROXY_SENDFILE_MEDIA_ROOT = \"/django_path/to/smedia/\"\nREVERSE_PROXY_SENDFILE_REVERSE_PROXY_ROOT = \"/nginx_path/to/smedia/\"\n...\n```\n\n### `models.py`\n\n```python\nfrom django.contrib.auth.models import User\n\nfrom reverse_proxy_send_file.storage import ReverseProxySendFileFileSystemStorage\n\nclass MyModel(models.Model):\n    ...\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    my_file = models.FileField(\n        \"My file\",\n        upload_to=\"my_files/\",\n        storage=ReverseProxySendFileFileSystemStorage(),\n    )\n    ...\n```\n\n### `views.py`\n\n```python\nfrom django.http import Http404\n\nfrom reverse_proxy_send_file.views import ReverseProxySendFileView\n\nclass ReverseProxySendFileMyFileView(ReverseProxySendFileView):\n    def check_permission(self, request, resource_url, *args, **kwargs):\n        obj_qs = MyModel.objects.filter(my_file=resource_url)\n        if not obj_qs.exists():\n            raise Http404()\n        return obj_qs.filter(user=request.user).exists()\n```\n\n### `urls.py`\n\n```python\nfrom django.conf import settings\nfrom views import ReverseProxySendFileMyFileView\n\nurlpatterns = [\n    ...\n    re_path(\n        settings.REVERSE_PROXY_SENDFILE_MEDIA_URL + \"(?P<resource_url>my_files/.*)$\",\n        views.ReverseProxySendFileMyFileView.as_view(),\n        name=\"reverse_proxy_send_file\",\n    ),\n    ...\n]\n```\n\n1. User upload file. The file is stored in `/django_path/to/smedia/my_files/blop.pdf`\n1. User access `/smedia/my_files/blop.pdf`\n1. A django request is performed and it check file access permission for current user (in check_permission).\n1. - If the user is allowed return a HTTP response with header : `X-Accel-Redirect=/nginx_path/to/smedia/my_files/blop.pdf` (Nginx will use it to send the file to the client)\n   - If the file os not found return a `404 note found`.\n   - If the user id forbidden, return a `403 response forbidden`\n\n## Setup dev environnement\n\n```bash\n# install dev dependencies\npoetry install --no-root\n# install git pre-commit\npre-commit install\n```\n\n## Run tests\n\nUse `tox` command to run all tests on all supported python versions\nExamples:\n\n```bash\ntox\ntox -e py38-django40\ntox -f py39\n```\n\n## Build package and publish on PyPI\n\nChange version number in `pyproject.toml`\n\n```bash\npoetry build\npoetry publish\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/hespul/django-reverse-proxy-send-file",
    "keywords": "",
    "license": "WTFPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-reverse-proxy-send-file",
    "package_url": "https://pypi.org/project/django-reverse-proxy-send-file/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-reverse-proxy-send-file/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/hespul/django-reverse-proxy-send-file",
      "Repository": "https://bitbucket.org/hespul/django-reverse-proxy-send-file"
    },
    "release_url": "https://pypi.org/project/django-reverse-proxy-send-file/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Storage and View to send X-Accel-Redirect (or X-Sendfile) header to nginx (or apache) reverse-proxy",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16711156,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8894c971f5be19c32dfecd334ec4c7666bbd66a2bdbe69ef6349f1cddf580170",
        "md5": "1e53d6d9788d58ead2440c479ac12f26",
        "sha256": "00051aacb7601937b7fc054373f8292221c0fb34548230659967498a27069dea"
      },
      "downloads": -1,
      "filename": "django_reverse_proxy_send_file-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1e53d6d9788d58ead2440c479ac12f26",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 4936,
      "upload_time": "2023-02-06T11:30:09",
      "upload_time_iso_8601": "2023-02-06T11:30:09.719834Z",
      "url": "https://files.pythonhosted.org/packages/88/94/c971f5be19c32dfecd334ec4c7666bbd66a2bdbe69ef6349f1cddf580170/django_reverse_proxy_send_file-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81e3d1604d9502dfe2d80aacb4e88910dd0ca867ef87cb7656acac3d194661d0",
        "md5": "5a284ab0bc7e940845747a21b0b44652",
        "sha256": "b6e722ae8d81fabff68448e9f5d27d25ea96e08bafc2cb583aecd9a2d7670fa0"
      },
      "downloads": -1,
      "filename": "django_reverse_proxy_send_file-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5a284ab0bc7e940845747a21b0b44652",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 4958,
      "upload_time": "2023-02-06T11:30:11",
      "upload_time_iso_8601": "2023-02-06T11:30:11.907598Z",
      "url": "https://files.pythonhosted.org/packages/81/e3/d1604d9502dfe2d80aacb4e88910dd0ca867ef87cb7656acac3d194661d0/django_reverse_proxy_send_file-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}