{
  "info": {
    "author": "Yuca Live",
    "author_email": "time-data@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Macei√≥\nPackage to insert JSON data into a SQL database.\n\n## What it does\nIn short, given a JSON input, Maceio is able to:\n- Create, and populate, a new table based on a JSON input (no need to specify its structure)\n- Feed JSON records into an existing table (inserting a new register or updating existing ones)\n\n## Getting Started\n\n### 1. No structure, no db options (quick option)\n```python\nfrom Maceio.Maceio import Maceio\n\nif __name__ == \"__main__\":\n    # You can use only one dictionary without lists\n    data = '''[\n            {\n                \"field1\":{\n                    \"subfield1\": 1,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 1\",\n                        \"sub2\":\"Value 2\",\n                    }\n                }\n            },\n            {\n                \"field1\":{\n                    \"subfield1\": 2,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 3\",\n                        \"sub2\":\"Value 4\",\n                    }\n                }\n            }\n        ]\n    ''')\n\n    maceio = Maceio('postgresql+psycopg2://user:password@host:port/database', 'schema_example')\n    maceio.save('table_example', data, conflicts=('subfield1', 'subfield2'))\n```\n\n\n### 2. Adding db options (connection limits and pool size)\n\n```python\nfrom Maceio.Maceio import Maceio\n\nif __name__ == \"__main__\":\n    # You can use only one dictionary without lists\n    data = '''[\n            {\n                \"field1\":{\n                    \"subfield1\": 1,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 1\",\n                        \"sub2\":\"Value 2\",\n                    }\n                }\n            },\n            {\n                \"field1\":{\n                    \"subfield1\": 2,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 3\",\n                        \"sub2\":\"Value 4\",\n                    }\n                }\n            }\n        ]\n    ''')\n    maceio = Maceio('postgresql+psycopg2://user:password@host:port/database', 'schema_example', pool_size=5, max_overflow=2)\n    maceio.save('table_example', data, conflicts=('subfield1', 'subfield2'))\n```\n\n### 3. Disabling table existence check\n\n```python\nfrom Maceio.Maceio import Maceio\n\nif __name__ == \"__main__\":\n    # You can use only one dictionary without lists\n    data = '''[\n            {\n                \"field1\":{\n                    \"subfield1\": 1,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 1\",\n                        \"sub2\":\"Value 2\",\n                    }\n                }\n            },\n            {\n                \"field1\":{\n                    \"subfield1\": 2,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 3\",\n                        \"sub2\":\"Value 4\",\n                    }\n                }\n            }\n        ]\n    ''')\n    maceio = Maceio('postgresql+psycopg2://user:password@host:port/database', 'schema_example', pool_size=5, max_overflow=2)\n\n    # To not check if table exists, set verify=False\n    maceio.save('table_example', data, conflicts=('subfield1', 'subfield2'), verify=False, primaries=('id',))\n```\n\n### Disabling JSON format\n\n```python\nfrom Maceio.Maceio import Maceio\n\nif __name__ == \"__main__\":\n    # You can use only one dictionary without lists\n    data = '''[\n            {\n                \"field1\":{\n                    \"subfield1\": 1,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 1\",\n                        \"sub2\":\"Value 2\",\n                    }\n                }\n            },\n            {\n                \"field1\":{\n                    \"subfield1\": 2,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 3\",\n                        \"sub2\":\"Value 4\",\n                    }\n                }\n            }\n        ]\n    ''')\n\n    # Passing enableJsonType=False disables storing with JSON type, so JSON data will be saved as string instead\n    maceio = Maceio('postgresql+psycopg2://user:password@host:port/database', 'schema_example', pool_size=5, max_overflow=2, enableJsonType=False)\n    maceio.save('table_example', data, conflicts=('subfield1', 'subfield2'), verify=True, primaries=('id',))\n```\n\n### Saving all data types as string instead\nThis can be particularly useful for initial exploration of data with unknown data types.\n\n```python\nfrom Maceio.Maceio import Maceio\n\nif __name__ == \"__main__\":\n    # You can use only one dictionary without lists\n    data = '''[\n            {\n                \"field1\":{\n                    \"subfield1\": 1,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 1\",\n                        \"sub2\":\"Value 2\",\n                    }\n                }\n            },\n            {\n                \"field1\":{\n                    \"subfield1\": 2,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 3\",\n                        \"sub2\":\"Value 4\",\n                    }\n                }\n            }\n        ]\n    ''')\n\n    # To save all formats as string, pass onlyText=True\n    maceio = Maceio('postgresql+psycopg2://user:password@host:port/database', 'schema_example', pool_size=5, max_overflow=2, onlyText=True)\n    maceio.save('table_example', data, conflicts=('subfield1', 'subfield2'), verify=True, primaries=('id',))\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yuca-live/maceio",
    "keywords": "Package,SQL,Json",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Maceio",
    "package_url": "https://pypi.org/project/Maceio/",
    "platform": "",
    "project_url": "https://pypi.org/project/Maceio/",
    "project_urls": {
      "Homepage": "https://github.com/yuca-live/maceio"
    },
    "release_url": "https://pypi.org/project/Maceio/1.0.6/",
    "requires_dist": [
      "sqlalchemy",
      "unidecode"
    ],
    "requires_python": "",
    "summary": "Package to convert JSON data in SQL table.",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12370698,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c60a3d11c3d17bac4543bf58103a204e1247161ece292357eaded005cfd542c3",
        "md5": "80056c1cf982b385ab4c13d082d23411",
        "sha256": "99050c95aa78271700e8cde8c5ef2b08aa705efcbeef690d2af27f69334f3cf6"
      },
      "downloads": -1,
      "filename": "Maceio-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "80056c1cf982b385ab4c13d082d23411",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6777,
      "upload_time": "2021-12-07T19:10:23",
      "upload_time_iso_8601": "2021-12-07T19:10:23.489780Z",
      "url": "https://files.pythonhosted.org/packages/c6/0a/3d11c3d17bac4543bf58103a204e1247161ece292357eaded005cfd542c3/Maceio-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edb1831a31ce080a726b098890f046d2fbd49f256252aba7afa7072c0b247b6f",
        "md5": "8f5ea326ed3f4d2d229b5cec10c17241",
        "sha256": "0e19e27f2902ade42faba69c016b6b92f928ba76c20a3765ee3fef7cae0fccfe"
      },
      "downloads": -1,
      "filename": "Maceio-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "8f5ea326ed3f4d2d229b5cec10c17241",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6144,
      "upload_time": "2021-12-07T19:10:25",
      "upload_time_iso_8601": "2021-12-07T19:10:25.115818Z",
      "url": "https://files.pythonhosted.org/packages/ed/b1/831a31ce080a726b098890f046d2fbd49f256252aba7afa7072c0b247b6f/Maceio-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}