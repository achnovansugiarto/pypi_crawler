{
  "info": {
    "author": "Yuca Live",
    "author_email": "time-data@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Macei√≥\nPackage to insert JSON data into a SQL database.\n\n## What it does\nIn short, given a JSON input, Maceio is able to:\n- Create, and populate, a new table based on a JSON input (no need to specify its structure)\n- Feed JSON records into an existing table (inserting a new register or updating existing ones)\n\n## Getting Started\n\n### 1. No structure, no db options (quick option)\n```python\nfrom Maceio.Maceio import Maceio\n\nif __name__ == \"__main__\":\n    # You can use only one dictionary without lists\n    data = '''[\n            {\n                \"field1\":{\n                    \"subfield1\": 1,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 1\",\n                        \"sub2\":\"Value 2\",\n                    }\n                }\n            },\n            {\n                \"field1\":{\n                    \"subfield1\": 2,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 3\",\n                        \"sub2\":\"Value 4\",\n                    }\n                }\n            }\n        ]\n    ''')\n\n    maceio = Maceio('postgresql+psycopg2://user:password@host:port/database', 'schema_example')\n    maceio.save('table_example', data, conflicts=('subfield1', 'subfield2'))\n```\n\n\n### 2. Adding db options (connection limits and pool size)\n\n```python\nfrom Maceio.Maceio import Maceio\n\nif __name__ == \"__main__\":\n    # You can use only one dictionary without lists\n    data = '''[\n            {\n                \"field1\":{\n                    \"subfield1\": 1,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 1\",\n                        \"sub2\":\"Value 2\",\n                    }\n                }\n            },\n            {\n                \"field1\":{\n                    \"subfield1\": 2,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 3\",\n                        \"sub2\":\"Value 4\",\n                    }\n                }\n            }\n        ]\n    ''')\n    maceio = Maceio('postgresql+psycopg2://user:password@host:port/database', 'schema_example', pool_size=5, max_overflow=2)\n    maceio.save('table_example', data, conflicts=('subfield1', 'subfield2'))\n```\n\n### 3. Disabling table existence check\n\n```python\nfrom Maceio.Maceio import Maceio\n\nif __name__ == \"__main__\":\n    # You can use only one dictionary without lists\n    data = '''[\n            {\n                \"field1\":{\n                    \"subfield1\": 1,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 1\",\n                        \"sub2\":\"Value 2\",\n                    }\n                }\n            },\n            {\n                \"field1\":{\n                    \"subfield1\": 2,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 3\",\n                        \"sub2\":\"Value 4\",\n                    }\n                }\n            }\n        ]\n    ''')\n    maceio = Maceio('postgresql+psycopg2://user:password@host:port/database', 'schema_example', pool_size=5, max_overflow=2)\n\n    # To not check if table exists, set verify=False\n    maceio.save('table_example', data, conflicts=('subfield1', 'subfield2'), verify=False, primaries=('id',))\n```\n\n### Disabling JSON format\n\n```python\nfrom Maceio.Maceio import Maceio\n\nif __name__ == \"__main__\":\n    # You can use only one dictionary without lists\n    data = '''[\n            {\n                \"field1\":{\n                    \"subfield1\": 1,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 1\",\n                        \"sub2\":\"Value 2\",\n                    }\n                }\n            },\n            {\n                \"field1\":{\n                    \"subfield1\": 2,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 3\",\n                        \"sub2\":\"Value 4\",\n                    }\n                }\n            }\n        ]\n    ''')\n\n    # Passing enableJsonType=False disables storing with JSON type, so JSON data will be saved as string instead\n    maceio = Maceio('postgresql+psycopg2://user:password@host:port/database', 'schema_example', pool_size=5, max_overflow=2, enableJsonType=False)\n    maceio.save('table_example', data, conflicts=('subfield1', 'subfield2'), verify=True, primaries=('id',))\n```\n\n### Saving all data types as string instead\nThis can be particularly useful for initial exploration of data with unknown data types.\n\n```python\nfrom Maceio.Maceio import Maceio\n\nif __name__ == \"__main__\":\n    # You can use only one dictionary without lists\n    data = '''[\n            {\n                \"field1\":{\n                    \"subfield1\": 1,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 1\",\n                        \"sub2\":\"Value 2\",\n                    }\n                }\n            },\n            {\n                \"field1\":{\n                    \"subfield1\": 2,\n                    \"subfield2\": \"TYPE1\",\n                    \"subfield3\":{\n                        \"sub1\":\"Value 3\",\n                        \"sub2\":\"Value 4\",\n                    }\n                }\n            }\n        ]\n    ''')\n\n    # To save all formats as string, pass onlyText=True\n    maceio = Maceio('postgresql+psycopg2://user:password@host:port/database', 'schema_example', pool_size=5, max_overflow=2, onlyText=True)\n    maceio.save('table_example', data, conflicts=('subfield1', 'subfield2'), verify=True, primaries=('id',))\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yuca-live/maceio",
    "keywords": "Package,SQL,Json",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Maceio",
    "package_url": "https://pypi.org/project/Maceio/",
    "platform": "",
    "project_url": "https://pypi.org/project/Maceio/",
    "project_urls": {
      "Homepage": "https://github.com/yuca-live/maceio"
    },
    "release_url": "https://pypi.org/project/Maceio/1.0.7/",
    "requires_dist": [
      "sqlalchemy",
      "unidecode"
    ],
    "requires_python": "",
    "summary": "Package to convert JSON data in SQL table.",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12370698,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a1a58cd5c68dea2f5738e364f39bc7a1ae569adfca4608ac1138033af157b02",
        "md5": "48de56d5e80e9a731fc99bee648149cd",
        "sha256": "fb128dbd03cce8b3dd2dd515175968ec26633e2768a717f22ef75e081677fc40"
      },
      "downloads": -1,
      "filename": "Maceio-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "48de56d5e80e9a731fc99bee648149cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6757,
      "upload_time": "2021-12-21T12:55:37",
      "upload_time_iso_8601": "2021-12-21T12:55:37.497307Z",
      "url": "https://files.pythonhosted.org/packages/5a/1a/58cd5c68dea2f5738e364f39bc7a1ae569adfca4608ac1138033af157b02/Maceio-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b15005ba5364c4a5a28ef17e71679b6195ce1357a454bf9a53ada72000dcbba4",
        "md5": "68e8740b63b87b4ad17bc386abdd54d2",
        "sha256": "1a742cfa85cb196e242bf5090bc4c0f884565fc376f4876102e6980f348ef444"
      },
      "downloads": -1,
      "filename": "Maceio-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "68e8740b63b87b4ad17bc386abdd54d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6126,
      "upload_time": "2021-12-21T12:55:39",
      "upload_time_iso_8601": "2021-12-21T12:55:39.319866Z",
      "url": "https://files.pythonhosted.org/packages/b1/50/05ba5364c4a5a28ef17e71679b6195ce1357a454bf9a53ada72000dcbba4/Maceio-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}