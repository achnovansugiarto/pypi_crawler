{
  "info": {
    "author": "Arun K. R.",
    "author_email": "the1.arun@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "=================\r\ndjango-macaddress\r\n=================\r\n\r\n.. image:: https://api.travis-ci.org/tubaman/django-macaddress.png?branch=master\r\n   :alt: Build Status\r\n   :target: https://travis-ci.org/tubaman/django-macaddress\r\n.. image:: https://pypip.in/v/django-macaddress/badge.png\r\n   :target: https://crate.io/packages/django-macaddress\r\n.. image:: https://pypip.in/d/django-macaddress/badge.png\r\n   :target: https://crate.io/packages/django-macaddress\r\n\r\nMAC Address model and form fields for Django\r\n\r\nWe use netaddr to parse and validate the MAC address.  The tests aren't\r\ncomplete yet.\r\n\r\nPatches welcome: http://github.com/tubaman/django-macaddress\r\n\r\n--------------\r\nRelease Notes:\r\n--------------\r\n\r\nv1.3\r\n----\r\n+ Added the option to store MAC Addresses in the database as strings, based on a \r\n  an initialization argument (see documentation, below).\r\n+ Added support for defining a default EUI dialect class (netaddr built-in, \r\n  or custom) to ``settings.py`` as the ``MACADDRESS_DEFAULT_DIALECT`` variable (see \r\n  documentation, below).\r\n+ Added a utility function, ``format_mac`` to return the stored MAC Address as a string formatted using \r\n  any provided subclass of ``netaddr.eui_48`` (see example below).\r\n\r\n\r\nGetting Started\r\n***************\r\n\r\nsettings.MACADDRESS_DEFAULT_DIALECT\r\n-----------------------------------\r\nTo specify a default dialect for presentation (and storage, see below), specify::\r\n    \r\n    settings.MACADDRESS_DEFAULT_DIALECT = 'module.dialect_class'\r\n\r\nwhere the specified value is a string composed of a parent python module name \r\nand the child dialect class name. For example::\r\n\r\n    settings.MACADDRESS_DEFAULT_DIALECT = 'netaddr.mac_eui48'\r\n\r\nPS: old default of macaddress.mac_linux (uppercase and divided by ':' ) will be used by default.\r\n\r\nIf the custom dialect is defined in a package module, you will need to define the \r\nclass in or import into the package's ``__init__.py``.\r\n\r\n``default_dialect`` and ``format_mac``\r\n--------------------------------------\r\nTo get the default dialect for your project, import and call the ``default_dialect`` function::\r\n\r\n    >>> from macaddress import default_dialect\r\n    \r\n    >>> dialect = default_dialect()\r\n    \r\nThis function may, optionally, be called with an ``netaddr.EUI`` class instance as its argument. If no\r\ndefault is defined in ``settings``, it will return the dialect of the provided ``EUI`` object.\r\n\r\nThe ``format_mac`` function takes an ``EUI`` instance and a dialect class (``netaddr.mac_eui48`` or a \r\nsubclass) as its arguments. The dialect class may be specified as a string in the same manner as \r\n``settings.MACADDRESS_DEFAULT_DIALECT``::\r\n    \r\n    >>> from netaddr import EUI, mac_bare\r\n    >>> from macaddress import format_mac\r\n\r\n    >>> mac = EUI('00:12:3c:37:64:8f')\r\n    >>> format_mac(mac, mac_bare)\r\n    '00123C37648F'\r\n    >>> format_mac(mac, 'netaddr.mac_cisco')\r\n    '0012.3c37.648f'\r\n    \r\nMACAddressField (ModelField)\r\n----------------------------\r\nThis is an example model using MACAddressField::\r\n    \r\n    from macaddress.fields import MACAddressField\r\n    \r\n    class Computer(models.Model):\r\n        name = models.CharField(max_length=32)\r\n        eth0 = MACAddressField(null=True, blank=True)\r\n        ...\r\n    \r\nThe default behavior is to store the MAC Address in the database is a BigInteger. \r\nIf you would, rather, store the value as a string (to, for instance, facilitate \r\nsub-string searches), you can specify ``integer=False`` and the value will be stored\r\nas a string::\r\n\r\n    class Computer(models.Model):\r\n        name = models.CharField(max_length=32)\r\n        eth0 = MACAddressField(blank=True, integer=False)\r\n        ...\r\n\r\nIf you want to set ``unique=True`` on a MACAddressField that is stored as a string, you will need \r\nto set ``null=True`` and create custom ``clean_<foo>`` methods on your ``forms.ModelForm`` class for \r\neach MACAddressField that return ``None`` when the value provided is an ``''`` (empty string)::\r\n\r\n    from .models import Computer\r\n    \r\n    class ComputerForm(forms.ModelForm):\r\n        class Meta:\r\n            model = Computer\r\n        \r\n        def clean_eth0(self):\r\n            return self.cleaned_data['eth0'] or None\r\n        \r\nYou should avoid changing the value of ``integer`` after running ``managy.py syncdb``, \r\nunless you are using a schema migration solution like South or Django's built-in migrations.\r\n\r\n\r\nTo Do\r\n*****\r\n\r\n+ Add greater support for partial string queries when storing MACs as strings in the database.\r\n+ Add custom validator to check for duplicate MACs when mixing string and integer storage types.\r\n+ Add deprecation warning and timeline for changeover to default string storage.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/tubaman/django-macaddress",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-macaddress",
    "package_url": "https://pypi.org/project/django-macaddress/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-macaddress/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/tubaman/django-macaddress"
    },
    "release_url": "https://pypi.org/project/django-macaddress/1.3.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "MAC address model and form fields for Django apps.",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10301863,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5297a2c0b484d8fdcdfe956b42de442007514550755945060b94e61668ab028",
        "md5": "d0f4bd508e134347b53d50e62aa22b3a",
        "sha256": "c36dc7edfc0ad03d82f5e449bf0209bafef9892a04c2cb82a21bbec622a7f3c7"
      },
      "downloads": -1,
      "filename": "django_macaddress-1.3.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0f4bd508e134347b53d50e62aa22b3a",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 9350,
      "upload_time": "2015-08-18T09:58:32",
      "upload_time_iso_8601": "2015-08-18T09:58:32.582451Z",
      "url": "https://files.pythonhosted.org/packages/d5/29/7a2c0b484d8fdcdfe956b42de442007514550755945060b94e61668ab028/django_macaddress-1.3.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1bd8227c27fc9378e9658bf836dd8850a591b28ce19d380cd0b385455881958a",
        "md5": "3e89435298c409ff24e193362b340214",
        "sha256": "614d1637bfa4b7c026ebe3711691086a4a3615e5ca6c0007622f28f8f9650f48"
      },
      "downloads": -1,
      "filename": "django-macaddress-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3e89435298c409ff24e193362b340214",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6523,
      "upload_time": "2015-08-18T09:58:27",
      "upload_time_iso_8601": "2015-08-18T09:58:27.674140Z",
      "url": "https://files.pythonhosted.org/packages/1b/d8/227c27fc9378e9658bf836dd8850a591b28ce19d380cd0b385455881958a/django-macaddress-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}