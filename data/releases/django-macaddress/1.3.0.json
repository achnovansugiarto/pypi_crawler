{
  "info": {
    "author": "Arun K. R.",
    "author_email": "the1.arun@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "django-macaddress\n================\n\n.. image:: https://api.travis-ci.org/tubaman/django-macaddress.png?branch=master\n   :alt: Build Status\n   :target: https://travis-ci.org/tubaman/django-macaddress\n.. image:: https://pypip.in/v/django-macaddress/badge.png\n   :target: https://crate.io/packages/django-macaddress\n.. image:: https://pypip.in/d/django-macaddress/badge.png\n   :target: https://crate.io/packages/django-macaddress\n\nMAC Address model and form fields for Django\n\nWe use netaddr to parse and validate the MAC address.  The tests aren't\ncomplete yet.\n\nPatches welcome: http://github.com/tubaman/django-macaddress\n\nRelease Notes:\n**************\n\nv1.3\n----\n+ Added the option to store MAC Addresses in the database as strings, based on a \n  an initialization argument (see documentation, below).\n+ Added support for defining a default EUI dialect class (netaddr built-in, \n  or custom) to ``settings.py`` as the ``MACADDRESS_DEFAULT_DIALECT`` variable (see \n  documentation, below).\n+ Added a utility function, ``format_mac`` to return the stored MAC Address as a string formatted using \n  any provided subclass of ``netaddr.eui_48`` (see example below).\n\n\nGetting Started\n***************\n\nsettings.MACADDRESS_DEFAULT_DIALECT\n-----------------------------------\nTo specify a default dialect for presentation (and storage, see below), specify::\n    \n    settings.MACADDRESS_DEFAULT_DIALECT = 'module.dialect_class'\n\nwhere the specified value is a string composed of a parent python module name \nand the child dialect class name. For example::\n\n    settings.MACADDRESS_DEFAULT_DIALECT = 'netaddr.mac_eui48'\n\nIf the custom dialect is defined in a package module, you will need to define the \nclass in or import into the package's ``__init__.py``.\n\n``default_dialect`` and ``format_mac``\n--------------------------------------\nTo get the default dialect for your project, import and call the ``default_dialect`` function::\n\n    >>> from macaddress import default_dialect\n    \n    >>> dialect = default_dialect()\n    \nThis function may, optionally, be called with an ``netaddr.EUI`` class instance as its argument. If no\ndefault is defined in ``settings``, it will return the dialect of the provided ``EUI`` object.\n\nThe ``format_mac`` function takes an ``EUI`` instance and a dialect class (``netaddr.mac_eui48`` or a \nsubclass) as its arguments. The dialect class may be specified as a string in the same manner as \n``settings.MACADDRESS_DEFAULT_DIALECT``::\n    \n    >>> from netaddr import EUI, mac_bare\n    >>> from macaddress import format_mac\n\n    >>> mac = EUI('00:12:3c:37:64:8f')\n    >>> format_mac(mac, mac_bare)\n    '00123C37648F'\n    >>> format_mac(mac, 'netaddr.mac_cisco')\n    '0012.3c37.648f'\n    \nMACAddressField (ModelField)\n----------------------------\nThis is an example model using MACAddressField::\n    \n    from macaddress.fields import MACAddressField\n    \n    class Computer(models.Model):\n        name = models.CharField(max_length=32)\n        eth0 = MACAddressField(null=True, blank=True)\n        ...\n    \nThe default behavior is to store the MAC Address in the database is a BigInteger. \nIf you would, rather, store the value as a string (to, for instance, facilitate \nsub-string searches), you can specify ``integer=False`` and the value will be stored\nas a string::\n\n    class Computer(models.Model):\n        name = models.CharField(max_length=32)\n        eth0 = MACAddressField(blank=True, integer=False)\n        ...\n\nIf you want to set ``unique=True`` on a MACAddressField that is stored as a string, you will need \nto set ``null=True`` and create custom ``clean_<foo>`` methods on your ``forms.ModelForm`` class for \neach MACAddressField that return ``None`` when the value provided is an ``''`` (empty string)::\n\n    from .models import Computer\n    \n    class ComputerForm(forms.ModelForm):\n        class Meta:\n            model = Computer\n        \n        def clean_eth0(self):\n            return self.cleaned_data['eth0'] or None\n        \nYou should avoid changing the value of ``integer`` after running ``managy.py syncdb``, \nunless you are using a schema migration solution like South or Django's built-in migrations.\n\n\nTo Do\n*****\n\n+ Add greater support for partial string queries when storing MACs as strings in the database.\n+ Add custom validator to check for duplicate MACs when mixing string and integer storage types.\n+ Add deprecation warning and timeline for changeover to default string storage.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/tubaman/django-macaddress",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-macaddress",
    "package_url": "https://pypi.org/project/django-macaddress/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-macaddress/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/tubaman/django-macaddress"
    },
    "release_url": "https://pypi.org/project/django-macaddress/1.3.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "MAC address model and form fields for Django apps.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10301863,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "555091ab3f03c1df0b427f4b33a5673e20c3281d2844a85a6f3be1fa410b72c1",
        "md5": "95dca10caa3cce9d91800d14bfc90ed5",
        "sha256": "4c836288620f8bcdead2a2bc28890e0db266418f6d7300a5a3dad062d6aa8b3d"
      },
      "downloads": -1,
      "filename": "django-macaddress-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "95dca10caa3cce9d91800d14bfc90ed5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6200,
      "upload_time": "2014-07-13T17:05:30",
      "upload_time_iso_8601": "2014-07-13T17:05:30.477759Z",
      "url": "https://files.pythonhosted.org/packages/55/50/91ab3f03c1df0b427f4b33a5673e20c3281d2844a85a6f3be1fa410b72c1/django-macaddress-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}