{
  "info": {
    "author": "Incuna Ltd",
    "author_email": "admin@incuna.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## Extensible user profiles for Django\n\nThis project provides a base `Profile` model that relates to the built-in `auth.User` model and provides hooks for adding any number of feature extensions. A number of example extensions (address details, avatar, etc) are included.\n\nThe basic concept (and some code) is borrowed from the [FeinCMS](https://github.com/feincms/feincms) Page model.\n\n### Usage\n\nTo use the profiles module add `profiles` to `INSTALLED_APPS` in your django settings file.\n\nBefore proceeding with `manage.py syncdb`, you must add some profile extensions.\nThe profiles module does not add anything to the User model by default.\n\n### Profile extension modules\n\nExtensions are a way to add often-used functionality the `Profile` model. The\nextensions are standard python modules with a `register()` method which will be\ncalled upon registering the extension. The `register()` method receives the\n`Profile` class itself and the model admin class `ProfileAdmin` as arguments.\n\nThere are two ways to set up the extensions. Either you can use the FeinCMS\napproach of registering extensions directly (this should go in your models.py):\n\n    from profiles.models import Profile\n    Profile.register_extensions('title', 'picture', 'address', 'profiles.modules.options.extensions.options')\n\nor you can simply use a setting:\n\n    PROFILE_EXTENSIONS = ('title', 'picture', 'address', 'profiles.modules.options.extensions.options')\n\nIf the extension requires its own models (like the options extension) then the\napp containing the models will also need to be added to your `INSTALLED_APPS`.\n\n### Adding extensions\n\nTo add an extension create a python module that defines a register function\nwhich accepts the `Profile` class and the `ProfileAdmin` class as arguments and\nmodifies them as required.\n\nHere is the address extension (`profiles/extensions/address.py`):\n\n\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n\n    def register(cls, admin_cls):\n        cls.add_to_class('address1', models.CharField(max_length=255, verbose_name=_('address'), null=True, blank=True))\n        cls.add_to_class('address2', models.CharField(max_length=255, verbose_name=_('address 2'), null=True, blank=True))\n        cls.add_to_class('city', models.CharField(max_length=255, verbose_name=_('town/city'), null=True, blank=True))\n        cls.add_to_class('region', models.CharField(max_length=255, verbose_name=_('county/state/province'), null=True, blank=True))\n        cls.add_to_class('postcode', models.CharField(max_length=15, verbose_name=_('postcode'), null=True))\n        cls.add_to_class('country', models.ForeignKey('countries.Country', null=True, blank=True))\n        cls.add_to_class('telephone', models.CharField(max_length=32, verbose_name=_('mobile number'), null=True, blank=True))\n\n        if admin_cls:\n            admin_cls.search_fields += ['address1', 'address2', 'city', 'region', 'postcode']\n            admin_cls.list_display_filter += ['country', ]\n\n            if admin_cls.fieldsets:\n                admin_cls.fieldsets.append((_('Address'), {\n                        'fields': ['address1', 'address2','city', 'region', 'postcode', 'country', 'telephone'],\n                        'classes': ('collapse',),\n                    }))\n\n\n### Dependencies\n\nThe address extension requires\n[`incuna-countries`](http://github.com/incuna/incuna-countries). Add\n`countries` to your `INSTALLED_APPS`.\n\nThe options and notification extensions require\n[`django-orderable`](http://github.com/incuna/django-orderable). Add\n`orderable` to your `INSTALLED_APPS`.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://incuna.com/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-extensible-profiles",
    "package_url": "https://pypi.org/project/django-extensible-profiles/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-extensible-profiles/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://incuna.com/"
    },
    "release_url": "https://pypi.org/project/django-extensible-profiles/1.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Generic extensible django user profiles.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 756167,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbc396f1d7316cd7dd71360ea33a6ee739dd3074b6031071035176f48841a0cd",
        "md5": "147ae6003b4aaacc170bef098d630996",
        "sha256": "c0d142e99bedfb314d9de03bfb38c231bf3021b42d7cde12a3488db1e764e916"
      },
      "downloads": -1,
      "filename": "django-extensible-profiles-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "147ae6003b4aaacc170bef098d630996",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12618,
      "upload_time": "2012-08-02T19:07:07",
      "upload_time_iso_8601": "2012-08-02T19:07:07.123157Z",
      "url": "https://files.pythonhosted.org/packages/bb/c3/96f1d7316cd7dd71360ea33a6ee739dd3074b6031071035176f48841a0cd/django-extensible-profiles-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}