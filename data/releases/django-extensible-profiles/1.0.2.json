{
  "info": {
    "author": "Incuna Ltd",
    "author_email": "admin@incuna.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## Extensible user profiles for Django\n\nThis is an extensible user profile system for Django, designed to provide a simple user Profile model that is extensible.\n\nThe concept (and some code) is borrowed from the FeinCMS (https://github.com/matthiask/feincms) page model.\n\nTo use the profiles module add profiles to your INSTALLED_APPS.\n\nBefore proceeding with manage.py syncdb, you must add some profile extensions. The profiles module does not add anything to the User model by default.\n\n\n### Profile extension modules\n\nExtensions are a way to add often-used functionality the Profile model. The extensions are standard python modules with a register() method which will be called upon registering the extension. The register() method receives the Profile class itself and the model admin class ProfileAdmin as arguments.\n\nTo register extensions, simply pop a list of them in your settings.py:\n\n    PROFILE_EXTENSIONS = ('title', 'picture', 'address', 'profiles.modules.options.extensions.options')\n\nFor backwards compatibility, extensions can be activated by adding the following to a models.py file that will be processed anyway. eg:\n\n    from profiles.models import Profile\n    Profile.register_extensions('title', 'picture', 'address', 'profiles.modules.options.extensions.options')\n\n\nIf the extension requires it's own models (like the options extension) then the app containing the models will also need to be added to your INSTALLED_APPS.\n\n### Adding extensions\n\nTo add an extension create a python module that defines a register function that accepts the Profile class and the ProfileAdmin class as arguments and modifies them as required.\n\nHere is the address extension (profiles/extensions/address.py):\n\n\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n\n    def register(cls, admin_cls):\n        cls.add_to_class('address1', models.CharField(max_length=255, verbose_name=_('address'), null=True, blank=True))\n        cls.add_to_class('address2', models.CharField(max_length=255, verbose_name=_('address 2'), null=True, blank=True))\n        cls.add_to_class('city', models.CharField(max_length=255, verbose_name=_('town/city'), null=True, blank=True))\n        cls.add_to_class('region', models.CharField(max_length=255, verbose_name=_('county/state/province'), null=True, blank=True))\n        cls.add_to_class('postcode', models.CharField(max_length=15, verbose_name=_('postcode'), null=True))\n        cls.add_to_class('country', models.ForeignKey('countries.Country', null=True, blank=True))\n        cls.add_to_class('telephone', models.CharField(max_length=32, verbose_name=_('mobile number'), null=True, blank=True))\n\n        if admin_cls:\n            admin_cls.search_fields += ['address1', 'address2', 'city', 'region', 'postcode']\n            admin_cls.list_display_filter += ['country', ]\n\n            if admin_cls.fieldsets:\n                admin_cls.fieldsets.append((_('Address'), {\n                        'fields': ['address1', 'address2','city', 'region', 'postcode', 'country', 'telephone'],\n                        'classes': ('collapse',),\n                    }))\n\n\n### Dependencies\n\nThe address extension requires [`incuna-countries`](http://github.com/incuna/incuna-countries). Add `countries` to your `INSTALLED_APPS`.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://incuna.com/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-extensible-profiles",
    "package_url": "https://pypi.org/project/django-extensible-profiles/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-extensible-profiles/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://incuna.com/"
    },
    "release_url": "https://pypi.org/project/django-extensible-profiles/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Generic extensible django user profiles.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 756167,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cde5dfbe71d02c4f7bec9c62f47ca455991d8c94b11cf14e18e6c2b79c361909",
        "md5": "89670c8f00c60c5dc444f5cbb1438bed",
        "sha256": "0985f9bc1a462d911c786dfce8332ed6e83f45ca4f3b064fc389da84cfb15fca"
      },
      "downloads": -1,
      "filename": "django-extensible-profiles-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "89670c8f00c60c5dc444f5cbb1438bed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11026,
      "upload_time": "2012-05-23T12:49:05",
      "upload_time_iso_8601": "2012-05-23T12:49:05.840253Z",
      "url": "https://files.pythonhosted.org/packages/cd/e5/dfbe71d02c4f7bec9c62f47ca455991d8c94b11cf14e18e6c2b79c361909/django-extensible-profiles-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}