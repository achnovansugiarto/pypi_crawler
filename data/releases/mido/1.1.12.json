{
  "info": {
    "author": "Ole Martin Bjorndalen",
    "author_email": "ombdalen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Mido - MIDI Objects for Python\n==============================\n\nMido is a library for working with MIDI messages and ports. It's\ndesigned to be as straight forward and Pythonic as possible:\n\n.. code-block:: python\n\n    >>> import mido\n    >>> output = mido.open_output()\n    >>> output.send(mido.Message('note_on', note=60, velocity=64))\n\n.. code-block:: python\n\n    >>> with input as mido.open_input('SH-201'):\n    ...     for message in input:\n    ...         print(message)\n\n.. code-block:: python\n\n    >>> message = mido.Message('program_change', program=10)\n    >>> message.type\n    'program_change'\n    >>> message.channel = 2\n    >>> message.copy(program=9)\n    <message program_change channel=2 program=9 time=0>\n\n.. code-block:: python\n\n    >>> from mido import MidiFile\n    >>> for message in MidiFile('song.mid').play():\n    ...     output.send(message)\n\nFull documentation at http://mido.readthedocs.org/\n\n\nMain Features\n-------------\n\n* works in Python 2 and 3.\n\n* convenient message objects.\n\n* supports PortMidi, RtMidi and Pygame. New backends are easy to\n  write.\n\n* full support for all 18 messages defined by the MIDI standard.\n\n* standard port API allows all kinds of input and output ports to be\n  used interchangingly. New port types can be written by subclassing\n  and overriding a few methods.\n\n* includes a reusable MIDI parser.\n\n* full support for MIDI files (read, write, create and play) with\n  complete access to every message in the file, including all common\n  meta messages.\n\n* can read and write SYX files (binary and plain text).\n\n* implements (somewhat experimental) MIDI over TCP/IP with socket\n  ports. This allows for example wireless MIDI between two\n  computers.\n\n* includes programs for playing MIDI files, listing ports and\n  serving and forwarding ports over a network.\n\n\nStatus\n------\n\n1.1 is the second stable release.\n\nSee docs/changes.rst for a full list of changes.\n\n\nRequirements\n------------\n\nMido targets Python 2.7 and 3.2.\n\nIf you want to use message ports, you will need `PortMidi\n<http://portmedia.sourceforge.net/portmidi/>`_ installed on your\nsystem. The PortMidi library is loaded on demand, so you can use the\nparser and messages without it.\n\nThe PortMidi wrapper is tested on on Ubuntu and Mac OS X, but may also\nrun on other systems where the ``portmidi.so/dll`` file is available.\n\nAlternative backends are included for `python-rtmidi\n<http://pypi.python.org/pypi/python-rtmidi/>`_ and `Pygame\n<http://www.pygame.org/docs/ref/midi.html>`_. These can be selected\nwith the environment variable ``MIDO_BACKEND`` or by calling\n``mido.set_backend()``.\n\nLike PortMidi, these are loaded on demand.\n\n\nInstalling\n----------\n\nTo install::\n\n    $ pip install mido\n\nThe PortMidi wrapper is written with `ctypes`, so no compilation is\nrequired.\n\nIf you want to use ports, you need the PortMidi shared library. The\nUbuntu package is called ``libportmidi-dev``, while the `MacPorts\n<http://www.macports.org/>`_ and `Homebrew\n<http://mxcl.github.io/homebrew/>`_ packages are called ``portmidi``.\n\nTo build documentation locally::\n\n    python setup.py docs\n\nThis requires Sphinx. The resulting files can be found in\n``docs/_build/``.\n\n\nKnown Bugs\n----------\n\n* in OS X, PortMidi and RtMidi usually hang for a second or two\n  seconds while initializing. This is actually not a Mido bug, but\n  something that happens at a lower level.\n\n* PortMidi in Ubuntu is mistakenly compiled in debug mode, which causes it\n  to print out error message instead of returning an error code::\n\n    PortMidi: `Bad pointer'\n    type ENTER...PortMidi call failed...\n\n  See https://bugs.launchpad.net/ubuntu/+source/portmidi/+bug/890600\n\n  This means here is no way for Mido to catch the error and raise an\n  exception.\n\n  This regularity occurs in two places: in PortMidi when you close a\n  port that has a callback, and in pygame when you close any port.\n\n\nSource Code\n-----------\n\nLatest version of the code: http://github.com/olemb/mido/ .\n\nLatest development version: http://github.com/olemb/mido/tree/develop/\n\n\nLicense\n-------\n\nMido is released under the terms of the `MIT license\n<http://en.wikipedia.org/wiki/MIT_License>`_.\n\n\nContact\n-------\n\nOle Martin Bjorndalen - ombdalen@gmail.com",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://mido.readthedocs.org/",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mido",
    "package_url": "https://pypi.org/project/mido/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mido/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://mido.readthedocs.org/"
    },
    "release_url": "https://pypi.org/project/mido/1.1.12/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "MIDI Objects for Python",
    "version": "1.1.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10309521,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8055a683054583e5f6159bc4c4eb817f731ffc835195721815c7c03e64ec3f2f",
        "md5": "0c34abead43acdc9b7ea28345349e2ba",
        "sha256": "1966a3daddc5548d54b5a34ad1c188939fb89f62a802241bed68cac8c0931bea"
      },
      "downloads": -1,
      "filename": "mido-1.1.12-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c34abead43acdc9b7ea28345349e2ba",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 47011,
      "upload_time": "2014-12-02T11:44:34",
      "upload_time_iso_8601": "2014-12-02T11:44:34.370742Z",
      "url": "https://files.pythonhosted.org/packages/80/55/a683054583e5f6159bc4c4eb817f731ffc835195721815c7c03e64ec3f2f/mido-1.1.12-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bce53f73c15cb81a6a812bf69ae122f4e396dbf82869206014c0e6e05b26637f",
        "md5": "a63bcee8c7e740313418ab11399902a1",
        "sha256": "cf0acfc033b20c66837c2d2db09dea7f5d3d50adeeb55de7a145adb4fb6fee71"
      },
      "downloads": -1,
      "filename": "mido-1.1.12.tar.gz",
      "has_sig": false,
      "md5_digest": "a63bcee8c7e740313418ab11399902a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 73599,
      "upload_time": "2014-12-02T11:44:29",
      "upload_time_iso_8601": "2014-12-02T11:44:29.563365Z",
      "url": "https://files.pythonhosted.org/packages/bc/e5/3f73c15cb81a6a812bf69ae122f4e396dbf82869206014c0e6e05b26637f/mido-1.1.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}