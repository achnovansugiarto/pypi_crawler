{
  "info": {
    "author": "Caleb Hattingh",
    "author_email": "caleb.hattingh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": ".. image:: https://travis-ci.org/cjrh/misu.svg?branch=master\r\n    :target: https://travis-ci.org/cjrh/misu\r\n\r\n.. image:: https://coveralls.io/repos/github/cjrh/misu/badge.svg?branch=master\r\n    :target: https://coveralls.io/github/cjrh/misu?branch=master\r\n\r\n.. image:: https://img.shields.io/pypi/pyversions/misu.svg\r\n    :target: https://pypi.python.org/pypi/misu\r\n\r\n.. image:: https://img.shields.io/github/tag/cjrh/misu.svg\r\n    :target: https://img.shields.io/github/tag/cjrh/misu.svg\r\n\r\n.. image:: https://img.shields.io/badge/install-pip%20install%20misu-ff69b4.svg\r\n    :target: https://img.shields.io/badge/install-pip%20install%20misu-ff69b4.svg\r\n\r\n.. image:: https://img.shields.io/pypi/v/misu.svg\r\n    :target: https://img.shields.io/pypi/v/misu.svg\r\n\r\n.. image:: https://img.shields.io/badge/calver-YYYY.MM.MINOR-22bfda.svg\r\n    :target: http://calver.org/\r\n\r\nmisu\r\n====\r\n\r\n``misu`` is short for \"misura\", which means **measurement** (in\r\nItalian). ``misu`` is a package for doing calculations with in consistent\r\nunits of measurement.\r\n\r\nInstall\r\n-------\r\n\r\nOn Windows, precompiled wheels are provided so all you have to do is\r\nthis:\r\n\r\n.. code-block:: shell\r\n\r\n    pip install misu\r\n\r\nOn Linux, you have to install from a source distribution (sdist). This is\r\nalso on PyPI, but you must already have Cython and numpy present in your\r\ntarget environment. This is because they are required to build *misu*.\r\nThus, you need something like this on Linux:\r\n\r\n.. code-block:: shell\r\n\r\n    $ python3.7 -m venv venv\r\n    $ source venv/bin/activate\r\n    (venv) $ pip install Cython numpy\r\n    (venv) $ pip install misu\r\n\r\n    <lots of compiler output>\r\n\r\nIf you have have experience with making *manylinux* wheels for Linux, I\r\nwould love to get your help to make them for *misu* too!\r\n\r\nDemo\r\n----\r\n\r\nMost of the time you will probably work with ``misu`` interactively, and\r\nit will be most convenient to import the entire namespace:\r\n\r\n.. code:: python\r\n\r\n    from misu import *\r\n\r\n    mass = 100*kg\r\n    print(mass >> lb)\r\n\r\nThe symbol ``kg`` got imported from the ``misu`` package. We redefine\r\nthe shift operator to perform inline conversions. The code above\r\nproduces:\r\n\r\n::\r\n\r\n    220.46226218487757\r\n\r\nThere are many units already defined, and it is easy to add more. Here\r\nwe convert the same quantity into ounces:\r\n\r\n.. code:: python\r\n\r\n    print(mass >> oz)\r\n\r\noutput:\r\n\r\n::\r\n\r\n    3571.4285714285716\r\n\r\nWhat you see above would be useless on its own. What you really need is\r\nto be able to perform consistent calculations with quantities expressed\r\nin different, but compatible units:\r\n\r\n.. code:: python\r\n\r\n    mass = 10*kg + 20*lb\r\n    print(mass)\r\n\r\noutput:\r\n\r\n::\r\n\r\n    19.07 kg\r\n\r\nFor addition and subtraction, ``misu`` will ensure that only consistent\r\nunits can be used. Multiplication and division will produce new units:\r\n\r\n.. code:: python\r\n\r\n    distance = 100*metres\r\n    time = 9.2*seconds\r\n\r\n    speed = distance / time\r\n    print(speed)\r\n\r\noutput:\r\n\r\n::\r\n\r\n    10.87 m/s\r\n\r\nAs before, it is trivially easy to express that quantity in different\r\nunits of compatible dimensions:\r\n\r\n.. code:: python\r\n\r\n    print(speed >> km/hr)\r\n\r\noutput:\r\n\r\n::\r\n\r\n    39.130434782608695\r\n\r\nIntroduction\r\n------------\r\n\r\n``misu`` is a package of handling physical quantities with dimensions.\r\nThis means performing calculations with all the units being tracked\r\ncorrectly. It is possible to add *kilograms per hour* to *ounces per\r\nminute*, obtain the correct answer, and have that answer be reported in,\r\nsay, *pounds per week*.\r\n\r\n``misu`` grew out of a personal need. I have used this code personally\r\nin a (chemical) engineering context for well over a year now (at time of\r\nwriting, Feb 2015). Every feature has been added in response to a\r\npersonal need.\r\n\r\nFeatures\r\n^^^^^^^^\r\n\r\n-  Speed optimized. ``misu`` is very fast! Heavy math code in Python\r\n   will be around only 5X slower when used with ``misu``. This is much\r\n   faster than other quantities packages for Python.\r\n\r\n-  Written as a Cython extension module. Speed benefits carry over when\r\n   using ``misu`` from your own Cython module (a ``.pxd`` is provided\r\n   for linking).\r\n\r\n-  When an operation involving incompatible units is attempted, an\r\n   ``EIncompatibleUnits`` exception is raised, with a clear explanation\r\n   message about which units were inconsistent.\r\n\r\n-  Decorators for functions to enforce dimensions\r\n\r\n.. code:: python\r\n\r\n    @dimensions(x='Length', y='Mass')\r\n    def f(x, y):\r\n        return x/y\r\n\r\n    f(2*m, 3*kg)         # Works\r\n    f(200*feet, 3*tons)  # Works\r\n\r\n    f(2*joules, 3*kelvin)  # raises AssertionError\r\n    f(2*m, 3)              # raises AssertionError\r\n\r\n-  An operator for easily stripping the units component to obtain a\r\n   plain numerical value\r\n\r\n.. code:: python\r\n\r\n    mass = 100 * kg\r\n    mass_lb = mass >> lb\r\n\r\n    duty = 50 * MW\r\n    duty_BTU_hr = duty >> BTU / hr\r\n\r\n-  An enormous amount of redundancy in the naming of various units. This\r\n   means that ``m``, ``metre``, ``metres``, ``METRE``, ``METRES`` will\r\n   all work. The reason for this is that from my own experience, when\r\n   working interactively (e.g. in the IPython Notebook) it can be very\r\n   distracting to incorrectly guess the name for a particular unit, and\r\n   have to look it up. ``ft``, ``foot`` and ``feet`` all work, ``m3``\r\n   means ``m**3`` and so on.\r\n-  You can specify a *reporting unit* for a dimension, meaning that you\r\n   could have all lengths be reported in \"feet\" by default for example.\r\n-  You can specify a *reporting format* for a particular unit.\r\n\r\nThere are other projects, why ``misu``?\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nThere are several units systems for Python, but the primary motivating\r\nuse-case is that ``misu`` is written as a Cython module and is by far\r\nthe fastest\\* for managing units available in Python.\r\n\r\n\\*\\ *Except for ``NumericalUnits``, which is a special case*\r\n\r\n\\*\\*\\ *I haven't actually checked that this statement is true for all of\r\nthem yet.*\r\n\r\nGeneral usage\r\n-------------\r\n\r\nFor speed-critical code, the application of unit operations can still be\r\ntoo slow. In these situations it is typical to first cast quantities\r\ninto numerical values (doubles, say), perform the speed-critical\r\ncalculations (perhaps call into a C-library), and then re-cast the\r\nresult back into a quantity and return that from a function.\r\n\r\n.. code:: python\r\n\r\n    @dimensions(x='Length', y='Mass')\r\n    def f(x, y):\r\n        x = x >> metre\r\n        y = y >> ounces\r\n        <code that assumes meters and ounces, returns value in BTU>\r\n        return answer * BTU\r\n\r\nThis way you can still easily wrap performance-critical calculations\r\nwith robust unit-handling.\r\n\r\nInspiration\r\n^^^^^^^^^^^\r\n\r\nThe inspiration for ``misu`` was\r\n`Frink <http://futureboy.us/frinkdocs/>`__ by Alan Eliasen. It is\r\n*wonderful*, but I need to work with units in the IPython Notebook, and\r\nwith all my other Python code.\r\n\r\nThere are a bunch of other similar projects. I have not used any of them\r\nenough yet to provide a fair comparison:\r\n\r\n-  `astropy.units <http://astropy.readthedocs.org/en/latest/units/>`__\r\n-  `Buckingham <http://code.google.com/p/buckingham/>`__\r\n-  `DimPy <http://www.inference.phy.cam.ac.uk/db410/>`__\r\n-  `Magnitude <http://juanreyero.com/open/magnitude/>`__\r\n-  `NumericalUnits <https://pypi.python.org/pypi/numericalunits>`__\r\n-  `Pint <http://pint.readthedocs.org/>`__\r\n-  `Python-quantities <https://pypi.python.org/pypi/quantities>`__\r\n-  `Scalar <http://russp.us/scalar-guide.htm>`__\r\n-  `Scientific.Physics.PhysicalQuantities <http://dirac.cnrs-orleans.fr/ScientificPython/ScientificPythonManual/Scientific.Physics.PhysicalQuantities-module.html>`__\r\n-  `SciMath <http://scimath.readthedocs.org/en/latest/units/intro.html>`__\r\n-  `sympy.physics.units <http://docs.sympy.org/dev/modules/physics/units.html>`__\r\n-  `udunitspy <https://github.com/blazetopher/udunitspy>`__\r\n-  `Units <https://bitbucket.org/adonohue/units/>`__\r\n-  `Unum <https://bitbucket.org/kiv/unum/>`__\r\n\r\n\r\n\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cjrh/misu",
    "keywords": "math science engineering physics quantities units",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "misu",
    "package_url": "https://pypi.org/project/misu/",
    "platform": "",
    "project_url": "https://pypi.org/project/misu/",
    "project_urls": {
      "Homepage": "https://github.com/cjrh/misu"
    },
    "release_url": "https://pypi.org/project/misu/1.0.5/",
    "requires_dist": [
      "cython",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Fast quantities",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4398481,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfa34bfc1e785c7886101f0990c51f9ed8ac12f7b35977c2a400eb607f4657e3",
        "md5": "fef32c13d4c5e72efb22123940698fa6",
        "sha256": "e70ea20c347c3d1e5d94d1ffa6f59465b7be834aaba6160de14d2508e6cc64ea"
      },
      "downloads": -1,
      "filename": "misu-1.0.5-cp27-cp27m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "fef32c13d4c5e72efb22123940698fa6",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 128274,
      "upload_time": "2018-08-11T04:29:15",
      "upload_time_iso_8601": "2018-08-11T04:29:15.813668Z",
      "url": "https://files.pythonhosted.org/packages/bf/a3/4bfc1e785c7886101f0990c51f9ed8ac12f7b35977c2a400eb607f4657e3/misu-1.0.5-cp27-cp27m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0519cfb98550c7d5c1d5fa7a5e2d4bae8a091ccb5aa755bd3cce92279efed09",
        "md5": "64a2438776409aa06d4a8e9a125ac1cd",
        "sha256": "6904c6fd9abde48326f020b9ca999d858a1242b67ef978b71f9d7dcce72bcadc"
      },
      "downloads": -1,
      "filename": "misu-1.0.5-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "64a2438776409aa06d4a8e9a125ac1cd",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 132141,
      "upload_time": "2018-08-11T04:29:20",
      "upload_time_iso_8601": "2018-08-11T04:29:20.034211Z",
      "url": "https://files.pythonhosted.org/packages/e0/51/9cfb98550c7d5c1d5fa7a5e2d4bae8a091ccb5aa755bd3cce92279efed09/misu-1.0.5-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba5db002016b369c240032294ba9b96a277bee8101090ca29d20299baa724bce",
        "md5": "5bc36dbc3cbd4385c4168c050eb06ecb",
        "sha256": "27b08ed21ccbf0a1bbd4d5ea52fdda2af409820c6a3a8003b85a40545f73af16"
      },
      "downloads": -1,
      "filename": "misu-1.0.5-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "5bc36dbc3cbd4385c4168c050eb06ecb",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 132072,
      "upload_time": "2018-08-11T04:29:24",
      "upload_time_iso_8601": "2018-08-11T04:29:24.185828Z",
      "url": "https://files.pythonhosted.org/packages/ba/5d/b002016b369c240032294ba9b96a277bee8101090ca29d20299baa724bce/misu-1.0.5-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efdb20444de510948304001f0b6f6d17fe49af638d0c3128627aaa86dc3fec2b",
        "md5": "1c58ffb97944639f435524d7b78c5642",
        "sha256": "12288f0b82687c3561c465b8dc63b18ca312f00ed52f86ff320d598f3c21e3e2"
      },
      "downloads": -1,
      "filename": "misu-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "1c58ffb97944639f435524d7b78c5642",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 187676,
      "upload_time": "2018-08-11T04:29:33",
      "upload_time_iso_8601": "2018-08-11T04:29:33.524186Z",
      "url": "https://files.pythonhosted.org/packages/ef/db/20444de510948304001f0b6f6d17fe49af638d0c3128627aaa86dc3fec2b/misu-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}