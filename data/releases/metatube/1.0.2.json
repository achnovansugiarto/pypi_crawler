{
  "info": {
    "author": "Christoph Fink",
    "author_email": "christoph.fink@helsinki.fi",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Download YouTube metadata for videos relating to a search query\n\nThis is a Python script that can download metadata (including comments and likes) for YouTube videos relating to a search query. Uses the [Youtube Data API v3](https://developers.google.com/youtube/v3/docs). Metadata is saved in a PostgreSQL database.\n\n*Metatube* is conceived in a fashion that it pauses retrieval once your daily quota is used up (the default as of this writing is 10,000 requests per day) and waits until quota refill. If interrupted, *metatube* will, upon restart, first fill gaps in the download history, then continue downloading “into the future”. Once caught up to within ten minutes of the current time, *metatube* exits.\n\nIf you use *metatube* for scientific research, please cite it in your publication: <br />\nFink, C. (2020): *metatube: Python script to download YouTube metadata*. [doi:10.5281/zenodo.3773302](https://doi.org/10.5281/zenodo.3773302).\n\n\n### Dependencies\n\nThe script is written in Python 3 and depends on the Python modules [dateparser](https://dateparser.readthedocs.io/), [psycopg2](https://www.psycopg.org/), [PyYaml](https://pyyaml.org/) and [Requests](https://2.python-requests.org/en/master/).\n\nTo install dependencies on a Debian-based system, run:\n\n```shell\napt-get update -y &&\napt-get install -y python3-dev python3-pip python3-virtualenv\n```\n\n(There’s an Archlinux AUR package pulling in all dependencies, see further down)\n\n\n### Installation\n\n- *using `pip` or similar:*\n\n```shell\npip3 install metatube\n```\n\n- *OR: manually:*\n\n    - Clone this repository\n\n    ```shell\n    git clone https://gitlab.com/helics-lab/metatube.git\n    ```\n\n    - Change to the cloned directory    \n    - Use the Python `setuptools` to install the package:\n\n    ```shell\n    cd metatube\n    python3 ./setup.py install\n    ```\n\n- *OR: (Arch Linux only) from [AUR](https://aur.archlinux.org/packages/python-metatube):*\n\n```shell\n# e.g. using yay\nyay python-metatube\n```\n\n### Configuration\n\nCopy the example configuration file [metatube.yml.example](https://gitlab.com/helics-lab/metatube/-/raw/master/metatube.yml.example) to a suitable location, depending on your operating system: \n\n- on Linux systems:\n    - system-wide configuration: `/etc/metatube.yml`\n    - per-user configuration: \n        - `~/.config/metatube.yml` OR\n        - `${XDG_CONFIG_HOME}/metatube.yml`\n- on MacOS systems:\n    - per-user configuration:\n        - `${XDG_CONFIG_HOME}/metatube.yml`\n- on Microsoft Windows systems:\n    - per-user configuration:\n        `%APPDATA%\\metatube.yml`\n\nAdapt the configuration:\n\n- Configure a PostgreSQL connection string (`connection_string`), pointing to an existing database\n- Configure an API [access key](https://developers.google.com/youtube/registering_an_application) to the Youtube Data API v3 (`youtube_api_key`).\n- Define search terms (`search_terms`)\n\nAll of these configuration options can alternatively be supplied as command line arguments to `metatube` (see [Usage](#command-line-executable)) or as a `config` `dict` directly to the constructor of `YoutubeVideoMetadataDownloader`. Command line options (see `metatube --help`) or `config` `dict` both override config file.\n\n### Usage\n\n#### Command line executable\n\n```shell\nmetatube \\\n    --postgresql-connection-string \"dbname=metatube\" \\\n    --youtube-api-key \"abcdefghijklmn\" \\\n    \"how to build a tallbike\"\n\n```\n\n#### Python\n\nImport the `metatube` module. Instantiate a `YoutubeVideoMetadataDownloader`, optionally supply a `config` dictionary. Then run the instance’s `download()` method.\n\n```python\nimport metatube\n\n# config from config file\ndownloader = YoutubeVideoDownloader()\ndownloader.download()\n\n# config from config file, \n# overriding `search_terms`\ndownloader = YoutubeVideoDownloader({\n    \"search_terms\": \"Critical Mass Vladivostok\"\n})\ndownloader.download()\n\n# entire config from dictionary\ndownloader = YoutubeVideoDownloader({\n    \"youtube_api_key\": \"opqrstuvwxyz\",\n    \"connection_string\": \"dbname=metatube host=server1 user=bicyclelover123\",\n    \"search_terms\": \"dashcam bicycle commute albuquerque\"\n})\ndownloader.download()\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/helics-lab/metatube",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metatube",
    "package_url": "https://pypi.org/project/metatube/",
    "platform": "",
    "project_url": "https://pypi.org/project/metatube/",
    "project_urls": {
      "Homepage": "https://gitlab.com/helics-lab/metatube"
    },
    "release_url": "https://pypi.org/project/metatube/1.0.2/",
    "requires_dist": [
      "dateparser",
      "psycopg2",
      "pyaml",
      "requests"
    ],
    "requires_python": "",
    "summary": "Download YouTube metadata for videos relating to a search query",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13057859,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d038b3078def4d6acc7467fea706f9aca301796e54f68fc18dee9d368af3f6c",
        "md5": "3d1ac48b3192834ec5b35620a931649e",
        "sha256": "b34fd1110e15aae44ee23a7ddcf10a6690039f28241b63dd9446892b90449be7"
      },
      "downloads": -1,
      "filename": "metatube-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d1ac48b3192834ec5b35620a931649e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 46014,
      "upload_time": "2020-12-04T10:14:08",
      "upload_time_iso_8601": "2020-12-04T10:14:08.936029Z",
      "url": "https://files.pythonhosted.org/packages/8d/03/8b3078def4d6acc7467fea706f9aca301796e54f68fc18dee9d368af3f6c/metatube-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e161be19f5f45fadea2be1f97b8731b3133b8ee0209d76b5769118025070cc9",
        "md5": "b8dd5c954eea44c9b54a4e0f861cc84a",
        "sha256": "64ac7e34cc33950a3111cac9a4cd4db5e6524b0aa3e9bae94a5fd41ca665e4f1"
      },
      "downloads": -1,
      "filename": "metatube-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b8dd5c954eea44c9b54a4e0f861cc84a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45295,
      "upload_time": "2020-12-04T10:14:10",
      "upload_time_iso_8601": "2020-12-04T10:14:10.243016Z",
      "url": "https://files.pythonhosted.org/packages/0e/16/1be19f5f45fadea2be1f97b8731b3133b8ee0209d76b5769118025070cc9/metatube-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}