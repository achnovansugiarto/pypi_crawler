{
  "info": {
    "author": "Christoph Fink",
    "author_email": "christoph.fink@helsinki.fi",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Download YouTube metadata for videos relating to a search query\n\nThis is a Python script that can download metadata (including comments and likes) for YouTube videos relating to a search query. Uses the [YouTube Data API v3](https://developers.google.com/youtube/v3/docs). Metadata is saved in an `sqlalchemy` compatible database, for instance, PostgreSQL or SQLite.\n\n*Metatube* is pauses retrieval once your daily quota is used up (the default as of this writing is 10,000 requests per day) and waits until quota refill. If interrupted, *metatube* will, upon restart, first fill gaps in the download history, then continue downloading ‘into the future’. Once caught up to within ten minutes of the current time, *metatube* exits.\n\nIf you use *metatube* for scientific research, please cite it in your publication: <br />\nFink, C. (2020): *metatube: Python script to download YouTube metadata*. [doi:10.5281/zenodo.3773302](https://doi.org/10.5281/zenodo.3773302).\n\n\n### Installation\n\n```shell\npip install metatube\n```\n\n### Configuration\n\nCopy the example configuration file [metatube.yml.example](https://gitlab.com/helics-lab/metatube/-/raw/master/metatube.yml.example) to a suitable location, depending on your operating system:\n\n- on Linux systems:\n    - system-wide configuration: `/etc/metatube.yml`\n    - per-user configuration:\n        - `~/.config/metatube.yml` OR\n        - `${XDG_CONFIG_HOME}/metatube.yml`\n- on MacOS systems:\n    - per-user configuration:\n        - `${XDG_CONFIG_HOME}/metatube.yml`\n- on Microsoft Windows systems:\n    - per-user configuration:\n        `%APPDATA%\\metatube.yml`\n\nAdapt the configuration:\n\n- Configure a database connection string (`connection_string`), pointing to an existing database (the format is described in the [sqlalchemy documentation](https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls).\n- Configure an API [access key](https://developers.google.com/youtube/registering_an_application) to the YouTube Data API v3 (`youtube_api_key`).\n- Define search terms (`search_terms`)\n\nAll of these configuration options can alternatively be supplied as command line arguments to `metatube` (see [Usage](#command-line-executable)) or as a `config` `dict` directly to the constructor of `YouTubeVideoMetadataDownloader`. Command line options (see `metatube --help`) or `config` `dict` both override config file.\n\n### Usage\n\n#### Command line executable\n\n```shell\nmetatube \\\n    --postgresql-connection-string \"postgresql:///metatube\" \\\n    --youtube-api-key \"abcdefghijklmn\" \\\n    \"how to build a tallbike\"\n\n```\n\n#### Python\n\nImport the `metatube` module. Instantiate a `YouTubeVideoMetadataDownloader`, optionally supply a `config` dictionary. Then run the instance’s `download()` method.\n\n```python\nimport metatube\n\n# config from config file\ndownloader = YouTubeVideoMetadataDownloader()\ndownloader.download()\n\n# config from config file,\n# overriding `search_terms`\ndownloader = YouTubeVideoMetadataDownloader({\n    \"search_terms\": \"Critical Mass Vladivostok\"\n})\ndownloader.download()\n\n# entire config from dictionary\ndownloader = YouTubeVideoMetadataDownloader({\n    \"youtube_api_key\": \"opqrstuvwxyz\",\n    \"connection_string\": \"postgresql://server1/bicyclelover123:supersecretpassword@metatube\",\n    \"search_terms\": \"dashcam bicycle commute albuquerque\"\n})\ndownloader.download()\n\n```\n\n### Data privacy\n\nBy default, metatube pseudonymises downloaded metadata, i.e. it replaces (direct) identifiers with randomised identifiers (generated using hashes, i.e. ‘one-way encryption’). This serves as one step of a responsible data processing workflow. However, the text and descriptions of videos and comments might nevertheless qualify as *indirect identifiers*, as they, combined or on their own, might allow re-identification of the commenter or uploader. If you want to use data downloaded using metatube in a GDPR-compliant fashion, you have to follow up the data collection stage with *data minimisation* and further pseudonymisation or anonymisation efforts.\n\nMetatube can keep original identifiers (i.e. skip pseudonymisation). Set the according command line argument, configuration file or `config` `dict` (see the [sample config file](metatube.yml.example) and below). Ensure that you fulfil all legal and organisational requirements to handle personal information before you decide to collect non-pseudonyismed data.\n\n```python\nimport metatube\n\ndownloader = YouTubeVideoMetadataDownloader({\n    \"search_terms\": \"Winter Cycling Congress\",\n    \"pseudonymise\": False  # get legal/ethics advice before doing this\n})\ndownloader.download()\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/christoph.fink/metatube",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metatube",
    "package_url": "https://pypi.org/project/metatube/",
    "platform": "",
    "project_url": "https://pypi.org/project/metatube/",
    "project_urls": {
      "Homepage": "https://gitlab.com/christoph.fink/metatube"
    },
    "release_url": "https://pypi.org/project/metatube/1.0.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Download YouTube metadata for videos relating to a search query",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13057859,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9cb827356c4a6cd03277e2022f515676c0935c640fa1257121553132950eec6d",
        "md5": "2da4dcc00c6e2b5c476c9431456c5abe",
        "sha256": "2d03cc34390cad067d39198a71ec9801deaad4a578f269d0410fbb10529abfac"
      },
      "downloads": -1,
      "filename": "metatube-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "2da4dcc00c6e2b5c476c9431456c5abe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27146,
      "upload_time": "2022-03-02T13:43:23",
      "upload_time_iso_8601": "2022-03-02T13:43:23.585261Z",
      "url": "https://files.pythonhosted.org/packages/9c/b8/27356c4a6cd03277e2022f515676c0935c640fa1257121553132950eec6d/metatube-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}