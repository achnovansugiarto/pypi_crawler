{
  "info": {
    "author": "Silvan MÃ¼hlemann",
    "author_email": "silvan.muehlemann@muehlemann-popp.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Topic :: Software Development"
    ],
    "description": "Django-Requestlog\n=================\n\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=muehlemann-popp_requestlog&metric=alert_status)](https://sonarcloud.io/dashboard?id=muehlemann-popp_requestlog) [![Coverage](https://sonarcloud.io/api/project_badges/measure?project=muehlemann-popp_requestlog&metric=coverage)](https://sonarcloud.io/dashboard?id=muehlemann-popp_requestlog) \n\nMiddleware who logs each request with their headers and the body into to PostgreSQL for diagnostic purposes. \n\n\nWhy Logging to the database?\n----------------------------\nLogging to the database instead of to a logfile has the advantage that it can be \nsearched by people not having access to the server logs. Of course this only works \nfor low traffic sites. And I recommend to purge those logs regularly with the provided \nmanage command or celery task.\n\nThe log is written to the table `requestlog_requestlog`.\n\nThe body field is truncated at 1024 bytes.\n\nCredits\n-------\nBased on https://github.com/ASKBOT/django-request-logging\n\n\nSettings\n--------\n\nRequest logging has to be explicitely enabled (for performance reasons):\n\n    REQUEST_LOGGING_ENABLED = True\n    \nYou can ask the service to ignore certain fields from the querystring and the header. You do this by setting\nthe name of the fields in the Django settings variable `REQUEST_LOGGING_HIDE_PARAMETERS`. For example like this:\n\n    REQUEST_LOGGING_HIDE_PARAMETERS = [ 'HTTP_AUTHORIZATION', 'password' ]\n\nFilter certain IPs (e.g. internal Kubernetes health check requests)\n\n    REQUEST_LOGGING_IGNORE_IPS = [ '10.2.3.4' ]\n\nFilter certain paths by Regex (including query string):\n\n    REQUEST_LOGGING_IGNORE_PATHS = [ '/admin/login' ]\n\nPurge old entries\n-----------------\n\nYou can use the following management command which deletes entries older than 3 days:\n\n    ./manage.py requestlog_purge\n\nOr you trigger the task with Celery beat by adding a shared task to your projects task list:\n\n    \nIn your settings: \n\n    CELERY_BEAT_SCHEDULE = {\n        ...    \n        'requestlog.tasks.delete_old_requestlog_entries': {\n            'task': 'requestlog.tasks.delete_old_requestlog_entries',\n            'schedule': crontab(hour=2, minute=0)\n            'args': (30,) # This is the number of days to keep the entries \n        },\n    }\n    \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/muehlemann-popp/requestlog",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-requestlog",
    "package_url": "https://pypi.org/project/django-requestlog/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-requestlog/",
    "project_urls": {
      "Homepage": "https://github.com/muehlemann-popp/requestlog"
    },
    "release_url": "https://pypi.org/project/django-requestlog/1.1.7/",
    "requires_dist": [
      "Django (>=1.9)",
      "httplib2",
      "psycopg2-binary"
    ],
    "requires_python": "",
    "summary": "Middleware to log http requests to postgresql",
    "version": "1.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11618346,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f91c0120b030882c97849be2f4646be1f182e7adec0cb0070275ad4c20dc068",
        "md5": "5f36bb59757a651ed2c10be780913670",
        "sha256": "6b46dba10aea5ab66f3a7cbc9dc23d2577e96941851dd47ac02f5c77b69824ca"
      },
      "downloads": -1,
      "filename": "django_requestlog-1.1.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f36bb59757a651ed2c10be780913670",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11667,
      "upload_time": "2021-10-03T18:35:07",
      "upload_time_iso_8601": "2021-10-03T18:35:07.432495Z",
      "url": "https://files.pythonhosted.org/packages/4f/91/c0120b030882c97849be2f4646be1f182e7adec0cb0070275ad4c20dc068/django_requestlog-1.1.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8af3bd4cd80c4e341b2d9b06ca9a10db4b15eed3bf2fd0d76292acc4d902ce4",
        "md5": "9c98464d314833025e2d95b199274e39",
        "sha256": "3c5db280057190dcd8fa72cfcd880d7974147cea2eb9dc75b758723b36b105fa"
      },
      "downloads": -1,
      "filename": "django-requestlog-1.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "9c98464d314833025e2d95b199274e39",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8360,
      "upload_time": "2021-10-03T18:35:09",
      "upload_time_iso_8601": "2021-10-03T18:35:09.200595Z",
      "url": "https://files.pythonhosted.org/packages/a8/af/3bd4cd80c4e341b2d9b06ca9a10db4b15eed3bf2fd0d76292acc4d902ce4/django-requestlog-1.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}