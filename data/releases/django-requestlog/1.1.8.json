{
  "info": {
    "author": "Silvan MÃ¼hlemann",
    "author_email": "silvan.muehlemann@muehlemann-popp.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Topic :: Software Development"
    ],
    "description": "Django-Requestlog\n=================\n\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=muehlemann-popp_requestlog&metric=alert_status)](https://sonarcloud.io/dashboard?id=muehlemann-popp_requestlog) [![Coverage](https://sonarcloud.io/api/project_badges/measure?project=muehlemann-popp_requestlog&metric=coverage)](https://sonarcloud.io/dashboard?id=muehlemann-popp_requestlog) \n\nMiddleware who logs each request with their headers and the body into to PostgreSQL for diagnostic purposes. \n\n\nWhy Logging to the database?\n----------------------------\nLogging to the database instead of to a logfile has the advantage that it can be \nsearched by people not having access to the server logs. Of course this only works \nfor low traffic sites. And I recommend to purge those logs regularly with the provided \nmanage command or celery task.\n\nWhat is logged?\n---------------\n\nThe log is written to the table `requestlog_requestlog`.\n\n* timestamp\n* client IP address\n* django user-id\n* method\n* URL\n* header fields\n* cookies\n* query parameter\n* POST body\n* HTTP status code\n* the first 1024 of the response\n\nCredits\n-------\nBased on https://github.com/ASKBOT/django-request-logging\n\n\nSettings\n--------\n\nRequest logging has to be explicitely enabled (for performance reasons):\n\n    REQUEST_LOGGING_ENABLED = True\n    \nYou can ask the service to ignore certain fields from the querystring and the header. You do this by setting\nthe name of the fields in the Django settings variable `REQUEST_LOGGING_HIDE_PARAMETERS`. For example like this:\n\n    REQUEST_LOGGING_HIDE_PARAMETERS = [ 'HTTP_AUTHORIZATION', 'password' ]\n\nFilter certain IPs (e.g. internal Kubernetes health check requests)\n\n    REQUEST_LOGGING_IGNORE_IPS = [ '10.2.3.4' ]\n\nFilter certain paths by Regex (including query string):\n\n    REQUEST_LOGGING_IGNORE_PATHS = [ '/admin/login' ]\n\nPurge old entries\n-----------------\n\nYou can use the following management command which deletes entries older than 3 days:\n\n    ./manage.py requestlog_purge\n\nOr you trigger the task with Celery beat by adding a shared task to your projects task list:\n\n    \nIn your settings: \n\n    CELERY_BEAT_SCHEDULE = {\n        ...    \n        'requestlog.tasks.delete_old_requestlog_entries': {\n            'task': 'requestlog.tasks.delete_old_requestlog_entries',\n            'schedule': crontab(hour=2, minute=0)\n            'args': (30,) # This is the number of days to keep the entries \n        },\n    }\n    \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/muehlemann-popp/requestlog",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-requestlog",
    "package_url": "https://pypi.org/project/django-requestlog/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-requestlog/",
    "project_urls": {
      "Homepage": "https://github.com/muehlemann-popp/requestlog"
    },
    "release_url": "https://pypi.org/project/django-requestlog/1.1.8/",
    "requires_dist": [
      "Django (>=1.9)",
      "httplib2",
      "psycopg2-binary"
    ],
    "requires_python": "",
    "summary": "Middleware to log http requests to postgresql",
    "version": "1.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11618346,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d811ced4de474146fe2dfaa1065f1c921d63238d82e9d21d16d8be9407b7f9d",
        "md5": "ac4b27d76efa5ef590ef30e737741ab7",
        "sha256": "21e6606b852138e2cd8766bc14916798bbadca39affa5f417fcbaa89b2488ac6"
      },
      "downloads": -1,
      "filename": "django_requestlog-1.1.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac4b27d76efa5ef590ef30e737741ab7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11752,
      "upload_time": "2021-10-03T18:44:24",
      "upload_time_iso_8601": "2021-10-03T18:44:24.766127Z",
      "url": "https://files.pythonhosted.org/packages/0d/81/1ced4de474146fe2dfaa1065f1c921d63238d82e9d21d16d8be9407b7f9d/django_requestlog-1.1.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eeca5fb56e5f3fdda2bc32f16d108ca8c4a279cba62a85f0da292fff99b63ac2",
        "md5": "c59b1650da720fa82c2a0e3b023a3b1d",
        "sha256": "93250a3be8392c9a7c222fae59aa541fb38efc056ac469a40647f44b9f6304cd"
      },
      "downloads": -1,
      "filename": "django-requestlog-1.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "c59b1650da720fa82c2a0e3b023a3b1d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8420,
      "upload_time": "2021-10-03T18:44:26",
      "upload_time_iso_8601": "2021-10-03T18:44:26.354439Z",
      "url": "https://files.pythonhosted.org/packages/ee/ca/5fb56e5f3fdda2bc32f16d108ca8c4a279cba62a85f0da292fff99b63ac2/django-requestlog-1.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}