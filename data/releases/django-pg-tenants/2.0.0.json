{
  "info": {
    "author": "Vinta Software",
    "author_email": "contact@vinta.com.br",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Database",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "django-pg-tenants\n=====================\n\n|PyPi version| |PyPi downloads| |Python versions| |Travis CI| |PostgreSQL|\n\nThis is a fork of [django-tenant-schemas](https://github.com/bernardopires/django-tenant-schemas).\n\nThis application enables `django`_ powered websites to have multiple\ntenants via `PostgreSQL schemas`_. A vital feature for every\nSoftware-as-a-Service website.\n\nDjango provides currently no simple way to support multiple tenants\nusing the same project instance, even when only the data is different.\nBecause we don't want you running many copies of your project, you'll be\nable to have:\n\n-  Multiple customers running on the same instance\n-  Shared and Tenant-Specific data\n-  Tenant View-Routing\n\nWhat are schemas\n----------------\n\nA schema can be seen as a directory in an operating system, each\ndirectory (schema) with it's own set of files (tables and objects). This\nallows the same table name and objects to be used in different schemas\nwithout conflict. For an accurate description on schemas, see\n`PostgreSQL's official documentation on schemas`_.\n\nWhy schemas\n-----------\n\nThere are typically three solutions for solving the multitenancy\nproblem.\n\n1. Isolated Approach: Separate Databases. Each tenant has it's own\n   database.\n\n2. Semi Isolated Approach: Shared Database, Separate Schemas. One\n   database for all tenants, but one schema per tenant.\n\n3. Shared Approach: Shared Database, Shared Schema. All tenants share\n   the same database and schema. There is a main tenant-table, where all\n   other tables have a foreign key pointing to.\n\nThis application implements the second approach, which in our opinion,\nrepresents the ideal compromise between simplicity and performance.\n\n-  Simplicity: barely make any changes to your current code to support\n   multitenancy. Plus, you only manage one database.\n-  Performance: make use of shared connections, buffers and memory.\n\nEach solution has it's up and down sides, for a more in-depth\ndiscussion, see Microsoft's excellent article on `Multi-Tenant Data\nArchitecture`_.\n\nHow it works\n------------\n\nTenants are identified via their host name (i.e tenant.domain.com). This\ninformation is stored on a table on the ``public`` schema. Whenever a\nrequest is made, the host name is used to match a tenant in the\ndatabase. If there's a match, the search path is updated to use this\ntenant's schema. So from now on all queries will take place at the\ntenant's schema. For example, suppose you have a tenant ``customer`` at\nhttp://customer.example.com. Any request incoming at\n``customer.example.com`` will automatically use ``customer``\\ 's schema\nand make the tenant available at the request. If no tenant is found, a\n404 error is raised. This also means you should have a tenant for your\nmain domain, typically using the ``public`` schema. For more information\nplease read the `setup`_ section.\n\nWhat can this app do?\n---------------------\n\nAs many tenants as you want\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEach tenant has its data on a specific schema. Use a single project\ninstance to serve as many as you want.\n\nTenant-specific and shared apps\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTenant-specific apps do not share their data between tenants, but you\ncan also have shared apps where the information is always available and\nshared between all.\n\nTenant View-Routing\n~~~~~~~~~~~~~~~~~~~\n\nYou can have different views for ``http://customer.example.com/`` and\n``http://example.com/``, even though Django only uses the string after\nthe host name to identify which view to serve.\n\nMagic\n~~~~~\n\nEveryone loves magic! You'll be able to have all this barely having to\nchange your code!\n\nSetup & Documentation\n---------------------\n\n**This is just a short setup guide**, it is **strongly** recommended\nthat you read the complete version at\n`django-pg-tenants.readthedocs.io`_.\n\nYour ``DATABASE_ENGINE`` setting needs to be changed to\n\n.. code-block:: python\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'tenant_schemas.postgresql_backend',\n            # ..\n        }\n    }\n\nAdd the middleware ``tenant_schemas.middleware.TenantMiddleware`` to the\ntop of ``MIDDLEWARE_CLASSES``, so that each request can be set to use\nthe correct schema.\n\n.. code-block:: python\n\n    MIDDLEWARE_CLASSES = (\n        'tenant_schemas.middleware.TenantMiddleware',\n        #...\n    )\n\nAdd ``tenant_schemas.routers.TenantSyncRouter`` to your `DATABASE_ROUTERS`\nsetting, so that the correct apps can be synced, depending on what's\nbeing synced (shared or tenant).\n\n.. code-block:: python\n\n    DATABASE_ROUTERS = (\n        'tenant_schemas.routers.TenantSyncRouter',\n    )\n\nAdd ``tenant_schemas`` to your ``INSTALLED_APPS``.\n\nCreate your tenant model\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    from django.db import models\n    from tenant_schemas.models import TenantMixin\n\n    class Client(TenantMixin):\n        name = models.CharField(max_length=100)\n        paid_until =  models.DateField()\n        on_trial = models.BooleanField()\n        created_on = models.DateField(auto_now_add=True)\n\nDefine on ``settings.py`` which model is your tenant model. Assuming you\ncreated ``Client`` inside an app named ``customers``, your\n``TENANT_MODEL`` should look like this:\n\n.. code-block:: python\n\n    TENANT_MODEL = \"customers.Client\" # app.Model\n\nNow run ``migrate_schemas`` to sync your apps to the ``public`` schema.\n\n::\n\n    python manage.py migrate_schemas --shared\n\nCreate your tenants just like a normal django model. Calling ``save``\nwill automatically create and sync/migrate the schema.\n\n.. code-block:: python\n\n    from customers.models import Client\n\n    # create your public tenant\n    tenant = Client(domain_url='tenant.my-domain.com',\n                    schema_name='tenant1',\n                    name='My First Tenant',\n                    paid_until='2014-12-05',\n                    on_trial=True)\n    tenant.save()\n\nAny request made to ``tenant.my-domain.com`` will now automatically set\nyour PostgreSQL's ``search_path`` to ``tenant1`` and ``public``, making\nshared apps available too. This means that any call to the methods\n``filter``, ``get``, ``save``, ``delete`` or any other function\ninvolving a database connection will now be done at the tenant's schema,\nso you shouldn't need to change anything at your views.\n\nYou're all set, but we have left key details outside of this short\ntutorial, such as creating the public tenant and configuring shared and\ntenant specific apps. Complete instructions can be found at\n`django-pg-tenants.readthedocs.io`_.\n\n\n\n.. _django: https://www.djangoproject.com/\n.. _PostgreSQL schemas: http://www.postgresql.org/docs/9.1/static/ddl-schemas.html\n.. _PostgreSQL's official documentation on schemas: http://www.postgresql.org/docs/9.1/static/ddl-schemas.html\n.. _Multi-Tenant Data Architecture: http://msdn.microsoft.com/en-us/library/aa479086.aspx\n\n.. |PyPi version| image:: https://img.shields.io/pypi/v/django-pg-tenants.svg\n   :target: https://pypi.python.org/pypi/django-pg-tenants\n.. |PyPi downloads| image:: https://img.shields.io/pypi/dm/django-pg-tenants.svg\n   :target: https://pypi.python.org/pypi/django-pg-tenants\n.. |Python versions| image:: https://img.shields.io/pypi/pyversions/django-pg-tenants.svg\n.. |Travis CI| image:: https://travis-ci.org/vintasoftware/django-pg-tenants.svg?branch=master\n   :target: https://travis-ci.org/vintasoftware/django-pg-tenants\n.. |PostgreSQL| image:: https://img.shields.io/badge/PostgreSQL-9.2%2C%209.3%2C%209.4%2C%209.5%2C%209.6-blue.svg\n.. _setup: https://django-pg-tenants.readthedocs.io/en/latest/install.html\n.. _django-pg-tenants.readthedocs.io: https://django-pg-tenants.readthedocs.io/en/latest/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vintasoftware/django-pg-tenants",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pg-tenants",
    "package_url": "https://pypi.org/project/django-pg-tenants/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pg-tenants/",
    "project_urls": {
      "Homepage": "https://github.com/vintasoftware/django-pg-tenants"
    },
    "release_url": "https://pypi.org/project/django-pg-tenants/2.0.0/",
    "requires_dist": [
      "Django (>=1.11)",
      "ordered-set",
      "psycopg2-binary",
      "six"
    ],
    "requires_python": "",
    "summary": "Tenant support for Django using PostgreSQL schemas.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10523496,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8be248f6491ce56eb8a08b6cf5e2802fb3850dad570c6fe1b3c5719848c94f66",
        "md5": "4345dd18d8f3171b25d32407658b156f",
        "sha256": "a8849d3fb89a789bb0047dc3ef34273b31dee5068fa028edf6dd9700befd1812"
      },
      "downloads": -1,
      "filename": "django_pg_tenants-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4345dd18d8f3171b25d32407658b156f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 40228,
      "upload_time": "2021-05-31T22:03:21",
      "upload_time_iso_8601": "2021-05-31T22:03:21.863337Z",
      "url": "https://files.pythonhosted.org/packages/8b/e2/48f6491ce56eb8a08b6cf5e2802fb3850dad570c6fe1b3c5719848c94f66/django_pg_tenants-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "021f719755d6b6ec7b70b6e0028cff8f3a743233b87a1ce38e88fa141aaff251",
        "md5": "409c8f9def9c7f4dbc686914ebd14da8",
        "sha256": "1bf75ec642a2068b0b71eda3035c99f834df3f1752cbd573546db7dce68260b7"
      },
      "downloads": -1,
      "filename": "django-pg-tenants-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "409c8f9def9c7f4dbc686914ebd14da8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 60205,
      "upload_time": "2021-05-31T22:03:23",
      "upload_time_iso_8601": "2021-05-31T22:03:23.933913Z",
      "url": "https://files.pythonhosted.org/packages/02/1f/719755d6b6ec7b70b6e0028cff8f3a743233b87a1ce38e88fa141aaff251/django-pg-tenants-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}