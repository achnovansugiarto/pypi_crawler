{
  "info": {
    "author": "Dan Palmer",
    "author_email": "dan@danpalmer.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# django-devdata\n\n`django-devdata` provides a convenient workflow for creating development\ndatabases seeded with anonymised production data. Have a development database\nthat contains useful data, and is fast to create and keep up to date.\n\nAs of 1.x, `django-devdata` is ready for use in real-world projects. See\nreleases for more details.\n\n## Elevator pitch\n\n```python\n# blog.models\n\nclass Post(models.Model):\n    content = models.TextField()\n    published = models.DateTimeField()\n\n\nclass Comment(models.Model):\n    user = models.ForeignKey(User)\n    post = models.ForeignKey(Post)\n    text = models.TextField()\n\n# settings.py\nDEVDATA_STRATEGIES = {\n    'auth.User': [\n        # We want all internal users\n        InternalUsersStrategy(name='internal_users'),\n        # Get some random other users, we don't need everyone\n        RandomSampleQuerySetStrategy(name='random_users', count=10),\n    ],\n    'blog.Post': [\n        # Only the latest blog posts necessary for testing...\n        LatestSampleQuerySetStrategy(name='latest_posts', count=3, order='-published'),\n        # Except that one the weird edge case\n        ExactQuerySetStrategy(name='edge_case', pks=(42,)),\n    ],\n    'blog.Comment': [\n        # Get all the comments – devdata will automatically restrict to only\n        # those that maintain referential integrity, i.e. comments from users\n        # not selected, or on posts not selected, will be skipped.\n        QuerySetStrategy(name='all'),\n    ],\n}\n```\n\n```shell\n(prod)$ python manage.py devdata_export devdata\n(prod)$ tar -czf devdata.tar devdata/\n(local)$ scp prod:~/devdata.tar devdata.tar.gz\n(local)$ tar -xzf devdata.tar.gz\n(local)$ python manage.py devdata_import devdata/\n```\n\n#### Problem\n\nIn the same way that development environments being close in configuration to\nproduction environments, it's important that the data in databases we use for\ndevelopment is a realistic representation of that in production.\n\nWe could use a dump of a production database, but there are several problems\nwith this:\n\n1. It's bad for user privacy and a security risk. It may not be allowed in some\n   organisations.\n2. Production databases can be too big, impractical or unusable.\n3. Test data is limited to that available in production.\n4. Preserving referential integrity for a sample of data is hard.\n\nAnother option is to use factories or fake data to generate the entire\ndevelopment database. This is mostly desirable, but...\n\n- It can be a burden to maintain factories once there are hundreds or thousands\n  of them.\n- It can be hard to retroactively add these to a Django site of a significant\n  size.\n\n#### Solution\n\n`django-devdata` provides defines a three step workflow:\n\n1. _Exporting_ data, with a customisable export strategies per model.\n2. _Anonymising_ data, with customisable anonymisation per field/model.\n3. _Importing_ data, with customisable importing per model.\n\n`django-devdata` ships with built-in support for:\n\n- Exporting full tables\n- Exporting subsets (random, latest, specified primary keys)\n- Anonymising data with [`faker`](https://github.com/joke2k/faker/)\n- Importing exported data\n- Importing data from [`factory-boy`](https://github.com/FactoryBoy/factory_boy)\n  factories\n\nIn addition to this, the structure provided by `django-devdata` can be extended\nto support extraction from other data sources, to import/export Django fixtures,\nor to work with other factory libraries.\n\nExporting, anonymising, and importing, are all configurable, and\n`django-devdata`'s base classes will help do this without much work.\n\n## Workflow\n\n#### Exporting\n\nThis step allows a sync strategy to persist some data that will be used to\ncreate a new development database. For example, the `QuerySetStrategy` can\nexport data from a table to a filesystem for later import.\n\nThis can be used for:\n\n- Exporting a manually created database for other developers to use.\n- Exporting realistic data from a production database.\n- A cron job to maintain a development dataset hosted on cloud storage.\n\nThis step is optional (the built-in factory strategy doesn't do this).\n\n#### Anonymisation\n\nThis step is critical when using `django-devdata` to export from production\nsources. It's not a distinct step, but rather an opt-out part of the export\nstep.\n\n#### Importing\n\nThis step is responsible for creating a new database and filling it. If any\nexporting strategies have been used those must have run first, or their outputs\nmust have been downloaded if they are being shared/hosted somewhere.\n\nFactory-based strategies generate data during this process.\n\n## Customising\n\n#### Strategies\n\nThe `django-devdata` strategies define how an import and optionally an export\nhappen. Each model is configured with a list of Strategies to use.\n\nClasses are provided to inherit from for customising this behaviour:\n\n- `Strategy` – the base class of all strategies.\n- `Exportable` – a mixin that opts this strategy in to the export step.\n- `QuerySetStrategy` – the base of all strategies that export production data\n  to a filesystem. Handles referential integrity, serialisation, and\n  anonymisation of the data pre-export.\n- `FactoryStrategy` – the base of all strategies that create data based on\n  `factory-boy` factories.\n\nThe API necessary for classes to implement is small, and there are customisation\npoints provided for common patterns.\n\nIn our experience most models can be exported with just the un-customised\n`QuerySetStrategy`, some will need to use other pre-provided strategies, and\na small number will need custom exporters based on the classes provided.\n\n##### Extra Strategies\n\nSometimes it can be useful to export and import data from the database which\nlives outside the tables which Django manages via models.\n\nThe \"extra\" strategies provide hooks which support transferring these data.\n\nClasses are provided to inherit from for customising this behaviour:\n\n- `ExtraExport` – defines how to get data out of the database.\n- `ExtraImport` – defines how to get data into a database.\n\nThe API necessary for classes to implement is small and reminiscent of those for\n`Strategy` and `Exportable`.\n\nThe following \"extra\" strategies are provided out of the box:\n\n- `PostgresSequences` – transfers data about Postgres sequences which are not\n  attached to tables.\n\n#### Anonymisers\n\nAnonymisers are configured by field name, and by model and field name.\n\nEach anonymiser is a function that takes a number of kwargs with useful context\nand returns a new value, compatible with the Django JSON encoder/decoder.\n\nThe signature for an anonymiser is:\n\n```python\ndef anonymise(*, obj: Model, field: str, pii_value: Any, fake: Faker) -> Any:\n    ...\n```\n\nThere are several anonymisers provided to use or to build off:\n\n- `faker_anonymise` – Use `faker` to anonymise this field with the provided\n  generator, e.g. `faker_anonymise('pyint', min_value=15, max_value=85)`.\n- `const` – anonymise to a constant value, e.g. `const('ch_XXXXXXXX')`.\n- `random_foreign_key` – anonymise to a random foreign key.\n\n`django-devdata`'s anonymisation is not intended to be perfect, but rather to be\na reasonable default for creating useful data that does a good enough job by\ndefault. _Structure_ in data can be used to de-anonymise users in some cases\nwith advanced techniques, and `django-devdata` does not attempt to solve for\nthis case as most attackers, users, and legislators, are more concerned about\nobviously personally identifiable information such as names and email addresses.\nThis anonymisation is no replacement for encryption at-rest with tools like\nFileVault or BitLocker on development machines.\n\nAn example of this pragmatism in anonymisation is the `preserve_nulls` argument\ntaken by some built-in anonymisers. This goes against _true_ anonymisation, but\nthe absence of data is typically not of much use to attackers (or concern for\nusers), if the actual data is anonymised, while this can be of huge benefit to\ndevelopers in maintaining data consistency.\n\n#### Settings\n\n`django-devdata` makes heavy use of Django settings for both defining how it\nshould act for your site, and also for configuring how you'll use your workflow.\n\n```python\n\"\"\"\ndjango-devdata default settings, with documentation on usage.\n\"\"\"\n\n# Required\n# A mapping of app model label to list of strategies to be used.\nDEVDATA_STRATEGIES = ...\n# {'auth.User': [QuerySetStrategy(name='all')], 'sessions.Session': []}\n\n# Optional\n# A list of strategies for transferring data about a database which are not\n# captured in the tables themselves.\nDEVDATA_EXTRA_STRATEGIES = ...\n# [\n#   ('devdata.extras.PostgresSequences', {}),\n# ]\n\n# Optional\n# A mapping of field name to an anonymiser to be used for all fields with that\n# name.\nDEVDATA_FIELD_ANONYMISERS = {}\n# {'first_name': faker_anonymise('first_name'), 'ip': const('127.0.0.1')}\n\n# Optional\n# A mapping of app model label to a mapping of fields and anonymisers to be\n# scoped to just that model.\nDEVDATA_MODEL_ANONYMISERS = {}\n# {'auth.User': {'first_name': faker_anonymise('first_name')}}\n\n# Optional\n# List of locales to be used for Faker in generating anonymised data.\nDEVDATA_FAKER_LOCALES = None\n# ['en_GB', 'en_AU']\n\n# Optional\n# In many codebases, there will only be a few models that will do most of the\n# work to restrict the total export size – only taking a few users, or a few\n# comments – for many models a default behaviour of taking everything\n# following the restrictions from other models would be sufficient. This setting\n# allows for specifying a default strategy.\n# Important:\n# - When using this, no errors will be raised if a model is missed from the list\n#   of strategies.\n# - This strategy is not added to all models, and it does not override an empty\n#   list of strategies. It is only used when a model is not defined in the\n#   strategy config at all.\nDEVDATA_DEFAULT_STRATEGY = None\n```\n\nStrategies can be defined either as a strategy instance, or a tuple of\ndotted-path and kwargs, for example the following are equivalent:\n\n```python\nDEVDATA_STRATEGIES = {\n    'auth.User': [\n        QuerySetStrategy(name='all_users'),\n    ],\n}\n\nDEVDATA_STRATEGIES = {\n    'auth.User': [\n        ('devdata.strategies.QuerySetStrategy', {'name': 'all_users'}),\n    ],\n}\n```\n\nThis alternate configuration format is provided in cases of extensive use of\ncustom strategies, as strategies often import models, but due to the Django\nstartup process models can't be imported until the settings have been imported.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danpalmer/django-devdata",
    "keywords": "django,development,databases",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-devdata",
    "package_url": "https://pypi.org/project/django-devdata/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-devdata/",
    "project_urls": {
      "Homepage": "https://github.com/danpalmer/django-devdata",
      "Repository": "https://github.com/danpalmer/django-devdata"
    },
    "release_url": "https://pypi.org/project/django-devdata/1.0.0/",
    "requires_dist": [
      "tqdm (>=4.0.0)",
      "Faker (>=5.0.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16982606,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d5f78dfd72a93a0df0754c758e3258364c1f80a763c22afdec1052d817ba1e7",
        "md5": "480eeb90d99bd039b916b348320f99df",
        "sha256": "2ff400abc69fa959f8f7993216d21e1808c7f3a89d6fd15e2e9f1c5b77561f8d"
      },
      "downloads": -1,
      "filename": "django_devdata-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "480eeb90d99bd039b916b348320f99df",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18426,
      "upload_time": "2023-02-22T20:35:52",
      "upload_time_iso_8601": "2023-02-22T20:35:52.838302Z",
      "url": "https://files.pythonhosted.org/packages/8d/5f/78dfd72a93a0df0754c758e3258364c1f80a763c22afdec1052d817ba1e7/django_devdata-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4106166e9123aaeb2dd04adc368e3d7f3a1e1f1e515e28e18576b026e3df169",
        "md5": "89c0e27c46b05f047a9b331341785dee",
        "sha256": "0ace90bfabf5c6bc6e0131b82b0e9a69f920b248affedf63dccfe777f5c59b70"
      },
      "downloads": -1,
      "filename": "django_devdata-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "89c0e27c46b05f047a9b331341785dee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19707,
      "upload_time": "2023-02-22T20:35:54",
      "upload_time_iso_8601": "2023-02-22T20:35:54.498448Z",
      "url": "https://files.pythonhosted.org/packages/b4/10/6166e9123aaeb2dd04adc368e3d7f3a1e1f1e515e28e18576b026e3df169/django_devdata-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}