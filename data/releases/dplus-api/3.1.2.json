{
  "info": {
    "author": "Devora Witty",
    "author_email": "devorawitty@chelem.co.il",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Topic :: Scientific/Engineering :: Chemistry"
    ],
    "description": "This document was last updated on June 10 2018, for version 3.1.1.1\n\n# The Dplus Python API\n\n\nThe D+ Python API allows using the D+ backend from Python, instead of the ordinary D+ application.\n\nThe Python API works on both Windows and Linux.\n\n## Installation\n\nInstalling the Python API is done using PIP:\n\n    pip install dplus-api\n\nThe API was tested with Python 3.5 and newer. It *may* work with older versions of Python, although Python 2 \nis probably not supported.\n\n## Overview\n\n Please note: \n\nThroughout the manual, code examples are given with filenames, such as \"mystate.state\".\nIn order to run the example code for yourself, these files must be located in the same directory as the script itself,\n or alternately the code can be modified to the contain the full path of the file's location.\n\nThroughout the manual, we mention \"state files\".\n\nA state file is a JSON-format file that describes the parameter tree and calculation settings of the D+ calculation.\nIt isn't necessary to write one yourself-\nthey can either be generated from within the python interface (with the function `export_all_parameters`),\nor created from the D+ GUI (by selecting File>Export All Parameters from within the D+ GUI).\n\nThe overall flow of the Python API is as follows:\n\n1. The data to be used for the calculation is built by the user in an instance of the `CalculationInput` class \n(either `GenerateInput` or `FitInput`). Inputs contain a program `State`, which includes both program preferences \nsuch as `DomainPreferences`, and a parameter tree composed of `Models`.\n\n2. This calculation input is then passed to a `CalculationRunner` class (either `LocalRunner` or `WebRunner`),\nand the calculation function is called (`generate`, `generate_async`, `fit`, or `fit_async`)\n\n3. The `CalculationRunner` class returns a `CalculationResult` class.\n\nHere is a very simple example of what this might look line:\n\n```\nfrom dplus.CalculationInput import GenerateInput\nfrom dplus.CalculationRunner import LocalRunner\n\ncalc_data = GenerateInput.load_from_state_file(\"mystate.state\")\nrunner = LocalRunner()\nresult = runner.generate(calc_data)\nprint(result.graph)\n```\n\nA detailed explanation of the class types and their usage follows\n\n\n## CalculationRunner\n\nThere are two kinds of CalculationRunners, Local and Web.There are two kinds of CalculationRunners, Local and Web.\n\nThe LocalRunner is intended for users who have the D+ executable files installed on their system. It takes two optional\ninitialization arguments:\n\n* `exe_directory` is the folder location of the D+ executables. By default, its value is None- on Windows, this will \nlead to the python interface searching the registry for an installed D+ on its own, but on linux the executable \ndirectory *must* be specified. \n* `session_directory` is the folder where the arguments for the calculation are stored, as well as the output results,\namplitude files, and pdb files, from the c++ executable. By default, its value is None, and an automatically generated \ntemporary folder will be used. \n\n```\nfrom dplus.CalculationRunner import LocalRunner\n\nexe_dir = r\"C:\\Program Files\\D+\\bin\"\nsess_dir = r\"sessions\"\nrunner = LocalRunner(exe_dir, sess_dir)\n#also possible:\n#runner = LocalRunner()\n#runner = LocalRunner(exe_dir)\n#runner = LocalRunner(session_directory=sess_dir)\n```\n\nThe WebRunner is intended for users accessing the D+ server. It takes two required initialization arguments, with no\ndefault values:\n\n* `url` is the address of the server.\n* `token` is the authentication token granting access to the server. \n\n```\nfrom dplus.CalculationRunner import WebRunner\n\nurl = r'http://localhost:8000/'\ntoken = '4bb25edc45acd905775443f44eae'\nrunner = WebRunner(url, token)\n```\n\nBoth runner classes have the same four methods: \n\ngenerate(calc_data), generate_async(calc_data), fit(calc_data), fit_async(calc_data)\n\nAll four methods take the same single argument, `calc_data` - an instance of a CalculationData class\n\ngenerate and fit return a `CalculationResult`\n\ngenerate_async and fit_async return a `RunningJob`\n\nThe methods generate and fit both wait until dplus has returned a result. Their asynchronous counterparts allow dplus \ncalculations to be run in the background.\n\n#### RunningJob\n\nThe user should not be initializing this class. When returned from an async function in CalculationRunner, the user can \nuse the following methods to interact with the RunningJob:\n\n* `get_status()`: get a json dictionary reporting the job's current status\n* `get_result(calc_data)`: get a `CalculationResult`. Requires a copy of the CalculationInput used to create the job. \nshould only be called when job is completed. It is the user's responsibility to verify job completion with get_status \nbefore calling. \n* `abort()`: end a currently running job\n\n```\nfrom dplus.CalculationInput import GenerateInput\nfrom dplus.CalculationRunner import LocalRunner\n\n calc_data = GenerateInput.load_from_state_file(\"mystate.state\")\n runner = LocalRunner()\n job = runner.generate_async(calc_data)\n start_time = datetime.datetime.now()\n status = job.get_status()\n while status['isRunning']:\n     status = job.get_status()\n     run_time = datetime.datetime.now() - start_time\n     if run_time > datetime.timedelta(seconds=50):\n         job.abort()\n         raise TimeoutError(\"Job took too long\")\n result = job.get_result(calc_data)\n```\n\n## CalculationInput\n\nThere are two kinds of CalculationInput, FitInput and GenerateInput.\n\nGenerateInput contains an instance of a `State` class and an x vector. It is used to generate the signal of a given\nparameter tree (within the `State`).\n\nFitInput contains a `State` class, an x vector, and a y vector representing a signal to be fitted. \nIt is used to fit a parameter tree (within the `State`) to the signal.\n\nThe `State` class is described in the next section.\n\nThe x and y vectors are simply lists of floating point coordinates. They can be generated from parameters in the state \nclass or loaded from a file.\nCalculationInput has the following methods:\n\n* `get_model`: get a model by either its `name` or its `model_ptr`\n* `get_models_by_type`: returns a list of `Models` with a given `type_name`, e.g. UniformHollowCylinder\n* `get_mutable_params`: returns a list of `Parameters` in the state class, whose property `mutable` is True\n* `get_mutable_parameter_values`: returns a list of floats, matching the values of the mutable parameters\n* `set_mutable_parameter_values`: given a list of floats, sets the mutable parameters of the state (in the order given by \nget_mutable_parameter_values)\n* `export_all_parameters`: given a filename, will save the calculation state to that file\n\nIn addition, all CalculationInputs have the property `use_gpu`, which can be set to True or False (running fitting with\nuse_gpu set to False is not recommended).\n\nA new instance of GenerateInput can be created simply by calling its constructor with a state:\n\n```\nfrom dplus.CalculationInput import GenerateInput\ns=State()\ngen_input=GenerateInput(s)\n```\n\nIn addition, GenerateInput has the following static methods to create an instance of GenerateInput:\n\n* `load_from_state_file(filename)` receives the location of a file that contains a serialized parameter tree (state)\n* `load_from_PDB` receives the location of a PDB file, and automatically creates a guess at the best state parameters\n based on the pdb \n\n```\nfrom dplus.CalculationInput import GenerateInput\ngen_input=GenerateInput.load_from_state_file('sphere.state')\n```\n\nA new instance of StateInput can be created by calling its constructor, and either:\n\n 1. `x`, `y`: two arrays, an x array and a y array, or\n 2. `graph`: a single dictionary, with x values as keys for the y values\n\n```\nfrom dplus.CalculationInput import FitInput, load_x_and_y_from_file\n\nx,y=load_x_and_y_from_file(\"signal_file.out\")\nstate=State()\nfit_input=FitInput(state, x=x, y=y)\n```\n\nFitInput also has the following static method to create an instance of FitInput:\n\n* `load_from_state_file(filename)` receives the location of a file that contains a serialized parameter tree (state)\n\n```\nfrom dplus.CalculationInput import FitInput\nfit_input=FitInput.load_from_state_file('sphere.state')\n``` \n\n\n\n### State\n\nThe state class contains an instance of each of three classes: DomainPreferences, FittingPreferences, and Domain. \nThey are described in the upcoming sections.\n\nIt has the methods  `get_model`, `get_models_by_type`, `get_mutable_params`,  `get_mutable_parameter_values`,\n`set_mutable_parameter_values`, and `export_all_parameters`, just as CalculationInput does.\n\n(In fact, CalculationInput simply invokes these functions from within its State when they are called from CalculationInput)\n\nState, _and every class and sub class contained within state_ (ie preferences, models, parameters), all have the functions \n`load_from_dictionary` and `serialize`.\n\n`load_from_dictionary` sets the values of the various fields within a class to match those contained within a suitable dictionary. \nIt can behave recursively as necessary, for example with a model that has children.\n\n`serialize` saves the contents of a class to a dictionary. Note that there may be additional fields in the dictionary\nbeyond those described in this document, because some defunct (outdated, irrelevant, or not-yet-implemented) fields are \nstill saved in the serialized dictionary.\n\n`add_model` is a convenience function to help add models to the state's parameter tree. It receives the model an optionally \na population index (default 0), and will insert that model into the population.\n\n`add_amplitude` is a convenience function specifically for adding instances of the `Amplitude` class, described below. \nIt creates an instance of `AMP` with the `Amplitude`'s filename, and then in addition to calling `add_model` with that AMP,\n it also changes the state's DomainPreferences (specifically grid_size, q_max, and use_grid) to match the Amplitude's properties.\n It returns the AMP it created.\n\n\n#### DomainPreferences\nThe DomainPreferences class contains properties that are copied from the D+ interface. Their usage is explained in \nthe D+ documentation.\n\nWe create a new instance of DomainPreferences by calling the python initialization function:\n\n`dom_pref= DomainPreferences()`\n\nThere are no arguments given to the initialization function, and all the properties are set to default values:\n\n|Property Name | Default Value | Allowed values|\n|---|---|---|\n|signal_file|\t\"\"|\"\", or a valid file location|\n|convergence|\t0.001||\n|grid_size|\t100|Even integer greater than 20|\n|orientation_iterations|\t100||\n|orientation_method|\t\"Monte Carlo (Mersenne Twister)\"|\"Monte Carlo (Mersenne Twister)\", \"Adaptive (VEGAS) Monte Carlo\", \"Adaptive Gauss Kronrod\"|\n|use_grid|\tFalse|True, False|\n|q_max|\t7.5|Positive number. If signal file is provided, must match highest x value|\n\nAny property can then be changed easily.\n\n`dom_pref.q_max= 10`\n\nIf the user tries to set a property to an invalid value (for example, setting q_max to something other than a positive number) they will get an error.\n\nIf a signal file is provided, the value of q_max will automatically be set to the highest x value in the signal file.\n\n\n#### Fitting Preferences\nThe FittingPreferences class contains properties that are copied from the D+ interface. Their usage is explained in the D+ documentation.\n\nWe create a new instance of FittingPreferences by calling the python initialization function:\n\n`fit_pref= FittingPreferences()`\n\nThere are no arguments given to the initialization function, and all the properties are set to default values:\n\n|Property Name | Default Value |Allowed Values|Required when|\n|---|---|---|---|\n|convergence|\t0.1| Positive numbers||\n|der_eps|\t0.1| Positive numbers||\n|fitting_iterations|\t20|Positive integers||\n|step_size|0.01| Positive numbers||\n|loss_function|\"Trivial Loss\"| \"Trivial Loss\",\"Huber Loss\",\"Soft L One Loss\",\"Cauchy Loss\",\"Arctan Loss\",\"Tolerant Loss\"||\n|loss_func_param_one|0.5|Number|Required for all loss_function except \"Trivial Loss\"|\n|loss_func_param_two|0.5|Number|Required when loss_function is \"Tolerant Loss\"|\n|x_ray_residuals_type|\"Normal Residuals\"|\"Normal Residuals\",\"Ratio Residuals\",\"Log Residuals\"||\n|minimizer_type|\"Trust Region\"|\"Line Search\",\"Trust Region\"||\n|trust_region_strategy_type|\"Dogleg\"|\"Levenberg-Marquardt\",\"Dogleg\"|minimizer_type is \"Trust Region\"|\n|dogleg_type|\"Traditional Dogleg\"|\"Traditional Dogleg\",\"Subspace Dogleg\"|trust_region_strategy_type is \"Dogleg\"|\n|line_search_type|\"Armijo\"|\"Armijo\",\"Wolfe\"|minimizer_type is \"Line Search\"|\n|line_search_direction_type|\"Steepest Descent\"|\"Steepest Descent\",\"Nonlinear Conjugate Gradient\",\"L-BFGS\",\"BFGS\"|minimizer_type is \"Line Search\". if line_search_type is \"Armijo\", cannot be \"BFGS\" or \"L-BFGS\". |\n|nonlinear_conjugate_gradient_type|\"\"|\"Fletcher Reeves\",\"Polak Ribirere\",\"Hestenes Stiefel\"|linear_search_direction_type is \"Nonlinear Conjugate Gradient\"|\n\nAny property can then be changed easily.\n\n`fit_pref.convergence= 0.5`\n\nIf the user tries to set a property to an invalid value they will get an error.\n\n\n#### Domain\n\nThe Domain class describes the parameter tree. \n\nThe root of the tree is the `Domain` class. This contains an array of `Population` classes. \nEach `Population` can contain a number of `Model` classes. Some models have children, also models.\n\n##### Models\n\nDomain and Population are two special kinds of models.\n\nThe Domain model is the root of the parameter tree, which can contain multiple populations. \nPopulations can contain standard types of models.\n\nThe available standard model classes are:\n\n* UniformHollowCylinder\n* Sphere\n* SymmetricLayeredSlabs\n* AsymmetricLayeredSlabs\n* Helix\n* DiscreteHelix\n* SpacefillingSymmetry\n* ManualSymmetry\n* PDB- a pdb file\n* AMP- an amplitude grid file\n\nYou can create any model by calling its initialization. \n\nPlease note that models are dynamically loaded from those available in DPlus. \nTherefore, your code editor may underline the model in red even if the model exists.\n\nAll models have Location Parameters and Extra Parameters. Some models (that support layers) also contain Layer Parameters.\nThese are all collection of instances of the `Parameter` class, and can be accessed from \n`model.location_params`, `model.extra_params`, and `model.layer_params`, respectively.\n\nAll of these can be modified. They are accessed using dictionaries.\nExample:\n\n```\nfrom dplus.DataModels.models import UniformHollowCylinder\n\nuhc=UniformHollowCylinder()\nuhc.layer_params[1][\"Radius\"].value=2.0\nuhc.extra_params[\"Height\"].value=3.0\nuhc.location_params[\"x\"].value=2\n```\n\nFor additional information about which models have layers and what the various parameters available for each model are,\nplease consult the DPlus manual.\n\n###### Parameters\n\nThe Parameter class contains the following properties:\n\nvalue: a float whose default value is 0\n\nsigma: a float whose default value is 0\n\nmutable: a boolean whose default value is False\n\nconstraints: an instance of the Constraints class, by default it is the default Constraints\n\n`p=Parameter(4)`\n\n###### Constraints\n\nThe Constraints class contains the following properties:\n\nMaxValue: a float whose default value is infinity\n\nMinValue: a float whose default value is -infinity\n\n`c=Constraints(min_val=5)`\n\n\n## Amplitudes\n\nIn the module `Amplitudes` there is the class `Grid` and the class `Amplitude` which inherits from Grid.\n\n**Please note**: The class Amplitude is a purely Python class, not to be confused with the class AMP from Dplus.DataModels.Models\n\nThe class `AMP` contains a filename pointing to an amplitude file, an extra parameter scale, a boolean centered, and it can be\nserialized and sent as part of the Domain parameter tree to D+. \n\nThe class `Amplitude`, by contrast, can be used to build an amplitude and then save that amplitude as an amplitude file,\nwhich can then be opened in D+ (or sent in a class AMP) but it itself cannot be added directly to the Domain parameter tree. \nIf you want to add it, you must save the amplitude to a file first using the `save` method, \nand then can use State's function `add_amplitude` to add it to the tree.\n\n\nThe class Grid is initialized with `q_max` and `grid_size`. \n\nIt is used to create/describe a grid of `q`, `theta`, `phi` angle values. \n\nThese values can be described using two sets of indexing:\n\n1. The overall index `m`\n2. The individual angle indices `i`, `j`, `k`\n\nThis is described in detail in the paper.\n\nIt has the following methods:\n\n* `create_grid`: a generator that returns q, theta, phi angles in phi-major order\n* `indices_from_index`: receives an overall index m, are returns the individual q, theta, and phi indices: i, j, k\n* `angles_from_index`: receives an overall index m, and returns the matching q, theta, and phi angle values\n* `angles_from_indices`: receives angle indices i,j,k and returns their q, theta, and phi angle values\n* `index_from_indices`: receives angle indices i,j,k and returns the overall index m that matches them\n* `indices_from_angles`: receives angles q, theta, phi, ands returns the matching indices i,j,k\n* `index_from_angles`: receives angles q, theta, phi and returns the matching overall index m\n\n\n```\nfrom dplus.Amplitudes import Grid\n\ng=Grid(5, 100)\nfor q,theta,phi in g.create_grid():\n    print(g.index_from_angles(q, theta, phi))\n```\n\nThe class Amplitude inherits from Grid. It is a class intended to describe the amplitude of a model/function, and can \nsave these values to an amplitude file (that can be read by D+) and can also read amplitude files (like those created by D+)\n\nLike a grid, Amplitude is initialized with q_max and grid_size.\n\nAmplitude overrides grid's `create_grid` method. Amplitude's `create_grid` requires a function as an argument. \nThis function must receive q, theta, phi and return two values, representing the real and imaginary parts of a complex number.\nThe values returned can be a tuple, an array, or a python complex number (A+Bj).\n\nThese values are then saved to the Ampltiude's `values` property, and can also be accessed through the `complex_amplitudes_array`\nproperty as a numpy array of numpy complex types.\n\nAlternately, Amplitude has a static method, `load`,  which receives a filename of an Amplitude file, and returns an Amplitude instance\nwith the values from that file already loaded.\n\nFinally, there is the method `save`, which will save the information in the Amplitude class to an Amplitude file which can then be \npassed along to D+ to calculate its signal or perform fitting.\n\n\n```\nfrom dplus.Amplitudes import Amplitude\nmy_amp=Amplitude.load(\"myamp.amp\")\nfor c in my_amp.complex_amplitude_array:\n    print(c)\n```\n\n```\nfrom dplus.Amplitudes import Amplitude\n\ndef my_func(q, theta, phi):\n    return q+1, 0\n\na=Amplitude(7.5, 200)\na.create_grid(my_func)\na.save(\"myfile.amp\")\n```\n\nThere are examples of using Amplitudes to implement models similar to D+ in the additional examples section.\n\nThe module Amplitudes also contains two convenience functions for converting between cartesian and spherical coordinates:\n\n* `sph2cart` receives r, theta, phi and returns x, y, z\n* `cart2sph` receives x, y, z and returns r, theta, phi\n\n```\nfrom dplus.Amplitudes import sph2cart, cart2sph\n\nq,theta,phi = cart2sph(1,2,3)\nx,y,z=sph2cart(q,theta,phi)\n\n```\n\n## CalculationResult\n\nThe CalculationResult class is returned by the CalculationRunner. \nThe user should generally not be instantiating the class themselves. \n\nThe class has the following properties accessible:\n\n* `graph`: an OrderedDict whose keys are x values and whose values are y values.\n* `y`: The raw list of y values from the results json\n* `headers`: an OrderDict of headers, whose keys are ModelPtrs and whose values are the header associated. \nThis property is not necessarily present in fitting results\n* `parameter_tree`: A json of parameters (can be used to create a new state with state's load_from_dictionary). \nOnly present in fitting, not generate, results\n* `error` : returns the json error report from the dplus run\n\nIn addition, CalculationResults has the following public functions:\n\n* `get_amp(model_ptr, destination_folder)`: returns the file location of the amplitude file for given model_ptr. \ndestination_folder has a default value of None, but if provided, the amplitude file will be copied to that location,\nand then have its address returned \n* `get_pdb(mod_ptr, destination_folder)`: returns the file location of the pdb file for given model_ptr. \ndestination_folder has a default value of None, but if provided, the pdb file will be copied to that location,\nand then have its address returned \n* `save_to_out_file(filename)`: receives file name, and saves the results to the file.\n\n### FileReaders\n\nThe API contains a module FileReaders. \n\nPresently all it contains is `SignalFileReader`, which can be initialized with a path to a signal file (eg a .out or .dat file) \nand will read that file into its `x_vec`, `y_vec`, and `graph` properties.\n\n\n## Additional Usage examples\n\n\n***Example One***\n\n```\nfrom dplus.CalculationInput import FitInput\nfrom dplus.CalculationRunner import LocalRunner\n\nexe_directory = r\"C:\\Program Files\\D+\\bin\"\nsess_directory = r\"session\"\nrunner= LocalRunner(exe_directory, sess_directory)\n\ninput=FitInput.load_from_state_file('spherefit.state')\nresult=runner.fit(input)\nprint(result.graph)\n```\n\n***Example Two***\n\n```\nfrom dplus.CalculationInput import GenerateInput\nfrom dplus.CalculationRunner import LocalRunner\nfrom dplus.DataModels import ModelFactory, Population\nfrom dplus.State import State\nfrom dplus.DataModels.models import UniformHollowCylinder\n\nsess_directory = r\"session\"\nrunner= LocalRunner(session_directory=sess_directory)\n\nuhc=UniformHollowCylinder()\ns=State()\ns.Domain.populations[0].add_model(uhc)\n\ncaldata = GenerateInput(s)\nresult=runner.generate(caldata)\nprint(result.graph)\n```\n\n***Example Three***\n\n```\nfrom dplus.CalculationRunner import LocalRunner\nfrom dplus.CalculationInput import GenerateInput\n\nrunner=LocalRunner()\ncaldata=GenerateInput.load_from_PDB('1JFF.pdb', 5)\nresult=runner.generate(caldata)\nprint(result.graph)\n```\n\n***Example Four***\n\n```\nfrom dplus.CalculationRunner import LocalRunner\nfrom dplus.CalculationInput import GenerateInput, FitInput\nAPI=LocalRunner()\ninput = GenerateInput.load_from_state_file(\"uhc.state\")\ncylinder = input.get_model(\"test_cylinder\")\n\nprint(\"Original radius is \", cylinder.layer_params[1]['Radius'].value)\nresult = API.generate(input)\n\nfit_input = FitInput(input.state, result.graph)\ncylinder = fit_input.get_model(\"test_cylinder\")\ncylinder.layer_params[1]['Radius'].value = 2\ncylinder.layer_params[1]['Radius'].mutable = True\n\nfit_result = API.fit(fit_input)\nprint(fit_result.parameter_tree)\nfit_input.combine_results(fit_result)\nprint(\"Result radius is \", cylinder.layer_params[1]['Radius'].value)\n```\n\n### Implementing Models using Amplitudes\n\nFor the purpose of these exmaples the models are implemented with minimal default parameters, in a realistic usage \nscenario the user would set those parameters as editable properties to be changed at his convenience.\n\n```\nfrom dplus.Amplitudes import Amplitude\nimport math\n\nclass UniformSphere:\n    def __init__(self):\n        self.extraParams=[1,0]\n        self.ED=[333, 400]\n        self.r=[0,1]\n\n    @property\n    def nLayers(self):\n        return len(self.ED)\n\n    def calculate(self, q, theta, phi):\n        cos=math.cos\n        sin=math.sin\n        nLayers=self.nLayers\n        ED=self.ED\n        extraParams=self.extraParams\n        r=self.r\n        def closeToZero(x):\n            return (math.fabs(x) < 100.0 * 2.2204460492503131E-16)\n\n        if closeToZero(q):\n            electrons = 0.0\n            for i in range( 1, nLayers):\n                electrons += (ED[i] - ED[0]) * (4.0 / 3.0) * math.pi * (r[i] ** 3 - r[i-1] ** 3)\n            return (electrons  * extraParams[0] + extraParams[1], 0.0)\n\n        res = 0.0\n\n        for i in range(nLayers-1):\n            res -= (ED[i] - ED[i + 1]) * (cos(q * r[i]) * q * r[i] - sin(q * r[i]))\n        res -= (ED[nLayers - 1] - ED[0]) * (cos(q * r[nLayers - 1]) * q * r[nLayers - 1] - sin(q * r[nLayers - 1]))\n\n        res *= 4.0 * math.pi / (q*q * q)\n\n        res *= extraParams[0] #Multiply by scale\n        res += extraParams[1] #Add background\n\n        return (res, 0.0)\n\nsphere=UniformSphere()\na=Amplitude(7.5, 200)\na.create_grid(sphere.calculate)\na.save(\"sphere.amp\")\ns=State()\namp_model = s.add_amplitude(a)\namp_model.centered=True\ninput = GenerateInput(s)\nrunner=LocalRunner()\nresult=runner.generate(input)\n```\n\n```\n\n\n\n```\n\n### Python Fitting\nIt is possible to fit a curve using the results from Generate and numpy's built in minimization/curve fitting functions.\nAll that is requires is wrapping the interface code so that it receives and returns parameters the way scipy expects (eg as numpy arrays)\n\nAn example follows:\n\n```\nimport numpy as np\nfrom scipy import optimize\nfrom dplus.CalculationInput import GenerateInput, FitInput\nfrom dplus.CalculationRunner import LocalRunner\n\ninput=FitInput.load_from_state_file(r\"2_pops.state\")\ngenerate_runner=LocalRunner()\n\ndef run_generate(xdata, *params):\n    '''\n    scipy's optimization algorithms require a function that receives an x array and an array of parameters, and\n    returns a y array.\n    this function will be called repeatedly, until scipy's optimization has completed.\n    '''\n    input.set_mutable_parameter_values(params) #we take the parameters given by scipy and place them inside our parameter tree\n    generate_results=generate_runner.generate(input) #call generate\n    return np.array(generate_results.y) #return the results of the generate call\n\nx_data=input.x\ny_data=input.y\np0 = input.get_mutable_parameter_values()\nmethod='lm' #lenenberg-marquadt (see scipy documentation)\npopt, pcov =optimize.curve_fit(run_generate, x_data, y_data, p0=p0, method=method)\n\n#popt is the optimized set of parameters from those we have indicated as mutable\n#we can insert them back into our CalculationInput and create the optmized parameter tree\ninput.set_mutable_parameter_values(popt)\n#we can run generate to get the results of generate with them\nbest_results=generate_runner.generate(input)\n```\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://scholars.huji.ac.il/uriraviv",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dplus-api",
    "package_url": "https://pypi.org/project/dplus-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/dplus-api/",
    "project_urls": {
      "Homepage": "https://scholars.huji.ac.il/uriraviv"
    },
    "release_url": "https://pypi.org/project/dplus-api/3.1.2/",
    "requires_dist": [
      "numpy (>=1.10)",
      "psutil (==5.2.2)",
      "requests (==2.10.0)"
    ],
    "requires_python": "",
    "summary": "Call the DPlus Calculation Backend",
    "version": "3.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14530274,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "507e8b7649833c7df2665e53d17607c0080202d9e8d79497e27ae546fc855b82",
        "md5": "771674300965ac89ad5bd02ddb2ef967",
        "sha256": "ddae5edbde0011af130a149b8a3f8ac2cd8513a30491b8f21f893aad494a147a"
      },
      "downloads": -1,
      "filename": "dplus_api-3.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "771674300965ac89ad5bd02ddb2ef967",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 52739,
      "upload_time": "2018-06-26T11:58:15",
      "upload_time_iso_8601": "2018-06-26T11:58:15.838234Z",
      "url": "https://files.pythonhosted.org/packages/50/7e/8b7649833c7df2665e53d17607c0080202d9e8d79497e27ae546fc855b82/dplus_api-3.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d68b7926295b812b8d1aec60790cb388887614a6a824258ee5f9732843b30e3",
        "md5": "91370781efb0e9e6c04169867354af51",
        "sha256": "3297034bba8ea96917662876d5bbb7a0acbdd18edff076cc3094476870300709"
      },
      "downloads": -1,
      "filename": "dplus-api-3.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "91370781efb0e9e6c04169867354af51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 50348,
      "upload_time": "2018-06-26T11:58:18",
      "upload_time_iso_8601": "2018-06-26T11:58:18.523860Z",
      "url": "https://files.pythonhosted.org/packages/5d/68/b7926295b812b8d1aec60790cb388887614a6a824258ee5f9732843b30e3/dplus-api-3.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}