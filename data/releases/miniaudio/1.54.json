{
  "info": {
    "author": "Irmen de Jong",
    "author_email": "irmen@razorvine.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia :: Sound/Audio",
      "Topic :: Multimedia :: Sound/Audio :: Capture/Recording",
      "Topic :: Multimedia :: Sound/Audio :: Conversion",
      "Topic :: Multimedia :: Sound/Audio :: Players"
    ],
    "description": "[![Latest Version](https://img.shields.io/pypi/v/miniaudio.svg)](https://pypi.python.org/pypi/miniaudio/)\n\n\n# Python miniaudio\n\nMultiplatform audio playback, recording, decoding and sample format conversion for\nLinux (including Raspberri Pi), Windows, Mac and others.\n\nInstallation for most users: via [Pypi](https://pypi.org/project/miniaudio/), Raspberri Pi builds via [PiWheels](https://www.piwheels.org/project/miniaudio/).\n\n\nThis is a Pythonic interface to the cross-platform [miniaudio](https://github.com/dr-soft/miniaudio/) C library:\n\n- audio operations run in the background\n- python bindings for most of the functions offered in the miniaudio library:\n  - reading and decoding audio files\n  - getting audio file properties (such as duration, number of channels, sample rate)\n  - converting sample formats and frequencies\n  - streaming large audio files\n  - audio playback\n  - audio recording\n- decoders for wav, flac, vorbis and mp3\n- Audio file and Icecast internet radio streaming\n- Python enums instead of just some integers for special values\n- several classes to represent the main functions of the library\n- generators for the Audio playback and recording\n- sample data is usually in the form of a Python ``array`` with appropriately sized elements\n  depending on the sample width (rather than a raw block of bytes)\n- TODO: filters, waveform generators?\n\n\n*Requires Python 3.6 or newer.  Also works on pypy3 (because it uses cffi).*\n\nSoftware license for these Python bindings, miniaudio and the decoders: MIT\n\n## Synthesizer, modplayer?\n\nIf you like this library you may also be interested in my [software FM synthesizer](https://pypi.org/project/synthplayer/)\nor my [mod player](https://pypi.org/project/libxmplite/) which uses libxmp.\n\n\n## Examples\n\n### Most basic audio file playback\n\n```python\nimport miniaudio\nstream = miniaudio.stream_file(\"samples/music.mp3\")\nwith miniaudio.PlaybackDevice() as device:\n    device.start(stream)\n    input(\"Audio file playing in the background. Enter to stop playback: \")\n```\n\n### Playback of an unsupported file format\n\nThis example uses ffmpeg as an external tool to decode an audio file in a format\nthat miniaudio itself can't decode (m4a/aac in this case):\n\n```python\nimport subprocess\nimport miniaudio\n\nchannels = 2\nsample_rate = 44100\nsample_width = 2  # 16 bit pcm\nfilename = \"samples/music.m4a\"  # AAC encoded audio file\n\ndef stream_pcm(source):\n    required_frames = yield b\"\"  # generator initialization\n    while True:\n        required_bytes = required_frames * channels * sample_width\n        sample_data = source.read(required_bytes)\n        if not sample_data:\n            break\n        print(\".\", end=\"\", flush=True)\n        required_frames = yield sample_data\n\nwith miniaudio.PlaybackDevice(output_format=miniaudio.SampleFormat.SIGNED16,\n                              nchannels=channels, sample_rate=sample_rate) as device:\n    ffmpeg = subprocess.Popen([\"ffmpeg\", \"-v\", \"fatal\", \"-hide_banner\", \"-nostdin\",\n                               \"-i\", filename, \"-f\", \"s16le\", \"-acodec\", \"pcm_s16le\",\n                               \"-ac\", str(channels), \"-ar\", str(sample_rate), \"-\"],\n                              stdin=None, stdout=subprocess.PIPE)\n    stream = stream_pcm(ffmpeg.stdout)\n    next(stream)  # start the generator\n    device.start(stream)\n    input(\"Audio file playing in the background. Enter to stop playback: \")\n    ffmpeg.terminate()\n```\n\n## API\n\n\n*enum class*  ``Backend``\n names:  ``WASAPI`` ``DSOUND`` ``WINMM`` ``COREAUDIO`` ``SNDIO`` ``AUDIO4`` ``OSS`` ``PULSEAUDIO`` ``ALSA`` ``JACK`` ``AAUDIO`` ``OPENSL`` ``WEBAUDIO`` ``CUSTOM`` ``NULL``\n> Operating system audio backend to use (only a subset will be available)\n\n\n*enum class*  ``ChannelMixMode``\n names:  ``RECTANGULAR`` ``SIMPLE`` ``CUSTOMWEIGHTS``\n> How to mix channels when converting\n\n\n*enum class*  ``DeviceType``\n names:  ``PLAYBACK`` ``CAPTURE`` ``DUPLEX``\n> Type of audio device\n\n\n*enum class*  ``DitherMode``\n names:  ``NONE`` ``RECTANGLE`` ``TRIANGLE``\n> How to dither when converting\n\n\n*enum class*  ``FileFormat``\n names:  ``UNKNOWN`` ``WAV`` ``FLAC`` ``MP3`` ``VORBIS``\n> Audio file format\n\n\n*enum class*  ``SampleFormat``\n names:  ``UNKNOWN`` ``UNSIGNED8`` ``SIGNED16`` ``SIGNED24`` ``SIGNED32`` ``FLOAT32``\n> Sample format in memory\n\n\n*enum class*  ``SeekOrigin``\n names:  ``START`` ``CURRENT``\n> How to seek() in a source\n\n\n*enum class*  ``ThreadPriority``\n names:  ``IDLE`` ``LOWEST`` ``LOW`` ``NORMAL`` ``HIGH`` ``HIGHEST`` ``REALTIME``\n> The priority of the worker thread (default=HIGHEST)\n\n\n*function*  ``convert_frames  (from_fmt: miniaudio.SampleFormat, from_numchannels: int, from_samplerate: int, sourcedata: bytes, to_fmt: miniaudio.SampleFormat, to_numchannels: int, to_samplerate: int) -> bytearray``\n> Convert audio frames in source sample format with a certain number of channels, to another sample\nformat and possibly down/upmixing the number of channels as well.\n\n\n*function*  ``convert_sample_format  (from_fmt: miniaudio.SampleFormat, sourcedata: bytes, to_fmt: miniaudio.SampleFormat, dither: miniaudio.DitherMode = <DitherMode.NONE: 0>) -> bytearray``\n> Convert a raw buffer of pcm samples to another sample format. The result is returned as another\nraw pcm sample buffer\n\n\n*function*  ``decode  (data: bytes, output_format: miniaudio.SampleFormat = <SampleFormat.SIGNED16: 2>, nchannels: int = 2, sample_rate: int = 44100, dither: miniaudio.DitherMode = <DitherMode.NONE: 0>) -> miniaudio.DecodedSoundFile``\n> Convenience function to decode any supported audio file in memory to raw PCM samples in your\nchosen format.\n\n\n*function*  ``decode_file  (filename: str, output_format: miniaudio.SampleFormat = <SampleFormat.SIGNED16: 2>, nchannels: int = 2, sample_rate: int = 44100, dither: miniaudio.DitherMode = <DitherMode.NONE: 0>) -> miniaudio.DecodedSoundFile``\n> Convenience function to decode any supported audio file to raw PCM samples in your chosen format.\n\n\n*function*  ``flac_get_file_info  (filename: str) -> miniaudio.SoundFileInfo``\n> Fetch some information about the audio file (flac format).\n\n\n*function*  ``flac_get_info  (data: bytes) -> miniaudio.SoundFileInfo``\n> Fetch some information about the audio data (flac format).\n\n\n*function*  ``flac_read_f32  (data: bytes) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole flac audio file. Resulting sample format is 32 bits float.\n\n\n*function*  ``flac_read_file_f32  (filename: str) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole flac audio file. Resulting sample format is 32 bits float.\n\n\n*function*  ``flac_read_file_s16  (filename: str) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole flac audio file. Resulting sample format is 16 bits signed integer.\n\n\n*function*  ``flac_read_file_s32  (filename: str) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole flac audio file. Resulting sample format is 32 bits signed integer.\n\n\n*function*  ``flac_read_s16  (data: bytes) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole flac audio data. Resulting sample format is 16 bits signed integer.\n\n\n*function*  ``flac_read_s32  (data: bytes) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole flac audio data. Resulting sample format is 32 bits signed integer.\n\n\n*function*  ``flac_stream_file  (filename: str, frames_to_read: int = 1024, seek_frame: int = 0) -> Generator[array.array, NoneType, NoneType]``\n> Streams the flac audio file as interleaved 16 bit signed integer sample arrays segments. This uses\na fixed chunk size and cannot be used as a generic miniaudio decoder input stream. Consider using\nstream_file() instead.\n\n\n*function*  ``get_enabled_backends  () -> Set[miniaudio.Backend]``\n> Returns the set of available backends by the compilation environment for the underlying miniaudio\nC library\n\n\n*function*  ``get_file_info  (filename: str) -> miniaudio.SoundFileInfo``\n> Fetch some information about the audio file.\n\n\n*function*  ``is_backend_enabled  (backend: miniaudio.Backend) -> bool``\n> Determines whether or not the given backend is available by the compilation environment for the\nunderlying miniaudio C library\n\n\n*function*  ``is_loopback_supported  (backend: miniaudio.Backend) -> bool``\n> Determines whether or not loopback mode is support by a backend.\n\n\n*function*  ``lib_version  () -> str``\n> Returns the version string of the underlying miniaudio C library\n\n\n*function*  ``mp3_get_file_info  (filename: str) -> miniaudio.SoundFileInfo``\n> Fetch some information about the audio file (mp3 format).\n\n\n*function*  ``mp3_get_info  (data: bytes) -> miniaudio.SoundFileInfo``\n> Fetch some information about the audio data (mp3 format).\n\n\n*function*  ``mp3_read_f32  (data: bytes) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole mp3 audio data. Resulting sample format is 32 bits float.\n\n\n*function*  ``mp3_read_file_f32  (filename: str) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole mp3 audio file. Resulting sample format is 32 bits float.\n\n\n*function*  ``mp3_read_file_s16  (filename: str) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole mp3 audio file. Resulting sample format is 16 bits signed integer.\n\n\n*function*  ``mp3_read_s16  (data: bytes) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole mp3 audio data. Resulting sample format is 16 bits signed integer.\n\n\n*function*  ``mp3_stream_file  (filename: str, frames_to_read: int = 1024, seek_frame: int = 0) -> Generator[array.array, NoneType, NoneType]``\n> Streams the mp3 audio file as interleaved 16 bit signed integer sample arrays segments. This uses\na fixed chunk size and cannot be used as a generic miniaudio decoder input stream. Consider using\nstream_file() instead.\n\n\n*function*  ``read_file  (filename: str, convert_to_16bit: bool = False) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole audio file. Miniaudio will attempt to return the sound data in exactly\nthe same format as in the file. Unless you set convert_convert_to_16bit to True, then the result is\nalways a 16 bit sample format.\n\n\n*function*  ``stream_any  (source: miniaudio.StreamableSource, source_format: miniaudio.FileFormat = <FileFormat.UNKNOWN: 0>, output_format: miniaudio.SampleFormat = <SampleFormat.SIGNED16: 2>, nchannels: int = 2, sample_rate: int = 44100, frames_to_read: int = 1024, dither: miniaudio.DitherMode = <DitherMode.NONE: 0>, seek_frame: int = 0) -> Generator[array.array, int, NoneType]``\n> Convenience function that returns a generator to decode and stream any source of encoded audio\ndata (such as a network stream). Stream result is chunks of raw PCM samples in the chosen format. If\nyou send() a number into the generator rather than just using next() on it, you'll get that given\nnumber of frames, instead of the default configured amount. This is particularly useful to plug this\nstream into an audio device callback that wants a variable number of frames per call.\n\n\n*function*  ``stream_file  (filename: str, output_format: miniaudio.SampleFormat = <SampleFormat.SIGNED16: 2>, nchannels: int = 2, sample_rate: int = 44100, frames_to_read: int = 1024, dither: miniaudio.DitherMode = <DitherMode.NONE: 0>, seek_frame: int = 0) -> Generator[array.array, int, NoneType]``\n> Convenience generator function to decode and stream any supported audio file as chunks of raw PCM\nsamples in the chosen format. If you send() a number into the generator rather than just using\nnext() on it, you'll get that given number of frames, instead of the default configured amount. This\nis particularly useful to plug this stream into an audio device callback that wants a variable\nnumber of frames per call.\n\n\n*function*  ``stream_memory  (data: bytes, output_format: miniaudio.SampleFormat = <SampleFormat.SIGNED16: 2>, nchannels: int = 2, sample_rate: int = 44100, frames_to_read: int = 1024, dither: miniaudio.DitherMode = <DitherMode.NONE: 0>) -> Generator[array.array, int, NoneType]``\n> Convenience generator function to decode and stream any supported audio file in memory as chunks\nof raw PCM samples in the chosen format. If you send() a number into the generator rather than just\nusing next() on it, you'll get that given number of frames, instead of the default configured\namount. This is particularly useful to plug this stream into an audio device callback that wants a\nvariable number of frames per call.\n\n\n*function*  ``stream_raw_pcm_memory  (pcmdata: Union[array.array, memoryview, bytes], nchannels: int, sample_width: int, frames_to_read: int = 4096) -> Generator[Union[bytes, array.array], int, NoneType]``\n> Convenience generator function to stream raw pcm audio data from memory. Usually you don't need to\nuse this as the library provides many other streaming options that work on much smaller, encoded,\naudio data. However, in the odd case that you only have already decoded raw pcm data you can use\nthis generator as a stream source.  The data can be provided in ``array`` type or ``bytes``,\n``memoryview`` or even a numpy array. Be sure to also specify the correct number of channels that\nthe audio data has, and the sample with in bytes.\n\n\n*function*  ``stream_with_callbacks  (sample_stream: Generator[Union[bytes, array.array], int, NoneType], progress_callback: Optional[Callable[[int], NoneType]] = None, frame_process_method: Union[Callable[[array.array], array.array], None] = None, end_callback: Optional[Callable] = None) -> Generator[Union[bytes, array.array], int, NoneType]``\n> Convenience generator function to add callback and processing functionality to another stream. You can specify:\nA callback function that gets called during play and takes an ``int``\nfor the number of frames played.\nA function that can be used to process raw data frames before they are yielded back\n(takes an ``array.array`` and returns an ``array.array``)\n*Note: if the processing method is slow it will result in audio glitchiness*\nA callback function that gets called when the stream ends playing.\n\n\n*function*  ``vorbis_get_file_info  (filename: str) -> miniaudio.SoundFileInfo``\n> Fetch some information about the audio file (vorbis format).\n\n\n*function*  ``vorbis_get_info  (data: bytes) -> miniaudio.SoundFileInfo``\n> Fetch some information about the audio data (vorbis format).\n\n\n*function*  ``vorbis_read  (data: bytes) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole vorbis audio data. Resulting sample format is 16 bits signed integer.\n\n\n*function*  ``vorbis_read_file  (filename: str) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole vorbis audio file. Resulting sample format is 16 bits signed integer.\n\n\n*function*  ``vorbis_stream_file  (filename: str, seek_frame: int = 0) -> Generator[array.array, NoneType, NoneType]``\n> Streams the ogg vorbis audio file as interleaved 16 bit signed integer sample arrays segments.\nThis uses a variable unconfigurable chunk size and cannot be used as a generic miniaudio decoder\ninput stream. Consider using stream_file() instead.\n\n\n*function*  ``wav_get_file_info  (filename: str) -> miniaudio.SoundFileInfo``\n> Fetch some information about the audio file (wav format).\n\n\n*function*  ``wav_get_info  (data: bytes) -> miniaudio.SoundFileInfo``\n> Fetch some information about the audio data (wav format).\n\n\n*function*  ``wav_read_f32  (data: bytes) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole wav audio data. Resulting sample format is 32 bits float.\n\n\n*function*  ``wav_read_file_f32  (filename: str) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole wav audio file. Resulting sample format is 32 bits float.\n\n\n*function*  ``wav_read_file_s16  (filename: str) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole wav audio file. Resulting sample format is 16 bits signed integer.\n\n\n*function*  ``wav_read_file_s32  (filename: str) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole wav audio file. Resulting sample format is 32 bits signed integer.\n\n\n*function*  ``wav_read_s16  (data: bytes) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole wav audio data. Resulting sample format is 16 bits signed integer.\n\n\n*function*  ``wav_read_s32  (data: bytes) -> miniaudio.DecodedSoundFile``\n> Reads and decodes the whole wav audio data. Resulting sample format is 32 bits signed integer.\n\n\n*function*  ``wav_stream_file  (filename: str, frames_to_read: int = 1024, seek_frame: int = 0) -> Generator[array.array, NoneType, NoneType]``\n> Streams the WAV audio file as interleaved 16 bit signed integer sample arrays segments. This uses\na fixed chunk size and cannot be used as a generic miniaudio decoder input stream. Consider using\nstream_file() instead.\n\n\n*function*  ``wav_write_file  (filename: str, sound: miniaudio.DecodedSoundFile) ``\n> Writes the pcm sound to a WAV file\n\n\n*function*  ``width_from_format  (sampleformat: miniaudio.SampleFormat) -> int``\n> returns the sample width in bytes, of the given sample format.\n\n\n*class*  ``CaptureDevice``\n\n``CaptureDevice  (self, input_format: miniaudio.SampleFormat = <SampleFormat.SIGNED16: 2>, nchannels: int = 2, sample_rate: int = 44100, buffersize_msec: int = 200, device_id: Optional[_cffi_backend._CDataBase] = None, callback_periods: int = 0, backends: Optional[List[miniaudio.Backend]] = None, thread_prio: miniaudio.ThreadPriority = <ThreadPriority.HIGHEST: 0>, app_name: str = '') ``\n> An audio device provided by miniaudio, for audio capture (recording).\n\n> *method*  ``close  (self) ``\n> > Halt playback or capture and close down the device. If you use the device as a context manager,\nit will be closed automatically.\n\n> *method*  ``start  (self, callback_generator: Generator[NoneType, Union[bytes, array.array], NoneType]) ``\n> > Start the audio device: capture (recording) begins. The recorded audio data is sent to the given\ncallback generator as raw bytes. (it should already be started before)\n\n> *method*  ``stop  (self) ``\n> > Halt playback or capture.\n\n\n*class*  ``DecodeError``\n\n``DecodeError  (self, /, *args, **kwargs)``\n> When something went wrong during decoding an audio file.\n\n\n*class*  ``DecodedSoundFile``\n\n``DecodedSoundFile  (self, name: str, nchannels: int, sample_rate: int, sample_format: miniaudio.SampleFormat, samples: array.array) ``\n> Contains various properties and also the PCM frames of a fully decoded audio file.\n\n\n*class*  ``Devices``\n\n``Devices  (self, backends: Optional[List[miniaudio.Backend]] = None) ``\n> Query the audio playback and record devices that miniaudio provides\n\n> *method*  ``get_captures  (self) -> List[Dict[str, Any]]``\n> > Get a list of capture devices and some details about them\n\n> *method*  ``get_playbacks  (self) -> List[Dict[str, Any]]``\n> > Get a list of playback devices and some details about them\n\n\n*class*  ``DuplexStream``\n\n``DuplexStream  (self, playback_format: miniaudio.SampleFormat = <SampleFormat.SIGNED16: 2>, playback_channels: int = 2, capture_format: miniaudio.SampleFormat = <SampleFormat.SIGNED16: 2>, capture_channels: int = 2, sample_rate: int = 44100, buffersize_msec: int = 200, playback_device_id: Optional[_cffi_backend._CDataBase] = None, capture_device_id: Optional[_cffi_backend._CDataBase] = None, callback_periods: int = 0, backends: Optional[List[miniaudio.Backend]] = None, thread_prio: miniaudio.ThreadPriority = <ThreadPriority.HIGHEST: 0>, app_name: str = '') ``\n> Joins a capture device and a playback device.\n\n> *method*  ``close  (self) ``\n> > Halt playback or capture and close down the device. If you use the device as a context manager,\nit will be closed automatically.\n\n> *method*  ``start  (self, callback_generator: Generator[Union[bytes, array.array], Union[bytes, array.array], NoneType]) ``\n> > Start the audio device: playback and capture begin. The audio data for playback is provided by\nthe given callback generator, which is sent the recorded audio data at the same time. (it should\nalready be started before passing it in)\n\n> *method*  ``stop  (self) ``\n> > Halt playback or capture.\n\n\n*class*  ``IceCastClient``\n\n``IceCastClient  (self, url: str, update_stream_title: Callable[[ForwardRef('IceCastClient'), str], NoneType] = None) ``\n> A simple client for IceCast audio streams as miniaudio streamable source. If the stream has Icy\nMeta Data, the stream_title attribute will be updated with the actual title taken from the meta\ndata. You can also provide a callback to be called when a new stream title is available. The\ndownloading of the data from the internet is done in a background thread and it tries to keep a\n(small) buffer filled with available data to read.\n\n> *method*  ``close  (self) ``\n> > Stop the stream, aborting the background downloading.\n\n> *method*  ``read  (self, num_bytes: int) -> bytes``\n> > Read a chunk of data from the stream.\n\n> *method*  ``seek  (self, offset: int, origin: miniaudio.SeekOrigin) -> bool``\n> > Override this if the stream supports seeking. Note: seek support is sometimes not needed if you\ngive the file type to a decoder upfront. You can ignore this method then.\n\n\n*class*  ``MiniaudioError``\n\n``MiniaudioError  (self, /, *args, **kwargs)``\n> When a miniaudio specific error occurs.\n\n\n*class*  ``PlaybackDevice``\n\n``PlaybackDevice  (self, output_format: miniaudio.SampleFormat = <SampleFormat.SIGNED16: 2>, nchannels: int = 2, sample_rate: int = 44100, buffersize_msec: int = 200, device_id: Optional[_cffi_backend._CDataBase] = None, callback_periods: int = 0, backends: Optional[List[miniaudio.Backend]] = None, thread_prio: miniaudio.ThreadPriority = <ThreadPriority.HIGHEST: 0>, app_name: str = '') ``\n> An audio device provided by miniaudio, for audio playback.\n\n> *method*  ``close  (self) ``\n> > Halt playback or capture and close down the device. If you use the device as a context manager,\nit will be closed automatically.\n\n> *method*  ``start  (self, callback_generator: Generator[Union[bytes, array.array], int, NoneType]) ``\n> > Start the audio device: playback begins. The audio data is provided by the given callback\ngenerator. The generator gets sent the required number of frames and should yield the sample data as\nraw bytes, a memoryview, an array.array, or as a numpy array with shape (numframes, numchannels).\nThe generator should already be started before passing it in.\n\n> *method*  ``stop  (self) ``\n> > Halt playback or capture.\n\n\n*class*  ``SoundFileInfo``\n\n``SoundFileInfo  (self, name: str, file_format: miniaudio.FileFormat, nchannels: int, sample_rate: int, sample_format: miniaudio.SampleFormat, duration: float, num_frames: int) ``\n> Contains various properties of an audio file.\n\n\n*class*  ``StreamableSource``\n\n``StreamableSource  (self, /, *args, **kwargs)``\n> Base class for streams of audio data bytes. Can be used as a contextmanager, to properly call\nclose().\n\n> *method*  ``close  (self) ``\n> > Override this to properly close the stream and free resources.\n\n> *method*  ``read  (self, num_bytes: int) -> Union[bytes, memoryview]``\n> > override this to provide data bytes to the consumer of the stream\n\n> *method*  ``seek  (self, offset: int, origin: miniaudio.SeekOrigin) -> bool``\n> > Override this if the stream supports seeking. Note: seek support is sometimes not needed if you\ngive the file type to a decoder upfront. You can ignore this method then.\n\n\n*class*  ``WavFileReadStream``\n\n``WavFileReadStream  (self, pcm_sample_gen: Generator[Union[bytes, array.array], int, NoneType], sample_rate: int, nchannels: int, output_format: miniaudio.SampleFormat, max_frames: int = 0) ``\n> An IO stream that reads as a .wav file, and which gets its pcm samples from the provided producer\n\n> *method*  ``close  (self) ``\n> > Close the file\n\n> *method*  ``read  (self, amount: int = 9223372036854775807) -> Optional[bytes]``\n> > Read up to the given amount of bytes from the file.\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/irmen/pyminiaudio",
    "keywords": "sound,audio,playback,recording,conversion,decoding",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miniaudio",
    "package_url": "https://pypi.org/project/miniaudio/",
    "platform": null,
    "project_url": "https://pypi.org/project/miniaudio/",
    "project_urls": {
      "Homepage": "https://github.com/irmen/pyminiaudio"
    },
    "release_url": "https://pypi.org/project/miniaudio/1.54/",
    "requires_dist": [
      "cffi (>=1.12.0)",
      "wheel"
    ],
    "requires_python": "",
    "summary": "python bindings for the miniaudio library and its decoders (mp3, flac, ogg vorbis, wav)",
    "version": "1.54",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17529903,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9338f44c5730acfa3733201de9476b606593bc06a2e39d6ac4b42fc6cd4d322f",
        "md5": "f153994afdfacbd64ef292a2402857f7",
        "sha256": "8b43e4341eb8a8d2e3970089a3ca0522840dab8fbbedc87e24df041cdac1d6c2"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl",
      "has_sig": false,
      "md5_digest": "f153994afdfacbd64ef292a2402857f7",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 670524,
      "upload_time": "2022-11-11T20:51:40",
      "upload_time_iso_8601": "2022-11-11T20:51:40.260228Z",
      "url": "https://files.pythonhosted.org/packages/93/38/f44c5730acfa3733201de9476b606593bc06a2e39d6ac4b42fc6cd4d322f/miniaudio-1.54-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f21c3034a165c6ec1a4d68bca54269e44cb6c9d1f79564bcb4b82e7bc62d2b1",
        "md5": "5a0a6a308643caea91914108d4171ebb",
        "sha256": "cb4fbde7455eb0d07911965b365ba7afcaf961079d993ddaaf878edaa3a75ccb"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "5a0a6a308643caea91914108d4171ebb",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 595522,
      "upload_time": "2022-11-11T20:51:42",
      "upload_time_iso_8601": "2022-11-11T20:51:42.585305Z",
      "url": "https://files.pythonhosted.org/packages/4f/21/c3034a165c6ec1a4d68bca54269e44cb6c9d1f79564bcb4b82e7bc62d2b1/miniaudio-1.54-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f3789074a5ceece5a1109d23c47f0b23453e217b1de2b71481d34367b1c6044",
        "md5": "689f33b37332e98a7efc2e4b76e9c205",
        "sha256": "1265778d074c227871b4788d6a0a7bf5a2fb582c857bc5b5ed2c23ef60a487a0"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp310-cp310-musllinux_1_1_i686.whl",
      "has_sig": false,
      "md5_digest": "689f33b37332e98a7efc2e4b76e9c205",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 570104,
      "upload_time": "2022-11-11T20:51:44",
      "upload_time_iso_8601": "2022-11-11T20:51:44.457559Z",
      "url": "https://files.pythonhosted.org/packages/8f/37/89074a5ceece5a1109d23c47f0b23453e217b1de2b71481d34367b1c6044/miniaudio-1.54-cp310-cp310-musllinux_1_1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8584efa858d80f40f5b4ba253678b0ae5680336b026e69a617e100747493dada",
        "md5": "f1d292e8e22e358ba98a496757218ef6",
        "sha256": "70e0020e0cfad78320e74cb2e74f2593ec186674cbbf83ea205cda7710d447e7"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp310-cp310-musllinux_1_1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "f1d292e8e22e358ba98a496757218ef6",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 593546,
      "upload_time": "2022-11-11T20:51:46",
      "upload_time_iso_8601": "2022-11-11T20:51:46.359303Z",
      "url": "https://files.pythonhosted.org/packages/85/84/efa858d80f40f5b4ba253678b0ae5680336b026e69a617e100747493dada/miniaudio-1.54-cp310-cp310-musllinux_1_1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0acaa96db5d0eb3135a2713cef488e23524d10b6196d21f732574ac09c2d49f4",
        "md5": "842accd41a79ec07eab3a7e2fc62854a",
        "sha256": "9a18f311d678832e4160fb75cd236f440cf325de06dbc3cb302223922cb3fe24"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp310-cp310-win32.whl",
      "has_sig": false,
      "md5_digest": "842accd41a79ec07eab3a7e2fc62854a",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 274387,
      "upload_time": "2022-11-11T20:51:48",
      "upload_time_iso_8601": "2022-11-11T20:51:48.305808Z",
      "url": "https://files.pythonhosted.org/packages/0a/ca/a96db5d0eb3135a2713cef488e23524d10b6196d21f732574ac09c2d49f4/miniaudio-1.54-cp310-cp310-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a513c4dc9987a9d11653f6ef4e0ac661b3a0544e8e835204346d8686c02af86b",
        "md5": "fc8e8b692b785dcfae5ce4db35842a4f",
        "sha256": "e583038f44367b5cdb31cf742fd5918f65ccdfd0f6f384e0871155372b34857a"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "fc8e8b692b785dcfae5ce4db35842a4f",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 323369,
      "upload_time": "2022-11-11T20:51:49",
      "upload_time_iso_8601": "2022-11-11T20:51:49.839109Z",
      "url": "https://files.pythonhosted.org/packages/a5/13/c4dc9987a9d11653f6ef4e0ac661b3a0544e8e835204346d8686c02af86b/miniaudio-1.54-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13b997c34eb7cabfea1354fec5cc99c91e4e2958f53d60c0936daba97cf9e4ab",
        "md5": "3c7a868963a2a36e8fb280c95bd47b2b",
        "sha256": "b87c5321c49b4ace8a29e11114d5929732f9d90c76dd4b8bdd1af181be14cb17"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp36-cp36m-manylinux_2_17_i686.manylinux2014_i686.whl",
      "has_sig": false,
      "md5_digest": "3c7a868963a2a36e8fb280c95bd47b2b",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 670350,
      "upload_time": "2022-11-11T20:51:51",
      "upload_time_iso_8601": "2022-11-11T20:51:51.352909Z",
      "url": "https://files.pythonhosted.org/packages/13/b9/97c34eb7cabfea1354fec5cc99c91e4e2958f53d60c0936daba97cf9e4ab/miniaudio-1.54-cp36-cp36m-manylinux_2_17_i686.manylinux2014_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c7c977f96c62872230d847050defdf427f71bc609b334d628c5e2807d1d08d0",
        "md5": "b7eec97fd67f35dfc49dee14d43f881d",
        "sha256": "24dd455de09f188fc23cacee0f16e8e76fc1a8dc053a456fa6b9aa6f9d8d4428"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b7eec97fd67f35dfc49dee14d43f881d",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 595299,
      "upload_time": "2022-11-11T20:51:52",
      "upload_time_iso_8601": "2022-11-11T20:51:52.717974Z",
      "url": "https://files.pythonhosted.org/packages/6c/7c/977f96c62872230d847050defdf427f71bc609b334d628c5e2807d1d08d0/miniaudio-1.54-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dbd7ce9031906d304ab474cae8bd2cc42ffef010dec4bde4cf6beadbfe2d2134",
        "md5": "83adfa5268bf07138c71560199febc8c",
        "sha256": "c9a005707516c8d5353c84144b5ee7b07887264fc9bb992631e7440f5b3268d5"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp36-cp36m-musllinux_1_1_i686.whl",
      "has_sig": false,
      "md5_digest": "83adfa5268bf07138c71560199febc8c",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 569847,
      "upload_time": "2022-11-11T20:51:54",
      "upload_time_iso_8601": "2022-11-11T20:51:54.275775Z",
      "url": "https://files.pythonhosted.org/packages/db/d7/ce9031906d304ab474cae8bd2cc42ffef010dec4bde4cf6beadbfe2d2134/miniaudio-1.54-cp36-cp36m-musllinux_1_1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d31bd46bbe38a745e65de1fddaa69aa793acb3e1a94b83c61dbe25e60f7fd791",
        "md5": "9ee77585147c181fe4ca4a14225964d1",
        "sha256": "7775491bf36ae472e3d1b8c227e6606df8985f5e7a50467028d67be749506d53"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp36-cp36m-musllinux_1_1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "9ee77585147c181fe4ca4a14225964d1",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 593300,
      "upload_time": "2022-11-11T20:51:56",
      "upload_time_iso_8601": "2022-11-11T20:51:56.209633Z",
      "url": "https://files.pythonhosted.org/packages/d3/1b/d46bbe38a745e65de1fddaa69aa793acb3e1a94b83c61dbe25e60f7fd791/miniaudio-1.54-cp36-cp36m-musllinux_1_1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d7bf5836455bbeae1a42e70e6d5e70d2fd4e74068966754265a082f99911434",
        "md5": "869d0d172bd8865c5583876cce89617a",
        "sha256": "5662480568984ce2d8335675c31541e58bc17a9d177a688fb242d078d033fe7f"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "869d0d172bd8865c5583876cce89617a",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 274338,
      "upload_time": "2022-11-11T20:51:58",
      "upload_time_iso_8601": "2022-11-11T20:51:58.006991Z",
      "url": "https://files.pythonhosted.org/packages/1d/7b/f5836455bbeae1a42e70e6d5e70d2fd4e74068966754265a082f99911434/miniaudio-1.54-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8900d7b17b946addd63c8f0c3da57270c8daee4e0031097de603a0498250f375",
        "md5": "7de6ed2d122d2e978a96e926f044f6d9",
        "sha256": "5729891f4d0c4551f54ed7502d27824cc91d3bd78a202525f4b4d867c10b6a9b"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "7de6ed2d122d2e978a96e926f044f6d9",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 323358,
      "upload_time": "2022-11-11T20:52:00",
      "upload_time_iso_8601": "2022-11-11T20:52:00.079905Z",
      "url": "https://files.pythonhosted.org/packages/89/00/d7b17b946addd63c8f0c3da57270c8daee4e0031097de603a0498250f375/miniaudio-1.54-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0fbe167411bad0f6d618401d1193b1b705805a6deed2c6d3655933ab6396d610",
        "md5": "f80095ac08f80bce07c910a57f867069",
        "sha256": "d0f92640fd33af0299d41e8c77fdce513128798b4aef8953f7ce6ddf6308e4a4"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp37-cp37m-manylinux_2_17_i686.manylinux2014_i686.whl",
      "has_sig": false,
      "md5_digest": "f80095ac08f80bce07c910a57f867069",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 670339,
      "upload_time": "2022-11-11T20:52:01",
      "upload_time_iso_8601": "2022-11-11T20:52:01.853309Z",
      "url": "https://files.pythonhosted.org/packages/0f/be/167411bad0f6d618401d1193b1b705805a6deed2c6d3655933ab6396d610/miniaudio-1.54-cp37-cp37m-manylinux_2_17_i686.manylinux2014_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12e6f9a073cf47a11e3c0795a1625bbf6925189c728c37ab968c5160250e0574",
        "md5": "139729b17dcd839d472c990f72856cd4",
        "sha256": "4ab6b82190aaecbc5c8d9ac5d879d8ac854e453b080e9eaadec1ba64f4b3871d"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "139729b17dcd839d472c990f72856cd4",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 595312,
      "upload_time": "2022-11-11T20:52:03",
      "upload_time_iso_8601": "2022-11-11T20:52:03.336775Z",
      "url": "https://files.pythonhosted.org/packages/12/e6/f9a073cf47a11e3c0795a1625bbf6925189c728c37ab968c5160250e0574/miniaudio-1.54-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68cfc795ebbbc179a6941e57f4a94bd335b44d04615b83373663f18509380c4e",
        "md5": "91f2a17285ee496a65fe64b22069b7ed",
        "sha256": "c9ee24037793554b84462e88154246133224fe4286b06edec1e150c393d3e9d3"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp37-cp37m-musllinux_1_1_i686.whl",
      "has_sig": false,
      "md5_digest": "91f2a17285ee496a65fe64b22069b7ed",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 569863,
      "upload_time": "2022-11-11T20:52:04",
      "upload_time_iso_8601": "2022-11-11T20:52:04.797162Z",
      "url": "https://files.pythonhosted.org/packages/68/cf/c795ebbbc179a6941e57f4a94bd335b44d04615b83373663f18509380c4e/miniaudio-1.54-cp37-cp37m-musllinux_1_1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c95e66367e283a1921c4b77956b70687a0b7664d04b2397a38cd09d94c39f2d",
        "md5": "68c32ff5d80231184844fc0fe1e00f9a",
        "sha256": "91f7a1ee6db9fcfbea6b448ff4844e11bbcb4b8de1fad367eb98e9e096c11fa3"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp37-cp37m-musllinux_1_1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "68c32ff5d80231184844fc0fe1e00f9a",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 593321,
      "upload_time": "2022-11-11T20:52:06",
      "upload_time_iso_8601": "2022-11-11T20:52:06.818082Z",
      "url": "https://files.pythonhosted.org/packages/2c/95/e66367e283a1921c4b77956b70687a0b7664d04b2397a38cd09d94c39f2d/miniaudio-1.54-cp37-cp37m-musllinux_1_1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68c9f4c59ab0c74ce70286a55c5acae9a84f5e065cca3e9b630f27b447604b41",
        "md5": "c8670ff630cc223e7c8a129d62af83fc",
        "sha256": "206db79e2fb2f0ed41693fd81829434509392e2d07ba52bd670141192f836fbd"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "c8670ff630cc223e7c8a129d62af83fc",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 274338,
      "upload_time": "2022-11-11T20:52:08",
      "upload_time_iso_8601": "2022-11-11T20:52:08.632124Z",
      "url": "https://files.pythonhosted.org/packages/68/c9/f4c59ab0c74ce70286a55c5acae9a84f5e065cca3e9b630f27b447604b41/miniaudio-1.54-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a3f235eb6f72f3baaf4ac61c57ab58dc3f400a127082bab96f0d77b2b648103",
        "md5": "76fd4b586fd94ed789a21ac5afd6987b",
        "sha256": "55f987bfa959c687537d7df98140da23641f13d1d3f7b5c088eaeabeb5b995f2"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "76fd4b586fd94ed789a21ac5afd6987b",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 323360,
      "upload_time": "2022-11-11T20:52:10",
      "upload_time_iso_8601": "2022-11-11T20:52:10.111470Z",
      "url": "https://files.pythonhosted.org/packages/7a/3f/235eb6f72f3baaf4ac61c57ab58dc3f400a127082bab96f0d77b2b648103/miniaudio-1.54-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c7f005ebd18d152574bcd799f8336563cfc13ba3b5113a99e6c5ecf2a5739ce",
        "md5": "3add1e7ea4a65f35ff828b6c3c198f49",
        "sha256": "17a1c16465c688918555711730cecf96543a66744742cce98c566462164cbfca"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp38-cp38-manylinux_2_17_i686.manylinux2014_i686.whl",
      "has_sig": false,
      "md5_digest": "3add1e7ea4a65f35ff828b6c3c198f49",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 670519,
      "upload_time": "2022-11-11T20:52:12",
      "upload_time_iso_8601": "2022-11-11T20:52:12.027864Z",
      "url": "https://files.pythonhosted.org/packages/6c/7f/005ebd18d152574bcd799f8336563cfc13ba3b5113a99e6c5ecf2a5739ce/miniaudio-1.54-cp38-cp38-manylinux_2_17_i686.manylinux2014_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7857cf9f20b404956d2cdbb536491f4f97c934a8215d6a0b8bca69601ffb34a",
        "md5": "bf26bf0d157558947b4ab635715f3294",
        "sha256": "93a25b6553f8b33bd07fbcc4a38b067e64d913e000377f93295ff9eb65a8a73e"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "bf26bf0d157558947b4ab635715f3294",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 595517,
      "upload_time": "2022-11-11T20:52:13",
      "upload_time_iso_8601": "2022-11-11T20:52:13.765914Z",
      "url": "https://files.pythonhosted.org/packages/c7/85/7cf9f20b404956d2cdbb536491f4f97c934a8215d6a0b8bca69601ffb34a/miniaudio-1.54-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4acd96f94846fd21e4bbca4e121c4dbf242822991193f4e89f119c599630bbb4",
        "md5": "6a447caaa61b9867ca2c1e32e2877900",
        "sha256": "3067b58036adeaa6fd10ac59834c30f4caed32deb0c7d5ec76e5ca9534ca13e8"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp38-cp38-musllinux_1_1_i686.whl",
      "has_sig": false,
      "md5_digest": "6a447caaa61b9867ca2c1e32e2877900",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 570110,
      "upload_time": "2022-11-11T20:52:15",
      "upload_time_iso_8601": "2022-11-11T20:52:15.386751Z",
      "url": "https://files.pythonhosted.org/packages/4a/cd/96f94846fd21e4bbca4e121c4dbf242822991193f4e89f119c599630bbb4/miniaudio-1.54-cp38-cp38-musllinux_1_1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "491970462a5630f26dd9ed7cec71bcc381a66e69b8cd8c0976fbe03e173e7137",
        "md5": "a4f1c38779590486b9acdb08950ace93",
        "sha256": "114bc7157fc7e6aa2142e8331bdb4b1f0d75c24ad7f455991ff4a226a928e815"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp38-cp38-musllinux_1_1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "a4f1c38779590486b9acdb08950ace93",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 593566,
      "upload_time": "2022-11-11T20:52:16",
      "upload_time_iso_8601": "2022-11-11T20:52:16.922761Z",
      "url": "https://files.pythonhosted.org/packages/49/19/70462a5630f26dd9ed7cec71bcc381a66e69b8cd8c0976fbe03e173e7137/miniaudio-1.54-cp38-cp38-musllinux_1_1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a37f1f31baaea8bfee3dabbce0e1bab48e5fe8f7f45f4053a8d2198e31aee0e",
        "md5": "154827a1190efc7999f1151b951c55a0",
        "sha256": "9a7fc97828d10ffe9af18e1c68963c3348f1e5b91ec75eb64619080e48c2db5a"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp38-cp38-win32.whl",
      "has_sig": false,
      "md5_digest": "154827a1190efc7999f1151b951c55a0",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 274377,
      "upload_time": "2022-11-11T20:52:18",
      "upload_time_iso_8601": "2022-11-11T20:52:18.668005Z",
      "url": "https://files.pythonhosted.org/packages/5a/37/f1f31baaea8bfee3dabbce0e1bab48e5fe8f7f45f4053a8d2198e31aee0e/miniaudio-1.54-cp38-cp38-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "252c8e50565c1dd671574801816660aef1c30f71ef6c597fefe4374f7e79337b",
        "md5": "b830ee778499fb26d2e7afee8f2afa10",
        "sha256": "f519b0003e7d3723ea76d73e2ce2186e4b959c19ed2f6fad6879afa24107fa2f"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "b830ee778499fb26d2e7afee8f2afa10",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 323376,
      "upload_time": "2022-11-11T20:52:20",
      "upload_time_iso_8601": "2022-11-11T20:52:20.794434Z",
      "url": "https://files.pythonhosted.org/packages/25/2c/8e50565c1dd671574801816660aef1c30f71ef6c597fefe4374f7e79337b/miniaudio-1.54-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15f6f4e3895c3677bc9f2dc706591ff7a2aa78359abf7f3baad7865e8c817f3e",
        "md5": "fe068adb17a1dbce6e5e7372e122983b",
        "sha256": "9a4c580f11e514d61e4b24a6c68601f4971d24942d32a51559e65fb546b14f53"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl",
      "has_sig": false,
      "md5_digest": "fe068adb17a1dbce6e5e7372e122983b",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 670512,
      "upload_time": "2022-11-11T20:52:22",
      "upload_time_iso_8601": "2022-11-11T20:52:22.352398Z",
      "url": "https://files.pythonhosted.org/packages/15/f6/f4e3895c3677bc9f2dc706591ff7a2aa78359abf7f3baad7865e8c817f3e/miniaudio-1.54-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb813f3994b5b07e205655ab11c9bc9b84339a03490dc3039b98c3bc94533a0a",
        "md5": "e1e271ada7cd3dbcc1f4d0eff981fc8a",
        "sha256": "37500bff66588d876d1895df7a71631727a859720f5d89ecb9ea711e4c32b9f9"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "e1e271ada7cd3dbcc1f4d0eff981fc8a",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 595502,
      "upload_time": "2022-11-11T20:52:24",
      "upload_time_iso_8601": "2022-11-11T20:52:24.036681Z",
      "url": "https://files.pythonhosted.org/packages/bb/81/3f3994b5b07e205655ab11c9bc9b84339a03490dc3039b98c3bc94533a0a/miniaudio-1.54-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df3a5c0827dd3bc99fb2fca65a4f181c534de0024ef55914e2d8620d4c0fda80",
        "md5": "69364da3c41f633630c23d294b8fe770",
        "sha256": "b3487e5a3645abcfeb438eed68e009fbc284dc9c9ca452b7dcc16802d50b5585"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp39-cp39-musllinux_1_1_i686.whl",
      "has_sig": false,
      "md5_digest": "69364da3c41f633630c23d294b8fe770",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 570106,
      "upload_time": "2022-11-11T20:52:26",
      "upload_time_iso_8601": "2022-11-11T20:52:26.208316Z",
      "url": "https://files.pythonhosted.org/packages/df/3a/5c0827dd3bc99fb2fca65a4f181c534de0024ef55914e2d8620d4c0fda80/miniaudio-1.54-cp39-cp39-musllinux_1_1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "72c622cc3205c12ba34dacd89be51af2e9940057bd5897d7145644dd345d7a65",
        "md5": "1929b07aedf5e15f30ed9897536e8dd5",
        "sha256": "728d01a24aca0abe3dbcd4f23c65f10313c6211027e3d70a69b044c34681ff32"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp39-cp39-musllinux_1_1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "1929b07aedf5e15f30ed9897536e8dd5",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 593551,
      "upload_time": "2022-11-11T20:52:27",
      "upload_time_iso_8601": "2022-11-11T20:52:27.685630Z",
      "url": "https://files.pythonhosted.org/packages/72/c6/22cc3205c12ba34dacd89be51af2e9940057bd5897d7145644dd345d7a65/miniaudio-1.54-cp39-cp39-musllinux_1_1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f925b2b9520f984df1b180eaa7dc804516e967add3fe38213c1caf8c9739494b",
        "md5": "f3074f9ca9f1115e4302efa2fbe63d31",
        "sha256": "fe2a345c15b4ef1acbb912f5b57bcf4b1851a3650c8c8e1811edccb7dffd980a"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp39-cp39-win32.whl",
      "has_sig": false,
      "md5_digest": "f3074f9ca9f1115e4302efa2fbe63d31",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 274384,
      "upload_time": "2022-11-11T20:52:29",
      "upload_time_iso_8601": "2022-11-11T20:52:29.098307Z",
      "url": "https://files.pythonhosted.org/packages/f9/25/b2b9520f984df1b180eaa7dc804516e967add3fe38213c1caf8c9739494b/miniaudio-1.54-cp39-cp39-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73106408c91c23b449704f50de5e296bb7a18fae739e2fbea209ac62afcec607",
        "md5": "39f35ebc180a94a0d388db865d1294f2",
        "sha256": "723d1bb63754c005c029ec4858053c953cfce75b88636e5774bf3521d4b7a374"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "39f35ebc180a94a0d388db865d1294f2",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 323369,
      "upload_time": "2022-11-11T20:52:30",
      "upload_time_iso_8601": "2022-11-11T20:52:30.615884Z",
      "url": "https://files.pythonhosted.org/packages/73/10/6408c91c23b449704f50de5e296bb7a18fae739e2fbea209ac62afcec607/miniaudio-1.54-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08336e13833368d40303e9ba45f1fc1300540f922a847a8b23ca790e6e008799",
        "md5": "3d5f978571cb847b560b1636432ce8e5",
        "sha256": "111bc9da789d9358f3e929645520195a0b01d266f41b478831968aef76f18e74"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-pp37-pypy37_pp73-manylinux_2_17_i686.manylinux2014_i686.whl",
      "has_sig": false,
      "md5_digest": "3d5f978571cb847b560b1636432ce8e5",
      "packagetype": "bdist_wheel",
      "python_version": "pp37",
      "requires_python": null,
      "size": 1271231,
      "upload_time": "2022-11-11T20:52:32",
      "upload_time_iso_8601": "2022-11-11T20:52:32.210325Z",
      "url": "https://files.pythonhosted.org/packages/08/33/6e13833368d40303e9ba45f1fc1300540f922a847a8b23ca790e6e008799/miniaudio-1.54-pp37-pypy37_pp73-manylinux_2_17_i686.manylinux2014_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "111ff60490bd963f3c8ba26c2fc411dd27ed203b08444e33d93df6cf7b7d7a30",
        "md5": "12825c90693eb235abc25d27b0ca0743",
        "sha256": "16f51e2ed4a0801e130d86d89ff69670dc88cfd6f1a37842c7b5d84eb0438be1"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "12825c90693eb235abc25d27b0ca0743",
      "packagetype": "bdist_wheel",
      "python_version": "pp37",
      "requires_python": null,
      "size": 1129684,
      "upload_time": "2022-11-11T20:52:33",
      "upload_time_iso_8601": "2022-11-11T20:52:33.628844Z",
      "url": "https://files.pythonhosted.org/packages/11/1f/f60490bd963f3c8ba26c2fc411dd27ed203b08444e33d93df6cf7b7d7a30/miniaudio-1.54-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f4cedd7377753192244d8862028446c5181aa91d1765633f0bb9b5dc0851868",
        "md5": "a863464999068af7dd678599adcf9186",
        "sha256": "ed3de2557bdb2df2b10eb9ae760710459437e27b61828d68cbceaa1bdf4fc1fe"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-pp37-pypy37_pp73-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "a863464999068af7dd678599adcf9186",
      "packagetype": "bdist_wheel",
      "python_version": "pp37",
      "requires_python": null,
      "size": 604693,
      "upload_time": "2022-11-11T20:52:35",
      "upload_time_iso_8601": "2022-11-11T20:52:35.690483Z",
      "url": "https://files.pythonhosted.org/packages/6f/4c/edd7377753192244d8862028446c5181aa91d1765633f0bb9b5dc0851868/miniaudio-1.54-pp37-pypy37_pp73-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ad24bebc71f04b6825e195e83b202ee95978af7a3e927fb4966ae6359d020b8",
        "md5": "ad791cd6dbf3edeacf8315eefb16459c",
        "sha256": "0009c14d18debf055bb55f8f94895566c1969dd0354bf8d4dbe30519939dde7f"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-pp38-pypy38_pp73-manylinux_2_17_i686.manylinux2014_i686.whl",
      "has_sig": false,
      "md5_digest": "ad791cd6dbf3edeacf8315eefb16459c",
      "packagetype": "bdist_wheel",
      "python_version": "pp38",
      "requires_python": null,
      "size": 1271404,
      "upload_time": "2022-11-11T20:52:38",
      "upload_time_iso_8601": "2022-11-11T20:52:38.074047Z",
      "url": "https://files.pythonhosted.org/packages/4a/d2/4bebc71f04b6825e195e83b202ee95978af7a3e927fb4966ae6359d020b8/miniaudio-1.54-pp38-pypy38_pp73-manylinux_2_17_i686.manylinux2014_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "103ac5edd0379ce7cfa82dd405140c3083d442153491c5ca955f7398b4c1bf65",
        "md5": "aa75671efe197347ca1cf38477dab6a4",
        "sha256": "09c5ef2127d895ed320d068e2f0ee94bb45da96cfe27722c17ef2e9c5461c815"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "aa75671efe197347ca1cf38477dab6a4",
      "packagetype": "bdist_wheel",
      "python_version": "pp38",
      "requires_python": null,
      "size": 1129889,
      "upload_time": "2022-11-11T20:52:40",
      "upload_time_iso_8601": "2022-11-11T20:52:40.244749Z",
      "url": "https://files.pythonhosted.org/packages/10/3a/c5edd0379ce7cfa82dd405140c3083d442153491c5ca955f7398b4c1bf65/miniaudio-1.54-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6ff7f0cec3de5ed0772a7584c9732758273bf5ae6e34aa450ddb033b2770727",
        "md5": "5872a9a0b937396d17efc66ad566c349",
        "sha256": "bb16459bf334067e1e2063bd52a5d5505c5946e39725e5653505935cf663c8ab"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54-pp38-pypy38_pp73-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "5872a9a0b937396d17efc66ad566c349",
      "packagetype": "bdist_wheel",
      "python_version": "pp38",
      "requires_python": null,
      "size": 604712,
      "upload_time": "2022-11-11T20:52:42",
      "upload_time_iso_8601": "2022-11-11T20:52:42.127164Z",
      "url": "https://files.pythonhosted.org/packages/d6/ff/7f0cec3de5ed0772a7584c9732758273bf5ae6e34aa450ddb033b2770727/miniaudio-1.54-pp38-pypy38_pp73-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dae0809825086bfa6bea3d60b7bb54ed48b9db2fd310ba8768aa50d5789b7848",
        "md5": "cc524d8724c9001f0ea17236e7a5e46e",
        "sha256": "3d2415f5e0caae258cdefdbe0c530be7df17bf28c046d7b6f43c4d93832fe047"
      },
      "downloads": -1,
      "filename": "miniaudio-1.54.tar.gz",
      "has_sig": false,
      "md5_digest": "cc524d8724c9001f0ea17236e7a5e46e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 685597,
      "upload_time": "2022-11-11T20:52:44",
      "upload_time_iso_8601": "2022-11-11T20:52:44.017560Z",
      "url": "https://files.pythonhosted.org/packages/da/e0/809825086bfa6bea3d60b7bb54ed48b9db2fd310ba8768aa50d5789b7848/miniaudio-1.54.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}