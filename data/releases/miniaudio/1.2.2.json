{
  "info": {
    "author": "Irmen de Jong",
    "author_email": "irmen@razorvine.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Multimedia :: Sound/Audio",
      "Topic :: Multimedia :: Sound/Audio :: Conversion",
      "Topic :: Multimedia :: Sound/Audio :: Players"
    ],
    "description": "[![saythanks](https://img.shields.io/badge/say-thanks-ff69b4.svg)](https://saythanks.io/to/irmen)\n[![Latest Version](https://img.shields.io/pypi/v/miniaudio.svg)](https://pypi.python.org/pypi/miniaudio/)\n\n\n# Python miniaudio\n\nThis module provides:\n\n- the [miniaudio](https://github.com/dr-soft/miniaudio/) cross platform sound playback and conversion library\n- its decoders for wav, flac, vorbis and mp3\n- python bindings via cffi for much of the functions offered in those libraries:\n  - getting audio file properties (such as duration, number of channels, sample rate) \n  - reading and decoding audio files\n  - streaming audio files\n  - playback  (via efficient asynchronous pull-API)\n  - streaming and playback are done with generator functions  \n\n\n*Requires Python 3.5 or newer.  Also works on pypy3 (because it uses cffi).* \n\nCurrently, it is only distributed in source form so you need a C compiler to build and install this.\nFor Linux and Mac this shouldn't be a problem. For Windows users it may be though:\nyou have to make sure that the required tools (Visual Studio or \nthe C++ build tools) are installed that allow you to compile Python extension modules.\n \nSoftware license for these Python bindings, miniaudio and the decoders: MIT\n\n## Todo\n\n- the various format conversion functions aren't properly exposed yet.\n- only playback for now, the recording capabilities of miniaudio aren't exposed yet \n\n\n## API\n\n    get_file_info(filename: str) -> miniaudio.SoundFileInfo\n        Fetch some information about the audio file.\n\n    flac_get_file_info(filename: str) -> miniaudio.SoundFileInfo\n        Fetch some information about the audio file (flac format).\n    \n    flac_get_info(data: bytes) -> miniaudio.SoundFileInfo\n        Fetch some information about the audio data (flac format).\n        \n    flac_read_f32(data: bytes) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole flac audio file. Resulting sample format is 32 bits float.\n    \n    flac_read_file_f32(filename: str) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole flac audio file. Resulting sample format is 32 bits float.\n    \n    flac_read_file_s16(filename: str) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole flac audio file. Resulting sample format is 16 bits signed integer.\n    \n    flac_read_file_s32(filename: str) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole flac audio file. Resulting sample format is 32 bits signed integer.\n    \n    flac_read_s16(data: bytes) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole flac audio data. Resulting sample format is 16 bits signed integer.\n    \n    flac_read_s32(data: bytes) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole flac audio data. Resulting sample format is 32 bits signed integer.\n    \n    flac_stream_file(filename: str, frames_to_read: int = 1024) -> Generator[array.array, NoneType, NoneType]\n        Streams the flac audio file as interleaved 16 bit signed integer sample arrays segments.\n    \n    decode(data: bytes, ma_output_format: int = 2, nchannels: int = 2, sample_rate: int = 44100) -> miniaudio.DecodedSoundFile\n        Convenience function to decode any supported audio file in memory to raw PCM samples in your chosen format.\n    \n    decode_file(filename: str, ma_output_format: int = 2, nchannels: int = 2, sample_rate: int = 44100) -> miniaudio.DecodedSoundFile\n        Convenience function to decode any supported audio file to raw PCM samples in your chosen format.\n    \n    get_devices() -> Tuple[List[str], List[str]]\n        Get two lists of supported audio devices: playback devices, recording devices.\n    \n    stream_file(filename: str, ma_output_format: int = 2, nchannels: int = 2, sample_rate: int = 44100, frames_to_read: int = 1024) -> Generator[array.array, int, NoneType]\n        Convenience generator function to decode and stream any supported audio file\n        as chunks of raw PCM samples in the chosen format.\n        If you send() a number into the generator rather than just using next() on it,\n        you'll get that given number of frames, instead of the default configured amount.\n        This is particularly useful to plug this stream into an audio device callback that\n        wants a variable number of frames per call.\n    \n    stream_memory(data: bytes, ma_output_format: int = 2, nchannels: int = 2, sample_rate: int = 44100, frames_to_read: int = 1024) -> Generator[array.array, int, NoneType]\n        Convenience generator function to decode and stream any supported audio file in memory\n        as chunks of raw PCM samples in the chosen format.\n        If you send() a number into the generator rather than just using next() on it,\n        you'll get that given number of frames, instead of the default configured amount.\n        This is particularly useful to plug this stream into an audio device callback that\n        wants a variable number of frames per call.\n    \n    mp3_get_file_info(filename: str) -> miniaudio.SoundFileInfo\n        Fetch some information about the audio file (mp3 format).\n    \n    mp3_get_info(data: bytes) -> miniaudio.SoundFileInfo\n        Fetch some information about the audio data (mp3 format).\n    \n    mp3_read_f32(data: bytes, want_nchannels: int = 0, want_sample_rate: int = 0) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole mp3 audio data. Resulting sample format is 32 bits float.\n    \n    mp3_read_file_f32(filename: str, want_nchannels: int = 0, want_sample_rate: int = 0) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole mp3 audio file. Resulting sample format is 32 bits float.\n    \n    mp3_read_file_s16(filename: str, want_nchannels: int = 0, want_sample_rate: int = 0) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole mp3 audio file. Resulting sample format is 16 bits signed integer.\n    \n    mp3_read_s16(data: bytes, want_nchannels: int = 0, want_sample_rate: int = 0) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole mp3 audio data. Resulting sample format is 16 bits signed integer.\n    \n    mp3_stream_file(filename: str, frames_to_read: int = 1024, want_nchannels: int = 0, want_sample_rate: int = 0) -> Generator[array.array, NoneType, NoneType]\n        Streams the mp3 audio file as interleaved 16 bit signed integer sample arrays segments.\n    \n    read_file(filename: str) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole audio file. Resulting sample format is 16 bits signed integer.\n    \n    vorbis_get_file_info(filename: str) -> miniaudio.SoundFileInfo\n        Fetch some information about the audio file (vorbis format).\n    \n    vorbis_get_info(data: bytes) -> miniaudio.SoundFileInfo\n        Fetch some information about the audio data (vorbis format).\n    \n    vorbis_read(data: bytes) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole vorbis audio data. Resulting sample format is 16 bits signed integer.\n    \n    vorbis_read_file(filename: str) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole vorbis audio file. Resulting sample format is 16 bits signed integer.\n    \n    vorbis_stream_file(filename: str) -> Generator[array.array, NoneType, NoneType]\n        Streams the ogg vorbis audio file as interleaved 16 bit signed integer sample arrays segments.\n    \n    wav_get_file_info(filename: str) -> miniaudio.SoundFileInfo\n        Fetch some information about the audio file (wav format).\n    \n    wav_get_info(data: bytes) -> miniaudio.SoundFileInfo\n        Fetch some information about the audio data (wav format).\n    \n    wav_read_f32(data: bytes) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole wav audio data. Resulting sample format is 32 bits float.\n    \n    wav_read_file_f32(filename: str) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole wav audio file. Resulting sample format is 32 bits float.\n    \n    wav_read_file_s16(filename: str) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole wav audio file. Resulting sample format is 16 bits signed integer.\n    \n    wav_read_file_s32(filename: str) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole wav audio file. Resulting sample format is 32 bits signed integer.\n    \n    wav_read_s16(data: bytes) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole wav audio data. Resulting sample format is 16 bits signed integer.\n    \n    wav_read_s32(data: bytes) -> miniaudio.DecodedSoundFile\n        Reads and decodes the whole wav audio data. Resulting sample format is 32 bits signed integer.\n    \n    wav_stream_file(filename: str, frames_to_read: int = 1024) -> Generator[array.array, NoneType, NoneType]\n        Streams the WAV audio file as interleaved 16 bit signed integer sample arrays segments.\n\n\n    class PlaybackDevice(ma_output_format: int = 2, nchannels: int = 2, sample_rate: int = 44100, buffersize_msec: int = 200)\n       \n       An audio device provided by miniaudio, for audio playback.\n       \n       close(self)\n           Halt playback and close down the device.\n       \n       start(self, audio_producer: Callable[[int, int, int], Union[bytes, array.array]]) -> None\n           Start the audio device: playback begins. The audio data is provided by the given audio_producer\n           generator. The generator gets sent the required number of frames and should yield the sample data\n           as raw bytes or as an array.array.  (it should already be started before passing it in)\n       \n       stop(self) -> None\n           Halt playback.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/irmen/synthesizer/tree/master/pyminiaudio",
    "keywords": "sound,audio,playback,conversion,decoding",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miniaudio",
    "package_url": "https://pypi.org/project/miniaudio/",
    "platform": "",
    "project_url": "https://pypi.org/project/miniaudio/",
    "project_urls": {
      "Homepage": "https://github.com/irmen/synthesizer/tree/master/pyminiaudio"
    },
    "release_url": "https://pypi.org/project/miniaudio/1.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "python bindings for the miniaudio library and its decoders (mp3, flac, ogg vorbis, wav)",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17529903,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc0b2e04ad679128ada4c116201a87014483c1255a9b5f27b59dfcb9625a90ed",
        "md5": "76385856a0d82197d47a3f3e5590c93d",
        "sha256": "11f45c071bdb6117ba4e6532236ae9fddee4cd0e5d60bca4f396819eda32bd24"
      },
      "downloads": -1,
      "filename": "miniaudio-1.2.2-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "76385856a0d82197d47a3f3e5590c93d",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 194509,
      "upload_time": "2019-06-16T12:38:41",
      "upload_time_iso_8601": "2019-06-16T12:38:41.595489Z",
      "url": "https://files.pythonhosted.org/packages/fc/0b/2e04ad679128ada4c116201a87014483c1255a9b5f27b59dfcb9625a90ed/miniaudio-1.2.2-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "516af134bc282181bb3b6ba1387f304e313fc662b3a77714061666045b86bd2b",
        "md5": "3ca92f63be769b73341fd716d768832f",
        "sha256": "01dca54d43fd24ca16b3ba494b4cdaac999b887407ee4ba539e54685723b8367"
      },
      "downloads": -1,
      "filename": "miniaudio-1.2.2-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "3ca92f63be769b73341fd716d768832f",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 226419,
      "upload_time": "2019-06-16T12:38:43",
      "upload_time_iso_8601": "2019-06-16T12:38:43.527739Z",
      "url": "https://files.pythonhosted.org/packages/51/6a/f134bc282181bb3b6ba1387f304e313fc662b3a77714061666045b86bd2b/miniaudio-1.2.2-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca632bc537dac48cd307e8ffe138d29a94a0162fdf2f06fe2ebe9a9b30195faa",
        "md5": "a79b45b0153fe879843cfe2a7f0fe45e",
        "sha256": "a650483d7800be09498ed54947024214343dbcad7960302184afa61682830c18"
      },
      "downloads": -1,
      "filename": "miniaudio-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a79b45b0153fe879843cfe2a7f0fe45e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 422496,
      "upload_time": "2019-06-16T05:00:02",
      "upload_time_iso_8601": "2019-06-16T05:00:02.449893Z",
      "url": "https://files.pythonhosted.org/packages/ca/63/2bc537dac48cd307e8ffe138d29a94a0162fdf2f06fe2ebe9a9b30195faa/miniaudio-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}