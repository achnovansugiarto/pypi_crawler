{
  "info": {
    "author": "Mikhail Korobov",
    "author_email": "kmike84@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "==============\ndjango-webtest\n==============\n\n.. image:: https://img.shields.io/pypi/v/django-webtest.svg\n   :target: https://pypi.python.org/pypi/django-webtest\n   :alt: PyPI Version\n\n.. image:: https://img.shields.io/github/license/kmike/django-webtest.svg\n   :target: https://github.com/kmike/django-webtest/blob/master/LICENSE.txt\n   :alt: License\n\n.. image:: https://img.shields.io/travis/kmike/django-webtest/master.svg\n   :target: http://travis-ci.org/kmike/django-webtest\n   :alt: Build Status\n\ndjango-webtest is an app for instant integration of Ian Bicking's\nWebTest (http://webtest.pythonpaste.org/) with django's\ntesting framework.\n\nInstallation\n============\n\n::\n\n    $ pip install django-webtest\n\nUsage\n=====\n\n::\n\n    from django_webtest import WebTest\n\n    class MyTestCase(WebTest):\n\n        # optional: we want some initial data to be able to login\n        fixtures = ['users', 'blog_posts']\n\n        # optional: default extra_environ for this TestCase\n        extra_environ = {'HTTP_ACCEPT_LANGUAGE': 'ru'}\n\n        def testBlog(self):\n            # pretend to be logged in as user `kmike` and go to the index page\n            index = self.app.get('/', user='kmike')\n\n            # All the webtest API is available. For example, we click\n            # on a <a href='/tech-blog/'>Blog</a> link, check that it\n            # works (result page doesn't raise exceptions and returns 200 http\n            # code) and test if result page have 'My Article' text in\n            # its body.\n            assert 'My Article' in index.click('Blog')\n\ndjango-webtest provides a django.test.TestCase subclass\n(``django_webtest.WebTest``) that creates ``webtest.TestApp`` around\ndjango wsgi interface and makes it available in tests as ``self.app``.\n\nIt also features optional ``user`` argument for ``self.app.get`` and\n``self.app.post`` methods to help making authorized requests. This argument\nshould be a django.contrib.auth.models.User instance or a string with user's\n``username`` for the user who is supposed to be logged in.\n\nFor 500 errors original traceback is shown instead of usual html result\nfrom handler500.\n\nYou also get the ``response.templates`` and ``response.context`` goodness that\nis usually only available if you use django's native test client. These\nattributes contain a list of templates that were used to render the response\nand the context used to render these templates. All of django's native asserts (\n``assertFormError``,  ``assertTemplateUsed``, ``assertTemplateNotUsed``,\n``assertContains``, ``assertNotContains``, ``assertRedirects``) are\nalso supported for WebTest responses.\n\nThe session dictionary is available via ``self.app.session``, and has the\nsame content than django's native test client.\n\nUnlike django's native test client CSRF checks are not suppressed\nby default so missing CSRF tokens will cause test fails (and that's good).\n\nIf forms are submitted via WebTest forms API then all form fields (including\nCSRF token) are submitted automagically::\n\n    class AuthTest(WebTest):\n        fixtures = ['users.json']\n\n        def test_login(self)\n            form = self.app.get(reverse('auth_login')).form\n            form['username'] = 'foo'\n            form['password'] = 'bar'\n            response = form.submit().follow()\n            self.assertEqual(response.context['user'].username, 'foo')\n\nHowever if forms are submitted via raw POST requests using ``app.post`` then\ncsrf tokens become hard to construct. CSRF checks can be disabled by setting\n``csrf_checks`` attribute to False in this case::\n\n    class MyTestCase(WebTest):\n        csrf_checks = False\n        def test_post(self)\n            self.app.post('/')\n\nWhen a subclass of django's ``TransactionTestCase`` is desired,\nuse ``django_webtest.TransactionWebTest``.\n\nAll of these features can be easily set up manually (thanks to WebTest\narchitecture) and they are even not neccessary for using WebTest with django but\nit is nice to have some sort of integration instantly.\n\nSee http://webtest.pythonpaste.org/ for API help. Webtest can follow links,\nsubmit forms, parse html, xml and json responses with different\nparsing libraries, upload files and more.\n\nWhy?\n====\n\nWhile django.test.client.Client is fine for its purposes, it is not\nwell-suited for functional or integration testing. From django's test client\ndocstring:\n\n    This is not intended as a replacement for Twill/Selenium or\n    the like - it is here to allow testing against the\n    contexts and templates produced by a view, rather than the\n    HTML rendered to the end-user.\n\nWebTest plays on the same field as twill. WebTest has a nice API,\nis fast, small, talks to the django application via WSGI instead of HTTP\nand is an easy way to write functional/integration/acceptance tests.\ndjango-webtest is able to provide access to the names of rendered templates\nand template context just like native django TestClient.\n\nContributing\n============\n\nDevelopment happens at github: https://github.com/kmike/django-webtest\nIssue tracker: https://github.com/kmike/django-webtest/issues\n\nFeel free to submit ideas, bugs or pull requests.\n\nRunning tests\n-------------\n\nMake sure `tox`_ is installed and run\n\n::\n\n    $ tox\n\nfrom the source checkout.\n\n.. _tox: http://tox.testrun.org\n\n\n\n\nCHANGES\n=======\n\n1.7.8 (2015-04-21)\n------------------\n\n- setup.py is switched to setuptools; WebTest is now installed automatically\n  (thanks Eric Araujo);\n- importlib from stdlib is used when available, for django 1.9 compatibility\n  (thanks Helen Sherwood-Taylor);\n- django-webtest's own tests are fixed to work in django 1.6+;\n- https://bitbucket.org/kmike/django-webtest repository is no longer supported.\n\n1.7.7 (2014-03-25)\n------------------\n\n- Fix installation for Python 3.x on systems with C locales.\n\n1.7.6 (2014-01-20)\n------------------\n\n- DjangoTestApp methods pass all custom keyword arguments to webtest.TestApp;\n  this allows to use ``xhr=True`` feature (thanks Max Kharandziuk).\n- Travis CI testing fixes (thanks Darian Moody).\n\n1.7.5 (2013-07-17)\n------------------\n\n- OPTIONS method is fixed;\n- added workaround for DELETE method warnings\n  (see https://github.com/Pylons/webtest/issues/50).\n\n1.7.4 (2013-07-14)\n------------------\n\n- Really add ``TransactionWebTest`` base class (thanks Julien Aubert).\n\n1.7.3 (2013-07-07)\n------------------\n\n- Added support for PATCH and OPTIONS HTTP methods (thanks Will Bradley).\n\n1.7.2 (2013-06-27)\n------------------\n\n- ``TransactionWebTest`` base class is added (thanks Iurii Kriachko).\n\n1.7.1 (2013-06-11)\n------------------\n\n- Added support for non-ascii usernames.\n\n1.7 (2013-05-23)\n----------------\n\n- Added support for django 1.6 (thanks Carl Meyer).\n\n1.6.1 (2013-03-31)\n------------------\n\n- Added support for django 1.5+ custom user models (thanks Gautier Hayoun).\n\n1.6 (2013-03-07)\n----------------\n\n- Added ability to pass a custom response_class and app_class to WebTest\n  (thanks Bruno Renié);\n- Added case-insensitive header access in DjangoWebtestResponse (thanks\n  Bruno Renié).\n\n1.5.7 (2013-02-27)\n------------------\n\n- WebTest 2.0 support.\n\n1.5.6 (2013-01-21)\n------------------\n\n- django 1.5 support: transaction handling is fixed (thanks Marco Braak).\n\n1.5.5 (2013-01-14)\n------------------\n\n- Fixed django 1.5 support: DjangoWebtestResponse.streaming attribute\n  is added (thanks David Winterbottom).\n\n1.5.4 (2012-09-13)\n------------------\n\n- fix django 1.5 issues with AdminMediaHandler (thanks Tai Lee);\n- tox.ini is updated to use latest django versions and the\n  official trunk with python3 support;\n- django 1.5 SimpleCookie issues are fixed.\n\n1.5.3 (2012-04-25)\n------------------\n\n- self.assertRedirects is fixed for authenticated requests.\n\n1.5.2 (2012-04-01)\n------------------\n\n- if AuthenticationMiddleware is not in a middleware list,\n  WebtestUserMiddleware is put to the end of middlewares in order to\n  provide better backward compatibility with 1.4.x in case of custom\n  auth middlewares.\n\n1.5.1 (2012-03-22)\n------------------\n\n- Fixed handling of forms with method=\"get\". Thanks Jeroen Vloothuis.\n\n1.5 (2012-02-24)\n----------------\n\n- WebtestUserMiddleware is inserted after AuthenticationMiddleware, not to\n  the end of middleware list (thanks bigkevmcd);\n- don't list python 2.5 as supported because WebOb dropped 2.5 support;\n- python 3 support;\n- test running using tox.\n\n1.4.4 (2012-02-08)\n------------------\n\n- 'user' parameter for ``self.app.put`` and ``self.app.delete`` methods (thanks\n  Ruslan Popov).\n\n1.4.3 (2011-09-27)\n------------------\n\n- The django session dictionary is available via ``self.app.session``.\n\n1.4.2 (2011-08-26)\n------------------\n\n- ``REMOTE_ADDR`` is now ``'127.0.0.1'`` by default. This is how\n  standard django's test client behave.\n\n  Please note that this can slow tests down and cause other side effects\n  if django-debug-toolbar 0.9.x is installed+configured and\n  ``INTERNAL_IPS`` contain ``'127.0.0.1'`` because debug toolbar will\n  become turned on during tests. The workaround is to remove\n  django-debug-toolbar middleware during tests in your test settings::\n\n      DEBUG_MIDDLEWARE = 'debug_toolbar.middleware.DebugToolbarMiddleware'\n      if DEBUG_MIDDLEWARE in MIDDLEWARE_CLASSES:\n          MIDDLEWARE_CLASSES.remove(DEBUG_MIDDLEWARE)\n\n\n1.4.1 (2011-06-29)\n------------------\n\n- ``self.renew_app()`` method for resetting the 'browser' inside tests.\n\n1.4 (2011-06-23)\n----------------\n\n- Better auth implementation;\n- support for assertRedirects, assertContains and assertNotContains.\n\n1.3 (2010-12-31)\n----------------\n\n- Django 1.3 compatibility: test responses are now having 'templates' attribute;\n- Django 1.3 compatibility: the way exceptions are handled is changed;\n- auto_follow parameter for app.get method (redirect chains will be\n  auto-followed with auto_follow=True).\n\n1.2.1 (2010-08-24)\n------------------\n\n- REMOTE_USER authorization can be disabled.\n\n1.2 (2010-08-21)\n----------------\n\n- ``response.template`` and ``response.context`` goodness (thanks Gregor Müllegger);\n- tests (thanks Gregor Müllegger);\n- csrf checks are now optional (thanks Gregor Müllegger).\n\n1.1.1 (2010-07-16)\n------------------\n\n- User instance can be passed to `get` and `post` methods instead\n  of user's username.\n\n1.1 (2010-06-15)\n----------------\n\n- Original traceback instead of html 500 error page;\n- per-TestCase extra_environ (thanks Gael Pasgrimaud);\n- fixed a bug with app.post parameters (thanks anonymous).\n\n\n1.0 (2010-04-20)\n----------------\nInitial release (thanks Ian Bicking for WebTest).",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kmike/django-webtest/",
    "keywords": null,
    "license": "MIT license",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-webtest",
    "package_url": "https://pypi.org/project/django-webtest/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-webtest/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/kmike/django-webtest/"
    },
    "release_url": "https://pypi.org/project/django-webtest/1.7.8/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Instant integration of Ian Bicking's WebTest\n(http://webtest.pythonpaste.org/) with django's testing framework.",
    "version": "1.7.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13057780,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b40abc58ea404d3e5cfc221645bf67d1af99e8f8c0786d92b4d211db8d57d80",
        "md5": "15182fc7612c6311e937744c5bece47f",
        "sha256": "712cf421ae629ffd0c4849530a5b940a42b7f9332e2d7c93d975adc02fc4985e"
      },
      "downloads": -1,
      "filename": "django_webtest-1.7.8-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "15182fc7612c6311e937744c5bece47f",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 16023,
      "upload_time": "2015-04-21T08:22:22",
      "upload_time_iso_8601": "2015-04-21T08:22:22.289159Z",
      "url": "https://files.pythonhosted.org/packages/5b/40/abc58ea404d3e5cfc221645bf67d1af99e8f8c0786d92b4d211db8d57d80/django_webtest-1.7.8-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1333007921cb26ebed7fc11f14c620c1e5144f8be28243c655e7873839d28689",
        "md5": "9eeb4896106736ec1b735e7073465a1a",
        "sha256": "11c5bb9896502d6b9e2f840abb912efd7bde5084e097ec533af3ea64686ed5c2"
      },
      "downloads": -1,
      "filename": "django-webtest-1.7.8.tar.gz",
      "has_sig": false,
      "md5_digest": "9eeb4896106736ec1b735e7073465a1a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12663,
      "upload_time": "2015-04-21T08:22:09",
      "upload_time_iso_8601": "2015-04-21T08:22:09.936442Z",
      "url": "https://files.pythonhosted.org/packages/13/33/007921cb26ebed7fc11f14c620c1e5144f8be28243c655e7873839d28689/django-webtest-1.7.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}