{
  "info": {
    "author": "Mikhail Korobov",
    "author_email": "kmike84@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "==============\ndjango-webtest\n==============\n\ndjango-webtest is an almost trivial app for instant integration of\nIan Bicking's WebTest (http://pythonpaste.org/webtest/) with django's\ntesting framework.\n\n\nInstallation\n============\n\n::\n\n    $ pip install webtest\n    $ pip install django-webtest\n\nor ::\n\n    $ easy_install webtest\n    $ easy_install django-webtest\n\nor grab latest versions from bitbucket\n(http://bitbucket.org/ianb/webtest, http://bitbucket.org/kmike/django-webtest)\n\nUsage\n=====\n\ndjango-webtest provides django.test.TestCase subclass (``WebTest``) that creates\n``webtest.TestApp`` around django wsgi interface and make it available in\ntests as ``self.app``.\n\nIt also features optional ``user`` argument for ``self.app.get`` and\n``self.app.post`` methods to help making authorized requests. This argument\nshould be django.contrib.auth.models.User's ``username`` for user who is\nsupposed to be logged in.\n\nAll of these features can be easily set up manually (thanks to WebTest\narchitecture) and they are even not neccessary for using WebTest with django but\nit is nice to have some sort of integration instantly.\n\n::\n\n    from django_webtest import WebTest\n\n    class MyTestCase(WebTest):\n\n        # we want some initial data to be able to login\n        fixtures = ['users', 'blog_posts']\n\n        def testBlog(self):\n            # pretend to be logged in as user `kmike` and go to the index page\n            index = self.app.get('/', user='kmike')\n\n            # All the webtest API is available. For example, we click\n            # on a <a href='/tech-blog/'>Blog</a> link, check that it\n            # works (result page doesn't raise exceptions and returns 200 http\n            # code) and test if result page have 'My Article' text in\n            # it's body.\n            assert 'My Article' in index.click('Blog')\n\nSee http://pythonpaste.org/webtest/ for API help. It can follow links, submit\nforms, parse html, xml and json responses with different parsing libraries,\nupload files and more.\n\nWhy?\n====\n\nWhile django.test.client.Client is fine for it's purposes, it is not\nwell-suited for functional or integration testing. From django's test client\ndocstring:\n\n    This is not intended as a replacement for Twill/Selenium or\n    the like - it is here to allow testing against the\n    contexts and templates produced by a view, rather than the\n    HTML rendered to the end-user.\n\nWebTest plays on the same field as twill. WebTest has nice API, is fast, small,\ntalk to django application via WSGI instead of HTTP and is an easy way to\nwrite functional/integration/acceptance tests.\n\nTwill is also a great tool and it also can be easily integrated with django\n(see django-test-utils package) and I also enjoy it much. But I prefer WebTest\nover twill because twill is old (last release is in 2007), communicate via HTTP\ninstead of WSGI (though there is workaround for that), lacks support for\nnon-latin text (not to mention unicode) and have a much larger codebase to\nhack on. Twill however understands HTML better and is more mature so\nconsider it (and django-test-utils package) if WebTest doesn't fit for some\nreason.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://bitbucket.org/kmike/django-webtest/get/tip.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/kmike/django-webtest/",
    "keywords": null,
    "license": "MIT license",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-webtest",
    "package_url": "https://pypi.org/project/django-webtest/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-webtest/",
    "project_urls": {
      "Download": "http://bitbucket.org/kmike/django-webtest/get/tip.zip",
      "Homepage": "http://bitbucket.org/kmike/django-webtest/"
    },
    "release_url": "https://pypi.org/project/django-webtest/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Instant integration of Ian Bicking's WebTest\n(http://pythonpaste.org/webtest/) with django's testing framework.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13057780,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2927857e11d765ea7e1ca781feb59f46f3e2b569a5121aadb773bb4a44f8dea5",
        "md5": "92141266d7fb329412c4b41574a3cdc1",
        "sha256": "b92323097df255250349d009ab583c4fbd4611c43e826a588db66e6a0160a422"
      },
      "downloads": -1,
      "filename": "django-webtest-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "92141266d7fb329412c4b41574a3cdc1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4301,
      "upload_time": "2010-04-20T00:42:40",
      "upload_time_iso_8601": "2010-04-20T00:42:40.999625Z",
      "url": "https://files.pythonhosted.org/packages/29/27/857e11d765ea7e1ca781feb59f46f3e2b569a5121aadb773bb4a44f8dea5/django-webtest-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}