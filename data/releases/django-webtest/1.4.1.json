{
  "info": {
    "author": "Mikhail Korobov",
    "author_email": "kmike84@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "==============\ndjango-webtest\n==============\n\ndjango-webtest is an app for instant integration of Ian Bicking's\nWebTest (http://pythonpaste.org/webtest/) with django's\ntesting framework.\n\nUsage\n=====\n\n::\n\n    from django_webtest import WebTest\n\n    class MyTestCase(WebTest):\n\n        # optional: we want some initial data to be able to login\n        fixtures = ['users', 'blog_posts']\n\n        # optional: default extra_environ for this TestCase\n        extra_environ = {'HTTP_ACCEPT_LANGUAGE': 'ru'}\n\n        def testBlog(self):\n            # pretend to be logged in as user `kmike` and go to the index page\n            index = self.app.get('/', user='kmike')\n\n            # All the webtest API is available. For example, we click\n            # on a <a href='/tech-blog/'>Blog</a> link, check that it\n            # works (result page doesn't raise exceptions and returns 200 http\n            # code) and test if result page have 'My Article' text in\n            # it's body.\n            assert 'My Article' in index.click('Blog')\n\ndjango-webtest provides django.test.TestCase subclass (``WebTest``) that creates\n``webtest.TestApp`` around django wsgi interface and make it available in\ntests as ``self.app``.\n\nIt also features optional ``user`` argument for ``self.app.get`` and\n``self.app.post`` methods to help making authorized requests. This argument\nshould be django.contrib.auth.models.User instance or a string with user's\n``username`` for user who is supposed to be logged in.\n\nFor 500 errors original traceback is shown instead of usual html result\nfrom handler500.\n\nYou also get the ``response.templates`` and ``response.context`` goodness that\nis usually only available if you use django's native test client. These\nattributes contain a list of templates that were used to render the response\nand the context used to render these templates. This also means that django's\nnative ``self.assertFormError``,  ``self.assertTemplateUsed`` and\n``self.assertTemplateNotUsed`` API is also supported for WebTest responses.\n\nUnlike django's native test client CSRF checks are not suppressed\nby default so missing CSRF tokens will cause test fails (and that's good).\n\nIf forms are submitted via WebTest forms API then all form fields (including\nCSRF token) are submitted automagically::\n\n    class AuthTest(WebTest):\n        fixtures = ['users.json']\n\n        def test_login(self)\n            form = self.app.get(reverse('auth_login')).form\n            form['username'] = 'foo'\n            form['password'] = 'bar'\n            response = form.submit().follow()\n            self.assertEqual(response.context['user'].username, 'foo')\n\nHowever if forms are submitted via raw POST requests using ``app.post`` then\ncsrf tokens become hard to construct. CSRF checks can be disabled by setting\n``csrf_checks`` attribute to False in this case::\n\n    class MyTestCase(WebTest):\n        csrf_checks = False\n        def test_post(self)\n            self.app.post('/')\n\nAll of these features can be easily set up manually (thanks to WebTest\narchitecture) and they are even not neccessary for using WebTest with django but\nit is nice to have some sort of integration instantly.\n\nSee http://pythonpaste.org/webtest/ for API help. It can follow links, submit\nforms, parse html, xml and json responses with different parsing libraries,\nupload files and more.\n\n\nInstallation\n============\n\n::\n\n    $ pip install webtest\n    $ pip install django-webtest\n\nor ::\n\n    $ easy_install webtest\n    $ easy_install django-webtest\n\nor grab latest versions from bitbucket\n(http://bitbucket.org/ianb/webtest, http://bitbucket.org/kmike/django-webtest)\n\n\nWhy?\n====\n\nWhile django.test.client.Client is fine for it's purposes, it is not\nwell-suited for functional or integration testing. From django's test client\ndocstring:\n\n    This is not intended as a replacement for Twill/Selenium or\n    the like - it is here to allow testing against the\n    contexts and templates produced by a view, rather than the\n    HTML rendered to the end-user.\n\nWebTest plays on the same field as twill. WebTest has nice API, is fast, small,\ntalk to django application via WSGI instead of HTTP and is an easy way to\nwrite functional/integration/acceptance tests.\n\nTwill is also a great tool and it also can be easily integrated with django\n(see django-test-utils package) and I also enjoy it much. But I prefer WebTest\nover twill because twill is old (last release is in 2007), communicate via HTTP\ninstead of WSGI (though there is workaround for that), lacks support for\nunicode and have a much larger codebase to hack on. django-webtest also\nis able to provide access to the names of rendered templates and\ntemplate context just like native django TestClient. Twill however understands\nHTML better and is more mature so consider it if WebTest doesn't fit for\nsome reason.\n\nCHANGES\n=======\n\n1.4.1 (2011-06-29)\n------------------\n\n- ``self.renew_app()`` method for resetting the 'browser' inside tests.\n\n1.4 (2011-06-23)\n----------------\n\n- Better auth implementation;\n- support for assertRedirects, assertContains and assertNotContains.\n\n1.3 (2010-12-31)\n----------------\n\n- Django 1.3 compatibility: test responses are now having 'templates' attribute;\n- Django 1.3 compatibility: the way exceptions are handled is changed;\n- auto_follow parameter for app.get method (redirect chains will be\n  auto-followed with auto_follow=True).\n\n1.2.1 (2010-08-24)\n------------------\n\n- REMOTE_USER authorization can be disabled.\n\n1.2 (2010-08-21)\n----------------\n\n- ``response.template`` and ``response.context`` goodness (thanks Gregor Müllegger);\n- tests (thanks Gregor Müllegger);\n- csrf checks are now optional (thanks Gregor Müllegger).\n\n1.1.1 (2010-07-16)\n------------------\n\n- User instance can be passed to `get` and `post` methods instead\n  of user's username.\n\n1.1 (2010-06-15)\n----------------\n\n- Original traceback instead of html 500 error page;\n- per-TestCase extra_environ (thanks Gael Pasgrimaud);\n- fixed a bug with app.post parameters (thanks anonymous).\n\n\n1.0 (2010-04-20)\n----------------\nInitial release (thanks Ian Bicking for WebTest).",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://bitbucket.org/kmike/django-webtest/get/tip.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/kmike/django-webtest/",
    "keywords": null,
    "license": "MIT license",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-webtest",
    "package_url": "https://pypi.org/project/django-webtest/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-webtest/",
    "project_urls": {
      "Download": "http://bitbucket.org/kmike/django-webtest/get/tip.zip",
      "Homepage": "http://bitbucket.org/kmike/django-webtest/"
    },
    "release_url": "https://pypi.org/project/django-webtest/1.4.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Instant integration of Ian Bicking's WebTest\n(http://pythonpaste.org/webtest/) with django's testing framework.",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13057780,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a64f7707f3bddd50d802f7890fcc3dd797b7827bf5b6c9170c8ad8ab434894fb",
        "md5": "cc752cf9e6503c71c58b784007219bdb",
        "sha256": "306ec77183289d7536f7651f985eaa786fce5be3a9cb26c05c44053272e17f0b"
      },
      "downloads": -1,
      "filename": "django-webtest-1.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cc752cf9e6503c71c58b784007219bdb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7842,
      "upload_time": "2011-06-28T22:10:15",
      "upload_time_iso_8601": "2011-06-28T22:10:15.368643Z",
      "url": "https://files.pythonhosted.org/packages/a6/4f/7707f3bddd50d802f7890fcc3dd797b7827bf5b6c9170c8ad8ab434894fb/django-webtest-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}