{
  "info": {
    "author": "Ilia",
    "author_email": "istudyatuni@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Dual-audio video maker\n\nYou can pass 2 playlists (or 2 lists with playlists), first for extracting audio (`audio-playlists`), second for resulting video (`video-playlists`), and get video with both audio tracks. For first playlists better use low-quality video.\n\n## Dependencies\n\n`ffmpeg` (work with media), `wget` (download) and `grep` utilities.\n\n## CLI arguments\n\n| Argument                | Action                                                      |\n|:------------------------|:------------------------------------------------------------|\n| `-d, --out-dir`         | Directory where place audio and video folders               |\n| `-a, --audio-playlists` | Path(s) to playlist(s) with videos from which extract audio |\n| `-v, --video-playlists` | Path(s) to playlist(s) with videos to add a second audio    |\n| `--args`                | Pass shell arguments via file                               |\n| `--preserve-video`      | Preserving original videos from `video-playlists`           |\n| `-h, --help`            | Show help message and exit                                  |\n\n## How it works\n\n1. Parse templates and playlists.\n2. Download `audio-playlists`. For each playlist:\n\t- Download videos to `video-cache`.\n\t- Extract audio to `audio` folder and select extension (container) based on `ffprobe` (from `ffmpeg`) output:\n\n```\nStream #0:0: Audio: aac (LC), 48000 Hz, stereo, fltp, 94 kb/s\n```\n\n3. For each playlist from `video-playlists` download videos to `video`.\n4. Correlate audio and video file names (for example, `1x1.aac` will be added to `1x1.mp4`).\n5. Join audios and videos and save to `video-result` folder.\n6. If `--preserve-video` is not passed, move resulting videos to `video` folder.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/istudyatuni/dual-audio",
    "keywords": "video movie audio dual-audio",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dual-audio",
    "package_url": "https://pypi.org/project/dual-audio/",
    "platform": "",
    "project_url": "https://pypi.org/project/dual-audio/",
    "project_urls": {
      "Homepage": "https://github.com/istudyatuni/dual-audio"
    },
    "release_url": "https://pypi.org/project/dual-audio/1.0/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Make videos with double audio",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12017799,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a011688c7d03de4758bd1c582879235ed54ba46609ff81d928d0a4b56240bc1",
        "md5": "112caa337ceb5aa79fd846a0aab97718",
        "sha256": "3e875d9a1aee432c62b9753c75e1dd5ae8f04d5d344914dd87d077fd69b2c7da"
      },
      "downloads": -1,
      "filename": "dual_audio-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "112caa337ceb5aa79fd846a0aab97718",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 7385,
      "upload_time": "2021-08-18T09:16:11",
      "upload_time_iso_8601": "2021-08-18T09:16:11.209802Z",
      "url": "https://files.pythonhosted.org/packages/9a/01/1688c7d03de4758bd1c582879235ed54ba46609ff81d928d0a4b56240bc1/dual_audio-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}