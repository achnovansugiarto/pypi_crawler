{
  "info": {
    "author": "Alex MÃ¼ller, Gisela Gabernet",
    "author_email": "alexarnimueller@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "README\n======\n\n.. image:: https://img.shields.io/pypi/v/modlamp.svg\n   :target: https://pypi.org/project/modlamp/\n\n.. image:: https://travis-ci.org/alexarnimueller/modlAMP.svg?branch=master\n    :target: https://travis-ci.org/alexarnimueller/modlAMP\n\n.. image:: https://codecov.io/gh/alexarnimueller/modlAMP/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/alexarnimueller/modlAMP\n\n.. image:: https://img.shields.io/badge/License-BSD--3-lightgrey.svg\n    :target: https://github.com/alexarnimueller/modlAMP/blob/master/LICENSE.rst\n\n.. image:: https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtx285-ff69b4.svg\n    :target: https://doi.org/10.1093/bioinformatics/btx285\n\n\n**modlAMP**\n\nThis is a Python package that is designed for working with **peptides**, **proteins** or any **amino acid sequence** of natural\namino acids. It incorporates several modules, like descriptor calculation (module ``descriptors``) or sequence\ngeneration (module ``sequences``). For basic instructions how to use the package, see Usage_ section of this README\nor the `documentation <http://modlamp.org>`_.\n\n.. note::\n    You are advised to install `Anaconda <https://www.continuum.io/downloads>`_ Python package manager with Python 3.7\n    before installing **modlAMP**. It will make handling of necessary package requirements and versions much easier.\n\n\nInstallation\n************\n\n*Quick note*: modlAMP supports Python 3 since version 4. Use with Python 2.7 is deprecated.\n\nFor the installation to work properly, ``pip`` needs to be installed. If you're not sure whether you already have pip,\ntype ``pip --version`` in your terminal. If you don't have pip installed, install it via ``sudo easy_install pip``.\n\nThere is no need to download the package manually to install modlAMP. In your terminal, just type the following command::\n\n    pip install modlamp\n\nUsage\n*****\n\nThis section gives a quick overview of different capabilities of modlAMP. For a detailed description of all modules see\nthe `module documentation <http://modlamp.org>`_.\n\nImporting modules\n-----------------\n\nAfter installation, you should be able to import and use the different modules like shown below. Type python or\nipython in your terminal to begin, then the following import statements:\n\n>>> from modlamp.sequences import Helices\n>>> from modlamp.descriptors import PeptideDescriptor\n>>> from modlamp.database import query_database\n\n\nGenerating Sequences\n--------------------\n\nThe following example shows how to generate a library of 1000 sequences out of all available sequence generation methods:\n\n>>> from modlamp.sequences import MixedLibrary\n>>> lib = MixedLibrary(1000)\n>>> lib.generate_sequences()\n>>> lib.sequences[:10]\n['VIVRVLKIAA','VGAKALRGIGPVVK','QTGKAKIKLVKLRAGPYANGKLF','RLIKGALKLVRIVGPGLRVIVRGAR','DGQTNRFCGI','ILRVGKLAAKV',...]\n\nThese commands generated a mixed peptide library comprising of 1000 sequences.\n\n.. note::\n    If duplicates are present in the attribute ``sequences``, these are removed during generation. Therefore it\n    is possible that less than the specified sequences are obtained.\n\nThe module ``sequences`` incorporates different sequence generation classes (random, helices etc.). For\ndocumentation thereof, consider the docs for the module ``modlamp.sequences``.\n\n\nCalculating Descriptor Values\n-----------------------------\n\nNow, different descriptor values can be calculated for the generated sequences: (see `Generating Sequences`_)\n\nHow to calculate the Eisenberg hydrophobic moment for given sequences:\n\n>>> from modlamp.descriptors import PeptideDescriptor, GlobalDescriptor\n>>> desc = PeptideDescriptor(lib.sequences,'eisenberg')\n>>> desc.calculate_moment()\n>>> desc.descriptor[:10]\narray([[ 0.60138255],[ 0.61232763],[ 0.01474009],[ 0.72333858],[ 0.20390763],[ 0.68818279],...]\n\nGlobal descriptor features like charge, hydrophobicity or isoelectric point can be calculated as well:\n\n>>> glob = GlobalDescriptor(lib.sequences)\n>>> glob.isoelectric_point()\n>>> glob.descriptor[:10]\narray([ 10.09735107,   8.75006104,  12.30743408,  11.26385498, ...]\n\nAuto- and cross-correlation type functions with different window sizes can be applied on all available amino acid\nscales. Here an example for the pepCATS scale:\n\n>>> pepCATS = PeptideDescriptor('sequence/file/to/be/loaded.fasta', 'pepcats')\n>>> pepCATS.calculate_crosscorr(7)\n>>> pepCATS.descriptor\narray([[ 0.6875    ,  0.46666667,  0.42857143,  0.61538462,  0.58333333,\n\nMany more **amino acid scales** are available for descriptor calculation. The complete list can be found in the\ndocumentation for the ``modlamp.descriptors`` module.\n\n\nPlotting Features\n-----------------\n\nWe can also plot the calculated values as a boxplot, for example the hydrophobic moment:\n\n>>> from modlamp.plot import plot_feature\n>>> D = PeptideDescriptor('sequence/file/to/be/loaded.fasta', 'eisenberg')  # Eisenberg hyrophobicity scale\n>>> D.calculate_moment()\n>>> plot_feature(D.descriptor,y_label='uH Eisenberg')\n\n.. image:: http://modlamp.org/_static/uH_Eisenberg.png\n    :height: 300px\n\nWe can additionally compare these descriptor values to known AMP sequences. For that, we import sequences from the\nAPD3, which are stored in the FASTA formatted file ``APD3.fasta``:\n\n>>> APD = PeptideDescriptor('/Path/to/file/APD3.fasta', 'eisenberg')\n>>> APD.calculate_moment()\n\nNow lets compare the values by plotting:\n\n>>> plot_feature([D.descriptor, APD.descriptor], y_label='uH Eisenberg', x_tick_labels=['Library', 'APD3'])\n\n.. image:: http://modlamp.org/_static/uH_APD3.png\n    :height: 300px\n\nIt is also possible to plot 2 or 3 different features in a scatter plot:\n\n:Example: **2D Scatter Plot**\n\n>>> from modlamp.plot import plot_2_features\n>>> A = PeptideDescriptor('/Path/to/file/class1&2.fasta', 'eisenberg')\n>>> A.calculate_moment()\n>>> B = GlobalDescriptor('/Path/to/file/class1&2.fasta')\n>>> B.isoelectric_point()\n>>> target = [1] * (len(A.sequences) / 2) + [0] * (len(A.sequences) / 2)\n>>> plot_2_features(A.descriptor, B.descriptor, x_label='uH', y_label='pI', targets=target)\n\n.. image:: http://modlamp.org/_static/2D_scatter.png\n    :height: 300px\n\n:Example: **3D Scatter Plot**\n\n>>> from modlamp.plot import plot_3_features\n>>> B = GlobalDescriptor(APD.sequences)\n>>> B.isoelectric_point()\n>>> B.length(append=True)  # append descriptor values to afore calculated\n>>> plot_3_features(APD.descriptor, B.descriptor[:, 0], B.descriptor[:, 1], x_label='uH', y_label='pI', z_label='len')\n\n.. image:: http://modlamp.org/_static/3D_scatter.png\n    :height: 300px\n\nFurther plotting methods like **helical wheel plots** are available. See the documentation for the ``modlamp.plot``\nmodule.\n\n\nDatabase Connection\n-------------------\n\nPeptides from the two most prominent AMP databases `APD <http://aps.unmc.edu/AP/>`_ and `CAMP <http://camp.bicnirrh\n.res.in/>`_ can be directly scraped with the ``modlamp.database`` module.\n\nFor downloading a set of sequences from the **APD** database, first get the IDs of the sequences you want to query\nfrom the APD website. Then proceed as follows:\n\n>>> query_apd([15, 16, 17, 18, 19, 20])  # download sequences with APD IDs 15 to 20\n['GLFDIVKKVVGALGSL','GLFDIVKKVVGAIGSL','GLFDIVKKVVGTLAGL','GLFDIVKKVVGAFGSL','GLFDIAKKVIGVIGSL','GLFDIVKKIAGHIAGSI']\n\nThe same holds true for the **CAMP** database:\n\n>>> query_camp([2705, 2706])  # download sequences with CAMP IDs 2705 & 2706\n['GLFDIVKKVVGALGSL','GLFDIVKKVVGTLAGL']\n\n**modlAMP** also hosts a module for connecting to your own database on a private server.\nPeptide sequences included in any table in the database can be downloaded.\n\n.. note::\n    The ``modlamp.database.query_database`` function allows connection and queries to a personal database. For\n    successful connection, the database configuration needs to be specified in the ``db_config.json`` file, which is\n    located in ``modlamp/data/`` by default.\n\nSequences (stored in a column named ``sequence``) from the personal database can then be queried as follows:\n\n>>> from modlamp.database import query_database\n>>> query_database('my_experiments', ['sequence'], configfile='./modlamp/data/db_config.json')\nPassword: >? ***********\nConnecting to MySQL database...\nconnection established!\n['ILDSSWQRTFLLS','IKLLHIF','ACFDDGLFRIIKFLLASDRFFT', ...]\n\n\nLoading Prepared Datasets\n-------------------------\n\nFor AMP QSAR models, different options exist of choosing negative / inactive peptide examples. We assembled several\ndatasets for classification tasks, that can be read by the ``modlamp.datasets`` module. The available datasets can\nbe found in the documentation of the ``modlamp.datasets`` module.\n\n:Example: **AMPs vs. transmembrane regions of proteins**\n\n>>> from modlamp.datasets import load_AMPvsTM\n>>> data = load_AMPvsTM()\n>>> data.keys()\n['target_names', 'target', 'feature_names', 'sequences']\n\nThe variable ``data`` holds **four different keys, which can also be called as its attributes**. The available\nattributes for ``load_helicalAMPset()`` are ``target_names`` (target names), ``target`` (the\ntarget class vector), ``feature_names`` (the name of the data features, here: 'Sequence') and\n``sequences`` (the loaded sequences).\n\n:Example:\n\n>>> data.target_names  # class names\narray(['TM', 'AMP'], dtype='|S3')\n>>> data.sequences[:5]  # sequences\n[array(['AAGAATVLLVIVLLAGSYLAVLA', 'LWIVIACLACVGSAAALTLRA', 'FYRFYMLREGTAVPAVWFSIELIFGLFA', 'GTLELGVDYGRAN',\n       'KLFWRAVVAEFLATTLFVFISIGSALGFK'],  dtype='|S100')\n>>> data.target  # corresponding target classes\narray([0, 0, 0, 0, 0 .... 1, 1, 1, 1])\n\n\nAnalysing Wetlab Circular Dichroism Data\n----------------------------------------\n\nThe modlule ``modlamp.wetlab`` includes the class ``modlamp.wetlab.CD`` to analyse raw circular dichroism\ndata from wetlab experiments. The following example shows how to load a raw datafile and calculate secondary\nstructure contents:\n\n>>> cd = CD('/path/to/your/folder', 185, 260)  # load all files in a specified folder\n>>> cd.names  # peptide names read from the file headers\n['Pep 10', 'Pep 10', 'Pep 11', 'Pep 11', ... ]\n>>> cd.calc_meanres_ellipticity()  # calculate the mean residue ellipticity values\n>>> cd.meanres_ellipticity\narray([[   260.        ,   -266.95804196],\n       [   259.        ,   -338.13286713],\n       [   258.        ,   -387.25174825], ...])\n>>> cd.helicity(temperature=24., k=3.492185008, induction=True)  # calculate helical content\n>>> cd.helicity_values\n            Name     Solvent  Helicity  Induction\n            Peptide1     T    100.0     3.823\n            Peptide1     W    26.16     0.000\n            Peptide2     T    76.38     3.048\n            Peptide2     W    25.06     0.000 ...\n\nThe read and calculated values can finally be plotted as follows:\n\n>>> cd.plot(data='mean residue ellipticity', combine=True)\n\n.. image:: http://modlamp.org/_static/cd1.png\n    :height: 300px\n.. image:: http://modlamp.org/_static/cd2.png\n    :height: 300px\n.. image:: http://modlamp.org/_static/cd3.png\n    :height: 300px\n\n\nAnalysis of Different Sequence Libraries\n----------------------------------------\n\nThe modlule ``modlamp.analysis`` includes the class ``modlamp.analysis.GlobalAnalysis`` to compare\ndifferent sequence libraries. Learn how to use it with the following example:\n\n>>> lib  # sequence library with 3 sub-libraries\narray([['ARVFVRAVRIYIRVLKAFAKL', 'IRVYVRIVRGFGRVVRAYARV', 'IRIFIRIARGFGRAIRVFVRI', ..., 'RGPCFLQVVD'],\n       ['EYKIGGKA', 'RAVKGGGRLLAG', 'KLLRIILRGARIIIRGLR', ..., 'AKCLVDKK', 'VGGAFALVSV'],\n       ['GVHLKFKPAVSRKGVKGIT', 'RILRIGARVGKVLIK', 'MKGIIGHTWKLKPTIPSGKSAKC', ..., 'GRIIRLAIKAGL']], dtype='|S28')\n>>> lib.shape\n(3, 2000)\n>>> from modlamp.analysis import GlobalAnalysis\n>>> analysis = GlobalAnalysis(lib, names=['Lib 1', 'Lib 2', 'Lib 3'])\n>>> analysis.plot_summary()\n\n.. image:: http://modlamp.org/_static/summary.png\n    :height: 600px\n\n\nDocumentation\n-------------\n\nA detailed documentation of all modules is available from the `modlAMP documentation website <http://modlamp.org>`_.\n\n\nCiting modlAMP\n--------------\n\nIf you are using **modlAMP** for a scientific publication, please cite the following paper:\n\nMÃ¼ller A. T. *et al.* (2017) modlAMP: Python for anitmicrobial peptides, *Bioinformatics* **33**, (17), 2753-2755,\nDOI:`10.1093/bioinformatics/btx285 <https://doi.org/10.1093/bioinformatics/btx285>`_.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://modlamp.org",
    "keywords": "antimicrobial anticancer peptide descriptor sequences QSAR machine learning design",
    "license": "BSD-3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modlamp",
    "package_url": "https://pypi.org/project/modlamp/",
    "platform": "",
    "project_url": "https://pypi.org/project/modlamp/",
    "project_urls": {
      "Homepage": "http://modlamp.org"
    },
    "release_url": "https://pypi.org/project/modlamp/4.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "python package for in silico peptide design and QSAR studies",
    "version": "4.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9524484,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ecd005cf86916f4e5df7896ac8435d1d953d1fe5bb5bb242cf9983e4f928c86",
        "md5": "4f6601adba8b7a6aa333ee460423f553",
        "sha256": "adbe57e9967293e2ce399e4d582aba1cbad583553886cc6c8f7f7a5cc50e7078"
      },
      "downloads": -1,
      "filename": "modlamp-4.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "4f6601adba8b7a6aa333ee460423f553",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8038020,
      "upload_time": "2019-06-03T15:21:04",
      "upload_time_iso_8601": "2019-06-03T15:21:04.266788Z",
      "url": "https://files.pythonhosted.org/packages/2e/cd/005cf86916f4e5df7896ac8435d1d953d1fe5bb5bb242cf9983e4f928c86/modlamp-4.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}