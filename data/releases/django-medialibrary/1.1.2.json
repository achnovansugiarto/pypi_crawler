{
  "info": {
    "author": "Viktor Nagy",
    "author_email": "v@pulilab.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "medialibrary\n========================\n\nWelcome to the documentation for django-medialibrary!\n\n\n`django-medialibrary` is a pluggable django app that is able to store different media types (audio, video, image) and several versions of a given file in a transparent way.\n\nThe basic problam to solve is to store, retrieve and manage several versions of the same file in a seemless way. E.g. a user uploads a video that you will have to transcode into different formats. For the user you would like to show only a single media in his list of uploaded files, but you still want to serve all the generated files when necessary, moreover, if the user decides to delete his media you would like to delete all its versions.\n\nThe idea for this app is to have all this in an app-indepedent and easy to use and extend way.\n\nFrontend API\n-------------\n\nThere is no html frontend on purpose as we are using this app through APIs. The provided APIs out of the box are\n\n* ``/audio/``, ``/video/``, ``/image/`` - to upload and list media elements of a given type\n* ``/<pk>/`` - to get detailed info about a single media element\n* ``/<pk>/add/`` - adds a relationship to the media element, expects a json of the form::\n\n\t{\n\t\t'model': 'app_name.model_name',\n\t\t'object_id': 1\n\t}\n\nwhere ``app_name.model_name`` is the `natural key <https://docs.djangoproject.com/en/1.5/topics/serialization/#topics-serialization-natural-keys>`_ of the model you are attaching.\n\nCustomizations\n---------------\n\nBesides the general django settings for file storage, there is a custom setting, the upload_to method used in the FileFields.::\n\n\timport datetime\n\tdef setup_s3_route(instance, filename=None):\n\t    today = datetime.datetime.today()\n\t    return 'media/%s-%02d-%02d/%s' % (today.year, today.month, today.day,\n\t                                          filename)\n\tfrom medialibrary import utils \n\tutils.setup_upload_route = setup_s3_route\n\nYou can set a custom argument for the ``limit_choices_to`` attribute on the ShelfRelation model. This way you can define which apps are allowed to have relationships to you media elements. (e.g. if you remove the attached records when you remove the media, you probably don't want to attach django permission records to media). The default is **no restricions**!::\n\n\tfrom medialibrary import utils\n\tfrom django.db import models\n\tutils.content_type_restriction = models.Q(app_label='auth', model='user')\n\nInstallation\n-------------\n\n``pip install django-medialibrary``\n\nor you can `find the project on github <https://github.com/pulilab/django-medialibrary>`_\n\nRunning the Tests\n------------------------------------\n\nYou can run the tests with via::\n\n    python setup.py test\n\nor::\n\n    python runtests.py\n\nSponsors\n----------\n\nThis app was written at `Pulilab <http://pulilab.com>`_ while we were working on `Vidzor <http://vidzor.com>`_.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/pulilab/django-medialibrary/archive/1.1.0.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pulilab/django-medialibrary",
    "keywords": null,
    "license": "BSD 3-Clause License, see the LICENSE file for details",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-medialibrary",
    "package_url": "https://pypi.org/project/django-medialibrary/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-medialibrary/",
    "project_urls": {
      "Download": "https://github.com/pulilab/django-medialibrary/archive/1.1.0.zip",
      "Homepage": "https://github.com/pulilab/django-medialibrary"
    },
    "release_url": "https://pypi.org/project/django-medialibrary/1.1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A pluggable django app for media management.",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1136756,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e376a14af577f9a04ef0137b80e68098b3eddd47d6515f601e8eccbe4855fa5",
        "md5": "ca2d74a98f34114c62d33bcf4a03e495",
        "sha256": "a847c8a6d4baa85a2c30509801bb0d3c60428d5c3d19e48c22a12871e280e704"
      },
      "downloads": -1,
      "filename": "django-medialibrary-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ca2d74a98f34114c62d33bcf4a03e495",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12770,
      "upload_time": "2013-09-11T14:46:09",
      "upload_time_iso_8601": "2013-09-11T14:46:09.815129Z",
      "url": "https://files.pythonhosted.org/packages/0e/37/6a14af577f9a04ef0137b80e68098b3eddd47d6515f601e8eccbe4855fa5/django-medialibrary-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}