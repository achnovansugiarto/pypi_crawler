{
  "info": {
    "author": "WoolDoughnut310",
    "author_email": "wooldoughnutspi@outlook.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# micropython-firebase-auth\n\n**Firebase implementation** based on [REST API](https://firebase.google.com/docs/reference/rest/database) optimized for the [ESP32 version of Micropython](https://github.com/micropython/micropython-esp32) based on [micropython-firebase-realtime-database](https://github.com/ckoever/micropython-firebase-realtime-database) from ckoever.\n\n### Installation\nYou can use **uPip** to install library from **PyPi**\n```python\nimport upip\nupip.install(\"micropython-firebase-auth\")\n```\nor you can just upload `firebase_auth/firebase_auth.py` to your microcontroller:\n```bash\npython pyboard.py -d PORT -f cp irebase_auth.py :\n```\n\n### Commands that are implemented\n```\n- sign_in\n- sign_out\n- sign_up\n```\n### Required modules\n```\nujson, urequests, time, sys\n```\n\n### Connect to Wifi\n```python\nimport time\nimport network\n\nwlan = network.WLAN(network.STA_IF)\nwlan.active(True)\nif not wlan.isconnected():\n    wlan.connect(\"ssid\", \"pass\")\n    print(\"Waiting for Wi-Fi connection\", end=\"...\")\n    while not wlan.isconnected():\n        print(\".\", end=\"\")\n        time.sleep(1)\n    print()\n```\n### Create a FirebaseAuth instance\n```python\nfrom firebase_auth import FirebaseAuth\n\nauth = FirebaseAuth(\"API_KEY\")\n```\nThe API key is required, read about it [here](https://firebase.google.com/docs/projects/api-keys#find-api-keys)\nor you can find it at `Project Settings > General` in your project's [console](https://console.firebase.google.com)\n## Functions\n### sign_in\n```python\nauth.sign_in(email, password)\n```\nAuthenticate a user with email and password\n### sign_up\n```python\nauth.sign_up(email=None, password=None)\n```\nRegisters an account with the given email and password\n  - leave `email` and `password` empty to sign in anonymously\n  \n    ```python\n    auth.sign_up(None, None) # Sign in as guest\n    ```\n  Example:\n  ```python\n  auth.sign_up(\"email\", \"password\")\n  print(\"Hello, \" + auth.user.display_name)\n  ```\n### sign_out\n```python\nauth.sign_out()\n```\nClears authentication session and stored user data\n## Attributes\n### user\n```python\nauth.user: dict()\n```\nReturns the user data for the currently authenticated user  \n  - #### Properties  \n      `uid`  \n      `email`  \n      `display_name` - Optional  \n      `photo_url` - Optional  \n### session\n```python\nauth.session: AuthSession\n```\nThe `AuthSession` object used to handle requests to the backend\n\n## AuthSession\n### request\n```python\nsession.request(method, endpoint, data=None, **kwargs)\n```\nMake a request to an [auth](https://firebase.google.com/docs/reference/rest/auth) endpoint requiring an idToken (the [accessToken](#access_token))\n### access_token\n```python\nsession.access_token\n```\nGets the access token for use within other Firebase services such as RTDB, Firestore, etc.\n### AuthSession.load_credentials\n```python\nAuthSession.load_credentials()\n```\nReads a stored version of session credentials from a `credentials.json` file\n### AuthSession.save_credentials\n```python\nAuthSession.save_credentials(creds)\n```\nStores a session credentials object into `credentials.json` file\nExample:\n```python\n# Storing data on system before going to sleep for 10s\nimport machine\n\ncreds = auth.session.credentials\nAuthSession.save_credentials(creds)\n\nmachine.deepsleep(10000)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WoolDoughnut310/micropython-firebase-auth",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-firebase-auth",
    "package_url": "https://pypi.org/project/micropython-firebase-auth/",
    "platform": "",
    "project_url": "https://pypi.org/project/micropython-firebase-auth/",
    "project_urls": {
      "Homepage": "https://github.com/WoolDoughnut310/micropython-firebase-auth"
    },
    "release_url": "https://pypi.org/project/micropython-firebase-auth/1.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Firebase Auth implementation for Micropython optimized for ESP32.",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12936944,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab6a1037e5d1655ffc671c1db4c2ad75f1fb180ab4a117616135cb91b1c9581c",
        "md5": "935eba595d34109343a9a8bbb9b5abda",
        "sha256": "0876a44dfe8b6abaf3e5823e01a1e38813b775cd9ae06bdfeaf704b7a8554c54"
      },
      "downloads": -1,
      "filename": "micropython-firebase-auth-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "935eba595d34109343a9a8bbb9b5abda",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5114,
      "upload_time": "2022-02-05T23:59:33",
      "upload_time_iso_8601": "2022-02-05T23:59:33.054086Z",
      "url": "https://files.pythonhosted.org/packages/ab/6a/1037e5d1655ffc671c1db4c2ad75f1fb180ab4a117616135cb91b1c9581c/micropython-firebase-auth-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}