{
  "info": {
    "author": "Markus Johansson",
    "author_email": "markus.johansson@me.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# MGEdb - Mobile Genetic Element database\n\nMGEdb contains Mobile Genetic Elements sourced from several public databases\nincluding RefSeq, Tn registry and ICEberg. The database contain information on\nthe properties, classification and genetic sequence of elements.\n\nThe database is shipped with a basic python API and a commandline interface for\ninteracting with and maintaining the database. While the database and API is\nprimarily desiged for the\n[MGEfinder](https://bitbucket.org/mhkj/mgefinder/src/master/) tool other\napplications are possible.\n\n# Installation\n\nThe database APIs are developed for python 3.7+, other versions are not\nactivly supported.\n\nInstall database dependencies using the requirements file.\n\n```bash\npip install -r requirements.txt\n```\n\nRun integration tests with either\n\n```bash\nmake test\n```\n\nor\n\n```bash\npython setup.py test\n```\n\n# Database structure\n\nThe database information is stored in [mgedb/data](./mgedb/data). Database\nrecords are stored in json format. MGE nucleotide sequences are stored in fasta\nformat in the folder [mgedb/data/seqeunces.d](./mgedb/data/sequences.d/).\n\n# Database commands\n\nTo see the available commands.\n\n```bash\nmgedb --help\n```\n\nTo view a single MGE record or all the records of a given family in the\ndatabase. Information are by default printed to stdout in a human readable\nformat. \n\n```bash\n# view MGE record\nmgedb view --name mge_name\n\n# view all records from a given family\nmgedb view --family mge_family_name\n```\n\nExtract CDS seqeunces and the sequences of the inverted repeats from MGE\nsequences in the database. These commands extract the ranges that are annotated\nin MGE records.\n\n```bash\n# Extract Inverted Repeat sequences annotated in MGEdb\nmgedb extract ir output_file\n\n# Extract CDS sequences for each MGE record with annotated CDS in MGEdb\nmgedb extract ir output_file\n```\n\n## Commands for updating and maintaining the database\n\nValidate that database content conforms to database schema.\n\n```bash\nmgedb validate\n```\n\nBackup database as a tarball.\n\n```bash\nmgedb backup\n```\n\nUpdate database with new records and sequences. The new information need to be\nformatted in the MGEdb format. Prior to updating it makes an optional backup.\nUse the flag `--dry-run` to test the update without changing the database files.\n\n```bash\nmgedb update /path/to/new_database\n```\n\n# Database API\n\nImport and make database instance.\n\n```python\nfrom mgedb import MGEdb\n\ndb = MGEdb()\n\nmge_records = db.records\n\ninsertion_sequence_26 = mge_records['IS26']\n```\n\nIterate over database sequences.\n\n```python\nfrom mgedb import MGEdb\n\ndb = MGEdb()\n\nmge_sequences = db.record_sequences\nfor mge in mge_sequences:\n    header = mge.title\n    sequence = mge.seq\n```\n\nSee valid MGE names and MGE types in database\n\n```python\nfrom mgedb import MGEdb\n\ndb = MGEdb()\n\nmge_type_abbreviation = db.nomenclature.keys()\nvalid_insertion_sequence_names = db.nomenclature['is']\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/mhkj/mgedb/",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MGEdb",
    "package_url": "https://pypi.org/project/MGEdb/",
    "platform": "",
    "project_url": "https://pypi.org/project/MGEdb/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/mhkj/mgedb/"
    },
    "release_url": "https://pypi.org/project/MGEdb/1.0.0/",
    "requires_dist": [
      "attrs",
      "biopython",
      "cattrs",
      "Click",
      "tabulate"
    ],
    "requires_python": "",
    "summary": "Mobile Genetic Element database",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16744769,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "72af72a92ff1077734cc9b7e8df90826d8f41772b22f82bb1f66972606ef063a",
        "md5": "5ebd6b2f435d83a9792bde549212309c",
        "sha256": "608c7f1dfe07bb8d7cc3c0e1fe9469d799cc442de59e84b8fa46101782c2ee72"
      },
      "downloads": -1,
      "filename": "MGEdb-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ebd6b2f435d83a9792bde549212309c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18709686,
      "upload_time": "2020-05-28T14:34:50",
      "upload_time_iso_8601": "2020-05-28T14:34:50.635984Z",
      "url": "https://files.pythonhosted.org/packages/72/af/72a92ff1077734cc9b7e8df90826d8f41772b22f82bb1f66972606ef063a/MGEdb-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b022089cda9e1be477d5607c7f02466a197b942e1ae8c6f9f59b36f7d122c16",
        "md5": "0276c1fbd5516f551ccc4d081e28de91",
        "sha256": "b0235d6acd273ae2568cbc566bcb9ac75b996290f8e0aeac7c246253e7278eb1"
      },
      "downloads": -1,
      "filename": "MGEdb-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0276c1fbd5516f551ccc4d081e28de91",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15624,
      "upload_time": "2020-05-28T14:34:53",
      "upload_time_iso_8601": "2020-05-28T14:34:53.729940Z",
      "url": "https://files.pythonhosted.org/packages/9b/02/2089cda9e1be477d5607c7f02466a197b942e1ae8c6f9f59b36f7d122c16/MGEdb-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}