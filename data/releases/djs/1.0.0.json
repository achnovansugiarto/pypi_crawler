{
  "info": {
    "author": "Austin Raney",
    "author_email": "aaraney@crimson.ua.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# DJS\n[![djs pypi version](https://img.shields.io/pypi/v/djs)](https://pypi.org/project/djs/)\n\nDJS is an open-source python library for adjusting parameters and completing concurrent WRF-Hydro/National Water Model simulations. It provides tools that simplify model usage and executions that are operable across operating systems. The framework consists of two main pieces:\n\n- __Perturbation Engine__ for scaling and stochastically generating model parameter sets.\n- __Job Scheduler__ for spawning and managing concurrent model simulations.\n\nMost users should utilize DJS's [click](https://github.com/pallets/click) command line interface to access and use the perturbation engine and job scheduler. The CLI takes [yaml](https://yaml.org) input files that tell the perturbation engine and job scheduler what files to work on and how to work on them. See the example and docs for greater detail.\n\n## Installation\n\nNote, if you just want to vary model parameters, you can skip to [package installation](#package-installation).\n\n### Docker\n\nPrior to the package installation, first install [Docker](https://www.docker.com/products). Windows and macOS users should install [Docker Desktop](https://www.docker.com/products/docker-desktop), Linux users should install [Docker Developer Tools](https://www.docker.com/products/developer-tools).\n\nmacOS users with [homebrew](https://brew.sh) installed can install Docker as such.\n\n``` bash\nbrew cask install docker\n```\n\n#### Pull the NWM/WRF-Hydro Docker Images\n\nPull the docker images from docker hub, so DJS can use them to run models. View all available images on [Docker Hub](https://hub.docker.com/u/aaraney).\n\n``` bash\n# For NWM version 2.0\ndocker pull aaraney/nwm-djs:2.0\n\n# For NWM version 1.2\ndocker pull aaraney/nwm-djs:1.2\n\n# For WRF-Hydro\ndocker pull aaraney/wrf-hydro:5.1.1\ndocker pull aaraney/wrf-hydro:5.1.0\ndocker pull aaraney/wrf-hydro:5.0.3\n```\n\n### Package Installation\n\nDJS requires Python 3.5 or higher and is available using `pip`. It's recommend to install DJS into a virtual environment or a conda environment as a best practice. Personally, I think conda is a little easier, but admittedly a little more bloated.\n\nTo create a virtual environment run the following in terminal\n\n``` bash\npython3 -m venv djs-env\n\n# If on Mac or Linux\nsource djs-env/bin/activate\n\n# If on Windows\n. \\djs-env\\Scripts\\activate\n```\n\nTo create an environment using conda do the following in terminal. You can [install miniconda here](https://docs.conda.io/en/latest/miniconda.html).\n\n``` bash\nconda create --name djs python=3.8\nconda activate djs\n```\n\nInstall DJS using pip\n\n``` bash\npip install --upgrade djs\n```\n\n## Example case\n\nFiles for this example [NCAR Pocono, PA test case](https://github.com/aaraney/NWM-Dockerized-Job-Scheduler/blob/master/pocono_test_case/pocono_test_case.zip) can be downloaded and extracted for recreation purposes.\n\nIn this example, a set of varied model parameter files will be created and used to run NWM version 2.0 simulations.\n\n### Create varied parameter files\n\nLet's take a look inside `pe_setup.yml` before varying the parameters. Documentation on the perturbation engine yaml setup file can be found by running `djs perturbation-engine --help` or in the docs.\n\n``` yaml\n# Perturbation Engine setup yml file\nprimary/DOMAIN/Route_Link.nc:\n  - nCC:\n      scalar: '* 1.3'\n      output: 'nCC_route_link.nc'\nprimary/DOMAIN/soil_properties.nc:\n  - mfsno:\n      uniform: True\n      output: 'mfsno_soil_properties.nc'\nprimary/DOMAIN/Fulldom_hires.nc:\n  - OVROUGHRTFAC:\n      scalar: '- 0.2'\n      output: 'OVROUGHRTFAC_fulldom_hires.nc'\n  - multi_group:\n      output: 'RETDEPRTFAC_OVROUGHRTFAC_fulldom_hires.nc'\n      OVROUGHRTFAC:\n          norm: False\n          scalar: '- 0.3'\n      RETDEPRTFAC:\n          scalar: '- 0.05'\n```\n\nFor those following along navigate to the location you extracted the `pocono_test_case.zip` using the terminal/command prompt.\n\n![cd to directory](https://raw.githubusercontent.com/aaraney/NWM-Dockerized-Job-Scheduler/master/resources/example_case_cd.gif)\n\nCreate a varied parameter set is as simple as running:\n\n``` bash\ndjs perturbation-engine pe_setup.yml\n```\n\nVaried parameter files should now exist in the `pocono_test_case` directory.\n\n### Run NWM Simulations\n\nFirst, ensure that Docker is running. Next, let's take a peak at the Job Scheduler setup files. Documentation on the perturbation engine yaml setup file can be found by running `djs job-scheduler --help` or in the docs.\n\n``` yaml\n# Job Scheduler setup yml file\nprimary: 'primary'\nalternative-files:\n  -\n    - 'nCC_route_link.nc'\n    - 'mfsno_soil_properties.nc'\n  - 'OVROUGHRTFAC_fulldom_hires.nc'\n  - 'RETDEPRTFAC_OVROUGHRTFAC_fulldom_hires.nc'\nimage: 'aaraney/nwm-djs:2.0'\nmax-jobs: 2\ncpus: '0-2'\nmpi-np: 2\n```\n\nTo start the simulations run:\n\n``` bash\ndjs job-scheduler js_setup.yml\n```\n\n![run simulations](https://raw.githubusercontent.com/aaraney/NWM-Dockerized-Job-Scheduler/master/resources/example_case_sim.gif)\n\nNotice above that `'nCC_route_link.nc'` and `'mfsno_soil_properties.nc'` are nested within a list, this tells the job scheduler to use both files within the same simulation. Whereas the other files will have their own simulations.\n\nNew directories starting with the prefix `rep-` should appear in the `pocono_test_case` directory. These directories hold each of the model simulations.\n\n__Contributors__: [Austin Raney](mailto:aaraney@crimson.ua.edu), [Iman Maghami](mailto:im3vp@virginia.edu), [Yenchia Feng](mailto:yenchia@stanford.edu)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aaraney/NWM-Dockerized-Job-Scheduler",
    "keywords": "docker nwm hydrology cuahsi noaa owp nwc",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djs",
    "package_url": "https://pypi.org/project/djs/",
    "platform": "",
    "project_url": "https://pypi.org/project/djs/",
    "project_urls": {
      "Homepage": "https://github.com/aaraney/NWM-Dockerized-Job-Scheduler"
    },
    "release_url": "https://pypi.org/project/djs/1.0.0/",
    "requires_dist": [
      "click",
      "docker",
      "netcdf4",
      "numpy",
      "pandas",
      "pyyaml",
      "scipy",
      "xarray"
    ],
    "requires_python": ">=3.5",
    "summary": "A framework for varying model parameters and automating concurrent usage of the Wrf-hydro/National Water Model using Docker",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9607804,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "312267ea4ba8df597120373e8f5acc1a206cddaab6ae4fc6e831228aed89667d",
        "md5": "05af1c093893c89c8d571ead0624aebf",
        "sha256": "b7da2f6a653f245c6bc5869b7ef2074024b6995c609d8a2357e2134069495e8c"
      },
      "downloads": -1,
      "filename": "djs-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "05af1c093893c89c8d571ead0624aebf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 22656,
      "upload_time": "2021-03-03T04:53:56",
      "upload_time_iso_8601": "2021-03-03T04:53:56.881154Z",
      "url": "https://files.pythonhosted.org/packages/31/22/67ea4ba8df597120373e8f5acc1a206cddaab6ae4fc6e831228aed89667d/djs-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d79a36fea7f23e3a52b3bae84cd807dc263c81dae20992cbda8fb47a7501775f",
        "md5": "cb8f66c43349e9ce45b4ef5dcb21cb5b",
        "sha256": "76c4b404824794a12b2fcf127c01fd15343b9b374fcf8e718ea69844d873ff6f"
      },
      "downloads": -1,
      "filename": "djs-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cb8f66c43349e9ce45b4ef5dcb21cb5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 18954,
      "upload_time": "2021-03-03T04:53:57",
      "upload_time_iso_8601": "2021-03-03T04:53:57.947850Z",
      "url": "https://files.pythonhosted.org/packages/d7/9a/36fea7f23e3a52b3bae84cd807dc263c81dae20992cbda8fb47a7501775f/djs-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}