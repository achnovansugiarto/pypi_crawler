{
  "info": {
    "author": "The Dopamine Team",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Dopamine\n\n<div align=\"center\">\n  <img src=\"https://google.github.io/dopamine/images/dopamine_logo.png\"><br><br>\n</div>\n\nDopamine is a research framework for fast prototyping of reinforcement learning\nalgorithms. It aims to fill the need for a small, easily grokked codebase in\nwhich users can freely experiment with wild ideas (speculative research).\n\nOur design principles are:\n\n* _Easy experimentation_: Make it easy for new users to run benchmark\n                          experiments.\n* _Flexible development_: Make it easy for new users to try out research ideas.\n* _Compact and reliable_: Provide implementations for a few, battle-tested\n                          algorithms.\n* _Reproducible_: Facilitate reproducibility in results. In particular, our\n                  setup follows the recommendations given by\n                  [Machado et al. (2018)][machado].\n\nIn the spirit of these principles, this first version focuses on supporting the\nstate-of-the-art, single-GPU *Rainbow* agent ([Hessel et al., 2018][rainbow])\napplied to Atari 2600 game-playing ([Bellemare et al., 2013][ale]).\nSpecifically, our Rainbow agent implements the three components identified as\nmost important by [Hessel et al.][rainbow]:\n\n* n-step Bellman updates (see e.g. [Mnih et al., 2016][a3c])\n* Prioritized experience replay ([Schaul et al., 2015][prioritized_replay])\n* Distributional reinforcement learning ([C51; Bellemare et al., 2017][c51])\n\nFor completeness, we also provide an implementation of DQN\n([Mnih et al., 2015][dqn]).\nFor additional details, please see our\n[documentation](https://github.com/google/dopamine/tree/master/docs).\n\nWe provide a set of [Colaboratory\nnotebooks](https://github.com/google/dopamine/tree/master/dopamine/colab)\nwhich demonstrate how to use Dopamine.\n\nWe provide a [website](https://google.github.io/dopamine/baselines/plots.html)\nwhich displays the learning curves for all the provided agents, on all the\ngames.\n\nThis is not an official Google product.\n\n## What's new\n* **16/102020:** Learning curves for the [QR-DQN JAX\n  agent](https://github.com/google/dopamine/blob/master/dopamine/jax/agents/quantile/quantile_agent.py)\n  have been added to the [baseline\n  plots](https://google.github.io/dopamine/baselines/plots.html)!\n\n* **03/08/2020:** Dopamine now supports [JAX](https://github.com/google/jax)\n  agents! This includes an implementation of the Quantile Regression agent (QR-DQN)\n  which has been a common request. Find out more in our\n  [jax](https://github.com/google/dopamine/tree/master/dopamine/jax)\n  subdirectory, which includes trained agent checkpoints.\n\n* **27/07/2020:** Dopamine now runs on TensorFlow 2. However, Dopamine is still\n  written as TensorFlow 1.X code. This means your project may need to explicity\n  disable TensorFlow 2 behaviours with:\n\n  ```\n  import tensorflow.compat.v1 as tf\n  tf.disable_v2_behavior()\n  ```\n  if you are using custom entry-point for training your agent. The migration to\n  TensorFlow 2 also means that Dopamine no longer supports Python 2.\n\n*  **02/09/2019:** Dopamine has switched its network definitions to use\n  tf.keras.Model. The previous `tf.contrib.slim` based networks are removed.\n  If your agents inherit from dopamine agents you need to update your code.\n   * `._get_network_type()` and `._network_template()` functions are replaced\n      with `._create_network()` and `network_type` definitions are moved inside\n      the model definition.\n\n      ```\n      # The following two functions are replaced with `_create_network()`.\n      # def _get_network_type(self):\n      #   return collections.namedtuple('DQN_network', ['q_values'])\n      # def _network_template(self, state):\n      #   return self.network(self.num_actions, self._get_network_type(), state)\n\n      def _create_network(self, name):\n        \"\"\"Builds the convolutional network used to compute the agent's Q-values.\n\n        Args:\n          name: str, this name is passed to the tf.keras.Model and used to create\n            variable scope under the hood by the tf.keras.Model.\n        Returns:\n          network: tf.keras.Model, the network instantiated by the Keras model.\n        \"\"\"\n        # `self.network` is set to `atari_lib.NatureDQNNetwork`.\n        network = self.network(self.num_actions, name=name)\n        return network\n\n      def _build_networks(self):\n        # The following two lines are replaced.\n        # self.online_convnet = tf.make_template('Online', self._network_template)\n        # self.target_convnet = tf.make_template('Target', self._network_template)\n        self.online_convnet = self._create_network(name='Online')\n        self.target_convnet = self._create_network(name='Target')\n      ```\n   * If your code overwrites `._network_template()`, `._get_network_type()` or\n     `._build_networks()` make sure you update your code to fit with the new\n     API. If your code overwrites `._build_networks()` you need to replace\n     `tf.make_template('Online', self._network_template)` with\n     `self._create_network(name='Online')`.\n   * The variables of each network can be obtained from the networks as follows:\n     `vars = self.online_convnet.variables`.\n   * Baselines and older checkpoints can be loaded by adding the following line\n     to your gin file.\n\n     ```\n     atari_lib.maybe_transform_variable_names.legacy_checkpoint_load = True\n     ```\n*  **11/06/2019:** Visualization utilities added to generate videos and still\n   images of a trained agent interacting with its environment. See an example\n   colaboratory\n   [here](https://colab.research.google.com/github/google/dopamine/blob/master/dopamine/colab/agent_visualizer.ipynb).\n*  **30/01/2019:** Dopamine 2.0 now supports general discrete-domain gym\n   environments.\n*  **01/11/2018:** Download links for each individual checkpoint, to avoid\n   having to download all of the checkpoints.\n*  **29/10/2018:** Graph definitions now show up in Tensorboard.\n*  **16/10/2018:** Fixed a subtle bug in the IQN implementation and upated\n   the colab tools, the JSON files, and all the downloadable data.\n*  **18/09/2018:** Added support for double-DQN style updates for the\n   `ImplicitQuantileAgent`.\n   *  Can be enabled via the `double_dqn` constructor parameter.\n*  **18/09/2018:** Added support for reporting in-iteration losses directly from\n   the agent to Tensorboard.\n   *  Set the `run_experiment.create_agent.debug_mode = True` via the\n      configuration file or using the `gin_bindings` flag to enable it.\n   *  Control frequency of writes with the `summary_writing_frequency`\n      agent constructor parameter (defaults to `500`).\n*  **27/08/2018:** Dopamine launched!\n\n## Instructions\n### Install via source\nInstalling from source allows you to modify the agents and experiments as\nyou please, and is likely to be the pathway of choice for long-term use. The\ninstructions below assume that you will be running Dopamine in a *virtual\nenvironment*. A virtual environment lets you control which dependencies are\ninstalled for which program.\n\nDopamine is a Tensorflow-based framework, and we recommend you also consult\nthe [Tensorflow documentation](https://www.tensorflow.org/install)\nfor additional details. Finally, these instructions are for Python 3.6 and\nabove.\n\nFirst download the Dopamine source.\n\n```\ngit clone https://github.com/google/dopamine.git\n```\n\nThen create a virtual environment and activate it.\n\n```\npython3 -m venv ./dopamine-venv\nsource dopamine-venv/bin/activate\n```\n\nFinally setup the environment and install Dopamine's dependencies\n\n```\npip install -U pip\npip install -r dopamine/requirements.txt\n```\n\n### Running tests\n\nYou can test whether the installation was successful by running the following:\n\n```\ncd dopamine\nexport PYTHONPATH=$PYTHONPATH:$PWD\npython -m tests.dopamine.atari_init_test\n```\n\n### Training agents\n\n#### Atari games\n\nThe entry point to the standard Atari 2600 experiment is\n[`dopamine/discrete_domains/train.py`](https://github.com/google/dopamine/blob/master/dopamine/discrete_domains/train.py).\nTo run the basic DQN agent,\n\n```\npython -um dopamine.discrete_domains.train \\\n  --base_dir /tmp/dopamine_runs \\\n  --gin_files dopamine/agents/dqn/configs/dqn.gin\n```\n\nBy default, this will kick off an experiment lasting 200 million frames.\nThe command-line interface will output statistics about the latest training\nepisode:\n\n```\n[...]\nI0824 17:13:33.078342 140196395337472 tf_logging.py:115] gamma: 0.990000\nI0824 17:13:33.795608 140196395337472 tf_logging.py:115] Beginning training...\nSteps executed: 5903 Episode length: 1203 Return: -19.\n```\n\nTo get finer-grained information about the process,\nyou can adjust the experiment parameters in\n[`dopamine/agents/dqn/configs/dqn.gin`](https://github.com/google/dopamine/blob/master/dopamine/agents/dqn/configs/dqn.gin),\nin particular by reducing `Runner.training_steps` and `Runner.evaluation_steps`,\nwhich together determine the total number of steps needed to complete an\niteration. This is useful if you want to inspect log files or checkpoints, which\nare generated at the end of each iteration.\n\nMore generally, the whole of Dopamine is easily configured using the\n[gin configuration framework](https://github.com/google/gin-config).\n\n#### Non-Atari discrete environments\n\nWe provide sample configuration files for training an agent on Cartpole and\nAcrobot. For example, to train C51 on Cartpole with default settings, run the\nfollowing command:\n\n```\npython -um dopamine.discrete_domains.train \\\n  --base_dir /tmp/dopamine_runs \\\n  --gin_files dopamine/agents/rainbow/configs/c51_cartpole.gin\n```\n\nYou can train Rainbow on Acrobot with the following command:\n\n```\npython -um dopamine.discrete_domains.train \\\n  --base_dir /tmp/dopamine_runs \\\n  --gin_files dopamine/agents/rainbow/configs/rainbow_acrobot.gin\n```\n\n\n### Install as a library\nAn easy, alternative way to install Dopamine is as a Python library:\n\n```\npip install dopamine-rl\n```\n\n### References\n\n[Bellemare et al., *The Arcade Learning Environment: An evaluation platform for\ngeneral agents*. Journal of Artificial Intelligence Research, 2013.][ale]\n\n[Machado et al., *Revisiting the Arcade Learning Environment: Evaluation\nProtocols and Open Problems for General Agents*, Journal of Artificial\nIntelligence Research, 2018.][machado]\n\n[Hessel et al., *Rainbow: Combining Improvements in Deep Reinforcement Learning*.\nProceedings of the AAAI Conference on Artificial Intelligence, 2018.][rainbow]\n\n[Mnih et al., *Human-level Control through Deep Reinforcement Learning*. Nature,\n2015.][dqn]\n\n[Mnih et al., *Asynchronous Methods for Deep Reinforcement Learning*. Proceedings\nof the International Conference on Machine Learning, 2016.][a3c]\n\n[Schaul et al., *Prioritized Experience Replay*. Proceedings of the International\nConference on Learning Representations, 2016.][prioritized_replay]\n\n### Giving credit\n\nIf you use Dopamine in your work, we ask that you cite our\n[white paper][dopamine_paper]. Here is an example BibTeX entry:\n\n```\n@article{castro18dopamine,\n  author    = {Pablo Samuel Castro and\n               Subhodeep Moitra and\n               Carles Gelada and\n               Saurabh Kumar and\n               Marc G. Bellemare},\n  title     = {Dopamine: {A} {R}esearch {F}ramework for {D}eep {R}einforcement {L}earning},\n  year      = {2018},\n  url       = {http://arxiv.org/abs/1812.06110},\n  archivePrefix = {arXiv}\n}\n```\n\n\n\n[machado]: https://jair.org/index.php/jair/article/view/11182\n[ale]: https://jair.org/index.php/jair/article/view/10819\n[dqn]: https://storage.googleapis.com/deepmind-media/dqn/DQNNaturePaper.pdf\n[a3c]: http://proceedings.mlr.press/v48/mniha16.html\n[prioritized_replay]: https://arxiv.org/abs/1511.05952\n[c51]: http://proceedings.mlr.press/v70/bellemare17a.html\n[rainbow]: https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/download/17204/16680\n[iqn]: https://arxiv.org/abs/1806.06923\n[dopamine_paper]: https://arxiv.org/abs/1812.06110\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/google/dopamine",
    "keywords": "dopamine,reinforcement,machine,learning,research",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dopamine-rl",
    "package_url": "https://pypi.org/project/dopamine-rl/",
    "platform": "",
    "project_url": "https://pypi.org/project/dopamine-rl/",
    "project_urls": {
      "Bug Reports": "https://github.com/google/dopamine/issues",
      "Documentation": "https://github.com/google/dopamine",
      "Homepage": "https://github.com/google/dopamine",
      "Source": "https://github.com/google/dopamine"
    },
    "release_url": "https://pypi.org/project/dopamine-rl/3.1.9/",
    "requires_dist": [
      "tensorflow (>=2.2.0)",
      "gin-config (>=0.3.0)",
      "absl-py (>=0.9.0)",
      "opencv-python (>=3.4.8.29)",
      "gym[atari] (>=0.13.1)",
      "flax (>=0.2.0)",
      "jax (>=0.1.72)",
      "jaxlib (>=0.1.51)",
      "Pillow (>=7.0.0)",
      "numpy (>=1.16.4)",
      "pygame (>=1.9.2)",
      "pandas (>=0.24.2)",
      "tf-slim (>=1.0)"
    ],
    "requires_python": "",
    "summary": "Dopamine: A framework for flexible Reinforcement Learning research",
    "version": "3.1.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15170036,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a99c681169000c568ac5a51299e82f5e47476b17887bea7b23c54a22de46929f",
        "md5": "d36241fee42f935c8477e5267a7ed6d3",
        "sha256": "787c04bd8ca56ab720fb49ed22f2ff3c77044c4652d8ef772419c92336c97fd5"
      },
      "downloads": -1,
      "filename": "dopamine_rl-3.1.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d36241fee42f935c8477e5267a7ed6d3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 118587,
      "upload_time": "2021-02-12T20:18:33",
      "upload_time_iso_8601": "2021-02-12T20:18:33.355120Z",
      "url": "https://files.pythonhosted.org/packages/a9/9c/681169000c568ac5a51299e82f5e47476b17887bea7b23c54a22de46929f/dopamine_rl-3.1.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c70fdb10275cb291679f9f9ae11e1f13c4f640a28cda8ebd1a3e87968ae97a9c",
        "md5": "b0d75cfff37a95650ac12ea1b84de428",
        "sha256": "0431c98897fed23d178f2ff0250a5a0658c9d0f2f202265991bdaa23e28a8203"
      },
      "downloads": -1,
      "filename": "dopamine_rl-3.1.9.tar.gz",
      "has_sig": false,
      "md5_digest": "b0d75cfff37a95650ac12ea1b84de428",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 81460,
      "upload_time": "2021-02-12T20:18:34",
      "upload_time_iso_8601": "2021-02-12T20:18:34.558645Z",
      "url": "https://files.pythonhosted.org/packages/c7/0f/db10275cb291679f9f9ae11e1f13c4f640a28cda8ebd1a3e87968ae97a9c/dopamine_rl-3.1.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}