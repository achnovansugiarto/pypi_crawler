{
  "info": {
    "author": "Rene Snajder",
    "author_email": "r.snajder@dkfz-heidelberg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# MetH5Format 1.0.4\n\n[![GitHub license](https://img.shields.io/github/license/snajder-r/meth5format.svg)](https://github.com/snajder-r/meth5format/blob/master/LICENSE)\n[![DOI](https://zenodo.org/badge/303672813.svg)](https://zenodo.org/badge/latestdoi/303672813)\n[![Language](https://img.shields.io/badge/Language-Python3.7+-yellow.svg)](https://www.python.org/)\n[![Build Status](https://travis-ci.com/snajder-r/meth5format.svg?branch=main)](https://travis-ci.com/snajder-r/meth5format)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-black.svg?style=flat)](https://github.com/snajder-r/black \"Black (modified)\")\n\n\n[![PyPI version](https://badge.fury.io/py/meth5.svg)](https://badge.fury.io/py/meth5)\n[![PyPI downloads](https://pepy.tech/badge/meth5)](https://pepy.tech/project/meth5)\n[![Anaconda Version](https://img.shields.io/conda/v/snajder-r/meth5?color=blue)](https://anaconda.org/snajder-r/meth5)\n[![Anaconda Downloads](https://anaconda.org/snajder-r/meth5/badges/downloads.svg)](https://anaconda.org/snajder-r/meth5)\n\nMetH5 is an HDF5-based container format for methylation calls from long reads.\n\nIn the current version, the MetH5 format can store the following information:\n* Log-likelihood ratio of each methylation call\n* Genomic coordinates (start and end) of each methylation call\n* The read name associated with each call\n* Read grouping (i.e. annotation such as samples or haplotypes)\n\n## Installation\n\nThrough pip:\n\n```\npip install meth5\n````\n\nThrough anaconda:\n\n```\nconda install -c snajder-r meth5\n```\n\n##  Usage\n\n### Creating a MetH5 file from nanopolish methylation calls\n\nYou can create a MetH5 file with the following command, where `INPUT_PATH` refers to either a nanopolish tsv output file (may or may not be gzipped) or it can be a directory which contains only said files. \n\n```\nmeth5 create_m5 --input_paths INPUT_PATH1 [INPUT_PATH2 ...] --output_file OUTPUT_FILE.m5\n```\n\nIn order to annotate reads with read grouping (for example as samples or haplotypes) you can do so by running: \n\n```\nmeth annotate_reads --m5file M5FILE.m5 --read_groups_key READ_GROUPS_KEY --read_group_file READ_GROUP_FILE\n```\n\nWhere the `READ_GROUPS_KEY` is the key under which you want to store the annotation (you can store multiple read annotations), \nand `READ_GROUP_FILE` is a tab-delimited file containg read name and read group. For example:\n\n```\nread_name   group\n7741f9ee-ad41-42a4-99b2-290c66960410    1\n4f18b48e-a1d3-49ad-ace3-cfb96b78ad79    2\n...\n```\n\n### Quick start for python API\n\nHere an example on how to access methylation values from a MetH5 file:\n\n```python\nfrom meth5.meth5 import MetH5File\n\nwith MetH5File(filename, mode=\"r\") as m:\n    # List chromosomes in the MetH5 file\n    m.get_chromosomes()\n    \n    # Access chromosome 7\n    chr7 = m[\"chr7\"]\n    \n    # Get number of chunks\n    chr7.get_number_of_chunks()\n    \n    # Get a container that manages the values of chunk 3\n    # (note that the data is not yet loaded into memory)\n    values = chr7.get_chunk(3)\n    \n    # Get the log-likelihood ratios in the container as a numpy array of shape (n,)\n    llrs = values.get_llrs()\n    \n    # Get the genomic start and end locations for each methylation call in the \n    # chunk as a numpy array  of shape (n,2) \n    ranges = values.get_ranges()\n    \n    # Compute methylation rate (beta-score of methylation) for each genomic location,\n    # as well as the respective coordinates\n    met_rates, met_rate_ranges = values.get_llr_site_rate()\n    \n    # You can also compute other aggregates if you like\n    met_count, met_count_ranges = values.get_llr_site_aggregate(aggregation_fun=lambda llrs: (llrs>2).sum())\n    \n    # Instead of accessing chunk wise, you can query a genomic range\n    values = chr7.get_values_in_range(36852906, 37449223)\n```\n\nA more detailed API documentation is in the works. Stay tuned!\n\n### Sparse methylation matrix\n\nIn addition to accessing methylation calls in its unraveled form, the `meth5` library also contains a way to represent\nthe methylation calls as a sparse matrix. Seeing how the values are already stored in the MetH5 file in the same way a\ncoordinate sparse matrix would be stored in memory, this is a very cheap operation. Example:\n\n```python\nfrom meth5.meth5 import MetH5File\n\nwith MetH5File(filename, mode=\"r\") as m:\n    values = m[\"chr7\"].get_values_in_range(36852906, 37449223)\n    \n    # The parameter \"read_read_names\" allows is to choose whether we want to load the actual\n    # read names into memory. It's slightly more expensive than not reading it, so only load them\n    # if you are interested in them\n    matrix = values.to_sparse_methylation_matrix(read_read_names=True)\n\n    # This is a scipy.sparse.csc_matrix matrix of dimension (r,s), containing the log-likelihood ratios of methylation\n    # where r is the number of reads covering the genomic range we selected, and s is the number of unique genomic \n    # ranges for which we have methylation calls. Since an LLR of 0 means total uncertainty, a 0 indicates no call.\n    matrix.met_matrix\n    \n    # A numpy array of shape (s, ) containing the start position for each unique genomic range\n    matrix.genomic_coord\n    # A numpy array of shape (s, ) containing the end position for each unique genomic range\n    matrix.genomic_coord_end\n    \n    # A numpy array of shape (r, ) containing the read names\n    matrix.read_names\n    \n    # Get a submatrix containing only the first 10 genomic locations\n    submatrix = matrix.get_submatrix(0, 10)\n\n    # Get a submatrix containing only the reads in the provided list of read names\n    submatrix = matrix.get_submatrix_from_read_names(allowed_read_names)\n```\n\n\n\n## The MetH5 Format\n\nA MetH5 file is an HDF5 container that stores methylation calls for long reads. The structure of the HDF5 file is as follows:\n\n```\n/\n├─ chromosomes\n│  ├─ CHROMOSOME_NAME1\n│  │  ├─ llr (float dataset of shape (n,))\n│  │  ├─ read_id (int dataset of shape (n,))\n│  │  ├─ range (int dataset of shape (n,2))\n│  │  └─ chunk_ranges (dataset of shape (c, 2))\n│  │   \n│  ├─ CHROMOSOME_NAME2\n│  │  └─ ...\n│  └─ ...\n└─ reads\n   ├─ read_name_mapping (string dataset of shape (r,))\n   └─ read_groups\n      ├─ READ_GROUP_KEY1 (int dataset of shape (r,))\n      ├─ READ_GROUP_KEY2 (int dataset of shape (r,))\n      └─ ... \n```\n\nWhere `n` is the number of methylation calls in the respective chromosome, `c` is the number of chunks, and `r`is the total number of reads across all chromosomes.\n\n---\n\n## Citing\n\nThe repository is archived at Zenodo. If you use `meth5` please cite as follow:\n\nRene Snajder. (2021, May 18). snajder-r/meth5. Zenodo. https://doi.org/10.5281/zenodo.4772327\n\n## Authors and contributors\n\n* Rene Snajder (@snajder-r): rene.snajder(at)dkfz-heidelberg.de\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/snajder-r/meth5format",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meth5",
    "package_url": "https://pypi.org/project/meth5/",
    "platform": null,
    "project_url": "https://pypi.org/project/meth5/",
    "project_urls": {
      "Homepage": "https://github.com/snajder-r/meth5format"
    },
    "release_url": "https://pypi.org/project/meth5/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "HDF5 based file format for storage, retrieval, and analysis of modification predictions from Nanopore",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15866797,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9a44e21ee915ccc6cd3e256cea98ab066dd0bbd305f8a2f09a5b7363cacd091",
        "md5": "caf095df47549b225475a9ff92e23809",
        "sha256": "3e952816094b426c508d4c52191c3e4de92b0f0d6035b2f275a5ee7ae0b04054"
      },
      "downloads": -1,
      "filename": "meth5-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "caf095df47549b225475a9ff92e23809",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 24886,
      "upload_time": "2022-03-07T14:59:40",
      "upload_time_iso_8601": "2022-03-07T14:59:40.949501Z",
      "url": "https://files.pythonhosted.org/packages/e9/a4/4e21ee915ccc6cd3e256cea98ab066dd0bbd305f8a2f09a5b7363cacd091/meth5-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}