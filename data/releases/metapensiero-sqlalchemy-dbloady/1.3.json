{
  "info": {
    "author": "Lele Gaifax",
    "author_email": "lele@metapensiero.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Utilities"
    ],
    "description": ".. -*- coding: utf-8 -*-\n.. :Project:   metapensiero.sqlalchemy.dbloady -- YAML based data loader\n.. :Created:   ven  1 gen 2016, 16.19.54, CET\n.. :Author:    Lele Gaifax <lele@metapensiero.it>\n.. :License:   GNU General Public License version 3 or later\n.. :Copyright: Copyright (C) 2016 Lele Gaifax\n..\n\n=================================\n metapensiero.sqlalchemy.dbloady\n=================================\n\nYAML based data loader\n======================\n\n :author: Lele Gaifax\n :contact: lele@metapensiero.it\n :license: GNU General Public License version 3 or later\n\nLoad new instances in the database, or update/delete existing ones, given a data structure\nrepresented by a YAML stream, as the following::\n\n    - entity: gam.model.Fascicolo\n      key: descrizione\n      # no data, just \"declare\" the entity\n\n    - entity: gam.model.TipologiaFornitore\n      key: tipologiafornitore\n      data:\n        - &tf_onesto\n          tipologiafornitore: Test fornitori onesti\n\n    - entity: gam.model.ClienteFornitore\n      key: descrizione\n      data:\n        - descrizione: Test altro fornitore onesto\n          tipologiafornitore: *tf_onesto\n          partitaiva: 01234567890\n        - &cf_lele\n          codicefiscale: GFSMNL68C18H612V\n          descrizione: Dipendente A\n\n    - entity: gam.model.Dipendente\n      key: codicefiscale\n      data:\n        - &lele\n          codicefiscale: GFSMNL68C18H612V\n          nome: Emanuele\n          cognome: Gaifas\n          clientefornitore: *cf_lele\n          foto: !File {path: ../img/lele.jpg}\n\n    - entity: gam.model.Attrezzature\n      key: descrizione\n      data:\n        - &macchina\n          descrizione: Fiat 500\n\n    - entity: gam.model.Prestiti\n      key:\n        - dipendente\n        - attrezzatura\n      data:\n        - dipendente: *lele\n        - attrezzatura: *macchina\n\nThe ``key`` entry may be either a single attribute name or a list of them, not necessarily\ncorresponding to the primary key of the entity.  To handle the simplest case of structured\nvalues (for example, when a field is backed by a PostgreSQL HSTORE), the key attribute name may\nbe in the form ``name->slot``::\n\n    - entity: model.Product\n      key: description->en\n      data:\n        - &cage\n          description:\n            en: \"Roadrunner cage\"\n            it: \"Gabbia per struzzi\"\n\nWhen all (or most of) the instances share the same fields, a more compact representation may be\nused::\n\n    - entity: model.Values\n      key:\n        - product\n        - attribute\n      fields: [ product, attribute, value ]\n      data:\n        - [ *cage, *size, 110cm x 110cm x 120cm ]\n        - [ *cage, *weight, 230kg ]\n\nwhere ``fields`` contains a list of field names and ``data`` is a sequence of lists, each\ncontaining the values of a single instance.  The two sintaxes may be mixed though, so you can\nsay::\n\n    - entity: model.Person\n      key: [ lastname, firstname ]\n      fields: [ lastname, firstname, password ]\n      data:\n        - [ gaifax, lele, \"123456\" ]\n        - [ foobar, john, \"abcdef\" ]\n        - lastname: rossi\n          firstname: paolo\n          birthdate: 1950-02-03\n\n\nTest fixture facility\n---------------------\n\nWith the option ``--save-new-instances`` newly created instances will be written (actually\nadded) to the given file in YAML format, so that at some point they can be deleted using the\noption ``--delete`` on that file.  Ideally\n\n::\n\n  dbloady -u postgresql://localhost/test -s new.yaml fixture.yaml\n  dbloady -u postgresql://localhost/test -D new.yaml\n\nshould remove fixture's traces from the database, if it contains only new data.\n\n\nPre and post load scripts\n-------------------------\n\nThe option ``--preload`` may be used to execute an arbitrary Python script before any load\nhappens.  This is useful either to tweak the YAML context or to alter the set of file names\nspecified on the command line (received as the `fnames` global variable).\n\nThe following script registers a custom costructor that recognizes the tag ``!time`` or a value\nlike ``T12:34`` as a ``datetime.time`` value::\n\n  import datetime, re\n  import yaml\n\n  def time_constructor(loader, node):\n      value = loader.construct_scalar(node)\n      if value.startswith('T'):\n          value = value[1:]\n      parts = map(int, value.split(':'))\n      return datetime.time(*parts)\n\n  yaml.add_constructor('!time', time_constructor)\n  yaml.add_implicit_resolver('!time', re.compile(r'^T?\\d{2}:\\d{2}(:\\d{2})?$'), ['T'])\n\nAs another example, the following script handles input files with a ``.gpg`` suffix decrypting\nthem on the fly to a temporary file that will be deleted when the program exits::\n\n  import atexit, os, subprocess, tempfile\n\n  def decipher(fname):\n      print(\"Input file %s is encrypted, please enter passphrase\" % fname)\n      with tempfile.NamedTemporaryFile(suffix='.yaml') as f:\n          tmpfname = f.name\n      subprocess.run(['gpg', '-q', '-o', tmpfname, fname], check=True)\n      atexit.register(lambda n=tmpfname: os.unlink(n))\n      return tmpfname\n\n  fnames = [decipher(fname) if fname.endswith('.gpg') else fname for fname in fnames]\n\nThen you have::\n\n  dbloady -u postgresql://localhost/test -p preload.py data.yaml.gpg\n  Input file data.yaml.gpg is encrypted, please enter passphrase\n  /tmp/tmpfhjrdqgf.yaml: ......\n  Committing changes\n\nThe option ``--postload`` may be used to perform additional steps *after* all YAML files have\nbeen loaded but *before* the DB transaction is committed.\n\nThe pre/post load scripts are executed with a context containing the following variables:\n\n`session`\n  the SQLAlchemy session\n\n`dry_run`\n  the value of the ``--dry-run`` option\n\n`fnames`\n  the list of file names specified on the command line\n\n\n.. -*- coding: utf-8 -*-\n\nChanges\n-------\n\n1.3 (2016-01-14)\n~~~~~~~~~~~~~~~~\n\n- New --preload and --postload options to execute arbitrary Python scripts before or after the\n  load\n\n\n1.2 (2016-01-09)\n~~~~~~~~~~~~~~~~\n\n- Fix source distribution\n\n\n1.1 (2016-01-09)\n~~~~~~~~~~~~~~~~\n\n- Fix data refs when loading from compact representation\n\n\n1.0 (2016-01-07)\n~~~~~~~~~~~~~~~~\n\n- Allow more compact representation when all instances share the same fields\n\n- Extract dbloady from metapensiero.sphinx.patchdb 1.4.2 into a standalone package",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/lele/metapensiero.sqlalchemy.dbloady",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": null,
    "maintainer_email": null,
    "name": "metapensiero.sqlalchemy.dbloady",
    "package_url": "https://pypi.org/project/metapensiero.sqlalchemy.dbloady/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/metapensiero.sqlalchemy.dbloady/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/lele/metapensiero.sqlalchemy.dbloady"
    },
    "release_url": "https://pypi.org/project/metapensiero.sqlalchemy.dbloady/1.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "YAML based data loader",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15470221,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b71f18290c4c54beb96faa2f935832a98d14594a6e00c64bae833d52cdf4c4f9",
        "md5": "20806802fefe7f6334fb00eb5a531081",
        "sha256": "218facb4bd22a9dcea101ec0de110302b4247f20740c93bb76012b97fa6026cf"
      },
      "downloads": -1,
      "filename": "metapensiero.sqlalchemy.dbloady-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "20806802fefe7f6334fb00eb5a531081",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14482,
      "upload_time": "2016-01-14T11:12:00",
      "upload_time_iso_8601": "2016-01-14T11:12:00.138773Z",
      "url": "https://files.pythonhosted.org/packages/b7/1f/18290c4c54beb96faa2f935832a98d14594a6e00c64bae833d52cdf4c4f9/metapensiero.sqlalchemy.dbloady-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}