{
  "info": {
    "author": "Lele Gaifax",
    "author_email": "lele@metapensiero.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Utilities"
    ],
    "description": ".. -*- coding: utf-8 -*-\n.. :Project:   metapensiero.sqlalchemy.dbloady -- YAML based data loader\n.. :Created:   ven  1 gen 2016, 16.19.54, CET\n.. :Author:    Lele Gaifax <lele@metapensiero.it>\n.. :License:   GNU General Public License version 3 or later\n.. :Copyright: Â© 2016, 2017 Lele Gaifax\n..\n\n=================================\n metapensiero.sqlalchemy.dbloady\n=================================\n\n----------------------\nYAML based data loader\n----------------------\n\n :author: Lele Gaifax\n :contact: lele@metapensiero.it\n :license: GNU General Public License version 3 or later\n\n.. contents::\n\nData loader\n===========\n\nLoad new instances in the database, or update/delete existing ones, given a data structure\nrepresented by a YAML stream, as the following::\n\n    - entity: gam.model.Fascicolo\n      key: descrizione\n      # no data, just \"declare\" the entity\n\n    - entity: gam.model.TipologiaFornitore\n      key: tipologiafornitore\n      rows:\n        - &tf_onesto\n          tipologiafornitore: Test fornitori onesti\n\n    - entity: gam.model.ClienteFornitore\n      key: descrizione\n      rows:\n        - descrizione: Test altro fornitore onesto\n          tipologiafornitore: *tf_onesto\n          partitaiva: 01234567890\n        - &cf_lele\n          codicefiscale: GFSMNL68C18H612V\n          descrizione: Dipendente A\n\n    - entity: gam.model.Dipendente\n      key: codicefiscale\n      rows:\n        - &lele\n          codicefiscale: GFSMNL68C18H612V\n          nome: Emanuele\n          cognome: Gaifas\n          clientefornitore: *cf_lele\n          foto: !File {path: ../img/lele.jpg}\n\n    - entity: gam.model.Attrezzature\n      key: descrizione\n      rows:\n        - &macchina\n          descrizione: Fiat 500\n          foto: !File\n            compressor: lzma\n            content: !!binary |\n              /Td6WFoAAATm1rRGAgAhA...\n\n    - entity: gam.model.Prestiti\n      key:\n        - dipendente\n        - attrezzatura\n      rows:\n        - dipendente: *lele\n          attrezzatura: *macchina\n\nAs you can see, the YAML document is a sequence of entries, each one defining the content of a\nset of *instances* of a particular *entity*.\n\nThe ``entity`` must be the fully qualified dotted name of the SQLAlchemy mapped class.\n\nThe ``key`` entry may be either a single attribute name or a list of them, not necessarily\ncorresponding to the primary key of the entity, provided that it uniquely identifies a single\ninstance.  To handle the simplest case of structured values (for example, when a field is\nbacked by a PostgreSQL HSTORE), the key attribute name may be in the form ``name->slot``::\n\n    - entity: model.Product\n      key: description->en\n      rows:\n        - &cage\n          description:\n            en: \"Roadrunner cage\"\n            it: \"Gabbia per struzzi\"\n\nThe ``rows`` (or ``data``) may be either a single item or a list of them, each containing\nthe data of a single instance, usually a dictionary.\n\n.. _fields:\n\nWhen all (or most of) the instances share the same fields, a more compact representation may be\nused::\n\n    - entity: model.Values\n      key:\n        - product\n        - attribute\n      fields: [ product, attribute, value ]\n      rows:\n        - [ *cage, *size, 110cm x 110cm x 120cm ]\n        - [ *cage, *weight, 230kg ]\n\nwhere ``fields`` contains a list of field names and ``rows`` is a sequence of lists, each\ncontaining the values of a single instance.  The two sintaxes may be mixed though, so you can\nsay::\n\n    - entity: model.Person\n      key: [ lastname, firstname ]\n      fields: [ lastname, firstname, password ]\n      rows:\n        - [ gaifax, lele, \"123456\" ]\n        - [ foobar, john, \"abcdef\" ]\n        - lastname: rossi\n          firstname: paolo\n          birthdate: 1950-02-03\n\nThe ``dbloady`` tool iterates over all the entities, and for each instance it determines if it\nalready exists querying the database with the given *key*: if it's there, it updates it\notherwise it creates a new one and initializes it with its data.\n\n\nTest fixture facility\n---------------------\n\nWith the option ``--save-new-instances`` newly created instances will be written (actually\nadded) to the given file in YAML format, so that at some point they can be deleted using the\noption ``--delete`` on that file.  Ideally\n\n::\n\n  dbloady -u postgresql://localhost/test -s new.yaml fixture.yaml\n  dbloady -u postgresql://localhost/test -D new.yaml\n\nshould remove fixture's traces from the database, if it contains only new data.\n\n\nPre and post load scripts\n-------------------------\n\nThe option ``--preload`` may be used to execute an arbitrary Python script before any load\nhappens.  This is useful either to tweak the YAML context or to alter the set of file names\nspecified on the command line (received as the `fnames` global variable).\n\nThe following script registers a custom costructor that recognizes the tag ``!time`` or a value\nlike ``T12:34`` as a ``datetime.time`` value::\n\n  import datetime, re\n  from ruamel import yaml\n\n  def time_constructor(loader, node):\n      value = loader.construct_scalar(node)\n      if value.startswith('T'):\n          value = value[1:]\n      parts = map(int, value.split(':'))\n      return datetime.time(*parts)\n\n  yaml.add_constructor('!time', time_constructor)\n  yaml.add_implicit_resolver('!time', re.compile(r'^T?\\d{2}:\\d{2}(:\\d{2})?$'), ['T'])\n\nAs another example, the following script handles input files with a ``.gpg`` suffix decrypting\nthem on the fly to a temporary file that will be deleted when the program exits::\n\n  import atexit, os, subprocess, tempfile\n\n  def decipher(fname):\n      print(\"Input file %s is encrypted, please enter passphrase\" % fname)\n      with tempfile.NamedTemporaryFile(suffix='.yaml') as f:\n          tmpfname = f.name\n      subprocess.run(['gpg', '-q', '-o', tmpfname, fname], check=True)\n      atexit.register(lambda n=tmpfname: os.unlink(n))\n      return tmpfname\n\n  fnames = [decipher(fname) if fname.endswith('.gpg') else fname for fname in fnames]\n\nThen you have::\n\n  dbloady -u postgresql://localhost/test -p preload.py data.yaml.gpg\n  Input file data.yaml.gpg is encrypted, please enter passphrase\n  /tmp/tmpfhjrdqgf.yaml: ......\n  Committing changes\n\nThe option ``--postload`` may be used to perform additional steps *after* all YAML files have\nbeen loaded but *before* the DB transaction is committed.\n\nThe pre/post load scripts are executed with a context containing the following variables:\n\n`session`\n  the SQLAlchemy session\n\n`dry_run`\n  the value of the ``--dry-run`` option\n\n`fnames`\n  the list of file names specified on the command line\n\n\nGeneric foreign keys\n--------------------\n\nVersion 1.6 introduced rudimentary and experimental support for the `generic foreign keys`__\ntrick. It assumes that they are implemented with a `hybrid property`__ that exposes a `custom\ncomparator`__. See ``tests/generic_fk/model.py`` for an example.\n\n__ http://docs.sqlalchemy.org/en/latest/_modules/examples/generic_associations/generic_fk.html\n__ http://docs.sqlalchemy.org/en/rel_1_1/orm/extensions/hybrid.html\n__ http://docs.sqlalchemy.org/en/rel_1_1/orm/extensions/hybrid.html#building-custom-comparators\n\nWith a proper configuration, the following works::\n\n  - entity: model.Customer\n    key: name\n    data:\n      - &customer\n        name: Best customer\n\n  - entity: model.Supplier\n    key: company_name\n    data:\n      - &supplier\n        company_name: ACME\n\n  - entity: model.Address\n    key:\n      - related_object\n      - street\n    data:\n      - related_object: *customer\n        street: 123 anywhere street\n      - related_object: *supplier\n        street: 321 long winding road\n\n\nDirect assignment of primary keys\n---------------------------------\n\nWhen the attribute does not correspond to a relationship property, assignment of an instance\nreference will set the attribute to the instance's primary key::\n\n  - entity: model.Person\n    key:\n      - lastname\n      - firstname\n    fields:\n      - lastname\n      - firstname\n    data:\n      - &johndoe [ Doe, John ]\n\n  - entity: model.CannedFilter\n    key: description\n    data:\n      - &onlyjohndoe\n        description: \"Only John Doe\"\n\n  - entity: model.Condition\n    key:\n      - filter\n      - fieldname\n    data:\n      - filter: *onlyjohndoe\n        fieldname: \"persons.id\"\n        fieldvalue: *johndoe\n\nRaw SQL values\n--------------\n\nSometime a value requires executing an arbitrary query on the database, maybe because it is\ncomputed by a trigger or more generally because it cannot be determined by the YAML content::\n\n  - entity: model.Number\n    key:\n      id\n    data:\n      - id: 1\n        absolute: !SQL {query: \"SELECT abs(:num)\", params: {num: -1}}\n      - id: !SQL {query: \"SELECT abs(:num)\", params: {num: -2}}\n        absolute: !SQL {query: \"SELECT abs(:num)\", params: {num: -2}}\n      - id: 3\n        absolute: !SQL {query: \"SELECT count(*) FROM numbers\"}\n\nThe specified query must return a single value, as it is executed with `session.scalar()`__.\n\n__ http://docs.sqlalchemy.org/en/latest/orm/session_api.html#sqlalchemy.orm.session.Session.scalar\n\n\nData dumper\n===========\n\nWith the complementary tool, ``dbdumpy``, you can obtain a YAML representation out\nof a database in the same format used by ``dbloady``. It's rather simple and in particular it\ndoes not handle reference cycles.\n\nThe tool is driven by a `specs file`, a YAML document composed by two parts: the first defines\nthe `pivots` instances (that is, the entry points), the second describes how each entity must\nbe serialized and in which order.\n\nConsider the following document::\n\n  - entity: model.Result\n  ---\n  - entity: model.Person\n    key:\n      - lastname\n      - firstname\n\n  - entity: model.Exam\n    fields: description\n    key: description\n\n  - entity: model.Result\n    key:\n      - person\n      - exam\n    other:\n      - vote\n\nIt tells ``dbdumpy`` to consider *all* instances of ``model.Result`` as the pivots, then\ndefines how each entity must be serialized, simply by listing the ``key`` attribute(s) and any\nfurther ``other`` field. Alternatively, you can specify a list of ``fields`` names, to obtain\nthe more compact form described `above`__.\n\n__ fields_\n\nExecuting\n\n::\n\n  dbdumpy -u sqlite:////foo/bar.sqlite spec.yaml\n\nwill emit the following on stdout::\n\n  - entity: model.Person\n    key:\n    - lastname\n    - firstname\n    rows:\n    - &id002\n      firstname: John\n      lastname: Doe\n    - &id003\n      firstname: Bar\n      lastname: Foo\n  - entity: model.Exam\n    fields: description\n    key: description\n    rows:\n    - &id001\n      - Drive license\n  - entity: model.Result\n    key:\n    - person\n    - exam\n    rows:\n    - exam: *id001\n      person: *id002\n      vote: 10\n    - exam: *id001\n      person: *id003\n      vote: 5\n\n\n.. -*- coding: utf-8 -*-\n\nChanges\n-------\n\n2.7 (2019-05-10)\n~~~~~~~~~~~~~~~~\n\n- Emit a critical log on attribute assignment failure, to aid debugging bad input\n\n\n2.6 (2018-04-17)\n~~~~~~~~~~~~~~~~\n\n- Remove the fixup to progressbar2 `issue #162`__, solved in its 3.7.1 release\n\n__  https://github.com/WoLpH/python-progressbar/issues/162\n\n\n2.5 (2018-04-09)\n~~~~~~~~~~~~~~~~\n\n- Try to fix different behaviour in progressbar2 3.7.0 w.r.t. multiple progress bars\n\n\n2.4 (2018-04-08)\n~~~~~~~~~~~~~~~~\n\n- Now File elements can read text files\n\n- Support dumping hstore values (not tested enough, though)\n\n\n2.3 (2017-06-07)\n~~~~~~~~~~~~~~~~\n\n- Fix handling of property based attributes\n\n\n2.2 (2017-05-18)\n~~~~~~~~~~~~~~~~\n\n- The File elements may now contain their content, without accessing external files\n\n\n2.1 (2017-05-02)\n~~~~~~~~~~~~~~~~\n\n- New ``--quiet`` option to omit the progress bar\n\n\n2.0 (2017-04-06)\n~~~~~~~~~~~~~~~~\n\n- Require `ruamel.yaml`__ instead of PyYAML__\n\n__ https://pypi.python.org/pypi/ruamel.yaml\n__ https://pypi.python.org/pypi/PyYAML\n\n\n1.11 (2017-03-22)\n~~~~~~~~~~~~~~~~~\n\n- Spring cleanup, no externally visible changes\n\n\n1.10 (2016-11-16)\n~~~~~~~~~~~~~~~~~\n\n- Reduce load noise by using progressbar2__\n\n__ https://pypi.python.org/pypi/progressbar2\n\n\n1.9 (2016-11-15)\n~~~~~~~~~~~~~~~~\n\n- Ability to execute raw SQL statements to fetch a value from the database\n\n\n1.8 (2016-11-15)\n~~~~~~~~~~~~~~~~\n\n- Better tests\n\n- Handle assignments to non-relationship properties\n\n\n1.7 (2016-11-05)\n~~~~~~~~~~~~~~~~\n\n- Make Python 3 happy by explicitly use binary mode to read external files\n\n\n1.6 (2016-10-29)\n~~~~~~~~~~~~~~~~\n\n- Quick&approximated solution to load `generic associations`__\n\n__ http://docs.sqlalchemy.org/en/latest/_modules/examples/generic_associations/generic_fk.html\n\n\n1.5 (2016-03-12)\n~~~~~~~~~~~~~~~~\n\n- New complementary dump functionality, exposed by a new cli tool, dbdumpy\n\n- Cosmetic, backward compatible, changes to the YAML format, for nicer sorting\n\n\n1.4 (2016-02-10)\n~~~~~~~~~~~~~~~~\n\n- Data files and preload/postload scripts may be specified also as package relative resources\n\n\n1.3 (2016-01-14)\n~~~~~~~~~~~~~~~~\n\n- New --preload and --postload options to execute arbitrary Python scripts before or after the\n  load\n\n\n1.2 (2016-01-09)\n~~~~~~~~~~~~~~~~\n\n- Fix source distribution\n\n\n1.1 (2016-01-09)\n~~~~~~~~~~~~~~~~\n\n- Fix data refs when loading from compact representation\n\n\n1.0 (2016-01-07)\n~~~~~~~~~~~~~~~~\n\n- Allow more compact representation when all instances share the same fields\n\n- Extract dbloady from metapensiero.sphinx.patchdb 1.4.2 into a standalone package",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/metapensiero/metapensiero.sqlalchemy.dbloady.git",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metapensiero.sqlalchemy.dbloady",
    "package_url": "https://pypi.org/project/metapensiero.sqlalchemy.dbloady/",
    "platform": "",
    "project_url": "https://pypi.org/project/metapensiero.sqlalchemy.dbloady/",
    "project_urls": {
      "Homepage": "https://gitlab.com/metapensiero/metapensiero.sqlalchemy.dbloady.git"
    },
    "release_url": "https://pypi.org/project/metapensiero.sqlalchemy.dbloady/2.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "YAML based data loader",
    "version": "2.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15470221,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b66aad324b68041be48530901465fc25db0789b9250a6c63dae28a1d0ee48d4",
        "md5": "79f8d1e4a44d79dc64d91303b9ed9d6b",
        "sha256": "ea757c6bef47830a312d0e003d560a552291335c166ce5ead7b7c29004b9a322"
      },
      "downloads": -1,
      "filename": "metapensiero.sqlalchemy.dbloady-2.7.tar.gz",
      "has_sig": false,
      "md5_digest": "79f8d1e4a44d79dc64d91303b9ed9d6b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30458,
      "upload_time": "2019-05-10T15:09:03",
      "upload_time_iso_8601": "2019-05-10T15:09:03.848877Z",
      "url": "https://files.pythonhosted.org/packages/6b/66/aad324b68041be48530901465fc25db0789b9250a6c63dae28a1d0ee48d4/metapensiero.sqlalchemy.dbloady-2.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}