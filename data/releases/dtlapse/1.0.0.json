{
  "info": {
    "author": "Jochen Keil",
    "author_email": "jochen.keil@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Artistic Software",
      "Topic :: Multimedia",
      "Topic :: Multimedia :: Video"
    ],
    "description": "# DtLapse - Create smooth timelapse videos with [darktable](http://www.darktable.org)\n\n#### TOC\n\n[**Introduction**](#introduction)\n\n[**Licensing**](#licensing)\n\n[**Motivational Example**](#motivational-example)\n\n[**Keyframes**](#key-what-keyframes)\n\n[**Workflow**](#workflow)\n\n[**Tl;Dr**](#tldr)\n\n[**Usage Examples**](#usage-examples)\n\n[**Adding more modules**](#adding-more-modules)\n\n[**Tipps & Tricks**](#tipps-tricks)\n\n[**Installation**](#installation)\n\n[**Developers**](#developers)\n\n[**Reference**](#reference)\n\n## Introduction\n\nWhile timelapse videos can be created from regular video footage a more\nprofessional approach would be to take a series of still photos. This allows to\ncontrol parameters like exposure length, interval length and thus the [shutter\nangle](https://beyondthetime.net/cinematic-motion-blur-180-rule/). I won't dig\nany deeper here, because this is not the objective of this document and there\nis plenty of information out there.\n\nNow, imagine you have hundreds or even thousands of RAW pictures. All of them\nneed some sort of processing and in the non-free world people would quickly turn\nto Lightroom and LRTimelapse which are undoubtly great tools. But not\neverybody's running Windows or MacOS and there are some great open source\nalternatives like [darktable](http://www.darktable.org). What's missing though\nis a tool which, just like LRTimelapse, helps with the editing of all those\npictures based on keyframes. That's where **dtLapse** comes into play!\n\nA word of warning: This tool does not replace a solid knowledge of *darktable*\nand it's editing workflows. For a starting point I recommend the [darktable\nmanual](https://www.darktable.org/resources/), the [darktable-user mailing\nlist](https://www.mail-archive.com/darktable-user@lists.darktable.org/) and the\n[pixls.us (inofficial)](https://discuss.pixls.us/) website.\n\n## Licensing\n\nAll source files in this repository are distributed under the terms of the\nGnu General Public License Version 3, or later *unless* otherwise noted.\n\nPlease see the file [`LICENSE`](LICENSE) for the full license text.\n\n#### Contributors\n\nFiles in the [`iops`](iops) folder can carry their own license information,\nchosen by the author. Since json does not allow comments please use this format:\n\n```\n{ \"operation\": \"exposure\"\n, \"iopdata\": [ { \"modversion\": 5\n               , \"iop_order\": 21.0\n               , \"smooth\": [false, true, true, true, true]\n               , \"cformat\": \"iffff\"\n               }\n             ]\n, \"help\": \"Smoothing for the exposure module. The parameters are mode (auto/manual), black point, exposure, deflicker percentile and deflicker target level.\"\n, \"license\": \"GPL-3.0-or-later\"\n, \"copyright\": [\"2020 Jochen Keil <jochen.keil@gmail.com>\"]\n}\n```\n\n#### Donating\n\nIf you like this work, find it useful and would like to donate please use Paypal\n(jochen.keil@gmail.com) or contact me for other means. Thank you very much in\nadvance!\n\n#### Commercial use\n\nFor commercial use, please contact me (jochen.keil@gmail.com) for custom license\nterms.\n\nThis does not affect the use of this software for commercial video or photo\nprojects or monetization on YouTube, etc. I would appreciate proper attribution\nand a donation though.\n\n## Motivational Example\n\nLet's assume you've taken a (very short) timelapse consisting of 10 frames. If\nyou'd take your pictures as they were using an automatic algorithm (e.g. your\ncamera's jpeg routine) you might notice that brightness and color flicker. This\ndoes not happen always and depends heavily on how well your camera's light meter\nand white balance algorithm works but it happens.\n\nBack to your frames. You start working on your first frame in darktable and once\nyou've got a result you're happy with you just copy the entire history stack\nover to your other pictures.\n\nBut NO, what just happened? The highlights are blown out and the colors look\ntotally off, even stronger for every picture. The lighting conditions changed\nrapidly during your shot and your edit of the first frame doesn't fit your last\nframe. How can you fix that without tediously working on every single frame?\n\nIt's actually pretty easy! You just declare frames 1,4,7 and 10 as keyframes, do\nyour editing there and interpolate the module parameters for 2,3,5,6,8 and 9.\nSo, instead of editing 10 frames, you're now down to 4.\n\n## Key-what? (Keyframes)\n\nA **keyframe** is a special frame (photo, picture) which has been picked in\nadvance to represent a set of similar pictures. This sounds complicated at first\nbut actually it's pretty simple. When you open up *darktable* and load your\nstills you're presented with thumbnails for all of them. Now you can select\nevery Nth frame and tag them. For example `Keyframe`, which is the default\n*dtLapse* will look for, but you can also use a different tag. The amount of\nkeyframes depends on the amount of work you're willing to put into your\ntimelapse and most importantly how rapidly the light changes. For around 1300\npictures I've had good success with 30 to 40 keyframes. You can also add more\nkeyframes for time spans where the light changes quickly, e.g. sunrise or sunset\nand fewer for very constant footage. Always ensure to include the very first and\nthe last frame!\n\n## Workflow\n\nNow that you've got a bunch of keyframes you can start working on them\nindividually. Use the `collect image` module to narrow down to your keyframes\nonly.\n\nFirst thing you might want to fix is the `white balance`. Color temperature\nusually only changes for day-to-night or night-to-day shots, so be sure to put\nan emphasis here if you captured that. In addition, sometimes the auto white\nbalance mode of (at least my) camera fails which can result in ugly color\nflicker. To fix this, adjust the color balance for all your keyframes to get\na consistent look across them.\n\nNext thing would be `exposure`. Here, too, flicker is the main problem, e.g.\nwhen your camera adjust exposure time or ISO too rapidly or even randomly.\nI recommend to use *darktable*'s auto exposure mode and start from there. Again,\naim for a consistent look throughout your keyframes.\n\nNow that the basics are fixed you can start to use `filmicrgb` to adjust shadows\nand highlights. After that I usually carry on with `local contrast`, `rgb\ncurve`, `color balance`, `vibrance` and `velvia`. For extreme cases of bright\nand dark scenes `graduatednd` might help, but usually `filmicrgb` does a better\njob. As above, aim for a consistent look across your keyframes.\n\nOnce you are happy with the look of your keyframes, make sure to save all the\nXMPs (`write sidecar files`). Now you can close *darktable* (or minimize it) and\nopen a terminal. Navigate to the directory which holds your XMP files and run\n*dtLapse* with the `--plot` option:\n\n```\n$ dtlapse temperature --xmps ${my_xmps} --plot\n```\n\n(This requires your keyframes to be tagged with `Keyframe`. If that's not the\ncase you can use either the `--keyframe-tag` option to specify a different\nkeyframe or specify the keyframes manually with the `--keyframes` option.)\n\nNow you should see a window with a plotted curve of the interpolated and\nsmoothed values between your keyframes. If you're happy with the result, close\nthe window and run *dtLapse* again without the `--plot` option:\n\n```\n$ dtlapse temperature --xmps ${my_xmps}\n```\n\n*DtLapse* will now write the calculated values to the XMP files. If you did not\nspecify the `--no-backup` option then every XMP will be copied with a `.bkp`\nsuffix.\n\nRepeat this for every module you've made modifications with and which is\nsupported by *dtLapse*. For a list of supported modules run `dtlapse --help` or\nlook into the `iops` directory.\n\nFinally, you need to reload the XMP files in *darktable*. Just re-import all\npictures from your timelapse and *darktable* should pick up the changes. If that\ndoes not work you close *darktable* before running *dtlapse*. If you still\nexperience problems, make sure that *darktable* does not give precedence to it's\ndatabase rather than the XMP files.\n\n## Tl;Dr\n\n1. Load your timelapse pictures in *darktable*.\n2. Pick some keyframes. Always include the very first and the last frame.\n3. Tag you keyframes, e.g. with `Keyframe`.\n4. Edit your keyframes using the modules supported by *dtLapse*.\n5. Save the XMP sidecar files (`write sidecar files`) or close *darktable*.\n6. Run *dtLapse* with the `--plot` switch, check the curve and (if necessary)\n   tweak it using the `--interpolation`, `--smooth` and `--window` & `--order`\n   parameters.\n7. Once you're happy with the graph, run *dtLapse* without the `--plot` switch\n   to apply the modifications to your XMP files.\n8. Reload your pictures (`import` module) or open up *darktable* again.\n9. Check if you like the result.\n10. Export your pictures or tweak your keyframes and run *dtLapse* again.\n\n## Usage examples\n\n```\n$ dtlapse temperature --xmps ${my_xmps} --plot\n```\nPlot a graph of the interpolated values for the temperature module.\n\n```\n$ dtlapse temperature --xmps ${my_xmps} --interpolation cubic --plot\n```\nUse a different interpolation algorithm instead of the default `quadratic`.\n\n```\n$ dtlapse temperature --xmps ${my_xmps} --smooth --plot\n```\nAdd smoothing to the interpolated values and plot the graph again.\n\n```\n$ dtlapse temperature --xmps ${my_xmps} --smooth --window 101 --order 5 --plot\n```\nAdjust smoothing parameters and plot the graph.\n\n```\n$ dtlapse temperature --xmps ${my_xmps} --keyframe-tag MyKeyframeTag --dry-run\n```\nUse a different tag instead of the default `Keyframe`.\n\n```\n$ dtlapse temperature --xmps ${my_xmps} --keyframes ${my_keyframe_xmps} --dry-run\n```\nSpecify keyframes manually without the use of a tag.\n\n## Adding more modules\n\nAdding modules is actually pretty easy. Let's assume there's a module you'd like\nto add. Go to *darktable*'s git repository, find the module in the `src/iop`\ndirectory and open the file, for example `exposure.c`. There you will find\na data structure called `dt_iop_exposure_params_t`. For the `temperature` module\nit's called `dt_iop_temperature_params_t`. You get the idea. Now, when you look\nat the `iops/exposure.json` in this repository you'll see a data entry called\n`smooth` and `cformat`. The `smooth` field contains a list of boolean values\nwhich tell *dtLapse* whether the parameter should be interpolated and smoothed\nor not. For example in the `exposure` module the first data value is a switch\nfor the module mode which we do not want to be interpolated. Hence it's set to\nfalse. The `cformat` field species the data value types for the struct.  For the\n`exposure` module it's `int`, `float`, `float`, `float` and `float` (`iffff`).\nCheck pythons `struct` module for\n[documentation](https://docs.python.org/3/library/struct.html) on how to specify\ntypes. Finally you'll need the proper name of the module for the `operation`\ndata field, the `modversion` and the `iop_order`. The `modversion` for a certain\ndarktable release can be found in a macro called `DT_MODULE_INTROSPECTION` in\nthe module source file. The `modversion` is especially important to distinguish\nbetween different module version with different parameter sets. New versions can\nbe easily added to the `iopdata` list. For the `iop_order` I have not found\na better way than to look at an XMP file. Finally, please write a somewhat\nmeaningful help text.  Drop your now module.json file into the `iops` folder and\nit should be available.\n\n```\nDT_MODULE_INTROSPECTION(5, dt_iop_exposure_params_t)\n```\n\nFor more complex modules and parameters python's eval mode can be used to\nspecify `smooth` and `cformat`. Just prefix the string with `eval:`. For an\nexample, take a look at `filmicrgb.json`.\n\n```\ntypedef struct dt_iop_exposure_params_t\n{\n  dt_iop_exposure_mode_t mode; // $DEFAULT: EXPOSURE_MODE_MANUAL\n  float black;    // $MIN: -1.0 $MAX: 1.0 $DEFAULT: 0.0 $DESCRIPTION: \"black level correction\"\n  float exposure; // $MIN: -18.0 $MAX: 18.0 $DEFAULT: 0.0\n  float deflicker_percentile;   // $MIN: 0.0 $MAX: 100.0 $DEFAULT: 50.0 $DESCRIPTION: \"percentile\"\n  float deflicker_target_level; // $MIN: -18.0 $MAX: 18.0 $DEFAULT: -4.0 $DESCRIPTION: \"target level\"\n  int compensate_exposure_bias; // $DEFAULT: FALSE\n} dt_iop_exposure_params_t;\n```\n\n<pre>\n&lt;rdf:li\n darktable:num=\"6\"\n darktable:operation=\"exposure\"\n darktable:enabled=\"0\"\n darktable:modversion=\"5\"\n darktable:params=\"0100000000000000000000000000484248e18ac0\"\n darktable:multi_name=\"\"\n darktable:multi_priority=\"0\"\n <b>darktable:iop_order=\"21.0000000000000\"</b>\n darktable:blendop_version=\"9\"\n darktable:blendop_params=\"gz11eJxjYGBgkGAAgRNODGiAEV0AJ2iwh+CRyscOAAdeGQQ=\"/>\n</pre>\n\n```\n{ \"operation\": \"exposure\"\n, \"iopdata\": [ { \"modversion\": 5\n               , \"iop_order\": 21.0\n               , \"smooth\": [false, true, true, true, true]\n               , \"cformat\": \"iffff\"\n               }\n             ]\n, \"help\": \"Smoothing for the exposure module. The parameters are mode (auto/manual), black point, exposure, deflicker percentile and deflicker target level.\"\n}\n```\n\n## Tipps & Tricks\n\n- Every image must have an existing XMP file. Run *darktable* first, then\n  *dtLapse*.\n\n- Include the first and the last frame in your keyframes!\n\n- Every keyframe must have the module enabled you're planing to use, even if you\n  leave it at default settings. For the rest of the images it's not necessary.\n\n- If you want to use multiple modules, simply use a `for` loop:\n\n``` zsh\nfor op in exposure temperature filmicrgb; do\n  dtlapse ${op} --xmps ${xmps}\ndone\n```\n\n- The `--xmp` parameter does only accept XMP files. You can use shell globbing\n  to match all your files. Either copy all pictures to particular folder and use\n  `--xmps *.xmp`, or (like I do) leave a your camera's sequence number in the\n  filename and use something like `--xmps *{00013..00314}.xmp`.\n\n- If darktable is acting strangly or overwrites your XMPs, run it without the\n  database: darktable --library :memory:\n\n- Suppose you have all your timelapse pictures (and nothing else) in one folder,\n  e.g. /path/to/my/timelapse.  Then you just do this:\n\n``` zsh\n$ cd /path/to/my/timelapse\n$ darktable .\n# or\n$ darktable *.arw # *.nef *.cr2 or what you're using\n# edit edit edit\n$ dtlapse ${operation} --xmps *.xmp # --plot --smooth --window --order etc\n$ darktable . # or ..\n```\n\n## Installation\n\nInstall it from [PyPI](https://pypi.org/project/dtlapse/) via `pip`!\n\n```\npip install --user --upgrade dtlapse\n```\n\nor\n\n```\npip3 install --user --upgrade dtlapse\n```\n\nor\n\n```\npython3 -m pip install --user --upgrade dtlapse\n```\n\n## Developers\n\n#### Setting up a virtual environment for python\n\nMake sure that you have `venv` installed. Either using `pip`:\n\n```\n$ pip install venv\n```\n\nOr with your favorite package manager, e.g.:\n\n```\n$ apt install python3-venv\n```\n\n```\n$ python3 -m venv env\n$ source env/bin/activate\n$ pip install -r requirements.txt\n```\n\n#### Building and Uploading a package to PyPI\n\n> https://packaging.python.org/tutorials/packaging-projects/\n\n```\npython3 -m pip3 install setuptools wheel\npython3 setup.py sdist bdist_wheel --universal\npython3 -m twine upload --repository testpypi dist/*\n```\n\n## Reference\n#### Modules\n\n| Module | Description |\n| --- | --- |\n| temperature | Smoothing for the temperature (white balance) module. The parameters temperature coefficients. |\n| rgbcurve | Smoothing for the rgbcurve module. The parameters are the actual nodes for each curve (120 floats), number of nodes per curve (3 ints), curve type (3 ints), autoscale, middle grey scaling and color preservation. |\n| colorbalance | Smoothing for the colorbalance module. The parameters are mode, lift[4], gamma[4], gain[4], saturation, contrast, grey and saturation_out. |\n| vibrance | Smoothing for the vibrance module. The only parameter is the amount.\n| velvia | Smoothing for the velvia module. The parameters are strength and bias. |\n| bilat | Smoothing for the bilat (local contrast) module. The parameters are mode, sigma_r, sigma_s, detail and midtone. |\n| exposure | Smoothing for the exposure module. The parameters are mode (auto/manual), black point, exposure, deflicker percentile and deflicker target level. |\n| filmicrgb | Smoothing for the filmicrgb module. The parameters are grey point source, black point source, white point source, security factor, grey point target, black point target, white point target, output power, latitude, contrast, saturation, balance and color preservation |\n| graduatednd | Smoothing for the graduatednd module. The parameters are density, hardness, rotation, offset, hue and saturation. |\n| toneequal | Smoothing for the tone equalizer module. The 9 exposure parameters are smoothed, masking parameters are copied. |\n| hotpixels | Copy hot pixels module settings. |\n| hazeremoval | Copy haze removal module settings. The parameters are strength and distance |\n| demosaic | Copy demosaic module settings. |\n| highlights | Copy highlight module settings. |\n| lens | Copy lens correction module settings. |\n\n#### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `--dry-run` | Do not modify XMP files. |\n| `--no-backup` | By default all XMP files will be copied to a new file with the suffix \"*.bkp\".  Use this flag to disable this behaviour. |\n| `--plot` | Plot a graph for fine tuning parameters. XMPs will not be modified. |\n| `--xmps` | XMP files. Mandatory. |\n| `--keyframes` | A list of XMP files which serve as keyframes. If this is used, keyframe tags will be ignored, even if specified with the --keyframe-tag switch. |\n| `--keyframe-tag` | Tag used for selecting Keyframes. Default: \"Keyframe\". |\n| `--interpolation` | Interpolation method. One of linear, nearest, zero, slinear, quadratic, cubic, previous, next. See scipy.interpolate.interp1d documentation for details.  Default: quadratic. |\n| `--smooth` | Use a Savitzky-Golay filter to smooth the data points. Use --window and --order to fine tune the result. |\n| `--window` | Window size for the smoothing filter. Must be odd. Default: length of input values. Greater values result in more smoothing. |\n| `--order` | The order of the polynom for the filter function. Smaller values result in more smoothing. Default value: 3. |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/jochen.keil/dtlapse",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtlapse",
    "package_url": "https://pypi.org/project/dtlapse/",
    "platform": "",
    "project_url": "https://pypi.org/project/dtlapse/",
    "project_urls": {
      "Homepage": "https://gitlab.com/jochen.keil/dtlapse"
    },
    "release_url": "https://pypi.org/project/dtlapse/1.0.0/",
    "requires_dist": [
      "attrdict (>=2.0.1)",
      "matplotlib (>=3.1.1)",
      "numpy (>=1.16.4)",
      "scipy (>=1.3.0)"
    ],
    "requires_python": ">=3",
    "summary": "Create smooth timelapse videos with darktable",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7945746,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddfd3059ca740e0d4e3e4704717f04a93057efd33a94ef054f9ffe53207a2095",
        "md5": "81d7c18a6047c318ebc107d0ab1f192d",
        "sha256": "f3fbed32bfdc0043f720ad7e10951e484f2d5416c91e144eee734458d0e8e9d3"
      },
      "downloads": -1,
      "filename": "dtlapse-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81d7c18a6047c318ebc107d0ab1f192d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3",
      "size": 31775,
      "upload_time": "2020-08-08T14:06:20",
      "upload_time_iso_8601": "2020-08-08T14:06:20.444697Z",
      "url": "https://files.pythonhosted.org/packages/dd/fd/3059ca740e0d4e3e4704717f04a93057efd33a94ef054f9ffe53207a2095/dtlapse-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "608614ff5790adac178431b0a28d50f3d6c3b7c97a5d744b76d504af91e3e650",
        "md5": "2adbd3b0a20283ae7d5c5b9d6c38fde2",
        "sha256": "f1675af87fb3d6a5906e37de03ec8bc0e8c4eea3c40f1791c216f1357257df21"
      },
      "downloads": -1,
      "filename": "dtlapse-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2adbd3b0a20283ae7d5c5b9d6c38fde2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 21679,
      "upload_time": "2020-08-08T14:06:22",
      "upload_time_iso_8601": "2020-08-08T14:06:22.797063Z",
      "url": "https://files.pythonhosted.org/packages/60/86/14ff5790adac178431b0a28d50f3d6c3b7c97a5d744b76d504af91e3e650/dtlapse-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}