{
  "info": {
    "author": "Chris Beaven",
    "author_email": "smileychris@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "===================\ndjango-easysettings\n===================\n\n.. image:: https://circleci.com/gh/SmileyChris/django-easysettings.svg?style=svg\n    :alt: Build status\n    :target: https://circleci.com/gh/SmileyChris/django-easysettings\n\n.. image:: https://codecov.io/gh/SmileyChris/django-easysettings/branch/master/graph/badge.svg\n    :alt: Coverage status\n    :target: https://codecov.io/gh/SmileyChris/django-easysettings\n\n\nEasy app-specific settings for Django apps.\n\nProvides a method for using a declarative class for an app's default settings.\nThe instance of this class can be used to access all project settings in place\nof ``django.conf.settings``.\n\n.. contents::\n    :local:\n    :backlinks: none\n\n\nInstallation\n============\n\nTo install, run: ``pip install django-easysettings``\n\n\nUsage\n=====\n\nCreate a ``conf.py`` file within your app's directory, adding attributes for\nthe default values of your app-specific settings. They will be overridden by\nany project setting that is provided.\n\nFor example:\n\n.. code:: python\n\n    from easysettings.app import AppSettings\n\n\n    class Settings(AppSettings):\n        MYAPP_FRUIT = 'Apple'\n\n\n    settings = Settings()\n\n\nThen in your app, rather than `from django.conf import settings`, use\n`from myapp.conf import settings`. For example:\n\n.. code:: python\n\n    from myapp.conf import settings\n\n\n    def dashboard(request):\n        context = {}\n        context['fruit'] = settings.MYAPP_FRUIT\n        if settings.DEBUG:\n            context['debug_mode'] = True\n        # ...\n\nDictionaries\n------------\n\nA common pattern is to use a dictionary as a namespace for all an app's\nsettings, such as ``settings.MYAPP['settings']``.\n\nEasy-settings handles this fine, overriding any keys provided in the project\nwhile still having access to the default app settings keys.\n\nYou can also use a subclass of an ``AppSettings`` class to set up a dictionary.\n\n.. code:: python\n\n    from easysettings.apps import AppSettings\n\n\n    class MyAppSettings(AppSettings):\n        \"\"\"\n        MyApp settings\n        \"\"\"\n        #: Preferred fruit\n        FRUIT = 'Apple'\n        #: Preferred drink\n        DRINK = 'Water'\n\n\n    class Settings(AppSettings):\n        MYAPP = MyAppSettings\n\n\n    settings = Settings()\n\nLegacy Usage\n------------\n\nIf previously your app used a common prefix (like `MYAPP_`) you\ncan still support projects that still use these stand-alone legacy settings\nwhile moving to a ``MYAPP`` dictionary for your settings.\n\n.. code:: python\n\n    from easysettings.legacy import LegacyAppSettings\n\n\n    class Settings(LegacyAppSettings):\n        MYAPP = {'FRUIT': 'Apple'}\n\n\n    settings = Settings()\n\nIf a project uses settings like ``MYAPP_FRUIT = 'Banana'`` they will continue\nto work. As soon as a project switches to ``MYAPP``, any ``MYAPP_*`` settings\nwill be ignored.\n\nWhile the legacy app settings class is used, the dictionary settings can still\nbe accessed via the prefixed setting (for example, ``settings.MYAPP_FRUIT``).\n\n==========\nChange Log\n==========\n\n2.0.1 (10 August 2019)\n======================\n\n- Add Python 3.7 and Django 2.2 to the test matrix.\n\n\n2.0 (24 April 2018)\n===================\n\n- Full rework of project! Import is now\n  ``from easysettings.app import AppSettings`` (but left importable from\n  ``easysettings`` for better backwards compatibility).\n\n- Removed isolated settings functionality, unnecessary with a separate settings\n  module for tests and/or use of the ``TestCase.settings()`` context manager.\n\n- Added ``easysettings.legacy.LegacyAppSettings`` for providing backwards\n  compatibility for prefixed project settings when moving settings to a\n  dictionary rather than individual settings with the same prefix.\n\n1.1 (4 April 2017)\n==================\n\n- Django 1.11 compatibility.\n\n1.0.1 (24 May 2012)\n===================\n\n- Included extra source files.\n\n1.0 (16 April 2012)\n===================\n\n- Initial release.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/SmileyChris/django-easysettings",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-easysettings",
    "package_url": "https://pypi.org/project/django-easysettings/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-easysettings/",
    "project_urls": {
      "Homepage": "http://github.com/SmileyChris/django-easysettings"
    },
    "release_url": "https://pypi.org/project/django-easysettings/2.0.1/",
    "requires_dist": [
      "tox ; extra == 'dev'",
      "django ; extra == 'dev'",
      "pytest-mock ; extra == 'dev'",
      "zest.releaser[recommended] ; extra == 'maintainer'",
      "pytest-mock ; extra == 'test'",
      "pytest-cov ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Easy app-specific settings for Django",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5657953,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c47ccb00b51a22b940b3c60c9b59b14bef98da3c0b8bd7a40973683769f966c2",
        "md5": "b78c05d39065029865c0cde594559a01",
        "sha256": "59bbbd2d369a98ee9b265180cfa4f5ec1c5af557cb7984d21b05e86f915d0d2c"
      },
      "downloads": -1,
      "filename": "django_easysettings-2.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b78c05d39065029865c0cde594559a01",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 6754,
      "upload_time": "2019-08-09T22:20:21",
      "upload_time_iso_8601": "2019-08-09T22:20:21.264298Z",
      "url": "https://files.pythonhosted.org/packages/c4/7c/cb00b51a22b940b3c60c9b59b14bef98da3c0b8bd7a40973683769f966c2/django_easysettings-2.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a35fd9d2666ee3f38eb9e512b993cf07c04ece703fef8a0228f2136fe7251e71",
        "md5": "d8055d8d08174751ddfe5b7cc5aacd85",
        "sha256": "4d472d6b64c4f9f91432da943bcc30d5dd1f2c62b2f5b457310bfa4929b08fca"
      },
      "downloads": -1,
      "filename": "django-easysettings-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d8055d8d08174751ddfe5b7cc5aacd85",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6319,
      "upload_time": "2019-08-09T22:20:23",
      "upload_time_iso_8601": "2019-08-09T22:20:23.312723Z",
      "url": "https://files.pythonhosted.org/packages/a3/5f/d9d2666ee3f38eb9e512b993cf07c04ece703fef8a0228f2136fe7251e71/django-easysettings-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}