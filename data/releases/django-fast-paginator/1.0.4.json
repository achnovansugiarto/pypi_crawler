{
  "info": {
    "author": "Tolga Bilbey",
    "author_email": "bilbeyt@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "![Issues](https://img.shields.io/github/issues/bilbeyt/django-fast-pagination)\n![Forks](https://img.shields.io/github/forks/bilbeyt/django-fast-pagination)\n![Stars](https://img.shields.io/github/stars/bilbeyt/django-fast-pagination)\n![License](https://img.shields.io/github/license/bilbeyt/django-fast-pagination)\n![Twitter](https://img.shields.io/twitter/url?url=https%3A%2F%2Fgithub.com%2Fbilbeyt%2Fdjango-fast-pagination)\n\n\n## Fast Paginator for Django\nSimple speedy pagination over your large database tables.\n\n## Features\n\n**Simple Integration**\n\nFastPaginator API is compatible with Django's built-in pagination library. Only change your import statements then you're ready.\n\n**Better SQL Queries**\n\nDjango's built-in pagination system builds SQL queries that have offset and limit clauses. FastPagination does not use them.\n\n**Built-in Cache System**\n\nFastPaginator has a built-in cache system. It does not cache QuerySets but caches primary keys of object lists. This provides speedup for pagination progress.\n\n## Quick Start\n\n1. Add \"fast_pagination\" to your INSTALLED_APPS setting like this:\n```python\n    INSTALLED_APPS = [\n        ... \n        'fast_pagination'\n    ]\n```\n2. In Django settings, you can set FAST_PAGINATION_TIMEOUT variable to invalidate cache. Default value is 1 hour.\n3. In Django settings, you can set FAST_PAGINATION_PREFIX variable to use in cache keys. Default values is 'fastpagination'.\n4. Import FastPaginator like this:\n```python\n    from fast_pagination.helpers import FastPaginator\n```\n5. Then, you are ready. All you have to do is give your queryset and number of entries when creating FastPaginator object.\n\n## To Run Tests\n\n1. Create a dummy project.\n2. Run following command.\n```python\n./manage.py test fast_pagination.tests\n```\n\n## Benchmark\n\nThis benchmark is executed on Postgres9.6 with a table that has 1000000 rows, and fetched only one field. Results can be seen below.\n\n| Paginator     | Min              | Max              | Mean             | StdDev        | Median           |\n|---------------|------------------|------------------|------------------|---------------|------------------|\n| Django        | 93.5535 (1.53) | 95.7217 (1.54) | 94.7340 (1.53) | 0.9755 (2.32) | 94.9046 (1.54) |\n| FastPaginator | 61.1488 (1.0)   | 62.3316 (1.0)    | 61.7489 (1.0)    | 0.4205 (1.0)  | 61.7649 (1.0)    |\n\n\nYou can also run benchmark tests following instructions:\n\n1. Run migrations if app needs using\n```bash\n./manage.py migrate\n```\n2. Call generate_users command from command line using\n```bash\n./manage.py generate_users 1000000\n```\n3. Run tests using\n```bash\npytest fast_pagination/tests.py\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/bilbeyt/django-fast-pagination/archive/v1.0.4.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bilbeyt/django-fast-pagination",
    "keywords": "django,pagination,optimization",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fast-paginator",
    "package_url": "https://pypi.org/project/django-fast-paginator/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-fast-paginator/",
    "project_urls": {
      "Download": "https://github.com/bilbeyt/django-fast-pagination/archive/v1.0.4.tar.gz",
      "Homepage": "https://github.com/bilbeyt/django-fast-pagination"
    },
    "release_url": "https://pypi.org/project/django-fast-paginator/1.0.4/",
    "requires_dist": null,
    "requires_python": ">= 3.0.0",
    "summary": "A Django app to paginate querysets faster.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7294125,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e86e1239568717b0a264e941b01bce4bdfcde3d369bd689e3fde4fdac4691801",
        "md5": "ef443a101dd82952c419f530881bf99e",
        "sha256": "60a7c5ed99a530f437d2cac14d271a360a9842ae7553b2d911325baac06412ed"
      },
      "downloads": -1,
      "filename": "django-fast-paginator-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "ef443a101dd82952c419f530881bf99e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.0.0",
      "size": 4292,
      "upload_time": "2020-05-21T13:28:57",
      "upload_time_iso_8601": "2020-05-21T13:28:57.439447Z",
      "url": "https://files.pythonhosted.org/packages/e8/6e/1239568717b0a264e941b01bce4bdfcde3d369bd689e3fde4fdac4691801/django-fast-paginator-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}