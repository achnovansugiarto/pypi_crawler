{
  "info": {
    "author": "Guido U. Draheim",
    "author_email": "Guido.Draheim@gmx.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# docker systemctl replacement\n\nThis script may be used to overwrite \"/usr/bin/systemctl\".   \nIt will execute the systemctl commands without SystemD!\n\nThis is used to test deployment of services with a docker\ncontainer as the target host. Just as on a real machine you \ncan use \"systemctl start\" and \"systemctl enable\" and other \ncommands to bring up services for further configuration and \ntesting. Information from \"systemctl show\" allows deployment\nautomation tools to work seemlessly.\n\nThis script can also be run as docker-init of a docker container\n(i.e. the main \"CMD\" on PID 1) where it will automatically bring \nup all enabled services in the \"multi-user.target\" and where it \nwill reap all zombies from background processes in the container.\nWhen running a \"docker stop\" on such a container it will also \nbring down all configured services correctly before exit.\n\n    ## docker exec lamp-stack-container systemctl list-units --state=running\n    httpd.service     loaded active running   The Apache HTTP Server\n    mariadb.service   loaded active running   MariaDB database server\n    \n    ## docker exec lamp-stack-container pstree -ap\n    systemctl,1 /usr/bin/systemctl\n      |-httpd,7 -DFOREGROUND\n      |   |-httpd,9 -DFOREGROUND\n      |   |-httpd,10 -DFOREGROUND\n      `-mysqld_safe,44 /usr/bin/mysqld_safe --basedir=/usr\n          `-mysqld,187 --basedir=/usr --datadir=/var/lib/mysql\n              |-{mysqld},191\n              |-{mysqld},192\n\n## Problems with SystemD in Docker\n\nThe background for this script is the inability to run a\nSystemD daemon easily inside a docker container. There have\nbeen multiple workarounds with varying complexity and actual\nfunctionality. (The systemd-nsspawn tool is supposed to help \nwith  running systemd in a container but only rkt with CoreOs \nis using it so far).\n\nMost people have come to take the easy path and to create a\nstartup shell script for the docker container that will\nbring up the service processes one by one. Essentially one would\nread the documentation or the SystemD `*.service` scripts of the\napplication to see how that would be done. By using this\nreplacement script a programmer can skip that step.\n\n## Service Manager\n\nThe systemctl-replacement script does cover the functionality\nof a service manager where commands like `systemctl start xx`\nare executed. This is achieved by parsing the `*.service`\nfiles that are installed by the standard application packages \n(rpm, deb) in the container. These service unit descriptors\ndefine the actual commands to start/stop a service in their\nExecStart/ExecStop settings.\n\nWhen installing systemctl.py as /usr/bin/systemctl in a\ncontainer then it provides enough functionality that\ndeployment scripts for virtual machines continue to\nwork unchanged when trying to start/stop, enable/disable\nor mask/unmask a service in a container.\n\nThis is also true for deployment tools like Ansible. As of \nversion 2.0 and later Ansible is able to connect to docker \ncontainers directly without the help of a ssh-daemon in \nthe container. Just make your inventory look like\n\n    [frontend]\n    my_frontend_1 ansible_connection=docker\n\nBased on that `ansible_connection` one can enable the\nsystemctl-replacement to intercept subsequent calls\nto `\"service:\"` steps. Effectivly Ansible scripts that \nshall be run on real virtual machines can be tested \nwith docker containers. However in newer centos/ubuntu\nimages you need to check for python first.\n\n    - copy: src=\"files/docker/systemctl.py\" dest=\"/usr/bin/systemctl\"\n    - package: name=\"python\"\n    - file: name=\"/run/systemd/system/\" state=\"directory\"\n    - service: name=\"dbus.service\" state=\"stopped\"\n\nSee [SERVICE-MANAGER](SERVICE-MANAGER.md) for more details.\n\n---",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gdraheim/docker-systemctl-replacement",
    "keywords": "",
    "license": "EUPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docker-systemctl-replacement",
    "package_url": "https://pypi.org/project/docker-systemctl-replacement/",
    "platform": null,
    "project_url": "https://pypi.org/project/docker-systemctl-replacement/",
    "project_urls": {
      "Homepage": "https://github.com/gdraheim/docker-systemctl-replacement"
    },
    "release_url": "https://pypi.org/project/docker-systemctl-replacement/1.5.7106/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "allows to deploy to systemd-controlled containers without starting an actual systemd daemon",
    "version": "1.5.7106",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17256655,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96ea0e29c5998b15cdcba29df3703807651666f41075426455b1eaa770885edd",
        "md5": "5cb65e53ed06a8db4d903496992e1042",
        "sha256": "9dc9adb5fa707555a773d43d596b2aba5cc44e60cd1870ba49cf1d93d02d070f"
      },
      "downloads": -1,
      "filename": "docker-systemctl-replacement-1.5.7106.tar.gz",
      "has_sig": false,
      "md5_digest": "5cb65e53ed06a8db4d903496992e1042",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 71158,
      "upload_time": "2023-03-12T00:15:41",
      "upload_time_iso_8601": "2023-03-12T00:15:41.353974Z",
      "url": "https://files.pythonhosted.org/packages/96/ea/0e29c5998b15cdcba29df3703807651666f41075426455b1eaa770885edd/docker-systemctl-replacement-1.5.7106.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}