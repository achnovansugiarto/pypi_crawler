{
  "info": {
    "author": "mocobk",
    "author_email": "mailmzb@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## mitmdump\n![](https://shields.mitmproxy.org/pypi/v/mitmdump.svg)\n![](https://shields.mitmproxy.org/pypi/pyversions/mitmdump.svg)\n\nmitmdump 是对 mitmproxy 的简单封装，可以实现以编程的方式运行 mitmproxy 服务, 当然原来的命令行方式运行也是支持的。\n\n`pip install mitmdump`\n\n**Before:** `mitmdump -s youscript.py`\n\n**After:** `python youscript.py` or `mitmdump -s youscript.py`\n\n```python\nfrom mitmproxy.http import HTTPFlow\n\nfrom mitmdump import DumpMaster, Options\n\n\nclass AddHeader:\n    def __init__(self):\n        self.num = 0\n\n    def response(self, flow: HTTPFlow):\n        self.num = self.num + 1\n        flow.response.headers[\"count\"] = str(self.num)\n\n\naddons = [\n    AddHeader()\n]\n\nif __name__ == '__main__':\n    opts = Options(server=True, listen_host='0.0.0.0', listen_port=8080, termlog_verbosity='info',\n                   show_clientconnect_log=False, flow_detail=1, dumper_filter='~m GET')\n    m = DumpMaster(opts)\n\n    m.addons.add(*addons)\n    m.run()\n```\n\n## 参数列表\nmitmdump 库所有可用的参数都保持跟 mitmproxy 一致，所以你不必担心使用上的困难，以下列举了可用参数及类型，参数使用说明参考命令行中的帮助信息。\n\n| params                              | default      | type                          |\n| ----------------------------------- | ------------ | ----------------------------- |\n| add_upstream_certs_to_client_chain  | False        | [<class 'bool'>]              |\n| allow_hosts                         | []           | [typing.Sequence[str]]        |\n| anticache                           | False        | [<class 'bool'>]              |\n| anticomp                            | False        | [<class 'bool'>]              |\n| block_global                        | True         | [<class 'bool'>]              |\n| block_private                       | False        | [<class 'bool'>]              |\n| body_size_limit                     | None         | [typing.Union[str, NoneType]] |\n| certs                               | []           | [typing.Sequence[str]]        |\n| ciphers_client                      | None         | [typing.Union[str, NoneType]] |\n| ciphers_server                      | None         | [typing.Union[str, NoneType]] |\n| client_certs                        | None         | [typing.Union[str, NoneType]] |\n| client_replay                       | []           | [typing.Sequence[str]]        |\n| command_history                     | True         | [<class 'bool'>]              |\n| confdir                             | ~/.mitmproxy | [<class 'str'>]               |\n| content_view_lines_cutoff           | 512          | [<class 'int'>]               |\n| dumper_default_contentview          | auto         | [<class 'str'>]               |\n| dumper_filter                       | None         | [typing.Union[str, NoneType]] |\n| flow_detail                         | 1            | [<class 'int'>]               |\n| http2                               | True         | [<class 'bool'>]              |\n| http2_priority                      | False        | [<class 'bool'>]              |\n| ignore_hosts                        | []           | [typing.Sequence[str]]        |\n| keep_host_header                    | False        | [<class 'bool'>]              |\n| keepserving                         | False        | [<class 'bool'>]              |\n| key_size                            | 2048         | [<class 'int'>]               |\n| listen_host                         | 0.0.0.0      | [<class 'str'>]               |\n| listen_port                         | 8080         | [<class 'int'>]               |\n| map_local                           | []           | [typing.Sequence[str]]        |\n| map_remote                          | []           | [typing.Sequence[str]]        |\n| mode                                | regular      | [<class 'str'>]               |\n| modify_body                         | []           | [typing.Sequence[str]]        |\n| modify_headers                      | []           | [typing.Sequence[str]]        |\n| onboarding                          | True         | [<class 'bool'>]              |\n| onboarding_host                     | mitm.it      | [<class 'str'>]               |\n| onboarding_port                     | 80           | [<class 'int'>]               |\n| proxyauth                           | None         | [typing.Union[str, NoneType]] |\n| rawtcp                              | False        | [<class 'bool'>]              |\n| readfile_filter                     | None         | [typing.Union[str, NoneType]] |\n| rfile                               | None         | [typing.Union[str, NoneType]] |\n| save_stream_file                    | None         | [typing.Union[str, NoneType]] |\n| save_stream_filter                  | None         | [typing.Union[str, NoneType]] |\n| scripts                             | []           | [typing.Sequence[str]]        |\n| server                              | True         | [<class 'bool'>]              |\n| server_replay                       | []           | [typing.Sequence[str]]        |\n| server_replay_ignore_content        | False        | [<class 'bool'>]              |\n| server_replay_ignore_host           | False        | [<class 'bool'>]              |\n| server_replay_ignore_params         | []           | [typing.Sequence[str]]        |\n| server_replay_ignore_payload_params | []           | [typing.Sequence[str]]        |\n| server_replay_ignore_port           | False        | [<class 'bool'>]              |\n| server_replay_kill_extra            | False        | [<class 'bool'>]              |\n| server_replay_nopop                 | False        | [<class 'bool'>]              |\n| server_replay_refresh               | True         | [<class 'bool'>]              |\n| server_replay_use_headers           | []           | [typing.Sequence[str]]        |\n| showhost                            | False        | [<class 'bool'>]              |\n| show_clientconnect_log              | False        | [<class 'bool'>]              |\n| spoof_source_address                | False        | [<class 'bool'>]              |\n| ssl_insecure                        | False        | [<class 'bool'>]              |\n| ssl_verify_upstream_trusted_ca      | None         | [typing.Union[str, NoneType]] |\n| ssl_verify_upstream_trusted_confdir | None         | [typing.Union[str, NoneType]] |\n| ssl_version_client                  | secure       | [<class 'str'>]               |\n| ssl_version_server                  | secure       | [<class 'str'>]               |\n| stickyauth                          | None         | [typing.Union[str, NoneType]] |\n| stickycookie                        | None         | [typing.Union[str, NoneType]] |\n| stream_large_bodies                 | None         | [typing.Union[str, NoneType]] |\n| stream_websockets                   | False        | [<class 'bool'>]              |\n| tcp_hosts                           | []           | [typing.Sequence[str]]        |\n| termlog_verbosity                   | info         | [<class 'str'>]               |\n| upstream_auth                       | None         | [typing.Union[str, NoneType]] |\n| upstream_bind_address               |              | [<class 'str'>]               |\n| upstream_cert                       | True         | [<class 'bool'>]              |\n| websocket                           | True         | [<class 'bool'>]              |\n\n\n### 参数作用 (参考对应的命令行参数帮助)\n```bash\nusage: mitmdump [options] [filter]\n\npositional arguments:\n  filter_args           Filter expression, equivalent to setting both the\n                        view_filter and save_stream_filter options.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show version number and exit\n  --options             Show all options and their default values\n  --commands            Show all commands and their signatures\n  --set option[=value]  Set an option. When the value is omitted, booleans are\n                        set to true, strings and integers are set to None (if\n                        permitted), and sequences are emptied. Boolean values\n                        can be true, false or toggle.\n  -q, --quiet           Quiet.\n  -v, --verbose         Increase log verbosity.\n  --mode MODE, -m MODE  Mode can be \"regular\", \"transparent\", \"socks5\",\n                        \"reverse:SPEC\", or \"upstream:SPEC\". For reverse and\n                        upstream proxy modes, SPEC is host specification in\n                        the form of \"http[s]://host[:port]\".\n  --no-anticache\n  --anticache           Strip out request headers that might cause the server\n                        to return 304-not-modified.\n  --no-showhost\n  --showhost            Use the Host header to construct URLs for display.\n  --rfile PATH, -r PATH\n                        Read flows from file.\n  --scripts SCRIPT, -s SCRIPT\n                        Execute a script. May be passed multiple times.\n  --stickycookie FILTER\n                        Set sticky cookie filter. Matched against requests.\n  --stickyauth FILTER   Set sticky auth filter. Matched against requests.\n  --save-stream-file PATH, -w PATH\n                        Stream flows to file as they arrive. Prefix path with\n                        + to append.\n  --no-anticomp\n  --anticomp            Try to convince servers to send us un-compressed data.\n  --flow-detail LEVEL   The display detail level for flows in mitmdump: 0\n                        (almost quiet) to 3 (very verbose). 0: shortened\n                        request URL, response status code, WebSocket and TCP\n                        message notifications. 1: full request URL with\n                        response status code 2: 1 + HTTP headers 3: 2 + full\n                        response content, content of WebSocket and TCP\n                        messages.\n\nProxy Options:\n  --listen-host HOST    Address to bind proxy to.\n  --listen-port PORT, -p PORT\n                        Proxy service port.\n  --no-server, -n\n  --server              Start a proxy server. Enabled by default.\n  --ignore-hosts HOST   Ignore host and forward all traffic without processing\n                        it. In transparent mode, it is recommended to use an\n                        IP address (range), not the hostname. In regular mode,\n                        only SSL traffic is ignored and the hostname should be\n                        used. The supplied value is interpreted as a regular\n                        expression and matched on the ip or the hostname. May\n                        be passed multiple times.\n  --allow-hosts HOST    Opposite of --ignore-hosts. May be passed multiple\n                        times.\n  --tcp-hosts HOST      Generic TCP SSL proxy mode for all hosts that match\n                        the pattern. Similar to --ignore, but SSL connections\n                        are intercepted. The communication contents are\n                        printed to the log in verbose mode. May be passed\n                        multiple times.\n  --upstream-auth USER:PASS\n                        Add HTTP Basic authentication to upstream proxy and\n                        reverse proxy requests. Format: username:password.\n  --proxyauth SPEC      Require proxy authentication. Format: \"username:pass\",\n                        \"any\" to accept any user/pass combination, \"@path\" to\n                        use an Apache htpasswd file, or\n                        \"ldap[s]:url_server_ldap:dn_auth:password:dn_subtree\"\n                        for LDAP authentication.\n  --no-rawtcp\n  --rawtcp              Enable/disable experimental raw TCP support. TCP\n                        connections starting with non-ascii bytes are treated\n                        as if they would match tcp_hosts. The heuristic is\n                        very rough, use with caution. Disabled by default.\n  --no-http2\n  --http2               Enable/disable HTTP/2 support. HTTP/2 support is\n                        enabled by default.\n\nSSL:\n  --certs SPEC          SSL certificates of the form \"[domain=]path\". The\n                        domain may include a wildcard, and is equal to \"*\" if\n                        not specified. The file at path is a certificate in\n                        PEM format. If a private key is included in the PEM,\n                        it is used, else the default key in the conf dir is\n                        used. The PEM file should contain the full certificate\n                        chain, with the leaf certificate as the first entry.\n                        May be passed multiple times.\n  --no-ssl-insecure\n  --ssl-insecure, -k    Do not verify upstream server SSL/TLS certificates.\n  --key-size KEY_SIZE   TLS key size for certificates and CA.\n\nClient Replay:\n  --client-replay PATH, -C PATH\n                        Replay client requests from a saved file. May be\n                        passed multiple times.\n\nServer Replay:\n  --server-replay PATH, -S PATH\n                        Replay server responses from a saved file. May be\n                        passed multiple times.\n  --no-server-replay-kill-extra\n  --server-replay-kill-extra\n                        Kill extra requests during replay.\n  --no-server-replay-nopop\n  --server-replay-nopop\n                        Don't remove flows from server replay state after use.\n                        This makes it possible to replay same response\n                        multiple times.\n  --no-server-replay-refresh\n  --server-replay-refresh\n                        Refresh server replay responses by adjusting date,\n                        expires and last-modified headers, as well as\n                        adjusting cookie expiration.\n\nMap Remote:\n  --map-remote PATTERN, -M PATTERN\n                        Map remote resources to another remote URL using a\n                        pattern of the form \"[/flow-filter]/url-\n                        regex/replacement\", where the separator can be any\n                        character. May be passed multiple times.\n\nMap Local:\n  --map-local PATTERN   Map remote resources to a local file using a pattern\n                        of the form \"[/flow-filter]/url-regex/file-or-\n                        directory-path\", where the separator can be any\n                        character. May be passed multiple times.\n\nModify Body:\n  --modify-body PATTERN, -B PATTERN\n                        Replacement pattern of the form \"[/flow-\n                        filter]/regex/[@]replacement\", where the separator can\n                        be any character. The @ allows to provide a file path\n                        that is used to read the replacement string. May be\n                        passed multiple times.\n\nModify Headers:\n  --modify-headers PATTERN, -H PATTERN\n                        Header modify pattern of the form \"[/flow-\n                        filter]/header-name/[@]header-value\", where the\n                        separator can be any character. The @ allows to\n                        provide a file path that is used to read the header\n                        value string. An empty header-value removes existing\n                        header-name headers. May be passed multiple times.\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mocobk/mitmdump",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mitmdump",
    "package_url": "https://pypi.org/project/mitmdump/",
    "platform": "",
    "project_url": "https://pypi.org/project/mitmdump/",
    "project_urls": {
      "Homepage": "https://github.com/mocobk/mitmdump"
    },
    "release_url": "https://pypi.org/project/mitmdump/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "以编程的方式运行 mitmproxy",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7966005,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23a7f0a9e19d3336b2f20408f796d9fccbd40097af375e7667afe9566e0a8e3f",
        "md5": "90c8503662445f2f526f6b368750ed8c",
        "sha256": "be21d2c5504270af7ea0e1640ec5fce0521309ba7745622e71cd2bbf8508971c"
      },
      "downloads": -1,
      "filename": "mitmdump-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "90c8503662445f2f526f6b368750ed8c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9219,
      "upload_time": "2020-08-14T08:26:05",
      "upload_time_iso_8601": "2020-08-14T08:26:05.801525Z",
      "url": "https://files.pythonhosted.org/packages/23/a7/f0a9e19d3336b2f20408f796d9fccbd40097af375e7667afe9566e0a8e3f/mitmdump-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}