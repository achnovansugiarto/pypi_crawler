{
  "info": {
    "author": "",
    "author_email": "\"Liam H. Childs\" <liam.h.childs@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "![](https://github.com/childsish/dynamic-yaml/workflows/Project%20Tests/badge.svg)\n\ndynamic-yaml\n============\n\nDynamic YAML is a couple of classes and functions that add extra functionality to YAML that turns it into a great configuration language for Python. If you prefer JSON, then see [dynamic-json][dynamic-json].\n\nYAML already provides:\n\n* A very readable and clean syntax\n* Infinitely nestable key:value pairs\n* Sequence types\n* A regulated portable syntax that conforms to strict standards\n\nIn addition, the PyYAML parser provides:\n\n* Automatic type identification (a result of implementing the YAML standard)\n\nFinally, the classes introduced by Dynamic YAML enable:\n\n* Dynamic string resolution\n\nDynamic PyYAML requires PyYAML (https://bitbucket.org/xi/pyyaml).\n\nUsage\n-----\n\nThe key feature that was introduced is the ability for a string scalar to reference other parts of the configuration tree.\nThis is done using the Python string formatting syntax.\nThe characters '{' and '}' enclose a reference to another entry in the configuration structure.\nThe reference takes the form key1.key2 where key1 maps to another mapping object and can be found in the root mapping, and key2 can be found in key1's mapping object.\nMultiple levels of nesting can be used (eg. key1.key2.key3 etc...).\nIf you need brace literals, they can be escaped by doubling them up, as described by the Python format string [documentation](https://docs.python.org/3/library/string.html#formatstrings). \n\nAn example yaml configuration:\n```yaml\nproject_name: hello-world\ndirs:\n    home: /home/user\n    venv: \"{dirs.home}/venvs/{project_name}\"\n    bin: \"{dirs.venv}/bin\"\n    data: \"{dirs.venv}/data\"\n    errors: \"{dirs.data}/errors\"\n    sessions: \"{dirs.data}/sessions\"\n    databases: \"{dirs.data}/databases\"\n    output: \"{dirs.data}/output-{parameters.parameter1}-{parameters.parameter2}\"\nexes:\n    main: \"{dirs.bin}/main\"\n    test: tests\nparameters:\n    parameter1: a\n    parameter2: b\n```\n\nReading in a yaml file:\n\n```python\nimport dynamic_yaml\n\nwith open('/path/to/file.yaml') as fileobj:\n    cfg = dynamic_yaml.load(fileobj)\n    assert cfg.dirs.venv == '/home/user/venvs/hello-world'\n    assert cfg.dirs.output == '/home/user/venvs/hello-world/data/output-a-b'\n```\n\nAs the variables are dynamically resolved, it is also possible to combine this with `argparse`:\n\n```python\nimport dynamic_yaml\n\nfrom argparse import ArgumentParser\n\nwith open('/path/to/file.yaml') as fileobj:\n    cfg = dynamic_yaml.load(fileobj)\n    parser = ArgumentParser()\n    parser.add_argument('--parameter1')\n    parser.add_argument('--parameter2')\n    parser.parse_args('--parameter1 c --parameter2 d'.split(), namespace=cfg.parameters)\n    assert cfg.dirs.output == '/home/user/venvs/hello-world/data/output-c-d'\n```\n\nWriting yaml will resolve all references:\n\n```python\nimport dynamic_yaml\nimport yaml\n\nwith open('/path/to/file.yaml') as fileobj:\n    cfg = dynamic_yaml.load(fileobj)\n    assert yaml.safe_load(dynamic_yaml.dump(cfg)) == yaml.safe_load('''\nproject_name: hello-world\ndirs:\n    home: /home/user\n    venv: /home/user/venvs/hello-world\n    bin: /home/user/venvs/hello-world/bin\n    data: /home/user/venvs/hello-world/data\n    errors: /home/user/venvs/hello-world/data/errors\n    sessions: /home/user/venvs/hello-world/data/sessions\n    databases: /home/user/venvs/hello-world/data/databases\n    output: /home/user/venvs/hello-world/data/output-a-b}\nexes:\n    main: /home/user/venvs/hello-world/bin/main\n    test: tests\nparameters:\n  - 0.5\n  - 0.1\n''')\n```\n\nInstallation\n------------\n\nTo install, simply run:\n\n```bash\npip install dynamic-yaml\n```\n\nRestrictions\n------------\n\nDue to the short amount of time I was willing to spend on working upon this, there are a few restrictions that I could not overcome.\n\n* **Wild card strings must be surrounded by quotes.**\nBraces ('{' and '}') in a YAML file usually enclose a mapping object.\nHowever, braces are also used by the Python string formatting syntax to enclose a reference.\nAs there is no way to change either of these easily, strings that look like a yaml mapping must be explicitly declared using single or double quotes to enclose them.\nFor example:\n  ```yaml\n  quotes_needed: '{variable}'\n  ```\n* **Certain keys can only be used via `__getitem__` and not `__getattr__`.**\nBecause `dict` comes with it's own set of attributes that are always resolved first, the values for the following keys must be gotten using the item getter rather than the attribute getter (eg. config['items'] vs. config.items):\n  * append\n  * extend\n  * insert\n  * remove\n  * pop\n  * clear\n  * index\n  * count\n  * sort\n  * reverse\n  * copy \n\n[dynamic-json]: https://github.com/childsish/dynamic-json\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "yaml,configuration",
    "license": "MIT License Copyright (c) 2022 Liam H. Childs Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynamic-yaml",
    "package_url": "https://pypi.org/project/dynamic-yaml/",
    "platform": null,
    "project_url": "https://pypi.org/project/dynamic-yaml/",
    "project_urls": {
      "Homepage": "https://github.com/childsish/dynamic-yaml"
    },
    "release_url": "https://pypi.org/project/dynamic-yaml/1.3.3/",
    "requires_dist": [
      "pyyaml (>=5.4)"
    ],
    "requires_python": ">=3.0",
    "summary": "Enables self referential yaml entries",
    "version": "1.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15465735,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2ce46064ad2787b690d1046ac0936ac7af4696f056395ba286f7054fce1b30e",
        "md5": "dbf408e692cdc94ec015d2f82d45c579",
        "sha256": "0956b5ecbddb9787b56dae4938ae4689cf2ca5065203b41b5c2fad4f597c8351"
      },
      "downloads": -1,
      "filename": "dynamic_yaml-1.3.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dbf408e692cdc94ec015d2f82d45c579",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 6222,
      "upload_time": "2022-10-19T21:01:42",
      "upload_time_iso_8601": "2022-10-19T21:01:42.604349Z",
      "url": "https://files.pythonhosted.org/packages/f2/ce/46064ad2787b690d1046ac0936ac7af4696f056395ba286f7054fce1b30e/dynamic_yaml-1.3.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e504504031311a115e3f39795f448f092965f364b866968fb0cbe4a43e69073d",
        "md5": "f802677be81407fc21f8064ec7d0b228",
        "sha256": "119d09c11470669951023ba07d074c0d957006f9d0989fdbe9a0688afdbd0866"
      },
      "downloads": -1,
      "filename": "dynamic-yaml-1.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f802677be81407fc21f8064ec7d0b228",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 5241,
      "upload_time": "2022-10-19T21:01:44",
      "upload_time_iso_8601": "2022-10-19T21:01:44.387828Z",
      "url": "https://files.pythonhosted.org/packages/e5/04/504031311a115e3f39795f448f092965f364b866968fb0cbe4a43e69073d/dynamic-yaml-1.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}