{
  "info": {
    "author": "Guillaume Pousseo",
    "author_email": "guillaumepousseo@revsquare.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "#####\nGipsy\n#####\n\nSet of libraries used for the gipsy project.\n\nCompatibility:\n\n* gipsy 2.0 supports Django >= 1.10\n* gipsy 1.4 supports Django 1.6 to 1.8\n\n*******\nInstall\n*******\n\nIt is strongly recommanded to install this theme from GIT with PIP onto you project virtualenv.\n\nFrom PyPi\n\n.. code-block::  shell-session\n\n    pip install django-gipsy\n\nFrom Github\n\n.. code-block::  shell-session\n\n    https://github.com/RevSquare/gipsy#egg=gipsy\n\n\n*************\nGISPY TOOLBAR\n*************\n\nThis Django app manages a toolbar for admins with shortcuts to easily navigate to most relevant admin features.\n\nsetup\n=====\n\nSimply add the app in your installed apps list in settings.py\n\n.. code-block::  python\n\n    INSTALLED_APPS = (\n        ...\n        'gipsy.toolbar'\n        ...\n    )\n\nMake sure you have 'django.core.context_processors.request' added to your TEMPLATES context_processors.\n\n.. code-block::  python\n\n    TEMPLATES = [\n        {\n            ...\n            'OPTIONS': {\n                'context_processors': [\n                    ...\n                    'django.template.context_processors.request',\n                    ...\n                ],\n            },\n        },\n    ]\n\nThen install your model with\n\n.. code-block::  shell\n\n    python manage.py migrate\n\n\nSetup your menu items in the admin.\n\nAnd finaly, install the toolbar in your templates with a template tag:\n\n.. code-block::  html\n\n    {% load gipsy_toolbar %}\n\n    {% gipsy_toolbar %}\n\nFor the admin part, you will need to overwrite templates with the same code as above: {templates}/admin/base.html\n\nIf you are using a cache engine such as Varnish, you can use a bundled middleware in order to set a cookie that you can use to deactivate cache to display the toolkbar for staff admins. Happy to hear abotu a cleaner solution.\n\n.. code-block::  python\n\n    MIDDLEWARE_CLASSES = (\n        ...\n        'gipsy.toolbar.middleware.GipsyToolbarMiddleware',\n        ...\n    )\n\n\n***************\nGISPY DASHBOARD\n***************\n\nThis Django app adds tons of cool features in the django admin. For now it works only with grappelli, so make sure you have it installed.\n\nsetup\n=====\n\nSimply add the app in your installed apps list in settings.py.\n\nIMPORTANT! You need to install it BEFORE any other admin library such as grappelli or django admin.\n\n.. code-block::  python\n\n    INSTALLED_APPS = (\n        'gipsy.dashboard',\n        ...\n        'grappelli',\n        ...\n        'django.contrib.admin',\n    )\n\nThen install your model with\n\n.. code-block::  shell\n\n    python manage.py migrate\n\n\nMenu items\n==========\n\nSetup your menu items in the admin. Each menu entry have parent and children. You can add icons to the parents by using font awesome classes: http://fortawesome.github.io/Font-Awesome/\n\nUrls\n====\n\nBy default Gipsy Dashboard overrides the admin urls to display the dashboard as the default admin homepage. It still keeps the default index of django or grappelli by hosts this page on a different url: 'admin:all_tables'\n\nTo do so, Gipsy Dashboard overrides the django.contrib.admin.sites.AdminSite. If you are using your own AdminSite class, you can inherit it from the gispy.dashboard.admin.GipsyAdminSite. You can also remove this behaviour by using the following constant in your settings:\n\n.. code-block::  python\n\n    GIPSY_ENABLE_ADMINSITE = False\n\nYou will then need to use your own url redirections and settings.\n\nAdditionnaly you can define in the settings the url pattern you want to use for each of those pages:\n\n.. code-block::  python\n\n    GIPSY_DASHBOARD_URL = 'admin:index'\n    GIPSY_VANILLA_INDEX_URL = 'admin:all_apps'\n\nWidgets\n=======\n\nThe philosophy behind the widget is flexibility. Gipsy Dashboard integrate a set of pre-written template tags. You can include those template tags by overwriting the gipsy.dashboard.templates.dashboard.html file.\n\nThen feel free to add you own widgets by copying the html of each templatetags. Or you can use existing templatetags and fill them with appropriate objects.\n\n\nThemes\n======\n\nYou can add your own stylesheet theme file to the admin by using the GIPSY_THEME constant in your settings.py.\n\nBy default the theme is from grappelli. However it doesnt match the toolbar and left menu well. A more accurate theme is available but still under developpment so it might have some unstabilities. You can still use it by adding this command line in your settings.py:\n\n.. code-block::  python\n\n    GIPSY_THEME = STATIC_URL + 'gipsy_dashboard/css/gipsy.css'\n\nDashboard\n=========\n\nThe dashboard system is greatly inspired from the awesome Grappelli library. In order to setup your dashboard, you will need to create a setting class and let your django settings know about it by setting up the settings.GIPSY_DASHBOARD constant.\n\nFor example:\n\n.. code-block::  python\n\n    GIPSY_DASHBOARD = 'gipsy.dashboard.presets.default.DashboardDefault'\n\nIn your class you will just need to create a render method and declare each element of it by appending its widgets property list. You can find exemple of widgets in:\n\n* gipsy.dashboard.widgets.widgets\n* gipsy.dashboard.widgets.widgets_google_analytics\n\nFor information you can find exemple of implementation of this class in:\n\n* gipsy.dashboard.presets.defaut\n* gipsy.dashboard.presets.google_analytics\n\nAn exemple of implementing this class would be:\n\n.. code-block::  python\n\n    from gipsy.dashboard.dashboard import Dashboard\n    from gipsy.dashboard.widgets import widgets, widgets_google_analytics\n\n\n    class DashboardDefault(Dashboard):\n        def render(self):\n            # metrics evolution\n            self.widgets.append(widgets_google_analytics.WidgetGAPageViewsEvolution())\n\n            # metrics evolution\n            self.widgets.append(widgets_google_analytics.WidgetGASessionsEvolution())\n\n            # metrics single\n            self.widgets.append(widgets.WidgetMetricsSingle(\n                title='currently active users',\n                label='active users',\n                count=2564,\n            ))\n\n            # line chart\n            self.widgets.append(widgets_google_analytics.WidgetGALineChart())\n\n            # metrics list\n            self.widgets.append(widgets.WidgetMetricsList(items=[\n                {'icon': 'fa-file-image-o', 'label': 'posts', 'value': 75},\n                {'icon': 'fa-comment-o', 'label': 'comments', 'value': 192},\n                {'icon': 'fa-files-o', 'label': 'pages', 'value': 12},\n                {'icon': 'fa-flag-o', 'label': 'in moderation', 'value': 4},\n            ]))\n\n            # model list\n            self.widgets.append(widgets.WidgetModelList(items={}))\n\n            # admin logs\n            self.widgets.append(widgets.WidgetAdminLog())\n\nYou can very easily add google analytics to your dashboard by using the widgets stored in gipsy.dashboard.widgets.widgets_google_analytics\nMost of the difficulty will be to integrate the API credentials. In order to do so, you will need to follow the steps described in the google API tutorial https://developers.google.com/analytics/solutions/articles/hello-analytics-api#environment. There is also a very nice tutorial here: http://blog.iambob.me/accessing-google-analytics-from-django/\n\nOnce you have completed those steps, you will need to add setup the following constants in your settings:\n\n.. code-block::  python\n\n    GOOGLE_ANALYTICS_CREDENTIAL_TYPE = \"oauth2_client_id\"  # default value if it's not defined (it is optional to define)\n    GOOGLE_ANALYTICS_TOKEN_FILE_NAME = \"path/to/your/analytics.dat\"\n    GOOGLE_ANALYTICS_CLIENT_SECRETS = \"path/to/your/client_secret.json\"\n    GOOGLE_ANALYTICS_VIEW_ID = \"your_view_id\"\n\nor\n\n.. code-block::  python\n\n    GOOGLE_ANALYTICS_CREDENTIAL_TYPE = \"service_account\"\n    GOOGLE_ANALYTICS_PRIVATE_KEY_FILE_NAME = \"path/to/privatekey.p12/or/privatekey.pem\"\n    GOOGLE_ANALYTICS_CLIENT_EMAIL = \"your-email-address@developer.gserviceaccount.com\"\n    GOOGLE_ANALYTICS_VIEW_ID = \"your_view_id\"\n\nIf you will choose \"service_account\" credential type, don't forget to add your client email \"your-email-address@developer.gserviceaccount.com\" to Google Analytics. See more here: http://stackoverflow.com/questions/12837748/analytics-google-api-error-403-user-does-not-have-any-google-analytics-account\n\nI recommand to start by using the shell to gain the access and generate the analytics.dat file.\n\n.. code-block::  shell\n\n    python manage.py shell\n\nThen\n\n.. code-block::  shell\n\n    from gipsy.dashboard.services.google_analytics_connector import GoogleAnalyticsConnector\n    GoogleAnalyticsConnector().start_service().query(start_date='2015-01-01', end_date='2015-01-01', metrics='ga:pageviews').execute()\n\nYou should be prompted with a link to go to to grant the access. By going on the link with your browser you will get a key to enter in the shell.\n\nPlease note that for performances purpose the default dashboard template is cached to 5 minutes. You can change the cache time through the settings.GIPSY_DASHBOARD_CACHE_TIME constant.\n\n\nVersion indicator\n=================\n\n\nSometimes version information is be very useful. When knowing current version you are able to tell in ticket on which version bug appears. Also it will be easy to check if this is regression (bug reapeared on present version, is not reproductible on prod which has different version).\n\n.. code-block::  python\n\n    GIPSY_VERSION_INDICATOR = ('<version display info>', '<version hover info>')\n\n.. code-block::  python\n\n    GIPSY_VERSION_INDICATOR = ('v1.0', 'fdb25bb85bdd047689d5845bbc15cdac94d3c9de').\n\nYou can setup this value by any method you want, you might want to populate it automatically during deploy or get it from file or git or hg.\n\nFor example:\n\n.. code-block::  python\n\n    GIPSY_VERSION_INDICATOR = open('path/to/version.txt').read().rsplit(',', 1)\n\nor:\n\n.. code-block::  python\n\n    def get_git_version():\n        import subprocess\n\n        def call(cmd):\n            return subprocess.Popen(cmd, stdout=subprocess.PIPE, cwd=BASE_DIR).communicate()[0]\n\n        describe = call(['git', 'describe'])\n        branch = call(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])\n        sha = call(['git', 'rev-parse', '--short', 'HEAD'])\n        if branch.strip() == 'master':\n            return describe, sha\n        return branch, describe\n\n    GIPSY_VERSION_INDICATOR = get_git_version()\n\nYou can choose indicator position by specifying `GIPSY_VERSION_INDICATOR_LOCATION`. Choices are `'nav'`, `'menu'`. By default its `'nav'`.\n\nExample:\n\n.. code-block::  python\n\n    GIPSY_VERSION_INDICATOR_LOCATION = 'nav'\n\n\n************\nContribution\n************\n\n\nPlease feel free to contribute. Any help and advices are much appreciated.\n\n\n*****\nLINKS\n*****\n\nDevelopment:\n    https://github.com/RevSquare/gipsy\n\nPackage:\n    https://pypi.python.org/pypi/django-gipsy",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.revsquare.com",
    "keywords": null,
    "license": "BSD License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-gipsy",
    "package_url": "https://pypi.org/project/django-gipsy/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/django-gipsy/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://www.revsquare.com"
    },
    "release_url": "https://pypi.org/project/django-gipsy/2.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A set of fancy tools for django.",
    "version": "2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3218098,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c07f6a0fed21f0e94064fa39f8f7209db28e13dd8c5cf6984348ee8306ce9c4b",
        "md5": "62529805dd7e18b047b03245c1cb0fa3",
        "sha256": "78ff931b27bd7214173a187389a80518db4f3e0f9135e6322196df120ed11100"
      },
      "downloads": -1,
      "filename": "django-gipsy-2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "62529805dd7e18b047b03245c1cb0fa3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 705101,
      "upload_time": "2016-12-12T14:35:12",
      "upload_time_iso_8601": "2016-12-12T14:35:12.667304Z",
      "url": "https://files.pythonhosted.org/packages/c0/7f/6a0fed21f0e94064fa39f8f7209db28e13dd8c5cf6984348ee8306ce9c4b/django-gipsy-2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}