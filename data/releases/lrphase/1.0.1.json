{
  "info": {
    "author": "Greg Farnum",
    "author_email": "gregfar@umich.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Documentation",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Version Control :: Git"
    ],
    "description": "# LRphase\n## A tool for phasing long-read sequencing results.\n\nLRphase phases long reads based on haplotype data in a VCF file.\n\n\n## Dependencies\n### All modes:\n* HTSlib (https://www.htslib.org/)\n* Python >= v3.7\n* minimap2  (https://github.com/lh3/minimap2)\n* numpy (https://numpy.org/)\n* powerlaw (https://github.com/jeffalstott/powerlaw)\n* pysam (https://github.com/pysam-developers/pysam)\n* pyliftover (https://github.com/konstantint/pyliftover)\n\n### Simulation mode\n* pbsim2 (https://github.com/yukiteruono/pbsim2)\n\n\n## Installation\n\nWe strongly recommend installing with conda, into a new environment:\n```\nconda create -n LRphase_env -c conda-forge -c bioconda numpy pysam powerlaw pyliftover pbsim2 minimap2 LRphase\n```\n\nInstall with pip:\n```\npip install LRphase\n```\n\nInstallation from the github repository is not recommended. However, if you must, follow the steps below:\n1) git clone https://github.com/Boyle-Lab/LRphase.git\n2) cd LRphase/\n3) python3.7 -m pip install -e .\n\n\n## Usage\n\n```\nLRphase [-h] [--version] [-q] {phasing,phasability,error_analysis} ...\n```\n\nLRphase currently only runs in Phasing mode, but may also support more modes in future releases.\n1) Phasing mode: Assigns phase to individual long reads based on variants in a VCF file.\n\n### Phasing Mode\nTool for phasing individual long reads using haplotype information.\n\n```\nusage: LRphase phasing [-h] -v <VCF_FILE> -i <SAM/BAM/FASTQ>\n                       [-o </path/to/output>] [-r <REF_FASTA>]\n                       [-A <ASSEMBLY_NAME>] [-t <THREADS>] [-q] [-S]\n                       [-O {combined,phase_tagged,full}] [-F FDR_THRESHOLD]\n                       [--sequencing_error_model {0,1,2}]\n                       [--log_likelihood_threshold <MIN_LIKELIHOOD_RATIO>]\n```\n\n#### Required Arguments\n| Argument | Description |\n|---|---|\n| __-v <VCF_FILE>, --vcf <VCF_FILE>__ | Path to vcf file with haplotype information that will be used for phasing. (Must be in .vcf.gz format with tabix index in same folder. If .vcf file is provided, bgzip and tabix must be installed and available on PATH because LRphase will attempt to convert it. |\n| __-i <SAM/BAM/FASTQ>__ | Path to sequencing file (.fasta) or alignment file (.bam or .sam) of long reads that will be used for phasing. If either a .sam file is provided or an index is not found, .sam and .bam file will be sorted and indexed with SAMtools. Sorted.bam files should be in same directory as their index (.sorted.bam.bai). **** NOTE: the -r/--reference argument is REQUIRED if using input in fastq format! ****|\n\n#### Optional Arguments\n| Argument | Description |\n|---|---|\n| __-h, --help__ | Show help message and exit |\n| __-o </path/to/output>, --output_directory_name </path/to/output_directory>__ | Output directory name. Name given to directory where results will be output. |\n| __-r <REF_FASTA>, --reference <REF_FASTA>__ | Path to reference genome sequence file. REQUIRED if argument to -i a fastq file. |\n| __-A <ASSEMBLY_NAME>, --reference_assembly <ASSEMBLY_NAME>__ | Assembly for the reference genome. EX: -A hg38. |\n| __-t <THREADS>, --threads <THREADS>__ | Number of threads to use for mapping, sorting, and indexing steps. |\n| __-O {combined,phase_tagged,full}, --output_mode {combined,phase_tagged,full}__ | Specify whether/how phased, unphased, and nonphasable reads are printed to output. Modes available: combined: All reads will be written to a common output file. The phasing tag (HP:i:N) can be used to extract maternal/paternal phased reads, unphased reads, and nonphasable reads. phase_tagged: Phased reads for both maternal and paternal phases will be written to a single output file, while unphased and nonphasable reads will be written to their own respective output files. full: Maternal, paternal, unphased, and nonphasable reads will be printed to separate output files. |\n| __--sequencing_error_model {0,1,2}__ | Choose how to estimate sequencing error rates: 0: (default) Estimate per-base error rate as an average per read. 1: estimate per-base error rate locally around each het site. 2: Calculate per-base error rate using base quality scores WARNING: do not use option 2 unless you are sure that the basecaller reported actual error rates). |\n| __--log_likelihood_threshold <LOG_LIKELIHOOD_THRESHOLD>__ | Use a hard threshold on log-likelihood ratios when choosing the best phasing for each read. Only reads with log-likelihood ratios equal to or greater than this threshold will be assigned to a phase. |\n| __-F FDR_THRESHOLD, --FDR_threshold FDR_THRESHOLD__ | Control the false discovery rate at the given value using a negative-binomial estimate of the number of phasing errors (N) given the average per-base sequencing error rate observed among all phaseable reads. Phased reads are sorted by their observed log-likelihood ratios and the bottom N*(1-FDR) reads will be reassigned to the \"Unphased\" set. Setting this to zero or a negative value will skip this step. |\n| __-q, --quiet__ | Output to stderr from subprocesses will be muted. |\n| __-S, --silent__ | Output to stderr and stdout from subprocesses will be muted. |\n\n## Example Dataset\nWe provide a sample dataset and example usage [here](https://github.com/Boyle-Lab/LRphase/tree/main/example_data)\n\n## Citing LRphase\nThe LRphase algorithm and software release 1.0.0 are described in [pub link here](https://example.com). Please use the following citation if you use this software in your work:\n\nLRphase: an efficient algorithm for assigning haplotypic identity to long reads.\nMonica J. Holmes, Babak Mahjour, Christopher Castro, Gregory A. Farnum, Adam G. Diehl, Alan P. Boyle.\n2022. BioArxiv. [URL](http://example.com)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Boyle-Lab/LRphase.git",
    "keywords": "long-reads,phasing,haplotype",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LRphase",
    "package_url": "https://pypi.org/project/LRphase/",
    "platform": null,
    "project_url": "https://pypi.org/project/LRphase/",
    "project_urls": {
      "Homepage": "https://github.com/Boyle-Lab/LRphase.git",
      "Issue Tracker": "https://github.com/Boyle-Lab/LRphase/issues"
    },
    "release_url": "https://pypi.org/project/LRphase/1.0.1/",
    "requires_dist": [
      "pysam (>=0.16.0.1)",
      "biopython (>=1.78)",
      "pyliftover (>=0.4)",
      "powerlaw (>=1.4.6)",
      "numpy (>=1.20.1requests>=2.26.0)",
      "mappy ; extra == 'mappy'"
    ],
    "requires_python": ">=3.7",
    "summary": "Phasing individual long reads using known haplotype information.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16129743,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7dd41ae5eeb69f433e2eeab1f8dca75546e8e6e98032bb53b24aa3550772c4d0",
        "md5": "8931ae9ed554e71aeab569a07e6acad5",
        "sha256": "477edcd3b8976c81e08ea8fdc69541682c53aebcdfb42b577f44500422f75a1f"
      },
      "downloads": -1,
      "filename": "LRphase-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8931ae9ed554e71aeab569a07e6acad5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 56244,
      "upload_time": "2022-12-06T17:34:30",
      "upload_time_iso_8601": "2022-12-06T17:34:30.222848Z",
      "url": "https://files.pythonhosted.org/packages/7d/d4/1ae5eeb69f433e2eeab1f8dca75546e8e6e98032bb53b24aa3550772c4d0/LRphase-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3eecec61e7ef4b8b51f27aaa646c7d088db66f1669f54528afeb3568773e9e70",
        "md5": "396c5532587ec8cc4374b9f783d79821",
        "sha256": "fca5670b2d1913ccef3a7502e8d0ce1d03ca8a69652a488d18d1312d95cd7374"
      },
      "downloads": -1,
      "filename": "LRphase-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "396c5532587ec8cc4374b9f783d79821",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 57100,
      "upload_time": "2022-12-06T17:34:32",
      "upload_time_iso_8601": "2022-12-06T17:34:32.532719Z",
      "url": "https://files.pythonhosted.org/packages/3e/ec/ec61e7ef4b8b51f27aaa646c7d088db66f1669f54528afeb3568773e9e70/LRphase-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}