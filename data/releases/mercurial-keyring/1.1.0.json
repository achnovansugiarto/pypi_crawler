{
  "info": {
    "author": "Marcin Kasperski",
    "author_email": "Marcin.Kasperski@mekk.waw.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: DFSG approved",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Version Control"
    ],
    "description": ".. -*- mode: rst; compile-command: \"rst2html README.txt README.html\" -*-\n\n=======================================================\nMercurial Keyring\n=======================================================\n\nMercurial Keyring is a Mercurial_ extension used to securely save HTTP\nand SMTP authentication passwords in password databases (Gnome\nKeyring, KDE KWallet, OSXKeyChain, Windows Vault etc).\n\nWith ``mercurial_keyring`` active, Mercurial remembers your passwords\nand reuses them without prompting (as if you stored them in ``.hgrc``),\nbut password storage is reasonably secure.\n\nActual password storage is implemented by the keyring_ library, this \nextension glues it to Mercurial.\n\n.. contents::\n   :local:\n   :depth: 2\n\n.. sectnum::\n\n.. _keyring: http://pypi.python.org/pypi/keyring\n.. _Mercurial: http://mercurial.selenic.com\n\nHow does it work\n=======================================================\n\nOn your first pull or push to HTTP url (or first email sent via given\nSMTP server), you are prompted for the password, just like bare\nMercurial does. But the password you entered is saved to appropriate\npassword database. On successive runs, whenever the password is\nneeded, ``mercurial_keyring`` checks for password in password\ndatabase, and uses it without troubling you.\n\nIn case password turns out to be incorrect (for example, because you\nchanged it, or entered it incorrectly), ``mercurial_keyring`` prompts\nyou again, and overwrites the password.\n\nYou can use many passwords (for various remote urls).  Saved passwords\nare identified by pair of username and url prefix. See below for\ninformation how to configure those properly.\n\nInstallation\n=======================================================\n\nPrerequisites\n-------------\n\nThis extension requires keyring_ and `mercurial_extension_utils`_ to\nwork. In many cases both will be installed automatically while you\ninstall ``mercurial_keyring``, but you may need to control the process.\n\nThe keyring_ library can usually be installed by::\n\n    pip install --user keyring\n\n(or ``easy_install keyring``), but on some systems it is preferable to\nuse official distribution archive. For example, on Debian and Ubuntu,\nyou may install ``python-keyring`` and either ``python-keyring-gnome``\nor ``python-keyring-kwallet`` packages::\n\n    sudo apt-get install python-keyring python-keyring-gnome\n\n(this will save you the need to provide working compiler and various\ndevelopment libraries).\n\nThe `mercurial_extension_utils`_ module is tiny Python-only module,\nwhich can be installed by::\n\n    pip install --user mercurial_extension_utils\n\nbut in some cases (Windows…) require more care. See\n`mercurial_extension_utils`_ documentation.\n    \n\nExtension installation\n----------------------\n\nThere are two possible ways of installing the extension: using PyPi package,\nor using source clone.\n\nTo install as a package::\n\n    pip install --user mercurial_keyring\n\n(or ``sudo pip install mercurial_keyring`` for system-wide\ninstallation) and then enable it in ``~/.hgrc`` (or\n``/etc/mercurial/hgrc`` or ``Mercurial.ini``) using::\n\n    [extensions]\n    mercurial_keyring = \n\nTo install as source clone, install keyring_ according to instructions above, then\nclone::\n    \n    hg clone https://bitbucket.org/Mekk/mercurial_keyring/\n    hg clone https://bitbucket.org/Mekk/mercurial-extension_utils/\n\nand configure Mercurial by telling it full path to the extension\n(in )::\n\n    [extensions]\n    mercurial_keyring = /path/to/mercurial_keyring/mercurial_keyring.py\n\n.. _the code: \n.. _mercurial_keyring.py: http://bitbucket.org/Mekk/mercurial_keyring/src/tip/mercurial_keyring.py\n\nPassword backend configuration\n=======================================================\n\nThe library should usually pick the most appropriate password backend\nwithout configuration. Still, if necessary, it can be configured using\n``keyringrc.cfg`` file.  Refer to keyring_ docs for more details.\n\n.. note::\n\n   With current (as I write) keyring (5.6), this file is (on Linux)\n   located at ``~/.local/share/python_keyring/keyringrc.cfg`` and\n   it's example content look like::\n\n        [backend]\n        default-keyring=keyring.backends.Gnome.Keyring\n        # default-keyring=keyring.backends.kwallet.Keyring\n\n   For list of known backends run ``pydoc keyring.backends``.\n\n\n``hgrc`` configuration (HTTP)\n=======================================================\n\nMercurial Keyring uses standard Mercurial ``[auth]`` configuration to\ndetect your username (on given remote) and url prefix. You are\nstrongly advised to configure both.\n\nWithout the username ``mercurial_keyring`` can't save or restore\npasswords, so it disables itself.\n\nWithout url prefix ``mercurial_keyring`` works, but binds passwords to\nrepository urls. That means you will have to (re)enter password for\nevery repository cloned from given remote (and that there will be many\ncopies of this password in secure storage).\n\nRepository level configuration\n------------------------------------\n\nEdit repository-local ``.hg/hgrc`` and save there the remote\nrepository path and the username, but do not save the password. For\nexample:\n\n::\n\n    [paths]\n    myremote = https://my.server.com/hgrepo/someproject\n\n    [auth]\n    myremote.prefix = https://my.server.com/hgrepo\n    myremote.username = John\n\nSimpler form with url-embedded name can also be used:\n\n::\n\n    [paths]\n    bitbucket = https://John@my.server.com/hgrepo/someproject/\n\nbut is not recommended.\n\nNote that all repositories sharing the same ``prefix`` share the same\npassword.\n\nMercurial allows also for password in ``.hg/hgrc`` (either given by\n``«prefix».password``, or embedded in url). If such password is found,\nMercurial Keyring disables itself.\n\n\nAccount-level configuration\n---------------------------\n\nIf you are consistent about remote repository nicknames, you can\nconfigure the username in your `~/.hgrc` (`.hgrc` in your home\ndirectory). For example, write there::\n\n    [auth]\n    acme.prefix = hg.acme.com/repositories\n    acme.username = johnny\n    acme.schemes = http https\n    bitbucket.prefix = https://bitbucket.org\n    bitbucket.username = Mekk\n    mydep.prefix = https://dev.acmeorg.com\n    mydep.username = drmartin\n\nand as long as you will be using alias ``acme`` for repositories like\n``https://hg.acme.com/repositories/my_beautiful_app``, username\n``johnny`` will be used, and the same password reused. Similarly\nany ``hg push bitbucket`` will share the same password.\n\nWith such config repository-level ``.hg/hgrc`` need only contain\n``[paths]``.\n\nAdditional advantage of this method is that it works also during\n`clone`.\n\n\n.. note::\n\n   Mercurial Keyring works well with `Path Pattern`_. On my setup I use::\n\n       [path_pattern]\n       bitbucket.local = ~/devel/{below}\n       bitbucket.remote = https://bitbucket.org/Mekk/{below:/=-}\n \n   so all my repositories understand ``hg push bitbucket`` without\n   any repository-level configuration.\n\n\n``hgrc`` configuration (SMTP)\n=======================================================\n\nEdit either repository-local ``.hg/hgrc``, or ``~/.hgrc`` and set\nthere all standard email and smtp properties, including SMTP\nusername, but without SMTP password. For example:\n\n::\n\n    [email]\n    method = smtp\n    from = Joe Doe <Joe.Doe@remote.com>\n\n    [smtp]\n    host = smtp.gmail.com\n    port = 587\n    username = JoeDoe@gmail.com\n    tls = true\n\nJust as in case of HTTP, you *must* set username, but *must not* set\npassword here to use the extension, in other cases it will revert to\nthe default behavior.\n\nUsage\n======================================================\n\nSaving and restoring passwords\n-------------------------------------------------------\n\nConfigure the repository as above, then just ``hg pull``, ``hg push``,\netc.  You should be asked for the password only once (per every\nusername and remote repository prefix or url combination).\n\nSimilarly, for email, configure as above and just ``hg email``.\nAgain, you will be asked for the password once (per every username and\nemail server address combination).\n\nChecking password status (``hg keyring_check``)\n-------------------------------------------------------\n\nThe ``keyring_check`` command can be used to check whether/which\npassword(s) are saved. It can be used in three ways:\n\n- without parameters, it prints info related to all HTTP paths\n  defined for current repository (everything from ``hg paths``\n  that resolves to HTTP url)::\n\n    hg keyring_check\n\n- given alias as param, it prints info about this alias::\n\n    hg keyring_check work\n\n- finally, any path can be checked::\n\n    hg keyring_check https://bitbucket.org/Mekk/mercurial_keyring\n\nDeleting saved password (``hg keyring_clear``)\n-------------------------------------------------------\n\nThe ``keyring_clear`` command removes saved password related to given\npath. It can be used in two ways:\n\n- given alias as param, it drops password used by this alias::\n\n    hg keyring_clear work\n\n- given full path, it drops password related to this path::\n\n    hg keyring_clear https://bitbucket.org/Mekk/mercurial_keyring\n\nImplementation details\n=======================================================\n\nThe extension is monkey-patching the mercurial ``passwordmgr`` class\nto replace the ``find_user_password`` method. Detailed order of operations\nis described in the comments inside `the code`_.\n\nHistory\n=======================================================\n\nSee `HISTORY.txt`_.\n\nDevelopment\n=======================================================\n\nDevelopment is tracked on BitBucket, see \nhttp://bitbucket.org/Mekk/mercurial_keyring/\n\n\nAdditional notes\n=======================================================\n\nInformation about this extension is also available\non Mercurial Wiki: http://mercurial.selenic.com/wiki/KeyringExtension\n\nCheck also `other Mercurial extensions I wrote`_.\n\n.. _other Mercurial extensions I wrote: http://mekk.bitbucket.org/mercurial.html\n\n.. _HISTORY.txt: http://bitbucket.org/Mekk/mercurial_keyring/src/tip/HISTORY.txt\n.. _TortoiseHg: http://tortoisehg.bitbucket.org/\n.. _Mercurial: http://mercurial.selenic.com\n.. _mercurial_extension_utils: https://bitbucket.org/Mekk/mercurial-extension_utils/\n.. _Path Pattern: https://bitbucket.org/Mekk/mercurial-path_pattern/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/Mekk/mercurial_keyring",
    "keywords": "mercurial hg keyring password",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mercurial_keyring",
    "package_url": "https://pypi.org/project/mercurial_keyring/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mercurial_keyring/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://bitbucket.org/Mekk/mercurial_keyring"
    },
    "release_url": "https://pypi.org/project/mercurial_keyring/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Mercurial Keyring Extension",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13302264,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e16560372c3b30c37d12b5aca01c4b28ca27621eab153476c97d3a51dad9299",
        "md5": "6157869ee45b1166f34527cfd6484147",
        "sha256": "e4535639f55885e2374c7393e94848a6c3d72c416599e6a1dc8f9ee6b0c6ab79"
      },
      "downloads": -1,
      "filename": "mercurial_keyring-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6157869ee45b1166f34527cfd6484147",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19257,
      "upload_time": "2016-03-10T00:01:08",
      "upload_time_iso_8601": "2016-03-10T00:01:08.059403Z",
      "url": "https://files.pythonhosted.org/packages/8e/16/560372c3b30c37d12b5aca01c4b28ca27621eab153476c97d3a51dad9299/mercurial_keyring-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}