{
  "info": {
    "author": "Prince Nyeche",
    "author_email": "support@elfapp.website",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Mistyfy\nA package that helps encrypts any given string and returns an encrypted version of it.\n\n# How to use it\n```python\nfrom mistyfy import encode, decode, ciphers, generator\nimport os\n# ciphers is a dictionary containing ascii characters, you can change this at will\n# use the generator function to create your own unique cipher\ngn = generator(ciphers, -400, 138192812) # first arg is the cipher block, second & third arg is the start and stop counter\nsecret = b'somesecretkey' # create any secret key, easier if you use os.urandom(n)\n# secret = os.urandom(16)\na = \"This is a secret message or password\"\nb = encode(a, secret, gn) \n# output is a dictionary which contains a signed value when decrypting:\n# {'signature': b'02865b8419c0f4f541e2d31615d4f7c1', 'data': b'eyJtaXN0eWZ5IjogWzQ5Nxxxxxx...'}\nc = decode(b, secret, gn)\n# Output:\n# This is a secret message or password\n# Output: if the secret is wrong\n# Failure decrypting data\n```\n# Use cases\n* Safely store a password or token, validate that it is signed before it can be decoded.\n* Transmit a large set of strings encrypted with the smallest size possible.\n* Create your own `cipher block` and be the only one who can decrypt it.\n\nThere are other part of the script you can use. To easily create a password checking system use `signs` and `verify_signs` function, this takes a similar example given by python doc for hashlib but with the ability to add a secret.\n```python\nfrom mistyfy import signs, verify_signs\n\nuser = \"prince\"\nsecrets = b'someimportstuff'\npassword = b\"myverypassword\"\n\nencrypt_decrypt = signs(password, secret=secrets)\nprint(encrypt_decrypt)\n# b'cfe13a4eef4e9c9ccbedf4ec05873ed0'\n# verify takes into two arguments and 1 required keyword arg to compare if their hashes are the same\n# in this situation, the signed data and the actual outcome.                                                                                                                                                                                                  \nverify = verify_signs(password, encrypt_decrypt, secret=secrets)\nif verify is True:\n    print('User is valid')\nelse:\n    print('User is not valid')\n\n# Output\n# User is valid\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/princenyeche/secret-encrypt",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mistyfy",
    "package_url": "https://pypi.org/project/mistyfy/",
    "platform": "",
    "project_url": "https://pypi.org/project/mistyfy/",
    "project_urls": {
      "Homepage": "https://github.com/princenyeche/secret-encrypt"
    },
    "release_url": "https://pypi.org/project/mistyfy/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A package that helps encrypt any given string and returns an encrypted string with a signed hash.This data can be sent over the internet and only you will know how to decrypt it because you control the cipher.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14847529,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "742fd4679ce427a79b09a309405f790cfd55964249880bac813f057a3b09eb37",
        "md5": "859495782d11fa35d0a55c613f37d063",
        "sha256": "4783d166e220f25c13606a5cb35f5dc44efcc9857da6700e028ba5462c2b35e4"
      },
      "downloads": -1,
      "filename": "mistyfy-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "859495782d11fa35d0a55c613f37d063",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6051,
      "upload_time": "2021-08-16T18:07:32",
      "upload_time_iso_8601": "2021-08-16T18:07:32.916324Z",
      "url": "https://files.pythonhosted.org/packages/74/2f/d4679ce427a79b09a309405f790cfd55964249880bac813f057a3b09eb37/mistyfy-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58854199ff3e8896bf4dda990e7c4a9f871faa3a3789eb613e2622cb5576c4e5",
        "md5": "5adc07c1cba8395a9e0ffb103f85f64d",
        "sha256": "82b65c1257bbe5d8667fcee5589598b9671298f30be86e5fcef3a69ca18a3f68"
      },
      "downloads": -1,
      "filename": "mistyfy-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5adc07c1cba8395a9e0ffb103f85f64d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5809,
      "upload_time": "2021-08-16T18:07:34",
      "upload_time_iso_8601": "2021-08-16T18:07:34.423072Z",
      "url": "https://files.pythonhosted.org/packages/58/85/4199ff3e8896bf4dda990e7c4a9f871faa3a3789eb613e2622cb5576c4e5/mistyfy-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}