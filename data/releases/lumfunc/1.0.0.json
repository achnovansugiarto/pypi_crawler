{
  "info": {
    "author": "Manasvee Saraf",
    "author_email": "saraf.manasvee@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Luminosity Function Constructor and Modeller\n\nThis package allows the user to construct and model Galaxian Luminosity Functions using the ![1/Vmax](https://render.githubusercontent.com/render/math?math=\\frac{1}{V_{max}} ) estimator and Schechter function. \n\n![PyPI](https://img.shields.io/pypi/v/lumfunc?color=sucess)    ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/lumfunc)    ![PyPI - Downloads](https://img.shields.io/pypi/dm/lumfunc?color=blue&label=downloads%20%E2%AC%87)    [![GitHub issues](https://img.shields.io/github/issues/manasveesaraf/lumfunc)](https://github.com/manasveesaraf/lumfunc/issues)    [![GitHub stars](https://img.shields.io/github/stars/manasveesaraf/lumfunc)](https://github.com/manasveesaraf/lumfunc/stargazers)    [![GitHub forks](https://img.shields.io/github/forks/manasveesaraf/lumfunc)](https://github.com/manasveesaraf/lumfunc/network)    [![GitHub license](https://img.shields.io/github/license/manasveesaraf/lumfunc)](https://github.com/manasveesaraf/lumfunc/blob/master/LICENSE)\n\n## Installation\n\nUse the package manager [pip](https://pypi.org/project/lumfunc/) to install lumfunc.\n\n```bash\npip install lumfunc\n```\nKeep the package up to date to access all commands. \n\n```bash\npip install --upgrade lumfunc\n```\n\n## Usage\n\nImport the module in your Python code.\n\n```python\nimport lumfunc as lf\n```\nLoad the catalogued data from survey. Usually stored in .fits or .csv files.\n\n```python\nimport numpy as np\nimport pandas as pd\n\n# test data (photometric galaxian survey)\ndata_table = pd.read_csv('test_catalogue.csv')\nRA_list = np.array(data_table['RA'])\nDec_list = np.array(data_table['Dec'])\ng_app_mag_list = np.array(data_table['g_mag'])\nr_app_mag_list = np.array(data_table['r_mag'])\nr_app_mag_err_list = np.array(data_table['r_mag_err'])\nz_photo_list = np.array(data_table['z_photo'])\n```\n\n\n### 1. K-correction and Malmquist bias reduction:\n\n<details><summary><b>get_maggy( )</b>: Convert the measurements of flux in magnitudes to maggies for use with <a href=\"https://github.com/nirinA/kcorrect_python\">kcorrect_python</a></summary>\n<p>\n\nReturn maggies from magnitudes.\n\n```python\nr_maggies_list = lf.get_maggy(r_app_mag_list) \nprint(r_maggies_list[0:4])\n# returns \n# [2.17126084e-08 1.88972757e-08 9.39864400e-09 3.74726494e-08]\n\n# rudimentarily:\nlf.get_maggy(np.array([19.15822, 19.309002, 20.067337, 18.565714]))\n# returns\n# array([12.17126084e-08, 1.88972757e-08, 9.39864400e-09, 3.74726494e-08])\n```\n\n</p>\n</details>\n\n<details><summary><b>get_maggy_inv_var( )</b>: Convert the magnitude errors to maggy inverse variances for use with <a href=\"https://github.com/nirinA/kcorrect_python\">kcorrect_python</a></summary>\n<p>\n\nReturn maggy inverse variances from maggies and magnitude errors.\n\n```python\nr_maggy_inv_var_list = lf.get_maggy_inv_var(r_maggies_list, r_app_mag_err_list)\nprint(r_maggy_inv_var_list[0:4])\n# returns \n# [2.61353653e+20 2.21539925e+20 2.63295704e+20 1.52030876e+20]\n\n# rudimentarily:\nlf.get_maggy_inv_var(\n    np.array([2.17126084e-08, 1.88972757e-08, 9.39864400e-09, 3.74726494e-08]),\n    np.array([0.00309313, 0.0038601, 0.0071193, 0.00234987]))\n# returns\n# array([2.61353484e+20, 2.21540499e+20, 2.63295631e+20, 1.52031005e+20])\n```\n\n</p>\n</details>\n\n<details><summary><b>get_rest_mag( )</b>: Convert the measured apparent magnitudes into rest-frame magnitudes using the catalogue data and output from <a href=\"https://github.com/nirinA/kcorrect_python\">kcorrect_python</a> functions</summary>\n<p>\n\nLoad maggy ratios output file from <a href=\"https://github.com/nirinA/kcorrect_python\">kcorrect_python</a>.\n\n```python\nmaggy_ratios_table = pd.read_csv('test_maggy_ratios.csv', delimiter=' ')\nr_maggy_ratio_list = np.array(maggy_ratios_table['maggy_ratio'])\n```    \nReturn rest-frame magnitudes from the apparent magnitudes, redshifts and maggy ratios.\n\n```python\nr_rest_mag_list = lf.get_rest_mag(z_photo_list, r_app_mag_list, r_maggy_ratio_list)\nprint(r_rest_mag_list[0:4])\n# returns \n# [-22.50048222 -20.3671756  -23.61190368 -23.75133511]\n\n# rudimentarily:\nlf.get_rest_mag(np.array([0.34, 0.17, 0.61, 0.41]),\n                np.array([19.15822, 19.309002, 20.067337, 18.565714]),\n                np.array([0.69938735, 0.90226577, 0.43780755, 0.59193305]))\n# returns\n# array([-22.50048222, -20.3671756 , -23.61190369, -23.75133512])\n```\n\n</p>\n</details>\n\n<details><summary><b>get_volume( )</b>: Convert the survey area in square degrees and respective redshift of each data point into comoving volumes. So, estimate <img src=\"https://render.githubusercontent.com/render/math?math={V_{max}}\" alt=\"Vmax\" /> from <img src = \"https://render.githubusercontent.com/render/math?math={z_{max}}\" alt=\"Zmax\" /> values</summary>\n<p>\n\nLoad the ![zmax](https://render.githubusercontent.com/render/math?math=z_{max} ) file.\n\n```python\nzmax_table = pd.read_csv('test_zmax.csv', delimiter=' ')\nz_max_list = np.array(zmax_table['zmax'])\n```\n\nReturn comoving volume from the survey area and redshifts.\n\n```python\nsurvey_area = 2.5 #sq. degrees\nVmax_list = lf.get_volume(survey_area, z_max_list)\nprint(Vmax_list[:4])\n# returns \n# [1756716.17902236  178625.22666027 2447025.54638078 2287569.96087901]\n\n# rudimentarily:\nlf.get_volume(2.5, np.array([0.50523681, 0.21884399, 0.57489149, 0.55985663]))\n# returns\n# array([1756716.14859094,  178625.22895137, 2447025.56779186, 2287569.99514156])\n```\n\n</p>\n</details>\n\n<details><summary><b>get_binned_phi( )</b>: Bin and weigh galaxy counts per magnitude by <img src=\"https://render.githubusercontent.com/render/math?math=\\frac{1}{V_{max}}\" alt=:\"1/Vmax\"></summary>\n<p>\n\nReturn M, M errors and phi from the rest-frame magnitudes,  ![Vmax](https://render.githubusercontent.com/render/math?math=V_{max} ) values and number of bins.\n\n```python\nn_bins = 10\nM_list, M_err_list, phi_list = lf.get_binned_phi(r_rest_mag_list, Vmax_list, n_bins)\nprint(M_list)\n# returns\n# [-25.1487769  -23.86987184 -22.59096677 -21.31206171 -20.03315665\n#  -18.75425159 -17.47534652 -16.19644146 -14.9175364  -13.63863134]\nprint(M_err_list)\n# returns\n# [0.63945253 0.63945253 0.63945253 0.63945253 0.63945253 \n#  0.63945253 0.63945253 0.63945253 0.63945253 0.63945253]\nprint(phi_list)\n# returns \n# [2.78118218e+02 2.54476157e+02 6.57347457e-05 1.98257155e-04 4.84943102e-04 \n#  1.02149157e-03 1.49165665e-03 4.54012724e-03 5.08195775e-03 6.14432455e-02]\n\n# OR a rudimentarily example:\nlf.get_binned_phi(\n    np.array([-23, -21, -19, -22, -23, -23, -22, -23, -22, -22, -19, -21]),\n    np.array([\n        8e+08, 2e+08, 2e+07, 3e+08, 6e+08, 6e+08, 4e+08, 7e+08, 5e+08, 6e+08,\n        7e+06, 1e+08\n    ]), 4)\n# returns \n# (array([-22.5, -21.5, -20.5, -19.5]),\n#  array([0.5, 0.5, 0.5, 0.5]),\n#  array([1.06411667e-08, 1.02900000e-08, 0.00000000e+00, 1.32300000e-07]))\n```\n\n</p>\n</details>\n\n\n### 2. Spatial variances of the phi, <img src=\"https://render.githubusercontent.com/render/math?math=\\phi\" alt=\"phi\">, values:\n\n<details><summary><b>get_patch_centers( )</b>: First, divide uniformly and randomly simulated data points over the survey area into equally distributed and equally sized patches</summary>\n<p>\nLoad RA and Dec from uniformly distributed catalogue.\n\nReturn patch centers as (RA, Dec) from the uniform RA, Dec and number of patches.\n\n```python\nn_patches = 10\ncenters_array = lf.get_patch_centers(uniform_RA_list,\n                                     uniform_Dec_list,\n                                     n_patches,\n                                     survey='kids',\n                                     max_iterations=int(100),\n                                     tolerance=1.0e-1)\nprint(centers_array)\n# returns\n# [[ 2.23297633e+02  9.81275815e-01]\n#  [ 2.23193101e+02  2.50219646e+00]\n#  [ 2.23213260e+02  3.28612546e-01]\n#  [ 2.23265647e+02 -1.95982283e-01]\n#  [ 2.23186387e+02  1.42541364e+00]\n#  [ 2.23225546e+02 -7.99113067e-01]\n#  [ 2.23204490e+02 -1.56123960e+00]\n#  [ 2.23300703e+02  2.86857892e+00]\n#  [ 2.23160532e+02  6.87340764e-01]\n#  [ 2.23235093e+02  2.00605106e+00]]\n```\n\n</p>\n</details>\n\n<details><summary><b>get_patch_labels( )</b>: Then, use the patch centers to label the survey data points by equally distributed and equally sized patches</summary>\n<p>\n\nReturn patch labels for each data point from RA, Dec, number of patches and patch center guesses.\n\n```python\nlabels = lf.get_patch_labels(RA_list,\n                             Dec_list,\n                             n_patches,\n                             centers_array,\n                             survey='kids',\n                             numba_installed=True,\n                             plot_savename='test_patches.png')\n# displays plot\n```\n\n![get_patch_labels](https://raw.githubusercontent.com/manasveesaraf/lumfunc/master/test/test_patches.png)\n\n</p>\n</details>\n\n<details><summary><b>get_binned_phi_error( )</b>: Finally, use the patch labels to compute the spatial variances of <img src=\"https://render.githubusercontent.com/render/math?math=\\phi\" alt=\"phi\"> </summary>\n<p>\n\nReturn error on phi from rest-frame magnitude, maximum observed volume, labels, number of patches and number of bins.\n\n```python\nphi_err_list = lf.get_binned_phi_error(r_rest_mag_list, Vmax_list, labels, 10, 10)\nprint(phi_err_list)\n# returns\n# [6.31512459e+02 5.32152268e+02 4.31666309e-05 2.22841109e-04 4.81148550e-04 \n#  3.16386417e-04 6.52443936e-04 4.68698737e-03 2.05929233e-03 1.60744165e-01]\n```\n\n</p>\n</details>\n\n\n### 3. Visualisation:\n\n<details><summary><b>get_plot( )</b>: Perform <code>get_binned_phi()</code> , <code>get_patch_labels()</code> and <code>get_binned_phi_error()</code> functions using only one composite function and visualise the luminsoity function</summary>\n<p>\n\nPlot the ![1/Vmax](https://render.githubusercontent.com/render/math?math=\\frac{1}{V_{max}} ) weighted luminosity function, binned by magnitude.\n\n```python\nM_list, M_err_list, phi_list, phi_err_list = lf.get_plot(\n    r_rest_mag_list,\n    Vmax_list,\n    n_bins,\n    RA_list,\n    Dec_list,\n    n_patches,\n    centers_array,\n    survey='kids',\n    numba_installed=True,\n    plot_savename='test_LF.png')\n\n# displays plot\n```\n\n![get_plot](https://raw.githubusercontent.com/manasveesaraf/lumfunc/master/test/test_LF.png)\n\n</p>\n</details>\n\n\n\n<details><summary><b>filter_plot_by_colour( )</b>: Study the luminosity function by colour properties by specifying the colour dichotomy</summary>\n<p>\n\nCalculate rest-frame magnitudes in a higher wavelength band.\n\n```python\nmaggy_ratios_table = pd.read_csv('test_g_maggy_ratios.csv', delimiter=' ')\ng_maggy_ratio_list = np.array(maggy_ratios_table['maggy_ratio'])\ng_rest_mag_list = lf.get_rest_mag(z_photo_list, g_app_mag_list, g_maggy_ratio_list)\n```                                  \n\nPlot the ![1/Vmax](https://render.githubusercontent.com/render/math?math=\\frac{1}{V_{max}} ) weighted luminosity function from data, binned by magnitude and filtered by galaxy colours. The galaxy colours are filtered by red and blue with the help of the input colour dichotomy line parameters. The colour dichotomy line parameters must be inferred first from a CMD plot.\n\n```python\ncolour_cut_slope = 0.0\ncolour_cut_intercept = 0.65\nall_M_list, all_M_err_list, all_phi_list, all_phi_err_list, red_M_list, red_M_err_list, red_phi_list, red_phi_err_list, blue_M_list, blue_M_err_list, blue_phi_list, blue_phi_err_list = lf.filter_plot_by_colour(\n    colour_cut_slope,\n    colour_cut_intercept,\n    r_rest_mag_list,\n    g_rest_mag_list,\n    Vmax_list,\n    n_bins,\n    RA_list,\n    Dec_list,\n    n_patches,\n    centers_array,\n    survey='kids',\n    numba_installed=True,\n    plot_savename='test_LF_colour.png')\n\n# displays plot\n```\n\n![filter_plot_by_colour](https://raw.githubusercontent.com/manasveesaraf/lumfunc/master/test/test_LF_colour.png)\n\n</p>\n</details>\n\n\n### 4. Modelling with Schechter functions:\n\n<details><summary><b>SchechterMagModel( )</b></summary>\n<p>\n\nReturn single Schechter luminosity function in terms of magnitude from 3 free parameters of the model.\n\n```python\nM_star_guess = -20.7\nphi_star_guess = 9.5e-3\nalpha_guess = -1.3\nsch1_model_phi_list = lf.SchechterMagModel(M_list, M_star_guess, phi_star_guess, alpha_guess)\nprint(sch1_model_phi_list)\n# returns\n# [1.85685848e-29 3.25671139e-11 1.72458831e-05 1.27468679e-03 6.12395219e-03 \n#  1.26803536e-02 2.02617665e-02 2.98927403e-02 4.30310959e-02 6.14770530e-02]\n```\n\n</p>\n</details>\n\n<details><summary><b>DoubleSchechterMagModel( )</b></summary>\n<p>\n\nReturn double Schechter luminosity function in terms of magnitude from 5 free parameters of the model.\n\n```python\nM_star_guess = -20.7\nphi_star_1_guess = 6.16e-3\nalpha_1_guess = -0.79\nphi_star_2_guess = 6.16e-3\nalpha_2_guess = -0.79\nsch2_model_phi_list = lf.DoubleSchechterMagModel(M_list, M_star_guess,\n                                                 phi_star_1_guess,\n                                                 alpha_1_guess,\n                                                 phi_star_2_guess,\n                                                 alpha_2_guess)\nprint(sch2_model_phi_list)\n# returns\n# [1.94632963e-28 1.87206201e-10 5.43662983e-05 2.20369342e-03 5.80607779e-03 \n#  6.59304119e-03 5.77743541e-03 4.67441094e-03 3.69017477e-03 2.89121864e-03]\n```\n\n</p>\n</details>\n\n<details><summary><b>get_gof( )</b>: Estimate the goodness of the fit by the reduced chi square, <img src=\"https://render.githubusercontent.com/render/math?math=\\chi_{\\nu}^{2}\" alt=\"redchisq\"></summary>\n<p>\n\nReturns reduced chi squared estimate of goodness of fit from observed values, modelled values, errors and number of free parameters used in model.\n\n```python\nm = 3\ngof = lf.get_gof(phi_list, phi_err_list, sch1_model_phi_list, m)\nprint(gof)\n# returns\n# 79.66254082924551\n```\n\n</p>\n</details>\n\n<details><summary><b>get_schechter_phi( )</b>: Least square fit single Schechter function on data and plot</summary>\n<p>\n\nReturns least square fit of phi with single Schechter function, reduced chi squared estimate and the 3 Schechter parameters with their errors.\n\n```python\nsch1_model_phi_list, chi_sq_1, M_star, M_star_err, phi_star, phi_star_err, alpha_star, alpha_star_err = lf.get_schechter_phi(\n    M_list,\n    M_err_list,\n    all_phi_list,\n    all_phi_err_list,\n    np.array([M_star_guess, phi_star_guess, alpha_guess]),\n    plot_savename='test_Sch.png')\n\n# displays plot\n```\n\n![get_schechter_phi](https://raw.githubusercontent.com/manasveesaraf/lumfunc/master/test/test_Sch.png)\n\n</p>\n</details>\n\n<details><summary><b>get_double_schechter_phi( )</b>: Least square fit double Schechter function on data and plot</summary>\n<p>\n\nReturns least square fit of phi with double Schechter function, reduced chi squared estimate and the 5 Schechter parameters with their errors.    \n\n```python\nsch2_model_phi_list, chi_sq_1, M_star, M_star_err, phi_star_1, phi_star_err_1, phi_star_2, phi_star_err_2, alpha_star_1, alpha_star_err_1, alpha_star_2, alpha_star_err_2 = lf.get_double_schechter_phi(\n    M_list,\n    M_err_list,\n    all_phi_list,\n    all_phi_err_list,\n    np.array([M_star_guess, phi_star_1_guess, alpha_1_guess, phi_star_2_guess, alpha_2_guess]),\n    plot_savename='test_dSch.png')\n\n# displays plot\n```\n\n![get_double_schechter_phi](https://raw.githubusercontent.com/manasveesaraf/lumfunc/master/test/test_dSch.png)\n\n</p>\n</details>\n\n## Dependencies\n![PyPI](https://img.shields.io/pypi/v/astropy?label=astropy)    ![PyPI](https://img.shields.io/pypi/v/numpy?label=numpy)    ![PyPI](https://img.shields.io/pypi/v/scipy?label=scipy)    ![PyPI](https://img.shields.io/pypi/v/matplotlib?label=matplotlib)  ![https://github.com/nirinA/kcorrect_python](https://img.shields.io/github/v/tag/nirinA/kcorrect_python?label=kcorrect_python)\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://github.com/manasveesaraf/LuminosityFunction/blob/master/LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/manasveesaraf/LuminosityFunction",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lumfunc",
    "package_url": "https://pypi.org/project/lumfunc/",
    "platform": "",
    "project_url": "https://pypi.org/project/lumfunc/",
    "project_urls": {
      "Homepage": "https://github.com/manasveesaraf/LuminosityFunction"
    },
    "release_url": "https://pypi.org/project/lumfunc/1.0.0/",
    "requires_dist": [
      "scipy",
      "matplotlib",
      "numpy",
      "astropy"
    ],
    "requires_python": "",
    "summary": "Galaxian Luminosity Function Constructor package using the 1/Vmax estimator and Schechter model.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8029731,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93a42276b1f49308344e154fbda133953ac86bdf5f08487adf2f69e92bcb620b",
        "md5": "6c54cf75a2a53a0d11efb204bcd5cc8a",
        "sha256": "7a70b32de90e69860446d960d26dea53c3bd0e504a01f9169941d4b85b291a22"
      },
      "downloads": -1,
      "filename": "lumfunc-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c54cf75a2a53a0d11efb204bcd5cc8a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16780,
      "upload_time": "2020-08-24T19:31:20",
      "upload_time_iso_8601": "2020-08-24T19:31:20.578139Z",
      "url": "https://files.pythonhosted.org/packages/93/a4/2276b1f49308344e154fbda133953ac86bdf5f08487adf2f69e92bcb620b/lumfunc-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c64beecc741d91f2356f4e4a08cc86a48a53870db25ddf93c4a37d88a8f345bc",
        "md5": "65ad2cbfcfe387c9d58a1628f3e6ff3b",
        "sha256": "019700fbf84b72b478bc51613e7e8b839518170bc26ae9978b77b04411ce3f1e"
      },
      "downloads": -1,
      "filename": "lumfunc-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "65ad2cbfcfe387c9d58a1628f3e6ff3b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3097939,
      "upload_time": "2020-08-24T19:31:28",
      "upload_time_iso_8601": "2020-08-24T19:31:28.776071Z",
      "url": "https://files.pythonhosted.org/packages/c6/4b/eecc741d91f2356f4e4a08cc86a48a53870db25ddf93c4a37d88a8f345bc/lumfunc-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}