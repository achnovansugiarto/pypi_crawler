{
  "info": {
    "author": "DoctorNumberFour",
    "author_email": "miloszecket@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: Microsoft",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# **DocLib**\n\nA chatbot library for euphoria.io.\n\n# Usage\n\n## Installation\n\nTo install, use `pip` or `pip3`:\n\n```bash\npip3 install doclib\n```\n\n**WINDOWS USERS: YOU MUST [INSTALL WSL](https://docs.microsoft.com/en-us/windows/wsl/install-win10 \"A tutorial for doing so\") AND RUN THIS ON IT IN ORDER FOR IT TO WORK**\n\nWhen beginning a new bot, import the `Bot` class:\n\n```python\nfrom doclib import Bot\n```\n\n## Basic Bots\n\nA basic bot will be a `Bot` object, constructed with a `nick`(the bot's name, shown in the room), a `room`(where the bot is sent by default, defaults to bots or test in debug mode), and an `owner`(your euphoria username.):\n\n```python\nsampleBot = Bot(nick = 'bugBot', room = 'test', owner = 'sample user')\n```\n\n### Constructor Options\n\noption        | default                                                                                                                                                                                                       | usage\n------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------\n`nick`        | none, this is required                                                                                                                                                                                        | The nick the bot will enter the room with.\n`room`        | `\"bots\"`                                                                                                                                                                                                      | The default room for the bot to be sent to.                                                                                                  |\n`owner`       | `\"nobody\"`                                                                                                                                                                                                    | The owner/creator of the bot (you).\n`password`    | blank string                                                                                                                                                                                                  | room password (used for private rooms)\n`help`        | `\"[nick] is a bot made with Doctor Number Four's Python 3 bot library, DocLib (link: https://github.com/milovincent/DocLib) by @[owner].\\nIt follows botrulez and does not have a custom !help message yet.\"` | your custom !help command response. can also be set by adding a `\"^!help @[nick w/o spaces]$\"` command to your regexes\n`ping`        | `\"Pong!\"`                                                                                                                                                                                                     | your custom !ping response.\n`important`   | `False`                                                                                                                                                                                                       | if `True`, the bot will only be killable by a roomhost or the owner. **NOT RECOMMENDED FOR SIMPLE BOTS OR BOTS PRONE TO SPAM**.\n`killed`      | `\"/me has died\"`                                                                                                                                                                                              | your custom message sent when bot is !killed.\n`API_timeout` | `10`                                                                                                                                                                                                          | ADVANCED: number of API responses to check for command responses. You should not need to change this unless the room is particularly active.\n`advanced`    | `False`                                                                                                                                                                                                       | ADVANCED: if `True`, declares the bot as advanced, enabling the user to directly handle any API response (while still obeying botrulez)\n`function`    | `None`                                                                                                                                                                                                        | ADVANCED: specifies the universal advanced start handler function.\n`sendable`    | `False`                                                                                                                                                                                                       | If `True`, enables the bot to be sent to other rooms with the !send @bot &room command.\n`human`       | `False`                                                                                                                                                                                                       | If `True`, the bot shows up in the People list. If used improperly, this is against Euphoria's ToS.\n`customArgs`  | `False`                                                                                                                                                                                                       | Removes the set of default command-line arguments for bots.\n\nOnce constructed, the user should assign a regex dictionary for non-advanced use cases:\n\n```python\nsampleBot.set_regexes({r'^!command$' : function, r'(?i)word' : 'response'})\n```\n\n#### Regex Formatting\n\nDocLib uses the default python `re` library for regex formatting.\n\n## Custom Function Responses\n\nRegexes with a function value run the function with a `Bot` object (`chatbot`), an `AttrDict` (`msg`), and the regex `match` object (`matches`). Functions can utilise any of the numerous `Bot` methods and all return the API's reply as an `AttrDict`:\n\nMethod         | Parameters                                                           | Effect\n-------------- | -------------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n`send_msg`     | `parent` (`AttrDict` or string), `msgString` (string)                | Sends `msgString` as a reply to `parent`, where `parent` can either be a string containing the message id returned by the API or an `AttrDict` with the structure of a `send-reply` generated by the API (recommended: use the `msg` parameter given to your custom function)\n`set_nick`     | `nick` (string)                                                      | Sets the bot's name to `nick`\n`get_userlist` | none                                                                 | returns an array of user `AttrDict`s currently in the room, including bots, accounts, and agents.\n`move_to`      | `roomName` (string), `password` (string, default is an empty string) | Moves the bot to a different room, specified by `roomName`, and, if necessary, attempts to log into it using `password`.\n`restart`      | none                                                                 | Restarts the bot.\n`kill`         | none                                                                 | Kills the bot.\n`copy_to`      | `roomName` (string), `password` (string, default is an empty string) | Copies the bot to &`roomName`, starting it in the background.\n`initiate_pm`  | `id` (string), `bot` (`Bot`, default None)                           | Starts a PM with the user `id`, placing `bot` in said PM room if specified, else a copy of the bot receiving the command.\n`login`        | `email` (string), `password` (string)                                | Logs bot in as a user. Takes effect on reconnect, and the bot will show up in the People list.\n\nTo log errors and info, use `botlog` with a `message` string and the optional `error` boolean. (note: NOT a `Bot` subfunction) To choose between a set of responses to a command randomly, use `randomize_between(*strings)`.\n\n### Example:\n\nRegex:\n\n```python\nsampleBot.set_regexes({'^!alive$' : alive})\n```\n\nFunction (defined **above bot start**)\n\n```python\ndef alive(chatbot, msg, matches):\n    chatbot.send_msg(parent = msg, msgString = '/me IS ALIVE!')\n    chatbot.set_nick('Thunder')\n    chatbot.send_msg(parent = msg, msgString = '/me crashes')\n    chatbot.set_nick('sampleBot')\n```\n\n## Custom Handlers\n\nTo set custom function handlers for any API response (when not `advanced`, this does not include `ping-event`s, `send-event`s, `error`s, or `bounce-event`s), use `set_handler`:\n\n```python\nsampleBot.set_handler(eventString = \"join-event\", on_join)\n```\n\nor\n\n```python\nsampleBot.set_handlers({\"joinEvent\" : on_join})\n```\n\nAll handler functions, including the universal function parameter for advanced start, are passed the API response (`msg`) as an `AttrDict` every time the corresponding event is received. Custom handlers take precedence over advanced start's universal handler.\n\n# Startup\n\nOnce the bot is set up and populated with commands, the user can connect and start it:\n\n```python\nsampleBot.connect()\nsampleBot.start()\n```\n\n## Advanced Usage\n\nUsing an `advanced` value of `True` (whether in the bot's declaration or its start function) enables the user to set a universal handler for all API events, in addition to any custom handlers:\n\n```python\nsampleBot.start(advanced = True, handler_function)\n```\n\nIf unspecified, advanced start uses a filler function that does nothing, enabling the user to use entirely custom handlers for every API response.\n\n# Command Line Options\n\nWhen running any bot in the command line, the user has access to a few default options:\n\noption                               | usage\n------------------------------------ | :------------------------------------------------------------------------\n`-t`, `--test`, `--debug`            | Used to debug dev builds. Sends bot to &test instead of its default room.\n`--room ROOM`, `-r ROOM`             | Sends bot to &ROOM instead of its default room.\n`--password PASSWORD`, `-p PASSWORD` | Password to use should the room be locked.\n\nTo add new arguments, use the bot's `add_command_line_arg` function as you would the default Python `argparse.add_argument` function. It returns the value of the added argument if provided a `name` parameter.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/DoctorNumberFour/DocLib",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "doclib",
    "package_url": "https://pypi.org/project/doclib/",
    "platform": "",
    "project_url": "https://pypi.org/project/doclib/",
    "project_urls": {
      "Homepage": "https://gitlab.com/DoctorNumberFour/DocLib"
    },
    "release_url": "https://pypi.org/project/doclib/1.7/",
    "requires_dist": [
      "websocket-client",
      "websockets",
      "attrdict"
    ],
    "requires_python": ">=3.7",
    "summary": "A chatbot library for euphoria.io.",
    "version": "1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8745422,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03fddf8f7ff1fd57f095ece811206cd4ca6cc4ec92026e4bed547ad4dddfd740",
        "md5": "ff46c21fa4e27f0eb7aabbd2dfd16782",
        "sha256": "866d414b99229fd77616ee6c2337598304a59d8176085b74577f019c89688f8a"
      },
      "downloads": -1,
      "filename": "doclib-1.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff46c21fa4e27f0eb7aabbd2dfd16782",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25069,
      "upload_time": "2020-04-19T00:49:40",
      "upload_time_iso_8601": "2020-04-19T00:49:40.412596Z",
      "url": "https://files.pythonhosted.org/packages/03/fd/df8f7ff1fd57f095ece811206cd4ca6cc4ec92026e4bed547ad4dddfd740/doclib-1.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d773b3488b3dde708b7947a25936449b9cfa0e9bf1db8e12341dcb51258b25a3",
        "md5": "bd528a9a38c91b310ad0f4b8b5de5396",
        "sha256": "1abda8f9004328df07cb2c627698203cf3388f0a23522947c780171a45db59b2"
      },
      "downloads": -1,
      "filename": "doclib-1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "bd528a9a38c91b310ad0f4b8b5de5396",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11483,
      "upload_time": "2020-04-19T00:49:41",
      "upload_time_iso_8601": "2020-04-19T00:49:41.586412Z",
      "url": "https://files.pythonhosted.org/packages/d7/73/b3488b3dde708b7947a25936449b9cfa0e9bf1db8e12341dcb51258b25a3/doclib-1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}