{
  "info": {
    "author": "Vitaly Protsko",
    "author_email": "me@protsko.su",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "\ndjango-confenv\n==============\n\n**django-confenv** purpose - make django settings.py (or any other Python\nproject config) persistent, while real setup is done from file(s)\nwith simple \"env=value\" format or OS environment variables. Also, this\ntechnics is known as `Twelve-factor methodology`_ or 12factor_ method.\n\nNOTE, that, despite name, you can use django-confenv in *ANY* Python\nproject, without activating any django-related stuff.\n\n**django-confenv** is heavily reconstructed version of django-environ_\nby `Daniele Faraglia`_ and `other authors`_ . Differences from that code are:\n\n  - higher speed (sometimes much higher)\n  - smaller code\n  - smaller footprint\n  - django-related stuff moved to module\n  - more functionality in .env file(s) search/selection\n  - some improvements/speedups in 'api'\n  - separated basic tests for base and django functionality\n\n**django-confenv** is (C) 2019,2020 Vitaly Protsko <me@protsko.expert>\nReleased under GPLv3_ . If you need this code under other license, please,\ncontact the author.\n\n\nQuick usage\n-----------\n\nGet Env\n\n.. code-block:: python\n\n    # base functionality class\n    from confenv import Env\n\nfor Django projects\n\n.. code-block:: python\n\n    # Env with django species\n    from confenv.django import Env\n\nNext, \"configure\" Env itself\n\n.. code-block:: python\n\n    # Set exception to be raised in case of error\n    # For Django it is set to ImproperlyConfigured\n    #Env.exception = Exception\n\n    # Get default configuration file name from named\n    #   environemt variable\n    # Default: CONFENV_PROFILE\n    Env.defconf_key = 'BIGPROJECT_CONFNAME'\n\n    # Set env file name to be read, instead of name,\n    #   defined in env var named in Env.defconf_key\n    # filename + '.env' will also be checked, if\n    #   file with plain filename not found\n    # File will be searched in directory where calling\n    #   Env class instantiation program resides if\n    #   Env.filepath is None\n    # Default: '.env'\n    Env.filename = 'default.conf'\n\n    # Search for file Env.filename or file '.env' in this\n    #   path, if set.\n    # If name in Env.filename is absolute, filepath will\n    #   not be prepended (will be ignored).\n    # If this file path is not absolute the directory where\n    #   calling Env class instantiation program resides will\n    #   be prepended.\n    # Default: None\n    Env.filepath = '..'\n\n    # Set dict to operate on\n    # Default: os.environ\n    #Env.data = dict()\n\n\nCollect all changeable values in file, parseable also by shell:\n\n.. code-block:: sh\n\n    #\n    # default.conf\n    #\n\n    # put settings in environment variables\n    DEBUG=1\n\n    # you can use simple variable substitution. Remember, that\n    #   this interpreter is not a shell. This works only if you\n    #   start value from '$<varname>'. In that case variable\n    #   will be substituted by value of the variable, found in\n    #   previous asignments or in Env.data dictionary. Resolving\n    #   recursion depth is not limited.\n    CACHEDIR=$HOME/.cache\n\n\nYou can define\n  type and default value for parameters you use in you project by\n  defining a \"scheme\" directly as parameters, or as a dictionary.\n  For example, to define variable DEBUG as boolean parameter with\n  default 'False' value, you can use either form:\n\n.. code-block:: python\n\n    # directly in parameters\n    env = Env(DEBUG=(bool, False), CACHEDIR=(str, ))\n\n    # or as a prepared list of kwargs:\n    kwl = {\n      'DEBUG': (bool, False),\n      'CACHEDIR': (str, ),\n    }\n\n    env = Env(**kwl)\n\n\nFull list of supported types you can find later in this file.\n\n.. code-block:: python\n\n    # now use it in your program\n\n    # WARNING:\n    #   If you dont pass the default value to converter\n    #   or miss it in Env class's parameters (\"schema\"),\n    #   Env will require the variable to exist in OS\n    #   environment (precisely, in Env.data dict),\n    #   otherwise Env.exception will be thrown.\n\n    # this will assign True to variable debug, if\n    #   environment variable DEBUG value in\n    #   ('true', 'on', 'ok', 'y', 'yes', 'yea', '1')\n    #   Other value or variable absence will assign\n    #   False value.\n    DEBUG = env('DEBUG')\n\n    # you can directly point Env to conversion you\n    #   need to be done with value of env var by\n    #   calling corresponding method directly\n    SERVER = env.url('SERVER', 'http://www.example.com')\n\n    # this will assign instance of ParseResult from\n    #   urllib.parse with pre-parsed URL, for the default\n    #   value in example above it will be\n    #   ParseResult(scheme='http', netloc='www.example.com', path='', params='', query='', fragment='')\n    #\n    #   NB: all other conversions return expected type,\n    #     not an instance of side class\n\n    # use substituted var, but back it with default value\n    CACHE = env('CACHEDIR', default='/var/cache')\n\n    # complex json is also not a problem\n    PARAMS = env.json('PARAMETERS', \"{'par1':'val1', 'par2': {'def': 1, 'set': 2}, 'par3': [1, 2]}\")\n\n    # this will assign default dictionary to\n    #   variable PARAMS if PARAMETERS is absent in\n    #   env file or in OS environment variables\n\n\nSupported types\n---------------\n\nHere is all supported data types collected in example\n.env file and code to use it in your programs.\n\n.. code-block:: sh\n\n    #\n    # myappconf.env\n    #\n\n    # NB: Quotes for us are optional, value counted\n    #   from character after the equal sign, except\n    #   when surrounded by quotes, in which case\n    #   they are stripped.\n    #   There is limitation: variable assignments\n    #   must be written in one line. Continuations\n    #   are not supported.\n\n    # bool variable, accepting values\n    #   true on ok y yes yea 1\n    #   as True, any other value as False.\n    #   You can use \"export\" keyword before variable\n    #   name and maintain one place of configuration\n    #   for application and accompanying shell scripts\n    export DEBUG=no\n\n    #   lines with \"unset\" keyword are silently ignored\n    unset APP_DEBUG\n\n    # str variable\n    #   Any sequence of characters. This is effectively\n    #   the same, as unicode type, look below for\n    #   declaration example(s)\n    SERVERNAME=\"Our service server\"\n\n    # bytes variable\n    #   Sequence of any characters, that can be\n    #   decoded by .encode('utf8') method. Or you can\n    #   pass encoding directly to convertor method\n    #   with parameter: env.bytes('VAR', encoding='utf16')\n    WELCOMEMSG=Добро пожаловать!\n\n    # integer variable\n    PORT=1234\n\n    # float variable\n    MAXAVGLOAD=5.5\n\n    # list variable\n    LISTENIP=127.0.0.1,192.168.1.1,10.0.0.1\n\n    # tuple variable\n    #   value type in this case will be str\n    ENDPOINTS=(start,read,calculate,write,stop)\n\n    # dict variable #1\n    #   In this case all values are strings and\n    #   here is no need to declare \"schema\" for\n    #   this variant.\n    USERACL=root=admin,jdoe=operator,john=user\n\n    # dict variable #2\n    #   This dictionary variant needs declaration\n    #   to properly convert values, it can be done\n    #   in Env class instantiation parameters.\n    COEFFICIENT=a=10.11;b=5;result=unknown\n\n    # json variable\n    #   This type can be used for complex setup\n    #   of something (like menu) or for any other\n    #   kind of structured (initialization?) data.\n    MENUEXTRA={\"ExtraItem1\": {\"display\": \"&Cook Coffee\", \"handler\": \"cooker\", \"allow\": \"ALL\"}}\n\n    # url variable\n    #   This can be used for pointing to any kind\n    #   of resources, allowed schemes are as in\n    #   urllib.\n    EXTLOGO=http://image.bigproject.com/biglogo.jpg\n\n\nThere is additional convertors for django applications.\n  They pesent only in Env, imported from confenv.django\n  module.\n\n.. code-block:: sh\n\n    #\n    # djangosite.env\n    #\n\n    # Applications list\n    #   We can add applications to django's standard\n    #   list in this way.\n    APPADD=django.contrib.humanize\n    APPADD=$APPADD,django.contrib.syndication\n    APPADD=$APPADD,bs3base,testapp,myapp\n\n    # Database URL\n    #   This variable value can be parsed as database\n    #   configuration for django project. Env will\n    #   automatically select appropriate django driver\n    #   for database type pointed by url scheme.\n    #   Recognized schemes are:\n    #     postgres, postgresql, pgsql, postgis, mysql,\n    #     mysql2, mysql-connector, mysqlgis, mssql, oracle,\n    #     pyodbc, redshift, spatialite, sqlite, ldap\n    MAINDB_URL=pgsql://dbuser:dbpass@db.example.com:5432/bigproject?AUTOCOMMIT=True\n\n    # Cache URL\n    #   You can point django to cache resource(-s) as url\n    #   Recognized schemes are:\n    #     dbcache, dummycache, filecache, locmemcache,\n    #     memcache, pymemcache, rediscache, redis\n    CACHE_URL=locmemcache://\n    MEMCACHE_URL=memcache://localhost:12345\n\n    # E-Mail URL\n    #   Django's e-mail submitting parameters\n    #   Recognized schemes are:\n    #     smtp, smtps, smtp+tls, smtp+ssl, consolemail,\n    #     filemail, memorymail, dummymail\n    MAINMAIL=smtp+tls://senduser:accesspw@mta.example.com:587\n\n    # Search URL\n    #   This otional feature uses drivers from django-haystack\n    #   to find that needle.\n    #   Recognized schemes are:\n    #     elasticsearch, elasticsearch2, solr, whoosh,\n    #     xapian, simple\n    SEARCHENGINE=solr://search.example.com:8983/solr/bigproject?q=*.*\n\n\nYou can use all power of Env without any types declarations.\n  Env instance has methods for direct variable conversion.\n  But, I'm shure, you want stricter value type definitions,\n  that gives more chances in bug hunting.\n  Also, you always can use direct call to instance to get\n  plain value backed by default.\n\nNB: Here is nuance with naming variable type in declarations\n  and in call to convertors. Types from this list:\n\n    str, bool, int, float, list, tuple, dict\n\n  you can point directly, as they are build-in and this\n  identifiers are known for interpreter. Types\n\n    url, json, unicode, bytes\n\n  you can use only by quoting their names, as shown below.\n  Althrough, you can quote names of all types, including ones from\n  first list, if you do not remember well which ones are built-in.\n  ;-)\n\n.. code-block:: python\n\n    from confenv import Env\n    Env.filename = 'myappconf'\n\n    kwl = {\n      # if you dont give default value, you can get an exception\n      #   from Env in case if variable not present in Env.data\n      'DEBUG': (bool, False),\n\n      # you can completely omit declaration of variables\n      #   with str value type - it is default\n      #'SERVERNAME': (str, ),\n      #   or, which is equivalent, you can declare it as\n      'SERVERNAME': ('unicode', ),\n\n      # we'll comment out this declaration to demonstrate direct\n      #   convertor calls later\n      #'WELCOMEMSG': ('bytes', 'Welcome !'),\n\n      'PORT': (int, ),\n      'MAXAVGLOAD': (float, ),\n\n      # quoted type name also works\n      'LISTENIP': ('list', ),\n\n      # items for this tuple are of type str\n      'ENDPOINTS': (tuple, ),\n\n      # default type of values str\n      'USERACL': (dict, {'ALL': 'deny'} ),\n\n      # default value type is str\n      'COEFFICIENT': ({'value': str, 'cast': {'a': float, 'b': int} }, {'result': 'NaN'}),\n\n      'MENUEXTRA': ('json', ),\n      'EXTLOGO': ('url', ),\n    }\n\n    env = Env(**kwl)\n\n    # store values from environment in program configuration items\n    #\n\n    flagDebug = env('DEBUG')\n    # assigned value bool False\n\n    textServer = env('SERVERNAME', 'Default service')\n    # assigned value str 'Our service server'\n\n    # in-line conversion\n    textWelcome = env.bytes('WELCOMEMSG', 'Welcome !')\n    # assigned value str 'Добро пожаловать!'\n\n    paramPort = env('PORT', default=4321)\n    # assigned value int 1234\n\n    paramNextPort = env.PORT + 1\n    # yes, all parameters are accessible as object attribute\n\n    paramLoad = env('MAXAVGLOAD', default=10.0)\n    # assigned value float 5.5\n\n    paramListen = env('LISTENIP', default=[ '0.0.0.0' ])\n    # assigned value [ '127.0.0.1', '192.168.1.1', '10.0.0.1' ]\n\n    progServices = env('ENDPOINTS', default=('start', 'stop'))\n    # assigned value tuple('start', 'read', 'calculate', 'write', 'stop')\n\n    paramACL = env('USERACL')\n    # assigned value {'root': 'admin', 'jdoe': 'operator', 'john': 'user'}\n\n    paramMUL = env('COEFFICIENT')\n    # assigned value { 'a': 10.11, 'b': 5, 'result': 'unknown' }\n\n    menuExtra = env('MENUEXTRA')\n    # assigned value { 'ExtraItem1': { 'display': '&Cook Coffee', 'handler': 'cooker', 'allow': 'ALL' } }\n\n    urlLogo = env('EXTLOGO')\n    # assigned value ParseResult(scheme='http', netloc='image.bigproject.com', path='/biglogo.jpg', params='', query='', fragment='')\n\n    config = {}\n    config.update(env)\n    # you can use items() keys() and values() to access raw content of\n    # env.data\n\n    for k, v in env:\n      print('{}={}'.format(k, v))\n    # access to all 'raw' values\n\n\nFor django project settings.py Env can generate complete configuration\ndictionaries for database, cache, e-mail and search functions to include\nit into standard django config structures.\n\n.. code-block:: python\n\n    # settings.py\n    #\n    # This file can be \"static\", all changeable information\n    # resides in ../myappconf.env and ../djangosite.env\n\n    # get django-specific Env\n    from confenv.django import Env\n\n    # set path to .env's to directory, where manage.py reside\n    Env.filepath = '..'\n\n    # expecting, that you place example .env files 'myappconf'\n    # and 'djangosite' in appropriate dir\n    Env.filename = 'myappconf'\n\n    # django Env's version have place to hold variable names\n    # to read database, cache, e-mail and search URLs default\n    # values from\n    # They are class members with this default values:\n    #Env.defenv_db = 'DATABASE_URL'\n    #Env.defenv_cache = 'CACHE_URL'\n    #Env.defenv_email = 'EMAIL_URL'\n    #Env.defenv_search = 'SEARCH_URL'\n\n    # search for database config here by default\n    Env.defenv_db = 'MAINDB_URL'\n\n    env = Env()\n\n    # load additional configuration\n    env.readfile(filename='djangosite')\n\n    DEBUG = env.bool('DEBUG', True)\n\n    # use \"untyped\" variable as list to extend\n    #   django's default\n    INSTALLED_APPS = [\n      # ... standard django's list ...\n    ] + env.list('APPADD', [])\n\n    # ...\n\n    # databases config\n    DATABASES = {\n      # config will be read from MAINDB_URL\n      'default': env.db_url(),\n    }\n\n    CACHES = {\n      # this cache config will be read from CACHE_URL\n      'default': env.cache_url(),\n\n      # second cache config\n      'quick': env.cache('MEMCACHE_URL'),\n    }\n\n    # This will require MAINMAIL key to be existent\n    #   in Env.data dict\n    EMAIL_CONFIG = env.email_url('MAINMAIL')\n    vars().update(EMAIL_CONFIG)\n\n    # django's search extension\n    HAYSTACK_CONNECTIONS = {\n      'default': env.search_url('SEARCHENGINE', 'simple://'),\n    }\n\n\nInstallation\n------------\n\nThis package can be installed from standard Python packages\nsource pypi.org\n\n.. code-block:: sh\n\n    pip install django-confenv\n\n\nCredits\n-------\n\nThis code is (c) Vitaly Protsko <me@protsko.expert>, under GPLv3_ .\n\nThis work is based on django-environ_ (c) `Daniele Faraglia`_\nwhich includes work from `other authors`_ .\n\n.. _GPLv3: https://www.gnu.org/licenses/gpl-3.0.html\n.. _12factor: http://www.12factor.net/\n.. _`Twelve-factor methodology`: http://www.12factor.net/\n.. _django-environ: https://github.com/joke2k/django-environ\n.. _`Daniele Faraglia`: https://daniele.faraglia.info\n.. _`other authors`: https://github.com/joke2k/django-environ/blob/develop/AUTHORS.rst\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gihhub.com/aTanW/django-confenv",
    "keywords": "django,env,environment,configuration,12factor,quick,easy,config,env var,django database,django cache,django email,django search",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-confenv",
    "package_url": "https://pypi.org/project/django-confenv/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-confenv/",
    "project_urls": {
      "Homepage": "https://gihhub.com/aTanW/django-confenv"
    },
    "release_url": "https://pypi.org/project/django-confenv/1.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Optimized app config (+Django) from environment vars and/or files",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12110072,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6fe5b77aa443858d7b571c01aad09669786ce3a9fb27d7947ece60043612a33",
        "md5": "94468c2e07a06ea32b1248bf2059d6a5",
        "sha256": "3805e8eaec6636be715919a0ef2311d8d3c07ce4893e6893c1a8a5d32cd04b98"
      },
      "downloads": -1,
      "filename": "django_confenv-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "94468c2e07a06ea32b1248bf2059d6a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21993,
      "upload_time": "2021-03-20T17:31:16",
      "upload_time_iso_8601": "2021-03-20T17:31:16.340929Z",
      "url": "https://files.pythonhosted.org/packages/a6/fe/5b77aa443858d7b571c01aad09669786ce3a9fb27d7947ece60043612a33/django_confenv-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3efa1e5a06c99cc73f842fa3ebd42529c79a9dc4271cce7dd82607058f138bbc",
        "md5": "f2175c05c5a4cbeb5f033b71e5185098",
        "sha256": "aadfa0edab8aae0007c7d134ee4d502f075533cb6e59be0f9b0903cada427525"
      },
      "downloads": -1,
      "filename": "django-confenv-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f2175c05c5a4cbeb5f033b71e5185098",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17631,
      "upload_time": "2021-03-20T17:31:18",
      "upload_time_iso_8601": "2021-03-20T17:31:18.116155Z",
      "url": "https://files.pythonhosted.org/packages/3e/fa/1e5a06c99cc73f842fa3ebd42529c79a9dc4271cce7dd82607058f138bbc/django-confenv-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}