{
  "info": {
    "author": "Jacob Schaer",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator"
    ],
    "description": "python-doipclient\n#################\n\n.. image:: https://travis-ci.com/jacobschaer/python-doipclient.svg?branch=main\n    :target: https://travis-ci.com/jacobschaer/python-doipclient\n\ndoipclient is a pure Python 3 Diagnostic over IP (DoIP) client which can be used\nfor communicating with modern ECU's over automotive ethernet. It implements the\nmajority of ISO-13400 (2019) from the perspective of a short-lived synchronous\nclient. The primary use case is to serve as a transport layer implementation for\nthe `udsoncan <https://github.com/pylessard/python-udsoncan>`_ library. The code\nis published under MIT license on GitHub (jacobschaer/python-doipclient).\n\nDocumentation\n-------------\n\nThe documentation is available here : https://python-doipclient.readthedocs.io/\n\nRequirements\n------------\n\n - Python 3.6+\n\nInstallation\n------------\n\nusing pip::\n\n    pip install doipclient\n\nRunning Tests from source\n-------------------------\n\nusing pytest::\n\n    pip install pytest pytest-mock\n    pytest\n\nExample\n-------\nUpdated version of udsoncan's example using `python_doip` instead of IsoTPSocketConnection\n\n.. code-block:: python\n\n   import SomeLib.SomeCar.SomeModel as MyCar\n\n   import udsoncan\n   from doipclient import DoIPClient\n   from doipclient.connectors import DoIPClientUDSConnector\n   from udsoncan.client import Client\n   from udsoncan.exceptions import *\n   from udsoncan.services import *\n\n   udsoncan.setup_logging()\n\n   ecu_ip = '127.0.0.1'\n   ecu_logical_address = 0x00E0\n   doip_client = DoIPClient(ecu_ip, ecu_logical_address)\n   conn = DoIPClientUDSConnector(doip_client)\n   with Client(conn, request_timeout=2, config=MyCar.config) as client:\n      try:\n         client.change_session(DiagnosticSessionControl.Session.extendedDiagnosticSession)  # integer with value of 3\n         client.unlock_security_access(MyCar.debug_level)                                   # Fictive security level. Integer coming from fictive lib, let's say its value is 5\n         client.write_data_by_identifier(udsoncan.DataIdentifier.VIN, 'ABC123456789')       # Standard ID for VIN is 0xF190. Codec is set in the client configuration\n         print('Vehicle Identification Number successfully changed.')\n         client.ecu_reset(ECUReset.ResetType.hardReset)                                     # HardReset = 0x01\n      except NegativeResponseException as e:\n         print('Server refused our request for service %s with code \"%s\" (0x%02x)' % (e.response.service.get_name(), e.response.code_name, e.response.code))\n      except (InvalidResponseException, UnexpectedResponseException) as e:\n         print('Server sent an invalid payload : %s' % e.response.original_payload)\n\n      # Because we reset our UDS server, we must also reconnect/reactivate the DoIP socket\n      # Alternatively, we could have used the auto_reconnect_tcp flag on the DoIPClient\n      # Note: ECU's do not restart instantly, so you may need a sleep() before moving on\n      doip_client.reconnect()\n      client.tester_present()\n\n   # Cleanup the DoIP Socket when we're done. Alternatively, we could have used the\n   # close_connection flag on conn so that the udsoncan client would clean it up\n   doip_client.close()\n\npython-uds Support\n------------------\nThe `python-uds <https://github.com/richClubb/python-uds>`_ can also be used\nbut requires a fork until the owner merges this PR\n`Doip #63 <https://github.com/richClubb/python-uds/pull/63>`_. For now, to use\nthe port:\n\nusing pip::\n\n    git clone https://github.com/jacobschaer/python-uds\n    git checkout doip\n    cd python-uds\n    pip install .\n\nExample:\n\n.. code-block:: python\n\n   from uds import Uds\n\n   ecu = Uds(transportProtocol=\"DoIP\", ecu_ip=\"192.168.1.1\", ecu_logical_address=1)\n   try:\n       response = ecu.send([0x3E, 0x00])\n       print(response)  # This should be [0x7E, 0x00]\n   except:\n       print(\"Send did not complete\")\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jacobschaer/python-doipclient",
    "keywords": "uds,14229,iso-14229,diagnostic,automotive,13400,iso-13400,doip",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "doipclient",
    "package_url": "https://pypi.org/project/doipclient/",
    "platform": "",
    "project_url": "https://pypi.org/project/doipclient/",
    "project_urls": {
      "Homepage": "https://github.com/jacobschaer/python-doipclient"
    },
    "release_url": "https://pypi.org/project/doipclient/1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Diagnostic over IP (DoIP) client implementing ISO-13400-2.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15075253,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b50c29c33e0401d3aa6c01c1fe45567b327534f86c22e66d2ef6a55e71d00e3",
        "md5": "4a114a53844c2385bbff21547535a922",
        "sha256": "9669cc544a9f436110786fc64818bfd9e4bb5ac42e2985a88e45eb35fb6a66b8"
      },
      "downloads": -1,
      "filename": "doipclient-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4a114a53844c2385bbff21547535a922",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19009,
      "upload_time": "2021-09-11T19:57:58",
      "upload_time_iso_8601": "2021-09-11T19:57:58.813455Z",
      "url": "https://files.pythonhosted.org/packages/6b/50/c29c33e0401d3aa6c01c1fe45567b327534f86c22e66d2ef6a55e71d00e3/doipclient-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1bd4f8969d17cbcc07ce38fd88d496929ee61efd0d312d1f919192f0f52b6408",
        "md5": "f29e52c29f7db2573d95e8f21a5e6e41",
        "sha256": "a27d4e69c99cf6c369502570dbee731982a08ed02e2336f317bc803223f8415a"
      },
      "downloads": -1,
      "filename": "doipclient-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f29e52c29f7db2573d95e8f21a5e6e41",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16420,
      "upload_time": "2021-09-11T19:58:00",
      "upload_time_iso_8601": "2021-09-11T19:58:00.497954Z",
      "url": "https://files.pythonhosted.org/packages/1b/d4/f8969d17cbcc07ce38fd88d496929ee61efd0d312d1f919192f0f52b6408/doipclient-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}