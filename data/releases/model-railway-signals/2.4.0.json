{
  "info": {
    "author": "johnrm174",
    "author_email": "johnrm17418@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# model-railway-signalling\nA model railway signalling library written in Python primarily intended for the Raspberry Pi, but will run on other platforms \n(albeit without some of the external interfacing functions). For details of the \"Public\" API - scroll down the page\n\nAn interface to the Pi-SPROG-3 DCC Command station enables DCC control of the signals and points out on the layout. \nA GPIO interface allows external train detectors such as the BlockSignalling BOD2-NS to be connected in via opto-isolators.\nA MQTT interface enables multiple signalling applications to be networked together, sharing signal and track section states.\n\nAll of the functions for creating and managing 'signals', 'points', 'sections' and 'sensors' have been developed as a Python Package \nto promote re-use across other layouts. This includes functions to support the interlocking of signals and points to enable \nfully prototypical signalling schemes to be developed. The signals and points opjects can be easily mapped to one or more DCC \naddresses in a manner that should be compatible with the majority of DCC signal/points decoders currently on the market. \nTrack sensors can also be easily integrated to provide 'signal passed' events, enabling full automatic control.\n\nMost types of colour light signals, semaphore signals, ground position light signals and ground disc signals are supported.\n\nNote that I have tried to make the package platform independent so you can use it to develop your own layout signalling schemes \nwithout a Raspberry Pi or the associated Pi-SPROG-3 DCC Command station (track sensors can be manually 'triggered' via the\nlayout schematic to ensure your code is doing what its supposed to do). Full logging is provided to help you develop/debug \nyour own schemes - just set the log level to INFO to see what the package is doing 'under the hood'. And when you do enable\nthe DCC control aspects, a log level of DEBUG will show you the commands being sent out to the Pi-SPROG-3\n\nComments and suggestions welcome - but please be kind - the last time I coded anything it was in Ada96 ;)\n\n![Example Screenshot](https://github.com/johnrm174/model-railway-signalling/blob/main/README_screenshot1.png)\n\n## Installation\nFor a first time installation use:\n<pre>\n$ python3 -m pip install model-railway-signals \n</pre>\nTo upgrade to the latest version use:\n<pre>\n$ python3 -m pip install --upgrade model-railway-signals \n</pre>\nYou may need to ensure you have the latest version of pip installed:\n<pre>\n$ python3 -m pip install --upgrade pip\n</pre>\n\n## Using the package\n\nTo use the \"public\" functions for developing your own layout signalling system:\n<code> from model_railway_signals import * </code>\n\nSome examples are included in the repository: https://github.com/johnrm174/model-railway-signalling:\n\n<pre>\n'test_simple_example.py' - a simple example of how to use the \"signals\" and \"points\" and \"sections\"\n           modules to create a basic track schematic with interlocked signals/points and semi-automation \n           of signals using external sensors to provide \"signal passed\" events as the train progresses \n           across the schematic. Also includes DCC Mapping examples (for both signals and points).\n\n'test_semaphore_example.py' - effectively the same example as above, but using sempahore signals. \n           Includes DCC Mapping examples for the Semaphore signals (different to colour lights).\n\n'test_approach_control.py' - an example of using \"approach control\" for automation of junction signals. This \n           is where a signal displays a more restrictive aspect (either red or yellow) when a lower-speed \n           divergent route is set, forcing the approaching train to slow down and be prepared to stop. As \n           the train approaches, the signal is \"released\", allowing the train to proceed past the signal \n           and onto the divergent route. For Colour light signals, examples of \"Approach on Red\" and \n           \"Approach on Yellow\" are provided (for \"Approach on yellow\", the signals behind will show the \n           correct flashing yellow aspects. For Semaphore signals, an example of using approach control\n           for semi-automating all the home signals within a block section is provided\n\n'test_networking_1/2.py' - an example of how to network multiple signalling applications (potentially hosted \n           on seperate computers) together via an external MQTT broker. This demonstrates how signal states,\n           \"signal passed\" events and track occupancy sections can be shared between applications\n\n'test_harman-signalist_sc1.py'- developed primarily for testing using the Harmann Signallist SC1 decoder. \n           Enables the various modes to be selected (includes programming of CVs) and then tested. I used \n           this decoder as it provided the most flexibility for some of my more complex signal types.\n           Note that some of the modes will be similar/identical to other manufacturer's DCC signals.\n\n'test_colour_light_signals.py'- developed primarily for testing, but it does provide an example of every \n           signal type and all the control features currently supported.\n\n'test_semaphore_signals.py'- similar to the above developed primarily for testing, but it does provide  \n           an example of every signal type and all the control features currently supported.\n\n</pre>\n\nOr alternatively, go to https://github.com/johnrm174/layout-signalling-scheme to see the scheme for my layout\n\n## Point Functions\n<pre>\npoint_type (use when creating points)\n  point_type.RH\n  point_type.LH\n\npoint_callback_type (tells the calling program what has triggered the callback):\n  point_callback_type.point_switched (point has been switched)\n  point_callback_type.fpl_switched (facing point lock has been switched)\n\ncreate_point - Creates a point object and returns a list of the tkinter drawing objects (lines) that \n               make up the point (so calling programs can later update them if required (e.g. change \n               the colour of the lines to represent the route that has been set up)\n             - Returned list comprises: [straight blade, switched blade, straight route ,switched route]\n  Mandatory Parameters:\n      Canvas - The Tkinter Drawing canvas on which the point is to be displayed\n      point_id:int - The ID for the point - also displayed on the point button\n      pointtype:point_type - either point_type.RH or point_type.LH\n      x:int, y:int - Position of the point on the canvas (in pixels)\n      colour:str - Any tkinter colour can be specified as a string\n  Optional Parameters:\n      orientation:int- Orientation in degrees (0 or 180) - Default is zero\n      point_callback - The function to call when a point button is pressed - default is no callback\n                        Note that the callback function returns (item_id, callback type)\n      reverse:bool - If the switching logic is to be reversed - Default is False\n      fpl:bool - If the point is to have a Facing point lock (FPL) - Default is False (no FPL)\n      also_switch:int - the Id of another point to automatically switch with this point - Default none\n      auto:bool - If the point is to be fully automatic (e.g switched by another point) - Default False.\n\nlock_point(*point_id:int) - use for point/signal interlocking (multiple Point_IDs can be specified)\n\nunlock_point(*point_id:int) - use for point/signal interlocking (multiple Point_IDs can be specified)\n\ntoggle_point(point_id:int) - use for route setting (can use 'point_switched' to find the state first)\n\ntoggle_fpl(point_id:int) - use for route setting (can use 'fpl_active' to find the state first)\n\npoint_switched (point_id:int) - returns the state of the point (True/False) - to support point/signal interlocking\n\nfpl_active (point_id:int) - returns the state of the FPL (True/False) - to support point/signal interlocking\n                          - Will always return True if the point does not have a Facing point Lock \n</pre>\n\n## Signal Functions\n<pre>\nCurrently supported signal types:\n\n    Colour Light Signals - 3 or 4 aspect or 2 aspect (home, distant or red/ylw)\n          - with or without a position light subsidary signal\n          - with or without route indication feathers (maximum of 5)\n          - with or without a theatre type route indicator\n          - With or without a \"Signal Passed\" Button\n          - With or without a \"Approach Release\" Button\n          - Main signal manual or fully automatic\n    Semaphore Signals - Home or Distant\n          - with or without junction arms (RH1, RH2, LH1, LH2 arms supported)\n          - with or without subsidaries (Main, LH1, LH2, RH1, RH2 arms supported) - Home signals only\n          - with or without a theatre type route indicator (for Home signals only)\n          - With or without a \"Approach Release\" Button\n          - Main signal manual or fully automatic\n    Ground Position Light Signals\n          - normal ground position light or shunt ahead position light\n          - either early or modern (post 1996) types\n    Ground Disc Signals\n          - normal ground disc (red banner) or shunt ahead ground disc (yellow banner)\n\nSummary of features supported by each signal type:\n\n    Colour Light signals\n           - set_route_indication (Route Type and theatre text)\n           - update_signal (based on a signal Ahead) - apart from 2 Aspect Home and Red/Yellow\n           - toggle_signal / toggle_subsidary\n           - lock_subsidary / unlock_subsidary\n           - lock_signal / unlock_signal\n           - set_signal_override / clear_signal_override\n           - set_approach_control (Release on Red or Yellow) / clear_approach_control\n           - trigger_timed_signal\n           - query signal state (signal_clear, subsidary_clear, signal_overridden, approach_control_set)\n    Semaphore signals:\n           - set_route_indication (Route Type and theatre text)\n           - update_signal (based on a signal Ahead) - for home signals with a secondary distant arm\n           - toggle_signal / toggle_subsidary\n           - lock_subsidary / unlock_subsidary\n           - lock_signal / unlock_signal\n           - set_signal_override / clear_signal_override\n           - set_approach_control (Release on Red only) / clear_approach_control\n           - trigger_timed_signal\n           - query signal state (signal_clear, subsidary_clear, signal_overridden, approach_control_set)\n    Ground Position Colour Light signals:\n           - lock_signal / unlock_signal\n           - set_signal_override / clear_signal_override\n           - query signal state (signal_clear, signal_overridden)\n    Ground Disc signals\n           - lock_signal / unlock_signal\n           - set_signal_override / clear_signal_override\n           - query signal state (signal_clear, signal_overridden)\n\nPublic types and functions:\n\nsignal_sub_type (use when creating colour light signals):\n    signal_sub_type.home         (2 aspect - Red/Green)\n    signal_sub_type.distant      (2 aspect - Yellow/Green\n    signal_sub_type.red_ylw      (2 aspect - Red/Yellow\n    signal_sub_type.three_aspect (3 aspect - Red/Yellow/Green)\n    signal_sub_type.four_aspect  (4 aspect - Red/Yellow/Double-Yellow/Green)\n\nroute_type (use for specifying the route):\n    route_type.NONE   (no route indication - i.e. not used)\n    route_type.MAIN   (main route)\n    route_type.LH1    (immediate left)\n    route_type.LH2    (far left)\n    route_type.RH1    (immediate right)\n    route_type.RH2    (rar right)\nThese equate to the route feathers for colour light signals or the Sempahore junction \"arm\":\n\nsignal_state_type(enum.Enum):\n    DANGER               (colour light & semaphore signals)\n    PROCEED              (colour light & semaphore signals)\n    CAUTION              (colour light & semaphore signals)\n    PRELIM_CAUTION       (colour light signals only)\n    CAUTION_APP_CNTL     (colour light signals only - CAUTION but subject to RELEASE ON YELLOW)\n    FLASH_CAUTION        (colour light signals only- when the signal ahead is CAUTION_APP_CNTL)\n    FLASH_PRELIM_CAUTION (colour light signals only- when the signal ahead is FLASH_CAUTION)\n\nsig_callback_type (tells the calling program what has triggered the callback):\n    sig_callback_type.sig_switched (signal has been switched)\n    sig_callback_type.sub_switched (subsidary signal has been switched)\n    sig_callback_type.sig_passed (\"signal passed\" button activated - or triggered by a Timed signal)\n    sig_callback_type.sig_updated (signal aspect has been updated as part of a timed sequence)\n    sig_callback_type.sig_released (signal \"approach release\" button has been activated)\n\ncreate_colour_light_signal - Creates a colour light signal\n  Mandatory Parameters:\n      Canvas - The Tkinter Drawing canvas on which the point is to be displayed\n      sig_id:int - The ID for the signal - also displayed on the signal button\n      x:int, y:int - Position of the signal on the canvas (in pixels) \n  Optional Parameters:\n      signal_subtype:sig_sub_type - type of signal to create - Default is signal_sub_type.four_aspect\n      orientation:int- Orientation in degrees (0 or 180) - Default is zero\n      sig_callback:name - Function to call when a signal event happens - Default is no callback\n                        Note that the callback function returns (item_id, callback type)\n      sig_passed_button:bool - Creates a \"signal Passed\" button for automatic control - Default False\n      approach_release_button:bool - Creates an \"Approach Release\" button - Default False\n      position_light:bool - Creates a subsidary position light signal - Default False\n      lhfeather45:bool - Creates a LH route indication feather at 45 degrees - Default False\n      lhfeather90:bool - Creates a LH route indication feather at 90 degrees - Default False\n      rhfeather45:bool - Creates a RH route indication feather at 45 degrees - Default False\n      rhfeather90:bool - Creates a RH route indication feather at 90 degrees - Default False\n      mainfeather:bool - Creates a MAIN route indication feather - Default False\n      theatre_route_indicator:bool -  Creates a Theatre Type route indicator - Default False\n      refresh_immediately:bool - When set to False the signal aspects will NOT be automaticall updated \n                when the signal is changed and the external programme will need to call the seperate \n                'update_signal' function. Primarily intended for use with 3/4 aspect signals, where the\n                displayed aspect will depend on the signal ahead if the signal is clear - Default True \n      fully_automatic:bool - Creates a signal without a manual control button - Default False\n\ncreate_semaphore_signal - Creates a Semaphore signal\n  Mandatory Parameters:\n      Canvas - The Tkinter Drawing canvas on which the point is to be displayed\n      sig_id:int - The ID for the signal - also displayed on the signal button\n      x:int, y:int - Position of the point on the canvas (in pixels) \n  Optional Parameters:\n      distant:bool - True to create a Distant signal - False to create Home signal - default False\n      associated_home:bool - Option only valid when creating distant signals - Set to True to associate\n                             the distant signal with a previously created home signal - default False\n                             (this option enables a distant signal to \"share\" the same post as the\n                              home signal - specify the same x and y coordinates as the home signal) \n      orientation:int - Orientation in degrees (0 or 180) - Default is zero\n      sig_callback:name - Function to call when a signal event happens - Default is no callback\n                          Note that the callback function returns (item_id, callback type)\n      sig_passed_button:bool - Creates a \"signal Passed\" button for automatic control - Default False\n      approach_release_button:bool - Creates an \"Approach Release\" button - Default False\n      main_signal:bool - To create a signal arm for the main route - default True\n                      (Only set this to False for the case of creating a distant signal \"associated \n                       with\" a home signal where a distant arm for the main route is not required)\n      lh1_signal:bool - To create a LH1 post with a main (junction) arm - default False\n      lh2_signal:bool - To create a LH2 post with a main (junction) arm - default False\n      rh1_signal:bool - To create a RH1 post with a main (junction) arm - default False\n      rh2_signal:bool - To create a RH2 post with a main (junction) arm - default False\n      main_subsidary:bool - To create a subsidary signal under the \"main\" signal - default False\n      lh1_subsidary:bool - To create a LH1 post with a subsidary arm - default False\n      lh2_subsidary:bool - To create a LH2 post with a subsidary arm - default False\n      rh1_subsidary:bool - To create a RH1 post with a subsidary arm - default False\n      rh2_subsidary:bool - To create a RH2 post with a subsidary arm - default False\n      theatre_route_indicator:bool -  Creates a Theatre Type route indicator - Default False\n      refresh_immediately:bool - When set to False the signal aspects will NOT be automaticall updated \n                when the signal is changed and the external programme will need to call the seperate \n                'update_signal' function. Primarily intended for use with home signals that have a\n                secondary distant arm, which will reflect the state of the signal ahead (i.e. if the\n                signal ahead is at DANGER then the secondary distant arm will be ON) - Default True \n      fully_automatic:bool - Creates a signal without a manual control button - Default False\n\ncreate_ground_position_signal - create a ground position light signal\n  Mandatory Parameters:\n      Canvas - The Tkinter Drawing canvas on which the point is to be displayed\n      sig_id:int - The ID for the signal - also displayed on the signal button\n      x:int, y:int - Position of the signal on the canvas (in pixels) \n  Optional Parameters:\n      orientation:int- Orientation in degrees (0 or 180) - Default is zero\n      sig_callback:name - Function to call when a signal event happens - Default is no callback\n                        Note that the callback function returns (item_id, callback type)\n      sig_passed_button:bool - Creates a \"signal Passed\" button for automatic control - Default False\n      shunt_ahead:bool - Specifies a shunt ahead signal (yellow/white aspect) - default False\n      modern_type: bool - Specifies a modern type ground position signal (post 1996) - Default False\n\ncreate_ground_disc_signal - Creates a ground disc type signal\n  Mandatory Parameters:\n      Canvas - The Tkinter Drawing canvas on which the point is to be displayed\n      sig_id:int - The ID for the signal - also displayed on the signal button\n      x:int, y:int - Position of the signal on the canvas (in pixels) \n Optional Parameters:\n      orientation:int- Orientation in degrees (0 or 180) - Default is zero\n      sig_callback:name - Function to call when a signal event happens - Default is no callback\n                        Note that the callback function returns (item_id, callback type)\n      sig_passed_button:bool - Creates a \"signal Passed\" button for automatic control - Default False\n      shunt_ahead:bool - Specifies a shunt ahead signal (yellow banner) - default False (red banner)\n\nset_route - Set (and change) the route indication (either feathers or theatre text)\n  Mandatory Parameters:\n      sig_id:int - The ID for the signal\n  Optional Parameters:\n      route:signals_common.route_type - MAIN, LH1, LH2, RH1 or RH2 - default 'NONE'\n      theatre_text:str - The text to display in the theatre route indicator - default \"NONE\"\n\nupdate_signal - update the signalaspect based on the aspect of a signal ahead - Primarily\n                intended for 3/4 aspect colour light signals but can also be used to update \n                2-aspect distant signals (semaphore or colour light) on the home signal ahead\n  Mandatory Parameters:\n      sig_id:int - The ID for the signal\n  Optional Parameters:\n      sig_ahead_id:int/str - The ID for the signal \"ahead\" of the one we want to update.\n               Either an integer representing the ID of the signal created on our schematic,\n               or a string representing the identifier of an signal on an external MQTT node\n               Default = \"None\" (no signal ahead to take into account when updating the signal)\n\ntoggle_signal(sig_id:int) - to support route setting (use 'signal_clear' to find the switched state)\n\ntoggle_subsidary(sig_id:int) - to support route setting (use 'subsidary_clear' to find the switched state)\n\nlock_signal(*sig_id:int) - for point/signal interlocking (multiple Signal_IDs can be specified)\n\nunlock_signal(*sig_id:int) - for point/signal interlocking (multiple Signal_IDs can be specified)\n\nlock_subsidary(*sig_id:int) - for point/signal interlocking (multiple Signal_IDs can be specified)\n\nunlock_subsidary(*sig_id:int) - for point/signal interlocking (multiple Signal_IDs can be specified)\n\nsignal_clear(sig_id:int) - returns the SWITCHED state of the signal - i.e the state of the signal button\n                       (True='OFF') - use for external point/signal interlocking functions\n\nsubsidary_clear(sig_id:int) - returns the SWITCHED state of the subsidary - i.e the state of the subsidary\n                        button (True='OFF') - use for external point/signal interlocking functions\n\nsignal_state(sig_id:int/str) - returns the DISPLAYED state of the signal - which can be different to\n                       the SWITCHED state if the signal is OVERRIDDEN or subject to APPROACH CONTROL.\n                       - Use this function when you need to get the actual state (in terms of aspect)\n                       that the signal is displaying - returns 'signal_state_type' (see above).\n                       - Note that for this function, the sig_id can be specified either as an integer \n                       (representing the ID of a signal on the localschematic), or a string (representing\n                       the identifier of an signal on an external MQTT node)\n\nset_signal_override (sig_id*:int) - Overrides the signal to DANGER (can specify multiple sig_ids)\n\nclear_signal_override (sig_id*:int) - Reverts signal to the non-overridden state (can specify multiple sig_ids)\n\ntrigger_timed_signal - Sets the signal to DANGER and then cycles through the aspects back to PROCEED\n                      - If a start delay > 0 is specified then a 'sig_passed' callback event is generated\n                      - when the signal is changed to DANGER - For each subsequent aspect change (all the\n                      - way back to PROCEED) a 'sig_updated' callback event will be generated\n  Mandatory Parameters:\n      sig_id:int - The ID for the signal\n  Optional Parameters:\n      start_delay:int - Delay (in seconds) before changing to DANGER (default=5)\n      time_delay:int - Delay (in seconds) for cycling through the aspects (default=5)\n\nset_approach_control - Used when a diverging route has a lower speed restriction to the main line\n                       Puts the signal into \"Approach Control\" Mode where the signal will display a more \n                       restrictive aspect/state (either DANGER or CAUTION) to approaching trains. As the\n                       Train approaches, the signal will then be \"released\" to display its \"normal\" aspect.\n                       When a signal is in \"approach control\" mode the signals behind will display the \n                       appropriate aspects (when updated based on the signal ahead). These would be the\n                       normal aspects for \"Release on Red\" but for \"Release on Yellow\", the signals behind  \n  Mandatory Parameters:\n      sig_id:int - The ID for the signal\n  Optional Parameters:\n      release_on_yellow:Bool - True = Yellow Approach aspect, False = Red Approach aspect (default=False)\n\nclear_approach_control - This \"releases\" the signal to display the normal aspect and should be called when\n                         a train is approaching the signal. Note that signals can also be released when the\n                         \"release button\" (displayed just in front of the signal if specified when the signal\n                         was created) is activated - manually or via an external sensor event\n      sig_id:int - The ID for the signal\n\nsignal_overridden (sig_id:int) - returns the signal override state (True='overridden')\n                 Function DEPRECATED (will be removed from future releases) - use signal_state instead\n\napproach_control_set (sig_id:int) - returns if the signal is subject to approach control (True='active')\n                 Function DEPRECATED (will be removed from future releases) - use signal_state instead\n</pre>\n\n## Track Occupancy Functions\n<pre>\nsection_callback_type (tells the calling program what has triggered the callback):\n     section_callback_type.section_updated - The section has been updated by the user\n\ncreate_section - Creates a Track Occupancy section object\n  Mandatory Parameters:\n      Canvas - The Tkinter Drawing canvas on which the section is to be displayed\n      section_id:int - The ID to be used for the section \n      x:int, y:int - Position of the section on the canvas (in pixels)\n  Optional Parameters:\n      section_callback - The function to call if the section is manually toggled - default: null\n                        Note that the callback function returns (item_id, callback type)\n      editable:bool - Whether the section can be manually switched and/or edited (default = True)\n      label:str - The label to display on the section when occupied - default: \"OCCUPIED\"\n\nsection_occupied (section_id:int/str)- Returns the state of the section (True=Occupied, False=Clear)\n                  - Note that for this function, the section_id can be specified either as an integer \n                    (representing the ID of a signal on the local schematic), or a string (representing\n                    the identifier of an signal on an external MQTT node)\n\nsection_label (section_id:int/str)- Returns the 'label' of the section (as a string)\n                  - Note that for this function, the section_id can be specified either as an integer \n                    (representing the ID of a signal on the local schematic), or a string (representing\n                    the identifier of an signal on an external MQTT node)\n\nset_section_occupied - Sets the specified section to \"OCCUPIED\" (and updates the 'label' if required)\n  Mandatory Parameters:\n      section_id:int - The ID to be used for the section \n  Optional Parameters:\n      label:str - An updated label to display when occupied (if omitted the label will stay the same)\n\nclear_section_occupied (section_id:int) - Sets the specified section to \"CLEAR\"\n                     - also returns the current value of the Section Lable (as a string) to allow this\n                       to be 'passed' to the next section (via the set_section_occupied function)\n  Mandatory Parameters:\n      section_id:int - The ID to be used for the section \n</pre>\n\n## Track Sensor Functions\n<pre>\nsensor_callback_type (tells the calling program what has triggered the callback):\n    track_sensor_callback_type.sensor_triggered - The section has been toggled by the user\n\ncreate_sensor - Creates a sensor object\n  Mandatory Parameters:\n      sensor_id:int - The ID to be used for the sensor \n      gpio_channel:int - The GPIO port number  to use for the sensor (not the physical pin number):\n  Optional Parameters:\n      sensor_timeout:float - The time period during which further triggers are ignored - default = 3.0 secs\n      trigger_period:float - Duration that the sensor needs to remain active before triggering - default = 0.001 secs\n      signal_passed:int    - Raise a \"signal passed\" event for the specified signal ID when triggered - default = None\n      signal_approach:int  - Raise an \"approach release\" event for the specified signal ID when triggered - default = None\n      sensor_callback      - The function to call when triggered (if signal events have not been specified) - default = None\n                                  Note that the callback function returns (item_id, callback type)\n\nsensor_active (sensor_id:int) - Returns the current state of the sensor (True/False)\n</pre>\n\n## DCC Address Mapping Functions\n\nThese functions provide the means to map the signals and points on the layout to the series of DCC \ncommands needed to control them.\n\nFor the main signal aspects, either \"Truth Table\" or \"Event Driven\" mappings can be defined\nThe \"Event Driven\" mapping uses a single dcc command (address/state) to change the signal to \nthe required aspect - as used by the TrainTech DCC signals. The \"Truth Table\" mapping provides\nmaximum flexibility for commanding DCC Signals as each \"led\" can either be controlled individually \n(i.e. Each LED of the signal is controlled via its own individual address) or via a \"Truth Table\" \n(where the displayed aspect will depend on the binary \"code\" written to 2 or more DCC addresses)\nThis has been successfully tested with the Harman Signallist SC1 DCC Decoder in various modes\n\n\"Truth Table\" or \"Event Driven\" mappings can alos be defined for the Route indications supported by\nthe signal (feathers or theatre). If the signal has a subsidary associated with it, this is always\nmapped to a single DCC address.\n\nNot all signals/points that exist on the layout need to have a DCC Mapping configured - If no DCC mapping \nhas been defined, then no DCC commands will be sent. This provides flexibility for including signals on the \nschematic which are \"off scene\" or for progressively \"working up\" the signalling scheme for a layout.\n<pre>\nmap_dcc_signal - Map a signal to one or more DCC Addresses\n   Mandatory Parameters:\n      sig_id:int - The ID for the signal to create a DCC mapping for\n   Optional Parameters:\n      auto_route_inhibit:bool - If the signal inhibits route indications at DANGER (default=False)\n      proceed[[add:int,state:bool],] - List of DCC addresses/states (default = no mapping)\n      danger [[add:int,state:bool],] - List of DCC addresses/states (default = No mapping)\n      caution[[add:int,state:bool],] - List of DCC addresses/states (default = No mapping)\n      prelim_caution[[add:int,state:bool],] - List of DCC addresses/states (default = No mapping)\n      LH1[[add:int,state:bool],] - List of DCC addresses/states for \"LH45\" (default = No Mapping)\n      LH2[[add:int,state:bool],] - List of DCC addresses/states for \"LH90\" (default = No Mapping)\n      RH1[[add:int,state:bool],] - List of DCC addresses/states for \"RH45\" (default = No Mapping)\n      RH2[[add:int,state:bool],] - List of DCC addresses/states for \"RH90\" (default = No Mapping)\n      MAIN[[add:int,state:bool],] - List of DCC addresses/states for \"MAIN\" (default = No Mapping)\n      NONE[[add:int,state:bool],] - List of DCC addresses/states to inhibit routes (default = No Mapping)\n              Note that you should ALWAYS provide mappings for NONE if you are using feather route indications\n              unless the DCC signal automatically inhibits route indications when displaying a DANGER aspect\n      THEATRE[[\"character\",[add:int,state:bool],],] - List of possible theatre indicator states (default = No Mapping)\n              Each entry comprises the \"character\" and the associated list of DCC addresses/states\n              \"#\" is a special character - which means inhibit all indications (when signal is at danger)\n              Note that you should ALWAYS provide mappings for '#' if you are using a theatre route indicator\n              unless the DCC signal itself inhibits route indications when displaying a DANGER aspect\n      subsidary:int - Single DCC address for the \"position light\" indication (default = No Mapping)\n\n    An example DCC mapping for a  Signalist SC1 decoder with a base address of 1 (CV1=5) is included below.\n    This assumes the decoder is configured in \"8 individual output\" Mode (CV38=8). In this example we are using\n    outputs A,B,C,D to drive our signal with E & F driving the feather indications. The Signallist SC1 uses 8 \n    consecutive addresses in total (which equate to DCC addresses 1 to 8 for this example). The DCC addresses for\n    each LED are: RED = 1, Green = 2, YELLOW1 = 3, YELLOW2 = 4, Feather1 = 5, Feather2 = 6.\n\n           map_dcc_signal (sig_id = 2,\n                danger = [[1,True],[2,False],[3,False],[4,False]],\n                proceed = [[1,False],[2,True],[3,False],[4,False]],\n                caution = [[1,False],[2,False],[3,True],[4,False]],\n                prelim_caution = [[1,False],[2,False],[3,True],[4,True]],\n                LH1 = [[5,True],[6,False]], \n                MAIN = [[6,True],[5,False]], \n                NONE = [[5,False],[6,False]] )\n\n     A second example DCC mapping, but this time with a Feather Route Indication, is shown below. In this case,\n     the main signal aspects are configured identically to the first example. The only difference is the THEATRE\n     mapping - where a display of \"1\" is enabled by DCC Address 5 and \"2\" by DCC Address 6. Note the special \"#\"\n     character mapping - which defines the DCC commands that need to be sent to inhibit the theatre display.\n\n            map_dcc_signal (sig_id = 2,\n                danger = [[1,True],[2,False],[3,False],[4,False]],\n                proceed = [[1,False],[2,True],[3,False],[4,False]],\n                caution = [[1,False],[2,False],[3,True],[4,False]],\n                prelim_caution = [[1,False],[2,False],[3,True],[4,True]],\n                THEATRE = [ [\"#\",[[5,False],[6,False]]],\n                            [\"1\",[[6,False],[5,True]]],\n                            [\"2\",[[5,False],[6,True]]]  ] )\n\nmap_traintech_signal - Generate the mappings for a TrainTech signal\n   Mandatory Parameters:\n      sig_id:int - The ID for the signal to create a DCC mapping for\n      base_address:int - The base address of the signal (the signal will take 4 consecutive addresses)\n   Optional Parameters:\n      route_address:int - The address for the route indicator (Feather or Theatre) - Default = 0 (no indicator)\n      theatre_route:str - The character to be associated with the Theartre display - Default = \"NONE\" (no Text)\n      feather_route:route_type - The route to be associated with the feather - Default = NONE (no route)\n\nmap_semaphore_signal - Generate the mappings for a semaphore signal (DCC address mapped to each arm)\n   Mandatory Parameters:\n      sig_id:int - The ID for the signal to create a DCC mapping for\n      main_signal:int     - single DCC address for the main signal arm (default = No Mapping)\n   Optional Parameters:\n      main_subsidary:int  - single DCC address for the main subsidary arm (default = No Mapping)\n      lh1_signal:int      - single DCC address for the LH1 signal arm (default = No Mapping)\n      lh1_subsidary:int   - single DCC address for the LH1 subsidary arm (default = No Mapping)\n      lh2_signal:int      - single DCC address for the LH2 signal arm (default = No Mapping)\n      lh2_subsidary:int   - single DCC address for the LH2 subsidary arm (default = No Mapping)\n      rh1_signal:int      - single DCC address for the RH1 signal arm  (default = No Mapping)\n      rh1_subsidary:int   - single DCC address for the RH1 subsidary arm (default = No Mapping)\n      rh2_signal:int      - single DCC address for the RH2 signal arm  (default = No Mapping)\n      rh2_subsidary:int   - single DCC address for the RH2 subsidary arm (default = No Mapping)\n      THEATRE[[\"character\",[add:int,state:bool],],] - List of possible theatre indicator states (default = No Mapping)\n              Each entry comprises the \"character\" and the associated list of DCC addresses/states\n              \"#\" is a special character - which means inhibit all indications (when signal is at danger)\n              Note that you should ALWAYS provide mappings for '#' if you are using a theatre route indicator\n              unless the DCC signal itself inhibits route indications when displaying a DANGER aspect\n\n     Semaphore signal DCC mappings assume that each main/subsidary signal arm is mapped to a seperate DCC address.\n     In this example, we are mapping a signal with MAIN and LH signal arms and a subsidary arm for the MAIN route.\n     Note that if the semaphore signal had a theatre type route indication, then this would be mapped in exactly\n     the same was as for the Colour Light Signal example above)\n\n           map_semaphore_signal (sig_id = 2, \n                        main_signal = 1 , \n                        lh1_signal = 2 , \n                        main_subsidary = 3)\n\nmap_dcc_point\n   Mandatory Parameters:\n      point_id:int - The ID for the point to create a DCC mapping for\n      address:int - the single DCC address for the point\n   Optional Parameters:\n      state_reversed:bool - Set to True to reverse the DCC logic (default = false)\n</pre>\n\n## Pi-Sprog Interface Functions\n\nThis provides a basic CBUS interface fpor communicating with the Pi-SPROG3 via the Raspberry Pi UART. It does not provide\na fully-functional interface for all DCC command and control functions - just the minimum set needed to support the driving\nof signals and points via a selection of common DCC Accessory decoders. Basic CV Programming is also supported - primarily \nas an aid to testing. For full decoder programming the recommendation is to use JRMI DecoderPro.\n<pre>\ninitialise_pi_sprog - Open and configures the serial comms port to the Pi Sprog\n   Optional Parameters:\n      port_name:str - The Serial port to use for communicating with the Pi-SPROG 3 - Default=\"/dev/serial0\",\n      baud_rate:int - The baud rate to use for the serial port - Default = 115200,\n      dcc_debug_mode:bool - Set to True to log the CBUS commands being sent to the Pi-SPROG (default = False). \n                          - If set to True, this initialisation function will also Request and report the \n                            command station status (from the Pi-SPROG-3)\n\nservice_mode_write_cv - programmes a CV in direct bit mode and waits for response\n                      (events are only sent if we think the track power is currently switched on)\n                      (if acknowledgement isn't received within 5 seconds then the request times out)\n   Mandatory Parameters:\n      cv:int - The CV (Configuration Variable) to be programmed\n      value:int - The value to programme\n\nrequest_dcc_power_on - sends a request to switch on the track power and waits for acknowledgement\n                     (requests are only sent if the Pi Sprog Comms Port has been successfully opened/configured)\n       returns True if we have received acknowledgement that Track Power has been turned on\n       returns False if acknowledgement isn't received within 5 seconds (i.e. request timeout)\n\nrequest_dcc_power_off - sends a request to switch off the track power and waits for acknowledgement\n                     (requests are only sent if the Pi Sprog Comms Port has been successfully opened/configured)\n       returns True if we have received acknowledgement that Track Power has been turned off\n       returns False if acknowledgement isn't received within 5 seconds (i.e. request timeout)\n</pre>\n\n## MQTT Networking Functions\n\nThese functions provides a basic MQTT Client interface for the Model Railway Signalling Package, allowing\nmultiple signalling applications (running on different computers) to share a single Pi-Sprog DCC interface\nand to share signal states and signal updated events across a MQTT broker network.\n\nFor example, you could run one signalling application on a computer without a Pi-Sprog (e.g. a Windows Laptop),\nconfigure that node to \"publish\" its DCC command feed to the network and then configure another node (this time hosted\non a Raspberry Pi) to \"subscribe\" to the same DCC command feed and then forwarded to its local pi-Sprog DCC interface.\n\nYou can also use these features to split larger layouts into multiple signalling areas whilst still being able to \nimplement a level of automation between them. Functions are provided to publishing and subscribing to the \"state\" \nof signals (for updating signals based on the one ahead), the \"state\" of track occupancy sections (for \"passing\" \ntrains between signalling applications) and \"signal passed\" events (also for track occupancy)\n\nTo use these networking functions, you can either set up a local MQTT broker on one of the host computers\non your local network or alternatively use an 'open source' broker out there on the internet - I've been\nusing a test broker at \"mqtt.eclipseprojects.io\" (note this has no security or authentication).\n\nIf you do intend using an internet-based broker then it is important to configure it with an appropriate level\nof security. This package does support basic username/password authentication for connecting in to the broker\nbut note that these are NOT ENCRYPTED when sending over the internet unless you are also using a SSL connection.\n<pre>\nconfigure_networking - Configures the local MQTT broker client and establishes a connection to the broker\n  Mandatory Parameters:\n      broker_host:str - The fully qualified name/IP address of the MQTT broker host to be used\n      network_identifier:str - The name to use for our signalling network (can be any string)\n      node_identifier:str - The name to use for this particular node on the network (can be any string)\n  Optional Parameters:\n      broker_port:int - The network port for the broker host (default = 1883)\n      broker_username:str - the username to log into the MQTT Broker (default = None)\n      broker_password:str - the password to log into the MQTT Broker (default = None)\n      publish_dcc_commands:bool - True to publish all DCC commands to the Broker (default = False)\n      mqtt_enhanced_debugging:bool - True to enable additional debug logging (default = False)\n\nsubscribe_to_dcc_command_feed - Subcribes to the feed of DCC commands from another node on the network.\n                    All received DCC commands are automatically forwarded to the local Pi-Sprog interface.\n  Mandatory Parameters:\n      *nodes:str - The name of the node publishing the DCC command feed (multiple nodes can be specified)\n\nsubscribe_to_section_updates - Subscribe to track section updates from another node on the network \n  Mandatory Parameters:\n      node:str - The name of the node publishing the track section update feed(s)\n      sec_callback:name - Function to call when a section update is received from the remote node\n                   The callback function returns (item_identifier, section_callback_type.section_updated)\n                   where item_identifier is a string in the following format \"<node>-<sec_id>\",\n      *sec_ids:int - The sections to subscribe to (multiple Section_IDs can be specified)\n\nsubscribe_to_signal_updates - Subscribe to a signal update feed for a specified node/signal \n  Mandatory Parameters:\n      node:str - The name of the node publishing the signal state feed\n      sig_callback:name - Function to call when a signal state update is received from the remote node\n                   Note that the callback function returns (item_identifier, sig_callback_type.sig_updated)\n                   Where Item Identifier is a string in the following format \"<node>-<sig_id>\"\n      *sig_ids:int - The signals to subscribe to (multiple Signal_IDs can be specified)\n\nsubscribe_to_signal_passed_events  - Subscribe to a signal passed event feed for a specified node/signal \n  Mandatory Parameters:\n      node:str - The name of the node publishing the signal passed event feed\n      sig_callback:name - Function to call when a signal passed event is received from the remote node\n                   Note that the callback function returns (item_identifier, sig_callback_type.sig_passed)\n                   Where Item Identifier is a string in the following format \"<node>-<sig_id>\"\n      *sig_ids:int - The signals to subscribe to (multiple Signal_IDs can be specified)\n\nset_sections_to_publish_state - Enable the publication of state updates for a specified track section.\n               All subsequent state changes will be automatically published to remote subscribers\n  Mandatory Parameters:\n      *sec_ids:int - The track sections to publish (multiple Signal_IDs can be specified)\n\nset_signals_to_publish_state - Enable the publication of state updates for specified signals.\n               All subsequent state changes will be automatically published to remote subscribers\n  Mandatory Parameters:\n      *sig_ids:int - The signals to publish (multiple Signal_IDs can be specified)\n\nset_signals_to_publish_passed_events - Enable the publication of signal passed events for specified signals.\n               All subsequent events will be automatically published to remote subscribers\n  Mandatory Parameters:\n      *sig_ids:int - The signals to publish (multiple Signal_IDs can be specified)\n\n</pre>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johnrm174/model-railway-signalling",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "model-railway-signals",
    "package_url": "https://pypi.org/project/model-railway-signals/",
    "platform": "",
    "project_url": "https://pypi.org/project/model-railway-signals/",
    "project_urls": {
      "Homepage": "https://github.com/johnrm174/model-railway-signalling"
    },
    "release_url": "https://pypi.org/project/model-railway-signals/2.4.0/",
    "requires_dist": [
      "paho-mqtt",
      "pyserial"
    ],
    "requires_python": "",
    "summary": "Create your own DCC model railway signalling scheme",
    "version": "2.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16064626,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e83c561adfb6cc580e8e1262c1496a046f23aa45db872e70ef85905ab94b26a",
        "md5": "9ce57d10d46be8ca934ed57d102c3d81",
        "sha256": "036dbf1d834a49353165f1f8e47dae6972f3be0d12fce887412b4633871aef27"
      },
      "downloads": -1,
      "filename": "model_railway_signals-2.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ce57d10d46be8ca934ed57d102c3d81",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 79792,
      "upload_time": "2021-12-27T14:30:20",
      "upload_time_iso_8601": "2021-12-27T14:30:20.579691Z",
      "url": "https://files.pythonhosted.org/packages/4e/83/c561adfb6cc580e8e1262c1496a046f23aa45db872e70ef85905ab94b26a/model_railway_signals-2.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aed497960dc8242278f27f2e0e50b12299210137f2d0eb6760b1cbe40302a53b",
        "md5": "39d6641cbf27c105a3f875b9a5c4c1c0",
        "sha256": "902d6154e5a74cc8c59e0e8e0a9904b62ed18a5391dc0ebbbd261cca910fe460"
      },
      "downloads": -1,
      "filename": "model-railway-signals-2.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "39d6641cbf27c105a3f875b9a5c4c1c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 89085,
      "upload_time": "2021-12-27T14:30:23",
      "upload_time_iso_8601": "2021-12-27T14:30:23.347240Z",
      "url": "https://files.pythonhosted.org/packages/ae/d4/97960dc8242278f27f2e0e50b12299210137f2d0eb6760b1cbe40302a53b/model-railway-signals-2.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}