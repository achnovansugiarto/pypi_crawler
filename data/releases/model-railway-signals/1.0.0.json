{
  "info": {
    "author": "johnrm174",
    "author_email": "johnrm17418@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# model-railway-signalling\nA model railway signalling library written in Python for the Raspberry Pi with a DCC control of Signals and Points and train \ndetection via the GPIO ports on the Pi. For details of the \"Public\" API - scroll down the page\n\nA simple interface to the Pi-SPROG-3 DCC Command station enables DCC control of the signals and points out on the layout. \nThe GPIO interface allows external train detectors such as the BlockSignalling BOD2-NS to be connected in via opto-isolators.\n\nAll of the functions for creating and managing 'signals', 'points' and 'sections' have been developed as a Python Package \nto promote re-use across other layouts. This includes functions to support the interlocking of signals and points to enable \nfully prototypical signalling schemes to be developed. The signals and points opjects can be easily mapped to one or more DCC \naddresses in a manner that should be compatible with the majority of DCC signal/points decoders currently on the market. \nTrack sensors can also be easily integrated (via the Raspberry Pi's GPIO interface) to enable full automatic control.\n\nMost types of colour light signals (and ground position light signals) are supported. Semaphores are still on my TODO list.\n\nNote that I have tried to make the package platform independent so you can use it to develop your own layout signalling schemes \nwithout a Raspberry Pi or the associated Pi-SPROG-3 DCC Command station (track sensors can be manually 'triggered' via the\nlayout schematic to ensure your code is doing what its supposed to do). Full logging is provided to help you develop/debug \nyour own schemes - just set the log level to info to see what the package is doing 'under the hood'. And when you do enable\nthe DCC control aspects, a log level of DEBUG will show you the commands being sent out to the Pi-SPROG-3\n\nSeveral examples of using the Package are included in the repository:\n\n<pre>\n'test_simple_example.py' - a simple example of how to use the \"signals\" and \"points\" modules to create a\n           basic track schematic with interlocked signals/points. Also includes a simple DCC Mapping example\n           (1 signal and 2 points) and an external track sensor to provide a \"signal passed\" event.\n\n'test_approach_control.py' - an example of using automated \"approach control\" for junction signals. This \n           is where a signal displays a more restrictive aspect (either red or yellow) when a lower-speed \n           divergent route is set, forcing the approaching train to slow down and be prepared to stop. As \n           the train approaches, the signal is \"released\", allowing the train to proceed past the signal \n           and onto the divergent route. Examples of \"Approach on Red\" and \"Approach on Yellow\" are provided. \n           For \"Approach on yellow\", the signals behind will show the correct flashing yellow aspects.\n\n'test_harman-signalist_sc1.py'- developed primarily for testing using the Harmann Signallist SC1 decoder. \n           Enables the various modes to be selected (includes programming of CVs) and then tested. I used \n           this decoder as it provided the most flexibility for some of my more complex signal types.\n           Note that some of the modes will be similar/identical to other manufacturer's DCC signals.\n\n'test_colour_light_signals.py'- developed primarily for testing, but it does provide an example of every \n           signal type and all the control features currently supported.\n</pre>\nOr alternatively, go to https://github.com/johnrm174/layout-signalling-scheme to see the scheme for my layout\n\nComments and suggestions welcome - but please be kind - the last time I coded anything it was in Ada96 ;)\n\n## Point Functions\n<pre>\npoint_type (use when creating points)\n  point_type.RH\n  point_type.LH\n\npoint_callback_type (tells the calling program what has triggered the callback):\n  point_callback_type.point_switched (point has been switched)\n  point_callback_type.fpl_switched (facing point lock has been switched)\n\ncreate_point - Creates a point object and returns a list of the tkinter drawing objects (lines) that \n               make up the point (so calling programs can later update them if required (e.g. change \n               the colour of the lines to represent the route that has been set up)\n  Mandatory Parameters:\n      Canvas - The Tkinter Drawing canvas on which the point is to be displayed\n      point_id:int - The ID for the point - also displayed on the point button\n      pointtype:point_type - either point_type.RH or point_type.LH\n      x:int, y:int - Position of the point on the canvas (in pixels)\n      colour:str - Any tkinter colour can be specified as a string\n  Optional Parameters:\n      orientation:int- Orientation in degrees (0 or 180) - Default is zero\n      point_callback - The function to call when a point button is pressed - default is no callback\n                        Note that the callback function returns (item_id, callback type)\n      reverse:bool - If the switching logic is to be reversed - Default is False\n      fpl:bool - If the point is to have a Facing point lock (FPL) - Default is False (no FPL)\n      also_switch:int - the Id of another point to automatically switch with this point - Default none\n      auto:bool - If the point is to be fully automatic (e.g switched by another point - Default False.\n\nlock_point(*point_id) - use for point/signal interlocking (multiple Point_IDs can be specified)\n\nunlock_point(*point_id) - use for point/signal interlocking (multiple Point_IDs can be specified)\n\ntoggle_point(point_id) - use for route setting (can use 'point_switched' to find the state first)\n\ntoggle_fpl(point_id) - use for route setting (can use 'fpl_active' to find the state first)\n\npoint_switched (point_id) - returns the state of the point (True/False) - to support point/signal interlocking\n\nfpl_active (point_id) - returns the state of the FPL (True/False) - to support point/signal interlocking\n                      - Will always return True if the point does not have a Facing point Lock - to enable full \n                      - interlocking logic to be written for layouts but then inhibited for simplified control \n</pre>\n\n## Signal Functions\n<pre>\nCurrently supported types:\n   Colour Light Signals - 3 or 4 aspect or 2 aspect (home, distant or red/ylw)\n          - with or without a position light subsidary signal\n          - with or without route indication feathers (maximum of 5)\n          - with or without a theatre type route indicator\n   Ground Position Light Signals\n          - groud position light or shunt ahead position light\n          - either early or modern (post 1996) types\n\nsignal_sub_type (use when creating colour light signals):\n  signal_sub_type.home         (2 aspect - Red/Green)\n  signal_sub_type.distant      (2 aspect - Yellow/Green\n  signal_sub_type.red_ylw      (2 aspect - Red/Yellow\n  signal_sub_type.three_aspect (3 aspect - Red/Yellow/Green)\n  signal_sub_type.four_aspect  (4 aspect - Red/Yellow/Double-Yellow/Green)\n\nroute_type (use for specifying the route - thise equate to the route feathers):\n  route_type.NONE   (no route indication - i.e. not used)\n  route_type.MAIN   (main route)\n  route_type.LH1    (immediate left)\n  route_type.LH2    (far left)\n  route_type.RH1    (immediate right)\n  route_type.RH2    (rar right)\n\nsig_callback_type (tells the calling program what has triggered the callback):\n    sig_callback_type.sig_switched (signal has been switched)\n    sig_callback_type.sub_switched (subsidary signal has been switched)\n    sig_callback_type.sig_passed (\"signal passed\" button activated - or triggered by a Timed signal)\n    sig_callback_type.sig_updated (signal aspect has been updated as part of a timed sequence)\n    sig_callback_type.sig_released (signal \"approach release\" button has been activated)\n\ncreate_colour_light_signal - Creates a colour light signal\n  Mandatory Parameters:\n      Canvas - The Tkinter Drawing canvas on which the point is to be displayed\n      sig_id:int - The ID for the signal - also displayed on the signal button\n      x:int, y:int - Position of the point on the canvas (in pixels) \n  Optional Parameters:\n      signal_subtype:sig_sub_type - type of signal to create - Default is signal_sub_type.four_aspect\n      orientation:int- Orientation in degrees (0 or 180) - Default is zero\n      sig_callback:name - Function to call when a signal event happens - Default is no callback\n                        Note that the callback function returns (item_id, callback type)\n      sig_passed_button:bool - Creates a \"signal Passed\" button for automatic control - Default False\n      approach_release_button:bool - Creates an \"Approach Release\" button - Default False\n      position_light:bool - Creates a subsidary position light signal - Default False\n      lhfeather45:bool - Creates a LH route indication feather at 45 degrees - Default False\n      lhfeather90:bool - Creates a LH route indication feather at 90 degrees - Default False\n      rhfeather45:bool - Creates a RH route indication feather at 45 degrees - Default False\n      rhfeather90:bool - Creates a RH route indication feather at 90 degrees - Default False\n      mainfeather:bool - Creates a MAIN route indication feather - Default False\n      theatre_route_indicator:bool -  Creates a Theatre Type route indicator - Default False\n      refresh_immediately:bool - When set to False the signal aspects will NOT be automaticall updated \n                when the signal is changed and the external programme will need to call the seperate \n                'update_signal' function use for 3/4 aspect signals - where the displayed aspect will\n                depend on the signal ahead - Default True \n      fully_automatic:bool - Creates a signal without any manual controls - Default False\n\ncreate_ground_position_signal - create a ground position light signal\n  Mandatory Parameters:\n      Canvas - The Tkinter Drawing canvas on which the point is to be displayed\n      sig_id:int - The ID for the signal - also displayed on the signal button\n      x:int, y:int - Position of the point on the canvas (in pixels) \n  Optional Parameters:\n      orientation:int- Orientation in degrees (0 or 180) - Default is zero\n      sig_callback:name - Function to call when a signal event happens - Default is no callback\n                        Note that the callback function returns (item_id, callback type)\n      sig_passed_button:bool - Creates a \"signal Passed\" button for automatic control - Default False\n      shunt_ahead:bool - Specifies a shunt ahead signal (yellow/white aspect) - default False\n      modern_type: bool - Specifies a modern type ground position signal (post 1996) - Default False\n\nset_route_ - Set (and change) the route indication (either feathers or theatre text)\n  Mandatory Parameters:\n      sig_id:int - The ID for the signal\n  Optional Parameters:\n      route:signals_common.route_type - MAIN, LH1, LH2, RH1 or RH2 - default 'NONE'\n      theatre_text:str  - The text to display in the theatre route indicator - default \"NONE\"\n\nupdate_signal - update the aspect of a signal ( based on the aspect of a signal ahead)\n              - intended for 3 and 4 aspect and 2 aspect distant colour light signals\n  Mandatory Parameters:\n      sig_id:int - The ID for the signal\n  Optional Parameters:\n      sig_ahead_id:int - The ID for the signal \"ahead\" of the one we want to set\n\ntoggle_signal(sig_id) - use for route setting (can use 'signal_clear' to find the state first)\n\ntoggle_subsidary(sig_id) - use for route setting (can use 'subsidary_clear' to find the state first)\n\nlock_signal(*sig_id) - use for point/signal interlocking (multiple Signal_IDs can be specified)\n\nunlock_signal(*sig_id) - use for point/signal interlocking (multiple Signal_IDs can be specified)\n\nlock_subsidary(*sig_id) - use for point/signal interlocking (multiple Signal_IDs can be specified)\n\nunlock_subsidary(*sig_id) use for point/signal interlocking (multiple Signal_IDs can be specified)\n\nsignal_clear(sig_id) - returns the signal state (True='clear') - to support interlocking\n\nsubsidary_clear(sig_id) - returns the subsidary state (True='clear') - to support interlocking\n\nset_signal_override (sig_id*) - Overrides the signal and sets it to DANGER (multiple Signals can be specified)\n\nclear_signal_override (sig_id*) - Reverts the signal to its controlled state (multiple Signals can be specified)\n\npulse_signal_passed_button (sig_id) - Pulses the signal passed button - use to indicate track sensor events\n\npulse_signal_release_button (sig_id) - Pulses the approach release button - use to indicate track sensor events\n\ntrigger_timed_signal - Sets the signal to DANGER and then cycles through the aspects back to PROCEED\n                      - If a start delay >0 is specified then a 'sig_passed' callback event is generated\n                      - when the signal is changed to DANGER - For each subsequent aspect change (all the\n                      - way back to PROCEED) a 'sig_updated' callback event will be generated\n  Mandatory Parameters:\n      sig_id:int - The ID for the signal\n  Optional Parameters:\n      start_delay:int - Delay (in seconds) before changing to DANGER (default=5)\n      time_delay:int - Delay (in seconds) for cycling through the aspects (default=5)\n\nset_approach_control - Puts the signal into \"Approach Control\" Mode where the signal will display a particular\n                       aspect/state (either Red or Yellow) to approaching trains. As the Train approaches the\n                       signal, the signal will be \"released\" to display the normal aspect. Normally used for\n                       diverging routes which have a lower speed restriction to the main line. When a signal\n                       is set in \"approach control\" mode then the signals behind will display the appropriate\n                       aspects when updated (based on the signal ahead). for \"Release on Red\" these would be \n                       the normal aspects. For \"Release on Yellow\", assuming 4 aspect signals, the signals  \n                       behind will display flashing single yellow and flashing double yellow \n  Mandatory Parameters:\n      sig_id:int - The ID for the signal\n  Optional Parameters:\n      release_on_yellow:Bool - True = Yellow Approach aspect, False = Red Approach aspect (default=False)\n\nclear_approach_control - This \"releases\" the signal to display the normal aspect and should be called when\n                           a train is approaching the signal (so the signal clears in front of the driver)\n                           Note that signals can also be released when the \"release control button\" is activated\n                           (which is displayed just in front of the signal if specified at signal creation time)\n  Mandatory Parameters:\n      sig_id:int - The ID for the signal\n</pre>\n\n## Track Occupancy Functions\n<pre>\nsection_callback_type (tells the calling program what has triggered the callback):\n    section_callback_type.section_switched - The section has been toggled (occupied/clear) by the user\n\ncreate_section - Creates a Track Occupancy section object\n  Mandatory Parameters:\n      Canvas - The Tkinter Drawing canvas on which the section is to be displayed\n      section_id:int - The ID to be used for the section \n      x:int, y:int - Position of the section on the canvas (in pixels)\n  Optional Parameters:\n      section_callback - The function to call if the section is manually toggled - default: null\n                        Note that the callback function returns (item_id, callback type)\n      label - The label to display on the section when occupied - default: \"Train On Line\"\n\nsection_occupied (section_id)- Returns the current state of the section (True=Occupied, False=Clear)\n\nset_section_occupied (section_id) - Sets the specified section to \"occupied\"\n\nclear_section_occupied (section_id)- Sets the specified section to \"clear\"\n</pre>\n\n## Track Sensor Functions\n<pre>\nsensor_callback_type (tells the calling program what has triggered the callback):\n    track_sensor_callback_type.sensor_triggered - The section has been toggled by the user\n\ncreate_sensor - Creates a sensor object\n  Mandatory Parameters:\n      sensor_id:int - The ID to be used for the sensor \n      gpio_channel:int - The GPIO port number  to use for the sensor (not the physical pin number):\n  Optional Parameters:\n      sensor_timeout - The time period during which further triggers are ignored (default = 3 seconds)\n      sensor_callback - The function to call when the sensor triggers (default is no callback)\n                        Note that the callback function returns (item_id, callback type)\n\nsensor_active (sensor_id) - Returns the current state of the sensor (True/False)\n</pre>\n\n## DCC Address Mapping Functions\n\nThese functions provide the means to map the signals and points on the layout to the series of DCC \ncommands needed to control them.\n\nFor the main signal aspects, either \"Truth Table\" or \"Event Driven\" mappings can be defined\nThe \"Event Driven\" mapping uses a single dcc command (address/state) to change the signal to \nthe required aspect - as used by the TrainTech DCC signals. The \"Truth Table\" mapping provides\nmaximum flexibility for commanding DCC Signals as each \"led\" can either be controlled individually \n(i.e. Each LED of the signal is controlled via its own individual address) or via a \"Truth Table\" \n(where the displayed aspect will depend on the binary \"code\" written to 2 or more DCC addresses)\nThis has been successfully tested with the Harman Signallist SC1 DCC Decoder in various modes\n\n\"Truth Table\" or \"Event Driven\" mappings can alos be defined for the Route indications supported by\nthe signal (feathers or theatre). If the signal has a subsidary associated with it, this is always\nmapped to a single DCC address.\n\nNot all signals/points that exist on the layout need to have a DCC Mapping configured - If no DCC mapping \nhas been defined, then no DCC commands will be sent. This provides flexibility for including signals on the \nschematic which are \"off scene\" or for progressively \"working up\" the signalling scheme for a layout.\n<pre>\n  map_dcc_signal - Map a signal to one or more DCC Addresses\n     Mandatory Parameters:\n        sig_id:int - The ID for the signal to create a DCC mapping for\n     Optional Parameters:\n        auto_route_inhibit:bool - If the signal inhibits route indications at DANGER (default=False)\n        proceed[[add:int,state:bool],] - List of DCC addresses/states (default = no mapping)\n        danger [[add:int,state:bool],] - List of DCC addresses/states (default = No mapping)\n        caution[[add:int,state:bool],] - List of DCC addresses/states (default = No mapping)\n        prelim_caution[[add:int,state:bool],] - List of DCC addresses/states (default = No mapping)\n        LH1[[add:int,state:bool],] - List of DCC addresses/states for \"LH45\" (default = No Mapping)\n        LH2[[add:int,state:bool],] - List of DCC addresses/states for \"LH90\" (default = No Mapping)\n        RH1[[add:int,state:bool],] - List of DCC addresses/states for \"RH45\" (default = No Mapping)\n        RH2[[add:int,state:bool],] - List of DCC addresses/states for \"RH90\" (default = No Mapping)\n        MAIN[[add:int,state:bool],] - List of DCC addresses/states for \"MAIN\" (default = No Mapping)\n        NONE[[add:int,state:bool],] - List of DCC addresses/states to inhibit routes (default = No Mapping)\n                Note that you should ALWAYS provide mappings for NONE if you are using feather route indications\n                unless the DCC signal automatically inhibits route indications when displaying a DANGER aspect\n        THEATRE[[\"character\",[add:int,state:bool],],] - List of possible theatre indicator states (default = No Mapping)\n                Each entry comprises the \"character\" and the associated list of DCC addresses/states\n                \"#\" is a special character - which means inhibit all indications (when signal is at danger)\n                Note that you should ALWAYS provide mappings for '#' if you are using a theatre route indicator\n                unless the DCC signal itself inhibits route indications when displaying a DANGER aspect\n        subsidary:int - Single DCC address for the \"position light\" indication (default = No Mapping)\n\n  map_traintech_signal - Generate the mappings for a TrainTech signal\n     Mandatory Parameters:\n        sig_id:int - The ID for the signal to create a DCC mapping for\n        base_address:int - The base address of the signal (the signal will take 4 consecutive addresses)\n     Optional Parameters:\n        route_address:int - The address for the route indicator (Feather or Theatre) - Default = 0 (no indicator)\n        theatre_route:str - The character to be associated with the Theartre display - Default = \"NONE\" (no Text)\n        feather_route:route_type - The route to be associated with the feather - Default = NONE (no route)\n\n  map_dcc_point\n     Mandatory Parameters:\n        point_id:int - The ID for the point to create a DCC mapping for\n        address:int - the single DCC address for the point\n     Optional Parameters:\n        state_reversed:bool - Set to True to reverse the DCC logic (default = false)\n</pre>\n\n## Pi-Sprog Interface Functions\n\nThis provides a basic CBUS interface fpor communicating with the Pi-SPROG3 via the Raspberry Pi UART. It does not provide\na fully-functional interface for All DCC command and control functions - just the minimum set needed to support the driving\nof signals and points via a selection of common DCC Accessory decoders.Basic CV Programming is also supported - primarily \nas an aid to testing, but for full decoder programming the recommendation is to use JRMI DecoderPro.\n<pre>\n  initialise_pi_sprog (Open the comms port to the Pi Sprog)\n     Optional Parameters:\n        port_name:str - The Serial port to use for communicating with the Pi-SPROG 3 - Default=\"/dev/serial0\",\n        baud_rate:int - The baud rate to use for the serial port - Default = 115200,\n        dcc_debug_mode:bool - Sets an additional level of logging for the CBUS commands being sent to the Pi-SPROG. \n                            - Will also Request and report the command station status (from the Pi-SPROG-3)\n\n  service_mode_write_cv (programmes a CV in direct bit mode and waits for response)\n             (events are only sent if we think the track power is currently switched on)\n             (if acknowledgement isn't received within 5 seconds then the request times out)\n     Mandatory Parameters:\n        cv:int - The CV (Configuration Variable) to be programmed\n        value:int - The value to programme\n\n  request_dcc_power_on (sends a request to switch on the track power and waits for acknowledgement)\n         returns True if we have received acknowledgement that Track Power has been turned on\n         returns False if acknowledgement isn't received within 5 seconds (i.e. request timeout)\n\n  request_dcc_power_off (sends a request to switch off the track power and waits for acknowledgement)\n         returns True if we have received acknowledgement that Track Power has been turned off\n         returns False if acknowledgement isn't received within 5 seconds (i.e. request timeout)\n</pre>\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johnrm174/model-railway-signalling",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "model-railway-signals",
    "package_url": "https://pypi.org/project/model-railway-signals/",
    "platform": "",
    "project_url": "https://pypi.org/project/model-railway-signals/",
    "project_urls": {
      "Homepage": "https://github.com/johnrm174/model-railway-signalling"
    },
    "release_url": "https://pypi.org/project/model-railway-signals/1.0.0/",
    "requires_dist": [
      "pyserial"
    ],
    "requires_python": "",
    "summary": "Create your own DCC model railway signalling scheme",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16064626,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5708a05813b5f895cfa5118ef6457a723093ad5659f4e1d6a0db4e01953d8bbb",
        "md5": "543a4b1966943dbb29db8d09ebbf1711",
        "sha256": "9115e73b3c34bda017e1675cb6a128541b32c7c87dc284a1dde2e4ecae89026e"
      },
      "downloads": -1,
      "filename": "model_railway_signals-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "543a4b1966943dbb29db8d09ebbf1711",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 51167,
      "upload_time": "2021-06-06T17:06:20",
      "upload_time_iso_8601": "2021-06-06T17:06:20.346639Z",
      "url": "https://files.pythonhosted.org/packages/57/08/a05813b5f895cfa5118ef6457a723093ad5659f4e1d6a0db4e01953d8bbb/model_railway_signals-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93c610d1573f97b5d765e90aa944c5149227eb236bc53039044371937b686287",
        "md5": "dcfc7774742fadd26714d726e4633122",
        "sha256": "6bc76ee7e12f4069faf5a4b16d64044fdd6f29957a992abf0f662882e649e8bc"
      },
      "downloads": -1,
      "filename": "model-railway-signals-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dcfc7774742fadd26714d726e4633122",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 49233,
      "upload_time": "2021-06-06T17:06:23",
      "upload_time_iso_8601": "2021-06-06T17:06:23.483275Z",
      "url": "https://files.pythonhosted.org/packages/93/c6/10d1573f97b5d765e90aa944c5149227eb236bc53039044371937b686287/model-railway-signals-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}