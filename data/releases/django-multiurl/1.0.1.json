{
  "info": {
    "author": "Jacob Kaplan-Moss",
    "author_email": "jacob@jacobian.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "django-multiurl\n===============\n\n.. image:: https://secure.travis-ci.org/jacobian/django-multiurl.png?branch=master\n   :target: http://travis-ci.org/jacobian/django-multiurl\n\nHave you ever wanted multiple views to match to the same URL? Now you can.\n\nYou may once have tried something like this::\n\n    urlpatterns = patterns('',\n        url('/app/(\\w+)/$', app.views.people),\n        url('/app/(\\w+)/$', app.views.place),\n    )\n\nHowever, if you try this, ``/app/san-francisco/`` will only map to\n``app.views.people``. Raising an ``Http404`` from ``app.views.people`` doesn't\nhelp: you only get a 404 in the browser because Django stops resolving\nURLs at the first match.\n\nWell, ``django-multiurl`` solves this problem. Just \n``pip install django-multiurl``, then do this::\n\n    from multiurl import multiurl\n\n    urlpatterns = patterns('',\n        multiurl(\n            url('/app/(\\w+)/$', app.views.people),\n            url('/app/(\\w+)/$', app.views.place),\n        )\n    )\n\nNow in your views, raise ``multiurl.ContinueResolving`` anywhere you'd like\nto break out of the view and keep resolving. For example, here's what\n``app.views.people`` might look like::\n\n    from multiurl import ContinueResolving\n\n    def people(request, name):\n        try:\n            person = Person.objects.get(name=name)\n        except Person.DoesNotExist:\n            raise ContinueResolving\n        return render(...)\n\nThat's it! ``ContinueResolving`` will cause ``multiurl`` to continue onto the\nnext view (``app.views.place``, in this example).\n\nA few notes to round things out:\n\n* If you don't want to use ``ContinueResolving`` -- perhaps you'd rather\n  continue using ``get_object_or_404``, or you're using third-party views\n  that you can't modify to raise ``ContinueResolving``, you can pass a\n  ``catch`` argument into ``multiurl`` to control which exceptions are\n  considered \"continue\" statements. For example, to allow ``Http404``\n  exceptions to continue resolving, do this::\n\n        urlpatterns = patterns('',\n            multiurl(\n                url('/app/(\\w+)/$', app.views.people),\n                url('/app/(\\w+)/$', app.views.place),\n                catch = (Http404, ContinueResolving)\n            )\n        )\n\n  As you can see, ``catch`` should be a tuple of exceptions. It's probably a\n  good idea to always include ``ContinueResolving`` in the tuple.\n\n* If the last view in a ``multiurl`` raises ``ContinueResolving`` (or another\n  \"continuing\" exception), a 404 will be raised instead. That is, if resolving\n  \"falls off the end\" of some multi-urls, you'll get the 404 you expect.\n\n* Reverse URL resolution just works as expected. Name your sub-URLs and then\n  reverse your heart out.\n\nContributing\n------------\n\nDevelopment takes place\n`on GitHub <http://github.com/jacobian/django-multiurl>`_; pull requests are\nwelcome. Run tests with `tox <http://tox.readthedocs.org/>`_.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jacobian/django-multiurl",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-multiurl",
    "package_url": "https://pypi.org/project/django-multiurl/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-multiurl/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/jacobian/django-multiurl"
    },
    "release_url": "https://pypi.org/project/django-multiurl/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Allow multiple views to match the same URL.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11142524,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a1f6418d23eb6412e159157e52401d4a01ea7ed105978dd5322561cb42e6078",
        "md5": "1daf58e31e2237b3fe5f86d5f5032d2e",
        "sha256": "700acb9b2c424a83e88eba2959677a45f2d1b728349d4a406c3fb3d944796be8"
      },
      "downloads": -1,
      "filename": "django-multiurl-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1daf58e31e2237b3fe5f86d5f5032d2e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3349,
      "upload_time": "2013-04-03T19:19:48",
      "upload_time_iso_8601": "2013-04-03T19:19:48.631592Z",
      "url": "https://files.pythonhosted.org/packages/4a/1f/6418d23eb6412e159157e52401d4a01ea7ed105978dd5322561cb42e6078/django-multiurl-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}