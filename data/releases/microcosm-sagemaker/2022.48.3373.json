{
  "info": {
    "author": "Globality Engineering",
    "author_email": "engineering@globality.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# microcosm-sagemaker\nOpinionated machine learning with SageMaker\n\n## Usage\nFor best practices, see\n[`cookiecutter-microcosm-sagemaker`](https://github.com/globality-corp/cookiecutter-microcosm-sagemaker).\n\n## Profiling\nMake sure `pyinstrument` is installed, either using `pip install pyinstrument` or by installing `microcosm-sagemaker` with `profiling` extra dependencies:\n\n```\npip install -e '.[profiling]'\n```\n\nTo enable profiling of the app, use the `--profile` flag with `runserver`:\n\n```\nrunserver --profile\n```\n\nThe service will log that it is in profiling mode and announce the directory to which it is exporting. Each call to the endpoint will be profiled and its results with be stored in a time-tagged html file in the profiling directory.\n\n## Experiment Tracking\nTo use `Weights and Biases`, install `microcosm-sagemaker` with `wandb` extra depdency:\n\n```\npip install -e '.[wandb]'\n```\n\nTo enable experiment tracking in an ML repository:\n\n* Choose the experiment tracking stores for your ML model. Currently, we only support `wandb`. To do so, add `wandb` to `graph.use()` in `app_hooks/train/app.py` and `app_hooks/evaluate/app.py`.\n\n* Add the API key for `wandb` to the environment variables injected by Circle CI into the docker instance, by visiting `https://circleci.com/gh/globality-corp/<MODEL-NAME>/edit#env-vars` and adding `WANDB_API_KEY` as an environment variable.\n\n* `Microcosm-sagemaker` automatically adds the config for the active bundle and its dependents to the `wandb`'s run config.\n\n* To report a static metric:\n\n```\nclass MyClassifier(Bundle):\n    ...\n\n    def fit(self, input_data):\n        ...\n        self.experiment_metrics.log_static(<metric_name>=<metric_value>)\n```\n\n* To report a time-series metric:\n\n```\nclass MyClassifier(Bundle):\n    ...\n\n    def fit(self, input_data):\n        ...\n        self.experiment_metrics.log_timeseries(\n            <metric_name>=<metric_value>,\n            step=<step_number>\n        )\n```\n\nNote that the `step` keyword argument must be provided for logging time-series.\n\n## Artifact Tests\n\nIf you want to report your artifact tests to wandb, add the following line to the top of your `conftest.py`. \nFor more information on using plugins in pytest, see [here](https://docs.pytest.org/en/6.2.x/plugins.html#requiring-loading-plugins-in-a-test-module-or-conftest-file).\n\n```\npytest_plugins = 'pytest_sagemaker'\n```\n\nIt should be generated by `globality-build`, but in case it is not, also make sure to run artifact\n tests with `--capture=tee-sys`. This will allow to both capture and show stdout.\n\n## Reproducibility\n\nAs recommended [here](https://pytorch.org/docs/stable/notes/randomness.html), we seed Python, \n Numpy and Pytorch random number generators and force Pytorch operations to be deterministic. See \n`microcosm-sagemaker/random.py` for details.\n\n## Distributed training\n\nTo support \"distributed\" training - with multiple processes (like pytorch `DistributedDataParallel`),\nwe detect if the current process is a \"worker process\" (non-master member of a process group).\nWorker processes are prevented from communicating with the outside world - writing logs and\nsaving artifacts.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/globality-corp/microcosm-sagemaker",
    "keywords": "microcosm",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microcosm-sagemaker",
    "package_url": "https://pypi.org/project/microcosm-sagemaker/",
    "platform": null,
    "project_url": "https://pypi.org/project/microcosm-sagemaker/",
    "project_urls": {
      "Homepage": "https://github.com/globality-corp/microcosm-sagemaker"
    },
    "release_url": "https://pypi.org/project/microcosm-sagemaker/2022.48.3373/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Opinionated machine learning organization and configuration",
    "version": "2022.48.3373",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16943351,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "caaf914dde514b75f74b36f59e6e06c789ae771679d1534f9e7b2fdea9a68ecb",
        "md5": "ae225d2054369428fb99f81922f21dd4",
        "sha256": "5dcf8391f5c7472f62b55868343effc947504ba50a01322ee458e30727024d0c"
      },
      "downloads": -1,
      "filename": "microcosm-sagemaker-2022.48.3373.tar.gz",
      "has_sig": false,
      "md5_digest": "ae225d2054369428fb99f81922f21dd4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 29543,
      "upload_time": "2022-12-02T19:46:26",
      "upload_time_iso_8601": "2022-12-02T19:46:26.981069Z",
      "url": "https://files.pythonhosted.org/packages/ca/af/914dde514b75f74b36f59e6e06c789ae771679d1534f9e7b2fdea9a68ecb/microcosm-sagemaker-2022.48.3373.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}