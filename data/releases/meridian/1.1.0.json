{
  "info": {
    "author": "Tom Caruso",
    "author_email": "carusot42@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "\n# meridian\n\n[![PyPI version](https://badge.fury.io/py/meridian.svg)](https://badge.fury.io/py/meridian)\n\nHigher-level geospatial data abstractions for Python.\n\n\n`meridian` lets you treat your geospatial dataset like you would a normal Python data structure, backed by a spatial index for high-performance geospatial queries.\n\n\n# Usage\n\nThe core data structure implemented is the `SpatialDataset`, which takes an iterable (`list`, `generator`, etc) of [GeoJSON](http://geojson.org/)-structured `dict`s and builds up the dataset and index. The records in your dataset are stored within the `SpatialDataset` as `SpatialData` objects, with all the key/value pairs in the GeoJSON's `properties` as attributes. Once it's done loading, you have a familiar-feeling data structure you can use to query your dataset.\n\n`meridian` is fully compatible with the GeoJSON-like objects produced by the `fiona` library, which makes it very easy to get started:\n\n```python\nimport fiona\n\nfrom meridian import SpatialDataset\nfrom shapely import geometry\n\nwith fiona.open('/path/to/my/shapefile.shp') as src:\n    dataset = SpatialDataset(src)\n\n# Find out how many records you have\nprint(len(dataset))\n\npoi = geometry.shape({\n    'type': 'Point',\n    'coordinates': [-72.319261, 43.648956]\n})\n\n# Check if your poi intersects with the dataset\nprint(dataset.intersects(poi)) # True\n\n# See how many records intersect\nprint(dataset.count(poi)) # 1\n\n# Find the n nearest records to the query geometry\nprint(dataset.nearest(poi, 3))\n\n# The dataset itself is iterable.\nfor record in dataset:\n    print(record)\n\n# iterate through all records in the dataset which bbox-intersect with poi\n# dataset.intersection returns a list of spatialdata objects\nfor record in dataset.intersection(poi):\n    print(record)\n\n\n```\n\nAll of the spatial query methods on a `SpatialDataset` require only that the query object has a `bounds` property which returns a 4-tuple like `(xmin, ymin, xmax, ymax)`. As long as that exists, `meridian` is agnostic of query geometry implementation, however it does use `shapely` geometry under the hood for the records stored within.\n\nThe records in a `SpatialDataset` are `SpatialData`s:\n\n```python\npoi = geometry.shape({\n    'type': 'Point',\n    'coordinates': [-72.319261, 43.648956]\n})\n\nfor record in dataset:\n    print(record.id)  # The id in the `id` field of the input geojson\n    print(record.geom)  # The `shapely` geometry representation of the record\n    print(record.bounds)  # The bounds of the geometry\n    print(record.properties)  # a dict of all the `properties` in the initial geojson feature\n    print(record.my_fancy_property)  # All individual properties in the geojson feature will be exposed as attributes on the namedtuple\n\n    # SpatialData objects are fully compatible with all of the objects & operations defined in the shapely package.\n    print(record.intersects(poi))\n    print(poi.intersects(record))\n\n# Even advanced operations like cascaded union work as expected.\nfrom shapely.ops import cascaded_union\n\nunioned = cascaded_union(dataset)\nprint(unioned.wkt)\n\n```\n\nSince the `id` field is not part of the GeoJSON spec it is optional to include; the library will function just fine without it. However, it does give the user a means to uniquely identify the records within each dataset.\n\n\n# Installation\n\nFrom `pypi`:\n\n    pip install meridian\n\nOr, clone the repo and run\n\n    python path/to/repo/setup.py install\n\nYou can also use `pip` to install directly from the github repo:\n\n    pip install git+git://github.com/tomplex/meridian.git\n\n\n`meridian` requires GEOS (for the `shapely` library) and [`libspatialindex`](https://libspatialindex.github.io/) to create the spatial index used for querying. On most systems, `libspatialindex` must be compiled from source. These instructions should work on Linux & macOS:\n\n```bash\nwget -qO- http://download.osgeo.org/libspatialindex/spatialindex-src-1.8.5.tar.gz | tar xz -C /tmp\ncd /tmp/spatialindex-src-1.8.5 && ./configure; make; make install\n```\n\nOn Linux, you might be to run `ldconfig` afterwards to ensure that the `rtree` python library can find the library correctly.\n\nIf you use docker, there are images with all dependencies and the latest version of `meridian` pre-installed available on [docker hub](https://hub.docker.com/r/tomplex/meridian-base/).\n\n# Gotcha's\n\nData takes up memory. Depending on the number & size of the geometries you're trying to work with, you might run out of memory. On my machine, a 2016 MacBook Pro, I found that a dataset with 350k records with an average of 6 nodes per polygon used ~500mb of memory footprint. YMMV. \n\n`meridian` is opinionated and believes that data should be immutable. If you need your data to change, you should create new data representing your input + processing instead of changing old data. Thus, a `SpatialDataset` is more like a `frozenset` in behavior than a `list`. \n\n\n# Planned features\n\n- In-depth docs and usage examples\n- Format compat. Built-in tools to help load data from other formats (Postgres, WKT, etc)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tomplex/meridian",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meridian",
    "package_url": "https://pypi.org/project/meridian/",
    "platform": "",
    "project_url": "https://pypi.org/project/meridian/",
    "project_urls": {
      "Homepage": "https://github.com/tomplex/meridian"
    },
    "release_url": "https://pypi.org/project/meridian/1.1.0/",
    "requires_dist": [
      "shapely (>=1.6.4.post2)",
      "Rtree (>=0.8.3)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Easy geospatial data processing.",
    "version": "1.1.0",
    "yanked": true,
    "yanked_reason": null
  },
  "last_serial": 8947313,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04157315e115c298d15785a47867d42310372f392d7864239216507b8f92ce4c",
        "md5": "c8e5a7ec291a73f7da36c4ed26b12d1d",
        "sha256": "1e548c5e3fcffc759d8804493646aa33b9357d8f25ad1700c9511e442c67d7c6"
      },
      "downloads": -1,
      "filename": "meridian-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c8e5a7ec291a73f7da36c4ed26b12d1d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 7987,
      "upload_time": "2019-02-28T06:00:23",
      "upload_time_iso_8601": "2019-02-28T06:00:23.833160Z",
      "url": "https://files.pythonhosted.org/packages/04/15/7315e115c298d15785a47867d42310372f392d7864239216507b8f92ce4c/meridian-1.1.0-py2.py3-none-any.whl",
      "yanked": true,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4a85bf6d5ff36badf10e1e8be619b7d3e211c33c949bbd62771e6137ed2f9eb",
        "md5": "781da4017283ab5e70753ddcfa6adcdd",
        "sha256": "4c3189b36385b17c4a4c3ab1dda78fb83d8d820868299ad9f03bd73c22822fd3"
      },
      "downloads": -1,
      "filename": "meridian-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "781da4017283ab5e70753ddcfa6adcdd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 7656,
      "upload_time": "2019-02-28T06:00:25",
      "upload_time_iso_8601": "2019-02-28T06:00:25.281379Z",
      "url": "https://files.pythonhosted.org/packages/c4/a8/5bf6d5ff36badf10e1e8be619b7d3e211c33c949bbd62771e6137ed2f9eb/meridian-1.1.0.tar.gz",
      "yanked": true,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}