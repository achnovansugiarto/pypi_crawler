{
  "info": {
    "author": "Daniel Rodriguez",
    "author_email": "danjrod@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development"
    ],
    "description": "metaparams\n==========\n\n.. image:: https://img.shields.io/pypi/v/metaparams.svg\n   :alt: PyPi Version\n   :scale: 100%\n   :target: https://pypi.python.org/pypi/metaparams/\n\n.. image:: https://img.shields.io/pypi/dm/metaparams.svg\n   :alt: PyPi Monthly Donwloads\n   :scale: 100%\n   :target: https://pypi.python.org/pypi/metaparams/\n\n.. image:: https://img.shields.io/pypi/l/metaparams.svg\n   :alt: License\n   :scale: 100%\n   :target: https://github.com/mementum/metaparams/blob/master/LICENSE\n\n.. image:: https://travis-ci.org/mementum/metaparams.png?branch=master\n   :alt: Travis-ci Build Status\n   :scale: 100%\n   :target: https://travis-ci.org/mementum/metaparams\n\n.. image:: https://readthedocs.org/projects/metaparams/badge/?version=latest\n   :alt: Documentation Status\n   :scale: 100%\n   :target: https://readthedocs.org/projects/metaparams/\n\n.. image:: https://img.shields.io/pypi/pyversions/metaparams.svg\n   :alt: Pytghon versions\n   :scale: 100%\n   :target: https://pypi.python.org/pypi/metaparams/\n\n``metaparams`` is a MetaClass/Class/Decorator infrastructure to define params\nwithout invoking objects and have them automatically parse/remove the ``kwargs``\npassed to the class in which they are intalled\n\nDocumentation\n=============\n\nRead the full documentation at readthedocs.org:\n\n  - `metaparams documentation <http://metaparams.readthedocs.org/en/latest/introduction.html>`_\n\nPython 2/3 Support\n==================\n\n  - Python 2.7\n  - Python 3.2/3.3/3.4/3.5\n\n  - It also works with pypy and pypy3\n\nInstallation\n============\n\nFrom pypi::\n\n  pip install metaparams\n\nFrom source:\n\n  - Place the *metaparams* directory found in the sources inside your project\n\nFeatures:\n=========\n\n  - ``metaparams`` decorator to params-enable any class\n\n  - ``ParamsBase`` a class from which to subclass to also be params-enabled\n\n  - ``MetaParams`` a MetaClass for more complex usage pattern\n\n\nQuick Usage\n===========\n\nWith the decorator::\n\n  from metaparams import metaparams\n\n\n  @metaparams()\n  class A(object):\n\n      params = (\n          ('p1', True, 'doc'),\n          ('p2', 99),\n      )\n\n      def __init__(self):\n          pass\n\n  a = A()\n\n  # Defined params are reachable below the attribute params\n  print(a.params.p1)\n  print(a.params.p2)\n\n  # Modification of default values can be checked\n  assert a.params._isdefault('p1')\n\n  # Inheriting with modification an extension\n  class B(A):\n\n      params = (\n          ('p1', False,),  # changed default value of p1\n          ('p3', None),  # new parameter\n      )\n\n      def __init__(self):\n          pass\n\n  b = B()\n\n  # Defined params are reachable below the attribute params\n  print(b.params.p1)\n  print(b.params.p2)\n  print(b.params.p3)\n\n  # Modification of default values can be checked\n  assert b.params._isdefault('p1')\n\n  # Over the class we can also check defaults\n  # B has different default value for p1 than A\n  assert b.params.p1 != A.params._default('p1')\n\n  # The name of the attribute 'params' can be changed\n  # and a shorter alias (PEP-8 ...) added\n  @metaparams(_pname='kargs', _pshort=True)\n  class A(object):\n\n      kargs = (\n          ('p1', True, 'doc'),\n          ('p2', 99),\n      )\n\n      def __init__(self):\n          pass\n\n  a = A()\n\n  # Defined params are reachable below the attribute params\n  print(a.kargs.p1)\n  print(a.kargs.p2)\n\n  print(a.k.p1)\n  print(a.k.p2)\n\n  # Modification of default values can be checked\n  assert a.kargs._isdefault('p1')\n\n\n  # The metaclass works also so ... but it's a metaclass\n\n  class A(MetaParams.as_metaclass(_pname='kargs', _pshort=True)):\n\n      kargs = (\n          ('p1', True, 'doc'),\n          ('p2', 99),\n      )\n\n      def __init__(self):\n          pass\n\n  a = A()\n\n  # Defined params are reachable below the attribute params\n  print(a.kargs.p1)\n  print(a.kargs.p2)\n\n  print(a.k.p1)\n  print(a.k.p2)\n\n  # Modification of default values can be checked\n  assert a.kargs._isdefault('p1')\n\n\n  # And finally an already cooked base class with no customization\n  class A(ParamsBase):\n\n      params = (\n          ('p1', True, 'doc'),\n          ('p2', 99),\n      )\n\n      def __init__(self):\n          pass\n\n  a = A()\n\n  # Defined params are reachable below the attribute params\n  print(a.params.p1)\n  print(a.params.p2)\n\n  # Modification of default values can be checked\n  assert a.params._isdefault('p1')",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/mementum/metaparams/tarball/1.0.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mementum/metaparams",
    "keywords": "metaclass,development",
    "license": "GPLv3+",
    "maintainer": null,
    "maintainer_email": null,
    "name": "metaparams",
    "package_url": "https://pypi.org/project/metaparams/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/metaparams/",
    "project_urls": {
      "Download": "https://github.com/mementum/metaparams/tarball/1.0.0",
      "Homepage": "https://github.com/mementum/metaparams"
    },
    "release_url": "https://pypi.org/project/metaparams/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "MetaClass supporting fine grained control of object creationand initialization",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5118745,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30e81afb846b3e6aaf7c80c650ced1b3fcba99077cf39452f4a673e63ff62e5d",
        "md5": "76218290398aae139bd148d5dabb125e",
        "sha256": "bfb83447e43620e23aa54dd45115d6d12bb25a08bc6a8c1987bc462b46d78f12"
      },
      "downloads": -1,
      "filename": "metaparams-1.0.0.zip",
      "has_sig": false,
      "md5_digest": "76218290398aae139bd148d5dabb125e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14115,
      "upload_time": "2015-10-25T11:23:01",
      "upload_time_iso_8601": "2015-10-25T11:23:01.180918Z",
      "url": "https://files.pythonhosted.org/packages/30/e8/1afb846b3e6aaf7c80c650ced1b3fcba99077cf39452f4a673e63ff62e5d/metaparams-1.0.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}