{
  "info": {
    "author": "Michael Huang",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "manuf\n===\n\n[![Build Status](https://github.com/coolbho3k/manuf/workflows/test/badge.svg)](https://github.com/coolbho3k/manuf/actions)\n[![Build Status](https://badge.fury.io/py/manuf.svg)](https://pypi.org/project/manuf/)\n\nParser library for Wireshark's OUI database.\n---\n\nConverts MAC addresses into a manufacturer using Wireshark's OUI database.\n\nOptimized for quick lookup performance by reading the entire file into memory\non initialization. Maps ranges of MAC addresses to manufacturers and comments\n(descriptions). Contains full support for netmasks and other strange things in\nthe database.\n\nSee [Wireshark's OUI lookup tool](https://www.wireshark.org/tools/oui-lookup.html).\n\nWritten by Michael Huang (coolbho3k).\n\nInstall\n---\n\n#### With PyPi\n\n    pip install manuf\n\n#### Or Manually\n\n    git clone https://github.com/coolbho3k/manuf\n    cd manuf\n    python setup.py install\n\nUsage\n---\n\n#### As a library:\n\n    >>> from manuf import manuf\n    >>> p = manuf.MacParser(update=True)\n    >>> p.get_all('BC:EE:7B:00:00:00')\n    Vendor(manuf='AsustekC', comment='ASUSTek COMPUTER INC.')\n    >>> p.get_manuf('BC:EE:7B:00:00:00')\n    'AsustekC'\n    >>> p.get_comment('BC:EE:7B:00:00:00')\n    'ASUSTek COMPUTER INC.'\n\n#### As a command line:\n\n    $ manuf BC:EE:7B:00:00:00\n    Vendor(manuf='AsustekC', comment='ASUSTek COMPUTER INC.')\n\nUse a manuf file in a custom location:\n\n    $ manuf --manuf ~/manuf BC:EE:7B:00:00:00\n    Vendor(manuf='AsustekC', comment='ASUSTek COMPUTER INC.')\n\nAutomatically update the manuf file from Wireshark's git:\n\n    $ manuf --update BC:EE:7B:00:00:00\n    Vendor(manuf='AsustekC', comment='ASUSTek COMPUTER INC.')\n\nNote, that this command will update the manuf file bundled with this package. If you do not wish to \nmodify this, or do not have permissions to do so, you must specify a custom manuf file to perform an update.\n\n    $ manuf --update --manuf ~/manuf BC:EE:7B:00:00:00\n    Vendor(manuf='AsustekC', comment='ASUSTek COMPUTER INC.')\n\nAlternatively you can call the program with:\n\n    python -m manuf\nor by executung the `manuf.py` script directly\n\n```bash\n./manuf/manuf.py # From the install folder\n```\n\nFeatures and advantages of manuf\n---\n\nNote: the examples use the manuf file provided in the first commit, 9a180b5.\n\nmanuf.py is more accurate than more naive scripts that parse the manuf file.\nCritically, it contains support for netmasks.\n\nFor a usual entry, such as BC:EE:7B (AsustekC), the manufacturer \"owns\" the\nlast half (24 bits) of the MAC address and is free to assign the addresses\nBC:EE:7B:00:00:00 through BC:EE:7B:FF:FF:FF, inclusive, to its devices.\n\nHowever, entries like the following also appear commonly in the file:\n\n    00:1B:C5:00:00:00/36\tConvergi               # Converging Systems Inc.\n    00:1B:C5:00:10:00/36\tOpenrbCo               # OpenRB.com, Direct SIA\n\n/36 is a netmask, which means that the listed manufacturer \"owns\" only the last\n12 bits of the MAC address instead of the usual 24 bits (since MAC addresses\nare 48 bits long, and 48 bits - 36 bits = 12 bits).\n\nThis means that Converging Systems is only free to assign the addresss block\n00:1B:C5:00:00:00 through 00:1B:C5:00:0F:FF. Anything after that belongs to\nother manufacturers. manuf.py takes this fact into account:\n\n    >>> p.get_manuf('00:1B:C5:00:00:00')\n    'Convergi'\n    >>> p.get_manuf('00:1B:C5:00:0F:FF')\n    'Convergi'\n    >>> p.get_manuf('00:1B:C5:00:10:00')\n    'OpenrbCo'\n\nEven Wireshark's web lookup tool fails here. \"00:1B:C5:00:0F:FF\" returns only\n\"IEEE REGISTRATION AUTHORITY\" while it should instead return \"Converging\nSystems Inc.\" If a netmask is not explicitly specified, a netmask of /24 is\nimplied. Since this covers most of the entries, most tools only parse the first\n24 bits.\n\nmanuf.py fully supports even more esoteric entries in the database. For example,\nconsider these two entries:\n\n    01-80-C2-00-00-30/45\tOAM-Multicast-DA-Class-1\n    01-80-C2-00-00-38/45\tOAM-Multicast-DA-Class-2\n\nWith a netmask of /45, only the last 3 bits of the address are significant.\nThis means that a device is considered \"OAM-Multicast-DA-Class-1\" only if the\nlast digit falls between 0x0 and 0x7 and \"OAM-Multicast-DA-Class-2\" only if the\nlast digit falls between 0x8 and 0xF.\n\nIf the last octet is 0x40 or over, or 0x2F or under, the address doesn't belong\nto any manufacturer.\n\n    >>> p.get_manuf('01:80:C2:00:00:2F')\n    >>> p.get_manuf('01:80:C2:00:00:30')\n    'OAM-Multicast-DA-Class-1'\n    >>> p.get_manuf('01:80:C2:00:00:37')\n    'OAM-Multicast-DA-Class-1'\n    >>> p.get_manuf('01:80:C2:00:00:38')\n    'OAM-Multicast-DA-Class-2'\n    >>> p.get_manuf('01:80:C2:00:00:3F')\n    'OAM-Multicast-DA-Class-2'\n    >>> p.get_manuf('01:80:C2:00:00:40')\n\nAgain, the official lookup tool fails here as well, with \"01:80:C2:00:00:31\"\nreturning no results.\n\nAlgorithm\n---\n\nAlthough optimized for correctness, manuf.py is also quite fast, with average\nO(1) lookup time, O(n) setup time, and O(n) memory footprint.\n\nFirst, the entire manuf file is read into memory. Each manuf line is stored in\na dict mapping a tuple calculated from the MAC address and netmask to each\nmanuf:\n\n    ((48 - netmask), macaddress >> (48 - netmask))\n\nThe (48 - netmask) value is called the \"bits left\" value in the code.\n\nFor example, Converging Systems' MAC is 0x001BC5000000 and its netmask is 36,\nso its key in the dict is this:\n\n    (12, 0x001BC5000000 >> 12)\n\nTo lookup \"00:1B:C5:00:0F:FF\" we will check the dict beginning with a \"bits\nleft\" value of 0, incrementing until we find a match or go over 47 (which means\nwe have no match):\n\n    (0, 0x001BC5000FFF >> 0)\n    (1, 0x001BC5000FFF >> 1)\n    (2, 0x001BC5000FFF >> 2)\n    ...\n    (12, 0x001BC5000FFF >> 12)\n\nSince (12, 0x001BC5000FFF >> 12) equals (12, 0x001BC5000000 >> 12), we have a\nmatch on the 13th iteration of the loop.\n\nCopying\n---\n\nThis library does not link to Wireshark's manuf database; it merely parses it,\nso I have chosen to publish it under the LGPLv3 and Apache License 2.0\ninstead of the GPLv2. The manuf database is provided for your convenience in\nthis repository, but will not be updated.\n\n* License for Python library: LGPLv3 and Apache License 2.0 (dual licensed)\n* License for manuf database: GPLv2\n\nThe latest version of the manuf database can be found in the\n[Wireshark git repository](https://code.wireshark.org/review/gitweb?p=wireshark.git;a=blob_plain;f=manuf).\nThe database there is updated about once a week, so you may want to grab the\nlatest version to use instead of using the one provided here by using the\n--update flag on the command line:\n\n    manuf --update\n\nRun tests\n---\n\n    python -m unittest manuf.test.test_manuf\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/coolbho3k/manuf/",
    "keywords": "manuf,mac address,networking",
    "license": "Apache License 2.0 or GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "manuf",
    "package_url": "https://pypi.org/project/manuf/",
    "platform": "",
    "project_url": "https://pypi.org/project/manuf/",
    "project_urls": {
      "Homepage": "https://github.com/coolbho3k/manuf/"
    },
    "release_url": "https://pypi.org/project/manuf/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Parser library for Wireshark's OUI database",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12510370,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04968e3040c33e0ac1ae1b48163db15e58880e0f3945695444e79dd1878040c3",
        "md5": "fd875687d5bd16d725b554bf0241e414",
        "sha256": "837321516caaa0c9239209d342137a13921586e09461a88ce2079e10125e0083"
      },
      "downloads": -1,
      "filename": "manuf-1.1.1-py2.7.egg",
      "has_sig": false,
      "md5_digest": "fd875687d5bd16d725b554bf0241e414",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 543159,
      "upload_time": "2020-06-06T23:13:59",
      "upload_time_iso_8601": "2020-06-06T23:13:59.382282Z",
      "url": "https://files.pythonhosted.org/packages/04/96/8e3040c33e0ac1ae1b48163db15e58880e0f3945695444e79dd1878040c3/manuf-1.1.1-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e92e99bb4435c70f35eda9e30de9a3ed4c186dbdadc2301a0f3bbbf39e2fd4a",
        "md5": "b53d192f7f2d89c19165e49f9259a219",
        "sha256": "c2824df37cc79b7d69113bd93cb155a13185ce22e48fbef93aaab1dadbbc074a"
      },
      "downloads": -1,
      "filename": "manuf-1.1.1-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "b53d192f7f2d89c19165e49f9259a219",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 539307,
      "upload_time": "2020-06-06T23:13:53",
      "upload_time_iso_8601": "2020-06-06T23:13:53.138578Z",
      "url": "https://files.pythonhosted.org/packages/7e/92/e99bb4435c70f35eda9e30de9a3ed4c186dbdadc2301a0f3bbbf39e2fd4a/manuf-1.1.1-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "632cd70d275aced41bf96e23b80469afcc74a221b7ae9aca98c0a1eb774bdacc",
        "md5": "651df69422bbe4fbda47725650e9c909",
        "sha256": "793615ccac3c8b2259b42737ce525f4921575c19492662f2d9a7ad0e99f4ba75"
      },
      "downloads": -1,
      "filename": "manuf-1.1.1-py3.7.egg",
      "has_sig": false,
      "md5_digest": "651df69422bbe4fbda47725650e9c909",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": null,
      "size": 543254,
      "upload_time": "2020-06-06T23:14:01",
      "upload_time_iso_8601": "2020-06-06T23:14:01.387625Z",
      "url": "https://files.pythonhosted.org/packages/63/2c/d70d275aced41bf96e23b80469afcc74a221b7ae9aca98c0a1eb774bdacc/manuf-1.1.1-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "207c363e369c274faa3dde92500fe0320fa0f5a17a77bfe8e07b0ed1a24e49f4",
        "md5": "379b0ae241b87a2f0d46c4a78e9a76d4",
        "sha256": "d48e780ebc4158764901a0b3a2e160f0e87ed0a1d7e504c723dc633836f1f0dc"
      },
      "downloads": -1,
      "filename": "manuf-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "379b0ae241b87a2f0d46c4a78e9a76d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 539307,
      "upload_time": "2020-06-06T23:13:54",
      "upload_time_iso_8601": "2020-06-06T23:13:54.712799Z",
      "url": "https://files.pythonhosted.org/packages/20/7c/363e369c274faa3dde92500fe0320fa0f5a17a77bfe8e07b0ed1a24e49f4/manuf-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ecf354dddc57508194082c74310dec15341c008d47b7d37fd813d7fb0c46349",
        "md5": "261e603c6194b451dc186125d57ab94a",
        "sha256": "15faee73b91805ef1547e375628452dc3d5f2b9cf8ec005185a85c1345a828a4"
      },
      "downloads": -1,
      "filename": "manuf-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "261e603c6194b451dc186125d57ab94a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 538383,
      "upload_time": "2020-06-06T23:14:04",
      "upload_time_iso_8601": "2020-06-06T23:14:04.347320Z",
      "url": "https://files.pythonhosted.org/packages/9e/cf/354dddc57508194082c74310dec15341c008d47b7d37fd813d7fb0c46349/manuf-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}