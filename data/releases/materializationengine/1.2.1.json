{
  "info": {
    "author": "Forrest Collman",
    "author_email": "forrestc@alleninstitute.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Actions Status](https://github.com/seung-lab/MaterializationEngine/workflows/Materialization%20Engine/badge.svg)](https://github.com/seung-lab/MaterializationEngine/actions)\n# Materialization Engine\n#### A product of the CAVE (Connectome Annotation Versioning Engine) infrastructure\nThis is a microservice for creating materializied versions of an analysis database,  merging together spatially bound annotation and a segmentation data stored in a pychunkedgraph that is frozen in time. The data is stored in a PostgreSQL database where the spatial annotations are leveraging postgis point types. The materialization engine can create new time locked versions periodically on a defined scheudle as well as one-off versions for specific use cases.  \n\nPresent funcationality:\n\n* A flask microservice as REST API endpoints for creating and querying the materializied databases.\n* The backend is powered by workflows running as [Celery][celery] workers, a task queue implementation used to asynchronously execute work.\n## Installation\n\nThis service is intended to be deployed to a kubernentes cluster as a series of pods.\nLocal deployment is currently best done by using docker. A docker-compose file is included that will install all the required packages and create a local postgres database and redis broker that is leveraged by the Celery workers for running tasks.\n\nDocker compose example:\n```\n    $ docker-compose build\n    $ docker-compse up\n```\nAlternatively one can setup a docker container running PostgreSQL database and a seperate Redis container then create a python virtual env and run the following commands:\n\nSetup a redis instance:\n```\n    $ docker run -p 6379:6379 redis\n```\nSetup a Postgres database (with postgis):\n```\n    $ docker run --name db -v /my/own/datadir:/var/lib/postgresql/data -e POSTGRES_PASSWORD=materialize postgis/postgis\n```\n\nSetup the flask microservice:\n```\n    $ cd materializationengine\n    $ python3 -m venv mat_engine\n    $ source mat_engine/bin/activate\n    (mat_engine) $: python setup.py install\n    (mat_engine) $: python run.py\n```\nStart a celery worker for processing tasks. Open another terminal:\n```\n    $ source mat_engine/bin/activate\n    (mat_engine) $ celery worker --app=run.celery --pool=prefork --hostname=worker.process@%h --queues=processcelery --concurrency=4 --loglevel=INFO -Ofair\n```\n## Workflow Overview\n\nThe materialization engine runs celery workflows that create snapshots of spatial annotation data where each spatial point is linked to a segmentation id that is valid at a specific time point.\n\nThere are a few workflows that make up the materialization engine:\n* [Bulk Upload][bulk] (Load large spatial and segmentation datasets into a PostgreSQL database)\n* [Ingest New Annotations][ingest] (Query and insert underlying segmentation data on spatial points with missing segmentation data)\n* [Update Root Ids][update] (Query and update expired root ids from the chunkedgraph between a time delta)\n* [Create Frozen Database][create] (Creates a timelocked database for all tables)\n* [Complete Workflow][complete] (Combines the Ingest New Annotations, Update Root Id and Create Frozen Worklows in one, run in series)\n\n\n## Meta\n\nDistributed under the MIT license. See ``LICENSE`` for more information.\n\n## Contributing\n\n1. Fork it (<https://github.com/seung-lab/MaterializationEngine/fork>)\n2. Create your feature branch (`git checkout -b feature/fooBar`)\n3. Commit your changes (`git commit -am 'Add some fooBar'`)\n4. Push to the branch (`git push origin feature/fooBar`)\n5. Create a new Pull Request\n\n<!-- Markdown link & img dfn's -->\n\n[celery]: https://docs.celeryproject.org/en/stable/getting-started/introduction.html\n[bulk]: /materializationengine/workflows/bulk_upload.py\n[ingest]: /materializationengine/workflows/ingest_new_annotations.py\n[update]: /materializationengine/workflows/update_root_ids.py\n[create]: /materializationengine/workflows/create_frozen_database.py\n[complete]: /materializationengine/workflows/complete_workflow.py",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/seung-lab/MaterializationEngine",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "materializationengine",
    "package_url": "https://pypi.org/project/materializationengine/",
    "platform": "",
    "project_url": "https://pypi.org/project/materializationengine/",
    "project_urls": {
      "Homepage": "https://github.com/seung-lab/MaterializationEngine"
    },
    "release_url": "https://pypi.org/project/materializationengine/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Combines DynamicAnnotationDB and PyChunkedGraph",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10493605,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f66a2bbbdb63475539f3dd7860ba0f17ef0c2ecc17535b5c17331a3020b23f6a",
        "md5": "33fe14e3f5c0daefd8033e40ec1289f5",
        "sha256": "77744013e77b5752a368027f1e006d776ea5f6803b4c92e3a20f750796fd5699"
      },
      "downloads": -1,
      "filename": "materializationengine-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "33fe14e3f5c0daefd8033e40ec1289f5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 52160,
      "upload_time": "2021-04-12T23:59:26",
      "upload_time_iso_8601": "2021-04-12T23:59:26.319518Z",
      "url": "https://files.pythonhosted.org/packages/f6/6a/2bbbdb63475539f3dd7860ba0f17ef0c2ecc17535b5c17331a3020b23f6a/materializationengine-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}