{
  "info": {
    "author": "Sector Labs",
    "author_email": "open-source@sectorlabs.ro",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "django-localized-fields\n=======================\n\n.. image:: https://circleci.com/gh/SectorLabs/django-localized-fields/tree/v5.x.svg?style=svg\n    :target: https://circleci.com/gh/SectorLabs/django-localized-fields/tree/v5.x\n\n.. image:: https://img.shields.io/github/license/SectorLabs/django-localized-fields.svg\n    :target: https://github.com/SectorLabs/django-localized-fields/blob/master/LICENSE.md\n\n.. image:: https://badge.fury.io/py/django-localized-fields.svg\n    :target: https://pypi.python.org/pypi/django-localized-fields\n\n``django-localized-fields`` is an implementation of a field class for Django models that allows the field's value to be set in multiple languages. It does this by utilizing the ``hstore`` type (PostgreSQL specific), which is available as ``models.HStoreField`` since Django 1.10.\n\nThis package requires Python 3.5 or newer, Django 1.11 or newer and PostgreSQL 9.6 or newer.\n\n----\n\n**This README is for v5.x. Check out the master branch for v6.x and newer.**\n\n----\n\nContributors\n------------\n\n* `seroy <https://github.com/seroy/>`_\n* `umazalakain <https://github.com/umazalakain/>`_\n\nInstallation\n------------\n1. Install the package from PyPi:\n\n    .. code-block:: bash\n\n        $ pip install django-localized-fields==5.4.1\n\n2. Add ``localized_fields`` and ``django.contrib.postgres`` to your ``INSTALLED_APPS``:\n\n     .. code-block:: bash\n\n        INSTALLED_APPS = [\n            ...\n\n            'django.contrib.postgres',\n            'localized_fields.apps.LocalizedFieldsConfig'\n        ]\n\n3. Set the database engine to ``psqlextra.backend``:\n\n    .. code-block:: python\n\n        DATABASES = {\n            'default': {\n                ...\n                'ENGINE': 'psqlextra.backend'\n            }\n        }\n\n3. Set ``LANGUAGES` and `LANGUAGE_CODE`` in your settings:\n\n     .. code-block:: python\n\n         LANGUAGE_CODE = 'en' # default language\n         LANGUAGES = (\n             ('en', 'English'),\n             ('nl', 'Dutch'),\n             ('ro', 'Romanian')\n         )\n\n\n4. Apply migrations to enable the HStore extension:\n\n     .. code-block:: bash\n\n\t python manage.py migrate\n\nUsage\n-----\n\nPreparation\n^^^^^^^^^^^\nDeclare fields on your model as ``LocalizedField``:\n\n.. code-block:: python\n\n     from localized_fields.fields import LocalizedField\n\n\n     class MyModel(models.Model):\n         title = LocalizedField()\n\n``django-localized-fields`` integrates with Django's i18n system, in order for certain languages to be available you have to correctly configure the ``LANGUAGES`` and ``LANGUAGE_CODE`` settings:\n\n.. code-block:: python\n\n     LANGUAGE_CODE = 'en' # default language\n     LANGUAGES = (\n          ('en', 'English'),\n          ('nl', 'Dutch'),\n          ('ro', 'Romanian')\n     )\n\nAll the ``LocalizedField`` you define now will be available in the configured languages.\n\nBasic usage\n^^^^^^^^^^^\n.. code-block:: python\n\n     new = MyModel()\n     new.title.en = 'english title'\n     new.title.nl = 'dutch title'\n     new.title.ro = 'romanian title'\n     new.save()\n\nBy changing the active language you can control which language is presented:\n\n.. code-block:: python\n\n     from django.utils import translation\n\n     translation.activate('nl')\n     print(new.title) # prints 'dutch title'\n\n     translation.activate('en')\n     print(new.title) # prints 'english title'\n\nOr get it in a specific language:\n\n.. code-block:: python\n\n     print(new.title.get('en')) # prints 'english title'\n     print(new.title.get('ro')) # prints 'romanian title'\n     print(new.title.get()) # whatever language is the primary one\n     print(new.title.get('ar', 'haha')) # prints 'haha' if there is no value in arabic\n\nYou can also explicitly set a value in a certain language:\n\n.. code-block:: python\n\n     new.title.set('en', 'other english title')\n     new.title.set('nl', 'other dutch title')\n\n     new.title.ro = 'other romanian title'\n\nConstraints\n^^^^^^^^^^^\n\n**Required/Optional**\n\nConstraints are enforced on a database level.\n\n* Optional filling\n\n    .. code-block:: python\n\n        class MyModel(models.Model):\n            title = LocalizedField(blank=True, null=True, required=False)\n\n* Make translation required for any language\n\n    .. code-block:: python\n\n        class MyModel(models.Model):\n            title = LocalizedField(blank=False, null=False, required=False)\n\n* Make translation required for specific languages\n\n    .. code-block:: python\n\n        class MyModel(models.Model):\n            title = LocalizedField(blank=False, null=False, required=['en', 'ro'])\n\n* Make translation required for all languages\n\n    .. code-block:: python\n\n        class MyModel(models.Model):\n            title = LocalizedField(blank=False, null=False, required=True)\n\n* By default the primary language **required** and the others optional:\n\n    .. code-block:: python\n\n        class MyModel(models.Model):\n            title = LocalizedField()\n\n**Uniqueness**\n\nBy default the values stored in a ``LocalizedField`` are *not unique*. You can enforce uniqueness for certain languages. This uniqueness constraint is enforced on a database level using a ``UNIQUE INDEX``.\n\n* Enforce uniqueness for one or more languages:\n\n    .. code-block:: python\n\n        class MyModel(models.Model):\n            title = LocalizedField(uniqueness=['en', 'ro'])\n\n* Enforce uniqueness for **all** languages:\n\n    .. code-block:: python\n\n        from localized_fields.util import get_language_codes\n\n        class MyModel(models.Model):\n            title = LocalizedField(uniqueness=get_language_codes())\n\n* Enforce uniqueness for one ore more languages **together** (similar to Django's ``unique_together``):\n\n    .. code-block:: python\n\n        class MyModel(models.Model):\n            title = LocalizedField(uniqueness=[('en', 'ro')])\n\n* Enforce uniqueness for **all** languages **together**:\n\n    .. code-block:: python\n\n        from localized_fields.util import get_language_codes\n\n        class MyModel(models.Model):\n            title = LocalizedField(uniqueness=[(*get_language_codes())])\n\n\nOther fields\n^^^^^^^^^^^^\nBesides ``LocalizedField``, there's also:\n\n* ``LocalizedUniqueSlugField``\n    Successor of ``LocalizedAutoSlugField`` that fixes concurrency issues and enforces\n    uniqueness of slugs on a database level. Usage is the exact same:\n\n          .. code-block:: python\n\n              from localized_fields.models import LocalizedModel\n              from localized_fields.fields import LocalizedField, LocalizedUniqueSlugField\n\n              class MyModel(LocalizedModel):\n                   title = LocalizedField()\n                   slug = LocalizedUniqueSlugField(populate_from='title')\n\n    ``populate_from`` can be:\n\n        - The name of a field.\n\n           .. code-block:: python\n\n               slug = LocalizedUniqueSlugField(populate_from='name', include_time=True)\n\n        - A callable.\n\n           .. code-block:: python\n\n               def generate_slug(instance):\n                   return instance.title\n\n               slug = LocalizedUniqueSlugField(populate_from=generate_slug, include_time=True)\n\n        - A tuple of names of fields.\n\n           .. code-block:: python\n\n               slug = LocalizedUniqueSlugField(populate_from=('name', 'beer') include_time=True)\n\n    By setting the option ``include_time=True``\n\n          .. code-block:: python\n\n               slug = LocalizedUniqueSlugField(populate_from='title', include_time=True)\n\n    You can instruct the field to include a part of the current time into\n    the resulting slug. This is useful if you're running into a lot of collisions.\n\n* ``LocalizedBleachField``\n     Automatically bleaches the content of the field.\n\n          * django-bleach\n\n     Example usage:\n\n           .. code-block:: python\n\n              from localized_fields.fields import LocalizedField, LocalizedBleachField\n\n              class MyModel(models.Model):\n                   title = LocalizedField()\n                   description = LocalizedBleachField()\n\n* ``LocalizedIntegerField``\n    This is an experimental field type introduced in version 5.0 and is subject to change. It also has\n    some pretty major downsides due to the fact that values are stored as strings and are converted\n    back and forth.\n\n    Allows storing integers in multiple languages. This works exactly like ``LocalizedField`` except that\n    all values must be integers. Do note that values are stored as strings in your database because\n    the backing field type is ``hstore``, which only allows storing strings. The ``LocalizedIntegerField``\n    takes care of ensuring that all values are integers and converts the stored strings back to integers\n    when retrieving them from the database. Do not expect to be able to do queries such as:\n\n        .. code-block:: python\n\n            MyModel.objects.filter(score__en__gt=1)\n\n\n* ``LocalizedCharField`` and ``LocalizedTextField``\n    These fields following the Django convention for string-based fields use the empty string as value for “no data”, not NULL.\n    ``LocalizedCharField`` uses ``TextInput`` (``<input type=\"text\">``) widget for render.\n\n    Example usage:\n\n           .. code-block:: python\n\n              from localized_fields.fields import LocalizedCharField, LocalizedTextField\n\n              class MyModel(models.Model):\n                   title = LocalizedCharField()\n                   description = LocalizedTextField()\n\n* ``LocalizedFileField``\n    A file-upload field\n\n    Parameter ``upload_to`` supports ``lang`` parameter for string formatting or as function argument (in case if ``upload_to`` is callable).\n\n    Example usage:\n\n           .. code-block:: python\n\n              from localized_fields.fields import LocalizedFileField\n\n              def my_directory_path(instance, filename, lang):\n                # file will be uploaded to MEDIA_ROOT/<lang>/<id>_<filename>\n                return '{0}/{0}_{1}'.format(lang, instance.id, filename)\n\n              class MyModel(models.Model):\n                   file1 = LocalizedFileField(upload_to='uploads/{lang}/')\n                   file2 = LocalizedFileField(upload_to=my_directory_path)\n\n    In template you can access to file attributes:\n\n            .. code-block:: django\n\n              {# For current active language: #}\n\n              {{ model.file.url }}  {# output file url #}\n              {{ model.file.name }} {# output file name #}\n\n              {# Or get it in a specific language: #}\n\n              {{ model.file.ro.url }}  {# output file url for romanian language #}\n              {{ model.file.ro.name }} {# output file name for romanian language #}\n\n    To get access to file instance for current active language use ``localized`` method:\n\n            .. code-block:: python\n\n              model.file.localized()\n\nExperimental feature\n^^^^^^^^^^^^^^^^^^^^\nEnables the following experimental features:\n    * ``LocalizedField`` will return ``None`` instead of an empty ``LocalizedValue`` if there is no database value.\n    * ``LocalizedField`` lookups will lookup by currently active language instead of HStoreField\n\n.. code-block:: python\n\n     LOCALIZED_FIELDS_EXPERIMENTAL = True\n\n\nDjango Admin Integration\n^^^^^^^^^^^^^^^^^^^^^^^^\nTo enable widgets in the admin, you need to inherit from ``LocalizedFieldsAdminMixin``:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from myapp.models import MyLocalizedModel\n\n    from localized_fields.admin import LocalizedFieldsAdminMixin\n\n    class MyLocalizedModelAdmin(LocalizedFieldsAdminMixin, admin.ModelAdmin):\n        \"\"\"Any admin options you need go here\"\"\"\n\n    admin.site.register(MyLocalizedModel, MyLocalizedModelAdmin)\n\n\n.. image:: ./images/admin-widget.png\n    :alt: The appearance of admin widget\n\n\nFrequently asked questions (FAQ)\n--------------------------------\n\n1. Does this package work with Python 2?\n\n    No. Only Python 3.5 or newer is supported. We're using type hints. These do not work well under older versions of Python.\n\n2. With what Django versions does this package work?\n\n    Only Django 1.11 or newer is supported, this includes Django 2.X. This is because we rely on Django's ``HStoreField`` and template-based widget rendering.\n\n3. Does this package come with support for Django Admin?\n\n    Yes. Our custom fields come with a special form that will automatically be used in Django Admin if the field is of ``LocalizedField``.\n\n4. Why should I pick this over any of the other translation packages out there?\n\n    You should pick whatever you feel comfortable with. This package stores translations in your database without having to have translation tables. It however only works on PostgreSQL.\n\n5. I am using PostgreSQL <9.6, can I use this?\n\n    No. The ``hstore`` data type was introduced in PostgreSQL 9.6.\n\n6. I am using this package. Can I give you some beer?\n\n    Yes! If you're ever in the area of Cluj-Napoca, Romania, swing by :)",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SectorLabs/django-localized-fields",
    "keywords": "django,localized,language,models,fields",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-localized-fields",
    "package_url": "https://pypi.org/project/django-localized-fields/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-localized-fields/",
    "project_urls": {
      "Homepage": "https://github.com/SectorLabs/django-localized-fields"
    },
    "release_url": "https://pypi.org/project/django-localized-fields/5.4.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Implementation of localized model fields using PostgreSQL HStore fields.",
    "version": "5.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11959875,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d7f72863f340bf5f3610bca7af6d3af670765bfb330fd240d608593c341da47",
        "md5": "ff3a679b2ade15a26bfc1392fd740816",
        "sha256": "b5bef2bdde5720723955a42df79e012441099b77c774c702967467cb75a29f7c"
      },
      "downloads": -1,
      "filename": "django-localized-fields-5.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ff3a679b2ade15a26bfc1392fd740816",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21055,
      "upload_time": "2020-03-10T11:19:35",
      "upload_time_iso_8601": "2020-03-10T11:19:35.155667Z",
      "url": "https://files.pythonhosted.org/packages/2d/7f/72863f340bf5f3610bca7af6d3af670765bfb330fd240d608593c341da47/django-localized-fields-5.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}