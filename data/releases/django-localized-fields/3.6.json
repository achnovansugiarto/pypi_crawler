{
  "info": {
    "author": "Sector Labs",
    "author_email": "open-source@sectorlabs.ro",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "django-localized-fields\n=======================\n\n.. image:: https://scrutinizer-ci.com/g/SectorLabs/django-localized-fields/badges/quality-score.png\n    :target: https://scrutinizer-ci.com/g/SectorLabs/django-localized-fields/\n\n.. image:: https://scrutinizer-ci.com/g/SectorLabs/django-localized-fields/badges/coverage.png\n    :target: https://scrutinizer-ci.com/g/SectorLabs/django-localized-fields/\n\n.. image:: https://img.shields.io/github/license/SectorLabs/django-localized-fields.svg\n\n.. image:: https://badge.fury.io/py/django-localized-fields.svg\n    :target: https://pypi.python.org/pypi/django-localized-fields\n\n``django-localized-fields`` is an implementation of a field class for Django models that allows the field's value to be set in multiple languages. It does this by utilizing the ``hstore`` type (PostgreSQL specific), which is available as ``models.HStoreField`` in Django 1.10.\n\nThis package requires Python 3.5 or newer, Django 1.10 or newer and PostgreSQL 9.6 or newer.\n\nInstallation\n------------\n1. Install the package from PyPi:\n\n    .. code-block:: bash\n\n        $ pip install django-localized-fields\n\n2. Add ``localized_fields`` and ``django.contrib.postgres`` to your ``INSTALLED_APPS``:\n\n     .. code-block:: bash\n\n        INSTALLED_APPS = [\n            ....\n\n            'django.contrib.postgres',\n            'localized_fields'\n        ]\n\n3. Set the database engine to ``psqlextra.backend``:\n\n    .. code-block:: python\n\n        DATABASES = {\n            'default': {\n                ...\n                'ENGINE': 'psqlextra.backend'\n            }\n        }\n\n3. Set ``LANGUAGES` and `LANGUAGE_CODE`` in your settings:\n\n     .. code-block:: python\n\n         LANGUAGE_CODE = 'en' # default language\n         LANGUAGES = (\n             ('en', 'English'),\n             ('nl', 'Dutch'),\n             ('ro', 'Romanian')\n         )\n\nUsage\n-----\n\nPreparation\n^^^^^^^^^^^\nInherit your model from ``LocalizedModel`` and declare fields on your model as ``LocalizedField``:\n\n.. code-block:: python\n\n     from localized_fields.models import LocalizedModel\n     from localized_fields.fields import LocalizedField\n\n\n     class MyModel(LocalizedModel):\n         title = LocalizedField()\n\n``django-localized-fields`` integrates with Django's i18n system, in order for certain languages to be available you have to correctly configure the ``LANGUAGES`` and ``LANGUAGE_CODE`` settings:\n\n.. code-block:: python\n\n     LANGUAGE_CODE = 'en' # default language\n     LANGUAGES = (\n          ('en', 'English'),\n          ('nl', 'Dutch'),\n          ('ro', 'Romanian')\n     )\n\nAll the ``LocalizedField`` you define now will be available in the configured languages.\n\nBasic usage\n^^^^^^^^^^^\n.. code-block:: python\n\n     new = MyModel()\n     new.title.en = 'english title'\n     new.title.nl = 'dutch title'\n     new.title.ro = 'romanian title'\n     new.save()\n\nBy changing the active language you can control which language is presented:\n\n.. code-block:: python\n\n     from django.utils import translation\n\n     translation.activate('nl')\n     print(new.title) # prints 'dutch title'\n\n     translation.activate('en')\n     print(new.title) # prints 'english title'\n\nOr get it in a specific language:\n\n.. code-block:: python\n\n     print(new.title.get('en')) # prints 'english title'\n     print(new.title.get('ro')) # prints 'romanian title'\n     print(new.title.get()) # whatever language is the primary one\n\nYou can also explicitly set a value in a certain language:\n\n.. code-block:: python\n\n     new.title.set('en', 'other english title')\n     new.title.set('nl', 'other dutch title')\n\n     new.title.ro = 'other romanian title'\n\nConstraints\n^^^^^^^^^^^\n\n**Required/Optional**\n\nAt the moment, it is not possible to select two languages to be marked as required. The constraint is **not** enforced on a database level.\n\n* Make the primary language **required** and the others optional (this is the **default**):\n\n    .. code-block:: python\n\n        class MyModel(LocalizedModel):\n            title = LocalizedField(required=True)\n\n* Make all languages optional:\n\n    .. code-block:: python\n\n        class MyModel(LocalizedModel):\n            title = LocalizedField(null=True)\n\n**Uniqueness**\n\nBy default the values stored in a ``LocalizedField`` are *not unique*. You can enforce uniqueness for certain languages. This uniqueness constraint is enforced on a database level using a ``UNIQUE INDEX``.\n\n* Enforce uniqueness for one or more languages:\n\n    .. code-block:: python\n\n        class MyModel(LocalizedModel):\n            title = LocalizedField(uniqueness=['en', 'ro'])\n\n* Enforce uniqueness for **all** languages:\n\n    .. code-block:: python\n\n        from localized_fields import get_language_codes\n\n        class MyModel(LocalizedModel):\n            title = LocalizedField(uniqueness=get_language_codes())\n\n* Enforce uniqueness for one ore more languages **together** (similar to Django's ``unique_together``):\n\n    .. code-block:: python\n\n        class MyModel(LocalizedModel):\n            title = LocalizedField(uniqueness=[('en', 'ro')])\n\n* Enforce uniqueness for **all** languages **together**:\n\n    .. code-block:: python\n\n        from localized_fields import get_language_codes\n\n        class MyModel(LocalizedModel):\n            title = LocalizedField(uniqueness=[(*get_language_codes())])\n\n\nOther fields\n^^^^^^^^^^^^\nBesides ``LocalizedField``, there's also:\n\n* ``LocalizedUniqueSlugField``\n    Successor of ``LocalizedAutoSlugField`` that fixes concurrency issues and enforces\n    uniqueness of slugs on a database level. Usage is the exact same:\n\n          .. code-block:: python\n\n              from localized_fields import (LocalizedModel,\n                                            AtomicSlugRetryMixin,\n                                            LocalizedField,\n                                            LocalizedUniqueSlugField)\n\n              class MyModel(AtomicSlugRetryMixin, LocalizedModel):\n                   title = LocalizedField()\n                   slug = LocalizedUniqueSlugField(populate_from='title')\n\n    By setting the option ``include_time=True``\n\n          .. code-block:: python\n\n               slug = LocalizedUniqueSlugField(populate_from='title', include_time=True)\n\n    You can instruct the field to include a part of the current time into\n    the resulting slug. This is useful if you're running into a lot of collisions.\n\n* ``LocalizedAutoSlugField``\n     Automatically creates a slug for every language from the specified field.\n\n     Currently only supports ``populate_from``. Example usage:\n\n          .. code-block:: python\n\n              from localized_fields import (LocalizedModel,\n                                            LocalizedField,\n                                            LocalizedUniqueSlugField)\n\n              class MyModel(LocalizedModel):\n                   title = LocalizedField()\n                   slug = LocalizedAutoSlugField(populate_from='title')\n\n     This implementation is **NOT** concurrency safe, prefer ``LocalizedUniqueSlugField``.\n\n* ``LocalizedBleachField``\n     Automatically bleaches the content of the field.\n          * django-bleach\n\n     Example usage:\n\n           .. code-block:: python\n\n              from localized_fields import (LocalizedModel,\n                                            LocalizedField,\n                                            LocalizedBleachField)\n\n              class MyModel(LocalizedModel):\n                   title = LocalizedField()\n                   description = LocalizedBleachField()\n\nExperimental feature\n^^^^^^^^^^^^^^^^^^^^\n    Enables the following experimental features:\n        * ``LocalizedField`` will return ``None`` instead of an empty ``LocalizedValue`` if there is no database value.\n\n    .. code-block:: python\n\n         LOCALIZED_FIELDS_EXPERIMENTAL = True\n\n\nFrequently asked questions (FAQ)\n--------------------------------\n\n1. Does this package work with Python 2?\n\n    No. Only Python 3.5 or newer is supported. We're using type hints. These do not work well under older versions of Python.\n\n2. Does this package work with Django 1.X?\n\n    No. Only Django 1.10 or newer is supported. This is because we rely on Django's ``HStoreField``.\n\n3. Does this package come with support for Django Admin?\n\n    Yes. Our custom fields come with a special form that will automatically be used in Django Admin if the field is of ``LocalizedField``.\n\n4. Why should I pick this over any of the other translation packages out there?\n\n    You should pick whatever you feel comfortable with. This package stores translations in your database without having to have translation tables. It however only works on PostgreSQL.\n\n5. I am using PostgreSQL <9.6, can I use this?\n\n    No. The ``hstore`` data type was introduced in PostgreSQL 9.6.\n\n6. I am using this package. Can I give you some beer?\n\n    Yes! If you're ever in the area of Cluj-Napoca, Romania, swing by :)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SectorLabs/django-localized-fields",
    "keywords": "django,localized,language,models,fields",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-localized-fields",
    "package_url": "https://pypi.org/project/django-localized-fields/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-localized-fields/",
    "project_urls": {
      "Homepage": "https://github.com/SectorLabs/django-localized-fields"
    },
    "release_url": "https://pypi.org/project/django-localized-fields/3.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Implementation of localized model fields using PostgreSQL HStore fields.",
    "version": "3.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11959875,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92171b74e9514389c32f0eec5ed458f579061e56c0693b126ff93464671ec148",
        "md5": "dc0cb7159e8bf8c89ef8153e00afbabd",
        "sha256": "95353298be6b2c70d6d2bb315d02a41776fabce61152411268da5a445b7c25e2"
      },
      "downloads": -1,
      "filename": "django-localized-fields-3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "dc0cb7159e8bf8c89ef8153e00afbabd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18075,
      "upload_time": "2017-03-24T13:15:15",
      "upload_time_iso_8601": "2017-03-24T13:15:15.987262Z",
      "url": "https://files.pythonhosted.org/packages/92/17/1b74e9514389c32f0eec5ed458f579061e56c0693b126ff93464671ec148/django-localized-fields-3.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}