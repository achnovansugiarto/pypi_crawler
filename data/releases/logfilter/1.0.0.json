{
  "info": {
    "author": "Matteo Landi",
    "author_email": "matteo@matteolandi.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Topic :: Text Processing :: Filters",
      "Topic :: Utilities"
    ],
    "description": "**logfilter** is a python application handy for real-time processing of very\nlong log files.\n\nTake the command ``tail -f``, combine it with ``grep -e PATTER [-e PATTERN\n...]``, and add a simple GUI enabling users to choose the log file to monitor\nand the filters to use:  well, that is the essence of **logfilter** (or as other\nwould say, **logfilter** in a nutshell).\n\n\nDependencies\n============\n\n- Python with Tkinter support\n\n\nInstall\n=======\n\n**logfilter** can be installed using either the Bitbucket mercurial repository,\nor the Python Package Index (PyPI).  If you feel lucky and you don't mind using\na possibly unstable application in order to benefit of the latest project\nfeatures, then choose the former.  On the other hand, if you don't want to spend\ntime filing bug reports due to crashing applications, then the latter would be\ndefinitely the better option (... I hope).\n\nFrom sources::\n\n    cd /wherever/you/want\n    hg clone https://bitbucket.org/iamFIREcracker/logfilter\n    python setup.py install\n\n\nFrom the PyPI::\n\n    pip install logfilter\n\n\nUsage\n=====\n\nTo give you an idea of the configuration options available for **logfilter**,\nthis is the help of the application::\n\n\n    usage: logfilter [-h] [-s SLEEP_INTERVAL] [-l LIMIT] [-e FILTERS]\n                    [--font FONT] [--version]\n                    [FILENAME]\n\n    Filter the content of a file, dynamically\n\n    positional arguments:\n    FILENAME              Filename to filter.\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    -s SLEEP_INTERVAL, --sleep-interval SLEEP_INTERVAL\n                            Sleep SLEEP_INTERVAL seconds between iterations\n    -l LIMIT, --limit LIMIT\n                            Number of lines to display in the text area\n    -e FILTERS, --regexp FILTERS\n                            Filter presets\n    --font FONT           Font used by the application\n    --version             print the application version and quit\n\nDon't be scared, you don't need to configure all of them to start the\napplication;  the GUI indeed, will let you customize them later.  However,\nconsider to use command line options to create handy aliases or shortcuts.\n\nFor example, imagine you are about to work with log files containing among the\nother things, Java stack traces.  You could think about launching the\napplication with the following options, in order to get notified as soon as\na new exception (and relative stack trace) is added to the observed file::\n\n    python logfilter.py -e '([Ee]xception|\\tat)' LOGFILE.log\n\nMoreover, imagine you working on a new module being part of bigger project (all\nthe log traces coming from such a module, have a special ``FOO`` keyword\nassociated); then, to follow the live behavior of the module while still\nobserving exceptional events coming from the rest of the application, you could\nstart **logfilter** with the following options::\n\n    python logfilter.py -e '([Ee]xception|\\tat)' -e FOO LOGFILE.log\n\n\nEdit files\n----------\n\nSince version *0.6.0dev*, it is possible to configure **logfilter** to open the\nmonitored file with an external editor.\n\nThe application will look for *special* environment variables (i.e.\n``LFEDITOR`` first, then ``VISUAL`` and finally ``EDITOR``) containing\ninformation regarding the external application to launch to edit the file at the\nline of interest.\n\nFor example, to make ``gvim`` your external editor, run ``logfilter`` as\nfollows::\n\n    LFEDITOR=\"gvim FILE +ROW\" logfilter LOGFILE.log -e FOO\n\nOtherwise, if you are on Windows and prefer to use ``TextPad``::\n\n    set LFEDITOR=\"C:\\Programs\\TextPad 4\\TextPad.exe\" FILE(ROW,0)& logfilter\n\nThe ``FILE`` and ``ROW`` markers will be automatically replaced by **logfilter**\nwith the name of the monitored file and with the current selected line\nrespectively.\n\n\nChangelog\n=========\n\n1.0.0 (2018-08-12) - made 0.8.0dev public\n\n0.8.0dev (2013-09-02):\n\n- ISSUE-31: it is now possible to add or remove filters dynamically at run-time\n  (i.e. a new filter can be added focusing the text box containing the text\n  ``<Add new>``, while old ones can be removed by blanking their text box).\n  Contenxtually with this change, the command line switches `-f` and\n  `--num-filters` have been removed.\n- ISSUE-29: add popup entry to enable/disable passthru behaviour (i.e. display\n  all the lines and highlight only those bits matching filters).  Contextually,\n  the command line switches `-a` and `--catch-all` have been removed.\n- The application does not quit anymore if the `Escape` key is pressed.\n- Add `--version` command line switch.\n\n0.7.0dev (2012-12-08):\n\n- ISSUE-24: fix a bug where the selected text of the current line was not\n  highlighted properly\n- ISSUE-27: add `--font` command line option to configure the font\n- ISSUE-28: fix a bug where multiple line end up being selected when a new line\n  was rendered in the text widget\n- ISSUE-25: fix PY3K compatibility (there was a problem with local imports)\n\n0.6.0dev (2012-12-01):\n\n- ISSUE-23: add popup menu entry to disable *raise on output*\n- ISSUE-19: add popup menu entry to enable line greedy coloring (multiple\n  matches for the same filter in the same line)\n- ISSUE-21: add support for opening the current file in a configured external\n  editor\n\n0.5.0dev (2012-10-17):\n\n- ISSUE-18: add a catch-all filter (enabled with ``-a`` or ``--catch-all``)\n  which force the application to output all the lines of the file.  Moreover,\n  the lines matching filters expressions, will be highlighted as well\n- ISSUE-15: remember last user directory while opening the file chooser dialog\n  multiple times\n- ISSUE-16: add a popup menu entry which disable the *scroll on output* behavior\n\n0.4.0dev (2012-09-22):\n\n- Fix a bug where matched strings were not colored when the number of filters\n  was greater than the size of the color palette\n- Install the application as a gui script (on Windows, do not open\n  a ``cmd.exe``)\n\n0.3.1dev (2012-08-10):\n\n- Add right-click menu with an entry to clear the text widget (issue #10)\n- Better window focus management on new content read from the file (issue #12)\n- Add configuration setting to enable infinite scroll (issue #11)\n\n0.2.1dev (2012-07-07):\n\n- Add python 3.2 compatibility\n\n0.1.2dev (2012-06-27):\n\n- Better packaging (create a console script to run logfilter)\n\n0.1.1 (2012-06-25):\n\n- Add MANIFEST.in file (issue #9)\n\n0.1.0 (2012-06-02):\n\n- First public release",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "http://pypi.python.org/pypi/logfilter",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/iamFIREcracker/logfilter",
    "keywords": "log,filter,grep,tail",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logfilter",
    "package_url": "https://pypi.org/project/logfilter/",
    "platform": "",
    "project_url": "https://pypi.org/project/logfilter/",
    "project_urls": {
      "Download": "http://pypi.python.org/pypi/logfilter",
      "Homepage": "https://bitbucket.org/iamFIREcracker/logfilter"
    },
    "release_url": "https://pypi.org/project/logfilter/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Poll log files for updates and highlight words based on regexp filters",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4161356,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "621510691ba4a4f23465f6982b04bd4d2462efd23b9692e3f8afe7cc49f46a4d",
        "md5": "930fdc3547423f586cb112bfb23e9a7b",
        "sha256": "e87257a3f6e67a309d088a1c0609573081638103b512e34188d9989890332fa0"
      },
      "downloads": -1,
      "filename": "logfilter-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "930fdc3547423f586cb112bfb23e9a7b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14984,
      "upload_time": "2018-08-12T10:20:58",
      "upload_time_iso_8601": "2018-08-12T10:20:58.069230Z",
      "url": "https://files.pythonhosted.org/packages/62/15/10691ba4a4f23465f6982b04bd4d2462efd23b9692e3f8afe7cc49f46a4d/logfilter-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}