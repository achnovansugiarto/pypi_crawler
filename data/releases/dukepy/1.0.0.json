{
  "info": {
    "author": "Pulkit Singh",
    "author_email": "pulkitsingh01@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## dukepy\ncollection of useful python snippets\n\n`pip install dukepy`\n\n### config\nConfiuration manager (using json) with the ability to \n* add new keys\n* remove deprecated keys (i.e. keys not in defaults)\n* backup the older versions of the (json) configuration file\n\nGenerated sample file -\n\nC:\\Users\\xyz\\.myconfig\\config.json\n```json\n{\n    \"newkey1\": \"newvalue1\",\n    \"newkeygroup1\": {\n        \"newkey2\": \"newvalue2\"\n    },\n    \"newkey3\": [\n        \"newvalue4\",\n        \"newvalue4\"\n    ],\n    \"newkey5\": \"newvalue5\"\n}\n```\n\nUsage example -\n```python\nimport os\n\nfrom dukepy.config import Config\n\nconfig_dir = os.path.join(os.path.expanduser(\"~\"), \".myconfig\")\nconfig_file = os.path.join(config_dir, \"config.json\")\nConfig(path=config_file, defaults={\n    \"newkey1\": \"newvalue1\",\n    \"newkeygroup1\": {\n        \"newkey2\": \"newvalue2\"\n    },\n    \"newkey3\": [\"newvalue4\", \"newvalue4\"]\n})\n\nConfig()[\"newkey5\"] = \"newvalue5\"\nConfig().commit()\n```\n\n### converge\nTo find the extremes of a finite sequence, given that the sequence is continuous.\nProvide at least two known numbers in the sequence,\nand a method to check the validity of the number predicted by the algorithm.\n\nUsage example -\n```python\ndef check_validity(val):\n    if val > -30 and val < 101:\n        return True\n    else:\n        return False\n\n\nlow, high = Converge(-28, 50, check_validity).run()\nprint(low)\nprint(high)\n```\n\nOutput -\n```\n-29\n100\n```\n\n### dict_diff\n* To find the recursive differences between two dictionaries.\n* To update one dictionary with the other (each one optional)-\n  * Add keys from the other\n  * Remove keys which are not part of the other\n  * Update values from the keys of the other\n\nUsage example -\n```python\ndictionary_1 = {\"abc\": \"value_abc\",\n                    \"prs\": \"value_prs\"}\n    dictionary_2 = {\"abc\": \"value_abc\",\n                    \"xyz\": \"value_xyz\"}\n    dict_diff(dictionary_1, dictionary_2)\n    print(dictionary_1)\n    print(dictionary_2)\n\n    dict_diff(dictionary_1, dictionary_2,\n              udpate_added_keys=True)\n\n    print(dictionary_1)\n    print(dictionary_2)\n```\n\nOutput -\n```\n:\n -  prs  :  value_prs\n :\n +  xyz  :  value_xyz\n{'abc': 'value_abc', 'prs': 'value_prs'}\n{'abc': 'value_abc', 'xyz': 'value_xyz'}\n :\n -  prs  :  value_prs\n :\n +  xyz  :  value_xyz\n{'abc': 'value_abc', 'prs': 'value_prs', 'xyz': 'value_xyz'}\n{'abc': 'value_abc', 'xyz': 'value_xyz'}\n```\n### logger\n### mail_bot\n### safe_dict\n### singleton\n### taces\nPrints the origin of the exception, not just the exception string.\nUsage example -\n```python\nmydict = dict()\n    try:\n        print(mydict[\"sdf\"])\n    except Exception as e:\n        print_exception_traces(e)\n```\n\nOutput -\n```\nTraceback (most recent call last):\n  File \"C:/Dev/libpython/src/dukepy/traces.py\", line 16, in <module>\n    print(mydict[\"sdf\"])\nKeyError: 'sdf'\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/duke79/libpython",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dukepy",
    "package_url": "https://pypi.org/project/dukepy/",
    "platform": "",
    "project_url": "https://pypi.org/project/dukepy/",
    "project_urls": {
      "Homepage": "https://github.com/duke79/libpython"
    },
    "release_url": "https://pypi.org/project/dukepy/1.0.0/",
    "requires_dist": [
      "colorama",
      "pypiwin32",
      "Flask-SQLAlchemy"
    ],
    "requires_python": "",
    "summary": "A useful collection of utilities",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4424742,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ecee6e0a787dbee130f129f24b6b0627fcfe9fac733754b8d6d220f77973b52",
        "md5": "74823f1d368586c5d87905ac28b68aeb",
        "sha256": "822bd8d9ca92310ee76ed8ef60e4cfdf8672bd284f6dee79cb119661e6c0257a"
      },
      "downloads": -1,
      "filename": "dukepy-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "74823f1d368586c5d87905ac28b68aeb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15357,
      "upload_time": "2018-10-21T08:35:18",
      "upload_time_iso_8601": "2018-10-21T08:35:18.102602Z",
      "url": "https://files.pythonhosted.org/packages/9e/ce/e6e0a787dbee130f129f24b6b0627fcfe9fac733754b8d6d220f77973b52/dukepy-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25be2b6f827d5b8cf6db2ff0372ddd36ba999a698812f5678316964daf3d6c5b",
        "md5": "db5e57f1ef658ed7124ac0a137bacdba",
        "sha256": "62ed955607ba165e0c43e47960f058979b6f75e9ef2e105b9020bf5358e3636a"
      },
      "downloads": -1,
      "filename": "dukepy-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "db5e57f1ef658ed7124ac0a137bacdba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11704,
      "upload_time": "2018-10-21T08:35:19",
      "upload_time_iso_8601": "2018-10-21T08:35:19.556743Z",
      "url": "https://files.pythonhosted.org/packages/25/be/2b6f827d5b8cf6db2ff0372ddd36ba999a698812f5678316964daf3d6c5b/dukepy-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}