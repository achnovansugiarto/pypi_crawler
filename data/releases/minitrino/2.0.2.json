{
  "info": {
    "author": "Jeff Lester",
    "author_email": "jeff.lester.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Minitrino\n\nA command line tool that makes it easy to run modular Trino environments\nlocally. Compatible with Staburst version 354-e and later.\n\n[![PyPI\nversion](https://badge.fury.io/py/minitrino.svg)](https://badge.fury.io/py/minitrino)\n[![Build\nStatus](https://travis-ci.org/jefflester/minitrino.svg?branch=master)](https://app.travis-ci.com/jefflester/minitrino.svg?branch=master)\n[![Trino\nSlack](https://img.shields.io/static/v1?logo=slack&logoColor=959DA5&label=Slack&labelColor=333a41&message=join%20conversation&color=3AC358)](https://trinodb.io/slack.html)\n\n-----\n\n**Latest Stable Release**: 2.0.2\n\n-----\n\n## Overview\n\n- [Minitrino](#minitrino)\n  - [Overview](#overview)\n  - [Requirements](#requirements)\n  - [Installation](#installation)\n    - [End Users](#end-users)\n    - [Developers](#developers)\n  - [CLI](#cli)\n    - [Top-Level CLI Options](#top-level-cli-options)\n    - [Provisioning Environments](#provisioning-environments)\n      - [Environment Variables](#environment-variables)\n      - [Using Licensed Starburst Features](#using-licensed-starburst-features)\n    - [Removing Resources](#removing-resources)\n    - [Shutting Down Environments](#shutting-down-environments)\n    - [Taking Environment Snapshots](#taking-environment-snapshots)\n    - [Manage User Configuration](#manage-user-configuration)\n    - [Install the Library](#install-the-library)\n    - [Display Module Metadata](#display-module-metadata)\n    - [Display Minitrino Versions](#display-minitrino-versions)\n    - [Pointing the CLI to the Minitrino Library](#pointing-the-cli-to-the-minitrino-library)\n  - [Minitrino Configuration File](#minitrino-configuration-file)\n    - [[CLI] Section](#cli-section)\n    - [[DOCKER] Section](#docker-section)\n    - [[TRINO] Section](#trino-section)\n    - [[MODULES] Section](#modules-section)\n  - [Project Structure](#project-structure)\n    - [Trino Dockerfile](#trino-dockerfile)\n  - [Adding New Modules (Tutorial)](#adding-new-modules-tutorial)\n    - [Create the Module Directory](#create-the-module-directory)\n    - [Add Trino Resources](#add-trino-resources)\n    - [Add the Docker Compose YAML](#add-the-docker-compose-yaml)\n    - [Add a Metadata File](#add-a-metadata-file)\n    - [Add a Readme File](#add-a-readme-file)\n    - [Review Progress](#review-progress)\n    - [Configure the Docker Compose YAML File](#configure-the-docker-compose-yaml-file)\n    - [Important Implementation Details: Paths and Labels](#important-implementation-details-paths-and-labels)\n      - [Path References for Volumes and Build Contexts](#path-references-for-volumes-and-build-contexts)\n      - [Minitrino Docker Labels](#minitrino-docker-labels)\n    - [Test the New Catalog](#test-the-new-catalog)\n    - [Customizing Images](#customizing-images)\n    - [Bootstrap Scripts](#bootstrap-scripts)\n      - [Installing Shell Packages for Bootstrap Scripts](#installing-shell-packages-for-bootstrap-scripts)\n    - [Managing Trino's `config.properties` File](#managing-trinos-configproperties-file)\n  - [Troubleshooting](#troubleshooting)\n  - [Reporting Bugs and Contributing](#reporting-bugs-and-contributing)\n\n-----\n\n## Requirements\n\n- Docker 19.03.0+\n- Docker Compose (1.29.0+)\n- Python 3.8+\n- Pip\n- Linux or Mac OS\n\n-----\n\n## Installation\n\n### End Users\n\nMinitrino is available on PyPI and the library is available for public download\non GitHub. To install the Minitrino CLI, run `pip install minitrino`. To install\nthe library, run `minitrino lib_install`.\n\n### Developers\n\nIn the project's root, run `./install.sh` to install the Minitrino CLI. If you\nencounter errors during installation, try running `sudo -H ./install.sh -v`.\n\n-----\n\n## CLI\n\nMinitrino is built with [Click](https://click.palletsprojects.com/en/7.x/), a\npopular, open-source toolkit used to build Python-based CLIs.\n\nAll Minitrino commands/options are documented below. Note that many command\noptions can be specified with a shorthand alternative, which is the first letter\nof each option, i.e. `--module` can be `-m`.\n\n### Top-Level CLI Options\n\nYou can get help, enable verbose output, and change the runtime library\ndirectory for any command.\n\n```\nUsage: minitrino [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -v, --verbose   Enable verbose output.\n  -e, --env TEXT  Add or override environment variables.\n\n                  Environment variables are sourced from the Minitrino\n                  library's root 'minitrino.env' file as well as the user \n                  config file in '~/.minitrino/minitrino.cfg'. Variables \n                  supplied by this option will override values from either \n                  of those sources. The variables will also be passed to the\n                  environment of the shell executing commands during the\n                  'provision' command.\n\n  --help          Show this message and exit.\n```\n\n### Provisioning Environments\n\nYou can provision an environment via the `provision` command.\n\n```\nUsage: minitrino provision [OPTIONS]\n\n  Provision an environment based on specified modules. All options are\n  optional and can be left empty.\n\nOptions:\n  -m, --module TEXT         A specific module to provision.\n  -n, --no-rollback         Do not rollback provisioned resources in the event\n                            of an error.\n\n  -d, --docker-native TEXT  Appends native docker-compose commands to the\n                            generated docker-compose shell command. Run\n                            `docker-compose up --help` to see all available\n                            options.\n\n                            Example: minitrino provision --docker-native\n                            --build\n\n                            Example: minitrino provision --docker-native '--\n                            remove-orphans --force-recreate'\n\n  --help                    Show this message and exit.\n```\n\nNotes:\n\n- If no options are passed in, the CLI will provision a standalone Trino\n  container.\n- The command cannot currently be used to append additional modules to an active\n  environment. To modify an environment, first shut it down, then re-provision\n  with the needed modules.\n\nSample `provision` commands:\n\n```bash\nminitrino provision \\\n  --module hive-s3 \\\n  --module elasticsearch \\\n  --module ldap \\\n  --docker-native '--build --force-recreate'\n\nminitrino provision -m hive-s3 -m elasticsearch -m ldap\n\nminitrino --env STARBURST_VER=332-e.6 provision\n```\n\nThe `provision` command constructs a Docker Compose command and executes it in\nthe host shell. The commands look similar to:\n\n```bash\nENV_VAR_1=SOMETHING ENV_VAR_2=SOMETHING ENV_VAR_3=${ENV_VAR_3} ... \\\ndocker-compose -f docker-compose.yml \\\n  -f modules/catalog/elasticsearch/elasticsearch.yml \\\n  -f modules/catalog/hive-s3/hive-s3.yml \\\n  -f modules/security/ldap/ldap.yml \\\n  up -d\n```\n\nUsing the structure of the Minitrino library, it is able to merge multiple\nDocker Compose files together.\n\n#### Environment Variables\n\nEnvironment variables passed to Docker containers are sourced through two\nlocations. The first is from the `minitrino.env` file in the library root. These\nvariables define the versions of the provisioned Docker services. The second is\nfrom from variables set in the `[MODULES]` section of the `minitrino.cfg` file.\nThese variables can contain sensitive information like access credentials, so\ntheir values are intentionally left out of library files.\n\nAny existing environment variable can be overridden with the top-level `--env`\noption, and any unset variable can be set with it.\n\n#### Using Licensed Starburst Features\n\nIf you are using licensed features, you will need to provide a path to a valid\nStarburst license. This can be set via `minitrino config` or provided via the\n`--env` option at command runtime. The variable for this is\n`STARBURST_LIC_PATH`.\n\nAdditionally, you need to uncomment the volume mount in the library's root\n`docker-compose.yml` file:\n\n```yaml\n  # Uncomment this to enable the volume mount. The variable should point to a\n  # valid SEP license. \n  volumes:\n    - \"${STARBURST_LIC_PATH}:/etc/starburst/starburstdata.license:ro\"\n```\n\n### Removing Resources\n\nYou can remove resources with the `remove` command.\n\n```\nUsage: minitrino remove [OPTIONS]\n\n  Remove Minitrino resources.\n\nOptions:\n  -i, --images      Remove Minitrino images.\n  -v, --volumes     Remove Minitrino container volumes.\n  -l, --label TEXT  Target specific labels for removal (format: key-value\n                    pair(s)).\n\n  -f, --force       Force the removal of Minitrino resources. Normal Docker\n                    removal restrictions apply.\n\n  --help            Show this message and exit.\n```\n\nNotes:\n\n- Named volumes tied to any *existing* container cannot be forcibly removed,\n  neither by Minitrino nor by the Docker CLI/SDK.\n- Images tied to stopped containers can be forcibly removed, but any image tied\n  to a running container cannot be forcibly removed, neither by Minitrino nor by\n  the Docker CLI.\n- You can find a module's label key by looking at the module's\n  `docker-compose.yml` file in the Minitrino library.\n\nSample `remove` command:\n\n```bash\nminitrino -v remove \\\n  --volumes \\\n  --label com.starburst.tests.module.postgres=catalog-postgres \\\n  --force\n```\n\nThis will only remove volumes associated to the Postgres catalog module.\n\n### Shutting Down Environments\n\nYou can shut down an active environment with the `down` command.\n\n```\nUsage: minitrino down [OPTIONS]\n\n  Bring down running Minitrino containers. This command follows the\n  behavior of `docker-compose down` where containers are both stopped and\n  removed.\n\nOptions:\n  -k, --keep  Does not remove containers; instead, containers will only be\n              stopped.\n\n  --sig-kill  Stop Minitrino containers without a grace period.\n  --help      Show this message and exit.\n```\n\nSample `down` command:\n\n```bash\nminitrino -v down\n```\n\n### Taking Environment Snapshots\n\nYou can capture snapshots for both active and inactive environments with the\n`snapshot` command.\n\n```\nUsage: minitrino snapshot [OPTIONS]\n\n  Create a snapshot of a Minitrino environment. A tarball is placed in the\n  Minitrino `lib/snapshots/` directory.\n\n  To take a snapshot of an active environment, leave the `--module` and\n  option out of the command.\n\n  To take a snapshot of modules whether they are active or not, specify the\n  modules via the `--module` option.\n\nOptions:\n  -m, --module TEXT     A specific module to snapshot.\n  -n, --name TEXT       Basename of the resulting snapshot tarball file.\n                        Allowed characters: alphanumerics, hyphens, and\n                        underscores.  [required]\n\n  -d, --directory PATH  Directory to save the resulting snapshot file in.\n                        Defaults to the snapshots directory in the Minitrino\n                        library.\n\n  -f, --force           Overwrite the file if it already exists.\n  --no-scrub            Do not scrub sensitive data from user config file.\n\n                        WARNING: all sensitive information (passwords and\n                        keys) will be kept in the user config file added to\n                        the snapshot. Only use this if you are prepared to\n                        share those secrets with another person.\n\n  --help                Show this message and exit.\n```\n\nNotes:\n\n- Minitrino records the original `provision` command and places it in the\n  snapshot file as `provision-snapshot.sh`; this can be directly executed. This\n  makes it easier for others to reuse the environment and provision it\n  identically.\n\nSample `snapshot` commands:\n\n```bash\n# Take a snapshot of an active environment (this will create a tarball \n# called `snapshot-t2533.tar.gz` in the library's `snapshots/` directory):\nminitrino snapshot --name t-2533\n\n# Take a snapshot of specific modules:\nminitrino snapshot -n super-cool-env -m hive-s3 -m elasticsearch -m ldap\n```\n\n### Manage User Configuration\n\nYou can manage Minitrino configuration with the `config` command.\n\n```\nUsage: minitrino config [OPTIONS]\n\n  Edit the Minitrino user configuration file.\n\nOptions:\n  -r, --reset  Reset the Minitrino user configuration file and create a new\n               config file from a template.\n\n               WARNING: This will remove your configuration file (if it\n               exists) and replace it with a template.\n\n  --help       Show this message and exit.\n```\n\n### Install the Library\n\nYou can install the Minitrino library with the `lib_install` command. Note that\nit is best practice to have the library version match the CLI version. You can\ncheck these versions with `minitrino version`.\n\n```\nUsage: minitrino lib_install [OPTIONS]\n\n  Install the Minitrino library.\n\nOptions:\n  -v, --version TEXT  The version of the library to install.\n  --help              Show this message and exit.\n```\n\n### Display Module Metadata\n\nYou can see Minitrino module metadata with the `modules` command.\n\n```\nUsage: minitrino modules [OPTIONS]\n\n  Display module metadata.\n\nOptions:\n  -m, --module TEXT  A specific module to display metadata for.\n  -j, --json         Print the resulting metadata in JSON form (shows\n                     additional module metadata).\n\n  -r, --running      Print metadata for all running modules.\n  --help             Show this message and exit.\n```\n\n### Display Minitrino Versions\n\nYou can display the Minitrino CLI and library versions with the `version`\ncommand.\n\n```\nUsage: minitrino version [OPTIONS]\n\n  Display Minitrino CLI and library versions.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n### Pointing the CLI to the Minitrino Library\n\nThe Minitrino CLI should always point to a compatible library with the expected\nstructure. The library directory can be set one of four ways, listed below in\nthe order of precedence:\n\n1. Passing the `LIB_PATH` variable to the CLI's `--env` option sets the library\n   directory for the current command.\n2. The `minitrino.cfg` file's `LIB_PATH` variable sets the library directory if\n   present.\n3. The path `~/.minitrino/lib/` is used as the default lib path if the\n   `LIB_PATH` var is not found.\n4. As a last resort, Minitrino will check to see if the library exists in\n   relation to the positioning of the `components.py` file and assumes the\n   project is being run out of a cloned repository.\n\nIf you not running out of a cloned repository, it is advisable to provide a\npointer to the library in Minitrino's configuration via the `LIB_PATH` config.\n\n-----\n\n## Minitrino Configuration File\n\nSticky configuration is set in `~/.minitrino/minitrino.cfg`. The sections in\nthis file each serve a separate purpose.\n\n### [CLI] Section\n\nThese configs allow the user to customize the behavior of Minitrino.\n\n- LIB_PATH: The filesystem path of the Minitrino library (specifically to the\n  `lib/` directory).\n- TEXT_EDITOR: The text editor to use with the `config` command, e.g. \"vi\",\n  \"nano\", etc. Defaults to the shell's default editor.\n\n### [DOCKER] Section\n\nThese configs allow the user to customize how Minitrino uses Docker.\n\n- DOCKER_HOST: A URL pointing to an accessible Docker host. This is\n  automatically detected by Docker otherwise.\n\n### [TRINO] Section\n\nThese configs allow the user to propagate config to the Trino container. Since\nmany modules can append to Trino's core files, the supported way to make\npropagate changes to these Trino files is with these configs.\n\n- CONFIG: Configuration for Trino's `config.properties` file.\n- JVM_CONFIG: Configuration for Trino's `jvm.config` file.\n\nA multiline example of this section (note the indentation):\n\n```\n[TRINO]\nCONFIG=\n    query.max-memory-per-node=500MB\n    query.max-total-memory-per-node=500MB\nJVM_CONFIG=\n    -Dsun.security.krb5.debug=true\n```\n\n### [MODULES] Section\n\nThis section sets environment variables passed to containers provisioned by\nMinitrino. Environment variables are only passed to a container if the variable\nis specified in the module's `docker-compose.yml` file.\n\nVariables propagated to the Trino container are supported by Trino secrets.\n\n- STARBURST_LIC_PATH: Required if using licensed Starburst Enterprise Trino\n  features. It can point to any valid license on your filesystem.\n- S3_ENDPOINT\n- S3_ACCESS_KEY\n- S3_SECRET_KEY\n- AWS_REGION\n- SNOWFLAKE_DIST_CONNECT_URL\n- SNOWFLAKE_DIST_CONNECT_USER\n- SNOWFLAKE_DIST_CONNECT_PASSWORD\n- SNOWFLAKE_DIST_WAREHOUSE\n- SNOWFLAKE_DIST_DB\n- SNOWFLAKE_DIST_STAGE_SCHEMA\n- SNOWFLAKE_JDBC_CONNECT_URL\n- SNOWFLAKE_JDBC_CONNECT_USER\n- SNOWFLAKE_JDBC_CONNECT_PASSWORD\n- SNOWFLAKE_JDBC_WAREHOUSE\n- SNOWFLAKE_JDBC_DB\n- SNOWFLAKE_JDBC_STAGE_SCHEMA\n\n-----\n\n## Project Structure\n\nThe library is built around Docker Compose files and utilizes Docker's ability\nto [extend Compose\nfiles](https://docs.docker.com/compose/extends/#multiple-compose-files).\n\nThe Starburst Trino service is defined in a Compose file at the library root,\nand all other services look up in the directory tree to reference the parent\nTrino service. In Compose files, the fully-qualified path––relative to the\nlibrary's root `docker-compose.yml` file––must be provided for Docker to locate\nresources.\n\nA simplified library structure:\n\n```\nlib\n├── Dockerfile\n├── docker-compose.yml\n├── minitrino.env\n├── modules\n│   ├── catalog\n│   │   └── postgres\n│   │       ├── metadata.json\n│   │       ├── postgres.yml\n│   │       ├── readme.md\n│   │       └── resources\n│   │           ├── postgres\n│   │           │   └── postgres.env\n│   │           └── trino\n│   │               └── postgres.properties\n│   ├── resources\n│   │   └── wait-for-it.sh\n│   └── security\n│       └── event-logger\n│           ├── event-logger.yml\n│           ├── metadata.json\n│           ├── readme.md\n│           └── resources\n│               ├── event-logger\n│               │   └── postgres.env\n│               └── trino\n│                   ├── event-listener.properties\n│                   └── postgres_event_logger.properties\n├── snapshots\n└── version\n```\n\nAnd the contents of a `docker-compose.yml` file (`postgres.yml`):\n\n```yaml\nversion: \"3.8\"\nservices:\n\n  trino:\n    volumes:\n      - \"./modules/catalog/postgres/resources/trino/postgres.properties:/etc/starburst/catalog/postgres.properties\"\n\n  postgres:\n    image: \"postgres:${POSTGRES_VER}\"\n    container_name: \"postgres\"\n    labels:\n      - \"com.starburst.tests=minitrino\"\n      - \"com.starburst.tests.module.postgres=catalog-postgres\"\n    env_file:\n      - \"./modules/catalog/postgres/resources/postgres/postgres.env\"\n```\n\nNotice that the volume mount is not relative to the\n`lib/modules/catalog/postgres/` directory––it is relative to the parent\ndirectory which houses the top-level `docker-compose.yml` file. Also, notice the\nlabels––these labels will be used to identify Docker resources tied to Minitrino\nmodules so that the CLI commands actually work.\n\n### Trino Dockerfile\n\nMinitrino modifies the Starburst Trino Docker image by adding the Trino CLI to\nthe image as well as by providing `sudo` to the `trino` user. This is required\nfor certain bootstrap scripts (i.e. using `yum` to install packages in a Trino\ncontainer for a module). This image is compatible with Starburst Trino images\nback to Starburst Trino version `332-e.0`.\n\n-----\n\n## Adding New Modules (Tutorial)\n\nAdding new modules is relatively simple, but there are a few important\nguidelines to follow to ensure compatibility with the Minitrino CLI. The design\nrules are the same for both catalogs and security modules. The example below\ndemonstrates the process of creating a new catalog module for a Postgres\nservice.\n\n### Create the Module Directory\n\nCreate the module's directory in the `lib/modules/catalog/` directory:\n\n```sh\nmkdir lib/modules/catalog/postgres/\ncd lib/modules/catalog/postgres/\n```\n\n### Add Trino Resources\n\nAll resources for a module go inside of a `resources/` directory within the\nmodule. Inside this directory, place Trino-specific resources into a `trino/`\ndirectory, then mount the resources to the Trino service defined in the root\n`docker-compose.yml` file.\n\n```sh\nmkdir -p resources/trino/\n```\n\nIn the newly-created `resources/trino/` directory, add a properties file.\n\n```sh\nbash -c \"cat << EOF > postgres.properties\nconnector.name=postgresql\nconnection-url=jdbc:postgresql://postgres:5432/minitrino\nconnection-user=admin\nconnection-password=trinoRocks15\nEOF\"\n```\n\n-----\n\n**Note**: Passwords should always be `trinoRocks15` for consistency throughout\nmodules.\n\n-----\n\n### Add the Docker Compose YAML\n\nIn `lib/modules/catalog/postgres/`, add a Docker Compose file:\n\n```sh\ntouch postgres.yml\n```\n\nNotice the naming convention: `postgres.yml`. Giving the same root name of\n\"postgres\" to both the parent directory `postgres/` and to the Docker Compose\nfile `postgres.yml` will allow Minitrino to find our new catalog module.\n\nNext, add an environment file for the Postgres service. Non-Trino resources\nshould go into their own directory, so create one for postgres:\n\n```sh\nmkdir resources/postgres/\n```\n\nIn the newly-created directory, add an environment file which will register the\nvariables in the Postgres container when it is provisioned:\n\n```sh\nbash -c \"cat << EOF > postgres.env\nPOSTGRES_USER=admin\nPOSTGRES_PASSWORD=trinoRocks15\nPOSTGRES_DB=minitrino\nEOF\"\n```\n\nThis file will initialize Postgres with a database `minitrino`, a user `trino`,\nand a password `trinoRocks15`.\n\n### Add a Metadata File\n\nThe `metadata.json` file allows Minitrino to obtain key information for the\nmodule. It is required for a module to work with the CLI.\n\nIn `lib/modules/catalog/postgres/`, add the `metadata.json` file:\n\n```sh\nbash -c 'cat << EOF > metadata.json\n{\n  \"description\": \"Creates a Postgres catalog using the standard Postgres connector.\",\n  \"incompatibleModules\": []\n}\nEOF'\n```\n\nThe metadata file is presentable to the user via the `modules` command, and the\n`incompatibleModules` key restricts certain modules from being provisioned\nalongside the given module. The `*` wildcard is a supported convention if the\nmodule is incompatible with all other modules.\n\n### Add a Readme File\n\nThis step is not required for personal development, but it is required to commit\na module to the Minitrino repository.\n\nIn `lib/modules/catalog/postgres/`, add the `readme.md` file:\n\n```sh\ntouch readme.md\n```\n\nThis file should contain an overview of the module.\n\n### Review Progress\n\nThe resulting directory tree should look like this (from the `/modules/catalog/`\ndirectory):\n\n```\npostgres\n├── metadata.json\n├── postgres.yml\n├── readme.md\n└── resources\n    ├── postgres\n    │   └── postgres.env\n    └── trino\n        └── postgres.properties\n```\n\n### Configure the Docker Compose YAML File\n\nWe will now define the `postgres.yml` Docker Compose file. Set it up as follows,\nand **read the important notes after**:\n\n```yaml\nversion: \"3.8\"\nservices:\n\n  trino:\n    volumes:\n    # Always place Trino files in `/etc/starburst/` as symbolic links can change between versions\n      - \"./modules/catalog/postgres/resources/trino/postgres.properties:/etc/starburst/catalog/postgres.properties\"\n\n  postgres:\n    image: \"postgres:${POSTGRES_VER}\"\n    container_name: \"postgres\"\n    labels:\n      - \"com.starburst.tests=minitrino\"\n      - \"com.starburst.tests.module.postgres=catalog-postgres\"\n    env_file:\n      - \"./modules/catalog/postgres/resources/postgres/postgres.env\"\n\n```\n\n### Important Implementation Details: Paths and Labels\n\nWe can observe a few things about the Compose file we just defined.\n\n#### Path References for Volumes and Build Contexts\n\nFirst, the volumes we mount *are not relative to the Compose file itself*, they\nare relative to the base `docker-compose.yml` file in the library root. This is\nbecause the CLI extends Compose files, meaning that all path references in child\nCompose files need to be relative to the positioning of the parent Compose file.\n\nThe base Compose file is determined when you execute a Docker Compose\ncommand––the first Compose file referenced in the command becomes the base file,\nand that happens to be the `docker-compose.yml` file in the library root. This\nis how Minitrino constructs these commands.\n\nIf this is confusing, you can read more about extending Compose files on the\n[Docker docs](https://docs.docker.com/compose/extends/#multiple-compose-files).\n\n#### Minitrino Docker Labels\n\nSecondly, notice how we applied sets of labels to the Postgres service. These\nlabels tell the CLI which resources to target when executing commands.\n\nIn general, there is no need to apply labels to the Trino service since they are\nalready applied in the parent Compose file **unless** the module is an extension\nof the Trino service itself (i.e. the Snowflake modules). Labels should always\nbe applied to:\n\n- Docker services (AKA the resulting container)\n- Named volumes\n- Images built from a Dockerfile\n\nLabels should be defined in pairs of two. The convention is:\n\n- The standard Minitrino resource label: `com.starburst.tests=minitrino`\n- A module-specific resource label:\n  `com.starburst.tests.module.<module-name>=<module-type>-<module-name>`\n  - For this label, the `module-type` should be either `catalog` or `security`\n  - This applies a unique label to the module, allowing it to be an isolated\n    component when necessary.\n\nIn Compose files where multiple services are defined, all services should be\nlabeled with the same label sets (see `hive-s3.yml` for an example).\n\n-----\n\n**Note**: A named volume is defined explicitly in the Compose file, and these\nshould always have label sets applied to them. Below is an example of the\nCompose file we just created with a named volume.\n\n-----\n\n```yaml\nversion: \"3.8\"\nservices:\n\n  trino:\n    volumes:\n      - \"./modules/catalog/postgres/resources/trino/postgres.properties:/etc/starburst/catalog/postgres.properties\"\n\n  postgres:\n    image: \"postgres:${POSTGRES_VER}\"\n    container_name: \"postgres\"\n    labels: # These labels are applied to the service/container\n      - \"com.starburst.tests=minitrino\"\n      - \"com.starburst.tests.module.postgres=catalog-postgres\"\n    env_file:\n      - \"./modules/catalog/postgres/resources/postgres/postgres.env\"\n\nvolumes:\n  postgres-data:\n    labels: # These labels are applied to the named volume\n      - \"com.starburst.tests=minitrino\"\n      - \"com.starburst.tests.module.postgres=catalog-postgres\"\n```\n\n-----\n\n**Note**: Certain modules will only extend the parent Trino service and do not\nactually define any new services/containers. See the Snowflake catalog modules\nfor an example of this. For these modules, the only label requirement is to add\nthe module-specific label to the Trino service in the relevant\n`docker-compose.yml` file\n\n-----\n\n### Test the New Catalog\n\nWe are all finished up. We can test our new catalog through the Minitrino CLI:\n\n```sh\nminitrino provision -m postgres\n```\n\nWe can now shell into the `trino` container and run some tests:\n\n```\ndocker exec -it trino bash \ntrino-cli\ntrino> show catalogs;\n```\n\n### Customizing Images\n\nIf you need to build an image from a local Dockerfile, you can do so and\nstructure the Compose file accordingly. See the library's root\n`docker-compose.yml` file for an example of this. Path references for volumes\nand the image build context will follow the same convention as volume mount\npaths described earlier.\n\n### Bootstrap Scripts\n\nMinitrino supports container bootstrap scripts. These scripts **do not replace**\nthe entrypoint (or default command) for a given container. The script is copied\nfrom the Minitrino library to the container, executed, and then removed from the\ncontainer. Containers are restarted after each bootstrap script execution, **so\nthe bootstrap scripts themselves should not restart the container's service**.\n\nIf a bootstrap script has already executed in a container *and* the volume\nassociated with the container still exists, Minitrino will not re-execute the\nbootstrap script *unless the contents of the script have changed*. The is useful\nafter running `minitrino down --keep` (which does not remove unnamed container\nvolumes), so that the subsequent `provision` command will not re-execute the\nsame bootstrap script(s).\n\nIf a bootstrap script is updated, it is recommended to destroy the associated\ncontainer(s) via `minitrino down` and then to re-provision.\n\nTo add a bootstrap script, add a `resources/bootstrap/` directory in any given\nmodule, create a shell script, and then reference the script name in the Compose\nYAML file:\n\n```yaml\nversion: \"3.8\"\nservices:\n\n  trino:\n    environment:\n      MINITRINO_BOOTSTRAP: \"bootstrap.sh\"\n```\n\nThe `elasticsearch` module is a good example of this.\n\n#### Installing Shell Packages for Bootstrap Scripts\n\nIf you need to install a shell package for a bootstrap script, it is recommended\nthat the package be added at the Dockerfile level instead of within the\nbootstrap script. This is to ensure compatibility between SEP Trino-based\nreleases.\n\nTo add the necessary package, simply update shell dependencies in\n`lib/dockerfile-resources/configure.sh`.\n\n### Managing Trino's `config.properties` File\n\nMany modules can change the Trino `config.properties` and `jvm.config` files.\nBecause of this, there are two supported ways to modify these files with\nMinitrino.\n\nThe first way is by setting the `CONFIG` variable in your `minitrino.cfg` file.\nThis will propagate the config to the Trino container when it is provisioned.\n\nGenerally speaking, this can be used for any type of configuration (i.e. memory\nconfiguration) that is unlikely to be modified by any module. This also applies\nto the `jvm.config` file, which has identical support via the `JVM_CONFIG`\nvariable. If there are duplicate configs in either file, Minitrino will warn the\nuser.\n\nTo set these configs, your configuration file should look like:\n\n```\n[TRINO]\nCONFIG=\n    query.max-memory-per-node=500MB\n    query.max-total-memory-per-node=500MB\nJVM_CONFIG=\n    -Dsun.security.krb5.debug=true\n```\n\nThe second way to modify core Trino configuration is via module bootstrap\nscripts. This method is utilized by modules that need to make module-specific\nchanges to Trino files. An example bootstrap snippet can be found below:\n\n```bash\n#!/usr/bin/env bash\n\nset -euxo pipefail\n\necho \"Adding Trino configs...\"\ncat <<EOT >> /etc/starburst/config.properties\nquery.max-stage-count=105\nquery.max-execution-time=1h\nEOT\n```\n\n-----\n\n## Troubleshooting\n\n- If you experience issues executing a Minitrino command, re-run it with the\n  `-v` option for verbose output. This will often reveal the issue\n- If you experience an issue with a particular Docker container, consider\n  running these commands:\n  - `docker logs <container>`: Print the logs for a given container to the\n    terminal\n  - `docker ps`: Show all running Docker containers and associated statistics\n  - `docker inspect <container>` to see various details about a container\n- If you experience issues with a library module, check that that module is\n  structured correctly according to the [module\n  tutorial](#adding-new-modules-tutorial), and ensure the library and the CLI\n  versions match\n- Sometimes, a lingering persistent volume can cause problem (i.e. a stale Hive\n  metastore database volume from a previous module), so you can run:\n  - `minitrino down`\n  - `minitrino -v remove --volumes` to remove **all** existing Minitrino\n    volumes. Alternatively, run `minitrino -v remove --volumes --label <your\n    label>` to specifiy a specific module for which to remove volumes. See the\n    [removing resources](#removing-resources) section for more information.\n\nIf none of these troubleshooting tips help to resolve your issue, [please file a\nGitHub issue](#reporting-bugs-and-contributing) and provide as much information\nas possible.\n\n-----\n\n## Reporting Bugs and Contributing\n\nTo report bugs, please file a GitHub issue on the [Minitrino\nrepository](https://github.com/jefflester/minitrino). Bug reports should:\n\n- Contain any relevant log messages (if the bug is tied to a command, running\n  with the `-v` flag will make debugging easier)\n- Describe what the expected outcome is\n- Describe the proposed code fix (optional)\n\nContributors have two options:\n\n1. Fork the repository, then make a PR to merge your changes\n2. If you have been added as a contributor, you can go with the method above or\n   you can create a feature branch, then submit a PR for that feature branch\n   when it is ready to be merged.\n\nIn either case, please provide a comprehensive description of your changes with\nthe PR.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jefflester/minitrino",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minitrino",
    "package_url": "https://pypi.org/project/minitrino/",
    "platform": "",
    "project_url": "https://pypi.org/project/minitrino/",
    "project_urls": {
      "Homepage": "https://github.com/jefflester/minitrino"
    },
    "release_url": "https://pypi.org/project/minitrino/2.0.2/",
    "requires_dist": [
      "click (==7.1.2)",
      "colorama",
      "docker (==5.0.0)",
      "PyYAML"
    ],
    "requires_python": ">=3.8",
    "summary": "A command line tool that makes it easy to run modular Trino environments locally.",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11771456,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c85bdfad1933626750d87f3594b5f3c50a268b0aff59d155a9d155a689d0b17d",
        "md5": "3431c0acdb67c0d6f8c0745de3759adf",
        "sha256": "162a7818feb63951ade153fb7a5bf5e07e73516c3e332c73b8cde82f82ac2695"
      },
      "downloads": -1,
      "filename": "minitrino-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3431c0acdb67c0d6f8c0745de3759adf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 42598,
      "upload_time": "2021-10-19T16:41:57",
      "upload_time_iso_8601": "2021-10-19T16:41:57.745251Z",
      "url": "https://files.pythonhosted.org/packages/c8/5b/dfad1933626750d87f3594b5f3c50a268b0aff59d155a9d155a689d0b17d/minitrino-2.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "516952945a954e10f65fdad43c251e2a565cda98dffabbf6974f50056158d57c",
        "md5": "bea83a16068910129d44d6d37346b99f",
        "sha256": "ff00282dcc816f9fd22a338c93fe6bf4e46ccb1b3383bca98a64912397c86090"
      },
      "downloads": -1,
      "filename": "minitrino-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "bea83a16068910129d44d6d37346b99f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 47216,
      "upload_time": "2021-10-19T16:41:59",
      "upload_time_iso_8601": "2021-10-19T16:41:59.676983Z",
      "url": "https://files.pythonhosted.org/packages/51/69/52945a954e10f65fdad43c251e2a565cda98dffabbf6974f50056158d57c/minitrino-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}