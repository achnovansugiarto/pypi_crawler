{
  "info": {
    "author": "Maxime Paillassa",
    "author_email": "maxime.paillassa@nagoya-u.jp",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "[![DOI](https://zenodo.org/badge/156887999.svg)](https://zenodo.org/badge/latestdoi/156887999)\n\n# MaxiMask\nMaxiMask is a convolutional neural network (CNN) that detects contaminants in astronomical images.\n<img align=\"right\" width=\"100\" src=\"logo.png\">\n\nPublished paper in A&A: https://doi.org/10.1051/0004-6361/201936345 \n\nAvailable on arXiv: https://arxiv.org/abs/1907.08298\n\nContaminants that MaxiMask can identify include (but are not limited to) trails, as shown in the image below where MaxiMask can detect the Starlink satellites in the famous DECam image.\n\n<p align=\"center\">\n  <img src=\"starlink1.gif\" width=\"600\">\n</p>\n\n# Dependencies\n* Python 2 or 3\n* Scipy >=1.0.1\n* Astropy >=2.0.7\n* tensorflow or tensorflow-gpu >=1.14 (CPU is expected to be much slower than GPU)\n\n(Older versions may work but it has not been tested)\n# Usage\n\n## Minimal use\nThe minimal way to run MaxiMask is:\n```\n./maximask.py <im_path>\n```\nWhere <im_path> indicates the images you want to process. It can specify:\n  - A specific image HDU (CFITSIO notation) like <file.fits[nb_hdu]>: MaxiMask will process only the hdu <nb_hdu> of <file.fits>. \nThis should return a file <file.masks<nb_hdu>.fits> with the masks in the Primary HDU.\n  - A fits file like <file.fits>: MaxiMask will process all the image HDUs that contain 2D data and copy the source HDU otherwise.\nThis should return a file <file.masks.fits> that has the same HDU structure than <file.fits>.\n  - A directory: MaxiMask will process all the fits images of this directory as in the previous case.\nThis should return all the mask files in the same directory. \n  - A list file: this must be a file with <.list> extension containing one fits file path </path/to/file.fits> per line. MaxiMask will process each file as in the second case. \n\nYou can add the repository path to your PATH variable to use it anywhere in your machine (add the following line to your .bashrc to make it permanent):\n```\nexport PATH=$PATH:/path/to/MaxiMask/repository\n```\nYou can also create a symbolic link using the following command in the MaxiMask repository directory:\n```\nln -sf maximask.py maximask\n```\nSo that you can just run ```maximask <im_path>``` from anywhere in your machine.\n\n## Minimal example\nIf you run:\n```\nmaximask test_im.fits.fz\n```\nYou should obtain a file named <test_im.masks.fits> that has the same content as <test_out.fits.fz>.\n\n## General use\nHere is full description of MaxiMask. It can be obtained by running ```maximask -h```\n```\nusage: maximask [-h] [--net_path NET_PATH] [--prior_modif PRIOR_MODIF]\n                [--proba_thresh PROBA_THRESH] [--single_mask SINGLE_MASK]\n                [--batch_size BATCH_SIZE] [-v]\n                im_path\n\nMaxiMask command line parameters:\n\npositional arguments:\n  im_path               path the image(s) to be processed\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --net_path NET_PATH   path to the neural network graphs and weights\n                        directory. Default is </abs_path_to_rep/model>\n  --prior_modif PRIOR_MODIF\n                        bool indicating if probability maps should be prior\n                        modified. Default is True\n  --proba_thresh PROBA_THRESH\n                        bool indicating if probability maps should be\n                        thresholded. Default is True\n  --single_mask SINGLE_MASK\n                        bool indicating if resulting masks are joined in a\n                        single mask using powers of two\n  --batch_size BATCH_SIZE\n                        neural network batch size. Default is 8. You might\n                        want to use a lower value if you have RAM issues\n  -v, --verbose         activate output verbosity\n```\n\nThe CNN outputs are probability maps for each class.  \nBy default MaxiMask will prior adjust and threshold these probabilities with default parameters.\n\n### Probability prior modification\nThe prior modification aims to modify the MaxiMask output probabilities to match new priors, i.e new class proportions.\nWhen it is requested (default behaviour), MaxiMask will look for a file named _classes.priors_ containing the new priors.  \nIf prior modification is requested and this file does not exist, it will use default priors indicated in the example file _classes.priors_, which also shows the required syntax.\n\n### Probability thresholding\nThe probability thresholding aims to threshold the MaxiMask output probabilities to obtain uint8 maps instead of float32 maps. One can use various thresholds to trade off true positive rate vs false positive rate.   \nWhen it is requested (default behaviour), MaxiMask will look for a file named _classes.thresh_ containing the thresholds.\nIf probability thresholding is requested and this file does not exist, it will use default thresholds indicated in the example file _classes.thresh_, which also shows the required syntax.\n\n### Single mask\nIf this option is required, MaxiMask will return only one mask by compiling each requested class using power of 2. Each class can be identified with its power of two. \n\n### Class selection\nSelecting some specific classes can be done using a file named _classes.flags_ where one can indicate which classes are requested with 0 and 1. Example of the required syntax is given is _classes.flags_.  \nMaxiMask will automatically look for _classes.flags_. If it does not exist, MaxiMask will output probability maps/binary maps/single mask for all classes.  \nDepending on what is returned, the output fits header will be filled with corresponding informations.\n\n### File syntax and class names \nFor more convenience when modifying _classes.flags_, _classes.priors_ or _classes.thresh_, the syntax choice has been to use two space separated columns:\n1. the abbreviated class names.\n2. the values of interest.\n\nThat is something like this:\n```\nCR  <flag|prior|threshold>\nHCL <flag|prior|threshold>\nDCL <flag|prior|threshold>\nHP  <flag|prior|threshold>\nDP  <flag|prior|threshold>\nP   <flag|prior|threshold>\nSTL <flag|prior|threshold>\nFR  <flag|prior|threshold>\nNEB <flag|prior|threshold>\nSAT <flag|prior|threshold>\nSP  <flag|prior|threshold>\nOV  <flag|prior|threshold>\nBBG <flag|prior|threshold>\nBG  <flag|prior|threshold>\n```\n\nThis is the required syntax. If not respected while reading such a file, MaxiMask will exit with an appropriate error message.  \n(Note that _classes.priors_ and _classes.thresh_ should contain one line per class even when not all classes are requested; lines of non requested classes will just be ignored).\n\nAbbreviated names stand for:\n\n| Abbreviated name | Full name | Binary Code |\n| --- | --- | --- |\n| CR | Cosmic Rays | 1 |\n| HCL | Hot Columns/Lines | 2 |\n| DCL | Dead Columns/Lines/Clusters | 4 |\n| HP | Hot Pixels | 8 |\n| DP | Dead Pixels | 16 |\n| P | Persistence | 32 |\n| TRL | TRaiLs | 64 |\n| FR | FRinge patterns | 128 |\n| NEB | NEBulosities | 256 |\n| SAT | SATurated pixels | 512 |\n| SP | diffraction SPikes | 1024 |\n| OV | OVerscanned pixels | 2048 |\n| BBG | Bright BackGround pixel | 4096 |\n| BG | Background | 0 |\n\nEach power of two is the corresponding single mask code of the class.\n\n# MaxiTrack\n\nMaxiTrack behaves just like MaxiMask: it can process images using the same formats (specific HDU, specific image, directory or list file):\n```\n./maxitrack.py <im_path>\n```\nYou may use the same procedure than MaxiMask to use it from anywhere in your machine.\n\n## Minimal example\nIf you run:\n```\nmaxitrack test_im.fits.fz\n```\nYou should obtain a file named <maxitrack.out> containing the line:\n```\ntest_im.fits.fz 9.356169982957375e-09\n```\nThe number corresponding to the image name is the probability that this image is affected by tracking error.\nWhen running again, MaxiTrack will always append the new results to this file <maxitrack.out>. \n\n## General use\nHere is full description of MaxiMask. It can be obtained by running ```maxitrack -h```\n```\nusage: maxitrack.py [-h] [--net_path NET_PATH] [--prior_value PRIOR_VALUE]\n                    [--frac FRAC] [--batch_size BATCH_SIZE] [-v]\n                    im_path\n\nMaxiTrack command line parameters:\n\npositional arguments:\n  im_path               path the image(s) to be processed\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --net_path NET_PATH   path to the neural network graphs and weights\n                        directory. Default is </abs_path_to_rep/model>\n  --prior_value PRIOR_VALUE\n                        float defining the expected prior in data. Default is\n                        0.05\n  --frac FRAC           int defining the number of HDU to use. Default is -1,\n                        meaning that MaxiTrack will use all HDU\n  --batch_size BATCH_SIZE\n                        neural network batch size. Default is 8. You might\n                        want to use a lower value if you have RAM issues\n  -v, --verbose         activate output verbosity\n```\n\n### Probability prior modification\nAs in MaxiMask, priors can be specified to adjust the output probabilities to new expected class proportions. As there are only two classes in MaxiTrack (tracking or not tracking), only one prior corresponding to the expected proportion of images affected by tracking errors has to be speficied. Default is 0.05, i.e 5% of images affected by tracking errors.\n\n### Fraction option\nWhen giving a FITS file containing N HDUs, MaxiTrack will by default use the N HDUs to compute the output probability for the whole field. In order to run MaxiTrack faster, you can specify a number FRAC<N of HDUs to use to compute the output probability.\n\n\n# LICENSE\nCopyright (c) 2018 Maxime Paillassa. \n\nBoth code and model weights are released under MIT license. \n\nSee LICENSE for details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mpaillassa/MaxiMask",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MaxiMask",
    "package_url": "https://pypi.org/project/MaxiMask/",
    "platform": "",
    "project_url": "https://pypi.org/project/MaxiMask/",
    "project_urls": {
      "Homepage": "https://github.com/mpaillassa/MaxiMask"
    },
    "release_url": "https://pypi.org/project/MaxiMask/1.2/",
    "requires_dist": [
      "astropy",
      "scipy",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "Convolutional neural network to detect contaminants in astronomical images.",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15939235,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b13a55ba537af5d5e6fab1f347ff67f669cfb3f68622892668692f5edb5905ea",
        "md5": "888509c526cd6030426809a427c1cf39",
        "sha256": "852ad073736309119724399b1e8c55693141d6f0826e00cf15cc7678475b6179"
      },
      "downloads": -1,
      "filename": "MaxiMask-1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "888509c526cd6030426809a427c1cf39",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 52154540,
      "upload_time": "2022-01-09T10:51:56",
      "upload_time_iso_8601": "2022-01-09T10:51:56.064409Z",
      "url": "https://files.pythonhosted.org/packages/b1/3a/55ba537af5d5e6fab1f347ff67f669cfb3f68622892668692f5edb5905ea/MaxiMask-1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f17870cf86590b9eec6ce5e427a31701bcceb50a5c1eda3ab82db5c5c88d3e16",
        "md5": "d22c1c6fd457995300138f0d7a44fb80",
        "sha256": "0daa17f5e6ce9b64f4592741119cae6ed3276fbf48d8e474ee869902b8a9108e"
      },
      "downloads": -1,
      "filename": "MaxiMask-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d22c1c6fd457995300138f0d7a44fb80",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 52154770,
      "upload_time": "2022-01-09T10:52:06",
      "upload_time_iso_8601": "2022-01-09T10:52:06.480278Z",
      "url": "https://files.pythonhosted.org/packages/f1/78/70cf86590b9eec6ce5e427a31701bcceb50a5c1eda3ab82db5c5c88d3e16/MaxiMask-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90a6fa35e35c06914a659a57c4a35a5c088be60ae8c38ae5e335e125183bd980",
        "md5": "57416f1696d4966c3470ecd483158030",
        "sha256": "ca69f5779fb286ddbaea99e82f485a7f1bc3f0d94bbca322f779c346ff509825"
      },
      "downloads": -1,
      "filename": "MaxiMask-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "57416f1696d4966c3470ecd483158030",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 52136339,
      "upload_time": "2022-01-09T10:52:16",
      "upload_time_iso_8601": "2022-01-09T10:52:16.843762Z",
      "url": "https://files.pythonhosted.org/packages/90/a6/fa35e35c06914a659a57c4a35a5c088be60ae8c38ae5e335e125183bd980/MaxiMask-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}