{
  "info": {
    "author": "Micromelon Robotics",
    "author_email": "contact@micromelon.com.au",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Communications",
      "Topic :: Education"
    ],
    "description": "![Micromelon Logo](https://micromelon-robotics.github.io/mm-pymodule/mm-logo.png)\n# [Micromelon](https://www.micromelon.com.au) Python Module\n\nThis module provides an API for connecting and controlling [Micromelon Rovers](https://www.micromelon.com.au/rover.html?) and simulated rovers in the [Micromelon Robot Simulator](https://www.micromelon.com.au/simulator.html).  \nThe API is equivalent to what is available in the Micromelon Code Editor application.\n\n## Installation\n\n```\npip install micromelon\n```\n\n## Usage\nAfter import you will need a reference to the RoverController\n```python\nfrom micromelon import *\nrc = RoverController()\n```\nThe RoverController object contains all the functionality for connection and control of the robot's state.  \nAt the start of any script that controls the rover you will need to connect and put the rover in a running state.\nOnce complete you will need to return the rover to the idle state and optionally you can end the Python program.\n```python\nrc.connectBLE(1) # Connects over Bluetooth to rover with ID of 1\nrc.startRover() # Puts in running state\n\n# Body of script controlling rover\n# eg. Motors.write(20, 20, 1)\n\nrc.stopRover() # Returns to idle state\nrc.end() # Disconnects and end Python program\n```\nFull code examples available in the examples folder.\n\n## Documentation\n\n### Generating Documentation\nFull API documentation available at [https://micromelon-robotics.github.io/mm-pymodule/](https://micromelon-robotics.github.io/mm-pymodule/)  \n\nDocumentation is generated through the python module pdoc3.  \nFull documentation on pdoc [available here](https://pdoc3.github.io/pdoc/).\n\n#### 1. Installing pdoc\nInstall pdoc through pip.  \nRequires python 3.  \n```\npip3 install pdoc3\n```\n\n#### 2. Generating HTML\n```bash\npdoc --html --template-dir docs/pdoc_templates -o docs micromelon -f\n```\n\n#### 3. Running docs locally\nYou can run the documentation as a webserver on your local machine with:  \n```\npdoc --http : micromelon\n```\nThen open `http://localhost:8080/` in a browser.\n\n## Building\n\nGet Python build tool\n```\npython -m pip install --upgrade build\n```\nBuild package\n```\npython -m build\n```\n\n## Uploading\nInstall twine\n```\npython -m pip install --upgrade twine\n```\nUploading\n```\npython -m twine upload dist/*\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Micromelon-Robotics/mm-pymodule",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micromelon",
    "package_url": "https://pypi.org/project/micromelon/",
    "platform": "",
    "project_url": "https://pypi.org/project/micromelon/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Micromelon-Robotics/mm-pymodule/issues",
      "Homepage": "https://github.com/Micromelon-Robotics/mm-pymodule"
    },
    "release_url": "https://pypi.org/project/micromelon/1.0.3/",
    "requires_dist": [
      "bleak (>=0.11.0)",
      "pyserial",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "A Python module to control Micromelon Robots over BLE, TCP, or Serial with a Raspberry Pi connected to the rover",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13927997,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82d8717ee296336ef8a6dcf848e6d0e59c1b0193c13424347f44b74505753a68",
        "md5": "23d7a19ea3c3ac47e41d46695a277ddb",
        "sha256": "2eabde0d6569611447bbd7b0c5624a8a79869d06f23e28a30c19c53bb4a86be2"
      },
      "downloads": -1,
      "filename": "micromelon-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "23d7a19ea3c3ac47e41d46695a277ddb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 49416,
      "upload_time": "2021-04-20T01:52:04",
      "upload_time_iso_8601": "2021-04-20T01:52:04.606714Z",
      "url": "https://files.pythonhosted.org/packages/82/d8/717ee296336ef8a6dcf848e6d0e59c1b0193c13424347f44b74505753a68/micromelon-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f557fef7419ae723e577fbd0868346e68bb6715c539ccfd336a8f6e43d941dc",
        "md5": "7b0126067477ba7a9dc29f619573f13d",
        "sha256": "b7e43a367189062300c961ddae2c46c88416d12a80453727e6ebfbc12b7da12e"
      },
      "downloads": -1,
      "filename": "micromelon-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7b0126067477ba7a9dc29f619573f13d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 37236,
      "upload_time": "2021-04-20T01:52:08",
      "upload_time_iso_8601": "2021-04-20T01:52:08.901798Z",
      "url": "https://files.pythonhosted.org/packages/7f/55/7fef7419ae723e577fbd0868346e68bb6715c539ccfd336a8f6e43d941dc/micromelon-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}