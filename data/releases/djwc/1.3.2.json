{
  "info": {
    "author": "James Pic",
    "author_email": "jamespic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# djwc: Django WebComponents\n\n## Introduction\n\nWebComponents is a W3C standard supported by all browsers for a couple of years\nnow, see their [Getting Started](https://www.webcomponents.org/introduction)\nintroduction for details.\n\n## Getting started\n\n### How to try djwc\n\nFor a quick test:\n\n- clone and enter this repo\n- run `pip install django -e .`\n- start the example with: `./manage.py djwc && ./manage.py runserver`\n\nYou should see some polymer components on `localhost:8000`\n\n### How to install djwc\n\n- `pip install djwc`,\n- add `djwc` to `INSTALLED_APPS` (for the management command)\n- add the `'djwc.middleware.StaticMiddleware'` `MIDDLEWARE` (to inject scripts).\n\n### How to use webcomponents\n\n- Declare the components that you want to use\n- Run `./manage.py djwc` to install them (does not use NodeJS)\n- Use the HTML tags for your components\n\nThat's **it** !! The middleware will do the rest.\n\nRead on for details about each step.\n\n## Declaring components\n\nYou can declare components per-app, per-project, and also include bundles.\n\n### Settings\n\nYou can add a `paper-input` component to DJWC in the settings by referencing\nits npm path:\n\n```python\nDJWC = {\n    'COMPONENTS': {\n        'paper-input': '@polymer/paper-input/paper-input.js',\n    }\n}\n```\n\nThis will have predecence over any other setting.\n\n### AppConfig\n\n**Or**, define an `AppConfig.components` attribute to add components to your\nreusable app.\n\n```python\nclass AppConfig(apps.AppConfig):\n    components = {\n        'paper-input': '@polymer/paper-input/paper-input.js',\n    }\n```\n\nThis will be automatically detected.\n\n### Libraries\n\nYou can also include a bunch of webcomponents with the `DJWC['LIBRARIES']`\nsetting:\n\n```python\nDJWC = {\n    'LIBRARIES': ['djwc_polymer'],\n}\n```\n\nMore to come, these are manually maintained at this time.\n\n## Installing components with `./manage.py djwc`\n\n**Then**, run the `./manage.py djwc` command that will download all the scripts\ninto a static directory. Do this prior to collectstatic in production, and\nevery-time you change your components declaration.\n\n## Using components\n\nJust use your new tag wherever you want, such as in templates:\n\n```html\n<paper-input always-float-label label=\"Floating label\"></paper-input>\n```\n\nThe middleware will inject the corresponding script whenever the middleware\nwill find a `paper-input` tag.\n\n## FAQ\n\n### I've read that WebComponents are not accessible\n\nApparently, accessibility is [fine with aria\nattributes](https://developer.salesforce.com/blogs/2020/01/accessibility-for-web-components.html).\n\n### What next ?\n\n- Do add unit tests when a contributor breaks it\n- Optimize the djwc command\n- Automate djwc_polymer\n- Add moar bundles ! Like bootstrap-webcomponents ! yay !",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://yourlabs.io/oss/djwc",
    "keywords": "django webcomponents",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djwc",
    "package_url": "https://pypi.org/project/djwc/",
    "platform": "",
    "project_url": "https://pypi.org/project/djwc/",
    "project_urls": {
      "Homepage": "https://yourlabs.io/oss/djwc"
    },
    "release_url": "https://pypi.org/project/djwc/1.3.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "WebComponents for Django",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9431087,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c6fd9246cf024c672e6febed6d9ef7d90d44911d94fd69ea09d57a63e060e77",
        "md5": "a4eab0b34aae5aa5a1d8d1cbc6c62e17",
        "sha256": "3549bf1149d7b12af769c120eac2ef03edaecee83f4341100c0070f407b8ad92"
      },
      "downloads": -1,
      "filename": "djwc-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a4eab0b34aae5aa5a1d8d1cbc6c62e17",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 5646,
      "upload_time": "2020-10-20T15:05:45",
      "upload_time_iso_8601": "2020-10-20T15:05:45.055671Z",
      "url": "https://files.pythonhosted.org/packages/8c/6f/d9246cf024c672e6febed6d9ef7d90d44911d94fd69ea09d57a63e060e77/djwc-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}