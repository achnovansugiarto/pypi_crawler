{
  "info": {
    "author": "Julian Brandt",
    "author_email": "julian@julianbrandt.dk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MemePy\n\n*Meme generator library for your everyday needs*\n\nPython meme generator originally made for the discord-chat-bot [HydroBot](https://github.com/julianbrandt/Hydrobot3), but migrated to its own package for increased modularity and ease of use.\n\n## Installation\n\nMemePy can be downloaded as a package from `PyPi`:\n\n```\n>python -m pip install MemePy\n```\n\nYou can alternatively just download the zip from here.\n\n## How it works\n\nMemePy uses the Python Imaging Library *PIL* to edit existing templates of memes and return them to the user.\n\nMemePy has a list of defined `MemeImage` templates that are fed to a `MemeFactory`. The factory then produces an image with all the arguments, given by the user, pasted onto the image in the correct formats of the specific meme.\n\nIn addition to just text-based memes, MemePy also supports substituting the text-argument with an image. Just supply an image-link in `< ... >` angle brackets as an argument, and the text will be substituted for the image. ENDLESS POTENTIAL!!!\n\nThe available meme templates can be found in the [Image Library](./MemePy/Resources/ImageLibrary). The specifications of each meme template can be found in the [Meme Library](./MemePy/Resources/MemeLibrary). Where `builtin.JSON` is the place for default templates. You can define your own templates as well, which is described below.\n\n## Usage\n\n### Importing MemePy into your own project\n\nIf you wish to import the meme-generation functionality into your own project, usually all you will need can be found in [MemePy/MemeGenerator.py](./MemePy/MemeGenerator.py). \n\n#### The functions available in this file are:\n\n* `save_meme_to_disk(template, path, args)`\n\n  * Generates a meme of the given template, with given args and saves it to disk at the given path.\n\n* `get_meme_image(template, args)`\n\n  * Generates a meme of the given template, with given args and returns it as a `PIL`Image object. Used if you wanna pass an image to your own project instead of saving it.\n\n* `get_meme_image_bytes(template, args)`\n\n  * Generates a meme of the given template, with given args and returns it as a BytesIO object. This allows for treating the output image as a file, and thus making it possible to open as other objects (e.g. `discord.py File` objects).\n\n* `get_meme_factory(template, args)`\n\n  * Generates a meme factory with the given template and args. This exposes more of the specifications of the factory, in case you need more rich details.\n\n* `add_external_resource_dir(resource_path)`\n\n  * Allows you to add your own external resource library without having access to the package's internal resource directory. The given resource directory *HAS* to follow the following rules for resource directories:\n\n    ```\n    <resources>\n    +---FontLibrary\n    |       <font>.ttf\n    |\n    +---ImageLibrary\n    |       <image>.png\n    |\n    \\---MemeLibrary\n            <meme-definition>.JSON\n    ```\n\n    In other words. The folders inside the given directory *MUST* be named **FontLibrary**, **ImageLibrary** and **MemeLibrary**. The font you choose to use in your extension can be left out of the fonts directory, if it already exists internally in the package resources.\n\n\n\n## Creating memes on the Command-Line\n\nUsing the command-line, you can generate images from templates and save them to disk.\n\n#### Generating a meme:\n\n```console\nMemePy <path> <template> <*args> <*options>\n```\n\n- __path__ is where on your computer you want to save the meme.\n- __template__ is the underlying template to use for the meme (not case sensitive).\n- __\\*args__ are all arguments to be placed onto the template.\n  - Multi-word arguments must be surrounded by \"\" quotation marks\n  - Arguments can be images, pasted onto the template. Image-links should be given in '<>' angle brackets.\n- __\\*options__ are the options that modify behavior of the generation.\n  - Options are passed with '{}' curly braces.\n  - Currently supported options: \"stretch\".\n## Built-In template docs\n| Template name          | Arguments       | Image |\n| ------------- | --------------- | ----- |\n| MeAlsoMe | **Required**: 2<br>**Optional**: 0 | ![MeAlsoMe](./Docs/Img/MeAlsoMe.jpg) |\n| ItsRetarded | **Required**: 1<br>**Optional**: 0 | ![ItsRetarded](./Docs/Img/ItsRetarded.jpg) |\n| Headache | **Required**: 1<br>**Optional**: 0 | ![Headache](./Docs/Img/Headache.jpg) |\n| ItsTime | **Required**: 2<br>**Optional**: 0 | ![ItsTime](./Docs/Img/ItsTime.jpg) |\n| ClassNote | **Required**: 1<br>**Optional**: 0 | ![ClassNote](./Docs/Img/ClassNote.jpg) |\n| NutButton | **Required**: 1<br>**Optional**: 0 | ![NutButton](./Docs/Img/NutButton.jpg) |\n| Pills | **Required**: 1<br>**Optional**: 0 | ![Pills](./Docs/Img/Pills.jpg) |\n| Balloon | **Required**: 3<br>**Optional**: 0 | ![Balloon](./Docs/Img/Balloon.jpg) |\n| Classy | **Required**: 2<br>**Optional**: 0 | ![Classy](./Docs/Img/Classy.jpg) |\n| Cola | **Required**: 2<br>**Optional**: 0 | ![Cola](./Docs/Img/Cola.jpg) |\n| Loud | **Required**: 1<br>**Optional**: 1 | ![Loud](./Docs/Img/Loud.jpg) |\n| Milk | **Required**: 1<br>**Optional**: 1 | ![Milk](./Docs/Img/Milk.jpg) |\n| Finally | **Required**: 1<br>**Optional**: 1 | ![Finally](./Docs/Img/Finally.jpg) |\n| Cliff | **Required**: 2<br>**Optional**: 0 | ![Cliff](./Docs/Img/Cliff.jpg) |\n| PredatorHandshake | **Required**: 3<br>**Optional**: 0 | ![PredatorHandshake](./Docs/Img/PredatorHandshake.jpg) |\n| Knight | **Required**: 2<br>**Optional**: 0 | ![Knight](./Docs/Img/Knight.jpg) |\n| Vape | **Required**: 2<br>**Optional**: 0 | ![Vape](./Docs/Img/Vape.jpg) |\n| Hate | **Required**: 1<br>**Optional**: 0 | ![Hate](./Docs/Img/Hate.jpg) |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/julianbrandt/MemePy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MemePy",
    "package_url": "https://pypi.org/project/MemePy/",
    "platform": "",
    "project_url": "https://pypi.org/project/MemePy/",
    "project_urls": {
      "Homepage": "https://github.com/julianbrandt/MemePy"
    },
    "release_url": "https://pypi.org/project/MemePy/1.2.1/",
    "requires_dist": [
      "pillow",
      "requests"
    ],
    "requires_python": "",
    "summary": "Meme Generator for python",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9751889,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a95b9538f4e11265be922f4947a1a221ce5068043f92b04972fff36a73120741",
        "md5": "969ca1f18a2e9e39100636ef642cc5f5",
        "sha256": "ef6e1ec9a514cb83d3cb371ad8d5371f91f63ef86d2f5132a48c14744027d41a"
      },
      "downloads": -1,
      "filename": "MemePy-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "969ca1f18a2e9e39100636ef642cc5f5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4696433,
      "upload_time": "2021-03-12T13:56:00",
      "upload_time_iso_8601": "2021-03-12T13:56:00.947753Z",
      "url": "https://files.pythonhosted.org/packages/a9/5b/9538f4e11265be922f4947a1a221ce5068043f92b04972fff36a73120741/MemePy-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd431327072e1f4c75909ddfa7e799e3f944d1e988926fe46a86833c3273caac",
        "md5": "dfc919f6a249ef443677976c48369e9b",
        "sha256": "369f0fc79e789068a412d75c9fb2f9856faeb73a3fc9866283bb4bd415ff01eb"
      },
      "downloads": -1,
      "filename": "MemePy-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dfc919f6a249ef443677976c48369e9b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4695713,
      "upload_time": "2021-03-12T13:56:10",
      "upload_time_iso_8601": "2021-03-12T13:56:10.014959Z",
      "url": "https://files.pythonhosted.org/packages/fd/43/1327072e1f4c75909ddfa7e799e3f944d1e988926fe46a86833c3273caac/MemePy-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}