{
  "info": {
    "author": "Javier Cordero Martinez",
    "author_email": "github@j2i.me",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "django-earthdistance\n=====================\n\nUsing PostgreSQL's EarthDistance extension for django 1.11, 2.2 and 3.2 (for older versions see *with_djorm_expressions* branch)\n\nEarthdistance allows to do fast geolocalized queries without using PostGIS\n\n\nUsage\n---------------\n\nCube and EarthDistance extensions must be enabled in postgreSQL BD, so log in\ndatabase using pgsql and install extensions:\n\n.. code:: sql\n\n    => create extension cube;\n    => create extension earthdistance;\n\n\n\nFilter by rows inside a circunference of radius r\n--------------------------------------------------\n\n.. code:: python\n\n    from django.db import models\n\n    from django_earthdistance.models import EarthDistanceQuerySet\n\n    class MyModel(models.Model):\n        latitute = models.FloatField()\n        longitude = models.FloatField()\n\n        objects = EarthDistanceQuerySet.as_manager()\n\n    # Define fields to query in DistanceExpression initialization\n    # search with lat=0.2546 and lon=-38.25 and distance 1500 meters\n    # use param `annotate` to set a custom field for the distance, `_ed_distance` as default\n\n    MyModel.objects.in_distance(1500, fields=['latitude', 'longitude'], points=[0.2546, -38.25])\n\n\nAnnotate each row returned by a query with distance between two points\n----------------------------------------------------------------------\n\n.. code:: python\n\n    from django_earthdistance.models import EarthDistance, LlToEarth\n\n    MyModel.objects.filter(....).annotate(\n        distance=EarthDistance([\n            LlToEarth([0.2546, -38.25]),\n            LlToEarth(['latitude', 'longitude'])\n        ]))\n\n\n\nOptimizing perfomance with indexes\n-----------------------------------\n\nPostgreSQL allow to use GiST indexes with functions results, a good perfomance improvement is to store `ll_to_earth` results in\nan index, `ll_to_earth` is a function that calculates the position of a point on the surface of the earth (assuming earth is\nperfectly spherical)\n\n\n.. code:: sql\n\n    -- Example MyModel table is app_mymodel and points columns are latitude and longitude\n    CREATE INDEX mymodel_location ON app_mymodel USING gist (ll_to_earth(latitude, longitude));\n\nFor django < 1.7\n~~~~~~~~~~~~~~~~~\n\nAlso, using south is preferred, just add this migration to migrations/ folder and edit it to your needs, index will be created\n\n.. code:: python\n\n    class Migration(SchemaMigration):\n\n        def forwards(self, orm):\n            cursor = connection.cursor()\n            cursor.execute(\"CREATE INDEX mymodel_location ON app_mymodel USING gist (ll_to_earth(latitude, longitude));\")\n\n\n        def backwards(self, orm):\n            # Deleting field 'Venue.coords'\n            cursor = connection.cursor()\n            cursor.execute(\"DROP INDEX mymodel_location ON app_mymodel;\")\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jneight/django-earthdistance",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-earthdistance",
    "package_url": "https://pypi.org/project/django-earthdistance/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-earthdistance/",
    "project_urls": {
      "Homepage": "https://github.com/jneight/django-earthdistance"
    },
    "release_url": "https://pypi.org/project/django-earthdistance/1.1.3/",
    "requires_dist": [
      "django (>=1.8)"
    ],
    "requires_python": "",
    "summary": "Add support for PostgreSQL earthdistance extension to Django",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13794877,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "acb5aa27515ed1b33bdb7457f6990dc32502957e38f0269ad4a4187b81c0abc0",
        "md5": "c48cd1fd16c0e376c92ef8b93c491899",
        "sha256": "23826d6c1b816b8231809bd48f03eec8ae46a6118812e0dc79d86207a257330f"
      },
      "downloads": -1,
      "filename": "django_earthdistance-1.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c48cd1fd16c0e376c92ef8b93c491899",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9540,
      "upload_time": "2022-05-12T14:05:52",
      "upload_time_iso_8601": "2022-05-12T14:05:52.246794Z",
      "url": "https://files.pythonhosted.org/packages/ac/b5/aa27515ed1b33bdb7457f6990dc32502957e38f0269ad4a4187b81c0abc0/django_earthdistance-1.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b237147b745a4c0095db91c273c1acd8a811f6d8800e69579134a8ff3747bd8",
        "md5": "44f760a5158c159844ab919891b19d23",
        "sha256": "8a167e308a1676a7513fee429dad653065a0e087c5dc8146731a52661bec330a"
      },
      "downloads": -1,
      "filename": "django-earthdistance-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "44f760a5158c159844ab919891b19d23",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8170,
      "upload_time": "2022-05-12T14:05:53",
      "upload_time_iso_8601": "2022-05-12T14:05:53.695185Z",
      "url": "https://files.pythonhosted.org/packages/1b/23/7147b745a4c0095db91c273c1acd8a811f6d8800e69579134a8ff3747bd8/django-earthdistance-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}