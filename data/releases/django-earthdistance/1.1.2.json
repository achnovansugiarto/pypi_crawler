{
  "info": {
    "author": "Javier Cordero Martinez",
    "author_email": "jcorderomartinez@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "django-earthdistance\n=====================\n\nUsing PostgreSQL's EarthDistance extension for django >= 1.8 (for older versions see *with_djorm_expressions* branch)\n\nEarthdistance allows to do fast geolocalized queries without using PostGIS\n\n**Tested with python 2.7 and 3.3**\n\n\nUsage\n---------------\n\nCube and EarthDistance extensions must be enabled in postgreSQL BD, so log in\ndatabase using pgsql and install extensions:\n\n.. code:: sql\n\n    => create extension cube;\n    => create extension earthdistance;\n\n\n\nFilter by rows inside a circunference of radius r\n--------------------------------------------------\n\n.. code:: python\n\n    from django.db import models\n\n    from django_earthdistance.models import EarthDistanceQuerySet\n\n    class MyModel(models.Model):\n        latitute = models.FloatField()\n        longitude = models.FloatField()\n\n        objects = EarthDistanceQuerySet.as_manager()\n\n    # Define fields to query in DistanceExpression initialization\n    # search with lat=0.2546 and lon=-38.25 and distance 1500 meters\n    # use param `annotate` to set a custom field for the distance, `_ed_distance` as default\n\n    MyModel.objects.in_distance(1500, fields=['latitude', 'longitude'], points=[0.2546, -38.25])\n\n\nAnnotate each row returned by a query with distance between two points\n----------------------------------------------------------------------\n\n.. code:: python\n\n    from django_earthdistance.models import EarthDistance, LlToEarth\n\n    MyModel.objects.filter(....).annotate(\n        distance=EarthDistance([\n            LlToEarth([0.2546, -38.25]),\n            LlToEarth(['latitude', 'longitude'])\n        ]))\n\n\n\nOptimizing perfomance with indexes\n-----------------------------------\n\nPostgreSQL allow to use GiST indexes with functions results, a good perfomance improvement is to store `ll_to_earth` results in\nan index, `ll_to_earth` is a function that calculates the position of a point on the surface of the earth (assuming earth is \nperfectly spherical)\n\n\n.. code:: sql\n   \n    -- Example MyModel table is app_mymodel and points columns are latitude and longitude\n    CREATE INDEX mymodel_location ON app_mymodel USING gist (ll_to_earth(latitude, longitude));\n\nFor django < 1.7\n~~~~~~~~~~~~~~~~~\n\nAlso, using south is preferred, just add this migration to migrations/ folder and edit it to your needs, index will be created\n\n.. code:: python\n\n    class Migration(SchemaMigration):\n\n        def forwards(self, orm):\n            cursor = connection.cursor()\n            cursor.execute(\"CREATE INDEX mymodel_location ON app_mymodel USING gist (ll_to_earth(latitude, longitude));\")\n\n\n        def backwards(self, orm):\n            # Deleting field 'Venue.coords'\n            cursor = connection.cursor()\n            cursor.execute(\"DROP INDEX mymodel_location ON app_mymodel;\")\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jneight/django-earthdistance",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-earthdistance",
    "package_url": "https://pypi.org/project/django-earthdistance/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-earthdistance/",
    "project_urls": {
      "Homepage": "https://github.com/jneight/django-earthdistance"
    },
    "release_url": "https://pypi.org/project/django-earthdistance/1.1.2/",
    "requires_dist": [
      "django (>=1.8)"
    ],
    "requires_python": "",
    "summary": "Add support for PostgreSQL earthdistance extension to Django",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13794877,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da96bd0742c9739c271e8a6597a36d465029a0c9d6a8937003db07cd678ca9aa",
        "md5": "17c1cfed90d0f5e92d015899e7ab32dc",
        "sha256": "b1211fb8adfb4c6d1b1cddb16471832d29ba3ddaf00822c4b0c9ff44f1112e43"
      },
      "downloads": -1,
      "filename": "django_earthdistance-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "17c1cfed90d0f5e92d015899e7ab32dc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9565,
      "upload_time": "2022-05-10T15:46:17",
      "upload_time_iso_8601": "2022-05-10T15:46:17.022137Z",
      "url": "https://files.pythonhosted.org/packages/da/96/bd0742c9739c271e8a6597a36d465029a0c9d6a8937003db07cd678ca9aa/django_earthdistance-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a25af66bceb28521460f7e6cd9d11b59872bbe2239c6b0a6a860c344e3b790e",
        "md5": "88e354b69d4c74bc25087f0c6cd631b3",
        "sha256": "937a7fd423492c76f12ac796ccd3995bb1c4fc68d88bad08c6fa76121508cc72"
      },
      "downloads": -1,
      "filename": "django-earthdistance-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "88e354b69d4c74bc25087f0c6cd631b3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8408,
      "upload_time": "2022-05-10T15:46:55",
      "upload_time_iso_8601": "2022-05-10T15:46:55.312526Z",
      "url": "https://files.pythonhosted.org/packages/7a/25/af66bceb28521460f7e6cd9d11b59872bbe2239c6b0a6a860c344e3b790e/django-earthdistance-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}