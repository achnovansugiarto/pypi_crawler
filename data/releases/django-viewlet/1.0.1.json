{
  "info": {
    "author": "Jonas Lundberg",
    "author_email": "jonas@5monkeys.se",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "Django Viewlet\n==============\n\nRender template parts with extended cache control.\n\n.. image:: https://travis-ci.org/5monkeys/django-viewlet.png?branch=master\n    :target: http://travis-ci.org/5monkeys/django-viewlet\n\nInstallation\n------------\n\nInstall django-viewlet in your python environment\n\n.. code:: sh\n\n    $ pip install django-viewlet\n\nAdd ``viewlet`` to your ``INSTALLED_APPS`` setting so Django can find the template tag\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        ...\n        'viewlet',\n    )\n\n\nIf you're using Jinja2 as your template engine put this in your Django settings\n\n.. code:: python\n\n    JINJA2_GLOBALS = {\n        'viewlet': 'viewlet.call_viewlet'\n    }\n\n    VIEWLET_TEMPLATE_ENGINE = 'jinja2'\n\n\nUsage\n-----\n\nA viewlet is almost like a function based django view, taking a template context\nas first argument instead of request.\nPlace your viewlets in ``viewlets.py`` or existing ``views.py`` in your django app directory.\n\n.. code:: python\n\n    from django.template.loader import render_to_string\n    from viewlet import viewlet\n\n    @viewlet\n    def hello_user(context, name):\n        return render_to_string('hello_user.html', {'name': name})\n\n\nYou can then render the viewlet with the ``viewlet`` template tag:\n\n.. code:: html\n\n    {% load viewlets %}\n    <p>{% viewlet hello_user request.user.username %}</p>\n\n\n... and in your Jinja2 templates:\n\n.. code:: html\n\n    <p>{{ viewlet('host_sponsors', host.id) }}</p>\n\n\nRefreshing viewlets\n___________________\n\nA cached viewlet can be re-rendered and updated behind the scenes with ``viewlet.refresh``\n\n.. code:: python\n\n    import viewlet\n    viewlet.refresh('hello_user', 'monkey')\n\n\nThe decorator\n_____________\n\n.. code:: python\n\n    @viewlet(name, template, key, timeout, cached)\n\n\n* name\n    Optional reference name for the viewlet, defaults to function name.\n* template\n    Optional path to template. If specified the viewlet must return a context dict,\n    otherwise it is responsible to return the rendered output itself.\n* key\n    Optional cache key, if not specified a dynamic key will be generated ``viewlet:name(args...)``\n* timeout\n    Cache timeout. Defaults to 60 sec, None = eternal, 0 = uncached.\n* cached\n    Defaults to True, if set to False timeout will be 0 and therefore uncached.\n\n\nExamples\n________\n\nThe content returned by the viewlet will by default be cached for 60s. Use the ``timeout`` argument to change this.\n\n.. code:: python\n\n    @viewlet(timeout=30*60)\n    def hello_user(context, name):\n        return render_to_string('hello_user.html', {'name': name})\n\n..\n\n    **Tip:** Set ``timeout`` to ``None`` to cache forever and use ``viewlet.refresh`` to update the cache.\n\n\nDjango viewlet will by default build a cache key ``viewlet:name(args...)``.\nTo customize this key pass a string to the viewlet decorator argument ``key``\n\n.. code:: python\n\n    @viewlet(timeout=30*60, key='some_cache_key')\n    def hello_user(context, name):\n        return render_to_string('hello_user.html', {'name': name})\n\n\nDjango viewlet will cache context instead of html by using the ``template`` decorator argument.\nThis is useful if cached html is too heavy, or your viewlet template needs to be rendered on every call.\n\n.. code:: python\n\n    @viewlet(template='hello_user.html', timeout=30*60)\n    def hello_user(context, name):\n        return {'name': name}\n\n..\n\n    **Note:** Return context dict for the template, not rendered html/text\n\n\nIf there is no need for caching, set the viewlet decorator argument ``cached`` to ``False``\n\n.. code:: python\n\n    @viewlet(cached=False)\n    def hello_user(context, name):\n        return render_to_string('hello_user.html', {'name': name})\n\n\nBy default you viewlets will be named as the function. To override this you can set the decorator argument ``name``\n\n.. code:: python\n\n    @viewlet(name='greeting')\n    def hello_user(context, name):\n        return render_to_string('hello_user.html', {'name': name})\n\n\nA powerful usage of ``viewlet.refresh`` is to use it together with Django signals:\n\n.. code:: python\n\n    class Product(Model):\n        name = CharField(max_length=255)\n\n    @viewlet(timeout=None)\n    def product_teaser(context, id):\n        product = get_context_object(Product, id, context)\n        return render_to_string('product_teaser.html', locals())\n\n    def refresh_product_teaser(instance, **kwargs):\n        viewlet.refresh('product_teaser', instance.id)\n\n    post_save.connect(refresh_product_teaser, Product)\n\n\nViewlets can also be accesses with AJAX by adding ``viewlet.urls`` to your Django root urls:\n\n.. code:: python\n\n    urlpatterns = patterns('',\n        (r'^viewlet/', include('viewlet.urls')),\n    )\n\n\nThe url ends with the viewlet name followed by a querystring used as ``kwargs`` to the viewlet:\n\n..\n\n    http://localhost:8000/viewlet/[name]/?arg=1...",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/5monkeys/django-viewlet/tarball/1.0.1",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/5monkeys/django-viewlet",
    "keywords": "django,template,cache,view,subview,decorator,refresh,invalidate",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-viewlet",
    "package_url": "https://pypi.org/project/django-viewlet/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-viewlet/",
    "project_urls": {
      "Download": "https://github.com/5monkeys/django-viewlet/tarball/1.0.1",
      "Homepage": "http://github.com/5monkeys/django-viewlet"
    },
    "release_url": "https://pypi.org/project/django-viewlet/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Render template parts with extended cache control.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3379736,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ecceac27b32ba7360718d87f7638e4eb84744ce61518a1fe665261d1f4d3cbd",
        "md5": "84678ff53757666cc224ab121570b604",
        "sha256": "51d49acee3aac9b6a69ddf040b95a6e7eddc0397e95434a64e717fea4411a961"
      },
      "downloads": -1,
      "filename": "django-viewlet-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "84678ff53757666cc224ab121570b604",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9552,
      "upload_time": "2013-03-26T17:59:38",
      "upload_time_iso_8601": "2013-03-26T17:59:38.398385Z",
      "url": "https://files.pythonhosted.org/packages/1e/cc/eac27b32ba7360718d87f7638e4eb84744ce61518a1fe665261d1f4d3cbd/django-viewlet-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}