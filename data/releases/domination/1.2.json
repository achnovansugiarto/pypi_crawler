{
  "info": {
    "author": "Baptiste AzÃ©ma",
    "author_email": "baptiste@azema.tech",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Domination\n==========\n\nReal-time application made to monitor and dominate Humans.\n\nFrom the rating of every human (from 1 to 100) sent to the kafka topic `dominate`,\n we detect, in real time, which type they are:\n - `Sha` if its rating is a multiple of 3\n - `Dow` if its rating is a multiple of 5\n - `ShaDow` if its rating is a multiple of 3 and 5\n - `Incompatible` if none of the above.\n \nUsing a new kafka topic `shadow`, we make the result available to a clickhouse \ntable named `shadow`.\n\n\n## System Design\n    \n    +----------------+               +-------------+            +------------------+\n    |  domination    |               |  dominate   |            | domination       |\n    +----------------+               +-------------+            +------------------+\n    | python         | +-----------> |             | +--------> | python           |\n    | Faust producer |               | Kafka topic |            | Faust agent      |\n    | HumanRatings   |               |             |            | HumanCategorized |\n    +----------------+               +-------------+            +------------------+\n                                                                          +\n          +---------------------------------------------------------------+\n          v\n    +----------------+           +-------------------+           +-------------------+\n    |  shadow        |           | shadow_stream     |           |  shadow_consumer  |\n    +----------------+           +-------------------+           +-------------------+\n    |                | +------>  | clickhouse table  | +------>  | clickhouse table  |\n    |  Kafka topic   |           | encapsulate topic |           | materialized view |\n    +----------------+           +-------------------+           +-------------------+\n                                                                          +\n          +---------------------------------------------------------------+\n          v\n    +-------------------+\n    |  shadow           |\n    +-------------------+\n    | clickhouse table  |\n    | store rows        |\n    +-------------------+\n\n\nStructure of Kafka messages:\n- topic `dominate`:\n    `{\"rating\": <integer>, \"unique_id\": \"<string>\"}`\n\n\n- topic `shadow`:\n    `{\"type\": <integer>, \"unique_id\": \"<string>\", \"emit_timestamp\": <datetime>}`\n\n## Usage\n\n#### Requirements\n\n- Python >= 3.6\n- docker-compose\n\n#### Start domination\n    \n    git clone https://github.com/AzemaBaptiste/domination.git && cd domination\n    virtualenv -p python3.8 venv && source venv/bin/activate\n    pip install domination\n    docker-compose up -d\n    ./create_clickhouse_tables.sh\n    \n    domination worker -l info\n \n#### Explore data in a new terminal\n    docker exec -it clickhouse bin/bash -c \"clickhouse-client --multiline\"\n       > SELECT COUNT(type) AS COUNT, type FROM shadow \n         GROUP BY type ORDER BY (COUNT) DESC LIMIT 10;\n    \n#### Stop domination\n    Ctrl + C (stop faust app)\n    docker-compose down\n    \n#### Run The Algorithm\nYou can also run The Algorithm as a standalone. It will print the type \nof every human rated from 1 to 1337.\n\n    python the_algorithm.py \n    \n## Development\n\n    # Install\n    virtualenv -p python3.8 venv\n    source venv/bin/activate\n    pip install -r requirements.txt\n    make install\n    \n    # Build\n    make test # coverage tests\n    make linter # runs pylint\n    make build\n\n## Explore data\n\nOpen CLI of the clickhouse client\n\n    docker exec -it clickhouse bin/bash -c \"clickhouse-client --multiline\"\n\n\n### Description of clickhouse tables\n##### `shadow_stream`: consumer of the kafka topic\n\n    CREATE TABLE IF NOT EXISTS shadow_stream\n    (\n        `type` String,\n        `unique_id` String,\n        `emit_timestamp` DateTime\n    ) ENGINE = Kafka()\n      SETTINGS\n        kafka_broker_list = 'kafka:29092',\n        kafka_topic_list = 'shadow',\n        kafka_group_name = 'shadow-group',\n        kafka_format = 'JSONEachRow',\n        kafka_skip_broken_messages = 1;\n    \n##### `shadow`: final table\n\n    CREATE TABLE shadow as shadow_stream\n    ENGINE = MergeTree()\n    PARTITION BY toYYYYMM(emit_timestamp)\n    ORDER BY type;\n\n##### `shadow_consumer`: materialized view feeding the final table with the consumer table\n\n    CREATE MATERIALIZED VIEW shadow_consumer \n    TO shadow\n    AS SELECT * FROM shadow_stream;\n    \n## References\n- [blog.streamthoughts.fr](https://blog.streamthoughts.fr/2020/06/creer-une-plateforme-analytique-temps-reel-avec-kafka-ksqldb-et-clickhouse/)\n- [medium.com](https://medium.com/big-data-engineering/hello-kafka-world-the-complete-guide-to-kafka-with-docker-and-python-f788e2588cfc)\n\n## TODO\n - deploy package to pypi using github actions",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "domination",
    "package_url": "https://pypi.org/project/domination/",
    "platform": "",
    "project_url": "https://pypi.org/project/domination/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/domination/1.2/",
    "requires_dist": null,
    "requires_python": "~=3.6",
    "summary": "Real-time application in order to dominate Humans.",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8237664,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d837ee47be3872f83438f4fb42c51e71bddce6cdd8918af785c6ca036dfd230",
        "md5": "955f77cfce8f7d6c5d15ec5816eb084e",
        "sha256": "59d4f3b797d0b7ad3bb0c866ec9432b0287b74b80988aa7b6bcc57201a70561e"
      },
      "downloads": -1,
      "filename": "domination-1.2-py3.8.egg",
      "has_sig": false,
      "md5_digest": "955f77cfce8f7d6c5d15ec5816eb084e",
      "packagetype": "bdist_egg",
      "python_version": "3.8",
      "requires_python": "~=3.6",
      "size": 7964,
      "upload_time": "2020-09-21T19:37:12",
      "upload_time_iso_8601": "2020-09-21T19:37:12.520241Z",
      "url": "https://files.pythonhosted.org/packages/4d/83/7ee47be3872f83438f4fb42c51e71bddce6cdd8918af785c6ca036dfd230/domination-1.2-py3.8.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f564fbbbf6fa56f37bc02f53b01e3d9be3280bb77de006a646531554a6b94eeb",
        "md5": "cdee5365f047203613aace8968322b3d",
        "sha256": "7f7ccb098b27abdedb31ee57a62e3ba31b26e9e20cc551d14244e865ec6e7ef6"
      },
      "downloads": -1,
      "filename": "domination-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "cdee5365f047203613aace8968322b3d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 4637,
      "upload_time": "2020-09-21T19:37:13",
      "upload_time_iso_8601": "2020-09-21T19:37:13.641738Z",
      "url": "https://files.pythonhosted.org/packages/f5/64/fbbbf6fa56f37bc02f53b01e3d9be3280bb77de006a646531554a6b94eeb/domination-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}