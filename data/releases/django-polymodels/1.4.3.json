{
  "info": {
    "author": "Simon Charette",
    "author_email": "charette.s@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "#################\ndjango-polymodels\n#################\n\nA django application that provides a simple way to retrieve models type casted\nto their original ``ContentType``.\n\n.. image:: https://travis-ci.org/charettes/django-polymodels.svg?branch=master\n    :target: https://travis-ci.org/charettes/django-polymodels\n\n.. image:: https://coveralls.io/repos/charettes/django-polymodels/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/charettes/django-polymodels?branch=master\n\n************\nInstallation\n************\n\n>>> pip install django-polymodels\n\nMake sure ``'django.contrib.contenttypes'`` and ``'polymodels'`` are in\nyour `INSTALLED_APPS`\n\n::\n\n    INSTALLED_APPS += ('django.contrib.contenttypes', 'polymodels')\n\n*****\nUsage\n*****\n\nSubclass ``PolymorphicModel``, an abstract model class.\n\n::\n\n    from django.db import models\n    from polymodels.models import PolymorphicModel\n\n    class Animal(PolymorphicModel):\n        name = models.CharField(max_length=255)\n\n        def __unicode__(self):\n            return self.name\n\n    class Mammal(Animal):\n        pass\n\n    class Dog(Mammal):\n        pass\n\n    class Reptile(Animal):\n        pass\n\n    class Snake(Reptile):\n        class Meta:\n            proxy = True\n\nObjects are created the same way as usual and their associated ``ContentType``\nis saved automatically:\n\n>>> animal = Animal.objects.create(name='animal')\n>>> mammal = Mammal.objects.create(name='mammal')\n>>> reptile = Reptile.objects.create(name='reptile')\n>>> snake = Snake.objects.create(name='snake')\n\nTo retreive *type casted* instances from the ``Animal.objects`` manager you just\nhave to use the ``select_subclasses`` method.\n\n>>> Animal.objects.select_subclasses()\n[<Animal: animal>, <Mammal: mammal>, <Reptile: reptile>, <Snake: snake>]\n\nYou can also retreive a subset of the subclasses by passing them as arguments to\n``select_subclass``.\n\n>>> Animal.objects.select_subclasses(Reptile)\n[<Reptile: reptile>, <Snake: snake>]\n\nOr directly from subclasses managers.\n\n>>> Reptile.objects.select_subclasses(Snake)\n[<Snake: snake>]\n\nNote that you can also retrieve original results by avoiding the\n``select_subclasses`` call.\n\n>>> Animal.objects.all()\n[<Animal: animal>, <Animal: mammal>, <Animal: reptile>, <Animal: snake>]\n\nIt's also possible to select only instances of the model to which the\nmanager is attached by using the ``exclude_subclasses`` method.\n\n>>> Mammal.objects.all()\n[<Mammal: mammal>]\n\nEach instance of ``PolymorphicModel`` has a ``type_cast`` method that knows how\nto convert itself to the correct ``ContentType``.\n\n>>> animal_snake = Animal.objects.get(pk=snake.pk)\n<Animal: snake>\n>>> animal_snake.type_cast()\n<Snake: snake>\n>>> animal_snake.type_cast(Reptile)\n<Reptile: snake>\n\nIf the ``PolymorphicModel.content_type`` fields conflicts with one of your\nexisting fields you just have to subclass\n``polymodels.models.BasePolymorphicModel`` and specify which field *polymodels*\nshould use instead by defining a ``CONTENT_TYPE_FIELD`` attribute on your model.\nThis field must be a ``ForeignKey`` to ``ContentType``.\n\n::\n\n    from django.contrib.contenttypes.models import ContentType\n    from django.db import models\n    from polymodels.models import BasePolymorphicModel\n\n    class MyModel(BasePolymorphicModel):\n        CONTENT_TYPE_FIELD = 'polymorphic_ct'\n        polymorphic_ct = models.ForeignKey(ContentType)\n\n************\nHow it works\n************\n\nUnder the hood ``select_subclasses`` calls ``seleted_related`` to avoid\nunnecessary queries and ``filter`` if you pass some classes to it. On queryset\niteration, the fetched instanced are converted to their correct type by calling\n``BasePolymorphicModel.type_cast``. Note that those lookups are cached on class\ncreation to avoid computing them on every single query.\n\n\n******************\nNote of the author\n******************\n\nI'm aware there's already plenty of existing projects tackling the whole\n**model-inheritance-type-casting-thing** such as `django-polymorphic`_. However\nI wanted to implement this feature in a lightweight way: no\n``__metaclass__`` or ``__init__`` overrides while using django's public API as\nmuch as possible. In the end, this was really just an extraction of\n`django-mutant`_'s own mecanism of handling this since I needed it as a\nstandalone app for another project.\n\n.. _django-polymorphic: https://github.com/chrisglass/django_polymorphic\n.. _django-mutant: https://github.com/charettes/django-mutant\n\n\n**********\nContribute\n**********\n\nIf you happen to encounter a bug or would like to suggest a feature addition\nplease `file an issue`_ or `create a pull request`_ containing **tests**.\n\n.. _file an issue: https://github.com/charettes/django-polymodels/issues\n.. _create a pull request: https://github.com/charettes/django-polymodels/pulls\n\n*******\nCredits\n*******\n\n* Inspired by a `post of Jeff Elmores`_.\n\n.. _post of Jeff Elmores: http://jeffelmore.org/2010/11/11/automatic-downcasting-of-inherited-models-in-django/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/charettes/django-polymodels",
    "keywords": null,
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-polymodels",
    "package_url": "https://pypi.org/project/django-polymodels/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-polymodels/",
    "project_urls": {
      "Homepage": "https://github.com/charettes/django-polymodels"
    },
    "release_url": "https://pypi.org/project/django-polymodels/1.4.3/",
    "requires_dist": [
      "Django (>=1.8)"
    ],
    "requires_python": null,
    "summary": "Polymorphic models implementation for django",
    "version": "1.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9827457,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b63074ca768ba11c31e5e85492edbd1b0481a4c7791f90b83be7ebccc326187",
        "md5": "4534370613151eae115f5ee4607691ff",
        "sha256": "f59e321b5ff025063922f4b66978852cd4f70dc5336d6fda8e91c3f7e030aece"
      },
      "downloads": -1,
      "filename": "django_polymodels-1.4.3-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "4534370613151eae115f5ee4607691ff",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 13830,
      "upload_time": "2016-05-05T15:11:54",
      "upload_time_iso_8601": "2016-05-05T15:11:54.282032Z",
      "url": "https://files.pythonhosted.org/packages/3b/63/074ca768ba11c31e5e85492edbd1b0481a4c7791f90b83be7ebccc326187/django_polymodels-1.4.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd542a2de3f14029eac7ee77ea34a272cbab3d300fddc29ae802668da1a12602",
        "md5": "d2a20d640bbe02e28839209a504a1053",
        "sha256": "405cc896273b80a44b49c4d3d6d0a20c0390cea8e9f335d17b48b7394a0b551e"
      },
      "downloads": -1,
      "filename": "django-polymodels-1.4.3.tar.gz",
      "has_sig": true,
      "md5_digest": "d2a20d640bbe02e28839209a504a1053",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9073,
      "upload_time": "2016-05-05T15:12:00",
      "upload_time_iso_8601": "2016-05-05T15:12:00.734299Z",
      "url": "https://files.pythonhosted.org/packages/fd/54/2a2de3f14029eac7ee77ea34a272cbab3d300fddc29ae802668da1a12602/django-polymodels-1.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}