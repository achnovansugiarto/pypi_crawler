{
  "info": {
    "author": "Simon Charette",
    "author_email": "charette.s@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "#################\ndjango-polymodels\n#################\n\nA django application that provides a simple way to retrieve models type casted\nto their original ``ContentType``.\n\n************\nInstallation\n************\n\n>>> pip install polymodels\n\nMake sure ``'django.contrib.contenttypes'`` and ``'polymodels'`` are in your `INSTALLED_APPS`::\n\n    INSTALLED_APPS += ('django.contrib.contenttypes', 'polymodels')\n\n*****\nUsage\n*****\nYou subclass ``PolymorphicModel`` which is an abstract model class.\n\n.. _models:\n\n::\n    \n    from django.db import models\n    from polymodels.models import PolymorphicModel\n\n    class Animal(PolymorphicModel):\n        name = models.CharField(max_length=255)\n\n        def __unicode__(self):\n            return self.name\n\n    class Mammal(Animal):\n        pass\n\n    class Dog(Mammal):\n        pass\n\n    class Reptile(Animal):\n        pass\n\n    class Snake(Reptile):\n        class Meta:\n            proxy = True\n\nObjects are created the same way as usual and their associated ``ContentType`` is saved automatically.\n\n>>> animal = Animal.objects.create(name='animal')\n>>> mammal = Mammal.objects.create(name='mammal')\n>>> reptile = Reptile.objects.create(name='reptile')\n>>> snake = Snake.objects.create(name='snake')\n\nTo retreive *type casted* instances from the ``Animal.objects`` manager you just have to use the ``select_subclasses`` method:\n\n>>> Animal.objects.select_subclasses()\n[<Animal: animal>, <Mammal: mammal>, <Reptile: reptile>, <Snake: snake>]\n\nYou can also retreive a subset of the subclasses by passing them as arguments to ``select_subclass``:\n\n>>> Animal.objects.select_subclasses(Reptile)\n[<Reptile: reptile>, <Snake: snake>]\n\nOr directly from subclasses managers:\n\n>>> Reptile.objects.select_subclasses(Snake)\n[<Snake: snake>]\n\nNote that you can also retreive original results by the ``select_subclasses`` call.\n\n>>> Animal.objects.select_subclasses()\n[<Animal: animal>, <Animal: mammal>, <Animal: reptile>, <Animal: snake>]\n\nEach instance of ``PolymorphicModel`` has a ``type_cast`` method that knows how to convert itself to the correct ``ContentType``.\n\n>>> animal_snake = Animal.objects.get(pk=snake.pk)\n<Animal: snake>\n>>> animal_snake.type_cast()\n<Snake: snake>\n>>> animal_snake.type_cast(Reptile)\n<Reptile: snake>\n\nIf the ``PolymorphicModel.content_type`` fields conflicts with one of your existing fields you just have to subclass ``polymodels.models.BasePolymorphicModel`` instead. Just don't forget to indicates which field it should use instead by defining a ``content_type_field_name'`` attribute on you model. This field should be a ``ForeignKey`` to ``ContentType``::\n\n    from django.contrib.contenttypes.models import ContentType\n    from django.db import models\n    from polymodels.models import BasePolymorphicModel\n\n    class MyModel(BasePolymorphicModel):\n        content_type_field_name = 'polymorphic_ct'\n        polymorphic_ct = models.ForeignKey(ContentType)\n\n************\nHow it works\n************\n\nUnder the hood ``select_subclasses`` calls ``seleted_related`` to avoid unnecessary queries and ``filter`` if you pass some classes to it. On querset iteration, the fetched instanced are converted to their correct type by calling ``BasePolymorphicModel.type_cast``. Note that those lookups are cached on class creation to avoid computing them on every single query.\n\n*******\nCaution\n*******\n\nUntil `#16572`_ it's not possible to issue a ``select_related`` over multiple one-to-one relationships. For example, given the models defined `above`_, ``Animal.objects.select_related('mammal__dog')`` would throw a strange ``TypeError``. To avoid this issue, ``select_subclasses`` limits such lookups to one level depth.\n\n.. _#16572: https://code.djangoproject.com/ticket/16572\n.. _above: #models\n\n******************\nNote of the author\n******************\n\nI'm aware there's already some projects tackling this issue, including `django-polymorphic`_. However I wanted to try implementing this feature in a lightweight way: no ``__metaclass___`` or ``__init__`` overrides. Plus this was really just an extraction of `django-mutant`_'s own mecanism of handling this since I needed it in another project.\n\n.. _django-polymorphic: https://github.com/chrisglass/django_polymorphic\n.. _django-mutant: https://github.com/charettes/django-mutant\n\n*******\nCredits\n*******\n\n* Inspired by a `post of Jeff Elmores`_.\n\n.. _post of Jeff Elmores: http://jeffelmore.org/2010/11/11/automatic-downcasting-of-inherited-models-in-django/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/charettes/django-polymodels",
    "keywords": null,
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-polymodels",
    "package_url": "https://pypi.org/project/django-polymodels/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-polymodels/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/charettes/django-polymodels"
    },
    "release_url": "https://pypi.org/project/django-polymodels/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Polymorphic models implementation for django",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9827457,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a744de6f895624d5432210c4b6f2139d334dd5daeee08bbc3ad7925578c9cf3",
        "md5": "070e71d71db3df5bcf10ec841d637b55",
        "sha256": "125851a0413fb1035c3c546e18cd653688d5a46796f7f200b62c62be9f60b43b"
      },
      "downloads": -1,
      "filename": "django-polymodels-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "070e71d71db3df5bcf10ec841d637b55",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8235,
      "upload_time": "2012-07-10T07:36:35",
      "upload_time_iso_8601": "2012-07-10T07:36:35.490341Z",
      "url": "https://files.pythonhosted.org/packages/4a/74/4de6f895624d5432210c4b6f2139d334dd5daeee08bbc3ad7925578c9cf3/django-polymodels-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}