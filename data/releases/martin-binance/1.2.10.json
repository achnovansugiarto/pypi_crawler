{
  "info": {
    "author": null,
    "author_email": "Jerry Fedorenko <jerry.fedorenko@yahoo.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\"><img src=\"https://github.com/DogsTailFarmer/martin-binance/raw/public/doc/Modified%20martingale.svg\" width=\"300\"></p>\n\n***\n<h1 align=\"center\">Modified Martingale</h1>\n\n<h2 align=\"center\">Cyclic grid strategy for SPOT market</h2>\n\n<h3 align=\"center\">Free trading system for crypto exchanges (Binance, Bitfinex, Huobi, OKX, FTX,)</h3>\n\n<h4 align=\"center\">Other crypto exchanges available through multi-exchange terminal <a href=\"#margin\">margin.de</a></h4>\n\n***\n<h4 align=\"center\">martin-binance <a href=\"https://badge.fury.io/py/martin-binance\"><img src=\"https://badge.fury.io/py/martin-binance.svg\" alt=\"PyPI version\" height=\"20\"></a> <--> exchanges-wrapper <a href=\"https://badge.fury.io/py/exchanges-wrapper\"><img src=\"https://badge.fury.io/py/exchanges-wrapper.svg\" alt=\"PyPI version\" height=\"20\"></a></h4>\n\n***\n<h1 align=\"center\"><a href=\"https://codeclimate.com/github/DogsTailFarmer/martin-binance/maintainability\"><img src=\"https://api.codeclimate.com/v1/badges/bfa43f47d1c9a385fd8a/maintainability\"/></a>\n<a href=\"https://deepsource.io/gh/DogsTailFarmer/martin-binance/?ref=repository-badge}\" target=\"_blank\"><img alt=\"DeepSource\" title=\"DeepSource\" src=\"https://deepsource.io/gh/DogsTailFarmer/martin-binance.svg/?label=resolved+issues&token=ONJLSJHeeBvXyuaAjG1OWUhG\"/></a>\n<a href=\"https://deepsource.io/gh/DogsTailFarmer/martin-binance/?ref=repository-badge}\" target=\"_blank\"><img alt=\"DeepSource\" title=\"DeepSource\" src=\"https://deepsource.io/gh/DogsTailFarmer/martin-binance.svg/?label=active+issues&token=ONJLSJHeeBvXyuaAjG1OWUhG\"/></a>\n<a href=\"https://lgtm.com/projects/g/DogsTailFarmer/martin-binance/alerts/\"><img alt=\"Total alerts\" src=\"https://img.shields.io/lgtm/alerts/g/DogsTailFarmer/martin-binance.svg?logo=lgtm&logoWidth=18\"/></a>\n<a href=\"https://lgtm.com/projects/g/DogsTailFarmer/martin-binance/context:python\"><img alt=\"Language grade: Python\" src=\"https://img.shields.io/lgtm/grade/python/g/DogsTailFarmer/martin-binance.svg?logo=lgtm&logoWidth=18\"/></a>\n<a href=\"https://sonarcloud.io/summary/new_code?id=DogsTailFarmer_martin-binance\" target=\"_blank\"><img alt=\"sonarcloud\" title=\"sonarcloud\" src=\"https://sonarcloud.io/api/project_badges/measure?project=DogsTailFarmer_martin-binance&metric=alert_status\"/></a>\n<a href=\"https://pepy.tech/project/martin-binance\" target=\"_blank\"><img alt=\"Downloads\" title=\"Downloads\" src=\"https://pepy.tech/badge/martin-binance/month\"/></a>\n</h1>\n\n***\n## The motto of the project\n\n**_Profitable, fault-tolerant, adaptable to the market. Started and forgot._**\n*Don't forget to pick up what you earned.*\n\nRegardless of any trend, exchange overloads, network connection lost, hardware fault.\n\n## Disclaimer\n\nAll risks and possible losses associated with use of this strategy lie with you.\nStrongly recommended that you test the strategy in the demo mode before using real bidding.\n\n## Important notices\n* 1.2.9 Before use Huobi exchange update ```/home/ubuntu/.MartinBinance/config/exch_srv_cfg.toml``` to last ver. from ```exchanges-wrapper/exch_srv_cfg.toml.template```\n* You cannot run multiple pairs with overlapping currencies on the same account!\n\n>Valid: (BTC/USDT), (ETH/BUSD), (SOL/LTC)\n> \n>Incorrectly: (BTC/USDT), (ETH/USDT), (BTC/ETH)\n> \n>As a result of the mutual impact on the operating balance sheet, the liquidity control system will block the work.\n\n* See <a href=\"#specific-ftx-requirements\">Specific FTX requirements</a>\n\n## Review\n<p align=\"center\"><img src=\"https://gist.githubusercontent.com/DogsTailFarmer/b650b9b199666700d2839fb46d3aa1d7/raw/657ea8e7ad79df66d9d373776aeeb8614241f03f/architecture.svg\"></p>\n\nStarting with version 1.1.0 the project was transformed into two parts:\n* Crypto exchanges API/WSS async wrapper with grpc powered server [exchanges-wrapper](https://github.com/DogsTailFarmer/exchanges-wrapper)\n* This package, a ready-to-use trading strategy that also can be used as a template for implementing your own ideas.\n\nThe system has two modes:\n* STANDALONE, for free unlimited trading on crypto exchanges SPOT market.\n* python_strategy modules can be used as plug-in trading strategy for multi-exchange terminal\n<a href=\"#margin\">margin.de</a>, free demo, you can try it.\n\nStrategy logic realized at executor.py and trading parameters settings in the cli_1_AAABBB.py (cli_7_BTCUSDT.py)\n\nYou can modify them for your needs. See <a href=\"#for-developers\">For developers</a> section.\n\n## Reference\n\n<a href=\"#trade-idea\">Trade idea</a>\n\n<a href=\"#features\">Features</a>\n\n<a href=\"#quick-start\">Quick start</a>\n\n<a href=\"#add-new-exchange-account\">Add new exchange account</a>\n\n<a href=\"#tmux\">Terminal Tmux for STANDALONE mode</a>\n\n<a href=\"#how-its-work\">How it's work</a>\n\n<a href=\"#specific-ftx-requirements\">Specific FTX requirements</a>\n\n<a href=\"#for-developers\">For developers</a>\n\n<a href=\"#known-issue\">Known issue</a>\n\n<a href=\"#target\">Target</a>\n\n<a href=\"#referral-link\">Referral code and donat</a>\n\n## Trade idea\n<p id=\"trade-idea\"></p>\n\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/77513676/191544694-21f28b6f-9d6c-4258-b686-c29653dc9c77.png\"></p>\n\nCreate a grid of increasing volume orders and when they perform\ncreation of one take profit order in the opposite direction.\n\nIts volume is equal to the sum of the executed grid orders,\nand the price compensates the fee and provides the specified profit.\n\nWhat is the chip? After each grid order executed, the price of the take profit order (TP)\napproaches the price of the grid, which requires less bounce to perform it.\n\nIf all grid orders filled, then reverse and start the cycle in another direction.\nThe price overlap set for the reverse cycle grid provides a given profit for the initiating cycle.\n\nFor Reverse cycle there are only two possible result depending on the price in the market.\nIn the first case the entire grid executed therefore we close the previous cycle with profit.\nIn second case executing part of the grid orders, and the filling take profit order increase the depo in the second coin.\nIt reduces the necessary price overlap and sooner or later first variant comes true.\n\nThis allows you to increase the initial deposit using price fluctuations in any trend,\nand makes this strategy really break even. Unless you trade scam shitcoin.\n\nIn the cycle to sell, the profit accumulates in the first currency.\nIn the cycle to buy, the profit accumulates in the second coin.\n\nFee payments are taken into account when calculating TP.\n\nThe optimal pair choice is a stable coin or fiat plus a coin from the top ten.\n\n## Features\n<p id=\"features\"></p>\n\n* Create grid and take profit orders\n* Logarithm price option for grid orders (customizable)\n* Reverse algo if all grid orders are filling\n* Calculation of the price overlap for the Reverse cycle for the profitable completion of the previous cycle\n* Use Average Directional Index indicator for best time starting Reverse cycle\n* Calculation of separate MAKER and TAKER fee\n* Shift grid orders (customizable) if the price is go way (before take profit placed)\n* Adapted size of the first order depending on the exchange's limitations\n* Fractional creation of grid for increase productivity (customizable)\n* Adaptive overlap price for grid on current market conditions (customizable) based on Bollinger Band\n* Update grid orders if market conditions change\n* Adaptive profit setting on current market conditions (customizable) based on Bollinger Band\n* Adaptive grid orders quantity for initial and Reverse cycle\n* Stable operation in pump/dump conditions\n* Process partial execution of orders with large amounts of funds\n* Save funding change, cycle parameter and result in sqlite3 .db for external analytics\n* Telegram notification\n* External control from Telegram bot\n* Restore state after restart strategy\n* From 1.2.9-8 you can withdraw and deposit assets on active strategy with autocorrection depo and initial assets\ncontrol values\n\n## Quick start\n<p id=\"quick-start\"></p>\n\nFor STANDALONE mode you can use both - pip and Docker deployment schemas, as you choice.\n\nFor *margin* mode - pip only.\n\n#### Create Telegram bot\n* Register [Telegram bot](https://t.me/BotFather)\n* Get token\n* Find channel_id. Just start [IDBot](https://t.me/username_to_id_bot) and get channel_id\n* After next step specify this data into ```/home/ubuntu/.MartinBinance/config/ms_cfg.toml``` for 'Demo - Binance', 7\n\n### Docker\n* Install and run [exchanges-wrapper](https://github.com/DogsTailFarmer/exchanges-wrapper#get-started) server.\n* Pull last version of martin-binance image\n```console\ndocker pull ghcr.io/dogstailfarmer/martin-binance:latest\n```\n\n#### First run\nThe structure of the working directory will be created and the necessary files will be copied:\nFor Ubuntu it will be here: ```home/user/.MartinBinance/```\n```console\ndocker run --rm --entrypoint /bin/sh martin-binance -c \"cat ./martin_binance/__init__.py\" > init.py && \\\n  docker run --rm --entrypoint /bin/sh martin-binance -c \"cat ./martin_binance/ms_cfg.toml.template\" > ms_cfg.toml.template &&\\\n  docker run --rm --entrypoint /bin/sh martin-binance -c \"cat ./martin_binance/funds_rate.db.template\" > funds_rate.db.template &&\\\n  docker run --rm --entrypoint /bin/sh martin-binance -c \"cat ./martin_binance/cli_7_BTCUSDT.py.template\" > cli_7_BTCUSDT.py.template &&\\\n  docker run --rm --entrypoint /bin/sh martin-binance -c \"cat ./martin_binance/cli_10_AAABBB.py.template\" > cli_10_AAABBB.py.template &&\\\n  python3 init.py && rm init.py && rm ms_cfg.toml.template && rm funds_rate.db.template && rm cli_7_BTCUSDT.py.template && rm cli_10_AAABBB.py.template\n```\n#### Start client\n```console\ndocker run -itP \\\n --mount type=bind,source=/home/ubuntu/.MartinBinance,target=/home/appuser/.MartinBinance \\\n --network=host \\\n --restart=always \\\n --name=7-BTCUSDT \\\n martin-binance \\\n /home/appuser/.MartinBinance/cli_7_BTCUSDT.py 1\n```\nThe last '1' it is parameter for silent restart with restore operational status.\n\n```.MartinBinance/cli_7_BTCUSDT.py``` where trading parameters must be setting.\n\nFor auto update running containers recommended use [Watchtower](https://github.com/containrrr/watchtower/)\n\n### Install from pip\n\n```console\npip install martin-binance\n```\nAfter first install run\n```console\nexchanges_wrapper/exch_srv.py\n```\n\nand in ```martin_binance``` folder run next command:\n\n```console\ncp cli_7_BTCUSDT.py.template cli_7_BTCUSDT.py && chmod +x cli_7_BTCUSDT.py && ./cli_7_BTCUSDT.py\n```\nYou can find this where pip installs packages, often it's ```/home/ubuntu/.local/lib/python3.10/site-packages```\n\nThe structure of the working directory will be created and the necessary files will be copied:\nFor Ubuntu it will be here: ```home/user/.MartinBinance/```\n\nFor upgrade to latest versions use:\n```console\npip install -U martin-binance\n```\n\n#### Start server\n* Specify api_key and api_secret in ```/home/ubuntu/.MartinBinance/config/exch_srv_cfg.toml```\n* Run ```exchanges_wrapper/exch_srv.py``` in terminal window.\n\n#### Start client\n* Run ```/home/ubuntu/.MartinBinance/cli_7_BTCUSDT.py``` in other terminal window.\n\nStrategy is started.\n\n#### Setting trade pair\nYou must set pair name in three places the same (yes, it is crooked, but so far):\n* base setting at top of the ```cli_X_AAABBB.py```, ```ex.SYMBOL = 'AAABBB'```\n* the name of ```cli_X_AAABBB.py``` must match\n* the ```X``` it is index of element from exchange list in ```config/ms_cfg.toml```\n\n>For 'Demo - Binance' and BTC/USDT trade pair it will be cli_7_BTCUSDT.py\n\n* the name of pane in <a href=\"#tmux\">Tmux terminal window</a>, see explanation in the relevant section\n\nFor stop strategy use Ctrl-C and/or Telegram control function\n\n### MARGIN mode\n*For different OS paths will be different, this example for Ubuntu*\n\n* Install [margin](https://margin.de/download/) to the ```~/opt/margin/```\n\nChange dir to the ```~/opt/margin/resources/python/lib/python3.7/site-packages/``` and install martin-binance there:\n```console\npip install --no-cache-dir -t . -U --ignore-requires-python --no-deps martin-binance\n```\n\nThe margin terminal uses its own assembly Python3.7 which does not have some packages necessary for the strategy\nto work. They need to be installed.\n```console\npip install --no-cache-dir -t . -U --ignore-requires-python --no-deps -r ./martin_binance/margin/margin_req.txt\n```\n\n* Rename  ```martin_binance/ms_cfg.toml.template``` to ```martin_binance/ms_cfg.toml```\n* Copy ```ms_cfg.toml``` and ```funds_rate.db``` to the margin install folder ```~/opt/margin/```\n* Create Telegram bot as described above and specify the data in ```ms_cfg.toml```\n\nFor Ubuntu (Linux) check if exist file\n```~/opt/margin/resources/python/lib/python3.7/lib-dynload/_sqlite3.cpython-37m-x86_64-linux-gnu.so```\nand if not, copy it from ```martin_binance/margin/_sqlite3.cpython-37m-x86_64-linux-gnu.so```\n***\n* Start margin in Demo mode\n* Add currency pair BTC/USDT\n* Set the custom fee level = 0.0% in the margin terminal settings\n* Add Python strategy:\n<p align=\"center\"><img src=\"https://git.io/JDIiQ\"></p>\n\n* Copy/paste the contents of the file cli_7_BTCUSDT.py to the Code Editor window\n* Save, Run Strategy, Start\n\nStrategy is started.\n\n#### Setting trade pair\nThe selection of the pair is determined by the window of the terminal in which the strategy is launched.\n\n### Add new exchange account (STANDALONE mode)\n<p id=\"add-new-exchange-account\"></p>\nAdding an account is in two parts\n\n* For server, it is ```/home/ubuntu/.MartinBinance/config/exch_srv_cfg.toml```,\nwhere you place API key and *account name*\n* For client, it's ```/home/ubuntu/.MartinBinance/config/ms_cfg.toml```,\nwhere you add *account name* into exchange list and setup Telegram parameters\n\nThe *account name* _must_ be identically for server and client configs.\n\n## Terminal Tmux (Linux)\n<p id=\"tmux\"></p>\nFor STANDALONE mode you need separate terminal window for each task, separate for server and for each trading pair.\nIf you plan to run a strategy on VPS then you need terminal program which:\n\n* multi windows/panes\n* continue running after end of ssh session\n* auto save running state\n* restore state after system restart\n\nThe [Tmux](https://github.com/tmux/tmux) meets all these requirements.\n \n### Tmux install\nInstall and setup all in list:\n\n* [Tmux](https://github.com/tmux/tmux)\n* [Tmux Plugin Manager](https://github.com/tmux-plugins/tpm#tmux-plugin-manager)\n* [Tmux sensible](https://github.com/tmux-plugins/tmux-sensible)\n* [Tmux Resurrect](https://github.com/tmux-plugins/tmux-resurrect)\n* [tmux-continuum](https://github.com/tmux-plugins/tmux-continuum)\n\nFind /service/tmux.service, edit your path and install it under systemctl. \n\nExample for tmux configuration file .tmux.conf\n~~~\nset -g @plugin 'tmux-plugins/tpm'\nset -g @plugin 'tmux-plugins/tmux-sensible'\nset -g @plugin 'tmux-plugins/tmux-resurrect'\nset -g @plugin 'tmux-plugins/tmux-continuum'\nset -g @continuum-restore 'on'\nset -g @continuum-save-interval '15'\nset -g @continuum-boot 'on'\nset -g status-right 'Status: #{continuum_status}'\nset -g assume-paste-time 1\nset -g base-index 0\nset -g bell-action none\nset -g history-file ~/.tmux_history\nset -g mouse on\nset -g prefix C-b\nrun '~/.tmux/plugins/tpm/tpm'\n~~~\n\nAttention: The name of session ('Trade') and pane ('srv', '7-BTC/USDT') must be same as in example and correspond pair\nwhich start in this pane. For example cli_1_BTCUSDT.py must be started in pane with name '1-BTC/USDT'\n\n* Start new session:\n~~~\ntmux new-session -s Trade\n~~~\n* Rename pane 0: Ctrl+B + , srv Enter\n* Change dir to the ```~/.local/lib/python3.8/site-packages/exchanges_wrapper```\n* Create new pane: Ctrl+B c\n* Rename pane 1: Ctrl+B + , 7-BTC/USDT Enter\n* Change dir to the ```~/.MartinBinance```\n* Reboot system\n* Attach to the restored session:\n~~~\ntmux attach\n~~~\nYou must see the same window as before reboot:\n\n<p align=\"center\"><img src=\"https://git.io/JDIix\"></p>\n\nFor each pane appropriate dir must be selected.\n\n* Find /service/relaunch.service, edit your path and install it under systemctl.\n* Run in the pane 0:srv server script:\n~~~\n./exch_srv.py\n~~~\n* Run in the pane 1:7-BTC/USDT trade strategy script:\n~~~\n./cli_7_BTCUSDT.py\n~~~\n\nFinal test, reboot system. After reboot connect to the tmux session:\n~~~\ntmux attach\n~~~\nIf everything has been done correctly you should see the restored strategy.\n\n## How it's work\n<p id=\"how-its-work\"></p>\n\n_Setup all mentioned trade parameter at the top of cli_X_AAABBB.py_\n\nWhere X is exchange number, see it in ms_cfg.toml and AAABBB is trade pair, for example BTCUSDT on Binance is cli_9_BTCUSDT.py\n\n<a href=\"#place-grid\">Place grid</a>\n\n<a href=\"#shift-grid-orders\">Shift grid orders</a>\n\n<a href=\"#adaptive-overlap-price-for-grid\">Adaptive overlap price for grid</a>\n\n<a href=\"#quantity-of-grid-orders\">Quantity of grid orders</a>\n\n<a href=\"#fractional-creation-of-grid\">Fractional creation of grid</a>\n\n<a href=\"#logarithm-price-option\">Logarithm price option</a>\n\n<a href=\"#reverse\">Reverse</a>\n\n<a href=\"#grid-only\">Grid only</a>\n\n<a href=\"#place-take-profit\">Place take profit order</a>\n\n<a href=\"#restart\">Restart</a>\n\n<a href=\"#fee-options\">Fee options</a>\n\n<a href=\"#deposit-and-withdraw-assets-on-active-strategy\">Deposit and withdraw assets on active strategy</a>\n\n<a href=\"#telegram-notification\">Telegram notification</a>\n\n<a href=\"#telegram-control\">Telegram control</a>\n\n<a href=\"#save-data-for-external-analytics\">Save data for external analytics</a>\n\n<a href=\"#consolidated-asset-valuation\">Consolidated asset valuation</a>\n\n<a href=\"#recovery-after-any-reason-crash\">Recovery after any reason crash, restart etc.</a>\n\n\n### Place grid\n<p id=\"place-grid\"></p>\n\nThe main parameters for the strategy are grid parameters. Specify the trade direction for the first cycle.\nIf START_ON_BUY = True, a grid of buy orders will be placed and take profit will be for sale.\n\nSpecify the deposit size for the first cycle in the desired currency, and the number of grid orders.\nThese are related parameters, there is a limit on the minimum size of the order,\nso a many orders if the deposit is insufficient will not pass the verification during initialization.\n\nThe size of the order in the grid calculated according to the law of geometric progression,\nwhile the MARTIN parameter is a coefficient of progression.\nThe first order, the price of which is closest to the current one is the smallest in volume.\n\nTo avoid the execution of the first order \"by market\" its price set with a slight offset,\nwhich is determined by the parameter PRICE_SHIFT.\n\n#### Shift grid orders\n<p id=\"shift-grid-orders\"></p>\n\nIt happens that when place a grid, the price goes in the opposite direction. There is no point\nin waiting in this case, we need to move the grid after the price.\nFor this there are SHIFT_GRID_DELAY. Configure them or leave the default values.\n\n#### Adaptive overlap price for grid\n<p id=\"adaptive-overlap-price-for-grid\"></p>\n\nThe range of prices that overlaps the grid of orders affects profitability directly \nand must correspond to market conditions. If it is too wide combined with small number of orders,\nthe cycle time will be too long, and most of the deposit will not be involved in turnover.\nWith a small overlap, the entire order grid will be executed in a short time, and the algorithm will be reversed,\nwhile the profit on the cycle not fixed.\n\nThe overlap range can be fixed. Then it is defined by OVER_PRICE = xx and ADAPTIVE_TRADE_CONDITION = False.\n\nFor automatic market adjustment, ADAPTIVE_TRADE_CONDITION = True. In this case, the instant value\nof the Bollinger Band on 20 * 1 hour candles used to calculate the overlap range. The minimum values\nare limited by the exchange limit for minimal price change per one step combined with number of orders.\n\nFor fine-tuning there is KBB parameter. By default, value 2.0 is used to calculate Bollinger curves.\n\nThe over price value update before the start of the new cycle and periodically refreshed.\nIf the market condition change exceeds the set limits, the grid is updated (does not apply in reverse cycle).\n\n#### Quantity of grid orders\n<p id=\"quantity-of-grid-orders\"></p>\n\nTwo parameters determine the number of orders, ORDER_Q and OVER_PRICE. For start cycle and parameter\nADAPTIVE_TRADE_CONDITION = False, these are absolute and fixed values.\n\nFor Reverse cycle or parameter ADAPTIVE_TRADE_CONDITION = True they specify the density of grid orders.\nAt the same time, the larger the range of overlap, the more orders there will be.\nWhen calculating, the exchange's restrictions on the minimum order size and price step taken into account\nand thus limit the maximum number of orders.\n\nFor Reverse cycle, this is especially important, since with large price fluctuations we will have to sweep\na very large range, 30-50% or more. In which case an adaptive number of orders will allow to do this as efficiently\nas possible.\n\n#### Fractional creation of grid\n<p id=\"fractional-creation-of-grid\"></p>\n\nFor successful trading, the speed of the bot response to price fluctuations is important.\nWhen testing on Bitfinex, I noticed that when placed a group of orders,\nthe first 5 are placed quickly, and the remaining ones with a significant delay. Also, the more orders,\nthe longer it takes to shift the grid.\n\nTherefore, I added the parameter GRID_MAX_COUNT, which specifies the number of initial orders to be placed.\nThen, two options performed. First, the grid shift function triggered. Second, one of the placed grid orders executed,\nand after successful creation of the take profit order, the next part *GRID_MAX_COUNT* of hold grid orders added.\nIf total count of active grid orders more than ORDER_Q and hold grid not exhaust each next placed one\nafter filling one grid order, until the hold list exhausted.\n \nThus, we always have a given number of active orders to respond to price fluctuations and have a large range\nof price overlap. Then, we do not risk running into the ban from exchange for exceeding the limit.\n\n#### Logarithm price option\n<p id=\"logarithm-price-option\"></p>\n\nYou can increase the share of the deposit in turnover when calculating the price for grid orders using not a linear,\nbut a logarithmic distribution. The density of orders near the current price will be higher,\nwhich increases the likelihood of their execution.\n\nUse LINEAR_GRID_K parameter and see '/doc/Model of logarithmic grid.ods' for detail.\n\n### Reverse\n<p id=\"reverse\"></p>\n\nIt happens that all grid orders completed. Then we believe that we successfully bought the asset,\nand place a take profit order. Instead of one order, we place a grid, which ensures the break-even strategy.\nThe grid parameters change dynamically, depending on the market conditions, accumulated deposit\nduring execution of the Reverse cycle, and the specified profitability parameters.\n\nWith each successful completion of the reverse cycle, the accumulated profit volume increases,\nwhich reduces the necessary price overlap for the profitable completion of the original cycle.\n\nIn order for the algorithm not to work for itself in reverse mode, only part of the earned profit is reinvested.\nPROFIT_REVERSE parameter specifies the reinvestment rule. Leave it as default.\n\n### Grid only\n<p id=\"grid-only\"></p>\n\nYou can buy/sell asset with grid options. To do this, set the GRID_ONLY = True\nIn this case, the take-profit order will not be placed and Reverse cycle not started. After filling all grid orders\nstrategy goes to STOP state. All options associated with grid calculation work as usual, except no shifting grid.\n\n### Place take profit\n<p id=\"place-take-profit\"></p>\n\nAs the grid orders executed, the volume of the take profit order sums up their volume,\nprice averaged and increased to override the fees and earn the specified profit.\n\nDo not set PROFIT too large. This reduces the probability of executing a take profit order\nwith small price fluctuations. I settled on a value of about 0.5%\n\nFor adaptive calculate profit before place order you can set PROFIT_MAX.\nThen its value will be set in the range from PROFIT to PROFIT_MAX. Calculation based on Bollinger Band\nindicator with PROFIT_K coefficient.\n\n### Restart\n<p id=\"restart\"></p>\n\nWhen take profit order executed the cycle results recorded, the deposit increased by the cycle profit,\nand bot restarted.\n\n### Fee options\n<p id=\"fee-options\"></p>\n\nTo correctly count fees for MAKER and TAKER, you must set the FEE_MAKER and FEE_TAKER parameters.\n\nFor a third currency fee, such as BNB on Binance, or HT on Huobi, set FEE_IN_PAIR = False\n\nFor fee processing for second currency only, like as KRAKEN, use FEE_SECOND = True\n\nPriority of parameters from larger to smaller is:\n* FEE_IN_PAIR \n* FEE_BNB_IN_PAIR\n* FEE_FTX\n* FEE_SECOND\n\nAttention: the commission, which is charged in the third coin, is not taken into account in the calculation of income.\nControl the return on the balance of three coins.\n\n### Deposit and withdraw assets on active strategy\n<p id=\"deposit-and-withdraw-assets-on-active-strategy\"></p>\n\nIt is better to change the assets amount for the strategy when it has completed the cycle and stopped. However,\nsubject to the following conditions and restrictions and some luck, you can do this on a running strategy.\n\nLimits there are next:\n* strategy must be in \"stable state\". This means that the grid and take profit order are placed and the current price is\nequidistant from them.\n* Before withdrawing you must get actual info about Free assets (find it on status report in Telegram)\n\n*Deposit* asset: For Reverse cycle the increase in the current deposit volume does not occur, the added volume will be\ntaken into account as free. For a direct cycle, the deposit will be increased for the second currency in the Buy cycle\nand for the first in the Sell cycle.\n\n*Withdraw* asset: If all grid orders and take profit order are placed, then only free assets that are not involved\nin the turnover are available for withdrawal. If some orders are held, you may accidentally withdraw the asset\nnecessary for their placement. In this case, you will receive a warning.\n\nUse the exchange tools for I/O funds, the necessary and possible adjustments will be made automatically.\n\n### Telegram notification\n<p id=\"telegram-notification\"></p>\n\nBasic information about the state of the bot, for example, about the start and results of the cycle,\ncan be sent to Telegram bot.\n\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/77513676/198888456-5d1af806-d0f3-42dd-be03-dad57669e6a7.png\"></p>\n\n### Telegram control\n<p id=\"telegram-control\"></p>\n\n* status - get current status\n* stop - stop after end of cycle (if current cycle is reverse - only after back to direct cycle)\n* end - stop after end of cycle, direct and reverse, no difference\n\nAll commands are sent as a reply to message from desired strategy. Use simple text message or menu items. For use menu \nafter first run strategy in Telegram bot use /start command once.\nIf all is normal, you will receive a confirmation that the system has received the command within 10 seconds.\n\n### Save data for external analytics\n<p id=\"save-data-for-external-analytics\"></p>\n\nAnalytic subsystem is not mandatory and has no impact on trading strategy.\n\nAll data collected into ```funds_rate.db```\n\nCycle time, yield, funds, initial cycle parameters, all this for all pairs and exchanges where this bot launched.\n\nIn STANDALONE mode for Binance also collected all balances for all assets in trading account. \n\nIt Sqlite3 db with very simple structure, in table t_funds each row is the result of one\ncycle with parameters and result.\n\nNow I'm use [prometheus](https://github.com/prometheus/client_python) -> [Grafana](https://grafana.com/)\nfor calculate and visualisation analytic data. It's useful. You can use funds_rate_exporter.py for start.\nFind it into repository. \n\nAlso, you can try the ```martin_binance/service/grafana.json``` as example of consolidated report.\n\n### Consolidated asset valuation\n<p id=\"consolidated-asset-valuation\"></p>\n\nIf you have several trading pairs on different exchanges, then regular valuation of the asset is a very time-consuming\ntask.\n\n<p align=\"center\"><img src=\"https://git.io/JDIPt\"></p>\n\nAt the end of each trading cycle, deposit data recorded for each currency. Once a day, the current currency rate to USD\nis queried. In ```funds_rate_exporter.py``` of times per minute calculated data for unloading in\n[prometheus](https://github.com/prometheus/client_python). An example of a summary report implemented on Grafana\nlocated above.\n\nTo receive quotes, you need to get the free API key on [CoinMarketCap](https://coinmarketcap.com/api/pricing/).\nSpecify the key at the top of the ms_cfg.toml and start ```funds_rate_exporter.py``` as service. For Ubuntu,\nyou can use ```/service/funds_export.service``` \n\n### Recovery after any reason crash, restart etc.\n<p id=\"recovery-after-any-reason-crash\"></p>\n\n#### STANDALONE mode\n* Auto for Network failure, exchange timeout etc. \n* Auto recovery after restart with full implemented Tmux install (Linux only)\n* For manual restart with save order and load last state run ```./cli_X_AAABBB.py 1```\n\n#### margin mode\n* Network failure, timeout etc.\n\nThis is margin layer does, and it's work good. No additional action from user needed.\n\n* Hard restart.\n\nMargin periodically, every two seconds, save strategy state, and after restart place strategy in suspend state.\nStrategy check if some order filled out during inactivity and recalculate state for normal operation. You need\nmanual unsuspend strategy for further work.\n\nThis will work well if, at the time of interruption, the strategy was in a stable state and there were\nnot pending actions to place/remove orders. Processing such situations requires research,\nand I am not sure that it is necessary.\n  \n* Maintenance\n\nIf you need setup new version margin or Python strategy, first you need stop strategy.\nUse Telegram control function, described above.\n\n## Specific FTX requirements\n<p id=\"specific-ftx-requirements\"></p>\n\nThese comments relate to this strategy, perhaps for another algorithm these restrictions will not be significant.\n\n* This strategy can be use on FTX only in fee free mode. If this condition is not met, when calculating the take\nprofit order price, a giant gap is obtained between the first grid order and the take profit order.\nThis is due to the large price change step and the large minimum order size.\nTo get a Maker fee = 0% you need a stake 25 FTT. [Details here](https://help.ftx.com/hc/en-us/articles/360052410392). \n\n* Have a small stock of assets for both currencies, over and above used for deposit. 0.1% of the deposit\nvolume is enough. Otherwise, the exchange rejects the last grid order and the TP order, provided that there\nis an accurately available balance sheet.\n```[2022-08-27 04:17:26,560: ERROR] handle_errors.response.status >= 400: {'success': False, 'error': 'Not enough balances'}```\n*FTX support rejected this issue*\n\n\n## For developers\n<p id=\"for-developers\"></p>\n\nThe modular open architecture of the project allows you to use it both as a ready-made solution and in parts when\ndeveloping your own strategies. See Review chart for reference.\n\nWarning.\nCoverage of overridden [margin strategy-sdk](https://github.com/MarginOpenSource/strategy-sdk) is significant but not complete.\nOnly methods and functions required for normal operation of the presented strategy are implemented.\nMissing functionality can be implemented on yours own or on request.\n\n### Easy way\nIf you want to develop 'margin style' strategy, use\n[template](https://github.com/MarginOpenSource/strategy-template) from margin repository.  In this way you can use it\nboth independently (STANDALONE mode) and together with [margin.de](https://margin.de)\n\n### Independent way\nA fully independent strategy that can be used on exchanges that are supported by the\n[exchanges-wrapper](https://github.com/DogsTailFarmer/exchanges-wrapper). Now it Binance and FTX.\nTheir list will expand. Description and examples of use referenced above.\n\n## Known issue\n<p id=\"known-issue\"></p>\n\n_STANDALONE_ mode:\n\n* None\n\n_With margin.de:_\n* Not work more than one Python bot at the same time with \"pure virtual function\" error after some time.\nYou can use new instance for new pair\n* Sometimes skips the partial fill signal from the margin layer\n* Sometimes fill signal from the margin come with a delay, for temp fix use EXTRA_CHECK_ORDER_STATE = True\n* When you STOP strategy from margin terminal, close and then restart it, the strategy is started without approval and\nrestore (can be duplicated) orders. If you want planed restart martin-binance - delete state.db in./margin folder before restart.\n\n## Target\n<p id=\"target\"></p>\n\n* Extended testing capabilities\n* Optimization ideas\n* Several users raise reaction from margin support\n* Resources for development\n* Get fault tolerance profitable system\n\n## Referral link\n<p id=\"referral-link\"></p>\n\nCreate account on [Binance](https://accounts.binance.com/en/register?ref=QCS4OGWR) and get 10% discount on all trading\nfee\n\nCreate account on [HUOBI](https://www.huobi.com/en-us/topic/double-reward/?invite_code=9uaw3223) and get 10% cashback\non all trading fee\n\nCreate account on [Bitfinex](https://www.bitfinex.com/sign-up?refcode=v_4az2nCP) and get 6% rebate fee\n\nCreate account on [FTX](https://ftx.com/profile#a=62025440)\n\nCreate account on [OKEX](https://www.okex.com/join/2607649)\n\n### margin.de\n<p id=\"margin\"></p>\n\nMulti-exchange trade terminal. For 10% discount on [margin license](https://margin.de) use coupon code **Margin9ateuE**\n\n#### VPS\nAlso, you can start strategy on [Hetzner](https://hetzner.cloud/?ref=uFdrF8nsdGMc) cloud VPS only for 4.75 € per month\n\n#### Donate\nTo donate and directly support the project, you can transfer funds to these addresses in Binance:\n\n*BNB*, *BUSD*, *USDT* (BEP20) 0x5b52c6ba862b11318616ee6cef64388618318b92\n\n*USDT* (TRC20) TP1Y43dpY7rrRyTSLaSKDZmFirqvRcpopC\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "martin-binance",
    "package_url": "https://pypi.org/project/martin-binance/",
    "platform": null,
    "project_url": "https://pypi.org/project/martin-binance/",
    "project_urls": {
      "Source": "https://github.com/DogsTailFarmer/martin-binance"
    },
    "release_url": "https://pypi.org/project/martin-binance/1.2.10/",
    "requires_dist": [
      "exchanges-wrapper==1.2.7.post2",
      "margin-strategy-sdk==0.0.11",
      "aiohttp==3.8.1",
      "grpcio==1.48.1",
      "grpcio-tools==1.48.1",
      "jsonpickle==2.2.0",
      "psutil==5.9.1",
      "requests==2.28.1",
      "simplejson==3.17.6",
      "toml==0.10.2",
      "libtmux==0.14.0",
      "colorama==0.4.5",
      "prometheus-client==0.14.1"
    ],
    "requires_python": ">=3.8",
    "summary": "Free trading system for Binance SPOT API",
    "version": "1.2.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17525430,
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "4550b4cbfcb33e879530cee528a4c4b14d13e67142996e088f20d201553c9c3a",
        "md5": "24758796351c61e8b0927f7dfa8cf500",
        "sha256": "d527e0a0b8765f9654362098d3880f75256e016ce189c7fd492d8bb9be1e4290"
      },
      "downloads": -1,
      "filename": "martin_binance-1.2.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "24758796351c61e8b0927f7dfa8cf500",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 288564,
      "upload_time": "2022-11-23T14:26:03",
      "upload_time_iso_8601": "2022-11-23T14:26:03.859576Z",
      "url": "https://files.pythonhosted.org/packages/45/50/b4cbfcb33e879530cee528a4c4b14d13e67142996e088f20d201553c9c3a/martin_binance-1.2.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "13b354ccbf29414e485ae313c23d8c2f162b78519567e5d6923d8083412d449b",
        "md5": "53505ce84e92a3bd7aba2c704eadf409",
        "sha256": "13ba2ac4e18d8db85580e03528df725cbbbdc13c0c2b2ff48ec69acc718a9e65"
      },
      "downloads": -1,
      "filename": "martin-binance-1.2.10.tar.gz",
      "has_sig": false,
      "md5_digest": "53505ce84e92a3bd7aba2c704eadf409",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 4524204,
      "upload_time": "2022-11-23T14:26:12",
      "upload_time_iso_8601": "2022-11-23T14:26:12.130755Z",
      "url": "https://files.pythonhosted.org/packages/13/b3/54ccbf29414e485ae313c23d8c2f162b78519567e5d6923d8083412d449b/martin-binance-1.2.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}