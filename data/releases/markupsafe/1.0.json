{
  "info": {
    "author": "Armin Ronacher",
    "author_email": "armin.ronacher@active-4.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "MarkupSafe\n==========\n\nImplements a unicode subclass that supports HTML strings:\n\n.. code-block:: python\n\n    >>> from markupsafe import Markup, escape\n    >>> escape(\"<script>alert(document.cookie);</script>\")\n    Markup(u'&lt;script&gt;alert(document.cookie);&lt;/script&gt;')\n    >>> tmpl = Markup(\"<em>%s</em>\")\n    >>> tmpl % \"Peter > Lustig\"\n    Markup(u'<em>Peter &gt; Lustig</em>')\n\nIf you want to make an object unicode that is not yet unicode\nbut don't want to lose the taint information, you can use the\n``soft_unicode`` function.  (On Python 3 you can also use ``soft_str`` which\nis a different name for the same function).\n\n.. code-block:: python\n\n    >>> from markupsafe import soft_unicode\n    >>> soft_unicode(42)\n    u'42'\n    >>> soft_unicode(Markup('foo'))\n    Markup(u'foo')\n\nHTML Representations\n--------------------\n\nObjects can customize their HTML markup equivalent by overriding\nthe ``__html__`` function:\n\n.. code-block:: python\n\n    >>> class Foo(object):\n    ...  def __html__(self):\n    ...   return '<strong>Nice</strong>'\n    ...\n    >>> escape(Foo())\n    Markup(u'<strong>Nice</strong>')\n    >>> Markup(Foo())\n    Markup(u'<strong>Nice</strong>')\n\nSilent Escapes\n--------------\n\nSince MarkupSafe 0.10 there is now also a separate escape function\ncalled ``escape_silent`` that returns an empty string for ``None`` for\nconsistency with other systems that return empty strings for ``None``\nwhen escaping (for instance Pylons' webhelpers).\n\nIf you also want to use this for the escape method of the Markup\nobject, you can create your own subclass that does that:\n\n.. code-block:: python\n\n    from markupsafe import Markup, escape_silent as escape\n\n    class SilentMarkup(Markup):\n        __slots__ = ()\n\n        @classmethod\n        def escape(cls, s):\n            return cls(escape(s))\n\nNew-Style String Formatting\n---------------------------\n\nStarting with MarkupSafe 0.21 new style string formats from Python 2.6 and\n3.x are now fully supported.  Previously the escape behavior of those\nfunctions was spotty at best.  The new implementations operates under the\nfollowing algorithm:\n\n1.  if an object has an ``__html_format__`` method it is called as\n    replacement for ``__format__`` with the format specifier.  It either\n    has to return a string or markup object.\n2.  if an object has an ``__html__`` method it is called.\n3.  otherwise the default format system of Python kicks in and the result\n    is HTML escaped.\n\nHere is how you can implement your own formatting:\n\n.. code-block:: python\n\n    class User(object):\n\n        def __init__(self, id, username):\n            self.id = id\n            self.username = username\n\n        def __html_format__(self, format_spec):\n            if format_spec == 'link':\n                return Markup('<a href=\"/user/{0}\">{1}</a>').format(\n                    self.id,\n                    self.__html__(),\n                )\n            elif format_spec:\n                raise ValueError('Invalid format spec')\n            return self.__html__()\n\n        def __html__(self):\n            return Markup('<span class=user>{0}</span>').format(self.username)\n\nAnd to format that user:\n\n.. code-block:: python\n\n    >>> user = User(1, 'foo')\n    >>> Markup('<p>User: {0:link}').format(user)\n    Markup(u'<p>User: <a href=\"/user/1\"><span class=user>foo</span></a>')\n\nMarkupsafe supports Python 2.6, 2.7 and Python 3.3 and higher.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/pallets/markupsafe",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "MarkupSafe",
    "package_url": "https://pypi.org/project/MarkupSafe/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/MarkupSafe/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/pallets/markupsafe"
    },
    "release_url": "https://pypi.org/project/MarkupSafe/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Implements a XML/HTML/XHTML Markup safe string for Python",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16461847,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4dde32d741db316d8fdb7680822dd37001ef7a448255de9699ab4bfcbdf4172b",
        "md5": "2fcedc9284d50e577b5192e8e3578355",
        "sha256": "a6be69091dac236ea9c6bc7d012beab42010fa914c459791d627dad4910eb665"
      },
      "downloads": -1,
      "filename": "MarkupSafe-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2fcedc9284d50e577b5192e8e3578355",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14356,
      "upload_time": "2017-03-07T15:32:13",
      "upload_time_iso_8601": "2017-03-07T15:32:13.161004Z",
      "url": "https://files.pythonhosted.org/packages/4d/de/32d741db316d8fdb7680822dd37001ef7a448255de9699ab4bfcbdf4172b/MarkupSafe-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}