{
  "info": {
    "author": "Luka Anicin",
    "author_email": "luka.anicin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ML Tutor v1.0.1\n\n[![Downloads](https://pepy.tech/badge/ml-tutor)](https://pepy.tech/project/ml-tutor)\n\nML Tutor is a Python library created to help people learn Machine Learning (ML). \n\nMachine Learning (ML) is pretty hard and especially if you are just starting (been there done that)! \nI've created this library to help anybody interested in learning ML. ML Tutor provides visual training \nfor every algorithm inside it so you can visualize what's happening with your data in real-time!\nBesides that, for every algorithm, there is a theory on how it works and interview questions. \n\nHappy learning! ^_^\n\nUse ML Tutor if you are looking to:\n\n- Learn most popular Machine Learning algorithms directly from Jupyter Notebook or Google Colab\n- Visualize what's happening with your data (Educational purpose only)\n\n\n## Usage\n\nTo demonstrate what you can do with ML Tutor, we will need a dataset.\nYou can use your own dataset or some classic dataset (such as [Iris](https://archive.ics.uci.edu/ml/datasets/iris)).\n\nLet's use the Iris dataset from the Sklearn library and split it into the training and testing subsets.\n\n```python\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\ndataset = load_iris()\nX_train, X_test, y_train, y_test = train_test_split(dataset.data, dataset.target, test_size=0.2)\n```\n\n### Training/Prediction\n\n#### Clustering\nFor the clustering example, let's import KMeans and demonstrate how to use it with the ML Tutor library.\nNotice that you can train/test it just like any `sklearn` algorithm.\n\nEach algorithm has several arguments you can provide, but the unique one across all of them is `visual_training`. \nIf you set this to `True`, you will see the whole training process inside your IDE.\n\n```python\nfrom ml_tutor.clustering.kmeans import KMeans\n\nclf = KMeans(n_clusters=3, visual_training=True)\nclf.fit(X_train)\n```\n![](images/kmeans-vt.gif)\n\n#### Classification\n\nFor the classification example, let's use KNeighbourClassifier (KNN).\n\nBecause the KNN just stores data when you call the `.fit()` function on it, the visualization part comes in the __prediction__ time.\n\n```python\nfrom ml_tutor.classification.knn import KNeighbourClassifier\n\nclf = KNeighbourClassifier(n_neighbors=5, visual_training=True, number_of_visual_steps=2)\nclf.fit(X_train, y_train)\n\npredictions = clf.predict(X_test)\n```\n\n![](images/knn.gif)\n\n### How an algorithm works? (theory)\n\nEvery algorithm has method `.how_it_works()` which generates a blog post directly inside your IDE.\nEvery blog is written by somebody from the community, not myself, and in the end, they get a shout out for the great material.\n```python\nfrom ml_tutor.classification.knn import KNeighbourClassifier\n\nclf = KNeighbourClassifier()\nclf.how_it_works()\n```\n\n![](images/th.gif)\n\n#### What if I prefer video instead of reading tutorial?\n\nI've got you covered! Just place `video=True` inside the method `how_it_works()`, and it will open a YouTube video for you.\n\n```python\nfrom ml_tutor.classification.knn import KNeighbourClassifier\n\nclf = KNeighbourClassifier()\nclf.how_it_works(video=True)\n```\n\n![](images/thv.gif)\n\n\n### Interview questions\n\nIf you call `.interview_questions()` on any algorithm, it will generate resources with interview questions for the algorithm.\n\n```python\nfrom ml_tutor.classification.knn import KNeighbourClassifier\n\nclf = KNeighbourClassifier()\nclf.interview_questions()\n```\n\n![](images/inter-q.png)\n\n### Sklearn code\n\nSince this is the library for education and not for production, you'll need to learn how to use these algorithms with the battle-tested library `sklearn`. Just call `.sklearn_version()` on any algorithm, and it will generate code for you!\n\nNOTE: For now, this method only works in Jupyter Notebook!\n\n```python\nfrom ml_tutor.classification.knn import KNeighbourClassifier\n\nclf = KNeighbourClassifier()\nclf.sklearn_version()\n```\n\n![](images/sklearn.gif)\n\n## Supported IDEs\n\nFor now this library is fully supported for `Jupyter Notebook` and partially supported for `Google Colab` \n(read `Sklearn code` section for more details). \n\n## Installation\n\n### Installation with `pip`\n\nYou can install ML Tutor directly from the PyPi repository using `pip` (or `pip3`): \n\n```bash\npip install ml-tutor\n```\n\n### Manual installation\n\nIf you prefer to install it from source:\n\n1. Clone this repository\n\n```bash\ngit clone https://github.com/lucko515/ml-tutor\n```\n\n2. Go to the library folder and run\n\n```bash\npip install .\n```\n\n## TODO\n\nIf you want to contribute to the ML Tutor, here is what's on the TODO list:\n\n- [ ] `.sklearn_version()` is not working in Google Colab\n- [ ] Logistic Regression visualization needs a re-do, currently it's not showing how the classification lines moves over time\n- [ ] Interview questions should be added to each algorithm (take the `knn.py` as a reference)\n- [ ] Visualization export to `.gif` and/or `.mp4`\n- [ ] Additional algorithms (e.g. NaiveBayes)\n- [ ] Support for other IDEs (e.g. regular Python Shell)\n\n## Contact\n\nAdd me on [LinkedIn](https://www.linkedin.com/in/luka-anicin/).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lucko515/ml_tutor",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ml-tutor",
    "package_url": "https://pypi.org/project/ml-tutor/",
    "platform": "",
    "project_url": "https://pypi.org/project/ml-tutor/",
    "project_urls": {
      "Homepage": "https://github.com/lucko515/ml_tutor"
    },
    "release_url": "https://pypi.org/project/ml-tutor/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "ML Tutor : Learn Machine Learning while never leaving the conform of your Python IDE (Jupyter Notebook or Google Colab)",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8317228,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6fd03e6b7d6c181f398886d07214a4e5a5adbf0491c3087cb0c2fefe5045bc4",
        "md5": "d169290468ab9725183e78327b96a659",
        "sha256": "c8ec31dc8d86f05702742037f7d4634a3d5af30c4972f3e03b8635c8860acb22"
      },
      "downloads": -1,
      "filename": "ml_tutor-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d169290468ab9725183e78327b96a659",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 25622,
      "upload_time": "2020-09-29T22:10:16",
      "upload_time_iso_8601": "2020-09-29T22:10:16.515608Z",
      "url": "https://files.pythonhosted.org/packages/a6/fd/03e6b7d6c181f398886d07214a4e5a5adbf0491c3087cb0c2fefe5045bc4/ml_tutor-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}