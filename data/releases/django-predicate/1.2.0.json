{
  "info": {
    "author": "Preston Holmes",
    "author_email": "preston@ptone.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": "django-predicate\n================\n\ndjango-predicate provides a Q like object to facilitate the question: \"would\nthis model instance be part of a query\" but without running the query or even\nsaving the object.\n\nQuickstart\n----------\n\nInstall django-predicate:\n\n.. code-block:: console\n\n    pip install django-predicate\n\nThen use the ``P`` object just as you would ``Q`` objects:\n\n.. code-block:: python\n\n    from predicate import P\n\n    p = P(some_field__startswith=\"hello\", age__gt=20)\n\nYou can then call the ``eval`` method with a model instance to check whether it\npasses the conditions:\n\n.. code-block:: python\n\n    model_instance = MyModel(some_field=\"hello there\", age=21)\n    other_model_instance = MyModel(some_field=\"hello there\", age=10)\n    p.eval(model_instance)\n    >>> True\n    p.eval(other_model_instance)\n    >>> False\n\nor you can use Python's ``in`` operator.\n\n.. code-block:: python\n\n    model_instance in p\n    >>> True\n\nEven though a predicate is not a true container class - it can be used as (and\nwas designed as being) a virtual \"set\" of objects that meets some condiiton.\n\nLike Q objects, P objects can be ``&``'ed  and ``|``'ed together to form more\ncomplex logic groupings.\n\nIn fact, P objects are actually a subclass of Q objects, so you can use them in\nqueryset filter statements:\n\n.. code-block:: python\n\n    qs = MyModel.objects.filter(p)\n\n\nP objects also support ``QuerySet``-like filtering operations that can be\napplied to an arbitrary iterable: ``P.get(iterable)``, ``P.filter(iterable)``,\nand ``P.exclude(iterable)``:\n\n.. code-block:: python\n\n    model_instance = MyModel(some_field=\"hello there\", age=21)\n    other_model_instance = MyModel(some_field=\"hello there\", age=10)\n    p.filter([model_instance, other_model_instance]) == [model_instance]\n    >>> True\n    p.filter([model_instance, other_model_instance]) == model_instance\n    >>> True\n    p.filter([model_instance, other_model_instance]) == other_model_instance\n    >>> True\n\n\nIf you have a situation where you want to use querysets and predicates based on\nthe same conditions, it is far better to start with the predicate. Because of\nthe way querysets assume a SQL context, it is non-trivial to reverse engineer\nthem back into a predicate. However as seen above, it is very straightforward\nto create a queryset based on a predicate.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ptone/django-predicate",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-predicate",
    "package_url": "https://pypi.org/project/django-predicate/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-predicate/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/ptone/django-predicate"
    },
    "release_url": "https://pypi.org/project/django-predicate/1.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A predicate class constructed like Django Q objects, used to test whether a new or modified model would match a query",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2055593,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f4577fbc6c267501dcf66de83cba1ec65b8162846c09dd81ce5d4d46a9a5a15",
        "md5": "5bb96ea3a44e4793eb1c15f98e3ebfe5",
        "sha256": "dc4d6281ec6956945c62076455dced01bb95f70ded23332d63eedacba9645a1b"
      },
      "downloads": -1,
      "filename": "django-predicate-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5bb96ea3a44e4793eb1c15f98e3ebfe5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14994,
      "upload_time": "2016-02-06T07:33:37",
      "upload_time_iso_8601": "2016-02-06T07:33:37.605797Z",
      "url": "https://files.pythonhosted.org/packages/2f/45/77fbc6c267501dcf66de83cba1ec65b8162846c09dd81ce5d4d46a9a5a15/django-predicate-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}