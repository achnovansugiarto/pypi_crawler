{
  "info": {
    "author": "Simon Charette",
    "author_email": "simon.charette@zapier.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-seal\n===========\n\n.. image:: https://publicdomainvectors.org/photos/Seal2.png\n    :target: https://publicdomainvectors.org\n    :alt: Seal\n\n------------\n\n.. image:: https://github.com/charettes/django-seal/workflows/Test/badge.svg\n    :target: https://github.com/charettes/django-seal/actions\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/charettes/django-seal/badge.svg?branch=master\n    :target: https://coveralls.io/github/charettes/django-seal?branch=master\n    :alt: Coverage status\n\n\nDjango application providing queryset sealing capability to force appropriate usage of ``only()``/``defer()`` and\n``select_related()``/``prefetch_related()``.\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install django-seal\n\nUsage\n-----\n\n.. code:: python\n\n    # models.py\n    from django.db import models\n    from seal.models import SealableModel\n\n    class Location(SealableModel):\n        latitude = models.FloatField()\n        longitude = models.FloatField()\n\n    class SeaLion(SealableModel):\n        height = models.PositiveIntegerField()\n        weight = models.PositiveIntegerField()\n        location = models.ForeignKey(Location, models.CASCADE, null=True)\n        previous_locations = models.ManyToManyField(Location, related_name='previous_visitors')\n\nBy default ``UnsealedAttributeAccess`` warnings will be raised on sealed objects attributes accesses\n\n.. code:: python\n\n    >>> location = Location.objects.create(latitude=51.585474, longitude=156.634331)\n    >>> sealion = SeaLion.objects.create(height=1, weight=100, location=location)\n    >>> sealion.previous_locations.add(location)\n    >>> SeaLion.objects.only('height').seal().get().weight\n    UnsealedAttributeAccess:: Attempt to fetch deferred field \"weight\" on sealed <SeaLion instance>.\n    >>> SeaLion.objects.seal().get().location\n    UnsealedAttributeAccess: Attempt to fetch related field \"location\" on sealed <SeaLion instance>.\n    >>> SeaLion.objects.seal().get().previous_locations.all()\n    UnsealedAttributeAccess: Attempt to fetch many-to-many field \"previous_locations\" on sealed <SeaLion instance>.\n\nYou can `elevate the warnings to exceptions by filtering them`_. This is useful to assert no unsealed attribute accesses are\nperformed when running your test suite for example.\n\n.. code:: python\n\n    >>> import warnings\n    >>> from seal.exceptions import UnsealedAttributeAccess\n    >>> warnings.filterwarnings('error', category=UnsealedAttributeAccess)\n    >>> SeaLion.objects.only('height').seal().get().weight\n    Traceback (most recent call last)\n    ...\n    UnsealedAttributeAccess:: Attempt to fetch deferred field \"weight\" on sealed <SeaLion instance>.\n    >>> SeaLion.objects.seal().get().location\n    Traceback (most recent call last)\n    ...\n    UnsealedAttributeAccess: Attempt to fetch related field \"location\" on sealed <SeaLion instance>.\n    >>> SeaLion.objects.seal().get().previous_locations.all()\n    Traceback (most recent call last)\n    ...\n    UnsealedAttributeAccess: Attempt to fetch many-to-many field \"previous_locations\" on sealed <SeaLion instance>.\n\nOr you can `configure logging to capture warnings`_ to log unsealed attribute accesses to the ``py.warnings`` logger which is a\nnice way to identify and address unsealed attributes accesses from production logs without taking your application down if some\ninstances happen to slip through your battery of tests.\n\n.. code:: python\n\n    >>> import logging\n    >>> logging.captureWarnings()\n\n.. _elevate the warnings to exceptions by filtering them: https://docs.python.org/3/library/warnings.html#warnings.filterwarnings\n.. _configure logging to capture warnings: https://docs.python.org/3/library/logging.html#logging.captureWarnings\n\nDevelopment\n-----------\n\nMake your changes, and then run tests via tox:\n\n.. code:: sh\n\n    tox\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/charettes/django-seal",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-seal",
    "package_url": "https://pypi.org/project/django-seal/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-seal/",
    "project_urls": {
      "Homepage": "https://github.com/charettes/django-seal"
    },
    "release_url": "https://pypi.org/project/django-seal/1.4.0/",
    "requires_dist": [
      "Django (>=2.2)"
    ],
    "requires_python": "",
    "summary": "Allows ORM constructs to be sealed to prevent them from executing queries on attribute accesses.",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16938080,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be3b0c9661ed7ec26d89ae3cf7ef200c83a58de72a2bccf0c4b0631edc4a9436",
        "md5": "bba38a47a20cb48b9e7f95c68009c834",
        "sha256": "3746bf938d334de7eac5a388a7cc1c40c3448f71478016e062e1739dc31605e6"
      },
      "downloads": -1,
      "filename": "django_seal-1.4.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bba38a47a20cb48b9e7f95c68009c834",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8390,
      "upload_time": "2021-01-27T02:32:14",
      "upload_time_iso_8601": "2021-01-27T02:32:14.417830Z",
      "url": "https://files.pythonhosted.org/packages/be/3b/0c9661ed7ec26d89ae3cf7ef200c83a58de72a2bccf0c4b0631edc4a9436/django_seal-1.4.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a831dcf763653cc487303ec4c4f94d9e9f8cd4be9bb47836b8b9e4ad3cf02c16",
        "md5": "70f3c77fe6e7471f06701002aa14a27d",
        "sha256": "919df41bb087f1abd7a6236b8ac0712919c66cde0b0fd04857c64e3f6cd948c0"
      },
      "downloads": -1,
      "filename": "django-seal-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "70f3c77fe6e7471f06701002aa14a27d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6826,
      "upload_time": "2021-01-27T02:32:15",
      "upload_time_iso_8601": "2021-01-27T02:32:15.589260Z",
      "url": "https://files.pythonhosted.org/packages/a8/31/dcf763653cc487303ec4c4f94d9e9f8cd4be9bb47836b8b9e4ad3cf02c16/django-seal-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}