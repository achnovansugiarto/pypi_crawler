{
  "info": {
    "author": "666DZY666",
    "author_email": "dzy_pku@pku.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# micronet\n\n*\"目前在深度学习领域分类两个派别，一派为学院派，研究强大、复杂的模型网络和实验方法，为了追求更高的性能；另一派为工程派，旨在将算法更稳定、高效的落地在硬件平台上，效率是其追求的目标。复杂的模型固然具有更好的性能，但是高额的存储空间、计算资源消耗是使其难以有效的应用在各硬件平台上的重要原因。所以，深度神经网络日益增长的规模为深度学习在移动端的部署带来了巨大的挑战，深度学习模型压缩与部署成为了学术界和工业界都重点关注的研究领域之一\"*\n\n## 项目简介\n\n[![PyPI](https://img.shields.io/pypi/v/micronet)](https://pypi.org/project/micronet) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/micronet)\n\n*micronet, a model compression and deploy lib.*\n\n### 压缩\n\n- 量化：High-Bit(>2b): QAT, PTQ, QAFT; Low-Bit(≤2b)/Ternary and Binary: QAT\n- 剪枝：正常、规整和分组卷积结构剪枝\n- 针对特征(A)二值量化的BN融合(训练量化后，BN参数 —> conv的偏置b)\n- High-Bit量化的BN融合(训练量化中，先融合再量化，融合：BN参数 —> conv的权重w和偏置b)\n\n### 部署\n\n- TensorRT(fp32/fp16/int8(ptq-calibration)、op-adapt(upsample)、dynamic_shape等)\n\n\n## 代码结构\n\n![code_structure](https://github.com/666DZY666/micronet/blob/master/micronet/readme_imgs/code_structure.jpg)\n\n```\nmicronet\n├── __init__.py\n├── compression\n│   ├── README.md\n│   ├── __init__.py\n│   ├── pruning\n│   │   ├── README.md\n│   │   ├── __init__.py\n│   │   ├── gc_prune.py\n│   │   ├── main.py\n│   │   ├── models_save\n│   │   │   └── models_save.txt\n│   │   └── normal_regular_prune.py\n│   └── quantization\n│       ├── README.md\n│       ├── __init__.py\n│       ├── wbwtab\n│       │   ├── __init__.py\n│       │   ├── bn_fuse\n│       │   │   ├── bn_fuse.py\n│       │   │   ├── bn_fused_model_test.py\n│       │   │   └── models_save\n│       │   │       └── models_save.txt\n│       │   ├── main.py\n│       │   ├── models_save\n│       │   │   └── models_save.txt\n│       │   └── quantize.py\n│       └── wqaq\n│           ├── __init__.py\n│           ├── dorefa\n│           │   ├── __init__.py\n│           │   ├── main.py\n│           │   ├── models_save\n│           │   │   └── models_save.txt\n│           │   ├── quant_model_test\n│           │   │   ├── models_save\n│           │   │   │   └── models_save.txt\n│           │   │   ├── quant_model_para.py\n│           │   │   └── quant_model_test.py\n│           │   └── quantize.py\n│           └── iao\n│               ├── __init__.py\n│               ├── bn_fuse\n│               │   ├── bn_fuse.py\n│               │   ├── bn_fused_model_test.py\n│               │   └── models_save\n│               │       └── models_save.txt\n│               ├── main.py\n│               ├── models_save\n│               │   └── models_save.txt\n│               └── quantize.py\n├── data\n│   └── data.txt\n├── deploy\n│   ├── README.md\n│   ├── __init__.py\n│   └── tensorrt\n│       ├── README.md\n│       ├── __init__.py\n│       ├── calibrator.py\n│       ├── eval_trt.py\n│       ├── models\n│       │   ├── __init__.py\n│       │   └── models_trt.py\n│       ├── models_save\n│       │   └── calibration_seg.cache\n│       ├── test_trt.py\n│       └── util_trt.py\n├── models\n│   ├── __init__.py\n│   ├── nin.py\n│   └── nin_gc.py\n└── readme_imgs\n    ├── code_structure.jpg\n    └── micronet.xmind\n```\n\n\n## 项目进展\n- **2019.12.4**, 初次提交\n- **12.8**, DoReFa特征(A)量化前先进行缩放(* 0.1)，然后再截断，以减小截断误差\n- **12.11**, 增加项目代码结构图\n- 12.12, 完善使用示例\n- 12.14, 增加:1、BN融合量化情况(W三值/二值)可选，即训练量化时选择W三/二值，这里则对应选择; 2、BN融合时对卷积核(conv)不带偏置(bias)的处理\n- **12.17**, 增加模型压缩前后数据对比(示例)\n- 12.20, 增加设备可选(cpu、gpu(单卡、多卡))\n- **12.27**, 补充相关论文\n- 12.29, 取消High-Bit量化8-bit以内的限制，即现在可以量化至10-bit、16-bit等\n- **2020.2.17**, 1、精简W三值/二值量化代码; 2、加速W三值量化训练\n- **2.18**, 优化针对特征(A)二值的BN融合:去除对BN层gamma参数的限制，即现在此情况下融合时BN可正常训练\n- **2.24**, 再次优化三/二值量化代码组织结构，增强可移植性，旧版确实不太好移植。目前移植方法：将想要量化的Conv用compression/quantization/wbwtab/models/util_wbwtab.py中的QuantConv2d替换即可，可参照该路径下nin_gc.py中的使用方法\n- **3.1**, 新增：1、google的High-Bit量化方法; 2、训练中High-Bit量化的BN融合\n- **3.2、3.3**, 规整量化代码整体结构，目前所有量化方法都可采取类似的移植方式：将想要量化的Conv(或FC，目前dorefa支持，其他方法类似可写)用models/util_wxax.py中的QuantConv2d(或QuantLinear)替换即可，可分别参照该路径下nin_gc.py中的使用方法进行移植（分类、检测、分割等均适用，但需要据实际情况具体调试）\n- **3.4**, 规整优化wbwtab/bn_fuse中“针对特征(A)二值的BN融合”的相关实现代码，可进行BN融合及融合前后模型对比测试(精度/速度/(大小))\n- 3.11, 调整compression/wqaq/iao中的BN层momentum参数(0.1 —> 0.01),削弱batch统计参数占比,一定程度抑制量化带来的抖动。经实验,量化训练更稳定,acc提升1%左右\n- **3.13**, 更新代码结构图\n- 4.6, 修正二值量化训练中W_clip的相关问题(之前由于这个，导致二值量化训练精度上不去，现在已可正常使用)(同时修正无法找到一些模块如models/util_wxax.py的问题)\n- **12.14**, 1、improve code structure; 2、add deploy-tensorrt(main module, but not running yet)\n- 12.18, 1、improve code structure/module reference/module_name; 2、add transfer-use demo\n- **12.21**, improve pruning-quantization pipeline and code\n- **2021.1.4**, add other quant_op\n- 1.5, add quant_weight's per-channel and per-layer selection\n- **1.7**, fix iao's loss-nan bug. The bug is due to per-channel min/max error\n- 1.8, 1、improve quant_para save. Now, only save scale and zero_point; 2、add optional weight_observer(MinMaxObserver or MovingAverageMinMaxObserver)\n- **1.11**, fix bug in binary_a(1/0) and binary_w preprocessing\n- **1.12**, add \"pip install\"\n- **1.22**, add auto_insert_quant_op(this still needs to be improved)\n- **1.27**, improve auto_insert_quant_op(now you can easily use quantization, as [quant_test_auto](#quant_test_auto.py))\n- 1.28, 1、fix prune-quantization pipeline and code; 2、improve code structure\n- **2.1**, improve wbwtab_bn_fuse\n- **2.4**, 1、add wqaq_bn_fuse; 2、add quant_model_inference_simulation; 3、improve code format\n- 4.30, 1、update code_structure img; 2、fix iao's quant_weight_range, quant_contrans and quant_bn_fuse_conv pretrained_model bn_para load bug\n- **5.4**, add **qaft**, it's beneficial to improve the quantization accuracy\n- **5.6**, add **ptq**, its quantization accuracy is also good\n- 5.11, add bn_fuse_calib flag\n- **5.14**, 1、change **ste** to **clip_ste**, it's beneficial to improve the quant_train；2、remove quant_relu and add quant_leaky_relu\n- 5.15, fix bug in quant_model_para post-processing\n- **6.7**, add quant_add(need use base_module's op) and quant_resnet demo\n\n\n## 环境要求\n\n- python >= 3.5\n- torch >= 1.1.0\n- torchvison >= 0.3.0\n- numpy\n- onnx == 1.6.0\n- tensorrt == 7.0.0.11\n\n\n## 安装\n\n[PyPI](https://pypi.org/project/micronet/)\n\n```bash\npip install micronet -i https://pypi.org/simple\n```\n\n[GitHub](https://github.com/666DZY666/micronet)\n\n```bash\ngit clone https://github.com/666DZY666/micronet.git\ncd micronet\npython setup.py install\n```\n\n*验证*\n\n```bash\npython -c \"import micronet; print(micronet.__version__)\"\n```\n\n## 测试\n\n*Install from github*\n\n### 压缩\n\n#### 量化\n\n*--refine,可加载预训练浮点模型参数,在其基础上做量化*\n\n##### wbwtab\n\n--W --A, 权重W和特征A量化取值\n\n```bash\ncd micronet/compression/quantization/wbwtab\n```\n\n- WbAb\n\n```bash\npython main.py --W 2 --A 2\n```\n\n- WbA32\n\n```bash\npython main.py --W 2 --A 32\n```\n\n- WtAb\n\n```bash\npython main.py --W 3 --A 2\n```\n\n- WtA32\n\n```bash\npython main.py --W 3 --A 32\n```\n\n##### wqaq\n\n--w_bits --a_bits, 权重W和特征A量化位数\n\n###### dorefa\n\n```bash\ncd micronet/compression/quantization/wqaq/dorefa\n```\n\n- W16A16\n\n```bash\npython main.py --w_bits 16 --a_bits 16\n```\n\n- W8A8\n\n```bash\npython main.py --w_bits 8 --a_bits 8\n```\n\n- W4A4\n\n```bash\npython main.py --w_bits 4 --a_bits 4\n```\n\n- 其他bits情况类比\n\n###### iao\n\n```bash\ncd micronet/compression/quantization/wqaq/iao\n```\n\n*量化位数选择同dorefa*\n\n*单卡*\n\n**QAT/PTQ  —>  QAFT**\n\n**! 注意，需要在QAT/PTQ之后再做QAFT !**\n\n--q_type, 量化类型(0-对称, 1-非对称)\n\n--q_level, 权重量化级别(0-通道级, 1-层级)\n\n--weight_observer, weight_observer选择(0-MinMaxObserver, 1-MovingAverageMinMaxObserver)\n\n--bn_fuse, 量化中bn融合标志\n\n--bn_fuse_calib, 量化中bn融合校准标志\n\n--pretrained_model, 预训练浮点模型\n\n--qaft, qaft标志\n\n--ptq, ptq_observer\n\n--ptq_control, ptq_control\n\n--ptq_batch, ptq的batch数量\n\n--percentile, ptq校准的比例\n\n**QAT**\n\n- 默认: 对称、(权重)通道级量化, bn不融合, weight_observer-MinMaxObserver, 不加载预训练浮点模型, 进行qat\n\n```bash\npython main.py --q_type 0 --q_level 0 --weight_observer 0 --gpu_id 0\n```\n\n- 对称、(权重)通道级量化, bn不融合, weight_observer-MovingAverageMinMaxObserver\n\n```bash\npython main.py --q_type 0 --q_level 0 --weight_observer 1 --gpu_id 0\n```\n\n- 对称、(权重)层级量化, bn不融合\n\n```bash\npython main.py --q_type 0 --q_level 1 --gpu_id 0\n```\n\n- 非对称、(权重)通道级量化, bn不融合\n\n```bash\npython main.py --q_type 1 --q_level 0 --gpu_id 0\n```\n\n- 非对称、(权重)层级量化, bn不融合\n\n```bash\npython main.py --q_type 1 --q_level 1 --gpu_id 0\n```\n\n- 对称、(权重)通道级量化, bn融合\n\n```bash\npython main.py --q_type 0 --q_level 0 --bn_fuse --gpu_id 0\n```\n\n- 对称、(权重)层级量化, bn融合\n\n```bash\npython main.py --q_type 0 --q_level 1 --bn_fuse --gpu_id 0\n```\n\n- 非对称、(权重)通道级量化, bn融合\n\n```bash\npython main.py --q_type 1 --q_level 0 --bn_fuse --gpu_id 0\n```\n\n- 非对称、(权重)层级量化, bn融合\n\n```bash\npython main.py --q_type 1 --q_level 1 --bn_fuse --gpu_id 0\n```\n\n- 对称、(权重)通道级量化, bn融合校准\n\n```bash\npython main.py --q_type 0 --q_level 0 --bn_fuse --bn_fuse_calib --gpu_id 0\n```\n\n**PTQ**\n\n*需要加载预训练浮点模型,本项目中其可由剪枝中采用正常训练获取*\n\n- 对称、(权重)通道级量化, bn融合\n\n```bash\npython main.py --refine ../../../pruning/models_save/nin_gc.pth --q_level 0 --bn_fuse --gpu_id 0 --pretrained_model --ptq_control --ptq --batch_size 32 --ptq_batch 200 --percentile 0.999999\n```\n\n- 其他情况类比\n\n**QAFT**\n\n**! 注意，需要在QAT/PTQ之后再做QAFT !**\n\n**QAT  —>  QAFT**\n\n- 对称、(权重)通道级量化, bn融合\n\n```bash\npython main.py --resume models_save/nin_gc_bn_fused.pth --q_type 0 --q_level 0 --bn_fuse --gpu_id 0 --qaft --lr 0.00001\n```\n\n- 其他情况类比\n\n**PTQ  —>  QAFT**\n\n- 对称、(权重)通道级量化, bn融合\n\n```bash\npython main.py --resume models_save/nin_gc_bn_fused.pth --q_level 0 --bn_fuse --gpu_id 0 --qaft --lr 0.00001 --ptq\n```\n\n- 其他情况类比\n\n#### 剪枝\n\n*稀疏训练  —>  剪枝  —>  微调*\n\n```bash\ncd micronet/compression/pruning\n```\n\n##### 稀疏训练\n\n-sr 稀疏标志\n\n--s 稀疏率(需根据dataset、model情况具体调整)\n\n--model_type 模型类型(0-nin, 1-nin_gc)\n\n- nin(正常卷积结构)\n\n```bash\npython main.py -sr --s 0.0001 --model_type 0\n```\n\n- nin_gc(含分组卷积结构)\n\n```bash\npython main.py -sr --s 0.001 --model_type 1\n```\n\n##### 剪枝\n\n--percent 剪枝率\n\n--normal_regular 正常、规整剪枝标志及规整剪枝基数(如设置为N,则剪枝后模型每层filter个数即为N的倍数)\n\n--model 稀疏训练后的model路径\n\n--save 剪枝后保存的model路径（路径默认已给出, 可据实际情况更改）\n\n- 正常剪枝(nin)\n\n```bash\npython normal_regular_prune.py --percent 0.5 --model models_save/nin_sparse.pth --save models_save/nin_prune.pth\n```\n\n- 规整剪枝(nin)\n\n```bash\npython normal_regular_prune.py --percent 0.5 --normal_regular 8 --model models_save/nin_sparse.pth --save models_save/nin_prune.pth\n```\n\n或\n\n```bash\npython normal_regular_prune.py --percent 0.5 --normal_regular 16 --model models_save/nin_sparse.pth --save models_save/nin_prune.pth\n```\n\n- 分组卷积结构剪枝(nin_gc)\n\n```bash\npython gc_prune.py --percent 0.4 --model models_save/nin_gc_sparse.pth\n```\n\n##### 微调\n\n--prune_refine 剪枝后的model路径（在其基础上做微调）\n\n- nin\n\n```bash\npython main.py --model_type 0 --prune_refine models_save/nin_prune.pth\n```\n\n- nin_gc\n\n*需要传入**剪枝**后得到的新模型的**cfg***\n\n*如*\n\n```bash\npython main.py --model_type 1 --gc_prune_refine 154 162 144 304 320 320 608 584\n```\n\n#### 剪枝 —> 量化（注意剪枝率和量化率平衡）\n\n*加载剪枝后的浮点模型再做量化*\n\n##### 剪枝 —> 量化（高位）（剪枝率偏大、量化率偏小）\n\n###### w8a8(dorefa)\n\n```bash\ncd micronet/compression/quantization/wqaq/dorefa\n```\n\n- nin(正常卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 0 --prune_quant ../../../pruning/models_save/nin_finetune.pth\n```\n\n- nin_gc(含分组卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 1 --prune_quant ../../../pruning/models_save/nin_gc_retrain.pth\n```\n\n###### w8a8(iao)\n\n```bash\ncd micronet/compression/quantization/wqaq/iao\n```\n\n**QAT/PTQ  —>  QAFT**\n\n**! 注意，需要在QAT/PTQ之后再做QAFT !**\n\n**QAT**\n\n*bn不融合*\n\n- nin(正常卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 0 --prune_quant ../../../pruning/models_save/nin_finetune.pth --gpu_id 0 --lr 0.001\n```\n\n- nin_gc(含分组卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 1 --prune_quant ../../../pruning/models_save/nin_gc_retrain.pth --gpu_id 0 --lr 0.001\n```\n\n*bn融合*\n\n- nin(正常卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 0 --prune_quant ../../../pruning/models_save/nin_finetune.pth --gpu_id 0 --bn_fuse --pretrained_model --lr 0.001\n```\n\n- nin_gc(含分组卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 1 --prune_quant ../../../pruning/models_save/nin_gc_retrain.pth --gpu_id 0 --bn_fuse --pretrained_model --lr 0.001\n```\n\n**PTQ**\n\n- nin(正常卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 0 --prune_quant ../../../pruning/models_save/nin_finetune.pth --gpu_id 0 --bn_fuse --pretrained_model --ptq_control --ptq --batch_size 32 --ptq_batch 200 --percentile 0.999999\n```\n\n- 其他情况类比\n\n**QAFT**\n\n**! 注意，需要在QAT/PTQ之后再做QAFT !**\n\n**QAT  —>  QAFT**\n\n*bn不融合*\n\n- nin(正常卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 0 --prune_qaft models_save/nin.pth --gpu_id 0 --qaft --lr 0.00001\n```\n\n- nin_gc(含分组卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 1 --prune_qaft models_save/nin_gc.pth --gpu_id 0 --qaft --lr 0.00001\n```\n\n*bn融合*\n\n- nin(正常卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 0 --prune_qaft models_save/nin_bn_fused.pth --gpu_id 0 --bn_fuse --qaft --lr 0.00001\n```\n\n- nin_gc(含分组卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 1 --prune_qaft models_save/nin_gc_bn_fused.pth --gpu_id 0 --bn_fuse --qaft --lr 0.00001\n```\n\n**PTQ  —>  QAFT**\n\n*bn不融合*\n\n- nin(正常卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 0 --prune_qaft models_save/nin.pth --gpu_id 0 --qaft --lr 0.00001 --ptq\n```\n\n- nin_gc(含分组卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 1 --prune_qaft models_save/nin_gc.pth --gpu_id 0 --qaft --lr 0.00001 --ptq\n```\n\n*bn融合*\n\n- nin(正常卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 0 --prune_qaft models_save/nin_bn_fused.pth --gpu_id 0 --bn_fuse --qaft --lr 0.00001 --ptq\n```\n\n- nin_gc(含分组卷积结构)\n\n```bash\npython main.py --w_bits 8 --a_bits 8 --model_type 1 --prune_qaft models_save/nin_gc_bn_fused.pth --gpu_id 0 --bn_fuse --qaft --lr 0.00001 --ptq\n```\n\n###### 其他可选量化配置类比\n\n##### 剪枝 —> 量化（低位）（剪枝率偏小、量化率偏大）\n\n```bash\ncd micronet/compression/quantization/wbwtab\n```\n\n###### wbab\n\n- nin(正常卷积结构)\n\n```bash\npython main.py --W 2 --A 2 --model_type 0 --prune_quant ../../pruning/models_save/nin_finetune.pth\n```\n\n- nin_gc(含分组卷积结构)\n\n```bash\npython main.py --W 2 --A 2 --model_type 1 --prune_quant ../../pruning/models_save/nin_gc_retrain.pth\n```\n\n###### 其他取值情况类比\n\n\n#### BN融合与量化推理仿真测试\n\n##### wbwtab\n\n```bash\ncd micronet/compression/quantization/wbwtab/bn_fuse\n```\n\n###### bn_fuse(得到quant_model_train和quant_bn_fused_model_inference的结构和参数)\n\n*--model_type, 1 - nin_gc(含分组卷积结构); 0 - nin(正常卷积结构)*\n\n*--prune_quant, 剪枝_量化模型标志*\n\n*--W, weight量化取值*\n\n*均需要与量化训练保持一致,可直接用默认*\n\n- nin_gc, quant_model, wb\n\n```bash\npython bn_fuse.py --model_type 1 --W 2 --gpu_id 0\n```\n\n- nin_gc, prune_quant_model, wb\n\n```bash\npython bn_fuse.py --model_type 1 --prune_quant --W 2 --gpu_id 0\n```\n\n- nin_gc, quant_model, wt\n\n```bash\npython bn_fuse.py --model_type 1 --W 3 --gpu_id 0\n```\n\n- nin, quant_model, wb\n\n```bash\npython bn_fuse.py --model_type 0 --W 2 --gpu_id 0\n```\n\n###### bn_fused_model_test(对quant_model_train和quant_bn_fused_model_inference进行测试)\n\n```bash\npython bn_fused_model_test.py --gpu_id 0\n```\n\n##### dorefa\n\n```bash\ncd micronet/compression/quantization/wqaq/dorefa/quant_model_test\n```\n\n###### quant_model_para(得到quant_model_train和quant_model_inference的结构和参数)\n\n*--model_type, 1 - nin_gc(含分组卷积结构); 0 - nin(正常卷积结构)*\n\n*--prune_quant, 剪枝_量化模型标志*\n\n*--w_bits, weight量化位数; --a_bits, activation量化位数*\n\n*均需要与量化训练保持一致,可直接用默认*\n\n- nin_gc, quant_model, w8a8\n\n```bash\npython quant_model_para.py --model_type 1 --w_bits 8 --a_bits 8 --gpu_id 0\n```\n\n- nin_gc, prune_quant_model, w8a8\n\n```bash\npython quant_model_para.py --model_type 1 --prune_quant --w_bits 8 --a_bits 8 --gpu_id 0\n```\n\n- nin, quant_model, w8a8\n\n```bash\npython quant_model_para.py --model_type 0 --w_bits 8 --a_bits 8 --gpu_id 0\n```\n\n###### quant_model_test(对quant_model_train和quant_model_inference进行测试)\n\n```bash\npython quant_model_test.py --gpu_id 0\n```\n\n##### iao\n\n***注意,量化训练时 --bn_fuse 需要设置为 True***\n```bash\ncd micronet/compression/quantization/wqaq/iao/bn_fuse\n```\n\n###### bn_fuse(得到quant_bn_fused_model_train和quant_bn_fused_model_inference的结构和参数)\n\n*--model_type, 1 - nin_gc(含分组卷积结构); 0 - nin(正常卷积结构)*\n\n*--prune_quant, 剪枝_量化模型标志*\n\n*--w_bits, weight量化位数; --a_bits, activation量化位数*\n\n*--q_type, 0 - 对称; 1 - 非对称*\n\n*--q_level, 0 - 通道级; 1 - 层级*\n\n*均需要与量化训练保持一致,可直接用默认*\n\n- nin_gc, quant_model, w8a8\n\n```bash\npython bn_fuse.py --model_type 1 --w_bits 8 --a_bits 8 --gpu_id 0\n```\n\n- nin_gc, prune_quant_model, w8a8\n\n```bash\npython bn_fuse.py --model_type 1 --prune_quant --w_bits 8 --a_bits 8 --gpu_id 0\n```\n\n- nin, quant_model, w8a8\n\n```bash\npython bn_fuse.py --model_type 0 --w_bits 8 --a_bits 8 --gpu_id 0\n```\n\n- nin_gc, quant_model, w8a8, 非对称, 层级\n\n```bash\npython bn_fuse.py --model_type 0 --w_bits 8 --a_bits 8 --q_type 1 --q_level 1 --gpu_id 0\n```\n\n###### bn_fused_model_test(对quant_bn_fused_model_train和quant_bn_fused_model_inference进行测试)\n\n```bash\npython bn_fused_model_test.py --gpu_id 0\n```\n\n#### 设备选取\n\n*现支持cpu、gpu(单卡、多卡)*\n\n--cpu 使用cpu，--gpu_id 使用并选择gpu\n\n- cpu\n\n```bash\npython main.py --cpu\n```\n\n- gpu单卡\n\n```bash\npython main.py --gpu_id 0\n```\n\n或\n\n```bash\npython main.py --gpu_id 1\n```\n\n- gpu多卡\n\n```bash\npython main.py --gpu_id 0,1\n```\n\n或\n\n```bash\npython main.py --gpu_id 0,1,2\n```\n\n*默认，使用服务器全卡*\n\n### 部署\n\n#### TensorRT\n\n*目前仅提供相关**核心模块**代码，后续再加入完整可运行demo*\n\n##### 相关解读\n- [tensorrt-基础](https://zhuanlan.zhihu.com/p/336256668)\n- [tensorrt-op/dynamic_shape](https://zhuanlan.zhihu.com/p/335829625)\n\n\n## 迁移\n\n### 量化训练\n\n#### LeNet example\n\n##### quant_test_manual.py\n\n*A model can be quantized(High-Bit(>2b)、Low-Bit(≤2b)/Ternary and Binary) by simply replacing ***op*** with ***quant_op***.*\n\n```python\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n# some base_op, such as ``Add``、``Concat``\nfrom micronet.base_module.op import *\n\n# ``quantize`` is quant_module, ``QuantConv2d``, ``QuantLinear``, ``QuantMaxPool2d``, ``QuantReLU`` are quant_op\nfrom micronet.compression.quantization.wbwtab.quantize import QuantConv2d as quant_conv_wbwtab\nfrom micronet.compression.quantization.wbwtab.quantize import ActivationQuantizer as quant_relu_wbwtab\nfrom micronet.compression.quantization.wqaq.dorefa.quantize import QuantConv2d as quant_conv_dorefa\nfrom micronet.compression.quantization.wqaq.dorefa.quantize import QuantLinear as quant_linear_dorefa\nfrom micronet.compression.quantization.wqaq.iao.quantize import QuantConv2d as quant_conv_iao\nfrom micronet.compression.quantization.wqaq.iao.quantize import QuantLinear as quant_linear_iao\nfrom micronet.compression.quantization.wqaq.iao.quantize import QuantMaxPool2d as quant_max_pool_iao\nfrom micronet.compression.quantization.wqaq.iao.quantize import QuantReLU as quant_relu_iao\n\n\nclass LeNet(nn.Module):\n    def __init__(self):\n        super(LeNet, self).__init__()\n        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)\n        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)\n        self.fc1 = nn.Linear(320, 50)\n        self.fc2 = nn.Linear(50, 10)\n        self.max_pool = nn.MaxPool2d(kernel_size=2)\n        self.relu = nn.ReLU(inplace=True)\n\n    def forward(self, x):\n        x = self.relu(self.max_pool(self.conv1(x)))\n        x = self.relu(self.max_pool(self.conv2(x)))\n        x = x.view(-1, 320)\n        x = self.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        x = self.fc2(x)\n        return F.log_softmax(x, dim=1)\n\nclass QuantLeNetWbWtAb(nn.Module):\n    def __init__(self):\n        super(QuantLeNetWbWtAb, self).__init__()\n        self.conv1 = quant_conv_wbwtab(1, 10, kernel_size=5)\n        self.conv2 = quant_conv_wbwtab(10, 20, kernel_size=5)\n        self.fc1 = nn.Linear(320, 50)\n        self.fc2 = nn.Linear(50, 10)\n        self.max_pool = nn.MaxPool2d(kernel_size=2)\n        self.relu = quant_relu_wbwtab()\n\n    def forward(self, x):\n        x = self.relu(self.max_pool(self.conv1(x)))\n        x = self.relu(self.max_pool(self.conv2(x)))\n        x = x.view(-1, 320)\n        x = self.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        x = self.fc2(x)\n        return F.log_softmax(x, dim=1)\n\nclass QuantLeNetDoReFa(nn.Module):\n    def __init__(self):\n        super(QuantLeNetDoReFa, self).__init__()\n        self.conv1 = quant_conv_dorefa(1, 10, kernel_size=5)\n        self.conv2 = quant_conv_dorefa(10, 20, kernel_size=5)\n        self.fc1 = quant_linear_dorefa(320, 50)\n        self.fc2 = quant_linear_dorefa(50, 10)\n        self.max_pool = nn.MaxPool2d(kernel_size=2)\n        self.relu = nn.ReLU(inplace=True)\n\n    def forward(self, x):\n        x = self.relu(self.max_pool(self.conv1(x)))\n        x = self.relu(self.max_pool(self.conv2(x)))\n        x = x.view(-1, 320)\n        x = self.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        x = self.fc2(x)\n        return F.log_softmax(x, dim=1)\n\nclass QuantLeNetIAO(nn.Module):\n    def __init__(self):\n        super(QuantLeNetIAO, self).__init__()\n        self.conv1 = quant_conv_iao(1, 10, kernel_size=5)\n        self.conv2 = quant_conv_iao(10, 20, kernel_size=5)\n        self.fc1 = quant_linear_iao(320, 50)\n        self.fc2 = quant_linear_iao(50, 10)\n        self.max_pool = quant_max_pool_iao(kernel_size=2)\n        self.relu = nn.ReLU(inplace=True)\n\n    def forward(self, x):\n        x = self.relu(self.max_pool(self.conv1(x)))\n        x = self.relu(self.max_pool(self.conv2(x)))\n        x = x.view(-1, 320)\n        x = self.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        x = self.fc2(x)\n        return F.log_softmax(x, dim=1)\n\nlenet = LeNet()\nquant_lenet_wbwtab = QuantLeNetWbWtAb()\nquant_lenet_dorefa = QuantLeNetDoReFa()\nquant_lenet_iao = QuantLeNetIAO()\n\nprint('***ori_model***\\n', lenet)\nprint('\\n***quant_model_wbwtab***\\n', quant_lenet_wbwtab)\nprint('\\n***quant_model_dorefa***\\n', quant_lenet_dorefa)\nprint('\\n***quant_model_iao***\\n', quant_lenet_iao)\n\nprint('\\nquant_model is ready')\nprint('micronet is ready')\n```\n\n##### quant_test_auto.py\n\n*A model can be quantized(High-Bit(>2b)、Low-Bit(≤2b)/Ternary and Binary) by simply using ***micronet.compression.quantization.quantize.prepare(model)***.*\n\n```python\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n# some base_op, such as ``Add``、``Concat``\nfrom micronet.base_module.op import *\n\nimport micronet.compression.quantization.wqaq.dorefa.quantize as quant_dorefa\nimport micronet.compression.quantization.wqaq.iao.quantize as quant_iao\n\n\nclass LeNet(nn.Module):\n    def __init__(self):\n        super(LeNet, self).__init__()\n        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)\n        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)\n        self.fc1 = nn.Linear(320, 50)\n        self.fc2 = nn.Linear(50, 10)\n        self.max_pool = nn.MaxPool2d(kernel_size=2)\n        self.relu = nn.ReLU(inplace=True)\n\n    def forward(self, x):\n        x = self.relu(self.max_pool(self.conv1(x)))\n        x = self.relu(self.max_pool(self.conv2(x)))\n        x = x.view(-1, 320)\n        x = self.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        x = self.fc2(x)\n        return F.log_softmax(x, dim=1)\n\n'''\n--w_bits --a_bits, 权重W和特征A量化位数\n--q_type, 量化类型(0-对称, 1-非对称)\n--q_level, 权重量化级别(0-通道级, 1-层级)\n--weight_observer, weight_observer选择(0-MinMaxObserver, 1-MovingAverageMinMaxObserver)\n--bn_fuse, 量化中bn融合标志\n--bn_fuse_calib, 量化中bn融合校准标志\n--pretrained_model, 预训练浮点模型\n--qaft, qaft标志\n--ptq, ptq标志\n--percentile, ptq校准的比例\n'''\nlenet = LeNet()\nquant_lenet_dorefa = quant_dorefa.prepare(lenet, inplace=False, a_bits=8, w_bits=8)\nquant_lenet_iao = quant_iao.prepare(lenet, inplace=False, a_bits=8,\n                                    w_bits=8, q_type=0,\n                                    q_level=0, device='cpu',\n                                    weight_observer=0,\n                                    bn_fuse=False,\n                                    bn_fuse_calib=False,\n                                    pretrained_model=False,\n                                    qaft=False,\n                                    ptq=False,\n                                    percentile=0.9999)\n\n# if ptq == False, do qat/qaft, need train\n# if ptq == True, do ptq, don't need train\n# you can refer to micronet/compression/quantization/wqaq/iao/main.py\n\nprint('***ori_model***\\n', lenet)\nprint('\\n***quant_model_dorefa***\\n', quant_lenet_dorefa)\nprint('\\n***quant_model_iao***\\n', quant_lenet_iao)\n\nprint('\\nquant_model is ready')\nprint('micronet is ready')\n```\n\n#### test\n\n##### quant_test_manual\n\n```bash\npython -c \"import micronet; micronet.quant_test_manual()\"\n```\n\n##### quant_test_auto\n\n```bash\npython -c \"import micronet; micronet.quant_test_auto()\"\n```\n\n*when outputting \"quant_model is ready\", micronet is ready.*\n\n### 量化推理\n\n***参考[BN融合与量化推理仿真测试](#bn融合与量化推理仿真测试)***\n\n## 模型压缩数据对比（仅供参考）\n\n*以下为cifar10示例，可在更冗余模型、更大数据集上尝试其他组合压缩方式*\n\n|类型|W(Bits)|A(Bits)|Acc|GFLOPs|Para(M)|Size(MB)|压缩率|损失|\n|:-:|:-----:|:-----:|:--:|:---:|:-----:|:------:|:---:|:-:|\n|原模型(nin)|FP32|FP32|91.01%|0.15|0.67|2.68|***|***|\n|采用分组卷积结构(nin_gc)|FP32|FP32|91.04%|0.15|0.58|2.32|13.43%|-0.03%|\n|剪枝|FP32|FP32|90.26%|0.09|0.32|1.28|52.24%|0.75%|\n|量化|1|FP32|90.93%|***|0.58|0.204|92.39%|0.08%|\n|量化|1.5|FP32|91%|***|0.58|0.272|89.85%|0.01%|\n|量化|1|1|86.23%|***|0.58|0.204|92.39%|4.78%|\n|量化|1.5|1|86.48%|***|0.58|0.272|89.85%|4.53%|\n|量化(DoReFa)|8|8|91.03%|***|0.58|0.596|77.76%|-0.02%|\n|量化(IAO,全量化,symmetric/per-channel/bn_fuse)|8|8|90.99%|***|0.58|0.596|77.76%|0.02%|\n|分组+剪枝+量化|1.5|1|86.13%|***|0.32|0.19|92.91%|4.88%|\n\n*--train_batch_size 256, 单卡*\n\n## 相关资料\n\n### 压缩\n\n#### 量化\n\n##### QAT\n\n###### 二值\n\n- [BinarizedNeuralNetworks: TrainingNeuralNetworkswithWeightsand ActivationsConstrainedto +1 or−1](https://arxiv.org/abs/1602.02830)\n\n- [XNOR-Net:ImageNetClassiﬁcationUsingBinary ConvolutionalNeuralNetworks](https://arxiv.org/abs/1603.05279)\n\n- [AN EMPIRICAL STUDY OF BINARY NEURAL NETWORKS’ OPTIMISATION](https://openreview.net/forum?id=rJfUCoR5KX)\n\n- [A Review of Binarized Neural Networks](https://www.semanticscholar.org/paper/A-Review-of-Binarized-Neural-Networks-Simons-Lee/0332fdf00d7ff988c5b66c47afd49431eafa6cd1)\n\n###### 三值\n\n- [Ternary weight networks](https://arxiv.org/abs/1605.04711)\n\n###### High-Bit\n\n- [DoReFa-Net: Training Low Bitwidth Convolutional Neural Networks with Low Bitwidth Gradients](https://arxiv.org/abs/1606.06160)\n- [Quantization and Training of Neural Networks for Efficient Integer-Arithmetic-Only Inference](https://arxiv.org/abs/1712.05877)\n- [Quantizing deep convolutional networks for efficient inference: A whitepaper](https://arxiv.org/abs/1806.08342)\n\n##### PTQ\n\n###### High-Bit\n\n- [tensorrt-ptq-8-bit](https://on-demand.gputechconf.com/gtc/2017/presentation/s7310-8-bit-inference-with-tensorrt.pdf)\n\n#### 剪枝\n\n- [Learning Efficient Convolutional Networks through Network Slimming](https://arxiv.org/abs/1708.06519)\n- [RETHINKING THE VALUE OF NETWORK PRUNING](https://arxiv.org/abs/1810.05270)\n\n#### 适配专用芯片的模型压缩\n\n- [Convolutional Networks for Fast, Energy-Efficient Neuromorphic Computing](https://arxiv.org/abs/1603.08270)\n\n### 部署\n\n#### TensorRT\n\n- [github](https://github.com/NVIDIA/TensorRT)\n- [ptq](https://on-demand.gputechconf.com/gtc/2017/presentation/s7310-8-bit-inference-with-tensorrt.pdf)\n- [tensorrt-基础](https://zhuanlan.zhihu.com/p/336256668)\n- [tensorrt-op/dynamic_shape](https://zhuanlan.zhihu.com/p/335829625)\n- [summary](https://github.com/mileistone/study_resources/blob/master/engineering/tensorrt/tensorrt.md)\n\n\n## 后续\n\n- tensorrt完整demo\n- 其他压缩算法(量化/剪枝/蒸馏/NAS等)\n- 其他部署框架(mnn/tnn/tengine等)\n- 压缩 —> 部署\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/666DZY666/micronet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micronet",
    "package_url": "https://pypi.org/project/micronet/",
    "platform": "",
    "project_url": "https://pypi.org/project/micronet/",
    "project_urls": {
      "Homepage": "https://github.com/666DZY666/micronet"
    },
    "release_url": "https://pypi.org/project/micronet/1.10.5/",
    "requires_dist": [
      "torch (>=1.1.0)",
      "torchvision",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "A model compression and deploy lib.",
    "version": "1.10.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11641855,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a46ce3098a0ce137a29f48f23ef3e0cbfd6f9ce029fe676467efeb48e92a7634",
        "md5": "9a00b40ba795e4664a5608ae4887353f",
        "sha256": "3488a65de241585d20fae516bca3ae727604c17d5cae567930ff2095936d0f93"
      },
      "downloads": -1,
      "filename": "micronet-1.10.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a00b40ba795e4664a5608ae4887353f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 55059,
      "upload_time": "2021-06-07T12:53:49",
      "upload_time_iso_8601": "2021-06-07T12:53:49.867170Z",
      "url": "https://files.pythonhosted.org/packages/a4/6c/e3098a0ce137a29f48f23ef3e0cbfd6f9ce029fe676467efeb48e92a7634/micronet-1.10.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f971c7f582809f7e2bbe882142941fb37ab0ee7f64ea2523771aeda07ec2392",
        "md5": "2e59e1f71ed3376e4bcfd929011d288b",
        "sha256": "ba5a3b940638efc987f0f945ab326c631039f63dc512462ec41ff278324dea0f"
      },
      "downloads": -1,
      "filename": "micronet-1.10.5.tar.gz",
      "has_sig": false,
      "md5_digest": "2e59e1f71ed3376e4bcfd929011d288b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 50947,
      "upload_time": "2021-06-07T12:53:54",
      "upload_time_iso_8601": "2021-06-07T12:53:54.244762Z",
      "url": "https://files.pythonhosted.org/packages/8f/97/1c7f582809f7e2bbe882142941fb37ab0ee7f64ea2523771aeda07ec2392/micronet-1.10.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}