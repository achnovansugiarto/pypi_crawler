{
  "info": {
    "author": "Lukas Nemec",
    "author_email": "lu.nemec@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Django-pages\n===========================\n\nAbout this project\n------------------\n\nThis project will give you the power of standard CMS (content management system) like Drupal, Joomla, WordPress but with much more speed and simplicity.\n\nIt may not have as much plugins and templates like WordPress but it is super simple application with django admin with WYSIWYG editors for page and post editing.\n\nIt is designed for easy web content editing with no previous experience in HTML or CSS. Just install it once, use default template or create one for yourself (or hire someone to make it) and use it. There is no maintenance required.\n\nThis project is running on this site: [Nemec.lu](http://nemec.lu/)\n\nInstallation\n------------\n\nNote: do NOT use settings.py from sample_project! the secret key is visible to all and it is a security risk. Create your own Django application and simply fill settings depending on your configuration.\n\nGet this application:\n\n    pip install django-pages \n\nInstall dependencies:\n    \n    pip install -r DEPENDENCIES\n\nCreate your project:\n\n    Install Django (pip install django)\n    Create your Django application (see [django docs](https://docs.djangoproject.com/en/1.5/intro/install/))\n\n    OR\n\n    Download and copy somewhere the sample_project\n\nConfigure:\n\n    # add to settings.py:\n    USE_TZ = True\n\n# don't forget to include django admin in INSTALLED_APPS\n\n    # add to INSTALLED_APPS:\n    'django_pages',\n    'django_pages.comments',\n    'django_pages.common',\n    'django_pages.connector',\n    'django_pages.feed',\n    'django_pages.language',\n    'django_pages.log',\n    'django_pages.menu',\n    'django_pages.metadata',\n    'django_pages.pages',\n    'django_pages.site',\n    'reversion',\n\n    # optional\n    'grappelli', <- nice admin looks\n\n    \n    # add to MIDDLEWARE_CLASSES for logging requests into file \n    'django_pages.log.middleware.RequestLog',\n\n    # for logging, also configure logger with name 'requestlog'\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'filters': {\n            'require_debug_false': {\n                '()': 'django.utils.log.RequireDebugFalse'\n            }\n        },\n        'handlers': {\n            'log': {\n                'level': 'INFO',\n                'class': 'logging.handlers.TimedRotatingFileHandler',\n                'filename': 'request.log',\n                'when': 'D',\n                'interval': 1,\n            }\n        },\n        'loggers': {\n                'requestlog': {\n                'handlers': ['log',],\n                'level': 'INFO',\n            }   \n        }\n    }\n\n\nAdd this to your urls.py:\n\n        # optional for nice admin look (must be above django_pages):\n        url(r'^grappelli/', include('grappelli.urls')),\n\n        url(r'', include('django_pages.urls')),\n\nCreate empty database:\n    \n    run #~ python manage.py syncdb  to create database and tables\n    \nRun webserver:\n    \n    run your webserver (nginx/apache/django test server)\n\nAdd some nice website content:\n\n    go to http://your_site/admin/ and create structure\n\n    Use your new webpage!\n\n\nConfiguration\n-------------\n\nYou can override default settings on these values:\n\nADMIN_MEDIA_PREFIX = '/static/admin/'\nThis is where django will look for admin static files (for deployment with collectstatic)\n\nFLAG_UPLOAD_DIR = settings.MEDIA_ROOT + '/languages'\nThis is wher language flags will be saved and loaded from\n\nPOSTS_ON_PAGE = 10\nHow many posts on page show\n\nOptional:\nSet DEBUG = True in settings.py while creating pages to see debugging information\n\n\nCreate website\n--------------\n\n**Or use the new Wizzard (go to http://yoururl.example/wizzard/)**\n\n    Go to http://mydomain.example/admin/ (replace mydomain.example with your actual domain)\n    \n    Login using credentials from command python manage.py syncdb\n\n    Create Site\n\n    Create Language(s)\n\n    Create MenuItems with good url (for SEO) for Menu # example: my-page-that-displays-how-to-cook\n\n    Create exactly 1 Page with index set to True\n\n    Create Pages with content pointing to MenuItems which create link to that Page\n\n    Set Language, Page and others as Active to be displayed\n\n    Create 1 Feed Setting, either with information or just deactivated feed (RSS and Atom feed setting)\n\n    Optional:\n    Create Posts on Page (optional: set duration for Post visibility)\n\n    SEO:\n    Create MetaSets for Pages\n    Create MetaData for MetaSets\n\n    Set DEBUG = False in you settings.py after succesfull creation!\n\n    Done!\n\n\nWizzard\n-------\n\nThis is just a simple helper page, that will guide you through the process of creating your presentation.\nImages and exmplanations included.\n\nWizzard is accesible from http://yoursite.com/wizzard/\n\n\nAdding Images\n-------------\n\nYou can now add images directly from admin. Select Page/Post you want to edit. Click on Image icon in the editor.\nClick Browse server. In the new window, either upload your image (will be automatically resized to fit 800x600 px) or select\nalready uploaded image from the files.\n\nOnce selected, Image will be automatically selected by the editor, and you can hit OK.\nIt will automatically create link for that image.\n\nIf you want this image to have nice pop-up effects from Lightbox2, click on small magnifiing glass icon (Create Lightbox),\ninsert text you want the image to have and click OK.\n\nFiles will be uploaded to your MEDIA_ROOT path into folder uploaded (you can change this in file connector/settings.oy)\n\nDon't forget to set your /media/uploadeded/ folder permissions to 775 so you'll be able to save images into it from admin!\n\n\nTemplates\n---------\n\nCopy your custom template into your project's templates folder, and add Template in admin's Looks subsection\nand set it to active, the system will use your new template automatically.\n\nNote: there is a 30s cache for current template, so after the change in admin, wait a bit for it to display.\n\n\nCreating custom template\n------------------------\n\n1. In your settings.py, set TEMPLATE_PATH = 'templatename'\n2. Copy templates/default to templates/templatename\n3. Edit files in templates/templatename to your liking\n4. Save your css/js inside your project's /static/ and in base_static.html change path and names inside {% static 'filename' %}\n\nNote: all commands inside {} are django template language, and I suggest you leave it as is, and just change the HTML surrounding it.\n\nI wanted to make templatetags that would just say {% menu %}, {% content %} {% comments %}, but each of these requires some HTML to render them, so it will be as it is for now.\n\n\nScheme\n------\n\nWysiwyg editor uses this application and database scheme\n\n    Site\n    Language --> \n        {Multiple menuitems} --> \n            [Page for each menuitem] --> \n                (Multiple Posts for each Page - with pagination) -->\n                    (Multiple comments for each Post)\n            [MetaSet for each page] -->\n                (Multiple MetaData for each MetaSet)\n\nUrl\n---\n\nUrl is following:\n\n    http://mydomain.example/language/my-page-with-somethin~page_number/~post\n    \nRules are following:\n\n    language - string with 2-3 letters\n    page - 4-200 letters where allowed is alphabet, digits and - . _\n    page_number - digits\n    post - same as page\n\nNote: all of this is generated automatically from DB, you provide country_code for your language\nwhich is used as /language part of url. MenuItem url is used as Page url part. Page_number is determined\nautomatically from post count. Post detail url is determined automatically from post title - alphabet lowercase\nwith rules same as page.\n\nReserved URLs:\n    \n    /admin/*\n    /connector/*\n    /grapelli/*\n    /wizzard/\n    /rss/\n    /atom/\n    /robots.txt\n    /sitemap.xml\n\n\nCaching\n-------\n\nWysiwyg now supports caching in-memory (I guess), for some reason django's wrapper @chache_page for specific view caching works without CACHE in settings.py, which is weird at least. And I tried memcached, in-memory and without cache, and in-memory had the best results, and you don't even have to configure it.\nNow it can handle 50 concurrent page acceses in 12ms! (tested with ab -n 1000 -c 50 http://lnemec.tk/)\n\n\nAtom and RSS\n------------\n\nAtom and RSS are accessible under /atom/ and /rss/ respectively.\nSimply add one record into admin Feed Settings, it must contain Site Title, Site Description, and latest post count.\nYou can disable rss and atom feed by disabling it in admin.\nAny new Posts under any menu/menuitem will be shown in rss/atom feed from newest to oldest.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lunemec/django-pages",
    "keywords": null,
    "license": "see LICENCE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-pages",
    "package_url": "https://pypi.org/project/django-pages/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-pages/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/lunemec/django-pages"
    },
    "release_url": "https://pypi.org/project/django-pages/1.0.8/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Simple CMS for django",
    "version": "1.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1510789,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b85acf3dd938ce699d37539fa4652c6f8cb1075e99f03a2e84e157644d0a4b2",
        "md5": "1a9073e92c3484ff9d49d0c92ee94d9a",
        "sha256": "b7bc434d9f2dd7b5fa67330d86c7f02f8799b0fe37938dfe0c3e1d81068022b2"
      },
      "downloads": -1,
      "filename": "django-pages-1.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "1a9073e92c3484ff9d49d0c92ee94d9a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1491888,
      "upload_time": "2013-08-01T11:56:51",
      "upload_time_iso_8601": "2013-08-01T11:56:51.188758Z",
      "url": "https://files.pythonhosted.org/packages/7b/85/acf3dd938ce699d37539fa4652c6f8cb1075e99f03a2e84e157644d0a4b2/django-pages-1.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}