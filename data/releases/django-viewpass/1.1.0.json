{
  "info": {
    "author": "Joel Burton",
    "author_email": "joel@joelburton.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Viewpass\n========\n\nOverview\n--------\n\nThis is a system for allowing the creation and use of URLs that contain a token that allows\na site visitor, even an anonymous visitor, access to pages that might not normally be allowed\nto visit.\n\nFor example, say you have a report page at `/report/` that normally requires the permission\n'reporting.view_report' to view. However, you'd like to be able to send emails to some friends\nto allow them to view this page without needing an account.\n\nViewpass is:\n\n- a utility to craft URLs with embedded, cryptographically-signed information about a\n  permission\n\n- a Django middleware that intercepts URLs with these kind of URLs, and stores information\n  about that permission onto the user object.\n\nInstalling\n----------\n\nAdd 'viewpass' to the `INSTALLED_APPS`::\n\n    INSTALLED_APPS = [\n        # ...\n        'viewpass',\n    ]\n\nAdd it to the middleware classes: This need to be after the Authentication Middleware (since\nwe need a user!). A good arrangement could be::\n\n    MIDDLEWARE_CLASSES = [\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        'django.middleware.common.CommonMiddleware',\n        'django.middleware.csrf.CsrfViewMiddleware',\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\n        'viewpass.middleware.ViewPassMiddleware',\n        'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\n        'django.contrib.messages.middleware.MessageMiddleware',\n        'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    ]\n\nAdd viewpass to the `AUTHENTICATION_BACKENDS`::\n\n    AUTHENTICATION_BACKENDS = [\n        'viewpass.backends.ViewPassBackend',\n        'django.contrib.auth.backends.ModelBackend'\n    ]\n\n.. TODO\n\n    should this stuff be added automatically via AppConfig?\n\nGenerating Viewpass URLs\n------------------------\n\nYou can generate the proper URL for them by using the method `util.get_viewpass_url`, like::\n\n    get_viewpass_url('/report/', 'reporting.view_report')\n\nThis URL will look like `/report/?viewpass=STRING1:STRING2` and visitors can use this URL to\nvisit the `/report/` page.\n\nThe STRING1 and STRING2 are encoded versions of the timestamp/path/permission-to-grant and a\nsigned copy of the path/permission-to-grant, respectively. This prevents any tampering by users\ntrying to re-use a viewpass URL to view another page or to change the permission granted.\n(The timestamp is not used but can be used to create time-limited URLs; you can edit the\n`signing.loads()` call in `viewpass.middleware.ViewPassMiddleware` to add a\n`max_age=<num_seconds>` parameter).\n\nAs a convenience, you can also use the template tag to generate the proper URL. On the template\nthat is used by `/report/`, you can include::\n\n    {% load viewpass_tags %}\n    <a href=\"{% viewpass_url 'reporting.view_report' %}\">Get public URL</a>\n\nThis will show a link with the viewpass URL on it.\n\nCredit\n======\n\nViewpass is written and maintained by Joel Burton <joel@joelburton.com>.\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/joelburton/django-viewpass/tarball/1.0.5",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joelburton/viewpass.git",
    "keywords": "",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-viewpass",
    "package_url": "https://pypi.org/project/django-viewpass/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-viewpass/",
    "project_urls": {
      "Download": "https://github.com/joelburton/django-viewpass/tarball/1.0.5",
      "Homepage": "https://github.com/joelburton/viewpass.git"
    },
    "release_url": "https://pypi.org/project/django-viewpass/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django app to provide access to protected resources via URL tokens.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2535537,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3cc63859b0b9499fb8714e3ccc79f3bacfe5ea21251056aa0cd5dce4a0cda68",
        "md5": "af9bbd5396dd09ac3643fe4a01b5d7d9",
        "sha256": "d862334347f5666efcfb63942f69f7a944e03d0fb2806cb864b1f868be680aa6"
      },
      "downloads": -1,
      "filename": "django-viewpass-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "af9bbd5396dd09ac3643fe4a01b5d7d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5250,
      "upload_time": "2016-12-22T20:10:56",
      "upload_time_iso_8601": "2016-12-22T20:10:56.594134Z",
      "url": "https://files.pythonhosted.org/packages/c3/cc/63859b0b9499fb8714e3ccc79f3bacfe5ea21251056aa0cd5dce4a0cda68/django-viewpass-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}