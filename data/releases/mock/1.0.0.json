{
  "info": {
    "author": "Michael Foord",
    "author_email": "michael@voidspace.org.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.4",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: Jython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "mock is a library for testing in Python. It allows you to replace parts of\nyour system under test with mock objects and make assertions about how they\nhave been used.\n\nmock is now part of the Python standard library, available as `unittest.mock\n<http://docs.python.org/py3k/library/unittest.mock.html#module-unittest.mock>`_\nin Python 3.3 onwards.\n\nmock provides a core `MagicMock` class removing the need to create a host of\nstubs throughout your test suite. After performing an action, you can make\nassertions about which methods / attributes were used and arguments they were\ncalled with. You can also specify return values and set needed attributes in\nthe normal way.\n\nmock is tested on Python versions 2.4-2.7 and Python 3. mock is also tested\nwith the latest versions of Jython and pypy.\n\nThe mock module also provides utility functions / objects to assist with\ntesting, particularly monkey patching.\n\n* `PDF documentation for 1.0\n  <http://www.voidspace.org.uk/downloads/mock-1.0.0.pdf>`_\n* `mock on google code (repository and issue tracker)\n  <http://code.google.com/p/mock/>`_\n* `mock documentation\n  <http://www.voidspace.org.uk/python/mock/>`_\n* `mock on PyPI <http://pypi.python.org/pypi/mock/>`_\n* `Mailing list (testing-in-python@lists.idyll.org)\n  <http://lists.idyll.org/listinfo/testing-in-python>`_\n\nMock is very easy to use and is designed for use with\n`unittest <http://pypi.python.org/pypi/unittest2>`_. Mock is based on\nthe 'action -> assertion' pattern instead of 'record -> replay' used by many\nmocking frameworks. See the `mock documentation`_ for full details.\n\nMock objects create all attributes and methods as you access them and store\ndetails of how they have been used. You can configure them, to specify return\nvalues or limit what attributes are available, and then make assertions about\nhow they have been used::\n\n    >>> from mock import Mock\n    >>> real = ProductionClass()\n    >>> real.method = Mock(return_value=3)\n    >>> real.method(3, 4, 5, key='value')\n    3\n    >>> real.method.assert_called_with(3, 4, 5, key='value')\n\n`side_effect` allows you to perform side effects, return different values or\nraise an exception when a mock is called::\n\n   >>> mock = Mock(side_effect=KeyError('foo'))\n   >>> mock()\n   Traceback (most recent call last):\n    ...\n   KeyError: 'foo'\n   >>> values = {'a': 1, 'b': 2, 'c': 3}\n   >>> def side_effect(arg):\n   ...     return values[arg]\n   ...\n   >>> mock.side_effect = side_effect\n   >>> mock('a'), mock('b'), mock('c')\n   (3, 2, 1)\n   >>> mock.side_effect = [5, 4, 3, 2, 1]\n   >>> mock(), mock(), mock()\n   (5, 4, 3)\n\nMock has many other ways you can configure it and control its behaviour. For\nexample the `spec` argument configures the mock to take its specification from\nanother object. Attempting to access attributes or methods on the mock that\ndon't exist on the spec will fail with an `AttributeError`.\n\nThe `patch` decorator / context manager makes it easy to mock classes or\nobjects in a module under test. The object you specify will be replaced with a\nmock (or other object) during the test and restored when the test ends::\n\n    >>> from mock import patch\n    >>> @patch('test_module.ClassName1')\n    ... @patch('test_module.ClassName2')\n    ... def test(MockClass2, MockClass1):\n    ...     test_module.ClassName1()\n    ...     test_module.ClassName2()\n\n    ...     assert MockClass1.called\n    ...     assert MockClass2.called\n    ...\n    >>> test()\n\n.. note::\n\n   When you nest patch decorators the mocks are passed in to the decorated\n   function in the same order they applied (the normal *python* order that\n   decorators are applied). This means from the bottom up, so in the example\n   above the mock for `test_module.ClassName2` is passed in first.\n\n   With `patch` it matters that you patch objects in the namespace where they\n   are looked up. This is normally straightforward, but for a quick guide\n   read `where to patch\n   <http://www.voidspace.org.uk/python/mock/patch.html#where-to-patch>`_.\n\nAs well as a decorator `patch` can be used as a context manager in a with\nstatement::\n\n    >>> with patch.object(ProductionClass, 'method') as mock_method:\n    ...     mock_method.return_value = None\n    ...     real = ProductionClass()\n    ...     real.method(1, 2, 3)\n    ...\n    >>> mock_method.assert_called_once_with(1, 2, 3)\n\nThere is also `patch.dict` for setting values in a dictionary just during the\nscope of a test and restoring the dictionary to its original state when the\ntest ends::\n\n   >>> foo = {'key': 'value'}\n   >>> original = foo.copy()\n   >>> with patch.dict(foo, {'newkey': 'newvalue'}, clear=True):\n   ...     assert foo == {'newkey': 'newvalue'}\n   ...\n   >>> assert foo == original\n\nMock supports the mocking of Python magic methods. The easiest way of\nusing magic methods is with the `MagicMock` class. It allows you to do\nthings like::\n\n    >>> from mock import MagicMock\n    >>> mock = MagicMock()\n    >>> mock.__str__.return_value = 'foobarbaz'\n    >>> str(mock)\n    'foobarbaz'\n    >>> mock.__str__.assert_called_once_with()\n\nMock allows you to assign functions (or other Mock instances) to magic methods\nand they will be called appropriately. The MagicMock class is just a Mock\nvariant that has all of the magic methods pre-created for you (well - all the\nuseful ones anyway).\n\nThe following is an example of using magic methods with the ordinary Mock\nclass::\n\n    >>> from mock import Mock\n    >>> mock = Mock()\n    >>> mock.__str__ = Mock(return_value = 'wheeeeee')\n    >>> str(mock)\n    'wheeeeee'\n\nFor ensuring that the mock objects your tests use have the same api as the\nobjects they are replacing, you can use \"auto-speccing\". Auto-speccing can\nbe done through the `autospec` argument to patch, or the `create_autospec`\nfunction. Auto-speccing creates mock objects that have the same attributes\nand methods as the objects they are replacing, and any functions and methods\n(including constructors) have the same call signature as the real object.\n\nThis ensures that your mocks will fail in the same way as your production\ncode if they are used incorrectly::\n\n   >>> from mock import create_autospec\n   >>> def function(a, b, c):\n   ...     pass\n   ...\n   >>> mock_function = create_autospec(function, return_value='fishy')\n   >>> mock_function(1, 2, 3)\n   'fishy'\n   >>> mock_function.assert_called_once_with(1, 2, 3)\n   >>> mock_function('wrong arguments')\n   Traceback (most recent call last):\n    ...\n   TypeError: <lambda>() takes exactly 3 arguments (1 given)\n\n`create_autospec` can also be used on classes, where it copies the signature of\nthe `__init__` method, and on callable objects where it copies the signature of\nthe `__call__` method.\n\nThe distribution contains tests and documentation. The tests require\n`unittest2 <http://pypi.python.org/pypi/unittest2>`_ to run.\n\nDocs from the in-development version of `mock` can be found at\n`mock.readthedocs.org <http://mock.readthedocs.org>`_.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.voidspace.org.uk/python/mock/",
    "keywords": "testing,test,mock,mocking,unittest,patching,stubs,fakes,doubles",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mock",
    "package_url": "https://pypi.org/project/mock/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mock/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://www.voidspace.org.uk/python/mock/"
    },
    "release_url": "https://pypi.org/project/mock/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Python Mocking and Patching Library for Testing",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16363330,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8560ec8c1af81337bab0caba188b218b6758bc94f125f49062f7c5f0647749d2",
        "md5": "52642ad23c7a5202b33cb0234837676e",
        "sha256": "2d9fbe67001d2e8f02692075257f3c11e1b0194bd838c8ce3f49b31fc6c3f033"
      },
      "downloads": -1,
      "filename": "mock-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "52642ad23c7a5202b33cb0234837676e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 819523,
      "upload_time": "2012-10-07T17:36:08",
      "upload_time_iso_8601": "2012-10-07T17:36:08.645786Z",
      "url": "https://files.pythonhosted.org/packages/85/60/ec8c1af81337bab0caba188b218b6758bc94f125f49062f7c5f0647749d2/mock-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d7162f92fac972750254e31060ebe0802ad02cce2755a7844a94b3cf19b58a6",
        "md5": "4d2affbef8d628c27ea952bba5c556de",
        "sha256": "e13a8feabc1ccb2ce1c081553bf699fa2632bc37823b0851ecfd59886a492650"
      },
      "downloads": -1,
      "filename": "mock-1.0.0.zip",
      "has_sig": false,
      "md5_digest": "4d2affbef8d628c27ea952bba5c556de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 863320,
      "upload_time": "2012-10-07T17:37:54",
      "upload_time_iso_8601": "2012-10-07T17:37:54.207862Z",
      "url": "https://files.pythonhosted.org/packages/8d/71/62f92fac972750254e31060ebe0802ad02cce2755a7844a94b3cf19b58a6/mock-1.0.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}