{
  "info": {
    "author": "starsflower",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Pyslash\nPyslash is a wrapper around [discord-py-slash-command](https://github.com/eunwoo1104/discord-py-slash-command), that makes command creation more natural.\n\nThe examples provided are based of the examples from the original repository.\n\n## Quick startup\nFirstly you must install the package, as explained [here](#installation).\n\nA simple setup using `slash` and adding a basic command\n```python\nimport discord\nfrom discord.ext import commands\nfrom discord_slash import SlashCommand, SlashContext\nfrom pyslash import slash\n\nbot = commands.Bot(command_prefix=\"!\", intents=discord.Intents.all())\ns = SlashCommand(bot)\n\n@slash(s, name=\"test\")\nasync def _test(ctx: SlashContext, arg0: str):\n    embed = discord.Embed(title=\"embed test\")\n    await ctx.send(content=arg0, embeds=[embed])\n\nbot.run(\"discord_token\")\n```\n\nConverters are automatically handled, for example\n```python\n@slash(s, name=\"test\")\nasync def _test(ctx: SlashContext, member: discord.Member):\n    await ctx.send(f\"*taps mic* testing, {member.mention}\")\n```\n\nAnd names don't have to be given\n```python\n@slash(s)\nasync def foo(ctx: SlashContext, member: discord.Member):\n    # This command will automatically be called 'foo'\n    await ctx.send(f\"Hello, {member.mention}\")\n```\n\n### Descriptions\n\nBy default, each argument has the description `No description`, but that can be changed by providing a `Tuple` of any type and a `Literal`.\n```python\nfrom typing import Tuple, Literal\n\n# ...\n\ndescription = Literal[\"my description here\"]\n@slash(s)\nasync def foo(ctx: SlashContext, member: typing.Tuple[discord.Member, description]):\n    # This command will automatically be called 'foo', and have\n    # the description \"my description here\"\n    await ctx.send(f\"Hello, {member.mention}\")\n```\n\n## Advanced usage\nThe same usage applies for cogs, but a different function is used.\n\n```python\n# bot.py\nfrom discord.ext import commands\nfrom discord_slash import SlashCommand\n\nbot = commands.Bot(command_prefix=\"prefix\")\nslash = SlashCommand(bot, override_type = True)\n\nbot.load_extension(\"cog\")\nbot.run(\"TOKEN\")\n\n# cog.py\nimport discord\nfrom discord.ext import commands\nfrom discord_slash import SlashContext\nfrom pyslash import cog_ext\n\nclass Slash(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n\n    @slash_cog(name=\"test\")\n    async def _test(self, ctx: SlashContext):\n        await ctx.send(\"Hey there folks\")\n\ndef setup(bot):\n    bot.add_cog(Slash(bot))\n```\n\n## Installation\nTo install from pip, run\n```\npip install dpyslash\n```\n\nTo install, clone the repository and then build:\n```\ngit clone https://github.com/starsflower/discordpy-slash-commands\ncd discordpy-slash-commands\npython setup.py install\n```\n\n## Tests\nTo run basic tests, run\n```\npython -m tests/test\n```\n\nTo run the test bot (that requires `BOT_TOKEN` in the environment variables), and a further pip requirement of `python-dotenv`\n```\npython -m tests/test_bot\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/starsflower/discordpy-slash-commands",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dpyslash",
    "package_url": "https://pypi.org/project/dpyslash/",
    "platform": "",
    "project_url": "https://pypi.org/project/dpyslash/",
    "project_urls": {
      "Homepage": "https://github.com/starsflower/discordpy-slash-commands"
    },
    "release_url": "https://pypi.org/project/dpyslash/1.0.0/",
    "requires_dist": [
      "discord.py",
      "discord-py-slash-command"
    ],
    "requires_python": "",
    "summary": "Improves slash commands for Python",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11929123,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c14d5c71efb189b069e4087496315c11f22437b084b565dd7a52c560f2404152",
        "md5": "a6a1b77f0286d492b5b9b8e7b3ed9f62",
        "sha256": "91b22876dc36d66ac9963b02c3b9913ff55f427532d9d00836d1415c52c06ab9"
      },
      "downloads": -1,
      "filename": "dpyslash-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a6a1b77f0286d492b5b9b8e7b3ed9f62",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7584,
      "upload_time": "2021-05-09T15:23:26",
      "upload_time_iso_8601": "2021-05-09T15:23:26.806340Z",
      "url": "https://files.pythonhosted.org/packages/c1/4d/5c71efb189b069e4087496315c11f22437b084b565dd7a52c560f2404152/dpyslash-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec3472eb7a4d8bd0a306d2625eeb5bb881818dd9d820657d1d9af45a32dc17ed",
        "md5": "b9645e4f9075c01d0d3bc956f58c0590",
        "sha256": "91e7cf3666b8664fa171ed41ddb2401f1c4c4881fd75953eafe12f1347b77430"
      },
      "downloads": -1,
      "filename": "dpyslash-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b9645e4f9075c01d0d3bc956f58c0590",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6618,
      "upload_time": "2021-05-09T15:23:27",
      "upload_time_iso_8601": "2021-05-09T15:23:27.776439Z",
      "url": "https://files.pythonhosted.org/packages/ec/34/72eb7a4d8bd0a306d2625eeb5bb881818dd9d820657d1d9af45a32dc17ed/dpyslash-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}