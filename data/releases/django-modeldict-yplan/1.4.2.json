{
  "info": {
    "author": "YPlan",
    "author_email": "adam@yplanapp.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "Operating System :: OS Independent",
      "Topic :: Software Development"
    ],
    "description": "================\ndjango-modeldict\n================\n\n.. image:: https://img.shields.io/pypi/v/django-modeldict-yplan.svg\n    :target: https://pypi.python.org/pypi/django-modeldict-yplan\n\n.. image:: https://travis-ci.org/YPlan/django-modeldict.svg?branch=master\n    :target: https://travis-ci.org/YPlan/django-modeldict\n\n\n``ModelDict`` is a very efficient way to store things like settings in your database. The entire model is transformed into a dictionary (lazily) as well as stored in your cache. It's invalidated only when it needs to be (both in process and based on ``CACHE_BACKEND``).\n\nIt was originally created by `Disqus <https://github.com/disqus/django-modeldict>`_, but due to the inactivity we at YPlan have taken over maintenance on this fork.\n\nRequirements\n------------\n\nTested with all combinations of:\n\n* Python: 2.7\n* Django: 1.7, 1.8\n\nInstall\n-------\n\nInstall it with ``pip`` (or ``easy_install``):\n\n.. code-block:: bash\n\n    pip install django-modeldict-yplan\n\nMake sure you ``pip uninstall django-modeldict`` first if you're upgrading from the original to this fork - the packages clash.\n\nExample Usage\n-------------\n\n.. code-block:: python\n\n    # You'll need a model with fields to use as key and value in the dict\n\tclass Setting(models.Model):\n\t    key = models.CharField(max_length=32)\n\t    value = models.CharField(max_length=200)\n\n    # Create the ModelDict...\n\tsettings = ModelDict(Setting, key='key', value='value', instances=False)\n\n    # And you can treat it like a normal dict:\n\n\t# Missing values = KeyError\n\tsettings['foo']\n\t>>> KeyError\n\n\t# Sets supported\n\tsettings['foo'] = 'hello'\n\n\t# Fetch the current value using normal dictionary access\n\tsettings['foo']\n\t>>> 'hello'\n\n    # ...or by normal model queries\n    Setting.objects.get(key='foo').value\n    >>> 'hello'\n\n\n\n\n=======\nHistory\n=======\n\nPending Release\n---------------\n\n* Forked by YPlan\n\n1.4.1 (2012-12-04)\n------------------\n\n* Last release by Disqus",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/YPlan/django-modeldict",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-modeldict-yplan",
    "package_url": "https://pypi.org/project/django-modeldict-yplan/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-modeldict-yplan/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/YPlan/django-modeldict"
    },
    "release_url": "https://pypi.org/project/django-modeldict-yplan/1.4.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Stores a model as a dictionary",
    "version": "1.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5283984,
  "urls": [],
  "vulnerabilities": []
}