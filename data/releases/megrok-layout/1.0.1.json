{
  "info": {
    "author": "Souheil Chelfouh",
    "author_email": "trollfot@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Zope3",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Zope",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=============\nmegrok.layout\n=============\n\nThe `megrok.layout` package provides a simple way to write view\ncomponents which can be included into a defined layout. It turns\naround two main components : the Page and the Layout.\n\nLayout\n======\n\nThe layout is a component allowing you to design your site. Often,\nit's the common structure shared between all the pages. Technically,\nit is a class based on the view components interface, providing a\n'render' and 'update' method.\n\nLet's implement a simple Layout:\n\n  >>> from megrok.layout import Layout\n  >>> from zope.interface import Interface\n  >>> import grokcore.component as grok\n\n  >>> class MyLayout(Layout):\n  ...     grok.name('mylayout')\n  ...     grok.context(Interface)\n  ...\n  ...     def render(self):\n  ...         return u\"a simple layout\"\n\nWe grok our component:\n\n  >>> grok_component('MyLayout', MyLayout)\n  True\n\nWe check it has been correctly registered:\n\n  >>> from megrok.layout import ILayout\n  >>> from zope.component import getMultiAdapter\n  >>> from zope.publisher.browser import TestRequest\n\n  >>> layout = getMultiAdapter((TestRequest(), Interface), ILayout)\n  >>> isinstance(layout, MyLayout)\n  True\n  >>> layout.render()\n  u'a simple layout'\n\nNow let's see how to use this Layout in a specific context using a Page.\n\n\nPage\n====\n\nThe page is the specific code that you want to control. It is based on\nthe grokcore.View browser page implementation and therefore provides a\n``render`` and ``update`` method. The ``render`` method will simply\nreturn the specific HTML code generated by the template or the\n``render`` method code while ``__call__`` will lookup for a Layout\ncomponent and renders itself inside it.\n\nFirst, we'll create 2 models that will serve as exemples.\n\n  >>> class Aurochs(grok.Context):\n  ...    description = u'Looks like a bull'\n\n  >>> class Mammoth(grok.Context):\n  ...    description = u'Looks like an elephant'\n\nLet's create now a page that will display their description.\n\n  >>> from megrok.layout import Page\n  >>> class AnimalDisplay(Page):\n  ...    grok.name('display')\n  ... \t grok.context(Interface)\n  ...\n  ...    def render(self):\n  ...        return self.context.description\n\nGrokking our Page will let us use it.\n\n  >>> grok_component('AnimalDisplay', AnimalDisplay)\n  True\n  >>> wooly = Mammoth()\n  >>> page = getMultiAdapter((wooly, TestRequest()), name='display')\n  >>> page.content()\n  u'Looks like an elephant'\n  >>> page()\n  u'a simple layout'\n\nAs we can see, the page is using the layout, on the __call__ to\nrender. Of course, this example Layout doesn't provide any interesting\nfeature. Let's create something more interesting, by using our page\nwith the help of the 'content' method:\n\n  >>> class MammothLayout(Layout):\n  ...     grok.context(Mammoth)\n  ...\n  ...\t  def render(self):\n  ...\t      return u'Header. Page: %s. Footer' % self.view.content()\n\n  >>> grok_component('MammothLayout', MammothLayout)\n  True\n  >>> page()\n  u'Header. Page: Looks like an elephant. Footer'\n\n\nForms\n=====\n\nYou have as well a Form, AddForm, EditForm and DisplayForm availables,\nwhich are all aware of Layout components like Page does.\n\n\nChangelog\n=========\n\n1.0.1 (2010-02-25)\n------------------\n\n- Forms now inherit from `UtilityView` and therefore get the\n  `application_url` and `flash` methods. Tests have been added to\n  garanty the behavior. [trollfot]\n\n1.0 (2010-02-25)\n----------------\n\n- The dependencies have been heavily cleaned up. All zope.app packages\n  have been removed. We are now running with minimal dependencies and\n  using the latest ZTK. This release will probably *not* run on\n  `Grok 1.0`. You will need `Grok 1.1rc1` to be able to use\n  it. [trollfot]\n\n- Added a component called UtilityView that provides two useful\n  methods : application_url, flash. These methods are almost a copy of\n  what can be found in the `Grok` package. The application_url is\n  using a simple getSite hook to get the root of the application. This\n  might be irrelevant for some applications and can be overriden.\n  [trollfot]\n\n- Added a module called 'messages' that contains the flash messages\n  utilities. This module is *NOT* grokked and must be grokked\n  manually. This prevents conflicts with grokui.admin's own\n  definitions of the very same components. It also allows you to\n  override the `flash` method to use something else than\n  z3c.flashmessage and then not be bothered by useless utilities. The\n  flash messages utilities can be registered by including the\n  ``messages.zcml`` file in your own project or package ZCML file.\n  [trollfot]\n\n0.9 (2009-09-26)\n----------------\n\n- Add default templates to form which doesn't contain an html and body\n  tag.\n  [sylvain]\n\n- Add an AddForm, EditForm and DisplayForm, all aware of the layout\n  component.\n  [sylvain]\n\n0.8 (2009-09-17)\n----------------\n\n- Remove the CodePage, since CodeView have been removed from\n  grokcore.view.\n  [sylvain]\n\n0.7 (2009-09-15)\n----------------\n\n- Add a CodePage to be compatible with the last version of\n  grokcore.view (higher than 1.9). This breaks compatibility with\n  previous release. You need to change any Page using a render method\n  to a CodePage.\n  [sylvain]\n\n- The content property on a Page is no longer a property, but a method\n  as it's hidding exceptions. You might need to update your code to\n  reflect that change as well.\n  [sylvain]\n\n- Fix MANIFEST.in.\n  [sylvain]\n\n0.6 (2009-09-14)\n----------------\n\n- switch the arguments order in calling the layout\n  [cklinger, sylvain]\n\n- add the CHANGES.txt\n  [cklinger]\n\n0.5 (2009-07-24)\n----------------\n\n- remove the grok dependency\n  [cklinger trollfot]",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/megrok.layout",
    "keywords": "grok layout zope3 pagelet theming",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "megrok.layout",
    "package_url": "https://pypi.org/project/megrok.layout/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/megrok.layout/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/megrok.layout"
    },
    "release_url": "https://pypi.org/project/megrok.layout/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A layout component package for zope3 and Grok.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 794643,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29f2648876fc5692b66b622c5fb9fe86b88c9283c62a8822aa7800842a26ab95",
        "md5": "9820ed5ccba3c0550881405faf874cad",
        "sha256": "0db0391c0cd0447a4401161dfa90f2a4ef523879b1decf8855af0d1b5c7cc3b9"
      },
      "downloads": -1,
      "filename": "megrok.layout-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9820ed5ccba3c0550881405faf874cad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14420,
      "upload_time": "2010-02-25T19:27:38",
      "upload_time_iso_8601": "2010-02-25T19:27:38.487902Z",
      "url": "https://files.pythonhosted.org/packages/29/f2/648876fc5692b66b622c5fb9fe86b88c9283c62a8822aa7800842a26ab95/megrok.layout-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}