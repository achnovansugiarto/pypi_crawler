{
  "info": {
    "author": "Sébastien Boisgérault",
    "author_email": "Sebastien.Boisgerault@mines-paristech.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Logging"
    ],
    "description": "\nPreamble\n--------------------------------------------------------------------------------\n\nLet's do this ! First, as expected:\n\n    >>> import logfile\n\nThe `logfile` module outputs the log messages to `sys.stderr` by default;\nfor testing purposes, we redirect the logs to `sys.stdout`.\n\n    >>> import sys\n    >>> logfile.config.output = sys.stdout\n\nLogfile\n--------------------------------------------------------------------------------\n\nLogfiles are named files that also behave like integers:\n\n    >>> import logfile\n    >>> warning = logfile.warning\n    >>> hasattr(warning, \"write\")\n    True\n    >>> warning.name == str(warning) == \"warning\"\n    True\n    >>>\n    >>> int(warning)\n    0\n\nFive standard logfiles are defined:\n\n    >>> names = \"critical error warning info debug\".split()\n    >>> logfiles = [getattr(logfile, name) for name in names]\n    >>> for lf in logfiles:\n    ...     format = \"{0:>8}: {1:>2}\".format \n    ...     print format(str(lf), int(lf))\n    critical: -2\n       error: -1\n     warning:  0\n        info:  1\n       debug:  2\n\nThe logfile integer value measure the importance of the channel ; \nthe lower the number, the more important the messages sent to the logfile.\nConcretely, a message will *effectively* be logged only\nif it targets a logfile whose integer value is less or equal to\nthe current verbosity (`config.level`) ; the other messages are filtered out.\n\nThe default logfile verbosity is set to `warning` (or `0`), so only message \nthat target the `critical`, `error` and `warning` logfiles will logged.\n\nLet's check that in the default setting, information messages get lost:\n\n    >>> info = logfile.info\n    >>> logfile.config.level < info\n    True\n    >>> print >> info, \"testing info logfile ...\"\n\nAs expected, nothing gets printed. But if we set the logfile level to `info` \n(or higher), information messages don't get lost anymore:\n\n    >>> logfile.config.level = info\n    >>> print >> info, \"testing info logfile again\"\n    testing info logfile again\n\n\nWriting into LogFiles\n--------------------------------------------------------------------------------\n\nMessages can be send to logfiles in two ways: either using the file \ninterface, as in:\n\n    >>> print >> warning, \"I felt a disturbance in the Force.\"\n    I felt a disturbance in the Force.\n\nor using the callable interface:\n\n    >>> logfile.warning(\"I felt a disturbance in the Force.\")\n    I felt a disturbance in the Force.\n\nThe former call is handy to quicky enable `logfile` support in a code full of \n`print` statements, but we advise you to adopt the second style to benefit\nfrom all features of `logfile`.\n\nMessage Variables \n--------------------------------------------------------------------------------\n\nThe message send to logfiles often depends on the value of local variables. \nTo simplify the definition of messages, we may refer to local variables\nin messages with the same curly brace syntax use by the \n[string.format method]. \nThe value of the variable will be automatically substituted into the message. \nFor example:\n\n    >>> jedi = \"Luke\"\n    >>> logfile.info(\"Use the Force, {jedi}.\")\n    Use the Force, Luke.\n\n[string.format method]: http://docs.python.org/library/string.html#formatstrings\n\nStandard LogFile Hooks\n--------------------------------------------------------------------------------\n\nLogFile hooks are an easy way to automatically trigger an action when a message\nis sent to a logfile. Only the `error` and `critical` logfiles use hooks.\n\nA message send to `error` triggers an exception (so that you don't have to):\n\n    >>> try:\n    ...     logfile.error(\"I felt a great disturbance in the Force.\\n\")\n    ... except Exception as e:\n    ...     print repr(e)\n    I felt a great disturbance in the Force.\n    Exception('I felt a great disturbance in the Force.',)\n\nThe type of the exception defaults to `Exception` ;\nit may be controlled by the keyword argument `type`:\n\n    >>> class ForceFluctuation(Exception):\n    ...     pass\n    >>> try:\n    ...     message = \"I felt a great disturbance in the Force.\\n\"\n    ...     logfile.error(message, type=ForceFluctuation)\n    ... except Exception as e:\n    ...     print repr(e)\n    I felt a great disturbance in the Force.\n    ForceFluctuation('I felt a great disturbance in the Force.',)\n\nA message send to `error` triggers a call to `sys.exit`:\n\n    >>> try:\n    ...     logfile.critical(\"This is the end for you ... my former master.\\n\")\n    ... except SystemExit as e:\n    ...     print repr(e)\n    This is the end for you ... my former master.\n    SystemExit('This is the end for you ... my former master.',)\n\nCustom Output Format\n--------------------------------------------------------------------------------\n\n    >>> from datetime import datetime as _datetime\n    >>> class mock_datetime(object):\n    ...     @staticmethod\n    ...     def now():\n    ...         return _datetime(2014, 1, 1, 12, 00, 00)\n    >>> logfile.datetime.datetime = mock_datetime\n\n    >>> def format(**kwargs):\n    ...     kwargs[\"date\"] = kwargs[\"date\"].strftime(\"%Y/%m/%d %H:%M:%S\")\n    ...     kwargs[\"logfile\"] = str(kwargs[\"logfile\"]).upper()\n    ...     return \"{date} | {logfile} from {tag} | {message}\".format(**kwargs)\n\n    >>> logfile.config.format = format\n\n    >>> def Yoda():\n    ...     info(\"Do. Or do not. There is no try.\")\n    >>> Yoda()\n    2014/01/01 12:00:00 | INFO from Yoda | Do. Or do not. There is no try.\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/boisgera/logfile",
    "keywords": null,
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "logfile",
    "package_url": "https://pypi.org/project/logfile/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/logfile/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/boisgera/logfile"
    },
    "release_url": "https://pypi.org/project/logfile/1.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "File-based logging library",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1312612,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "274ee40eb384e4673332fe560903b62199d9cbbd8be3e3934241d8520f259f8c",
        "md5": "a49d68ce131171b2cc5eb5a7a4e26ef0",
        "sha256": "a5c83aca547a455246c030fc20bb7079e768bebddbb0d60572eba6df8d604c41"
      },
      "downloads": -1,
      "filename": "logfile-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a49d68ce131171b2cc5eb5a7a4e26ef0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 541131,
      "upload_time": "2014-11-19T10:59:31",
      "upload_time_iso_8601": "2014-11-19T10:59:31.444432Z",
      "url": "https://files.pythonhosted.org/packages/27/4e/e40eb384e4673332fe560903b62199d9cbbd8be3e3934241d8520f259f8c/logfile-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}