{
  "info": {
    "author": "",
    "author_email": "BST Labs <bstlabs@caios.io>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# DynaCLI\n\nDynaCLI (Dynamic CLI) is a cloud-friendly Python library for converting pure Python functions into Linux Shell commands on the fly.\n\nIt's ideal for automating routine development and administrative tasks in a modern cloud software environment because it supports converting a virtually unlimited set of functions into Shell commands with minimal run-time and maintenance overhead.\n\nUnlike other existing solutions such as [Click](https://click.palletsprojects.com/en/8.0.x/) and [Typer](https://typer.tiangolo.com/), there is no need for any function decorators. Further, unlike with all existing solutions, including those built on top of standard [argparse](https://docs.python.org/3/library/argparse.html), DynaCLI does not build all command parsers upfront, but rather builds dynamically a single command parser based on the command line inputs. When combined with the [Python Cloud Importer](https://asher-sterkin.medium.com/serverless-cloud-import-system-760d3c4a60b9) solution, DynaCLI becomes truly _open_ with regard to a practically unlimited set of commands, all coming directly from cloud storage. This, in turn, eliminates any need for periodic updates on client workstations.\n\nAt its core, DynaCLI is a Python package structure interpreter which makes any public function executable from the command line.\n\nDynaCLI was developed by BST LABS as an open source generic infrastructure foundation for the cloud version of Python run-time within the scope of the [Cloud AI Operating System (CAIOS)](http://caios.io) project.\n\nFor details about the DynaCLI rationale and design considerations, refer to [DynaCLI Github Pages](https://bstlabs.github.io/py-dynacli/).\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install DynaCLI from the PyPi site:\n\n```bash\npip3 install dynacli\n```\n\n## Usage\n\n## Define command line interpreter entry point\n\n```python\n#!/usr/bin/env python3\n\"\"\"\nGreetings CLI\n\"\"\"\n\nimport sys\nimport os\nfrom dynacli import main\n\n# Yes you can define your own version here\n__version__ = \"1.0\"\n\ncwd = os.path.dirname(__file__)\n# The list of the paths for searching packages and modules by DynaCLI\n# This is a simplest possible configuration. Look at [TBD]() for complete list\n# of configuration options and typical use cases for each one.\nsearch_path = [f'{cwd}/<path-to-cli-functions>']\n# This needs to be done only if your sys.path does not already include it \nsys.path.extend(search_path)\n\nmain(search_path)\n```\n\n## Define commands\n\nEvery public function in your search path will be treated as a command. For example,\n\n```python\ndef hello(*names: str) -> None:\n    \"\"\"\n    Print Hello <first-name> <last-name> message\n    \n    Args:\n        names (str): variable list of names to be included in greeting\n        \n    Return: None\n    \"\"\"\n    print(f\"Hello, {' '.join(names)}\")\n```\n\n## Start using CLI\n\nJust type your command line interpreter entry point script followed by command name and arguments, if any. For example:\n\n```bash\n./say hello World! \n```\n\nGo to [tutorials/greetings](tutorials/greetings) folder and try it yourself.\n\n## Read the full documentation\n\n[DynaCLI Github Pages](https://bstlabs.github.io/py-dynacli/)\n\n## Project layout\n\n```bash\n    py-dynacli/\n    ├── docs                # (1) \n    │   └── tutorial\n    ├── scripts             # (2)\n    ├── tutorials           # (3)\n    ├── src                 # (4) \n    │   └── python\n    └── test                # (5) \n        └── integrated\n            ├── storage_X\n            │   └── cli\n            │       ├── admin\n            │       │   └── feature_C\n            │       └── dev\n            │           └── feature_A\n            ├── storage_Y\n            │   └── cli\n            │       ├── admin\n            │       │   └── feature_D\n            │       └── dev\n            │           └── feature_B\n            └── suite\n```\n\n1. The documentation files\n2. Helper bash scripts\n3. Tutorials\n4. The main source folder\n5. Here we have tests\n\n## License\n\nMIT License, Copyright (c) 2021-2022 BST LABS. See [LICENSE](LICENSE.md) file.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynacli",
    "package_url": "https://pypi.org/project/dynacli/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynacli/",
    "project_urls": {
      "Documentation": "https://bstlabs.github.io/py-dynacli/",
      "Home": "https://bstlabs.github.io/py-dynacli",
      "Source": "https://github.com/bstlabs/py-dynacli"
    },
    "release_url": "https://pypi.org/project/dynacli/1.0.1/",
    "requires_dist": [
      "black >=21.9b0 ; extra == \"dev\"",
      "pylint >=2.12.2 ; extra == \"dev\"",
      "isort >=5.9.3 ; extra == \"dev\"",
      "autoflake >=1.4 ; extra == \"dev\"",
      "flake8 >=4.0.1 ; extra == \"dev\"",
      "pre-commit >=2.17.0 ; extra == \"dev\"",
      "mkdocs-material >=8.1.2 ; extra == \"doc\""
    ],
    "requires_python": ">=3.9",
    "summary": "DynaCLI is a cloud-friendly Python library for converting pure",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16901865,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24a0697ed40c4040500504b11d487f7f85219d7d08b6a6cb0184985793485a22",
        "md5": "499ebaefc5983f38d83636a66827d824",
        "sha256": "dd42b437d259fb5fa3c44cd47d2750d198ab45a9e3ea2c9fa3a9297c557de8a5"
      },
      "downloads": -1,
      "filename": "dynacli-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "499ebaefc5983f38d83636a66827d824",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 9783,
      "upload_time": "2022-02-01T12:15:57",
      "upload_time_iso_8601": "2022-02-01T12:15:57.459021Z",
      "url": "https://files.pythonhosted.org/packages/24/a0/697ed40c4040500504b11d487f7f85219d7d08b6a6cb0184985793485a22/dynacli-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbcd1dd2eaf37f852255818dd0b2ba6a1c2c015cf3d4cf4972751e87c8cbfb51",
        "md5": "4717069339340a9f22d26ed9f0816b98",
        "sha256": "35e37acd3265a68c0fac62bca8af33762a22e7084fec025120db7f3d78545370"
      },
      "downloads": -1,
      "filename": "dynacli-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4717069339340a9f22d26ed9f0816b98",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 657519,
      "upload_time": "2022-02-01T12:15:59",
      "upload_time_iso_8601": "2022-02-01T12:15:59.010632Z",
      "url": "https://files.pythonhosted.org/packages/cb/cd/1dd2eaf37f852255818dd0b2ba6a1c2c015cf3d4cf4972751e87c8cbfb51/dynacli-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}