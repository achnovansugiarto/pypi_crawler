{
  "info": {
    "author": "",
    "author_email": "BST Labs <bstlabs@caios.io>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# DynaCLI\n\nDynaCLI (Dynamic CLI) is a cloud-friendly Python library for converting pure Python functions into Linux Shell commands on the fly.\n\nIt's ideal for automating routine development and administrative tasks in a modern cloud software environment because it supports converting a virtually unlimited set of functions into Shell commands with minimal run-time and maintenance overhead.\n\nUnlike other existing solutions such as [Click](https://click.palletsprojects.com/en/8.0.x/) and [Typer](https://typer.tiangolo.com/), there is no need for any function decorators. Further, unlike with all existing solutions, including those built on top of standard [argparse](https://docs.python.org/3/library/argparse.html), DynaCLI does not build all command parsers upfront, but rather builds dynamically a single command parser based on the command line inputs. When combined with the [Python Cloud Importer](https://asher-sterkin.medium.com/serverless-cloud-import-system-760d3c4a60b9) solution, DynaCLI becomes truly _open_ with regard to a practically unlimited set of commands, all coming directly from cloud storage. This, in turn, eliminates any need for periodic updates on client workstations.\n\nAt its core, DynaCLI is a Python package structure interpreter which makes any public function executable from the command line.\n\nDynaCLI was developed by BST LABS as an open source generic infrastructure foundation for the cloud version of Python run-time within the scope of the [Cloud AI Operating System (CAIOS)](http://caios.io) project.\n\nFor details about the DynaCLI rationale and design considerations, refer to [DynaCLI Github Pages](https://bstlabs.github.io/py-dynacli/).\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install DynaCLI from the PyPi site:\n\n```bash\npip3 install dynacli\n```\n\n## Usage\n\n## Define command line interpreter entry point\n\nYou can use `dynacli init <CLI name> path=<actual path>` command for bootstrapping the entry point file:\n\n```bash\n$ cd tutorials/greetings\n\n$ dynacli init say path=.\nSuccessfully created CLI entrypoint say at /home/ssm-user/OSS/py-dynacli/tutorials/greetings\n```\n\nThe created `say` file has some comments to change accordingly:\n\n```python\n#!/usr/bin/env python3\n\n\"\"\"\nDynaCLI bootstrap script # Change me\n\"\"\"\n\n\nimport os\nimport sys\nfrom typing import Final\n\nfrom dynacli import main\n\ncwd = os.path.dirname(os.path.realpath(__file__))\n\n__version__: Final[str] = \"0.0.0\" # Change me to define your own version\n\n\nsearch_path = [cwd] # Change me if you have different path; you can add multiple search pathes\nsys.path.extend(search_path)\n# root_packages = ['cli.dev', 'cli.admin'] # Change me if you have predefined root package name\n# main(search_path, root_packages) # Uncomment if you have root_packages defined\n\nmain(search_path)\n\n```\n\nLet's change it:\n\n```python\n#!/usr/bin/env python3\n\"\"\"\nGreetings CLI\n\"\"\"\n\nimport sys\nimport os\nfrom typing import Final\n\nfrom dynacli import main\n\ncwd = os.path.dirname(os.path.realpath(__file__))\n\n__version__: Final[str] = \"1.0\"\n\nsearch_path = [cwd]\nsys.path.extend(search_path)\n\nmain(search_path)\n```\n\nThat is it, now we have ready to go CLI.\n\n## Define commands\n\nEvery public function in your search path will be treated as a command. For example,\n\n```python\ndef hello(*names: str) -> None:\n    \"\"\"\n    Print Hello <first-name> <last-name> message\n    \n    Args:\n        names (str): variable list of names to be included in greeting\n        \n    Return: None\n    \"\"\"\n    print(f\"Hello, {' '.join(names)}\")\n```\n\n## Start using CLI\n\nLet's get the help message:\n\n```bash\n$ ./say -h\nusage: say [-h] [-v] {hello} ...\n\nGreetings CLI\n\npositional arguments:\n  {hello}\n    hello        Print Hello <first-name> <last-name> message\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --version  show program's version number and exit\n```\n\nWe can get the version as easy as:\n\n```bash\n$ ./say --version\nsay - v1.0\n```\n\nNow the help about actual command:\n\n```bash\n$ ./say hello -h\nusage: say hello [-h] [names ...]\n\npositional arguments:\n  names       variable list of names to be included in greeting\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\nFinally we can run the actual command(the hello function in fact) as:\n\n```bash\n$ ./say hello Shako Rzayev Asher Sterkin\nHello, Shako Rzayev Asher Sterkin\n```\n\nGo to [tutorials/greetings](tutorials/greetings) folder and try it yourself.\n\n## Read the full documentation\n\n[DynaCLI Github Pages](https://bstlabs.github.io/py-dynacli/)\n\n\n## License\n\nMIT License, Copyright (c) 2021-2022 BST LABS. See [LICENSE](LICENSE.md) file.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynacli",
    "package_url": "https://pypi.org/project/dynacli/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynacli/",
    "project_urls": {
      "Documentation": "https://bstlabs.github.io/py-dynacli/",
      "Home": "https://bstlabs.github.io/py-dynacli",
      "Source": "https://github.com/bstlabs/py-dynacli"
    },
    "release_url": "https://pypi.org/project/dynacli/1.0.5/",
    "requires_dist": [
      "black >=21.9b0 ; extra == \"dev\"",
      "pylint >=2.12.2 ; extra == \"dev\"",
      "isort >=5.9.3 ; extra == \"dev\"",
      "autoflake >=1.4 ; extra == \"dev\"",
      "flake8 >=4.0.1 ; extra == \"dev\"",
      "pre-commit >=2.17.0 ; extra == \"dev\"",
      "mkdocs-material >=8.1.2 ; extra == \"doc\""
    ],
    "requires_python": ">=3.8",
    "summary": "Convert your Python functions into CLI commands",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16901865,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4dacf0ce27e9c8b87b926c41cd408cd3c7ad99265ae130d4082aee53418d83b",
        "md5": "e27c995544d35459f9613051c4524851",
        "sha256": "5ebdccb49aa280f6ab35f327144ef4d1b839b87ee4a3d317aeb47f95e4e555b4"
      },
      "downloads": -1,
      "filename": "dynacli-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e27c995544d35459f9613051c4524851",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 12437,
      "upload_time": "2022-02-22T09:25:08",
      "upload_time_iso_8601": "2022-02-22T09:25:08.206360Z",
      "url": "https://files.pythonhosted.org/packages/b4/da/cf0ce27e9c8b87b926c41cd408cd3c7ad99265ae130d4082aee53418d83b/dynacli-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b06d6cef6f438a6c27d72d4cc0c76b6fc02ca2df1fb350bf653d512593b8982",
        "md5": "abf4babbd1749a7101af322afed5be7f",
        "sha256": "8cad6f3c7305eb096858fa053d95e7312b4e776a66ef1eb34678dd545050d5b6"
      },
      "downloads": -1,
      "filename": "dynacli-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "abf4babbd1749a7101af322afed5be7f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 660006,
      "upload_time": "2022-02-22T09:25:09",
      "upload_time_iso_8601": "2022-02-22T09:25:09.955561Z",
      "url": "https://files.pythonhosted.org/packages/8b/06/d6cef6f438a6c27d72d4cc0c76b6fc02ca2df1fb350bf653d512593b8982/dynacli-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}