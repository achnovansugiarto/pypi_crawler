{
  "info": {
    "author": "Kidus Adugna",
    "author_email": "kidusadugna@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "=====\ndocal\n=====\n\n\n.. image:: https://img.shields.io/pypi/v/docal.svg\n        :target: https://pypi.python.org/pypi/docal\n\n.. image:: https://img.shields.io/travis/K1DV5/docal.svg\n        :target: https://travis-ci.org/K1DV5/docal\n\n.. image:: https://readthedocs.org/projects/docal/badge/?version=latest\n        :target: https://docal.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n\n\nInject Python calculations into Word and LaTeX documents with ease!\n\n\n* Free software: MIT license\n* Documentation: https://docal.readthedocs.io.\n\ndoCal is a tool that can be used to send calculations that are written in\npython to Word or LaTeX documents. It evaluates equations in a separate python\nscript from the document and replaces hashtags in the document that indicate\nwhere the calculations should be with the results of the evaluation. It comes\nwith a powerful python expression to LaTeX converter built-in, so it converts\nthe calculations and their results to their appropriate LaTeX forms before\nsending them, which makes it ideal to make academic and scientific reports.\n\nInstallation\n============\n\nRequirements\n------------\n\n**Quick note**: in this document, shell means ``cmd`` (command prompt) or\n``powershell`` for Windows users and ``sh`` or ``bash`` for Linux and MacOS users.\n\nA basic understanding of Python in general is necessary to have a smooth\nexperience here.  If you want to work with a little more advanvced stuff, like\narrays and matrices, more knowledge about python is necessary.\n\nIt must be obvious by now but you should have Python installed on your system.\nYou can check that by opening your shell (see above) and typing the command\n``python`` and hitting Enter. If it writes the version number and other info\nabout your python installation, you already have it installed. If the version\nnumber starts with 2, you should probably install python 3 (the latest). If you\nhave python 3 or above, you\\'re good to go. If either you don\\'t have Python 3\nor you don\\'t have Python at all, you should go to `Python\\'s homepage <https://www.python.org>`_ and install it, making sure to check the box\n\\\"add python to path\\\" during installation.\n\nIf you want to work with word documents, you should have\n`Pandoc <https://pandoc.org>` installed on your system (and in your path).\nBecause docal internally only works with tex files and when a word file is\ngiven, it internally converts it to tex, modifies it and converts it back to\nword, using pandoc.\n\nInstall\n-------\n\nTo install this package, (after making sure that you have a working internet\nconnection) type the following command and hit Enter.\n\n.. codeblock:: shell\n   pip install docal\n\nOr if you have the source\n.. codeblock:: shell\n   pip install .\n\n\nUsage\n=====\n\nTypical workflow\n----------------\n\n- The user writes the static parts of the document as usual (Word or Latex) but\n  leaving sort of unique hashtags (\\#tagname) for the calculation parts (double\n  hash signs for Wrod).\n- The calculations are written on a separate text file with any text editor\n  (Notepad included) and saved next to the document file. For the syntax of the\n  calculation file, see below. But it\\'s just a python script with comments.\n- The tool is invoked with the following command:\n\n  .. codeblock:: shell\n     docal -s [calculation-file] -i [input-file] -o [output-file]\n\n  so for example,\n\n  .. codeblock:: shell\n     docal -s calcs.py -i document.tex -o document-out.tex\n\n  will be valid.  \n- Then voila! what is needed is done. The output file can be used normally.\n\nSyntax\n------\n\nThe syntax is simple. Just write the equations one line at a time. What you\nwrite in the syntax is a valid python file, (it is just a script with a lot of\nassignments and comments).\n\nComments that take whole lines\n______________________________\n\nThese comments are converted to paragraphs or equations, depending on what\ncomes immediately after the hash sign.  If the hash sign is followed by a\nsingle dollar sign (\\$), the rest of that line is expected to be a python\nequation, and will be converted to an inline LaTeX equation. If what comes\nafter the dollar sign is two dollar signs, the rest of that line will be\nconverted to a displayed (block) equation in the document. Remember, these\nequations are still in comments, and thus do not do anything except appear as\nequations.  If the hash sign is followed by just running text, it is converted\nto a paragraph text. In all cases, when a hash character immediately followed\nby a variable name like \\#x, the value of that variable will be substituted at\nthat place. When a hash character immediately followed by an expression\nsurrounded by squirrely braces like \\#{x + 2} is encountered, what is inside\nthe braces will be evaluated and substituted at that place.\n\nEquations (python assignments)\n______________________________\n\nThese are the main focus points of this module. Obviously, they are evaluated\nas normal in the script so that the value of the variable can be reused as\nalways, but when they appear in the document, they are displayed as equation\nblocks that can have up to three steps (that show the procedures).  If it is a\nsimple assignment, like ``x = 10``, they appear only having a single step,\nbecause there is no procedure to show. If the assignment contains something to\nbe evaluated but no variable reference like ``x = 10 + 5 / 2`` or if it contains\na single variable reference like ``x = x_prime`` then the procedure will have\nonly two steps, first the equation and second the results. If the equation has\nboth things to be evaluated and variable references, like ``x = 5*x_prime + 10``\nthen it will have three steps: the equation itself, the equation with variable\nreferences substituted by their values, and the result. These equations can be\ncustomized using comments at their ends (see below).\n\nComments after equations (assignments)\n______________________________\n\nThese comments are taken to be customization options for the equations.\nMultiple options can be separated by commas. The first option is units. if you\nwrite something that looks like a unit (names or expressions of names) like\n``N/m**2`` they are correctly displayed as units next to the result and whenever\nthat variable is referenced, next to its value. The next option is the display\ntype of the steps. If the option is a single dollar sign, the equation will be\ninline and if it has more than a single step, the steps appear next to each\nother. If it is double dollar signs, the equation(s) will be displayed as block\n(centered) equations. Another option is step overrides. If it is a sequence of\ndigits like ``12``, then only the steps corresponding to that number will be\ndisplayed (for this case steps 1 and 2). The last option is matrix and array\ncut-off size. Matrices are cut off and displayed with dots in them if their\nsizes are grester than 10 by 10 and arrays are cut off if they have more than\n10 elements. To override this number, the option is the letter m followed by a\nnumber like ``m6``. If the option starts with a hash sign like ``#this is a note``,\nwhat follows will be a little note that will be displayed next to the last\nstep.\n\nComments that begin with double hash signs\n______________________________\n\nIf you begin a comment line witn double hash signs, like ``## comment`` it is\ntaken as a real comment. It will not do anything.\n\nExample\n=======\n\nLet's say you have a word document ``foo.docx`` with contents like this.\n\n.. image:: https://github.com/K1DV5/doCal/raw/dev/common/images/word-in.jpg \"Word document input\"\n   :alt: Word document input\n\nAnd you write the calculations in the file ``foo.py`` next to ``foo.docx``\n.. codeblock:: python\n   ## foo.py\n   ## necessary for scientific functions\n   from math import *\n\n   #foo\n\n   # The first side of the first triangle is\n   x_1 = 5 #m\n   # and the second,\n   y_1 = 6 #m\n   # Therefore the length of the hypotenuse will be,\n   z_1 = sqrt(x_1**2 + y_1**2) #m\n\n   #bar\n\n   # Now the second triangle has sides that have lengths of\n   x_2 = 3\n   y_2 = 4\n   # and therefore has a hypotenuse of\n   z_2 = sqrt(x_2**2 + y_2**2) #m,13\n\n   # Then, we can say that the hypotenuse of the first triangle which is #z_1 long\n   # is longer than that of the second which is #z_2 long.\n\nNow, If we run the command\n.. codeblock:: shell\n   docal foo.py foo.docx\n\nA third file, named ``foo-out.docx`` will appear. And it will look like this.\n\n.. image:: https://github.com/K1DV5/doCal/raw/master/common/images/word-out.jpg \"Word document output\"\n   :alt: Word document output\n\nKnown Issues\n============\n\n- You cannot use python statements that need indenting. This is because docal\n  reads the script line by line and uses exec to make the necessary\n  assignments, and since you can't continue an already indented code with exec,\n  that will result in an error. If you have an idea to overcome this problem,\n  feel free to contact me.\n\n- TODO: A nice GUI\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the ``audreyr/cookiecutter-pypackage``_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _``audreyr/cookiecutter-pypackage``: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.4.0 (2019-02-08)\n------------------\n\n* First release on PyPI.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/K1DV5/docal",
    "keywords": "docal",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docal",
    "package_url": "https://pypi.org/project/docal/",
    "platform": "",
    "project_url": "https://pypi.org/project/docal/",
    "project_urls": {
      "Homepage": "https://github.com/K1DV5/docal"
    },
    "release_url": "https://pypi.org/project/docal/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Inject Python calculations into Word and LaTeX documents with ease!",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10930011,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f0de3f4ae14d9b29bdcc50789ced65e83b5c987a499632a09a84d8b558a3091",
        "md5": "41eeb479885961f75d8c85eb15e3973d",
        "sha256": "d27aa905cc4e042804c7d13fc2f77b7dab2d1f2395359e398492db8bf9f0ba27"
      },
      "downloads": -1,
      "filename": "docal-1.0.1-py3.7.egg",
      "has_sig": false,
      "md5_digest": "41eeb479885961f75d8c85eb15e3973d",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": null,
      "size": 49710,
      "upload_time": "2019-04-05T15:03:22",
      "upload_time_iso_8601": "2019-04-05T15:03:22.562160Z",
      "url": "https://files.pythonhosted.org/packages/8f/0d/e3f4ae14d9b29bdcc50789ced65e83b5c987a499632a09a84d8b558a3091/docal-1.0.1-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}