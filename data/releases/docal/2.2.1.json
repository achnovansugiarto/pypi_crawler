{
  "info": {
    "author": "Kidus Adugna",
    "author_email": "kidusadugna@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "docal\n=====\n\n[![image](https://img.shields.io/pypi/v/docal.svg)](https://pypi.python.org/pypi/docal)\n\nInject Python calculations into Word and LaTeX documents with ease!\n\n- Free software: MIT license\n\ndocal is a tool that can be used to send calculations that are written\nin python to Word or LaTeX documents. It evaluates equations in a\nseparate python script from the document and replaces hashtags in the\ndocument that indicate where the calculations should be with the results\nof the evaluation. It comes with a powerful python expression to LaTeX\nconverter built-in, so it converts the calculations and their results to\ntheir appropriate LaTeX forms before sending them, which makes it ideal\nto make academic and scientific reports.\n\nInstallation\n------------\n\n### Requirements\n\nA basic understanding of Python in general is necessary to have a smooth\nexperience here (although you will do fine even if you don\\'t).If you want to\nwork with a little more advanvced stuff, like arrays and matrices, more\nknowledge about python is necessary.\n\nIt must be obvious by now but you should have Python installed on your\nsystem. You can check that by opening your shell (see above) and typing\nthe command `python` and hitting Enter. If it writes the version number\nand other info about your python installation, you already have it\ninstalled. If the version number starts with 2, you should probably\ninstall python 3 (the latest). If you have python 3 or above, you\\'re\ngood to go. If either you don\\'t have Python 3 or you don\\'t have Python\nat all, you should go to [Python\\'s homepage](https://www.python.org)\nand install it, making sure to check the box \\\"add python to path\\\"\nduring installation.\n\nIf you want to work with word documents, you should have\n[Pandoc](https://pandoc.org) installed on your system (and in\nyour PATH). Because docal internally only works with tex files and when\na word file is given, it internally converts it to tex, modifies it and\nconverts it back to word, using pandoc.\n\n### Install\n\nTo install this package, (after making sure that you have a working\ninternet connection) type the following command and hit Enter.\n\n```shell\npip install docal\n```\n\nOr from the source:\n\n```shell\npip install .\n```\n\nUsage\n-----\n\n### Typical workflow\n\n- The user writes the static parts of the document as usual (Word or\n  Latex) but leaving sort of unique hashtags (\\#tagname) for the\n  calculation parts (double hash signs for Wrod).\n\n- The calculations are written on a separate text file with any text\n  editor (Notepad included) and saved next to the document file. For\n  the syntax of the calculation file, see below. But it\\'s just a\n  python script with comments.\n\n- The tool is invoked with the following command:\n\n  ```shell\n  docal [calculation-file] -i [input-file] -o [output-file]\n  ```\n\n  so for example,\n\n  ```shell\n  docal calcs.py -i document.tex -o document-out.tex\n  ```\n- Then voila! what is needed is done. The output file can be used\n  normally.\n\n### Syntax\n\nThe syntax is simple. Just write the equations one line at a time. What\nyou write in the syntax is a valid Python file, (it is just a script\nwith a lot of assignments and comments).\n\n#### Comments that take whole lines\n\nThese comments are converted to paragraphs or equations, depending on\nwhat comes immediately after the hash sign. If the hash sign is followed\nby a single dollar sign (\\$), the rest of that line is expected to be a\npython equation, and will be converted to an inline LaTeX equation. If\nwhat comes after the dollar sign is two dollar signs, the rest of that\nline will be converted to a displayed (block) equation in the document.\nRemember, these equations are still in comments, and thus do not do\nanything except appear as equations. If the hash sign is followed by\njust running text, it is converted to a paragraph text. In all cases,\nwhen a hash character immediately followed by a variable name like \\#x,\nthe value of that variable will be substituted at that place. When a\nhash character immediately followed by an expression surrounded by\nsquirrely braces like \\#{x + 2} is encountered, what is inside the\nbraces will be evaluated and substituted at that place.\n\n#### Equations (python assignments)\n\nThese are the main focus points of this module. Obviously, they are\nevaluated as normal in the script so that the value of the variable can\nbe reused as always, but when they appear in the document, they are\ndisplayed as equation blocks that can have up to three steps (that show\nthe procedures). If it is a simple assignment, like `x = 10`, they\nappear only having a single step, because there is no procedure to show.\nIf the assignment contains something to be evaluated but no variable\nreference like `x = 10 + 5 / 2` or if it contains a single variable\nreference like `x = x_prime` then the procedure will have only two\nsteps, first the equation and second the results. If the equation has\nboth things to be evaluated and variable references, like\n`x = 5*x_prime + 10` then it will have three steps: the equation itself,\nthe equation with variable references substituted by their values, and\nthe result. These equations can be customized using comments at their\nends (see below).\n\n##### Comments after equations (assignments)\n\nThese comments are taken to be customization options for the equations.\nMultiple options can be separated by commas. The first option is units.\nif you write something that looks like a unit (names or expressions of\nnames) like `N/m**2` they are correctly displayed as units next to the\nresult and whenever that variable is referenced, next to its value. The\nnext option is the display type of the steps. If the option is a single\ndollar sign, the equation will be inline and if it has more than a\nsingle step, the steps appear next to each other. If it is double dollar\nsigns, the equation(s) will be displayed as block (centered) equations.\nAnother option is step overrides. If it is a sequence of digits like\n`12`, then only the steps corresponding to that number will be displayed\n(for this case steps 1 and 2). The last option is matrix and array\ncut-off size. Matrices are cut off and displayed with dots in them if\ntheir sizes are grester than 10 by 10 and arrays are cut off if they\nhave more than 10 elements. To override this number, the option is the\nletter m followed by a number like `m6`. If the option starts with a\nhash sign like `#this is a note`, what follows will be a little note\nthat will be displayed next to the last step.\n\n##### Comments that begin with double hash signs\n\nIf you begin a comment line witn double hash signs, like `## comment` it\nis taken as a real comment. It will not do anything.\n\nExample\n-------\n\nLet\\'s say you have a word document `foo.docx` with contents like this.\n\n![Word document input](https://github.com/K1DV5/doCal/raw/dev/common/images/word-in.jpg%20%22Word%20document%20input%22)\n\nAnd you write the calculations in the file `foo.py` next to `foo.docx`\n```python\n## foo.py\n## necessary for scientific functions:\nfrom math import *\n\n#foo\n\n# The first side of the first triangle is\nx_1 = 5 #m\n# and the second,\ny_1 = 6 #m\n# Therefore the length of the hypotenuse will be,\nz_1 = sqrt(x_1**2 + y_1**2) #m\n\n#bar\n\n# Now the second triangle has sides that have lengths of\nx_2 = 3\ny_2 = 4\n# and therefore has a hypotenuse of\nz_2 = sqrt(x_2**2 + y_2**2) #m,13\n\n# Then, we can say that the hypotenuse of the first triangle which is #z_1 long\n# is longer than that of the second which is #z_2 long.\n```\n\nNow, If we run the command \n\n```shell\ndocal foo.py -o foo.docx\n```\n\nA third file, named `foo-out.docx` will appear. And it will look like\nthis.\n\n![Word document output](https://github.com/K1DV5/doCal/raw/master/common/images/word-out.jpg%20%22Word%20document%20output%22)\n\nKnown Issues\n------------\n\n- ~~You cannot use python statements that need indenting. This is~~\n  ~~because docal reads the script line by line and uses exec to make~~\n  ~~the necessary assignments, and since you can\\'t continue an already~~\n  ~~indented code with exec, that will result in an error. If you have~~\n  ~~an idea to overcome this problem, feel free to contact me.~~\n  The whole script is parsed with Python's AST so you can write whatever you like\n  as long as it is a valid python.\n- TODO: ~~A nice GUI~~ GUI project started. See https://github.com/K1DV5/docal-tkinter.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/K1DV5/docal",
    "keywords": "docal",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docal",
    "package_url": "https://pypi.org/project/docal/",
    "platform": "",
    "project_url": "https://pypi.org/project/docal/",
    "project_urls": {
      "Homepage": "https://github.com/K1DV5/docal"
    },
    "release_url": "https://pypi.org/project/docal/2.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Inject calculations into Word and LaTeX documents with ease!",
    "version": "2.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10930011,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c9de937844169ef5c18ea6acbceade6683cd2aaf74eb4f6e353d9c04ee81b47",
        "md5": "a56697b98e999a365ad6b79d1a5356b4",
        "sha256": "6b7c787f441f8d37038bb9c5ad35eebd280945a12abeac653a45b8b3529bd7c4"
      },
      "downloads": -1,
      "filename": "docal-2.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a56697b98e999a365ad6b79d1a5356b4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 31654,
      "upload_time": "2020-01-24T07:15:32",
      "upload_time_iso_8601": "2020-01-24T07:15:32.327807Z",
      "url": "https://files.pythonhosted.org/packages/2c/9d/e937844169ef5c18ea6acbceade6683cd2aaf74eb4f6e353d9c04ee81b47/docal-2.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1510f0570d900e612bb84534fcc396bcd802016d66bb552c974f988c1911e9e7",
        "md5": "557ca0c3fb531560ec56a27ae4946238",
        "sha256": "4506583ee6af2fa41403eb2ea171b0ec4416595f17cafa9490bf42cf6d464368"
      },
      "downloads": -1,
      "filename": "docal-2.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "557ca0c3fb531560ec56a27ae4946238",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32168,
      "upload_time": "2020-01-24T07:15:34",
      "upload_time_iso_8601": "2020-01-24T07:15:34.108428Z",
      "url": "https://files.pythonhosted.org/packages/15/10/f0570d900e612bb84534fcc396bcd802016d66bb552c974f988c1911e9e7/docal-2.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}