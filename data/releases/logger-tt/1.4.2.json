{
  "info": {
    "author": "Nguyen Ba Duc Tin",
    "author_email": "nguyenbaduc.tin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Logger_tt\nMake configuring logging simpler and log even exceptions that you forgot to catch.\n\n## Install\n* From PYPI: `pip install logger_tt`\n* From Github: clone or download this repo then `python setup.py install` \n\n## Overview:\n\nIn the most simple case, add the following code into your main python script of your project:\n\n```python\nfrom logger_tt import setup_logging    \n\nsetup_logging()\n```\n\nThen from any of your modules, you just need to get a `logger` and start logging.\n\n```python\nfrom logging import getLogger\n\nlogger = getLogger(__name__)\n\nlogger.debug('Module is initialized')\nlogger.info('Making connection ...')\n```\n\n\nThis will provide your project with the following **default** log behavior:\n\n* log file: Assume that your `working directory` is `project_root`,\n log.txt is stored at your `project_root/logs/` folder. \nIf the log path doesn't exist, it will be created. \nThe log file is time rotated at midnight. A maximum of 15 dates of logs will be kept.\nThis log file's `level` is `DEBUG`.<br>\nThe log format is `[%(asctime)s] [%(name)s %(levelname)s] %(message)s` where time is `%Y-%m-%d %H:%M:%S`.<br>\nExample: `[2020-05-09 00:31:33] [myproject.mymodule DEBUG] Module is initialized`\n\n* console: log with level `INFO` and above will be printed to `stdout` of the console. <br>\nThe format for console log is simpler: `[%(asctime)s] %(levelname)s: %(message)s`. <br>\nExample: `[2020-05-09 00:31:34] INFO: Making connection ...`\n\n* `urllib3` logger: this ready-made logger is to silent unwanted messages from `requests` library.\n* suppressed logger: `exchangelib`. This sets logging level of `exchangelib` logger to `WARNING`.<br>\nThis is another way to silent unwanted messages from other module, read below for details.\n\n* `root` logger: if there is no logger initialized in your module, this logger will be used with the above behaviors.\nThis logger is also used to log **uncaught exception** in your project. Example:\n\n```python\nraise RecursionError\n```\n\n```python\n# log.txt\n[2020-05-31 19:16:01] [root ERROR] Uncaught exception\nTraceback (most recent call last):\n  File \"D:/MyProject/Echelon/eyes.py\", line 13, in <module>\n    raise RecursionError\n    => var_in = Customer(name='John', member_id=123456)\n    => arg = (456, 789)\n    => kwargs = {'my_kw': 'hello', 'another_kw': 'world'}\nRecursionError\n```\n\n* context logging: When an exception occur, variables used in the line of error are also logged.<br>\nIf the line of error is `raise {SomeException}`, then local variables are also logged.<br>\nTo always log full local variables, pass `full_context=True` to `setup_logging`.\n\n\n## Usage:\nAll configs are done through `setup_logging` function:\n```python\nsetup_logging(config_path=\"\", log_path=\"\", \n              capture_print=False, strict=False, guess_level=False,\n              full_context=False,\n              suppress_level_below=logging.WARNING)\n```\n\n\n1. You can overwrite the default log path with your own as follows:\n\n   ```python\n   setup_logging(log_path='new/path/to/your_log.txt')\n   ```\n\n2. You can config your own logger and handler by providing either `yaml` or `json` config file as follows:\n\n   ```python\n   setup_logging(config_path='path/to/.yaml_or_.json')\n   ```\n\n   Without providing a config file, the default config file with the above **default** log behavior is used.\n   You could copy `log_conf.yaml` or `log_conf.json` shipped with this package to start making your version.\n\n   **Warning**: To process `.yaml` config file, you need `pyyaml` package: `pip install pyyaml`\n\n3. Capture stdout:\n\n   If you have an old code base with a lot of `print(msg)` or `sys.stdout.write(msg)` and \n   don't have access or time to refactor them into something like `logger.info(msg)`, \n   you can capture these `msg` and log them to file, too.\n\n   To capture only `msg` that is printed out by `print(msg)`, simply do as follows: \n\n   ```python\n   setup_logging(capture_print=True)\n   ```\n\n   Example:\n   ```python\n   print('To be or not to be')\n   sys.stdout.write('That is the question')\n   ```\n\n   ```\n   # log.txt\n   [2020-05-09 11:42:08] [PrintCapture INFO] To be or not to be\n   ```\n\n   <hr>\n\n   Yes, `That is the question` is not captured. \n   Some libraries may directly use `sys.stdout.write` to draw on the screen (eg. progress bar) or do something quirk.\n   This kind of information is usually not useful for users. But when you do need it, you can capture it as follows:\n\n   ```python\n   setup_logging(capture_print=True, strict=True)\n   ```\n\n   Example:\n   ```python\n   sys.stdout.write('The plane VJ-723 has been delayed')\n   sys.stdout.write('New departure time has not been scheduled')\n   ```\n\n   ```\n   # log.txt\n   [2020-05-09 11:42:08] [PrintCapture INFO] The plane VJ-723 has been delayed\n   [2020-05-09 11:42:08] [PrintCapture INFO] New departure time has not been scheduled\n   ```\n\n   <hr>\n\n   As you have seen, the log level of the captured message is `INFO` . \n   What if the code base prints something like `An error has occurred. Abort operation.` and you want to log it as `Error`?\n   Just add `guess_level=True` to `setup_logging()`.\n\n   ```python\n   setup_logging(capture_print=True, guess_level=True)\n   ```\n\n   Example:\n   ```python\n   print('An error has occurred. Abort operation.')\n   print('A critical error has occurred during making request to database')\n   ```\n\n   ```\n   # log.txt\n   [2020-05-09 11:42:08] [PrintCapture ERROR] An error has occurred. Abort operation.\n   [2020-05-09 11:42:08] [PrintCapture CRITICAL] A critical error has occurred during making request to database\n   ```\n\n   **Note**: Capturing stdout ignores messages of `blank line`. \n   That means messages like `\\n\\n` or `  `(spaces) will not appear in the log. \n   But messages that contain blank line(s) and other characters will be fully logged.\n   For example, `\\nTo day is a beautiful day\\n` will be logged as is.  \n\n4. Exception logging:\n\n   Consider the following error code snippet:\n\n   ```python\n   API_KEY = \"asdjhfbhbsdf82340hsdf09u3ionf98230234ilsfd\"\n   TIMEOUT = 60\n\n   class MyProfile:\n       def __init__(self, name):\n           self.my_boss = None\n           self.name = name\n\n   def my_faulty_func(my_var, *args, **kwargs):\n       new_var = 'local scope variable'\n       me = MyProfile('John Wick')\n       boss = MyProfile('Winston')\n       me.my_boss = boss\n       print(f'Information: {var} and {me.my_boss.name}' \n              ' at {me.my_boss.location} with {API_KEY}')\n\n   if __name__ == '__main__':\n       cpu_no = 4\n       max_concurrent_processes = 3\n       my_faulty_func(max_concurrent_processes, 'ryzen 7', freq=3.4)\n   ```\n\n   In our hypothetical code above,`print` function will raise an exception. \n   This exception, by default, will not only be logged but also analyzed with objects that appeared in the line:\n\n   ```python\n   [2020-06-06 09:36:01] ERROR: Uncaught exception:\n   Traceback (most recent call last):\n     File \"D:/MyProject/AutoBanking/main.py\", line 31, in <module>\n       my_faulty_func(max_concurrent_processes, 'ryzen 7', freq=3.4)\n        |-> my_faulty_func = <function my_faulty_func at 0x0000023770C6A288>\n        |-> max_concurrent_processes = 3\n\n     File \"D:/MyProject/AutoBanking/main.py\", line 25, in my_faulty_func\n       print(f'Information: {var} and {me.my_boss.name}'\n              ' at {me.my_boss.location} with {API_KEY}')\n        |-> me.my_boss.name = 'Winston'\n        |-> me.my_boss.location = '!!! Not Exists'\n        |-> (outer) API_KEY = 'asdjhfbhbsdf82340hsdf09u3ionf98230234ilsfd'\n   NameError: name 'var' is not defined\n   ```\n\n   **Note**: look at the `print(f'Information...` line, \n   `logger-tt` print this error line different from normal python traceback!\n   With normal traceback, multi-line python statement has its only first line printed out.\n   With `logger-tt`, full statement is grabbed for you.\n\n   For each level in the stack, any object that appears in the error line is shown with its `readable representation`.\n   This representation may not necessarily be `__repr__`. The choice between `__str__` and `__repr__` are as follows:\n   * `__str__` : `__str__` is present and the object class's `__repr__` is default with `<class name at Address>`.\n   * `__repr__`: `__str__` is present but the object class's `__repr__` is anything else, such as `ClassName(var=value)`.<br>\n   Also, when `__str__` is missing, even if `__repr__` is `<class name at Address>`, it is used.\n\n   Currently, if an object doesn't exist and is directly accessed, as `var` in this case, it will not be shown up.\n   But if it is attribute accessed with dot `.`, as `location` in `me.my_boss.location`, \n   then its value is an explicit string `'!!! Not Exists'`.\n\n   As you may have noticed, a variable `API_KEY` has its name prefixed with `outer`. <br>\n   This tells you that the variable is defined in the outer scope, not local. \n\n   More often than not, only objects in the error line are not sufficient to diagnose what has happened.\n   You want to know what the inputs of the function were. You want to know what the intermediate \n   calculated results were. You want to know other objects that appeared during runtime,\n   not only local but also outer scope. In other words, you want to know the full context of what has happened.\n   `logger-tt` is here with you:\n\n   ```python\n   setup_logging(full_context=True)\n   ```\n\n   With the above hypothetical code snippet, the error log becomes the following:\n\n   ```python\n   [2020-06-06 10:35:21] ERROR: Uncaught exception:\n   Traceback (most recent call last):\n     File \"D:/MyProject/AutoBanking/main.py\", line 31, in <module>\n       my_faulty_func(max_concurrent_processes, 'ryzen 7', freq=3.4)\n        |-> my_faulty_func = <function my_faulty_func at 0x0000019E3599A288>\n        |-> max_concurrent_processes = 3\n        => __name__ = '__main__'\n        => __doc__ = None\n        => __package__ = None\n        => __loader__ = <_frozen_importlib_external.SourceFileLoader object at 0x0000019E35840E48>\n        => __spec__ = None\n        => __annotations__ = {}\n        => __builtins__ = <module 'builtins' (built-in)>\n        => __file__ = 'D:/MyProject/AutoBanking/main.py'\n        => __cached__ = None\n        => setup_logging = <function setup_logging at 0x0000019E35D111F8>\n        => getLogger = <function getLogger at 0x0000019E35BC7C18>\n        => logger = <Logger __main__ (DEBUG)>\n        => API_KEY = 'asdjhfbhbsdf82340hsdf09u3ionf98230234ilsfd'\n        => TIMEOUT = 60\n        => MyProfile = <class '__main__.MyProfile'>\n        => cpu_no = 4\n\n     File \"D:/MyProject/AutoBanking/main.py\", line 25, in my_faulty_func\n       print(f'Information: {var} and {me.my_boss.name} at {me.my_boss.location} with {API_KEY}')\n        |-> me.my_boss.name = 'Winston'\n        |-> me.my_boss.location = '!!! Not Exists'\n        |-> (outer) API_KEY = 'asdjhfbhbsdf82340hsdf09u3ionf98230234ilsfd'\n        => my_var = 3\n        => args = ('ryzen 7',)\n        => kwargs = {'freq': 3.4}\n        => new_var = 'local scope variable'\n        => me = <__main__.MyProfile object at 0x0000019E35D3BA48>\n        => boss = <__main__.MyProfile object at 0x0000019E35D3B9C8>\n   NameError: name 'var' is not defined\n   ```\n\n   Additional objects that not appear in the error line are prefixed with `=>`.\n\n5. `try-except` exception logging:\n\n   `exception context` logging also applies for `try-except` block.\n    This means that if you call `logger.exception()` inside `except` block, \n    you would have all variables' value at the line of exception. For example,\n\n   ```python\n   def my_faulty_func():\n       a = 10\n       b = 0\n       c = a/b\n       return c\n\n   def my_main():\n       try:\n           my_faulty_func()\n       except Exception as e:\n           logger.exception('some error has occured')\n           print('Clean up resource')\n\n   my_main()\n   ``` \n\n   Then the log will show up as follows:\n\n   ```python\n   [2020-06-12 21:37:00] ERROR: some error has occured\n   Traceback (most recent call last):\n     File \"D:/MyProject/exception_log.py\", line 19, in my_main\n       my_faulty_func()\n        |-> my_faulty_func = <function my_faulty_func at 0x000001875DD4B168>\n\n     File \"D:/MyProject/exception_log.py\", line 13, in my_faulty_func\n       c = a / b\n        |-> a = 10\n        |-> b = 0\n   ZeroDivisionError: division by zero\n   Clean up resource\n   ```\n\n   **Note**: As in python's [logging document](https://docs.python.org/3/library/logging.html#logging.Logger.exception),\n    `logger.exception()` should only be called from an exception handler, eg. inside `except` block.\n\n   You don't need to pass `exception object` to `logger.exception()`. \n   It already knows how to get a traceback internally. \n   This enable you to pass any string in as a hint or a short description of what may have happened.  \n   Otherwise, passing `exception object`, as `logger.exception(e)`, \n   will cause the first line of error report to be the message of exception. \n   In the case of the above example, it would be come `[2020-06-12 21:37:00] ERROR: division by zero`.\n\n6. Silent unwanted logger:\n\n   Third party modules also have logger and their messages are usually not related to your code.\n   A bunch of unwanted messages may hide the one that come from your own module. \n   To prevent that and also reduce log file size, we need to silent unwanted loggers.\n\n   There are two ways to silent a logger with config file:\n\n   * Create a new logger: in `logger` section of config file, \n   add a new logger whose name is the same with the one you want to silent. \n   Set it level to `WARNING` or above. If you add `handlers`, you should also set `propagate` to `no` or `False`.\n   Otherwise, the same message may be logged multiple times. Ex:\n\n         urllib3:\n           level: WARNING\n           handlers: [console, error_file_handler]\n           propagate: no\n\n     Above setting only allow messages with level `WARNING` and above to be processed. \n     Usually that is enough to silent most of unwanted messages. If you need to silent more messages,\n     try `ERROR` or `CRITICAL`.\n\n   * Add logger's name to `suppress list`: Then a new logger with level default to `WARNING` will be \n   automatically created for you. Ex:\n\n         suppress: [exchangelib, urllib3]\n\n     If you need to suppress at even higher level, use `suppress_level_below` in `setup_logging`.\n     For example suppress any message below `ERROR` level that comes from loggers in `suppress list`:\n\n         setup_logging(suppress_level_below=logging.ERROR)\n\n# Sample config:\n\n1. Yaml format:\n\n   log_config.yaml:\n\n   ```yaml\n   version: 1\n   disable_existing_loggers: False\n   formatters:\n     simple:\n       format: \"[%(asctime)s] [%(name)s %(levelname)s] %(message)s\"\n       datefmt: \"%Y-%m-%d %H:%M:%S\"\n     brief: {\n       format: \"[%(asctime)s] %(levelname)s: %(message)s\"\n       datefmt: \"%Y-%m-%d %H:%M:%S\"\n   handlers:\n     console:\n       class: logging.StreamHandler\n       level: INFO\n       formatter: simple\n       stream: ext://sys.stdout\n\n     error_file_handler:\n       class: logging.handlers.TimedRotatingFileHandler\n       level: DEBUG\n       formatter: simple\n       filename: logs/log.txt\n       backupCount: 15\n       encoding: utf8\n       when: midnight\n\n   loggers:\n     urllib3:\n       level: WARNING\n       handlers: [console, error_file_handler]\n       propagate: no\n\n   root:\n     level: DEBUG\n     handlers: [console, error_file_handler]\n\n   suppress: [exchangelib]\n   ```\n\n<br>\n2. Json format:\n\n   log_config.json:\n\n   ```json\n   {\n     \"version\": 1,\n     \"disable_existing_loggers\": false,\n     \"formatters\": {\n       \"simple\": {\n         \"format\": \"[%(asctime)s] [%(name)s %(levelname)s] %(message)s\",\n         \"datefmt\": \"%Y-%m-%d %H:%M:%S\"\n       },\n       \"brief\": {\n         \"format\": \"[%(asctime)s] %(levelname)s: %(message)s\",\n         \"datefmt\": \"%Y-%m-%d %H:%M:%S\"\n       }\n     },\n\n     \"handlers\": {\n       \"console\": {\n         \"class\": \"logging.StreamHandler\",\n         \"level\": \"INFO\",\n         \"formatter\": \"brief\",\n         \"stream\": \"ext://sys.stdout\"\n       },\n\n       \"error_file_handler\": {\n         \"class\": \"logging.handlers.TimedRotatingFileHandler\",\n         \"level\": \"DEBUG\",\n         \"formatter\": \"simple\",\n         \"filename\": \"logs/log.txt\",\n         \"backupCount\": 15,\n         \"encoding\": \"utf8\",\n         \"when\": \"midnight\"\n       }\n     },\n\n     \"loggers\": {\n       \"urllib3\": {\n         \"level\": \"ERROR\",\n         \"handlers\": [\"console\", \"error_file_handler\"],\n         \"propagate\": false\n       }\n     },\n\n     \"root\": {\n       \"level\": \"DEBUG\",\n       \"handlers\": [\"console\", \"error_file_handler\"]\n     },\n\n     \"suppress\": [\"exchangelib\"]\n   }\n   ```\n\n# changelog\n## 1.4.2\nTo prevent exception during logging, the following actions have been applied:\n* Catch exception while parsing for object's value (property of a class)\n* Catch exception while evaluating `__repr__` and `__str__` of object\n* Disable logging while inspecting objects' value and representation\n* Disable logging after an uncaught exception is logged. \n  Because the interpreter is shutting down, objects get deleted. \n  Logging put inside magic function `__del__` will raise error.\n\n## 1.4.1\n* Fix `print_capture` ignoring `print()` line in global scope due to lacking `code_context` frame\n* If `__str__` of an object has multiple lines, also indent the second line and so on accordingly.\n* If there is an exception during getting object's representation, \nreturn `!!! Attribute error` instead of `Error in sys.excepthook`\n\n## 1.4.0\n* Add an extra field `suppress` in config file. \nAny logger's name appeared in this list will have its messages suppressed.\n\n## 1.3.2\n* change extended ascii dash ` ─ ` to normal dash `-` \nso that it is displayed consistently in different encoding \n\n## 1.3.1\n* change extended ascii vertical bar ` ├ ` to normal bar `|` \nso that it is displayed consistently in different encoding \n\n## 1.3.0\n* Exception analyzing now fetch full multi-line python statement. \nThis means that variables lie at seconds and below of the same statement can also be seen \nwithout the need of `full_context=True`.\n\n## 1.2.1\n* Extend logging context to `logger.exception()` as well. \nNow you can do `try-except` a block of code and still have a full context at error line. \n\n## 1.2.0\n* Add logging context for uncaught exception. Now automatically log variables surrounding the error line, too.\n* Add test cases for logging exception\n\n## 1.1.1\n* Fixed typos and grammar\n* Add config file sample to README\n* using full name `log_config.json` instead of `log_conf.json`, the same for yaml file \n* add test cases for `capture print`\n\n## 1.1.0\n* Add `capture print` functionality with `guess level` for the message.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dragon2fly/logger_tt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logger-tt",
    "package_url": "https://pypi.org/project/logger-tt/",
    "platform": "Any platform -- don't need Windows",
    "project_url": "https://pypi.org/project/logger-tt/",
    "project_urls": {
      "Homepage": "https://github.com/Dragon2fly/logger_tt"
    },
    "release_url": "https://pypi.org/project/logger-tt/1.4.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Make logging simple, log even exception that you forgot to catch",
    "version": "1.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17161471,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df6ae03d2077f1ccd0f0ea8652ca383ec41c4f82b2ee845d80f93a9d224ca395",
        "md5": "d9224761ef930a090cd00591fa5b8907",
        "sha256": "9b3220e8a67ff27db6cf2205e8f509d53147a11b0aecbcda36653db5668031dc"
      },
      "downloads": -1,
      "filename": "logger_tt-1.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d9224761ef930a090cd00591fa5b8907",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16128,
      "upload_time": "2020-07-19T15:00:30",
      "upload_time_iso_8601": "2020-07-19T15:00:30.154777Z",
      "url": "https://files.pythonhosted.org/packages/df/6a/e03d2077f1ccd0f0ea8652ca383ec41c4f82b2ee845d80f93a9d224ca395/logger_tt-1.4.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eef439da80a65ef5da55f060cb32c49aea4b9a7feba037cecee34720fc0f31eb",
        "md5": "c51554872ffcb5a219855ceebffb3fe1",
        "sha256": "2ffff47a21cc12c00dfce19c936c85d10be0eb6c1a5349a67f9ba0f0998ac2df"
      },
      "downloads": -1,
      "filename": "logger_tt-1.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c51554872ffcb5a219855ceebffb3fe1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23933,
      "upload_time": "2020-07-19T15:00:31",
      "upload_time_iso_8601": "2020-07-19T15:00:31.612884Z",
      "url": "https://files.pythonhosted.org/packages/ee/f4/39da80a65ef5da55f060cb32c49aea4b9a7feba037cecee34720fc0f31eb/logger_tt-1.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}