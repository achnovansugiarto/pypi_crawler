{
  "info": {
    "author": "Nguyen Ba Duc Tin",
    "author_email": "nguyenbaduc.tin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Logger_tt\nMake configuring logging simpler and log even exceptions that you forgot to catch.\n\n## Usage:\n**Install**: `pip install logger_tt`\n\nIn the most simple case, add the following code into your main python script of your project:\n\n```python\nfrom logger_tt import setup_logging    \n\nsetup_logging()\n```\n\nThen from any of your modules, you just need to get a `logger` and start logging.\n\n```python\nfrom logging import getLogger\n\nlogger = getLogger(__name__)\n\nlogger.debug('Module is initialized')\nlogger.info('Making connection ...')\n```\n\n\nThis will provide your project the following **default** log behavior:\n\n* log file: Assume that your `working directory` is `project_root`,\n log.txt is stored at your `project_root/logs/` folder. \nIf log path doesn't exist, it will be created. \nThe log file is time rotated at midnight. Maximum of 15 dates of log will be kept.\nThis log file's `level` is `DEBUG`.<br>\nThe log format is `[%(asctime)s] [%(name)s %(levelname)s] %(message)s` where time is `%Y-%m-%d %H:%M:%S`.<br>\nExample: `[2020-05-09 00:31:33] [myproject.mymodule DEBUG] Module is initialized`\n\n* console: log with level `INFO` and above will be printed to `stdout` of console. <br>\nThe format for console log is simpler: `[%(asctime)s] %(levelname)s: %(message)s`. <br>\nExample: `[2020-05-09 00:31:34] INFO: Making connection ...`\n\n* `urllib3` logger: this ready made logger is to silent unwanted messages from `requests` library.\n\n* `root` logger: if there is no logger initialized in your module, this logger will be used with above behaviors.\nThis logger is also used to log **uncaught exception** in your project. Example:\n\n```python\nraise RecursionError\n```\n\n```python\n# log.txt\n[2020-05-09 11:42:08] [root ERROR] Uncaught exception\nTraceback (most recent call last):\n  File \"D:/MyProject/Echelon/eyes.py\", line 13, in <module>\n    raise RecursionError\nRecursionError\n```\n\n## Config:\nAll config are done through `setup_logging` function:\n```python\nsetup_logging(config_path=\"\", log_path=\"\", capture_print=False, strict=False, guess_level=False)\n```\n\n\n1. You can overwrite the default log path with your own as following:\n\n   ```python\n   setup_logging(log_path='new/path/to/your_log.txt')\n   ```\n\n2. You can config your own logger and handler by providing either `yaml` or `json` config file as following:\n\n   ```python\n   setup_logging(config_path='path/to/.yaml_or_.json')\n   ```\n\n   Without providing a config file, the default config file with above **default** log behavior is used.\n   You could copy `log_conf.yaml` or `log_conf.json` shipped with this package to start making your version.\n\n   **Warning**: To process `.yaml` config file, you need to `pyyaml` package: `pip install pyyaml`\n\n3. Capture stdout:\n   If you have old code base with a lot of `print(msg)` or `sys.stdout.write(msg)` and \n   don't have access or time to refactor them into something like `logger.info(msg)`, \n   you can capture these `msg` and log them to file, too.\n\n   To capture only `msg` that is printed out by `print(msg)`, simply do as following: \n\n   ```python\n   setup_logging(capture_print=True)\n   ```\n\n   Example:\n   ```python\n   print('To be or not to be')\n   sys.stdout.write('That is the question')\n   ```\n\n   ```\n   # log.txt\n   [2020-05-09 11:42:08] [PrintCapture INFO] To be or not to be\n   ```\n\n   <hr>\n\n   Yes, `That is the question` is not captured. \n   Some library may directly use `sys.stdout.write` to draw on the screen or do something quirk, \n   with is usually not a useful information. But when you do need it, you can capture it as following:\n\n   ```python\n   setup_logging(capture_print=True, strict=True)\n   ```\n\n   Example:\n   ```python\n   sys.stdout.write('The plane VJ-723 has been delayed')\n   sys.stdout.write('New departure time has not been scheduled')\n   ```\n\n   ```\n   # log.txt\n   [2020-05-09 11:42:08] [PrintCapture INFO] The plane VJ-723 has been delayed\n   [2020-05-09 11:42:08] [PrintCapture INFO] New departure time has not been scheduled\n   ```\n\n   <hr>\n   As you have seen, the log level of captured message is `INFO`. \n   What if the code base prints something like `An error has occurred. Abort operation.` and you want to log it as `Error`,\n   just add `guess_level=True` to `setup_logging()`.\n\n   ```python\n   setup_logging(capture_print=True, guess_level=True)\n   ```\n\n   Example:\n   ```python\n   print('An error has occurred. Abort operation.')\n   print('A critical error has occurred during making request to database')\n   ```\n\n   ```\n   # log.txt\n   [2020-05-09 11:42:08] [PrintCapture ERROR] An error has occurred. Abort operation.\n   [2020-05-09 11:42:08] [PrintCapture CRITICAL] A critical error has occurred during making request to database\n   ```\n\n\n   **Note**: Capturing stdout ignores messages of `blank line`. \n   That means messages like `\\n\\n` or `  `(spaces) will not appear in the log. \n   But messages that contain blank line(s) and other characters will be fully logged.\n   For example, `\\nTo day is a beautiful day\\n` will be logged as is.  \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dragon2fly/logger_tt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logger-tt",
    "package_url": "https://pypi.org/project/logger-tt/",
    "platform": "Any platform -- don't need Windows",
    "project_url": "https://pypi.org/project/logger-tt/",
    "project_urls": {
      "Homepage": "https://github.com/Dragon2fly/logger_tt"
    },
    "release_url": "https://pypi.org/project/logger-tt/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Make logging simple, log even exception that you forgot to catch",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17161471,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e31c892c64869f76ee81a6bbc85172243c854936b5e589f3b7c51abffee554dc",
        "md5": "dab4e51d0a5272e89b08c401b65ac896",
        "sha256": "68335a3c0487ae7cbc2c96799e067ce869bd6d9cd566c679e0e70c55dbefc218"
      },
      "downloads": -1,
      "filename": "logger_tt-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dab4e51d0a5272e89b08c401b65ac896",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7322,
      "upload_time": "2020-05-10T04:49:56",
      "upload_time_iso_8601": "2020-05-10T04:49:56.060395Z",
      "url": "https://files.pythonhosted.org/packages/e3/1c/892c64869f76ee81a6bbc85172243c854936b5e589f3b7c51abffee554dc/logger_tt-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "317f927214f43360705bdc121e53926a200afde4ef09b3ed4e0cf1b4fc819ec2",
        "md5": "bc8251f86f1f610cd517974619783c6d",
        "sha256": "e665cbb84c8b9d5edcf9707c331b622a377bb2ebb9ea3f0914046eb2e2aa2b0b"
      },
      "downloads": -1,
      "filename": "logger_tt-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bc8251f86f1f610cd517974619783c6d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8408,
      "upload_time": "2020-05-10T04:49:57",
      "upload_time_iso_8601": "2020-05-10T04:49:57.429927Z",
      "url": "https://files.pythonhosted.org/packages/31/7f/927214f43360705bdc121e53926a200afde4ef09b3ed4e0cf1b4fc819ec2/logger_tt-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}