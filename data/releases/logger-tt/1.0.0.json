{
  "info": {
    "author": "Nguyen Ba Duc Tin",
    "author_email": "nguyenbaduc.tin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Logger_tt\nMake configuring logging simpler and log even exceptions that you forgot to catch.\n\n## Usage:\n**Install**: `pip install logger_tt`\n\nIn the most simple case, add the following code into your main python script of your project:\n\n```python\nfrom logger_tt import setup_logging    \n\nsetup_logging()\n```\n\nThen from any of your modules, you just need to get a `logger` and start logging.\n\n```python\nfrom logging import getLogger\n\nlogger = getLogger(__name__)\n\nlogger.debug('Module is initialized')\nlogger.info('Making connection ...')\n```\n\n\nThis will provide your project the following **default** log behavior:\n\n* log file: Assume that your `working directory` is `project_root`,\n log.txt is stored at your `project_root/logs/` folder. \nIf log path doesn't exist, it will be created. \nThe log file is time rotated at midnight. Maximum of 15 dates of log will be kept.\nThis log file's `level` is `DEBUG`.<br>\nThe log format is `[%(asctime)s] [%(name)s %(levelname)s] %(message)s` where time is `%Y-%m-%d %H:%M:%S`.<br>\nExample: `[2020-05-09 00:31:33] [myproject.mymodule DEBUG] Module is initialized`\n\n* console: log with level `INFO` and above will be printed to `stdout` of console. \nThe format for console log is simpler: `[%(asctime)s] %(levelname)s: %(message)s`. <br>\nExample: `[2020-05-09 00:31:34] INFO: Making connection ...`\n\n* `urllib3` logger: this ready made logger is to silent unwanted messages from `requests` library.\n\n* `root` logger: if there is no logger initialized in your module, this logger will be used with above behaviors.\nThis logger is also used to log **uncaught exception** in your project. Example:\n\n```python\nraise RecursionError\n```\n\n```\n# log.txt\n[2020-05-09 11:42:08] [root ERROR] Uncaught exception\nTraceback (most recent call last):\n  File \"D:/MyProject/Echelon/eyes.py\", line 13, in <module>\n    raise RecursionError\nRecursionError\n```\n\n## Config:\n\n1. You can overwrite the default log path with your own as following:\n\n    setup_logging(log_path='new/path/to/your_log.txt')\n\n2. You can config your own logger and handler by providing either `yaml` or `json` config file as following:\n\n    setup_logging(config_path='path/to/.yaml_or_.json')\n\n   Without providing a config file, the default config file with above **default** log behavior is used.\nYou could copy `log_conf.yaml` or `log_conf.json` shipped with this package to start making your version.\n\n\n**Warning**: To process `.yaml` config file, you need to `pyyaml` package: `pip install pyyaml`\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dragon2fly/logger_tt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logger-tt",
    "package_url": "https://pypi.org/project/logger-tt/",
    "platform": "Any platform -- don't need Windows",
    "project_url": "https://pypi.org/project/logger-tt/",
    "project_urls": {
      "Homepage": "https://github.com/Dragon2fly/logger_tt"
    },
    "release_url": "https://pypi.org/project/logger-tt/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Make logging simple, log even uncaught exception",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17161471,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9a40954f3cd66a895030a531efe7ecd088102a716a6f9e3f30595891d57aa33",
        "md5": "03aceeb635ff35046bbefddb201aba06",
        "sha256": "31308860d4e5a2526839b8fd90323fd2b05b28dde2bb44f30b09a0763243c89a"
      },
      "downloads": -1,
      "filename": "logger_tt-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "03aceeb635ff35046bbefddb201aba06",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5500,
      "upload_time": "2020-05-09T04:13:33",
      "upload_time_iso_8601": "2020-05-09T04:13:33.584943Z",
      "url": "https://files.pythonhosted.org/packages/d9/a4/0954f3cd66a895030a531efe7ecd088102a716a6f9e3f30595891d57aa33/logger_tt-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6ff88baaf1934fc2fc1a0f26879b5e646442f34abfaa143a9a2ec50f53d090d",
        "md5": "45a202402223c5b085277f745179458d",
        "sha256": "061ef1f81a05eafb9880b1412c340690f520bcef2bd3e1540c86a1770c6f3b80"
      },
      "downloads": -1,
      "filename": "logger_tt-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "45a202402223c5b085277f745179458d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4772,
      "upload_time": "2020-05-09T04:13:35",
      "upload_time_iso_8601": "2020-05-09T04:13:35.450891Z",
      "url": "https://files.pythonhosted.org/packages/c6/ff/88baaf1934fc2fc1a0f26879b5e646442f34abfaa143a9a2ec50f53d090d/logger_tt-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}