{
  "info": {
    "author": "Dominik Müller",
    "author_email": "dominik.mueller@informatik.uni-augsburg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "# miseval: a metric library for Medical Image Segmentation EVALuation\n\n[![shield_python](https://img.shields.io/pypi/pyversions/miseval?style=for-the-badge)](https://www.python.org/)\n[![shield_build](https://img.shields.io/github/workflow/status/frankkramer-lab/miseval/Python%20package?style=for-the-badge)](https://github.com/frankkramer-lab/miseval)\n[![shield_pypi_version](https://img.shields.io/pypi/v/miseval?style=for-the-badge)](https://pypi.org/project/miseval/)\n[![shield_pypi_downloads](https://img.shields.io/pypi/dm/miseval?style=for-the-badge)](https://pypistats.org/packages/miseval)\n[![shield_license](https://img.shields.io/github/license/frankkramer-lab/miseval?style=for-the-badge)](https://www.gnu.org/licenses/gpl-3.0.en.html)\n\nThe open-source and free to use Python package miseval was developed to establish a standardized medical image segmentation evaluation procedure. We hope that our this will help improve evaluation quality, reproducibility, and comparability in future studies in the field of medical image segmentation.\n\n#### Guideline on Evaluation Metrics for \tMedical Image Segmentation\n\n1. Use DSC as main metric for validation and performance interpretation.\n2. Use AHD for interpretation on point position sensitivity (contour) if needed.\n3. Avoid any interpretations based on high pixel accuracy scores.\n4. Provide next to DSC also IoU, Sensitivity, and Specificity for method comparability.\n5. Provide sample visualizations, comparing the annotated and predicted segmentation, for visual evaluation as well as to avoid statistical bias.\n6. Avoid cherry-picking high-scoring samples.\n7. Provide histograms or box plots showing the scoring distribution across the dataset.\n8. For multi-class problems, provide metric computations for each class individually.\n9. Avoid confirmation bias through macro-averaging classes which is pushing scores via background class inclusion.\n10. Provide access to evaluation scripts and results with journal data services or third-party services like GitHub and Zenodo for easier reproducibility.\n\n## Implemented Metrics\n\n| Metric      | Index in miseval | Function in miseval |\n| ----------- | ----------- | ----------- |\n| Dice Similarity Index | \"DSC\", \"Dice\", \"DiceSimilarityCoefficient\" | miseval.calc_DSC() |\n| Intersection-Over-Union | \"IoU\", \"Jaccard\", \"IntersectionOverUnion\" | miseval.calc_IoU() |\n| Sensitivity | \"SENS\", \"Sensitivity\", \"Recall\", \"TPR\", \"TruePositiveRate\" | miseval.calc_Sensitivity() |\n| Specificity | \"SPEC\", \"Specificity\", \"TNR\", \"TrueNegativeRate\" | miseval.calc_Specificity() |\n| Precision | \"PREC\", \"Precision\" | miseval.calc_Precision() |\n| Accuracy | \"ACC\", \"Accuracy\", \"RI\", \"RandIndex\" | miseval.calc_Accuracy() |\n| Balanced Accuracy | \"BACC\", \"BalancedAccuracy\" | miseval.calc_BalancedAccuracy() |\n| Adjusted Rand Index | \"ARI\", \"AdjustedRandIndex\" | miseval.calc_AdjustedRandIndex() |\n| AUC | \"AUC\", \"AUC_trapezoid\" | miseval.calc_AUC() |\n| Cohen's Kappa | \"KAP\", \"Kappa\", \"CohensKappa\" | miseval.calc_Kappa() |\n| Hausdorff Distance | \"HD\", \"HausdorffDistance\" | miseval.calc_SimpleHausdorffDistance() |\n| Average Hausdorff Distance | \"AHD\", \"AverageHausdorffDistance\" | miseval.calc_AverageHausdorffDistance() |\n| Volumetric Similarity | \"VS\", \"VolumetricSimilarity\" | miseval.calc_VolumetricSimilarity() |\n| True Positive | \"TP\", \"TruePositive\" | miseval.calc_TruePositive() |\n| False Positive | \"FP\", \"FalsePositive\" | miseval.calc_FalsePositive() |\n| True Negative | \"TN\", \"TrueNegative\" | miseval.calc_TrueNegative() |\n| False Negative | \"FN\", \"FalseNegative\" | miseval.calc_FalseNegative() |\n\n## How to Use\n\n#### Example\n\n```python\n# load libraries\nimport numpy as np\nfrom miseval import evaluate\n\n# Get some ground truth / annotated segmentations\nnp.random.seed(1)\nreal_bi = np.random.randint(2, size=(64,64))  # binary (2 classes)\nreal_mc = np.random.randint(5, size=(64,64))  # multi-class (5 classes)\n# Get some predicted segmentations\nnp.random.seed(2)\npred_bi = np.random.randint(2, size=(64,64))  # binary (2 classes)\npred_mc = np.random.randint(5, size=(64,64))  # multi-class (5 classes)\n\n# Run binary evaluation\ndice = evaluate(real_bi, pred_bi, metric=\"DSC\")    \n  # returns single np.float64 e.g. 0.75\n\n# Run multi-class evaluation\ndice_list = evaluate(real_mc, pred_mc, metric=\"DSC\", multi_class=True,\n                     n_classes=5)   \n  # returns array of np.float64 e.g. [0.9, 0.2, 0.6, 0.0, 0.4]\n  # for each class, one score\n```\n\n#### Core function: Evaluate()\n\nEvery metric in miseval can be called via our core function `evaluate()`.\n\nThe miseval eavluate function can be run with different metrics as backbone.  \nYou can pass the following options to the metric parameter:\n- String naming one of the metric labels, for example \"DSC\"\n- Directly passing a metric function, for example calc_DSC_Sets (from dice.py)\n- Passing a custom metric function\n\nList of metrics : See `miseval/__init__.py` under section \"Access Functions to Metric Functions\"\n\nThe classes in a segmentation mask must be ongoing starting from 0 (integers from 0 to n_classes-1).\n\nA segmentation mask is allowed to have either no channel axis or just 1 (e.g. 512x512x1),\nwhich contains the annotation.  \n\n```python\n\"\"\"\nArguments:\n    truth (NumPy Matrix):            Ground Truth segmentation mask.\n    pred (NumPy Matrix):             Prediction segmentation mask.\n    metric (String or Function):     Metric function. Either a function directly or encoded as String from miseval or a custom function.\n    multi_class (Boolean):           Boolean parameter, if segmentation is a binary or multi-class problem. By default False -> Binary mode.\n    n_classes (Integer):             Number of classes. By default 2 -> Binary\n\nOutput:\n    score (Float) or scores (List of Float)\n\n    The multi_class parameter defines the output of this function.\n    If n_classes > 2, multi_class is automatically True.\n    If multi_class == False & n_classes == 2, only a single score (float) is returned.\n    If multi_class == True, multiple scores as a list are returned (for each class one score).\n\"\"\"\ndef evaluate(truth, pred, metric, multi_class=False, n_classes=2)\n```\n\n## Installation\n\n\n- **Install miseval from PyPI (recommended):**\n\n```sh\npip install miseval\n```\n\n- **Alternatively: install miseval from the GitHub source:**\n\nFirst, clone miseval using git:\n\n```sh\ngit clone https://github.com/frankkramer-lab/miseval\n```\n\nThen, go into the miseval folder and run the install command:\n\n```sh\ncd miseval\npython setup.py install\n```\n\n## Author\n\nDominik Müller\\\nEmail: dominik.mueller@informatik.uni-augsburg.de\\\nIT-Infrastructure for Translational Medical Research\\\nUniversity Augsburg\\\nBavaria, Germany\n\n## How to cite / More information\n\nDominik Müller, Iñaki Soto-Rey and Frank Kramer. (2022)   \nA Guideline on Evaluation Metrics for Medical Image Segmentation.  \narXiv e-print: Coming soon\n\n```\nArticle{misevalMUELLER2022,\n  title={A Guideline on Evaluation Metrics for Medical Image Segmentation},\n  author={Dominik Müller, Iñaki Soto-Rey and Frank Kramer},\n  year={2022}\n  eprint={COMING SOON},\n  archivePrefix={arXiv},\n  primaryClass={eess.IV}\n}\n```\n\nThank you for citing our work.\n\n## License\n\nThis project is licensed under the GNU GENERAL PUBLIC LICENSE Version 3.\\\nSee the LICENSE.md file for license rights and limitations.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/frankkramer-lab/miseval",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miseval",
    "package_url": "https://pypi.org/project/miseval/",
    "platform": "",
    "project_url": "https://pypi.org/project/miseval/",
    "project_urls": {
      "Homepage": "https://github.com/frankkramer-lab/miseval"
    },
    "release_url": "https://pypi.org/project/miseval/1.0.0/",
    "requires_dist": [
      "numpy (==1.21.5)",
      "scikit-learn (>=1.0.2)",
      "scipy (>=1.7.3)",
      "hausdorff (>=0.2.6)",
      "numba (>=0.54.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "A Metric Library for Medical Image Segmentation Evaluation",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14562273,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5688a50bd0154f99e0259104247e92e8870e052d75f9bcaf6b0d0a2da431e7ba",
        "md5": "16df4349a2e9729616d196510d57a15a",
        "sha256": "09584ede428867808b92c18d9d34af2a8bf33648e10d217fdb6d2ed4fc1a775a"
      },
      "downloads": -1,
      "filename": "miseval-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "16df4349a2e9729616d196510d57a15a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 48914,
      "upload_time": "2022-01-11T23:53:53",
      "upload_time_iso_8601": "2022-01-11T23:53:53.835215Z",
      "url": "https://files.pythonhosted.org/packages/56/88/a50bd0154f99e0259104247e92e8870e052d75f9bcaf6b0d0a2da431e7ba/miseval-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6677c094fad4088d05a092628368efe22b0b5ae7fa8a13cf81edc0d4ca4fcdbf",
        "md5": "3af6a744418a7b7180130413f9bbd754",
        "sha256": "1067be88f2ccce54ebfce2887ea43367530accc728227e6dade3a758986265f1"
      },
      "downloads": -1,
      "filename": "miseval-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3af6a744418a7b7180130413f9bbd754",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 14161,
      "upload_time": "2022-01-11T23:53:55",
      "upload_time_iso_8601": "2022-01-11T23:53:55.901505Z",
      "url": "https://files.pythonhosted.org/packages/66/77/c094fad4088d05a092628368efe22b0b5ae7fa8a13cf81edc0d4ca4fcdbf/miseval-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}