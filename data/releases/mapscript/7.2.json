{
  "info": {
    "author": "Steve Lime",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: C++",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: GIS",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "Python MapScript for MapServer 7.2 README\r\n=========================================\r\n\r\n:Author: MapServer Team\r\n:Last Updated: 2018-08-17\r\n\r\nIntroduction\r\n------------\r\n\r\nThe Python mapscript module provides users an interface to `MapServer <http://mapserver.org>`_\r\nclasses on any platform, and has been tested on Python versions 2.7 and 3.5+. \r\n\r\nThe Python mapscript module is created using `SWIG <http://www.swig.org.>`_ the\r\nthe Simplified Wrapper and Interface Generator. This is used to create MapServer bindings in\r\nmany different programming languages. \r\n\r\n+ Language agnostic documentation is available at http://mapserver.org/mapscript/introduction.html\r\n+ Python specific documentation is available at http://mapserver.org/mapscript/python.html\r\n\r\nFor working with Mapfiles in Python the `mappyfile <https://mappyfile.readthedocs.io/en/latest/>`_ project is \r\nalso available, this allows creating, parsing, formatting, and validating Mapfiles. \r\n\r\nWheels and PyPI\r\n---------------\r\n\r\nPython `wheels <https://wheel.readthedocs.io/en/stable/>`_ have been created for Windows and uploaded to \r\n`PyPI <https://pypi.org/>`_ - the Python Package Index. This allows easy installation using `pip <https://pypi.org/project/pip/>`_. \r\nOther advantages of ready-made wheels on PyPI are:\r\n\r\n+ mapscript can be added as a dependency to `Requirements Files <https://pip.pypa.io/en/stable/user_guide/#id1>`_\r\n+ mapscript can be easily added to a Python `Virtual Environment <https://docs.python-guide.org/dev/virtualenvs/>`_\r\n+ Python2 or Python3 versions of mapscript can be installed and work with a single installation of MapServer\r\n\r\nCurrently the following wheels are built:\r\n\r\n+ Python 2.7 x64 for MapServer 7.2\r\n+ Python 3.6 x64 for MapServer 7.2\r\n\r\nLinux wheels are also planned, using the `manylinux <https://github.com/pypa/manylinux>`_ project. \r\n\r\nNo source distributions will be provided on PyPI - to build from source requires the full MapServer source code,\r\nin which case it is easiest to take a copy of the full MapServer project and run the CMake process detailed below. \r\n\r\n..\r\n    py3 SWIG flag adds type annotations\r\n\r\nMapServer Versions\r\n------------------\r\n\r\nTo use mapscript you will need to add the MapServer binaries to your system path. \r\nOn Windows you can use the following, replacing ``C:\\MapServer\\bin`` with the location of your MapServer binaries. \r\n\r\n.. code-block::\r\n\r\n    SET PATH=C:\\MapServer\\bin;%PATH%\r\n\r\nWindow binary packages can be downloaded from `GIS Internals <https://www.gisinternals.com/stable.php>`. \r\nTo ensure compatibility with the wheels, please use ``release-1911-x64-gdal-2-3-mapserver-7-2``. \r\n\r\nWhen using these packages the MapServer path will be similar to `C:\\release-1911-x64-gdal-2-3-mapserver-7-2\\bin`. \r\n\r\nThe mapscript wheels have been compiled using Visual Studio 2017 version 15.3 (``MSVC++ 14.11 _MSC_VER == 1911``). \r\n\r\nInstallation\r\n------------\r\n\r\nPrior to installing it is first recommended to update pip to the latest version with the following command:\r\n\r\n.. code-block::\r\n\r\n    python -m pip install --upgrade pip\r\n\r\nNext if there are binary wheels available for your system, mapscript can be installed using:\r\n\r\n.. code-block::\r\n\r\n    pip install mapscript\r\n\r\nIf you already have mapscript installed and wish to upgrade it to a newer version you can use:\r\n\r\n.. code-block::\r\n\r\n    pip install mapscript --upgrade\r\n\r\nAdd your MapSever binaries folder to your system path (see `MapServer Versions`_):\r\n\r\n.. code-block::\r\n\r\n    SET PATH=C:\\MapServer\\bin;%PATH%\r\n\r\nNow you should be able to import mapscript:\r\n\r\n.. code-block:: python\r\n\r\n    python -c \"import mapscript;print(mapscript.msGetVersion())\"\r\n    MapServer version 7.2.0 OUTPUT=PNG OUTPUT=JPEG OUTPUT=KML SUPPORTS=PROJ SUPPORTS=AGG SUPPORTS=FREETYPE SUPPORTS=CAIRO SUPPORTS=SVG_SYMBOLS SUPPORTS=SVGCAIRO SUPPORTS=ICONV SUPPORTS=FRIBIDI SUPPORTS=WMS_SERVER SUPPORTS=WMS_CLIENT SUPPORTS=WFS_SERVER SUPPORTS=WFS_CLIENT SUPPORTS=WCS_SERVER SUPPORTS=SOS_SERVER SUPPORTS=FASTCGI SUPPORTS=THREADS SUPPORTS=GEOS SUPPORTS=PBF INPUT=JPEG INPUT=POSTGIS INPUT=OGR INPUT=GDAL INPUT=SHAPEFILE\r\n\r\nIf you failed to add the MapServer binaries to your system path you may see one of the following errors:\r\n\r\n.. code-block:: python\r\n\r\n    ImportError: No module named _mapscript # Python 2.x\r\n    ModuleNotFoundError: No module named '_mapscript' # Python 3.x\r\n\r\nIf your version of mapscript does not match your version of MapServer you may instead one of the following messages:\r\n\r\n.. code-block:: python\r\n\r\n    ImportError: DLL load failed: The specified module could not be found.\r\n    ImportError: DLL load failed: The specified procedure could not be found.\r\n\r\nQuickstart\r\n----------\r\n\r\nPrior to running any scripts using mapscript, you will need to add the MapServer binaries to your system path, see the\r\n*Installation* section above. \r\n\r\nTo open an existing Mapfile:\r\n\r\n.. code-block:: python\r\n\r\n    >>> import mapscript\r\n    >>> test_map = mapscript.mapObj(r\"C:\\Maps\\mymap.map\")\r\n    >>> e = test_map.extent\r\n\r\nCreate a layer from a string:\r\n\r\n.. code-block:: python\r\n\r\n    >>> import mapscript\r\n    >>> lo = mapscript.fromstring(\"\"\"LAYER NAME \"test\" TYPE POINT END\"\"\")\r\n    >>> lo\r\n    <mapscript.layerObj; proxy of C layerObj instance at ...>\r\n    >>> lo.name\r\n    'test'\r\n    >>> lo.type == mapscript.MS_LAYER_POINT\r\n    True\r\n\r\nBuilding the Mapscript Module\r\n-----------------------------\r\n\r\nThe mapscript module is built as part of the MapServer CMake build process, this \r\nis configured using the ``mapserver/mapscript/CMakeLists.txt`` file. \r\n\r\nPrior to the switch to using CMake to build MapServer mapscript was built using\r\ndistutils and ``setup.py``. Now the ``setup.py.in`` file is used as a template that\r\nis filled with the MapServer version number and used to created wheel files for distribution. \r\n\r\nThe build process works as follows. \r\n\r\n+ CMake runs SWIG. This uses the SWIG interface files to create a ``mapscriptPYTHON_wrap.c`` file, \r\n  and a ``mapscript.py`` file containing the Python wrapper to the mapscript binary module. \r\n+ CMake then uses the appropriate compiler on the system to compile the ``mapscriptPYTHON_wrap.c`` file into a Python binary module -\r\n  ``_mapscript.pyd`` file on Windows, and a ``_mapscript.so`` file on Windows. \r\n\r\n``CMakeLists.txt`` is configured so that all files required to make a Python wheel are copied into the output build folder. The wheel can then be built\r\nwith the following commands. \r\n\r\n.. code-block:: bat\r\n\r\n    python -m pip install --upgrade pip\r\n    pip install wheel\r\n    cd C:\\Projects\\MapServer\\build\\mapscript\\python\r\n    python setup.py bdist_wheel\r\n\r\nSWIG can be run manually, without using CMake. This may allow further optimizations and control on the output. \r\n\r\n.. code-block:: bat\r\n\r\n    cd C:\\Projects\\mapserver\\build\r\n    SET PATH=C:\\MapServerBuild\\swigwin-3.0.12;%PATH%\r\n    swig -python -shadow -o mapscript_wrap.c ../mapscript.i\r\n\r\nSWIG has several command line options to control the output:\r\n\r\n.. code-block:: bat\r\n\r\n    swig -python -shadow -modern -templatereduce -fastdispatch -fvirtual -fastproxy \r\n    -modernargs -castmode -dirvtable -fastinit -fastquery -noproxydel -nobuildnone \r\n    -o mapscript_wrap.c ../mapscript.i\r\n\r\nTesting\r\n-------\r\n\r\nOnce the mapscript module has been built there is a test suite to check the output. It is recommended\r\n`pytest <https://docs.pytest.org/en/latest/>`_ is used to run the tests. This can be installed using:\r\n\r\n.. code-block:: bat\r\n\r\n    pip install pytest\r\n\r\nChange the directory to the mapscript output build folder and run the command below. Some tests are currently excluded, these will\r\nbe fixed for upcoming releases. It is also planned to include the test suite in the Python wheels to allow easy testing of a \r\nmapscript installation. \r\n\r\n.. code-block:: bat\r\n\r\n    python -m pytest --ignore=tests/cases/fonttest.py --ignore=tests/cases/hashtest.py --ignore=tests/cases/pgtest.py --ignore=tests/cases/threadtest.py tests/cases\r\n\r\nCredits\r\n-------\r\n\r\n+ Steve Lime (developer)\r\n+ Sean Gillies (developer)\r\n+ Frank Warmerdam (developer)\r\n+ Howard Butler (developer)\r\n+ Norman Vine (cygwin and distutils guru)\r\n+ Tim Cera (install)\r\n+ Michael Schultz (documentation)\r\n+ Thomas Bonfort (developer)\r\n+ Even Rouault (developer)\r\n+ Seth Girvin (Python3 migration, documentation and builds)\r\n+ Claude Paroz (Python3 migration)\r\n\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.mapserver.org",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mapscript",
    "package_url": "https://pypi.org/project/mapscript/",
    "platform": "",
    "project_url": "https://pypi.org/project/mapscript/",
    "project_urls": {
      "Homepage": "http://www.mapserver.org"
    },
    "release_url": "https://pypi.org/project/mapscript/7.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MapServer Python MapScript bindings",
    "version": "7.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15187987,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29a41b2052c2c8d8246b2c5e54177e4bd48887eacec78af1b5cfde8bd9f732ba",
        "md5": "0d9e25b662ac738ac45810c1eb6f7779",
        "sha256": "5dd45d2f4f1aae9a8fb7d770cb37ab0269dbbb0c8440f50f4f26a870d64f04a9"
      },
      "downloads": -1,
      "filename": "mapscript-7.2-cp27-cp27m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "0d9e25b662ac738ac45810c1eb6f7779",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 266776,
      "upload_time": "2018-08-17T17:57:28",
      "upload_time_iso_8601": "2018-08-17T17:57:28.364834Z",
      "url": "https://files.pythonhosted.org/packages/29/a4/1b2052c2c8d8246b2c5e54177e4bd48887eacec78af1b5cfde8bd9f732ba/mapscript-7.2-cp27-cp27m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4e3a2726e8b6b8c8c22e1ca015380fa0c04c60450f714e208b42982bda63c70",
        "md5": "916b29a5f9a175b2b60851beabdd2118",
        "sha256": "4cd80d479b54ffe64b7962771e85db0f502351c83c7ea7a5494a84900590fe07"
      },
      "downloads": -1,
      "filename": "mapscript-7.2-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "916b29a5f9a175b2b60851beabdd2118",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 266057,
      "upload_time": "2018-08-17T17:58:07",
      "upload_time_iso_8601": "2018-08-17T17:58:07.142252Z",
      "url": "https://files.pythonhosted.org/packages/e4/e3/a2726e8b6b8c8c22e1ca015380fa0c04c60450f714e208b42982bda63c70/mapscript-7.2-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}