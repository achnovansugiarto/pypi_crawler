{
  "info": {
    "author": "Alexandr Goncharov",
    "author_email": "kesn@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Overview\n--------\n\nThis reusable app helps to create arbitrary-depth [Clean URLs](http://en.wikipedia.org/wiki/Clean_URL) which correspond to MPTT tree hierarchy of model instances, like these:\n\n`http://best-photographer.com/gallery/weddings/Dexter-and-Rita/photo-1`\n`http://best-photographer.com/gallery/my-pets/dogs/husky/Mishka`\n\nAs you can see, the links are quite different - they have different depth of hierarchy. When users see these URLs they can easily discover where they are located. They can either delete some part of the URL and thus move up in the hierarchy.\n\nEach URL leads either to a view or to a template (you can choose).\n\nHow it works\n------------\n\nDjango-mptt-urls is an intermediator between URLs and views.\nIn standard django app usual url resolution looks like:\n\n`URL: /gallery/photos/` ---> `VIEW: gallery.views.photos`\n\nWith django-mptt-urls it looks like:\n\n`URL: /gallery/my-pets/dogs/` ---> `MPTT_URLS: select view` --mptt_urls['object']--> `VIEW: gallery.views.photo`\n\nor\n\n`URL: /gallery/my-pets/dogs/` ---> `MPTT_URLS: select template` --mptt_urls.object--> `TEMPLATE: gallery/photo.html`\n\nMptt_urls does these things:\n* Checks URL for being valid (or Http404)\n* Selects corresponding view/template\n* Passes extra argument to the view/template: mptt_urls['object']\n\n\nExample\n-------\n\nThe simpliest way to understand how django_mptt_urls works is to clone this GitHub project and to run test_project (no extra settings required):\n```\ngit clone https://github.com/MrKesn/django-mptt-urls.git\ncd django-mptt-urls\npython setup.py install\ncd test_project\npython manage.py runserver\n```\n\nAnd point your browser to 127.0.0.1:8000\n\nRequirements\n------------\n\ndjango-mptt-urls app is strongly tied to [django-mptt](https://github.com/django-mptt/django-mptt). So be sure you have installed it:\n\n`pip install django-mptt`\n\nYour models should use mptt models, for example for gallery:\n\n```\nfrom mptt.models import MPTTModel, TreeForeignKey\n\nclass Category(MPTTModel):\n    ...\n    parent = TreeForeignKey('self', null=True, blank=True, verbose_name='parent category', related_name='categories')\n    slug = models.SlugField()\n    class Meta:\n        unique_together = ('slug', 'parent')\n\nclass Photo(models.Model):\n    ...\n    parent = TreeForeignKey(Category, verbose_name='parent category', related_name='photos')\n    slug = models.SlugField()\n\n    class Meta:\n        unique_together = ('slug', 'parent')\n```\n\nHere gallery consists of Categories, and leaf Categories are containers for Photos. We will continue using our gallery example in next sections.\n\n\nInstallation\n------------\n\nYou can use pip:\n```\npip install django-mptt-urls\n```\n\nOr, if you want an exaple project being included (test_project), clone the GitHub repo:\n```\ngit clone https://github.com/MrKesn/django-mptt-urls.git\ncd django-mptt-urls\npython setup.py install\n```\n\nAdd mptt_urls in your `INSTALLED_APPS`:\n\n```\n# settings.py\n\nINSTALLED_APPS = (\n    ...\n    'mptt_urls',\n)\n```\n\nThen, in your `urls.py`, \n* import: `from mptt_urls import url_mptt`\n* add a variable `mptt_urls_gallery_settings` containing gallery settings,\n* add url `url_mptt` :\n\n```\n# urls.py\n...\nfrom mptt_urls import url_mptt\n\nmptt_urls_gallery_settings = {\n    'node': {\n        'model': 'gallery.models.Category',\n        'view': 'gallery.views.category',\n        'slug_field': 'slug',\n    },\n    'leaf': {\n        'model': 'gallery.models.Photo',\n        'template': 'gallery/photo.html',\n        'slug_field': 'slug',\n    }\n}\n\nurlpatterns = patterns('',\n    ...\n    url_mptt(r'^gallery/(?P<url>.*)', name='gallery', settings=mptt_urls_gallery_settings),\n    ...\n)\n```\n\nHere is what we've done:\n* We are storing our gallery settings in `mptt_urls_gallery_settings` variable. It has settings for nodes and leaves, the fields are:\n* ** `model`: Which model to use. As we've defined in `Requirements` section, nodes are Categories instances, leaves are Photos instances.\n* ** `view`: A view which will be called. Mptt_urls provides an argument `mptt_urls` to the view, so be sure to accept this arg in a view (`def someview(request, mptt_urls=None)`). `view` should be a string like `'gallery.views.someview'`.\n* ** `template`: If you do not need a view, you can redirect mptt_urls output directly to a template. The rule is: if you need some extra logic/calculations in your view, use `view`; otherwise use `template`.\n* ** `slug_field`: Name of 'slug' field. The field's value will be taken for constructing and resolving URLs. It's up to you to generate slug for model instances! (Use `prepopulate_fields` in admin, or django-autoslug, etc.)\n* We set up new url catcher: url_mptt(...). 1st arg is usual url regexp. Do not forget to catch `(?P<url>.*)` pattern. 2nd arg is url name, so thet you can use `reverse(name, kwargs={'url': ''})` in your code. 3rd arg contains settings. Note that **url_mptt does not accept `view` variable**.\n* Note that **every URL starting with /gallery/ will be caught by mptt_urls** and treated as hierarchical path. Be careful with it.\n\nUsage\n-----\n\nNow, when everything is set up, it's time to use mptt_urls.\nThe views you specified in the settings (`'gallery.views.category'` in example) will get `mptt_urls` arg, containing `object` - instance of a model, corresponding to the url. Just like this:\n```\n# gallery.views.category\ndef category(request, mptt_urls):\n    # Here extra logic is: we increase the number of category views\n    object = mptt_urls['object']\n    if not object is None:\n        object.views += 1\n        object.save()\n\n    return render(\n        request,\n        'gallery/category.html',\n        {\n            'mptt_urls': mptt_urls,\n        }\n    )\n```\n\nThe templates will get the same arg `mptt_urls` containing `object`, like this:\n```\n# gallery/photo.html\n<html>\n    <body>\n        {{ mptt_urls.object }}\n    </body>\n</html>\n```\n\nFeel free to use `get_absolute_url()` method for hierarchical objects - it will return correct hierarchical urls.\n\nTo get the root, use `reverse('gallery', kwargs={'url': ''})` (in view) or `{% url 'gallery' url='' %}` (in templates.\n\nThe SuperRoot\n-------------\n\nTo simplify developer's life and to follow KISS, django_mptt_urls *always* passes and arg `object` to a view/template. There are 3 types of instances which an `object` can be:\n* leaf - A leaf object, the end point of path. In the example, a leaf is a Photo instance.\n* node - Nodes which actually create the hierarchy. In the example, a node is a Category instance.\n* superroot - A fake node which is parent to all real root nodes (root node is such a node that node.parent == None). You will find superroot helpful when you process base path (/gallery/). When you visit /gallery/ url, there is actually no object associated with the path, and you probably would like to simply show all root nodes to the user. So, mptt_urls['object'] here is a superroot, and it has 1 working method: get_children(), which will return all root nodes. Introducing superroot allows you to write only one view/template for both root and non-root urls. Oh, just check `test_project` for clear example.\n\n`mptt_urls['object'].is_superroot()` will help you to discover if the object is superroot.\n\nLicense\n-------\nMIT.\nView license file for details.\n\nP.S.\n----\nPlease feel free to make pull requests! :)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MrKesn/django-mptt-urls",
    "keywords": "django mptt urls hierarchy clean friendly",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-mptt-urls",
    "package_url": "https://pypi.org/project/django-mptt-urls/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-mptt-urls/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/MrKesn/django-mptt-urls"
    },
    "release_url": "https://pypi.org/project/django-mptt-urls/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django app for creating hierarchical URLs associated with django-MPTT models.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6183894,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0496dcfeff417d1e75dc54c14ef04e19bec0bb3d931ba6f4b077a4cb580389ae",
        "md5": "af016183c1c343f126c40175f4b1529b",
        "sha256": "9dde4dcc73215016881987f1a1626c2eea5880d3ee3ba96f49a1f60e122100f5"
      },
      "downloads": -1,
      "filename": "django-mptt-urls-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "af016183c1c343f126c40175f4b1529b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6958,
      "upload_time": "2013-11-12T16:28:44",
      "upload_time_iso_8601": "2013-11-12T16:28:44.926928Z",
      "url": "https://files.pythonhosted.org/packages/04/96/dcfeff417d1e75dc54c14ef04e19bec0bb3d931ba6f4b077a4cb580389ae/django-mptt-urls-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}