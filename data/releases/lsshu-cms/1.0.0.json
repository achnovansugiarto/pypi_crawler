{
  "info": {
    "author": "Lsshu",
    "author_email": "admin@lsshu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Lsshu \n_admin@lsshu.cn_\n\n## 安装\n```shell\npip install lsshu-cms\n```\n#### 其它依赖\n```shell\npip install uvicorn fastapi sqlalchemy sqlalchemy_mptt python-multipart hashids passlib python-jose bcrypt websockets\n```\n## 使用\n_1、在项目根目录新建文件 **`main.py`**_ \n```python\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom app import router\n\napp = FastAPI(\n    title='Base API Docs',\n    description='Base API接口文档',\n    version='1.0.0'\n)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(router)\nif __name__ == '__main__':\n    import uvicorn\n\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000, reload=True)\n```\n\n_2、在项目根目录新建python包 **`app`** 在包app下打开文件 **`__init__.py`**_ \n```python\nfrom fastapi import APIRouter\n\nfrom lsshu.oauth import router as router_oauth\n\nrouter = APIRouter()\nrouter.include_router(router_oauth)\n\nfrom app.demo import router as router_demo\nrouter.include_router(router_demo)\n\nif __name__ == '__main__':\n    from lsshu.db import Engine, Model\n\n    from app.demo import APP_PERMISSION as PERMISSION_DEMO\n\n    Model.metadata.create_all(Engine)  # 创建表结构\n\n    APP_PERMISSIONS = [\n        PERMISSION_DEMO\n    ]\n\n    from config import OAUTH_ADMIN_USERS\n    from lsshu.oauth.helpers import store_permissions, init_user_and_password\n\n    store_permissions(APP_PERMISSIONS)  # 初始化权限\n    init_user_and_password(OAUTH_ADMIN_USERS)  # 初始化授权用户\n\n```\n\n_3、在包app下新建python包 **`demo`** 在包demp下打开文件 **`__init__.py`**_ \n```python\nfrom fastapi import APIRouter\nfrom app.demo.project import router as router_project, permission as permission_project\n\nrouter = APIRouter()\nrouter.include_router(router_project)\n\nname = __name__.capitalize()\nAPP_PERMISSION = {\n    \"name\": \"demo\", \"scope\": name, \"children\": [\n        permission_project\n    ]\n}\n\n```\n\n_4、在包demo下新建文件 **`project.py`**_ \n```python\n\"\"\"\nXX操作\n\"\"\"\nfrom datetime import datetime\nfrom typing import Optional, List\n\nfrom fastapi import Security, Depends, APIRouter, HTTPException, status\nfrom pydantic import BaseModel\nfrom sqlalchemy import Column, Integer, String, TIMESTAMP\nfrom sqlalchemy.orm import Session\n\nfrom lsshu import BaseCRUD, Schemas, SchemasPaginate, plural\nfrom lsshu.db import dbs, Model\nfrom lsshu.oauth import SchemasOAuthScopes, auth_user\n\nname = plural(__name__.capitalize())\nscopes = [name, ]\ntags = [name, ]\npermission = {\"name\": \"project\", \"scope\": name, \"action\": [{\"name\": \"pro\", \"scope\": \"pro\"}]}\n\n\nclass SchemasResponse(BaseModel):\n    \"\"\"模型 返回\"\"\"\n    id: int\n    name: Optional[str] = None\n    created_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n\n    class Config:\n        orm_mode = True\n\n\nclass SchemasStoreUpdate(BaseModel):\n    \"\"\"模型 提交\"\"\"\n    name: Optional[str] = None\n\n\nclass SchemasPaginateItem(SchemasPaginate):\n    items: List[SchemasResponse]\n\n\ntable_name = name.replace('.', '_')\n\n\nclass Models(Model):\n    \"\"\" 模型 \"\"\"\n    __tablename__ = table_name\n    id = Column(Integer, primary_key=True, index=True, autoincrement=True)\n    name = Column(String(15), nullable=False, unique=True, comment=\"名称\")\n    created_at = Column(TIMESTAMP, nullable=True, default=datetime.now, comment=\"创建日期\")\n    updated_at = Column(TIMESTAMP, nullable=True, default=datetime.now, onupdate=datetime.now, comment=\"更新日期\")\n    deleted_at = Column(TIMESTAMP, nullable=True, comment=\"删除日期\")\n\n\nclass CRUD(BaseCRUD):\n    \"\"\"表操作\"\"\"\n    params_model = Models\n    params_pseudo_deletion = True  # 伪删除\n\n\nrouter = APIRouter()\n\n\n@router.get('/{}'.format(name), name=\"get {}\".format(name), tags=tags)\nasync def models(db: Session = Depends(dbs), page: Optional[int] = 1, limit: Optional[int] = 25,\n                 name: Optional[str] = None, auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes)):\n    \"\"\"\n    :param db:\n    :param page:\n    :param limit:\n    :param name:\n    :param auth:\n    :return:\n    \"\"\"\n    db_list = CRUD.paginate(db=db, page=page, limit=limit, where=(\"name\", \"like\", name))\n    return Schemas(data=SchemasPaginateItem(**db_list))\n\n\n@router.get('/{}/{{pk}}'.format(name), name=\"get {}\".format(name), tags=tags)\nasync def get_model(pk: int, db: Session = Depends(dbs),\n                    auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes)):\n    \"\"\"\n    :param pk:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    db_model = CRUD.first(db=db, pk=pk)\n    if db_model is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=\"{} not found\".format(name.capitalize()))\n    return Schemas(data=SchemasResponse(**db_model.to_dict()))\n\n\n@router.post('/{}'.format(name), name=\"get {}\".format(name), tags=tags)\nasync def store_model(item: SchemasStoreUpdate, db: Session = Depends(dbs),\n                      auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.store\" % name])):\n    \"\"\"\n    :param item:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    db_model = CRUD.first(db=db, where=(\"name\", item.name))\n    if db_model is not None:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=\"{} already registered\".format(name.capitalize()))\n    bool_model = CRUD.store(db=db, item=item)\n    return Schemas(data=SchemasResponse(**bool_model.to_dict()))\n\n\n@router.put(\"/{}/{{pk}}\".format(name), name=\"update {}\".format(name), tags=tags)\nasync def update_model(pk: int, item: SchemasStoreUpdate, db: Session = Depends(dbs),\n                       auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.update\" % name])):\n    \"\"\"\n    :param pk:\n    :param item:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    db_model = CRUD.first(db=db, pk=pk)\n    if db_model is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=\"{} not found\".format(name.capitalize()))\n    bool_model = CRUD.update(db=db, pk=pk, item=item)\n    return Schemas(data=SchemasResponse(**bool_model.to_dict()))\n\n\n@router.delete(\"/{}/{{pk}}\".format(name), name=\"delete {}\".format(name), tags=tags)\nasync def delete_model(pk: int, db: Session = Depends(dbs),\n                       auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.delete\" % name])):\n    \"\"\"\n    :param pk:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    bool_model = CRUD.delete(db=db, pk=pk)\n    return Schemas(data=bool_model)\n\n\n@router.delete(\"/{}\".format(name), name=\"deletes {}\".format(name), tags=tags)\nasync def delete_models(pks: List[int], db: Session = Depends(dbs),\n                        auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.delete\" % name])):\n    \"\"\"\n    :param pks:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    bool_model = CRUD.delete(db=db, pks=pks)\n    return Schemas(data=bool_model)\n\n```\n\n_5、在根目录下新建文件 **`config.py`**_ \n```python\n# API 接口返回数据\nSCHEMAS_SUCCESS_CODE = 0\nSCHEMAS_SUCCESS_STATUS = 'success'\nSCHEMAS_SUCCESS_MESSAGE = '数据请求成功！'\nSCHEMAS_ERROR_CODE = 1\nSCHEMAS_ERROR_STATUS = 'error'\nSCHEMAS_ERROR_MESSAGE = '数据请求失败！'\n\n# OAuth 授权相关\nOAUTH_DEFAULT_TAGS = ['OAuth']\nOAUTH_LOGIN_SCOPES = \"login\"\n\nOAUTH_TOKEN_URL = \"/token\"\nOAUTH_TOKEN_SCOPES = {\n    OAUTH_LOGIN_SCOPES: OAUTH_LOGIN_SCOPES.capitalize()\n}\nOAUTH_SECRET_KEY = \"4a876f7766d1a0e9d97231089be927e38d6dea09233ad212f056b7f1a75cd41d\"\nOAUTH_ALGORITHM = \"HS256\"\nOAUTH_ACCESS_TOKEN_EXPIRE_MINUTES = 300\nOAUTH_OAUTH_ROUTER = {}\n\n# 超级管理员 账号:密码\nOAUTH_ADMIN_USERS = {\n    \"admin\": \"admin\"\n}\n\n# 数据库相关\nimport os\n\nDB_SQLALCHEMY_DATABASE_URL = \"sqlite:///{}\".format(os.path.join(os.path.dirname(__file__), 'db.sqlite3'))\n# DB_SQLALCHEMY_DATABASE_URL = \"mysql+pymysql://root:root@192.168.1.3:3306/ic\"\n\n# echo=True表示引擎将用repr()函数记录所有语句及其参数列表到日志\n# 由于SQLAlchemy是多线程，指定check_same_thread=False来让建立的对象任意线程都可使用。这个参数只在用SQLite数据库时设置\nDB_ENGINE_KWARGS = {\n    # \"echo\": True,\n    # \"encoding\": 'utf-8',\n    # \"pool_pre_ping\": True,\n    # \"pool_size\": 100,\n    # \"pool_recycle\": 3600,\n    # \"max_overflow\": 100,\n    \"connect_args\": {\n        'check_same_thread': False,\n        # \"charset\": \"utf8mb4\"\n    }\n}\n# 在SQLAlchemy中，CRUD都是通过会话(session)进行的，所以我们必须要先创建会话，每一个SessionLocal实例就是一个数据库session\n# flush()是指发送数据库语句到数据库，但数据库不一定执行写入磁盘；commit()是指提交事务，将变更保存到数据库文件\nDB_SESSION_MAKER_KWARGS = {\n    \"autoflush\": False,\n    \"autocommit\": False,\n    \"expire_on_commit\": True\n}\n\n```\n\n_6、在根目录下新建文件 **`.gitignore`**_ \n```gitignore\n.idea\nDesktop.ini\ndb.sqlite3\n.DS_Store\n*__pycache__*\n```\n\n\n### docker 部署\n_1、在根目录下新建文件 **`Dockerfile`**_ \n```Dockerfile\nFROM python:3.8\nRUN mkdir -p /app && pip install uvicorn fastapi sqlalchemy sqlalchemy_mptt python-multipart hashids passlib python-jose bcrypt websockets\nEXPOSE 80\nWORKDIR /app\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\", \"--reload\"]\n```\n_2、创建镜像并运行_ \n```shell\ndocker build -t project_name . && docker run -d --name project_name -v /projects/project_path:/app -p 49000:80 project_name\n```\n_@project_name 项目名称; /projects/project_path 项目所在的目录; 49000 宿主机端口; 80 容器端口;_\n\n_3、删除容器和镜像_ \n```shell\ndocker stop project_name && docker rm project_name && docker rmi project_name\n```\n\n### nginx 部署\n```nginx\nhttp {\n    upstream project_server { \n        server 0.0.0.0:49000 weight=1;\n    }\n    server{\n        listen 80;\n        server_name project.com;\n        index index.html index.htm;\n        root /projects/project_path/dist;\n        location  ~/api|/docs|/openapi.json\n        {\n          proxy_pass  http://project_server;\n          # 配置websocket\n          proxy_http_version 1.1;\n          proxy_set_header Upgrade $http_upgrade;\n          proxy_set_header Connection \"upgrade\";\n          # 其它代理\n          proxy_set_header Http_Referer $http_referer;\n          proxy_set_header Host $host:$server_port; \n          proxy_set_header X-real-ip $remote_addr;\n        }\n        location ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md|app|main\\.py|config\\.py)\n        {\n            return 404;\n        }\n    }\n}\n```\n_@root /projects/project_path/dist 其中`dist` 可为前端打包的目录；其它根据自身增减_\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lsshu/fastapi-cms",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lsshu-cms",
    "package_url": "https://pypi.org/project/lsshu-cms/",
    "platform": null,
    "project_url": "https://pypi.org/project/lsshu-cms/",
    "project_urls": {
      "Homepage": "https://github.com/lsshu/fastapi-cms"
    },
    "release_url": "https://pypi.org/project/lsshu-cms/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "FastAPI 开发的CMS",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15591318,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dbec155f2d0e358679424c69637e95f689cf355fb90377cae0ecb0e68119351b",
        "md5": "8219d72b03e17c8158bd9a1307c1be26",
        "sha256": "2dc554db530c6261219f8d346cc396a2f22bd2b5b28403ddff68308ae2a7ebac"
      },
      "downloads": -1,
      "filename": "lsshu-cms-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8219d72b03e17c8158bd9a1307c1be26",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 20370,
      "upload_time": "2022-04-12T05:36:02",
      "upload_time_iso_8601": "2022-04-12T05:36:02.909656Z",
      "url": "https://files.pythonhosted.org/packages/db/ec/155f2d0e358679424c69637e95f689cf355fb90377cae0ecb0e68119351b/lsshu-cms-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}