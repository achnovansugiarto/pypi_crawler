{
  "info": {
    "author": "Lsshu",
    "author_email": "admin@lsshu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Lsshu \n_admin@lsshu.cn_\n\n## 安装\n```shell\npip install lsshu-cms\n```\n\n## 使用\n_1、在项目根目录新建文件 **`main.py`**_ \n```python\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom lsshu.oauth.main import router as router_oauth\n\napp = FastAPI(\n    title='Base API Docs',\n    description='Base API接口文档',\n    version='1.0.0'\n)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(router_oauth, prefix=\"/api\")\nif __name__ == '__main__':\n    import uvicorn\n\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000, reload=True)\n```\n\n_2、在项目根目录新建python包 **`app`** 在包app下打开文件 **`__init__.py`**_ \n```python\nif __name__ == '__main__':\n    from lsshu.oauth.model import Model, Engine\n\n    Model.metadata.create_all(Engine)  # 创建表结构\n\n    APP_PERMISSIONS = []\n\n    from config import OAUTH_ADMIN_USERS\n    from lsshu.internal.helpers import store_permissions, init_user_and_password\n\n    store_permissions(APP_PERMISSIONS)  # 初始化权限\n    init_user_and_password(OAUTH_ADMIN_USERS)  # 初始化授权用户\n```\n\n_3、在包app下新建python包 **`demo`** 在包demp下新建文件 **`model.py`**_ \n```python\nfrom sqlalchemy import Column, String\n\nfrom lsshu.internal.db import Model\nfrom lsshu.internal.method import plural\n\nname = plural(__name__.capitalize())\ntable_name = name.replace('.', '_')\npermission = {\"name\": \"Demo\", \"scope\": name, \"action\": [{\"name\": \"de\", \"scope\": \"de\"}]}\n\n\nclass Models(Model):\n    \"\"\" 模型 \"\"\"\n    __tablename__ = table_name\n    name = Column(String(15), nullable=False, unique=True, comment=\"名称\")\n```\n\n_4、在包demo下新建文件 **`crud.py`**_ \n```python\nfrom lsshu.demo.model import Models\nfrom lsshu.internal.crud import BaseCRUD\n\n\nclass CRUD(BaseCRUD):\n    \"\"\"表操作\"\"\"\n    params_model = Models\n```\n\n_5、在包demo下新建文件 **`schema.py`**_ \n```python\nfrom datetime import datetime\nfrom typing import Optional, List\n\nfrom pydantic import BaseModel\n\nfrom lsshu.internal.schema import SchemasPaginate\n\n\nclass SchemasResponse(BaseModel):\n    \"\"\"模型 返回\"\"\"\n    id: int\n    name: Optional[str] = None\n    created_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n\n    class Config:\n        orm_mode = True\n\n\nclass SchemasStoreUpdate(BaseModel):\n    \"\"\"模型 提交\"\"\"\n    name: Optional[str] = None\n\n\nclass SchemasPaginateItem(SchemasPaginate):\n    items: List[SchemasResponse]\n\n\nclass SchemasParams(BaseModel):\n    pass\n```\n_6、在包demo下新建文件 **`main.py`**_ \n```python\nfrom typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException, status, Security\nfrom sqlalchemy.orm import Session\n\nfrom lsshu.internal.db import dbs\nfrom lsshu.internal.depends import model_screen_params, model_post_screen_params, auth_user\nfrom lsshu.internal.schema import ModelScreenParams, Schemas\nfrom lsshu.oauth.user.schema import SchemasOAuthScopes\n\nfrom .crud import CRUD\nfrom .model import name as name\nfrom .schema import SchemasResponse, SchemasParams, SchemasPaginateItem, SchemasStoreUpdate\n\nrouter = APIRouter(tags=[\"Demo\"])\nscopes = [name, ]\n\n\n@router.get('/{}'.format(name), name=\"get {}\".format(name))\nasync def get_models(db: Session = Depends(dbs), params: ModelScreenParams = Depends(model_screen_params),\n                     auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.list\" % name])):\n    \"\"\"\n    :param db:\n    :param params:\n    :param auth:\n    :return:\n    \"\"\"\n    db_model_list = CRUD.paginate(db=db, screen_params=params)\n    return Schemas(data=SchemasPaginateItem(**db_model_list))\n\n\n@router.post('/{}.post'.format(name), name=\"post {}\".format(name))\nasync def post_models(db: Session = Depends(dbs), params: ModelScreenParams = Depends(model_post_screen_params),\n                     auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.list\" % name])):\n    \"\"\"\n    :param db:\n    :param params:\n    :param auth:\n    :return:\n    \"\"\"\n    db_model_list = CRUD.paginate(db=db, screen_params=params)\n    return Schemas(data=SchemasPaginateItem(**db_model_list))\n\n\n@router.get('/{}.params'.format(name), name=\"get {}\".format(name))\nasync def params_models(db: Session = Depends(dbs), auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.list\" % name])):\n    \"\"\"\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n\n    data = {}\n    return Schemas(data=SchemasParams(**data))\n\n\n@router.get('/{}/{{pk}}'.format(name), name=\"get {}\".format(name))\nasync def get_model(pk: int, db: Session = Depends(dbs), auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.get\" % name])):\n    \"\"\"\n    :param pk:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    db_model = CRUD.first(db=db, pk=pk)\n    if db_model is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"{} not found\".format(name.capitalize()))\n    return Schemas(data=SchemasResponse(**db_model))\n\n\n@router.post('/{}'.format(name), name=\"get {}\".format(name))\nasync def store_model(item: SchemasStoreUpdate, db: Session = Depends(dbs),\n                      auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.store\" % name])):\n    \"\"\"\n    :param item:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    db_model = CRUD.first(db=db, where=(\"name\", item.name))\n    if db_model is not None:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail=\"{} already registered\".format(name.capitalize()))\n    bool_model = CRUD.store(db=db, item=item)\n    return Schemas(data=SchemasResponse(**bool_model.to_dict()))\n\n\n@router.put(\"/{}/{{pk}}\".format(name), name=\"update {}\".format(name))\nasync def update_put_model(pk: int, item: SchemasStoreUpdate, db: Session = Depends(dbs),\n                           auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.update\" % name])):\n    \"\"\"\n    :param pk:\n    :param item:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    db_model = CRUD.first(db=db, pk=pk)\n    if db_model is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"{} not found\".format(name.capitalize()))\n    bool_model = CRUD.update(db=db, pk=pk, item=item)\n    return Schemas(data=SchemasResponse(**bool_model.to_dict()))\n\n\n@router.patch(\"/{}/{{pk}}\".format(name), name=\"update {}\".format(name))\nasync def update_patch_model(pk: int, item: SchemasStoreUpdate, db: Session = Depends(dbs),\n                             auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.update\" % name])):\n    \"\"\"\n    :param pk:\n    :param item:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    db_model = CRUD.first(db=db, pk=pk)\n    if db_model is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"{} not found\".format(name.capitalize()))\n    bool_model = CRUD.update(db=db, pk=pk, item=item, exclude_unset=True)\n    return Schemas(data=SchemasResponse(**bool_model.to_dict()))\n\n\n@router.delete(\"/{}/{{pk}}\".format(name), name=\"delete {}\".format(name))\nasync def delete_model(pk: int, db: Session = Depends(dbs), auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.delete\" % name])):\n    \"\"\"\n    :param pk:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    bool_model = CRUD.delete(db=db, pk=pk)\n    return Schemas(data=bool_model)\n\n\n@router.delete(\"/{}\".format(name), name=\"deletes {}\".format(name))\nasync def delete_role_models(pks: List[int], db: Session = Depends(dbs), auth: SchemasOAuthScopes = Security(auth_user, scopes=scopes + [\"%s.delete\" % name])):\n    \"\"\"\n    :param pks:\n    :param db:\n    :param auth:\n    :return:\n    \"\"\"\n    bool_model = CRUD.delete(db=db, pks=pks)\n    return Schemas(data=bool_model)\n```\n_7、在根目录下新建文件 **`config.py`**_ \n```python\nimport os\n\nROOT_PATH = os.path.dirname(__file__)\n# API 接口返回数据\nSCHEMAS_SUCCESS_CODE: int = 0\nSCHEMAS_SUCCESS_STATUS: str = 'success'\nSCHEMAS_SUCCESS_MESSAGE: str = '数据请求成功！'\nSCHEMAS_ERROR_CODE: int = 1\nSCHEMAS_ERROR_STATUS: str = 'error'\nSCHEMAS_ERROR_MESSAGE: str = '数据请求失败！'\n\n# 站点\nHOST_URL: str = \"\"\n\n# 上传目录\nUPLOAD_NAME: str = \"static\"\nUPLOAD_DIR: str = \"static\"\nUPLOAD_URI: str = \"/static\"\n\n# OAuth 授权相关\nOAUTH_DEFAULT_TAGS: list = ['OAuth']\nOAUTH_LOGIN_SCOPES: str = \"login\"\n\nOAUTH_TOKEN_URI: str = \"/token\"\nOAUTH_TOKEN_URL: str = \"/api%s\" % OAUTH_TOKEN_URI\nOAUTH_SCOPES_URI: str = \"/scopes\"\nOAUTH_TOKEN_SCOPES: dict = {\n    OAUTH_LOGIN_SCOPES: OAUTH_LOGIN_SCOPES.capitalize()\n}\nOAUTH_SECRET_KEY: str = \"4a876f7766d1a0e9d97231089be927e38d6dea09233ad212f056b7f1a75cd41d\"\nOAUTH_ALGORITHM: str = \"HS256\"\nOAUTH_ACCESS_TOKEN_EXPIRE_MINUTES: int = 300\nOAUTH_OAUTH_ROUTER: dict = {}\n\n# 超级管理员 账号:密码\nOAUTH_ADMIN_USERS: dict = {\n    \"admin\": \"admin\"\n}\n\n# 数据库相关\nDB_SQLALCHEMY_DATABASE_URL: str = \"sqlite:///{}\".format(os.path.join(ROOT_PATH, 'db.sqlite3'))\n# DB_SQLALCHEMY_DATABASE_URL = \"mysql+pymysql://root:root@192.168.1.3:3306/ic\" # ic 数据库\n\n# echo=True表示引擎将用repr()函数记录所有语句及其参数列表到日志\n# 由于SQLAlchemy是多线程，指定check_same_thread=False来让建立的对象任意线程都可使用。这个参数只在用SQLite数据库时设置\nDB_ENGINE_KWARGS: dict = {\n    # \"echo\": True,\n    # \"encoding\": 'utf-8',\n    # \"pool_pre_ping\": True,\n    # \"pool_size\": 100,\n    # \"pool_recycle\": 3600,\n    # \"max_overflow\": 100,\n    \"connect_args\": {\n        'check_same_thread': False,\n        # \"charset\": \"utf8mb4\"\n    }\n}\n# 在SQLAlchemy中，CRUD都是通过会话(session)进行的，所以我们必须要先创建会话，每一个SessionLocal实例就是一个数据库session\n# flush()是指发送数据库语句到数据库，但数据库不一定执行写入磁盘；commit()是指提交事务，将变更保存到数据库文件\nDB_SESSION_MAKER_KWARGS: dict = {\n    \"autoflush\": False,\n    \"autocommit\": False,\n    \"expire_on_commit\": True\n}\n```\n\n_8、在根目录下新建文件 **`.gitignore`**_ \n```gitignore\n.idea\nDesktop.ini\ndb.sqlite3\n.DS_Store\n*__pycache__*\n```\n\n\n### docker 部署\n_1、在根目录下新建文件 **`Dockerfile`**_ \n```Dockerfile\nFROM python:3.8\nWORKDIR /app\nEXPOSE 80\nRUN mkdir -p /app && pip install lsshu-cms\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\", \"--reload\"]\n```\n_2、创建镜像并运行_ \n```shell\ndocker build -t project_name . && docker run -d --name project_name -v /projects/project_path:/app -p 49000:80 project_name\n```\n_@project_name 项目名称; /projects/project_path 项目所在的目录; 49000 宿主机端口; 80 容器端口;_\n\n_3、删除容器和镜像_ \n```shell\ndocker stop project_name && docker rm project_name && docker rmi project_name\n```\n\n### nginx 部署\n```nginx\nhttp {\n    upstream project_server { \n        server 0.0.0.0:49000 weight=1;\n    }\n    server{\n        listen 80;\n        server_name project.com;\n        index index.html index.htm;\n        root /projects/project_path/dist;\n        \n        try_files $uri $uri/ /index.html;\n        \n        location /static/ {\n          alias /projects/project_path/static/; #静态资源路径\n        }\n        \n        location  ~/api|/docs|/openapi.json\n        {\n          proxy_pass  http://project_server;\n          # 配置websocket\n          proxy_http_version 1.1;\n          proxy_set_header Upgrade $http_upgrade;\n          proxy_set_header Connection \"upgrade\";\n          # 其它代理\n          proxy_set_header Http_Referer $http_referer;\n          proxy_set_header Host $host:$server_port; \n          proxy_set_header X-real-ip $remote_addr;\n        }\n        location ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md|app|main\\.py|config\\.py)\n        {\n            return 404;\n        }\n    }\n}\n```\n_@root /projects/project_path/dist 其中`dist` 可为前端打包的目录；其它根据自身增减_\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lsshu/fastapi-cms",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lsshu-cms",
    "package_url": "https://pypi.org/project/lsshu-cms/",
    "platform": null,
    "project_url": "https://pypi.org/project/lsshu-cms/",
    "project_urls": {
      "Homepage": "https://github.com/lsshu/fastapi-cms"
    },
    "release_url": "https://pypi.org/project/lsshu-cms/2.0.9/",
    "requires_dist": [
      "uvicorn[standard]",
      "fastapi",
      "sqlalchemy",
      "sqlalchemy-mptt",
      "python-multipart",
      "hashids",
      "passlib[bcrypt]",
      "python-jose[cryptography]",
      "Pillow",
      "PyMySQL"
    ],
    "requires_python": ">=3.8",
    "summary": "=?utf-8?b?RmFzdEFQSSDlvIDlj5HnmoRDTVM=?=",
    "version": "2.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15591318,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d1a32bb2cd6e964edffea892df93f4e480abb06151bef968b20b0c490cc4b2c",
        "md5": "0a1fd66c45cc6c7062702a189605e7a7",
        "sha256": "317b7ad22647edce8db55a3d7ab9e25f4045448f734feafe5612078fdda35c3b"
      },
      "downloads": -1,
      "filename": "lsshu_cms-2.0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a1fd66c45cc6c7062702a189605e7a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 33994,
      "upload_time": "2022-10-31T02:23:53",
      "upload_time_iso_8601": "2022-10-31T02:23:53.764295Z",
      "url": "https://files.pythonhosted.org/packages/5d/1a/32bb2cd6e964edffea892df93f4e480abb06151bef968b20b0c490cc4b2c/lsshu_cms-2.0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1953856a9ccdccaae7cded4346fa39b3bdb442cc151fe300f7dfe6d5a35da324",
        "md5": "dfc11514b9d49d52efeca567f84d8d63",
        "sha256": "63a6b76046c21c0b9c2ea2c175dc0c1c8e0662aea8f1bb57d49fb4d23f848072"
      },
      "downloads": -1,
      "filename": "lsshu-cms-2.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "dfc11514b9d49d52efeca567f84d8d63",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 24379,
      "upload_time": "2022-10-31T02:23:56",
      "upload_time_iso_8601": "2022-10-31T02:23:56.255726Z",
      "url": "https://files.pythonhosted.org/packages/19/53/856a9ccdccaae7cded4346fa39b3bdb442cc151fe300f7dfe6d5a35da324/lsshu-cms-2.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}