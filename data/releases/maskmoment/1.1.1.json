{
  "info": {
    "author": "Tony Wong",
    "author_email": "tonywong94@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# maskmoment\nMasked moments of radio data cubes, using a dilated masking approach.  The basic idea is that the mask is produced from the cube itself, by taking a high significance contour (e.g. 4-sigma) and expanding it to a surrounding lower-significance contour (e.g. 2-sigma).  User has the option to smooth the data (spatially and/or spectrally) before defining these contours, and to pad the mask by a certain number of pixels in all directions.  An estimate of the noise at each location in the cube is needed, which can be provided from a different input cube, or can be calculated by the script from the data, optionally using a gain image.\n\nBased on idl_mommaps: https://github.com/tonywong94/idl_mommaps\n\nRequired packages: [spectral_cube](https://spectral-cube.readthedocs.io/), [radio_beam](https://radio-beam.readthedocs.io/), [astropy](https://www.astropy.org), [scipy](https://www.scipy.org)\n\nHow to use:\n\n    from maskmoment import maskmoment\n    maskmoment(img_fits='file.fits', *other parameters*)\n\n### Main Parameters (see code for additional options)\n\n    img_fits : FITS file name, required\n        The image cube, this should be in units of K, Jy/beam, or equivalent.\n    gain_fits : FITS file name, optional\n        The gain cube, e.g. pb cube from CASA.  This should have a value between\n        0 and 1, with 0 near the edges and 1 near the center of the image, and \n        have the same dimensions as the image cube.\n        NOTE: The gain cube is ignored if a noise cube (rms_fits) is given.\n    rms_fits : FITS file name, optional\n        The noise cube, providing an estimate of the rms noise at each pixel.\n        This should have the same dimensions and units as the image cube.\n        NOTE: If rms_fits is not given, a noise cube is generated from the\n        image cube, after removing any gain variation using the gain cube.\n    mask_fits : FITS file name, optional\n        External mask cube to use.  This cube should have 1's for valid pixels \n        and 0's for excluded pixels.  If this is provided then the mask generation\n        is skipped and the program goes straight to calculating the moments.\n    outdir : string, optional\n        Directory to write the output files.\n        Default: Write to the directory where img_fits resides.\n        NOTE: Currently this directory is assumed to exist.\n    outname : string, optional\n        Basename for output files.  For instance, outname='foo' produces files\n        'foo.mom0.fits.gz', etc.\n        Default: Based on root name of img_fits.\n    snr_hi : float, optional\n        The high significance sigma threshold from which to begin mask dilation.\n        Default: 4\n    snr_lo : float, optional\n        The low significance sigma threshold at which to end mask dilation.\n        Default: 2\n    snr_hi_minch : int, optional\n        High significance mask is required to span at least this many channels\n        at all pixels.\n        Default: 1\n    snr_lo_minch : int, optional\n        Low significance mask is required to span at least this many channels\n        at all pixels.\n        Default: 1\n    min_tot_ch : int, optional\n        Each contiguous mask region must span at least this many channels (but \n        it's not necessary that every pixel in the region span this many channels).\n        Default: 2\n    minbeam : float, optional\n        Minimum velocity-integrated area of a mask region in units of the beam size.\n        Default: 1\n    nguard : tuple of two ints, optional\n        Expand the final mask by nguard[0] pixels in the sky directions and\n        nguard[1] channels in velocity.  Currently these values must be equal\n        if both are non-zero.\n        If nguard[0] = 0 then no expansion is done in sky coordinates.\n        If nguard[1] = 0 then no expansion is done in velocity.\n        Default: [0,0]\n    edgech : int, optional\n        Number of channels at each end of vel axis to use for rms estimation.\n        Default: 5\n    fwhm : float or :class:`~astropy.units.Quantity`, optional\n        Spatial resolution to smooth to before generating the dilated mask.  \n        If value is not an astropy quantity, assumed to be given in arcsec.\n        Default: No spatial smoothing is applied.\n    vsm : float or :class:`~astropy.units.Quantity`, optional\n        Full width of the spectral smoothing kernel (or FWHM for gaussian).  \n        If given as astropy quantity, should be given in velocity units.  \n        If not given as astropy quantity, interpreted as number of channels.\n        Default: No spectral smoothing is applied.\n    vsm_type : string, optional\n        What type of spectral smoothing to employ.  Currently three options:\n        (1) 'boxcar' - 1D boxcar smoothing, vsm rounded to integer # of chans.\n        (2) 'gauss' - 1D gaussian smoothing, vsm is the convolving gaussian FWHM.\n        (3) 'gaussfinal' - 1D gaussian smoothing, vsm is the gaussian FWHM\n            after convolution, assuming FWHM before convolution is 1 channel.        \n        Default: 'gauss'\n    perpixel : boolean, optional\n        Whether to calculate the rms per XY pixel instead of over whole image.\n        Set to True if you know there is a sensitivity variation across the image\n        but you don't have a gain cube - requires rms_fits and gain_fits unset.\n        Default: False\n    output_peak : boolean, optional\n        Output the peak brightness and effective line width (mom0/peak) in \n        addition to the moment maps.  The line width is normalized to match mom-2 \n        for a pure Gaussian profile.\n        Default: False\n    output_snr_cube : boolean, optional\n        Output the cube in SNR units in addition to the moment maps.\n        Default: False\n    output_snr_peak : boolean, optional\n        Output the peak SNR image in addition to the moment maps.\n        Default: False\n    output_2d_mask : boolean, optional\n        Output the projected 2-D mask as well as the newly generated mask.\n        The projected mask at a given pixel is valid for all channels as\n        long as the parent mask is valid for any channel.\n        Default: False\n    to_kelvin : boolean, optional\n        Output the moment maps in K units if the cube is in Jy/beam units.\n        Default: True\n\n### Credits\n\nBase code was developed by Tony Wong in 2019-2020.  Hailin Wang assisted with scripting, testing, and debugging the code during development.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tonywong94/maskmoment",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maskmoment",
    "package_url": "https://pypi.org/project/maskmoment/",
    "platform": "",
    "project_url": "https://pypi.org/project/maskmoment/",
    "project_urls": {
      "Homepage": "https://github.com/tonywong94/maskmoment"
    },
    "release_url": "https://pypi.org/project/maskmoment/1.1.1/",
    "requires_dist": [
      "numpy (>=1.8.0)",
      "scipy",
      "astropy",
      "radio-beam",
      "spectral-cube"
    ],
    "requires_python": "",
    "summary": "Masked moments of radio data cubes",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14380142,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bbe13c4482c95f2d5f2fa9d3fb9f597cf14d769b37d8d811d376785f698f414",
        "md5": "920a47b5e0a4ec2d3f2e6709001f4b47",
        "sha256": "4af2f7c2042865b88de37cb2c5137262c7d12d92f1596ecdf534642c444db403"
      },
      "downloads": -1,
      "filename": "maskmoment-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "920a47b5e0a4ec2d3f2e6709001f4b47",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15555,
      "upload_time": "2021-12-15T20:07:30",
      "upload_time_iso_8601": "2021-12-15T20:07:30.366614Z",
      "url": "https://files.pythonhosted.org/packages/6b/be/13c4482c95f2d5f2fa9d3fb9f597cf14d769b37d8d811d376785f698f414/maskmoment-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec7cfaa5fbdaf68155526a28ee19ef4d492de55aef8e19692d84b7eeabce2cee",
        "md5": "bba6f3262561ad376d16f400d7a070fb",
        "sha256": "f3d7dd8e18ea377a773e932d1baed212a32291be142f10f5eb4e5097142cc9a5"
      },
      "downloads": -1,
      "filename": "maskmoment-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bba6f3262561ad376d16f400d7a070fb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13764,
      "upload_time": "2021-12-15T20:07:32",
      "upload_time_iso_8601": "2021-12-15T20:07:32.196175Z",
      "url": "https://files.pythonhosted.org/packages/ec/7c/faa5fbdaf68155526a28ee19ef4d492de55aef8e19692d84b7eeabce2cee/maskmoment-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}