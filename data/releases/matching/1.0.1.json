{
  "info": {
    "author": "Henry Wilde",
    "author_email": "henrydavidwilde@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Matching\n========\n\n.. image:: https://img.shields.io/pypi/v/matching.svg\n   :target: https://pypi.org/project/matching/\n\n.. image:: https://coveralls.io/repos/github/daffidwilde/matching/badge.svg?branch=master\n   :target: https://coveralls.io/github/daffidwilde/matching?branch=master\n\n.. image:: https://travis-ci.com/daffidwilde/matching.svg?branch=master\n   :target: https://travis-ci.com/daffidwilde/matching\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/ambv/black\n\n\nA package for solving matching games.\n-------------------------------------\n\nA matching game is defined by two sets, called suitors and reviewers. Each\nsuitor has a ranked preference list of the reviewers and vice versa. The\nobjective of a matching game is to find a mapping between the two sets such that\nno pair in the mapping can do better without destabilising the other matchings.\n\nIn ``matching``, we divide matching games into two general problems; these are\nknown colloquially as stable marriage problems and hospital-resident assignment\nproblems, respectively.\n\n\nThe stable marriage problem\n---------------------------\n\nHere, our sets must be of the same size and we require each suitor (and\nreviewer) to rank all members of the other set. In this way, we obtain a\nmatching between our suitors and reviewers where each suitor is matched to\nexactly one reviewer, and so our matching is bijective.\n\nIt is known that instances of the stable marriage problem can be solved to give\na unique, stable and suitor-optimal matching using an algorithm developed by\nDavid Gale and Lloyd Shapley. The suitor-oriented algorithm is as follows:\n\n0. Assign all suitors and reviewers to be unmatched.\n\n1. Take any unmatched suitor, **s**, and their most preferred reviewer, **r**.\n   If all suitors are matched, end.\n    \n2. If **r** is unmatched, then match **s** to **r**, and go to 1. Otherwise, go\n   to 3.\n    \n3. Consider **r**'s current match, **s'**. If **r** prefers **s** to **s'**,\n   then unmatch **s'** from **r** and match **s** to **r**. Otherwise, leave\n   **s** unmatched and remove **r** from the preference list of **s**. In either\n   case, go to 1.\n\nBy unique, we mean that the result of this algorithm is invariant of which order\nunmatched suitors are considered. Stability is the concept that the pairings in\nthe matching are such that nobody could be matched to someone they prefer more\nwithout their new partner then being able to be with someone better.\nThe final matching being suitor-optimal means that every suitor has their best\npossible matching without making the matching unstable. A corollary of this is\nthat, in fact, every reviewer has their worst possible matching after the\nalgorithm terminates.\n\nUsage\n^^^^^\n\nWith both forms of matching game, ``matching`` uses a ``Player`` class to\nrepresent the members of each party. In particular, for instances of the stable\nmarriage problem, we require a list of ``Player`` instances from each party\n(suitors and reviewers) detailing their preferences lists. The preference lists\nfor suitors should be comprised of the names of the reviewers, and vice versa.\n\nConsider the following stable marriage problem which is represented on a\nbipartite graph.\n\n.. image:: ./img/stable_marriage.png\n   :align: center\n   :width: 10cm\n\nWe convey the information above in the following way:\n\n>>> from matching import Player\n>>> suitors = [\n...     Player(name=\"A\", pref_names=[\"D\", \"E\", \"F\"]),\n...     Player(name=\"B\", pref_names=[\"D\", \"F\", \"E\"]),\n...     Player(name=\"C\", pref_names=[\"F\", \"D\", \"E\"]),\n... ]\n>>> reviewers = [\n...     Player(name=\"D\", pref_names=[\"B\", \"C\", \"A\"]),\n...     Player(name=\"E\", pref_names=[\"A\", \"C\", \"B\"]),\n...     Player(name=\"F\", pref_names=[\"C\", \"B\", \"A\"]),\n... ]\n\nThen to solve this matching game, we make use of the ``StableMarriage`` class,\nlike so:\n\n>>> from matching import StableMarriage\n>>> sm = StableMarriage(suitors, reviewers)\n>>> sm.solve()\n{A: E, B: D, C: F}\n\nIt is easily checked - on paper or mentally - that this is the correct solution.\n\nNote\n^^^^\n\nThis matching is not a standard Python dictionary, though it does largely look\nand behave like one. It is in fact an instance of the ``Matching`` class:\n\n>>> match.matching.__class__\nmatching.matching.Matching\n\nThis dictionary-like object is primarily useful as a teaching device that eases\nthe process of manipulating a matching after a solution has been found. \n\nNote also that the keys and values in this ``Matching`` are the ``Player``\ninstances that are passed to the game, and not the player names. If you require\nthe names, they will need to be extracted as necessary.\n\n\nThe hospital-resident assignment problem\n----------------------------------------\n\nFor this family of problems, we have a set of suitors (residents) and reviewers\n(hospitals), and ranked preferences associated with the elements of these sets,\nas in the stable marriage problem. In this case, we do not require these sets to\nbe of the same size, nor do we require any given suitor (or reviewer) to rank\nall elements of the other set.\n\nHowever, there are conditions on these lists which are necessary for a valid\ninstance of this problem: every hospital must rank all residents who rank them,\nand no hospital may rank a resident who has not been ranked by them.\n\nIn addition to these lists, each hospital has associated with it an integer\ncapacity. This capacity is the maximum number of residents that may be matched\nto it at any given time.\n\nAn algorithm which solves this problem is famously utilised in the USA by the\n`National Resident Matching Program <http://www.nrmp.org/>`_, hence the\nnickname. In fact, research surrounding this algorithm won Shapley, along with\nAlvin Roth, the `Nobel Prize for Economics <http://www.nytimes.com/2012/10/16/\nbusiness/economy/\nalvin-roth-and-lloyd-shapley-win-nobel-in-economic-science.html>`_ in 2012. In\nthis package we refer to this algorithm as the Hospital-Resident algorithm.\nHowever, it has several synonyms including: 'The Match', 'the Capacitated\nGale-Shapley algorithm', 'the Roth-Shapley algorithm', and 'the deferred\nacceptance algorithm'. This algorithm has also been used to develop donor chains\nfor kidney transplants saving thousands of lives in the process.\n\nThe suitor- (resident-) oriented algorithm is as follows:\n\n0. Assign all residents to be unmatched, and all hospitals to be totally\n   unsubscribed.\n\n1. Take any unmatched resident with a non-empty preference list, :math:`r`, and\n   consider their most preferred hospital, :math:`h`. Match them to one another.\n   \n2. If, as a result of this new matching, :math:`h` is now over-subscribed, find\n   the worst resident currently assigned to :math:`h`, :math:`r'`. Set\n   :math:`r'` to be unmatched and remove them from the hospital's matching. Go\n   to 3.\n\n3. If :math:`h` is at capacity (fully subscribed) then find their worst current\n   match :math:`r'`. Then, for each successor, :math:`s`, to :math:`r'` in the\n   preference list of :math:`h`, delete the pair :math:`(s, h)` from the game.\n   Go to 4.\n\n4. Go to 1 until there are no such residents left, then end.\n\nUsage\n^^^^^\n\nIn a similar fashion to the stable marriage problem, we interpret\nhospital-resident assignment problems using the ``Player`` class and a solver\nclass specific to HR. In addition to the preference lists of either party,\nhowever, we pass a capacity to each hospital (reviewer).\n\nConsider the following example. We have five medical residents - Alec, Sammy,\nJo, Lucy and David - and three hospitals, each with 2 positions available:\nMercy, City and General. We display their preferences in a similar fashion to\nbefore:\n\n.. image:: ./img/hospital_resident.png\n   :align: center\n   :width: 10cm\n\nIn ``matching`` we summarise this problem in the following way:\n\n>>> from matching import Player\n>>> residents = [\n...     Player(\"A\", [\"C\"]),\n...     Player(\"S\", [\"C\", \"M\"]),\n...     Player(\"D\", [\"C\", \"M\", \"G\"]),\n...     Player(\"L\", [\"M\", \"C\", \"G\"]),\n...     Player(\"J\", [\"C\", \"G\", \"M\"]),\n... ]\n>>> hospitals = [\n...     Player(\"M\", [\"D\", \"L\", \"J\", \"S\"], capacity=2),\n...     Player(\"C\", [\"D\", \"A\", \"S\", \"L\", \"J\"], capacity=2),\n...     Player(\"G\", [\"D\", \"J\", \"L\"], capacity=2),\n... ]\n\nWe then solve this problem using the ``HospitalResident`` class:\n\n>>> from matching import HospitalResident\n>>> hr = HospitalResident(suitors=residents, reviewers=hospitals)\n>>> hr.solve()\n{M: [L, S], C: [D, A], G: [J]}\n\nAgain, though less likely to be done in your head, you can verify that this\nmatching is correct according to the algorithm stated above.\n\n\nGet in contact!\n---------------\n\nI hope this package is useful, and feel free to contact me here (or on Twitter:\n`@daffidwilde <https://twitter.com/daffidwilde>`_) with any issues or\nrecommendations. PRs always welcome!\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/daffidwilde/matching",
    "keywords": "game-theory gale-shapley matching-games",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matching",
    "package_url": "https://pypi.org/project/matching/",
    "platform": "",
    "project_url": "https://pypi.org/project/matching/",
    "project_urls": {
      "Homepage": "https://github.com/daffidwilde/matching"
    },
    "release_url": "https://pypi.org/project/matching/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A package for solving matching games.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8580168,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0314e954ae797d06ffd8c183cac38dd1abf06be33160f8e77ac3acbff5f43f2f",
        "md5": "ab6875f85566ac6b0cb1f54f15572f6b",
        "sha256": "b005cfbf85734af87dbc8b3eb771eec34246c7c6bcf3882f05d8974a49052d2e"
      },
      "downloads": -1,
      "filename": "matching-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ab6875f85566ac6b0cb1f54f15572f6b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13782,
      "upload_time": "2019-01-28T10:36:23",
      "upload_time_iso_8601": "2019-01-28T10:36:23.687168Z",
      "url": "https://files.pythonhosted.org/packages/03/14/e954ae797d06ffd8c183cac38dd1abf06be33160f8e77ac3acbff5f43f2f/matching-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}