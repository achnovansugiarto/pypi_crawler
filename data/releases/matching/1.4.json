{
  "info": {
    "author": "Henry Wilde",
    "author_email": "henrydavidwilde@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Matching\n========\n\n.. image:: https://github.com/daffidwilde/matching/workflows/CI/CD/badge.svg\n    :target: https://github.com/daffidwilde/matching/actions?query=workflow%3ACI%2FCD+branch%3Amain\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n.. image:: https://zenodo.org/badge/119597240.svg\n    :target: https://zenodo.org/badge/latestdoi/119597240\n\n.. image:: https://joss.theoj.org/papers/10.21105/joss.02169/status.svg\n    :target: https://doi.org/10.21105/joss.02169\n\n\nA package for solving matching games.\n-------------------------------------\n\nMatching games allow for the allocation of resources and partnerships in a fair\nway. Typically, a matching game is defined by two sets of players that each have\npreferences over at least some of the elements of the other set. The objective\nof the game is then to find a mapping between the sets of players in which\neveryone is happy enough with their match.\n\nIn Matching, we deal with four types of matching game:\n\n- the stable marriage problem (SM);\n- the hospital-resident assignment problem (HR);\n- the student-allocation problem (SA);\n- the stable roommates problem (SR).\n\n\nInstallation\n------------\n\nMatching requires Python 3.5 or above, and relies only on `NumPy\n<http://www.numpy.org/>`_ for general use.\n\nThe library is most easily installed using :code:`pip`::\n\n    $ python -m pip install matching\n\nHowever, if you would like to install it from source then go ahead and clone the\nGitHub repo::\n\n    $ git clone https://github.com/daffidwilde/matching.git\n    $ cd matching\n    $ python setup.py install\n\n\nDocumentation\n-------------\n\nFull documentation (including tutorials and discussion material) is available\nhere: `<https://matching.readthedocs.io>`_\n\nAn academic paper on this library has been included in the Journal of Open\nSource Software (JOSS) and is available here:\n`<https://joss.theoj.org/papers/10.21105/joss.02169>`_\n\nPlaying a simple game\n---------------------\n\nWith all games, Matching uses a ``Player`` class to represent the members of the\n\"applying\" party, i.e. residents and students. For HR and SA, there are specific\nclasses to represent the roles of ``Hospital``, ``Project`` and ``Supervisor``.\n\nConsider the following instance of SM which is represented on a bipartite graph\nwhere the suitors and reviewers are along the left and right respectively.\n\n.. image:: ./tex/stable_marriage.png\n   :align: center\n   :width: 10cm\n\nWe can construct these preferences using dictionaries:\n\n>>> suitor_preferences = {\n...     \"A\": [\"D\", \"E\", \"F\"], \"B\": [\"D\", \"F\", \"E\"], \"C\": [\"F\", \"D\", \"E\"]\n... }\n>>> reviewer_preferences = {\n...     \"D\": [\"B\", \"C\", \"A\"], \"E\": [\"A\", \"C\", \"B\"], \"F\": [\"C\", \"B\", \"A\"]\n... }\n\nThen to solve this matching game, we make use of the ``StableMarriage`` class,\nlike so:\n\n>>> from matching.games import StableMarriage\n>>> game = StableMarriage.create_from_dictionaries(\n...     suitor_preferences, reviewer_preferences\n... )\n>>> game.solve()\n{A: E, B: D, C: F}\n\n\nThe ``Matching`` object\n+++++++++++++++++++++++\n\nThis matching is not a standard Python dictionary, though it does largely look\nand behave like one. It is in fact an instance of the ``SingleMatching`` class:\n\n>>> matching = game.matching\n>>> type(matching)\n<class 'matching.matchings.SingleMatching'>\n\nThis dictionary-like object is primarily useful as a teaching device that eases\nthe process of manipulating a matching after a solution has been found. \n\n\n``Player`` classes\n++++++++++++++++++\n\nDespite passing dictionaries of strings here, the matching displays instances of\n``matching.player.Player``:\n\n>>> matching = game.matching\n>>> for suitor in matching:\n...     print(type(suitor))\n<class 'matching.players.player.Player'>\n<class 'matching.players.player.Player'>\n<class 'matching.players.player.Player'>\n\nThis is because ``create_from_dictionaries`` creates instances of the\nappropriate player classes first and passes them to the game class. Using\ndictionaries like this can be an efficient way of creating large games but it\ndoes require the names of the players in each party to be unique.\n\nWith all games, Matching uses a ``Player`` class to represent the members of the\n\"applying\" party, i.e. residents and students. For HR and SA, there are specific\nclasses to represent the roles of ``Hospital``, ``Project`` and ``Supervisor``.\n\n\nA note on performance\n---------------------\n\nOne of the limitations of this library is the time complexities of the algorithm\nimplementations. In practical terms, the running time of any of the algorithms\nin Matching is negligible but the theoretic complexity of each has not yet been\nattained. For example, an instance of HR with 400 applicants and 20 hospitals is\nsolved in less than one tenth of a second:\n\n>>> from matching.games import HospitalResident\n>>> import numpy as np\n>>> np.random.seed(0)\n>>> num_residents, num_hospitals = 400, 20\n>>> resident_prefs = {\n...     r: np.argsort(np.random.random(size=num_hospitals))\n...     for r in range(num_residents)\n... }\n>>> hospital_prefs = {\n...     h: np.argsort(np.random.random(size=num_residents))\n...     for h in range(num_hospitals)\n... }\n>>> capacities = {h: num_hospitals for h in hospital_prefs}\n>>> game = HospitalResident.create_from_dictionaries(\n...     resident_prefs, hospital_prefs, capacities\n... )\n>>> _ = game.solve() # 48.6 ms ± 963 µs per loop\n\n\nGet in contact!\n---------------\n\nI hope this package is useful, and feel free to contact me here (or on Twitter:\n`@daffidwilde <https://twitter.com/daffidwilde>`_) with any issues or\nrecommendations. Pull requests are always welcome!\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/daffidwilde/matching",
    "keywords": "game-theory gale-shapley matching-games",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matching",
    "package_url": "https://pypi.org/project/matching/",
    "platform": "",
    "project_url": "https://pypi.org/project/matching/",
    "project_urls": {
      "Homepage": "https://github.com/daffidwilde/matching"
    },
    "release_url": "https://pypi.org/project/matching/1.4/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A package for solving matching games.",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8580168,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fcbc01b165e3f4e9aa53368d09cb696e3241fbb094e60f44ba9c6e2eac0fadc",
        "md5": "ad955b55e8f847467b42c0a589009822",
        "sha256": "31c3a0e3795328d4c068edc6b8a7f9496f6152dc2f35412a25e79ede19ab2c4c"
      },
      "downloads": -1,
      "filename": "matching-1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ad955b55e8f847467b42c0a589009822",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 29725,
      "upload_time": "2020-11-04T17:00:42",
      "upload_time_iso_8601": "2020-11-04T17:00:42.670859Z",
      "url": "https://files.pythonhosted.org/packages/6f/cb/c01b165e3f4e9aa53368d09cb696e3241fbb094e60f44ba9c6e2eac0fadc/matching-1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8878bc675d0224ed87fd196d27295e9109d63989aa517b6a046f5637f114811",
        "md5": "49d6ca60f07a86ecf0e0a53eb99c5b73",
        "sha256": "62fa1c2dc1b36f2ea70584d5ca776b3af02e9516140ee4c0c88123c7abe66896"
      },
      "downloads": -1,
      "filename": "matching-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "49d6ca60f07a86ecf0e0a53eb99c5b73",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 22142,
      "upload_time": "2020-11-04T17:00:44",
      "upload_time_iso_8601": "2020-11-04T17:00:44.656388Z",
      "url": "https://files.pythonhosted.org/packages/a8/87/8bc675d0224ed87fd196d27295e9109d63989aa517b6a046f5637f114811/matching-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}