{
  "info": {
    "author": "Caleb Hearon",
    "author_email": "caleb@chearon.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Overview\n========\n\nBundles up all dependencies used by an executable (or library) into a\nsingle folder, and patches all of the executables to look in that\ndirectory so you don't have to rely on your users having certain\nlibraries installed.\n\nPart of my motivation in making this was to learn Python 3's\n`async/await <https://docs.python.org/3/library/asyncio-task.html>`__,\ntoo. The processes that are used to patch stuff and query dependencies\nall run in parallel so it should be super fast!\n\nUsage and requirements\n======================\n\nYou need:\n\n-  Python 3 (``brew install python3``) because it uses async/await and\n   asyncio\n-  Xcode CLI tools (I think)\n\nThen do:\n\n::\n\n    ./macpack.py <your executable here>\n\nIt should print the dependency tree like this example:\n\n::\n\n    2$ ./macpack.py ~/Code/node-canvas/build/Release/canvas.node\n    Patching /Users/caleb/Code/node-canvas/build/Release/canvas.node\n    16 total non-system dependencies\n    1       libpixman-1.0.dylib -> 1\n    2       libcairo.2.dylib -> 2, 1, 16, 9, 3\n    3       libpng16.16.dylib -> 3\n    4       libpangocairo-1.0.0.dylib -> 4, 5, 2, 14, 6, 13, 7, 8, 15, 16, 9\n    5       libpango-1.0.0.dylib -> 5, 6, 13, 7, 8\n    6       libgobject-2.0.0.dylib -> 6, 7, 11, 12, 8\n    7       libglib-2.0.0.dylib -> 7, 11, 8\n    8       libintl.8.dylib -> 8\n    9       libfreetype.6.dylib -> 9, 3\n    10      libjpeg.8.dylib -> 10\n    11      libpcre.1.dylib -> 11\n    12      libffi.6.dylib -> 12\n    13      libgthread-2.0.0.dylib -> 13, 7, 11, 8\n    14      libpangoft2-1.0.0.dylib -> 14, 5, 6, 13, 7, 8, 15, 16, 9\n    15      libharfbuzz.0.dylib -> 15, 7, 8, 9\n    16      libfontconfig.1.dylib -> 16, 9\n\n    canvas.node + 16 dependencies successfully patched\n\nEverything that your executable uses should then be copied into the same\nfolder that your binary is. When your main binary is run next, it will\nlook in the new location you specified (default is\n``binary_dir/libs/<lib>``, see ``-d`` below). Those dylibs will look in\nthe same directory for dylibs they depend on, too, even if your main\nbinary does not use them.\n\nYou can then distribute the whole folder as one.\n\nOptions\n=======\n\n-v, --verbose\n-------------\n\nPass ``-v`` to get output from ``otool`` if it failed to patch or more\ninformation on which dependencies could not be loaded.\n\nIt will also print a more easy to read dependency tree, with the full\nnames of dependenies under each one\n\n-d, --destination\n-----------------\n\nThis is the destination folder **relative to the binary's containing\nfolder** to copy library dependencies to. For example, if you binary is\n``/a/b/program``, and you pass ``-d ../libraries``, they will copy to\nand load from ``/a/libraries/``. The default value is ``../libs``.\n\nIf you want the executable and libraries to have absolute paths instead\nof loading relative to the binary, you just need to specify an absolutep\npath for ``-d``. In that case the ``@executable_path`` will not be put\ninto the binaries at all.\n\n-n, --dry-run\n-------------\n\nJust prints the dependency tree and doesn't do any patching. Use ``-nv``\nto get a slightly more user-friendly tree printed out.\n\nBackground\n==========\n\nIt will parse out the executable's dependencies (using ``otool -L``) and\ntheir dependencies recursively, filtering out system libraries. When the\ntree is built, it will copy the libraries to your program's folder and\nthen patch everything that it is aware of (using ``install_name_tool``).\nIt should be able to handle different symbolic links and all that\ncorrectly\n\nCredits\n=======\n\nInspired by\n`macdylibbundler <https://github.com/auriamg/macdylibbundler>`__, it\ndoes the same basic thing except with less options (at the moment) and\nit builds a full dependency tree",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/chearon/macpack/tarball/v1.0.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chearon/macpack",
    "keywords": "macos,bundle,package,redistribute,redistributable,install_name_tool,otool,mach",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "macpack",
    "package_url": "https://pypi.org/project/macpack/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/macpack/",
    "project_urls": {
      "Download": "https://github.com/chearon/macpack/tarball/v1.0.0",
      "Homepage": "https://github.com/chearon/macpack"
    },
    "release_url": "https://pypi.org/project/macpack/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Makes a macOS binary redistributable by searching the dependency tree and copying/patching non-system libraries.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2719302,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e43c905c2e57fd18ee925346895be6240b46017fb43c8ea48311534db6e99b19",
        "md5": "e0251c801924da65f5440e42e00a0d27",
        "sha256": "e3a140df3b2812ef473dc5e8466150c5bf3f6ef9a7204b85119a034d5d8d4c12"
      },
      "downloads": -1,
      "filename": "macpack-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e0251c801924da65f5440e42e00a0d27",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3715,
      "upload_time": "2016-11-23T16:38:39",
      "upload_time_iso_8601": "2016-11-23T16:38:39.891152Z",
      "url": "https://files.pythonhosted.org/packages/e4/3c/905c2e57fd18ee925346895be6240b46017fb43c8ea48311534db6e99b19/macpack-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}