{
  "info": {
    "author": "Quentin Comte-Gaz",
    "author_email": "quentin@comte-gaz.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Home Automation",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Milight Wifi Bridge 3.0 Python library\n[![Build Status](https://travis-ci.org/QuentinCG/Milight-Wifi-Bridge-3.0-Python-Library.svg?branch=master)](https://travis-ci.org/QuentinCG/Milight-Wifi-Bridge-3.0-Python-Library) [![codecov](https://codecov.io/gh/QuentinCG/Milight-Wifi-Bridge-3.0-Python-Library/branch/master/graph/badge.svg)](https://codecov.io/gh/QuentinCG/Milight-Wifi-Bridge-3.0-Python-Library) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/171affbf02ea46d891765c2d39c56ce2)](https://www.codacy.com/manual/QuentinCG/Milight-Wifi-Bridge-3.0-Python-Library?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=QuentinCG/Milight-Wifi-Bridge-3.0-Python-Library&amp;utm_campaign=Badge_Grade) [![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://github.com/QuentinCG/Milight-Wifi-Bridge-3.0-Python-Library/blob/master/LICENSE) [![Donate](https://img.shields.io/badge/Donate-PayPal-blue.svg)](https://paypal.me/QuentinCG)\n\n## What is it\n\nThis python library is designed to be integrated in python or shell projects using any Milight 3.0 bulbs and wifi bridge (with protocol LimitlessLED Wifi Bridge v6.0).\n\nIt is multi-platform and compatible with python 2.7+ and 3+.\n\n<img src=\"milight.jpg\" width=\"800\">\n\n## Functionalities\n\nNon-exhaustive list of MilightWifiBridge class functionalities:\n- Link/Unlink lights\n- Light on/off\n- Wifi bridge light on/off\n- Set night light mode\n- Set white light mode (default light) (of lights and bridge light)\n- Set color (of lights and bridge light)\n- Set saturation\n- Set brightness (of lights and bridge light)\n- Set disco mode (9 available) (of lights and bridge light)\n- Increase/Decrease disco mode speed (of lights and bridge light)\n- Get Milight wifi bridge MAC address\n\nNon-exhaustive list of shell commands:\n- Link/Unlink lights\n- Light on/off\n- Wifi bridge light on/off\n- Set night light mode\n- Set white light mode (default light) (of lights and bridge light)\n- Set color (of lights and bridge light)\n- Set saturation\n- Set brightness (of lights and bridge light)\n- Set disco mode (9 available) (of lights and bridge light)\n- Increase/Decrease disco mode speed (of lights and bridge light)\n- Get Milight wifi bridge MAC address\n- Help\n\n## How to install (python script and shell)\n\n- Connect your Milight 3.0 wifi bridge to your wifi network (install the android app and follow the instruction: <https://play.google.com/store/apps/details?id=com.irainxun.wifilight>)\n- Get IP address and port of the wifi bridge (ip can be found from your internet box, default port is 5987)\n- Load your shell or python script\n\nNote:\n- You can install this library as a package using `python setup.py install` command in root folder.\n- You can launch unit-test using `python setup.py test` command in root folder.\n\n## How to use in shell\n\n```shell\n# Note: You can combine multiple requests in one command if you want\n\n# Get help\npython3 MilightWifiBridge.py --help\n\n# Link bulbs to a specific zone (light on the bulbs max 3sec before calling this command)\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --link\n\n# Unlink bulbs to a specific zone (light on the bulbs max 3sec before calling this command)\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --unlink\n\n# Turn lights ON\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --turnOn\n\n# Turn lights OFF\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --turnOff\n\n# Turn wifi bridge light ON\npython3 MilightWifiBridge.py --ip 192.168.1.23 --turnOnWifiBridgeLamp\n\n# Turn wifi bridge light OFF\npython3 MilightWifiBridge.py --ip 192.168.1.23 --turnOffWifiBridgeLamp\n\n# Set night mode\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --setNightMode\n\n# Set white mode\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --setWhiteMode\n\n# Set white mode of the bridge light\npython3 MilightWifiBridge.py --ip 192.168.1.23 --setWhiteModeBridgeLamp\n\n# Speed up disco mode\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --speedUpDiscoMode\n\n# Slow down disco mode\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --slowDownDiscoMode\n\n# Speed up disco mode of the bridge light\npython3 MilightWifiBridge.py --ip 192.168.1.23 --speedUpDiscoModeBridgeLamp\n\n# Slow down disco mode of the bridge light\npython3 MilightWifiBridge.py --ip 192.168.1.23 --slowDownDiscoModeBridgeLamp\n\n# Set specific color\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --setColor 255\n\n# Set specific color of the bridge light\npython3 MilightWifiBridge.py --ip 192.168.1.23 --setColorBridgeLamp 255\n\n# Set brightness\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --setBrightness 50\n\n# Set brightness of the bridge light\npython3 MilightWifiBridge.py --ip 192.168.1.23 --setBrightnessBridgeLamp 50\n\n# Set saturation\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --setSaturation 50\n\n# Set temperature\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --setTemperature 50\n\n# Set disco mode\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 1 --setDiscoMode 5\n\n# Set disco mode of the bridge light\npython3 MilightWifiBridge.py --ip 192.168.1.23 --setDiscoModeBridgeLamp 5\n\n# Combined commands: Turn ON ALL lights (zone 0) with white mode, a brightness of 50% and a saturation of 50%\npython3 MilightWifiBridge.py --ip 192.168.1.23 --zone 0 --turnOn --setWhiteMode --setBrightness 50 --setSaturation 50\n```\n\n## How to use in python script\n\nExample of python script using this library:\n\n```python\nimport sys\nfrom MilightWifiBridge import MilightWifiBridge\n\nmilight = MilightWifiBridge()\n_ip = \"192.168.1.23\"\n_port = 5987\n_timeout = 5.0\n_zoneId = 1 # 0 for all\n_discoMode = 5\n_color = 0xBA # Blue\n_brightness = 50 # %\n_saturation = 50 # %\n_temperature = 50 # %\n\n# Create a connection with the milight wifi bridge (mandatory step)\nif not milight.setup(ip=_ip, port=_port, timeout_sec=_timeout):\n  print(\"Setup error\")\n  sys.exit(2)\n\n# Show MAC address\nmacAddress = milight.getMacAddress()\nif macAddress != \"\":\n  print(\"MAC address of the milight wifi bridge: {}\".format(str(macAddress)))\n\n# Link bulbs to a zone\nprint(\"Link bulbs to zone {}: {}\".format(str(_zoneId), str(milight.link(zoneId=_zoneId))))\n\n# Unlink bulbs\nprint(\"Unlink bulbs of zone {}: {}\".format(str(_zoneId), str(milight.unlink(zoneId=_zoneId))))\n\n# Turn on bulbs in specific zone\nprint(\"Turn on bulbs in zone {}: {}\".format(str(_zoneId), str(milight.turnOn(zoneId=_zoneId))))\n\n# Turn off bulbs in specific zone\nprint(\"Turn off bulbs in zone {}: {}\".format(str(_zoneId), str(milight.turnOff(zoneId=_zoneId))))\n\n# Turn on wifi bridge lamp\nprint(\"Turn on wifi bridge lamp: {}\".format(str(milight.turnOnWifiBridgeLamp())))\n\n# Turn off wifi bridge lamp\nprint(\"Turn off wifi bridge lamp: {}\".format(str(milight.turnOffWifiBridgeLamp())))\n\n# Set night mode in specific zone\nprint(\"Set night mode in zone {}: {}\".format(str(_zoneId), str(milight.setNightMode(zoneId=_zoneId))))\n\n# Set white mode in specific zone\nprint(\"Set white mode in zone {}: {}\".format(str(_zoneId), str(milight.setWhiteMode(zoneId=_zoneId))))\n\n# Set white mode for the bridge light\nprint(\"Set white mode for the bridge light: {}\".format(str(milight.setWhiteModeBridgeLamp())))\n\n# Set specific disco mode in specific zone\nprint(\"Set disco mode {} in zone {}: {}\".format(str(_discoMode), str(_zoneId), str(milight.setDiscoMode(discoMode=_discoMode, zoneId=_zoneId))))\n\n# Speed up disco mode in specific zone\nprint(\"Speed up disco mode in zone {}: {}\".format(str(_zoneId), str(milight.speedUpDiscoMode(zoneId=_zoneId))))\n\n# Slow down disco mode in specific zone\nprint(\"Slow down disco mode in zone {}: {}\".format(str(_zoneId), str(milight.slowDownDiscoMode(zoneId=_zoneId))))\n\n# Set specific disco mode for the bridge light\nprint(\"Set disco mode {} for the bridge light: {}\".format(str(_discoMode), str(milight.setDiscoModeBridgeLamp(discoMode=_discoMode))))\n\n# Speed up disco mode for the bridge light\nprint(\"Speed up disco mode for the bridge light: {}\".format(str(milight.speedUpDiscoModeBridgeLamp())))\n\n# Slow down disco mod for the bridge light\nprint(\"Slow down disco mode for the bridge light: {}\".format(str(milight.slowDownDiscoModeBridgeLamp())))\n\n# Set specific color in specific zone\nprint(\"Set color {} in zone {}: {}\".format(str(_color), str(_zoneId), str(milight.setColor(color=_color, zoneId=_zoneId))))\n\n# Set specific color for the bridge light\nprint(\"Set color {} for the bridge light: {}\".format(str(_color), str(milight.setColorBridgeLamp(color=_color))))\n\n# Set specific brightness in specific zone\nprint(\"Set brightness {} in zone {}: {}\".format(str(_brightness), str(_zoneId), str(milight.setBrightness(brightness=_brightness, zoneId=_zoneId))))\n\n# Set specific brightness for the bridge light\nprint(\"Set brightness {} for the bridge light: {}\".format(str(_brightness), str(milight.setBrightnessBridgeLamp(brightness=_brightness))))\n\n# Set specific saturation in specific zone\nprint(\"Set saturation {} in zone {}: {}\".format(str(_saturation), str(_zoneId), str(milight.setSaturation(saturation=_saturation, zoneId=_zoneId))))\n\n# Set specific temperature in specific zone\nprint(\"Set temperature {} in zone {}: {}\".format(str(_temperature), str(_zoneId), str(milight.setTemperature(temperature=_temperature, zoneId=_zoneId))))\n\n# At the end, close connection with the milight wifi bridge\nmilight.close()\n```\n\n## License\n\nThis project is under MIT license. This means you can use it as you want (just don't delete the library header).\n\n## Contribute\n\nIf you want to add more examples or improve the library, just create a pull request with proper commit message and right wrapping.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/QuentinCG/Milight-Wifi-Bridge-3.0-Python-Library",
    "keywords": "milight bulbs home automation limitlessled ibox link unlink light night white color saturation brightness disco mode speed mac",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MilightWifiBridge",
    "package_url": "https://pypi.org/project/MilightWifiBridge/",
    "platform": "any",
    "project_url": "https://pypi.org/project/MilightWifiBridge/",
    "project_urls": {
      "Homepage": "https://github.com/QuentinCG/Milight-Wifi-Bridge-3.0-Python-Library"
    },
    "release_url": "https://pypi.org/project/MilightWifiBridge/2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Milight Wifi Bridge 3.0 controller for LimitlessLED Wifi Bridge v6.0 protocol (Light ON/OFF, change color/mode/brightness/saturation, link/unlink)",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6108045,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87e77960fac9a577bab583037c062b016af71b75650ce298432f03c244551207",
        "md5": "24cd192e7ba00abedace205706d9ac00",
        "sha256": "31ac8864a9161dae93eeb19c4bb36ade800332a5fc01c3f83f6006913c427dcd"
      },
      "downloads": -1,
      "filename": "MilightWifiBridge-2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "24cd192e7ba00abedace205706d9ac00",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13432,
      "upload_time": "2019-11-09T18:17:43",
      "upload_time_iso_8601": "2019-11-09T18:17:43.955100Z",
      "url": "https://files.pythonhosted.org/packages/87/e7/7960fac9a577bab583037c062b016af71b75650ce298432f03c244551207/MilightWifiBridge-2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8effe5a8366d27b4dee5c18a1024ec1c8ea2cc08855367528dc2263f1dde3be2",
        "md5": "8c37febe1c4a24b25ca55d416a9cd1db",
        "sha256": "d7c9872eabf1b876d41a1feed6e279b030424047a18cb31828e096d37baa2076"
      },
      "downloads": -1,
      "filename": "MilightWifiBridge-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8c37febe1c4a24b25ca55d416a9cd1db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12735,
      "upload_time": "2019-11-09T18:17:46",
      "upload_time_iso_8601": "2019-11-09T18:17:46.567227Z",
      "url": "https://files.pythonhosted.org/packages/8e/ff/e5a8366d27b4dee5c18a1024ec1c8ea2cc08855367528dc2263f1dde3be2/MilightWifiBridge-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}