{
  "info": {
    "author": "Agus Makmun (Summon Agus)",
    "author_email": "agus@python.web.id",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Djipsum\n====================================\n\n.. image:: https://img.shields.io/pypi/v/djipsum.svg?style=flat-square&label=version\n   :target: https://pypi.python.org/pypi/djipsum\n\n.. image:: https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\n   :target: https://raw.githubusercontent.com/agusmakmun/djipsum/master/LICENSE\n\n.. image:: https://img.shields.io/pypi/pyversions/djipsum.svg?style=flat-square\n   :target: https://github.com/agusmakmun/djipsum\n\n.. image:: https://img.shields.io/pypi/dm/djipsum.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/djipsum\n\n\nDjango Lorem Ipsum Generator - Command plugin to generate (fake content data) for Django model, and uses `Faker Factory`_ package for API Faker Model.\n\n.. image:: http://i.imgur.com/8vg0KoC.png\n\n\nInstall\n----------------------\n\nDjipsum is available directly from `PyPI`_:\n\n::\n\n    $ pip install djipsum\n\n\n***).** And don't forget to add ``djipsum`` to your ``INSTALLED_APPS`` setting `(without migrations)`.\n\n\nRequirements\n----------------------\n\n* ``Django>=1.10.1``\n* ``Faker>=0.7.3``\n\n\nUsage\n----------------------\n\n::\n\n    usage: djipsum -h [-h] [-dv] [-auto] [-cg CUSTOM_GENERATOR]\n                      [--app APP] [--model MODEL] [--max MAX]\n\n    To generate awesome lorem ipsum for your model!\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -dv, --djipsum_version\n                            Show djipsum version number and exit.\n      -auto, --auto_gen     Automatic generate lorem ipsum from custom generator\n                            class.\n      -cg, --custom_generator CUSTOM_GENERATOR\n                            Custom a function generator (full path) for auto-gen.\n      --app APP             The app name.\n      --model MODEL         The model class name.\n      --max MAX             Maximum generate lorem ipsum.\n\n\nExample\n----------------------\n\n::\n\n    # Default 10 objects\n    $ ./manage.py djipsum --app testapp --model TestField\n\n    # Custom Maximum objects\n    $ ./manage.py djipsum --app testapp --model TestField --max=5\n\n\nAPI\n----------------------\n\nThe Djipsum Faker Model providing additional library from `Faker Factory`_ for more than efficient to use.\n\n**1. Basic API**\n\n::\n\n    >>> from djipsum.faker import FakerModel\n    >>> faker = FakerModel(app='app_name', model='ModelName')\n    >>> faker.fake_email() # From Djipsum\n    'admin@gmail.com'\n    >>> faker.fake.email() # From Faker Factory\n    'smithadrian@hotmail.com'\n    >>>\n\n**2. Example API Usage**\n\n::\n\n    >>> from djipsum.faker import FakerModel\n    >>> faker = FakerModel(app='app_blog', model='Post')\n    >>> for _ in range(2):\n    ...     fields = {\n    ...         'user': faker.fake_relations(\n    ...             type='fk',\n    ...             field_name='user'\n    ...         ),\n    ...         'title': faker.fake.text(max_nb_chars=100),\n    ...         'slug': faker.fake.slug(\n    ...             faker.fake.text(max_nb_chars=50)\n    ...         ),\n    ...         'categories': faker.fake_relations(\n    ...             type='m2m',\n    ...             field_name='categories'\n    ...         ),\n    ...         'description': ' '.join(faker.fake.paragraphs()),\n    ...         'created': str(faker.fake.date_time()),\n    ...         'publish': faker.fake_boolean(),\n    ...     }\n    ...     faker.create(fields)\n    ...\n    <Post: Sit sunt nam aperiam ratione consequatur. Animi cupiditate atque totam.>\n    <Post: Tempora porro sint quasi nisi totam doloremque repellat. Ducimus nesciunt impedit animi.>\n    >>>\n\n\n**3. Using custom Management command**\n\nThis an example to create custom special faker file as a tool for unittests.\nFor example i need to save this script into file of ``app_blog.blogfaker.py``\n\n::\n\n    from djipsum.faker import FakerModel\n\n\n    def postfaker(maximum=10):\n        \"\"\"\n        Sample custom generator.\n        Djipsum already handled with `--max` command.\n        But, recomended to set default integer `maximum` like above.\n        \"\"\"\n        faker = FakerModel(\n            app='app_blog',\n            model='Post'\n        )\n        object_list = [] # for print out after created the objects.\n\n        for _ in range(maximum):\n            fields = {\n                'user': faker.fake_relations(\n                    type='fk',\n                    field_name='user'\n                ),\n                'title': faker.fake.text(max_nb_chars=100),\n                'slug': faker.fake.slug(\n                    faker.fake.text(max_nb_chars=50)\n                ),\n                'categories': faker.fake_relations(\n                    type='m2m',\n                    field_name='categories'\n                ),\n                'description': ' '.join(faker.fake.paragraphs()),\n                'created': str(faker.fake.date_time()),\n                'publish': faker.fake_boolean(),\n            }\n            instance = faker.create(fields)\n            object_list.append(instance)\n        return object_list\n\n\nAnd then, you also can access it via djipsum command such as below. This should be create **2** objects.\n\n::\n\n    ./manage.py djipsum --auto_gen --custom_generator=app_blog.blogfaker.postfaker --max=2\n\n    # OR\n\n    ./manage.py djipsum -auto -cg=app_blog.blogfaker.postfaker --max=2\n\n\n\nSupported Fields\n----------------------\n\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| Char Types                    | Integer/Float Types        | Relationship Types       | Other Types        |\n+===============================+============================+==========================+====================+\n| CharField                     | IntegerField               | ForeignKey               | BinaryField        |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| TextField                     | SmallIntegerField          | ManyToManyField          | DurationField      |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| EmailField                    | BigIntegerField            | OneToOneField (not yet)  | BooleanField       |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| SlugField                     | DecimalField               | OneToManyField (not yet) | NullBooleanField   |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| URLField                      | PositiveIntegerField       |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| UUIDField                     | FloatField                 |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| GenericIPAddressField         | PositiveSmallIntegerField  |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| CommaSeparatedIntegerField    |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| DateTimeField                 |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| DateField                     |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| TimeField                     |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| ImageField                    |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| FileField                     |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n| FilePathField (not yet)       |                            |                          |                    |\n+-------------------------------+----------------------------+--------------------------+--------------------+\n\n\nRefference Faker Model Fields\n-------------------------------\n\n``fake = <faker.generator.Generator object>``\n    Providing the package from Faker Factory.\n\n``djipsum_fields(self)``\n    Extended from class ``DjipsumFields`` for some special fields.\n\n``fake_binary(self)``\n    Return random binary format.\n    Faker Factory also provide about this binary.\n\n    **Example:**\n\n    ``b\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"``, ``b\"\\x0b\\x0c\\x0e\\x0f\"``, etc.\n\n    1. from Djipsum\n    ``faker.fake_binary()``\n\n    2. from Faker Factory\n    ``faker.fake.binary(length=10)``\n\n``fake_chars_or_choice(self, field_name)``\n    Return fake chars or choice it if the ``field_name`` has choices.\n    Then, returning random value from it. This specially for ``CharField``.\n\n    **Usage:**\n\n    ``faker.fake_chars_or_choice('field_name')``\n\n    **Example for field:**\n\n    ::\n\n        TYPE_CHOICES = (\n          ('project', 'I wanna to talk about project'),\n          ('feedback', 'I want to report a bugs or give feedback'),\n          ('hello', 'I just want to say hello')\n        )\n        type = models.CharField(max_length=200, choices=TYPE_CHOICES)\n\n``fake_comma_separated_integer(self)``\n    Return the unique integers in the string.\n    This specially for ``CommaSeparatedIntegerField``.\n\n    **Example:**\n\n    ``'6,1,7'``, ``'4,5,1,3,2'``, ``'2,7,9,3,5,4,1'``\n\n``fake_decimal(self)``\n    Validate if the field has a ``max_digits`` and ``decimal_places``\n    And generating the unique decimal number.\n\n    **Usage:**\n\n    ``faker.fake_decimal('field_name')``\n\n    **Example:**\n\n    ``10.7``, ``13041.00``, ``200.000.000``\n\n``fake_boolean(self)``\n    **Example:**\n\n    ``True, False``\n\n``fake_null_boolean(self)``\n    Faker Factory also provide about this null boolean.\n\n    **Example:**\n\n    ``None``, ``True``, ``False``\n\n    1. from Djipsum\n    ``faker.fake_null_boolean()``\n\n    2. from Faker Factory\n    ``faker.fake.null_boolean()``\n\n``fake_float(self)``\n    **Example:**\n\n    ``0.69``, ``20.55``, ``98.12``\n\n``fake_email(self)``\n    Faker Factory also provide about this email.\n\n    **Example:**\n\n    ``'agus@python.web.id'``, ``'sample@gmail.com'``, ``'hello@yahoo.com'``\n\n    1. from Djipsum\n    ``faker.fake_email()``\n\n    2. from Faker Factory\n    ``faker.fake.email()``\n\n``fake_file(self)``\n    Return string name of file.\n    Faker Factory also provide about this file.\n\n    **Example:**\n\n    ``'file.zip'``, ``'awesomefile.tar.gz'``, ``'samplefile.docx'``, ``'djipsum.pdf'``\n\n    1. from Djipsum\n    ``faker.fake_file()``\n\n    2. from Faker Factory\n    ``faker.fake.file_name()``\n\n``fake_image(self)``\n    Return string name of image.\n\n    **Example:**\n\n    ``'avatar.jpg'``, ``'djipsum.jpeg'``, ``'sampleimage.png'``, ``'awesome_django.gif'``\n\n``fake_ipaddress(self)``\n    Faker Factory also provide about this ipaddress,\n    such as ipv4, ipv6, ...etc\n\n    **Example:**\n\n    ``'192.168.1.1'``, ``'66.249.65.54'``, ``'255.255.255.0'``, ``'2001:db8:a0b:12f0::1'``\n\n    1. from Djipsum\n    ``faker.fake_ipaddress()``\n\n    2. from Faker Factory\n    ``faker.fake.ipv4()``, ``faker.fake.ipv6()``\n\n``fake_slug(self)``\n    Optionall unique slug with ``uuid`` to handle ``unique=True``.\n    Faker Factory also provide about this slug.\n\n    **Example:**\n\n    1. from Djipsum\n    ``faker.fake_slug()``\n\n    2. from Faker Factory\n    ``faker.fake.slug(faker.fake.text(max_nb_chars=50))``\n\n``fake_paragraphs(self)``\n    Generate the paragraphs for ``TextField``.\n    Faker Factory also provide about this paragraphs.\n\n    **Example:**\n\n    1. from Djipsum\n    ``faker.fake_paragraphs()``\n\n    2. from Faker Factory\n    ``' '.join(faker.fake.paragraphs())``\n\n``fake_url(self)``\n    Generate the url for ``URLField``.\n    Faker Factory also provide about this url.\n\n    **Example:**\n\n    1. from Djipsum\n    ``faker.fake_url()``\n\n    2. from Faker Factory\n    ``faker.fake.url()``\n\n``fake_uuid(self)``\n    Generate the unique uuid\n    from ``uuid1``, ``uuid3``, ``uuid4``, or ``uuid5``.\n\n``fake_relations(self, type, field_name)``\n    Return the dictionary of object/s relation\n    to process the Relationship.\n\n    **Example:**\n\n    - Foreign Key:\n        ``faker.fake_relations({'type': 'fk', 'field_name': 'author'})``\n\n    - Many To Many:\n        ``faker.fake_relations({'type': 'm2m', 'field_name': 'categories'})``\n\nLicense\n----------------------\n\n- `MIT`_\n\n\n.. _PyPI: https://pypi.python.org/pypi/djipsum\n.. _MIT: https://github.com/agusmakmun/djipsum/blob/master/LICENSE\n.. _Faker Factory: https://github.com/joke2k/faker\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/agusmakmun/djipsum/tarball/v1.1.3",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/agusmakmun/djipsum/",
    "keywords": "Djipsum",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djipsum",
    "package_url": "https://pypi.org/project/djipsum/",
    "platform": "",
    "project_url": "https://pypi.org/project/djipsum/",
    "project_urls": {
      "Download": "https://github.com/agusmakmun/djipsum/tarball/v1.1.3",
      "Homepage": "https://github.com/agusmakmun/djipsum/"
    },
    "release_url": "https://pypi.org/project/djipsum/1.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django Lorem Ipsum Generator - Command plugin to generate (fake content data) for Django model.",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3392022,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8bdf7d49dd918e8251fbc41c3e5a80d0c73dce31bf4d51968c02d685020e2cfa",
        "md5": "feeed1e2a6ffb47150a0dfaf232f34b9",
        "sha256": "0ab8afa4fbb32bb2aff7bb0ca2890a2a8b39184734271cdcf2f8619cd08e4b0e"
      },
      "downloads": -1,
      "filename": "djipsum-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "feeed1e2a6ffb47150a0dfaf232f34b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14668,
      "upload_time": "2016-12-05T02:18:19",
      "upload_time_iso_8601": "2016-12-05T02:18:19.140209Z",
      "url": "https://files.pythonhosted.org/packages/8b/df/7d49dd918e8251fbc41c3e5a80d0c73dce31bf4d51968c02d685020e2cfa/djipsum-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}