{
  "info": {
    "author": "Tim O'Donnell and Alex Rubinsteyn",
    "author_email": "timodonnell@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "[![Build Status](https://app.travis-ci.com/openvax/mhcflurry.svg?branch=master)](https://app.travis-ci.com/openvax/mhcflurry)\n\n# mhcflurry\n[MHC I](https://en.wikipedia.org/wiki/MHC_class_I) ligand\nprediction package with competitive accuracy and a fast and \n[documented](http://openvax.github.io/mhcflurry/) implementation.\n\nMHCflurry implements class I peptide/MHC binding affinity prediction. \nThe current version provides pan-MHC I predictors supporting any MHC\nallele of known sequence. MHCflurry runs on Python 3.4+ using the\n[tensorflow](https://www.tensorflow.org/) neural network library.\nIt exposes [command-line](http://openvax.github.io/mhcflurry/commandline_tutorial.html)\nand [Python library](http://openvax.github.io/mhcflurry/python_tutorial.html)\ninterfaces.\n\nStarting in version 1.6.0, MHCflurry also includes two expermental predictors,\nan \"antigen processing\" predictor that attempts to model MHC allele-independent\neffects such as proteosomal cleavage and a \"presentation\" predictor that\nintegrates processing predictions with binding affinity predictions to give a\ncomposite \"presentation score.\" Both models are trained on mass spec-identified\nMHC ligands. These models were updated to incorporate minor improvements\nfor the MHCflurry 2.0 release.\n\nIf you find MHCflurry useful in your research please cite:\n\n> T. O'Donnell, A. Rubinsteyn, U. Laserson. \"MHCflurry 2.0: Improved pan-allele prediction of MHC I-presented peptides by incorporating antigen processing,\" *Cell Systems*, 2020. https://doi.org/10.1016/j.cels.2020.06.010\n\n> T. Oâ€™Donnell, A. Rubinsteyn, M. Bonsack, A. B. Riemer, U. Laserson, and J. Hammerbacher, \"MHCflurry: Open-Source Class I MHC Binding Affinity Prediction,\" *Cell Systems*, 2018. https://doi.org/10.1016/j.cels.2018.05.014\n\nPlease file an issue if you have questions or encounter problems.\n\nHave a bugfix or other contribution? We would love your help. See our [contributing guidelines](CONTRIBUTING.md).\n\n## Installation (pip)\n\nInstall the package:\n\n```\n$ pip install mhcflurry\n```\n\nThen download our datasets and trained models:\n\n```\n$ mhcflurry-downloads fetch\n```\n\nYou can now generate predictions:\n\n```\n$ mhcflurry-predict \\\n       --alleles HLA-A0201 HLA-A0301 \\\n       --peptides SIINFEKL SIINFEKD SIINFEKQ \\\n       --out /tmp/predictions.csv\n\nWrote: /tmp/predictions.csv\n```\n\nOr scan protein sequences for potential epitopes:\n\n```\n$ mhcflurry-predict-scan \\\n        --sequences MFVFLVLLPLVSSQCVNLTTRTQLPPAYTNSFTRGVYYPDKVFRSSVLHS \\\n        --alleles HLA-A*02:01 \\\n        --out /tmp/predictions.csv\n\nWrote: /tmp/predictions.csv  \n```\n\n\nSee the [documentation](http://openvax.github.io/mhcflurry/) for more details.\n\n\n## Docker\nYou can also try the latest (GitHub master) version of MHCflurry using the Docker\nimage hosted on [Dockerhub](https://hub.docker.com/r/openvax/mhcflurry) by\nrunning:\n\n```\n$ docker run -p 9999:9999 --rm openvax/mhcflurry:latest\n``` \n\nThis will start a [jupyter](https://jupyter.org/) notebook server in an\nenvironment that has MHCflurry installed. Go to `http://localhost:9999` in a\nbrowser to use it.\n\nTo build the Docker image yourself, from a checkout run:\n\n```\n$ docker build -t mhcflurry:latest .\n$ docker run -p 9999:9999 --rm mhcflurry:latest\n```\n## Predicted sequence motifs\nSequence logos for the binding motifs learned by MHCflurry BA are available [here](https://openvax.github.io/mhcflurry-motifs/).\n\n## Common issues and fixes\n\n### Problems downloading data and models\nSome users have reported HTTP connection issues when using `mhcflurry-downloads fetch`. As a workaround, you can download the data manually (e.g. using `wget`) and then use `mhcflurry-downloads` just to copy the data to the right place.\n\nTo do this, first get the URL(s) of the downloads you need using `mhcflurry-downloads url`:\n\n```\n$ mhcflurry-downloads url models_class1_presentation\nhttps://github.com/openvax/mhcflurry/releases/download/1.6.0/models_class1_presentation.20200205.tar.bz2```\n```\n\nThen make a directory and download the needed files to this directory:\n\n```\n$ mkdir downloads\n$ wget  --directory-prefix downloads https://github.com/openvax/mhcflurry/releases/download/1.6.0/models_class1_presentation.20200205.tar.bz2```\n\nHTTP request sent, awaiting response... 200 OK\nLength: 72616448 (69M) [application/octet-stream]\nSaving to: 'downloads/models_class1_presentation.20200205.tar.bz2'\n```\n\nNow call `mhcflurry-downloads fetch` with the `--already-downloaded-dir` option to indicate that the downloads should be retrived from the specified directory:\n\n```\n$ mhcflurry-downloads fetch models_class1_presentation --already-downloaded-dir downloads\n```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/openvax/mhcflurry",
    "keywords": "",
    "license": "http://www.apache.org/licenses/LICENSE-2.0.html",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mhcflurry",
    "package_url": "https://pypi.org/project/mhcflurry/",
    "platform": "",
    "project_url": "https://pypi.org/project/mhcflurry/",
    "project_urls": {
      "Homepage": "https://github.com/openvax/mhcflurry"
    },
    "release_url": "https://pypi.org/project/mhcflurry/2.0.5/",
    "requires_dist": [
      "six",
      "pandas (>=0.20.3)",
      "appdirs",
      "tensorflow (>=2.2.0)",
      "scikit-learn",
      "mhcgnomes",
      "pyyaml",
      "tqdm",
      "np-utils"
    ],
    "requires_python": "",
    "summary": "MHC Binding Predictor",
    "version": "2.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14070867,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5693b322947a75dee992d78940f56661efe350d8cd01b7803c63e39d26d19d56",
        "md5": "e007b12e5fbe242e8527851b5a8270ad",
        "sha256": "50f107dd8ed8f98e5d50f468323ca794c5decc92243a698c6677ff8896b72136"
      },
      "downloads": -1,
      "filename": "mhcflurry-2.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e007b12e5fbe242e8527851b5a8270ad",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 140608,
      "upload_time": "2021-11-30T23:44:37",
      "upload_time_iso_8601": "2021-11-30T23:44:37.434708Z",
      "url": "https://files.pythonhosted.org/packages/56/93/b322947a75dee992d78940f56661efe350d8cd01b7803c63e39d26d19d56/mhcflurry-2.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e839ce0588d42bc0e660891f4725b307a8e0750e655c954dc8b13eb431f5245c",
        "md5": "781f86c7f57ddbde061ff059c159c287",
        "sha256": "6005837431f471f65586e5b21e115673def61a7a094ee06a5ca974e2be3efe22"
      },
      "downloads": -1,
      "filename": "mhcflurry-2.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "781f86c7f57ddbde061ff059c159c287",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 132575,
      "upload_time": "2021-11-30T23:44:39",
      "upload_time_iso_8601": "2021-11-30T23:44:39.092886Z",
      "url": "https://files.pythonhosted.org/packages/e8/39/ce0588d42bc0e660891f4725b307a8e0750e655c954dc8b13eb431f5245c/mhcflurry-2.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}