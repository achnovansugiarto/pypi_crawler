{
  "info": {
    "author": "Tim O'Donnell and Alex Rubinsteyn",
    "author_email": "timodonnell@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "|Build Status|\n\nmhcflurry\n=========\n\n`MHC I <https://en.wikipedia.org/wiki/MHC_class_I>`__ ligand prediction\npackage with competitive accuracy and a fast and\n`documented <http://openvax.github.io/mhcflurry/>`__ implementation.\n\nMHCflurry implements class I peptide/MHC binding affinity prediction.\nThe current version provides pan-MHC I predictors supporting any MHC\nallele of known sequence. MHCflurry runs on Python 3.4+ using the\n`tensorflow <https://www.tensorflow.org/>`__ neural network library. It\nexposes\n`command-line <http://openvax.github.io/mhcflurry/commandline_tutorial.html>`__\nand `Python\nlibrary <http://openvax.github.io/mhcflurry/python_tutorial.html>`__\ninterfaces.\n\nStarting in version 1.6.0, MHCflurry also includes two expermental\npredictors, an “antigen processing” predictor that attempts to model MHC\nallele-independent effects such as proteosomal cleavage and a\n“presentation” predictor that integrates processing predictions with\nbinding affinity predictions to give a composite “presentation score.”\nBoth models are trained on mass spec-identified MHC ligands. These\nmodels were updated to incorporate minor improvements for the MHCflurry\n2.0 release.\n\nIf you find MHCflurry useful in your research please cite:\n\n   T. O’Donnell, A. Rubinsteyn, U. Laserson. “MHCflurry 2.0: Improved\n   pan-allele prediction of MHC I-presented peptides by incorporating\n   antigen processing,” *Cell Systems*, 2020.\n   https://doi.org/10.1016/j.cels.2020.06.010\n\n..\n\n   T. O’Donnell, A. Rubinsteyn, M. Bonsack, A. B. Riemer, U. Laserson,\n   and J. Hammerbacher, “MHCflurry: Open-Source Class I MHC Binding\n   Affinity Prediction,” *Cell Systems*, 2018.\n   https://doi.org/10.1016/j.cels.2018.05.014\n\nPlease file an issue if you have questions or encounter problems.\n\nHave a bugfix or other contribution? We would love your help. See our\n`contributing guidelines <CONTRIBUTING.md>`__.\n\nInstallation (pip)\n------------------\n\nInstall the package:\n\n::\n\n   $ pip install mhcflurry\n\nThen download our datasets and trained models:\n\n::\n\n   $ mhcflurry-downloads fetch\n\nYou can now generate predictions:\n\n::\n\n   $ mhcflurry-predict \\\n          --alleles HLA-A0201 HLA-A0301 \\\n          --peptides SIINFEKL SIINFEKD SIINFEKQ \\\n          --out /tmp/predictions.csv\n\n   Wrote: /tmp/predictions.csv\n\nOr scan protein sequences for potential epitopes:\n\n::\n\n   $ mhcflurry-predict-scan \\\n           --sequences MFVFLVLLPLVSSQCVNLTTRTQLPPAYTNSFTRGVYYPDKVFRSSVLHS \\\n           --alleles HLA-A*02:01 \\\n           --out /tmp/predictions.csv\n\n   Wrote: /tmp/predictions.csv  \n\nSee the `documentation <http://openvax.github.io/mhcflurry/>`__ for more\ndetails.\n\nDocker\n------\n\nYou can also try the latest (GitHub master) version of MHCflurry using\nthe Docker image hosted on\n`Dockerhub <https://hub.docker.com/r/openvax/mhcflurry>`__ by running:\n\n::\n\n   $ docker run -p 9999:9999 --rm openvax/mhcflurry:latest\n\nThis will start a `jupyter <https://jupyter.org/>`__ notebook server in\nan environment that has MHCflurry installed. Go to\n``http://localhost:9999`` in a browser to use it.\n\nTo build the Docker image yourself, from a checkout run:\n\n::\n\n   $ docker build -t mhcflurry:latest .\n   $ docker run -p 9999:9999 --rm mhcflurry:latest\n\nCommon issues and fixes\n-----------------------\n\nProblems downloading data and models\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSome users have reported HTTP connection issues when using\n``mhcflurry-downloads fetch``. As a workaround, you can download the\ndata manually (e.g. using ``wget``) and then use ``mhcflurry-downloads``\njust to copy the data to the right place.\n\nTo do this, first get the URL(s) of the downloads you need using\n``mhcflurry-downloads url``:\n\n::\n\n   $ mhcflurry-downloads url models_class1_presentation\n   https://github.com/openvax/mhcflurry/releases/download/1.6.0/models_class1_presentation.20200205.tar.bz2```\n\nThen make a directory and download the needed files to this directory:\n\n::\n\n   $ mkdir downloads\n   $ wget  --directory-prefix downloads https://github.com/openvax/mhcflurry/releases/download/1.6.0/models_class1_presentation.20200205.tar.bz2```\n\n   HTTP request sent, awaiting response... 200 OK\n   Length: 72616448 (69M) [application/octet-stream]\n   Saving to: 'downloads/models_class1_presentation.20200205.tar.bz2'\n\nNow call ``mhcflurry-downloads fetch`` with the\n``--already-downloaded-dir`` option to indicate that the downloads\nshould be retrived from the specified directory:\n\n::\n\n   $ mhcflurry-downloads fetch models_class1_presentation --already-downloaded-dir downloads\n\n.. |Build Status| image:: https://travis-ci.org/openvax/mhcflurry.svg?branch=master\n   :target: https://travis-ci.org/openvax/mhcflurry\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hammerlab/mhcflurry",
    "keywords": "",
    "license": "http://www.apache.org/licenses/LICENSE-2.0.html",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mhcflurry",
    "package_url": "https://pypi.org/project/mhcflurry/",
    "platform": "",
    "project_url": "https://pypi.org/project/mhcflurry/",
    "project_urls": {
      "Homepage": "https://github.com/hammerlab/mhcflurry"
    },
    "release_url": "https://pypi.org/project/mhcflurry/2.0.0/",
    "requires_dist": [
      "six",
      "pandas (>=0.20.3)",
      "appdirs",
      "tensorflow (>=2.2.0)",
      "scikit-learn",
      "mhcnames",
      "pyyaml",
      "tqdm",
      "np-utils"
    ],
    "requires_python": "",
    "summary": "MHC Binding Predictor",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14070867,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9504e3c19231e16d24555d507af9f70e1cd4eb3aaba51db5b99c7505fea00492",
        "md5": "45a218b1935287f7d77370724ffde37e",
        "sha256": "fa67f073e5848f7cb25afe27e8440892012c6c383e6a95985f3e25f814fcdac9"
      },
      "downloads": -1,
      "filename": "mhcflurry-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "45a218b1935287f7d77370724ffde37e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 138385,
      "upload_time": "2020-07-13T22:29:18",
      "upload_time_iso_8601": "2020-07-13T22:29:18.301893Z",
      "url": "https://files.pythonhosted.org/packages/95/04/e3c19231e16d24555d507af9f70e1cd4eb3aaba51db5b99c7505fea00492/mhcflurry-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22c24ebfb1643353547a77526992073b5eeb3763c4f8e6f68acc68438eb83aa6",
        "md5": "0ad63f305174b7d290f0ac37869db2fc",
        "sha256": "a1d2fde88228917c0c04e6155784761351ea1dc7962a830573967d298652d28f"
      },
      "downloads": -1,
      "filename": "mhcflurry-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0ad63f305174b7d290f0ac37869db2fc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 130430,
      "upload_time": "2020-07-13T22:29:19",
      "upload_time_iso_8601": "2020-07-13T22:29:19.654779Z",
      "url": "https://files.pythonhosted.org/packages/22/c2/4ebfb1643353547a77526992073b5eeb3763c4f8e6f68acc68438eb83aa6/mhcflurry-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}