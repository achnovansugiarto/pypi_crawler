{
  "info": {
    "author": "Mardix",
    "author_email": "mcx2082@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Mambo \n\nMambo is an elegant static site generator built in Python. \n\nItâ€™s a great choice for website, blogs and documentation. Content can be written in HTML and Markdown, oganized however you want with any URL structure, and metadata can be defined in front-matter. \n\n---\n\n[TOC]\n\n---\n\n## Command Line API\n\nMambo aims to be simple with a simple API.\n\n### Install\n\n```\npip install mambo\n```\n\n### Setup a site \n\nTo setup a site, the command below will create a new directory name `/mysitename.com/`. All the necessary files and folders will be created in there.\n\n```html\n cd ~\n mambo setup mysitename.com\n```\n\n#### Or initialize in an existing folder\n\nAll the necessary files and folders will be created in there.\n\n```html\ncd ./mysitename.com\nmambo init\n```\n\n### Create a page\n\nThe command below will create a `hello-world.html` by default. To create it as markdown, add the `.md` as file extension. Page can only be either `html` or `markdown`, any other format will be ignored.\n\n```html\nmambo create hello-world \n```\n\n#### Create multiple pages\n\nTo create multiples pages, separate them by space\n\n```html\nmambo create hello-world page1.md pag2.html another-page\n```\n\n\n### Serve site in dev mode \n\nTo serve the site in evelopment mode, cd into the directory and run, a browser window will be open. By default it uses port 8000\n\n```html\nmambo serve\n```\n\n#### Options\n\n```html\n-p | --port [ -p 8001 ]: Use the specified port. Default 8000\n--env [ --env prod ] : Select the environment to build\n--no-livereload [ --no-livereload ]\n--open-url [ --open-url ]\n\n```\n\n### Build site for production \n\nBuild the site to be deployed to production. The content will be placed in `.build` directory, which can be uploaded to any servers.\n\n```html\nmambo build\n```\n\n#### Options\n\n```html\n-i | --info [ -i ] boolean, default False: To display build information\n--env [ --env prod ] : Select the environment to build\n\n```\n\n### Clean the build directory \n\nTo cleanup the `.build` directory\n\n```\nmambo clean \n```\n\n---\n\n## Structure \n\n```\n    |\n    |-- /.build\n        |\n    |-- /static\n        |\n    |-- /data\n        |\n    |-- /pages\n        |\n    |-- /content\n        |\n    |-- /templates\n```\n\n**/pages**:\n    Contains all the pages to be built\n    If the pages contain local context -> {{ page.title }}\n\n**/static**: Hold the assets static files. This directory will be copied to the `build` as is\n\n**/data**:\n    Contains JSON data context to inject in the templates.\n    To access the data, use the file name as as the namespace -> mydata.json -> {{ data.mydata }}\n\n**/content**:\n    Contains page content to be included on the page. \n    This can be an .md file, .html\n    This is created for organization of the site. But it is \n    identical to *templates* folder. \n    However, when including files from content, the path must be prefixed with `content`, \n    ie: `{% include \"content/my-file.md\" %}`\n\n\n**/templates**:\nContains all the templates to be included, including layouts, partials, macros. Anything related to templates should be placed in here. If you want to create a content file to include, it is recommended to place it in the `content` folder.\n\n**/.build**: This where the build sites will be created. The content of this dir is ready for upload\n\n---\n\n## Configuration\n\nMambo creates `mambo.yml` which contains the configurations.\n\n```\n# Site: Global site context\n# Variables under [site] will be available in the page as ie: {{ site.name }}\nsite:\n\n  # base_url: REQUIRED - Site base url, the canonical url to build\n  base_url: /\n\n  # static_url: REQUIRED - Site static. If static files are placed somewhere else, you can put the path there\n  static_url: /static/\n\n  # Site name\n  name: \"MySiteName.com\"\n\n  # The site url\n  url: \n\n  # Google Analytics code\n  google_analytics:\n\n  # Site Favicon\n  favicon:\n\n  # Global meta tags. They can be overwritten by page meta tags\n  meta:\n    keywords:\n    language: en-us\n    rating: General\n    robots: index, follow\n\n\n# Site environment: environment data will be merged with the global site settings\n# ie: 'env.prod.base_url' will use the prod base_url\n# At build: 'mambo build --env prod', or serve 'mambo serve --env prod'\nenv: \n  prod:\n    base_url: /\n    static_url: /static/\n\n\n# Configuration when serving\nserve:\n  port: 8000\n  livereload: True\n  openwindow: True\n  env: \n  generate_sitemap: True\n  minify_html: False  \n\n\n# Build configuration, could be the final product\nbuild:\n  # env: The site_env to build. Leave blank to have the option in the command line\n  env: prod\n  generate_sitemap: True\n  minify_html: True \n\n# Global settings\nglobals:\n  # layout: **REQUIRED - The default site layout\n  layout: \"layouts/default.html\"\n\n  sitemap\n\n  assets\n\n```\n\n---\n\n## Global Context\n\n**page_url($page_name)** \n\nTo get the url of a page.\n\n`{{ page_url('home') }}`\n\n\n**page_link($page_name, $text, $title, $id, $class)**\n\nTo build a page ahref \n\n`{{ page_link('about.html', title='About Us') }}`\n\n\n**page_info($page_name, $key)**\n\nReturn a page meta info\n\n`Title: {{ page_info('home', 'title')}}`\n\n\n**static_url($file_path)**\n\nReturn the  url of a static asset\n\n`{{ static_url('imgs/img.png') }}`\n\n\n**script_tag($file_path)**\n\nCreate a script tag for a static file\n\n`{{ script_tag('js/main.js') }}`\n\n\n**stylesheet_tag($file_path)**\n\nCreate a stylesheet tag for a static file\n\n`{{ stylesheet_tag('css/style.css') }}`\n\n**format_date($date, $format)**\n\nFormat a date\n\n`{{ format_date('2019-09-01', 'MM/DD/YYYY h:mm a') }}`\n\n\n**\\_\\_STATIC_URL__**\n\nReturn the static url\n\n`const static_url = \"{{ __STATIC_URL__ }}\" `\n\n\n**[[\\_\\_STATIC_URL__]]**\n\nSame as \\_\\_STATIC_URL__ but to be used SFC javasipt\n\n\n## Site Context\n\n**site**\n\nAll the context under the site config\n\n```\nname\nbase_url\nstatic_url\n...\n__env__: the environment (Prod, Dev etc)\n__generator__: info of the generator\n    timestamp\n    name\n    version\n```\n\n\n## Page Context\n\n**page**\n\nAll the page context and data set in the frontmatter\n\n```\ntitle\ndescription\nurl\n...\n```\n\n\n\n\n---\n\n## Writing Pages\n\n### Supported format:\n\nMambo support  `.html` and `.md` files. It will ignore all other extensions in the `/pages` directory\n\nFiles starting with `_` (underscore) will be ignored\n\n### Organization:\n\nThe pages in Mambo should be arranged in the same way they are intended for the rendered website.\nWithout any additional configuration, the following will just work. Mambo supports content nested at any level.\n\n    /pages\n        |\n        |- index.html               // <- http://a.com/\n        |\n        |- about-us.md              // <- http://a.com/about-us\n        |\n        |- /post\n            |\n            |- my-awesome-post.html // <- http://a.com/post/my-awesome-post.html\n\n\n### Front Matter & Page Context\n\nIt enables you to include the meta data and context of the content right with it.\nIt only supports the Yaml format, it is placed on top of the page. \n\n    ---\n    title: My site title\n    slug: /a-new-path/\n    description: \n\n    ---\n\nYour front matter data get parsed as a local object, ie: {{ page.title }}\n\nYou can also include your own context\n\n\n### Simple Pages\n\n#### Single File Component Page\n\n##### Template\n\n##### Script\n\n##### Style\n\nOptionally you can use SCSS \n\n\n---\n\n### Writing Dynamic Pages\n\n---\n\n## About\n\nMambo is built in Python, and features the powerful templating language Jinja2. \n\nMambo allows you to write your content in either Markdown or plain HTML. \n\nHTML gives you full independence. Markdown, for simply writing article.\n\nTo get creative, Mambo allows you to write your HTML/JS/CSS in a single file component style. All three are powered by the powerful Jinja2 template language.\n\nFeatures:\n\n- Friendly Url\n- Jinja\n- HTML\n- Markdown\n- SCSS \n- Single file component\n\n\nTechnology uses:\n\n- Jinja2: Powerful templating language\n- Front Matter, to add context to the page\n- Arrow to write date and time\n\n---\n\n\n\n\n## Content:\n\n\n\n# Advanced\n\n## Data Driven\n\nIn addition to data files, you can load a resource from any api endpoint. \n\nThe data returned must be in the json format.\n\n\n\n## Generators\n\nTo generate pages dynamically from a data source\n\n##### context\n\nGenerators return a `context` key in the page variable. \n\nFor `single` type, the context is the data for that page\n\nFor `pagination` type, the context is a list (array) of data chunk\n\n##### paginator\n\nGenerators returns `paginator` key in the page variable, if the `type` is 'pagination'\n\n`pagination` contains: `total_pages`, `current_pages`, `page_slug`, `index_slug`\n\n\n### Generator: Single\n\nGenerate single pages from a source containing list (array) of data\n\n    ---\n\n    _generator:\n        type: single\n        data_source: posts\n        slug: /\n    ---\n\n`data_source`:  Dot notation can be use to \n access other node of the data: ie: \n\n    // data/posts.json\n\n    {\n        \"all\": [\n            {},\n            ...\n        ],\n        \"archived\": [\n            {},\n            ...\n        ]\n    }\n\nYou can access the data as:\n\n    data_source: posts.archived\n\n\n`slug`: Will dynamically build the slug. Having the `slug` will overwrite the \ndata slug if it has one. \n\n`slug` format based on the data, so data token must be provided \n\nie: `/{post_type}/{id}/{post_slug}`\n\n### Generator: Pagination\n\nWill generated a paginated \n\n    ---\n\n    _generator:\n        type: pagination\n        data_source: posts\n        per_page: 20\n        limit: 100\n        slug: /all/page/{page_num}\n        index_slug: /all\n    ---\n\n---\n\n## Single File Component\n\nSingle file component allows you to put together HTML, CSS, and JS into one file.\n\nUpon building, Mambo will separate them and \nplace them into their respective files to be \nincluded in the page.\n\n```\n---\ntitle: My Page Title\n---\n\n{# Page body #}\n<template>\n    <h1>Hello</h1>\n    <button id=\"myButton\">My Button</button>\n</template>\n\n\n{# Page style #}\n<style>\n    .color-button {\n        color: blue;\n    }\n</style>\n\n\n{# Page script #}\n<script>\n    const button = document.querySelector('#myButton');\n    button.addEventListener('click', () => {\n        button.classList.toggle('color-button');\n    });\n\n</script>\n\n\n```\n\n\n## TODO\n\nRSS\n\n\n\n## WIP\n\n## Context Variables\n\n### site\n\n### page\nThis variable holds the current page or tag object.\n\n### data\n\n### __info__\n\n## Methods\n\n\n## Features\n\n- Sitemap\n- Collections\n- Assets\n- Cache busting\n\nFront matter\n\n```\ntitle:\nurl:\ndescription:\ncollections:\n url: /post/{url}\n data_file\n content_dir\nassets:\n scripts:\n    -\n stylesheets:\n    -\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mardix/mambo",
    "keywords": "static site generator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mambo",
    "package_url": "https://pypi.org/project/mambo/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mambo/",
    "project_urls": {
      "Homepage": "https://github.com/mardix/mambo"
    },
    "release_url": "https://pypi.org/project/mambo/1.3.0/",
    "requires_dist": [
      "jinja2 (==2.10.1)",
      "click (==6.2)",
      "pyyaml (==4.2b1)",
      "markdown (==2.6.2)",
      "python-frontmatter (==0.4.5)",
      "htmlmin (==0.1.5)",
      "livereload (==2.5.0)",
      "arrow (==0.8.0)",
      "python-slugify (==1.2.1)",
      "pyScss"
    ],
    "requires_python": "",
    "summary": "Mambo is an elegant and modern static site generator for the common folks!",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5800024,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38f434f7680a023c6d0e8a22f73080ad57a78842849b5d7616556e54f0206557",
        "md5": "5fbce1378f44945b318b84732f1ba539",
        "sha256": "1b0bed8faff9c6d0de229ff78094f5a12da385ab06b0a4fd1d11c4b7b2f4158b"
      },
      "downloads": -1,
      "filename": "mambo-1.3.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "5fbce1378f44945b318b84732f1ba539",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 123169,
      "upload_time": "2019-09-08T17:32:19",
      "upload_time_iso_8601": "2019-09-08T17:32:19.950839Z",
      "url": "https://files.pythonhosted.org/packages/38/f4/34f7680a023c6d0e8a22f73080ad57a78842849b5d7616556e54f0206557/mambo-1.3.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c0833e6914a7d12e2e3c8a7e0a6e776e048afcaf135870b24690cc1184dd2cc",
        "md5": "aa85d35cb3089173d5fd722cc18af1f0",
        "sha256": "cfa8cae4fded52dbf902761e34e5d70fd6648bb094e0f9437b1c3107999e65b8"
      },
      "downloads": -1,
      "filename": "mambo-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "aa85d35cb3089173d5fd722cc18af1f0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 111164,
      "upload_time": "2019-09-08T17:55:18",
      "upload_time_iso_8601": "2019-09-08T17:55:18.052898Z",
      "url": "https://files.pythonhosted.org/packages/8c/08/33e6914a7d12e2e3c8a7e0a6e776e048afcaf135870b24690cc1184dd2cc/mambo-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}