{
  "info": {
    "author": "Val Neekman",
    "author_email": "info@neekware.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django IPware\n\n**A Django application to retrieve client's IP address**\n\n[![status-image]][status-link]\n[![version-image]][version-link]\n[![coverage-image]][coverage-link]\n\n# Overview\n\n**Best attempt** to get client's IP address while keeping it **DRY**.\n\n# Notice\n\nThere is not a good `out-of-the-box` solution against fake IP addresses, aka `IP Address Spoofing`.\nYou are encouraged to read the ([Advanced users](README.md#advanced-users)) section of this page and\nuse `trusted_proxies_ips` and/or `proxy_count` features to match your needs, especially `if` you are\nplanning to include `ipware` in any authentication, security or `anti-fraud` related architecture.\n\n# How to install\n\n    1. easy_install django-ipware\n    2. pip install django-ipware\n    3. git clone http://github.com/un33k/django-ipware\n        a. cd django-ipware\n        b. run python setup.py install\n    4. wget https://github.com/un33k/django-ipware/zipball/master\n        a. unzip the downloaded file\n        b. cd into django-ipware-* directory\n        c. run python setup.py install\n\n# How to use\n\n```python\n # In a view or a middleware where the `request` object is available\n\n from ipware import get_client_ip\n client_ip, is_routable = get_client_ip(request)\n if client_ip is None:\n    # Unable to get the client's IP address\n else:\n     # We got the client's IP address\n     if is_routable:\n         # The client's IP address is publicly routable on the Internet\n     else:\n         # The client's IP address is private\n\n # Order of precedence is (Public, Private, Loopback, None)\n```\n\n# Advanced users:\n\n- ### Precedence Order\n\n  The default meta precedence order is top to bottom. However, you may customize the order\n  by providing your own `IPWARE_META_PRECEDENCE_ORDER` by adding it to your project's settings.py\n\n  ```python\n   # The default meta precedence order\n   IPWARE_META_PRECEDENCE_ORDER = (\n       'HTTP_X_FORWARDED_FOR', 'X_FORWARDED_FOR',  # <client>, <proxy1>, <proxy2>\n       'HTTP_CLIENT_IP',\n       'HTTP_X_REAL_IP',\n       'HTTP_X_FORWARDED',\n       'HTTP_X_CLUSTER_CLIENT_IP',\n       'HTTP_FORWARDED_FOR',\n       'HTTP_FORWARDED',\n       'HTTP_VIA',\n       'REMOTE_ADDR',\n   )\n  ```\n\n  **Alternatively**, you can provide your custom _request header meta precedence order_ when calling `get_client_ip()`.\n\n```python\nget_client_ip(request, request_header_order=['X_FORWARDED_FOR'])\nget_client_ip(request, request_header_order=['X_FORWARDED_FOR', 'HTTP_X_FORWARDED_FOR'])\n```\n\n### Private Prefixes\n\nYou may customize the prefixes to indicate an IP address is private. This is done by adding your\nown `IPWARE_PRIVATE_IP_PREFIX` to your project's settings.py. IP addresses matching the following\nprefixes are considered _private_ & are **not** publicly routable.\n\n```python\n# The default private IP prefixes\nIPWARE_PRIVATE_IP_PREFIX = getattr(settings,\n   'IPWARE_PRIVATE_IP_PREFIX', (\n     '0.',  # messages to software\n     '10.',  # class A private block\n     '100.64.',  '100.65.',  '100.66.',  '100.67.',  '100.68.',  '100.69.',\n     '100.70.',  '100.71.',  '100.72.',  '100.73.',  '100.74.',  '100.75.',\n     '100.76.',  '100.77.',  '100.78.',  '100.79.',  '100.80.',  '100.81.',\n     '100.82.',  '100.83.',  '100.84.',  '100.85.',  '100.86.',  '100.87.',\n     '100.88.',  '100.89.',  '100.90.',  '100.91.',  '100.92.',  '100.93.',\n     '100.94.',  '100.95.',  '100.96.',  '100.97.',  '100.98.',  '100.99.',\n     '100.100.', '100.101.', '100.102.', '100.103.', '100.104.', '100.105.',\n     '100.106.', '100.107.', '100.108.', '100.109.', '100.110.', '100.111.',\n     '100.112.', '100.113.', '100.114.', '100.115.', '100.116.', '100.117.',\n     '100.118.', '100.119.', '100.120.', '100.121.', '100.122.', '100.123.',\n     '100.124.', '100.125.', '100.126.', '100.127.',  # carrier-grade NAT\n     '169.254.',  # link-local block\n     '172.16.', '172.17.', '172.18.', '172.19.',\n     '172.20.', '172.21.', '172.22.', '172.23.',\n     '172.24.', '172.25.', '172.26.', '172.27.',\n     '172.28.', '172.29.', '172.30.', '172.31.',  # class B private blocks\n     '192.0.0.',  # reserved for IANA special purpose address registry\n     '192.0.2.',  # reserved for documentation and example code\n     '192.168.',  # class C private block\n     '198.18.', '198.19.',  # reserved for inter-network communications between two separate subnets\n     '198.51.100.',  # reserved for documentation and example code\n     '203.0.113.',  # reserved for documentation and example code\n     '224.', '225.', '226.', '227.', '228.', '229.', '230.', '231.', '232.',\n     '233.', '234.', '235.', '236.', '237.', '238.', '239.',  # multicast\n     '240.', '241.', '242.', '243.', '244.', '245.', '246.', '247.', '248.',\n     '249.', '250.', '251.', '252.', '253.', '254.', '255.',  # reserved\n   ) + (\n     '::',  # Unspecified address\n     '::ffff:', '2001:10:', '2001:20:'  # messages to software\n     '2001::',  # TEREDO\n     '2001:2::',  # benchmarking\n     '2001:db8:',  # reserved for documentation and example code\n     'fc00:',  # IPv6 private block\n     'fe80:',  # link-local unicast\n     'ff00:',  # IPv6 multicast\n   )\n)\n```\n\n### Trusted Proxies\n\nIf your Django server is behind one or more known proxy server(s), you can filter out unwanted requests\nby providing the `trusted` proxy list when calling `get_client_ip(request, proxy_trusted_ips=['177.139.233.133'])`.\nIn the following example, your load balancer (LB) can be seen as a `trusted` proxy.\n\n```\n `Real` Client  <public> <---> <public> LB (Server) <private> <--------> <private> Django Server\n                                                                   ^\n                                                                   |\n `Fake` Client  <private> <---> <private> LB (Server) <private> ---^\n```\n\n```python\n# In the above scenario, use your load balancer IP address as a way to filter out unwanted requests.\nclient_ip, is_routable = get_client_ip(request, proxy_trusted_ips=['177.139.233.133'])\n\n# If you have multiple proxies, simply add them to the list\nclient_ip, is_routable = get_client_ip(request, proxy_trusted_ips=['177.139.233.133', '177.139.233.134'])\n\n# For proxy servers with fixed sub-domain and dynamic IP, use the following pattern.\nclient_ip, is_routable = get_client_ip(request, proxy_trusted_ips=['177.139.', '177.140'])\nclient_ip, is_routable = get_client_ip(request, proxy_trusted_ips=['177.139.233.', '177.139.240'])\n```\n\n`Please note:` By default, the `right-most` proxy in the chain is the `trusted` proxy and that is the one your django\nserver talks to. Therefore, `ipware` checks to see if the `right-most` proxy address starts with any ip pattern that was\npassed in via the `proxy_trusted_ips` list.\n\n### Proxy Count\n\nIf your Django server is behind a `known` number of proxy server(s), you can filter out unwanted requests\nby providing the `number` of proxies when calling `get_client_ip(request, proxy_count=1)`.\nIn the following example, your load balancer (LB) can be seen as the `only` proxy.\n\n```\n `Real` Client  <public> <---> <public> LB (Server) <private> <--------> <private> Django Server\n                                                                   ^\n                                                                   |\n                                       `Fake` Client  <private> ---^\n```\n\n```python\n# In the above scenario, the total number of proxies can be used as a way to filter out unwanted requests.\nclient_ip, is_routable = get_client_ip(request, proxy_count=1)\n\n# The above may be very useful in cases where your proxy server's IP address is assigned dynamically.\n# However, If you have the proxy IP address, you can use it in combination to the proxy count.\nclient_ip, is_routable = get_client_ip(request, proxy_count=1, proxy_trusted_ips=['177.139.233.133'])\n```\n\n### Originating Request\n\nIf your proxy server is configured such that the right-most IP address is that of the originating client, you\ncan indicate `right-most` as your `proxy_order` when calling `get_client_ip(request, proxy_order=\"right-most\")`.\nPlease note that the [de-facto](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) standard\nfor the originating client IP address is the `left-most` as per `<client>, <proxy1>, <proxy2>`.\n\n# Running the tests\n\nTo run the tests against the current environment:\n\n    python manage.py test\n\n# License\n\nReleased under a ([MIT](LICENSE)) license.\n\n# Version\n\nX.Y.Z Version\n\n    `MAJOR` version -- when you make incompatible API changes,\n    `MINOR` version -- when you add functionality in a backwards-compatible manner, and\n    `PATCH` version -- when you make backwards-compatible bug fixes.\n\n[status-image]: https://travis-ci.org/un33k/django-ipware.svg?branch=master\n[status-link]: https://travis-ci.org/un33k/django-ipware\n[version-image]: https://img.shields.io/pypi/v/django-ipware.svg\n[version-link]: https://pypi.python.org/pypi/django-ipware\n[coverage-image]: https://coveralls.io/repos/un33k/django-ipware/badge.svg\n[coverage-link]: https://coveralls.io/r/un33k/django-ipware\n[download-image]: https://img.shields.io/pypi/dm/django-ipware.svg\n[download-link]: https://pypi.python.org/pypi/django-ipware\n\n# Sponsors\n\n[Neekware Inc.](http://neekware.com)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/un33k/django-ipware",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-ipware",
    "package_url": "https://pypi.org/project/django-ipware/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-ipware/",
    "project_urls": {
      "Homepage": "https://github.com/un33k/django-ipware"
    },
    "release_url": "https://pypi.org/project/django-ipware/4.0.2/",
    "requires_dist": null,
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*",
    "summary": "A Django application to retrieve user's IP address",
    "version": "4.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17164493,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "451e61cd5bde3a7c640ae4e935c9910e6b4c4a492cb78ff32915f779ff5150ff",
        "md5": "c9acbd59c03c55167d3cffc191e81d5b",
        "sha256": "878dbb06a87e25550798e9ef3204ed70a200dd8b15e47dcef848cf08244f04c9"
      },
      "downloads": -1,
      "filename": "django_ipware-4.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c9acbd59c03c55167d3cffc191e81d5b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*",
      "size": 9322,
      "upload_time": "2021-12-16T17:05:17",
      "upload_time_iso_8601": "2021-12-16T17:05:17.855680Z",
      "url": "https://files.pythonhosted.org/packages/45/1e/61cd5bde3a7c640ae4e935c9910e6b4c4a492cb78ff32915f779ff5150ff/django_ipware-4.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "422ea42b9a9554de99e17fc93f108c49d6627633989b4c95cfa8bee7db1294ee",
        "md5": "48240909d94530c6de81cea4e5970200",
        "sha256": "602a58325a4808bd19197fef2676a0b2da2df40d0ecf21be414b2ff48c72ad05"
      },
      "downloads": -1,
      "filename": "django-ipware-4.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "48240909d94530c6de81cea4e5970200",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*",
      "size": 8943,
      "upload_time": "2021-12-16T17:05:19",
      "upload_time_iso_8601": "2021-12-16T17:05:19.291120Z",
      "url": "https://files.pythonhosted.org/packages/42/2e/a42b9a9554de99e17fc93f108c49d6627633989b4c95cfa8bee7db1294ee/django-ipware-4.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}