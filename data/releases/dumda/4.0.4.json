{
  "info": {
    "author": "Oliver B. Gaither",
    "author_email": "oliverbcontact@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Dumda 4.0.3\n\nPython Library to get fast extensive Dummy Data for testing https://pypi.org/project/dumda/\n\n## Installation\n\n```\npip install dumda\n```\n\nor update from previous version:\n\n```\npip install --update dumda\n```\n\n## Usage\n\nThis section will cover the functionality of Dumda and how you can power your applicaiton \\\nwith fast customizable randomly generated data.\n\n```python\nimport dumda\n```\n\n### Names\n\nYou can generate random names with a handful of specifiers such as the associated \\\nsex of the name and the format of the name string.\n\n```python\nfrom dumda import random_name, random_names, names_by_prefix\n\n# Basic call with default arguments, returns a full name\nn1 = random_name()\nprint(\"Hello, world. My name is %s\" % n1)\n\n# You can specify the sex of the name generated (1 for female and 0 for male)\n# the default is None, so any name of any sex is chosen\nmale_name = random_name(sex=0)\nfemale_name = random_name(sex=1)\nprint(\"Hi, %s. My name is %s\" % (male_name, female_name))\n\n# finally you can specify the format of the string\n# the default is First Last, but if you mark 'reversed' parameter as True\n# it will return the name in Last, First format\nformal_name = random_name(reversed=True)\nprint(\"Student: %s\" % formal_name)\n\n# Most relevantly you can generated n number of names and the parameter list\n# stays the same\nname_list = random_names(n=7, sex=0, reversed=False)  # returns an iterator\nprint(list(name_list))\n\n# you can also retrieve names with just a given prefix\nBEST_PREFIX = \"oliv\"\nprint(names_by_prefix(BEST_PREFIX, n=1, sex=0, full=False))\n```\n\n#### Output:\n\n```\nHello, world. My name is Tracie Bradley\nHi, Hugo Flores. My name is Rosario Romero\nStudent: Benton, Audrea\n['Kris Gould', 'Wes Heath', 'Arthur Larsen', 'Lucien Christian', 'Lincoln Moody', 'Cortez Jimenez', 'Giuseppe Meadows']\nOliver\n```\n\n### Countries/Cities\n\nYou can generate random countries with a handful of specifiers as well.\n\n```python\nfrom dumda import random_country, random_countries, random_city, random_cities, NAMEKEY, POPULATIONKEY, LNGKEY, \\\n    LATKEY\n\n# Countries\nc1 = random_country()  # you can generate a random country like names\nprint(\"I'm from %s\" % c1)\nc2 = random_country(iso=True)  # you can specify whether you want the country string to be in iso3 format\nprint(\"COUNTRY: %s\" % c2)\n\n# as with names, you can get an iterator of a specified amount of countries\ncountry_codes = random_countries(10, iso=True)\nprint(list(country_codes))\n\n# Cities\n# you can generate random cities. There are 3 optional parameters\n# 1. country - there are valid countries to get cities from\n#               check COUNTRIES_WITH_CITIES_DATA to see, will raise Exception if not valid\n# 2.populus - if marked, it will only return cities that have a population higher than\n#               the average population of the dataset\n# 3. returnobj - if marked, will return a dictionary object rather than just a city name str\n#               - with data related to the city\ncity1 = random_city()\nprint(\"Random city: %s\" % city1)\nnorwegian_city = random_city(country=\"norway\")  # country string can be in any casing\nprint(\"I wonder how cold it is in %s, Norway\" % norwegian_city)\ncity2 = random_city(country=\"United States\", populus=True)\nprint(\"%s is a pretty sizable place\" % city2)\nobj = random_city(country=\"Colombia\", populus=True, returnobj=True)\n# Keys are in the __init__ file\nlng = obj[LNGKEY]\nlat = obj[LATKEY]\nprint(f\"{obj[NAMEKEY]} has a population of {obj[POPULATIONKEY]} and is located at: {lat, lng}\")\n\n# and of course, you can get numerous\nprint(list(random_cities(n=3, country=\"United States\", populus=False, returnobj=True)))\n\n```\n#### Output:\n```\nI'm from Montenegro\nCOUNTRY: CIV\n['ZAF', 'ALB', 'ARG', 'SWZ', 'MOZ', 'GBR', 'SWE', 'BGR', 'CZE', 'POL']\nRandom city: Presidente Medici\nI wonder how cold it is in Haugesund, Norway\nChicago is a pretty sizable place\nPasto has a population of 382236 and is located at: (1.2136, -77.2811)\n[{'name': 'Wescosville', 'latitude': 40.5617, 'longitude': -75.5489, 'country': 'United States', 'iso3': 'USA', 'population': 6694}, {'name': 'Moundsville', 'latitude': 39.9221, 'longitude': -80.7422, 'country': 'United States', 'iso3': 'USA', 'population': 8252}, {'name': 'Nampa', 'latitude': 43.5845, 'longitude': -116.5631, 'country': 'United States', 'iso3': 'USA', 'population': 184428}]\n```\n\n### Misc.\nThere is also some other functions for full person recreation, (and then more on that)\n```python\nfrom dumda import generate_email, generate_number, Person, names_by_prefix\nimport json\n\n# generate an email address\nemail_list = []\nnames = list(names_by_prefix(\"oli\", n=3, full=True))\nfor i in range(3):\n    # name passed to email generator *must* be a full name of style; First Last\n    e = generate_email(names[i])\n    email_list.append(e)\n    \nprint(email_list)\n\n# generate a phone number\nprint(\"Call me: %s\" % generate_number())\n\n# possible parameters\n# - area_code (defaults to randomly generated) and country_code (defaults to +1)\n\nDC_AREA_CODE = 202\nprint(\"for store hours call: %s\" % generate_number(area_code=DC_AREA_CODE))\n\n\n\n\np = Person() # generate a person object that uses all of the functions in Dumda\nprint(json.dumps(p.json(), indent=4))\n```\n#### Output:\n```\n['ohuffman@baz.net', 'olivesloan@qux.org', 'olivalin@bar.org']\nCall me: +1 (743)-792-9493\nfor store hours call: +1 (202)-293-2130\n{\n    \"name\": \"Katelynn Brown\",\n    \"location\": {\n        \"name\": \"Atlantic\",\n        \"latitude\": 41.3957,\n        \"longitude\": -95.0138,\n        \"country\": \"United States\",\n        \"iso3\": \"USA\",\n        \"population\": 6526\n    },\n    \"email\": \"katelynnbrown@foo.org\",\n    \"phone\": \"+1 (793)-759-380\"\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oliverbdot/dumda",
    "keywords": "data science,python,python3",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dumda",
    "package_url": "https://pypi.org/project/dumda/",
    "platform": null,
    "project_url": "https://pypi.org/project/dumda/",
    "project_urls": {
      "Homepage": "https://github.com/oliverbdot/dumda"
    },
    "release_url": "https://pypi.org/project/dumda/4.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "generate highly customizable dummy data for data science testing",
    "version": "4.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16571592,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b984385b3c7e394466cf9fb3634b44722149b16bc3ae805105a0c84f4c8eeb08",
        "md5": "f782cfcaddb8062936484406ad05c452",
        "sha256": "f58b48190c595d4e15234d171dac6d8c6641182a9a08541d69de5bcc61b11ab9"
      },
      "downloads": -1,
      "filename": "dumda-4.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "f782cfcaddb8062936484406ad05c452",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 2476356,
      "upload_time": "2023-01-26T03:07:59",
      "upload_time_iso_8601": "2023-01-26T03:07:59.715458Z",
      "url": "https://files.pythonhosted.org/packages/b9/84/385b3c7e394466cf9fb3634b44722149b16bc3ae805105a0c84f4c8eeb08/dumda-4.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}