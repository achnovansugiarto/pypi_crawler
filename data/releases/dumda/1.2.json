{
  "info": {
    "author": "Oliver B.",
    "author_email": "oliverbcontact@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Dumda\nPython Library to get fast extensive Dummy Data for testing\n## Installation\n```\npip install dumda\n```\n\n\n## Usage:\n\n## Cities\n\n```python\nfrom dumda.cities import Cities\n\n# initialize cities class\nc = Cities()\n\n# get the full list of all available cities (23k+ cities)\nc.get_all()\n```\n\nOf course, rarely or ever will someone need a list of 23 thousand cities. Not to mention the impact on speed.\\\nin more common cases, you can extract sample sizes of cities.\n\n### get single\n```python\nfrom dumda.cities import Cities\nc = Cities()\nc.get_single()\n```\n#### output:\n```bash\n'Scicli'\n```\n\n### get a random set of cities\nthe most basic implementation; get a list of randomly selected cities of a chosen amount\n```python\nfrom dumda.cities import Cities\nc = Cities()\n\nc.get_random_cities(10)\n```\n\n#### output:\n```bash\n['Hawthorn South',\n 'Paghmān',\n 'Bruntál',\n 'Secunda',\n 'Beroun',\n 'Luxu',\n 'Kārkala',\n 'Jelcz',\n 'Al Qaryatayn',\n 'Amadeo']\n```\n### get cities by identifiers\nyou can specify more on the exact cities you would like; cities by country or by letter. \\\nGetting a city by letter is primarily for fun, however imagine that you are making a fight application and want them to be domestic.\n```python\nfrom dumda.cities import Cities\nfrom random import choice\nc = Cities()\n# Get city by letter\no_cities = c.get_by_letter(\"o\")\nprint(o_cities)\nprint()\n# Get City by country\nus_cities = c.get_by_country(\"United States\")\n# Note there is no 'england' just united kingdom\n\nclass Flight:\n    def __init__(self, origin, destination):\n        self.origin = origin\n        self.destination = destination\n\n    def __repr__(self):\n        return f\"Flight from {self.origin} to {self.destination}\"\n\n\nif __name__ == '__main__':\n    x = choice(us_cities)\n    y = choice(us_cities)\n\n    flight = Flight(x, y)\n    print(flight)\n```\n#### output:\n```bash\n['Xankandi', 'Xaçmaz', 'Xique Xique', 'Xanxerê', 'Xinghua', 'Xucheng', 'Xunchang', 'Xuanzhou', 'Xixiang', 'Xiuying', 'Xiulin', 'Xiongzhou', 'Xinzhou', 'Xinzhou', 'Xinzhi', 'Xinyu', 'Xinyang', 'Xintai', 'Xinshi', 'Xinpu', 'Xinji', 'Xining', 'Xingtai', 'Xindian', 'Xindi', 'Ximei', 'Xihe', 'Xichang', 'Xiazhuang', 'Xiazhen', 'Xiashi', 'Xiaoweizhai', 'Xiaoshan', 'Xiaolingwei', 'Xiaogan', 'Xianyang', 'Xiantao', 'Xianshuigu', 'Xiannü', 'Xianning', 'Xianju', 'Xiangxiang', 'Xiangtan', 'Xiangyang', 'Xiangcheng Chengguanzhen', 'Xi’an', 'Xiamen', 'Xishan', 'Xinhui', 'Xinyi', 'Xincheng', 'Xiuyan', 'Xinqing', 'Xinmin', 'Xinglongshan', 'Xingcheng', 'Xilin Hot', 'Xifeng', 'Xiaoshi', 'Xanten', 'Xàtiva', 'Xirivella', 'Xánthi', 'Xam Nua', 'Xoxocotla', 'Xonacatlán', 'Xochitepec', 'Xochimilco', 'Xicotepec de Juárez', 'Xico', 'Xalapa de Enríquez', 'Xai-Xai', 'Xenia']\n\nFlight from Reno to Marshalltown\n```\n\n\n\n\n## Names\n######Note: Names runs much slower than cities as there are 200,000 names in this package\nfunctions overlap between the names and cities packages such as get_all, get_single, get_random and get_by_letter. \\\nHowever, there are some function unique to names.\n\n### Get Names by Sex\nyou can get a list of names of a single sex and optionally specify the amount\n```python\nfrom dumda.names import Names\nnames = Names()\n\n# you can either leave the function call blank or\n# pass an integer for the given amount. \n# Passing an integer is recommended as to remember that\n# there are around 100,000 names for each sex\nboys = names.boy_names(5)\ngirls = names.girl_names(5)\n\nprint(boys)\nprint(girls)\n```\n####output:\n```bash\n['Sam', 'Erich', 'Malcolm', 'Mitchel', 'Elbert']\n['Chantel', 'Aleta', 'Kari', 'Rena', 'Eve']\n```\n\n## Phone Numbers\nIn cases that you are making something like a phonebook or directory, you can also generate phone numbers (that follow U.S. formatting).\nYou can optionally pass an area code if you want to generate phones for people from a specific area.\n```python\nfrom dumda.phones import generate_number\n\n# regular generation\nx = generate_number()\n\n# area code generation\ndc_phones = list()\nfor i in range(5):\n    phone = generate_number(area_code=202)\n    dc_phones.append(phone)\n\nprint(x)\nprint(dc_phones)\n```\n#### output:\n```bash\n563-873-5164\n['202-822-1231', '202-620-6058', '202-336-3025', '202-565-7063', '202-525-2625']\n```\n\n### Extra: All together\nAn example of combing all the functionality of this package.\n```python\nfrom dumda import cities, names, phones\n\nclass Person(object):\n    def __init__(self, name, hometown, number):\n        self.name = name\n        self.hometown = hometown\n        self.number = number\n\n    def __repr__(self):\n        return f\"{self.name} from {self.hometown}.\\tNumber: {self.number}\"\n\ndef create_person():\n    n = names.Names()\n    c = cities.Cities()\n    name = n.get_single()\n    city = c.get_single()\n    number = phones.generate_number()\n\n    return Person(name, city, number)\n\n\nif __name__ == '__main__':\n    for _ in range(3):\n        person = create_person()\n        print(person)\n```\n\n#####output:\n```bash\nLevi from Yefremov.\tNumber: 985-829-2480\nVashti from Amvrosiyivka.\tNumber: 216-391-6856\nDave from Jalpāiguri.\tNumber: 338-592-9126\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oliverbdot/dumda",
    "keywords": "data science,python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dumda",
    "package_url": "https://pypi.org/project/dumda/",
    "platform": "",
    "project_url": "https://pypi.org/project/dumda/",
    "project_urls": {
      "Homepage": "https://github.com/oliverbdot/dumda"
    },
    "release_url": "https://pypi.org/project/dumda/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "generate highly customizable dummy data for data science testing",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16571592,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d76e69b716ef49c4bbf9c709687425ee3a3209048532531dd5e47528fcc4ff8e",
        "md5": "f7f31cd61d3d045ee9f003ed675527cd",
        "sha256": "9d6ae107843eef0b8fc9d703ff9bf8e70b31440d39719021fa71c73bb3f45cb7"
      },
      "downloads": -1,
      "filename": "dumda-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f7f31cd61d3d045ee9f003ed675527cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1479457,
      "upload_time": "2021-06-17T16:02:15",
      "upload_time_iso_8601": "2021-06-17T16:02:15.943045Z",
      "url": "https://files.pythonhosted.org/packages/d7/6e/69b716ef49c4bbf9c709687425ee3a3209048532531dd5e47528fcc4ff8e/dumda-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73fc1d3ea455fbc30c16ebe3d47ff09277eac0328c11bb30a7c36fbb43d35174",
        "md5": "912efcb56191b9bfc742b5865cbf1394",
        "sha256": "876dcb458b82fbb86c49cfdfbebc5aca8ebd789a8f0d4ce5076123003a4ad840"
      },
      "downloads": -1,
      "filename": "dumda-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "912efcb56191b9bfc742b5865cbf1394",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1507110,
      "upload_time": "2021-06-17T16:02:17",
      "upload_time_iso_8601": "2021-06-17T16:02:17.674807Z",
      "url": "https://files.pythonhosted.org/packages/73/fc/1d3ea455fbc30c16ebe3d47ff09277eac0328c11bb30a7c36fbb43d35174/dumda-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}