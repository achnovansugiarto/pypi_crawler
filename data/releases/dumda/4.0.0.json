{
  "info": {
    "author": "Oliver B. Gaither",
    "author_email": "oliverbcontact@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Dumda\nPython Library to get fast extensive Dummy Data for testing https://pypi.org/project/dumda/\n## Installation\n```\npip install dumda\n```\n\n## Usage:\n\n### Cities\n\n```python\nfrom dumda import cities\n\n# get a single random city, either from the\n# entire pool or from a specific country\nprint(cities.get_random_city())\nprint(cities.get_random_city(\"United States\"))\n\n# get a list of random cities, this can also be\n# called with a given country (cities.get_random_cities(5, \"Zimbabwe\")\nprint(cities.get_random_cities(10))\n```\n#### output\n```bash\nSomerset East\nPaducah\n['Watsa', 'Westerstede', 'Porto-Novo', 'Dushanbe', \n'Hoeyang', 'Uozu', 'Riyadh', 'Lashio', 'Arendal', \n'Tlapa de Comonfort']\n``` \n\n### Names\nthe meta is pretty much the same with names and cities, except a few\nadditional operations\n```python\nfrom dumda import names\n# get a random name\nprint(names.get_random_name())\n# instead of specific countries, you can pass specific sex\nprint(names.get_random_name(\"boy\"))\nprint()\n# like, cities get a random list\nb = names.get_random_names(15, \"boy\")\ng = names.get_random_names(15, \"girl\")\nthe_class = b + g\nprint(\"class list: {}\".format(the_class))\n\nprint()\n# additional query options\n# generate a full name, for more accurate dummy data\nprint(names.get_full_name())\n\n# there is also a multiple version of the function, \n# and of course you can enter a sex\nprint(names.get_full_names(5))\nprint(names.get_full_name(\"boy\"))\nprint(names.get_full_names(3, \"girl\"))\n\nprint()\n# I added this just because, but you can also \n# get a list of names based on letter\ngood_names = names.get_names_by_letter(\"o\", 3)\nprint(good_names)\nprint(good_names[-1])\n```\n#### output\n```bash\nArmando\nAndre\n\nclass list: ['Lupe', 'Wilbert', 'Torrence', 'Shad', 'Kyson', \n'Keaton', 'Destin', 'Ridge', 'Jorden', 'Enzo', 'Reginal', \n'Aarav', 'Deontae', 'Reggie', 'Kameron', 'Anya', 'Therese', \n'Kaylee', 'Linette', 'Greta', 'Allie', 'Deanne', 'Coretta', \n'Nila', 'Jazlyn', 'Lolita', 'Cherry', 'Clare', 'Breanne', 'Cheri']\n\nDavian Yung\n['Glynda Zavala', 'Unknown Booth', 'Leigh Flood', 'Ben Dupree', \n'Adrien Zachary']\nKimberly Higgins\n['Jocelyn Zelaya', 'Kalene Ross', 'Melba Tran']\n\n['Oscar', 'Otis', 'Oliver']\nOliver\n```\n\n### Phone Numbers\nIn cases that you are making something like a phonebook or directory, you can also generate phone numbers (that follow U.S. formatting).\nYou can optionally pass an area code if you want to generate phones for people from a specific area.\n```python\nfrom dumda.phones import generate_number\n# generate a random phone number based on US standard\nprint(generate_number())\n# generate based on a given area code\nprint(generate_number(\"202\"))\n```\n#### output:\n```bash\n901-212-2734\n202-741-8998\n```\n### Emails\nUsing this package's name class you can also generate random emails\n```python\nfrom dumda.names import get_full_name\nfrom dumda.emails import generate_email\n# Pass a full name to generate an email\ny = get_full_name()\nx = generate_email(y)\nprint(y)\nprint(x)\nz = get_full_name()\nprint(z)\nprint(generate_email(z))\n```\n\n##### output:\n```bash\nArmando Charles\nacharles@foo.org\nVirgie Innocent\nvirgieinnocent@qux.net\n```\n\n### Person Object\nNow if you were thinking of combining these for some objects\nin your program and wanted to keep it simple, I've got it covered.\n```python\nfrom dumda import Person\nperson_one = Person()\n# optionally pass sex and country of person\nperson_two = Person(country=\"United Kingdom\", sex=\"girl\")\nprint(person_one.json())\nprint(person_two.json())\n\n```\n\n##### output:\n```bash\n{'full_name': 'Armando Charles', 'location': 'Fairhope', 'email': 'acharles@baz.net', 'phone': '763-859-7018'}\n{'full_name': 'Kinsley Louis', 'location': 'Weybridge', 'email': 'kinsleyl@qux.com', 'phone': '623-88-6788'}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oliverbdot/dumda",
    "keywords": "data science,python,python3",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dumda",
    "package_url": "https://pypi.org/project/dumda/",
    "platform": null,
    "project_url": "https://pypi.org/project/dumda/",
    "project_urls": {
      "Homepage": "https://github.com/oliverbdot/dumda"
    },
    "release_url": "https://pypi.org/project/dumda/4.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "generate highly customizable dummy data for data science testing",
    "version": "4.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16571592,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd1c831a38af1d17457bda5c91766e44368b1a9347081f82535b91a7972d5fdb",
        "md5": "7c32e8154302618832a9aeb82d61f66c",
        "sha256": "97e98f76f532ca034437f2023185bd85353294463576bf30301235a09ec3fb5a"
      },
      "downloads": -1,
      "filename": "dumda-4.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7c32e8154302618832a9aeb82d61f66c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 2474899,
      "upload_time": "2023-01-09T20:03:28",
      "upload_time_iso_8601": "2023-01-09T20:03:28.916527Z",
      "url": "https://files.pythonhosted.org/packages/dd/1c/831a38af1d17457bda5c91766e44368b1a9347081f82535b91a7972d5fdb/dumda-4.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}