{
  "info": {
    "author": "Przemyslaw Wirkus, Johan Seferidis, James Crosby",
    "author_email": "Przemyslaw.Wirkus@arm.com, Johan.Seferidis@arm.com, James.Crosby@arm.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Build status](https://circleci.com/gh/ARMmbed/mbed-ls/tree/master.svg?style=svg)](https://circleci.com/gh/ARMmbed/mbed-ls/tree/master)\n[![Coverage Status](https://coveralls.io/repos/github/ARMmbed/mbed-ls/badge.svg?branch=master)](https://coveralls.io/github/ARMmbed/mbed-ls?branch=master)\n[![PyPI version](https://badge.fury.io/py/mbed-ls.svg)](https://badge.fury.io/py/mbed-ls)\n\n# Mbed LS\n\nMbed LS is a Python (2 and 3) module that detects and lists Mbed Enabled devices connected to the host computer. The Mbed OS team publishes Mbed LS on PyPI. It works on all major operating systems (Windows, Linux and Mac OS X).\n\nIt provides the following information for all connected boards in a console (terminal) output:\n\n- Mbed OS platform name.\n- Mount point (MSD or disk).\n- Serial port.\n\n# Installation\n\n## Installation from PyPI (Python Package Index)\n\nTo install Mbed LS from [PyPI](https://pypi.python.org/pypi/mbed-ls), run the following command:\n\n```bash\n$ pip install mbed-ls --upgrade\n```\n\n## Installation from Python sources\n\n**Prerequisites:** You need to have [Python 2.7.x](https://www.python.org/download/releases/2.7/) or [Python 3.6.x](https://www.python.org/downloads/release/python-362/) installed on your system.\n\n**Note:** If your OS is Windows, please follow the installation instructions [for the serial port driver](https://os.mbed.com/docs/latest/tutorials/windows-serial-driver.html).\n\nInstall Mbed LS from sources with the following commands:\n\n```bash\n$ git clone https://github.com/ARMmbed/mbed-ls.git\n$ cd mbed-ls\n$ python setup.py install\n```\n\n# Command-line\n\nThe command-line tool is available with the command `mbedls`.\n\n**Note:** [Mbed CLI](https://github.com/armmbed/mbed-cli) has a similarly-named command `mbed ls`; however, the commands are different. Be sure to omit the space when using the Mbed LS command-line tool.\n\n```bash\n$ mbedls\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n| platform_name | platform_name_unique | mount_point | serial_port | target_id                                        | daplink_version |\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n| K64F          | K64F[0]              | D:          | COM18       | 0240000032044e4500257009997b00386781000097969900 | 0244            |\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n```\n\n## Result formats\n\nThe Mbed LS command-line accepts a few arguments to change the format of the results. The default format is a table. You may pass `--simple` to simplify this table format, and `--json` to print the table as a json list of the rows.\n\n### Simple (no table formatting)\n\n```\n$ mbedls --simple\n K64F  K64F[0]  D:  COM18  0240000032044e4500257009997b00386781000097969900  0244\n```\n\n### JSON\n\n```bash\n$ mbedls --json\n[\n    {\n        \"daplink_auto_reset\": \"0\",\n        \"daplink_automation_allowed\": \"1\",\n        \"daplink_bootloader_crc\": \"0xa65218eb\",\n        \"daplink_bootloader_version\": \"0242\",\n        \"daplink_daplink_mode\": \"Interface\",\n        \"daplink_git_sha\": \"67f8727a030bcc585e982d899fb6382db56d673b\",\n        \"daplink_hic_id\": \"97969900\",\n        \"daplink_interface_crc\": \"0xe4422294\",\n        \"daplink_interface_version\": \"0244\",\n        \"daplink_local_mods\": \"0\",\n        \"daplink_overflow_detection\": \"1\",\n        \"daplink_remount_count\": \"0\",\n        \"daplink_unique_id\": \"0240000032044e4500257009997b00386781000097969900\",\n        \"daplink_usb_interfaces\": \"MSD, CDC, HID\",\n        \"daplink_version\": \"0244\",\n        \"mount_point\": \"D:\",\n        \"platform_name\": \"K64F\",\n        \"platform_name_unique\": \"K64F[0]\",\n        \"serial_port\": \"COM18\",\n        \"target_id\": \"0240000032044e4500257009997b00386781000097969900\",\n        \"target_id_mbed_htm\": \"0240000032044e4500257009997b00386781000097969900\",\n        \"target_id_usb_id\": \"0240000032044e4500257009997b00386781000097969900\"\n    }\n]\n```\n\n## Mocking (renaming) platforms\n\nOverride a platform's name using the `--mock` parameter:\n\n```\n$ mbedls --mock 0240:MY_NEW_PLATFORM\n$ mbedls\n+-----------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n| platform_name   | platform_name_unique | mount_point | serial_port | target_id                                        | daplink_version |\n+-----------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n| MY_NEW_PLATFORM | MY_NEW_PLATFORM[0]   | D:          | COM18       | 0240000032044e4500257009997b00386781000097969900 | 0244            |\n+-----------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n```\n\nThe `--mock` parameter accepts a platform ID and a platform name, separated by the `:` character. The platform ID is the first 4 characters of the `target_id`. The platform name is the name you are temporarily assigning to this platform.\n\nTo remove a mocked platform, use the `--mock` parameter again. Continuing from the previous example, use `-<platform id>` as the value:\n\n```\n$ mbedls --mock -0240\n$ mbedls\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n| platform_name | platform_name_unique | mount_point | serial_port | target_id                                        | daplink_version |\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n| K64F          | K64F[0]              | D:          | COM18       | 0240000032044e4500257009997b00386781000097969900 | 0244            |\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n```\n\nYou can also remove all mocked platforms by supplying `*` as the `target_id`:\n\n```\n$ mbedls --mock=\"-*\"\n```\n\n**NOTE:** Due to a quirk in the parameter formatting, the command-line can interpret `-*` as another parameter instead of a value. It is necessary to use the complete `--mock=\"-*\"` syntax, so the command-line interprets each part of the command correctly.\n\n## Retargeting platforms\n\nIt is possible to change the returned results for certain platforms depending on the current directory. This is especially useful when developing new platforms.\n\nThe command-line tool and Python API check the current directory for a file named `mbedls.json`. When it is present, it overrides the returned values. The format of the `mbedls.json` file is:\n\n```json\n{\n    \"<target_id>\": {\n        \"<key>\": \"<value>\"\n    }\n}\n```\n\nFor example, to change the `serial_port` of the K64F with a `target_id` of `0240000032044e4500257009997b00386781000097969900`, the `mbedls.json` file contains the following:\n\n```json\n{\n    \"0240000032044e4500257009997b00386781000097969900\": {\n        \"serial_port\": \"COM99\"\n    }\n}\n```\n\nThis results in the following output from the command-line tool:\n\n```bash\n$ mbedls\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n| platform_name | platform_name_unique | mount_point | serial_port | target_id                                        | daplink_version |\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n| K64F          | K64F[0]              | D:          | COM99       | 0240000032044e4500257009997b00386781000097969900 | 0244            |\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n```\n\nNote how the `serial_port` value changed from `COM18` to `COM99`. Deleting the `mbedls.json` or using the `--skip-retarget` parameter removes these changes.\n\n# Python API\n\nThe Python API is available through the `mbed_lstools` module.\n\n## `mbed_lstools.create(...)`\n\n```python\n>>> import mbed_lstools\n>>> mbeds = mbed_lstools.create()\n>>> mbeds\n<mbed_lstools.lstools_win7.MbedLsToolsWin7 instance at 0x02F542B0>\n```\n\nThis returns an instance that provides access to the rest of the API.\n\n### Arguments\n\n#### `skip_retarget`\n\n**Default:** `False`\n\nWhen set to `True`, this skips the retargetting step, and the results are unmodified. This enables the same behavior as the `--skip-retarget` command-line flag.\n\n#### `list_unmounted`\n\n**Default:** `False`\n\nWhen set to `True`, this includes unmounted platforms in the results. This enables the same behavior as the `-u` command-line flag.\n\n## `mbeds.list_mbeds(...)`\n\n```python\n>>> import mbed_lstools\n>>> mbeds = mbed_lstools.create()\n>>> mbeds.list_mbeds(fs_interaction=FSInteraction.BeforeFilter,\n                                    filter_function=None,\n                                    unique_names=False,\n                                    read_details_txt=False)\n[{'target_id_mbed_htm': u'0240000032044e4500257009997b00386781000097969900', 'mount_point': 'D:', 'target_id': u'0240000032044e4500257009997b00386781000097969900', 'serial_port': u'COM18', 'target_id_usb_id': u'0240000032044e4500257009997b00386781000097969900', 'platform_name': u'K64F'}]\n```\n\n### Arguments\n\n#### `filter_function`\n\n**Default:** `None`\n\nThis function allows you to filter results based on platform data. This can hasten the execution of the `list_mbeds` function.\n\nAs a normal function definition:\n\n```python\ndef filter_func(mbed):\n    return m['platform_name'] == 'K64F'\n\nmbeds.list_mbeds(filter_function=filter_func)\n```\n\nAs a lambda function:\n\n```python\nplatforms = mbeds.list_mbeds(filter_function=lambda m: m['platform_name'] == 'K64F')\n```\n\n#### `fs_interaction`\n\n**Default:** `FSInteraction.BeforeFilter`\n\nThis argument controls the accuracy and speed of this function. There are three choices (in ascending order of accuracy and decreasing order of speed):\n\n- `FSInteraction.NEVER` - This is the fastest option but also potentially the least accurate. It never touches the file system of the devices. It uses only the information available through the USB descriptors. This is appropriate for use in a highly controlled environment (such as an automated Continuous Integration setup). **This has the potential to provide incorrect names and data. It may also lead to devices not being detected at all.**\n- `FSInterfaction.AfterFilter` - This accesses the file system but only after application of the `filter_function`. This can lead to speed increases but at the risk of filtering on inaccurate information.\n- `FSInteraction.BeforeFilter` - This accesses the file system before doing any filtering. It is the most accurate option and is recommended for most uses. This is the default behavior of the command-line tool and the API.\n\n#### `unique_names`\n\n**Default:** `False`.\n\nMbed LS assigns a unique name to each platform when this is set to `True`. The unique name takes the form of `K64F[0]`, where the number between the brackets is an incrementing value. This name is accessible through the dictionary member `platform_unique_name` in the returned platform data.\n\n#### `read_details_txt`\n\n**Default:** `False`\n\nMbed LS reads more data from the file system on each device when this is set to `True`. It can provide useful management data but also takes more time to execute.\n\n## `mbeds.mock_manufacture_id(...)`\n\n```python\n>>> import mbed_lstools\n>>> mbeds = mbed_lstools.create()\n>>> mbeds.mock_manufacture_id('0240', 'CUSTOM_PLATFORM', oper='+')\n>>> mbeds.list_mbeds()\n[{'target_id': u'0240000032044e4500257009997b00386781000097969900', ... 'platform_name': u'CUSTOM_PLATFORM'}]\n>>> mbeds.mock_manufacture_id('0240', '', oper='-')\n>>> mbeds.list_mbeds()\n[{'target_id': u'0240000032044e4500257009997b00386781000097969900', ... 'platform_name': u'K64F'}]\n```\n\n### Arguments\n\n#### `mid`\n\n**Required**\n\nThe first four characters of the `target_id` that you want to mock.\n\n#### `platform_name`\n\n**Required**\n\nOverrides the `platform_name` for any platform with a `target_id` that starts with `mid`.\n\n#### `oper`\n\n**Default:** `'+'`\n\nIf set to `'+'`, the mocked platform is enabled. If `'-'`, the mocked platform is disabled.\n\n## Logging\n\nMbed LS uses the Python `logging` module for all of its logging needs. Mbed LS uses the logger `\"mbedls\"` as its root, and all other loggers start with `\"mbedls.\"`. Configuring the Python root logger automatically redirects all of the Mbed LS logs to the configured endpoint. When using the Python API, configure logging, such as by calling `logging.basicConfig()`. \n\n# Testing\n\nThe `/test` directory contains all tests. You can run the tests with the following command:\n\n```\n$ python setup.py test\n```\n\n## Code coverage\n\nThe `coverage` Python package measures code coverage. You can install it with following command:\n\n```\n$ pip install coverage --upgrade\n```\n\nTo run the tests while measuring code coverage, use the following command:\n\n```\n$ coverage run setup.py test\n```\n\nYou can then generate a report:\n\n```\n$ coverage report\nName                                Stmts   Miss  Cover\n-------------------------------------------------------\nmbed_lstools\\__init__.py                2      0   100%\nmbed_lstools\\darwin.py                 85      7    92%\nmbed_lstools\\linux.py                  45      3    93%\nmbed_lstools\\lstools_base.py          299    124    59%\nmbed_lstools\\main.py                  134     44    67%\nmbed_lstools\\platform_database.py     114      4    96%\nmbed_lstools\\windows.py                98     21    79%\n-------------------------------------------------------\nTOTAL                                 777    203    74%\n```\n\n# OS-specific behavior\n\n## Windows\n\nThe Mbed serial port works by default on Mac and Linux, but Windows needs a driver. Check [here](https://os.mbed.com/docs/latest/tutorials/windows-serial-driver.html) for more details.\n\n## Linux\n\nMbed LS requires you to mount a platform before it shows up in the results. Many Linux systems do not automatically mount USB devices. We recommend you use an automounter to manage this for you.\n\nThere are many automounters available, and it is ultimately up to you to determine which is the best one for your use case. However, the `usbmount` package on Ubuntu makes it easy to start. If you need more control over your automounter, you can build and run an open source project called [ldm](https://github.com/LemonBoy/ldm).\n\n# Mbed Enabled technical requirements overview\n\nThis tool relies on board interfaces conforming to certain standards, so it can detect platforms properly. The [Mbed Enabled](https://www.mbed.com/en/about-mbed/mbed-enabled/) program sets these standards. Please see the [Technical Requirements](https://www.mbed.com/en/about-mbed/mbed-enabled/mbed-enabled-program-requirements/) for more information.\n\n## Device unique identifier\n\nEach device must have a unique identifier. This identifier has two parts: a **platform ID** and a **platform unique string**.\n\nThe **platform ID** contains four ASCII characters containing only hexadecimal values (A-F and 0-9). This platform ID is the same for all platforms of the same type. For example, all `K64F` platforms have a platform ID of `0240`. `mbedls` uses this to identify the platform.\n\nThe **platform unique string** can be any length of characters (a-z, A-Z and 0-9) that you can use to uniquely identify platforms of the same type on the same machine. For example, two FRDM-K64F platforms attached to the same machine could have the following attributes:\n\n```\n$ mbedls\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n| platform_name | platform_name_unique | mount_point | serial_port | target_id                                        | daplink_version |\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n| K64F          | K64F[0]              | D:          | COM18       | 0240000032044e4500257009997b00386781000097969900 | 0244            |\n| K64F          | K64F[1]              | E:          | COM19       | 0240000032044e4500257009997b00386781000097840023 | 0244            |\n+---------------+----------------------+-------------+-------------+--------------------------------------------------+-----------------+\n```\n\nNote how both platforms share the same platform ID (`0240`) but have a unique ending string.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ARMmbed/mbed-ls",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "Przemyslaw Wirkus, Johan Seferidis, James Crosby",
    "maintainer_email": "Przemyslaw.Wirkus@arm.com, Johan.Seferidis@arm.com, James.Crosby@arm.com",
    "name": "mbed-ls",
    "package_url": "https://pypi.org/project/mbed-ls/",
    "platform": "",
    "project_url": "https://pypi.org/project/mbed-ls/",
    "project_urls": {
      "Homepage": "https://github.com/ARMmbed/mbed-ls"
    },
    "release_url": "https://pypi.org/project/mbed-ls/1.4.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "mbed-ls is a Python module that detects and lists mbed-enabled devices connected to the host computer",
    "version": "1.4.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16560431,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20a5bffd308b337b38270e0b3c856c2090178d3fa8e2892ab36180d43db814a5",
        "md5": "5baa736c17501e7f98be31edbcb2cd20",
        "sha256": "252c24c6a039d5c68656f9b12c0e62fb09d541cf851450019bec153118832c90"
      },
      "downloads": -1,
      "filename": "mbed-ls-1.4.5.tar.gz",
      "has_sig": false,
      "md5_digest": "5baa736c17501e7f98be31edbcb2cd20",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 48910,
      "upload_time": "2018-05-31T17:33:20",
      "upload_time_iso_8601": "2018-05-31T17:33:20.600447Z",
      "url": "https://files.pythonhosted.org/packages/20/a5/bffd308b337b38270e0b3c856c2090178d3fa8e2892ab36180d43db814a5/mbed-ls-1.4.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}