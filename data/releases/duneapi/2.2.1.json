{
  "info": {
    "author": "Benjamin H. Smith",
    "author_email": "bh2smith@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Dune Analytics API\n\n[![Python 3.9](https://img.shields.io/badge/python-3.10-blue.svg)](https://www.python.org/downloads/release/python-3102/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Build](https://github.com/bh2smith/duneapi/actions/workflows/pull-request.yaml/badge.svg)](https://github.com/bh2smith/duneapi/actions/workflows/pull-request.yml)\n\nA simple framework for interacting with Dune Analytics' unsupported API. The primary\nclass (`DuneAPI`) of this repo is adapted from\nhttps://github.com/itzmestar/duneanalytics at commit\nbdccd5ba543a8f3679e2c81e18cee846af47bc52\n\n## Import as Project Dependency\n\n```shell\npip install src\n```\n\nThen you should be able to write python scripts similar to the following:\n\n### Example Usage\n\nFill out your Dune credentials in the `.env` file. The Dune user and password are\nstraight-forward login credentials to Dune Analytics. The `DUNE_QUERY_ID` is an integer\nid found in the URL of a query when saved in the Dune interface. This should be created\nbeforehand, but the same query id can be used everywhere throughout the program (as long\nas it is owned by the account corresponding to the user credentials provided).\n\nYou do not have to provide the query id as an environment variable, but doing so, will\nallow you to use the same id for all fetching needs. For dashboard management, you will\nneed to have a unique id for each query.\n\n#### Execute Query and Fetch Results from Dune\n\n```python\nfrom duneapi.api import DuneAPI\nfrom duneapi.query import DuneQuery\nfrom duneapi.types import Network, QueryParameter, DuneRecord\nfrom duneapi.util import open_query\n\n\ndef fetch_records(dune: DuneAPI) -> list[DuneRecord]:\n    sample_query = DuneQuery.from_environment(\n        raw_sql=open_query(\"PATH_TO_SOME_SQL_FILE\"),\n        name=\"Sample Query\",\n        network=Network.MAINNET,\n        parameters=[\n            QueryParameter.number_type(\"IntParam\", 10),\n            QueryParameter.text_type(\"TextParam\", \"aba\"),\n        ],\n    )\n    return dune.fetch(sample_query)\n\n\nif __name__ == \"__main__\":\n    dune_connection = DuneAPI.new_from_environment()\n    records = fetch_records(dune_connection)\n    print(\"First result:\", records[0])\n```\n\n#### Dashboard Management\n\nIt will help to get aquainted with the Dashboard configuration file found in\n[./example/dashboard/my_dashboard.json](./example/dashboard/my_dashboard.json). This\nessentially requires filepath and query id to existing dune queries. Generally it is\nexpected that you will use the family of queries contained in an existing dashboard, but\nthere is no actual validation. Technically one could put all queries here and refresh\nthem with this tool.\n\n```python\nfrom duneapi.dashboard import DuneDashboard\n\ndashboard = DuneDashboard(\"./example/dashboard/my_dashboard.json\")\ndashboard.update()\nprint(\"Updated\", dashboard)\n```\n\nTo fetch some sample ethereum block data, run the sample script as:\n\n```shell\nsource .env\npython -m example.sample_fetch\n```\n\nThis will result in the following console logs:\n\n```\ngot 10 records from last query\nFirst record Record(\n    string='0x255309e019abaf74bf2d58d4020547c89f875842abae1c874fb0d5ae8eac9859', \n    integer=14362177, \n    decimal=0.14785533, \n    time='2022-03-10T23:50:16+00:00'\n)\n```\n\nTo fetch your own data follow the code outline\nin [sample_fetch.py](example/sample_fetch.py)\n\n## Contributing and Local Development\n\nClone this Repo and install as follows.\n\n```shell\npython3 -m venv venv\nsource ./env/bin/activate\npip install -r requirements.txt\ncp .env.sample .env       <----- Copy your Dune credentials here!\nsource .env\n```\n\n## Deployment\n\n1. Bump the version number in [setup.py](setup.py)\n2. Build the duneapi package `python -m build`\n3. Upload to pypi `twine upload dist/* `\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bh2smith/duneapi",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "duneapi",
    "package_url": "https://pypi.org/project/duneapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/duneapi/",
    "project_urls": {
      "Bug Tracker": "https://github.com/bh2smith/duneapi/issues",
      "Homepage": "https://github.com/bh2smith/duneapi"
    },
    "release_url": "https://pypi.org/project/duneapi/2.2.1/",
    "requires_dist": [
      "requests (>=2.27.1)",
      "types-requests (>=2.27.13)"
    ],
    "requires_python": ">=3.10",
    "summary": "A simple framework for interacting with Dune Analytics' unsupported API.",
    "version": "2.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15900277,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a0516f7e8b0bd5eda4ab8f1dd6f150f9b288e0ea5457d6a687e718a5bf48e9e",
        "md5": "2ab78ee6128226ffb3574e4f182befff",
        "sha256": "2f181c2eb6aa126af80df808a299f8596ed1516f8aaf5c0fe50265a6a3c0f7da"
      },
      "downloads": -1,
      "filename": "duneapi-2.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ab78ee6128226ffb3574e4f182befff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 16969,
      "upload_time": "2022-03-28T13:35:17",
      "upload_time_iso_8601": "2022-03-28T13:35:17.458988Z",
      "url": "https://files.pythonhosted.org/packages/5a/05/16f7e8b0bd5eda4ab8f1dd6f150f9b288e0ea5457d6a687e718a5bf48e9e/duneapi-2.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64e64f1c27955a8740a0db88d60863c15ebc1f8499f8cf259a1e56a949eb1a12",
        "md5": "25bc7f9625026a736821ed2c471e9e5e",
        "sha256": "419679a30f5423a42418ee33e1d5ab14097a803e9ff93511ca77ae9b454bb00b"
      },
      "downloads": -1,
      "filename": "duneapi-2.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "25bc7f9625026a736821ed2c471e9e5e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 16927,
      "upload_time": "2022-03-28T13:35:19",
      "upload_time_iso_8601": "2022-03-28T13:35:19.643323Z",
      "url": "https://files.pythonhosted.org/packages/64/e6/4f1c27955a8740a0db88d60863c15ebc1f8499f8cf259a1e56a949eb1a12/duneapi-2.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}