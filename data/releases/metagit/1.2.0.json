{
  "info": {
    "author": "David Tucker",
    "author_email": "david@tucker.name",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# Metagit\n\nGit for Git Repositories\n\n******\n\nIf you:\n- have a directory full of Git repos\n- want to version-control the configuration of those repos\n- like Git\n\nThen you might find Metagit useful. It offers a Git-like experience for managing Git repos.\n\n## Demo\n\nInitialize a Metagit repository:\n```\n$ cd ~/projects/    # or wherever you store your Git projects, or use metagit -C\n$ metagit init      # creates .metagit, a Git repo where tracked project configs are kept\nInitialized Metagit repository in /home/dmtucker/projects\n$ metagit status\nUntracked projects\n  (use \"metagit add <project>...\" to begin tracking)\n\tproject1/\n\tproject2/\n\n```\nTrack changes to project config:\n```\n$ metagit add project1/ project2/    # start tracking some projects\n$ git -C project1/ remote add foo git@somehost.com:foo/project1.git\n$ rm -rf project2/\n$ metagit status\nChanges\n  (use \"metagit add/rm <project>...\" to accept changes)\n  (use \"metagit restore <project>...\" to undo changes)\n\tmodified: project1\n\tdeleted:  project2\n\n```\nGit tracks lines in files. Metagit tracks config in projects.\n``` diff\n$ metagit diff\ndiff --git a/project1 b/project1\nindex 515f483..93a874c 100644\n--- a/project1\n+++ b/project1\n@@ -3,3 +3,6 @@\n \tfilemode = true\n \tbare = false\n \tlogallrefupdates = true\n+[remote \"foo\"]\n+\turl = git@somehost.com:foo/project1.git\n+\tfetch = +refs/heads/*:refs/remotes/foo/*\ndiff --git a/project2 b/project2\ndeleted file mode 100644\nindex 515f483..0000000\n--- a/project2\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-[core]\n-\trepositoryformatversion = 0\n-\tfilemode = true\n-\tbare = false\n-\tlogallrefupdates = true\n```\nThis example deleted `project2` so as to demonstrate `metagit restore` (below), but keep in mind, *ONLY CONFIGURATION IS TRACKED*.\nIf you need all of `project2` back, you should restore from a backup.\n``` sh \n$ metagit restore project2  # only restores git config! not branches/tags/etc.\n$ metagit add project1      # add the project again to keep the changes\n$ metagit rm project1       # stop tracking a project (does not affect the actual project)\n```\n\n## About `.metagit`\n\n`.metagit` is just another Git repo in your projects folder. It is created by `metagit init`, which automatically starts tracking it.\nWhen `metagit add` is used to start tracking a project, that project's `.git/config` file is copied into `.metagit` and committed.\n```\n$ git -C .metagit log\n36cec91 (HEAD -> master) Remove project1\na1ed312 Add project1\n185ed15 Add project2\ne4d274d Add project1\n1e16b5e Add .metagit\n```\nPro tip: Consider a clone of the `.metagit` repo a (Metagit) \"clone\" of your projects folder.\nFor example, push the `.metagit` repo to GitHub to allow for easy provisioning of new dev machines:\n``` sh\n$ mkdir ~/projects\n$ cd ~/projects/\n$ git clone git@github.com:dmtucker/.metagit.git\n...\n$ metagit restore project2\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dmtucker/metagit",
    "keywords": "",
    "license": "LGPLv2+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metagit",
    "package_url": "https://pypi.org/project/metagit/",
    "platform": null,
    "project_url": "https://pypi.org/project/metagit/",
    "project_urls": {
      "Homepage": "https://github.com/dmtucker/metagit"
    },
    "release_url": "https://pypi.org/project/metagit/1.2.0/",
    "requires_dist": [
      "attrs (>=20.3)",
      "click (>=7.1)",
      "gitpython (>=3.1)",
      "setuptools (>=49.6)"
    ],
    "requires_python": ">= 3.6",
    "summary": "A Git Project Manager",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14989652,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9e36c13ec4d44e71490b07c73ae1b08a6218a34db6307eb2d9f9d45f9e494ef",
        "md5": "612fcd450319956d9bc1d20b88140b2c",
        "sha256": "430a5ef50048a37e366924021e12a4bfd503b9ec90c756ad462637fa79148a64"
      },
      "downloads": -1,
      "filename": "metagit-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "612fcd450319956d9bc1d20b88140b2c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">= 3.6",
      "size": 16456,
      "upload_time": "2022-04-08T16:09:51",
      "upload_time_iso_8601": "2022-04-08T16:09:51.310054Z",
      "url": "https://files.pythonhosted.org/packages/b9/e3/6c13ec4d44e71490b07c73ae1b08a6218a34db6307eb2d9f9d45f9e494ef/metagit-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0aac04a4691455c248f2a0cf38ad1cb9a074e46095cdd5ebac85e67f120a65a7",
        "md5": "0a82ea9350645b7ce0a4444f5b75feeb",
        "sha256": "0a1e65dc09d06572ff80196f60cf937a94c664724ab0d589158ea1e264b53dbe"
      },
      "downloads": -1,
      "filename": "metagit-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0a82ea9350645b7ce0a4444f5b75feeb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.6",
      "size": 25092,
      "upload_time": "2022-04-08T16:09:52",
      "upload_time_iso_8601": "2022-04-08T16:09:52.261905Z",
      "url": "https://files.pythonhosted.org/packages/0a/ac/04a4691455c248f2a0cf38ad1cb9a074e46095cdd5ebac85e67f120a65a7/metagit-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}