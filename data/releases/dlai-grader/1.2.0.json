{
  "info": {
    "author": "Andres Zarta",
    "author_email": "andrezb5@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# grader\nAutomatic grading for DLAI courses. Designed to be compatible with Coursera's grading requirements.\n\n# Installation\n\nYou use pip to install it!\n```bash\npip install dlai_grader\n```\n\n\n# How to use it\n\n## Initialize a grader\n\nTo start building your grader `cd` into the directory where you will be working and use the following command:\n\n```bash\ndlai_grader --init\n```\n\nThis will ask you for:\n- Name of the course (abbreviation is recommended)\n- Number of the course\n- Number of the week\n- Version of the grader (defaults to 1 but can be 2 or any other number)\n\nThis will generate a file system tree like this:\n\n```\n.\n└── grader (directory you invoked the command from)\n    ├── data/               -> To store datasets (csv, TF Datasets, etc).\n    ├── learner/            -> The learner facing version will be generated here.\n    ├── solution/           -> Place solution.ipynb here\n    ├── submission/         -> Necessary only in debug mode (no need to place anything here).\n    ├── mount/              -> This mocks the bind mount that coursera will attach to the container. Should contain submission.ipynb or other file required for grading.\n    ├── .conf               -> Configuration variables.\n    ├── Dockerfile          -> Uses frolvlad/alpine-miniconda3:python3.7 as base image.\n    ├── Makefile            -> Useful commands.\n    ├── requirements.txt    -> Python dependencies.\n    ├── entry.py            -> Entrypoint of the grader.\n    └── grader.py           -> Grading logic.\n```\n\n## Placing the solution and submission\n\nNow that you have the layout of the grader you will need to place the solution of the assignment within the `solution/` directory. **This file must be named `solution.ipynb`**.\n\nA good starting point is to use the solution to create the first iteration of the grader. To do this place the solution within the `mount/` directory and **rename it to `submission.ipynb`**. You can use the `make submit-solution` command to do this.\n\nYour filesystem tree should look like this:\n\n```\n.\n└── grader\n    ├── ... \n    ├── solution/\n    │    └── solution.ipynb\n    ├── mount/ \n    │    └── submission.ipynb\n    └── ...\n```\n\nNote that the grader can be used to grade files other than Jupyter notebooks. If this is the case you can leave the `solution/` directory empty and place the file to grade within `mount/`. This file can be anything (`.h5, .tar.gz, .zip, etc`) the only requirement is that it should match the name of the file to submit in the coursera programming item.\n\n# Add versioning to the notebook\n\n## Why is this useful?\n\nWe have seen many learners facing issues when submitting their assignments because coursera does not show them the latest version. To address this, a good alternative it to always check that the submission of the learner is up to date and if not, tell them how they can upgrade to the latest version.\n\nTo ensure that a submission is compatible with a particular version of the grader the versioning feature has been created.\n\nWithin the `.conf` file you will find the current version of the grader under the variable `GRADER_VERSION`.\n\nTo compare against this version the submission notebook must include a variable called `grader_version` in its metadata. To add this variable to the `submission.ipynb` file you can use the `make versioning` command (this is just a wrapper of the `dlai_grader --versioning` command). This will add the variable matching the same version as the one found in the `.conf` file.\n\n\n## Upgrading the grader and notebook version\n\nAfter a refactor with breaking changes to the grader it is a good idea to upgrade the version to a newer one. You can do this be using the `make upgrade` command. This will add 1 to the current version in the `.conf` file and in the notebook.\n\n# Tagging graded cells\n\nYou might decide to filter out cells created by learners (or other ones such as the ones that train models). If you take this approach you can add a tag to each cell's metadata and then filter out the ones that don't have this tag .\n\nIf you wish to add the `graded` tag to each cell in the `submission.ipynb` notebook you can use the `make tag` command. \n\n# Important note for make commands\n\nNote that the `make tag`, `make upgrade` and `make versioning` commands change only the `mount/submission.ipynb` file. \n\n\n# Adding Python dependencies\n\nThe next step is to include all the necessary Python dependencies. For this add them to the `requirements.txt` file. By default only `dlai_grader` is included.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/https-deeplearning-ai/grader",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dlai-grader",
    "package_url": "https://pypi.org/project/dlai-grader/",
    "platform": null,
    "project_url": "https://pypi.org/project/dlai-grader/",
    "project_urls": {
      "Homepage": "https://github.com/https-deeplearning-ai/grader"
    },
    "release_url": "https://pypi.org/project/dlai-grader/1.2.0/",
    "requires_dist": [
      "nbformat (>=5.1.3)",
      "jupytext (>=1.13.0)"
    ],
    "requires_python": "",
    "summary": "Grading utilities for DLAI courses",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16736946,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b244ba9f59e2f2316d0e8ad5f4004522b05a9ef73099bb5116328405882c681",
        "md5": "0a75dee72a629ab591204ef8b49ea78b",
        "sha256": "f19592fd795e5d1efacde924c6db6ad6436981284653e5618bbeb642e74bca86"
      },
      "downloads": -1,
      "filename": "dlai_grader-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a75dee72a629ab591204ef8b49ea78b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14880,
      "upload_time": "2022-06-09T16:33:29",
      "upload_time_iso_8601": "2022-06-09T16:33:29.301033Z",
      "url": "https://files.pythonhosted.org/packages/7b/24/4ba9f59e2f2316d0e8ad5f4004522b05a9ef73099bb5116328405882c681/dlai_grader-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca701aa652514078f9e748b3091064590d24abc919d1e74b6fe5a426c61a7476",
        "md5": "dee5691428d9fb37db648ae5c138ce4d",
        "sha256": "6e2c07dde916a85f4c24cb05234bf00c980c62e4814a4fe9f7fa928f29f22e06"
      },
      "downloads": -1,
      "filename": "dlai-grader-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dee5691428d9fb37db648ae5c138ce4d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13531,
      "upload_time": "2022-06-09T16:33:32",
      "upload_time_iso_8601": "2022-06-09T16:33:32.019989Z",
      "url": "https://files.pythonhosted.org/packages/ca/70/1aa652514078f9e748b3091064590d24abc919d1e74b6fe5a426c61a7476/dlai-grader-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}