{
  "info": {
    "author": "Dmitry Petrov",
    "author_email": "dmitry@dvc.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "|Banner|\n\n`Website <https://dvc.org>`_\n• `Docs <https://dvc.org/doc>`_\n• `Blog <http://blog.dataversioncontrol.com>`_\n• `Tutorial <https://dvc.org/doc/get-started>`_\n• `How DVC works`_\n• `VS Code Extension`_\n• `Installation`_\n• `Related Technologies`_\n• `Contributing`_\n• `Community and Support`_\n\n|CI| |Maintainability| |Coverage| |VS Code| |DOI|\n\n|PyPI| |Packages| |Brew| |Conda| |Choco| |Snap|\n\n|\n\n**Data Version Control** or **DVC** is a command line tool and `VS Code Extension`_ to help you develop reproducible machine learning projects:\n\n#. **Version** your data and models.\n   Store them in your cloud storage but keep their version info in your Git repo.\n\n#. **Iterate** fast with lightweight pipelines.\n   When you make changes, only run the steps impacted by those changes.\n\n#. **Track** experiments in your local Git repo (no servers needed).\n\n#. **Compare** any data, code, parameters, model, or performance plots\n\n#. **Share** experiments and automatically reproduce anyone's experiment.\n\nQuick start\n===========\n\n    Please read our `Command Reference <https://dvc.org/doc/command-reference>`_ for a complete list.\n\nA common CLI workflow includes:\n\n+-----------------------------------+----------------------------------------------------------------------------+\n| Task                              | Terminal                                                                   |\n+===================================+============================================================================+\n| Track data                        | | ``$ git add train.py``                                                   |\n|                                   | | ``$ dvc add images.zip``                                                 |\n+-----------------------------------+----------------------------------------------------------------------------+\n| Connect code and data             | | ``$ dvc run -n prepare -d images.zip -o images/ unzip -q images.zip``    |\n|                                   | | ``$ dvc run -n train -d images/ -d train.py -o model.p python train.py`` |\n+-----------------------------------+----------------------------------------------------------------------------+\n| Make changes and reproduce        | | ``$ vi train.py``                                                        |\n|                                   | | ``$ dvc repro model.p.dvc``                                              |\n+-----------------------------------+----------------------------------------------------------------------------+\n| Share code                        | | ``$ git add .``                                                          |\n|                                   | | ``$ git commit -m 'The baseline model'``                                 |\n|                                   | | ``$ git push``                                                           |\n+-----------------------------------+----------------------------------------------------------------------------+\n| Share data and ML models          | | ``$ dvc remote add myremote -d s3://mybucket/image_cnn``                 |\n|                                   | | ``$ dvc push``                                                           |\n+-----------------------------------+----------------------------------------------------------------------------+\n\nHow DVC works\n=============\n\n    We encourage you to read our `Get Started\n    <https://dvc.org/doc/get-started>`_ docs to better understand what DVC\n    does and how it can fit your scenarios.\n\nThe closest *analogies* to describe the main DVC features are these:\n\n#. **Git for data**: Store and share data artifacts (like Git-LFS but without a server) and models, connecting them with a Git repository. Data management meets GitOps!\n#. **Makefiles** for ML: Describes how data or model artifacts are built from other data and code in a standard format. Now you can version your data pipelines with Git.\n#. Local **experiment tracking**: Turn your machine into an ML experiment management platform, and collaborate with others using existing Git hosting (Github, Gitlab, etc.).\n\nGit is employed as usual to store and version code (including DVC meta-files as placeholders for data).\nDVC `stores data and model files <https://dvc.org/doc/start/data-management>`_ seamlessly in a cache outside of Git, while preserving almost the same user experience as if they were in the repo.\nTo share and back up the *data cache*, DVC supports multiple remote storage platforms - any cloud (S3, Azure, Google Cloud, etc.) or on-premise network storage (via SSH, for example).\n\n|Flowchart|\n\n`DVC pipelines <https://dvc.org/doc/start/data-management/pipelines>`_ (computational graphs) connect code and data together.\nThey specify all steps required to produce a model: input dependencies including code, data, commands to run; and output information to be saved.\n\nLast but not least, `DVC Experiment Versioning <https://dvc.org/doc/start/experiments>`_ lets you prepare and run a large number of experiments.\nTheir results can be filtered and compared based on hyperparameters and metrics, and visualized with multiple plots.\n\n.. _`VS Code Extension`:\n\nVisual Studio Code Extension\n============================\n\n|VS Code|\n\nTo use DVC as a GUI right from your VS Code IDE, install the `DVC Extension <https://marketplace.visualstudio.com/items?itemName=Iterative.dvc>`_ from the Marketplace.\nIt currently features experiment tracking and data management, and more features (data pipeline support, etc.) are coming soon!\n\n|VS Code Extension Overview|\n\n    Note: You'll have to install core DVC on your system separately (as detailed\n    below). The Extension will guide you if needed.\n\nInstallation\n============\n\nThere are several ways to install DVC: in VS Code; using ``snap``, ``choco``, ``brew``, ``conda``, ``pip``; or with an OS-specific package.\nFull instructions are `available here <https://dvc.org/doc/get-started/install>`_.\n\nSnapcraft (Linux)\n-----------------\n\n|Snap|\n\n.. code-block:: bash\n\n   snap install dvc --classic\n\nThis corresponds to the latest tagged release.\nAdd ``--beta`` for the latest tagged release candidate, or ``--edge`` for the latest ``main`` version.\n\nChocolatey (Windows)\n--------------------\n\n|Choco|\n\n.. code-block:: bash\n\n   choco install dvc\n\nBrew (mac OS)\n-------------\n\n|Brew|\n\n.. code-block:: bash\n\n   brew install dvc\n\nAnaconda (Any platform)\n-----------------------\n\n|Conda|\n\n.. code-block:: bash\n\n   conda install -c conda-forge mamba # installs much faster than conda\n   mamba install -c conda-forge dvc\n\nDepending on the remote storage type you plan to use to keep and share your data, you might need to install optional dependencies: `dvc-s3`, `dvc-azure`, `dvc-gdrive`, `dvc-gs`, `dvc-oss`, `dvc-ssh`.\n\nPyPI (Python)\n-------------\n\n|PyPI|\n\n.. code-block:: bash\n\n   pip install dvc\n\nDepending on the remote storage type you plan to use to keep and share your data, you might need to specify one of the optional dependencies: ``s3``, ``gs``, ``azure``, ``oss``, ``ssh``. Or ``all`` to include them all.\nThe command should look like this: ``pip install 'dvc[s3]'`` (in this case AWS S3 dependencies such as ``boto3`` will be installed automatically).\n\nTo install the development version, run:\n\n.. code-block:: bash\n\n   pip install git+git://github.com/iterative/dvc\n\nPackage (Platform-specific)\n---------------------------\n\n|Packages|\n\nSelf-contained packages for Linux, Windows, and Mac are available.\nThe latest version of the packages can be found on the GitHub `releases page <https://github.com/iterative/dvc/releases>`_.\n\nUbuntu / Debian (deb)\n^^^^^^^^^^^^^^^^^^^^^\n.. code-block:: bash\n\n   sudo wget https://dvc.org/deb/dvc.list -O /etc/apt/sources.list.d/dvc.list\n   wget -qO - https://dvc.org/deb/iterative.asc | sudo apt-key add -\n   sudo apt update\n   sudo apt install dvc\n\nFedora / CentOS (rpm)\n^^^^^^^^^^^^^^^^^^^^^\n.. code-block:: bash\n\n   sudo wget https://dvc.org/rpm/dvc.repo -O /etc/yum.repos.d/dvc.repo\n   sudo rpm --import https://dvc.org/rpm/iterative.asc\n   sudo yum update\n   sudo yum install dvc\n\n.. _`Related Technologies`:\n\nComparison to related technologies\n==================================\n\n#. Data Engineering tools such as `AirFlow <https://airflow.apache.org/>`_, `Luigi <https://github.com/spotify/luigi>`_, and others - in DVC data, model and ML pipelines represent a single ML project focused on data scientists' experience.\n   Data engineering tools orchestrate multiple data projects and focus on efficient execution.\n   A DVC project can be used from existing data pipelines as a single execution step.\n\n#. `Git-annex <https://git-annex.branchable.com/>`_:\n   DVC uses the idea of storing the content of large files (which should not be in a Git repository) in a local key-value store, and uses file hardlinks/symlinks instead of copying/duplicating files.\n\n#. `Git-LFS <https://git-lfs.github.com/>`_: DVC is compatible with many remote storage services (S3, Google Cloud, Azure, SSH, etc).\n   DVC also uses reflinks or hardlinks to avoid copy operations on checkouts; thus handling large data\n   files much more efficiently.\n\n#. Makefile (and analogues including ad-hoc scripts):\n   DVC tracks dependencies (in a directed acyclic graph).\n\n#. `Workflow Management Systems <https://en.wikipedia.org/wiki/Workflow_management_system>`_:\n   DVC is a workflow management system designed specifically to manage machine learning experiments.\n   DVC is built on top of Git.\n\n#. `DAGsHub <https://dagshub.com/>`_: Online service to host DVC projects.\n   It provides a useful UI around DVC repositories and integrates other tools.\n\n#. `Iterative Studio <https://studio.iterative.ai/>`_: Official web platform for DVC projects.\n   It can be used to manage data and models, run and track experiments, and visualize and share results.\n   Also, it integrates with `CML (CI/CD for ML) <https://cml.dev/>`__ for training models in the cloud or Kubernetes, and with `MLEM <https://mlem.ai/>` for model deployment.\n\n\nContributing\n============\n\n|Maintainability|\n\nContributions are welcome!\nPlease see our `Contributing Guide <https://dvc.org/doc/user-guide/contributing/core>`_ for more details.\nThanks to all our contributors!\n\n|Contribs|\n\nCommunity and Support\n=====================\n\n* `Twitter <https://twitter.com/DVCorg>`_\n* `Forum <https://discuss.dvc.org/>`_\n* `Discord Chat <https://dvc.org/chat>`_\n* `Email <mailto:support@dvc.org>`_\n* `Mailing List <https://sweedom.us10.list-manage.com/subscribe/post?u=a08bf93caae4063c4e6a351f6&id=24c0ecc49a>`_\n\nCopyright\n=========\n\nThis project is distributed under the Apache license version 2.0 (see the LICENSE file in the project root).\n\nBy submitting a pull request to this project, you agree to license your contribution under the Apache license version 2.0 to this project.\n\nCitation\n========\n\n|DOI|\n\nIterative, *DVC: Data Version Control - Git for Data & Models* (2020)\n`DOI:10.5281/zenodo.012345 <https://doi.org/10.5281/zenodo.3677553>`_.\n\nBarrak, A., Eghan, E.E. and Adams, B. `On the Co-evolution of ML Pipelines and Source Code - Empirical Study of DVC Projects <https://mcis.cs.queensu.ca/publications/2021/saner.pdf>`_ , in Proceedings of the 28th IEEE International Conference on Software Analysis, Evolution, and Reengineering, SANER 2021. Hawaii, USA.\n\n\n.. |Banner| image:: https://dvc.org/img/logo-github-readme.png\n   :target: https://dvc.org\n   :alt: DVC logo\n\n.. |VS Code Extension Overview| image:: https://raw.githubusercontent.com/iterative/vscode-dvc/main/extension/docs/overview.gif\n   :alt: DVC Extension for VS Code\n\n.. |CI| image:: https://github.com/iterative/dvc/workflows/Tests/badge.svg?branch=main\n   :target: https://github.com/iterative/dvc/actions\n   :alt: GHA Tests\n\n.. |Maintainability| image:: https://codeclimate.com/github/iterative/dvc/badges/gpa.svg\n   :target: https://codeclimate.com/github/iterative/dvc\n   :alt: Code Climate\n\n.. |Coverage| image:: https://codecov.io/gh/iterative/dvc/branch/main/graph/badge.svg\n   :target: https://codecov.io/gh/iterative/dvc\n   :alt: Codecov\n\n.. |Snap| image:: https://img.shields.io/badge/snap-install-82BEA0.svg?logo=snapcraft\n   :target: https://snapcraft.io/dvc\n   :alt: Snapcraft\n\n.. |Choco| image:: https://img.shields.io/chocolatey/v/dvc?label=choco\n   :target: https://chocolatey.org/packages/dvc\n   :alt: Chocolatey\n\n.. |Brew| image:: https://img.shields.io/homebrew/v/dvc?label=brew\n   :target: https://formulae.brew.sh/formula/dvc\n   :alt: Homebrew\n\n.. |Conda| image:: https://img.shields.io/conda/v/conda-forge/dvc.svg?label=conda&logo=conda-forge\n   :target: https://anaconda.org/conda-forge/dvc\n   :alt: Conda-forge\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/dvc.svg?label=pip&logo=PyPI&logoColor=white\n   :target: https://pypi.org/project/dvc\n   :alt: PyPI\n\n.. |Packages| image:: https://img.shields.io/github/v/release/iterative/dvc?label=deb|pkg|rpm|exe&logo=GitHub\n   :target: https://github.com/iterative/dvc/releases/latest\n   :alt: deb|pkg|rpm|exe\n\n.. |DOI| image:: https://img.shields.io/badge/DOI-10.5281/zenodo.3677553-blue.svg\n   :target: https://doi.org/10.5281/zenodo.3677553\n   :alt: DOI\n\n.. |Flowchart| image:: https://dvc.org/img/flow.gif\n   :target: https://dvc.org/img/flow.gif\n   :alt: how_dvc_works\n\n.. |Contribs| image:: https://contrib.rocks/image?repo=iterative/dvc\n   :target: https://github.com/iterative/dvc/graphs/contributors\n   :alt: Contributors\n\n.. |VS Code| image:: https://vsmarketplacebadge.apphb.com/version/Iterative.dvc.svg\n   :target: https://marketplace.visualstudio.com/items?itemName=Iterative.dvc\n   :alt: VS Code Extension\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/iterative/dvc",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://dvc.org",
    "keywords": "data-science, data-version-control, machine-learning, git,developer-tools, reproducibility, collaboration, ai",
    "license": "Apache License 2.0",
    "maintainer": "Iterative",
    "maintainer_email": "support@dvc.org",
    "name": "dvc",
    "package_url": "https://pypi.org/project/dvc/",
    "platform": null,
    "project_url": "https://pypi.org/project/dvc/",
    "project_urls": {
      "Documentation": "https://dvc.org/doc",
      "Download": "https://github.com/iterative/dvc",
      "Homepage": "http://dvc.org",
      "Source": "https://github.com/iterative/dvc"
    },
    "release_url": "https://pypi.org/project/dvc/2.15.0/",
    "requires_dist": [
      "colorama (>=0.3.9)",
      "configobj (>=5.0.6)",
      "voluptuous (>=0.11.7)",
      "requests (>=2.22.0)",
      "grandalf (==0.6)",
      "distro (>=1.3.0)",
      "appdirs (>=1.4.3)",
      "ruamel.yaml (>=0.17.11)",
      "toml (>=0.10.1)",
      "funcy (>=1.14)",
      "pathspec (<0.10.0,>=0.9.0)",
      "shortuuid (>=0.5.0)",
      "tqdm (<5,>=4.63.1)",
      "packaging (>=19.0)",
      "zc.lockfile (>=1.2.1)",
      "flufl.lock (>=5)",
      "networkx (>=2.5)",
      "psutil (>=5.8.0)",
      "pydot (>=1.2.4)",
      "flatten-dict (<1,>=0.4.1)",
      "tabulate (>=0.8.7)",
      "pygtrie (>=2.3.2)",
      "dpath (<3,>=2.0.2)",
      "shtab (<2,>=1.3.4)",
      "rich (>=10.13.0)",
      "python-benedict (>=0.24.2)",
      "pyparsing (>=2.4.7)",
      "typing-extensions (>=3.7.4)",
      "fsspec[http] (>=2021.10.1)",
      "aiohttp-retry (>=2.4.5)",
      "scmrepo (==0.0.25)",
      "dvc-render (==0.0.6)",
      "dvc-task (==0.1.0)",
      "dvclive (>=0.7.3)",
      "dvc-data (==0.1.5)",
      "importlib-resources (>=5.2.2) ; python_version < \"3.9\"",
      "adlfs (>=2021.10.0) ; extra == 'all'",
      "azure-identity (>=1.4.0) ; extra == 'all'",
      "knack ; extra == 'all'",
      "pydrive2[fsspec] (>=1.10.1) ; extra == 'all'",
      "gcsfs (>=2021.11.1) ; extra == 'all'",
      "pyarrow (>=1) ; extra == 'all'",
      "fsspec[arrow] ; extra == 'all'",
      "ossfs (>=2021.8.0) ; extra == 'all'",
      "s3fs[boto3] (>=2022.02.0) ; extra == 'all'",
      "aiobotocore[boto3] (>2) ; extra == 'all'",
      "bcrypt ; extra == 'all'",
      "sshfs[bcrypt] (>=2022.6.0) ; extra == 'all'",
      "webdav4 (>=0.9.3) ; extra == 'all'",
      "adlfs (>=2021.10.0) ; extra == 'azure'",
      "azure-identity (>=1.4.0) ; extra == 'azure'",
      "knack ; extra == 'azure'",
      "adlfs (>=2021.10.0) ; extra == 'dev'",
      "azure-identity (>=1.4.0) ; extra == 'dev'",
      "knack ; extra == 'dev'",
      "pydrive2[fsspec] (>=1.10.1) ; extra == 'dev'",
      "gcsfs (>=2021.11.1) ; extra == 'dev'",
      "pyarrow (>=1) ; extra == 'dev'",
      "fsspec[arrow] ; extra == 'dev'",
      "ossfs (>=2021.8.0) ; extra == 'dev'",
      "s3fs[boto3] (>=2022.02.0) ; extra == 'dev'",
      "aiobotocore[boto3] (>2) ; extra == 'dev'",
      "bcrypt ; extra == 'dev'",
      "sshfs[bcrypt] (>=2022.6.0) ; extra == 'dev'",
      "webdav4 (>=0.9.3) ; extra == 'dev'",
      "tpi[ssh] (>=2.1.0) ; extra == 'dev'",
      "dvc-ssh (==0.0.1a0) ; extra == 'dev'",
      "pytest (==7.1.2) ; extra == 'dev'",
      "pytest-cov (==3.0.0) ; extra == 'dev'",
      "pytest-xdist (==2.5.0) ; extra == 'dev'",
      "pytest-mock (==3.8.2) ; extra == 'dev'",
      "pytest-lazy-fixture (==0.6.3) ; extra == 'dev'",
      "pytest-test-utils (==0.0.8) ; extra == 'dev'",
      "flaky (==3.7.0) ; extra == 'dev'",
      "mock (==4.0.3) ; extra == 'dev'",
      "pytest-timeout (==2.1.0) ; extra == 'dev'",
      "filelock (==3.7.1) ; extra == 'dev'",
      "pylint (==2.14.5) ; extra == 'dev'",
      "pylint-pytest (==1.1.2) ; extra == 'dev'",
      "pylint-plugin-utils (==0.7) ; extra == 'dev'",
      "mypy (==0.971) ; extra == 'dev'",
      "types-requests (>=2.27.15) ; extra == 'dev'",
      "types-tabulate (>=0.8.6) ; extra == 'dev'",
      "types-toml (>=0.10.4) ; extra == 'dev'",
      "dvclive[image] (>=0.7.3) ; extra == 'dev'",
      "beautifulsoup4 (==4.11.1) ; extra == 'dev'",
      "dvc-data[cli] ; extra == 'dev'",
      "pytest-docker (==0.11.0) ; (python_version < \"3.10\" or sys_platform != \"win32\") and extra == 'dev'",
      "pywin32 (>=225) ; (sys_platform == \"win32\") and extra == 'dev'",
      "pydrive2[fsspec] (>=1.10.1) ; extra == 'gdrive'",
      "gcsfs (>=2021.11.1) ; extra == 'gs'",
      "pyarrow (>=1) ; extra == 'hdfs'",
      "fsspec[arrow] ; extra == 'hdfs'",
      "ossfs (>=2021.8.0) ; extra == 'oss'",
      "s3fs[boto3] (>=2022.02.0) ; extra == 's3'",
      "aiobotocore[boto3] (>2) ; extra == 's3'",
      "bcrypt ; extra == 'ssh'",
      "sshfs[bcrypt] (>=2022.6.0) ; extra == 'ssh'",
      "sshfs[gssapi] (>=2022.6.0) ; extra == 'ssh_gssapi'",
      "tpi[ssh] (>=2.1.0) ; extra == 'terraform'",
      "tpi[ssh] (>=2.1.0) ; extra == 'tests'",
      "dvc-ssh (==0.0.1a0) ; extra == 'tests'",
      "pytest (==7.1.2) ; extra == 'tests'",
      "pytest-cov (==3.0.0) ; extra == 'tests'",
      "pytest-xdist (==2.5.0) ; extra == 'tests'",
      "pytest-mock (==3.8.2) ; extra == 'tests'",
      "pytest-lazy-fixture (==0.6.3) ; extra == 'tests'",
      "pytest-test-utils (==0.0.8) ; extra == 'tests'",
      "flaky (==3.7.0) ; extra == 'tests'",
      "mock (==4.0.3) ; extra == 'tests'",
      "pytest-timeout (==2.1.0) ; extra == 'tests'",
      "filelock (==3.7.1) ; extra == 'tests'",
      "pylint (==2.14.5) ; extra == 'tests'",
      "pylint-pytest (==1.1.2) ; extra == 'tests'",
      "pylint-plugin-utils (==0.7) ; extra == 'tests'",
      "mypy (==0.971) ; extra == 'tests'",
      "types-requests (>=2.27.15) ; extra == 'tests'",
      "types-tabulate (>=0.8.6) ; extra == 'tests'",
      "types-toml (>=0.10.4) ; extra == 'tests'",
      "dvclive[image] (>=0.7.3) ; extra == 'tests'",
      "beautifulsoup4 (==4.11.1) ; extra == 'tests'",
      "pytest-docker (==0.11.0) ; (python_version < \"3.10\" or sys_platform != \"win32\") and extra == 'tests'",
      "pywin32 (>=225) ; (sys_platform == \"win32\") and extra == 'tests'",
      "webdav4 (>=0.9.3) ; extra == 'webdav'",
      "requests-kerberos (==0.14.0) ; extra == 'webhdfs_kerberos'"
    ],
    "requires_python": ">=3.8",
    "summary": "Git for data scientists - manage your code and data together",
    "version": "2.15.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17525210,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f251a717af938f4b88c03b6ca66b9acde4a5adfa382f07cf8fa01c7632f5b0e9",
        "md5": "5a60090973342fee31094bb871fcdf19",
        "sha256": "b9635e6cae57e6e48514e286b867cbaae10b9dc4d77c9508d7709ac4f4f1a129"
      },
      "downloads": -1,
      "filename": "dvc-2.15.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a60090973342fee31094bb871fcdf19",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 377898,
      "upload_time": "2022-07-22T13:34:42",
      "upload_time_iso_8601": "2022-07-22T13:34:42.319741Z",
      "url": "https://files.pythonhosted.org/packages/f2/51/a717af938f4b88c03b6ca66b9acde4a5adfa382f07cf8fa01c7632f5b0e9/dvc-2.15.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ce360cc64ef24c17307f3e2c270a48bd3a15280d781d3b113eb257238bd7223",
        "md5": "3fb6ebf400b9e3d70def34768623bc41",
        "sha256": "11daa67ad2a7c89425be64799e269a47d8cf8b66e65406bc6968ca9bceec9e23"
      },
      "downloads": -1,
      "filename": "dvc-2.15.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3fb6ebf400b9e3d70def34768623bc41",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 535240,
      "upload_time": "2022-07-22T13:34:45",
      "upload_time_iso_8601": "2022-07-22T13:34:45.164710Z",
      "url": "https://files.pythonhosted.org/packages/2c/e3/60cc64ef24c17307f3e2c270a48bd3a15280d781d3b113eb257238bd7223/dvc-2.15.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}