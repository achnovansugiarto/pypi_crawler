{
  "info": {
    "author": "Mattia Sanchioni",
    "author_email": "mattia.sanchioni.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Bug Tracking",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# loggerpy\n\nThe simplest Python logger for everyday tasks.\n\n[![](https://img.shields.io/github/v/release/mett96/loggerpy?color=orange)](https://github.com/mett96/loggerpy/releases/tag/v1.0)\n[![](https://img.shields.io/pypi/v/loggerpy?color=green)](https://pypi.org/project/loggerpy/)\n[![](https://img.shields.io/pypi/pyversions/loggerpy)](https://www.python.org/downloads/release/python-370/)\n[![](https://img.shields.io/github/license/mett96/loggerpy)](https://github.com/mett96/loggerpy/blob/master/LICENSE.md)\n<!-- [![](https://img.shields.io/github/stars/mett96/loggerpy?style=social)](https://github.com/mett96/loggerpy) -->\n\n\n\n## Table of Contents\n\n* [Installation](#Installation)\n* [Instructions](#Instructions)\n    * [Configuration](#Configuration)\n    * [Logger](#Logger)\n    * [Customization](#Customization)\n    * [Logger Recovery](#LoggerRecovery)\n* [Version](#Version)\n* [Next release](#NextRelease)\n* [License](#License)\n<!-- * [Authors](#Authors) -->\n\n\n## Installation\n\nThe easiest way to install is throw pip.\n\n```bash\npip install loggerpy\n```\n\nOr you can install directly from Github\n```bash\npip install git+https://github.com/mett96/loggerpy.git\n```\n\n## Instructions\n\n\nIn order to use this simple logger, many examples are provided inside [examples directory](https://github.com/mett96/loggerpy/tree/master/examples)\n\n![logging ](https://raw.githubusercontent.com/mett96/loggerpy/master/imgs/logger_example.png)\n\n\n### Configuration\nThe first thing to do is to configure the global settings of logger package.\n\n```python\nimport loggerpy\n\nloggerpy.configure()\n```\n\nThe possible customization of configurations are:\n- domain: the main name of all loggers\n- path: the path of saving log if you want to save them\n- print_level: the minimum level of printing \n- save_level: the minimum level of saving, they can be different\n- info: boolean value if you want to print the default string _\"Logger configured...\"_\n\nIn order to simplify the customization of printing and saving level it is provided a class that contained the 6 possible levels of logging. \nImporting _Level_ from loggerpy, they can be used eg Level.DEBUG or Level.WARNING\n- Level.NO_LOGGER\n- Level.DEBUG\n- Level.INFO\n- Level.WARNING\n- Level.ERROR\n- Level.CRITICAL\n\nConfiguration [example](https://github.com/mett96/loggerpy/tree/master/examples/configuration.py)\n\n\n### Logger\nNow, it's time to create your first logger.\n```python\nfrom loggerpy import configure, get_logger\n\nconfigure()\n\nlogger = get_logger('custom_name')\n\n```\n\nFirst logger [example](https://github.com/mett96/loggerpy/tree/master/examples/first_logger.py)\n\n### Customization\nWhen we use _get_logger_ we can set custom parameters for this specific logger.\nThey are independent from the parameters set during configuration.\nThe customizable parameters are:\n- print_level\n- save_level\n- path\n\n```python\nlogger = get_logger('first', print_level=Level.WARNING, save_level=Level.INFO, path='path_of_log')\n```\n\nThe complete [example](https://github.com/mett96/loggerpy/tree/master/examples/custom_logger.py)\n\n### LoggerRecovery\nEach logger has a unique name. So, when you ask to _get_logger_ to create a logger with an already existing name, it returns an instance of the unique logger with input name.    \nOnly in this case, if it is given also a custom path it is ignored in order to not split the logs into different files\n\n```python\nlogger = get_logger('unique_name')\nlogger1 = get_logger('unique_name')\n\nprint(logger1 == logger)\nprint(hash(logger))\nprint(hash(logger1))\n```\n\nThe equality of the two loggers can be verified by printing the result of the equality of the two objects, or printing the hash of each object.\n\nThe complete the in the linkes [example](https://github.com/mett96/loggerpy/tree/master/examples/logger_recovery.py)\n\n\n## Versions\n*stable version*\n- 1.0 : released\n\n*development version*\n- 1.1 : on going\n    - [ ] introducing `pprint` and `json` to print better log\n    - [ ] try to expose _Level methods without give the possibility to create a new object\n    - [ ] review path of saving log\n    - [ ] the configuration works only in one file not over all package\n\n\n\n## NextRelease\n- [ ] custom _format_ for timestamp\n- [ ] custom _format_ for all log\n- [ ] custom _color_ for each level\n- [ ] inherit the _domain_ from another logger\n\n<!-- ## Authors -->\n\n## License\nThis project is under the GPL-3.0 license - see the [LICENSE.md](LICENSE.md) file for more details\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mett96/loggerpy",
    "keywords": "logger log logging simple pylogger py-logger loggerpy logger-py simplelogger",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "loggerpy",
    "package_url": "https://pypi.org/project/loggerpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/loggerpy/",
    "project_urls": {
      "Homepage": "https://github.com/mett96/loggerpy"
    },
    "release_url": "https://pypi.org/project/loggerpy/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "The simplest Python logger for everyday tasks.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9151790,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d4f84f9a1825ec81a523eb12476e7f03fac3ee7b526a3b04fedafa22223b4cf",
        "md5": "7646cdbc305eec004ec5a7d1f7de1437",
        "sha256": "d2ba517711adb9b3c88930a59cab99c44ce9134c959439ca412f6100930bbab9"
      },
      "downloads": -1,
      "filename": "loggerpy-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7646cdbc305eec004ec5a7d1f7de1437",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20792,
      "upload_time": "2019-10-23T17:18:00",
      "upload_time_iso_8601": "2019-10-23T17:18:00.043482Z",
      "url": "https://files.pythonhosted.org/packages/0d/4f/84f9a1825ec81a523eb12476e7f03fac3ee7b526a3b04fedafa22223b4cf/loggerpy-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c8b4c297f81617ace1c7dd8fdb5a582d5d321b6b836624385cf5ac2154c1cbe",
        "md5": "041f3bbe7751f53a5c176e37c9742cde",
        "sha256": "2e87fe45a2796ce9ddc69df2c575bbaa3ce4bc8d41b419dcbb62c089b7099589"
      },
      "downloads": -1,
      "filename": "loggerpy-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "041f3bbe7751f53a5c176e37c9742cde",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8604,
      "upload_time": "2019-10-23T17:18:02",
      "upload_time_iso_8601": "2019-10-23T17:18:02.580327Z",
      "url": "https://files.pythonhosted.org/packages/6c/8b/4c297f81617ace1c7dd8fdb5a582d5d321b6b836624385cf5ac2154c1cbe/loggerpy-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}