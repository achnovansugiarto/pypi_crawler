{
  "info": {
    "author": "Oxford Nanopore Technologies PLC",
    "author_email": "info@nanoporetech.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![.](docs/images/ONT_logo.png \"Oxford Nanopore Technologies\")\n\n******************\n\n# API Specifications for MinKNOW\n\n### Overview\n\nMinKNOW is Oxford Nanopore Technologies Device Control software embedded in MinION-mk1C, GridION,\nPromethION and provided for installation on user PCs to run MinIONs. It carries out several core\ntasks: data acquisition, real-time analysis and feedback, basecalling, data streaming, device\ncontrol (including selecting the run parameters), sample identification and tracking, and ensuring\nthat the platform chemistry is performing correctly to run the samples.\n\nThe files and code in this repository provide a way of automating interactions with MinKNOW,\nincluding gathering information about running or finished experiments, starting and stopping those\nexperiments, and even exerting more fine-grained control. Anything that can be done via MinKNOW's\nuser interface (and more) can be done using the APIs in this project.\n\nThis project is targetted at LIMS developers or developers of other tools that have a need to\nintegrate with MinKNOW. Some familiarity with Python is expected (although the APIs can be used from\nother languages), as the examples are written in Python. If you are not familiar with [gRPC][grpc],\nit is worth reading through some of the [gRPC documentation][grpc-docs] to get a feel for it.\n\n[grpc]: https://grpc.io/\n[grpc-docs]: https://grpc.io/docs/\n\n\n******************\n\n# Getting Started\n\n### Dependencies\n\nThe first thing you will need is an installation of MinKNOW to communicate with. This can be\nobtained from the [Oxford Nanopore Community download pages][community-download] if you want a local\ninstallation, although the installation on a GridION, PromethION, Mk1C, etc will also work.\n\n[community-download]: https://community.nanoporetech.com/downloads\n\nNote that you will need a compatible version of MinKNOW for the version of `minknow_api` you are\nusing - see the FAQs below.\n\nFor the Python module and examples, you will also need Python 3.5 or later, with the following\nPython packages installed:\n\n* [grpcio](https://pypi.org/project/grpcio/)\n* [numpy](https://pypi.org/project/numpy/)\n* [packaging](https://pypi.org/project/packaging/)\n* [protobuf](https://pypi.org/project/protobuf/)\n\n\n### Python\n\nThe `minknow_api` Python package provides a client library for the MinKNOW APIs. The recommended way\nto get it is from PyPI using pip, but it can also be built from source (see [BUILD.md](BUILD.md)).\n\n```bash\n# Install minknow_api\n> pip install minknow_api\n\n# Verify API is installed correctly (from a checkout of this repository):\n> python ./python/minknow_api/examples/list_sequencing_positions.py --host localhost\n\n# Possible output if running minknow locally:\n#   Available sequencing positions on localhost:9502:\n#   MN12345: running\n#     secure: 8000\n```\n\nThe package contains plenty of documentation in its docstrings, although for an overview of the\nMinKNOW APIs themselves you may prefer to read the [API description files](proto/minknow_api/) -\nsee below for further discussion of these files. There are also [examples](python/minknow_api/examples/) (like\nthe `list_sequencing_positions.py` script in the above instructions) that show how to perform some\ncommon tasks.\n\n### Other Languages\n\nMinKNOW's API is based on [gRPC][grpc] and can be used from any language supported by gRPC. This\nincludes Go, Java, Ruby, JavaScript (although see the note below about JavaScript) and many more.\nThe [gRPC documentation][grpc-docs] describes how to generate client libraries from the [API\ndescriptions](proto/minknow_api/) in this repository, and how to use those libraries. The `.proto`\nfiles themselves contain documentation about what the various RPCs do, and a more general overview\nis given below.\n\nThe Manager interface is available on port  `9502` - see the FAQs for more details.\nFrom there, APIs are available to get the ports that other services operate on (including the services\nfor each flow cell position).\n\n\n#### JavaScript\n\nHow to use gRPC from JavaScript depends on whether you're using it from Node (in which case it works\nmuch like any other language - see above) or from a web browser environment. For web browsers\n(including Electron), you need to use the [Web][grpc-web] variant, which may also involve\nconnecting to a different port.\n\nSecure connections still start at `9502` for the Manager service. When using the Manager APIs to\nget ports for other services, you should use fields with `grpc_web` in the name, like `secure_grpc_web`.\n\n[grpc-web]: https://github.com/improbable-eng/grpc-web\n\n\n### API Highlights\n\nThe files in [`proto/minknow_api`](proto/minknow_api/) describe MinKNOW's APIs. Each file\ndescribes a single *service*, which covers a specific area of MinKNOW's functionality.\n\nThere are two global services, the [manager service](proto/minknow_api/manager.proto) and\n[basecaller service](proto/minknow_api/basecaller.proto). There is only one instance of each of\nthese services: see below for how to connect to them. All other services are provided by each flow\ncell position independently. For example, if you are using a GridION X5, which has 5 flow cell\npositions, there will be 5 ports (or sets of ports - secure, gRPC Web, etc), each of which\nwill provide *all* the other services.\n\n### Authentication\n\nSee [API Tokens](API_TOKENS.md) for information on authenticating with the MinKNOW API.\n\n#### manager.proto\n\n[manager.proto](proto/minknow_api/manager.proto) is the entry point of MinKNOW's APIs. It is always\navailable on a specific port `9502`.\n\nThe most important method is `flow_cell_positions`, which provides information about how to connect\nto the services for each flow cell position. From there you can access all the flow cell\nposition-specific services.\n\nOther methods on the manager service provide general information about the MinKNOW installation and\nits high-level state, as well as port information for the [basecaller\nservice](proto/minknow_api/basecaller.proto) service, which can be used to basecall data from\nprevious experiments.\n\n#### instance.proto\n\n[instance.proto](proto/minknow_api/instance.proto) provides general information about the flow cell\nposition. Of particular interest is the `get_output_directories` method, which indicates where data\nfiles will be written to. `set_output_directories` can be used to change this.\n\n`stream_instance_activity` may also be useful, as it provides a continuously-updated summary of the\nstate of the position.\n\nThis can be accessed via the ports reported by `flow_cell_positions` on the manager service.\n\n#### protocol.proto\n\n[protocol.proto](proto/minknow_api/protocol.proto) allows starting and stopping experiment\nprotocols, as well as providing information about the current and previous protocol runs. Note that\ninformation about protocol runs from before the last restart is not available via this API.\n\nSee the [`start_protocol` example](python/minknow_api/examples/start_protocol.py) for an example of how to use\nthis service to start a protocol.\n\n#### acquisition.proto\n\nThe main work of a protocol is acquiring data, and this is managed in\n[acquisition.proto](proto/minknow_api/acquisition.proto). While most of the methods in\nacquisition.proto will not be useful to most external tools, `get_acquisition_info` is helpful for\naccess detailed information about what was done by a protocol run reported by protocol.proto.\n\n#### device.proto\n\n[device.proto](proto/minknow_api/device.proto) provides more detailed information about the\nhardware of the flow cell position and the inserted flow cell. `get_device_info` provides some\nconstant information about the position, while `get_flow_cell_info` provides information about the\nflow cell (a streaming version that provides updates about changes to the flow cell, such as it\nbeing removed, is also available). It is also possible to override the flow cell identifier and\nproduct code via this service (although this is not generally recommended).\n\n#### statistics.proto\n\n[statistics.proto](proto/minknow_api/statistics.proto) provides statistics about current and\nprevious protocol runs, including duty time and temperature information. This is useful for\ngenerating reports or tables of data describing how well an experiment has performed.\n\n\n******************\n\nHelp\n====\n\n### Licence and Copyright\n\nÂ© 2021 Oxford Nanopore Technologies PLC.\n\nAPI Specifications for MinKNOW is distributed under the Terms and Conditions of the Nanopore\nCommunity.\n\n### FAQs\n\n#### What MinKNOW versions will this work with?\n\nMinKNOW's API changes over time, to support new features and occasionally for other reasons, such as\nimproving security. The important version is that of *MinKNOW Core* - this version looks like 3.6.5\nor 4.0.1 - rather than the date-based version of the entire MinKNOW release (which looks more like\n19.12.5).\n\nEvery *minor* release of MinKNOW Core (the 4.0 in 4.0.1) has a fixed API, which is described by the\ncorresponding minor releases of `minknow_api`. So you should use the latest 4.0.x release of\n`minknow_api` to talk to MinKNOW Core 4.0.1.\n\nWe aim to keep API backward-compatibility within a *major* release (the 4 in 4.0.1) of MinKNOW Core.\nThis means that if you write code that talks to MinKNOW Core 4.2, say, using `minknow_api` 4.2.1, it\nshould work with MinKNOW 4.3, 4.4, etc (without even updating `minknow_api`), but it *won't* work\nwith MinKNOW Core 3.6 or 5.0. There is also no guarantee it will work with MinKNOW Core 4.0 or 4.1\n(depending on which specific APIs you have used).\n\n#### What port should I connect to?\n\nThere is one standard port that MinKNOW exposes, which provides the [manager\nservice](proto/minknow_api/manager.proto):\n\n* `9502` can be used with a gRPC or gRPC-Web \"secure channel\"\n\ngRPC-Web is only used for browser-based clients; all other client should use the normal gRPC ports.\n\nPorts reported by manager RPCs follow a similar pattern: there are two fields. For example, the\n`basecaller_api` RPC returns a response with two fields:\n\n* `secure` is a port that can be connected to with a gRPC secure channel\n* `secure_grpc_web` is a port that can be connected to with a gRPC-Web secure channel\n\nIt may be that the `secure` and `secure_grpc_web` fields contain the same port number, but this is\nnot guaranteed and should not be relied on.\n\n#### How do I connect to a \"secure\" port?\n\nMinKNOW installations use a self-signed certificate for their secure ports. This means that the\nclient library you use has to trust this certificate.\n\nIf you are using the `minknow_api` Python package, this is all handled for you. If you are using\n`minknow_api.manager.Manager`, secure connections are used by default. This can be overridden with\nthe `use_tls` argument when creating this class. `minknow_api.Connection` can also be passed a\n`use_tls` argument.\n\nIf you are using the gRPC client libraries directly (for example, if you are connecting from a\nlanguage other than Python), you will need to tell the library about MinKNOW's TLS certificates.\n\nWithin the MinKNOW installation, you can find the CA certificate at `conf/rpc-certs/ca.crt`. This\ncan be passed to most gRPC client libraries as part of creating a secure/SSL channel.\n\nNote that this certificate is only valid for the \"localhost\" name - connecting to `127.0.0.1`\ndirectly will not work, nor will connecting across the network. You can work around this by\nsetting the `grpc.ssl_target_name_override` channel option to `localhost`.\n\n### Glossary\n\n#### Acquisition\n\nAn *acquisition period* or *acquisition run* is a period in which data was being actively read from\nthe flow cell. A typical protocol will have two acquisition periods - a short one with minimal\nanalysis to calibrate the flow cell followed by a much longer one to actually gather sequence data.\n\n#### Device\n\nWhen the APIs refer to a *device*, this is the same as a *flow cell position*. Newer APIs use the\nmore descriptive *flow cell position*, but there are plenty of older APIs that use *device* instead.\n\n#### Experiment\n\nIn the user interface, an *experiment name* is another name for a *protocol group ID* (see\n*Protocol*). Note that what a user considers an \"experiment\" may not map onto a consistent concept\nin MinKNOW, and the APIs generally avoid this term in favour of a more precise term like \"protocol\nrun\" or \"protocol group\".\n\n#### Flow Cell\n\nThe *flow cell* is a consumable that plugs into the sequencing unit and contains the chemistry\nrequired to sequence the sample. Often, but not always, contains some core electronics.\n\nThe *flow cell position* is the location that a flow cell can be plugged in to. It is synonymous\nwith *device* in the APIs.\n\n#### Protocol\n\nA *protocol* is a description of how to perform an experiment. This takes the form of some\nconfiguration and a Python script. A *protocol run* is a specific execution of that protocol.\n\nA *protocol group* is a set of protocol runs given the same name (referred to as a \"protocol group\nID\" in the API, and an \"experiment name\" in the user interface).\n\n\n### Troubleshooting\n\n#### Bad metadata key\n\nIf you see the following error when connecting to the **local** machine:\n\n```\ngrpc._channel._InactiveRpcError: <_InactiveRpcError of RPC that terminated with:\n        status = StatusCode.UNAUTHENTICATED\n        details = \"Bad metadata key\"\n```\n\nyou can try setting the `MINKNOW_API_USE_LOCAL_TOKEN` environment variable to `1`. Note that you\nwill need to have MinKNOW's local guest mode enabled for this to work (it is enabled by default, but\nthe setting can be changed via Mooneye).\n\n#### Invalid local auth token\n\nIf you see the following error when connecting to a **remote** machine:\n\n```\ngrpc._channel._InactiveRpcError: <_InactiveRpcError of RPC that terminated with:\n        status = StatusCode.UNAUTHENTICATED\n        details = \"Invalid local auth token\"\n```\n\nyou can try setting the `MINKNOW_API_USE_LOCAL_TOKEN` environment variable to `0`.\n\n#### MissingMinknowSSlCertError\n\nIf you get a `MissingMinknowSSlCertError` exception, try setting the `MINKNOW_TRUSTED_CA`\nenvironment variable. This should be the path to the `conf/rpc-certs/ca.crt` file found in a MinKNOW\ninstallation. You should use a copy of the file from the same version of MinKNOW as the one you are\nattempting to connect to.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nanoporetech/minknow_api",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minknow-api",
    "package_url": "https://pypi.org/project/minknow-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/minknow-api/",
    "project_urls": {
      "Homepage": "https://github.com/nanoporetech/minknow_api"
    },
    "release_url": "https://pypi.org/project/minknow-api/5.3.0/",
    "requires_dist": [
      "grpcio (~=1.37)",
      "numpy (~=1.11)",
      "protobuf (~=3.15)",
      "packaging (>=15.0)",
      "pyrfc3339 (~=1.1)",
      "importlib-resources (<3.3) ; python_version < \"3.7.0\""
    ],
    "requires_python": "",
    "summary": "MinKNOW RPC API bindings",
    "version": "5.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16651278,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0879989ddf7f26a866353ff7785c9e4f88e5fb792366701a9b4bcaa6b43a7a32",
        "md5": "95821019991989cb77048b613957b2b2",
        "sha256": "79547857fcdfcd48fdeb1704ec1b4364cd790cdd64ce502d8c4a3b0dab5afa7d"
      },
      "downloads": -1,
      "filename": "minknow_api-5.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "95821019991989cb77048b613957b2b2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 320106,
      "upload_time": "2022-10-31T14:46:28",
      "upload_time_iso_8601": "2022-10-31T14:46:28.895371Z",
      "url": "https://files.pythonhosted.org/packages/08/79/989ddf7f26a866353ff7785c9e4f88e5fb792366701a9b4bcaa6b43a7a32/minknow_api-5.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e796b6a14843866b6575e98652bf6670215371099c23625c9a7eee1bb84af7f",
        "md5": "06688b2d0433e069e4cc3d1f62f85cb1",
        "sha256": "c83b67c731b5bd076d91dea535aee5a22825ae36a26c860d0a23990a816d089a"
      },
      "downloads": -1,
      "filename": "minknow_api-5.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "06688b2d0433e069e4cc3d1f62f85cb1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 291963,
      "upload_time": "2022-10-31T14:46:30",
      "upload_time_iso_8601": "2022-10-31T14:46:30.394755Z",
      "url": "https://files.pythonhosted.org/packages/2e/79/6b6a14843866b6575e98652bf6670215371099c23625c9a7eee1bb84af7f/minknow_api-5.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}