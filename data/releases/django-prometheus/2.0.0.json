{
  "info": {
    "author": "Uriel Corfa",
    "author_email": "uriel@corfa.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: System :: Monitoring"
    ],
    "description": "# django-prometheus\nExport Django monitoring metrics for Prometheus.io\n\n[![Join the chat at https://gitter.im/django-prometheus/community](https://badges.gitter.im/django-prometheus/community.svg)](https://gitter.im/django-prometheus/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![PyPI version](https://badge.fury.io/py/django-prometheus.svg)](http://badge.fury.io/py/django-prometheus)\n[![Build Status](https://travis-ci.org/korfuri/django-prometheus.svg?branch=master)](https://travis-ci.org/korfuri/django-prometheus)\n[![Coverage Status](https://coveralls.io/repos/github/korfuri/django-prometheus/badge.svg?branch=master)](https://coveralls.io/github/korfuri/django-prometheus?branch=master)\n[![PyPi page link -- Python versions](https://img.shields.io/pypi/pyversions/django-prometheus.svg)](https://pypi.python.org/pypi/django-prometheus)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## Usage\n\n### Requirements\n\n* Django >= 1.11\n\n### Installation\n\nInstall with:\n\n```shell\npip install django-prometheus\n```\n\nOr, if you're using a development version cloned from this repository:\n\n```shell\npython path-to-where-you-cloned-django-prometheus/setup.py install\n```\n\nThis will install [prometheus_client](https://github.com/prometheus/client_python) as a dependency.\n\n### Quickstart\n\nIn your settings.py:\n\n```python\nINSTALLED_APPS = (\n   ...\n   'django_prometheus',\n   ...\n)\n\nMIDDLEWARE_CLASSES = (\n    'django_prometheus.middleware.PrometheusBeforeMiddleware',\n    # All your other middlewares go here, including the default\n    # middlewares like SessionMiddleware, CommonMiddleware,\n    # CsrfViewmiddleware, SecurityMiddleware, etc.\n    'django_prometheus.middleware.PrometheusAfterMiddleware',\n)\n```\n\nIn your urls.py:\n\n```python\nurlpatterns = [\n    ...\n    url('', include('django_prometheus.urls')),\n]\n```\n\n### Configuration\nPrometheus uses Histogram based grouping for monitoring latencies. The default\nbuckets are here: https://github.com/prometheus/client_python/blob/master/prometheus_client/core.py\n\nYou can define custom buckets for latency, adding more buckets decreases performance but\nincreases accuracy: https://prometheus.io/docs/practices/histograms/\n\n```\nPROMETHEUS_LATENCY_BUCKETS = (.1, .2, .5, .6, .8, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.5, 9.0, 12.0, 15.0, 20.0, 30.0, float(\"inf\"))\n```\n\n### Monitoring your databases\n\nSQLite, MySQL, and PostgreSQL databases can be monitored. Just\nreplace the `ENGINE` property of your database, replacing\n`django.db.backends` with `django_prometheus.db.backends`.\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django_prometheus.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    },\n}\n```\n\n### Monitoring your caches\n\nFilebased, memcached, redis caches can be monitored. Just replace\nthe cache backend to use the one provided by django_prometheus\n`django.core.cache.backends` with `django_prometheus.cache.backends`.\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django_prometheus.cache.backends.filebased.FileBasedCache',\n        'LOCATION': '/var/tmp/django_cache',\n    }\n}\n```\n\n### Monitoring your models\n\nYou may want to monitor the creation/deletion/update rate for your\nmodel. This can be done by adding a mixin to them. This is safe to do\non existing models (it does not require a migration).\n\nIf your model is:\n\n```python\nclass Dog(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    breed = models.CharField(max_length=100, blank=True, null=True)\n    age = models.PositiveIntegerField(blank=True, null=True)\n```\n\nJust add the `ExportModelOperationsMixin` as such:\n\n```python\nfrom django_prometheus.models import ExportModelOperationsMixin\n\nclass Dog(ExportModelOperationsMixin('dog'), models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    breed = models.CharField(max_length=100, blank=True, null=True)\n    age = models.PositiveIntegerField(blank=True, null=True)\n```\n\nThis will export 3 metrics, `django_model_inserts_total{model=\"dog\"}`,\n`django_model_updates_total{model=\"dog\"}` and\n`django_model_deletes_total{model=\"dog\"}`.\n\nNote that the exported metrics are counters of creations,\nmodifications and deletions done in the current process. They are not\ngauges of the number of objects in the model.\n\nStarting with Django 1.7, migrations are also monitored. Two gauges\nare exported, `django_migrations_applied_by_connection` and\n`django_migrations_unapplied_by_connection`. You may want to alert if\nthere are unapplied migrations.\n\nIf you want to disable the Django migration metrics, set the\n`PROMETHEUS_EXPORT_MIGRATIONS` setting to False.\n\n### Monitoring and aggregating the metrics\n\nPrometheus is quite easy to set up. An example prometheus.conf to\nscrape `127.0.0.1:8001` can be found in `examples/prometheus`.\n\nHere's an example of a PromDash displaying some of the metrics\ncollected by django-prometheus:\n\n![Example dashboard](https://raw.githubusercontent.com/korfuri/django-prometheus/master/examples/django-promdash.png)\n\n## Adding your own metrics\n\nYou can add application-level metrics in your code by using\n[prometheus_client](https://github.com/prometheus/client_python)\ndirectly. The exporter is global and will pick up your metrics.\n\nTo add metrics to the Django internals, the easiest way is to extend\ndjango-prometheus' classes. Please consider contributing your metrics,\npull requests are welcome. Make sure to read the Prometheus best\npractices on\n[instrumentation](http://prometheus.io/docs/practices/instrumentation/)\nand [naming](http://prometheus.io/docs/practices/naming/).\n\n## Importing Django Prometheus using only local settings\n\nIf you wish to use Django Prometheus but are not able to change\nthe code base, it's possible to have all the default metrics by\nmodifying only the settings.\n\nFirst step is to inject prometheus' middlewares and to add\ndjango_prometheus in INSTALLED_APPS\n\n```python\nMIDDLEWARE = (\n        ('django_prometheus.middleware.PrometheusBeforeMiddleware',) +\n       MIDDLEWARE +\n        ('django_prometheus.middleware.PrometheusAfterMiddleware',)\n    )\n\nINSTALLED_APPS = INSTALLED_APPS + ('django_prometheus',)\n```\n\nSecond step is to create the /metrics end point, for that we need\nanother file (called urls_prometheus_wrapper.py in this example) that\nwill wraps the apps URLs and add one on top:\n\n```python\nfrom django.conf.urls import include, url\n\n\nurlpatterns = []\n\nurlpatterns.append(url('^prometheus/', include('django_prometheus.urls')))\nurlpatterns.append(url('', include('myapp.urls')))\n```\n\nThis file will add a \"/prometheus/metrics\" end point to the URLs of django\nthat will export the metrics (replace myapp by your project name).\n\nThen we inject the wrapper in settings:\n\n```python\nROOT_URLCONF = \"graphite.urls_prometheus_wrapper\"\n```\n\n## Adding custom labels to middleware (request/response) metrics\n\nYou can add application specific labels to metrics reported by the django-prometheus middleware.\nThis involves extending the classes defined in middleware.py.\n\n* Extend the Metrics class and override the `register_metric` method to add the application specific labels.\n* Extend middleware classes, set the metrics_cls class attribute to the the extended metric class and override the label_metric method to attach custom metrics.\n\nSee implementation example in [the test app](django_prometheus/tests/end2end/testapp/test_middleware_custom_labels.py#L19-L46)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/korfuri/django-prometheus",
    "keywords": "django monitoring prometheus",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-prometheus",
    "package_url": "https://pypi.org/project/django-prometheus/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-prometheus/",
    "project_urls": {
      "Homepage": "http://github.com/korfuri/django-prometheus"
    },
    "release_url": "https://pypi.org/project/django-prometheus/2.0.0/",
    "requires_dist": [
      "prometheus-client (>=0.7)"
    ],
    "requires_python": "",
    "summary": "Django middlewares to monitor your application with Prometheus.io.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12354531,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ae449a41df8b2ccc1d3ff219c809f99d15da0f603fa0046b18347acd5f2a1fe",
        "md5": "80fed262064539b497378f221e7f4a44",
        "sha256": "4c30aa8eb944fcf3cf10e20dfabbbe11ad5a84fce62abb3658feffa4e2ac2b97"
      },
      "downloads": -1,
      "filename": "django_prometheus-2.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "80fed262064539b497378f221e7f4a44",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 27513,
      "upload_time": "2020-01-20T23:26:04",
      "upload_time_iso_8601": "2020-01-20T23:26:04.352968Z",
      "url": "https://files.pythonhosted.org/packages/2a/e4/49a41df8b2ccc1d3ff219c809f99d15da0f603fa0046b18347acd5f2a1fe/django_prometheus-2.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2247b27b2ee98f02793158f0a72b6d10c338595408571a30e70aaeac83d5e9f3",
        "md5": "e3fc7a2fe2416c6993b38bfac82f53b7",
        "sha256": "8f25e86a3c310f40cf32cfa1b56a2b6df9cb2521e4cb794844958697d98fb3d1"
      },
      "downloads": -1,
      "filename": "django-prometheus-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e3fc7a2fe2416c6993b38bfac82f53b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20028,
      "upload_time": "2020-01-20T23:26:09",
      "upload_time_iso_8601": "2020-01-20T23:26:09.363668Z",
      "url": "https://files.pythonhosted.org/packages/22/47/b27b2ee98f02793158f0a72b6d10c338595408571a30e70aaeac83d5e9f3/django-prometheus-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}