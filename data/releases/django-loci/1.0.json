{
  "info": {
    "author": "Federico Capoano",
    "author_email": "support@openwisp.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "django-loci\n===========\n\n.. image:: https://github.com/openwisp/django-loci/workflows/Django%20Loci%20Build/badge.svg?branch=master\n   :target: https://github.com/openwisp/django-loci/actions?query=workflow%3A\"Django+Loci+Build\"\n   :alt: CI build status\n\n.. image:: https://coveralls.io/repos/openwisp/django-loci/badge.svg\n   :target: https://coveralls.io/r/openwisp/django-loci\n\n.. image:: https://img.shields.io/librariesio/release/github/openwisp/django-loci\n  :target: https://libraries.io/github/openwisp/django-loci#repository_dependencies\n  :alt: Dependency monitoring\n\n.. image:: https://img.shields.io/gitter/room/nwjs/nw.js.svg?style=flat-square\n   :target: https://gitter.im/openwisp/general\n\n.. image:: https://badge.fury.io/py/django-loci.svg\n   :target: http://badge.fury.io/py/django-loci\n\n.. image:: https://pepy.tech/badge/django-loci\n   :target: https://pepy.tech/project/django-loci\n   :alt: downloads\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://pypi.org/project/black/\n   :alt: code style: black\n\n------------\n\nReusable django-app for storing GIS and indoor coordinates of objects.\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-loci/master/docs/indoor.png\n   :target: https://raw.githubusercontent.com/openwisp/django-loci/master/docs/indoor.png\n   :alt: Indoor coordinates\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-loci/master/docs/map.png\n   :target: https://raw.githubusercontent.com/openwisp/django-loci/master/docs/map.png\n   :alt: Map coordinates\n\n.. image:: https://raw.githubusercontent.com/openwisp/django-loci/master/docs/mobile.png\n   :target: https://raw.githubusercontent.com/openwisp/django-loci/master/docs/mobile.png\n   :alt: Mobile coordinates\n\n------------\n\n.. contents:: **Table of Contents**:\n   :backlinks: none\n   :depth: 3\n\n------------\n\nDependencies\n------------\n\n* Python >= 3.7\n* GeoDjango (`see GeoDjango Install Instructions <https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/#requirements>`_)\n* One of the databases supported by GeoDjango\n\n\nCompatibility Table\n-------------------\n\n===============  ==================================\ndjango-loci      Python version\n0.2              2.7 or >=3.4\n0.3 - 0.4        >=3.6\n0.5              >=3.7\n===============  ==================================\n\n\nInstall stable version from pypi\n--------------------------------\n\nInstall from pypi:\n\n.. code-block:: shell\n\n    pip install django-loci\n\nInstall development version\n---------------------------\n\nFirst of all, install the dependencies of `GeoDjango <https://docs.djangoproject.com/en/2.1/ref/contrib/gis/>`_:\n\n- `Geospatial libraries <https://docs.djangoproject.com/en/2.1/ref/contrib/gis/install/geolibs/>`_\n- `Spatial database <https://docs.djangoproject.com/en/2.1/ref/contrib/gis/install/spatialite/>`_,\n  for development we use Spatialite, a spatial extension of `sqlite <https://www.sqlite.org/index.html>`_\n\nInstall tarball:\n\n.. code-block:: shell\n\n    pip install https://github.com/openwisp/django-loci/tarball/master\n\nAlternatively you can install via pip using git:\n\n.. code-block:: shell\n\n    pip install -e git+git://github.com/openwisp/django-loci#egg=django_loci\n\nIf you want to contribute, install your cloned fork:\n\n.. code-block:: shell\n\n    git clone git@github.com:<your_fork>/django-loci.git\n    cd django_loci\n    python setup.py develop\n\nSetup (integrate in an existing django project)\n-----------------------------------------------\n\nFirst of all, set up your database engine to `one of the spatial databases suppported\nby GeoDjango <https://docs.djangoproject.com/en/2.1/ref/contrib/gis/db-api/#spatial-backends>`_.\n\nAdd ``django_loci`` and its dependencies to ``INSTALLED_APPS`` in the following order:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # ...\n        'django.contrib.gis',\n        'django_loci',\n        'django.contrib.admin',\n        'leaflet',\n        'channels'\n        # ...\n    ]\n\nConfigure ``CHANNEL_LAYERS`` according to your needs, a sample configuration can be:\n\n.. code-block:: python\n\n    ASGI_APPLICATION = \"django_loci.channels.routing.channel_routing\"\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"channels.layers.InMemoryChannelLayer\",\n        },\n    }\n\nNow run migrations:\n\n.. code-block:: shell\n\n    ./manage.py migrate\n\nTroubleshooting\n---------------\n\nCommon issues and solutions when installing GeoDjango.\n\nUnable to load the SpatiaLite library extension\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you get the following exception::\n\n    django.core.exceptions.ImproperlyConfigured: Unable to load the SpatiaLite library extension\n\nYou need to specify the ``SPATIALITE_LIBRARY_PATH`` in your ``settings.py`` as explained\nin the `django documentation regarding how to install and configure spatialte\n<https://docs.djangoproject.com/en/2.1/ref/contrib/gis/install/spatialite/>`_.\n\nIssues with other geospatial libraries\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the `geodjango documentation on troubleshooting issues related to\ngeospatial libraries <https://docs.djangoproject.com/en/2.1/ref/contrib/gis/install/#library-environment-settings>`_.\n\nSettings\n--------\n\n``LOCI_FLOORPLAN_STORAGE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------------------------------------+\n| **type**:    | ``str``                                   |\n+--------------+-------------------------------------------+\n| **default**: | ``django_loci.storage.OverwriteStorage``  |\n+--------------+-------------------------------------------+\n\nThe django file storage class used for uploading floorplan images.\n\nThe filestorage can be changed to a different one as long as it has an\n``upload_to`` class method which will be passed to ``FloorPlan.image.upload_to``.\n\nTo understand the details of this statement, take a look at the code of\n`django_loci.storage.OverwriteStorage\n<https://github.com/openwisp/django-loci/blob/master/django_loci/storage.py>`_.\n\n``DJANGO_LOCI_GEOCODER``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``str``     |\n+--------------+-------------+\n| **default**: | ``ArcGIS``  |\n+--------------+-------------+\n\nService used for geocoding and reverse geocoding.\n\nSupported geolocation services:\n\n* ``ArcGIS``\n* ``Nominatim``\n* ``GoogleV3`` (Google Maps v3)\n\n``DJANGO_LOCI_GEOCODE_FAILURE_DELAY``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------+\n| **type**:    | ``int``  |\n+--------------+----------+\n| **default**: | ``1``    |\n+--------------+----------+\n\nAmount of seconds between geocoding retry API calls when geocoding requests fail.\n\n``DJANGO_LOCI_GEOCODE_RETRIES``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+----------+\n| **type**:    | ``int``  |\n+--------------+----------+\n| **default**: | ``3``    |\n+--------------+----------+\n\nAmount of retry API calls when geocoding requests fail.\n\n``DJANGO_LOCI_GEOCODE_API_KEY``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------+\n| **type**:    | ``str``   |\n+--------------+-----------+\n| **default**: | ``None``  |\n+--------------+-----------+\n\nAPI key if required (eg: Google Maps).\n\nSystem Checks\n-------------\n\n``geocoding``\n~~~~~~~~~~~~~\n\nUse to check if geocoding is working as expected or not.\n\nRun this checks with::\n\n    ./manage.py check --deploy --tag geocoding\n\nExtending django-loci\n---------------------\n\n*django-loci* provides a set of models and admin classes which can be imported,\nextended and reused by third party apps.\n\nTo extend *django-loci*, **you MUST NOT** add it to ``settings.INSTALLED_APPS``,\nbut you must create your own app (which goes into ``settings.INSTALLED_APPS``),\nimport the base classes of django-loci and add your customizations.\n\nExtending models\n~~~~~~~~~~~~~~~~\n\nThis example provides an example of how to extend the base models of\n*django-loci* by adding a relation to another django model named `Organization`.\n\n.. code-block:: python\n\n    # models.py of your app\n    from django.db import models\n    from django_loci.base.models import (AbstractFloorPlan,\n                                         AbstractLocation,\n                                         AbstractObjectLocation)\n\n    # the model ``organizations.Organization`` is omitted for brevity\n    # if you are curious to see a real implementation, check out django-organizations\n\n\n    class OrganizationMixin(models.Model):\n        organization = models.ForeignKey('organizations.Organization')\n\n        class Meta:\n            abstract = True\n\n\n    class Location(OrganizationMixin, AbstractLocation):\n        class Meta(AbstractLocation.Meta):\n            abstract = False\n\n        def clean(self):\n            # your own validation logic here...\n            pass\n\n\n    class FloorPlan(OrganizationMixin, AbstractFloorPlan):\n        location = models.ForeignKey(Location)\n\n        class Meta(AbstractFloorPlan.Meta):\n            abstract = False\n\n        def clean(self):\n            # your own validation logic here...\n            pass\n\n\n    class ObjectLocation(OrganizationMixin, AbstractObjectLocation):\n        location = models.ForeignKey(Location, models.PROTECT,\n                                     blank=True, null=True)\n        floorplan = models.ForeignKey(FloorPlan, models.PROTECT,\n                                      blank=True, null=True)\n\n        class Meta(AbstractObjectLocation.Meta):\n            abstract = False\n\n        def clean(self):\n            # your own validation logic here...\n            pass\n\nExtending the admin\n~~~~~~~~~~~~~~~~~~~\n\nFollowing the previous `Organization` example, you can avoid duplicating the admin\ncode by importing the base admin classes and registering your models with them.\n\nBut first you have to change a few settings in your ``settings.py``, these are needed in\norder to load the admin templates and static files of *django-loci* even if it's not\nlisted in ``settings.INSTALLED_APPS``.\n\nAdd ``django.forms`` to ``INSTALLED_APPS``, now it should look like the following:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # ...\n        'django.contrib.gis',\n        'django_loci',\n        'django.contrib.admin',\n        #      ↓\n        'django.forms', # <-- add this\n        #      ↑\n        'leaflet',\n        'channels'\n        # ...\n    ]\n\nNow add ``EXTENDED_APPS`` after ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # ...\n    ]\n\n    EXTENDED_APPS = ('django_loci',)\n\nAdd ``openwisp_utils.staticfiles.DependencyFinder`` to ``STATICFILES_FINDERS``:\n\n.. code-block:: python\n\n    STATICFILES_FINDERS = [\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n        'openwisp_utils.staticfiles.DependencyFinder',\n    ]\n\nAdd ``openwisp_utils.loaders.DependencyLoader`` to ``TEMPLATES``:\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [],\n            'OPTIONS': {\n                'loaders': [\n                    'django.template.loaders.filesystem.Loader',\n                    'django.template.loaders.app_directories.Loader',\n                    # add the following line\n                    'openwisp_utils.loaders.DependencyLoader'\n                ],\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                ],\n            },\n        }\n    ]\n\nLast step, add ``FORM_RENDERER``:\n\n.. code-block:: python\n\n    FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'\n\nThen you can go ahead and create your ``admin.py`` file following the example below:\n\n.. code-block:: python\n\n    # admin.py of your app\n    from django.contrib import admin\n\n    from django_loci.base.admin import (AbstractFloorPlanAdmin, AbstractFloorPlanForm,\n                                        AbstractFloorPlanInline, AbstractLocationAdmin,\n                                        AbstractLocationForm, AbstractObjectLocationForm,\n                                        AbstractObjectLocationInline)\n    from django_loci.models import FloorPlan, Location, ObjectLocation\n\n\n    class FloorPlanForm(AbstractFloorPlanForm):\n        class Meta(AbstractFloorPlanForm.Meta):\n            model = FloorPlan\n\n\n    class FloorPlanAdmin(AbstractFloorPlanAdmin):\n        form = FloorPlanForm\n\n\n    class LocationForm(AbstractLocationForm):\n        class Meta(AbstractLocationForm.Meta):\n            model = Location\n\n\n    class FloorPlanInline(AbstractFloorPlanInline):\n        form = FloorPlanForm\n        model = FloorPlan\n\n\n    class LocationAdmin(AbstractLocationAdmin):\n        form = LocationForm\n        inlines = [FloorPlanInline]\n\n\n    class ObjectLocationForm(AbstractObjectLocationForm):\n        class Meta(AbstractObjectLocationForm.Meta):\n            model = ObjectLocation\n\n\n    class ObjectLocationInline(AbstractObjectLocationInline):\n        model = ObjectLocation\n        form = ObjectLocationForm\n\n\n    admin.site.register(FloorPlan, FloorPlanAdmin)\n    admin.site.register(Location, LocationAdmin)\n\nExtending channel consumers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nExtend the channel consumer of django-loci in this way:\n\n.. code-block:: python\n\n    from django_loci.channels.base import BaseLocationBroadcast\n    from ..models import Location  # your own location model\n\n\n    class LocationBroadcast(BaseLocationBroadcast):\n        model = Location\n\nExtending AppConfig\n~~~~~~~~~~~~~~~~~~~\n\nYou may want to reuse the ``AppConfig`` class of *django-loci* too:\n\n.. code-block:: python\n\n    from django_loci.apps import LociConfig\n\n\n    class MyConfig(LociConfig):\n        name = 'myapp'\n        verbose_name = _('My custom app')\n\n        def __setmodels__(self):\n            from .models import Location\n            self.location_model = Location\n\nInstalling for development\n--------------------------\n\nInstall sqlite:\n\n.. code-block:: shell\n\n    sudo apt-get install sqlite3 libsqlite3-dev libsqlite3-mod-spatialite gdal-bin\n\nInstall your forked repo:\n\n.. code-block:: shell\n\n    git clone git://github.com/<your_fork>/django-loci\n    cd django-loci/\n    python setup.py develop\n\nInstall test requirements:\n\n.. code-block:: shell\n\n    pip install -r requirements-test.txt\n\nCreate database:\n\n.. code-block:: shell\n\n    cd tests/\n    ./manage.py migrate\n    ./manage.py createsuperuser\n\nLaunch development server and SMTP debugging server:\n\n.. code-block:: shell\n\n    ./manage.py runserver\n\nYou can access the admin interface at http://127.0.0.1:8000/admin/.\n\nRun tests with:\n\n.. code-block:: shell\n\n    # pytests is used to test django-channels\n    ./runtests.py && pytest\n\nContributing\n------------\n\n1. Announce your intentions in the `OpenWISP Mailing List <https://groups.google.com/d/forum/openwisp>`_\n2. Fork this repo and install it\n3. Follow `PEP8, Style Guide for Python Code`_\n4. Write code\n5. Write tests for your code\n6. Ensure all tests pass\n7. Ensure test coverage does not decrease\n8. Document your changes\n9. Send pull request\n\n.. _PEP8, Style Guide for Python Code: http://www.python.org/dev/peps/pep-0008/\n\nChangelog\n---------\n\nSee `CHANGES <https://github.com/openwisp/django-loci/blob/master/CHANGES.rst>`_.\n\nLicense\n-------\n\nSee `LICENSE <https://github.com/openwisp/django-loci/blob/master/LICENSE>`_.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/openwisp/django-loci/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://openwisp.org",
    "keywords": "django,gis",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-loci",
    "package_url": "https://pypi.org/project/django-loci/",
    "platform": "Platform Independent",
    "project_url": "https://pypi.org/project/django-loci/",
    "project_urls": {
      "Download": "https://github.com/openwisp/django-loci/releases",
      "Homepage": "http://openwisp.org"
    },
    "release_url": "https://pypi.org/project/django-loci/1.0/",
    "requires_dist": [
      "django (<4.1.0,>=3.0)",
      "channels (~=3.0.4)",
      "django-leaflet (~=0.28.0)",
      "Pillow (~=9.0.0)",
      "geopy (~=2.2.0)",
      "openwisp-utils (~=1.0.0)"
    ],
    "requires_python": "",
    "summary": "Reusable django-app for outdoor and indoor mapping",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13571067,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8a5eb4d50f18dc2fcb287c7f6fd1ac59b7136b6155fc1228247e6cfe29ab15a",
        "md5": "4630a2fb57076f30179c1294fd8a9953",
        "sha256": "ae89bfb87493f2e3bc08505d9ddc3c4d8d3baa3b3cb0a23b5e914f1c26fa1aee"
      },
      "downloads": -1,
      "filename": "django_loci-1.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "4630a2fb57076f30179c1294fd8a9953",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 47494,
      "upload_time": "2022-02-25T22:00:18",
      "upload_time_iso_8601": "2022-02-25T22:00:18.911261Z",
      "url": "https://files.pythonhosted.org/packages/b8/a5/eb4d50f18dc2fcb287c7f6fd1ac59b7136b6155fc1228247e6cfe29ab15a/django_loci-1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfed0b060e82be5a6bd3f770128017b5b101a217cca9b3bef6e11998515baf94",
        "md5": "f9b4a0e84371d99b010f4844842f3e87",
        "sha256": "0d790c6102aa845bda6341e1332d5eebf1792f35a884916d573c0f54fce7b46f"
      },
      "downloads": -1,
      "filename": "django-loci-1.0.tar.gz",
      "has_sig": true,
      "md5_digest": "f9b4a0e84371d99b010f4844842f3e87",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 41921,
      "upload_time": "2022-02-25T22:00:21",
      "upload_time_iso_8601": "2022-02-25T22:00:21.791473Z",
      "url": "https://files.pythonhosted.org/packages/bf/ed/0b060e82be5a6bd3f770128017b5b101a217cca9b3bef6e11998515baf94/django-loci-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}