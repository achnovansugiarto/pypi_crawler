{
  "info": {
    "author": "Loadsmart",
    "author_email": "jaiminho@loadsmart.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# jaiminho\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)\n\nA broker agnostic implementation of outbox and other message resilience patterns for django apps. \n\n![Jaiminho](https://github.com/loadsmart/django-jaiminho/blob/master/assets/jaiminho.jpg?raw=true)\n\n## Installation\n\n\n```sh\npython -m pip install jaiminho\n```\n\nAdd `jaiminho` in the `INSTALLED_APPS` section of your Django app\n\n## Usage\n\nWe provide a @save_to_outbox decorator that you can use in the functions responsible to communicate with external systems (brokers, external APIs, etc). \nBehind the scenes, jaiminho can store those functions calls in a local table in the same database within the current transaction. It can relay those functions calls after a success commit and/or a separate relay command, fixing the dual writes issue.\n\n```python\nfrom jaiminho.send import save_to_outbox\n\n@save_to_outbox\ndef any_external_call(**kwargs):\n    # do something\n    return\n```\n\nConfigure jaiminho options in Django settings.py:\n```python\n\n# JAIMINHO\n\nJAIMINHO_CONFIG = {\n    \"PERSIST_ALL_EVENTS\": False,\n    \"DELETE_AFTER_SEND\": True,\n    \"DEFAULT_ENCODER\": DjangoJSONEncoder,\n    \"PUBLISH_STRATEGY: \"publish-on-commit\"\n    }\n\n```\n\n### Configuration options\n\n- PUBLISH_STRATEGY - Which strategy use to publish events (publish-on-commit, keep-order)\n- PERSIST_ALL_EVENTS - Saves all events and not only the ones that fail, default is False. Only applicable for `\"PUBLISH_STRATEGY\": \"publish-on-commit\"` since all events needs to be stored on keep-order strategy. \n- DELETE_AFTER_SEND - Delete the event from the outbox table immediately after a successful send\n- DEFAULT_ENCODER - Default Encoder for the payload (overwritable in the function call)\n\n### Strategies\n\n#### Keep Order\nThis strategy is similar to transactional outbox [described by Chris Richardson](https://microservices.io/patterns/data/transactional-outbox.html). The decorated function intercepts the function call and saves it on local DB to be executed later. A separate command relayer will keep polling local DB and executing those functions in the same order it was stored. \nBe carefully with this approach, **if any execution fails, the relayer will get stuck**. Otherwise, would not possible to guarantee delivery order.  \n\n#### Publish on commit\n\nThis strategy will always execute the decorated function after current transaction commit. With this approach, we don't depend on a relayer (separate process / cronjob) to execute the decorated function and deliver the message. Failed items will only be executed\nthrough relayer. Despite we can decrease the delay to execute the decorated function with this approach, **we cannot guarantee delivery order**.\n\n\n### Relay Command\nWe already provide a command to relay items from DB, [EventRelayCommand](https://github.com/loadsmart/django-jaiminho/blob/master/jaiminho/management/commands/events_relay.py). The way you should configure depends on the strategy you choose. \nFor example, on **Publish on Commit Strategy** you can configure a cronjob to run every a couple of minutes since only failed items are published by the command relay. If you are using **Keep Order Strategy**, you should run relay command in loop mode as all items will be published by the command, e.g `call_command(events_relay.Command(), run_in_loop=True, loop_interval=0.1)`.  \n\n\n\n### Signals\n\nJaiminho triggers the following Django signals:\n\n| Signal                  | Description                                                                   |\n|-------------------------|--------------------------------------------------------------------------------|\n| event_published         | Triggered when an event is sent successfully                                   |\n| event_failed_to_publish | Triggered when an event failed to be send and it's enqueue to the Outbox table |\n\n\n### How to collect metrics from Jaiminho?\n\nYou could use the Django signals triggered by Jaiminho to collect metrics. \nConsider the following code as example:\n\n````python\nfrom django.dispatch import receiver\n\n@receiver(event_published)\ndef on_event_sent(sender, event_payload, **kwargs):\n    metrics.count(f\"event_sent_successfully {event_payload.get('type')}\")\n\n@receiver(event_failed_to_publish)\ndef on_event_send_error(sender, event_payload, **kwargs):\n    metrics.count(f\"event_failed {event_payload.get('type')}\")\n\n````\n\n### How to clean older events\n\nYou can use Jaiminho's [EventCleanerCommand](https://github.com/loadsmart/django-jaiminho/blob/master/jaiminho/management/commands/event_cleaner.py) in order to do that. It will query for all events that were sent before a given time interval (e.g. last 7 days) and will delete them from the outbox table.\n\nThe default time interval is `7 days`. You can use the `TIME_TO_DELETE` setting to change it. It should be added to `JAIMINHO_CONFIG` and must be a valid [timedelta](https://docs.python.org/3/library/datetime.html#timedelta-objects).\n\n### Relay per stream and Overwrite publish strategy\n\nDifferent streams can have different requirements. You can save separate events per streams by using @save_to_outbox_stream decorator:\n\n````python\n@save_to_outbox_stream(\"my-stream\")\ndef any_external_call(payload, **kwargs):\n    # do something\n    pass\n````\n\nyou can also overwrite publish strategy configure on settings:\n\n````python\n@save_to_outbox_stream(\"my-stream\", PublishStrategyType.KEEP_ORDER)\ndef any_external_call(payload, **kwargs):\n    # do something\n    pass\n````\n\nAnd then, run relay command with stream filter option\n````shell\npython manage.py relay_event True 0.1 my-stream\n````\n\nWhere True is option for run_in_loop, 0.1 is loop_interval and my_stream is the stream name.\n\n\n## Development\n\nCreate a virtualenv\n\n```bash\nvirtualenv venv\npip install -r requirements-dev.txt\ntox -e py39\n```\n## Collaboration\n\nIf you want to improve or suggest improvements, check our CONTRIBUTE.md file.\n\n\n## License\n\nThis project is licensed under MIT License.\n\n## Security\n\nIf you have any security concern or report feel free to reach out to security@loadsmart.com;\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/loadsmart/django-jaiminho",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-jaiminho",
    "package_url": "https://pypi.org/project/django-jaiminho/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-jaiminho/",
    "project_urls": {
      "Changelog": "https://github.com/loadsmart/django-jaiminho/blob/master/CHANGELOG.md",
      "Documentation": "https://github.com/loadsmart/django-jaiminho/blob/master/README.md",
      "Homepage": "https://github.com/loadsmart/django-jaiminho",
      "Source": "https://github.com/loadsmart/django-jaiminho"
    },
    "release_url": "https://pypi.org/project/django-jaiminho/1.1.0/",
    "requires_dist": [
      "Django",
      "sentry-sdk",
      "dill (==0.3.6)"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4",
    "summary": "A broker agnostic implementation of outbox and other message resilience patterns for Django apps",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17122068,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a20703885abe5a1c7906343eb4de41b8d04e1c20eeda9a0ed42405a2595b9ba7",
        "md5": "6deeb93e706c53b7233604e33289f19a",
        "sha256": "35b8c7dbbdec177884df18af1d94e4a859a2ea194c2697343c5319a2360ad7d2"
      },
      "downloads": -1,
      "filename": "django_jaiminho-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6deeb93e706c53b7233604e33289f19a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4",
      "size": 28723,
      "upload_time": "2023-03-02T02:20:01",
      "upload_time_iso_8601": "2023-03-02T02:20:01.812026Z",
      "url": "https://files.pythonhosted.org/packages/a2/07/03885abe5a1c7906343eb4de41b8d04e1c20eeda9a0ed42405a2595b9ba7/django_jaiminho-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}