{
  "info": {
    "author": "Zoran Simic",
    "author_email": "zoran@simicweb.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Utilities"
    ],
    "description": "Fetch collections of git projects\n=================================\n\n.. image:: https://img.shields.io/pypi/v/mgit.svg\n    :target: https://pypi.org/project/mgit/\n    :alt: Version on pypi\n\n.. image:: https://github.com/zsimic/mgit/workflows/Tests/badge.svg\n    :target: https://github.com/zsimic/mgit/actions\n    :alt: Tested with Github Actions\n\n.. image:: https://codecov.io/gh/zsimic/mgit/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/zsimic/mgit\n    :alt: Test code codecov\n\n.. image:: https://img.shields.io/pypi/pyversions/mgit.svg\n    :target: https://pypi.org/project/mgit/\n    :alt: Python versions tested\n\n\nOverview\n========\n\nWith ``mgit``, you can pull/fetch several projects at once,\nand also auto-cleanup dangling branches (from past pull requests).\n\nA colored output is provided if possible, ``mgit`` should come in handy in general for:\n\n- quickly getting an overview of what's up with N git projects\n- fetch/pull N git objects at once\n- clone missing projects (useful if you tend to clone projects from same remote in one common folder)\n\n\nExample usage\n=============\n\n``mgit`` can show you what's the status of all your git projects in a folder, for example my repos::\n\n    ~/dev/github: mgit\n    ~/dev/github: 4 github/zsimic\n         mgit: [master] up to date\n      pickley: [master] 1 diff, up to date*  last fetch 1w 4d ago\n        runez: [master] up to date*  last fetch 1w 4d ago\n    setupmeta: [master] up to date*  last fetch 3d 23h ago\n\n\nHere we can see that:\n\n- There are 4 git repos in folder ``~/dev/github``\n\n- All 4 come from ``github/zsimic``\n\n- 3 of them haven't been fetched in a while\n\nWe can fetch them all at once with ``--fetch`` (or ``-f``)::\n\n    ~/dev/github: mgit --fetch\n    ~/dev/github: 4 github/zsimic\n         mgit: [master] up to date\n      pickley: [master] 1 diff, up to date\n        runez: [master] behind 2\n    setupmeta: [master] up to date\n\n\nNow all projects have been refreshed, and we can see there's nothing new in 2 of them,\nbut one is 2 commits behind (ie: 2 commits are on the remote, not pulled yet).\nThe output also shows that one of the projects has uncommitted files.\n\nModified files are shown (by default) if only one project is in scope, for example::\n\n    ~/dev/github: mgit pickley\n    pickley: [master] 1 diff, up to date\n       M tox.ini\n\n\nAbove, we can see that the modified file in question is ``tox.ini`` in that project.\nWe can get the same effect using the ``--verbose`` (or ``-v``) flag,\nlike for example with 2 projects with modified files::\n\n    ~/dev/github: mgit -v\n    ~/dev/github: 4 github/zsimic\n    mgit: [master] 1 diff, up to date\n       M README.rst\n    pickley: [master] 1 diff, up to date\n       M tox.ini\n    runez: [master] up to date\n    setupmeta: [master] up to date\n\n\nSynopsis::\n\n    ~/dev/github: mgit --help\n    Usage: mgit [OPTIONS] [TARGET]\n\n      Fetch collections of git projects\n\n    Options:\n      --version                       Show the version and exit.\n      --debug                         Show debugging information.\n      --color / --no-color            Use colors (on by default on ttys)\n      --log PATH                      Override log file location.\n      --clean [show|local|remote|all|reset]\n                                      Auto-clean branches\n      -f, --fetch                     Fetch from all remotes\n      -p, --pull                      Pull from tracking remote\n      -s, --short / -v, --verbose     Short/verbose output\n      -cs                             Handy shortcut for '--clean show'\n      -cl                             Handy shortcut for '--clean local'\n      -cr                             Handy shortcut for '--clean remote'\n      -ca                             Handy shortcut for '--clean all'\n      -h, --help                      Show this message and exit.\n\nInstallation\n============\n\nEasiest way to get mgit is via pickley_ or pipx_::\n\n    pickley install mgit\n\n\nor::\n\n    pipx install mgit\n\n\nYou can also compile from source::\n\n    git clone https://github.com/zsimic/mgit.git\n    cd mgit\n    tox -e venv\n\n    .venv/bin/mgit --help\n\n    source .venv/bin/activate\n    mgit --help\n\n\n.. _pickley: https://pypi.org/project/pickley/\n\n.. _pipx: https://pypi.org/project/pipx/\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zsimic/mgit",
    "keywords": "multiple,git,repos",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mgit",
    "package_url": "https://pypi.org/project/mgit/",
    "platform": "",
    "project_url": "https://pypi.org/project/mgit/",
    "project_urls": {
      "Homepage": "https://github.com/zsimic/mgit"
    },
    "release_url": "https://pypi.org/project/mgit/1.2.1/",
    "requires_dist": [
      "cached-property (==1.5.2)",
      "click (==7.1.2)",
      "runez (==2.1.6)"
    ],
    "requires_python": "",
    "summary": "Fetch collections of git projects",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10562833,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5da4c3203eb78a9d4272838c864726d3774d641ca051694247a405e0f8858056",
        "md5": "ab26922bbc45f20f5b9708099f87a0be",
        "sha256": "e915201f099766fd22884dfc755151f5cdaf320c5dd98a4364ffa32fabbc6b68"
      },
      "downloads": -1,
      "filename": "mgit-1.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ab26922bbc45f20f5b9708099f87a0be",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16882,
      "upload_time": "2020-10-25T21:11:00",
      "upload_time_iso_8601": "2020-10-25T21:11:00.201253Z",
      "url": "https://files.pythonhosted.org/packages/5d/a4/c3203eb78a9d4272838c864726d3774d641ca051694247a405e0f8858056/mgit-1.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d240547ba6d8257dedd89ee9ae918d3b7ccb572fe5d4cba879733a0eb97b488d",
        "md5": "5ca1bef4bb5104dd7556fe03f543b5cc",
        "sha256": "12877274142a28a1c4146bc76d3051afe02f6b8278087a3276523fb7edf6a555"
      },
      "downloads": -1,
      "filename": "mgit-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5ca1bef4bb5104dd7556fe03f543b5cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17575,
      "upload_time": "2020-10-25T21:11:01",
      "upload_time_iso_8601": "2020-10-25T21:11:01.300823Z",
      "url": "https://files.pythonhosted.org/packages/d2/40/547ba6d8257dedd89ee9ae918d3b7ccb572fe5d4cba879733a0eb97b488d/mgit-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}