{
  "info": {
    "author": "Roy Keene",
    "author_email": "pypi@rkeene.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python LT8900 via SPI\n\nThis Python module enables a Python to talk to an LT8900 radio attached to an serial peripheral interface (SPI).\n\n## API\n### Synopsis\n\n    lt8900_spi.Radio(spi_bus, spi_dev, config = None) -> instance\n    lt8900_spi.Radio.put_register(reg, value) -> value\n    lt8900_spi.Radio.put_register_bits(reg, bits_dict) -> value\n    lt8900_spi.Radio.get_register(reg) -> value\n    lt8900_spi.Radio.get_register_bits(reg, value = None) -> dictionary\n    lt8900_spi.Radio.configure(config) -> None\n    lt8900_spi.Radio.initialize() -> boolean\n    lt8900_spi.Radio.set_channel(channel) -> dictionary\n    lt8900_spi.Radio.set_syncword(syncword) -> None\n    lt8900_spi.Radio.fill_fifo(message, include_length = True) -> list\n    lt8900_spi.Radio.transmit(message, channel = None) -> boolean\n    lt8900_spi.Radio.multi_transmit(message, channels, retries = 3, delay = 0.1) -> boolean\n    lt8900_spi.Radio.start_listening(channel) -> boolean\n    lt8900_spi.Radio.stop_listening() -> boolean\n    lt8900_spi.Radio.receive(channel = None, wait = False, length = None, wait_time = 0.1) -> list\n\n### instance.get\\_register\\_bits\n\nLow-level primitive to get a named register with bitfields expanded to names.\n\n### instance.put\\_register\\_bits\n\nLow-level primitive to set a named register by bitfield value.\n\n### instance.set\\_syncword\n\nHigh-level interface to syncword mechanism.  The syncword can be 1, 2, 3, or 4 16-bit words long and should be provided as an array.\n\nExample:\n\n    instance.set_syncword([1, 2, 3, 4])\n\n### instance.transmit\n\nTransmit a message.  If a channel is specified transmit on that channel -- otherwise the current channel is queried and then used.\n\n### instance.multi\\_transmit\n\nTransmit a message across multiple channels multiple times.  This is a common pattern so this function is provided for convience.\n\n## Example\n\n    #! /usr/bin/env python3\n\n    import time\n\n    import gpiozero\n    import lt8900_spi\n\n    # Need to keep this attached to drive the line high -- if the object disappears then\n    # the GPIO port gets reconfigured as an input port\n    # Note broadcom pin numbers are used\n    reset_gpio = gpiozero.LED(24)\n    reset_gpio.on()\n    def reset_module_via_gpio():    \n    \treset_gpio.off()\n    \ttime.sleep(0.1)\n    \treset_gpio.on()\n    \ttime.sleep(0.1)\n\n    radio = lt8900_spi.Radio(0, 0, {\n    \t'reset_command': reset_module_via_gpio\n    })\n\n    if not radio.initialize():\n    \traise ValueError('Initialize failed')\n\n    radio.set_syncword([0x258B, 0x147A])\n\n    radio.multi_transmit([0xB0, 0x51, 0xF0, 0x00, 0x00, 0x01, 212], [9, 40, 71], delay = 0.5)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://chiselapp.com/user/rkeene/repository/lt8900_spi/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lt8900-spi",
    "package_url": "https://pypi.org/project/lt8900-spi/",
    "platform": "",
    "project_url": "https://pypi.org/project/lt8900-spi/",
    "project_urls": {
      "Homepage": "https://chiselapp.com/user/rkeene/repository/lt8900_spi/"
    },
    "release_url": "https://pypi.org/project/lt8900-spi/2.2/",
    "requires_dist": [
      "spidev (>=3.0.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Python interface to an LT8900 connected via SPI",
    "version": "2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7263744,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a036efb8439018fa7f6144a79f474cc956698cb16c11e5f22f5589baace940a",
        "md5": "be1fc9fa9d4a764ec45fac05a2adef52",
        "sha256": "73fad65d49c6370d909edf5a87d49e7821ecce710ab72c265dbdb1b58fe0f30f"
      },
      "downloads": -1,
      "filename": "lt8900_spi-2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be1fc9fa9d4a764ec45fac05a2adef52",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7076,
      "upload_time": "2020-04-30T03:30:33",
      "upload_time_iso_8601": "2020-04-30T03:30:33.348866Z",
      "url": "https://files.pythonhosted.org/packages/9a/03/6efb8439018fa7f6144a79f474cc956698cb16c11e5f22f5589baace940a/lt8900_spi-2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cfa9d259a2ad6e26d643f5ef2d6affabfb875dca14c3118a74085209123f12d8",
        "md5": "ec17f083f907c8756513005639fe44ee",
        "sha256": "f21914af35021a212a9a9fd5e99b1412ea3a2ad7c30c1fd764015367bf40d86c"
      },
      "downloads": -1,
      "filename": "lt8900_spi-2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ec17f083f907c8756513005639fe44ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6061,
      "upload_time": "2020-04-30T03:30:34",
      "upload_time_iso_8601": "2020-04-30T03:30:34.534087Z",
      "url": "https://files.pythonhosted.org/packages/cf/a9/d259a2ad6e26d643f5ef2d6affabfb875dca14c3118a74085209123f12d8/lt8900_spi-2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}