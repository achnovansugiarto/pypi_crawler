{
  "info": {
    "author": "Ophir LOJKINE",
    "author_email": "pere.jobs@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries"
    ],
    "description": "# marshmallow-dataclass\n\n[![Build Status](https://travis-ci.org/lovasoa/marshmallow_dataclass.svg?branch=master)](https://travis-ci.org/lovasoa/marshmallow_dataclass)\n[![PyPI version](https://badge.fury.io/py/marshmallow-dataclass.svg)](https://badge.fury.io/py/marshmallow-dataclass)\n[![marshmallow 3 compatible](https://badgen.net/badge/marshmallow/3)](https://marshmallow.readthedocs.io/en/latest/upgrading.html)\n\nAutomatic generation of [marshmallow](https://marshmallow.readthedocs.io/) schemas from dataclasses.\n\n```python\nfrom dataclasses import dataclass, field\nfrom typing import List, Optional\n\nimport marshmallow\nimport marshmallow_dataclass\n\n\n@dataclass\nclass Building:\n    # field metadata is used to instantiate the marshmallow field\n    height: float = field(metadata={\"validate\": marshmallow.validate.Range(min=0)})\n    name: str = field(default=\"anonymous\")\n\n\n@dataclass\nclass City:\n    name: Optional[str]\n    buildings: List[Building] = field(default_factory=list)\n\n\nCitySchema = marshmallow_dataclass.class_schema(City)\n\ncity = CitySchema().load(\n    {\"name\": \"Paris\", \"buildings\": [{\"name\": \"Eiffel Tower\", \"height\": 324}]}\n)\n# => City(name='Paris', buildings=[Building(height=324.0, name='Eiffel Tower')])\n\ncity_dict = CitySchema().dump(city)\n# => {'name': 'Paris', 'buildings': [{'name': 'Eiffel Tower', 'height': 324.0}]}\n```\n\n## Why\n\nUsing schemas in Python often means having both a class to represent your data and a class to represent its schema, which results in duplicated code that could fall out of sync.\nAs of Python 3.6, types can be defined for class members, which allows libraries to generate schemas automatically.\n\nTherefore, you can document your APIs in a way that allows you to statically check that the code matches the documentation.\n\n## Installation\n\nThis package [is hosted on PyPI](https://pypi.org/project/marshmallow-dataclass/).\n\n```shell\npip3 install marshmallow-dataclass\n```\n\nYou may optionally install the following extras:\n\n- `enum`, for translating python enums to [marshmallow-enum](https://github.com/justanr/marshmallow_enum).\n- `union`, for translating python [`Union` types](https://docs.python.org/3/library/typing.html#typing.Union) into [`marshmallow-union`](https://pypi.org/project/marshmallow-union/) fields.\n\n```shell\npip3 install marshmallow-dataclass[enum,union]\n```\n\n### marshmallow 2 support\n\n`marshmallow-dataclass` no longer supports marshmallow 2.\nInstall `marshmallow_dataclass<6.0` if you need marshmallow 2 compatibility.\n\n## Usage\n\nUse the [`class_schema`](https://lovasoa.github.io/marshmallow_dataclass/html/marshmallow_dataclass.html#marshmallow_dataclass.class_schema)\nfunction to generate a marshmallow [Schema](https://marshmallow.readthedocs.io/en/latest/api_reference.html#marshmallow.Schema)\nclass from a [`dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass).\n\n```python\nfrom dataclasses import dataclass\nfrom datetime import date\n\nimport marshmallow_dataclass\n\n\n@dataclass\nclass Person:\n    name: str\n    birth: date\n\n\nPersonSchema = marshmallow_dataclass.class_schema(Person)\n```\n\n### Customizing generated fields\n\nTo pass arguments to the generated marshmallow fields (e.g., `validate`, `load_only`, `dump_only`, etc.),\npass them to the `metadata` argument of the\n[`field`](https://docs.python.org/3/library/dataclasses.html#dataclasses.field) function.\n\n```python\nfrom dataclasses import dataclass, field\nimport marshmallow_dataclass\nimport marshmallow.validate\n\n\n@dataclass\nclass Person:\n    name: str = field(\n        metadata=dict(description=\"The person's first name\", load_only=True)\n    )\n    height: float = field(metadata=dict(validate=marshmallow.validate.Range(min=0)))\n\n\nPersonSchema = marshmallow_dataclass.class_schema(Person)\n```\n\n### `@dataclass` shortcut\n\n`marshmallow_dataclass` provides a `@dataclass` decorator that behaves like the standard library's \n`@dataclasses.dataclass` and adds a `Schema` attribute with the generated marshmallow\n[Schema](https://marshmallow.readthedocs.io/en/2.x-line/api_reference.html#marshmallow.Schema).\n\n```python\n# Use marshmallow_dataclass's @dataclass shortcut\nfrom marshmallow_dataclass import dataclass\n\n\n@dataclass\nclass Point:\n    x: float\n    y: float\n\n\nPoint.Schema().dump(Point(4, 2))\n# => {'x': 4, 'y': 2}\n```\n\nNote: Since the `.Schema` property is added dynamically, it can confuse type checkers.\nTo avoid that, you can declare `Schema` as a [`ClassVar`](https://docs.python.org/3/library/typing.html#typing.ClassVar).\n\n```python\nfrom typing import ClassVar, Type\n\nfrom marshmallow_dataclass import dataclass\nfrom marshmallow import Schema\n\n\n@dataclass\nclass Point:\n    x: float\n    y: float\n    Schema: ClassVar[Type[Schema]] = Schema\n```\n\n### Customizing the base Schema\n\nIt is also possible to derive all schemas from your own \nbase Schema class\n(see [marshmallow's documentation about extending `Schema`](https://marshmallow.readthedocs.io/en/stable/extending.html)).\nThis allows you to implement custom (de)serialization\nbehavior, for instance renaming fields:\n\n```python\nimport marshmallow\nimport marshmallow_dataclass\n\n\nclass UppercaseSchema(marshmallow.Schema):\n    \"\"\"A Schema that marshals data with uppercased keys.\"\"\"\n\n    def on_bind_field(self, field_name, field_obj):\n        field_obj.data_key = (field_obj.data_key or field_name).upper()\n\n\nclass Sample:\n    my_text: str\n    my_int: int\n\n\nSampleSchema = marshmallow_dataclass.class_schema(Sample, base_schema=UppercaseSchema)\n\nSampleSchema().dump(Sample(my_text=\"warm words\", my_int=1))\n# -> {\"MY_TEXT\": \"warm words\", \"MY_INT\": 1}\n```\n\nYou can also pass `base_schema` to `marshmallow_dataclass.dataclass`.\n\n```python\n@marshmallow_dataclass.dataclass(base_schema=UppercaseSchema)\nclass Sample:\n    my_text: str\n    my_int: int\n```\n\nSee [marshmallow's documentation about extending `Schema`](https://marshmallow.readthedocs.io/en/stable/extending.html).\n\n### Custom NewType declarations\n\nThis library exports a `NewType` function to create types that generate [customized marshmallow fields](https://marshmallow.readthedocs.io/en/stable/custom_fields.html#creating-a-field-class).\n\nKeyword arguments to `NewType` are passed to the marshmallow field constructor.\n\n```python\nimport marshmallow.validate\nfrom marshmallow_dataclass import NewType\n\nIPv4 = NewType(\n    \"IPv4\", str, validate=marshmallow.validate.Regexp(r\"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}$\")\n)\n```\n\nYou can also pass a marshmallow field `NewType`.\n\n```python\nimport marshmallow\nfrom marshmallow_dataclass import NewType\n\nEmail = NewType(\"Email\", str, field=marshmallow.fields.Email)\n```\n\n### `Meta` options\n\n[`Meta` options](https://marshmallow.readthedocs.io/en/3.0/api_reference.html#marshmallow.Schema.Meta) are set the same way as a marshmallow `Schema`.\n\n```python\nfrom marshmallow_dataclass import dataclass\n\n\n@dataclass\nclass Point:\n    x: float\n    y: float\n\n    class Meta:\n        ordered = True\n```\n\n## Documentation\n\nThe project documentation is hosted on GitHub Pages: https://lovasoa.github.io/marshmallow_dataclass/\n\n## Usage warning\n\nThis library depends on python's standard [typing](https://docs.python.org/3/library/typing.html) library, which is [provisional](https://docs.python.org/3/glossary.html#term-provisional-api).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lovasoa/marshmallow_dataclass",
    "keywords": "marshmallow,dataclass,serialization",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marshmallow-dataclass",
    "package_url": "https://pypi.org/project/marshmallow-dataclass/",
    "platform": "",
    "project_url": "https://pypi.org/project/marshmallow-dataclass/",
    "project_urls": {
      "Homepage": "https://github.com/lovasoa/marshmallow_dataclass"
    },
    "release_url": "https://pypi.org/project/marshmallow-dataclass/7.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python library to convert dataclasses into marshmallow schemas.",
    "version": "7.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17311507,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcaee312a499795759f3ffd629febe91ea42782c2ac9ed84761402c92d0a9356",
        "md5": "ee08524a2ef919fca5afb54ed5b0b081",
        "sha256": "b7008872de2dab7a3a6f648416d13920ecb993b91ac36758cb26d90025224b7d"
      },
      "downloads": -1,
      "filename": "marshmallow_dataclass-7.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ee08524a2ef919fca5afb54ed5b0b081",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10040,
      "upload_time": "2019-10-29T10:20:18",
      "upload_time_iso_8601": "2019-10-29T10:20:18.461660Z",
      "url": "https://files.pythonhosted.org/packages/bc/ae/e312a499795759f3ffd629febe91ea42782c2ac9ed84761402c92d0a9356/marshmallow_dataclass-7.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}