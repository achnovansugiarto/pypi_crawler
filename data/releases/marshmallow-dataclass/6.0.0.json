{
  "info": {
    "author": "Ophir LOJKINE",
    "author_email": "pere.jobs@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries"
    ],
    "description": "# marshmallow_dataclass\n[![Build Status](https://travis-ci.org/lovasoa/marshmallow_dataclass.svg?branch=master)](https://travis-ci.org/lovasoa/marshmallow_dataclass)\n[![PyPI version](https://badge.fury.io/py/marshmallow-dataclass.svg)](https://badge.fury.io/py/marshmallow-dataclass)\n\nAutomatic generation of [marshmallow](https://marshmallow.readthedocs.io/) schemas from dataclasses.\n\nSpecifying a schema to which your data should conform is very useful, both for (de)serialization and for documentation.\nHowever, using schemas in python often means having both a class to represent your data and a class to represent its schema, which means duplicated code that could fall out of sync. With the new features of python 3.6, types can be defined for class members, and that allows libraries like this one to generate schemas automatically.\n\nAn use case would be to document APIs (with [flasgger](https://github.com/rochacbruno/flasgger#flasgger), for instance) in a way that allows you to statically check that the code matches the documentation.\n\n## How to use\n\nYou simply import\n[`marshmallow_dataclass.dataclass`](https://lovasoa.github.io/marshmallow_dataclass/html/marshmallow_dataclass.html#marshmallow_dataclass.dataclass)\ninstead of\n[`dataclasses.dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass).\nIt adds a `Schema` property to the generated class,\ncontaining a marshmallow\n[Schema](https://marshmallow.readthedocs.io/en/2.x-line/api_reference.html#marshmallow.Schema)\nclass.\n\nIf you need to specify custom properties on your marshmallow fields\n(such as `attribute`, `error`, `validate`, `required`, `dump_only`, `error_messages`, `description` ...)\nyou can add them using the `metadata` argument of the\n[`field`](https://docs.python.org/3/library/dataclasses.html#dataclasses.field)\nfunction.\n\n```python\nfrom dataclasses import field\nfrom marshmallow_dataclass import dataclass # Importing from marshmallow_dataclass instead of dataclasses\nimport marshmallow.validate\nfrom typing import List, Optional\n\n@dataclass\nclass Building:\n  # The field metadata is used to instantiate the marshmallow field\n  height: float = field(metadata={'validate': marshmallow.validate.Range(min=0)})\n  name: str = field(default=\"anonymous\")\n\n\n@dataclass\nclass City:\n  name: Optional[str]\n  buildings: List[Building] = field(default_factory=lambda: [])\n\n# City.Schema contains a marshmallow schema class\ncity = City.Schema().load({\n    \"name\": \"Paris\",\n    \"buildings\": [\n        {\"name\": \"Eiffel Tower\", \"height\":324}\n    ]\n})\n\n# Serializing city as a json string\ncity_json = City.Schema().dumps(city)\n```\n\nThe previous  syntax is very convenient, as the only change\nyou have to apply to your existing code is update the\n`dataclass` import.\n\nHowever, as the `.Schema` property is added dynamically,\nit can confuse type checkers.\nIf you want to avoid that, you can also use the standard\n`dataclass` decorator, and generate the schema manually\nusing\n[`class_schema`](https://lovasoa.github.io/marshmallow_dataclass/html/marshmallow_dataclass.html#marshmallow_dataclass.class_schema)\n:\n\n```python\nfrom dataclasses import dataclass\nfrom datetime import datetime\nimport marshmallow_dataclass\n\n@dataclass\nclass Person:\n    name: str\n    birth: datetime\n\nPersonSchema = marshmallow_dataclass.class_schema(Person)\n```\n\nYou can also declare the schema as a\n[`ClassVar`](https://docs.python.org/3/library/typing.html#typing.ClassVar):\n\n```python\nfrom marshmallow_dataclass import dataclass\nfrom marshmallow import Schema\nfrom typing import ClassVar, Type\n\n@dataclass\nclass Point:\n  x:float\n  y:float\n  Schema: ClassVar[Type[Schema]] = Schema\n```\n\nYou can specify the\n[`Meta`](https://marshmallow.readthedocs.io/en/3.0/api_reference.html#marshmallow.Schema.Meta)\njust as you would in a marshmallow Schema:\n\n```python\nfrom marshmallow_dataclass import dataclass\n\n@dataclass\nclass Point:\n  x:float\n  y:float\n  class Meta:\n    ordered = True\n```\n\n## Installation\nThis package [is hosted on pypi](https://pypi.org/project/marshmallow-dataclass/).\nYou can install it with a simple :\n\n```shell\npip3 install marshmallow-dataclass\n```\n\nThis package also has the following optional features:\n - `enum`, for translating python enums to \n[marshmallow-enum](https://github.com/justanr/marshmallow_enum).\n - `union`, for translating python\n [`Union` types](https://docs.python.org/3/library/typing.html#typing.Union)\n into [`marshmallow-union`](https://pypi.org/project/marshmallow-union/)\n fields.\n \nYou can install these features with:\n\n```shell \npip3 install marshmallow-dataclass[enum,union]\n```\n\n#### For marshmallow 2\n`marshmallow-dataclass` does not support the old\nmarshmallow 2 anymore.\nYou can install a version before `6.0`\nif you want marshmallow 2 support.\n\n## Documentation\n\nThe project documentation is hosted on github pages:\n - [documentation](https://lovasoa.github.io/marshmallow_dataclass/).\n\n## Usage warning\n\nThis library depends on python's standard\n[typing](https://docs.python.org/3/library/typing.html)\nlibrary, which is\n[provisional](https://docs.python.org/3/glossary.html#term-provisional-api).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lovasoa/marshmallow_dataclass",
    "keywords": "marshmallow,dataclass,serialization",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marshmallow-dataclass",
    "package_url": "https://pypi.org/project/marshmallow-dataclass/",
    "platform": "",
    "project_url": "https://pypi.org/project/marshmallow-dataclass/",
    "project_urls": {
      "Homepage": "https://github.com/lovasoa/marshmallow_dataclass"
    },
    "release_url": "https://pypi.org/project/marshmallow-dataclass/6.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python library to convert dataclasses into marshmallow schemas.",
    "version": "6.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17311507,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12caf2dc27685df46a13e0a677df927743d201cda4f00e26d25d3405f014df0b",
        "md5": "683a7cdb285e5dea8f0c30599c7986ef",
        "sha256": "45f94025bf74256b2b25b40c14820fad8f17d1db2c766e7f0684a6b58b96a052"
      },
      "downloads": -1,
      "filename": "marshmallow_dataclass-6.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "683a7cdb285e5dea8f0c30599c7986ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7252,
      "upload_time": "2019-09-10T09:15:34",
      "upload_time_iso_8601": "2019-09-10T09:15:34.922634Z",
      "url": "https://files.pythonhosted.org/packages/12/ca/f2dc27685df46a13e0a677df927743d201cda4f00e26d25d3405f014df0b/marshmallow_dataclass-6.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}