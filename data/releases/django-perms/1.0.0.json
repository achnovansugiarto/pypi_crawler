{
  "info": {
    "author": "Matt Johnson",
    "author_email": "mdj2@pdx.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "# Django Perms\r\n\r\n## Install\r\n\r\n`pip install django-perms`\r\n\r\nAdd 'permissions' to your installed apps.\r\n\r\n## Usage\r\n\r\nConsider the following functions (in widgets/perms.py):\r\n\r\n```python\r\ndef can_create_widget(user):\r\n    if user.is_admin:\r\n        return True\r\n\r\n    if Widget.objects.filter(created_by=user).count() <= MAX_WIDGETS_PER_USER:\r\n        return True\r\n\r\ndef can_edit_widget(user, widget):\r\n    if user.is_admin:\r\n        return True\r\n\r\n    if user.pk == widget.created_by_id:\r\n        return True\r\n```\r\n\r\nAll permissions functions *must* take a User model object as a first argument. The latter permission function takes a second argument, some kind of object to check permissions against.\r\n\r\nTo register these as permission functions, use the `@permission` decorator:\r\n\r\n```python\r\n...\r\nfrom permissions import permission\r\n\r\n@permission\r\ndef can_create_widget(user):\r\n    ...\r\n\r\n@permission(model=Widget)\r\ndef can_edit_widget(user, widget):\r\n    ...\r\n\r\n@permission(model=Widget, allow_anonymous=True)\r\ndef can_view_widget(user, widget):\r\n    if user.is_anonymous():\r\n        ... allow access to public widgets\r\n    else:\r\n        ... allow access to public widgets and user's widgets\r\n```\r\n\r\nPermission functions that take a single argument (the user object), can use the simple `@permission` decorator. Permission functions that take a second argument *must* specify the model class that the second argument to the permission function is expected to be.\r\n\r\nNow in widgets/views.py, you can do something like:\r\n\r\n```python\r\n# the `decorators` attribute on the widgets/perms.py module was added at runtime by the permissions app\r\nfrom .perms import decorators\r\n\r\n@decorators.can_create_widget\r\ndef create(request):\r\n    return HttpResponse(\"Create a widget!\")\r\n\r\n@decorators.can_edit_widget\r\ndef edit(request, widget_id):\r\n    widget = get_object_or_404(Widget, pk=widget_id)\r\n    return HttpResponse(\"You can edit %s\" % str(widget))\r\n\r\n# if you want to lookup the widget by its name field instead of the default,\r\n# the pk, add a field argument to the decorator\r\n@decorators.can_edit_widget(field=\"name\")\r\ndef edit(request, name):\r\n    widget = get_object_or_404(Widget, name=name)\r\n    return HttpResponse(\"You can edit %s\" % str(widget))\r\n```\r\n\r\nIn your templates, you can do:\r\n\r\n```django\r\n{% load permissions %}\r\n\r\n{% if user|can_create_widget %}\r\n    You can create widgets!\r\n{% endif %}\r\n\r\n{% if user|can_edit_widget:widget_object %}\r\n    You can edit this widget!\r\n{% endif %}\r\n```\r\n\r\n\r\n## How it Works\r\n\r\nWhen you register a permission function using `@permission`, a Django template filter is created based on the function. It also creates a simple decorator, which can be used on a Django view. The decorator takes the `request.user` object, and passes it to the permission function. If the permission function returns a truthy value, the Django view is loaded. Otherwise a PermissionDenied exception is raised.\r\n\r\nIn the more complicated `@permission(model=Widget)` case, a Django template filter is created. It also creates a decorator which can be used on a Django view. **This decorator assumes the second argument to the Django view is the PK of the model class you specified.** It then performs a model lookup using that PK, and passes the `request.user` object, and the model object to the permission function. If the model object DoesNotExist, a 404 is raised.\r\n\r\nWhen a PermissionDenied error is raised, the request object gets a `permission_name` attribute containing the permission function's name.\r\n\r\nAnonymous users will be sent to the login page unless `allow_anonymous=True` is passed to `@permission`.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PSU-OIT-ARC/django-perms",
    "keywords": "",
    "license": "UNKNOWN",
    "maintainer": "Wyatt Baldwin",
    "maintainer_email": "wyatt.baldwin@pdx.edu",
    "name": "django-perms",
    "package_url": "https://pypi.org/project/django-perms/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-perms/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/PSU-OIT-ARC/django-perms"
    },
    "release_url": "https://pypi.org/project/django-perms/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Syntactic sugar for handling permission functions in views, templates and in code",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3778623,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "622f8561151960fad033c2dd8e1b9ebea53413514b2755c08a4014b9361a697e",
        "md5": "403923f5e0dc315ac0891dcd8e891bbc",
        "sha256": "b933bddd83c9049e4bf0b628469166072cfe2d919f0ccac2599ddae7caf44721"
      },
      "downloads": -1,
      "filename": "django-perms-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "403923f5e0dc315ac0891dcd8e891bbc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11683,
      "upload_time": "2015-03-25T17:57:27",
      "upload_time_iso_8601": "2015-03-25T17:57:27.049137Z",
      "url": "https://files.pythonhosted.org/packages/62/2f/8561151960fad033c2dd8e1b9ebea53413514b2755c08a4014b9361a697e/django-perms-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}