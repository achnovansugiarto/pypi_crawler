{
  "info": {
    "author": "Wyatt Baldwin",
    "author_email": "wbaldwin@pdx.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# Django Perms\n\n[![Build Status](https://travis-ci.org/PSU-OIT-ARC/django-perms.svg?branch=develop)](https://travis-ci.org/PSU-OIT-ARC/django-perms)\n\n`django-perms` provides a simple way to add authorization checks to\nDjango views. It takes a different approach to authorization compared to\npackages like `django-guardian`. `django-perms` doesn't store any\npermission state in the database. Instead, you define functions that\nreturn `True` or `False` depending on whether the user is authorized to\ndo something. You are free to implement these functions however you see\nfit. This allows for coarse permissions such as `user.is_staff` and more\nfine-grained permissions based on, e.g., whether a user has access to\na specific model instance.\n\n## Install\n\nAdd `'django-perms'` to `install_requires` and/or to `requirements.txt`.\n\nOr install it directly with pip:\n\n    pip install django-perms\n\nIf you want to use permissions template filters, add `'permissions'` to\nyour project's `INSTALLED_APPS` setting.\n\n## Usage\n\nCreate a module named `perms` in the top level of your Django project.\nIn this module, create a permissions registry:\n\n    # project/package/perms.py\n    from permissions import PermissionsRegistry\n    permissions = PermissionsRegistry()\n\nNOTE: You can create the permissions registry anywhere; creating it in\na module name `perms` is just a convention.\n\nIf you have some permissions that will be useful across more than one of\nyour Django apps, the top level `perms` module is a good place to define\nthem:\n\n    @permissions.register\n    def is_staff(user):\n        return user.is_staff\n\nThe `is_staff` permission can be applied to a view like so:\n\n    from package.perms import permissions\n\n    @permissions.required('is_staff')\n    def some_view_only_accessible_by_staff(request):\n        pass  # Do important stuff\n\nNote that all permissions functions *must* take a User model object as\ntheir first argument.\n\nApp-specific permissions are typically defined in a module named `perms`\nin the app's package. For example, let's say you have a `widgets` app in\nyour project, then you might define some permissions like so:\n\n    # project/package/widgets/perms.py\n    from package.perms import permissions\n\n    @permissions.register\n    def can_create_widget(user):\n        if user.is_staff:\n            return True\n        num_widgets = Widget.objects.filter(created_by=user).count()\n        return num_widgets <= MAX_WIDGETS\n\n    @permissions.register(model=Widget)\n    def can_edit_widget(user, widget):\n        if user.is_staff:\n            return True\n        return user == widget.owner\n\n    @permissions.register(model=Widget, allow_anonymous=True)\n    def can_view_widget(user, widget):\n        if user.is_staff:\n            return True\n        if user.is_anonymous():\n            return widget.is_public\n        return user == widget.owner\n\nThose widget permissions can be applied to your widget views like this:\n\n    # project/package/widgets/views.py\n    from django.http import HttpResponse\n    from package.perms import permissions\n    from .models import Widget\n\n    @permissions.require('can_create_widget')\n    def create_widget(request):\n        # Create a widget here\n        return HttpResponse('Widget created')\n\n    @permissions.require('can_edit_widget', model=Widget)\n    def edit_widget(request, widget_id):\n        widget = get_object_or_404(Widget, pk=widget_id)\n        # Edit the widget here\n        return HttpResponse('Edited %s' % widget)\n\n    # If you want to look up widgets by a field other than the primary\n    # key field, you can specify the `field` option:\n    @permissions.require('can_edit_widget', field='name')\n    def edit_widget(request, name):\n        widget = get_object_or_404(Widget, name=name)\n        return HttpResponse('Edited %s' % widget)\n\nIf you're using class-based views, you can apply a permission to a class\nor to a method:\n\n    @permissions.require('xyz')\n    class MyView(View):\n\n        # All methods require the 'xyz' permission.\n\n        def get(request):\n            pass\n\n        def post(request):\n            pass\n\n    class MyOtherView(View):\n\n        # Only the post method requires the 'xyz' permission. Other\n        # methods are unprotected.\n\n        def get(request):\n            pass\n\n        @permissions.require('xyz')\n        def post(request):\n            pass\n\nWhen a permission is registered, a corresponding template filter is also\ncreated. Given the permissions registered above, you can do this in your\ntemplates:\n\n    {% load permissions %}\n\n    {% if user|is_staff %}\n        Hello, staff user.\n    {% endif %}\n\n    {% if user|can_create_widget %}\n        You can create widgets!\n    {% endif %}\n\n    {% if user|can_edit_widget:widget %}\n        You can edit this widget!\n    {% endif %}\n\n## Permissions Registered with a Model\n\nWhen registering a permission that operates on a model, it's assumed\nthat the second argument of any view function requiring that permission\nis the model lookup field (typically a primary key):\n\n    @permissions.register(model=Fruit)\n    def can_eat_fruit(user, fruit):\n        return not user.is_allergic_to(fruit)\n\n    @permissions.require('can_eat_fruit')\n    def consume_fruit_view(request, fruit_id):\n        pass # Consume the fruit if allowed\n\nThe `fruit_id` passed to the `consume_fruit_view` will be used by the\npermissions machinery to load a `Fruit` object, which will be passed\ninto the `can_eat_fruit` permission function.\n\nWhen using class-based views, the `self` arg is skipped when looking for\nthe lookup field.\n\n## Allowing Staff and/or Superusers Access to All Views by Default\n\nIf you find yourself writing `if user.is_staff: return True` at the top\nof most or all your permission functions, you can allow staff permission\nto access all views by default:\n\n    permissions = PermissionsRegistry(is_staff=True)\n\nIf you have a view that shouldn't be accessible to staff for some\nreason, you can override the default `is_staff` setting on a per-\npermission basis:\n\n    @permissions.register(is_staff=False)\n    def is_superuser(user):\n        return user.is_superuser\n\nThere's an analogous `is_superuser` option.\n\n## Anonymous Users\n\nBy default, anonymous users will be redirected to the login page. In\nsome cases, it may make sense to give anonymous users a chance to access\ncertain views.\n\nFor example, if you have an `Article` model with an `is_published`\nfield, you may want to allow anonymous users to access articles that\nhave been published. To allow this, you'd define and require a\npermission like this:\n\n    # perms.py\n    @permissions.register(model=Article, allow_anonymous=True)\n    def can_view_article(user, article):\n        if article.is_published:\n            return True\n        if user.is_anonymous():\n            return False  # Redirect to login page\n        return user == article.owner\n\n    # views.py\n    @permissions.require('can_view_article')\n    def article_view(request, article_id):\n        pass  # Show article\n\nIf the permission check fails for an anonymous user, they will be\nredirected to the login page.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PSU-OIT-ARC/django-perms",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-perms",
    "package_url": "https://pypi.org/project/django-perms/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-perms/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/PSU-OIT-ARC/django-perms"
    },
    "release_url": "https://pypi.org/project/django-perms/1.4.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Syntactic sugar for handling permission functions in views, templates, and code",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3778623,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13547fe0e2b929774bd8089a9d4607a017fc0ce471846ec76f956a1919fe530b",
        "md5": "aa842aca1042bff8374108ce60db7ad2",
        "sha256": "744c71fe945175beb1a089428885471ae2709dd86df601edaf22fe1cf9b84cae"
      },
      "downloads": -1,
      "filename": "django-perms-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "aa842aca1042bff8374108ce60db7ad2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14949,
      "upload_time": "2017-01-05T01:00:22",
      "upload_time_iso_8601": "2017-01-05T01:00:22.202142Z",
      "url": "https://files.pythonhosted.org/packages/13/54/7fe0e2b929774bd8089a9d4607a017fc0ce471846ec76f956a1919fe530b/django-perms-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}