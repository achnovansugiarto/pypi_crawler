{
  "info": {
    "author": "Wyatt Baldwin",
    "author_email": "wyatt.baldwin@pdx.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "# Django Perms\n\n## Install\n\n`pip install django-perms`\n\nAdd 'permissions' to your installed apps.\n\n## Usage\n\nConsider the following functions (in widgets/perms.py):\n\n```python\ndef can_create_widget(user):\n    if user.is_admin:\n        return True\n\n    if Widget.objects.filter(created_by=user).count() <= MAX_WIDGETS_PER_USER:\n        return True\n\ndef can_edit_widget(user, widget):\n    if user.is_admin:\n        return True\n\n    if user.pk == widget.created_by_id:\n        return True\n```\n\nAll permissions functions *must* take a User model object as a first argument. The latter permission function takes a second argument, some kind of object to check permissions against.\n\nTo register these as permission functions, use the `@permission` decorator:\n\n```python\n...\nfrom permissions import permission\n\n@permission\ndef can_create_widget(user):\n    ...\n\n@permission(model=Widget)\ndef can_edit_widget(user, widget):\n    ...\n\n@permission(model=Widget, allow_anonymous=True)\ndef can_view_widget(user, widget):\n    if user.is_anonymous():\n        ... allow access to public widgets\n    else:\n        ... allow access to public widgets and user's widgets\n```\n\nPermission functions that take a single argument (the user object), can use the simple `@permission` decorator. Permission functions that take a second argument *must* specify the model class that the second argument to the permission function is expected to be.\n\nNow in widgets/views.py, you can do something like:\n\n```python\n# the `decorators` attribute on the widgets/perms.py module was added at runtime by the permissions app\nfrom .perms import decorators\n\n@decorators.can_create_widget\ndef create(request):\n    return HttpResponse(\"Create a widget!\")\n\n@decorators.can_edit_widget\ndef edit(request, widget_id):\n    widget = get_object_or_404(Widget, pk=widget_id)\n    return HttpResponse(\"You can edit %s\" % str(widget))\n\n# if you want to lookup the widget by its name field instead of the default,\n# the pk, add a field argument to the decorator\n@decorators.can_edit_widget(field=\"name\")\ndef edit(request, name):\n    widget = get_object_or_404(Widget, name=name)\n    return HttpResponse(\"You can edit %s\" % str(widget))\n```\n\nIn your templates, you can do:\n\n```django\n{% load permissions %}\n\n{% if user|can_create_widget %}\n    You can create widgets!\n{% endif %}\n\n{% if user|can_edit_widget:widget_object %}\n    You can edit this widget!\n{% endif %}\n```\n\n\n## How it Works\n\nWhen you register a permission function using `@permission`, a Django template filter is created based on the function. It also creates a simple decorator, which can be used on a Django view. The decorator takes the `request.user` object, and passes it to the permission function. If the permission function returns a truthy value, the Django view is loaded. Otherwise a PermissionDenied exception is raised.\n\nIn the more complicated `@permission(model=Widget)` case, a Django template filter is created. It also creates a decorator which can be used on a Django view. **This decorator assumes the second argument to the Django view is the PK of the model class you specified.** It then performs a model lookup using that PK, and passes the `request.user` object, and the model object to the permission function. If the model object DoesNotExist, a 404 is raised.\n\nWhen a PermissionDenied error is raised, the request object gets a `permission_name` attribute containing the permission function's name.\n\nAnonymous users will be sent to the login page unless `allow_anonymous=True` is passed to `@permission`.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PSU-OIT-ARC/django-perms",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-perms",
    "package_url": "https://pypi.org/project/django-perms/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-perms/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/PSU-OIT-ARC/django-perms"
    },
    "release_url": "https://pypi.org/project/django-perms/1.2.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Syntactic sugar for handling permission functions in views, templates and in code",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3778623,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0ab406bd002948050cc3c3f11ae5242e2722abb63328e3beb410976cdb24bd3",
        "md5": "9fb4dae24ff638b9201472af4a393809",
        "sha256": "a8be24abd5e169ee7a1a505ac99d32fa9d68a5fee553cdb0944adb48c1f3e14d"
      },
      "downloads": -1,
      "filename": "django-perms-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9fb4dae24ff638b9201472af4a393809",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12001,
      "upload_time": "2015-05-20T15:22:24",
      "upload_time_iso_8601": "2015-05-20T15:22:24.974333Z",
      "url": "https://files.pythonhosted.org/packages/c0/ab/406bd002948050cc3c3f11ae5242e2722abb63328e3beb410976cdb24bd3/django-perms-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}