{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "djproxy is a simple reverse proxy class-based generic view for Django apps.\n\nIf an application depends on a proxy (to get around Same Origin Policy issues\nin JavaScript, perhaps), djproxy can be used to provide that functionality in\na web server agnostic way. This allows developers to keep local development\nenvironments for proxy dependent applications fully functional without needing\nto run anything other than the django development server.\n\ndjproxy is also suitable for use in production environments and has been proven\nto be performant in large scale deployments. However, a web server's proxy\ncapabilities will be *more* performant in many cases. If one needs to use this\nin production, it should be fine as long as upstream responses aren't large.\nPerformance can be further increased by aggressively caching upstream\nresponses.\n\nHome-page: https://github.com/thomasw/djproxy\nAuthor: Thomas Welfley\nAuthor-email: thomas.welfley+djproxy@gmail.com\nLicense: MIT\nDescription: djproxy\n        =======\n        \n        |Build Status| |Coverage Status| |Latest Version|\n        \n        .. |Build Status| image:: https://img.shields.io/travis/thomasw/djproxy.svg\n           :target: https://travis-ci.org/thomasw/djproxy\n        .. |Coverage Status| image:: https://img.shields.io/coveralls/thomasw/djproxy.svg\n           :target: https://coveralls.io/r/thomasw/djproxy\n        .. |Latest Version| image:: https://img.shields.io/pypi/v/djproxy.svg\n           :target: https://pypi.python.org/pypi/djproxy/\n        \n        djproxy is a class-based generic view reverse HTTP proxy for Django.\n        \n        Why?\n        ----\n        \n        If an application depends on a proxy (to get around Same Origin Policy\n        issues in JavaScript, perhaps), djproxy can be used to provide that\n        functionality in a web server agnostic way. This allows developers to\n        keep local development environments for proxy dependent applications\n        fully functional without needing to run anything other than the django\n        development server.\n        \n        djproxy is also suitable for use in production environments and has been\n        proven to be performant in large scale deployments. However, a web\n        server's proxy capabilities will be *more* performant in many cases. If\n        one needs to use this in production, it should be fine as long as\n        upstream responses aren't large. Performance can be further increased by\n        aggressively caching upstream responses.\n        \n        Note that djproxy doesn't currently support websockets because django\n        doesn't support them. I will investigate adding websocket support as\n        soon as django has it.\n        \n        Installation\n        ------------\n        \n        ::\n        \n            pip install djproxy\n        \n        djproxy requires requests >= 1.0.0, django >= 1.4.0 and python >= 2.6.\n        \n        It's currently tested against Django 1.4.x, 1.5.x, 1.6.x, 1.7.x, 1.9.x, and\n        1.10.x.\n        \n        Usage\n        -----\n        \n        Start by defining a new proxy:\n        \n        .. code:: python\n        \n            from djproxy.views import HttpProxy\n        \n            class LocalProxy(HttpProxy):\n                base_url = 'https://google.com/'\n        \n        Add a url pattern that points at the proxy view. The ``url`` kwarg will\n        be urljoined with base\\_url:\n        \n        .. code:: python\n        \n            urlpatterns = [\n                url(r'^local_proxy/(?P<url>.*)$', LocalProxy.as_view(), name='proxy')\n            ]\n        \n        ``/local_proxy/some/content`` will now proxy\n        ``https://google.com/some/content/``.\n        \n        Additional examples can be found here:\n        `views <https://github.com/yola/djproxy/blob/master/tests/test_views.py>`_,\n        `urls <https://github.com/yola/djproxy/blob/master/tests/test_urls.py>`_.\n        \n        HttpProxy configuration:\n        ~~~~~~~~~~~~~~~~~~~~~~~~\n        \n        ``HttpProxy`` view's behavior can be further customized by overriding\n        the following class attributes.\n        \n        -  ``base_url``: The proxy url is formed by\n           ``urlparse.urljoin(base_url, url_kwarg)``\n        -  ``ignored_upstream_headers``: A list of headers that shouldn't be\n           forwarded to the browser from the proxied endpoint.\n        -  ``ignored_request_headers``: A list of headers that shouldn't be\n           forwarded to the proxied endpoint from the browser.\n        -  ``proxy_middleware``: A list of proxy middleware to apply to request\n           and response data.\n        -  ``pass_query_string``: A boolean indicating whether the query string\n           should be sent to the proxied endpoint.\n        -  ``reverse_urls``: An iterable of location header replacements to be\n           made on the constructed response (similar to Apache's\n           ``ProxyPassReverse`` directive).\n        -  ``verify_ssl``\\*: This attribute corresponds to `requests' verify\n           parameter <http://docs.python-requests.org/en/latest/user/advanced/?highlight=verify#ssl-cert-verification>`_.\n           It may be either a boolean, which toggles SSL certificate\n           verification on or off, or the path to a CA\\_BUNDLE file for private\n           certificates.\n        -  ``cert``\\*: This attribute corresponds to `requests' cert\n           parameter <http://docs.python-requests.org/en/latest/user/advanced/?highlight=verify#ssl-cert-verification>`_.\n           If a string is specified, it will be treated as a path to an ssl\n           client cert file (.pem). If a tuple is specified, it will be treated\n           as a ('cert', 'key') pair.\n        -  ``timeout``\\*: This attribute corresponds to `requests' timeout\n           parameter <http://docs.python-requests.org/en/master/api/#requests.request>`_.\n           It is used to specify how long to wait for the upstream server to\n           send data before giving up. The value must be either a float\n           representing the total timeout time in seconds, or a (connect timeout\n           float, read timeout float) tuple.\n        \n        \\* The behavior changes that result from configuring ``verify_ssl``,\n        ``cert``, and ``timeout`` will ultimately be dependent on the specific\n        version of requests that's installed. For example, in older versions of\n        requests, tuple values are not supported for the ``cert`` and\n        ``timeout`` properties.\n        \n        Adjusting location headers (ProxyPassReverse)\n        ---------------------------------------------\n        \n        Apache has a directive called ``ProxyPassReverse`` that makes\n        replacements to three location headers: ``URI``, ``Location``, and\n        ``Content-Location``. Without this functionality, proxying an endpoint\n        that returns a redirect with a ``Location`` header of\n        ``http://foo.bar/go/cats/`` would cause a downstream requestor to be\n        redirected away from the proxy. djproxy has a similar mechanism which is\n        exposed via the ``reverse_urls`` class variable. The following proxies\n        are equivalent:\n        \n        Djproxy:\n        \n        .. code:: python\n        \n        \n            class ReverseProxy(HttpProxy):\n                base_url = 'https://google.com/'\n                reverse_urls = [\n                    ('/google/', 'https://google.com/')\n                ]\n        \n            urlpatterns = patterns[\n                url(r'^google/(?P<url>.*)$', ReverseProxy.as_view(), name='gproxy')\n            ]\n        \n        Apache:\n        \n        ::\n        \n            <Proxy https://google.com/*>\n                Order deny,allow\n                Allow from all\n            </Proxy>\n            ProxyPass /google/ https://google.com/\n            ProxyPassReverse /google/ https://google.com/\n        \n        HttpProxy dynamic configuration and route generation helper:\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n        \n        To specify the configuration for a set of proxies, without having to\n        maintain specific classes and url routes, one can use\n        ``djproxy.helpers.generate_routes`` as follows:\n        \n        In ``urls.py``, pass ``generate_routes`` a ``configuration`` dict to\n        configure a set of proxies:\n        \n        .. code:: python\n        \n            from djproxy.urls import generate_routes\n        \n            configuration = {\n                'test_proxy': {\n                    'base_url': 'https://google.com/',\n                    'prefix': '/test_prefix/',\n                },\n                'service_name': {\n                    'base_url': 'https://service.com/',\n                    'prefix': '/service_prefix/',\n                    'verify_ssl': False,\n                    'append_middlware': ['myapp.proxy_middleware.add_headers']\n                }\n            }\n        \n            urlpatterns += generate_routes(configuration)\n        \n        Using the snippet above will enable a Django app to proxy\n        ``https://google.com/X`` at ``/test_prefix/X`` and\n        ``https://service.com/Y`` at ``/service_prefix/Y``.\n        \n        These correspond to the following production Apache proxy configuration:\n        \n        ::\n        \n            <Proxy https://google.com/*>\n                Order deny,allow\n                Allow from all\n            </Proxy>\n            ProxyPass /test_prefix/ https://google.com/\n            ProxyPassReverse /test_prefix/ https://google.com/\n        \n        \n            <Proxy https://service.com/*>\n                Order deny,allow\n                Allow from all\n            </Proxy>\n            ProxyPass /service_prefix/ http://service.com/\n            ProxyPassReverse /service_prefix/ http://service.com/\n        \n        Required configuration keys:\n        \n        -  ``base_url``\n        -  ``prefix``\n        \n        Optional configuration keys:\n        \n        -  ``verify_ssl``: defaults to ``True``.\n        -  ``csrf_exempt``: defaults to ``True``.\n        -  ``cert``: defaults to ``None``.\n        -  ``timeout``: defaults to ``None``.\n        -  ``middleware``: Defaults to ``None``. Specifying ``None`` causes\n           djproxy to use the default middleware set. If a list is passed, the\n           default middleware list specified by the HttpProxy definition will be\n           replaced with the provided list.\n        -  ``append_middleware``: Defaults to ``None``. ``None`` results in no\n           changes to the default middleware set. If a list is specified, the\n           list will be appended to the default middleware list specified in the\n           HttpProxy definition or, if provided, the middleware key specified in\n           the config dict.\n        \n        Proxy middleware\n        ----------------\n        \n        HttpProxys support custom middleware for preprocessing data from\n        downstream to be sent to upstream endpoints and for preprocessing\n        response data before it is sent back downstream. ``X-Forwarded-Host``,\n        ``X-Forwarded-For``, ``X-Forwarded-Proto`` and the ``ProxyPassRevere``\n        functionality area all implemented as middleware.\n        \n        HttProxy views are configured to execute particular middleware by\n        setting their ``proxy_middleware`` attribute. The following HttpProxy\n        would attach XFF and XFH headers, but not preform the ProxyPassReverse\n        header translation or attach an XFP header:\n        \n        .. code:: python\n        \n            class ReverseProxy(HttpProxy):\n                base_url = 'https://google.com/'\n                reverse_urls = [\n                    ('/google/', 'https://google.com/')\n                ]\n                proxy_middleware = [\n                    'djproxy.proxy_middleware.AddXFF',\n                    'djproxy.proxy_middleware.AddXFH'\n                ]\n        \n        If a custom middleware is needed to modify content, headers, cookies,\n        etc before the content is sent upstream of if one needs to make similar\n        modifications before the content is sent back downstream, a custom\n        middleware can be written and proxy views can be configured to use it.\n        djproxy contains a `middleware\n        template <https://github.com/thomasw/djproxy/blob/master/djproxy/proxy_middleware.py#L32>`_\n        to make this process easier.\n        \n        Terminology\n        -----------\n        \n        It is important to understand the meaning of these terms in the context\n        of this project:\n        \n        **upstream**: The destination that is being proxied.\n        \n        **downstream**: The agent that initiated the request to djproxy.\n        \n        Contributing\n        ------------\n        \n        To run the tests, first install development dependencies:\n        \n        ::\n        \n            pip install -r requirements.txt\n        \n        To test this against a version of Django other than the latest supported\n        on the test environment's Python version, wipe out the\n        ``requirements.txt`` installation by pip installing the desired version.\n        \n        Run ``nosetests`` to execute the test suite.\n        \n        To automatically run the test suite, flake8, and pep257 checks whenever python\n        files change use testtube by executing ``stir`` in the top level djproxy\n        directory.\n        \n        To run a Django dev server that proxies itself, execute the following:\n        \n        ::\n        \n            django-admin.py runserver --settings=tests.test_settings --pythonpath=\"./\"\n        \n        Similarly, to run a configure Django shell, execute the following:\n        \n        ::\n        \n            django-admin.py shell --settings=tests.test_settings --pythonpath=\"./\"\n        \n        See ``tests/test_settings.py`` and ``tests/test_urls.py`` for\n        configuration information.\n        \nPlatform: UNKNOWN\nClassifier: Development Status :: 5 - Production/Stable\nClassifier: Intended Audience :: Developers\nClassifier: License :: OSI Approved :: MIT License\nClassifier: Topic :: Software Development :: Libraries\nClassifier: Framework :: Django :: 1.4\nClassifier: Framework :: Django :: 1.5\nClassifier: Framework :: Django :: 1.6\nClassifier: Framework :: Django :: 1.7\nClassifier: Framework :: Django :: 1.8\nClassifier: Framework :: Django :: 1.9\nClassifier: Framework :: Django :: 1.10\nClassifier: Programming Language :: Python\nClassifier: Programming Language :: Python :: 2.6\nClassifier: Programming Language :: Python :: 2.7\nClassifier: Programming Language :: Python :: 3.4\nClassifier: Programming Language :: Python :: 3.5\nClassifier: Programming Language :: Python :: Implementation :: PyPy\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djproxy",
    "package_url": "https://pypi.org/project/djproxy/",
    "platform": "",
    "project_url": "https://pypi.org/project/djproxy/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/djproxy/2.3.3/",
    "requires_dist": [
      "django (>=1.4)",
      "requests (>=1.0.0)",
      "six (>=1.9.0)"
    ],
    "requires_python": "",
    "summary": "",
    "version": "2.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8973075,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f382a1256c961bf0126d0a49ca9826983522b99e0d4deedb6521ed2b0001715",
        "md5": "414000be659b141cd163ad43f5b179bd",
        "sha256": "1554dbf7d95361d077771a835426d67200179ee97db188ee957a07618dac994d"
      },
      "downloads": -1,
      "filename": "djproxy-2.3.3-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "414000be659b141cd163ad43f5b179bd",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16571,
      "upload_time": "2016-12-26T22:49:26",
      "upload_time_iso_8601": "2016-12-26T22:49:26.321230Z",
      "url": "https://files.pythonhosted.org/packages/5f/38/2a1256c961bf0126d0a49ca9826983522b99e0d4deedb6521ed2b0001715/djproxy-2.3.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dcd04b2779607f1e92f6a82d36d6c367aeef18cd789e8e7fd6ea87410c64d1c9",
        "md5": "3bf2aff4daec7de5e80301a44ea8f1e3",
        "sha256": "3e360239942f76005108d4b61ba75baa4b651626cba89b49ff2d376f971e3ecc"
      },
      "downloads": -1,
      "filename": "djproxy-2.3.3.tar.gz",
      "has_sig": true,
      "md5_digest": "3bf2aff4daec7de5e80301a44ea8f1e3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16905,
      "upload_time": "2016-12-26T22:49:28",
      "upload_time_iso_8601": "2016-12-26T22:49:28.343197Z",
      "url": "https://files.pythonhosted.org/packages/dc/d0/4b2779607f1e92f6a82d36d6c367aeef18cd789e8e7fd6ea87410c64d1c9/djproxy-2.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}