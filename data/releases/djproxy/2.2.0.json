{
  "info": {
    "author": "Thomas Welfley",
    "author_email": "thomas.welfley+djproxy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 1.4",
      "Framework :: Django :: 1.5",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# djproxy\n\n[![Build Status](https://img.shields.io/travis/thomasw/djproxy.svg)](https://travis-ci.org/thomasw/djproxy)\n[![Coverage Status](https://img.shields.io/coveralls/thomasw/djproxy.svg)](https://coveralls.io/r/thomasw/djproxy)\n[![Latest Version](https://img.shields.io/pypi/v/djproxy.svg)](https://pypi.python.org/pypi/djproxy/)\n[![Downloads](https://img.shields.io/pypi/dm/djproxy.svg)](https://pypi.python.org/pypi/djproxy/)\n\n\ndjproxy is a class-based generic view reverse HTTP proxy for Django.\n\n## Why?\n\nIf your application depends on a proxy (to get around Same Origin Policy issues\nin JavaScript, perhaps), djproxy can be used to provide that functionality in\na web server agnostic way. This allows developers to keep local development\nenvironments for proxy dependent applications fully functional without needing\nto run anything other than the django development server.\n\ndjproxy is also suitable for use in production environments and has been proven\nto be performant in large scale deployments. However, your web server's proxy\ncapabilities will be *more* performant in many cases. If you need to use this in\nproduction, it should be fine as long as upstream responses aren't large.\nPerformance can be further increased by aggressively caching upstream responses.\n\nNote that djproxy doesn't currently support websockets because django doesn't\nsupport them. I will investigate adding websocket support as soon as django\nhas it.\n\n## Installation\n\n```\npip install djproxy\n```\n\ndjproxy requires requests >= 1.0.0, django >= 1.4.0 and python >= 2.6.\n\n## Usage\n\nStart by defining a new proxy:\n\n```python\nfrom djproxy.views import HttpProxy\n\nclass LocalProxy(HttpProxy):\n    base_url = 'https://google.com/'\n```\n\nAdd a url pattern that points at your proxy view. The `url` kwarg will be\nurljoined with base_url:\n\n```python\nurlpatterns = patterns(\n    '',\n    url(r'^local_proxy/(?P<url>.*)$', LocalProxy.as_view(), name='proxy')\n)\n```\n\n`/local_proxy/some/content` will now proxy `https://google.com/some/content/`.\n\nAdditional examples can be found here: [views][3], [urls][4].\n\n\n### HttpProxy configuration:\n\n* `base_url`: The proxy url is formed by\n   `urlparse.urljoin(base_url, url_kwarg)`\n* `ignored_upstream_headers`: A list of headers that shouldn't be forwarded\n  to the browser from the proxied endpoint.\n* `ignored_request_headers`: A list of headers that shouldn't be forwarded\n  to the proxied endpoint from the browser.\n* `proxy_middleware`: A list of proxy middleware to apply to request and\n  response data.\n* `pass_query_string`: A boolean indicating whether the query string should be\n  sent to the proxied endpoint.\n* `reverse_urls`: An iterable of location header replacements to be made on\n  the constructed response (similar to Apache's `ProxyPassReverse` directive).\n* `verify_ssl`: This option corresponds to [requests' verify parameter][1]. It\n  may be either a boolean, which toggles SSL certificate verification on or off,\n  or the path to a CA_BUNDLE file for private certificates.\n\n## Adjusting location headers (ProxyPassReverse)\n\nApache has a directive called `ProxyPassReverse` that makes replacements to\nthree location headers: `URI`, `Location`, and `Content-Location`. Without this\nfunctionality, proxying an endpoint that returns a redirect with a `Location`\nheader of `http://foo.bar/go/cats/` would cause a downstream requestor to be\nredirected away from the proxy. djproxy has a similar mechanism which is\nexposed via the `reverse_urls` class variable. The following proxies are\nequivalent:\n\nDjproxy:\n\n```python\n\nclass ReverseProxy(HttpProxy):\n    base_url = 'https://google.com/'\n    reverse_urls = [\n        ('/google/', 'https://google.com/')\n    ]\n\nurlpatterns = patterns(\n    '',\n    url(r'^google/(?P<url>.*)$', ReverseProxy.as_view(), name='gproxy')\n\n```\n\nApache:\n\n```\n<Proxy https://google.com/*>\n    Order deny,allow\n    Allow from all\n</Proxy>\nProxyPass /google/ https://google.com/\nProxyPassReverse /google/ https://google.com/\n```\n\n### HttpProxy dynamic configuration and route generation helper:\n\nIf you'd like to specify the configuration for a set of proxies, without\nhaving to maintain specific classes and url routes, you can use\n`djproxy.helpers.generate_routes` as follows:\n\nIn `urls.py`, pass `generate_routes` a `configuration` dict to configure a set\nof proxies:\n\n```python\nfrom djproxy.urls import generate_routes\n\nconfiguration = {\n    'test_proxy': {\n        'base_url': 'https://google.com/',\n        'prefix': '/test_prefix/',\n    },\n    'service_name': {\n        'base_url': 'https://service.com/',\n        'prefix': '/service_prefix/',\n        'verify_ssl': False,\n        'append_middlware': ['myapp.proxy_middleware.add_headers']\n    }\n}\n\nurlpatterns += generate_routes(configuration)\n```\n\nUsing the snippet above will enable your Django app to proxy\n`https://google.com/X` at `/test_prefix/X` and\n`https://service.com/Y` at `/service_prefix/Y`.\n\nThese correspond to the following production Apache proxy configuration:\n```\n<Proxy https://google.com/*>\n    Order deny,allow\n    Allow from all\n</Proxy>\nProxyPass /test_prefix/ https://google.com/\nProxyPassReverse /test_prefix/ https://google.com/\n\n\n<Proxy https://service.com/*>\n    Order deny,allow\n    Allow from all\n</Proxy>\nProxyPass /service_prefix/ http://service.com/\nProxyPassReverse /service_prefix/ http://service.com/\n```\n\n`verify_ssl`  and `csrf_exempt` are optional (and default to True), but\nbase_url and prefix are required.\n\n`middleware` and `append_middleware` are also optional. If neither are present,\nthe default proxy middleware set will be used. If middleware is specified,\nthen the default proxy middleware list will be replaced. If\nappend_middleware is specified, the list will be appended to the end of\nthe middleware set. Use `append_middleware` if you want to add additional\nproxy behaviors without modifying the default behaviors.\n\n## Proxy middleware\n\nHttpProxys support custom middleware for preprocessing data from downstream\nto be sent to upstream endpoints and for preprocessing response data before\nit is sent back downstream. `X-Forwarded-Host`, `X-Forwarded-For`,\n`X-Forwarded-Proto` and the `ProxyPassRevere` functionality area all implemented\nas middleware.\n\nHttProxy views are configured to execute particular middleware by setting\ntheir `proxy_middleware` attribute. The following HttpProxy would attach XFF and\nXFH headers, but not preform the ProxyPassReverse header translation or attach\nan XFP header:\n\n```python\nclass ReverseProxy(HttpProxy):\n    base_url = 'https://google.com/'\n    reverse_urls = [\n        ('/google/', 'https://google.com/')\n    ]\n    proxy_middleware = [\n        'djproxy.proxy_middleware.AddXFF',\n        'djproxy.proxy_middleware.AddXFH'\n    ]\n```\n\nIf you need to write your own middleware to modify content, headers, cookies,\netc before the content is sent upstream of if you need to make similar\nmodifications before the content is sent back downstream, you can write your own\nmiddleware and configure your view to use it. djproxy contains a [middleware\ntemplate][2] to help you with this.\n\n## Terminology\n\nIt is important to understand the meaning of these terms in the context of this\nproject:\n\n**upstream**: The destination that is being proxied.\n\n**downstream**: The agent that initiated the request to djproxy.\n\n## Contributing\n\nTo run the tests, first install development dependencies:\n\n```\npip install -r requirements.txt\n```\n\nIf you'd like to test this against a version of Django other than the latest\nsupported on your Python version, wipe out the `requirements.txt` installation\nby pip installing your desired version.\n\nRun `nosetests` to execute the test suite.\n\nTo automatically run the test suite, flake8, frosted, and pep257 checks whenever\npython files change use testtube by executing `stir` in the top level djproxy\ndirectory.\n\nTo run a Django dev server that proxies itself, execute the following:\n\n```\ndjango-admin.py runserver --settings=tests.test_settings --pythonpath=\"./\"\n```\n\nSimilarly, to run a configure Django shell, execute the following:\n\n```\ndjango-admin.py shell --settings=tests.test_settings --pythonpath=\"./\"\n```\n\nSee `tests/test_settings.py` and `tests/test_urls.py` for configuration\ninformation.\n\n[1]:http://docs.python-requests.org/en/latest/user/advanced/?highlight=verify#ssl-cert-verification\n[2]:https://github.com/thomasw/djproxy/blob/master/djproxy/proxy_middleware.py#L32\n[3]:https://github.com/yola/djproxy/blob/master/tests/test_views.py\n[4]:https://github.com/yola/djproxy/blob/master/tests/test_urls.py",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thomasw/djproxy",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "djproxy",
    "package_url": "https://pypi.org/project/djproxy/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djproxy/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/thomasw/djproxy"
    },
    "release_url": "https://pypi.org/project/djproxy/2.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "djproxy is a simple reverse proxy class-based generic view for Django apps.\n\nIf your application depends on proxies provided by a web server in production,\ndjproxy can be used to duplicate that functionality during local development.",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8973075,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28bd6a15b0258b7431fbc3dc43423b1da0d175c42609211bb4cdc36672e8bab3",
        "md5": "6d1d0199566f8d211a227a16a012a006",
        "sha256": "375014739dc52f6edbad55602b8614d0b0c3861cede25921bd9ff2b54ecd68fc"
      },
      "downloads": -1,
      "filename": "djproxy-2.2.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "6d1d0199566f8d211a227a16a012a006",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 14977,
      "upload_time": "2016-03-11T19:22:43",
      "upload_time_iso_8601": "2016-03-11T19:22:43.882631Z",
      "url": "https://files.pythonhosted.org/packages/28/bd/6a15b0258b7431fbc3dc43423b1da0d175c42609211bb4cdc36672e8bab3/djproxy-2.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96d3335c20ec3b57c3ca87dbc31d61ef6dace3c968779f356551d72237bb556e",
        "md5": "828307a902b6ae5c5f586f97ce864f9e",
        "sha256": "c022628301a841fe6c13f352e4fb9438b5f48f5f0e8820b2e9d54cd9d925c1c9"
      },
      "downloads": -1,
      "filename": "djproxy-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "828307a902b6ae5c5f586f97ce864f9e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15214,
      "upload_time": "2016-03-11T19:08:20",
      "upload_time_iso_8601": "2016-03-11T19:08:20.512400Z",
      "url": "https://files.pythonhosted.org/packages/96/d3/335c20ec3b57c3ca87dbc31d61ef6dace3c968779f356551d72237bb556e/djproxy-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}