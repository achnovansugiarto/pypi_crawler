{
  "info": {
    "author": "Nico Schl√∂mer et al.",
    "author_email": "nico.schloemer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Utilities"
    ],
    "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/meshio\"><img alt=\"meshio\" src=\"https://nschloe.github.io/meshio/logo-with-text.svg\" width=\"60%\"></a>\n  <p align=\"center\">I/O for mesh files.</p>\n</p>\n\n[![PyPi Version](https://img.shields.io/pypi/v/meshio.svg?style=flat-square)](https://pypi.org/project/meshio/)\n[![Anaconda Cloud](https://anaconda.org/conda-forge/meshio/badges/version.svg?=style=flat-square)](https://anaconda.org/conda-forge/meshio/)\n[![Packaging status](https://repology.org/badge/tiny-repos/python:meshio.svg)](https://repology.org/project/python:meshio/versions)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/meshio.svg?style=flat-square)](https://pypi.org/project/meshio/)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.1173115.svg?style=flat-square)](https://doi.org/10.5281/zenodo.1173115)\n[![GitHub stars](https://img.shields.io/github/stars/nschloe/meshio.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/nschloe/meshio)\n[![Downloads](https://pepy.tech/badge/meshio/month?style=flat-square)](https://pepy.tech/project/meshio)\n\n<!--[![PyPi downloads](https://img.shields.io/pypi/dm/meshio.svg?style=flat-square)](https://pypistats.org/packages/meshio)-->\n\n[![Discord](https://img.shields.io/static/v1?logo=discord&logoColor=white&label=chat&message=on%20discord&color=7289da&style=flat-square)](https://discord.gg/Z6DMsJh4Hr)\n\n[![gh-actions](https://img.shields.io/github/workflow/status/nschloe/meshio/ci?style=flat-square)](https://github.com/nschloe/meshio/actions?query=workflow%3Aci)\n[![codecov](https://img.shields.io/codecov/c/github/nschloe/meshio.svg?style=flat-square)](https://app.codecov.io/gh/nschloe/meshio)\n[![LGTM](https://img.shields.io/lgtm/grade/python/github/nschloe/meshio.svg?style=flat-square)](https://lgtm.com/projects/g/nschloe/meshio)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n\nThere are various mesh formats available for representing unstructured meshes.\nmeshio can read and write all of the following and smoothly converts between them:\n\n> [Abaqus](http://abaqus.software.polimi.it/v6.14/index.html) (`.inp`),\n> ANSYS msh (`.msh`),\n> [AVS-UCD](https://lanl.github.io/LaGriT/pages/docs/read_avs.html) (`.avs`),\n> [CGNS](https://cgns.github.io/) (`.cgns`),\n> [DOLFIN XML](https://manpages.ubuntu.com/manpages/jammy/en/man1/dolfin-convert.1.html) (`.xml`),\n> [Exodus](https://nschloe.github.io/meshio/exodus.pdf) (`.e`, `.exo`),\n> [FLAC3D](https://www.itascacg.com/software/flac3d) (`.f3grid`),\n> [H5M](https://www.mcs.anl.gov/~fathom/moab-docs/h5mmain.html) (`.h5m`),\n> [Kratos/MDPA](https://github.com/KratosMultiphysics/Kratos/wiki/Input-data) (`.mdpa`),\n> [Medit](https://people.sc.fsu.edu/~jburkardt/data/medit/medit.html) (`.mesh`, `.meshb`),\n> [MED/Salome](https://docs.salome-platform.org/latest/dev/MEDCoupling/developer/med-file.html) (`.med`),\n> [Nastran](https://help.autodesk.com/view/NSTRN/2019/ENU/?guid=GUID-42B54ACB-FBE3-47CA-B8FE-475E7AD91A00) (bulk data, `.bdf`, `.fem`, `.nas`),\n> [Netgen](https://github.com/ngsolve/netgen) (`.vol`, `.vol.gz`),\n> [Neuroglancer precomputed format](https://github.com/google/neuroglancer/tree/master/src/neuroglancer/datasource/precomputed#mesh-representation-of-segmented-object-surfaces),\n> [Gmsh](https://gmsh.info/doc/texinfo/gmsh.html#File-formats) (format versions 2.2, 4.0, and 4.1, `.msh`),\n> [OBJ](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (`.obj`),\n> [OFF](https://segeval.cs.princeton.edu/public/off_format.html) (`.off`),\n> [PERMAS](https://www.intes.de) (`.post`, `.post.gz`, `.dato`, `.dato.gz`),\n> [PLY](<https://en.wikipedia.org/wiki/PLY_(file_format)>) (`.ply`),\n> [STL](<https://en.wikipedia.org/wiki/STL_(file_format)>) (`.stl`),\n> [Tecplot .dat](http://paulbourke.net/dataformats/tp/),\n> [TetGen .node/.ele](https://wias-berlin.de/software/tetgen/fformats.html),\n> [SVG](https://www.w3.org/TR/SVG/) (2D output only) (`.svg`),\n> [SU2](https://su2code.github.io/docs_v7/Mesh-File/) (`.su2`),\n> [UGRID](https://www.simcenter.msstate.edu/software/documentation/ug_io/3d_grid_file_type_ugrid.html) (`.ugrid`),\n> [VTK](https://vtk.org/wp-content/uploads/2015/04/file-formats.pdf) (`.vtk`),\n> [VTU](https://vtk.org/Wiki/VTK_XML_Formats) (`.vtu`),\n> [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) ([TIN](https://en.wikipedia.org/wiki/Triangulated_irregular_network)) (`.wkt`),\n> [XDMF](https://xdmf.org/index.php/XDMF_Model_and_Format) (`.xdmf`, `.xmf`).\n\n([Here's a little survey](https://forms.gle/PSeNb3N3gv3wbEus8) on which formats are actually\nused.)\n\nInstall with one of\n\n```\npip install meshio[all]\nconda install -c conda-forge meshio\n```\n\n(`[all]` pulls in all optional dependencies. By default, meshio only uses numpy.)\nYou can then use the command-line tool\n\n<!--pytest-codeblocks:skip-->\n\n```sh\nmeshio convert    input.msh output.vtk   # convert between two formats\n\nmeshio info       input.xdmf             # show some info about the mesh\n\nmeshio compress   input.vtu              # compress the mesh file\nmeshio decompress input.vtu              # decompress the mesh file\n\nmeshio binary     input.msh              # convert to binary format\nmeshio ascii      input.msh              # convert to ASCII format\n```\n\nwith any of the supported formats.\n\nIn Python, simply do\n\n<!--pytest-codeblocks:skip-->\n\n```python\nimport meshio\n\nmesh = meshio.read(\n    filename,  # string, os.PathLike, or a buffer/open file\n    # file_format=\"stl\",  # optional if filename is a path; inferred from extension\n    # see meshio-convert -h for all possible formats\n)\n# mesh.points, mesh.cells, mesh.cells_dict, ...\n\n# mesh.vtk.read() is also possible\n```\n\nto read a mesh. To write, do\n\n```python\nimport meshio\n\n# two triangles and one quad\npoints = [\n    [0.0, 0.0],\n    [1.0, 0.0],\n    [0.0, 1.0],\n    [1.0, 1.0],\n    [2.0, 0.0],\n    [2.0, 1.0],\n]\ncells = [\n    (\"triangle\", [[0, 1, 2], [1, 3, 2]]),\n    (\"quad\", [[1, 4, 5, 3]]),\n]\n\nmesh = meshio.Mesh(\n    points,\n    cells,\n    # Optionally provide extra data on points, cells, etc.\n    point_data={\"T\": [0.3, -1.2, 0.5, 0.7, 0.0, -3.0]},\n    # Each item in cell data must match the cells array\n    cell_data={\"a\": [[0.1, 0.2], [0.4]]},\n)\nmesh.write(\n    \"foo.vtk\",  # str, os.PathLike, or buffer/open file\n    # file_format=\"vtk\",  # optional if first argument is a path; inferred from extension\n)\n\n# Alternative with the same options\nmeshio.write_points_cells(\"foo.vtk\", points, cells)\n```\n\nFor both input and output, you can optionally specify the exact `file_format`\n(in case you would like to enforce ASCII over binary VTK, for example).\n\n#### Time series\n\nThe [XDMF format](https://xdmf.org/index.php/XDMF_Model_and_Format) supports\ntime series with a shared mesh. You can write times series data using meshio\nwith\n\n<!--pytest-codeblocks:skip-->\n\n```python\nwith meshio.xdmf.TimeSeriesWriter(filename) as writer:\n    writer.write_points_cells(points, cells)\n    for t in [0.0, 0.1, 0.21]:\n        writer.write_data(t, point_data={\"phi\": data})\n```\n\nand read it with\n\n<!--pytest-codeblocks:skip-->\n\n```python\nwith meshio.xdmf.TimeSeriesReader(filename) as reader:\n    points, cells = reader.read_points_cells()\n    for k in range(reader.num_steps):\n        t, point_data, cell_data = reader.read_data(k)\n```\n\n### ParaView plugin\n\n<img alt=\"gmsh paraview\" src=\"https://nschloe.github.io/meshio/gmsh-paraview.png\" width=\"60%\">\n*A Gmsh file opened with ParaView.*\n\nIf you have downloaded a binary version of ParaView, you may proceed as follows.\n\n- Install meshio for the Python major version that ParaView uses (check `pvpython --version`)\n- Open ParaView\n- Find the file `paraview-meshio-plugin.py` of your meshio installation (on Linux:\n  `~/.local/share/paraview-5.9/plugins/`) and load it under _Tools / Manage Plugins / Load New_\n- _Optional:_ Activate _Auto Load_\n\nYou can now open all meshio-supported files in ParaView.\n\n### Performance comparison\n\nThe comparisons here are for a triangular mesh with about 900k points and 1.8M\ntriangles. The red lines mark the size of the mesh in memory.\n\n#### File sizes\n\n<img alt=\"file size\" src=\"https://nschloe.github.io/meshio/filesizes.svg\" width=\"60%\">\n\n#### I/O speed\n\n<img alt=\"performance\" src=\"https://nschloe.github.io/meshio/performance.svg\" width=\"90%\">\n\n#### Maximum memory usage\n\n<img alt=\"memory usage\" src=\"https://nschloe.github.io/meshio/memory.svg\" width=\"90%\">\n\n### Installation\n\nmeshio is [available from the Python Package Index](https://pypi.org/project/meshio/),\nso simply run\n\n```\npip install meshio\n```\n\nto install.\n\nAdditional dependencies (`netcdf4`, `h5py`) are required for some of the output formats\nand can be pulled in by\n\n```\npip install meshio[all]\n```\n\nYou can also install meshio from [Anaconda](https://anaconda.org/conda-forge/meshio):\n\n```\nconda install -c conda-forge meshio\n```\n\n### Testing\n\nTo run the meshio unit tests, check out this repository and type\n\n```\ntox\n```\n\n### License\n\nmeshio is published under the [MIT license](https://en.wikipedia.org/wiki/MIT_License).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nschloe/meshio",
    "keywords": "mesh,file formats,scientific,engineering,fem,finite elements",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meshio",
    "package_url": "https://pypi.org/project/meshio/",
    "platform": "",
    "project_url": "https://pypi.org/project/meshio/",
    "project_urls": {
      "Code": "https://github.com/nschloe/meshio",
      "Funding": "https://github.com/sponsors/nschloe",
      "Homepage": "https://github.com/nschloe/meshio",
      "Issues": "https://github.com/nschloe/meshio/issues"
    },
    "release_url": "https://pypi.org/project/meshio/5.3.2/",
    "requires_dist": [
      "numpy",
      "rich",
      "importlib-metadata ; python_version < \"3.8\"",
      "netCDF4 ; extra == 'all'",
      "h5py ; extra == 'all'"
    ],
    "requires_python": ">=3.7",
    "summary": "I/O for many mesh formats",
    "version": "5.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13149498,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf17d281d66ef2fdf4b7dd8f9539eec465013f116e19cab897cef0dbdf4380a3",
        "md5": "ce502459a55e1268bd01b3770a822d73",
        "sha256": "cd3b58a694dc4da7045c1715bac9d5ccee2520b2582326c5631e20c4bc0dc260"
      },
      "downloads": -1,
      "filename": "meshio-5.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce502459a55e1268bd01b3770a822d73",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 166679,
      "upload_time": "2022-02-24T16:34:53",
      "upload_time_iso_8601": "2022-02-24T16:34:53.135563Z",
      "url": "https://files.pythonhosted.org/packages/bf/17/d281d66ef2fdf4b7dd8f9539eec465013f116e19cab897cef0dbdf4380a3/meshio-5.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "daeb425c5657021e9ae5871aed0a54cb6361a1f16dfed7b7dad27a7128c0b3cf",
        "md5": "74ccf11dd96464eb477d79baeb5892d0",
        "sha256": "2f560d4408281c1bdff12b0cfbe27e93550d722230f755b5b3a200dba23f6d8c"
      },
      "downloads": -1,
      "filename": "meshio-5.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "74ccf11dd96464eb477d79baeb5892d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 491651,
      "upload_time": "2022-02-24T16:34:56",
      "upload_time_iso_8601": "2022-02-24T16:34:56.169976Z",
      "url": "https://files.pythonhosted.org/packages/da/eb/425c5657021e9ae5871aed0a54cb6361a1f16dfed7b7dad27a7128c0b3cf/meshio-5.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}