{
  "info": {
    "author": "Nico Schl√∂mer et al.",
    "author_email": "nico.schloemer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Utilities"
    ],
    "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/meshio\"><img alt=\"meshio\" src=\"https://nschloe.github.io/meshio/logo-with-text.svg\" width=\"60%\"></a>\n  <p align=\"center\">I/O for mesh files.</p>\n</p>\n\n[![gh-actions](https://img.shields.io/github/workflow/status/nschloe/meshio/ci?style=flat-square)](https://github.com/nschloe/meshio/actions?query=workflow%3Aci)\n[![codecov](https://img.shields.io/codecov/c/github/nschloe/meshio.svg?style=flat-square)](https://codecov.io/gh/nschloe/meshio)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/meshio.svg?style=flat-square)](https://pypi.org/pypi/meshio/)\n[![PyPi Version](https://img.shields.io/pypi/v/meshio.svg?style=flat-square)](https://pypi.org/project/meshio)\n[![Anaconda Cloud](https://anaconda.org/conda-forge/meshio/badges/version.svg?=style=flat-square)](https://anaconda.org/conda-forge/meshio/)\n[![Debian CI](https://badges.debian.net/badges/debian/testing/python3-meshio/version.svg?style=flat-square)](https://tracker.debian.org/pkg/python-meshio)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.1173115.svg?style=flat-square)](https://doi.org/10.5281/zenodo.1173115)\n[![GitHub stars](https://img.shields.io/github/stars/nschloe/meshio.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/nschloe/meshio)\n[![PyPi downloads](https://img.shields.io/pypi/dm/meshio.svg?style=flat-square)](https://pypistats.org/packages/meshio)\n[![Slack](https://img.shields.io/static/v1?logo=slack&label=chat&message=on%20slack&color=4a154b&style=flat-square)](https://join.slack.com/t/nschloe/shared_invite/zt-cofhrwm8-BgdrXAtVkOjnDmADROKD7A\n)\n\nThere are various mesh formats available for representing unstructured meshes.\nmeshio can read and write all of the following and smoothly converts between them:\n\n> [Abaqus](http://abaqus.software.polimi.it/v6.14/index.html),\n [ANSYS msh](https://www.afs.enea.it/fluent/Public/Fluent-Doc/PDF/chp03.pdf),\n [AVS-UCD](https://lanl.github.io/LaGriT/pages/docs/read_avs.html),\n [CGNS](https://cgns.github.io/),\n [DOLFIN XML](https://manpages.ubuntu.com/manpages/disco/man1/dolfin-convert.1.html),\n [Exodus](https://cubit.sandia.gov/public/13.2/help_manual/WebHelp/finite_element_model/exodus/block_specification.htm),\n [FLAC3D](https://www.itascacg.com/software/flac3d),\n [H5M](https://www.mcs.anl.gov/~fathom/moab-docs/h5mmain.html),\n [Kratos/MDPA](https://github.com/KratosMultiphysics/Kratos/wiki/Input-data),\n [Medit](https://people.sc.fsu.edu/~jburkardt/data/medit/medit.html),\n [MED/Salome](https://docs.salome-platform.org/latest/dev/MEDCoupling/developer/med-file.html),\n [Nastran](https://help.autodesk.com/view/NSTRN/2019/ENU/?guid=GUID-42B54ACB-FBE3-47CA-B8FE-475E7AD91A00) (bulk data),\n [Neuroglancer precomputed format](https://github.com/google/neuroglancer/tree/master/src/neuroglancer/datasource/precomputed#mesh-representation-of-segmented-object-surfaces),\n [Gmsh](http://gmsh.info/doc/texinfo/gmsh.html#File-formats) (format versions 2.2, 4.0, and 4.1),\n [OBJ](https://en.wikipedia.org/wiki/Wavefront_.obj_file),\n [OFF](https://segeval.cs.princeton.edu/public/off_format.html),\n [PERMAS](https://www.intes.de),\n [PLY](https://en.wikipedia.org/wiki/PLY_(file_format)),\n [STL](https://en.wikipedia.org/wiki/STL_(file_format)),\n [Tecplot .dat](http://paulbourke.net/dataformats/tp/),\n [TetGen .node/.ele](https://wias-berlin.de/software/tetgen/fformats.html),\n [SVG](https://www.w3.org/TR/SVG/) (2D only, output only),\n [SU2](https://su2code.github.io/docs_v7/Mesh-File),\n [UGRID](http://www.simcenter.msstate.edu/software/downloads/doc/ug_io/3d_grid_file_type_ugrid.html),\n [VTK](https://www.vtk.org/wp-content/uploads/2015/04/file-formats.pdf),\n [VTU](https://www.vtk.org/Wiki/VTK_XML_Formats),\n [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) ([TIN](https://en.wikipedia.org/wiki/Triangulated_irregular_network)),\n [XDMF](http://www.xdmf.org/index.php/XDMF_Model_and_Format).\n\nInstall with\n```\npip install meshio[all]\n```\n(`[all]` pulls in all optional dependencies. By default, meshio only uses numpy.)\nYou can then use the command-line tools\n```bash\nmeshio-convert    input.msh output.vtk   # convert between two formats\n\nmeshio-info       input.xdmf             # show some info about the mesh\n\nmeshio-compress   input.vtu              # compress the mesh file\nmeshio-decompress input.vtu              # decompress the mesh file\n\nmeshio-binary     input.msh              # convert to binary format\nmeshio-ascii      input.msh              # convert to ASCII format\n```\nwith any of the supported formats.\n\nIn Python, simply do\n```python\nimport meshio\n\nmesh = meshio.read(\n    filename,  # string, os.PathLike, or a buffer/open file\n    file_format=\"stl\"  # optional if filename is a path; inferred from extension\n)\n# mesh.points, mesh.cells, mesh.cells_dict, ...\n\n# mesh.vtk.read() is also possible\n```\nto read a mesh. To write, do\n```python\npoints = numpy.array([\n    [0.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0],\n    [0.0, 0.0, 1.0],\n    ])\ncells = [\n    (\"triangle\", numpy.array([[0, 1, 2]]))\n]\nmeshio.write_points_cells(\n    \"foo.vtk\",\n    points,\n    cells,\n    # Optionally provide extra data on points, cells, etc.\n    # point_data=point_data,\n    # cell_data=cell_data,\n    # field_data=field_data\n    )\n```\nor explicitly create a mesh object for writing\n```python\nmesh = meshio.Mesh(points, cells)\nmeshio.write(\n    \"foo.vtk\",  # str, os.PathLike, or buffer/ open file\n    mesh,\n    # file_format=\"vtk\",  # optional if first argument is a path; inferred from extension\n)\n\n# mesh.vtk.write() is also possible\n```\nFor both input and output, you can optionally specify the exact `file_format`\n(in case you would like to enforce ASCII over binary VTK, for example).\n\nReading and writing can also be handled directly by the `Mesh` object:\n```python\nm = meshio.Mesh.read(filename, \"vtk\")  # same arguments as meshio.read\nm.write(\"foo.vtk\")  # same arguments as meshio.write, besides `mesh`\n```\n\n#### Time series\n\nThe [XDMF format](http://www.xdmf.org/index.php/XDMF_Model_and_Format) supports time\nseries with a shared mesh. You can write times series data using meshio with\n```python\nwith meshio.xdmf.TimeSeriesWriter(filename) as writer:\n    writer.write_points_cells(points, cells)\n    for t in [0.0, 0.1, 0.21]:\n        writer.write_data(t, point_data={\"phi\": data})\n```\nand read it with\n```python\nwith meshio.xdmf.TimeSeriesReader(filename) as reader:\n    points, cells = reader.read_points_cells()\n    for k in range(reader.num_steps):\n        t, point_data, cell_data = reader.read_data(k)\n```\n\n### ParaView plugin\n\n<img alt=\"gmsh paraview\" src=\"https://nschloe.github.io/meshio/gmsh-paraview.png\" width=\"60%\">\n*A Gmsh file opened with ParaView.*\n\nIf you have downloaded a binary version of ParaView, you may proceed as follows.\n\n * Make sure that ParaView uses a Python version that supports meshio. (That is at least\n   Python 3.)\n * Install meshio\n * Open ParaView\n * Find the file `paraview-meshio-plugin.py` of your meshio installation (on Linux:\n   `~/.local/share/paraview/plugins/`) and load it under _Tools / Manage Plugins / Load New_\n * _Optional:_ Activate _Auto Load_\n\nYou can now open all meshio-supported files in ParaView.\n\n\n### Performance comparison\n\nThe comparisons here are for a triangular mesh with about 900k points and 1.8M\ntriangles. The red lines mark the size of the mesh in memory.\n\n#### File sizes\n\n<img alt=\"file size\" src=\"https://nschloe.github.io/meshio/filesizes.svg\" width=\"60%\">\n\n#### I/O speed\n\n<img alt=\"performance\" src=\"https://nschloe.github.io/meshio/performance.svg\" width=\"90%\">\n\n#### Maximum memory usage\n\n<img alt=\"memory usage\" src=\"https://nschloe.github.io/meshio/memory.svg\" width=\"90%\">\n\n\n### Installation\n\nmeshio is [available from the Python Package Index](https://pypi.org/project/meshio/),\nso simply do\n```\npip install meshio\n```\nto install.\n\nAdditional dependencies (`netcdf4`, `h5py`) are required for some of the output formats\nand can be pulled in by\n```\npip install meshio[all]\n```\n\nYou can also install meshio from [anaconda](https://anaconda.org/conda-forge/meshio):\n```\nconda install -c conda-forge meshio\n```\n\n### Testing\n\nTo run the meshio unit tests, check out this repository and type\n```\npytest\n```\n\n### License\n\nmeshio is published under the [MIT license](https://en.wikipedia.org/wiki/MIT_License).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nschloe/meshio",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meshio",
    "package_url": "https://pypi.org/project/meshio/",
    "platform": "",
    "project_url": "https://pypi.org/project/meshio/",
    "project_urls": {
      "Code": "https://github.com/nschloe/meshio",
      "Homepage": "https://github.com/nschloe/meshio",
      "Issues": "https://github.com/nschloe/meshio/issues"
    },
    "release_url": "https://pypi.org/project/meshio/4.1.0/",
    "requires_dist": [
      "numpy",
      "importlib-metadata ; python_version < \"3.8\"",
      "netCDF4 ; extra == 'all'",
      "h5py ; extra == 'all'"
    ],
    "requires_python": ">=3.5",
    "summary": "I/O for many mesh formats",
    "version": "4.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13149498,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71ffcbaa56363bd592b9b391ad4b9cc7d66250231fd9d2b26614ba68dca826bf",
        "md5": "681b8a7dd083a319673cfb8b44709b43",
        "sha256": "5f1d8a98cd6c83bac62859d0ba50d55572bc165cb4bd62e1b80472d4c4636c6b"
      },
      "downloads": -1,
      "filename": "meshio-4.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "681b8a7dd083a319673cfb8b44709b43",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 140103,
      "upload_time": "2020-08-08T12:43:58",
      "upload_time_iso_8601": "2020-08-08T12:43:58.573519Z",
      "url": "https://files.pythonhosted.org/packages/71/ff/cbaa56363bd592b9b391ad4b9cc7d66250231fd9d2b26614ba68dca826bf/meshio-4.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11ab8f61759e73c25f308f2cab3b2e3950ca1d17b19cc0e479efa722792af53c",
        "md5": "2cad261b185350eeda57ab29252d49e4",
        "sha256": "7f7494d419d2a5602fc6173535096295a46a1948bd8d3095095c0cecae74e768"
      },
      "downloads": -1,
      "filename": "meshio-4.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2cad261b185350eeda57ab29252d49e4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 449618,
      "upload_time": "2020-08-08T12:44:01",
      "upload_time_iso_8601": "2020-08-08T12:44:01.943725Z",
      "url": "https://files.pythonhosted.org/packages/11/ab/8f61759e73c25f308f2cab3b2e3950ca1d17b19cc0e479efa722792af53c/meshio-4.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}