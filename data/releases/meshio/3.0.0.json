{
  "info": {
    "author": "Nico Schl√∂mer",
    "author_email": "nico.schloemer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/meshio\"><img alt=\"meshio\" src=\"https://nschloe.github.io/meshio/logo-with-text.svg\" width=\"60%\"></a>\n  <p align=\"center\">I/O for mesh files.</p>\n</p>\n\n[![CircleCI](https://img.shields.io/circleci/project/github/nschloe/meshio/master.svg?style=flat-square)](https://circleci.com/gh/nschloe/meshio)\n[![codecov](https://img.shields.io/codecov/c/github/nschloe/meshio.svg?style=flat-square)](https://codecov.io/gh/nschloe/meshio)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)\n[![PyPi Version](https://img.shields.io/pypi/v/meshio.svg?style=flat-square)](https://pypi.org/project/meshio)\n[![Debian CI](https://badges.debian.net/badges/debian/testing/python3-meshio/version.svg?style=flat-square)](https://tracker.debian.org/pkg/python-meshio)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.1173115.svg?style=flat-square)](https://doi.org/10.5281/zenodo.1173115)\n[![GitHub stars](https://img.shields.io/github/stars/nschloe/meshio.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/nschloe/meshio)\n[![PyPi downloads](https://img.shields.io/pypi/dd/meshio.svg?style=flat-square)](https://pypistats.org/packages/meshio)\n\nThere are various mesh formats available for representing unstructured meshes.\nmeshio can read and write all of the following and smoothly converts between them:\n\n * [Abaqus](http://abaqus.software.polimi.it/v6.14/index.html)\n * [ANSYS msh](http://www.afs.enea.it/fluent/Public/Fluent-Doc/PDF/chp03.pdf)\n * [DOLFIN XML](http://manpages.ubuntu.com/manpages/wily/man1/dolfin-convert.1.html)\n * [Exodus](https://cubit.sandia.gov/public/13.2/help_manual/WebHelp/finite_element_model/exodus/block_specification.htm)\n * [H5M](https://www.mcs.anl.gov/~fathom/moab-docs/h5mmain.html)\n * [Kratos/MDPA](https://github.com/KratosMultiphysics/Kratos/wiki/Input-data)\n * [Medit](https://people.sc.fsu.edu/~jburkardt/data/medit/medit.html)\n * [MED/Salome](https://docs.salome-platform.org/latest/dev/MEDCoupling/developer/med-file.html)\n * [Gmsh](http://gmsh.info/doc/texinfo/gmsh.html#File-formats) (versions 2 and 4)\n * [OFF](http://segeval.cs.princeton.edu/public/off_format.html)\n * [PERMAS](http://www.intes.de)\n * [STL](https://en.wikipedia.org/wiki/STL_(file_format))\n * [SVG](https://www.w3.org/TR/SVG/) (2D only, output only)\n * [VTK](https://www.vtk.org/wp-content/uploads/2015/04/file-formats.pdf)\n * [VTU](https://www.vtk.org/Wiki/VTK_XML_Formats)\n * [XDMF](http://www.xdmf.org/index.php/XDMF_Model_and_Format)\n\nInstall with\n```\npip3 install meshio[all] --user\n```\nand simply call\n```\nmeshio-convert input.msh output.vtu\n```\nwith any of the supported formats.\n\nIn Python, simply do\n```python\nimport meshio\n\nmesh = meshio.read(filename)  # optionally specify file_format\n# mesh.points, mesh.cells, ...\n```\nto read a mesh. To write, do\n```python\npoints = numpy.array([\n    [0.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0],\n    [0.0, 0.0, 1.0],\n    ])\ncells = {\n    \"triangle\": numpy.array([\n        [0, 1, 2]\n        ])\n    }\nmeshio.write_points_cells(\n    \"foo.vtk\",\n    points,\n    cells,\n    # Optionally provide extra data on points, cells, etc.\n    # point_data=point_data,\n    # cell_data=cell_data,\n    # field_data=field_data\n    )\n```\nor explicitly create a mesh object for writing\n```python\nmesh = meshio.Mesh(points, cells)\nmeshio.write(\"foo.vtk\", mesh)\n```\nFor both input and output, you can optionally specify the exact `file_format`\n(in case you would like to enforce ASCII over binary VTK, for example).\n\n#### Time series\n\nThe [XDMF format](http://www.xdmf.org/index.php/XDMF_Model_and_Format) supports time\nseries with a shared mesh. You can write times series data using meshio with\n```python\nwriter = meshio.XdmfTimeSeriesWriter(filename)\nwriter.write_points_cells(points, cells)\nfor t in [0.0, 0.1, 0.21]:\n    writer.write_data(t, point_data={\"phi\": data})\n```\nand read it with\n```python\nreader = meshio.XdmfTimeSeriesReader(filename)\npoints, cells = reader.read_points_cells()\nfor k in range(reader.num_steps):\n    t, point_data, cell_data = reader.read_data(k)\n```\n\n### Installation\n\nmeshio is [available from the Python Package Index](https://pypi.org/project/meshio/),\nso simply do\n```\npip3 install meshio --user\n```\nto install.\n\nAdditional dependencies (`netcdf4`, `h5py` and `lxml`) are required for some of the\noutput formats and can be pulled in by\n```\npip install -U meshio[all]\n```\n\n### Testing\n\nTo run the meshio unit tests, check out this repository and type\n```\npytest\n```\n\n### License\n\nmeshio is published under the [MIT license](https://en.wikipedia.org/wiki/MIT_License).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nschloe/meshio",
    "keywords": "",
    "license": "License :: OSI Approved :: MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meshio",
    "package_url": "https://pypi.org/project/meshio/",
    "platform": "any",
    "project_url": "https://pypi.org/project/meshio/",
    "project_urls": {
      "Homepage": "https://github.com/nschloe/meshio"
    },
    "release_url": "https://pypi.org/project/meshio/3.0.0/",
    "requires_dist": [
      "numpy",
      "netCDF4 ; extra == 'all'",
      "h5py ; extra == 'all'",
      "lxml ; extra == 'all'",
      "netCDF4 ; extra == 'exodus'",
      "h5py ; extra == 'hdf5'",
      "lxml ; extra == 'xml'"
    ],
    "requires_python": ">=3",
    "summary": "I/O for various mesh formats",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13149498,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5713b2c8ce1aa32cf5d8066f9169954bc071d1eb1f9f69b81010aef03079986c",
        "md5": "d8342c2d91ff545390af62c5248cbae7",
        "sha256": "e63073ebabbb9aca77744ce1cdf6bd5990243693cca4527080914ff15c47c3c1"
      },
      "downloads": -1,
      "filename": "meshio-3.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d8342c2d91ff545390af62c5248cbae7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 78335,
      "upload_time": "2019-07-17T11:03:03",
      "upload_time_iso_8601": "2019-07-17T11:03:03.210778Z",
      "url": "https://files.pythonhosted.org/packages/57/13/b2c8ce1aa32cf5d8066f9169954bc071d1eb1f9f69b81010aef03079986c/meshio-3.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5bf76817650bc1b9f31a6de641a24b826fca2e976c4c17aaf485a8abbbf8f925",
        "md5": "9bb89aca80bb0d8613f864eb0398dfd7",
        "sha256": "8320bc076ebe0c450b0707c71a4b6720a5c67c2c23d65f36b9e43b6dcd99b215"
      },
      "downloads": -1,
      "filename": "meshio-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9bb89aca80bb0d8613f864eb0398dfd7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 64242,
      "upload_time": "2019-07-17T11:03:05",
      "upload_time_iso_8601": "2019-07-17T11:03:05.653805Z",
      "url": "https://files.pythonhosted.org/packages/5b/f7/6817650bc1b9f31a6de641a24b826fca2e976c4c17aaf485a8abbbf8f925/meshio-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}