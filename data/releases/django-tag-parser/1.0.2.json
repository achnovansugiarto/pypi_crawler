{
  "info": {
    "author": "Diederik van der Boor",
    "author_email": "opensource@edoburu.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-tag-parser\n=================\n\nA micro-library to easily write custom Django template tags.\n\nFeatures:\n\n* Functions to parse tags, especially: \"args\", \"kwargs\", and \"as varname\" syntax.\n* Real OOP classes to write custom inclusion tags.\n\nFunctions:\n\n* ``parse_token_kwargs``: split a token into the tag name, args and kwargs.\n* ``parse_as_var``: extract the \"as varname\" from a token.\n\nDecorators:\n\n* ``@template_tag``: register a class with a ``parse(parser, token)`` method as template tag.\n\nBase classes (in ``tag_parser.basetags``):\n\n* ``BaseNode``: A template ``Node`` object which features some basic parsing abilities.\n* ``BaseInclusionNode``: a ``Node`` that has ``inclusion_tag`` like behaviour, but allows to override the ``template_name`` dynamically.\n* ``BaseAssignmentOrInclusionNode``: a class that allows a ``{% get_items template=\"...\" %}`` and ``{% get_items as var %}`` syntax.\n\nThe base classes allows to implement ``@register.simple_tag``, ``@register.inclusion_tag`` and ``@register.assignment_tag`` like functionalities,\nwhile still leaving room to extend the parsing, rendering or syntax validation.\nFor example, not all arguments need to be seen as template variables, filters or literal keywords.\n\n\nInstallation\n============\n\nFirst install the module, preferably in a virtual environment. It can be installed from PyPI::\n\n    pip install django-tag-parser\n\nOr the current folder can be installed::\n\n    pip install .\n\n\nExamples\n========\n\nIn your template tags library::\n\n    from django.template import Library\n    from tag_parser import template_tag\n    from tag_parser.basetags import BaseNode, BaseInclusionNode\n\n    register = Library()\n\nArguments and keyword arguments\n-------------------------------\n\nTo parse a syntax like::\n\n    {% my_tag \"arg1\" keyword1=\"bar\" keyword2=\"foo\" %}\n\nuse::\n\n    @template_tag(register, 'my_tag')\n    class MyTagNode(BaseNode):\n        max_args = 1\n        allowed_kwargs = ('keyword1', 'keyword2',)\n\n        def render_tag(self, context, *tag_args, **tag_kwargs):\n            return \"Tag Output\"\n\nInclusion tags\n--------------\n\nTo create an inclusion tag with overwritable template_name::\n\n    {% my_include_tag \"foo\" template=\"custom/example.html\" %}\n\nuse::\n\n    @template_tag(register, \"my_include_tag\")\n    class MyIncludeTag(BaseInclusionNode):\n        template_name = \"mytags/default.html\"\n        max_args = 1\n\n        def get_context_data(self, parent_context, *tag_args, **tag_kwargs):\n            (foo,) = *tag_args\n            return {\n                'foo': foo\n            }\n\nThe ``get_template_name()`` method can be overwritten too to support dynamic resolving of template names.\nNote the template nodes are cached afterwards, it's not possible to return random templates at each call.\n\n\nCustom parsing\n--------------\n\nWith a standard ``Node`` class, it's easier to implement custom syntax.\nFor example, to parse::\n\n    {% getfirstof val1 val2 as val3 %}\n\nuse::\n\n    @template_tag(register, 'getfirstof')\n    class GetFirstOfNode(Node):\n        def __init__(self, options, as_var):\n            self.options = options    # list of FilterExpression nodes.\n            self.as_var = as_var\n\n        @classmethod\n        def parse(cls, parser, token):\n            bits, as_var = parse_as_var(parser, token)\n            tag_name, options, _ = parse_token_kwargs(parser, bits, allowed_kwargs=())\n\n            if as_var is None or not choices:\n                raise TemplateSyntaxError(\"Expected syntax: {{% {0} val1 val2 as val %}}\".format(tag_name))\n\n            return cls(options, as_var)\n\n        def render(self, context):\n            value = None\n            for filterexpr in self.options:\n                # The ignore_failures argument prevents that the value becomes TEMPLATE_STRING_IF_INVALID.\n                value = filterexpr.resolve(context, ignore_failures=True)\n                if value is not None:\n                    break\n\n            context[self.as_var] = value\n            return ''\n\n\n\nContributing\n------------\n\nThis module is designed to be generic. In case there is anything you didn't like about it,\nor think it's not flexible enough, please let us know. We'd love to improve it!\n\nIf you have any other valuable contribution, suggestion or idea,\nplease let us know as well because we will look into it.\nPull requests are welcome too. :-)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/edoburu/django-tag-parser/zipball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edoburu/django-tag-parser",
    "keywords": null,
    "license": "Apache License, Version 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-tag-parser",
    "package_url": "https://pypi.org/project/django-tag-parser/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-tag-parser/",
    "project_urls": {
      "Download": "https://github.com/edoburu/django-tag-parser/zipball/master",
      "Homepage": "https://github.com/edoburu/django-tag-parser"
    },
    "release_url": "https://pypi.org/project/django-tag-parser/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Micro-library to easily write custom Django template tags",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6323992,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7fd54bd32c585717b4d8ece3a014571beb84de77a9dbf2f01b1fc231ab6e684",
        "md5": "f553297f5969b7641b450ed4f0d1c84b",
        "sha256": "f7f7dec4d331ea50e776a257403bb315d7c898d4371b97853b7e60fe6fb9b5e0"
      },
      "downloads": -1,
      "filename": "django-tag-parser-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f553297f5969b7641b450ed4f0d1c84b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11101,
      "upload_time": "2013-09-25T08:19:36",
      "upload_time_iso_8601": "2013-09-25T08:19:36.690680Z",
      "url": "https://files.pythonhosted.org/packages/a7/fd/54bd32c585717b4d8ece3a014571beb84de77a9dbf2f01b1fc231ab6e684/django-tag-parser-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}