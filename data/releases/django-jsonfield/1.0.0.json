{
  "info": {
    "author": "Matthew Schinckel",
    "author_email": "matt@schinckel.net",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "django-jsonfield\n===================\n\n.. image:: https://codeship.com/projects/2e1a3d30-7db7-0132-629f-4abd151a3721/status?branch=default\n\nI had a serious need for a JSON field for django. There were a couple out\nthere, but none packaged up nicely on bitbucket/github that were usable\nwith ``pip install -e``.\n\nSo I took the code from `David Cramer's blog`_, and packaged it up.\n\nUsage\n-----\n\nTo use, just install the package, and then use the field::\n\n    from django.db import models\n    import jsonfield\n\n    class MyModel(models.Model):\n        the_json = jsonfield.JSONField()\n\nYou can assign any JSON-encodable object to this field. It will be\nJSON-encoded before being stored in the database as a text value and it\nwill be turned back into a python list/dict/string upon retrieval from the\ndatabase.\n\nThere is also a ``TypedJSONField``, that allows you to define data types that must be included within each object in the array. More documentation to follow.\n\n\nNotes\n~~~~~\n\nIf no ``default`` is provided, and ``null=True`` is not passed in to the\nfield constructor, then a default of ``{}`` will be used.\n\n\nSupported django versions\n-------------------------\n\nAll versions of Django from 1.8 onwards are tested, however, if you are using Postgres, I highly recommend that you consider using the ``django.contrib.postgres`` module's ``JSONField`` instead.\n\nExtras\n------\n\njsonify templatetag\n~~~~~~~~~~~~~~~~~~~\nThis allows you to convert a python data structure into JSON within a template::\n\n    {% load jsonify %}\n\n    <script>\n    var foo = {{ bar|jsonify }};\n    </script>\n\nHistory\n----------\n\n1.0.0\n~~~~~\n\nAdd support for Django 1.8 and 1.9 (without warnings). Remove support for Django < 1.8\nas none of those releases are supported upstream anyway.\n\nWith this version, ``JSONField`` no longer decodes assigned string values as JSON. Instead it assumes that any value that you assign is the decoded value which will be JSON-encoded before storage in the database. This explains the bump to version 1.0 as it's a backwards incompatible change.\n\n0.9.19\n~~~~~~\nAllow passing `decoder_kwargs` as an argument to a field. This dict will be passed as kwargs to\nthe `json.loads()` calls when loading data that is a string.\n\nYou may also set this as a global value in settings.JSONFIELD_DECODER_KWARGS.\n\nA new dict is created for each field: so if this value is altered after field definition, it shouldn't\naffect already attached fields.\n\n0.9.16\n~~~~~~\nAllow passing an argument of `encoder_class` to a field, which will result in that object (or\nthe object located at that path, for instance `core.utils.JSONEncoder`) being used as the `cls`\nargument when serializing objects.\n\nYou may also set this as a global value in settings.JSONFIELD_ENCODER_CLASS\n\n0.9.15\n~~~~~~\nBump version number to get around uploading issues.\n\n0.9.14\n~~~~~~\nNo longer hit the db to work out db_type.\n\n0.9.12\n~~~~~~\nCache the result of db_type.\nHandle incoming data from multiple select widget better.\n\n0.9.9\n~~~~~\nFinally strip out non-required files.\n\n0.9.8\n~~~~~\nRemove freezegun workarounds.\nFix broken build.\n\n0.9.4\n~~~~~\nFixes for mutable defaults: we serialize and then deserialize in this\ncase, so you can still use ``default={}``.\n\n0.9.3\n~~~~~\nRemove support for storing data using Postgres' 9.2's JSON data type, as\nyou cannot currently query against this!\n\nRemove support for django < 1.3.\n\n\n0.9.0\n~~~~~\nAdd LICENSE file.\nAdded TypedJSONField.\n\n\n0.8.10\n~~~~~~\nAllow ``{{ variable|jsonify }}`` to work with querysets.\n\n0.8.8\n~~~~~\nPrevent circular import problem with django 1.3.1 and gargoyle.\n\n0.8.7\n~~~~~\nBetter handle null=True and blank=True: it should make sense what they do now.\n\n0.8.5\n~~~~~\nAllow for '{}' and '[]', and make them not appear to be None.\n\n0.8.4\n~~~~~\nEnsure the version number file is installed with the package.\n\n0.8.3\n~~~~~\nStore the version number in one place only, now.\n\n0.8.2\n~~~~~\nOops. Packaging error prevented install from pypi. Added README.rst to manifest.\n\n0.8.1\n~~~~~\nConverting to string does nothing, as serializing a model instance with a JSONField would have a string version of that field, instead of it embedded inline. (Back to pre 0.8 behaviour).\n\nAdded better querying support: (``field__contains={'key':'value','key2':'value2'}`` works.)\n\nRemoved JSONTableWidget from package.\n\n0.8\n~~~\n(Many thanks to `IanLewis`_ for these features)\n\nSupports django 1.2\n\nSupports callable and json serializable objects as default\n\nImplemented get_db_prep_value()\n\nAdd tests and test runner.\n\nRemoved JSONTableWidget from README.\n\n0.7.1\n~~~~~\nDon't fail when trying to install before django is installed.\n\n0.7\n~~~\nFirst time I tagged releases.\n\n\nTodo\n----------\nAllow for passing in a function to use for processing unknown data types.\n\nConvert date/time objects nicely to/from ISO strings (YYYY-mm-dd HH:MM:SS\nTZNAME). This is actually a bit tricky, as we don't know if we are expecting\na date/time object. We may parse objects as we go, but there could be\nsome performance issues with this. I'm tempted to say \"only do this on TypedJSONField()\"\n\n.. _David Cramer's blog: http://justcramer.com/2009/04/14/cleaning-up-with-json-and-sql/\n.. _IanLewis: https://bitbucket.org/IanLewis",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/schinckel/django-jsonfield/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-jsonfield",
    "package_url": "https://pypi.org/project/django-jsonfield/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-jsonfield/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://bitbucket.org/schinckel/django-jsonfield/"
    },
    "release_url": "https://pypi.org/project/django-jsonfield/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "JSONField for django models",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8524629,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cb968d45a6c5e8a40ecabbf4296027a59301c92c0a36ea42e0b29911dbb46be",
        "md5": "227610886ec7fc383bab0c54ac0e4c0d",
        "sha256": "2280016e6bfe7f0398fbc63539ce688249fe67eaf23756726a493f4e885eb305"
      },
      "downloads": -1,
      "filename": "django-jsonfield-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "227610886ec7fc383bab0c54ac0e4c0d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12604,
      "upload_time": "2016-06-02T09:57:33",
      "upload_time_iso_8601": "2016-06-02T09:57:33.371844Z",
      "url": "https://files.pythonhosted.org/packages/5c/b9/68d45a6c5e8a40ecabbf4296027a59301c92c0a36ea42e0b29911dbb46be/django-jsonfield-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}