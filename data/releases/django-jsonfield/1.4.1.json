{
  "info": {
    "author": "Matthew Schinckel",
    "author_email": "matt@schinckel.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "django-jsonfield\n================\n\n**Maintenance mode only:** It is not recommended you use this library on new\nprojects. Django 3.1 includes a cross-database ``JSONField`` implementation -\nsee its `release notes <https://docs.djangoproject.com/en/3.1/releases/3.1/#jsonfield-for-all-supported-database-backends>`__.\nYou can use that field on older versions of Django with the\n`django-jsonfield-backport <https://pypi.org/project/django-jsonfield-backport/>`__\npackage. See the (long) **History** section below for more information.\n\n**Naming clarification:** This project is released on Pypi under the name\n`django-jsonfield <https://pypi.org/project/django-jsonfield/>`_.\nIt should not be confused with the Pypi package\n`jsonfield <https://pypi.org/project/jsonfield/>`_,\nwhich has also been called django-jsonfield by some.\n\n----\n\nCross-database JSON field for Django models.\n\nHistory\n-------\n\n\nThis project was created in 2010 by Matthew Schinckel. He created it based upon\ncode from `David Cramer's\nblog <https://web.archive.org/web/20140731084522/http://cramer.io/2009/04/14/cleaning-up-with-json-and-sql/>`_,\nhad the repository in Mercurial on\n`BitBucket <https://bitbucket.org/schinckel/django-jsonfield>`_, and\nmaintained it until 2018. In March 2019, Adam Johnson took over maintenance\n(from an invite back in 2018!), and moved it to Git on\n`GitHub <https://github.com/adamchainz/django-jsonfield>`_ because he's no good\nat Mercurial and \"everyone\" uses GitHub these days.\n\nAt the time it was created, the databases that Django supports didn't feature\nnative JSON support. Since then, most of them have gained that ability.\nCorrespondingly, there were some Django field implementations for taking\nadvantage of this:\n\n* A PostgreSQL ``JSONField`` provided in\n  `django.contrib.postgres <https://docs.djangoproject.com/en/2.1/ref/contrib/postgres/fields/>`_,\n  which was created as part of Django in version 1.9, released December 2015.\n  Note this library interferes with the way that works, see\n  `issue 5 <https://github.com/adamchainz/django-jsonfield/issues/5>`_ for\n  explanation and a workaround.\n* A MySQL (and maybe MariaDB) ``JSONField`` provided in\n  `Django-MySQL <https://django-mysql.readthedocs.io/en/latest/model_fields/json_field.html>`_,\n  since version 1.0.7, released March 2016.\n\nDjango 3.1, released August 2020, included a cross-database JSONField as one of\nits headline features (`release\nnote <https://docs.djangoproject.com/en/3.1/releases/3.1/#jsonfield-for-all-supported-database-backends>`__).\nThe developer behind this package, Sage Abdullah, also released the code from\nDjango 3.1 in the package\n`django-jsonfield-backport <https://pypi.org/project/django-jsonfield-backport/>`__.\n\n**It is recommended** that you use Django 3.1 or django-jsonfield-backport\ninstead of this package.\n\nAlternatively, if you don't need the ability to query the contents of your JSON\nin the database, consider storing the JSON in a ``TextField`` and deserializing\nit appropriately in your code, perhaps with a ``@property`` on your model class\nto proxy it.\n\nInstallation\n------------\n\nInstall it with **pip**:\n\n.. code-block:: sh\n\n    pip install django-jsonfield\n\nThen use the field in your models:\n\n.. code-block:: python\n\n    from django.db import models\n    import jsonfield\n\n    class MyModel(models.Model):\n        the_json = jsonfield.JSONField()\n\nYou can assign any JSON-encodable object to this field. It will be\nJSON-encoded before being stored in the database as a text value and it\nwill be turned back into a python list/dict/string upon retrieval from the\ndatabase.\n\nThere is also a ``TypedJSONField``, that allows you to define data types that\nmust be included within each object in the array. More documentation to follow.\n\nNotes\n~~~~~\n\nIf no ``default`` is provided, and ``null=True`` is not passed in to the\nfield constructor, then a default of ``{}`` will be used.\n\nSupported django versions\n-------------------------\n\nAll versions of Django from 1.8 onwards are tested.\n\nExtras\n------\n\njsonify templatetag\n~~~~~~~~~~~~~~~~~~~\nThis allows you to convert a python data structure into JSON within a template::\n\n    {% load jsonify %}\n\n    <script>\n    var foo = {{ bar|jsonify|safe }};\n    </script>\n\nNote that you must only use the \"safe\" filter when you use the jsonify\nfilter within a <script> tag (which is parsed like a CDATA section).\n\nIf you use it in some other places like in an HTML attribute, then\nyou must not use the safe filter so that its output is properly escaped::\n\n    <div data-foo=\"{{ bar|jsonify }}\">\n\nThe above rules are important to avoid XSS attacks with unsafe strings\nstored in the converted data structure.\n\nContributing\n------------\n\nIf you want to contribute to django-jsonfield, it will help you to run\nthe test suite. This can be done in its most simple form by running::\n\n  DB_ENGINE=sqlite3 DB_NAME=tests ./tests.py\n\nTo run the tests fully, you will need to install tox.\n\n\nHistory\n-------\n\n1.4.0 (2019-12-18)\n~~~~~~~~~~~~~~~~~~\n\n* Django 3.0 compatbility. This required adding ``six`` as a dependency.\n\n1.3.1 (2019-08-19)\n~~~~~~~~~~~~~~~~~~\n\n* Fix Python 2 compatilibity from change in 1.3.0\n  (`PR #16 <https://github.com/adamchainz/django-jsonfield/pull/16>`__).\n\n1.3.0 (2019-08-18)\n~~~~~~~~~~~~~~~~~~\n\n* Work in parallel with ``django.contrib.postgres.fields.JSONField`` by\n  removing registration of default JSONB function and instead using Postgres'\n  cast-to-text in SQL\n  (`PR #14 <https://github.com/adamchainz/django-jsonfield/pull/14>`__).\n\n  This should allow you to move to the better supported\n  ``django.contrib.postgres.fields.JSONField``, and then Django 3.0's upcoming\n  all-database ``JSONField``.\n\n1.2.0 (2019-04-28)\n~~~~~~~~~~~~~~~~~~\n\n* Tested with Django 2.2.\n* Stop \"RemovedInDjango30Warning: Remove the context parameter from\n  JSONField.from_db_value().\" on Django 2.0+.\n\n1.1.0 (2019-03-16)\n~~~~~~~~~~~~~~~~~~\n\nDjango 1.10 support: register explicit lookup operators.\n\nDjango 1.11 support: update render() method for widget.\n\n1.0.1 (2016-07-21)\n~~~~~~~~~~~~~~~~~~\n\nFix issue with Postgres JSONB fields.\n\nLimit XSS attacks with jsonify template tag.\n\n1.0.0 (2016-06-02)\n~~~~~~~~~~~~~~~~~~\n\nAdd support for Django 1.8 and 1.9 (without warnings). Remove support for Django < 1.8\nas none of those releases are supported upstream anyway.\n\nWith this version, ``JSONField`` no longer decodes assigned string values as JSON. Instead it assumes that any value that you assign is the decoded value which will be JSON-encoded before storage in the database. This explains the bump to version 1.0 as it's a backwards incompatible change.\n\n0.9.19 (2016-02-22)\n~~~~~~~~~~~~~~~~~~~\n\nAllow passing `decoder_kwargs` as an argument to a field. This dict will be passed as kwargs to\nthe `json.loads()` calls when loading data that is a string.\n\nYou may also set this as a global value in settings.JSONFIELD_DECODER_KWARGS.\n\nA new dict is created for each field: so if this value is altered after field definition, it shouldn't\naffect already attached fields.\n\n0.9.16\n~~~~~~\nAllow passing an argument of `encoder_class` to a field, which will result in that object (or\nthe object located at that path, for instance `core.utils.JSONEncoder`) being used as the `cls`\nargument when serializing objects.\n\nYou may also set this as a global value in settings.JSONFIELD_ENCODER_CLASS\n\n0.9.15\n~~~~~~\nBump version number to get around uploading issues.\n\n0.9.14\n~~~~~~\nNo longer hit the db to work out db_type.\n\n0.9.12\n~~~~~~\nCache the result of db_type.\nHandle incoming data from multiple select widget better.\n\n0.9.9\n~~~~~\nFinally strip out non-required files.\n\n0.9.8\n~~~~~\nRemove freezegun workarounds.\nFix broken build.\n\n0.9.4\n~~~~~\nFixes for mutable defaults: we serialize and then deserialize in this\ncase, so you can still use ``default={}``.\n\n0.9.3\n~~~~~\nRemove support for storing data using Postgres' 9.2's JSON data type, as\nyou cannot currently query against this!\n\nRemove support for django < 1.3.\n\n\n0.9.0\n~~~~~\nAdd LICENSE file.\nAdded TypedJSONField.\n\n\n0.8.10\n~~~~~~\nAllow ``{{ variable|jsonify }}`` to work with querysets.\n\n0.8.8\n~~~~~\nPrevent circular import problem with django 1.3.1 and gargoyle.\n\n0.8.7\n~~~~~\nBetter handle null=True and blank=True: it should make sense what they do now.\n\n0.8.5\n~~~~~\nAllow for '{}' and '[]', and make them not appear to be None.\n\n0.8.4\n~~~~~\nEnsure the version number file is installed with the package.\n\n0.8.3\n~~~~~\nStore the version number in one place only, now.\n\n0.8.2\n~~~~~\nOops. Packaging error prevented install from pypi. Added README.rst to manifest.\n\n0.8.1\n~~~~~\nConverting to string does nothing, as serializing a model instance with a JSONField would have a string version of that field, instead of it embedded inline. (Back to pre 0.8 behaviour).\n\nAdded better querying support: (``field__contains={'key':'value','key2':'value2'}`` works.)\n\nRemoved JSONTableWidget from package.\n\n0.8\n~~~\n\n(Many thanks to `IanLewis <https://bitbucket.org/IanLewis>`_ for these features)\n\nSupports django 1.2\n\nSupports callable and json serializable objects as default\n\nImplemented get_db_prep_value()\n\nAdd tests and test runner.\n\nRemoved JSONTableWidget from README.\n\n0.7.1\n~~~~~\n\nDon't fail when trying to install before django is installed.\n\n0.7\n~~~\nFirst tagged release.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-jsonfield",
    "keywords": "",
    "license": "",
    "maintainer": "Adam Johnson",
    "maintainer_email": "me@adamj.eu",
    "name": "django-jsonfield",
    "package_url": "https://pypi.org/project/django-jsonfield/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-jsonfield/",
    "project_urls": {
      "Homepage": "https://github.com/adamchainz/django-jsonfield"
    },
    "release_url": "https://pypi.org/project/django-jsonfield/1.4.1/",
    "requires_dist": [
      "Django (>=1.11)",
      "six"
    ],
    "requires_python": "",
    "summary": "JSONField for django models",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8524629,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "674c1f1160f4b080c0fbb038c72b1f454003c331f30065396941efd93f652444",
        "md5": "0d83fa716dac56d8d362780e655a4996",
        "sha256": "ccb2fe623e1bf7799e49c593b0a89a85084ef8d3debbf26d92a54e27b5305d72"
      },
      "downloads": -1,
      "filename": "django_jsonfield-1.4.1-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "0d83fa716dac56d8d362780e655a4996",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 14650,
      "upload_time": "2020-10-28T17:32:06",
      "upload_time_iso_8601": "2020-10-28T17:32:06.697959Z",
      "url": "https://files.pythonhosted.org/packages/67/4c/1f1160f4b080c0fbb038c72b1f454003c331f30065396941efd93f652444/django_jsonfield-1.4.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec3473e980f5f5b1f240e0cbc81298728cae0a8e5dcd0967550b0e3fea4a7647",
        "md5": "8eeab3243ccb929806228e76223e7958",
        "sha256": "f789a0ea1f80b48aff7d6c36dd356ce125dbf1b7cd97a82d315607ac758f50ff"
      },
      "downloads": -1,
      "filename": "django-jsonfield-1.4.1.tar.gz",
      "has_sig": true,
      "md5_digest": "8eeab3243ccb929806228e76223e7958",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13565,
      "upload_time": "2020-10-28T17:32:08",
      "upload_time_iso_8601": "2020-10-28T17:32:08.170487Z",
      "url": "https://files.pythonhosted.org/packages/ec/34/73e980f5f5b1f240e0cbc81298728cae0a8e5dcd0967550b0e3fea4a7647/django-jsonfield-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}