{
  "info": {
    "author": "Merlin Dev team",
    "author_email": "merlin@llnl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![Python versions](https://img.shields.io/pypi/pyversions/merlin)\n[![License](https://img.shields.io/pypi/l/merlin)](https://pypi.org/project/merlin/)\n![Activity](https://img.shields.io/github/commit-activity/m/LLNL/merlin)\n[![Issues](https://img.shields.io/github/issues/LLNL/merlin)](https://github.com/LLNL/merlin/issues)\n[![Pull requests](https://img.shields.io/github/issues-pr/LLNL/merlin)](https://github.com/LLNL/merlin/pulls)\n\n![Merlin](https://raw.githubusercontent.com/LLNL/merlin/master/docs/images/merlin.png)\n\n## A brief introduction to Merlin\nMerlin is a tool for running machine learning based workflows. The goal of\nMerlin is to make it easy to build, run, and process the kinds of large\nscale HPC workflows needed for cognitive simulation.\n\nAt its heart, Merlin is a distributed task queuing system, designed to allow complex\nHPC workflows to scale to large numbers of simulations \n(we've done 100 Million on the Sierra Supercomputer).\n\nWhy would you want to run that many simulations?\nTo become your own Big Data generator.\n\nData sets of this size can be large enough to train deep neural networks\nthat can mimic your HPC application, to be used for such\nthings as design optimization, uncertainty quantification and statistical\nexperimental inference. Merlin's been used to study inertial confinement\nfusion, extreme ultraviolet light generation, structural mechanics and\natomic physics, to name a few.\n\nHow does it work?\n\nIn essence, Merlin coordinates complex workflows through a persistent\nexternal queue server that lives outside of your HPC systems, but that\ncan talk to nodes on your cluster(s). As jobs spin up across your ecosystem,\nworkers on those allocations pull work from a central server, which\ncoordinates the task dependencies for your workflow. Since this coordination\nis done via direct connections to the workers (i.e. not through a file\nsystem), your workflow can scale to very large numbers of workers,\nwhich means a very large number of simulations with very little overhead.\n\nFurthermore, since the workers pull their instructions from the central\nserver, you can do a lot of other neat things, like having multiple\nbatch allocations contribute to the same work (think surge computing), or\nspecialize workers to different machines (think CPU workers for your\napplication and GPU workers that train your neural network). Another\nneat feature is that these workers can add more work back to central\nserver, which enables a variety of dynamic workflows, such as may be\nnecessary for the intelligent sampling of design spaces or reinforcement\nlearning tasks.\n\nMerlin does all of this by leveraging some key HPC and cloud computing\ntechnologies, building off open source components. It uses\n[maestro]( https://github.com/LLNL/maestrowf) to\nprovide an interface for describing workflows, as well as for defining\nworkflow task dependencies. It translates those dependencies into concrete\ntasks via [celery](https://docs.celeryproject.org/), \nwhich can be configured for a variety of backend\ntechnologies ([rabbitmq](https://www.rabbitmq.com) and\n[redis](https://redis.io) are currently supported). Although not\na hard dependency, we encourage the use of\n[flux](http://flux-framework.org) for interfacing with\nHPC batch systems, since it can scale to a very large number of jobs.\n\nThe integrated system looks a little something like this:\n\n<img src=\"docs/images/merlin_arch.png\" alt=\"a typical Merlin workflow\">\n\nIn this example, here's how it all works:\n\n1. The scientist describes her HPC workflow as a maestro DAG (directed acyclic graph)\n\"spec\" file `workflow.yaml`\n2. She then sends it to the persistent server with  `merlin run workflow.yaml` .\nMerlin translates the file into tasks.\n3. The scientist submits a job request to her HPC center. These jobs ask for workers via\nthe command `merlin run-workers workflow.yaml`.\n4. Coffee break.\n5. As jobs stand up, they pull work from the queue, making calls to flux to get the \nnecessary HPC resources.\n5. Later, workers on a different allocation, with GPU resources connect to the \nserver and contribute to processing the workload.\n\nThe central queue server deals with task dependencies and keeps the workers fed.\n\nFor more details, check out the rest of the [documentation](https://merlin.readthedocs.io/).\n\nNeed help? <merlin@llnl.gov>\n\n## Quick Start\n\nNote: Merlin supports Python 3.6+.\n\nTo install Merlin and its dependencies, run:\n\n    $ pip3 install merlin\n\nCreate your application config file:\n\n    $ merlin config\n\nThat's it.\n\nTo run something a little more like what you're interested in,\nnamely a demo workflow that has simulation and machine learning,\nfirst generate an example workflow:\n\n    $ merlin example feature_demo\n\nThen install the workflow's dependencies:\n\n    $ pip install -r feature_demo/requirements.txt\n\nThen process the workflow and create tasks on the server:\n\n    $ merlin run feature_demo/feature_demo.yaml\n\nAnd finally, launch workers that can process those tasks:\n\n    $ merlin run-workers feature_demo/feature_demo.yaml\n\n\n## Documentation\n[**Full documentation**](http://merlin.readthedocs.io/) is available, or\nrun:\n\n    $ merlin --help\n\n(or add `--help` to the end of any sub-command you\nwant to learn more about.)\n\n\n## Code of Conduct\nPlease note that Merlin has a\n[**Code of Conduct**](.github/CODE_OF_CONDUCT.md). By participating in\nthe Merlin community, you agree to abide by its rules.\n\n\n## License\nMerlin is distributed under the terms of the [MIT LICENSE](https://github.com/LLNL/merlin/blob/master/LICENSE).\n\nLLNL-CODE-797170\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LLNL/merlin",
    "keywords": "machine learning workflow",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "merlin",
    "package_url": "https://pypi.org/project/merlin/",
    "platform": "",
    "project_url": "https://pypi.org/project/merlin/",
    "project_urls": {
      "Homepage": "https://github.com/LLNL/merlin"
    },
    "release_url": "https://pypi.org/project/merlin/1.7.0/",
    "requires_dist": [
      "cached-property",
      "celery[redis,sqlalchemy] (>=4.4.5)",
      "coloredlogs",
      "cryptography",
      "maestrowf (==1.1.7dev0)",
      "numpy",
      "parse",
      "psutil (>=5.1.0)",
      "pyyaml (>=5.1.2)",
      "tabulate",
      "importlib-resources ; python_version < \"3.7\"",
      "black ; extra == 'dev'",
      "dep-license ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "sphinx (>=2.0.0) ; extra == 'dev'",
      "alabaster ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "The building blocks of workflows!",
    "version": "1.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16178331,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1861f7ba9799d81d6a1f48c4e9dbc4a692eba3e34c2de6170e2a0a43aec0e0f2",
        "md5": "695b2e0e8c20d6a5985c33f237301922",
        "sha256": "5b00e669b028349e20eb3eb97a40ad6bd100c41990abe0067db45a738f7ab875"
      },
      "downloads": -1,
      "filename": "merlin-1.7.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "695b2e0e8c20d6a5985c33f237301922",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 594922,
      "upload_time": "2020-07-23T00:45:55",
      "upload_time_iso_8601": "2020-07-23T00:45:55.261736Z",
      "url": "https://files.pythonhosted.org/packages/18/61/f7ba9799d81d6a1f48c4e9dbc4a692eba3e34c2de6170e2a0a43aec0e0f2/merlin-1.7.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70bb8b46493134186a806132d4810c23d6fd40123e0a49bc408dac2119cc3e54",
        "md5": "58aee4f205fcb7bc4a5352b22d9dd435",
        "sha256": "3c73d036848ec72633ef551bc2078d8ea8b99b7974b5a0a4414b5df72c2c2be7"
      },
      "downloads": -1,
      "filename": "merlin-1.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "58aee4f205fcb7bc4a5352b22d9dd435",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2301517,
      "upload_time": "2020-07-23T00:45:56",
      "upload_time_iso_8601": "2020-07-23T00:45:56.554784Z",
      "url": "https://files.pythonhosted.org/packages/70/bb/8b46493134186a806132d4810c23d6fd40123e0a49bc408dac2119cc3e54/merlin-1.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}