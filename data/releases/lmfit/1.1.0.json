{
  "info": {
    "author": "LMFit Development Team",
    "author_email": "matt.newville@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Scientific/Engineering"
    ],
    "description": "LMfit-py\n========\n\n.. image:: https://dev.azure.com/lmfit/lmfit-py/_apis/build/status/lmfit.lmfit-py?branchName=master\n    :target: https://dev.azure.com/lmfit/lmfit-py/_build/latest?definitionId=1&branchName=master\n\n.. image:: https://codecov.io/gh/lmfit/lmfit-py/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/lmfit/lmfit-py\n\n.. image:: https://img.shields.io/pypi/v/lmfit.svg\n   :target: https://pypi.org/project/lmfit\n\n.. image:: https://img.shields.io/pypi/dm/lmfit.svg\n   :target: https://pypi.org/project/lmfit\n\n.. image:: https://img.shields.io/badge/docs-read-brightgreen\n   :target: https://lmfit.github.io/lmfit-py/\n\n.. image:: https://zenodo.org/badge/4185/lmfit/lmfit-py.svg\n   :target: https://zenodo.org/badge/latestdoi/4185/lmfit/lmfit-py\n\n.. _LMfit mailing list: https://groups.google.com/group/lmfit-py\n\n\nOverview\n---------\n\nLMfit-py provides a Least-Squares Minimization routine and class with a simple,\nflexible approach to parameterizing a model for fitting to data.\n\nLMfit is a pure Python package, and so easy to install from source or with\n``pip install lmfit``.\n\nFor questions, comments, and suggestions, please use the `LMfit mailing list`_.\nUsing the bug tracking software in GitHub Issues is encouraged for known\nproblems and bug reports. Please read\n`Contributing.md <.github/CONTRIBUTING.md>`_ before creating an Issue.\n\n\nParameters and Fitting\n-------------------------\n\nLMfit-py provides a Least-Squares Minimization routine and class with a simple,\nflexible approach to parameterizing a model for fitting to data. Named\nParameters can be held fixed or freely adjusted in the fit, or held between\nlower and upper bounds. In addition, parameters can be constrained as a simple\nmathematical expression of other Parameters.\n\nTo do this, the programmer defines a Parameters object, an enhanced dictionary,\ncontaining named parameters::\n\n    fit_params = Parameters()\n    fit_params['amp'] = Parameter(value=1.2, min=0.1, max=1000)\n    fit_params['cen'] = Parameter(value=40.0, vary=False)\n    fit_params['wid'] = Parameter(value=4, min=0)\n\nor using the equivalent::\n\n    fit_params = Parameters()\n    fit_params.add('amp', value=1.2, min=0.1, max=1000)\n    fit_params.add('cen', value=40.0, vary=False)\n    fit_params.add('wid', value=4, min=0)\n\nThe programmer will also write a function to be minimized (in the least-squares\nsense) with its first argument being this Parameters object, and additional\npositional and keyword arguments as desired::\n\n    def myfunc(params, x, data, someflag=True):\n        amp = params['amp'].value\n        cen = params['cen'].value\n        wid = params['wid'].value\n        ...\n        return residual_array\n\nFor each call of this function, the values for the ``params`` may have changed,\nsubject to the bounds and constraint settings for each Parameter. The function\nshould return the residual (i.e., ``data-model``) array to be minimized.\n\nThe advantage here is that the function to be minimized does not have to be\nchanged if different bounds or constraints are placed on the fitting Parameters.\nThe fitting model (as described in myfunc) is instead written in terms of\nphysical parameters of the system, and remains remains independent of what is\nactually varied in the fit. In addition, which parameters are adjusted and which\nare fixed happens at run-time, so that changing what is varied and what\nconstraints are placed on the parameters can easily be modified by the user in\nreal-time data analysis.\n\nTo perform the fit, the user calls::\n\n    result = minimize(myfunc, fit_params, args=(x, data), kws={'someflag':True}, ....)\n\nAfter the fit, a ``MinimizerResult`` class is returned that holds the results\nthe fit (e.g., fitting statistics and optimized parameters). The dictionary\n``result.params`` contains the best-fit values, estimated standard deviations,\nand correlations with other variables in the fit.\n\nBy default, the underlying fit algorithm is the Levenberg-Marquardt algorithm\nwith numerically-calculated derivatives from MINPACK's lmdif function, as used\nby ``scipy.optimize.leastsq``. Most other solvers that are present in ``scipy``\n(e.g., Nelder-Mead, differential_evolution, basinhopping, etctera) are also\nsupported.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://lmfit.github.io//lmfit-py/",
    "keywords": "curve-fitting,least-squares minimization",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lmfit",
    "package_url": "https://pypi.org/project/lmfit/",
    "platform": "any",
    "project_url": "https://pypi.org/project/lmfit/",
    "project_urls": {
      "Changelog": "https://lmfit.github.io/lmfit-py/whatsnew.html",
      "Documentation": "https://lmfit.github.io/lmfit-py/",
      "Homepage": "https://lmfit.github.io//lmfit-py/",
      "Source": "https://github.com/lmfit/lmfit-py",
      "Tracker": "https://github.com/lmfit/lmfit-py/issues"
    },
    "release_url": "https://pypi.org/project/lmfit/1.1.0/",
    "requires_dist": [
      "asteval (>=0.9.28)",
      "numpy (>=1.19)",
      "scipy (>=1.6)",
      "uncertainties (>=3.1.4)",
      "build ; extra == 'all'",
      "check-wheel-contents ; extra == 'all'",
      "pre-commit ; extra == 'all'",
      "twine ; extra == 'all'",
      "codecov ; extra == 'all'",
      "coverage ; extra == 'all'",
      "flaky ; extra == 'all'",
      "pytest ; extra == 'all'",
      "pytest-cov ; extra == 'all'",
      "cairosvg ; extra == 'all'",
      "corner ; extra == 'all'",
      "dill ; extra == 'all'",
      "emcee (>=3.0.0) ; extra == 'all'",
      "jupyter-sphinx (>=0.2.4) ; extra == 'all'",
      "matplotlib ; extra == 'all'",
      "numdifftools ; extra == 'all'",
      "pandas ; extra == 'all'",
      "Pillow ; extra == 'all'",
      "Sphinx ; extra == 'all'",
      "sphinx-gallery (>=0.10) ; extra == 'all'",
      "sphinxcontrib-svg2pdfconverter ; extra == 'all'",
      "sympy ; extra == 'all'",
      "pycairo ; (platform_system == \"Windows\") and extra == 'all'",
      "build ; extra == 'dev'",
      "check-wheel-contents ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "cairosvg ; extra == 'doc'",
      "corner ; extra == 'doc'",
      "dill ; extra == 'doc'",
      "emcee (>=3.0.0) ; extra == 'doc'",
      "jupyter-sphinx (>=0.2.4) ; extra == 'doc'",
      "matplotlib ; extra == 'doc'",
      "numdifftools ; extra == 'doc'",
      "pandas ; extra == 'doc'",
      "Pillow ; extra == 'doc'",
      "Sphinx ; extra == 'doc'",
      "sphinx-gallery (>=0.10) ; extra == 'doc'",
      "sphinxcontrib-svg2pdfconverter ; extra == 'doc'",
      "sympy ; extra == 'doc'",
      "pycairo ; (platform_system == \"Windows\") and extra == 'doc'",
      "codecov ; extra == 'test'",
      "coverage ; extra == 'test'",
      "flaky ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "Least-Squares Minimization with Bounds and Constraints",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15910051,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eaab87059c989f262c88821cdc960944f0830e241c240652eef55e3eb8508e46",
        "md5": "56e515db3f97b7208c7e6a05a61e71d0",
        "sha256": "29f0540f94b3969a23db2b51abf309f327af8ea3667443ac4cd93d07fdfdb14f"
      },
      "downloads": -1,
      "filename": "lmfit-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "56e515db3f97b7208c7e6a05a61e71d0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 90385,
      "upload_time": "2022-11-28T04:57:45",
      "upload_time_iso_8601": "2022-11-28T04:57:45.207006Z",
      "url": "https://files.pythonhosted.org/packages/ea/ab/87059c989f262c88821cdc960944f0830e241c240652eef55e3eb8508e46/lmfit-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce778cc51e8f8397e90653688306c79cb2a91662821df613721a276313ec226c",
        "md5": "66d6e65f51b4b250f1ee23cb4c647d5f",
        "sha256": "a2755b708ad7bad010178da28f082f55cbee7a084a625b452632e2d77b5391fb"
      },
      "downloads": -1,
      "filename": "lmfit-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "66d6e65f51b4b250f1ee23cb4c647d5f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 308634,
      "upload_time": "2022-11-28T04:57:47",
      "upload_time_iso_8601": "2022-11-28T04:57:47.432971Z",
      "url": "https://files.pythonhosted.org/packages/ce/77/8cc51e8f8397e90653688306c79cb2a91662821df613721a276313ec226c/lmfit-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}