{
  "info": {
    "author": "Redkite",
    "author_email": "luco.support@redkite.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# LucoPy\n\nGiles Matthews: giles.matthews@redkite.com\n\n## Purpose\n\nA generalised Python interface to interact with the Luco API from any python environment.\n\n---\n\n## How to Use\n\nInstall the latest version from PyPI using PIP\n\n```bash\npip install LucoPy\n```\n\nOr, specify a version\n\n```bash\npip install LucoPy==1.2.1\n```\n\nImport the LucoApi class from the LucoPy library in your script and create an object of this class by passing in the API base url and the appropriate credentials. E.g.\n\n```bash\nfrom LucoPy import LucoApi\n\napi = LucoApi(base_url, tenant_id, client_id, client_secret, resource_id)\n```\n\n---\n\n## Authentication\n\nIn order to make calls to the API endpoints, LucoPy must be able to generate an authenticated access token. Authentication is managed by the ApiCore class using an identity provided during the instantiation of the LucoApi object.\n\n### Azure Service Principal\n\nIf the Luco instance is hosted on Azure, a service principal can be used to authenticate to the API. In order to use a service principal, an App Registration must be created in the same Azure subscription as the Luco instance. The required credentials must then be passed as arguments to the LucoApi class when instantiating it. These credentials are:\n\n- `tenant_id` - Directory (tenant) ID of the App Registration representing LucoPy\n- `client_id` - Application (client) ID of the App Registration representing LucoPy\n- `client_secret` - Secret value of the App Registration representing LucoPy\n- `resource_id` - Application (client) ID of the target App Registration representing the API\n\n### Other Identities\n\nAny custom identity object can be passed into the LucoApi class via the `identity` kwarg when instantiating the LucoApi class. This idenity object must have a method called `generate_token()` which returns an access token validated to the API and the expiry datetime of this token.\n\n---\n\n### LucoApi Class\n\n`LucoApi(base_url, tenant_id=None, client_id=None, client_secret=None, resource_id=None, identity=None, timeout=20, log=False)`\n\nThis class acts as the gateway to the Luco platform. An instance of this class should be created at the beginning of each script, API calls are then made through the ApiCore which handles the necessary authentication.\n\nThe base URL of the API instance must be passed as a parameter to this object along with the method of authentication.\n\nThe `timeout` option defines the maximum time (seconds) to wait for an HTTPS response from the API before causing a failure.\n\nUse the `log` argument to turn logging on or off. Logs are generated and sent to a log.txt file in the base directory alongside where the script is being run.\n\n1) `find_slot_id(tag, slot_sequence)`\n\n    Find slot id from a tag/date and slot sequence definition. If the slot sequence does not have an active delivery schedule and a new tag is provided - a new slot will be created with this tag and the id of this slot will be returned.\n\n    Args:\n    - tag (str) : Date (YYYY-MM-DD) for scheduled deliveries or Unique tag for unscheduled deliveries\n    - slot_sequence (list of k:v pairs (dicts)) : list slot sequence definitions in form {'key': 'value'}.\n            Order matters - this determines parameter position.\n\n    Returns:\n    - slot_id (int)\n\n2) `get_submission(slot_id, submission_id)`\n\n    Returns a submission object representing an existing submission.\n\n    Args:\n    - slot_id (int)\n    - submission_id (int)\n\n    Returns:\n    - submission (Submission)\n\n3) `create_submission(slot_id)`\n\n    Create a submission against a slot and returns a Submission object representing it.\n\n    Args:\n    - slot_id (int)\n    - stage (string) : None\n    - run_environment (dict or list of dicts) : None\n\n    Returns:\n    - submission (Submission)\n\n4) `find_submission_in_slot_sequence(slotId, submissionId, OnlyCompletedSubmissions=False, TimeDifference=None, FindClosest='historic')`\n\n    Returns a Slot and Submission ID and whether it is an exact match based on the search criteria, and what the relative difference is in terms of time and number of slots.\n\n    Args:\n    - slot_id (int)\n    - submission_id (int)\n    - OnlyCompletedSubmissions (bool)\n    - TimeDifference (str) : d:HH:MM:SS\n    - FindClosest (str) : historic, future, either or exact\n\n    Returns:\n    - Response JSON (dict)\n\n5) `find_submissions_by_slot_sequence(slotSequence, onlyLatestSlot=True, onlyDeliveredSlots=True, onlyCompletedSubmissions=True, onlyLatestSubmission=True, expectedAfterUtc=None, expectedBeforeUtc=None)`\n\n    Returns submissions and their slots for a slot sequence\n\n    Args:\n    - slotSequence (list of k:v pairs (dicts))\n    - onlyLatestSlot (bool)\n    - onlyDeliveredSlots (bool)\n    - onlyCompletedSubmissions (bool)\n    - onlyLatestSubmission (bool)\n    - expectedAfterUtc (str) : YYYY-MM-DD or YYYY-MM-DDThh:mm:ss\n    - expectedBeforeUtc (str) : YYYY-MM-DD or YYYY-MM-DDThh:mm:ss\n\n    Returns:\n    - Response JSON (dict)\n\n6) `find_latest_submission_by_slot_sequence(slotSequence, expectedAfterUtc=None, expectedBeforeUtc=None)`\n\n    Accessory method to find_submissions_by_slot_sequence(). Returns the slot id and submission id of the most recently completed submission on the slot sequence.\n\n    Equivalent to:\n\n    `find_submissions_by_slot_sequence(slotSequence, expectedAfterUtc=expectedAfterUtc, expectedBeforeUtc=expectedBeforeUtc)`\n\n    Where the response JSON is interpreted to only return the slot id and submission id.\n\n    Args:\n    - slotSequence (list of k:v pairs (dicts))\n    - expectedAfterUtc (str) : YYYY-MM-DD or YYYY-MM-DDThh:mm:ss\n    - expectedBeforeUtc (str) : YYYY-MM-DD or YYYY-MM-DDThh:mm:ss\n\n    Returns:\n    - slot_id (int), submission_id (int)\n\n7) `submit_slot_sequences(slot_sequences, allow_overwrites=False, allow_archiving=False, ignore_delivery_config=False)`\n\n    Import new or update existing slot sequences.\n\n    Args:\n    - slot_sequences (dict (JSON))\n    - allow_overwrites (bool) : False\n    - allow_overwrites (bool) : False\n    - ignore_delivery_config (bool) : False\n\n    Retuns:\n    - results (dict)\n\n### Submission Class\n\n`Submission(slot_id, submission_id, core)`\n\nMuch of the functionality is handled at the Submission level. A Submission object is created by the `get_submission` or `create_submission` methods of the LucoApi class. These objects store the definition of the corresponding submission and handle methods relating to it.\n\n1) `params(group=None, key=None)`\n\n    Retrieve slot parameters. The `group` and `key` kwargs can be used to refine the response. Only use `key` in addition to `group`.\n\n    Args:\n    - group (str) : Parameter group to return\n    - key (str) : Key within group to return the value of\n\n    Returns:\n    - result (dict or str)\n\n2) `get_metrics(stages=None, metrics=None)`\n\n    Retrieve metrics. Filter by stage and metric by passing strings or lists of strings.\n\n    Args:\n    - stages (string)\n    - metrics (string)\n\n    Returns:\n    - metrics (dict)\n\n3) `get_quality() --> dict`\n\n    Retrieve quality results\n\n    Returns:\n    - quality (dict)\n\n4) `submit_run_environment(stage=None, run_environments=None)`\n\n    Submit run environment details\n\n    Args:\n    - stage (string) : Optional\n    - run_environments (dict or list of dicts) : Required\n\n    Returns:\n    - response status (Bool) : Boolen success or failure\n\n5) `submit_metrics(stage, metric=None, value=None, metrics=None)`\n\n    Submit metrics by passing a dict of metric : value pairs to `metrics`. Option to pass a single metric : value pair using `metric` and `value`. It is recommended to use `metrics`.\n\n    Args:\n    - stage (str)\n    - metric (str) : Metric key\n    - value (str) : Value of metric\n    - metrics (dict) : Dictionary of Metric : Value pairs.\n\n    Returns:\n    - response status (Bool) : Boolen success or failure\n\n6) `submit_quality(stage, tool=None, results=None, dataset=None, action=None)`\n\n    Submit quality results\n\n    Args:\n    - stage (str)\n    - tool (str)\n    - results (str)\n    - dataset (str) : Optional\n    - action (str)\n\n    Returns:\n    - response status (Bool) : Boolen success or failure\n\n7) `submit_status(status, stage=None, type=None, message=None, modified_by=None)`\n\n    Submit the status of the Submission\n\n    Args:\n    - status      (str)\n    - stage       (str) : Optional\n    - type        (str) : Optional\n    - message     (str) : Optional\n    - modified_by (str) : Optional\n\n    Returns:\n    - response status (Bool) : Boolen success or failure\n\n8) `submit_completed_status()`\n\n    Submit a status for a completed submission. Equivalent to:\n    `submit_status('Completed', 'Submission')`\n\n    Returns:\n    - response status (Bool) : Boolen success or failure\n\n---\n\n## Version History\n\nLucoPy-1.2.3 : New method to import slot sequences. Some minor quality of life updates.\n\nLucoPy-1.2.2 : Bug fix around unscheduled slots. More informative error handling.\n\nLucoPy-1.2.1 : Updated `find_slot_id` method to use new POST /slots/ endpoint to create unscheduled slots. No change to user.\n\nLucoPy-1.2.0 : First version hosted on PyPI.\n\n---\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LucoPy",
    "package_url": "https://pypi.org/project/LucoPy/",
    "platform": null,
    "project_url": "https://pypi.org/project/LucoPy/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/LucoPy/1.2.3/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Python SDK to support the Luco data observability tool.",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17402063,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63d692d81618624b63282fc322e2051b73a5ed577656494bb6d699547e61181a",
        "md5": "f8e1d2925da551c346e4a74a6a5e2550",
        "sha256": "0235989dbe2af4a251577672003b3d4f16751d0d94e1d0822735bd43c1dac321"
      },
      "downloads": -1,
      "filename": "LucoPy-1.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f8e1d2925da551c346e4a74a6a5e2550",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12232,
      "upload_time": "2022-07-19T14:52:24",
      "upload_time_iso_8601": "2022-07-19T14:52:24.629015Z",
      "url": "https://files.pythonhosted.org/packages/63/d6/92d81618624b63282fc322e2051b73a5ed577656494bb6d699547e61181a/LucoPy-1.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa2ea362434553e386909299ee00d8efcdce1f6d181d349f01b4dadd44a176cd",
        "md5": "416233063989916a2682e59c85901466",
        "sha256": "172e971e583b100d5d675fcdd6f524b633dda189e0434ad270a215915f72c6ef"
      },
      "downloads": -1,
      "filename": "LucoPy-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "416233063989916a2682e59c85901466",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11746,
      "upload_time": "2022-07-19T14:52:26",
      "upload_time_iso_8601": "2022-07-19T14:52:26.849411Z",
      "url": "https://files.pythonhosted.org/packages/fa/2e/a362434553e386909299ee00d8efcdce1f6d181d349f01b4dadd44a176cd/LucoPy-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}