{
  "info": {
    "author": "Arushi Vyas / Rudolph Pienaar",
    "author_email": "dev@babyMRI.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "pl-medcon\n================================\n\n.. image:: https://badge.fury.io/py/medcon.svg\n    :target: https://badge.fury.io/py/medcon\n\n.. image:: https://travis-ci.org/FNNDSC/medcon.svg?branch=master\n    :target: https://travis-ci.org/FNNDSC/medcon\n\n.. image:: https://img.shields.io/badge/python-3.5%2B-blue.svg\n    :target: https://badge.fury.io/py/pl-medcon\n\n.. contents:: Table of Contents\n\n\nAbstract\n--------\n\nAn app to covert NIfTI volumes to DICOM files. This is a ChRIS conformant \"DS\" (Data Synthesis) plugin that wraps around the `medcon` package and provides a thin shim about that executable.\n\n\nSynopsis\n--------\n\n.. code::\n \n        python medcon.py                                                \\\n             -i|--inputFile <inputFile>                                 \\\n            [-a|--args 'ARGS: <argsToPassTo_medcon>']                   \\\n            [--do <macro>]                                              \\\n            [-h] [--help]                                               \\\n            [--json]                                                    \\\n            [--man]                                                     \\\n            [--meta]                                                    \\\n            [--savejson <DIR>]                                          \\\n            [-v <level>] [--verbosity <level>]                          \\\n            [--version]                                                 \\\n            <inputDir>                                                  \\\n            <outputDir>\n\nDescription\n-----------\n\n        `medcon.py` coverts NIfTI volumes to DICOM files. This is a ChRIS\n        conformant \"DS\" (Data Synthesis) plugin that wraps around the\n        medcon package and provides a thin shim about that executable. Using\n        the [--args 'ARGS: <args>'] CLI, a user can pass any additional \n        arbitrary arguments to the underlying `medcon`.\n\n        If running this application directly, i.e. outside of its \n        docker container, please make sure that the `medcon` application\n        is installed in the host system. On Ubuntu, this is typically:\n\n                            sudo apt install medcon\n\n        and also make sure that you are in an appropriate python virtual\n        environment with necessary requirements already installed \n        (see the `requirements.txt` file).\n\n        Please note, however, that running this application from its\n        docker container is the preferred method and the one documented\n        here.\n\n\nArguments\n---------\n\n.. code::\n\n         -i|--inputFile <inputFile>\n        Input file to process. This file exists within the explictly provided \n        CLI positional <inputDir>.\n\n        [-a|--args 'ARGS: <argsToPassTo_medcon>']\n        Optional string of additional arguments to \"pass through\" to medcon.\n\n        All the args for medcon are themselves specified at the plugin level\n        with this flag. These args MUST be contained within single quotes\n        (to protect them from the shell) and the quoted string MUST start with\n         the required keyword 'ARGS: '.\n\n        [--do <macro>]\n        Optional argument to provide a \"macro\" type functionality. Using this \n        argument will add the correct underlying arguments to the internal \n        `medcon` binary.\n\n        Currently available:\n\n\t        - 'nifti2dicom' : this will silently add the args \n                              '-c dicom -split3d'\n\n        [-h] [--help]\n        If specified, show help message and exit.\n\n        [--json]\n        If specified, show json representation of app and exit.\n\n        [--man]\n        If specified, print (this) man page and exit.\n\n        [--meta]\n        If specified, print plugin meta data and exit.\n\n        [--savejson <DIR>]\n        If specified, save json representation file to DIR and exit.\n\n        [-v <level>] [--verbosity <level>]\n        Verbosity level for app. Not used currently.\n\n        [--version]\n        If specified, print version number and exit.\n\nRun\n----\n\nWhile ``pl-medcon`` is meant to be run as a containerized docker image, typcially within ChRIS, it is quite possible to run the dockerized plugin directly from the command line as well. The following instructions are meant to be a psuedo- ``jupyter-notebook`` inspired style where if you follow along and copy/paste into a terminal you should be able to run all the examples.\n\nFirst, let's create a directory, say ``devel`` wherever you feel like it. We will place some test data in this directory to process with this plugin.\n\n.. code:: bash\n\n    cd ~/\n    mkdir devel\n    cd devel\n    export DEVEL=$(pwd)\n\nNow, we need to fetch sample NIfTI data. \n\nPull NIfTI\n~~~~~~~~~~\n\n- We provide a sample directory of a .nii volume here. (https://github.com/FNNDSC/SAG-anon-nii.git)\n\n- Clone this repository (``SAG-anon-nii``) to your local computer.\n\n.. code:: bash\n\n    git clone https://github.com/FNNDSC/SAG-anon-nii.git\n\nMake sure the ``SAG-anon-nii`` directory is placed in the devel directory.\n\n\nUsing ``docker run``\n~~~~~~~~~~~~~~~~~~~~\n\nTo run using ``docker``, be sure to assign an \"input\" directory to ``/incoming`` and an output directory to ``/outgoing``. *Make sure that the* ``$(pwd)/out`` *directory is world writable!*\n\n- Make sure your current working directory is ``devel``. At this juncture it should contain ``SAG-anon-nii``.\n\n- Create an output directory named ``results`` in ``devel``.\n\n.. code:: bash\n\n    mkdir results && chmod 777 results\n\n- Pull the ``fnndsc/pl-medcon`` image using the following command.\n\n.. code:: bash\n\n    docker pull fnndsc/pl-medcon\n\n\nExamples\n--------\n\nCopy and modify the different commands below as needed\n\n..  code:: bash\n\n    docker run --rm                                                         \\\n        -v ${DEVEL}/SAG-anon-nii/:/incoming -v ${DEVEL}/results/:/outgoing  \\\n        fnndsc/pl-medcon medcon.py                                          \\\n        -i SAG-anon.nii                                                     \\\n        -do nifti2dicom                                                     \\\n        /incoming /outgoing\n\nDebug\n------\n\nFinally, let's conclude with some quick notes on debugging this plugin. The debugging process is predicated on the idea of mapping a source code directory into an already existing container, thus \"shadowing\" or \"masking\" the existing code and overlaying current work directly within the container.\n\nIn this manner, one can debug the plugin without needing to continually rebuild the docker image.\n\nSo, assuming the same env variables as above, and assuming that you are in the source repo base directory of the plugin code:\n\n.. code:: bash\n\n    git clone https://github.com/FNNDSC/pl-medcon.git\n    cd pl-medcon\n    docker run --rm -ti                                                     \\\n           -v $(pwd)/medcon:/usr/src/medcon                                 \\\n           -v ${DEVEL}/SAG-anon-nii/:/incoming                              \\\n           -v ${DEVEL}/results/:/outgoing                                   \\\n           fnndsc/pl-medcon medcon.py                                       \\\n           -i SAG-anon.nii                                                  \\\n           -do nifti2dicom                                                  \\\n           /incoming /outgoing\n\nOf course, adapt the above as needed.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FNNDSC/pl-medcon",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medcon",
    "package_url": "https://pypi.org/project/medcon/",
    "platform": "",
    "project_url": "https://pypi.org/project/medcon/",
    "project_urls": {
      "Homepage": "https://github.com/FNNDSC/pl-medcon"
    },
    "release_url": "https://pypi.org/project/medcon/1.0.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A ChRIS DS plugin that wraps around medcon and provides NifTI to DICOM conversion capability.",
    "version": "1.0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7561619,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6523f16bdd13641c482e3a415fd98af6eb4a1f53ada482f3ad668207dadb221",
        "md5": "8653acd3f2e447dd659502d127c12857",
        "sha256": "885536576e7234e6e0d8d3b79c82d80c5efce09c652618c79996785d43a6fb7e"
      },
      "downloads": -1,
      "filename": "medcon-1.0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8653acd3f2e447dd659502d127c12857",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7492,
      "upload_time": "2020-06-25T15:34:13",
      "upload_time_iso_8601": "2020-06-25T15:34:13.358839Z",
      "url": "https://files.pythonhosted.org/packages/e6/52/3f16bdd13641c482e3a415fd98af6eb4a1f53ada482f3ad668207dadb221/medcon-1.0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}