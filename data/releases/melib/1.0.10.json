{
  "info": {
    "author": "Hal Gurgenci",
    "author_email": "h.gurgenci@uq.edu.au",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "`pip install melib`\r\n\r\nDocumentation : https://melib.readthedocs.io/en/latest/\r\n\r\nThere are three files in this package:\r\n\r\n* library.py -- a collection of small functions that can be used to execute small tasks associated with the design of mechanical components such as belts and chains, gears, rotating shafts, keys, bearings, welded joints, welded structures, fasteners, etc.  The module is designed to be used in teaching machine element design to second-year mechanical students. To motivate learning of procedures and relevant standards, there are no pushbutton complete designs. Unless otherwise specified, the formula and data reference is ‘Machine Elements in Mechanical Design’ by Mott.  There is a collection of Excel data files that are accessed by the library. These files are in the data folder. This is not a comprehensive machine design library but sufficient for preparing assignments, examples and exam questions.\r\n* xt.py -- Functions that can be called upon to generate jupyter notebooks for documenting the mechanical design tasks. It also has functions to create pdf documents\r\n* excel.py -- functions to read and write Microsoft Excel files. It uses the python package openpyxl.\r\n\r\nThis was the first project I registered in `PyPi` uploaded to `GitHub` with documentation atuomatically generated using `ReadTheDocs`.\r\nI document every step to help others and future self in similar endeavours.\r\n\r\n# Construct local repository #\r\nI create a local folder `melib` and copy `LICENSE`, `pyproject.toml` and `setup.cfg` into this folder.\r\n* `mkdir melib`\r\n* `cd melib`\r\n* `copy` the python libraries and the `data` folder into `melib`\r\n* `mkdir docs`\r\n\r\nThis is the folder structure at this stage:\r\n\r\n![alt text](assets/folder0.png)\r\n\r\n* `cd docs`\r\n* `sphinx-quickstart`\r\n```\r\n  Separate source and build directories (y/n)[n]: Pick the default ([n])  \r\n  Project name: hgdemo  \r\n  Author name(s): H Gurgenci  \r\n  Project release []: June 2021  \r\n  Project language [en]: __  \r\n```\r\nThis creates an intial directory structure as seen below:\r\n\r\n![alt text](assets/folder1.png)\r\n\r\nThe next step is to edit the files `index.rst` and `conf.py` (they are two files sphinx\r\ncreated in the `docs` folder and are marked in the figure above.\r\nWe will also create a new file `api.rst` in the same folder.  Incidentally, the VS Code,\r\ndid not automatically update the folder pane after `sphinx-quickstart`.  One needs\r\nto refresh to see the new files and folders in `docs`.\r\n\r\n__index.rst__\r\nThis is the file after I edit it:\r\n```\r\n.. melib documentation master file, created by\r\n   sphinx-quickstart on Tue Jun  8 09:34:23 2021.\r\n\r\nWelcome to melib's documentation!\r\n=================================\r\nThe melib package has three files: library, xt, and excel.\r\nThe first one is a library of functions that can be used\r\nto do machine element design computations.  It was created\r\nto help teach a second year design course at the University\r\nof Queensland.\r\n\r\n.. toctree::\r\n   :maxdepth: 2\r\n   :caption: Contents:\r\n\r\n   api.rst\r\n\r\n\r\nIndices and tables\r\n==================\r\n\r\n* :ref:`genindex`\r\n* :ref:`modindex`\r\n* :ref:`search`\r\n```\r\n__conf.py__\r\nFirst, I add the path for the package files:\r\n\r\n```\r\nimport os\r\nimport sys\r\nsys.path.insert(0, os.path.abspath('..'))\r\n```\r\nThen the extensions.  I copied the extension list from the `conf` file in the `psf/requests`\r\nrepository on github.  I probably did not need them all.  Anyway, here they are.\r\n```\r\nextensions = [\r\n    \"sphinx.ext.autodoc\",\r\n    \"sphinx.ext.intersphinx\",\r\n    \"sphinx.ext.todo\",\r\n    \"sphinx.ext.viewcode\",\r\n]\r\n```\r\n__api.rst__\r\nThis is a new file:\r\n```\r\nmelib API reference\r\n===================\r\n\r\n.. module:: melib\r\n\r\n.. automodule:: melib.library\r\n    :members:\r\n\r\n.. automodule:: melib.xt\r\n    :members:\r\n\r\n.. automodule:: melib.excel\r\n    :members:\r\n\r\nThe data folder has design data that are needed by the functions in the library.py file.\r\n```\r\nBefore running `./make html` to generate the local documentation pages, I copy the\r\nimage files I need into the `assets` folder.  These image files are referred to\r\nby doc strings in the `library` and `xt` files.  For example, the reference to\r\nthe file `shoulderscf.png` in `library.py` is\r\n```\r\n            .. image:: ../../assets/shoulderscf.png\r\n```\r\nThe local addressing is all with respect to the `docs` folder.\r\n\r\nThis completes the local documentation.  Let us now generate a `github` repository.\r\n\r\n__IMPORTANT__ Make sure you import the `mock` repository.  Otherwise, `./make html`\r\nwill not work after we do the mock imports of the next section below.  In VS Code\r\n_Powershell_ terminal, enter `py -m pip install mock` and it will install `mock`\r\nin the python kernel that is used by VS Code.  Incidentally, `py -m pip` is\r\nalways better than just `pip` because it makes sure that the packe is imported into\r\nthe python kernek you are using.  Otherwise, confusion may occur when you have multiple\r\npython versions installed on your computer.\r\n\r\n# Construct remote repository #\r\n`git add -A`<br>\r\n`git commit -am` 'the first commit'<br>\r\n`git branch -M main`<br>\r\n`git remote add origin https://github.com/Gurgenci/melib.git`<br>\r\n`git push -u origin main`\r\n\r\n# Remote documentation #\r\nI will generate documentation using `ReadtheDocs`.  For a package like `melib` that\r\nneeds to import other packages, the dependencies need to be stated up front.  Otherwise,\r\n`ReadtheDocs` will fail.\r\n\r\nI create a new file called `requirements.txt` in the `docs` folder:\r\n```\r\nnumpy>=1.0\r\npylatex>=1.0\r\nopenpyxl>=1.0\r\n```\r\nNow add this file to the `git` repository:\r\n\r\n`git add -A`<br>\r\n`git commit -am 'with the new file requirements.txt'`<br>\r\n`git push -u origin main`\r\n\r\n* Log in to `ReadtheDocs.org`\r\n* Import a repository (melib should appear as an available option)\r\nThe import click will invoke the following menu.\r\n\r\n\r\n![alt text](assets/rtd01.png)\r\n\r\nSimply press the `Next` button to get to\r\n\r\n![alt text](assets/rtd02.png)\r\n\r\nThen click on the `Build version` button.  When the `Build` is finished, click\r\non the `View docs` button.\r\n\r\nUnfortunately, this did not work.  The document generator failed to import my\r\nfiles `library`, `xt`, and `excel` and issued the following warnings:\r\n\r\n```\r\nWARNING: autodoc: failed to import module 'library' from module 'melib'; the following exception was raised:\r\nNo module named 'numpy'\r\nWARNING: autodoc: failed to import module 'xt' from module 'melib'; the following exception was raised:\r\nNo module named 'pylatex'\r\nWARNING: autodoc: failed to import module 'excel' from module 'melib'; the following exception was raised:\r\nNo module named 'openpyxl'\r\nlooking for now-outdated files... none found\r\n```\r\nThis was a surprise because I tested the use of a `requirements.txt` in a\r\nsimpler package, `hgdemo`.  There, `ReadtheDocs` managed to import a module that \\\r\nreferenced `numpy` after I included a `requirements.txt` file with a `numpy` line.\r\n\r\nThis approach did not work for `melib`.\r\n\r\nI decided to try an approach suggested in http://blog.rtwilson.com/how-to-make-your-sphinx-documentation-compile-with-readthedocs-when-youre-using-numpy-and-scipy/.  The suggestion is to include the following code at the top of the `conf.py` file:\r\n```\r\nimport mock\r\n\r\nMOCK_MODULES = ['numpy', 'scipy', 'matplotlib', 'matplotlib.pyplot', 'scipy.interpolate',\r\n                'pylatex', 'openpyxl',\r\n                'pylatex.Document',\r\n                ]\r\nfor mod_name in MOCK_MODULES:\r\n    sys.modules[mod_name] = mock.Mock()\r\n```\r\nThis made the `No module named 'pylatex'` and similar messages disappear from the `raw log`.\r\nBut the documentation still did not include anything on `library`, `xt` and `excel` contents.\r\n\r\nI then realised that it is not enough to _mock_ a package but you need to _mock_\r\nevery module you import from it.  For example, for `pylatex.utils` you get\r\n```\r\nNo module named 'pylatex.utils'; 'pylatex' is not a package\r\n```\r\nAll packages and its sub-packages must be added to the 'MOCK-MODULES' in `conf.py`.\r\nThe objects imported from those packages do not need to be included in `MOCK-MODULES`.\r\nFor example, if `'pylatex.utils' in MOCK_MODULES`, then the line `from openpyxl.utils import get_column_letter` is safe.  However, `from openpyxl.utils.cell import coordinate_from_string` is not acceptable.  One needs to add `openpyxl.utils.cell` to `MOCK_MODULES`\r\n\r\n\r\n\r\nIncidentally, when you do a `rebuild` in ReadtheDocs, you must make sure that ReadtheDocs\r\nis project database is updated with your latest `git push`.  Otherwise, `Build Docs`\r\nwill fail and it is an ugly process to recover from it.  So make sure that the\r\ntime since last built is as you expect it:\r\n\r\n![alt text](assets/rtd03.png)\r\n\r\nSometimes, it takes a relatively long time for this time to reset to your last commit.\r\nOnce it was 15 minutes for me.\r\n\r\nIf all works well, the documentation will be created on http://hgdemo.readthedocs.io/\r\n\r\n# Upload to PyPi #\r\nFinally, the `melib` package is uploaded to `PyPi` so that it can be `pip`ped by others.\r\nThis is done through the following process:\r\n* Start an account with https://pypi.org/ if you do not have one already\r\n* Once you have your `PyPi` account, create an API token through https://pypi.org/manage/account/ (scroll down that page and you will see the section)\r\n\r\n![alt text](assets/api_token_pypi.png)\r\n\r\nIf you follow the `PyPi` defaults, this token is stored in `$HOME/.pypirc`, on my system\r\nthe token file name was `C:\\Users\\e4hgurge\\.pypirc`\r\n\r\n*  Create two files in the root folder: _setup.cfg_ and _pyproject.toml_ (see the\r\n  `github` repository for the contants of these files)\r\n* Create a file called `LICENSE` (no extensions)\r\n  * I use GNU General Public License (from https://choosealicense.com/).  I\r\n  copied the license text to the clipboard on this paghe and pasted it into the\r\n  file `setup.cfg`.\r\n* Make sure that we running the latest version of `pip`:\r\n  * `py -m pip install --upgrade pip`\r\n* Make sure that we running the latest version of `build`:\r\n  * `py -m pip install --upgrade build`\r\n* Now run `build` in the root folder\r\n  * `py -m build`\r\n* This will generate the `dist` folder with the following two files in it:\r\n  * `dist\\hgdemo-0.0.1-py3-none-any.whl`\r\n  * `dist\\hgdemo-0.0.1.tar.gz`\r\n* If you are using VS Code, refresh the folder pane contents to see the changes.\r\n* Now run `twine` to upload these two files to TestPyPi:\r\n  * `py -m twine upload --repository testpypi dist/*`\r\nThis worked.  Now let us do the same for PyPi:\r\n* `py -m twine upload dist/*`\r\nThis sometime gives `HTTPError: 400 Bad Request ...`\r\nEven when you change your version, this sometimes happens.\r\n* `py -m twine upload --skip-existing dist/*` sometimes works.\r\n# Including the data files in PyPi upload #\r\n\r\n# Final Steps #\r\n* Go to the root directory of the package\r\n* `git status`\r\n* `git add -A`\r\n* `git commit -am \"Final Commit for the version 1.0.0 following the pypi upload\"`\r\n* `git push -u origin main`\r\n* Log in to https://readthedocs.org/dashboard/ and clock on the project `melib`\r\n* Click on [Build Version] after making sure that the last built is the one you\r\njust `push`ed.  The only way you can tell is by the time (e.g. `3 minutes ago`).\r\nRefresh the page if necessary.\r\n* Documentation will be created on https://melib.readthedocs.io\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Gurgenci/melib",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "melib",
    "package_url": "https://pypi.org/project/melib/",
    "platform": "",
    "project_url": "https://pypi.org/project/melib/",
    "project_urls": {
      "Homepage": "https://github.com/Gurgenci/melib"
    },
    "release_url": "https://pypi.org/project/melib/1.0.10/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "Library functions to help with machine element design projects.",
    "version": "1.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11186835,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78a5785461edce446330a2a60f0e387aeaacac1975a3b2abfdbfa716612d8d31",
        "md5": "8231a1b8142e8f1b86aa2c1494a78a71",
        "sha256": "781175816fce9f726bc22df25bdbc106e62e2f5e614e3eec022dee8225dfe2b9"
      },
      "downloads": -1,
      "filename": "melib-1.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8231a1b8142e8f1b86aa2c1494a78a71",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 249129,
      "upload_time": "2021-07-23T00:42:20",
      "upload_time_iso_8601": "2021-07-23T00:42:20.116173Z",
      "url": "https://files.pythonhosted.org/packages/78/a5/785461edce446330a2a60f0e387aeaacac1975a3b2abfdbfa716612d8d31/melib-1.0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea9bb70a3cb4bf6818bfb3dd9f814df830766bc93f44f6b93604b8a7739d260d",
        "md5": "accfa3e96f74484f2f46d782e9e02183",
        "sha256": "263fd3ff2c2bcc4ba55c50d597fa14858e4a71b8a328b27bbf44d08cf7b634fa"
      },
      "downloads": -1,
      "filename": "melib-1.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "accfa3e96f74484f2f46d782e9e02183",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 63968,
      "upload_time": "2021-07-23T00:39:48",
      "upload_time_iso_8601": "2021-07-23T00:39:48.216218Z",
      "url": "https://files.pythonhosted.org/packages/ea/9b/b70a3cb4bf6818bfb3dd9f814df830766bc93f44f6b93604b8a7739d260d/melib-1.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}