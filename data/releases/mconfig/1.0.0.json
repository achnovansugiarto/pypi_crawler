{
  "info": {
    "author": "jianjun",
    "author_email": "910667956@qq.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Mconfig - ModifyConfig\n\n**.py 配置文件！Python最好用的配置文件！**\n\n写Python，用完 Mconfig 后，以前用的什么 yaml、ini、toml、json 之类的传统配置文件格式是真难用.\n\n传统的配置文件有这么几个问题：\n\n* 不易修改：导入前就得提前设定好，不能在程序运行中修改配置文件或者修改特别麻烦.\n* 读写风险：同时读写配置造成配置混乱或系统异常.\n* 差异化大：一种格式对应一个包，导入进来各种花里胡哨的功能，函数一堆，参数一堆，实际能用到的不多.\n* 学习成本：学习成本其实也不多，就额外花点时间学下语法格式，看下数据转换存储，再花点时间看看对应包的使用.\n\n`Mconfig` 解决了上面所有的问题，又对功能做了极大的加强！不是说加了很多函数需要你来学习.\n\n**它没有任何函数，没有任何方法，没有任何属性，只有Python语法！**\n\n让你用着爽，什么都不用管，像写Python一样使用配置文件！\n\n## 安装\n\n    pip install Mconfig\n\n## 使用\n\n    import Mconfig\n    mc = Mconfig()\n\n只需要两行代码，就可以得到一个使用简便并且功能强大的配置文件对象.\n\n![Mconfig][1]\n\n* **原生语法支持**：Python 语法直接写配置文件，支持 Python 原生所有数据类型，并支持自定义类；\n* **高效简易使用**：增、删、改、查，全部通过 Python 语法实现，没有任何的函数方法，优雅自然；\n* **双向自动同步**：文件或者内存配置的修改会双向自动同步，自动修改源代码，自动读取文件更新；\n* **全局线程安全**：全线程，全对象，随意操作，全局锁数据不丢失，文件错误自动处理；\n\n配置文件默认为 mconfig.py ，如果不存在会在当前目录下新建默认的 mconfig.py 配置文件：\n\n![Mconfig][2]\n\n支持 **数字、字符串、布尔、列表、元组、集合、字典、datetime、自定义类** 数据类型.\n\n其中自定义类的使用相当于是为配置指定了一个域，不同类型的配置可以写在对应的自定义类里，不同类里的变量名可以重名.\n\n也可以手动为Mconfig指定一个配置文件路径作为参数：\n\n    mc = Mconfig(\"myconfig.py\")\n\n    mc_2 = Mconfig(\"config/mconfig.py\")\n\n## 增删改查\n\n### 增：\n\n    In [1]: mc.new_variable = \"i'm a new variable!\"\n\n    In [2]: mc.new_variable\n    Out[2]: \"i'm a new variable!\"\n\n### 删：\n\n    In [3]: del mc.M_tuple\n\n    In [4]: del mc.M_num\n\n### 改：\n\n    In [5]: mc.M_bool = False\n\n    In [6]: mc.M_bool\n    Out[6]: False\n\n    In [7]: mc.M_bool = True\n\n    In [8]: mc.M_List\n    Out[8]: [1, 2, 3]\n\n    In [9]: mc.M_bool = mc.M_List\n\n    In [10]: mc.M_bool\n    Out[10]: [1, 2, 3]\n\n### 查：\n\n    In [11]: mc.M_str\n    Out[11]: 'Hello Mconfig!'\n\n    In [12]: mc.M_List\n    Out[12]: [1, 2, 3]\n\n    In [13]: mc.M_bool\n    Out[13]: True\n\n    In [14]: mc.M_dict\n    Out[14]: {'a': 1, 'b': 2}\n\n### 对自定义类下的变量操作：\n\n就是多访问了一层，操作和上面一样\n\n    In [15]: mc.M_SomeConfigClass_a.variable_new = \"i'm a new class variable!\"\n\n    In [16]: del mc.M_SomeConfigClass_a.variable_b\n\n    In [17]: mc.M_SomeConfigClass_a.variable_c = True\n\n    In [18]: mc.M_SomeConfigClass_a.variable_a\n    Out[18]: 1\n\n### 修改自定义类 & 增加自定义类\n在内存中有如下的自定义类\n\n    class USER_INFO():\n\n        name = \"Harry Potter\"\n\n        Academy = \"Gryffindor\"\n\n可以直接修改原配置中的现存类\n\n    In [19]: mc.M_SomeConfigClass_a = USER_INFO\n\n或者可以在配置中新建自定义类 USER_INFO ：\n\n    In [20]: mc.USER_INFO = USER_INFO\n\n\n**以上的所有操作只要配置信息发生改变都会同步到 mconfig.py 源文件中**\n\n* 用户修改 mconfig.py 后会自动同步所有的 mc 对象.\n* 任意的 mc 对象的改变会自动修改 mconfig.py 源文件.\n\n**无论创建了几个 mc 实例，只要 mc 使用的配置文件一致，当任意配置发生改变，所有的 mc 的配置信息会自动进行同步，并同步修改源文件，所有的 mc 对象指向同一个地址.**\n\n## 注意事项\n\n1. 同一个进程中配置文件不能重名，会被识别为同一个配置文件而出错\n\n        path1/mconfig.py\n        path2/mconfig.py\n\n    不可以这样\n\n        mc_1 = Mconfig(\"path1/mconfig.py\")\n        mc_2 = Mconfig(\"path1/mconfig.py\")\n\n    请使用不同的文件名，或者把所有的配置写在同一个配置文件下\n\n2. 不支持嵌套自定义类，就是不能出现类中类，这只是个配置文件，请保持优雅.\n\n    请不要这样写\n\n        class A():\n            class B():\n                pass\n\n3. 全局进程锁现在还不支持，因为考虑到使用的情况也不多，且如果增加此功能可能需要调度端口，或者增加一个包的依赖.\n\n## 使用包\n\nyapf 0.31.0 https://pypi.org/project/yapf/ (不需要安装，已经集成)\n\n## TODO\n\n* 进程锁支持\n* 分布式配置文件\n\n\n  [1]: https://raw.githubusercontent.com/EVA-JianJun/GitPigBed/master/blog_files/img/Mconfig_0.png\n  [2]: https://raw.githubusercontent.com/EVA-JianJun/GitPigBed/master/blog_files/img/Mconfig_2.png\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EVA-JianJun/Mconfig",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Mconfig",
    "package_url": "https://pypi.org/project/Mconfig/",
    "platform": "",
    "project_url": "https://pypi.org/project/Mconfig/",
    "project_urls": {
      "Homepage": "https://github.com/EVA-JianJun/Mconfig"
    },
    "release_url": "https://pypi.org/project/Mconfig/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": ".py 配置文件！Python最好用的配置文件！",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17328377,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e2c90bfd6d0e8491141e2bdc886b00bdca97e38803926e00a52feb673991909",
        "md5": "097777eb26b758984cb2b60efa6933c8",
        "sha256": "e2f2515d4720e6bbb354b36c3050b7e5269381d28b4891fc18778c27ee8e103e"
      },
      "downloads": -1,
      "filename": "Mconfig-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "097777eb26b758984cb2b60efa6933c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 109749,
      "upload_time": "2021-09-07T03:50:02",
      "upload_time_iso_8601": "2021-09-07T03:50:02.863106Z",
      "url": "https://files.pythonhosted.org/packages/9e/2c/90bfd6d0e8491141e2bdc886b00bdca97e38803926e00a52feb673991909/Mconfig-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4730924c2fe31a27cf4602e88cd4a17d5b9bcffbaa9caf07890d4da12dea4a47",
        "md5": "efa9b13f7f7d882116783aebbde4e98a",
        "sha256": "d9ae2f334aca1ab3ad82ee05a13853fad7283ba9229db76a67789d135bf5d5bf"
      },
      "downloads": -1,
      "filename": "Mconfig-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "efa9b13f7f7d882116783aebbde4e98a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 78380,
      "upload_time": "2021-09-07T03:50:05",
      "upload_time_iso_8601": "2021-09-07T03:50:05.070693Z",
      "url": "https://files.pythonhosted.org/packages/47/30/924c2fe31a27cf4602e88cd4a17d5b9bcffbaa9caf07890d4da12dea4a47/Mconfig-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}