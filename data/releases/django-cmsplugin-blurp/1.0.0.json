{
  "info": {
    "author": "Benjamin Dauvergne",
    "author_email": "bdauvergne@entrouvert.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Settings\n========\n\nYou must declare blocks in a dictionnary setting named\nCMS_PLUGIN_BLURP_RENDERERS, each block define a name, a renderer\nclass and its configuration. The key of the dictionnary define the\nslug of each renderer instance, and the value associated to this\nslug must be a dictionnary containing at least a key called 'name'\ncontaining the human name of this instance.\n\nRenderer\n========\n\nA renderer is a class with the following interface::\n\n      class Renderer(object):\n          def __init__(self, slug, config):\n            pass\n\n          def render(self, context, instance, placeholder):\n              '''Return the context to render the template'''\n              pass\n\n          def render_template(self):\n              '''Return a template path or a Template object'''\n              pass\n\nThe render method must return a context which will be passed to its\ntemplate, the render_template method must return template path or a\nDjango Template object.\n\nYou can also define the following class method::\n\n    @classmethod\n    def check(cls, config)\n        '''Validate the config dictionnary and yield an ASCII string for each error'''\n         pass\n\nYou can raise ImproperlyConfigured when the configuration does not validate.\n\nThere is two abstract helper classes:\n - `cmsplugin_blurp.renderers.base.BaseRenderer`\n   which provide abstract method for checking that `render()` and\n   `render_template()` are properly overriden and a generic\n   `check()` method which call the `check_config()` config method\n   which must return an iterator yielding strings if errors are\n   found\n - `cmsplugin_blurp.renderers.template.TemplateRenderer`\n   an abstract subclass of the `BaseRenderer` which provide a\n   generic implementation of `render_template()` which extract the\n   template path from the configuration dictionnary using the key\n   `template_name` and if it is not found return a template parsed from the\n   value of the key `template`.\n\nCommon configuration keys\n=========================\n\n- ``ajax``  if True this key indicate to the base plugin to render the plugin using an AJAX request.\n\n  You must add the ``cmsplugin_blurp.urls`` to your urls::\n\n       ...\n       url(r'^cmsplugin_blurp/', include('cmsplugin_blurp.urls')),\n       ...\n\n- ``ajax_refresh`` if more than zero it indicates the time between refresh of\n  the plugin content using the AJAX request otherwise the content is never\n  refreshed after the first loading.\n\nStatic renderer\n===============\n\nThe simplest renderer is the static renderer you can configure one like this::\n\n    CMS_BLURP_RENDERERS = {\n        'homepage_text': {\n          'name': u'Homepage text',\n          'class': 'cmsplugin_blurp.renderers.static.Renderer',\n          'content': u'This is the text for the homepage',\n          'template': 'homepage_text.html',\n        }\n    }\n\nThe template `homepage_text.html` could look like this::\n\n    {{ config.content }}\n\n\nData source renderer\n====================\n\nIt load one or more local (using a `file://...` URL) or remote file (using\nan `http://...` or `https://...` URL) and parses them using the\nfollowing parsers:\n\n  - a json parser using the `json` package,\n  - an XML parser using the `etree.ElementTree` package,\n  - a RSS parser using the `feedparser` package feedparser,\n  - a CSV parser using the `csv` package.\n\nThe resulting data structure can be cached, in this case loading is\nasynchronous using a thread.\n\nThe config dictonnary can contain the following keys:\n- `name`, the human name of this renderer instance,\n- `source`, a list of dictionnary defining the remote files, the\ncontent of the dictionnary is described later,\n- `template`, the template in which to render the data sources, it\nwill receive a variable named `data_sources` in its context\ncontaining property named after the `slug` field of each source.\n\nA source definition is a dictionnary containing the following keys:\n    - `slug`, the field name to hold this source parsed value in the\n      template, for example with this configuration:\n\n\n          ...\n          'slug': 'source1',\n          ...\n\n      you can access it with this template fragment:\n\n          {{ data_sources.source1 }}\n\n\n    - `url`, the URL of the file for this source, the scheme file://,\n      http://, and https:// are supported,\n    - `auth_mech`, whether an authentication mechanism is required by\n      the http[s]:// URL, it can be `hmac-sha1`, `hmac-sha256` or\n      `oauth2`. The HMAC mechanism is specified later; the OAuth2\n      mechanisme is the classical OAuth2 HTTP bearer authentication\n      mechanism but it prequires that you are using django-allauth and\n      that an access token for the provider `authentic2` can be\n      retrieved for the current user,\n    - `signature_key`, when using the HMAC authentication mechanism it\n      holds the secret key used to sign the exchanges,\n    - `timeout`, a timeout for making the HTTP request, it is optional\n      and it default to 10 seconds,\n    - `refresh`, how long to cache the parsed value of the source, it\n      is optional and it defaults to 3600 seconds,\n    - `verify_certificate`, when the scheme of URL is https, it\n      indicates whether to check the SSL certificate against configured\n      certifate auhtorities, it is optional and defaults to True,\n    - `allow_redirects`, whether to follow HTTP redirects when getting\n      the data source file, it is optional and defaults to False,\n    - `parser_type`, how to parse the loaded file, it can be `json`,\n      `xml`, `rss`, 'csv' or 'raw' if you do not want any parsing to be\n      done, it is optional and defaults to 'raw',\n    - `content_type`, when doing an HTTP request it configures the\n      content of the `Accept` header, it is optional and automatically\n      set using the `parser_type` value.\n    - `limit`, when parsing an RSS file it limits the returned to first\n      `limit` entries sorted by date, it is optional and defaults to 0\n      meaning no limit,\n    - `csv_params`, when parsing a csv file this dictionnary is passed\n      as keyword arguments to the `reader()` or `DictReader()`\n      constructors, depending on whether the `fieldnames` arguments is\n      present,\n\nExemple with the JSON parser\n----------------------------\n\nThe configuration::\n\n    CMS_BLURP_RENDERERS = {\n        'json': {\n             'name': u'My JSON content',\n             'class': 'cmsplugin_blurp.renderer.data_source.Renderer',\n             'sources': [\n                  {\n                      'slug': 'json_source',\n                      'url': 'http://example.net/file.json',\n                      'parser_type': 'json',\n                      'auth_mech': 'hmac-sha1',\n                      'signature_key': 'abcdefgh0123',\n                      'refresh': 600,\n                  }\n             ]\n             'template': 'my-json-block.html',\n        }\n    }\n\nThe `my-json-block.html` template::\n\n    <dl>\n    {% for key, value in data_sources.json_source.iteritems %}\n        <dt>{{ key }}</dt>\n        <dd>{{ value }}</dd>\n    {% endfor %}\n    </dl>\n\nExemple with the CSV parser\n---------------------------\n\nWe suppose that the file `/var/spool/data/timesheet.csv` contains\nthe following datas::\n\n     Monday,\"10-12,14-17\"\n     Tuesday,\"10-12,14-18\"\n     ....\n\nYou can present this file using this configuration::\n\n    CMS_BLURP_RENDERERS = {\n        'timesheet': {\n            'name': u'Timesheet of our organization',\n            'class': 'cmsplugin_blurp.renderer.data_source.Renderer',\n            'sources': [\n                {\n                    'slug': 'timesheet',\n                    'url': 'file:///var/spool/data/timesheet.csv',\n                    'parser_type': 'csv',\n                    'refresh': 86400,\n                    'csv_params': {\n                        'fieldnames': [\n                            'day',\n                            'opening_hours',\n                        ]\n                    }\n                }\n             ],\n             'template': 'timesheet.html',\n         }\n      }\n\nand the following template::\n\n    <table>\n        <thead>\n            <tr><td>Day</td><td>Opening hours</td></tr>\n        </thead>\n        <tbody>\n            {% for row in data_sources.timesheet %}\n                <tr><td>{{ row.day }}</td><td>{{ row.opening_hours }}</td></tr>\n            {% endfor %}\n        </tbody>\n    </table>\n\nSQL Renderer\n============\n\nConfiguration::\n\n    CMS_BLURP_RENDERERS = {\n        'student_table': {\n            'name': u'Table of students',\n            'class': 'cmsplugin_blurp.renderer.sql.Renderer',\n            'url': 'postgresql://scott:tiger@localhost:5432/mydatabase',\n            'views': {\n                'students': {\n                    'query': 'QUERY name, age, birthdate FROM student WHERE class_id = :class_id',\n                    'bindparams': {\n                        'class_id': 12\n                    }\n                }\n            }\n            'template': 'student-table.html',\n        }\n   }\n\nTemplate::\n\n    <!-- student-table.html -->\n    <table>\n        {% for row in students %}\n            <tr>\n                <td>{{ row.name }}</td>\n                <td>{{ row.age  }}</td>\n                <td>{{ row.birthdate }}</td>\n            </tr>\n        {% endfor %}\n    </table>",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://dev.entrouvert.org/projects/django-cmsplugin-blurp/",
    "keywords": null,
    "license": "AGPLv3 or later",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-cmsplugin-blurp",
    "package_url": "https://pypi.org/project/django-cmsplugin-blurp/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-cmsplugin-blurp/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://dev.entrouvert.org/projects/django-cmsplugin-blurp/"
    },
    "release_url": "https://pypi.org/project/django-cmsplugin-blurp/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "UNKNOWN",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2825886,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94943d4b8387d843a1e072a24f7c1c4f86fed0a5324474bf00844f7239321720",
        "md5": "bccbf9b9f7a003c5c6a64e68c949e026",
        "sha256": "4a452781d12182228123b8c2e8a1a20d074624759a0ed35559e4cf78f3df3c57"
      },
      "downloads": -1,
      "filename": "django-cmsplugin-blurp-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bccbf9b9f7a003c5c6a64e68c949e026",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16364,
      "upload_time": "2014-07-01T10:30:29",
      "upload_time_iso_8601": "2014-07-01T10:30:29.899928Z",
      "url": "https://files.pythonhosted.org/packages/94/94/3d4b8387d843a1e072a24f7c1c4f86fed0a5324474bf00844f7239321720/django-cmsplugin-blurp-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}