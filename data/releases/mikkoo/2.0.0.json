{
  "info": {
    "author": "Gavin M. Roy",
    "author_email": "gavinmroy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.11",
      "Topic :: Communications",
      "Topic :: Internet",
      "Topic :: Software Development",
      "Typing :: Typed"
    ],
    "description": "Mikkoo\n======\nA `PgQ <https://wiki.postgresql.org/wiki/SkyTools#PgQ>`_ to\n`RabbitMQ <https://www.rabbitmq.com>`_ relay. Mikkoo is a PgQ consumer that\nthat publishes to RabbitMQ. In addition, it includes a built in auditing\nsystem that can be used to confirm that all PgQ events are received by\nRabbitMQ.\n\nMikkoo is named for the rabbit in the \"Clever Rabbit and the Elephant\" fable.\n\n|Version| |Downloads| |Status|\n\nInstallation\n------------\nMikkoo is available on the `Python Package Index <https://pypi.python.org/pypi/mikkoo>`_\nand can be installed via `pip`:\n\n.. code:: bash\n\n    pip install mikkoo\n\nOnce you've setup `Skytools <https://wiki.postgresql.org/wiki/SkyTools>`_ you may want to\ninstall the optional included utility functions in `mikkoo.sql <mikkoo.sql>`_ to make usage\neasier.\n\nYou can do this with a combination of ``curl`` and ``psql``:\n\n.. code:: bash\n\n    curl -L https://github.com/gmr/mikkoo/blob/master/mikkoo.sql | psql\n\nThis will install multiple stored procedures and an audit table in a mikkoo schema.\nTake a look at the DDL to get a good idea of what each funciton is and how it can\nbe used.\n\nPgQ Setup\n---------\n\n1. Install ``pgq`` into your database and create the queue:\n\n    .. code:: sql\n\n        # CREATE EXTENSION pgq;\n        CREATE EXTENSION\n        # SELECT pgq.create_queue('test');\n        create_queue\n        --------------\n                    1\n        (1 row)\n\n2. Ensure that `pgqd <http://skytools.projects.pgfoundry.org/skytools-3.0/doc/pgqd.html>`_\n   is running.\n\nPgQ Event to AMQP Mapping\n-------------------------\nWhen inserting events into a PgQ queue, the ``pgq.insert_event/7`` function\nshould be used with the following field mappings:\n\n+---------------+-----------------------+\n| PgQ Event     | AMQP                  |\n+===============+=======================+\n| ``ev_type``   | Routing Key           |\n+---------------+-----------------------+\n| ``ev_data``   | Message body          |\n+---------------+-----------------------+\n| ``ev_extra1`` | Exchange              |\n+---------------+-----------------------+\n| ``ev_extra2`` | Content-Type Property |\n+---------------+-----------------------+\n| ``ev_extra3`` | AMQP Properties [1]_  |\n+---------------+-----------------------+\n| ``ev_extra4`` | Headers [2]_          |\n+---------------+-----------------------+\n| ``ev_time``   | Headers.timetamp      |\n+---------------+-----------------------+\n| ``ev_txid``   | Headers.txid          |\n+---------------+-----------------------+\n\n.. [1] AMQP properties should be set as a JSON blob. Values set in the ``ev_extra3``\n       field will overwrite the automatically created properties ``app_id``,\n       ``content_type``, ``correlation_id``, ``headers``, and ``timestamp``.\n.. [2] If ``ev_extra4`` is specified and is a JSON key/value dictionary, it will\n       be assigned to the ``headers`` AMQP property.\n\nThere is a convenience schema in the `mikkoo.sql <mikkoo.sql>`_ file that adds\nstored procedures for creating properly formatted mikkoo events in PgQ. In\naddition, there is are auditing functions that allow for the creation of an\naudit-log of events that were sent to PgQ.\n\n\nAMQP Message Properties\n^^^^^^^^^^^^^^^^^^^^^^^\nThe following table defines the available fields that can be set in a JSON blob\nin the ``ev_extra3`` field when inserting an event.\n\n+----------------------+----------------+\n| Property             | PgSQL Type     |\n+======================+================+\n| ``app_id``           | text           |\n+----------------------+----------------+\n| ``content_encoding`` | text           |\n+----------------------+----------------+\n| ``content_type``     | text           |\n+----------------------+----------------+\n| ``correlation_id``   | text           |\n+----------------------+----------------+\n| ``delivery_mode``    | int2           |\n+----------------------+----------------+\n| ``expiration``       | text           |\n+----------------------+----------------+\n| ``message_id``       | text           |\n+----------------------+----------------+\n| ``headers``          | text/json [3]_ |\n+----------------------+----------------+\n| ``timestamp``        | int4           |\n+----------------------+----------------+\n| ``type``             | text           |\n+----------------------+----------------+\n| ``priority``         | int4           |\n+----------------------+----------------+\n| ``user_id``          | text           |\n+----------------------+----------------+\n\n.. [3] ``headers`` should be sent to a key/value JSON blob if specified\n\nValues assigned in the JSON blob provided to ``ev_extra3`` take precedence over\nthe automatically assigned ``app_id``, ``content_type``, ``correlation_id``,\n``headers``, and ``timestamp`` values created by Mikkoo at processing time.\n\nAs of 1.0, Mikkoo will automatically add four AMQP headers property values. These\nvalues will not overwrite any values with the same name specified in ``ev_extra4``.\noverwriting values with the same name, even if they are specified in the\nThe ``sequence`` value is a dynamically generated ID that attempts to provide\nfuzzy distributed ordering information. The ``timestamp`` value is the ISO-8601\nrepresentation of the ``ev_time`` field, which is created when an event is added\nto PgQ. The ``txid`` value is the ``ev_txid`` value, the PgQ transaction ID for\nthe event.  These values are added to help provide some level of deterministic\nordering. The ``origin`` value is the hostname of the server that Mikkoo is running\non.\n\nEvent Insertion Example\n-----------------------\n\nThe following example inserts a JSON blob message body of ``{\"foo\": \"bar\"}`` that\nwill be published to the ``postgres`` exchange in RabbitMQ using the ``test.routing-key``\nrouting key. The content type is specified in ``ev_extra2`` and the AMQP ``type``\nmessage property is specified in ``ev_extra3``.\n\n.. code:: sql\n\n    # SELECT pgq.insert_event('test', 'test.routing-key', '{\"foo\": \"bar\"}', 'postgres', 'application/json', '{\"type\": \"example\"}', '');\n     insert_event\n    --------------\n                4\n    (1 row)\n\nWhen this message is received by RabbitMQ it will have a message body of:\n\n.. code:: json\n\n    {\"foo\": \"bar\"}\n\nAnd it will have message properties similar to the following:\n\n+----------------------+-------------------------------------------------------+\n| Property             | Example Value                                         |\n+======================+=======================================================+\n| ``app_id``           | ``mikkoo``                                            |\n+----------------------+-------------------------------------------------------+\n| ``content_type``     | ``application/json``                                  |\n+----------------------+-------------------------------------------------------+\n| ``correlation_id``   | ``0ad6b212-4c84-4eb0-8782-9a44bdfe949f``              |\n+----------------------+-------------------------------------------------------+\n| ``headers``          | +---------------+-----------------------------------+ |\n|                      | | Key           | Example Value                     | |\n|                      | +===============+===================================+ |\n|                      | | ``origin``    | ``mikkoo.domain.com``             | |\n|                      | +---------------+-----------------------------------+ |\n|                      | | ``sequence``  | ``4539586784185129828``           | |\n|                      | +---------------+-----------------------------------+ |\n|                      | | ``timestamp`` | ``2017-02-23 06:17:14.471682-00`` | |\n|                      | +---------------+-----------------------------------+ |\n|                      | | ``txid``      | ``41356335556``                   | |\n|                      | +---------------+-----------------------------------+ |\n+----------------------+-------------------------------------------------------+\n| ``timestamp``        | ``1449600290``                                        |\n+----------------------+-------------------------------------------------------+\n| ``type``             | ``example``                                           |\n+----------------------+-------------------------------------------------------+\n\nConfiguration\n-------------\nThe Mikkoo configuration file uses `YAML <http://yaml.org>`_ for markup and allows\nfor one or more PgQ queue to be processed.\n\nIf you have a Sentry or a Sentry account, the ``Application/sentry_dsn`` setting\nwill turn on sentry exception logging, if the\n`raven <https://pypi.python.org/pypi/raven>`_ client library is installed.\n\nQueues are configured by name under the ``Application/workers`` stanza. The\nfollowing example configures two workers for the processing of a queue named\n``invoices``. Each worker process connects to a local PostgreSQL and RabbitMQ\ninstance using default credentials.\n\n.. code:: yaml\n\n    Application:\n      workers:\n         invoices:\n           postgres_url: postgresql://localhost:5432/postgres\n           rabbitmq_url: amqp://localhost:5672/%2f\n           confirm: False\n\nQueue Configuration Options\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\nThe following table details the configuration options available per queue:\n\n+--------------------+---------------------------------------------------------------------+\n| Key                | Description                                                         |\n+====================+=====================================================================+\n| ``confirm``        | Enable/Disable RabbitMQ Publisher Confirmations. Default: ``True``  |\n+--------------------+---------------------------------------------------------------------+\n| ``consumer_name``  | Overwrite the default PgQ consumer name. Default: ``mikkoo``        |\n+--------------------+---------------------------------------------------------------------+\n| ``max_failures``   | Maximum failures before discarding an event. Default: ``10``        |\n+--------------------+---------------------------------------------------------------------+\n| ``postgresql_url`` | The url for connecting to PostgreSQL                                |\n+--------------------+---------------------------------------------------------------------+\n| ``rabbitmq_url``   | The AMQP url for connecting to RabbitMQ                             |\n+--------------------+---------------------------------------------------------------------+\n| ``retry_delay``    | How long in seconds until PgQ emits failed events. Default: ``10``  |\n+--------------------+---------------------------------------------------------------------+\n| ``unregister``     | Unregister a consumer with PgQ on shutdown. Default: ``True``       |\n+--------------------+---------------------------------------------------------------------+\n| ``wait_duration``  | How long to wait before checking the queue after the last empty     |\n|                    | result. Default: ``1``                                              |\n+--------------------+---------------------------------------------------------------------+\n\nExample Configuration\n^^^^^^^^^^^^^^^^^^^^^\n\nThe following is an example of a full configuration file:\n\n.. code:: yaml\n\n    Application:\n\n      poll_interval: 10\n      sentry_dsn: [YOUR SENTRY DSN]\n\n      statsd:\n        enabled: true\n        host: localhost\n        port: 8125\n\n      workers:\n        test:\n          confirm: False\n          consumer_name: my_consumer\n          max_failures: 5\n          postgres_url: postgresql://localhost:5432/postgres\n          rabbitmq_url: amqp://localhost:5672/%2f\n          retry_delay: 5\n          unregister: False\n          wait_duration: 5\n\n    Daemon:\n      user: mikkoo\n      pidfile: /var/run/mikkoo\n\n    Logging:\n      version: 1\n      formatters:\n        verbose:\n          format: '%(levelname) -10s %(asctime)s  %(process)-6d %(processName) -20s %(name) -18s: %(message)s'\n          datefmt: '%Y-%m-%d %H:%M:%S'\n      handlers:\n        console:\n          class: logging.StreamHandler\n          formatter: verbose\n          debug_only: True\n      loggers:\n        helper:\n          handlers: [console]\n          level: INFO\n          propagate: true\n        mikkoo:\n          handlers: [console]\n          level: INFO\n          propagate: true\n        pika:\n          handlers: [console]\n          level: ERROR\n          propagate: true\n        queries:\n          handlers: [console]\n          level: ERROR\n          propagate: true\n        tornado:\n          handlers: [console]\n          level: ERROR\n          propagate: true\n      root:\n        handlers: [console]\n        level: CRITICAL\n        propagate: true\n      disable_existing_loggers: true\n      incremental: false\n\nRunning Mikkoo\n--------------\nAfter creating a configuration file for Mikkoo like the one above, simply run the mikkoo application providing the path to the configuration file:\n\n.. code:: bash\n\n    mikkoo -c mikkoo.yml\n\nThe application will attempt to daemonize unless you use the ``-f`` foreground CLI switch.\n\nMikkoo's CLI help can be invoked with ``--help`` and yields the following output:\n\n.. code:: bash\n\n    $ mikkoo -h\n    usage: mikkoo [-h] [-c CONFIG] [-f]\n\n    Mikkoo is a PgQ to RabbitMQ Relay\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -c CONFIG, --config CONFIG\n                            Path to the configuration file\n      -f, --foreground      Run the application interactively\n\n\n.. |Version| image:: https://img.shields.io/pypi/v/mikkoo.svg?\n   :target: http://badge.fury.io/py/mikkoo\n\n.. |Status| image:: https://img.shields.io/travis/gmr/mikkoo.svg?\n   :target: https://travis-ci.org/gmr/mikkoo\n\n.. |Downloads| image:: https://img.shields.io/pypi/dm/mikkoo.svg?\n   :target: https://pypi.python.org/pypi/mikkoo\n",
    "description_content_type": "text/x-rst; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gmr/mikkoo",
    "keywords": "amqp,postgres,postgresql,rabbitmq",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mikkoo",
    "package_url": "https://pypi.org/project/mikkoo/",
    "platform": null,
    "project_url": "https://pypi.org/project/mikkoo/",
    "project_urls": {
      "Bug Tracker": "https://github.com/gmr/mikkoo/issues",
      "Documentation": "https://mikkoo.readthedocs.io",
      "Homepage": "https://github.com/gmr/mikkoo",
      "Source Code": "https://github.com/gmr/mikkoo/"
    },
    "release_url": "https://pypi.org/project/mikkoo/2.0.0/",
    "requires_dist": [
      "arrow (<2,>=1.2.3)",
      "helper (<3,>=2.5.0)",
      "pika (<2,>=1.2.0)",
      "psutil (<6,>=5.9.1)",
      "psycopg (<4,>3)",
      "pyyaml (<6,>=5.3.1)",
      "uuid7",
      "sentry-sdk ; extra == 'sentry'",
      "sprockets-statsd ; extra == 'statsd'",
      "bandit ; extra == 'testing'",
      "coverage ; extra == 'testing'",
      "flake8 ; extra == 'testing'",
      "flake8-comprehensions ; extra == 'testing'",
      "flake8-deprecated ; extra == 'testing'",
      "flake8-import-order ; extra == 'testing'",
      "flake8-print ; extra == 'testing'",
      "flake8-quotes ; extra == 'testing'",
      "flake8-rst-docstrings ; extra == 'testing'",
      "flake8-tuple ; extra == 'testing'",
      "sentry-sdk ; extra == 'testing'",
      "sphinx ; extra == 'testing'",
      "sprockets-statsd ; extra == 'testing'",
      "types-pika ; extra == 'testing'",
      "yapf ; extra == 'testing'"
    ],
    "requires_python": ">=3.9",
    "summary": "Mikkoo is a PgQ to RabbitMQ Relay",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16581151,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba3571fb9256e2e50302e445e7c36c673998731965a76472fd96a0d9b0652fca",
        "md5": "0d57e0d4999fa24ae671e40554939bdb",
        "sha256": "b1d59233002d1053b7f5a950c17f070ead27e8d5b6baaedbb05f957750571348"
      },
      "downloads": -1,
      "filename": "mikkoo-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0d57e0d4999fa24ae671e40554939bdb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 21516,
      "upload_time": "2023-01-26T21:25:37",
      "upload_time_iso_8601": "2023-01-26T21:25:37.506053Z",
      "url": "https://files.pythonhosted.org/packages/ba/35/71fb9256e2e50302e445e7c36c673998731965a76472fd96a0d9b0652fca/mikkoo-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d1fc1c11ee85eb3884d75cf47f88889b5d81e7dff827d2025fc6dae4bfeba20e",
        "md5": "65a415ec0e90813f5a05118880727628",
        "sha256": "8b412ca5bc2eec1e22111e8816235e2433baa5013c12bcc8fff03a9a073af73c"
      },
      "downloads": -1,
      "filename": "mikkoo-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "65a415ec0e90813f5a05118880727628",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 23681,
      "upload_time": "2023-01-26T21:25:39",
      "upload_time_iso_8601": "2023-01-26T21:25:39.888640Z",
      "url": "https://files.pythonhosted.org/packages/d1/fc/1c11ee85eb3884d75cf47f88889b5d81e7dff827d2025fc6dae4bfeba20e/mikkoo-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}