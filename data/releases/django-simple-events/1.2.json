{
  "info": {
    "author": "Unai Zalakain",
    "author_email": "contact@unaizalakain.info",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Overview\n--------\n\n``django-simple-events`` lets you bind your models to events. This events have the\nfollowing configuration options:\n\n- beginning\n- time\n- frecuency: single time, daily, weekly, montly, yearly\n- interval: times between frecuencies\n- repetitions\n- end\n\nThe event occurrences are stored in the DB when an event gets saved. If you don't \nspecify a maximum repetitions number or the end datetime, the event occurrences are \nupdated periodically with the ``update_occurrences`` command.\n\nInstalation\n-----------\n\nAdd ``events`` to your ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        ...\n        'events',\n        ...\n        )\n\nSet ``EVENTS_MAX_FUTURE_OCCURRENCES`` to indicate the maximum of future occurrences to\nrecolect in the DB if an event is endless ::\n\n    EVENTS_MAX_FUTURE_OCCURRENCES = 50\n\nYou can also set ``EVENTS_MAX_PAST_OCCURRENCES``\n\nUsage\n-----\n\nIn the following examples we are going to relate ``Study`` objects to events.\n\nModels\n~~~~~~\n\nIf you want to access from ``Study`` the events, it's recommendable to add a \ngeneric relation ::\n\n    from django.db import models\n    from django.contrib.contenttypes import generic\n    from events.models import Event\n\n    class Study(models.Model):\n        ...\n        events = generic.GenericRelation(Event)\n        ...\n\n\nAPI\n~~~\n\nGet the events related to a ``Study``::\n\n    study = Study.objects.get(pk=1)\n    study.events.all()\n\nAdd an event to a ``Study``::\n    \n    from events.models import Event\n    from datetime import date, time\n\n    study = Study.objects.get(pk=1)\n    event = Event(date.today(), time.now())\n\n    event.related_object = study\n    event.save()\n\n    study.events.get(pk=event.pk)\n\nPlay with the occurrences of an event::\n    \n    from events.models import Event\n\n    event = Event.objects.get(pk=1)\n    \n    #get all the occurrences as an iter of datetimes\n    event.get_occurrences()\n\n    #get all of past occurrences as a list of datetimes\n    event.get_past_occurrences()\n\n    #get the last 20 past occurrences as a list of datetimes\n    event.get_past_occurrences(20)\n\n    #get the next 20 future occurrences as a list of datetimes\n    event.get_future_occurrences(20)\n\n    #update the Occurrence objects of an event\n    event.update_occurrences(event.get_occurrences)\n\n    #get the Occurrence objects of an event\n    event.occurrence_set.all()\n\n    #get all the Study objects that have occurrences in the future\n    from datetime import datetime\n    Study.objects.filter(events__occurrence__datetime__gt=datetime.now())\n\nAdmin\n~~~~~\n\nIf, when you are editing a ``Study`` in admin, you want to also edit the\nrelated events, you are easilly done::\n\n    from django.contrib import admin\n\n    from events.admin import EventInline\n\n    class StudyAdmin(admin.ModelAdmin):\n        ...\n        inlines = EventInline,\n        ...\n    admin.site.register(Study, StudyAdmin)\n\nForms\n~~~~~\n\nYou can also use the event form::\n\n    from events.forms import EventForm",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://svn.unaizalakain.info/django-simple-events/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://unaizalakain.info/blog/django-simple-events/",
    "keywords": "events occurrences daily weekly montly yearly repetitions",
    "license": "GPLv3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-simple-events",
    "package_url": "https://pypi.org/project/django-simple-events/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-simple-events/",
    "project_urls": {
      "Download": "http://svn.unaizalakain.info/django-simple-events/",
      "Homepage": "http://unaizalakain.info/blog/django-simple-events/"
    },
    "release_url": "https://pypi.org/project/django-simple-events/1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "UNKNOWN",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 790626,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6fbe2a410150b5183629d07449f76529adfebbe38b7053445941a8d62c73bbd",
        "md5": "08b81dd93af19333b058a8d7f35a11ab",
        "sha256": "468f41de020e5547195bd752c2dc8afe6bf9639da92cf12b16462d66718c3ec6"
      },
      "downloads": -1,
      "filename": "django-simple-events-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "08b81dd93af19333b058a8d7f35a11ab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 202512,
      "upload_time": "2011-08-09T01:05:11",
      "upload_time_iso_8601": "2011-08-09T01:05:11.885032Z",
      "url": "https://files.pythonhosted.org/packages/b6/fb/e2a410150b5183629d07449f76529adfebbe38b7053445941a8d62c73bbd/django-simple-events-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}