{
  "info": {
    "author": "Bruno Barreto Freitas",
    "author_email": "brunobarretofreitas@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "![Python application](https://github.com/brunobarretofreitas/django-rest-action-serializer/workflows/Python%20application/badge.svg) [![codecov](https://codecov.io/gh/brunobarretofreitas/django-rest-action-serializer/branch/master/graph/badge.svg)](https://codecov.io/gh/brunobarretofreitas/django-rest-action-serializer)\n\n# django-rest-action-serializer\nA Django app that provides a serializer mixin that allows You to customize the fields according to the action provided without the need to create other serializers.\n\n# Installation\nInstall the package using pip\n\n```python\npip install django-rest-action-serializer\n```\n\n# Quickstart\n\nAs an example, let's suppose You have a ModelViewSet which You need to display different fields in the list action and in the retrieve action. Without django-rest-action-serializer, You would do:\n\n```python\nclass SerializerForList(serializers.ModelSerializer):\n  \n    class Meta:\n        model = User\n        fields = ('url', 'name', 'age')\n    \n\nclass SerializerForDetail(SerializerForList):\n    stories = StorySerializer(many=True, read_only=True)\n    class Meta:\n        model = User\n        fields = ('name', 'age', 'stories', 'email')\n    \n\nclass UserModelViewSet(ModelViewSet):\n    serializer_class = SerializerForList\n    queryset = User.objects.all()\n    \n    def get_serializer_class(self):\n        if self.detail:\n            return SerializerForDetail\n        \n        return super().get_serializer_class()\n```\n\nA lot of code, right? See how It's easy to do it with django-rest-action-serializer\n\n```python\nfrom dra.serializers import ActionSerializer\n\nclass UserSerializer(ActionSerializer,\n                     serializers.ModelSerializer):\n    \n    class Meta:\n        model = User\n        fields = ('url', 'name', 'age',)\n        action_fields_map: {\n            'retrieve': {\n                'fields': fields + (\n                    'email',\n                    ('stories', StorySerializer(read_only=True, many=True))\n                ),\n                'exclude': ('url',)\n            }\n        }\n        \nclass UserModelViewSet(ModelViewSet):\n    serializer_class = SerializerForList\n    queryset = User.objects.all()\n```\n\nSo, all You need to do is to make your serializer class innherit the ActionSerializer from django-rest-action-serializer and set in it's Meta class the **action_fields_map** attribute, with the following structure:\n\n```python\nclass Meta:\n    ...\n    action_fields_map = {\n      '<action name (retrieve, list, delete)>': {\n        'fields': () # All the field you want to display. If You want a custom field, declare it as a Tuple (field name, field type)\n        'exclude': () # All the fields you want to remove from the fields attribute\n      }\n    }\n```\n\n# Contribution\nFeel free to contribute to this project :D Just open an issue or a pull-request",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/brunobarretofreitas/django-rest-action-serializer/archive/master.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brunobarretofreitas/django-rest-action-serializer",
    "keywords": "django django-rest-framework api serializer",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-action-serializer",
    "package_url": "https://pypi.org/project/django-rest-action-serializer/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-action-serializer/",
    "project_urls": {
      "Download": "https://github.com/brunobarretofreitas/django-rest-action-serializer/archive/master.zip",
      "Homepage": "https://github.com/brunobarretofreitas/django-rest-action-serializer"
    },
    "release_url": "https://pypi.org/project/django-rest-action-serializer/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django app that provides a serializer mixin that allows You to customize the fieldsaccording to the action provided without the need tocreate other serializers.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6576783,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5808c25770a19b272c2a6da9f4b0207ad175cf9add1731bd1c6518c3f1abb53b",
        "md5": "dcb6734b33bcecd3fd84dc207a3f1019",
        "sha256": "a88be7f5119ee0e937feeccb70531fae44277a83a2a800d3df29085401e4f8db"
      },
      "downloads": -1,
      "filename": "django-rest-action-serializer-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dcb6734b33bcecd3fd84dc207a3f1019",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5411,
      "upload_time": "2020-02-05T16:13:16",
      "upload_time_iso_8601": "2020-02-05T16:13:16.655310Z",
      "url": "https://files.pythonhosted.org/packages/58/08/c25770a19b272c2a6da9f4b0207ad175cf9add1731bd1c6518c3f1abb53b/django-rest-action-serializer-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}