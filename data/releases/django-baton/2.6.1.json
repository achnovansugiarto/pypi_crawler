{
  "info": {
    "author": "abidibo",
    "author_email": "abidibo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development",
      "Topic :: Software Development :: User Interfaces"
    ],
    "description": "# django-baton\n\n![Version](https://img.shields.io/github/v/tag/otto-torino/django-baton?label=version)\n[![Build status](https://travis-ci.com/otto-torino/django-baton.svg?branch=master)](https://travis-ci.com/github/otto-torino/django-baton)\n![License](https://img.shields.io/pypi/l/django-baton)\n[![Downloads](https://pepy.tech/badge/django-baton)](https://pepy.tech/project/django-baton)\n\nA cool, modern and responsive django admin application based on bootstrap 5\n\nDocumentation: [readthedocs](http://django-baton.readthedocs.io/)\n\n---\n**Live Demo**\n\nNow you can try django-baton using the new shining live demo!\nLogin with user `demo` and password `demo`\n\n[https://django-baton.sqrt64.it/](https://django-baton.sqrt64.it/)\n\n---\n\n![Screenshot](docs/images/index-analytics-lg.png)\n\n## Table of contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n    - [Menu](#configuration-menu)\n    - [Search Field](#configuration-search-field)\n    - [Analytics](#configuration-analytics)\n- [Page Detection](#page-detection)\n- [Signals](#signals)\n- [Js Utilities](#js-utilities)\n- [Js Translations](#js-translations)\n- [List Filters](#list-filters)\n- [Changelist Includes](#changelist-includes)\n- [Changelist Filters Includes](#changelist-filters-includes)\n- [Changelist Row Attributes](#changelist-row-attributes)\n- [Form Tabs](#form-tabs)\n- [Form Includes](#form-includes)\n- [Collapsable stacked inlines entries](#collapsable-stackedinline)\n- [Customization](#customization)\n- [Tests](#tests)\n- [Contributing](#contributing)\n- [Screenshots](#screenshots)\n\n## <a name=\"features\"></a>Features\n\nSupports Django >= 2.1. For older versions of Django, please use django-baton@1.13.2.\n\nThis application was written with one concept in mind: overwrite as few django templates as possible.\nEverything is styled through CSS and when required, JS is used.\n\n- Based on Bootstrap 5 and FontAwesome Free 6\n- Fully responsive\n- Custom and flexible sidebar menu\n- Configurable search field\n- Text input filters and dropdown list filters facilities\n- Form tabs out of the box\n- Easy way to include templates in the change form and change list pages\n- Easy way to add attributes to change list table rows/cells\n- Collapsable stacked inline entries\n- Lazy loading of uploaded images\n- Optional display of changelist filters in a modal\n- Optional use of changelist filters as a form (combine some filters at once and perform the search action)\n- Optional index page filled with google analytics widgets\n- Customization available for recompiling the js app provided\n- IT translations provided\n\nThe following packages are required to manage the Google Analytics index:\n\n- google-auth\n- google-auth-httplib2\n- google-api-python-client\n- requests\n\nBaton is based on the following frontend technologies:\n\n- Bootstrap 5\n- FontAwesome 6\n\nFlexbox is used to accomplish responsiveness. jQuery is used for DOM manipulations.\n\nAll JS, fonts and CSS are compiled, and produce a single JS file which is included in the `base_site` template.\n\nA custom menu is provided, the menu is rendered through JS, and data is fetched in JSON format through an AJAX request.\n\n## <a name=\"installation\"></a>Installation\n\nInstall the last stable release\n\n    $ pip install django-baton\n\n> :information_source: In order to use the Google Analytics index, install baton along the optional dependencies with `$ pip install django-baton[analytics]`\n\nor clone the repo inside your project\n\n    $ git clone https://github.com/otto-torino/django-baton.git\n\nAdd `baton` and `baton.autodiscover` to your `INSTALLED_APPS`:\n\n``` python\nINSTALLED_APPS = (\n    # ...\n    'baton',\n    'django.contrib.admin',\n    # ... (place baton.autodiscover at the very end)\n    'baton.autodiscover',\n)\n```\n\nReplace `django.contrib.admin` in your project urls, and add baton urls:\n\n``` python\n# from django.contrib import admin\nfrom baton.autodiscover import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('baton/', include('baton.urls')),\n\n]\n```\n\nIf you get a \"__No crypto library available__\" when using the Google Analytics index, install this package:\n\n    $ pip install PyOpenSSL\n\n### Why two installed apps?\n\nWell, first `baton` has to be placed before the `django.contrib.admin` app, because it overrides 3 templates and resets all CSS.\nThe `baton.autodiscover` entry is needed as the last installed app in order to register all applications for the admin.\nI decided to create a custom `AdminSite` class, to allow the customization of some variables the Django way (`site_header`, `index_title`, ...). I think it's a good approach to customize these vars instead of overwriting the orignal templates. The problem is that when creating a custom AdminSite, you have to register all the apps manualy. I didn't like\nthat so I wrote this `autodiscover` module which automatically registers all the apps registered with the Django's default AdminSite. For this to work, all the apps must be already registered so this app should be the last in `INSTALLED_APPS`.\n\n## <a name=\"configuration\"></a>Configuration\n\nThe configuration dictionary must be defined inside your settings:\n\n``` python\nBATON = {\n    'SITE_HEADER': 'Baton',\n    'SITE_TITLE': 'Baton',\n    'INDEX_TITLE': 'Site administration',\n    'SUPPORT_HREF': 'https://github.com/otto-torino/django-baton/issues',\n    'COPYRIGHT': 'copyright Â© 2020 <a href=\"https://www.otto.to.it\">Otto srl</a>', # noqa\n    'POWERED_BY': '<a href=\"https://www.otto.to.it\">Otto srl</a>',\n    'CONFIRM_UNSAVED_CHANGES': True,\n    'SHOW_MULTIPART_UPLOADING': True,\n    'ENABLE_IMAGES_PREVIEW': True,\n    'CHANGELIST_FILTERS_IN_MODAL': True,\n    'CHANGELIST_FILTERS_ALWAYS_OPEN': False,\n    'CHANGELIST_FILTERS_FORM': True,\n    'MENU_ALWAYS_COLLAPSED': False,\n    'MENU_TITLE': 'Menu',\n    'MESSAGES_TOASTS': False,\n    'GRAVATAR_DEFAULT_IMG': 'retro',\n    'LOGIN_SPLASH': '/static/core/img/login-splash.png',\n    'SEARCH_FIELD': {\n        'label': 'Search contents...',\n        'url': '/search/',\n    },\n    'MENU': (\n        { 'type': 'title', 'label': 'main', 'apps': ('auth', ) },\n        {\n            'type': 'app',\n            'name': 'auth',\n            'label': 'Authentication',\n            'icon': 'fa fa-lock',\n            'models': (\n                {\n                    'name': 'user',\n                    'label': 'Users'\n                },\n                {\n                    'name': 'group',\n                    'label': 'Groups'\n                },\n            )\n        },\n        { 'type': 'title', 'label': 'Contents', 'apps': ('flatpages', ) },\n        { 'type': 'model', 'label': 'Pages', 'name': 'flatpage', 'app': 'flatpages' },\n        { 'type': 'free', 'label': 'Custom Link', 'url': 'http://www.google.it', 'perms': ('flatpages.add_flatpage', 'auth.change_user') },\n        { 'type': 'free', 'label': 'My parent voice', 'default_open': True, 'children': [\n            { 'type': 'model', 'label': 'A Model', 'name': 'mymodelname', 'app': 'myapp' },\n            { 'type': 'free', 'label': 'Another custom link', 'url': 'http://www.google.it' },\n        ] },\n    ),\n    'ANALYTICS': {\n        'CREDENTIALS': os.path.join(BASE_DIR, 'credentials.json'),\n        'VIEW_ID': '12345678',\n    }\n}\n```\n\n- `SITE_HEADER`, `COPYRIGHT` and `POWERED_BY` are marked as safe, so you can include img tags and links.\n- `SUPPORT_HREF` is the URL of the support link. For instance, you can use `mailto:info@blabla.com`.\n- `CONFIRM_UNSAVED_CHANGES`: if set to `True` a confirmation modal appears when leaving a change form or add form with unsaved changes.\nThe check of a dirty form relies on the jQuery serialize method, so it's not 100% safe. Disabled inputs, particular widgets (ckeditor) can not be detected.\nDefault value is `True`.\n- `SHOW_MULTIPART_UPLOADING`: if set to `True` an overlay with a spinner appears when submitting a `multipart/form-data` form.\n- `ENABLE_IMAGES_PREVIEW`: if set to `True` a preview is displayed above all input file fields which contain images. You can control how the preview is displayed by overriding the class `.baton-image-preview`. By default, previews have 100px height and with a box shadow (on \"hover\").\n- `CHANGELIST_FILTERS_IN_MODAL`: if set to `True` the changelist filters are opened in a centered modal above the document, useful when you set many filters. By default, its value is `False` and the changelist filters appears from the right side of the changelist table.\n- `CHANGELIST_FILTERS_ALWAYS_OPEN`: if set to `True` the changelist filters are opened by default. By default, its value is `False` and the changelist filters can be expanded clicking a toggler button. This option is considered only if `CHANGELIST_FILTERS_IN_MODAL` is `False`.\n- `CHANGELIST_FILTERS_FORM`: if set to `True` the changelist filters are treated as in a form, you can set many of them and then press a filter button. With such option all standard filters are displayed as dropdowns.\n- `COLLAPSABLE_USER_AREA`: if set to `True` the sidebar user area is collapsed and can be expanded to show links.\n- `MENU_ALWAYS_COLLAPSED`: if set to `True` the menu is hidden at page load, and the navbar toggler is always visible, just click it to show the sidebar menu.\n- `MENU_TITLE`: the menu title shown in the sidebar. If an empty string, the menu title is hidden and takes no space on larger screens, the default menu voice will still be visible in the mobile menu.\n- `MESSAGES_TOASTS`: you can decide to show all or specific level admin messages in toasts. Set it to `True` to show all message in toasts. set it to `['warning', 'error']` to show only warning and error messages in toasts.\n- `GRAVATAR_DEFAULT_IMG`: the default gravatar image displayed if the user email is not associated to any gravatar image. Possible values: 404, mp, identicon, monsterid, wavatar, retro, robohash, blank (see [http://en.gravatar.com/site/implement/images/](http://en.gravatar.com/site/implement/images/)).\n- `LOGIN_SPLASH`: an image used as body background in the login page. The image is centered and covers the whole viewport.\n\n`MENU`, `SEARCH_FIELD` and `ANALYTICS` configurations in detail:\n\n### <a name=\"configuration-menu\"></a>MENU\n\nCurrently four kind of voices are supported: _title_, _app_, _model_ and _free_.\n\nTitle and free voices can have children, which follow the following rules:\n\n- children voices' children are ignored (do not place an app voice as a child)\n\nVoices with children (title, app, free) can specify a `default_open` key to expand the submenu by default.\n\nIf you don't define a MENU key in the configuration dictionary, the default MENU is shown.\n\n#### Title\n\nLike __MAIN__ and __CONTENTS__ in the screenshot, it represents a menu section. You should set a label and optionally apps or perms key, used for visualization purposes.\n\nIf the title voice should act as a section title for a group of apps, you'd want to specify these apps, because if the user can't operate over them, then the voice is not shown.\nYou can also define some perms (OR condition), like this:\n\n    { 'type': 'title', 'label': 'main', 'perms': ('auth.add_user', ) },\n\nFree voices can have children and so you can specify the _default_open_ key.\n\n#### App\n\nYou must specify the _type_ and _name_ keys. Optionally, an _icon_ key (you can use FontAwesome classes which are included by default), a _default_open_ key and a _models_ key.\nIf you don't define the _models_ key, the default app models are listed under your app.\n\n> **_NOTE:_**  app name should be lowercase\n\n#### Model\n\nYou must specify the _type_, _name_ and _app_ keys. Optionally, an icon key.\n\n> **_NOTE:_**  model name should be lowercase\n\n#### Free\n\nYou can specify free voices. You must define a _url_ and if you want some visibility permissions (OR clause). Free voices can have children and so you can specify the _default_open_ key. Free voices also accept a _re_ property, which specifies a regular expression used to decide whether to highlight the voice or not (the regular expression is evaluated against the document location pathname).\n\n\t{\n\t    'type': 'free',\n\t    'label': 'Categories',\n\t    'url': '/admin/news/category/',\n\t    're': '^/admin/news/category/(\\d*)?'\n\t}\n\n### <a name=\"configuration-search-field\"></a>SEARCH FIELD\n\nWith Baton you can optionally configure a search field in the sidebar above the menu.\n\n![Search field](docs/images/search-field.png)\n\nWith this functionality, you can configure a sidebar input search field with autocomplete functionality that can let you surf easily and quickly to any page you desire.\n\n```\n'SEARCH_FIELD': {\n    'label': 'Label shown as placeholder',\n    'url': '/api/path/',\n},\n```\n\nThe autocomplete field will call a custom api at every keyup event. Such api receives the `text` param in the querystring and  should return a json response including the search results in the form:\n\n```\n{\n    length: 2,\n    data: [\n        { label: 'My result #1', icon: 'fa fa-edit', url: '/admin/myapp/mymodel/1/change' },\n        // ...\n    ]\n}\n```\n\nIn order to activate this functionality you should add the BATON configuration:\n\n\nYou should provide the results length and the data as an array of objects which must contain the `label` and `url` keys. The `icon` key is optional and is treated as css class given to an `i` element.\n\nLet's see an example:\n\n```\n@staff_member_required\ndef admin_search(request):\n    text = request.GET.get('text', None)\n    res = []\n    news = News.objects.all()\n    if text:\n        news = news.filter(title__icontains=text)\n    for n in news:\n        res.append({\n            'label': str(n) + ' edit',\n            'url': '/admin/news/news/%d/change' % n.id,\n            'icon': 'fa fa-edit',\n        })\n    if text.lower() in 'Lucio Dalla Wikipedia'.lower():\n        res.append({\n            'label': 'Lucio Dalla Wikipedia',\n            'url': 'https://www.google.com',\n            'icon': 'fab fa-wikipedia-w'\n        })\n    return JsonResponse({\n        'length': len(res),\n        'data': res\n    })\n```\n\nYou can move between the results using the keyboard up and down arrows, and you can browse to the voice url pressing Enter.\n\n\n### <a name=\"configuration-analytics\"></a>ANALYTICS\n\n> :information_source: In order to use the Google Analytics index, install baton along the optional dependencies with `$ pip install django-baton[analytics]`\n\nYou can create a cool index page displaying some statistics widgets using the Google Analytics API just by defining the `ANALYTICS` setting.\n\nIt requires two keys:\n\n- `CREDENTIALS`: it is the path to the credentials json file\n- `VIEW_ID`: ID of the view from which to display data\n\nYou can add contents before and after the analytics dashboard by extending the `baton/analytics.html` template and filling the `baton_before_analytics` and `baton_after_analytics` blocks.\n\n#### How to generate a credentials json file\n\nFollow the steps in the Google Identity Platform documentation to [create a service account](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#creatinganaccount) from the [Google Developer Console](https://console.developers.google.com/).\n\nOnce the service account is created, you can click the Generate New JSON Key button to create and download the key and add it to your project.\n\nAdd the service account as a user in Google Analytics. The service account you created in the previous step has an email address that you can add to any of the Google Analytics views you'd like to request the data from. It's generally best to only grant the service account read-only access.\n\n## <a name=\"page-detection\"></a>Page Detection\n\nBaton triggers some of its functionalities basing upon the current page. For example, it will trigger the tab functionality only when the current page is an add form or change form page.\n\nBaton understands which page is currently displayed performing some basic regular expressions against the location pathname.\nThere may be cases in which you'd like to serve such contents at different and custom urls, in such cases you need a way to tell Baton which kind of page is tied to that url.\n\nFor this reason you can inject your custom hook, a javascript function which should return the page type and that receives as first argument the Baton's default function to use as fallback, i.e.\n\n``` html\n<!-- admin/base_site.html -->\n<script>\n    (function ($, undefined) {\n        $(document).ready(function () {\n            Baton.detectPageHook = fn => /newschange/.test(location.pathname) ? 'change_form' : fn()\n            Baton.init(JSON.parse(document.getElementById('baton-config').textContent));\n        })\n    })(jQuery, undefined)\n</script>\n```\n\nIn this case we tell Baton that when the location pathname includes the string `newschange`, then the page should be considered a `change_form`, otherwise we let Baton guess the page type.\n\nSo, in order to hook into the Baton page detection system, just define a `Baton.detectPageHook` function which receives the default function as first argument and should return the page type.\n\nThe available page types are the following: `dashboard`, `admindocs`, `login`, `logout`, `passowrd_change`, `password_change_success`, `add_form`, `change_form`, `changelist`, `filer`, `default`.\n\n## <a name=\"signals\"></a>Signals\n\nBaton provides a dispatcher that can be used to register function that will be called when some events occurr.\nCurrently, Baton emits four types of events:\n\n- `onNavbarReady`: dispatched when the navbar is fully rendered\n- `onMenuReady`: dispatched when the menu is fully rendered (probably the last event fired, since the menu contents are retrieved async)\n- `onTabsReady`: dispatched when the changeform tabs are fully rendered\n- `onMenuError`: dispatched if the request sent to retrieve menu contents fails\n- `onReady`: dispatched when Baton JS has finished its sync job\n\nTo use these, just override the baton `admin/base_site.html` template and register your listeners **before** calling `Baton.init`, i.e.\n\n``` html\n<!-- ... -->\n<script>\n\n    (function ($, undefined) {\n        // init listeners\n        Baton.Dispatcher.register('onReady', function () { console.log('BATON IS READY') })\n        Baton.Dispatcher.register('onMenuReady', function () { console.log('BATON MENU IS READY') })\n        Baton.Dispatcher.register('onNavbarReady', function () { console.log('BATON NAVBAR IS READY') })\n        // end listeners\n        $(document).ready(function () {\n            Baton.init(JSON.parse(document.getElementById('baton-config').textContent));\n        })\n    })(jQuery, undefined)\n</script>\n<!-- ... -->\n```\n\n## <a name=\"js-utilities\"></a>Js Utilities\n\nBaton comes with a number of exported js modules you can use to enhance your admin application.\n\n### Dispatcher\n\nBaton Dispatcher singleton module lets you subscribe to event and dispatch them, making use of the Mediator pattern.\n\nExample:\n\n``` javascript\n\n// register a callback tied to the event\nBaton.Dispatcher.register('myAppLoaded', function (evtName, s) { console.log('COOL ' + s) })\n\n// emit the event\nBaton.Dispatcher.emit('myAppLoaded', 'STUFF!')\n```\n\n### Modal\n\nBaton Modal class lets you insert some content on a bootstrap modal without dealing with all the markup.\n\n![Modal](docs/images/modals.png)\n\nUsage:\n\n``` javascript\n// modal configuration:\n//\n// let config = {\n//     title: 'My modal title',\n//     subtitle: 'My subtitle', // optional\n//     content: '<p>my html content</p>', // alternative to url\n//     url: '/my/url', // url used to perform an ajax request, the response is put inside the modal body. Alternative to content.\n//     hideFooter: false, // optional\n//     showBackBtn: false, // show a back button near the close icon, optional\n//     backBtnCb: function () {}, // back button click callback (useful to have a multi step modal), optional\n//     actionBtnLabel: 'save', // action button label, default 'save', optional\n//     actionBtnCb: null, // action button callback, optional\n//     onUrlLoaded: function () {}, // callback called when the ajax request has completed, optional\n//     size: 'lg', // modal size: sm, md, lg, xl, optional\n//     onClose: function () {} // callback called when the modal is closed, optional\n// }\n//\n// constructs a new modal instance\n// let myModal = new Baton.Modal(config)\n\nlet myModal = new Baton.Modal({\n    title: 'My modal title',\n    content: '<p>my html content</p>',\n    size: 'lg'\n})\n\nmyModal.open();\nmyModal.close();\n\nmyModal.update({\n    title: 'Step 2',\n    content: '<p>cool</p>'\n})\nmyModal.toggle();\n```\n\n## <a name=\"js-translations\"></a>Js Translations\n\nThere are some circustamces in which Baton will print to screen some js message. Baton detects the user locale and will localize such messages, but it comes with just `en` and `it` translations provided.\n\n> Baton retrieves the current user locale from the `lang` attribute of the `html` tag.\n\nHowever you can provide or add your own translations by attaching an object to the `Baton` namespace:\n\n``` javascript\n// these are the default translations, you can just edit the one you need, or add some locales. Baton engione will always\n// pick up your custom translation first, if it find them.\n// you can define the object before Baton.init in the base_site template\nBaton.translations = {\n  unsavedChangesAlert: 'You have some unsaved changes.',\n  uploading: 'Uploading...',\n  filter: 'Filter',\n  close: 'Close',\n  save: 'Save',\n  search: 'Search',\n  cannotCopyToClipboardMessage: 'Cannot copy to clipboard, please do it manually: Ctrl+C, Enter',\n  retrieveDataError: 'There was an error retrieving the data'\n}\n\nBaton.init(JSON.parse(document.getElementById('baton-config').textContent));\n```\n\nIf Baton can't find the translations for the user locale, it will default to `en`. Keep in mind that Baton will use `en` translations for all `en-xx` locales, but of course you can specify your custom translations!\n\n## <a name=\"list-filters\"></a>List Filters\n\n![List Filters](docs/images/filters.png)\n\n### Input Text Filters\n\nTaken from this [medium article](https://medium.com/@hakibenita/how-to-add-a-text-filter-to-django-admin-5d1db93772d8)\n\nBaton defines a custom InputFilter class that you can use to create text input filters and use them as any other `list_filters`, for example:\n\n``` python\n\n# your app admin\n\nfrom baton.admin import InputFilter\n\nclass IdFilter(InputFilter):\n    parameter_name = 'id'\n    title = 'id'\n \n    def queryset(self, request, queryset):\n        if self.value() is not None:\n            search_term = self.value()\n            return queryset.filter(\n                id=search_term\n            )\n\n\nclass MyModelAdmin(admin.ModelAdmin):\n    list_filters = (\n        'my_field',\n        IdFilter,\n        'my_other_field',\n    )\n\n```\n\n### Dropdown Filters\n\nTaken from the github app [django-admin-list-filter-dropdown](https://github.com/mrts/django-admin-list-filter-dropdown)\n\nBaton provides a dropdown form of the following list filters:\n\n| Django admin filter name   | Baton name                  |\n| -------------------------- | --------------------------- |\n| SimpleListFilter           | SimpleDropdownFilter        |\n| AllValuesFieldListFilter   | DropdownFilter              |\n| ChoicesFieldListFilter     | ChoicesDropdownFilter       |\n| RelatedFieldListFilter     | RelatedDropdownFilter       |\n| RelatedOnlyFieldListFilter | RelatedOnlyDropdownFilter   |\n\nThe dropdown is visible only if the filter contains at least three options, otherwise the default template is used.\n\nUsage:\n```\nfrom baton.admin import DropdownFilter, RelatedDropdownFilter, ChoicesDropdownFilter\n\nclass MyModelAdmin(admin.ModelAdmin):\n    # ...\n    list_filter = (\n        # for ordinary fields\n        ('a_charfield', DropdownFilter),\n        # for choice fields\n        ('a_choicefield', ChoiceDropdownFilter),\n        # for related fields\n        ('a_foreignkey_field', RelatedDropdownFilter),\n    )\n```\n\n### Multiple choice Filters\n\nBaton defines a custom MultipleChoiceListFilter class that you can use to filter on multiple options, for example:\n\n``` python\n# your app admin\n\nfrom baton.admin import MultipleChoiceListFilter\n\nclass StatusListFilter(MultipleChoiceListFilter):\n    title = 'Status'\n    parameter_name = 'status__in'\n\n    def lookups(self, request, model_admin):\n        return News.Status.choices\n\n\nclass MyModelAdmin(admin.ModelAdmin):\n    list_filters = (\n        'my_field',\n        StatusListFilter,\n        'my_other_field',\n    )\n```\n\n## <a name=\"changelist-includes\"></a>Changelist Includes\n\n> In order for this feature to work, the user browser must support html template tags.\n\nBaton lets you include templates directly inside the change list page, in any position you desire. It's as simple as specifying the template path and the position of the template:\n\n```python\n@admin.register(News)\nclass NewsAdmin(admin.ModelAdmin):\n    #...\n    baton_cl_includes = [\n        ('news/admin_include_top.html', 'top', ),\n        ('news/admin_include_below.html', 'below', )\n    ]\n```\n\nIn this case, Baton will place the content of the `admin_include_top.html` template at the top of the changelist section (above the search field), and the content of the `admin_include_below.html` below the changelist form.\n\n![Baton changelist includes](docs/images/baton-cl-includes.png)\n\nYou can specify the following positions:\n\n|Position|Description|\n|:--------|:-----------|\n|`top`| the template is placed inside the changelist form, at the top|\n|`bottom`| the template is placed inside the changelist form, at the bottom|\n|`above`| the template is placed above the changelist form|\n|`below`| the template is placed below the changelist form|\n\nAnd, of course, you can access the all the changelist view context variables inside your template.\n\n## <a name=\"changelist-filters-includes\"></a>Changelist Filters Includes\n\n> In order for this feature to work, the user browser must support html template tags.\n\nBaton lets you include templates directly inside the change list filter container, at the top or the bottom. It's as simple as specifying the template path and the position of the template:\n\n```python\n@admin.register(News)\nclass NewsAdmin(admin.ModelAdmin):\n    #...\n    baton_cl_filters_includes = [\n        ('news/admin_filters_include_top.html', 'top', ),\n        ('news/admin_filters_include_bottom.html', 'bottom', )\n    ]\n```\n\n![Baton changelist filters includes](docs/images/baton-cl-filters-includes.png)\n\nYou can specify the following positions:\n\n|Position|Description|\n|:--------|:-----------|\n|`top`| the template is placed inside the changelist filter container, at the top|\n|`bottom`| the template is placed inside the changelist filter container, at the bottom|\n\nAnd, of course, you can access the all the changelist view context variables inside your template.\n\n## <a name=\"changelist-row-attributes\"></a>Changelist Row Attributes\n\n> In order for this feature to work, the user browser must support html template tags.\n\nWith Baton you can add every kind of html attribute (including css classes) to any element in the changelist table (cell, rows, ...)\n\n![Baton changelist row attributes](docs/images/baton-cl-row-attributes.png)\n\nIt's a bit tricky, let's see how:\n\n1. Add a `baton_cl_rows_attributes` function to your `ModelAdmin` class, which takes `request` and `cl` (changelist view) as parameters.\n2. Return a json dictionary where the keys are used to match an element and the values specifies the attributes and other rules to select the element.\n\nBetter to see an example:\n\n``` javascript\nclass NewsModelAdmin(admin.ModelAdmin):\n    # ...\n\n    def get_category(self, instance):\n        return mark_safe('<span class=\"span-category-id-%d\">%s</span>' % (instance.id, str(instance.category)))\n    get_category.short_description = 'category'\n\n    def baton_cl_rows_attributes(self, request, cl):\n        data = {}\n        for news in cl.queryset.filter(category__id=2):\n            data[news.id] = {\n                'class': 'table-info',\n            }\n        data[news.id] = {\n            'class': 'table-success',\n            'data-lol': 'lol',\n            'title': 'A fantasctic tooltip!',\n            'selector': '.span-category-id-%d' % 1,\n            'getParent': 'td',\n        }\n        return json.dumps(data)\n```\n\nIn such case we're returning a dictionary with possibly many keys (each key is an id of a news instance).\n\nThe first kind of dictionary elements will add a `table-info` class to the `tr` (rows) containing the news respecting the rule `category__id=2`\n\nThe second kind of element instead uses some more options to customize the element selection: you can specify a css selector, and you can specify if Baton should then take one of its parents, and in such case you can give a parent selector also.\nIn the example provided Baton will add the class `table-success`, `data-attribute` and the `title` attribute to the cell which contains the element `.span-category-id-1`.\n\nSo these are the rules:\n\n- the default `selector` is `#result_list tr input[name=_selected_action][value=' + key + ']`, meaning that it can work only if the model is editable (you have the checkox inputs for selecting a row), and selects the row of the instance identified by `key`. If you use a custom selector the dictionary `key` is unuseful.\n- the default `getParent` is `tr`. You can change it at you will, or set it to `False`, in such case the element to which apply the given attributes will be the one specified by `selector`.\n- Every other key different from `selector` and `getParent` will be considered an attribute and added to the element.\n\n## <a name=\"form-tabs\"></a>Form tabs\n\n![Tabs](docs/images/tabs.png)\n\nHow much I loved django-suit form tabs? Too much. So, this was a feature I couldn't live without.\n\nThere are three types of tabs:\n\n- **fieldset tab**: a tab containing a fieldset\n- **inline tab**: a tab containing an inline\n- **group tab**: a tab which can contain fieldsets and inlines in the order you specify\n\nTabs' titles are retrieved automatically. For fieldset and inline tabs, it's the fieldset's title and the inline related verbose name plural.\nFor group tabs the first title is taken (either of an inline or fieldset section).\n\nUsing group tabs you can mix inlines with fields just by splitting fields into fieldsets and arranging them in your preferred order.\n\nLet's see how to define tabs in your admin forms (everything is done through js, no templatetags or templates overriden):\n\n``` python\nclass AttributeInline(admin.StackedInline):\n    model = Attribute\n    extra = 1\n\nclass FeatureInline(admin.StackedInline):\n    model = Feature\n    extra = 1\n\nclass ItemAdmin(admin.ModelAdmin):\n    list_display = ('label', 'description', 'main_feature', )\n    inlines = [AttributeInline, FeatureInline, ]\n\n    fieldsets = (\n        ('Main', {\n            'fields': ('label', ),\n            'classes': ('order-0', 'baton-tabs-init', 'baton-tab-inline-attribute', 'baton-tab-fs-content', 'baton-tab-group-fs-tech--inline-feature', ),\n            'description': 'This is a description text'\n\n        }),\n        ('Content', {\n            'fields': ('text', ),\n            'classes': ('tab-fs-content', ),\n            'description': 'This is another description text'\n\n        }),\n        ('Tech', {\n            'fields': ('main_feature', ),\n            'classes': ('tab-fs-tech', ),\n            'description': 'This is another description text'\n\n        }),\n    )\n```\n\nAs you can see these are the rules:\n\n- Inline classes remain the same, no action needed\n- On the first fieldset, define a `baton-tabs-init` class which enables tabs\n- On the first fieldset, you can add an `order-[NUMBER]` class, which will be used to determined in which position to place the first fieldset. The order starts from 0, and if omitted, the first fieldset has order 0. If you assign for example the class `order-2` to the first fieldset, then the first fieldset will be the third tab, while all other tabs will respect the order of declaration.\n- For every inline you want to put in a separate tab, add a class `baton-tab-inline-MODELNAME` or `baton-tab-inline-RELATEDNAME` if you've specified a related name in the model foreign key field\n- For every fieldset you want to put in a separate tab, add a class `baton-tab-fs-CUSTOMNAME`, and add a class `tab-fs-CUSTOMNAME` on the fieldset\n- For every group you want to put in a separate tab, add a class `baton-tab-group-ITEMS`, where items can be inlines (`inline-RELATEDNAME`) and/or fieldsets (`fs-CUSTOMNAME`) separated by a double hypen `--`. Also add a class `tab-fs-CUSTOMNAME` on the fieldset items.\n- Tabs order respects the defined classes order\n- Fieldsets without a specified tab will be added to the main tab. If you want the fieldset to instead display outside of any tabs, add a class `tab-fs-none` to the fieldset. The fieldset will then always be visible regardless of the current tab.\n\nOther features:\n\n- When a field has an error, the first tab containing errors is opened automatically\n- You can open a tab on page load just by adding an hash to the url, i.e. `#inline-feature`, `#fs-content`, `#group-fs-tech--inline-feature`\n\n## [Form Includes](#form-includes)\n\n> In order for this feature to work, the user browser must support html template tags.\n\nBaton lets you include templates directly inside the change form page, in any position you desire. It's as simple as specifying the template path, the field name used as anchor and the position of the template:\n\n```python\n@admin.register(News)\nclass NewsAdmin(admin.ModelAdmin):\n    #...\n    baton_form_includes = [\n        ('news/admin_datetime_include.html', 'datetime', 'top', ),\n        ('news/admin_content_include.html', 'content', 'above', )\n    ]\n```\n\nIn this case, Baton will place the content of the `admin_datetime_include.html` template at the top of the datetime field row, and the content of the `admin_content_include.html` above the content field row.\n\n![Baton form includes](docs/images/baton-form-includes.png)\n\nYou can specify the following positions:\n\n|Position|Description|\n|:--------|:-----------|\n|`top`| the template is placed inside the form row, at the top|\n|`bottom`| the template is placed inside the form row, at the bottom|\n|`above`| the template is placed above the form row|\n|`below`| the template is placed below the form row|\n|`right`| the template is placed inline at the input field right side|\n\nAnd, of course, you can access the `{{ original }}` object variable inside your template.\n\nIt works seamlessly with the tab facility, if you include content related to a field inside one tab, then the content will be placed in the same tab.\n\n## <a name=\"collapsable-stackedinline\"></a>Collapsable stacked inlines entries\n\n![Screenshot](docs/images/collapsable_stackedinline.png)\n\nBaton lets you collapse single stacked inline entries, just add a `collapse-entry` class to the inline, with or without the entire collapse class:\n\n```\nclass VideosInline(admin.StackedInline):\n    model = Video\n    extra = 1\n    classes = ('collapse-entry', )  # or ('collapse', 'collapse-entry', )\n```\n\nAnd if you want the first entry to be initially expanded, add also the `expand-first` class:\n\n```\nclass VideosInline(admin.StackedInline):\n    model = Video\n    extra = 1\n    classes = ('collapse-entry', 'expand-first', )\n```\n\n## <a name=\"customization\"></a>Customization\n\nIt's easy to heavily customize the appeareance of __baton__. All the stuff is compiled from a modern JS app which resides in `baton/static/baton/app`.\n\n![Customization](docs/images/customization.png)\n\nYou just need to change the [SASS variables values](https://github.com/otto-torino/django-baton/blob/master/baton/static/baton/app/src/styles/_variables.scss) (and you can also overwrite Bootstrap variables), re-compile, get the compiled JS file, place it in the static folder of your main app,\nand place your main app (ROOTAPP) before __baton__ in the `INSTALLED_APPS`.\n\nSo:\n\n    $ git clone https://github.com/otto-torino/django-baton.git\n    $ cd django-baton/baton/static/baton/app/\n    $ npm install\n    $ vim src/styles/_variables.scss\n    $ npm run compile\n    $ cp dist/baton.min.js ROOTAPP/static/baton/app/dist/\n\nIf you want to test your live changes, just start the webpack dev server:\n\n    $ cd django-baton/baton/static/baton/app/\n    $ npm run dev\n\nAnd inside the `base_site.html` template, make these changes:\n\n    <!-- <script src=\"{% static 'baton/app/dist/baton.min.js' %}\"></script> comment the compiled src and uncomment the webpack served src -->\n    <script src=\"http://localhost:8080/static/baton/app/dist/baton.min.js\"></script>\n\nNow while you make your changes to the JS app (CSS included), webpack will update the bundle automatically, so just refresh the page and you'll see your changes.\n\n## <a name=\"tests\"></a>Tests\n\nStarting from the release 1.7.1, django baton is provided with a set of unit and e2e tests. Testing baton is not so easy, because it almost do all the stuff with css rules and by manipulating the DOM. So the e2e tests are performed using selenium and inspecting the test application inside a real browser. In order to have them run properly, you need to have the test application running on `localhost:8000`.\n\n## <a name=\"development\"></a>Development\n\nStart the test app (login admin:admin):\n\n    $ cd testapp\n    $ python3 -m venv .virtualenv\n    $ cd app\n    $ pip install -r requirements.txt\n    $ python manage.py runserver\n\nSwitch the baton js path in `base_site.html`\n\n    <!-- <script src=\"{% static 'baton/app/dist/baton.min.js' %}\"></script> comment the compiled src and uncomment the webpack served src -->\n    <script src=\"http://localhost:8080/static/baton/app/dist/baton.min.js\"></script>\n\nStart the js app in watch mode\n\n    $ cd baton/static/baton/app\n    $ npm install\n    $ npm run dev\n\nNow you'll see live all your changes in the testapp.\n\n### Commands\n\nInstall `invoke` and `sphinx_rtd_theme`\n\n    $ pip install invoke sphinx_rtd_theme\n\nNow you can generate the documentation in order to check it. Inside the root dir:\n\n    $ invoke docs\n\n## <a name=\"contributing\"></a>Contributing\n\nRead [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## <a name=\"screenshots\"></a>Screenshots\n\n![Screenshot](docs/screenshots/mobile_mix.jpg)\n\n![Screenshot](docs/screenshots/mobile_mix2.png)\n\n![Screenshot](docs/screenshots/tablet.png)\n\n![Screenshot](docs/screenshots/splash-login.png)\n\n![Screenshot](docs/screenshots/index-no-analytics.png)\n\n![Screenshot](docs/screenshots/changelist-lg.png)\n\n![Screenshot](docs/screenshots/changeform-error.png)\n\n![Screenshot](docs/screenshots/filters-modal.png)\n\n![Screenshot](docs/screenshots/filters-form.png)\n\n![Screenshot](docs/screenshots/menu-collapsed.png)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/otto-torino/django-baton",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-baton",
    "package_url": "https://pypi.org/project/django-baton/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-baton/",
    "project_urls": {
      "Demo": "https://django-baton.sqrt64.it/admin",
      "Documentation": "https://django-baton.readthedocs.io/en/latest/",
      "Homepage": "http://github.com/otto-torino/django-baton",
      "Source": "http://github.com/otto-torino/django-baton",
      "Tracker": "http://github.com/otto-torino/django-baton/issues"
    },
    "release_url": "https://pypi.org/project/django-baton/2.6.1/",
    "requires_dist": [
      "google-auth ; extra == 'analytics'",
      "google-auth-httplib2 ; extra == 'analytics'",
      "google-api-python-client ; extra == 'analytics'",
      "requests ; extra == 'analytics'"
    ],
    "requires_python": "",
    "summary": "A cool, modern and responsive django admin application",
    "version": "2.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16678858,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "114ce98d390b4c7c86188d4311c84dad8f46975a903e60c2a39fe59549820310",
        "md5": "db5a375c76e97df045bd681a7f059a5a",
        "sha256": "9fcbddffbf2a14b541aee34827aff34b7b53143110070035a07cb874d93866d2"
      },
      "downloads": -1,
      "filename": "django_baton-2.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "db5a375c76e97df045bd681a7f059a5a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1550905,
      "upload_time": "2023-01-31T11:25:35",
      "upload_time_iso_8601": "2023-01-31T11:25:35.664866Z",
      "url": "https://files.pythonhosted.org/packages/11/4c/e98d390b4c7c86188d4311c84dad8f46975a903e60c2a39fe59549820310/django_baton-2.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b529295262cb55e2c97f0f00024cf90ca5a9759f5c5e7cc198c82207a59d37b",
        "md5": "aa04dd8edcf84fab055ed752ba0b04b0",
        "sha256": "b2c80cc3da545594d4d99323fec363f4b46d7174c7b7d7789708e76a97694462"
      },
      "downloads": -1,
      "filename": "django-baton-2.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "aa04dd8edcf84fab055ed752ba0b04b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1551412,
      "upload_time": "2023-01-31T11:25:38",
      "upload_time_iso_8601": "2023-01-31T11:25:38.321020Z",
      "url": "https://files.pythonhosted.org/packages/0b/52/9295262cb55e2c97f0f00024cf90ca5a9759f5c5e7cc198c82207a59d37b/django-baton-2.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}