{
  "info": {
    "author": "abidibo",
    "author_email": "abidibo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development",
      "Topic :: Software Development :: User Interfaces"
    ],
    "description": "# django-baton\n\n[![Downloads](https://pepy.tech/badge/django-baton)](https://pepy.tech/project/django-baton)\n![Version](https://img.shields.io/github/v/tag/otto-torino/django-baton?label=version)\n![License](https://img.shields.io/pypi/l/django-baton)\n\nA cool, modern and responsive django admin application based on bootstrap 4.5.0\n\nDocumentation: [readthedocs](http://django-baton.readthedocs.io/)\n\n![Screenshot](screenshots/index-analytics-lg.jpg)\n\n## Table of contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n    - [Menu](#configuration-menu)\n    - [Analytics](#configuration-analytics)\n- [Signals](#signals)\n- [Text Input Filters](#text-input-filters)\n- [Form Tabs](#form-tabs)\n- [Customization](#customization)\n- [Contributing](#contributing)\n- [Screenshots](#screenshots)\n\n## <a name=\"features\"></a>Features\n\nTested with Django >= 1.10.5\n\nThis application was written with one concept in mind: overwrite as few django templates as possible.\nEverything is styled through CSS and when required, JS is used.\n\n- Based on bootstrap 4.5.0 and FontAwesome Free 5.8.1\n- Fully responsive\n- Custom and flexible sidebar menu\n- Text input filters facility\n- Form tabs out of the box\n- Lazy loading of uploaded images\n- Optional index page filled with google analytics widgets\n- Customization available for recompiling the js app provided\n- IT translations provided\n\nThe following packages are required to manage the Google Analytics index:\n\n- google-api-python-client\n- oauth2client==1.5.2\n\nAt the moment __baton__ defines only 3 custom templates:\n\n- `admin/base_site.html`, needed to inject the JS application (which includes css and images, compiled with [webpack](https://webpack.github.io/));\n- `admin/delete_confirmation.html`, needed because of a bug (IMO) in the template, in particular the `extra_head` block does not contain the parent content, hence it must be overridden (FIXED IN django 1.11, remains until baton will support django 1.10);\n- `admin/delete_selected_confirmation.html`, same as above.\n\nBaton is based on the following frontend technologies:\n\n- bootstrap 4.5.0\n- FontAwesome 5.8.1 (solid and brands)\n\nFlexbox is used to accomplish responsiveness. jQuery is used for DOM manipulations.\n\nAll JS, fonts and CSS are compiled, and produce a single JS file which is included in the base_site template.\n\nA custom menu is provided, the menu is rendered through JS, and data is fetched in JSON format through an AJAX request.\n\n## <a name=\"installation\"></a>Installation\n\nInstall the last stable release\n\n    pip install django-baton\n\nor clone the repo inside your project\n\n    git clone https://github.com/otto-torino/django-baton.git\n\nAdd `baton` and `baton.autodiscover` to your `INSTALLED_APPS`:\n\n    INSTALLED_APPS = (\n        # ...\n        'baton',\n        'django.contrib.admin',\n        # ...\n        'baton.autodiscover',\n    )\n\nReplace django.contrib.admin in your project urls, and add baton urls:\n\n    # from django.contrib import admin\n    from baton.autodiscover import admin\n\n    urlpatterns = [\n        url(r'^admin/', include(admin.site.urls)),\n        # ...\n        url(r'^baton/', include('baton.urls')),\n    ]\n\n### Django 2\n\nThe first two steps are the same, but in your project urls you should use _path_:\n\n    from baton.autodiscover import admin\n    from django.urls import path, include\n\n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('baton/', include('baton.urls')),\n\n    ]\n\nIf you get a \"__No crypto library available__\" when using the Google Analytics index, install this package:\n\n    $ pip install PyOpenSSL\n\n### Why two installed apps?\n\nWell, first `baton` has to be placed before the `django.contrib.admin` app, because it overrides 3 templates and resets all CSS.\nThe `baton.autodiscover` entry is needed as the last installed app in order to register all applications for the admin.\nI decided to create a custom `AdminSite` class, to allow the customization of some variables the Django way (`site_header`, `index_title`, ...). I think it's a good approach to customize these vars instead of overwriting the orignal templates. The problem is that when creating a custom AdminSite, you have to register all the apps manualy. I didn't like\nthat so I wrote this `autodiscover` module which automatically registers all the apps registered with the Django's default AdminSite. For this to work, all the apps must be already registered so this app should be the last in `INSTALLED_APPS`.\n\n## <a name=\"configuration\"></a>Configuration\n\nThe configuration dictionary must be defined inside your settings:\n\n    BATON = {\n        'SITE_HEADER': 'Baton',\n        'SITE_TITLE': 'Baton',\n        'INDEX_TITLE': 'Site administration',\n        'SUPPORT_HREF': 'https://github.com/otto-torino/django-baton/issues',\n        'COPYRIGHT': 'copyright Â© 2017 <a href=\"https://www.otto.to.it\">Otto srl</a>', # noqa\n        'POWERED_BY': '<a href=\"https://www.otto.to.it\">Otto srl</a>',\n        'CONFIRM_UNSAVED_CHANGES': True,\n        'SHOW_MULTIPART_UPLOADING': True,\n        'ENABLE_IMAGES_PREVIEW': True,\n        'OPEN_FILTERS_IN_MODAL': True,\n        'MENU': (\n            { 'type': 'title', 'label': 'main', 'apps': ('auth', ) },\n            {\n                'type': 'app',\n                'name': 'auth',\n                'label': 'Authentication',\n                'icon': 'fa fa-lock',\n                'models': (\n                    {\n                        'name': 'user',\n                        'label': 'Users'\n                    },\n                    {\n                        'name': 'group',\n                        'label': 'Groups'\n                    },\n                )\n            },\n            { 'type': 'title', 'label': 'Contents', 'apps': ('flatpages', ) },\n            { 'type': 'model', 'label': 'Pages', 'name': 'flatpage', 'app': 'flatpages' },\n            { 'type': 'free', 'label': 'Custom Link', 'url': 'http://www.google.it', 'perms': ('flatpages.add_flatpage', 'auth.change_user') },\n            { 'type': 'free', 'label': 'My parent voice', 'default_open': True, children': [\n                { 'type': 'model', 'label': 'A Model', 'name': 'mymodelname', 'app': 'myapp' },\n                { 'type': 'free', 'label': 'Another custom link', 'url': 'http://www.google.it' },\n            ] },\n        ),\n        'ANALYTICS': {\n            'CREDENTIALS': os.path.join(BASE_DIR, 'credentials.json'),\n            'VIEW_ID': '12345678',\n        }\n    }\n\n- `SITE_HEADER`, `COPYRIGHT` and `POWERED_BY` are marked as safe, so you can include img tags and links.\n- `SUPPORT_HREF` is the URL of the support link. For instance, you can use `mailto:info@blabla.com`.\n- `CONFIRM_UNSAVED_CHANGES`: if set to `True` a confirmation modal appears when leaving a change form or add form with unsaved changes.\nThe check of a dirty form relies on the jQuery serialize method, so it's not 100% safe. Disabled inputs, particular widgets (ckeditor) can not be detected.\nDefault value is `True`.\n- `SHOW_MULTIPART_UPLOADING`: if set to `True` an overlay with a spinner appears when submitting a `multipart/form-data` form.\n- `ENABLE_IMAGES_PREVIEW`: if set to `True` a preview is displayed above all input file fields which contain images. You can control how the preview is displayed by overriding the class `.baton-image-preview`. By default, previews have 100px height and with a box shadow (on \"hover\").\n- `CHANGELIST_FILTERS_IN_MODAL`: if set to `True` the changelist filters are opened in a centered modal above the document, useful when you set many filters. By default, its value is `False` and the changelist filters appears from the right side of the changelist table.\n\n`MENU` and `ANALYTICS` configurations in detail:\n\n### <a name=\"configuration-menu\"></a>MENU\n\nCurrently four kind of voices are supported: _title_, _app_, _model_ and _free_.\n\nTitle and free voices can have children, which follow the following rules:\n\n- children voices' children are ignored (do not place an app voice as a child)\n\nVoices with children (title, app, free) can specify a `default_open` key to expand the submenu by default.\n\nIf you don't define a MENU key in the configuration dictionary, the default MENU is shown.\n\n#### Title\n\nLike __MAIN__ and __CONTENTS__ in the screenshot, it represents a menu section. You should set a label and optionally apps or perms key, used for visualization purposes.\n\nIf the title voice should act as a section title for a group of apps, you'd want to specify these apps, because if the user can't operate over them, then the voice is not shown.\nYou can also define some perms (OR condition), like this:\n\n    { 'type': 'title', 'label': 'main', 'perms': ('auth.add_user', ) },\n\nFree voices can have children and so you can specify the _default_open_ key.\n\n#### App\n\nYou must specify the _type_ and _name_ keys. Optionally, an _icon_ key (you can use FontAwesome classes which are included by default), a _default_open_ key and a _models_ key.\nIf you don't define the _models_ key, the default app models are listed under your app.\n\n#### Model\n\nYou must specify the _type_, _name_ and _app_ keys. Optionally, an icon key.\n\n#### Free\n\nYou can specify free voices. You must define a _url_ and if you want some visibility permissions (OR clause). Free voices can have children and so you can specify the _default_open_ key.\n\n### <a name=\"configuration-analytics\"></a>ANALYTICS\n\nYou can create a cool index page displaying some statistics widgets using the Google Analytics API just by defining the `ANALYTICS` setting.\n\nIt requires two keys:\n\n- `CREDENTIALS`: it is the path to the credentials json file\n- `VIEW_ID`: ID of the view from which to display data\n\nYou can add contents before and after the analytics dashboard by extending the `baton/analytics.html` template and filling the `baton_before_analytics` and `baton_after_analytics` blocks.\n\n#### How to generate a credentials json file\n\nFollow the steps in the Google Identity Platform documentation to [create a service account](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#creatinganaccount) from the [Google Developer Console](https://console.developers.google.com/).\n\nOnce the service account is created, you can click the Generate New JSON Key button to create and download the key and add it to your project.\n\nAdd the service account as a user in Google Analytics. The service account you created in the previous step has an email address that you can add to any of the Google Analytics views you'd like to request the data from. It's generally best to only grant the service account read-only access.\n\n## <a name=\"signals\"></a>Signals\n\nBaton provides a dispatcher that can be used to register function that will be called when some events occurr.\nCurrently, Baton emits four types of events:\n\n- `onNavbarReady`: dispatched when the navbar is fully rendered\n- `onMenuReady`: dispatched when the menu is fully rendered (probably the last event fired, since the menu contents are retrieved async)\n- `onTabsReady`: dispatched when the changeform tabs are fully rendered\n- `onMenuError`: dispatched if the request sent to retrieve menu contents fails\n- `onReady`: dispatched when Baton JS has finished its sync job\n\nTo use these, just override the baton `admin/base_site.html` template and register your listeners **before** calling `Baton.init`, i.e.\n\n    <!-- ... -->\n    <script>\n        {% baton_config 'CONFIRM_UNSAVED_CHANGES' as confirm_unsaved_changes %}\n        {% baton_config 'SHOW_MULTIPART_UPLOADING' as show_multipart_uploading %}\n        (function ($, undefined) {\n            $(window).on('load', function () {\n                // init listeners\n                Baton.Dispatcher.register('onReady', function () { console.log('BATON IS READY') })\n                Baton.Dispatcher.register('onMenuReady', function () { console.log('BATON MENU IS READY') })\n                Baton.Dispatcher.register('onNavbarReady', function () { console.log('BATON NAVBAR IS READY') })\n                // end listeners\n                Baton.init({\n                    api: {\n                        app_list: '{% url 'baton-app-list-json' %}'\n                    },\n                    confirmUnsavedChanges: {% if confirm_unsaved_changes %}true{% else%}false{% endif %},\n                    showMultipartUploading: {% if show_multipart_uploading %}true{% else%}false{% endif %}\n                });\n            })\n        })(jQuery, undefined)\n    </script>\n    <!-- ... -->\n\n## <a name=\"text-input-filters\"></a>Text Input Filters\n\nTaken from this [medium article](https://medium.com/@hakibenita/how-to-add-a-text-filter-to-django-admin-5d1db93772d8)\n\nBaton defines a custom InputFilter class that you can use to create text input filters and use them as any other `list_filters`, for example:\n\n``` python\n\n# your app admin\n\nfrom baton.admin import InputFilter\n\nclass IdFilter(InputFilter):\n    parameter_name = 'id'\n    title = 'id'\n\n    def queryset(self, request, queryset):\n        if self.value() is not None:\n            search_term = self.value()\n            return queryset.filter(\n                id=search_term\n            )\n\n\nclass MyModelAdmin(admin.ModelAdmin):\n    list_filters = (\n        'my_field',\n        IdFilter,\n        'my_other_field',\n    )\n\n```\n\n## <a name=\"form-tabs\"></a>Form tabs\n\nHow much I loved django-suit form tabs? Too much. So, this was a feature I couldn't live without.\n\nThere are three types of tabs:\n\n- **fieldset tab**: a tab containing a fieldset\n- **inline tab**: a tab containing an inline\n- **group tab**: a tab which can contain fieldsets and inlines in the order you specify\n\nTabs' titles are retrieved automatically. For fieldset and inline tabs, it's the fieldset's title and the inline related verbose name plural.\nFor group tabs the first title is taken (either of an inline or fieldset section).\n\nUsing group tabs you can mix inlines with fields just by splitting fields into fieldsets and arranging them in your preferred order.\n\nLet's see how to define tabs in your admin forms (everything is done through js, no templatetags or templates overriden):\n\n    class AttributeInline(admin.StackedInline):\n        model = Attribute\n        extra = 1\n\n    class FeatureInline(admin.StackedInline):\n        model = Feature\n        extra = 1\n\n    class ItemAdmin(admin.ModelAdmin):\n        list_display = ('label', 'description', 'main_feature', )\n        inlines = [AttributeInline, FeatureInline, ]\n\n        fieldsets = (\n            ('Main', {\n                'fields': ('label', ),\n                'classes': ('baton-tabs-init', 'baton-tab-inline-attribute', 'baton-tab-fs-content', 'baton-tab-group-fs-tech--inline-feature', ),\n                'description': 'This is a description text'\n\n            }),\n            ('Content', {\n                'fields': ('text', ),\n                'classes': ('tab-fs-content', ),\n                'description': 'This is another description text'\n\n            }),\n            ('Tech', {\n                'fields': ('main_feature', ),\n                'classes': ('tab-fs-tech', ),\n                'description': 'This is another description text'\n\n            }),\n        )\n\nAs you can see these are the rules:\n\n- Inline classes remain the same, no action needed\n- On the first fieldset, define a `baton-tabs-init` class which enables tabs\n- For every inline you want to put in a separate tab, add a class `baton-tab-inline-MODELNAME` or `baton-tab-inline-RELATEDNAME` if you've specified a related name in the model foreign key field\n- For every fieldset you want to put in a separate tab, add a class `baton-tab-fs-CUSTOMNAME`, and add a class `tab-fs-CUSTOMNAME` on the fieldset\n- For every group you want to put in a separate tab, add a class `baton-tab-group-ITEMS`, where items can be inlines (`inline-RELATEDNAME`) and/or fieldsets (`fs-CUSTOMNAME`) separated by a double hypen `--`. Also add a class `tab-fs-CUSTOMNAME` on the fieldset items.\n- Tabs order respects the defined classes order\n\nOther features:\n\n- When a field has an error, the first tab containing errors is opened automatically\n- You can open a tab on page load just by adding an hash to the url, i.e. `#inline-feature`, `#fs-content`, `#group-fs-tech--inline-feature`\n\n## <a name=\"customization\"></a>Customization\n\nIt's easy to heavily customize the appeareance of __baton__. All the stuff is compiled from a modern JS app which resides in `baton/static/baton/app`.\n\nYou just need to change the [SASS variables values](https://github.com/otto-torino/django-baton/blob/master/baton/static/baton/app/src/styles/_variables.scss) (and you can also overwrite Bootstrap variables), re-compile, get the compiled JS file, place it in the static folder of your main app,\nand place your main app (ROOTAPP) before __baton__ in the `INSTALLED_APPS`.\n\nSo:\n\n    $ git clone https://github.com/otto-torino/django-baton.git\n    $ cd django-baton/baton/static/baton/app/\n    $ npm install\n    $ vim src/styles/_variables.scss\n    $ npm run compile\n    $ cp dist/baton.min.js ROOTAPP/static/baton/app/dist/\n\nIf you want to test your live changes, just start the webpack dev server:\n\n    $ cd django-baton/baton/static/baton/app/\n    $ npm run dev\n\nAnd inside the `base_site.html` template, make these changes:\n\n    <!-- <script src=\"{% static 'baton/app/dist/baton.min.js' %}\"></script> comment the compiled src and uncomment the webpack served src -->\n    <script src=\"http://localhost:8080/dist/baton.min.js\"></script>\n\nNow while you make your changes to the JS app (CSS included), webpack will update the bundle automatically, so just refresh the page and you'll see your changes.\n\n## <a name=\"contributing\"></a>Contributing\n\nI'll soon add more stuff here but at the moment what is really important is to follow the eslint rules specified in the `.eslintrc` file (https://github.com/otto-torino/django-baton/blob/master/baton/static/baton/app/.eslintrc) for the JS part, and be compliant with the standard sasslint rules for the SASS part. I follow PEP8 standard for the few lines of python code.\n\n## <a name=\"screenshots\"></a>Screenshots\n\n![Screenshot](screenshots/mobile_mix.jpg)\n\n![Screenshot](screenshots/more1.png)\n\n![Screenshot](screenshots/changelist_user-lg.jpg)\n\n![Screenshot](screenshots/tabs-lg.jpg)\n\n![Screenshot](screenshots/more2.png)\n\n![Screenshot](screenshots/more3.png)\n\n![Screenshot](screenshots/more4.png)\n\n![Screenshot](screenshots/more5.png)\n\n![Screenshot](screenshots/more6.png)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/otto-torino/django-baton",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-baton",
    "package_url": "https://pypi.org/project/django-baton/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-baton/",
    "project_urls": {
      "Homepage": "http://github.com/otto-torino/django-baton"
    },
    "release_url": "https://pypi.org/project/django-baton/1.7.0/",
    "requires_dist": [
      "google-api-python-client",
      "oauth2client (==1.5.2)"
    ],
    "requires_python": "",
    "summary": "A cool, modern and responsive django admin application",
    "version": "1.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16678858,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8067f17ec3718faf50c0826891d4a084a4bbbe7630c7b24bfaa02798b2a063f",
        "md5": "b10c087c8aa5062eb2de4afaa1472ea1",
        "sha256": "0f822e4178f7762ce96f11f82680d3771b91fcd2cdc55a8536e5a41821fc385a"
      },
      "downloads": -1,
      "filename": "django_baton-1.7.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "b10c087c8aa5062eb2de4afaa1472ea1",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 3479302,
      "upload_time": "2020-05-22T14:03:31",
      "upload_time_iso_8601": "2020-05-22T14:03:31.574034Z",
      "url": "https://files.pythonhosted.org/packages/f8/06/7f17ec3718faf50c0826891d4a084a4bbbe7630c7b24bfaa02798b2a063f/django_baton-1.7.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4217afe86105c0393671147abbde73cf4e80c8b7b3b52895b3c3e9dfd1b2dff0",
        "md5": "e5fa06757e90d29a3f126568fdcaeda7",
        "sha256": "8e72ca15b653aa818d11a24c4159c1aadec31e757592fbce7ba1f76af46c1790"
      },
      "downloads": -1,
      "filename": "django-baton-1.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e5fa06757e90d29a3f126568fdcaeda7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2270207,
      "upload_time": "2020-05-22T14:04:53",
      "upload_time_iso_8601": "2020-05-22T14:04:53.319671Z",
      "url": "https://files.pythonhosted.org/packages/42/17/afe86105c0393671147abbde73cf4e80c8b7b3b52895b3c3e9dfd1b2dff0/django-baton-1.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}