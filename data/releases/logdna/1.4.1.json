{
  "info": {
    "author": "LogDNA Inc.",
    "author_email": "help@logdna.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<p align=\"center\">\n  <a href=\"https://app.logdna.com\">\n    <img height=\"95\" width=\"202\" src=\"https://raw.githubusercontent.com/logdna/artwork/master/logo%2Bpython.png\">\n  </a>\n  <p align=\"center\">Python package for logging to <a href=\"https://app.logdna.com\">LogDNA</a></p>\n</p>\n\n---\n\n* **[Install](#install)**\n* **[Setup](#setup)**\n* **[Usage](#usage)**\n* **[API](#api)**\n* **[License](#license)**\n\n\n## Install\n\n```bash\n$ pip install logdna\n```\n\n## Setup\n```python\nimport logging\nfrom logdna import LogDNAHandler\n\nkey = 'YOUR INGESTION KEY HERE'\n\nlog = logging.getLogger('logdna')\nlog.setLevel(logging.INFO)\n\noptions = {\n  'hostname': 'pytest',\n  'ip': '10.0.1.1',\n  'mac': 'C0:FF:EE:C0:FF:EE'\n}\n\n# Defaults to false, when true ensures meta object will be searchable\noptions['index_meta'] = True\n\ntest = LogDNAHandler(key, options)\n\nlog.addHandler(test)\n\nlog.warn(\"Warning message\", {'app': 'bloop'})\nlog.info(\"Info message\")\n\n```\n_**Required**_\n* [LogDNA Ingestion Key](https://app.logdna.com/manage/profile)\n\n_**Optional**_\n* Hostname - *(String)* - max length 32 chars\n* MAC Address - *(String)*\n* IP Address - *(String)*\n* Max Length - *(Boolean)* - formatted as options['max_length']\n* Index Meta - *(Boolean)* - formatted as options['index_meta']\n\n## Usage\n\nAfter initial setup, logging is as easy as:\n```python\n# Simplest use case\nlog.info('My Sample Log Line')\n\n# Add a custom level\nlog.info('My Sample Log Line', { 'level': 'MyCustomLevel' })\n\n# Include an App name with this specific log\nlog.info('My Sample Log Line', { 'level': 'Warn', 'app': 'myAppName'})\n\n# Pass any associated objects along as metadata\nmeta = {\n    'foo': 'bar',\n    'nested': {\n      'nest1': 'nested text'\n    }\n}\n\nopts = {\n  'level': 'warn',\n  'meta': meta\n}\n\nlog.info('My Sample Log Line', opts)\n```\n\n### Usage with File Config\n\nTo use `LogDNAHandler` with [`fileConfig`](https://docs.python.org/2/library/logging.config.html#logging.config.fileConfig) (e.g., in a Django `settings.py` file):\n\n```python\nimport os\nimport logging\nfrom logdna import LogDNAHandler #  required to register `logging.handlers.LogDNAHandler`\n\nLOGGING = {\n    # Other logging settings...\n    'handlers': {\n        'logdna': {\n            'level': logging.DEBUG,\n            'class': 'logging.handlers.LogDNAHandler',\n            'key': os.environ.get('LOGDNA_INGEST_KEY'),\n            'options': {\n                'app': '<app name>',\n                'env': os.environ.get('ENVIRONMENT'),\n                'index_meta': <True|False>,\n            },\n        },\n    },\n    'loggers': {\n        '': {\n            'handlers': ['logdna'],\n            'level': logging.DEBUG\n        },\n    },\n}\n```\n\n(This example assumes you have set environment variables for `ENVIRONMENT` and `LOGDNA_INGEST_KEY`)\n\n## API\n\n### LogDNAHandler(key, [options])\n---\n#### key\n\n* _**Required**_\n* Type: `String`\n* Values: `YourAPIKey`\n\nThe [LogDNA API Key](https://app.logdna.com/manage/profile) associated with your account.\n\n#### options\n\n##### app\n\n* _Optional_\n* Type: `String`\n* Default: `''`\n* Values: `YourCustomApp`\n* Max Length: `32`\n\nThe default app passed along with every log sent through this instance.\n\n##### env\n\n* _Optional_\n* Type: `String`\n* Default: `''`\n* Values: `YourCustomEnv`\n* Max Length: `32`\n\nThe default env passed along with every log sent through this instance.\n\n##### hostname\n\n* _Optional_\n* Type: `String`\n* Default: `''`\n* Values: `YourCustomHostname`\n* Max Length: `32`\n\nThe default hostname passed along with every log sent through this instance.\n\n##### include_standard_meta\n\n* _Optional_\n* Type: `Boolean`\n* Default: `False`\n\nPython [`LogRecord` objects](https://docs.python.org/2/library/logging.html#logrecord-objects) include language-specific information that may be useful metadata in logs.  Setting `include_standard_meta` to `True` will automatically populate meta objects with `name`, `pathname`, and `lineno` from the `LogRecord`.  See [`LogRecord` docs](https://docs.python.org/2/library/logging.html#logrecord-objects) for more detail on these values.\n\n\n##### index_meta\n\n* _Optional_\n* Type: `Boolean`\n* Default: `False`\n\nWe allow meta objects to be passed with each line. By default these meta objects will be stringified and will not be searchable, but will be displayed for informational purposes.\n\nIf this option is turned to true then meta objects will be parsed and will be searchable up to three levels deep. Any fields deeper than three levels will be stringified and cannot be searched.\n\n*WARNING* When this option is true, your metadata objects across all types of log messages MUST have consistent types or the metadata object may not be parsed properly!\n\n\n##### level\n\n* _Optional_\n* Type: `String`\n* Default: `Info`\n* Values: `Debug`, `Trace`, `Info`, `Warn`, `Error`, `Fatal`, `YourCustomLevel`\n* Max Length: `32`\n\nThe default level passed along with every log sent through this instance.\n\n##### verbose\n\n* _Optional_\n* Type: `String` or `Boolean`\n* Default: `true`\n* Values: False or any level\n\nThe verbosity of the log statements in each failure.\n\n##### request_timeout\n\n* _Optional_\n* Type: `int`\n* Default: `30000`\n\nThe amount of time the request should wait for LogDNA to respond before timing out.\n\n\n##### tags\n\n* _Optional_\n* Type: `String[]`\n* Default: `[]`\n\nList of tags used to dynamically group hosts.  More information on tags is available at [How Do I Use Host Tags?](https://docs.logdna.com/docs/logdna-agent#section-how-do-i-use-host-tags-)\n\n##### url\n\n* _Optional_\n* Type: `String`\n* Default: `'https://logs.logdna.com/logs/ingest'`\n\nThe custom ingestion endpoint to stream the log lines into.\n\n### log(line, [options])\n---\n#### line\n\n* _Required_\n* Type: `String`\n* Default: `''`\n* Max Length: `32000`\n\nThe line which will be sent to the LogDNA system.\n\n#### options\n\n##### level\n\n* _Optional_\n* Type: `String`\n* Default: `Info`\n* Values: `Debug`, `Trace`, `Info`, `Warn`, `Error`, `Fatal`, `YourCustomLevel`\n* Max Length: `32`\n\nThe level passed along with this log line.\n\n##### app\n\n* _Optional_\n* Type: `String`\n* Default: `''`\n* Values: `YourCustomApp`\n* Max Length: `32`\n\nThe app passed along with this log line.\n\n##### env\n\n* _Optional_\n* Type: `String`\n* Default: `''`\n* Values: `YourCustomEnv`\n* Max Length: `32`\n\nThe environment passed with this log line.\n\n##### meta\n\n* _Optional_\n* Type: `JSON`\n* Default: `None`\n\nA meta object for additional metadata about the log line that is passed. Please ensure values are JSON serializable,\nvalues that are not JSON serializable will be removed and the respective keys will be added to the `__errors` string.\n\n##### index_meta\n\n* _Optional_\n* Type: `Boolean`\n* Default: `False`\n\nWe allow meta objects to be passed with each line. By default these meta objects will be stringified and will not be searchable,\nbut will be displayed for informational purposes.\n\nIf this option is turned to true then meta objects will be parsed and will be searchable up to three levels deep. Any fields deeper than three levels will be stringified and cannot be searched.\n\n*WARNING* When this option is true, your metadata objects across all types of log messages MUST have consistent types or the metadata object may not be parsed properly!\n\n##### timestamp\n\n* _Optional_\n* Default: `time.time()`\n\nA timestamp in ms, must be within one day otherwise it will be dropped and time.time() will be used in its place.\n\n\n## License\n\nMIT Â© [LogDNA](https://logdna.com/)\n\n*Happy Logging!*",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/logdna/python/tarball/1.4.1",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/logdna/python",
    "keywords": "logdna,logging,logs,python,logdna.com,logger",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logdna",
    "package_url": "https://pypi.org/project/logdna/",
    "platform": "",
    "project_url": "https://pypi.org/project/logdna/",
    "project_urls": {
      "Download": "https://github.com/logdna/python/tarball/1.4.1",
      "Homepage": "https://github.com/logdna/python"
    },
    "release_url": "https://pypi.org/project/logdna/1.4.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python Package for Sending Logs to LogDNA",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16595495,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3f3a14c85a6e0207ad908f60950e62944769c810b0e882a49527fbf09684717",
        "md5": "d26ca234bb713f1af3dd876f74facd45",
        "sha256": "bb481badc4bd11b10d50ad00e4a7501bb10fbac0485975aab5c9b15206a7e2c2"
      },
      "downloads": -1,
      "filename": "logdna-1.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d26ca234bb713f1af3dd876f74facd45",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6599,
      "upload_time": "2019-06-20T20:14:59",
      "upload_time_iso_8601": "2019-06-20T20:14:59.054635Z",
      "url": "https://files.pythonhosted.org/packages/a3/f3/a14c85a6e0207ad908f60950e62944769c810b0e882a49527fbf09684717/logdna-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}