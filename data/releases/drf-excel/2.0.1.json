{
  "info": {
    "author": "Timothy Allen",
    "author_email": "tallen@wharton.upenn.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2",
      "Framework :: Django :: 3",
      "Framework :: Django :: 4",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# DRF Excel: Django REST Framework Excel Spreadsheet (xlsx) Renderer\n\n`drf-excel` provides an Excel spreadsheet (xlsx) renderer for Django REST Framework. It uses OpenPyXL to create the spreadsheet and provide the file to the end user.\n\n## Requirements\n\nWe aim to support Django's [currently supported versions](https://www.djangoproject.com/download/), as well as:\n\n* Django REST Framework >= 3.6\n* OpenPyXL >= 2.4\n\n## Installation\n\n```bash\npip install drf-excel\n```\n\nThen add the following to your `REST_FRAMEWORK` settings:\n\n```python\nREST_FRAMEWORK = {\n    ...\n\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n        'drf_excel.renderers.XLSXRenderer',\n    ),\n}\n```\n\nTo avoid having a file streamed without a filename (which the browser will often default to the filename \"download\", with no extension), we need to use a mixin to override the `Content-Disposition` header. If no `filename` is provided, it will default to `export.xlsx`. For example:\n\n```python\nfrom rest_framework.viewsets import ReadOnlyModelViewSet\nfrom drf_excel.mixins import XLSXFileMixin\nfrom drf_excel.renderers import XLSXRenderer\n\nfrom .models import MyExampleModel\nfrom .serializers import MyExampleSerializer\n\nclass MyExampleViewSet(XLSXFileMixin, ReadOnlyModelViewSet):\n    queryset = MyExampleModel.objects.all()\n    serializer_class = MyExampleSerializer\n    renderer_classes = (XLSXRenderer,)\n    filename = 'my_export.xlsx'\n```\n\nThe `XLSXFileMixin` also provides a `get_filename()` method which can be overridden, if you prefer to provide a filename programmatically instead of the `filename` attribute.\n\n## Upgrading to 2.0.0\n\nTo upgrade to `drf_excel` 2.0.0 from `drf_renderer_xlsx`, update your import paths:\n\n* `from drf_renderer_xlsx.mixins import XLSXFileMixin` becomes `from drf_excel.mixins import XLSXFileMixin`.\n* `drf_renderer_xlsx.renderers.XLSXRenderer` becomes `def_excel.renderers.XLSXRenderer`.\n* `xlsx_date_format_mappings` has been removed in favor of `column_data_styles` which provides more flexibility\n\n## Configuring Styles \n\nStyles can be added to your worksheet header, column header row, body and column data from view attributes `header`, `column_header`, `body`, `column_data_styles`. Any arguments from [the OpenPyXL package](https://openpyxl.readthedocs.io/en/stable/styles.html) can be used for font, alignment, fill and border_side (border will always be all side of cell).\n\nIf provided, column data styles will override body style\n\nNote that column data styles can take an extra 'format' argument that follows [openpyxl formats](https://openpyxl.readthedocs.io/en/stable/_modules/openpyxl/styles/numbers.html).\n\n```python\nclass MyExampleViewSet(XLSXFileMixin, ReadOnlyModelViewSet):\n    queryset = MyExampleModel.objects.all()\n    serializer_class = MyExampleSerializer\n    renderer_classes = (XLSXRenderer,)\n\n    column_header = {\n        'titles': [\n            \"Column_1_name\",\n            \"Column_2_name\",\n            \"Column_3_name\",\n        ],\n        'column_width': [17, 30, 17],\n        'height': 25,\n        'style': {\n            'fill': {\n                'fill_type': 'solid',\n                'start_color': 'FFCCFFCC',\n            },\n            'alignment': {\n                'horizontal': 'center',\n                'vertical': 'center',\n                'wrapText': True,\n                'shrink_to_fit': True,\n            },\n            'border_side': {\n                'border_style': 'thin',\n                'color': 'FF000000',\n            },\n            'font': {\n                'name': 'Arial',\n                'size': 14,\n                'bold': True,\n                'color': 'FF000000',\n            },\n        },\n    }\n    body = {\n        'style': {\n            'fill': {\n                'fill_type': 'solid',\n                'start_color': 'FFCCFFCC',\n            },\n            'alignment': {\n                'horizontal': 'center',\n                'vertical': 'center',\n                'wrapText': True,\n                'shrink_to_fit': True,\n            },\n            'border_side': {\n                'border_style': 'thin',\n                'color': 'FF000000',\n            },\n            'font': {\n                'name': 'Arial',\n                'size': 14,\n                'bold': False,\n                'color': 'FF000000',\n            }\n        },\n        'height': 40,\n    }\n    column_data_styles = {\n        'distance': {\n            'alignment': {\n                'horizontal': 'right',\n                'vertical': 'top',\n            },\n            'format': '0.00E+00'\n        },\n        'created_at': {\n            'format': '%d.%m.%Y %H:%M',\n        }\n    }\n```\n\nYou can dynamically generate style attributes in methods `get_body`, `get_header`, `get_column_header`, `get_column_data_styles`.\n\n```python\ndef get_header(self):\n    start_time, end_time = parse_times(request=self.request)\n    datetime_format = \"%H:%M:%S %d.%m.%Y\"\n    return {\n        'tab_title': 'MyReport', # title of tab/workbook\n        'use_header': True,  # show the header_title \n        'header_title': 'Report from {} to {}'.format(\n            start_time.strftime(datetime_format),\n            end_time.strftime(datetime_format),\n        ),\n        'height': 45,\n        'img': 'app/images/MyLogo.png',\n        'style': {\n            'fill': {\n                'fill_type': 'solid',\n                'start_color': 'FFFFFFFF',\n            },\n            'alignment': {\n                'horizontal': 'center',\n                'vertical': 'center',\n                'wrapText': True,\n                'shrink_to_fit': True,\n            },\n            'border_side': {\n                'border_style': 'thin',\n                'color': 'FF000000',\n            },\n            'font': {\n                'name': 'Arial',\n                'size': 16,\n                'bold': True,\n                'color': 'FF000000',\n            }\n        }\n    }\n```\n\nAlso, you can add `color` field to your serializer and fill body rows.\n\n```python\nclass ExampleSerializer(serializers.Serializer):\n    color = serializers.SerializerMethodField()\n\n    def get_color(self, instance):\n        color_map = {'w': 'FFFFFFCC', 'a': 'FFFFCCCC'}\n        return color_map.get(instance.alarm_level, 'FFFFFFFF')\n```\n\n## Controlling XLSX headers and values\n\n### Use Serializer Field labels as header names\n\nBy default, headers will use the same 'names' as they are returned by the API. This can be changed by setting `xlsx_use_labels = True` inside your API View. \n\nInstead of using the field names, the export will use the labels as they are defined inside your Serializer. A serializer field defined as `title = serializers.CharField(label=_(\"Some title\"))` would return `Some title` instead of `title`, also supporting translations. If no label is set, it will fall back to using `title`.\n\n### Ignore fields\n\nBy default, all fields are exported, but you might want to exclude some fields from your export. To do so, you can set an array with fields you want to exclude: `xlsx_ignore_headers = [<excluded fields>]`.\n\nThis also works with nested fields, separated with a dot (i.e. `icon.url`).\n\n### Date/time and number formatting\nFormatting for cells follows [openpyxl formats](https://openpyxl.readthedocs.io/en/stable/_modules/openpyxl/styles/numbers.html).\n\nTo set global formats, set the following variables in `settings.py`:\n\n```python\n# Date formats\nDRF_EXCEL_DATETIME_FORMAT = 'mm-dd-yy h:mm AM/PM'\nDRF_EXCEL_DATE_FORMAT = 'mm-dd-yy'\nDRF_EXCEL_TIME_FORMAT = 'h:mm AM/PM'\n\n# Number formats\nDRF_EXCEL_INTEGER_FORMAT = '0%'\nDRF_EXCEL_DECIMAL_FORMAT = '0.00E+00'\n```\n\n### Name boolean values\n\n`True` and `False` as values for boolean fields are not always the best representation and don't support translation. \n\nThis can be controlled with in you API view with `xlsx_boolean_labels`. \n\n```\nxlsx_boolean_labels = {True: _('Yes'), False: _('No')}\n```\n\nwill replace `True` with `Yes` and `False` with `No`.\n\nThis can also be set globally in settings.py:\n\n```\nDRF_EXCEL_BOOLEAN_DISPLAY = {True: _('Yes'), False: _('No')}\n```\n\n\n### Custom columns\n\nYou might find yourself explicitly returning a dict in your API response and would like to use its data to display additional columns. This can be done by passing `xlsx_custom_cols`.\n\n```\nxlsx_custom_cols = {\n    'my_custom_col.val1.title': {\n        'label': 'Custom column!',\n        'formatter': custom_value_formatter\n    }\n}\n\n### Example function:\ndef custom_value_formatter(val):\n    return val + '!!!'\n\n### Example response:\n{ \n    results: [\n        {\n            title: 'XLSX renderer',\n            url: 'https://github.com/wharton/drf-excel'\n            returned_dict: {\n                val1: {\n                    title: 'Sometimes'\n                },\n                val2: {\n                    title: 'There is no way around'\n                }\n            }\n        }\n    ]\n}\n```\n\nWhen no `label` is passed, `drf-excel` will display the key name in the header.\n`formatter` is also optional and accepts a function, which will then receive the value it is mapped to (it would receive \"Sometimes\" and return \"Sometimes!!!\" in our example).\n\n### Custom mappings\n\nAssuming you have a field that returns a `dict` instead of a simple `str`, you might not want to return the whole object but only a value of it. Let's say `status` returns `{ value: 1, display: 'Active' }`. To return the `display` value in the `status` column, we can do this:\n```\nxlsx_custom_mappings = {\n    'status': 'display'\n}\n```\nA probably more common case is that you want to change how a value is formatted. `xlsx_custom_mappings` also takes functions as values. Assuming we have a field `description`, and for some strange reason want to reverse the text, we can do this:\n\n```\ndef reverse_text(val):\n    return val[::-1]\n\nxlsx_custom_mappings = {\n    'description': reverse_text\n}\n```\n\n## Release Notes\n\nRelease notes are [available on GitHub](https://github.com/wharton/drf-excel/releases).\n\n## Maintainers\n\n* [Timothy Allen](https://github.com/FlipperPA) at [The Wharton School](https://github.com/wharton)\n* [Thomas Willems](https://github.com/willtho89)\n* [Mathieu Rampant](https://github.com/rptmat57)\n\nThis package was created by the staff of [Wharton Research Data Services](https://wrds.wharton.upenn.edu/). We are thrilled that [The Wharton School](https://www.wharton.upenn.edu/) allows us a certain amount of time to contribute to open-source projects. We add features as they are necessary for our projects, and try to keep up with Issues and Pull Requests as best we can. Due to constraints of time (our full time jobs!), Feature Requests without a Pull Request may not be implemented, but we are always open to new ideas and grateful for contributions and our users.\n\n## Contributors (Thank You!)\n\n* [Armaan Tobaccowalla](https://github.com/ArmaanT)\n* [Davis Haupt](https://github.com/davish)\n* [Eric Wang](https://github.com/ezwang)\n* [Felipe Schmitt](https://github.com/fsschmitt)\n* [ffruit](https://github.com/frruit)\n* [Gonzalo Ayuso](https://github.com/gonzalo123)\n* [LeeHanYeong](https://github.com/LeeHanYeong)\n* [Nick Kozhenin](https://github.com/mast22)\n* [paveloder](https://github.com/paveloder)\n* [Pavel Bryantsev](https://github.com/Tigven)\n* [Pavel Tolstolytko](https://github.com/eshikvtumane)\n* [Tim](https://github.com/Shin--/)\n* [Vincenz E.](https://github.com/vincenz-e)\n* [YunpengZhan](https://github.com/runningzyp)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wharton/drf-excel",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-excel",
    "package_url": "https://pypi.org/project/drf-excel/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-excel/",
    "project_urls": {
      "Homepage": "https://github.com/wharton/drf-excel"
    },
    "release_url": "https://pypi.org/project/drf-excel/2.0.1/",
    "requires_dist": [
      "djangorestframework (>=3.6)",
      "openpyxl (>=2.4)"
    ],
    "requires_python": "",
    "summary": "Django REST Framework renderer for Excel spreadsheet (xlsx) files.",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16716297,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b0b0d8ab3f3aafcd56349f0e59823f3819adbc49916cf1749ebc3f012d14205",
        "md5": "76bcb95fdc4305d6206b4fbb7d5248e3",
        "sha256": "c1d2a53443e23ad0111937acc4726af010a18002acbafbdd6261401868eeaf69"
      },
      "downloads": -1,
      "filename": "drf_excel-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76bcb95fdc4305d6206b4fbb7d5248e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13834,
      "upload_time": "2022-02-24T20:26:30",
      "upload_time_iso_8601": "2022-02-24T20:26:30.127837Z",
      "url": "https://files.pythonhosted.org/packages/5b/0b/0d8ab3f3aafcd56349f0e59823f3819adbc49916cf1749ebc3f012d14205/drf_excel-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "789d15d93d627e6940c50e5eec7ed20bddad9d5f6bc57c457e7979b1f75becce",
        "md5": "342b05660fd76b0b168e702ccc14bf78",
        "sha256": "65b0578d2f74c47d7cf3b1a99a3465996bfacdf3871f42a658948c3e7bf70362"
      },
      "downloads": -1,
      "filename": "drf-excel-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "342b05660fd76b0b168e702ccc14bf78",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17552,
      "upload_time": "2022-02-24T20:26:31",
      "upload_time_iso_8601": "2022-02-24T20:26:31.649827Z",
      "url": "https://files.pythonhosted.org/packages/78/9d/15d93d627e6940c50e5eec7ed20bddad9d5f6bc57c457e7979b1f75becce/drf-excel-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}