{
  "info": {
    "author": "Jessy Williams",
    "author_email": "jessy@jessywilliams.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "|licence| |pypi| |travis_ci| |api|\n\n\nmapi\n====\n\nmapi (**M**\\ etadata **API**) is a python library which provides a high-level interface for media database providers, allowing users to search for television and movie metadata using a simple interface. Supports and tested against Python 2.7, Python 3, and PyPy3.\n\n\nExamples\n========\n\nSearching for a television show by series using TVDb\n----------------------------------------------------\n\n>>> from pprint import pprint\n>>> from mapi.providers import TVDb\n>>> client = TVDb(max_hits=3)\n>>> hits = client.search(series='Rick and Morty', season=2)\n>>> pprint(hit)\n[{'episode': '1',\n  'id_tvdb': '275274',\n  'media': 'television',\n  'season': '2',\n  'series': 'Rick and Morty',\n  'synopsis': 'Rick, Morty, and Summer get into trouble when time is fractured '\n              'by a feedback loop of uncertainty that split reality into more '\n              'than one equally possible impossibilities. Meanwhile, Beth and '\n              'Jerry go to extreme lengths to save a deer struck by their '\n              'vehicle.',\n  'title': 'A Rickle in Time'},\n {'episode': '2',\n  'id_tvdb': '275274',\n  'media': 'television',\n  'season': '2',\n  'series': 'Rick and Morty',\n  'synopsis': 'Rick teaches Morty to drive while leaving Jerry at a popular '\n              \"day care made just for him. Morty's conscience has him hunt \"\n              'down an assassin rather than spending the day at an alien '\n              'arcade.',\n  'title': 'Mortynight Run'},\n {'episode': '3',\n  'id_tvdb': '275274',\n  'media': 'television',\n  'season': '2',\n  'series': 'Rick and Morty',\n  'synopsis': 'Rick gets emotionally invested when meeting an old friend, '\n              'while Beth and Jerry have a falling out after making a '\n              'discovery under the garage.',\n  'title': 'Auto Erotic Assimilation'}]\n\n\nSearching for a movie by title and year using IMDb\n--------------------------------------------------\n\n>>> from mapi.providers import IMDb\n>>> client = IMDb(year_delta=1)\n>>> hits = client.search(title='The Goonies', year=1985)\n>>> pprint(hits)\n[{'id_imdb': 'tt0089218',\n  'media': 'movie',\n  'synopsis': 'In order to save their home from foreclosure, a group of '\n              \"misfits set out to find a pirate's ancient valuable treasure.\",\n  'title': 'The Goonies',\n  'year': '1985'}]\n\n\nHandling a search gone awry\n---------------------------\n\n>>> from mapi.providers import TMDb\n>>> client = TMDb()\n>>> try:\n>>>     hits = client.search(id_imdb='invalid_id')\n>>> except MapiNotFoundException:\n>>>     hits = 'None found :('\n>>> print(hits)\nNone found :(\n\n\nUsage\n=====\n\nInstalling\n----------\n\n- **pip:** ``pip install mapi``\n- **source:** ``pip install .``\n\n\nProvider Configuration\n----------------------\n\n+-------------+--------------------------------------------------------+---------+-------+\n| Parameter   | Description                                            | Default | Notes |\n+=============+========================================================+=========+=======+\n| api_key     | Developer API key                                      | None    | [1]_  |\n+-------------+--------------------------------------------------------+---------+-------+\n| max_hits    | Restricts the maximum number of responses for a search | 15      |       |\n+-------------+--------------------------------------------------------+---------+-------+\n| year_delta  | Filters results around this value inclusively          | 5       |       |\n+-------------+--------------------------------------------------------+---------+-------+\n\n\nSearching\n---------\n\nThe following table describes the permissible fields which may be used for a\ngiven search query. Extra fields are simply ignored.\n\n+----------+---------------------+-----------+------------------------+-------------+\n| Field    | API                 | Type      | Description            | Notes       |\n+==========+=====================+===========+========================+=============+\n| id_imdb  | IMDb, TMDb, TVDb    | str       | IMDb movie id key      | [2]_ [3]_   |\n+----------+---------------------+-----------+------------------------+-------------+\n| id_tmdb  | TMDb                | str / int | TMDb movie id key      | [3]_ [4]_   |\n+----------+---------------------+-----------+------------------------+-------------+\n| id_tvdb  | TVDb series id key  | str / int | TVDb season id key     | [3]_ [4]_   |\n+----------+---------------------+-----------+------------------------+-------------+\n| title    | IMDb, TMDb          | str       | Feature's title        |             |\n+----------+---------------------+-----------+------------------------+-------------+\n| year     | IMDb, TMDb          | str / int | Feature's release year |             |\n+----------+---------------------+-----------+------------------------+-------------+\n| series   | TVDb                | str       | Series' name           |             |\n+----------+---------------------+-----------+------------------------+-------------+\n| season   | TVDb                | str / int | Series' airing season  |             |\n+----------+---------------------+-----------+------------------------+-------------+\n| episode  | TVDb                | str / int | Series' airing episode | [4]_        |\n+----------+---------------------+-----------+------------------------+-------------+\n\n\nResults\n-------\n\nEach provider is guaranteed to return the following fields for a successful\nsearch as strings. Notice that they are largely the fields as the search\nparameters-- in fact, you can even next search calls within each other if you\nso desire.\n\n+----------+------------+--------------------------------------------+\n| Field    | API        | Description                                |\n+==========+============+============================================+\n| id_imdb  | IMDb       | IMDb movie id key                          |\n+----------+------------+--------------------------------------------+\n| id_tmdb  | TMDb       | TMDb movie id key                          |\n+----------+------------+--------------------------------------------+\n| id_tvdb  | TVDb       | TVDb season id key                         |\n+----------+------------+--------------------------------------------+\n| title    | IMDb, TMDb | Feature's title                            |\n+----------+------------+--------------------------------------------+\n| year     | IMDb, TMDb | Feature's release year                     |\n+----------+------------+--------------------------------------------+\n| synopsis | ALL        | Media synopsis                             |\n+----------+------------+--------------------------------------------+\n| media    | ALL        | Media type; either 'movie' or 'television' |\n+----------+------------+--------------------------------------------+\n| series   | TVDb       | Series' name                               |\n+----------+------------+--------------------------------------------+\n| season   | TVDb       | Series' airing season                      |\n+----------+------------+--------------------------------------------+\n| episode  | TVDb       | Series' airing episode                     |\n+----------+------------+--------------------------------------------+\n\n\nNotes\n=====\n.. [1] required for TMDb and TVDb; alternatively, can be set by API_KEY_TMDB\n       and API_KEY_TVDB enviroment variables, respectively\n.. [2] id_imdb must be prefixed with 'tt'.\n.. [3] Although ID, title, and series are each optional, movie queries must have\n       either an ID or title to yield any results, and television queries must\n       have either and ID or series to yield any results.\n.. [4] If this field is passed as a string it must be numeric.\n\n.. |licence| image:: https://img.shields.io/github/license/jkwill87/mapi.svg\n   :target: https://en.wikipedia.org/wiki/MIT_License\n.. |travis_ci| image:: https://img.shields.io/travis/jkwill87/mapi/develop.svg\n   :target: https://travis-ci.org/jkwill87/mapi\n.. |pypi| image:: https://img.shields.io/pypi/v/mapi.svg\n   :target: https://pypi.python.org/pypi/mapi\n.. |api| image:: https://img.shields.io/badge/api-IMDb/TMDb/TVDb-D8D200.svg",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jkwill87/mapi",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mapi",
    "package_url": "https://pypi.org/project/mapi/",
    "platform": "",
    "project_url": "https://pypi.org/project/mapi/",
    "project_urls": {
      "Homepage": "https://github.com/jkwill87/mapi"
    },
    "release_url": "https://pypi.org/project/mapi/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An API for media database APIs which allows you to search for metadata using a simple, common interface",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6001867,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b11392df90ec04c2336ee4f93bd0aa6461c352409a5307e76f5a46551d9a0fbf",
        "md5": "976176747f58536d12b850431e529eca",
        "sha256": "56b0531c7578c09b0843891d82af8f82f26481700cad4ed7a64f0efd1c697f36"
      },
      "downloads": -1,
      "filename": "mapi-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "976176747f58536d12b850431e529eca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13188,
      "upload_time": "2017-09-01T19:59:32",
      "upload_time_iso_8601": "2017-09-01T19:59:32.980292Z",
      "url": "https://files.pythonhosted.org/packages/b1/13/92df90ec04c2336ee4f93bd0aa6461c352409a5307e76f5a46551d9a0fbf/mapi-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}