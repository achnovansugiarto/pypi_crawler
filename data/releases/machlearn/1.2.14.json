{
  "info": {
    "author": "Daniel Yang",
    "author_email": "daniel.yj.yang@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": ".. -*- mode: rst -*-\n\n|BuildTest|_ |PythonVersion|_ |PyPi_version|_ |Downloads|_ |License|_\n\n.. |BuildTest| image:: https://travis-ci.com/daniel-yj-yang/machlearn.svg?branch=master\n.. _BuildTest: https://travis-ci.com/daniel-yj-yang/machlearn\n\n.. |PythonVersion| image:: https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8-blue\n.. _PythonVersion: https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8-blue\n\n.. |PyPi_version| image:: https://img.shields.io/pypi/v/machlearn\n.. _PyPi_version: https://pypi.python.org/pypi/machlearn\n\n.. |Downloads| image:: https://pepy.tech/badge/machlearn\n.. _Downloads: https://pepy.tech/project/machlearn\n\n.. |License| image:: https://img.shields.io/pypi/l/machlearn\n.. _License: https://pypi.python.org/pypi/machlearn\n\n\n=====================================================\nA Simple Yet Powerful Machine Learning Python Library\n=====================================================\n\nInstall\n-------\n\n.. code-block:: bash\n\n   pip install machlearn\n\n\n-----\n\nExample 1: k-Nearest Neighbors \n------------------------------\n\n.. code-block:: python\n\n   from machlearn import kNN\n   kNN.demo(\"iris\")\n\n\nSelected Output:\n\n.. code-block::\n\n   This demo uses a public dataset of Fisher's Iris, which has a total of 150 samples from three species of Iris ('setosa', 'versicolor', 'virginica').\n   The goal is to use 'the length and the width of the sepals and petals, in centimeters', to predict which species of Iris the sample belongs to.\n\n   Using a grid search and a kNN classifier, the best hyperparameters were found as following:\n      Step1: scaler: StandardScaler(with_mean=True, with_std=True);\n      Step2: classifier: kNN_classifier(n_neighbors=12, weights='uniform', p=2.00, metric='minkowski').\n\n\n|image_dataset_iris|\n|image_kNN_iris_confusion_matrix|\n\n\n.. |image_dataset_iris| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/datasets/iris/images/iris.jpg\n   :width: 600px\n\n.. |image_kNN_iris_confusion_matrix| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/kNN/images/iris_cm.png\n   :width: 600px\n\n\n-----\n\nExample 2: Naive Bayes \n----------------------\n\n.. code-block:: python\n\n   from machlearn import naive_bayes as nb\n   nb.demo(dataset=\"SMS_spam\")\n\n\nSelected Output:\n\n.. code-block::\n\n   This demo uses a public dataset of SMS spam, which has a total of 5574 messages = 4827 ham (legitimate) and 747 spam.\n   The goal is to use 'term frequency in message' to predict whether the message is ham (class=0) or spam (class=1).\n\n   Using a grid search and a multinomial naive bayes classifier, the best hyperparameters were found as following:\n      Step1: Tokenizing text: CountVectorizer(analyzer = <_lemmas>, ngram_range = (1, 1));\n      Step2: Transforming from occurrences to frequency: TfidfTransformer(use_idf = True).\n\n   The top 2 terms with highest probability of a message being a spam (the classification is either spam or ham):\n      \"claim\": 81.28%\n      \"prize\": 80.24%\n      \"won\": 76.29%\n\n   Application example:\n      - Message: \"URGENT! We are trying to contact U. Todays draw shows that you have won a 2000 prize GUARANTEED. Call 090 5809 4507 from a landline. Claim 3030. Valid 12hrs only.\"\n      - Probability of spam (class=1): 95.85%\n      - Classification: spam\n\n\n|image_SMS_spam_text_example|\n|image_naive_bayes_confusion_matrix|\n\n\n.. list-table::\n   :widths: 25 25\n   :header-rows: 0\n\n   * - |image_naive_bayes_ROC_curve| \n     - |image_naive_bayes_PR_curve| \n\n\n.. |image_SMS_spam_text_example| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/naive_bayes/images/SMS_spam_text_example.png\n   :width: 600px\n\n.. |image_naive_bayes_confusion_matrix| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/naive_bayes/images/demo_confusion_matrix.png\n   :width: 600px\n\n.. |image_naive_bayes_ROC_curve| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/naive_bayes/images/demo_ROC_curve.png\n   :width: 400px\n\n.. |image_naive_bayes_PR_curve| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/naive_bayes/images/demo_PR_curve.png\n   :width: 400px\n\n\n-----\n\nExample 3: Decision Boundary Comparison (Classification with Two Features)\n--------------------------------------------------------------------------\n\n.. code-block:: python\n\n   from machlearn import kNN\n   kNN.demo(\"Social_Network_Ads\")\n\n   from machlearn import naive_bayes as nb\n   nb.demo(\"Social_Network_Ads\")\n\n   from machlearn import SVM\n   SVM.demo(\"Social_Network_Ads\")\n\n   from machlearn import decision_tree as DT\n   DT.demo(\"Social_Network_Ads\", classifier_func = \"DT\")\n\n   from machlearn import logistic_regression as log_reg\n   log_reg.demo(\"Social_Network_Ads\")\n\n   from machlearn import neural_network as NN\n   NN.demo(\"Social_Network_Ads\")\n\n   from machlearn import ensemble\n   ensemble.demo(\"Social_Network_Ads\")\n\n\n.. list-table::\n   :widths: 25 25\n   :header-rows: 0\n\n   * - |image_kNN_decision_boundary_testing_set|\n     - |image_Gaussian_NB_decision_boundary_testing_set|\n   * - |image_SVM_decision_boundary_testing_set|\n     - |image_DT_decision_boundary_testing_set|\n   * - |image_logistic_regression_decision_boundary_testing_set|\n     - |image_NN_MLP_decision_boundary_testing_set|\n   * - |image_RFC_decision_boundary_testing_set|\n     - |image_GBM_decision_boundary_testing_set|\n\n\n.. |image_kNN_decision_boundary_testing_set| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/kNN/images/Social_Network_Ads_decision_boundary_testing_set.png\n   :width: 400px\n\n.. |image_Gaussian_NB_decision_boundary_testing_set| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/naive_bayes/images/demo_Social_Network_Ads_decision_boundary_testing_set.png\n   :width: 400px\n\n.. |image_SVM_decision_boundary_testing_set| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/SVM/images/Social_Network_Ads_decision_boundary_testing_set.png\n   :width: 400px\n\n.. |image_DT_decision_boundary_testing_set| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/decision_tree/images/Social_Network_Ads_DT_decision_boundary_testing_set.png\n   :width: 400px\n\n.. |image_logistic_regression_decision_boundary_testing_set| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/logistic_regression/images/Social_Network_Ads_decision_boundary_testing_set.png\n   :width: 400px\n\n.. |image_NN_MLP_decision_boundary_testing_set| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/neural_network/images/Social_Nework_Ads_MLP_decision_boundary_testing_set.png\n   :width: 400px\n\n.. |image_RFC_decision_boundary_testing_set| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/ensemble/images/Social_Network_Ads_RFC_decision_boundary_testing_set.png\n   :width: 400px\n\n.. |image_GBM_decision_boundary_testing_set| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/ensemble/images/Social_Network_Ads_GBM_decision_boundary_testing_set.png\n   :width: 400px\n\n\n-----\n\nExample 4: Imbalanced Data\n--------------------------\n\n.. code-block:: python\n\n   from machlearn import imbalanced_data\n   imbalanced_data.demo()\n\nSummary of output:\n\n.. code-block::\n\n   To mitigate the problem associated with class imbalance, downsampling the majority class (y=0) to match the minority case (y=1).\n\n   These are insensitive to class imbalance:\n   - Area Under ROC curve\n   - Geometric mean\n   - Matthew's Correlation Coefficient\n   - Recall, TPR\n   - Specificity, 1-FPR\n\n   These are sensitive to class imbalance:\n   - Area Under PR curve\n   - Accuracy\n   - F1 score\n   - Precision\n\n\n.. list-table::\n   :widths: 25 25\n   :header-rows: 1\n\n\n   * - Extreme Imbalanced Data\n     - Majority Downsampled to Match Minority Class\n   * - |image_extreme_imbalanced_data_bar_chart|\n     - |image_balanced_data_bar_chart|\n   * - |image_extreme_imbalanced_data_confusion_matrix|\n     - |image_balanced_data_confusion_matrix|\n   * - |image_extreme_imbalanced_data_ROC_curve|\n     - |image_balanced_data_ROC_curve|\n   * - |image_extreme_imbalanced_data_PR_curve|\n     - |image_balanced_data_PR_curve|\n\n\n.. |image_extreme_imbalanced_data_bar_chart| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/imbalanced_data/images/extreme_imbalanced_data_bar_chart.png\n   :width: 400px\n\n.. |image_balanced_data_bar_chart| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/imbalanced_data/images/majority_downsampled_balanced_data_bar_chart.png\n   :width: 400px\n\n.. |image_extreme_imbalanced_data_confusion_matrix| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/imbalanced_data/images/extreme_imbalanced_data_logistic_regression_confusion_matrix.png\n   :width: 400px\n\n.. |image_balanced_data_confusion_matrix| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/imbalanced_data/images/majority_downsampled_balanced_data_logistic_regression_confusion_matrix.png\n   :width: 400px\n\n.. |image_extreme_imbalanced_data_ROC_curve| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/imbalanced_data/images/extreme_imbalanced_data_logistic_regression_ROC_curve.png\n   :width: 400px\n\n.. |image_balanced_data_ROC_curve| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/imbalanced_data/images/majority_downsampled_balanced_data_logistic_regression_ROC_curve.png\n   :width: 400px\n\n.. |image_extreme_imbalanced_data_PR_curve| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/imbalanced_data/images/extreme_imbalanced_data_logistic_regression_PR_curve.png\n   :width: 400px\n\n.. |image_balanced_data_PR_curve| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/imbalanced_data/images/majority_downsampled_balanced_data_logistic_regression_PR_curve.png\n   :width: 400px\n\n\n-----\n\nExample 5: Regularization\n-------------------------\n\n.. code-block:: python\n\n   from machlearn import linear_regression as linreg\n   linreg.demo_regularization()\n\nSummary of output:\n\n.. code-block::\n\n   Issues: (a) high multicollinearity and (b) too many features; these lead to overfitting and poor generalization.\n   - After L2 Regularization (Ridge regression), reduced variance among the coefficient estimates [more robust/stable estimates], and better R-squared and lower RMSE with the testing set [better generalization]\n   - After L1 Regularization (Lasso regression), coefficient estimates becoming 0 for relatively trivial features [a simpler model], and better R-squared and lower RMSE with the testing set [better generalization]\n\n\n-----\n\nExample 6: Gradient Descent\n---------------------------\n\n.. code-block:: python\n\n   from machlearn import gradient_descent as GD\n   GD.demo(\"Gender\")\n\nSummary of output:\n\n.. code-block::\n\n   This example uses a batch gradient descent (BGD) procedure, a cost function of logistic regression and a learning rate of 0.00025, with Male (1, 0) as the target.\n   - Theta estimates of [const, Height (inch), Weight (lbs)]: [0.69254314, -0.49262002, 0.19834042]\n   - Accuracy of prediction:  0.913\n\n\n.. list-table::\n   :widths: 25 25\n   :header-rows: 1\n\n\n   * - Descriptive statistics\n     - Batch Gradient Descent Training Loss vs. Epoch\n   * - |image_Gender_pairplot|\n     - |image_Gender_batch_gradient_descent_training_loss_plot|\n\n\n.. |image_Gender_pairplot| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/gradient_descent/images/Gender_pairplot.png\n   :width: 400px\n\n.. |image_Gender_batch_gradient_descent_training_loss_plot| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/gradient_descent/images/Gender_BGD_training_loss_history.png\n   :width: 400px\n\n\n-----\n\nExample 7: Decision Tree\n------------------------\n\n.. code-block:: python\n\n   from machlearn import decision_tree as DT\n   DT.demo()\n   DT.demo_from_scratch(question_type=\"regression\") # dataset='boston'\n   DT.demo_from_scratch(question_type=\"classification\") # dataset='Social_Network_Ads', X=not scaled, criterion=entropy, max_depth=2\n\n\nSummary of output:\n\n.. code-block::\n\n   - DT.demo_from_scratch(question_type=\"regression\") uses decision_tree_regressor_from_scratch()\n   - DT.demo_from_scratch(question_type=\"classification\") provides results essentially identical to the tree graph below.\n\n\n|image_Social_Networks_Ad_DT_notscaled_entropy_maxdepth=2|\n\n\n.. |image_Social_Networks_Ad_DT_notscaled_entropy_maxdepth=2| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/decision_tree/images/Social_Network_Ads_DT_notscaled_entropy_max_depth=2_tree_graph.png\n   :width: 800px\n\n\n-----\n\nExample 8: Ensemble Methods\n---------------------------\n\n.. code-block:: python\n\n   from machlearn import ensemble\n   ensemble.demo()\n   ensemble.demo(\"Social_Network_Ads\")\n   ensemble.demo(\"boston\")\n\nSummary of output: \n\n.. code-block::\n\n   - These demos call the following functions developed from scratch and reflect the inner workings of them:\n   * random_forest_classifier_from_scratch();\n   * adaptive_boosting_classifier_from_scratch();\n   * gradient_boosting_regressor_from_scratch() (see training history plot below): R_squared = 0.753, RMSE = 4.419\n\n\n\n|image_boston_GBM_loss_history_plot|\n\n\n.. |image_boston_GBM_loss_history_plot| image:: https://github.com/daniel-yj-yang/machlearn/raw/master/examples/ensemble/images/boston_gradient_boosting_regressor_from_scratch_loss_vs_epoch_history_plot.png\n   :width: 400px\n\n\n-----\n\nmodule: model_evaluation\n------------------------\n\n.. csv-table::\n   :header: \"function\", \"description\"\n   :widths: 10, 20\n\n   \"plot_ROC_and_PR_curves()\", \"plots both the ROC and the precision-recall curves, along with statistics\"\n   \"plot_ROC_curve()\", \"plots the ROC (Receiver Operating Characteristic) curve, along with statistics\"\n   \"plot_PR_curve()\", \"plots the precision-recall curve, along with statistics\"\n   \"plot_confusion_matrix()\", \"plots the confusion matrix, along with key statistics, and returns accuracy\"\n   \"demo_CV()\", \"provides a demo of cross validation in this module\"\n   \"demo()\", \"provides a demo of the major functions in this module\"\n\n\n-----\n\nmodule: datasets\n----------------\n\n.. csv-table::\n   :header: \"function\", \"description\"\n   :widths: 10, 20\n\n   \"public_dataset()\", \"returns a public dataset as specified (e.g., iris, SMS_spam, Social_Network_Ads)\"\n\n\n-----\n\nmodule: kNN\n-----------\n\n.. csv-table::\n   :header: \"function\", \"description\"\n   :widths: 10, 20\n\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: naive_bayes\n-------------------\n\n.. csv-table::\n   :header: \"class/function\", \"description\"\n   :widths: 10, 20\n\n   \"naive_bayes_Gaussian()\", \"when X are continuous variables\"\n   \"naive_bayes_multinomial()\", \"when X are independent discrete variables with 3+ levels (e.g., term frequency in the document)\"\n   \"naive_bayes_Bernoulli()\", \"when X are independent binary variables (e.g., whether a word occurs in a document or not)\"\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: SVM\n-----------\n\n.. csv-table::\n   :header: \"function\", \"description\"\n   :widths: 10, 20\n\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: decision_tree\n---------------------\n\n.. csv-table::\n   :header: \"class/function\", \"description\"\n   :widths: 10, 20\n\n   \"decision_tree_regressor_from_scratch()\", \"decision tree regressor developed from scratch\"\n   \"decision_tree_classifier_from_scratch()\", \"decision tree classifier developed from scratch\"\n   \"demo_from_scratch()\", \"provides a demo of selected functions in this module\"\n   \"decision_tree_regressor()\", \"decision tree regressor\"\n   \"decision_tree_classifier()\", \"decision tree classifier\"\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: neural_network\n----------------------\n\n.. csv-table::\n   :header: \"function\", \"description\"\n   :widths: 10, 20\n\n   \"multi_layer_perceptron_classifier()\", \"multi-layer perceptron (MLP) classifier\"\n   \"rnn()\", \"recurrent neural network\"\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: logistic_regression\n---------------------------\n\n.. csv-table::\n   :header: \"function\", \"description\"\n   :widths: 10, 20\n\n   \"LogisticReg_sklearn()\", \"solutions using sklearn\"\n   \"LogisticReg_statsmodels()\", \"solutions using statsmodels\"\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: linear_regression\n-------------------------\n\n.. csv-table::\n   :header: \"function\", \"description\"\n   :widths: 10, 20\n\n   \"Lasso_regression()\", \"lasso_regression\"\n   \"Ridge_regression()\", \"ridge_regression\"\n   \"demo_regularization()\", \"provides a demo of selected functions in this module\"\n   \"Linear_regression_normal_equation()\", \"linear_regression_normal_equation\"\n   \"Linear_regression()\", \"linear_regression\"\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: DSA\n-----------\n\n.. csv-table::\n   :header: \"function\", \"description\"\n   :widths: 10, 20\n\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: imbalanced_data\n-----------------------\n\n.. csv-table::\n   :header: \"function\", \"description\"\n   :widths: 10, 20\n\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: decomposition\n---------------------\n\n.. csv-table::\n   :header: \"function\", \"description\"\n   :widths: 10, 20\n\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: gradient_descent\n------------------------\n\n.. csv-table::\n   :header: \"class/function\", \"description\"\n   :widths: 10, 20\n\n   \"logistic_regression_BGD_classifier()\", \"logistic_regression_BGD_classifier class\"\n   \"batch_gradient_descent()\", \"batch_gradient_descent class\"\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n-----\n\nmodule: ensemble\n----------------\n\n.. csv-table::\n   :header: \"class/function\", \"description\"\n   :widths: 10, 20\n\n   \"gradient_boosting_regressor_from_scratch()\", \"gradient boosting regressor developed from scratch\"\n   \"adaptive_boosting_classifier_from_scratch()\", \"adaptive boosting classifier developed from scratch\"\n   \"random_forest_classifier_from_scratch()\", \"random forest classifier developed from scratch\"\n   \"bagging_classifier_from_scratch()\", \"bagging classifier developed from scratch\"\n   \"gradient_boosting_classifier()\", \"gradient boosting classifier\"\n   \"adaptive_boosting_classifier()\", \"adaptive boosting classifier\"\n   \"random_forest_classifier()\", \"random forest classifier\"\n   \"bagging_classifier()\", \"bagging classifier\"\n   \"voting_classifier()\", \"voting classifier\"\n   \"demo()\", \"provides a demo of selected functions in this module\"\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/daniel-yj-yang/machlearn",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "machlearn",
    "package_url": "https://pypi.org/project/machlearn/",
    "platform": "",
    "project_url": "https://pypi.org/project/machlearn/",
    "project_urls": {
      "Homepage": "https://github.com/daniel-yj-yang/machlearn"
    },
    "release_url": "https://pypi.org/project/machlearn/1.2.14/",
    "requires_dist": [
      "scikit-learn (>=0.23.2)",
      "numpy (>=1.19.2)",
      "seaborn (>=0.11.0)",
      "matplotlib (>=3.3.2)",
      "pandas (>=1.1.2)",
      "textblob (>=0.15.3)",
      "nltk (>=3.5)",
      "pydotplus (>=2.0.2)",
      "dtreeviz (>=1.1.2)",
      "statsmodels (>=0.12.0)",
      "sortedcontainers (>=2.2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Machine Learning Python Library",
    "version": "1.2.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10605616,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4297663668f07660cbbb1430513c993da2034dfaa20fff187964adf4f031ea32",
        "md5": "19eb2ef2f0bfe132790e4f9a98791a76",
        "sha256": "6894d5248b99e0805d978e0fabc39def13c892fd38c7d5cb3113cb4d2c9c2710"
      },
      "downloads": -1,
      "filename": "machlearn-1.2.14-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "19eb2ef2f0bfe132790e4f9a98791a76",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 71547179,
      "upload_time": "2020-11-05T14:31:11",
      "upload_time_iso_8601": "2020-11-05T14:31:11.382781Z",
      "url": "https://files.pythonhosted.org/packages/42/97/663668f07660cbbb1430513c993da2034dfaa20fff187964adf4f031ea32/machlearn-1.2.14-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2845b8bb55036fab79a971fcd62f1ee9897e49f003fd6ac2b6c1cf3027ec5bb",
        "md5": "734afa9028cbe8c7dc5a2a5eaed5f312",
        "sha256": "206d762490da1da5f5821daae29f8bdb2459e7e06a3ab2908db45440e1363242"
      },
      "downloads": -1,
      "filename": "machlearn-1.2.14.tar.gz",
      "has_sig": false,
      "md5_digest": "734afa9028cbe8c7dc5a2a5eaed5f312",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 71374539,
      "upload_time": "2020-11-05T14:31:44",
      "upload_time_iso_8601": "2020-11-05T14:31:44.802784Z",
      "url": "https://files.pythonhosted.org/packages/f2/84/5b8bb55036fab79a971fcd62f1ee9897e49f003fd6ac2b6c1cf3027ec5bb/machlearn-1.2.14.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}