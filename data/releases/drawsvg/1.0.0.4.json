{
  "info": {
    "author": "Casey Duckering",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: IPython",
      "Framework :: Jupyter",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "Most common SVG tags are supported and others can easily be added by\nwriting a small subclass of ``DrawableBasicElement`` or\n``DrawableParentElement``.\n\nInstall\n=======\n\ndrawSvg is available on PyPI:\n\n::\n\n    $ pip3 install drawSvg\n\nExamples\n========\n\nBasic drawing elements\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    d = draw.Drawing(200, 100, origin='center')\n\n    d.append(draw.Lines(-80, -45,\n                        70, -49,\n                        95, 49,\n                        -90, 40,\n                        close=False,\n                fill='#eeee00',\n                stroke='black'))\n\n    d.append(draw.Rectangle(0,0,40,50, fill='#1248ff'))\n    d.append(draw.Circle(-40, -10, 30,\n                fill='red', stroke_width=2, stroke='black'))\n\n    p = draw.Path(stroke_width=2, stroke='green',\n                  fill='black', fill_opacity=0.5)\n    p.M(-30,5)  # Start path at point (-30, 5)\n    p.l(60,30)  # Draw line to (60, 30)\n    p.h(-70)    # Draw horizontal line to x=-70\n    p.Z()       # Draw line to start\n    d.append(p)\n\n    d.append(draw.ArcLine(60,-20,20,60,270,\n                stroke='red', stroke_width=5, fill='red', fill_opacity=0.2))\n    d.append(draw.Arc(60,-20,20,60,270,cw=False,\n                stroke='green', stroke_width=3, fill='none'))\n    d.append(draw.Arc(60,-20,20,270,60,cw=True,\n                stroke='blue', stroke_width=1, fill='black', fill_opacity=0.3))\n\n    d.setPixelScale(2)  # Set number of pixels per geometry unit\n    #d.setRenderSize(400,200)  # Alternative to setPixelScale\n    d.saveSvg('example.svg')\n    d.savePng('example.png')\n\n    # Display in iPython notebook\n    d.rasterize()  # Display as PNG\n    d  # Display as SVG\n\n.. image:: https://github.com/cduck/drawSvg/raw/master/example1.png\n   :alt: Example output image\n\nGradients\n~~~~~~~~~\n\n.. code:: python\n\n    d = draw.Drawing(1.5, 0.8, origin='center')\n\n    d.draw(draw.Rectangle(-0.75,-0.5,1.5,1, fill='#ddd'))\n\n    # Create gradient\n    gradient = draw.RadialGradient(0,-0.35,0.7*10)\n    gradient.addStop(0.5/0.7/10, 'green', 1)\n    gradient.addStop(1/10, 'red', 0)\n\n    # Draw a shape to fill with the gradient\n    p = draw.Path(fill=gradient, stroke='black', stroke_width=0.002)\n    p.arc(0,-0.35,0.7,30,120)\n    p.arc(0,-0.35,0.5,120,30,cw=True, includeL=True)\n    p.Z()\n    d.append(p)\n\n    # Draw another shape to fill with the same gradient\n    p = draw.Path(fill=gradient, stroke='red', stroke_width=0.002)\n    p.arc(0,-0.35,0.75,130,160)\n    p.arc(0,-0.35,0,160,130,cw=True, includeL=True)\n    p.Z()\n    d.append(p)\n\n    # Another gradient\n    gradient2 = draw.LinearGradient(0.1,-0.35,0.1+0.6,-0.35+0.2)\n    gradient2.addStop(0, 'green', 1)\n    gradient2.addStop(1, 'red', 0)\n    d.append(draw.Rectangle(0.1,-0.35,0.6,0.2,\n                            stroke='black', stroke_width=0.002,\n                            fill=gradient2))\n\n    # Display\n    d.setRenderSize(w=600)\n    d\n\n.. image:: https://github.com/cduck/drawSvg/raw/master/example2.png\n   :alt: Example output image\n\nDuplicate geometry and clip paths\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    d = draw.Drawing(1.4, 1.4, origin='center')\n\n    # Define clip path\n    clip = draw.ClipPath()\n    clip.append(draw.Rectangle(-.25,.25-1,1,1))\n\n    # Draw a cropped circle\n    c = draw.Circle(0,0,0.5, stroke_width='0.01', stroke='black',\n                             fill_opacity=0.3, clip_path=clip,\n                             id='circle')\n    d.append(c)\n\n    # Make a transparent copy, cropped again\n    g = draw.Group(opacity=0.5, clip_path=clip)\n    g.append(draw.Use('circle', 0.25,0.1))\n    d.append(g)\n\n    # Display\n    d.setRenderSize(400)\n    d.rasterize()\n\n.. image:: https://github.com/cduck/drawSvg/raw/master/example3.png\n   :alt: Example output image\n\nImplementing other SVG tags\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    # Subclass DrawingBasicElement if it cannot have child nodes\n    # Subclass DrawingParentElement otherwise\n    # Subclass DrawingDef if it must go between <def></def> tags in an SVG\n    class Hyperlink(draw.DrawingParentElement):\n        TAG_NAME = 'a'\n        def __init__(self, href, target=None, **kwargs):\n            # Other init logic...\n            # Keyword arguments to super().__init__() correspond to SVG node\n            # arguments: stroke_width=5 -> stroke-width=\"5\"\n            super().__init__(href=href, target=target, **kwargs)\n\n    d = draw.Drawing(1, 1.2, origin='center')\n\n    # Create hyperlink\n    hlink = Hyperlink('https://www.python.org', target='_blank',\n                      transform='skewY(-30)')\n    # Add child elements\n    hlink.append(draw.Circle(0,0,0.5, fill='green'))\n    hlink.append(draw.Text('Hyperlink',0.2, 0,0, center=0.6, fill='white'))\n\n    # Draw and display\n    d.append(hlink)\n    d.setRenderSize(200)\n    d\n\n.. image:: https://github.com/cduck/drawSvg/raw/master/example4.png\n   :alt: Example output image",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/cduck/drawSvg/archive/1.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cduck/drawSvg",
    "keywords": "SVG,draw,graphics,iPython,Jupyter",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drawsvg",
    "package_url": "https://pypi.org/project/drawsvg/",
    "platform": "",
    "project_url": "https://pypi.org/project/drawsvg/",
    "project_urls": {
      "Download": "https://github.com/cduck/drawSvg/archive/1.0.0.tar.gz",
      "Homepage": "https://github.com/cduck/drawSvg"
    },
    "release_url": "https://pypi.org/project/drawsvg/1.0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This is a Python 3 library for programmatically generating SVG images (vector drawings) and rendering them or displaying them in an iPython notebook.",
    "version": "1.0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17163424,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb3ed87d6df04707ff3a9eb305fcb72e9cf6c816ed6718987f9fcbb1c6a71dad",
        "md5": "3189e4f61b0f94777a89e20b804aaad1",
        "sha256": "b9c778fabe87640550cbcee0205b2472bd791c2bffff0454bbcdb7814fbc34b1"
      },
      "downloads": -1,
      "filename": "drawSvg-1.0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "3189e4f61b0f94777a89e20b804aaad1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11563,
      "upload_time": "2017-12-27T09:26:33",
      "upload_time_iso_8601": "2017-12-27T09:26:33.648484Z",
      "url": "https://files.pythonhosted.org/packages/eb/3e/d87d6df04707ff3a9eb305fcb72e9cf6c816ed6718987f9fcbb1c6a71dad/drawSvg-1.0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}