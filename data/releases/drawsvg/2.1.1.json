{
  "info": {
    "author": "Casey Duckering",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: IPython",
      "Framework :: Jupyter",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![drawsvg logo](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/logo.svg?sanitize=true)](https://github.com/cduck/drawSvg/blob/master/examples/logo.svg)\n\nA Python 3 library for programmatically generating SVG images and animations that can render and display your drawings in a Jupyter notebook or Jupyter lab.\n\nMost common SVG tags are supported and others can easily be added by writing a small subclass of `DrawableBasicElement` or `DrawableParentElement`.  [Nearly all SVG attributes](https://developer.mozilla.org/en-US/docs/Web/SVG) are supported via keyword args (e.g. Python keyword argument `fill_opacity=0.5` becomes SVG attribute `fill-opacity=\"0.5\"`).\n\nAn interactive [Jupyter notebook](https://jupyter.org) widget, `drawsvg.widgets.DrawingWidget`, [is included](#interactive-widget) that can update drawings based on mouse events.  The widget does not yet work in Jupyter lab.\n\n[SVG quick reference docs](https://cduck.github.io/drawsvg/)\n\n\n# Install\n\nDrawsvg is available on PyPI:\n```bash\n$ python3 -m pip install \"drawsvg~=2.0\"\n```\n\nTo enable raster image support (PNG, MP4, and GIF), follow the [full-feature install instructions](#full-feature-install).\n\n\n## Upgrading from version 1.x\n\nMajor breaking changes:\n\n- camelCase method and argument names are now snake\\_case and the package name is lowercase (except for arguments that correspond to camelCase SVG attributes).\n- The default coordinate system y-axis now matches the SVG coordinate system (y increases down the screen, x increases right)\n- How to fix `ModuleNotFoundError: No module named 'drawSvg'` (with a capital S)?  Either pip install `\"drawSvg~=1.9\"` or update your code for drawsvg 2.x (for example, change `drawSvg` to `drawsvg` and `d.saveSvg` to `d.save_svg`).\n\n\n# Examples\n\n### Basic drawing elements\n```python\nimport drawsvg as draw\n\nd = draw.Drawing(200, 100, origin='center')\n\n# Draw an irregular polygon\nd.append(draw.Lines(-80, 45,\n                     70, 49,\n                     95, -49,\n                    -90, -40,\n                    close=False,\n            fill='#eeee00',\n            stroke='black'))\n\n# Draw a rectangle\nr = draw.Rectangle(-80, -50, 40, 50, fill='#1248ff')\nr.append_title(\"Our first rectangle\")  # Add a tooltip\nd.append(r)\n\n# Draw a circle\nd.append(draw.Circle(-40, 10, 30,\n        fill='red', stroke_width=2, stroke='black'))\n\n# Draw an arbitrary path (a triangle in this case)\np = draw.Path(stroke_width=2, stroke='lime', fill='black', fill_opacity=0.2)\np.M(-10, -20)  # Start path at point (-10, -20)\np.C(30, 10, 30, -50, 70, -20)  # Draw a curve to (70, -20)\nd.append(p)\n\n# Draw text\nd.append(draw.Text('Basic text', 8, -10, -35, fill='blue'))  # 8pt text at (-10, -35)\nd.append(draw.Text('Path text', 8, path=p, text_anchor='start', line_height=1))\nd.append(draw.Text(['Multi-line', 'text'], 8, path=p, text_anchor='end', center=True))\n\n# Draw multiple circular arcs\nd.append(draw.ArcLine(60, 20, 20, 60, 270,\n        stroke='red', stroke_width=5, fill='red', fill_opacity=0.2))\nd.append(draw.Arc(60, 20, 20, 90, -60, cw=True,\n        stroke='green', stroke_width=3, fill='none'))\nd.append(draw.Arc(60, 20, 20, -60, 90, cw=False,\n        stroke='blue', stroke_width=1, fill='black', fill_opacity=0.3))\n\n# Draw arrows\narrow = draw.Marker(-0.1, -0.51, 0.9, 0.5, scale=4, orient='auto')\narrow.append(draw.Lines(-0.1, 0.5, -0.1, -0.5, 0.9, 0, fill='red', close=True))\np = draw.Path(stroke='red', stroke_width=2, fill='none',\n        marker_end=arrow)  # Add an arrow to the end of a path\np.M(20, 40).L(20, 27).L(0, 20)  # Chain multiple path commands\nd.append(p)\nd.append(draw.Line(30, 20, 0, 10,\n        stroke='red', stroke_width=2, fill='none',\n        marker_end=arrow))  # Add an arrow to the end of a line\n\nd.set_pixel_scale(2)  # Set number of pixels per geometry unit\n#d.set_render_size(400, 200)  # Alternative to set_pixel_scale\nd.save_svg('example.svg')\nd.save_png('example.png')\n\n# Display in Jupyter notebook\n#d.rasterize()  # Display as PNG\nd  # Display as SVG\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/example1.png)](https://github.com/cduck/drawsvg/blob/master/examples/example1.svg)\n\n### SVG-native animation with playback controls\n```python\nimport drawsvg as draw\n\nd = draw.Drawing(400, 200, origin='center',\n        animation_config=draw.types.SyncedAnimationConfig(\n            # Animation configuration\n            duration=8,  # Seconds\n            show_playback_progress=True,\n            show_playback_controls=True))\nd.append(draw.Rectangle(-200, -100, 400, 200, fill='#eee'))  # Background\nd.append(draw.Circle(0, 0, 40, fill='green'))  # Center circle\n\n# Animation\ncircle = draw.Circle(0, 0, 0, fill='gray')  # Moving circle\ncircle.add_key_frame(0, cx=-100, cy=0,    r=0)\ncircle.add_key_frame(2, cx=0,    cy=-100, r=40)\ncircle.add_key_frame(4, cx=100,  cy=0,    r=0)\ncircle.add_key_frame(6, cx=0,    cy=100,  r=40)\ncircle.add_key_frame(8, cx=-100, cy=0,    r=0)\nd.append(circle)\nr = draw.Rectangle(0, 0, 0, 0, fill='silver')  # Moving square\nr.add_key_frame(0, x=-100, y=0,       width=0,  height=0)\nr.add_key_frame(2, x=0-20, y=-100-20, width=40, height=40)\nr.add_key_frame(4, x=100,  y=0,       width=0,  height=0)\nr.add_key_frame(6, x=0-20, y=100-20,  width=40, height=40)\nr.add_key_frame(8, x=-100, y=0,       width=0,  height=0)\nd.append(r)\n\n# Changing text\ndraw.native_animation.animate_text_sequence(\n        d,\n        [0, 2, 4, 6],\n        ['0', '1', '2', '3'],\n        30, 0, 1, fill='yellow', center=True)\n\n# Save as a standalone animated SVG or HTML\nd.save_svg('playback-controls.svg')\nd.save_html('playback-controls.html')\n\n# Display in Jupyter notebook\n#d.display_image()  # Display SVG as an image (will not be interactive)\n#d.display_iframe()  # Display as interactive SVG (alternative)\n#d.as_gif('orbit.gif', fps=10)  # Render as a GIF image, optionally save to file\n#d.as_mp4('orbig.mp4', fps=60, verbose=True)  # Render as an MP4 video, optionally save to file\n#d.as_spritesheet('orbit-spritesheet.png', row_length=10, fps=3)  # Render as a spritesheet\nd.display_inline()  # Display as interactive SVG\n```\n\n[![Example animated image](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/playback-controls.svg?sanitize=true)](https://github.com/cduck/drawsvg/blob/master/examples/playback-controls.svg)\n\nNote: GitHub blocks the playback controls.\nDownload the above SVG and open it in a web browser to try.\n\nhttps://user-images.githubusercontent.com/2476062/221400434-1529d237-e9bf-4363-a143-0ece75cd349a.mp4\n\n### Patterns and gradients\n```python\nimport drawsvg as draw\n\nd = draw.Drawing(1.5, 0.8, origin='center')\n\n# Background pattern (not supported by Cairo, d.rasterize() will not show it)\npattern = draw.Pattern(width=0.13, height=0.23)\npattern.append(draw.Rectangle(0, 0, .1, .1, fill='yellow'))\npattern.append(draw.Rectangle(0, .1, .1, .1, fill='orange'))\nd.draw(draw.Rectangle(-0.75, -0.5, 1.5, 1, fill=pattern, fill_opacity=0.4))\n\n# Create gradient\ngradient = draw.RadialGradient(0, 0.35, 0.7*10)\ngradient.add_stop(0.5/0.7/10, 'green', 1)\ngradient.add_stop(1/10, 'red', 0)\n\n# Draw a shape to fill with the gradient\np = draw.Path(fill=gradient, stroke='black', stroke_width=0.002)\np.arc(0, 0.35, 0.7, -30, -120, cw=False)\np.arc(0, 0.35, 0.5, -120, -30, cw=True, include_l=True)\np.Z()\nd.append(p)\n\n# Draw another shape to fill with the same gradient\np = draw.Path(fill=gradient, stroke='red', stroke_width=0.002)\np.arc(0, 0.35, 0.75, -130, -160, cw=False)\np.arc(0, 0.35, 0, -160, -130, cw=True, include_l=True)\np.Z()\nd.append(p)\n\n# Another gradient\ngradient2 = draw.LinearGradient(0.1, 0.35, 0.1+0.6, 0.35+0.2)\ngradient2.add_stop(0, 'green', 1)\ngradient2.add_stop(1, 'red', 0)\nd.append(draw.Rectangle(0.1, 0.15, 0.6, 0.2,\n                        stroke='black', stroke_width=0.002,\n                        fill=gradient2))\n\n# Display\nd.set_render_size(w=600)\nd\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/example2.svg?sanitize=true)](https://github.com/cduck/drawsvg/blob/master/examples/example2.svg)\n\n### Duplicate geometry and clip paths\n```python\nimport drawsvg as draw\n\nd = draw.Drawing(1.4, 1.4, origin='center')\n\n# Define clip path\nclip = draw.ClipPath()\nclip.append(draw.Rectangle(-.25, -.25, 1, 1))\n\n# Draw a cropped circle\ncircle = draw.Circle(0, 0, 0.5,\n        stroke_width='0.01', stroke='black',\n        fill_opacity=0.3, clip_path=clip)\nd.append(circle)\n\n# Make a transparent copy, cropped again\ng = draw.Group(opacity=0.5, clip_path=clip)\n# Here, circle is not directly appended to the drawing.\n# drawsvg recognizes that `Use` references `circle` and automatically adds\n# `circle` to the <defs></defs> section of the SVG.\ng.append(draw.Use(circle, 0.25, -0.1))\nd.append(g)\n\n# Display\nd.set_render_size(400)\n#d.rasterize()  # Display as PNG\nd  # Display as SVG\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/example3.png)](https://github.com/cduck/drawsvg/blob/master/examples/example3.svg)\n\n### Organizing and duplicating drawing elements\n```python\nimport drawsvg as draw\n\nd = draw.Drawing(300, 100)\nd.set_pixel_scale(2)\n\n# Use groups to contain other elements\n# Children elements of groups inherit the coordinate system (transform)\n# and attribute values\ngroup = draw.Group(fill='orange', transform='rotate(-20)')\ngroup.append(draw.Rectangle(0, 10, 20, 40))  # This rectangle will be orange\ngroup.append(draw.Circle(30, 40, 10))  # This circle will also be orange\ngroup.append(draw.Circle(50, 40, 10, fill='green'))  # This circle will not\nd.append(group)\n\n# Use the Use element to make duplicates of elements\n# Each duplicate can be placed at an offset (x, y) location and any additional\n# attributes (like fill color) are inherited if the element didn't specify them.\nd.append(draw.Use(group, 80, 0, stroke='black', stroke_width=1))\nd.append(draw.Use(group, 80, 20, stroke='blue', stroke_width=2))\nd.append(draw.Use(group, 80, 40, stroke='red', stroke_width=3))\n\nd.display_inline()\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/example8.png)](https://github.com/cduck/drawsvg/blob/master/examples/example8.svg)\n\n### Implementing other SVG tags\n```python\nimport drawsvg as draw\n\n# Subclass DrawingBasicElement if it cannot have child nodes\n# Subclass DrawingParentElement otherwise\n# Subclass DrawingDef if it must go between <def></def> tags in an SVG\nclass Hyperlink(draw.DrawingParentElement):\n    TAG_NAME = 'a'\n    def __init__(self, href, target=None, **kwargs):\n        # Other init logic...\n        # Keyword arguments to super().__init__() correspond to SVG node\n        # arguments: stroke_width=5 -> <a stroke-width=\"5\" ...>...</a>\n        super().__init__(href=href, target=target, **kwargs)\n\nd = draw.Drawing(1, 1.2, origin='center')\n\n# Create hyperlink\nhlink = Hyperlink('https://www.python.org', target='_blank',\n                  transform='skewY(-30)')\n# Add child elements\nhlink.append(draw.Circle(0, 0, 0.5, fill='green'))\nhlink.append(draw.Text('Hyperlink', 0.2, 0, 0, center=0.6, fill='white'))\n\n# Draw and display\nd.append(hlink)\nd.set_render_size(200)\nd\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/example4.png)](https://github.com/cduck/drawsvg/blob/master/examples/example4.svg)\n\n### Animation with the SVG Animate Tag\n```python\nimport drawsvg as draw\n\nd = draw.Drawing(200, 200, origin='center')\n\n# Animate the position and color of circle\nc = draw.Circle(0, 0, 20, fill='red')\n# See for supported attributes:\n# https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate\nc.append_anim(draw.Animate('cy', '6s', '-80;80;-80',\n                           repeatCount='indefinite'))\nc.append_anim(draw.Animate('cx', '6s', '0;80;0;-80;0',\n                           repeatCount='indefinite'))\nc.append_anim(draw.Animate('fill', '6s', 'red;green;blue;yellow',\n                           calc_mode='discrete',\n                           repeatCount='indefinite'))\nd.append(c)\n\n# Animate a black circle around an ellipse\nellipse = draw.Path()\nellipse.M(-90, 0)\nellipse.A(90, 40, 360, True, True, 90, 0)  # Ellipse path\nellipse.A(90, 40, 360, True, True, -90, 0)\nellipse.Z()\nc2 = draw.Circle(0, 0, 10)\n# See for supported attributes:\n# https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate_motion\nc2.append_anim(draw.AnimateMotion(ellipse, '3s',\n                                  repeatCount='indefinite'))\n# See for supported attributes:\n# https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate_transform\nc2.append_anim(draw.AnimateTransform('scale', '3s', '1,2;2,1;1,2;2,1;1,2',\n                                     repeatCount='indefinite'))\nd.append(c2)\n\nd.save_svg('animated.svg')  # Save to file\nd  # Display in Jupyter notebook\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/animated-fix-github.svg?sanitize=true)](https://github.com/cduck/drawsvg/blob/master/examples/animated.svg)\n\n### Interactive Widget\n```python\nimport drawsvg as draw\nfrom drawsvg.widgets import DrawingWidget\nimport hyperbolic.poincare as hyper  # python3 -m pip install hyperbolic\nfrom hyperbolic import euclid\n\n# Create drawing\nd = draw.Drawing(2, 2, origin='center', context=draw.Context(invert_y=True))\nd.set_render_size(500)\nd.append(draw.Circle(0, 0, 1, fill='orange'))\ngroup = draw.Group()\nd.append(group)\n\n# Update the drawing based on user input\nclick_list = []\ndef redraw(points):\n    group.children.clear()\n    for x1, y1 in points:\n        for x2, y2 in points:\n            if (x1, y1) == (x2, y2): continue\n            p1 = hyper.Point.from_euclid(x1, y1)\n            p2 = hyper.Point.from_euclid(x2, y2)\n            if p1.distance_to(p2) <= 2:\n                line = hyper.Line.from_points(*p1, *p2, segment=True)\n                group.draw(line, hwidth=0.2, fill='white')\n    for x, y in points:\n        p = hyper.Point.from_euclid(x, y)\n        group.draw(hyper.Circle.from_center_radius(p, 0.1),\n                   fill='green')\nredraw(click_list)\n\n# Create interactive widget and register mouse events\nwidget = DrawingWidget(d)\n@widget.mousedown\ndef mousedown(widget, x, y, info):\n    if (x**2 + y**2) ** 0.5 + 1e-5 < 1:\n        click_list.append((x, y))\n    redraw(click_list)\n    widget.refresh()\n@widget.mousemove\ndef mousemove(widget, x, y, info):\n    if (x**2 + y**2) ** 0.5 + 1e-5 < 1:\n        redraw(click_list + [(x, y)])\n    widget.refresh()\nwidget\n```\n\n![Example output image](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/example5.gif)\n\nNote: The above example currently only works in `jupyter notebook`, not `jupyter lab`.\n\n### Frame-by-Frame Animation\n```python\nimport drawsvg as draw\n\n# Draw a frame of the animation\ndef draw_frame(t):\n    d = draw.Drawing(2, 6.05, origin=(-1, -5))\n    d.set_render_size(h=300)\n    d.append(draw.Rectangle(-2, -6, 4, 8, fill='white'))\n    d.append(draw.Rectangle(-1, 1, 2, 0.05, fill='brown'))\n    t = (t + 1) % 2 - 1\n    y = t**2 * 4 - 4\n    d.append(draw.Circle(0, y, 1, fill='lime'))\n    return d\n\nwith draw.frame_animate_jupyter(draw_frame, delay=0.05) as anim:\n# Or:\n#with draw.frame_animate_video('example6.gif', draw_frame, duration=0.05) as anim:\n# Or:\n#with draw.frame_animate_spritesheet('example6.png', draw_frame, row_length=10) as anim:\n    # Add each frame to the animation\n    for i in range(20):\n        anim.draw_frame(i/10)\n    for i in range(20):\n        anim.draw_frame(i/10)\n    for i in range(20):\n        anim.draw_frame(i/10)\n```\n\nGIF:\n\n![Example output gif](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/example6.gif)\n\nSpritesheet (usable in most 2D game engines):\n\n![Example output spritesheet](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/example6.png)\n\n### Asynchronous Frame-based Animation in Jupyter\n```python\n# Jupyter cell 1:\nimport drawsvg as draw\nfrom drawsvg.widgets import AsyncAnimation\nwidget = AsyncAnimation(fps=10)\nwidget\n# [Animation is displayed here (click to pause)]\n\n# Jupyter cell 2:\nglobal_variable = 'a'\n@widget.set_draw_frame  # Animation above is automatically updated\ndef draw_frame(secs=0):\n    # Draw something...\n    d = draw.Drawing(100, 40)\n    d.append(draw.Text(global_variable, 20, 0, 30))\n    d.append(draw.Text('{:0.1f}'.format(secs), 20, 30, 30))\n    return d\n\n# Jupyter cell 3:\nglobal_variable = 'b'  # Animation above now displays 'b'\n```\n\n![Example output image](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/example7.gif)\n\nNote: The above example currently only works in `jupyter notebook`, not `jupyter lab`.\n\n\n### Embed custom fonts\n```python\nimport drawsvg as draw\n\nd = draw.Drawing(400, 100, origin='center')\nd.embed_google_font('Permanent Marker', text=set('Text with custom font'))\n\nd.append(draw.Text('Text with custom font', 35, 0, 0, center=True,\n                   font_family='Permanent Marker', font_style='italic'))\n\nd.save_svg('font.svg')\nd  # Custom fonts work in most browsers but not in rasterize(), save_png(), or save_video()\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawsvg/master/examples/font.svg?sanitize=true)](https://github.com/cduck/drawsvg/blob/master/examples/font.svg)\n\n\n---\n\n# Full-feature install\nDrawsvg may be either be installed with no dependencies (only SVG and SVG-native animation will work):\n```bash\n$ python3 -m pip install \"drawsvg~=2.0\"\n```\n\nOr drawsvg may be installed with extra dependencies to support PNG, MP4, and GIF output:\n```bash\n$ python3 -m pip install \"drawsvg[all]~=2.0\"\n```\n\nAn additional required package, [Cairo](https://www.cairographics.org/download/), cannot be installed with pip and must be installed separately.  When Cairo is installed, drawsvg can output PNG and other image formats in addition to SVG.  Install it with your preferred package manager.  Examples:\n\n**Ubuntu**\n\n```bash\n$ sudo apt install libcairo2\n```\n\n**macOS**\n\nUsing [homebrew](https://brew.sh/) (may require a Python version installed with `brew install python`):\n\n```bash\n$ brew install cairo\n```\n\n**Any platform**\n\nUsing [Anaconda](https://docs.conda.io/en/latest/miniconda.html) (may require Python and cairo installed in the same conda environment):\n\n```bash\n$ conda install -c anaconda cairo\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/cduck/drawsvg/archive/2.1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cduck/drawsvg",
    "keywords": "SVG,draw,graphics,iPython,Jupyter,widget,animation",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drawsvg",
    "package_url": "https://pypi.org/project/drawsvg/",
    "platform": null,
    "project_url": "https://pypi.org/project/drawsvg/",
    "project_urls": {
      "Download": "https://github.com/cduck/drawsvg/archive/2.1.1.tar.gz",
      "Homepage": "https://github.com/cduck/drawsvg"
    },
    "release_url": "https://pypi.org/project/drawsvg/2.1.1/",
    "requires_dist": [
      "cairoSVG (~=2.3) ; extra == 'all'",
      "numpy (~=1.16) ; extra == 'all'",
      "imageio (~=2.5) ; extra == 'all'",
      "imageio-ffmpeg (~=0.4) ; extra == 'all'",
      "pwkit (~=1.0) ; extra == 'all'",
      "pwkit (~=1.0) ; extra == 'color'",
      "numpy (~=1.16) ; extra == 'color'",
      "cairoSVG (~=2.3) ; extra == 'raster'",
      "numpy (~=1.16) ; extra == 'raster'",
      "imageio (~=2.5) ; extra == 'raster'",
      "imageio-ffmpeg (~=0.4) ; extra == 'raster'"
    ],
    "requires_python": "",
    "summary": "A Python 3 library for programmatically generating SVG (vector) images and animations.  Drawsvg can also render to PNG, MP4, and display your drawings in Jupyter notebook and Jupyter lab.",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17163424,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e6682d45bfcec672377f8b7051343c0164200d1eaf92cca6f5f846bde191e57",
        "md5": "53ed67aa50d90f3131657942886cdaf1",
        "sha256": "2ba5c4ee7f6a89c26a3f29d7d65e139d2cdbe11671015fa6c9d9d943e8c18bf8"
      },
      "downloads": -1,
      "filename": "drawsvg-2.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "53ed67aa50d90f3131657942886cdaf1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 43633,
      "upload_time": "2023-03-05T11:29:46",
      "upload_time_iso_8601": "2023-03-05T11:29:46.660521Z",
      "url": "https://files.pythonhosted.org/packages/4e/66/82d45bfcec672377f8b7051343c0164200d1eaf92cca6f5f846bde191e57/drawsvg-2.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}