{
  "info": {
    "author": "Casey Duckering",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: IPython",
      "Framework :: Jupyter",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# drawSvg\n\nA Python 3 library for programmatically generating SVG images (vector drawings) and rendering them or displaying them in a Jupyter notebook.\n\nMost common SVG tags are supported and others can easily be added by writing a small subclass of `DrawableBasicElement` or `DrawableParentElement`.\n\nAn interactive [Jupyter notebook](https://jupyter.org) widget, `drawSvg.widgets.DrawingWidget`, is included that can update drawings based on mouse events.\n\n# Install\n\ndrawSvg is available on PyPI:\n\n```\n$ pip3 install drawSvg\n```\n\n## Prerequisites\n\nCairo needs to be installed separately. When Cairo is installed, drawSvg can output PNG or other image formats in addition to SVG. See platform-specific [instructions for Linux, Windows, and macOS from Cairo](https://www.cairographics.org/download/). Below are some examples for installing Cairo on Linux distributions and macOS.\n\n**Ubuntu**\n\n```\n$ sudo apt-get install libcairo2\n```\n\n**macOS**\n\nUsing [homebrew](https://brew.sh/):\n\n```\n$ brew install cairo\n```\n\n# Examples\n\n### Basic drawing elements\n```python\nimport drawSvg as draw\n\nd = draw.Drawing(200, 100, origin='center')\n\nd.append(draw.Lines(-80, -45,\n                    70, -49,\n                    95, 49,\n                    -90, 40,\n                    close=False,\n            fill='#eeee00',\n            stroke='black'))\n\nd.append(draw.Rectangle(0,0,40,50, fill='#1248ff'))\nd.append(draw.Circle(-40, -10, 30,\n            fill='red', stroke_width=2, stroke='black'))\n\np = draw.Path(stroke_width=2, stroke='green',\n              fill='black', fill_opacity=0.5)\np.M(-30,5)  # Start path at point (-30, 5)\np.l(60,30)  # Draw line to (60, 30)\np.h(-70)    # Draw horizontal line to x=-70\np.Z()       # Draw line to start\nd.append(p)\n\nd.append(draw.ArcLine(60,-20,20,60,270,\n            stroke='red', stroke_width=5, fill='red', fill_opacity=0.2))\nd.append(draw.Arc(60,-20,20,60,270,cw=False,\n            stroke='green', stroke_width=3, fill='none'))\nd.append(draw.Arc(60,-20,20,270,60,cw=True,\n            stroke='blue', stroke_width=1, fill='black', fill_opacity=0.3))\n\nd.setPixelScale(2)  # Set number of pixels per geometry unit\n#d.setRenderSize(400,200)  # Alternative to setPixelScale\nd.saveSvg('example.svg')\nd.savePng('example.png')\n\n# Display in Jupyter notebook\nd.rasterize()  # Display as PNG\nd  # Display as SVG\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawSvg/master/examples/example1.png)](https://github.com/cduck/drawSvg/blob/master/examples/example1.svg)\n\n### Gradients\n```python\nimport drawSvg as draw\n\nd = draw.Drawing(1.5, 0.8, origin='center')\n\nd.draw(draw.Rectangle(-0.75,-0.5,1.5,1, fill='#ddd'))\n\n# Create gradient\ngradient = draw.RadialGradient(0,-0.35,0.7*10)\ngradient.addStop(0.5/0.7/10, 'green', 1)\ngradient.addStop(1/10, 'red', 0)\n\n# Draw a shape to fill with the gradient\np = draw.Path(fill=gradient, stroke='black', stroke_width=0.002)\np.arc(0,-0.35,0.7,30,120)\np.arc(0,-0.35,0.5,120,30,cw=True, includeL=True)\np.Z()\nd.append(p)\n\n# Draw another shape to fill with the same gradient\np = draw.Path(fill=gradient, stroke='red', stroke_width=0.002)\np.arc(0,-0.35,0.75,130,160)\np.arc(0,-0.35,0,160,130,cw=True, includeL=True)\np.Z()\nd.append(p)\n\n# Another gradient\ngradient2 = draw.LinearGradient(0.1,-0.35,0.1+0.6,-0.35+0.2)\ngradient2.addStop(0, 'green', 1)\ngradient2.addStop(1, 'red', 0)\nd.append(draw.Rectangle(0.1,-0.35,0.6,0.2,\n                        stroke='black', stroke_width=0.002,\n                        fill=gradient2))\n\n# Display\nd.setRenderSize(w=600)\nd\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawSvg/master/examples/example2.png)](https://github.com/cduck/drawSvg/blob/master/examples/example2.svg)\n\n### Duplicate geometry and clip paths\n```python\nimport drawSvg as draw\n\nd = draw.Drawing(1.4, 1.4, origin='center')\n\n# Define clip path\nclip = draw.ClipPath()\nclip.append(draw.Rectangle(-.25,.25-1,1,1))\n\n# Draw a cropped circle\nc = draw.Circle(0,0,0.5, stroke_width='0.01', stroke='black',\n                         fill_opacity=0.3, clip_path=clip,\n                         id='circle')\nd.append(c)\n\n# Make a transparent copy, cropped again\ng = draw.Group(opacity=0.5, clip_path=clip)\ng.append(draw.Use('circle', 0.25,0.1))\nd.append(g)\n\n# Display\nd.setRenderSize(400)\nd.rasterize()\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawSvg/master/examples/example3.png)](https://github.com/cduck/drawSvg/blob/master/examples/example3.svg)\n\n### Implementing other SVG tags\n```python\nimport drawSvg as draw\n\n# Subclass DrawingBasicElement if it cannot have child nodes\n# Subclass DrawingParentElement otherwise\n# Subclass DrawingDef if it must go between <def></def> tags in an SVG\nclass Hyperlink(draw.DrawingParentElement):\n    TAG_NAME = 'a'\n    def __init__(self, href, target=None, **kwargs):\n        # Other init logic...\n        # Keyword arguments to super().__init__() correspond to SVG node\n        # arguments: stroke_width=5 -> stroke-width=\"5\"\n        super().__init__(href=href, target=target, **kwargs)\n\nd = draw.Drawing(1, 1.2, origin='center')\n\n# Create hyperlink\nhlink = Hyperlink('https://www.python.org', target='_blank',\n                  transform='skewY(-30)')\n# Add child elements\nhlink.append(draw.Circle(0,0,0.5, fill='green'))\nhlink.append(draw.Text('Hyperlink',0.2, 0,0, center=0.6, fill='white'))\n\n# Draw and display\nd.append(hlink)\nd.setRenderSize(200)\nd\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawSvg/master/examples/example4.png)](https://github.com/cduck/drawSvg/blob/master/examples/example4.svg)\n\n### Animation with the SVG Animate Tag\n```python\nimport drawSvg as draw\n\nd = draw.Drawing(200, 200, origin='center')\n\n# Animate the position and color of circle\nc = draw.Circle(0, 0, 20, fill='red')\n# See for supported attributes:\n# https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate\nc.appendAnim(draw.Animate('cy', '6s', '-80;80;-80',\n                          repeatCount='indefinite'))\nc.appendAnim(draw.Animate('cx', '6s', '0;80;0;-80;0',\n                          repeatCount='indefinite'))\nc.appendAnim(draw.Animate('fill', '6s', 'red;green;blue;yellow',\n                          calcMode='discrete',\n                          repeatCount='indefinite'))\nd.append(c)\n\n# Animate a black circle around an ellipse\nellipse = draw.Path()\nellipse.M(-90, 0)\nellipse.A(90, 40, 360, True, True, 90, 0)  # Ellipse path\nellipse.A(90, 40, 360, True, True, -90, 0)\nellipse.Z()\nc2 = draw.Circle(0, 0, 10)\n# See for supported attributes:\n# https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateMotion\nc2.appendAnim(draw.AnimateMotion(ellipse, '3s',\n                                 repeatCount='indefinite'))\n# See for supported attributes:\n# https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateTransform\nc2.appendAnim(draw.AnimateTransform('scale', '3s', '1,2;2,1;1,2;2,1;1,2',\n                                    repeatCount='indefinite'))\nd.append(c2)\n\nd.saveSvg('animated.svg')  # Save to file\nd  # Display in Jupyter notebook\n```\n\n[![Example output image](https://raw.githubusercontent.com/cduck/drawSvg/master/examples/animated-fix-github.svg?sanitize=true)](https://github.com/cduck/drawSvg/blob/master/examples/animated.svg)\n\n### Interactive Widget\n```python\nimport drawSvg as draw\nfrom drawSvg.widgets import DrawingWidget\nimport hyperbolic.poincare.shapes as hyper  # pip3 install hyperbolic\n\n# Create drawing\nd = draw.Drawing(2, 2, origin='center')\nd.setRenderSize(500)\nd.append(draw.Circle(0, 0, 1, fill='orange'))\ngroup = draw.Group()\nd.append(group)\n\n# Update the drawing based on user input\nclick_list = []\ndef redraw(points):\n    group.children.clear()\n    for x1, y1 in points:\n        for x2, y2 in points:\n            if (x1, y1) == (x2, y2): continue\n            p1 = hyper.Point.fromEuclid(x1, y1)\n            p2 = hyper.Point.fromEuclid(x2, y2)\n            if p1.distanceTo(p2) <= 2:\n                line = hyper.Line.fromPoints(*p1, *p2, segment=True)\n                group.draw(line, hwidth=0.2, fill='white')\n    for x, y in points:\n        p = hyper.Point.fromEuclid(x, y)\n        group.draw(hyper.Circle.fromCenterRadius(p, 0.1),\n                   fill='green')\nredraw(click_list)\n\n# Create interactive widget and register mouse events\nwidget = DrawingWidget(d)\n@widget.mousedown\ndef mousedown(widget, x, y, info):\n    if (x**2 + y**2) ** 0.5 + 1e-5 < 1:\n        click_list.append((x, y))\n    redraw(click_list)\n    widget.refresh()\n@widget.mousemove\ndef mousemove(widget, x, y, info):\n    if (x**2 + y**2) ** 0.5 + 1e-5 < 1:\n        redraw(click_list + [(x, y)])\n    widget.refresh()\nwidget\n```\n\n![Example output image](https://raw.githubusercontent.com/cduck/drawSvg/master/examples/example5.gif)\n\n### Animation with Python\n```python\nimport drawSvg as draw\n\n# Draw a frame of the animation\ndef draw_frame(t):\n    d = draw.Drawing(2, 6.05, origin=(-1,-1.05))\n    d.setRenderSize(h=300)\n    d.append(draw.Rectangle(-2, -2, 4, 8, fill='white'))\n    d.append(draw.Rectangle(-1, -1.05, 2, 0.05, fill='brown'))\n    t = (t + 1) % 2 - 1\n    y = 4 - t**2 * 4\n    d.append(draw.Circle(0, y, 1, fill='lime'))\n    return d\n\nwith draw.animate_jupyter(draw_frame, delay=0.05) as anim:\n# Or:\n#with draw.animate_video('example6.gif', draw_frame, duration=0.05\n#                       ) as anim:\n    # Add each frame to the animation\n    for i in range(20):\n        anim.draw_frame(i/10)\n    for i in range(20):\n        anim.draw_frame(i/10)\n    for i in range(20):\n        anim.draw_frame(i/10)\n```\n\n![Example output image](https://raw.githubusercontent.com/cduck/drawSvg/master/examples/example6.gif)\n\n### Asynchronous Animation in Jupyter\n```python\n# Jupyter cell 1:\nwidget = AsyncAnimation(fps=10)\nwidget\n# [Animation is displayed here (click to pause)]\n\n# Jupyter cell 2:\nglobal_variable = 'a'\n@widget.set_draw_frame  # Animation above is automatically updated\ndef draw_frame(secs=0):\n    # Draw something...\n    d = draw.Drawing(100, 40)\n    d.append(draw.Text(global_variable, 20, 0, 10))\n    d.append(draw.Text('{:0.1f}'.format(secs), 20, 30, 10))\n    return d\n\n# Jupyter cell 3:\nglobal_variable = 'b'  # Animation above now displays 'b'\n```\n\n![Example output image](https://raw.githubusercontent.com/cduck/drawSvg/master/examples/example7.gif)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/cduck/drawSvg/archive/1.5.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cduck/drawSvg",
    "keywords": "SVG,draw,graphics,iPython,Jupyter,widget",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drawsvg",
    "package_url": "https://pypi.org/project/drawsvg/",
    "platform": "",
    "project_url": "https://pypi.org/project/drawsvg/",
    "project_urls": {
      "Download": "https://github.com/cduck/drawSvg/archive/1.5.1.tar.gz",
      "Homepage": "https://github.com/cduck/drawSvg"
    },
    "release_url": "https://pypi.org/project/drawsvg/1.5.1/",
    "requires_dist": [
      "cairoSVG",
      "numpy",
      "imageio"
    ],
    "requires_python": "",
    "summary": "A Python 3 library for programmatically generating SVG images (vector drawings) and rendering them or displaying them in an iPython notebook.",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17163424,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a5992f947a9270f417ff222cf75fec4593a04e59e8d25d15d0aebdfe4fb664a",
        "md5": "296fbb69c827d719d35fb050a20c4935",
        "sha256": "8b9af41bfa7bae47e529fdaa03981854415a1702f9df917754cfbf0c6ad7d5c3"
      },
      "downloads": -1,
      "filename": "drawSvg-1.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "296fbb69c827d719d35fb050a20c4935",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22741,
      "upload_time": "2020-03-01T08:03:06",
      "upload_time_iso_8601": "2020-03-01T08:03:06.725290Z",
      "url": "https://files.pythonhosted.org/packages/4a/59/92f947a9270f417ff222cf75fec4593a04e59e8d25d15d0aebdfe4fb664a/drawSvg-1.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}