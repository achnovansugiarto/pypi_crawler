{
  "info": {
    "author": "Zeste de Savoir",
    "author_email": "dev@gustavi.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[![Build Status](https://travis-ci.org/zestedesavoir/django-cors-middleware.svg?branch=master)](https://travis-ci.org/zestedesavoir/django-cors-middleware)\r\n[![codecov.io](http://codecov.io/github/zestedesavoir/django-cors-middleware/coverage.svg?branch=master)](http://codecov.io/github/ottoyiu/zestedesavoir/django-cors-middleware?branch=master)\r\n\r\n[![PyPI](https://img.shields.io/pypi/v/nine.svg)](https://pypi.python.org/pypi/django-cors-middleware)\r\n\r\ndjango-cors-middleware \r\n======================\r\n\r\nA Django App that adds CORS (Cross-Origin Resource Sharing) headers to responses.\r\n\r\nAlthough JSON-P is useful, it is strictly limited to GET requests. CORS builds on top of XmlHttpRequest to allow developers to make cross-domain requests, similar to same-domain requests. Read more about it here: [http://www.html5rocks.com/en/tutorials/cors/ ](http://www.html5rocks.com/en/tutorials/cors/)\r\n\r\nThis is a fork of [https://github.com/ottoyiu/django-cors-headers/](django-cors-headers by ottoyiu) because of inactivity.\r\n\r\ndjango-cors-middleware supports Django 1.8 (python 2.7, 3.3, 3.4 and 3.5) and Django 1.9 (python 2.7, 3.4 and 3.5).\r\n\r\n## Setup ##\r\n\r\nInstall by downloading the source and running:\r\n\r\n>   python setup.py install\r\n\r\nor\r\n\r\n>   pip install django-cors-headers\r\n\r\nand then add it to your installed apps:\r\n\r\n    INSTALLED_APPS = (\r\n        ...\r\n        'corsheaders',\r\n        ...\r\n    )\r\n\r\nYou will also need to add a middleware class to listen in on responses:\r\n\r\n    MIDDLEWARE_CLASSES = (\r\n        ...\r\n        'corsheaders.middleware.CorsMiddleware',\r\n        'django.middleware.common.CommonMiddleware',\r\n        ...\r\n    )\r\n\r\nNote that `CorsMiddleware` needs to come before Django's `CommonMiddleware` if you are using Django's `USE_ETAGS = True` setting, otherwise the CORS headers will be lost from the 304 not-modified responses, causing errors in some browsers.\r\n\r\n## Configuration ##\r\n\r\nAdd hosts that are allowed to do cross-site requests to `CORS_ORIGIN_WHITELIST` or set `CORS_ORIGIN_ALLOW_ALL` to `True` to allow all hosts.\r\n\r\n\r\n>CORS\\_ORIGIN\\_ALLOW\\_ALL: if True, the whitelist will not be used and all origins will be accepted\r\n\r\n    Default:\r\n\r\n        CORS_ORIGIN_ALLOW_ALL = False\r\n\r\n>CORS\\_ORIGIN\\_WHITELIST: specify a list of origin hostnames that are authorized to make a cross-site HTTP request\r\n\r\n    Example:\r\n\r\n        CORS_ORIGIN_WHITELIST = (\r\n            'google.com',\r\n            'hostname.example.com'\r\n        )\r\n\r\n\r\n    Default:\r\n\r\n        CORS_ORIGIN_WHITELIST = ()\r\n\r\n>CORS\\_ORIGIN\\_REGEX\\_WHITELIST: specify a regex list of origin hostnames that are authorized to make a cross-site HTTP request; Useful when you have a large amount of subdomains for instance.\r\n\r\n    Example:\r\n\r\n        CORS_ORIGIN_REGEX_WHITELIST = ('^(https?://)?(\\w+\\.)?google\\.com$', )\r\n\r\n\r\n    Default:\r\n\r\n        CORS_ORIGIN_REGEX_WHITELIST = ()\r\n\r\n\r\n---\r\n\r\n\r\nYou may optionally specify these options in settings.py to override the defaults. Defaults are shown below:\r\n\r\n\r\n>CORS\\_URLS\\_REGEX: specify a URL regex for which to enable the sending of CORS headers; Useful when you only want to enable CORS for specific URLs, e. g. for a REST API under ``/api/``.\r\n\r\n    Example:\r\n\r\n        CORS_URLS_REGEX = r'^/api/.*$'\r\n\r\n    Default:\r\n\r\n        CORS_URLS_REGEX = '^.*$'\r\n\r\n>CORS\\_ALLOW\\_METHODS: specify the allowed HTTP methods that can be used when making the actual request\r\n\r\n    Default:\r\n\r\n        CORS_ALLOW_METHODS = (\r\n            'GET',\r\n            'POST',\r\n            'PUT',\r\n            'PATCH',\r\n            'DELETE',\r\n            'OPTIONS'\r\n        )\r\n\r\n>CORS\\_ALLOW\\_HEADERS: specify which non-standard HTTP headers can be used when making the actual request\r\n\r\n    Default:\r\n\r\n        CORS_ALLOW_HEADERS = (\r\n            'x-requested-with',\r\n            'content-type',\r\n            'accept',\r\n            'origin',\r\n            'authorization',\r\n            'x-csrftoken'\r\n        )\r\n\r\n>CORS\\_EXPOSE\\_HEADERS: specify which HTTP headers are to be exposed to the browser\r\n\r\n    Default:\r\n\r\n        CORS_EXPOSE_HEADERS = ()\r\n\r\n>CORS\\_PREFLIGHT\\_MAX\\_AGE: specify the number of seconds a client/browser can cache the preflight response\r\n\r\n    Note: A preflight request is an extra request that is made when making a \"not-so-simple\" request (eg. content-type is not application/x-www-form-urlencoded) to determine what requests the server actually accepts. Read more about it here: [http://www.html5rocks.com/en/tutorials/cors/](http://www.html5rocks.com/en/tutorials/cors/)\r\n\r\n    Default:\r\n\r\n        CORS_PREFLIGHT_MAX_AGE = 86400\r\n\r\n>CORS\\_ALLOW\\_CREDENTIALS: specify whether or not cookies are allowed to be included in cross-site HTTP requests (CORS).\r\n\r\n    Default:\r\n\r\n        CORS_ALLOW_CREDENTIALS = False\r\n\r\n>CORS\\_REPLACE\\_HTTPS\\_REFERER: specify whether to replace the HTTP_REFERER header if CORS checks pass so that CSRF django middleware checks will work with https\r\n\r\n    Note: With this feature enabled, you also need to add the corsheaders.middleware.CorsPostCsrfMiddleware after django.middleware.csrf.CsrfViewMiddleware to undo the header replacement\r\n\r\n    Default:\r\n\r\n        CORS_REPLACE_HTTPS_REFERER = False\r\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zestedesavoir/django-cors-middleware",
    "keywords": "django cors middleware rest api",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-cors-middleware",
    "package_url": "https://pypi.org/project/django-cors-middleware/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-cors-middleware/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/zestedesavoir/django-cors-middleware"
    },
    "release_url": "https://pypi.org/project/django-cors-middleware/1.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "django-cors-middleware is a Django application for handling the server headers required for Cross-Origin Resource Sharing (CORS). Fork of django-cors-headers.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6268200,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1784a82a378b6c92d50e40e8f959c8ff692a8a1e7a26f3c6d90cd107c6facc0",
        "md5": "8d9b58c81c4d1908738f8447eb3de1f2",
        "sha256": "3f4fddaaba584c4e3362c54a21b70155df81487e82d5050fdeee0eb52fbbed49"
      },
      "downloads": -1,
      "filename": "django-cors-middleware-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8d9b58c81c4d1908738f8447eb3de1f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7121,
      "upload_time": "2016-01-11T08:49:30",
      "upload_time_iso_8601": "2016-01-11T08:49:30.564511Z",
      "url": "https://files.pythonhosted.org/packages/f1/78/4a82a378b6c92d50e40e8f959c8ff692a8a1e7a26f3c6d90cd107c6facc0/django-cors-middleware-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}