{
  "info": {
    "author": "nsigustavo@gmail.com",
    "author_email": "Gustavo Rezende",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Welcome to ludibrio\r\n===================\r\n\r\n.. image:: http://ludibriar.appspot.com/_static/img/logo.png\r\n\r\n:Author: * Gustavo Rezende <nsigustavo@gmail.com>\r\n\r\n:Contributors: * Diego Pinheiro <me@dmpinheiro.net>\r\n               * Hugo Lopes <hltbra@gmail.com>\r\n               * Rodrigo Manhães <rmanhaes@gmail.com>\r\n               * Rebeca Motta <becacmotta@gmail.com>\r\n\r\n\r\nInstall\r\n-------\r\n\r\nLudibrio is registered with PyPi. If you have pip, setuptools or Distribute you can install mock with::\r\n\r\n    $ sudo easy_install ludibrio\r\n\r\n\r\nDownload\r\n--------\r\n\r\nThe latest official version is 3.0.2. Here’s how to get it::\r\n\r\n    http://pypi.python.org/pypi/ludibrio/3.0.2\r\n\r\n\r\nDocumentation\r\n-------------\r\nSee the http://ludibriar.appspot.com/ for the current documentation.\r\n\r\n\r\n\r\nGetting involved !\r\n------------------\r\n\r\nLudibrio's development may be viewed and followed on github::\r\n\r\n    http://github.com/nsigustavo/ludibrio\r\n\r\n\r\nRetrieve the source code using 'git'::\r\n\r\n    $ git clone git://github.com/nsigustavo/ludibrio.git\r\n\r\n\r\nInstall package in 'development mode' and run tests with doctestcommand::\r\n\r\n    $ sudo easy_install doctestcommand\r\n    $ git clone git://github.com/nsigustavo/ludibrio.git\r\n    $ cd ludibrio\r\n    $ sudo python setup.py develop\r\n    $ cd ludibrio\r\n    $ doctest\r\n\r\n\r\n\r\n\r\n\r\n\r\nIn a nutshell\r\n=============\r\n\r\nTest doubles are fake objects that simulate the behavior of a real object for testing purposes.\r\n\r\n\r\nMock\r\n----\r\n\r\nMocks are objects pre-programmed with expectations which form a specification of the calls they are expected to receive::\r\n\r\n    >>> from ludibrio import Mock\r\n    >>> with Mock() as MySQLdb:\r\n    ...     con = MySQLdb.connect('server', 'user', 'XXXX')\r\n    ...     con.select_db('DB') >> None\r\n    ...     cursor = con.cursor()\r\n    ...     cursor.execute('select * from numbers') >> None\r\n    ...     cursor.fetchall() >> [1,2,3,4,5]\r\n\r\n::\r\n\r\n    >>> con = MySQLdb.connect('server', 'user', 'XXXX')\r\n    >>> con.select_db('DB')\r\n    >>> cursor = con.cursor()\r\n    >>> cursor.execute('select * from numbers')\r\n    >>> cursor.fetchall()\r\n    [1, 2, 3, 4, 5]\r\n\r\n    >>> MySQLdb.validate() #passed\r\n\r\n\r\nStub\r\n----\r\n\r\nStubs provide pre-defined answers to method calls made during a test::\r\n\r\n    >>> from ludibrio import Stub\r\n    >>> with Stub() as x:\r\n    ...     x.anything() >> 'response'\r\n\r\n::\r\n\r\n    >>> x.anything()\r\n    'response'\r\n\r\n\r\nTrivial mocking or stubing for any external module\r\n--------------------------------------------------\r\n\r\nLudibrio also offers a replace mode, which basically means if a \"from ... import ...\" statement is defined into a 'with' scope, the replay mechanism will return a mock object to replace the original object in namespace of the whole Python interpreter (including any modules, etc). There's a simple example below to illustrate how use it::\r\n\r\n    >>> from ludibrio import Stub\r\n\r\n    >>> with Stub() as time:\r\n    ...     from time import time\r\n    ...     time() >> 171\r\n\r\n::\r\n\r\n    >>> from time import time\r\n    >>> time()\r\n    171\r\n\r\n\r\n\r\nProxy\r\n-----\r\n\r\nTwo Ludibrio's powerful features that aren't found in other mocking systems is the ability of proxying existing objects, or patching a real instance or class.\r\n\r\nWhen an object is proxied, Ludibrio create a Test Double object holding a reference to the real object, allowing expressions passthrough to it(mocked or not, and by default or on request)::\r\n\r\n    >>> from os.path import splitext\r\n    >>> with Stub(proxy=splitext) as splitext:\r\n    ...     splitext('ludibrio/stubed.py') >> ('/temp/temp','.temp')\r\n\r\n::\r\n\r\n    >>> splitext('mock.py')\r\n    ('mock', '.py')\r\n    >>> splitext('ludibrio/stubed.py')\r\n    ('/temp/temp', '.temp')",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://nsigustavo.blogspot.com",
    "keywords": "mock stub fake dummy doubles mocks",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ludibrio",
    "package_url": "https://pypi.org/project/ludibrio/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ludibrio/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://nsigustavo.blogspot.com"
    },
    "release_url": "https://pypi.org/project/ludibrio/3.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Platform for test doubles in Python (mocks, stubs, and dummies)",
    "version": "3.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 794395,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cb7960bf226748b919729c084c2fd49f603523bfd070c9d997af5ac7d9327d6",
        "md5": "d83f752b7cad8baa9c6b6aa92605cab3",
        "sha256": "271a2a866b00a059d9330dc1213d182731121c83088a42f6b3e7f24777b522db"
      },
      "downloads": -1,
      "filename": "ludibrio-3.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d83f752b7cad8baa9c6b6aa92605cab3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5968,
      "upload_time": "2011-11-27T00:15:13",
      "upload_time_iso_8601": "2011-11-27T00:15:13.694945Z",
      "url": "https://files.pythonhosted.org/packages/5c/b7/960bf226748b919729c084c2fd49f603523bfd070c9d997af5ac7d9327d6/ludibrio-3.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}