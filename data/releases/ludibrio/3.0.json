{
  "info": {
    "author": "nsigustavo@gmail.com",
    "author_email": "Gustavo Rezende",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Ludibrio\n========\n\nAuthor\n------\n\nGustavo Rezende <nsigustavo@gmail.com>\n\n\n\nDevelopment\n-----------\n\nLudibrio's development may be viewed and followed on github:\n    http://github.com/nsigustavo/ludibrio\n\nRetrieve the source code using 'git':\n    git clone git://github.com/nsigustavo/ludibrio.git\n\n\nTutorial\n========\n\n\nInstall\n-------\n\n    $ sudo easy_install ludibrio\n\n\nMock\n----\n\nMocks are objects pre-programmed with expectations which form a specification of the calls they are expected to receive.\n\nA Mocker or Stub instance uses the 'with' statement to record and replay expectations::\n\n    >>> from ludibrio import Mock\n    \n    >>> with Mock() as MySQLdb:\n    ...     con = MySQLdb.connect('servidor', ' usuario', 'senha')\n    ...     con.select_db('banco de dados') >> None\n    ...     cursor = con.cursor()\n    ...     cursor.execute('ALGUM SQL') >> None\n    ...     cursor.fetchall() >> [1,2,3,4,5]\n    >>> con = MySQLdb.connect('servidor', ' usuario', 'senha')\n    >>> con.select_db('banco de dados')\n    >>> cursor = con.cursor()\n    >>> cursor.execute('ALGUM SQL')\n    >>> cursor.fetchall()\n    [1, 2, 3, 4, 5]\n    \n    >>> MySQLdb.validate() #passed\n\n\nStub\n----\n\nStubs provide pre-defined answers to method calls made during a test::\n\n    >>> from ludibrio import Stub\n\n    >>> with Stub() as x:\n    ...     x.anything() >> 'response'\n\n    >>> x.anything()\n    'response'\n\n\nTrivial mocking or stubing for any external module\n--------------------------------------------------\n\nLudibrio also offers a replace mode, which basically means if a \"from ... import ...\" statement is defined into a 'with' scope, the replay mechanism will return a mock object to replace the original object in namespace of the whole Python interpreter (including any modules, etc). There's a simple example below to illustrate how use it::\n\n    >>> from ludibrio import Stub\n    \n    >>> with Stub() as time:\n    ...     from time import time\n    ...     time() >> 171\n\n    >>> from time import time\n    >>> time()\n    171\n\n\n\nProxy\n-----\n\nTwo Ludibrio's powerful features that aren't found in other mocking systems is the ability of proxying existing objects, or patching a real instance or class.\n\nWhen an object is proxied, Ludibrio create a Test Double object holding a reference to the real object, allowing expressions passthrough to it(mocked or not, and by default or on request).\n\n    >>> from os.path import splitext\n\n    >>> with Stub(proxy=splitext) as splitext:\n    ...     splitext('ludibrio/stubed.py') >> ('/temp/temp','.temp')\n    \n    >>> splitext('mock.py')\n    ('mock', '.py')\n    \n    >>> splitext('ludibrio/stubed.py')\n    ('/temp/temp', '.temp')",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://nsigustavo.blogspot.com",
    "keywords": "mock stub fake dummy doubles mocks",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "ludibrio",
    "package_url": "https://pypi.org/project/ludibrio/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ludibrio/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://nsigustavo.blogspot.com"
    },
    "release_url": "https://pypi.org/project/ludibrio/3.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Platform for test doubles in Python (mocks, stubs, fakes, and dummies)",
    "version": "3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 794395,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df0e85a7373f1a5cbe1c322779115f1d9699911268730a3ccc2b65c4369827c9",
        "md5": "48476c7d3802b0c7110d9a7ce0c22586",
        "sha256": "7714932488eb70bb107c35edb0102f8ec21ec8f1da10a42990e28d6a1c91f19c"
      },
      "downloads": -1,
      "filename": "ludibrio-3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "48476c7d3802b0c7110d9a7ce0c22586",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7675,
      "upload_time": "2010-06-02T23:02:54",
      "upload_time_iso_8601": "2010-06-02T23:02:54.546385Z",
      "url": "https://files.pythonhosted.org/packages/df/0e/85a7373f1a5cbe1c322779115f1d9699911268730a3ccc2b65c4369827c9/ludibrio-3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}