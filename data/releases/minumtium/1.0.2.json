{
  "info": {
    "author": "Danilo Guimaraes (danodic)",
    "author_email": "danilo@danodic.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Minumtium\n\nA minimal blogging library.\n\n### What can I use it for?\n\nThe purpose of _minumtium_ is to be embedded inside simple projects like landing pages or personal portfolio pages where\nit is not needed to have a lot of features. The objective is to:\n\n- Provide a simple way to add and list posts inside a page\n- Provide a summary of the most recent posts\n- Provide (very) basic user management\n\nIt is not meant to provide a full-fledged blogging platform. Features like comments, profiles, view counters,\nsocial-network integrations and even configuration files are **out of scope**.\n\n## Why minimal?\n\nThe idea behind _minumtium_ is that it should do the bare minimum: provide you the code to create posts, as well as\nprovide a way to control who can post. That's it:\n\n- There are no user profiles, it accepts whatever value you pass as an author\n- There is no UI, you have to create your own or use a library that provides it\n- There are no endpoints, but there are implementations for fastapi\n\nIt is just a library that creates and lists blog posts, you can add other features by using external libraries, like\nbuilding lego (a very minimal lego, though).\n\n## Why embedable?\n\n_Minumtium_ has been created so that it can be a library inside a bigger project. By default, it won't even provide you\na UI or even REST API endpoints. The user should encapsulate _minumtium_ inside its own code and integrate it inside its\nproject. It is expected that you implement your own authentication adapters to allow it to integrate to your auth system\nand so on.\n\n## Why extensible?\n\nBeing so bare minimal would mean that _minumtium_ is almost useless, as it is quite simple to implement its core\nfunctionality. _Minumtium_ has been built from ground up to be extensible with custom adapters and extension libraries.\nThose can:\n\n- Provide you alternative authentication methods\n- Provide integration with different databases\n- Provide you API endpoints using libraries like Flask or FastAPI\n- Provide you Front-End endpoints using Jinja or Mako rendering\n\n# Usage\n\nInstall it using pip, or you favorite _venv_ manager:\n\n```commandline\n# Using pip\npip install minumtium\n```\n\n```commandline\n# Using pipenv\npipenv install minumtium\n```\n\n```commandline\n# Using poetry\npoetry install minumtium\n```\n\nAlways interact with the service by providing its dependencies:\n\n```python\nfrom modules.posts import PostRepository, PostService\nfrom minumtium.infra.implementations.sqlalchemy_database import SqlAlchemyAdapter\n\ndb_adapter = SqlAlchemyAdapter({'engine': 'sqlite_memory'}, 'posts')\npost_repository = PostRepository(db_adapter)\npost_service = PostService(post_repository)\n\nsummary = post_service.get_latest_posts_summary(count=10)\n```\n\n# Extensions and Adapters\n\nYou may not want to write a bunch of code, and for that reason you will very likely want to use plugins. Here are some\nof the standard plugins:\n\n- [FastAPI REST API]() - REST Endpoints using FaskAPI. Includes authenticated endpoints.\n- [Simple JWT Authentication Adapter]() - Allows to authenticate _minumtium_ using simple JWT tokens\n- [SqlAlchemy Database Adapter]() - Stores data using relational databases and _SqlAlchemy_\n\nYou can refer to their repositories for more information on how to use them.\n\n# Integrating with other things\n\nThere are two things you will want to integrate:\n\n- The `posts` service at `minumtium.modules.posts.PostService`\n- The `idm` service at `minumtium.modules.idm.IdmService`\n\nIntegrating those services mean you will need to inject a few dependencies into them:\n\n- The `posts` service depends on the `PostRepository`.\n- The `PostRepository` depends on a `DatabaseAdapter` implementation.\n\nHaving a dependency injection system definitely helps out. You can take a look at the [FastAPI Plugin]() code that is\nvery simple and shows how this integration can be done.\n\n### Creating your own adapters\n\nAdding support for other kinds of databases or authentication methods will consist on implementing the adapter\ninterfaces:\n\n- `minumtium.infra.database.adapter.DatabaseAdapter`\n- `minumtium.infra.authentication.adapter.AuthenticationAdapter`\n\nThose custom adapters are provided as dependencies when creating the services and the repositories.\n\n### Creating your own application\n\nApplications are the _actual_ implementation of something usable. An example is the [Fast API REST API]() application.\nApplications are supposed to provide you a way to _actually_ use _minumtium_ without having to reinvent the wheel.\n\nApplications are provided as extension libraries, that will encapsulate minumtium something like FastAPI, for example.\nIt is up to the user to register the minumtium client inside your main client so that you have all of its routes\navailable.\n\nYou can create your own application and distribute it as a library. Those extension libraries are supposed to wrap\nminumtium into something else.\n\n# Rationale\n\nI have created this while working on my [personal portfolio page](https://danodic.dev). It was supposed to be _much more\nminimal_, like a single python file. As I started developing it I have decided to use it to practice both TDD and\nlayered architectures. It is mostly a crud, so it was a good exercise and it is easy to read the source code.\n\nMaybe it will not be so minimal as I wanted, but I learned some nice stuff along the way 😁.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danodic-dev/minumtium",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minumtium",
    "package_url": "https://pypi.org/project/minumtium/",
    "platform": null,
    "project_url": "https://pypi.org/project/minumtium/",
    "project_urls": {
      "Bug Tracker": "https://github.com/danodic-dev/minumtium/issues",
      "Homepage": "https://github.com/danodic-dev/minumtium"
    },
    "release_url": "https://pypi.org/project/minumtium/1.0.2/",
    "requires_dist": [
      "pydantic"
    ],
    "requires_python": ">=3.6",
    "summary": "A very simple blogging library.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13678580,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1e8a2c7bcb6b0ff62004200ad981740ee6bdede9048094566722068c177cf5f",
        "md5": "1ce6a8db9a5a8139dd8d16a75d87ed3e",
        "sha256": "5308ab935003fee27335074459539b4be9f93a563e142c26207b9d01c7c666b1"
      },
      "downloads": -1,
      "filename": "minumtium-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1ce6a8db9a5a8139dd8d16a75d87ed3e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10253,
      "upload_time": "2022-04-08T05:30:04",
      "upload_time_iso_8601": "2022-04-08T05:30:04.974673Z",
      "url": "https://files.pythonhosted.org/packages/e1/e8/a2c7bcb6b0ff62004200ad981740ee6bdede9048094566722068c177cf5f/minumtium-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8f0b7889f916bd146caa09cb483e1f2b6aa0e343bea6c46df04180a5a01108c",
        "md5": "6bc9a4853995aa53f668d59c119ce391",
        "sha256": "06203cc508ada8834298874d48f7b1e4fb56c44c54fa00627ea1e6cca6d1c7c5"
      },
      "downloads": -1,
      "filename": "minumtium-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6bc9a4853995aa53f668d59c119ce391",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10755,
      "upload_time": "2022-04-08T05:30:06",
      "upload_time_iso_8601": "2022-04-08T05:30:06.516755Z",
      "url": "https://files.pythonhosted.org/packages/b8/f0/b7889f916bd146caa09cb483e1f2b6aa0e343bea6c46df04180a5a01108c/minumtium-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}