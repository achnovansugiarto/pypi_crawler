{
  "info": {
    "author": "Yeison Fernandez",
    "author_email": "contacto@90horasporsemana.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "About Django GraphBox\n-----------------------------------------------\nDjango GraphBox is a package for easy building GraphQL APIs with Django. This package is based on Graphene and Graphene-Django. \n\nIt provides a SchemaBuilder that can be used to build a GraphQL schema from Django models. It also provides a SessionManager that can be used to manage access to the GraphQL API.\n\nThe basic idea of this package is to provide a simple way to build a GraphQL API with Django without the need to write a lot of code. The SchemaBuilder can be used to build a GraphQL schema from Django models in a few lines of code. The SessionManager can be used to manage access to the GraphQL API in a few lines of code.\n\nSchemaBuilder is designed to create the basic CRUD operations for a model. It can be used to create a GraphQL schema with the basic CRUD operations for a model. It also provides a way to configure the fields that will be used on the schema. The SessionManager is designed to manage access to the GraphQL API. It can be used to manage access to the GraphQL API with a user model. It also provides a way to configure the groups and permissions that will be used to manage access to the GraphQL API.\n\nThe operations that can be created with the SchemaBuilder are:\n\n-   create_field (Mutation)\n-   update_field (Mutation)\n-   delete_field (Mutation)\n-   get_field (Query) this operation will be called with the name of the model, for example, if the model is called MyModel then the operation will be called my_model and the arguments will be id.\n-   all_field (Query) this operation will be called with the name of the model, for example, if the model is called MyModel then the operation will be called all_my_model and the arguments will be filters, page, and others depending on the configuration when the model was added to the SchemaBuilder.\n\nWhen the SessionManager is used, the operations related to authentication are:\n\n-   login (Mutation)\n-   social_login (Mutation)\n-   actual_user (Query)\n\nThis package don't limit to use this basic operations. Custom operations can be defined on classic style of Graphene and Graphene-Django and finally can be merged on the main schema as described on the Quickstart section of this documentation at 4. Create a main schema in a new file called schema.py on my_project folder. This file can be used to merge all queries and mutations from all apps builded with django_graphbox or just add your own queries and mutations.\n\nSee the full documentation at https://90horasporsemana.com/graphbox/\n\nInstallation\n-----------------------------------------------\n    .. code-block:: bash\n\n        $ pip install django-graphbox\n\nQuickstart\n------------------------------------------------\n\nUse this guide to get started with the GraphBox.\n\n1. Create a new Django project.\n\n    .. code-block:: bash\n\n        $ django-admin startproject my_project\n        $ cd my_project\n        $ python manage.py startapp my_app\n\n2. Define your Django models in the `my_app` app.\n\n    .. code-block:: python3\n\n        from django.db import models\n\n        class MyModel(models.Model):\n            ...\n    .. code-block:: bash\n\n        $ python manage.py makemigrations my_app\n        $ python manage.py migrate\n\n3. Configure and Build your GraphQL schema with django_graphbox.builder.SchemaBuilder on a new file called `schema.py` on the `my_app` app.\n    \n        .. code-block:: python3\n    \n            from django_graphbox.builder import SchemaBuilder\n            from my_app.models import MyModel\n\n            builder = SchemaBuilder()\n            builder.add_model(MyModel)\n            query_class = builder.build_schema_query()\n            mutation_class = builder.build_schema_mutation()\n\n4. Create a main schema in a new file called `schema.py` on `my_project` folder. This file can be used to merge all queries and mutations from all apps builded with django_graphbox or just add your own queries and mutations.\n\n    .. code-block:: python3\n            \n            import graphene\n            from my_app.schema import query_class, mutation_class\n\n            class Query(query_class, graphene.ObjectType):\n                pass\n\n            class Mutation(mutation_class, graphene.ObjectType):\n                pass\n\n            schema = graphene.Schema(query=Query, mutation=Mutation)\n\n5. Add the schema on urls.py file.\n    \n        .. code-block:: python3\n                \n                from django.urls import path\n                from graphene_file_upload.django import FileUploadGraphQLView\n                from django.views.decorators.csrf import csrf_exempt\n                from .schema import schema\n\n                urlpatterns = [\n                    path('graphql/', csrf_exempt(FileUploadGraphQLView.as_view(graphiql=True, schema=schema))),\n                ]\n\n6. Run your project.\n    \n        .. code-block:: bash\n    \n            $ python manage.py runserver\n\nBasic Authentication\n--------------------------------------------------------------------------------\n\nDjango GraphBox implements a SessionManager that can be used to manage access to the GraphQL API.\nThis Manager is based on JWT authentication, so you have to send on Bearer format the token in the Authorization header.\n\nFollow the steps below to create a new user and Manage the access to the GraphQL API.\n\n1. Create your User model.\n\n    .. code-block:: python3\n\n        from django.models import Model\n\n        class User(Model):\n            custom_uname = models.CharField(max_length=100)\n            custom_pwd = models.CharField(max_length=100)\n            custom_active = models.BooleanField(default=True)\n            role = models.CharField(max_length=100)\n\n    Note that you can define your fields as you want, and you will be able to configure this fields in the SessionManager.\n\n2. Configure groups and modify_permissions in `settings.py` file.\n\n    .. code-block:: python3\n\n        ACCESS_GROUPS = {\n            \"GROUP_LEVEL_1\": [\"RULE_LEVEL1\"],\n            \"GROUP_LEVEL_2\": [\"RULE_LEVEL1\", \"RULE_LEVEL_2\",],\n            \"GROUP_LEVEL_3\": [\"RULE_LEVEL1\" ,\"RULE_LEVEL_2\", \"RULE_LEVEL_3\",],\n        }\n    \n    This groups can be interpreted as: If an operation like `create_field` is configured for allow to GROUP_LEVEL_2\n    then the user will be able to create a field only if he has the role RULE_LEVEL_1 or RULE_LEVEL_2.\n\n    .. code-block:: python3\n\n        MODIFY_PERMISSIONS = {\n            \"ROLE_LEVEL_1\": [\"ROLE_LEVEL_3\", \"ROLE_LEVEL_2\", \"ROLE_LEVEL_1\"],\n            \"ROLE_LEVEL_2\": [\"ROLE_LEVEL_3\", \"ROLE_LEVEL_2\",],\n            \"ROLE_LEVEL_3\": [\"ROLE_LEVEL_1\",],\n        }\n\n\n    This permissions are related with the operations of the user model used on SessionManager. A user with the permission ROLE_LEVEL_2 only can create, update and delete user instances with the permission ROLE_LEVEL_2 and ROLE_LEVEL_3.\n    \n3. Create a new instance of the SessionManager on your `schema.py` file on the `my_app` app and configure the user model.\n\n    .. code-block:: python3\n\n        from django_graphbox.session import Manager as SessionManager\n        from my_app.models import User\n        from django.conf import settings\n\n        session_manager = SessionManager(User, rol_field_name='role', login_id_field_name='custom_uname', password_field_name='custom_pwd', active_field_name='custom_active', groups=settings.ACCESS_GROUPS, modify_permissions=settings.MODIFY_PERMISSIONS)\n\n4. Configure and Build your GraphQL schema with django_graphbox.builder.SchemaBuilder on the file called `schema.py` on the `my_app` app.\n    \n        .. code-block:: python3\n    \n            from django_graphbox.builder import SchemaBuilder\n            from my_app.models import MyModel\n\n            # Add the SessionManager to the SchemaBuilder\n            builder = SchemaBuilder(session_manager=session_manager)\n            # Build your operations\n            builder.add_model(MyModel, access_group=\"GROUP_LEVEL_2\") # This operation will be available only for users with the permission ROLE_LEVEL_1 or ROLE_LEVEL_2\n            builder.add_model(\n                User, \n                exclude_fields=('custom_pwd',), # Exclude this field on the builded ModelType\n                save_as_password=['custom_pwd',], # On create and update this field will be saved as a password\n                access_group=\"GROUP_LEVEL_2\", \n                access_by_operation={'delete_field': 'GROUP_LEVEL_1'}\n                ) # This operation will be available only for users with the permission ROLE_LEVEL_1 or ROLE_LEVEL_2 except delete_field operation only for users with the permission ROLE_LEVEL_1.\n            query_class = builder.build_schema_query()\n            mutation_class = builder.build_schema_mutation()\n            # Build your session operations\n            session_query, session_mutation = builder.build_session_schema()\n\n5. Create a main schema in a new file called `schema.py` on `my_project` folder. This file can be used to merge all queries and mutations from all apps builded with django_graphbox or just add your own queries and mutations.\n\n    .. code-block:: python3\n            \n            import graphene\n            from my_app.schema import query_class, mutation_class, session_query, session_mutation\n\n            class Query(query_class, session_query, graphene.ObjectType):\n                pass\n\n            class Mutation(mutation_class, session_mutation, graphene.ObjectType):\n                pass\n\n            schema = graphene.Schema(query=Query, mutation=Mutation)\n\n6. Add the schema on urls.py file.\n    \n        .. code-block:: python3\n                \n                from django.urls import path\n                from graphene_file_upload.django import FileUploadGraphQLView\n                from django.views.decorators.csrf import csrf_exempt\n                from .schema import schema\n\n                urlpatterns = [\n                    path('graphql/', csrf_exempt(FileUploadGraphQLView.as_view(graphiql=True, schema=schema))),\n                ]\n\n7. Run the server and try to access the GraphQL API. Session operations will be available called actualUser query and login mutation. Additionally you can see the operations will require a valid access token and will validate the user role and permissions as you configured.\n\nCustom filters, validators and internal resolvers\n--------------------------------------------------------------------------------\n\nDjango GraphBox Builder allows you to add custom filters and validators to the GraphQL schema.\nThis example assumes that you have two models called `User` and `Favorite` with the following fields:\n\n    .. code-block:: python3\n\n        class User(Model):\n            custom_uname = models.CharField(max_length=100)\n            custom_pwd = models.CharField(max_length=100)\n            custom_active = models.BooleanField(default=True)\n            role = models.CharField(max_length=100)\n\n        class Favorite(Model):\n            book_name = models.CharField(max_length=100)\n            book_author = models.CharField(max_length=100)\n            book_year = models.IntegerField()\n            user = models.ForeignKey(User, on_delete=models.CASCADE)\n\n1. You can add external filters for the Favorite query. External filters are parameters that will be provided by the client and will be used to filter the query. The filters are added to the `external_filters` dictionary on the add_model method like this:\n\n    .. code-block:: python3\n\n        builder.add_model(\n            Favorite,\n            external_filters={\n                {\n                    \"field_name\": \"book_name\", # The field name on the Favorite model\n                    \"param_name\": \"book_name\", # The parameter name on the query\n                    \"param_type\": graphene.String(required=True), # The parameter graphene type\n                }\n            }\n        )\n\n2. You can add internal filters for the Favorite query. Internal filters are callables that will be resolved on the query execution with the parameters of the query resolver. The filters are added to the `internal_filters` dictionary on the add_model method like this:\n    \n        .. code-block:: python3\n    \n            builder.add_model(\n                Favorite,\n                internal_filters={\n                    \"field_name\": \"user__id\", # The field name on the Favorite model\n                    \"resolver_filter\": session_manager.actual_user_attr_getter(field_name='id'), # This function of session_manager will return a function that return the id of the actual user\n                    \"on_return_none\": \"skip\", # If the function returns None, the filter will be skipped. If you want apply the filter like user__id__is_null=True, you can set this parameter to \"set__isnull\".\n                }\n            )\n\n        This will build the query allFavorite filtered by the actual user.\n\n3. Build operations with custom validators by operation for a customizable workflow. The validators callables need receive `info`, `model_instance`, `**kwargs` and must return a boolean.\n\n    .. code-block:: python3\n            \n            builder.add_model(\n                Favorite,\n                validators_by_operation={\n                    'create_field': {\n                        'validators':(\n                            session_manager.actual_user_comparer(actual_user_field='id', operator='=', model_field='user__id'), # This function of session_manager will return a function that compare the id of the actual user with the id of the user field of the Favorite model\n                            session_manager.actual_user_comparer(actual_user_field='role', operator='=', default_value='ROLE_LEVEL_1'), # This function of session_manager will return a function that compare the role of the actual user with the default value\n                        ),\n                        'connector': 'OR', # The connector between the validators. If you want to use AND, you can set this parameter to 'AND'.\n                    },\n                }\n            )\n        \n        The validators are evaluated recursively, this allows you to create complex validators replacing the callable function with other dict with the same structure.\n\n4. Build operations with internal resolvers for some fields of the model. For example to set the actual user as the owner of the Favorite. The resolver callables need receive `info`, `model_instance`, `**kwargs` and must return a value as the model field type.\n    \n    .. code-block:: python3\n                \n                builder.add_model(\n                    Favorite,\n                    internal_field_resolvers={\n                        'create_field': {\n                            'user': session_manager.actual_user_attr_getter(field_name='id'), # This function of session_manager will return a function that return the id of the actual user\n                        },\n                        'update_field': {\n                            'user': session_manager.actual_user_attr_getter(field_name='id'), # This function of session_manager will return a function that return the id of the actual user\n                        },\n                    }\n                )\n\n    Note that the ForeignKey fields need return the id of the related model.\n\n5. Build operations based on modify_permissions. For this example we will configure the User operations for allow create, update and delete to the actual user only if this has permission.\n\n    .. code-block:: python3\n                \n                builder.add_model(\n                    User,\n                    validators_by_operation={\n                        'create_field': {\n                            'validators':(\n                                session_manager.build_access_level_validator(model_field='role'), # This function of session_manager will return a function that compare the role of the actual user with the role of the User instance on the create operation\n                            ),\n                            'connector': 'OR', # The connector between the validators. If you want to use AND, you can set this parameter to 'AND'.\n                        },\n                        'update_field': {\n                            'validators':(\n                                session_manager.build_access_level_validator(model_field='role'), # This function of session_manager will return a function that compare the role of the actual user with the role of the User instance on the update operation\n                            ),\n                            'connector': 'OR', # The connector between the validators. If you want to use AND, you can set this parameter to 'AND'.\n                        },\n                        'delete_field': {\n                            'validators':(\n                                session_manager.build_access_level_validator(model_field='role'), # This function of session_manager will return a function that compare the role of the actual user with the role of the User instance on the delete operation\n                            ),\n                            'connector': 'OR', # The connector between the validators. If you want to use AND, you can set this parameter to 'AND'.\n                        },\n                    }\n                )\n            \n            SessionManager.build_access_level_validator(model_field='role') will return a function that will validate if the user_instance.role exists on the list of MODIFY_PERMISSIONS[actual_user.role].\n\nRelease Notes\n----------------------------\n\n    * Version 1.0.0 to 1.1.5 was a package developed for a specific project, and the code was not published on GitHub. The code was refactored and published on GitHub on version 1.2.0.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yefeza/django-graphbox",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-graphbox",
    "package_url": "https://pypi.org/project/django-graphbox/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-graphbox/",
    "project_urls": {
      "Homepage": "https://github.com/yefeza/django-graphbox"
    },
    "release_url": "https://pypi.org/project/django-graphbox/1.2.0/",
    "requires_dist": [
      "Django (>=2.2.1)",
      "graphene-django (>=2.15.0)",
      "graphene-file-upload (>=1.2.2)",
      "pyjwt (>=2.3.0)",
      "urllib3 (>=1.26.9)",
      "pillow (>=8.4.0)",
      "facebook-sdk (>=3.1.0)",
      "google-auth (>=1.6.3)",
      "moodlepy (>=0.22.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Package for easy building GraphQL API with Django",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17336913,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c71d0a5ff03463b6f034388552408b61c44b5b1906a8047c1ea6cf9cced3231f",
        "md5": "b413ac4b0db54ae8d377b140e5d62899",
        "sha256": "1c5a455f6139e997fc6e792b1158fd2c25b2c2f3e6f2726c7bf066d18e9354de"
      },
      "downloads": -1,
      "filename": "django_graphbox-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b413ac4b0db54ae8d377b140e5d62899",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22272,
      "upload_time": "2023-02-24T04:14:37",
      "upload_time_iso_8601": "2023-02-24T04:14:37.415949Z",
      "url": "https://files.pythonhosted.org/packages/c7/1d/0a5ff03463b6f034388552408b61c44b5b1906a8047c1ea6cf9cced3231f/django_graphbox-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bc352f0c846ef070be23714d13df735f12dbaec48026af357434880252a5065",
        "md5": "f115891bb400bfc3e091f3cf63015957",
        "sha256": "96cc0f5a297ee3ff8ff18863d48af37c873bf841fb32ffb0fba17776aed9fb1c"
      },
      "downloads": -1,
      "filename": "django_graphbox-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f115891bb400bfc3e091f3cf63015957",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25860,
      "upload_time": "2023-02-24T04:14:39",
      "upload_time_iso_8601": "2023-02-24T04:14:39.670315Z",
      "url": "https://files.pythonhosted.org/packages/4b/c3/52f0c846ef070be23714d13df735f12dbaec48026af357434880252a5065/django_graphbox-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}