{
  "info": {
    "author": "",
    "author_email": "Vincent Luczkow <vincent.luczkow@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# manifoldpy\n[![CircleCI](https://circleci.com/gh/vluzko/manifoldpy.svg?style=shield)](https://circleci.com/gh/vluzko/manifoldpy)\n[![Documentation Status](https://readthedocs.org/projects/manifold-markets-python/badge/?version=latest)](https://manifold-markets-python.readthedocs.io/en/latest/?badge=latest)\n[![PyPI version](https://badge.fury.io/py/manifoldpy.svg)](https://badge.fury.io/py/manifoldpy)\n[![codecov](https://codecov.io/gh/vluzko/manifoldpy/branch/main/graph/badge.svg?token=1NRQKLP6IY)](https://codecov.io/gh/vluzko/manifoldpy)\n\n\nTools for analyzing [Manifold Markets](https://manifold.markets/home) data. Currently has bindings for their API, and code for computing various accuracy metrics (Brier score, log score, calibration).\n\n\n[Full Documentation](https://manifold-markets-python.readthedocs.io/en/latest/).\n\n## Calibration\nThis is the most recent calibration graph for Manifold Markets. Markets with less than 4 unique traders are excluded. The calibration is generated from the probability *halfway* between market open and market close.\n\n[![Midmarket calibration](https://github.com/vluzko/manifoldpy/blob/main/docs/midway_calibration.png)](https://github.com/vluzko/manifoldpy/blob/main/docs/midway_calibration.png)\n\n## Installation\nThe package is on PyPI as [`manifoldpy`](https://pypi.org/project/manifoldpy/). It can be installed with:\n```\npip install manifoldpy\n```\n\nHowever, you may want to install the most up-to-date version from github instead if you encounter any issues: \n```\npip install --upgrade https://github.com/vluzko/manifoldpy/tarball/main\n```\n\n## Basic Usage\nGet a list containing every market:\n```\nfrom manifoldpy import api\nmarkets = api.get_all_markets()\n```\n\nManifold also has a POST API that lets you make/resolve/bet on markets. This requires you to have an API key (which you can generate on your [Manifold profile page](https://manifold.markets/profile)). Here's an example for making a bet on a binary market:\n```\nfrom manifoldpy import api\n# Amount to spend\namount = 100\n# The ID of the market to bet on\ncontract_id = \"8Lt9ZTHCPCK58gtn0Y8n\"\n# The outcome you want to bet on.\noutcome = \"YES\"\napi.make_bet(YOUR_API_KEY, amount, contract_id, outcome)\n```\nIf you want to avoid passing the key every time, you can instead create an `APIWrapper` and use that:\n```\nfrom manifoldpy import api\nwrapper = api.APIWrapper(YOUR_API_KEY)\namount = 100\ncontract_id = \"8Lt9ZTHCPCK58gtn0Y8n\"\noutcome = \"YES\"\nwrapper.make_bet(amount, contract_id, outcome)\n```\n\nGet a market's history of probabilities:\n```\nfrom manifoldpy import api\nmarket = api.get_market(\"market_id\")\ntimes, probabilities = market.probability_history()\n```\n\nGenerate a basic calibration graph:\n```\nfrom manifoldpy import api, calibration\nfull_markets = api.get_full_markets()\nbinary = [\n    m for m in full_markets if isinstance(m, api.BinaryMarket) and m.isResolved\n]\ndf, histories = calibration.build_dataframe(binary)\n\nyes_markets = df[df[\"resolution\"] == \"YES\"]\nno_markets = df[df[\"resolution\"] == \"NO\"]\n\n# Calibration at start\nyes_probs = yes_markets[\"start\"]\nno_probs = no_markets[\"start\"]\ncalibration = calibration.market_set_accuracy(yes_probs, no_probs)\n```\n\nThere are additional examples for analyzing market calibration in the `scripts/` directory.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2022 Vincent Luczkow  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "manifoldpy",
    "package_url": "https://pypi.org/project/manifoldpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/manifoldpy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/vluzko/manifoldpy/issues",
      "Homepage": "https://github.com/vluzko/manifoldpy"
    },
    "release_url": "https://pypi.org/project/manifoldpy/1.1.2/",
    "requires_dist": [
      "attrs (==22.1.0)",
      "matplotlib (==3.5.2)",
      "numpy (==1.23.1)",
      "pandas (==1.5.1)",
      "requests (==2.28.1)",
      "scipy (==1.9.3)",
      "coverage (==6.5.0) ; extra == 'dev'",
      "mypy (==0.991) ; extra == 'dev'",
      "pytest (==7.1.2) ; extra == 'dev'",
      "pandas-stubs (>=1.5.2) ; extra == 'dev'",
      "Sphinx (==5.3.0) ; extra == 'dev'",
      "sphinx-rtd-theme (==1.1.1) ; extra == 'dev'",
      "types-pytz (==2022.6.0.1) ; extra == 'dev'",
      "types-requests (==2.28.11.4) ; extra == 'dev'",
      "types-urllib3 (==1.26.25.3) ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Python tools for working with Manifold Markets",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17107950,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "80735c5f2d371bc2451cea9f9721787f6a06bee6ef833b2e9752acf6faf381c6",
        "md5": "26e81455b512b827075873dabde5bb07",
        "sha256": "c47e4b06cbde5c6c5653352d00fd9d5bc2033e30f7fc46d302fee442c0195588"
      },
      "downloads": -1,
      "filename": "manifoldpy-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "26e81455b512b827075873dabde5bb07",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 17385,
      "upload_time": "2023-03-01T07:23:26",
      "upload_time_iso_8601": "2023-03-01T07:23:26.188960Z",
      "url": "https://files.pythonhosted.org/packages/80/73/5c5f2d371bc2451cea9f9721787f6a06bee6ef833b2e9752acf6faf381c6/manifoldpy-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d20fd448781cb7766e0f8b84936575c8f36fd2b2511c472f57f2dd35927d8cd",
        "md5": "8c59623a8c68866b4aaa4c5b54afeaa9",
        "sha256": "1d97d1c63a8c32fe9ecc0a43d18ea3292c44d864acab6c3e9ddd766a92185f4c"
      },
      "downloads": -1,
      "filename": "manifoldpy-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8c59623a8c68866b4aaa4c5b54afeaa9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17830,
      "upload_time": "2023-03-01T07:23:28",
      "upload_time_iso_8601": "2023-03-01T07:23:28.667313Z",
      "url": "https://files.pythonhosted.org/packages/8d/20/fd448781cb7766e0f8b84936575c8f36fd2b2511c472f57f2dd35927d8cd/manifoldpy-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}