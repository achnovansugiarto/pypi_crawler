{
  "info": {
    "author": "Krzysztof Dorosz",
    "author_email": "cypreess@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Welcome to django-getpaid!\n============================\n\nDocumentation: http://django-getpaid.readthedocs.org/en/latest/\n\n**django-getpaid** is carefully designed multi-broker payment processor for Django applications. The main\nadvantages of this application is:\n * instead of only one payment broker, you can use **multiple payment brokers** in your application, what is wise considering any single payment broker downtime,\n * payment brokers have a **flexible architecture** each one based on a django application structure (they can introduce own logic, views, urls, models),\n * support for **asynchronous** payment status change workflow (which is required by most brokers and is architecturally correct for production use),\n * support for **multiple payments currency** at the same time,\n * uses just a **minimal assumption** on your code, that you will have any kind of order model class.\n\nThe basic usage is to connect your order model class with `django-getpaid`. Because of advanced `AbstractMixin`, Payment model class uses real ``ForeignKey`` to your order class model, so it avoids messy django ``content_type`` relations.\n\nThis app was written because still there is not a single reliable or simple to use payment processor. There are many  payments related projects out there like `Satchmo <http://satchmoproject.sadba.org/docs/dev/>`_, `python-payflowpro <https://github.com/bkeating/python-payflowpro/>`_, `django-authorizenet <https://github.com/zen4ever/django-authorizenet>`_, `mamona <https://github.com/emesik/mamona>`_, `django-paypal <https://github.com/johnboxall/django-paypal>`_, `django-payme <https://github.com/bradleyayers/django-payme/>`_, but none of them are satisfying. `Mamona` project was the most interesting payment app out there (because of general conception), but still has got some serious architectural pitfalls. Therefore `django-getpaid` in the basic stage was aimed to be a next version of `mamona`.\nUnfortunately plenty of architectural decisions of `mamona` author caused, that `django-getpaid` has been started as a separate project, while still borrowing a lot of great ideas from `mamona`, like e.g. `AbstractMixin`, dynamic model and urls loading, etc. Thanks, `mamona`!\n\n\n\n**Disclaimer:** this project has nothing in common with `getpaid <http://code.google.com/p/getpaid/>`_ plone project.\nIt is mostly based on `mamona <https://github.com/emesik/mamona>`_ project.\n\nPayment workflow integration\n============================\n\nWith few simple steps you will easily integrate your project with django-getpaid. This module is shipped with\nvery well documented django-getpaid test project which can be found with module source code. Please refer to this\ncode for implementation details.\n\nPrepare your order model\n------------------------\n\n**Required**\n\nFirst of all you need a model that will represent an order in you application. It does not matter how\ncomplicated the model is or what fields does it provide, be it single item order, or multiple items order.\nLet's take an example from test project::\n\n    from django.core.urlresolvers import reverse\n    from django.db import models\n    import getpaid\n\n    class Order(models.Model):\n        name = models.CharField(max_length=100)\n        total = models.DecimalField(decimal_places=2, max_digits=8, default=0)\n        currency = models.CharField(max_length=3, default='EUR')\n        status = models.CharField(max_length=1, blank=True, default='W', choices=(('W', 'Waiting for payment'),\n                                                                                   ('P', 'Payment complete')))\n        def get_absolute_url(self):\n            return reverse('order_detail', kwargs={'pk': self.pk})\n\n        def __unicode__(self):\n            return self.name\n\n    getpaid.register_to_payment(Order, unique=False, related_name='payments')\n\n\nFirst of all, class name is not important at all. You register a model with ``register_to_payment`` method.\n\nYou can add some `kwargs` that are basically used for ``ForeignKey`` kwargs. In this example whe allow creating multiple payments for one order, and naming One-To-Many relation.\n\nThere are two important things on that model. In fact two methods are required to be present in order class.\nThe first one is ``__unicode__`` method as this will be used in few places as a fallback for generating\norder description. The second one is ``get_absolute_url`` method which should return an URL of order object.\nIt is used again as a fallback for some final redirections after payment success of failure (if you do not provide otherwise).\n\nThe second important thing is, that it actually doesn't matter if you store `total` in database or just sum it up from some items.\nYou will see why, in further sections.\n\n\nPrepare payment form for order\n------------------------------\n\n**Required**\n\nYour application - after some custom workflow - just created an order object. That's fine.\nWe now want to get paid for that order. So lets take a look on a view for creating a payment for an order::\n\n    from django.views.generic.detail import DetailView\n    from getpaid.forms import PaymentMethodForm\n    from getpaid_test_project.orders.models import Order\n\n    class OrderView(DetailView):\n        model=Order\n\n        def get_context_data(self, **kwargs):\n            context = super(OrderView, self).get_context_data(**kwargs)\n            context['payment_form'] = PaymentMethodForm(self.object.currency, initial={'order': self.object})\n            return context\n\n\nHere we get a ``PaymentMethodForm`` object, that is parametrised with currency type.\nThis is an important thing, because this form will display you only payments method that are suitable\nfor a given order currency.\n\n``PaymentMethodForm`` provides two fields: HiddenInput with order_id and ChoiceField with backend name. This is how you use it in template::\n\n    <form action=\"{% url getpaid-new-payment currency=object.currency %}\" method=\"post\">\n        {% csrf_token %}\n        {{ payment_form.as_p }}\n        <input type=\"submit\" value=\"Continue\">\n    </form>\n\n\nAction URL of form should point on named link  `getpaid-new-payment` that requires currency code argument.\nThis form will redirect client from order view directly to page of payment broker.\n\nFilling necessary payment data\n------------------------------\n\n**Required**\n\nBecause the idea of whole module is that it should be loosely coupled, there is this convention that it does\nnot require any structure of your order model. But still it needs to know some transaction details of your order.\nDjango signals are used for that. django-getpaid, while generating gateway redirect url, will emit\na ``getpaid.signals.new_payment_query`` signal. Here is the signal declaration::\n\n    new_payment_query = Signal(providing_args=['order', 'payment'])\n    new_payment_query.__doc__ = \"\"\"\n    Sent to ask for filling Payment object with additional data:\n        payment.amount:\t\t\ttotal amount of an order\n        payment.currency:\t\tamount currency\n    This data cannot be filled by ``getpaid`` because it is Order structure\n    agnostic. After filling values just return. Saving is done outside signal.\n    \"\"\"\n\nYour code should have some signal listeners, that will fill payment object with required information::\n\n    from getpaid import signals\n\n    def new_payment_query_listener(sender, order=None, payment=None, **kwargs):\n        \"\"\"\n        Here we fill only two obligatory fields of payment, and leave signal handler\n        \"\"\"\n        payment.amount = order.total\n        payment.currency = order.currency\n\n    signals.new_payment_query.connect(new_payment_query_listener)\n\n\nSo this is a little piece of logic that you need to provide to map your order to payment object.\nAs you can see you can do all fancy stuff here to get order total value and currency code.\n\n.. note::\n\n    If you don't know where to put your listeners code, we recommend to put it in ``listeners.py`` file\n    and then add a line ``import listeners`` to the end of you ``models.py`` file. Both files\n    (``listeners.py`` and ``models.py``) should be placed in on of your app (possibly an app related to order model).\n\nHandling changes of payment status\n----------------------------------\n\n**Required**\n\nSignals are also used to inform you that some particular payment just change status. In this case you will\nuse ``getpaid.signals.payment_status_changed`` signal which is defined as::\n\n    payment_status_changed = Signal(providing_args=['old_status', 'new_status'])\n    payment_status_changed.__doc__ = \"\"\"Sent when Payment status changes.\"\"\"\n\nexample code that handles status change::\n\n    from getpaid import signals\n\n    def payment_status_changed_listener(sender, instance, old_status, new_status, **kwargs):\n        \"\"\"\n        Here we will actually do something, when payment is accepted.\n        E.g. lets change an order status.\n        \"\"\"\n        if old_status != 'paid' and new_status == 'paid':\n            # Ensures that we process order only one\n            instance.order.status = 'P'\n            instance.order.save()\n\n    signals.payment_status_changed.connect(payment_status_changed_listener)\n\nFor example: when payment changes status to 'paid', it means that the necessary amount was verified\nby your payment broker. You can now access ``payment.order`` object and do some stuff here.\n\nHandling new payment creation\n-----------------------------\n\n**Optional**\n\nFor some reasons (e.g. for KPI benchmarking) it can be important to you how many and which payments were made.\nYou can handle ``getpaid.signals.new_payment`` signal defined as::\n\n    new_payment = Signal(providing_args=['order', 'payment'])\n    new_payment.__doc__ = \"\"\"Sent after creating new payment.\"\"\"\n\n\n.. note::\n\n    This method will enable you to make on-line KPI processing. For batch processing you can as well just query\n    the database for Payment model.\n\nSetup your payment backends\n---------------------------\n\n**Required**\n\nPlease be sure to read carefully section :doc:`backends` for information on how to configure particular backends.\nThey will probably not work out of the box without providing some account keys or other credentials.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cypreess/django-getpaid",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-getpaid",
    "package_url": "https://pypi.org/project/django-getpaid/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-getpaid/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/cypreess/django-getpaid"
    },
    "release_url": "https://pypi.org/project/django-getpaid/1.5.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Multi-broker payment processor for django",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10679541,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ecd3f6aa408a4d1027705dacdd466cf1f4793a87e8608628fb5f4b2276cc49a",
        "md5": "1b8062d590830595a586e22bdc76fcad",
        "sha256": "4663201bd1fcc0f9691579e1c138159946b0f0f19da88adda837f2e29003ece9"
      },
      "downloads": -1,
      "filename": "django-getpaid-1.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1b8062d590830595a586e22bdc76fcad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 59049,
      "upload_time": "2013-05-27T14:22:38",
      "upload_time_iso_8601": "2013-05-27T14:22:38.288699Z",
      "url": "https://files.pythonhosted.org/packages/5e/cd/3f6aa408a4d1027705dacdd466cf1f4793a87e8608628fb5f4b2276cc49a/django-getpaid-1.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}