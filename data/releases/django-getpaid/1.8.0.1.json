{
  "info": {
    "author": "Django-getpaid Team",
    "author_email": "d.kozaczko@sunscrapers.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "=============================\nWelcome to django-getpaid\n=============================\n\n.. image:: https://img.shields.io/pypi/v/django-getpaid.svg\n    :target: https://pypi.org/project/django-getpaid/\n    :alt: Latest PyPI version\n.. image:: https://img.shields.io/travis/sunscrapers/django-getpaid.svg\n    :target: https://travis-ci.org/sunscrapers/django-getpaid\n.. image:: https://img.shields.io/coveralls/github/cypreess/django-getpaid.svg\n    :target: https://coveralls.io/github/django-getpaid/django-getpaid?branch=master\n.. image:: https://img.shields.io/pypi/wheel/django-getpaid.svg\n    :target: https://pypi.org/project/django-getpaid/\n.. image:: https://img.shields.io/pypi/l/django-getpaid.svg\n    :target: https://pypi.org/project/django-getpaid/\n\n\ndjango-getpaid is a multi-broker payment processor for Django\n\nDocumentation\n=============\n\nThe full documentation is at https://django-getpaid.readthedocs.io.\n\nQuickstart\n==========\n\nInstall django-getpaid::\n\n    pip install django-getpaid\n\nAdd it to your `INSTALLED_APPS`:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'getpaid.apps.GetpaidConfig',\n        ...\n    )\n\nAdd django-getpaid's URL patterns:\n\n.. code-block:: python\n\n    from getpaid import urls as getpaid_urls\n\n\n    urlpatterns = [\n        ...\n        url(r'^', include(getpaid_urls)),\n        ...\n    ]\n\nFeatures\n========\n\n* **multiple payment brokers support** - allows using simultaneously many payments methods at the same time,\n* **multiple payments currency support** (getpaid will automatically filter available backends list accordingly to the payment currency),\n* **integration flexibility**  -  makes minimal assumption on 3rd party code - requires only an existence of any single django model representing an order,\n* **proper architecture design** - all backends which requires fetching payment confirmation are enforced to use asynchronous celery tasks.\n\n\nSupported backends:\n-------------------\n\nIn alphabetical order:\n\n* `Dotpay.pl/Dotpay.eu <http://dotpay.eu>`_\n* `PayU.pl <http://payu.pl>`_\n\nDon't see the payment backend you need? `Writing your own backend <https://django-getpaid.readthedocs.org/en/latest/custom_backends.html>`_ is very simple. Pull requests are welcome.\n\n\nPayment workflow integration\n============================\n\nWith few simple steps you will easily integrate your project with django-getpaid. This module is shipped with\nvery well documented django-getpaid test project which can be found with module source code. Please refer to this\ncode for implementation details.\n\nStep 1. Prepare your order model\n--------------------------------\n\n**Required**\n\nFirst of all you need a model that will represent an order in you application. It does not matter how\ncomplicated the model is or what fields does it provide, be it single item order, or multiple items order.\nLet's take an example from test project::\n\n    from django.core.urlresolvers import reverse\n    from django.db import models\n    import getpaid\n\n    class Order(models.Model):\n        name = models.CharField(max_length=100)\n        total = models.DecimalField(decimal_places=2, max_digits=8, default=0)\n        currency = models.CharField(max_length=3, default='EUR')\n        status = models.CharField(max_length=1, blank=True, default='W', choices=(('W', 'Waiting for payment'),\n                                                                                   ('P', 'Payment complete')))\n        def get_absolute_url(self):\n            return reverse('order_detail', kwargs={'pk': self.pk})\n\n        def __unicode__(self):\n            return self.name\n\n    Payment = getpaid.register_to_payment(Order, unique=False, related_name='payments')\n\n\nand add the following line to your settings:\n\n    GETPAID_ORDER_MODEL = 'my_super_app.Order'\n\n\nFirst of all, class name is not important at all. You register a model with ``register_to_payment`` method.\n\nYou can add some `kwargs` that are basically used for ``ForeignKey`` kwargs. In this example whe allow creating multiple payments for one order, and naming One-To-Many relation.\n\nThere are two important things on that model. In fact two methods are required to be present in order class.\nThe first one is ``__unicode__`` method as this will be used in few places as a fallback for generating\norder description. The second one is ``get_absolute_url`` method which should return an URL of order object.\nIt is used again as a fallback for some final redirections after payment success of failure (if you do not provide otherwise).\n\nThe second important thing is, that it actually doesn't matter if you store `total` in database or just sum it up from some items.\nYou will see why, in further sections.\n\n\nStep 2. Prepare payment form for order\n--------------------------------------\n\n**Required**\n\nYour application - after some custom workflow - just created an order object. That's fine.\nWe now want to get paid for that order. So lets take a look on a view for creating a payment for an order::\n\n    from django.views.generic.detail import DetailView\n    from getpaid.forms import PaymentMethodForm\n    from example.orders.models import Order\n\n    class OrderView(DetailView):\n        model=Order\n\n        def get_context_data(self, **kwargs):\n            context = super(OrderView, self).get_context_data(**kwargs)\n            context['payment_form'] = PaymentMethodForm(self.object.currency, initial={'order': self.object})\n            return context\n\n\nHere we get a ``PaymentMethodForm`` object, that is parametrised with currency type.\nThis is an important thing, because this form will display you only payments method that are suitable\nfor a given order currency.\n\n``PaymentMethodForm`` provides two fields: HiddenInput with order_id and ChoiceField with backend name. This is how you use it in template::\n\n    <form action=\"{% url 'getpaid:new-payment' currency=object.currency %}\" method=\"post\">\n        {% csrf_token %}\n        {{ payment_form.as_p }}\n        <input type=\"submit\" value=\"Continue\">\n    </form>\n\n\nAction URL of form should point on named link  `getpaid:new-payment` that requires currency code argument.\nThis form will redirect client from order view directly to page of payment broker.\n\nStep 3. Filling necessary payment data\n--------------------------------------\n\n**Required**\n\nBecause the idea of whole module is that it should be loosely coupled, there is this convention that it does\nnot require any structure of your order model. But still it needs to know some transaction details of your order.\nDjango signals are used for that. django-getpaid, while generating gateway redirect url, will emit\na ``getpaid.signals.new_payment_query`` signal. Here is the signal declaration::\n\n    new_payment_query = Signal(providing_args=['order', 'payment'])\n    new_payment_query.__doc__ = \"\"\"\n    Sent to ask for filling Payment object with additional data:\n        payment.amount:\t\t\ttotal amount of an order\n        payment.currency:\t\tamount currency\n    This data cannot be filled by ``getpaid`` because it is Order structure\n    agnostic. After filling values just return. Saving is done outside signal.\n    \"\"\"\n\nYour code should have some signal listeners, that will fill payment object with required information::\n\n    from getpaid import signals\n\n    def new_payment_query_listener(sender, order=None, payment=None, **kwargs):\n        \"\"\"\n        Here we fill only two obligatory fields of payment, and leave signal handler\n        \"\"\"\n        payment.amount = order.total\n        payment.currency = order.currency\n\n    signals.new_payment_query.connect(new_payment_query_listener)\n\n\nSo this is a little piece of logic that you need to provide to map your order to payment object.\nAs you can see you can do all fancy stuff here to get order total value and currency code.\n\n.. note::\n\n    If you don't know where to put your listeners code, we recommend to put it in ``listeners.py`` file\n    and then add a line ``import listeners`` to the end of you ``models.py`` file. Both files\n    (``listeners.py`` and ``models.py``) should be placed in on of your app (possibly an app related to order model).\n\nStep 4. Handling changes of payment status\n------------------------------------------\n\n**Required**\n\nSignals are also used to inform you that some particular payment just change status. In this case you will\nuse ``getpaid.signals.payment_status_changed`` signal which is defined as::\n\n    payment_status_changed = Signal(providing_args=['old_status', 'new_status'])\n    payment_status_changed.__doc__ = \"\"\"Sent when Payment status changes.\"\"\"\n\nexample code that handles status change::\n\n    from getpaid import signals\n\n    def payment_status_changed_listener(sender, instance, old_status, new_status, **kwargs):\n        \"\"\"\n        Here we will actually do something, when payment is accepted.\n        E.g. lets change an order status.\n        \"\"\"\n        if old_status != 'paid' and new_status == 'paid':\n            # Ensures that we process order only one\n            instance.order.status = 'P'\n            instance.order.save()\n\n    signals.payment_status_changed.connect(payment_status_changed_listener)\n\nFor example: when payment changes status to 'paid', it means that the necessary amount was verified\nby your payment broker. You can now access ``payment.order`` object and do some stuff here.\n\nStep 5. Handling new payment creation\n-------------------------------------\n\n**Optional**\n\nFor some reasons you may want to make some additiona checks before a new\nPayment is created or add some extra validation before the user is redirected\nto gateway url. You can handle this with\n``getpaid.signals.order_additional_validation`` signal defined as::\n\n\torder_additional_validation = Signal(providing_args=['request',\n                                                         'order',\n                                                         'backend'])\n\torder_additional_validation.__doc__ = \"\"\"\n\tA hook for additional validation of an order.\n\tSent after PaymentMethodForm is submitted but before\n\tPayment is created and before user is redirected to payment gateway.\n\t\"\"\"\n\nIt may also (e.g. for KPI benchmarking) be important for you to how many\nand which payments were made.\nYou can handle ``getpaid.signals.new_payment`` signal defined as::\n\n    new_payment = Signal(providing_args=['order', 'payment'])\n    new_payment.__doc__ = \"\"\"Sent after creating new payment.\"\"\"\n\n\n.. note::\n\n    This method will enable you to make on-line KPI processing. For batch processing you can as well just query\n    the database for Payment model.\n\nStep 6. Setup your payment backends\n-----------------------------------\n\n**Required**\n\nPlease be sure to read carefully  `Backends <https://django-getpaid.readthedocs.org/en/latest/backends.html>`_ section for information on how to configure particular backends.\nThey will probably not work out of the box without providing some account keys or other credentials.\n\n\n\nRunning Tests\n=============\n\nDoes the code actually work?\n\n::\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install tox\n    (myenv) $ tox\n\n\n\nDisclaimer\n==========\n\nThis project has nothing in common with `getpaid <http://code.google.com/p/getpaid/>`_ plone project.\nIt is mostly based on `mamona <https://github.com/emesik/mamona>`_ project.\nThis app was written because there was not a single reliable or simple to use payment processor dedicated to django.\nYou can refer to other payment modules which does not meet our needs:\n`Satchmo <http://satchmoproject.sadba.org/docs/dev/>`_,\n`python-payflowpro <https://github.com/bkeating/python-payflowpro/>`_,\n`django-authorizenet <https://github.com/zen4ever/django-authorizenet>`_,\n`mamona <https://github.com/emesik/mamona>`_,\n`django-paypal <https://github.com/johnboxall/django-paypal>`_,\n`django-payme <https://github.com/bradleyayers/django-payme/>`_.\n\n\n\nCredits\n=======\n\nProudly sponsored by `SUNSCRAPERS <http://sunscrapers.com/>`_\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\nHistory\n=======\n\n(master branch - current development)\n-------------------------------------\n\n\n\nVersion 1.8.0 (2018-07-24)\n--------------------------\n\n* Updated project structure thanks to cookiecutter-djangopackage\n* New plugin: pay_rest - New PayU API\n* Updated following plugins:\n  - payu - legacy API still works on new URL\n* Dropped support for following plugins:\n  - epaydk (API no longer functional)\n  - moip (will be moved to separate package)\n  - transferuj.pl (API no longer functional)\n  - przelewy24.pl (API needs update, but no sandbox available anymore)\n* Dropped support for Django <= 1.10\n* Provide support for Django 2.0\n\n\nVersion 1.7.5\n-------------\n* Fixed przelewy24 params (py3 support)\n\nVersion 1.7.4\n-------------\n* Added default apps config getpaid.apps.Config\n* Fixed and refactoring for utils.get_domain, build_absolute_uri,\n  settings.GETPAID_SITE_DOMAIN\n* Refactored register_to_payment\n* Refactored build_absolute_uri\n* Refactored and fixes in transferuj backend\n  - payment.paid_on uses local TIMEZONE now as opposed to UTC\n  - changed params\n  - add post method to SuccessView and FailureView\n* Added test models factories\n* Dropped support for Django <=1.6\n\nVersion 1.7.3\n-------------\n* Refactored Dotpay\n* Moved all existing tests to test_project and added more/refactored\n* Fixed utils.import_module\n* Fixed Payu and tests (py3 support)\n* Updated docs\n\nVersion 1.7.2\n-------------\n* Updated coveragerc and travis.yml\n* Added missing mgiration for Payment.status\n\nVersion 1.7.1\n-------------\n* Added coveragerc\n* Updated README\n* Added settings.GETPAID_ORDER_MODEL\n* Added epay.dk support\n* Added initial django migration\n\nVersion 1.7.0\n-------------\n* Refactoring to support for py3 (3.4)\n* Change imports to be relative - fixes #43\n* Add USD to supported currencies in Paymill backend (thanks lauris)\n* Fix a few typos\n\nVersion 1.6.0\n-------------\n* Adding paymill backend\n* PEP 8 improvements\n* Adding support for django 1.5 in test project (+ tests)\n* Fixed issue on `utils.import_name` to allow packages without parents\n* Adding dependency to pytz for przelewy24 backend\n* Refactoring of PayU backend (xml->txt api, better logging) and adding support for non-auto payment accepting\n\nVersion 1.5.1\n-------------\n* Fixing packaging that causes errors with package installation\n\nVersion 1.5.0\n-------------\n* Adding new backend - Przelewy24.pl (thanks to IssueStand.com funding)\n* Fixing packaging package data (now using only MANIFEST.in)\n\nVersion 1.4.0\n-------------\n* Cleaned version 1.3 from minor issues before implementing new backends\n* Brazilian backend moip\n* Updated PL translation\n* Added brazilian portuguese translation\n* Storing payment external id and description in the database (warning: database migration needed!)\n* Transferuj backend can now predefine interface language when redirecting\n* POST method supported on redirect to payment\n\nVersion 1.3.0\n-------------\n* Logotypes support in new payment form\n* Fixing packaging\n\nVersion 1.2\n-----------\n* Dotpay backend added\n* Hooks for backends to accept email and user name\n* Refactoring\n\nVersion 1.1\n-----------\n* PayU backend added\n* Lots of documentation\n* Refactoring\n\nVersion 1.0\n-----------\n* First stable version\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/django-getpaid/django-getpaid",
    "keywords": "django-getpaid",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-getpaid",
    "package_url": "https://pypi.org/project/django-getpaid/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-getpaid/",
    "project_urls": {
      "Homepage": "https://github.com/django-getpaid/django-getpaid"
    },
    "release_url": "https://pypi.org/project/django-getpaid/1.8.0.1/",
    "requires_dist": [
      "django-model-utils (>=2.0)",
      "django-celery (>=3.0.11); extra == 'payu'"
    ],
    "requires_python": "",
    "summary": "Multi-broker payment processor for Django",
    "version": "1.8.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10679541,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43c5c7492942a9094f3648cb8cd6e43e119fd49269b8ed4a9f3438f74570ab27",
        "md5": "03bd414e460903f06fa11ed66ac4ce82",
        "sha256": "8655c2d3ea53709774765f20a1093a421b38d06cacd30bc3c7636062e6fc146b"
      },
      "downloads": -1,
      "filename": "django_getpaid-1.8.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "03bd414e460903f06fa11ed66ac4ce82",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 49842,
      "upload_time": "2018-07-24T17:40:38",
      "upload_time_iso_8601": "2018-07-24T17:40:38.058863Z",
      "url": "https://files.pythonhosted.org/packages/43/c5/c7492942a9094f3648cb8cd6e43e119fd49269b8ed4a9f3438f74570ab27/django_getpaid-1.8.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}