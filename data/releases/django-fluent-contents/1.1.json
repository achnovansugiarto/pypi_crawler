{
  "info": {
    "author": "Diederik van der Boor",
    "author_email": "opensource@edoburu.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.4",
      "Framework :: Django :: 1.5",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. image::  https://travis-ci.org/edoburu/django-fluent-contents.png?branch=master\n  :target: http://travis-ci.org/edoburu/django-fluent-contents\n  :alt: build-status\n\nIntroduction\n============\n\nThe *fluent_contents* module offers a widget engine to display various content on a Django page.\n\nThis engine operates similarly like Django CMS, FeinCMS or django-portlets,\nhowever, it can be used for any project, or CMS system.\n\nPage contents can be constructed with multiple \"content items\".\nYou can define your own content items, or use one the available content items out of the box.\nStandard web sites could use the bundled default content items.\nOther advanced designs (such as a web site with a magazine-like design, having many blocks at a page)\ncan be implemented quickly by defining content items for the various \"style elements\" at the page.\n\nWeb editors are able to place the \"content items\" at the page,\nhence they can fill the content of advanced layouts easily and directly in the Django admin.\nThis also applies to pages which have a \"free form\" or \"presentation slide\" design,\nthis module allows the end-user to manage and configure the designed elements at the page.\n\nBy default, the following content items are available:\n\n**Standard content:**\n\n* Text content - write rich text in a WYSIWYG editor (provided by django-wysiwyg_).\n* Markup - write content with reStructuredText, Markdown or Textile (provided by *docutils*, *Markdown* or *textile*).\n* Forms - display forms created with django-form-designer_.\n\n**Online content:**\n\n* Google Docs viewer - display a PDF or DOCX file on a page, using the Google Docs Viewer service.\n* OEmbed support - embed content from YouTube, Vimeo, SlideShare, Twitter, and more.\n* Twitter feed - display a Twitter timeline, or realtime search timeline.\n\n**For programmers:**\n\n* Code - display code snippets with highlighting (provided by *Pygments*).\n* Gist - display Gist snippets from Github.\n* IFrame - display an ``<iframe>`` on the page.\n* Raw HTML content - include jQuery snippets, or \"embed codes\" by other services.\n* Shared content - display a set of items at multiple locations.\n\n**Interactive:**\n\n* Commentsarea - display comments on a page (provided by django.contrib.comments_).\n* Disqusarea - display DISQUS comments on a page (provided by django-disqus_).\n* Form-designer link - display a django-form-designer_ form on a page.\n\nFor more details, see the documentation_ at Read The Docs.\n\n\nScreenshot\n==========\n\nThe ``PlaceholderField`` is nicely integrated in the Django admin interface:\n\n.. image:: https://github.com/edoburu/django-fluent-contents/raw/master/docs/images/admin/placeholderfieldadmin2.png\n   :width: 770px\n   :height: 562px\n   :alt: django-fluent-contents placeholder field preview\n\nSecondly, it's possible to build a CMS Page interface with the ``PlaceholderEditorAdmin``,\nwhich displays each content placeholder in a tab:\n\n.. image:: https://github.com/edoburu/django-fluent-contents/raw/master/docs/images/admin/placeholdereditoradmin1.png\n   :width: 770px\n   :height: 362px\n   :alt: django-fluent-contents placeholder editor preview\n\n\nInstallation\n============\n\nFirst install the module, preferably in a virtual environment. It can be installed from PyPI::\n\n    pip install django-fluent-contents\n\nOr the current folder can be installed::\n\n    pip install .\n\nThe dependencies of plugins are not included by default. To install those, include the plugin names as extra option::\n\n    pip install django-fluent-contents[code,disquscommentsarea,formdesignerlink,markup,oembeditem,text,twitterfeed]\n\nConfiguration\n-------------\n\nNext, create a project which uses the module::\n\n    cd ..\n    django-admin.py startproject fluentdemo\n\nIt should have the following settings::\n\n    INSTALLED_APPS += (\n        'fluent_contents',\n\n        # And optionally all plugins desired:\n        'fluent_contents.plugins.code',\n        'fluent_contents.plugins.commentsarea',\n        'fluent_contents.plugins.disquswidgets',\n        'fluent_contents.plugins.formdesignerlink',\n        'fluent_contents.plugins.gist',\n        'fluent_contents.plugins.googledocsviewer',\n        'fluent_contents.plugins.iframe',\n        'fluent_contents.plugins.markup',\n        'fluent_contents.plugins.rawhtml',\n        'fluent_contents.plugins.text',\n\n        # Some plugins need extra Django applications\n        'disqus',\n        'django.contrib.comments',\n        'django_wysiwyg',\n        'form_designer',\n    )\n\nThe database tables can be created afterwards::\n\n    ./manage.py syncdb\n\nFinally, it needs a model or application that displays the content.\nThere are two ways to include content. The most simply way, is\nadding a ``PlaceholderField`` to a model::\n\n    # models.py:\n\n    class Article(models.Model):\n        title = models.CharField(\"Title\", max_length=200)\n        slug = models.SlugField(\"Slug\", unique=True)\n        content = PlaceholderField(\"article_content\")\n\n        class Meta:\n            verbose_name = \"Article\"\n            verbose_name_plural = \"Articles\"\n\n        def __unicode__(self):\n            return self.title\n\n\n    # admin.py:\n\n    class ArticleAdmin(PlaceholderFieldAdmin):\n        pass\n\n    admin.site.register(Article, ArticleAdmin)\n\nThe most advanced combination, is using the ``PlaceholderEditorAdmin`` or ``PlaceholderEditorAdminMixin`` classes.\nThese classes are designed for CMS-style applications which multiple placeholders on a page.\nSee the provided ``example`` application for details.\n\nNOTE:\n\n    The django-fluent-pages_ application is built on top of this API, and provides a ready-to-use CMS that can be implemented with minimal configuration effort.\n    To build a custom CMS, the API documentation of the fluent_contents.admin_ module provides more details of the classes.\n\nDetails about the various settings are explained in the documentation_.\n\n\nCreating custom content items\n-----------------------------\n\nTo implement custom elements of a design - while making them editable for admins -\nthis module allows you to create custom content items.\nTake a look in the existing types at ``fluent_contents.plugins`` to see how it's being done.\n\nIt boils down to creating a package with 2 files:\n\nThe ``models.py`` file should define the fields of the content item::\n\n  from django.db import models\n  from fluent_contents.models import ContentItem\n\n  class AnnouncementBlockItem(ContentItem):\n      title = models.CharField(\"Title\", max_length=200)\n      body = models.TextField(\"Body\")\n      button_text = models.CharField(\"Text\", max_length=200)\n      button_link = models.URLField(\"URL\")\n\n      class Meta:\n          verbose_name = \"Announcement block\"\n          verbose_name_plural = \"Announcement blocks\"\n\n      def __unicode__(self):\n          return self.title\n\nThe ``content_plugins.py`` file defines the metadata and rendering::\n\n  from fluent_contents.extensions import plugin_pool, ContentPlugin\n  from .models import AnnouncementBlockItem\n\n  @plugin_pool.register\n  class AnnouncementBlockPlugin(ContentPlugin):\n     model = AnnouncementBlockItem\n     render_template = \"plugins/announcementblock.html\"\n     category = \"Simple blocks\"\n\nThe plugin can also define the admin layout, by adding fields such as a ``fieldset``, but that is all optional.\nThe template could look like::\n\n    <div class=\"announcement\">\n        <h3>{{ instance.title }}</h3>\n        <div class=\"text\">\n            {{ instance.body|linebreaks }}\n        </div>\n        <p class=\"button\"><a href=\"{{ instance.button_url }}\">{{ instance.button_text }}</a></p>\n    </div>\n\nEt, voila: web editors are now able to place an announcement items at the page\nin a very structured manner! Other content items can be created in the same way,\neither in the same Django application, or in a separate application.\n\n\nContributing\n------------\n\nThis module is designed to be generic. In case there is anything you didn't like about it,\nor think it's not flexible enough, please let us know. We'd love to improve it!\n\nIf you have any other valuable contribution, suggestion or idea,\nplease let us know as well because we will look into it.\nPull requests are welcome too. :-)\n\n\n.. _documentation: http://django-fluent-contents.readthedocs.org/\n.. _fluent_contents.admin: http://django-fluent-contents.readthedocs.org/en/latest/cms.html\n\n.. _django.contrib.comments: https://docs.djangoproject.com/en/dev/ref/contrib/comments/\n.. _django-disqus: https://github.com/arthurk/django-disqus\n.. _django-fluent-comments: https://github.com/edoburu/django-fluent-comments\n.. _django-fluent-pages: https://github.com/edoburu/django-fluent-pages\n.. _django-form-designer: https://github.com/philomat/django-form-designer.git\n.. _django-polymorphic: https://github.com/chrisglass/django_polymorphic\n.. _django-wysiwyg: https://github.com/pydanny/django-wysiwyg",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/edoburu/django-fluent-contents/zipball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edoburu/django-fluent-contents",
    "keywords": null,
    "license": "Apache 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-fluent-contents",
    "package_url": "https://pypi.org/project/django-fluent-contents/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-fluent-contents/",
    "project_urls": {
      "Download": "https://github.com/edoburu/django-fluent-contents/zipball/master",
      "Homepage": "https://github.com/edoburu/django-fluent-contents"
    },
    "release_url": "https://pypi.org/project/django-fluent-contents/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A widget engine to display various content on Django pages",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12046348,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50aeb72b50d66fed4038d2552a601406f1127d73a2791a8d560252817ae138e8",
        "md5": "ac6a7a3f9cf0ab79b51531120d4627c2",
        "sha256": "ee685314ca001ebfe96c86f9de63b4b456fa172363177d380fd131981cef75dc"
      },
      "downloads": -1,
      "filename": "django_fluent_contents-1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac6a7a3f9cf0ab79b51531120d4627c2",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 270839,
      "upload_time": "2015-12-30T13:52:00",
      "upload_time_iso_8601": "2015-12-30T13:52:00.074316Z",
      "url": "https://files.pythonhosted.org/packages/50/ae/b72b50d66fed4038d2552a601406f1127d73a2791a8d560252817ae138e8/django_fluent_contents-1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "011167a36d563f819f20db92bf60d74d6301a67fd023232e64a0f8b9f34e2970",
        "md5": "6b132fdd6e571d2f5db7e404f329972c",
        "sha256": "17677e704aead2c5bd7aa3a1f77060c47a2c31f3eeb80e1c47376eeb4753b4b6"
      },
      "downloads": -1,
      "filename": "django-fluent-contents-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6b132fdd6e571d2f5db7e404f329972c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 163353,
      "upload_time": "2015-12-30T13:51:54",
      "upload_time_iso_8601": "2015-12-30T13:51:54.288966Z",
      "url": "https://files.pythonhosted.org/packages/01/11/67a36d563f819f20db92bf60d74d6301a67fd023232e64a0f8b9f34e2970/django-fluent-contents-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}