{
  "info": {
    "author": "Aymeric Augustin",
    "author_email": "aymeric.augustin@m4x.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "The problem\n===========\n\nOn PostgreSQL, ``SERIAL`` columns aren't guaranteed to be sequential.\n\nIf a transaction inserts a row and then is rolled back, the sequence counter\nisn't rolled back for performance reasons, creating a gap in the sequence.\n\nDjango's default, implicit primary keys are backed by ``SERIAL`` columns.\nUsually they're sequential but this problem can create unexpected gaps.\n\nThis is a problem for some use cases such as accounting.\n\nThe solution\n============\n\ndjango-sequences provides just one function, ``get_next_value``, which is\ndesigned to be used as follows::\n\n    from django.db import transaction\n\n    from sequences import get_next_value\n\n    from invoices.models import Invoice\n\n    with transaction.atomic():\n        Invoice.objects.create(number=get_next_value('invoice_numbers'))\n\n**The guarantees of django-sequences only apply if you call** ``get_next_value``\n**and save its return value to the database within the same transaction!**\n\nInstallation\n============\n\nInstall django-sequences::\n\n    $ pip install django-sequences\n\nAdd it to the list of applications in your project's settings::\n\n    INSTALLED_APPS += ['sequences.apps.SequencesConfig']\n\nRun migrations::\n\n    $ django-admin migrate\n\nAPI\n===\n\n``get_next_value`` generates a gap-less sequence of integer values::\n\n    >>> get_next_value()\n    1\n    >>> get_next_value()\n    2\n    >>> get_next_value()\n    3\n\nIt supports multiple independent sequences::\n\n    >>> get_next_value('cases')\n    1\n    >>> get_next_value('cases')\n    2\n    >>> get_next_value('invoices')\n    1\n    >>> get_next_value('invoices')\n    2\n\nThe first value defaults to 1. It can be customized::\n\n    >>> get_next_value('customers', initial_value=1000)  # pro growth hacking\n\nThe ``initial_value`` parameter only matters when ``get_next_value`` is called\nfor the first time for a given sequence â€” assuming the corresponding database\ntransaction gets committed; as discussed above, if the transaction is rolled\nback, the generated value isn't consumed. It's also possible to initialize a\nsequence in a data migration and not use ``initial_value`` in actual code.\n\nDatabase transactions that call ``get_next_value`` for a given sequence are\nserialized. In other words, when you call ``get_next_value`` in a database\ntransaction, other callers which attempt to get a value from the same sequence\nwill block until the transaction completes, either with a commit or a rollback.\nYou should keep such transactions short to minimize the impact on performance.\n\nPassing ``nowait=True`` will cause ``get_next_value`` to raise an exception\ninstead of blocking. This will rarely be useful. Also it doesn't work for the\nfirst call. (Arguably this is a bug. Patches welcome.)\n\nCalls to ``get_next_value`` for different sequences don't interact with one\nanother.\n\nTo sum up, the complete signature of ``get_next_value`` is::\n\n    get_next_value(sequence_name='default', initial_value=1, nowait=False)\n\nUnder the hood, it relies on PostgreSQL's transactional integrity to guarantee\nthat each value will be returned exactly once.\n\nContributing\n============\n\nYou can run tests with::\n\n    $ make test\n\nIf you'd like to contribute, please open an issue or a pull request on GitHub!\n\nOther databases\n===============\n\n``INTEGER PRIMARY KEY AUTOINCREMENT`` fields on SQLite don't have this problem.\n\nThe author doesn't know if this problem can happens on MySQL or Oracle. If it\ndoes, then the current implementation of django-sequences should work. If you\ntest this, please open an issue on GitHub to report your findings. Note that\nMySQL won't support the ``nowait`` parameter.\n\nChangelog\n=========\n\n1.0\n---\n\n* Initial stable release.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://pypi.python.org/pypi/django-sequences",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aaugustin/django-sequences",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-sequences",
    "package_url": "https://pypi.org/project/django-sequences/",
    "platform": "all",
    "project_url": "https://pypi.org/project/django-sequences/",
    "project_urls": {
      "Download": "http://pypi.python.org/pypi/django-sequences",
      "Homepage": "https://github.com/aaugustin/django-sequences"
    },
    "release_url": "https://pypi.org/project/django-sequences/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Generate gap-less sequences of integer values.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13885487,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "132fe9d6046b0d6360c0a3f75553fdea10328e896e82069c21511542339f1d23",
        "md5": "20ee74c0aea2af0e9f4b6fd6cb33dbc9",
        "sha256": "e569c2edbdbc155a39398763b004f9629bf0375399760d3e4a66036d47de60e9"
      },
      "downloads": -1,
      "filename": "django_sequences-1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "20ee74c0aea2af0e9f4b6fd6cb33dbc9",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "requires_python": null,
      "size": 10062,
      "upload_time": "2016-01-05T20:43:44",
      "upload_time_iso_8601": "2016-01-05T20:43:44.299371Z",
      "url": "https://files.pythonhosted.org/packages/13/2f/e9d6046b0d6360c0a3f75553fdea10328e896e82069c21511542339f1d23/django_sequences-1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a0c067604093e826997da08e6a7ee57916aa882c9afdbcd41c8f08ea9332fbe",
        "md5": "ef05d6c5bdca14c4eb00bfbf702fa758",
        "sha256": "ef30255845a6cbb9d9da841b2e3ecbf9b2ddb84bbee4b666c5827fd716908cf5"
      },
      "downloads": -1,
      "filename": "django-sequences-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ef05d6c5bdca14c4eb00bfbf702fa758",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5454,
      "upload_time": "2016-01-05T20:43:31",
      "upload_time_iso_8601": "2016-01-05T20:43:31.716970Z",
      "url": "https://files.pythonhosted.org/packages/0a/0c/067604093e826997da08e6a7ee57916aa882c9afdbcd41c8f08ea9332fbe/django-sequences-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}