{
  "info": {
    "author": "Aymeric Augustin",
    "author_email": "aymeric.augustin@m4x.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "django-sequences\n################\n\nThe problem\n===========\n\nDjango's default, implicit primary keys aren't guaranteed to be sequential.\n\nIf a transaction inserts a row and then is rolled back, the sequence counter\nisn't rolled back for performance reasons, creating a gap in primary keys.\n\nThis can cause compliance issues for some use cases such as accounting.\n\nThis risk isn't well known. Since most transactions succeed, values look\nsequential. Gaps will only be revealed by audits.\n\nThe solution\n============\n\ndjango-sequences provides just one function, ``get_next_value``, which is\ndesigned to be used as follows::\n\n    from django.db import transaction\n\n    from sequences import get_next_value\n\n    from invoices.models import Invoice\n\n    with transaction.atomic():\n        Invoice.objects.create(number=get_next_value('invoice_numbers'))\n\n**The guarantees of django-sequences only apply if you call** ``get_next_value``\n**and save its return value to the database within the same transaction!**\n\nInstallation\n============\n\nInstall django-sequences::\n\n    $ pip install django-sequences\n\nAdd it to the list of applications in your project's settings::\n\n    INSTALLED_APPS += ['sequences.apps.SequencesConfig']\n\nRun migrations::\n\n    $ django-admin migrate\n\nAPI\n===\n\n``get_next_value`` generates a gap-less sequence of integer values::\n\n    >>> get_next_value()\n    1\n    >>> get_next_value()\n    2\n    >>> get_next_value()\n    3\n\nIt supports multiple independent sequences::\n\n    >>> get_next_value('cases')\n    1\n    >>> get_next_value('cases')\n    2\n    >>> get_next_value('invoices')\n    1\n    >>> get_next_value('invoices')\n    2\n\nThe first value defaults to 1. It can be customized::\n\n    >>> get_next_value('customers', initial_value=1000)  # pro growth hacking\n\nThe ``initial_value`` parameter only matters when ``get_next_value`` is called\nfor the first time for a given sequence â€” assuming the corresponding database\ntransaction gets committed; as discussed above, if the transaction is rolled\nback, the generated value isn't consumed. It's also possible to initialize a\nsequence in a data migration and not use ``initial_value`` in actual code.\n\nSequences can loop::\n\n    >>> get_next_value('seconds', initial_value=0, reset_value=60)\n\nWhen the sequence reaches ``reset_value``, it restarts at ``initial_value``.\nIn other works, it generates ``reset_value - 2``, ``reset_value - 1``,\n``initial_value``, ``initial_value + 1``, etc. In that case, each call to\n``get_next_value`` must provide ``initial_value`` and ``reset_value``.\n\nDatabase transactions that call ``get_next_value`` for a given sequence are\nserialized. In other words, when you call ``get_next_value`` in a database\ntransaction, other callers which attempt to get a value from the same sequence\nwill block until the transaction completes, either with a commit or a rollback.\nYou should keep such transactions short to minimize the impact on performance.\n\nPassing ``nowait=True`` will cause ``get_next_value`` to raise an exception\ninstead of blocking. This will rarely be useful. Also it doesn't work for the\nfirst call. (Arguably this is a bug. Patches welcome.)\n\nCalls to ``get_next_value`` for distinct sequences don't interact with one\nanother.\n\nFinally, passing ``using='...'`` allows selecting the database on which the\ncurrent sequence value is stored. When this parameter isn't provided, the\ncurrent value is stored in the default database for writing to models of the\n``sequences`` application. See below for details.\n\nTo sum up, the complete signature of ``get_next_value`` is::\n\n    get_next_value(sequence_name='default', initial_value=1, reset_value=None,\n                   *, nowait=False, using=None)\n\nUnder the hood, it relies on the database's transactional integrity to\nguarantee that each value will be returned exactly once.\n\nContributing\n============\n\nYou can run tests with::\n\n    $ make test\n\nIf you'd like to contribute, please open an issue or a pull request on GitHub!\n\nOther databases\n===============\n\n``INTEGER PRIMARY KEY AUTOINCREMENT`` fields on SQLite don't have this problem.\n\nThe author doesn't know if this problem can happens on MySQL or Oracle. If it\ndoes, then the current implementation of django-sequences should work. If you\ntest this, please open an issue on GitHub to report your findings. Note that\nMySQL won't support the ``nowait`` parameter.\n\nMultiple databases\n==================\n\nSince django-sequences relies on the database to guarantee transactional\nintegrity, the current value for a given sequence must be stored in the same\ndatabase as models containing generated values.\n\nIn a project that uses multiple databases, you must write a suitable database\nrouter to create tables for the ``sequences`` application on all databases\nstoring models containing sequential numbers.\n\nEach database has its own namespace: a sequence with the same name stored in\ntwo databases will have independent counters in each database.\n\nChangelog\n=========\n\n2.1\n---\n\n* Provide looping sequences with ``reset_value``.\n\n2.0\n---\n\n* Add support for multiple databases.\n* Add translations.\n* ``nowait`` becomes keyword-only argument.\n* Drop support for Python 2.\n\n1.0\n---\n\n* Initial stable release.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aaugustin/django-sequences",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sequences",
    "package_url": "https://pypi.org/project/django-sequences/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-sequences/",
    "project_urls": {
      "Homepage": "https://github.com/aaugustin/django-sequences"
    },
    "release_url": "https://pypi.org/project/django-sequences/2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Generate gap-less sequences of integer values.",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13885487,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a670e67b62426208d38e3d97ab737fb0c7b719cb3c5024d03383652037354729",
        "md5": "06e62ae84126898fb2f532f6e5100f3f",
        "sha256": "c672bd84288df818e19ffede4a14b890b0e22dc6258c56b005cf902c07752295"
      },
      "downloads": -1,
      "filename": "django_sequences-2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "06e62ae84126898fb2f532f6e5100f3f",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "requires_python": null,
      "size": 29645,
      "upload_time": "2017-09-09T06:28:40",
      "upload_time_iso_8601": "2017-09-09T06:28:40.532348Z",
      "url": "https://files.pythonhosted.org/packages/a6/70/e67b62426208d38e3d97ab737fb0c7b719cb3c5024d03383652037354729/django_sequences-2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b45a7e11bbc72eedc0d2a7c083bf61e8f3d6095a75202964e974acb72246736e",
        "md5": "5f2980eb4db1a4108313c3ec6e49f4cd",
        "sha256": "1d83e2bfeb81795bd80709a49aea7613045c8b0402955b298f1d36c2e86d85f4"
      },
      "downloads": -1,
      "filename": "django-sequences-2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5f2980eb4db1a4108313c3ec6e49f4cd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11327,
      "upload_time": "2017-09-09T06:28:38",
      "upload_time_iso_8601": "2017-09-09T06:28:38.510462Z",
      "url": "https://files.pythonhosted.org/packages/b4/5a/7e11bbc72eedc0d2a7c083bf61e8f3d6095a75202964e974acb72246736e/django-sequences-2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}