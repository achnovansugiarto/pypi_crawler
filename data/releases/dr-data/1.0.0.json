{
  "info": {
    "author": "Jason R Alexander",
    "author_email": "sunysidesounds@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "# Doctor Data (beta)\nThis is a beta version of this tool. Please submit any issues [here](https://github.com/sunnysidesounds/dr_data/issues)\n\n```bash\nusage: dr-data [-h] [-transplant] [-source SOURCE] [-destination DESTINATION] [-inject] [-rows ROWS] [-biopsy] [-export EXPORT] [-cleanse] [-config CONFIG]\n\nDr. Data is a database utility tool that can populate random data based on your schema or can import custom CSV data. See options below\n\noptional arguments:\n  -h, --help                    show this help message and exit\n  -transplant                  Insert one or all CSV files to table\n  -source SOURCE        Used in conjuctions with `transplant` The CSV source file or directory. if directory, csv filenames need to match table names\n  -destination DESTINATION\n                                    Used in conjuctions with `transplant` and `source`. if `source` is a file. destination TABLE is required\n  -inject                         Inserts one or many randomly regenerated rows\n  -rows ROWS               Used in conjuction with `inject`.How may rows do you want to load per table in the database, default is set in configuration\n  -biopsy                       Explicitly exports a schema and table insertion-order JSON files\n  -export EXPORT        Used in conjunction with `biopsy. The directory PATH to export the JSON files\n  -cleanse                     Truncates all the values in the database, WARNING this will delete all data!\n  -config CONFIG          configuration file or set DRDATA_CONFIG=<path> env variable\n```\n## Prerequisite\n- python 3.9.1\n- Works currently only with PostgreSQL 13+\n\n## Installation \n```bash\npip install dr-data\n````\n\n## Usage\n1. Create a `dr_data.json` file with these values and set `DRDATA_CONFIG=<path>` env variable or using `-config=<path>`  parameter\n```bash\n{\n   \"db\":{\n      \"host\":\"localhost\",\n      \"database\":\"<db_name>\",\n      \"user\":\"<db_user>\",\n      \"password\":\"<db_password>\",\n      \"port\":\"5432\"\n   },\n   \"defaults\": {\n      \"rows\": 25\n    }\n}\n```\n2. Then run one of the procedure commands (-inject, -transplant, -cleanse, -biopsy)\n\n## CLI Examples\nExample 1: `-inject` random row data into the database\n```bash\ndr-data -inject # generates a default of 25 rows\ndr-data -inject -rows=100\n```\n\nExample 2: `-transplant` directory with CSV files (multiple CSV files)\nNote: CSV columns need to be named the name as the database column names. \n```bash\ndr-data -transplant -source=/path/to/source/directory\n```\n\nExample 3: `-transplant` one CSV files (single CSV file)\nNote: CSV columns need to be named the name as the database column names.\n```bash\ndr-data -transplant -source=</path/to/source/file.csv> -destination=<table_name>\n```\n\nExample 4: `-biopsy` the database, produces a schema.json and insertion-order-schema.json files\n```bash\ndr-data -biopsy -export=</path/to/export/directory/>\n```\n\nExample 5: `-cleanse` the database of all data.\nWarning: This can't be undone.\n```bash\ndr-data -cleanse\n```\n\n## SDK Examples\nExample 1: Using `Biopsy` class\n```python\nfrom dr_data.biopsy import Biopsy\n\nconfiguration = {...}\nschema= Biopsy(configuration).execute_cmd()\n```\n\nExample 2: Using `Inject` class \n```python\nfrom dr_data.biopsy import Biopsy\nfrom dr_data.inject import Inject\n\nconfiguration = {...}\nrows = 25\nschema= Biopsy(configuration).execute_cmd()\nInject(schema, configuration).execute_cmd(rows)\n```\n\nExample 3: Using `Transplant` class (file import)\n```python\nfrom dr_data.transplant import Transplant\n\nconfiguration = {...}\nsource_file = \"/path/to/foobar.csv\"\ndestination_table = \"foobar\"\ntransplant = Transplant(configuration)\ntransplant.execute_file_cmd(source_file, destination_table)\n```\n\nExample 4: Using `Transplant` class (directory import)\n```python\nfrom dr_data.transplant import Transplant\n\nconfiguration = {...}\nsource_directory= \"/path/to/foobar\"\ntransplant = Transplant(configuration)\ntransplant.execute_directory_cmd(source_directory)\n```\n\nExample 5: Using `Randoms` class (optional usage)\n```python\nfrom dr_data.randoms import Randoms\n\nrandom_hash = Randoms.get_hash(10) # get random hash value\nrandom_datetime = Randoms.get_datetime() # get random datetime\nrandom_datetime_with_timezone = Randoms.get_datetime_with_timezone() # get random datetime with timezone\nrandom_number = Randoms.get_datetime_with_timezone() # get random number\nrandom_boolean = Randoms.get_boolean() # get random boolean\n...\n```\n\n# Development Setup\n```bash\ngit clone https://github.com/sunnysidesounds/dr_data\ncd dr_data\npython -m venv .\nvenv/bin/pip install -e .\nvenv/bin/dr-data -h\n```\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sunnysidesounds/dr_data",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dr-data",
    "package_url": "https://pypi.org/project/dr-data/",
    "platform": "any",
    "project_url": "https://pypi.org/project/dr-data/",
    "project_urls": {
      "Documentation": "https://github.com/sunnysidesounds/dr_data/blob/main/README.md",
      "Homepage": "https://github.com/sunnysidesounds/dr_data"
    },
    "release_url": "https://pypi.org/project/dr-data/1.0.0/",
    "requires_dist": [
      "importlib-metadata",
      "python-version (<3.8)",
      "faker",
      "psycopg2-binary",
      "pandas",
      "progress",
      "setuptools ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "psycopg2-binary ; extra == 'testing'",
      "testing.postgresql ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "This is a database utility tool that can populate random data based on your schema or can import custom CSV data.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12629935,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63900c2b161fa86b9ddf8c832396cb1d9cdec77ed50cffbe6aa61890a34344fd",
        "md5": "6da4c07aaa364cf9bbc9a9e219db19cc",
        "sha256": "29b4eaf9de342a6ff0f12457fc2861bc28bb9bfa2e92a38fdc90d041ad16bb41"
      },
      "downloads": -1,
      "filename": "dr_data-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6da4c07aaa364cf9bbc9a9e219db19cc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18702,
      "upload_time": "2022-01-20T06:23:19",
      "upload_time_iso_8601": "2022-01-20T06:23:19.411547Z",
      "url": "https://files.pythonhosted.org/packages/63/90/0c2b161fa86b9ddf8c832396cb1d9cdec77ed50cffbe6aa61890a34344fd/dr_data-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ab54d18cde67a6475e4a68900198d9e4e7643f84293c7f90fa8bd9a1e6be5f1",
        "md5": "7a6bd283cc922d2a5e3b889fda2ddb60",
        "sha256": "a19c66bc3bfa6f9d6de4bf95ed898cb18184e4668d685ebc69672e110b5c43c2"
      },
      "downloads": -1,
      "filename": "dr_data-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7a6bd283cc922d2a5e3b889fda2ddb60",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37361,
      "upload_time": "2022-01-20T06:23:26",
      "upload_time_iso_8601": "2022-01-20T06:23:26.163018Z",
      "url": "https://files.pythonhosted.org/packages/7a/b5/4d18cde67a6475e4a68900198d9e4e7643f84293c7f90fa8bd9a1e6be5f1/dr_data-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}