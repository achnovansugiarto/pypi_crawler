{
  "info": {
    "author": "Mario Orlandi",
    "author_email": "morlandi@brainstorm.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "======================\ndjango-query-inspector\n======================\n\n.. image:: https://badge.fury.io/py/django-query-inspector.svg\n    :target: https://badge.fury.io/py/django-query-inspector\n\nA collection of tools to:\n\n    - count and trace db queries for debugging purposes or to optimize them\n    - render a Queryset (or a list of dictionaries) in various formats\n    - export a Queryset to a spreadsheet\n    - inspect the SQL activity happening under the hood of a Django project\n    - and more ...\n\n.. contents::\n\n.. sectnum::\n\nQuick start\n-----------\n\n1. Installation::\n\n    pip install django-query-inspector\n\n2. Add \"query_inspector\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'query_inspector',\n    ]\n\n3. Add \"QueryCountMiddleware\" to your MIDDLEWARE setting like this::\n\n    MIDDLEWARE = [\n        ...\n        'query_inspector.middleware.QueryCountMiddleware',\n    ]\n\n4. Optionally, include styles in your base template::\n\n    <link href=\"{% static 'query_inspector.css' %}\" rel=\"stylesheet\" />\n\n5. Optional dependencies:\n\n    - sqlparse\n    - termcolor\n    - pygments\n    - tabulate\n    - xlsxwriter\n\nDoes it work?\n-------------\n\nRunning the unit tests from your project::\n\n    python manage.py test -v 2 query_inspector --settings=query_inspector.tests.test_settings\n\nRunning the unit tests from your local fork::\n\n    cd django-query-inspector\n    ./runtests.py\n\nor::\n\n    coverage run --source='.' runtests.py\n    coverage report\n\nQuery counting\n--------------\n\nA middleware that prints DB query counts in Django's runserver console output (only in DEBUG mode).\n\nAdapted from: `Django Querycount <https://github.com/bradmontgomery/django-querycount>`_\n\nby Brad Montgomery\n\n=========================== =============================================================================================\nSetting                     Meaning\n--------------------------- ---------------------------------------------------------------------------------------------\nIGNORE_ALL_REQUESTS         Disables query count\nIGNORE_REQUEST_PATTERNS     A list of regexp patterns to bypass matching requests\nIGNORE_SQL_PATTERNS         A list of regexp patterns to bypass matching queries\nTHRESHOLDS                  How many queries are interpreted as high or medium (and the color-coded output)\nDISPLAY_ALL                 Trace all queries (even when not duplicated)\nDISPLAY_PRETTIFIED          Use pygments and sqlparse for queries tracing\nCOLOR_FORMATTER_STYLE       Color formatter style for Pygments\nRESPONSE_HEADER             Custom response header that contains the total number of queries executed (None = disabled)\nDISPLAY_DUPLICATES          Controls how the most common duplicate queries are displayed (None = displayed)\n=========================== =============================================================================================\n\nDefault settings (to be overridden in projects' settings)::\n\n    QUERYCOUNT = {\n        'IGNORE_ALL_REQUESTS': True,\n        'IGNORE_REQUEST_PATTERNS': [],\n        'IGNORE_SQL_PATTERNS': [],\n        'THRESHOLDS': {\n            'MEDIUM': 50,\n            'HIGH': 200,\n            'MIN_TIME_TO_LOG': 0,\n            'MIN_QUERY_COUNT_TO_LOG': 0\n        },\n        'DISPLAY_ALL': True,\n        'DISPLAY_PRETTIFIED': True,\n        'COLOR_FORMATTER_STYLE': 'monokai',\n        'RESPONSE_HEADER': 'X-DjangoQueryCount-Count',\n        'DISPLAY_DUPLICATES': 0,\n    }\n\n\n@query_debugger\n---------------\n\nDecorator to check how many queries are executed when rendering a specific view.\n\nAdapted from:\n\n`Django select_related and prefetch_related: Checking how many queries reduce using these methods with an example <https://medium.com/better-programming/django-select-related-and-prefetch-related-f23043fd635d>`_\n\nby Goutom Roy\n\nExamples::\n\n    from query_inspector import query_debugger\n\n    @query_debugger\n    def tracks_list_view(request):\n        ...\n\n    class TrackAjaxDatatableView(AjaxDatatableView):\n\n        ...\n\n        @query_debugger\n        def dispatch(self, request, *args, **kwargs):\n            ...\n\nResult:\n\n.. figure:: screenshots/query_debugger.png\n\n    query_debugger\n\nTracing queries in real-time\n----------------------------\n\nOn rare occasions, you might want to trace queries immediately as they happen\nwhile stepping through the code.\n\nFor that aim, configure the 'django.db.backends' logger in your settings;\nto print formatted and colored queries, provided pygments and sqlparse have been\ninstalled, use the **query_inspector.log.QueryLogHandler** handler::\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'handlers': {\n            'db_console': {\n                'level': 'DEBUG',\n                #'class': 'logging.StreamHandler',\n                'class': 'query_inspector.log.QueryLogHandler',\n            },\n        },\n        'loggers': {\n            'django.db.backends': {\n                'handlers': ['db_console', ],\n                'level': 'DEBUG',\n            },\n        },\n    }\n\nInspecting queries in a unit test\n---------------------------------\n\nThis is not obvious, since unit tests are run with DEBUG disabled.\n\nDjango provides a convenient **CaptureQueriesContext** for this:\n\n.. code:: python\n\n    import pprint\n    from django import db\n    from django.test.utils import CaptureQueriesContext\n    from query_inspector import prettyprint_query\n\n    def text_whatever(self):\n\n        db.reset_queries()\n        with CaptureQueriesContext(db.connection) as context:\n\n            ... do your stuff ...\n\n        num_queries = context.final_queries - context.initial_queries\n        print('num_queries: %d' % num_queries)\n        #pprint.pprint(context.captured_queries)\n\n        for row in context.captured_queries:\n            prettyprint_query(row['sql'])\n            print('time: ' + row['time'])\n\n\nMore examples are available here:\n\n`Python django.test.utils.CaptureQueriesContext() Examples <https://www.programcreek.com/python/example/74788/django.test.utils.CaptureQueriesContext>`_\n\nTracing\n-------\n\nSome helper functions are available to print formatted and colored text in the console.\n\nOptional requirements:\n\n    - sqlparse\n    - termcolor\n    - pygments\n    - tabulate\n\nFunctions:\n\ndef trace(message, color='yellow', on_color=None, attrs=None, prompt='', prettify=False)\n    Display 'message', optionally preceed by 'prompt';\n    If 'prettify' is True, format message with pprint\n\n    Color support provided by: https://pypi.org/project/termcolor/\n\ndef prettyprint_query(query, colorize=True, prettify=True)\n    Display the specified SQL statement\n\ndef prettyprint_queryset(qs, colorize=True, prettify=True)\n    Display the SQL statement implied by the given queryset\n\ndef trace_func(fn):\n    Decorator to detect: function call, input parameters and return value\n\ndef qsdump( * fields, queryset, max_rows=None)\n    See below\n\nResults:\n\n.. figure:: screenshots/prettyprint_queryset.png\n\n    prettyprint_queryset\n\n.. figure:: screenshots/trace_func.png\n\n    trace_func\n\n\nInspect a queryset with qsdump\n------------------------------\n\nWith qsdump you can:\n\n- display the formatted SQL statement\n- display the content of the queryset\n\nParameters:\n\n    fields:\n        one or more field names; '*' means 'all'\n\n    queryset:\n        the queryset to be inspected\n\n    max_rows:\n        optionally limit the numer of rows\n\n    render_with_tabulate=True\n        use \"tabulate\" when available\n\n    title=\"\"\n        optional title\n\nExample::\n\n    qsdump('*', queryset=tracks, max_rows=10)\n\n|\n\n.. figure:: screenshots/qsdump.png\n\n    qsdump\n\n\nQueryset rendering\n------------------\n\nA few templatetags are available to render either a queryset or a list of dictionaries::\n\n    def render_queryset_as_table(* fields, queryset, options={})\n    def render_queryset_as_csv(* fields, queryset, options={})\n    def render_queryset_as_text(* fields, queryset, options={})\n\n\nSample usage::\n\n    {% load static query_inspector_tags %}\n\n    <link href=\"{% static 'query_inspector.css' %}\" rel=\"stylesheet\" />\n\n    <table class=\"simpletable smarttable\">\n        {% render_queryset_as_table \"id\" \"last_name|Cognome\" \"first_name|Nome\" ... queryset=operatori %}\n    </table>\n\n\nParameters:\n\nqueryset: a queryset of a list of dictionaries with data to rendered\n\noptions:\n    - max_rows: max n. of rows to be rendered (None=all)\n    - format_date:  date formatting string; see:\n        + https://docs.djangoproject.com/en/dev/ref/settings/#date-format\n        + https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n    - add_totals: computes column totals and append results as bottom row\n\nfields: a list of field specifiers, espressed as:\n    - \"fieldname\", or\n    - \"fieldname|title\", or\n    - \"fieldname|title|extra_classes\"\n\n    Field \"extra classes\" with special styles:\n        - \"percentage\": render column as %\n        - \"enhanced\"\n        - \"debug-only\"\n\n.. figure:: screenshots/render_queryset.png\n\n    render_queryset\n\nMore templatetags::\n\n    def pdb(element)\n    def ipdb(element)\n    def format_datetime(dt, include_time=True, include_seconds=False, exclude_date=False)\n    def format_date(dt)\n    def format_datetime_with_seconds(dt)\n    def format_time(t, include_seconds=False)\n    def format_time_with_seconds(t)\n    def format_timedelta(td_object, include_seconds=True)\n    def format_timediff(t1, t2, include_seconds=True)\n    def timeformat_seconds(seconds)\n    def timeformat(seconds)\n    # def format_number(value, decimals, grouping )\n    def queryset_as_json(qs)\n    def object_as_dict(instance, fields=None, exclude=None)\n    def object_as_json(instance, fields=None, exclude=None, indent=0)\n\nCustom rendering\n----------------\n\nFor greated control of the final rendering, you can retrieve headers and data rows separately (as lists)\nusing:\n\n\n    def render_queryset_as_table(* fields, queryset, options={})\n\nFor example, the equivalent of:\n\n.. code:: python\n\n        print(render_queryset_as_text(*fields, queryset=queryset, options=options))\n\ncan be reproduced as follows:\n\n.. code:: python\n\n        headers, rows = render_queryset_as_data(*fields, queryset=queryset, options=options)\n\n        print('|'.join(headers))\n        for row in rows:\n            print('|'.join(row))\n        print(\"\")\n\nDownload the queryset as CSV or Excel file (xlsx)\n-------------------------------------------------\n\nFor historical reasons, we provide two different approaches to export the queryset as a spreadsheet:\n\n1) with the class SpreadsheetQuerysetExporter (see `Exporters`_ below)\n\n2) parsing the queryset with the aid of `render_queryset_as_table`\n\nThe first requires a proper Queryset, while the second should work with either a Queryset\nor a list of dictionares.\n\nIn both cases, two helper view functions are available to build the HTTP response\nrequired for attachment download::\n\n    export_any_queryset(request, queryset, filename, excluded_fields=[], included_fields=[], csv_field_delimiter = \";\")\n\n    export_any_dataset(request, *fields, queryset, filename, csv_field_delimiter = \";\")\n\nThe helper function normalized_export_filename(title, extension) might be used\nto build filenames consistently.\n\nSample usage:\n\n.. code:: python\n\n    from django.utils import timezone\n    from query_inspector.views import normalized_export_filename\n    from query_inspector.views import export_any_dataset\n\n\n    def export_tracks_queryset(request, file_format='csv'):\n        queryset = Track.objects.select_related('album', 'album__artist', )\n        filename = normalized_export_filename('tracks', file_format)\n        return export_any_queryset(\n            request,\n            queryset,\n            filename,\n            excluded_fields=[],\n            included_fields=[],\n            csv_field_delimiter = \";\"\n        )\n\n\n    def export_tracks_dataset(request, file_format='csv'):\n        queryset = Track.objects.select_related('album', 'album__artist', )\n        filename = '%s_%s.%s' % (\n            timezone.localtime().strftime('%Y-%m-%d_%H-%M-%S'),\n            \"tracks\",\n            file_format,\n        )\n        fields = [\n            \"id\",\n            \"name|Track\",\n            \"album|Album\",\n        ]\n\n        return export_any_dataset(request, *fields, queryset=queryset, filename=filename)\n\nthen in your template:\n\n.. code:: html\n\n    <div style=\"text-align: right;\">\n        <div class=\"toolbar\">\n            <label>Export Tracks queryset:</label>\n            <a href=\"/tracks/download_queryset/xlsx/\" class=\"button\">Download (Excel)</a>\n            <a href=\"/tracks/download_queryset/csv/\" class=\"button\">Download (CSV)</a>\n        </div>\n        <br />\n        <div class=\"toolbar\">\n            <label>Export Tracks dataset:</label>\n            <a href=\"/tracks/download_dataset/xlsx/\" class=\"button\">Download (Excel)</a>\n            <a href=\"/tracks/download_dataset/csv/\" class=\"button\">Download (CSV)</a>\n        </div>\n    </div>\n\nwhere:\n\n.. code:: python\n\n    urlpatterns = [\n        ...\n        path('tracks/download_queryset/csv/', views.export_tracks_queryset, {'file_format': 'csv', }),\n        path('tracks/download_queryset/xlsx/', views.export_tracks_queryset, {'file_format': 'xlsx', }),\n        path('tracks/download_dataset/csv/', views.export_tracks_dataset, {'file_format': 'csv', }),\n        path('tracks/download_dataset/xlsx/', views.export_tracks_dataset, {'file_format': 'xlsx', }),\n        ...\n    ]\n\n\nGeneric helpers\n---------------\n\ndef get_object_by_uuid_or_404(model, uuid_pk)\n\n    Calls get_object_or_404(model, pk=uuid_pk)\n    but also prevents \"badly formed hexadecimal UUID string\" unhandled exception\n\ndef prettify_json(data)\n\n    Given a JSON string, returns it as a safe formatted HTML\n    Sample usage in Model::\n\n        def summary_prettified(self):\n            return prettify_json(self.summary)\n\n    then add it to the list of readonly_fields in the ModelAdmin\n\ndef cleanup_queryset(queryset)\n\n    Remove multiple joins on the same table, if any\n\n    WARNING: can alter the origin queryset order\n\nExporters\n---------\n\nclass XslxFile(object)\n    XSLX writer\n\n    Requires: xlsxwriter\n\ndef open_xlsx_file(filepath, mode=\"rb\")\n    Utility to open an archive supporting the \"with\" statement\n\nSample usage::\n\n    with open_xlsx_file(filepath) as writer:\n        self.export_queryset(writer, fields, queryset)\n    assert writer.is_closed()\n\nclass SpreadsheetQuerysetExporter(object)\n    Helper class to export a queryset to a spreadsheet.\n\nSample usage::\n\n    writer = csv.writer(output, delimiter=field_delimiter, quoting=csv.QUOTE_MINIMAL)\n    exporter = SpreadsheetQuerysetExporter(writer, file_format='csv')\n    exporter.export_queryset(\n        queryset,\n        included_fields=[\n            'id',\n            'description',\n            'category__id',\n            'created_by__id',\n        ]\n    )\n\nSee also: `Download the queryset as CSV or Excel file (xlsx)`_\n\nHelper management commands\n--------------------------\n\nA few management commands are provided to:\n\n    - quickly download database and/or media file from a remote project's instance\n    - save/restore a backup copy of database and/or media files to/from a local backup folder\n\nDatabase actions require Postrgresql; downloading from remote instance requires\nread access via SSH.\n\nYou're advised to double-check implied actions by dry-running these commands\nbefore proceeding.\n\n**sitecopy: Syncs database and media files for local project from a remote instance**\n\nSettings::\n\n    REMOTE_HOST_DEFAULT = getattr(settings, 'SITECOPY_REMOTE_HOST_DEFAULT', '<REMOTE_HOST>')\n    PROJECT = getattr(settings, 'SITECOPY_PROJECT', '<PROJECT>')\n    SOURCE_MEDIA_FOLDER = getattr(settings, 'SITECOPY_SOURCE_MEDIA_FOLDER', '/home/%s/public/media/' % PROJECT)\n\nUsage::\n\n    usage: manage.py sitecopy [-h] [--dry-run] [--quiet] [--host HOST] [-v {0,1,2,3}] [--settings SETTINGS]\n\n    Syncs database and media files for project \"gallery\" from remote server \"gallery.brainstorm.it\"\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --dry-run, -d         Dry run (simulate actions)\n      --quiet, -q           do not require user confirmation before executing commands\n      --host HOST           Default: \"gallery.brainstorm.it\"\n      -v {0,1,2,3}, --verbosity {0,1,2,3}\n                            Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output\n      --settings SETTINGS   The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the\n                            DJANGO_SETTINGS_MODULE environment variable will be used.\n\n\n**dump_local_data: Dump local db and media for backup purposes (and optionally remove old backup files)**\n\nSettings::\n\n    DUMP_LOCAL_DATA_TARGET_FOLDER = getattr(settings, 'DUMP_LOCAL_DATA_TARGET_FOLDER', os.path.join(settings.BASE_DIR, '..', 'dumps', 'localhost'))\n\nUsage::\n\n    usage: manage.py dump_local_data [-h] [--target target] [--dry-run] [--max-age MAX_AGE] [--no-gzip] [--legacy]\n                                     [-v {0,1,2,3}] [--settings SETTINGS]\n\n    Dump local db and media for backup purposes (and optionally remove old backup files)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --target target, -t target\n                            choices: db, media, all; default: db\n      --dry-run, -d         Dry run (simulation)\n      --max-age MAX_AGE, -m MAX_AGE\n                            If > 0, remove backup files old \"MAX_AGE days\" or more\n      --no-gzip             Do not compress result\n      --legacy              use legacy Postgresql command syntax\n      -v {0,1,2,3}, --verbosity {0,1,2,3}\n                            Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output\n      --settings SETTINGS   The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the\n                            DJANGO_SETTINGS_MODULE environment variable will be used.\n\n\n**restore_from_local_data: Restore db and media from local backups**\n\nSettings::\n\n    DUMP_LOCAL_DATA_TARGET_FOLDER = getattr(settings, 'DUMP_LOCAL_DATA_TARGET_FOLDER', os.path.join(settings.BASE_DIR, '..', 'dumps', 'localhost'))\n\nUsage::\n\n    usage: manage.py restore_from_local_data [-h] [--target target] [--dry-run] [--no-gzip] [--source-subfolder SOURCE_SUBFOLDER]\n                                             [-v {0,1,2,3}] [--settings SETTINGS]\n                                             prefix\n\n    Restore db and media from local backups; source folder is \"/Volumes/VMS3/django_storage/gallery/dumps/localhost\"\n\n    positional arguments:\n      prefix                Initial substring to match the filename to restore from; provide enough characters to match a single file\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --target target, -t target\n                            choices: db, media, all; default: db\n      --dry-run, -d         Dry run (simulation)\n      --no-gzip             Do not compress result\n      --source-subfolder SOURCE_SUBFOLDER, -s SOURCE_SUBFOLDER\n                            replaces \"localhost\" in DUMP_LOCAL_DATA_TARGET_FOLDER\n      -v {0,1,2,3}, --verbosity {0,1,2,3}\n                            Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output\n      --settings SETTINGS   The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the\n                            DJANGO_SETTINGS_MODULE environment variable will be used.\n\n\n\n\nHistory\n=======\n\nv1.0.5\n------\n* \"dump_local_data\" management command now supports sqlite and Windows platform\n\nv1.0.4\n------\n* fix syntax error due to wrong indentation\n\nv1.0.3\n------\n* render_value_as_text() optionally preserves numeric formats\n\nv1.0.2\n------\n* use apply_autofit() in export_any_queryset()\n\nv1.0.1\n------\n* fix unprettified duplicate_queries dump\n\nv1.0.0\n------\n* fix format_datetime\n\nv0.0.6\n------\n* normalized_export_filename() helper\n* improved documentation\n\nv0.0.5\n------\n* Tracing queries in real-time\n* Inspecting queries in a unit test\n* Helper management commands\n\nv0.0.4\n------\n* render_queryset_as_data added for greated control of the final rendering\n* qsdump supports tabulate\n* download the queryset as a spreadsheet\n\nv0.0.3\n------\n* querycounter middleware\n* query_debugger decorator\n* tracing helpers\n* templetags helpers\n* export a Queryset to a spreadsheet\n\nv0.0.2\n------\n* unit tests reorganized\n\nv0.0.1\n------\n* Initial setup\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/morlandi/django-query-inspector",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-query-inspector",
    "package_url": "https://pypi.org/project/django-query-inspector/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-query-inspector/",
    "project_urls": {
      "Homepage": "https://github.com/morlandi/django-query-inspector"
    },
    "release_url": "https://pypi.org/project/django-query-inspector/1.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A collection of tools to render, export and inspect Django Querysets.",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17336609,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8505ee4fef10e4f96d72c5293a64fc7f2e4f4c79cc84b5512c78fb1bd8f96b4e",
        "md5": "76c15376795c6bb4b3d4f0a10cccaab1",
        "sha256": "68b8ac42ccdd50cb7a8b3455105a75433ba8accc11a7381568e52565481dd7d2"
      },
      "downloads": -1,
      "filename": "django_query_inspector-1.0.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76c15376795c6bb4b3d4f0a10cccaab1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 43140,
      "upload_time": "2021-02-15T09:01:27",
      "upload_time_iso_8601": "2021-02-15T09:01:27.340328Z",
      "url": "https://files.pythonhosted.org/packages/85/05/ee4fef10e4f96d72c5293a64fc7f2e4f4c79cc84b5512c78fb1bd8f96b4e/django_query_inspector-1.0.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}