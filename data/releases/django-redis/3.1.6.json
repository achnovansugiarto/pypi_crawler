{
  "info": {
    "author": "Andrei Antoukh",
    "author_email": "niwi@niwi.be",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "==============================\nRedis cache backend for Django\n==============================\n\nFull featured redis cache backend for Django.\n\n**NOTE**: The 3.0 version has many changes in the code, and may have regressiones. If you want a version more stable and proven, use the 2.x branch\n\n\nGeneric description\n-------------------\n\nRedis cache allows you to use either a TCP connection or Unix domain\nsocket to connect to your redis server.  Using a TCP connection is useful for\nwhen you have your redis server separate from your app server and/or within\na distributed environment.  Unix domain sockets are useful if you have your\nredis server and application running on the same machine and want the fastest\npossible connection.\n\nYou can specify (optionally) what parser class you want redis-py to use\nwhen parsing messages from the redis server.  redis-py will pick the best\nparser for you implicitly, but using the ``PARSER_CLASS`` setting gives you\ncontrol and the option to roll your own parser class if you are so bold.\n\nThis cache backend requires the `redis-py`_ python client library for\ncommunicating with the Redis server.\n\n\nFeatures:\n---------\n\n* In active development.\n* Sharding supported in a single package.\n* Complete battery of tests (accepting improvements).\n* Used in production environments on several projects.\n* Can set keys with infinite timeout: ``cache.set('key', 'value', timeout=0)``\n* Pluggable clients.\n* Python3 support with same codebase.\n* Same behavior as memcached backend with connection exceptions.\n* Supports Django: 1.3, 1.4 and 1.5\n* You can take advantage of the connection pool to directly access to the connection object of redis.\n\n\nFuture plans/In developement\n----------------------------\n\n* Auto failover\n* Master-Slave pluggable client.\n\n\nComing from ``django-redis-cache``\n----------------------------------\n\nCurrently, for django versions ``>1.3``, migration is very easy, since there is no significant difference in connection APIs.\nThe only point is the connection string that since version 3.0 has changed slightly. You can look at the differences in the later sections.\n\n\nHow to install\n--------------\n\nRun ``python setup.py install`` to install,\nor place ``redis_cache`` on your Python path.\n\nYou can also install it with: ``pip install django-redis``\n\n\nUsage of cache backend\n----------------------\n\nTo start using ``django-redis``, you must change your django cache settings. ``django-redis`` implements the standard interface for django cache backends.\n\nWith ``django-redis==3.0`` has introduced certain backwards incompatible changes, in part of redis connection settings (connection string).\nThe ``LOCATION`` attr string must be have always three colons instead of two.\n\nOld way (django-redis < 3.0):\n\n.. code-block:: python\n\n    CACHES = {\n        \"default\": {\n            #...\n            \"LOCATION\": \"ip:port\",\n            \"OPTIONS\": {\n                \"DB\": 1\n            }\n        }\n    }\n\nNew way:\n\n.. code-block:: python\n\n    CACHES = {\n        \"default\": {\n            #...\n            \"LOCATION\": \"ip:port:db\",\n        }\n    }\n\n\nThis is the complete example using a tcp connection:\n\n.. code-block:: python\n\n    CACHES = {\n        \"default\": {\n            \"BACKEND\": \"redis_cache.cache.RedisCache\",\n            \"LOCATION\": \"127.0.0.1:6379:1\",\n            \"OPTIONS\": {\n                \"CLIENT_CLASS\": \"redis_cache.client.DefaultClient\",\n            }\n        }\n    }\n\n\nAnd this is a complete example using unix sockets:\n\n.. code-block:: python\n\n    # When using unix domain sockets\n    # Note: ``LOCATION`` needs to be the same as the ``unixsocket`` setting\n    # in your redis.conf\n    CACHES = {\n        'default': {\n            'BACKEND': 'redis_cache.cache.RedisCache',\n            'LOCATION': 'unix:/path/to/socket/file.sock:1',\n            'OPTIONS': {\n                'PASSWORD': 'foopassword',\n                'PICKLE_VERSION': -1,   # default\n                'PARSER_CLASS': 'redis.connection.HiredisParser'\n                'CLIENT_CLASS': 'redis_cache.client.DefaultClient',\n            },\n        },\n    }\n\n\nOptionally, with ``PARSER_CLASS=\"redis.connection.HiredisParser\"`` you can set hiredis parser.\n\n\nHow to use client-side sharding pluggable client?\n-------------------------------------------------\n\nThe configuration is same as a default with unique diference: the ``LOCATION`` attr must\nbe a list of connection strings.\n\n\nSome example:\n\n.. code-block:: python\n\n    CACHES = {\n        \"default\": {\n            \"BACKEND\": \"redis_cache.cache.RedisCache\",\n            \"LOCATION\": [\n                \"127.0.0.1:6379:1\",\n                \"127.0.0.1:6379:2\",\n            ],\n            \"OPTIONS\": {\n                \"CLIENT_CLASS\": \"redis_cache.client.ShardClient\",\n            }\n        }\n    }\n\n\nExtra methods added by ``django-redis``\n---------------------------------------\n\n``django-redis`` provides 2 additional methods to the standard django-cache api interface:\n\n* ``cache.keys(wildcard_pattern)`` - Add abilite to retrieve a list of keys with wildcard pattern.\n* ``cache.delete_pattern(wildcard_pattern)`` - Same as ``keys``, but this delete all keys matching the wildcard pattern.\n\n\nExample:\n\n.. code-block:: python\n\n    from django.core.cache import cache\n    # this returns all keys starts with ``session_``\n    result = cache.keys(\"session_*\")\n\n    # delete all keys stats with ``session_``\n    cache.delete_pattern(\"session_*\")\n\n\n``django-redis`` also provides an additional parameter to set method: ``nx``. If set to ``True`` django-redis will use\nsetnx instead of set. ``timeout`` is still suported and setting it will result in a call to expire if the key was set.\n\n\nExample:\n\n.. code-block:: python\n\n    >>> from django.core.cache import cache\n    >>> cache.set(\"key\", \"value1\", nx=True)\n    True\n    >>> cache.set(\"key\", \"value2\", nx=True)\n    False\n    >>> cache.get(\"key\")\n    \"value1\"\n\n\nExtra settings added by django-redis\n------------------------------------\n\n.. versionadded:: 3.0\n\nAfter django-redis, v3.0,\n\nAfter version 3.0, changed behavior related to connection failure exceptions. Now, the behavior is identical to memcached.\nIf redis is offline, the operations with cache do not throw exception and just return None.\n\nTo return to the previous behavior (if redis is offline, the cache operations throw an exception),\nput ``DJANGO_REDIS_IGNORE_EXCEPTIONS`` setting value to False.\n\n\nAccess to raw redis connection\n------------------------------\n\nAnd sometimes, our application requires direct access to redis, besides the standard cache.\n\nInstead of repeating the code 2 times and create multiple connection pool, ``django-redis`` exposes a simple API to access\nthe redis client directly, bypassing the cache API. This allows an application that needs the cache API and direct access to redis,\nhave everything in one.\n\nExample:\n\n.. code-block:: python\n\n    >>> from redis_cache import get_redis_connection\n    >>> con = get_redis_connection('default')\n    >>> con\n    <redis.client.Redis object at 0x2dc4510>\n\n\n**NOTE**: not all pluggable clients supports this feature. The simple example is a ShardClient, this does not supports\naccess to raw redis connection.\n\n.. _redis-py: http://github.com/andymccurdy/redis-py/\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/niwibe/django-redis",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-redis",
    "package_url": "https://pypi.org/project/django-redis/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-redis/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/niwibe/django-redis"
    },
    "release_url": "https://pypi.org/project/django-redis/3.1.6/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Full featured redis cache backend for Django.",
    "version": "3.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12382135,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f4c444cc0f2b29eb07dccbcb9fe983fd03a26eb10a1be06ec946ddb26a955cc",
        "md5": "802dc83128939537fe45e12e4a215439",
        "sha256": "ec3b134af056f35fbaab1af34b3d2197d5d2fbfcd7a0bc9506f76a9327ea64ad"
      },
      "downloads": -1,
      "filename": "django-redis-3.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "802dc83128939537fe45e12e4a215439",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 46550,
      "upload_time": "2013-02-02T19:12:58",
      "upload_time_iso_8601": "2013-02-02T19:12:58.265737Z",
      "url": "https://files.pythonhosted.org/packages/1f/4c/444cc0f2b29eb07dccbcb9fe983fd03a26eb10a1be06ec946ddb26a955cc/django-redis-3.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}