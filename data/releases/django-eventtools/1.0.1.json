{
  "info": {
    "author": "Greg Brown",
    "author_email": "greg@gregbrown.co.nz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "django-eventtools is a lightweight library designed to handle repeating\nand one-off event occurrences for display on a website.\n\n`Circle\nCI <https://circleci.com/gh/gregplaysguitar/django-eventtools>`__\n`codecov <https://codecov.io/gh/gregplaysguitar/django-eventtools>`__\n`Latest Version <https://pypi.python.org/pypi/django-eventtools/>`__\n\nInstallation\n------------\n\nDownload the source from https://pypi.python.org/pypi/django-eventtools/\nand run ``python setup.py install``, or:\n\n::\n\n   > pip install django-eventtools\n\nDjango 1.8 or higher is required.\n\nSetup\n-----\n\nGiven the following models:\n\n.. code:: python\n\n   from django.db import models\n\n   from eventtools.models import BaseEvent, BaseOccurrence\n\n\n   class MyEvent(BaseEvent):\n       title = models.CharField(max_length=100)\n\n\n   class MyOccurrence(BaseOccurrence):\n       event = models.ForeignKey(MyEvent)\n\nUsage\n-----\n\nCreate a sample event & occurrences\n\n::\n\n   >>> from datetime import datetime\n   >>> from myapp.models import MyEvent\n   >>> event = MyEvent.objects.create(title='Test event')\n   >>> once_off = MyOccurrence.objects.create(\n           event=event,\n           start=datetime(2016, 1, 1, 12, 0),\n           end=datetime(2016, 1, 1, 2, 0))\n   >>> christmas = MyOccurrence.objects.create(\n           event=event,\n           start=datetime(2015, 12, 25, 7, 0),\n           end=datetime(2015, 12, 25, 22, 0),\n           repeat='RRULE:FREQ=YEARLY')\n   >>> daily = MyOccurrence.objects.create(\n           event=event,\n           start=datetime(2016, 1, 1, 7, 0),\n           end=datetime(2016, 1, 1, 8, 0),\n           repeat='RRULE:FREQ=DAILY')\n\nEvent and Occurrence instances, and their associated querysets, all\nsupport the ``all_occurrences`` method, which takes two optional\narguments - ``from_date`` and ``to_date``, which may be dates or\ndatetimes. ``from_date`` and ``to_date`` default to ``None``. The method\nreturns a python generator yielding tuples in the format\n``(start, end, instance)`` - for example:\n\n::\n\n   >>> MyEvent.objects.all().all_occurrences()\n   >>> event.all_occurrences(from_date=datetime(2015, 1, 1, 10, 0))\n   >>> event.occurrence_set.all().all_occurrences(to_date=date(2016, 1, 1))\n   >>> occurrence.all_occurrences(from_date=date(2016, 1, 1),\n                                  to_date=date(2016, 12, 31))\n\n``instance`` is an instance of the corresponding BaseOccurrence\nsubclass.\n\nA ``next_occurrence`` method is also provided, taking the same\narguments, but returning a single occurrence tuple.\n\n::\n\n   >>> event.next_occurrence()\n   >>> event.next_occurrence(from_date=date(2016, 1, 1))\n\nThe method ``first_occurrence`` also returns a single occurrence tuple,\nbut takes no arguments.\n\nQueryset filtering\n~~~~~~~~~~~~~~~~~~\n\nEvent and Occurrence querysets can be filtered, but due to uncertainty\nwith repetitions, ``from_date`` filtering is only an approximation\n(whereas ``to_date`` filtering is accurate). If you need a queryset\nfiltered exactly, pass ``exact=True`` - this will filter using generated\noccurrences but still return a queryset - but be careful with this as it\nmay be very slow and/or CPU-hungry. For example\n\n::\n\n   >>> MyEvent.objects.for_period(from_date=date(2015, 1, 1),\n                                to_date=date(2015, 12, 31))\n   >>> event.occurrence_set.for_period(from_date=date(2015, 1, 1), exact=True)\n\nSorting querysets\n~~~~~~~~~~~~~~~~~\n\nEvent and Occurrence querysets can also be sorted by their next\noccurrence using the ``sort_by_next`` method. By default this sorts\ninstances by their first occurrence; the optional ``from_date`` argument\nwill sort by the next occurrence after ``from_date``. For example\n\n::\n\n   >>> MyEvent.objects.all().sort_by_next()\n   >>> event.occurrence_set.for_period(from_date=date(2015, 1, 1)) \\\n   >>>      .sort_by_next(date(2015, 1, 1))\n\nNote that this method returns a sorted list, not a queryset.\n\nCustom repeat intervals\n-----------------------\n\nOccurrences can repeat using any interval that can be expressed as an\n`rrulestr <https://labix.org/python-dateutil#head-e987b581aebacf25c7276d3e9214385a12a091f2>`__.\nTo customise the available options, set ``EVENTTOOLS_REPEAT_CHOICES`` in\nyour django settings. The default value is\n\n.. code:: python\n\n   EVENTTOOLS_REPEAT_CHOICES = (\n       (\"RRULE:FREQ=DAILY\", 'Daily'),\n       (\"RRULE:FREQ=WEEKLY\", 'Weekly'),\n       (\"RRULE:FREQ=MONTHLY\", 'Monthly'),\n       (\"RRULE:FREQ=YEARLY\", 'Yearly'),\n   )\n\nSet ``EVENTTOOLS_REPEAT_CHOICES = None`` to make repeat a plain-text\nfield.\n\nOccurrence cancellations or modifications\n-----------------------------------------\n\nCancelling or modifying a single occurrence repetition is not currently\nsupported, but can be implemented by overriding a couple of methods. For\nexample, the following allows cancellations or one-off modifications to\nthe start time of a repetition:\n\n.. code:: python\n\n   from eventtools.models import (BaseEvent, BaseOccurrence, default_naive)\n   from django.db import models\n\n\n   class MyEvent(BaseEvent):\n       pass\n\n\n   class MyEventOccurrence(BaseOccurrence):\n       event = models.ForeignKey(MyEvent)\n       overrides = models.ManyToManyField('MyEventOccurrenceOverride', blank=True)\n\n       def get_repeater(self):\n           rule = super().get_repeater()  # gets rruleset from parent method\n           ruleset.rrule(rule)\n           for override in self.overrides.all():\n               ruleset.exdate(default_naive(override.start))  # remove occurrence\n               if override.modified_start:  # reschedule occurrence if defined\n                   ruleset.rdate(default_naive(override.modified_start))\n           return ruleset\n\n\n   class MyEventOccurrenceOverride(models.Model):\n       start = models.DateTimeField()  # must match targeted repetition exactly\n       # new start, leave blank to cancel\n       modified_start = models.DateTimeField(blank=True, null=True)  \n\nNote that start times must match exactly, so if the MyEventOccurrence\nstart is changed, any previously-matching overrides will no longer be\napplied.\n\nRunning tests\n-------------\n\nUse tox (https://pypi.python.org/pypi/tox):\n\n::\n\n   > pip install tox\n   > cd path-to/django-eventtools\n   > tox",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gregplaysguitar/django-eventtools",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-eventtools",
    "package_url": "https://pypi.org/project/django-eventtools/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-eventtools/",
    "project_urls": {
      "Homepage": "https://github.com/gregplaysguitar/django-eventtools"
    },
    "release_url": "https://pypi.org/project/django-eventtools/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Recurring event tools for django",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9079834,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50d93123bc4eb20856b8f704d3909d8adb11660c7326cd30b31ecada54c01ead",
        "md5": "d5f8c7aaac30b147eaa99eb6be111ff6",
        "sha256": "b1039d3842fc6924e6638fbe419d86ad640124faad0ff584ff5081ce5605fd29"
      },
      "downloads": -1,
      "filename": "django-eventtools-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d5f8c7aaac30b147eaa99eb6be111ff6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13647,
      "upload_time": "2020-11-10T20:57:39",
      "upload_time_iso_8601": "2020-11-10T20:57:39.340654Z",
      "url": "https://files.pythonhosted.org/packages/50/d9/3123bc4eb20856b8f704d3909d8adb11660c7326cd30b31ecada54c01ead/django-eventtools-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}