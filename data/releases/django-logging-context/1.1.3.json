{
  "info": {
    "author": "Pik Digital",
    "author_email": "nsi-dev@pik.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: System :: Logging"
    ],
    "description": "# django-logging-context\n\n## Description\n`django-logging-context` is BSD licensed library extending default django \nlogging context with following additional values:\n\n- request id,\n- request duration,\n- remote address,\n- response length,\n- user id,\n- username.\n\n## Quick start\n\n1. install the library:\n```bash\npip install django-logging-context -y\n```\n\n2. Add `django-logging-context` to your `INSTALLED_APPS` setting like this:\n```Python\n    INSTALLED_APPS = [\n        ...\n        'django_logging_context',\n    ]\n```\n\n3. Add proxy middleware to your `MIDDLEWARE` setting like this:\n```Python\nMIDDLEWARE = [\n    'django_logging_context.middlewares.LoggingContextMiddleware',\n    ...\n]\n```\nIt's important to place this `LoggingContextMiddleware` at the first place in \na `MIDDLEWARE` to allow to calculate duration of response more precisely.\n\n4. If you just want to add info about request duration and request id to your \n   log records then you can use `LoggingWSGIMiddleware` in your `wsgi.py` like\n   this:\n```Python\nfrom django_logging_context.wsgi import LoggingWSGIMiddleware\napplication = LoggingWSGIMiddleware(get_wsgi_application())\n```\n\n5. Use this example of logging setting to set up your loggers correctly\n\n```Python\nimport os\n\nLOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')\nDB_LOG_LEVEL = os.environ.get('DB_LOG_LEVEL', LOG_LEVEL)\nREQUESTS_LOG_LEVEL = os.environ.get('REQUESTS_LOG_LEVEL', LOG_LEVEL)\nCELERY_LOG_LEVEL = os.environ.get('CELERY_LOG_LEVEL', LOG_LEVEL)\nSENTRY_LOG_LEVEL = os.environ.get('SENTRY_LOG_LEVEL', LOG_LEVEL)\n\nLOGGING = {\n    'version': 1,\n    'loggers': {\n        'django': {'level': LOG_LEVEL},\n        'django.db': {'level': DB_LOG_LEVEL},\n        'urllib3': {'level': REQUESTS_LOG_LEVEL},\n        'celery': {'level': CELERY_LOG_LEVEL},\n        'sentry': {'level': SENTRY_LOG_LEVEL},\n    },\n    'root': {\n        'level': LOG_LEVEL,\n        'handlers': ['console']\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'formatter': 'verbose',\n            'filters': ['extending_context_filter']\n        }\n    },\n    'filters': {\n        'extending_context_filter': {\n            '()': 'django_logging_context.logging.ContextExtendingFilter'\n        }\n    },\n    'formatters': {\n        'verbose': {\n            'format': ('[django] %(levelname)s %(asctime)s'\n                       ' %(name)s/%(module)s'\n                       ' %(process)d/%(thread)d'\n                       ' request_id: %(request_id)s'\n                       ' remote_addr: %(remote_addr)s'\n                       ' user_id: %(user_id)s'\n                       ' username: %(username)s'\n                       ' duration: %(response_duration)s'\n                       ' uri: %(uri)s'\n                       '  %(message)s')\n        },\n    },\n}\n```\n\n## Log records example\n```log\n[django] INFO 2021-04-08 18:12:13,573 django.server/basehttp 47385/123145535799296 request_id: ea9a2dfd-a662-4632-84d0-d0c5151b5422 remote_addr: 127.0.0.1 user_id: 2 username: root duration: 1.548695s uri: http://127.0.0.1:8000/login/?next=/ \"GET /admin/ HTTP/1.1\" 200 46937\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pik-software/django-logging-context",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-logging-context",
    "package_url": "https://pypi.org/project/django-logging-context/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-logging-context/",
    "project_urls": {
      "Homepage": "https://github.com/pik-software/django-logging-context"
    },
    "release_url": "https://pypi.org/project/django-logging-context/1.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django library extending default logging context",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14001410,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3415e77b7b5fcc6e13370246104a3279448a1552f0d9fc07874e977ac8dcd60",
        "md5": "2ed150d2b925e0ba798e9bdbbd1ed89c",
        "sha256": "593d5ab301af4d5b0f431c3c84fdd442cc6b540443df39d8e32edf1cf46419df"
      },
      "downloads": -1,
      "filename": "django-logging-context-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2ed150d2b925e0ba798e9bdbbd1ed89c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6101,
      "upload_time": "2021-07-01T12:21:58",
      "upload_time_iso_8601": "2021-07-01T12:21:58.730288Z",
      "url": "https://files.pythonhosted.org/packages/e3/41/5e77b7b5fcc6e13370246104a3279448a1552f0d9fc07874e977ac8dcd60/django-logging-context-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}