{
  "info": {
    "author": "Eliott Dumeix",
    "author_email": "eliott.dumeix@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "py-lua-parser\n===============================================================================\n\n.. image:: https://travis-ci.org/boolangery/py-lua-parser.svg?branch=master\n    :target: https://travis-ci.org/boolangery/py-lua-parser\n.. image:: https://img.shields.io/pypi/v/luaparser.svg\n    :target: https://pypi.python.org/pypi/luaparser/\n.. image:: https://img.shields.io/pypi/pyversions/luaparser.svg\n    :target: https://pypi.python.org/pypi/luaparser/\n\nA Lua parser and AST builder written in Python.\n\n\nInstallation:\n------------------------------------------------------------------------------\n\nThe package can be installed through `pip`:\n\n.. code-block::\n\n    $ python3.6 -m pip install luaparser\n\nIt will install the shell command 'luaparser'.\n\n\nOptions\n------------------------------------------------------------------------------\n\nThese are the command-line flags:\n\nUsage: luaparser [options] filename\n\n.. code-block::\n\n    CLI Options:\n      --version                     Show program's version number and exit\n      -h, --help                    Show this help message and exit\n      -s, --source                  Source passed in a string\n      -x, --xml                     Set output format to xml\n      -o, --output                  Write output to file\n\n\nQuickstart\n==============================================================================\n\nWorking on AST tree\n------------------------------------------------------------------------------\n\nMinimal exemple:\n\n.. code-block:: python\n\n    from luaparser import ast\n\n    src = \"\"\"\n        local function sayHello()\n          print('hello world !')\n        end\n        sayHello()\n        \"\"\"\n\n    tree = ast.parse(src)\n    print(ast.toPrettyStr(tree))\n\nwill display:\n\n.. code-block::\n\n    Chunk: {} 1 key\n      body: {} 1 key\n        Block: {} 1 key\n          body: [] 2 items\n            0: {} 1 key\n              LocalFunction: {} 3 keys\n                name: {} 1 key\n                  Name: {} 1 key\n                    id: \"sayHello\"\n                args: [] 0 item\n                body: [] 1 item\n                  0: {} 1 key\n                    Call: {} 2 keys\n                      func: {} 1 key\n                        Name: {} 1 key\n                          id: \"print\"\n                      args: [] 1 item\n                        0: {} 1 key\n                          String: {} 1 key\n                            s: \"hello world !\"\n            1: {} 1 key\n              Call: {} 2 keys\n                func: {} 1 key\n                  Name: {} 1 key\n                    id: \"sayHello\"\n                args: [] 0 item\n\n\nYou can run through the list of all the nodes in the tree using ast.walk(tree):\n\n.. code-block:: python\n\n    from luaparser import ast\n    from luaparser import astnodes\n\n    tree = ast.parse(\"local foo = 'bar'\")\n\n    for node in ast.walk(tree):\n        if isinstance(node, astnodes.Name):\n            process(node)\n\n\nAlternatively, you can use a node visitor:\n\n.. code-block:: python\n\n    from luaparser import ast\n    from luaparser import astnodes\n\n    src = \"local a = 42\"\n\n    class NumberVisitor(ast.ASTVisitor):\n        def visit_Number(self, node):\n            print('Number value = ' + str(node.n))\n\n    tree = ast.parse(src)\n    NumberVisitor().visit(tree)\n\nWorking on tokens, modifying source code\n------------------------------------------------------------------------------\n\nWorking directly on tokens is a convenient way to modify source code:\n\n.. code-block:: python\n\n    from luaparser import asttokens\n\n    src = \"local a = 1\"\n\n    atokens = asttokens.parse(src)\n    for token in atokens.types(asttokens.Tokens.NAME):\n        token.value.text = 'foo'\n\n    print(atokens.toSource())\n\nWill render:\n\n.. code-block::\n\n    local foo = 1\n\nYou can also work on both ast and tokens. In fact, you can retrieve and edit all tokens associated to a specific AST node.\n\nThe following example show how to automatically modify last argument in function call:\n\n.. code-block:: python\n\n    from luaparser import ast\n\n    src = \"\"\"\\\n    print('foo')\n    process(1, 2, 3)\n    \"\"\"\n\n    class CallVisitor(ast.ASTVisitor):\n        def visit_Call(self, node):\n            print('Call:', node.func.id)\n            print('Args:', node.args.edit().toSource())\n            print('Full line: ', node.edit().toSource())\n            node.args.edit().last().text = 'replaced'\n\n    tree = ast.parse(src)\n    CallVisitor().visit(tree)\n\n    print(tree.edit().toSource())\n\n\nOutput is:\n\n.. code-block::\n\n    Call: print\n    Args: 'foo'\n    Full line:  print('foo')\n\n    Call: process\n    Args: 1, 2, 3\n    Full line:\n    process(1, 2, 3)\n\n    print(replaced)\n    process(1, 2, replaced)\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/boolangery/py-lua-parser/archive/2.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/boolangery/py-lua-parser",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "luaparser",
    "package_url": "https://pypi.org/project/luaparser/",
    "platform": "",
    "project_url": "https://pypi.org/project/luaparser/",
    "project_urls": {
      "Download": "https://github.com/boolangery/py-lua-parser/archive/2.0.1.tar.gz",
      "Homepage": "https://github.com/boolangery/py-lua-parser"
    },
    "release_url": "https://pypi.org/project/luaparser/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A lua parser in Python",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16814202,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac19b6017cf3b88e0029bffb572920b8cfcb501a3d739c6a3a1493fd9aedb938",
        "md5": "90613dffd8714552917913ba4ea6b740",
        "sha256": "c2598091b8d300dfeefc78274c2fe83e233bd2f8b0bf9086f1fe63684e6a2bfb"
      },
      "downloads": -1,
      "filename": "luaparser-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "90613dffd8714552917913ba4ea6b740",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26682,
      "upload_time": "2018-06-07T18:59:28",
      "upload_time_iso_8601": "2018-06-07T18:59:28.978913Z",
      "url": "https://files.pythonhosted.org/packages/ac/19/b6017cf3b88e0029bffb572920b8cfcb501a3d739c6a3a1493fd9aedb938/luaparser-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}