{
  "info": {
    "author": "Eliott Dumeix",
    "author_email": "eliott.dumeix@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "py-lua-parser\n===============================================================================\n\n.. image:: https://travis-ci.org/boolangery/py-lua-parser.svg?branch=master\n    :target: https://travis-ci.org/boolangery/py-lua-parser\n.. image:: https://img.shields.io/pypi/v/luaparser.svg\n    :target: https://pypi.python.org/pypi/luaparser/\n.. image:: https://img.shields.io/pypi/pyversions/luaparser.svg\n    :target: https://pypi.python.org/pypi/luaparser/\n\nA Lua parser and AST builder written in Python.\n\nIt's both a development library and a command line tool.\n\n\nInstallation:\n------------------------------------------------------------------------------\n\nThe package can be installed through `pip`:\n\n.. code-block::\n\n    $ python3.6 -m pip install luaparser\n\nIt will install the shell command 'luaparser'.\n\n\nOptions\n------------------------------------------------------------------------------\n\nThese are the command-line flags:\n\nUsage: luaparser [options] filename\n\n.. code-block::\n\n    CLI Options:\n      --version                     Show program's version number and exit\n      -h, --help                    Show this help message and exit\n      -s, --source                  Source passed in a string\n      -x, --xml                     Set output format to xml\n      -o, --output                  Write output to file\n\n\nQuickstart\n==============================================================================\n\nNode structure\n------------------------------------------------------------------------------\n\nEach node contains the following data:\n\n.. code-block:: python\n\n\tclass Node:\n\t\t\"\"\"Base class for AST node.\"\"\"\n\t\tcomments: Comments\n\t\tfirst_token: Optional[Token]\n\t\tlast_token: Optional[Token]\n\t\tstart_char: Optional[int]\n\t\tstop_char: Optional[int]\n\t\tline: Optional[int]\n\n\nWorking on AST tree\n------------------------------------------------------------------------------\n\nMinimal exemple:\n\n.. code-block:: python\n\n    from luaparser import ast\n\n    src = \"\"\"\n        local function sayHello()\n          print('hello world !')\n        end\n        sayHello()\n        \"\"\"\n\n    tree = ast.parse(src)\n    print(ast.to_pretty_str(tree))\n\nwill display:\n\n.. code-block::\n\n    Chunk: {} 1 key\n      body: {} 1 key\n        Block: {} 1 key\n          body: [] 2 items\n            0: {} 1 key\n              LocalFunction: {} 3 keys\n                name: {} 1 key\n                  Name: {} 1 key\n                    id: \"sayHello\"\n                args: [] 0 item\n                body: [] 1 item\n                  0: {} 1 key\n                    Call: {} 2 keys\n                      func: {} 1 key\n                        Name: {} 1 key\n                          id: \"print\"\n                      args: [] 1 item\n                        0: {} 1 key\n                          String: {} 1 key\n                            s: \"hello world !\"\n            1: {} 1 key\n              Call: {} 2 keys\n                func: {} 1 key\n                  Name: {} 1 key\n                    id: \"sayHello\"\n                args: [] 0 item\n\n\nYou can run through the list of all the nodes in the tree using ast.walk(tree):\n\n.. code-block:: python\n\n    from luaparser import ast\n    from luaparser import astnodes\n\n    tree = ast.parse(\"local foo = 'bar'\")\n\n    for node in ast.walk(tree):\n        if isinstance(node, astnodes.Name):\n            process(node)\n\n\nAlternatively, you can use a node visitor:\n\n.. code-block:: python\n\n    from luaparser import ast\n    from luaparser import astnodes\n\n    src = \"local a = 42\"\n\n    class NumberVisitor(ast.ASTVisitor):\n        def visit_Number(self, node):\n            print('Number value = ' + str(node.n))\n\n    tree = ast.parse(src)\n    NumberVisitor().visit(tree)\n\n\nRendering lua code\n------------------------------------------------------------------------------\n\n.. warning:: Experimental feature\n\n.. code-block:: python\n\n    exp = Chunk(Block([\n        Forin(\n            targets=[Name('k'), Name('v')],\n            iter=[\n                Invoke(\n                    source=Name('bar'),\n                    func=Name('foo'),\n                    args=[Number(42)]\n                )\n            ],\n            body=Block([\n                Call(func=Name('print'), args=[Name('k'), Name('v')])\n            ]),\n\n        )\n    ]))\n\n    print(ast.to_lua_source(exp))\n\n\nWill render:\n\n.. code-block:: lua\n\n    for k, v in bar:foo(42) do\n        print(k, v)\n    end\n\n\nCommand line\n==============================================================================\n\nGiven:\n\n.. code-block:: lua\n\n    local function log(msg)\n      print(msg)\n    end\n\n    log(\"hello world !\")\n\n\n.. code-block:: bash\n\n    $ luaparser source.lua\n\n\nWill output:\n\n.. code-block:: json\n\n    {\n        \"Chunk\": {\n            \"body\": {\n                \"Block\": {\n                    \"body\": [\n                        {\n                            \"LocalFunction\": {\n                                \"name\": {\n                                    \"Name\": {\n                                        \"id\": \"log\"\n                                    }\n                                },\n                                \"args\": [\n                                    {\n                                        \"Name\": {\n                                            \"id\": \"msg\"\n                                        }\n                                    }\n                                ],\n                                \"body\": {\n                                    \"Block\": {\n                                        \"body\": [\n                                            {\n                                                \"Call\": {\n                                                    \"func\": {\n                                                        \"Name\": {\n                                                            \"id\": \"print\"\n                                                        }\n                                                    },\n                                                    \"args\": [\n                                                        {\n                                                            \"Name\": {\n                                                                \"id\": \"msg\"\n                                                            }\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"Call\": {\n                                \"func\": {\n                                    \"Name\": {\n                                        \"id\": \"log\"\n                                    }\n                                },\n                                \"args\": [\n                                    {\n                                        \"String\": {\n                                            \"s\": \"hello world !\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    }\n\nCommand line\n==============================================================================\n\nDocumentation can be built with Sphinx:\n\n.. code-block::\n\n    $ cd doc\n    $ pip install -r requirements.txt\n    $ make html\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/boolangery/py-lua-parser/archive/3.2.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/boolangery/py-lua-parser",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "luaparser",
    "package_url": "https://pypi.org/project/luaparser/",
    "platform": null,
    "project_url": "https://pypi.org/project/luaparser/",
    "project_urls": {
      "Download": "https://github.com/boolangery/py-lua-parser/archive/3.2.0.tar.gz",
      "Homepage": "https://github.com/boolangery/py-lua-parser"
    },
    "release_url": "https://pypi.org/project/luaparser/3.2.0/",
    "requires_dist": [
      "antlr4-python3-runtime (<=4.7.2)"
    ],
    "requires_python": "",
    "summary": "A lua parser in Python",
    "version": "3.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16814202,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eacb470748720509cad48def1f8f655b1f12e227d27687272ee0f885bf7779a9",
        "md5": "7691081880388c6bca210b64b6ce86fa",
        "sha256": "1edb1a3ea19b2eb1b051615678516aaf68515e68bc86ccf7325150357d8c27d5"
      },
      "downloads": -1,
      "filename": "luaparser-3.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7691081880388c6bca210b64b6ce86fa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 40438,
      "upload_time": "2023-02-11T18:38:29",
      "upload_time_iso_8601": "2023-02-11T18:38:29.870910Z",
      "url": "https://files.pythonhosted.org/packages/ea/cb/470748720509cad48def1f8f655b1f12e227d27687272ee0f885bf7779a9/luaparser-3.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2a30001d6ac9fe9dd31ff96cb35d295f522841d53fcdc106d17a58f21fa5e5a",
        "md5": "a61290ba51a4943521bd8aa8dc46a050",
        "sha256": "6f11c8d14d463be99c52ac959f88a849e681762dad39ca67cd2746cab2e6612b"
      },
      "downloads": -1,
      "filename": "luaparser-3.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a61290ba51a4943521bd8aa8dc46a050",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36711,
      "upload_time": "2023-02-11T18:38:32",
      "upload_time_iso_8601": "2023-02-11T18:38:32.091478Z",
      "url": "https://files.pythonhosted.org/packages/c2/a3/0001d6ac9fe9dd31ff96cb35d295f522841d53fcdc106d17a58f21fa5e5a/luaparser-3.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}