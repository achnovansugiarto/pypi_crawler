{
  "info": {
    "author": "Yonel Ceruto Glez",
    "author_email": "yonelceruto@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "===========\ndjango-ajax\n===========\n\nFast and easy AJAX libraries for django applications.\n\n.. image:: https://travis-ci.org/yceruto/django-ajax.png?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/yceruto/django-ajax\n    \n.. image:: https://img.shields.io/pypi/v/djangoajax.svg\n    :alt: PYPI Package\n    :target: https://pypi.python.org/pypi/djangoajax\n    \n.. image:: https://img.shields.io/pypi/status/django-ajax.svg\n    :alt: PYPI Status\n    :target: https://pypi.python.org/pypi/djangoajax\n    \n.. image:: https://img.shields.io/pypi/l/djangoajax.svg\n    :alt: PYPI License\n    :target: https://pypi.python.org/pypi/djangoajax\n\nRequirements\n------------\n\n* `python`_ >= 2.6\n* `django`_ >= 1.5\n\n.. _`python`: http://www.python.org/\n.. _`django`: https://djangoproject.com\n.. _`jQuery`: http://jquery.com\n\nInstallation\n------------\n\nInstall django-ajax in your python environment\n\n1- Download and install package:\n\n.. code:: sh\n\n    $ pip install djangoajax\n\nThrough Github:\n\n.. code:: sh\n\n    pip install -e git://github.com/yceruto/django-ajax#egg=djangoajax\n\nor simply with:\n\n.. code:: sh\n\n    $ python setup.py install\n\n2- Add ``'django_ajax'`` into the ``INSTALLED_APPS`` list.\n\n3- Read usage section and enjoy its advantages!\n\n\nUsage\n-----\n\n@ajax Decorator\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from django_ajax.decorators import ajax\n\n    @ajax\n    def my_view(request):\n        do_something()\n        \nWhen nothing is returned as result of view then returns (JSON format):\n\n.. code:: javascript\n\n    {\"status\": 200, \"statusText\": \"OK\", \"content \": null}\n\n\n**Sending custom data in the response**\n\n.. code:: python\n\n    @ajax\n    def my_view(request):\n        c = 2 + 3\n        return {'result': c}\n        \nThe result is send to the browser in the following way (JSON format)\n\n.. code:: javascript\n\n    {\"status\": 200, \"statusText\": \"OK\", \"content\": {\"result\": 5}}\n\n\n**Combining with others decorators**\n\n.. code:: python\n\n    from django.contrib.auth.decorators import login_required\n    from django_ajax.decorators import ajax\n\n    @ajax\n    @login_required\n    def my_view(request):\n        # if the request.user is anonymous then this view not proceed \n        return {'user_id': request.user.id}\n        \nThe JSON response:\n\n.. code:: javascript\n\n    {\"status\": 302, \"statusText\": \"FOUND\", \"content\": \"/login\"}\n\n\n**Template response**\n\n.. code:: python\n\n    from django.shortcuts import render\n    from django_ajax.decorators import ajax\n\n    @ajax\n    def my_view(request):\n        return render(request, 'home.html')\n\nThe JSON response:\n\n.. code:: javascript\n\n    {\"status\": 200, \"statusText\": \"OK\", \"content\": \"<html>...</html>\"}\n\n\n**Catch exceptions**\n\n.. code:: python\n\n    @ajax\n    def my_view(request):\n        a = 23 / 0  # this line throws an exception\n        return a\n\nThe JSON response:\n\n.. code:: javascript\n\n    {\"status\": 500, \"statusText\": \"INTERNAL SERVER ERROR\", \"content\": \"integer division or modulo by zero\"}\n\n\nAJAXMiddleware\n~~~~~~~~~~~~~~\n\nIf you use AJAX quite frequently in your project, we suggest using the AJAXMiddleware described below.\n\nAdd ``django_ajax.middleware.AJAXMiddleware`` into the ``MIDDLEWARE_CLASSES`` list in ``settings.py``.\n\nAll your responses will be converted to JSON if the request was made by AJAX, otherwise is return a HttpResponse.\n\n.. caution:: If you use this middleware cannot use ``@ajax`` decorator.\n\n\nAJAXMixin for class-based views\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``AJAXMixin`` is an object that calls the AJAX decorator.\n\n.. code:: python\n\n    from django.views.generic import TemplateView\n    from django_ajax.mixin import AJAXMixin\n\n    class SimpleView(AJAXMixin, TemplateView):\n        template_name = 'home.html'\n\nThe JSON response:\n\n.. code:: javascript\n\n    {\"status\": 200, \"statusText\": \"OK\", \"content\": \"<html>...</html>\"}\n\nEnjoy!",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yceruto/django-ajax",
    "keywords": "ajax django-ajax json",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangoajax",
    "package_url": "https://pypi.org/project/djangoajax/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/djangoajax/",
    "project_urls": {
      "Homepage": "https://github.com/yceruto/django-ajax"
    },
    "release_url": "https://pypi.org/project/djangoajax/2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Powerful and easy AJAX framework for django applications.",
    "version": "2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13548796,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "341ddfbbe3c6c2f212e9e3521303ed978472c6f28f30742dbcc03bb351bf50bc",
        "md5": "cb339633d634b843e23fe06e9100da29",
        "sha256": "d97b03a429c07cf52130ab570a6af9d111658c24db15d8b07dbb78031bd703b2"
      },
      "downloads": -1,
      "filename": "djangoajax-2.4-py3.6.egg",
      "has_sig": false,
      "md5_digest": "cb339633d634b843e23fe06e9100da29",
      "packagetype": "bdist_egg",
      "python_version": "3.6",
      "requires_python": null,
      "size": 35888,
      "upload_time": "2018-03-12T16:21:12",
      "upload_time_iso_8601": "2018-03-12T16:21:12.510290Z",
      "url": "https://files.pythonhosted.org/packages/34/1d/dfbbe3c6c2f212e9e3521303ed978472c6f28f30742dbcc03bb351bf50bc/djangoajax-2.4-py3.6.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36dcb59ca11beb4a6827d4ef196260702e0d377d0ae1113a81479903ad9d8e66",
        "md5": "ff91c05e78db7746cfbef47179124603",
        "sha256": "9a5fe84354492007bd30d8327a606b1b94ceb0fafb9d76b371ecea4d7d9f28c3"
      },
      "downloads": -1,
      "filename": "djangoajax-2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "ff91c05e78db7746cfbef47179124603",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15327,
      "upload_time": "2017-09-27T20:24:16",
      "upload_time_iso_8601": "2017-09-27T20:24:16.774227Z",
      "url": "https://files.pythonhosted.org/packages/36/dc/b59ca11beb4a6827d4ef196260702e0d377d0ae1113a81479903ad9d8e66/djangoajax-2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}