{
  "info": {
    "author": "Florian Wahl",
    "author_email": "florian.wahl.developer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DNS-Messages\r\n\r\nA Python3 library for parsing and generating DNS messages.\r\nAdditionally, it provides a dns server which enables receiving and sending dns messages.\r\n\r\nCurrently, it only supports some types of resource records (A, AAAA, CNAME, PTR, TXT, SOA, MX, HINFO) but can be easily extended - feel free to create a pull request :wink: \r\nIf a message contains an unsupported RR, the parser will ignore the data of this RR but will not break  :smiley:\r\n\r\nThe logic to encode a message is very simple - no compression etc. is done.\r\n\r\n## Installation\r\n\r\nInstall the package with pip\r\n\r\n    pip3 install dns-messages\r\n\r\n## Parsing DNS Messages\r\nUse the function ``from_bytes`` of the ``DnsMessage`` class to parse dns messages in raw bytes. \r\n```python3\r\nfrom dns_messages import DnsMessage\r\n\r\nraw_bytes: bytes\r\nparsed_message: DnsMessage = DnsMessage.from_bytes(raw_bytes)\r\n```\r\n\r\n## Generating DNS Messages\r\nBuild a message using the provided classes ``DnsMessage``, ``OPCODE``, ``Question``, ``A``, ``RRType`` etc.: \r\n```python3\r\nfrom dns_messages import DnsMessage, OPCODE, RRType, RRClass, Question\r\n\r\n# build a simple query for the A record of \"example.com\"\r\nmessage = DnsMessage(message_id=1, qr=1, op_code=OPCODE.QUERY)\r\n\r\nquestion = Question(qname=\"example.com\", qtype=RRType.A, qclass=RRClass.IN)\r\nmessage.questions.append(question)\r\n\r\nmessage_in_bytes: bytes = message.to_bytes()\r\n```\r\n\r\n## DNS server\r\nThe package also provides a dns server ``DnsServer`` which can easily be extended with your own logic by overwriting the functions ``_handle_broken_message`` and ``_handle_received_message``.  \r\n```python3\r\nfrom dns_messages import DnsServer, DnsPacketParsingException, DnsMessage\r\n\r\nclass TestServer(DnsServer):\r\n    def __init__(self, ip_address: str, port: int = 53):\r\n        super().__init__(ip_address=ip_address, port=port)\r\n        \r\n    def _handle_broken_message(self, exception: DnsPacketParsingException, remote_ip: str, remote_port: int) -> None:\r\n        print('received package from {}:{} which could not be parsed: {}'.format(remote_ip, remote_port, exception))\r\n\r\n    def _handle_received_message(self, message: DnsMessage, remote_ip: str, remote_port: int) -> None:\r\n        # print out names of questions\r\n        for question in message.questions:\r\n            print(question.name)\r\n```\r\n\r\n## Simple demo server\r\nThe package includes a simple demo for using the built-in dns server. \r\nYou can start the dns demo server with the following three lines of code. \r\nThe server prints out information about incoming dns packages.\r\n```python3\r\nfrom dns_messages.dns_server import DnsDemoServer\r\ndemo = DnsDemoServer(ip_address='127.0.0.1')\r\ndemo.start()\r\n```\r\n\r\nHere is the complete code of the demo server:\r\n```python3\r\nfrom .dns_server import DnsServer\r\nfrom .. import DnsMessage, Question, ResourceRecord, A, AAAA\r\n\r\n\r\nclass DnsDemoServer(DnsServer):\r\n    def __init__(self, ip_address: str):\r\n        super().__init__(ip_address)\r\n\r\n    def _handle_received_message(self, message: DnsMessage, remote_ip: str, remote_port: int) -> None:\r\n        print(30*'-')\r\n        print('a new dns message was parsed')\r\n        print('message id: ', message.message_id)\r\n        print('is a query: ', message.is_query())\r\n        print('number of questions: ', message.number_of_questions())\r\n        print('number of questions: ', message.number_of_answer_records())\r\n\r\n        print('Questions:')\r\n        question: Question\r\n        for i, question in enumerate(message.questions):\r\n            print('\\tquestion {}'.format(i+1))\r\n            print('\\t- name: {}'.format(question.name))\r\n            print('\\t- type: {}'.format(question.rr_type.name))\r\n            print('\\t- class: {}'.format(question.rr_class.name))\r\n\r\n        print('Answers:')\r\n        answer: ResourceRecord\r\n        for i, answer in enumerate(message.answers_RRs):\r\n            print('\\tanswer {}'.format(i + 1))\r\n            print('\\t- name: {}'.format(answer.name))\r\n            print('\\t- type: {}'.format(answer.get_RR_type()))\r\n            print('\\t- class: {}'.format(answer.rr_class.name))\r\n            print('\\t- ttl: {}'.format(answer.rr_class.name))\r\n            if isinstance(answer, A) or isinstance(answer, AAAA):\r\n                print('\\t- IP: {}'.format(answer.ip_address))\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wahlflo/dns-messages",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dns-messages",
    "package_url": "https://pypi.org/project/dns-messages/",
    "platform": null,
    "project_url": "https://pypi.org/project/dns-messages/",
    "project_urls": {
      "Homepage": "https://github.com/wahlflo/dns-messages"
    },
    "release_url": "https://pypi.org/project/dns-messages/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python3 library for parsing and generating DNS messages",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16907691,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "358b764359c69062c895a149d7d43db06faf08ae42542fe43a8d01594d264d9d",
        "md5": "782b23b2b4286c9ad2fab10ad5d5a17d",
        "sha256": "680a84adbb85aacefe35778041b0afec01caeba66aa3ccb7863086242f20cb59"
      },
      "downloads": -1,
      "filename": "dns_messages-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "782b23b2b4286c9ad2fab10ad5d5a17d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22544,
      "upload_time": "2023-02-17T20:36:56",
      "upload_time_iso_8601": "2023-02-17T20:36:56.454756Z",
      "url": "https://files.pythonhosted.org/packages/35/8b/764359c69062c895a149d7d43db06faf08ae42542fe43a8d01594d264d9d/dns_messages-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee4d00f225f63ed2c239b956c8f882b71c979f3c28c437d3467dad90593a531c",
        "md5": "2273d364d4de656b9369eb0e7c4182e6",
        "sha256": "dcc959efb78c6685ba079a0cef586f3e4619be48ae1332c0611681b39212285b"
      },
      "downloads": -1,
      "filename": "dns-messages-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2273d364d4de656b9369eb0e7c4182e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13233,
      "upload_time": "2023-02-17T20:36:58",
      "upload_time_iso_8601": "2023-02-17T20:36:58.177161Z",
      "url": "https://files.pythonhosted.org/packages/ee/4d/00f225f63ed2c239b956c8f882b71c979f3c28c437d3467dad90593a531c/dns-messages-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}