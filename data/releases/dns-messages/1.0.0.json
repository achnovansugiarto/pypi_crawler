{
  "info": {
    "author": "Florian Wahl",
    "author_email": "florian.wahl.developer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DNS-Messages\n\nA Python3 library for parsing and generating DNS messages.\nAdditionally, it provides a dns server which enables receiving and sending dns messages.\n\nCurrently, it only supports some types of resource records (A, AAAA, CNAME, PTR, TXT, SOA, MX, HINFO) but can be easily extended - feel free to create a pull request :wink: \nIf a message contains an unsupported RR, the parser will ignore the data of this RR but will not break  :smiley:\n\nThe logic to encode a message is very simple - no compression etc. is done.\n\n## Installation\n\nInstall the package with pip\n\n    pip3 install dns-messages\n\n## Parsing DNS Messages\nUse the function ``from_bytes`` of the ``DnsMessage`` class to parse dns messages in raw bytes. \n```python3\nfrom dns_messages import DnsMessage\n\nraw_bytes: bytes\nparsed_message: DnsMessage = DnsMessage.from_bytes(raw_bytes)\n```\n\n## Generating DNS Messages\nBuild a message using the provided classes ``DnsMessage``, ``OPCODE``, ``Question``, ``A``, ``RRType`` etc.: \n```python3\nfrom dns_messages import DnsMessage, OPCODE, RRType, RRClass, Question\n\n# build a simple query for the A record of \"example.com\"\nmessage = DnsMessage(message_id=1, qr=1, op_code=OPCODE.QUERY)\n\nquestion = Question(qname=\"example.com\", qtype=RRType.A, qclass=RRClass.IN)\nmessage.questions.append(question)\n\nmessage_in_bytes: bytes = message.to_bytes()\n```\n\n## DNS server\nThe package also provides a dns server ``DnsServer`` which can easily be extended with your own logic by overwriting the functions ``_handle_broken_message`` and ``_handle_received_message``.  \n```python3\nfrom dns_messages import DnsServer, DnsPacketParsingException, DnsMessage\n\nclass TestServer(DnsServer):\n    def __init__(self, ip_address: str, port: int = 53):\n        super().__init__(ip_address=ip_address, port=port)\n        \n    def _handle_broken_message(self, exception: DnsPacketParsingException, remote_ip: str, remote_port: int) -> None:\n        print('received package from {}:{} which could not be parsed: {}'.format(remote_ip, remote_port, exception))\n\n    def _handle_received_message(self, message: DnsMessage, remote_ip: str, remote_port: int) -> None:\n        # print out names of questions\n        for question in message.questions:\n            print(question.name)\n```\n\n## Simple demo server\nThe package includes a simple demo for using the built-in dns server. \nYou can start the dns demo server with the following three lines of code. \nThe server prints out information about incoming dns packages.\n```python3\nfrom dns_messages.dns_server import DnsDemoServer\ndemo = DnsDemoServer(ip_address='127.0.0.1')\ndemo.start()\n```\n\nHere is the complete code of the demo server:\n```python3\nfrom .dns_server import DnsServer\nfrom .. import DnsMessage, Question, ResourceRecord, A, AAAA\n\n\nclass DnsDemoServer(DnsServer):\n    def __init__(self, ip_address: str):\n        super().__init__(ip_address)\n\n    def _handle_received_message(self, message: DnsMessage, remote_ip: str, remote_port: int) -> None:\n        print(30*'-')\n        print('a new dns message was parsed')\n        print('message id: ', message.message_id)\n        print('is a query: ', message.is_query())\n        print('number of questions: ', message.number_of_questions())\n        print('number of questions: ', message.number_of_answer_records())\n\n        print('Questions:')\n        question: Question\n        for i, question in enumerate(message.questions):\n            print('\\tquestion {}'.format(i+1))\n            print('\\t- name: {}'.format(question.name))\n            print('\\t- type: {}'.format(question.rr_type.name))\n            print('\\t- class: {}'.format(question.rr_class.name))\n\n        print('Answers:')\n        answer: ResourceRecord\n        for i, answer in enumerate(message.answers_RRs):\n            print('\\tanswer {}'.format(i + 1))\n            print('\\t- name: {}'.format(answer.name))\n            print('\\t- type: {}'.format(answer.get_RR_type()))\n            print('\\t- class: {}'.format(answer.rr_class.name))\n            print('\\t- ttl: {}'.format(answer.rr_class.name))\n            if isinstance(answer, A) or isinstance(answer, AAAA):\n                print('\\t- IP: {}'.format(answer.ip_address))\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wahlflo/dns-messages",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dns-messages",
    "package_url": "https://pypi.org/project/dns-messages/",
    "platform": "",
    "project_url": "https://pypi.org/project/dns-messages/",
    "project_urls": {
      "Homepage": "https://github.com/wahlflo/dns-messages"
    },
    "release_url": "https://pypi.org/project/dns-messages/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python3 library for parsing and generating DNS messages",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16907691,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b85ea849a72dd571c2380058165d8c3fa877081b609be04b0e0df2d173088c1",
        "md5": "db2f8b24a1a659909fea60193fe128fb",
        "sha256": "6e81790d90df26d245f628110343cdf0b7d59a8c9ce61bbcce9afa439498f72d"
      },
      "downloads": -1,
      "filename": "dns_messages-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "db2f8b24a1a659909fea60193fe128fb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22540,
      "upload_time": "2022-02-23T18:26:34",
      "upload_time_iso_8601": "2022-02-23T18:26:34.978941Z",
      "url": "https://files.pythonhosted.org/packages/6b/85/ea849a72dd571c2380058165d8c3fa877081b609be04b0e0df2d173088c1/dns_messages-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43020334794c6af41e47129e8cf9e252b7591f3b344323465706a6d1f92427ea",
        "md5": "f2f135b16c55caf8fe995b23f62647ea",
        "sha256": "d348236301147a2ce277f917c465765a30733bf3c2a438d5da13266147633dde"
      },
      "downloads": -1,
      "filename": "dns-messages-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f2f135b16c55caf8fe995b23f62647ea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13268,
      "upload_time": "2022-02-23T18:26:36",
      "upload_time_iso_8601": "2022-02-23T18:26:36.667163Z",
      "url": "https://files.pythonhosted.org/packages/43/02/0334794c6af41e47129e8cf9e252b7591f3b344323465706a6d1f92427ea/dns-messages-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}