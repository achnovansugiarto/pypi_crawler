{
  "info": {
    "author": "HBQA",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "<h1 align=\"center\">Lyrebird - BugIt plugin</h1>\n\n[![Build Status](https://travis-ci.org/Meituan-Dianping/lyrebird-bugit.svg?branch=master)](https://travis-ci.org/Meituan-Dianping/lyrebird-bugit)\n[![PyPI](https://img.shields.io/pypi/v/lyrebird-bugit.svg)](https://pypi.python.org/pypi/lyrebird-bugit)\n![PyPI](https://img.shields.io/pypi/pyversions/lyrebird-bugit.svg)\n![GitHub](https://img.shields.io/github/license/meituan-dianping/lyrebird-bugit.svg)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/89854dfac65d4cde9efaebcc6b3845c6)](https://www.codacy.com/manual/dodosophia/lyrebird-bugit?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Meituan-Dianping/lyrebird-bugit&amp;utm_campaign=Badge_Grade)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/Meituan-Dianping/lyrebird-bugit.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/Meituan-Dianping/lyrebird-bugit/alerts/)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/Meituan-Dianping/lyrebird-bugit.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/Meituan-Dianping/lyrebird-bugit/context:python)\n\n\n**[Lyrebird](https://github.com/Meituan-Dianping/lyrebird)**\n是一个基于拦截以及模拟HTTP/HTTPS网络请求的面向移动应用的插件化测试平台。\n\n**BugIt plugin是一个Lyrebird的插件，用于汇总Lyrebird各插件信息，提交Bug。**\n\n----\n\n# 简介\nBugIt是一个[Lyrebird](https://github.com/Meituan-Dianping/lyrebird)插件。\n\n通过BugIt可以轻松的将Lyrebird中收集的人机交互数据作为描述或者附件提交到Bug管理系统中(如JIRA)。\n\n与[检查器](https://meituan-dianping.github.io/lyrebird/guide/checker.html#%E8%BD%BD%E5%85%A5%E6%A3%80%E6%9F%A5%E5%99%A8)(Checker)结合，即可实现一键提交bug的功能。\n\n# 快速开始\n## 环境要求\n\n- macOS OR Linux\n\n- Python3.6及以上\n\n- Lyrebird 1.6及以上\n## 安装\n\n```bash\npip3 install lyrebird-bugit\n```\n\n## 启动\n\n```bash\nlyrebird\n```\n\n# 功能介绍\n\n## Bug提交\n读取脚本文件后，BugIt会得到一个Bug信息填充的界面，称之为Bug表单。\n\n用户可以自定义Bug字段的 名称、先后顺序、填写样式、默认值。\n\n![\bBug表单](./image/bugit_bug.png)\n\nBugIt可以通过配置服务向任意Bug管理系统提交Issue\n\n## API数据获取\nBugIt支持自动填充Lyrebird运行过程中抓取到的数据信息。\n\n![BugIt 获取API信息](./image/bugit_api.gif)\n\n## 报警获取\n\n在[检查器](https://meituan-dianping.github.io/lyrebird/guide/checker.html#载入检查器)([Checker](https://meituan-dianping.github.io/lyrebird/guide/checker.html#载入检查器))捕获报警后，可以通过通知中心随时跳转至BugIt。\n\n在右侧数据面板中，可以对历史[消息总线](/advance/eventbus.md)中的信息进行回溯，补充至Bug中。\n\n![BugIt获取报警信息](./image/bugit_alert.gif)\n\n## 缓存功能\n\n按下[Commond]+[s]键，会将Bug相关字段信息进行存储。\n\n缓存信息不受Lyrebird服务开关、浏览器缓存、脚本/界面切换的影响。\n\n![BugIt缓存功能](./image/bugit_cache.gif)\n\n有效的利用缓存功能，是提高Bug上报效率的关键。\n\n## 插件在Bugit中的应用\n\n\n### Android iOS插件\n\n安装[Android插件](https://meituan-dianping.github.io/lyrebird/guide/plugin.html#android插件)、[iOS插件](https://meituan-dianping.github.io/lyrebird/guide/plugin.html#ios插件)后，BugIt支持设备信息扩展服务。\n\n- 设备信息获取\n   - BugIt 支持将设备名称、设备系统版本、被测 App 信息（Bundle ID(iOS)/PackageName(Android)）填充到Issue内容中。\n- 实时设备截图\n   - BugIt 可以实时获取设备截图，并支持在截图上进行涂鸦、文本标记。\n   - 提交 Bug 时，截图将作为附件一并提交给脚本配置服务。\n- Crash Log 获取\n   - 在Lyrebird运行过程中，如发生 被测 App 发生 Crash，BugIt 会捕获到 Crash Log。\n   - 提交 Bug 时，Crash Log 将作为附件一并提交给脚本配置服务。\n   - Crash 获取 暂不支持 iOS 设备\n\n![其他插件在BugIt中的应用](./image/bugit_devices.gif)\n\n## BugIt脚本\n\n在 ~/.lyrebird/conf.json 中，BugIt会读取 “bugit.workspace”字段。并将此字段值作为读取模板的根目录。\n\n该目录下所有模板都会加载到BugIt中，并在UI中可选。\n\n刷新BugIt界面即可重新加载所有模板。\n\n### 模板使用说明\n\nBugIt通过模板定义UI以及提交的行为。通过不同的模板支持JIRA以及其他的Bug管理系统。\n\nBugIt模板是一个Python文件，要求使用Python3.6及以上的版本编写。\n![BugIt 脚本工作原理示意图](./image/bugit_callback.png)\n配置脚本需包含以下三部分\n- init配置文件\n- form()\n- submit()\n\n### init配置文件\n\nBugIt 通过 name 来标识配置文件。\n\n>注意：BugIt 脚本必须含有 'name' 属性\n\n\n```python\n\"\"\"\nTemplate name\n\"\"\"        \nname = 'TEST-JIRA'\n```\nname 用于在 BugIt 前端页面上展示脚本名称。\n\n![name](./image/bugit_name.png)\n\n选中配置文件后，BugIt init 脚本文件，获取脚本文件中回调方法form()、submit()。\n\n### form()\n\nform() 方法用于自定义Bug表单的字段与填写样式。\n\nBug 中的每一字段由一dict定义（通常称之为FormItem），表单配置时，通过dict的以下关键字去控制字段的名称、默认值、样式等内容。\n\n>form()方法应返回一由FormItem组成的list。\n\n#### FormItem dict说明\nkey|说明|枚举值|是否必填\n:--:|:--|:--:|:--:\nname|展示在页面上的字段名称|--|Y\nvalue|对应字段填充的值|--|N\ncomponent|字段展示的组件形式|'input'、'select'、'compoundTextarea'|Y\noptions|配合 select component使用，用于存放select component的选项内容|--|N\ncustom keys|自定义属性，不影响UI组件展示，可以帮住更好地处理数据，详细用法请参考[脚本高级](https://meituan-dianping.github.io/lyrebird/plugins/bugit.html)|--|N\n\n#### BugIt 支持的 component\n- input\n\n```python\nform_item_input = {\n    'name': '主题',\n    'component': 'input',\n    'value': 'defalut value'\n}\n```\n\n![input组件](./image/bugit_input.png)\n\ninput 组件会生成一个文本输入框，在声明时如果 value 不为空，则会作为默认值填充在输入框中\n\n- select\n\n```python\nform_item_select = {\n    'name': '版本',\n    'component': 'select',\n    'options':[\n        {'id':'001','name':'option_1'},\n        {'id':'002','name':'option_2'}\n    ],\n    'value': '001'\n}\n```\n\n![select组件](./image/bugit_select.png)\n\nselect组件会生成一个筛选框，筛选项由 options 定义，options 为一个 list，其中每一元素为 dict 类型。\n\noption dict说明\nkey|说明|是否必填\n:--:|:--|:--:\nid|筛选项唯一标识|Y\nname|筛选项在前端展示文本内容|Y\n\nselect 组件中，value应为option dict中对应 id 的值\n\n- compoundTextarea\n\ncompoundTextarea组件会生成一个文本框，在声明时如果 value 不为空，则会作为默认值填充在文本框中\n\n```python\nform_item_text = {\n    'name': '描述',\n    'component': 'compoundTextarea',\n    'value': 'defalut value'\n}\n```\n![compoundTextarea组件](./image/bugit_text.png)\n\ncompoundTextarea组件在 BugIt 中还用于支持 Lyrebird 其他信息的扩展。\n\n选择[消息总线](https://meituan-dianping.github.io/lyrebird/advance/eventbus.html)或其他[插件](https://meituan-dianping.github.io/lyrebird/plugins/)的数据时，该数据将作为附加信息展示在 compoundTextarea 中。\n\n![附加信息](./image/bugit_text_extra.gif)\n\n对应的数据信息将作为 'extraMsg' 存放在 FormItem中。\n此时From Item变成\n\n```python\nform_item_text = {\n    'name': '描述',\n    'component': 'compoundTextarea',\n    'value': 'defalut value',\n    'extraMsg':[\n        {'message':'Flow Info'},\n        {'message':'Notice Info'},\n        {'message':'Devices Info'}\n    ]\n}\n```\n\n#### form()方法示例代码\n\n```python\ndef form(context):\n    \"\"\"\n    BugIt callback function\n\n    BugIt will call this function when user select this template from UI.\n    This function should return a array, list all FormItem dict.\n\n    \"\"\"\n    form_item_input = {\n        'name': '主题',\n        'component': 'input',\n        'value': 'defalut value'\n    }\n    form_item_select = {\n        'name': '版本',\n        'component': 'select',\n        'options':[\n            {'id':'001','name':'option_1'},\n            {'id':'002','name':'option_2'}\n        ],\n        'value': '001'\n    }\n    form_item_text = {\n        'name': '描述',\n        'component': 'compoundTextarea',\n        'value': 'defalut value'\n    }\n    form = [form_item_input,form_item_select,form_item_text]\n    return form\n```\n示例代码生成的 Bug 表单如下图所示\n![测试脚本表单生成](./image/bugit_form.png)\n\n>form()方法入参 context ，可用于传递缓存数据，相关用法详见[脚本高级](https://meituan-dianping.github.io/lyrebird/plugins/bugit.html)\n\n\n### submit()\n\n提交函数返回一个数组，数组中包含若干提交步骤需要回调的函数。\n\n>submit()方法返回一组用于处理 submit 行为的方法。\n\n方法说明\n方法名|入参|说明\n:--:|:--:|:--\nissue|context|处理 Bug表单中的信息，通过 API 向 Bug 管理系统提交 Issue\nattachments|context|处理附件信息（如 [Android插件](https://meituan-dianping.github.io/lyrebird/guide/plugin.html#android插件)、[iOS插件](https://meituan-dianping.github.io/lyrebird/guide/plugin.html#ios插件)提供的截图或 Log），通过 API 向 创建的 Issue 中添加附件\n\n#### submit()方法示例代码（以JIRA服务为例）\n```python\ndef submit():\n    \"\"\"\n    BugIt callback function\n\n    BugIt will call this function when user tap submit button.\n    This function should return a array, contains all submit actions.\n\n    Each submit-action function have a argument. It contains form data and attachments info.\n    \"\"\"\n    return [issue, attachments]\n\ndef issue(context):\n    \"\"\"\n    This function is used to submit Issue \n    \"\"\"\n    form_data = context['issue']\n    jira_fields = {}\n\n    # transform from_data to payload submited to API of JIRA\n    for form_item in form_data:\n        if form_item['name'] == '主题' :\n            jira_fields['summary'] = form_item['value']\n        elif form_item['name'] == '版本':\n            jira_fields['version'] = {\n                id:form_item['value']\n                }\n        elif form_item['name'] == '描述':\n            jira_fields['description'] = form_item['value']\n            # add extraMsg to description \n            if form_item['extraMsg']:\n                for add_des in form_item['extraMsg']:\n                    jira_fields['description'] +='\\n'\n                    jira_fields['description'] +='------------------------------\\n'\n                    jira_fields['description'] +=add_des['message']\n\n    url = 'http://www.example.com/jira/rest/api/2/issue'\n    header = {\n        'Content-Type': 'application/json;charset=utf-8'\n    }\n    resp = requests.post(url, auth=('YOUR JIRA_USER_NAME', 'YOUR_JIRA_PASSWD'),json={\"fields\": jira_fields},headers=header)\n    \n    if resp.status_code >= 200 and resp.status_code < 300:\n        body = json.loads(response.text)\n        if body.get('key') :\n            context['key'] = body['key']\n        else:\n            raise Exception(f'Submit failed {response.text}')\n    else:\n        raise Exception(f'Create issue failed with code {response.status_code}\\n{response.text}')\n\n\ndef attachments(context):\n    \"\"\"\n    This function is used to upload attachments to the Issue which has been created\n    \"\"\"\n    key = context['key']\n    attachments = context['attachments']\n\n    if len(attachments) == 0:\n        # No attachments\n        return\n\n    url = f'http://www.example.com/jira/rest/api/2/issue/{key}/attachments'\n    headers = {\n        'X-Atlassian-Token': 'nocheck'\n    }\n    multiple_files = []\n\n    # transform attachment data to payload submited to API of JIRA\n    for attachment in attachments:\n        attachment_path = Path(attachment['path'])\n        multiple_files.append(\n            ('file', (attachment_path.name, open(str(attachment_path), 'rb')))\n        )\n    response = requests.post(url, files=multiple_files, headers=headers)\n\n    if response.status_code == 200 and response.json()['code'] == 0:\n        print('Submit attachments success')\n    else:\n        raise Exception(f'Submit failed {response.text}')\n```\n\n完整脚本请参考: [示例脚本](example/TEST.py)\n\n脚本高级功能请参考:[脚本高级](https://meituan-dianping.github.io/lyrebird/plugins/bugit.html)\n\n----\n# 开发者指南\n\n## 开发环境\n- macOS OR Linux\n- Python3\n- NodeJS\n- vscode(推荐)\n- Chrome(推荐)\n\n## 调试代码\n\n### Vscode debug配置\n```json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Terminal (integrated)\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"integratedTerminal\"\n        },\n        {\n            \"name\": \"Server\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"module\": \"lyrebird\",\n            \"args\": [\n                \"-b\",\n                \"-vvv\",\n                \"--plugin\",\n                \"${workspaceFolder}\"\n            ],\n            \"console\": \"integratedTerminal\"\n        },\n        {\n            \"name\": \"Client\",\n            \"type\": \"chrome\",\n            \"request\": \"launch\",\n            \"url\": \"http://localhost:8080/\",\n            \"webRoot\": \"${workspaceFolder}/frontend/src/\",\n            \"sourceMapPathOverrides\": {\n                \"webpack:///src/*\": \"${webRoot}/*\"\n            },\n            \"timeout\": 30000\n        }\n    ]\n}\n```\n### 后端代码\n1. 激活python虚拟环境\n\n    通过 source venv/bin/activate 来激活该环境\n2.  通过Debug功能启动\n    \n    按照上面 debug配置中 python:Lyrebrid配置启动即可\n### 前端代码\n1. 启动node server\n\n```\n# 进入前端目录\ncd frontend\n\n# 启动前端node serve\nnpm run serve\n```\n\n2. 通过Debug功能启动浏览器\n\n    按照上面 debug配置中 vuejs: chrome 配置启动即可\n    >注意: vscode 需要安装chrome debug插件",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Meituan-Dianping/lyrebird-bugit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lyrebird-bugit",
    "package_url": "https://pypi.org/project/lyrebird-bugit/",
    "platform": "",
    "project_url": "https://pypi.org/project/lyrebird-bugit/",
    "project_urls": {
      "Homepage": "https://github.com/Meituan-Dianping/lyrebird-bugit"
    },
    "release_url": "https://pypi.org/project/lyrebird-bugit/1.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15969780,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0cf4c3c5a438352261e974c8c84a956364cf236e97c2f958410c597544631e0",
        "md5": "c2de68539e60bac22922fa9a6f094cae",
        "sha256": "b2ddac4fc826688a87529231fdf884163f8a1fcee7b422b6c735b0fcc47381f6"
      },
      "downloads": -1,
      "filename": "lyrebird-bugit-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c2de68539e60bac22922fa9a6f094cae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2514880,
      "upload_time": "2020-06-30T03:21:58",
      "upload_time_iso_8601": "2020-06-30T03:21:58.889106Z",
      "url": "https://files.pythonhosted.org/packages/b0/cf/4c3c5a438352261e974c8c84a956364cf236e97c2f958410c597544631e0/lyrebird-bugit-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}