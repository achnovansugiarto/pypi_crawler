{
  "info": {
    "author": "EBS Integrator",
    "author_email": "office@ebs-integrator.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "# Django Rest Framework - Utils\n\nA set of util functions used in EBS Projects\n\n### Install:\n\n```bash\npip install drf_util\n```\n\n### Functions\n\n#### Get value from an object by path\n\nDefinition:\n\n```python\ngt(obj, path, default=None, sep='.')\n```\n\nUsage:\n\n```python\n>>> data = {\"a\":{\"b\": 1}}\n>>> print(gt(data, 'a.b'))\n1\n```\n\n#### Get recursive values from a dict by keys\n\nDefinition:\n\n```python\nget_object_labels(obj, path, default=None)\n```\n\nUsage:\n\n```python\n>>> data = {\"a\": {\"b\": 'title'}, \"c\": 'test'}\n>>> print(get_object_labels(data))\n['title', 'test']\n\n>>> data = {\"a\": {\"b\": 'title'}, \"c\": 'test'}\n>>> print(get_object_labels(data, ['c']))\n['test']\n```\n\n#### map() alternative with chunk select\n\nDefinition:\n\n```python\nfetch_objects(instance, function, select=50)\n```\n\nUsage:\n\n```python\n>>> def print_name(obj):\n        print obj.name\n>>>\n>>> fetch_objects(UserBigList.objects.order_by('id'), print_name, 500)\n```\n\n#### Select a first true value\n\nDefinition:\n\n```python\nany_value(items: list)\n```\n\nUsage:\n\n```python\n>>> print(any_value('', None, 0, \"Some text\", 50000))\nSome text\n```\n\n#### Recursive merge two dict\n\nDefinition:\n\n```python\ndict_merge(a, b, path=None)\n```\n\nUsage:\n\n```python\n>>> a = {'a': {'c': 1, 'd': {'x': 1}}}\n>>> b = {'a': {'e': 1, 'd': {'y': 1}}}\n>>> print(dict_merge(a, b))\n{'a': {'c': 1, 'e': 1, 'd': {'x': 1, 'y': 1}}}\n```\n\n#### Iterate big query\n\nDefinition:\n\n```python\niterate_query(queryset, offset_field, offset_start, limit=100)\n```\n\nUsage:\n\n```python\nqueryset = Thing.objects.all()\nfor _ in utils.iterate_query(queryset, 'id', 0):\n    ...\n```\n\n#### Get applications from folder\n\nDefinition:\n\n```python\nget_applications(base_folder='apps', inside_file='', only_directory=True)\n```\n\nUsage:\n\n```python\n# settings.py\nAPPS_PATH = 'path_to_aps'  # default is apps\n...\n\n# any file\nget_applications()  # ['path_to_aps.app1', 'path_to_aps.app2']\nget_applications(inside_file='models.py',\n                 only_directory=False)  # ['path_to_aps.app1.models', 'path_to_aps.app2.models']\n```\n\nTricks:\n\n```python\n# settings.py\nINSTALLED_APPS = get_applications()\n...\n\n# urls.py\nurlpatterns = [\n    path(\"\", include(application_urls))\n    \n    for application_urls in get_applications(\n        inside_file='urls.py', only_directory=False\n    ))\n]\n```\n\n#### Prefetch and select related by serializer \nDefinition:\n```python\nadd_related(queryset, serializer)\n```\n\nUsage:\n```python\nqueryset = add_related(Thing.objects.all(), ThingSerializer)\n```\n\n### Decorators\n\n##### serialize_decorator\n\nDefinition:\n\n```python\nserialize_decorator(serializer_method, preview_function=None, read_params=False)\n```\n\nUsage:\n\n```python\nclass RestoreUserPassword(GenericAPIView):\n    @serialize_decorator(RestoreUserSerializer)\n    def post(self, request, *args, **kwargs):\n        return Response({\"valid\": True})\n```\n\n##### await_process_decorator\n\nDecorator for creating a queue for using a function, it is needed to adjust the call of a function from different\nprocesses (Ð¡elery, Threads). For example, this decorator can be used to limit the number of requests in the parser.\n\nDefinition:\n\n```python\n# rate : count of usage some function, by default it's 20 times\n# period : period of usage some function,  by default it's 1 minute\nawait_process_decorator(rate=20, period=60)\n```\n\nUsage:\n\n```python\n@await_process_decorator(rate=10, period=5)  # 10 times per 5 seconds \ndef simple_print(text):\n    print(text)\n```\n\n### Managers\n\n- NoDeleteManager\n\n### Models\n\n#### BaseModel - with created_at and updated_at\n\n```python\nclass Thing(BaseModel):\n    title = models.CharField(max_length=20)\n\n    class Meta:\n        db_table = 'another_things'\n```\n\n- CommonModel - with date_created and date_updated\n- NoDeleteModel - with date_deleted\n- AbstractJsonModel - with languages\n\n### Validators\n\n- ObjectExistValidator - check if object exists\n- ObjectUniqueValidator - check if object not exists\n- PhoneValidator - check phone\n\n### Serializers\n\n#### BaseModelSerializer - simple serializer for BaseModel class\n\n```python\nclass ThingSerializer(BaseModelSerializer):\n    class Meta(BaseModelSerializer.Meta):\n        model = Thing\n```\n\n#### ElasticFilterSerializer - make easy conversion between serializer data and elastic filters\n\n```python\nclass TenderFilterSerializer(PaginatorSerializer, ElasticFilterSerializer):\n    sort_criteria = [{\"date_updated\": {\"order\": \"desc\"}}, \"_score\"]\n\n    status = StringListField(required=False)\n    date_start = serializers.DateField(required=False)\n    date_end = serializers.DateField(required=False)\n\n    def filter_status(self, value):\n        return {'terms': {\n            'search_status.keyword': value\n        }}\n\n    def filter_date_start(self, value):\n        return {\n            \"range\": {\n                \"tenderPeriod.startDate\": {'gte': value}\n            }\n        }\n\n    def filter_date_end(self, value):\n        return {\n            \"range\": {\n                \"tenderPeriod.startDate\": {'lte': value}\n            }\n        }\n\n\nclass TenderListView(GenericAPIView):\n    @serialize_decorator(TenderFilterSerializer)\n    def get(self, request, *args, **kwargs):\n        return Response(es_app.search_response(request.serializer, 'tenders_index'))\n```\n\n#### FilterSerializer - filter queryset by serializer fields\n\n```python\nclass ServiceListQuerySerializer(FilterSerializer):\n    name = CharField(required=False)\n    tag_id = CharField(required=False)\n    type = CharField(required=False)\n    status = CharField(required=False)\n\n    def filter_name(self, value, queryset):\n        return queryset.filter(name__icontains=value)\n\n    def filter_tag_id(self, value, queryset):\n        return queryset.filter(tags__contains=value)\n\n    def filter_type(self, value, queryset):\n        return queryset.filter(type=value)\n\n    def filter_status(self, value, queryset):\n        return queryset.filter(status=value)\n\n\nclass ServiceListView(ListAPIView):\n    serializer_class = ServiceListQuerySerializer\n\n    @swagger_auto_schema(query_serializer=ServiceListQuerySerializer)\n    @serialize_decorator(ServiceListQuerySerializer)\n    def get(self, request):\n        services = request.serializer.get_filter(request.valid, Service.objects.all())\n        return Response(ServiceSerializer(instance=services, many=True).data)\n```\n\n#### ChangebleSerializer - metamorphic serializer\n\n```python\nclass ContractNoticeCancelView(GenericAPIView):\n    def put(self, request):\n        serializer_meta = {\n            'id': PrimaryKeyRelatedField(queryset=Tender.objects.all(), required=True),\n            'info': {\n                'rationale': CharField(required=True),\n                'description': CharField(required=True),\n            },\n            'documents': DocumentFileSerializer(required=True, many=True)\n        }\n        serializer = ChangebleSerializer(data=request.data)\n        serializer.update_properties(serializer_meta)\n        serializer.is_valid(raise_exception=True)\n\n        return Response({\"valid\": True})\n```\n\n#### PaginatorSerializer - serializer for paginating\n\n```python\nclass ListUserNotification(GenericAPIView):\n    @serialize_decorator(PaginatorSerializer)\n    def get(self, request):\n        notifications = NotificationEvent.objects.filter(user=request.user)\n        return request.serializer.response(notifications, serializer=ListNotificationSerializer)\n```\n\n#### Another serializers\n\n- StringListField - simple string list of chars\n- EmptySerializer - simple empty serializer\n- IdSerializer - simple id serializer\n- ReturnSuccessSerializer - simple success, message serializer\n\n### Serializers functions\n\n#### build_model_serializer - build serializer with Inheritance\n\nDefinition:\n```python\nbuild_model_serializer(base=BaseModelSerializer, add_bases=True, **kwargs)\n```\n\nUsage:\n```python\nThingSerializer = build_model_serializer(\n    meta_model=Thing,\n)\n\nCreateThingSerializer = build_model_serializer(\n    ThingSerializer,\n    meta_fields=('name', 'desctiption')\n)\n\nCreateThingSerializer = build_model_serializer(\n    ThingSerializer,\n    meta_fields=('name', 'desctiption')  # 'id', 'created_at' and 'updated_at' is added automatically\n)\n\nShortThingSerializer = build_model_serializer(\n    ThingSerializer,\n    meta_fields=('name', 'desctiption'),\n    add_bases=False  # so as not to add 'id', 'created_at' and 'updated_at'\n)\n\n\nAnotherThingSerializer = build_model_serializer(\n    things=ThingSerializer(many=True),\n    meta_model=AnotherThing,\n)\n```\n\n\n---\n**Note:**\nParameters with prefix 'meta_' is added to the meta class, the rest are added in the serializer class \n---\n\n\n\n### Views\n\nNote: for them to work, set in swagger settings \nDEFAULT_AUTO_SCHEMA_CLASS=drf_util.mixins.CustomAutoSchema\n\n#### BaseModelViewSet\n\nUsage:\n```python\nclass ThingViewSet(BaseModelViewSet):\n    queryset = Thing.objects.all()\n    serializer_class = ThingSerializer\n```\n\nAttributes:\n\n```python\nqueryset = None  # QuerySet\n\nquery_serializer = None  # Serializer for query\nserializer_class = None  # Default and response serializer\nserializer_create_class = None  # Body serializer\nserializer_by_action = {}  # Serializer by action {[action]: [serializer]}\n\npagination_class = CustomPagination  # Pagination\n\nfilter_backends = (filters.OrderingFilter, CustomFilterBackend, filters.SearchFilter,)  # Filter backends\nfilter_class = None  # FilterSet\nsearch_fields = ()  # Fields for search query_param\nordering_fields = '__all__'  # Fields for ordering query_param\nordering = ['-id']  # Default ordering fields\n\npermission_classes_by_action = {\"default\": [IsAuthenticated]}  # Permission class by action {[action]: [permissions]}\n```\n\n#### Another views\n\n- BaseViewSet\n- BaseCreateModelMixin\n- BaseUpdateModelMixin\n- BaseListModelMixin\n- BaseReadOnlyViewSet\n- BaseModelItemViewSet\n- BaseModelViewSet\n\n\n### Pagination\n\n#### CustomPagination\n\nDeclaration:\n\n```python\nclass CustomPagination(PageNumberPagination):\n    page = DEFAULT_PAGE\n    page_size = 10\n    page_size_query_param = 'per_page'\n\n    def get_paginated_response(self, data):\n        custom_paginator = dict(\n            count=self.page.paginator.count, # noqa\n            total_pages=self.page.paginator.num_pages, # noqa\n            per_page=int(self.request.GET.get('per_page', self.page_size)),\n            current_page=int(self.request.GET.get('page', DEFAULT_PAGE)), results=data\n        )\n        return Response(custom_paginator)\n```\n\n### Tests\n\n#### CustomClient - client which check response for status code\n\nUsage:\n```python\nclass BaseTestCase(TestCase):\n    client_class = CustomClient\n    base_view = 'things'\n    \n    def test_list(self) -> None:\n        self.client.get(reverse(f'{self.base_view}-list'))\n        \n    def test_duplicate(self):\n        self.client.post(\n            reverse(f'{self.base_view}-duplicate', args=(test_instance.pk,)),\n            assert_status_code=status.HTTP_200_OK\n        ).json()\n```\n\n#### BaseTestCase - test case with custom client\n\nUsage:\n\n```python\nclass ViewsTestCase(BaseTestCase, TestCase):\n    def test_swagger(self):\n        response = self.client.get('/swagger/?format=openapi').json()\n        self.assertEqual(len(response['schemes']), 2)\n```\n\n---\n**Note:**\nDefault setUp function authenticates the user\n---\n\n#### CRUDTestCase - test case with crud\n\nUsage:\n\n```python\nclass ThingCRUDTestCase(CRUDTestCase, TestCase):\n    fixtures = ['tests/fixtures.json']\n    base_view = 'things'\n    queryset = Thing.objects.all()\n    fake_data = {\n        'title': 'Thing name'\n    }\n```\n\n\n### Middlewares\n#### PrintSQlMiddleware - middleware to print sql request and their statistics\n\nUsage:\n\n```python\nMIDDLEWARE = [\n    'drf_util.middlewares.PrintSQlMiddleware',\n    ...\n]\n```\n\n### Swagger utils\n#### CustomAutoSchema - render schema with custom serializers methods\n\nUsage:\n\n```python\nSWAGGER_SETTINGS = {\n    'DEFAULT_AUTO_SCHEMA_CLASS': 'drf_util.mixins.CustomAutoSchema'\n    ...\n}\n```\n\n#### get_custom_schema_view - function to get swagger with HTTP and HTTPS\n\nDeclaration:\n\n```python\nget_custom_schema_view(title, default_version='v1', description='', *args, **kwargs)\n```\n\nUsage:\n\n```python\nschema_view = get_custom_schema_view(\n    title=\"API Documentation\",\n    description=\"This is API Documentation\"\n)\n\nurlpatterns = [\n    path(\"\", schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path(\"redoc\", schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),    \n]\n```\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EnterpriseBusinessSolutions/drf-util",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-util",
    "package_url": "https://pypi.org/project/drf-util/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-util/",
    "project_urls": {
      "Homepage": "https://github.com/EnterpriseBusinessSolutions/drf-util"
    },
    "release_url": "https://pypi.org/project/drf-util/1.0.10/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "Django Rest Framework Utils",
    "version": "1.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14306922,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f50045dfb6b69e9462e5977fa8d906b86f489429ff94aefc62d3d9c3e6d487a6",
        "md5": "d99355b1c1a5d91f8424dfccbb4c3754",
        "sha256": "1763c36da5547f7de73d8bc6d4b1fe30e2ea6043e281b48a6ca6f33b1f3ae179"
      },
      "downloads": -1,
      "filename": "drf_util-1.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "d99355b1c1a5d91f8424dfccbb4c3754",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 22905,
      "upload_time": "2021-11-09T07:00:46",
      "upload_time_iso_8601": "2021-11-09T07:00:46.789871Z",
      "url": "https://files.pythonhosted.org/packages/f5/00/45dfb6b69e9462e5977fa8d906b86f489429ff94aefc62d3d9c3e6d487a6/drf_util-1.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}