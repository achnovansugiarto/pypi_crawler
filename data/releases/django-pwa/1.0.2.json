{
  "info": {
    "author": "Silvio Luis",
    "author_email": "silviolleite@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "django-pwa\n==========\n\n|Build Status| |Maintainability| |codecov| |PyPI - Downloads| |PyPI -\nDownloads|\n\nThis Django app turns your project into a `progressive web\napp <https://developers.google.com/web/progressive-web-apps/>`__.\nNavigating to your site on an Android phone will prompt you to add the\napp to your home screen.\n\n.. figure:: https://github.com/silviolleite/django-pwa/raw/master/images/screenshot1.png\n   :alt: Prompt for install\n\n   Prompt for install\n\nLaunching the app from your home screen will display your app `without\nbrowser\nchrome <https://github.com/silviolleite/django-pwa/raw/master/images/screenshot2.png>`__.\nAs such, it’s critical that your application provides all navigation\nwithin the HTML (no reliance on the browser back or forward button).\n\nRequirements\n============\n\nProgressive Web Apps require HTTPS unless being served from localhost.\nIf you’re not already using HTTPS on your site, check out `Let’s\nEncrypt <https://letsencrypt.org/>`__ and\n`ZeroSSL <https://zerossl.com/>`__.\n\nInstallation\n============\n\nInstall from PyPI:\n\n::\n\n   pip install django-pwa\n\nConfiguration\n=============\n\nAdd ``pwa`` to your list of ``INSTALLED_APPS`` in settings.py:\n\n.. code:: python\n\n   INSTALLED_APPS = [\n       ...\n       'pwa',\n       ...\n   ]\n\nConfigure your app name, description, icons and splash screen images in\nsettings.py:\n\n.. code:: python\n\n\n   PWA_APP_NAME = 'My App'\n   PWA_APP_DESCRIPTION = \"My app description\"\n   PWA_APP_THEME_COLOR = '#0A0302'\n   PWA_APP_BACKGROUND_COLOR = '#ffffff'\n   PWA_APP_DISPLAY = 'standalone'\n   PWA_APP_ORIENTATION = 'any'\n   PWA_APP_START_URL = '/'\n   PWA_APP_ICONS = [\n       {\n           'src': '/static/images/my_app_icon.png',\n           'sizes': '160x160'\n       }\n   ]\n   PWA_APP_SPLASH_SCREEN = [\n       {\n           'src': '/static/images/icons/splash-640x1136.png',\n           'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'\n       }\n   ]\n   PWA_APP_DIR = 'ltr'\n   PWA_APP_LANG = 'en-US'\n\nAll settings are optional, and the app will work fine with its internal\ndefaults. Highly recommend setting at least ``PWA_APP_NAME``,\n``PWA_APP_DESCRIPTION``, ``PWA_APP_ICONS`` and\n``PWA_APP_SPLASH_SCREEN``.\n\nAdd the progressive web app URLs to urls.py:\n\n.. code:: python\n\n   from django.urls import path, include\n\n   urlpatterns = [\n       ...\n       path('', include('pwa.urls')),  # You MUST use an empty string as the URL prefix\n       ...\n   ]\n\nInject the required meta tags in your base.html (or wherever your HTML\n<head> is defined):\n\n.. code:: html\n\n   {% load pwa %}\n\n   <head>\n       ...\n       {% progressive_web_app_meta %}\n       ...\n   </head>\n\nTroubleshooting\n===============\n\nWhile running the Django test server:\n\n1. Verify that ``/manifest.json`` is being served\n2. Verify that ``/serviceworker.js`` is being served\n3. Verify that ``/offline`` is being served\n4. Use the Application tab in the Chrome Developer Tools to verify the\n   progressive web app is configured correctly.\n5. Use the “Add to homescreen” link on the Application Tab to verify you\n   can add the app successfully.\n\nThe Service Worker\n==================\n\nBy default, the service worker implemented by this app is:\n\n.. code:: js\n\n   // Base Service Worker implementation.  To use your own Service Worker, set the PWA_SERVICE_WORKER_PATH variable in settings.py\n\n   var staticCacheName = \"django-pwa-v\" + new Date().getTime();\n   var filesToCache = [\n       '/offline',\n       '/css/django-pwa-app.css',\n       '/images/icons/icon-72x72.png',\n       '/images/icons/icon-96x96.png',\n       '/images/icons/icon-128x128.png',\n       '/images/icons/icon-144x144.png',\n       '/images/icons/icon-152x152.png',\n       '/images/icons/icon-192x192.png',\n       '/images/icons/icon-384x384.png',\n       '/images/icons/icon-512x512.png',\n       '/static/images/icons/splash-640x1136.png',\n       '/static/images/icons/splash-750x1334.png',\n       '/static/images/icons/splash-1242x2208.png',\n       '/static/images/icons/splash-1125x2436.png',\n       '/static/images/icons/splash-828x1792.png',\n       '/static/images/icons/splash-1242x2688.png',\n       '/static/images/icons/splash-1536x2048.png',\n       '/static/images/icons/splash-1668x2224.png',\n       '/static/images/icons/splash-1668x2388.png',\n       '/static/images/icons/splash-2048x2732.png'\n   ];\n\n   // Cache on install\n   self.addEventListener(\"install\", event => {\n       this.skipWaiting();\n       event.waitUntil(\n           caches.open(staticCacheName)\n               .then(cache => {\n                   return cache.addAll(filesToCache);\n               })\n       )\n   });\n\n   // Clear cache on activate\n   self.addEventListener('activate', event => {\n       event.waitUntil(\n           caches.keys().then(cacheNames => {\n               return Promise.all(\n                   cacheNames\n                       .filter(cacheName => (cacheName.startsWith(\"django-pwa-\")))\n                       .filter(cacheName => (cacheName !== staticCacheName))\n                       .map(cacheName => caches.delete(cacheName))\n               );\n           })\n       );\n   });\n\n   // Serve from Cache\n   self.addEventListener(\"fetch\", event => {\n       event.respondWith(\n           caches.match(event.request)\n               .then(response => {\n                   return response || fetch(event.request);\n               })\n               .catch(() => {\n                   return caches.match('offline');\n               })\n       )\n   });\n\nAdding Your Own Service Worker\n==============================\n\nTo add service worker functionality, you’ll want to create a\n``serviceworker.js`` or similarly named template in a template\ndirectory, and then point at it using the PWA_SERVICE_WORKER_PATH\nvariable (PWA_APP_FETCH_URL is passed through).\n\n.. code:: python\n\n   PWA_SERVICE_WORKER_PATH = 'my_app/serviceworker.js'\n\nThe offline view\n================\n\nBy default, the offline view is implemented in\n``templates/offline.html`` You can overwrite it in a template directory\nif you continue using the default ``serviceworker.js``.\n\nFeedback\n========\n\nI welcome your feedback and pull requests. Enjoy!\n\nLicense\n=======\n\nAll files in this repository are distributed under the MIT license.\n\n.. |Build Status| image:: https://travis-ci.org/silviolleite/django-pwa.svg\n   :target: https://travis-ci.org/silviolleite/django-pwa\n.. |Maintainability| image:: https://api.codeclimate.com/v1/badges/246542ea921058c4f76f/maintainability\n   :target: https://codeclimate.com/github/silviolleite/django-pwa/maintainability\n.. |codecov| image:: https://codecov.io/gh/silviolleite/django-pwa/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/silviolleite/django-pwa\n.. |PyPI - Downloads| image:: https://img.shields.io/pypi/dm/django-pwa.svg\n   :target: https://pypi.org/project/django-pwa/\n.. |PyPI - Downloads| image:: https://img.shields.io/pypi/v/django-pwa.svg\n   :target: https://pypi.org/project/django-pwa\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/silviolleite/django-pwa",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pwa",
    "package_url": "https://pypi.org/project/django-pwa/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pwa/",
    "project_urls": {
      "Homepage": "http://github.com/silviolleite/django-pwa"
    },
    "release_url": "https://pypi.org/project/django-pwa/1.0.2/",
    "requires_dist": [
      "django (>=2)"
    ],
    "requires_python": "",
    "summary": "A Django app to include a manifest.json and Service Worker instance to enable progressive web app behavior",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16161160,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37e13d54444deed9261a627005b3af163e6f555681f9c58a14b7f2a4283932f2",
        "md5": "fca27d4872eff2fe2b2999d639d18a9f",
        "sha256": "e25b3a5a6dedd739d61e9360a7e6ca788319873390f7187d8ae47dc8394448b7"
      },
      "downloads": -1,
      "filename": "django_pwa-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fca27d4872eff2fe2b2999d639d18a9f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 343279,
      "upload_time": "2019-01-23T13:57:58",
      "upload_time_iso_8601": "2019-01-23T13:57:58.554314Z",
      "url": "https://files.pythonhosted.org/packages/37/e1/3d54444deed9261a627005b3af163e6f555681f9c58a14b7f2a4283932f2/django_pwa-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f35fe1e7bc197454bdfb79ea12139158e2b17e9e445dd331f6607d238746dcf8",
        "md5": "45172963e758dd1c8926a87095f22e3b",
        "sha256": "ec1cf9ae9766b41f4a91d619c04f99a1afb36982527f59b68eaf2bbf36b055a1"
      },
      "downloads": -1,
      "filename": "django-pwa-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "45172963e758dd1c8926a87095f22e3b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 336786,
      "upload_time": "2019-01-23T13:58:01",
      "upload_time_iso_8601": "2019-01-23T13:58:01.014855Z",
      "url": "https://files.pythonhosted.org/packages/f3/5f/e1e7bc197454bdfb79ea12139158e2b17e9e445dd331f6607d238746dcf8/django-pwa-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}