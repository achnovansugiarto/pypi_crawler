{
  "info": {
    "author": "DLTK",
    "author_email": "connect@qubitai.tech",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "\n**DLTK Deep Learning API or DLTKDL** is an open source lightweight wrapper for the deep learning library TensorFlow and Keras (and other libraries) to help build, train, and deploy neural networks and other machine learning models. Inspired by ML framework extensions like fastai and ludwig, it is designed to make deep learning and AI more accessible and easier to apply for both newcomers and experienced practitioners. With only a few lines of code, dltkdl allows you to easily and quickly:\n\n**Installation Instructions**\n\nMake sure pip is up-to-date with:\n\nInstall TensorFlow 2 if it is not already installed (e.g., pip install tensorflow==2.3.0)\n\nInstall dltkdl: \n```\npip install dltkdl\n```\n\nThe above should be all you need on Linux systems and cloud computing environments like Google Colab and AWS EC2. If you are using dltkdl on a Windows computer, you can follow these more [detailed instructions](https://github.com/dltk-ai/Deep-Learning/blob/master/FAQ.md) that include some extra steps.\n\nSome important things to note about installation:\n\nIf using dltkdl on a local machine with a GPU (versus Google Colab, for example), you'll need to install GPU support for TensorFlow 2.\n\nOn Google Colab, TensorFlow 2 should be already installed. You should be able to use dltkdl with any version of TensorFlow 2. However, we currently recommend using TensorFlow 2.3.0 (if possible) due to a TensorFlow bug that will not be fixed until TensorFlow 2.4 that affects the Learning-Rate-Finder.\n\nSince some dltkdl dependencies have not yet been migrated to tf.keras in TensorFlow 2 (or may have other issues), dltkdl is temporarily using forked versions of some libraries. If not installed, dltkdl will complain when a method or function needing either of these libraries is invoked. \n\n### Available Deep Learning algorithms:\n\n#### Artificial Neural Network(ANN) : \n1. **Multilayer perceptron or mlp**: a configurable multilayer perceptron with categorical variable embeddings.\n\n#### Convolutional Neural Network(CNN) :\n1. **pretrained_resnet50**: 50-layer Residual Network (pretrained on ImageNet)\n2. **resnet50**: 50-layer Residual Network (randomly initialized)\n3. **pretrained_mobilenet**: MobileNet Neural Network (pretrained on ImageNet)\n4. **mobilenet**: MobileNet Neural Network (randomly initialized)\n5. **pretrained_inception**: Inception Version 3  (pretrained on ImageNet)\n6. **inception**: Inception Version 3 (randomly initialized)\n7. **wrn22**: 22-layer Wide Residual Network (randomly initialized)\n8. **default_cnn**: a default Convolutional Neural Network\n\n#### Recurrent neural Network(RNN) and Long short-term memory(LSTM) :\n1. **fasttext**: a fastText-like model [http://arxiv.org/pdf/1607.01759.pdf]\n2. **logreg**: logistic regression using a trainable Embedding layer\n3. **nbsvm**: NBSVM model [http://www.aclweb.org/anthology/P12-2018]\n4. **bigru**: Bidirectional GRU with pretrained word vectors [https://arxiv.org/abs/1712.09405]\n5. **standard_gru**: simple 2-layer GRU with randomly initialized embeddings\n6. **bert**: Bidirectional Encoder Representations from Transformers (BERT) [https://arxiv.org/abs/1810.04805]\n7. **distilbert**: distilled, smaller, and faster BERT from Hugging Face [https://arxiv.org/abs/1910.01108]\n\n### Examples: \n\nYou can also chckout step-by step implementation by following python notebooks under tutorial folder. \n\nExample **Hourse price prediction using Multilayer perceptron Neural Network**\n```\nimport urllib.request\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_columns', None)\nimport dltkdl\nfrom dltkdl import tabledata\n\ntrain_df = pd.read_csv('train.csv', index_col=0)\n# print(train_df)\ntrain_df.drop(['Alley', 'PoolQC', 'MiscFeature', 'Fence', 'FireplaceQu', 'Utilities'], 1, inplace=True)\ntrn, val, preproc = tabledata.load_from_dataframe(train_df, is_regression=True, label_columns='SalePrice',\n                                                  random_state=42)\n# Invoking multilayer perceptron NN\nmodel = tabledata.tabular_regression_model('mlp', trn)\nlearner = dltkdl.get_learner(model, train_data=trn, val_data=val, batch_size=128)\nlearner.lr_find(show_plot=True, max_epochs=16)\nlearner.autofit(1e-1)\nprint(learner.evaluate(test_data=val))\n```\nExample: **Classifying Images of Dogs and Cats Using a Pretrained ResNet50 model**\n\n```\nimport dltkdl\nfrom dltkdl import vision as vis\n\n# load data\n(train_data, val_data, preproc) = vis.images_from_folder(\n                                              datadir='data/dogscats',\n                                              data_aug = vis.get_data_aug(horizontal_flip=True),\n                                              train_test_names=['train', 'valid'], \n                                              target_size=(224,224), color_mode='rgb')\n\n# load model\nmodel = vis.image_classifier('pretrained_resnet50', train_data, val_data, freeze_layers=80)\n\n# wrap model and data in dltkdl.Learner object\nlearner = dltkdl.get_learner(model=model, train_data=train_data, val_data=val_data, \n                             workers=8, use_multiprocessing=False, batch_size=64)\n\n# find good learning rate\nlearner.lr_find()             # briefly simulate training to find good learning rate\nlearner.lr_plot()             # visually identify best learning rate\n\n# train using triangular policy with ModelCheckpoint and implicit ReduceLROnPlateau and EarlyStopping\nlearner.autofit(1e-4, checkpoint_folder='/tmp/saved_weights')\n```\nExample: **Language translation(English to Dutch)**\n```\nfrom dltkdl import text \ntranslator = text.Translator(model_name='Helsinki-NLP/opus-mt-en-nl')\nsrc_text = '''My name is Sarah and I live in London.'''\nprint(translator.translate(src_text))\n\nOutput: Mijn naam is Sarah en ik woon in Londen.\n```\nExample: **Text classification**\n```\n# load text data\ncategories = ['alt.atheism', 'soc.religion.christian', 'comp.graphics', 'sci.med']\nfrom sklearn.datasets import fetch_20newsgroups\n\ntrain_b = fetch_20newsgroups(subset='train', categories=categories, shuffle=True)\ntest_b = fetch_20newsgroups(subset='test', categories=categories, shuffle=True)\n(x_train, y_train) = (train_b.data, train_b.target)\n(x_test, y_test) = (test_b.data, test_b.target)\n\n# build, train, and validate model (Transformer is wrapper around transformers library)\nimport dltkdl\nfrom dltkdl import text\n\nMODEL_NAME = 'distilbert-base-uncased'\nt = text.Transformer(MODEL_NAME, maxlen=500, class_names=train_b.target_names)\ntrn = t.preprocess_train(x_train, y_train)\nval = t.preprocess_test(x_test, y_test)\nmodel = t.get_classifier()\nlearner = dltkdl.get_learner(model, train_data=trn, val_data=val, batch_size=6)\nlearner.fit_onecycle(5e-5, 4)\nlearner.validate(class_names=t.get_classes())  # class_names must be string values\n\nOutput: \n                        precision    recall  f1-score   support\n\n           alt.atheism       0.91      0.93      0.92       319\n         comp.graphics       0.98      0.96      0.97       389\n               sci.med       0.97      0.96      0.96       396\nsoc.religion.christian       0.95      0.97      0.96       398\n\n              accuracy                           0.96      1502\n             macro avg       0.95      0.95      0.95      1502\n          weighted avg       0.96      0.96      0.96      1502\n\narray([[296,   1,   6,  16],\n       [ 12, 372,   5,   0],\n       [  8,   6, 379,   3],\n       [  8,   2,   0, 388]])\n```\n\n## Founding Member\n[![](https://github.com/shreeramiyer.png?size=50)](https://github.com/shreeramiyer)\n## Lead Maintainer\n[![](https://github.com/GHub4Naveen.png?size=50)](https://github.com/GHub4Naveen)\n## Core Maintainer\n[![](https://github.com/dltk-ai.png?size=50)](https://github.com/dltk-ai)\n## Core Contributers \n[![](https://github.com/SivaramVeluri15.png?size=50)](https://github.com/SivaramVeluri15)\n[![](https://github.com/vishnupeesapati.png?size=50)](https://github.com/vishnupeesapati)\n[![](https://github.com/EpuriHarika.png?size=50)](https://github.com/EpuriHarika/)\n[![](https://github.com/nageshsinghc4.png?size=50)](https://github.com/nageshsinghc4)\n[![](https://github.com/appareddyraja.png?size=50)](https://github.com/appareddyraja)\n[![](https://github.com/shakeeldhada.png?size=50)](https://github.com/shakeeldhada)\n[![](https://github.com/thomasbinish.png?size=50)](https://github.com/thomasbinish)\n[![](https://github.com/kavyavelagapudi252.png?size=50)](https://github.com/kavyavelagapudi252)\n\n\n## License\n\nThe content of this project itself is licensed under [GNU LGPL, Version 3 (LGPL-3)](https://github.com/dltk-ai/Deep-Learning/blob/master/LICENSE)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dltk-ai/Deep-Learning",
    "keywords": "tensorflow,keras,deep learning,machine learning",
    "license": "GPL-3.0 License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DLTKDL",
    "package_url": "https://pypi.org/project/DLTKDL/",
    "platform": "",
    "project_url": "https://pypi.org/project/DLTKDL/",
    "project_urls": {
      "Homepage": "https://github.com/dltk-ai/Deep-Learning"
    },
    "release_url": "https://pypi.org/project/DLTKDL/50.3.0/",
    "requires_dist": [
      "tensorflow (>=2.2.0)",
      "scipy (==1.5.2)",
      "scikit-learn (>=0.21.3)",
      "matplotlib (>=3.0.0)",
      "pandas (>=1.0.1)",
      "fastprogress (>=0.1.21)",
      "keras-bert (>=0.81.0)",
      "requests",
      "joblib",
      "langdetect",
      "theano",
      "jieba",
      "cchardet",
      "networkx (>=2.3)",
      "bokeh",
      "seqeval",
      "packaging",
      "tensorflow-datasets",
      "transformers (>=2.11.0)",
      "ipython",
      "syntok",
      "whoosh"
    ],
    "requires_python": "",
    "summary": "dltkdl is a wrapper for TensorFlow and Keras that makes deep learning and AI more accessible and easier to apply",
    "version": "50.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8510801,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "afaa68a498cd2f08a3e4b5da12b8ef473fb322236f4464b98c61110c3abf9083",
        "md5": "3d536080637d3ccc034cfdf1414be432",
        "sha256": "d1bf93b6b1469c3ebe673aa90c89346c08063dab9f53e077e7ea1a4c26835dea"
      },
      "downloads": -1,
      "filename": "dltkdl-50.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d536080637d3ccc034cfdf1414be432",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25254662,
      "upload_time": "2020-09-22T07:39:52",
      "upload_time_iso_8601": "2020-09-22T07:39:52.017851Z",
      "url": "https://files.pythonhosted.org/packages/af/aa/68a498cd2f08a3e4b5da12b8ef473fb322236f4464b98c61110c3abf9083/dltkdl-50.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "716db4409aad98c801d0e4421eaddb8e69dd58139af18376b9a5a3dd9689f220",
        "md5": "728fb517aa7503e61544eef0cec5df39",
        "sha256": "d42760c9b92c6e8a422ab9ed74cbadf72a1cf6435f762aa440a84e49d08d87da"
      },
      "downloads": -1,
      "filename": "dltkdl-50.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "728fb517aa7503e61544eef0cec5df39",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25218489,
      "upload_time": "2020-09-22T07:41:58",
      "upload_time_iso_8601": "2020-09-22T07:41:58.276292Z",
      "url": "https://files.pythonhosted.org/packages/71/6d/b4409aad98c801d0e4421eaddb8e69dd58139af18376b9a5a3dd9689f220/dltkdl-50.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}