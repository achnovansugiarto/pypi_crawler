{
  "info": {
    "author": "",
    "author_email": "redoxcode <redoxcode@github.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: Implementation :: MicroPython"
    ],
    "description": "[![pypi version shield](https://img.shields.io/pypi/v/micropython-dfplayer)](https://pypi.org/project/micropython-dfplayer/) [![pypi downloads per month shield](https://img.shields.io/pypi/dm/micropython-dfplayer?color=brightgreen)](https://pypi.org/project/micropython-dfplayer/)\n## Description\nA micropython library to control the [DFPlayer mini](https://www.dfrobot.com/product-1121.html) mp3 player module.\n\nThis library focuses on the most essential functions. Some advanced functions of the DFPlayer, like the equalizer modes are not implemented yet.\n\nFurther this library is made to use the folders function of the dfmini. You can use up to 99 folders and 255 files per folder.\nThe files on your micro sd card need to be structured like this:\n\n\t.\n\t├── 01\n\t│   ├── 001.mp3\n\t│   ├── 002.mp3\n\t│   └── ...\n\t├── 02\n\t│   ├── 001.mp3\n\t│   ├── 002.mp3\n\t│   └── ...\n\t├── 03\n\t│   ├── 001.mp3\n\t│   ├── 002.mp3\n\t│   └── ...\n\t└── ...\n\nThere should be no gaps in the numbering scheme.\nIt might be best to prepare the whole file structure on your harddrive first and then copy them in one go on a freshly formated micro sd card, as the DFPlayer might get confused from artifacts left on the sd cards filesystem.\nYou can use the files in [/sample_files](https://github.com/redoxcode/micropython-dfplayer/tree/main/sample_files) to test your module.\n\nSometimes the module isn't able to keep up if you try to send commands to fast, so some delay between the commands is needed.\n\n## Examples\n\n### Play a file from a folder\n```Python\nimport time\nfrom dfplayer import DFPlayer\ndf=DFPlayer(uart_id=1,tx_pin_id=4,rx_pin_id=5)\n#wait some time till the DFPlayer is ready\ntime.sleep(0.2)\n#change the volume (0-30). The DFPlayer doesn't remember these settings\ndf.volume(25)\ntime.sleep(0.2)\n#play file ./01/001.mp3\ndf.play(1,1)\n```\n### Find the number of files in a folder\nIf a folder doesn't exist, get_files_in_folder will return -1\n```Python\nimport time\nfrom dfplayer import DFPlayer\ndf=DFPlayer(uart_id=1,tx_pin_id=4,rx_pin_id=5)\n#wait some time till the DFPlayer is ready\ntime.sleep(0.2)\nprint(df.get_files_in_folder(1))\ntime.sleep(0.2)\nprint(df.get_files_in_folder(4))\n```\n\n## API\n### class DFPlayer(uart_id,tx_pin_id=None,rx_pin_id=None)\n- uart_id: Uart channel you want to use (0 or 1 for pi pico)\n- tx_pin_id: Pin id for uart tx if your board supports changing the pins of the uart channel.  \n- tx_pin_id: Pin id for uart rx if your board supports changing the pins of the uart channel.  \n\n```play(folder,file)```\n- play a file from a folder (stops all previous playback)\n- folder: Folder number of the file you want to play\n- file: File number of the file you want to play\n\n```stop()```\n- stop all playback\n\n```volume(vol)```\n- set the volume of the module\n- vol: Volume of the module. The range is 0 to 30. The DFPlayer doesn't remember these settings\n\n```get_volume()```\n- returns the current volume setting of the module\n\n```ìs_playing()```\n- returns if currently some playback is running\n\n```get_files_in_folder(folder)```\n- returns the number of files in a folder or -1 if the folder doesn't exist\n- folder: folder to get the number of files in\n\n```reset()```\n- reset the module\n\n```send_cmd(cmd,param1=0,param2=0)```\n- sends a command byte with 2 bytes for parameters to the module. This can be used to send commands not yet implemented in this library. Use the modules [documentation](https://wiki.dfrobot.com/DFPlayer_Mini_SKU_DFR0299) as reference.\n- cmd: cammand byte (0-255)\n- param1: parameter 1 or MSB of a 2 byte parameter\n- param2: parameter 2 or LSB of a 2 byte parameter\n\n```send_query(cmd,param1=0,param2=0)```\n- like send_cmd, but returns the bytes the module sends as answer to the query\n- cmd: cammand byte (0-255)\n- param1: parameter 1 or MSB of a 2 byte parameter\n- param2: parameter 2 or LSB of a 2 byte parameter\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "dfmini,dfplayer,mp3",
    "license": "MIT License  Copyright (c) 2022 redoxcode  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-dfplayer",
    "package_url": "https://pypi.org/project/micropython-dfplayer/",
    "platform": null,
    "project_url": "https://pypi.org/project/micropython-dfplayer/",
    "project_urls": {
      "Homepage": "https://github.com/redoxcode/micropython-dfplayer"
    },
    "release_url": "https://pypi.org/project/micropython-dfplayer/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library to use the DFPlayer mini mp3 player module with micropython",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16360874,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba42dc104ba0151eb0f51ece4ee57f84d1b4c9512d6a7bfb20eba2c2eab03be3",
        "md5": "02c28bc6264c588a17dd660a092a309e",
        "sha256": "28463f8141db0fe5755d91d645ed1fd2609fcd6d6f9b22c9efa5dcd42bb52b06"
      },
      "downloads": -1,
      "filename": "micropython_dfplayer-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "02c28bc6264c588a17dd660a092a309e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5186,
      "upload_time": "2023-01-09T14:14:50",
      "upload_time_iso_8601": "2023-01-09T14:14:50.511908Z",
      "url": "https://files.pythonhosted.org/packages/ba/42/dc104ba0151eb0f51ece4ee57f84d1b4c9512d6a7bfb20eba2c2eab03be3/micropython_dfplayer-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d97582898dd6dace411a63b8f20723265aa02a261d680310761683a4dd5bf9c7",
        "md5": "b3a1e1ebb704e6a1efc03fb60baabea4",
        "sha256": "c2819e8d71ae7d98ad82a25c0b3d9345b434e480a542098fa9cd522c91ce84a9"
      },
      "downloads": -1,
      "filename": "micropython-dfplayer-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b3a1e1ebb704e6a1efc03fb60baabea4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4256,
      "upload_time": "2023-01-09T14:14:52",
      "upload_time_iso_8601": "2023-01-09T14:14:52.210999Z",
      "url": "https://files.pythonhosted.org/packages/d9/75/82898dd6dace411a63b8f20723265aa02a261d680310761683a4dd5bf9c7/micropython-dfplayer-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}