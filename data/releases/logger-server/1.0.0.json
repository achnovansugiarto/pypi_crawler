{
  "info": {
    "author": "Kehr",
    "author_email": "kehr.china@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "LoggerServer Documentation\n==========================\n\n:doc:`logger_server.server` is an async TCP logging server base on `tornado.ioloop <http://www.tornadoweb.org/en/stable/ioloop.html>`_,\nwhich serve for `logging.handlers.SocketHandler <https://docs.python.org/2/library/logging.handlers.html?highlight=sockethandler#sockethandler>`_.\n\nMore information, see `logging-cookbook <https://docs.python.org/3/howto/logging-cookbook.html>`_.\n\nUsage\n======\n\n1. Install\n----------\n\nInstall `LoggerServer` by `pip`\n\n.. code-block:: shell\n\n    pip install logger_server\n\n\n2. Configuration\n----------------\n\nAfter `logger_server` package installed, you will got a command `logger-server`\n\n`logger-server` options::\n\n    $ logger_server -h\n    usage: logger-server [-h] [-f CONF] [-p PORT] [--log LOG] [--when WHEN]\n                         [--interval INTERVAL] [--backup BACKUP] [--fmt FMT]\n                         [--datefmt DATEFMT]\n\n    LoggerServer help documentation\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -f CONF, --conf CONF  The config file path for LoggerServer. (default: None)\n      -p PORT, --port PORT  LoggerServer port. (default: 9000)\n      --log LOG             The log output file. (default: ./logserver.log)\n      --when WHEN           specify the type of TimedRotatingFileHandler\n                            interval.other options:('S', 'M', 'H', 'D', 'W0'-'W6')\n                            (default: midnight)\n      --interval INTERVAL   The interval value of timed rotating. (default: 1)\n      --backup BACKUP       Number of log files to keep. (default: 14)\n      --fmt FMT             The log output formatter of logging. (default:\n                            [%(levelname)1.1s %(asctime)s %(ip)s %(name)s\n                            %(module)s:%(lineno)d] %(message)s)\n      --datefmt DATEFMT     The log output date formatter of logging. (default:\n                            %Y-%m-%d %H:%M:%S.%f)\n\nYou can use param `-f` to specify a config file for `logger-server`.\n`logserver.conf.template <https://github.com/kehr/LoggerServer/blob/master/logger_server/conf/logserver.conf.template>`_ is a configuration template.\n\n.. warning::\n\n    By default, the config file setttings over command settings.\n\n**Start LoggerServer** ::\n\n    $ logger_server\n\nOutput::\n\n    > LoggerServer is binding on 0.0.0.0:9000\n\n3. Hello word\n-------------------------\n\nAfter start `logger-server`, now you can write your logging code, like below:\n\n**Example1**  use root logger::\n\n    import logging\n    import logging.handlers\n\n    # root logger setting\n    logger = logging.getLogger()\n    logger.setLevel(logging.DEBUG)\n    # change localhost to your `logger-server` ip\n    socketHandler = logging.handlers.SocketHandler('localhost', 9000)\n    logger.addHandler(socketHandler)\n\n    # use root logger\n    logging.debug('The root logger is working!')\n    logging.info('The root logger is working!')\n    logging.warn('The root logger is working!')\n    logging.error('The root logger is working!')\n    logging.critical('The root logger is working!')\n\n    # unsetted logger inherit the settings of root logger by default.\n    logger = logging.getLogger('default_logger')\n    logger.debug('The default logger is working!')\n    logger.info('The default logger is working!')\n    logger.warn('The default logger is working!')\n    logger.error('The default logger is working!')\n    logger.critical('The default logger is working!')\n\nOutput::\n\n    [D 2017-11-16 11:13:19.700965 127.0.0.1 root root_logger:23] The root logger is working!\n    [I 2017-11-16 11:13:19.702461 127.0.0.1 root root_logger:24] The root logger is working!\n    [W 2017-11-16 11:13:19.702587 127.0.0.1 root root_logger:25] The root logger is working!\n    [E 2017-11-16 11:13:19.702661 127.0.0.1 root root_logger:26] The root logger is working!\n    [C 2017-11-16 11:13:19.702759 127.0.0.1 root root_logger:27] The root logger is working!\n    [D 2017-11-16 11:13:19.702844 127.0.0.1 default_logger root_logger:31] The default logger is working!\n    [I 2017-11-16 11:13:19.702919 127.0.0.1 default_logger root_logger:32] The default logger is working!\n    [W 2017-11-16 11:13:19.702979 127.0.0.1 default_logger root_logger:33] The default logger is working!\n    [E 2017-11-16 11:13:19.703068 127.0.0.1 default_logger root_logger:34] The default logger is working!\n    [C 2017-11-16 11:13:19.703124 127.0.0.1 default_logger root_logger:35] The default logger is working!\n\nGet this example code `root_logger.py <https://github.com/kehr/LoggerServer/blob/master/example/root_logger.py>`_.\n\n**Example2** use custom logger::\n\n    import logging\n    import logging.handlers\n\n    # logger setting\n    logger = logging.getLogger('test')\n    logger.setLevel(logging.DEBUG)\n    # change localhost to your `logger-server` ip\n    socketHandler = logging.handlers.SocketHandler('localhost', 9000)\n    logger.addHandler(socketHandler)\n\n    logger.debug('The test logger is working!')\n    logger.info('The test logger is working!')\n    logger.warn('The test logger is working!')\n    logger.error('The test logger is working!')\n    logger.critical('The test logger is working!')\n\nOutput::\n\n    [D 2017-11-16 11:19:48.623884 127.0.0.1 test custom_logger:22] The test logger is working!\n    [I 2017-11-16 11:19:48.625533 127.0.0.1 test custom_logger:23] The test logger is working!\n    [W 2017-11-16 11:19:48.625658 127.0.0.1 test custom_logger:24] The test logger is working!\n    [E 2017-11-16 11:19:48.625739 127.0.0.1 test custom_logger:25] The test logger is working!\n    [C 2017-11-16 11:19:48.625821 127.0.0.1 test custom_logger:26] The test logger is working!\n\nGet this example code `custom_logger.py <https://github.com/kehr/LoggerServer/blob/master/example/custom_logger.py>`_.\n\nModule\n======\n\n.. toctree::\n    :maxdepth: 2\n\n    logger_server.server\n\n\nRelease history\n===============\n\nVersion 1.0.0, Nov 15 2017\n--------------------------\n* Release v1.0.0\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kehr/LoggerServer",
    "keywords": "logging server SocketHandler tornado ioloop",
    "license": "Apache License 2.0 <http://www.apache.org/licenses/LICENSE-2.0>",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logger_server",
    "package_url": "https://pypi.org/project/logger_server/",
    "platform": "",
    "project_url": "https://pypi.org/project/logger_server/",
    "project_urls": {
      "Homepage": "https://github.com/kehr/LoggerServer"
    },
    "release_url": "https://pypi.org/project/logger_server/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An async TCP logging server base on tornado.ioloop, which serve for logging.handlers.SocketHandler.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3347689,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f1c74964778ae7e32032288feece754198628eeaa9c3859e03f5854d274317e",
        "md5": "039393051dbf3e9b428d11e9d70c9e7f",
        "sha256": "65f61859ed5f6a4e3330e8c5523556735c467dce5c6c5833c3690ad9375f88a7"
      },
      "downloads": -1,
      "filename": "logger_server-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "039393051dbf3e9b428d11e9d70c9e7f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12069,
      "upload_time": "2017-11-16T04:01:16",
      "upload_time_iso_8601": "2017-11-16T04:01:16.981487Z",
      "url": "https://files.pythonhosted.org/packages/9f/1c/74964778ae7e32032288feece754198628eeaa9c3859e03f5854d274317e/logger_server-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}