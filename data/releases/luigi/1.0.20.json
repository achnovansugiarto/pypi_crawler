{
  "info": {
    "author": "Erik Bernhardsson",
    "author_email": "erikbern@spotify.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. note::\n\n   For the latest source, discussion, etc, please visit the\n   `GitHub repository <https://github.com/spotify/luigi>`_\n\n\n.. figure:: https://raw.githubusercontent.com/spotify/luigi/master/doc/luigi.png\n   :alt: Luigi Logo\n   :align: center\n\n\nAbout Luigi\n-----------\n\n.. image:: https://travis-ci.org/spotify/luigi.svg?branch=master\n    :target: https://travis-ci.org/spotify/luigi\n\nLuigi is a Python package that helps you build complex pipelines of\nbatch jobs. It handles dependency resolution, workflow management,\nvisualization, handling failures, command line integration, and much\nmore.\n\nThe purpose of Luigi is to address all the plumbing typically associated\nwith long-running batch processes. You want to chain many tasks,\nautomate them, and failures *will* happen. These tasks can be anything,\nbut are typically long running things like\n`Hadoop <http://hadoop.apache.org/>`_ jobs, dumping data to/from\ndatabases, running machine learning algorithms, or anything else.\n\nThere are other software packages that focus on lower level aspects of\ndata processing, like `Hive <http://hive.apache.org/>`_,\n`Pig <http://pig.apache.org/>`_, or\n`Cascading <http://www.cascading.org/>`_. Luigi is not a framework to\nreplace these. Instead it helps you stitch many tasks together, where\neach task can be a Hive query, a Hadoop job in Java, a Python snippet,\ndumping a table from a database, or anything else. It's easy to build up\nlong-running pipelines that comprise thousands of tasks and take days or\nweeks to complete. Luigi takes care of a lot of the workflow management\nso that you can focus on the tasks themselves and their dependencies.\n\nYou can build pretty much any task you want, but Luigi also comes with a\n*toolbox* of several common task templates that you use. It includes\nnative Python support for running mapreduce jobs in Hadoop, as well as\nPig and Jar jobs. It also comes with filesystem abstractions for HDFS\nand local files that ensures all file system operations are atomic. This\nis important because it means your data pipeline will not crash in a\nstate containing partial data.\n\nLuigi was built at `Spotify <http://www.spotify.com/>`_, mainly by\n`Erik Bernhardsson <https://github.com/erikbern>`_ and `Elias\nFreider <https://github.com/freider>`_, but many other people have\ncontributed.\n\n\nDependency graph example\n------------------------\n\nJust to give you an idea of what Luigi does, this is a screen shot from\nsomething we are running in production. Using Luigi's visualizer, we get\na nice visual overview of the dependency graph of the workflow. Each\nnode represents a task which has to be run. Green tasks are already\ncompleted whereas yellow tasks are yet to be run. Most of these tasks\nare Hadoop jobs, but there are also some things that run locally and\nbuild up data files.\n\n.. figure:: https://raw.githubusercontent.com/spotify/luigi/master/doc/user_recs.png\n   :alt: Dependency graph\n\nBackground\n----------\n\nWe use Luigi internally at `Spotify <http://www.spotify.com/>`_ to run\nthousands of tasks every day, organized in complex dependency graphs.\nMost of these tasks are Hadoop jobs. Luigi provides an infrastructure\nthat powers all kinds of stuff including recommendations, toplists, A/B\ntest analysis, external reports, internal dashboards, etc. Luigi grew\nout of the realization that powerful abstractions for batch processing\ncan help programmers focus on the most important bits and leave the rest\n(the boilerplate) to the framework.\n\nConceptually, Luigi is similar to `GNU\nMake <http://www.gnu.org/software/make/>`_ where you have certain tasks\nand these tasks in turn may have dependencies on other tasks. There are\nalso some similarities to `Oozie <http://incubator.apache.org/oozie/>`_\nand `Azkaban <http://data.linkedin.com/opensource/azkaban>`_. One major\ndifference is that Luigi is not just built specifically for Hadoop, and\nit's easy to extend it with other kinds of tasks.\n\nEverything in Luigi is in Python. Instead of XML configuration or\nsimilar external data files, the dependency graph is specified *within\nPython*. This makes it easy to build up complex dependency graphs of\ntasks, where the dependencies can involve date algebra or recursive\nreferences to other versions of the same task. However, the workflow can\ntrigger things not in Python, such as running Pig scripts or scp'ing\nfiles.\n\nInstalling\n----------\n\nDownloading and running ``python setup.py install`` should be enough. Note\nthat you probably want `Tornado <http://www.tornadoweb.org/>`_. Also\n`Mechanize <http://wwwsearch.sourceforge.net/mechanize/>`_ is optional\nif you want to run Hadoop jobs since it makes debugging easier. See\n`Configuration <http://luigi.readthedocs.org/en/latest/configuration.html>`_ for how to configure Luigi.\n\nGetting Started\n---------------\n\nThe `Luigi package documentation <http://luigi.readthedocs.org/en/latest/api/luigi.html>`_\ncontains an overview of how to work with Luigi, including an `Example workflow\n<http://luigi.readthedocs.org/en/latest/example_top_artists.html>`_ and an `API overview\n<http://luigi.readthedocs.org/en/latest/api_overview.html>`_ which explains some of\nthe most important concepts.\n\nGetting Help\n------------\n\n* Find us on `#luigi` on freenode.\n* Subscribe to the `luigi-user <http://groups.google.com/group/luigi-user/>`_\n  group and ask a question.\n\n\nExternal links\n--------------\n\n* `Documentation <http://luigi.readthedocs.org/>`_ (Read the Docs)\n* `Mailing List <https://groups.google.com/forum/#!forum/luigi-user>`_ (Google Groups)\n* `Releases <https://pypi.python.org/pypi/luigi>`_ (PyPi)\n* `Source code <https://github.com/spotify/luigi>`_ (Github)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/spotify/luigi",
    "keywords": null,
    "license": "Apache License 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "luigi",
    "package_url": "https://pypi.org/project/luigi/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/luigi/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/spotify/luigi"
    },
    "release_url": "https://pypi.org/project/luigi/1.0.20/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Workflow mgmgt + task scheduling + dependency resolution",
    "version": "1.0.20",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17285056,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b88804830f0c78ebe1a2b1dfbf723bfcd97f6822f4e139da5909cd87baf2374",
        "md5": "f1edc408bb19ffaf18a88693abc0d765",
        "sha256": "2f5d9c699e89e3738c6722bbb91013e03acc5938f4aa0a23a5d06d9f246d347f"
      },
      "downloads": -1,
      "filename": "luigi-1.0.20.tar.gz",
      "has_sig": false,
      "md5_digest": "f1edc408bb19ffaf18a88693abc0d765",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 324700,
      "upload_time": "2015-01-21T16:27:35",
      "upload_time_iso_8601": "2015-01-21T16:27:35.578045Z",
      "url": "https://files.pythonhosted.org/packages/2b/88/804830f0c78ebe1a2b1dfbf723bfcd97f6822f4e139da5909cd87baf2374/luigi-1.0.20.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2018-1000843",
        "GHSA-p69g-f978-xxv9"
      ],
      "details": "Luigi version prior to version 2.8.0; after commit 53b52e12745075a8acc016d33945d9d6a7a6aaeb; after GitHub PR spotify/luigi/pull/1870 contains a Cross ite Request Forgery (CSRF) vulnerability in API endpoint: /api/<method> that can result in Task metadata such as task name, id, parameter, etc. will be leaked to unauthorized users. This attack appear to be exploitable via The victim must visit a specially crafted webpage from the network where their Luigi server is accessible.. This vulnerability appears to have been fixed in 2.8.0 and later.",
      "fixed_in": [
        "2.8.0"
      ],
      "id": "PYSEC-2018-11",
      "link": "https://osv.dev/vulnerability/PYSEC-2018-11",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2018-1000843"
      ],
      "details": "Luigi version prior to version 2.8.0; after commit 53b52e12745075a8acc016d33945d9d6a7a6aaeb; after GitHub PR spotify/luigi/pull/1870 contains a Cross ite Request Forgery (CSRF) vulnerability in API endpoint: /api/<method> that can result in Task metadata such as task name, id, parameter, etc. will be leaked to unauthorized users. This attack appear to be exploitable via The victim must visit a specially crafted webpage from the network where their Luigi server is accessible.. This vulnerability appears to have been fixed in 2.8.0 and later.",
      "fixed_in": [
        "2.8.0"
      ],
      "id": "GHSA-p69g-f978-xxv9",
      "link": "https://osv.dev/vulnerability/GHSA-p69g-f978-xxv9",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}