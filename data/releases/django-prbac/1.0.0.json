{
  "info": {
    "author": "Dimagi",
    "author_email": "dev@dimagi.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Django PRBAC\n============\n\n(Parameterized Role-Based Access Control)\n\nhttps://github.com/dimagi/django-prbac\n\n|Build Status| |Test coverage| |PyPi version|\n\nAbout RBAC and PRBAC\n--------------------\n\n**Role-based access control (RBAC)** is the standard method for access control in large systems.\nWith RBAC, you grant *privileges* to *roles*. For example you\nmight grant the privilege ``Reporting`` to the role ``Analyst``. In most\nsystems, you can nest roles as deeply as you want, and give users however many roles. A good\nexample of this in practice is `PostgreSQL roles and privileges\n<http://www.postgresql.org/docs/devel/static/user-manag.html>`_.\n\nThe roles and privileges are whatever abstract concepts make sense for your system. It is up\nto application code to determine what actions to take based on the privileges granted. This\ncan, of course, be implemented in terms of a lower-level permission system such as\nrow-level or object-level access control lists (ACLs).\n\n**Parameterized role-based access control (PRBAC)** adds parameters\nto roles and privileges. Now, for example, you might grant ``\"Reporting(organization=\"Dimagi\",area=\"Finance\")``\nto ``FinancialAnalyst(organization=\"Dimagi\")``. If you don't use parameters, then it is just RBAC.\nIf you use parameters with finite sets of choice, then it is exponentially more powerful. If you\nuse parameters with infinitely many choices (such as strings or integers) then it is\ninfinitely more powerful. A good example of limited parameterization is how particular privileges\n(``SELECT``, ``UPDATE``, etc) in PostgreSQL may be parameterized by an object. In PRBAC\nthis parameterization is pervasive.\n\n\nIn-depth documentation\n----------------------\n\nTo learn more about parameterized role-based access control as implemented in this library, please\nvisit http://django-prbac.readthedocs.org/\n\n\nAccess Control for Django\n-------------------------\n\n* `django.contrib.auth <https://docs.djangoproject.com/en/dev/topics/auth/>`_: This app, shipped with Django, provides unix-style access control (users, groups, permissions) \n  with an extensible set of permissions that are implicitly parameterized by a content type. This is\n  fundamentally different than role-based access control. It is only worth mentioning because it comes\n  with Django and everyone is going to want to know \"why did you reimplement the wheel?\". If ``django.contrib.auth``\n  is the wheel, then RBAC is the car and PRBAC is a transformer. I leave it as an exercise to the reader to\n  attempt to implement PRBAC using ``django.contrib.auth`` :-)\n\n* `django-rbac <https://bitbucket.org/nabucosound/django-rbac/>`_: This project appears defunct and is not\n  parameterized in any rate.\n\n* `django-role-permissions <https://github.com/vintasoftware/django-role-permissions>`_: This app implements a sort of\n  RBAC where roles are statically defined in code.\n\n* Others can be perused at https://www.djangopackages.com/grids/g/perms/. Many offer object-level permissions,\n  which is as orthogonal to role-based access control as unix permissions. In fact, this is probably true of \n  anything using the term \"permissions\".\n\n\nQuick Start\n-----------\n\nTo install, use pip:\n\n::\n\n    $ pip install django-prbac\n\nLicense\n-------\n\nDjango-prbac is distributed under the MIT license. (See the LICENSE file for details)\n\n.. |Build Status| image:: https://travis-ci.org/dimagi/django-prbac.png?branch=master\n   :target: https://travis-ci.org/dimagi/django-prbac\n.. |Test coverage| image:: https://coveralls.io/repos/dimagi/django-prbac/badge.png?branch=master\n   :target: https://coveralls.io/r/dimagi/django-prbac\n.. |PyPi version| image:: https://img.shields.io/pypi/v/django-prbac.svg\n   :target: https://pypi.python.org/pypi/django-prbac\n.. |PyPi downloads| image:: https://img.shields.io/pypi/dm/django-prbac.svg\n   :target: https://pypi.python.org/pypi/django-prbac\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/dimagi/django-prbac",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-prbac",
    "package_url": "https://pypi.org/project/django-prbac/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-prbac/",
    "project_urls": {
      "Homepage": "http://github.com/dimagi/django-prbac"
    },
    "release_url": "https://pypi.org/project/django-prbac/1.0.0/",
    "requires_dist": [
      "django (!=3.0.0,!=3.0.1,!=3.0.2,<4,>=2.2.10)",
      "jsonfield (<3,>=1.0.3)",
      "simplejson"
    ],
    "requires_python": "",
    "summary": "Parameterized Role-Based Access Control for Django",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8029450,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed161973773502a9482999651aef6cd1844dc160bfd1a59921ec44f79de27c22",
        "md5": "10b39c77d4f3522f2d8fa6fd15a35f3a",
        "sha256": "a74d9d6d98e265d6088ca6aceca23a5038acf81c00a0e5f8b166414bb2753648"
      },
      "downloads": -1,
      "filename": "django_prbac-1.0.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "10b39c77d4f3522f2d8fa6fd15a35f3a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18290,
      "upload_time": "2020-08-05T02:18:46",
      "upload_time_iso_8601": "2020-08-05T02:18:46.977090Z",
      "url": "https://files.pythonhosted.org/packages/ed/16/1973773502a9482999651aef6cd1844dc160bfd1a59921ec44f79de27c22/django_prbac-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "397cdd4f37fe4d3607a128293df7e6516e5284cd557792ba4ef3ef82123eb7a4",
        "md5": "1c857af5be603a0cc3dc5e793d04b5f8",
        "sha256": "30c2d0038ff7fe42ce5c26e156e44849db344daba5a23c897a2acb7b5d5dc6d1"
      },
      "downloads": -1,
      "filename": "django-prbac-1.0.0.tar.gz",
      "has_sig": true,
      "md5_digest": "1c857af5be603a0cc3dc5e793d04b5f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15544,
      "upload_time": "2020-08-05T02:18:48",
      "upload_time_iso_8601": "2020-08-05T02:18:48.662911Z",
      "url": "https://files.pythonhosted.org/packages/39/7c/dd4f37fe4d3607a128293df7e6516e5284cd557792ba4ef3ef82123eb7a4/django-prbac-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}