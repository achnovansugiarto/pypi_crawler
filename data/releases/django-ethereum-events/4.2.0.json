{
  "info": {
    "author": "Artemios Tomaras",
    "author_email": "artemistomaras@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "######################\ndjango-ethereum-events\n######################\n\nEthereum Contract Event Log monitoring in Django\n\n.. image:: https://travis-ci.org/artemistomaras/django-ethereum-events.svg?branch=master\n    :target: https://app.travis-ci.com/artemistomaras/django-ethereum-events.svg?branch=master\n\n.. image:: https://img.shields.io/pypi/v/django-ethereum-events.svg\n    :target: https://pypi.python.org/pypi/django-ethereum-events\n\n\n********\nOverview\n********\n\nThis package provides an easy way to monitor an ethereum blockchain for transactions that invoke `Contract Events`_ that are of particular interest.\n\nThe main concept was inspired by the following project:\n\n- https://github.com/gnosis/django-eth-events\n\nPackage versions **0.2.x+** support **web3 v4**.\n\nIf you want python 2.7 compatibility and/or **web3 v3** support, use version **0.1.x** of this package.\n\n\n.. _`Contract Events`: http://solidity.readthedocs.io/en/develop/contracts.html#events\n\n************\nInstallation\n************\n\n1.  Install using pip:\n\n    ::\n\n        pip install django-ethereum-events\n\n\n2.  Make sure to include ``'django_ethereum_events'`` in your ``INSTALLED_APPS``\n\n    .. code-block:: python\n\n        INSTALLED_APPS += ('django_ethereum_events')\n\n    if you are using the **admin backend**, also include ``solo`` in your ``INSTALLED_APPS``.\n\n3.  Make necessary migrations\n\n    .. code-block:: python\n\n        python manage.py migrate django_ethereum_events\n\n\n*****\nUsage\n*****\n\n1.  In your ``settings`` file, specify the following settings\n\n    .. code-block:: python\n\n        ETHEREUM_NODE_URI = 'http://localhost:8545'\n\n\n2.  Create a new MonitoredEvent\n\n    .. code-block:: python\n\n        contract_abi = \"\"\"\n        The whole contract abi goes here\n        \"\"\"\n\n        event = \"MyEvent\"  # the emitted event name\n        event_receiver = \"myapp.event_receivers.CustomEventReceiver\"\n        contract_address = \"0x10f683d9acc908cA6b7A34726271229B846b0292\"  # the address of the contract emitting the event\n\n        MonitoredEvent.object.register_event(\n            event_name=event,\n            contract_address=contract_address,\n            contract_abi=contract_abi,\n            event_receiver=event_receiver\n        )\n\n3.  Create an appropriate event receiver\n\n    .. code-block:: python\n\n        from django_ethereum_events.chainevents import AbstractEventReceiver\n\n        class CustomEventReceiver(AbsractEventReceiver):\n            def save(self, decoded_event):\n                # custom logic goes here\n\n    The ``decoded_event`` parameter is the decoded log as provided from `web3.utils.events.get_event_data`_ method.\n\n    .. _`web3.utils.events.get_event_data`: https://github.com/ethereum/web3.py/blob/v5.5.0/web3/_utils/events.py#L198\n\n4.  To start monitoring the blockchain, either run the celery task ``django_ethereum_events.tasks.event_listener`` or better, use ``celerybeat`` to run it as a periodical task\n\n    .. code-block:: python\n\n        from celery.beat import crontab\n\n        CELERYBEAT_SCHEDULE = {\n        'ethereum_events': {\n            'task': 'django_ethereum_events.tasks.event_listener',\n            'schedule': crontab(minute='*/1')  # run every minute\n            }\n        }\n\n    You can also set the optional ``ETHEREUM_LOGS_BATCH_SIZE`` setting which limits the maximum amount of the blocks that can be read at a time from the celery task.\n\n\n*******************\nUsing event filters\n*******************\n\nIf your Ethereum Node supports log filters, you can activate it in the Django settings and it will use filters instead of iterating thru all blocks and all transactions.\n\n    .. code-block:: python\n\n        ETHEREUM_LOGS_FILTER_AVAILABLE = True\n\n\n\n******************************\nMore about the event receivers\n******************************\n\nIt is advisable that the code inside the custom event receiver to be simple since it is run synchronously while the ``event_listener`` task is running. If that is not the case, pass the argument ``decoded_event`` to a celery task of your own\n\n.. code-block:: python\n\n    # inside the CustomEventReceiver.save method\n    from django_ethereum_events.utils import HexJsonEncoder\n    decoded_event_data = json.dumps(decoded_event, cls=HexJsonEncoder)\n    my_custom_task.delay(decoded_event_data)\n\n\nIf an unhandled exception is raised inside the event receiver, the ``event_listener`` task logs the error and creates\na new instance of the ``django_ethereum_events.models.FailedEventLog`` containing all the relevant event information.\n\nThe event listener does **not** attempt to rerun ``FailedEventLogs``. That is up to the client implementation.\n\n\n****************************\nResetting the internal state\n****************************\nBlocks are processed only once. The last block processed is stored in the ``.models.Daemon`` entry.\n\nTo reset the number of blocks processed, run the ``reset_block_daemon`` command optionally specifying the block number (-b, --block) to reset to (defaults to zero). If you reset it to zero, the next time the ``event_listener`` is fired, it will start processing blocks from the genesis block.\n\nThe ``Daemon`` entry can also be changed from the django admin backend.\n\n***************************\nProof-of-Authority Networks\n***************************\nTo use this package on **Rinkeby** or any other private network that uses the Proof-of-Authority consensus engine (also named clique), set the optional ``ETHEREUM_GETH_POA`` setting to ``True``.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/artemistomaras/django-ethereum-events",
    "keywords": "django ethereum",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-ethereum-events",
    "package_url": "https://pypi.org/project/django-ethereum-events/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-ethereum-events/",
    "project_urls": {
      "Homepage": "https://github.com/artemistomaras/django-ethereum-events"
    },
    "release_url": "https://pypi.org/project/django-ethereum-events/4.2.0/",
    "requires_dist": [
      "flake8 (==3.7.9) ; extra == 'dev'",
      "Django (>=1.11)",
      "celery (>=3.1.25)",
      "django-solo (>=1.1.0)",
      "web3 (<6,>=5.5.0)",
      "eth-tester[py-evm] (==v0.2.0-beta.2) ; extra == 'dev'",
      "tox (<2wheel,>=1.8.0twine>=1.13) ; extra == 'dev'",
      "flake8 (==3.7.9) ; extra == 'linter'",
      "eth-tester[py-evm] (==v0.2.0-beta.2) ; extra == 'tester'"
    ],
    "requires_python": ">=3.6,<4",
    "summary": "Django Ethereum Events",
    "version": "4.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13372813,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "49914e384c8a08092cb6de5b00b4ad7ca3124656e5a822dd297244488d27b661",
        "md5": "0310becc89a154b235f9459216379cd9",
        "sha256": "1d7cea6bf8022e8ea8200391ef0864b670ecdb238e44ce7f24896e7e9d45742c"
      },
      "downloads": -1,
      "filename": "django_ethereum_events-4.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0310becc89a154b235f9459216379cd9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4",
      "size": 31678,
      "upload_time": "2022-04-01T11:06:55",
      "upload_time_iso_8601": "2022-04-01T11:06:55.150482Z",
      "url": "https://files.pythonhosted.org/packages/49/91/4e384c8a08092cb6de5b00b4ad7ca3124656e5a822dd297244488d27b661/django_ethereum_events-4.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8dbf557a9bf0a1b9b58f956a9905457798d749156c5c7db4f288fee769410899",
        "md5": "75601c6435f5565b965413f4042713e4",
        "sha256": "c94b681cc7848c9964f7934859f79382179f82cd9c925a567e1563fd917242f7"
      },
      "downloads": -1,
      "filename": "django-ethereum-events-4.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "75601c6435f5565b965413f4042713e4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4",
      "size": 20372,
      "upload_time": "2022-04-01T11:07:16",
      "upload_time_iso_8601": "2022-04-01T11:07:16.150955Z",
      "url": "https://files.pythonhosted.org/packages/8d/bf/557a9bf0a1b9b58f956a9905457798d749156c5c7db4f288fee769410899/django-ethereum-events-4.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}