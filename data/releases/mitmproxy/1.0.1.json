{
  "info": {
    "author": "Aldo Cortesi",
    "author_email": "aldo@corte.si",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Console :: Curses",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet",
      "Topic :: Internet :: Proxy Servers",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Security",
      "Topic :: Software Development :: Testing"
    ],
    "description": "mitmproxy\n^^^^^^^^^\n\n|travis| |appveyor| |coverage| |latest_release| |python_versions|\n\nThis repository contains the **mitmproxy** and **pathod** projects.\n\n``mitmproxy`` is an interactive, SSL-capable intercepting proxy with a console\ninterface.\n\n``mitmdump`` is the command-line version of mitmproxy. Think tcpdump for HTTP.\n\n``pathoc`` and ``pathod`` are perverse HTTP client and server applications\ndesigned to let you craft almost any conceivable HTTP request, including ones\nthat creatively violate the standards.\n\n\nDocumentation & Help\n--------------------\n\n\nGeneral information, tutorials, and precompiled binaries can be found on the mitmproxy\nand pathod websites.\n\n|mitmproxy_site|\n\nThe latest documentation for mitmproxy is also available on ReadTheDocs.\n\n|mitmproxy_docs|\n\n\nJoin our discussion forum on Discourse to ask questions, help\neach other solve problems, and come up with new ideas for the project.\n\n|mitmproxy_discourse|\n\n\nJoin our developer chat on Slack if you would like to hack on mitmproxy itself.\n\n|slack|\n\n\nInstallation\n------------\n\nThe installation instructions are `here <http://docs.mitmproxy.org/en/stable/install.html>`__.\nIf you want to contribute changes, keep on reading.\n\n\nHacking\n-------\n\nTo get started hacking on mitmproxy, make sure you have Python_ 3.5.x or above with\nvirtualenv_ installed (you can find installation instructions for virtualenv\n`here <http://virtualenv.readthedocs.org/en/latest/>`__). Then do the following:\n\n.. code-block:: text\n\n    git clone https://github.com/mitmproxy/mitmproxy.git\n    cd mitmproxy\n    ./dev.sh  # powershell .\\dev.ps1 on Windows\n\n\nThe *dev* script will create a virtualenv environment in a directory called\n\"venv\", and install all mandatory and optional dependencies into it. The\nprimary mitmproxy components - mitmproxy and pathod - are installed as\n\"editable\", so any changes to the source in the repository will be reflected\nlive in the virtualenv.\n\nTo confirm that you're up and running, activate the virtualenv, and run the\nmitmproxy test suite:\n\n.. code-block:: text\n\n    . venv/bin/activate  # venv\\Scripts\\activate on Windows\n    py.test\n\nNote that the main executables for the project - ``mitmdump``, ``mitmproxy``,\n``mitmweb``, ``pathod``, and ``pathoc`` - are all created within the\nvirtualenv. After activating the virtualenv, they will be on your $PATH, and\nyou can run them like any other command:\n\n.. code-block:: text\n\n    mitmdump --version\n\nFor convenience, the project includes an autoenv_ file (`.env`_) that\nauto-activates the virtualenv when you cd into the mitmproxy directory.\n\n\nTesting\n-------\n\nIf you've followed the procedure above, you already have all the development\nrequirements installed, and you can simply run the test suite:\n\n.. code-block:: text\n\n    py.test\n\nPlease ensure that all patches are accompanied by matching changes in the test\nsuite. The project tries to maintain 100% test coverage.\n\nYou can also use `tox` to run the full suite of tests, including a quick test\nto check documentation and code linting.\n\nThe following tox environments are relevant for local testing:\n\n.. code-block:: text\n\n    tox -e py35  # runs all tests with Python 3.5\n    tox -e docs  # runs a does-it-compile check on the documentation\n    tox -e lint  # runs the linter for coding style checks\n\n\nDocumentation\n-------------\n\nThe mitmproxy documentation is build using Sphinx_, which is installed\nautomatically if you set up a development environment as described above. After\ninstallation, you can render the documentation like this:\n\n.. code-block:: text\n\n    cd docs\n    make clean\n    make html\n    make livehtml\n\nThe last command invokes `sphinx-autobuild`_, which watches the Sphinx directory and rebuilds\nthe documentation when a change is detected.\n\nStyle\n-----\n\nKeeping to a consistent code style throughout the project makes it easier to\ncontribute and collaborate. Please stick to the guidelines in\n`PEP8`_ and the `Google Style Guide`_ unless there's a very\ngood reason not to.\n\nThis is automatically enforced on every PR. If we detect a linting error, the\nPR checks will fail and block merging. You can run our lint checks yourself\nwith the following command:\n\n.. code-block:: text\n\n    tox -e lint\n\n\n.. |mitmproxy_site| image:: https://shields.mitmproxy.org/api/https%3A%2F%2F-mitmproxy.org-blue.svg\n    :target: https://mitmproxy.org/\n    :alt: mitmproxy.org\n\n.. |mitmproxy_docs| image:: https://readthedocs.org/projects/mitmproxy/badge/\n    :target: http://docs.mitmproxy.org/en/latest/\n    :alt: mitmproxy documentation\n\n.. |mitmproxy_discourse| image:: https://shields.mitmproxy.org/api/https%3A%2F%2F-discourse.mitmproxy.org-orange.svg\n    :target: https://discourse.mitmproxy.org\n    :alt: Discourse: mitmproxy\n\n.. |slack| image:: http://slack.mitmproxy.org/badge.svg\n    :target: http://slack.mitmproxy.org/\n    :alt: Slack Developer Chat\n\n.. |travis| image:: https://shields.mitmproxy.org/travis/mitmproxy/mitmproxy/master.svg?label=Travis%20build\n    :target: https://travis-ci.org/mitmproxy/mitmproxy\n    :alt: Travis Build Status\n\n.. |appveyor| image:: https://shields.mitmproxy.org/appveyor/ci/mhils/mitmproxy/master.svg?label=Appveyor%20build\n    :target: https://ci.appveyor.com/project/mhils/mitmproxy\n    :alt: Appveyor Build Status\n\n.. |coverage| image:: https://codecov.io/gh/mitmproxy/mitmproxy/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/mitmproxy/mitmproxy\n    :alt: Coverage Status\n\n.. |latest_release| image:: https://shields.mitmproxy.org/pypi/v/mitmproxy.svg\n    :target: https://pypi.python.org/pypi/mitmproxy\n    :alt: Latest Version\n\n.. |python_versions| image:: https://shields.mitmproxy.org/pypi/pyversions/mitmproxy.svg\n    :target: https://pypi.python.org/pypi/mitmproxy\n    :alt: Supported Python versions\n\n.. _Python: https://www.python.org/\n.. _virtualenv: http://virtualenv.readthedocs.org/en/latest/\n.. _autoenv: https://github.com/kennethreitz/autoenv\n.. _.env: https://github.com/mitmproxy/mitmproxy/blob/master/.env\n.. _Sphinx: http://sphinx-doc.org/\n.. _sphinx-autobuild: https://pypi.python.org/pypi/sphinx-autobuild\n.. _PEP8: https://www.python.org/dev/peps/pep-0008\n.. _Google Style Guide: https://google.github.io/styleguide/pyguide.html",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://mitmproxy.org",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mitmproxy",
    "package_url": "https://pypi.org/project/mitmproxy/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mitmproxy/",
    "project_urls": {
      "Homepage": "http://mitmproxy.org"
    },
    "release_url": "https://pypi.org/project/mitmproxy/1.0.1/",
    "requires_dist": [
      "Flask (>=0.10.1,<0.12)",
      "Pillow (>=3.2,<3.5)",
      "blinker (>=1.4,<1.5)",
      "brotlipy (<0.7,>=0.5.1)",
      "certifi (>=2015.11.20.1)",
      "click (<7,>=6.2)",
      "construct (<2.9,>=2.8)",
      "cryptography (<1.8,>=1.3)",
      "cssutils (<1.1,>=1.0.1)",
      "h2 (>=2.5.1,<3)",
      "html2text (>=2016.1.8,<=2016.9.19)",
      "hyperframe (<5,>=4.0.1)",
      "jsbeautifier (>=1.6.3,<1.7)",
      "passlib (>=1.6.5,<1.8)",
      "pyOpenSSL (<17.0,>=16.0)",
      "pyasn1 (>=0.1.9,<0.2)",
      "pyparsing (<2.2,>=2.1.3)",
      "pyperclip (>=1.5.22,<1.6)",
      "requests (>=2.9.1,<3)",
      "ruamel.yaml (>=0.13.2,<0.14)",
      "setuptools (!=29.0.0,>=11.3)",
      "sortedcontainers (>=1.5.4,<1.6)",
      "tornado (<4.5,>=4.3)",
      "urwid (<1.4,>=1.3.1)",
      "watchdog (>=0.8.3,<0.9)",
      "pydivert (<2.1,>=2.0.3); sys_platform == \"win32\"",
      "protobuf (>=3.1.0,<3.2); extra == 'contentviews'",
      "docutils (==0.12); extra == 'dev'",
      "flake8 (<3.3,>=3.2.1); extra == 'dev'",
      "mock (>=2.0,<2.1); extra == 'dev'",
      "mypy-lang (<0.5,>=0.4.6); extra == 'dev'",
      "pytest (>=3,<3.1); extra == 'dev'",
      "pytest-cov (<3,>=2.2.1); extra == 'dev'",
      "pytest-faulthandler (>=1.3.0,<2); extra == 'dev'",
      "pytest-timeout (<2,>=1.0.0); extra == 'dev'",
      "pytest-xdist (<2,>=1.14); extra == 'dev'",
      "rstcheck (<3.0,>=2.2); extra == 'dev'",
      "sphinx (>=1.3.5,<1.6); extra == 'dev'",
      "sphinx-autobuild (<0.7,>=0.5.2); extra == 'dev'",
      "sphinx-rtd-theme (>=0.1.9,<0.2); extra == 'dev'",
      "sphinxcontrib-documentedlist (<0.5,>=0.4.0); extra == 'dev'",
      "tox (<3,>=2.3); extra == 'dev'",
      "beautifulsoup4 (>=4.4.1,<4.6); extra == 'examples'",
      "pytz (<=2016.10,>=2015.07.0); extra == 'examples'"
    ],
    "requires_python": "",
    "summary": "An interactive, SSL-capable, man-in-the-middle HTTP proxy for penetration testers and software developers.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15625866,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62561f4050cd42f3ce9ab1dc3dbdc8a9f5830c2774f9eef227572aeaf455f426",
        "md5": "afc9af03d6f64b96de196ab320a16ad3",
        "sha256": "0bab9a923c0b69cf232b59a11ebdac98f90e31df05b318a341e1e8d36c1fdb65"
      },
      "downloads": -1,
      "filename": "mitmproxy-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "afc9af03d6f64b96de196ab320a16ad3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1385361,
      "upload_time": "2016-12-27T19:46:21",
      "upload_time_iso_8601": "2016-12-27T19:46:21.443393Z",
      "url": "https://files.pythonhosted.org/packages/62/56/1f4050cd42f3ce9ab1dc3dbdc8a9f5830c2774f9eef227572aeaf455f426/mitmproxy-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2018-14505",
        "GHSA-6m53-c78q-7qmg"
      ],
      "details": "mitmweb in mitmproxy v4.0.3 allows DNS Rebinding attacks, related to tools/web/app.py.",
      "fixed_in": [
        "4.0.4"
      ],
      "id": "PYSEC-2018-56",
      "link": "https://osv.dev/vulnerability/PYSEC-2018-56",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2021-39214",
        "GHSA-22gh-3r9q-xf38"
      ],
      "details": "mitmproxy is an interactive, SSL/TLS-capable intercepting proxy. In mitmproxy 7.0.2 and below, a malicious client or server is able to perform HTTP request smuggling attacks through mitmproxy. This means that a malicious client/server could smuggle a request/response through mitmproxy as part of another request/response's HTTP message body. While a smuggled request is still captured as part of another request's body, it does not appear in the request list and does not go through the usual mitmproxy event hooks, where users may have implemented custom access control checks or input sanitization. Unless one uses mitmproxy to protect an HTTP/1 service, no action is required. The vulnerability has been fixed in mitmproxy 7.0.3 and above.",
      "fixed_in": [
        "7.0.3"
      ],
      "id": "PYSEC-2021-328",
      "link": "https://osv.dev/vulnerability/PYSEC-2021-328",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-24766",
        "GHSA-gcx2-gvj7-pxv3"
      ],
      "details": "mitmproxy is an interactive, SSL/TLS-capable intercepting proxy. In mitmproxy 7.0.4 and below, a malicious client or server is able to perform HTTP request smuggling attacks through mitmproxy. This means that a malicious client/server could smuggle a request/response through mitmproxy as part of another request/response's HTTP message body. While mitmproxy would only see one request, the target server would see multiple requests. A smuggled request is still captured as part of another request's body, but it does not appear in the request list and does not go through the usual mitmproxy event hooks, where users may have implemented custom access control checks or input sanitization. Unless mitmproxy is used to protect an HTTP/1 service, no action is required. The vulnerability has been fixed in mitmproxy 8.0.0 and above. There are currently no known workarounds.",
      "fixed_in": [
        "8.0.0"
      ],
      "id": "PYSEC-2022-170",
      "link": "https://osv.dev/vulnerability/PYSEC-2022-170",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2021-39214"
      ],
      "details": "### Impact\n\nIn mitmproxy 7.0.2 and below, a malicious client or server is able to perform [HTTP request smuggling](https://en.wikipedia.org/wiki/HTTP_request_smuggling) attacks through mitmproxy. This means that a malicious client/server could smuggle a request/response through mitmproxy as part of another request/response's HTTP message body. While mitmproxy would only see one request, the target server would see multiple requests. A smuggled request is still captured as part of another request's body, but it does not appear in the request list and does not go through the usual mitmproxy event hooks, where users may have implemented custom access control checks or input sanitization.\n\nUnless you use mitmproxy to protect an HTTP/1 service, no action is required.\n\n\n### Patches\n\nThe vulnerability has been fixed in mitmproxy 7.0.3 and above.\n\n\n### Acknowledgements\n\nWe thank João Sobral (@chinchila) for responsibly disclosing this vulnerability to the mitmproxy team.\n\n\n### Timeline\n\n- **2021-09-08**: Received initial report for mitmproxy <= 6.0.2.\n- **2021-09-08**: Requested clarification if 7.x is affected.\n- **2021-09-10**: Received additional details, 7.x situation still unclear.\n- **2021-09-13**: Internally determined that 7.x is also affected.\n- **2021-09-13**: Shared initial fix with researcher.\n- **2021-09-14**: Received confirmation that fix is working, but H2.TE/H2.CL should also be looked at.\n- **2021-09-14**: Shared revised fix that includes additional H2.TE mitigations.\n- **2021-09-14**: Received confirmation that revised fix is working.\n- **2021-09-16**: Completed internal patch review.\n- **2021-09-16**: Published patch release and advisory.",
      "fixed_in": [
        "7.0.3"
      ],
      "id": "GHSA-22gh-3r9q-xf38",
      "link": "https://osv.dev/vulnerability/GHSA-22gh-3r9q-xf38",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2018-14505"
      ],
      "details": "mitmweb in mitmproxy before v4.0.4 allows DNS Rebinding attacks, related to tools/web/app.py.",
      "fixed_in": [
        "4.0.4"
      ],
      "id": "GHSA-6m53-c78q-7qmg",
      "link": "https://osv.dev/vulnerability/GHSA-6m53-c78q-7qmg",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-24766"
      ],
      "details": "### Impact\n\nIn mitmproxy 7.0.4 and below, a malicious client or server is able to perform [HTTP request smuggling](https://en.wikipedia.org/wiki/HTTP_request_smuggling) attacks through mitmproxy. This means that a malicious client/server could smuggle a request/response through mitmproxy as part of another request/response's HTTP message body. While mitmproxy would only see one request, the target server would see multiple requests. A smuggled request is still captured as part of another request's body, but it does not appear in the request list and does not go through the usual mitmproxy event hooks, where users may have implemented custom access control checks or input sanitization.\n\nUnless you use mitmproxy to protect an HTTP/1 service, no action is required.\n\n\n### Patches\n\nThe vulnerability has been fixed in mitmproxy 8.0.0 and above.\n\n\n### Acknowledgements\n\nWe thank Zeyu Zhang (@zeyu2001) for responsibly disclosing this vulnerability to the mitmproxy team.\n\n\n### Timeline\n\n- **2022-03-15**: Received initial report.\n- **2022-03-15**: Verified report and confirmed receipt.\n- **2022-03-16**: Shared patch with researcher.\n- **2022-03-16**: Received confirmation that patch is working.\n- **2022-03-19**: Published patched release and advisory.",
      "fixed_in": [
        "8.0.0"
      ],
      "id": "GHSA-gcx2-gvj7-pxv3",
      "link": "https://osv.dev/vulnerability/GHSA-gcx2-gvj7-pxv3",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}