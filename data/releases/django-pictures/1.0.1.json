{
  "info": {
    "author": "",
    "author_email": "Johannes Maron <johannes@maron.family>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Graphics :: Graphics Conversion",
      "Topic :: Software Development"
    ],
    "description": "![Django Pictures Logo](https://repository-images.githubusercontent.com/455480246/daaa7870-d28c-4fce-8296-d3e3af487a64)\n\n# Django Pictures\n\nResponsive cross-browser image library using modern codes like AVIF & WebP.\n\n* responsive web images using the [picture](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture) tag\n* native grid system support\n* serve files with or without a CDN\n* placeholders for local development\n* migration support\n* async image processing for [Celery] or [Dramatiq]\n* [DRF] support\n\n[![PyPi Version](https://img.shields.io/pypi/v/django-pictures.svg)](https://pypi.python.org/pypi/django-pictures/)\n[![Test Coverage](https://codecov.io/gh/codingjoe/django-pictures/branch/main/graph/badge.svg)](https://codecov.io/gh/codingjoe/django-pictures)\n[![GitHub License](https://img.shields.io/github/license/codingjoe/django-pictures)](https://raw.githubusercontent.com/codingjoe/django-pictures/master/LICENSE)\n\n## Usage\n\nBefore you start, it can be a good idea to understand the fundamentals of\n[responsive images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images).\n\nOnce you get a feeling how complicated things can get with all device types, you'll probably find\na new appreciation for this package and are ready to adopt in you project :)\n\n```python\n# models.py\nfrom django.db import models\nfrom pictures.models import PictureField\n\nclass Profile(models.Model):\n    title = models.CharField(max_length=255)\n    picture = PictureField(upload_to=\"avatars\")\n```\n\n```html\n<!-- template.html -->\n{% load pictures %}\n{% picture profile.picture img_alt=\"Spiderman\" img_loading=\"lazy\" m=6 l=4 %}\n```\n\nThe template above will render into:\n```html\n<picture>\n  <source type=\"image/webp\"\n          srcset=\"/media/testapp/profile/image/800w.webp 800w, /media/testapp/profile/image/100w.webp 100w, /media/testapp/profile/image/200w.webp 200w, /media/testapp/profile/image/300w.webp 300w, /media/testapp/profile/image/400w.webp 400w, /media/testapp/profile/image/500w.webp 500w, /media/testapp/profile/image/600w.webp 600w, /media/testapp/profile/image/700w.webp 700w\"\n          sizes=\"(min-width: 0px) and (max-width: 991px) 100vw, (min-width: 992px) and (max-width: 1199px) 33vw, 600px\">\n  <img src=\"/media/testapp/profile/image.jpg\" alt=\"Spiderman\" width=\"800\" height=\"800\" loading=\"lazy\">\n</picture>\n```\n\n## Setup\n\n### Installation\n\n```shell\npython3 -m pip install django-pictures\n```\n\n### Settings\n\n```python\n# settings.py\nINSTALLED_APPS = [\n    # ...\n    'pictures',\n]\n\n# the following are defaults, but you can override them\nPICTURES = {\n    \"BREAKPOINTS\": {\n        \"xs\": 576,\n        \"s\": 768,\n        \"m\": 992,\n        \"l\": 1200,\n        \"xl\": 1400,\n    },\n    \"GRID_COLUMNS\": 12,\n    \"CONTAINER_WIDTH\": 1200,\n    \"FILE_TYPES\": [\"WEBP\"],\n    \"PIXEL_DENSITIES\": [1, 2],\n}\n```\n\nIf you have either Dramatiq or Celery installed, we will default to async\nimage processing. You will need workers to listen to the `pictures` queue.\n\n### Placeholders\n\nThis library comes with dynamically created placeholders to simplify local\ndevelopment. To enable them, add the following to enable the\n`PICTURES[\"USE_PLACEHOLDERS\"]` setting and add the following URL configuration:\n\n```python\n# urls.py\nfrom django.urls import include, path\nfrom pictures.conf import get_settings\n\nurlpatterns = [\n    # ...\n]\n\nif get_settings().USE_PLACEHOLDERS:\n    urlpatterns += [\n        path(\"_pictures/\", include(\"pictures.urls\")),\n    ]\n```\n\n### Legacy use-cases (email)\n\nAlthough the `picture`-tag is [adequate for most use-cases][caniuse-picture],\nsome remain, where a single `img` tag is necessary. Notably in email, where\n[most clients do support WebP][caniemail-webp] but not [srcset][caniemail-srcset].\nThe template tag `img_url` returns a single size image URL.\nIn addition to the ratio you will need to define the `file_type`\nas well as the `width` (absolute width in pixels).\n\n\n```html\n{% load pictures %}\n<img src=\"{% img_url profile.picture ratio=\"3/2\" file_type=\"webp\" width=800 %}\" alt=\"profile picture\">\n```\n\n[caniuse-picture]: https://caniuse.com/picture\n[caniemail-webp]: https://www.caniemail.com/features/image-webp/\n[caniemail-srcset]: https://www.caniemail.com/features/html-srcset/\n\n## Config\n\n### Aspect ratios\n\nYou can specify the aspect ratios of your images. Images will be cropped to the\nspecified aspect ratio. Aspect ratios are specified as a string with a slash\nbetween the width and height. For example, `16/9` will crop the image to 16:9.\n\n```python\n# models.py\nfrom django.db import models\nfrom pictures.models import PictureField\n\n\nclass Profile(models.Model):\n    title = models.CharField(max_length=255)\n    picture = PictureField(\n      upload_to=\"avatars\",\n      aspect_ratios=[None, \"1/1\", \"3/2\", \"16/9\"],\n    )\n```\n\n```html\n# template.html\n{% load pictures %}\n{% picture profile.picture img_alt=\"Spiderman\" ratio=\"16/9\" m=6 l=4 %}\n```\n\nIf you don't specify an aspect ratio or None in your template, the image will be\nserved with the original aspect ratio of the file.\n\nYou may only use aspect ratios in templates, that have been defined on the model.\nThe model `aspect_ratios` will default to `[None]`, if other value is provided.\n\n### Breakpoints\n\nYou may define your own breakpoints, they should be identical to the ones used\nin your css library. Simply override the `PICTURES[\"BREAKPOINTS\"]` setting.\n\n### Grid columns\n\nGrids are so common in web design, that they even made it into CSS.\nWe default to 12 columns, but you can override this setting, via the\n`PICTURES[\"GRID_COLUMNS\"]` setting.\n\n### Container width\n\nContainers are commonly used to limit the maximum width of layouts,\nto promote better readability on larger screens. We default to `1200px`,\nbut you can override this setting, via the `PICTURES[\"CONTAINER_WIDTH\"]` setting.\n\nYou may also set it to `None`, should you not use a container.\n\n### File types\n\nUnless you still services IE11 clients, you should be fine serving just\n[WebP](https://caniuse.com/webp). Sadly, [AVIF](https://caniuse.com/avif)\n(WebP's successor) is\n[not yet supported by Pillow](https://github.com/python-pillow/Pillow/pull/5201).\n\nIf you are serving IE11 use add `JPEG` to the list. Beware though, that this may\ndrastically increase you storage needs.\n\n### Pixel densities\n\nUnless you really care that your images hold of if you hold your UHD phone very\nclose to your eyeballs, you should be fine, serving at the default `1x` and `2x`\ndensities.\n\n### Async image processing\n\nIf you have either Dramatiq or Celery installed, we will default to async\nimage processing. You will need workers to listen to the `pictures` queue.\nYou can override the queue name, via the `PICTURES[\"QUEUE_NAME\"]` setting.\n\n## Migrations\n\nDjango doesn't support file field migrations, but we do.\nYou can simply auto create the migration and replace Django's\n`AlterField` operation with `AlterPictureField`. That's it.\n\nYou can follow [the example][migration] in our test app, to see how it works.\n\n[migration]: tests/testapp/migrations/0002_alter_profile_picture.py\n\n## Contrib\n\n### Django Rest Framework ([DRF])\n\nWe do ship with a read-only `PictureField` that can be used to include all\navailable picture sizes in a DRF serializer.\n\n```python\nfrom rest_framework import serializers\nfrom pictures.contrib.rest_framework import PictureField\n\nclass PictureSerializer(serializers.Serializer):\n    picture = PictureField()\n```\n\nYou may provide optional GET parameters to the serializer, to specify the aspect\nratio and breakpoints you want to include in the response. The parameters are\nprefixed with the `fieldname_` to avoid conflicts with other fields.\n\n```bash\ncurl http://localhost:8000/api/path/?picture_ratio=16%2F9&picture_m=6&picture_l=4\n# %2F is the url encoded slash\n```\n\n```json\n{\n  \"other_fields\": \"…\",\n  \"picture\": {\n    \"url\": \"/path/to/image.jpg\",\n    \"width\": 800,\n    \"height\": 800,\n    \"ratios\": {\n      \"1/1\": {\n        \"sources\": {\n          \"image/webp\": {\n            \"100\": \"/path/to/image/1/100w.webp\",\n            \"200\": \"…\"\n          }\n        },\n        \"media\": \"(min-width: 0px) and (max-width: 991px) 100vw, (min-width: 992px) and (max-width: 1199px) 33vw, 25vw\"\n      }\n    }\n  }\n}\n```\n\nNote that the `media` keys are only included, if you have specified breakpoints.\n\n### Django Cleanup\n\n`PictureField` is compatible with [Django Cleanup](https://github.com/un1t/django-cleanup),\nwhich automatically deletes its file and corresponding `SimplePicture` files.\n\n[drf]: https://www.django-rest-framework.org/\n[celery]: https://docs.celeryproject.org/en/stable/\n[dramatiq]: https://dramatiq.io/\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "pillow,Django,image,pictures,WebP,AVIF",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pictures",
    "package_url": "https://pypi.org/project/django-pictures/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-pictures/",
    "project_urls": {
      "Changelog": "https://github.com/codingjoe/django-pictures/releases",
      "Documentation": "https://github.com/codingjoe/django-pictures#django-pictures",
      "Issue-Tracker": "https://github.com/codingjoe/django-pictures/issues",
      "Project-URL": "https://github.com/codingjoe/django-pictures",
      "Source": "https://github.com/codingjoe/django-pictures"
    },
    "release_url": "https://pypi.org/project/django-pictures/1.0.1/",
    "requires_dist": [
      "django",
      "pillow",
      "celery ; extra == \"celery\"",
      "django-cleanup ; extra == \"cleanup\"",
      "django-dramatiq ; extra == \"dramatiq\"",
      "djangorestframework ; extra == \"drf\"",
      "pytest ; extra == \"test\"",
      "pytest-cov ; extra == \"test\"",
      "pytest-django ; extra == \"test\"",
      "redis ; extra == \"test\""
    ],
    "requires_python": ">=3.8",
    "summary": "Responsive cross-browser image library using modern codes like AVIF & WebP.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16746155,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5f1b2e647db43540210aee0321e841ef78ef5a815a3a02bf2defb0ec82ae93f",
        "md5": "18ce80516021bbace3a2b70296eec9b8",
        "sha256": "da01e51ef303948cfa0443578caab10601da5cc269afbdcf63dc5db7fcb022cf"
      },
      "downloads": -1,
      "filename": "django_pictures-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "18ce80516021bbace3a2b70296eec9b8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 19902,
      "upload_time": "2023-02-08T12:45:24",
      "upload_time_iso_8601": "2023-02-08T12:45:24.132725Z",
      "url": "https://files.pythonhosted.org/packages/b5/f1/b2e647db43540210aee0321e841ef78ef5a815a3a02bf2defb0ec82ae93f/django_pictures-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6aa9dc3a2a1c53b8393a10c7351ada7e66658be6974f31940f747641253a42ea",
        "md5": "1c9649f7982f15002ac9600abf0eab96",
        "sha256": "51c27afb48b74334a52b4fb1e727a1c0d794442471ebcdda1a5cda06d57510a1"
      },
      "downloads": -1,
      "filename": "django-pictures-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1c9649f7982f15002ac9600abf0eab96",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 18021,
      "upload_time": "2023-02-08T12:45:25",
      "upload_time_iso_8601": "2023-02-08T12:45:25.423193Z",
      "url": "https://files.pythonhosted.org/packages/6a/a9/dc3a2a1c53b8393a10c7351ada7e66658be6974f31940f747641253a42ea/django-pictures-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}