{
  "info": {
    "author": "Shekhar Tiwatne",
    "author_email": "pythonic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "Python wrapper for Digital Ocean [API V2](https://developers.digitalocean.com).\n\n[![Latest Version](https://badge.fury.io/py/dosa.svg)](http://badge.fury.io/py/dosa)\n\n[![Number of PyPI downloads](https://pypip.in/d/dosa/badge.png)](https://crate.io/packages/dosa/)\n\n[![Travis Build](https://img.shields.io/travis/shon/dosa.svg)](https://travis-ci.org/shon/dosa)\n\n\nInstallation\n============\n\n``` {.sourceCode .bash}\npip install dosa\n```\n\nUsage\n=====\n\n``` {.sourceCode .python}\nimport dosa\n\nAPI_KEY = 'Your API Key'\ndosa.set_debug()  # enables debug logs\n\nclient = dosa.Client(api_key=API_KEY)\n\n# Droplets\nclient.droplets.list()\nstatus, result = client.droplets.create(name='terminator', region='nyc2',\\\n    size='512mb', image='ubuntu-14-04-x32', ssh_keys=[12345])\nnew_droplet_id = result['id']\n\n# Droplet\nnew_droplet = client.Droplet(new_droplet_id)\nprint(new_droplet.info())\n## shortcuts\nnew_droplet.status()\nnew_droplet.ip_addresses()\nclient.droplets.delete(new_droplet_id)\n\n\n# Get all available size configs\nclient.sizes.list()\n\n# SSH Keys\npub_key = open('~/.ssh/id_rsa.pub').read()\nclient.keys.create(name='RSA key', public_key=pub_key)\nclient.keys.list()\n\n# Images\nclient.images.list()\nclient.images.all()\nclient.images.search('ubuntu', 'sgp1', show_op=True)\n\n# Domains\nclient.domains.list()\nclient.domains.all()\nclient.domains.create(name='example.com', ip_address='1.2.3.4')\nclient.domains.delete(id='example.com')\n\n### Get specific domain\ndomain = client.Domain(domain='example.com')\ndomain.info()\n\n# Domain Records\ndr = client.DomainRecords(domain='example.com')\ndr.list()\ndr.create(type='A', name='example.com', data='162.10.66.0')\n\n### Get specific domain record for a domain\nrecord = dr.Record(record_id='7976006')\nrecord.info()\nrecord.update(name='new.example.com')\n\n# Firewalls\n## Create a firewall\nparams = {\n 'inbound_rules': [{'ports': '22',\n   'protocol': 'tcp',\n   'sources': {'addresses': ['0.0.0.0/0', '::/0']}},\n  {'ports': '80',\n   'protocol': 'tcp',\n   'sources': {'addresses': ['0.0.0.0/0', '::/0']}}],\n 'name': 'firewall',\n 'outbound_rules': [{'destinations': {'addresses': ['0.0.0.0/0', '::/0']},\n   'ports': 'all',\n   'protocol': 'tcp'}],\n 'tags': []}\nfirewall = client.firewalls.create(**params)\n\n# search firewall by name\nfirewall = client.firewalls.get_by_name('firewall')\n\n## add a droplet to a firewall\nfirewall.add_droplet(new_droplet_id)\n\n## remove a droplet from a firewall\nfirewall.remove_droplet(new_droplet_id)\n\n## delete a firewall\nclient.firewalls.delete(id=firewall.id)\n\n# Extras\n# $ ls keys/\n# rsa_pub1.id  rsa_pub2.key  rsa_pub3.key\nkeys_dir = 'keys'\nclient.sync_ssh_keys(keys_dir)\n```\n\nNotes\n=====\n\nImage search:\n\n    >>> client.images.search('ubuntu', region='sgp1', show_op=True)\n\nAbove code snippets searches for images containing ubuntu in description\nor slug. Since region is specified (sgp1), only images in sgp1 region\nwould be considered. If no region is specified all regions are included.\n\nTests:\n\n    >>> tox\n\nTo run tests, run `tox` in the root directory of the repo. It will create\nvirtual environments specified in `tox.ini`, install dependancies, and\nrun pytest.\n\nCredits\n=======\n\nCreated while working on [Scroll.in](http://scroll.in)'s project.\n\nDosa?\n=====\n\n[![\"Paper Masala Dosa\" by SteveR- -\n<http://www.flickr.com/photos/git/3936135033/>. Licensed under Creative\nCommons Attribution 2.0 via Wikimedia\nCommons](http://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Paper_Masala_Dosa.jpg/640px-Paper_Masala_Dosa.jpg)](http://commons.wikimedia.org/wiki/File:Paper_Masala_Dosa.jpg#mediaviewer/File:Paper_Masala_Dosa.jpg)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shon/dosa/",
    "keywords": "",
    "license": "http://www.opensource.org/licenses/mit-license.php",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dosa",
    "package_url": "https://pypi.org/project/dosa/",
    "platform": "",
    "project_url": "https://pypi.org/project/dosa/",
    "project_urls": {
      "Homepage": "https://github.com/shon/dosa/"
    },
    "release_url": "https://pypi.org/project/dosa/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python wrapper for Digital Ocean API V2",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6586897,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ee37f86eadf8b7be88ecca7833b95c1b7ff936f0f4d068619f560dc98db5757",
        "md5": "4e29f5817657cf886f8c876ac97c26de",
        "sha256": "a71748036e1b2185d4aed2eaa39e477b147add464a525cc64abb107ebbbd9bf1"
      },
      "downloads": -1,
      "filename": "dosa-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4e29f5817657cf886f8c876ac97c26de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10809,
      "upload_time": "2020-02-07T06:20:57",
      "upload_time_iso_8601": "2020-02-07T06:20:57.212215Z",
      "url": "https://files.pythonhosted.org/packages/3e/e3/7f86eadf8b7be88ecca7833b95c1b7ff936f0f4d068619f560dc98db5757/dosa-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}