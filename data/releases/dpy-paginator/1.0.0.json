{
  "info": {
    "author": "OnceYT",
    "author_email": "sahaa6919@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# dpy-paginator\n\n<details>\n<summary><strong>Table of contents</strong></summary>\n\n- [Overview](#overview)\n- [Installation](#installation)\n- [Usage](#usage)\n    - [Basic usage](#basic_usage)\n    - [discord.ext.Commands usage](#commands_usage)\n    - [discord.app_commands usage (ephemeral)](#appcommands_usage)\n- [Options and Parameters](#options)\n    - [Control who can interact](#author_ids)\n    - [Add a timeout](#timeout)\n</details>\n\n##### <a name='overview'></a>Built and tested on [discord.py](https://github.com/Rapptz/discord.py) 2.1.1\nA discord.py utility with no external dependencies that makes paginating embeds easier.\n\nSome of it's features are -\n- Easy to use.\n- Supports both ephemeral and non-ephemeral responses.\n- Buttons are enabled/disabled automatically depending on the current page number, number of embeds provided or at timeout.\n\nThe paginator consists of 4 buttons - ⏪, ◀️, 'Jump To' modal, ▶️, ⏩\n- ⏪ - Shows the first embed. Disabled if there are less than 3 embeds or if already on the first embed.\n- ◀️ - Shows the previous embed. Disabled if already on the first embed.\n- 'Jump To' modal - Triggers a `discord.ui.Modal` that takes you to the page number you input. Disabled if there are less than 4 embeds.\n- ▶️ - Shows the next embed. Disabled if already on the last embed.\n- ⏩ - Shows the last embed. Disabled if there are less than 3 embeds or if already on the last page.\n\n# <a name='installation'></a>Installation\n```\npip install git+https://github.com/onceyt/dpy-paginator.git@v1.0.0\n```\n\n# <a name='usage'></a>Usage\n##### <a name='basic_usage'></a>Basic usage:\n```py\nimport discord\nfrom dpy_paginator import paginate\n\nembed1 = discord.Embed(title = \"This is embed#1\")\nembed2 = discord.Embed(title = \"This is embed#2\")\noutput = await paginate(embeds = [embed1, embed2])\n\n# output.embed gives you the first embed of the pagination\n# output.view gives you the discord.ui.View that controls the pagination\n\nawait Messagable.send(embed = output.embed, view = output.view)\n\n# you want to send both in your Messageable.send\n```\n\n##### <a name='commands_usage'></a>discord.ext.Commands example:\n```py\nimport discord\nfrom discord.ext import commands\nfrom dpy_paginator import paginate\n\nbot = discord.Bot() # your discord.Bot object\n\n@bot.command()\nasync def example(ctx: commands.Context):\n  embed1 = discord.Embed(title = \"This is Embed#1\")\n  embed2 = discord.Embed(title = \"This is Embed#2\")\n  output = await paginate(embeds = [embed1, embed2])\n  await ctx.send(embed = output.embed, view = output.view)\n```\nThis command has the following output:\n\n![discord.ext.Commands example image](https://i.imgur.com/7aOIIpK.png)\n\n##### <a name='appcommands_usage'></a>discord.app_commands usage: (ephemeral)\n```py\nfrom discord import app_commands\nfrom dpy_paginator import paginate\n\n@app_commands.command(name='example')\nasync def example_command(interaction: discord.Interaction):\n  await interaction.response.defer(ephemeral = True, thinking = True)\n  embed1 = discord.Embed(title = \"This is Embed#1\")\n  embed2 = discord.Embed(title = \"This is Embed#2\")\n  output = await paginate(embeds = [embed1, embed2])\n  await interaction.followup.send(embed = output.embed, view = output.view)  \n```\nThis command has the following output:\n\n![discord.app_commands (ephemeral) example image](https://i.imgur.com/tA78jy0.png)\n\n# <a name='options'></a>Options and Parameters \n\n##### <a name='author_ids'></a>Control who can interact: (`author_ids: list[int]` param)\n\nYou can control which user(s) can interact with the view by passing a `author_ids` list.\n```py\n...\n\nawait paginate(embeds = [embed1, embed2], author_ids = [#ID1, #ID2])\n```\nWhen anyone except the specified user(s) try to interact, the paginator ignores that interaction:\n\n![author_ids error example image](https://i.imgur.com/QY7dTrw.png)\n\n##### <a name='timeout'></a>Adding a timeout: (`timeout: int` param)\n\n\nBy default, the view has a timeout of 90 seconds but this can be changed by passing a `timeout` parameter.\n```py\n...\n\nawait paginate(embeds = [embed1, embed2], timeout = 60)\n```\nThe buttons get automatically disabled after timeout (except when no button is interacted with)[^1]. You can also use `timeout = None` for no timeout.\n\nExample of a timedout view:\n\n![timedout image](https://i.imgur.com/qzI9eax.png)\n\nIn the scenario that no button is interacted with and the view gets timedout, the buttons will not be automatically disabled resulting in the need of an extra step. `output.view.timedout` returns a boolean which we can use to check if the view has timedout.\n```py\nimport asyncio\n...\ntimeout = 60\n\noutput = await paginate(embeds = [embed1, embed2], timeout = timeout)\nmessage = await Messageable.send(embed = output.embed, view = output.view)\n\nawait asyncio.sleep(timeout + 0.5) # add 0.5 to the timeout to account for processing delays\nif output.view.timedout: # check if the view is timedout\n  await message.edit(view = output.view) # manually edit the buttons if the output is timedout\n\n# the view will automatically timeout incase this check returns False\n```\nNote that incase of ephemeral responses (or scenarios where the output will be deleted before the timeout), this extra step is probably not worth it.\n\n[^1]: To explain this, the `paginateButtons` view class receives the `discord.Interaction` object only when one of the buttons is interacted with which is then used to edit the message with the disabled buttons upon timeout. Only running `paginate()` and sending the output does not give the class access to the message sent, thus resulting in the need of an extra step to satisfy this possibility.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dpy-paginator",
    "package_url": "https://pypi.org/project/dpy-paginator/",
    "platform": null,
    "project_url": "https://pypi.org/project/dpy-paginator/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dpy-paginator/1.0.0/",
    "requires_dist": [
      "discord.py (>=2.0.0,<3.0.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "A paginator utility for discord.py",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17123040,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f349194c7dca2d8f5d130d7dd89c506325528071f39d1e26692f97482fc4b2b",
        "md5": "21e5daa8b04a02cbd8e4fdcdded993fd",
        "sha256": "39714daafc560b09971bffdd165afc8c72f3e781fdcf6491d3ad3587ba1fdc0a"
      },
      "downloads": -1,
      "filename": "dpy_paginator-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "21e5daa8b04a02cbd8e4fdcdded993fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 5150,
      "upload_time": "2023-03-02T05:35:30",
      "upload_time_iso_8601": "2023-03-02T05:35:30.630627Z",
      "url": "https://files.pythonhosted.org/packages/0f/34/9194c7dca2d8f5d130d7dd89c506325528071f39d1e26692f97482fc4b2b/dpy_paginator-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86f3d874c3aeee592353caf89ee1bc5e67ac7064cd8fd46e781f89bb01bb7704",
        "md5": "1285307fcd18442424f75d6994fe2c5d",
        "sha256": "4c12d528e6f400c18d0adbfa0eea53800b089b37472fd3c294b6e287e582762e"
      },
      "downloads": -1,
      "filename": "dpy_paginator-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1285307fcd18442424f75d6994fe2c5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 4606,
      "upload_time": "2023-03-02T05:35:32",
      "upload_time_iso_8601": "2023-03-02T05:35:32.956342Z",
      "url": "https://files.pythonhosted.org/packages/86/f3/d874c3aeee592353caf89ee1bc5e67ac7064cd8fd46e781f89bb01bb7704/dpy_paginator-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}