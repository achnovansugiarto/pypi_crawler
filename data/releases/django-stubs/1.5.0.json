{
  "info": {
    "author": "Maksim Kurnikov",
    "author_email": "maxim.kurnikov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "<img src=\"http://mypy-lang.org/static/mypy_light.svg\" alt=\"mypy logo\" width=\"300px\"/>\n\n# Typesafe Django Framework\n\n[![Build Status](https://travis-ci.com/typeddjango/django-stubs.svg?branch=master)](https://travis-ci.com/typeddjango/django-stubs)\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n[![Gitter](https://badges.gitter.im/mypy-django/Lobby.svg)](https://gitter.im/mypy-django/Lobby)\n\nThis package contains [type stubs](https://www.python.org/dev/peps/pep-0561/) and a custom mypy plugin to provide more precise static types and type inference for Django framework. Django uses some Python \"magic\" that makes having precise types for some code patterns problematic. This is why we need this project. The final goal is to be able to get precise types for most common patterns.\n\n\n## Installation\n\n```bash\npip install django-stubs\n```\n\nSee [Configuration](#configuration) section to get started.\n\n\n## Configuration\n\nTo make `mypy` happy, you will need to add:\n\n```ini\n[mypy]\nplugins =\n    mypy_django_plugin.main\n\n[mypy.plugins.django-stubs]\ndjango_settings_module = \"myproject.settings\"\n```\n\nin your `mypy.ini` or `setup.cfg` [file](https://mypy.readthedocs.io/en/latest/config_file.html).\n\nTwo things happeining here:\n\n1. We need to explicitly list our plugin to be loaded by `mypy`\n2. Our plugin also requires `django` settings module (what you put into `DJANGO_SETTINGS_MODULE` variable) to be specified\n\nThis fully working [typed boilerplate](https://github.com/wemake-services/wemake-django-template) can serve you as an example.\n\n\n## Version compatibility\n\nWe rely on different `django` and `mypy` versions:\n\n| django-stubs | mypy version | django version | python version\n| ------------ | ---- | ---- | ---- |\n| 1.3.0 | 0.750 | 2.2.x | ^3.6\n| 1.2.0 | 0.730 | 2.2.x | ^3.6\n| 1.1.0 | 0.720 | 2.2.x | ^3.6\n| 0.12.x | old semantic analyzer (<0.711), dmypy support | 2.1.x | ^3.6\n\n\n## FAQ\n\n### Is this an official Django project?\n\nNo, it is not. We are indendepent from Django at the moment.\nThere's a [proposal](https://github.com/django/deps/pull/65) to merge our project into the Django itself.\nYou show your support by linking the PR.\n\n### Is it safe to use this in production?\n\nYes, it is! This project does not affect your runtime at all.\nIt only affects `mypy` type checking process.\n\nBut, it does not make any sense to use this project without `mypy`.\n\n### mypy crashes when I run it with this plugin installed\n\nCurrent implementation uses Django runtime to extract models information, so it will crash, if your installed apps or `models.py` is not correct. For this same reason, you cannot use `reveal_type` inside global scope of any Python file that will be executed for `django.setup()`. \n\nIn other words, if your `manage.py runserver` crashes, mypy will crash too. \nYou can also run `mypy` with [`--tb`](https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-show-traceback)\noption to get extra information about the error.\n\n### I cannot use QuerySet or Manager with type annotations\n\nYou can get a `TypeError: 'type' object is not subscriptable` \nwhen you will try to use `QuerySet[MyModel]` or `Manager[MyModel]`.\n\nThis happens because Django classes do not support [`__class_getitem__`](https://www.python.org/dev/peps/pep-0560/#class-getitem) magic method.\n\nYou can use strings instead: `'QuerySet[MyModel]'` and `'Manager[MyModel]'`, this way it will work as a type for `mypy` and as a regular `str` in runtime.\n\nCurrently we [are working](https://github.com/django/django/pull/12405) on providing `__class_getitem__` to the classes where we need them.\n\n### How can I use HttpRequest with custom user model?\n\nYou can subclass standard request like so:\n\n```python\nfrom django.http import HttpRequest\nfrom my_user_app.models import MyUser\n\nclass MyRequest(HttpRequest):\n    user: MyUser\n```\n\nAnd then use `MyRequest` instead of standard `HttpRequest` inside your project.\n\n\n## Related projects\n\n- [`awesome-python-typing`](https://github.com/typeddjango/awesome-python-typing) - Awesome list of all typing-related things in Python.\n- [`djangorestframework-stubs`](https://github.com/typeddjango/djangorestframework-stubs) - Stubs for Django REST Framework.\n- [`pytest-mypy-plugins`](https://github.com/typeddjango/pytest-mypy-plugins) - `pytest` plugin that we use for testing `mypy` stubs and plugins.\n- [`wemake-django-template`](https://github.com/wemake-services/wemake-django-template) - Create new typed Django projects in seconds.\n\n\n\n## To get help\n\nWe have Gitter here: <https://gitter.im/mypy-django/Lobby>\n\nIf you think you have more generic typing issue, please refer to <https://github.com/python/mypy> and their Gitter.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/typeddjango/django-stubs",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-stubs",
    "package_url": "https://pypi.org/project/django-stubs/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-stubs/",
    "project_urls": {
      "Homepage": "https://github.com/typeddjango/django-stubs"
    },
    "release_url": "https://pypi.org/project/django-stubs/1.5.0/",
    "requires_dist": [
      "mypy (<0.780,>=0.770)",
      "typing-extensions",
      "django"
    ],
    "requires_python": ">=3.6",
    "summary": "Mypy stubs for Django",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17319814,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a73de833cc71540964475b1a53c58f552559ce7c08a82d35fef3502e18ad65f",
        "md5": "b4bdd848d12ccc9900e4044e121e8216",
        "sha256": "4a03df70e062f4133085efc461148d0934f36ccfd60a2b6d7bc35821f62008b6"
      },
      "downloads": -1,
      "filename": "django_stubs-1.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b4bdd848d12ccc9900e4044e121e8216",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 300890,
      "upload_time": "2020-03-14T22:05:12",
      "upload_time_iso_8601": "2020-03-14T22:05:12.370327Z",
      "url": "https://files.pythonhosted.org/packages/4a/73/de833cc71540964475b1a53c58f552559ce7c08a82d35fef3502e18ad65f/django_stubs-1.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8b89bc1ca3d68aacf5c01ed596b4d5caca2f9683b5d7de12070720be43479ee",
        "md5": "5247a7d6ff445c801a98c793aafc1e72",
        "sha256": "b4c9042f2c2fcb89dc0fb37df070cce0f9bf93b39ae193847b6e5a392b13c430"
      },
      "downloads": -1,
      "filename": "django-stubs-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5247a7d6ff445c801a98c793aafc1e72",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 162352,
      "upload_time": "2020-03-14T22:05:15",
      "upload_time_iso_8601": "2020-03-14T22:05:15.130452Z",
      "url": "https://files.pythonhosted.org/packages/c8/b8/9bc1ca3d68aacf5c01ed596b4d5caca2f9683b5d7de12070720be43479ee/django-stubs-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}