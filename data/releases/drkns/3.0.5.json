{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "drkns is a simple build tool aimed at easing the continuous integration of \nmonorepos through dependency aware caching.\n\n[![Build Status](https://github.com/frantzmiccoli/drkns/actions/workflows/main.yml/badge.svg)](https://github.com/frantzmiccoli/drkns/actions)\n\nLe problem\n===\n\nMonorepositories contain many projects, it rarely makes sense to\nrebuild an every projects when changes are committed.\n\nBut we can't build necessarily limit ourselves to run builds and tests \nin directories where changes occurred because some projects depends on others.\n\nQuick start\n===\n\n> You wild kid!\n> \n> &nbsp;&nbsp;&nbsp;&nbsp;*Confucius*\n\nCheck [a dummy project](https://github.com/frantzmiccoli/drkns/tree/master/testprojects/nominalcase) \non which our tests are based.\n\nCreate your drkns.yml files\n---\n\nFrom your monorepo root, in `drkns.yml`:\n\n```\ndependencies:\n  project1: projects/project1\n  project2: projects/project2\n  library1: library/library1\n```\n\nSample `projects/project1/drkns.yml`:\n\n```\ncheckSteps:\n  installDependencies: pipenv install\n  test: pipenv run pytest\nbuildSteps:\n  build: pipenv run paver build\n  deploy: pipenv run paver deploy_to_pypi\ndependencies:\n  - ../../library/library1\n```\n\nTest that everything is alright\n---\n\n\n```\ndrkns check  # Check the configuration file\ndrkns list   # Check list the identified steps\ndrkns run    # Run everything\n```\n\n`.gitignore` hygiene\n---\n\n```\necho '.drknspersistence/*' >> .gitignore\n```\n\nIn your CI\n---\n\nWith environment variables:\n* DRKNS_S3_PATH: S3 path to a directory you can write to\n* AWS_ACCESS_KEY_ID \n* AWS_DEFAULT_REGION\n* AWS_SECRET_ACCESS_KEY\n\n```\npip install drkns\n\ndrkns check             # We never know\ndrkns sync in           # Get past execution statuses from S3\ndrkns debug             # If needed, you can check which steps are\n                        #   going to run here\ndrkns run               # Run all steps\ndrkns clean             # Will remove four weeks old execution statuses to \n                        #   limit disk usage\ndrkns sync out --delete # Persist all execution statuses from S3,\n                        #  **use --delete** to also delete data removed by \n                        #  `clean`\n```\n\nDocumentation\n===\n\nUnit\n---\n\nEach `drkns.yml` forms a `unit`, it should represent a specific unit of your \ncode, a directory containing a lib or a project, that has specific build steps\nor can be depended on.\n\n`drkns.yml` accepted fields:\n\n* `directory`: string, Current directory by default, only used to compute the \n   hash associated with this build file\n* `dependencies`: strings sequence, path containing another `drkns.yml` file \n  to load, you can also only indicate a directory name. \n* `checkSteps`: dictionary of steps, see below.\n* `buildSteps`: dictionary of steps, see below.\n* `cleanupSteps`: dictionary of steps, see below.\n\nSteps\n---\n\nSteps :\n\n* Have a `command` to run, string, required.\n* Have a `background` flag, default to false.\n* Can also be a single string, the `command` argument.\n* Are ordered.\n* Are deduplicated at execution. E.g. `library/front-util/drkns.yml` is required\n   by both `projects/aviation-customer/drkns.yml` and \n   `projects/retail-customer/drkns.yml` it will only appear in the first one to\n   be parsed. Note that this can impact `.gitignore` resolution.\n\nThree different step types are available, by order of execution:\n\n1. `checkSteps`: steps necessary to check the integrity of the `unit`. \n    Will always be ran if no checkSteps has already failed in this `unit`.\n    Typically used to build\n    your application, your docker images and run your unit tests.\n    If a steps fail, the following ones will not be executed.\n2. `buildSteps`: steps executed only if `checkSteps`, dependencies' `checkSteps`\n    and previous buildSteps succeeded. You\n    can use this to upload or deploy the build artifacts. Beware there is no\n    guarantee that `dependencies` will be executed, there execution might have\n    been started \n3. `cleanupSteps`: steps executed no matter what (except if the `unit` has not \n   changed since last execution). You can suppress things that have\n    taken too much memory or things in the like.\n\n### Warning: implicit cleanup of background tasks\n\nIf any of your steps used the background attributes they are killed after the \ncleanup steps at the end of the execution of your `unit.\n\n### Caching\n\nThe point of `drkns` is to not rerun everything for every change.\n\nUpon execution a `.drknspersistence` folder in the directory of each unit will \nbe created, this folder will contain the execution status of each step for a \nspecific unit, step and a specific hash.\n\nAt each execution a hash for the unit is computed, it changes if files within\nthe unit or its dependencies hashes have changed. If it is present in the\npersisted files, it will prevent the execution.\n\n### Ignoring files `.drknsignore`\n\nOften, it happens that the execution of steps will alter some files in the \ndirectory changing the mentioned above hash.\n\nIt is not necessarily something that we wish.\n\nYou can add partial or full file or directory names (as long as they have a \ntrailing `/`) to be ignored in a `.drknsignore` file. \nA unit will ignore specific patterns.\n\n**Warning: `.drknsignore` are also inherited from parents.** Because of this \npath are not supported to avoid ambiguity.\n\nThe ignored elements are passed to `dirhash`'s `ignore` argument. The relevant \ndocumentation is available at https://pypi.org/project/dirhash/ .\n\nSample `.drknsignore`:\n\n```\n*.tmp\nbuild/\n```\n\n### Persistence\n\nPersistence is enabled through S3 buckets.\n\nYou need a `DRKNS_S3_PATH` environment variable, or provide it as a command line\nargument.\n\n`export DRKNS_S3_PATH=s3://some-drkns-bucket/someProjectDirectory`\n\n`drkns` expects [AWS environment variables](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html) \nto be defined: `AWS_ACCESS_KEY_ID`, `AWS_DEFAULT_REGION` and \n`AWS_SECRET_ACCESS_KEY` for the AWS client to work properly.\n\n### Parallel CI Generation\n\nThis is an advanced usage. You are invited to skip this if this is your first \ndive in `drkns`.\n\nOnce your CI is setup, maybe you want to parallelize job execution, `drkns` can \ngenerate your CI configuration provided you write a template.\n\nThe template must be located at `.drknsgeneration/*.template.*`, only a single\ntemplate file must be in this directory. \n\nFields to be defined in the template, always in the form `%FIELD_NAME%`:\n\n* `DRKNS_GROUP_BEGIN` and `%DRKNS_GROUP_END%`: around a group template \n  definition. A group will contain `units` that are\n  ran together. The lines containing those tags will be removed. For now, only\n  one unit per group is supported, so do not be surprised.\n* `DRKNS_UNIT_BEGIN` and `DRKNS_UNIT_END`: around a unit template, \n  mostly calling `drkns run %DRKNS_UNIT_NAME%`. The lines containing those tags \n  will be removed.\n* `%DRKNS_GROUP_UNITS%`: where group units will be inserted - \n  must be within a group template. The line containing this tag will be removed.\n* `%DRKNS_UNIT_NAME%`: the unit's name\n* `%DRKNS_DEPENDENCY_GROUPS_NAMES{, }%`: the dependency group names, \n  with a comma separator (as an example),\n  if you need a \n  separator: `%DRKNS_DEPENDENCY_GROUPS_NAMES?{, }%` will only insert a `, `.\n* `%DRKNS_ALL_GROUPS_NAMES{, }%`: all group names, here with a comma separator\n\n`drkns` CLI\n---\n\n### Commands\n\n* `drkns check`: checks `drkns.yml` files by loading the one in the current\n   directory and printing errors if anything bad happens.\n* `drkns clean`: cleans older than four weeks execution steps from the persisted \n  data.\n* `drkns debug`: prints debug information, mostly to control if execution cache\n  has been altered.\n* `drkns forget UNIT_NAME`: forgets the previous execution of `UNIT_NAME`,\n   `all` for everything. Nota the name of the root config unit is `main`. This\n   can be used to force the new execution of some entries.   \n* `drkns list`: prints all the available steps plan. Beware repeating steps are \n   removed.\n* `drkns run [--limit-output] [--force-success] [--summary] STEP_NAME`: run the\n   given steps and its requirements or all steps.\n* `drkns sync DIRECTION [--delete ][DRKNS_S3_PATH]`: syncs the persisted \n  execution cache, `DIRECTION` can be `in` or `out`.\n* `drkns generate`: generates a file based on the template described above\n\n### Options\n\n* `--force-success`: flag, forces exit code `0`.\n* `--limit-output`: flag, less restrictive than `summary`, limits the outputs to\n  the failed steps' output at this execution (ignored cached ones), steps and\n  execution statuses.\n* `--summary`: flag, prints only the summary: steps and execution statuses.\n* `--delete`: flag, deletes remote execution status files that do not exist \n  locally. It is of paramount importance to use after `clean`. It is a flag as\n  it makes sense to sync in / sync out at each step to prevent duplicate \n  execution when a parallel processing is happening or the process can be \n  canceled.\n\nOutput\n---\n\n`drkns` output is composed of the failed steps output only and a summary.\n\n### Failed steps output\n\n```\nOutput for unitName1@stepName1:\n/bin/sh: line 1: stop: command not found\n```\n\nIn case a step got canceled because of a previous failure:\n\n```\nOutput for unitName2@stepName2:\nPrevious failure of dependency1 / dependency1FailingCheck\n```\n\n### Summary\n\n```\ndependency1@dependency1FailingCheck: Error (restored)\ndependency1@dependency1Build: Ignored\ndependency1@dependency1Cleanup: OK (restored)\nproject1@project1Check: OK (restored)\nproject1@project1ShouldNotRunBuild: Ignored (restored)\nproject1@project1Cleanup: OK (restored)\nproject3@project3Build: OK\nproject3@project3failingCleanup: Error\nproject3@project3NeverExecutedCleanUp: OK\nmain@mainCheck1: OK\nmain@mainBuild1: Ignored\n```\n\nStep statuses:\n\n* `Error`: an error occurred on execution\n* `Ignored`: an error occurred in a previous step, preventing this step from \n  being executed\n* `OK`: all good\n\n`(restored)` indicates that the execution did not happen this round but was\ncache from a previous step.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/frantzmiccoli/drkns",
    "keywords": "devops build test monorepo cache",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drkns",
    "package_url": "https://pypi.org/project/drkns/",
    "platform": "",
    "project_url": "https://pypi.org/project/drkns/",
    "project_urls": {
      "Homepage": "https://github.com/frantzmiccoli/drkns"
    },
    "release_url": "https://pypi.org/project/drkns/3.0.5/",
    "requires_dist": [
      "awscli (<2,>=1)",
      "dirhash (<1.0,>=0.2)",
      "PyYAML (<6.0,>=5.3)"
    ],
    "requires_python": "",
    "summary": "Simple and agnostic monorepo build tool",
    "version": "3.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10379460,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bca2abecf0286a94873d48ced989af7cc5cc04220f0ef7ae448af00cac17892f",
        "md5": "c3f7281d42d55b10a9c8c9759e57d7cb",
        "sha256": "8aea51459fd672e906ff0d625417be4537334a2691bb7002b19f68b1096a0e66"
      },
      "downloads": -1,
      "filename": "drkns-3.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c3f7281d42d55b10a9c8c9759e57d7cb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 31824,
      "upload_time": "2021-05-09T17:53:51",
      "upload_time_iso_8601": "2021-05-09T17:53:51.687290Z",
      "url": "https://files.pythonhosted.org/packages/bc/a2/abecf0286a94873d48ced989af7cc5cc04220f0ef7ae448af00cac17892f/drkns-3.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32d0e7ac8df780a325c3d5de529a8d2d0a3bced6329d66c30ed39d74b1ac3a5f",
        "md5": "133484388a5095dd6d785f46b669ab6a",
        "sha256": "29f29fe023c555c5487ff2a842073f4849d97d2f186dfa74f27aa3d9f7eff068"
      },
      "downloads": -1,
      "filename": "drkns-3.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "133484388a5095dd6d785f46b669ab6a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25031,
      "upload_time": "2021-05-09T17:53:53",
      "upload_time_iso_8601": "2021-05-09T17:53:53.212664Z",
      "url": "https://files.pythonhosted.org/packages/32/d0/e7ac8df780a325c3d5de529a8d2d0a3bced6329d66c30ed39d74b1ac3a5f/drkns-3.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}