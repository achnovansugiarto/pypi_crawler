{
  "info": {
    "author": "Mitja Pagon",
    "author_email": "mitja@inueni.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-subadmin\n===============\n\n``django-subadmin`` provides a special kind of ``ModelAdmin``, called\n``SubAdmin``, that allows it to be nested within another ``ModelAdmin``\ninstance. Similar to django’s built-in ``InlineModelAdmin``, it allows\nediting of related objects, but instead of doing it inline, it gives you\na full ``ModelAdmin`` as sub-admin of parent ``ModelAdmin``. Like\n``InlineModelAdmin`` it works on models related by ``ForeignKey``.\nMultiple ``SubAdmin`` instances can be nested within a single\n``ModelAdmin`` or ``SubAdmin`` allowing for multi-level nesting.\n\nInstallation\n------------\n\nThe easiest and recommended way to install ``django-subadmin`` is from\n`PyPI <https://pypi.python.org/pypi/django-subadmin>`__\n\n::\n\n    pip install django-subadmin\n\nYou need to add ``subadmin`` to ``INSTALLED_APPS`` in your projects\n``settings.py``, otherwise ``django`` will not be able to find the\nnecessary templates and template tags.\n\n::\n\n    # settings.py\n\n    INSTALLED_APPS = (\n        ...\n        'subadmin',\n        ...\n    )\n\nExample Usage\n-------------\n\nSometimes things are best explained by an example. Let’s say you have\ntwo related models.\n\n.. code:: python\n\n    # models.py\n\n    class MailingList(models.Model):\n        name = models.CharField(max_length=100)\n\n\n    class Subscriber(models.Model):\n        mailing_list = models.ForeignKey(MailingList)\n        username = models.CharField(max_length=100)\n\nIf you wish to display only subscribers belonging to a particular\nmailing list in django admin, your only options is to use\n``InlineModelAdmin``, which is not very practical when dealing with\nlarge number of related objects, plus, you loose all the cool\nfunctionality of ``ModelAdmin`` like searching, filtering, pagination,\netc …\n\nThis is where ``SubAdmin`` comes in.\n\n.. code:: python\n\n    # admin.py\n\n    from subadmin import SubAdmin, RootSubAdmin\n    from .models import MailingList, Subscriber\n\n    # Instead of admin.ModelAdmin we subclass SubAdmin,\n    # we also set model attribute\n\n    class SubscriberSubAdmin(SubAdmin): \n        model = Subscriber\n        list_display = ('username',)\n\n\n    # Since this is the top level model admin, which will be registred with admin.site,\n    # we subclass RootSubAdmin and set subadmins attribute\n\n    class MailingListAdmin(RootSubAdmin):\n        list_display = ('name',)\n\n        subadmins = [SubscriberSubAdmin]\n        \n\n    admin.site.register(MailingList, MailingListAdmin)\n\nWith just a few lines of code you get a fully functional ``ModelAdmin``,\nthat will automatically pull in just the relevant related objects, based\non ``ForeignKey`` relation between the two models, it will also auto set\n``ForeignKey`` fields for nested relations and exclude them from change\nform when adding and editing objects on subadmin.\n\nScreenshots\n~~~~~~~~~~~\n\n.. figure:: https://github.com/inueni/django-subadmin-example/raw/master/screenshots/subadmin_screenshot_1.png?raw=true\n   :alt: alt text\n\n   alt text\n\n``SubAdmin`` instances are accesible from edit view of the\n``ModelAdmin`` instance they are nested in. In the screenshot above you\ncan see links to *Subscribers* and *Messages* subadmins (marked with red\nrectangle) for ``MailingList`` instance *Mailing list 5*.\n\n--------------\n\n.. figure:: https://github.com/inueni/django-subadmin-example/raw/master/screenshots/subadmin_screenshot_2.png?raw=true\n   :alt: alt text\n\n   alt text\n\n``SubAdmin`` looks and behaves just like a regular ``ModelAdmin``, but\nlooking at breadcrumbs (marked with red rectangle), you can see it is\nnested within another ``ModelAdmin``. Displayed ``Subscribers`` are\nlimited to those related to ``MailingList`` instance *Mailing list 5*.\n\n--------------\n\n.. figure:: https://github.com/inueni/django-subadmin-example/raw/master/screenshots/subadmin_screenshot_3.png?raw=true\n   :alt: alt text\n\n   alt text\n\nWhen adding or editing objects with ``SubAdmin``, ``ForeignKey`` fields\nto parent instances are removed from the form and automatically set when\nsaving. In this example ``mailing_list`` field is removed and value is\nset to parent ``MailingList`` instance *Mailing list 5*.\n\n    If you want to see it in action, or get a more in-depth look at how\n    to set everything up, check out\n    https://github.com/inueni/django-subadmin-example.\n\nSupported Django versions\n-------------------------\n\nCurrent release of ``django-subadmin`` is **1.9.1** and is compatible\nwith Django 1.9, 1.10 and 1.11.\n\nVerison numbering\n^^^^^^^^^^^^^^^^^\n\n``django-subadmin`` version numbers are related to Django version\nnumbers. ``django-subadmin`` major and minor version numbers equal the\nminimal compatible django release.\n\nStability\n---------\n\n``django-subadmin`` has evolved from code that has been running on\nproduction servers since early 2014 without any issues. Still, the code\nhas been heavily refactored prior to public release, and while it is\nunlikely to eat your data, consider it **BETA** software.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/inueni/django-subadmin/",
    "keywords": "django admin modeladmin foreignkey related field",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-subadmin",
    "package_url": "https://pypi.org/project/django-subadmin/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-subadmin/",
    "project_urls": {
      "Homepage": "https://github.com/inueni/django-subadmin/"
    },
    "release_url": "https://pypi.org/project/django-subadmin/1.9.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A special kind of ModelAdmin that allows it to be nested within another ModelAdmin",
    "version": "1.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14358674,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a677eea5c031d0127f5182ba38bc1e44d7e7cc04423063e9f52fc912986c0491",
        "md5": "3829ae9b4b34192758e2e16d6ff7b4de",
        "sha256": "c09052e8686811fcbc07e7739e95b8a2713aa54621dd8e04782c745c1824a0ca"
      },
      "downloads": -1,
      "filename": "django-subadmin-1.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3829ae9b4b34192758e2e16d6ff7b4de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11798,
      "upload_time": "2017-11-18T17:04:29",
      "upload_time_iso_8601": "2017-11-18T17:04:29.420752Z",
      "url": "https://files.pythonhosted.org/packages/a6/77/eea5c031d0127f5182ba38bc1e44d7e7cc04423063e9f52fc912986c0491/django-subadmin-1.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}