{
  "info": {
    "author": "Mitja Pagon",
    "author_email": "mitja@inueni.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-subadmin\n\n`django-subadmin` provides a special kind of `ModelAdmin`, called `SubAdmin`, that allows it to be nested within another `ModelAdmin` instance. Similar to django's built-in `InlineModelAdmin`, it allows editing of related objects, but instead of doing it inline, it gives you a full `ModelAdmin` as sub-admin of parent `ModelAdmin`. Like `InlineModelAdmin` it works on models related by `ForeignKey`. Multiple `SubAdmin` instances can be nested within a single `ModelAdmin` or `SubAdmin` allowing for multi-level nesting.\n\n### Suported Python and Django releases\n\nCurrent release of `django-subadmin` is **2.0.1** and it supports Python 3 only and Django versions 2.0 and up (including Django 3.0).\n\nThere is also a *legacy* **1.9.3** release with support for Python 2.7 and Django versions 1.9, 1.10 and 1.11. This release is **no longer maintained and supported**, but it's made available for legacy applications.\n\n#### Verison numbering\n\ndjango-subadmin versions follow Django version numbers. django-subadmin major and minor version numbers equal the minimal compatible django release.\n\n## Installation\n\nThe easiest and recommended way to install `django-subadmin` is from [PyPI](https://pypi.python.org/pypi/django-subadmin)\n\n```\npip install django-subadmin\n```\n\nYou need to add `subadmin` to `INSTALLED_APPS` in your projects `settings.py`, otherwise `django` will not be able to find the necessary templates and template tags.\n\n```\n# settings.py\n\nINSTALLED_APPS = (\n    ...\n    'subadmin',\n    ...\n)\n```\n\n## Example Usage\n\nSometimes things are best explained by an example. Let's say you have two related models.\n\n```python\n# models.py\n\nclass MailingList(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Subscriber(models.Model):\n    mailing_list = models.ForeignKey(MailingList)\n    username = models.CharField(max_length=100)\n```\n\nIf you wish to display only subscribers belonging to a particular mailing list in django admin, your only options is to use `InlineModelAdmin`, which is not very practical when dealing with large number of related objects, plus, you loose all the cool functionality of `ModelAdmin` like searching, filtering, pagination, etc ...\n\nThis is where `SubAdmin` comes in.\n\n```python\n# admin.py\n\nfrom subadmin import SubAdmin, RootSubAdmin\nfrom .models import MailingList, Subscriber\n\n# Instead of admin.ModelAdmin we subclass SubAdmin,\n# we also set model attribute\n\nclass SubscriberSubAdmin(SubAdmin): \n    model = Subscriber\n    list_display = ('username',)\n\n\n# Since this is the top level model admin, which will be registred with admin.site,\n# we subclass RootSubAdmin and set subadmins attribute\n\nclass MailingListAdmin(RootSubAdmin):\n    list_display = ('name',)\n\n    subadmins = [SubscriberSubAdmin]\n\n\nadmin.site.register(MailingList, MailingListAdmin)\n```\n\nWith just a few lines of code you get a fully functional `ModelAdmin`, that will automatically pull in just the relevant related objects, based on `ForeignKey` relation between the two models, it will also auto set `ForeignKey` fields for nested relations and exclude them from change form when adding and editing objects on subadmin.\n\n\n### Caveats\n\nIn order to properly support unique field validation (see Issue #7), `SubAdmin` will inject a small mixin into the form. This is done in the `get_form` method and if you override this method in your own classes, make sure to call `super()` or `perp_subadmin_form()` directly. See `subadmin` source code for more details.\n\nAlso, the injected mixin `SubAdminFormMixin` overrides `validate_unique` on the form. If your custom form overrides this method as well, have a look at `subadmin` source code for ways in which it differs from stock `ModelForm` implementation and adjust your code as neccesarry.\n\n\n### Screenshots\n\n![alt text](https://github.com/inueni/django-subadmin-example/raw/master/screenshots/subadmin_screenshot_1.png?raw=true)\n\n `SubAdmin` instances are accesible from edit view of the `ModelAdmin` instance they are nested in. In the screenshot above you can see links to _Subscribers_ and _Messages_ subadmins (marked with red rectangle) for `MailingList` instance _Mailing list 5_.\n\n---\n\n![alt text](https://github.com/inueni/django-subadmin-example/raw/master/screenshots/subadmin_screenshot_2.png?raw=true)\n\n `SubAdmin` looks and behaves just like a regular `ModelAdmin`, but looking at breadcrumbs (marked with red rectangle), you can see it is nested within another `ModelAdmin`. Displayed `Subscribers` are limited to those related to `MailingList` instance _Mailing list 5_.\n\n---\n\n ![alt text](https://github.com/inueni/django-subadmin-example/raw/master/screenshots/subadmin_screenshot_3.png?raw=true)\n\nWhen adding or editing objects with `SubAdmin`, `ForeignKey` fields to parent instances are removed from the form and automatically set when saving. In this example `mailing_list` field is removed and value is set to parent `MailingList` instance _Mailing list 5_.\n\n> If you want to see it in action, or get a more in-depth look at how to set everything up, check out <https://github.com/inueni/django-subadmin-example>.\n\n## Stability\n\n`django-subadmin` has evolved from code that has been running on production servers since early 2014 without any issues. The code is provided **as-is** and the developers bear no responsibility for any issues stemming from it's use.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/inueni/django-subadmin/",
    "keywords": "django admin modeladmin foreignkey related field",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-subadmin",
    "package_url": "https://pypi.org/project/django-subadmin/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-subadmin/",
    "project_urls": {
      "Homepage": "https://github.com/inueni/django-subadmin/"
    },
    "release_url": "https://pypi.org/project/django-subadmin/3.2.0/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A special kind of ModelAdmin that allows it to be nested within another ModelAdmin",
    "version": "3.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14358674,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e110764b4c13880080244bc67500abbd290923dba740d31f961ebcbbdbbcb16a",
        "md5": "789b934c46069a5e51eed46633bf0ddb",
        "sha256": "0e778649a18bb422dbbd3e69ffcca5f304e3cc920924a43cf55e2bb8a9c7f9e2"
      },
      "downloads": -1,
      "filename": "django_subadmin-3.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "789b934c46069a5e51eed46633bf0ddb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 13679,
      "upload_time": "2022-06-28T10:16:20",
      "upload_time_iso_8601": "2022-06-28T10:16:20.196147Z",
      "url": "https://files.pythonhosted.org/packages/e1/10/764b4c13880080244bc67500abbd290923dba740d31f961ebcbbdbbcb16a/django_subadmin-3.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4bf71c0697ab9bea8792496cea593d205bc4ed63c159aa1aa22da54b8c8b17d",
        "md5": "0dd51c8b3c1a95784a144b2655108a6d",
        "sha256": "d74aa8efe3b8ba0f14f6327e72af336aa851e1893a232f3cd07b066f96d295b0"
      },
      "downloads": -1,
      "filename": "django-subadmin-3.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0dd51c8b3c1a95784a144b2655108a6d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 11157,
      "upload_time": "2022-06-28T10:16:23",
      "upload_time_iso_8601": "2022-06-28T10:16:23.262352Z",
      "url": "https://files.pythonhosted.org/packages/d4/bf/71c0697ab9bea8792496cea593d205bc4ed63c159aa1aa22da54b8c8b17d/django-subadmin-3.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}