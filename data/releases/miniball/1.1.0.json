{
  "info": {
    "author": "Alexandre Devert",
    "author_email": "marmakoide@hotmail.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/miniball.svg\n   :target: https://pypi.org/project/miniball/\n   :alt: miniball on PyPI\n\n.. image:: https://travis-ci.com/marmakoide/miniball.svg?branch=master\n   :target: https://travis-ci.com/marmakoide/miniball\n   :alt: miniball on TravisCI\n   \n.. image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target: https://github.com/marmakoide/miniball/blob/master/LICENSE\n   :alt: MIT License badge\n\n========\nminiball\n========\n\nA Python module to efficiently compute the smallest bounding ball of a point \nset, in arbitrary number of dimensions.\n\nThe algorithm runs in approximatively linear time in respects to the number of\ninput points. This is NOT a derivative nor a port of \n`Bernd Gaertner's C++ library <https://people.inf.ethz.ch/gaertner/subdir/software/miniball.html>`__.\n\nThis project is licensed under the MIT License\n\nRequirements\n============\n\nminiball 1.1 requires\n\n* Python >= 3.5\n* Numpy >= 1.17\n\nInstallation\n============\n\n.. code-block:: console\n\n\t$ pip install miniball\n\n\nUsage\n=====\n\nHere is how you can get the smallest bounding ball of a set of points ``S``\n\n.. code-block:: pycon\n\n\t>>> import numpy\n\t>>> import miniball\n\t>>> S = numpy.random.randn(100, 2)\n\t>>> C, r2 = miniball.get_bounding_ball(S)\n\nThe center of the bounding ball is ``C``, its radius is the square root of ``r2``. \nThe input coordinates ``S`` can be integer, they will automatically cast to floating\npoint internally.\n\nAnd that's it ! miniball does only one thing with one function.\n\n\nResult accuracy\n---------------\n\nAlthough the algorithm returns exact results in theory, in practice it returns\nresult only exact up to a given precision. The ``epsilon`` keyword argument allows \nto control that precision, it is set to 1e-7 by default.\n\n.. code-block:: pycon\n\n\t>>> import numpy\n\t>>> import miniball\n\t>>> S = numpy.random.randn(100, 2)\n\t>>> C, r2 = miniball.get_bounding_ball(S, epsilon=1e-7)\n\n\nRepeatability\n-------------\n\nThe algorithm to compute bounding balls relies on a pseudo-random number generator.\nAlthough the algorithms return an exact solution, it is only exact up to the epsilon\nparameter. As a consequence, running the ``get_bounding_ball`` function twice on \nthe same input might not return exactly the same output.\n\nBy default, each call to ``get_bounding_ball`` pull out a new, freshly seeded \npseudo-random number generator. Therefore, if you wish to get repeatable results \nfrom ``get_bounding_ball``, you have to (and only have to) pass the same pseudo-random \nnumber generator, using with the ``rng`` keyword argument\n\n.. code-block:: pycon\n\n\t>>> import numpy\n\t>>> import miniball\t\n\t>>> S = numpy.random.randn(100, 2)\t\n\t>>> rng = numpy.random.RandomState(42)\n\t>>> C, r2 = miniball.get_bounding_ball(S, rng = rng)\n\n\nImplementation notes\n====================\n\nThe algorithm implemented is Welzl's algorithm. It is a pure Python implementation,\nit is not a binding of the popular C++ package `Bernd Gaertner's miniball <https://people.inf.ethz.ch/gaertner/subdir/software/miniball.html>`__.\n\nThe algorithm, although often presented in its recursive form, is here implemented\nin an iterative fashion. Python have an hard-coded recursion limit, therefore\na recursive implementation of Welzl's algorithm would have an artificially limited\nnumber of point it could process.\n\nAuthors\n=======\n\n* **Alexandre Devert** - *Initial work* - `marmakoide <https://github.com/marmakoide>`__\n\nLicense\n=======\n\nThis project is licensed under the MIT License - see the `LICENSE <LICENSE>`__ file for details",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marmakoide/miniball",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miniball",
    "package_url": "https://pypi.org/project/miniball/",
    "platform": "",
    "project_url": "https://pypi.org/project/miniball/",
    "project_urls": {
      "Homepage": "https://github.com/marmakoide/miniball"
    },
    "release_url": "https://pypi.org/project/miniball/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Efficiently computes the smallest bounding ball of a point set, in arbitrary number of dimensions.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10196778,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "798cdb84d6a78c1f9e06e5cc0d482b20a8ae644184416b669be9437121183487",
        "md5": "e4312cbd4de944117ced55498082a25b",
        "sha256": "e65713dc77a05d436be32061b14087fb9aa6cb717f2bf87d8fc8ec6ee2252ff7"
      },
      "downloads": -1,
      "filename": "miniball-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e4312cbd4de944117ced55498082a25b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 6256,
      "upload_time": "2021-04-28T13:47:31",
      "upload_time_iso_8601": "2021-04-28T13:47:31.531299Z",
      "url": "https://files.pythonhosted.org/packages/79/8c/db84d6a78c1f9e06e5cc0d482b20a8ae644184416b669be9437121183487/miniball-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}