{
  "info": {
    "author": "2degrees Limited",
    "author_email": "2degrees-floss@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# drf-nested-resources\n\nThis is a django rest framework extension to allow developers to create nested\nresources.\n\n## How to use\n\n### Configuration of nested resources\n\nFor this example we are going to create a simple API with the following\nendpoints:\n\n    /developers/\n    /developers/<id>\n    /developers/<id>/languages/\n    /developers/<id>/languages/<id>\n\nFirst we start with the following Django models:\n\n```python\nfrom django.db.models.base import Model\nfrom django.db.models.fields import CharField\nfrom django.db.models.fields.related import ForeignKey\n\n\nclass Developer(Model):\n\n    name = CharField(max_length=20)\n\n\nclass ProgrammingLanguage(Model):\n\n    name = CharField(max_length=20)\n\n    author = ForeignKey(Developer, related_name='programming_languages')\n```\n\nWe will have the two viewsets for both the `developers` and `languages` resource\ncollections.\n\n```python\nfrom rest_framework.viewsets import ModelViewSet\nfrom drf_nested_resources.fields import HyperlinkedNestedModelSerializer\n\n\nclass _DeveloperSerializer(HyperlinkedNestedModelSerializer):\n\n    class Meta(object):\n\n        model = Developer\n\n        fields = ('url', 'name', 'programming_languages')\n\n\nclass DeveloperViewSet(ModelViewSet):\n\n    queryset = Developer.objects.all()\n\n    serializer_class = _DeveloperSerializer\n\n\nclass _ProgrammingLanguageSerializer(HyperlinkedNestedModelSerializer):\n\n    class Meta(object):\n\n        model = ProgrammingLanguage\n\n        fields = ('url', 'name', 'author')\n\n\nclass ProgrammingLanguageViewSet(ModelViewSet):\n\n    queryset = ProgrammingLanguage.objects.all()\n\n    serializer_class = _ProgrammingLanguageSerializer\n```\n\nThe related fields in the ViewSets `author` and `programming_languages` should\nfollow the model representation so that `author` will give us a url for the\ndeveloper who wrote the ProgrammingLanguage and the `programming_languages`\nshould give us a list of urls for the ProgrammingLanguages that the Developer\nwrote.\n\nThis is how you would generate the urlpatterns for them:\n\n```python\n_RESOURCES = [\n    Resource(\n        'developer',\n        'developers',\n        DeveloperViewSet,\n        [\n            NestedResource(\n                'language',\n                'languages',\n                ProgrammingLanguageViewSet,\n                parent_field_lookup='author',\n                )\n            ],\n        ),\n    ]\nurlpatterns = make_urlpatterns_from_resources(_RESOURCES)\n```\n\nFor more examples of different relationships and authorization check the test\nsuite.\n\nChangelog\n=========\n\nVersion 1.3\n------------------\n\nUpdated dependencies and added coverage config\n\n\nVersion 1.2 Beta 3\n------------------\n\nFixed error when urlconf was not explicitly set on the request\n\n\nVersion 1.2 Beta 2\n------------------\n\nFixed support for non-session-based authenticators when checking permissions in\nviewsets in the ancestry.\n\n\nVersion 1.2 Beta 1\n------------------\n\nImplemented ability to force a field value in a nested resource to be set to\nthe URL of an ascending resource. This is done using the optional attribute\n``field_forced_to_ancestor`` on the serializer's ``Meta`` class.\n\n\nVersion 1.1\n-----------\n\nRe-worked the mechanism for URL generation to support cross-linking resource\ntrees.\n\n**Breaking change**: Any previous usage of many-to-many fields on variables\nin the current request's URL will now break.\n\n\nVersion 1.0 Release Candidate 3\n-------------------------------\n\nAdded proper support for namespaced URLs\n\n\nVersion 1.0 Release Candidate 1\n-------------------------------\n\nAdded support for Django 1.10 and Rest Framework 3.4.3\n\n\nVersion 1.0 Beta 1 (unreleased)\n-------------------------------\n\nInitial release.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.python.org/pypi/drf-nested-resources",
    "keywords": "",
    "license": "BSD (http://dev.2degreesnetwork.com/p/2degrees-license.html)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-nested-resources",
    "package_url": "https://pypi.org/project/drf-nested-resources/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-nested-resources/",
    "project_urls": {
      "Homepage": "https://pypi.python.org/pypi/drf-nested-resources"
    },
    "release_url": "https://pypi.org/project/drf-nested-resources/1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Support for nested routes in the Django REST Framework",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6429118,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd6942e1c4c988339870865831a0b45cdce7fd68352308db133a45e1b4a334ee",
        "md5": "303bf43ae207d1e9853b5b397840c455",
        "sha256": "97cbfb15acef44369ccb57f254db32f0843950c30365033634bfa7cdef150a1f"
      },
      "downloads": -1,
      "filename": "drf_nested_resources-1.3-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "303bf43ae207d1e9853b5b397840c455",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 17434,
      "upload_time": "2017-09-29T14:19:39",
      "upload_time_iso_8601": "2017-09-29T14:19:39.254980Z",
      "url": "https://files.pythonhosted.org/packages/fd/69/42e1c4c988339870865831a0b45cdce7fd68352308db133a45e1b4a334ee/drf_nested_resources-1.3-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c91c94b13f567da7b0005cd46e5ab8a2e0abbe9df03bb83a7dbcb7c90fc906a",
        "md5": "f80f368f00c1b10a13b8b73a3b06947e",
        "sha256": "6eaea2804eab21952e85112f4fa1e929b506db82fcd8bcfaf350b30667a3faa0"
      },
      "downloads": -1,
      "filename": "drf-nested-resources-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f80f368f00c1b10a13b8b73a3b06947e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10746,
      "upload_time": "2017-09-29T14:19:37",
      "upload_time_iso_8601": "2017-09-29T14:19:37.315747Z",
      "url": "https://files.pythonhosted.org/packages/3c/91/c94b13f567da7b0005cd46e5ab8a2e0abbe9df03bb83a7dbcb7c90fc906a/drf-nested-resources-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}