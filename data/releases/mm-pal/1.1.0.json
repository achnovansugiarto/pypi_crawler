{
  "info": {
    "author": "Kevin Weiss",
    "author_email": "weiss.kevin604@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![ci Actions Status](https://github.com/riot-appstore/mm_pal/workflows/ci/badge.svg)](https://github.com/riot-appstore/mm_pal/actions)\n\n# mm_pal (Memory Map Protocol Abstraction Layer)\n\nPython package for providing an runtime access to embedded devices based\non a memory map type interface.\n\n## Description\n\nThis package consists of base classes to build interfaces and a mock\ndevice used for testing and as an example of implementation.\n\nDevice connection such as `serial` and parsers such as `json` are used to get\nstandard output\n\n## Concept\n\nEmbedded devices are generally constrained and communication with\nruntime parameters can take up lots of resources. Since many users of\nmicrocontroller are familiar with the concept of a memory map or\nregister map the [Memory Map\nManager](https://github.com/riot-appstore/memory_map_manager) can be\nused as and lightweight way of coordinating a single memory map for\ndocumentation, C structures, and python interface. The `mm_pal` provides\nthe building blocks for a custom interface. All common functions related\nto connecting to the device, parsing output of the registers, and\nreading/writing to the registers are handled and only application\nspecific functionality needs to be implemented. This can make\ndevelopment easier, especially when the registers are changing\nfrequently.\n\n## Architecture\n\n```\n┏━━━━━━━━━━━┓       ┏━━━━━━━━━┓\n┃ developer ┃       ┃ script  ┃\n┗━━━━━▲━━━━━┛       ┗━━━━▲━━━━┛\n      ┃                  ┃\n ┏━━━━┸━━━━┓       ┏━━━━━┸━━━━━┓\n ┃ my_cli  ◄━━━━━━━┫ my_app_if ┃\n ┗━━━━▲━━━━┛       ┗━━━━━▲━━━━━┛\n      ┃    ┌────────┐    ┃\n      ┃    │ mm_pal │    ┃\n┌─────╂────┴────────┴────╂────────┐\n│┏━━━━┸━━━┓          ┏━━━┸━━━┓    │\n│┃ mm_cmd ◄━━━━━━━━━━┫ mm_if ┃    │\n│┗━━━━━━━━┛          ┗━━━▲━━━┛    │\n│                        ┃        │\n│                ┏━━━━━━━┸━━━━━━━┓│\n│                ┃ serial_driver ┃│\n│                ┗━━━━━━━▲━━━━━━━┛│\n└────────────────────────╂────────┘\n                         ┃\n              ┏━━━━━━━━━━▼━━━━━━━━━━┓\n              ┃ my_embedded_device  ┃\n              ┗━━━━━━━━━━━━━━━━━━━━━┛\n```\n\n## Installing package\n\nTo install `mm_pal` use pip:\n\n`pip install mm_pal --user`\n\n_Note: only use python 3 which may require pip3_\n\n\nTo install from sources:\n\n`./setup.py install --force --user`\n\n\n_Note: setuptools package should be installed._\n\n## Using the package\n\nThis package is meant to be built upon. An example implementation is done with\nthe [mock_if](mock_pal/mock_if.py) and the [mock_cli](mock_pal/mock_cli.py).\n\n## Useful commands\n\nTo regenerate documentation use:\n`sphinx-apidoc -f -o docs/source/ mm_pal mock_pal; make html -C docs/`\n\n## Testing\n\nTo test the package with `pytest` must be installed installed and updated.\n\nUsing `./setup.py test` or `tox` will perform tests on the\nsource package.\n\nSpecial thanks to [riotctrl](https://github.com/RIOT-OS/riotctrl) as it served as a great example.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/riot-appstore",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mm-pal",
    "package_url": "https://pypi.org/project/mm-pal/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mm-pal/",
    "project_urls": {
      "Homepage": "https://github.com/riot-appstore"
    },
    "release_url": "https://pypi.org/project/mm-pal/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.8.*",
    "summary": "Protocol abstraction and parser for embedded devices",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16125810,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef113e2b6811ad2da4fe302e233ec8c48664795549ae1bc1663f4380a361e255",
        "md5": "919d66e5c106b27c56b74c2c97baee48",
        "sha256": "c75d56048352189d139673823e0c91aa865041b28f005aaf8f3463bbdea655f6"
      },
      "downloads": -1,
      "filename": "mm_pal-1.1.0.zip",
      "has_sig": false,
      "md5_digest": "919d66e5c106b27c56b74c2c97baee48",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.*",
      "size": 30680,
      "upload_time": "2021-02-10T13:23:16",
      "upload_time_iso_8601": "2021-02-10T13:23:16.094622Z",
      "url": "https://files.pythonhosted.org/packages/ef/11/3e2b6811ad2da4fe302e233ec8c48664795549ae1bc1663f4380a361e255/mm_pal-1.1.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}