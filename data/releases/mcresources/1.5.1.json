{
  "info": {
    "author": "Alex O'Neill",
    "author_email": "alex@molleroneill.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Minecraft Resource Generator\n\nThis is a python module aimed to enable simple generation of the many json files that are required for Minecraft modding.\n\n### Pack Format\n\nUpdates of this tool will track the latest pack format (`pack_format` in a resource pack) as soon as possible. In order to generate resources compliant with a specific pack format, the latest version can be found below\n\nPack Format | Minimum Minecraft Version | Latest mcresources Version\n---|---|---\n8 | 1.18 | Latest\n7 | 1.17 | 1.4.6\n6 | 1.16.2 | 1.4.6\n5 | 1.15 | 1.3.3\n4 | 1.13 | 0.0.2\n\n---\n### Usage\n\nmcresources can build many common files that are required for modding, and provide utilities to manage a larger project. The following is an outline of the various methods. More detail can be found in the documentation comments of each individual method or module.\n\nTo get started, the following imports are available from `mcresources`:\n\n- `ResourceManager`: A class to manage creation of resources.\n- `loot_tables`: A series of helper functions for building loot tables.\n- `surface_rules`: A series of helper functions for building surface rules.\n- `utils`: A series of utility functions.\n\n#### Resource Manager\n\n`ResourceManager` is a class which has methods to generate both vanilla Minecraft data files, and methods to generate entirely custom data files. The design of these data generators is intended to both allow the full range of generated data, and also make the most common operations the most simple. For example, generating a loot table for a block with a standard loot drop, of the block itself, can be inferred from the single call:\n\n```python\nrm.block_loot('my_block', 'modid:my_block')\n```\n\nHowever, `block_loot` also supports generating loot tables with multiple pools, entries, conditions, or functions as desired for more uncommon or complex use cases.\n\n`ResourceManager` exposes the following resource methods:\n\n**Assets**\n\n- `blockstate()`: Generates blockstate assets with a `variants` key\n- `blockstate_multipart()`: Generates blockstate assets using the `multipart` blockstate style.\n- `block_model()`: Generates block model files, either with textures or `elements`.\n- `custom_block_model()`: Generates block models for use with custom Forge model loaders.\n- `item_model()`: Generates item model files.\n- `custom_item_model()`: Generates item models for use with custom Forge model loaders.\n- `lang()`: Adds translation keys to an internal buffer. To write all language files, call `ResourceManager.flush()`\n\n**Data**\n\n- `crafting_shapeless()`: Generates a shapeless crafting recipe\n- `crafting_shaped()`: Generates a shaped crafting recipe\n- `recipe()`: Generates an arbitrary custom recipe type, for use in generating mod recipes.\n- `advancement()`: Generates a custom advancement.\n- `item_tag()`, `block_tag()`, `entity_tag()`, `fluid_tag()`: Generates custom tags. These do not write files upon call, and instead accumulate tags in an internal buffer. To write all buffered tags, call `ResourceManager.flush()`\n- `block_loot`: Generates loot tables for blocks.\n- `data()`: Generates a custom data file for datapacks.\n\n**World Generation**\n\n- `dimension()`: Generates a world generation dimension, with an arbitrary generator.\n- `dimension_type()`: Generates a world generation dimension type with all vanilla parameters supported.\n- `biome()`: Generates a world generation biome with all vanilla parameters supported.\n- `configured_carver()`: Generates a configured carver.\n- `configured_feature()`: Generates a configured feature.\n- `configured_structure_feature()`: Generates a configured structure.\n- `placed_feature`: Generates a placed feature, from a feature and a list of placements.\n- `noise`: Generates a world generation noise definition.\n- `noise_settings`: Generates a world generation noise settings. In order to build surface rules, see `surface_rules`\n- `processor_list`: Generates a processor list.\n- `template_pool`: Generates a template pool.\n\n**Misc**\n\n- `block()`: Creates a named `BlockContext`\n- `item()`: Creates a named `ItemContext`\n- `write()`: Writes an arbitrary data file.\n\nAll files generated by mcresources will have a comment (`'__comment__'`) inserted to identify them. This also allows mcresources via the usage of `utils.clean_generated_resources()` to delete all files that have been generated, allowing the user to see which ones are created manually, and/or manage updating older files to a newer configuration\n\n#### Contexts\n\nWhen calling various `ResourceManager` methods, they will often return a context object, one of `BlockContext`, `ItemContext`, or `RecipeContext`. This object can be used as a shortcut to add other files for a single block or item, for instance, adding a blockstate, model, item block model, and loot table with only specifying the name once:\n\n```\nrm.blockstate(...).with_item_block_model(...).with_block_model(...)\n```\n\nContexts can also be obtained directly by calling `block()`, or `item()`.\n\n#### Factory Methods\n\nFor common minecraft block models (slabs, stairs, etc.), there are a number of factory methods which can be used to produce vanilla style blockstates and models for a single block. These make standard assumptions about the parent block's textures and state properties. Currently, there are the following:\n\nAll of these methods take the form of a `make_[block type]` method that can be invoked on a `BlockContext`. For instance,\n\n```\nrm.block('myblock').make_slab()\n```\n\nThese create the required block state, block and item models, adhering to vanilla style naming conventions and using vanilla base models. Thus adding standard block assets for wood or stone variants can be done simply.\n\nThe following methods are available:\n - `make_slab()`\n - `make_stairs()`\n - `make_fence()`\n - `make_fence_gate()`\n - `make_wall()`\n - `make_door()`\n - `make_trapdoor()`\n - `make_button()`\n - `make_pressure_plate()`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alcatrazEscapee/mcresources",
    "keywords": "python,minecraft,resources,modding,forge",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mcresources",
    "package_url": "https://pypi.org/project/mcresources/",
    "platform": "",
    "project_url": "https://pypi.org/project/mcresources/",
    "project_urls": {
      "Homepage": "https://github.com/alcatrazEscapee/mcresources"
    },
    "release_url": "https://pypi.org/project/mcresources/1.5.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python Data Generator for Minecraft Modding",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16746424,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cadb5f2fa836a7010b6772db97f1cb62fedb85c9305dc985b76cd6cd676a8ecd",
        "md5": "c5e156ed5e2d71938d55ca55d4d56709",
        "sha256": "1a6741f9d2dc82bea8cbd2f1ef7824a8e738d2c40c2a18cb834df182672f0f2f"
      },
      "downloads": -1,
      "filename": "mcresources-1.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c5e156ed5e2d71938d55ca55d4d56709",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23911,
      "upload_time": "2021-12-03T23:30:44",
      "upload_time_iso_8601": "2021-12-03T23:30:44.033381Z",
      "url": "https://files.pythonhosted.org/packages/ca/db/5f2fa836a7010b6772db97f1cb62fedb85c9305dc985b76cd6cd676a8ecd/mcresources-1.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1c9be82da9686df092ad531658951a4a6e15b9759c3aa83174f94e8bcc6c7c6",
        "md5": "fb46df19951dca0bf163b6e10fda6479",
        "sha256": "8566537957a7a882773d730903f6b11fcadbe416e728c2842fa7eaa8bbd73b28"
      },
      "downloads": -1,
      "filename": "mcresources-1.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fb46df19951dca0bf163b6e10fda6479",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22279,
      "upload_time": "2021-12-03T23:30:45",
      "upload_time_iso_8601": "2021-12-03T23:30:45.298424Z",
      "url": "https://files.pythonhosted.org/packages/f1/c9/be82da9686df092ad531658951a4a6e15b9759c3aa83174f94e8bcc6c7c6/mcresources-1.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}