{
  "info": {
    "author": "Alex O'Neill",
    "author_email": "alex@molleroneill.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Minecraft Resource Generator\n\nThis is a python module aimed to enable simple generation of the many json files that are required for forge modding.\n\n### Version History\n\nThis tool will be updated to support the latest version of minecraft as soon as possible. For now, the latest version of this tool available for past versions of Minecraft can be found below:\n\n - Minecraft 1.14.x - 1.15.x: Latest\n - Minecraft 1.13.x: v0.0.2\n\nNote that unless the minecraft data format changes between versions, this tool will still work on older versions of minecraft.\n\n\n---\n### Usage\n\nmcresources can build many common files that are required for forge modding, and provide utilities to manage a larger project. The following is an outline of the various methods and how to use them in the most efficient manner.\n\nAll files generated by mcresources will have a comment (`'__comment__'`) inserted to identify them. This also allows mcresources via the usage of `clean_generated_resources()` to delete all files that have been generated, allowing the user to see which ones are created manually, and/or manage updating older files to a newer configuration\n\nA few elements are common to multiple methods:\n - `name_parts`: This represents the resource location for a specific block or item. It can be specified as a string, i.e. `'block_ruby_ore'`, or as a list or tuple if the block uses directories as separators. This means that `('ore_blocks', 'ruby')` corresponds to the resource location `modid:ore_blocks/ruby`, and the resulting file `ruby.json` would be found in `modid/blockstates/ore_blocks/`. An optional domain can also be specified (`minecraft:stone`), which will override the `ResourceManager`s domain if present.\n\n - `conditions`: A single condition can either be specified as a fully specified dictionary (which will be inserted into the json verbatim), or as a string, which will be expanded to `{ 'type': string_condition }`\n\n - `item stacks`: An item stack can be specified as a fully specified dictionary (which will be inserted into the json verbatim), or as a string. As a string, it must represent an item resource location, i.e. `minecraft:golden_boots` will create the json `{ 'item': 'minecraft:golden_boots' }`. Additionally, you can prefix the string with `tag!` to specify that it represents a tag, i.e. `tag!forge:rods/wooden` will create the json `{ 'tag': 'forge:rods/wooden' }`\n\n#### Contexts\n\n**New as of v1.1.0**: When calling various `ResourceManager` methods, they will often return a context object, one of `BlockContext`, `ItemContext`, or `RecipeContext`. This object can be used as a shortcut to add other files for a single block or item, for instance, adding a blockstate, model, item block model, and loot table with only specifying the name once:\n```\nrm.blockstate(...).with_item_block_model(...).with_block_model(...)\n```\n\nContexts can also be obtained directly by calling `block(name_parts)`, or `item(name_parts)`.\n\nIn addition, this delegated behavior has been expanded to tags. Tags no longer create single files every time the relevant `tag` method is called. Instead, they accumulate tag entries in a buffer, allowing multiple `tag` calls to append entries to a single tag.\n\nIn order to finalize tag (and lang / translation) entries, a call to `ResourceManager#flush` is necessary, which will clear the current buffer for tags and translation entries and write all relevant files.\n\n#### Factory Methods\n\nFor common minecraft block models (slabs, stairs, etc.), there are a number of factory methods which can be used to produce vanilla style blockstates and models for a single block. These make standard assumptions about the parent block's textures and state properties. Currently, there are the following:\n\nAll of these methods take the form of a `make_[block type]` method that can be invoked on a `BlockContext`. For instance,\n\n```\nrm.block('myblock').make_slab()\n```\n\nThese create the required block state, block and item models, adhering to vanilla style naming conventions and using vanilla base models. Thus adding standard block assets for wood or stone variants can be done simply.\n\nThe following methods are available:\n - `make_slab()`\n - `make_stairs()`\n - `make_fence()`\n - `make_fence_gate()`\n - `make_wall()`\n - `make_door()`\n - `make_trapdoor()`\n - `make_button()`\n - `make_pressure_plate()`\n\n#### Resource Generators\n\n##### Blockstates\n```\nblockstate(name_parts, model = None, variants = None, use_default_model = True)\n```\n - `name_parts` specifies the block resource location, as seen above\n - `model` specifies the model. If not present, it will default to `modid:block/name/parts`, meaning `blockstate('pink_grass')` will create the file `modid/blockstates/pink_grass.json`, which has a model of `modid:block/pink_grass`\n - `variants` specifies the variants as found in the json file. It should be a dictionary as per usual minecraft blockstate files. If it isn't present, it will default to an empty / single variant block: `'variants': { '': model }`. If present, each variant that does not specify a model will take the default model, unless `use_default_model` is false.\n\n```\nblockstate_multipart(name_parts, parts)\n```\n - `name_parts` specifies the block resource location, as seen above\n - `parts` specifies the parts. It must be a sequence of part elements. Each part element can be a dictionary (which will be expanded as `{'apply': part}`), or a pair of a `when` and `apply` data, which will be expanded as `{'when': part[0], 'apply': part[1]}`\n\n##### Block Models\n```\nblock_model(name_parts, textures = None, parent = 'block/cube_all', loader = None)\n```\n - `name_parts` specifies the block resource location, as seen above\n - `textures` specifies the textures for this specific model. If it is a string, it will create the json: `'textures': { 'texture': textures }`. If provided as a dictionary, it will insert `'textures': textures`\n - `parent` specifies the parent model file\n - `loader` is an optional specification for forge provided custom loaders.\n\n##### Item Models\n```\nitem_model(name_parts, textures, parent = 'item/generated', no_textures = False, loader = None)\n```\n - `name_parts` specifies the item resource location, as seen above\n - `textures` specifies the textures. If textures are supplied as strings, i.e. `'base_layer', 'middle_layer' ...`, it will assign them sequentially to layers, i.e. `{ 'layer0': 'base_layer', 'layer1': 'middle_layer' ... }`. If a dictionary is provided, it will insert those in the same way as the block model\n - `parent` specifies the parent model file\n - `no_textures`, if true, will cause the model to have no textures element\n - `loader` is an optional specification for forge provided custom loaders.\n\n\n##### Loot Tables\n```\nblock_loot(name_parts, loot_pools):\n```\n - `name_parts` specifies the block resource location, as seen above.\n - `loot_pools` specifies the contents of the loot table. \n - If `loot_pools` is passed in as a list or tuple, it will attempt to create a pool for each entry in the tuple. \n - It can also be passed in as a string or dict, in which case it will create one pool from that input.\n - The simplest loot pool is a string, i.e. `'minecraft:dirt'`, which will create a pool with one entry of type item\n        with the value of `'minecraft:dirt'`, with one roll, and the default condition (`'minecraft:survives_explosion'`)\n - If a loot pool is a dict, it will look for each possible element of a pool entry, and try to populate them\n        accordingly.\n   - `entries` can be a dict or a string. A string will expand to `'type': 'minecraft:item'`\n   - `conditions` can be a list, tuple, dict, or string. A string will expand to `{'condition': value}`. A dict will be inserted as raw json.\n   - `functions` can be a list, tuple, dict, or string. A string will expand to `{'function': value}` A dict will be inserted as raw json.\n   `rolls` will be inserted as raw json. If not present, it will default to `'rolls': 1`\n   `children`, `name`, `bonus_rolls`, `weight`, and `quality` will be inserted as raw json if present\n\nIn addition, the `loot_tables` module has several helper methods for common loot table related functions. For example:\n\n - `loot_tables.set_count(min, max, distribution)` generates an instance of the `minecraft:set_count` function.\n - `loot_tables.fortune_bonus(multiplier)` generates an instance of the `minecraft:apply_bonus`, with a standard fortune modifier.\n\n\n##### Shapeless Crafting Recipes\n```\ncrafting_shapeless(name_parts, ingredients, result, group = None, conditions = None)\n```\n - `name_parts` specifies the recipe resource location. Note crafting recipes are automatically added to `modid/data/recipes`\n - `inredients` specifies the ingredients. It must be either a list / tuple of item stacks, or a string or dictionary representing an item stack. See above for valid item stack specifications.\n - `result` specifies the recipe result or output. It must be a single item stack\n - `group` specifies the group the recipe belongs to\n - `conditions` specifies any conditions on the recipe being enabled. It must be a list / tuple of valid condition identifiers, or a string or dictionary representing an item stack\n\n##### Shaped Crafting Recipes\n```\ncrafting_shaped(name_parts, pattern, ingredients, result, group = None, conditions = None)\n```\n - `name_parts` specifies the recipe resource location. Note crafting recipes are automatically added to `modid/data/recipes`\n - `pattern` specifies the pattern. It must be a list of strings, i.e. `['XXX', ' S ', ' S ']` for a pickaxe pattern. The keys must be the same as used in the ingredients field.\n - `inredients` specifies the ingredients. It can be a dictionary of single character keys to item stacks, or it can be a single item stack (which will default to the first key found, and as such should only be used if there is only one unique input)\n - `result` specifies the recipe result or output. It must be a single item stack\n - `group` is as above\n - `conditions` is as above\n\n##### Other Recipes or Data\n```\nrecipe(name_parts, type_in, data_in, group, conditions = None)\ndata(name_parts, data_in)\n```\nThis is used to create modded recipes that are loaded via custom deserializers. As such, `name_parts` needs to include a subdirectory for the recipe type\n - `name_parts` specifies the recipe resource location.\n - `type_in` specifies the recipe type\n - `data_in` specifies the json data to be inserted into the recipe\n - `group` is as above\n - `conditions` is as above\n\n##### Tags\n```\nitem_tag(name_parts, *values, replace = False)\nblock_tag(name_parts, *values, replace = False)\nfluid_tag(name_parts, *values, replace = False)\nentity_tag(name_parts, *values, replace = False)\n```\nThese are used to create item and block tags respectively\n - `name_parts` specifies the tag resource location, as seen above\n - `values` specifies the values. It can be a single string for one value, or a list / tuple of strings for multiple values\n - `replace` specifies the replace field in the json, i.e. if the tag should replace a previous identical entry\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alcatrazEscapee/mcresources",
    "keywords": "python,minecraft,resources,modding,forge",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mcresources",
    "package_url": "https://pypi.org/project/mcresources/",
    "platform": "",
    "project_url": "https://pypi.org/project/mcresources/",
    "project_urls": {
      "Homepage": "https://github.com/alcatrazEscapee/mcresources"
    },
    "release_url": "https://pypi.org/project/mcresources/1.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An automatic resource creation tool for Minecraft 1.13+ Forge modding",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16746424,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fde05db878d5cfec70dd9f6c0a7b585af090827d3afebb2ecd4c30483fb27a19",
        "md5": "a6ffe0f84f46eae72db4528384bf4246",
        "sha256": "2e64c471010c934f08c9c065ea089acba974456fac89ffad34b3458e332df014"
      },
      "downloads": -1,
      "filename": "mcresources-1.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a6ffe0f84f46eae72db4528384bf4246",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20306,
      "upload_time": "2020-06-17T22:34:35",
      "upload_time_iso_8601": "2020-06-17T22:34:35.663456Z",
      "url": "https://files.pythonhosted.org/packages/fd/e0/5db878d5cfec70dd9f6c0a7b585af090827d3afebb2ecd4c30483fb27a19/mcresources-1.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be1966b88849231f096078989b3d6dba064ddc9b02005ba25d2b13b9b8c6a46f",
        "md5": "2192f1f92a9d7ebe10adabc16e408902",
        "sha256": "4414bac3a48ebdbf64e01390aa78360b54a439e4a2a6042818f6c12d5cbdf27d"
      },
      "downloads": -1,
      "filename": "mcresources-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2192f1f92a9d7ebe10adabc16e408902",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20060,
      "upload_time": "2020-06-17T22:34:36",
      "upload_time_iso_8601": "2020-06-17T22:34:36.899157Z",
      "url": "https://files.pythonhosted.org/packages/be/19/66b88849231f096078989b3d6dba064ddc9b02005ba25d2b13b9b8c6a46f/mcresources-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}