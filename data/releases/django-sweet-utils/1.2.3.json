{
  "info": {
    "author": "Astafeev Rustam",
    "author_email": "astafeev0308@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django sweet utils.\n\nA little django code sugar.\n\n## Quickstart\n\n1. Add `django_sweet_utils` to your `INSTALLED_APPS` setting like this:\n    ```\n    INSTALLED_APPS = [\n        ...\n        'django_sweet_utils',\n        ...\n    ]\n    ```\n\n2. Inherit your models from `django_sweet_utils.db.models.Model`:\n   ```\n   from django_sweet_utils.db.models import Model\n   \n   \n   class MyModel(Model):\n      ...\n   ```\n   \n   From now your models has the following fields:\n      - `uuid4` as object id;\n      - `created_at` as object creation time;\n      - `updated_at` as object last update time;\n      - `is_deleted` as indicator that object is deleted or not;\n   \n   Models that inherited from `django_sweet_utils.db.models.Model` can be filtered with simple `existing()` property:\n   ```\n   from django_sweet_utils.db.models import Model\n   \n   \n   class MyModel(Model):\n      ...\n   \n   \n   queryset = MyModel.objects.existing()\n   ```\n   This returns queryset filtered by `is_deleted=False`\n\n   Also, now you don't need to catch `DoesNotExist` error when attempting to get some object while it does not exist.\n   Just use `get_or_none()` instead of `get()` and query returns None if there is no object.\n\n3. Inherit your DRF API views from `django_sweet_utils.api.views`:\n   ```\n   from django_sweet_utils.api.views import UpdateAPIView, DestroyAPIView\n   \n   \n   class MyUpdateView(UpdateAPIView):\n      ...\n   \n   \n   class MyDestroyView(DestroyAPIView):\n      ...\n   ```\n   \n   From now your views supports `POST` request method instead of `PATCH` and `DELETE`\n   DestroyAPIView does not perform actual database deletion, but only marks file as deleted with `is_deleted=True`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HarleyK1ng/django-sweet-utils",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sweet-utils",
    "package_url": "https://pypi.org/project/django-sweet-utils/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-sweet-utils/",
    "project_urls": {
      "Homepage": "https://github.com/HarleyK1ng/django-sweet-utils"
    },
    "release_url": "https://pypi.org/project/django-sweet-utils/1.2.3/",
    "requires_dist": [
      "Django (>=3.1)",
      "djangorestframework"
    ],
    "requires_python": ">=3.6",
    "summary": "A little django code sugar.",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17458565,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be739635ee73173f396e6752b0e51b9fc1b0152addf15a4d36d154c85d0b2305",
        "md5": "904cc301f82f7d729ca9d155e492d1a8",
        "sha256": "cbab8a4b346b247cbe9d37525513e5c277e0817ff7cf30fd6d6cecc003654609"
      },
      "downloads": -1,
      "filename": "django_sweet_utils-1.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "904cc301f82f7d729ca9d155e492d1a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9571,
      "upload_time": "2023-02-10T07:18:35",
      "upload_time_iso_8601": "2023-02-10T07:18:35.273024Z",
      "url": "https://files.pythonhosted.org/packages/be/73/9635ee73173f396e6752b0e51b9fc1b0152addf15a4d36d154c85d0b2305/django_sweet_utils-1.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92fa10b9b7a7c68ff5adf27e89cd77ca724258b41bd2ec295cd79f6457554a71",
        "md5": "3af6307aa7ad0fe6b383e97731eee693",
        "sha256": "2b472e7c534e6fdc0de22b30266c5cf48a1cd980a960367a34d0365e66769685"
      },
      "downloads": -1,
      "filename": "django-sweet-utils-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3af6307aa7ad0fe6b383e97731eee693",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8145,
      "upload_time": "2023-02-10T07:18:36",
      "upload_time_iso_8601": "2023-02-10T07:18:36.645430Z",
      "url": "https://files.pythonhosted.org/packages/92/fa/10b9b7a7c68ff5adf27e89cd77ca724258b41bd2ec295cd79f6457554a71/django-sweet-utils-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}