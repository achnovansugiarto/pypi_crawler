{
  "info": {
    "author": "MindsDB Inc",
    "author_email": "jorge@mindsdb.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<h1 align=\"center\">\n\t<img width=\"300\" src=\"https://github.com/mindsdb/mindsdb/blob/master/assets/MindsDBColorPurp@3x.png?raw=true\" alt=\"MindsDB\"> \n\t<br>\n\t\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.python.org/downloads/\"><img src=\"https://img.shields.io/badge/python-3.6%20|%203.7|%203.8-brightgreen.svg\" alt=\"Python supported\"></a>\n   <a href=\"https://pypi.org/project/MindsDB/\"><img src=\"https://badge.fury.io/py/MindsDB.svg\" alt=\"PyPi Version\"></a>\n  <a href=\"https://pypi.org/project/MindsDB/\"><img src=\"https://img.shields.io/pypi/dm/mindsdb\" alt=\"PyPi Downloads\"></a>\n  <a href=\"https://community.mindsdb.com/\"><img src=\"https://img.shields.io/discourse/posts?server=https%3A%2F%2Fcommunity.mindsdb.com%2F\" alt=\"MindsDB Community\"></a>\n  <a href=\"https://www.mindsdb.com/\"><img src=\"https://img.shields.io/website?url=https%3A%2F%2Fwww.mindsdb.com%2F\" alt=\"MindsDB Website\"></a>\n</p>\n\n\n\n\n\nMindsDB is an Explainable AutoML framework for developers built on top of Pytorch. It enables you to build, train and test state of the art ML models in as simple as one line of code. [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Machine%20Learning%20in%20one%20line%20of%20code%21&url=https://www.mindsdb.com&via=mindsdb&hashtags=ai,ml,machine_learning,neural_networks)\n\n<table border=\"0\" style=\" border: 0px solid white;\">\n\t<tbody border=\"0\" style=\"border:0px\">\n<tr border=\"0\" style=\"border:0px\">\n\t<td border=\"0\" style=\"border:0px\">\n\t\t<img width=\"600\" src=\"https://github.com/mindsdb/mindsdb/blob/master/assets/Terminal .png?raw=true\" alt=\"MindsDB\">\n\t</td>\n\t<td border=\"0\" style=\"border:0px\">\n\t\t<img alt=\"Linux build\" src=\"https://www.screenconnect.com/Images/LogoLinux.png\" align=\"center\" height=\"30\" width=\"30\" />  <a href=\"https://travis-ci.com/mindsdb/mindsdb\">\n\t\t<img src=\"https://badges.herokuapp.com/travis/mindsdb/mindsdb?branch=master&label=build&env=BADGE=linux\"/>\n\t\t</a><hr/>\n\t\t<img alt=\"Windows build\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Windows_logo_-_2012_%28dark_blue%2C_lines_thinner%29.svg/414px-Windows_logo_-_2012_%28dark_blue%2C_lines_thinner%29.svg.png\" align=\"center\" height=\"30\" width=\"30\" /> <a href=\"https://travis-ci.com/mindsdb/mindsdb\">\n\t\t<img src=\"https://badges.herokuapp.com/travis/mindsdb/mindsdb?branch=master&label=build&env=BADGE=windows\"/>\n\t\t</a><hr/>\n\t\t<img alt=\"macOS build\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Apple_logo_black.svg/245px-Apple_logo_black.svg.png\"  align=\"center\" height=\"30\" width=\"30\" /> <a href=\"https://travis-ci.com/mindsdb/mindsdb\">\n\t\t<img src=\"https://badges.herokuapp.com/travis/mindsdb/mindsdb?branch=master&label=build&env=BADGE=osx\"/>\n\t\t</a>\n\t</td>\t\n</tr>\n\t</tbody>\n</table>\n\n\n\n\n## Try it out\n\n* [Installing MindsDB](https://mindsdb.github.io/mindsdb/docs/installing-mindsdb)\n* [Learning from Examples](https://mindsdb.github.io/mindsdb/docs/basic-mindsdb)\n* [MindsDB Explainability GUI](http://mindsdb.com/product)\n* [Frequently Asked Questions](https://mindsdb.github.io/mindsdb/docs/faq)\n* [Provide Feedback to Improve MindsDB](https://mindsdb.typeform.com/to/c3CEtj)\n\n\n\n\n### Installation\n\n\n* **Desktop**: You can use MindsDB on your own computer in under a minute, if you already have a python environment setup, just run the following command:\n\n```bash\n pip install mindsdb --user\n```\n\n>Note: Python 64 bit version is required. Depending on your environment, you might have to use `pip3` instead of `pip` in the above command.*\n\n  If for some reason this fail, don't worry, simply follow the [complete installation instructions](https://mindsdb.github.io/mindsdb/docs/installing-mindsdb) which will lead you through a more thorough procedure which should fix most issues.\n\n* **Docker**: If you would like to run it all in a container simply:  \n\n```bash\nsh -c \"$(curl -sSL https://raw.githubusercontent.com/mindsdb/mindsdb/master/distributions/docker/build-docker.sh)\"\n```\n\n\n### Usage\n\nOnce you have MindsDB installed, you can use it as follows:\n\nImport **MindsDB**:\n\n```python\n\nfrom mindsdb import Predictor\n\n```\n\nOne line of code to **train a model**:\n\n```python\n# tell mindsDB what we want to learn and from what data\nPredictor(name='home_rentals_price').learn(\n    to_predict='rental_price', # the column we want to learn to predict given all the data in the file\n    from_data=\"https://s3.eu-west-2.amazonaws.com/mindsdb-example-data/home_rentals.csv\" # the path to the file where we can learn from, (note: can be url)\n)\n\n```\n\n\nOne line of code to **use the model**:\n\n```python\n\n# use the model to make predictions\nresult = Predictor(name='home_rentals_price').predict(when={'number_of_rooms': 2,'number_of_bathrooms':1, 'sqft': 1190})\n\n# you can now print the results\nprint('The predicted price is ${price} with {conf} confidence'.format(price=result[0]['rental_price'], conf=result[0]['rental_price_confidence']))\n\n```\n\nVisit the documentation to [learn more](https://mindsdb.github.io/mindsdb/docs/basic-mindsdb)\n\n* **Google Colab**: You can also try MindsDB straight here [![Google Colab](https://colab.research.google.com/assets/colab-badge.svg \"MindsDB\")](https://colab.research.google.com/drive/1qsIkMeAQFE-MOEANd1c6KMyT44OnycSb)\n\n\n## Video Tutorial\n\nPlease click on the image below to load the tutorial:\n\n[![here](https://img.youtube.com/vi/a49CvkoOdfY/0.jpg)](https://youtu.be/yr7fgqt9cfU)  \n\n(Note: Please manually set it to 720p or greater to have the text appear clearly)\n\n## MindsDB Graphical User Interface\n\nYou can also work with mindsdb via its graphical user interface ([download here](http://mindsdb.com/product)).\nPlease click on the image below to load the tutorial:\n\n[![here](https://img.youtube.com/vi/fOwdv4j26CA/0.jpg)](https://youtu.be/fOwdv4j26CA)  \n\n\n## MindsDB Lightwood: Machine Learning Lego Blocks\n\nUnder the hood of mindsdb there is lightwood, a Pytorch based framework that breaks down machine learning problems into smaller blocks that can be glued together seamlessly. More info about [MindsDB lightwood's on GITHUB](https://github.com/mindsdb/lightwood/).\n\n## Contributing\n\nIn order to make changes to mindsdb, the ideal approach is to fork the repository than clone the fork locally `PYTHONPATH`.\n\nFor example: `export PYTHONPATH=$PYTHONPATH:/home/my_username/mindsdb`.\n\nTo test if your changes are working you can try running the CI tests locally: `cd tests/ci_tests && python3 full_test.py`\n\nOnce you have specific changes you want to merge into master, feel free to make a PR.\n\n## Report Issues\n\nPlease help us by [reporting any issues](https://github.com/mindsdb/mindsdb/issues/new/choose) you may have while using MindsDB.\n\n## License\n\n* [MindsDB License](https://github.com/mindsdb/mindsdb/blob/master/LICENSE)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/mindsdb",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mindsdb/mindsdb",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MindsDB",
    "package_url": "https://pypi.org/project/MindsDB/",
    "platform": "",
    "project_url": "https://pypi.org/project/MindsDB/",
    "project_urls": {
      "Download": "https://pypi.org/project/mindsdb",
      "Homepage": "https://github.com/mindsdb/mindsdb"
    },
    "release_url": "https://pypi.org/project/MindsDB/1.16.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "MindsDB's goal is to make it very simple for developers to use the power of artificial neural networks in their projects.",
    "version": "1.16.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17478317,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f96e0aa2149fedfcb9f005bd35e677a869288324d4021558636efacd4fc289e3",
        "md5": "437ee64ba36696e67c4ff1132a2f5583",
        "sha256": "3ca68c246630f9973bc9e674ba27c9f658ba0b4bbfe51855a2c9ebf8a993b7e4"
      },
      "downloads": -1,
      "filename": "MindsDB-1.16.1.tar.gz",
      "has_sig": false,
      "md5_digest": "437ee64ba36696e67c4ff1132a2f5583",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 63576,
      "upload_time": "2020-04-16T19:31:40",
      "upload_time_iso_8601": "2020-04-16T19:31:40.825181Z",
      "url": "https://files.pythonhosted.org/packages/f9/6e/0aa2149fedfcb9f005bd35e677a869288324d4021558636efacd4fc289e3/MindsDB-1.16.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2022-23522"
      ],
      "details": "### Summary\n\nAn unsafe extraction is being performed using `shutil.unpack_archive()` from a remotely retrieved tarball. Which may lead to the writing of the extracted files to an unintended location. This vulnerability is sometimes called a **TarSlip** or a **ZipSlip variant**.\n\n### Details\n\nUnpacking files using the high-level function `shutil.unpack_archive()` from a potentially malicious tarball without validating that the destination file path remained within the intended destination directory may cause files to be overwritten outside the destination directory.\n\nAs can be seen in the vulnerable snippet code source, an archive is being retrieved using the `download_file()` function from a remote location which is a user-provided permanent storage bucket `s3`. Immediately after being retrieved, the tarball is unsafely unpacked using the function `shutil.unpack_archive()`.\n\nThe vulnerable code is [L128..L129](https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py#L128..L129) in [fs.py](https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py) file.\n\n```python3\n    def __init__(self):\n        super().__init__()\n        if 's3_credentials' in self.config['permanent_storage']:\n            self.s3 = boto3.client('s3', **self.config['permanent_storage']['s3_credentials'])\n        else:\n            self.s3 = boto3.client('s3')\n       \n        # User provided remote storage!\n        self.bucket = self.config['permanent_storage']['bucket'] \n\n    def get(self, local_name, base_dir):\n        remote_name = local_name\n        remote_ziped_name = f'{remote_name}.tar.gz'\n        local_ziped_name = f'{local_name}.tar.gz'\n        local_ziped_path = os.path.join(base_dir, local_ziped_name)\n        os.makedirs(base_dir, exist_ok=True)\n        \n        # Retrieve a potentially malicious tarball\n        self.s3.download_file(self.bucket, remote_ziped_name, local_ziped_path)\n\n        # Perform an unsafe extraction\n        shutil.unpack_archive(local_ziped_path, base_dir)\n\n        os.system(f'chmod -R 777 {base_dir}')\n        os.remove(local_ziped_path)\n```  \n\n### PoC\n\nThe following PoC is provided for illustration purposes only. It showcases the risk of extracting a non-harmless text file `sim4n6.txt` to one of the parent locations rather than the intended current folder.\n\n```bash\n> tar --list -f archive.tar\ntar: Removing leading \"../../../\" from member names\n../../../sim4n6.txt\n\n> python3 \nPython 3.10.6 (main, Nov  2 2022, 18:53:38) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import shutil\n>>> shutil.unpack_archive(\"archive.tar\")\n>>> exit()\n\n> test -f ../../../sim4n6.txt && echo \"sim4n6.txt exists\"\nsim4n6.txt exists\n```\n\n### Attack Scenario\n\nAn attacker could craft a malicious tarball with a filename path, such as `../../../../../../../../etc/passwd`, and then serve the archive remotely using a personal bucket `s3`, thus, retrieve the tarball through **mindsdb** and overwrite the system files of the hosting server. \n\n### Mitigation\n\nPotential mitigation could be to:\n - Use a safer module, like `zipfile`.\n -  Validate the location of the extracted files and discard those with malicious paths such as relative path `..` or absolute path such as `/etc/password`.\n -  Perform a checksum verification for the retrieved archive, but hard-coding the hashes may be cumbersome and difficult to manage.",
      "fixed_in": [
        "22.11.4.3"
      ],
      "id": "GHSA-7x45-phmr-9wqp",
      "link": "https://osv.dev/vulnerability/GHSA-7x45-phmr-9wqp",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [],
      "details": "### Summary\n\nAn unsafe extraction is being performed using `tarfile.extractall()` from a remotely retrieved tarball. Which may lead to the writing of the extracted files to an unintended location. Sometimes, the vulnerability is called a TarSlip or a ZipSlip variant.\n\n### Details\n\nI commented the following snippet of code as a vulnerability details. The code is from [file.py#L26..L134](https://github.com/mindsdb/mindsdb/blob/afedd37c16e579b6dc075b0814e42d0505ccdc07/mindsdb/api/http/namespaces/file.py#L26..L134)\n\n```python\n@ns_conf.route('/<name>')\n@ns_conf.param('name', \"MindsDB's name for file\")\nclass File(Resource):\n    @ns_conf.doc('put_file')\n    def put(self, name: str):\n        ''' add new file\n            params in FormData:\n                - file\n                - original_file_name [optional]\n        '''\n\n        data = {}\n\n        ... omitted for brevity\n\n            url = data['source']\n            data['file'] = data['name']\n\n            ... omitted for brevity \n\n            with requests.get(url, stream=True) as r:                   # Source: retrieve the URL which point to a remotely located tarball \n                if r.status_code != 200:\n                    return http_error(\n                        400,\n                        \"Error getting file\",\n                        f\"Got status code: {r.status_code}\"\n                    )\n                file_path = os.path.join(temp_dir_path, data['file'])\n                with open(file_path, 'wb') as f:\n                    for chunk in r.iter_content(chunk_size=8192):   # write with chunks the remote retrieved file into file_path location \n                        f.write(chunk)\n\n        original_file_name = data.get('original_file_name')\n\n        file_path = os.path.join(temp_dir_path, data['file'])      \n        lp = file_path.lower()\n        if lp.endswith(('.zip', '.tar.gz')):\n            if lp.endswith('.zip'):\n                with zipfile.ZipFile(file_path) as f:\n                    f.extractall(temp_dir_path)\n            elif lp.endswith('.tar.gz'):\n                with tarfile.open(file_path) as f:  # Just after \n                    f.extractall(temp_dir_path)  # Sink: the tarball located by file_path is supposed to be extracted to temp_dir_path. \n```\n\nSo, a remotely available tarball is being retrieved and written to the server filesystem in chunks, and then, if the extension ends with `.tar.gz` of a compressed tarball, the mindsdb app applies `tarfile.extractall()` directly with no checks for the destination. \n\nHowever, according to the following [warning](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall) from the official documentation;\n\n> Warning: Never extract archives from untrusted sources without prior inspection. It is possible that files are created outside of path, e.g. members that have absolute filenames starting with \"/\" or filenames with two dots \"..\". \n\n\n### PoC\n\nThe following PoC is provided for illustration purposes only. It showcases the risk of extracting a non-harmless text file `sim4n6.txt` to one of the parent locations rather than the intended current folder.\n\n```bash\n> tar --list -v -f archive.tar.gz\ntar: Removing leading \"../../../\" from member names\n../../../sim4n6.txt\n\n> python3 \nPython 3.10.6 (main, Nov  2 2022, 18:53:38) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import tarfile\n>>> with tarfile.open(\"archive.tar.gz\") as tf:\n>>>         tf.extractall()\n>>> exit()\n\n> test -f ../../../sim4n6.txt && echo \"sim4n6.txt exists\"\nsim4n6.txt exists\n```\n\n### Attack Scenario\n\nAn attacker could craft a malicious tarball with a filename path, such as ../../../../../../../../etc/passwd, and then serve the archive remotely, proceed to the PUT request of the tarball through mindsdb and overwrite the system files of the hosting server for instance.\n\n### Mitigation \n\nPotential mitigation could be to:\n - Use a safer module, like `zipfile`.\n - Use an alternative of `tarfile`, such as `tarsafe`. \n  - Validate the location or the absolute path of the extracted files and discard those with malicious paths such as relative path `../../..` or absolute path such as `/etc/password`. A simple wrapper could be written to raise an exception when a path traversal may be identified.\n\nThis is similar to the other report [GHSA-7x45-phmr-9wqp](https://github.com/mindsdb/mindsdb/security/advisories/GHSA-7x45-phmr-9wqp).",
      "fixed_in": [],
      "id": "GHSA-2g5w-29q9-w6hx",
      "link": "https://osv.dev/vulnerability/GHSA-2g5w-29q9-w6hx",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}