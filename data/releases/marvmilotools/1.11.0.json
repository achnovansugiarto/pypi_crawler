{
  "info": {
    "author": "marvmilo",
    "author_email": "marvin.milojevic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# marvmiloTools\r\n**Version:** 1.11.0\r\n\r\n**Dependencies:**\r\n- pandas\r\n- dash\r\n- dash-bootstrap-components\r\n- paho-mqtt\r\n\r\n# Description:\r\nA tool a wrote for myself to have multiple functions and classes avalibale on diffrent servers and devices.\r\n# HowTo:\r\n## 1. Main\r\n### 1.1 ScriptPrint:\r\nReplace \"print\" function, where you can see in which script the print function was executed.\r\n#### Example 1:\r\n.  \r\n├── first_script.py  \r\n└── second_script.py  \r\n&nbsp;  \r\nfirst_script.py:\r\n```\r\nimport marvmiloTools as mmt\r\nprint = mmt.ScriptPrint(\"MAIN\").print\r\n\r\nprint(\"This is the FIRST script\")\r\n\r\nimport second_script\r\n```\r\nsecond_script.py:\r\n```\r\nimport marvmiloTools as mmt\r\nprint = mmt.ScriptPrint(\"IMPORTED\").print\r\n\r\nprint(\"This is the SECOND script\")\r\n```\r\nExecute like this:\r\n```\r\n~$ python first_script.py\r\n```\r\nOutput:\r\n```\r\n[MAIN]: This is the FIRST script\r\n[IMPORTED]: This is the SECOND script\r\n``` \r\n&nbsp;  \r\nAnother feature is blocking the output, if running in background. So you don't ned space for logs with endless looping Scripts.\r\n#### Example 2:  \r\n```\r\nprint = mmt.ScriptPrint(\"NAME\", block = True).print\r\n```\r\n&nbsp;   \r\n### 1.2 Timer:\r\nA build in timer for measuring runtimes.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\nfrom time import sleep\r\n\r\n#start the timer\r\nmmt.timer.start()\r\n\r\nsleep(3)\r\n\r\n#pause timer\r\nruntime = mmt.timer.pause()\r\nprint(\"Type of runtime: \" + str(type(runtime)))\r\nprint(\"Runtime at pause: \" + str(runtime))\r\n\r\n#reset timer and get runtime function\r\nmmt.timer.reset()\r\nruntime = mmt.timer.get_runtime()\r\nprint(\"Runtime at reset: \" + str(runtime))\r\n\r\n#set some laps\r\nmmt.timer.start()\r\nfor i in range(3):\r\n    sleep(1)\r\n    runtime = mmt.timer.set_lap()\r\n    print(\"Runtime at lap \" + str(i) + \": \" + str(runtime))\r\n\r\n#get all laps\r\nlaps = mmt.timer.get_laps()\r\nprint(\"Laps: \" + str(laps))\r\n\r\nsleep(2)\r\n\r\n#get time of current lap without setting a lap\r\nlap_runtime = mmt.timer.get_lap_runtime()\r\nprint(\"Current Lap Runtime: \" + str(lap_runtime))\r\n```\r\nOutput:\r\n```\r\nType of runtime: <class 'datetime.timedelta'>\r\nRuntime at pause: 0:00:03.003270\r\nRuntime at reset: 0:00:00\r\nRuntime at lap 0: 0:00:01.001151\r\nRuntime at lap 1: 0:00:01.001191\r\nRuntime at lap 2: 0:00:01.001231\r\nLaps: [datetime.timedelta(seconds=1, microseconds=1151), datetime.timedelta(seconds=1, microseconds=1191), datetime.timedelta(seconds=1, microseconds=1231)]\r\nCurrent Lap Runtime: 0:00:02.002030\r\n```\r\nCreate a new instance of timer:\r\n```\r\ntimer = mmt.Timer()\r\ntimer.start()\r\n...\r\n```\r\n&nbsp;  \r\n### 1.3 get_variable_name\r\nConverting variable in namespace into an string.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\n\r\n#declare a variable\r\nvariable = \"hello world\"\r\n\r\n#get name as string from variable\r\nvariable_name = mmt.get_variable_name(variable, locals())\r\nprint(variable_name, type(variable_name))\r\n```\r\nOutput:\r\n```\r\nvariable <class 'str'>\r\n```\r\n&nbsp;\r\n### 1.4 random_ID\r\nCreating a random ID of specific length.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\nprint(mmt.random_ID(10))\r\n```\r\n#### Output:\r\n```\r\nR1DBXY64KH73BPPF7WFT\r\n```\r\n&nbsp;\r\n### 1.5 CloudMQTT\r\nCloudMQTT client with multiple functions.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\n\r\n#init cloudMQTT client\r\ncloudmqtt = mmt.CloudMQTT(\r\n    client_name = \"clientname\", \r\n    channel = \"channel\", \r\n    qos = 0\r\n)\r\n\r\n#connect to server\r\ncloudmqtt.connect(\r\n    user = \"user\", \r\n    pw = \"password\", \r\n    addr = \"cloudmqtt.com\", \r\n    port = 1234\r\n)\r\n\r\n#reconnecting to server if no connection\r\nif not cloudmqtt.check_connection():\r\n    cloudmqtt.reconnect()\r\n\r\n#on message function\r\ndef on_message(msg, topic):\r\n    print(f\"received message: '{msg}', topic: '{topic}'\")\r\n    \r\n#binding on_message function to a topic\r\ncloudmqtt.bind(topic = \"hello\", function = on_message)\r\n\r\n#publishing a message\r\ncloudmqtt.publish(topic = \"hello\", message = \"world\")\r\n\r\n#response function\r\ndef on_request(msg, topic):\r\n    resp = \"hello world\"\r\n    print(f\"publishing response: {resp}\")\r\n    return(resp)\r\n\r\n#binding on_request to request topic\r\ncloudmqtt.bind_response(\"demo\", on_request)\r\n\r\n#request data from server\r\nresp = (\r\n    cloudmqtt.request(\r\n        topic = \"demo\",\r\n        message = \".\",\r\n        retry = 5\r\n    )\r\n)\r\nprint(\"got response: \" + resp)\r\n\r\n#disconnecting form server\r\ncloudmqtt.disconnect()\r\n```\r\n#### Output:\r\n```\r\nreceived message: 'world', topic: 'hello'\r\npublishing response: hello world\r\ngot response: hello world\r\n```\r\n#### MQTT Messages:\r\n![Messages](./Markdown%20Examples/1.5%20CloudMQTT/messages.png)\r\n&nbsp;\r\n### 1.6 SQL\r\nSimple sqlite3 manager.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\n\r\nmmt.sql.connect(\"database.db\")\r\nmmt.sql.execute(\"CREATE TABLE IF NOT EXISTS test (a INTEGER, b INTEGER)\")\r\nmmt.sql.execute(\"INSERT INTO test (a,b) VALUES (0,1)\")\r\nmmt.sql.disconnect()\r\n\r\n#new sql instance\r\nsql = mmt.SQL()\r\nsql.connect(...\r\n```\r\n#### Database:\r\n![Database](./Markdown%20Examples/1.6%20SQL/database.png)\r\n&nbsp;\r\n## 2. Dash\r\n### 2.1 flex_style\r\nDictionary for centering content in dash plotlys html.Div\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\nfrom dash import html\r\n\r\nhtml.Div(\r\n    children = [\r\n        \"hello world\"\r\n    ],\r\n    style = mmt.dash.flex_style({\r\n        \"background-color\": \"black\"\r\n    })\r\n)\r\n```\r\n&nbsp;\r\n### 2.2 mobile_optimization\r\nMeta tags for setting app to a mobile optiomized app.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\nimport dash\r\n\r\napp = dash.Dash(__name__, meta_tags = [mmt.dash.mobile_optimization])\r\n```\r\n&nbsp;\r\n### 2.3 content_div\r\nFor creating a dynamic scalealbe content Div.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\nfrom dash import html\r\nimport dash_bootstrap_components as dbc\r\n\r\napp.layout = html.Div(\r\n    children = [\r\n        dbc.Navbar(...),\r\n        mmt.dash.content_div(\r\n            width = \"1000px\",\r\n            padding = \"5%\",\r\n            content = [\r\n                \"children\"\r\n            ]\r\n        )\r\n    ]\r\n)\r\n```\r\n&nbsp;\r\n### 2.4 modal_header_close\r\nCreating an modal header with close button and specific color.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\nimport dash_bootstrap_components as dbc\r\n\r\ndbc.Modal(\r\n    children = [\r\n        mmt.dash.modal_header_close(\r\n            title = \"This is the header\",\r\n            close_id = \"modal-close\", #id of the close button,\r\n            color = \"#4287f5\" #background color of header\r\n        ),\r\n        dbc.Modal_Body(\"This is modal body\")\r\n    ]\r\n)\r\n```\r\n&nbsp;\r\n### 2.5 random_ID\r\nCreating random IDs compatible with dash.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\nfrom dash import html\r\n\r\nhtml.Div(\r\n    children = \"Hello World\",\r\n    id = mmt.dash.random_ID()\r\n)\r\n```\r\nOutput ID: 'MNPhNBfXcpVeHVVxuJeF' \r\n&nbsp;\r\n\r\n&nbsp;\r\n### 2.6 browsertime\r\nCreating a Object in dash html form, wich provides the current clock time of the browser. That means the callbacks can calulate timezone of input.\r\n\r\nAdd this to your callbacks:\r\n```\r\napp.clientside_callback(*mmt.dash.browsertime.clientside_callback_args)\r\n```\r\n\r\nAdd this in your html layout of the page: \r\n```\r\nmmt.dash.browsertime.htmlObj()\r\n```\r\nExample Callback with browser time:\r\n```\r\nfrom dash.dependencies import Input, Output, State\r\n\r\n@app.callback(\r\n    [Output(...)],\r\n    [Input(...)],\r\n    [State(\"browser-time\", \"data\")]\r\n)\r\ndef callback(... , browsertime):\r\n    datetime_object = mmt.dash.browsertime.datetime(browsertime)\r\n    time_shift = mmt.dash.browsertime.time_shift(browsertime)\r\n```\r\nAlso datetime objects from browsertime string can be created. Time shift can also be calculated.\r\n&nbsp;\r\n### 2.7 nav\r\nSimply creating a dash navbar with custom items.\r\n```\r\nimport marvmiloTools as mmt\r\n\r\nmmt.dash.nav.bar(\r\n    logo = \"url(/assets/logo.png)\",\r\n    logo_style = {\r\n        \"width\": \"3rem\", \r\n        \"height\": \"3rem\",\r\n        \"background-size\": \"cover\",\r\n    },\r\n    title = \"Navbar Title\",\r\n    title_style = {\r\n        \"width\": \"15rem\",\r\n        \"font-size\": \"1.5rem\"\r\n    }, \r\n    expand = \"lg\",\r\n    items = [\r\n        mmt.dash.nav.item.href(\r\n            \"Link\",\r\n            href = \"https://github.com/marvmilo\",\r\n            target = \"_blank\",\r\n            size = \"lg\"\r\n        ),\r\n        mmt.dash.nav.item.normal(\r\n            \"Button\",\r\n            id = \"button-id\",\r\n            size = \"lg\"\r\n        )\r\n    ]\r\n)\r\n\r\n@app.callback(*mmt.dash.nav.callback_args)\r\ndef cn(n, is_open):\r\n    return mmt.dash.nav.callback_function(n, is_open)\r\n```\r\n&nbsp;\r\n### 2.8 picture\r\nFor displaying images (jpg, png, svg) from assets folder.\r\n\r\nExample:\r\n```\r\nmmt.dash.picture(\r\n    path = \"pictures/smiley.jpg\",\r\n    width = \"20rem\",\r\n    aspect_ratio = \"2 / 1\",\r\n    children = [\"Hello world!\"],\r\n    additional_style = {\"borderRadius\": \"2rem\"}\r\n)\r\n```\r\nATTENTION! picture must be in assests folder of CWD!\r\n\r\ne.g.  \r\n.  \r\n└── assets  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;└── smiley.jpg\r\n\r\n\r\n&nbsp;\r\n## 3. Json\r\n### 3.1 load\r\nFor opening and loading a json file to dictionary or marvmiloTools.DictObj\r\n#### Example:\r\n.  \r\n├── example.json  \r\n└── script.py  \r\n&nbsp;  \r\nexample.json:\r\n```\r\n{\r\n    \"hello\": \"world\"\r\n}\r\n```\r\nscript.py:\r\n```\r\nimport marvmiloTools as mmt\r\n\r\ndictionary = mmt.json.load(\"example.json\", object=False)\r\nDictObj = mmt.json.load(\"example.json\")\r\n\r\nprint(\"Dictionary:\")\r\nprint(dictionary)\r\nprint(type(dictionary))\r\nprint()\r\nprint(\"DictObject:\")\r\nprint(DictObj)\r\nprint(type(DictObj))\r\n```\r\nExecute like this:\r\n```\r\n~$ python script.py\r\n```\r\nOutput:\r\n```\r\nDictionary:\r\n{'hello': 'world'}\r\n<class 'dict'>\r\n\r\nDictObject:\r\n{'hello': 'world'}\r\n<class 'marvmiloTools.dictionary_tools.DictObject'>\r\n``` \r\n&nbsp;  \r\n### 3.2 save\r\nFor saving a dictionary or marvmiloTools.DictObject to a json file.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\n\r\ndictionary = {\"hello\": \"world\"}\r\nDictObj = mmt.dictionary.toObj(dictionary)\r\n\r\n#save to json\r\nmmt.json.save(dictionary, filename = \"dictionary.json\")\r\nmmt.json.save(DictObj, filename = \"DictObj.json\")\r\n```\r\nOutput as dictionary.json and DictObj.json:\r\n```\r\n{\r\n    \"hello\": \"world\"\r\n}\r\n```\r\n&nbsp;  \r\n### 3.3 write\r\nFor writing a value directly to a json file without opening and saving.\r\n#### Example:\r\n.  \r\n├── example.json  \r\n└── script.py  \r\n&nbsp;  \r\nexample.json:\r\n```\r\n{\r\n    \"dictionary\": {\r\n        \"hello\": \"world\"\r\n    },\r\n    \"list\": [\r\n        \"a\",\r\n        \"b\",\r\n        \"c\"\r\n    ]\r\n}\r\n```\r\nscript.py:\r\n```\r\nimport marvmiloTools as mmt\r\n\r\nmmt.json.write(\"value\", \"example.json\", [\"dictionary\", \"new\"])\r\nmmt.json.write(\"new\", \"example.json\", [\"list\", 1])\r\n```\r\nOutput example.json:\r\n```\r\n{\r\n    \"dictionary\": {\r\n        \"hello\": \"world\",\r\n        \"new\": \"value\"\r\n    },\r\n    \"list\": [\r\n        \"a\",\r\n        \"new\",\r\n        \"b\",\r\n        \"c\"\r\n    ]\r\n}\r\n```\r\n&nbsp;  \r\n## 4. Dictionary\r\n### 4.1 toObj\r\nTransforming to a dictionary to a marvmiloTools.DictObject. This Object can be used like a Class in Python\r\n#### Example:\r\n```\r\n# pylint: disable = no-member\r\nimport marvmiloTools as mmt\r\n\r\ndictionary = {\"hello\": \"world\", \"list\": [\"string\", 10, {\"a\": \"b\"}]}\r\n#convert dictionary to Object\r\nDictObj = mmt.dictionary.toObj(dictionary)\r\n\r\nprint(type(DictObj))\r\nprint(DictObj)\r\nprint(DictObj.hello)\r\nprint(DictObj.list[2].a)\r\n```\r\n(usining \"# pylint: disable = no-member\" with Visual Studio Code for disabeling \"DictObj has no hello member\" Error)  \r\n&nbsp;  \r\nOutput:\r\n```\r\n<class 'marvmiloTools.dictionary_tools.DictObject'>\r\n{'hello': 'world', 'list': ['string', 10, {'a': 'b'}]}\r\nworld\r\nb\r\n```\r\nA DictObject has the same attributes and functions as a dictionary aswell\r\nOne extra function is pretty:\r\n```\r\nimport marvmiloTools as mmt\r\n\r\nDictObj = mmt.dictionary.toObj({\"hello\": \"world\"})\r\nprint(DictObj.pretty())\r\n```\r\nOutput:\r\n```\r\n{\r\n    \"hello\": \"world\"\r\n}\r\n```\r\n&nbsp;  \r\n### 4.2 toDict\r\nTransforming a marvmiloTools.DictObject back to a standart dictionary.\r\n#### Example:\r\n```\r\nimport marvmiloTools as mmt\r\n\r\nDictObj = mmt.dictionary.toObj({\"hello\": \"world\"})\r\n\r\n#convert to dictionary\r\ndictionary = mmt.dictionary.toDict(DictObj)\r\nprint(dictionary)\r\nprint(type(dictionary))\r\n```\r\nOutput:\r\n```\r\n{'hello': 'world'}\r\n<class 'dict'>\r\n```\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/marvmilo/marvmiloTools/archive/refs/tags/v1.11.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marvmilo/marvmiloTools",
    "keywords": "Tools",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marvmiloTools",
    "package_url": "https://pypi.org/project/marvmiloTools/",
    "platform": "",
    "project_url": "https://pypi.org/project/marvmiloTools/",
    "project_urls": {
      "Download": "https://github.com/marvmilo/marvmiloTools/archive/refs/tags/v1.11.0.tar.gz",
      "Homepage": "https://github.com/marvmilo/marvmiloTools"
    },
    "release_url": "https://pypi.org/project/marvmiloTools/1.11.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tools for using on diffrent Platforms",
    "version": "1.11.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13550778,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "150f4a7edfc21806f8016551c5b0a9467947510a2f201b2719b6250416a891d4",
        "md5": "3bc4cf1f2e69ec7928cb3ff488dd00d3",
        "sha256": "9d0fd02adf25ed52a093de54b6b53765e6e2c5bc800f939baa8ad4d14eeb13a8"
      },
      "downloads": -1,
      "filename": "marvmiloTools-1.11.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3bc4cf1f2e69ec7928cb3ff488dd00d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14860,
      "upload_time": "2022-01-06T23:49:05",
      "upload_time_iso_8601": "2022-01-06T23:49:05.928080Z",
      "url": "https://files.pythonhosted.org/packages/15/0f/4a7edfc21806f8016551c5b0a9467947510a2f201b2719b6250416a891d4/marvmiloTools-1.11.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}