{
  "info": {
    "author": "marvmilo",
    "author_email": "marvin.milojevic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# marvmiloTools\n**Version:** 1.7.6\n\n**Dependencies:**\n- pandas\n- dash\n- dash-bootstrap-components\n\n# Description:\nA tool a wrote for myself to have multiple functions and classes avalibale on diffrent servers and devices.\n# HowTo:\n## 1. Main\n### 1.1 ScriptPrint:\nReplace \"print\" function, where you can see in which script the print function was executed.\n#### Example 1:\n.  \n├── first_script.py  \n└── second_script.py  \n&nbsp;  \nfirst_script.py:\n```\nimport marvmiloTools as mmt\nprint = mmt.ScriptPrint(\"MAIN\").print\n\nprint(\"This is the FIRST script\")\n\nimport second_script\n```\nsecond_script.py:\n```\nimport marvmiloTools as mmt\nprint = mmt.ScriptPrint(\"IMPORTED\").print\n\nprint(\"This is the SECOND script\")\n```\nExecute like this:\n```\n~$ python first_script.py\n```\nOutput:\n```\n[MAIN]: This is the FIRST script\n[IMPORTED]: This is the SECOND script\n``` \n&nbsp;  \nAnother feature is blocking the output, if running in background. So you don't ned space for logs with endless looping Scripts.\n#### Example 2:  \n```\nprint = mmt.ScriptPrint(\"NAME\", block = True).print\n```\n&nbsp;   \n### 1.2 Timer:\nA build in timer for measuring runtimes.\n#### Example:\n```\nimport marvmiloTools as mmt\nfrom time import sleep\n\n#start the timer\nmmt.timer.start()\n\nsleep(3)\n\n#pause timer\nruntime = mmt.timer.pause()\nprint(\"Type of runtime: \" + str(type(runtime)))\nprint(\"Runtime at pause: \" + str(runtime))\n\n#reset timer and get runtime function\nmmt.timer.reset()\nruntime = mmt.timer.get_runtime()\nprint(\"Runtime at reset: \" + str(runtime))\n\n#set some laps\nmmt.timer.start()\nfor i in range(3):\n    sleep(1)\n    runtime = mmt.timer.set_lap()\n    print(\"Runtime at lap \" + str(i) + \": \" + str(runtime))\n\n#get all laps\nlaps = mmt.timer.get_laps()\nprint(\"Laps: \" + str(laps))\n\nsleep(2)\n\n#get time of current lap without setting a lap\nlap_runtime = mmt.timer.get_lap_runtime()\nprint(\"Current Lap Runtime: \" + str(lap_runtime))\n```\nOutput:\n```\nType of runtime: <class 'datetime.timedelta'>\nRuntime at pause: 0:00:03.003270\nRuntime at reset: 0:00:00\nRuntime at lap 0: 0:00:01.001151\nRuntime at lap 1: 0:00:01.001191\nRuntime at lap 2: 0:00:01.001231\nLaps: [datetime.timedelta(seconds=1, microseconds=1151), datetime.timedelta(seconds=1, microseconds=1191), datetime.timedelta(seconds=1, microseconds=1231)]\nCurrent Lap Runtime: 0:00:02.002030\n```\n&nbsp;  \n### 1.3 get_variable_name\nConverting variable in namespace into an string.\n#### Example:\n```\nimport marvmiloTools as mmt\n\n#declare a variable\nvariable = \"hello world\"\n\n#get name as string from variable\nvariable_name = mmt.get_variable_name(variable, locals())\nprint(variable_name, type(variable_name))\n```\nOutput:\n```\nvariable <class 'str'>\n```\n&nbsp;\n## 2. Dash\n### 2.1 flex_style\nDictionary for centering content in dash plotlys html.Div\n#### Example:\n```\nimport marvmiloTools as mmt\nfrom dash import html\n\nhtml.Div(\n    children = [\n        \"hello world\"\n    ],\n    style = mmt.dash.flex_style({\n        \"background-color\": \"black\"\n    })\n)\n```\n&nbsp;\n### 2.2 accent color\nAccent Color for own CSS Script.\n#### Example:\n```\nimport marvmiloTools as mmt\nfrom dash import html\n\nhtml.Div(\n    children = [\n        \"content\"\n    ],\n    style = {\"background-color\": mmt.dash.accent}\n)\n```\n&nbsp;\n### 2.3 mobile_optimization\nMeta tags for setting app to a mobile optiomized app.\n#### Example:\n```\nimport marvmiloTools as mmt\nimport dash\n\napp = dash.Dash(__name__, meta_tags = [mmt.dash.mobile_optimization])\n```\n&nbsp;\n### 2.4 content_div\nFor creating a dynamic scalealbe content Div.\n#### Example:\n```\nimport marvmiloTools as mmt\nfrom dash import html\nimport dash_bootstrap_components as dbc\n\napp.layout = html.Div(\n    children = [\n        dbc.Navbar(...),\n        mmt.dash.content_div(\n            width = \"1000px\",\n            padding = \"5%\",\n            content = [\n                \"content\"\n            ]\n        )\n    ]\n)\n```\n&nbsp;\n### 2.5 modal_header_close\nCreating an modal header with close button and specific color.\n#### Example:\n```\nimport marvmiloTools as mmt\nimport dash_bootstrap_components as dbc\n\ndbc.Modal(\n    children = [\n        mmt.dash.modal_header_close(\n            title = \"This is the header\",\n            close_id = \"modal-close\" #id of the close button\n        ),\n        dbc.Modal_Body(\"This is modal body\")\n    ]\n)\n```\n&nbsp;\n## 3. Json\n### 3.1 load\nFor opening and loading a json file to dictionary or marvmiloTools.DictObj\n#### Example:\n.  \n├── example.json  \n└── script.py  \n&nbsp;  \nexample.json:\n```\n{\n    \"hello\": \"world\"\n}\n```\nscript.py:\n```\nimport marvmiloTools as mmt\n\ndictionary = mmt.json.load(\"example.json\", object=False)\nDictObj = mmt.json.load(\"example.json\")\n\nprint(\"Dictionary:\")\nprint(dictionary)\nprint(type(dictionary))\nprint()\nprint(\"DictObject:\")\nprint(DictObj)\nprint(type(DictObj))\n```\nExecute like this:\n```\n~$ python script.py\n```\nOutput:\n```\nDictionary:\n{'hello': 'world'}\n<class 'dict'>\n\nDictObject:\n{'hello': 'world'}\n<class 'marvmiloTools.dictionary_tools.DictObject'>\n``` \n&nbsp;  \n### 3.2 save\nFor saving a dictionary or marvmiloTools.DictObject to a json file.\n#### Example:\n```\nimport marvmiloTools as mmt\n\ndictionary = {\"hello\": \"world\"}\nDictObj = mmt.dictionary.toObj(dictionary)\n\n#save to json\nmmt.json.save(dictionary, filename = \"dictionary.json\")\nmmt.json.save(DictObj, filename = \"DictObj.json\")\n```\nOutput as dictionary.json and DictObj.json:\n```\n{\n    \"hello\": \"world\"\n}\n```\n&nbsp;  \n### 3.3 write\nFor writing a value directly to a json file without opening and saving.\n#### Example:\n.  \n├── example.json  \n└── script.py  \n&nbsp;  \nexample.json:\n```\n{\n    \"dictionary\": {\n        \"hello\": \"world\"\n    },\n    \"list\": [\n        \"a\",\n        \"b\",\n        \"c\"\n    ]\n}\n```\nscript.py:\n```\nimport marvmiloTools as mmt\n\nmmt.json.write(\"value\", \"example.json\", [\"dictionary\", \"new\"])\nmmt.json.write(\"new\", \"example.json\", [\"list\", 1])\n```\nOutput example.json:\n```\n{\n    \"dictionary\": {\n        \"hello\": \"world\",\n        \"new\": \"value\"\n    },\n    \"list\": [\n        \"a\",\n        \"new\",\n        \"b\",\n        \"c\"\n    ]\n}\n```\n&nbsp;  \n## 4. Dictionary\n### 4.1 toObj\nTransforming to a dictionary to a marvmiloTools.DictObject. This Object can be used like a Class in Python\n#### Example:\n```\n# pylint: disable = no-member\nimport marvmiloTools as mmt\n\ndictionary = {\"hello\": \"world\", \"list\": [\"string\", 10, {\"a\": \"b\"}]}\n#convert dictionary to Object\nDictObj = mmt.dictionary.toObj(dictionary)\n\nprint(type(DictObj))\nprint(DictObj)\nprint(DictObj.hello)\nprint(DictObj.list[2].a)\n```\n(usining \"# pylint: disable = no-member\" with Visual Studio Code for disabeling \"DictObj has no hello member\" Error)  \n&nbsp;  \nOutput:\n```\n<class 'marvmiloTools.dictionary_tools.DictObject'>\n{'hello': 'world', 'list': ['string', 10, {'a': 'b'}]}\nworld\nb\n```\nA DictObject has the same attributes and functions as a dictionary aswell\nOne extra function is pretty:\n```\nimport marvmiloTools as mmt\n\nDictObj = mmt.dictionary.toObj({\"hello\": \"world\"})\nprint(DictObj.pretty())\n```\nOutput:\n```\n{\n    \"hello\": \"world\"\n}\n```\n&nbsp;  \n### 4.2 toDict\nTransforming a marvmiloTools.DictObject back to a standart dictionary.\n#### Example:\n```\nimport marvmiloTools as mmt\n\nDictObj = mmt.dictionary.toObj({\"hello\": \"world\"})\n\n#convert to dictionary\ndictionary = mmt.dictionary.toDict(DictObj)\nprint(dictionary)\nprint(type(dictionary))\n```\nOutput:\n```\n{'hello': 'world'}\n<class 'dict'>\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/marvmilo/marvmiloTools/archive/refs/tags/v1.7.6.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marvmilo/marvmiloTools",
    "keywords": "Tools",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marvmiloTools",
    "package_url": "https://pypi.org/project/marvmiloTools/",
    "platform": "",
    "project_url": "https://pypi.org/project/marvmiloTools/",
    "project_urls": {
      "Download": "https://github.com/marvmilo/marvmiloTools/archive/refs/tags/v1.7.6.tar.gz",
      "Homepage": "https://github.com/marvmilo/marvmiloTools"
    },
    "release_url": "https://pypi.org/project/marvmiloTools/1.7.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tools for using on diffrent Platforms",
    "version": "1.7.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13550778,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "818c5bdff6216a6be63d2874632d1c6f2d6b3671b097d1e8d274d5348133b003",
        "md5": "dae76e2cf53337500abd8bb025452cd3",
        "sha256": "e140c6ad3c3307b640e18ca78c3123e17115eb6324bc98a8eed98ad800acbc0b"
      },
      "downloads": -1,
      "filename": "marvmiloTools-1.7.6.tar.gz",
      "has_sig": false,
      "md5_digest": "dae76e2cf53337500abd8bb025452cd3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9113,
      "upload_time": "2021-09-08T14:31:37",
      "upload_time_iso_8601": "2021-09-08T14:31:37.709806Z",
      "url": "https://files.pythonhosted.org/packages/81/8c/5bdff6216a6be63d2874632d1c6f2d6b3671b097d1e8d274d5348133b003/marvmiloTools-1.7.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}