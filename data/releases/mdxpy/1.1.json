{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "![Logo](./images/logo.png)\r\n\r\n\r\n## MDXpy\r\n\r\nA simple, yet elegant MDX library for TM1\r\n\r\n## Install\r\n\r\n    pip install mdxpy\r\n\r\n## Usage\r\n\r\nCreate MDX queries programmatically with the `Member`, `MdxTuple`, `MdxHierarchySet`, `MdxBuilder` classes.\r\n\r\nBenefits of using MDXpy over hacking raw MDX queries in your code\r\n- Faster to write\r\n- Requires less MDX knowledge\r\n- Eliminates syntax errors (e.g. forget `}`, `]`, `)` in a query) forever\r\n- Makes code more robust and easier to refactor\r\n- Escaping of `]` in object names is taken care of \r\n\r\n### Member\r\n\r\n`Member` is used in `MdxTuple` and `MdxHierarchySet`. \r\ncreate a `Member` with the static `Member.of(*args: str)` method.\r\n\r\n``` python\r\n>>> member = Member.of(\"Product\", \"Product1\")\r\n>>> print(member.unique_name)\r\n[PRODUCT].[PRODUCT].[PRODUCT1]\r\n\r\n>>> member = Member.of(\"Region\", \"ByGeography\", \"UK\")\r\n>>> print(member.unique_name)\r\n[REGION].[BYGEOGRAPHY].[UK]\r\n```\r\n\r\n### MdxTuple\r\n\r\nCreate a `MdxTuple` with the static `of(*args: Member)` method. The MDX expression of the tuple is generated with the `to_mdx` method.\r\n\r\n``` python\r\n>>> mdx_tuple = MdxTuple.of(Member.of(\"Product\", \"Product1\"), Member.of(\"Region\", \"US\"))\r\n\r\n>>> print(mdx_tuple.to_mdx())\r\n([PRODUCT].[PRODUCT].[PRODUCT1],[REGION].[REGION].[US])\r\n\r\n>>> mdx_tuple = MdxTuple.of(Member.of(\"Product\", \"ByType\", \"Product1\"), Member.of(\"Region\", \"ByGeography\", \"North America\"))\r\n\r\n>>> print(mdx_tuple.to_mdx())\r\n([PRODUCT].[BYTYPE].[PRODUCT1],[REGION].[BYGEOGRAPHY].[North America])\r\n\r\n```     \r\n\r\nyou can add a `Member` to a `MdxTuple`\r\n\r\n``` python\r\n>>> mdx_tuple = MdxTuple.of(Member.of(\"Product\", \"ByType\", \"Product1\"))\r\n\r\n>>> mdx_tuple.add_member(Member.of(\"Region\", \"ByGeography\", \"North America\"))\r\n\r\n>>> print(mdx_tuple.to_mdx())\r\n([PRODUCT].[BYTYPE].[PRODUCT1],[REGION].[BYGEOGRAPHY].[NORTHAMERICA])\r\n```\r\n\r\n### MdxHierarchySet\r\n\r\n`MdxHierarchySet` is created with any of the static methods on the `MdxHierarchySet` class. The `MDX` expression of the set is generated with the `to_mdx` method.\r\n\r\n``` python\r\n>>> mdx_set = MdxHierarchySet.tm1_subset_all(\"Product\")\r\n>>> print(mdx_set.to_mdx())\r\n{TM1SUBSETALL([Product].[Product])}\r\n\r\n>>> mdx_set = MdxHierarchySet.tm1_subset_to_set(\"Region\", \"By Geography\", \"Default\")\r\n>>> print(mdx_set.to_mdx())\r\n{TM1SUBSETTOSET([REGION].[BYGEOGRAPHY],'Default')}\r\n\r\n>>> mdx_set = MdxHierarchySet.all_leaves(\"Region\")\r\n>>> print(mdx_set.to_mdx())\r\n{TM1FILTERBYLEVEL({TM1SUBSETALL([REGION].[REGION])},0)}\r\n\r\n>>> mdx_set = MdxHierarchySet.members([Member.of(\"Region\", \"US\"), Member.of(\"Product\", \"Product1\")])\r\n>>> print(mdx_set.to_mdx())\r\n{[REGION].[REGION].[US],[PRODUCT].[PRODUCT].[PRODUCT1]}\r\n```\r\n\r\nFunctions on `MdxHierarchySet` can be concatenated to arbitrary length in a functional style:\r\n\r\n``` python\r\n>>> mdx_set = MdxHierarchySet.tm1_subset_all(\"Region\").filter_by_level(0).filter_by_pattern(\"I*\").tm1_sort()\r\n>>> print(mdx_set.to_mdx())\r\n{TM1SORT({TM1FILTERBYPATTERN({TM1FILTERBYLEVEL({TM1SUBSETALL([REGION].[REGION])},0)},'I*')},ASC)}\r\n```\r\n\r\n### MdxBuilder\r\n\r\nThe `MdxBuilder` is used to build MDX queries. `MdxHierarchySet` or `MdxTuple` are placed on the axes. Zero suppression can be switched on or off per axis. The actual `MDX` expression is generated with the `to_mdx` method. \r\n\r\n``` python\r\n>>> query = MdxBuilder.from_cube(\"Cube\").add_hierarchy_set_to_column_axis(MdxHierarchySet.all_leaves(\"Product\"))\r\n>>> print(query.to_mdx())\r\nSELECT {TM1FILTERBYLEVEL({TM1SUBSETALL([PRODUCT].[PRODUCT])},0)} ON 0\r\nFROM [CUBE] \r\n\r\n>>> query = MdxBuilder.from_cube(\"Cube\").add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(\"Product\", \"Product1\")))\r\n>>> print(query.to_mdx())\r\nSELECT {[PRODUCT].[PRODUCT].[PRODUCT1]} ON 0\r\nFROM [CUBE] \r\n\r\n>>> query =  MdxBuilder.from_cube(\"Cube\").add_member_tuple_to_axis(0, Member.of(\"Product\", \"Product1\"), Member.of(\"Region\", \"EMEA\"))\r\n>>> print(query.to_mdx())\r\nSELECT\r\n{([PRODUCT].[PRODUCT].[PRODUCT1],[REGION].[REGION].[EMEA])} ON 0\r\nFROM [CUBE] \r\n\r\n>>> query = MdxBuilder.from_cube(\"Cube\").columns_non_empty().add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(\"Product\", \"Product1\")))\r\n>>> print(query.to_mdx())\r\nSELECT\r\nNON EMPTY {[PRODUCT].[PRODUCT].[PRODUCT1]} ON 0 \r\nFROM [CUBE]\r\n```\r\n\r\nMDX queries can have any number of axes. Axis 0 _(=columns)_ must be defined.\r\n\r\n``` python\r\n>>> mdx = MdxBuilder.from_cube(\"Cube\") \\\r\n    .add_hierarchy_set_to_axis(0, MdxHierarchySet.member(Member.of(\"Region\", \"US\"))) \\\r\n    .add_hierarchy_set_to_axis(1, MdxHierarchySet.all_leaves(\"Product\")) \\\r\n    .add_hierarchy_set_to_axis(2, MdxHierarchySet.member(Member.of(\"Version\", \"Actual\"))) \\\r\n    .add_hierarchy_set_to_axis(3, MdxHierarchySet.tm1_subset_to_set(\"Time\", \"Time\", \"2020-Q1\")) \\\r\n    .to_mdx()\r\n\r\n>>> print(mdx)\r\nSELECT\r\n{[REGION].[REGION].[US]} ON 0,\r\n{TM1FILTERBYLEVEL({TM1SUBSETALL([PRODUCT].[PRODUCT])},0)} ON 1,\r\n{[VERSION].[VERSION].[ACTUAL]} ON 2,\r\n{TM1SUBSETTOSET([TIME].[TIME],'2020-Q1')} ON 3\r\nFROM [CUBE]\r\n```\r\n\r\nThe `CalculatedMember` class is used to define query-scoped calculated members. They are used with the `MdxBuilder` through the `with_member` function.\r\n\r\n``` python\r\n>>> mdx = MdxBuilder.from_cube(cube=\"Record Rating\").with_member(\r\n        CalculatedMember.avg(\r\n            dimension=\"Period\",\r\n            hierarchy=\"Period\",\r\n            element=\"AVG 2016\",\r\n            cube=\"Record Rating\",\r\n            mdx_set=MdxHierarchySet.children(member=Member.of(\"Period\", \"2016\")),\r\n            mdx_tuple=MdxTuple.of(Member.of(\"Chart\", \"Total Charts\"), Member.of(\"Record Rating Measure\", \"Rating\")))) \\\r\n        .add_hierarchy_set_to_row_axis(\r\n        MdxHierarchySet\r\n            .children(Member.of(\"Record\", \"Total Records\"))\r\n            .top_count(cube=\"Record Rating\", mdx_tuple=MdxTuple.of(Member.of(\"Period\", \"AVG 2016\")), top=5)) \\\r\n        .add_member_tuple_to_columns(Member.of(\"Period\", \"AVG 2016\")) \\\r\n        .where(Member.of(\"Chart\", \"Total Charts\"), Member.of(\"Record Rating Measure\", \"Rating\")) \\\r\n        .to_mdx()\r\n\r\n>>> print(mdx)\r\nWITH \r\nMEMBER [PERIOD].[PERIOD].[AVG2016] AS AVG({[PERIOD].[PERIOD].[2016].CHILDREN},[Record Rating].([CHART].[CHART].[TOTALCHARTS],[RECORDRATINGMEASURE].[RECORDRATINGMEASURE].[RATING]))\r\nSELECT\r\n{([PERIOD].[PERIOD].[AVG2016])} ON 0,\r\n{TOPCOUNT({[RECORD].[RECORD].[TOTALRECORDS].CHILDREN},5,[RECORDRATING].([PERIOD].[PERIOD].[AVG2016]))} ON 1\r\nFROM [RECORDRATING]\r\nWHERE ([CHART].[CHART].[TOTALCHARTS],[RECORDRATINGMEASURE].[RECORDRATINGMEASURE].[RATING])\r\n```\r\n\r\nThe `DimensionProperty` class is used to query attributes in conjunction with data. \r\nIt is used with the `MdxBuilder` through the `add_properties_to_row_axis`, `add_hierarchy_set_to_column_axis` functions.\r\n\r\n``` python\r\nfrom mdxpy import DimensionProperty, MdxHierarchySet, MdxBuilder, Member\r\n\r\nquery = MdxBuilder.from_cube(\"Sales\")\r\n\r\nquery = query.rows_non_empty()\r\nquery = query.add_hierarchy_set_to_row_axis(MdxHierarchySet.all_leaves(\"Product\"))\r\nquery = query.add_properties_to_row_axis(DimensionProperty.of(\"Product\", \"Description\"))\r\n\r\nquery = query.columns_non_empty()\r\nquery = query.add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(\"Sales Measure\", \"Revenue\")))\r\n\r\nquery = query.where(Member.of(\"Year\", \"2022\"), Member.of(\"Region\", \"Switzerland\"))\r\n\r\nprint(query.to_mdx())\r\n\r\n>>> print(mdx)\r\nSELECT\r\nNON EMPTY {[salesmeasure].[salesmeasure].[revenue]} DIMENSION PROPERTIES MEMBER_NAME ON 0,\r\nNON EMPTY {TM1FILTERBYLEVEL({TM1SUBSETALL([product].[product])},0)} DIMENSION PROPERTIES [product].[product].[description] ON 1\r\nFROM [sales]\r\nWHERE ([year].[year].[2022],[region].[region].[switzerland])\r\n```\r\n\r\nTo see all samples checkout the `test.py` file\r\n\r\n## Supported MDX Functions\r\n\r\n- TM1SUBSETALL\r\n- MEMBERS\r\n- TM1SUBSETTOSET\r\n- DEFAULTMEMBER\r\n- PARENT\r\n- FIRSTCHILD\r\n- LASTCHILD\r\n- CHILDREN\r\n- ANCESTORS\r\n- ANCESTOR\r\n- DRILLDOWNLEVEL\r\n- FILTER\r\n- TM1FILTERBYPATTERN\r\n- TM1FILTERBYLEVEL\r\n- TM1SORT\r\n- HEAD\r\n- TAIL\r\n- SUBSET\r\n- TOPCOUNT\r\n- BOTTOMCOUNT\r\n- UNION\r\n- INTERSECT\r\n- EXCEPT\r\n- ORDER\r\n\r\n## Tests\r\n\r\nAll tests in `test.py`\r\n\r\n## Contribution\r\n\r\nContribution is welcome. If you find a bug or feel like you can contribute please fork the repository, update the code and then create a pull request so we can merge in the changes.\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cubewise-code/mdxpy",
    "keywords": "MDX,TM1,IBM Cognos TM1,Planning Analytics,PA,Cognos",
    "license": "MIT-LICENSE",
    "maintainer": "Marius Wirtz",
    "maintainer_email": "MWirtz@cubewise.com",
    "name": "mdxpy",
    "package_url": "https://pypi.org/project/mdxpy/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mdxpy/",
    "project_urls": {
      "Homepage": "https://github.com/cubewise-code/mdxpy"
    },
    "release_url": "https://pypi.org/project/mdxpy/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A simple, yet elegant MDX library for TM1",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16486476,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca1cd7a916326c3f2dd8998e3b1f94ec993a4b40f525ad18254b39362ddb6a39",
        "md5": "df8561af6b2894679fee0540240fa103",
        "sha256": "a844d44e9a9d94df45865a7faadf308d663a323f9fa6f99fdcd9a674d8eb6997"
      },
      "downloads": -1,
      "filename": "mdxpy-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "df8561af6b2894679fee0540240fa103",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 82919,
      "upload_time": "2022-12-06T17:06:39",
      "upload_time_iso_8601": "2022-12-06T17:06:39.126909Z",
      "url": "https://files.pythonhosted.org/packages/ca/1c/d7a916326c3f2dd8998e3b1f94ec993a4b40f525ad18254b39362ddb6a39/mdxpy-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}