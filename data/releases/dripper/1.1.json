{
  "info": {
    "author": "Hiroki KIYOHARA",
    "author_email": "hirokiky@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=======\r\ndripper\r\n=======\r\n\r\nCleaning your messy data.\r\n\r\n.. contents::\r\n    :depth: 1\r\n\r\nGetting started\r\n===============\r\n\r\nConsider cleaning up some messy data.\r\nHere is a deep nested dictionary containing lots of unnecessary nesting and tuple.\r\n\r\n.. code-block:: python\r\n\r\n    some_messy_data = {\r\n        \"body\": {\r\n            \"article\": {\r\n                 \"articlesbody\": {\r\n                     \"articlesmeta\": {\r\n                         \"articles_meta_3\": \"Monty Python\",\r\n                     }\r\n                 }\r\n            },\r\n        },\r\n        \"published\": {\r\n            \"datetime\": (\"2014-11-05\", \"23:00:00\"),\r\n        }\r\n    }\r\n\r\nValues you want are ``'Monty Python'`` and ``'2014-11-05'``,\r\nshould be named ``'title'`` and ``'published_date'``\r\n\r\nNow let the hack begin with the ``dripper``.\r\n\r\n* Defile ``declaration`` dictionary\r\n* Create dripper object by ``dripper.dripper_factory``\r\n* Drip essential data\r\n\r\n.. code-block:: python\r\n\r\n    # Define\r\n     declaration = {\r\n        \"title\": (\"body\", \"article\", \"articlesbody\", \"articlesmeta\", \"articles_meta_3\"),\r\n        \"published_date\": (\"published\", \"datetime\", 0)\r\n    }\r\n    \r\n    # Create\r\n    import dripper\r\n    d = dripper.dripper_factory(declaration)\r\n    \r\n    # And drip\r\n    dripped = d(some_messy_data)\r\n    \r\n    assert dripped == {\r\n        \"title\": \"Monty Python\",\r\n        \"published_date\": \"2014-11-05\",\r\n    }\r\n\r\nInstallation\r\n============\r\n\r\nJust use pip to install\r\n\r\n.. code-block:: console\r\n\r\n    pip install dripper\r\n\r\nRequirements\r\n------------\r\n\r\n``dripper`` won't require any kind of outer libraries.\r\nSupporting Python versions are:\r\n\r\n* Python 2.7\r\n* Python 3.3\r\n* Python 3.4\r\n* Python 3.5\r\n\r\nBasics\r\n======\r\n\r\nAbove example is not all features of ``dripper``.\r\nIt is created to handle various data to clean up.\r\n\r\nAs value\r\n--------\r\n\r\n.. code-block:: python\r\n\r\n    from dripper import dripper_factory\r\n    declaration = {\r\n        \"title\": (\"meta\", \"meta1\")\r\n    })\r\n    d = dripper_factory(declaration)\r\n    d({\"meta\": {\"meta1\": \"Monty Python\"}}) == {\"title\": \"Monty Python\"}\r\n\r\nAlso you can specify string or integer directly.\r\nIt is as same as one-element tuple.\r\n\r\n.. code-block:: python\r\n\r\n    from dripper import dripper_factory\r\n    declaration = {\r\n        \"title\": \"meta\"\r\n    })\r\n    d = dripper_factory(declaration)\r\n    d({\"meta\": \"Monty Python\"}) == {\"title\": \"Monty Python\"}\r\n\r\nAs dict\r\n-------\r\n\r\n``dripper`` can define nested dictionary.\r\nJust pass nested dictionary to ``dripper_factory``.\r\n\r\n.. code-block:: python\r\n\r\n    from dripper import dripper_factory\r\n    declaration = {\r\n        \"article\": {\r\n            \"title\": [\"meta\", \"meta1\"],\r\n        }\r\n    })\r\n    d = dripper_factory(declaration)\r\n    d({\r\n        \"meta\": {\r\n            \"meta1\": \"Monty Python\",\r\n        },\r\n    }) == {\r\n        \"article\": {\r\n            \"title\": \"Monty Python\",\r\n        }\r\n    }\r\n\r\nYou can apply ``'__source_root__'`` to set root path for dripping.\r\n\r\n.. code-block:: python\r\n\r\n    declaration = {\r\n        \"article\": {\r\n            \"__source_root__\": (\"body\", \"meta\"),\r\n    ...\r\n            \"title\": \"meta1\",\r\n            \"author\": (\"meta2\", \"meta22\"),\r\n        }\r\n    })\r\n    d = dripper_factory(declaration)\r\n    d({\r\n        \"body\": {\r\n            \"meta\": {\r\n                \"meta1\": \"Monty Python\",\r\n                \"meta2\": {\"meta22\": \"John Due\"}\r\n            }\r\n        }\r\n    }) == {\r\n        \"article\": {\r\n            \"title\": \"Monty Python\",\r\n            \"author\": \"John Due\",\r\n        }\r\n    }\r\n\r\nTechnically, outermost dictionary of ``declaration`` is as same as inner dictionaries.\r\nSo you can specify ``'__source_root__'`` the dictionary.\r\n\r\nAs list\r\n-------\r\n\r\n``dripper`` can define list of dictionaries.\r\nYou need to apply ``'__type__': 'list'``.\r\n\r\n.. code-block:: python\r\n\r\n    from dripper import dripper_factory\r\n    declaration = {\r\n        \"articles\": {\r\n            \"__type__\": \"list\",\r\n            \"__source_root__\": \"articles\",\r\n    ...\r\n            \"title\": \"meta1\",\r\n            \"author\": [\"meta2\", \"meta22\"],\r\n        }\r\n    })\r\n    d = dripper_factory(declaration)\r\n    d({\r\n        \"articles\": [\r\n            {\"meta1\": \"Monty Python\", \"meta2\": {\"meta22\": \"John Doe\"}},\r\n            {\"meta1\": \"Flying Circus\", \"meta2\": {\"meta22\": \"Jane Doe\"}},\r\n        ]\r\n    }) == {\r\n        \"articles\": [\r\n            {\"title\": \"Monty Python\", \"author\": \"John Doe\"},\r\n            {\"title\": \"Flying Circus\", \"author\": \"Jane Doe\"},\r\n        ]\r\n    }\r\n\r\nAdvanced\r\n========\r\n\r\nConverting\r\n----------\r\n\r\nUse ``dripper.ValueDripper`` to pass converter function.\r\n\r\n.. code-block:: python\r\n\r\n    import dripper\r\n    declaration = {\r\n        \"title\": dripper.ValueDripper([\"title\"], converter=lambda s: s.lower())\r\n    }\r\n    d = dripper.dripper_factory(declaration)\r\n    d({\"title\": \"TITLE\"}) == {\"title\": \"title\"}\r\n\r\n\r\nTechnically, each ends (list) will be replaced by instance of ``dripper.ValueDripper``.\r\n\r\ndefault value\r\n-------------\r\n\r\nSpecify ``default`` keyword argument to change default value.\r\n``None`` will be applied as default.\r\n\r\n.. code-block:: python\r\n\r\n    import dripper\r\n    declaration = {\r\n        \"title\": dripper.ValueDripper([\"title\"], default=\"default\")\r\n    }\r\n    d = dripper.dripper_factory(declaration)\r\n    d({}) == {\"title\": \"default\"}\r\n\r\n\r\nTechnically, each ends (list) will be replaced by instance of ``dripper.ValueDripper``.\r\n\r\nCombining\r\n---------\r\n\r\nBy combining ``dripper.ValueDripper``, result value of that key will be combined.\r\n\r\n.. code-block:: python\r\n\r\n    import dripper\r\n    declaration = {\r\n        \"fullname\": (dripper.ValueDripper([\"firstname\"]) +\r\n                     dripper.ValueDripper([\"lastname\"]))\r\n    }\r\n    d = dripper.dripper_factory(declaration)\r\n    d({\"firstname\": \"Hrioki\", \"lastname\": \"Kiyohara\"}) == {\"fullname\": \"HriokiKiyohara\"}\r\n\r\n\r\nCHANGES\r\n=======\r\n\r\n1.1\r\n---\r\n\r\n- ``None`` is default value of ``ValueDripper``\r\n\r\n  - Before this change ``ValueDripper`` without ``default`` keyword argument\r\n    will raise ``DrippingError``\r\n  - In order to this behavior ``DictDripper`` will return empty dict\r\n    when inner value dripper could not dig out values\r\n  - Thanks for @bungoume to suggest this behavior\r\n\r\n1.0\r\n---\r\n\r\n- Officially supported Python 3.5\r\n\r\n0.3.1\r\n-----\r\n\r\n- ValueDripper now accepts ``default`` argument.\r\n\r\n0.3\r\n---\r\n\r\n- Fixed to accept string or integer directly as source_root.\r\n\r\n0.2\r\n---\r\n\r\n- Improved error handling.\r\n- Added MixDripper.\r\n\r\n0.1\r\n---\r\n\r\n-  Initial version",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hirokiky/dripper",
    "keywords": "dict data converter cleaning mapping",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dripper",
    "package_url": "https://pypi.org/project/dripper/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dripper/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/hirokiky/dripper"
    },
    "release_url": "https://pypi.org/project/dripper/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Cleaning your messy data.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3209102,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "248d3788d4302f6b8ce6a57be7d581035b6b77910bface78342e1cdad09b0de5",
        "md5": "dd60c9a0621cc47e6568283933affcbe",
        "sha256": "ec5723fef187a057a50e2e45497e1323fcbee17716be3554bb8c7cbc8637348c"
      },
      "downloads": -1,
      "filename": "dripper-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dd60c9a0621cc47e6568283933affcbe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5425,
      "upload_time": "2016-01-13T08:45:12",
      "upload_time_iso_8601": "2016-01-13T08:45:12.260992Z",
      "url": "https://files.pythonhosted.org/packages/24/8d/3788d4302f6b8ce6a57be7d581035b6b77910bface78342e1cdad09b0de5/dripper-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}