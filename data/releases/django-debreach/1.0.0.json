{
  "info": {
    "author": "Luke Pomfrey",
    "author_email": "lpomfrey@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "django-debreach\n===============\n\nBasic mitigation against the `BREACH attack <http://breachattack.com/>`_ for \nDjango projects. \n\nWhen combined with rate limiting in your web-server, or by using something\nlike `django-ratelimit <http://django-ratelimit.readthedocs.org/>`_, the \ntechniques here should provide at least some protection against the BREACH \nattack.\n\n.. image:: https://badge.fury.io/py/django-debreach.png\n    :target: http://badge.fury.io/py/django-debreach\n\n.. image:: https://travis-ci.org/lpomfrey/django-debreach.png?branch=master\n    :target: https://travis-ci.org/lpomfrey/django-debreach\n\n.. image:: https://coveralls.io/repos/lpomfrey/django-debreach/badge.png?branch=master\n    :target: https://coveralls.io/r/lpomfrey/django-debreach?branch=master\n\n.. image:: https://pypip.in/d/django-debreach/badge.png\n        :target: https://crate.io/packages/django-debreach?version=latest\n\nInstallation\n------------\n\nInstall from PyPI using::\n\n    $ pip install django-debreach\n\nIf installing from git you'll also need to install the ``PyCrypto`` library.\n\nAdd to your `INSTALLED_APPS`::\n\n    INSTALLED_APPS = (\n        ...\n        'debreach',\n        ...\n    )\n\nConfiguration\n-------------\n\nCSRF token masking\n++++++++++++++++++\nTo mask CSRF tokens in the template add the\n``debreach.context_processors.csrf`` context processor to the end of your \n`TEMPLATE_CONTEXT_PROCESSORS`::\n\n    TEMPLATE_CONTEXT_PROCESSORS = (\n        ...\n        'debreach.context_processors.csrf',\n    )\n\nAnd add the ``debreach.middleware.CSRFCryptMiddleware`` to your middleware,\n*before* ``django.middleware.csrf.CSRFMiddleware``::\n\n    MIDDLEWARE_CLASSES = (\n        'debreach.middleware.CSRFCryptMiddleware',\n        ...\n        'django.middleware.csrf.CSRFMiddleware',\n        ...\n    )\n\nThis works by AES encrypting the CSRF token when it is added to the template,\nso that ``{% csrf_token %}`` now produces a hidden field with a value that is \n``\"<random-crypt-text>$<actual-csrf-token-encrypted-with-random-crypt-text>\"``.\nThen, when the form is POSTed, the middleware decrypts the CSRF token back into\nit's original form. This ensures that the CSRF content is never the same\nbetween requests. If you are passing the token using the ``X-CSRFToken``\nheader (e.g. using XHR) that header will also be processed in the same way.\n\nNote that values that are unencrypted, or rather, don't contain a delimiting\n``$``, will be left unmodified.\n\n\nContent length modification\n+++++++++++++++++++++++++++\n\ndjango-debreach also enables you to counter the BREACH attack by randomising the\ncontent length of each response. This is acheived by adding a random string of \nbetween 12 and 25 characters as a comment to the end of the HTML content. Note\nthat this will only be applied to responses with a content type of\n``text/html``.\n\nTo enable content length modification for all responses, add the\n``debreach.middleware.RandomCommentMiddleware`` to the *start* of your\nmiddleware, but *after* the ``GzipMiddleware`` if you are using that.::\n\n    MIDDLEWARE_CLASSES = (\n        'debreach.middleware.RandomCommentMiddleware',\n        ...\n    )\n\nor::\n\n    MIDDLEWARE_CLASSES = (\n        'django.middleware.gzip.GzipMiddleware',\n        'debreach.middleware.RandomCommentMiddleware',\n        ...\n    )\n\nIf you wish to disable this feature for selected views, simply apply the\n``debreach.decorators.random_comment_exempt`` decorator to the view.\n\nIf you only want to protect a subset of views with content length modification\nthen it may be easier to not use the middleware, but to selectively apply the\n``debreach.decorators.append_random_comment`` decorator to the views you want\nprotected.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/lpomfrey/django-debreach",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-debreach",
    "package_url": "https://pypi.org/project/django-debreach/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-debreach/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/lpomfrey/django-debreach"
    },
    "release_url": "https://pypi.org/project/django-debreach/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Adds middleware and context processors to give some protection against the BREACH attack in Django.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12474268,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f03f2ca9e122e15463b95ae5995d544cb9dd4540474fb4052b6f6b0686416c16",
        "md5": "a9c53392f4d0b8354663645aa718b3be",
        "sha256": "e0240729d38c52b5455d24508bf6b98b336e16451f94591f4654ad9d66fef84d"
      },
      "downloads": -1,
      "filename": "django-debreach-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a9c53392f4d0b8354663645aa718b3be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9980,
      "upload_time": "2014-05-12T19:02:27",
      "upload_time_iso_8601": "2014-05-12T19:02:27.194650Z",
      "url": "https://files.pythonhosted.org/packages/f0/3f/2ca9e122e15463b95ae5995d544cb9dd4540474fb4052b6f6b0686416c16/django-debreach-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}