{
  "info": {
    "author": "Luke Pomfrey",
    "author_email": "lpomfrey@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "django-debreach\n===============\n\nBasic mitigation against the `BREACH attack <http://breachattack.com/>`_ for \nDjango projects. \n\nWhen combined with rate limiting in your web-server, or by using something\nlike `django-ratelimit <http://django-ratelimit.readthedocs.org/>`_, the \ntechniques here should provide at least some protection against the BREACH \nattack.\n\n.. image:: https://badge.fury.io/py/django-debreach.png\n    :target: https://badge.fury.io/py/django-debreach\n    :alt: PyPI\n.. image:: https://travis-ci.org/lpomfrey/django-debreach.png?branch=master\n    :target: https://travis-ci.org/lpomfrey/django-debreach\n    :alt: Build status\n\n.. image:: https://coveralls.io/repos/lpomfrey/django-debreach/badge.png?branch=master\n    :target: https://coveralls.io/r/lpomfrey/django-debreach?branch=master\n    :alt: Coverage\n\nInstallation\n------------\n\nInstall from PyPI using::\n\n    $ pip install django-debreach\n\nAdd to your `INSTALLED_APPS`::\n\n    INSTALLED_APPS = (\n        ...\n        'debreach',\n        ...\n    )\n\nConfiguration\n-------------\n\nCSRF token masking\n^^^^^^^^^^^^^^^^^^\nTo mask CSRF tokens in the template add the\n``debreach.context_processors.csrf`` context processor to the end of your \n`TEMPLATE_CONTEXT_PROCESSORS`::\n\n    TEMPLATE_CONTEXT_PROCESSORS = (\n        ...\n        'debreach.context_processors.csrf',\n    )\n\nAnd add the ``debreach.middleware.CSRFCryptMiddleware`` to your middleware,\n*before* ``django.middleware.csrf.CSRFMiddleware``::\n\n    MIDDLEWARE_CLASSES = (\n        'debreach.middleware.CSRFCryptMiddleware',\n        ...\n        'django.middleware.csrf.CSRFMiddleware',\n        ...\n    )\n\nThis works by xor-ing the CSRF token when it is added to the template,\nso that ``{% csrf_token %}`` now produces a hidden field with a value that is \n``\"<random-string>$<actual-csrf-token-xor-ed-with-random-string>\"``.\nThen, when the form is POSTed, the middleware xors the CSRF token back into\nit's original form. This ensures that the CSRF content is never the same\nbetween requests. If you are passing the token using the ``X-CSRFToken``\nheader (e.g. using XHR) that header will also be processed in the same way.\n\nNote that values that are unchanged by django-debreach, or rather, don't \ncontain a delimiting ``$``, will be left unmodified. The middleware will\nalso not operate on views marked as being exempt from CSRF protection\nusing the ``django.views.decorators.csrf.csrf_exempt`` decorator.\n\nCSRF protection using csrf_protect\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nIf you don't use the CSRF middleware from django but, instead, apply the\n``django.views.decorators.csrf.csrf_protect`` decorator to selected\nviews, and don't want to use the ``debreach.middleware.CSRFCryptMiddleware``, \nthen you can use the ``debreach.decorators.csrf_decrypt`` decorator.\n\nTo use the ``debreach.decorators.csrf_decrypt`` decorator simply wrap\nyour CSRF protected view with the decorator, like so::\n\n    @csrf_protect\n    @csrf_decrypt\n    def view(request, *args, **kwargs):\n        return HttpResponse('')\n\n\nContent length modification\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndjango-debreach also enables you to counter the BREACH attack by randomising the\ncontent length of each response. This is acheived by adding a random string of \nbetween 12 and 25 characters as a comment to the end of the HTML content. Note\nthat this will only be applied to responses with a content type of\n``text/html``.\n\nTo enable content length modification for all responses, add the\n``debreach.middleware.RandomCommentMiddleware`` to the *start* of your\nmiddleware, but *after* the ``GzipMiddleware`` if you are using that.::\n\n    MIDDLEWARE_CLASSES = (\n        'debreach.middleware.RandomCommentMiddleware',\n        ...\n    )\n\nor::\n\n    MIDDLEWARE_CLASSES = (\n        'django.middleware.gzip.GzipMiddleware',\n        'debreach.middleware.RandomCommentMiddleware',\n        ...\n    )\n\nIf you wish to disable this feature for selected views, simply apply the\n``debreach.decorators.random_comment_exempt`` decorator to the view.\n\nIf you only want to protect a subset of views with content length modification\nthen it may be easier to not use the middleware, but to selectively apply the\n``debreach.decorators.append_random_comment`` decorator to the views you want\nprotected.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/lpomfrey/django-debreach",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-debreach",
    "package_url": "https://pypi.org/project/django-debreach/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-debreach/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/lpomfrey/django-debreach"
    },
    "release_url": "https://pypi.org/project/django-debreach/1.3.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Adds middleware and context processors to give some protection against the BREACH attack in Django.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12474268,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "450644c781c697f730ed1a770a2d7ec6354f70792971d4008f487186c6e9304b",
        "md5": "354c2333264cfb1b21f7e4670b538289",
        "sha256": "2739a20889a5d819f4bd078e8a9ebe90a8881f43345ec5c94af4b3ce0c75a4b0"
      },
      "downloads": -1,
      "filename": "django_debreach-1.3.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "354c2333264cfb1b21f7e4670b538289",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 8161,
      "upload_time": "2016-01-10T16:13:56",
      "upload_time_iso_8601": "2016-01-10T16:13:56.069061Z",
      "url": "https://files.pythonhosted.org/packages/45/06/44c781c697f730ed1a770a2d7ec6354f70792971d4008f487186c6e9304b/django_debreach-1.3.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71bda192e54e192e6a600196a464323b4d417a6b43114dfea2a8b6b1fcd7a92a",
        "md5": "77306804a1c712692696eb8867ab33d6",
        "sha256": "29352eeebe6455e882bd89f668c27b21ce63cf93420e927f47f30ea2f7b98b20"
      },
      "downloads": -1,
      "filename": "django-debreach-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "77306804a1c712692696eb8867ab33d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7399,
      "upload_time": "2016-01-10T16:13:14",
      "upload_time_iso_8601": "2016-01-10T16:13:14.767135Z",
      "url": "https://files.pythonhosted.org/packages/71/bd/a192e54e192e6a600196a464323b4d417a6b43114dfea2a8b6b1fcd7a92a/django-debreach-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}