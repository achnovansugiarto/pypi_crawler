{
  "info": {
    "author": "Danny McDonald",
    "author_email": "daniel.mcdonald@uzh.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# maruval\n\n> Version 1.0.1\n\n[![Build Status](https://travis-ci.org/uzh/maruval.svg?branch=master)](https://travis-ci.org/uzh/maruval)\n[![codecov.io](https://codecov.io/gh/uzh/maruval/branch/master/graph/badge.svg)](https://codecov.io/gh/uzh/maruval)\n[![PyPI version](https://badge.fury.io/py/maruval.svg)](https://badge.fury.io/py/maruval)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)\n\nCommand line utilities for [marugoto](https://github.com/uzh/marugoto) content\n\n* `maruval`: validate marugoto data\n* `marufind`: a utility to find folders with particular contents\n* `marupretty`: pretty-print a JSON file or all files in a directory\n\n## Installing dependencies\n\n*maruval* is predominantly written Python, so your machine needs Python and the Python package manager *pip* for installation. You should already have Python.\n\nTo check if you have *pip*, type `which pip` into your command line. If this returns a path to `pip`, you can proceed to `Installing maruval`.\n\nOtherwise, to install *pip*, run the following command:\n\n```bash\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python get-pip.py && rm get-pip.py\n```\n\nNow `which pip` should show a path to a *pip* executable.\n\n## Installing *maruval*\n\nOnce you have *Python*, *pip3*/*pip*, and maybe `jq`, run the following:\n\n```bash\npip install maruval\n# or, from the git repo:\ngit clone https://github.com/uzh/marugoto-validator && cd marugoto-validator && python.setup.py install\n```\n\n## Configuring *maruval* for *Atom*\n\nEach tool can be run from the command line, but perhaps more usefully, they can be run from within an Atom editing session.\n\nRun the following to configure Atom:\n\n```bash\npython -m maruval.atom\n```\n\nThen, restart Atom and type `maruval` into the command palette to see the available commands.\n\n## Configuring *marupretty*\n\nIf you want to use `marupretty`, the JSON pretty printer, you'll need to have the `jq` utility installed. Use the following command to do this:\n\n```bash\n# note: requires sudo\nsudo python -m maruval.jq\n# or, get it at https://stedolan.github.io/jq/ and save it as `jq` your PATH...\n```\n\n## Command line usage\n\nBelow describes how to use each of the three tools from the command line.\n\n### `maruval`: validate content\n\nThe main tool, *maruval*, checks for syntax and content errors in your JSON data. Use it on the command line like this:\n\n```bash\nmaruval -f -nw <path-to-content>\n```\n\nOptional arguments:\n\n* `-f`/`--fail-first` will stop *maruval* after first error\n* `-nw`/`--no-warnings` will suppress warning messages\n\nExample output (on some purposely broken data):\n\n```bash\ndanny@thinkpad:~/marugoto/content$ maruval PlantationLives/\n```\n\n```php\nValidating content at PlantationLives/\n868 JSON files found.\n\n====================================================================================================\nProblem #1 -- Syntax error in PlantationLives/chapter2/2.2.10/page.json\n----------------------------------------------------------------------------------------------------\n\nExpecting property name enclosed in double quotes: line 5 column 26 (char 94)\n\n====================================================================================================\nProblem #2 -- Content error in PlantationLives/chapter3/2.3.2/imageComponent1.json\n----------------------------------------------------------------------------------------------------\n\n'cannot be string' is not of type 'integer'\n\nFailed validating 'type' in schema['properties']['numberOfColumns']:\n    {'type': 'integer'}\n\nOn instance['numberOfColumns']:\n    'cannot be string'\n\n====================================================================================================\nProblem #3 -- Syntax error in PlantationLives/chapter3/2.3.5/imageComponent1.json\n----------------------------------------------------------------------------------------------------\n\nExpecting ',' delimiter: line 10 column 3 (char 144)\n\n====================================================================================================\n\nAll done. 3 errors found. 865 files OK.\n```\n\n\n### `marufind`: find particular content directories\n\nThis utility takes two required arguments: the first is a comma-separated list of JSON file types; the second is the path to the dataset.\n\nThe default mode of the tool is to show directories that contain all the listed JSON file types. You can use the `-any` or `-only` flags to match directories containing any of the listed types, or only the listed types. The optional `-not` flag will invert the results.\n\n\n```bash\n# show directories containing both a videoComponent and textExercise file\nmarufind videoComponent,textExercise <path-to-content>\n# show the opposite\nmarufind -not videoComponent,textExercise <path-to-content>\n# show directories containing any of these files\nmarufind -any videoComponent,textExercise <path-to-content>\n# show directories not containing any of these files\nmarufind -not -any videoComponent,textExercise <path-to-content>\n# show directories containing only page, mail and dialog files\nmarufind -only page,mail,dialog <path-to-content>\n# invert this --- directories containing more than these files\nmarufind -not -only page,mail,dialog <path-to-content>\n```\n\n### `marupretty`: bash utility to tidy up a file or content directory, requires [`jq`](https://stedolan.github.io/jq/)\n\nThis utility will format all files in the given directory, so you don't have to worry too much about whitespace and so on when modifying JSON files by hand.\n\n```bash\nmarupretty <path-to-content>\n```\n\n### Getting help\n\nThe following commands can be used to get more information about the usage of the tools:\n\n```bash\nmaruval --help\nmarufind --help\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/uzh/maruval",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maruval",
    "package_url": "https://pypi.org/project/maruval/",
    "platform": "",
    "project_url": "https://pypi.org/project/maruval/",
    "project_urls": {
      "Homepage": "http://github.com/uzh/maruval"
    },
    "release_url": "https://pypi.org/project/maruval/1.0.1/",
    "requires_dist": [
      "jsonschema (==3.0.1)",
      "setuptools"
    ],
    "requires_python": "",
    "summary": "Validator for marugoto game content",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7156894,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "096dcab203d5cb0c1a8804337470f2662483625cd0699597c6b04fd5bf0e0621",
        "md5": "f4cfc62267183f89bcf426940dbbfa01",
        "sha256": "1542c38bf2f46ca84ce1f4edb6b43daa94b516945ec0efffed9e5d96134c7655"
      },
      "downloads": -1,
      "filename": "maruval-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f4cfc62267183f89bcf426940dbbfa01",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23086,
      "upload_time": "2019-09-30T08:57:40",
      "upload_time_iso_8601": "2019-09-30T08:57:40.146854Z",
      "url": "https://files.pythonhosted.org/packages/09/6d/cab203d5cb0c1a8804337470f2662483625cd0699597c6b04fd5bf0e0621/maruval-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}