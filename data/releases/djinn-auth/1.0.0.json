{
  "info": {
    "author": "PythonUnited",
    "author_email": "info@pythonunited.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: Freely Distributable",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Site Management",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "djinn_auth\n==========\n\nRole based auth module for Djinn. The package is also usable as\nstandalone module, since it has no relation to other djinn packages.\n\nThis module builds upon the django.contrib.auth module, and extends it\nwith role based authorisation, both global roles and local roles (or:\nroles on a specific model instance). Roles can be assigned to a user\nand a group.\n\nFor (un)assignments you can use the API specified in\ndjinn_auth.utils. This provides functions to assign roles to\nusers/groups globally and locally, and to check on global and local\nroles.  Specific checks enable you to check whether a user has a role,\neither directly or through one of it's groups.\n\nNote that while this module is agnostic of the specific User model\n(since this is a swappable model), it will assume at least the\nexistence of the user_permissions relation.\n\n\nGlobal permissions\n------------------\n\nGlobal permissions provide a means of granting permissions to a user\nor group globally. This means that a check on a local permission on a\ngiven model instance, will also return the global permissions.\n\nYou can give a user a permission by:\n\n  1. give the user a permission through the User.user_permissions attribute\n  2. give the user a role that has this permission\n  3. add the user to a group that has a role that has this permission\n  4. add the user to a group that has the permission\n\n\nLocal permissions\n-----------------\n\nYou can enable permissions for a given user or group on a specific\nmodel instance by:\n\n  1. giving the user a local role on the object with that permission\n  2. giving a group the user is part of a local role with that permission\n  3. giving the permission to the user on the object\n  4. giving the permission to a group the user is part of on the object\n\nTo prevent acquisition of the global permissions on an instance,\nimplement the `acquire_global_roles` property and return False. This\nenables the scenario where users have a global 'allow', but some local\n'forbiddens'. Please note that this only disallows global _roles_, not\ndirect permissions on the user or it's groups itself.\n\n\nInstallation\n------------\n\nInstall the usual way using _pip_ or _easy\\_install_. Add djinn\\_auth\nto your INSTALLED\\_APPS. Add the djinn\\_auth backend to the\nAUTHENTICATION\\_BACKENDS setting:\n\n    AUTHENTICATION_BACKENDS = (\n      'django.contrib.auth.backends.ModelBackend',\n      'djinn_auth.authbackend.AuthBackend'\n      )\n\n\nUsage\n-----\n\nBasic use of the djinn\\_auth module is not different from using the\nbuiltin Django authorisation. You can use the same decorators or\ncalls, since djinn\\_auth adds it's own backend to the autorisation\nchain.\n\nCreate a role and add permissions:\n\n    from djinn_auth.models import Role\n    from django.contrib.auth.models import Permission\n\n    owner_role = Role.objects.create(name=\"owner\")\n\n    do_something = Permission.objects.get(codename=\"do_something\")\n\n    owner_role.add_permission(do_something)\n\n\nTo assign a global role for a user or group (assuming you have a user\n_bobdobalina_):\n\n    from djinn_auth.utils import assign_global_role\n\n    assign_global_role(bobdobalina, owner_role)\n\n\nRevoke it:\n\n    from djinn_auth.utils import unassign_global_role\n\n    unassign_global_role(bobdobalina, owner_role)\n\n\nAssign a local role:\n\n    from djinn_auth.utils import assign_local_role\n\n    instance = MyContentType.objects.get(pk=666)\n\n    assign_local_role(bobdobalina, instance, owner_role)\n\n\n1.0.0\n=====\nInitial version",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PythonUnited/djinn_auth",
    "keywords": "Djinn role base auth",
    "license": "beer-ware",
    "maintainer": null,
    "maintainer_email": null,
    "name": "djinn_auth",
    "package_url": "https://pypi.org/project/djinn_auth/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djinn_auth/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/PythonUnited/djinn_auth"
    },
    "release_url": "https://pypi.org/project/djinn_auth/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Djinn Intranet auth module, role based",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2204197,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd4f4c11b6a6c326760e7855b86a3ac1f7369ec30ca9e9488b0b30cd9f243fff",
        "md5": "52a8eb8145a6525a34b9b68145b72f3c",
        "sha256": "4f3b8e50b6746e34cd5a8ff45190c810f6fa05053a72a48db9f5f89d0568f261"
      },
      "downloads": -1,
      "filename": "djinn_auth-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "52a8eb8145a6525a34b9b68145b72f3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8041,
      "upload_time": "2014-10-03T15:07:11",
      "upload_time_iso_8601": "2014-10-03T15:07:11.298055Z",
      "url": "https://files.pythonhosted.org/packages/dd/4f/4c11b6a6c326760e7855b86a3ac1f7369ec30ca9e9488b0b30cd9f243fff/djinn_auth-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}