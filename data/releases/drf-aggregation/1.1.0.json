{
  "info": {
    "author": "Nikita Balobanov",
    "author_email": "kit-oz@ya.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "=================================\nDjango Rest Framework Aggregation\n=================================\n\n\n.. image:: https://codecov.io/gh/kit-oz/drf-aggregation/branch/main/graph/badge.svg?token=X1RWDJI9NG\n   :target: https://codecov.io/gh/kit-oz/drf-aggregation\n\n\nDRF Mixin for getting aggregations\n\nKey features:\n\n- can calculate percentile (work only on PostgreSQL) and percent\n- grouping by multiple fields\n- time series (does not work on SQLite)\n- limiting the number of displayed records\n\n.. attention::\n\n    API not stabilized yet\n\n\nInstalling\n----------\n\nFor installing use pip\n\n::\n\n    $ pip install drf-aggregation\n\nUsage\n-----\n\nCreate a ViewSet using a ViewSet from a package or by adding a mixin to an existing one\n\n.. code:: python\n\n    from drf_aggregation.mixins import AggregationMixin\n    from drf_aggregation.viewsets import AggregationViewSet\n\n\n    class MyCustomUserViewSet(AggregationMixin, GenericViewSet):\n        queryset = User.objects.all()\n        serializer_class = UserSerializer\n\n    class UserViewSet(AggregationViewSet):\n        queryset = User.objects.all()\n        serializer_class = UserSerializer\n\n\nRegister url\n\n.. code:: python\n\n    from drf_aggregation.routers import AggregationRouter\n\n\n    aggregation_router = AggregationRouter()\n    aggregation_router.register(\"user\", UserViewSet)\n\n    urlpatterns = [\n        path(\"my/custom/endpoint\", UserViewSet.as_view({\"get\": \"aggregation\"})),\n    ]\n\n    urlpatterns += aggregation_router.urls\n\nGet aggregations\n\n::\n\n    # Get the number of users\n    /user/aggregation?aggregation=count\n\n    # Last travel date\n    /trip/aggregation?aggregation=maximum&aggregationField=duration\n\n    # Median salary\n    /position/aggregation?aggregation=percentile&aggregationField=salary&percentile=0.5\n\n    # Top 5 ticket executors\n    /ticket/aggregation?aggregation=count&groupBy=assigned_to&limit=5&order=desc\n\n    # Percentage of open tickets by service\n    /ticket/aggregation?aggregation=percent&groupBy=service&additionalFilter={\"type\":\"operator\",\"data\":{\"attribute\":\"state\",\"operator\":\"=\",\"value\":\"open\"}}\n\n    # Life expectancy depending on the year of birth\n    /person/aggregation?aggregation=average&aggregationField=age&annotations={\"birth_year\":{\"field\":\"birth_date\",\"kind\":\"year\"}}&groupBy=birth_year\n\nSupported field types\n---------------------\n\n- IntegerField\n- FloatField\n- DateField (only minimum and maximum)\n- DateTimeField (only minimum and maximum)\n- DurationField\n\nAggreagtion\n-----------\n\nWhen sending the only parameter \"aggregation\", a dictionary with the field \"value\" is returned\n\n::\n\n    ?aggregation=average\n    \n    {\"value\":42.5}\n\nAvailable aggregation types:\n\n- count\n- sum\n- average\n- minimum\n- maximum\n- percentile\n- percent (return two additional values: \"numerator\" and \"denominator\")\n\nAdditional parameters for different types of aggregations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- aggregationField - mandatory for aggregations: sum, average, minimum, maximum, percentile\n- percentile - from 0 to 1, mandatory for percentile\n- additionalFilter - filter parser is used from package `drf-complex-filter`_, mandatory for percent\n\n.. _drf-complex-filter: https://github.com/kit-oz/drf-complex-filter\n\nGrouping results\n----------------\n\nTo group the result, a comma-separated list of required fields is passed\n\n::\n\n    ?aggregation=count&groupBy=field1,field2\n\n    [\n        {\"field1\":\"value1\",\"field2\":\"value3\",\"value\":2},\n        {\"field1\":\"value2\",\"field2\":\"value3\",\"value\":1},\n        {\"field1\":\"value2\",\"field2\":\"value4\",\"value\":3}\n    ]\n\nSorting the result\n------------------\n\nWhen grouping by one field, it is enough to pass a list of fields by which you need to sort the result\n\n::\n\n    ?aggregation=count&groupBy=field1&orderBy=field1\n\n    [\n        {\"field1\":\"value1\",\"value\":2},\n        {\"field1\":\"value2\",\"value\":1},\n        {\"field1\":\"value3\",\"value\":3}\n    ]\n\nTo sort by aggregation result, use \"value\"\n\n::\n\n    ?aggregation=count&groupBy=field1&orderBy=-value\n\n    [\n        {\"field1\":\"value3\",\"value\":3},\n        {\"field1\":\"value1\",\"value\":2},\n        {\"field1\":\"value2\",\"value\":1}\n    ]\n\nTo sort when grouping by two or more fields,\nyou must first add the ColumnIndexFilter filter backend to your ViewSet.\n\n.. code:: python\n\n    from drf_aggregation.filters import ColumnIndexFilter\n\n    class ModelViewSet(AggregationViewSet):\n        filter_backends = [ColumnIndexFilter]\n\nThis filter groups the source queryset by the specified field and preserves the sorting of items.\nAfter that, you can use this index to sort the data grouped in the desired way.\n\n::\n\n    ?aggregation=count&groupBy=field1,field2&columnIndex=field1&orderBy=-field1__index,-value\n\n    [\n        {\"field1\":\"value2\",\"field2\":\"value4\",\"value\":3},\n        {\"field1\":\"value2\",\"field2\":\"value3\",\"value\":1},\n        {\"field1\":\"value1\",\"field2\":\"value3\",\"value\":2}\n    ]\n\n\nLimiting the number of displayed groups\n---------------------------------------\n\nIf you have a large number of categories or you need to display only top-H, it is possible to limit the number of returned records\n\n::\n\n    ?aggregation=count&groupBy=field1&orderBy=-value&limit=2\n\n    [\n        {\"field1\":\"value1\",\"value\":10},\n        {\"field1\":\"value2\",\"value\":9}\n    ]\n\nIt is also possible to display all other groups as one additional category\n\n::\n\n    ?aggregation=count&groupBy=field1orderBy=-value&&limit=2&showOther=1\n    \n    [\n        {\"field1\":\"value1\",\"value\":10},\n        {\"field1\":\"value2\",\"value\":9},\n        {\"field1\":\"Other\",\"value\":45}\n    ]\n\nAdditional options when there is a limit to the number of displayed groups:\n\n- limitBy - field for selecting the values that will remain, if not passed, the first field for grouping is used\n- showOther - if \"1\" is passed, all groups not included in the top will be displayed as one additional category\n- otherGroupName - label for additional category, default \"Other\"\n\nTime series\n-----------\n\nWarning! Doesn't work on SQLite because it doesn't have date / time fields.\n\nTo display timeseries, you must first add the TruncateDateFilter filter backend to your ViewSet.\n\n.. code:: python\n\n    from drf_aggregation.filters import TruncateDateFilter\n\n    class ModelViewSet(AggregationViewSet):\n        filter_backends = [TruncateDateFilter]\n\n\nThis filter will allow you to add date fields rounded to the required level,\nby which you can group and sort the result\n\n::\n\n    ?truncateDate=created_at=day&groupBy=created_at__trunc__day\n\n    [\n        {\"created_at__trunc__day\": date(2020, 10, 4), \"value\": 1},\n        {\"created_at__trunc__day\": date(2020, 11, 4), \"value\": 2},\n    ]\n\nAvailable truncations:\n\n- year\n- quarter\n- month\n- week\n- day\n- hour\n- minute\n- second\n\n\nFor mo details about truncations read `Django Docs`_\n\n.. _Django Docs: https://docs.djangoproject.com/en/3.1/ref/models/database-functions/#trunc\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kit-oz/drf-aggregation",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-aggregation",
    "package_url": "https://pypi.org/project/drf-aggregation/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-aggregation/",
    "project_urls": {
      "Homepage": "https://github.com/kit-oz/drf-aggregation"
    },
    "release_url": "https://pypi.org/project/drf-aggregation/1.1.0/",
    "requires_dist": [
      "djangorestframework (~=3.12)",
      "drf-complex-filter (~=1.0)"
    ],
    "requires_python": ">= 3.6",
    "summary": "DRF ViewSet for getting aggregations",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13335829,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d21c936b6b69ff3baec12c02027c25827a38194f1cbec9d5b25c2b79be58e1a7",
        "md5": "567f693cca21aa782290d34e23b19b7a",
        "sha256": "f0e6d9848ef6379e1037cd0c3e326ca29f337be5baab3b9978cb1299ef0badaa"
      },
      "downloads": -1,
      "filename": "drf_aggregation-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "567f693cca21aa782290d34e23b19b7a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">= 3.6",
      "size": 12328,
      "upload_time": "2021-10-18T13:20:29",
      "upload_time_iso_8601": "2021-10-18T13:20:29.501326Z",
      "url": "https://files.pythonhosted.org/packages/d2/1c/936b6b69ff3baec12c02027c25827a38194f1cbec9d5b25c2b79be58e1a7/drf_aggregation-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "888c83648a67e3e3cedf60852ce647e65305b963cb768bba38ce092cb63cd610",
        "md5": "55619aa22a88130c321a269931f16895",
        "sha256": "f26d817cc9a34bc5f85f1c93a0dec3299e50088c96b1b46756def523e7348c28"
      },
      "downloads": -1,
      "filename": "drf_aggregation-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "55619aa22a88130c321a269931f16895",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.6",
      "size": 15057,
      "upload_time": "2021-10-18T13:20:31",
      "upload_time_iso_8601": "2021-10-18T13:20:31.557475Z",
      "url": "https://files.pythonhosted.org/packages/88/8c/83648a67e3e3cedf60852ce647e65305b963cb768bba38ce092cb63cd610/drf_aggregation-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}