{
  "info": {
    "author": "Sondre Lilleb√∏ Gundersen",
    "author_email": "sondrelg@live.no",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "License :: Other/Proprietary License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Documentation",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: Unit",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "\n<p align=\"center\"><h1 align='center'>DRF OpenAPI Tester</h1></p>\n<p align=\"center\">\n    <em>A test utility for validating response documentation</em>\n</p>\n<p align=\"center\">\n    <a href=\"https://pypi.org/project/drf-openapi-tester/\">\n        <img src=\"https://img.shields.io/pypi/v/drf-openapi-tester.svg\" alt=\"Package version\">\n    </a>\n    <a href=\"https://codecov.io/gh/snok/drf-openapi-tester\">\n        <img src=\"https://codecov.io/gh/snok/drf-openapi-tester/branch/master/graph/badge.svg\" alt=\"Code coverage\">\n    </a>\n    <a href=\"https://pypi.org/project/drf-openapi-tester/\">\n        <img src=\"https://img.shields.io/badge/python-3.6%2B-blue\" alt=\"Supported Python versions\">\n    </a>\n    <a href=\"https://pypi.python.org/pypi/drf-openapi-tester\">\n        <img src=\"https://img.shields.io/badge/django%20versions-2.2%2B-blue\" alt=\"Supported Django versions\">\n    </a>\n    <a href=\"http://mypy-lang.org/\">\n        <img src=\"http://www.mypy-lang.org/static/mypy_badge.svg\" alt=\"Checked with mypy\">\n    </a>\n</p>\n\nDRF OpenAPI Tester is a simple test utility. Its aim is to make it easy for\ndevelopers to catch and correct documentation errors in their OpenAPI schemas.\n\nMaintaining good documentation is difficult, and shouldn't be done manually.\nBy simply testing that your API responses match your schema definitions you can\n*know* that your schema reflects reality.\n\n## How does it work?\n\nTesting your schema is as simple as calling `validate_response` at the end\nof a regular test.\n\n```python\nfrom openapi_tester.case_testers import is_camel_case\nfrom openapi_tester.schema_tester import SchemaTester\n\nschema_tester = SchemaTester(case_tester=is_camel_case)\n\n\ndef test_response_documentation(client):\n    response = client.get('api/v1/test/1')\n\n    assert response.status_code == 200\n    assert response.json() == expected_response\n\n    schema_tester.validate_response(response=response)\n```\n\nSee docs further down for more details.\n\n## Supported OpenAPI Implementations\n\nWhether we're able to test your schema or not will depend on how it's implemented.\nWe currently support the following:\n\n- Testing dynamically rendered OpenAPI schemas with [drf-yasg](https://github.com/axnsan12/drf-yasg)\n- Testing dynamically rendered OpenAPI schemas with [drf-spectacular](https://github.com/tfranzel/drf-spectacular)\n- Testing any implementation which generates a static yaml or json file (e.g., like [DRF](https://www.django-rest-framework.org/topics/documenting-your-api/#generating-documentation-from-openapi-schemas))\n\nIf you're using another method to generate your schema and\nwould like to use this package, feel free to add an issue or\ncreate a PR.\n\nAdding a new implementation is as easy as adding the\nrequired logic needed to load the OpenAPI schema.\n\n## Installation\n\n\n```shell script\npip install drf-openapi-tester\n```\n\n## Features\n\nThe primary feature of the schema tester is to validate your API responses\nwith respect to your documented responses.\nIf your schema correctly describes a response, nothing happens;\nif it doesn't, we throw an error.\n\nThe second, optional feature, is checking the [case](https://en.wikipedia.org/wiki/Naming_convention_(programming)) of your\nresponse keys. Checking that your responses are camel cased is\nprobably the most common standard, but the package supplies case testers\nfor the following formats:\n\n- `camelCase`\n- `snake_case`\n- `PascalCase`\n- `kebab-case`\n\n## The schema tester\n\nThe schema tester is a class, and can be instantiated once or multiple times, depending on your needs.\n\n```python\nfrom openapi_tester.schema_tester import SchemaTester\nfrom openapi_tester.case_testers import is_camel_case\n\ntester = SchemaTester(\n    case_tester=is_camel_case,\n    ignore_case=['IP'],\n    schema_file_path=file_path\n)\n```\n\n### Case tester\n\nThe case tester argument takes a callable to validate the case\nof both your response schemas and responses. If nothing is passed,\ncase validation is skipped.\n\n### Ignore case\n\nList of keys to ignore. In some cases you might want to declare a global\nlist of exempt keys; keys that you know are not properly cased, but you do not intend to correct.\n\nSee the response tester description for info about ignoring keys for individal responses.\n\n### Schema file path\n\nThis is the path to your OpenAPI schema. **This is only required if you use the\nStaticSchemaLoader loader class, i.e., you're not using `drf-yasg` or `drf-spectacular`.**\n\n## The validate response method\n\nTo test a response, you call the `validate_response` method.\n\n```python\nfrom .conftest import tester\n\ndef test_response_documentation(client):\n    response = client.get('api/v1/test/1')\n    tester.validate_response(response=response)\n```\n\nIf you want to override the instantiated `ignore_case` list,\nor `case_tester` for a single test, you can pass these directly\nto the function.\n\n```python\nfrom .conftest import tester\nfrom openapi_tester.case_testers import is_snake_case\n\ndef test_response_documentation(client):\n    ...\n    tester.validate_response(\n        response=response,\n        case_tester=is_snake_case,\n        ignore_case=['DHCP']\n    )\n```\n\n## OpenAPITestCase\n\nThe library also offers an abstraction on top of validate_response that is meant to be used with the Django test framework.\n\n\n```python\nfrom openapi_tester.schema_tester import SchemaTester\nfrom openapi_tester.case_testers import is_camel_case\n\n# create a bound OpenAPITestCase class by instantiating the SchemaTester and calling the test_case method:\nOpenAPITestCase = SchemaTester(case_tester=is_camel_case).test_case()\n\n# use the OpenAPITestCase as part of the TestCase inheritance\nclass ExtendedAPITestCase(OpenAPITestCase):\n    def test_get_200(self) -> None:\n        \"\"\"\n        Verifies that a 200 is returned for a valid GET request to the /test/ endpoint.\n        \"\"\"\n        response = self.client.get('/api/v1/test/', headers={'Content-Type': 'application/json'})\n        expected_response = [...]\n\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.json(), expected_response)\n\n        # use the self.assertResponse method as you would use validate_response\n        self.assertResponse(response=response)\n```\n\nThe bound `self.assertResponse` method takes the same kwargs as validate_response.\n\n## Error messages\n\nWhen found, errors will be raised in the following format:\n\n```shell script\nopenapi_tester.exceptions.DocumentationError: Item is misspecified:\n\nExpected:   {'name': 'Saab', 'height': 'medium'}\n\nReceived:   {'name': 'Saab'}\n\nHint:       Remove the key(s) from you OpenAPI docs, or include it in your API response.\n\nSequence:   init.list\n```\n\n- `Expected` describes the response data\n- `Received` describes the schema.\n- `Hint` will sometimes include a suggestion for what actions to take, to correct an error.\n- `Sequence` will indicate how the response tester iterated through the data structure, before finding the error.\n\nIn this example, the response data is missing two attributes, ``height`` and ``width``, documented in the OpenAPI schema indicating that either the response needs to include more data, or that the OpenAPI schema should be corrected. It might be useful to highlight that we can't be sure whether the response or the schema is wrong; only that they are inconsistent.\n\n### Supporting the project\n\nPlease leave a ‚ú≠ if this project helped you üëè and contributions are always welcome!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/snok/drf-openapi-tester",
    "keywords": "openapi,swagger,api,testing,docs,documentation,django",
    "license": "BSD-4-Clause",
    "maintainer": "Jonas Kr√ºger Svensson",
    "maintainer_email": "jonas-ks@hotmail.com",
    "name": "drf-openapi-tester",
    "package_url": "https://pypi.org/project/drf-openapi-tester/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-openapi-tester/",
    "project_urls": {
      "Documentation": "https://github.com/snok/drf-openapi-tester",
      "Homepage": "https://github.com/snok/drf-openapi-tester",
      "Repository": "https://github.com/snok/drf-openapi-tester"
    },
    "release_url": "https://pypi.org/project/drf-openapi-tester/1.0.0/",
    "requires_dist": [
      "djangorestframework",
      "django (>=2.2,<4.0)",
      "inflection (>=0.4.0,<0.5.0)",
      "openapi-spec-validator (>=0.2.9,<0.3.0)",
      "prance (>=0.16.0,<0.17.0)",
      "pyYAML"
    ],
    "requires_python": ">=3.6.1,<4.0.0",
    "summary": "Django test utility for validating OpenAPI response documentation",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15967652,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ed24ed1e97468f6860f576cd314607822f82c635bd0868f0fecf30253a7e63b",
        "md5": "ab4d3e51405e1d2f1b4e7becda1d2def",
        "sha256": "4cabfa12a9a5845e772ffe69e567f7635e33c0a5a738aae6556f637a5ba0c53e"
      },
      "downloads": -1,
      "filename": "drf_openapi_tester-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ab4d3e51405e1d2f1b4e7becda1d2def",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.1,<4.0.0",
      "size": 19959,
      "upload_time": "2021-02-11T09:07:06",
      "upload_time_iso_8601": "2021-02-11T09:07:06.367376Z",
      "url": "https://files.pythonhosted.org/packages/7e/d2/4ed1e97468f6860f576cd314607822f82c635bd0868f0fecf30253a7e63b/drf_openapi_tester-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2d66aa16e4ac17f4685144398ba64a6152932b8f6c6bc37a58b83fa5fd87b50",
        "md5": "2dfcd42e74ef47fc03620cf95749cacb",
        "sha256": "3f9ddcad053b291c2090cb846917ded49592d3d8fc83337df21a18383e5aacfc"
      },
      "downloads": -1,
      "filename": "drf-openapi-tester-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2dfcd42e74ef47fc03620cf95749cacb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1,<4.0.0",
      "size": 20271,
      "upload_time": "2021-02-11T09:07:05",
      "upload_time_iso_8601": "2021-02-11T09:07:05.379063Z",
      "url": "https://files.pythonhosted.org/packages/c2/d6/6aa16e4ac17f4685144398ba64a6152932b8f6c6bc37a58b83fa5fd87b50/drf-openapi-tester-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}