{
  "info": {
    "author": "Sondre LillebÃ¸ Gundersen",
    "author_email": "sondrelg@live.no",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "License :: Other/Proprietary License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Documentation",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: Unit",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "[![PyPI](https://img.shields.io/pypi/v/drf-openapi-tester.svg)](https://pypi.org/project/drf-openapi-tester/)\n[![Coverage](https://codecov.io/gh/snok/drf-openapi-tester/branch/master/graph/badge.svg)](https://codecov.io/gh/snok/drf-openapi-tester)\n[![Python versions](https://img.shields.io/badge/Python-3.7%2B-blue)](https://pypi.org/project/drf-openapi-tester/)\n[![Django versions](https://img.shields.io/badge/Django-3.0%2B-blue)](https://pypi.org/project/drf-openapi-tester/)\n\n\n# DRF OpenAPI Tester\n\nThis is a test utility to validate DRF Test Responses against OpenAPI 2 and 3 schema. It has built-in support for:\n\n- OpenAPI 2/3 yaml or json schema files.\n- OpenAPI 2 schemas created with [drf-yasg](https://github.com/axnsan12/drf-yasg).\n- OpenAPI 3 schemas created with [drf-spectacular](https://github.com/tfranzel/drf-spectacular).\n\n## Installation\n\n```shell script\npip install drf-openapi-tester\n```\n\n## Usage\n\nFirst instantiate one or more instances of SchemaTester:\n\n```python\nfrom openapi_tester import SchemaTester\n\nschema_tester = SchemaTester()\n\n\n```\n\nIf you are using either [drf-yasg](https://github.com/axnsan12/drf-yasg)\nor [drf-spectacular](https://github.com/tfranzel/drf-spectacular) this will be auto-detected, and the schema will be\nloaded by the SchemaTester automatically. If you are using schema files though, you will need to pass the file path to\nthe tester:\n\n```python\nfrom openapi_tester import SchemaTester\n\n# path should be a string\nschema_tester = SchemaTester(schema_file_path=\"./schemas/publishedSpecs.yaml\")\n\n\n```\n\nOnce you instantiate a tester, you can use it to test responses:\n\n```python\nfrom openapi_tester.schema_tester import SchemaTester\n\n# you need to create at least one instance of SchemaTester.\n# you can pass kwargs to it\nschema_tester = SchemaTester()\n\n\ndef test_response_documentation(client):\n    response = client.get('api/v1/test/1')\n    assert response.status_code == 200\n    schema_tester.validate_response(response=response)\n```\n\nIf you are using the Django testing framework, you can create a base APITestCase that incorporates schema validation:\n\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.test import APITestCase\n\nfrom openapi_tester.schema_tester import SchemaTester\n\nschema_tester = SchemaTester()\n\n\nclass BaseAPITestCase(APITestCase):\n    \"\"\" Base test class for api views including schema validation \"\"\"\n\n    @staticmethod\n    def assertResponse(response: Response, **kwargs) -> None:\n        \"\"\" helper to run validate_response and pass kwargs to it \"\"\"\n        schema_tester.validate_response(response=response, **kwargs)\n```\n\nThen use it in a test file:\n\n```python\nfrom shared.testing import BaseAPITestCase\n\n\nclass MyAPITests(BaseAPITestCase):\n    def test_some_view(self):\n        response = self.client.get(\"...\")\n        self.assertResponse(response)\n```\n\n## Options\n\nYou can pass options either globally, when instantiating a `SchemaTester`, or locally, when\ninvoking `validate_response`:\n\n```python\nfrom openapi_tester import SchemaTester, is_camel_case\nfrom tests.utils import my_uuid_4_validator\n\nschema_test_with_case_validation = SchemaTester(\n    case_tester=is_camel_case,\n    ignore_case=[\"IP\"],\n    validators=[my_uuid_4_validator]\n)\n\n```\n\nOr\n\n```python\nfrom openapi_tester import SchemaTester, is_camel_case\nfrom tests.utils import my_uuid_4_validator\n\nschema_tester = SchemaTester()\n\n\ndef my_test(client):\n    response = client.get('api/v1/test/1')\n    assert response.status_code == 200\n    schema_tester.validate_response(\n        response=response,\n        case_tester=is_camel_case,\n        ignore_case=[\"IP\"],\n        validators=[my_uuid_4_validator]\n    )\n```\n\n### case_tester\n\nThe case tester argument takes a callable that is used to validate the key casings of both schemas and responses. If\nnothing is passed, case validation is skipped.\n\nThe library currently has 4 built-in case testers:\n\n- `is_pascal_case`\n- `is_snake_case`\n- `is_camel_case`\n- `is_kebab_case`\n\nYou can of course pass your own custom case tester.\n\n### ignore_case\n\nList of keys to ignore when testing key casing. This setting only applies when case_tester is not `None`.\n\n### validators\n\nList of custom validators. A validator is a function that receives two parameters: schema_section and data, and returns\neither an error message or `None`, e.g.:\n\n```python\nfrom typing import Any, Optional\nfrom uuid import UUID\n\n\ndef my_uuid_4_validator(schema_section: dict, data: Any) -> Optional[str]:\n    schema_format = schema_section.get(\"format\")\n    if schema_format == \"uuid4\":\n        try:\n            result = UUID(data, version=4)\n            if not str(result) == str(data):\n                return f\"Expected uuid4, but received {data}\"\n        except ValueError:\n            return f\"Expected uuid4, but received {data}\"\n    return None\n```\n\n### field_key_map\n\nYou can pass an optional dictionary that maps custom url parameter names into values, for cases where this cannot be\ninferred by the DRF `EndpointEnumerator`. A concrete use case for this option is when\nthe [django i18n locale prefixes](https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#language-prefix-in-url-patterns).\n\n```python\nfrom openapi_tester import SchemaTester\n\nschema_tester = SchemaTester(field_key_map={\n  \"language\": \"en\",\n})\n```\n\n## Schema Validation\n\nWhen the SchemaTester loads a schema, it runs it through\n[OpenAPI Spec validator](https://github.com/p1c2u/openapi-spec-validator) which validates that the schema passes without\nspecification compliance issues. In case of issues with the schema itself, the validator will raise the appropriate\nerror.\n\n## Django testing client\n\nThe library includes an `OpenAPIClient`, which extends Django REST framework's\n[`APIClient` class](https://www.django-rest-framework.org/api-guide/testing/#apiclient).\nIf you wish to validate each response against OpenAPI schema when writing\nunit tests - `OpenAPIClient` is what you need!\n\nTo use `OpenAPIClient` simply pass `SchemaTester` instance that should be used\nto validate responses and then use it like regular Django testing client:\n\n```python\nschema_tester = SchemaTester()\nclient = OpenAPIClient(schema_tester=schema_tester)\nresponse = client.get('/api/v1/tests/123/')\n```\n\nTo force all developers working on the project to use `OpenAPIClient` simply\noverride the `client` fixture (when using `pytest` with `pytest-django`):\n\n```python\nfrom pytest_django.lazy_django import skip_if_no_django\n\nfrom openapi_tester.schema_tester import SchemaTester\n\n\n@pytest.fixture\ndef schema_tester():\n    return SchemaTester()\n\n\n@pytest.fixture\ndef client(schema_tester):\n    skip_if_no_django()\n\n    from openapi_tester.clients import OpenAPIClient\n\n    return OpenAPIClient(schema_tester=schema_tester)\n```\n\nIf you are using plain Django test framework, we suggest to create custom\ntest case implementation and use it instead of original Django one:\n\n```python\nimport functools\n\nfrom django.test.testcases import SimpleTestCase\nfrom openapi_tester.clients import OpenAPIClient\nfrom openapi_tester.schema_tester import SchemaTester\n\nschema_tester = SchemaTester()\n\n\nclass MySimpleTestCase(SimpleTestCase):\n    client_class = OpenAPIClient\n    # or use `functools.partial` when you want to provide custom\n    # ``SchemaTester`` instance:\n    # client_class = functools.partial(OpenAPIClient, schema_tester=schema_tester)\n```\n\nThis will ensure you all newly implemented views will be validated against\nthe OpenAPI schema.\n\n## Known Issues\n\n* We are using [prance](https://github.com/jfinkhaeuser/prance) as a schema resolver, and it has some issues with the\n  resolution of (very) complex OpenAPI 2.0 schemas. If you encounter\n  issues, [please document them here](https://github.com/snok/drf-openapi-tester/issues/205).\n\n## Contributing\n\nContributions are welcome. Please see the [contributing guide](https://github.com/snok/.github/blob/main/CONTRIBUTING.md)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/snok/drf-openapi-tester",
    "keywords": "openapi,swagger,api,testing,schema,django,drf",
    "license": "BSD-4-Clause",
    "maintainer": "Na'aman Hirschfeld",
    "maintainer_email": "nhirschfeld@gmail.com",
    "name": "drf-openapi-tester",
    "package_url": "https://pypi.org/project/drf-openapi-tester/",
    "platform": null,
    "project_url": "https://pypi.org/project/drf-openapi-tester/",
    "project_urls": {
      "Documentation": "https://github.com/snok/drf-openapi-tester",
      "Homepage": "https://github.com/snok/drf-openapi-tester",
      "Repository": "https://github.com/snok/drf-openapi-tester"
    },
    "release_url": "https://pypi.org/project/drf-openapi-tester/2.1.2/",
    "requires_dist": [
      "django (>=3,<4); python_full_version <= \"3.7.0\"",
      "django (>=3,<5); python_version >= \"3.8\"",
      "djangorestframework (<3.14.0)",
      "inflection",
      "openapi-spec-validator (>=0.4)",
      "prance",
      "pyYAML"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Test utility for validating OpenAPI response documentation",
    "version": "2.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15967652,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7124c090b9b4cbaab6a9584381eace8e08644b56034b3ddc39f104ea22308c88",
        "md5": "7d6094dfed66acda499b102484fb21a4",
        "sha256": "7a06c09c0e8869ee9ab324f25bc04be2899dfc030173e48da05dc94e3c342d53"
      },
      "downloads": -1,
      "filename": "drf_openapi_tester-2.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7d6094dfed66acda499b102484fb21a4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 19686,
      "upload_time": "2022-09-25T16:14:03",
      "upload_time_iso_8601": "2022-09-25T16:14:03.657133Z",
      "url": "https://files.pythonhosted.org/packages/71/24/c090b9b4cbaab6a9584381eace8e08644b56034b3ddc39f104ea22308c88/drf_openapi_tester-2.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38a99cf9c7ab9060201aa84f96aa28241148cec1bc38ab6623d6ea16fd61be89",
        "md5": "e775da786860d091e857104287c3b23e",
        "sha256": "cb03be07fde84cad2f8749048e46763795cd22f289cef012015b0de27c53e161"
      },
      "downloads": -1,
      "filename": "drf-openapi-tester-2.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e775da786860d091e857104287c3b23e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 19904,
      "upload_time": "2022-09-25T16:14:01",
      "upload_time_iso_8601": "2022-09-25T16:14:01.912767Z",
      "url": "https://files.pythonhosted.org/packages/38/a9/9cf9c7ab9060201aa84f96aa28241148cec1bc38ab6623d6ea16fd61be89/drf-openapi-tester-2.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}