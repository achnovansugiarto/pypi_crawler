{
  "info": {
    "author": "GAEL Systems",
    "author_email": "drb-python@gael.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Data Request Broker\nThis python module includes data model implementation of DRB (Data Request Broker).\nImplementations are provided outside this project and shall be included into the application according to the needs.\nSee [documentation](https://drb-python.gitlab.io/drb) for details.\n# Library usage\nInstalling ````drb```` with execute the following in a terminal:\n\n    pip install drb\n# Notes for developers\n## Dev environment setup\nThe development environment includes all the features required to execute this module unitary test and to deploy it.\nWhen loading the project with pycharm, the tool automatically reads requirements file and sets up the virtual environment.\n\nInstallation of a virtual environment is not mandatory but greatly recommended in order to avoid any confusion between system or other projects libraries. Linux package python3-venv shall be installed (```sudo apt install python3-venv``` on ubuntu)\n\nThe command line to prepare the virtual environment:\n```commandline\npython3 -m venv venv\nsource venv/bin/activate\n```\nOnce successfully run, the command line prompt is updated with the virtual environment name:\n```commandline\n(venv) $~> _\n```\nOnce the virtual environment installed, the dependencies shall be downloaded:\n```commandline\n(venv) $~> pip install -r requirements.txt --no-cache-dir\nCollecting pip==21.1.2\n  Downloading pip-21.1.2-py3-none-any.whl (1.5 MB)\n     |████████████████████████████████| 1.5 MB 54 kB/s \nCollecting setuptools==57.0.0\n  Downloading setuptools-57.0.0-py3-none-any.whl (821 kB)\n     |████████████████████████████████| 821 kB 73 kB/s \nInstalling collected packages: pip, setuptools\n  Attempting uninstall: pip\n    Found existing installation: pip 20.0.2\n    Uninstalling pip-20.0.2:\n      Successfully uninstalled pip-20.0.2\n  Attempting uninstall: setuptools\n    Found existing installation: setuptools 44.0.0\n    Uninstalling setuptools-44.0.0:\n      Successfully uninstalled setuptools-44.0.0\nSuccessfully installed pip-21.1.2 setuptools-57.0.0\n```\nAt this stage the environment is installed.\n\nOther environment virtualization solution such as [Vagrant](http://www.vagrantup.com) are also stable solutions for production.\n## Git Contributions\n### Contribution process\nWe are pleased to receive all users contributions. Each contribution shall be documented in english, and code styling shall follow [pep8](https://www.python.org/dev/peps/pep-0008) recommendations.\nYou can also join the moderators team. Please contact me.\n\nContribution process is based on gitlab best practice and processes the following schema:\n\n![](docs/modification_process.png)\n\n### How to contribute\nContributor shall work in its own fork of the project and provides its contributions via the merge request process.\nThe merge request shall be approved and merged by a maintainers. So the step-by-step procedure to contribute is:\n\n- Fork the project,\n- Locally clone forked repository.\n- Once created, the modification branch could be submitted as merge request in ```Draft``` proposal state.\n- Once feature/bug finalized, ```Draft``` flag shall be removed and the assignees/maintainers notified for merge.\n\nBefore submission, contributor shall clean up, squash and rebase its commits to be easily inserted as fast-forward into the main branch.\nPlease read https://chris.beams.io/posts/git-commit as commit writing best practices for this project.\nThe related issue/bug identifier shall be reported into the commit message, otherwise, the issue shall be commented/closed accordingly.\n\n## Configuration management\nThe project uses the [```versioneer```](https://github.com/python-versioneer/python-versioneer) tool to manage releases deployement.\nThen, the version management and deployment are coupled and can be performed in the same process.\nThis process secures the deployment process preventing a developer from accidentally deploying and erasing a release version. Versioneer tool checks the local repository then generates a ```dirty``` release when repository is not clean. This process can also be useful when developer needs to deploy snapshots.\nMultiple and dirty deployement of versions are forbidden in [pypi.org](https://pypi.org/project/drb) repository, this behavior also secures the version erasing risks.\n\n### Setup the environment\nThe environment shall be configured to deploy the python library onto Pypi public  repository.\nThe application used to manage module deployment is ```twine```. This application shall be configured via `````${HOME}/.pypirc````` file as followed:\n\nAlternatively, the private gael's repository can be set (See ```[gael]``` entry.\n\n```properties\n[distutils]\nindex-servers =\n  pypi\n  drb\n\n[pypi]\nusername: __token__\npassword: pypi-XXX\n\n[drb]\nrepository = https://upload.pypi.org/legacy/\nusername: __token__\npassword: pypi-YYY\n\n[gael]\nrepository: https://repository.gael-systems.com/repository/python-gael/\nusername: username\npassword: password\n```\nThe important part is the ```drb``` section which defines the remote repository and credentials or token for the deployment (See https://pypi.org/help/#apitoken for details).\n\n### Perform the release and deployment\nThe version management is performed automatically with git tags. Setting the version is coupled with the deployment process within the CI/CD process.\n\nTo generate a new version, tag the master branch with the expected version and push the new tag version into git:\n```commandline\ngit tag 1.0-rc1\ngit push origin 1.0-rc1\n```\nOn pushing new tag, a pipeline is automatically executed to control\n- code format compliance with [pep8](https://www.python.org/dev/peps/pep-0008/))\n- code source security with plugins [bandit](https://bandit.readthedocs.io) and [semgrep](https://semgrep.dev/)\n- code unittary tests with python 3.8 and python 3.9\n- code coverage computation\n- deploy the release into pypi repository.\n\nNB: if the runner is not properly configured to upload distribution to the remote repository, the pipeline executed at tag push time might fail. To perform the distribution manually it shall be possible to run the following command lines:\n```commandline\nmake dist-clean\nmake dist-deploy\n```\nSee the makefile details in command line section [here after](#command-line).\n\n#### Branching model\nIn git, thanks to the tag oriented release, the branching model fixes the following rules:\n - All the contributions are merged into the `main` branch.\n - Contribution Merge Requests are merged using fast-forward mode.\n - A dedicated `release-xx` branch can be created for post-release fixes(hotfixes).\n\n### Project Final Releases Stategy\n\nThe project release version is based on 3 digits \"M.m.f\" :\n- M: Major version is created when DRB API is modified or interface behavior changed. (i.e. index are used instead of occurrence does not change interface, but greatly change the code behavior) - Usually Major version is created when unitary tests are impacted when they concerns module interface validation.\n- m: Minor version is created when new features are introduced without impact on the previous interface: Adding new entries in classes, new classes, add feature in interface method or new feature. (i.e. get_impl is able to manage kwargs dictionary argument to be passed to the sub implementation). Usually minor version is created when unitary tests are added to validate new feature, but old ones stays unchanged.\n- f: Fix version is created when a fix or a set of fixes are released. New unitary tests shall be created to ensure non regression of the issue in future changes.\n\n#### Tag management and pre/post releases\nDrb project follows the [pep440](https://www.python.org/dev/peps/pep-0440) recommendations for the tag representation. Versions are represented with the couple of (Major, Minor) version numbers for all pre-releases. Modifiers such as alpha (`aN`), beta(`bN`), release candidate(`rcN`), or post release (`.postN`) are possible as followed:\n- alpha version: `1.0a1`\n- beta version: `1.0b1`\n- release candidate version: `1.0rc1`\n- Final release: `1.0.0`\n\nNote that (a,b,rc) are based on 2 digits (Major.Minor) whereas Final release are identified on 3 digits as desibed in the [previous chapter](#project-final-releases-stategy): The third digit is used to manage fixes, waiting minor releases.\n\n### Command line\nThe environment comes with a preconfigured Makefile able to set up and prepare python environment to run tests and coverage. It also provides target to deploy new release manually.\n\n```commandline\nmake clean\n```\nClean-up the environment from cache and lightweight components. It does not removed downloaded dependencies (from venv directory), nor distributions.\n\n```commandline\nmake dist-clean\n```\nThe `dist-clean` command full cleans the repository as it has been cloned first.\nFollowing the call of `dist-clean` the virtual environment and all the caches will be removed.\n\n```commandline\nmake test\n```\nRun the unitary tests.\n\n```commandline\nmake lint\n```\nCheck if the source code properly follows the pep8 directives. This test is also used in gitlab piplines to accept pushed sources.\n\n```commandline\nmake coverage\n```\nRun the test coverage and generates a html report into `htmlcov` directory.\n\n```commandline\nmake dist\n```\nPrepare a distribution locally into `dist` directory. When no tag is present on the current commit, or modified files are present into the local directory, the distribution process creates a dirty version to be safety deploy to the repository.\n\n```commandline\nmake dist-deploy\n```\nPrepare and deploy a distribution into the gael's remote Pipy repository.\nThis command is run automatically when pushing a new tag. \n\n## Limitation\nCurrently, DRB project is not tested on Windows environment and some issues may appear on Windows systems.\n\nIf any troubleshoot occurred with the DRB library, please report us, opening a new issue or accident on the project GitLab page.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/drb-python/drb",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drb",
    "package_url": "https://pypi.org/project/drb/",
    "platform": null,
    "project_url": "https://pypi.org/project/drb/",
    "project_urls": {
      "Documentation": "https://drb-python.gitlab.io/drb",
      "Homepage": "https://gitlab.com/drb-python/drb",
      "Source": "https://gitlab.com/drb-python/drb"
    },
    "release_url": "https://pypi.org/project/drb/1.0.7/",
    "requires_dist": [
      "importlib-metadata (>=4.6.4)",
      "deprecation (==2.0.6)",
      "jsonschema (==4.3.3)",
      "PyYaml (==6.0)",
      "click (==8.0.3)",
      "keyring (>=23.5.0)",
      "keyrings.cryptfile (>=1.3.8)",
      "requests (~=2.27.1)"
    ],
    "requires_python": ">=3.8",
    "summary": "Data Request Broker",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17415765,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14a5e8311a50c0e47caad28f6865933219312d5d1104be43bfbedab67bcd0cae",
        "md5": "289a38013731718e77a67e26421f50c3",
        "sha256": "180b316a10fa85018b1a937404f00d6493e1855d02380de64f9f41c6cec281cb"
      },
      "downloads": -1,
      "filename": "drb-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "289a38013731718e77a67e26421f50c3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 38668,
      "upload_time": "2022-06-15T14:07:41",
      "upload_time_iso_8601": "2022-06-15T14:07:41.967649Z",
      "url": "https://files.pythonhosted.org/packages/14/a5/e8311a50c0e47caad28f6865933219312d5d1104be43bfbedab67bcd0cae/drb-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e35d7c342c216885eb9b1957e27d52c72d19524f83958bf0bd4c83b78670a78e",
        "md5": "af1983580e73faccf308b3da9b8eefcd",
        "sha256": "a250c709a920dad88a7e25d658f572658c44b8af2f15337777b79db1e728d896"
      },
      "downloads": -1,
      "filename": "drb-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "af1983580e73faccf308b3da9b8eefcd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 50436,
      "upload_time": "2022-06-15T14:07:43",
      "upload_time_iso_8601": "2022-06-15T14:07:43.762664Z",
      "url": "https://files.pythonhosted.org/packages/e3/5d/7c342c216885eb9b1957e27d52c72d19524f83958bf0bd4c83b78670a78e/drb-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}