{
  "info": {
    "author": "Ilia Kurenkov",
    "author_email": "ilia.kurenkov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# miteclock\n\nClock in and out of [mite](https://mite.yo.lk/) within seconds!\n\nDo you like tracking time in mite, but find it more convenient to grab any terminal (or\npop a new one) and type in a few characters rather than rummage through your browser\ntabs and click on the same 2 drop-down boxes every time you switch activities throughout\nthe day? `miteclock` is here to help!\n\n## Installation and Setup\n\nThis package should work with Python version 3.7 and higher. It doesn't have many\ndependencies so it should not be a huge deal to install directly in your global\nenvironment. Still, it's probably a better idea to create a dedicated virtualenv for it\nand then symlink the executable somewhere in your `PATH`. You could also use the\n[pipx](https://github.com/pipxproject/pipx) wrapper which automatically takes care of\nvirtualenv creation.\n\nWhether inside a virtualenv or not, install with a standard pip command:\n\n```sh\npip install miteclock\n```\n\nAfter installing (and symlinking) you should be able to run the following command in\nyour terminal:\n\n```sh\nm\n```\n\nThe first time you run it, it will prompt you for your account information and create a\n[TOML](https://github.com/toml-lang/toml) configuration file in your home directory\nnamed `~/.config/miteclock/config.toml`. Invoking `m` after that will show you the help\nmessage for the program.\n\n### Shell Auto-completion\n\nIf you'd like to enable auto-completion for your shell, run this command:\n\n```sh\nm completion\n```\n\nBy default this sets up `bash` completion, but `zsh` is can also be specified. Pass the\n`--help` flag to learn more about the command.\n\n## Usage\n\nThere are only two core commands: `m start` starts a clock, `m stop` stops it. That's\nit, _that simple_. The help message for `m stop` contains all you need to know about\nthat command, so here we focus on `m start`.\n\n### Tracking a New Entry\n\nLet's say your mite account has the following projects:\n\n- ACME &#x2013; Self-healing container deployments\n- OCP: ED-209\n- CHAZ 2020\n\nIn these projects you perform the following services (Dienstleistungen):\n\n- Development\n- Regular Maintenance\n- Irregular Maintenance\n- QA\n\n  From your experience with the mite webapp, you know that in order to add an entry and\n  start the clock for it you need to specify the following three fields:\n\n  - project\n  - service\n  - note\n\nHowever, what if instead of selecting the project and the service from a drop-down you\ndid so by pressing just one key? This is much faster, especially if you have more\nrealistic (i.e. larger) sets of projects and services that you'd have to sift through\nwith the drop-down.\n\nThese keys are known as shortcuts and you can define them in your configuration file.\nFor our example here, let's create a few mappings from keys to project/service names. We\nopen our `~/.config/miteclock/config.toml` in a text editor and add the following in the\n`[shortcuts]` table:\n\n```toml\n[shortcuts]\n# Shortcuts for projects.\na = \"ACME -- Self-healing container deployments\"\no = \"OCP: ED-209\"\nh = \"CHAZ 2020\"\nt = \"Team-Internal\"\n#  Shortcuts for services.\nd = \"Development\"\nr = \"Regular Maintenance\"\ni = \"Irregular Maintenance\"\nq = \"QA\"\nc = \"Communication/Coordination\"\n```\n\nNow we can add an activity and start the clock for it with this one command:\n\n```sh\nm start a d 'writing some code'\n```\n\nThe first two arguments to `start` are expanded into \"ACME &#x2013; Self-healing\ncontainer deployments\" and \"Development\" respectively. The last argument is the note and\nshould be quoted to ensure it is interpreted together. Note that the order of the\narguments is currently fixed to keep things simple.\n\nWhile most activities will likely require you to enter a unique note to describe them,\nthere are also some recurring appointments and tasks for which the notes don't need to\nvary either. Wouldn't it be nice to have shortcuts for those too? Let's add some\nshortcuts that describe recurring activities of many programmers:\n\n```toml\ndaily = [\"t\", \"c\", \"daily stand-up\"]\nretro = [\"t\", \"c\", \"retrospective\"]\nserver = ['a', 'r', \"regular server maintenance\"]\n```\n\nNotice how we used the shortcuts we had already defined to create new shortcuts? Like\nthey say, _it's shortcuts all the way down_!\n\nThese nested shortcuts can span any **consecutive** part of an activity definition. This\nis valid&#x2026;\n\n```toml\nkickoff = [\"c\", \"kickoff meeting for project\"]\n```\n\n&#x2026; and can be used with all your projects, for example:\n\n```sh\nm start h kickoff  # Tracks kickoff meeting for CHAZ 2020\nm start o kickoff  # Tracks kickoff meeting for OCP: ED-209\n```\n\nThis is also valid (though not so useful):\n\n```toml\nacmedev = [\"a\", \"d\"]\n```\n\nThis, however, is invalid:\n\n```toml\ninvalid = [\"a\", \"something ACME-related  ¯\\_(ツ)_/¯\"]\n```\n\n### Resume Tracking an Existing Entry\n\nOften you might have to stop the clock for some activity and then start it back up it\nlater.\n\nIf you have clocked in some entries for the day and run `m start` without any arguments,\nyou will be presented with a list of the activities you recorded for the day paired with\nkeys you can press to select one of the entries. Note that unlike in the mite webapp,\ntime entries are sorted by the time they were updated last not by the time when they\nwere created.\n\nYou can skip this menu by passing the `-l` flag (or `--last` if you like typing) which\nautomatically starts the last entry for which you had a clock running.\n\n### Helper Commands\n\n#### resume\n\n`m resume` is just an alias for `m start -l`.\n\n#### show/list\n\n`m show` and `m list` show you a list of shortcuts. You can also request a list of\n`projects` or `services` by providing these as arguments to the command. Note that\nespecially the list of projects has known to be long enough that you may want to pipe it\nto a file or filter it with `grep`.\n\n## Contributing\n\nVery simple in terms of git: fork this repo, create a branch in your fork that contains\nyour work, open a pull request against the `master` branch in this repo.\n\nFor local development, install the dependencies using\n[poetry](https://github.com/python-poetry/poetry).\n\n```sh\npoetry install\npoetry shell\npre-commit install\n```\n\nPlease make sure to add tests for any code changes.\n\n## Why yet another mite CLI?\n\nThere are almost half a dozen command-line interfaces already in several languages\n([Ruby](https://github.com/Overbryd/mite.cmd),\n[JavaScript](https://github.com/Ephigenia/mite-cli),\n[Go](https://github.com/leanovate/mite-go),\n[Python](https://github.com/port-zero/mite-cli)). There's even a\n[PHP wrapper library](https://github.com/derpaschi/Mitey). What is the need for yet\nanother cli?\n\nIn my opinion all the existing interfaces provide both too much functionality and too\nlittle. They try to cover the complete range of tasks that **can** be performed with\nmite and expose all the gory details of the data, like the IDs of the objects involved.\nIndeed if you regularly have to import and export time records, or if your workflow\nincludes managing projects and services for an account, these tools can arguably help\nyou with your work.\n\nHowever the way I see mite used most often involves starting and stopping the clock for\nactivities \"on the go\" throughout the day. Quite a few of these activities are\nrecurring, like check-in meetings with clients or team members. Moreover, most\nactivities that a particular person specifies on a given day tend to revolve around just\na handful of projects and services. Lastly, the active mite users I know seem to clock\nin and out throughout their day rather than enter all their time entries already with\ntimes attached, thus taking advantage of mite's built-in tracking capabilities.\n\nThis program aims to reduce the book-keeping cost of specifying activities and let the\nuser focus on their work while instructing mite to do what it does best: track time. It\ndeliberately exposes a very simple interface and deals in abstractions relevant\nprimarily to someone only using mite to track their time.\n\n## Acknowledgements\n\nThis project would not have been possible at all without the folks\n[who run mite](https://mite.yo.lk/) making their API accessible. Many thanks to them for\nthat. I am also grateful to the many people who wrote client libraries and cli tools\nbased on the API. This provided context to my efforts and thus helped me define what I\nwanted to focus them on.\n\n## Licence\n\nMIT\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iliakur/miteclock",
    "keywords": "time-tracking,productivity",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miteclock",
    "package_url": "https://pypi.org/project/miteclock/",
    "platform": "",
    "project_url": "https://pypi.org/project/miteclock/",
    "project_urls": {
      "Homepage": "https://github.com/iliakur/miteclock",
      "Repository": "https://github.com/iliakur/miteclock"
    },
    "release_url": "https://pypi.org/project/miteclock/2.1/",
    "requires_dist": [
      "requests (>=2.23.0)",
      "click (>=7.1.1)",
      "click-aliases (>=1.0.1)",
      "backoff (>=1.11.1)",
      "tomlkit (>=0.7.2,<0.8.0)",
      "attrs (>=21.4.0,<22.0.0)",
      "importlib-metadata (>=4.10.0,<5.0.0); python_version == \"3.7\""
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Clock in and out of mite.yo.lk quickly.",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16966408,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2592dd3234deb1cf9a53a48e8399cf91d0ccfa6b85b2b868a9362e77423857cc",
        "md5": "ce7019f1f5d777e06c83638b24d1746b",
        "sha256": "ec91faee4ff206331f1f83f37c206c4e9efd9c01e7c07ea43600494040bf461f"
      },
      "downloads": -1,
      "filename": "miteclock-2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce7019f1f5d777e06c83638b24d1746b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 17202,
      "upload_time": "2022-01-05T09:54:06",
      "upload_time_iso_8601": "2022-01-05T09:54:06.055248Z",
      "url": "https://files.pythonhosted.org/packages/25/92/dd3234deb1cf9a53a48e8399cf91d0ccfa6b85b2b868a9362e77423857cc/miteclock-2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a100c8ca9eb5a6bb1707fecd1d14ed2dd4a876a652705db9d0023d050e4022d4",
        "md5": "c77102f9ab9638e1d43f88714ea74af0",
        "sha256": "8689564aa7f14f1e7ed90fe2a4f943499f8a5c236de90516da1002b1de1f26f9"
      },
      "downloads": -1,
      "filename": "miteclock-2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c77102f9ab9638e1d43f88714ea74af0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 19835,
      "upload_time": "2022-01-05T09:54:08",
      "upload_time_iso_8601": "2022-01-05T09:54:08.100907Z",
      "url": "https://files.pythonhosted.org/packages/a1/00/c8ca9eb5a6bb1707fecd1d14ed2dd4a876a652705db9d0023d050e4022d4/miteclock-2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}