{
  "info": {
    "author": "Alexandre Hervé",
    "author_email": "alexandreherve@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# Documentation DefenseFinder\n\nDefenseFinder is a program to systematically detect known anti-phage systems. DefenseFinder uses Macsyfinder.\n\nIf you are using DefenseFinder please cite\n\n- \"Systematic and quantitative view of the antiviral arsenal of prokaryotes\" bioRxiv\n  _Tesson F., Hervé A. , Touchon M., d’Humières C., Cury J., Bernheim A._\n- \"MacSyFinder: A Program to Mine Genomes for Molecular Systems with an Application to CRISPR-Cas Systems.\" PloS one 2014\n  _Abby S., Néron B.,Ménager H., Touchon M. Rocha EPC._\n\n## DefenseFinder Models\n\nThis repository contains MacSyFinder models allowing for a systematic search of anti-phage systems, that contribute to the DefenseFinder tool.\n\nThe repo is formatted according to [MacSyData guidelines](https://macsyfinder.readthedocs.io/en/latest/modeler_guide/index.html) and synchronized with [macsy-models repository](https://github.com/macsy-models) to be available in macsydata.\n\n# Installing DefenseFinder command line interface\n\n### Install dependency\n\nDefenseFinder has one program dependency:\nthe Hmmer program, version 3.1 or greater (http://hmmer.org/).\nThe hmmsearch program should be installed (e.g., in the PATH) in order to use MacSyFinder.\nDefenseFinder also relies on Python library dependencies:\n\n- macsyfinder\n- colorlog\n- pyyaml\n- packaging\n- networkx\n- These dependencies will be automatically retrieved and installed when using pip for installation (see below).\n\n### Install DefenseFinder\n\nDefenseFinder is installable through pip\nBefore starting, if you can, it is recommended to install DefenseFinder in a virtualenv (such as condas)\n\n```sh\nconda create –name defensefinder\nconda activate defensefinder\npip install mdmparis-defense-finder\n```\n\nBut you can just chose to install it wherever using pip\n\n```sh\npip install mdmparis-defense-finder\n```\n\nif at this stage you are running into issues, it is very often due to a problem with your pip installer. Check the following [webpage](https://stackoverflow.com/questions/49748063/pip-install-fails-for-every-package-could-not-find-a-version-that-satisfies/49748494#49748494) for details on how to solve it\n\nAfter installing DefenseFinder, you need to get the rules. Run the command\n\n```sh\ndefense-finder update\n```\n\n### Updating DefenseFinder\n\nIn general, before running DefenseFinder, make sure to get the most uptodate rules by running\n\n```sh\ndefense-finder update\n```\n\nIf you have an outdated version of DefenseFinder, you can use the following line to get the most uptodate version\n\n```sh\npip install -U mdmparis-defense-finder\ndefense-finder update\n```\n\n## Running Defense Finder\n\n### Quick run (typically on one genome)\n\n```sh\ndefense-finder run genome.faa\n```\n\n### Input.\n\nThe input file, here “genome.faa” has to be under the format of protein fasta, which should be “ordered”. Indeed DefenseFinder takes into account the order of the proteins.\n\nA run on a genome (few thousands proteins) should take less than two minutes on a standard laptop. If more,make sure everything is installed properly.\n\nATTENTION, for more than one genome/replicon, either run one genome at a time, or format the database as described in a following section. DefenseFinder will not work on a “big” multifasta not formatted as described.\n\n### Outputs\n\nDefenseFinder will generate two types of files (and one optional), detailed below as well as provides the results from macsyfinder. Everything will be stored in a defined folder.\n\n_defense_finder_systems.tsv_ : In this file, each line corresponds to a system found in the given genomes. This is a summary of what was found and gives the following information\n\n- type: Type of the anti-phage system found\n- subtype : Subtype of the anti-phage system found\n- sys_beg : Protein where the systems begins (name found in the fasta file)\n- sys_end : Protein where the systems ends (name found in the fasta file)\n- protein_in_syst Proteins founds in the systems (name found in the fasta file)\n- genes_count Number of genes found in the system\n- name_of_profiles_in_sys List of the protein profiles found in the system (name from the HMM)\n\n_defense_finder_genes.tsv_ : In this file, each line corresponds to a gene found in a system. This is a summary of what was found and gives the following information.\nThis follows MacsyFinder nomenclature (best_solution.tsv) and more can be found in the macsyfinder [documentation](https://macsyfinder.readthedocs.io/en/latest/user_guide/index.html#running-macsyfinder).\n\n_defense_finder_hmmer.tsv_ : In this file, each line corresponds to a hit to any of the protein profiles involved in defense. Beware, a single protein can have several hits. This file is for a deep infection, of any proteins potentially linked to defense. However, biologically, it was shown that only a full system will be anti phage. So this should be interpreted with cautions.\n\n### Running DefenseFinder on several genomes\n\nWhen running DefenseFInder on several genomes, like Macsyfinder, we propose to adopt the following convention to fulfill the requirements for the “gembase db_type”.\n\nIt consists in providing for each protein, both the replicon name and a protein identifier separated by a “_” in the first field of fasta headers. “_” are accepted in the replicon name, but not in the protein identifier. Hence, the last “\\_” isthe separator between the replicon name and the protein identifier. As such, MacSyFinder will be able to treat eachreplicon separately to assess macromolecular systems’ presence.\n\n```sh\nExample: esco_genomes.faa\n> ESCO388_0001\nXXXXXXX\n> ESCO388_0002\nXXXXXXX\n…..\n> ESCO388_3603\nXXXXXXX\n> ESCO389_0001\nXXXXXXX\n> ESCO388_0002\nXXXXXXX\n> ESCO388_3555\nXXXXXXX\n```\n\nThen run\n\n```sh\ndefense-finder run –dbtype gembase esco_genomes.faa\n```\n\n## DefenseFinder options\n\nHelp\n\n```sh\ndefense-finder run --help\n```\n\ncore-macsyfinder options\n\n- -o, --out-dir\\_ TEXT The target directory where to store the results.Defaults to the current directory.\n- -w, --workers\\_ INTEGER The workers count. By default all cores will be used (w=0).\n- --db-type\\_ TEXT The macsyfinder --db-type option. Possible values are ordered\\*replicon, gembase, unordered, defaults to ordered\\*replicon. Run macsyfinder --help for more details\n- --preserve-raw Preserve raw MacsyFinder outputs alongside Defense Finder results inside the output directory.\n\nFor questions: you can contact aude.bernheim@inserm.fr\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mdmparis/defense-finder",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdmparis-defense-finder",
    "package_url": "https://pypi.org/project/mdmparis-defense-finder/",
    "platform": "",
    "project_url": "https://pypi.org/project/mdmparis-defense-finder/",
    "project_urls": {
      "Homepage": "https://github.com/mdmparis/defense-finder"
    },
    "release_url": "https://pypi.org/project/mdmparis-defense-finder/1.0.3/",
    "requires_dist": [
      "macsyfinder (==2.0rc6)",
      "colorlog (==6.3.0a1)",
      "click (==8.0.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "Defense Finder: allow for a systematic search of all known anti-phage systems.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15522278,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d74f9cd0880234baf4301a16daaf538374d3c6e4ff41719a3a3f810ae60ed52",
        "md5": "8c8ac720c2e0bf578b608627decbdf8b",
        "sha256": "3349e969aa88548ccb92be64d0c0c0a83e05b8c56baf07aaa100f4afc92d961f"
      },
      "downloads": -1,
      "filename": "mdmparis_defense_finder-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8c8ac720c2e0bf578b608627decbdf8b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 21761,
      "upload_time": "2022-02-08T17:02:12",
      "upload_time_iso_8601": "2022-02-08T17:02:12.896917Z",
      "url": "https://files.pythonhosted.org/packages/1d/74/f9cd0880234baf4301a16daaf538374d3c6e4ff41719a3a3f810ae60ed52/mdmparis_defense_finder-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b9e660e8b2b4aaf59edc39cd0acbe71f06ca57f4d5f1f2aeb98a5bddfeeb4f2",
        "md5": "974a573d2db3c9387d5fb8220c00947d",
        "sha256": "0a714ba12b3670450e47c4aa5a66464073eabea0cef3b16948ce0443cdc96679"
      },
      "downloads": -1,
      "filename": "mdmparis-defense-finder-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "974a573d2db3c9387d5fb8220c00947d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19054,
      "upload_time": "2022-02-08T17:02:14",
      "upload_time_iso_8601": "2022-02-08T17:02:14.464888Z",
      "url": "https://files.pythonhosted.org/packages/8b/9e/660e8b2b4aaf59edc39cd0acbe71f06ca57f4d5f1f2aeb98a5bddfeeb4f2/mdmparis-defense-finder-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}