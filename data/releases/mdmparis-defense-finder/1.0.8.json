{
  "info": {
    "author": "Alexandre Hervé",
    "author_email": "alexandreherve@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "\n# Documentation DefenseFinder\n\nDefenseFinder is a program to systematically detect known anti-phage systems. DefenseFinder uses MacSyFinder.\n\nIf you are using DefenseFinder please cite\n\n- \"Systematic and quantitative view of the antiviral arsenal of prokaryotes\" bioRxiv\n  _Tesson F., Hervé A. , Touchon M., d’Humières C., Cury J., Bernheim A._\n- \"MacSyFinder: A Program to Mine Genomes for Molecular Systems with an Application to CRISPR-Cas Systems.\" PloS one 2014\n  _Abby S., Néron B.,Ménager H., Touchon M. Rocha EPC._\n\n## DefenseFinder Models\n\nThis repository contains DefenseFinder a tool allowing for a systematic search of anti-phage systems.\nThe DefenseFinder models based on MacSyFinder architecture can be [here](https://github.com/mdmparis/defense-finder-models)\n\n# Installing DefenseFinder command-line interface\n\t\n### Install dependency\n\nDefenseFinder has one program dependency:\nthe Hmmer program, version 3.1 or greater (http://hmmer.org/).\nThe hmmsearch program should be installed (e.g., in the PATH) to use MacSyFinder.\nDefenseFinder also relies on Python library dependencies:\n\n- macsyfinder\n- colorlog\n- pyyaml\n- packaging\n- networkx\n- These dependencies will be automatically retrieved and installed when using pip for installation (see below).\n\n### Install DefenseFinder\n\nDefenseFinder is installable through pip.\nBefore starting, if you can, it is recommended to install DefenseFinder in a virtualenv (such as condas).\n\n```sh\nconda create –name defensefinder\nconda activate defensefinder\npip install mdmparis-defense-finder\n```\n\nHowever, you can also install DefenseFinder using only pip.\n\n```sh\npip install mdmparis-defense-finder\n```\n\nAt this stage, if you have an issue, this could be due to a problem with your pip installer.\nCheck the following [webpage](https://stackoverflow.com/questions/49748063/pip-install-fails-for-every-package-could-not-find-a-version-that-satisfies/49748494#49748494) for details on how to solve it\n\nAfter installing DefenseFinder, you need to retrieve the DefenseFinder models.\nTo retrieve it run:\n\n```sh\ndefense-finder update\n```\n\n### Updating DefenseFinder\nWhen you have not used DefenseFinder in the last days, make sure you have the latest versions of the models.\nTo verify and downloaded if necessary the latest models run:\n\n```sh\ndefense-finder update\n```\n\nWhen the DefenseFinder models are updated you only have to update the models and not the tool.\nHowever, if you have an outdated version of the DefenseFinder tool, you can use the following line to get the most recent version\n```sh\t\npip install -U mdmparis-defense-finder\ndefense-finder update\n```\n\n## Running Defense Finder\n\n### Quick run\nIf you want to run DefenseFinder on a small set of genomes (< 30 000 proteins).\nYou can run the following command.\n\n```sh\ndefense-finder run genome.faa\n```\n\n### Input.\n\nThe input file, here “genome.faa” has to be under the format of protein fasta, where all proteins are in the order of their position in the genome. Indeed DefenseFinder takes into account the order of the proteins.\n\nA run on a genome (few thousand proteins) should take less than two minutes on a standard laptop. If more, make sure everything is installed properly.\nIn this configuration, all the replicon will be named UserReplicon.\nATTENTION, If you want to run DefenseFinder on a larger set of genomes you need to format your dataset as described in \"Larger dataset and Gembase Format\".\n\n### Outputs\n\nDefenseFinder will generate three types of files (and an option to conserve MacSyFinder options).\nAll the files are described below.\n\n_defense_finder_systems.tsv_ : In this file, each line corresponds to a system found in the given genomes. This is a summary of what was found and gives the following information\n\n- sys_id : Each system detected by DefenseFinder have a unique ID based on the replicon where it was found and the type of systems\n- type: Type of the anti-phage system found (such as RM, Cas...)\n- subtype : Subtype of the anti-phage system found (such as RM_type_I, CAS_Class1-Subtype-I-E)\n- sys_beg : Protein where the system begins (name found in the input file)\n- sys_end : Protein where the system ends (name found in the input file)\n- protein_in_syst : List of all protein(s) present in this system (name found in the input file)\n- genes_count : Number of genes found in the system\n- name_of_profiles_in_sys:  List of the protein profiles that hit the protein of the system (name from the HMM).\n\n_defense_finder_genes.tsv_ : In this file, each line corresponds to a gene found in a system.\nFor each gene, there is several information such as the replicon, the position, the system..\nAll the information comes from MacSyFinder and follows MacSyFinder nomenclature (best_solution.tsv) and more can be found in the MacSyFinder Ma [documentation](https://macsyfinder.readthedocs.io/en/latest/user_guide/outputs.html).\n\n_defense_finder_hmmer.tsv_ : In this file, each line corresponds to an HMM hit. This file show all hit of HMM regardless if they are in a complete system or not. Those results have to be used cautiously for deep inspection. Indeed, biologically, it was shown that only a full system will be anti phage. This function can be used to found defense gene in small portion of genomes.\nBeware, a single protein can have several hits. The output is a part of the result of HMMer results table.\n- hit_id : the protein name (name found in the input file)\n- replicon : The name of the replicon\n- position_hit: The position in the input file\n- Gene_name : the name of the HMM\n\nBy using the argument --preserve-raw , you will have all the results from MacSyFinder. Those results are explained [here](https://macsyfinder.readthedocs.io/en/latest/user_guide/outputs.html)\n\n### Running DefenseFinder on several genomes\n\nWhen running DefenseFInder on several genomes, like MacSyFinder, we propose to adopt the following convention to fulfill the requirements for the “gembase db_type”.\nThe difference between any fasta file and the gembase format is the name of the protein (Protein name = the text after \\> in a fasta file). For both type, protein have to be ordered but in the first case the name of the protein do not matter (except no repetition).\nIn the gembase format, protein name are composeded of two part: the replicon and the position. The replicon name is the same for all the protein that the user want to be analyse simultaneously (for example a complete genome, a plasmid...)\nThe second component is the position. Those two component must be separated by \"_\". It is possible to use \"_\" in the replicon name, only the last instance will be used as the separator between replicon name and position.\nWith this format of file, MacSyFinder will be able to treat each replicon separately to assess macromolecular systems presence and reduce ressource use. \n\n\n```sh\nExample: esco_genomes.faa\n> ESCO388_0001\nXXXXXXX\n> ESCO388_0002\nXXXXXXX\n…..\n> ESCO388_3603\nXXXXXXX\n> ESCO389_0001\nXXXXXXX\n> ESCO389_0002\nXXXXXXX\n…..\n> ESCO389_3555\nXXXXXXX\n```\n\nTo use DefenseFinder with gembase format file on larger dataset of genomes run\n\n```sh\ndefense-finder run –dbtype gembase esco_genomes.faa\n```\n\n## DefenseFinder options\nTo check the different DefenseFinder options run\n\n```sh\ndefense-finder run --help\n```\nDefenseFinder has 4 options:\n\n- -o, --out-dir\\_ TEXT The target directory where to store the results.Defaults to the current directory.\n- -w, --workers\\_ INTEGER The workers count. By default all cores will be used (w=0).\n- --db-type\\_ TEXT The macsyfinder --db-type option. Possible values are ordered\\_replicon, gembase, unordered, defaults to ordered\\_replicon. Run macsyfinder --help for more details\n- --preserve-raw Preserve raw MacSyFinder outputs alongside Defense Finder results inside the output directory.\n\nFor questions: you can contact aude.bernheim@inserm.fr\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mdmparis/defense-finder",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdmparis-defense-finder",
    "package_url": "https://pypi.org/project/mdmparis-defense-finder/",
    "platform": "",
    "project_url": "https://pypi.org/project/mdmparis-defense-finder/",
    "project_urls": {
      "Homepage": "https://github.com/mdmparis/defense-finder"
    },
    "release_url": "https://pypi.org/project/mdmparis-defense-finder/1.0.8/",
    "requires_dist": [
      "macsyfinder (==2.0rc6)",
      "colorlog (==6.3.0a1)",
      "click (==8.0.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "Defense Finder: allow for a systematic search of all known anti-phage systems.",
    "version": "1.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15522278,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e5a571240294c8da11a54253c32b500ac33dd9892ac27e48456415efdcae8bc",
        "md5": "e40aeaa5f8006984d07228be51fbc70c",
        "sha256": "04ca9f0e57d1bb27ed8c661802a88914ea8b822fa17146cfc0492dafd4524b3e"
      },
      "downloads": -1,
      "filename": "mdmparis_defense_finder-1.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e40aeaa5f8006984d07228be51fbc70c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 22229,
      "upload_time": "2022-02-17T17:16:18",
      "upload_time_iso_8601": "2022-02-17T17:16:18.870494Z",
      "url": "https://files.pythonhosted.org/packages/3e/5a/571240294c8da11a54253c32b500ac33dd9892ac27e48456415efdcae8bc/mdmparis_defense_finder-1.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea035277595330505f05dab1765a2c2e85dd9ce14aa10c3f13aa9fc12d68a1d9",
        "md5": "df93c156be169170a1dcf55cb4f057e0",
        "sha256": "8c782869f7f14c2957eb6857c02b62dcf8b0d8a4f651e66df369b939eca3c219"
      },
      "downloads": -1,
      "filename": "mdmparis-defense-finder-1.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "df93c156be169170a1dcf55cb4f057e0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19645,
      "upload_time": "2022-02-17T17:16:20",
      "upload_time_iso_8601": "2022-02-17T17:16:20.520883Z",
      "url": "https://files.pythonhosted.org/packages/ea/03/5277595330505f05dab1765a2c2e85dd9ce14aa10c3f13aa9fc12d68a1d9/mdmparis-defense-finder-1.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}