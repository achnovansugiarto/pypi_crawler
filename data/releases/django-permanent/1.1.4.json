{
  "info": {
    "author": "Alexander Klimenko",
    "author_email": "alex@erix.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development"
    ],
    "description": "Django Permanent\n================\n\nYet another approach to provide soft (logical) delete or masking (thrashing) django models instead of deleting them physically from db.\n\n.. image:: https://api.travis-ci.org/meteozond/django-permanent.svg?branch=master\n\nModels\n================\n\nTo create a non-deletable model just inherit it from ``PermanentModel``::\n\n    class MyModel(PermanentModel):\n        pass\n\nIt automatically changes delete behaviour to hide objects instead of deleting them::\n\n    >>> a = MyModel.objects.create(pk=1)\n    >>> b = MyModel.objects.create(pk=2)\n    >>> MyModel.objects.count()\n    2\n    >>> a.delete()\n    >>> MyModel.objects.count()\n    1\n\nTo recover a deleted object just call its ``restore`` method::\n\n    >>> a.restore()\n    >>> MyModel.objects.count()\n    2\n\nUse the ``force`` kwarg to enforce physical deletion::\n\n    >>> a.delete(force=True) # Will act as the default django delete\n    >>> MyModel._base_manager.count()\n    0\n\nIf you need to restore a deleted object instead of re-creating the same one use the ``restore_on_create`` attribute::\n\n    class MyModel(PermanentModel):\n        class Permanent:\n          restore_on_create = True\n\nIn this case ``QuerySet`` provides check existence of same attribute objects and restores them if they've been deleted, creating new ones if not.\n\nManagers\n================\n\nIt changes the default model manager to ignore deleted objects, adding a ``deleted_objects`` manager to see them instead::\n\n    >>> MyModel.objects.count()\n    2\n    >>> a.delete()\n    >>> MyModel.objects.count()\n    1\n    >>> MyModel.deleted_objects.count()\n    1\n    >>> MyModel.all_objects.count()\n    2\n    >>> MyModel._base_manager.count()\n    2\n\nQuerySet\n================\n\nThe ``QuerySet.delete`` method will act as the default django delete, with one exception - objects of models subclassing ``PermanentModel`` will be marked as deleted; the rest will be deleted physically::\n\n    >>> MyModel.objects.all().delete()\n\nYou can still force django query set physical deletion::\n\n    >>> MyModel.objects.all().delete(force=True)\n\nUsing custom querysets\n=======================\n\n1. Inherit your query set from ``PermanentQuerySet``::\n\n    class ServerFileQuerySet(PermanentQuerySet)\n        pass\n\n2. Wrap ``PermanentQuerySet`` or ``DeletedQuerySet`` in you model manager declaration::\n\n    class MyModel(PermanentModel)\n        objects = MultiPassThroughManager(ServerFileQuerySet, NonDeletedQuerySet)\n        deleted_objects = MultiPassThroughManager(ServerFileQuerySet, DeletedQuerySet)\n        all_objects = MultiPassThroughManager(ServerFileQuerySet, PermanentQuerySet)\n\nMethod ``get_restore_or_create``\n=================================\n\n1. Check for existence of the object.\n2. Restore it if it was deleted.\n3. Create a new one, if it was never created.\n\nField name\n================\n\nThe default field named is 'removed', but you can override it with the PERMANENT_FIELD variable in settings.py::\n\n    PERMANENT_FIELD = 'deleted'\n\nRequirements\n================\n\n- Django 1.7+\n- Python 2.7, 3.4+",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/meteozond/django-permanent",
    "keywords": "django,delete,undelete,safedelete,remove,restore,softdelete,logicaldelete,trash",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-permanent",
    "package_url": "https://pypi.org/project/django-permanent/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-permanent/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/meteozond/django-permanent"
    },
    "release_url": "https://pypi.org/project/django-permanent/1.1.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Yet another approach to provide soft (logical) delete or masking (thrashing) django models instead of deleting them physically from db.",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2851248,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb56c4559f5faa57033bbf85ac45922ff21db62241745f99f0e9785ca493a50e",
        "md5": "b76359857791af54a553d092561506d6",
        "sha256": "b828f1a1a867637d29c643edfdb8911daa29f02822b1f53309ec99cf9b91b474"
      },
      "downloads": -1,
      "filename": "django-permanent-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "b76359857791af54a553d092561506d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8819,
      "upload_time": "2016-09-15T10:47:01",
      "upload_time_iso_8601": "2016-09-15T10:47:01.224418Z",
      "url": "https://files.pythonhosted.org/packages/cb/56/c4559f5faa57033bbf85ac45922ff21db62241745f99f0e9785ca493a50e/django-permanent-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}