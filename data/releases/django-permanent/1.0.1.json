{
  "info": {
    "author": "Alexander Klimenko",
    "author_email": "alex@erix.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "Django Permanent\r\n================\r\n\r\nYet another approach to provide soft (logical) delete or masking (thrashing) django models instead of deleting them physically from db.\r\n\r\nModels\r\n================\r\n\r\nTo create non-deletable model just inherit it form the PermanentModel.::\r\n\r\n    class MyModel(PermanentModel):\r\n        pass\r\n\r\nIt automatically changes delete behaviour, to hide model instead of deleting. restore() method.::\r\n\r\n    >>> a = MyModel.objects.create(pk=1)\r\n    >>> b = MyModel.objects.create(pk=2)\r\n    >>> MyModel.objects.count()\r\n    2\r\n    >>> a.delete()\r\n    >>> MyModel.objects.count()\r\n    1\r\n\r\nTo recover model just call its restore method.::\r\n\r\n    >>> a.restore()\r\n    >>> MyModel.objects.count()\r\n    2\r\n\r\nUser Force kwarg to enforce physical deletion.::\r\n\r\n    >>> a.delete(force=True) # Will act as the default django delete\r\n    >>> MyModel._base_manager.count()\r\n    0\r\n\r\nManagers\r\n================\r\n\r\nIt changes default model manager to ignore deleted objects. And adds deleted_objects manager to find the last ones.::\r\n\r\n    >>> MyModel.objects.count()\r\n    2\r\n    >>> a.delete()\r\n    >>> MyModel.objects.count()\r\n    1\r\n    >>> MyModel.deleted_objects.count()\r\n    1\r\n    >>> MyModel.all_objects.count()\r\n    2\r\n    >>> MyModel._base_manager.count()\r\n    2\r\n\r\nQuerySet\r\n================\r\nQuery set delete method will act as the default django delete, with the one exception - all related  PermanentModel children will be marked as deleted, the usual models will be deleted physically::\r\n        \r\n    >>> MyModel.objects.all().delete()\r\n\r\nYou can still force django query set physical deletion::\r\n\r\n    >>> MyModel.objects.all().delete(force=True)\r\n\r\nUsing custom querysets (requires django-model-utils)\r\n====================================================\r\n\r\n1. Inherit your query set from PermanentQuerySet::\r\n\r\n    class ServerFileQuerySet(PermanentQuerySet)\r\n        pass\r\n\r\n2. Wrap it in the permanent_queryset or deleted_queryset in you model manager declaration::\r\n\r\n    class MyModel(PermanentModel)\r\n        objects = MultiPassThroughManager(ServerFileQuerySet, NonDeletedQuerySet)\r\n        deleted_objects = MultiPassThroughManager(ServerFileQuerySet, DeletedQuerySet)\r\n        all_objects = MultiPassThroughManager(ServerFileQuerySet, PermanentQuerySet)\r\n\r\nMethod get_restore_or_create\r\n=============================\r\n\r\n1. Check existence of the object.\r\n2. Restore it was deleted.\r\n3. Create new one, if it wasn't ever created.\r\n\r\nField name\r\n================\r\n\r\nBy default field is named removed, but you can override it by PERMANENT_FIELD variable in you settings.py.::\r\n\r\n    PERMANENT_FIELD = 'deleted'",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/meteozond/django-permanent",
    "keywords": "django,delete,undelete,safedelete,remove,restore,softdelete,logicaldelete,trash",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-permanent",
    "package_url": "https://pypi.org/project/django-permanent/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-permanent/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/meteozond/django-permanent"
    },
    "release_url": "https://pypi.org/project/django-permanent/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Yet another approach to provide soft (logical) delete or masking (thrashing) django models instead of deleting them physically from db.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2851248,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "288110761d201e67fa06bdcc5fe8dcdfb90fca6eddc29726cb866848ce518408",
        "md5": "973cd890517d259d8e9c9477d039bc6a",
        "sha256": "49d9a2b42df330b6b28e843b523dc51fa593ade1e669f05340d09b6452f4ee51"
      },
      "downloads": -1,
      "filename": "django-permanent-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "973cd890517d259d8e9c9477d039bc6a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4616,
      "upload_time": "2014-02-03T12:30:12",
      "upload_time_iso_8601": "2014-02-03T12:30:12.536929Z",
      "url": "https://files.pythonhosted.org/packages/28/81/10761d201e67fa06bdcc5fe8dcdfb90fca6eddc29726cb866848ce518408/django-permanent-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}