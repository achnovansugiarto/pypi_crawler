{
  "info": {
    "author": "Alexander Klimenko",
    "author_email": "alex@erix.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "Django Permanent\n================\n\nYet another approach to provide soft (logical) delete or masking (thrashing) django models instead of deleting them physically from db.\n\nModels\n================\n\nTo create non-deletable model just inherit it form the PermanentModel.::\n\n    class MyModel(PermanentModel):\n        pass\n\nIt automatically changes delete behaviour, to hide model instead of deleting. restore() method.::\n\n    >>> a = MyModel.objects.create(pk=1)\n    >>> b = MyModel.objects.create(pk=2)\n    >>> MyModel.objects.count()\n    2\n    >>> a.delete()\n    >>> MyModel.objects.count()\n    1\n\nTo recover model just call its restore method.::\n\n    >>> a.restore()\n    >>> MyModel.objects.count()\n    2\n\nUser Force kwarg to enforce physical deletion.::\n\n    >>> a.delete(force=True) # Will act as the default django delete\n    >>> MyModel._base_manager.count()\n    0\n\nIf you need to restore deleted model instead of creating the same use `restore_on_create` attribute.\n\n    class MyModel(PermanentModel):\n        class Permanent:\n          restore_on_create = True\n\nIn this case QuerySet provides check existence of same attributes object and restores it if it was removed, creates a\nnew if not.\n\nManagers\n================\n\nIt changes default model manager to ignore deleted objects. And adds deleted_objects manager to find the last ones.::\n\n    >>> MyModel.objects.count()\n    2\n    >>> a.delete()\n    >>> MyModel.objects.count()\n    1\n    >>> MyModel.deleted_objects.count()\n    1\n    >>> MyModel.all_objects.count()\n    2\n    >>> MyModel._base_manager.count()\n    2\n\nQuerySet\n================\nQuery set delete method will act as the default django delete, with the one exception - all related  PermanentModel children will be marked as deleted, the usual models will be deleted physically::\n        \n    >>> MyModel.objects.all().delete()\n\nYou can still force django query set physical deletion::\n\n    >>> MyModel.objects.all().delete(force=True)\n\nUsing custom querysets (requires django-model-utils)\n====================================================\n\n1. Inherit your query set from PermanentQuerySet::\n\n    class ServerFileQuerySet(PermanentQuerySet)\n        pass\n\n2. Wrap it in the permanent_queryset or deleted_queryset in you model manager declaration::\n\n    class MyModel(PermanentModel)\n        objects = MultiPassThroughManager(ServerFileQuerySet, NonDeletedQuerySet)\n        deleted_objects = MultiPassThroughManager(ServerFileQuerySet, DeletedQuerySet)\n        all_objects = MultiPassThroughManager(ServerFileQuerySet, PermanentQuerySet)\n\nMethod get_restore_or_create\n=============================\n\n1. Check existence of the object.\n2. Restore it was deleted.\n3. Create new one, if it wasn't ever created.\n\nField name\n================\n\nBy default field is named removed, but you can override it by PERMANENT_FIELD variable in you settings.py.::\n\n    PERMANENT_FIELD = 'deleted'\n\nRequirements\n============\n\nDjango min 1.6.x required. To cover Django 1.5 needs use 0.1.4 branch.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/meteozond/django-permanent",
    "keywords": "django,delete,undelete,safedelete,remove,restore,softdelete,logicaldelete,trash",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-permanent",
    "package_url": "https://pypi.org/project/django-permanent/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-permanent/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/meteozond/django-permanent"
    },
    "release_url": "https://pypi.org/project/django-permanent/1.0.7/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Yet another approach to provide soft (logical) delete or masking (thrashing) django models instead of deleting them physically from db.",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2851248,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f746e32aab6210cc0756f3ca1f69823e0c1d7238110e8185d3e7e569c08dc266",
        "md5": "8991dee7eeb38db435a80e82aa1767e5",
        "sha256": "5fe5ae2e20e405679038c74f7f148903312941c1ebf3487119a81a636e64ed18"
      },
      "downloads": -1,
      "filename": "django-permanent-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "8991dee7eeb38db435a80e82aa1767e5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7595,
      "upload_time": "2015-03-24T07:38:19",
      "upload_time_iso_8601": "2015-03-24T07:38:19.025019Z",
      "url": "https://files.pythonhosted.org/packages/f7/46/e32aab6210cc0756f3ca1f69823e0c1d7238110e8185d3e7e569c08dc266/django-permanent-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}