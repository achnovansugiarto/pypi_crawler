{
  "info": {
    "author": "o3o3o",
    "author_email": "o3o3o.me@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=====\nCache Fn\n=====\nUse django cache to cache the `function(*arg, **kw)` with timeout.\n\nQuick start\n-----------\n\n1. Install::\n   \n   pip install django-cache-fn\n\n1. Add \"cache_fn\" to your INSTALLED_APPS setting like this::\n\n   INSTALLED_APPS = [\n   ...\n   'cache_fn',\n   ]\n\n2. Start to use it in code::\n\n   from cache_fn.decorators import cache_fn\n\n   @cache_fn(prefix='myprefix', timeout=3600)\n   def foo(k1, k2):\n      return \"%s %s\"%(k1, k2)\n\nUsage\n--------\n   \n   def cache_fn(timeout=1, prefix=None, cache_ttl=MEMCACHE_MAX_EXPIRATION):\n       \"\"\"\n       Retrieve data from cache if cacheable and no-stale,\n       otherise refresh synchronously and cache it.\n       * timeout: The stale timeout which would be handled in the decorator.\n       * prefix: The prefix of cache key.\n       * cache_ttl: The TTL(time to live) of key in memcache.\n       NOTE: For HttpResponse, we just cache the response whose status code is 200.\n       \"\"\"",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/o3o3o/django-cache-fn",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cache-fn",
    "package_url": "https://pypi.org/project/django-cache-fn/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cache-fn/",
    "project_urls": {
      "Homepage": "https://github.com/o3o3o/django-cache-fn"
    },
    "release_url": "https://pypi.org/project/django-cache-fn/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Cache function result with args for Django.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5460219,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f12a95d66e9799d6b8444ba1d826a0a54bed2145bf5f0bf2dc7ff5f6a181f44",
        "md5": "a9c334d4f6000ac826005aebece65076",
        "sha256": "e700a159334bd0d2cddf372e83e51a94c08926330fa7e83fb1cbb38f7c0f73f0"
      },
      "downloads": -1,
      "filename": "django-cache-fn-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a9c334d4f6000ac826005aebece65076",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3772,
      "upload_time": "2019-01-26T03:35:27",
      "upload_time_iso_8601": "2019-01-26T03:35:27.610353Z",
      "url": "https://files.pythonhosted.org/packages/4f/12/a95d66e9799d6b8444ba1d826a0a54bed2145bf5f0bf2dc7ff5f6a181f44/django-cache-fn-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}