{
  "info": {
    "author": "Concentric Sky",
    "author_email": "code@concentricsky.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Framework :: Django",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python"
    ],
    "description": "Description\n===========\nDjenesis begets django projects.\n\nDjenesis is a tool that helps with starting and working on Django projects. Virtualenv is a de facto requirement for any python project and especially so with django projects.\n\nDjenesis does require virtualenv, and your first step is installation for your platform.\n\n\n\nVirtualenv Installation\n=======================\n\nMac OS X\n--------\nVirtualenv requires the 'install-name-tool' command line utility to run properly on OSX.  But by default OS X does not ship with this installed.  It can be installed either by installing Xcode from the Mac App Store, or if you would like to avoid a several gigabyte download you can install the \"Command Line Tools for Xcode\" from `Apple Developer Downloads <https://developer.apple.com/downloads/index.action>`_.  Note that both of these will require the creation of an Apple ID if you do not already have one.\n\nOnce either Xcode or the Xcode Command Line Tools are installed, you can install virtualenv with ``pip`` -- if you don't have pip, OSX ships with the ``easy_install`` command::\n    \n    pip install virtualenv\n    \n*or*::\n    \n    easy_install virtualenv\n\n\n\nWindows\n-------\n\nMake sure ``C:\\Python27\\Scripts`` is in your PATH variable. *(Replace \"Python27\" with your version)*\n\nDownload `ez_setup.py <http://peak.telecommunity.com/dist/ez_setup.py>`_ and run it::\n\n    python ez_setup.py\n    \nThen you can install virtualenv with easy_install::\n\n    easy_install virtualenv\n\n\nUbuntu\n------\nInstall pip and virtualenv from the package repository::\n\n    apt-get install python-pip python-virtualenv\n\nRedhat\n------\n\nInstall pip and virtualenv from the package repository::\n\n    yum install python-pip python-virtualenv\n\n\nTips & Tricks\n-------------\n\nPip Download Cache\n~~~~~~~~~~~~~~~~~~\n\nset the environment variable PIP_DOWNLOAD_CACHE, to reduce the need to download pip packages multiple times.\ne.g.::\n\n    export PIP_DOWNLOAD_CACHE=~/.pip_download_cache\n\n\n\n\n\nUser Stories\n============\n\nI want to create a new default django project\n---------------------------------------------\nThe simplest story, give djenesis a project name and it will initialze a new project::\n\n    $ djenesis djangoproject\n\nThis will create a new virtualenv environment at ``./env-djangoproject``, install the latest version of Django, and initialize a new django project at ``./djangoproject`` using the standard django-admin startproject command.\n\n\nI want to create a new django project based on my custom template\n-----------------------------------------------------------------\nProbably the most common use case, start a new project based on a preferred project layout::\n\n    $ djenesis mynewproject git+https://github.com/concentricsky/djenesis-template.git\n\nthis will inflate a new project based on the template found at the git+url in a directory named ``mynewproject`` \nThis will also create a virtualenv named ``env-mynewproject`` and install any packages found in requirements.txt found at the toplevel directory in the template.\n\n\n\nI want to start working on an existing django project\n-----------------------------------------------------\nA convienent way to start working on a project::\n\n    $ djenesis -i projectname git+git@github.com:user/project.git\n\nthis will initialize a virtualenv ``env-projectname`` and clone the project into ``projectname``, just like without -i but will preserve .git or any other SCM management files. (.hg, .git, .svn) \n\n\n\n\nI like using mkvirtualenv and workon\n------------------------------------\nThe virtualenvwrapper package is popular and is a convienent way to maintain a lot of different projects::\n\n    $ djenesis -w thenewproject \n\n\n\nTemplate URL Formats\n====================\nYou can specify a template as either a path to a local file, a URL to a remote .tgz file, or as a SCM url:: \n\n  /path/to/local/directory\n  http://example.com/django-template.tgz\n  git+git@github.com:user/project\n  git+ssh://user@example.com:port/repository.git#branch\n  hg+https://bitbucket.org/user/project\n  svn+http://project.googlecode.com/svn/trunk/project\n\n\n\n\nEnvironment Variables\n=====================\n\n**DJENESIS_DEFUALT_TEMPLATE**\n  If set, djenesis will use this as the template argument if none is given on the commandline.\n\n**DJENESIS_VIRTUALENVWRAPPER**\n  If set to \"1\", djenesis will default to using the ``mkvirtualenv`` and ``workon`` commands.\n\n**DJENESIS_VIRTUALENVWRAPPER_PATH**\n  The path to where virtualenvwrapper.sh has been installed.\n\n\nUsage\n=========\n\n::\n\n    Usage: djenesis [options] <project_name> [template]\n    Options:\n      -h, --help            show this help message and exit\n      -e VIRTUALENV, --virtualenv=VIRTUALENV\n                            Specify the path to create the virtualenv\n      -i, --initialize      Initialize from an existing project (dont remove scm\n                            files)\n      -w, --use-virtualenvwrapper\n                            use 'mkvirtualenv' and 'workon' from virtualenvwrapper\n      --virtualenvwrapper-name=VIRTUALENVWRAPPER_NAME\n                            the name of the virtualenvwrapper environment to use\n                            (defaults to project_name)\n      --virtualenvwrapper-path=VIRTUALENVWRAPPER_PATH\n                            the path to the virtualenvwrapper",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/concentricsky/djenesis",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "djenesis",
    "package_url": "https://pypi.org/project/djenesis/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djenesis/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/concentricsky/djenesis"
    },
    "release_url": "https://pypi.org/project/djenesis/1.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Djenesis begets Django projects",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 791193,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f3ef01c342985c9272c6a0343df6283678da3479179fb53f8f38804f2a5a5a7",
        "md5": "33803f3afb8e2d1ebdf623ef139a2a3a",
        "sha256": "413c44a23c29ed1950df8a7d86cf46bbbe0224e39a7b23edc5ca9184bcfd55ed"
      },
      "downloads": -1,
      "filename": "djenesis-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "33803f3afb8e2d1ebdf623ef139a2a3a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5338,
      "upload_time": "2012-07-18T22:11:59",
      "upload_time_iso_8601": "2012-07-18T22:11:59.809091Z",
      "url": "https://files.pythonhosted.org/packages/8f/3e/f01c342985c9272c6a0343df6283678da3479179fb53f8f38804f2a5a5a7/djenesis-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}