{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Framework :: IPython",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "================\ndjango-read-only\n================\n\n.. image:: https://img.shields.io/github/workflow/status/adamchainz/django-read-only/CI/main?style=for-the-badge\n   :target: https://github.com/adamchainz/django-read-only/actions?workflow=CI\n\n.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge\n  :target: https://github.com/adamchainz/django-read-only/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/django-read-only.svg?style=for-the-badge\n   :target: https://pypi.org/project/django-read-only/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nDisable Django database writes.\n\nRequirements\n------------\n\nPython 3.7 to 3.11 supported.\n\nDjango 3.2 to 4.1 supported.\n\n----\n\n**Want to work smarter and faster?**\nCheck out my book `Boost Your Django DX <https://adamchainz.gumroad.com/l/byddx>`__ which covers django-read-only, IPython, and many other tools.\n\n----\n\nInstallation\n------------\n\nInstall with **pip**:\n\n.. code-block:: sh\n\n    python -m pip install django-read-only\n\nThen add to your installed apps:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        ...,\n        \"django_read_only\",\n        ...,\n    ]\n\nUsage\n-----\n\nIn your settings file, set ``DJANGO_READ_ONLY`` to ``True`` and all data modification queries will cause an exception:\n\n.. code-block:: console\n\n    $ DJANGO_READ_ONLY=1 python manage.py shell\n    ...\n    >>> User.objects.create_user(username=\"hacker\", password=\"hunter2\")\n    ...\n    DjangoReadOnlyError(...)\n\nFor convenience, you can also control this with the ``DJANGO_READ_ONLY`` environment variable, which will count as ``True`` if set to anything but the empty string.\nThe setting takes precedence over the environment variable.\n\nDuring a session with ``DJANGO_READ_ONLY`` set on, you can re-enable writes by calling ``enable_writes()``:\n\n.. code-block:: pycon\n\n    >>> import django_read_only\n    >>> django_read_only.enable_writes()\n\nWrites can be disabled with ``disable_writes()``:\n\n.. code-block:: pycon\n\n    >>> django_read_only.disable_writes()\n\nTo temporarily allow writes, use the ``temp_writes()`` context manager / decorator:\n\n.. code-block:: pycon\n\n    >>> with django_read_only.temp_writes():\n    ...     User.objects.create_user(...)\n    ...\n\nNote that writes being enabled/disabled is global state, affecting all threads and asynchronous coroutines.\n\nRecommended Setup\n-----------------\n\nSet read-only mode on in your production environment, and maybe staging, during interactive sessions.\nThis can be done by setting the ``DJANGO_READ_ONLY`` environment variable in the shell profile file (``bashrc``, ``zshrc``, etc.) of the system’s user account.\nThis way developers performing exploratory queries can’t accidentally make changes, but writes will remain enabled for non-shell processes like your WSGI server.\n\nWith this setup, developers can also run management commands with writes enabled by setting the environment variable before the command:\n\n.. code-block:: console\n\n    $ DJANGO_READ_ONLY= python manage.py clearsessions\n\nSome deployment platforms don’t allow you to customize your shell profile files.\nIn this case, you will need to find a way to detect shell mode from within your settings file.\n\nFor example, on Heroku there’s the ``DYNO`` environment variable (`docs <https://devcenter.heroku.com/articles/dynos#local-environment-variables>`__) to identify the current virtual machine.\nIt starts with “run.” for interactive sessions.\nYou can use this to enable read-only mode in your settings file like so:\n\n.. code-block:: python\n\n    if os.environ.get(\"DYNO\", \"\").startswith(\"run.\"):\n        DJANGO_READ_ONLY = bool(os.environ.get(\"DJANGO_READ_ONLY\", \"1\"))\n    else:\n        DJANGO_READ_ONLY = False\n\nIPython Extension\n-----------------\n\ndjango-read-only also works as an IPython extension for quick access to enable/disable read-only mode.\nLoad it with:\n\n.. code-block:: ipython\n\n    In [1]: %load_ext django_read_only\n\nYou can have the extension always load by setting it up to your `IPython configuration file <https://ipython.readthedocs.io/en/stable/config/intro.html>`__:\n\n.. code-block:: python\n\n    c.InteractiveShellApp.extensions.append(\"django_read_only\")\n\nWhen loaded, use the ``%read_only`` line magic to disable or enable read-only mode:\n\n.. code-block:: ipython\n\n    In [2]: %read_only off\n    Write queries enabled.\n\n    In [3]: %read_only on\n    Write queries disabled.\n\nThis reduces the amount of typing needed to disable read-only mode.\n\nHow it Works\n------------\n\nThe most accurate way to prevent writes is to connect as a separate database user with only read permission.\nHowever, this has limitations - Django doesn’t support modifying the ``DATABASES`` setting live, so sessions would not be able to temporarily allow writes.\n\nInstead, django-read-only uses `always installed database instrumentation <https://adamj.eu/tech/2020/07/23/how-to-make-always-installed-django-database-instrumentation/>`__ to inspect executed queries and only allow those which look like reads.\nIt uses a “fail closed” philosophy, so anything unknown will fail, which should be fairly reasonable.\n\nBecause django-read-only uses Django database instrumentation, it cannot block queries running through the underlying database connection (accesses through ``django.db.connection.connection``), and it cannot filter operations within stored procedures (which use ``connection.callproc()``).\nThese are very rare in practice though, so django-read-only’s method works well for most projects.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-read-only",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-read-only",
    "package_url": "https://pypi.org/project/django-read-only/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-read-only/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-read-only/blob/main/HISTORY.rst",
      "Homepage": "https://github.com/adamchainz/django-read-only",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/django-read-only/1.11.0/",
    "requires_dist": [
      "Django (>=3.2)"
    ],
    "requires_python": ">=3.7",
    "summary": "Disable Django database writes.",
    "version": "1.11.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024243,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b435b93a28cd626059471a7ee0acbd5ab1378d4c2b2935d17cd57d0801ef2add",
        "md5": "34dbfbbeb6b21728e6f7aa48ed774097",
        "sha256": "ea7768a25c07a53f0a2a6ff5ac764f5473f3984d8162f3adb4940543a1d1f116"
      },
      "downloads": -1,
      "filename": "django_read_only-1.11.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "34dbfbbeb6b21728e6f7aa48ed774097",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6497,
      "upload_time": "2022-10-05T08:41:44",
      "upload_time_iso_8601": "2022-10-05T08:41:44.233330Z",
      "url": "https://files.pythonhosted.org/packages/b4/35/b93a28cd626059471a7ee0acbd5ab1378d4c2b2935d17cd57d0801ef2add/django_read_only-1.11.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f51b3f9edeb64a58c3371feb9f7a97f85f8e1f26b4f7124966b0728380861c01",
        "md5": "bd8b202f36c61682907c1a1f110dc971",
        "sha256": "1a47a9b72ef84271e503f10dfee936c4eb3f297cf3b56de37ea9ff96cd002eda"
      },
      "downloads": -1,
      "filename": "django-read-only-1.11.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bd8b202f36c61682907c1a1f110dc971",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7485,
      "upload_time": "2022-10-05T08:41:45",
      "upload_time_iso_8601": "2022-10-05T08:41:45.973830Z",
      "url": "https://files.pythonhosted.org/packages/f5/1b/3f9edeb64a58c3371feb9f7a97f85f8e1f26b4f7124966b0728380861c01/django-read-only-1.11.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}