{
  "info": {
    "author": "OpenStack",
    "author_email": "openstack-discuss@lists.openstack.org",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: OpenStack",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "microversion_parse\n==================\n\nA small set of functions to manage OpenStack `microversion`_ headers that can\nbe used in middleware, application handlers and decorators to effectively\nmanage microversions.\n\nAlso included, in the ``middleware`` module, is a ``MicroversionMiddleware``\nthat will process incoming microversion headers.\n\nget_version\n-----------\n\nA simple parser for OpenStack microversion headers::\n\n    import microversion_parse\n\n    # headers is a dict of headers with folded (comma-separated\n    # values) or a list of header, value tuples\n    version = microversion_parse.get_version(\n        headers, service_type='compute',\n        legacy_headers=['x-openstack-nova-api-version'])\n\n    # If headers are not already available, a dict of headers\n    # can be extracted from the WSGI environ\n    headers = microversion_parse.headers_from_wsgi_environ(environ)\n    version = microversion_parse.get_version(\n        headers, service_type='placement')\n\nIt processes microversion headers with the standard form::\n\n    OpenStack-API-Version: compute 2.1\n\nIn that case, the response will be '2.1'.\n\nIf provided with a ``legacy_headers`` argument, this is treated as\na list of additional headers to check for microversions. Some examples of\nheaders include::\n\n    OpenStack-telemetry-api-version: 2.1\n    OpenStack-nova-api-version: 2.1\n    X-OpenStack-nova-api-version: 2.1\n\nIf a version string cannot be found, ``None`` will be returned. If\nthe input is incorrect usual Python exceptions (ValueError,\nTypeError) are allowed to raise to the caller.\n\nparse_version_string\n--------------------\n\nA function to turn a version string into a ``Version``, a comparable\n``namedtuple``::\n\n    version_tuple = microversion_parse.parse_version_string('2.1')\n\nIf the provided string is not a valid microversion string, ``TypeError``\nis raised.\n\nextract_version\n---------------\n\nCombines ``get_version`` and ``parse_version_string`` to find and validate\na microversion for a given service type in a collection of headers::\n\n    version_tuple = microversion_parse.extract_version(\n        headers,  # a representation of headers, as accepted by get_version\n        service_type,  # service type identify to match in headers\n        versions_list,  # an ordered list of strings of version numbers that\n                        # are the valid versions presented by this service\n    )\n\n``latest`` will be translated to whatever the max version is in versions_list.\n\nIf the found version is not in versions_list a ``ValueError`` is raised.\n\nNote that ``extract_version`` does not support ``legacy_headers``.\n\nMicroversionMiddleware\n----------------------\n\nA WSGI middleware that can wrap an application that needs to be microversion\naware. The application will get a WSGI environ with a\n'SERVICE_TYPE.microversion' key that has a value of the microversion found at\nan 'openstack-api-version' header that matches SERVICE_TYPE.  If no header is\nfound, the minimum microversion will be set. If the special keyword 'latest' is\nused, the maximum microversion will be set.\n\nIf the requested microversion is not available a 406 response is returned.\n\nIf there is an error parsing a provided header, a 400 response is returned.\n\nOtherwise the application is called.\n\nThe middleware is configured when it is created. Three parameters are required:\n\napp\n  The next WSGI middleware or application in the stack.\n\nservice_type\n  The service type of the application, used to identify microversion headers.\n\nversions_list\n  An ordered list of legitimate microversions (as strings) for the application.\n  It's assumed that any application that is using microversions will have such\n  a list for its own housekeeping and documentation.\n\nOne named parameter is optional:\n\njson_error_formatter\n  A Webob error formatter that can be used to structure the response when JSON\n  is expected.\n\nFor example::\n\n    def app():\n        app = middleware.MicroversionMiddleware(\n            MyWSGIApp(), 'cats', ['1.0', '1.1', '1.2'])\n        return app\n\n\n.. _microversion: http://specs.openstack.org/openstack/api-wg/guidelines/microversion_specification.html\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.openstack.org/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microversion-parse",
    "package_url": "https://pypi.org/project/microversion-parse/",
    "platform": "",
    "project_url": "https://pypi.org/project/microversion-parse/",
    "project_urls": {
      "Homepage": "http://www.openstack.org/"
    },
    "release_url": "https://pypi.org/project/microversion-parse/1.0.0/",
    "requires_dist": [
      "WebOb (>=1.2.3)"
    ],
    "requires_python": ">=3.6",
    "summary": "OpenStack microversion header parser",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6968231,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a234853321b8b792c2aa8862238ee9227bd31ee46c59030caacd418dd899f4e2",
        "md5": "c415a34720c51cda2959e02af3baef30",
        "sha256": "1e871a2ed17d44bbd33a0ea1a46aef64ef6fd872b873a08a6d92d81115f1a17d"
      },
      "downloads": -1,
      "filename": "microversion_parse-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c415a34720c51cda2959e02af3baef30",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19459,
      "upload_time": "2020-02-05T21:12:18",
      "upload_time_iso_8601": "2020-02-05T21:12:18.380607Z",
      "url": "https://files.pythonhosted.org/packages/a2/34/853321b8b792c2aa8862238ee9227bd31ee46c59030caacd418dd899f4e2/microversion_parse-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc43f19cf3a0206d3f345640e6155f593066aa45f75327fc381848ac1d720224",
        "md5": "cc56f60c1831384303615a2a90f41ee6",
        "sha256": "c04ee36f14b9eea21134909f46b1d482216991a8ba6f5325941fd40a71784d93"
      },
      "downloads": -1,
      "filename": "microversion_parse-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cc56f60c1831384303615a2a90f41ee6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19063,
      "upload_time": "2020-02-05T21:12:21",
      "upload_time_iso_8601": "2020-02-05T21:12:21.982657Z",
      "url": "https://files.pythonhosted.org/packages/fc/43/f19cf3a0206d3f345640e6155f593066aa45f75327fc381848ac1d720224/microversion_parse-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}