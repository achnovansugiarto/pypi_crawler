{
  "info": {
    "author": "David Downes",
    "author_email": "david@downes.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "==============\nDjango Thumber\n==============\n\nDepartment of International Trade Django Thumber.  A Django app to solicit user feedback on various views/pages via a\nsimple widget.\n\nIncludes it's own Javascript to handle showing/hiding parts of the form, and performing AJAX requests to the server,\nbut also works when Javascript is disabled/unavailable in the client browser.\n\nThe user interaction is kept to a minimum, but captured as part of the feedback includes metadata about the user's\nsession, the timestamp of the feedback, the name of view that the feedback was given about, and the full url of the\npage.\n\nRequirements\n------------\n\n* Python >= 3.4\n* Django >= 1.9\n* jQuery >= 1.7\n\n\n===========\nQuick start\n===========\n\n#. Install the package::\n\n    $ pip install django-thumber\n\n#. Add \"thumber\" to your INSTALLED_APPS setting::\n\n    INSTALLED_APPS = [\n        ...\n        'thumber',\n    ]\n\n#. Run ``python manage.py migrate`` to create the thumber models.\n\n#. Run ``python manage.py collectstatic`` to pull in the static files for thumber.\n\n#. Ensure your base template (or other template that the view extends) defines an 'extra_js' block, which is *after* \n   the inclusion of jQuery::\n\n    <script src=\"https://code.jquery.com/jquery-x.y.z.min.js></script>\n    ...\n    {% block extra_js %}{% endblock %}\n    ...\n\n#. Mark your class-based view with the decorator provided by thumber::\n\n    from thumber import thumber_feedback\n\n    @thumber_feedback\n    class MyView(...):\n        ...\n\n#. Ensure the template for your view (or another template that the view extends) defines a 'thumber_feedback' block\n   where you want the widget to appear on the page::\n\n    {% block thumber_feedback %}{% endblock %}\n\n\n================\nGetting Data Out\n================\n\nA default ModelAdmin is registered for you in the admin interface, so you can see the data that it produces easily.  But you can create your own ModelAdmin if you prefer to specify more precisely how you want it to work.  Something like::\n\n    from django.contrib import admin\n    from thumber.models import Feedback\n\n    @admin.register(Feedback)\n    class FeedbackAdmin(admin.ModelAdmin):\n        list_display = ['view_name', 'comment']\n        ordering = ['created']\n\nPLEASE NOTE - If you install the thumber app before the app where you attempt to register the Feedback model to the admin site, you will need to `unregister` it first::\n\n    admin.site.unregister(Feedback)\n    admin.site.register(Feedback, FeedbackAdmin)\n\nIf you install the thumber app after your app, then the thumber will only attempt to register the Feedback model, if it is not already registered.\n\nAnd of course you can always just inspect the models directly in code or the django shell::\n\n    from thumber.models import Feedback\n    Feedback.objects.all()\n    ...\n\nThere is one simple shortcut which is a common use case, to see the average feedback for each view in your applcation.\nTo get aggregate data for every view, there is a shortcut on the model manager of the ContentFeedbcak model::\n\n    from thumber.models import Feedback\n    Feedback.objects.average_for_views()\n    [ ... ]\n\nOr it can be performed on queryset too, meaning you can prefilter (e.g. to date ranges) before aggregating::\n\n    from datetime import datetime, timedelta\n    from thumber.models import Feedback\n\n    # Get data only for the past week\n    Feedback.objects.filter(created__gt=datetime.now() - timedelta(days=7)).average_for_views()\n    [ ... ]\n\n=====================\nFurther configuration\n=====================\n\nYou can add properties to you view class to modify various properties of the widget, shown below are the default values,\njust set the replacements as needed on your view class::\n\n    @thumber_feedback\n    class MyView(...):\n        satisfied_wording = \"Was this service useful?\"  # The initial question presented to the user\n        yes_wording = \"Yes, thanks\"                     # The positive radio option wording\n        no_wording = \"Not really\"                       # The negative radio option wording\n        comment_wording = \"\"                            # The label wording for the comment textarea\n        comment_placeholder = \"Please tell us why?\"     # The placeholder text for the comment textares\n        submit_wording = \"Send my feedback\"             # The text on the submit button\n        thanks_message = \"Thank you for your feedback\"  # The success/thank you message wording\n        error_message = \"Sorry, something went wrong\"   # The failure message\n        first_option_yes = True                         # Whether \"Yes, thanks\" appears as the first radio option\n\nAny of the above properties can also be added as methods with the prefix ``get_``, and such methods will take preference over\na variable::\n\n    @thumber_feedback\n    class MyView(...):\n\n        def get_satisfied_wording(self):\n            return \"Did you find this page about {0} useful?\".format(self.page_description)\n\n\nYou can hook into the success and error processing of the thumber to perform custom actions when sending feedback.  To\ndo so, after the ``extra_js`` block in your template, there will be a ``thumber`` Javascript variable available.  You\ncan set custom handlers like so::\n\n    thumber.setSuccessHandler(alert('Yay!'));\n    thumber.setErrorHandler(alert('Boo!'));\n\nYou can override the template used to render the widget, by creating your own template.  This must be named\nfeedback.html, and be in a 'thumber' directory within your templates.\n\nFurther, the template can be overridden on a project, app, or view level, based upon where the template is located.  In\norder of preference, thumber will look for templates in the following locations::\n\n    thumber/YOUR_APP/YOUR_VIEW_NAME/feedback.html  # Override for the specific YOUR_VIEW_NAME view\n    thumber/YOUR_APP/feedback.html                 # Override for all views in YOUR_APP\n    thumber/feedback.html                          # Override for all views in all apps of your project\n\nSome guidance on how to write a custom feedback.html template is below\n\nOverriding in feedback.html\n---------------------------\n\nIf you create a custom feedback.html template you have a number of blocks you can override, some give more flexibility,\nbut come with extra reponsibility to ensure you perform certain work yourself.\n\nBlocks to override, and some simlpe guidance for each are as follows:\n\n* ``thumber_form_class``\n    * Add addtional class/classes to the thumber form\n* ``before_thumber_form`` and ``after_thumber_form``\n    * The blocks are directly either side of the <form></form> tags\n    * Use to wrap the form with html if necesssary\n* ``thumber_form_widgets``\n    * This replaces just the widgets inside the form, including the submit button, these must be replaced\n    * A variable of ``thumber_form`` is available which you can use to render the controls\n    * If you do not use the thumber_form, the minimum needed data in the post is:\n        * satisfied, as a radio button with values \"True\" or \"False\"\n        * comment, as textarea\n        * thumber_token (hidden input), as \"sync\" for non-Javascript posts, or \"ajax\" for Javascript posts\n        * All inputs require an id\n    * The form tag, including csrf token are handled, and do not need including\n* ``thumber_form``\n    * This replaces the entire form, so it will need redefining\n    * The form **must** have a 'thumber-form' class for the ajax code to work\n    * The form's action must be the url of the view that is decorated with @thumber_view\n\n\n============\nContributing\n============\n\nContributions are welcome. Please follow the guidelines below to make life easier:\n\n* Fork the repo, branch off release, make changes, then make a pull request (PR) to release on the main repo\n* Include tests for bug fixes or new features\n* Include documentation for any new features\n* Please limit changes for a PR to a single feature, or a single bugfix\n    * Make multiple PRs for multiple discrete changes\n* Please squash commits - ideally a single commit, but at least to a sensible minimum\n    * If a PR reasonably should have multiple commits, consider if it should *actually* be separate PRs\n\n\n=======\nLicense\n=======\n\nMIT licensed. See the bundled `LICENSE <https://github.com/uktrade/dit-thumber/blob/master/LICENSE>`_ file for more\ndetails.\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/uktrade/dit-thumber",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-thumber",
    "package_url": "https://pypi.org/project/django-thumber/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-thumber/",
    "project_urls": {
      "Homepage": "https://github.com/uktrade/dit-thumber"
    },
    "release_url": "https://pypi.org/project/django-thumber/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django app to solicit user feedback on various views/pages via a simple widget.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9853702,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67d01f99adf5a2db97be21030c452181a936cb6fcc6f582b263e6943e640d12d",
        "md5": "db190aa6bc870f02457cd5af8490c947",
        "sha256": "3bc5c4f69d68dd76de1b1b27fb2e1137824c1fb918c4a285843fd31cfa91a6d2"
      },
      "downloads": -1,
      "filename": "django_thumber-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "db190aa6bc870f02457cd5af8490c947",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28034,
      "upload_time": "2017-08-29T09:27:45",
      "upload_time_iso_8601": "2017-08-29T09:27:45.285266Z",
      "url": "https://files.pythonhosted.org/packages/67/d0/1f99adf5a2db97be21030c452181a936cb6fcc6f582b263e6943e640d12d/django_thumber-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}