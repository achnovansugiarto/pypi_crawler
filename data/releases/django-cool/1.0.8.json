{
  "info": {
    "author": "007",
    "author_email": "007@django.cool",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "###########\nDjango Cool\n###########\n\n.. image:: https://img.shields.io/pypi/v/django-cool.svg\n       :target: https://pypi.org/project/django-cool\n\nDjango 框架快速使用扩展库\n\n`【阅读文档】 <https://docs.django.cool>`_。\n\n本项目在以下代码托管网站同步更新:\n\n+ 码云：https://gitee.com/007gzs/django-cool\n+ GitHub：https://github.com/007gzs/django-cool\n\n安装与升级\n==========\n\n目前 Django Cool 支持的 Python 环境有 3.6, 3.7, 3.8\n支持 Django 版本 2.2, 3.0, 3.1\n\n为了简化安装过程，推荐使用 pip 进行安装\n\n.. code-block:: bash\n\n    pip install django-cool\n\n升级 Django Cool 到新版本::\n\n    pip install -U django-cool\n\n如果需要安装 GitHub 上的最新代码::\n\n    pip install https://github.com/007gzs/django-cool/archive/master.zip\n\n\n如果需要展示html接口文档需要安装markdown依赖::\n\n    pip install markdown\n\n如果使用websocket功能需要安装channels依赖::\n\n    pip install channels>=2.4\n\n开始使用\n====================================\n\n`settings.py` 配置\n--------------------\n\n在 `INSTALLED_APPS` 中添加 `cool`\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'cool',\n    )\n\n在 `settings.py` 中设置 `DJANGO_COOL`\n\n.. code-block:: python\n\n    DJANGO_COOL = {\n        'API_ERROR_CODES': (\n            ('ERR_DEMO_NOLOGIN', (10001, '请先登陆')),\n            ('ERR_DEMO_NOTFOUND', (10002, '用户名密码错误')),\n            ('ERR_DEMO_PERMISSION', (10003, '权限错误')),\n            ('ERR_DEMO_DUPLICATE_USERNAME', (10011, '用户名已存在')),\n            ('ERR_DEMO_DUPLICATE_MOBILE', (10012, '手机号已存在')),\n        )\n    }\n\n\nmodels扩展\n--------------------\n\n自定义 `Model` 继承 `BaseModel` 可使用扩展功能：\n\n+ 支持字段变更监控记录\n    - 通过 `save_changed()` 保存已修改字段\n\n+ 主键唯一键缓存\n    - 缓存获取： `get_obj_by_pk_from_cache()` `get_obj_by_unique_key_from_cache()`\n    - 删除缓存： `flush_cache_by_pk()` `flush_cache_by_unique_key()` `flush_cache()`\n\n+ 搜索字段自动生成\n    - `get_search_fields()` 自动生成搜索字段，默认返回所有设置索引的char和int类型字段\n\n后台管理扩展\n--------------------\n\n`BaseModelAdmin` 提供扩展功能：\n\n+ 默认列出所有基础字段\n+ 增加相关项列，通过外键快速跳转\n+ 增、删、改权限统一控制\n+ 提交保存时，检查数据是否被修改\n\n使用 `admin_register()` 装饰器可以快速将 `Model` 注册到后台管理\n\n.. code-block:: python\n\n    @admin_register\n    class Module(BaseModel):\n        name = models.CharField('module name', max_length=255)\n        code = models.CharField('module code', max_length=100, unique=True)\n\n\n    @admin_register(\n        list_display=['module', 'name'],\n        list_filter=['module', ],\n        change_view_readonly_fields=['code', ],\n        list_editable=['name', 'module']\n    )\n    class Permission(BaseModel):\n        name = models.CharField('permission name', max_length=255)\n        code = models.CharField('permission code', max_length=100)\n        module = model.ForeignKey(\n            Module, verbose_name='module', to_field='code', db_column='module_code', on_delete=models.PROTECT\n        )\n\napi接口扩展\n--------------------\n\n+ `CoolBFFAPIView` 可方便创建 ``application/x-www-form-urlencoded`` / ``multipart/form-data`` 方式的接口。\n+ `Meta` 类中配置参数列表 `param_fields` 后可以自动生成接口文档，自动做参数验证\n+ 使用 `ViewSite` 快速注册接口生成 `urlpatterns`\n\n使用样例：\n\n`views.py`:\n\n.. code-block:: python\n\n    from cool.views import ViewSite, CoolBFFAPIView, ErrorCode, CoolAPIException\n    from django.contrib.auth import authenticate, login\n    from django.db import IntegrityError\n    from django.db.models import Q\n    from rest_framework import fields\n\n    from . import serializer, constants\n\n    site = ViewSite(name='demo', app_name='demo')\n\n\n    @site\n    class UserRegister(CoolBFFAPIView):\n\n        name = '用户注册'\n        response_info_serializer_class = serializer.UserSerializer\n\n        def get_context(self, request, *args, **kwargs):\n            user = models.User.objects.filter(\n                Q(username=request.params.username) | Q(mobile=request.params.mobile)\n            ).first()\n            if user is not None:\n                if user.username == request.params.username:\n                    raise CoolAPIException(ErrorCode.ERR_DEMO_DUPLICATE_USERNAME)\n                elif user.mobile == request.params.mobile:\n                    raise CoolAPIException(ErrorCode.ERR_DEMO_DUPLICATE_MOBILE)\n            user = models.User()\n            user.username = request.params.username\n            user.mobile = request.params.mobile\n            user.nickname = request.params.nickname\n            user.name = request.params.name\n            user.avatar = request.params.avatar\n            user.gender = request.params.gender\n            user.set_password(request.params.password)\n            try:\n                user.save(force_insert=True)\n            except IntegrityError as exc:\n                if exc.args[0] == 1062:\n                    if exc.args[1].find('username') >= 0:\n                        exc = CoolAPIException(ErrorCode.ERR_DEMO_DUPLICATE_USERNAME)\n                    elif exc.args[1].find('mobile') >= 0:\n                        exc = CoolAPIException(ErrorCode.ERR_DEMO_DUPLICATE_MOBILE)\n                raise exc\n            user = authenticate(self, base_username=request.params.username, base_password=request.params.password)\n            if user is None:\n                raise CoolAPIException(ErrorCode.ERR_DEMO_NOTFOUND)\n            login(request, user)\n            return serializer.UserSerializer(user, request=request).data\n\n        class Meta:\n            param_fields = (\n                ('username', fields.CharField(label='登陆名', max_length=64, help_text='字段说明，会显示在接口文档中')),\n                ('password', fields.CharField(label='密码'),\n                ('gender', fields.ChoiceField(label='性别', choices=constants.Gender.get_choices_list())),\n                ('mobile', fields.RegexField(r'1\\d{10}', label='手机号')),\n                ('nickname', fields.CharField(label='昵称', max_length=255)),\n                ('name', fields.CharField(label='姓名', default='', max_length=255)),\n                ('avatar', fields.ImageField(label='头像', default=None)),\n            )\n\n\n    urls = site.urls\n    urlpatterns = site.urlpatterns\n\n\n`urls.py`:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from django.urls import path, include\n    from cool.views import get_api_doc_html\n\n\n    api_patterns = [\n        path('demo/', include('example.apps.demo.views')),\n    ]\n    urlpatterns = [\n        path('cool/', include('cool.urls')),\n        path('admin/', admin.site.urls),\n        path('api/', include(api_patterns)),\n        path('api_doc.html', get_api_doc_html)\n    ]\n\n示例项目\n========\n\n`demo项目 <https://github.com/007gzs/django-cool-example/>`_\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://django.cool",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cool",
    "package_url": "https://pypi.org/project/django-cool/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cool/",
    "project_urls": {
      "Documentation": "https://docs.django.cool/",
      "Homepage": "https://django.cool",
      "Source": "https://github.com/007gzs/django-cool"
    },
    "release_url": "https://pypi.org/project/django-cool/1.0.8/",
    "requires_dist": [
      "Django (>=2.2)",
      "djangorestframework"
    ],
    "requires_python": ">=3.6",
    "summary": "Cool to use for the Django Framework.",
    "version": "1.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15941979,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "293290f208f171175f5f92c09379c54b90eec0c4009819bb881f34e8c3ebb06b",
        "md5": "d85a471cba5aa331f05717a8bab45a97",
        "sha256": "bf833c21453d8caacd1daee6f8b00bfd667338ead44a2ff89f1d6a6057443a61"
      },
      "downloads": -1,
      "filename": "django_cool-1.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d85a471cba5aa331f05717a8bab45a97",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 212721,
      "upload_time": "2020-11-25T01:58:19",
      "upload_time_iso_8601": "2020-11-25T01:58:19.950957Z",
      "url": "https://files.pythonhosted.org/packages/29/32/90f208f171175f5f92c09379c54b90eec0c4009819bb881f34e8c3ebb06b/django_cool-1.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edf0fbc7c5d1109b32402abb6634695e49bb00f1d8a01fa839ea0c53b5311c90",
        "md5": "7f7e040f189f16770ec027682f302de9",
        "sha256": "2ee0589aff67b6ea377f67996af929678288471544386cbae971a58bb8f5d432"
      },
      "downloads": -1,
      "filename": "django-cool-1.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "7f7e040f189f16770ec027682f302de9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 70066,
      "upload_time": "2020-11-25T01:58:21",
      "upload_time_iso_8601": "2020-11-25T01:58:21.326327Z",
      "url": "https://files.pythonhosted.org/packages/ed/f0/fbc7c5d1109b32402abb6634695e49bb00f1d8a01fa839ea0c53b5311c90/django-cool-1.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}