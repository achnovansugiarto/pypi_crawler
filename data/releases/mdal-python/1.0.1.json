{
  "info": {
    "author": "Paul Harwood",
    "author_email": "runette@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "================================================================================\nMDAL Python Integration\n================================================================================\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/mdal-python.svg\n   :target: https://anaconda.org/conda-forge/mdal-python\n\nBasics\n------\n\nMDAL Python integration allows you to access and manipulation geospatial mesh data sets using `MDAL`_ in Python.\n\nCurrently, this integration can:\n\n- read and write all MDAL compatible file formats\n- access vertex, face, edge and volume data as numpy arrays\n- write vertex, face, edge and volume data from numpy arrays\n- access and write scalar and vector datasets\n- beta level read and write integration with `meshio`_\n- beta level read integration with `Open3D`_\n\n\n.. _MDAL: https://www.mdal.xyz/\n.. _meshio: https://github.com/nschloe/meshio\n.. _Open3D: http://www.open3d.org/\n\nDrivers\n.......\n\n['2DM Mesh File', 'XMS Tin Mesh File', 'Selafin File', 'Esri TIN', 'Stanford PLY Ascii Mesh File', 'Flo2D', 'HEC-RAS 2D', 'TUFLOW FV', 'AnuGA', 'UGRID Results', 'GDAL NetCDF', 'GDAL Grib', 'DAT', 'Binary DAT', 'TUFLOW XMDF', 'XDMF']\n\nInstallation\n------------\n\nConda\n................................................................................\n\nMDAL Python support is installable via Conda:\n\n.. code-block::\n\n    conda install -c conda-forge mdal-python\n\nPyPI\n...............................................................................\n\nMDAL Python support can be installed using `pip`\n\n.. code-block::\n\n   pip install mdal-python\n   \nThis will ONLY work if there is a valid and working installation of MDAL on the device and accessible through the device library search path.\n\nGitHub\n................................................................................\n\nThe repository for MDAL's Python extension is available at https://github.com/ViRGIS-Team/mdal-python\n\nUsage\n--------------------------------------------------------------------------------\n\nThe basic usage can be seen in this code snippet:\n\n.. code-block:: python\n\n\n    from mdal import Datasource, Info, last_status, PyMesh, drivers, MDAL_DataLocation\n\n    print(f\"MDAL Version:  {Info.version}\")\n    print(f\"MDAL Driver Count :{Info.driver_count}\")\n    print(last_status().name)\n\n    for driver in Info.drivers:\n        print(driver)\n\n\n    ds = Datasource(\"data/ply/test_mesh.ply\")\n    print(ds.meshes)\n\n    with ds.load(0) as mesh:\n        print(f\"Driver : {mesh.driver_name}\")\n        print(f\"Format : {mesh.get_metadata('format')}\")\n        print(f\"Vertex Count : {mesh.vertex_count}\")\n        print(f\"Face Count : {mesh.face_count}\")\n        print(f\"Largest Face: {mesh.largest_face}\")\n        print(f\"Edge Count : {mesh.edge_count}\")\n        print(f\"CRS : {mesh.projection}\")\n        print(f\"Mesh extent : {mesh.extent}\")\n        print(f\"Metadata : {mesh.metadata}\")\n        print(f\"CRS Metadata : {mesh.get_metadata('crs')}\")\n        mesh.add_metadata(\"test\", \"value\")\n        print(f\"Metadate set eqiuality : {mesh.get_metadata('test') == 'value'}\")\n\n        vertex = mesh.vertices\n        print(f\"Vertex Array Shape : {vertex.shape}\")\n\n        faces = mesh.faces\n        print(f\"Face Array Shape : {faces.shape}\")\n\n        edges = mesh.edges\n        print(f\"Edges Array Shape : {edges.shape}\")\n\n        print(\"\")\n\n        group = mesh.group(0)\n        print(f\"DatasetGroup Name : {group.name}\")\n        print(f\"DatasetGroup Location : {group.location.name}\")\n        print(f\"Dataset Count : {group.dataset_count}\")\n        print(f\"Group has scalar values : {group.has_scalar}\")\n        print(f\"Group has temporal values : {group.is_temporal}\")\n        print(f\"Reference Time : {group.reference_time}\")\n        print(f\"Maximum Vertical Level Count : {group.level_count}\")\n        print(f\"Minimum / Maximum ; {group.minmax}\")\n        print(f\"Metadata : {group.metadata}\")\n        print(f\"Name Metadata : {group.get_metadata('name')}\")\n        group.add_metadata(\"test\", \"value\")\n        print(\n            f\"Metadate set eqiuality : {group.get_metadata('test') == 'value'}\")\n\n        print(\"\")\n        for i in range(0, group.dataset_count):\n            data = group.data(i)\n            time = group.dataset_time(i)\n            print(f\"Dataset Shape for time {time} : {data.shape}\")\n\n        print(\"\")\n\n        test = PyMesh()\n        test.vertices = mesh.vertices\n        test.faces = mesh.faces\n        test.edges = mesh.edges\n        print(f\"Mesh Copy Equality : {test == mesh}\")\n        print(\n            f\"Mesh Vertex Size equality: {test.vertex_count == mesh.vertex_count}\")\n        print(f\"Mesh Face Size equality: {test.face_count == mesh.face_count}\")\n        test.save(\"data/save_test.nc\")\n\n        test2 = PyMesh(drivers()[0])\n        print(f\"Mesh created by Driver : {test2.driver_name}\")\n\n        ds2 = Datasource(\"data/save_test.nc\")\n        test4 = ds2.load(0)\n        print(f\"Save equality : {test4 == test}\")\n\n        del(test)\n        del(test4)\n        mesh.save(\"save_test.ply\")\n\n    with Datasource(\"data/ply/all_features.ply\").load(0) as mesh:\n        mesh.save(\"save_test_2.ply\")\n\n        with Datasource(\"save_test_2.ply\").load(0) as mesh2:\n            print(f\"Save equality 2 : {mesh == mesh2}\")\n\n    with Datasource(\"data/tuflowfv/withMaxes/trap_steady_05_3D.nc\").load() as mesh:\n        group = mesh.groups[1]\n        a, b, c = group.volumetric(0)\n\n        ds2 = Datasource(\"test_vol.ply\")\n        with ds2.add_mesh() as mesh2:\n            mesh2.vertices = mesh.vertices\n            mesh2.faces = mesh.faces\n\n            print(f\"Vertex Count :{mesh.vertex_count}\")\n            print(f\"Face Count : {mesh.face_count}\")\n\n            group2 = mesh2.add_group(\n                \"test\", location=MDAL_DataLocation.DataOnVolumes)\n            group2.add_volumetric(group.data(), a, b)\n\n            print(f\"Level Count: {group2.level_count}\")\n            print(f\"Location: {group2.location}\")\n            print(f\"MinMax: {group2.minmax}\")\n\n            print(f\"Dataset Count: {group2.dataset_count}\")\n\n            data = group2.data(0)\n            print(f\"Data Value Count: {len(data)}\")\n            print(f\"{data}\")\n\n            print(f\"{group2.volumetric(0)}\")\n\n            a, b, c = group2.volumetric(0)\n            print(f\"Number of Extrusion values : {len(b)}\")\n            mesh2.save()\n            with ds2.load() as mesh3:\n                mesh3.info()\n                group3 = mesh3.groups[1]\n                print(f\"{group3.location}\")\n                d, e, f = group3.volumetric(0)\n                print(f\"{group3.volumetric(0)}\")\n                print(f\"{group3.data(0)}\")\n                print(\"Mesh Equality : {mesh2 == mesh3}\")\n\n\n    \"\"\"deep copy test\"\"\"\n\n    with Datasource(\"data/ply/all_features.ply\").load() as mesh:\n        with ds.add_mesh(\"test\") as mesh2:\n            mesh2.deep_copy(mesh)\n            mesh2.data_copy(mesh)\n            print(f\"{mesh2.info()}\")\n\n\n    print(\"all finished !\")\n\n\nIntegration with meshio\n-----------------------\n\nThere is read and write integration with the meshio package. Any MDAL mesh\ncan be converted to a meshio object and vice versa.\n\nThis integration is beta at the moment.\n\nThere are the following constraints:\n\n- MDAL_transform.to_meshio can take as an argument either a Mesh or a Dataset Group,\n- Only scalar MDAL datasets can be converted to meshio,\n- Volumetric data must be passed as a Dataset Group,\n- Volumetric meshio meshes and data are not currently converted, and\n- MDAL_transform.from_meshio only converts cells of types [\"line\", \"triangle\", \"quad\"].\n\n.. code-block:: python\n\n    from mdal import Datasource,MDAL_transform\n\n    \"\"\"meshio tests\"\"\"\n    with Datasource(\"data/ply/all_features.ply\").load() as mesh:\n\n        mio = MDAL_transform.to_meshio(mesh)\n        print(f\"{mio}\")\n        mio.write(\"test.vtk\")\n\n        group = mesh.group(1)\n\n        mio2 = MDAL_transform.to_meshio(group)\n        print(f\"{mio2}\")\n        \n        mesh2 = MDAL_transform.from_meshio(mio)\n        print(f\"{mesh2.info()}\")\n        print(f\"{mesh2.group(0).data()}\")\n        print(f\"{mesh2.vertex_count}\")\n        print(f\"{mesh2.face_count}\")\n\n    with Datasource(\"test_vol.ply\").load() as mesh:\n        group = mesh.group(1)\n        mio2 = MDAL_transform.to_meshio(group)\n        print(f\"{mio2}\")\n\n\n    print(\"all finished !\")\n\nIntegration with Open3D\n-----------------------\n\nThere is read-only integration with Open3D.\n\nThe MDAL_transform.to_triangle_mesh function converts any MDAL mesh to an Open3D TriangleMesh. The function\ncan take as an argument an MDAL mesh or Dataset Group. In the former case \nif there are colour Datasets then these are converted to the TraingleMesh colours.\nIn the later case, the data is converted to a false colur using a simple process -\nscalar data is loaded into the red values and vector data to\nthe red and blue values.\n\nThe MDAL_transform.to_point_cloud converts a MDAL\nvolumetric DatasetGroup to an Open3D PointCloud with the data values\nconverted to color as above.\n\n.. note::\n    Open3D is NOT loaded as dependency. If these commands are used in an environment without Open3D, they will fail with a user friendly message.\n\nThis integration is beta at the moment.\n\n.. code-block:: python\n\n    from mdal import Datasource, MDAL_transform\n\n    import numpy as np\n    import open3d as o3d\n\n    \"\"\"\n    Open3d Tests\n    \"\"\"\n    with Datasource(\"data/ply/test_mesh.ply\").load() as mesh:\n        tm = MDAL_transform.to_triangle_mesh(mesh)\n        print(tm)\n        tm2 = o3d.io.read_triangle_mesh(\"data/ply/test_mesh.ply\")\n        tmc = np.asarray(tm.vertex_colors)\n        tmc2 = np.asarray(tm2.vertex_colors)\n        for i in range(len(tmc)):\n            value = tmc[i] - tmc2[i]\n            if not (value == [0, 0, 0]).all():\n                print(value)\n                break\n\n    with Datasource(\"test_vol.ply\").load() as mesh:\n        pc = MDAL_transform.to_point_cloud(mesh.group(1))\n        print(pc)\n\n\n    print(\"all finished !\")\n\n.. note::\n\n    About Python Versions. MDAL supports 3.8, 3.9 and 3.10. Open3D supports 3.6, 3.7 and 3.8. Therefore, \n    if you want to use Open3D, the Python version should be pinned to 3.8 before you start.\n\n\nDocumentation\n-------------\n\nThe documentation is currently WIP and can be found at https://virgis-team.github.io/mdal-python/html/index.html\n\n\nRequirements\n------------\n\n* MDAL 0.9.0 +\n* Python >=3.8\n* Cython (eg :code:`pip install cython`)\n* Numpy (eg :code:`pip install numpy`)\n* Packaging (eg :code:`pip install packaging`)\n* scikit-build (eg :code:`pip install scikit-build`)\n\n\nCredit\n------\n\nThis package borrowed heavily from the `PDAL-Python`_ package.\n\n.. _PDAL-Python:  https://github.com/PDAL/python\n\n\nChanges\n--------------------------------------------------------------------------------\n\n1.0.0\n-----\n\nFirst Read / Write Release\n\n- read and write all MDAL compatible file formats\n- access vertex, face, edge and volume data as numpy arrays\n- write vertex, face, edge and volume data from numpy arrays\n- access and write scalar and vector datasets\n- beta level read and write integration with meshio\n- beta level read integration with Open3D\n\n\n0.9.0\n-----\n\nFirst release. This is beta software and has not been completely tested yet:\n\nCurrently, this integration can:\n\n- read all MDAL compatible file formats,\n- access the metadata for the source,\n- access the vertex, face and edge data as numpy arrays,\n- access 'double' datasets (both scalar and vector) as numpy arrays, and\n- convert the MDAL source mesh into a `meshio`_ mesh object (with some restrictions currently).\n\nThis version does not currently allow the MDAL source mesh to be written or ammended.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.mdal.xyz",
    "keywords": "mesh data spatial",
    "license": "MIT",
    "maintainer": "Paul Harwood",
    "maintainer_email": "runette@gmail.com",
    "name": "mdal-python",
    "package_url": "https://pypi.org/project/mdal-python/",
    "platform": null,
    "project_url": "https://pypi.org/project/mdal-python/",
    "project_urls": {
      "Homepage": "https://www.mdal.xyz"
    },
    "release_url": "https://pypi.org/project/mdal-python/1.0.1/",
    "requires_dist": [
      "numpy",
      "meshio"
    ],
    "requires_python": "",
    "summary": "Mesh data processing",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15953567,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed7757ef102b9997217a96e805c4c317c21fbb5e441e5cb8ee8cf9edf5a8138b",
        "md5": "ba220cb4bd11fd15dce5691ae451d4aa",
        "sha256": "1e0f9951edc2174b547198855176de5c26058242ca3c21d29875c95e5b303004"
      },
      "downloads": -1,
      "filename": "mdal_python-1.0.1-cp310-cp310-macosx_12_0_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ba220cb4bd11fd15dce5691ae451d4aa",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 127230,
      "upload_time": "2022-12-01T10:38:22",
      "upload_time_iso_8601": "2022-12-01T10:38:22.905924Z",
      "url": "https://files.pythonhosted.org/packages/ed/77/57ef102b9997217a96e805c4c317c21fbb5e441e5cb8ee8cf9edf5a8138b/mdal_python-1.0.1-cp310-cp310-macosx_12_0_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c446fd6fa6a511ffaf8d20a23ba96f9fae989b1f3feaec2c0278d155b603f5c6",
        "md5": "59d6cf90ce36964046e5c0d030a74233",
        "sha256": "ae9b49353480d8202452a0fdb855e47f054ceced8a0f7254d6b218e9de1dc6a9"
      },
      "downloads": -1,
      "filename": "mdal_python-1.0.1-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "59d6cf90ce36964046e5c0d030a74233",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 102237,
      "upload_time": "2022-12-01T10:38:25",
      "upload_time_iso_8601": "2022-12-01T10:38:25.518105Z",
      "url": "https://files.pythonhosted.org/packages/c4/46/fd6fa6a511ffaf8d20a23ba96f9fae989b1f3feaec2c0278d155b603f5c6/mdal_python-1.0.1-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c509eee246462eaf851affd2c408f83107235aea2cf6595000be0123b48a08a",
        "md5": "d727f5797d2063b88518981a3aa8d41f",
        "sha256": "7e3f06650eb1f4a1bd68216aaf76e5a6c25d1bf0887671acb357da0a70bcdb9f"
      },
      "downloads": -1,
      "filename": "mdal_python-1.0.1-cp311-cp311-macosx_12_0_x86_64.whl",
      "has_sig": false,
      "md5_digest": "d727f5797d2063b88518981a3aa8d41f",
      "packagetype": "bdist_wheel",
      "python_version": "cp311",
      "requires_python": null,
      "size": 122753,
      "upload_time": "2022-12-01T10:38:27",
      "upload_time_iso_8601": "2022-12-01T10:38:27.323899Z",
      "url": "https://files.pythonhosted.org/packages/3c/50/9eee246462eaf851affd2c408f83107235aea2cf6595000be0123b48a08a/mdal_python-1.0.1-cp311-cp311-macosx_12_0_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e52e7f9f217eb470c250abf4de87b7b383156c75ab46c1ddaacbac711b10b77f",
        "md5": "1c4932c7e798fd6a53cb4883c0824087",
        "sha256": "5ad8b864b37baf61e39c898fc04516a92ad6a585057cab22e79975f325d1ca69"
      },
      "downloads": -1,
      "filename": "mdal_python-1.0.1-cp311-cp311-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "1c4932c7e798fd6a53cb4883c0824087",
      "packagetype": "bdist_wheel",
      "python_version": "cp311",
      "requires_python": null,
      "size": 101305,
      "upload_time": "2022-12-01T10:38:28",
      "upload_time_iso_8601": "2022-12-01T10:38:28.980546Z",
      "url": "https://files.pythonhosted.org/packages/e5/2e/7f9f217eb470c250abf4de87b7b383156c75ab46c1ddaacbac711b10b77f/mdal_python-1.0.1-cp311-cp311-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fe29bb03847885362ccbcc7b037b24e89d6f9a583c10119a077b93028dcc0ee",
        "md5": "1b0b9fa47c08c0d6878f3f1d27a5e2e6",
        "sha256": "b93e2c2c8e9bb4dc22c40b423f4a58c50fe711a224e4014f1727dabbf81a5a5d"
      },
      "downloads": -1,
      "filename": "mdal_python-1.0.1-cp38-cp38-macosx_10_16_x86_64.whl",
      "has_sig": false,
      "md5_digest": "1b0b9fa47c08c0d6878f3f1d27a5e2e6",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 128097,
      "upload_time": "2022-12-01T10:38:31",
      "upload_time_iso_8601": "2022-12-01T10:38:31.233353Z",
      "url": "https://files.pythonhosted.org/packages/6f/e2/9bb03847885362ccbcc7b037b24e89d6f9a583c10119a077b93028dcc0ee/mdal_python-1.0.1-cp38-cp38-macosx_10_16_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9fcd5ddbaac7724a7bbf6b202221398d22a3ac689e32d6181765258be289caf3",
        "md5": "de1a938baa5f0468060269efe54be271",
        "sha256": "ff60411b9a899cda787edb646c2c8449e3d51a64eed95b7c7498dd39a3df9591"
      },
      "downloads": -1,
      "filename": "mdal_python-1.0.1-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "de1a938baa5f0468060269efe54be271",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 103380,
      "upload_time": "2022-12-01T10:38:32",
      "upload_time_iso_8601": "2022-12-01T10:38:32.924350Z",
      "url": "https://files.pythonhosted.org/packages/9f/cd/5ddbaac7724a7bbf6b202221398d22a3ac689e32d6181765258be289caf3/mdal_python-1.0.1-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cd5d6faacb92d9c1f56a0a937d92e14e0db6e949c7fe92e44c81ae32895b585",
        "md5": "aea497cd6d67037fe815149214acf46c",
        "sha256": "d1e6685f1cd2ea2c6fe6cf92962e273cc042c531d372b958f1373895be9c3e81"
      },
      "downloads": -1,
      "filename": "mdal_python-1.0.1-cp39-cp39-macosx_12_0_x86_64.whl",
      "has_sig": false,
      "md5_digest": "aea497cd6d67037fe815149214acf46c",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 126359,
      "upload_time": "2022-12-01T10:38:34",
      "upload_time_iso_8601": "2022-12-01T10:38:34.534418Z",
      "url": "https://files.pythonhosted.org/packages/1c/d5/d6faacb92d9c1f56a0a937d92e14e0db6e949c7fe92e44c81ae32895b585/mdal_python-1.0.1-cp39-cp39-macosx_12_0_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20e7ae9767f5bbdc6c8e7bc6d03033576c1f76a194c758a54e31a6490fb48f17",
        "md5": "aa03632c3595e8a28a1afd50cd0a2396",
        "sha256": "199e4d19b464d411c0318225a83260368c6da9536e4bba9adf9dac7a02d01daf"
      },
      "downloads": -1,
      "filename": "mdal_python-1.0.1-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "aa03632c3595e8a28a1afd50cd0a2396",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 104049,
      "upload_time": "2022-12-01T10:38:36",
      "upload_time_iso_8601": "2022-12-01T10:38:36.846193Z",
      "url": "https://files.pythonhosted.org/packages/20/e7/ae9767f5bbdc6c8e7bc6d03033576c1f76a194c758a54e31a6490fb48f17/mdal_python-1.0.1-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5059cef6d08f778b2379f6b9b980ea1fefd7e162623b4f09e5e92ee11edb1c4e",
        "md5": "086c8bfe2f94e25884830fae2ab22b7a",
        "sha256": "3b776ecbf21114415210c84fc7ef39e0175b3a7c087207fc194925effcbe67dc"
      },
      "downloads": -1,
      "filename": "mdal-python-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "086c8bfe2f94e25884830fae2ab22b7a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 56135195,
      "upload_time": "2022-12-01T10:38:39",
      "upload_time_iso_8601": "2022-12-01T10:38:39.690188Z",
      "url": "https://files.pythonhosted.org/packages/50/59/cef6d08f778b2379f6b9b980ea1fefd7e162623b4f09e5e92ee11edb1c4e/mdal-python-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}