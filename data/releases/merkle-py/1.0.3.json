{
  "info": {
    "author": "Cyril Dever",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# merkle-py\n_Python implementation of Merkle tree_\n\nThis library defines my special implementation in Python of the notorious Merkle trees. Feel free to use it (with the appropriate credits).\n\nOther implementations include: [Go](../go/README.md), [Scala](../scala/README.md) and [TypeScript](../ts/README.md).\n\n\n### Usage\n\n```console\n$ pip install merkle-py\n```\n\nHere are some simple examples of how it works:\n```python\nfrom merklepy.tree import MerkleTree, MerkleTreeOptions\nfrom merklepy.hash import build_hash_function, SHA_256\n\noptions1 = MerkleTreeOptions(doubleHash= True, engine='sha-256', sort=True)\ntree1 = MerkleTree(options1)\n\n# Build a tree from the raw data\nproofs1 = tree1.add_leaves(True, '1', '2', '3')\nroot_hash = tree1.get_root_hash()\nassert(tree1.depth() == 1)\n\njson = tree1.to_json()\n\n# Build another identical tree from the JSON of the first one\ntree2 = tree_from(json)\nassert(tree1.size() == tree2.size())\nsha256 = build_hash_function(SHA_256)\nassert(tree2.size() == proofs1[0].size)\nassert(tree2.validate_proof(proofs1[0], sha256('1'), root_hash) == True)\n\n# Enrich with new hashed data\nproofs2 = tree2.add_leaves(False,\n    bytes.fromhex('1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'),\n    bytes.fromhex('abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789')\n)\nassert(tree2.size() == 5)\nassert(tree2.depth() == 2)\n\n# Because the size of the tree has changed, and so has the root hash\nassert(proofs1[0].to_string() != proofs2[0].to_string() and tree2.validate_proof(proofs1[0], sha256('1'), root_hash) == False)\n```\n\n#### Important note\n\nAs you can see from the examples above, for a continuously growing Merkle tree, proofs may not work at all time. You may need either a new proof from the latest tree, or rebuild the old tree, hence the `size` attribute passed within the `MerkleProof` instance. If you don't use a sorted tree and keep a record of the leaves' hashes in the order they were included in the tree, this allows you to rebuild the corresponding tree and therefore use any proof at any time. \\\nIn other words, this implementation is either not made for a growing tree, or should take this behaviour into account when issuing and verifying proofs.\n\n\n\n### Tests\n\n```console\n$ python3 -m unittest discover\n```\n\n\n### License\n\nThis library is distributed under an MIT license.\nSee the [LICENSE](LICENSE) file.\n\n\n<hr />\n&copy; 2022 Cyril Dever. All rights reserved.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cyrildever/merkle-trees/packages/py",
    "keywords": "python,merkle-tree",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "merkle-py",
    "package_url": "https://pypi.org/project/merkle-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/merkle-py/",
    "project_urls": {
      "Bug Tracker": "https://github.com/cyrildever/merkle-trees/issues",
      "Homepage": "https://github.com/cyrildever/merkle-trees/packages/py"
    },
    "release_url": "https://pypi.org/project/merkle-py/1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Merkle tree for Python",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17290627,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffac8bf3be2b80babca0306cc049d58e7dda8bd032b8bbe6e5ca73a58def6a2e",
        "md5": "5a34d5349f736ddcd6ec1ef1d4e679d3",
        "sha256": "844700c65e9ad128cf164b47da743a0bbc35421a78e16534b9699d1783340556"
      },
      "downloads": -1,
      "filename": "merkle_py-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a34d5349f736ddcd6ec1ef1d4e679d3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7907,
      "upload_time": "2022-11-04T09:52:57",
      "upload_time_iso_8601": "2022-11-04T09:52:57.428066Z",
      "url": "https://files.pythonhosted.org/packages/ff/ac/8bf3be2b80babca0306cc049d58e7dda8bd032b8bbe6e5ca73a58def6a2e/merkle_py-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d3d8d658eacaba7f64e9b4bb0b5c859234a77ae993a484173a76a3d53441cae",
        "md5": "ef343b240b4a29975c3b395fb0c5cb99",
        "sha256": "a218346d77b5e302e6fc23841d105986b631f57ed20aa38e01347899d735eb6b"
      },
      "downloads": -1,
      "filename": "merkle-py-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ef343b240b4a29975c3b395fb0c5cb99",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6429,
      "upload_time": "2022-11-04T09:53:00",
      "upload_time_iso_8601": "2022-11-04T09:53:00.120946Z",
      "url": "https://files.pythonhosted.org/packages/3d/3d/8d658eacaba7f64e9b4bb0b5c859234a77ae993a484173a76a3d53441cae/merkle-py-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}