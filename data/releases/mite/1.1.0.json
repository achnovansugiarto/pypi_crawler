{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Mite\n\n[![Python 3.9](https://img.shields.io/badge/python-3.9-blue.svg)](https://www.python.org/downloads/release/python-390/) [![Python 3.10](https://img.shields.io/badge/python-3.10-blue.svg)](https://www.python.org/downloads/release/python-3100/) [![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/sky-uk/mite/blob/master/LICENSE) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black) [![Docs](https://img.shields.io/badge/docs-read-blue)](https://sky-uk.github.io/mite/)\n\n## Load Testing Framework\n\nMite is a load testing framework with distributed components written in Python.\nRequests are executed asynchronously, allowing large throughput from relatively small infrastructure.\n\n## Installation\n\n```bash\npython3 -m venv ~/.virtualenvs/mite\nsource ~/.virtualenvs/mite/bin/activate\n\npip install -r requirements.txt\n```\n\n\nThis requires that you have libcurl installed on your system (including C header files for development, which are often distributed separately from the shared libraries).  On Ubuntu, this can be accomplished with the command:\n\n```\nsudo apt install libcurl4 libcurl4-openssl-dev\n```\n(NB we recommend using a version of libcurl linked against openssl\nrather than gnutls, since the latter has memory leak problems)\n\n\nYou can also use the dockerfile included in this repository to run\nmite.  In order to get a shell in a container with mite installed, run\nthese commands (assuming you have docker installed on your machine):\n```\ndocker build -t mite .\ndocker run --rm -it mite sh\n```\n\nRun `mite --help` for a full list of commands\n\n## Your first scenario\n\nScenarios are a combination of 3 things, a set of journeys to run, a\ndatapool to provide test data for the journey (if applicable), and a\nvolume model.\n\n### Journeys\n\nJourneys are async python functions, and are where you put the logic of\nwhat you're trying to achieve.  Below is a simple example:\n\n```python\nimport asyncio\n\nasync def journey(ctx, arg1, arg2):\n    async with ctx.transaction('test1'):\n        ctx.send('test_message', content=ctx.config.get('test_msg', 'Not set'), sum=arg1 + arg2)\n        await asyncio.sleep(0.5)\n```\n\nThis journey just sends a log message to be collected by the framework\nand waits for half a second.  This journey takes 3 arguments, a context\nand two numbers (which will be supplied by the datapool, see below).\n\n#### Context\n\nThe context is important for every journey.  It provides a number of\nuseful methods for timing/naming of transactions, sending messages and\ndefaults to including http functionality from acurl.  Functionality can\nbe included in the journey by attaching it to the context.\n\nIn the above example we see an example of naming a transaction `async\nwith ctx.transaction('test1'):`.  This will capture timing for the\nindented block.\n\nWe also see that the config is attached to the context with\n`ctx.config.get('test_msg', 'Not set')` and in this case, the value of\nthat config value is sent to the log collector with\n`ctx.send('test_message', content=ctx.config.get('test_msg', 'Not set'))`\n\n### Datapools\n\nTo feed data into your test journey, you'll need a datapool. Several of\nthese are already provided in mite and usually read data in from an\niterable. To specify a custom datapool implementation, you simply need a\nclass that implements a `checkin` method which adds data to the pool and\na `checkout` method which removes data from the pool to be used by\njourneys.\n\nFor the above journey, which expects two arguments, we will show an\nexample of the RecyclableIterableDataPool.\n\n```python\nfrom mite.datapools import RecyclableIterableDataPool\n\ndatapool = RecyclableIterableDataPool([(i, i+2) for i in range(5000)])\n```\n\nThis pool will share data out to runners and check it back in when the\nrunners are done with that block of data.  In this case it cycles\nthrough a list of tuples which each contain two integers.\n\n### Volume Model\n\nA volume model defines how many instances of the journey should be ran\nwithin a window of time.  The window is definied as a start and an end\ntime (measured in seconds since the beginning of the test), which will be\nfed to the model by the framework.  This allows complex calculations to\nspecify the current volume based on the current time.  The volume model\ncan also raise `StopScenario` to inform mite that the load injection\nshould stop for a given journey.  For this example we'll use a simple\nvolume model which merely runs ten journeys simultaneously, forever.\n\n```python\nvolumemodel = lambda start, end: 10\n```\n\n### Scenario\n\nWe now need to package the journey, datapool and volume model into a\nscenario.  This is a simple as defining a function which returns\na list of triplets of (journey name, datapool, volumemodel).\n\n```python\ndef scenario():\n    return [\n        ['mite.example:journey', datapool, volumemodel],\n    ]\n```\n\nThe journey name should be a string with two parts separated by a\ncolon.  The first part is the name of a python module that is\nimportable; the second is the name of a journey (an async function)\nwithin that module.  It is necessary to specify this as a string, rather\nthan as a python object, because the journey will be executed in a\ndifferent python process than the scenario function is.  Thus, we need a\nname for the journey that allows any python process to find it.\n\nThe volume model and data pool, on the other hand, are only used in the\npython process where the scenario function runs.  They are both python\nobjects.\n\n### Testing the journey\n\nBefore running the scenario, we should test the journey in isolation as\na scenario can be made up of multiple journeys.  This can be done with\nthe `mite journey test` command.  We just need to pass the name of the\njourney and the datapool it requires:\n\n```sh\nMITE_CONF_test_msg=\"Hello from mite\" mite journey test mite.example:journey mite.example:datapool\n```\n\nIf something goes wrong, adding the `--debugging` flag to this command\nwill drop excution into a debug session. The choice of debugger used can be\nmanaged by setting the [`PYTHONBREAKPOINT` environment variable](https://www.python.org/dev/peps/pep-0553/#environment-variable)\nbefore running mite. Python's built-in [pdb](https://docs.python.org/3/library/pdb.html))\ndebugger is invoked by default, but this can be changed to use, say, the\n[ipdb debugger](https://github.com/gotcha/ipdb):\n\n```\npip install ipdb\nexport PYTHONBREAKPOINT=ipdb.set_trace\nexport PYTHONPOSTMORTEM=ipdb.post_mortem\n```\n\n`PYTHONPOSTMORTEM` is a mite-specific extension to [PEP\n553](https://www.python.org/dev/peps/pep-0553/) which defines the\n`PYTHONBREAKPOINT` functionality.\n\n### Run the scenario\n\nIn order to run the finished scenario locally, which will include all\nthe necessary fixtures, run the following command:\n\n```sh\nMITE_CONF_test_msg=\"Hello from mite\" mite scenario test mite.example:scenario\n```\n\n## Distributed deployments\n\nIn order to scale up miteÊ¼s capability to inject load, you will need to\nrun it as a distributed suite of components.  You can learn more about\nhow to accomplish this in the [documentation](https://sky-uk.github.io/mite/design-deployment.html).\n\n\n### Deploy distributed mite with docker compose\n\nBuild mite image: \n```\ndocker build -t mite .\n````\n\nRun mite deployments:\n\nUse `make` from `mite/local` dir:\n```\nmake up # start mite containers\nmake status # check status of mite containers\nmake clean # remove all mite containers\n```\nor\n```\ndocker-compose -f docker_compose.yml up\n```\n\nFor more information on distributed mite usage, [info](/local/README.md)\n\n## Maintainers\n\nIf you run into any trouble or need support getting to grips with Mite,\nreach out on [Slack](https://sky.slack.com/messages/mite) if you work at Sky,\n or contact one of the maintainers if you're an external contributer:\n\n| [<img src=\"https://avatars.githubusercontent.com/jb098\" width=100 height=100 alt=\"Jordan Brennan\" /><br />Jordan Brennan](https://github.com/jb098)<br /><sub>ðŸ’»</sub> | [<img src=\"https://avatars.githubusercontent.com/aecay\" width=100 height=100 alt=\"Aaron Ecay\" /> <br />Aaron Ecay](https://github.com/aecay)<br /><sub>ðŸ’»</sub> | [<img src=\"https://avatars.githubusercontent.com/DavAnnunz\" width=100 height=100 alt=\"Davide Annunziata\" /><br />Davide Annunziata](https://github.com/DavAnnunz)<br /><sub>ðŸ’»</sub> | [<img src=\"https://avatars.githubusercontent.com/arroncanhamskyuk\" width=100 height=100 alt=\"Arron Canham\" /><br />Arron Canham](https://github.com/arroncanhamskyuk)<br /><sub>ðŸ’»</sub> |\n| :---: | :---: | :---: | :---: |\n\n**Special thanks to the following contributors:**\n\n* [Tony Simpson](https://github.com/tonysimpson)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sky-uk/mite/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mite",
    "package_url": "https://pypi.org/project/mite/",
    "platform": null,
    "project_url": "https://pypi.org/project/mite/",
    "project_urls": {
      "Homepage": "https://github.com/sky-uk/mite/"
    },
    "release_url": "https://pypi.org/project/mite/1.1.0/",
    "requires_dist": [
      "acurl",
      "bs4",
      "docopt",
      "flask",
      "msgpack",
      "nanomsg",
      "pyzmq",
      "selenium (<4)",
      "uvloop",
      "websockets",
      "aio-pika ; extra == 'amqp'",
      "thrift ; extra == 'finagle'",
      "selenium ; extra == 'selenium'",
      "selenium-wire (>=4.3.0) ; extra == 'selenium_wire'"
    ],
    "requires_python": "",
    "summary": "A Python Performance Testing Framework",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17413945,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2f05c32a10dfd42eef1dc3e33afe165ab0e50c43fb62b83bb540cde89a0e8c4",
        "md5": "2815d0cb526bcf6d16a358c45b68fc09",
        "sha256": "fd72c48115f6ddd3c2b44ff05cd0786e743e74652cda18948b66a266347317a9"
      },
      "downloads": -1,
      "filename": "mite-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2815d0cb526bcf6d16a358c45b68fc09",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 69611,
      "upload_time": "2022-09-21T14:34:02",
      "upload_time_iso_8601": "2022-09-21T14:34:02.857284Z",
      "url": "https://files.pythonhosted.org/packages/d2/f0/5c32a10dfd42eef1dc3e33afe165ab0e50c43fb62b83bb540cde89a0e8c4/mite-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ee01dd170b78f584ef3b3ae2476ca36d664f5162ad4d2f79f977832d3004934",
        "md5": "9a72c5310754a486cca84a450f973dfa",
        "sha256": "919a9d8a189fb45a82eba2cf210f3b966b0f9e8b8d80b5f9da679b9dc8a366da"
      },
      "downloads": -1,
      "filename": "mite-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9a72c5310754a486cca84a450f973dfa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4520524,
      "upload_time": "2022-09-21T14:34:04",
      "upload_time_iso_8601": "2022-09-21T14:34:04.175493Z",
      "url": "https://files.pythonhosted.org/packages/0e/e0/1dd170b78f584ef3b3ae2476ca36d664f5162ad4d2f79f977832d3004934/mite-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}