{
  "info": {
    "author": "Adam Knight",
    "author_email": "adam@movq.us",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "drf-httpsig\n===========\n\nEasy `HTTP Signature`_ authentication support for the `Django REST framework`_.\n\n\nOverview\n--------\n\nThe HTTP Signature scheme provides a way to achieve origin authentication and message integrity for HTTP messages. Similar to Amazon's `HTTP Signature scheme`_, used by many of its services. The `HTTP Signature`_ specification is currently an IETF draft.\n\n\n.. contents::\n\nRequirements\n------------\n\n* Python 2.7, 3.2+ (currently tested up to 3.4.1)\n* `httpsig`_\n\n\nInstallation\n------------\n\nThis module uses `setuptools` and is hosted on PyPi so installation is as easy as::\n\n   pip install drf-httpsig\n\nThis should also install the `httpsig`_ module which houses all the magic; this module is pure DRF glue (as it should be).\n\nYou can also run `setup.py` from inside a clone of the repository::\n\n    python setup.py install\n\nNote that if you do so, modules with a version requirement may attempt to re-install the module as `versioneer` may report a different version, especially if your clone of the repo has any uncommitted/untagged changes.\n\n\nRunning the Tests\n-----------------\n\nTo run the tests for the module, use the following command on the repository root directory::\n\n  python setup.py test\n\nNote that testing depends on `django-nose`, which will be installed before testing. You may also run the tests with `tox` using the included `tox.ini` file which has the benefit of keeping all testing dependances in a venv automatically.:\n\n    tox -e py27,py32,...\n\n\nUsage\n-----\n\nTo actually authenticate HTTP requests with this module, you need to extend the ``SignatureAuthentication`` class, as follows:\n\n.. code:: python\n\n    # my_api/auth.py\n\n    from drf_httpsig.authentication import SignatureAuthentication\n\n    class MyAPISignatureAuthentication(SignatureAuthentication):\n        # The HTTP header used to pass the consumer key ID.\n\n        # A method to fetch (User instance, user_secret_string) from the\n        # consumer key ID, or None in case it is not found. Algorithm\n        # will be what the client has sent, in the case that both RSA\n        # and HMAC are supported at your site (and also for expansion).\n        def fetch_user_data(self, key_id, algorithm=\"hmac-sha256\"):\n            # ...\n            # example implementation:\n            try:\n                user = User.objects.get(keyId=key_id, algo=algorithm)\n                return (user, user.secret)\n            except User.DoesNotExist:\n                return (None, None)\n\n\n4. Configure DRF to use your authentication class; e.g.:\n\n.. code:: python\n\n    # my_project/settings.py\n\n    # ...\n    REST_FRAMEWORK = {\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n           'my_api.auth.MyAPISignatureAuthentication',\n        ),\n        'DEFAULT_PERMISSION_CLASSES': (\n            'rest_framework.permissions.IsAuthenticated',\n        )\n    }\n    # The above will force HTTP signature for all requests.\n    # ...\n\n\nSupport\n-------\n\nPlease file any issues in the `issue tracker`_.  You are also welcome to contribute features and fixes via pull requests.\n\n\nExample Usage and Session w/cURL\n--------------------------------\n\nAssuming the setup detailed above, a project running on ``localhost:8000`` could be probed with cURL as follows::\n\n    # Pre-calculate this first bit.\n    ~$ SSS=Base64(Hmac(SECRET, \"Date: Mon, 17 Feb 2014 06:11:05 GMT\", SHA256))\n    ~$ curl -v -H 'Date: \"Mon, 17 Feb 2014 06:11:05 GMT\"' -H 'Authorization: Signature keyId=\"my-key\",algorithm=\"hmac-sha256\",headers=\"date\",signature=\"SSS\"'\n\nAnd, with much less pain, using the modules ``requests`` and ``httpsig``:\n\n.. code:: python\n\n    import requests\n    from httpsig.requests_auth import HTTPSignatureAuth\n\n    KEY_ID = 'su-key'\n    SECRET = 'my secret string'\n\n    signature_headers = ['(request-line)', 'accept', 'date', 'host']\n    headers = {\n      'Host': 'localhost:8000',\n      'Accept': 'application/json',\n      'Date': \"Mon, 17 Feb 2014 06:11:05 GMT\"\n    }\n\n    auth = HTTPSignatureAuth(key_id=KEY_ID, secret=SECRET,\n                           algorithm='hmac-sha256',\n                           headers=signature_headers)\n    req = requests.get('http://localhost:8000/resource/',\n                     auth=auth, headers=headers)\n    print(req.content)\n\n\n.. References:\n\n.. _`HTTP Signature`: https://datatracker.ietf.org/doc/draft-cavage-http-signatures/\n.. _`Django REST framework`: http://django-rest-framework.org/\n.. _`HTTP Signature scheme`: http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n.. _`httpsig`: https://github.com/ahknight/httpsig\n.. _`issue tracker`: https://github.com/ahknight/httpsig/issues\n\n\ndrf-httpsig Changes\n===================\n\nv1.0.1 (2014-Jul-03)\n--------------------\n\n* Added/verified Python 3 support and tests (3.2+).\n* Added support for sending a DRF authorization challenge if we're the primary authenticator.\n* Switched to using the `httpsig` HeaderVerifier instead of doing it ourselves. Lots of code got deleted there.\n* Changed fetch_user_data to also receive the algorithm the keyID is for.\n* Updated README.\n* Removed models.py -- the client should handle that part entirely.\n\nv1.0b2/1.0.0 (2014-Jul-01)\n--------------------------\n\n* Added versioneer.\n* Updated requirements to use latest httpsig.\n* Added \"setup.py test\" and tox support.\n* Fixed a unit test.\n\nv1.0b1 (2014-Jun-27)\n--------------------\n\n* Renamed to drf-httpsig because I don't hate my hands.\n* Updated requirements versions to be more sane.\n* Switched to a different branch for http_signature.\n* Removed API_KEY_HEADER in favor of the keyId, per spec.\n* Cleaned up the repo a bit.\n* Cleaned up the code a bit.\n\n\ndjangorestframework-httpsignature (previous)\n============================================\n\nv0.1.5, 20140613 -- Document installation issue\n\n* Document workaround on installation problems.\n\nv0.1.4, 20140613 -- Improve installation\n\n* Make requirements file comply with docs.\n* Decide on http_signature commit.\n\nv0.1.3, 20140220 -- Upload to PyPI\n\n* Prepare docs to upload package to PyPI\n\nv0.1.2, 20140219 -- Package data and clean up\n\n* Updated package classifiers\n* Cleaned up unused code in authentication.py\n\nv0.1.1, 20140217 -- Documentation and clean up\n\n* The package can be installed.\n* Continuous integration via Travis.\n* Unit tests for the authentication code.\n* General docuementation in the README file.\n\nv0.1.0, 20140217 -- Initial release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ahknight/drf-httpsig",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "drf-httpsig",
    "package_url": "https://pypi.org/project/drf-httpsig/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/drf-httpsig/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ahknight/drf-httpsig"
    },
    "release_url": "https://pypi.org/project/drf-httpsig/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "HTTP Signature support for Django REST framework",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3715254,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "792fe8ac927ff9de2380d8fd1f5f9d64bcc110ef9689ddd48702860f8554c66e",
        "md5": "9652c600fbaa5751f9aefa487f8914b6",
        "sha256": "0849e4227cfb629a4557ad34b562e8bc094cf1e42d4b84164587398aeb83c53b"
      },
      "downloads": -1,
      "filename": "drf_httpsig-1.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9652c600fbaa5751f9aefa487f8914b6",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 11671,
      "upload_time": "2014-07-24T17:09:43",
      "upload_time_iso_8601": "2014-07-24T17:09:43.593015Z",
      "url": "https://files.pythonhosted.org/packages/79/2f/e8ac927ff9de2380d8fd1f5f9d64bcc110ef9689ddd48702860f8554c66e/drf_httpsig-1.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}