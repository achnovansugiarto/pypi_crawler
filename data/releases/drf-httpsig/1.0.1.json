{
  "info": {
    "author": "Adam Knight",
    "author_email": "adam@movq.us",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "drf-httpsig\r\n===========\r\n\r\nEasy `HTTP Signature`_ authentication support for the `Django REST framework`_.\r\n\r\n\r\nOverview\r\n--------\r\n\r\nThe HTTP Signature scheme provides a way to achieve origin authentication and message integrity for HTTP messages. Similar to Amazon's `HTTP Signature scheme`_, used by many of its services. The `HTTP Signature`_ specification is currently an IETF draft.\r\n\r\n\r\n.. contents::\r\n\r\nRequirements\r\n------------\r\n\r\n* Python 2.7, 3.2+ (currently tested up to 3.4.1)\r\n* `httpsig`_\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nThis module uses `setuptools` and is hosted on PyPi so installation is as easy as::\r\n\r\n   pip install drf-httpsig\r\n\r\nThis should also install the `httpsig`_ module which houses all the magic; this module is pure DRF glue (as it should be).\r\n\r\nYou can also run `setup.py` from inside a clone of the repository::\r\n\r\n    python setup.py install\r\n\r\nNote that if you do so, modules with a version requirement may attempt to re-install the module as `versioneer` may report a different version, especially if your clone of the repo has any uncommitted/untagged changes.\r\n\r\n\r\nRunning the Tests\r\n-----------------\r\n\r\nTo run the tests for the module, use the following command on the repository root directory::\r\n\r\n  python setup.py test\r\n\r\nNote that testing depends on `django-nose`, which will be installed before testing. You may also run the tests with `tox` using the included `tox.ini` file which has the benefit of keeping all testing dependances in a venv automatically.:\r\n\r\n    tox -e py27,py32,...\r\n\r\n\r\nUsage\r\n-----\r\n\r\nTo actually authenticate HTTP requests with this module, you need to extend the ``SignatureAuthentication`` class, as follows:\r\n\r\n.. code:: python\r\n\r\n    # my_api/auth.py\r\n\r\n    from drf_httpsig.authentication import SignatureAuthentication\r\n\r\n    class MyAPISignatureAuthentication(SignatureAuthentication):\r\n        # The HTTP header used to pass the consumer key ID.\r\n\r\n        # A method to fetch (User instance, user_secret_string) from the\r\n        # consumer key ID, or None in case it is not found. Algorithm\r\n        # will be what the client has sent, in the case that both RSA\r\n        # and HMAC are supported at your site (and also for expansion).\r\n        def fetch_user_data(self, key_id, algorithm=\"hmac-sha256\"):\r\n            # ...\r\n            # example implementation:\r\n            try:\r\n                user = User.objects.get(keyId=key_id, algo=algorithm)\r\n                return (user, user.secret)\r\n            except User.DoesNotExist:\r\n                return (None, None)\r\n\r\n\r\n4. Configure DRF to use your authentication class; e.g.:\r\n\r\n.. code:: python\r\n\r\n    # my_project/settings.py\r\n\r\n    # ...\r\n    REST_FRAMEWORK = {\r\n        'DEFAULT_AUTHENTICATION_CLASSES': (\r\n           'my_api.auth.MyAPISignatureAuthentication',\r\n        ),\r\n        'DEFAULT_PERMISSION_CLASSES': (\r\n            'rest_framework.permissions.IsAuthenticated',\r\n        )\r\n    }\r\n    # The above will force HTTP signature for all requests.\r\n    # ...\r\n\r\n\r\nSupport\r\n-------\r\n\r\nPlease file any issues in the `issue tracker`_.  You are also welcome to contribute features and fixes via pull requests.\r\n\r\n\r\nExample Usage and Session w/cURL\r\n--------------------------------\r\n\r\nAssuming the setup detailed above, a project running on ``localhost:8000`` could be probed with cURL as follows::\r\n\r\n    # Pre-calculate this first bit.\r\n    ~$ SSS=Base64(Hmac(SECRET, \"Date: Mon, 17 Feb 2014 06:11:05 GMT\", SHA256))\r\n    ~$ curl -v -H 'Date: \"Mon, 17 Feb 2014 06:11:05 GMT\"' -H 'Authorization: Signature keyId=\"my-key\",algorithm=\"hmac-sha256\",headers=\"date\",signature=\"SSS\"'\r\n\r\nAnd, with much less pain, using the modules ``requests`` and ``httpsig``:\r\n\r\n.. code:: python\r\n\r\n    import requests\r\n    from httpsig.requests_auth import HTTPSignatureAuth\r\n\r\n    KEY_ID = 'su-key'\r\n    SECRET = 'my secret string'\r\n\r\n    signature_headers = ['(request-line)', 'accept', 'date', 'host']\r\n    headers = {\r\n      'Host': 'localhost:8000',\r\n      'Accept': 'application/json',\r\n      'Date': \"Mon, 17 Feb 2014 06:11:05 GMT\"\r\n    }\r\n\r\n    auth = HTTPSignatureAuth(key_id=KEY_ID, secret=SECRET,\r\n                           algorithm='hmac-sha256',\r\n                           headers=signature_headers)\r\n    req = requests.get('http://localhost:8000/resource/',\r\n                     auth=auth, headers=headers)\r\n    print(req.content)\r\n\r\n\r\n.. References:\r\n\r\n.. _`HTTP Signature`: https://datatracker.ietf.org/doc/draft-cavage-http-signatures/\r\n.. _`Django REST framework`: http://django-rest-framework.org/\r\n.. _`HTTP Signature scheme`: http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\r\n.. _`httpsig`: https://github.com/ahknight/httpsig\r\n.. _`issue tracker`: https://github.com/ahknight/httpsig/issues",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ahknight/drf-httpsig",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-httpsig",
    "package_url": "https://pypi.org/project/drf-httpsig/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/drf-httpsig/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ahknight/drf-httpsig"
    },
    "release_url": "https://pypi.org/project/drf-httpsig/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "HTTP Signature support for Django REST framework",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3715254,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7078afb54a0ad387d378b94f0e4afc9d877f9ec79c3cf003f6c1c8544880a29c",
        "md5": "42f16a6af64c7d8dedcf10383a1e7f74",
        "sha256": "15f021a885203f45e50d0e28a8e3a01a1db1fbaf124b2e3a8be2bb4c892304e5"
      },
      "downloads": -1,
      "filename": "drf_httpsig-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "42f16a6af64c7d8dedcf10383a1e7f74",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 11973,
      "upload_time": "2014-07-03T18:39:41",
      "upload_time_iso_8601": "2014-07-03T18:39:41.186479Z",
      "url": "https://files.pythonhosted.org/packages/70/78/afb54a0ad387d378b94f0e4afc9d877f9ec79c3cf003f6c1c8544880a29c/drf_httpsig-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}