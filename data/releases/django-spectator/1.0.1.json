{
  "info": {
    "author": "Phil Gyford",
    "author_email": "phil@gyford.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "==================\n Django Spectator\n==================\n\n.. image:: https://travis-ci.org/philgyford/django-spectator.svg?branch=master\n  :target: https://travis-ci.org/philgyford/django-spectator?branch=master\n\n.. image:: https://coveralls.io/repos/github/philgyford/django-spectator/badge.svg?branch=master\n  :target: https://coveralls.io/github/philgyford/django-spectator?branch=master\n\nA Django app to track book reading, movie viewing, gig going and play watching.\n\nSo far only used with Python 3.6 and Django 1.10. Should work with Python\n3.5+ and Django 1.8+.\n\nIt has URLs, views and templates to create a site displaying all the data, and\nDjango admin screens to add and edit them. The templates use `Bootstrap v4-alpha.6 <https://v4-alpha.getbootstrap.com>`_.\n\nThere are also template tags for displaying data in your own templates (see\nbelow).\n\n\n************\nInstallation\n************\n\nInstall with pip::\n\n    pip install django-spectator\n\nAdd it and django-polymorphic to your project's ``INSTALLED_APPS`` in ``settings.py``::\n\n    INSTALLED_APPS = [\n        ...\n        'polymorphic',\n        'spectator',\n    ]\n\nRun migrations::\n\n    ./manage.py makemigrations\n\nOptionally get a `Google Maps JavaScript API key <https://developers.google.com/maps/documentation/javascript/get-api-key>`_ and add it to your ``settings.py`` like this::\n\n    SPECTATOR_GOOGLE_MAPS_API_KEY = 'YOUR-API-KEY'\n\nThis will enable using a map in the Django Admin to set the location of Venues,\nand the displaying of Venues' maps in the public templates.\n\nThen, go to Django Admin to add your data.\n\n\n********\nOverview\n********\n\nThere are two main parts to Spectator: Reading and Events (movies, concerts, etc). They both share Creators.\n\nCreators\n========\n\nCreators are the authors of books, directors of movies, actors in plays, groups who perfom at gigs, etc.\n\nA Creator has a name and a ``kind``, of either \"individual\" (e.g. \"Anthony Sher\") or \"group\" (e.g. \"Royal Shakespeare Company\").\n\nA Creator is associated with books, movies, concerts, etc. through roles, which\ninclude an optional ``role_name`` such as \"Author\", \"Illustrator\", \"Director\",\n\"Playwright\", \"Company\", etc. The roles can be given an order so that the\ncreators of a thing will be listed in the appropriate order (such as the\ndirector before a movie's actors).\n\nSee ``spectator/models/core.py`` for these models.\n\nReading\n=======\n\nA Publication is a thing that's been read, and has a ``kind`` of either \"book\"\nor \"periodical\". A Publication can optionally be part of a PublicationSeries.\ne.g. a Publication \"Vol. 3 No. 7 September 2005\" could be part of the \"The\nBeliever\" PublicationSeries.\n\nA Publication can have zero or more Readings. A Reading can have\na ``start_date`` and ``end_date``. If the ``start_date`` is set but the\n``end_date`` isn't, the Publication is currently being read. When a Reading has\nbeen completed, and an ``end_date`` added, it can be marked as ``is_finished``\nor not. If not, it's because you gave up on the Publication before getting to\nthe end.\n\nBoth ``start_date`` and ``end_date`` indicates a specific day by default. If\nyou don't know the day, or the month, a granularity can be specified indicating\nwhether the reading started/ended sometime during the month or year.\n\nSee ``spectator/models/reading.py`` for these models.\n\nEvents\n======\n\nAn Event specifies a date on which you saw a thing at a particular Venue.\nA Venue has a name and, optionally, location details.\n\nSpectator uses `django-polymorphic <https://django-polymorphic.readthedocs.io/en/stable/>`_ to model the different kinds of events. This makes some things simpler and some things more complex (and possibly slower). Briefly, if you get a list of Events, something like::\n\n    events = Event.objects.all().order_by('-date')[:10]\n\nThen QuerySet returned will be a mixture of different objects::\n\n    <QuerySet [\n        <MovieEvent: Personal Shopper (2016)>,\n        <PlayProductionEvent: King Lear by Royal Shakespeare Company et al.>,\n        <Concert: Holly Herndon, Amnesia Scanner and Visionist>,\n        <MiscEvent: Stewart Lee>,\n    ]>\n\nIf you only want one kind of event then you can fetch that as normal. e.g. only\nthe MovieEvents::\n\n    movies = MovieEvent.objects.all()\n\nThe different kinds of Events have different structures:\n\nConcerts and MiscEvents\n-----------------------\n\nA Concert, and the generic MiscEvents, are the simplest. A date when you\nwent to a Venue to see one or more Creators. The Concert/MiscEvent can\noptionally have a title.\n\nMovies\n------\n\nA Movie is a film created by (optionally) one or more Creators. It can\noptionally have a year and an IMDb ID.\n\nA MovieEvent is when a particular Movie was seen on a specific date at a specific Venue.\n\nPlays\n-----\n\nA Play (e.g. \"King Lear\") is created by zero or more Creators (e.g. \"William\nShakespeare (Playwright)\").\n\nA PlayProduction is a particular production of that play by zero or more\nCreators. For example, one might be by \"Royal Shakespeare Company\" with\n\"Anthony Sher (King Lear)\". Another might be by \"Deborah Warner (Director)\"\nwith \"Glenda Jackson (King Lear)\".\n\nA PlayProductionEvent is when a particular PlayProduction was seen on\na specific date at a specific Venue.\n\nWhen adding a new Play in the Django Admin, it's best to fill in the Play\ndetails, click \"Save and continue editing\", then click \"Add another Play Production and event\" to add the details of the particular production and when it was seen.\n\n\n*************\nTemplate tags\n*************\n\nTo use any of these tags in a template, first::\n\n    {% load spectator_tags %}\n\nIn-progress Publications\n========================\n\nTo get a QuerySet of Publications currently being read use\n``in_progress_publications``::\n\n    {% in_progress_publications as publications %}\n\n    {% for pub in publications %}\n        <p>{{ pub }}<br>\n        {% for role in pub.roles.all %}\n            {{ role.creator.name }}\n            {% if role.role_name %}({{ role.role_name }}){% endif %}\n            <br>\n        {% endfor %}\n        </p>\n    {% endfor %}\n\nOr to display as a Bootstrap card::\n\n    {% in_progress_publications_card %}\n\nPublications being read on a day\n================================\n\nTo get a QuerySet of Publications that were being read on a particular day use\n``day_publications``. If ``my_date`` is a python ``date`` object::\n\n    {% day_publications date=my_date as publications %}\n\nAnd display the results as in the above example.\n\nOr to display as a Bootstrap card::\n\n    {% day_publications_card date=my_date %}\n\nYears of reading\n================\n\nTo get a QuerySet of the years in which Publications were being read::\n\n    {% reading_years as years %}\n\n    {% for year in years %}\n        {{ year|date:\"Y\" }}<br>\n    {% endfor %}\n\nOr to display as a Bootstrap card, with each year linking to the\n``ReadingYearArchiveView``::\n\n    {% reading_years_card current_year=year %}\n\nHere, ``year`` is a date object indicating a year which shouldn't be linked.\n\nRecent Events\n=============\n\nTo get a QuerySet of Events that happened recently::\n\n    {% recent_events num=3 as events %}\n\n    {% for event in events %}\n        <p>\n            {{ event }}<br>\n            {{ event.venue.name }}\n        </p>\n    {% endfor %}\n\nIf ``num`` is not specified, 10 are returned by default.\n\nOr to display as a Boostrap card::\n\n    {% recent_events_card num=3 %}\n\nEvents on a day\n===============\n\nTo get a QuerySet of Events that happened on a particular day, use\n``day_events``. If ``my_date`` is a python ``date`` object::\n\n    {% day_events date=my_date as events %}\n\nAnd display the results as in the above example.\n\nOr to display as a Bootstrap card::\n\n    {% day_events_card date=my_date %}\n\nYears of Events\n===============\n\nTo get a QuerySet of the years in which Events happened::\n\n    {% events_years as years %}\n\n    {% for year in years %}\n        {{ year|date:\"Y\" }}<br>\n    {% endfor %}\n\nOr to display as a Bootstrap card, with each year linking to the\n``EventYearArchiveView``::\n\n    {% events_years_card current_year=year %}\n\nHere, ``year`` is a date object indicating a year which shouldn't be linked.\n\n\n*****************\nLocal development\n*****************\n\n``devproject/`` is a basic Django project to use the app locally. Use it like::\n\n$ pip install -r devproject/requirements.txt\n$ python setup.py develop\n$ ./devproject/manage.py runserver\n\nRun tests with tox. Install it with::\n\n$ pip install tox\n\nRun all tests in all environments like::\n\n$ tox\n\nTo run tests in only one environment, specify it. In this case, Python 3.6 and Django 1.10::\n\n$ tox -e py36-django110\n\nTo run a specific test, add its path after ``--``, eg::\n\n$ tox -e py36-django110 -- tests.spectator.tests.test_models.CreatorTestCase.test_ordering\n\nRunning the tests in all environments will generate coverage output. There will also be an ``htmlcov/`` directory containing an HTML report. You can also generate these reports without running all the other tests::\n\n$ tox -e coverage\n\nAdding a new event type\n=======================\n\n* Add a child of the ``Event`` model, and a child of ``BaseRole`` for the through model and tests.\n* Add factories for both event and role models.\n* Add its admin.\n* Add URLs and tests.\n* Add Views and tests.\n* Add count of objects in ``EventListView``.\n* In ``events/event_list.html`` template, add tab.\n* Add ``events/newtype_list.html`` and ``events/newtype_detail.html`` templates.\n* Add to ``events/includes/event.html``.\n* Add ``events/includes/newtype.html``.\n* Add new type to ``core/creator_detail.html`` template.\n\n``Concert`` and ``MiscEvent`` are almost identical at the moment. Scope for\nrefactoring?\n\n\n*******\nContact\n*******\n\nPhil Gyford\nphil@gyford.com\n@philgyford on Twitter\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/philgyford/django-spectator",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-spectator",
    "package_url": "https://pypi.org/project/django-spectator/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-spectator/",
    "project_urls": {
      "Homepage": "https://github.com/philgyford/django-spectator"
    },
    "release_url": "https://pypi.org/project/django-spectator/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django app to track book reading, movie viewing, gig going, play watching, etc.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15915779,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9397347a80bbad02ac8a23641d4fd874ac0428c4a7bfe797f67f477461d45ed",
        "md5": "4a08e80ff0594aeed1cfd9dbd6cce30d",
        "sha256": "ba705bfc97bca42a3df79e85b27c65a302ea394d58b17e561c7942b055c28b6a"
      },
      "downloads": -1,
      "filename": "django-spectator-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4a08e80ff0594aeed1cfd9dbd6cce30d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12951,
      "upload_time": "2017-03-28T14:28:01",
      "upload_time_iso_8601": "2017-03-28T14:28:01.524325Z",
      "url": "https://files.pythonhosted.org/packages/d9/39/7347a80bbad02ac8a23641d4fd874ac0428c4a7bfe797f67f477461d45ed/django-spectator-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}