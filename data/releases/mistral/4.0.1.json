{
  "info": {
    "author": "OpenStack Mistral Team",
    "author_email": "openstack-dev@lists.openstack.org",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: OpenStack",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "========================\nTeam and repository tags\n========================\n\n.. image:: http://governance.openstack.org/badges/mistral.svg\n    :target: http://governance.openstack.org/reference/tags/index.html\n\n.. Change things from this point on\n\nMistral\n=======\n\nWorkflow Service for OpenStack cloud.\n\nInstallation\n~~~~~~~~~~~~\n\nPrerequisites\n-------------\n\nIt is necessary to install some specific system libs for installing Mistral.\nThey can be installed on most popular operating systems using their package\nmanager (for Ubuntu - *apt*, for Fedora, CentOS - *yum*, for Mac OS - *brew*\nor *macports*).\n\nThe list of needed packages is shown below:\n\n* **python-dev**\n* **python-setuptools**\n* **python-pip**\n* **libffi-dev**\n* **libxslt1-dev (or libxslt-dev)**\n* **libxml2-dev**\n* **libyaml-dev**\n* **libssl-dev**\n\nIn case of ubuntu, just run::\n\n apt-get install python-dev python-setuptools libffi-dev \\\n   libxslt1-dev libxml2-dev libyaml-dev libssl-dev\n\n**Mistral can be used without authentication at all or it can work with\nOpenStack.**\n\nIn case of OpenStack, it works **only with Keystone v3**, make sure **Keystone\nv3** is installed.\n\n\nInstall Mistral\n---------------\n\nFirst of all, clone the repo and go to the repo directory::\n\n  $ git clone https://git.openstack.org/openstack/mistral.git\n  $ cd mistral\n\n\n**Devstack installation**\n\nInformation about how to install Mistral with devstack can be found\n`here <http://docs.openstack.org/developer/mistral/developer/devstack.html>`_.\n\n**Virtualenv installation**::\n\n  $ tox\n\nThis will install necessary virtual environments and run all the project tests.\nInstalling virtual environments may take significant time (~10-15 mins).\n\n**Local installation**::\n\n  $ pip install -e .\n\nor::\n\n  $ pip install -r requirements.txt\n  $ python setup.py install\n\n\nConfiguring Mistral\n~~~~~~~~~~~~~~~~~~~\n\nMistral configuration is needed for getting it work correctly with and without\nan OpenStack environment.\n\n#. Install and configure a database which can be *MySQL* or *PostgreSQL*\n   (**SQLite can't be used in production.**). Here are the steps to connect\n   Mistral to a *MySQL* database.\n\n   * Make sure you have installed ``mysql-server`` package on your Mistral\n     machine.\n   * Install *MySQL driver* for python::\n\n     $ pip install mysql-python\n\n     or, if you work in virtualenv, run::\n\n     $ tox -evenv -- pip install mysql-python\n\n     NOTE: If you're using Python 3 then you need to install ``mysqlclient``\n     instead of ``mysql-python``.\n\n   * Create the database and grant privileges::\n\n     $ mysql -u root -p\n       CREATE DATABASE mistral;\n       USE mistral\n       GRANT ALL ON mistral.* TO 'root'@'localhost';\n\n#. Generate ``mistral.conf`` file::\n\n    $ oslo-config-generator \\\n      --config-file tools/config/config-generator.mistral.conf \\\n      --output-file etc/mistral.conf.sample\n\n#. Copy service configuration files::\n\n    $ sudo mkdir /etc/mistral\n    $ sudo chown `whoami` /etc/mistral\n    $ cp etc/event_definitionas.yml.sample /etc/mistral/event_definitions.yml\n    $ cp etc/logging.conf.sample /etc/mistral/logging.conf\n    $ cp etc/policy.json /etc/mistral/policy.json\n    $ cp etc/wf_trace_logging.conf.sample /etc/mistral/wf_trace_logging.conf\n    $ cp etc/mistral.conf.sample /etc/mistral/mistral.conf\n\n#. Edit file ``/etc/mistral/mistral.conf`` according to your setup. Pay attention to\n   the following sections and options::\n\n    [oslo_messaging_rabbit]\n    rabbit_host = <RABBIT_HOST>\n    rabbit_userid = <RABBIT_USERID>\n    rabbit_password = <RABBIT_PASSWORD>\n\n    [database]\n    # Use the following line if *PostgreSQL* is used\n    # connection = postgresql://<DB_USER>:<DB_PASSWORD>@localhost:5432/mistral\n    connection = mysql://<DB_USER>:<DB_PASSWORD>@localhost:3306/mistral\n\n#. If you are not using OpenStack, add the following entry to the\n   ``/etc/mistral/mistral.conf`` file and **skip the following steps**::\n\n    [pecan]\n    auth_enable = False\n\n#. Provide valid keystone auth properties::\n\n    [keystone_authtoken]\n    auth_uri = http://<Keystone-host>/identity_v2_admin/v3\n    identity_uri = http://<Keystone-host/identity_v2_admin\n    auth_version = v3\n    admin_user = <user>\n    admin_password = <password>\n    admin_tenant_name = <tenant>\n\n#. Register Mistral service and Mistral endpoints on Keystone::\n\n    $ MISTRAL_URL=\"http://[host]:[port]/v2\"\n    $ openstack service create --name mistral workflowv2\n    $ openstack endpoint create mistral public $MISTRAL_URL\n    $ openstack endpoint create mistral internal $MISTRAL_URL\n    $ openstack endpoint create mistral admin $MISTRAL_URL\n\n#. Update the ``mistral/actions/openstack/mapping.json`` file which contains\n   all available OpenStack actions, according to the specific client versions\n   of OpenStack projects in your deployment. Please find more detailed\n   information in the ``tools/get_action_list.py`` script.\n\n\nBefore the First Run\n~~~~~~~~~~~~~~~~~~~~\n\nAfter local installation you will find the commands ``mistral-server`` and\n``mistral-db-manage`` available in your environment. The ``mistral-db-manage``\ncommand can be used for migrating database schema versions. If Mistral is not\ninstalled in system then this script can be found at\n``mistral/db/sqlalchemy/migration/cli.py``, it can be executed using Python\ncommand line.\n\nTo update the database schema to the latest revision, type::\n\n  $ mistral-db-manage --config-file <path_to_config> upgrade head\n\nFor more detailed information about ``mistral-db-manage`` script please check\nfile ``mistral/db/sqlalchemy/migration/alembic_migrations/README.md``.\n\n** NOTE: For users want a dry run with SQLite backend(not used in production),\n``mistral-db-manage`` is not recommended for database initialization due to\n`SQLite limitations <http://www.sqlite.org/omitted.html>`_. Please use\n``sync_db`` script described below instead for database initialization.\n\nBefore starting Mistral server, run ``sync_db`` script. It prepares the DB,\ncreates in it with all standard actions and standard workflows which Mistral\nprovides for all mistral users.\n\nIf you are using virtualenv::\n\n  $ tools/sync_db.sh --config-file <path_to_config>\n\nOr run ``sync_db`` directly::\n\n  $ python tools/sync_db.py --config-file <path_to_config>\n\n\nRunning Mistral API server\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo run Mistral API server::\n\n  $ tox -evenv -- python mistral/cmd/launch.py \\\n      --server api --config-file <path_to_config>\n\nRunning Mistral Engines\n~~~~~~~~~~~~~~~~~~~~~~~\n\nTo run Mistral Engine::\n\n  $ tox -evenv -- python mistral/cmd/launch.py \\\n      --server engine --config-file <path_to_config>\n\nRunning Mistral Task Executors\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo run Mistral Task Executor instance::\n\n  $ tox -evenv -- python mistral/cmd/launch.py \\\n      --server executor --config-file <path_to_config>\n\nNote that at least one Engine instance and one Executor instance should be\nrunning in order for workflow tasks to be processed by Mistral.\n\nIf you want to run some tasks on specific executor, the *task affinity* feature\ncan be used to send these tasks directly to a specific executor. You can edit\nthe following property in your mistral configuration file for this purpose::\n\n    [executor]\n    host = my_favorite_executor\n\nAfter changing this option, you will need to start (restart) the executor. Use\nthe ``target`` property of a task to specify the executor::\n\n    ... Workflow YAML ...\n    task1:\n      ...\n      target: my_favorite_executor\n    ... Workflow YAML ...\n\nRunning Multiple Mistral Servers Under the Same Process\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo run more than one server (API, Engine, or Task Executor) on the same\nprocess::\n\n  $ tox -evenv -- python mistral/cmd/launch.py \\\n      --server api,engine --config-file <path_to_config>\n\nThe value for the ``--server`` option can be a comma-delimited list. The valid\noptions are ``all`` (which is the default if not specified) or any combination\nof ``api``, ``engine``, and ``executor``.\n\nIt's important to note that the ``fake`` transport for the ``rpc_backend``\ndefined in the configuration file should only be used if ``all`` Mistral\nservers are launched on the same process. Otherwise, messages do not get\ndelivered because the ``fake`` transport is using an in-process queue.\n\n\nMistral Client\n~~~~~~~~~~~~~~\n\nThe Mistral command line tool is provided by the ``python-mistralclient``\npackage which is available\n`here <https://git.openstack.org/openstack/python-mistralclient>`__.\n\n\nDebugging\n~~~~~~~~~\n\nTo debug using a local engine and executor without dependencies such as\nRabbitMQ, make sure your ``/etc/mistral/mistral.conf`` has the following settings::\n\n  [DEFAULT]\n  rpc_backend = fake\n\n  [pecan]\n  auth_enable = False\n\nand run the following command in *pdb*, *PyDev* or *PyCharm*::\n\n  mistral/cmd/launch.py --server all --config-file /etc/mistral/mistral.conf --use-debugger\n\n.. note::\n\n    In PyCharm, you also need to enable the Gevent compatibility flag in\n    Settings -> Build, Execution, Deployment -> Python Debugger -> Gevent\n    compatible. Without this setting, PyCharm will not show variable values\n    and become unstable during debugging.\n\n\nRunning unit tests in PyCharm\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order to be able to conveniently run unit tests, you need to:\n\n1. Set unit tests as the default runner:\n\n  Settings -> Tools -> Python Integrated Tools -> Default test runner: Unittests\n\n2. Enable test detection for all classes:\n\n  Run/Debug Configurations -> Defaults -> Python tests -> Unittests -> uncheck\n  Inspect only subclasses of unittest.TestCase\n\nRunning examples\n~~~~~~~~~~~~~~~~\n\nTo run the examples find them in mistral-extra repository\n(https://github.com/openstack/mistral-extra) and follow the instructions on\neach example.\n\n\nTests\n~~~~~\n\nYou can run some of the functional tests in non-openstack mode locally. To do\nthis:\n\n#. set ``auth_enable = False`` in the ``mistral.conf`` and restart Mistral\n#. execute::\n\n    $ ./run_functional_tests.sh\n\nTo run tests for only one version need to specify it::\n\n  $ bash run_functional_tests.sh v1\n\nMore information about automated tests for Mistral can be found on\n`Mistral Wiki <https://wiki.openstack.org/wiki/Mistral/Testing>`_.\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://docs.openstack.org/developer/mistral",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mistral",
    "package_url": "https://pypi.org/project/mistral/",
    "platform": "",
    "project_url": "https://pypi.org/project/mistral/",
    "project_urls": {
      "Homepage": "http://docs.openstack.org/developer/mistral"
    },
    "release_url": "https://pypi.org/project/mistral/4.0.1/",
    "requires_dist": [
      "Babel (>=2.3.4)",
      "Jinja2 (!=2.9.0,!=2.9.3,!=2.9.2,!=2.9.4,!=2.9.1,>=2.8)",
      "PyYAML (>=3.10.0)",
      "SQLAlchemy (>=1.0.10,<1.1.0)",
      "WSME (>=0.8)",
      "alembic (>=0.8.10)",
      "aodhclient (>=0.7.0)",
      "cachetools (>=1.1.0)",
      "croniter (>=0.3.4)",
      "eventlet (!=0.18.3,>=0.18.2)",
      "gnocchiclient (>=2.7.0)",
      "jsonschema (<3.0.0,>=2.0.0,!=2.5.0)",
      "keystonemiddleware (>=4.12.0)",
      "networkx (>=1.10)",
      "oslo.concurrency (>=3.8.0)",
      "oslo.config (>=3.14.0,!=3.18.0)",
      "oslo.db (>=4.15.0)",
      "oslo.i18n (>=2.1.0)",
      "oslo.log (>=3.11.0)",
      "oslo.messaging (>=5.14.0)",
      "oslo.middleware (>=3.0.0)",
      "oslo.policy (>=1.17.0)",
      "oslo.serialization (>=1.10.0)",
      "oslo.service (>=1.10.0)",
      "oslo.utils (>=3.18.0)",
      "osprofiler (>=1.4.0)",
      "paramiko (>=2.0)",
      "pbr (>=1.8,<2.0.0)",
      "pecan (>=1.0.0,!=1.0.3,!=1.0.4,!=1.2,!=1.0.2)",
      "python-barbicanclient (>=4.0.0)",
      "python-ceilometerclient (>=2.5.0)",
      "python-cinderclient (!=1.7.0,>=1.6.0,!=1.7.1)",
      "python-designateclient (>=1.5.0)",
      "python-glanceclient (>=2.5.0)",
      "python-heatclient (>=1.6.1)",
      "python-ironic-inspector-client (>=1.5.0)",
      "python-ironicclient (>=1.11.0)",
      "python-keystoneclient (>=3.8.0)",
      "python-magnumclient (>=2.0.0)",
      "python-mistralclient (>=2.0.0)",
      "python-muranoclient (>=0.8.2)",
      "python-neutronclient (>=5.1.0)",
      "python-novaclient (!=7.0.0,>=6.0.0)",
      "python-senlinclient (>=1.1.0)",
      "python-swiftclient (>=3.2.0)",
      "python-tackerclient (>=0.8.0)",
      "python-troveclient (>=2.2.0)",
      "python-zaqarclient (>=1.0.0)",
      "requests (!=2.12.2,>=2.10.0)",
      "setuptools (>=16.0,!=34.2.0,!=34.3.2,!=34.3.1,!=34.3.0,!=34.0.0,!=34.0.1,!=34.1.1,!=24.0.0,!=34.0.2,!=34.1.0,!=34.0.3)",
      "six (>=1.9.0)",
      "stevedore (>=1.17.1)",
      "tenacity (>=3.2.1)",
      "tooz (>=1.47.0)",
      "yaql (>=1.1.0)",
      "zake (>=0.1.6)"
    ],
    "requires_python": "",
    "summary": "Mistral Project",
    "version": "4.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17397519,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa02822623bc1e563052c4f88a0b68b08f9e61e402e2917b064abfa6feed3583",
        "md5": "f312f109bb016a0ef550122aa6640db7",
        "sha256": "478382a4187fdf9b88590ca64c02b18dd20f97c828da2dc3d5b42ef47683fb25"
      },
      "downloads": -1,
      "filename": "mistral-4.0.1-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "f312f109bb016a0ef550122aa6640db7",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 552177,
      "upload_time": "2017-05-17T11:13:00",
      "upload_time_iso_8601": "2017-05-17T11:13:00.902307Z",
      "url": "https://files.pythonhosted.org/packages/fa/02/822623bc1e563052c4f88a0b68b08f9e61e402e2917b064abfa6feed3583/mistral-4.0.1-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ad0a92780c1df853f5be5b724164f07acfaf961ad4587fe284fbc842e976eb1",
        "md5": "798756949e0523b649f86c0bc3396bf0",
        "sha256": "619142f0cc157494876105020cf0a6d5f6c1c060579bda930e57ff03b20e5a1b"
      },
      "downloads": -1,
      "filename": "mistral-4.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "798756949e0523b649f86c0bc3396bf0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 639359,
      "upload_time": "2017-05-17T11:13:04",
      "upload_time_iso_8601": "2017-05-17T11:13:04.083654Z",
      "url": "https://files.pythonhosted.org/packages/0a/d0/a92780c1df853f5be5b724164f07acfaf961ad4587fe284fbc842e976eb1/mistral-4.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2018-16849"
      ],
      "details": "A flaw was found in openstack-mistral. By manipulating the SSH private key filename, the std.ssh action can be used to disclose the presence of arbitrary files within the filesystem of the executor running the action. Since std.ssh private_key_filename can take an absolute path, it can be used to assess whether or not a file exists on the executor's filesystem.",
      "fixed_in": [
        "7.0.1"
      ],
      "id": "PYSEC-2018-92",
      "link": "https://osv.dev/vulnerability/PYSEC-2018-92",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2018-16848"
      ],
      "details": "A Denial of Service (DoS) condition is possible in OpenStack Mistral in versions up to and including 7.0.3. Submitting a specially crafted workflow definition YAML file containing nested anchors can lead to resource exhaustion culminating in a denial of service.",
      "fixed_in": [
        "7.0.4"
      ],
      "id": "PYSEC-2020-240",
      "link": "https://osv.dev/vulnerability/PYSEC-2020-240",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}