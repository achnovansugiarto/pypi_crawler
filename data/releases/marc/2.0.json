{
  "info": {
    "author": "Max Humber",
    "author_email": "max.humber@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "<h3 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/maxhumber/marc/master/marc.png\" width=\"500px\" alt=\"marc\">\n</h3>\n<p align=\"center\">\n  <a href=\"https://github.com/maxhumber/marc/blob/master/setup.py\"><img alt=\"Dependencies\" src=\"https://img.shields.io/badge/dependencies-zero-brightgreen\"></a>\n  <a href=\"https://travis-ci.org/maxhumber/marc\"><img alt=\"Travis\" src=\"https://img.shields.io/travis/maxhumber/marc.svg\"></a>\n  <a href=\"https://pypi.python.org/pypi/marc\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/marc.svg\"></a>\n  <a href=\"https://pepy.tech/project/marc\"><img alt=\"Downloads\" src=\"https://pepy.tech/badge/marc\"></a>\n</p>\n\n\n#### About\n\nmarc (<I>**mar**kov **c**hain</I>) is a small, but flexible Markov chain generator.\n\n\n\n#### Usage\n\nmarc is easy to use. To build a `MarkovChain` pass the object a sequence of items:\n\n```python\nfrom marc import MarkovChain\n\nsequence = [\n    'Rock', 'Rock', 'Rock', 'Paper', 'Rock', 'Scissors',\n    'Paper', 'Paper', 'Scissors', 'Rock', 'Scissors',\n    'Scissors', 'Paper', 'Scissors', 'Rock', 'Rock', 'Rock',\n    'Paper', 'Scissors', 'Scissors', 'Scissors', 'Rock'\n]\n\nchain = MarkovChain(sequence)\n```\n\nThe learned transition matrix can be accessed through the `matrix` attribute:\n\n```python\nprint(chain.matrix)\n# [[0.5, 0.25, 0.25], [0.2, 0.2, 0.6], [0.375, 0.25, 0.375]]\n```\n\nThough, the output is perhaps better viewed as a pandas `DataFrame`:\n\n```python\nimport pandas as pd\n\ndf = pd.DataFrame(\n    chain.matrix,\n    index=chain.encoder.index_,\n    columns=chain.encoder.index_\n)\n\nprint(df)\n#            Rock  Paper  Scissors\n# Rock      0.500   0.25     0.250\n# Paper     0.200   0.20     0.600\n# Scissors  0.375   0.25     0.375\n```\n\nUse the `next` method to generate the next state (seeded or unseeded):\n\n```python\nchain.next('Rock')\n# 'Rock'\n\nchain.next()\n# Paper\n```\n\nThe `next` method can also generate multiple states with the `n` argument:\n\n```python\nchain.next('Paper', n=5)\n# ['Scissors', 'Paper', 'Rock', 'Paper', 'Scissors']\n```\n\n`MarkovChain` objects are iterable. This means that they can be passed directly to the  `next` function:\n\n```python\nnext(chain)\n# 'Scissors'\n\nnext(chain)\n# Rock\n```\n\n\n\n#### Example\n\nA fully worked example of marc in action (block text provided by [quote](https://github.com/maxhumber/quote)):\n\n```python\nimport random\nimport re\nfrom quote import quote\nfrom marc import MarkovChain\n\nquotes = quote('shakespeare', 250)\nprint(quotes[0])\n\n# {'author': 'William Shakespeare',\n#  'book': 'As You Like It',\n#  'quote': 'The fool doth think he is wise, but the wise man knows himself to be a fool.'}\n\ntext = '\\n'.join([q['quote'] for q in quotes])\ntext = text.lower()\n\ntokens = re.findall(r\"[\\w']+|[.,!?;]\", text)\ntokens[:5]\n\n# ['the', 'fool', 'doth', 'think', 'he']\n\nchain = MarkovChain(tokens)\n\ndef generate_sentences(chain, n=2, length=(10, 20)):\n    for _ in range(n):\n        l = random.randint(length[0], length[1])\n        nonsense = ' '.join(chain.next(n=l))\n        print(nonsense)\n\ngenerate_sentences(chain)\n\n# and unless by some are fascinated by the hour upon the wind faithful\n# those that hath had a very much as flaws go\n```\n\n\n\n#### Install\n\n```\npip install -U marc\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maxhumber/marc",
    "keywords": "markov,markov chain,transition matrix,list encoder",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marc",
    "package_url": "https://pypi.org/project/marc/",
    "platform": "",
    "project_url": "https://pypi.org/project/marc/",
    "project_urls": {
      "Homepage": "https://github.com/maxhumber/marc"
    },
    "release_url": "https://pypi.org/project/marc/2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "marc is a small, but flexible Markov chain generator",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13964262,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9195eabff55fc5d68ed7c982526de79768ee34ffb4f64ecb606a6410f9e8fdd1",
        "md5": "fabb791a2db3466eedf53f4835cfdcb0",
        "sha256": "587a22fc078333a6a35b7646422cca121115d3d630f09fdc5eb1ee4ef5d75e5f"
      },
      "downloads": -1,
      "filename": "marc-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fabb791a2db3466eedf53f4835cfdcb0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3949,
      "upload_time": "2019-10-09T20:17:45",
      "upload_time_iso_8601": "2019-10-09T20:17:45.071574Z",
      "url": "https://files.pythonhosted.org/packages/91/95/eabff55fc5d68ed7c982526de79768ee34ffb4f64ecb606a6410f9e8fdd1/marc-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}