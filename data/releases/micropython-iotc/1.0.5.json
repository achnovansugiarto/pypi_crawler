{
  "info": {
    "author": "Luca Druda",
    "author_email": "ludruda@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Azure IoTCentral SDK for MicroPython\n\n[![Join the chat at https://gitter.im/iotdisc/community](https://badges.gitter.im/iotdisc.svg)](https://gitter.im/iotdisc/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Licensed under the MIT License](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/iot-for-all/iotc-micropython-client/blob/master/LICENSE)\n[![PyPI version](https://badge.fury.io/py/micropython-iotc.svg)](https://badge.fury.io/py/micropython-iotc)\n\n### An Azure IoT Central device client library for Micropython.\nThis repository contains code for the Azure IoT Central SDK for Micropython. This enables micropython developers to easily create device solutions that semealessly connect to Azure IoT Central applications.\nIt can run on various boards with some tweaks for low-memory devices.\n\n\n## Prerequisites\n+ Micropython 1.12+ (recommended)\n\n## Import ``iotc``\nIn most of the micropython capable boards, is sufficient to import library or install it if missing through upip.\n\n```py\ntry:\n    import iotc\nexcept:\n    import upip\n    upip.install('micropython-iotc')\n    import iotc\n```\n\nThe same commands apply when running through Micropython REPL.\n\n> **NOTE:** for low-end devices like the **ESP8266**, importing as external module can cause out-of-memory exception during execution because of the limited amount of heap space.\nFor this kind of boards, putting the library on flash memory as a frozen module might be the only available option.<br/><br/>\nDetails on how to build a custom firmware for specific boards with frozen modules can be found on official micropython [github repository](https://github.com/micropython/micropython) and [website](http://docs.micropython.org/en/latest/).\n\n\n## Samples\nCheck out the [sample repository](samples) for example code showing how the SDK can be used in the various scenarios:\n\n\n## Connecting\nCurrently only connection through Shared Access Keys is supported.\nYou can use both device keys or group keys.\n\n### Init\n```py\nfrom iotc import IoTCConnectType\nid_scope = 'scopeID'\ndevice_id = 'device_id'\nsasKey = 'masterKey' # or use device key directly\nconn_type=IoTCConnectType.SYMM_KEY # or use DEVICE_KEY if working with device keys\nclient = IoTCClient(id_scope, device_id, conn_type, sasKey)\n```\n\nYou can pass a logger instance to have your custom log implementation. (see [#Logging](#logging))\n\ne.g.\n\n```py\nfrom iotc import ConsoleLogger,IoTCLogLevel\nlogger = ConsoleLogger(IoTCLogLevel.ALL)\nclient = IoTCClient(id_scope, device_id, conn_type, sasKey, logger)\n```\n\n### Connect\n\n```py\nclient.connect()\n```\nAfter successfull connection, IOTC context is available for further commands.\n\n## Operations\n\n### Send telemetry\n\n```py\nclient.send_telemetry(payload,properties=None)\n```\n\ne.g. Send telemetry every 3 seconds\n```py\nwhile client.is_connected():\n    print('Sending telemetry')\n    client.send_telemetry({'temperature':randint(0,20),'pressure':randint(0,20),'acceleration':{'x':randint(0,20),'y':randint(0,20)}})\n    sleep(3)\n```\nAn optional *properties* object can be included in the send methods, to specify additional properties for the message (e.g. timestamp,etc... ).\nProperties can be custom or part of the reserved ones (see list [here](https://github.com/Azure/azure-iot-sdk-csharp/blob/master/iothub/device/src/MessageSystemPropertyNames.cs#L36)).\n\n> **NOTE:** Payload content type and encoding are set by default to 'application/json' and 'utf-8'. Alternative values can be set using these functions:<br/>\n_iotc.set_content_type(content_type)_ # .e.g 'text/plain'\n_iotc.set_content_encoding(content_encoding)_ # .e.g 'ascii'\n\n### Send property update\n```py\nclient.send_property({'fieldName':'fieldValue'})\n```\n\n### Listen to properties update\nSubscribe to properties update event before calling _connect()_:\n```py\nclient.on(IoTCEvents.PROPERTIES, callback)\n```\nTo provide property sync aknowledgement, the callback must return the \nproperty value if has been successfully applied or nothing.\n\ne.g.\n```py\ndef on_props(prop_name, prop_value):\n    if prop_value>10:\n        # process property\n        return prop_value\n\nclient.on(IoTCEvents.PROPERTIES, on_props)\n```\n\n### Listen to commands\nSubscribe to command events before calling _connect()_:\n```py\nclient.on(IoTCEvents.COMMANDS, callback)\n```\nTo provide feedbacks for the command like execution result or progress, the client can call the **ack** function available in the callback.\n\nThe function accepts 2 arguments: the command instance and a custom response message.\n```py\ndef on_commands(command, ack):\n    print(command.name)\n    ack(command, 'Command received')\n\nclient.on(IoTCEvents.COMMANDS, on_commands)\n```\n\n## Logging\n\nThe default log prints to serial console operations status and errors.\nThis is the _API_ONLY_ logging level.\nThe function __set_log_level()__ can be used to change options or disable logs. It accepts a _IoTCLogLevel_ value among the following:\n\n-  IoTCLogLevel.DISABLED (log disabled)\n-  IoTCLogLevel.API_ONLY (information and errors, default)\n-  IoTCLogLevel.ALL (all messages, debug and underlying errors)\n\nThe device client also accepts an optional Logger instance to redirect logs to other targets than console.\nThe custom class must implement three methods:\n\n- info(message)\n- debug(message)\n- set_log_level(message);\n\n## One-touch device provisioning and approval\nA device can send custom data during provision process: if a device is aware of its IoT Central template Id, then it can be automatically provisioned.\n\n### How to set IoTC template ID in your device\nTemplate Id can be found in the device explorer page of IoTCentral\n![Img](assets/modelid_1.png)\n![Img](assets/modelid_2.png)\n\nThen call this method before connect():\n\n```py\nclient.set_model_id('<modelId>');\n```\n\n### Manual approval (default)\nBy default device auto-approval in IoT Central is disabled, which means that administrator needs to approve the device registration to complete the provisioning process.\nThis can be done from explorer page after selecting the device\n![Img](assets/manual_approval.jpg)\n\n\n### Automatic approval\nTo change default behavior, administrator can enable device auto-approval from Device Connection page under the Administration section.\nWith automatic approval a device can be provisioned without any manual action and can start sending/receiving data after status changes to \"Provisioned\"\n\n![Img](assets/auto_approval.jpg)\n\n## License\nThis samples is licensed with the MIT license. For more information, see [LICENSE](./LICENSE)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iot-for-all/iotc-micropython-client",
    "keywords": "",
    "license": "MIT",
    "maintainer": "IoT Central Developers",
    "maintainer_email": "",
    "name": "micropython-iotc",
    "package_url": "https://pypi.org/project/micropython-iotc/",
    "platform": "",
    "project_url": "https://pypi.org/project/micropython-iotc/",
    "project_urls": {
      "Homepage": "https://github.com/iot-for-all/iotc-micropython-client"
    },
    "release_url": "https://pypi.org/project/micropython-iotc/1.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Azure IoT Central client for MicroPython (mqtt protocol)",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9373155,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8ff66254a7dd1d099bf14404e2732c8abd5a64f4994c08bc522314232ba4412",
        "md5": "24f08cc0802e22a914f70c2c04755288",
        "sha256": "eef13a5b412ead5c731c07259f58ea644862a848a093a0317f3f8cab56413bea"
      },
      "downloads": -1,
      "filename": "micropython-iotc-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "24f08cc0802e22a914f70c2c04755288",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9554,
      "upload_time": "2020-07-29T14:45:54",
      "upload_time_iso_8601": "2020-07-29T14:45:54.928501Z",
      "url": "https://files.pythonhosted.org/packages/c8/ff/66254a7dd1d099bf14404e2732c8abd5a64f4994c08bc522314232ba4412/micropython-iotc-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}