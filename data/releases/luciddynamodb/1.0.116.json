{
  "info": {
    "author": "Dinesh Sonachalam",
    "author_email": "dineshsonachalam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<h1 align=\"center\">\n  <a href=\"https://pypi.org/project/LucidDynamodb\" target=\"_blank\">\n    <img src=\"https://i.imgur.com/r9hHHUo.png\" alt=\"LucidDynamodb\">\n  </a>\n</h1>\n<p align=\"center\">\n    <em>A minimalistic wrapper to AWS DynamoDB</em>\n</p>\n<p align=\"center\">\n    <a href=\"https://sonarcloud.io/dashboard?id=lucid-dynamodb\">\n        <img src=\"https://sonarcloud.io/api/project_badges/quality_gate?project=lucid-dynamodb\"/>\n    </a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://www.codacy.com/gh/dineshsonachalam/lucid-dynamodb/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=dineshsonachalam/lucid-dynamodb&amp;utm_campaign=Badge_Grade\">\n        <img src=\"https://app.codacy.com/project/badge/Grade/3607dfd408bb4b7394cb0631b717a76e\"/>\n    </a>\n    <a href=\"https://snyk.io/test/github/dineshsonachalam/lucid-dynamodb\">\n        <img src=\"https://snyk.io/test/github/dineshsonachalam/lucid-dynamodb/badge.svg\"/>\n    </a>\n    <a href=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/actions\" target=\"_blank\">\n        <img src=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/actions/workflows/pypi-deploy.yml/badge.svg\" alt=\"Deployment\">\n    </a>\n    <a href=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/actions\" target=\"_blank\">\n        <img src=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/workflows/markdown-autodocs/badge.svg\" alt=\"Deployment\">\n    </a>\n    <a href=\"https://pypi.org/project/LucidDynamodb\" target=\"_blank\">\n        <img src=\"https://img.shields.io/pypi/v/LucidDynamodb?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n    </a>\n    <a href=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/blob/master/LICENSE\" target=\"_blank\">\n        <img src=\"https://badgen.net/github/license/dineshsonachalam/Lucid-Dynamodb\" alt=\"MIT License\" height=\"20\">\n    </a>\n</p>\n\n## Table of contents\n- [Installation](#installation)\n- [Example](#example)\n    - [Connect to DynamodDB](#connect-to-dynamodb)\n    - [Create a new table](#create-a-new-table)\n    - [Get all table names](#get-all-table-names)\n    - [Create a New Item](#create-a-new-item)\n    - [Read an Item](#read-an-item)\n    - [Increase an existing attribute value](#increase-an-existing-attribute-value)\n    - [Update existing attribute in an item](#update-existing-attribute-in-an-item)\n    - [Add a new attribute in an item](#add-a-new-attribute-in-an-item)\n    - [Add an attribute to the list](#add-an-attribute-to-the-list)\n    - [Add an attribute to the string set](#add-an-attribute-to-the-string-set)\n    - [Delete an attribute from the string set](#delete-an-attribute-from-the-string-set)\n    - [Delete an attribute from an item](#delete-an-attribute-from-an-item)\n    - [Read items by filter](#read-items-by-filter)\n    - [Delete a table](#delete-a-table)\n- [Running tests](#running-tests)\n- [Github Workflow Artifacts](#github-workflow-artifacts)\n- [License](#license)\n\n## Installation\n<div class=\"termy\">\n\n```console\npip install LucidDynamodb\n```\n\n</div>\n\n**Note:**  <a href=\"https://gist.github.com/dineshsonachalam/88f55b28c1f0c1ce93421f5a8f33e84a\"> Prerequisite for Python3 development </a>\n\n## Example\n\n#### Connect to DynamoDB\nYou can connect to DynamoDB by following any of these two ways.\n\n1. Using AWS config\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/using-aws-config-to-connect-to-dynamodb.py) -->\n<!-- The below code snippet is automatically added from ./examples/using-aws-config-to-connect-to-dynamodb.py -->\n```py\nfrom LucidDynamodb import DynamoDb\ndb = DynamoDb()\n# $> pip install awscli  #can add user flag\n# $> aws configure\n# AWS Access Key ID [****************ABCD]:[enter your key here]\n# AWS Secret Access Key [****************xyz]:[enter your secret key here]\n# Default region name [us-west-2]:[enter your region here]\n# Default output format [None]:\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n2. Using AWS secret key\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/using-aws-secret-to-connect-to-dynamodb.py) -->\n<!-- The below code snippet is automatically added from ./examples/using-aws-secret-to-connect-to-dynamodb.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport os\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\ndb = DynamoDb(region_name=\"us-east-1\",\n              aws_access_key_id=AWS_ACCESS_KEY_ID,\n              aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Create a new table\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/1-create-a-new-table.py) -->\n<!-- The below code snippet is automatically added from ./examples/1-create-a-new-table.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\ntable_schema = {\n\t\"TableName\": \"dev_jobs\",\n\t\"KeySchema\": [\n        {\n            \"AttributeName\": \"company_name\",\n            \"KeyType\": \"HASH\"\n\t    },\n        {\n            \"AttributeName\": \"role_id\",\n            \"KeyType\": \"RANGE\"\n\t    }\n    ],\n\t\"AttributeDefinitions\": [\n        {\n            \"AttributeName\": \"company_name\",\n            \"AttributeType\": \"S\"\n\t    },\n        {\n            \"AttributeName\": \"role_id\",\n            \"AttributeType\": \"S\"\n\t    }\n     ],\n\t\"GlobalSecondaryIndexes\": [],\n\t\"ProvisionedThroughput\": {\n\t\t\"ReadCapacityUnits\": 1,\n\t\t\"WriteCapacityUnits\": 1\n\t}\n}\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    table_creation_status = db.create_table(\n                                    table_name=table_schema.get(\"TableName\"),\n                                    key_schema=table_schema.get(\"KeySchema\"),\n                                    attribute_definitions=table_schema.get(\"AttributeDefinitions\"),\n                                    global_secondary_indexes=table_schema.get(\"GlobalSecondaryIndexes\"),\n                                    provisioned_throughput=table_schema.get(\"ProvisionedThroughput\")\n    )\n    try:\n        logging.info(\"{} table created successfully\".format(table_schema.get(\"TableName\")))\n    except Exception as e:\n        logging.error(\"{} table creation failed - {}\".format(table_schema.get(\"TableName\"), e))\n\"\"\"\ndineshsonachalam@macbook examples % python 1-create-a-new-table.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:dev_jobs table created successfully\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Get all table names\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/2-get-all-table-names.py) -->\n<!-- The below code snippet is automatically added from ./examples/2-get-all-table-names.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    table_names = db.read_all_table_names()\n    logging.info(\"Table names: {}\".format(table_names))\n\"\"\"\ndineshsonachalam@macbook examples % python 2-get-all-table-names.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Table names: ['dev_jobs', 'dev_test']\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Create a New Item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/3-create-a-new-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/3-create-a-new-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    item_creation_status = db.create_item(\n        table_name=\"dev_jobs\",\n        item={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\",\n            \"role\": \"Software Engineer 1\",\n            \"salary\": \"$1,50,531\",\n            \"locations\": [\"Mountain View, California\", \"Austin, Texas\", \"Chicago, IL\"],\n            \"yearly_hike_percent\": 8,\n            \"benefits\": set([\"Internet, Medical, Edu reimbursements\",\n                             \"Health insurance\",\n                             \"Travel reimbursements\"\n                             ]),\n            \"overall_review\":{\n                \"overall_rating\" : \"4/5\",\n                \"compensation_and_benefits\": \"3.9/5\"\n            }\n        }\n    )\n    try:\n        logging.info(\"Item created successfully\")\n    except Exception as e:\n        logging.warning(\"Item creation failed - {}\".format(e))\n\"\"\"\ndineshsonachalam@macbook examples % python 3-create-a-new-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Item created successfully\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Read an Item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/4-read-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/4-read-an-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    item = db.read_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        }\n    )\n    try:\n        logging.info(\"Item: {}\".format(item))\n    except Exception as e:\n        logging.warning(\"Item doesn't exist - {}\".format(e))\n\"\"\"\ndineshsonachalam@macbook examples % python 4-read-an-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Item: {\n    \"locations\": [\n        \"Mountain View, California\",\n        \"Austin, Texas\",\n        \"Chicago, IL\"\n    ],\n    \"role_id\": \"111\",\n    \"overall_review\": {\n        \"compensation_and_benefits\": \"3.9/5\",\n        \"overall_rating\": \"4/5\"\n    },\n    \"company_name\": \"Google\",\n    \"role\": \"Software Engineer 1\",\n    \"yearly_hike_percent\": \"8\",\n    \"salary\": \"$1,50,531\",\n    \"benefits\": [\n        \"Travel reimbursements\",\n        \"Internet, Medical, Edu reimbursements\",\n        \"Health insurance\"\n    ]\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Increase an existing attribute value\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/5-increase-an-existing-attribute-value.py) -->\n<!-- The below code snippet is automatically added from ./examples/5-increase-an-existing-attribute-value.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    increase_attribute_status = db.increase_attribute_value(\n        table_name='dev_jobs',\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        },\n        attribute_name=\"yearly_hike_percent\",\n        increment_value=5\n    )\n    try:\n        logging.info(\"Attribute value increment completed\")\n    except Exception as e:\n        logging.warning(\"Attribute value increment failed - {}\".format(e))\n    item = db.read_item(\n        table_name='dev_jobs',\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        })\n    try:\n        logging.info(\"Item: {}\".format(item))\n    except Exception as e:\n        logging.warning(\"Item doesn't exist - {}\".format(e))\n\"\"\"\ndineshsonachalam@macbook examples % python 5-increase-an-existing-attribute-value.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Attribute value increment completed\nINFO:root:Item: {\n    \"locations\": [\n        \"Mountain View, California\",\n        \"Austin, Texas\",\n        \"Chicago, IL\"\n    ],\n    \"role_id\": \"111\",\n    \"overall_review\": {\n        \"compensation_and_benefits\": \"3.9/5\",\n        \"overall_rating\": \"4/5\"\n    },\n    \"company_name\": \"Google\",\n    \"role\": \"Software Engineer 1\",\n    \"yearly_hike_percent\": \"13\",\n    \"salary\": \"$1,50,531\",\n    \"benefits\": [\n        \"Health insurance\",\n        \"Internet, Medical, Edu reimbursements\",\n        \"Travel reimbursements\"\n    ]\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Update existing attribute in an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/6-update-existing-attribute-in-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/6-update-existing-attribute-in-an-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    item_update_status = db.update_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        },\n        attributes_to_update={\n            'role': 'Staff Software Engineer 2'\n        }\n    )\n    try:\n        logging.info(\"Update is successful\")\n    except Exception as e:\n        logging.warning(\"Update failed - {}\".format(e))\n\n    item = db.read_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        })\n    try:\n        logging.info(\"Item: {}\".format(item))\n    except Exception as e:\n        logging.warning(\"Item doesn't exist - {}\".format(e))\n\"\"\"\ndineshsonachalam@macbook examples % python 6-update-existing-attribute-in-an-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Update is successful\nINFO:root:Item: {\n    \"locations\": [\n        \"Mountain View, California\",\n        \"Austin, Texas\",\n        \"Chicago, IL\"\n    ],\n    \"role_id\": \"111\",\n    \"overall_review\": {\n        \"compensation_and_benefits\": \"3.9/5\",\n        \"overall_rating\": \"4/5\"\n    },\n    \"company_name\": \"Google\",\n    \"role\": \"Staff Software Engineer 2\",\n    \"yearly_hike_percent\": \"13\",\n    \"salary\": \"$1,50,531\",\n    \"benefits\": [\n        \"Health insurance\",\n        \"Internet, Medical, Edu reimbursements\",\n        \"Travel reimbursements\"\n    ]\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Add a new attribute in an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/7-add-a-new-attribute-in-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/7-add-a-new-attribute-in-an-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    item_update_status = db.update_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        },\n        attributes_to_update={\n            'overall_review.yearly_bonus_percent': 12\n        }\n    )\n    try:\n        logging.info(\"Update is successful\")\n    except Exception as e:\n        logging.warning(\"Update failed - {}\".format(e))\n\n    item = db.read_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        })\n    try:\n        logging.info(\"Item: {}\".format(item))\n    except Exception as e:\n        logging.warning(\"Item doesn't exist - {}\".format(e))\n\"\"\"\ndineshsonachalam@macbook examples % python 7-add-a-new-attribute-in-an-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Update is successful\nINFO:root:Item: {\n    \"locations\": [\n        \"Mountain View, California\",\n        \"Austin, Texas\",\n        \"Chicago, IL\"\n    ],\n    \"role_id\": \"111\",\n    \"overall_review\": {\n        \"compensation_and_benefits\": \"3.9/5\",\n        \"overall_rating\": \"4/5\",\n        \"yearly_bonus_percent\": \"12\"\n    },\n    \"company_name\": \"Google\",\n    \"role\": \"Staff Software Engineer 2\",\n    \"yearly_hike_percent\": \"13\",\n    \"salary\": \"$1,50,531\",\n    \"benefits\": [\n        \"Internet, Medical, Edu reimbursements\",\n        \"Health insurance\",\n        \"Travel reimbursements\"\n    ]\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Add an attribute to the list\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/8-add-an-attribute-to-the-list.py) -->\n<!-- The below code snippet is automatically added from ./examples/8-add-an-attribute-to-the-list.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    item_update_status = db.update_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        },\n        attributes_to_update={\n            'locations': \"Detroit, Michigan\"\n        },\n        operation=\"ADD_ATTRIBUTE_TO_LIST\"\n    )\n    try:\n        logging.info(\"Update is successful\")\n    except Exception as e:\n        logging.warning(\"Update failed - {}\".format(e))\n\n    item = db.read_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        })\n    try:\n        logging.info(\"Item: {}\".format(item))\n    except Exception as e:\n        logging.warning(\"Item doesn't exist - {}\".format(e))\n\"\"\"\ndineshsonachalam@macbook examples % python 8-add-an-attribute-to-the-list.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Update is successful\nINFO:root:Item: {\n    \"locations\": [\n        \"Mountain View, California\",\n        \"Austin, Texas\",\n        \"Chicago, IL\",\n        \"Detroit, Michigan\"\n    ],\n    \"role_id\": \"111\",\n    \"overall_review\": {\n        \"compensation_and_benefits\": \"3.9/5\",\n        \"overall_rating\": \"4/5\",\n        \"yearly_bonus_percent\": \"12\"\n    },\n    \"company_name\": \"Google\",\n    \"role\": \"Staff Software Engineer 2\",\n    \"yearly_hike_percent\": \"13\",\n    \"salary\": \"$1,50,531\",\n    \"benefits\": [\n        \"Internet, Medical, Edu reimbursements\",\n        \"Travel reimbursements\",\n        \"Health insurance\"\n    ]\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Add an attribute to the string set\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/9-add-an-attribute-to-the-string-set.py) -->\n<!-- The below code snippet is automatically added from ./examples/9-add-an-attribute-to-the-string-set.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    item_update_status = db.update_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        },\n        attributes_to_update={\n            'benefits': \"Free Food\"\n        },\n        operation=\"ADD_ATTRIBUTE_TO_STRING_SET\"\n    )\n    try:\n        logging.info(\"Update is successful\")\n    except Exception as e:\n        logging.warning(\"Update failed - {}\".format(e))\n\n    item = db.read_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        })\n    try:\n        logging.info(\"Item: {}\".format(item))\n    except Exception as e:\n        logging.warning(\"Item doesn't exist - {}\".format(e))\n\"\"\"\ndineshsonachalam@macbook examples % python 9-add-an-attribute-to-the-string-set.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Update is successful\nINFO:root:Item: {\n    \"locations\": [\n        \"Mountain View, California\",\n        \"Austin, Texas\",\n        \"Chicago, IL\",\n        \"Detroit, Michigan\"\n    ],\n    \"role_id\": \"111\",\n    \"overall_review\": {\n        \"compensation_and_benefits\": \"3.9/5\",\n        \"overall_rating\": \"4/5\",\n        \"yearly_bonus_percent\": \"12\"\n    },\n    \"company_name\": \"Google\",\n    \"role\": \"Staff Software Engineer 2\",\n    \"yearly_hike_percent\": \"13\",\n    \"salary\": \"$1,50,531\",\n    \"benefits\": [\n        \"Free Food\",\n        \"Internet, Medical, Edu reimbursements\",\n        \"Health insurance\",\n        \"Travel reimbursements\"\n    ]\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Delete an attribute from the string set\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/10-delete-an-attribute-from-the-string-set.py) -->\n<!-- The below code snippet is automatically added from ./examples/10-delete-an-attribute-from-the-string-set.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    item_update_status = db.update_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        },\n        attributes_to_update={\n            'benefits': \"Free Food\"\n        },\n        operation=\"DELETE_ATTRIBUTE_FROM_STRING_SET\"\n    )\n    try:\n        logging.info(\"Update is successful\")\n    except Exception as e:\n        logging.warning(\"Update failed - {}\".format(e))\n\n    item = db.read_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        })\n    try:\n        logging.info(\"Item: {}\".format(item))\n    except Exception as e:\n        logging.warning(\"Item doesn't exist - {}\".format(e))\n\"\"\"\ndineshsonachalam@macbook examples % python 10-delete-an-attribute-from-the-string-set.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Update is successful\nINFO:root:Item: {\n    \"locations\": [\n        \"Mountain View, California\",\n        \"Austin, Texas\",\n        \"Chicago, IL\",\n        \"Detroit, Michigan\"\n    ],\n    \"role_id\": \"111\",\n    \"overall_review\": {\n        \"compensation_and_benefits\": \"3.9/5\",\n        \"overall_rating\": \"4/5\",\n        \"yearly_bonus_percent\": \"12\"\n    },\n    \"company_name\": \"Google\",\n    \"role\": \"Staff Software Engineer 2\",\n    \"yearly_hike_percent\": \"13\",\n    \"salary\": \"$1,50,531\",\n    \"benefits\": [\n        \"Internet, Medical, Edu reimbursements\",\n        \"Health insurance\",\n        \"Travel reimbursements\"\n    ]\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Delete an attribute from an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/11-delete-an-attribute-from-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/11-delete-an-attribute-from-an-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    attribute_delete_status = db.delete_attribute(\n        table_name=\"dev_jobs\",\n        key={\"company_name\": \"Google\", \"role_id\": \"111\"},\n        attribute_name=\"yearly_hike_percent\")\n\n    try:\n        logging.info(\"The attribute is deleted successfully\")\n    except Exception as e:\n        logging.warning(\"The attribute delete operation failed - {}\".format(e))\n\n    item = db.read_item(\n        table_name=\"dev_jobs\",\n        key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"111\"\n        })\n    try:\n        logging.info(\"Item: {}\".format(item))\n    except Exception as e:\n        logging.warning(\"Item doesn't exist - {}\".format(e))\n\"\"\"\ndineshsonachalam@macbook examples % python 11-delete-an-attribute-from-an-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:The attribute is deleted successfully\nINFO:root:Item: {\n    \"locations\": [\n        \"Mountain View, California\",\n        \"Austin, Texas\",\n        \"Chicago, IL\",\n        \"Detroit, Michigan\"\n    ],\n    \"role_id\": \"111\",\n    \"overall_review\": {\n        \"compensation_and_benefits\": \"3.9/5\",\n        \"overall_rating\": \"4/5\",\n        \"yearly_bonus_percent\": \"12\"\n    },\n    \"company_name\": \"Google\",\n    \"role\": \"Staff Software Engineer 2\",\n    \"salary\": \"$1,50,531\",\n    \"benefits\": [\n        \"Health insurance\",\n        \"Internet, Medical, Edu reimbursements\",\n        \"Travel reimbursements\"\n    ]\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Read items by filter\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/12-read-items-by-filter.py) -->\n<!-- The below code snippet is automatically added from ./examples/12-read-items-by-filter.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    item_creation_status = db.create_item(\n        table_name=\"dev_jobs\",\n        item={\n            \"company_name\": \"Google\",\n            \"role_id\": \"112\",\n            \"role\": \"Software Architect\",\n            \"salary\": \"$4,80,000\",\n            \"locations\": [\"Mountain View, California\"],\n            \"yearly_hike_percent\": 13,\n            \"benefits\": set([\"Internet reimbursements\"]),\n            \"overall_review\":{\n                \"overall_rating\" : \"3/5\",\n                \"compensation_and_benefits\": \"4.2/5\"\n            }\n        }\n    )\n    try:\n        logging.info(\"Item created successfully\")\n    except Exception as e:\n        logging.warning(\"Item creation failed - {}\".format(e))\n    items = db.read_items_by_filter(\n                    table_name='dev_jobs',\n                    key_condition_expression=Key(\"company_name\").eq(\"Google\")\n    )\n\n    try:\n        logging.info(\"Items: {}\".format(items))\n    except Exception as e:\n        logging.warning(f\"Items doesn't exist - {e}\")\n\"\"\"\ndineshsonachalam@macbook examples % python 12-read-items-by-filter.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Item created successfully\nINFO:root:Items: [\n    {\n        \"locations\": [\n            \"Mountain View, California\",\n            \"Austin, Texas\",\n            \"Chicago, IL\",\n            \"Detroit, Michigan\"\n        ],\n        \"role_id\": \"111\",\n        \"overall_review\": {\n            \"compensation_and_benefits\": \"3.9/5\",\n            \"overall_rating\": \"4/5\",\n            \"yearly_bonus_percent\": \"12\"\n        },\n        \"company_name\": \"Google\",\n        \"role\": \"Staff Software Engineer 2\",\n        \"salary\": \"$1,50,531\",\n        \"benefits\": [\n            \"Travel reimbursements\",\n            \"Health insurance\",\n            \"Internet, Medical, Edu reimbursements\"\n        ]\n    },\n    {\n        \"locations\": [\n            \"Mountain View, California\"\n        ],\n        \"role_id\": \"112\",\n        \"overall_review\": {\n            \"compensation_and_benefits\": \"4.2/5\",\n            \"overall_rating\": \"3/5\"\n        },\n        \"company_name\": \"Google\",\n        \"role\": \"Software Architect\",\n        \"yearly_hike_percent\": \"13\",\n        \"salary\": \"$4,80,000\",\n        \"benefits\": [\n            \"Internet reimbursements\"\n        ]\n    }\n]\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Delete a table\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/13-delete-a-table.py) -->\n<!-- The below code snippet is automatically added from ./examples/13-delete-a-table.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    db = DynamoDb()\n    delete_table_status = db.delete_table(table_name='dev_jobs')\n    try:\n        logging.info(\"Table deleted successfully\")\n    except Exception as e:\n        logging.warning(f\"Table delete operation failed {e}\")\n\n    table_names = db.read_all_table_names()\n    logging.info(\"Table names: {}\".format(table_names))\n\"\"\"\ndineshsonachalam@macbook examples % python 13-delete-a-table.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Table deleted successfully\nINFO:root:Table names: ['dev_test']\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n## Running Tests\n\nTo run tests, run the following command\n\n```bash\npytest -s\n```\n\n## Github Workflow Artifacts\n\n<!-- MARKDOWN-AUTO-DOCS:START (WORKFLOW_ARTIFACT_TABLE) -->\n<table class=\"ARTIFACTS-TABLE\"><thead><tr><th class=\"artifact-th\">Artifact</th><th class=\"workflow-th\">Workflow</th></tr></thead><tbody ><tr ><td class=\"artifact-td td_text\"><a href=https://github.com/dineshsonachalam/lucid-dynamodb/suites/3314115840/artifacts/77576880>dependency-graph</a></td><td class=\"workflow-td td_text\"><a href=https://github.com/dineshsonachalam/lucid-dynamodb/actions/runs/1059955493>integration-tests</a></td></tr>\n<tr ><td class=\"artifact-td td_text\"><a href=https://github.com/dineshsonachalam/lucid-dynamodb/suites/3314115840/artifacts/77576881>module-dependencies-license-report</a></td><td class=\"workflow-td td_text\"><a href=https://github.com/dineshsonachalam/lucid-dynamodb/actions/runs/1059955493>integration-tests</a></td></tr></tbody></table>\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/) © [dineshsonachalam](https://www.github.com/dineshsonachalam)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dineshsonachalam/Lucid-Dynamodb",
    "keywords": "python dynamodb amazon",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LucidDynamodb",
    "package_url": "https://pypi.org/project/LucidDynamodb/",
    "platform": "",
    "project_url": "https://pypi.org/project/LucidDynamodb/",
    "project_urls": {
      "Homepage": "https://github.com/dineshsonachalam/Lucid-Dynamodb"
    },
    "release_url": "https://pypi.org/project/LucidDynamodb/1.0.116/",
    "requires_dist": [
      "boto3 (>=1.17.78)",
      "botocore (>=1.20.78)"
    ],
    "requires_python": ">=3.1",
    "summary": "A simple Python wrapper to AWS Dynamodb",
    "version": "1.0.116",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11058363,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20b9fa9420e5beb80c87113744133ceb67e9b9e0e6f6c0672f2d1a1f1cac2031",
        "md5": "c22749b8ec3bb5fd0fbae4e73f9ad342",
        "sha256": "5ee0d2d856d48bbc102b73838dc581b96453dca1765b408a374584aac147f589"
      },
      "downloads": -1,
      "filename": "LucidDynamodb-1.0.116-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c22749b8ec3bb5fd0fbae4e73f9ad342",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.1",
      "size": 11935,
      "upload_time": "2021-07-23T15:16:24",
      "upload_time_iso_8601": "2021-07-23T15:16:24.900170Z",
      "url": "https://files.pythonhosted.org/packages/20/b9/fa9420e5beb80c87113744133ceb67e9b9e0e6f6c0672f2d1a1f1cac2031/LucidDynamodb-1.0.116-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20f0513d05b9972e03150406cab27244fc49045c25418d92da4f0f703c35c575",
        "md5": "8c26edc2b9b942515e9fd673883e908c",
        "sha256": "8a280b3b3eb098840ba8437a4f08933c6feb6c43aea2bcbecc284303e5695780"
      },
      "downloads": -1,
      "filename": "LucidDynamodb-1.0.116.tar.gz",
      "has_sig": false,
      "md5_digest": "8c26edc2b9b942515e9fd673883e908c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.1",
      "size": 15846,
      "upload_time": "2021-07-23T15:16:26",
      "upload_time_iso_8601": "2021-07-23T15:16:26.920419Z",
      "url": "https://files.pythonhosted.org/packages/20/f0/513d05b9972e03150406cab27244fc49045c25418d92da4f0f703c35c575/LucidDynamodb-1.0.116.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}