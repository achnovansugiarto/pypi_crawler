{
  "info": {
    "author": "Dinesh Sonachalam",
    "author_email": "dineshsonachalam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<h1 align=\"center\">\n  <a href=\"https://pypi.org/project/LucidDynamodb\" target=\"_blank\">\n    <img src=\"https://i.imgur.com/r9hHHUo.png\" alt=\"LucidDynamodb\">\n  </a>\n</h1>\n<p align=\"center\">\n    <em>A minimalistic wrapper to AWS DynamoDB</em>\n</p>\n<p align=\"center\">\n    <a href=\"https://sonarcloud.io/dashboard?id=lucid-dynamodb\">\n        <img src=\"https://sonarcloud.io/api/project_badges/quality_gate?project=lucid-dynamodb\"/>\n    </a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://www.codacy.com/gh/dineshsonachalam/lucid-dynamodb/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=dineshsonachalam/lucid-dynamodb&amp;utm_campaign=Badge_Grade\">\n        <img src=\"https://app.codacy.com/project/badge/Grade/3607dfd408bb4b7394cb0631b717a76e\"/>\n    </a>\n    <a href=\"https://snyk.io/test/github/dineshsonachalam/lucid-dynamodb\">\n        <img src=\"https://snyk.io/test/github/dineshsonachalam/lucid-dynamodb/badge.svg\"/>\n    </a>\n    <a href=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/actions\" target=\"_blank\">\n        <img src=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/actions/workflows/pypi-deploy.yml/badge.svg\" alt=\"Deployment\">\n    </a>\n    <a href=\"https://pypi.org/project/LucidDynamodb\" target=\"_blank\">\n        <img src=\"https://img.shields.io/pypi/v/LucidDynamodb?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n    </a>\n    <a href=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/blob/master/LICENSE\" target=\"_blank\">\n        <img src=\"https://badgen.net/github/license/dineshsonachalam/Lucid-Dynamodb\" alt=\"MIT License\" height=\"20\">\n    </a>\n</p>\n\n## Table of contents\n- [Installation](#installation)\n- [Example](#example)\n    - [Connect to DynamodDB](#connect-to-dynamodb)\n    - [Create a new table](#create-a-new-table)\n    - [Get all table names](#get-all-table-names)\n    - [Create a New Item](#create-a-new-item)\n    - [Read an Item](#read-an-item)\n    - [Read items by filter](#read-items-by-filter)\n    - [Update existing attribute in an item](#update-existing-attribute-in-an-item)\n    - [Add a new attribute in an item](#add-a-new-attribute-in-an-item)\n    - [Add an attribute to the list](#add-an-attribute-to-the-list)\n    - [Add an attribute to the string set](#add-an-attribute-to-the-string-set)\n    - [Increase an existing attribute value](#increase-an-existing-attribute-value)\n    - [Delete an attribute from an item](#delete-an-attribute-from-an-item)\n    - [Delete an attribute from the string set](#delete-an-attribute-from-the-string-set)\n    - [Delete an item](#delete-an-item)\n    - [Delete a table](#delete-a-table)\n- [Running tests](#running-tests)\n- [Github Workflow Artifacts](#github-workflow-artifacts)\n- [License](#license)\n\n## Installation\n<div class=\"termy\">\n\n```console\npip install LucidDynamodb\n```\n\n</div>\n\n**Note:**  <a href=\"https://gist.github.com/dineshsonachalam/88f55b28c1f0c1ce93421f5a8f33e84a\"> Prerequisite for Python3 development </a>\n\n## Example\n\n#### Connect to DynamoDB\nYou can connect to DynamoDB by following any of these two ways.\n\n1. Using AWS config\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/using-aws-config-to-connect-to-dynamodb.py) -->\n<!-- The below code snippet is automatically added from ./examples/using-aws-config-to-connect-to-dynamodb.py -->\n```py\nfrom LucidDynamodb import DynamoDb\ndb = DynamoDb()\n\n\"\"\"\n$ pip install awscli  #can add user flag\n$ aws configure\nAWS Access Key ID [****************ABCD]:[enter your key here]\nAWS Secret Access Key [****************xyz]:[enter your secret key here]\nDefault region name [us-west-2]:[enter your region here]\nDefault output format [None]:\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n2. Using AWS secret key\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/using-aws-secret-to-connect-to-dynamodb.py) -->\n<!-- The below code snippet is automatically added from ./examples/using-aws-secret-to-connect-to-dynamodb.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nimport os\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\ndb = DynamoDb(region_name=\"us-east-1\",\n              aws_access_key_id=AWS_ACCESS_KEY_ID,\n              aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Create a new table\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/1-create-a-new-table.py) -->\n<!-- The below code snippet is automatically added from ./examples/1-create-a-new-table.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    TableAlreadyExists\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\ntable_schema = {\n\t\"TableName\": \"dev_jobs\",\n\t\"KeySchema\": [{\n\t\t\t\"AttributeName\": \"company_name\",\n\t\t\t\"KeyType\": \"HASH\"\n\t\t},\n\t\t{\n\t\t\t\"AttributeName\": \"role_id\",\n\t\t\t\"KeyType\": \"RANGE\"\n\t\t}\n\t],\n\t\"AttributeDefinitions\": [{\n\t\t\t\"AttributeName\": \"company_name\",\n\t\t\t\"AttributeType\": \"S\"\n\t\t},\n\t\t{\n\t\t\t\"AttributeName\": \"role_id\",\n\t\t\t\"AttributeType\": \"S\"\n\t\t}\n\t],\n\t\"GlobalSecondaryIndexes\": [],\n\t\"ProvisionedThroughput\": {\n\t\t\"ReadCapacityUnits\": 1,\n\t\t\"WriteCapacityUnits\": 1\n\t}\n}\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.create_table(\n            table_name=table_schema.get(\"TableName\"),\n            key_schema=table_schema.get(\"KeySchema\"),\n            attribute_definitions=table_schema.get(\"AttributeDefinitions\"),\n            global_secondary_indexes=table_schema.get(\"GlobalSecondaryIndexes\"),\n            provisioned_throughput=table_schema.get(\"ProvisionedThroughput\")\n        )\n        logging.info(f\"{table_schema.get('TableName')} table created successfully\")\n    except TableAlreadyExists as e:\n        logging.error(f\"{table_schema.get('TableName')} table creation failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 1-create-a-new-table.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:dev_jobs table created successfully\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Get all table names\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/2-get-all-table-names.py) -->\n<!-- The below code snippet is automatically added from ./examples/2-get-all-table-names.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    UnexpectedError\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        table_names = db.read_all_table_names()\n        logging.info(f\"Table names: {table_names}\")\n    except UnexpectedError as e:\n        logging.error(f\"Read all table names failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 2-get-all-table-names.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Table names: ['CertMagic', 'dev_jobs', 'dev_test', 'kp-config-v1', 'test-1']\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Create a new item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/3-create-a-new-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/3-create-a-new-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    UnexpectedError\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.create_item(\n            table_name=\"dev_jobs\",\n            item={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\",\n                \"role\": \"Software Engineer 1\",\n                \"salary\": \"$1,50,531\",\n                \"locations\": [\"Mountain View, California\", \"Austin, Texas\", \"Chicago, IL\"],\n                \"yearly_hike_percent\": 8,\n                \"benefits\": set([\"Internet, Medical, Edu reimbursements\",\n                                \"Health insurance\",\n                                \"Travel reimbursements\"\n                                ]),\n                \"overall_review\":{\n                    \"overall_rating\" : \"4/5\",\n                    \"compensation_and_benefits\": \"3.9/5\"\n                }\n            }\n        )\n        logging.info(\"Item created successfully\")\n    except UnexpectedError as e:\n        logging.error(f\"Item creation failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 3-create-a-new-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Item created successfully\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Read an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/4-read-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/4-read-an-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    ItemNotFound\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        item = db.read_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            }\n        )\n        logging.info(f\"Item: {item}\")\n    except ItemNotFound as e:\n        logging.error(f\"Item doesn't exist - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 4-read-an-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Item: {\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL'],\n\t'role_id': '111',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5'\n\t},\n\t'company_name': 'Google',\n\t'role': 'Software Engineer 1',\n\t'yearly_hike_percent': Decimal('8'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Travel reimbursements',\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Health insurance'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Read items by filter\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/5-read-items-by-filter.py) -->\n<!-- The below code snippet is automatically added from ./examples/5-read-items-by-filter.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    QueryFilterValidationFailed\n)\nimport logging\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.create_item(\n            table_name=\"dev_jobs\",\n            item={\n                \"company_name\": \"Google\",\n                \"role_id\": \"112\",\n                \"role\": \"Software Architect\",\n                \"salary\": \"$4,80,000\",\n                \"locations\": [\"Mountain View, California\"],\n                \"yearly_hike_percent\": 13,\n                \"benefits\": set([\"Internet reimbursements\"]),\n                \"overall_review\":{\n                    \"overall_rating\" : \"3/5\",\n                    \"compensation_and_benefits\": \"4.2/5\"\n                }\n            }\n        )\n        logging.info(\"Item created successfully\")\n        items = db.read_items_by_filter(\n                        table_name='dev_jobs',\n                        key_condition_expression=Key(\"company_name\").eq(\"Google\")\n        )\n        logging.info(f\"Items: {items}\")\n    except QueryFilterValidationFailed as e:\n        logging.error(f\"Items doesn't exist - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 5-read-items-by-filter.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Item created successfully\nINFO:root:Items: [{\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL'],\n\t'role_id': '111',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5'\n\t},\n\t'company_name': 'Google',\n\t'role': 'Software Engineer 1',\n\t'yearly_hike_percent': Decimal('8'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Travel reimbursements',\n\t\t'Health insurance'\n\t}\n}, {\n\t'locations': ['Mountain View, California'],\n\t'role_id': '112',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '4.2/5',\n\t\t'overall_rating': '3/5'\n\t},\n\t'company_name': 'Google',\n\t'role': 'Software Architect',\n\t'yearly_hike_percent': Decimal('13'),\n\t'salary': '$4,80,000',\n\t'benefits': {\n\t\t'Internet reimbursements'\n\t}\n}]\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Update existing attribute in an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/6-update-existing-attribute-in-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/6-update-existing-attribute-in-an-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    UnexpectedError\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.update_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            },\n            attributes_to_update={\n                'role': 'Staff Software Engineer 2'\n            }\n        )\n        logging.info(\"Update is successful\")\n        item = db.read_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            }\n        )\n        logging.info(f\"Item: {item}\")\n    except UnexpectedError as e:\n        logging.error(f\"Update failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 6-update-existing-attribute-in-an-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Update is successful\nINFO:root:Item: {\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL'],\n\t'role_id': '111',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5'\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'yearly_hike_percent': Decimal('8'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Health insurance',\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Travel reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Add a new attribute in an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/7-add-a-new-attribute-in-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/7-add-a-new-attribute-in-an-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    UnexpectedError\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.update_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            },\n            attributes_to_update={\n                'overall_review.yearly_bonus_percent': 12\n            }\n        )\n        logging.info(\"Update is successful\")\n        item = db.read_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            }\n        )\n        logging.info(f\"Item: {item}\")\n    except UnexpectedError as e:\n        logging.error(f\"Update failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 7-add-a-new-attribute-in-an-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Update is successful\nINFO:root:Item: {\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL'],\n\t'role_id': '111',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'yearly_hike_percent': Decimal('8'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Travel reimbursements',\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Health insurance'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Add an attribute to the list\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/8-add-an-attribute-to-the-list.py) -->\n<!-- The below code snippet is automatically added from ./examples/8-add-an-attribute-to-the-list.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    UnexpectedError\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.update_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            },\n            attributes_to_update={\n                'locations': \"Detroit, Michigan\"\n            },\n            operation=\"ADD_ATTRIBUTE_TO_LIST\"\n        )\n        logging.info(\"Update is successful\")\n        item = db.read_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            }\n        )\n        logging.info(f\"Item: {item}\")\n    except UnexpectedError as e:\n        logging.error(f\"Update failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 8-add-an-attribute-to-the-list.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Update is successful\nINFO:root:Item: {\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL', 'Detroit, Michigan'],\n\t'role_id': '111',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'yearly_hike_percent': Decimal('8'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Health insurance',\n\t\t'Travel reimbursements',\n\t\t'Internet, Medical, Edu reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Add an attribute to the string set\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/9-add-an-attribute-to-the-string-set.py) -->\n<!-- The below code snippet is automatically added from ./examples/9-add-an-attribute-to-the-string-set.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    UnexpectedError\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.update_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            },\n            attributes_to_update={\n                'benefits': \"Free Food\"\n            },\n            operation=\"ADD_ATTRIBUTE_TO_STRING_SET\"\n        )\n        logging.info(\"Update is successful\")\n        item = db.read_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            }\n        )\n        logging.info(f\"Item: {item}\")\n    except UnexpectedError as e:\n        logging.error(f\"Update failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 9-add-an-attribute-to-the-string-set.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Update is successful\nINFO:root:Item: {\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL', 'Detroit, Michigan'],\n\t'role_id': '111',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'yearly_hike_percent': Decimal('8'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Travel reimbursements',\n\t\t'Free Food',\n\t\t'Health insurance',\n\t\t'Internet, Medical, Edu reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Increase an existing attribute value\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/10-increase-an-existing-attribute-value.py) -->\n<!-- The below code snippet is automatically added from ./examples/10-increase-an-existing-attribute-value.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    UnexpectedError\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.increase_attribute_value(\n            table_name='dev_jobs',\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            },\n            attribute_name=\"yearly_hike_percent\",\n            increment_value=5\n        )\n        logging.info(\"Attribute value increment completed\")\n        item = db.read_item(\n            table_name='dev_jobs',\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            }\n        )\n        logging.info(f\"Item: {item}\")\n    except UnexpectedError as e:\n        logging.error(f\"Attribute value increment failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 10-increase-an-existing-attribute-value.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Attribute value increment completed\nINFO:root:Item: {\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL', 'Detroit, Michigan'],\n\t'role_id': '111',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'yearly_hike_percent': Decimal('13'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Free Food',\n\t\t'Health insurance',\n\t\t'Travel reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Delete an attribute from an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/11-delete-an-attribute-from-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/11-delete-an-attribute-from-an-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    UnexpectedError\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.delete_attribute(\n            table_name=\"dev_jobs\",\n            key={\"company_name\": \"Google\", \"role_id\": \"111\"},\n            attribute_name=\"yearly_hike_percent\")\n        logging.info(\"The attribute is deleted successfully\")\n        item = db.read_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            }\n        )\n        logging.info(f\"Item: {item}\")\n    except UnexpectedError as e:\n         logging.error(f\"The attribute delete operation failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 11-delete-an-attribute-from-an-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:The attribute is deleted successfully\nINFO:root:Item: {\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL', 'Detroit, Michigan'],\n\t'role_id': '111',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Travel reimbursements',\n\t\t'Free Food',\n\t\t'Health insurance',\n\t\t'Internet, Medical, Edu reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Delete an attribute from the string set\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/12-delete-an-attribute-from-the-string-set.py) -->\n<!-- The below code snippet is automatically added from ./examples/12-delete-an-attribute-from-the-string-set.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    UnexpectedError\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.update_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            },\n            attributes_to_update={\n                'benefits': \"Free Food\"\n            },\n            operation=\"DELETE_ATTRIBUTE_FROM_STRING_SET\"\n        )\n        logging.info(\"Update is successful\")\n        item = db.read_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            }\n        )\n        logging.info(f\"Item: {item}\")\n    except UnexpectedError as e:\n        logging.error(f\"Update failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 12-delete-an-attribute-from-the-string-set.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Update is successful\nINFO:root:Item: {\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL', 'Detroit, Michigan'],\n\t'role_id': '111',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Health insurance',\n\t\t'Travel reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Delete an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/13-delete-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/13-delete-an-item.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    UnexpectedError\n)\nfrom boto3.dynamodb.conditions import Key\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.delete_item(\n            table_name=\"dev_jobs\",\n            key={\n                \"company_name\": \"Google\",\n                \"role_id\": \"111\"\n            }\n        )\n        logging.info(\"Item deleted successfully\")\n        items = db.read_items_by_filter(\n                        table_name='dev_jobs',\n                        key_condition_expression=Key(\"company_name\").eq(\"Google\")\n        )\n        logging.info(f\"Items: {items}\") \n    except UnexpectedError as e:\n        logging.warning(f\"Item delete operation failed - {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 13-delete-an-item.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Item deleted successfully\nINFO:root:Items: [{\n\t'locations': ['Mountain View, California'],\n\t'role_id': '112',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '4.2/5',\n\t\t'overall_rating': '3/5'\n\t},\n\t'company_name': 'Google',\n\t'role': 'Software Architect',\n\t'yearly_hike_percent': Decimal('13'),\n\t'salary': '$4,80,000',\n\t'benefits': {\n\t\t'Internet reimbursements'\n\t}\n}]\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n#### Delete a table\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/14-delete-a-table.py) -->\n<!-- The below code snippet is automatically added from ./examples/14-delete-a-table.py -->\n```py\nfrom LucidDynamodb import DynamoDb\nfrom LucidDynamodb.exceptions import (\n    TableNotFound\n)\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\nif __name__ == \"__main__\":\n    try:\n        db = DynamoDb()\n        db.delete_table(table_name='dev_jobs')\n        logging.info(\"Table deleted successfully\")\n        table_names = db.read_all_table_names()\n        logging.info(f\"Table names: {table_names}\")\n    except TableNotFound as e:\n        logging.error(f\"Table delete operation failed {e}\")\n\n\"\"\"\ndineshsonachalam@macbook examples % python 14-delete-a-table.py\nINFO:botocore.credentials:Found credentials in environment variables.\nINFO:root:Table deleted successfully\nINFO:root:Table names: ['CertMagic', 'dev_test', 'kp-config-v1', 'test-1']\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n## Running Tests\n\nTo run tests, run the following command\n\n```bash\npytest -s\n```\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/) © [dineshsonachalam](https://www.github.com/dineshsonachalam)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dineshsonachalam/Lucid-Dynamodb",
    "keywords": "python dynamodb amazon",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LucidDynamodb",
    "package_url": "https://pypi.org/project/LucidDynamodb/",
    "platform": "",
    "project_url": "https://pypi.org/project/LucidDynamodb/",
    "project_urls": {
      "Homepage": "https://github.com/dineshsonachalam/Lucid-Dynamodb"
    },
    "release_url": "https://pypi.org/project/LucidDynamodb/1.0.121/",
    "requires_dist": [
      "boto3 (>=1.17.78)",
      "botocore (>=1.20.78)"
    ],
    "requires_python": ">=3.1",
    "summary": "A simple Python wrapper to AWS Dynamodb",
    "version": "1.0.121",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11058363,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a6d8d35daf13efa362108635d30d1cc94a48948e3636b65a62833654d9f3419",
        "md5": "19c34f6221ca998f2361c7f395b7a71d",
        "sha256": "5dcf661766b8c542f9fe30174addafa0e4648a0742e33bb1eea8d5cb0795c05a"
      },
      "downloads": -1,
      "filename": "LucidDynamodb-1.0.121-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "19c34f6221ca998f2361c7f395b7a71d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.1",
      "size": 11793,
      "upload_time": "2021-07-24T09:43:40",
      "upload_time_iso_8601": "2021-07-24T09:43:40.373624Z",
      "url": "https://files.pythonhosted.org/packages/6a/6d/8d35daf13efa362108635d30d1cc94a48948e3636b65a62833654d9f3419/LucidDynamodb-1.0.121-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38cf51ee7b999081990075a3d526a7b5a9cca0a1b1241021910722b008335c27",
        "md5": "de9d40b719b473c8edc9e237264a336b",
        "sha256": "6b415c71e2526d50c71c0a0ac9b9f0518fc75765f9dc275da2fd02541c3274f9"
      },
      "downloads": -1,
      "filename": "LucidDynamodb-1.0.121.tar.gz",
      "has_sig": false,
      "md5_digest": "de9d40b719b473c8edc9e237264a336b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.1",
      "size": 15593,
      "upload_time": "2021-07-24T09:43:42",
      "upload_time_iso_8601": "2021-07-24T09:43:42.002778Z",
      "url": "https://files.pythonhosted.org/packages/38/cf/51ee7b999081990075a3d526a7b5a9cca0a1b1241021910722b008335c27/LucidDynamodb-1.0.121.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}