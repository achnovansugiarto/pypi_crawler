{
  "info": {
    "author": "Dinesh Sonachalam",
    "author_email": "dineshsonachalam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<h1 align=\"center\">\n  <a href=\"https://pypi.org/project/LucidDynamodb\" target=\"_blank\">\n    <img src=\"https://i.imgur.com/r9hHHUo.png\" alt=\"LucidDynamodb\">\n  </a>\n</h1>\n<p align=\"center\">\n    <em>A minimalistic wrapper to AWS DynamoDB</em>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/actions\" target=\"_blank\">\n        <img src=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/actions/workflows/pypi-deploy.yml/badge.svg\" alt=\"Deployment\">\n    </a>\n    <a href=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/actions\" target=\"_blank\">\n        <img src=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/workflows/markdown-autodocs/badge.svg\" alt=\"Deployment\">\n    </a>\n    <a href=\"https://pypi.org/project/LucidDynamodb\" target=\"_blank\">\n        <img src=\"https://img.shields.io/pypi/v/LucidDynamodb?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n    </a>\n    <a href=\"https://github.com/dineshsonachalam/Lucid-Dynamodb/blob/master/LICENSE\" target=\"_blank\">\n        <img src=\"https://badgen.net/github/license/dineshsonachalam/Lucid-Dynamodb\" alt=\"MIT License\" height=\"20\">\n    </a>\n</p>\n\n## Table of contents\n- [Installation](#installation)\n- [Example](#example)\n    - [Create a new table](#1-create-a-new-table)\n    - [Get all table names](#2-get-all-table-names)\n    - [Create a New Item](#3-create-a-new-item)\n    - [Read an Item](#4-read-an-item)\n    - [Increase an existing attribute value](#5-increase-an-existing-attribute-value)\n    - [Update existing attribute in an item](#6-update-existing-attribute-in-an-item)\n    - [Add a new attribute in an item](#7-add-a-new-attribute-in-an-item)\n    - [Add an attribute to the list](#8-add-an-attribute-to-the-list)\n    - [Add an attribute to the string set](#9-add-an-attribute-to-the-string-set)\n    - [Delete an attribute from the string set](#10-delete-an-attribute-from-the-string-set)\n    - [Delete an attribute from an item](#11-delete-an-attribute-from-an-item)\n    - [Read items by filter](#12-read-items-by-filter)\n    - [Delete a table](#13-delete-a-table)\n- [Running tests](#running-tests)\n- [Github Workflow Artifacts](#github-workflow-artifacts)\n- [License](#license)\n\n\n## Installation\n\n<div class=\"termy\">\n\n```console\npip install LucidDynamodb\n```\n\n</div>\n\n**Note:**  <a href=\"https://gist.github.com/dineshsonachalam/88f55b28c1f0c1ce93421f5a8f33e84a\"> Prerequisite for Python3 development </a>\n\n\n## Example\n\n### 1. Create a new table\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/1-create-a-new-table.py) -->\n<!-- The below code snippet is automatically added from ./examples/1-create-a-new-table.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\ntable_schema = {\n\t\"TableName\": \"dev_jobs\",\n\t\"KeySchema\": [\n        {\n            \"AttributeName\": \"company_name\",\n            \"KeyType\": \"HASH\"\n\t    },\n        {\n            \"AttributeName\": \"role_id\",\n            \"KeyType\": \"RANGE\"\n\t    }\n    ],\n\t\"AttributeDefinitions\": [\n        {\n            \"AttributeName\": \"company_name\",\n            \"AttributeType\": \"S\"\n\t    },\n        {\n            \"AttributeName\": \"role_id\",\n            \"AttributeType\": \"S\"\n\t    }\n     ],\n\t\"GlobalSecondaryIndexes\": [],\n\t\"ProvisionedThroughput\": {\n\t\t\"ReadCapacityUnits\": 1,\n\t\t\"WriteCapacityUnits\": 1\n\t}\n}\n\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    table_creation_status = db.create_table(\n                                    TableName=table_schema.get(\"TableName\"),\n                                    KeySchema=table_schema.get(\"KeySchema\"),\n                                    AttributeDefinitions=table_schema.get(\"AttributeDefinitions\"),\n                                    GlobalSecondaryIndexes=table_schema.get(\"GlobalSecondaryIndexes\"),\n                                    ProvisionedThroughput=table_schema.get(\"ProvisionedThroughput\")\n    )\n    if(table_creation_status == True):\n        logging.info(\"{} table created successfully\".format(table_schema.get(\"TableName\")))\n    else:\n        logging.error(\"{} table creation failed\".format(table_schema.get(\"TableName\")))\n\n\"\"\"Output\n\nINFO:root:dev_jobs table created successfully\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 2. Get all table names\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/2-get-all-table-names.py) -->\n<!-- The below code snippet is automatically added from ./examples/2-get-all-table-names.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n    table_names = db.read_all_table_names()\n    logging.info(\"Table names: {}\".format(table_names))\n\n\"\"\"Output\n\nINFO:root:Table names: ['dev_jobs', 'user']\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 3. Create a New Item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/3-create-a-new-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/3-create-a-new-item.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    item_creation_status = db.create_item(\n        TableName=\"dev_jobs\", \n        Item={\n            \"company_name\": \"Google\",\n            \"role_id\": str(uuid.uuid4()),\n            \"role\": \"Software Engineer 1\",\n            \"salary\": \"$1,50,531\",\n            \"locations\": [\"Mountain View, California\", \"Austin, Texas\", \"Chicago, IL\"],\n            \"yearly_hike_percent\": 8,\n            \"benefits\": set([\"Internet, Medical, Edu reimbursements\", \n                             \"Health insurance\",\n                             \"Travel reimbursements\"\n                             ]),\n            \"overall_review\":{\n                \"overall_rating\" : \"4/5\",\n                \"compensation_and_benefits\": \"3.9/5\"\n            }\n        }\n    )\n    if(item_creation_status == True):\n        logging.info(\"Item created successfully\")\n    else:\n        logging.warning(\"Item creation failed\")\n\n\"\"\"Output\n\nINFO:root:Item created successfully\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 4. Read an Item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/4-read-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/4-read-an-item.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n    item = db.read_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        })\n    if(item != None):\n        logging.info(\"Item: {}\".format(item))\n    else:\n        logging.warning(\"Item doesn't exist\")\n\n\"\"\"Output\n\nINFO:root:Item: \n{\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL'],\n\t'role_id': 'e85f79a7-0857-4086-afbd-da13ec76b442',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5'\n\t},\n\t'company_name': 'Google',\n\t'role': 'Software Engineer 1',\n\t'yearly_hike_percent': Decimal('8'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Health insurance',\n\t\t'Travel reimbursements',\n\t\t'Internet, Medical, Edu reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 5. Increase an existing attribute value\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/5-increase-an-existing-attribute-value.py) -->\n<!-- The below code snippet is automatically added from ./examples/5-increase-an-existing-attribute-value.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    increase_attribute_status = db.increase_attribute_value(\n        TableName='dev_jobs',\n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        },\n        AttributeName=\"yearly_hike_percent\",\n        IncrementValue=5\n    )\n\n    if(increase_attribute_status==True):\n        logging.info(\"Attribute value increment completed\")\n    else:\n        logging.warning(\"Attribute value increment failed\")\n\n    item = db.read_item(\n        TableName='dev_jobs', \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        })\n    if(item != None):\n        logging.info(\"Item: {}\".format(item))\n    else:\n        logging.warning(\"Item doesn't exist\") \n\n\"\"\"Output\n\nINFO:root: Attribute value increment completed\nINFO:root: Item: \n{\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL'],\n\t'role_id': 'e85f79a7-0857-4086-afbd-da13ec76b442',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5'\n\t},\n\t'company_name': 'Google',\n\t'role': 'Software Engineer 1',\n\t'yearly_hike_percent': Decimal('13'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Health insurance',\n\t\t'Travel reimbursements',\n\t\t'Internet, Medical, Edu reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 6. Update existing attribute in an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/6-update-existing-attribute-in-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/6-update-existing-attribute-in-an-item.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    item_update_status = db.update_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        },\n        AttributesToUpdate={\n            'role': 'Staff Software Engineer 2'\n        }\n    )\n    if(item_update_status == True):\n        logging.info(\"Update is successful\")\n    else:\n        logging.warning(\"Update failed\")\n\n    item = db.read_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        })\n    if(item != None):\n        logging.info(\"Item: {}\".format(item))\n    else:\n        logging.warning(\"Item doesn't exist\")\n\n\"\"\"Output\n\nINFO:root:Update is successful\nINFO:root:Item: \n{\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL'],\n\t'role_id': 'e85f79a7-0857-4086-afbd-da13ec76b442',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5'\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'yearly_hike_percent': Decimal('13'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Travel reimbursements',\n\t\t'Health insurance'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 7. Add a new attribute in an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/7-add-a-new-attribute-in-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/7-add-a-new-attribute-in-an-item.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    item_update_status = db.update_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        },\n        AttributesToUpdate={\n            'overall_review.yearly_bonus_percent': 12\n        }\n    )\n    if(item_update_status == True):\n        logging.info(\"Update is successful\")\n    else:\n        logging.warning(\"Update failed\")\n\n    item = db.read_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        })\n    if(item != None):\n        logging.info(\"Item: {}\".format(item))\n    else:\n        logging.warning(\"Item doesn't exist\")\n\n\"\"\"Output\n\nINFO:root:Update is successful\nINFO:root:Item: \n{\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL'],\n\t'role_id': 'e85f79a7-0857-4086-afbd-da13ec76b442',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'yearly_hike_percent': Decimal('13'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Travel reimbursements',\n\t\t'Health insurance'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 8. Add an attribute to the list\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/8-add-an-attribute-to-the-list.py) -->\n<!-- The below code snippet is automatically added from ./examples/8-add-an-attribute-to-the-list.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    item_update_status = db.update_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        },\n        AttributesToUpdate={\n            'locations': \"Detroit, Michigan\"\n        },\n        Operation=\"ADD_ATTRIBUTE_TO_LIST\"\n    )\n    if(item_update_status == True):\n        logging.info(\"Update is successful\")\n    else:\n        logging.warning(\"Update failed\")\n\n    item = db.read_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        })\n    if(item != None):\n        logging.info(\"Item: {}\".format(item))\n    else:\n        logging.warning(\"Item doesn't exist\")\n\n\"\"\"Output\n\nINFO:root:Update is successful\nINFO:root:Item: \n{\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL', 'Detroit, Michigan'],\n\t'role_id': 'e85f79a7-0857-4086-afbd-da13ec76b442',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'yearly_hike_percent': Decimal('13'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Health insurance',\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Travel reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 9. Add an attribute to the string set\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/9-add-an-attribute-to-the-string-set.py) -->\n<!-- The below code snippet is automatically added from ./examples/9-add-an-attribute-to-the-string-set.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    item_update_status = db.update_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        },\n        AttributesToUpdate={\n            'benefits': \"Free Food\"\n        },\n        Operation=\"ADD_ATTRIBUTE_TO_STRING_SET\"\n    )\n    if(item_update_status == True):\n        logging.info(\"Update is successful\")\n    else:\n        logging.warning(\"Update failed\")\n\n    item = db.read_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        })\n    if(item != None):\n        logging.info(\"Item: {}\".format(item))\n    else:\n        logging.warning(\"Item doesn't exist\")\n\n\"\"\"Output\n\nINFO:root:Update is successful\nINFO:root:Item: \n{\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL', 'Detroit, Michigan'],\n\t'role_id': 'e85f79a7-0857-4086-afbd-da13ec76b442',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'yearly_hike_percent': Decimal('13'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Health insurance',\n\t\t'Free Food',\n\t\t'Travel reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 10. Delete an attribute from the string set\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/10-delete-an-attribute-from-the-string-set.py) -->\n<!-- The below code snippet is automatically added from ./examples/10-delete-an-attribute-from-the-string-set.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    item_update_status = db.update_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        },\n        AttributesToUpdate={\n            'benefits': \"Free Food\"\n        },\n        Operation=\"DELETE_ATTRIBUTE_FROM_STRING_SET\"\n    )\n    if(item_update_status == True):\n        logging.info(\"Update is successful\")\n    else:\n        logging.warning(\"Update failed\")\n\n    item = db.read_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        })\n    if(item != None):\n        logging.info(\"Item: {}\".format(item))\n    else:\n        logging.warning(\"Item doesn't exist\")\n\n\"\"\"Output\n\nINFO:root:Update is successful\nINFO:root:Item: \n{\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL', 'Detroit, Michigan'],\n\t'role_id': 'e85f79a7-0857-4086-afbd-da13ec76b442',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'yearly_hike_percent': Decimal('13'),\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Health insurance',\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Travel reimbursements'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 11. Delete an attribute from an item\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/11-delete-an-attribute-from-an-item.py) -->\n<!-- The below code snippet is automatically added from ./examples/11-delete-an-attribute-from-an-item.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    attribute_delete_status = db.delete_attribute(\n        TableName=\"dev_jobs\", \n        Key={\n              \"company_name\": \"Google\",\n              \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        }, \n        AttributeName=\"yearly_hike_percent\")\n\n    if(attribute_delete_status == True):\n        logging.info(\"The attribute is deleted successfully\")\n    else:\n        logging.warning(\"The attribute delete operation failed\")\n\n    item = db.read_item(\n        TableName=\"dev_jobs\", \n        Key={\n            \"company_name\": \"Google\",\n            \"role_id\": \"e85f79a7-0857-4086-afbd-da13ec76b442\"\n        })\n    if(item != None):\n        logging.info(\"Item: {}\".format(item))\n    else:\n        logging.warning(\"Item doesn't exist\")\n\n\"\"\"Output\n\nINFO:root:The attribute is deleted successfully\nINFO:root:Item: \n{\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL', 'Detroit, Michigan'],\n\t'role_id': 'e85f79a7-0857-4086-afbd-da13ec76b442',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Travel reimbursements',\n\t\t'Health insurance'\n\t}\n}\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 12. Read items by filter\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/12-read-items-by-filter.py) -->\n<!-- The below code snippet is automatically added from ./examples/12-read-items-by-filter.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    item_creation_status = db.create_item(\n        TableName=\"dev_jobs\", \n        Item={\n            \"company_name\": \"Google\",\n            \"role_id\": str(uuid.uuid4()),\n            \"role\": \"Software Architect\",\n            \"salary\": \"$4,80,000\",\n            \"locations\": [\"Mountain View, California\"],\n            \"yearly_hike_percent\": 13,\n            \"benefits\": set([\"Internet reimbursements\"]),\n            \"overall_review\":{\n                \"overall_rating\" : \"3/5\",\n                \"compensation_and_benefits\": \"4.2/5\"\n            }\n        }\n    )\n    if(item_creation_status == True):\n        logging.info(\"Item created successfully\")\n    else:\n        logging.warning(\"Item creation failed\")\n\n    items = db.read_items_by_filter(\n                    TableName='dev_jobs', \n                    KeyConditionExpression=Key(\"company_name\").eq(\"Google\") \n    )\n\n    if(len(items)>0):\n        logging.info(\"Items: {}\".format(items))\n    else:\n        logging.warning(\"Items doesn't exist\")\n\n\"\"\"Output\n\nINFO:root: Item created successfully\nINFO:root:Items: \n[{\n\t'locations': ['Mountain View, California'],\n\t'role_id': 'b6065b19-4333-43a4-abf7-dedca2880669',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '4.2/5',\n\t\t'overall_rating': '3/5'\n\t},\n\t'company_name': 'Google',\n\t'role': 'Software Architect',\n\t'yearly_hike_percent': Decimal('13'),\n\t'salary': '$4,80,000',\n\t'benefits': {\n\t\t'Internet reimbursements'\n\t}\n}, {\n\t'locations': ['Mountain View, California', 'Austin, Texas', 'Chicago, IL', 'Detroit, Michigan'],\n\t'role_id': 'e85f79a7-0857-4086-afbd-da13ec76b442',\n\t'overall_review': {\n\t\t'compensation_and_benefits': '3.9/5',\n\t\t'overall_rating': '4/5',\n\t\t'yearly_bonus_percent': Decimal('12')\n\t},\n\t'company_name': 'Google',\n\t'role': 'Staff Software Engineer 2',\n\t'salary': '$1,50,531',\n\t'benefits': {\n\t\t'Health insurance',\n\t\t'Internet, Medical, Edu reimbursements',\n\t\t'Travel reimbursements'\n\t}\n}]\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n### 13. Delete a table\n<!-- MARKDOWN-AUTO-DOCS:START (CODE:src=./examples/13-delete-a-table.py) -->\n<!-- The below code snippet is automatically added from ./examples/13-delete-a-table.py -->\n```py\nfrom LucidDynamodb.Operations import DynamoDb\nimport os\nimport logging\nimport uuid\nfrom boto3.dynamodb.conditions import Key\nlogging.basicConfig(level=logging.INFO)\n\nAWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nif __name__ == \"__main__\":\n    db = DynamoDb(region_name=\"us-east-1\", \n                aws_access_key_id=AWS_ACCESS_KEY_ID, \n                aws_secret_access_key=AWS_SECRET_ACCESS_KEY)\n\n    delete_table_status = db.delete_table(TableName='dev_jobs')\n    if(delete_table_status == True):\n        logging.info(\"Table deleted successfully\")\n    else:\n        logging.warning(\"Table delete operation failed\")\n\n    table_names = db.read_all_table_names()\n    logging.info(\"Table names: {}\".format(table_names))\n\n\"\"\"Output\n\nINFO:root: Table deleted successfully\nINFO:root:Table names: ['user']\n\"\"\"\n```\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n## Running Tests\n\nTo run tests, run the following command\n\n```bash\npytest -s\n```\n\n## Github Workflow Artifacts\n\n<!-- MARKDOWN-AUTO-DOCS:START (WORKFLOW_ARTIFACT_TABLE) -->\n<table class=\"ARTIFACTS-TABLE\"><thead><tr><th class=\"artifact-th\">Artifact</th><th class=\"workflow-th\">Workflow</th></tr></thead><tbody ><tr ><td class=\"artifact-td td_text\"><a href=https://github.com/dineshsonachalam/Lucid-Dynamodb/suites/3098531782/artifacts/70812344>dependency-graph</a></td><td class=\"workflow-td td_text\"><a href=https://github.com/dineshsonachalam/Lucid-Dynamodb/actions/runs/977342841>integration-tests</a></td></tr>\n<tr ><td class=\"artifact-td td_text\"><a href=https://github.com/dineshsonachalam/Lucid-Dynamodb/suites/3098531782/artifacts/70812345>module-dependencies-license-report</a></td><td class=\"workflow-td td_text\"><a href=https://github.com/dineshsonachalam/Lucid-Dynamodb/actions/runs/977342841>integration-tests</a></td></tr>\n<tr ><td class=\"artifact-td td_text\"><a href=https://github.com/dineshsonachalam/Lucid-Dynamodb/suites/3098531782/artifacts/70812346>Pytest-report</a></td><td class=\"workflow-td td_text\"><a href=https://github.com/dineshsonachalam/Lucid-Dynamodb/actions/runs/977342841>integration-tests</a></td></tr></tbody></table>\n<!-- MARKDOWN-AUTO-DOCS:END -->\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/) © [dineshsonachalam](https://www.github.com/dineshsonachalam)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dineshsonachalam/Lucid-Dynamodb",
    "keywords": "python dynamodb amazon",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LucidDynamodb",
    "package_url": "https://pypi.org/project/LucidDynamodb/",
    "platform": "",
    "project_url": "https://pypi.org/project/LucidDynamodb/",
    "project_urls": {
      "Homepage": "https://github.com/dineshsonachalam/Lucid-Dynamodb"
    },
    "release_url": "https://pypi.org/project/LucidDynamodb/1.0.99/",
    "requires_dist": [
      "boto3 (>=1.17.78)",
      "botocore (>=1.20.78)"
    ],
    "requires_python": ">=3.1",
    "summary": "A simple Python wrapper to AWS Dynamodb",
    "version": "1.0.99",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11058363,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dedefd3f08f4193f9605c024209a8a18aa05d1c4b857247afd1225b73442ecca",
        "md5": "735e925a8a4d7fe11ae358d5713fc722",
        "sha256": "a1b80d2d398ed0bcc4ab088bc971a9dbf5815490fa0da4ae3c1a7e1ef9d5c88e"
      },
      "downloads": -1,
      "filename": "LucidDynamodb-1.0.99-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "735e925a8a4d7fe11ae358d5713fc722",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.1",
      "size": 8543,
      "upload_time": "2021-06-28T01:03:50",
      "upload_time_iso_8601": "2021-06-28T01:03:50.435117Z",
      "url": "https://files.pythonhosted.org/packages/de/de/fd3f08f4193f9605c024209a8a18aa05d1c4b857247afd1225b73442ecca/LucidDynamodb-1.0.99-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9311ed5f798bc5d67049969f9b596f369dad165e4a51734a1f36fba9405b764",
        "md5": "a4ebf113ad1ca6e53847f65663338320",
        "sha256": "c42bc901e2352f4aac0c25d9bc936144c48e1df77c04c5307556c591c3b590aa"
      },
      "downloads": -1,
      "filename": "LucidDynamodb-1.0.99.tar.gz",
      "has_sig": false,
      "md5_digest": "a4ebf113ad1ca6e53847f65663338320",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.1",
      "size": 12762,
      "upload_time": "2021-06-28T01:03:52",
      "upload_time_iso_8601": "2021-06-28T01:03:52.117760Z",
      "url": "https://files.pythonhosted.org/packages/e9/31/1ed5f798bc5d67049969f9b596f369dad165e4a51734a1f36fba9405b764/LucidDynamodb-1.0.99.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}