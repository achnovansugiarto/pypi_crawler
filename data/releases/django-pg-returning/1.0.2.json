{
  "info": {
    "author": "Mikhail Shvein",
    "author_email": "work_shvein_mihail@mail.ru",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# django-pg-returning\nA small library implementing PostgreSQL ability to return rows in DML statements for Django.  \n[Link to PostgreSQL docs](https://www.postgresql.org/docs/10/static/sql-update.html)\n\n## Requirements\n* Python 2.7 or Python 3.3+\n* django >= 1.7  \n  Previous versions may also work, but haven't been tested.  \n* pytz\n* six\n* typing\n* psycopg2\n* PostgreSQL 9.2+   \n  Previous versions may also work, but haven't been tested.  \n\n## Installation\nInstall via pip:  \n`pip install django-pg-returning`    \nor via setup.py:  \n`python setup.py install`\n\n## Usage\n\n### Integration\nTo use library [QuerySet](https://docs.djangoproject.com/en/2.0/ref/models/querysets/) methods,\n just add UpdateReturningManager to your model:\n```python\nfrom django.db import models\nfrom django_pg_returning import UpdateReturningManager\n\nclass MyModel(models.Model):\n    objects = UpdateReturningManager()\n\n    field = models.IntegerField()\n```\n\nIf you already have custom manager, you can implement get_queryset() method in it:\n```python\nfrom django.db import models\nfrom django_pg_returning import UpdateReturningQuerySet\n\nclass MyManager(models.Manager):\n    def get_queryset(self):\n        return UpdateReturningQuerySet(using=self.db, model=self.model)\n\nclass MyModel(models.Model):\n    objects = MyManager()\n\n    field = models.IntegerField()\n```\n\nAnd if you have custom manager you can use a mixin:\n```python\nfrom django.db import models\nfrom django_pg_returning import UpdateReturningMixin\n\nclass MyQuerySet(models.QuerySet, UpdateReturningMixin):\n    pass\n\nclass MyManager(models.Manager):\n    def get_queryset(self):\n        return MyQuerySet(using=self.db, model=self.model)\n\nclass MyModel(models.Model):\n    objects = MyManager()\n\n    field = models.IntegerField()\n```\n\n### Methods\nAfter mixin is integrated with model, your QuerySet-s will have 2 additional methods:\n```python\n# Any django queryset you like\nqs = MyModel.objects.all()\n\n# Update and return a ReturningQuerySet, described below\nresult = qs.update_returning(field=1)\n\n# Delete data and return a ReturningQuerySet, described below\nresult = qs.update_returning(field=1)\n```\nBy default methods get all fields, fetched by the model. \nTo limit fields returned, you can use standard \n[QuerySet.only()](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#django.db.models.query.QuerySet.only) \nand \n[QuerySet.defer()](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#defer) methods.\n\n*Important notes*:\n1) If you don't fetch field, and then try to get it, \nlibrary acts as django does - makes extra database query to fetch attribute deferred.  \n2) These queries are not lazy, as well as basic \n[QuerySet.update()](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#update) \nand \n[QuerySet.delete()](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#delete) \nmethods.  \n3) Primary key field is fetched not looking at limiting methods, as django needs it to form a QuerySet\n\n### ReturningQuerySet\nThe result of returning functions is django_pg_returning.ReturningQuerySet. \nIt is based on django's RawQuerySet, but adds some extra methods to be used easier.\nThe main difference is that *ReturningQuerySet caches query results*,\n while RawQuerySet executes query each time it is iterated.\nAll ReturningQuerySet methods are not executed on database side, they are executed in python on cached result.\nThe only way, ReturningQuerySet makes extra database query - is deferred field loading, described above.\nImplemented methods:\n```python\n# UPDATE ... RETURNING query is executed here once. The result is cached.\nresult = MyModel.objects.all().update_returning(field=1)\n\n# Get number of values fetched\nprint(result.count(), len(result))\n# Output: 1, 1\n\n# Index and slicing. Note that the order of result is not guaranteed by the database.\nprint(result[1], result[0:2])\n# Output: MyModel(...), [MyModel(...), MyModel(...), MyModel(...)]\n\n# Fetching values and values_list. Both methods use cache and return lists, not ValuesQuerySet like django does.\n# values() method cakked without fields will return all fields, fetched in returning method.\n# values_list() method called without fields will raise exception, as order or fields in result tuple is not obvious.\n\nprint(result.values())\n# Output: [{'id': 1, 'field': 1}, {'id': 2, 'field': 2}]\n\nprint(result.values('field'))\n# Output: [{'field': 1}, {'field': 2}]\n\nprint(result.values_list('field', flat=True))\n# Output: [1, 2]\n\nprint(result.values_list('field', 'id', named=True))\n# Output: [Row(field=1, id=1), Row(field=2, id=2)]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/M1hacka/django-pg-returning",
    "keywords": "",
    "license": "BSD 3-clause \"New\" or \"Revised\" License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pg-returning",
    "package_url": "https://pypi.org/project/django-pg-returning/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pg-returning/",
    "project_urls": {
      "Homepage": "https://github.com/M1hacka/django-pg-returning"
    },
    "release_url": "https://pypi.org/project/django-pg-returning/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A small library implementing PostgreSQL ability to return rows in DML statements for Django",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14778096,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5149649bb37191b30f9fa56d34993fda375d3dd09330c89d1c1e5a51a20d2e1",
        "md5": "14dab360d1d7fb85a8615756b1ab015f",
        "sha256": "676e15fd3b871f21ba9fd1ffadd792ac69eb9eda173eeaadd28c570fcf615466"
      },
      "downloads": -1,
      "filename": "django_pg_returning-1.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14dab360d1d7fb85a8615756b1ab015f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 6396,
      "upload_time": "2018-10-28T10:51:34",
      "upload_time_iso_8601": "2018-10-28T10:51:34.834202Z",
      "url": "https://files.pythonhosted.org/packages/e5/14/9649bb37191b30f9fa56d34993fda375d3dd09330c89d1c1e5a51a20d2e1/django_pg_returning-1.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87a87f1cda500446a6183d485e6bc6d4c3f3c4eea0f2e18dbe63d3cf6380987b",
        "md5": "dc8cdcf4614f08dfb9cac20a77ebd038",
        "sha256": "dfb5a0627ec9f59a281845cda8f841f28e4bdf27c48d3e6c815fabf37f405578"
      },
      "downloads": -1,
      "filename": "django-pg-returning-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "dc8cdcf4614f08dfb9cac20a77ebd038",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5818,
      "upload_time": "2018-10-28T10:51:36",
      "upload_time_iso_8601": "2018-10-28T10:51:36.708014Z",
      "url": "https://files.pythonhosted.org/packages/87/a8/7f1cda500446a6183d485e6bc6d4c3f3c4eea0f2e18dbe63d3cf6380987b/django-pg-returning-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}