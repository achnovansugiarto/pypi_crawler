{
  "info": {
    "author": "Li Chao",
    "author_email": "clouds@isrc.iscas.ac.cn",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Donno\n\nA full-featured note-taking application in terminal.\n\n## Features\n\n* Easy note management: add, update, list, remove note;\n* Organize notes in hierarchical notebooks;\n* Full featured formating support: you can add rich texts (markdown),\n  mathematical formula (mathjax, LaTeX), diagrams, charts (mermaid),\n  images, and attachments. All will be rendered and displayed lively in your browser;\n* Powerful and fast full-text search. Get all information at your fingers;\n* Safe and secure: all notes are saved in plain texts (markdown). You own your data.\n  You can view and update your notes without any specific applications\n  but a text editor when necessary. All notes store in private git repository;\n* Live in console: git style APIs. No need to learn a new GUI app.\n  Get your notes anytime, anywhere: Linux, macOS, Windows (through WSL),\n  Android (by Termux), SSH, ...\n\n## Install\n\n`pip install donno`\n\n### Prerequisites\n\n* [git](https://git-scm.com/) for note synchronization;\n* [pandoc](https://pandoc.org/) and [mermaid](https://github.com/mermaid-js/mermaid)\n  for preview with browser.\n\nOn Debian-based systems, install them with:\n```\napt install git pandoc\nnpm install -g @mermaid-js/mermaid-cli mermaid-filter\n```\n\n## Usage\n\n```\ndon add        # create a new note\ndon list       # list notes in all notebooks\ndon list-notebooks    # list existing notebooks in alphabet order\ndon search nim thunder    # search notes contains \"nim\" and \"thunder\"\ndon edit 3     # edit note #3 in note list or searching results\ndon delete 3   # delete note #3 in note list or searching results\n\ndon backup     # backup notes to remote repository\ndon restore    # restore notes from remote repository\ndon backup-patch  # backup notes out of git revision to tarball, default to /tmp\ndon restore-patch # restore notes from patch file\n\ndon preview 3  # preview note #3 in console editor\ndon pv 3       # preview note #3 in browser\ndon ads -b Tech -n nim -t config -c compile  # advanced search, see below for explanations\ndon s '(python.*program|learning.*algorithm)'  # search notes with regex, see below for explanations\ndon pub        # publish notes to blog\n```\n\nNote:\n\n* Most long commands have aliases (abbreviation) for convenience.\n  For example, `a` for add, `l` for list, `s` for search,\n  `ads` for `advanced-search`, etc. Get alias of a command with `-h` option.\n* The command options have 2 forms: full and abbreviation.\n  For example, in command `ads`, `-b` is the abbr. of `--book`,\n  `-t`: `--tag`, `-n`: `--name`, etc.\n\n## Add attachments in a note\n\nYou can add attachments in your notes.\nThey could be image files, which are added by `![<image-file-name>]()`,\nor other files, which are added by  `[<attachment-file-name>]()`\n(without exclamation mark ahead, like common markdown links).\n\nThe attachment file specified in the link must exist in the folder you add the\nnote (the folder you run `don a`),\nor \"attachment file not exists\" error will be raised.\n\n### Under the hood\n\nWhen you save a note and quit the editor,\ndonno will scan all `[<filename>]()` pattern in the note.\nIf the <filename>s exist in the current folder,\ndonno do the following things:\n\n1. Generate a <internal-name> for each attachment;\n1. Copy each file to <notes-repo>/resources folder (get the path of\n   <notes-repo> with `don conf get repo`)\n   with their <internal-name>s;\n1. Update the link in the note from `[<filename>]()` to `[<filename>](<internal-name>)`\n\nThe <internal-name> is composed of 5 parts:\n\n1. Prefix `resources/`, for all attachments are saved in this folder in <notes-repo>\n1. <note-name>\n1. `att`\n1. Order number\n1. File extension of original file\n\nFor example, if you add the following attachments in the note with filename\n*note201118140711.md*:\n```\n![myimage.png]()\n[mydoc.pdf]()\n```\n\nThey  will be updated to:\n```\n![myimage.png](resources/note201118140711att1.png)\n[mydoc.pdf](resources/note201118140711att2.pdf)\n```\n\nIf the attachment file doesn't exist in the current folder,\ndonno will give a warning:\n```\nFile myimage.png does not exist in the current folder.\nYou can run `don e ...` at the folder where myimage.png exists.\n```\n\n## Configuration\n\nFile path: ~/.config/donno/config.json\n\n### Configuration Items\n\n#### General\n\n* app_home: root folder of donno data files. Default: ~/.donno\n* repo: folder to save all note files and resource files. Default: $app_home/repo\n* editor: which application to use to create/update note. Default: `nvim`\n* viewer: which application to use to view notes in console. Default: `nvim -R`\n* default_notebook: default notebook name for a new note. Default: `/Diary`\n* logging level: debug or info(default)\n* editor_envs: environment variables of the editor. For example,\n  env `XDG_CONFIG_HOME` is used by neovim to load config/plugins to parse markdown files.\n  Default: `~/.config`\n\n#### Blog\n\n* url: blog url\n* publish_cmd: command to publish notes to blog\n\n### Manage Configurations\n\n```\ndon conf get                # list all current configurations\ndon conf get edtior         # get which editor to use\ndon conf set editor nvim    # set the editor, make sure you've installed it\ndon conf set default_notebook /Diary/2020\n\n# set nested attribute:\ndon conf set editor_envs.XDG_CONFIG_HOME $HOME/.config/vimrcs/text\n\n# restore default values of configurations:\ndon conf restore\n```\n\n## Update and uninstall\n\n```\npip install --upgrade donno\npip uninstall donno\n```\n\n## Import & Export between Other Note-taking Apps\n\nSupported import formats:\n\n* Joplin\n\nSupported export formats:\n\n* JSON\n* markdown\n\nExamples:\n\nImport notes from Joplin:\n```\njop export --format json jopdb\ndon imports jopdb --source-type joplin\n```\n\nExport notes as JSON files and save into folder *donno_export*:\n```\ndon exports --type json\n```\n\nList parameters with `don export -h` and `don import -h`.\n\n## Advanced search\n\nTo be updated!\n\nTo search notes with more details, use *advanced-search* command.\nFor example, to search notes in notebook *Tech*, and \"nim\" in title,\n\"config\" in tags, \"compile\" in contents:\n```\ndon ads -b Tech -n nim -t config -c compile\n```\n\nwhich is abbreviation form of:\n```\ndon advanced-search --book Tech --name nim --tag config --content compile\n```\n\nYou can also use regex in search term.\nFor example, to search notes contains \"python...program\" *or* \"learning...algorithm\":\n```\ndon s '(python.*program|learning.*algorithm)'\n```\n\n## Synchronization between Multiple Devices\n\n### Main method: VCS\n\nTo sync notes between multiple devices,\nyou need a *remote* VCS (version control system) repository.\nThe simplest way is creating it on a source-code-hosting platform,\nsuch as github.com, gitlab.com, gitee.com, etc.\n\nThen push your *local note folder* (get its path with `don conf get repo`,\nif you didn't set it explicitly) to remote repository.\n\nOn a new device, clone the remote repository to the local note folder.\n\nWhen you update notes on device A, and want to sync the changes to device B,\nrun `git pull` in the local note folder of device B.\n\nWith the powerful merge function of git,\nyou can create and/or update notes on multiple devices simultaneously,\nthen sync them with *rebase* or other methods.\n\n### Complement method: patch file\n\nWhen the changes of notes are too small to form a meaningful commit,\nyou can patch them to a file, then restore it on another device.\n\n## Publish to Blog\n\nIf you want to publish notes in a specified notebook to blog,\nsee [blog doc](./blog/README.md) for details.\n\n## Some notes\n\n### Install in virtual environment\n\nFor those who don't want install apps in global environment,\ninstall it in a virtual environment:\n```\nmkdir ~/apps/donno\ncd ~/apps/donno\npython -m venv env\n. env/bin/activate\npip install donno\n\ncat << EOF >> ~/.zshrc\nfunction dn() {\n  source $HOME/apps/donno/env/bin/activate\n  don $@\n  deactivate\n}\nEOF\n```\n\nNow the command is `dn` instead of `don`.\n\n## Roadmap\n\n### In developing\n\n### On schedule\n\n1. Basic publishing module: publish to blog, such as github.io\n\n1. Advanced publishing function: publish specific note, or notes in specific notebook\n\n1. Search notes with the whole words;\n\n1. Better appearance: beautify output table with libraries like [colored][col], [tabulate][tab], etc\n\n1. Search notes with keywords (which is extracted with AI algorithms, such as NLP, TF-IDF, etc);\n\n1. Similar notes recommendations of a specific note with recommendation algorithms;\n\n1. Note syntax check with NLP;\n\n1. Knowledge graph construction and visualization (in TUI) from a specific root (note);\n\n1. Note translation, English to Chinese and vice versa.\n\n1. Suggest when typing. For example: press TAB after input `don s py`, some candidates displayed\n   below: python, pyhive, pynvim, ...\n\n### Completed\n\n1. Synchronize notes with patch file as the complement to the main sync\n   mechanism based on git;\n\n1. Basic note-taking functions: add, delete, list, search, view, update notes\n\n1. Configuration module: see [Configuration](#configuration);\n\n1. Preview: render markdown notes to HTML and previewed in browser\n\n1. Support adding attachments into notes, especially images\n\n1. Add logging system, distinguish application (for end user) and debugging (for developer) logs\n\n1. Notebook management: list notebooks, list notes in specified notebook\n\n1. Synchronize notes between hosts (based on VCS, such as git)\n\n1. Import/Export from/to other open source note-taking apps,\n   such as [Joplin](https://joplinapp.org/)\n\n1. Advanced search function: search by title, tag, notebook and content\n\n1. Search with regular expression\n\n[col]: https://pypi.org/project/colored/\n[tab]: https://pypi.org/project/tabulate/\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/leetschau/donno",
    "keywords": "note pim",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "donno",
    "package_url": "https://pypi.org/project/donno/",
    "platform": "",
    "project_url": "https://pypi.org/project/donno/",
    "project_urls": {
      "Homepage": "https://github.com/leetschau/donno"
    },
    "release_url": "https://pypi.org/project/donno/1.0.1/",
    "requires_dist": [
      "sh (>=1.14.0)",
      "fire (>=0.3.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "A simple note-taking CLI application",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11364983,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "080e2cc9763204c2a9b2c3a4a993bd21736a085f596391dc5c39bca5f2809efd",
        "md5": "cce6e0af34d6c495d923de8ce068e7ee",
        "sha256": "7dc8fbf0dd132369a5323551dc8dc8206a5d98e492c6bb0348cd4a3e25cd5f72"
      },
      "downloads": -1,
      "filename": "donno-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cce6e0af34d6c495d923de8ce068e7ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14300,
      "upload_time": "2021-09-04T13:13:30",
      "upload_time_iso_8601": "2021-09-04T13:13:30.602879Z",
      "url": "https://files.pythonhosted.org/packages/08/0e/2cc9763204c2a9b2c3a4a993bd21736a085f596391dc5c39bca5f2809efd/donno-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f13974f2e9c5b01653309d36faaf4d97e49176789d4b30a52fe7c2c13287bb96",
        "md5": "dc21aadf664b29309a261179743f5937",
        "sha256": "e7011116a553dab5e2c5a8ea9b26927c79de0cfc03d83994e7572fdb6f8d7ba2"
      },
      "downloads": -1,
      "filename": "donno-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dc21aadf664b29309a261179743f5937",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16888,
      "upload_time": "2021-09-04T13:13:32",
      "upload_time_iso_8601": "2021-09-04T13:13:32.218904Z",
      "url": "https://files.pythonhosted.org/packages/f1/39/74f2e9c5b01653309d36faaf4d97e49176789d4b30a52fe7c2c13287bb96/donno-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}