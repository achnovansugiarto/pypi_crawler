{
  "info": {
    "author": "Otto Yiu",
    "author_email": "otto@live.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "===================\ndjango-cors-headers\n===================\n\n.. image:: https://img.shields.io/github/workflow/status/adamchainz/django-cors-headers/CI/main?style=for-the-badge\n   :target: https://github.com/adamchainz/django-cors-headers/actions?workflow=CI\n\n.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge\n  :target: https://github.com/adamchainz/django-cors-headers/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/django-cors-headers.svg?style=for-the-badge\n    :target: https://pypi.org/project/django-cors-headers/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n    :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nA Django App that adds Cross-Origin Resource Sharing (CORS) headers to\nresponses. This allows in-browser requests to your Django application from\nother origins.\n\nAbout CORS\n----------\n\nAdding CORS headers allows your resources to be accessed on other domains. It's\nimportant you understand the implications before adding the headers, since you\ncould be unintentionally opening up your site's private data to others.\n\nSome good resources to read on the subject are:\n\n* Julia Evans' `introductory comic <https://drawings.jvns.ca/cors/>`__ and\n  `educational quiz <https://questions.wizardzines.com/cors.html>`__.\n* Jake Archibald’s `How to win at CORS <https://jakearchibald.com/2021/cors/>`__\n* The `MDN Article <https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS>`_\n* The `HTML5 Rocks Tutorial <https://www.html5rocks.com/en/tutorials/cors/>`_\n* The `Wikipedia Page <https://en.wikipedia.org/wiki/Cross-origin_resource_sharing>`_\n\nRequirements\n------------\n\nPython 3.7 to 3.10 supported.\n\nDjango 3.2 to 4.0 supported.\n\n----\n\n**Want to work smarter and faster?**\nCheck out my book `Boost Your Django DX <https://adamchainz.gumroad.com/l/byddx>`__ which covers many ways to improve your development experience.\n\n----\n\nSetup\n-----\n\nInstall from **pip**:\n\n.. code-block:: sh\n\n    python -m pip install django-cors-headers\n\nand then add it to your installed apps:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        ...,\n        \"corsheaders\",\n        ...,\n    ]\n\nMake sure you add the trailing comma or you might get a ``ModuleNotFoundError``\n(see `this blog\npost <https://adamj.eu/tech/2020/06/29/why-does-python-raise-modulenotfounderror-when-modifying-installed-apps/>`__).\n\nYou will also need to add a middleware class to listen in on responses:\n\n.. code-block:: python\n\n    MIDDLEWARE = [\n        ...,\n        \"corsheaders.middleware.CorsMiddleware\",\n        \"django.middleware.common.CommonMiddleware\",\n        ...,\n    ]\n\n``CorsMiddleware`` should be placed as high as possible, especially before any\nmiddleware that can generate responses such as Django's ``CommonMiddleware`` or\nWhitenoise's ``WhiteNoiseMiddleware``. If it is not before, it will not be able\nto add the CORS headers to these responses.\n\nAlso if you are using ``CORS_REPLACE_HTTPS_REFERER`` it should be placed before\nDjango's ``CsrfViewMiddleware`` (see more below).\n\nAbout\n-----\n\n**django-cors-headers** was created in January 2013 by Otto Yiu. It went\nunmaintained from August 2015 and was forked in January 2016 to the package\n`django-cors-middleware <https://github.com/zestedesavoir/django-cors-middleware>`_\nby Laville Augustin at Zeste de Savoir.\nIn September 2016, Adam Johnson, Ed Morley, and others gained maintenance\nresponsibility for **django-cors-headers**\n(`Issue 110 <https://github.com/adamchainz/django-cors-headers/issues/110>`__)\nfrom Otto Yiu.\nBasically all of the changes in the forked **django-cors-middleware** were\nmerged back, or re-implemented in a different way, so it should be possible to\nswitch back. If there's a feature that hasn't been merged, please open an issue\nabout it.\n\n**django-cors-headers** has had `40+ contributors\n<https://github.com/adamchainz/django-cors-headers/graphs/contributors>`__\nin its time; thanks to every one of them.\n\nConfiguration\n-------------\n\nConfigure the middleware's behaviour in your Django settings. You must set at\nleast one of three following settings:\n\n* ``CORS_ALLOWED_ORIGINS``\n* ``CORS_ALLOWED_ORIGIN_REGEXES``\n* ``CORS_ALLOW_ALL_ORIGINS``\n\n``CORS_ALLOWED_ORIGINS: Sequence[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list of origins that are authorized to make cross-site HTTP requests.\nThe origins in this setting will be allowed, and the requesting origin will be echoed back to the client in the |Access-Control-Allow-Origin header|__.\nDefaults to ``[]``.\n\n.. |Access-Control-Allow-Origin header| replace:: ``Access-Control-Allow-Origin`` header\n__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\n\nAn Origin is defined by `the CORS RFC Section 3.2 <https://tools.ietf.org/html/rfc6454#section-3.2>`_ as a URI scheme + hostname + port, or one of the special values ``'null'`` or ``'file://'``.\nDefault ports (HTTPS = 443, HTTP = 80) are optional.\n\nThe special value ``null`` is sent by the browser in `\"privacy-sensitive contexts\" <https://tools.ietf.org/html/rfc6454#section-6>`__, such as when the client is running from a ``file://`` domain.\nThe special value `file://` is sent accidentally by some versions of Chrome on Android as per `this bug <https://bugs.chromium.org/p/chromium/issues/detail?id=991107>`__.\n\nExample:\n\n.. code-block:: python\n\n    CORS_ALLOWED_ORIGINS = [\n        \"https://example.com\",\n        \"https://sub.example.com\",\n        \"http://localhost:8080\",\n        \"http://127.0.0.1:9000\",\n    ]\n\nPreviously this setting was called ``CORS_ORIGIN_WHITELIST``, which still works as an alias, with the new name taking precedence.\n\n``CORS_ALLOWED_ORIGIN_REGEXES: Sequence[str | Pattern[str]]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list of strings representing regexes that match Origins that are authorized to make cross-site HTTP requests.\nDefaults to ``[]``.\nUseful when ``CORS_ALLOWED_ORIGINS`` is impractical, such as when you have a large number of subdomains.\n\nExample:\n\n.. code-block:: python\n\n    CORS_ALLOWED_ORIGIN_REGEXES = [\n        r\"^https://\\w+\\.example\\.com$\",\n    ]\n\nPreviously this setting was called ``CORS_ORIGIN_REGEX_WHITELIST``, which still works as an alias, with the new name taking precedence.\n\n``CORS_ALLOW_ALL_ORIGINS: bool``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf ``True``, all origins will be allowed.\nOther settings restricting allowed origins will be ignored.\nDefaults to ``False``.\n\nSetting this to ``True`` can be *dangerous*, as it allows any website to make cross-origin requests to yours.\nGenerally you'll want to restrict the list of allowed origins with ``CORS_ALLOWED_ORIGINS`` or ``CORS_ALLOWED_ORIGIN_REGEXES``.\n\nPreviously this setting was called ``CORS_ORIGIN_ALLOW_ALL``, which still works as an alias, with the new name taking precedence.\n\n--------------\n\nThe following are optional settings, for which the defaults probably suffice.\n\n``CORS_URLS_REGEX: str | Pattern[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA regex which restricts the URL's for which the CORS headers will be sent.\nDefaults to ``r'^.*$'``, i.e. match all URL's.\nUseful when you only need CORS on a part of your site, e.g. an API at ``/api/``.\n\nExample:\n\n.. code-block:: python\n\n    CORS_URLS_REGEX = r\"^/api/.*$\"\n\n``CORS_ALLOW_METHODS: Sequence[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list of HTTP verbs that are allowed for the actual request.\nDefaults to:\n\n.. code-block:: python\n\n    CORS_ALLOW_METHODS = [\n        \"DELETE\",\n        \"GET\",\n        \"OPTIONS\",\n        \"PATCH\",\n        \"POST\",\n        \"PUT\",\n    ]\n\nThe default can be imported as ``corsheaders.defaults.default_methods`` so you can just extend it with your custom methods.\nThis allows you to keep up to date with any future changes.\nFor example:\n\n.. code-block:: python\n\n    from corsheaders.defaults import default_methods\n\n    CORS_ALLOW_METHODS = list(default_methods) + [\n        \"POKE\",\n    ]\n\n``CORS_ALLOW_HEADERS: Sequence[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe list of non-standard HTTP headers that you permit in requests from the browser.\nSets the |Access-Control-Allow-Headers header|__ in responses to `preflight requests <https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request>`__.\nDefaults to:\n\n.. |Access-Control-Allow-Headers header| replace:: ``Access-Control-Allow-Headers`` header\n__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers\n\n.. code-block:: python\n\n    CORS_ALLOW_HEADERS = [\n        \"accept\",\n        \"accept-encoding\",\n        \"authorization\",\n        \"content-type\",\n        \"dnt\",\n        \"origin\",\n        \"user-agent\",\n        \"x-csrftoken\",\n        \"x-requested-with\",\n    ]\n\nThe default can be imported as ``corsheaders.defaults.default_headers`` so you can extend it with your custom headers.\nThis allows you to keep up to date with any future changes.\nFor example:\n\n.. code-block:: python\n\n    from corsheaders.defaults import default_headers\n\n    CORS_ALLOW_HEADERS = list(default_headers) + [\n        \"my-custom-header\",\n    ]\n\n``CORS_EXPOSE_HEADERS: Sequence[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe list of extra HTTP headers to expose to the browser, in addition to the default `safelisted headers <https://developer.mozilla.org/en-US/docs/Glossary/CORS-safelisted_response_header>`__.\nIf non-empty, these are declared in the |Access-Control-Expose-Headers header|__.\nDefaults to ``[]``.\n\n.. |Access-Control-Expose-Headers header| replace:: ``Access-Control-Expose-Headers`` header\n__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers\n\n``CORS_PREFLIGHT_MAX_AGE: int``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe number of seconds the browser can cache the preflight response.\nThis sets the |Access-Control-Max-Age header|__ in preflight responses.\nIf this is 0 (or any falsey value), no max age header will be sent.\nDefaults to ``86400`` (one day).\n\n.. |Access-Control-Max-Age header| replace:: ``Access-Control-Max-Age`` header\n__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age\n\n**Note:**\nBrowsers send `preflight requests <https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request>`__ before certain “non-simple” requests, to check they will be allowed.\nRead more about it in the `CORS MDN article <https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#preflighted_requests>`_.\n\n``CORS_ALLOW_CREDENTIALS: bool``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf ``True``, cookies will be allowed to be included in cross-site HTTP requests.\nThis sets the |Access-Control-Allow-Credentials header|__ in preflight and normal responses.\nDefaults to ``False``.\n\n.. |Access-Control-Allow-Credentials header| replace:: ``Access-Control-Allow-Credentials`` header\n__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials\n\nNote: in Django 2.1 the `SESSION_COOKIE_SAMESITE`_ setting was added, set to ``'Lax'`` by default, which will prevent Django's session cookie being sent cross-domain.\nChange the setting to ``None`` if you need to bypass this security restriction.\n\n.. _SESSION_COOKIE_SAMESITE: https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-SESSION_COOKIE_SAMESITE\n\nCSRF Integration\n----------------\n\nMost sites will need to take advantage of the `Cross-Site Request Forgery\nprotection <https://docs.djangoproject.com/en/stable/ref/csrf/>`_ that Django\noffers. CORS and CSRF are separate, and Django has no way of using your CORS\nconfiguration to exempt sites from the ``Referer`` checking that it does on\nsecure requests. The way to do that is with its `CSRF_TRUSTED_ORIGINS setting\n<https://docs.djangoproject.com/en/stable/ref/settings/#csrf-trusted-origins>`_.\nFor example:\n\n.. code-block:: python\n\n    CORS_ALLOWED_ORIGINS = [\n        \"http://read.only.com\",\n        \"http://change.allowed.com\",\n    ]\n\n    CSRF_TRUSTED_ORIGINS = [\n        \"http://change.allowed.com\",\n    ]\n\n``CORS_REPLACE_HTTPS_REFERER: bool``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``CSRF_TRUSTED_ORIGINS`` was introduced in Django 1.9, so users of earlier\nversions will need an alternate solution. If ``CORS_REPLACE_HTTPS_REFERER`` is\n``True``, ``CorsMiddleware`` will change the ``Referer`` header to something\nthat will pass Django's CSRF checks whenever the CORS checks pass. Defaults to\n``False``.\n\nNote that unlike ``CSRF_TRUSTED_ORIGINS``, this setting does not allow you to\ndistinguish between domains that are trusted to *read* resources by CORS and\ndomains that are trusted to *change* resources by avoiding CSRF protection.\n\nWith this feature enabled you should also add\n``corsheaders.middleware.CorsPostCsrfMiddleware`` after\n``django.middleware.csrf.CsrfViewMiddleware`` in your ``MIDDLEWARE_CLASSES`` to\nundo the ``Referer`` replacement:\n\n.. code-block:: python\n\n    MIDDLEWARE_CLASSES = [\n        ...,\n        \"corsheaders.middleware.CorsMiddleware\",\n        ...,\n        \"django.middleware.csrf.CsrfViewMiddleware\",\n        \"corsheaders.middleware.CorsPostCsrfMiddleware\",\n        ...,\n    ]\n\nSignals\n-------\n\nIf you have a use case that requires more than just the above configuration,\nyou can attach code to check if a given request should be allowed. For example,\nthis can be used to read the list of origins you allow from a model. Attach any\nnumber of handlers to the ``check_request_enabled``\n`Django signal <https://docs.djangoproject.com/en/stable/ref/signals/>`_, which\nprovides the ``request`` argument (use ``**kwargs`` in your handler to protect\nagainst any future arguments being added). If any handler attached to the\nsignal returns a truthy value, the request will be allowed.\n\nFor example you might define a handler like this:\n\n.. code-block:: python\n\n    # myapp/handlers.py\n    from corsheaders.signals import check_request_enabled\n\n    from myapp.models import MySite\n\n\n    def cors_allow_mysites(sender, request, **kwargs):\n        return MySite.objects.filter(host=request.headers[\"Origin\"]).exists()\n\n\n    check_request_enabled.connect(cors_allow_mysites)\n\nThen connect it at app ready time using a `Django AppConfig\n<https://docs.djangoproject.com/en/stable/ref/applications/>`_:\n\n.. code-block:: python\n\n    # myapp/__init__.py\n\n    default_app_config = \"myapp.apps.MyAppConfig\"\n\n.. code-block:: python\n\n    # myapp/apps.py\n\n    from django.apps import AppConfig\n\n\n    class MyAppConfig(AppConfig):\n        name = \"myapp\"\n\n        def ready(self):\n            # Makes sure all signal handlers are connected\n            from myapp import handlers  # noqa\n\nA common use case for the signal is to allow *all* origins to access a subset\nof URL's, whilst allowing a normal set of origins to access *all* URL's. This\nisn't possible using just the normal configuration, but it can be achieved with\na signal handler.\n\nFirst set ``CORS_ALLOWED_ORIGINS`` to the list of trusted origins that are\nallowed to access every URL, and then add a handler to\n``check_request_enabled`` to allow CORS regardless of the origin for the\nunrestricted URL's. For example:\n\n.. code-block:: python\n\n    # myapp/handlers.py\n    from corsheaders.signals import check_request_enabled\n\n\n    def cors_allow_api_to_everyone(sender, request, **kwargs):\n        return request.path.startswith(\"/api/\")\n\n\n    check_request_enabled.connect(cors_allow_api_to_everyone)\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-cors-headers",
    "keywords": "django,cors,middleware,rest,api",
    "license": "MIT License",
    "maintainer": "Adam Johnson",
    "maintainer_email": "me@adamj.eu",
    "name": "django-cors-headers",
    "package_url": "https://pypi.org/project/django-cors-headers/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-cors-headers/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-cors-headers/blob/main/HISTORY.rst",
      "Homepage": "https://github.com/adamchainz/django-cors-headers",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/django-cors-headers/3.12.0/",
    "requires_dist": [
      "Django (>=3.2)"
    ],
    "requires_python": ">=3.7",
    "summary": "django-cors-headers is a Django application for handling the server headers required for Cross-Origin Resource Sharing (CORS).",
    "version": "3.12.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024212,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf7d97c4e9b8f234bf11903754982bbf1d4c79b341a910d5264f8428a2114f96",
        "md5": "c7e0d27572adcce65e74cafd7622d39a",
        "sha256": "39d1d5acb872c1860ecfd88b8572bfbb3a1f201b5685ede951d71fc57c7dfae5"
      },
      "downloads": -1,
      "filename": "django_cors_headers-3.12.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c7e0d27572adcce65e74cafd7622d39a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13122,
      "upload_time": "2022-05-10T12:24:05",
      "upload_time_iso_8601": "2022-05-10T12:24:05.498992Z",
      "url": "https://files.pythonhosted.org/packages/bf/7d/97c4e9b8f234bf11903754982bbf1d4c79b341a910d5264f8428a2114f96/django_cors_headers-3.12.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4774caf53c055625f24017340224820c340fa470c290293afc9d140cefe2d4f3",
        "md5": "6a5a1d4b47c6cbeff8969d8cc89a05bd",
        "sha256": "5f07e2ff8a95c887698e748588a4a0b2ad0ad1b5a292e2d33132f1253e2a97cb"
      },
      "downloads": -1,
      "filename": "django-cors-headers-3.12.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6a5a1d4b47c6cbeff8969d8cc89a05bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21054,
      "upload_time": "2022-05-10T12:24:07",
      "upload_time_iso_8601": "2022-05-10T12:24:07.203247Z",
      "url": "https://files.pythonhosted.org/packages/47/74/caf53c055625f24017340224820c340fa470c290293afc9d140cefe2d4f3/django-cors-headers-3.12.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}