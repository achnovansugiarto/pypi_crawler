{
  "info": {
    "author": "Otto Yiu",
    "author_email": "otto@live.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-cors-headers\n===================\n\nA Django App that adds CORS (Cross-Origin Resource Sharing) headers to\nresponses.\n\nAlthough JSON-P is useful, it is strictly limited to GET requests. CORS\nbuilds on top of ``XmlHttpRequest`` to allow developers to make cross-domain\nrequests, similar to same-domain requests. Read more about it here:\nhttp://www.html5rocks.com/en/tutorials/cors/\n\n.. image:: https://travis-ci.org/ottoyiu/django-cors-headers.png?branch=master\n   :target: https://travis-ci.org/ottoyiu/django-cors-headers\n\n\nRequirements\n------------\n\nTested with all combinations of:\n\n* Python: 2.7, 3.5\n* Django: 1.8, 1.9, 1.10\n\nSetup\n-----\n\nInstall from **pip**:\n\n.. code-block:: sh\n\n    pip install django-cors-headers\n\nand then add it to your installed apps:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'corsheaders',\n        ...\n    )\n\nYou will also need to add a middleware class to listen in on responses:\n\n.. code-block:: python\n\n    MIDDLEWARE_CLASSES = [\n        ...\n        'corsheaders.middleware.CorsMiddleware',\n        'django.middleware.common.CommonMiddleware',\n        ...\n    ]\n\nNote that ``CorsMiddleware`` needs to come before Django's\n``CommonMiddleware`` if you are using Django's ``USE_ETAGS = True``\nsetting, otherwise the CORS headers will be lost from 304 Not-Modified\nresponses, causing errors in some browsers.\n\nConfiguration\n-------------\n\nConfigure the middleware's behaviour in your Django settings. You must add the\nhosts that are allowed to do cross-site requests to\n``CORS_ORIGIN_WHITELIST``, or set ``CORS_ORIGIN_ALLOW_ALL`` to ``True``\nto allow all hosts.\n\n``CORS_ORIGIN_ALLOW_ALL``\n~~~~~~~~~~~~~~~~~~~~~~~~~\nIf ``True``, the whitelist will not be used and all origins will be accepted.\nDefaults to ``False``.\n\n``CORS_ORIGIN_WHITELIST``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list of origin hostnames that are authorized to make cross-site HTTP\nrequests. Defaults to ``[]``.\n\nExample:\n\n.. code-block:: python\n\n    CORS_ORIGIN_WHITELIST = (\n        'google.com',\n        'hostname.example.com',\n        'localhost:8000',\n        '127.0.0.1:9000'\n    )\n\n``CORS_ORIGIN_REGEX_WHITELIST``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list of regexes that match origin regex list of origin hostnames that are\nauthorized to make cross-site HTTP requests. Defaults to ``[]``. Useful when\n``CORS_ORIGIN_WHITELIST`` is impractical, such as when you have a large\nnumber of subdomains.\n\nExample:\n\n.. code-block:: python\n\n    CORS_ORIGIN_REGEX_WHITELIST = ('^(https?://)?(\\w+\\.)?google\\.com$', )\n\n--------------\n\nThe following are optional settings, for which the defaults probably suffice.\n\n``CORS_URLS_REGEX``\n~~~~~~~~~~~~~~~~~~~\n\nA regex which restricts the URL's for which the CORS headers will be sent.\nDefaults to ``r'^.*$'``, i.e. match all URL's. Useful when you only need CORS\non a part of your site, e.g. an API at ``/api/``.\n\nExample:\n\n.. code-block:: python\n\n    CORS_URLS_REGEX = r'^/api/.*$'\n\n``CORS_ALLOW_METHODS``\n~~~~~~~~~~~~~~~~~~~~~~\n\nA list of HTTP verbs that are allowed for the actual request. Defaults to:\n\n.. code-block:: python\n\n    CORS_ALLOW_METHODS = (\n        'GET',\n        'POST',\n        'PUT',\n        'PATCH',\n        'DELETE',\n        'OPTIONS',\n    )\n\nThe default can be imported as ``corsheaders.defaults.default_methods`` so you\ncan just extend it with your custom methods. This allows you to keep up to date\nwith any future changes. For example:\n\n.. code-block:: python\n\n    from corsheaders.defaults import default_methods\n\n    CORS_ALLOW_METHODS = default_methods + (\n        'POKE',\n    )\n\n``CORS_ALLOW_HEADERS``\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe list of non-standard HTTP headers that can be used when making the actual\nrequest. Defaults to:\n\n.. code-block:: python\n\n    CORS_ALLOW_HEADERS = (\n        'x-requested-with',\n        'content-type',\n        'accept',\n        'origin',\n        'authorization',\n        'x-csrftoken',\n        'user-agent',\n        'accept-encoding',\n    )\n\nThe default can be imported as ``corsheaders.defaults.default_headers`` so you\ncan extend it with your custom headers. This allows you to keep up to date with\nany future changes. For example:\n\n.. code-block:: python\n\n    from corsheaders.defaults import default_headers\n\n    CORS_ALLOW_HEADERS = default_headers + (\n        'my-custom-header',\n    )\n\n``CORS_EXPOSE_HEADERS``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe list of HTTP headers that are to be exposed to the browser. Defaults to\n``[]``.\n\n\n``CORS_PREFLIGHT_MAX_AGE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe number of seconds a client/browser can cache the preflight response.\nDefaults to ``86400``.\n\n\n**Note:** A preflight request is an extra request that is made when making a\n\"not-so-simple\" request (e.g. ``Content-Type`` is not\n``application/x-www-form-urlencoded``) to determine what requests the server\nactually accepts. Read more about it in the `HTML 5 Rocks CORS tutorial\n<https://www.html5rocks.com/en/tutorials/cors/>`_.\n\n``CORS_ALLOW_CREDENTIALS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf ``True``, cookies will be allowed to be included in cross-site HTTP\nrequests. Defaults to ``False``.\n\n``CORS_REPLACE_HTTPS_REFERER``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf ``True``, the ``HTTP_REFERER`` header will get replaced when CORS checks\npass, so that the Django CSRF middleware checks work with HTTPS. Defaults to\n``False``.\n\n**Note:** With this feature enabled, you also need to add\n``corsheaders.middleware.CorsPostCsrfMiddleware`` after\n``django.middleware.csrf.CsrfViewMiddleware`` in your ``MIDDLEWARE_CLASSES`` to\nundo the header replacement.\n\n``CORS_MODEL``\n~~~~~~~~~~~~~~\n\nIf set, this should be the path to a model to look up allowed origins, in the\nform ``app.modelname``. Defaults to ``None``.\n\nThe model should have one field, a ``CharField`` called ``cors``, that\nin each instance contains an allowed origin. ``django-cors-headers`` supplies\nsuch a model for you; set the setting to ``corsheaders.CorsModel`` to use it.\n\nSignals\n-------\n\nIf you have a use case that requires more than just the above configuration,\nyou can attach code to check if a given request should be allowed. For example,\nthis can be used to read the list of origins you allow from a model. Attach any\nnumber of handlers to the ``check_request_enabled``\n`Django signal <https://docs.djangoproject.com/en/1.10/ref/signals/>`_, which\nprovides the ``request`` argument (use ``**kwargs`` in your handler to protect\nagainst any future arguments being added). If any handler attached to the\nsignal returns a truthy value, the request will be allowed.\n\nFor example you might define a handler like this:\n\n.. code-block:: python\n\n    # myapp/handlers.py\n    from corsheaders.signals import check_request_enabled\n\n    from .models import MySite\n\n    def cors_allow_mysites(sender, request, **kwargs):\n        return MySite.objects.filter(host=request.host).exists()\n\n    check_request_enabled.connect(cors_allow_mysites)\n\nThen connect it at app ready time using a `Django AppConfig\n<https://docs.djangoproject.com/en/1.10/ref/applications/>`_:\n\n.. code-block:: python\n\n    # myapp/__init__.py\n\n    default_app_config = 'myapp.apps.MyAppConfig'\n\n.. code-block:: python\n\n    # myapp/apps.py\n\n    from django.apps import AppConfig\n\n    class MyAppConfig(AppConfig):\n        name = 'myapp'\n\n        def ready(self):\n            # Makes sure all signal handlers are connected\n            from . import handlers  # noqa\n\n\nA common use case for the signal is to allow *all* origins to access a subset\nof URL's, whilst allowing a normal set of origins to access *all* URL's. This\nisn't possible using just the normal configuration, but it can be achieved with\na signal handler.\n\nFirst set ``CORS_ORIGIN_WHITELIST`` to the list of trusted origins that are\nallowed to access every URL, and then add a handler to\n``check_request_enabled`` to allow CORS regardless of the origin for the\nunrestricted URL's. For example:\n\n.. code-block:: python\n\n    # myapp/handlers.py\n    from corsheaders.signals import check_request_enabled\n\n    def cors_allow_api_to_everyone(sender, request, **kwargs):\n        return request.path.startswith('/api/')\n\n    check_request_enabled.connect(cors_allow_api_to_everyone)\n\nCredits\n-------\n\n``django-cors-headers`` was created by Otto Yiu (`@ottoyiu\n<https://github.com/ottoyiu>`_) and has been worked on by `25+ contributors\n<https://github.com/ottoyiu/django-cors-headers/graphs/contributors>`_.\nThanks to every contributor, and if you want to get involved please don't\nhesitate to make a pull request.\n\n\nHistory\n=======\n\nPending\n-------\n\n* New release notes go here.\n\n1.2.2 (2016-10-05)\n------------------\n\n* Add ``CorsModel.__str__`` for human-readable text\n* Add a signal that allows you to add code for more intricate control over when\n  CORS headers are added.\n\n1.2.1 (2016-09-30)\n------------------\n\n* Made settings dynamically respond to changes, and which allows you to import\n  the defaults for headers and methods in order to extend them.\n\n1.2.0 (2016-09-28)\n------------------\n\n* Drop Python 2.6 support.\n* Drop Django 1.3-1.7 support, as they are no longer supported.\n* Confirmed Django 1.9 support (no changes outside of tests were necessary).\n* Added Django 1.10 support.\n* Package as a universal wheel.\n\n1.1.0 (2014-12-15)\n------------------\n\n* django-cors-header now supports Django 1.8 with its new application loading\n  system! Thanks @jpadilla for making this possible and sorry for the delay in\n  making a release.\n\n1.0.0 (2014-12-13)\n------------------\n\ndjango-cors-headers is all grown-up :) Since it's been used in production for\nmany many deployments, I think it's time we mark this as a stable release.\n\n* Switching this middleware versioning over to semantic versioning\n* #46 add user-agent and accept-encoding default headers\n* #45 pep-8 this big boy up\n\n0.13 (2014-08-14)\n-----------------\n\n* Add support for Python 3\n* Updated tests\n* Improved docuemntation\n* Small bugfixes\n\n0.12 (2013-09-24)\n-----------------\n\n* Added an option to selectively enable CORS only for specific URLs\n\n0.11 (2013-09-24)\n\n* Added the ability to specify a regex for whitelisting many origin hostnames\n  at once\n\n0.10 (2013-09-05)\n-----------------\n\n* Introduced port distinction for origin checking\n* Use ``urlparse`` for Python 3 support\n* Added testcases to project\n\n0.06 (2013-02-18)\n-----------------\n\n* Add support for exposed response headers\n\n0.05 (2013-01-26)\n-----------------\n\n* Fixed middleware to ensure correct response for CORS preflight requests\n\n0.04 (2013-01-25)\n-----------------\n\n* Add ``Access-Control-Allow-Credentials`` control to simple requests\n\n0.03 (2013-01-22)\n-----------------\n\n* Bugfix to repair mismatched default variable names\n\n0.02 (2013-01-19)\n-----------------\n\n* Refactor/pull defaults into separate file\n\n0.01 (2013-01-19)\n-----------------\n\n* Initial release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ottoyiu/django-cors-headers",
    "keywords": "django cors middleware rest api",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-cors-headers",
    "package_url": "https://pypi.org/project/django-cors-headers/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-cors-headers/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ottoyiu/django-cors-headers"
    },
    "release_url": "https://pypi.org/project/django-cors-headers/1.2.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "django-cors-headers is a Django application for handling the server headers required for Cross-Origin Resource Sharing (CORS).",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024212,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8ebcb741f0f24d260a748df1d258bd92114a2184b369c60b941dc920a0ee384",
        "md5": "57b3be9291441595cbeb021b97432b6d",
        "sha256": "c4ef22ce8734bb88cee381dcbb04dcca05bcdaffb09367a504bd388d2a6872aa"
      },
      "downloads": -1,
      "filename": "django_cors_headers-1.2.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "57b3be9291441595cbeb021b97432b6d",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 14148,
      "upload_time": "2016-10-05T14:15:44",
      "upload_time_iso_8601": "2016-10-05T14:15:44.056926Z",
      "url": "https://files.pythonhosted.org/packages/c8/eb/cb741f0f24d260a748df1d258bd92114a2184b369c60b941dc920a0ee384/django_cors_headers-1.2.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2969c43532f60c193297b930c74f0f5461f8e0e478d8165f6d056ea5899cebd",
        "md5": "511cafd836bf3d0bf00082f36019bdd8",
        "sha256": "dd1138c8bf0efb54ff65f48f6bce0365810019e6e9766646b531f36ae14f6aa7"
      },
      "downloads": -1,
      "filename": "django-cors-headers-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "511cafd836bf3d0bf00082f36019bdd8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9592,
      "upload_time": "2016-10-05T14:15:41",
      "upload_time_iso_8601": "2016-10-05T14:15:41.303880Z",
      "url": "https://files.pythonhosted.org/packages/b2/96/9c43532f60c193297b930c74f0f5461f8e0e478d8165f6d056ea5899cebd/django-cors-headers-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}