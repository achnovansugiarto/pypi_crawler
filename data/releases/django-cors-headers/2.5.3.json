{
  "info": {
    "author": "Otto Yiu",
    "author_email": "otto@live.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-cors-headers\n===================\n\nA Django App that adds CORS (Cross-Origin Resource Sharing) headers to\nresponses.\n\nAlthough JSON-P is useful, it is strictly limited to GET requests. CORS\nbuilds on top of ``XmlHttpRequest`` to allow developers to make cross-domain\nrequests, similar to same-domain requests. Read more about it here:\nhttp://www.html5rocks.com/en/tutorials/cors/\n\n.. image:: https://travis-ci.org/ottoyiu/django-cors-headers.svg?branch=master\n   :target: https://travis-ci.org/ottoyiu/django-cors-headers\n\n\nRequirements\n------------\n\nTested with all combinations of:\n\n* Python: 2.7, 3.5, 3.6, 3.7\n* Django: 1.11, 2.0, 2.1, 2.2\n\nSetup\n-----\n\nInstall from **pip**:\n\n.. code-block:: sh\n\n    pip install django-cors-headers\n\nand then add it to your installed apps:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'corsheaders',\n        ...\n    )\n\nYou will also need to add a middleware class to listen in on responses:\n\n.. code-block:: python\n\n    MIDDLEWARE = [  # Or MIDDLEWARE_CLASSES on Django < 1.10\n        ...\n        'corsheaders.middleware.CorsMiddleware',\n        'django.middleware.common.CommonMiddleware',\n        ...\n    ]\n\n``CorsMiddleware`` should be placed as high as possible, especially before any\nmiddleware that can generate responses such as Django's ``CommonMiddleware`` or\nWhitenoise's ``WhiteNoiseMiddleware``. If it is not before, it will not be able\nto add the CORS headers to these responses.\n\nAlso if you are using ``CORS_REPLACE_HTTPS_REFERER`` it should be placed before\nDjango's ``CsrfViewMiddleware`` (see more below).\n\nAbout\n-----\n\n**django-cors-headers** was created in January 2013 by Otto Yiu. It went\nunmaintained from August 2015 and was forked in January 2016 to the package\n`django-cors-middleware <https://github.com/zestedesavoir/django-cors-middleware>`_\nby Laville Augustin at Zeste de Savoir.\nIn September 2016, Adam Johnson, Ed Morley, and others gained maintenance\nresponsibility for **django-cors-headers**\n(`Issue 110 <https://github.com/ottoyiu/django-cors-headers/issues/110>`_) from\nOtto Yiu.\nBasically all of the changes in the forked **django-cors-middleware** were\nmerged back, or re-implemented in a different way, so it should be possible to\nswitch back. If there's a feature that hasn't been merged, please open an issue\nabout it.\n\n**django-cors-headers** has had `40+\ncontributors <https://github.com/ottoyiu/django-cors-headers/graphs/contributors>`_\nin its time; thanks to every one of them.\n\nConfiguration\n-------------\n\nConfigure the middleware's behaviour in your Django settings. You must add the\nhosts that are allowed to do cross-site requests to\n``CORS_ORIGIN_WHITELIST``, or set ``CORS_ORIGIN_ALLOW_ALL`` to ``True``\nto allow all hosts.\n\n``CORS_ORIGIN_ALLOW_ALL``\n~~~~~~~~~~~~~~~~~~~~~~~~~\nIf ``True``, the whitelist will not be used and all origins will be accepted.\nDefaults to ``False``.\n\n``CORS_ORIGIN_WHITELIST``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list of origin hostnames that are authorized to make cross-site HTTP\nrequests. The value ``'null'`` can also appear in this list, and will match the\n``Origin: null`` header that is used in `\"privacy-sensitive contexts\"\n<https://tools.ietf.org/html/rfc6454#section-6>`_, such as when the client is\nrunning from a ``file://`` domain. Defaults to ``[]``.\n\nExample:\n\n.. code-block:: python\n\n    CORS_ORIGIN_WHITELIST = (\n        'google.com',\n        'hostname.example.com',\n        'localhost:8000',\n        '127.0.0.1:9000'\n    )\n\n\n``CORS_ORIGIN_REGEX_WHITELIST``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list of regexes that match origin regex list of origin hostnames that are\nauthorized to make cross-site HTTP requests. Defaults to ``[]``. Useful when\n``CORS_ORIGIN_WHITELIST`` is impractical, such as when you have a large\nnumber of subdomains.\n\nExample:\n\n.. code-block:: python\n\n    CORS_ORIGIN_REGEX_WHITELIST = (r'^(https?://)?(\\w+\\.)?google\\.com$', )\n\n--------------\n\nThe following are optional settings, for which the defaults probably suffice.\n\n``CORS_URLS_REGEX``\n~~~~~~~~~~~~~~~~~~~\n\nA regex which restricts the URL's for which the CORS headers will be sent.\nDefaults to ``r'^.*$'``, i.e. match all URL's. Useful when you only need CORS\non a part of your site, e.g. an API at ``/api/``.\n\nExample:\n\n.. code-block:: python\n\n    CORS_URLS_REGEX = r'^/api/.*$'\n\n``CORS_ALLOW_METHODS``\n~~~~~~~~~~~~~~~~~~~~~~\n\nA list of HTTP verbs that are allowed for the actual request. Defaults to:\n\n.. code-block:: python\n\n    CORS_ALLOW_METHODS = (\n        'DELETE',\n        'GET',\n        'OPTIONS',\n        'PATCH',\n        'POST',\n        'PUT',\n    )\n\nThe default can be imported as ``corsheaders.defaults.default_methods`` so you\ncan just extend it with your custom methods. This allows you to keep up to date\nwith any future changes. For example:\n\n.. code-block:: python\n\n    from corsheaders.defaults import default_methods\n\n    CORS_ALLOW_METHODS = default_methods + (\n        'POKE',\n    )\n\n``CORS_ALLOW_HEADERS``\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe list of non-standard HTTP headers that can be used when making the actual\nrequest. Defaults to:\n\n.. code-block:: python\n\n    CORS_ALLOW_HEADERS = (\n        'accept',\n        'accept-encoding',\n        'authorization',\n        'content-type',\n        'dnt',\n        'origin',\n        'user-agent',\n        'x-csrftoken',\n        'x-requested-with',\n    )\n\nThe default can be imported as ``corsheaders.defaults.default_headers`` so you\ncan extend it with your custom headers. This allows you to keep up to date with\nany future changes. For example:\n\n.. code-block:: python\n\n    from corsheaders.defaults import default_headers\n\n    CORS_ALLOW_HEADERS = default_headers + (\n        'my-custom-header',\n    )\n\n``CORS_EXPOSE_HEADERS``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe list of HTTP headers that are to be exposed to the browser. Defaults to\n``[]``.\n\n\n``CORS_PREFLIGHT_MAX_AGE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe number of seconds a client/browser can cache the preflight response. If\nthis is 0 (or any falsey value), no max age header will be sent. Defaults to\n``86400`` (one day).\n\n\n**Note:** A preflight request is an extra request that is made when making a\n\"not-so-simple\" request (e.g. ``Content-Type`` is not\n``application/x-www-form-urlencoded``) to determine what requests the server\nactually accepts. Read more about it in the `HTML 5 Rocks CORS tutorial\n<https://www.html5rocks.com/en/tutorials/cors/>`_.\n\n``CORS_ALLOW_CREDENTIALS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf ``True``, cookies will be allowed to be included in cross-site HTTP\nrequests. Defaults to ``False``.\n\nNote: in Django 2.1 the `SESSION_COOKIE_SAMESITE`_ setting was added, set to\n``'Lax'`` by default, which will prevent Django's session cookie being sent\ncross-domain. Change it to ``None`` to bypass this security restriction.\n\n.. _SESSION_COOKIE_SAMESITE: https://docs.djangoproject.com/en/2.1/ref/settings/#std:setting-SESSION_COOKIE_SAMESITE\n\n``CORS_MODEL``\n~~~~~~~~~~~~~~\n\nIf set, this should be the path to a model to look up allowed origins, in the\nform ``app.modelname``. Defaults to ``None``.\n\nThe model should inherit from ``corsheaders.models.AbstractCorsModel`` and specify\nthe allowed origin in the ``CharField`` called ``cors``.\n\nCSRF Integration\n----------------\n\nMost sites will need to take advantage of the `Cross-Site Request Forgery\nprotection <https://docs.djangoproject.com/en/dev/ref/csrf/>`_ that Django\noffers. CORS and CSRF are separate, and Django has no way of using your CORS\nconfiguration to exempt sites from the ``Referer`` checking that it does on\nsecure requests. The way to do that is with its `CSRF_TRUSTED_ORIGINS setting\n<https://docs.djangoproject.com/en/dev/ref/settings/#csrf-trusted-origins>`_.\nFor example:\n\n.. code-block:: python\n\n    CORS_ORIGIN_WHITELIST = (\n        'read.only.com',\n        'change.allowed.com',\n    )\n\n    CSRF_TRUSTED_ORIGINS = (\n        'change.allowed.com',\n    )\n\n``CORS_REPLACE_HTTPS_REFERER``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``CSRF_TRUSTED_ORIGINS`` was introduced in Django 1.9, so users of earlier\nversions will need an alternate solution. If ``CORS_REPLACE_HTTPS_REFERER`` is\n``True``, ``CorsMiddleware`` will change the ``Referer`` header to something\nthat will pass Django's CSRF checks whenever the CORS checks pass. Defaults to\n``False``.\n\nNote that unlike ``CSRF_TRUSTED_ORIGINS``, this setting does not allow you to\ndistinguish between domains that are trusted to *read* resources by CORS and\ndomains that are trusted to *change* resources by avoiding CSRF protection.\n\nWith this feature enabled you should also add\n``corsheaders.middleware.CorsPostCsrfMiddleware`` after\n``django.middleware.csrf.CsrfViewMiddleware`` in your ``MIDDLEWARE_CLASSES`` to\nundo the ``Referer`` replacement:\n\n.. code-block:: python\n\n    MIDDLEWARE_CLASSES = [\n        ...\n        'corsheaders.middleware.CorsMiddleware',\n        ...\n        'django.middleware.csrf.CsrfViewMiddleware',\n        'corsheaders.middleware.CorsPostCsrfMiddleware',\n        ...\n    ]\n\nSignals\n-------\n\nIf you have a use case that requires more than just the above configuration,\nyou can attach code to check if a given request should be allowed. For example,\nthis can be used to read the list of origins you allow from a model. Attach any\nnumber of handlers to the ``check_request_enabled``\n`Django signal <https://docs.djangoproject.com/en/1.10/ref/signals/>`_, which\nprovides the ``request`` argument (use ``**kwargs`` in your handler to protect\nagainst any future arguments being added). If any handler attached to the\nsignal returns a truthy value, the request will be allowed.\n\nFor example you might define a handler like this:\n\n.. code-block:: python\n\n    # myapp/handlers.py\n    from corsheaders.signals import check_request_enabled\n\n    from .models import MySite\n\n    def cors_allow_mysites(sender, request, **kwargs):\n        return MySite.objects.filter(host=request.host).exists()\n\n    check_request_enabled.connect(cors_allow_mysites)\n\nThen connect it at app ready time using a `Django AppConfig\n<https://docs.djangoproject.com/en/1.10/ref/applications/>`_:\n\n.. code-block:: python\n\n    # myapp/__init__.py\n\n    default_app_config = 'myapp.apps.MyAppConfig'\n\n.. code-block:: python\n\n    # myapp/apps.py\n\n    from django.apps import AppConfig\n\n    class MyAppConfig(AppConfig):\n        name = 'myapp'\n\n        def ready(self):\n            # Makes sure all signal handlers are connected\n            from . import handlers  # noqa\n\n\nA common use case for the signal is to allow *all* origins to access a subset\nof URL's, whilst allowing a normal set of origins to access *all* URL's. This\nisn't possible using just the normal configuration, but it can be achieved with\na signal handler.\n\nFirst set ``CORS_ORIGIN_WHITELIST`` to the list of trusted origins that are\nallowed to access every URL, and then add a handler to\n``check_request_enabled`` to allow CORS regardless of the origin for the\nunrestricted URL's. For example:\n\n.. code-block:: python\n\n    # myapp/handlers.py\n    from corsheaders.signals import check_request_enabled\n\n    def cors_allow_api_to_everyone(sender, request, **kwargs):\n        return request.path.startswith('/api/')\n\n    check_request_enabled.connect(cors_allow_api_to_everyone)\n\n\nHistory\n=======\n\nPending\n-------\n\n.. Insert new release notes below this line\n\n2.5.3 (2019-04-28)\n------------------\n\n* Tested on Django 2.2. No changes were needed for compatibility.\n* Tested on Python 3.7. No changes were needed for compatibility.\n\n2.5.2 (2019-03-15)\n------------------\n\n* Improve inclusion of tests in ``sdist`` to ignore ``.pyc`` files.\n\n2.5.1 (2019-03-13)\n------------------\n\n* Include test infrastructure in ``sdist`` to allow consumers to use it.\n\n2.5.0 (2019-03-05)\n------------------\n\n* Drop Django 1.8, 1.9, and 1.10 support. Only Django 1.11+ is supported now.\n\n2.4.1 (2019-02-28)\n------------------\n\n* Fix ``DeprecationWarning`` from importing ``collections.abc.Sequence`` on\n  Python 3.7.\n\n2.4.0 (2018-07-18)\n------------------\n\n* Always add 'Origin' to the 'Vary' header for responses to enabled URL's,\n  to prevent caching of responses intended for one origin being served for\n  another.\n\n2.3.0 (2018-06-27)\n------------------\n\n* Match ``CORS_URLS_REGEX`` to ``request.path_info`` instead of\n  ``request.path``, so the patterns can work without knowing the site's path\n  prefix at configuration time.\n\n2.2.1 (2018-06-27)\n------------------\n\n* Add ``Content-Length`` header to CORS preflight requests. This fixes issues\n  with some HTTP proxies and servers, e.g. AWS Elastic Beanstalk.\n\n2.2.0 (2018-02-28)\n------------------\n\n* Django 2.0 compatibility. Again there were no changes to the actual library\n  code, so previous versions probably work.\n* Ensured that ``request._cors_enabled`` is always a ``bool()`` - previously it\n  could be set to a regex match object.\n\n2.1.0 (2017-05-28)\n------------------\n\n* Django 1.11 compatibility. There were no changes to the actual library code,\n  so previous versions probably work, though they weren't properly tested on\n  1.11.\n\n2.0.2 (2017-02-06)\n------------------\n\n* Fix when the check for ``CORS_MODEL`` is done to allow it to properly add\n  the headers and respond to ``OPTIONS`` requests.\n\n2.0.1 (2017-01-29)\n------------------\n\n* Add support for specifying 'null' in ``CORS_ORIGIN_WHITELIST``.\n\n2.0.0 (2017-01-07)\n------------------\n\n* Remove previously undocumented ``CorsModel`` as it was causing migration\n  issues. For backwards compatibility, any users previously using ``CorsModel``\n  should create a model in their own app that inherits from the new\n  ``AbstractCorsModel``, and to keep using the same data, set the model's\n  ``db_table`` to 'corsheaders_corsmodel'. Users not using ``CorsModel``\n  will find they have an unused table that they can drop.\n* Make sure that ``Access-Control-Allow-Credentials`` is in the response if the\n  client asks for it.\n\n1.3.1 (2016-11-09)\n------------------\n\n* Fix a bug with the single check if CORS enabled added in 1.3.0: on Django\n  < 1.10 shortcut responses could be generated by middleware above\n  ``CorsMiddleware``, before it processed the request, failing with an\n  ``AttributeError`` for ``request._cors_enabled``. Also clarified the docs\n  that ``CorsMiddleware`` should be kept as high as possible in your middleware\n  stack, above any middleware that can generate such responses.\n\n1.3.0 (2016-11-06)\n------------------\n\n* Add checks to validate the types of the settings.\n* Add the 'Do Not Track' header ``'DNT'`` to the default for\n  ``CORS_ALLOW_HEADERS``.\n* Add 'Origin' to the 'Vary' header of outgoing requests when not allowing all\n  origins, as per the CORS spec. Note this changes the way HTTP caching works\n  with your CORS-enabled responses.\n* Check whether CORS should be enabled on a request only once. This has had a\n  minor change on the conditions where any custom signals will be called -\n  signals will now always be called *before* ``HTTP_REFERER`` gets replaced,\n  whereas before they could be called before and after. Also this attaches the\n  attribute ``_cors_enabled`` to ``request`` - please take care that other\n  code you're running does not remove it.\n\n1.2.2 (2016-10-05)\n------------------\n\n* Add ``CorsModel.__str__`` for human-readable text\n* Add a signal that allows you to add code for more intricate control over when\n  CORS headers are added.\n\n1.2.1 (2016-09-30)\n------------------\n\n* Made settings dynamically respond to changes, and which allows you to import\n  the defaults for headers and methods in order to extend them.\n\n1.2.0 (2016-09-28)\n------------------\n\n* Drop Python 2.6 support.\n* Drop Django 1.3-1.7 support, as they are no longer supported.\n* Confirmed Django 1.9 support (no changes outside of tests were necessary).\n* Added Django 1.10 support.\n* Package as a universal wheel.\n\n1.1.0 (2014-12-15)\n------------------\n\n* django-cors-header now supports Django 1.8 with its new application loading\n  system! Thanks @jpadilla for making this possible and sorry for the delay in\n  making a release.\n\n1.0.0 (2014-12-13)\n------------------\n\ndjango-cors-headers is all grown-up :) Since it's been used in production for\nmany many deployments, I think it's time we mark this as a stable release.\n\n* Switching this middleware versioning over to semantic versioning\n* #46 add user-agent and accept-encoding default headers\n* #45 pep-8 this big boy up\n\n0.13 (2014-08-14)\n-----------------\n\n* Add support for Python 3\n* Updated tests\n* Improved docuemntation\n* Small bugfixes\n\n0.12 (2013-09-24)\n-----------------\n\n* Added an option to selectively enable CORS only for specific URLs\n\n0.11 (2013-09-24)\n\n* Added the ability to specify a regex for whitelisting many origin hostnames\n  at once\n\n0.10 (2013-09-05)\n-----------------\n\n* Introduced port distinction for origin checking\n* Use ``urlparse`` for Python 3 support\n* Added testcases to project\n\n0.06 (2013-02-18)\n-----------------\n\n* Add support for exposed response headers\n\n0.05 (2013-01-26)\n-----------------\n\n* Fixed middleware to ensure correct response for CORS preflight requests\n\n0.04 (2013-01-25)\n-----------------\n\n* Add ``Access-Control-Allow-Credentials`` control to simple requests\n\n0.03 (2013-01-22)\n-----------------\n\n* Bugfix to repair mismatched default variable names\n\n0.02 (2013-01-19)\n-----------------\n\n* Refactor/pull defaults into separate file\n\n0.01 (2013-01-19)\n-----------------\n\n* Initial release\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ottoyiu/django-cors-headers",
    "keywords": "django,cors,middleware,rest,api",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cors-headers",
    "package_url": "https://pypi.org/project/django-cors-headers/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cors-headers/",
    "project_urls": {
      "Homepage": "https://github.com/ottoyiu/django-cors-headers"
    },
    "release_url": "https://pypi.org/project/django-cors-headers/2.5.3/",
    "requires_dist": [
      "Django (>=1.11)"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
    "summary": "django-cors-headers is a Django application for handling the server headers required for Cross-Origin Resource Sharing (CORS).",
    "version": "2.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024212,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "837f96fa0dc138d4aab23bcbcb312df31ca63fb34f643805f02dddf9e460c648",
        "md5": "4411c766f22a48d4fca461259ada92c1",
        "sha256": "ceacbd60dd5a65c95e65e74b5559bd4161aa3fe5713c44e1f3417a12bd41e7ba"
      },
      "downloads": -1,
      "filename": "django_cors_headers-2.5.3-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "4411c766f22a48d4fca461259ada92c1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 13259,
      "upload_time": "2019-04-28T19:03:35",
      "upload_time_iso_8601": "2019-04-28T19:03:35.470126Z",
      "url": "https://files.pythonhosted.org/packages/83/7f/96fa0dc138d4aab23bcbcb312df31ca63fb34f643805f02dddf9e460c648/django_cors_headers-2.5.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "424b5a2584f4144296f24f5204ebe656aff243f84de3ad3e1b993d8ce84750f2",
        "md5": "0125048fe80d6521e38ba245c7a8bdd8",
        "sha256": "c7987faa9aaef7f6a802b0f354a719e80a9158c284f530265ac792f1ee725e52"
      },
      "downloads": -1,
      "filename": "django-cors-headers-2.5.3.tar.gz",
      "has_sig": true,
      "md5_digest": "0125048fe80d6521e38ba245c7a8bdd8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 23295,
      "upload_time": "2019-04-28T19:03:39",
      "upload_time_iso_8601": "2019-04-28T19:03:39.888263Z",
      "url": "https://files.pythonhosted.org/packages/42/4b/5a2584f4144296f24f5204ebe656aff243f84de3ad3e1b993d8ce84750f2/django-cors-headers-2.5.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}