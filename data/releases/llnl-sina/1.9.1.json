{
  "info": {
    "author": "Siboka Team",
    "author_email": "siboka@llnl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "Contents\n========\n- Overview\n- LC Setup\n- Standard Setup\n- Manual Setup\n\n    - Creating the Environment\n    - Installing Software Dependencies\n\n- Activating the Virtual Environment\n- Deactivating the Virtual Environment\n- Using the Example Notebooks\n- Testing\n- Supported Environments\n- Database Support\n\n\nOverview\n========\n\nSina's Python component is a tool for making simulation (meta)data collection\nand exploration simple.\n\nIt works by collecting information from code runs, logs, and other outputs into\na common file format which can then be passed off to one of Sina's supported\nbackends, all of which are queried using the same user-friendly Python API. To the\nend user, this means that important data can be accessed through Python scripts,\nGUIs (Jupyter notebooks) etc. with all the speed of a datastore and none of the\ncomplexity (the user never has to interact with the datastore schema), nor any of\nthe traditional headaches of parsing logs or remembering which file contains what.\n\nThe instructions below will guide you through setting up a virtual environment for\nSina (or installing it in one that already exists), running example notebooks, and\ngetting dependencies for your backend(s) of choice. Note that SQL\nwill always be available as the \"default\" backend. Once you're done with setup,\na quickstart tutorial can be found in notebook form at\n<sina_root>/examples/basic_usage.ipynb.\n\nRemember that, if you're on LC, each time you log in you'll first need to activate the\nenvironment. When you're done, we recommend you deactivate the virtual environment to get\nback to your default environment or end your session.\n\n\nLC Setup\n========\n\nIf you're on an LC machine, you can use a virtual environment with dependencies\nalready installed::\n\n    $ source /collab/usr/gapps/wf/releases/sina/bin/activate\n\nThe above is for bash; other activation scripts, e.g. activate.csh, can be found\nin the same directory.\n\nSina will now be available for use via Python virtual environment, and can be\ntested with `sina -h` (which should display a help message). When you're done,\nuse `deactivate` to exit the virtual environment. Note that this will be the release\n(master) Sina version--if you want to use Sina Develop, you'll need to perform a local\ninstall.\n\nIf you run into issues with the LC virtual environment, please email us at siboka@llnl.gov.\n\n\nStandard Setup\n==============\n\nStandard installation, provided by the Makefile, is initiated by entering\nthe following at the command line::\n\n    $ make\n\nThis command creates the virtual environment, installs \\(missing\\) dependencies,\nand installs Sina.\n\nYou can build the documentation, which will appear in `build/docs`, using::\n\n    $ make docs\n\nTest are run by entering::\n\n    $ make tests\n\nAlternatively, you can run all of the above by entering the following::\n\n    $ make all\n\nThis will install Sina with its default backend (SQL).\n\nOnce installation is complete, you are ready to activate the environment -- see\n\"Activating the Virtual Environment\" -- and begin using Sina. You can also install\nthe optional Cassandra backend with::\n\n    $ make cassandra\n\nAdditional command line tools (such as diffing Records) are available with::\n\n    $ make cli-tools\n\n\nManual Setup\n============\n\nYou will need to create, activate, and install software dependencies in your\nenvironment.\n\n\nCreating the Environment\n------------------------\nEnter the following command to set up your initial environment::\n\n    $ python -m virtualenv venv   # venv can be any name you want\n\nNow activate the environment \\(see \"Activating the Virtual Environment\"\\).\n\nYou need to be in the proper Sina directory before proceeding to install\ndependencies, so enter the following command::\n\n    (venv) $ cd $SINA_PYTHON\n\nwhere `SINA_PYTHON` is the `python` subdirectory of the Sina source code.\n\n\nInstalling Software Dependencies\n--------------------------------\nYou first need to make sure there is a requirements/links.txt file that contains\nthe appropriate link constraints.  There are two requirements files containing\nflags and links used in our supported environments::\n\n- requirements/lc-links.txt\n- requirements/no-links.txt\n\nThe first file contains the options needed to restrict packages to those\navailable on the wheelhouse hosted on the Open Computing Facility (OCF) at\nLawrence Livermore National Laboratory.  The second file contains no flags.\nThe links.txt file is included in other requirements files to ensure the\noptions are consistent for the build and testing processes.\n\nOnce you've set up your requirements/links.txt, you can use our dev requirements\nfile (<sina_root>/python/requirements/development.txt) to install\nbasic Sina dependencies::\n\n    $(venv) pip install -r requirements/development.txt\n\n\nThe requirements file should install the package in editable mode but, if\nnot, run::\n\n    $(venv) pip install -e .\n\n\nActivating the Virtual Environment\n==================================\nEnter the following command to enter the virtual environment::\n\n    $ source $SINA_PYTHON/venv/bin/activate  # use activate.csh if in a [t]csh\n\nwhere `SINA_PYTHON` is the python subdirectory of the Sina source code.\nYou will need to do this every time you want to start up a session in the named\nvirtual environment.\n\n\nDeactivating the Virtual Environment\n====================================\nEnter the following command to deactivate the virtual environment::\n\n    (venv) $ deactivate\n\nwhen you are done.\n\n\nUsing the Example Notebooks\n===========================\n\nSina contains Jupyter notebooks that demonstrate how to use it with\nsample datasets. Files can be found in the examples directory, and are\norganized by dataset, with data_overview.rst containing descriptions of each\nset. To use the notebooks, you'll first need to run getting_started.ipynb\n(also in the examples directory) from the LC Jupyter server at\nlc.llnl.gov/jupyter. After that, you'll be ready to run the rest of the notebooks.\nTo clean all output from the notebooks::\n\n    (venv) $ make clean-notebooks\n\n\nTesting\n=======\n\nThis package uses nosetests to run unit tests.  Enter the following while in\nyour virtual environment::\n\n    (venv) $ nosetests\n\nAdditional tests, which include checks for PEP8 compliance and proper\ndocumentation, can be run my entering the following::\n\n    $ make tests\n\nThis command will set up and enter the necessary virtual environment.\n\n\nSupported Environments\n======================\n\nSina is regularly tested in the following environments:\n\n- **OSX 10.13**: Primary development environment for most team members.\n  If you are not on the LC network, be sure to comment out `--no-index` in the\n  requirements file.\n- **TOSS 3, RedHat 7.4 (quartz, rzsonar)**: Automated testing environment\n- **TOSS 3, RedHat 7.5 (catalyst, rztopaz)**: Secondary development environment\n\nAbsence is not an indication that Sina will not work; please consider expanding this list!\n\n\nDatabase Support\n================\n\nOut-of-the-box, Sina does not install drivers for relational databases other\nthan SQLite. If you wish to connect to other databases (e.g. MySQL, MariaDB,\nor Oracle), you need to install the appropriate drivers for that database.\nYou can do this with our Makefile::\n\n    $ make mysql \n\nAfter you install the connector, you can connect to these types of databases\nfrom the command line tools::\n\n    $ sina ingest --database-type=sql --database \"mysql+mysqlconnector://host:port/?read_default_file=~/.my.cnf\"\n\nYou can also connect with the programmatic API::\n\n    factory = DAOFactory(\"mysql+mysqlconnector://host:port/?read_default_file=~/.my.cnf\")\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "llnl-sina",
    "package_url": "https://pypi.org/project/llnl-sina/",
    "platform": "",
    "project_url": "https://pypi.org/project/llnl-sina/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/llnl-sina/1.9.1/",
    "requires_dist": [
      "six",
      "sqlalchemy",
      "enum34 ; python_version < \"3.4\"",
      "cassandra-driver ; extra == 'cassandra'",
      "deepdiff ; extra == 'cli_tools'",
      "texttable ; extra == 'cli_tools'",
      "pyzmq (<18) ; extra == 'jupyter'",
      "ipywidgets ; extra == 'jupyter'",
      "tabulate ; extra == 'jupyter'",
      "tornado (<5.1) ; extra == 'jupyter'",
      "matplotlib ; extra == 'jupyter'",
      "wcwidth (<0.1.8) ; (python_version<\"3\") and extra == 'jupyter'",
      "ipython (<6,>=5) ; (python_version<\"3\") and extra == 'jupyter'",
      "ipykernel (<5) ; (python_version<\"3\") and extra == 'jupyter'",
      "ipython ; (python_version>=\"3\") and extra == 'jupyter'",
      "ipykernel (>=5) ; (python_version>=\"3\") and extra == 'jupyter'",
      "mysql-connector-python ; extra == 'mysql'"
    ],
    "requires_python": "",
    "summary": "Simulation INsight and Analysis",
    "version": "1.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17295557,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "484330c9bc02c4061e81918bb96d247f4ded9c3355f9c4dc4c539ab4987e440c",
        "md5": "2bb494dfdce8553f85878ef8597552bb",
        "sha256": "6d62f914ba98f61826d0e1c550f15ae35bc0b27ef4fcee041dcbe66b30066aad"
      },
      "downloads": -1,
      "filename": "llnl_sina-1.9.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2bb494dfdce8553f85878ef8597552bb",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 114764,
      "upload_time": "2020-10-14T21:19:27",
      "upload_time_iso_8601": "2020-10-14T21:19:27.682562Z",
      "url": "https://files.pythonhosted.org/packages/48/43/30c9bc02c4061e81918bb96d247f4ded9c3355f9c4dc4c539ab4987e440c/llnl_sina-1.9.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "44b7a08ffa496a8f09ec46eaed1d69a1803cec60f428933064a3ee8537d6a889",
        "md5": "4b226fd4eb579395164363ee17ec01bd",
        "sha256": "1af1feb634e14a225e7f4b27b70006d28a31f3dd94a66a49cd9a3fc540c50fe0"
      },
      "downloads": -1,
      "filename": "llnl-sina-1.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4b226fd4eb579395164363ee17ec01bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 100239,
      "upload_time": "2020-10-14T21:19:30",
      "upload_time_iso_8601": "2020-10-14T21:19:30.731297Z",
      "url": "https://files.pythonhosted.org/packages/44/b7/a08ffa496a8f09ec46eaed1d69a1803cec60f428933064a3ee8537d6a889/llnl-sina-1.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}