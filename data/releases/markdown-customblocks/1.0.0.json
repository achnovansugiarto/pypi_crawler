{
  "info": {
    "author": "David García Garzón",
    "author_email": "voki@canvoki.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Other Audience",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "# Custom blocks for Markdown\n\n[![image](https://img.shields.io/travis/vokimon/markdown-customblocks/master.svg?style=flat-square&label=TravisCI)](https://travis-ci.org/vokimon/markdown-customblocks)\n[![image](https://img.shields.io/coveralls/vokimon/markdown-customblocks/master.svg?style=flat-square&label=Coverage)](https://coveralls.io/r/vokimon/markdown-customblocks)\n[![image](https://img.shields.io/pypi/v/markdown-customblocks.svg?style=flat-square&label=PyPI)](https://pypi.org/project/markdown-customblocks/)\n[![license: AGPL v3](https://img.shields.io/badge/License-AGPL%20v3-blue.svg)](https://www.gnu.org/licenses/agpl-3.0)\n[![image](https://img.shields.io/pypi/dm/markdown-customblocks.svg?style=flat-square&label=PyPI%20Downloads)](https://pypi.org/project/markdown-customblocks/)\n<!--\n[![image](https://img.shields.io/pypi/pyversions/markdown-customblocks.svg?style=flat-square&label=Python%20Versions)](https://pypi.org/project/markdown-customblocks/)\n[![image](https://img.shields.io/pypi/implementation/markdown-customblocks.svg?style=flat-square&label=Python%20Implementations)](https://pypi.org/project/markdown-customblocks/)\n-->\n\nA [Python-Markdown] extension to define custom block types\nusing an uniform, parametrizable and nestable syntax.\n\n[Python-Markdown]: https://python-markdown.github.io/\n\n- [What is it?](#what-is-it)\n- [Installation and setup](#installation-and-setup)\n- [General markdown syntax](#general-markdown-syntax)\n- [Implementing a custom block type](#implementing-a-custom-block-type)\n- [Predefined block types](#predefined-block-types)\n    - [Container (`customblocks.generators.container`)](#container-customblocksgeneratorscontainer)\n    - [Admonition (`customblocks.generators.admonition`)](#admonition-customblocksgeneratorsdmonition)\n    - [Link card (`customblocks.generators.linkcard`)](#link-card-customblocksgeneratorsinkcard)\n    - [Figure (`customblocks.generators.figure`)](#figure-customblocksgeneratorsfigure)\n    - [Youtube (`customblocks.generators.youtube`)](#youtube-customblocksgeneratorsyoutube)\n    - [Vimeo (`customblocks.generators.vimeo`)](#vimeo-customblocksgeneratorsvimeo)\n    - [Twitter (`customblocks.generators.twitter`)](#twitter-customblocksgeneratorstwitter)\n    - [Verkami (`customblocks.generators.verkami`)](#verkami-customblocksgeneratorsverkami)\n    - [Goteo (`customblocks.generators.goteo`)](#goteo-customblocksgeneratorsgoteo)\n- [Motivation](#motivation)\n- [Release history](#release-history)\n- [TODO](#todo)\n\n\n## What is it?\n\nThis markdown extension simplifies the definition and use\nof new types of block, by defining a common syntax for them.\nThat is, a common way to specify the type of the block,\nits attributes and content.\n\nCustom block types are defined by a simple generator function.\nThe extension deals with markdown parsing and\nit passes attributes and inner content as parameters to the generator.\nThe generator uses them to generate the desired HTML code.\n\nThe extension also provides several useful examples of generators:\n\n- `container`: The default one, a classed div with arbitrary classes, attributes and content.\n- `figure`: Figures with caption and more\n- `admonition`: Admonitions (quite similar to the [standard extra extension][ExtraAdmonitions])\n- `twitter`: Embeded tweets\n- `youtube`: Embeded videos from youtube...\n- `vimeo`: Embeded videos from vimeo...\n- `linkcard`: External link cards (like Facebook and Twitter do, when you post a link)\n- `verkami`: Fund raising project widget in [Verkami]\n- `goteo`: Fund raising project widget in [Goteo]\n\n[ExtraAdmonitions]: https://python-markdown.github.io/extensions/admonition/\n\nWhile they are quite convenient you can overwrite them all by defining your own function...\nOr your could contribute to enhance them. :-)\n\n\n## Installation and setup\n\nTo install:\n\n```bash\n$ pip install markdown-customblocks\n```\n\nIn order to enable it in Markdown:\n\n```python\nMARKDOWN = {\n    'extensions': [\n        'customblocks',\n    ],\n}\n```\n\n## General markdown syntax\n\nThis is an example of custom block usage:\n\n```markdown\n::: mytype param1 key1=value1 \"param with many words\" key2=\"value2 with words\"\n    Indented **content**\n\n    The block ends whenever the indentation stops\nThis unindented line is not considered part of the block\n```\n\nThe line starting with `:::` is the _headline_.\nIt specifies, first, the block type (`mytype`) followed by a set of _values_.\nSuch values can be either single worded or quoted.\nAlso some values may explicit a target parameter with a _key_.\nAfter the _headline_, several lines of indented _content_ may follow,\nand the block ends at the very first line back to the previous indentation.\n\n> By using indentation you don't need a closing tag,\n> but if you miss it, you might place a closing `:::` at the same\n> level of the headline.\n\nA block type may interpret the content as markdown as well.\nSo you can have nested blocks by adding extra indentation.\nFor example:\n\n```markdown\n::: recipe\n    # Sweet water\n    ::: ingredients \"4 persons\"\n        - two spons of suggar\n        - a glass of tap water\n    Drop the suggar into the glass. Stir.\n```\n\n## Implementing a custom block type\n\nA block type can be defined just by defining a **generator** function.\nThe signature of the generator will determine the attributes that accept from the headline.\n\n```python\ndef mytype(ctx, param1, myflag:bool, param2, param3, yourflag=True, param4='default2'):\n    ...\n```\n\nYou have to register it to a type:\n\n```python\nMARKDOWN = {\n    ...\n    'extensions_configs': {\n        'customblocks': {\n            'generators': {\n                # direct symbol reference\n                'mytype': mytype,\n                # using import strings\n                'akamytype': 'myparentmodule.mymodule:mytype',\n            }\n        },\n    },\n}\n```\n\nA generator can use several strategies to generate content:\n\n- Return an html string\n- Return `etree` `Element`\n- Manipulate `ctx.parent` and return `None`\n\nThe first parameter, `ctx`, is the context.\nIf you don't use it, you can skip it.\nBut it is useful if you want to receive some context parameters like:\n\n- `ctx.parent`: the parent node\n- `ctx.content`: the indented part of the block, with the indentation removed\n- `ctx.parser`: the markdown parser, can be used to parse the inner content or any other markdown code\n- `ctx.type`: the type of the block\n    - If you reuse the same function for different types, this is how you diferentiate them\n- `ctx.metadata`: A dictionary with metadata from your metadata plugin.\n- `ctx.config`: A dictionary passed from `extension_configs.customblocks.config`\n\nBesides `ctx`, the rest of function parameters are filled using values parsed from _head line_.\nUnlike Python, you can interleave in the headline values with and without keys.\nThey are resolved as follows:\n\n- **Explicit key:** When a key in the headline matches a keyable parameter name in the generator, the value is assigned to it\n- **Flag:** Generator arguments annotated as `bool` (like example's `myflag`), or defaulting to `True` or `False`, (like example's `yourflag`) are considered flags\n    - When a keyless value matches a flag name in the generator (`myflag`), `True` is passed\n    - When it matches the flag name prefixed with `no` (`nomyflag`), `False` is passed\n- **Positional:** Remaining headline values and function parameters are assigned one-to-one by position\n- **Restricted:** Restrictions on how to receive the values ([keyword-only] and [positional-only]) are respected and they will receive only values from either key or keyless values\n- **Varidics:** If the signature contains key (`**kwds`) or positional (`*args`) varidic variables, any remaining key and keyless values from the headline are assigned to them\n\nFollowing Markdown phylosophy, errors are warned but do not stop the processing, so:\n\n- Unmatched function parameters without a default value will be warned and assigned an empty string.\n- Unused headline values will be warned and ignored.\n\n[keyword-only]: https://www.python.org/dev/peps/pep-3102/\n[positional-only]: https://www.python.org/dev/peps/pep-0570/\n\n## Predefined block types\n\nThis is a quick reference for the use of the included generators.\nDetailed explanation follows.\n\n```markdown\n::: linkcard http://othersite.com/post/2020-06-01-john-s-work\n\n::: youtube HUBNt18RFbo center\n\n::: twitter marcmushu 1270395360163307530\n\n::: twitter marcmushu 1270395360163307530 theme=dark lang=es track=true\n\n::: figure ethernalbulb.jpg left thumb\n    The century old bulb still bringing light.\n\n    This make you think you have been mocked.\n\n::: figure ethernalbulb.jpg right\n\n::: figure ethernalbulb.jpg wide\n\n::: figure ethernalbulb.jpg \n\n::: important \"Remember the milk\"\n    Milk and chicken has been the responsibles the democratization\n    of the protein sources.\n```\n\n### Container (`customblocks.generators.container`)\n\nThis is the default generator when no other generator matches the block type.\nIt can be used to generate html div document structure with markdown.\n\nIt creates a `<div>` element with the type name as class.\nKeyless values are added as additional classes and\nkey values are added as attributes for the `div` element.\n\n`*args`\n: added as additional classes for the outter div\n\n`**kwds`\n: added as attributes for the outter div\n\n\nThe following example:\n\n```markdown\n::: sidebar left style=\"width: 30em\"\n    ::: widget\n        # Social\n        ...\n    ::: widget\n        # Related\n        ...\n```\n\nRenders as:\n\n```html\n<div class='sidebar left' style=\"width: 30em\">\n    <div class='widget'>\n        <h1>Social</h1>\n        <p>...</p>\n    </div>\n    <div class='widget'>\n        <h1>Related</h1>\n        <p>...</p>\n    </div>\n</div>\n```\n\n### Admonition (`customblocks.generators.admonition`)\n\nAn admonition is a specially formatted text out of the main flow\nwhich remarks a piece of text, often in a box or with a side\nicon to identify it as that special type of text.\n\nAdmonition generator is, by default, assigned to the following types:\n`attention`, `caution`, `danger`, `error`, `hint`, `important`, `note`, `tip`, `warning`.\n\nSo you can write:\n\n```markdown\n::: danger\n    Do not try to do this at home\n```\n\nIn order to generate:\n\n```html\n<div class=\"admonition danger\">\n<p class=\"admonition-title\">Danger</p>\n<p>Do not try to do this at home</p>\n</div>\n```\n\nGenerated code emulates the one generated by ReST admonitions\n(which is also emulated by `markdown.extra.admonition`).\nSo, you can benefit from existing styles and themes.\n\n`title`\n: in the title box show that text instead of the \n\n`*args`\n: added as additional classes for the outter div\n\n`**kwds`\n: added as attributes for the outter div\n\n**Warning:**\nIf you are migrating from `extra.admonition`,\nbe careful as `extra` identifies title using the quotes,\nwhile `customblocks` will take the first parameter as title and next values as additional classes.\nIf you like having the classes before, you should explicit the `title` key.\n\n```markdown\n::: danger blinking title=\"Super danger\"\n    Do **not** try to do this at home\n```\n\n### Figure (`customblocks.generators.figure`)\n\nAn image as captioned figure.\nThe content is taken as caption.\n\n`url`\n: the url to the image\n\n`alt` (keyword only)\n: image alt attribute\n\n`title` (keyword only)\n: image title attribute\n\n`*args`\n: additional classes for root `<figure>` tag\n\n`**kwds`\n: additional attributes for root `<figure>` tag\n\n\n\n\n### Link card (`customblocks.generators.linkcard`)\n\nA link cards is a informative box about an external source.\nIt is similar to the card that popular apps like Facebook, Twitter, Telegram, Slack... generate when you post a link.\n\nThe generator downloads the target url and extracts social [metadata][SocialMeta]:\nFeatured image, title, description...\n\n[SocialMeta]: https://css-tricks.com/essential-meta-tags-social-media/\n\n```markdown\n::: linkcard https://css-tricks.com/essential-meta-tags-social-media/\n```\n\n### Youtube (`customblocks.generators.youtube`)\n\nThis generator generates an embeded youtube video.\n\n```markdown\n::: youtube HUBNt18RFbo nocontrols left-align\n```\n\n`autoplay` (flag, default False)\n: starts the video as soon as it is loaded\n\n`loop` (flag, default False)\n: restart again the video once finished\n\n`controls` (flag, default True)\n: show the controls\n\n`*args`\n: added as additional class for the outter div\n\n`**kwds`\n: added as attributes for the outter div\n\nIndented content is ignored.\n\nRecommended css:\n\n```css\n.videowrapper {\n    position:relative;\n    padding-bottom:56.25%;\n    overflow:hidden;\n    height:0;\n    width:100%\n}\n.videowrapper iframe {\n    position:absolute;\n    left:0;\n    top:0;\n    width:100%;\n    height:100%;\n}\n```\n\nOr you could set `youtube_inlineFluidStyle` config to `True`\nand the style will be added inline to every video.\n\n\n### Vimeo (`customblocks.generators.vimeo`)\n\nThis generator generates an embeded vimeo video.\n\n```markdown\n::: vimeo 139579122  nocontrols left-align\n```\n\n`autoplay` (flag, default False)\n: starts the video as soon as it is loaded\n\n`loop` (flag, default False)\n: restart again the video once finished\n\n`bylabel` (flag, default True)\n: Shows the video author's name\n\n`portrait` (flag, default False)\n: Shows the video author's avatar\n\n`*args`\n: added as additional class for the outter div\n\n`**kwds`\n: added as attributes for the outter div\n\nContent is ignored.\n\n\n### Twitter (`customblocks.generators.twitter`)\n\nEmbeds a tweet.\n\n```markdown\n::: twitter marcmushu 1270395360163307530 theme=dark lang=es track=true\n```\n\n`user`:\n: the user that wrote the tweet\n\n`tweet`\n: the tweet id (a long number)\n\n`theme` (optional, default `light`)\n: It can be either `dark` or `light`\n\n`hideimages`\n: Do not show attached images in the embedded\n\n`align`\n: `left`, `center` or `right`\n\n`conversation`\n: whether to add or not the full thread\n\n\n### Verkami (`customblocks.generators.verkami`)\n\nEmbeds a [Verkami] fund raising campaign widget.\n\n[Verkami]: https://www.verkami.com/\n\n```markdown\n::: verkami 26588 landscape\n```\n\n`id`\n: The id of the project (can be the number or the full id)\n\n`landscape` (Flag, default False)\n: instead of a portrait widget generate a landscape one\n\n\n### Goteo (`customblocks.generators.goteo`)\n\nEmbeds a [Goteo] fund raising campaign widget.\n\n[Goteo]: https://goteo.org\n\n```markdown\n::: goteo my-cool-project\n```\n\n`id`\n: The id of the project\n\n\n## Motivation\n\nEach markdown extension has to detect its own markers\nwithout messing with other extensions.\nBecause of that, the trend has been each extension\nusing its different unique marking syntax.\n\nOften several extensions implement the same concept\n(say twitter links, figures, thumbnails, admonitions...)\nproviding more or less features and using different syntax.\nIf you find a better extension for the same feature,\nyou end up rewritting your markdown sources.\n\nAlso writting an extension is quite hard.\nThe extension architecture is complex by need.\nIt has to support a wide range of scenarios.\nBut a common scenario here is the macro scenario:\n\n> I want to generate this **piece of html** which\n> depends on those **parameters** and maybe it should\n> include a given **content**.\n\nSo, it would be nice to:\n\n- Have a common syntax and differentiate block by a semantic name\n- Have a common way to specify parameters\n- Define the content in a way that you could nest blocks\n- Plugins just specify the expected parameters in the signature and generate the output with them\n- Get the block type you like and add the feature you miss\n\nWe all stand on giants' shoulders so take a look at the [long list](doc/inspiration.md)\nof markdown extensions and other software that inspired and influenced this extension.\n\n\n## Release history\n\n### markdown-customblocks 1.0.0 (2020-06-27)\n\n- Register a generator with a string like `'module.submodule:function'`\n- Support single quoted values\n\n### markdown-customblocks 0.3.0 (2020-06-27)\n\n- Provide `ctx.config` from `extension_configs.customblocks.config`\n- New generators: vimeo, verkami, goteo\n- admonition: title should be a `<p>` not a `<div>` for ReST styles to work\n- youtube: responsive/fluid sizing\n- documented all generators\n\n### markdown-customblocks 0.2.0 (2020-06-25)\n\n- Improve documentation (parameter passing, toc...)\n- Provide `ctx.metadata` to access Markdown.Meta (from `extra.meta`, `full_yaml_metadata`... extensions)\n- `figure`: link to the image\n\n### markdown-customblocks 0.1.0 (2020-06-23)\n\n- First public version\n- Support for function based generators\n- Default generator: container\n- Example generators: admonition, twitter, youtube, figure, linkcard\n\n\n## TODO\n\n- Default css for generators\n- Flags: coerce to bool?\n- Annotations: coerce to any type\n- Figure\n    - Thumbnail generation\n    - lightbox\n    - Deexternalizer\n- Youtube:\n    - Take aspect ratio and sizes from Youtube api\n    - Use covers\n    - Privacy safe mode\n- Twitter\n    - Privacy safe mode",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vokimon/markdown-customblocks",
    "keywords": "markdown extension customblocks admonitions container youtube twitter",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "markdown-customblocks",
    "package_url": "https://pypi.org/project/markdown-customblocks/",
    "platform": "",
    "project_url": "https://pypi.org/project/markdown-customblocks/",
    "project_urls": {
      "Homepage": "https://github.com/vokimon/markdown-customblocks"
    },
    "release_url": "https://pypi.org/project/markdown-customblocks/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "Python Markdown extension to add custom parametrizable and nestable blocks",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16034205,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d23a02b73393a26f4495eb601f020ae3555c7246abe6bc97b6248d358ef6ed3",
        "md5": "3125179fd7f5634e49b3fb460f168598",
        "sha256": "e256ed6cfde35eb9ac2fecf22eed30b398d12dd2ccb4d6676abf52eb1a619f4f"
      },
      "downloads": -1,
      "filename": "markdown-customblocks-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3125179fd7f5634e49b3fb460f168598",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 24770,
      "upload_time": "2020-06-27T14:01:59",
      "upload_time_iso_8601": "2020-06-27T14:01:59.997023Z",
      "url": "https://files.pythonhosted.org/packages/3d/23/a02b73393a26f4495eb601f020ae3555c7246abe6bc97b6248d358ef6ed3/markdown-customblocks-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}