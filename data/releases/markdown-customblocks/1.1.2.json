{
  "info": {
    "author": "David García Garzón",
    "author_email": "voki@canvoki.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Other Audience",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "# Custom blocks for Markdown\n\n![CI](https://img.shields.io/github/workflow/status/vokimon/markdown-customblocks/CI/master?style=flat-square)\n[![Coverage](https://img.shields.io/coveralls/vokimon/markdown-customblocks/master.svg?style=flat-square&label=Coverage)](https://coveralls.io/r/vokimon/markdown-customblocks)\n[![PyPi](https://img.shields.io/pypi/v/markdown-customblocks.svg?style=flat-square&label=PyPI)](https://pypi.org/project/markdown-customblocks/)\n[![license: AGPL v3](https://img.shields.io/badge/License-AGPL%20v3-blue.svg)](https://www.gnu.org/licenses/agpl-3.0)\n[![downloads](https://img.shields.io/pypi/dm/markdown-customblocks.svg?style=flat-square&label=PyPI%20Downloads)](https://pypi.org/project/markdown-customblocks/)\n<!--\n[![image](https://img.shields.io/pypi/pyversions/markdown-customblocks.svg?style=flat-square&label=Python%20Versions)](https://pypi.org/project/markdown-customblocks/)\n[![image](https://img.shields.io/pypi/implementation/markdown-customblocks.svg?style=flat-square&label=Python%20Implementations)](https://pypi.org/project/markdown-customblocks/)\n-->\n\nThis [Python-Markdown] extension defines\na common markup for parametrizable and nestable components that can be extended by defining a plain Python function.\n\nIncludes some sample components for div containers, admonitions, figures, link cards... and embeds from common sites (youtube, vimeo, twitter...)\n\n[Python-Markdown]: https://python-markdown.github.io/\n\n- [What is it?](#what-is-it)\n- [Why this?](#why-this)\n- [Installation and setup](#installation-and-setup)\n- [General markup syntax](#general-markup-syntax)\n- [Implementing a generator](#implementing-a-generator)\n- [Predefined generators](#predefined-generators)\n    - [Container (`customblocks.generators.container`)](#container-customblocksgeneratorscontainer)\n    - [Admonition (`customblocks.generators.admonition`)](#admonition-customblocksgeneratorsdmonition)\n    - [Link card (`customblocks.generators.linkcard`)](#link-card-customblocksgeneratorsinkcard)\n    - [Figure (`customblocks.generators.figure`)](#figure-customblocksgeneratorsfigure)\n    - [Youtube (`customblocks.generators.youtube`)](#youtube-customblocksgeneratorsyoutube)\n    - [Vimeo (`customblocks.generators.vimeo`)](#vimeo-customblocksgeneratorsvimeo)\n    - [Twitter (`customblocks.generators.twitter`)](#twitter-customblocksgeneratorstwitter)\n    - [Verkami (`customblocks.generators.verkami`)](#verkami-customblocksgeneratorsverkami)\n    - [Goteo (`customblocks.generators.goteo`)](#goteo-customblocksgeneratorsgoteo)\n- [Generator tools](#generator-tools)\n\t- [Hyperscript generation](#hyperscript-generation)\n\t- [PageInfo](#pageinfo)\n\t- [Fetcher](#fetcher)\n- [Release history](#release-history)\n- [TODO](#todo)\n\n## What is it?\n\nThis extension parses markup structures like this one:\n\n```markdown\n::: mytype \"value 1\" param2=value2\n    Indented content\n```\n\ndelegating the HTML generation to custom functions (generators)\nyou can define or redefine for the type (`mytype`, in the example) to suit your needs.\nFor example, we could bind `mytype` to this generator:\n\n```python\ndef mygenerator(ctx, param1, param2):\n    \"\"\"Quick and dirty generator, needs escaping\"\"\"\n    return f\"\"\"<div attrib1=\"{param1}\" attrib2=\"{param2}\">{ctx.content}</div>\"\"\"\n```\n\nand the previous markdown will generate:\n\n```html\n<div attrib1=\"value 1\" attrib2=\"value2\">Indented Content</div>\n```\n\nThe extension also provides several useful generators:\n\n- `container`: A classed div with arbitrary classes, attributes and content (This is the default when no type matches)\n- `figure`: Figures with caption and more\n- `admonition`: Admonitions (quite similar to the [standard extra extension][ExtraAdmonitions])\n- `twitter`: Embeded tweets\n- `youtube`: Embeded videos from youtube...\n- `vimeo`: Embeded videos from vimeo...\n- `linkcard`: External link cards (like Facebook and Twitter do, when you post a link)\n- `verkami`: Fund raising project widget in [Verkami]\n- `goteo`: Fund raising project widget in [Goteo]\n\n[ExtraAdmonitions]: https://python-markdown.github.io/extensions/admonition/\n\nThey are examples, you can always rewrite them to suit your needs.\n\n## Why this?\n\nMarkdown, has a quite limited set of structures,\nand you often end up writing html by hand:\nA figure, an embed...\nIf you use that structure multiple times,\nwhenever you find a better way,\nyou end up updating the structures in multiple places.\nThat's why you should use (or develop) a markdown extension to ease the proces.\n\nThere is a catch.\nEach markdown extension has to identify its own markup.\nFor new extensions, is hard to find a handy markup that no other extension is using yet.\nBecause of that, the trend is having a lot of different markups,\neven for extensions sharing purpose.\nWhen you find a better extension for your figures,\nagain, it is likely you have to edit all your figures, once more,\nbecause the markup is different.\n\nAlso coding an extension is hard.\nMarkdown extension API is required to be complex to address many other scenarios.\nBut this extension responds just to this common scenario:\n\n> I want to generate this **piece of html** which\n> depends on those **parameters** and maybe it should\n> include a given **content**.\n\n**So, why am i using a common markup for all those structures?** \\\nThis way, markup syntax explosion is avoided,\nand users do not have to learn a new syntax.\nBesides, developing new block types is easier if you can reuse the same parser.\n\n**So, why am i using a type name to identify the structure?** \\\nA name as part of the markup clarifies the block meaning on reading.\nAlso provides a hook to change the behaviour while keeping the semantics.\n\n**So, why am i defining a common attribute markup?** \\\nThis way, a general mapping from such attributes to the parameters\nof a Python function can be stablished.\nSo, the generator function signature defines the attributes that can be used\nand the extension does the mapping with no extra glue required.\n\n**So, why am i using indentation to define inner content?** \\\nIt visually shows the scope of the block and allows nesting.\nIf the content is reparsed as Markdown,\nit could still include other components with their inner content a level down.\n\nWe all stand on giants' shoulders so take a look at the [long list](doc/inspiration.md)\nof markdown extensions and other software that inspired and influenced ideas for this extension.\nKudos for all of them.\n\n\n## Installation and setup\n\nTo install:\n\n```bash\n$ pip install markdown-customblocks\n```\n\nIn order to enable it in Markdown:\n\n```python\nMARKDOWN = {\n    'extensions': [\n        'customblocks',\n    ],\n}\n```\n\n## General markup syntax\n\nThis is a more complete example of custom block usage:\n\n```markdown\n::: mytype param1 key1=value1 \"param with many words\" key2=\"value2 with words\"\n    Indented **content**\n\n    The block ends whenever the indentation stops\nThis unindented line is not considered part of the block\n```\n\nThe line starting with `:::` is the _headline_.\nIt specifies, first, the block type (`mytype`) followed by a set of _values_.\nSuch values can be either single worded or quoted.\nAlso some values may explicit a target parameter with a _key_.\n\nAfter the _headline_, several lines of indented _content_ may follow,\nand the block ends at the very first line back to the previous indentation.\nEmtpy lines are included and there is no need of an empty line to end the block.\n\n> By using indentation you don't need a closing tag,\n> but if you miss it, you might place a closing `:::` at the same\n> level of the headline.\n\nA block type may interpret the content as markdown as well.\nSo you can have nested blocks by adding extra indentation.\nFor example:\n\n```markdown\n::: recipe\n    # Sweet water\n    ::: ingredients \"4 persons\"\n        - two spons of suggar\n        - a glass of tap water\n    ::: mealphoto sweetwater.jpg\n        Looks gorgeus!\n    Drop the suggar into the glass. Stir.\n```\n\n## Implementing a generator\n\nA block type can be defined just by hooking the **generator** function to the type.\n\n```python\nMARKDOWN = {\n    ...\n    'extensions_configs': {\n        'customblocks': {\n            'generators': {\n                # by direct symbol reference\n                'mytype': myparentmodule.mymodule.mytype,\n                # or using import strings (notice the colon)\n                'aka_mytype': 'myparentmodule.mymodule:mytype',\n            }\n        },\n    },\n}\n```\n\n\nThe signature of the generator will determine the attributes taken from the headline.\n\n```python\ndef mytype(ctx, param1, myflag:bool, param2, param3, yourflag=True, param4='default2'):\n    ...\n```\n\nThe first parameter, `ctx`, is the context.\nIf you don't use it, you can skip it.\nBut it is useful if you want to receive some context parameters like:\n\n- `ctx.parent`: the parent node\n- `ctx.content`: the indented part of the block, with the indentation removed\n- `ctx.parser`: the markdown parser, can be used to parse the inner content or any other markdown code\n- `ctx.type`: the type of the block\n    - If you reuse the same function for different types, this is how you diferentiate them\n- `ctx.metadata`: A dictionary with metadata from your metadata plugin.\n- `ctx.config`: A dictionary passed from `extension_configs.customblocks.config`\n\nBesides `ctx`, the rest of function parameters are filled using values parsed from _head line_.\nUnlike Python, you can interleave in the headline values with and without keys.\nThey are resolved as follows:\n\n- **Explicit key:** When a key in the headline matches a keyable parameter name in the generator, the value is assigned to it\n- **Flag:** Generator arguments annotated as `bool` (like example's `myflag`), or defaulting to `True` or `False`, (like example's `yourflag`) are considered flags\n    - When a keyless value matches a flag name in the generator (`myflag`), `True` is passed\n    - When it matches the flag name prefixed with `no` (`nomyflag`), `False` is passed\n- **Positional:** Remaining headline values and function parameters are assigned one-to-one by position\n- **Restricted:** Restrictions on how to receive the values ([keyword-only] and [positional-only]) are respected and they will receive only values from either key or keyless values\n- **Varidics:** If the signature contains key (`**kwds`) or positional (`*args`) varidic variables, any remaining key and keyless values from the headline are assigned to them\n\nFollowing Markdown phylosophy, errors are warned but do not stop the processing, so:\n\n- Unmatched function parameters without a default value will be warned and assigned an empty string.\n- Unused headline values will be warned and ignored.\n\n[keyword-only]: https://www.python.org/dev/peps/pep-3102/\n[positional-only]: https://www.python.org/dev/peps/pep-0570/\n\nA generator can use several strategies to generate content:\n\n- Return an html string (single root node)\n- Return a `markdown.etree` `Element` object\n- Manipulate `ctx.parent` to add the content and return `None`\n\nIn order to construct an ElementTree,\nwe recommend using the [Hyperscript utility](#hyperscript-generation).\nResulting code will be more compact and readable and\nmakes proper escaping when injecting values.\n\n## Predefined generators\n\n### Container (`customblocks.generators.container`)\n\nThis is the default generator when no other generator matches the block type.\nIt can be used to generate html div document structure with markdown.\n\nIt creates a `<div>` element with the type name as class.\nKeyless values are added as additional classes and\nkey values are added as attributes for the `div` element.\n\n`*args`\n: added as additional classes for the outter div\n\n`**kwds`\n: added as attributes for the outter div\n\n\nThe following example:\n\n```markdown\n::: sidebar left style=\"width: 30em\"\n    ::: widget\n        # Social\n        ...\n    ::: widget\n        # Related\n        ...\n```\n\nRenders as:\n\n```html\n<div class='sidebar left' style=\"width: 30em\">\n    <div class='widget'>\n        <h1>Social</h1>\n        <p>...</p>\n    </div>\n    <div class='widget'>\n        <h1>Related</h1>\n        <p>...</p>\n    </div>\n</div>\n```\n\n### Admonition (`customblocks.generators.admonition`)\n\nAn admonition is a specially formatted text out of the main flow\nwhich remarks a piece of text, often in a box or with a side\nicon to identify it as that special type of text.\n\nAdmonition generator is, by default, assigned to the following types:\n`attention`, `caution`, `danger`, `error`, `hint`, `important`, `note`, `tip`, `warning`.\n\nSo you can write:\n\n```markdown\n::: danger\n    Do not try to do this at home\n```\n\nIn order to generate:\n\n```html\n<div class=\"admonition danger\">\n<p class=\"admonition-title\">Danger</p>\n<p>Do not try to do this at home</p>\n</div>\n```\n\nGenerated code emulates the one generated by ReST admonitions\n(which is also emulated by `markdown.extra.admonition`).\nSo, you can benefit from existing styles and themes.\n\n`title`\n: in the title box show that text instead of the \n\n`*args`\n: added as additional classes for the outter div\n\n`**kwds`\n: added as attributes for the outter div\n\n**Warning:**\nIf you are migrating from `extra.admonition`,\nbe careful as `extra` identifies title using the quotes,\nwhile `customblocks` will take the first parameter as title and next values as additional classes.\nIf you like having the classes before, you should explicit the `title` key.\n\n```markdown\n::: danger blinking title=\"Super danger\"\n    Do **not** try to do this at home\n```\n\n### Figure (`customblocks.generators.figure`)\n\nAn image as captioned figure.\nThe content is taken as caption.\n\n`url`\n: the url to the image\n\n`alt` (keyword only)\n: image alt attribute\n\n`title` (keyword only)\n: image title attribute\n\n`*args`\n: additional classes for root `<figure>` tag\n\n`**kwds`\n: additional attributes for root `<figure>` tag\n\n\n\n\n### Link card (`customblocks.generators.linkcard`)\n\nA link card is a informative box about an external source.\nIt is similar to the card that popular apps like\nWordpress, Facebook, Twitter, Telegram, Slack...\ngenerate when you embed/post a link.\n\nThe generator downloads the target url and extracts social [metadata][SocialMeta]:\nFeatured image, title, description...\n\n[SocialMeta]: https://css-tricks.com/essential-meta-tags-social-media/\n\n```markdown\n::: linkcard https://css-tricks.com/essential-meta-tags-social-media/\n```\n\n`url`\n: The url to embed as card\n\n`wideimage` (Flag, default True)\n: Whether the featured image will be shown wide, if not, a small thumb will be shown\n\nContent, if provided will be used as excerpt instead of the summary in the page.\n\nAdditionally you can provide the following keyword parameters\nto override information extracted from the url:\n\n- `image`: the image heading the card\n- `title`: the caption\n- `description`: the text describing the link\n- `siteurl`: a link to the main site\n- `sitename`: the name of the main site\n- `siteicon`: the site icon\n\n### Youtube (`customblocks.generators.youtube`)\n\nThis generator generates an embeded youtube video.\n\n```markdown\n::: youtube HUBNt18RFbo nocontrols left-align\n```\n\n`autoplay` (flag, default False)\n: starts the video as soon as it is loaded\n\n`loop` (flag, default False)\n: restart again the video once finished\n\n`controls` (flag, default True)\n: show the controls\n\n`*args`\n: added as additional class for the outter div\n\n`**kwds`\n: added as attributes for the outter div\n\nIndented content is ignored.\n\nRecommended css:\n\n```css\n.videowrapper {\n    position:relative;\n    padding-bottom:56.25%;\n    overflow:hidden;\n    height:0;\n    width:100%\n}\n.videowrapper iframe {\n    position:absolute;\n    left:0;\n    top:0;\n    width:100%;\n    height:100%;\n}\n```\n\nOr you could set `youtube_inlineFluidStyle` config to `True`\nand the style will be added inline to every video.\n\n\n### Vimeo (`customblocks.generators.vimeo`)\n\nThis generator generates an embeded vimeo video.\n\n```markdown\n::: vimeo 139579122  nocontrols left-align\n```\n\n`autoplay` (flag, default False)\n: starts the video as soon as it is loaded\n\n`loop` (flag, default False)\n: restart again the video once finished\n\n`bylabel` (flag, default True)\n: Shows the video author's name\n\n`portrait` (flag, default False)\n: Shows the video author's avatar\n\n`*args`\n: added as additional class for the outter div\n\n`**kwds`\n: added as attributes for the outter div\n\nContent is ignored.\n\n\n### Twitter (`customblocks.generators.twitter`)\n\nEmbeds a tweet.\n\n```markdown\n::: twitter marcmushu 1270395360163307530 theme=dark lang=es track=true\n```\n\n`user`:\n: the user that wrote the tweet\n\n`tweet`\n: the tweet id (a long number)\n\n`theme` (optional, default `light`)\n: It can be either `dark` or `light`\n\n`hideimages`\n: Do not show attached images in the embedded\n\n`align`\n: `left`, `center` or `right`\n\n`conversation`\n: whether to add or not the full thread\n\n\n### Verkami (`customblocks.generators.verkami`)\n\nEmbeds a [Verkami] fund raising campaign widget.\n\n[Verkami]: https://www.verkami.com/\n\n```markdown\n::: verkami 26588 landscape\n```\n\n`id`\n: The id of the project (can be the number or the full id)\n\n`landscape` (Flag, default False)\n: instead of a portrait widget generate a landscape one\n\n\n### Goteo (`customblocks.generators.goteo`)\n\nEmbeds a [Goteo] fund raising campaign widget.\n\n[Goteo]: https://goteo.org\n\n```markdown\n::: goteo my-cool-project\n```\n\n`id`\n: The id of the project\n\n\n## Generator tools\n\nCommon code has been extracted from predefined generators.\nIf you need this functionality you are encouraged to use them.\n\n- Hyperscript: to generate html\n- PageInfo: to extract metadata from a webpage\n- Fetcher: to download resources with file based cache\n\n\n### Hyperscript generation\n\nYou can generate html with strings or using `etree`; but there is a more elegant option.\n\n[Hyperscript] is the idea of writing code that generates html/xml\nas nested function calls that look like the the actual xml structure.\nThis can be done by using the `customblocks.utils.E` function which has this signature:\n\n```\ndef E(tag, *children, **attributes): ...\n```\n\n`tag` is the name of the tag (`pre`, `div`, `strong`...).\nAn empty string is equivalent to `div`.\nIt can have appended several `.classname` that will be added as element class.\n\nAny keyword parameter will be taken as element attributes.\nYou can use the special `_class` attribute to append more classes.\nNotice the underline, as `class` is a reserved word in Python.\n\n`children` takes the keyless parameters and they can be:\n\n- `None`: then it will be ignored\n- `dict`: it will be merged with the attributes\n- `str`: it will be added as text\n- `etree.Element`: it will be added as child node\n- `customblocks.utils.Markdown`: will append parsed markdown (see below)\n- Any `tuple`, `list` or iterable: will add each item following previous rules\n\n```python\nfrom customblocks.utils import E, Markdown\n\ndef mygenerator(ctx, image):\n\treturn (\n\t\tE('.mytype',\n\t\t\tdict(style=\"width: 30%; align: left\"),\n\t\t\tE('a', dict(href=image),\n\t\t\t\tE('img', src=image),\n\t\t\t),\n\t\t\tMarkdown(ctx.content, ctx.parser),\n\t\t)\n\t)\n```\n\n[Hyperscript]: http://hyperhype.github.io/hyperscript/\n\n### PageInfo\n\n`utils.pageinfo.PageInfo` is a class that retrieves\nmeta information from html pages by means of its properties.\n\nProperties are cached so you once you use them for one page,\nlater uses, have litle impact.\n\nAny attribute you explicit on the constructor will override\nthe ones derived from actual content.\n\n```python\ninfo = PageInfo(html, url='http://site.com/path/page.html')\ninfo.sitename # the name of the site (meta og:site_name or the domain\ninfo.siteicon # the favicon or similar\ninfo.siteurl  # the base url of the site (not the page)\ninfo.title    # page title (from og:title meta or `<title>` content)\ninfo.description # short description (from og:description or twitter:description)\ninfo.image    # featured image (from og:image or twitter:image, or site image)\n```\n\n### Fetcher\n\nA fetcher object is a wrapper around the `requests` library\nthat uses caching to avoid downloading once and again remote resource\neach time you compile the markdown file.\n\nThe first time a resource is succesfully downloaded by a fetcher\nthe request response is stored in the provided folder in a yaml file\nwhich has the mangled url as name.\nSuccessive tries to download it just take the content of that file\nto construct a query.\n\n```python\nfrom customblocks.utils import Fetcher\n\nfetcher = Fetcher('mycachedir')\nresponse = fetcher.get('https://canvoki.net/codder')\n# to force next call\nfetcher.remove('https://canvoki.net/codder')\n```\n\n## Release history\n\nSee [CHANGES.md](CHANGES.md)\n\n\n## TODO\n\n- Default css for generators\n- Flags: coerce to bool?\n- Annotations: coerce to any type\n- Fetcher:\n\t- configurable cache dir\n\t- file name too long\n\t- handle connection errors\n- Linkcard:\n\t- Look for short description by class (ie wikipedia)\n- Youtube:\n    - Take aspect ratio and sizes from Youtube api\n    - Use covers\n    - Privacy safe mode\n- Twitter\n    - Privacy safe mode\n- Figure flags:\n\t- no flag\n\t\t- Un modified url\n\t- local (when remote url)\n\t\t- download\n\t\t- place it on a given dir\n\t\t- set url to local path\n\t- inline\n\t\t- download\n\t\t- detect mime type\n\t\t- compute base 64\n\t\t- set url to data url\n\t- thumb\n\t\t- download\n\t\t- generate a thumb\n\t\t- place the thumb on thumb dir\n\t\t- when combined with 'inline'\n\t\t\t- url to the local path\n\t\t- when combined with 'local'\n\t\t\t- link to the image\n\t- lightbox\n\t- sized\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vokimon/markdown-customblocks",
    "keywords": "markdown extension customblocks admonitions container figure youtube vimeo twitter verkami goteo",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "markdown-customblocks",
    "package_url": "https://pypi.org/project/markdown-customblocks/",
    "platform": "",
    "project_url": "https://pypi.org/project/markdown-customblocks/",
    "project_urls": {
      "Homepage": "https://github.com/vokimon/markdown-customblocks"
    },
    "release_url": "https://pypi.org/project/markdown-customblocks/1.1.2/",
    "requires_dist": [
      "markdown",
      "yamlns",
      "beautifulsoup4",
      "decorator",
      "pytest",
      "responses"
    ],
    "requires_python": ">=2.7",
    "summary": "Python Markdown extension to add custom parametrizable and nestable blocks",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16034205,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad7a065a68edf733761137354be9fe0cf4b602b915d8a2b22130da9f7ef7c8ea",
        "md5": "8e5937b6a549542f7d81121e71365ca3",
        "sha256": "81a3601754d6498e5ff2c21bd05dd054b48c01a642e231f41cfb141da1a7d2b5"
      },
      "downloads": -1,
      "filename": "markdown_customblocks-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8e5937b6a549542f7d81121e71365ca3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7",
      "size": 40385,
      "upload_time": "2022-02-22T21:14:27",
      "upload_time_iso_8601": "2022-02-22T21:14:27.965757Z",
      "url": "https://files.pythonhosted.org/packages/ad/7a/065a68edf733761137354be9fe0cf4b602b915d8a2b22130da9f7ef7c8ea/markdown_customblocks-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04c6a33ded850e9b885b564fb1fc742d0b078fd47254949677bbfb25aef3f23e",
        "md5": "5c41de50ea22ecbd62aa0f052fe924f0",
        "sha256": "21301cea747f0476f732f5ea2eef6c1b357e96ea303d8cc71fd19ae0183d6c32"
      },
      "downloads": -1,
      "filename": "markdown-customblocks-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5c41de50ea22ecbd62aa0f052fe924f0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 45314,
      "upload_time": "2022-02-22T21:14:29",
      "upload_time_iso_8601": "2022-02-22T21:14:29.907290Z",
      "url": "https://files.pythonhosted.org/packages/04/c6/a33ded850e9b885b564fb1fc742d0b078fd47254949677bbfb25aef3f23e/markdown-customblocks-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}