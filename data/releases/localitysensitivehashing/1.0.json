{
  "info": {
    "author": "Avinash Kak",
    "author_email": "kak@purdue.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Topic :: Utilities"
    ],
    "description": "Consult the module API page at\n\n    https://engineering.purdue.edu/kak/distLSH/LocalitySensitiveHashing-1.0.html\n\nfor all information related to this module, including\ninformation regarding the latest changes to the code. The\npage at the URL shown above lists all of the module\nfunctionality you can invoke in your own code.\n\nLocality Sensitive Hashing (LSH) is a computationally\nefficient approach for finding nearest neighbors in large\ndatasets.  The main idea in LSH is to avoid having to\ncompare every pair of data samples in a large dataset in\norder to find the nearest similar neighbors for the\ndifferent data samples.  With LSH, one can expect a data\nsample and its closest similar neighbors to be hashed into\nthe same bucket with a high probability.  By treating the\ndata samples placed in the same bucket as candidates for\nsimilarity checking, we significantly reduce the\ncomputational burden associated with similarity detection in\nlarge datasets.\n\nWhile LSH algorithms have traditionally been used for\nfinding nearest neighbors, this module goes a step further\nand explores using LSH for clustering the data.  Strictly\nspeaking, this violates the basic mandate of LSH, which is\nto return just the nearest neighbors. (A being a nearest\nneighbor of B and B being a nearest neighbor of C, in the\nsense such nearest neighbors are defined in the context of\nLSH, does not imply that A and C will always be sufficiently\nclose to be considered similar.)  Nonetheless, if you\nbelieve that your datafile consists of non-overlapping data\nclusters, this module may do a decent job of finding those\nclusters.\n\nTypical usage syntax for invoking LocalitySensitiveHashing\nin your own code:\n\n::\n\n        from LocalitySensitiveHashing import *\n        datafile = \"data_for_lsh.csv\"\n        lsh = LocalitySensitiveHashing( \n                           datafile = datafile,\n                           dim = 10,\n                           r = 50,         \n                           b = 100,        \n                           expected_num_of_clusters = 10,\n                  )\n        lsh.get_data_from_csv()\n        lsh.initialize_hash_store()\n        lsh.hash_all_data()\n        similarity_groups = lsh.lsh_basic_for_neighborhood_clusters()\n        coalesced_similarity_groups = lsh.merge_similarity_groups_with_coalescence( similarity_groups )\n        merged_similarity_groups = lsh.merge_similarity_groups_with_l2norm_sample_based( coalesced_similarity_groups )\n        lsh.write_clusters_to_file( merged_similarity_groups, \"clusters.txt\" )",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://engineering.purdue.edu/kak/distLSH/LocalitySensitiveHashing-1.0.tar.gz#md5=22057425f52f7ad352af30256ad0a2db",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://engineering.purdue.edu/kak/distLSH/LocalitySensitiveHashing-1.0.html",
    "keywords": "locality sensitive hashing,nearest neighbor calculation,hashing with hyperplanes,clustering",
    "license": "Python Software Foundation License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "LocalitySensitiveHashing",
    "package_url": "https://pypi.org/project/LocalitySensitiveHashing/",
    "platform": "All platforms",
    "project_url": "https://pypi.org/project/LocalitySensitiveHashing/",
    "project_urls": {
      "Download": "https://engineering.purdue.edu/kak/distLSH/LocalitySensitiveHashing-1.0.tar.gz#md5=22057425f52f7ad352af30256ad0a2db",
      "Homepage": "https://engineering.purdue.edu/kak/distLSH/LocalitySensitiveHashing-1.0.html"
    },
    "release_url": "https://pypi.org/project/LocalitySensitiveHashing/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Python implementation of Locality Sensitive Hashing for finding nearest neighbors and clusters in multidimensional numerical data",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2898990,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0f9b9c322d0fc0c11cf46f3cb78ed960530a013e18f28f1c67c4effbb6c25ed",
        "md5": "22057425f52f7ad352af30256ad0a2db",
        "sha256": "20b5f1f947930e92c4e3c3d74a1521a4e4ef77b2981e33744db014b3e7ea484e"
      },
      "downloads": -1,
      "filename": "LocalitySensitiveHashing-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "22057425f52f7ad352af30256ad0a2db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 63053,
      "upload_time": "2017-05-11T15:36:45",
      "upload_time_iso_8601": "2017-05-11T15:36:45.585416Z",
      "url": "https://files.pythonhosted.org/packages/d0/f9/b9c322d0fc0c11cf46f3cb78ed960530a013e18f28f1c67c4effbb6c25ed/LocalitySensitiveHashing-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}