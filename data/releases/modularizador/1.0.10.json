{
  "info": {
    "author": "Heitor Leal Farnese",
    "author_email": "heitor.leal.farnese@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Modularizador\r\nFor explanations in english, scroll down *(Explica&#x00E7;&otilde;es em ingl&ecirc;s no final)*.\r\n\r\nInstale com\r\n> !pip install modularizador\r\n\r\nAp&oacute;s importado no Jupyter Notebook, permite importar arquivos .ipynb como se fossem arquivos .py, inclusive os que est&atilde;o em subpastas.\r\n\r\nExemplo de uso:\r\n1. Na pasta do seu projeto, use seu Jupyter Notebook para criar o arquivo main.ipynb, depois crie um arquivo chamado **somador.ipynb** e coloque ele dentro de uma subpasta chamada **pacotes**.\r\n```\r\n'----Diret&oacute;rio do seu projeto\r\n    |   main.ipynb\r\n    |\r\n    '---pacotes\r\n            somador.ipynb\r\n```\r\n2. Crie uma fun&#x00E7;&atilde;o chamada soma dentro do arquivo somador.ipynb:\r\n\r\n```python\r\ndef soma(a, b):\r\n    return a + b\r\n```\r\n3. Agora, a partir de main.ipynb, &eacute; s&oacute; importar o modularizador e voc&ecirc; poder&aacute; importar tamb&eacute;m o somador.ipynb:\r\n\r\n```python\r\nimport modularizador\r\nfrom pacotes import somador\r\nsomador.soma(2, 3)\r\n>>> 5\r\n```\r\n\r\nO c&oacute;digo utilizado nesta biblioteca para obter o resultado acima foi extra&iacute;do [desta p&aacute;gina](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Importing%20Notebooks.html) da documenta&#x00E7;&atilde;o do Jupyter Notebook. \r\nDaqui para baixo vamos nos referir a ele como *o script*, ou como *modularizador.py*.\r\n---\r\nA biblioteca modularizador conta ainda com 3 fun&#x00E7;&otilde;es &uacute;teis: **ativa()**, **desativa()** e **status_startup()**.\r\n* ##### ativa()\r\n\r\n```python\r\nimport modularizador\r\nmodularizador.ativa()\r\n```\r\nInsere *o script* na pasta startup do ipython, tornando desnecess&aacute;rio importar a biblioteca modularizador a partir das pr&oacute;ximas vezes que voc&ecirc; abrir um projeto. O efeito durar&aacute; enquanto *modularizador.py* estiver na pasta startup, portanto fechar seu Jupyter Notebook n&atilde;o o desfar&aacute;. \r\n\r\nNo exemplo anterior, se voc&ecirc; j&aacute; tivesse, em algum momento do passado, realizado o procedimento de ativa&#x00E7;&atilde;o logo acima, poderia, em seu novo projeto, importar pacotes/somador.ipynb sem a necessidade de importar o modularizador. Simplesmente assim:\r\n```python\r\nfrom pacotes import somador\r\nsomador.soma(2, 3)\r\n>>> 5\r\n```\r\n* ##### desativa()\r\n```python\r\nimport modularizador\r\nmodularizador.desativa()\r\n```\r\nRemove *o script modularizador.py* da pasta startup do ipyton, tirando do seu Jupyter Notebook a capacidade de importar arquivos .ipynb sem importar manualmente o modularizador em cada projeto.\r\n\r\n* ##### status_startup()\r\n```python\r\nimport modularizador\r\nmodularizador.status_startup()\r\n```\r\nApenas informa se *o script modularizador.py* est&aacute; na pasta startup do ipyton. I.e., se est&aacute; ou n&atilde;o ativo o recurso que permite a importa&#x00E7;&atilde;o de arquivos .ipynb sem a necessidade de importar a biblioteca modularizador explicitamente em cada projeto.\r\n\r\n&Eacute; s&oacute; isso. Abaixo est&atilde;o as mesmas explica&#x00E7;&otilde;es acima em ingl&ecirc;s.\r\n\r\n---\r\n---\r\n---\r\n---\r\n---\r\n## == Explanations in english ==\r\n\r\nInstall with\r\n> !pip install modularizador\r\n\r\nAfter importing modularizador on Jupyter Notebook, you'll be able to import .ipynb files as if they were .py files, even those inside subfolders.\r\n\r\nUsage example:\r\n1. Inside your project directory, use your Jupyter Notebook to create main.ipynb, then create **summer.ipynb** and put it inside a subfolder named **packages**.\r\n```\r\n'----DiretÃ³rio do seu projeto\r\n    |   main.ipynb\r\n    |\r\n    '---pacotes\r\n            somador.ipynb\r\n```\r\n2. Define a function named add inside summer.ipynb:\r\n\r\n```python\r\ndef add(a, b):\r\n    return a + b\r\n```\r\n3. Now, inside main.ipynb, import modularizador and you'll become able to import summer.ipynb too afterwards:\r\n\r\n```python\r\nimport modularizador\r\nfrom packages import summer\r\nsummer.add(2, 3)\r\n>>> 5\r\n```\r\n\r\nThe code that makes this possible was extracted from [this page](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Importing%20Notebooks.html) of Jupyter Notebook's documentation. \r\nFrom now on, we will refer to it either as *the script* or as *modularizador.py*.\r\n---\r\nThe modularizador library has 3 useful methods: **ativa()**, **desativa()** and **status_startup()**.\r\n* ##### ativa()\r\n\r\n```python\r\nimport modularizador\r\nmodularizador.ativa()\r\n```\r\nAtiva means activate. This method inserts *the script* in ipython's startup, making it unnecessary to explicitly import modularizador everytime you open a new Jupyter Notebook project from now on. This effect will last as long as *modularizador.py* remains in the startup folder, so closing your Jupyter Notebook won't undo it. \r\n\r\nIn our last example, had you activated modularizador somewhen in the past, you would be able to import packages/summer.ipynb without having to import modularizador first. Just like:\r\n```python\r\nfrom packages import summer\r\nsummer.add(2, 3)\r\n>>> 5\r\n```\r\n* ##### desativa()\r\n```python\r\nimport modularizador\r\nmodularizador.desativa()\r\n```\r\nDesativa means deactivate. This method removes *the script (modularizador.py)* from ipython's startup folder, making your Jupyter Notebook unable to import .ipynb without manually importing modularizador priorly in each project again.\r\n\r\n* ##### status_startup()\r\n```python\r\nimport modularizador\r\nmodularizador.status_startup()\r\n```\r\nJust tells you whether or not *the script (modularizador.py)* is in ipython's startup folder. I.e., whether modularizador is active and hence allowing you to import .ipynb without the need to explicitly import modularizador beforehand in your projects or not.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "módulos ipynb jupyter notebook py importar importação import importation importing modules ipython",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modularizador",
    "package_url": "https://pypi.org/project/modularizador/",
    "platform": null,
    "project_url": "https://pypi.org/project/modularizador/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/modularizador/1.0.10/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Importe arquivos .ipynb como se fossem arquivos .py no Jupyter Notebook ||||| Import .ipynb files as if they were .py files on Jupyter Notebook",
    "version": "1.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15979697,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dede3fbc4611db651fd15534c8e57e0937c41367bf131c2e985bc248e765fd03",
        "md5": "ada178c36faeb2b6f8a6a8c63f7d3722",
        "sha256": "380c6e1eab7cac9d50c6cc031c00bfd078234860c65c882191eb37781042821a"
      },
      "downloads": -1,
      "filename": "modularizador-1.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ada178c36faeb2b6f8a6a8c63f7d3722",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8624,
      "upload_time": "2022-12-03T15:59:50",
      "upload_time_iso_8601": "2022-12-03T15:59:50.382747Z",
      "url": "https://files.pythonhosted.org/packages/de/de/3fbc4611db651fd15534c8e57e0937c41367bf131c2e985bc248e765fd03/modularizador-1.0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85e627a5f9c3c52df7030a5b82625b6428fef3d429344a2fd54d9b46f1ef8d89",
        "md5": "f60b6d0100728195ede1d8a2f371ec0f",
        "sha256": "3faeeacf01a111de7640d5f2ad57ac3459be909c3e7d626406a4e87d83a49ac3"
      },
      "downloads": -1,
      "filename": "modularizador-1.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "f60b6d0100728195ede1d8a2f371ec0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5953,
      "upload_time": "2022-12-03T15:59:52",
      "upload_time_iso_8601": "2022-12-03T15:59:52.469581Z",
      "url": "https://files.pythonhosted.org/packages/85/e6/27a5f9c3c52df7030a5b82625b6428fef3d429344a2fd54d9b46f1ef8d89/modularizador-1.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}