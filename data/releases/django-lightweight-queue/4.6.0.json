{
  "info": {
    "author": "Thread Engineering",
    "author_email": "tech@thread.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django Lightweight Queue\n\nDLQ is a lightweight & modular queue and cron system for Django. It powers\nmillions of production jobs every day at Thread.\n\n## Installation\n\n```shell\npip install django-lightweight-queue[redis]\n```\n\nCurrently the only production-ready backends are redis-based, so the `redis`\nextra is essentially required. Additional non-redis backed production-ready\nbackends are great candidates for community contributions.\n\n## Basic Usage\n\nStart by adding `django_lightweight_queue` to your `INSTALLED_APPS`:\n\n```python\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    ...,\n    \"django_lightweight_queue\",\n]\n```\n\nAfter that, define your task in any file you want:\n\n```python\nimport time\nfrom django_lightweight_queue import task\n\n# Define a task\n@task()\ndef long_running_task(first_arg, second_arg):\n    time.sleep(first_arg * second_arg)\n\n# Request that the task be executed at some point\nlong_running_task(4, second_arg=9)\n```\n\nSee the docstring on the [`task`](django_lightweight_queue/task.py) decorator\nfor more details.\n\n## Configuration\n\nAll automatically picked up configuration options begin with `LIGHTWEIGHT_QUEUE_`\nand can be found in `app_settings.py`. They should be placed in the usual Django\nsettings files, for example:\n\n```python\nLIGHTWEIGHT_QUEUE_BACKEND = 'django_lightweight_queue.backends.redis.RedisBackend'\n```\n\n#### Special Configuration\n\nIf desired, specific configuration overrides can be placed in a standalone\npython file which passed on the command line. This is useful for applying\ncustomisations for specific servers.\n\nFor example, given a `special.py` containing:\n\n```python\nLIGHTWEIGHT_QUEUE_REDIS_PORT = 12345\n```\n\nand then running:\n\n```\n$ python manage.py queue_runner --config=special.py\n```\n\nwill result in the runner to use the settings from the specified configuration\nfile in preference to settings from the Django environment. Any settings not\npresent in the specified file are inherited from the global configuration.\n\n## Backends\n\nThere are four built-in backends:\n\n### Synchronous (Development backend)\n\n`django_lightweight_queue.backends.synchronous.SynchronousBackend`\n\nExecutes the task inline, without any actual queuing.\n\n### Redis (Production backend)\n\n`django_lightweight_queue.backends.redis.RedisBackend`\n\nExecutes tasks at-most-once using [Redis][redis] for storage of the enqueued tasks.\n\n### Reliable Redis (Production backend)\n\n`django_lightweight_queue.backends.reliable_redis.ReliableRedisBackend`\n\nExecutes tasks at-least-once using [Redis][redis] for storage of the enqueued tasks (subject to Redis consistency). Does not guarantee the task _completes_.\n\n### Debug Web (Debug backend)\n\n`django_lightweight_queue.backends.debug_web.DebugWebBackend`\n\nInstead of running jobs it prints the url to a view that can be used to run a task in a transaction which will be rolled back. This is useful for debugging and optimising tasks.\n\nUse this to append the appropriate URLs to the bottom of your root `urls.py`:\n\n```python\nfrom django.conf import settings\nfrom django.urls import path, include\n\nurlpatterns = [\n    ...\n]\n\nif settings.DEBUG:\n    urlpatterns += [\n        path(\n            \"\",\n            include(\n                \"django_lightweight_queue.urls\", namespace=\"django-lightweight-queue\"\n            ),\n        )\n    ]\n```\n\nThis backend may require an extra setting if your debug site is not on localhost:\n\n```python\n# defaults to http://localhost:8000\nLIGHTWEIGHT_QUEUE_SITE_URL = \"http://example.com:8000\"\n```\n\n[redis]: https://redis.io/\n\n## Running Workers\n\nThe queue runner is implemented as a Django management command:\n\n```\n$ python manage.py queue_runner\n```\n\nWorkers can be distributed over multiple hosts by telling each runner that it is\npart of a pool:\n\n```\n$ python manage.py queue_runner --machine 2 --of 4\n```\n\nAlternatively a runner can be told explicitly which configuration to use:\n\n```\n$ python manage.py queue_runner --exact-configuration --config=special.py\n```\n\nWhen using `--exact-configuration` the number of workers is configured exactly,\nrather than being treated as the configuration for a pool. Additionally,\nexactly-configured runners will _not_ run any cron workers.\n\n#### Example\n\nGiven a Django configuration containing:\n\n```python\nLIGHTWEIGHT_QUEUE_WORKERS = {\n    'queue1': 3,\n}\n```\n\nand a `special.py` containing:\n\n```python\nLIGHTWEIGHT_QUEUE_WORKERS = {\n    'queue1': 2,\n}\n```\n\nRunning any of:\n\n```\n$ python manage.py queue_runner --machine 1 --of 3 # or,\n$ python manage.py queue_runner --machine 2 --of 3 # or,\n$ python manage.py queue_runner --machine 3 --of 3\n```\n\nwill result in one worker for `queue1` on the current machine, while:\n\n```\n$ python manage.py queue_runner --exact-configuration --config=special.py\n```\n\nwill result in two workers on the current machine.\n\n## Cron Tasks\n\nDLQ supports the use of a cron-like specification of Django management commands\nto be run at certain times.\n\nTo specify that a management command should be run at a given time, place a\n`cron.py` file in the root folder of the Django app which defines the command\nand which contains a `CONFIG` variable:\n\n```python\nCONFIG = (\n    {\n        'command': 'my_cron_command',\n        # Day values 1-7 to match datetime.datetime.utcnow().isoweekday()\n        'days': '*',\n        'hours': '*',\n        'minutes': '*',\n        # Equivalent behaviour to the kwarg to `task` of the same name\n        'sigkill_on_stop': True,\n    },\n)\n```\n\n## Maintainers\n\nThis repository was created by [Chris Lamb](https://github.com/lamby) at\n[Thread](https://www.thread.com/), and continues to be maintained by the [Thread\nengineering team](https://github.com/thread).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thread/django-lightweight-queue/",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-lightweight-queue",
    "package_url": "https://pypi.org/project/django-lightweight-queue/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-lightweight-queue/",
    "project_urls": {
      "Homepage": "https://github.com/thread/django-lightweight-queue/"
    },
    "release_url": "https://pypi.org/project/django-lightweight-queue/4.6.0/",
    "requires_dist": [
      "django (>=2.2)",
      "daemonize (>=2.5.0,<2.6.0)",
      "prometheus-client (>=0.7,<1.0)",
      "typing-extensions (>=4,<5)",
      "redis; extra == \"redis\"",
      "tqdm (>=4.54.1,<5.0.0); extra == \"progress\""
    ],
    "requires_python": ">=3.6.1,<4",
    "summary": "Lightweight & modular queue and cron system for Django",
    "version": "4.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15814376,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b9f01e631ffaaa8ec399a186575ed4f87decbdc2018cef7e8d56187133e034f",
        "md5": "373f1894abde1a031af8caa52418757b",
        "sha256": "56be9d788eed1d55e54301c1ed8216866f16aab28758ffb450a841c2af58d4aa"
      },
      "downloads": -1,
      "filename": "django_lightweight_queue-4.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "373f1894abde1a031af8caa52418757b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.1,<4",
      "size": 38148,
      "upload_time": "2022-08-15T15:27:38",
      "upload_time_iso_8601": "2022-08-15T15:27:38.823494Z",
      "url": "https://files.pythonhosted.org/packages/1b/9f/01e631ffaaa8ec399a186575ed4f87decbdc2018cef7e8d56187133e034f/django_lightweight_queue-4.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "56e989aeedf4dd41e9877615e0d8d8dfd9643c17b7b120866ef3aa1de9b06399",
        "md5": "6a0cd581dfd0221b39f022467fcb48a9",
        "sha256": "ffb20351870b51c081e017ca7b858a73117b09301cc0a989bd4cf4b7baae1bf1"
      },
      "downloads": -1,
      "filename": "django-lightweight-queue-4.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6a0cd581dfd0221b39f022467fcb48a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1,<4",
      "size": 27492,
      "upload_time": "2022-08-15T15:27:37",
      "upload_time_iso_8601": "2022-08-15T15:27:37.068171Z",
      "url": "https://files.pythonhosted.org/packages/56/e9/89aeedf4dd41e9877615e0d8d8dfd9643c17b7b120866ef3aa1de9b06399/django-lightweight-queue-4.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}