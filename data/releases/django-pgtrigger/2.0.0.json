{
  "info": {
    "author": "Wes Kendall",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "django-pgtrigger\n################\n\n``django-pgtrigger`` provides primitives for configuring\n`Postgres triggers <https://www.postgresql.org/docs/current/sql-createtrigger.html>`__\non Django models.\n\nTriggers can solve a\nwide variety of database-level problems more elegantly and reliably\nthan in the application-level of Django. Here are some common\nproblems that can be solved with triggers, many of which we later show how to\nsolve in the docs:\n\n1. Protecting updates and deletes or rows or columns (``pgtrigger.Protect``).\n2. Soft deleting models by setting a field to a value on delete (``pgtrigger.SoftDelete``).\n3. Tracking changes to models or columns change, or when specific conditions\n   happen (`django-pghistory <https://django-pghistory.readthedocs.io>`__ uses ``django-pgtrigger`` to do this).\n4. Keeping fields in sync with other fields.\n5. Ensuring that engineers use an official interface\n   (e.g. engineers must use ``User.objects.create_user`` and not\n   ``User.objects.create``).\n6. Only allowing a status field of a model to transition through certain\n   states (``pgtrigger.FSM``).\n\nQuick Start\n===========\n\nInstall ``django-pgtrigger`` with ``pip install django-pgtrigger`` and\nadd ``pgtrigger`` to ``settings.INSTALLED_APPS``.\n\nModels are decorated with ``@pgtrigger.register`` and supplied with\n``pgtrigger.Trigger`` objects. If you don't have access to the model definition,\nyou can still call ``pgtrigger.register`` programmatically.\n\nUsers declare the plpgsql code manually\nin a ``pgtrigger.Trigger`` object or can use the derived triggers in\n``django-pgtrigger`` that implement common scenarios. For example,\n``pgtrigger.Protect`` can protect operations on a model, such as deletions:\n\n.. code-block:: python\n\n    from django.db import models\n    import pgtrigger\n\n\n    @pgtrigger.register(pgtrigger.Protect(operation=pgtrigger.Delete))\n    class CannotBeDeletedModel(models.Model):\n        \"\"\"This model cannot be deleted!\"\"\"\n\n``django-pgtrigger`` aims to alleviate the boilerplate of triggers and\nhaving to write raw SQL by using common Django idioms. For example, users\ncan use ``pgtrigger.Q`` and ``pgtrigger.F`` objects to\nconditionally execute triggers based on the ``OLD`` and ``NEW`` row\nbeing modified. For example, let's only protect deletes\nagainst \"active\" rows of a model:\n\n.. code-block:: python\n\n    from django.db import models\n    import pgtrigger\n\n\n    @pgtrigger.register(\n        pgtrigger.Protect(\n            operation=pgtrigger.Delete,\n            # Protect deletes when the OLD row of the trigger is still active\n            condition=pgtrigger.Q(old__is_active=True)\n        )\n    )\n    class CannotBeDeletedModel(models.Model):\n        \"\"\"Active model object cannot be deleted!\"\"\"\n        is_active = models.BooleanField(default=True)\n\n\nCombining ``pgtrigger.Q``, ``pgtrigger.F``, and derived ``pgtrigger.Trigger``\nobjects can solve a wide array of Django problems without ever having to\nwrite raw SQL. Users, however, can still customize\ntriggers and write as much raw SQL as needed for their use case.\n\n\nTutorial\n========\n\nFor a complete run-through of ``django-pgtrigger`` and all derived\ntriggers (along with a trigger cookbook!), read the\n`pgtrigger docs <https://django-pgtrigger.readthedocs.io/>`__. The docs\nhave a full tutorial of how to configure triggers and lots of code examples.\n\nAfter you have gone through the\ntutorial in the docs, check out\n`<https://wesleykendall.github.io/django-pgtrigger-tutorial/>`__, which\nis an interactive tutorial written for a Django meetup talk about\n``django-pgtrigger``.\n\n\nDocumentation\n=============\n\n`View the django-pgtrigger docs here\n<https://django-pgtrigger.readthedocs.io/>`_.\n\nInstallation\n============\n\nInstall django-pgtrigger with::\n\n    pip3 install django-pgtrigger\n\nAfter this, add ``pgtrigger`` to the ``INSTALLED_APPS``\nsetting of your Django project.\n\nContributing Guide\n==================\n\nFor information on setting up django-pgtrigger for development and\ncontributing changes, view `CONTRIBUTING.rst <CONTRIBUTING.rst>`_.\n\nPrimary Authors\n===============\n\n- @wesleykendall (Wes Kendall)\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jyveapp/django-pgtrigger",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pgtrigger",
    "package_url": "https://pypi.org/project/django-pgtrigger/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pgtrigger/",
    "project_urls": {
      "Documentation": "https://django-pgtrigger.readthedocs.io",
      "Homepage": "https://github.com/jyveapp/django-pgtrigger",
      "Repository": "https://github.com/jyveapp/django-pgtrigger"
    },
    "release_url": "https://pypi.org/project/django-pgtrigger/2.0.0/",
    "requires_dist": [
      "django (>=2)",
      "django-pgconnection (>=1.0.1)"
    ],
    "requires_python": ">=3.6,<4",
    "summary": "Postgres trigger support integrated with Django models.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15330587,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "447db01fc9a9cca22f9b6f3cd96edfaa8c51c12772637d33398897b9285805f7",
        "md5": "fbb0cfd0fc0abafc9886eb0840584435",
        "sha256": "7ed657cdcf527740dd0bea983276f60c946d39432927501dfb9f6f5b242bd9eb"
      },
      "downloads": -1,
      "filename": "django_pgtrigger-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fbb0cfd0fc0abafc9886eb0840584435",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4",
      "size": 23982,
      "upload_time": "2020-10-12T20:10:26",
      "upload_time_iso_8601": "2020-10-12T20:10:26.482117Z",
      "url": "https://files.pythonhosted.org/packages/44/7d/b01fc9a9cca22f9b6f3cd96edfaa8c51c12772637d33398897b9285805f7/django_pgtrigger-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b20941ad891ee8cb37016b21589c3aaa20673f6117291c6fb8f4ef0eedc95a9e",
        "md5": "f7527b92d76d752ca4000d8220d28cc6",
        "sha256": "c284dec3c17b162672c2cd9dfb4247d7869bc5387d443cfe5e89eb6fc05a9589"
      },
      "downloads": -1,
      "filename": "django-pgtrigger-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f7527b92d76d752ca4000d8220d28cc6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4",
      "size": 21725,
      "upload_time": "2020-10-12T20:10:24",
      "upload_time_iso_8601": "2020-10-12T20:10:24.897073Z",
      "url": "https://files.pythonhosted.org/packages/b2/09/41ad891ee8cb37016b21589c3aaa20673f6117291c6fb8f4ef0eedc95a9e/django-pgtrigger-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}