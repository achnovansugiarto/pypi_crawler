{
  "info": {
    "author": "Wes Kendall",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "django-pgtrigger\n################\n\n``django-pgtrigger`` helps you write\n`Postgres triggers <https://www.postgresql.org/docs/current/sql-createtrigger.html>`__\nfor your Django models. It is compatible with Python 3.7 to 3.10 and Django 2.2 to 4.1.\n\nWhy should I use triggers?\n==========================\n\nTriggers can solve a variety of complex problems much more reliably and succinctly than application code. For example,\n\n1. Protecting operations on rows or columns (``pgtrigger.Protect``).\n2. Soft-deleting models (``pgtrigger.SoftDelete``).\n3. Snapshotting and tracking model changes (`django-pghistory <https://django-pghistory.readthedocs.io/>`__).\n4. Enforcing field transitions (``pgtrigger.FSM``).\n5. Keeping a search vector updated for full-text search (``pgtrigger.UpdateSearchVector``).\n6. Building official interfaces\n   (e.g. enforcing use of ``User.objects.create_user`` and not\n   ``User.objects.create``).\n7. Versioning models, mirroring fields, computing unique model hashes, and the list goes on...\n\nAll of these examples require no overridden methods, no base models, and no signal handling.\n\nQuick start\n===========\n\nInstall ``django-pgtrigger`` with ``pip3 install django-pgtrigger`` and\nadd ``pgtrigger`` to ``settings.INSTALLED_APPS``.\n\n``pgtrigger.Trigger`` objects are added to ``triggers`` in model\n``Meta``. ``django-pgtrigger`` comes with several trigger classes,\nsuch as ``pgtrigger.Protect``. In the following, we're protecting\nthe model from being deleted:\n\n.. code-block:: python\n\n    class ProtectedModel(models.Model):\n        \"\"\"This model cannot be deleted!\"\"\"\n\n        class Meta:\n            triggers = [\n                pgtrigger.Protect(name=\"protect_deletes\", operation=pgtrigger.Delete)\n            ]\n\nWhen migrations are created and executed, ``ProtectedModel`` will raise an internal\ndatabase error anytime someone tries to delete it.\n\nLet's extend this example further and only protect deletions on inactive objects.\nIn this example, the trigger conditionally runs when the row being deleted\n(the ``OLD`` row in trigger terminology) is still active:\n\n.. code-block:: python\n\n    class ProtectedModel(models.Model):\n        \"\"\"Active object cannot be deleted!\"\"\"\n        is_active = models.BooleanField(default=True)\n\n        class Meta:\n            triggers = [\n                pgtrigger.Protect(\n                    name=\"protect_deletes\",\n                    operation=pgtrigger.Delete,\n                    condition=pgtrigger.Q(old__is_active=True)\n                )\n            ]\n\n\n``django-pgtrigger`` uses ``pgtrigger.Q`` and ``pgtrigger.F`` objects to\nconditionally execute triggers based on the ``OLD`` and ``NEW`` rows.\nCombining these Django idioms with ``pgtrigger.Trigger`` objects\ncan solve a wide variety of problems without ever writing SQL. Users,\nhowever, can still use raw SQL for complex cases.\n\nTriggers are installed like other database objects. Run\n``python manage.py makemigrations`` and ``python manage.py migrate`` to install triggers.\n\nIf triggers are new to you, don't fret.\nThe `pgtrigger docs <https://django-pgtrigger.readthedocs.io/>`__ break\ndown the core components of a trigger in the tutorial. They also\nprovide many more examples.\n\nDocumentation\n=============\n\n`View the pgtrigger docs here <https://django-pgtrigger.readthedocs.io/>`__\n\nOther Material\n==============\n\nAfter you've read the docs, check out\n`this tutorial <https://wesleykendall.github.io/django-pgtrigger-tutorial/>`__\nwith interactive examples from a Django meetup talk.\n\nThe `DjangoCon 2021 talk <https://www.youtube.com/watch?v=Tte3d4JjxCk>`__\nalso breaks down triggers and shows several examples.\n\nInstallation\n============\n\nInstall django-pgtrigger with::\n\n    pip3 install django-pgtrigger\n\nAfter this, add ``pgtrigger`` to the ``INSTALLED_APPS``\nsetting of your Django project.\n\nContributing Guide\n==================\n\nFor information on setting up django-pgtrigger for development and\ncontributing changes, view `CONTRIBUTING.rst <CONTRIBUTING.rst>`_.\n\nPrimary Authors\n===============\n\n- @wesleykendall (Wes Kendall, wesleykendall@protonmail.com)\n\nOther Contributors\n==================\n\n- @jzmiller1\n- @rrauenza\n- @ralokt\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Opus10/django-pgtrigger",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pgtrigger",
    "package_url": "https://pypi.org/project/django-pgtrigger/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-pgtrigger/",
    "project_urls": {
      "Documentation": "https://django-pgtrigger.readthedocs.io",
      "Homepage": "https://github.com/Opus10/django-pgtrigger",
      "Repository": "https://github.com/Opus10/django-pgtrigger"
    },
    "release_url": "https://pypi.org/project/django-pgtrigger/4.0.0/",
    "requires_dist": [
      "django (>=2)",
      "importlib_metadata (>=4); python_version >= \"3.7\" and python_version < \"3.8\""
    ],
    "requires_python": ">=3.7.0,<4",
    "summary": "Postgres trigger support integrated with Django models.",
    "version": "4.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15330587,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07dad66acd48f88f42dd9ddb708d33985e7ae6f3532b3be30f881ffb68b23d5f",
        "md5": "9cbd8cc45f57781063fc227d896da95b",
        "sha256": "530627960ffcacb41c6fb677f98de3657862b9c4eb7fb759f0a6a10378c3a5ed"
      },
      "downloads": -1,
      "filename": "django_pgtrigger-4.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9cbd8cc45f57781063fc227d896da95b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0,<4",
      "size": 50564,
      "upload_time": "2022-08-15T04:17:46",
      "upload_time_iso_8601": "2022-08-15T04:17:46.770438Z",
      "url": "https://files.pythonhosted.org/packages/07/da/d66acd48f88f42dd9ddb708d33985e7ae6f3532b3be30f881ffb68b23d5f/django_pgtrigger-4.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0be5fab30e023a9d73fe7ebe12f94a35ed077a356ccf532cc0f86430e4d74a7",
        "md5": "4c5f9947e649b2e7c22fb6d38bd01a3b",
        "sha256": "02888e408e86cde40bedf50648ebcf9b4150102c2ddcbf29d53b9e06a485c03b"
      },
      "downloads": -1,
      "filename": "django-pgtrigger-4.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4c5f9947e649b2e7c22fb6d38bd01a3b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0,<4",
      "size": 39676,
      "upload_time": "2022-08-15T04:17:44",
      "upload_time_iso_8601": "2022-08-15T04:17:44.518125Z",
      "url": "https://files.pythonhosted.org/packages/b0/be/5fab30e023a9d73fe7ebe12f94a35ed077a356ccf532cc0f86430e4d74a7/django-pgtrigger-4.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}