{
  "info": {
    "author": "Wes Kendall",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "django-pgtrigger\n################\n\n``django-pgtrigger`` provides primitives for configuring\n`Postgres triggers <https://www.postgresql.org/docs/current/sql-createtrigger.html>`__\non Django models.\n\nTriggers can solve a\nwide variety of database-level problems more elegantly and reliably\nthan in the application-level of Django. Here are some common\nproblems that can be solved with triggers, many of which we later show how to\nsolve in the docs:\n\n1. Protecting updates and deletes or rows or columns.\n2. Soft deleting models (e.g. setting an \"is_active\" flag to False on delete).\n3. Tracking changes to models or columns change, or when specific conditions\n   happen.\n4. Keeping fields in sync with other fields.\n5. Ensuring that engineers use an official interface\n   (e.g. engineers must use ``User.objects.create_user`` and not\n   ``User.objects.create``).\n6. Only allowing a status field of a model to transition through certain\n   states.\n\nQuick Start\n===========\n\nInstall ``django-pgtrigger`` with ``pip install django-pgtrigger`` and\nadd ``pgtrigger`` to ``settings.INSTALLED_APPS``.\n\nModels are decorated with ``@pgtrigger.register`` and supplied with\n``pgtrigger.Trigger`` objects. If you don't have access to the model definition,\nyou can still call ``pgtrigger.register`` programmatically.\n\nUsers declare the plpgsql code manually\nin a ``pgtrigger.Trigger`` object or can use the derived triggers in\n``django-pgtrigger`` that implement common scenarios. For example,\n``pgtrigger.Protect`` can protect operations on a model, such as deletions:\n\n.. code-block:: python\n\n    from django.db import models\n    import pgtrigger\n\n\n    @pgtrigger.register(pgtrigger.Protect(operation=pgtrigger.Delete))\n    class CannotBeDeletedModel(models.Model):\n        \"\"\"This model cannot be deleted!\"\"\"\n\n``django-pgtrigger`` aims to alleviate the boilerplate of triggers and\nhaving to write raw SQL by using common Django idioms. For example, users\ncan use ``pgtrigger.Q`` and ``pgtrigger.F`` objects to\nconditionally execute triggers based on the ``OLD`` and ``NEW`` row\nbeing modified. For example, let's only protect deletes\nagainst \"active\" rows of a model:\n\n.. code-block:: python\n\n    from django.db import models\n    import pgtrigger\n\n\n    @pgtrigger.register(\n        pgtrigger.Protect(\n            operation=pgtrigger.Delete,\n            # Protect deletes when the OLD row of the trigger is still active\n            condition=pgtrigger.Q(old__is_active=True)\n        )\n    )\n    class CannotBeDeletedModel(models.Model):\n        \"\"\"Active model object cannot be deleted!\"\"\"\n        is_active = models.BooleanField(default=True)\n\n\nCombining ``pgtrigger.Q``, ``pgtrigger.F``, and derived ``pgtrigger.Trigger``\nobjects can solve a wide array of Django problems without ever having to\nwrite raw SQL. Users, however, can still customize\ntriggers and write as much raw SQL as needed for their use case.\n\nFor a complete run-through of ``django-pgtrigger`` and all derived\ntriggers (along with a trigger cookbook!), read the\n`pgtrigger docs <https://django-pgtrigger.readthedocs.io/>`__\n\n\nDocumentation\n=============\n\n`View the django-pgtrigger docs here\n<https://django-pgtrigger.readthedocs.io/>`_.\n\nInstallation\n============\n\nInstall django-pgtrigger with::\n\n    pip3 install django-pgtrigger\n\nAfter this, add ``pgtrigger`` to the ``INSTALLED_APPS``\nsetting of your Django project.\n\nContributing Guide\n==================\n\nFor information on setting up django-pgtrigger for development and\ncontributing changes, view `CONTRIBUTING.rst <CONTRIBUTING.rst>`_.\n\nPrimary Authors\n===============\n\n- @wesleykendall (Wes Kendall)\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jyveapp/django-pgtrigger",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pgtrigger",
    "package_url": "https://pypi.org/project/django-pgtrigger/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pgtrigger/",
    "project_urls": {
      "Documentation": "https://django-pgtrigger.readthedocs.io",
      "Homepage": "https://github.com/jyveapp/django-pgtrigger",
      "Repository": "https://github.com/jyveapp/django-pgtrigger"
    },
    "release_url": "https://pypi.org/project/django-pgtrigger/1.2.0/",
    "requires_dist": [
      "django (>=2)",
      "django-pgconnection (>=1.0.1)"
    ],
    "requires_python": ">=3.6,<4",
    "summary": "Postgres trigger support integrated with Django models.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15330587,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7552a48e3cd2706f47124e91258d1f504575097a67c6c109e1c89947fee131cb",
        "md5": "db27bff36dcba1838897101ca19584b7",
        "sha256": "0ac56a825f9de300b35744100fc64de92346ed962e9b80dedd448a1489d78a5e"
      },
      "downloads": -1,
      "filename": "django_pgtrigger-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "db27bff36dcba1838897101ca19584b7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4",
      "size": 18560,
      "upload_time": "2020-07-23T03:51:54",
      "upload_time_iso_8601": "2020-07-23T03:51:54.542787Z",
      "url": "https://files.pythonhosted.org/packages/75/52/a48e3cd2706f47124e91258d1f504575097a67c6c109e1c89947fee131cb/django_pgtrigger-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "317e80eb78266654e5446ba5687d7818ae679cd31df3d5afeb3caa064c0259ca",
        "md5": "309dd6d365e0e39c7e1dbc8a97084ce2",
        "sha256": "a69102936625fe3ccdb8ec079d18f4f861c7198bef6572a4a0f63ccb3c931b45"
      },
      "downloads": -1,
      "filename": "django-pgtrigger-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "309dd6d365e0e39c7e1dbc8a97084ce2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4",
      "size": 17425,
      "upload_time": "2020-07-23T03:51:53",
      "upload_time_iso_8601": "2020-07-23T03:51:53.398227Z",
      "url": "https://files.pythonhosted.org/packages/31/7e/80eb78266654e5446ba5687d7818ae679cd31df3d5afeb3caa064c0259ca/django-pgtrigger-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}