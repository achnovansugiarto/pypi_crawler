{
  "info": {
    "author": "linuxwhatelse",
    "author_email": "info@linuxwhatelse.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "mapper - Simple URL-Scheme resolver\n===================================\n[![Build Status](https://travis-ci.org/linuxwhatelse/mapper.svg?branch=master)](https://travis-ci.org/linuxwhatelse/mapper)\n[![pypi](https://img.shields.io/pypi/v/lwe-mapper.svg)](https://pypi.python.org/pypi/lwe-mapper)\n\n**mapper** is a small side-project which I created while working on other *stuff* and was in the need for a super simple url-reslover.  \nThe idea was to keep the footprint as small as possible **without** relying on none-python modules.\n\nWhat you use it for is up to you.  \n\nIf you f.e. need a simple JSON Server, check out [mjs](https://github.com/linuxwhatelse/mjs) as it follows the\nsame principle.  \nSmall footprint, easy to use, and only one dependency - mapper (obviously).\n\nHow it works? It's super simple.  \nCheck [The very basic](#the-very-basic) and go from there.\n\n## Table of Contents\n* [Requirements](#requirements)\n* [Installation](#installation)\n* [Usage](#usage)\n    * [Registering functions](#registering-functions)\n        * [The very basic](#the-very-basic)\n        * [URL with a query](#url-with-a-query)\n        * [Query value type cast](#query-value-type-cast)\n        * [Extracting values from a URLs path](#extracting-values-from-a-urls-path)\n        * [Pythons kwargs](#pythons-kwargs)\n        * [Return values](#return-values)\n        * [Using the \"add\" function instead of the decorator](#using-the-add-function-instead-of-the-decorator)\n\n## Requirements\nWhat you need:\n* Python 2.7 or up\n\n## Installation\nYou have two options:\n\n1. Install via pypi `pip install lwe-mapper`\n2. Download [mapper.py](https://github.com/linuxwhatelse/mapper/blob/master/mapper.py) and place it into the root directory of your project\n\n## Usage\n\n### Registering functions\n\n#### The very basic\n``` python\nfrom mapper import Mapper\n\nmpr = Mapper.get()\n\n# Note: A path will ALWAYS end with a \"/\" regardless\n# if your URL contains a trailing \"/\" or not\n\n# Choose one of the two decorators\n@mpr.url('^/some/path/$')  # Regex pattern\n@mpr.s_url('/some/path/')  # Simple path\ndef func():\n    print('func called')\n\n# What e.g. your webserver would do...\nmpr.call('http://some.url/some/path')\n```\n\n#### URL with a query\n``` python\nfrom mapper import Mapper\n\nmpr = Mapper.get()\n\n# Note: Adding a query does NOT change the fact that\n# the path will end with a \"/\" for the regex pattern\n@mpr.s_url('/some/path/')\ndef func(param1, param2='default'):\n    print(param1, param2)\n\n# We don't supply \"param2\" and \"param3\" which will result in \"param2\" being None and param3 being 'default'\nmpr.call('http://some.url/some/path?param1=123')\n\n# Following would cause a:\n# TypeError: func() missing 1 required positional argument: 'param1'\nmpr.call('http://some.url/some/path')\n```\n\n#### Query value type cast\n``` python\nfrom mapper import Mapper\n\nmpr = Mapper.get()\n\n# By default all parameters will be of type \"string\".\n# You can change the type by supplying a dict where the key matches your parameters name and the value is one of:\n# int, float, bool\n#\n# Note for bool:\n#  1. Casting is case-insensitive.\n#  2. 1 and 0 can be casted as well\n@mpr.s_url('/some/path/', type_cast={'a_int' : int, 'a_float' : float, 'a_bool' : bool})\ndef func(a_int, a_float, a_bool):\n    print(a_int, a_float, a_bool)\n\nmpr.call('http://some.url/some/path?a_int=123&a_float=1.0&a_bool=true')\n```\n\n#### Extracting values from a URLs path\n``` python\nfrom mapper import Mapper\n\nmpr = Mapper.get()\n\n# In pure python regex fashion we define a named capture group within our pattern to\n# match whatever we want.\n# We can use a simplified url as well though.\n# Not that type-casting works as well.\n@mpr.url('^/some/path/(?P<param1>[^/]*)/(?P<param2>[0-9]*)/$', type_cast={'param2':int}) # Regex pattern\n@mpr.s_url('/some/path/<param1>/<param2>/', type_cast={'param2':int})                    # Simple path\ndef func(param1, param2):\n    print(param1, param2)\n\nmpr.call('http://some.url/some/path/abc/456/')\n```\n\n#### Pythons kwargs\n``` python\nfrom mapper import Mapper\n\nmpr = Mapper.get()\n\n# It's pretty simple and type-casting works as well\n@mpr.s_url('/some/path/', type_cast={'param1' : int, 'param2' : float, 'param3' : bool})\ndef func(param1, **kwargs):\n    print(param1, kwargs)\n\nmpr.call('http://some.url/some/path?param1=123&param2=1.0&param3=true')\n```\n\n#### Return values\n``` python\nfrom mapper import Mapper\n\nmpr = Mapper.get()\n\n# Whatever you return will be returned by mapper\n@mpr.s_url('/some/path/')\ndef func():\n    return ('str', 1, 1.0, True)\n\na_str, a_int, a_float, a_bool = mpr.call('http://some.url/some/path')\n```\n\n#### Using the \"add\" function instead of the decorator\nSometimes you might have to register a function with the mapper at a later point. This can easily be achieved by using the mappers \"add\" function.\n``` python\nfrom mapper import Mapper\n\nmpr = Mapper.get()\n\ndef func(param1, param2):\n    print(param1, param2)\n\n# It works the same way as the decorator.\n# The only difference is, that we have to specify the function ourselves.\nmpr.add('^/some/path/(?P<param1>[0-9]*)/$', func, type_cast={'param1' : int, 'param2' : int})\nmpr.s_add('/some/path/<param1>/', func, type_cast={'param1' : int, 'param2' : int})\n\nmpr.call('http://some.url/some/path/123?param2=456')\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/linuxwhatelse/mapper",
    "keywords": "url scheme resolver mapper",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lwe-mapper",
    "package_url": "https://pypi.org/project/lwe-mapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/lwe-mapper/",
    "project_urls": {
      "Homepage": "https://github.com/linuxwhatelse/mapper"
    },
    "release_url": "https://pypi.org/project/lwe-mapper/1.2.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple URL-Scheme resolver",
    "version": "1.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3733226,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d1b2597327d64cd06ae800a61315f9678af36fa16d88619677a89bb47a66612",
        "md5": "9d66a7afe72f5ba17e6194078f8913f4",
        "sha256": "365e0d94d8ef5c2c9ea7cb7ea4a722d05d0bbc1aa5e8d68e9813725bab823e29"
      },
      "downloads": -1,
      "filename": "lwe-mapper-1.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "9d66a7afe72f5ba17e6194078f8913f4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5594,
      "upload_time": "2018-04-04T10:31:17",
      "upload_time_iso_8601": "2018-04-04T10:31:17.759358Z",
      "url": "https://files.pythonhosted.org/packages/8d/1b/2597327d64cd06ae800a61315f9678af36fa16d88619677a89bb47a66612/lwe-mapper-1.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}