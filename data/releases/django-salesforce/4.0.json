{
  "info": {
    "author": "Freelancers Union",
    "author_email": "devs@freelancersunion.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "django-salesforce\n=================\n\n.. image:: https://travis-ci.org/django-salesforce/django-salesforce.svg?branch=master\n   :target: https://travis-ci.org/django-salesforce/django-salesforce\n\n.. image:: https://badge.fury.io/py/django-salesforce.svg\n   :target: https://pypi.python.org/pypi/django-salesforce\n\n.. image:: https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8%20%7C%203.9%20%7C%203.10-blue\n   :target: https://www.python.org/\n\n.. image:: https://img.shields.io/badge/Django-2.0%2C%202.1%2C%202.2%20%7C%203.0%2C%203.1%20%2C%203.2%20%7C%204.0-blue.svg\n   :target: https://www.djangoproject.com/\n\nThis library allows you to load, edit and query the objects in any Salesforce instance\nusing Django models. The integration is fairly complete, and generally seamless\nfor most uses. It works by integrating with the Django ORM, allowing access to\nthe objects in your SFDC instance (Salesforce .com) as if they were in a\ntraditional database.\n\nPython 3.5.3 to 3.10, Django 2.0 to 4.0.\n\n\nQuick Start\n-----------\n\nInstall, configure a Salesforce connection, create a Salesforce model and run.\n\n1. Install django-salesforce: ``pip install django-salesforce``\n\n2. Add a salesforce connection to your ``DATABASES`` setting::\n\n    'salesforce': {\n        'ENGINE': 'salesforce.backend',\n        'CONSUMER_KEY': '',                # 'client_id'   in OAuth2 terminology\n        'CONSUMER_SECRET': '',             # 'client_secret'\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': 'https://test.salesforce.com',\n    }\n\n   In the example above, all fields should be populated as follows:\n\n   * ``CONSUMER_KEY`` and ``CONSUMER_SECRET`` values are for the app used to\n     connect to your Salesforce account. Instructions for how get these are in\n     the Salesforce REST API Documentation. Key and secret can be created on\n     web by:\n\n     - Salesforce Classic > Setup > App Setup > Create > Apps > Connected apps >\n       New.  \n       or SalesForce Lightning > Setup > Apps > App Manager > New Connected App.\n     - Click \"Enable OAuth Settings\" in API, then select \"Access and manage\n       your data (api)\" from available OAuth Scopes.\n     - Other red marked fields must be filled, but are not relevant for Django\n       with password authentication. (\"Callback URL\" should be a safe URL\n       that maybe doesn't exist, but is under your control and doesn't redirect,\n       for the case that you accidentally activate other OAuth mode later.)\n   * ``USER`` is the username used to connect.\n   * ``PASSWORD`` is a concatenation of the user's password and security token.\n     Security token can be set by My Settings / Personal / Reset My Security Token\n     or an new token is received by email after every password change.\n     Security token can be omitted if the local IP address has been\n     whitelisted in Security Controls / Network Access.\n   * ``HOST`` is ``https://test.salesforce.com`` to access a sandbox, or\n     ``https://login.salesforce.com`` to access production.\n\n   If an error occurs in a request to Salesforce, review the received error message\n   that is exactly copied between braces ``{...}`` from the\n   Salesforce response to a Python exception to assist debugging.\n\n   See also: `Information on settings up Salesforce connected apps\n   <https://help.salesforce.com/apex/HTViewHelpDoc?id=connected_app_create.htm>`_\n   if necessary.\n\n   **Note about permissions**: Administrator rights are only required to run\n   the full suite of unit tests; otherwise, as long as the account has rights to\n   read or modify the chosen object, everything should work properly.\n   Introspection by ``inspectdb`` doesn't require any object permissions.\n\n3. Add ``salesforce.router.ModelRouter`` to your ``DATABASE_ROUTERS``\n   setting::\n\n    DATABASE_ROUTERS = [\n        \"salesforce.router.ModelRouter\"\n    ]\n\n   (This is important for switching between 'salesforce' database for\n   models derived from SalesforceModel and 'default' database for normal models\n   with tables created by migrations, especially for 'django.contrib'.)\n\n4. Add the ``salesforce`` app to your ``INSTALLED_APPS`` setting::\n\n    INSTALLED_APPS = {\n        \"django.contrib.auth\",\n        \"django.contrib.contenttypes\",\n        ...\n        ...\n        \"salesforce\"\n    }\n\n   (This is necessary for running Salesforce extensions in the command\n   ``inspectdb --database=salesforce`` in development, otherwise it is\n   not important.)\n\n\n5. Define a model that extends ``salesforce.models.Model`` (alias ``SalesforceModel``)\n   or export the complete SF schema by ``python manage.py inspectdb --database=salesforce``\n   and simplify it to what you need. The full models file is about 2 MB with 500 models\n   and the export takes 2 minutes, but it is a valid models module that works without\n   modification. The output of command ``inspectdb`` can be restricted by a list\n   of table_names on the command line, but also ForeignKey fields to omitted models\n   must be pruned to get a valid complete small model.\n\n6. **(optional)** To override the default timeout of 15 seconds,\n   define ``SALESFORCE_QUERY_TIMEOUT`` in your settings file.\n   It can be one number or better a tuple with a short value for connection\n   timeout and a longer value that includes time for running a query.\n   It never need be longer than 30 seconds::\n\n    SALESFORCE_QUERY_TIMEOUT = (4, 15)  # default (connect timeout, data timeout)\n\n7. **(optional)** If you want to use another name for your Salesforce DB\n   connection, define ``SALESFORCE_DB_ALIAS`` in your settings file::\n\n    SALESFORCE_DB_ALIAS = 'salesforce'  # default\n\n8. You're all done! Just use your model like a normal Django model.\n\n9. **(optional)** Create a normal Django ``admin.py`` module for your Salesforce models\n   and you can register a minimalistic admin for all omitted Admin classes::\n\n    from salesforce.testrunner.example.universal_admin import register_omitted_classes\n    # some admin classes that you wrote manually yet\n    # ...\n    # end of file\n    register_omitted_classes(your_application.models)\n\n   This is a rudimentary way to verify that every model works in a sandbox, before\n   hand-writing all admin classes. (Foreign keys to huge tables in the production\n   require a customized admin e.g. with search widgets.)\n\n10. **(optional)** By default, the Django ORM connects to all DBs at startup. To delay\n    SFDC connections until they are actually required, define ``SF_LAZY_CONNECT=True``\n    in your settings file. Be careful when using this setting; since it won't fail during\n    the application boot, it's possible for a bad password to be sent repeatedly,\n    requiring an account reset to fix.\n\nPrimary Key\n-----------\nSalesforce doesn't allow you to define custom primary keys, so django-salesforce\nwill add them automatically in all cases. You can override only capitalization and use\na primary key ``Id`` by configuring ``SF_PK='Id'`` in your project settings\nif you prefer Salesforce capitalized field name conventions instead of Django\ndefault ``id``.\n\nAdvanced usage\n--------------\n-  **Multiple Inheritance from Abstract Models** - Many Salesforce models use\n   the same sets of fields, but using a single inheritance tree would be too\n   complicated and fragile. Proxy models and mixins are also supported.\n\n-  **Testing** - By default, tests will be run against the SFDC connection\n   specified in settings.py, which will substantially increase testing time.\n\n   One way to speed this up is to change the SALESFORCE_DB_ALIAS to point to\n   another DB connection (preferably SQLite) during testing using the\n   ``TEST`` settings variable. Such simple tests can run without any network\n   access. Django unit tests without SalesforceModel\n   are fast everytimes. Special read only fields that are updated only by SFDC\n   e.g. ``last_modified_date`` need more parameters to be possible to save them\n   into an alternate database, e.g. by ``auto_now=True`` or to play with\n   ``null=True`` or ``default=...``.\n\n-  **Multiple SFDC connections** - In most cases, a single connection is all\n   that most apps require, so the default DB connection to use for Salesforce\n   is defined by the ``SALESFORCE_DB_ALIAS`` settings variable. This behavior\n   can be also configured by ``DATABASE_ROUTERS``, replacing the use of\n   salesforce.router.ModelRouter.\n\n-  **Non SF databases** - If ``SALESFORCE_DB_ALIAS`` is set to a conventional\n   database, the tables defined by the SF models will be created by ``migrate``. This\n   behavior can be disabled by adding a Meta class with ``managed=False``.\n\n-  **Custom Managers** - When creating a custom manager for a model, the manager\n   must be a descendant of ``salesforce.manager.SalesforceManager``.\n\n   In most cases, switching DB connections with ``.using(alias).`` will be\n   sufficient, but if you need to call a method on your custom manager, you should\n   instead use ``.db_manager(alias)`` to select a DB while returning the correct\n   manager, e.g. ``Contact.objects.db_manager(alias).my_manager(params...)``\n\n-  **Automatic Field Naming** - Most of database columns names can be automatically\n   deduced from Django field name, if no ``db_column`` is specified::\n\n     last_name = models.CharField(max_length=80)     # db_column='LastName'\n     FirstName = models.CharField(max_length=80)     # db_column='FirstName'\n     my_bool = models.BooleanField(custom=True)      # db_column='MyBool__c'\n\n   Fields named with an upper case character are never modified, except for the\n   addition of the namespace prefix or the '__c' suffix for custom fields.\n   If you want models with minimal db_column then read\n   `Running inspectdb <https://github.com/django-salesforce/django-salesforce/wiki/Introspection-and-Special-Attributes-of-Fields#running-inspectdb>`__.\n\n-  **Query deleted objects** - Deleted objects that are in trash bin are\n   not selected by a normal queryset, but if a special method ``query_all``\n   is used then also deleted objects are searched.\n   If a trash bin is supported by the model then a boolean field ``IsDeleted``\n   can be in the model and it is possible to select only deleted objects ::\n\n     deleted_list = list(Lead.objects.filter(IsDeleted=True).query_all())\n\n-  **Migrations** - Migrations can be used for an alternate test database\n   with SalesforceModel. Then all tables must have Meta options ``db_table``\n   and fields must have option ``db_column``, which is done by ``inspectdb``\n   with default settings. Models exported by introspection ``inspectdb``\n   do not specify the option ``managed`` because the default value is True.\n\n   Models managed by migrations on SFDC require the option ``sf_managed=True``.\n   Detaild are described in `docs Migrations <docs/migrations.rst>`__.\n\n   (It is safe. When migrations in SFDC will be supported by the next version\n   4.0.1 then only for explicitly selected fields and models and on\n   explicitly labeled SFDC databases.\n   Consequently, the setting ``managed = True`` alone is related only to\n   an alternate non SFDC database configured by ``SALESFORCE_DB_ALIAS``.)\n\n   There is probably no reason now to collect old migrations of an application\n   that uses only SalesforceModel if they are related to data stored only in Salesforce.\n   Such old migrations can be easily deleted and a new initial migration can be\n   created again if it would be necessary for offline tests if that migrations\n   directory seems big and obsoleted.\n\n-  **Exceptions** - Custom exceptions instead of standard Django database\n   exceptions are raised by Django-Salesforce to get more useful information.\n   General exceptions are ``SalesforceError`` or a more general custom\n   ``DatabaseError``. They can be imported from ``salesforce.dbapi.exceptions``\n   if database errors should be handled specifically in your app.\n\nForeign Key Support\n-------------------\nForeign key relationships should work as expected, but mapping\nSalesforce SOQL to a purely-relational mapper is a leaky abstraction. For the\ngory details, see `Foreign Key Support <https://github.com/django-salesforce/django-salesforce/wiki/Foreign-Key-Support>`__\non the Django-Salesforce wiki.\n\nIntrospection and special attributes of fields\n----------------------------------------------\nSome Salesforce fields can not be fully used without special attributes, namely\nread-only and default value fields. Further details can be found in\n`Introspection and Special Attributes of Fields <https://github.com/django-salesforce/django-salesforce/wiki/Introspection-and-Special-Attributes-of-Fields>`__\n\nCaveats\n-------\n\nThe ultimate goal of development of this package is to support reasonable\nnew features of the Salesforce platform and of new Django versions,\nbut for now here are the potential pitfalls and unimplemented operations:\n\n-  **Large Objects** — Since the entire result set needs to be transferred\n   over HTTP, and since it's common to have extremely high column counts\n   on full object queries, it's assumed that users will create models that\n   are specific to their individual applications' needs. It is especially\n   important if migrations should be created. Migrations on the full models\n   module are really slow. (Models that have been included with this library are\n   very simplified only for example and documentation purposes and for tests.)\n-  **Inheritance** — When using the default router, all models Salesforce\n   must extend salesforce.models.SalesforceModel. The model router checks\n   for this to determine which models to handle through the Salesforce\n   connection.\n-  **Database Migrations** — ``migrate`` will create new tables only in non-SF\n   databases (useful for unit tests); SFDC tables are assumed to already\n   exist with the appropriate permissions.\n\n-  **Unsupported methods**: Queryset methods ``union()``, ``difference()``,\n    ``intersection()`` and ``distinct()``\n    are e.g. not supported because SOQL doesn't support corresponding operators:\n    UNION, EXCEPT, INTERSECT and DISTINCT.\n\nBackwards-incompatible changes\n------------------------------\n\nThe most important:\n\n-  v4.0: Removed support for Python 3.5\n\n-  v3.2: Removed support for Django 1.11\n\n-  v1.0: The object ``salesforce.backend.operations.DefaultedOnCreate`` in an incidental\n   old migration should be rewritten to new ``salesforce.fields.DefaultedOnCreate``, but\n   old migrations are unnecessary usually.\n\n-  v0.9: This is the last version that suports Django 1.10 and Python 2.7 and 3.4\n\n-  v0.8: The default Meta option if now ``managed = True``, which is an important\n   change for non-Salesforce databases (see about Migrations above).\n\n   Completely different implementation of raw queries and cursor that is compatible\n   with normal databases. (a more backward compatible option can be added if\n   it will be required)\n\n   Custom exception classes has been moved to ``salesforce.dbapi.exceptions``.\n\n-  v0.7.2: This is the last code that supports old Django 1.8.4+ and 1.9\n\n-  v0.6.9: This is the last code that supports old Django 1.7 and 1.8.0 - 1.8.3\n\n-  v0.6.1: This is the last code that supports old Django 1.4, 1.5, 1.6.\n\n-  v0.5: The name of primary key is currently ``'id'``. The backward compatible\n   behavior for code created before v0.5 can be reached by settings ``SF_PK='Id'``.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/django-salesforce/django-salesforce",
    "keywords": "django salesforce orm backend",
    "license": "MIT",
    "maintainer": "Phil Christensen",
    "maintainer_email": "phil@bubblehouse.org",
    "name": "django-salesforce",
    "package_url": "https://pypi.org/project/django-salesforce/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-salesforce/",
    "project_urls": {
      "Homepage": "https://github.com/django-salesforce/django-salesforce"
    },
    "release_url": "https://pypi.org/project/django-salesforce/4.0/",
    "requires_dist": [
      "django (>=2.0)",
      "pytz (>=2012c)",
      "requests (>=2.4.0)"
    ],
    "requires_python": "",
    "summary": "a Salesforce backend for Django's ORM",
    "version": "4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14659022,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84b817c2031a4fcbfcc239e034898870e35c020394de6192ff5cea610f027f6a",
        "md5": "6a00509a0a686b894cdca4e64b4b788c",
        "sha256": "d020d96eafe0aa1ac7f1fcf1689f4b26b4a4c63cb7c21031137c2e423c562127"
      },
      "downloads": -1,
      "filename": "django_salesforce-4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6a00509a0a686b894cdca4e64b4b788c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 138495,
      "upload_time": "2021-11-24T22:33:54",
      "upload_time_iso_8601": "2021-11-24T22:33:54.304171Z",
      "url": "https://files.pythonhosted.org/packages/84/b8/17c2031a4fcbfcc239e034898870e35c020394de6192ff5cea610f027f6a/django_salesforce-4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f1cc6c15dde34880a37b188d74e24235c0280b217bb66d9cea643a73955099d",
        "md5": "6624b07610dfea355938349837ae2424",
        "sha256": "f4682dd1533b1377b7df1cc572b77883d81b059279f98803b48cbb43670c1f91"
      },
      "downloads": -1,
      "filename": "django-salesforce-4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6624b07610dfea355938349837ae2424",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 181694,
      "upload_time": "2021-11-24T22:33:55",
      "upload_time_iso_8601": "2021-11-24T22:33:55.736779Z",
      "url": "https://files.pythonhosted.org/packages/0f/1c/c6c15dde34880a37b188d74e24235c0280b217bb66d9cea643a73955099d/django-salesforce-4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}