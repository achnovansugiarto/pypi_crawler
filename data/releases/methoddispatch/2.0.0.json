{
  "info": {
    "author": "Seequent",
    "author_email": "tim.mitchell@seequent.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# methoddispatch\r\n\r\n[![Build Status](https://travis-ci.com/seequent/methoddispatch.svg?branch=master)](https://travis-ci.com/seequent/methoddispatch)\r\n\r\nPython 3.4 added the ``singledispatch`` decorator to the ``functools`` standard library module.\r\nThis library extends this functionality to instance methods (and works for functions too).\r\n\r\nTo define a generic method , decorate it with the ``@singledispatch`` decorator. Note that the dispatch happens on the type of the first argument, create your function accordingly.\r\n\r\n    >>> from methoddispatch import singledispatch, register, SingleDispatch\r\n\r\n    >>> @singledispatch\r\n    ... def fun(arg, verbose=False):\r\n    ...     if verbose:\r\n    ...         print(\"Let me just say,\", end=\" \")\r\n    ...     print(arg)\r\n\r\nTo add overloaded implementations to the function, use the ``register()`` attribute of the generic function. It is a decorator, taking a type parameter and decorating a function implementing the operation for that type\r\n\r\n    >>> @fun.register(int)\r\n    ... def _(arg, verbose=False):\r\n    ...     if verbose:\r\n    ...         print(\"Strength in numbers, eh?\", end=\" \")\r\n    ...     print(arg)\r\n    ...\r\n    >>> @fun.register(list)\r\n    ... def _(arg, verbose=False):\r\n    ...     if verbose:\r\n    ...         print(\"Enumerate this:\")\r\n    ...     for i, elem in enumerate(arg):\r\n    ...         print(i, elem)\r\n\r\nTo enable registering lambdas and pre-existing functions, the ``register()`` attribute can be used in a functional form::\r\n\r\n    >>> def nothing(arg, verbose=False):\r\n    ...     print(\"Nothing.\")\r\n    ...\r\n    >>> fun.register(type(None), nothing)\r\n    <function nothing at 0x03D3FDB0>\r\n\r\nThe ``register()`` attribute returns the undecorated function which enables decorator stacking, pickling, as well as creating unit tests for each variant independently\r\n\r\n    >>> from decimal import Decimal\r\n    >>> @fun.register(float)\r\n    ... @fun.register(Decimal)\r\n    ... def fun_num(arg, verbose=False):\r\n    ...     if verbose:\r\n    ...         print(\"Half of your number:\", end=\" \")\r\n    ...     print(arg / 2)\r\n    ...\r\n    >>> fun_num is fun\r\n    False\r\n\r\nWhen called, the generic function dispatches on the type of the first argument::\r\n\r\n    >>> fun(\"Hello, world.\")\r\n    Hello, world.\r\n    >>> fun(\"test.\", verbose=True)\r\n    Let me just say, test.\r\n    >>> fun(42, verbose=True)\r\n    Strength in numbers, eh? 42\r\n    >>> fun(['spam', 'spam', 'eggs', 'spam'], verbose=True)\r\n    Enumerate this:\r\n    0 spam\r\n    1 spam\r\n    2 eggs\r\n    3 spam\r\n    >>> fun(None)\r\n    Nothing.\r\n    >>> fun(1.23)\r\n    0.615\r\n\r\nWhere there is no registered implementation for a specific type, its method resolution order is used to find a more generic implementation. The original function decorated with ``@singledispatch`` is registered for the base ``object`` type, which means it is used if no better implementation is found.\r\n\r\nTo check which implementation will the generic function choose for a given type, use the ``dispatch()`` attribute::\r\n\r\n    >>> fun.dispatch(float)\r\n    <function fun_num at 0x1035a2840>\r\n    >>> fun.dispatch(dict)    # note: default implementation\r\n    <function fun at 0x103fe0000>\r\n\r\nTo access all registered implementations, use the read-only ``registry`` attribute::\r\n\r\n    >>> fun.registry.keys()\r\n    dict_keys([<class 'NoneType'>, <class 'int'>, <class 'object'>,\r\n              <class 'decimal.Decimal'>, <class 'list'>,\r\n              <class 'float'>])\r\n    >>> fun.registry[float]\r\n    <function fun_num at 0x1035a2840>\r\n    >>> fun.registry[object]\r\n    <function fun at 0x103fe0000>\r\n\r\nDecorating class methods requires the class to inherit from ``SingleDispatch``\r\n\r\n    >>> class BaseClass(SingleDispatch):\r\n    ...     @singledispatch\r\n    ...     def foo(self, bar):\r\n    ...         return 'default'\r\n    ...\r\n    ...     @foo.register(int)\r\n    ...     def foo_int(self, bar):\r\n    ...         return 'int'\r\n    ...\r\n    >>> b = BaseClass()\r\n    >>> b.foo('hello')\r\n    'default'\r\n    >>> b.foo(1)\r\n    'int'\r\n\r\nSubclasses can extend the type registry of the function on the base class with their own overrides.\r\nBecause we do not want to modify the base class ``foo`` registry the ``methoddispatch.register`` decorator must be used instead of ``foo.register``.  The module level ``register`` function takes either the method name or the method itself as the first parameter and the dispatch type as the second.\r\n\r\n    >>> class SubClass(BaseClass):\r\n    ...     @register('foo', float)\r\n    ...     def foo_float(self, bar):\r\n    ...         return 'float'\r\n    ...\r\n    ...     @register(BaseClass.foo, str)\r\n    ...     def foo_str(self, bar):\r\n    ...         return 'str'\r\n    ...\r\n    >>> s = SubClass()\r\n    >>> s.foo('')\r\n    'str'\r\n    >>> s.foo(1.0)\r\n    'float'\r\n\r\nThe ``SingleDispatch`` mixin class ensures that each subclass has it's own independant copy of the dispatch registry\r\n\r\n    >>> b = BaseClass()\r\n    >>> b.foo(1.0)\r\n    'default'\r\n\r\nMethod overrides do not need to provide the ``register`` decorator again to be used in the dispatch of ``foo``\r\n\r\n    >>> class SubClass2(BaseClass):\r\n    ...     def foo_int(self, bar):\r\n    ...         return 'my int'\r\n    ...\r\n    >>> s = SubClass2()\r\n    >>> s.foo(1)\r\n    'my int'\r\n\r\nHowever, providing the register decorator with the same type will also work.\r\nDecorating a method override with a different type (not a good idea) will register the different type and leave the base-class handler in place for the orginal type.\r\n\r\nIn Python 3.6 and later, for functions annotated with types, the decorator will infer the type of the first argument automatically as shown below\r\n\r\n    >>> class BaseClassAnno(SingleDispatch):\r\n    ...     @singledispatch\r\n    ...     def foo(self, bar):\r\n    ...         return 'default'\r\n    ...\r\n    ...     @foo.register\r\n    ...     def foo_int(self, bar: int):\r\n    ...         return 'int'\r\n    ...\r\n    >>> class SubClassAnno(BaseClassAnno):\r\n    ...     @register('foo')\r\n    ...     def foo_float(self, bar: float):\r\n    ...         return 'float'\r\n\r\nIn Python 3.6 and earlier, the ``SingleDispatch`` class uses a meta-class ``SingleDispatchMeta`` to manage the dispatch registries.  However in Python 3.6 and later the ``__init_subclass__`` method is used instead.\r\nIf your class also inherits from an ABC interface you can use the ``SingleDispatchABCMeta`` metaclass in Python 3.6 and earlier.\r\n\r\nFinally, accessing the method ``foo`` via a class will use the dispatch registry for that class\r\n\r\n      >>> SubClass2.foo(s, 1)\r\n      'my int'\r\n      >>> BaseClass.foo(s, 1)\r\n      'int'\r\n\r\n\r\n\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/seequent/methoddispatch",
    "keywords": "single dispatch decorator method",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "methoddispatch",
    "package_url": "https://pypi.org/project/methoddispatch/",
    "platform": "",
    "project_url": "https://pypi.org/project/methoddispatch/",
    "project_urls": {
      "Homepage": "https://github.com/seequent/methoddispatch"
    },
    "release_url": "https://pypi.org/project/methoddispatch/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "singledispatch decorator for functions and methods.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5235054,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "602a318674a3509e561ade74029b25a1968f70e43da64e4a9e1c6e746fea810b",
        "md5": "099d2896aabade11644ed2477c8875c4",
        "sha256": "d7d00e93dc51fc483fd95582c72c27e4079fcc0bbb902f8d7794c919396f5131"
      },
      "downloads": -1,
      "filename": "methoddispatch-2.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "099d2896aabade11644ed2477c8875c4",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16726,
      "upload_time": "2018-07-03T03:34:02",
      "upload_time_iso_8601": "2018-07-03T03:34:02.357884Z",
      "url": "https://files.pythonhosted.org/packages/60/2a/318674a3509e561ade74029b25a1968f70e43da64e4a9e1c6e746fea810b/methoddispatch-2.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db467364f8f1f0fcf05321e31f7d0221b6e9cc1699cdb5fbe1e17f0e88c7b4b8",
        "md5": "1d1acd9dc56bfc4e4ba766bc1abe5296",
        "sha256": "6e9287635662da692167379c59016e3b3a6804c60a00b2d289e0f4fd36890ffd"
      },
      "downloads": -1,
      "filename": "methoddispatch-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1d1acd9dc56bfc4e4ba766bc1abe5296",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9964,
      "upload_time": "2018-07-03T03:34:04",
      "upload_time_iso_8601": "2018-07-03T03:34:04.344057Z",
      "url": "https://files.pythonhosted.org/packages/db/46/7364f8f1f0fcf05321e31f7d0221b6e9cc1699cdb5fbe1e17f0e88c7b4b8/methoddispatch-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}