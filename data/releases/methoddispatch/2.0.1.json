{
  "info": {
    "author": "Seequent",
    "author_email": "tim.mitchell@seequent.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "methoddispatch\r\n==============\r\n\r\n|Build Status|\r\n\r\n\r\nPython 3.4 added the ``singledispatch`` decorator to the ``functools``\r\nstandard library module. This library extends this functionality to\r\ninstance methods (and works for functions too).\r\n\r\nTo define a generic method , decorate it with the ``@singledispatch``\r\ndecorator. Note that the dispatch happens on the type of the first\r\nargument, create your function accordingly.\r\n\r\n::\r\n\r\n    >>> from methoddispatch import singledispatch, register, SingleDispatch\r\n\r\n    >>> @singledispatch\r\n    ... def fun(arg, verbose=False):\r\n    ...     if verbose:\r\n    ...         print(\"Let me just say,\", end=\" \")\r\n    ...     print(arg)\r\n\r\nTo add overloaded implementations to the function, use the\r\n``register()`` attribute of the generic function. It is a decorator,\r\ntaking a type parameter and decorating a function implementing the\r\noperation for that type::\r\n\r\n    >>> @fun.register(int)\r\n    ... def _(arg, verbose=False):\r\n    ...     if verbose:\r\n    ...         print(\"Strength in numbers, eh?\", end=\" \")\r\n    ...     print(arg)\r\n    ...\r\n    >>> @fun.register(list)\r\n    ... def _(arg, verbose=False):\r\n    ...     if verbose:\r\n    ...         print(\"Enumerate this:\")\r\n    ...     for i, elem in enumerate(arg):\r\n    ...         print(i, elem)\r\n\r\nTo enable registering lambdas and pre-existing functions, the\r\n``register()`` attribute can be used in a functional form::\r\n\r\n    >>> def nothing(arg, verbose=False):\r\n    ...     print(\"Nothing.\")\r\n    ...\r\n    >>> fun.register(type(None), nothing)\r\n    <function nothing at 0x03D3FDB0>\r\n\r\nThe ``register()`` attribute returns the undecorated function which\r\nenables decorator stacking, pickling, as well as creating unit tests for\r\neach variant independently::\r\n\r\n    >>> from decimal import Decimal\r\n    >>> @fun.register(float)\r\n    ... @fun.register(Decimal)\r\n    ... def fun_num(arg, verbose=False):\r\n    ...     if verbose:\r\n    ...         print(\"Half of your number:\", end=\" \")\r\n    ...     print(arg / 2)\r\n    ...\r\n    >>> fun_num is fun\r\n    False\r\n\r\nWhen called, the generic function dispatches on the type of the first\r\nargument::\r\n\r\n    >>> fun(\"Hello, world.\")\r\n    Hello, world.\r\n    >>> fun(\"test.\", verbose=True)\r\n    Let me just say, test.\r\n    >>> fun(42, verbose=True)\r\n    Strength in numbers, eh? 42\r\n    >>> fun(['spam', 'spam', 'eggs', 'spam'], verbose=True)\r\n    Enumerate this:\r\n    0 spam\r\n    1 spam\r\n    2 eggs\r\n    3 spam\r\n    >>> fun(None)\r\n    Nothing.\r\n    >>> fun(1.23)\r\n    0.615\r\n\r\nWhere there is no registered implementation for a specific type, its\r\nmethod resolution order is used to find a more generic implementation.\r\nThe original function decorated with ``@singledispatch`` is registered\r\nfor the base ``object`` type, which means it is used if no better\r\nimplementation is found.\r\n\r\nTo check which implementation will the generic function choose for a\r\ngiven type, use the ``dispatch()`` attribute::\r\n\r\n    >>> fun.dispatch(float)\r\n    <function fun_num at 0x1035a2840>\r\n    >>> fun.dispatch(dict)    # note: default implementation\r\n    <function fun at 0x103fe0000>\r\n\r\nTo access all registered implementations, use the read-only ``registry``\r\nattribute::\r\n\r\n    >>> fun.registry.keys()\r\n    dict_keys([<class 'NoneType'>, <class 'int'>, <class 'object'>,\r\n              <class 'decimal.Decimal'>, <class 'list'>,\r\n              <class 'float'>])\r\n    >>> fun.registry[float]\r\n    <function fun_num at 0x1035a2840>\r\n    >>> fun.registry[object]\r\n    <function fun at 0x103fe0000>\r\n\r\nDecorating class methods requires the class to inherit from\r\n``SingleDispatch``::\r\n\r\n    >>> class BaseClass(SingleDispatch):\r\n    ...     @singledispatch\r\n    ...     def foo(self, bar):\r\n    ...         return 'default'\r\n    ...\r\n    ...     @foo.register(int)\r\n    ...     def foo_int(self, bar):\r\n    ...         return 'int'\r\n    ...\r\n    >>> b = BaseClass()\r\n    >>> b.foo('hello')\r\n    'default'\r\n    >>> b.foo(1)\r\n    'int'\r\n\r\nSubclasses can extend the type registry of the function on the base\r\nclass with their own overrides. Because we do not want to modify the\r\nbase class ``foo`` registry the ``methoddispatch.register`` decorator\r\nmust be used instead of ``foo.register``. The module level ``register``\r\nfunction takes either the method name or the method itself as the first\r\nparameter and the dispatch type as the second.::\r\n\r\n    >>> class SubClass(BaseClass):\r\n    ...     @register('foo', float)\r\n    ...     def foo_float(self, bar):\r\n    ...         return 'float'\r\n    ...\r\n    ...     @register(BaseClass.foo, str)\r\n    ...     def foo_str(self, bar):\r\n    ...         return 'str'\r\n    ...\r\n    >>> s = SubClass()\r\n    >>> s.foo('')\r\n    'str'\r\n    >>> s.foo(1.0)\r\n    'float'\r\n\r\nThe ``SingleDispatch`` mixin class ensures that each subclass has itâ€™s\r\nown independant copy of the dispatch registry::\r\n\r\n    >>> b = BaseClass()\r\n    >>> b.foo(1.0)\r\n    'default'\r\n\r\nMethod overrides do not need to provide the ``register`` decorator again\r\nto be used in the dispatch of ``foo``::\r\n\r\n    >>> class SubClass2(BaseClass):\r\n    ...     def foo_int(self, bar):\r\n    ...         return 'my int'\r\n    ...\r\n    >>> s = SubClass2()\r\n    >>> s.foo(1)\r\n    'my int'\r\n\r\nHowever, providing the register decorator with the same type will also\r\nwork. Decorating a method override with a different type (not a good\r\nidea) will register the different type and leave the base-class handler\r\nin place for the orginal type.\r\n\r\nIn Python 3.6 and later, for functions annotated with types, the\r\ndecorator will infer the type of the first argument automatically as\r\nshown below::\r\n\r\n    >>> class BaseClassAnno(SingleDispatch):\r\n    ...     @singledispatch\r\n    ...     def foo(self, bar):\r\n    ...         return 'default'\r\n    ...\r\n    ...     @foo.register\r\n    ...     def foo_int(self, bar: int):\r\n    ...         return 'int'\r\n    ...\r\n    >>> class SubClassAnno(BaseClassAnno):\r\n    ...     @register('foo')\r\n    ...     def foo_float(self, bar: float):\r\n    ...         return 'float'\r\n\r\nIn Python 3.6 and earlier, the ``SingleDispatch`` class uses a\r\nmeta-class ``SingleDispatchMeta`` to manage the dispatch registries.\r\nHowever in Python 3.6 and later the ``__init_subclass__`` method is used\r\ninstead. If your class also inherits from an ABC interface you can use\r\nthe ``SingleDispatchABCMeta`` metaclass in Python 3.6 and earlier.\r\n\r\nFinally, accessing the method ``foo`` via a class will use the dispatch\r\nregistry for that class::\r\n\r\n      >>> SubClass2.foo(s, 1)\r\n      'my int'\r\n      >>> BaseClass.foo(s, 1)\r\n      'int'\r\n\r\n.. |Build Status| image:: https://travis-ci.com/seequent/methoddispatch.svg?branch=master\r\n   :target: https://travis-ci.com/seequent/methoddispatch\r\n\r\n\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/seequent/methoddispatch",
    "keywords": "single dispatch decorator method",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "methoddispatch",
    "package_url": "https://pypi.org/project/methoddispatch/",
    "platform": "",
    "project_url": "https://pypi.org/project/methoddispatch/",
    "project_urls": {
      "Homepage": "https://github.com/seequent/methoddispatch"
    },
    "release_url": "https://pypi.org/project/methoddispatch/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "singledispatch decorator for functions and methods.",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5235054,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "037dedd570090dbecf6321f5f032dd46c292a7b8575fd31873033df44f17b103",
        "md5": "fbd029a4ba73316d899120a711fd3311",
        "sha256": "67f11158d241e6987dfdc0a21825de7598fb0dcd74f75107978e97a44769d370"
      },
      "downloads": -1,
      "filename": "methoddispatch-2.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fbd029a4ba73316d899120a711fd3311",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16874,
      "upload_time": "2018-07-03T03:46:26",
      "upload_time_iso_8601": "2018-07-03T03:46:26.574613Z",
      "url": "https://files.pythonhosted.org/packages/03/7d/edd570090dbecf6321f5f032dd46c292a7b8575fd31873033df44f17b103/methoddispatch-2.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c02c80271c695cb77e892e85b360af53f3ebf9fa59b37e3e857204d20b5f2860",
        "md5": "72d8128220b95252127ee9ec3c12340f",
        "sha256": "d1b5b11ade10cf5d30dbed2ea4c9a4478cfe9ed2bb7f4287800deb532917370e"
      },
      "downloads": -1,
      "filename": "methoddispatch-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "72d8128220b95252127ee9ec3c12340f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10544,
      "upload_time": "2018-07-03T03:46:28",
      "upload_time_iso_8601": "2018-07-03T03:46:28.268778Z",
      "url": "https://files.pythonhosted.org/packages/c0/2c/80271c695cb77e892e85b360af53f3ebf9fa59b37e3e857204d20b5f2860/methoddispatch-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}