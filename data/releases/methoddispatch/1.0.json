{
  "info": {
    "author": "Tim Mitchell",
    "author_email": "tim.mitchell@leapfrog3d.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "==============\nmethoddispatch 1.0.0\n==============\n\n`PEP 443 <http://www.python.org/dev/peps/pep-0443/>`_ proposed to expose\na mechanism in the ``functools`` standard library module in Python 3.4\nthat provides a simple form of generic programming known as\nsingle-dispatch generic functions.\n\nThis library extends this functionality to instance methods (and works for functions too)\n\nTo define a generic method , decorate it with the ``@singledispatch``\ndecorator. Note that the dispatch happens on the type of the first\nargument, create your function accordingly::\n\n  >>> from methoddispatch import singledispatch\n  >>> @singledispatch\n  ... def fun(arg, verbose=False):\n  ...     if verbose:\n  ...         print(\"Let me just say,\", end=\" \")\n  ...     print(arg)\n\nTo add overloaded implementations to the function, use the\n``register()`` attribute of the generic function. It is a decorator,\ntaking a type parameter and decorating a function implementing the\noperation for that type::\n\n  >>> @fun.register(int)\n  ... def _(arg, verbose=False):\n  ...     if verbose:\n  ...         print(\"Strength in numbers, eh?\", end=\" \")\n  ...     print(arg)\n  ...\n  >>> @fun.register(list)\n  ... def _(arg, verbose=False):\n  ...     if verbose:\n  ...         print(\"Enumerate this:\")\n  ...     for i, elem in enumerate(arg):\n  ...         print(i, elem)\n\nTo enable registering lambdas and pre-existing functions, the\n``register()`` attribute can be used in a functional form::\n\n  >>> def nothing(arg, verbose=False):\n  ...     print(\"Nothing.\")\n  ...\n  >>> fun.register(type(None), nothing)\n  <function nothing at 0x03D3FDB0>\n\nThe ``register()`` attribute returns the undecorated function which\nenables decorator stacking, pickling, as well as creating unit tests for\neach variant independently::\n\n  >>> from decimal import Decimal\n  >>> @fun.register(float)\n  ... @fun.register(Decimal)\n  ... def fun_num(arg, verbose=False):\n  ...     if verbose:\n  ...         print(\"Half of your number:\", end=\" \")\n  ...     print(arg / 2)\n  ...\n  >>> fun_num is fun\n  False\n\nWhen called, the generic function dispatches on the type of the first\nargument::\n\n  >>> fun(\"Hello, world.\")\n  Hello, world.\n  >>> fun(\"test.\", verbose=True)\n  Let me just say, test.\n  >>> fun(42, verbose=True)\n  Strength in numbers, eh? 42\n  >>> fun(['spam', 'spam', 'eggs', 'spam'], verbose=True)\n  Enumerate this:\n  0 spam\n  1 spam\n  2 eggs\n  3 spam\n  >>> fun(None)\n  Nothing.\n  >>> fun(1.23)\n  0.615\n\nWhere there is no registered implementation for a specific type, its\nmethod resolution order is used to find a more generic implementation.\nThe original function decorated with ``@singledispatch`` is registered\nfor the base ``object`` type, which means it is used if no better\nimplementation is found.\n\nTo check which implementation will the generic function choose for\na given type, use the ``dispatch()`` attribute::\n\n  >>> fun.dispatch(float)\n  <function fun_num at 0x1035a2840>\n  >>> fun.dispatch(dict)    # note: default implementation\n  <function fun at 0x103fe0000>\n\nTo access all registered implementations, use the read-only ``registry``\nattribute::\n\n  >>> fun.registry.keys()\n  dict_keys([<class 'NoneType'>, <class 'int'>, <class 'object'>,\n            <class 'decimal.Decimal'>, <class 'list'>,\n            <class 'float'>])\n  >>> fun.registry[float]\n  <function fun_num at 0x1035a2840>\n  >>> fun.registry[object]\n  <function fun at 0x103fe0000>\n\nDecorating class methods requires the class have ``SingleDispatchMeta`` as\na metaclass.  The metaclass ensures that the dipatch registry of\nsub-classes do not affect instances of the base class::\n\n  >>> class BaseClass(metaclass=SingleDispatchMeta):\n  ...     @singledispatch\n  ...     def foo(self, bar):\n  ...         return 'default'\n  ...\n  ...     @foo.register(int)\n  ...     def foo_int(self, bar):\n  ...         return 'int'\n  ...\n  >>> b = BaseClass()\n  >>> b.foo('hello')\n  'default'\n  >>> b.foo(1)\n  'int'\n\n  Subclasses can extend the type registry of the function on the base class with their own overrides.\n  Because the ``foo`` function is not in scope, the ``register`` decorator must be used instead::\n\n  >>> class SubClass(BaseClass):\n  ...     @register('foo', float)\n  ...     def foo_float(self, bar):\n  ...         return 'float'\n  ...\n  >>> s = SubClass()\n  >>> s.foo(1)\n  'int'\n  >>> s.foo(1.0)\n  'float'\n  >>> b.foo(1.0)\n  'default'\n\n  Method overrides do not need to provide the ``register`` decorator again::\n\n  >>> class SubClass2(BaseClass):\n  ...     def foo_int(self, bar):\n  ...         return 'my int'\n  ...\n  >>> s = SubClass2()\n  >>> s.foo(1)\n  'my int'\n\n  Providing the register decorator with the same type will also work.\n  Decorating with a different type (not a good idea) will register the different\n  type and leave the base-class handler in place for the orginal type.\n\n  If your class also inhertits from an ABC interface you can use the SingleDispatchABCMeta metaclass instead.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://packages.python.org/methoddispatch",
    "keywords": "single dispatch decorator",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "methoddispatch",
    "package_url": "https://pypi.org/project/methoddispatch/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/methoddispatch/",
    "project_urls": {
      "Homepage": "http://packages.python.org/methoddispatch"
    },
    "release_url": "https://pypi.org/project/methoddispatch/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "singledispatch decorator for instance methods.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5235054,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92983e14b64bca7399c09627caa630168b70e8eb62c8ff07d34545d8fdff163d",
        "md5": "f489df7acfed3ad06b8fa446841d1e35",
        "sha256": "2dd597382bc2e4fbb93082e82f4ee5c55c27d21b120d5191e21d4174559f17d9"
      },
      "downloads": -1,
      "filename": "methoddispatch-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f489df7acfed3ad06b8fa446841d1e35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4803,
      "upload_time": "2016-09-16T02:17:41",
      "upload_time_iso_8601": "2016-09-16T02:17:41.510984Z",
      "url": "https://files.pythonhosted.org/packages/92/98/3e14b64bca7399c09627caa630168b70e8eb62c8ff07d34545d8fdff163d/methoddispatch-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}