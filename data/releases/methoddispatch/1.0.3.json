{
  "info": {
    "author": "Tim Mitchell",
    "author_email": "tim.mitchell@leapfrog3d.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "\n    ==============\n    methoddispatch 1.0.0\n    ==============\n\n    `PEP 443 <http://www.python.org/dev/peps/pep-0443/>`_ proposed to expose\n    a mechanism in the ``functools`` standard library module in Python 3.4\n    that provides a simple form of generic programming known as\n    single-dispatch generic functions.\n\n    This library extends this functionality to instance methods (and works for functions too)\n\n    To define a generic method , decorate it with the ``@singledispatch``\n    decorator. Note that the dispatch happens on the type of the first\n    argument, create your function accordingly::\n\n      >>> from methoddispatch import singledispatch\n      >>> @singledispatch\n      ... def fun(arg, verbose=False):\n      ...     if verbose:\n      ...         print(\"Let me just say,\", end=\" \")\n      ...     print(arg)\n\n    To add overloaded implementations to the function, use the\n    ``register()`` attribute of the generic function. It is a decorator,\n    taking a type parameter and decorating a function implementing the\n    operation for that type::\n\n      >>> @fun.register(int)\n      ... def _(arg, verbose=False):\n      ...     if verbose:\n      ...         print(\"Strength in numbers, eh?\", end=\" \")\n      ...     print(arg)\n      ...\n      >>> @fun.register(list)\n      ... def _(arg, verbose=False):\n      ...     if verbose:\n      ...         print(\"Enumerate this:\")\n      ...     for i, elem in enumerate(arg):\n      ...         print(i, elem)\n\n    To enable registering lambdas and pre-existing functions, the\n    ``register()`` attribute can be used in a functional form::\n\n      >>> def nothing(arg, verbose=False):\n      ...     print(\"Nothing.\")\n      ...\n      >>> fun.register(type(None), nothing)\n      <function nothing at 0x03D3FDB0>\n\n    The ``register()`` attribute returns the undecorated function which\n    enables decorator stacking, pickling, as well as creating unit tests for\n    each variant independently::\n\n      >>> from decimal import Decimal\n      >>> @fun.register(float)\n      ... @fun.register(Decimal)\n      ... def fun_num(arg, verbose=False):\n      ...     if verbose:\n      ...         print(\"Half of your number:\", end=\" \")\n      ...     print(arg / 2)\n      ...\n      >>> fun_num is fun\n      False\n\n    When called, the generic function dispatches on the type of the first\n    argument::\n\n      >>> fun(\"Hello, world.\")\n      Hello, world.\n      >>> fun(\"test.\", verbose=True)\n      Let me just say, test.\n      >>> fun(42, verbose=True)\n      Strength in numbers, eh? 42\n      >>> fun(['spam', 'spam', 'eggs', 'spam'], verbose=True)\n      Enumerate this:\n      0 spam\n      1 spam\n      2 eggs\n      3 spam\n      >>> fun(None)\n      Nothing.\n      >>> fun(1.23)\n      0.615\n\n    Where there is no registered implementation for a specific type, its\n    method resolution order is used to find a more generic implementation.\n    The original function decorated with ``@singledispatch`` is registered\n    for the base ``object`` type, which means it is used if no better\n    implementation is found.\n\n    To check which implementation will the generic function choose for\n    a given type, use the ``dispatch()`` attribute::\n\n      >>> fun.dispatch(float)\n      <function fun_num at 0x1035a2840>\n      >>> fun.dispatch(dict)    # note: default implementation\n      <function fun at 0x103fe0000>\n\n    To access all registered implementations, use the read-only ``registry``\n    attribute::\n\n      >>> fun.registry.keys()\n      dict_keys([<class 'NoneType'>, <class 'int'>, <class 'object'>,\n                <class 'decimal.Decimal'>, <class 'list'>,\n                <class 'float'>])\n      >>> fun.registry[float]\n      <function fun_num at 0x1035a2840>\n      >>> fun.registry[object]\n      <function fun at 0x103fe0000>\n\n    Decorating class methods requires the class have ``SingleDispatchMeta`` as\n    a metaclass.  The metaclass ensures that the dipatch registry of\n    sub-classes do not affect instances of the base class::\n\n      >>> class BaseClass(metaclass=SingleDispatchMeta):\n      ...     @singledispatch\n      ...     def foo(self, bar):\n      ...         return 'default'\n      ...\n      ...     @foo.register(int)\n      ...     def foo_int(self, bar):\n      ...         return 'int'\n      ...\n      >>> b = BaseClass()\n      >>> b.foo('hello')\n      'default'\n      >>> b.foo(1)\n      'int'\n\n      Subclasses can extend the type registry of the function on the base class with their own overrides.\n      Because the ``foo`` function is not in scope, the ``register`` decorator must be used instead::\n\n      >>> class SubClass(BaseClass):\n      ...     @register('foo', float)\n      ...     def foo_float(self, bar):\n      ...         return 'float'\n      ...\n      >>> s = SubClass()\n      >>> s.foo(1)\n      'int'\n      >>> s.foo(1.0)\n      'float'\n      >>> b.foo(1.0)\n      'default'\n\n      Method overrides do not need to provide the ``register`` decorator again::\n\n      >>> class SubClass2(BaseClass):\n      ...     def foo_int(self, bar):\n      ...         return 'my int'\n      ...\n      >>> s = SubClass2()\n      >>> s.foo(1)\n      'my int'\n\n      Providing the register decorator with the same type will also work.\n      Decorating with a different type (not a good idea) will register the different\n      type and leave the base-class handler in place for the orginal type.\n\n      If your class also inhertits from an ABC interface you can use the SingleDispatchABCMeta metaclass instead.\n\n      Accessing the method ``foo`` via a class will use the dispatch registry of that class::\n\n      >>> SubClass2.foo(s, 1)\n      'my int'\n      >>> BaseClass.foo(s, 1)\n      'int'\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tim-mitchell/methoddispatch",
    "keywords": "single dispatch decorator method",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "methoddispatch",
    "package_url": "https://pypi.org/project/methoddispatch/",
    "platform": "",
    "project_url": "https://pypi.org/project/methoddispatch/",
    "project_urls": {
      "Homepage": "https://github.com/tim-mitchell/methoddispatch"
    },
    "release_url": "https://pypi.org/project/methoddispatch/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "singledispatch decorator for functions and instance methods.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5235054,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b8464a8a6a9054903816c6edc35c076388a1be31809223b12b39159b32b3b28",
        "md5": "df326f974bec1a0dd750cb4498cd92de",
        "sha256": "6d636657d026a4c74b422ee8e71fa551968c9acc3b945902b40416140f198c3d"
      },
      "downloads": -1,
      "filename": "methoddispatch-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "df326f974bec1a0dd750cb4498cd92de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5521,
      "upload_time": "2016-10-17T01:41:33",
      "upload_time_iso_8601": "2016-10-17T01:41:33.179214Z",
      "url": "https://files.pythonhosted.org/packages/9b/84/64a8a6a9054903816c6edc35c076388a1be31809223b12b39159b32b3b28/methoddispatch-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}