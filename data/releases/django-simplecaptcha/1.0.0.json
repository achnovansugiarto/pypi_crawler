{
  "info": {
    "author": "Travis Veazey",
    "author_email": "travisvz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.7",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "django-simplecaptcha\r\n====================\r\n\r\nA textual captcha for Django using simple decorator syntax. \r\n\r\nSo What Does it DO?\r\n-------------------\r\n\r\nsimplecaptcha provides an easy decorator syntax to add a textual captcha\r\nto your Django forms. The captcha is a simple arithmetic question:\r\nEither add, subtract, or multiply two numbers between 1 and 10. No\r\nserver-side context is needed, as the captcha uses cryptographic\r\nsignatures to securely pass the context to the client, and then validate\r\nthe supplied answer on the back end.\r\n\r\nIn order to mitigate replay attacks, the signatures expire after a\r\nconfigurable amount of time (default 5 minutes): enough time to fill out\r\nand submit the form, but short enough to reduce the ability to reuse\r\nsignatures with known answers.\r\n\r\nWhy Make Another One?\r\n---------------------\r\n\r\nThere's lots of Django captchas out there, including more than one that\r\nuses arithmetic questions just like this one. So why do we need another?\r\n\r\nSimply put, the others all lack in flexibility. When I set out to find\r\none for my form, I needed one that would allow me to manually render my\r\nfields; the first few I found, however, hardcoded the question (as a\r\nlabel) into the ``format_output()`` method, or even directly in the\r\n``render()`` method itself. This meant I couldn't separately render the\r\nlabel where I need it for my design. I kept digging, and found another\r\nthat offered the flexibility I needed in the layout, but put the captcha\r\ngeneration logic in the field's ``__init__()`` method. While this sounds\r\ngreat, Django's method of using class objects -- rather than instance\r\nobjects -- means that you get only a single captcha question per server\r\nthread, period.\r\n\r\nSo I sat down to write a captcha that would give me the flexibility I\r\nneeded to fit into my front-end design, but that also would reliably\r\ngenerate a fresh captcha question each time the page was loaded.\r\n\r\nThis is that captcha.\r\n\r\nInstallation\r\n------------\r\n\r\nFrom PyPi\r\n~~~~~~~~~\r\n\r\n(Recommended)\r\nInstall from PyPi with a simple ``pip install django-simplecaptcha``.\r\n\r\nFrom Source\r\n~~~~~~~~~~~\r\n\r\nDownload the source `from GitHub <https://github.com/Kromey/django-simplecaptcha>`__,\r\nand simply make the ``simplecaptcha`` module available to Python in some way; on\r\n\\*nix systems, a simple symlink in the root of your Django project to the\r\n``simplecaptcha`` directory is probably the most straightforward solution.\r\n\r\nUsing the Captcha\r\n-----------------\r\n\r\nUsing simplecaptcha is simple:\r\n\r\n.. code:: python\r\n\r\n    from simplecaptcha import captcha\r\n\r\n    @captcha\r\n    class MyForm(Form):\r\n        pass\r\n\r\nThis will add a field named \"captcha\" to MyForm. However, nothing else\r\nneed be done: the decorator takes care of adding the field and ensuring\r\nit is always updated when a new form instance is created, as well as\r\nvalidating bound forms and providing useful error messages for users.\r\n\r\nAdvanced Use\r\n~~~~~~~~~~~~\r\n\r\nConfiguring simplecaptcha\r\n^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nsimplecaptcha, as its name implies, is simple. It works straight out of\r\nthe box without any need to add any configuration in your Django\r\nproject. However, if you do want to modify its behavior, you can do that\r\nas well, by simply adding any of these settings to your Django project's\r\nsettings module:\r\n\r\n-  ``SIMPLECAPTCHA_DURATION``: Defines how long (in seconds) a captcha\r\n   is considered valid for; default: 300 seconds (5 minutes)\r\n-  ``SIMPLECAPTCHA_ITERATIONS``: The cryptographic signature passed to\r\n   the client and used to validate the captcha is hashed multiple times\r\n   for security. You can change the number of iterations used with this\r\n   setting; default: 1024\r\n-  ``SIMPLECAPTCHA_DEFAULT_FIELD_NAME``: The default field name used in\r\n   the ``captcha`` decorator; default: 'captcha'\r\n\r\nControlling Field Order\r\n^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nThe decorator will always add the captcha field to the end of your form.\r\nIf this is undesirable for any reason, you can of course always manually\r\nrender your form fields as `decribed in the Django\r\ndocs <https://docs.djangoproject.com/en/1.7/topics/forms/#rendering-fields-manually>`__.\r\n\r\nAnother option is to simply add a \"dummy\" field to your form with the\r\nsame name as that used by the decorator. The decorator would then\r\neffectively replace the field in your form:\r\n\r\n.. code:: python\r\n\r\n    from simplecaptcha import captcha\r\n    from simplecaptcha.fields import CaptchaField\r\n\r\n    @captcha\r\n    class MyForm(Form):\r\n        field1 = CharField()\r\n        field2 = CharField()\r\n        captcha = CaptchaField()\r\n        field3 = CharField()\r\n\r\n(NOTE: Since the decorator will *replace* the field of the same name, it\r\ndoes not matter what type of field you specify when using this approach.\r\nBecause of the way Django processes Form classes, however, you *must*\r\nspecify a Django field, or else Django will ignore it and you won't get\r\nthe desired effect.)\r\n\r\nNow when you render MyForm in your template, fields will be ordered\r\nprecisely as they are in your source: field1, then field2, followed by\r\ncaptcha, and finally field3.\r\n\r\nSpecifying the Field Name\r\n^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nIf for any reason you don't want your captcha field to be named\r\n\"captcha\", and you don't want to set\r\n``SIMPLECAPTCHA_DEFAULT_FIELD_NAME`` in your Django settings module, you\r\ncan use the ``@captchaform`` decorator and supply the desired field name\r\nas an argument, like so:\r\n\r\n.. code:: python\r\n\r\n    from simplecaptcha import captchaform\r\n\r\n    @captchaform('securitycheck')\r\n    class MyForm(Form):\r\n        pass\r\n\r\nThis will add a field named \"securitycheck\" to MyForm that will contain\r\nthe form's captcha.\r\n\r\nIf you wish to do this and use the method in the previous section to\r\nspecify the field order, note that the \"dummy\" field you add must match\r\nthe name you passed into the decorator.\r\n\r\nMultiple Captcha Fields\r\n^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nIt is possible to add multiple captcha fields to your form simply by\r\ndecorating your form multiple times. However note that field order in\r\nyour form will be the *reverse* of the order that you write your\r\ndecorators:\r\n\r\n.. code:: python\r\n\r\n    from simplecaptcha import captchaform\r\n\r\n    @captchaform('captcha')\r\n    @captchaform('captcha2')\r\n    class MyForm(Form):\r\n        pass\r\n\r\nIn this example, when MyForm is rendered in your template, \"captcha2\"\r\nwill appear *first*, and then \"captcha\". This is a consequence of how\r\ndecorators in Python are processed; you simply have to remember that the\r\nlast captcha decorated into your form is the first one that will appear\r\nin your templates.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kromey/django-simplecaptcha",
    "keywords": "django simple math captcha",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-simplecaptcha",
    "package_url": "https://pypi.org/project/django-simplecaptcha/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-simplecaptcha/",
    "project_urls": {
      "Homepage": "https://github.com/Kromey/django-simplecaptcha"
    },
    "release_url": "https://pypi.org/project/django-simplecaptcha/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A simple math-based captcha for Django forms",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6015316,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f29ad038a0fa0d7795a1b37fe5e1bee859c61c15874e83cfbec0ef1a74f16c8",
        "md5": "bf79a28a91be84470f4ba1849d02d332",
        "sha256": "260e2fa8857c6a298f0af2a55631f91401f2085f9dc2be09897facc9119f8022"
      },
      "downloads": -1,
      "filename": "django_simplecaptcha-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bf79a28a91be84470f4ba1849d02d332",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12655,
      "upload_time": "2015-11-11T19:23:45",
      "upload_time_iso_8601": "2015-11-11T19:23:45.920066Z",
      "url": "https://files.pythonhosted.org/packages/5f/29/ad038a0fa0d7795a1b37fe5e1bee859c61c15874e83cfbec0ef1a74f16c8/django_simplecaptcha-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3b89bb760bae9b483043ad388a43b907cbc40dbd8fcd8fdae604a8811c1e713",
        "md5": "9834f3a4cd4f48a5245c3a092163ad6e",
        "sha256": "1cf0960dc15cadaf9d69f69888036b80c784075da7bfecaee6935674187f960a"
      },
      "downloads": -1,
      "filename": "django-simplecaptcha-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9834f3a4cd4f48a5245c3a092163ad6e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9611,
      "upload_time": "2015-11-11T19:23:50",
      "upload_time_iso_8601": "2015-11-11T19:23:50.662289Z",
      "url": "https://files.pythonhosted.org/packages/e3/b8/9bb760bae9b483043ad388a43b907cbc40dbd8fcd8fdae604a8811c1e713/django-simplecaptcha-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}