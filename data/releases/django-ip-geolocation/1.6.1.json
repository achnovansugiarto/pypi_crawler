{
  "info": {
    "author": "Skander Ben Mahmoud",
    "author_email": "skander.bmahmoud@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/django-ip-geolocation.svg)](https://badge.fury.io/py/django-ip-geolocation) [![Downloads](https://pepy.tech/badge/django-ip-geolocation)](https://pepy.tech/project/django-ip-geolocation) [![Build Status](https://travis-ci.org/rednaks/django-ip-geolocation.svg?branch=release)](https://travis-ci.org/rednaks/django-ip-geolocation)\n\n# Django Ip Geolocation\nDjango request/response hooks to geolocate visitors by their ip address.\n\n# Installing\n```\npython -m pip install django-ip-geolocation\n``` \n\n# Usage\n## Decorator\nUse decorators to decorate views:\n```python\nfrom django_ip_geolocation.decorators import with_ip_geolocation\n\n@with_ip_geolocation\ndef api_view(request):\n   location = request.geolocation\n   ...\n```\n\n## Middleware\n\nFirst you need to add the middleware into your `settings.py`.\n```python\nMIDDLEWARE = [\n    ...\n    'django_ip_geolocation.middleware.IpGeolocationMiddleware',\n    ...\n]\n```\n\nThen the location is available to all views in request and response:\n```python\ndef api_view(request):\n   location = request.geolocation\n   ...\n   \ndef other_view(request):\n  location = request.geolocation\n  ...\n```\n\n## Cookie\nGeolocation data stored in the Response cookie lacks the `raw_data` and is base64 encoded.\n\n\n## User consent\nDevelopers must implement a helper function to check if the user consented or not and configure it in the `settings.py`. \n\nBy default if the developer didn't provide a validation function, we consider it as implicit consent.\n\nHere is an example of the helper function:\n\n```python\n\ndef check_user_consent(request):\n  if request.user.is_consented: # this is only an example.\n    return True\n  return False\n\n```\n\n\n\n## Settings\nYou can configure settings for your hook in the `settings.py` as follow:\n```python\n\nIP_GEOLOCATION_SETTINGS = {\n    'BACKEND': 'django_ip_geolocation.backends.IPGeolocationAPI',\n    'BACKEND_API_KEY': '',\n    'BACKEND_EXTRA_PARAMS': {},\n    'BACKEND_USERNAME': '',\n    'RESPONSE_HEADER': 'X-IP-Geolocation',\n    'ENABLE_REQUEST_HOOK': True,\n    'ENABLE_RESPONSE_HOOK': True,\n    'ENABLE_COOKIE': False,\n    'FORCE_IP_ADDR': None,\n    'USER_CONSENT_VALIDATOR': None\n}\n\n```\n\nThose are the default settings, that will be overwritten by those set in `settings.py`\n\n\n| setting                | description                                     | default value (type)                                                  |\n|------------------------|-------------------------------------------------|-----------------------------------------------------------------------|\n| `BACKEND`              | Backend class used to detect the geolocation    | `django_ip_geolocation.backends.IPGeolocationAPI` (string class path) |\n| `BACKEND_API_KEY`      | Api key or token for the backend                | Empty (string)                                                        |\n| `BACKEND_EXTRA_PARAMS` | Extra parameters specific to the backend        | `{}` (dict)                                                           |\n| `BACKEND_USERNAME`     | username for the backend                        | Empty (string)                                                        |\n| `RESPONSE_HEADER`      | Custom response header to store the geolocation | `X-IP-Geolocation` (string)                                           |\n| `ENABLE_REQUEST_HOOK`  | Enable or disable hook on request               | `True` (bool)                                                         |\n| `ENABLE_RESPONSE_HOOK` | Enable or disable hook on request               | `True` (bool)                                                         |\n| `ENABLE_COOKIE`        | Enable or disable geolocation data in cookie    | `False` (bool)                                                        |\n| `FORCE_IP_ADDR`        | Force ip address, rather than using visitor ip  | `None` (string)                                                       |\n| `USER_CONSENT_VALIDATOR`| A function path to check if the current user gave his consent  | `None` (string, function path)                        |\n\n### Available Backends\n* `django_ip_geolocation.backends.IPGeolocationAPI` : (Default) Using https://ipgeolocationapi.com/\n* `django_ip_geolocation.backends.IPStack` : (Require `BACKEND_API_KEY`) Using https://ipstack.com/documentation\n* `django_ip_geolocation.backends.IP2LocationCom` : (Require `BACKEND_API_KEY`, Accepts `BACKEND_EXTRA_PARAMS`) Using https://www.ip2location.com/web-service/ip2location\n* `django_ip_geolocation.backends.IPDataCo` : (Require `BACKEND_API_KEY`) Using https://docs.ipdata.co/\n\n\n## Implementing your own backend\nIf you want to add a new backend, you need to inherit from `django_ip_geolocation.backends.base`, then you need to implement `geolocate()` and `_parse()`.\n### `geolocate()`\n Makes API calls and stores the API response in `self._raw_data`.\n\n### `_parse()`\nParse raw data stored in `self._raw_data` and assigns values to the class attribute, such as `self._continent`, `self._county`, `self._geo`.\n\n`self._country` is a dict with `code` and `name` keys.\n\n`self._geo` is a dict with `latitude` and `longitude` keys.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rednaks/django-ip-geolocation",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-ip-geolocation",
    "package_url": "https://pypi.org/project/django-ip-geolocation/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-ip-geolocation/",
    "project_urls": {
      "Homepage": "https://github.com/rednaks/django-ip-geolocation"
    },
    "release_url": "https://pypi.org/project/django-ip-geolocation/1.6.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django request/response hook (Middleware and Decorator) to geolocate visitors using their IP address",
    "version": "1.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9874780,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21ce91ab1a2ee324408ab0960f194a0d0a7571c60ccfcd4379f2be6c933da86d",
        "md5": "796db96c899947e5e59a8b6a9eef0996",
        "sha256": "8509ea5c79b49e6d57bb328cf830da2c9318a6b267ab53849d11a6ce2375e0ae"
      },
      "downloads": -1,
      "filename": "django-ip-geolocation-1.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "796db96c899947e5e59a8b6a9eef0996",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8479,
      "upload_time": "2021-03-25T09:02:17",
      "upload_time_iso_8601": "2021-03-25T09:02:17.411214Z",
      "url": "https://files.pythonhosted.org/packages/21/ce/91ab1a2ee324408ab0960f194a0d0a7571c60ccfcd4379f2be6c933da86d/django-ip-geolocation-1.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}