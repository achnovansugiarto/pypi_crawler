{
  "info": {
    "author": "Bradley Whittington",
    "author_email": "radbrad182@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==============================\nDjango-Templated-Email\n==============================\n\n|GitterBadge|_ |PypiversionBadge|_ |PythonVersionsBadge|_ |LicenseBadge|_\n\n:Info: A Django oriented templated email sending class\n:Author: Bradley Whittington (http://github.com/bradwhittington, http://twitter.com/darb)\n:Tests: |TravisBadge|_ |CoverageBadge|_\n\n\nOverview\n=================\ndjango-templated-email is oriented towards sending templated emails.\nThe library supports template inheritance, adding cc'd and bcc'd recipients,\nconfigurable template naming and location.\n\nThe send_templated_email method can be thought of as the render_to_response\nshortcut for email.\n\nMake sure you are reading the correct documentation:\n\ndevelop branch: https://github.com/vintasoftware/django-templated-email/blob/develop/README.rst\n\nstable pypi/master: https://github.com/vintasoftware/django-templated-email/blob/master/README.rst\n\nGetting going - installation\n==============================\n\nInstalling::\n\n    pip install django-templated-email\n\nYou can add the following to your settings.py (but it works out the box):\n\n.. code-block:: python\n\n    TEMPLATED_EMAIL_BACKEND = 'templated_email.backends.vanilla_django.TemplateBackend'\n\n    # You can use a shortcut version\n    TEMPLATED_EMAIL_BACKEND = 'templated_email.backends.vanilla_django'\n\n    # You can also use a class directly\n    from templated_email.backends.vanilla_django import TemplateBackend\n    TEMPLATED_EMAIL_BACKEND = TemplateBackend\n\n\nSending templated emails\n==============================\n\nExample usage using vanilla_django TemplateBackend backend\n\nPython to send mail:\n\n.. code-block:: python\n\n    from templated_email import send_templated_mail\n    send_templated_mail(\n            template_name='welcome',\n            from_email='from@example.com',\n            recipient_list=['to@example.com'],\n            context={\n                'username':request.user.username,\n                'full_name':request.user.get_full_name(),\n                'signup_date':request.user.date_joined\n            },\n            # Optional:\n            # cc=['cc@example.com'],\n            # bcc=['bcc@example.com'],\n            # headers={'My-Custom-Header':'Custom Value'},\n            # template_prefix=\"my_emails/\",\n            # template_suffix=\"email\",\n    )\n\nIf you would like finer control on sending the email, you can use **get_templated_email**, which will return a django **EmailMessage** object, prepared using the **vanilla_django** backend:\n\n.. code-block:: python\n\n    from templated_email import get_templated_mail\n    get_templated_mail(\n            template_name='welcome',\n            from_email='from@example.com',\n            to=['to@example.com'],\n            context={\n                'username':request.user.username,\n                'full_name':request.user.get_full_name(),\n                'signup_date':request.user.date_joined\n            },\n            # Optional:\n            # cc=['cc@example.com'],\n            # bcc=['bcc@example.com'],\n            # headers={'My-Custom-Header':'Custom Value'},\n            # template_prefix=\"my_emails/\",\n            # template_suffix=\"email\",\n    )\n\nYou can also **cc** and **bcc** recipients using **cc=['example@example.com']**.\n\nYour template\n-------------\n\nThe templated_email/ directory needs to be the templates directory.\n\nThe backend will look in *my_app/templates/templated_email/welcome.email* :\n\n.. code-block:: python\n\n    {% block subject %}My subject for {{username}}{% endblock %}\n    {% block plain %}\n      Hi {{full_name}},\n\n      You just signed up for my website, using:\n          username: {{username}}\n          join date: {{signup_date}}\n\n      Thanks, you rock!\n    {% endblock %}\n\nIf you want to include an HTML part to your emails, simply use the 'html' block :\n\n.. code-block:: python\n\n    {% block html %}\n      <p>Hi {{full_name}},</p>\n\n      <p>You just signed up for my website, using:\n          <dl>\n            <dt>username</dt><dd>{{username}}</dd>\n            <dt>join date</dt><dd>{{signup_date}}</dd>\n          </dl>\n      </p>\n\n      <p>Thanks, you rock!</p>\n    {% endblock %}\n\nThe plain part can also be calculated from the HTML using `html2text <https://pypi.python.org/pypi/html2text>`_. If you don't specify the plain block and `html2text <https://pypi.python.org/pypi/html2text>`_ package is installed, the plain part will be calculated from the HTML part. You can disable this behaviour in settings.py :\n\n.. code-block:: python\n\n    TEMPLATED_EMAIL_AUTO_PLAIN = False\n\nYou can globally override the template dir, and file extension using the following variables in settings.py :\n\n.. code-block:: python\n\n    TEMPLATED_EMAIL_TEMPLATE_DIR = 'templated_email/' #use '' for top level template dir, ensure there is a trailing slash\n    TEMPLATED_EMAIL_FILE_EXTENSION = 'email'\n\nYou can also set a value for **template_prefix** and **template_suffix** for every time you call **send_templated_mail**, if you wish to store a set of templates in a different directory. Remember to include a trailing slash.\n\nUsing with `Django Anymail <https://github.com/anymail/django-anymail>`_\n=========================================================================\n\nAnymail integrates several transactional email service providers (ESPs) into Django, with a consistent API that lets you use ESP-added features without locking your code to a particular ESP. It supports Mailgun, Postmark, SendGrid, SparkPost and more.\n\nYou can use it with django-templated-email, just follow their instructions in their `quick start <https://anymail.readthedocs.io/en/latest/quickstart/>`_ to configure it.\n\nOptionally you can use their custom `EmailMessage <https://anymail.readthedocs.io/en/latest/sending/anymail_additions/#anymail.message.AnymailMessage>`_ class with django-templated-email by using the following settings:\n\n.. code-block:: python\n\n    # This replaces django.core.mail.EmailMessage\n    TEMPLATED_EMAIL_EMAIL_MESSAGE_CLASS='anymail.message.AnymailMessage'\n\n    # This replaces django.core.mail.EmailMultiAlternatives\n    TEMPLATED_EMAIL_EMAIL_MULTIALTERNATIVES_CLASS='anymail.message.AnymailMessage'\n\n\nInline images\n==============\n\nYou can add inline images to your email using the *InlineImage* class.\n\nFirst get the image content from a file or a *ImageField*:\n\n.. code-block:: python\n\n    # From a file\n    with open('lena.png', 'rb') as lena:\n      image = lena.read()\n\n    # From an ImageField\n    # Suppose we have this model\n    class Company(models.Model):\n      logo = models.ImageField()\n\n    image = company.logo.read()\n\nThen create an instance of *InlineImage*:\n\n.. code-block:: python\n\n    from templated_email import InlineImage\n\n    inline_image = InlineImage(filename=\"lena.png\", content=image)\n\nNow pass the object on the context to the template when you send the email.\n\n.. code-block:: python\n\n    send_templated_mail(template_name='welcome',\n                        from_email='from@example.com',\n                        recipient_list=['to@example.com'],\n                        context={'lena_image': inline_image})\n\nFinally in your template add the image on the html template block:\n\n.. code-block:: html\n\n    <img src=\"{{ lena_image }}\">\n\nNote: All *InlineImage* objects you add to the context will be attached to the e-mail, even if they are not used in the template.\n\n\nAdd link to view the email on the web\n=====================================\n\n.. code-block:: python\n\n    # Add templated email to INSTALLED_APPS\n    INSTALLED_APPS = [\n      ...\n      'templated_email'\n    ]\n\n.. code-block:: python\n\n    # and this to your url patterns\n    url(r'^', include('templated_email.urls', namespace='templated_email')),\n\n.. code-block:: python\n\n    # when sending the email use the *create_link* parameter.\n    send_templated_mail(\n        template_name='welcome', from_email='from@example.com',\n        recipient_list=['to@example.com'],\n        context={}, create_link=True)\n\nAnd, finally add the link to your template.\n\n.. code-block:: html\n\n    <!-- With the 'if' the link will only appear on the email. -->\n    {% if email_uuid %}\n      <!-- Note: you will need to add your site since you will need to access\n                 it from the email -->\n      You can view this e-mail on the web here:\n      <a href=\"http://www.yoursite.com{% url 'templated_email:show_email' uuid=email_uuid %}\">\n        here\n      </a>\n    {% endif %}\n\nNotes:\n  - A copy of the rendered e-mail will be stored on the database. This can grow\n    if you send too many e-mails. You are responsible for managing it.\n  - If you use *InlineImage* all images will be uploaded to your media storage,\n    keep that in mind too.\n\n\nClass Based Views\n==================\n\nIt's pretty common for emails to be sent after a form is submitted. We include a mixin\nto be used with any view that inherit from Django's FormMixin.\n\nIn your view add the mixin and the usual Django's attributes:\n\n.. code-block:: python\n\n    from templated_email.generic_views import TemplatedEmailFormViewMixin\n\n    class AuthorCreateView(TemplatedEmailFormViewMixin, CreateView):\n        model = Author\n        fields = ['name', 'email']\n        success_url = '/create_author/'\n        template_name = 'authors/create_author.html'\n\nBy default the template will have the *form_data* if the form is valid or *from_errors* if the\nform is not valid in it's context.\n\nYou can view an example `here <tests/generic_views/>`_\n\nNow you can use the following attributes/methods to customize it's behavior:\n\nAttributes:\n\n**templated_email_template_name** (mandatory if you don't implement **templated_email_get_template_names()**):\n    String naming the template you want to use for the email.\n    ie: templated_email_template_name = 'welcome'.\n\n**templated_email_send_on_success** (default: True):\n    This attribute tells django-templated-email to send an email if the form is valid.\n\n**templated_email_send_on_failure** (default: False):\n    This attribute tells django-templated-email to send an email if the form is invalid.\n\n**templated_email_from_email** (default: **settings.TEMPLATED_EMAIL_FROM_EMAIL**):\n    String containing the email to send the email from.\n\nMethods:\n\n**templated_email_get_template_names(self, valid)** (mandatory if you don't set **templated_email_template_name**):\n    If the method returns a string it will use it as the template to render the email. If it returns a list it will send\n    the email *only* with the first existing template.\n\n**templated_email_get_recipients(self, form)** (mandatory):\n    Return the recipient list to whom the email will be sent to.\n    ie:\n.. code-block:: python\n\n      def templated_email_get_recipients(self, form):\n          return [form.data['email']]\n\n**templated_email_get_context_data(**kwargs)** (optional):\n    Use this method to add extra data to the context used for rendering the template. You should get the parent class's context from\n    calling super.\n    ie:\n.. code-block:: python\n\n      def templated_email_get_context_data(self, **kwargs):\n          context = super(ThisClassView, self).templated_email_get_context_data(**kwargs)\n          # add things to context\n          return context\n\n**templated_email_get_send_email_kwargs(self, valid, form)** (optional):\n    Add or change the kwargs that will be used to send the e-mail. You should call super to get the default kwargs.\n    ie:\n.. code-block:: python\n\n    def templated_email_get_send_email_kwargs(valid, form):\n      kwargs = super(ThisClassView, self).templated_email_get_send_email_kwargs(valid, form)\n      kwargs['bcc'] = ['admin@example.com']\n      return kwargs\n\n**templated_email_send_templated_mail(*args, **kwargs)** (optional):\n    This method calls django-templated-email's *send_templated_mail* method. You could change this method to use\n    a celery's task for example or to handle errors.\n\n\nFuture Plans\n=============\n\nSee https://github.com/vintasoftware/django-templated-email/issues?state=open\n\nUsing django_templated_email in 3rd party applications\n=======================================================\n\nIf you would like to use django_templated_email to handle mail in a reusable application, you should note that:\n\n* Your calls to **send_templated_mail** should set a value for **template_dir**, so you can keep copies of your app-specific templates local to your app (although the loader will find your email templates if you store them in *<your app>/templates/templated_email*, if **TEMPLATED_EMAIL_TEMPLATE_DIR** has not been overidden)\n* If you do (and you should) set a value for **template_dir**, remember to include a trailing slash, i.e. *'my_app_email/'*\n* The deployed app may use a different backend which doesn't use the django templating backend, and as such make a note in your README warning developers that if they are using django_templated_email already, with a different backend, they will need to ensure their email provider can send all your templates (ideally enumerate those somewhere convenient)\n\nNotes on specific backends\n==============================\n\nUsing vanilla_django\n--------------------------\n\nThis is the default backend, and as such requires no special configuration, and will work out of the box. By default it assumes the following settings (should you wish to override them):\n\n.. code-block:: python\n\n    TEMPLATED_EMAIL_TEMPLATE_DIR = 'templated_email/' #Use '' for top level template dir\n    TEMPLATED_EMAIL_FILE_EXTENSION = 'email'\n\nFor legacy purposes you can specify email subjects in your settings file (but, the preferred method is to use a **{% block subject %}** in your template):\n\n.. code-block:: python\n\n    TEMPLATED_EMAIL_DJANGO_SUBJECTS = {\n        'welcome':'Welcome to my website',\n    }\n\nAdditionally you can call **send_templated_mail** and optionally override the following parameters::\n\n    template_prefix='your_template_dir/'  # Override where the method looks for email templates (alternatively, use template_dir)\n    template_suffix='email'               # Override the file extension of the email templates (alternatively, use file_extension)\n    cc=['fubar@example.com']              # Set a CC on the mail\n    bcc=['fubar@example.com']             # Set a BCC on the mail\n    template_dir='your_template_dir/'     # Override where the method looks for email templates\n    connection=your_connection            # Takes a django mail backend connection, created using **django.core.mail.get_connection**\n    auth_user='username'                  # Override the user that the django mail backend uses, per **django.core.mail.send_mail**\n    auth_password='password'              # Override the password that the django mail backend uses, per **django.core.mail.send_mail**\n\n.. _Django: http://djangoproject.com\n.. |GitterBadge| image:: https://badges.gitter.im/vintasoftware/django-templated-email.svg\n.. _GitterBadge: https://gitter.im/vintasoftware/django-templated-email?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n.. |TravisBadge| image:: https://travis-ci.org/vintasoftware/django-templated-email.svg?branch=develop\n.. _TravisBadge: https://travis-ci.org/vintasoftware/django-templated-email\n.. |CoverageBadge| image:: https://coveralls.io/repos/github/vintasoftware/django-templated-email/badge.svg?branch=develop\n.. _CoverageBadge: https://coveralls.io/github/vintasoftware/django-templated-email?branch=develop\n.. |PypiversionBadge| image:: https://img.shields.io/pypi/v/django-templated-email.svg\n.. _PypiversionBadge: https://pypi.python.org/pypi/django-templated-email\n.. |PythonVersionsBadge| image:: https://img.shields.io/pypi/pyversions/django-templated-email.svg\n.. _PythonVersionsBadge: https://pypi.python.org/pypi/django-templated-email\n.. |LicenseBadge| image:: https://img.shields.io/pypi/l/django-templated-email.svg\n.. _LicenseBadge: https://github.com/vintasoftware/django-templated-email/blob/develop/LICENSE",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/vintasoftware/django-templated-email/",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-templated-email",
    "package_url": "https://pypi.org/project/django-templated-email/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-templated-email/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/vintasoftware/django-templated-email/"
    },
    "release_url": "https://pypi.org/project/django-templated-email/2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Django oriented templated / transaction email abstraction",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15700976,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a178443ba20ba7feaace0ce35f26c331866de4f8603644feaee0a065a67b233b",
        "md5": "e95b3ab729028e68055c2bdc54297a76",
        "sha256": "705946b4002c0a32d12a29577ea921bd4f089b4809703bd8bb2786a9e2b0db07"
      },
      "downloads": -1,
      "filename": "django-templated-email-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e95b3ab729028e68055c2bdc54297a76",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12349,
      "upload_time": "2016-11-11T18:34:56",
      "upload_time_iso_8601": "2016-11-11T18:34:56.845058Z",
      "url": "https://files.pythonhosted.org/packages/a1/78/443ba20ba7feaace0ce35f26c331866de4f8603644feaee0a065a67b233b/django-templated-email-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}