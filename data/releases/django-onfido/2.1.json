{
  "info": {
    "author": "YunoJuno",
    "author_email": "code@yunojuno.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Django Onfido\n==============\n\nDjango app for integration with the Onfido API (v3)\n\nThe current version supports Django 3.1+/4.0+ and Python 3.7+.\n\n*For v2 API please check version prior to 1.0*\n\nBackground\n----------\n\nOnfido is an online identity verification service. It provides API access to a\nrange of tests (identity, right to work, criminal history, credit report). It\nis assumed that you are only interested in this project because you are\nalready aware of what Onfido does, and so I won't repeat it here. If you want\nto find out more, head over to their website.\n\nIf you *are* using Onfido, and you are using Django, then this project can be\nused to manage Onfido checks against your existing Django users. It handles\nthe API interactions, as well as providing the callback webhooks required to\nsupport live status updates.\n\nInstallation\n------------\n\nThe project is available through PyPI as ``django-onfido``:\n\n.. code::\n\n    $ pip install django-onfido\n\nAnd the main package itself is just ``onfido``:\n\n.. code:: python\n\n    >>> from onfido import api, models, views, urls, admin, signals, helpers, decorators\n\nUsage\n-----\n\nThe main use case is as follows:\n\n1. Create an Onfido **Applicant** from your Django user:\n\n.. code:: python\n\n    >>> from django.contrib.auth import get_user_model\n    >>> from onfido.helpers import create_applicant\n    >>> user = get_user_model().objects.last()  # any old one will do\n    >>> applicant = create_applicant(user)\n    DEBUG Making POST request to https://api.onfido.com/v3/applicants\n    DEBUG <Response [201]>\n    DEBUG {u'first_name': u'hugo', u'last_name': u'rb', u'middle_name': None, ...}\n    DEBUG Creating new Onfido applicant from JSON: {u'first_name': u'hugo', u'last_name': u'rb', ...}\n    <Applicant id=a2c98eae-XXX user='hugo'>\n\n2. Create your check + reports for the applicant:\n\n.. code:: python\n\n    >>> from onfido.helpers import create_check\n    >>> create_check(applicant, 'standard', ['identity', 'right_to_work'])\n    >>> assert Check.objects.count() == 1\n    >>> assert Report.objects.count() == 2\n\nThis will create the **Check** and **Report** objects on Onfido, and store them locally as Django model objects.\n\n3. Wait for callback events to update the status of reports and checks:\n\n.. code:: shell\n\n    DEBUG Received Onfido callback: {\"payload\":{...}}\n    DEBUG Processing 'check.completed' action on check.bd8232c4-...\n\nNB If you are using the callback functionality, you **must** set the ``ONFIDO_WEBHOOK_TOKEN``\nproperty (see settings section below). The callback handler will force verification of the\nX-Signature request header as specified in the `webhooks documentation <https://documentation.onfido.com/#webhooks>`_.\n\nThe raw JSON returned from the API for a given entity (``Applicant``,\n``Check``, ``Report``) is stored on the model as the ``raw`` attribute, and\nthis can be parsed into the relevant model attributes. (Yes this does mean\nduplication of data.) The core pattern for interaction with the API on a per-\nobject basis is a read-only fetch / pull pattern (analagous to git operations\nof the same name). If you call the ``fetch`` method on an object, it will use\nthe ``href`` value in the raw JSON to fetch the latest data from the API and\nparse it, but without saving the changes. If you want to update the object,\nuse the ``pull`` method instead.\n\nThe ``Report`` object is a special case, where the raw data from the API often\ncontains sensitive information that you may not wish to store locally\n(passport numbers, Visa information, personal data). In order to get around\nthis, there is a ``scrub_report_data`` function that will remove certain\nattributes of the raw data before it is parsed. By default this will remove\nthe ``breakdown`` and ``properties`` elements.\n\n.. code:: python\n\n    >>> check = Check.objects.last()\n    >>> check.raw\n    {\n        \"id\": \"c26f22d5-4903-401f-8a48-7b0211d03c1f\",\n        \"created_at\": \"2016-10-15T19:05:50Z\",\n        \"status\": \"awaiting_applicant\",\n        \"type\": \"standard\",\n        \"result\": \"clear\",\n        \"href\": \"applicants/123/checks/456\"\n    }\n    >>> check.fetch()  # fetch and parse the latest raw data\n    >>> check.pull()  # calls fetch and then saves the object\n\nThere is a management command ``onfido_sync`` which can be used to ``pull`` all the objects\nin a queryset. It takes a single positional arg - 'applicant', check' or 'report', and has two\noptions - ``--filter`` and ``--exclude`` - both of which take multiple space-separated\nargs which can be used to manage the queryset that is used.\n\nExamples:\n\n.. code:: bash\n\n    $ ./manage.py onfido_sync check\n    $ ./manage.py onfido_sync report\n    $ ./manage.py onfido_sync check --filter complete\n    $ ./manage.py onfido_sync check --exclude complete\n\nSettings\n--------\n\nThe following settings can be specified as environment settings or within the Django settings.\n\n* ``ONFIDO_API_KEY``: your API key, found under **setting** in your Onfido account.\n* ``ONFIDO_WEBHOOK_TOKEN``: (optional) the Onfido webhook callback token - required if using webhooks.\n\nThe following settings can be specified in the Django settings:\n\n* ``ONFIDO_LOG_EVENTS``: (optional) if True then callback events from the API will also be recorded as ``Event`` objects. Defaults to False.\n* ``ONFIDO_REPORT_SCRUBBER``: (optional) a function that is used to scrub sensitive data from ``Report`` objects. The default implementation will remove **breakdown** and **properties**.\n\nTests\n-----\n\nIf you want to run the tests manually, install ``poetry``.\n\n.. code::\n\n    $ poetry install\n    $ poetry run pytest\n\nIf you are hacking on the project, please keep coverage up.\n\nContributing\n------------\n\nStandard GH rules apply: clone the repo to your own account, make sure you\nupdate the tests, and submit a pull request.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yunojuno/django-onfido",
    "keywords": "",
    "license": "MIT",
    "maintainer": "YunoJuno",
    "maintainer_email": "code@yunojuno.com",
    "name": "django-onfido",
    "package_url": "https://pypi.org/project/django-onfido/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-onfido/",
    "project_urls": {
      "Documentation": "https://github.com/yunojuno/django-onfido",
      "Homepage": "https://github.com/yunojuno/django-onfido",
      "Repository": "https://github.com/yunojuno/django-onfido"
    },
    "release_url": "https://pypi.org/project/django-onfido/2.1/",
    "requires_dist": [
      "django",
      "python-dateutil",
      "requests",
      "simplejson"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Django app for integration with Onfido.",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15709598,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93a5ec86759029a458d73ae4178ba1a596ec6c01834d79bbe6266f3f21a2c64f",
        "md5": "d77574b8cfd63e015c9e4ae3e602112b",
        "sha256": "bd171acf54edf83fe77734afcb431f668ba17ed144369ce6010454d3a9d7c4e6"
      },
      "downloads": -1,
      "filename": "django_onfido-2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d77574b8cfd63e015c9e4ae3e602112b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 38596,
      "upload_time": "2021-12-08T17:30:31",
      "upload_time_iso_8601": "2021-12-08T17:30:31.832618Z",
      "url": "https://files.pythonhosted.org/packages/93/a5/ec86759029a458d73ae4178ba1a596ec6c01834d79bbe6266f3f21a2c64f/django_onfido-2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92c1e06f1b44b429b1a74002b436eb36899c7de8bb0519a914730e4ddd45987a",
        "md5": "390943f32718030eceb4acb3a651c467",
        "sha256": "20084b063a8a3839293e3f44e9600b721f7c9d172fe3c4c3fcb02101802ba0ee"
      },
      "downloads": -1,
      "filename": "django-onfido-2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "390943f32718030eceb4acb3a651c467",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 27840,
      "upload_time": "2021-12-08T17:30:30",
      "upload_time_iso_8601": "2021-12-08T17:30:30.319959Z",
      "url": "https://files.pythonhosted.org/packages/92/c1/e06f1b44b429b1a74002b436eb36899c7de8bb0519a914730e4ddd45987a/django-onfido-2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}