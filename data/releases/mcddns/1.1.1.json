{
  "info": {
    "author": "Mike Conigliaro",
    "author_email": "mike@conigliaro.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: Name Service (DNS)",
      "Topic :: System :: Systems Administration"
    ],
    "description": "# MCDDNS\n\n[![mcddns](https://circleci.com/gh/mconigliaro/mcddns.svg?style=svg)](https://circleci.com/gh/mconigliaro/mcddns)\n\n**M**ike **C**onigliaro's industrial-strength **D**ynamic **D**omain **N**ame **S**ystem client\n\n## Features\n\n- Extensible plugin-oriented architecture with a simple API\n    - Address providers are responsible for obtaining an address\n    - DNS providers are responsible for managing a DNS record\n- Resilient against network and endpoint failures\n    - Built-in result validation for address providers\n    - Use multiple address providers (keep trying until one succeeds)\n    - Optional retry with Fibonacci backoff\n    - Cron mode (prevents email flood if your Internet connections goes down)\n- Detailed logging\n- Dry-run mode (shows what will happen without changing anything)\n\n### Built-In Providers\n\n#### Address Providers\n\n- `aws.CheckIP`: Obtains a public IPv4 address via [Amazon Web Services](https://aws.amazon.com/)\n- `dyn.CheckIP`: Obtains a public IPv4 address via [Dyn](https://dyn.com/)\n- `google.CheckIP`: Obtains a public IPv4 address via [Google Domains](https://domains.google.com)\n- `ipify.IPv4`: Obtains a public IPv4 address via [ipify](https://www.ipify.org/)\n- `ipify.IPv6`: Obtains an IPv6 address via [ipify](https://www.ipify.org/)\n\n#### DNS Providers\n\n- `aws.Route53`: Manages records in [Amazon Route53](https://aws.amazon.com/route53/)\n\n## Installation\n\n    pip install mcddns\n\n## Running the Application\n\n    mcddns <dns_provider> <fqdn> [options]\n\nUse `--help` to see available options.\n\n## Development\n\n### Getting Started\n\n    pip install pipenv\n    pipenv install --dev\n    pipenv shell\n    ...\n\n### Running Tests\n\n    pytest\n\n### Writing Providers\n\nA provider is any class that inherits from `AddressProvider` or `DNSProvider`. In production mode, Python modules/packages prefixed with `mcddns_` will automatically be imported from the following locations:\n\n1. `$XDG_CONFIG_HOME/mcddns/providers`\n1. `/etc/mcddns/providers`\n1. [sys.path](https://docs.python.org/3/library/sys.html#sys.path)\n\nExample: If you create a file at `$XDG_CONFIG_HOME/mcddns/providers/mcddns_foo.py` with a class named `Bar` that inherits from one of the `Provider` subclasses, your module can be referenced (e.g. in command-line options) as `foo.Bar`.\n\n#### Provider Methods\n\nEach provider type has a set of methods that will be called in a particular order. Note that some of these methods are expected to return a specific value in order to progress to the next step.\n\n##### All Providers\n\n1. `options_pre(parser)`: Runs before option parsing. Use this method to add your own provider-specific command line arguments (See: [argparse](https://docs.python.org/3.6/library/argparse.html)).\n1. `options_post(parser, options)`: Runs after option parsing. Use this method to do things with your provider-specific command line arguments.\n\n##### Address Providers\n\n1. `fetch(options)`: Fetches and returns an IP address, hostname, etc.\n1. `validate(options, address)`: Returns `True` if the address is valid and `False` otherwise\n\n##### DNS Providers\n\n1. `check(options, address)`: Returns `True` if a DNS update is required and `False` otherwise\n1. `update(options, address)`: Returns `True` if a DNS update was successful and `False` otherwise\n\n#### Examples\n\nI'll write more documentation if people are interested, but for now, see the examples at [mcddns/providers](mcddns/providers) and [tests/providers](tests/providers).\n\n#### Releases\n\n1. Bump `VERSION` in [mcddns/meta.py](mcddns/meta.py)\n1. Update [CHANGELOG.md](CHANGELOG.md)\n1. Run `make release`\n\n### To Do\n\n- Add tests for built-in providers\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mconigliaro/mcddns",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mcddns",
    "package_url": "https://pypi.org/project/mcddns/",
    "platform": "",
    "project_url": "https://pypi.org/project/mcddns/",
    "project_urls": {
      "Homepage": "https://github.com/mconigliaro/mcddns"
    },
    "release_url": "https://pypi.org/project/mcddns/1.1.1/",
    "requires_dist": [
      "boto3 (<2.0,>=1.12)",
      "requests (<3.0,>=2.23)"
    ],
    "requires_python": ">=3.6",
    "summary": "Industrial-strength dynamic DNS client",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13965694,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97e17e7492a2590651e71d587b76bf16cc0d1a07935df2ec8ba827de93da5937",
        "md5": "d99c6badb67c54fb7d61f9354819c02a",
        "sha256": "ad7ca3001cc2a6447e24ec3f247bebfe3b1615e7c04cfa68347f7d2626b77557"
      },
      "downloads": -1,
      "filename": "mcddns-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d99c6badb67c54fb7d61f9354819c02a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11612,
      "upload_time": "2020-10-31T18:42:26",
      "upload_time_iso_8601": "2020-10-31T18:42:26.614781Z",
      "url": "https://files.pythonhosted.org/packages/97/e1/7e7492a2590651e71d587b76bf16cc0d1a07935df2ec8ba827de93da5937/mcddns-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3880444ea19c5574106e08f4b56a09f548fec29cbc2137c981e23f125f096b0",
        "md5": "efff6bc9ed1c1764b537e19f5c9972d0",
        "sha256": "a5be297e18d11790068cb153f03bcd0934ce3d2c0ee8cc1439ec7c65b440f9d1"
      },
      "downloads": -1,
      "filename": "mcddns-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "efff6bc9ed1c1764b537e19f5c9972d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8224,
      "upload_time": "2020-10-31T18:42:27",
      "upload_time_iso_8601": "2020-10-31T18:42:27.760675Z",
      "url": "https://files.pythonhosted.org/packages/f3/88/0444ea19c5574106e08f4b56a09f548fec29cbc2137c981e23f125f096b0/mcddns-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}