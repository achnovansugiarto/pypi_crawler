{
  "info": {
    "author": "Mike Conigliaro",
    "author_email": "mike@conigliaro.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: Name Service (DNS)",
      "Topic :: System :: Systems Administration"
    ],
    "description": "# MCDDNS\n\n[![mcddns](https://circleci.com/gh/mconigliaro/mcddns.svg?style=svg)](https://circleci.com/gh/mconigliaro/mcddns)\n\n**M**ike **C**onigliaro's industrial-strength **D**ynamic **D**omain **N**ame **S**ystem client\n\n## Features\n\n- Extensible plugin-oriented architecture with a simple API\n    - Address providers are responsible for obtaining an address\n    - DNS providers are responsible for managing a DNS record\n- Built-in result validation for address providers (guards against problematic endpoints)\n- Use multiple address providers (keep trying until one succeeds)\n- Optional retry with Fibonacci backoff\n- Detailed logging\n- Dry-run mode (shows what will happen without changing anything)\n- Cron mode (prevents email flood if your Internet connections goes down)\n\n### Built-In Providers\n\n#### Address Providers\n\n- `aws.CheckIP`: Obtains a public IPv4 address via [Amazon Web Services](https://aws.amazon.com/)\n- `dyn.CheckIP`: Obtains a public IPv4 address via [Dyn](https://dyn.com/)\n- `google.CheckIP`: Obtains a public IPv4 address via [Google Domains](https://domains.google.com)\n- `ipify.IPv4`: Obtains a public IPv4 address via [ipify](https://www.ipify.org/)\n- `ipify.IPv6`: Obtains an IPv6 address via [ipify](https://www.ipify.org/)\n\n#### DNS Providers\n\n- `aws.Route53`: Manages records in [Amazon Route53](https://aws.amazon.com/route53/)\n\n## Installation\n\n    pip install mcddns\n\n## Running the Application\n\n    mcddns <dns_provider> <fqdn> [options]\n\nUse `--help` to see available options.\n\n## Development\n\n### Getting Started\n\n    pip install pipenv\n    pipenv install --dev\n    pipenv shell\n    ...\n\n### Running Tests\n\n    pytest\n\n### Writing Providers\n\nA provider is any class that inherits from `AddressProvider` or `DNSProvider`. In production mode, Python modules/packages prefixed with `mcddns_` will automatically be imported from the following locations:\n\n1. `$XDG_CONFIG_HOME/mcddns/providers`\n1. `/etc/mcddns/providers`\n1. [sys.path](https://docs.python.org/3/library/sys.html#sys.path)\n\nExample: If you create a file at `$XDG_CONFIG_HOME/mcddns/providers/mcddns_foo.py` with a class named `Bar` that inherits from one of the `Provider` subclasses, your module can be referenced (e.g. in command-line options) as `foo.Bar`.\n\n#### Provider Methods\n\nEach provider type has a set of methods that will be called in a particular order. Note that some of these methods are expected to return a specific value in order to progress to the next step.\n\n##### All Providers\n\n1. `options_pre(parser)`: Runs before option parsing. Use this method to add your own provider-specific command line arguments (See: [argparse](https://docs.python.org/3.6/library/argparse.html)).\n1. `options_post(parser, options)`: Runs after option parsing. Use this method to do things with your provider-specific command line arguments.\n\n##### Address Providers\n\n1. `fetch(options)`: Fetches and returns an IP address, hostname, etc.\n1. `validate(options, address)`: Returns `True` if the address is valid and `False` otherwise\n\n##### DNS Providers\n\n1. `check(options, address)`: Returns `True` if a DNS update is required and `False` otherwise\n1. `update(options, address)`: Returns `True` if a DNS update was successful and `False` otherwise\n\n#### Examples\n\nI'll write more documentation if people are interested, but for now, see the examples at [mcddns/providers](mcddns/providers) and [tests/providers](tests/providers).\n\n#### Releases\n\n1. Bump `VERSION` in [mcddns/meta.py](mcddns/meta.py)\n1. Update [CHANGELOG.md](CHANGELOG.md)\n1. Run `make release`\n\n### To Do\n\n- Add tests for built-in providers\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mconigliaro/mcddns",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mcddns",
    "package_url": "https://pypi.org/project/mcddns/",
    "platform": "",
    "project_url": "https://pypi.org/project/mcddns/",
    "project_urls": {
      "Homepage": "https://github.com/mconigliaro/mcddns"
    },
    "release_url": "https://pypi.org/project/mcddns/1.0.0/",
    "requires_dist": [
      "boto3 (<2.0,>=1.12)",
      "requests (<3.0,>=2.23)"
    ],
    "requires_python": ">=3.6",
    "summary": "Industrial-strength dynamic DNS client",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13965694,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "947138007fffd77579bb82d0883563ed5a144a7d0878fdcc428b1d5fa7cf3341",
        "md5": "270a2d5292ab6692b6a30b7b2ad660fd",
        "sha256": "9863580296776411146909843ffbcb01b601cc42c861251a2cbb86e70140dc7d"
      },
      "downloads": -1,
      "filename": "mcddns-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "270a2d5292ab6692b6a30b7b2ad660fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11639,
      "upload_time": "2020-06-25T01:27:34",
      "upload_time_iso_8601": "2020-06-25T01:27:34.343504Z",
      "url": "https://files.pythonhosted.org/packages/94/71/38007fffd77579bb82d0883563ed5a144a7d0878fdcc428b1d5fa7cf3341/mcddns-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e4dc8bacdb9087a2e5ab29e70cebaf2e25a65ed407fcdb64344188ba403deca",
        "md5": "37daa6e6df8d86ca57fb76c050b1e38d",
        "sha256": "ab26ac6f7fad516f8bcddc033a51c9cad889ce3d1fec4ba03c7a1d923979899f"
      },
      "downloads": -1,
      "filename": "mcddns-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "37daa6e6df8d86ca57fb76c050b1e38d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8265,
      "upload_time": "2020-06-25T01:27:36",
      "upload_time_iso_8601": "2020-06-25T01:27:36.469594Z",
      "url": "https://files.pythonhosted.org/packages/9e/4d/c8bacdb9087a2e5ab29e70cebaf2e25a65ed407fcdb64344188ba403deca/mcddns-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}