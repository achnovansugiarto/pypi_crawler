{
  "info": {
    "author": "Sven Thiele",
    "author_email": "sthiele78@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![PyPI version](https://img.shields.io/pypi/v/meneco.svg)](https://pypi.org/project/meneco/)\n# Installation\n\nRequires **Python >= 3.6**\n\nRequired packages (starting from version 2.0 of the package):\n* [``Clyngor``](https://github.com/Aluriak/clyngor) or [``Clyngor_with_clingo``](https://github.com/Aluriak/clyngor-with-clingo) that includes the solvers\n\nYou can install Meneco by running:\n\n```sh\npython setup.py install\n```\n\nYou should always use a virtual environment ([virtualenv](https://virtualenv.pypa.io/en/latest/), [virtualenv wrapper](https://virtualenvwrapper.readthedocs.io/en/latest/)) when using Python\n\n\n# Usage from console\n\nTypical usage is:\n\n```sh\nmeneco -d draftnetwork.sbml -s seeds.sbml -t targets.sbml -r repairnetwork.sbml\n```\n\nFor more options you can ask for help as follows:\n\n```sh\nmeneco --h\nusage: meneco.py [-h] -d DRAFTNET -s SEEDS -t TARGETS [-r REPAIRNET]\n                    [--enumerate]\n\noptional arguments:\n    -h, --help            show this help message and exit\n    -d DRAFTNET, --draftnet DRAFTNET\n                        metabolic network in SBML format\n    -s SEEDS, --seeds SEEDS\n                        seeds in SBML format\n    -t TARGETS, --targets TARGETS\n                        targets in SBML format\n    -r REPAIRNET, --repairnet REPAIRNET\n                        perform network completion using REPAIRNET a metabolic\n                        network in SBML format\n    --enumerate           enumerate all minimal completions\n```\n\n# Calling Meneco from a python script\n\nYou can use meneco from python by calling the command run_meneco() with the paths of files as input arguments and a boolean value for the enumeration (TRUE for the enumeration, else FALSE) :\n\n```py\nfrom meneco import meneco\nrun_meneco(\"draftnetwork.sbml\", \"seeds.sbml\", \"targets.sbml\", \"repairnetwork.sbml\", TRUE)\n```\n\nThe output will be the set of unproducible targets, reconstructable targets, a dictionnary of essentials reactions for each target, the set of reactions belonging to the intersection of solutions, the set of reactions belonging to the union of solutions and a list of lists corresponding to the reactions for each solution. \n\n# Usage Library\n\nFor a guided example, see a demonstration IPython [Notebook](http://nbviewer.jupyter.org/github/bioasp/meneco/blob/master/meneco.ipynb).\n\n\n# Bibliography\n\nPlease cite the following paper when using Meneco:\n\n**S. Prigent et al., “Meneco, a Topology-Based Gap-Filling Tool Applicable to Degraded Genome-Wide Metabolic Networks,” PLOS Computational Biology, vol. 13, no. 1, p. e1005276, Jan. 2017.**\n\nThe concepts underlying Meneco is described in this paper:\n\nT. Schaub and S. Thiele, “Metabolic network expansion with answer set programming,” in Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 2009, vol. 5649 LNCS, pp. 312–326.\n\nA first application of the method was presented in:\n\nG. Collet et al., “Extending the Metabolic Network of Ectocarpus Siliculosus Using Answer Set Programming,” in LPNMR 2013: Logic Programming and Nonmonotonic Reasoning, 2013, pp. 245–256.\n\n\n# Samples\n\nSample files for the reconstruction of Ectocarpus are available here: [ectocyc.sbml][1], [metacyc_16-5.sbml][2], [seeds.sbml][3], [targets.sbml][4]\n\n[1]: http://bioasp.github.io/downloads/samples/ectodata/ectocyc.sbml\n[2]: http://bioasp.github.io/downloads/samples/ectodata/metacyc_16-5.sbml\n[3]: http://bioasp.github.io/downloads/samples/ectodata/seeds.sbml\n[4]: http://bioasp.github.io/downloads/samples/ectodata/targets.sbml",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bioasp.github.io/meneco/",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Meneco",
    "package_url": "https://pypi.org/project/Meneco/",
    "platform": "",
    "project_url": "https://pypi.org/project/Meneco/",
    "project_urls": {
      "Homepage": "http://bioasp.github.io/meneco/"
    },
    "release_url": "https://pypi.org/project/Meneco/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Metabolic Network Completion. Compute minimal completions to your draft network with reactions from a repair network.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13647944,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b75cbe49e47c0067bcf0e4b1117329eab27dc94f4ef889e35c2e118478705e2",
        "md5": "94ae0f7dcdb2c3abf9d70b562ffa87e9",
        "sha256": "57c5d52bda530147d440c17320f3d27479ec9a1568076a210aa1bdd5ee177177"
      },
      "downloads": -1,
      "filename": "Meneco-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "94ae0f7dcdb2c3abf9d70b562ffa87e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10267,
      "upload_time": "2020-03-05T11:55:05",
      "upload_time_iso_8601": "2020-03-05T11:55:05.418588Z",
      "url": "https://files.pythonhosted.org/packages/2b/75/cbe49e47c0067bcf0e4b1117329eab27dc94f4ef889e35c2e118478705e2/Meneco-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}