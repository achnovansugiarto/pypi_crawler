{
  "info": {
    "author": "Alice Bevan-McGregor",
    "author_email": "alice@gothcandy.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "==============\nMarrow Package\n==============\n\n    © 2014-2016 Alice Bevan-McGregor and contributors.\n\n..\n\n    https://github.com/marrow/package\n\n..\n\n    |latestversion| |downloads| |masterstatus| |mastercover| |issuecount|\n\n1. What is Marrow Package?\n==========================\n\nThis package is a combination of utilities for handling object lookup, resolving object names, and managing simple to\ncomplex plugin architectures.  Notably it includes a dependency grapher system for extensions and a cross-runtime\nmethod for looking up qualified object names that works on Python 2.6+ and Python 3.3+.\n\nThis library is fully unit tested where possible.  (Two untested paths remain relating to use of on-disk directories\nfor plugin discovery.)\n\n\n2. Installation\n===============\n\nInstalling ``marrow.package`` is easy, just execute the following in a terminal::\n\n    pip install marrow.package\n\n**Note:** We *strongly* recommend always using a container, virtualization, or sandboxing environment of some kind when\ndeveloping using Python; installing things system-wide is yucky (for a variety of reasons) nine times out of ten.  We prefer light-weight `virtualenv <https://virtualenv.pypa.io/en/latest/virtualenv.html>`_, others prefer solutions as robust as `Vagrant <http://www.vagrantup.com>`_.\n\nIf you add ``marrow.package`` to the ``install_requires`` argument of the call to ``setup()`` in your applicaiton's\n``setup.py`` file, Marrow Package will be automatically installed and made available when your own application or\nlibrary is installed.  We recommend using \"less than\" version numbers to ensure there are no unintentional\nside-effects when updating.  Use ``marrow.package<1.2`` to get all bugfixes for the current release, and\n``marrow.package<2.0`` to get bugfixes and feature updates while ensuring that large breaking changes are not installed.\n\n\n2.1. Development Version\n------------------------\n\n    |developstatus| |developcover|\n\nDevelopment takes place on `GitHub <https://github.com/>`_ in the\n`marrow.package <https://github.com/marrow/package/>`_ project.  Issue tracking, documentation, and downloads\nare provided there.\n\nInstalling the current development version requires `Git <http://git-scm.com/>`_, a distributed source code management\nsystem.  If you have Git you can run the following to download and *link* the development version into your Python\nruntime::\n\n    git clone https://github.com/marrow/package.git\n    (cd package; python setup.py develop)\n\nYou can then upgrade to the latest version at any time::\n\n    (cd package; git pull; python setup.py develop)\n\nIf you would like to make changes and contribute them back to the project, fork the GitHub project, make your changes,\nand submit a pull request.  This process is beyond the scope of this documentation; for more information see\n`GitHub's documentation <http://help.github.com/>`_.\n\n\n3. Getting Object References\n============================\n\nObject references describe the module and attribute path needed to resolve the object.  For example, ``foo:bar`` is a\nreference that describes importing \"foo\" prior to retrieving an object named \"bar\" from the module.  On Python 3.3+ a\nuseful shortcut is provided, ``__qualname__`` which speeds up this lookup.\n\nFor example, let's define a class and get a reference to it::\n\n    from marrow.package.canonical import name\n    \n    class Example(object):\n        pass\n    \n    assert name(Example) == '__main__:Example'\n\nYou can, depending on platform, retrieve a reference to any of the following types of objects:\n\n* Module level:\n\t* class\n\t* class instance\n\t* class method\n\t* class staticmethod\n\t* function\n\t* instance classmethod\n\t* instance method\n\t* instance staticmethod\n\t* shallow nested class\n* On Python 3.3+:\n\t* closure\n\t* deeply nested class or method\n\n\n4. Resolving Object References\n==============================\n\nTwo utilities are provided which allow you resolve string path references to objects.  The first is quite simple::\n\n    from marrow.package.loader import traverse\n    \n    assert traverse({'foo': {'bar': 27}}, 'foo.bar') == 27\n\nThis will search the dictionary described for a \"foo\" element, then \"bar\" element.\n\nThe ``traverse`` function takes some additional optional arguments.  If ``executable`` is ``True`` any executable\nfunction encountered will be executed without arguments. Traversal will continue on the result of that call.  You can\nchange the separator as desired, i.e. to a '/' using the ``separator`` argument.\n\nBy default attributes (but not array elements) prefixed with an underscore are taboo.  They will not resolve, raising\na LookupError.  You can allow these by setting ``protect`` to ``False``.\n\nCertain allowances are made: if a 'path segment' is numerical, it's treated as an array index. If attribute lookup\nfails, it will re-try on that object using array notation and continue from there.  This makes lookup very flexible.\n\n\n4.1. Resolving Import References\n--------------------------------\n\nThe more complete API for name resolution uses the ``load`` funciton, which takes the same optional keyword arguments\nas ``traverse``.  Additionally, this function accepts an optional ``namespace`` to search for plugins within.  For\nexample::\n\n    from marrow.package.loader import load\n    from pip import main\n    \n    # Load class Foo from example.objects\n    load('example.objects:Foo')\n        \n    # Load the result of the class method ``new`` of the Foo object\n    load('example.objects:Foo.new', executable=True)\n    \n    # Load the \"pip\" command-line interface.\n    assert load('pip', 'console_scripts') is main\n\nProviding a namespace does not prevent explicit object lookup (dot-colon notation) from working.\n\n\n4.2. Caching Import References\n------------------------------\n\nAn attribute-access dictionary is provided that acts as an import cache::\n\n    from marrow.package.cache import PackageCache\n    from pip import main\n    \n    cache = PackageCache('console_scripts')\n    \n    assert cache.pip is main\n    assert cache['pip'] is main\n    assert len(cache) == 1\n    assert 'pip' in cache\n\n\n4.3. Lazy Import Reference Attributes\n-------------------------------------\n\nYou can lazily load and cache an object reference upon dereferencing from an instance using the ``lazyload`` utility\nfrom the ``marrow.package.lazy`` module.  Assign the result of calling this function with either an object reference\npassed in positionally::\n\n    class MyClass:\n        debug = lazyload('logging:debug')\n\nOr the attribute path to traverse (using ``marrow.package.loader:traverse``) prefixed by a period::\n\n    class AnotherClass:\n        target = 'logging:info'\n        log = lazyload('.target')\n\nAny additional arguments are passed to the eventual call to `load()`.  This utility builds on a simpler one that is\nalso offered for fully-tested re-use, ``lazy``, a decorator like ``@property`` which will cache the result, with\nthread-safe locking to ensure only one call will ever be made to the decorated function, per instance.\n\n\n5. Managing Plugins\n===================\n\nThis package provides two main methods of dealing with plugins and extensions, the first is simple, the second\nprovides full dependency graphing of the extensions.\n\n5.1. Plugin Manager\n-------------------\n\nThe ``PluginManager`` class takes two arguments: the first is the entry point ``namespace`` to search, the second is\nan optional iterable of folders to add to the Python search path for installed packages, allowing your application to\nhave a dedicated plugins folder.\n\nIt provides a ``register`` method which take a name and the object to use as the plugin and registers it internally,\nsupporting both attribute and array-like notation for retrieval, as well as iteration of plugins (includes all entry\npoint plugins found and any custom registered ones).\n\n5.2. Extension Manager\n----------------------\n\nAt a higher level is a ``PluginManager`` subclass called ``ExtensionManager`` which additoinally exposes a ``sort``\nmethod capable of resolving dependency order for extensions which follow a simple protocol: have an attribute or array\nelement matching the following, all optional:\n\n* ``provides`` — declare tags describing the features offered by the plugin\n* ``needs`` — delcare the tags that must be present for this extension to function\n* ``uses`` — declare the tags that must be evaluated prior to this extension, but aren't hard requirements\n* ``first`` — declare that this extension is a dependency of all other non-first extensions\n* ``last`` — declare that this extension depends on all other non-last extensions\n\n\n6. Version History\n==================\n\nVersion 1.0\n-----------\n\n* **Initial release.**  Combination of utilities from other Marrow projects.\n\nVersion 1.0.1\n-------------\n\n* **Extended decorator support.**  New code paths and tests added to cover canonicalization of decorated functions.\n\nVersion 1.0.2\n-------------\n\n* **Diagnostic information.**  Removed extraneous diagnostic information.\n\nVersion 1.1\n-----------\n\n* **Added lazy evaluation.**  There are two new helpers for caching of ``@property``-style attributes and lazy lookup\n  of object references.\n\n\n7. License\n==========\n\nMarrow Pacakge has been released under the MIT Open Source license.\n\n7.1. The MIT License\n--------------------\n\nCopyright © 2014-2016 Alice Bevan-McGregor and contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the “Software”), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n.. |masterstatus| image:: http://img.shields.io/travis/marrow/package/master.svg?style=flat\n    :target: https://travis-ci.org/marrow/package\n    :alt: Release Build Status\n\n.. |developstatus| image:: http://img.shields.io/travis/marrow/package/develop.svg?style=flat\n    :target: https://travis-ci.org/marrow/package\n    :alt: Development Build Status\n\n.. |latestversion| image:: http://img.shields.io/pypi/v/marrow.package.svg?style=flat\n    :target: https://pypi.python.org/pypi/package\n    :alt: Latest Version\n\n.. |downloads| image:: http://img.shields.io/pypi/dw/marrow.package.svg?style=flat\n    :target: https://pypi.python.org/pypi/package\n    :alt: Downloads per Week\n\n.. |mastercover| image:: http://img.shields.io/codecov/c/github/marrow/package/master.svg?style=flat\n    :target: https://codecov.io/github/marrow/package?branch=master\n    :alt: Release Test Coverage\n\n.. |developcover| image:: http://img.shields.io/codecov/c/github/marrow/package/develop.svg?style=flat\n    :target: https://codecov.io/github/marrow/package?branch=develop\n    :alt: Development Test Coverage\n\n.. |issuecount| image:: http://img.shields.io/github/issues/marrow/package.svg?style=flat\n    :target: https://github.com/marrow/package/issues\n    :alt: Github Issues\n\n.. |cake| image:: http://img.shields.io/badge/cake-lie-1b87fb.svg?style=flat",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marrow/package/",
    "keywords": "",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "marrow.package",
    "package_url": "https://pypi.org/project/marrow.package/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/marrow.package/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/marrow/package/"
    },
    "release_url": "https://pypi.org/project/marrow.package/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A collection of utilities for resolving object names, names to objects, and managing plugins/extensions.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15931924,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98ca22ec2e826eb212ff6e1cb0aa8bdf677f2f1aeaa09654711836306ed74dee",
        "md5": "b89245296f861adce4d97a294a43892c",
        "sha256": "b5aba85e4f2201a1a4967fa28940042c61e9f4ce5b2c43fb53d2893dbe0b364f"
      },
      "downloads": -1,
      "filename": "marrow.package-1.1.0-py2.7.egg",
      "has_sig": false,
      "md5_digest": "b89245296f861adce4d97a294a43892c",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 24554,
      "upload_time": "2016-01-29T23:13:58",
      "upload_time_iso_8601": "2016-01-29T23:13:58.958080Z",
      "url": "https://files.pythonhosted.org/packages/98/ca/22ec2e826eb212ff6e1cb0aa8bdf677f2f1aeaa09654711836306ed74dee/marrow.package-1.1.0-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b647e97aacf314865d60f67f94f591bfdbe2079fe64a9c4191a3ca55696a0112",
        "md5": "4579f5883eb01a9fe234e25f7a4288c3",
        "sha256": "9844b639b72eeeb4e9f13bbb01b2c62814f18f1d7bfac4703532173569185be0"
      },
      "downloads": -1,
      "filename": "marrow.package-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4579f5883eb01a9fe234e25f7a4288c3",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "requires_python": null,
      "size": 19970,
      "upload_time": "2016-01-29T23:14:58",
      "upload_time_iso_8601": "2016-01-29T23:14:58.477124Z",
      "url": "https://files.pythonhosted.org/packages/b6/47/e97aacf314865d60f67f94f591bfdbe2079fe64a9c4191a3ca55696a0112/marrow.package-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aded0b61dee6df6525bae944a5df1dea6603a28a930e01256bc12916b8488474",
        "md5": "c0e5e67dcad73976fa877205acfcf9a4",
        "sha256": "d7c954186fbbd3467e7d3fc399193206ceeb01895e3c5996a7130ba64a856ec2"
      },
      "downloads": -1,
      "filename": "marrow.package-1.1.0-py3.4.egg",
      "has_sig": false,
      "md5_digest": "c0e5e67dcad73976fa877205acfcf9a4",
      "packagetype": "bdist_egg",
      "python_version": "3.4",
      "requires_python": null,
      "size": 25180,
      "upload_time": "2016-01-29T23:14:10",
      "upload_time_iso_8601": "2016-01-29T23:14:10.659647Z",
      "url": "https://files.pythonhosted.org/packages/ad/ed/0b61dee6df6525bae944a5df1dea6603a28a930e01256bc12916b8488474/marrow.package-1.1.0-py3.4.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fbe139b9987082cc244357f13be08d60b5c7942eed51252b374147ba002dd71",
        "md5": "e15a096425606a643e217ddb6012ca06",
        "sha256": "3d39033bd4ce58b58a29c35b850f28bf358a533aa7ab3250a5c838ecf918bb9d"
      },
      "downloads": -1,
      "filename": "marrow.package-1.1.0-py3.5.egg",
      "has_sig": false,
      "md5_digest": "e15a096425606a643e217ddb6012ca06",
      "packagetype": "bdist_egg",
      "python_version": "3.5",
      "requires_python": null,
      "size": 25181,
      "upload_time": "2016-01-29T23:14:50",
      "upload_time_iso_8601": "2016-01-29T23:14:50.134026Z",
      "url": "https://files.pythonhosted.org/packages/4f/be/139b9987082cc244357f13be08d60b5c7942eed51252b374147ba002dd71/marrow.package-1.1.0-py3.5.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c47ea0f7782d05cc83190b6148d76fa887c367665b9a40a846c4b2f993feb16e",
        "md5": "d0d088af231e299d4b879ffbfd114a7a",
        "sha256": "a58612eac1a2f7fdb8a9edb775a2a38f5e3d1b2f8d1097d716f9eb5cbe88337b"
      },
      "downloads": -1,
      "filename": "marrow.package-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d0d088af231e299d4b879ffbfd114a7a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17299,
      "upload_time": "2016-01-29T23:14:37",
      "upload_time_iso_8601": "2016-01-29T23:14:37.526096Z",
      "url": "https://files.pythonhosted.org/packages/c4/7e/a0f7782d05cc83190b6148d76fa887c367665b9a40a846c4b2f993feb16e/marrow.package-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}