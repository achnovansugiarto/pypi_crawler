{
  "info": {
    "author": "WanXiang Shen",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n\n<a href=\"url\"><img src=\"./docs/molmap.log.png\" align=\"left\" height=\"350\" width=\"270\" ></a>\n\n\n![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg) \n[![Documentation Status](https://readthedocs.org/projects/molmap/badge/?version=latest)](https://molmap.readthedocs.io/en/latest/?badge=latest)\n[![Build Status](https://travis-ci.com/shenwanxiang/bidd-molmap.svg?branch=master)](https://travis-ci.com/shenwanxiang/bidd-molmap) \n[![DOI](https://zenodo.org/badge/214117402.svg)](https://zenodo.org/badge/latestdoi/214117402)\n[![Codeocean](https://img.shields.io/badge/reproduction-codeocean-9cf)](https://codeocean.com/capsule/2307823/tree)\n[![Paper](https://img.shields.io/badge/paper-Nature%20Machine%20Intelligence-green)](https://www.nature.com/articles/s42256-021-00301-6)\n\n\n\n\n## MolMap\nMolMap is generated by the following steps:\n* Step1: Input structures\n* Step2: Feature extraction \n* Step3: Feature pairwise distance calculation --> cosine, correlation, jaccard\n* Step4: Feature 2D embedding --> umap, tsne, mds\n* Step5: Feature grid arrangement --> grid, scatter\n* Step5: Transform --> minmax, standard\n\n\n\n\n\n\n### MolMap Fmaps for  compounds\n![fmap_dynamicly](./docs/fmap_dynamicly.gif)\n\n\n### Construction of the MolMap Objects\n---\n![molmap](https://github.com/shenwanxiang/bidd-molmap/blob/master/paper/images/Overall.png)\n\n\n### The MolMapNet Architecture\n---\n![net](https://github.com/shenwanxiang/bidd-molmap/blob/master/paper/images/net.png)\n\n## Installation\n---\n1. install [rdkit](http://www.rdkit.org/docs/Install.html) and [tamp](https://tmap.gdb.tools/index.html#support) first(create a molmap env):\n```bash\nconda create -c conda-forge -n molmap rdkit python=3.7\nconda activate molmap\nconda install -c tmap tmap\npip install molmap\n```\n\n2. [ChemBench](https://github.com/shenwanxiang/ChemBench) (optional, if you wish to use the dataset and the split induces in this paper).\n\n\n3. If you have gcc problems when you install molmap, please installing g++ first:\n```bash\nsudo apt-get install g++\n```\n\n\n## Out-of-the-Box Usage\n---\n* [Example for Regression Task on ESOL (descriptors only)](https://github.com/shenwanxiang/bidd-molmap/blob/master/molmap/example/00_model_example_esol_descriptors.ipynb)\n* [Example for Classification Task on BACE (fingerprints only)](https://github.com/shenwanxiang/bidd-molmap/blob/master/molmap/example/01_model_example_bace_fingerprints.ipynb)\n\n* [Example for Regression Task on FreeSolv (descriptors plus fingerprints)](https://github.com/shenwanxiang/bidd-molmap/blob/master/molmap/example/02_model_example_freesolv_dual_path.ipynb)\n* [Example for Classification Task on BACE (descriptors plus fingerprints)](https://github.com/shenwanxiang/bidd-molmap/blob/master/molmap/example/03_model_example_bace_dual_path.ipynb)\n\n* [Example for Multi-label Classification Task on ClinTox (descriptors plus fingerprints)](https://github.com/shenwanxiang/bidd-molmap/blob/master/molmap/example/03_model_example_ClinTox_dual_path.ipynb)\n\n\n\n\n![code](https://github.com/shenwanxiang/bidd-molmap/blob/master/paper/images/code_example.png)\n\n\n\n```python\nimport molmap\n# Define your molmap\nmp_name = './descriptor.mp'\nmp = molmap.MolMap(ftype = 'descriptor', fmap_type = 'grid',\n                   split_channels = True,   metric='cosine', var_thr=1e-4)\n```\n\n```python\n# Fit your molmap\nmp.fit(method = 'umap', verbose = 2)\nmp.save(mp_name) \n```\n\n```python\n# Visulization of your molmap\nmp.plot_scatter()\nmp.plot_grid()\n```\n\n```python\n# Batch transform \nfrom molmap import dataset\ndata = dataset.load_ESOL()\nsmiles_list = data.x # list of smiles strings\nX = mp.batch_transform(smiles_list,  scale = True, \n                       scale_method = 'minmax', n_jobs=8)\nY = data.y \nprint(X.shape)\n```\n\n```python\n# Train on your data and test on the external test set\nfrom molmap.model import RegressionEstimator\nfrom sklearn.utils import shuffle \nimport numpy as np\nimport pandas as pd\ndef Rdsplit(df, random_state = 888, split_size = [0.8, 0.1, 0.1]):\n    base_indices = np.arange(len(df)) \n    base_indices = shuffle(base_indices, random_state = random_state) \n    nb_test = int(len(base_indices) * split_size[2]) \n    nb_val = int(len(base_indices) * split_size[1]) \n    test_idx = base_indices[0:nb_test] \n    valid_idx = base_indices[(nb_test):(nb_test+nb_val)] \n    train_idx = base_indices[(nb_test+nb_val):len(base_indices)] \n    print(len(train_idx), len(valid_idx), len(test_idx)) \n    return train_idx, valid_idx, test_idx \n```\n\n```python\n# split your data\ntrain_idx, valid_idx, test_idx = Rdsplit(data.x, random_state = 888)\ntrainX = X[train_idx]\ntrainY = Y[train_idx]\nvalidX = X[valid_idx]\nvalidY = Y[valid_idx]\ntestX = X[test_idx]\ntestY = Y[test_idx]\n\n# fit your model\nclf = RegressionEstimator(n_outputs=trainY.shape[1], \n                          fmap_shape1 = trainX.shape[1:], \n                          dense_layers = [128, 64], gpuid = 0) \nclf.fit(trainX, trainY, validX, validY)\n\n# make prediction\ntestY_pred = clf.predict(testX)\nrmse, r2 = clf._performance.evaluate(testX, testY)\nprint(rmse, r2)\n```\n\n\n\n\n## Out-of-the-Box Performances\n---\n| Dataset   | Task Metric | MoleculeNet (GCN Best Model) | Chemprop (D-MPNN model) | MolMapNet (MMNB model) |\n|-----------|-------------|-----------------------------|------------------------|-----------------------|\n| ESOL      | RMSE        | 0.580 (MPNN)                | 0.555                  | 0.575                 |\n| FreeSolv  | RMSE        | 1.150 (MPNN)                | 1.075                  | 1.155                 |\n| Lipop     | RMSE        | 0.655 (GC)                  | 0.555                  | 0.625                 |\n| PDBbind-F | RMSE        | 1.440 (GC)                  | 1.391                  | 0.721                 |\n| PDBbind-C | RMSE        | 1.920 (GC)                  | 2.173                  | 0.931                 |\n| PDBbind-R | RMSE        | 1.650 (GC)                  | 1.486                  | 0.889                 |\n| BACE      | ROC_AUC     | 0.806 (Weave)               | N.A.                   | 0.849                 |\n| HIV       | ROC_AUC     | 0.763 (GC)                  | 0.776                  | 0.777                 |\n| PCBA      | PRC_AUC     | 0.136 (GC)                  | 0.335                  | 0.276                 |\n| MUV       | PRC_AUC     | 0.109 (Weave)               | 0.041                  | 0.096                 |\n| ChEMBL    | ROC_AUC     | N.A.                        | 0.739                  | 0.750                 |\n| Tox21     | ROC_AUC     | 0.829 (GC)                  | 0.851                  | 0.845                 |\n| SIDER     | ROC_AUC     | 0.638 (GC)                  | 0.676                  | 0.68                  |\n| ClinTox   | ROC_AUC     | 0.832 (GC)                  | 0.864                  | 0.888                 |\n| BBBP      | ROC_AUC     | 0.690 (Weave)               | 0.738                  | 0.739                 |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shenwanxiang/bidd-molmap",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "molmap",
    "package_url": "https://pypi.org/project/molmap/",
    "platform": null,
    "project_url": "https://pypi.org/project/molmap/",
    "project_urls": {
      "Homepage": "https://github.com/shenwanxiang/bidd-molmap"
    },
    "release_url": "https://pypi.org/project/molmap/1.3.1/",
    "requires_dist": [
      "biopython (==1.78)",
      "biopandas (==0.2.8)",
      "seaborn (==0.9.1)",
      "scikit-learn (==0.23)",
      "scipy (==1.1.0)",
      "joblib (==0.13.2)",
      "umap-learn (==0.3.10)",
      "python-highcharts (==0.4.2)",
      "tqdm (==4.33.0)",
      "numpy (==1.21.5)",
      "numba (==0.51.1)",
      "pandas (==0.25.1)",
      "colored (==1.3.93)",
      "colorlog (==4.0.2)",
      "mordred (==1.2.0)",
      "gdown (==3.8.3)",
      "lapjv (==1.3.22)",
      "mhfp (==1.9.2)",
      "tensorflow-gpu (==2.9.1)",
      "tensorflow (==2.9.1)",
      "faerun",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "MolMap: An Efficient Convolutional Neural Network Based Molecular Deep Learning Tool",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16681681,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b08ecf2c1122fe210b56d37e3c246ac945071b9c4387ce6ecf0eb1d9e3cd985c",
        "md5": "a514388b6585fe01c054e37e6bf27255",
        "sha256": "d7386b50664e8a35840ed0a2247b50fa4d0e0619682f5a31075b7aff24db1c4c"
      },
      "downloads": -1,
      "filename": "molmap-1.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a514388b6585fe01c054e37e6bf27255",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 99865,
      "upload_time": "2022-06-15T13:44:14",
      "upload_time_iso_8601": "2022-06-15T13:44:14.699792Z",
      "url": "https://files.pythonhosted.org/packages/b0/8e/cf2c1122fe210b56d37e3c246ac945071b9c4387ce6ecf0eb1d9e3cd985c/molmap-1.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3f1b6dda6fdbdaacdb711e52a59f69a940d2c7b10b811da3ccc0fff9b00b743",
        "md5": "217409d879d591a13bae1cc3099e6b5d",
        "sha256": "12bd720b484034a9b24e26721614a48cb7c340a39ddd0c0ccea9a4e968028ba1"
      },
      "downloads": -1,
      "filename": "molmap-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "217409d879d591a13bae1cc3099e6b5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 74301,
      "upload_time": "2022-06-15T13:44:17",
      "upload_time_iso_8601": "2022-06-15T13:44:17.176345Z",
      "url": "https://files.pythonhosted.org/packages/e3/f1/b6dda6fdbdaacdb711e52a59f69a940d2c7b10b811da3ccc0fff9b00b743/molmap-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}