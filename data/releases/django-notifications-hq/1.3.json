{
  "info": {
    "author": "django-notifications team",
    "author_email": "yang@yangyubo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Utilities"
    ],
    "description": "``django-notifications`` Documentation\r\n=======================================\r\n\r\n\r\n|build-status| |coveralls|\r\n\r\n`django-notifications <https://github.com/django-notifications/django-notifications>`_ is a GitHub notification alike app for Django, it was derived from `django-activity-stream <https://github.com/justquick/django-activity-stream>`_\r\n\r\nThe major difference between ``django-notifications`` and ``django-activity-stream``:\r\n\r\n* ``django-notifications`` is for building something like Github \"Notifications\"\r\n* While ``django-activity-stream`` is for building Github \"News Feed\"\r\n\r\nNotifications are actually actions events, which are categorized by four main components.\r\n\r\n * ``Actor``. The object that performed the activity.\r\n * ``Verb``. The verb phrase that identifies the action of the activity.\r\n * ``Action Object``. *(Optional)* The object linked to the action itself.\r\n * ``Target``. *(Optional)* The object to which the activity was performed.\r\n\r\n``Actor``, ``Action Object`` and ``Target`` are ``GenericForeignKeys`` to any arbitrary Django object.\r\nAn action is a description of an action that was performed (``Verb``) at some instant in time by some ``Actor`` on some optional ``Target`` that results in an ``Action Object`` getting created/updated/deleted.\r\n\r\nFor example: `justquick <https://github.com/justquick/>`_ ``(actor)`` *closed* ``(verb)`` `issue 2 <https://github.com/justquick/django-activity-stream/issues/2>`_ ``(action_object)`` on `activity-stream <https://github.com/justquick/django-activity-stream/>`_ ``(target)`` 12 hours ago\r\n\r\nNomenclature of this specification is based on the Activity Streams Spec: `<http://activitystrea.ms/specs/atom/1.0/>`_\r\n\r\nRequirements\r\n============\r\n\r\n- Python 2.7, 3.3, 3.4, 3.5\r\n- Django 1.7, 1.8, 1.9, 1.10\r\n\r\nInstallation\r\n============\r\n\r\nInstallation is easy using ``pip`` and will install all required libraries.\r\n\r\n::\r\n\r\n    $ pip install django-notifications-hq\r\n\r\nor get it from source\r\n\r\n::\r\n\r\n    $ git clone https://github.com/django-notifications/django-notifications\r\n    $ cd django-notifications\r\n    $ python setup.py install\r\n\r\nNote that `django-model-utils <http://pypi.python.org/pypi/django-model-utils>`_ will be installed: this is required for the pass-through QuerySet manager.\r\n\r\nThen to add the Django Notifications to your project add the app ``notifications`` to your ``INSTALLED_APPS`` and urlconf.\r\n\r\nThe app should go somewhere after all the apps that are going to be generating notifications like ``django.contrib.auth``\r\n\r\n::\r\n\r\n    INSTALLED_APPS = (\r\n        'django.contrib.auth',\r\n        ...\r\n        'notifications',\r\n        ...\r\n    )\r\n\r\nAdd the notifications urls to your urlconf::\r\n\r\n    import notifications.urls\r\n\r\n    urlpatterns = [\r\n        ...\r\n        url('^inbox/notifications/', include(notifications.urls, namespace='notifications')),\r\n        ...\r\n    ]\r\n\r\nThe method of installing these urls, importing rather than using ``'notifications.urls'``, is required to ensure that the urls are installed in the ``notifications`` namespace.\r\n\r\nTo run schema migration, execute ``python manage.py migrate notifications``.\r\n\r\nGenerating Notifications\r\n=========================\r\n\r\nGenerating notifications is probably best done in a separate signal.\r\n\r\n::\r\n\r\n    from django.db.models.signals import post_save\r\n    from notifications.signals import notify\r\n    from myapp.models import MyModel\r\n\r\n    def my_handler(sender, instance, created, **kwargs):\r\n        notify.send(instance, verb='was saved')\r\n\r\n    post_save.connect(my_handler, sender=MyModel)\r\n\r\nTo generate an notification anywhere in your code, simply import the notify signal and send it with your actor, recipient, and verb.\r\n\r\n::\r\n\r\n    from notifications.signals import notify\r\n\r\n    notify.send(user, recipient=user, verb='you reached level 10')\r\n\r\nThe complete sintax is.\r\n\r\n::\r\n\r\n    notify.send(actor, recipient, verb, action_object, target, level, description, public, timestamp, \\*\\*kwargs)\r\n\r\nArguments:\r\n * **actor**: An object of any type. (Required)\r\n * **recipient**: A **Group** or a **User QuerySet** or a list of **User**. (Required)\r\n * **verb**: An string. (Required)\r\n * **action_object**: An object of any type. (Optional)\r\n * **target**: An object of any type. (Optional)\r\n * **level**: One of Notification.LEVELS ('success', 'info', 'warning', 'error') (default=info). (Optional)\r\n * **description**: An string. (Optional)\r\n * **public**: An boolean (default=True). (Optional)\r\n * **timestamp**: An tzinfo (default=timezone.now()). (Optional)\r\n\r\nExtra data\r\n----------\r\n\r\nYou can attach arbitrary data to your notifications by doing the following:\r\n\r\n  * Add to your settings.py: ``NOTIFICATIONS_USE_JSONFIELD=True``\r\n\r\nThen, any extra arguments you pass to ``notify.send(...)`` will be attached to the ``.data`` attribute of the notification object.\r\nThese will be serialised using the JSONField's serialiser, so you may need to take that into account: using only objects that will be serialised is a good idea.\r\n\r\nSoft delete\r\n-----------\r\n\r\nBy default, ``delete/(?P<slug>\\d+)/`` deletes specified notification record from DB.\r\nYou can change this behaviour to \"mark ``Notification.deleted`` field as ``True``\" by:\r\n\r\n  * Add to your settings.py: ``NOTIFICATIONS_SOFT_DELETE=True``\r\n\r\nWith this option, QuerySet methods ``unread`` and ``read`` contain one more filter: ``deleted=False``.\r\nMeanwhile, QuerySet methods ``deleted``, ``active``, ``mark_all_as_deleted``, ``mark_all_as_active`` are turned on.\r\nSee more details in QuerySet methods section.\r\n\r\nAPI\r\n====\r\n\r\nQuerySet methods\r\n-----------------\r\n\r\nUsing ``django-model-utils``, we get the ability to add queryset methods to not only the manager, but to all querysets that will be used, including related objects. This enables us to do things like::\r\n\r\n  Notification.objects.unread()\r\n\r\nwhich returns all unread notifications. To do this for a single user, we can do::\r\n\r\n  user = User.objects.get(pk=pk)\r\n  user.notifications.unread()\r\n\r\nThere are some other QuerySet methods, too.\r\n\r\n``qs.unsent()``\r\n~~~~~~~~~~~~~~~\r\n\r\nReturn all of the unsent notifications, filtering the current queryset. (emailed=False)\r\n\r\n``qs.read()``\r\n~~~~~~~~~~~~~~~\r\n\r\nReturn all of the sent notifications, filtering the current queryset. (emailed=True)\r\n\r\n``qs.unread()``\r\n~~~~~~~~~~~~~~~\r\n\r\nReturn all of the unread notifications, filtering the current queryset.\r\nWhen ``NOTIFICATIONS_SOFT_DELETE=True``, this filter contains ``deleted=False``.\r\n\r\n``qs.read()``\r\n~~~~~~~~~~~~~~~\r\n\r\nReturn all of the read notifications, filtering the current queryset.\r\nWhen ``NOTIFICATIONS_SOFT_DELETE=True``, this filter contains ``deleted=False``.\r\n\r\n\r\n``qs.mark_all_as_read()`` | ``qs.mark_all_as_read(recipient)``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nMark all of the unread notifications in the queryset (optionally also filtered by ``recipient``) as read.\r\n\r\n\r\n``qs.mark_all_as_unread()`` | ``qs.mark_all_as_unread(recipient)``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nMark all of the read notifications in the queryset (optionally also filtered by ``recipient``) as unread.\r\n\r\n``qs.mark_as_sent()`` | ``qs.mark_as_sent(recipient)``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nMark all of the unsent notifications in the queryset (optionally also filtered by ``recipient``) as sent.\r\n\r\n\r\n``qs.mark_as_unset()`` | ``qs.mark_as_unset()(recipient)``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nMark all of the sent notifications in the queryset (optionally also filtered by ``recipient``) as ununset.\r\n\r\n``qs.deleted()``\r\n~~~~~~~~~~~~~~~~\r\n\r\nReturn all notifications that have ``deleted=True``, filtering the current queryset.\r\nMust be used with ``NOTIFICATIONS_SOFT_DELETE=True``.\r\n\r\n``qs.active()``\r\n~~~~~~~~~~~~~~~\r\n\r\nReturn all notifications that have ``deleted=False``, filtering the current queryset.\r\nMust be used with ``NOTIFICATIONS_SOFT_DELETE=True``.\r\n\r\n``qs.mark_all_as_deleted()`` | ``qs.mark_all_as_deleted(recipient)``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nMark all notifications in the queryset (optionally also filtered by ``recipient``) as ``deleted=True``.\r\nMust be used with ``NOTIFICATIONS_SOFT_DELETE=True``.\r\n\r\n``qs.mark_all_as_active()`` | ``qs.mark_all_as_active(recipient)``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nMark all notifications in the queryset (optionally also filtered by ``recipient``) as ``deleted=False``.\r\nMust be used with ``NOTIFICATIONS_SOFT_DELETE=True``.\r\n\r\n\r\nModel methods\r\n-------------\r\n\r\n``obj.timesince([datetime])``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nA wrapper for Django's ``timesince`` function.\r\n\r\n``obj.mark_as_read()``\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nMark the current object as read.\r\n\r\n\r\nTemplate tags\r\n-------------\r\n\r\nPut `{% load notifications_tags %}` in the template before you actually use notification tags.\r\n\r\n\r\n``notifications_unread``\r\n~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n::\r\n\r\n    {% notifications_unread %}\r\n\r\nGive the number of unread notifications for a user, or nothing (an empty string) for an anonymous user.\r\n\r\nStoring the count in a variable for further processing is advised, such as::\r\n\r\n    {% notifications_unread as unread_count %}\r\n    ...\r\n    {% if unread_count %}\r\n        You have <strong>{{ unread_count }}</strong> unread notifications.\r\n    {% endif %}\r\n\r\nLive-updater API\r\n================\r\n\r\nTo ensure users always have the most up-to-date notifications, `django-notifications` includes a simple javascript API\r\nfor updating specific fields within a django template.\r\n\r\nThere are two possible API calls that can be made:\r\n\r\n1. ``api/unread_count/`` that returns a javascript object with 1 key: ``unread_count`` eg::\r\n\r\n        {\"unread_count\":1}\r\n\r\n#. ``api/unread_list/`` that returns a javascript object with 2 keys: `unread_count` and `unread_list` eg::\r\n\r\n        {\r\n         \"unread_count\":1,\r\n         \"unread_list\":[--list of json representations of notifications--]\r\n        }\r\n\r\n   Representations of notifications are based on the django method: ``model_to_dict``\r\n\r\n   Query string arguments:\r\n\r\n   - **max** - maximum length of unread list.\r\n   - **mark_as_read** - mark notification in list as read.\r\n\r\n   For example, get ``api/unread_list/?max=3&mark_as_read=true`` returns 3 notifications and mark them read (remove from list on next request).\r\n\r\n\r\nHow to use:\r\n-----------\r\n\r\n 1. Put ``{% load notifications_tags %}`` in the template before you actually use notification tags.\r\n 2. In the area where you are loading javascript resources add the following tags in the order below::\r\n\r\n       <script src=\"{% static 'notifications/notify.js' %}\" type=\"text/javascript\"></script>\r\n       {% register_notify_callbacks callbacks='fill_notification_list,fill_notification_badge' %}\r\n\r\n    ``register_notify_callbacks`` takes the following arguments:\r\n\r\n     1. ``badge_id`` (default ``live_notify_badge``) - The `id` attribute of the element to show the unread count, that will be periodically updated.\r\n     #. ``menu_id`` (default ``live_notify_list``) - The `id` attribute of the element to insert a list of unread items, that will be periodically updated.\r\n     #. ``refresh_period`` (default ``15``) - How often to fetch unread items from the server (integer in seconds).\r\n     #. ``fetch`` (default ``5``) - How many notifications to fetch each time.\r\n     #. ``callbacks`` (default ``<empty string>``) - A comma-separated list of javascript functions to call each period.\r\n     #. ``api_name`` (default ``list``) - The name of the API to call (this can be either ``list`` or ``count``).\r\n\r\n 3. To insert a live-updating unread count, use the following template::\r\n\r\n       {% live_notify_badge %}\r\n\r\n    ``live_notify_badge`` takes the following arguments:\r\n\r\n   1. ``badge_id`` (default ``live_notify_badge``) - The ``id`` attribute for the ``<span>`` element that will be created to show the unread count.\r\n   #. ``classes`` (default ``<empty string>``) - A string used to populate the ``class`` attribute of the above element.\r\n\r\n 4. To insert a live-updating unread list, use the following template::\r\n\r\n       {% live_notify_list %}\r\n\r\n    ``live_notify_list`` takes the following arguments:\r\n\r\n   1. ``list_id`` (default ``live_notify_list``) - The ``id`` attribute for the ``<ul>`` element that will be created to insert the list of notifications into.\r\n   #. ``classes`` (default ``<empty string>``) - A string used to populate the ``class`` attribute of the above element.\r\n\r\nUsing the live-updater with bootstrap\r\n-------------------------------------\r\n\r\nThe Live-updater can be incorporated into bootstrap with minimal code.\r\n\r\nTo create a live-updating bootstrap badge containing the unread count, simply use the template tag::\r\n\r\n    {% live_notify_badge classes=\"badge\" %}\r\n\r\nTo create a live-updating bootstrap dropdown menu containing a selection of recent unread notifications, simply use the template tag::\r\n\r\n    {% live_notify_list classes=\"dropdown-menu\" %}\r\n\r\nCustomising the display of notifications using javascript callbacks\r\n-------------------------------------------------------------------\r\n\r\nWhile the live notifier for unread counts should suit most use cases, users may wish to alter how\r\nunread notifications are shown.\r\n\r\nThe ``callbacks`` argument of the ``register_notify_callbacks`` dictates which javascript functions are called when\r\nthe unread api call is made.\r\n\r\nTo add a custom javascript callback, simply add this to the list, like so::\r\n\r\n       {% register_notify_callbacks callbacks='fill_notification_badge,my_special_notification_callback' %}\r\n\r\nThe above would cause the callback to update the unread count badge, and would call the custom function `my_special_notification_callback`.\r\nAll callback functions are passed a single argument by convention called `data`, which contains the entire result from the API.\r\n\r\nFor example, the below function would get the recent list of unread messages and log them to the console::\r\n\r\n    function my_special_notification_callback(data) {\r\n        for (var i=0; i < data.unread_list.length; i++) {\r\n            msg = data.unread_list[i];\r\n            console.log(msg);\r\n        }\r\n    }\r\n\r\nTesting the live-updater\r\n------------------------\r\n\r\n1. Clone the repo\r\n2. Set the 'NOTIFICATION_TEST' environment variable. E.g. `export NOTIFICATION_TEST=1`\r\n3. Run `./manage.py runserver`\r\n4. Browse to `yourserverip/test/`\r\n5. Click 'Make a notification' and a new notification should appear in the list in 5-10 seconds.\r\n\r\nSerializing the django-notifications Model\r\n------------------------------------------\r\n\r\nSee here - http://www.django-rest-framework.org/api-guide/relations/#generic-relationships\r\n\r\nIn this example the target object can be of type Foo or Bar and the appropriate serializer will be used.\r\n\r\n::\r\n\r\n    class GenericNotificationRelatedField(serializers.RelatedField):\r\n\r\n        def to_representation(self, value):\r\n            if isinstance(value, Foo):\r\n                serializer = FooSerializer(value)\r\n            if isinstance(value, Bar):\r\n                serializer = BarSerializer(value)\r\n\r\n            return serializer.data\r\n\r\n\r\n    class NotificationSerializer(serializers.Serializer):\r\n        recipient = PublicUserSerializer(User, read_only=True)\r\n        unread = serializers.BooleanField(read_only=True)\r\n        target = GenericNotificationRelatedField(read_only=True)\r\n\r\nThanks to @DaWy\r\n\r\nNotes\r\n=====\r\n\r\nEmail Notification\r\n------------------\r\n\r\nSending email to users has not been integrated into this library. So for now you need to implement it if needed. There is a reserved field `Notification.emailed` to make it easier.\r\n\r\n\r\n``django-notifications`` Team\r\n==============================\r\n\r\nCore contributors (in alphabetical order):\r\n\r\n- `Alvaro Leonel <https://github.com/AlvaroLQueiroz>`_\r\n- `Samuel Spencer <https://github.com/LegoStormtroopr>`_\r\n- `Yang Yubo <https://github.com/yangyubo>`_\r\n- `Zhongyuan Zhang <https://github.com/zhang-z>`_\r\n\r\n.. |build-status| image:: https://travis-ci.org/django-notifications/django-notifications.svg\r\n    :target: https://travis-ci.org/django-notifications/django-notifications\r\n\r\n.. |coveralls| image:: https://coveralls.io/repos/django-notifications/django-notifications/badge.png?branch=master\r\n    :alt: Code coverage on coveralls\r\n    :scale: 100%\r\n    :target: https://coveralls.io/r/django-notifications/django-notifications?branch=master",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/django-notifications/django-notifications",
    "keywords": "django notifications github action event stream",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-notifications-hq",
    "package_url": "https://pypi.org/project/django-notifications-hq/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-notifications-hq/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/django-notifications/django-notifications"
    },
    "release_url": "https://pypi.org/project/django-notifications-hq/1.3/",
    "requires_dist": [
      "django (>=1.7)",
      "django-model-utils (>=2.0.3)",
      "jsonfield (>=1.0.3)",
      "pytz"
    ],
    "requires_python": "",
    "summary": "GitHub notifications alike app for Django.",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13048974,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "49fd7756dd010768ef4159949fe145f507ddeb3dcafc941a8df843e3b9e4d071",
        "md5": "4fd7d7324ffa402fe6e6054001179e6d",
        "sha256": "e9b6bf9d62cb5b0058a162467380f6d9949e9f4206af9731c83f84014ccc4580"
      },
      "downloads": -1,
      "filename": "django_notifications_hq-1.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4fd7d7324ffa402fe6e6054001179e6d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 25014,
      "upload_time": "2017-06-26T12:21:51",
      "upload_time_iso_8601": "2017-06-26T12:21:51.996007Z",
      "url": "https://files.pythonhosted.org/packages/49/fd/7756dd010768ef4159949fe145f507ddeb3dcafc941a8df843e3b9e4d071/django_notifications_hq-1.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c1daa8b1bd776af36883e23cbb3e9fef60ae9016e7896c3839cc89ab1c68a91",
        "md5": "7537f10a95abadd8468b0140c5d8b1ff",
        "sha256": "29ce314f405bc03e642108ff55530db517e06e9b441439a368e053d539181270"
      },
      "downloads": -1,
      "filename": "django-notifications-hq-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7537f10a95abadd8468b0140c5d8b1ff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26792,
      "upload_time": "2017-06-26T12:21:53",
      "upload_time_iso_8601": "2017-06-26T12:21:53.494644Z",
      "url": "https://files.pythonhosted.org/packages/7c/1d/aa8b1bd776af36883e23cbb3e9fef60ae9016e7896c3839cc89ab1c68a91/django-notifications-hq-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}