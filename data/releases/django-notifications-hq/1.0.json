{
  "info": {
    "author": "django-notifications team",
    "author_email": "yang@yangyubo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Utilities"
    ],
    "description": "``django-notifications`` Documentation\n=======================================\n\n\n|build-status| |coveralls|\n\n`django-notifications <https://github.com/django-notifications/django-notifications>`_ is a GitHub notification alike app for Django, it was derived from `django-activity-stream <https://github.com/justquick/django-activity-stream>`_\n\nThe major difference between ``django-notifications`` and ``django-activity-stream``:\n\n* ``django-notifications`` is for building something like Github \"Notifications\"\n* While ``django-activity-stream`` is for building Github \"News Feed\"\n\nNotifications are actually actions events, which are categorized by four main components.\n\n * ``Actor``. The object that performed the activity.\n * ``Verb``. The verb phrase that identifies the action of the activity.\n * ``Action Object``. *(Optional)* The object linked to the action itself.\n * ``Target``. *(Optional)* The object to which the activity was performed.\n\n``Actor``, ``Action Object`` and ``Target`` are ``GenericForeignKeys`` to any arbitrary Django object.\nAn action is a description of an action that was performed (``Verb``) at some instant in time by some ``Actor`` on some optional ``Target`` that results in an ``Action Object`` getting created/updated/deleted.\n\nFor example: `justquick <https://github.com/justquick/>`_ ``(actor)`` *closed* ``(verb)`` `issue 2 <https://github.com/justquick/django-activity-stream/issues/2>`_ ``(object)`` on `activity-stream <https://github.com/justquick/django-activity-stream/>`_ ``(target)`` 12 hours ago\n\nNomenclature of this specification is based on the Activity Streams Spec: `<http://activitystrea.ms/specs/atom/1.0/>`_\n\nRequirements\n============\n\n- Python 2.7, 3.3, 3.4, 3.5\n- Django 1.7, 1.8, 1.9\n\nInstallation\n============\n\nInstallation is easy using ``pip`` and will install all required libraries.\n\n::\n\n    $ pip install django-notifications-hq\n\nor get it from source\n\n::\n\n    $ git clone https://github.com/django-notifications/django-notifications\n    $ cd django-notifications\n    $ python setup.py install\n\nNote that `django-model-utils <http://pypi.python.org/pypi/django-model-utils>`_ will be installed: this is required for the pass-through QuerySet manager.\n\nThen to add the Django Notifications to your project add the app ``notifications`` to your ``INSTALLED_APPS`` and urlconf.\n\nThe app should go somewhere after all the apps that are going to be generating notifications like ``django.contrib.auth``::\n\n    INSTALLED_APPS = (\n        'django.contrib.auth',\n        ...\n        'notifications',\n        ...\n    )\n\nAdd the notifications urls to your urlconf::\n\n    import notifications\n\n    urlpatterns = [\n        ...\n        url('^inbox/notifications/', include(notifications.urls, namespace='notifications')),\n        ...\n    ]\n\nThe method of installing these urls, importing rather than using ``'notifications.urls'``, is required to ensure that the urls are installed in the ``notifications`` namespace.\n\nTo run schema migration, execute ``python manage.py migrate notifications``.\n\nGenerating Notifications\n=========================\n\nGenerating notifications is probably best done in a separate signal.\n\n::\n\n    from django.db.models.signals import post_save\n    from notifications.signals import notify\n    from myapp.models import MyModel\n\n    def my_handler(sender, instance, created, **kwargs):\n        notify.send(instance, verb='was saved')\n\n    post_save.connect(my_handler, sender=MyModel)\n\nTo generate an notification anywhere in your code, simply import the notify signal and send it with your actor, recipient, verb, and target.\n\n::\n\n    from notifications.signals import notify\n\n    notify.send(user, recipient=user, verb='you reached level 10')\n\n    // \"recipient\" can also be a Group, the notification will be sent to all the Users in the Group\n    notify.send(comment.user, recipient=group, verb=u'replied', action_object=comment,\n                description=comment.comment, target=comment.content_object)\n\n    notify.send(follow_instance.user, recipient=follow_instance.follow_object, verb=u'has followed you',\n                action_object=instance, description=u'', target=follow_instance.follow_object, level='success')\n\nExtra data\n----------\n\nYou can attach arbitrary data to your notifications by doing the following:\n\n  * Add to your settings.py: ``NOTIFICATIONS_USE_JSONFIELD=True``\n\nThen, any extra arguments you pass to ``notify.send(...)`` will be attached to the ``.data`` attribute of the notification object.\nThese will be serialised using the JSONField's serialiser, so you may need to take that into account: using only objects that will be serialised is a good idea.\n\nSoft delete\n-----------\n\nBy default, ``delete/(?P<slug>\\d+)/`` deletes specified notification record from DB.\nYou can change this behaviour to \"mark ``Notification.deleted`` field as ``True``\" by:\n\n  * Add to your settings.py: ``NOTIFICATIONS_SOFT_DELETE=True``\n\nWith this option, QuerySet methods ``unread`` and ``read`` contain one more filter: ``deleted=False``.\nMeanwhile, QuerySet methods ``deleted``, ``active``, ``mark_all_as_deleted``, ``mark_all_as_active`` are turned on.\nSee more details in QuerySet methods section.\n\nAPI\n====\n\nQuerySet methods\n-----------------\n\nUsing ``django-model-utils``, we get the ability to add queryset methods to not only the manager, but to all querysets that will be used, including related objects. This enables us to do things like::\n\n  Notification.objects.unread()\n\nwhich returns all unread notifications. To do this for a single user, we can do::\n\n  user = User.objects.get(pk=pk)\n  user.notifications.unread()\n\nThere are some other QuerySet methods, too.\n\n``qs.unread()``\n~~~~~~~~~~~~~~~\n\nReturn all of the unread notifications, filtering the current queryset.\nWhen ``NOTIFICATIONS_SOFT_DELETE=True``, this filter contains ``deleted=False``.\n\n``qs.read()``\n~~~~~~~~~~~~~~~\n\nReturn all of the read notifications, filtering the current queryset.\nWhen ``NOTIFICATIONS_SOFT_DELETE=True``, this filter contains ``deleted=False``.\n\n\n``qs.mark_all_as_read()`` | ``qs.mark_all_as_read(recipient)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMark all of the unread notifications in the queryset (optionally also filtered by ``recipient``) as read.\n\n\n``qs.mark_all_as_unread()`` | ``qs.mark_all_as_unread(recipient)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMark all of the read notifications in the queryset (optionally also filtered by ``recipient``) as unread.\n\n``qs.deleted()``\n~~~~~~~~~~~~~~~~\n\nReturn all notifications that have ``deleted=True``, filtering the current queryset.\nMust be used with ``NOTIFICATIONS_SOFT_DELETE=True``.\n\n``qs.active()``\n~~~~~~~~~~~~~~~\n\nReturn all notifications that have ``deleted=False``, filtering the current queryset.\nMust be used with ``NOTIFICATIONS_SOFT_DELETE=True``.\n\n``qs.mark_all_as_deleted()`` | ``qs.mark_all_as_deleted(recipient)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMark all notifications in the queryset (optionally also filtered by ``recipient``) as ``deleted=True``.\nMust be used with ``NOTIFICATIONS_SOFT_DELETE=True``.\n\n``qs.mark_all_as_active()`` | ``qs.mark_all_as_active(recipient)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMark all notifications in the queryset (optionally also filtered by ``recipient``) as ``deleted=False``.\nMust be used with ``NOTIFICATIONS_SOFT_DELETE=True``.\n\n\nModel methods\n-------------\n\n``obj.timesince([datetime])``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA wrapper for Django's ``timesince`` function.\n\n``obj.mark_as_read()``\n~~~~~~~~~~~~~~~~~~~~~~\n\nMark the current object as read.\n\n\nTemplate tags\n-------------\n\nPut `{% load notifications_tags %}` in the template before you actually use notification tags.\n\n\n``notifications_unread``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    {% notifications_unread %}\n\nGive the number of unread notifications for a user, or nothing (an empty string) for an anonymous user.\n\nStoring the count in a variable for further processing is advised, such as::\n\n    {% notifications_unread as unread_count %}\n    ...\n    {% if unread_count %}\n        You have <strong>{{ unread_count }}</strong> unread notifications.\n    {% endif %}\n\nLive-updater API\n================\n\nTo ensure users always have the most up-to-date notifications, `django-notifications` includes a simple javascript API\nfor updating specific fields within a django template.\n\nThere are two possible API calls that can be made:\n\n 1. ``api/unread_count/`` that returns a javascript object with 1 key: ``unread_count`` eg::\n\n        {\"unread_count\":1}\n\n #. ``api/unread_list/`` that returns a javascript object with 2 keys: `unread_count` and `unread_list` eg::\n\n         {\n          \"unread_count\":1,\n          \"unread_list\":[--list of json representations of notifications--]\n         }\n\n     Representations of notifications are based on the django method: ``model_to_dict``\n\n\nHow to use:\n-----------\n\n 1. Put ``{% load notifications_tags %}`` in the template before you actually use notification tags.\n 2. In the area where you are loading javascript resources add the following tags in the order below::\n\n       <script src=\"{% static 'notifications/notify.js' %}\" type=\"text/javascript\"></script>\n       {% register_notify_callbacks callbacks='fill_notification_list,fill_notification_badge' %}\n\n    ``register_notify_callbacks`` takes the following arguments:\n\n     1. ``badge_id`` (default ``live_notify_badge``) - The `id` attribute of the element to show the unread count, that will be periodically updated.\n     #. ``menu_id`` (default ``live_notify_list``) - The `id` attribute of the element to insert a list of unread items, that will be periodically updated.\n     #. ``refresh_period`` (default ``15``) - How often to fetch unread items from the server (integer in seconds).\n     #. ``to_fetch`` (default ``5``) - How many notifications to fetch each time.\n     #. ``callbacks`` (default ``<empty string>``) - A comma-separated list of javascript functions to call each period.\n     #. ``api_url_name`` (default ``list``) - The name of the API to call (this can be either ``list`` or ``count``).\n\n 3. To insert a live-updating unread count, use the following template::\n\n       {% live_notify_badge %}\n\n    ``live_notify_badge`` takes the following arguments:\n\n   1. ``badge_id`` (default ``live_notify_badge``) - The ``id`` attribute for the ``<span>`` element that will be created to show the unread count.\n   #. ``classes`` (default ``<empty string>``) - A string used to populate the ``class`` attribute of the above element.\n\n 4. To insert a live-updating unread count, use the following template::\n\n       {% live_notify_list %}\n\n    ``live_notify_list`` takes the following arguments:\n\n   1. ``list_id`` (default ``live_notify_list``) - The ``id`` attribute for the ``<ul>`` element that will be created to insert the list of notifications into.\n   #. ``classes`` (default ``<empty string>``) - A string used to populate the ``class`` attribute of the above element.\n\nUsing the live-updater with bootstrap\n-------------------------------------\n\nThe Live-updater can be incorporated into bootstrap with minimal code.\n\nTo create a live-updating bootstrap badge containing the unread count, simply use the template tag::\n\n    {% live_notify_badge classes=\"badge\" %}\n\nTo create a live-updating bootstrap dropdown menu containing a selection of recent unread notifications, simply use the template tag::\n\n    {% live_notify_list classes=\"dropdown-menu\" %}\n\nCustomising the display of notifications using javascript callbacks\n-------------------------------------------------------------------\n\nWhile the live notifier for unread counts should suit most use cases, users may wish to alter how\nunread notifications are shown.\n\nThe ``callbacks`` argument of the ``register_notify_callbacks`` dictates which javascript functions are called when\nthe unread api call is made.\n\nTo add a custom javascript callback, simply add this to the list, like so::\n\n       {% register_notify_callbacks callbacks='fill_notification_badge,my_special_notification_callback' %}\n\nThe above would cause the callback to update the unread count badge, and would call the custom function `my_special_notification_callback`.\nAll callback functions are passed a single argument by convention called `data`, which contains the entire result from the API.\n\nFor example, the below function would get the recent list of unread messages and log them to the console::\n\n    function my_special_notification_callback(data) {\n        for (var i=0; i < data.unread_list.length; i++) {\n            msg = data.unread_list[i];\n            console.log(msg);\n        }\n    }\n\nTesting the live-updater\n------------------------\n\n1. Clone the repo\n2. Set the 'NOTIFICATION_TEST' environemnt variable. E.g. `export NOTIFICATION_TEST=1`\n3. Run `./manage.py runserver`\n4. Browse to `yourserverip/test/`\n5. Click 'Make a notification' and a new notification should appear in the list in 5-10 seconds.\n\n\n``django-notifications`` Team\n==============================\n\nCore contributors (in alphabetical order):\n\n- `Samuel Spencer <https://github.com/LegoStormtroopr>`_\n- `Yang Yubo <https://github.com/yangyubo>`_\n- `Zhongyuan Zhang <https://github.com/zhang-z>`_\n\n.. |build-status| image:: https://travis-ci.org/django-notifications/django-notifications.svg\n    :target: https://travis-ci.org/django-notifications/django-notifications\n\n.. |coveralls| image:: https://coveralls.io/repos/django-notifications/django-notifications/badge.png?branch=master\n    :alt: Code coverage on coveralls\n    :scale: 100%\n    :target: https://coveralls.io/r/django-notifications/django-notifications?branch=master",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/django-notifications/django-notifications",
    "keywords": "django notifications github action event stream",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-notifications-hq",
    "package_url": "https://pypi.org/project/django-notifications-hq/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-notifications-hq/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/django-notifications/django-notifications"
    },
    "release_url": "https://pypi.org/project/django-notifications-hq/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "GitHub notifications alike app for Django.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13048974,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec6cc8bc7c9f1809999ccfbe47c81ff00e68f466233a21fe514a72972122b4f4",
        "md5": "bf9ff773c8aaf238853d7a4e31da1e80",
        "sha256": "71a7bae850ae1d58afc12f435ce7a0627afe18dbdf8db71ca8e08e5856825b7e"
      },
      "downloads": -1,
      "filename": "django-notifications-hq-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bf9ff773c8aaf238853d7a4e31da1e80",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24068,
      "upload_time": "2016-01-04T03:33:20",
      "upload_time_iso_8601": "2016-01-04T03:33:20.860943Z",
      "url": "https://files.pythonhosted.org/packages/ec/6c/c8bc7c9f1809999ccfbe47c81ff00e68f466233a21fe514a72972122b4f4/django-notifications-hq-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}