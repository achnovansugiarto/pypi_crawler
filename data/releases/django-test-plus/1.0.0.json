{
  "info": {
    "author": "Frank Wiles",
    "author_email": "frank@revsys.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django-test-plus\nUseful additions to Django's default TestCase from [Revolution Systems](http://www.revsys.com/)\n\n[![travis ci status image](https://secure.travis-ci.org/revsys/django-test-plus.png)](http://travis-ci.org/revsys/django-test-plus) [![Coverage Status](https://coveralls.io/repos/revsys/django-test-plus/badge.svg?branch=master)](https://coveralls.io/r/revsys/django-test-plus?branch=master)\n\n## Rationale\n\nLet's face it, writing tests isn't always fun.  Part of the reason for that is all of the boilerplate you end up writing.  django-test-plus is an attempt to cut down on some of that when writing Django tests. We guarantee it will increase the time before you get carpal tunnel by at least 3 weeks!\n\n## Support\n\nSupports: Python 2 and Python 3\n\nSupports Django Versions: 1.4, 1.5, 1.6, 1.7, and 1.8\n\n## Usage\n\nUsing django-test-plus is pretty easy, simply have your tests inherit from test_plus.test.TestCase rather than the normal django.test.TestCase like so:\n\n    from test_plus.test import TestCase\n\n    class MyViewTests(TestCase):\n        ...\n\nThis is sufficient to get things rolling, but you are encouraged to create *your own* sub-class on a per project basis.  This will allow you to add your own project specific helper methods.\n\nFor example, if you have a django project named 'myproject', you might create\nthe following in ```myproject/test.py```:\n\n    from test_plus.test import TestCase as PlusTestCase\n\n    class TestCase(PlusTestCase):\n        pass\n\nAnd then in your tests use:\n\n    from myproject.test import TestCase\n\n    class MyViewTests(TestCase):\n        ...\n\n## Methods\n\n### reverse(url_name, **args, ***kwargs)\n\nWhen testing views you often find yourself needing to reverse the URL's name. With django-test-plus there is no need for the ```from django.core.urlresolvesr import reverse``` boilerplate.  Instead just use:\n\n    def test_something(self):\n        url = self.reverse('my-url-name')\n        slug_url = self.reverse('name-takes-a-slug', slug='my-slug')\n        pk_url self.reverse('name-takes-a-pk', pk=12)\n\nAs you can see our reverse also passes along any args or kwargs you need to pass in.\n\n\n### get(url_name, **args, ***kwargs)\n\nAnother thing you do often is HTTP get urls, our ```get()``` method assumes you are passing in a named URL with any arguments necessary:\n\n    def test_get_named_url(self):\n        response = self.get('my-url-name')\n\nWhen using this get method two other things happen for you, we store the last\nresponse in ``self.last_response``` and the response's Context in ```self.context```. So instead of:\n\n    def test_default_django(self):\n        response = self.client.get(reverse('my-url-name'))\n        self.assertTrue('foo' in response.context)\n        self.assertEqual(response.context['foo'], 12)\n\nYou can instead write:\n\n    def test_testplus_get(self):\n        self.get('my-url-name')\n        self.assertInContext('foo')\n        self.assertEqual(self.context['foo'], 12)\n\n### post(url_name, data, **args, ***kwargs)\n\nOur ```post()``` method takes a named URL, the dictionary of data you wish to post and any args or kwargs necessary to reverse the url_name.\n\n\n    def test_post_named_url(self):\n        response = self.post('my-url-name', data={'coolness-factor': 11.0})\n\n### assertInContext(key)\n\nYou can ensure a specific key exists in the last response's context by using:\n\n    def test_in_context(self):\n        self.get('my-view-with-some-context')\n        self.assertInContext('some-key')\n\n### response_XXX(response) - status code checking\n\nAnother test you often need to do is check that a response has a certain HTTP status code.  With Django's default TestCase you would write:\n\n    from django.core.urlresolvers import reverse\n\n    def test_status(self):\n        response = self.client.get(reverse('my-url-name'))\n        self.assertEqual(response.status_code, 200)\n\nWith django-test-plus you can shorten that to be:\n\n    def test_better_status(self):\n        response = self.get('my-url-name')\n        self.response_200(response)\n\ndjango-test-plus provides the following response method checks for you:\n\n    - response_200()\n    - response_201()\n    - response_302()\n    - response_403()\n    - response_404()\n\nAll of which take a Django test client response as their only argument.\n\n### get_check_200(url_name, **args, ***kwargs)\n\nGETing and checking views return status 200 is so common a test this method makes it even easier:\n\n    def test_even_better_status(self):\n        response = self.get_check_200('my-url-name')\n\n### make_user(username)\n\nWhen testing out views you often need to create various users to ensure all of your logic is safe and sound.  To make this process easier, this method will create a user for you:\n\n    def test_user_stuff(self)\n        user1 = self.make_user('u1')\n        user2 = self.make_user('u2')\n\n**NOTE:** This work properly with version of Django prior to 1.6 and will use your own User class if you have created your own User model.\n\nIf creating a User in your project is more complicated, say for example you removed the ```username``` field from the default Django Auth model you can provide a [Factory Boy](https://factoryboy.readthedocs.org/en/latest/) factory to create it or simply override this method on your own sub-class.\n\nTo use a Factory Boy factory simply create your class like this:\n\n    from test_plus.test import TestCase\n    from .factories import UserFactory\n\n\n    class MySpecialTest(TestCase):\n        user_factory = UserFactory\n\n        def test_special_creation(self):\n            user1 = self.make_user('u1')\n\n**NOTE:** Users created by this method will always have their password set to the string 'password' in order to ease testing.\n\n## Authentication Helpers\n\n### assertLoginRequired(url_name, **args, ***kwargs)\n\nIt's pretty easy to add a new view to a project and forget to restrict it to be login required, this method helps make it easy to test that a given named URL requires auth:\n\n    def test_auth(self):\n        self.assertLoginRequired('my-restricted-url')\n        self.assertLoginRequired('my-restricted-object', pk=12)\n        self.assertLoginRequired('my-restricted-object', slug='something')\n\n### login context\n\nAlong with ensuing a view requires login and creating users, the next thing you end up doing is logging in as various users to test our your restriction\nlogic.  This can be made easier with the following context:\n\n    def test_restrictions(self):\n        user1 = self.make_user('u1')\n        user2 = self.make_user('u2')\n\n        self.assertLoginRequired('my-protected-view')\n\n        with self.login(username=user1.username, password='password'):\n            response = self.get('my-protected-view')\n            # Test user1 sees what they should be seeing\n\n        with self.login(username=user2.username, password='password'):\n            response = self.get('my-protected-view')\n            # Test user2 see what they should be seeing\n\nSince we're likely creating our users using ```make_user()``` from above, we can assume the password is 'password' so the login context assumes that for you as well, so you can do:\n\n    def test_restrictions(self):\n        user1 = self.make_user('u1')\n\n        with self.login(username=user1.username):\n            response = self.get('my-protected-view')\n\nWe can also derive the username if we're using ```make_user()``` so we can shorten that up even further like this:\n\n    def test_restrictions(self):\n        user1 = self.make_user('u1')\n\n        with self.login(user1):\n            response = self.get('my-protected-view')\n\n## Ensuring low query counts\n\n### assertNumQueriesLessThan(number) - context\n\nDjango provides [assertNumQueries](https://docs.djangoproject.com/en/1.8/topics/testing/tools/#django.test.TransactionTestCase.assertNumQueries) which is great when your code generates generates a specific number of queries. However, if due to the nature of your data this number can vary you often don't attempt to ensure the code doesn't start producing a ton more queries than you expect.\n\n**NOTE:** This isn't possible in versions of Django prior to 1.6, so the context will run your code and assertions and issue a warning that it cannot check the number of queries generated.\n\n### assertGoodView(url_name, **args, ***kwargs)\n\nThis method does a few of things for you, it:\n\n    - Retrieves the name URL\n    - Ensures the view does not generate more than 50 queries\n    - Ensures the response has status code 200\n    - Returns the response\n\nOften a wide sweeping test like this is better than no test at all. You can use it like this:\n\n    def test_better_than_nothing(self):\n        response = self.assertGoodView('my-url-name')",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/revsys/django-test-plus/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-test-plus",
    "package_url": "https://pypi.org/project/django-test-plus/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-test-plus/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/revsys/django-test-plus/"
    },
    "release_url": "https://pypi.org/project/django-test-plus/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "django-test-plus provides useful additions to Django's default TestCase",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15388433,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b327c0ec9e67be5c6a1be11d2e0e4e8169aec53ae0cf8840673480124d10f4be",
        "md5": "6a5328ad69f41fe3952846b31cad55bf",
        "sha256": "cf04432420c7e54a96c3922196aa60e080bdd248430c8296c6c7b83a560a38d2"
      },
      "downloads": -1,
      "filename": "django-test-plus-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6a5328ad69f41fe3952846b31cad55bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9267,
      "upload_time": "2015-05-23T20:15:26",
      "upload_time_iso_8601": "2015-05-23T20:15:26.224780Z",
      "url": "https://files.pythonhosted.org/packages/b3/27/c0ec9e67be5c6a1be11d2e0e4e8169aec53ae0cf8840673480124d10f4be/django-test-plus-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}