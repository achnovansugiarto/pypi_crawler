{
  "info": {
    "author": "Mikhail Shvein",
    "author_email": "work_shvein_mihail@mail.ru",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Python unit tests](https://github.com/M1ha-Shvn/django-pg-hll/actions/workflows/python-tests.yml/badge.svg)](https://github.com/M1ha-Shvn/django-pg-hll/actions/workflows/python-tests.yml)  [![Upload Python Package](https://github.com/M1ha-Shvn/django-pg-hll/actions/workflows/python-publish.yml/badge.svg)](https://github.com/M1ha-Shvn/django-pg-hll/actions/workflows/python-publish.yml) [![Downloads](https://pepy.tech/badge/django-pg-hll/month)](https://pepy.tech/project/django-pg-hll)\n\n\n# django-pg-hll\nProvides a django wrapper for [postgresql-hll library by CitusData](https://github.com/citusdata/postgresql-hll#the-importance-of-hashing)\n\n## Requirements\n* Python 3.5+  \n* django >= 1.9 (tested 2.1+)  \n* psycopg2-binary\n* PostgreSQL 9.4+ (tested 9.6+)  \n\n## Installation\nInstall via pip:  \n`pip install django-pg-hll`    \nor via setup.py:  \n`python setup.py install`\n\n## Usage\n### Prerequisites\nInstall [postgresql-hll extension](https://github.com/citusdata/postgresql-hll#install)\n\n#### Creating hll extension\nIf your user has super-admin privileges you can create Hll extension using migrations.\nIf you use django 1.10+ you can use `django_pg_hll.migrations.HllExtension` in your migration file.\nIf you have older version you can use the following:\n```python\nmigrations.RunSQL('CREATE EXTENSION IF NOT EXISTS hll;', reverse_sql='DROP EXTENSION hll;')\n```\n\n### Creating table with hll field\n* Add HllField to your model:\n  ```python\n  from django.db import models\n  from django_pg_hll import HllField\n  \n  class MyModel(models.Model):\n      hll = HllField()\n  ```\n* Call [makemigrations](https://docs.djangoproject.com/en/2.1/ref/django-admin/#django-admin-makemigrations) to create a migration\n* Call [migrate](https://docs.djangoproject.com/en/2.1/ref/django-admin/#django-admin-migrate) to apply migration.\n\n### Hll values\nIn order to create and update Hll this library introduces a set of functions \n(corresponding to [postgres-hll hash functions](https://github.com/citusdata/postgresql-hll#hashing)),\n to hash values:\n```python\nfrom django_pg_hll import HllField\n\n# Empty hll\nHllEmpty()\n\n# Empty hll with custom configuration parameters\n# hll_empty([log2m[, regwidth[, expthresh[, sparseon]]]])\nHllEmpty(13, 2, 1, 0)\n\n# Hash from boolean\nHllBoolean(True)\n\n# Hash from integer with different ranges\nHllSmallInt(1)\nHllInteger(65540)\nHllBigint(2147483650)\n\n# Hash from bytes sequence\nHllByteA(b'test')\n\n# Hash from text\nHllText('test')\n\n# Auto detection of type by postgres-hll\nHllAny('some data')\n```\n\nTo save a value to HllField, you can pass any of these functions as a value:\n```python\nfrom django_pg_hll import HllInteger\n\ninstance = MyModel.objects.create(hll=HllInteger(123))\ninstance.hll |= HllInteger(456)\ninstance.save()\n```\n\n#### Chaining hll values\nHll values can be chained with each other and functions like `django.db.models.F` using `|` operator.  \nThe chaining result will be `django_pg_hll.values.HllSet` instance, which can be also saved to database.  \nYou can also chain simple values and iterables. \nIn this case, library will try to detect appropriate hashing function, based on value.  \n*Important*: Native django functions can't be used as chain start, as `|` operator is redeclared for HllValue instances.  \nExample:\n```python\nfrom django_pg_hll import HllInteger\nfrom django.db.models import F\n\ninstance = MyModel.objects.create(hll=HllInteger(123))\n\n# This works\ninstance.hll |= HllInteger(456)\ninstance.hll = HllInteger(456) | F('hll')\ninstance.hll |= 789  # HllSmallInt will be used\ninstance.hll |= 100500  # HllInteger will be used\ninstance.hll |= True  # HllBoolean will be used\ninstance.hll |= {1, 2, 3, 4, 5}  # set. HllSmallInt will be used.\n\n# This throws exception, as F function doesn't support bitor operator\ninstance.hll = F('hll') | HllInteger(456)\n```\n \n#### Hashing seed\nYou can pass `hash_seed` optional argument to any HllValue, expecting data.  \n[Look here](https://github.com/citusdata/postgresql-hll#the-importance-of-hashing) for more details about hashing.\n\n\n### Filtering QuerySet\nHllField realizes several lookups (returning float value) in order to make filtering easier:\n```python\n# Equality\nMyModel.objects.filter(hll=HllInteger(1)).count()\nMyModel.objects.exclude(hll=HllInteger(2)).count()\n\n# Cardinality\nMyModel.objects.filter(hll__cardinality=3).count()\n\n# Configuration lookups\nMyModel.objects.filter(hll__schema_version=1).count()\nMyModel.objects.filter(hll__type=1).count()\nMyModel.objects.filter(hll__log2m=11).count()\nMyModel.objects.filter(hll__regwidth=2).count()\nMyModel.objects.filter(hll__sparseon=1).count()\n```\n\n### Aggregate functions\nIn order to count aggregations and annotations, library provides aggregate functions:\n* `django_pg_hll.aggregate.Cardinality`\n  Counts cardinality of hll field\n* `django_pg_hll.aggregate.UnionAgg`\n  Aggregates multiple hll fields to one hll.\n* `django_pg_hll.aggregate.UnionAggCardinality`\n  Counts cardinality of hll, combined by UnionAgg function. In fact, it does `Cardinality(UnionAgg(hll))`.  \n  P. s. django doesn't give ability to use function inside function.\n* `django_pg_hll.aggregate.CardinalitySum`\n  Counts sum of multiple rows hll cardinalities. In fact, it does `Sum(Cardinality(hll))`.  \n  P. s. django doesn't give ability to use function inside function.\n```python\nfrom django.db import models\nfrom django_pg_hll.aggregate import Cardinality, UnionAggCardinality, CardinalitySum\nfrom django_pg_hll.fields import HllField\nfrom django_pg_hll.values import HllInteger\n\n\nclass ForeignModel(models.Model):\n    pass\n  \n  \nclass MyModel(models.Model):\n    hll = HllField()\n    fk = models.ForeignKey(ForeignModel)\n    \nMyModel.objects.bulk_create([\n   MyModel(fk=1, hll=HllInteger(1)),\n   MyModel(fk=2, hll=HllInteger(2) | HllInteger(3) | HllInteger(4)),\n   MyModel(fk=3, hll=HllInteger(4))\n])\n\nMyModel.objects.annotate(card=Cardinality('hll_field')).values_list('id', 'card')\n# outputs (1, 1), (2, 3), (3, 1)\n\n# Count cardinality for hll, build by union of all rows\n# 4 element exists in rows with fk=2 and fk=3. After union it gives single result \nForeignModel.objects.annotate(card=UnionAggCardinality('testmodel__hll_field')).values_list('card', flat=True)\n# outputs [4]\n\n# Count sum of cardinalities for each row\nForeignModel.objects.annotate(card=CardinalitySum('testmodel__hll_field')).values_list('card', flat=True)\n# outputs [5]\n```\n\n\n### Configuration aggregate functions\nIn order to get hll field creation parameters, library provides aggregate functions:\n* `django_pg_hll.aggregate.HllSchemaVersion`\n  Returns the schema version value (integer) of the hll  \n  \n* `django_pg_hll.aggregate.HllType`\n  Returns the schema version-specific type value (integer) of the hll. \n  See the [storage specification (v1.0.0)](https://github.com/aggregateknowledge/hll-storage-spec/blob/v1.0.0/STORAGE.md) \n   for more details.\n   \n* `django_pg_hll.aggregate.HllRegWidth`\n  Returns the register bit-width (integer) of the hll  \n  \n* `django_pg_hll.aggregate.HllLog2M`\n  Returns the log-base-2 of the number of registers of the hll. \n  If the hll is not of type FULL or SPARSE it returns the log2m value which would be used if the hll were promoted.\n  \n* `django_pg_hll.aggregate.HllExpThreshold`\n  Returns an array with 2 elements of the specified and effective EXPLICIT promotion cutoffs for the hll.\n  The specified cutoff and the effective cutoff will be the same unless expthresh has been set to 'auto' (-1).\n  In that case the specified value will be -1 and the effective value will be the implementation-dependent number \n   of explicit values that will be stored before an EXPLICIT hll is promoted.\n  \n* `django_pg_hll.aggregate.HllSParseOn`\n  Returns 1 if the SPARSE representation is enabled for the hll, and 0 otherwise  \n \n```python\nfrom django.db import models\nfrom django_pg_hll.aggregate import HllLog2M\nfrom django_pg_hll.fields import HllField\nfrom django_pg_hll.values import HllEmpty, HllInteger\n\n\nclass MyModel(models.Model):\n    default_hll = HllField()\n    configured_hll = HllField(log2m=13, regwidth=2, expthresh=1, sparseon=0)\n    \nMyModel.objects.create(fk=1, hll=HllInteger(1), configured_hll=HllEmpty(13, 2, 1, 0))\n\nMyModel.objects.annotate(log2m=HllLog2M('default_hll'), log2m_conf=HllLog2M('configured_hll')). \\\n    values_list('log2m', 'log2m_conf')\n# outputs (11, 13)\n```\n\n \n### [django-pg-bulk-update](https://github.com/M1hacka/django-pg-bulk-update) integration\nThis library provides a `hll_concat` set function,\nallowing to use hll in `bulk_update` and `bulk_update_or_create` queries.\n```python\nMyModel.objects.bulk_update_or_create([\n    {'id': 100501, 'hll_field': HllInteger(1)},\n    {'id': 100502, 'hll_field': HllInteger(2) | HllInteger(3)}\n    ], set_functions={'hll_field': 'hll_concat'}\n)\n```\n\n\n## Running tests\n### Running in docker\n1. Install [docker and docker-compose](https://www.docker.com/)\n2. Run `docker build . --tag django-pg-hll` in project directory\n3. Run `docker-compose run run_tests` in project directory  \n\n### Running in virtual environment\n1. Install all requirements listed above  \n2. [Create virtual environment](https://docs.python.org/3/tutorial/venv.html)  \n3. Create a superuser named 'test' on your local Postgres instance:\n  ```sql\n  CREATE ROLE test;\n  ALTER ROLE test WITH SUPERUSER;\n  ALTER ROLE test WITH LOGIN;\n  ALTER ROLE test PASSWORD 'test';\n  CREATE DATABASE test OWNER test;\n  ```   \n3. Install requirements   \n  `pip3 install -U -r requirements-test.txt`  \n4. Start tests  \n  `python3 runtests.py`  \n   \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/M1hacka/django-pg-hll",
    "keywords": "",
    "license": "BSD 3-clause \"New\" or \"Revised\" License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pg-hll",
    "package_url": "https://pypi.org/project/django-pg-hll/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pg-hll/",
    "project_urls": {
      "Homepage": "https://github.com/M1hacka/django-pg-hll"
    },
    "release_url": "https://pypi.org/project/django-pg-hll/2.1.0/",
    "requires_dist": [
      "Django (>=1.7)",
      "psycopg2-binary",
      "pytz ; python_version < \"3.3\"",
      "typing ; python_version < \"3.5\""
    ],
    "requires_python": "",
    "summary": "Provides a django wrapper for postgresql-hll library by CitusData",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11937064,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b65bb008e47346b87a4cd5aed39e20debc323ad68b892d76296557e96aaca94c",
        "md5": "99d16995007e0fd34604665b6c749288",
        "sha256": "ad4043cd97b09faea07a3a2f5abc40e071e7c0cd066cff4e8bc2a61155c5dc7e"
      },
      "downloads": -1,
      "filename": "django_pg_hll-2.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "99d16995007e0fd34604665b6c749288",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12646,
      "upload_time": "2021-11-05T14:59:25",
      "upload_time_iso_8601": "2021-11-05T14:59:25.775135Z",
      "url": "https://files.pythonhosted.org/packages/b6/5b/b008e47346b87a4cd5aed39e20debc323ad68b892d76296557e96aaca94c/django_pg_hll-2.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be9b56970f1690bc0b03fc8afecd18bb7898aedda229a1cd1cf72ee84ee69a39",
        "md5": "208c655aa54a8f4c791ba48e88350faa",
        "sha256": "e217690e67f1fa309c1daf4b4768038798b477a5a951b7540758bece0c11c0f2"
      },
      "downloads": -1,
      "filename": "django-pg-hll-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "208c655aa54a8f4c791ba48e88350faa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13371,
      "upload_time": "2021-11-05T14:59:27",
      "upload_time_iso_8601": "2021-11-05T14:59:27.284548Z",
      "url": "https://files.pythonhosted.org/packages/be/9b/56970f1690bc0b03fc8afecd18bb7898aedda229a1cd1cf72ee84ee69a39/django-pg-hll-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}