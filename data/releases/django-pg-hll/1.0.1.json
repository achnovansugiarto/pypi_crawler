{
  "info": {
    "author": "Mikhail Shvein",
    "author_email": "work_shvein_mihail@mail.ru",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# django-pg-hll\nProvides a django wrapper for [postgresql-hll library by CitusData](https://github.com/citusdata/postgresql-hll#the-importance-of-hashing)\n\n## Requirements\n* Python 2.7 or Python 3.4+\n* django >= 1.9\n* pytz\n* six\n* typing\n* psycopg2\n* PostgreSQL 9.4+   \n\n## Installation\nInstall via pip:  \n`pip install django-pg-hll`    \nor via setup.py:  \n`python setup.py install`\n\n## Usage\n### Prerequisites\nInstall [postgresql-hll extension](https://github.com/citusdata/postgresql-hll#install)\n\n### Creating table with hll field\n* Add HllField to your model:\n  ```python\n  from django.db import models\n  from django_pg_hll import HllField\n\n  class MyModel(models.Model):\n      hll = HllField()\n  ```\n* Call [makemigrations](https://docs.djangoproject.com/en/2.1/ref/django-admin/#django-admin-makemigrations) to create a migration\n* Call [migrate](https://docs.djangoproject.com/en/2.1/ref/django-admin/#django-admin-migrate) to apply migration.\n\n### Hll values\nIn order to create and update Hll this library introduces a set of functions \n(corresponding to [postgres-hll hash functions](https://github.com/citusdata/postgresql-hll#hashing)),\n to hash values:\n```python\nfrom django_pg_hll import HllField\n\n# Empty hll\nHllEmpty()\n\n# Hash from boolean\nHllBoolean(True)\n\n# Hash from integer with different ranges\nHllSmallInt(1)\nHllInteger(65540)\nHllBigint(2147483650)\n\n# Hash from bytes sequence\nHllByteA(b'test')\n\n# Hash from text\nHllText('test')\n\n# Auto detection of type by postgres-hll\nHllAny('some data')\n```\n\nTo save a value to HllField, you can pass any of these functions as a value:\n```python\nfrom django_pg_hll import HllInteger\n\ninstance = MyModel.objects.create(hll=HllInteger(123))\ninstance.hll |= HllInteger(456)\ninstance.save()\n```\n\n#### Chaining hll values\nHll values can be chained with each other and functions like `django.db.models.F` using `|` operator.  \nThe chaining result will be `django_pg_hll.values.HllSet` instance, which can be also saved to database.  \nYou can also chain simple values and iterables. \nIn this case, library will try to detect appropriate hashing function, based on value.  \n*Important*: Native django functions can't be used as chain start, as `|` operator is redeclared for HllValue instances.  \nExample:\n```python\nfrom django_pg_hll import HllInteger\nfrom django.db.models import F\n\ninstance = MyModel.objects.create(hll=HllInteger(123))\n\n# This works\ninstance.hll |= HllInteger(456)\ninstance.hll = HllInteger(456) | F('hll')\ninstance.hll |= 789  # HllSmallInt will be used\ninstance.hll |= 100500  # HllInteger will be used\ninstance.hll |= True  # HllBoolean will be used\ninstance.hll |= {1, 2, 3, 4, 5}  # set. HllSmallInt will be used.\n\n# This throws exception, as F function doesn't support bitor operator\ninstance.hll = F('hll') | HllInteger(456)\n```\n\n#### Hashing seed\nYou can pass `hash_seed` optional argument to any HllValue, expecting data.  \n[Look here](https://github.com/citusdata/postgresql-hll#the-importance-of-hashing) for more details about hashing.\n\n\n### Filtering QuerySet\nHllField realizes `cardinality` lookup (returning integer value) in order to make filtering easier:\n```python\nMyModel.objects.filter(hll__cardinality=3).count()\n```\n\n### Aggregate functions\nIn order to count aggregations and annotations, library provides 3 aggregate functions:\n* `django_pg_hll.aggregate.Cardinality`\n  Counts cardinality of hll field\n* `django_pg_hll.aggregate.UnionAgg`\n  Aggregates multiple hll fields to one hll.\n* `django_pg_hll.aggregate.UnionAggCardinality`\n  Counts cardinality of hll, combined by UnionAgg function. In fact, it does `Cardinality(UnionAgg(hll))`.  \n  P. s. django doesn't give ability to use function inside function.\n```python\nfrom django.db import models\nfrom django_pg_hll import HllField, HllInteger\nfrom django_pg_hll.aggregate import Cardinality, UnionAggCardinality\n\n\nclass ForeignModel(models.Model):\n    pass\n\n\nclass MyModel(models.Model):\n    hll = HllField()\n    fk = models.ForeignKey(ForeignModel)\n\nMyModel.objects.bulk_create([\n   MyModel(fk=1, hll=HllInteger(1)),\n   MyModel(fk=2, hll=HllInteger(2) | HllInteger(3)),\n   MyModel(fk=3, hll=HllInteger(4))\n])\n\nMyModel.objects.annotate(card=Cardinality('hll_field')).values_list('id', 'card')\n# outputs (1, 1), (2, 2), (3, 1)\n\n# Count cardinality for hll, built from \nForeignModel.objects.annotate(card=UnionAggCardinality('testmodel__hll_field')).values_list('card', flat=True)\n# outputs [4]\n```\n\n### [django-pg-bulk-update](https://github.com/M1hacka/django-pg-bulk-update) integration\nThis library provides a `hll_concat` set function,\nallowing to use hll in `bulk_update` and `bulk_update_or_create` queries.\n```python\n# !!! Don't forget to import function, or django_pg_bulk_update will not find it\nfrom django_pg_hll.bulk_update import HllConcatFunction\n\nMyModel.objects.bulk_update_or_create([\n    {'id': 100501, 'hll_field': HllInteger(1)},\n    {'id': 100502, 'hll_field': HllInteger(2) | HllInteger(3)}\n    ], set_functions={'hll_field': 'hll_concat'}\n)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/M1hacka/django-pg-hll",
    "keywords": "",
    "license": "BSD 3-clause \"New\" or \"Revised\" License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pg-hll",
    "package_url": "https://pypi.org/project/django-pg-hll/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pg-hll/",
    "project_urls": {
      "Homepage": "https://github.com/M1hacka/django-pg-hll"
    },
    "release_url": "https://pypi.org/project/django-pg-hll/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Provides a django wrapper for postgresql-hll library by CitusData",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11937064,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f948a3b51eaeb3f2082d7a0de21ac8230713aa4605a8c48eb71155743885dd14",
        "md5": "eaa5f7bfed896aa5207af919afe1da42",
        "sha256": "838936adadd9066d8695dd3e7554e6fb8d0ddb9ce4bf5271fb252ffc39908379"
      },
      "downloads": -1,
      "filename": "django_pg_hll-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eaa5f7bfed896aa5207af919afe1da42",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 9349,
      "upload_time": "2019-03-31T18:45:33",
      "upload_time_iso_8601": "2019-03-31T18:45:33.926625Z",
      "url": "https://files.pythonhosted.org/packages/f9/48/a3b51eaeb3f2082d7a0de21ac8230713aa4605a8c48eb71155743885dd14/django_pg_hll-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edba17d88fffa970b74ac6dc4e83fd69d95375e67d8cfe08d99566d01da73b75",
        "md5": "0286fe679d747d3f93411babfee69127",
        "sha256": "b295d5089ce5d85a0cdb505d37376658d60f6181a25a602e31d6aeedc9e8247b"
      },
      "downloads": -1,
      "filename": "django-pg-hll-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0286fe679d747d3f93411babfee69127",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7718,
      "upload_time": "2019-03-31T18:45:35",
      "upload_time_iso_8601": "2019-03-31T18:45:35.679424Z",
      "url": "https://files.pythonhosted.org/packages/ed/ba/17d88fffa970b74ac6dc4e83fd69d95375e67d8cfe08d99566d01da73b75/django-pg-hll-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}