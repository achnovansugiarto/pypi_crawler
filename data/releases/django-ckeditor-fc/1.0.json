{
  "info": {
    "author": "Future Colors (orginal author:Shaun Sephton)",
    "author_email": "shaunsephton@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django CKEditor\n================\n**Django admin CKEditor integration.**\n\nProvides a ``RichTextField`` and ``CKEditorWidget`` utilizing CKEditor with image upload and browsing support included.\n\n.. contents:: Contents\n    :depth: 5\n\nInstallation\n------------\n\n#. Install or add django-ckeditor to your python path.\n\n#. Add ``ckeditor`` to your INSTALLED_APPS setting.\n\n#. Copy the ``media/ckeditor`` directory into any directory within your media root. You can override the location in your settings (see below).\n\n#. Add a CKEDITOR_UPLOAD_PATH setting to the project's ``settings.py`` file. This setting specifies an absolute path to your ckeditor media upload directory. Make sure you have write permissions for the path, i.e.::\n\n    CKEDITOR_UPLOAD_PATH = \"/home/media/media.lawrence.com/uploads\"\n\n#. Add ckeditor url include to the project's ``urls.py`` file::\n    \n    (r'^ckeditor/', include('ckeditor.urls')),    \n\n#. Optionally, set the CKEDITOR_RESTRICT_BY_USER setting to ``True`` in the project's ``settings.py`` file (default ``False``). This restricts access to uploaded images to the uploading user (e.g. each user only sees and uploads their own images). Superusers can still see all images. **NOTE**: This restriction is only enforced within the CKEditor media browser. \n\n#. Optionally, add a CKEDITOR_UPLOAD_PREFIX setting to the project's ``settings.py`` file. This setting specifies a URL prefix to media uploaded through ckeditor, i.e.::\n\n       CKEDITOR_UPLOAD_PREFIX = \"http://media.lawrence.com/media/ckuploads/\n       \n   (If CKEDITOR_UPLOAD_PREFIX is not provided, the media URL will fall back to MEDIA_URL with the difference of MEDIA_ROOT and the uploaded resource's full path and filename appended.)\n\n#. Optionally, add CKEDITOR_CONFIGS setting to the project's ``settings.py`` file. This specifies sets of CKEditor settings that are passed to CKEditor (see CKEditor's `Setting Configurations <http://docs.cksource.com/CKEditor_3.x/Developers_Guide/Setting_Configurations>`_), i.e.::\n\n       CKEDITOR_CONFIGS = {\n           'awesome_ckeditor': {\n               'toolbar': 'Basic',\n           },\n       }\n   \n   The name of the settings can be referenced when instantiating a RichTextField::\n\n       content = RichTextField(config_name='awesome_ckeditor')\n\n   The name of the settings can be referenced when instantiating a CKEditorWidget::\n\n       widget = CKEditorWidget(config_name='awesome_ckeditor')\n   \n   By specifying a set named ``default`` you'll be applying its settings to all RichTextField and CKEditorWidget objects for which ``config_name`` has not been explicitly defined ::\n       \n       CKEDITOR_CONFIGS = {\n           'default': {\n               'toolbar': 'Full',\n               'height': 300,\n               'width': 300,\n           },\n       }\n\nUsage\n-----\n\nField\n~~~~~\nThe quickest way to add rich text editing capabilities to your models is to use the included ``RichTextField`` model field type. A CKEditor widget is rendered as the form field but in all other regards the field behaves as the standard Django ``TextField``. For example::\n\n    from django.db import models\n    from ckeditor.fields import RichTextField\n\n    class Post(models.Model):\n        content = RichTextField()\n\n\nWidget\n~~~~~~\nAlernatively you can use the included ``CKEditorWidget`` as the widget for a formfield. For example::\n\n    from django import forms\n    from django.contrib import admin\n    from ckeditor.widgets import CKEditorWidget\n\n    from post.models import Post\n\n    class PostAdminForm(forms.ModelForm):\n        content = forms.CharField(widget=CKEditorWidget())\n        class Meta:\n            model = Post\n\n    class PostAdmin(admin.ModelAdmin):\n        form = PostAdminForm\n    \n    admin.site.register(Post, PostAdmin)\n\n**NOTE**: If you're using custom views remember to include ckeditor.js in your form's media either through ``{{ form.media }}`` or through a ``<script>`` tag. Admin will do this for you automatically. See `Django's Form Media docs <http://docs.djangoproject.com/en/dev/topics/forms/media/>`_ for more info.\nAUTHORS\n=======\n\nCreated By\n----------\n#. `shaunsephton <http://github.com/shaunsephton>`_\n\nContributors\n------------\n#. `buchuki <http://github.com/buchuki>`_\n#. `chr15m <http://github.com/chr15m>`_\n#. `jeffh <https://github.com/jeffh>`_\n#. `loop0 <http://github.com/loop0>`_\n\nChangelog\n=========\n\n0.0.9\n-----\n\n#. Added ability to configure CKeditor through a CKEDITOR_CONFIGS settings. Thanks `jeffh <https://github.com/jeffh>`_ for the input.\n\n0.0.8\n-----\n\n#. Removed buggy url include check.\n\n0.0.7\n-----\n#. Egg package corrected to exclude testing admin.py and models.py.\n\n0.0.6\n-----\n#. Enforce correct configuration.\n#. Changed upload behavior to separate files into directories by upload date. Thanks `loop0 <http://github.com/loop0>`_ .\n#. Added ability to limit user access to uploaded content (see the CKEDITOR_RESTRICT_BY_USER setting). Thanks `chr15m <http://github.com/chr15m>`_ for the input.\n#. Added initial set of much needed tests.\n#. General cleanup, light refactor.\n\n0.0.5\n-----\n#. csrf_exempt backwards compatability. Thanks `chr15m <http://github.com/chr15m>`_ .\n\n0.0.4\n-----\n#. Include resources, sorry about that.\n\n0.0.3\n-----\n#. More robust PIL import. Thanks `buchuki <http://github.com/buchuki>`_ .\n#. Better CKEDITOR_MEDIA_PREFIX setting error.\n\n0.0.2\n-----\n#. Included README.rst in manifest.\n\n0.0.1\n-----\n#. Added CKEDITOR_UPLOAD_PREFIX setting. Thanks `chr15m <http://github.com/chr15m>`_ for the input.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/futurecolors/django-ckeditor",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-ckeditor-fc",
    "package_url": "https://pypi.org/project/django-ckeditor-fc/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-ckeditor-fc/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/futurecolors/django-ckeditor"
    },
    "release_url": "https://pypi.org/project/django-ckeditor-fc/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django admin CKEditor integration.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 827981,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66ecf066ab428c6e5e5f4c9903aec403a2ebaa5572dc169ad8abf7b41f8b5415",
        "md5": "2fbf23afa9d7ad06835c4593fed1fbb1",
        "sha256": "6ebc7c43ff6a2df5bf0b9456f8c62e0355a56c84fca8e5f5dc6d45a2750c2746"
      },
      "downloads": -1,
      "filename": "django-ckeditor-fc-1.0.zip",
      "has_sig": false,
      "md5_digest": "2fbf23afa9d7ad06835c4593fed1fbb1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3345016,
      "upload_time": "2013-05-08T15:05:17",
      "upload_time_iso_8601": "2013-05-08T15:05:17.067550Z",
      "url": "https://files.pythonhosted.org/packages/66/ec/f066ab428c6e5e5f4c9903aec403a2ebaa5572dc169ad8abf7b41f8b5415/django-ckeditor-fc-1.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}