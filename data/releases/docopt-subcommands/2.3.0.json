{
  "info": {
    "author": "Austin Bingham",
    "author_email": "austin@sixty-north.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Build Status](https://travis-ci.org/abingham/docopt-subcommands.png?branch=master)](https://travis-ci.org/abingham/docopt-subcommands)\n\n# docopt-subcommands\n\nA simple implementation of subcommands for docopt.\n\n`docopt-subcommands` allows you to create subcommand-based programs\nusing [docopt](https://github.com/docopt/docopt). A subcommand-based program is\none in which the main program uses a \"subcommand\" argument to tell it what to\ndo.\n\nThe classic example of such a program is [git](https://git-scm.com/). The `git`\ncommand with no arguments doesn't do much of anything. Instead, it's the first\nargument to `git` - the *subcommand* - that tells it what to actually do. For\nexample:\n\n```\ngit log\n```\n\nwill give you the log for your repository. Likewise:\n\n```\ngit rebase\n```\n\nis the subcommand for rebasing.\n\n`docopt-subcommands` is here to help you create similar kinds of command-line\ntools with `docopt`'.\n\n## Quickstart\n\nThe basic idea behind `docopt-subcommands` is simple:\n\n 1. You provide a separate *handler function* for each subcommand.\n 2. The docstring for each handler function defines the docopt definition for\n    that subcommand.\n 3. You register your handler functions with the names of the subcommands which\n    will invoke them.\n 4. You provide a program name, version string, and (optionally) a top-level\n    documentation string.\n\nThen `docopt-subcommands` does the work of stitching everything together into a\nsubcommand-driven program. Here's how it looks (from the included\n`exampels/basic_example.py`):\n\n```python\n# Basic, most common usage of docopt_subcommands\n\nimport docopt_subcommands as dsc\n\n\n# 1. Use the `command` decorator to add subcommands functions.\n@dsc.command()\ndef foo_handler(args):\n    \"\"\"usage: {program} foo <name>\n\n    Apply foo to a name.\n    \"\"\"\n    print(\"Foo, {}\".format(args['<name>']))\n\n\n@dsc.command()\ndef bar_handler(args):\n    \"\"\"usage: {program} bar <name>\n\n    Apply bar to a name.\n    \"\"\"\n    print(\"Bar, {}\".format(args['<name>']))\n\n\n# 2. Pass a program name and version string to `main` to run a program with the\n# subcommands you defined with the decorators above.\ndsc.main(\n    program='docopt-subcommand-example',\n    version='docopt-subcommand-example v42')\n```\n\nIf you run this program at the command line you'll see that you have a nice,\nsubcommand-based CLI program:\n\n```shell\n$ python basic_example.py\nUsage: docopt-subcommand-example [options] <command> [<args> ...]\n$ python basic_example.py -h\ndocopt-subcommand-example\n\nUsage: docopt-subcommand-example [options] <command> [<args> ...]\n\nOptions:\n  -h --help     Show this screen.\n\nAvailable commands:\n  bar\n  foo\n  help\n\nSee 'docopt-subcommand-example help <command>' for help on specific commands.\n\n$ python basic_example.py foo\nusage: docopt-subcommand-example foo <name>\n\n$ python basic_example.py foo -h\nusage: docopt-subcommand-example foo <name>\n\n    Apply foo to a name.\n\n$ python basic_example.py foo Bubba\nFoo, Bubba\n```\n\nFor more examples, see the `examples` directory.\n\n## Advanced usage\n\nFor most users the basic usage described in \"Quickstart\" should be all you need,\nbut some users will need more control of `docopt_subcommands`. The\n`docopt_subcommands.main()` that we used earlier is really just a convenience\nlayer on top of the real workhorse, `docopt_subcommands.Subcommands`. You can\ninstantiate this class directly, bypassing `main()`, and interact with it as you\nneed before actually invoke command-line processing.\n\nFor the most part, the arguments to the `Subcommands` initializer are very\nsimilar to those to `main()`. This reflects the fact that `main()` really just\ninstantiates a `Subcommands` instance (if you don't provide one), populates it\nwith commands, and calls it with the command line arguments. You can do all of\nthese steps yourself if you need to.\n\nAs an example, here's what the basic example above looks like if you construct a\n`Subcommands` instance directly.:\n\n```python\nimport docopt_subcommands as dsc\nimport sys\n\nsc = dsc.Subcommands(\n    program='docopt-subcommand-example',\n    version='docopt-subcommand-example v42')\n\n@sc.command('foo')\ndef foo_handler(args):\n    \"\"\"usage: {program} {command} <name>\n\n    Apply foo to a name.\n    \"\"\"\n    print(\"Foo, {}\".format(args['<name>']))\n\n\n@sc.command('bar')\ndef bar_handler(args):\n    \"\"\"usage: {program} {command} <name>\n\n    Apply bar to a name.\n    \"\"\"\n    print(\"Bar, {}\".format(args['<name>']))\n\nsc(sys.argv[1:])\n```\n\nAs you can see, it's not substantially different from the basic example.\n`main()` primarily just adds a layer of convenience - mostly by choosing\nreasonable default values for some things - that you lose with this approach.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abingham/docopt-subcommands",
    "keywords": "command-line docopt",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docopt-subcommands",
    "package_url": "https://pypi.org/project/docopt-subcommands/",
    "platform": "",
    "project_url": "https://pypi.org/project/docopt-subcommands/",
    "project_urls": {
      "Homepage": "https://github.com/abingham/docopt-subcommands"
    },
    "release_url": "https://pypi.org/project/docopt-subcommands/2.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "create subcommand-based CLI programs with docopt",
    "version": "2.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5437835,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c58333a58071038f4612ae9dab58340485d15ed4ba9d19740622808fe522f7d4",
        "md5": "b11b7f3b3b0be21aa6abb7675748602d",
        "sha256": "de73a3ae454eb9c69f2cda3288d647d3b37bbf8441a63f00183b00925cabc986"
      },
      "downloads": -1,
      "filename": "docopt_subcommands-2.3.0-py2.7.egg",
      "has_sig": false,
      "md5_digest": "b11b7f3b3b0be21aa6abb7675748602d",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 9828,
      "upload_time": "2017-07-17T12:53:51",
      "upload_time_iso_8601": "2017-07-17T12:53:51.412430Z",
      "url": "https://files.pythonhosted.org/packages/c5/83/33a58071038f4612ae9dab58340485d15ed4ba9d19740622808fe522f7d4/docopt_subcommands-2.3.0-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ca1e9f905b385a06aab7cb67d876da8084633ca6de98c55acfc9dae62febc5e",
        "md5": "764ce44ec5916d144336465a9756b38b",
        "sha256": "829b81d15dece1257f47a993ae3deaa5b725be9ee9813936bed55fd795c97780"
      },
      "downloads": -1,
      "filename": "docopt_subcommands-2.3.0-py3.6.egg",
      "has_sig": false,
      "md5_digest": "764ce44ec5916d144336465a9756b38b",
      "packagetype": "bdist_egg",
      "python_version": "3.6",
      "requires_python": null,
      "size": 9909,
      "upload_time": "2017-07-17T12:53:43",
      "upload_time_iso_8601": "2017-07-17T12:53:43.954151Z",
      "url": "https://files.pythonhosted.org/packages/9c/a1/e9f905b385a06aab7cb67d876da8084633ca6de98c55acfc9dae62febc5e/docopt_subcommands-2.3.0-py3.6.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5191e8cc7859ff376a36e48ed0c6d1f9ad98be515e2af27ba6107bb1c9eb70d3",
        "md5": "45adec49b2a1ba79619b269a4537c218",
        "sha256": "f7b9b97ef24995119602463a373b9e12b69665c71e3fe6feea7cbacba4361895"
      },
      "downloads": -1,
      "filename": "docopt_subcommands-2.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "45adec49b2a1ba79619b269a4537c218",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "requires_python": null,
      "size": 8649,
      "upload_time": "2017-07-18T13:01:11",
      "upload_time_iso_8601": "2017-07-18T13:01:11.590134Z",
      "url": "https://files.pythonhosted.org/packages/51/91/e8cc7859ff376a36e48ed0c6d1f9ad98be515e2af27ba6107bb1c9eb70d3/docopt_subcommands-2.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2b9b4bc08f7d462fbf7616ccc91c7df6130276e4abf6a4da3d07e64d524243c",
        "md5": "f2a14737aaaa4c1f899807b647a8e9a1",
        "sha256": "9349f3908f6e5547f485456fa35d3f579c2f63386c4fa0e55930fbef4bd4c7c7"
      },
      "downloads": -1,
      "filename": "docopt_subcommands-2.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f2a14737aaaa4c1f899807b647a8e9a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7214,
      "upload_time": "2017-09-23T07:14:44",
      "upload_time_iso_8601": "2017-09-23T07:14:44.557987Z",
      "url": "https://files.pythonhosted.org/packages/b2/b9/b4bc08f7d462fbf7616ccc91c7df6130276e4abf6a4da3d07e64d524243c/docopt_subcommands-2.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}