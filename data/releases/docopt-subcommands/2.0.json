{
  "info": {
    "author": "Austin Bingham",
    "author_email": "austin@sixty-north.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# docopt-subcommands\n\nA simple implementation of subcommands for docopt.\n\n`docopt-subcommands` allows you to create subcommand-based programs\nusing [docopt](https://github.com/docopt/docopt). A subcommand-based program is\none in which the main program a \"subcommand\" argument to tell it what to do.\n\nThe classic example of such a program is [git](https://git-scm.com/). The `git`\ncommand with not arguments doesn't do much of anything. Instead, its the first\nargument to `git` - the *subcommand* - that tells it what to actually do. For\nexample:\n\n```\ngit log\n```\n\nwill give you the log for your repository. Likewise:\n\n```\ngit rebase\n```\n\nis the subcommand for rebasing.\n\n`docopt-subcommands` is here to help you create similar kinds of command-line\ntools.\n\n## Quickstart\n\nThe basic idea behind `docopt-subcommands` is simple:\n\n 1. You provide a separate *handler function* for each subcommand.\n 2. The docstring for each handler function defines the docopt definition for\n    that subcommand.\n 3. You register your handler functions with the names of the subcommands which\n    will invoke them.\n 4. You provide a program name, version string, and (optionally) a top-level\n    documentation string.\n\nThen `docopt-subcommands` does the work of stitching everything together into a\nsubcommand-driven program. Here's how it looks (from the included `basic_example.py`):\n\n```python\n# Basic, most common usage of docopt_subcommands\n\nimport docopt_subcommands as dsc\n\n\n# 1. Use the `command` decorator to add subcommands functions.\n@dsc.command('foo')\ndef foo_handler(args):\n    \"\"\"usage: {program} {command} <name>\n\n    Apply foo to a name.\n    \"\"\"\n    print(\"Foo, {}\".format(args['<name>']))\n\n\n@dsc.command('bar')\ndef bar_handler(args):\n    \"\"\"usage: {program} {command} <name>\n\n    Apply bar to a name.\n    \"\"\"\n    print(\"Bar, {}\".format(args['<name>']))\n\n\n# 2. Pass a program name and version string to `main` to run a program with the\n# subcommands you defined with the decorators above.\ndsc.main(\n    program='docopt-subcommand-example',\n    version='docopt-subcommand-example v42')\n```\n\nIf you run this program at the commands line you'll see that you have a nice,\nsubcommand-based CLI program:\n\n```shell\n$ python basic_example.py\nUsage: docopt-subcommand-example [options] <command> [<args> ...]\n$ python basic_example.py -h\ndocopt-subcommand-example\n\nUsage: docopt-subcommand-example [options] <command> [<args> ...]\n\nOptions:\n  -h --help     Show this screen.\n\nAvailable commands:\n  bar\n  foo\n  help\n\nSee 'docopt-subcommand-example help <command>' for help on specific commands.\n\n$ python basic_example.py foo\nusage: docopt-subcommand-example foo <name>\n\n$ python basic_example.py foo -h\nusage: docopt-subcommand-example foo <name>\n\n    Apply foo to a name.\n\n$ python basic_example.py foo Bubba\nFoo, Bubba\n```\n\nFor more examples, see the `examples` directory.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abingham/docopt-subcommands",
    "keywords": "command-line docopt",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docopt-subcommands",
    "package_url": "https://pypi.org/project/docopt-subcommands/",
    "platform": "",
    "project_url": "https://pypi.org/project/docopt-subcommands/",
    "project_urls": {
      "Homepage": "https://github.com/abingham/docopt-subcommands"
    },
    "release_url": "https://pypi.org/project/docopt-subcommands/2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "create subcommand-based CLI programs with docopt",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5437835,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ca5fe9b4c862a637f2693531a2bd08725214d3ee56d9aa50b5a2a69dc98d5ff",
        "md5": "569bdadabb4046f11089981cf9a55aaa",
        "sha256": "575a709ae215c7d80dc67dbc1c50a5f2e094ec4932909722385b51425d54d5f4"
      },
      "downloads": -1,
      "filename": "docopt_subcommands-2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "569bdadabb4046f11089981cf9a55aaa",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "requires_python": null,
      "size": 6911,
      "upload_time": "2017-03-25T15:03:33",
      "upload_time_iso_8601": "2017-03-25T15:03:33.038238Z",
      "url": "https://files.pythonhosted.org/packages/6c/a5/fe9b4c862a637f2693531a2bd08725214d3ee56d9aa50b5a2a69dc98d5ff/docopt_subcommands-2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63190b1e321e3e261f92875ae7fd337fd015e5255f61bf79a6cad63b62f3035e",
        "md5": "e660aaa7b90622f875a17a205522df4e",
        "sha256": "f8000c51a656cc4ec7ca73914e44b6d2b114ed95d4386f0e5085290119b274ef"
      },
      "downloads": -1,
      "filename": "docopt_subcommands-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e660aaa7b90622f875a17a205522df4e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4279,
      "upload_time": "2017-03-25T15:03:30",
      "upload_time_iso_8601": "2017-03-25T15:03:30.922533Z",
      "url": "https://files.pythonhosted.org/packages/63/19/0b1e321e3e261f92875ae7fd337fd015e5255f61bf79a6cad63b62f3035e/docopt_subcommands-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}