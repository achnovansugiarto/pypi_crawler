{
  "info": {
    "author": "Darius BERNARD",
    "author_email": "darius@yupeek.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "==================\ndjango-rest-models\n==================\n\nAllow to query a **django** RestAPI with same interface as the django ORM. **(the targeted API must use django-rest-framework + dynamic-rest libraries)**\nIn fact, it works like any other database engine. You add the rest_models engine in an alternate database and the rest_models databe router.\nThen add APIMeta class to the models querying the API, voil√† !\n\nStable branch\n\n.. image:: https://img.shields.io/travis/Yupeek/django-rest-models/master.svg\n    :target: https://travis-ci.org/Yupeek/django-rest-models\n\n.. image:: https://readthedocs.org/projects/django-rest-models/badge/?version=latest\n    :target: http://django-rest-models.readthedocs.org/en/latest/\n\n.. image:: https://coveralls.io/repos/github/Yupeek/django-rest-models/badge.svg?branch=master\n    :target: https://coveralls.io/github/Yupeek/django-rest-models?branch=master\n\n.. image:: https://img.shields.io/pypi/v/django-rest-models.svg\n    :target: https://pypi.python.org/pypi/django-rest-models\n    :alt: Latest PyPI version\n\n.. image:: https://requires.io/github/Yupeek/django-rest-models/requirements.svg?branch=master\n     :target: https://requires.io/github/Yupeek/django-rest-models/requirements/?branch=master\n     :alt: Requirements Status\n\nDevelopment status\n\n.. image:: https://img.shields.io/travis/Yupeek/django-rest-models/develop.svg\n    :target: https://travis-ci.org/Yupeek/django-rest-models\n\n.. image:: https://coveralls.io/repos/github/Yupeek/django-rest-models/badge.svg?branch=develop\n    :target: https://coveralls.io/github/Yupeek/django-rest-models?branch=develop\n\n.. image:: https://requires.io/github/Yupeek/django-rest-models/requirements.svg?branch=develop\n     :target: https://requires.io/github/Yupeek/django-rest-models/requirements/?branch=develop\n     :alt: Requirements Status\n\n\nInstallation\n------------\n\n1. Install using pip:\n\n   ``pip install django-rest-models``\n\n2. Alternatively, you can download or clone this repo and install with :\n\n    ``pip install -e .``.\n\nRequirements\n------------\n\nThis database wrapper work with\n\n- python3.5, 3.6\n- django 2.0, 2.1, 2.2\n\nOn the api, this is tested against\n\n- django-rest-framework 3.7, 3.8, 3.9, 3.10, 3.11\n- dynamic-rest 1.9\n\n\nExamples\n--------\n\nsettings.py:\n\n.. code-block:: python\n\n    DATABASES = {\n        'default': {\n            ...\n        },\n        'api': {\n            'ENGINE': 'rest_models.backend',\n            'NAME': 'https://requestb.in/',\n            'USER': 'userapi',\n            'PASSWORD': 'passwordapi',\n            'AUTH': 'rest_models.backend.auth.BasicAuth',\n        },\n    }\n\n    DATABASE_ROUTERS = [\n        'rest_models.router.RestModelRouter',\n    ]\n\n\nmodels.py:\n\n.. code-block:: python\n\n    class MyModel(models.Model):\n        field = models.IntegerField()\n        ...\n\n        class Meta:\n            # basic django meta Stuff\n            verbose_name = 'my model'\n\n        # the only customisation that make this model special\n        class APIMeta:\n            pass\n\n\n    class MyOtherModel(models.Model):\n        other_field = models.IntegerField()\n        first_model = models.ForeignKey(MyModel, db_column='mymodel')\n        ...\n\n        class Meta:\n            # basic django meta Stuff\n            verbose_name = 'my other model'\n\n        # the only customisation that make this model special\n        class APIMeta:\n            pass\n\n\n\nTargeted API requirements\n-------------------------\n\nTo allow this database adapter to work like a relational one, the targeted API must respect some requirements :\n\n- dynamic-rest installed and all serializers/views must respectively inherit from Dynamic* (DynamicModelSerializer, etc...)\n\nEach API serializer must :\n\n- Provide the id field\n- Provide the related field (ManyToMany and ForeignKey on Models) as DynamicRelationField\n- Provide the reverse related field. We must, for each ForeignKey and ManyToMany, add a field on the related model's\n  serializer.\n\n.. code-block:: python\n\n    class MenuSerializer(DynamicModelSerializer):\n        pizzas = DynamicRelationField('PizzaSerializer', many=True)     # Menu.pizza = ManyToMany\n\n        class Meta:\n            model = Menu\n            name = 'menu'\n            fields = ('id', 'code', 'name', 'pizzas')\n            deferred_fields = ('pizza_set', )\n\n\n    class PizzaSerializer(DynamicModelSerializer):\n\n        toppings = DynamicRelationField(ToppingSerializer, many=True)\n        menu = DynamicRelationField(MenuSerializer)                     # Add this because Menu.pizza = ManyToMany\n\n        class Meta:\n            model = Pizza\n            name = 'pizza'\n            fields = ('id', 'name', 'price', 'from_date', 'to_date', 'toppings', 'menu')\n\ndjango-rest-models provide a way to check the consistency of the api with the local models via the django check framework.\nAt each startup, it will query the api with OPTIONS to check if the local models match the remote serializers.\n\n\nCaveats\n-------\n\nSince this is not a real relational database, all feature cannot be implemented. Some limitations are inherited by\ndynamic-rest filtering system too.\n\n- Aggregations : is not implemented on the api endpoint, maybe in future releases\n- Complex filtering using OR : all filter passed to dynamic-rest is ANDed together, so no OR is possible\n- Negated AND in filtering: a negated AND give a OR, so previous limitation apply\n- Negated OR in filtering: since the compitation of nested filter is complexe and error prone, we disable all OR. in\n  fact, only some nested of AND is accepted. only the final value of the Q() object can be negated\n\n    for short, you **CANNOT** :\n\n.. code-block:: python\n\n\n        Pizza.objects.aggregate()\n        Pizza.objects.annotate()\n        Pizza.objects.filter(Q(..) | Q(..))\n        Pizza.objects.exclude(Q(..) & Q(..))\n        Pizza.objects.exclude(Q(..) | Q(..))\n\n    but you can :\n\n.. code-block:: python\n\n        Pizza.objects.create\n        Pizza.objects.bulk_create\n        Pizza.objects.update\n        Pizza.objects.bulk_update\n        Pizza.objects.select_related\n        Pizza.objects.prefetch_related\n        Pizza.objects.values\n        Pizza.objects.values_list\n        Pizza.objects.delete\n        Pizza.objects.count()\n        Pizza.objects.filter(..., ..., ...)\n        Pizza.objects.filter(...).filter(...).exclude(...)\n        Pizza.objects.exclude(..., ...).exclude(...)\n        Pizza.objects.filter(Q(..) & Q(..))\n        Pizza.objects.none()\n        pizza.toppings.add(...)\n        pizza.toppings.remove(...)\n        pizza.toppings.set(...)\n        pizza.toppings.clear(...)\n\n.. note::\n\n    prefetch_related work as expected, but the performance is readly bad. As a matter of fact, a ``Pizza.objects.prefetch_related('toppings')``\n    will query the toppings for all pizzas as expected, but the query to recover the pizza will contains the linked pizza in the response.\n    If the database contains a great number of pizzas for the given toppings, the response will contains them all, even if it's\n    useless at first glance, the linked pizza for each topping is mandotary to django to glue topping <=> pizza relationships.\n\n    So, be careful when using prefetch_related.\n\n\n\nSpecific behaviour\n---------------------\n\nSome specific behaviour has been implemented to use the extra feature of a Rest API :\n\n- When inserting, the resulting model is returned by the API. the inserted model is updated with the resulting values.\n  This imply 2 things:\n\n  * If you provided default values for fields in the api, these data will be populated into your created instance if it was ommited.\n  * If the serializer have some computed data, its data will always be used as a replacement of the one you gave to your\n    models. (cf example: Pizza.cost which is the sum of the cost of the toppling. after each save, its value will be updated)\n\n\nSupport\n-------\n\nThis database api support :\n\n- select_related\n- order_by\n- only\n- defer\n- filter\n- exclude\n- delete\n- update\n- create\n- bulk create (with retrive of pk)\n- ManyToManyField\n- ForeignKey*\n\n.. note::\n\n    ForeignKey must have db_column fixed to the name of the reflected field in the api. or all update/create won't use\n    the value if this field\n\n.. note::\n\n\t\tSupport for ForeignKey is only available with models on the same database (api<->api) or (default<->default).\n\t\tIt's not possible to add a ForeignKey/ManyToMany field on a local model related to a remote model (with ApiMeta)\n\nDocumentation\n-------------\n\nThe full documentation is at http://django-rest-models.readthedocs.org/en/latest/.\n\n\nRequirements\n------------\n\n- Python 2.7, 3.5\n- Django >= 1.8\n\nContributions and pull requests are welcome.\n\n\nBugs and requests\n-----------------\n\nIf you found a bug or if you have a request for additional feature, please use the issue tracker on GitHub.\n\nhttps://github.com/Yupeek/django-rest-models/issues\n\nknown limitations\n-----------------\n\nJSONField from postgresql and mysql is supported by django-rest-models, but not by the current dynamic-rest (1.8.1)\nso you can do `MyModel.objects.filter(myjson__mydata__contains='aaa')` but it will work if drest support it\n\nsame for DateField's year,month,day lookup.\n\nLicense\n-------\n\nYou can use this under GPLv3.\n\nAuthor\n------\n\nOriginal author: `Darius BERNARD <https://github.com/ornoone>`_.\nContributor: `PaulWay <https://github.com/PaulWay>`_.\n\n\nThanks\n------\n\nThanks to django for this amazing framework.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Yupeek/django-rest-models",
    "keywords": "django rest models API ORM",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-models",
    "package_url": "https://pypi.org/project/django-rest-models/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-models/",
    "project_urls": {
      "Homepage": "https://github.com/Yupeek/django-rest-models"
    },
    "release_url": "https://pypi.org/project/django-rest-models/1.9.0/",
    "requires_dist": [
      "requests",
      "six",
      "Django (>=2.0)",
      "unidecode"
    ],
    "requires_python": "",
    "summary": "django Fake ORM model that query an RestAPI instead of a database ‚Äî",
    "version": "1.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17176015,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1386991c278ac6ec52b5d809f42b01410e8db3619465052b18454b845a6b3914",
        "md5": "fbac9d02678e21f0717f6930c1e26465",
        "sha256": "435b826875ba52764b49ddb98adf9d994e618f72c0f9ad327684e57777e2821a"
      },
      "downloads": -1,
      "filename": "django_rest_models-1.9.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fbac9d02678e21f0717f6930c1e26465",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 47750,
      "upload_time": "2020-06-18T13:12:51",
      "upload_time_iso_8601": "2020-06-18T13:12:51.969071Z",
      "url": "https://files.pythonhosted.org/packages/13/86/991c278ac6ec52b5d809f42b01410e8db3619465052b18454b845a6b3914/django_rest_models-1.9.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36e9b489353e9d489ca8b7235e8344efa84e3f10cf8889eab6dd092217876437",
        "md5": "7251585c90f9c10f606d4a2ad5a1527e",
        "sha256": "46a360beefa0274efbca6f59d87fc2b8cf596637d0f8877eeb6f38c2c9c9daac"
      },
      "downloads": -1,
      "filename": "django-rest-models-1.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7251585c90f9c10f606d4a2ad5a1527e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 41716,
      "upload_time": "2020-06-18T13:12:53",
      "upload_time_iso_8601": "2020-06-18T13:12:53.488373Z",
      "url": "https://files.pythonhosted.org/packages/36/e9/b489353e9d489ca8b7235e8344efa84e3f10cf8889eab6dd092217876437/django-rest-models-1.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}