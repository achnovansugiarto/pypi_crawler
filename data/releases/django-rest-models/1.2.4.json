{
  "info": {
    "author": "Darius BERNARD",
    "author_email": "darius@yupeek.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "==================\ndjango-rest-models\n==================\n\nallow to query an RestAPI (django-rest-framework + dynamic-rest) with same same interface as the django ORM.\nif fact, it work like any other database engin. you add the rest_models engin in an alternate database, the router, and\nadd a APIMeta class to your models, and let's go.\n\nstable branche\n\n.. image:: https://img.shields.io/travis/Yupeek/django-rest-models/master.svg\n    :target: https://travis-ci.org/Yupeek/django-rest-models\n\n.. image:: https://readthedocs.org/projects/django-rest-models/badge/?version=latest\n    :target: http://django-rest-models.readthedocs.org/en/latest/\n\n.. image:: https://coveralls.io/repos/github/Yupeek/django-rest-models/badge.svg?branch=master\n    :target: https://coveralls.io/github/Yupeek/django-rest-models?branch=master\n\n.. image:: https://img.shields.io/pypi/v/django-rest-models.svg\n    :target: https://pypi.python.org/pypi/django-rest-models\n    :alt: Latest PyPI version\n\n.. image:: https://img.shields.io/pypi/dm/django-rest-models.svg\n    :target: https://pypi.python.org/pypi/django-rest-models\n    :alt: Number of PyPI downloads per month\n\n.. image:: https://requires.io/github/Yupeek/django-rest-models/requirements.svg?branch=master\n     :target: https://requires.io/github/Yupeek/django-rest-models/requirements/?branch=master\n     :alt: Requirements Status\n\ndevelopment status\n\n.. image:: https://img.shields.io/travis/Yupeek/django-rest-models/develop.svg\n    :target: https://travis-ci.org/Yupeek/django-rest-models\n\n.. image:: https://coveralls.io/repos/github/Yupeek/django-rest-models/badge.svg?branch=develop\n    :target: https://coveralls.io/github/Yupeek/django-rest-models?branch=develop\n\n.. image:: https://requires.io/github/Yupeek/django-rest-models/requirements.svg?branch=develop\n     :target: https://requires.io/github/Yupeek/django-rest-models/requirements/?branch=develop\n     :alt: Requirements Status\n\n\nInstallation\n------------\n\n1. Install using pip:\n\n   ``pip install django-rest-models``\n\n2. Alternatively, you can install download or clone this repo and call\n\n    ``pip install -e .``.\n\nrequirements\n------------\n\nthis database wrapper work with\n\n- python 2.7, 3.4, 3.5\n- django 1.8 and 1.9\n\non the api, this is tested against\n\n- django-rest-framework 3.4.0\n- dynamic-rest 1.5.0\n\n\nexemples\n--------\n\nsettings.py:\n\n.. code-block:: python\n\n    DATABASES = {\n        'default': {\n            ...\n        },\n        'api': {\n            'ENGINE': 'rest_models.backend',\n            'NAME': 'https://requestb.in/',\n            'USER': 'userapi',\n            'PASSWORD': 'passwordapi',\n            'AUTH': 'rest_models.backend.auth.BasicAuth',\n        },\n    }\n\n    DATABASE_ROUTERS = [\n        'rest_models.router.RestModelRouter',\n    ]\n\n\nmodels.py:\n\n.. code-block:: python\n\n    class MyModel(models.Model):\n        field = models.IntegerField()\n        ...\n\n        class Meta:\n            # basic django meta Stuff\n            verbose_name = 'my model'\n\n        # the only customisation that make this model special\n        class APIMeta:\n            pass\n\nconstraints\n-----------\n\nto allow this database adaptater to work like a relational one, the API targeted must respect some requirments\n\n- dynamic-rest installed and all the serializers must provide it's functionnality (hinerit from DynamicModelSerializer)\n\neach serializers must :\n\n- provide the id fields\n- provide the related field (ManyToMany and ForeignKey on Models) as DynamicRelationField\n- provide the reverse related field (each ForeignKey and manyToMany add a relation on the other models.\n  the serializer from the other model must provide the DynamicRelationField for these relation\n\n.. code-block:: python\n\n    class MenuSerializer(DynamicModelSerializer):\n        pizzas = DynamicRelationField('PizzaSerializer', many=True)\n\n        class Meta:\n            model = Menu\n            name = 'menu'\n            fields = ('id', 'code', 'name', 'pizzas')\n            deferred_fields = ('pizza_set', )\n\n\n    class PizzaSerializer(DynamicModelSerializer):\n\n        toppings = DynamicRelationField(ToppingSerializer, many=True)\n        menu = DynamicRelationField(MenuSerializer)\n\n        class Meta:\n            model = Pizza\n            name = 'pizza'\n            fields = ('id', 'name', 'price', 'from_date', 'to_date', 'toppings', 'menu')\n\nDjango rest models provide a way to check the consistency of the api with the local models via the django check framework.\nat each startup, it will query the api with OPTIONS to check if the local models match the remote serializers.\n\n\nlimitations\n-----------\n\nsince this is not a real relational database, all feathure cannot be implemented. some limitations are inherited by\ndynamic-rest filtering system too.\n\n- aggregations : is not implemented on the api endpoint. maybe in future release\n- complexe filtering using OR : all filter passed to dynamic-rest is ANDed together, so no OR is possible\n- negated AND in filtering: a negated AND give a OR, so previous limitation apply\n- negated OR in filtering: since the compitation of nested filter is complexe and error prone, we disable all OR. in\n  fact, only some nested of AND is accepted. only the final value of the Q() object can be negated\n\n    for short, you can't :\n\n.. code-block:: python\n\n\n        Pizza.objects.aggregate()\n        Pizza.objects.annotate()\n        Pizza.objects.filter(Q(..) | Q(..))\n        Pizza.objects.exclude(Q(..) & Q(..))\n        Pizza.objects.exclude(Q(..) | Q(..))\n\n    but you can :\n\n.. code-block:: python\n\n        Pizza.objects.create\n        Pizza.objects.bulk_create\n        Pizza.objects.update\n        Pizza.objects.bulk_update\n        Pizza.objects.select_related\n        Pizza.objects.prefetch_related\n        Pizza.objects.values\n        Pizza.objects.values_list\n        Pizza.objects.delete\n        Pizza.objects.count()\n        Pizza.objects.filter(..., ..., ...)\n        Pizza.objects.filter(...).filter(...).exclude(...)\n        Pizza.objects.exclude(..., ...).exclude(...)\n        Pizza.objects.filter(Q(..) & Q(..))\n\nspecific comportments\n---------------------\n\nsome specific behaviour has been implemented to use the extra functionnality of a Rest API :\n\n- whene inserting, the resulting model is returned by the API. the inserted model is updated with the resulting values.\n  this imply 2 behavior:\n\n  * if you provided a default data in the api, this data will be populated into your created instance if it was missed\n  * if the serializer have some cumputed data, its data will always be used as a replacment of the one you gave to your\n    models. (see exemple Pizza.cost which is the sum of the cost of the toppling. after each save, its value will be updated)\n\n\nsupport\n-------\n\nthis database api support :\n\n- select_related\n- order_by\n- only\n- defer\n- filter\n- exclude\n- delete\n- update\n- create\n- bulk create (with retrive of pk)\n- ManyToManyField\n- ForeignKey\n\nDocumentation\n-------------\n\nThe full documentation is at http://django-rest-models.readthedocs.org/en/latest/.\n\n\nRequirements\n------------\n\n- Python 2.7, 3.4, 3.5\n- Django >= 1.8\n\nContributions and pull requests for other Django and Python versions are welcome.\n\n\nBugs and requests\n-----------------\n\nIf you have found a bug or if you have a request for additional functionality, please use the issue tracker on GitHub.\n\nhttps://github.com/Yupeek/django-rest-models/issues\n\n\nLicense\n-------\n\nYou can use this under GPLv3.\n\nAuthor\n------\n\nOriginal author: `Darius BERNARD <https://github.com/ornoone>`_.\n\n\nThanks\n------\n\nThanks to django for this amazing framework.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Yupeek/django-rest-models",
    "keywords": "django rest models API ORM",
    "license": "GNU GENERAL PUBLIC LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-models",
    "package_url": "https://pypi.org/project/django-rest-models/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-models/",
    "project_urls": {
      "Homepage": "https://github.com/Yupeek/django-rest-models"
    },
    "release_url": "https://pypi.org/project/django-rest-models/1.2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "django Fake ORM model that query an RestAPI instead of a database â€” ",
    "version": "1.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17176015,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e73e1e78cadaabc2fc0072bc0508ebeaff3df65eeeeceabd33a22bfd3ce9a2c7",
        "md5": "5eb3ae8b138888c243842591a0b0ebee",
        "sha256": "30bce69c5888ab9af0b24c0834778b5726cabb291d9402f65f83424b47abf72a"
      },
      "downloads": -1,
      "filename": "django_rest_models-1.2.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5eb3ae8b138888c243842591a0b0ebee",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "requires_python": null,
      "size": 41839,
      "upload_time": "2017-01-31T14:41:28",
      "upload_time_iso_8601": "2017-01-31T14:41:28.622082Z",
      "url": "https://files.pythonhosted.org/packages/e7/3e/1e78cadaabc2fc0072bc0508ebeaff3df65eeeeceabd33a22bfd3ce9a2c7/django_rest_models-1.2.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd49bcdd14627a42d1b2010a14301c80aa8aaf7305f69d99e0ec6f19c2dc2029",
        "md5": "a5cbd93f6657c913406a6d1389993931",
        "sha256": "1a3c379245f9d3e0f0b0297ac0a312a0e15f64caa688e8a3521bdda982f477f6"
      },
      "downloads": -1,
      "filename": "django-rest-models-1.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a5cbd93f6657c913406a6d1389993931",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 49880,
      "upload_time": "2017-01-31T14:41:26",
      "upload_time_iso_8601": "2017-01-31T14:41:26.913986Z",
      "url": "https://files.pythonhosted.org/packages/cd/49/bcdd14627a42d1b2010a14301c80aa8aaf7305f69d99e0ec6f19c2dc2029/django-rest-models-1.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}