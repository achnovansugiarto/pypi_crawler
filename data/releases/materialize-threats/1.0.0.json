{
  "info": {
    "author": "Jacob Salassi",
    "author_email": "author@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "```\nmaterialize threats.\n                              '             .           .\n                           o       '   o  .     '   . O\n                        '   .   ' .   _____  '    .      .\n                         .     .   .mMMMMMMMm.  '  o  '   .\n                       '   .     .MMXXXXXXXXXMM.    .   ' \n                      .       . /XX77:::::::77XX\\ .   .   .\n                         o  .  ;X7:::''''''':::7X;   .  '\n                        '    . |::'.:'        '::| .   .  .\n                           .   ;:.:.            :;. o   .\n                        '     . \\'.:            /.    '   .\n                           .     `.':.        .'.  '    .\n                         '   . '  .`-._____.-'   .  . '  .\n                          ' o   '  .   O   .   '  o    '\n                           . ' .  ' . '  ' O   . '  '   '\n                            . .   '    '  .  '   . '  '\n                             . .'..' . ' ' . . '.  . '\n                              `.':.'        ':'.'.'\n                                `\\\\_  |     _//'\n                                  \\(  |\\    )/\n                                  //\\ |_\\  /\\\\\n                                 (/ /\\(\" )/\\ \\)\n                                  \\/\\ (  ) /\\/\n                                     |(  )|\n                                     | \\( \\\n                                     |  )  \\\n                                     |      \\\n                                     |       \\\n                                     |wizardsh`.__,_\n                                     \\_________.-'\nIt's magic.\n```\n# :confetti_ball: Who is this for?\nDevelopers and security practitioners who want to perform 'graph' analysis on data flow diagrams - **using SQL**. \n\n`materialize-threats` ingests draw.io data flow diagrams into a database, represents them like a property graph, then uses SQL to answer questions about them. \n\nToday, we can answer questions like:\n\n* What STRIDE based threat classes :warning: impact which elements and flows in my diagram? \n* What mitigations :lock: & test cases :white_check_mark: should be considered for this diagram? \n\nThese are just a few ideas.\n\n# :moneybag: What's in the box?\n* materialize_threats python module\n    * Parse [draw.io](https://github.com/jgraph/drawio-desktop/releases) data flow diagrams into graph representation (nodes, edges) stored in a RDBMS (sqlite in this demo)\n    * SQL (ORM) implementation of [Rapid Threat Model Prototyping methodology](https://github.com/geoffrey-hill-tutamantic/rapid-threat-model-prototyping-docs) used to generate threat classes\n* (Optional) Minimal Draw.io shape library (dfd-materialize.xml)\n    * Tag trust zones more easily\n* [Gherkin](https://cucumber.io/docs/gherkin/) + [STRIDE](https://en.wikipedia.org/wiki/STRIDE_(security)) test plan/feature file generator\n\n# :wrench: How do I use it?\n## Demo\n![](samples/bookface.gif)\n\n## 1. Creating the diagram\n* Use [draw.io](https://github.com/jgraph/drawio-desktop/releases) with the built-in threat modeling shape set, or use ours\n* Create a data flow diagram using some guidelines\n   * Use processes between entities to describe flows\n      * Example: [Entity: Browser] --> (Process: Login) ----> [Entity: API]\n   * Identify trust zones using the green 'security control label' following the [Rapid Threat Model Prototyping methodology](https://github.com/geoffrey-hill-tutamantic/rapid-threat-model-prototyping-docs) process\n      * untrusted sources (entities) are 0\n      * sinks (data store) are <=9\n      * +1 or -1 in between\n   * Processes inherit trust zones from the upstream entity\n* Save it as a .drawio file in a convenient location\n\n### Example\n![](samples/bookface.png)\n\n## 2. Enumerating threats\n```\ngit clone git@github.com:secmerc/materialize_threats.git\ncd materialize_threats\npip install .\nmaterialize-threats --diagram=/path/to/diagram.drawio\n\n```\n\n## 3. Creating the feature file\nMaterialize threats will create a Gherkin feature file with boilerplate scenarios and mitigations, along with remediation tips. By default, it uses the diagram filename.\n\n![](samples/bookface_featurefile.png)\n\n# :mag_right: Sample data\n```\nmaterialize-threats\n```\n\nMore samples can be found in the /samples directory\n```\nmaterialize-threats --diagram=samples/bookface.drawio\n```\n\n# :warning: Is this production ready?\nNot yet.\n* There are no tests written, but im pretty sure it works. \n* Lots of other python stuff that might horrify you but wont impact functionality that I know of.\n\n# :computer: Development\n```\ngit clone git@github.com:secmerc/materialize_threats.git\ncd materialize_threats\npython3 -m venv ./venv\nsource ./venv/bin/activate\npip install -e .\npytest\n```\n\n# :link: Links\n* https://docs.microsoft.com/en-us/archive/blogs/larryosterman/threat-modeling-again-presenting-the-playsound-threat-model\n* https://github.com/geoffrey-hill-tutamantic/rapid-threat-model-prototyping-docs\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/secmerc/materialize_threats",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "materialize-threats",
    "package_url": "https://pypi.org/project/materialize-threats/",
    "platform": "",
    "project_url": "https://pypi.org/project/materialize-threats/",
    "project_urls": {
      "Homepage": "https://github.com/secmerc/materialize_threats"
    },
    "release_url": "https://pypi.org/project/materialize-threats/1.0.0/",
    "requires_dist": [
      "peewee",
      "gherkin-official",
      "pytest"
    ],
    "requires_python": ">=3.6",
    "summary": "Analyze draw.io data flow diagrams for STRIDE threat classes",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9536796,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25a789ebeb6dc27fd9639d135a8b6982f12458387e62d69401c835c6c2553783",
        "md5": "293ab0b5e3637114280034fc9ef220ae",
        "sha256": "5b275b57657a7997ffe04f0f56edffa1b4ebeb9eb141b8bcf9fbb771e3d47be2"
      },
      "downloads": -1,
      "filename": "materialize_threats-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "293ab0b5e3637114280034fc9ef220ae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 33354,
      "upload_time": "2020-08-10T02:58:45",
      "upload_time_iso_8601": "2020-08-10T02:58:45.886356Z",
      "url": "https://files.pythonhosted.org/packages/25/a7/89ebeb6dc27fd9639d135a8b6982f12458387e62d69401c835c6c2553783/materialize_threats-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba54b5d36886e5015bc1cea49ae01bfac62a2db38f01aea8ee838ea3e08fcfa0",
        "md5": "be3b4361f57116e65ccf0843f42f48fa",
        "sha256": "3f6a5e9e9136e13da48de5d24057fdd0e75efae56c661dbe338834b6db9e518e"
      },
      "downloads": -1,
      "filename": "materialize-threats-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "be3b4361f57116e65ccf0843f42f48fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22524,
      "upload_time": "2020-08-10T02:58:48",
      "upload_time_iso_8601": "2020-08-10T02:58:48.232616Z",
      "url": "https://files.pythonhosted.org/packages/ba/54/b5d36886e5015bc1cea49ae01bfac62a2db38f01aea8ee838ea3e08fcfa0/materialize-threats-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}