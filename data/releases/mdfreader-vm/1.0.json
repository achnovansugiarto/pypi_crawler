{
  "info": {
    "author": "Venu Myneni",
    "author_email": "mailvenumyneni@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": "**MDFREADER**\n**************\n\nAbstract:\n=========\nThis Module imports MDF files (Measured Data Format V3.x and V4.x), typically from INCA (ETAS), CANape or CANOe. It is widely used in automotive industry to record data from ECUs. The main module mdfreader.py inherits from 2 modules (One pair for each MDF version X) : The first one to read the file's blocks descriptions (mdfinfoX) and the second (mdfXreader) to read the raw data from the file. It can optionally run multithreaded. It was built in mind to process efficiently big amount of data in a batch, endurance evaluation files for data mining.\n\nThe structure of the mdf object inheriting from python dict\n===========================================================\nfor each channel: mdf[channelName] below keys exist\n* data: numpy array\n* unit: unit name\n* master : master channel name of channelName\n* masterType : type of master channel (time, angle, distance, etc.)\n* description : description of channel\n* conversion: (exist when reading with convertAfterRead=False) dictionary describing how to convert raw data into meaningful/physical data\n\nmdf object main attribute: masterChannelList, a dict containing a list of channel names per datagroup\n\n\nMdfreader module methods:\n=========================\n* resample channels to one sampling frequency\n* merge files\n* plot one channel, several channels on one graph (list) or several channels on subplots (list of lists)\n\nIt is also possible to export mdf data into:\n* CSV file (excel dialect by default)\n* NetCDF file for a compatibility with Uniplot for instance (needs netcdf4, Scientific.IO)\n* HDF5 (needs h5py)\n* Excel 95 to 2003 (needs xlwt, extremely slooow, be careful about data size)\n* Excel 2007/2010 (needs openpyxl, can be also slow with big files)\n* Matlab .mat (needs hdf5storage)\n* MDF file. It allows you to create, convert or modify data, units, description and save it again.\n* Pandas dataframe(s) (only in command line, not in mdfconverter). One dataframe per raster.\n\nCompatibility:\n==============\nThis code is compatible for python 3.4+\nEvaluated for Windows and Linux platforms (x86 and AMD64)\n\nRequirements:\n=============\nMdfreader is mostly relying on numpy/scipy/matplotlib and lxml for parsing the metadata in mdf version 4.x files\n\nReading channels defined by a formula will require sympy.\n\nCython is strongly advised and allows to compile dataRead module for reading quickly exotic data (not byte aligned or containing hidden bytes) or only a list of channels. However, if cython compilation fails, bitarray becomes required (slower, pure python and maybe not so robust as not so much tested).\n\nExport requirements (optional): scipy, csv, h5py, hdf5storage, xlwt(3), openpyxl, pandas\n\nBlosc for data compression (optional)\n\nMdfconverter graphical user interface requires PyQt (versions 4 or 5)\n\nInstallation:\n=============\npip package existing:\n```shell\npip install mdfreader\n```\nor from source cloned from github from instance\n```shell\npython setup.py develop\n```\n\nGraphical interface: mdfconverter (PyQt4 and PyQt5)\n==================================\nUser interface in PyQt4 or PyQt5 to convert batch of files is part of package. You can launch it with command 'mdfconverter' from shell. By right clicking a channel in the interface list, you can plot it. You can also drag-drop channels between columns to tune import list. Channel list from a .lab text file can be imported. You can optionally merge several files into one and even resample all of them.\n\nOthers:\n=======\nIn the case of big files or lack of memory, you can optionally:\n* Read only a channel list (argument channel_list = ['channel', 'list'], you can get the file channel list without loading data with mdfinfo)\n* Keep raw data as stored in mdf without data type conversion (argument convert_after_read=False). Data will then be converted on the fly by the other functions (plot, export_to..., get_channel_data, etc.) but raw data type will remain as in mdf file along with conversion information.\n* Compress data in memory with blosc with argument compression. Default compression level is 9.\n* Create a mdf dict with its metadata but without data (argument no_data_loading=True). Data will be read from file on demand by mdfreader methods (in general by get_channel_data method)\n\nFor great data visualization, dataPlugin for Veusz (from 1.16, http://home.gna.org/veusz/) is also existing ; please follow instructions from Veusz documentation and plugin file's header.\n\nCommand example in ipython:\n===========================\n```python\n    import mdfreader\n    # loads whole mdf file content in yop mdf object.\n    yop=mdfreader.Mdf('NameOfFile')\n    # you can print file content in ipython with a simple:\n    yop\n    # alternatively, for max speed and smaller memory footprint, read only few channels\n    yop=mdfreader.Mdf('NameOfFile', channel_list=['channel1', 'channel2'], convert_after_read=False)\n    # also possible to keep data compressed for small memory footprint, using Blosc module\n    yop=mdfreader.Mdf('NameOfFile', compression=True)\n    # for interactive file exploration, possible to read the file but not its data to save memory\n    yop=mdfreader.Mdf('NameOfFile', no_data_loading=True) # channel data will be loaded from file if needed\n    # parsing xml metadata from mdf4.x for many channels can take more than just reading data.\n    # You can reduce to minimum metadata reading with below argument (no source information, attachment, etc.) \n    yop=mdfreader.Mdf('NameOfFile', metadata=0)  # 0: full, 2: minimal\n    # only for mdf4.x, you can search for the mdf key of a channel name that can have been recorded by different sources\n    yop.get_channel_name4('channelName', 'source path or name')  # returns list of mdf keys\n    # to yield one channel and keep its content in mdf object\n    yop.get_channel('channelName')\n    # to yield one channel numpy array\n    yop.get_channel_data('channelName')\n    # to get file mdf version\n    yop.MDFVersionNumber\n    # to get file structure or attachments, you can create a mdfinfo instance\n    info=mdfreader.MdfInfo()\n    info.list_channels('NameOfFile') # returns only the list of channels\n    info.read_info('NameOfFile') # complete file structure object\n    yop.info # same class is stored in mdfreader class\n    # to list channels names after reading\n    yop.keys()\n    # to list channels names grouped by raster, below dict mdf attribute contains\n    # pairs (key=masterChannelName : value=listOfChannelNamesForThisMaster)\n    yop.masterChannelList\n    # quick plot or subplot (with lists) of channel(s)\n    yop.plot(['channel1',['channel2','channel3']])\n    # file manipulations\n    yop.resample(0.1)\n    # or\n    yop.resample(master_channel='master3')\n    # keep only data between begin and end\n    yop.cut(begin=10, end=15)\n    # export to other file formats :\n    yop.export_to_csv(sampling=0.01)\n    yop.export_to_NetCDF()\n    yop.export_to_hdf5()\n    yop.export_to_matlab()\n    yop.export_to_xlsx()\n    yop.export_to_parquet()\n    # return pandas dataframe from master channel name\n    yop.return_pandas_dataframe('master_channel_name')\n    # converts data groups into pandas dataframes and keeps it in mdf object\n    yop.convert_to_pandas()\n    # drops all the channels except the one in argument\n    yop.keep_channels({'channel1','channel2','channel3'})\n    # merge 2 files\n    yop2=mdfreader.Mdf('NameOfFile_2')\n    yop.merge_mdf(yop2)\n    # can write mdf file after modifications or creation from scratch\n    # write4 and write3 also allow to convert file versions\n    yop.write('NewNameOfFile')  # write in same version as original file after modifications\n    yop.write4('NameOfFile', compression=True)  # write mdf version 4.1 file, data compressed\n    yop.write3()  # write mdf version 3 file\n    yop.attachments  # to get attachments, embedded or paths to files \n```\n<a href=\"https://scan.coverity.com/projects/ratal-mdfreader\">\n  <img alt=\"Coverity Scan Build Status\"\n       src=\"https://scan.coverity.com/projects/21368/badge.svg\"/>\n</a>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ratal/mdfreader",
    "keywords": "Parser MDF file",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdfreader-vm",
    "package_url": "https://pypi.org/project/mdfreader-vm/",
    "platform": null,
    "project_url": "https://pypi.org/project/mdfreader-vm/",
    "project_urls": {
      "Homepage": "https://github.com/ratal/mdfreader"
    },
    "release_url": "https://pypi.org/project/mdfreader-vm/1.0/",
    "requires_dist": [
      "numpy (>=1.14)",
      "sympy",
      "lxml",
      "bitarray",
      "blosc ; extra == 'compression'",
      "PyQt5 ; extra == 'converter'",
      "hdf5storage ; extra == 'export'",
      "h5py ; extra == 'export'",
      "scipy ; extra == 'export'",
      "xlwt ; extra == 'export'",
      "xlwt3 ; extra == 'export'",
      "openpyxl (>2.0) ; extra == 'export'",
      "pandas ; extra == 'export'",
      "fastparquet ; extra == 'export'",
      "matplotlib ; extra == 'plot'",
      "mpldatacursor ; extra == 'plot'"
    ],
    "requires_python": "",
    "summary": "A Measured Data Format file parser. Fork of mdfreader.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13778270,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87d3499237f2284af0a543f36cf9b001fb59981d66fc92d7fe13c125e3a9b9d4",
        "md5": "d699f03f7ce0ef3cfedc8f2100dfd854",
        "sha256": "96568533b22b7f5f95900ad39b8325dfb01a9a54850c1af91bc2204b7361753a"
      },
      "downloads": -1,
      "filename": "mdfreader_vm-1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d699f03f7ce0ef3cfedc8f2100dfd854",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 117830,
      "upload_time": "2022-05-11T03:40:42",
      "upload_time_iso_8601": "2022-05-11T03:40:42.832324Z",
      "url": "https://files.pythonhosted.org/packages/87/d3/499237f2284af0a543f36cf9b001fb59981d66fc92d7fe13c125e3a9b9d4/mdfreader_vm-1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "784d73ad50bd8e2745893276593225ac6e48b0097e5d6e6c2ffec85b228b11d2",
        "md5": "97f2188bd9ef81a309fc9870c36476fd",
        "sha256": "99ca44f075f180d4346c97b7a27d87278769e3b940e8710bb2310daa7850812f"
      },
      "downloads": -1,
      "filename": "mdfreader_vm-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "97f2188bd9ef81a309fc9870c36476fd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 111091,
      "upload_time": "2022-05-11T03:40:45",
      "upload_time_iso_8601": "2022-05-11T03:40:45.714830Z",
      "url": "https://files.pythonhosted.org/packages/78/4d/73ad50bd8e2745893276593225ac6e48b0097e5d6e6c2ffec85b228b11d2/mdfreader_vm-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}