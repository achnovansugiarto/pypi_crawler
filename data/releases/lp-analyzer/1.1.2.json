{
  "info": {
    "author": "",
    "author_email": "Martin Staadecker <machstg@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Analyze numerical issues in linear programs\r\n\r\nThis tool helps analyze numerical issues in a linear programming\r\nmodel. I started developing it will doing research for the [REAM Research Lab](https://patyhidalgo.github.io/)\r\non the [SWITCH](http://switch-model.org/) Power System Planning\r\nModel.\r\n\r\n\r\n## Usage\r\n\r\n1. `pip install lp-analyzer`\r\n2. `lp-analyzer <path_to_mps_model_file>`\r\n3. The generated output file gives\r\ninsight into the numerical properties of the model. For example, it outputs the range of the coefficients\r\nof each constraint type and each variable type.\r\n\r\nSee instructions below to learn how to generate a [`.mps` file](https://en.wikipedia.org/wiki/MPS_(format)) with Pyomo, Switch or Gurobi.\r\n\r\n## Detailed guide\r\n\r\n### What are numerical issues in linear programming?\r\n\r\n[Linear programming](https://en.wikipedia.org/wiki/Linear_programming) allows us to find optimal solutions\r\nto problems by defining problems as a set of linear equations.\r\n\r\nToday, there exists numerical solvers that can read millions\r\nof these equations and find the optimal solution automatically. \r\nFor example, [Gurobi](https://www.gurobi.com/) is one of these solvers.\r\n\r\nThese millions of equations have numerical coefficients. When these\r\ncoefficients are too large or too small in magnitude (e.g. 10<sup>10</sup>\r\nor 10<sup>-10</sup>), solvers like Gurobi struggle to find\r\nthe optimal solution. We say that we're encountering numerical\r\nissues. This is because such large or small\r\nvalues are challenging to store on a floating-point computer\r\n(see [here](https://www.itu.dk/~sestoft/bachelor/IEEE754_article.pdf) for more info).\r\n\r\nOne solution to this problem is 'scaling' the equations.\r\nBasically if all the numbers are too big we can scale them down\r\nwithout affecting our results.\r\n\r\n### What does this tool do?\r\n\r\nTo scale our model, we need to know how big or small or numbers are\r\n(to know how much we should scale them by). This tool\r\nhelps you figure that out! Analyzing the equations by hand\r\nis challenging since models can get extremely large. This\r\ntool automatically analyzes a linear programming model\r\nand returns the range of different coefficients\r\n to help you determine which coefficients need scaling.\r\n\r\n### How to use this tool?\r\n\r\n#### Install it\r\n\r\nSimply run `pip install lp-analyzer`.\r\n\r\nIf you want to install from the source code, clone the repository to download the code\r\nand run within the directory `pip install .`.\r\n\r\n#### Run it on a `.mps` file\r\n\r\nFor now this tool only reads [`.mps` files](https://en.wikipedia.org/wiki/MPS_(format)). This\r\nfile type stores a linear program model.\r\n\r\nOnce you have your `.mps` file simply run:\r\n\r\n`lp_analyzer path/to/file.mps`\r\n\r\nThe relevant ranges will be automatically be saved to a file! \r\nTo change the output file use `-o output.txt`.\r\n\r\n#### Using with Pyomo\r\n\r\nIf you're trying to use\r\nthis tool with a Pyomo model you'll first need to generate\r\na `.lp` file then a `.mps` file. \r\n\r\nFirst solve the model with `keepfiles=True, symbolic_solver_labels=True`. For example,\r\n\r\n```\r\nresults = solver.solve(model, tee=True, keepfiles=True, symbolic_solver_labels=True)\r\n```\r\n\r\nThis will save an `.lp` file to a temporary directory (as listed in the console output).\r\n\r\n\r\nOnce you have your `.lp` file, you can use the Gurobi\r\nprompt to convert it to an `.mps` file.\r\n\r\nOpen the Gurobi prompt (normally just run `gurobi`),\r\nthen run the following commands. This will create a\r\n`model_file.mps` file which you can use with this tool (see above).\r\n\r\n```\r\ngurobi> m = read(\"model_file.lp\")\r\n...\r\ngurobi> m = m.presolve()\r\n...\r\ngurobi> m.write(\"model_file.mps\")\r\n```\r\nThe `presolve()` step is optional, but will remove\r\nunnecessary equations making your analysis more relevant.\r\nYou can read more about `presolve()` [here](https://www.gurobi.com/documentation/9.1/refman/presolve2.html).\r\n\r\n#### Using with SWITCH\r\n\r\n[SWITCH](https://github.com/switch-model/switch) \r\nis a platform for planning high-renewable power systems\r\nthat uses linear programming.\r\n\r\nThe steps to using this library with SWITCH are nearly identical to that of using it with Pyomo.\r\nThe only difference is you can use the following command to generate the `.lp` file.\r\n\r\n`switch solve --solver gurobi -v --keepfiles --tempdir temp --symbolic-solver-labels`\r\n\r\nThis will save the `.lp` file to the `temp` folder. \r\nTo learn more about what each flag does run `switch solve -h`.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "linear programming,numerical issues",
    "license": "MIT License  Copyright (c) 2021 Martin Staadecker  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lp-analyzer",
    "package_url": "https://pypi.org/project/lp-analyzer/",
    "platform": null,
    "project_url": "https://pypi.org/project/lp-analyzer/",
    "project_urls": {
      "Homepage": "https://github.com/staadecker/lp-analyzer"
    },
    "release_url": "https://pypi.org/project/lp-analyzer/1.1.2/",
    "requires_dist": [
      "tabulate",
      "black ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "build ; extra == 'dev'",
      "twine ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Analyze numerical issues in linear programs",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16309858,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90ca57a586e49460029250fc4f0c476d8f9326710c75a27c3df7958c3f480f97",
        "md5": "1389d7ca6e88d63051b396b91bc35d9f",
        "sha256": "9828ba1738620de8f7e2c795378eba7aa12771eeb934814e276a30d7f6763897"
      },
      "downloads": -1,
      "filename": "lp_analyzer-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1389d7ca6e88d63051b396b91bc35d9f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 12766,
      "upload_time": "2023-01-04T22:47:22",
      "upload_time_iso_8601": "2023-01-04T22:47:22.150640Z",
      "url": "https://files.pythonhosted.org/packages/90/ca/57a586e49460029250fc4f0c476d8f9326710c75a27c3df7958c3f480f97/lp_analyzer-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aabf6bd182a70f13ee6c8a15af3a8c9a92bad2aa76be69e43d7049dd598ba2e5",
        "md5": "52600e2107d25f28d66cbf7b1d5d1031",
        "sha256": "46379eb2041a0aabb070531b9f56696c3c0253cb5fd58eb81ad83424bd6285fc"
      },
      "downloads": -1,
      "filename": "lp-analyzer-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "52600e2107d25f28d66cbf7b1d5d1031",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13020,
      "upload_time": "2023-01-04T22:47:25",
      "upload_time_iso_8601": "2023-01-04T22:47:25.904673Z",
      "url": "https://files.pythonhosted.org/packages/aa/bf/6bd182a70f13ee6c8a15af3a8c9a92bad2aa76be69e43d7049dd598ba2e5/lp-analyzer-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}