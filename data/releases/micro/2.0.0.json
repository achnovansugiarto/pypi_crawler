{
  "info": {
    "author": "Felipe Ortiz, Pablo Ahumada",
    "author_email": "fortizc@gmail.com, pablo.ahumadadiaz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development",
      "Topic :: System"
    ],
    "description": "Micro\n=====\n\n|travis| |coverage| |pypi| |pyversion|\n\nA platform to create microservices available through ``celery`` and\nRest (using ``gunicorn``) APIs.\n\nMicro API\n---------\n\nMicro uses a very simple API to run, list and get information about\nplugins:\n\n-  ``plugins()``: list all available plugins.\n-  ``info(plugin_name)``: show information about a specific plugin.\n-  ``help(plugin_name)``: show the plugin help.\n-  ``run(plugin_name, params)``: execute the given plugin.\n\nTo use this API with Celery you can use the\n`Micro-dev <https://github.com/humu1us/micro-dev>`__ package who provides\ntwo important libraries, the access to the Celery API and the PluginBase\nclass who allow writing Micro plugins. To use it as API Rest you can use\nthe ``requests`` python library.\n\nAPI Celery example (using micro-dev)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> from micro.api.endpoints import Requests\n    >>>\n    >>> req = Requests(BROKER_URL, QUEUE_NAME)\n    >>>\n    >>> req.plugins.delay().wait()\n    '[{\"name\": \"Example Plugin\", \"version\": null, \"description\": \"A very simple example plugin\"}]'\n    >>>\n    >>> req.run.delay(\"Example plugin\", name=\"Micro\").wait()\n    'Hello Micro!!!'\n\nAPI Rest example (using requests)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> import requests\n    >>>\n    >>> url = \"http://localhost:8000/plugins\"\n    >>> response = requests.request(\"GET\", url)\n    >>> print(response.text)\n    [{\"name\": \"Example Plugin\", \"version\": null, \"description\": \"A very simple example plugin\"}]\n    >>>\n    >>> url = \"http://localhost:8000/run/Example%20Plugin\"\n    >>> payload = '{\"name\": \"Micro\"}'\n    >>> headers = {'content-type': 'application/json'}\n    >>> response = requests.request(\"POST\", url, data=payload, headers=headers)\n    >>> print(response.text)\n    Hello Micro!!!\n\nMicro plugins\n-------------\n\nWrite Micro plugins is very simple all that you need is to create\na file called ``interface.py`` this file defines the plugin as follow:\n\n.. code:: python\n\n    from micro.plugin.pluginbase import PluginBase\n    from micro.plugin.pluginbase import PluginDescription\n\n\n    class ExamplePlugin(PluginBase):\n        def __init__(self):\n            print(\"This is an example plugin\")\n\n        # This is the method executed by Micro\n        def run(self, name):\n            return \"Hello \" + name + \"!!!\"\n\n\n    # This description is required by Micro\n    plugin = PluginDescription(\n        instance=ExamplePlugin,\n        name=\"Example Plugin\",\n        version=\"0.1.0\",\n        url=\"https://github.com/humu1us/micro\",\n        author=\"Jhon Doe\",\n        author_email=\"jhon.doe@email.com\",\n        description=\"A very simple example plugin\",\n        long_description=\"This plugin is a very simple example, \"\n                         \"for that reason, we don't have a long description\",\n        plugin_help=\"Params: name type string; A name to greet\"\n    )\n\nEach plugin needs to have its own folder inside of the plugins directory\n(check the section `“Configuring\nMicro” <https://github.com/humu1us/micro#configuring-micro>`__ for\ndetails)\n\nThe plugin directory should look like this:\n\n::\n\n    my_plugindir/\n        example-plugin/\n            interface.py\n            exmple_plugin_core/\n                libs...\n        other-plugin/\n            inteface.py\n            other_plugin_core/\n                libs...\n\n\n**IMPORTANT:** All the plugins must provide its own libraries inside of its own\nnamespace in order to avoid overwritting files. The general recomendation is to\nuse a base directory with the same name of the plugin as the example above shows\n\nInstallation\n------------\n\nPyPi:\n\n::\n\n    $ pip install micro\n\nDevelopment version:\n\n::\n\n    $ git clone git@github.com:humu1us/micro.git\n    $ cd micro\n    $ pip install -e .\n\nor direct from repository:\n\n::\n\n    $ pip install git+ssh://git@github.com/humu1us/micro.git\n\nConfiguration\n-------------\n\nParameters priority\n~~~~~~~~~~~~~~~~~~~\n\nMicro can be configurated through CLI, environment variables, config\nfile and/or default values (in that order).\n\nCommand line (CLI)\n~~~~~~~~~~~~~~~~~~\n\nThese arguments are the highest priority for Micro, so these overwrite\nany other parameters set by any other method. The CLI arguments that can\nbe used are:\n\n::\n\n    $ micro -h\n    usage: micro [--celery] [--gunicorn] [-p PLUGIN_PATH] [-c CONFIG_FILE]\n                 [-b BROKER_URL] [-q QUEUE_NAME] [-H HOSTNAME]\n                 [-w NUM_WORKERS] [-bi BIND] [-ll LOG_LEVEL] [-lp LOG_PATH]\n                 [-cll CELERY_LOG_LEVEL] [-clp CELERY_LOG_PATH]\n                 [-cpp CELERY_PID_PATH] [--default-params] [--version] [-h]\n\n    Micro arguments:\n\n    start services (choose at least one):\n      --celery              plugins available through Celery\n      --gunicorn            plugins available through API Rest\n\n    required arguments:\n      -p PLUGIN_PATH, --plugin-path PLUGIN_PATH\n                            path to the plugins folder\n\n    optional arguments:\n      -c CONFIG_FILE, --config-file CONFIG_FILE\n                            path to the config file\n      -b BROKER_URL, --broker-url BROKER_URL\n                            RabbitMQ URL\n      -q QUEUE_NAME, --queue-name QUEUE_NAME\n                            RabbitMQ queue name\n      -H HOSTNAME, --hostname HOSTNAME\n                            Celery worker's hostname\n      -w NUM_WORKERS, --num-workers NUM_WORKERS\n                            set the Celery worker number\n      -bi BIND, --bind BIND\n                            Set the Gunicorn socket bind, HOST:PORT\n      -ll LOG_LEVEL, --log-level LOG_LEVEL\n                            log level: DEBUG, INFO, WARNING, ERROR, CRITICAL or\n                            FATAL\n      -lp LOG_PATH, --log-path LOG_PATH\n                            log file path\n      -cll CELERY_LOG_LEVEL, --celery-log-level CELERY_LOG_LEVEL\n                            Celery log level: DEBUG, INFO, WARNING, ERROR,\n                            CRITICAL or FATAL\n      -clp CELERY_LOG_PATH, --celery-log-path CELERY_LOG_PATH\n                            Celery log file path\n      -cpp CELERY_PID_PATH, --celery-pid-path CELERY_PID_PATH\n                            Celery PIDs path\n      --default-params      show default parameters\n      --version             show Micro version\n      -h, --help            Show this help message\n\nEnvironment variables\n~~~~~~~~~~~~~~~~~~~~~\n\nThe next priority in parameters for Micro are environment variables. The\nlist of environment variables used are:\n\n::\n\n    MICRO_CELERY             # plugins available through Celery\n    MICRO_GUNICORN           # plugins available through API Rest (Gunicorn)\n    MICRO_PLUGIN_PATH        # path to plugin folder: /path/to/plugin/folder\n    MICRO_CONFIG             # config file location: /path/to/config/config.json\n    MICRO_BROKER_URL         # broker url: ampq://user:pass@host:port//\n    MICRO_QUEUE_NAME         # queue name used\n    MICRO_HOSTNAME           # workers hostname\n    MICRO_NUM_WORKERS        # number of workers to create (integer number)\n    MICRO_GUNICORN_BIND      # Gunicorn socket bind (host:port)\n    MICRO_LOG_LEVEL          # minimun log level to write: DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL\n    MICRO_LOG_PATH           # path to log folder: /path/to/plugin/folder\n    MICRO_CELERY_LOG_LEVEL   # minimun log level to write: DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL\n    MICRO_CELERY_LOG_PATH    # path to Celery log folder: /path/to/celery/log/folder\n    MICRO_CELERY_PID_PATH    # path to Celery pid folder: /path/to/celery/pid/folder\n\nConfig file\n~~~~~~~~~~~\n\nThe lowest priority is the use of a JSON config file. The path to this\nconfig file must be set using ``-c, --config-file`` CLI arguments or\n``MICRO_CONFIG`` environment variable.\n\nConfig file example:\n\n.. code:: js\n\n    {\n        \"plugin_path\": \"/path/to/plugins/folder\",\n        \"broker_url\": \"ampq://user:pass@host:port//\",\n        \"queue_name\": \"micro_queue\",\n        \"hostname\": \"\",\n        \"num_workers\": 2,\n        \"bind\": \"0.0.0.0:5000\",\n        \"log_level\": \"WARNING\",\n    }\n\nA config file skeleton can be created using the following command:\n``$ micro --default-params > config.json``\n\nDefault values\n~~~~~~~~~~~~~~\n\nThe default values are:\n\n::\n\n    $ micro --default-params\n    {\n        \"plugin_path\": \"\",\n        \"broker_url\": \"\",\n        \"queue_name\": \"\",\n        \"hostname\": \"micro\",\n        \"num_workers\": 1,\n        \"bind\": \"0.0.0.0:8000\",\n        \"log_level\": \"INFO\",\n        \"log_path\": \"/var/log/micro\",\n        \"celery_log_level\": \"INFO\",\n        \"celery_log_path\": \"/var/log/micro/celery\",\n        \"celery_pid_path\": \"/var/run/micro/celery\"\n    }\n\nDocker\n------\n\nPull\n~~~~\n\nTo download from Docker Hub:\n\n::\n\n    $ docker pull humu1us/micro:<tag>\n\nTo check the available tags please visit `Micro’s repository on Docker\nHub <https://hub.docker.com/r/humu1us/micro/>`__\n\nBuild\n~~~~~\n\nTo build the container first move to the branch/tag to use and then use\nthe following command:\n\n::\n\n    $ docker build -t micro:<tag> .\n\nRun\n~~~\n\nAll Micro environment variables are available with ``-e`` flag. For\nexample to run Micro with Celery you can do:\n\n::\n\n    $ docker run -d \\\n        -v /path/to/plugins:/etc/micro/plugins \\\n        -v /path/to/log:/var/log/micro \\\n        -e MICRO_BROKER_URL=amqp://guest:guest@my_host:5672// \\\n        -e MICRO_QUEUE_NAME=test \\\n        -e MICRO_HOSTNAME=my_host \\\n        -e MICRO_NUM_WORKERS=2 \\\n        -e MICRO_CELERY=1 \\\n        micro:<tag>\n\n``MICRO_BROKER_URL`` and ``MICRO_QUEUE_NAME`` are the only mandatory\nenvironment variables to set when Celery will be used.\n\nWhen Micro will be run with API Rest you have to bind the Gunicorn port:\n\n::\n\n    $ docker run -d \\\n        -v /path/to/plugins:/etc/micro/plugins \\\n        -v /path/to/log:/var/log/micro \\\n        -e MICRO_BIND=0.0.0.0:5000 \\\n        -e MICRO_NUM_WORKERS=2 \\\n        -e MICRO_GUNICORN=1 \\\n        -p 5000:5000 \\\n        micro:<tag>\n\nTests\n-----\n\nRun all unit tests with:\n\n::\n\n    $ python setup.py test\n\n.. |travis| image:: https://img.shields.io/travis/humu1us/micro.svg?branch=master&style=flat-square\n   :target: https://travis-ci.org/humu1us/micro\n.. |coverage| image:: https://img.shields.io/coveralls/humu1us/micro.svg?style=flat-square\n   :target: https://coveralls.io/github/humu1us/micro\n.. |pypi| image:: https://img.shields.io/pypi/v/Micro.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/Micro/\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/micro.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/Micro/",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/humu1us/micro",
    "keywords": "microservices celery",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Micro",
    "package_url": "https://pypi.org/project/Micro/",
    "platform": "",
    "project_url": "https://pypi.org/project/Micro/",
    "project_urls": {
      "Homepage": "https://github.com/humu1us/micro"
    },
    "release_url": "https://pypi.org/project/Micro/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Celery platform to create microservices",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4948283,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c7f7d5c26da8c1c47861e8e26759d98575d25c29775b37aff6fa9666a8794c3",
        "md5": "0d89a44b0bd3fdfaef1f6344fe656e68",
        "sha256": "ba47593e74bc216ba57bbc028a00a424403271b30d6fc15135020b8ed6198131"
      },
      "downloads": -1,
      "filename": "Micro-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0d89a44b0bd3fdfaef1f6344fe656e68",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16416,
      "upload_time": "2018-07-18T07:21:46",
      "upload_time_iso_8601": "2018-07-18T07:21:46.395817Z",
      "url": "https://files.pythonhosted.org/packages/3c/7f/7d5c26da8c1c47861e8e26759d98575d25c29775b37aff6fa9666a8794c3/Micro-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}