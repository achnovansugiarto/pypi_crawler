{
  "info": {
    "author": "Felipe Ortiz, Pablo Ahumada",
    "author_email": "fortizc@gmail.com, pablo.ahumadadiaz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development",
      "Topic :: System"
    ],
    "description": "Micro\n=====\n\n|travis| |coverage| |pypi|\n\nA platform to create microservices available through Celery API.\n\nMicro API\n---------\n\nMicro uses a very simple API to run, list and get information about\nplugins:\n\n-  ``plugins()``: list all available plugins.\n-  ``info(plugin_name)``: show information about a specific plugin.\n-  ``help(plugin_name)``: show the plugin help.\n-  ``run(plugin_name, params)``: execute the given plugin.\n\nTo use this API you can use the\n`Micro-dev <https://github.com/humu1us/micro-dev>`__ package who provide\ntwo important libraries, the access to the Celery API and the PluginBase\nclass who allow writing Micro plugins.\n\nAPI example\n~~~~~~~~~~~\n\n.. code:: python\n\n    >>> from micro.api.endpoints import plugins, run\n    >>>\n    >>> plugins.delay().wait()\n    {'Example plugin': 'A very simple example plugin'}\n    >>>\n    >>> run.delay(\"Example plugin\", name=\"Micro\").wait()\n    'Hello Micro!!!'\n\nMicro plugins\n-------------\n\nWrite a plugin to Micro is very simple all that you need is create a\nfile named ``interface.py`` this file defines the plugin as follow:\n\n.. code:: python\n\n    from micro.plugin.pluginbase import PluginBase\n    from micro.plugin.pluginbase import PluginDescription\n\n\n    class ExamplePlugin(PluginBase):\n      def __init__(self):\n          print(\"This is an example plugin\")\n\n    # This is the method executed by Micro\n      def run(self, **kwargs):\n          return \"Hello \" + kwargs[\"name\"] + \"!!!\"\n\n    # This description is required by Micro\n    plugin = PluginDescription(\n      name=\"Example Plugin\",\n      author=\"Jhon Doe\",\n      short_desc=\"A very simple example plugin\",\n      long_desc=\"This plugin is a very simple example, \"\n                \"for that reason, we don't have a long description\"\n      help_str=\"Params: name type string; A name to greet\",\n      instance=ExamplePlugin\n    )\n\nEach plugin needs to have its own folder inside of the plugins directory\n(check the section `“Configuring\nMicro” <https://github.com/humu1us/micro#configuring-micro>`__ for\ndetails)\n\nThe plugin directory should look like this:\n\n::\n\n    my_plugindir/\n        example-plugin/\n            interface.py\n            exmple_plugin_core/\n                libs...\n        other-plugin/\n            inteface.py\n            other_plugin_core/\n                libs...\n\n\n**IMPORTANT:** All the plugins must provide its own libraries inside of its own\nnamespace in order to avoid overwritting files. The general recomendation is to\nuse a base directory with the same name of the plugin as the example above shows\n\nInstallation\n------------\n\nPyPi:\n\n::\n\n    $ pip install micro\n\nDevelopment version:\n\n::\n\n    $ git clone git@github.com:humu1us/micro.git\n    $ cd micro\n    $ pip install .\n\nor direct from repository:\n\n::\n\n    $ pip install git+ssh://git@github.com/humu1us/micro.git\n\nConfiguration\n-------------\n\nParameters priority\n~~~~~~~~~~~~~~~~~~~\n\nMicro can be configurated through CLI, environment variables, config\nfile and/or default values (in that order).\n\nCommand line (CLI)\n~~~~~~~~~~~~~~~~~~\n\nThese arguments are the highest priority for Micro. So, these overwrite\nany other parameters set by any other method. The CLI arguments that can\nbe used are:\n\n::\n\n    $ micro -h\n    usage: micro [-h] [-b BROKER_URL] [-q QUEUE_NAME] [-H HOSTNAME]\n                 [-w NUM_WORKERS] [-lp LOG_PATH] [-pp PID_PATH]\n                 [--default-params]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -b BROKER_URL, --broker-url BROKER_URL\n                            Set the broker url\n      -q QUEUE_NAME, --queue-name QUEUE_NAME\n                            Set the Celery queue name\n      -H HOSTNAME, --hostname HOSTNAME\n                            Set the hostname for the workers\n      -w NUM_WORKERS, --num-workers NUM_WORKERS\n                            Set the Celery worker number\n      -lp LOG_PATH, --log-path LOG_PATH\n                            Set the log file path\n      -pp PID_PATH, --pid-path PID_PATH\n                            Set the pid file path\n      --default-params      Show default parameters\n\nEnvironment variables\n~~~~~~~~~~~~~~~~~~~~~\n\nThe next priority in parameters for Micro are environment variables. The\nlist of environment variables used are:\n\n::\n\n    MICRO_CONFIG             # config file location: /path/to/config/config.json\n    MICRO_PLUGIN_PATH        # path to plugin folder: /path/to/plugin/folder\n    MICRO_LOG_PATH           # path to log folder: /path/to/plugin/folder\n    MICRO_LOG_FROM           # minimun log level to write: DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL\n    MICRO_BROKER_URL         # broker url: ampq://user:pass@host:port//\n    MICRO_QUEUE_NAME         # queue name used\n    MICRO_HOSTNAME           # workers hostname\n    MICRO_NUM_WORKERS        # number of workers to create (integer number)\n    MICRO_CELERY_LOG_PATH    # path to Celery log folder: /path/to/celery/log/folder\n    MICRO_CELERY_PID_PATH    # path to Celery pid folder: /path/to/celery/pid/folder\n\n**IMPORTANT:** ``MICRO_CONFIG``, ``MICRO_PLUGIN_PATH``,\n``MICRO_LOG_PATH`` and ``MICRO_LOG_FROM`` variables provide the only way\nto set config file, the plugin folder path, the logger file path and the\nlogger level.\n\nConfig file\n~~~~~~~~~~~\n\nThe lowest priority is the use of a JSON config file. The path to this\nconfig file must be set using ``MICRO_CONFIG`` environment variable.\n\nConfig file example:\n\n.. code:: js\n\n    {\n        \"broker_url\": \"ampq://user:pass@host:port//\",\n        \"queue_name\": \"\",\n        \"hostname\": \"\",\n        \"num_workers\": ,\n        \"log_path\": \"/path/to/log/folder\",\n        \"pid_path\": \"/path/to/pid/folder\"\n    }\n\nA config file skeleton can be created using the following command:\n``$ micro --default-params > config.json``\n\nDefault values\n~~~~~~~~~~~~~~\n\nThe default values are:\n\n::\n\n    $ micro --default-params\n    {\n        \"broker_url\": \"\",\n        \"queue_name\": \"micro_queue\",\n        \"hostname\": \"micro\",\n        \"num_workers\": 1,\n        \"log_path\": \"/var/log\",\n        \"pid_path\": \"/var/run\"\n    }\n\nDocker\n------\n\nPull\n~~~~\n\nTo download from Docker Hub:\n\n::\n\n    $ docker pull humu1us/micro:<tag>\n\nTo check the available tags please visit `Micro’s repository on Docker\nHub <https://hub.docker.com/r/humu1us/micro/>`__\n\nBuild\n~~~~~\n\nTo build the container first move to the branch/tag to use and then use\nthe following command:\n\n::\n\n    $ docker build -t micro:<tag> .\n\nRun\n~~~\n\nRun Micro as container is pretty easy and only needs to define\n``MICRO_BROKER_URL`` to set the amqp host. All Micro environment\nvariables are available with ``-e`` flag, for example:\n\n::\n\n    $ docker run -e MICRO_BROKER_URL=\"amqp://guest:guest@my_host:5672//\" -e MICRO_NUM_WORKERS=5 micro:<tag>\n\nThe ``MICRO_BROKER_URL`` is the only mandatory environment variable to\nuse\n\nTests\n-----\n\nRun all unit tests with:\n\n::\n\n    $ python setup.py test\n\n.. |travis| image:: https://img.shields.io/travis/humu1us/micro.svg?style=flat-square\n   :target: https://travis-ci.org/humu1us/micro\n.. |coverage| image:: https://img.shields.io/coveralls/humu1us/micro.svg?style=flat-square\n   :target: https://coveralls.io/github/humu1us/micro\n.. |pypi| image:: https://img.shields.io/pypi/v/Micro.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/Micro/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/humu1us/micro",
    "keywords": "microservices celery",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Micro",
    "package_url": "https://pypi.org/project/Micro/",
    "platform": "",
    "project_url": "https://pypi.org/project/Micro/",
    "project_urls": {
      "Homepage": "https://github.com/humu1us/micro"
    },
    "release_url": "https://pypi.org/project/Micro/1.0.2/",
    "requires_dist": [
      "celery (<5,>=4)"
    ],
    "requires_python": "",
    "summary": "Celery platform to create microservices",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4948283,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d0c8054c81fda268082ceacd2f04810bffea9f0f7b94a593273723401b5cf00",
        "md5": "2a45bb4e30f381670fcd03ec8d85a829",
        "sha256": "91f5391a180acf9aa9beb529b806bfd827d4c612a6184d589bd1575ba10e4489"
      },
      "downloads": -1,
      "filename": "Micro-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2a45bb4e30f381670fcd03ec8d85a829",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18411,
      "upload_time": "2018-06-08T04:47:54",
      "upload_time_iso_8601": "2018-06-08T04:47:54.987383Z",
      "url": "https://files.pythonhosted.org/packages/1d/0c/8054c81fda268082ceacd2f04810bffea9f0f7b94a593273723401b5cf00/Micro-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}