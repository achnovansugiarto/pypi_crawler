{
  "info": {
    "author": "Felipe Ortiz, Pablo Ahumada",
    "author_email": "fortizc@gmail.com, pablo.ahumadadiaz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development",
      "Topic :: System"
    ],
    "description": "# Micro\nA platform to create microservices available through Celery API.\n\n## Micro API\nMicro uses a very simple API to run, list and get information about plugins:\n\n* `plugins()`: list all available plugins.\n* `info(plugin_name)`: show information about a specific plugin.\n* `help(plugin_name)`: show the plugin help.\n* `run(plugin_name, params)`: execute the given plugin.\n\nTo use this API you can use the [Micro-dev](https://github.com/humu1us/micro-dev) package who provide two important libraries, the access to the Celery API and the PluginBase class who allow writing Micro plugins.\n\n### API example\n\n```python\n>>> from micro.api.endpoints import plugins, run\n>>>\n>>> plugins.delay().wait()\n{'Example plugin': 'A very simple example plugin'}\n>>>\n>>> run.delay(\"Example plugin\", name=\"Micro\").wait()\n'Hello Micro!!!'\n```\n\n\n## Micro plugins\n\nWrite a plugin to Micro is very simple all that you need is create a file named `interface.py` this file defines the plugin as follow:\n\n```python\nfrom micro.plugin.pluginbase import PluginBase\nfrom micro.plugin.pluginbase import PluginDescription\n\n\nclass ExamplePlugin(PluginBase):\n  def __init__(self):\n      print(\"This is an example plugin\")\n\n# This is the method executed by Micro\n  def run(self, **kwargs):\n      return \"Hello \" + kwargs[\"name\"] + \"!!!\"\n\n# This description is required by Micro\nplugin = PluginDescription(\n  name=\"Example Plugin\",\n  author=\"Jhon Doe\",\n  short_desc=\"A very simple example plugin\",\n  long_desc=\"This plugin is a very simple example, \"\n            \"for that reason, we don't have a long description\"\n  help_str=\"Params: name type string; A name to greet\",\n  instance=ExamplePlugin\n)\n```\nEach plugin needs to have its own folder inside of the plugins directory (check the section [\"Configuring Micro\"](https://github.com/humu1us/micro#configuring-micro) for details)\n\nThe plugin directory should look like this:\n\n```\nmy_plugindir/\n\texample-plugin/\n\t\tinterface.py\n\tother-plugin/\n\t\tinteface.py\n```\n\n\n## Installation\nDevelopment version:\n```\n$ git clone git@github.com:humu1us/micro.git\n$ cd micro\n$ pip install .\n```\nor direct from repo \n```\n$ pip install git+ssh://git@github.com/humu1us/micro.git\n```\n\n## Configuration\n### Parameters priority\nMicro can be configurated through CLI, environment variables, config file and/or default values (in that order).\n\n### Command line (CLI)\nThese arguments are the highest priority for Micro. So, these overwrite any other parameters set by any other method. The CLI arguments that can be used are:\n\n```\n$ micro -h\nusage: micro [-h] [-b BROKER_URL] [-q QUEUE_NAME] [-H HOSTNAME]\n             [-w NUM_WORKERS] [-lp LOG_PATH] [-pp PID_PATH]\n             [--default-params]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b BROKER_URL, --broker-url BROKER_URL\n                        Set the broker url\n  -q QUEUE_NAME, --queue-name QUEUE_NAME\n                        Set the Celery queue name\n  -H HOSTNAME, --hostname HOSTNAME\n                        Set the hostname for the workers\n  -w NUM_WORKERS, --num-workers NUM_WORKERS\n                        Set the Celery worker number\n  -lp LOG_PATH, --log-path LOG_PATH\n                        Set the log file path\n  -pp PID_PATH, --pid-path PID_PATH\n                        Set the pid file path\n  --default-params      Show default parameters\n```\n\n### Environment variables\nThe next priority in parameters for Micro are environment variables. The list of environment variables used are:\n\n```\nMICRO_CONFIG             # config file location: /path/to/config/config.json\nMICRO_PLUGIN_PATH        # path to plugin folder: /path/to/plugin/folder\nMICRO_LOG_PATH           # path to log folder: /path/to/plugin/folder\nMICRO_LOG_FROM           # minimun log level to write: DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL\nMICRO_BROKER_URL         # broker url: ampq://user:pass@host:port//\nMICRO_QUEUE_NAME         # queue name used\nMICRO_HOSTNAME           # workers hostname\nMICRO_NUM_WORKERS        # number of workers to create (integer number)\nMICRO_CELERY_LOG_PATH    # path to Celery log folder: /path/to/celery/log/folder\nMICRO_CELERY_PID_PATH    # path to Celery pid folder: /path/to/celery/pid/folder\n```\n\n**IMPORTANT:** `MICRO_CONFIG`, `MICRO_PLUGIN_PATH`, `MICRO_LOG_PATH` and `MICRO_LOG_FROM` variables provide the only way to set config file, the plugin folder path, the logger file path and the logger level.\n\n### Config file\nThe lowest priority is the use of a JSON config file. The path to this config file must be set using `MICRO_CONFIG` environment variable.\n\nConfig file example:\n\n```js\n{\n    \"broker_url\": \"ampq://user:pass@host:port//\",\n    \"queue_name\": \"\",\n    \"hostname\": \"\",\n    \"num_workers\": ,\n    \"log_path\": \"/path/to/log/folder\",\n    \"pid_path\": \"/path/to/pid/folder\"\n}\n```\n\nA config file skeleton can be created using the following command:\n`$ micro --default-params > config.json`\n\n### Default values\nThe default values are:\n\n```\n$ micro --default-params\n{\n    \"broker_url\": \"\",\n    \"queue_name\": \"micro_queue\",\n    \"hostname\": \"micro\",\n    \"num_workers\": 1,\n    \"log_path\": \"/var/log\",\n    \"pid_path\": \"/var/run\"\n}\n```\n\n## Docker\n\n### Build\n\nTo build the container first move to the branch/tag to use and then use the following command\n\n```\n$ docker build -t micro:0.0.1 .\n```\n\nAt this moment `0.0.1` is the recommended version.\n\n### Run\nRun Micro as container is pretty easy and only needs to define `MICRO_BROKER_URL` to set the amqp host. All Micro environment variables are available with `-e` flag, for example:\n\n```\n$ docker run -e MICRO_BROKER_URL=\"amqp://guest:guest@my_host:5672//\" -e MICRO_NUM_WORKERS=5 micro:0.0.1\n```\n\nThe `MICRO_BROKER_URL` is the only mandatory environment variable to use\n\n\n## Tests\n\nRun all unit tests with:\n\n```\n$ python setup.py test\n```\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/humu1us/micro",
    "keywords": "microservices celery",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Micro",
    "package_url": "https://pypi.org/project/Micro/",
    "platform": "",
    "project_url": "https://pypi.org/project/Micro/",
    "project_urls": {
      "Homepage": "https://github.com/humu1us/micro"
    },
    "release_url": "https://pypi.org/project/Micro/1.0.0/",
    "requires_dist": [
      "celery (<5,>=4)"
    ],
    "requires_python": "",
    "summary": "Celery platform to create microservices",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4948283,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "334406dbbd697b8d8c4fefec32bf46eeb96cae971793ce7275dd4e015a975759",
        "md5": "0a1ac59089685701bf948ac91d8b4eb0",
        "sha256": "3c8d61ac3274d2b4638dcb29fba5f56286ae396abdc4d9284e640c187ae534e9"
      },
      "downloads": -1,
      "filename": "Micro-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a1ac59089685701bf948ac91d8b4eb0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17561,
      "upload_time": "2017-12-28T05:54:31",
      "upload_time_iso_8601": "2017-12-28T05:54:31.190283Z",
      "url": "https://files.pythonhosted.org/packages/33/44/06dbbd697b8d8c4fefec32bf46eeb96cae971793ce7275dd4e015a975759/Micro-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53ab735e5ee7c4337ebee22ec67fe658648ae88992dbf72824d144ecae683bc6",
        "md5": "9dcf86400c67019b1f53263906644566",
        "sha256": "253a0f8f0e5fe8bd5246a29baf27adb1d8e95973c9cd532b7afbc51ffee80296"
      },
      "downloads": -1,
      "filename": "Micro-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9dcf86400c67019b1f53263906644566",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10419,
      "upload_time": "2017-12-28T05:54:32",
      "upload_time_iso_8601": "2017-12-28T05:54:32.297495Z",
      "url": "https://files.pythonhosted.org/packages/53/ab/735e5ee7c4337ebee22ec67fe658648ae88992dbf72824d144ecae683bc6/Micro-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}