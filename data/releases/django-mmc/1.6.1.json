{
  "info": {
    "author": "GoTLiuM InSPiRiT",
    "author_email": "gotlium@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "Django-mmc\n==========\n\n.. image:: https://api.travis-ci.org/LPgenerator/django-mmc.png?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/LPgenerator/django-mmc\n.. image:: https://landscape.io/github/LPgenerator/django-mmc/master/landscape.svg\n   :target: https://landscape.io/github/LPgenerator/django-mmc/master\n   :alt: Code Health\n.. image:: https://img.shields.io/badge/python-2.6,2.7,3.4,3.5,pypy,pypy3-blue.svg\n    :alt: Python 2.6, 2.7, 3.4\n    :target: https://pypi.python.org/pypi/django-mmc/\n.. image:: https://img.shields.io/pypi/v/django-mmc.svg\n    :alt: Current version on PyPi\n    :target: https://crate.io/packages/django-mmc/\n.. image:: https://img.shields.io/pypi/dm/django-mmc.svg\n    :alt: Downloads from PyPi\n    :target: https://crate.io/packages/django-mmc/\n.. image:: https://img.shields.io/badge/license-GPLv2-green.svg\n    :target: https://pypi.python.org/pypi/django-mmc/\n    :alt: License\n\n\nWhat's that\n-----------\nApp for monitoring management commands on Django.\n\n\nQuick installation\n------------------\n1. Using pip:\n\n.. code-block:: bash\n\n    $  pip install django-mmc\n\n\n2. Add ``mmc`` application to ``INSTALLED_APPS`` in your settings file\n\n3. Inject management classes before apps will be loaded\n\n.. code-block:: python\n\n    from mmc.mixins import inject_management\n\n    inject_management()\n\n\n4. Sync database (``./manage.py syncdb`` or ``./manage.py migrate``)\n\n5. Enjoy\n\n\nDemo installation\n-----------------\n\n**Docker**\n\n.. code-block:: bash\n\n    $ git clone --depth 1 -b master https://github.com/LPgenerator/django-mmc.git mmc\n    $ cd mmc\n    $ docker build -t mmc .\n    $ docker run -it -d -p 8000:8000 --name mmc mmc\n    $ docker exec -i -t mmc /bin/bash\n    $ cd /mmc_demo/\n\n**Vagrant**\n\n.. code-block:: bash\n\n    $ git clone --depth 1 -b master https://github.com/LPgenerator/django-mmc.git mmc\n    $ cd mmc\n    $ vagrant up --provider virtualbox\n    $ vagrant ssh\n    $ cd /mmc_demo/\n\n\n**OS X/Linux**\n\n.. code-block:: bash\n\n    $ sudo apt-get install -y virtualenvwrapper || brew install pyenv-virtualenvwrapper\n    $ source /usr/share/virtualenvwrapper/virtualenvwrapper.sh || source /usr/local/bin/virtualenvwrapper.sh\n    $ mkvirtualenv django-mmc\n    $ git clone --depth 1 https://github.com/LPgenerator/django-mmc.git\n    $ cd django-mmc\n    $ python setup.py develop\n    $ cd demo\n    $ pip install -r ../requirements/dev.txt\n    $ python manage.py syncdb --noinput\n    $ python manage.py createsuperuser --username admin --email admin@local.host\n    $ python manage.py test_command >& /dev/null\n    $ python manage.py test_command_noargs >& /dev/null\n    $ python manage.py test_command_error >& /dev/null\n    $ python manage.py test_command_killed >& /dev/null\n    $ python manage.py runserver >& /dev/null &\n\n\n\nOpen app in browser (login and password is admin/admin):\n\n.. code-block:: bash\n\n    $ xdg-open http://127.0.0.1:8000/admin/mmc/mmclog/ >& /dev/null || open http://127.0.0.1:8000/admin/mmc/mmclog/ >& /dev/null\n\n\nConfiguration\n-------------\n\n1. Execute the command, and script will be available at http://127.0.0.1:8000/admin/mmc/mmcscript/\n2. Configure script options on script settings http://127.0.0.1:8000/admin/mmc/mmcscript/1/\n3. Add email addresses for errors notification http://127.0.0.1:8000/admin/mmc/mmcemail/\n4. All logs available on Logs page http://127.0.0.1:8000/admin/mmc/mmclog/\n5. If you are using sentry, configure sentry, and all errors will be send into sentry too\n\n\nUsage without inject\n--------------------\n\nIf you want track only specified commands manually without auto-inject,\nfollow to examples below:\n\n.. code-block:: python\n\n    # args\n    from mmc.mixins import BaseCommand\n\n\n    class Command(BaseCommand):\n        def handle(self, *args, **options):\n            print \"OK\"\n\n\n    # noargs\n    from mmc.mixins import NoArgsCommand\n\n\n    class Command(NoArgsCommand):\n        def handle_noargs(self, *args, **options):\n            print \"OK\"\n\n\nWhen you are using auto-inject, you can use ignore flag on Scripts/Hosts settings.\nLogs about execution not be stored, but if you got any error on your commands,\nyou will be notified to emails.\n\n\nCron debug\n----------\nFor debug any messages or some errors on app, run commands with example below:\n\n.. code-block:: bash\n\n    SHELL=/bin/bash\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\n    MAILTO=root@localhost\n    PYTHON_BIN=/home/user/example.com/venv/bin/python\n    MANAGE_PY=/home/user/example.com/www/manage.py\n    LOG_FILE=/var/log/mmc.cron.log\n\n    # Project commands\n    50 2 * * * $PYTHON_BIN $MANAGE_PY clean >> $LOG_FILE 2>&1\n\n\nMulti-instance lock\n-------------------\n\nIf you are using \"One copy\" functionality, and command is run on multiple\nservers, you can use Memcached/Redis lock. Just configure it on settings.py:\n\n.. code-block:: python\n\n    MMC_LOCK_TYPE = 'MemcacheLock'\n\n    MMC_MEMCACHED_CONFIG = {\n        'servers': ['127.0.0.1:11211'], 'debug': 0\n    }\n\n\nManagement commands\n-------------------\n``mmc_cleanup`` - clean logs by days/date\n\n``mmc_notify`` - notify users, when script is killed by OS (that actual for long tasks and for big databases).\nFor detailed check (by pid and name) you can install ``psutil``.\n\n\n\nSentry support\n--------------\nIf you want receive notifications and detailed traceback to Sentry,\nyou can install ``raven``, and configure project dsn settings.\n\n\n\nPublications\n------------\n* `Установка и использование с примерами на русском <http://habrahabr.ru/post/223151/>`_.\n* `Completely installation and usage with examples. Translated by Google <http://translate.google.com/translate?hl=en&sl=ru&tl=en&u=http://habrahabr.ru/post/223151/>`_.\n\n\nScreenshots\n-----------\n.. image:: /screenshots/log_changelist.jpg\n.. image:: /screenshots/log_edit.jpg\n.. image:: /screenshots/script_changelist.jpg\n.. image:: /screenshots/script_edit.jpg\n.. image:: /screenshots/email_changelist.jpg\n.. image:: /screenshots/email_edit.jpg\n.. image:: /screenshots/hosts_changelist.jpg\n\n\nCompatibility:\n-------------\n* Python: 2.6, 2.7, 3.4, 3.5, pypy, pypy3\n* Django: 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LPgenerator/django-mmc",
    "keywords": "django management commands monitoring",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-mmc",
    "package_url": "https://pypi.org/project/django-mmc/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-mmc/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/LPgenerator/django-mmc"
    },
    "release_url": "https://pypi.org/project/django-mmc/1.6.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "App for monitoring management commands on Django.",
    "version": "1.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2358987,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61605725ce89b89520bfa468ed1f5e0e80ac40b83a7995b990855e9e9a4d7452",
        "md5": "b9866681d2059cdce99a62937cde5255",
        "sha256": "bb950e7ef7b31a0cf447d7c8ba6021c1231c86e38d5201aeb85620fe00011a8b"
      },
      "downloads": -1,
      "filename": "django_mmc-1.6.1-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "b9866681d2059cdce99a62937cde5255",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 56906,
      "upload_time": "2016-02-20T19:10:31",
      "upload_time_iso_8601": "2016-02-20T19:10:31.934642Z",
      "url": "https://files.pythonhosted.org/packages/61/60/5725ce89b89520bfa468ed1f5e0e80ac40b83a7995b990855e9e9a4d7452/django_mmc-1.6.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d64e80d1a9692516b5b93fc61f9ffcbe12e192942c35752a4e7169793f2c0670",
        "md5": "296ce8560b4fb60d05de8c6f45234ef3",
        "sha256": "a67810318122ecb39e2d20eb998b67f579868102aa23a47d7f7e6ac4af52ac99"
      },
      "downloads": -1,
      "filename": "django-mmc-1.6.1.tar.gz",
      "has_sig": true,
      "md5_digest": "296ce8560b4fb60d05de8c6f45234ef3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30728,
      "upload_time": "2016-02-20T19:09:59",
      "upload_time_iso_8601": "2016-02-20T19:09:59.531757Z",
      "url": "https://files.pythonhosted.org/packages/d6/4e/80d1a9692516b5b93fc61f9ffcbe12e192942c35752a4e7169793f2c0670/django-mmc-1.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}