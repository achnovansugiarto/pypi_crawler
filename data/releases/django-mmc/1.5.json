{
  "info": {
    "author": "GoTLiuM InSPiRiT",
    "author_email": "gotlium@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Django-mmc\n==========\n\n.. image:: https://api.travis-ci.org/LPgenerator/django-mmc.png?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/LPgenerator/django-mmc\n.. image:: https://pypip.in/v/django-mmc/badge.png\n    :alt: Current version on PyPi\n    :target: https://crate.io/packages/django-mmc/\n.. image:: https://pypip.in/d/django-mmc/badge.png\n    :alt: Downloads from PyPi\n    :target: https://crate.io/packages/django-mmc/\n\n\nWhat's that\n-----------\nApp for monitoring management commands on Django.\n\n\nQuick installation\n------------------\n1. Using pip:\n\n.. code-block:: bash\n\n    $  pip install django-mmc\n\n\n2. Add ``mmc`` application to ``INSTALLED_APPS`` in your settings file\n\n3. Inject management classes before apps will be loaded\n\n.. code-block:: python\n\n    from mmc.mixins import inject_management\n\n    inject_management()\n\n\n4. Sync database (``./manage.py syncdb`` or ``./manage.py migrate``)\n\n5. Enjoy\n\n\nLocal demo installation\n-----------------------\n\n.. code-block:: bash\n\n    $ sudo apt-get install virtualenvwrapper\n    $ mkvirtualenv django-mmc\n    $ git clone https://github.com/LPgenerator/django-mmc.git\n    $ cd django-mmc\n    $ python setup.py develop\n    $ cd demo\n    $ pip install -r ../requirements/dev.txt\n    $ python manage.py syncdb\n    $ python manage.py test_command >& /dev/null\n    $ python manage.py test_command_noargs >& /dev/null\n    $ python manage.py test_command_error >& /dev/null\n    $ python manage.py test_command_killed >& /dev/null\n    $ python manage.py runserver >& /dev/null &\n    $ xdg-open http://127.0.0.1:8000/admin/mmc/mmclog/\n\n\nConfiguration\n-------------\n\n1. Execute the command, and script will be available at http://127.0.0.1:8000/admin/mmc/mmcscript/\n2. Configure script options on script settings http://127.0.0.1:8000/admin/mmc/mmcscript/1/\n3. Add email addresses for errors notification http://127.0.0.1:8000/admin/mmc/mmcemail/\n4. All logs available on Logs page http://127.0.0.1:8000/admin/mmc/mmclog/\n5. If you are using sentry, configure sentry, and all errors will be send into sentry too\n\n\nUsage without inject\n--------------------\n\nIf you want track only specified commands manually without auto-inject,\nfollow to examples below:\n\n.. code-block:: python\n\n    # args\n    from mmc.mixins import BaseCommand\n\n\n    class Command(BaseCommand):\n        def handle(self, *args, **options):\n            print \"OK\"\n\n\n    # noargs\n    from mmc.mixins import NoArgsCommand\n\n\n    class Command(NoArgsCommand):\n        def handle_noargs(self, *args, **options):\n            print \"OK\"\n\n\nWhen you are using auto-inject, you can use ignore flag on Scripts/Hosts settings.\nLogs about execution not be stored, but if you got any error on your commands,\nyou will be notified to emails.\n\n\nCron debug\n----------\nFor debug any messages or some errors on app, run commands with example below:\n\n.. code-block:: bash\n\n    SHELL=/bin/bash\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\n    MAILTO=root@localhost\n    PYTHON_BIN=/home/user/example.com/venv/bin/python\n    MANAGE_PY=/home/user/example.com/www/manage.py\n    LOG_FILE=/var/log/mmc.cron.log\n\n    # Project commands\n    50 2 * * * $PYTHON_BIN $MANAGE_PY clean >> $LOG_FILE 2>&1\n\n\nMulti-instance lock\n-------------------\n\nIf you are using \"One copy\" functionality, and command is run on multiple\nservers, you can use Memcached/Redis lock. Just configure it on settings.py:\n\n.. code-block:: python\n\n    MMC_LOCK_TYPE = 'MemcacheLock'\n\n    MMC_MEMCACHED_CONFIG = {\n        'servers': ['127.0.0.1:11211'], 'debug': 0\n    }\n\n\nManagement commands\n-------------------\n``mmc_cleanup`` - clean logs by days/date\n\n``mmc_notify`` - notify users, when script is killed by OS (that actual for long tasks and for big databases)\n\n\nPublications\n------------\n* `Completely installation and usage on production <http://habrahabr.ru/post/223151/>`_.\n\n\nScreenshots\n-----------\n.. image:: /screenshots/log_changelist.jpg\n.. image:: /screenshots/script_changelist.jpg\n.. image:: /screenshots/email_changelist.jpg\n.. image:: /screenshots/hosts_changelist.jpg\n\n\nCompatibility:\n-------------\n* Python: 2.6, 2.7\n* Django: 1.3, 1.4, 1.5, 1.6, 1.7",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LPgenerator/django-mmc",
    "keywords": "django management commands",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-mmc",
    "package_url": "https://pypi.org/project/django-mmc/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-mmc/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/LPgenerator/django-mmc"
    },
    "release_url": "https://pypi.org/project/django-mmc/1.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "App for monitoring management commands on Django.",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2358987,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96b85337dba3b70e4551018adf203c0712ba92e8830ee367fb8fa69cfe6878e9",
        "md5": "99045588820cff7d55305a5f744697f5",
        "sha256": "e83f79e08fa6a35e2413672e33392793b2cde79e71fc1957f03fabb374f6d794"
      },
      "downloads": -1,
      "filename": "django_mmc-1.5-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "99045588820cff7d55305a5f744697f5",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 34500,
      "upload_time": "2015-03-14T18:36:16",
      "upload_time_iso_8601": "2015-03-14T18:36:16.858510Z",
      "url": "https://files.pythonhosted.org/packages/96/b8/5337dba3b70e4551018adf203c0712ba92e8830ee367fb8fa69cfe6878e9/django_mmc-1.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b694683f9c79ac6cc7790fdea16942510f4c12e360c973d49ffafbcb34a4f83",
        "md5": "95b28e6744daad39aa1883bb6325e382",
        "sha256": "7779376322e399aba872d3b3a8dc6f4ce57de0a09f7280ecc3ce91fdd2e6674c"
      },
      "downloads": -1,
      "filename": "django-mmc-1.5.tar.gz",
      "has_sig": true,
      "md5_digest": "95b28e6744daad39aa1883bb6325e382",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23908,
      "upload_time": "2015-03-14T18:36:06",
      "upload_time_iso_8601": "2015-03-14T18:36:06.538780Z",
      "url": "https://files.pythonhosted.org/packages/1b/69/4683f9c79ac6cc7790fdea16942510f4c12e360c973d49ffafbcb34a4f83/django-mmc-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}