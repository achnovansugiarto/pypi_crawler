{
  "info": {
    "author": "FNNDSC",
    "author_email": "dev@babymri.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "med2image 2.2.0\n==================\n\nQuick Overview\n--------------\n\n-  Convert DICOM or NIfTI to jpg or png\n\nOverview\n--------\n\n``med2image`` is a simple Python3 utility that converts medical image\nformatted files to more visual friendly ones, such as png and jpg.\n\nCurrently, NIfTI and DICOM input formats are understood, while any\ngraphical output type that is supported by matplotlib can be generated.\n\nDependencies\n------------\n\nMake sure that the following dependencies are installed on your host\nsystem (or even better, a python3 virtual env):\n\n-  ``pfmisc`` : (a general miscellaneous module for color support, etc)\n-  ``nibabel`` : (to read NIfTI files)\n-  ``pydicom`` : (to read DICOM files)\n-  ``matplotlib`` : (to save data in various image formats)\n-  ``pillow`` : (to save data in jpg format)\n\nInstallation\n~~~~~~~~~~~~\n\nThe best method of installing this script and all of its dependencies is\nby fetching it from PyPI\n\n.. code:: bash\n\n        pip3 install med2image\n\nShould you get an error about `python3-tk` not installed, simply do (for example on Ubuntu):\n\n.. code:: bash\n\n        sudo apt-get update\n        sudo apt-get install -y python3-tk\n\nHow to Use\n----------\n\n``med2image`` needs the following required arguments to run the application:\n\n- ``-i | --inputFile <inputFile>`` : Input file to convert. Typically a DICOM file or a nifti volume.\n\n- ``-d | --outputDir <outputDir> :`` The directory to contain the converted output image files.\n\n**Example:**\n\n.. code:: bash\n\n    med2image -i vol.nii -d out\n    \nOR\n\n.. code:: bash\n\n    med2image -i file.dcm -d out\n\n**NOTE:**\n\n- The following 2 sections: NIfTI and DICOM explain how to run the ``med2image`` app using different *Command Line Arguments*\n\n- More details about all required and optional *Command Line Arguments* can be found in the last section of this file.\n\nNIfTI\n-----\n**NOTE:** One NIfTI (`.nii`) is one entire volume of multiple slices.\n\nSo, one `.nii` corresponds to multiple `.png` or `.jpg` file (slices)\n\n- The NIfTI input data can be in 2 forms:\n  - 3D : Single `.nii` volume which has multiple slices\n  - 4D : A directory with multiple `.nii` files (volumes)\n- The application understands both types of inputs.\n\nPull NIfTI\n~~~~~~~~~~\n\nThe inputFile should be a NIfTI volume of the format ``.nii``\n\nA sample volume can be found on Github at ``FNNDSC/SAG-anon-nii``. (https://github.com/FNNDSC/SAG-anon-nii.git)\n\n- Clone this repository (``SAG-anon-nii``) to your local computer.\n\n.. code:: bash\n\n    git clone https://github.com/FNNDSC/SAG-anon-nii.git\n\n- This will create a folder called ``SAG-anon-nii`` in the current working directory.\n- This directory will contain a NIfTI volume with the name ``SAG-anon.nii``.\n\nConvert NIfTI\n~~~~~~~~~~~~~\n\n**NOTE:**\n\n- If ``--outputDir (-d)`` is not mentioned, the slice will get created in the current directory.\n- if ``--sliceToConvert`` argument is not specified, then it converts all the slices of the ``.nii`` volume by default.\n\nBoth 3D and 4D NIfTI input data are understood. In the case of 4D NIfTI,\na specific frame (``--frameToConvert``) can be specified in conjunction with a specific slice\nindex. In most cases, only a slice is required since most NIfTI data is\n3D. Furthermore, all slices can be converted, or just the middle one.\n\n- Create a folder called ``nifti-results`` in the current working directory which also contains the input data set ``SAG-anon-nii``\n\n- We will be storing all results in subdirectories within this directory.\n\nAll slices in a volume\n^^^^^^^^^^^^^^^^^^^^^^\n\nTo convert all slices in the input NIfTI volume ``SAG-anon-nii/SAG-anon.nii``, to save\nthe results in a sub-directory called ``all-slices`` within the directory ``nifti-results`` , to use as output the file stem\nname ``sample``, and to save the result in ``jpg`` format, do:\n\n.. code:: bash\n\n    med2image -i SAG-anon-nii/SAG-anon.nii -d nifti-results/all-slices -o sample.jpg -s -1\n\nor equivalently and more verbosely,\n\n.. code:: bash\n\n    med2image --inputFile SAG-anon-nii/SAG-anon.nii         \\\n              --outputDir nifti-results/all-slices          \\\n              --outputFileStem sample  --outputFileType jpg \\\n              --sliceToConvert -1\n\nThis will create the following files in the ``all-slices`` sub-directory within ``nifti-results`` directory\n\n::\n\n    nifti-results/all-slices/sample-slice000.jpg\n    nifti-results/all-slices/sample-slice001.jpg\n    nifti-results/all-slices/sample-slice002.jpg\n    nifti-results/all-slices/sample-slice003.jpg\n    ...\n    nifti-results/all-slices/sample-slice188.jpg\n    nifti-results/all-slices/sample-slice189.jpg\n    nifti-results/all-slices/sample-slice190.jpg\n    nifti-results/all-slices/sample-slice191.jpg\n\nConvert only a single slice\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMostly, you'll probably only want to convert the \"middle\" slice in a\nvolume (for example to generate a representative thumbnail of the\nvolume). To do this, simply specify an ``m`` to ``--sliceToConvert`` (or ``-s m``)\n\n.. code:: bash\n\n    med2image -i SAG-anon-nii/SAG-anon.nii    \\\n              -d nifti-results/middle-slice   \\\n              -o sample --outputFileType jpg  \\\n              --sliceToConvert m\n\nThis will create the following files in the ``middle-slice`` sub-directory within ``nifti-results`` directory.\n\n::\n\n    nifti-results/middle-slice/sample-slice096.jpg\n\nAlternatively a specific slice index can be converted. Use\n\n.. code:: bash\n\n    med2image -i SAG-anon-nii/SAG-anon.nii -d nifti-results/specific-slice -o sample --outputFileType jpg --sliceToConvert 20\n\nto convert only the 20th slice of the volume.\n\nThis will create the following files in the ``specific-slice`` sub-directory within ``nifti-results`` directory.\n\n::\n\n    nifti-results/specific-slice/sample-slice020.jpg\n\n**NOTE:**\n\n- These samples below are run from within the current working directory which contains the ``SAG-anon-nii`` input data set directory.\n\n- If you are running the application from another working directory, make sure you provide the correct path for the ``--inputFile`` and ``--outputDir`` arguments\n\nDICOM\n-----\n\n**NOTE:** One DICOM (`.dcm`) corresponds to one `.png` or `.jpg` file (slice)\n\nPull DICOM\n~~~~~~~~~~\n\nThe ``inputFile`` should be a DICOM file of the format ``.dcm``\n\nA sample directory of ``.dcm`` can be found on Github at ``FNNDSC/SAG-anon``. (https://github.com/FNNDSC/SAG-anon.git)\n\n- Clone this repository (``SAG-anon``) to your local computer.\n\n.. code:: bash\n\n    git clone https://github.com/FNNDSC/SAG-anon.git\n\n- This will create a folder called ``SAG-anon`` in the current working directory.\n- This directory contains multiple DICOM files/slices.\n\nConvert DICOM\n~~~~~~~~~~~~~\n\n**NOTE:**\n\n- If ``--outputDir (-d)`` is not mentioned, the slice will get created in the current directory.\n- if ``--sliceToConvert`` argument is not specified, then it converts all the `.dcm` files in the directory by default.\n\n**NOTE:**\n\n- Create a folder called ``dicom-results`` in the current working directory which also contains the input data set ``SAG-anon``\n\n- We will be storing all results in subdirectories within this directory.\n\nConvert all DICOMS in a directory/series\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo convert all the DICOMS in a directory, simply specifiy a '-1' to the\nsliceIndex:\n\n.. code:: bash\n\n    med2image -i SAG-anon/any-slice-name.dcm   \\\n              -d dicom-results/all-slices      \\\n              -o sample                        \\\n              --outputFileType jpg             \\\n              --sliceToConvert -1\n\nThis will create the following files in the ``all-slices`` sub-directory within ``dicom-results`` directory.\n\n::\n\n    dicom-results/all-slices/sample-slice000.jpg\n    dicom-results/all-slices/sample-slice001.jpg\n    dicom-results/all-slices/sample-slice002.jpg\n    dicom-results/all-slices/sample-slice003.jpg\n    ...\n    dicom-results/all-slices/sample-slice188.jpg\n    dicom-results/all-slices/sample-slice189.jpg\n    dicom-results/all-slices/sample-slice190.jpg\n    dicom-results/all-slices/sample-slice191.jpg\n\n**NOTE:**\n\n- Even though any one ``.dcm`` from the directory is passed to the ``--inputFile`` argument, all the ``.dcm`` files/slices in the ``SAG-anon`` directory will be converted.\n\nConvert a single DICOM file\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n**NOTE:**\n\n- These samples below are run from within the current working directory which contains the ``SAG-anon`` input data set directory.\n\n- If you are running the application from another working directory, make sure you provide the correct path for the ``--inputFile`` and ``--outputDir`` arguments\n\n\nMostly, you'll probably only want to convert the \"middle\" slice in a DICOM directory (for example to generate a representative thumbnail of the directory). To do this, simply specify a `m` to --sliceToConvert (or `-s m`)\n\n.. code:: bash\n\n    med2image -i SAG-anon/slice-name.dcm     \\\n              -d dicom-results/middle-slice  \\\n              -o sample --outputFileType jpg \\\n              --sliceToConvert m\n\nThis will create the following files in the ``middle-slice`` sub-directory within ``dicom-results`` directory.\n\n::\n\n    dicom-results/middle-slice/sample-slice096.jpg\n\n\nAlternatively a specific slice index can be converted. Use\n\n.. code:: bash\n\n    med2image -i SAG-anon/slice-name.dcm       \\\n              -d dicom-results/specific-slice  \\\n              -o sample --outputFileType jpg   \\\n              --sliceToConvert 20\n\nto convert only the 20th slice of the volume.\n\nThis will create the following files in the ``specific-slice`` sub-directory within ``dicom-results`` directory.\n\n::\n\n    dicom-results/specific-slice/sample-slice020.jpg\n\nSpecial Cases\n^^^^^^^^^^^^^\n\nFor DICOM data, the <outputFileStem> can be set to the value of an internal DICOM tag. The tag is specified by preceding the tag name with a percent character '%', so\n\n    ``-o %PatientID``\n\nwill use the DICOM 'PatientID' to name the output file. Note that special characters (like spaces) in the DICOM value are replaced by underscores '_'.\n\n.. code:: bash\n\n    med2image -i SAG-anon/slice-name.dcm    \\\n              -d dicom-results/tags         \\\n              -o %PatientID.jpg -s m\n\nThis will create the following file in the ``tags`` sub-directory within ``dicom-results`` directory.\n\n.. code:: bash\n\n    dicom-results/tags/1449c1d.jpg\n\nMultiple tags can be specified, for example\n\n    ``-o %PatientName%PatientID%ProtocolName``\n\nand the output filename will have each DICOM tag string as\nspecified in order, connected with dashes.\n\n.. code:: bash\n\n    med2image -i SAG-anon/slice-name.dcm                   \\\n              -d dicom-results/tags                        \\\n              -o %PatientName%PatientID%ProtocolName.jpg   \\\n              -s m\n\nThis will create the following file in the ``tags`` sub-directory within ``dicom-results`` directory.\n\n.. code:: bash\n\n    dicom-results/tags/anonymized-1449c1d-SAG_MPRAGE_220_FOV.jpg\n\n\nMultiple Direction Reslicing\n----------------------------\n\nBy default, only the slice (or slices) in the acquisition direction are\nconverted. However, by passing a `--reslice` to the script, all dimensions are\nconverted. Since the script does not know the anatomical orientation of\nthe image, the directions are simply labeled x, y, and z.\n\nThe z direction is the original acquistion (slice) direction, while x\nand y correspond to planes normal to the row and column directions.\n\nConverted images are stored in subdirectories labeled x, y, and z.\n\n**NOTE:** In case of DICOM images, the `--reslice` option will work only if all slices in the directory are converted which means: ``--sliceToConvert -1``\n\nCommand Line Arguments\n----------------------\n\n::\n\n        -i|--inputFile <inputFile>\n        Input file to convert. Typically a DICOM file or a nifti volume.\n\n        [-I|--inputDir <inputDir>]\n        If specified, a directory containing the <inputFile>. In this case\n        <inputFile> should be specified as relative to <inputDir>.\n\n        [-d|--outputDir <outputDir>]\n        The directory to contain the converted output image files.\n\n        -o|--outputFileStem <outputFileStem>\n        The output file stem to store conversion. If this is specified\n        with an extension, this extension will be used to specify the\n        output file type.\n\n        SPECIAL CASES:\n        For DICOM data, the <outputFileStem> can be set to the value of\n        an internal DICOM tag. The tag is specified by preceding the tag\n        name with a percent character '%', so\n\n            -o %ProtocolName\n\n        will use the DICOM 'ProtocolName' to name the output file. Note\n        that special characters (like spaces) in the DICOM value are\n        replaced by underscores '_'.\n\n        Multiple tags can be specified, for example\n\n            -o %PatientName%PatientID%ProtocolName\n\n        and the output filename will have each DICOM tag string as\n        specified in order, connected with dashes.\n\n        [-t|--outputFileType <outputFileType>]\n        The output file type. If different to <outputFileStem> extension,\n        will override extension in favour of <outputFileType>.\n\n        [-s|--sliceToConvert <sliceToConvert>]\n        In the case of volume files, the slice (z) index to convert. Ignored\n        for 2D input data. If a '-1' is sent, then convert *all* the slices.\n        If an 'm' is specified, only convert the middle slice in an input\n        volume.\n\n        [-f|--frameToConvert <sliceToConvert>]\n        In the case of 4D volume files, the volume (V) containing the\n        slice (z) index to convert. Ignored for 3D input data. If a '-1' is\n        sent, then convert *all* the frames. If an 'm' is specified, only\n        convert the middle frame in the 4D input stack.\n\n        [--showSlices]\n        If specified, render/show image slices as they are created.\n\n        [--reslice]\n        For 3D data only. Assuming [i,j,k] coordinates, the default is to save\n        along the 'k' direction. By passing a --reslice image data in the 'i' and\n        'j' directions are also saved. Furthermore, the <outputDir> is subdivided into\n        'slice' (k), 'row' (i), and 'col' (j) subdirectories.\n\n        [-x|--man]\n        Show full help.\n\n        [-y|--synopsis]\n        Show brief help.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FNNDSC/med2image",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "med2image",
    "package_url": "https://pypi.org/project/med2image/",
    "platform": "",
    "project_url": "https://pypi.org/project/med2image/",
    "project_urls": {
      "Homepage": "https://github.com/FNNDSC/med2image"
    },
    "release_url": "https://pypi.org/project/med2image/2.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "(Python) utility to convert medical images to jpg and png",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13657297,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec497b14a71c9c9f7f647bec42fecc71cb0e36822e2146627b44e0afcdc02417",
        "md5": "56cfa4bdee4c39d2d82f94eca2aab329",
        "sha256": "e487893fabb563543648801311c3460d361005f80fe38dd33ad85b508f9998db"
      },
      "downloads": -1,
      "filename": "med2image-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "56cfa4bdee4c39d2d82f94eca2aab329",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17682,
      "upload_time": "2020-05-26T21:59:54",
      "upload_time_iso_8601": "2020-05-26T21:59:54.500980Z",
      "url": "https://files.pythonhosted.org/packages/ec/49/7b14a71c9c9f7f647bec42fecc71cb0e36822e2146627b44e0afcdc02417/med2image-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}