{
  "info": {
    "author": "Vladimír Gorej",
    "author_email": "gorej@codescale.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: System :: Logging",
      "Topic :: System :: Monitoring",
      "Topic :: Utilities"
    ],
    "description": "log4mongo-python\n================\nlog4mongo-python is mongo database handler for python logging, part of log4mongo.org project.\nlog4mongo-python is using pymongo driver - http://github.com/mongodb/mongo-python-driver\n\n\nRequirements\n------------\n\n- python 2.7+\n- pymongo 2.8+\n- mongo database\n\nFor more information see *debian_requirements.txt* and *requirements.txt* files.\n\nConfiguration\n-------------\n\nExample handler python configuration: ::\n\n import logging\n from log4mongo.handlers import MongoHandler\n\n logger = logging.getLogger('test')\n logger.addHandler(MongoHandler(host='localhost'))\n logger.warning('test')\n\n\nContextual information\n----------------------\n\nIt is possible to decorate you document with contextual information. There are tow approaches.\n\n**1.) approach**\n::\n\n import logging\n from log4mongo.handlers import MongoHandler\n\n handler = MongoHandler(host='localhost')\n logger = logging.getLogger('test')\n logger.addHandler(handler)\n logging.LoggerAdapter(logger, {'ip': '127.0.0.1'}).info('test')\n\n**2.) approach**\n::\n\n import logging\n from log4mongo.handlers import MongoHandler\n\n handler = MongoHandler(host='localhost')\n logger = logging.getLogger('test')\n logger.addHandler(handler)\n logger.info('test', extra={'ip': '127.0.0.1'})\n\n\nAs you can see, second approach is more straightforward and there is no need to use LoggerAdapter.\n\n\nCapped collections\n------------------\n\nCapped collections are fixed-size collections that support high-throughput operations that insert, retrieve,\nand delete documents based on insertion order. Capped collections work in a way similar\nto circular buffers: once a collection fills its allocated space, it makes room for new documents\nby overwriting the oldest documents in the collection.\n\nBefore switching to capped collections, read this document please: http://docs.mongodb.org/manual/core/capped-collections/\n\nThis behaviour is disabled by default. You can enable this behaviour in constructor with *capped=True*:\n::\n\n import logging\n from log4mongo.handlers import MongoHandler\n\n handler = MongoHandler(host='localhost', capped=True)\n\n\nBuffered handler\n----------------\n\nBufferedMongoHandler is a subclass of MongoHandler allowing to buffer log messages\n and write them all at once to the database. The goal is to avoid too many writes to the database, thus avoiding\n too frequent write-locks.\nLog message buffer flush happens when the buffer is full, when a critical log message is emitted, and also periodically.\nAn early buffer flush can happen when a critical message is emitted.\nAnd in order to avoid messages to stay indefinitively in the buffer queue before appearing in database, a periodical\n flush happens every X seconds.\n\nThis periodical flush can also be deactivated with *buffer_periodical_flush_timing=False*,\n thus avoiding the timer thread to be created.\n\nBuffer size is configurable, as well as the log level for early flush (default is CRITICAL).\n::\n\n import logging\n from log4mongo.handlers import BufferedMongoHandler\n\n handler = BufferedMongoHandler(host='localhost',                          # All usual MongoHandler parameters are valid\n                                capped=True,\n                                buffer_size=100,                           # buffer size.\n                                buffer_periodical_flush_timing=10.0,       # periodical flush every 10 seconds\n                                buffer_early_flush_level=logging.CRITICAL) # early flush level\n\n logger = logging.getLogger().addHandler(handler)\n\n\nExample using full function signature\n-------------------------------------\nHere is an example call with all parameters filled:\n::\n\n import logging\n from log4mongo.handlers import MongoHandler\n\n handler = MongoHandler(\n     level=logging.INFO,\n     host='localhost',\n     port=27017,\n     database_name='my_database',\n     collection='logs',\n     username='my_user',\n     password='my_password',\n     authentication_db='admin',\n     fail_silently=False,\n     formatter=None,\n     capped=False,\n     capped_max=1000,\n     capped_size=1000000,\n     reuse=True,\n )\n\n logger = logging.getLogger().addHandler(handler)\n\n\nTests\n-----\n\n** Tested on evnironment **\n\n- Ubuntu 14.04\n- python 2.7.4\n- pymongo >2.8.3\n- mongod - db version v3.0.2\n- python unittest\n\n**Running tests**\n\nBefore you run the test you must start mongo database. You will do so by this command: ::\n\n $ mongod --dbpath /tmp/\n\n\nTo run the test run command: ::\n\n $ python test.py\n $ python setup.py test\n\n\nSee vagrant file to quickly setup the test environment.\n\nOriginal Author\n---------------\n\n| char0n (Vladimír Gorej, CodeScale s.r.o.) \n| email: gorej@codescale.net\n| web: http://www.codescale.net\n\nCurrent Maitainer\n-----------------\n| Oz Nahum Tiram\n| email: nahumoz@gmail.com\n| web: oz123.github.io\n\nReferences\n----------\n- http://www.mongodb.org/\n- http://docs.python.org/library/logging.html\n- http://github.com/mongodb/mongo-python-driver\n- http://log4mongo.org",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://github.com/log4mongo/log4mongo-python/tarball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://log4mongo.org/display/PUB/Log4mongo+for+Python",
    "keywords": "mongodb mongo logging handler",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "log4mongo",
    "package_url": "https://pypi.org/project/log4mongo/",
    "platform": "any",
    "project_url": "https://pypi.org/project/log4mongo/",
    "project_urls": {
      "Download": "http://github.com/log4mongo/log4mongo-python/tarball/master",
      "Homepage": "http://log4mongo.org/display/PUB/Log4mongo+for+Python"
    },
    "release_url": "https://pypi.org/project/log4mongo/1.6.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "mongo database handler for python logging",
    "version": "1.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6206292,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6624e92f0c4f3e2e18fd7b3a3673c09fc421b94b3c3ae539f3fd4c3c2f4373bc",
        "md5": "3429a02b5f4dc9eebf8bf9778a469ded",
        "sha256": "9733805f13f8dbae1354f86042aa54f83451949d9554ea3b4efdc8e6243728df"
      },
      "downloads": -1,
      "filename": "log4mongo-1.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3429a02b5f4dc9eebf8bf9778a469ded",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9541,
      "upload_time": "2016-10-24T12:47:08",
      "upload_time_iso_8601": "2016-10-24T12:47:08.218314Z",
      "url": "https://files.pythonhosted.org/packages/66/24/e92f0c4f3e2e18fd7b3a3673c09fc421b94b3c3ae539f3fd4c3c2f4373bc/log4mongo-1.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}