{
  "info": {
    "author": "Jordan Nath",
    "author_email": "jordannh@sent.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Purpose of Field Tree\r\n\r\nThis plugin is a wrapper for dynamic form rendering, and works even for users\r\nthat block scripts (gasp! I know!).\r\n\r\nThe most common form of the \"I really need JavaScript for this\" attitude is\r\ndynamic form rendering, where one select box renders another select box and so\r\non. One example you may have encountered is the obligitory Country-State-City\r\nselect box.\r\n\r\nThis plugin makes it easy to render a form based on input. Plus, it works\r\nwithout JavaScript! The plugin will automatically detect if JasvaScript is\r\nturned off, and render a submit button for continuing.\r\n\r\nConsequently, the form is resubmitted whether someone is using Javascript or no\r\nJavascript. **Any developer using this plugin must plan accordingly.**\r\n\r\n# Requirements\r\n\r\nSince this is a Django plugin, obviously django must be installed. Besides that,\r\nyou must have jquery installed and linked within the page that uses FieldTree\r\nin order to use the javascript functionality.\r\n\r\n# Getting Started\r\n\r\n\r\n1. You can install moreforms by typing\r\n\r\n    $ pip install django-moreforms\r\n    \r\nin the command line.\r\n\r\n2. Ensure that 'moreforms' is listed in INSTALLED_APPS in `settings.py`:\r\n\r\n    INSTALLED_APPS = (\r\n        ...\r\n        'moreforms',\r\n        ...\r\n    )\r\n    \r\n3. Finally, to construct the FieldTree, do the following:\r\n\r\n    from django import forms\r\n    from moreforms import FieldTree as T, FieldLeaf as L\r\n    \r\n    class MyForm(forms.Form):\r\n        name = forms.CharField(...)\r\n        age = forms.IntegerField(...)\r\n        ...\r\n        \r\n        # Every form with a FieldTree must have a delete_field method. I'll\r\n        # explain later...\r\n        def delete_field(self, name):\r\n            del self.field[name]\r\n        \r\n        # Make sure to override the __init__ method.\r\n        def __init__(self, *args, **kwargs):\r\n        \r\n            request = kwargs.pop('request', None) # Don't add request as an\r\n                                                    #  argument itself.\r\n                                                    \r\n            super(MyForm, self).__init__(*args, **kwargs)\r\n            \r\n            tree = T(request, self,\r\n                L(None, 'name', children=(\r\n                    L('.*', 'age'),\r\n                ))\r\n            )\r\n            \r\n            tree.vacuum()\r\n                \r\n4. Within the django template you need to load the template tags:\r\n\r\n    {% load moreforms %}\r\n    \r\n    {{ form.as_p }} {% auto_submit %}\r\n    \r\n`auto_submit` will render both the javascript and the non-script portions\r\nof the FieldTree.\r\n                \r\n## What the code does.\r\n\r\n`FieldTree` is, essentially a tree, where each leaf has a regular expression,\r\na name of a field, and (optionally) any children, which--in themselves--are\r\nleaves.\r\n\r\nThe **regular expression** is what is expected from the parent's field. In\r\nthe above example, we want to render the 'age' field if the value of\r\n'name' is posted. Note that the top-most leaf ('name') has `None` as the\r\nregexp. This is becaue **the top-most leaf must have a None regexp.**\r\n\r\n## That's it!\r\n\r\nNow, just create the form in the view, taking care to pass in `request` as well.\r\n\r\n    def my_view(request):\r\n    \r\n        form = MyForm(request)\r\n        return render(request, 'some_page.html', {'form' : form})\r\n        \r\n# A Few Notes\r\n\r\n## `delete_field` function.\r\n\r\nSince a FieldTree cannot delete the fields on the passed-in form directly,\r\nthey must be deleted manually from the form. Basically you just need the lines\r\nprovided in the example.\r\n\r\n## Default input value\r\n\r\nIf you want a default input value (e.g. automatically fill in the submitted\r\n`name`), do the following in the form:\r\n\r\n    class MyForm(forms.Form):\r\n        ...\r\n        def __init__(self, *args, **kwargs):\r\n            ...\r\n            super(...).__init__(...)\r\n            ...\r\n            self.initial = {'name' : ... }\r\n            \r\nThis is standard for django forms, but just thought you'd like to know.\r\n\r\n## You might want a note...\r\n\r\nYou might want a note preceeding the form to explain how the TreeField works.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": "",
    "license": "GPL v. 3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-moreforms",
    "package_url": "https://pypi.org/project/django-moreforms/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-moreforms/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/django-moreforms/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Contains helpful fields for Django, such as a FieldTree (a simple way to get a field chain) and date-related fields.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 911169,
  "urls": [
    {
      "comment_text": "built for Linux-3.11.0-12-generic-x86_64-with-glibc2.7",
      "digests": {
        "blake2b_256": "61d41b60b856c0e8d08429ca5db0003de37a841b74824f509a29e338e6f3809f",
        "md5": "cc94a705531247e5bb8319ff4ffe3d92",
        "sha256": "339d67da599635fe0ddde5f9e44a4a293a54ba98f79b0cf5fcbca46615457169"
      },
      "downloads": -1,
      "filename": "django-moreforms-1.0.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "cc94a705531247e5bb8319ff4ffe3d92",
      "packagetype": "bdist_dumb",
      "python_version": "any",
      "requires_python": null,
      "size": 12334,
      "upload_time": "2013-11-02T22:25:15",
      "upload_time_iso_8601": "2013-11-02T22:25:15.202719Z",
      "url": "https://files.pythonhosted.org/packages/61/d4/1b60b856c0e8d08429ca5db0003de37a841b74824f509a29e338e6f3809f/django-moreforms-1.0.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd60e16f2d95b4b900622335e231d8e9abe2d2e1faf103512a0ecb697e5b0eb3",
        "md5": "ab235df853afb0569cdf79083cd3cd80",
        "sha256": "d7784df309bc982a18f949053cfda97965315d5bd667be3b25218f3fe029ce0e"
      },
      "downloads": -1,
      "filename": "django-moreforms-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ab235df853afb0569cdf79083cd3cd80",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7342,
      "upload_time": "2013-11-02T22:25:06",
      "upload_time_iso_8601": "2013-11-02T22:25:06.232730Z",
      "url": "https://files.pythonhosted.org/packages/dd/60/e16f2d95b4b900622335e231d8e9abe2d2e1faf103512a0ecb697e5b0eb3/django-moreforms-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}