{
  "info": {
    "author": "yutaka matsubara",
    "author_email": "yutaka.matsubara@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: BSD :: FreeBSD",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Server"
    ],
    "description": "What's this\n---------------------------------\n\n.. image:: https://travis-ci.org/mopemope/meinheld.svg\n    :target: https://travis-ci.org/mopemope/meinheld\n\nThis is a high performance python wsgi web server.\n\nThus this is yet an another asynchronous web server like gevent.\n\nAnd meinheld is a WSGI compliant web server. (PEP333 and PEP3333 supported)\n\nYou can also join us in `meinheld mailing list`_ and `#meinheld`_ on freenode_\n\nRequirements\n---------------------------------\n\nmeinheld requires **Python 2.x >= 2.6** or **Python 3.x >= 3.2** . and **greenlet >= 0.4.5**.\n\nmeinheld supports Linux, FreeBSD, Mac OS X.\n\nInstallation\n---------------------------------\n\nInstall from pypi::\n\n  $ pip install -U meinheld\n\nInstall from source:: \n\n  $ python setup.py install\n\nmeinheld supports gunicorn.\n\nTo install gunicorn::\n\n  $ pip install -U gunicorn\n\n\nBasic Usage\n---------------------------------\n\nsimple wsgi app:\n\n.. code:: python\n\n    from meinheld import server\n\n    def hello_world(environ, start_response):\n        status = b'200 OK'\n        res = b\"Hello world!\"\n        response_headers = [('Content-type', 'text/plain'), ('Content-Length', str(len(res)))]\n        start_response(status, response_headers)\n        return [res]\n\n    server.listen((\"0.0.0.0\", 8000))\n    server.run(hello_world)\n\n\nwith gunicorn. user worker class \"egg:meinheld#gunicorn_worker\" or \"meinheld.gmeinheld.MeinheldWorker\"::\n    \n    $ gunicorn --workers=2 --worker-class=\"egg:meinheld#gunicorn_worker\" gunicorn_test:app\n\nContinuation\n---------------------------------\n\nmeinheld provides a simple continuation API (based on greenlet).\n\nTo enable continuations, use ContinuationMiddleware. get Continuation from wsgi environ.\n\nContinuation objects have two very interesting methods, `suspend` and `resume`.\n\nFor example:\n\n.. code:: python\n\n    from meinheld import server\n    from meinheld import middleware\n\n    def app(environ, start_response):\n        ...\n        \n        #get Continuation\n        c = environ.get(middleware.CONTINUATION_KEY, None)\n        \n        ...\n\n        if condtion:\n            waiters.append(c)\n            #suspend \n            c.suspend()\n        else:\n            for c in waiters:\n                # resume suspend function\n                c.resume()\n\n        ...\n\n\n    server.listen((\"0.0.0.0\", 8000))\n    server.run(middleware.ContinuationMiddleware(hello_world))\n\nFor more info see http://github.com/mopemope/meinheld/tree/master/example/chat/\n\nWebsocket \n---------------------------------\n\nmeinheld support Websockets. use WebSocketMiddleware. \n\nFor example:\n\n.. code:: python\n\n    from flask import Flask, render_template, request\n    from meinheld import server, middleware\n\n    SECRET_KEY = 'development key'\n    DEBUG=True\n\n    app = Flask(__name__)\n    app.config.from_object(__name__)\n\n\n    participants = set()\n\n\n    @app.route('/')\n    def index():\n        return render_template('websocket_chat.html')\n\n    @app.route('/chat')\n    def chat():\n        print request.environ\n        ws = request.environ.get('wsgi.websocket')\n        participants.add(ws)\n        try:\n            while True:\n                print \"ws.wait()...\"\n                m = ws.wait()\n                print \"recv msg %s\" % m\n                if m is None:\n                    break\n                for p in participants:\n                    print \"send message %s\" % m\n                    p.send(m)\n        finally:\n            participants.remove(ws)\n        return \"\"\n\n            \n    if __name__ == \"__main__\":\n        server.listen((\"0.0.0.0\", 8000))\n        server.run(middleware.WebSocketMiddleware(app))\n\n\nPatching \n---------------------------------\n\nmeinheld provides a few monkeypatches.\n\nSocket \n==========================================\n\nThis patch replaces the standard socket module.\n\nFor Example:\n\n.. code:: python\n\n    from meinheld import patch\n    patch.patch_all()\n\nFor more info see http://github.com/mopemope/meinheld/tree/master/example/patch/\n\n\nPerformance\n------------------------------\n\nFor parsing HTTP requests, meinheld uses Ryan Dahl's http-parser library.\n\n(see https://github.com/joyent/http-parser)\n\nIt is built around the high performance event library picoev.\n\n(see http://developer.cybozu.co.jp/kazuho/2009/08/picoev-a-tiny-e.html)\n\nsendfile\n===========================\n\nmeinheld uses sendfile(2), over wgsi.file_wrapper.\n\n\n.. _meinheld mailing list: http://groups.google.com/group/meinheld\n.. _`#meinheld`: http://webchat.freenode.net/?channels=meinheld\n.. _freenode: http://freenode.net",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://meinheld.org",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meinheld",
    "package_url": "https://pypi.org/project/meinheld/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/meinheld/",
    "project_urls": {
      "Homepage": "http://meinheld.org"
    },
    "release_url": "https://pypi.org/project/meinheld/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "High performance asynchronous Python WSGI Web Server",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7261254,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb69e9866afb7dc6294a2575668bdfbb890e0058556c7e3323dac950cb6999f0",
        "md5": "92bc2c180fe37c8b430650eafa20d31c",
        "sha256": "447de7189e4dc9c1f425aa1b9c8210aab492fda4d86f73a24059264e7d8b0134"
      },
      "downloads": -1,
      "filename": "meinheld-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "92bc2c180fe37c8b430650eafa20d31c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 81891,
      "upload_time": "2019-05-13T22:52:33",
      "upload_time_iso_8601": "2019-05-13T22:52:33.186538Z",
      "url": "https://files.pythonhosted.org/packages/cb/69/e9866afb7dc6294a2575668bdfbb890e0058556c7e3323dac950cb6999f0/meinheld-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2020-7658",
        "SNYK-PYTHON-MEINHELD-569140"
      ],
      "details": "meinheld prior to 1.0.2 is vulnerable to HTTP Request Smuggling. HTTP pipelining issues and request smuggling attacks might be possible due to incorrect Content-Length and Transfer encoding header parsing.",
      "fixed_in": [
        "1.0.2"
      ],
      "id": "PYSEC-2020-239",
      "link": "https://osv.dev/vulnerability/PYSEC-2020-239",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}