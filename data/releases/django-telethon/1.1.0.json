{
  "info": {
    "author": "Ali Zahedigol",
    "author_email": "alizahedigol@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "<!--![GitHub All Releases](https://img.shields.io/github/downloads/ali-zahedi/django-telethon/total)-->\n<!--![GitHub issues](https://img.shields.io/github/issues/ali-zahedi/django-telethon)-->\n![GitHub](https://img.shields.io/github/license/ali-zahedi/django-telethon)\n![GitHub](https://img.shields.io/pypi/pyversions/django-telethon.svg)\n![GitHub](https://img.shields.io/pypi/v/django-telethon.svg)\n# Django Telethon config\n\n\n  ⭐️ Thanks **everyone** who has starred the project, it means a lot!\n\nThis project is to help you use [Telethon](https://docs.telethon.dev/en/stable/index.html). \n\n## Compatibility\n\n* Python 3.7+\n* Django 3.0+\n\n## Installation\n\n* Use the following command to install using pip:\n\n```bash\npip install django-telethon\n```\n\n**OR** \n\n* You can use the following command to set it up locally so that you can fix bugs or whatever and send pull requests:\n\n```shell script\npip install -e \".[dev]\"\npre-commit install\n```\nFor better understanding, please read the:\n* [Telethon](https://docs.telethon.dev/en/stable/index.html) documentation.\n* [Telethon Session](https://docs.telethon.dev/en/stable/modules/sessions.html) documentation.\n* [pre-commit](https://pre-commit.com/docs/installation/) documentation.\n* [pip](https://pip.pypa.io/en/stable/installing/) documentation.\n* [python package](https://packaging.python.org/en/latest/tutorials/packaging-projects/) documentation.\n* [github pull requests](https://help.github.com/en/articles/about-pull-requests/) documentation.\n\n### settings.py\n\n \n ``` python\nINSTALLED_APPS = [\n    # ....\n    'django_telethon',\n    # ...\n]\n```\n### urls.py\n\n```shell\nfrom django.contrib import admin\nfrom django.urls import path\n\nfrom django_telethon.urls import django_telethon_urls\n\nadmin.autodiscover()\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('telegram/', django_telethon_urls()),\n]\n```\n### Migration\n\n\n```shell script\npython manage.py migrate\n```\n\n## Signing In\n\nBefore working with Telegram’s API, you need to get your own API ID and hash:\n\n[Login to your Telegram account](https://my.telegram.org/auth) with the phone number of the developer account to use.\nClick under API Development tools.\nA Create new application window will appear. Fill in your application details. There is no need to enter any URL, and only the first two fields (App title and Short name) can currently be changed later.\nClick on Create application at the end. Remember that your API hash is secret and Telegram won’t let you revoke it. Don’t post it anywhere!\n\n***This API ID and hash is the one used by your application, not your phone number. You can use this API ID and hash with any phone number or even for bot accounts.***\n\nRead more (proxy, bot and etc) [Here](https://docs.telethon.dev/en/stable/basic/signing-in.html).\n\n## Usage\n\n### Interactive mode\n\n1. Open a terminal and run the following command:\n\n    ```shell script\n    python manage.py shell\n    ```\n1. Enable ```DJANGO_ALLOW_ASYNC_UNSAFE``` in your environment.\n\n    ```python\n    import os\n    os.environ[\"DJANGO_ALLOW_ASYNC_UNSAFE\"] = \"true\"\n    ```\n\n1. You can import these from ```django_telethon.sessions```. For example, using the ```DjangoSession``` is done as follows:\n\n    ```python\n    from telethon.sync import TelegramClient\n    from django_telethon.sessions import DjangoSession\n    from django_telethon.models import App, ClientSession\n    from telethon.errors import SessionPasswordNeededError\n    \n    # Use your own values from my.telegram.org\n    API_ID = 12345\n    API_HASH = '0123456789abcdef0123456789abcdef'\n    \n    app, is_created = App.objects.update_or_create(\n        api_id=API_ID,\n        api_hash=API_HASH\n    )\n    cs = ClientSession.objects.update_or_create(\n        name='default',\n    )\n    telegram_client = TelegramClient(DjangoSession(client_session=cs), app.api_id, app.api_hash)\n    telegram_client.connect()\n    \n    if not telegram_client.is_user_authorized():\n        phone = input('Enter your phone number: ')\n        telegram_client.send_code_request(phone)\n        code = input('Enter the code you received: ')\n        try:\n            telegram_client.sign_in(phone, code)\n        except SessionPasswordNeededError:\n            password = input('Enter your password: ')\n            telegram_client.sign_in(password=password)    \n    ```\n\n#### Doing stuff\n\n```python\nprint((await telegram_client.get_me()).stringify())\n\nawait telegram_client.send_message('username', 'Hello! Talking to you from Telethon')\nawait telegram_client.send_file('username', '/home/myself/Pictures/holidays.jpg')\n\nawait telegram_client.download_profile_photo('me')\nmessages = await telegram_client.get_messages('username')\nawait messages[0].download_media()\n\n@telegram_client.on(telegram_client.NewMessage(pattern='(?i)hi|hello'))\nasync def handler(event):\n    await event.respond('Hey!')\n```\n\n### API\n#### User Login\n1. run the following command to start the server:\n\n    ```shell script\n    python manage.py runserver\n    ```\n\n1. run the following command to start telegram client:\n\n    ```shell script\n    python manage.py runtelegram\n    ```\n   \n1. go to [admin panel](http://127.0.0.1:8000/admin/) and [telegram app section](http://127.0.0.1:8000/admin/django_telethon/app/). create a new app. get data from the [your Telegram account](https://my.telegram.org/auth).\n\n1. request code from telegram:\n    \n   ```python\n   import requests\n   import json\n   \n   url = \"127.0.0.1:8000/telegram/send-code-request/\"\n   \n   payload = json.dumps({\n     \"phone_number\": \"+12345678901\",\n     \"client_session_name\": \"name of the client session\"\n   })\n   headers = {\n     'Content-Type': 'application/json'\n   }\n   \n   response = requests.request(\"POST\", url, headers=headers, data=payload)\n   \n   print(response.text)\n    ```\n\n1. send this request for sign in:\n    \n   ```python\n   import requests\n   import json\n   \n   url = \"127.0.0.1:8000/telegram/login-user-request/\"\n   \n   payload = json.dumps({\n     \"phone_number\": \"+12345678901\",\n     \"client_session_name\": \"name of the client session\",\n     \"code\": \"1234\",\n     \"password\": \"1234\"\n   })\n   headers = {\n     'Content-Type': 'application/json'\n   }\n   \n   response = requests.request(\"POST\", url, headers=headers, data=payload)\n   \n   print(response.text)\n\n   ```\n\n#### Bot login \nsend this request for sign in:\n    \n   ```python\n   import requests\n   import json\n   \n   url = \"127.0.0.1:8000/telegram/login-bot-request/\"\n   \n   payload = json.dumps({\n     \"bot_token\": \"bot token\",\n     \"client_session_name\": \"name of the client session\",\n   })\n   headers = {\n     'Content-Type': 'application/json'\n   }\n   \n   response = requests.request(\"POST\", url, headers=headers, data=payload)\n   \n   print(response.text)\n\n   ```\n\n### Server-side\n\nIf you are using **supervisord** or **another process manager**, you can use the following command to start the server:\n\n```shell script\npython manage.py runtelegram\n```\n\n#### Supervisord\n\n1. Add the following lines to your ```/etc/supervisord.d/[yourproject].ini``` file:\n\n    ```ini\n    [program:telegram_worker]\n    directory=/home/projectuser/[your_project_directory]/\n    command=/home/projectuser/venv/bin/python manage.py runtelegram\n    autostart=true\n    autorestart=true\n    stderr_logfile=/home/projectuser/logs/telegramworker.err.log\n    stdout_logfile=/home/projectuser/logs/telegramworker.out.log\n    ```\n\n2. Reload the supervisor daemon:\n\n    ```shell\n    supervisorctl reread\n    supervisorctl update\n    supervisorctl start telegram_worker\n    supervisorctl status\n    ```\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE) for more information.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ali-zahedi/django-telethon",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-telethon",
    "package_url": "https://pypi.org/project/django-telethon/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-telethon/",
    "project_urls": {
      "Homepage": "https://github.com/ali-zahedi/django-telethon"
    },
    "release_url": "https://pypi.org/project/django-telethon/1.1.0/",
    "requires_dist": [
      "Django (>=3.0)",
      "Telethon (<2,>=1.24.0)",
      "flake8 ; extra == 'dev'",
      "black ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "whitenoise ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Telethon for django",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15645956,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d5e7f57e76a33adcc04701ca9863ad864f50f68e32af5d8dc8feaf46132e5a9",
        "md5": "832b84a5909f6876e9dee766ea7051d2",
        "sha256": "57a29daa72ade84641940094ab18b11a48116405dcab8b2f9ae9cc47034f5516"
      },
      "downloads": -1,
      "filename": "django_telethon-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "832b84a5909f6876e9dee766ea7051d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18002,
      "upload_time": "2022-07-17T08:24:47",
      "upload_time_iso_8601": "2022-07-17T08:24:47.218227Z",
      "url": "https://files.pythonhosted.org/packages/9d/5e/7f57e76a33adcc04701ca9863ad864f50f68e32af5d8dc8feaf46132e5a9/django_telethon-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b01ed283c101309f3d0469326966574b80c371e6133305cd61e76101867006ca",
        "md5": "c38eea4ce8d6189a29238f5249dd5375",
        "sha256": "48fafc6b72695f911fdc07f29bcc8807f4222682333cc5587243634a9d3f7fcc"
      },
      "downloads": -1,
      "filename": "django-telethon-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c38eea4ce8d6189a29238f5249dd5375",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15527,
      "upload_time": "2022-07-17T08:24:49",
      "upload_time_iso_8601": "2022-07-17T08:24:49.475667Z",
      "url": "https://files.pythonhosted.org/packages/b0/1e/d283c101309f3d0469326966574b80c371e6133305cd61e76101867006ca/django-telethon-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}