{
  "info": {
    "author": "Gregory Oschwald",
    "author_email": "goschwald@maxmind.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet",
      "Topic :: Internet :: Proxy Servers",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "===================================================================\nminFraud Score, Insights, Factors and Report Transaction Python API\n===================================================================\n\nDescription\n-----------\n\nThis package provides an API for the `MaxMind minFraud Score, Insights, and \nFactors web services <https://dev.maxmind.com/minfraud/>`_ as well as the\n`Report Transaction web service\n<https://dev.maxmind.com/minfraud/report_transaction>`_.\n\nInstallation\n------------\n\nTo install the ``minfraud`` module, type:\n\n.. code-block:: bash\n\n    $ pip install minfraud\n\nIf you are not able to use pip, you may also use easy_install from the\nsource directory:\n\n.. code-block:: bash\n\n    $ easy_install .\n\nDocumentation\n-------------\n\nComplete API documentation is available on `Read the Docs\n<http://minfraud.readthedocs.io/>`_.\n\nUsage\n-----\n\nTo use this API, create a new ``minfraud.Client`` object. The constructor\ntakes your MaxMind account ID and license key:\n\n.. code-block:: pycon\n\n    >>> client = Client(42, 'licensekey')\n\nScore, Insights and Factors Usage\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Factors service is called with the ``factors()`` method:\n\n.. code-block:: pycon\n\n    >>> factors = client.factors({'device': {'ip_address': '81.2.69.160'}})\n\nThe Insights service is called with the ``insights()`` method:\n\n.. code-block:: pycon\n\n    >>> insights = client.insights({'device': {'ip_address': '81.2.69.160'}})\n\nThe Score web service is called with the ``score()`` method:\n\n.. code-block:: pycon\n\n    >>> score = client.score({'device': {'ip_address': '81.2.69.160'}})\n\nEach of these methods takes a dictionary representing the transaction to be sent\nto the web service. The structure of this dictionary should be in `the format\nspecified in the REST API documentation\n<https://dev.maxmind.com/minfraud/#Request_Body>`__.\nThe ``ip_address`` in the ``device`` sub-dictionary is required. All other\nfields are optional.\n\nReport Transactions Usage\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMaxMind encourages the use of this API as data received through this channel is\nused to continually improve the accuracy of our fraud detection algorithms. The\nReport Transaction web service is called with the ``report()`` method:\n\n.. code-block:: pycon\n\n    >>> client.report({'ip_address': '81.2.69.160', 'tag': 'chargeback'})\n\nThe method takes a dictionary representing the report to be sent to the web\nservice. The structure of this dictionary should be in `the format specified\nin the REST API documentation\n<https://dev.maxmind.com/minfraud/report-transaction/#Request_Body>`__. The\n``ip_address`` and ``tag`` fields are required. All other fields are optional.\n\nRequest Validation (for all request methods)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAssuming validation has not been disabled, before sending the transaction to\nthe web service, the transaction dictionary structure and content will be\nvalidated. If validation fails, a ``minfraud.InvalidRequestError``\nwill be raised.\n\nIf the dictionary is valid, a request will be made to the web service. If the\nrequest succeeds, a model object for the service response will be returned.\nIf the request fails, one of the errors listed below will be raised.\n\nErrors\n------\n\nThe possible errors are:\n\n* ``minfraud.AuthenticationError`` - This will be raised when the server\n  is unable to authenticate the request, e.g., if the license key or account\n  ID is invalid.\n* ``minfraud.InvalidRequestError`` - This will be raised when the server\n  rejects the request as invalid for another reason, such as a missing or\n  reserved IP address. It is also raised if validation of the request before\n  it is sent to the server fails.\n* ``minfraud.HttpError`` - This will be raised when an unexpected HTTP\n  error occurs such as a firewall interfering with the request to the server.\n* ``minfraud.MinFraudError`` - This will be raised when some other error\n  occurs such as unexpected content from the server. This also serves as the\n  base class for the above errors.\n\nAdditionally, ``score``, ``insights`` and ``factors`` may also raise:\n\n* ``minfraud.InsufficientFundsError`` - This will be raised when `your\n  account <https://www.maxmind.com/en/account>`_ is out of funds.\n\nExamples\n--------\n\nScore, Insights and Factors Example\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: pycon\n\n    >>> from minfraud import Client\n    >>>\n    >>> client = Client(42, 'licensekey')\n    >>>\n    >>> request = {\n    >>>     'device': {\n    >>>         'ip_address': '81.2.69.160',\n    >>>         'accept_language': 'en-US,en;q=0.8',\n    >>>         'session_age': 3600,\n    >>>         'session_id': 'a333a4e127f880d8820e56a66f40717c',\n    >>>         'user_agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36'\n    >>>     },\n    >>>     'event': {\n    >>>         'shop_id': 's2123',\n    >>>         'type': 'purchase',\n    >>>         'transaction_id': 'txn3134133',\n    >>>         'time': '2014-04-12T23:20:50.052+00:00'\n    >>>     },\n    >>>     'account': {\n    >>>         'user_id': '3132',\n    >>>         'username_md5': '570a90bfbf8c7eab5dc5d4e26832d5b1'\n    >>>     },\n    >>>     'email': {\n    >>>         'address': '977577b140bfb7c516e4746204fbdb01',\n    >>>         'domain': 'maxmind.com'\n    >>>     },\n    >>>     'billing': {\n    >>>         'first_name': 'Jane',\n    >>>         'last_name': 'Doe',\n    >>>         'company': 'Company',\n    >>>         'address': '101 Address Rd.',\n    >>>         'address_2': 'Unit 5',\n    >>>         'city': 'Hamden',\n    >>>         'region': 'CT',\n    >>>         'country': 'US',\n    >>>         'postal': '06510',\n    >>>         'phone_country_code': '1',\n    >>>         'phone_number': '323-123-4321',\n    >>>     },\n    >>>     'shipping': {\n    >>>         'first_name': 'John',\n    >>>         'last_name': 'Doe',\n    >>>         'company': 'ShipCo',\n    >>>         'address': '322 Ship Addr. Ln.',\n    >>>         'address_2': 'St. 43',\n    >>>         'city': 'New Haven',\n    >>>         'region': 'CT',\n    >>>         'country': 'US',\n    >>>         'postal': '06510',\n    >>>         'phone_country_code': '1',\n    >>>         'phone_number': '403-321-2323',\n    >>>         'delivery_speed': 'same_day',\n    >>>     },\n    >>>     'credit_card': {\n    >>>         'bank_phone_country_code': '1',\n    >>>         'avs_result': 'Y',\n    >>>         'bank_phone_number': '800-342-1232',\n    >>>         'last_4_digits': '7643',\n    >>>         'cvv_result': 'N',\n    >>>         'bank_name': 'Bank of No Hope',\n    >>>         'issuer_id_number': '323132'\n    >>>     },\n    >>>     'payment': {\n    >>>         'decline_code': 'invalid number',\n    >>>         'was_authorized': False,\n    >>>         'processor': 'stripe'\n    >>>     },\n    >>>     'shopping_cart': [{\n    >>>         'category': 'pets',\n    >>>         'quantity': 2,\n    >>>         'price': 20.43,\n    >>>         'item_id': 'lsh12'\n    >>>     }, {\n    >>>         'category': 'beauty',\n    >>>         'quantity': 1,\n    >>>         'price': 100.0,\n    >>>         'item_id': 'ms12'\n    >>>     }],\n    >>>     'order': {\n    >>>         'affiliate_id': 'af12',\n    >>>         'referrer_uri': 'http://www.amazon.com/',\n    >>>         'subaffiliate_id': 'saf42',\n    >>>         'discount_code': 'FIRST',\n    >>>         'currency': 'USD',\n    >>>         'amount': 323.21\n    >>>      },\n    >>>     'custom_inputs': {\n    >>>         'section': 'news',\n    >>>         'num_of_previous_purchases': 19,\n    >>>         'discount': 3.2,\n    >>>         'previous_user': True\n    >>>     }\n    >>> }\n    >>>\n    >>> client.score(request)\n    Score(...)\n    >>>\n    >>> client.insights(request)\n    Insights(...)\n    >>>\n    >>> client.factors(request)\n    Factors(...)\n\nReport Transactions Example\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: pycon\n\n    >>> from minfraud import Client\n    >>>\n    >>> client = Client(42, 'licensekey')\n    >>>\n    >>> transaction_report = {\n    >>>     'ip_address': '81.2.69.160',\n    >>>     'tag': 'chargeback',\n    >>>     'minfraud_id': '2c69df73-01c0-45a5-b218-ed85f40b17aa',\n    >>> }\n    >>> client.report(transaction_report)\n\nRequirements\n------------\n\nThis code requires Python 2.7+ or 3.5+. Older versions are not supported.\nThis library has been tested with CPython and PyPy.\n\nVersioning\n----------\n\nThe minFraud Python API uses `Semantic Versioning <http://semver.org/>`_.\n\nSupport\n-------\n\nPlease report all issues with this code using the `GitHub issue tracker\n<https://github.com/maxmind/minfraud-api-python/issues>`_.\n\nIf you are having an issue with a MaxMind service that is not specific to the\nclient API, please contact `MaxMind support <http://www.maxmind.com/en/support>`_\nfor assistance.\n\nCopyright and License\n---------------------\n\nThis software is Copyright Â© 2015-2020 by MaxMind, Inc.\n\nThis is free software, licensed under the Apache License, Version 2.0.\n\n\n",
    "description_content_type": "",
    "docs_url": "https://pythonhosted.org/minfraud/",
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.maxmind.com/",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minfraud",
    "package_url": "https://pypi.org/project/minfraud/",
    "platform": "any",
    "project_url": "https://pypi.org/project/minfraud/",
    "project_urls": {
      "Homepage": "http://www.maxmind.com/"
    },
    "release_url": "https://pypi.org/project/minfraud/1.13.0/",
    "requires_dist": [
      "geoip2 (<4.0.0,>=3.0.0)",
      "requests (>=2.22.0)",
      "rfc3987",
      "strict-rfc3339",
      "urllib3 (>=1.25.2)",
      "validate-email",
      "voluptuous",
      "ipaddress ; python_version==\"2.7\""
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
    "summary": "MaxMind minFraud Score, Insights, Factors and Report Transactions API",
    "version": "1.13.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13334578,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b99f97d57cfa14bc32b121ebf7478265767045487f00fc0b1242c550fc84c2ad",
        "md5": "275c11225d746d204c3c40eb62e97d87",
        "sha256": "3025d1baa308ae46187183d44523c458a35a1e394832ecb4511f6a386ed86a3a"
      },
      "downloads": -1,
      "filename": "minfraud-1.13.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "275c11225d746d204c3c40eb62e97d87",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
      "size": 22020,
      "upload_time": "2020-07-14T14:30:42",
      "upload_time_iso_8601": "2020-07-14T14:30:42.258647Z",
      "url": "https://files.pythonhosted.org/packages/b9/9f/97d57cfa14bc32b121ebf7478265767045487f00fc0b1242c550fc84c2ad/minfraud-1.13.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0a9a50ddf9c6f422ef91c1731d8e67e6a893d8f06ea5c3dd06466010c9db806",
        "md5": "dd6fbd90e46166b9a12f75c031fd2e1e",
        "sha256": "3c6a35cf083011f4bde71fc6a46980d64d2a5c797864080bce0f0c99732e0177"
      },
      "downloads": -1,
      "filename": "minfraud-1.13.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dd6fbd90e46166b9a12f75c031fd2e1e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
      "size": 587166,
      "upload_time": "2020-07-14T14:30:44",
      "upload_time_iso_8601": "2020-07-14T14:30:44.032511Z",
      "url": "https://files.pythonhosted.org/packages/a0/a9/a50ddf9c6f422ef91c1731d8e67e6a893d8f06ea5c3dd06466010c9db806/minfraud-1.13.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}