{
  "info": {
    "author": "Gregory Oschwald",
    "author_email": "goschwald@maxmind.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet",
      "Topic :: Internet :: Proxy Servers",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "================================================\nminFraud Score, Insights, and Factors Python API\n================================================\n\nDescription\n-----------\n\nThis package provides an API for the `MaxMind minFraud Score, Insights, and \nFactors web services <https://dev.maxmind.com/minfraud/>`_.\n\nInstallation\n------------\n\nTo install the ``minfraud`` module, type:\n\n.. code-block:: bash\n\n    $ pip install minfraud\n\nIf you are not able to use pip, you may also use easy_install from the\nsource directory:\n\n.. code-block:: bash\n\n    $ easy_install .\n\nDocumentation\n-------------\n\nComplete API documentation is available on `Read the Docs\n<http://minfraud.readthedocs.io/>`_.\n\nUsage\n-----\n\nTo use this API, create a new ``minfraud.Client`` object. The constructor\ntakes your MaxMind user ID and license key:\n\n.. code-block:: pycon\n\n    >>> client = Client(42, 'licensekey')\n\nThe Factors service is called with the ``factors()`` method:\n\n.. code-block:: pycon\n\n    >>> factors = client.factors({'device': {'ip_address': '81.2.69.160'}})\n\nThe Insights service is called with the ``insights()`` method:\n\n.. code-block:: pycon\n\n    >>> insights = client.insights({'device': {'ip_address': '81.2.69.160'}})\n\nThe Score web service is called with the ``score()`` method:\n\n.. code-block:: pycon\n\n    >>> score = client.score({'device': {'ip_address': '81.2.69.160'}})\n\nEach of these methods takes a dictionary representing the transaction to be sent\nto the web service. The structure of this dictionary should be in `the format\nspecified in the REST API documentation\n<https://dev.maxmind.com/minfraud/#Request_Body>`_.\nThe ``ip_address`` in the ``device`` sub-dictionary is required. All other\nfields are optional.\n\nAssuming validation has not been disabled, before sending the transaction to\nthe web service, the transaction dictionary structure and content will be\nvalidated. If validation fails, a ``minfraud.InvalidRequestError``\nwill be raised.\n\nIf the dictionary is valid, a request will be made to the web service. If the\nrequest succeeds, a model object for the service response will be returned.\nIf the request fails, one of the errors listed below will be raised.\n\nErrors\n------\n\nThe possible errors are:\n\n* ``minfraud.AuthenticationError`` - This will be raised when the server\n  is unable to authenticate the request, e.g., if the license key or user ID\n  is invalid.\n* ``minfraud.InsufficientFundsError`` - This will be raised when `your\n  account <https://www.maxmind.com/en/account>`_ is out of funds.\n* ``minfraud.InvalidRequestError`` - This will be raised when the server\n  rejects the request as invalid for another reason, such as a missing or\n  reserved IP address. It is also raised if validation of the request before\n  it is sent to the server fails.\n* ``minfraud.HttpError`` - This will be raised when an unexpected HTTP\n  error occurs such as a firewall interfering with the request to the server.\n* ``minfraud.MinFraudError`` - This will be raised when some other error\n  occurs such as unexpected content from the server. This also serves as the\n  base class for the above errors.\n\nExample\n-------\n\n.. code-block:: pycon\n\n    >>> from minfraud import Client\n    >>>\n    >>> client = Client(42, 'licensekey')\n    >>>\n    >>> request = {\n    >>>     'device': {\n    >>>         'ip_address': '81.2.69.160',\n    >>>         'accept_language': 'en-US,en;q=0.8',\n    >>>         'session_age': 3600,\n    >>>         'session_id': 'a333a4e127f880d8820e56a66f40717c',\n    >>>         'user_agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36'\n    >>>     },\n    >>>     'event': {\n    >>>         'shop_id': 's2123',\n    >>>         'type': 'purchase',\n    >>>         'transaction_id': 'txn3134133',\n    >>>         'time': '2014-04-12T23:20:50.052+00:00'\n    >>>     },\n    >>>     'account': {\n    >>>         'user_id': '3132',\n    >>>         'username_md5': '570a90bfbf8c7eab5dc5d4e26832d5b1'\n    >>>     },\n    >>>     'email': {\n    >>>         'address': '977577b140bfb7c516e4746204fbdb01',\n    >>>         'domain': 'maxmind.com'\n    >>>     },\n    >>>     'billing': {\n    >>>         'first_name': 'Jane',\n    >>>         'last_name': 'Doe',\n    >>>         'company': 'Company',\n    >>>         'address': '101 Address Rd.',\n    >>>         'address_2': 'Unit 5',\n    >>>         'city': 'Hamden',\n    >>>         'region': 'CT',\n    >>>         'country': 'US',\n    >>>         'postal': '06510',\n    >>>         'phone_country_code': '1',\n    >>>         'phone_number': '323-123-4321',\n    >>>     },\n    >>>     'shipping': {\n    >>>         'first_name': 'John',\n    >>>         'last_name': 'Doe',\n    >>>         'company': 'ShipCo',\n    >>>         'address': '322 Ship Addr. Ln.',\n    >>>         'address_2': 'St. 43',\n    >>>         'city': 'New Haven',\n    >>>         'region': 'CT',\n    >>>         'country': 'US',\n    >>>         'postal': '06510',\n    >>>         'phone_country_code': '1',\n    >>>         'phone_number': '403-321-2323',\n    >>>         'delivery_speed': 'same_day',\n    >>>     },\n    >>>     'credit_card': {\n    >>>         'bank_phone_country_code': '1',\n    >>>         'avs_result': 'Y',\n    >>>         'bank_phone_number': '800-342-1232',\n    >>>         'last_4_digits': '7643',\n    >>>         'cvv_result': 'N',\n    >>>         'bank_name': 'Bank of No Hope',\n    >>>         'issuer_id_number': '323132'\n    >>>     },\n    >>>     'payment': {\n    >>>         'decline_code': 'invalid number',\n    >>>         'was_authorized': False,\n    >>>         'processor': 'stripe'\n    >>>     },\n    >>>     'shopping_cart': [{\n    >>>         'category': 'pets',\n    >>>         'quantity': 2,\n    >>>         'price': 20.43,\n    >>>         'item_id': 'lsh12'\n    >>>     }, {\n    >>>         'category': 'beauty',\n    >>>         'quantity': 1,\n    >>>         'price': 100.0,\n    >>>         'item_id': 'ms12'\n    >>>     }],\n    >>>     'order': {\n    >>>         'affiliate_id': 'af12',\n    >>>         'referrer_uri': 'http://www.amazon.com/',\n    >>>         'subaffiliate_id': 'saf42',\n    >>>         'discount_code': 'FIRST',\n    >>>         'currency': 'USD',\n    >>>         'amount': 323.21\n    >>>      },\n    >>>     'custom_inputs': {\n    >>>         'section': 'news',\n    >>>         'num_of_previous_purchases': 19,\n    >>>         'discount': 3.2,\n    >>>         'previous_user': True\n    >>>     }\n    >>> }\n    >>>\n    >>> client.score(request)\n    Score(...)\n    >>>\n    >>> client.insights(request)\n    Insights(...)\n    >>>\n    >>> client.factors(request)\n    Factors(...)\n\nRequirements\n------------\n\nThis code requires Python 2.6+ or 3.3+. Older versions are not supported.\nThis library has been tested with CPython and PyPy.\n\nVersioning\n----------\n\nThe minFraud Python API uses `Semantic Versioning <http://semver.org/>`_.\n\nSupport\n-------\n\nPlease report all issues with this code using the `GitHub issue tracker\n<https://github.com/maxmind/minfraud-api-python/issues>`_.\n\nIf you are having an issue with a MaxMind service that is not specific to the\nclient API, please contact `MaxMind support <http://www.maxmind.com/en/support>`_\nfor assistance.\n\nCopyright and License\n---------------------\n\nThis software is Copyright Â© 2015-2018 by MaxMind, Inc.\n\nThis is free software, licensed under the Apache License, Version 2.0.\n",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/minfraud/",
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.maxmind.com/",
    "keywords": "",
    "license": "Apache License 2.0 ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minfraud",
    "package_url": "https://pypi.org/project/minfraud/",
    "platform": "any",
    "project_url": "https://pypi.org/project/minfraud/",
    "project_urls": {
      "Homepage": "http://www.maxmind.com/"
    },
    "release_url": "https://pypi.org/project/minfraud/1.6.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MaxMind minFraud Score, Insights, and Factors API",
    "version": "1.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13334578,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3b0263ea8d3e4a19732a7caa59395838b4e1f195b8d91281fd845f9f8096513",
        "md5": "51d102ea58f602201a3a9f262ab56e27",
        "sha256": "09db71659927d47133cc555dcd0b0e8ae3bc9ee8990e3dbfedb6d37c2d5b60b3"
      },
      "downloads": -1,
      "filename": "minfraud-1.6.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "51d102ea58f602201a3a9f262ab56e27",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "requires_python": null,
      "size": 19885,
      "upload_time": "2018-01-18T18:58:13",
      "upload_time_iso_8601": "2018-01-18T18:58:13.110503Z",
      "url": "https://files.pythonhosted.org/packages/b3/b0/263ea8d3e4a19732a7caa59395838b4e1f195b8d91281fd845f9f8096513/minfraud-1.6.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ff4dbbd8c9ca696796becfa259d6875678046d16d14e0585925aa405ab4ddb5",
        "md5": "90155236a3f37dd8e1bdff40f8ff9d8c",
        "sha256": "67cce309ffda20ea7cfde5f82b98eea93f4c1a89607b256d74e1e2837bec5644"
      },
      "downloads": -1,
      "filename": "minfraud-1.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "90155236a3f37dd8e1bdff40f8ff9d8c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 571561,
      "upload_time": "2018-01-18T18:58:11",
      "upload_time_iso_8601": "2018-01-18T18:58:11.167161Z",
      "url": "https://files.pythonhosted.org/packages/2f/f4/dbbd8c9ca696796becfa259d6875678046d16d14e0585925aa405ab4ddb5/minfraud-1.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}