{
  "info": {
    "author": "Jonas und der Wolf GmbH",
    "author_email": "opensource@jonasundderwolf.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=====================\ndjango-image-cropping\n=====================\n\n.. image:: https://img.shields.io/pypi/v/django-image-cropping.svg\n    :target: https://pypi.python.org/pypi/django-image-cropping\n\n.. image:: https://travis-ci.org/jonasundderwolf/django-image-cropping.png?branch=master\n    :target: http://travis-ci.org/jonasundderwolf/django-image-cropping\n    :alt: Build Status\n\n.. image:: https://img.shields.io/pypi/pyversions/django-image-cropping.svg\n    :target: https://pypi.python.org/pypi/django-image-cropping\n\ndjango-image-cropping is an app for cropping uploaded images via Django's admin backend using `Jcrop\n<https://github.com/tapmodo/Jcrop>`_.\n\nScreenshot:\n\n.. image:: http://www.jonasundderwolf.de/media/images/django_image_cropping_example.png\n\ndjango-image-cropping is perfect when you need images with a specific size for your templates but want your\nusers or editors to upload images of any dimension. It presents a selection with a fixed aspect ratio so your users\ncan't break the layout with oddly-sized images.\n\nThe original images are kept intact and only get cropped when they are displayed.\nLarge images are presented in a small format, so even very big images can easily be cropped.\n\nThe necessary fields, widgets and a template tag for displaying the\ncropped image in your templates are provided.\n\nAlso works with `FeinCMS <https://github.com/feincms/feincms>`_ content types!\n\nInstallation\n============\n\n#. Install django-image-cropping using ``pip``::\n\n    pip install django-image-cropping\n\nBy default ``django-image-cropping`` ships with an ``easy-thumbnails``-backend which requires ``easy-thumbnails`` to also be installed\nand added to the ``INSTALLED_APPS``.\n\nThe `easy-thumbnails` backend requires that you adjust the thumbnail processors in your ``settings``::\n\n    INSTALLED_APPS = [\n        ...\n        'easy_thumbnails',\n        'image_cropping',\n    ]\n\n    from easy_thumbnails.conf import Settings as thumbnail_settings\n    THUMBNAIL_PROCESSORS = (\n        'image_cropping.thumbnail_processors.crop_corners',\n    ) + thumbnail_settings.THUMBNAIL_PROCESSORS\n\n\nConfiguration\n=============\n\nAdd an ``ImageRatioField`` to the model that contains the ``ImageField`` for the images you want to crop.\n\nThe ``ImageRatioField`` simply stores the boundaries of the cropped image.\nIt expects the name of the associated ``ImageField`` and the desired size of the cropped image as arguments.\n\nThe size is passed in as a string and defines the aspect ratio of the selection *as well* as the minimum\nsize for the final image::\n\n    from django.db import models\n    from image_cropping import ImageRatioField\n\n    class MyModel(models.Model):\n        image = models.ImageField(blank=True, upload_to='uploaded_images')\n        # size is \"width x height\"\n        cropping = ImageRatioField('image', '430x360')\n\nYou can configure a `size warning`_ if users try to crop a selection smaller than the defined minimum.\n\nAdmin Integration\n=================\n\nAdd the ``ImageCroppingMixin`` to your ``ModelAdmin``::\n\n    from django.contrib import admin\n    from image_cropping import ImageCroppingMixin\n\n    class MyModelAdmin(ImageCroppingMixin, admin.ModelAdmin):\n        pass\n\n    admin.site.register(MyModel, MyModelAdmin)\n\nIf your setup is correct you should now see the enhanced image widget that provides a selection\narea.\n\n\nBackends\n========\n\ndjango-image-cropping delegates the cropped image generation to a backend.\n\nA backend based on `easy-thumbnails` is provided, but it's possible to use a custom backend.\nThe ``IMAGE_CROPPING_BACKEND`` setting expects a dotted path to a class that implements the required methods.\nYou can omit this setting if you want to use the default backend.\n\nIn case you use a custom backend you can provide an optional dict that will be used to populate the backend's\nconstructor params.\n\nDefault settings::\n\n    IMAGE_CROPPING_BACKEND = 'image_cropping.backends.easy_thumbs.EasyThumbnailsBackend'\n    IMAGE_CROPPING_BACKEND_PARAMS = {}\n\n\nFrontend\n========\n\ndjango-image-cropping provides a templatetag for displaying a cropped thumbnail.\nAny other processor parameter (like ``bw=True`` or ``upscale=True``) will be forwarded to the backend::\n\n    {% cropped_thumbnail yourmodelinstance \"ratiofieldname\" [scale=INT|width=INT|height=INT|max_size=\"INTxINT\"] %}\n\nExample usage::\n\n    {% load cropping %}\n    <img src=\"{% cropped_thumbnail yourmodel \"cropping\" scale=0.5 %}\">\n\nOr generate the URL from Python code in your view::\n\n    from image_cropping.utils import get_backend\n    thumbnail_url = get_backend().get_thumbnail_url(\n        yourmodel.image,\n        {\n            'size': (430, 360),\n            'box': yourmodel.cropping,\n            'crop': True,\n            'detail': True,\n        }\n    )\n\n\neasy_thumbnails\n---------------\n\nYou can also use the standard ``easy-thumbnails`` templatetag with the ``box`` parameter::\n\n    {% load thumbnail %}\n    {% thumbnail yourmodel.image 430x360 box=yourmodel.cropping crop detail %}\n\nOr generate the URL from Python code in your view::\n\n    from easy_thumbnails.files import get_thumbnailer\n    thumbnail_url = get_thumbnailer(yourmodel.image).get_thumbnail({\n        'size': (430, 360),\n        'box': yourmodel.cropping,\n        'crop': True,\n        'detail': True,\n    }).url\n\n\nModelForm\n=========\n\nIf you want to use the cropping widget outside the admin, you'll need to define the ``ImageField`` as\nan ``ImageCropField``::\n\n    from django.db import models\n    from image_cropping import ImageCropField, ImageRatioField\n\n    class MyModel(models.Model):\n        image = ImageCropField(blank=True, upload_to='uploaded_images')\n        # size is \"width x height\"\n        cropping = ImageRatioField('image', '430x360')\n\n\nAlternatively, override the widget in your ModelForm (you just need to do one of these two, not both!)::\n\n    from django import forms\n    from image_cropping import ImageCropWidget\n\n    class MyModelForm(forms.ModelForm):\n        class Meta:\n            widgets = {\n                'image': ImageCropWidget,\n            }\n\n\nRemember to include the form media in the ``<head>`` of your HTML::\n\n    <html>\n      <head>\n        {{ form.media }}\n      </head>\n      <body>\n        {{ form }}\n      </body>\n    </html>\n\nThe cropping itself happens in the ``ImageRatioField``, the ``ImageCropField`` will still behave like a regular ``ImageField``.\n\nIf you're selectively including or excluding fields from the ModelForm, remember to include the ``ImageRatioField``.\n\n\nMultiple formats\n================\n\nIf you need the same image in multiple formats, simply specify another ``ImageRatioField``.\nThis will allow the image to be cropped twice::\n\n    from image_cropping import ImageRatioField, ImageCropField\n\n    image = ImageCropField(blank=True, upload_to='uploaded_images')\n    # size is \"width x height\"\n    list_page_cropping = ImageRatioField('image', '200x100')\n    detail_page_cropping = ImageRatioField('image', '430x360')\n\nIn your templates, use the corresponding ratio field::\n\n    {% load cropping %}\n    {% cropped_thumbnail yourmodel \"list_page_cropping\" %}\n\n\nForeign Keys\n============\n\nIf you need to crop an image contained within another model, referenced by a ForeignKey, the ``ImageRatioField`` is\ncomposed of the ``ForeignKey`` name, a double underscore, and the ``ImageField`` name::\n\n    from django.db import models\n    from image_cropping.fields import ImageRatioField\n\n    class Image(models.Model):\n        image_field = models.ImageField(upload_to='image/')\n\n    class NewsItem(models.Model):\n        title = models.CharField(max_length=255)\n        image = models.ForeignKey(Image)\n        cropping = ImageRatioField('image__image_field', '120x100')\n\nCropping foreign keys only works in the admin for now, as it reuses the ``raw_id`` widget.\n\n\n.. _free cropping:\n\nFree cropping\n=============\n\nIf you do not need a *fixed* ratio, you can disable this constraint by setting ``free_crop`` to ``True``.\nIn this case the size parameter is the desired minimum and is also used for the size-warning::\n\n    from image_cropping import ImageRatioField, ImageCropField\n\n    image = ImageCropField(blank=True, upload_to='uploaded_images')\n\n    # size is \"width x height\" so a minimum size of 200px x 100px would look like this:\n    min_free_cropping = ImageRatioField('image', '200x100', free_crop=True)\n\nUse the ``max_size`` parameter of the templatetag if you want to limit the display size of a thumbnail::\n\n     <img src=\"{% cropped_thumbnail image \"cropping_free\" max_size=\"200x200\" %}\" />\n\n\nDisabling cropping\n==================\n\nIf you want cropping to be optional, use ``allow_fullsize=True`` as an additional keyword argument for your ``ImageRatioField``.\n\nEditors can now switch off cropping by unchecking a checkbox next to the image cropping widget::\n\n     image_with_optional_cropping = ImageRatioField('image', '200x100', allow_fullsize=True)\n\n\nSettings\n========\n\nThumbnail size\n--------------\n\nYou can define the maximum size of the admin preview thumbnail in your ``settings``::\n\n    # size is \"width x height\"\n    IMAGE_CROPPING_THUMB_SIZE = (300, 300)\n\n.. _size warning:\n\nSize warning\n------------\n\nYou can warn users about crop selections that are smaller than the size defined in the ``ImageRatioField``.\nWhen users try to do a smaller selection, a red border appears around the image.\n\nTo use this functionality for a single image add the ``size_warning`` parameter to the ``ImageRatioField``::\n\n    cropping = ImageRatioField('image', '430x360', size_warning=True)\n\nYou can enable this functionality project-wide by adding the following line to your ``settings``::\n\n    IMAGE_CROPPING_SIZE_WARNING = True\n\n\nCustom jQuery\n-------------\n\nBy default the image cropping widget embeds a recent version of jQuery.\n\nYou can point to another version using the ``IMAGE_CROPPING_JQUERY_URL`` setting, though compatibility\nissues may arise if your jQuery version differs from the one that is tested against.\n\nYou can also set ``IMAGE_CROPPING_JQUERY_URL`` to ``None`` to disable inclusion of jQuery by the widget.\nYou are now responsible for including ``jQuery`` yourself, both in the frontend and in the admin interface.\n\nCustom backend\n--------------\n\nYou can define a custom backend::\n\n    IMAGE_CROPPING_BACKEND = 'image_cropping.backends.easy_thumbs.EasyThumbnailsBackend'\n\nYou can provide an optional dict that will be used to populate the backend's\nconstructor::\n\n    IMAGE_CROPPING_BACKEND_PARAMS = {'version_suffix': 'thumb'}\n\nSee the built-in backends on Backends_.\n\n\nTroubleshooting\n===============\n\nThe cropping widget is not displayed when using a ``ForeignKey``.\n    Make sure you do **not** add the corresponding image field to ``raw_id_fields``.\n\n\nChangelog\n=========\n\n1.4\n---\n\n- Removed more old code\n- Move testing and packaging to GitHub Actions\n\n1.3\n---\n\n- Add support for Django 3.0\n- Drop support for Python < 3.5\n- Drop support for Django < 2.2\n\n1.2\n---\n\n- Add support for Django 2.1\n\n1.1\n---\n\n- Make django-image-cropping compatible with Django 1.11\n\n1.0.4\n-----\n\n- Move and encapsulate the logic for creating cropped thumbnails to a swappable backend. (`@fgmacedo <https://github.com/fgmacedo>`_ in #92)\n\n1.0\n---\n\n\"If your software is being used in production, it should probably already be 1.0.0.\" (http://semver.org)\n\n0.9\n---\n\nThis release addresses mainly the test coverage and internal stuff.\n\nNoteable (breaking) changes and things to be considered when upgrading from an older version:\n\n- `django-appconf <https://github.com/jezdez/django-appconf>`_ is now used for handling defaults and settings.\n\n  * **Breaking Change**: JQUERY_URL changed to IMAGE_CROPPING_JQUERY_URL as part of this transition.\n\n- The ``cropped_thumbnail`` tag is now based on Django's ``simple tag``.\n\n  * **Breaking Change**: Arguments for the the tag now need to be put in quotes.\n  * If you are still using Django 1.4 remember that `you can't easily use <http://stackoverflow.com/q/11804315/630877>`_ ``True`` or ``False`` as template tag arguments.\n\n- Any processor parameter (like bw=True or upscale=True) can be used in the ``cropped_thumbnail`` tag.\n\n- Moved inline css to a dedicated ``image_cropping.css`` style sheet\n\n0.8\n---\n\n- **Minimum** requirements changed to **Django 1.4** and **easy-thumbnails 1.4**\n- Added Python 3 compatibility. Python 2.6 is now the minimum required Python version.\n- Added a `free cropping`_ option, so cropping is no longer restricted to fixed ratios.\n- Removed the deprecated ``CropForeignKey`` field.\n\n0.7\n---\n\n- Made the widget for the ``ImageCropField`` overwritable to allow custom widgets. (Remember to use the ``ImageCroppingMixin`` in the admin as the image cropping widgets are no longer implicitly set.)\n- Updated ``Jcrop`` and ``jQuery`` dependencies.\n- Moved docs to *Read the Docs*: https://django-image-cropping.readthedocs.org\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jonasundderwolf/django-image-cropping",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-image-cropping",
    "package_url": "https://pypi.org/project/django-image-cropping/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-image-cropping/",
    "project_urls": {
      "Homepage": "http://github.com/jonasundderwolf/django-image-cropping"
    },
    "release_url": "https://pypi.org/project/django-image-cropping/1.4.0/",
    "requires_dist": [
      "django-appconf (>=1.0.2)"
    ],
    "requires_python": ">=3.5",
    "summary": "A reusable app for cropping images easily and non-destructively in Django",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12823619,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "341ba20e003790839fb198f10063865d113fe4ccecfc1d89056efcb08d9ce9c5",
        "md5": "6e9b81149077c1101e5bf4172e8d20f5",
        "sha256": "fe6a139c6d5dfc480f2a1d4e7e3e928d5edaefc898e17be66bc5f73140762ad9"
      },
      "downloads": -1,
      "filename": "django_image_cropping-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e9b81149077c1101e5bf4172e8d20f5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 52462,
      "upload_time": "2020-04-09T14:54:21",
      "upload_time_iso_8601": "2020-04-09T14:54:21.356492Z",
      "url": "https://files.pythonhosted.org/packages/34/1b/a20e003790839fb198f10063865d113fe4ccecfc1d89056efcb08d9ce9c5/django_image_cropping-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fdff07d0d22a986ba3521fae78febde5c4b24ec619f314c9fd012dd523afd3c9",
        "md5": "8d24d0c07d6f4820c6a7e2b8458690c4",
        "sha256": "6cc4a6bd8901e69b710caceea29b942fdb202da26626313cd9271ae989a83a52"
      },
      "downloads": -1,
      "filename": "django-image-cropping-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8d24d0c07d6f4820c6a7e2b8458690c4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 41006,
      "upload_time": "2020-04-09T14:54:22",
      "upload_time_iso_8601": "2020-04-09T14:54:22.917607Z",
      "url": "https://files.pythonhosted.org/packages/fd/ff/07d0d22a986ba3521fae78febde5c4b24ec619f314c9fd012dd523afd3c9/django-image-cropping-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}