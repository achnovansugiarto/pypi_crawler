{
  "info": {
    "author": "Giorgio Salluzzo",
    "author_email": "giorgio.salluzzo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing"
    ],
    "description": "===============\nmocket /mɔˈkɛt/\n===============\n\n.. image:: https://travis-ci.com/mindflayer/python-mocket.svg?branch=master\n    :target: https://travis-ci.com/mindflayer/python-mocket\n\n.. image:: https://coveralls.io/repos/github/mindflayer/python-mocket/badge.svg?branch=master\n    :target: https://coveralls.io/github/mindflayer/python-mocket?branch=master\n\n.. image:: https://codeclimate.com/github/mindflayer/python-mocket/badges/gpa.svg\n   :target: https://codeclimate.com/github/mindflayer/python-mocket\n   :alt: Code Climate\n\n.. image:: https://requires.io/github/mindflayer/python-mocket/requirements.svg?branch=master\n     :target: https://requires.io/github/mindflayer/python-mocket/requirements/?branch=master\n     :alt: Requirements Status\n\nA socket mock framework\n-------------------------\n    for all kinds of socket *animals*, web-clients included - with gevent/asyncio/SSL support\n\n...and then MicroPython's *urequest* (*mocket >= 3.9.1*)\n\n\nVersioning\n==========\nStarting from *3.7.0*, Mocket major version will follow the same numbering pattern as Python's and therefore indicate the most recent Python version that is supported.\n\nFYI: the last version compatible with Python 2.7 is *3.9.4*, bugfixing or backporting of features introduced after that release will only be available as commercial support.\n\nSupport it\n==========\n*Star* the project on GitHub, *Buy Me a Coffee* clicking the button below or, even better, contribute with patches or documentation.\n\nThanks to `@felixonmars`_ Mocket is available in the `Arch Linux repository`_.\n\n.. _`@felixonmars`: https://github.com/felixonmars\n.. _`Arch Linux repository`: https://www.archlinux.org/packages/community/any/python-mocket/\n\n.. image:: https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\n     :target: https://www.buymeacoffee.com/mULbInw5z\n     :alt: Buy Me A Coffee\n\nHow to use it\n=============\nRead these three blog posts if you want to have a big picture of what *Mocket* is capable of:\n\n- https://medium.com/p/mocket-is-alive-and-is-fighting-with-us-b2810d52597a\n- https://hackernoon.com/make-development-great-again-faab769d264e\n- https://hackernoon.com/httpretty-now-supports-asyncio-e310814704c6\n\nThe starting point to understand how to use *Mocket* to write a custom mock is the following example:\n\n- https://github.com/mindflayer/mocketoy\n\nAs next step, you are invited to have a look at both the implementation of the two mocks it provides:\n\n- HTTP mock (similar to HTTPretty) - https://github.com/mindflayer/python-mocket/blob/master/mocket/mockhttp.py\n- Redis mock (basic implementation) - https://github.com/mindflayer/python-mocket/blob/master/mocket/mockredis.py\n\nPlease also have a look at the huge test suite:\n\n- Tests module at https://github.com/mindflayer/python-mocket/tree/master/tests\n\nInstallation\n============\nUsing pip::\n\n    $ pip install mocket\n\nSpeedups\n========\nMocket uses **xxhash** when available instead of *hashlib.md5* for creating hashes, you can install it as follows::\n\n    $ pip install mocket[speedups]\n\nIssues\n============\nWhen opening an **Issue**, please add few lines of code as failing test, or -better- open its relative **Pull request** adding this test to our test suite.\n\nExample of how to mock an HTTP[S] call\n======================================\nLet's create a new virtualenv with all we need::\n\n    $ virtualenv example\n    $ source example/bin/activate\n    $ pip install pytest requests mocket\n\nAs second step, we create an `example.py` file as the following one:\n\n.. code-block:: python\n\n    import json\n\n    from mocket import mocketize\n    from mocket.mockhttp import Entry\n    import requests\n    import pytest\n\n\n    @pytest.fixture\n    def response():\n        return {\n            \"integer\": 1,\n            \"string\": \"asd\",\n            \"boolean\": False,\n        }\n\n\n    @mocketize  # use its decorator\n    def test_json(response):\n        url_to_mock = 'https://testme.org/json'\n\n        Entry.single_register(\n            Entry.GET,\n            url_to_mock,\n            body=json.dumps(response),\n            headers={'content-type': 'application/json'}\n        )\n\n        mocked_response = requests.get(url_to_mock).json()\n\n        assert response == mocked_response\n\n    # OR use its context manager\n    from mocket import Mocketizer\n\n    def test_json_with_context_manager(response):\n        url_to_mock = 'https://testme.org/json'\n\n        Entry.single_register(\n            Entry.GET,\n            url_to_mock,\n            body=json.dumps(response),\n            headers={'content-type': 'application/json'}\n        )\n\n        with Mocketizer():\n            mocked_response = requests.get(url_to_mock).json()\n\n        assert response == mocked_response\n\nLet's fire our example test::\n\n    $ py.test example.py\n\nExample of how to fake socket errors\n====================================\n\nIt's very important that we test non-happy paths.\n\n.. code-block:: python\n\n    @mocketize\n    def test_raise_exception(self):\n        url = \"http://github.com/fluidicon.png\"\n        Entry.single_register(Entry.GET, url, exception=socket.error())\n        with self.assertRaises(requests.exceptions.ConnectionError):\n            requests.get(url)\n\nExample of how to record real socket traffic\n============================================\n\nYou probably know what *VCRpy* is capable of, that's the *mocket*'s way of achieving it:\n\n.. code-block:: python\n\n    @mocketize(truesocket_recording_dir=tempfile.mkdtemp())\n    def test_truesendall_with_recording_https():\n        url = 'https://httpbin.org/ip'\n\n        requests.get(url, headers={\"Accept\": \"application/json\"})\n        resp = requests.get(url, headers={\"Accept\": \"application/json\"})\n        assert resp.status_code == 200\n\n        dump_filename = os.path.join(\n            Mocket.get_truesocket_recording_dir(),\n            Mocket.get_namespace() + '.json',\n        )\n        with io.open(dump_filename) as f:\n            response = json.load(f)\n\n        assert len(response['httpbin.org']['443'].keys()) == 1\n\nHTTPretty compatibility layer\n=============================\nMocket HTTP mock can work as *HTTPretty* replacement for many different use cases. Two main features are missing:\n\n- URL entries containing regular expressions;\n- response body from functions (used mostly to fake errors, *mocket* doesn't need to do it this way).\n\nTwo features which are against the Zen of Python, at least imho (*mindflayer*), but of course I am open to call it into question.\n\nExample:\n\n.. code-block:: python\n\n    import json\n\n    import aiohttp\n    import asyncio\n    import async_timeout\n    from unittest import TestCase\n\n    from mocket.plugins.httpretty import httpretty, httprettified\n\n\n    class AioHttpEntryTestCase(TestCase):\n        @httprettified\n        def test_https_session(self):\n            url = 'https://httpbin.org/ip'\n            httpretty.register_uri(\n                httpretty.GET,\n                url,\n                body=json.dumps(dict(origin='127.0.0.1')),\n            )\n\n            async def main(l):\n                async with aiohttp.ClientSession(loop=l) as session:\n                    with async_timeout.timeout(3):\n                        async with session.get(url) as get_response:\n                            assert get_response.status == 200\n                            assert await get_response.text() == '{\"origin\": \"127.0.0.1\"}'\n\n            loop = asyncio.get_event_loop()\n            loop.set_debug(True)\n            loop.run_until_complete(main(loop))\n\nWhat about the other socket animals?\n====================================\nUsing *Mocket* with asyncio based clients::\n\n    $ pip install aiohttp\n\nExample:\n\n.. code-block:: python\n\n    class AioHttpEntryTestCase(TestCase):\n        @mocketize\n        def test_http_session(self):\n            url = 'http://httpbin.org/ip'\n            body = \"asd\" * 100\n            Entry.single_register(Entry.GET, url, body=body, status=404)\n            Entry.single_register(Entry.POST, url, body=body*2, status=201)\n\n            async def main(l):\n                async with aiohttp.ClientSession(loop=l) as session:\n                    with async_timeout.timeout(3):\n                        async with session.get(url) as get_response:\n                            assert get_response.status == 404\n                            assert await get_response.text() == body\n\n                    with async_timeout.timeout(3):\n                        async with session.post(url, data=body * 6) as post_response:\n                            assert post_response.status == 201\n                            assert await post_response.text() == body * 2\n\n            loop = asyncio.get_event_loop()\n            loop.run_until_complete(main(loop))\n\n    # or again with a unittest.IsolatedAsyncioTestCase\n    from mocket.async_mocket import async_mocketize\n\n    class AioHttpEntryTestCase(IsolatedAsyncioTestCase):\n        @async_mocketize\n        async def test_http_session(self):\n            url = 'http://httpbin.org/ip'\n            body = \"asd\" * 100\n            Entry.single_register(Entry.GET, url, body=body, status=404)\n            Entry.single_register(Entry.POST, url, body=body * 2, status=201)\n\n            async with aiohttp.ClientSession() as session:\n                with async_timeout.timeout(3):\n                    async with session.get(url) as get_response:\n                        assert get_response.status == 404\n                        assert await get_response.text() == body\n\n                with async_timeout.timeout(3):\n                    async with session.post(url, data=body * 6) as post_response:\n                        assert post_response.status == 201\n                        assert await post_response.text() == body * 2\n                        assert Mocket.last_request().method == 'POST'\n                        assert Mocket.last_request().body == body * 6\n\n\nWorks well with others\n=======================\nUsing *Mocket* as pook_ engine::\n\n    $ pip install mocket[pook]\n\n.. _pook: https://pypi.python.org/pypi/pook\n\nExample:\n\n.. code-block:: python\n\n    import pook\n    from mocket.plugins.pook_mock_engine import MocketEngine\n\n    pook.set_mock_engine(MocketEngine)\n\n    pook.on()\n\n    url = 'http://twitter.com/api/1/foobar'\n    status = 404\n    response_json = {'error': 'foo'}\n\n    mock = pook.get(\n        url,\n        headers={'content-type': 'application/json'},\n        reply=status,\n        response_json=response_json,\n    )\n    mock.persist()\n\n    requests.get(url)\n    assert mock.calls == 1\n\n    resp = requests.get(url)\n    assert resp.status_code == status\n    assert resp.json() == response_json\n    assert mock.calls == 2\n\nFirst appearance\n================\nEuroPython 2013, Florence\n\n- Video: https://www.youtube.com/watch?v=-LvXbl5d02U\n- Slides: https://prezi.com/tmuiaugamsti/mocket/\n- Slides as PDF: https://ep2013.europython.eu/media/conference/slides/mocket-a-socket-mock-framework.pdf",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mindflayer/python-mocket",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mocket",
    "package_url": "https://pypi.org/project/mocket/",
    "platform": "",
    "project_url": "https://pypi.org/project/mocket/",
    "project_urls": {
      "Homepage": "https://github.com/mindflayer/python-mocket"
    },
    "release_url": "https://pypi.org/project/mocket/3.9.38/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Socket Mock Framework - for all kinds of socket animals, web-clients included -         with gevent/asyncio/SSL support",
    "version": "3.9.38",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16930372,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f88008ffdcff2fe2c468982a814e11f4608ae39460be8bc8d08783199959aa3f",
        "md5": "0c3f68eb4516e1c83366fb8017f118b1",
        "sha256": "cfe693043d6885591759eec645d77fc52a7efbdcd9fed2d3e9ad4cc223968b18"
      },
      "downloads": -1,
      "filename": "mocket-3.9.38.tar.gz",
      "has_sig": false,
      "md5_digest": "0c3f68eb4516e1c83366fb8017f118b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 74902,
      "upload_time": "2021-01-12T08:45:52",
      "upload_time_iso_8601": "2021-01-12T08:45:52.060962Z",
      "url": "https://files.pythonhosted.org/packages/f8/80/08ffdcff2fe2c468982a814e11f4608ae39460be8bc8d08783199959aa3f/mocket-3.9.38.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}