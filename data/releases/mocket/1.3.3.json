{
  "info": {
    "author": "Andrea de Marco, Giorgio Salluzzo",
    "author_email": "24erre@gmail.com, giorgio.salluzzo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing"
    ],
    "description": "===============\nmocket /mɔˈkɛt/\n===============\n\n.. image:: https://api.travis-ci.org/mocketize/python-mocket.png?branch=master\n    :target: http://travis-ci.org/mocketize/python-mocket\n\n.. image:: https://coveralls.io/repos/mocketize/python-mocket/badge.png?branch=master\n    :target: https://coveralls.io/r/mocketize/python-mocket\n\nA socket mock framework\n-----------------------\nSince we basically never documented the project, at least till now, we invite you to have a look at both the implementation of the two mocks we provide:\n - HTTP mock at https://github.com/mocketize/python-mocket/blob/master/mocket/mockhttp.py\n - Redis mock at https://github.com/mocketize/python-mocket/blob/master/mocket/mockredis.py\nPlease also have a look at our huge test suite:\n - Tests module at https://github.com/mocketize/python-mocket/tree/master/tests\n\nInstallation\n============\nUsing pip::\n\n    $ pip install mocket\n\nIssues\n============\nWhen opening an **Issue**, please add few lines of code as failing test, or -better- open its relative **Pull request** adding this test to our test suite.\n\nQuick example\n=============\nLet's create a new virtualenv with all we need::\n\n    $ virtualenv example\n    $ source example/bin/activate\n    $ pip install pytest requests mocket\n\nAs second step, we create an `example.py` file as the following one:\n\n.. code-block:: python\n\n    import json\n \n    from mocket.mocket import mocketize\n    from mocket.mockhttp import Entry\n    import requests\n    import pytest\n \n \n    @pytest.fixture\n    def response():\n        return {\n            \"integer\": 1,\n            \"string\": \"asd\",\n            \"boolean\": False,\n        }\n \n \n    @mocketize\n    def test_json(response):\n        url_to_mock = 'http://testme.org/json'\n \n        Entry.single_register(\n            Entry.GET,\n            url_to_mock,\n            body=json.dumps(response),\n            headers={'content-type': 'application/json'}\n        )\n \n        mocked_response = requests.get(url_to_mock).json()\n \n        assert response == mocked_response\n\n\nLet's fire our example test::\n\n    $ py.test example.py\n\nVideo presentation\n==================\nEuroPython 2013, Florence\n\nhttps://www.youtube.com/watch?v=-LvXbl5d02U\n\n.. image:: http://badge.kloud51.com/pypi/v/mocket.png\n\n.. image:: http://badge.kloud51.com/pypi/d/mocket.png\n\n.. image:: http://badge.kloud51.com/pypi/w/mocket.png\n\n.. image:: http://badge.kloud51.com/pypi/e/mocket.png\n\n.. image:: http://badge.kloud51.com/pypi/l/mocket.png\n\n.. image:: http://badge.kloud51.com/pypi/f/mocket.png\n\n.. image:: http://badge.kloud51.com/pypi/py_versions/mocket.png\n\n.. image:: http://badge.kloud51.com/pypi/s/mocket.png",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mocketize/python-mocket",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mocket",
    "package_url": "https://pypi.org/project/mocket/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mocket/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/mocketize/python-mocket"
    },
    "release_url": "https://pypi.org/project/mocket/1.3.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Socket Mock Framework",
    "version": "1.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16930372,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c84c07778ea36afb4506306e72ca861e639d16a826e940c66fc4598d00491b9",
        "md5": "052b433048e4e5254335cdbea74c2a56",
        "sha256": "03d5092d66dfc3eae800ee743b79d51322baedd7f486b5086642b952aedfa810"
      },
      "downloads": -1,
      "filename": "mocket-1.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "052b433048e4e5254335cdbea74c2a56",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8503,
      "upload_time": "2016-08-17T20:40:12",
      "upload_time_iso_8601": "2016-08-17T20:40:12.814124Z",
      "url": "https://files.pythonhosted.org/packages/4c/84/c07778ea36afb4506306e72ca861e639d16a826e940c66fc4598d00491b9/mocket-1.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}