{
  "info": {
    "author": "Ben Caller",
    "author_email": "bcaller [at] gmail dot com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "Document Object Identifiers and Python and Markdown, together!\r\n==============================================================\r\n\r\nType journal article DOIs, and have them automagically converted into a\r\nbeautiful bibliography.\r\n\r\n|travis| |PyPI version|\r\n\r\nA Markdown extension that looks through your text for things like\r\n``doi:10.1234/j.banana.5678``, looks up the metadata on the crossref API\r\nand outputs text according to your requirements\r\n\r\nAdd ``'markdown_doi'`` to your Markdown call and watch the magic unfold:\r\n\r\n.. code:: python\r\n\r\n    >>> from markdown import Markdown\r\n\r\n    >>> markdown = Markdown(extensions=['markdown_doi']\r\n    >>> markdown.convert('doi:10.1016/j.applanim.2010.02.004')\r\n\r\noutputs\r\n\r\n.. code:: html\r\n\r\n    <p><span class=\"doi\"><a href=\"http://dx.doi.org/10.1016/j.applanim.2010.02.004\">Are cows more likely to lie down the longer they stand?</a> <span class=\"doi-year\">(2010)</span></span></p>\r\n\r\nYou can enable the caching if for example you are using Pelican and\r\nconstantly regenerating the same files\r\n\r\n.. code:: python\r\n\r\n    >>> markdown = Markdown(extensions=['markdown_doi(cache_file=.doi_cache)']\r\n\r\nThe templating function takes the metadata Dict from the message key of\r\n`the JSON API\r\nresponse <https://api.crossref.org/works/10.1016/j.applanim.2010.02.004>`__\r\nand returns a ``markdown.util.etree.ElementTree``. See the default\r\n``template_title_link_year`` function.\r\n\r\n.. code:: python\r\n\r\n    from markdown_doi import makeExtension as makeDoiExtension\r\n\r\n    def templater(metadata, doi_pattern):\r\n        el = markdown.util.etree.Element(\"span\")\r\n        el.text = '%(given)s %(family)s' % metadata['author'][0]\r\n        return el\r\n\r\n    ext = makeDoiExtension(templater=templater)\r\n    md = markdown.Markdown(extensions=[ext])\r\n    html = md.convert('hello 10.1016/j.applanim.2010.02.004')\r\n    assert html == 'hello <p><span>Bert J. Tolkamp</span></p>'\r\n\r\nOptions\r\n-------\r\n\r\n+---------------+--------------------------------------------+-----------+----------------------------------------------------------------------------------------------+\r\n| Option        | Type                                       | Default   | Description                                                                                  |\r\n+===============+============================================+===========+==============================================================================================+\r\n| templater     | (Dict, LinkPattern) -> etree.ElementTree   | None      | Function which renders the metadata as an element tree                                       |\r\n+---------------+--------------------------------------------+-----------+----------------------------------------------------------------------------------------------+\r\n| cache\\_file   | str                                        | ''        | File name that can store a cache of the DOIs looked up                                       |\r\n+---------------+--------------------------------------------+-----------+----------------------------------------------------------------------------------------------+\r\n| cache         | dict                                       | None      | Instead, you can pass a map from DOI to metadata dict as the cache rather than a file name   |\r\n+---------------+--------------------------------------------+-----------+----------------------------------------------------------------------------------------------+\r\n\r\nInstallation\r\n------------\r\n\r\nFrom Github:\r\n\r\n::\r\n\r\n    git clone https://github.com/bcaller/markdown_doi.git\r\n    pip install -e ./markdown_doi\r\n\r\nFrom Pypi:\r\n\r\n::\r\n\r\n    pip install markdown_doi\r\n\r\n.. |travis| image:: https://travis-ci.org/bcaller/markdown_doi.svg\r\n   :target: https://travis-ci.org/bcaller/markdown_doi\r\n.. |PyPI version| image:: https://badge.fury.io/py/markdown_doi.svg\r\n   :target: https://badge.fury.io/py/markdown_doi",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bcaller/markdown_doi",
    "keywords": "doi research journals markdown",
    "license": "AGPLv3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "markdown-doi",
    "package_url": "https://pypi.org/project/markdown-doi/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/markdown-doi/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/bcaller/markdown_doi"
    },
    "release_url": "https://pypi.org/project/markdown-doi/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Convert doi:10.xxxxx/xxxx to nice bibliographic metadata",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4727829,
  "urls": [],
  "vulnerabilities": []
}