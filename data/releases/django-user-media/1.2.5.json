{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "as profile pictures, foto albums etc...\n\nHome-page: https://github.com/bitmazk/django-user-media\nAuthor: Martin Brochhaus\nAuthor-email: martin.brochhaus@bitmazk.com\nLicense: The MIT License\nDescription: Django User Media\n        =================\n        \n        Almost all modern web apps allow their users to upload content such as audio,\n        video or images. This raises a number of issues if that content should not be\n        visible to the whole world by default.\n        \n        If you add an ImageField to your user model, you need to come up with a good\n        idea on how to save those images. It is probably not a good idea to keep the\n        original filenames as they might disturb your server's file system and open\n        doors for hackers, who might try to brute-force against your\n        ``/media/user_profiles/`` in the hope to steal some valuable files.\n        \n        Since it seems inevitable to implement a function for Django's FileField's\n        ``upload_to`` attribute I thought that this might be a candidate for a reusable\n        app.\n        \n        \n        Prerequisites\n        -------------\n        \n        You need at least the following packages in your virtualenv:\n        \n        * Django\n        * django-libs\n        * easy_thumbnails\n        * django-generic-positions\n        * simplejson\n        \n        \n        Installation\n        ------------\n        \n        To get the latest stable release from PyPi::\n        \n            $ pip install django-user-media\n        \n        To get the latest commit from GitHub::\n        \n            $ pip install -e git://github.com/bitmazk/django-user-media.git#egg=user_media\n        \n        Add the app to your ``INSTALLED_APPS``::\n        \n            INSTALLED_APPS = [\n                ...\n                'user_media',\n                'easy_thumbnails',\n                'django_libs',\n                'generic_positions',\n        \n            ]\n        \n        Hook the app into your main ``urls.py``::\n        \n            urlpatterns += patterns('',\n                ...\n                url(r'^umedia/', include('user_media.urls')),\n            )\n        \n        Run the migrations to create the app's database tables::\n        \n            $ ./manage.py migrate user_media\n        \n        \n        Usage\n        -----\n        \n        \n        Add generic relation\n        ++++++++++++++++++++\n        \n        Let's assume that you have a ``UserProfile`` model and you want to add an\n        ``avatar`` field to that model.\n        \n        First you might want to add a [``GenericRelation``](https://docs.djangoproject.com/en/1.8/ref/contrib/contenttypes/#django.contrib.contenttypes.fields.GenericRelation) to your ``UserProfile``\n        model::\n        \n            from django.contrib.contenttypes import fields\n        \n        \n            class UserProfile(models.Model):\n                ...\n                user = models.ForeignKey(\n                    getattr(settings, 'AUTH_USER_MODEL', 'auth.User'),\n                )\n        \n                avatar = fields.GenericRelation(\n                    'user_media.UserMediaImage',\n                )\n        \n        \n        Add property\n        ++++++++++++\n        \n        Now you will be able to get all uploaded images that belong to a\n        ``UserProfile`` by doing this::\n        \n            profile = UserProfile.objects.get(pk=1)\n            images = profile.avatar.all()\n        \n        It makes sense to add a convenience method to your ``UserProfile`` model::\n        \n            class UserProfile(models.Model):\n                ...\n                @property\n                def avatar(self):\n                    try:\n                        return self.avatar.all()[0]\n                    except IndexError:\n                        return None\n        \n        \n        Add link to update form\n        +++++++++++++++++++++++\n        \n        In your templates you can now provide a link to the image creation view like\n        this (assuming that your ``UserProfile`` object is called ``object`` in the\n        template's context)::\n        \n            <a href=\"{% url \"user_media_image_create\" content_type=\"userprofile\" object_id=object.pk %}\">Upload your picture</a>\n        \n        Note that ``userprofile`` is the model name that the ``ContentType`` of your\n        ``UserProfile`` model would return. You can figure this out with ``./manage.py\n        shell`` for example::\n        \n            $ ./manage.py shell\n            In [1]: from django.contrib.contenttypes.models import ContentType\n            In [2]: from your_app.models import UserProfile\n            In [3]: ContentType.objects.get_for_model(UserProfile).model\n            Out [1]: u'userprofile'\n        \n        When visiting that link, the user will see an image upload form. You might\n        want to override that template (``user_media/usermediaimage_form.html``).\n        \n        After uploading the image the view should redirect back to the absolute url\n        of your ``UserProfile``. If you want to redirect to another URL, you can\n        provide a ``next`` URL parameter via POST or GET::\n        \n                <a href=\"{% url \"user_media_image_create\" content_type=\"userprofile\" object_id=object.pk %}?next=/foo/bar\">Upload your picture</a>\n        \n        \n        Display images\n        ++++++++++++++\n        \n        Now you should have all building blocks that you need to add links or buttons\n        to your templates that call the views of this application. On your\n        ``UserProfile`` detail view you could display the avatar, if available::\n        \n            {% if object.avatar %}\n                <img src=\"{{ MEDIA_URL }}{{ object.avatar.image }}\" />\n            {% endif %}\n        \n        \n        Delete and edit images\n        ++++++++++++++++++++++\n        \n        Or in your ``UserProfile`` update view you could display a link to upload a\n        new image or to delete the existing image::\n        \n            {% if form.instance.get_avatar %}\n                <p><img src=\"{{ MEDIA_URL }}{{ form.instance.avatar.image }}\" /></p>\n                <a href=\"{% url \"user_media_image_delete\" pk=form.instance.avatar.pk %}\">Delete picture</a>\n            {% else %}\n                <a href=\"{% url \"user_media_image_create\" content_type=\"userprofile\" object_id=form.instance.pk %}\">Add profile picture</a>\n            {% endif %}\n        \n        The delete link in this example will render the\n        ``user_media/usermediaimage_confirm_delete.html`` template, which you might\n        want to override in your project.\n        \n        A link for editing an existing image would look like this::\n        \n                <a href=\"{% url \"user_media_image_edit\" pk=form.instance.avatar.pk %}\">Edit picture</a>\n        \n        \n        Upload from your own model form\n        +++++++++++++++++++++++++++++++\n        \n        Often you might not want to provide a dedicated form for uploading images but\n        you might want to have an image field right on the model form of your content\n        object. In this case you can inherit from `UserMediaImageFormMixin`::\n        \n            from django import forms\n            from user_media.forms import UserMediaImageFormMixin\n            from yourapp.models import UserProfile\n        \n            class UserProfileForm(UserMediaImageFormMixin, forms.ModelForm):\n                image_label = _('Image')\n                require_user_media_image = False\n                image_field_name = 'user_media_image'\n                image_widget = forms.ClearableFileInput()  # optional\n        \n                # your form implementation\n        \n        The mixin will dynamically add a `forms.ImageField` with the name\n        `user_media_image` to your form. You can control the label of that field by\n        setting the `image_label` attribute on your form class. You can also make the\n        field mandatory by setting the `require_user_media_image` attribute to `True`.\n        \n        AJAX calls\n        ----------\n        \n        You might want to call the ``CreateImageView`` from an AJAX call, i.e. when\n        displaying the form in a jQuery modal. To make life easier the view will\n        return a different template when the request is an AJAX call.\n        \n        The names of the alternative templates are\n        ``user_media/partials/ajax_usermediaimage_form.html`` and\n        ``user_media/partials/ajax_usermediaimage_confirm_delete.html``.\n        \n        Make sure to add a user field to the object::\n        \n            user = models.ForeignKey(\n                getattr(settings, 'AUTH_USER_MODEL', 'auth.User'),\n                verbose_name=_('User'),\n            )\n        \n        Alternatively you can add a function called ``user_can_edit``: ::\n        \n            def user_can_edit(self, user):\n                \"\"\"\n                Function, which returns True if the user is allowed edit the instance.\n        \n                \"\"\"\n                if user in self.users.all():\n                    return True\n                return False\n        \n        \n        AJAX multi image upload\n        -----------------------\n        \n        If you want to upload multiple images at once, only prepare the following\n        templates::\n        \n            user_media/partials/image_upload.html\n            user_media/partials/image.html\n        \n        Then add styles and jQuery scripts. We've used blueimp's file upload, so you\n        make it work by adding jQuery & jQuery-UI plus the scripts in::\n        \n            user_media/partials/image_upload_scripts.html\n        \n        Now include the form::\n        \n            {% include \"user_media/partials/image_upload.html\" with object=request.user.get_profile maximum='5' hide_cutout='0' mode=\"multiple\" c_type=\"profile\" %}\n        \n        You can use the variable `hide_cutout=\"0\"` to hide the link that triggers the\n        jQuery crop functionality.\n        \n        You can limit the maximum upload by using the following setting::\n        \n            USER_MEDIA_UPLOAD_MAXIMUM = 5\n        \n        \n        AJAX single image upload\n        ------------------------\n        \n        You can also combine single and multiple uploads. Just use the templates and\n        add the wanted variables::\n        \n            {% include \"user_media/partials/image_upload.html\" with object=request.user.get_profile field='logo' mode=\"single\" show_main_thumb=\"True\" %}\n        \n        Extra classes for newly loaded image\n        ------------------------------------\n        \n        If you are using the single image upload, your newly uploaded image will\n        replace the current `img`-element in your `userMediaImageUploaded`-element.\n        Sometimes you might have special CSS classes on your images and you might want\n        to add those classes again to the `img` that has just been added to the DOM. In\n        order to define the classes that should be added to newly loaded image, just\n        add the `data-img-class=\"myclass1 myclass2\"` attribute to the element that has\n        the `userMediaImageUploaded` class.\n        \n        jQuery image cropping\n        ---------------------\n        \n        You can easily add a frontend image cropping. First of all, add a new thumbnail\n        processor ``user_media.processors.crop_box``::\n        \n            THUMBNAIL_PROCESSORS = (\n                'user_media.processors.crop_box',\n                ...\n                'easy_thumbnails.processors.colorspace',\n                'easy_thumbnails.processors.autocrop',\n                'easy_thumbnails.processors.scale_and_crop',\n                'easy_thumbnails.processors.filters',\n            )\n        \n        Then add the cropping template and the relevant js libraries::\n        \n            {% include \"user_media/partials/crop.html\" %}\n        \n            <script src=\"{% static \"django_libs/js/getcookie.js\" %}\"></script>\n            <script src=\"{% static \"user_media/js/libs/jquery.Jcrop.js\" %}\"></script>\n        \n        You can modify the settings by overwriting the input fields in ``crop.html``.\n        \n        Check out: http://deepliquid.com/content/Jcrop.html\n        \n        Now, if a user clicks on ``Select another cutout``, the original image will be\n        pushed into the crop area, where the user is able to select a frame. If she\n        then saves the cropped area, the coordinates will be saved to the\n        ``UserMediaImage`` instance.\n        \n        By using the new thumbnail processor it's easy to use this coordinates to\n        generate thumbnails::\n        \n            {% thumbnail image.image image.small_size box=image.box_coordinates %}\n        \n        \n        Settings\n        --------\n        \n        USER_MEDIA_THUMB_SIZE_SMALL\n        +++++++++++++++++++++++++++\n        \n        Default: (95, 95)\n        \n        Size of the small auto-generated thumbnails, which are processed after\n        upload/cropping.\n        \n        \n        USER_MEDIA_THUMB_SIZE_LARGE\n        +++++++++++++++++++++++++++\n        \n        Default: (150, 150)\n        \n        Size of the large auto-generated thumbnails, which are processed after\n        upload/cropping.\n        \n        \n        USER_MEDIA_UPLOAD_MAXIMUM\n        +++++++++++++++++++++++++\n        \n        Default: 3\n        \n        Amount of images to be uploaded at a maximum.\n        \n        \n        Contribute\n        ----------\n        \n        If you want to contribute to this project, please perform the following steps\n        \n        .. code-block:: bash\n        \n            # Fork this repository\n            # Clone your fork\n            mkvirtualenv -p python2.7 django-user-media\n            make develop\n        \n            git co -b feature_branch master\n            # Implement your feature and tests\n            git add . && git commit\n            git push -u origin feature_branch\n            # Send us a pull request for your feature branch\n        \n        In order to run the tests, simply execute ``tox``. This will install two new\n        environments (for Django 1.8 and Django 1.9) and run the tests against both\n        environments.\n        \nKeywords: django,common,reusable,media,files,upload\nPlatform: OS Independent\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-user-media",
    "package_url": "https://pypi.org/project/django-user-media/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-user-media/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/django-user-media/1.2.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A reusable app to graceously handle files that your users might upload, such",
    "version": "1.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3726333,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3773e8352d7612b2f7602f9804c7322db4e9636d3b784cfce43f85284fc6792f",
        "md5": "e135f0588c6eaadfc6b735cd24992369",
        "sha256": "bf7703ca501a53eab3935e951d6003ce133251043031b921caa7f5d41078d4a7"
      },
      "downloads": -1,
      "filename": "django-user-media-1.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "e135f0588c6eaadfc6b735cd24992369",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 590015,
      "upload_time": "2018-04-02T13:51:48",
      "upload_time_iso_8601": "2018-04-02T13:51:48.932171Z",
      "url": "https://files.pythonhosted.org/packages/37/73/e8352d7612b2f7602f9804c7322db4e9636d3b784cfce43f85284fc6792f/django-user-media-1.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}