{
  "info": {
    "author": "Mikhail Podgurskiy",
    "author_email": "kmmbvnr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "Django friendly finite state machine support\r\n============================================\r\n\r\ndjango-fsm adds declarative states management for django models.\r\nInstead of adding some state field to a django model, and manage it\r\nvalues by hand, you could use FSMState field and mark model methods\r\nwith the `transition` decorator. Your method will contain the side-effects\r\nof the state change.\r\n\r\nThe decorator also takes a list of conditions, all of which must be met\r\nbefore a transition is allowed.\r\n\r\nInstallation\r\n------------\r\n\r\n    $ pip install django-fsm\r\n\r\nOr, for the latest git version\r\n\r\n    $ pip install -e git://github.com/kmmbvnr/django-fsm.git#egg=django-fsm\r\n\r\nLibrary have full Python 3 support, for graph transition drawing\r\nyou should install python3 compatible graphviz version\r\nfrom git+https://github.com/philipaxer/pygraphviz\r\n\r\nUsage\r\n-----\r\n\r\nAdd FSMState field to your model\r\n\r\n    from django_fsm.db.fields import FSMField, transition\r\n\r\n    class BlogPost(models.Model):\r\n        state = FSMField(default='new')\r\n\r\n\r\nUse the `transition` decorator to annotate model methods\r\n\r\n    @transition(field=state, source='new', target='published')\r\n    def publish(self):\r\n        \"\"\"\r\n        This function may contain side-effects, \r\n        like updating caches, notifying users, etc.\r\n        The return value will be discarded.\r\n        \"\"\"\r\n\r\n`source` parameter accepts a list of states, or an individual state.\r\nYou can use `*` for source, to allow switching to `target` from any state.\r\n\r\nIf calling publish() succeeds without raising an exception, the state field\r\nwill be changed, but not written to the database.\r\n\r\n    from django_fsm.db.fields import can_proceed\r\n\r\n    def publish_view(request, post_id):\r\n        post = get_object__or_404(BlogPost, pk=post_id)\r\n        if not can_proceed(post.publish):\r\n             raise Http404;\r\n\r\n        post.publish()\r\n        post.save()\r\n        return redirect('/')\r\n\r\nIf you require some conditions to be met before changing state, use the\r\n`conditions` argument to `transition`. `conditions` must be a list of functions\r\nthat takes one argument, the model instance.  The function must return either\r\n`True` or `False` or a value that evaluates to `True` or `False`. If all\r\nfunctions return `True`, all conditions are considered to be met and transition\r\nis allowed to happen. If one of the functions return `False`, the transition\r\nwill not happen. These functions should not have any side effects.\r\n\r\nYou can use ordinary functions\r\n\r\n    def can_publish(instance):\r\n        # No publishing after 17 hours\r\n        if datetime.datetime.now().hour > 17:\r\n           return False\r\n        return True\r\n\r\nOr model methods\r\n\r\n    def can_destroy(self):\r\n        return self.is_under_investigation()\r\n\r\nUse the conditions like this:\r\n\r\n    @transition(field=state, source='new', target='published', conditions=[can_publish])\r\n    def publish(self):\r\n        \"\"\"\r\n        Side effects galore\r\n        \"\"\"\r\n\r\n    @transition(field=state, source='*', target='destroyed', conditions=[can_destroy])\r\n    def destroy(self):\r\n        \"\"\"\r\n        Side effects galore\r\n        \"\"\"\r\n\r\nYou could instantiate field with protected=True option, that prevents direct state field modification\r\n\r\n    class BlogPost(models.Model):\r\n        state = FSMField(default='new', protected=True)\r\n\r\n    model = BlogPost()\r\n    model.state = 'invalid' # Raises AttributeError\r\n\r\n\r\n### get_available_FIELD_transitions\r\nReturns all transitions data available in current state\r\n\r\n### get_all_FIELD_transitions\r\nEnumerates all declared transitions\r\n\r\n\r\n### Foreign Key constraints support \r\n\r\nIf you store the states in the db table you could use FSMKeyField to\r\nensure Foreign Key database integrity.\r\n\r\nIn your model : \r\n\r\n    class DbState(models.Model):\r\n        id = models.CharField(primary_key=True, max_length=50)\r\n        label = models.CharField(max_length=255)\r\n        \r\n        def __unicode__(self);\r\n            return self.label\r\n\r\n    \r\n    class BlogPost(models.Model):\r\n        state = FSMKeyField(DbState, default='new')\r\n    \r\n        @transition(field=state, source='new', target='published')\r\n        def publish(self):\r\n            pass\r\n    \r\nIn your fixtures/initial_data.json :\r\n\r\n    [...\r\n        {\r\n            \"pk\": \"new\", \r\n            \"model\": \"myapp.dbstate\", \r\n            \"fields\": {\r\n                \"label\": \"_NEW_\"\r\n            }\r\n        },\r\n        {\r\n            \"pk\": \"published\", \r\n            \"model\": \"myapp.dbstate\", \r\n            \"fields\": {\r\n                \"label\": \"_PUBLISHED_\"\r\n            }\r\n        }, ...\r\n    ]\r\n\r\nNote : source and target parameters in @transition decorator use pk values of DBState model\r\nas names, even if field \"real\" name is used, without _id postfix, as field parameter.\r\n\r\n\r\n### Integer Field support \r\n\r\nYou can also use `FSMIntegerField`. This is handy when you want to use enum style constants. This field is also `db_index=True` by default for speedy db loookups.\r\n\r\n\tclass BlogPostStateEnum(object):\r\n\t    NEW = 10\r\n\t    PUBLISHED = 20\r\n\t    HIDDEN = 30\r\n\t\r\n\tclass BlogPostWithIntegerField(models.Model):\r\n\t    state = FSMIntegerField(default=BlogPostStateEnum.NEW)\r\n\t\r\n\t    @transition(source=BlogPostStateEnum.NEW, target=BlogPostStateEnum.PUBLISHED)\r\n\t    def publish(self):\r\n\t        pass\r\n\r\n\r\n### Signals\r\n\r\n`django_fsm.signals.pre_transition` and `django_fsm.signals.post_transition` are called before \r\nand after allowed transition. No signals on invalid transition are called.\r\n\r\nArguments sent with these signals:\r\n\r\n**sender**\r\n   The model class.\r\n\r\n**instance**\r\n   The actual instance being procceed\r\n\r\n**name**\r\n   Transition name\r\n\r\n**source**\r\n   Source model state\r\n\r\n**target**\r\n   Target model state\r\n\r\n\r\n### Drawing transitions\r\n\r\n    Renders a graphical overview of your models states transitions\r\n\r\n    # Create a dot file\r\n    $ ./manage.py graph_transitions > transitions.dot\r\n\r\n    # Create a PNG image file only for specific model\r\n    $ ./manage.py graph_transitions -o blog_transitions.png myapp.Blog\r\n\r\n\r\nChangelog\r\n---------\r\n    \r\n<img src=\"https://f.cloud.github.com/assets/41479/2227946/a9e77760-9ad0-11e3-804f-301d075470fe.png\" alt=\"django-fsm\" width=\"100px\"/>\r\n\r\n### django-fsm 2.0.0 2014-03-15\r\n* Backward incompatible release\r\n* All public code import moved directly to django_fsm package\r\n* Correct support for several @transitions decorator with different source states and conditions on same method\r\n* save parameter from transition decorator removed\r\n* get_available_FIELD_transitions return Transition data object instead of tuple\r\n* Models got get_available_FIELD_transitions, even if field specified as string reference\r\n* New get_all_FIELD_transitions method contributed to class\r\n\r\n### django-fsm 1.6.0 2014-03-15\r\n* FSMIntegerField and FSMKeyField support\r\n\r\n### django-fsm 1.5.1 2014-01-04\r\n\r\n* Ad-hoc support for state fields from proxy and inherited models\r\n\r\n### django-fsm 1.5.0 2013-09-17\r\n\r\n* Python 3 compatibility\r\n\r\n### django-fsm 1.4.0 2011-12-21\r\n\r\n* Add graph_transition command for drawing state transition picture\r\n\r\n### django-fsm 1.3.0 2011-07-28\r\n\r\n* Add direct field modification protection\r\n\r\n### django-fsm 1.2.0 2011-03-23\r\n\r\n* Add pre_transition and post_transition signals\r\n\r\n### django-fsm 1.1.0 2011-02-22\r\n\r\n* Add support for transition conditions \r\n* Allow multiple FSMField in one model\r\n* Contribute get_available_FIELD_transitions for model class\r\n\r\n### django-fsm 1.0.0 2010-10-12\r\n\r\n* Initial public release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/kmmbvnr/django-fsm",
    "keywords": "django",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fsm",
    "package_url": "https://pypi.org/project/django-fsm/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-fsm/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/kmmbvnr/django-fsm"
    },
    "release_url": "https://pypi.org/project/django-fsm/2.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django friendly finite state machine support.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14763537,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3998309b2977a453062449c213c8b1877d825890cb6732604f8e61aac5cea08",
        "md5": "c0c61f3240d694eee92c0cea966d605d",
        "sha256": "2af5edf873e99025c5f0708f331acbbbccbb6befa32f01e3c9a7c0d8af84d12f"
      },
      "downloads": -1,
      "filename": "django-fsm-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c0c61f3240d694eee92c0cea966d605d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4788,
      "upload_time": "2014-03-15T10:37:32",
      "upload_time_iso_8601": "2014-03-15T10:37:32.169678Z",
      "url": "https://files.pythonhosted.org/packages/d3/99/8309b2977a453062449c213c8b1877d825890cb6732604f8e61aac5cea08/django-fsm-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}