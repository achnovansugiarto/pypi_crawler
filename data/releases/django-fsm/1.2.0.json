{
  "info": {
    "author": "Mikhail Podgurskiy",
    "author_email": "kmmbvnr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "============================================\r\nDjango friendly finite state machine support\r\n============================================\r\n\r\ndjango-fsm adds declarative states management for django models.\r\nInstead of adding some state field to a django model, and manage it\r\nvalues by hand, you could use FSMState field and mark model methods\r\nwith the `transition` decorator. Your method will contain the side-effects\r\nof the state change.\r\n\r\nThe decorator also takes a list of conditions, all of which must be met\r\nbefore a transition is allowed.\r\n\r\nInstallation\r\n============\r\n\r\n    $ pip install django-fsm\r\n\r\nOr, for the latest git version\r\n\r\n    $ pip install -e git://github.com/kmmbvnr/django-fsm.git#egg=django-fsm\r\n\r\n\r\nUsage\r\n=====\r\n\r\nAdd FSMState field to you model\r\n    from django_fsm.db.fields import FSMField, transition\r\n\r\n    class BlogPost(models.Model):\r\n        state = FSMField(default='new')\r\n\r\n\r\nUse the `transition` decorator to annotate model methods\r\n\r\n    @transition(source='new', target='published')\r\n    def publish(self):\r\n        \"\"\"\r\n        This function may contain side-effects, \r\n        like updating caches, notifying users, etc.\r\n        The return value will be discarded.\r\n        \"\"\"\r\n\r\n`source` parameter accepts a list of states, or an individual state.\r\nYou can use `*` for source, to allow switching to `target` from any state.\r\n\r\nIf calling publish() succeeds without raising an exception, the state field\r\nwill be changed, but not written to the database.\r\n\r\n    from django_fsm.db.fields import can_proceed\r\n\r\n    def publish_view(request, post_id):\r\n        post = get_object__or_404(BlogPost, pk=post_id)\r\n        if not can_proceed(post.publish):\r\n             raise Http404;\r\n\r\n        post.publish()\r\n        post.save()\r\n        return redirect('/')\r\n\r\nIf you use the transition decorator with the `save` argument set to `True`,\r\nthe new state will be written to the database\r\n\r\n    @transition(source='new', target='published', save=True)\r\n    def publish(self):\r\n        \"\"\"\r\n        Side effects other than changing state goes here\r\n        \"\"\"\r\n\r\nIf you require some conditions to be met before changing state, use the\r\n`conditions` argument to `transition`. `conditions` must be a list of functions\r\nthat take one argument, the model instance.  The function must return either\r\n`True` or `False` or a value that evaluates to `True` or `False`. If all\r\nfunctions return `True`, all conditions are considered to be met and transition\r\nis allowed to happen. If one of the functions return `False`, the transition\r\nwill not happen. These functions should not have any side effects.\r\n\r\nYou can use ordinary functions\r\n\r\n    def can_publish(instance):\r\n        # No publishing after 17 hours\r\n        if datetime.datetime.now().hour > 17:\r\n           return False\r\n        return True\r\n\r\nOr model methods\r\n\r\n    def can_destroy(self):\r\n        return self.is_under_investigation()\r\n\r\nUse the conditions like this:\r\n\r\n    @transition(source='new', target='published', conditions=[can_publish])\r\n    def publish(self):\r\n        \"\"\"\r\n        Side effects galore\r\n        \"\"\"\r\n\r\n    @transition(source='*', target='destroyed', conditions=[can_destroy])\r\n    def destroy(self):\r\n        \"\"\"\r\n        Side effects galore\r\n        \"\"\"\r\n\r\nget_available_FIELD_transitions\r\n-------------------------------\r\n\r\nYou could specify FSMField explicitly in transition decorator.\r\n\r\n    class BlogPost(models.Model):\r\n        state = FSMField(default='new')\r\n\r\n        @transition(field=state, source='new', target='published')\r\n        def publish(self):\r\n    \t    pass\r\n\r\nThis allows django_fsm to contribute to model class get_available_FIELD_transitions method,\r\nthat returns list of (target_state, method) available from current model state\r\n\r\n### Foreign Key constraints support \r\n\r\nIf you store the states in the db table you could use FSMKeyField to\r\nensure Foreign Key database integrity.\r\n\r\nSignals\r\n-------\r\n\r\n`django_fsm.signals.pre_transition` and `django_fsm.signals.pre_transition` called before \r\nand after allowed transition. No signals on invalid transition call.\r\n\r\nArguments sent with these signals:\r\n\r\n**sender**\r\n   The model class.\r\n\r\n**instance**\r\n   The actual instance being procceed\r\n\r\n**name**\r\n   Transition name\r\n\r\n**source**\r\n   Source model state\r\n\r\n**target**\r\n   Target model state\r\n\r\n\r\nChangelog\r\n---------\r\n\r\ndjango-fsm 1.2.0 2011-03-23\r\n    * Add pre_transition and post_transition signals\r\n\r\ndjango-fsm 1.1.0 2011-02-22\r\n    * Add support for transition conditions \r\n    * Allow multiple FSMField in one model\r\n    * Contribute get_available_FIELD_transitions for model class\r\n\r\ndjango-fsm 1.0.0 2010-10-12\r\n    * Initial public release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/kmmbvnr/djang-fsm",
    "keywords": "django",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fsm",
    "package_url": "https://pypi.org/project/django-fsm/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-fsm/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/kmmbvnr/djang-fsm"
    },
    "release_url": "https://pypi.org/project/django-fsm/1.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django friendly finite state machine support.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14763537,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffc33ef66eec66d7a326bd31c21c12c14d0a322e87fb593a0b37e1101d104523",
        "md5": "9ea04046bb2960cbc1c7141a92117b78",
        "sha256": "3cfca40f0276aebac9a41160c8e26554590d8fb88f4bc031ac321f1982bad9e3"
      },
      "downloads": -1,
      "filename": "django-fsm-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9ea04046bb2960cbc1c7141a92117b78",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5969,
      "upload_time": "2011-03-23T02:41:05",
      "upload_time_iso_8601": "2011-03-23T02:41:05.417093Z",
      "url": "https://files.pythonhosted.org/packages/ff/c3/3ef66eec66d7a326bd31c21c12c14d0a322e87fb593a0b37e1101d104523/django-fsm-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}