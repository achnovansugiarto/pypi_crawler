{
  "info": {
    "author": "Mathieu Pasquet",
    "author_email": "kiorky@cryptelium.net",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Buildout",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "******************************************************************************\nRecipe for compiling and installing software with or without minitage\n******************************************************************************\n\n.. contents::\n\n=======================\nIntroduction\n=======================\n\nThe egg has those entry point:\n\n    - *egg*: install python eggs / packages 'setuptoolisables'\n\n\n\n\nThe reasons why i have rewrite yet another buildout recipes builder are:\n\n    - Support for downloading stuff\n    - Do not rely on easy_install dependency system\n    - Support on the fly patchs for eggs and other distribution.\n    - Support multiple hooks at each stage of the build system.\n    - Robust offline mode\n    - We like pypi, but offer a mode to scan for eggs without need to check\n      the index,\n    - Support malformed or not indexed distributions.\n      In other terms, we provide an url, and the recipe builds it, that's all.\n    - Support automaticly minitage dependencies and rpath linking.\n\n\n\nYou can browse the code on minitage's following resources:\n\n    - http://git.minitage.org/git/minitage/eggs/minitage.recipe.egg/\n    - http://www.minitage.org/trac/browser/minitage/eggs/minitage.recipe.egg\n\n\n\nYou can migrate your buldouts without any effort with buildout.minitagificator:\n\n    - http://pypi.python.org/pypi/buildout.minitagificator\n\n\n\n===============================================\nminitage.recipe.egg\n===============================================\n\n\nAbstract\n-----------------\n    - This recipe intends to install eggs and python software\n    - Its heavilly inspired by zc.recipe.eggs* and try to completly replace it whereas be API compatbile.\n    - You can use it in conjunction with the buildout.minitagificator extension which monkey patch zc.buildout to use minitage recipes.\n    - The recipe has a robust offline mode.\n    - What we can do that zc.recipe.egg wouldnt do, either at all or not in the way we want to:\n\n        * Don't rely on easy_install to detect and install dependencies, that can lead to versions inccompatibilities\n        * Handles and preserve eggs extra dependencies\n        * Apply specific patches for eggs based on their name and them generate a specific egg with a specific version, burried in the buildout via the \"versions\".\n        * Make the minitage environnent comes into the environment when building if any, making compilation steps easy if you have declared and build the neccessary dependencies.\n        * Be able to install unindexed at all stuff, just by precising url to install, that can be even an automatic checkout from any repository.\n        * You have hooks to play with the recipe, if it doesnt fit exactly to your need, you can hook for a specific egg at any point of the build.\n        * Check md5 on indexes which append md5 fragments on urls, to verify package integrity\n\n    - If you need scripts generation, just use the minitage.recipe:scripts recipe, it's a specialized recipe of this one. Its use is similar, with just a bunch more options.\n\nSpecific options\n-----------------\n\nPlease look for options at : http://pypi.python.org/pypi/minitage.recipe.common#options-shared-by-all-the-recipes\n\n* urls\n\n    See the shared options for more information on how to set them.\n    This is how to specify a distrbituion with is not indexed on pypi and where find-links dance can not work.\n    This is also how to specify to install something from svn::\n\n        urls = http://foo.tld/my_super_egg|svn|666 # checkout and install this egg from svn at revision 666\n\n    The directory bit can be used to set the subdirectory to cd to find the setup.py\n    eg::\n\n        urls = http://foo.tld/my_super_egg|svn|666|subdirectory # checkout and install this egg from svn at revision 666 and will cd to subdirectory to do the setup.py dance\n\n\n* eggs\n\n    A list of egg requirements to install without the version specs bit.::\n\n        Plone\n        lxml\n\n* EGGNAME-patch-options\n    patch binary to use for this egg\n* EGGNAME-patch-binary\n    Options to give to the patch program when applying patches for this egg\n* EGGNAME-patches\n    Specific patchs for an egg name to apply at install time::\n\n        Django-patches = ${buildout:directory}/foo.patch\n\n* EGGNAME-UNAME-patches\n    Same as previous, but will just occurs on this UNAME specifc OS (linux|freebsd|darwin)\n    Specific patchs for an egg name to apply at install time::\n\n        Django-linux-patches = ${buildout:directory}/foo.patch\n\n* EGGNAME-VERSION-patches\n    patches apply only on this specific version\n\n* EGGNAME-VERSION-UNAME-patches\n    patches apply only on this specific version\n\n\n* versions\n    Default to buildout:versions. versions part to use to pin the version of the installed eggs.\n    It defaults to buildout's one\n* index\n    Custom eggs index (not pypi/simple). It defaults to buildout's one\n* find-links\n    additionnal links vhere we can find eggs. It defaults to buildout's one\n* extra-paths\n        Extra paths to include in a generated script or at build time.\n* relative-paths\n    If set to true, then egg paths will be generated relative to the script path.\n    This allows a buildout to be moved without breaking egg paths.\n    This option can be set in either the script section or in the buildout section.\n* Specifying the python to use, two ways:\n\n    * python\n        The name of a section to get the Python executable from. If not specified, then\n        the buildout python option is used. The Python executable is found in the\n        executable option of the named section. It defaults to buildout's one\n    * executable\n        path to the python executable to use.\n\n* hooks\n\n  A hook is in the form /path/to/hook:CALLABLE::\n\n        myhook=${buildout:directory}/toto.py:foo\n\n  Where we have toto.py::\n\n        def foo(options, buildout):\n            return 'Hourray'\n\n  The complete possible hooks list:\n\n    * post-download-hook\n        hook executed after each download\n    * post-checkout-hook\n        hook executed after each checkout\n    * EGGNAME-pre-setup-hook\n        hook executed before running the setup.py dance\n    * EGGNAME-post-setup-hook\n        hook executed after running the setup.py dance\n\n\nBDIST EGGS OPTIONS:\n\nYou can have global and per distributions bdist_ext options.\n\n* (EGGNAME-)define\n\n    A comma-separated list of names of C preprocessor variables to define.\n\n* (EGGNAME-)undef\n\n    A comman separated list of names of C preprocessor variables to undefine.\n\n* (EGGNAME-)link-objects\n\n    The name of an link object to link against. Due to limitations in distutils and desprite the option name, only a single link object can be specified.\n\n* (EGGNAME-)debug\n\n    Compile/link with debugging information\n\n* (EGGNAME-)force\n\n    Forcibly build everything (ignore file timestamps)\n\n* (EGGNAME-)compiler\n\n    Specify the compiler type\n\n* (EGGNAME-)swig\n\n    The path to the swig executable\n* (EGGNAME-)swig-cpp\n\n    Make SWIG create C++ files (default is C)\n\n* (EGGNAME-)swig-opts\n\n    List of SWIG command line options\n\n\n* (EGGNAME-)bdistext-OPTIONNAME\n\n    will add an entry in the setup.cfg's bdist_egg like:\n\n        OPTIONNAME = foo\n\nPatches\n--------\n\n    * When you use patches for an egg, his version will become ::\n\n        Django-1.0-final -> Django-1.0-final-ZMinitagePatched-$PatchesNamesComputation$\n\n    * This name have some Z* inside to make some precedence on other eggs at the same version. (see setuptools naming scheme)\n    * After that the egg is created, the buildout is backed up and patched to point to this version\n    * Thus, you can have in your common egg cache, this egg for your specific project, and the classical one for others.\n      This can be interessant, for example, for the zope RelStorage patch to apply on ZODB code.\n\nDetailled documentation\n-------------------------\n\nInstalling eggs from index or find links, the classical way to install python packages\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nWe need to specify a find-links entry to make the recipe find our 'foo' egg as it is not on pypi\nAs we want to show the update capability of the recipe, we will first install the oldest foo version.\n\nLet's create a buildout configuration file and a basic egg not published on pypi::\n\n    >>> rmdir(tempdir)\n    >>> mkdir(tempdir)\n    >>> cd(tempdir)\n    >>> a = [mkdir(d) for d in ('eggs', 'develop-eggs', 'bin', 'src')]\n    >>> install_develop_eggs(['minitage.recipe'])\n    >>> install_eggs_from_pathes(['zc.buildout'], sys.path)\n    >>> touch('buildout.cfg')\n    >>> sh('buildout -o bootstrap')\n    buildout -o bootstrap...\n    >>> if not os.path.exists('foo'):\n    ...     mkdir('foo')\n    ... else:\n    ...     rmdir(foo)\n    ...     mkdir('foo')\n    >>> touch('foo/setup.py', data=\"\"\"\n    ... from setuptools import setup\n    ... setup(name='foo', version='1.0')\n    ...\n    ... \"\"\")\n    >>> touch('foo/toto.py', data=\"\"\"\n    ... def f():\n    ...     print \"foo\"\n    ...\n    ... \"\"\")\n    >>> noecho = [os.remove(d) for d in os.listdir('.') if '.tar.gz' in d]\n    >>> os.chdir('foo')\n    >>> sh('python setup.py sdist')\n    p...\n    >>> touch('setup.py', data=\"\"\"\n    ... from setuptools import setup\n    ... setup(name='foo', version='2.0')\n    ...\n    ... \"\"\")\n    >>> sh('python setup.py sdist')\n    p...\n    >>> noecho = [shutil.copy(os.path.join('dist', d), os.path.join('..', d)) for d in os.listdir('dist')]\n    >>> os.chdir('..')\n    >>> index_url = start_server(os.path.sep.join(tempdir))\n    >>> data = \"\"\"\n    ... [versions]\n    ... foo=1.0\n    ... [buildout]\n    ... download-cache=${buildout:directory}\n    ... parts =\n    ...     part\n    ... [part]\n    ... recipe=minitage.recipe.egg\n    ... find-links=%(index)s\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> noecho = [remove(os.path.join('eggs', egg)) for egg in os.listdir('eggs') if 'foo' in egg]\n    >>> sh('bin/buildout -vvvvv install part')\n    bin/...\n    Installing part.\n    minitage.recipe: Installing python egg(s)...\n    minitage.recipe: Downloading http://...:.../foo-1.0.tar.gz in /tmp/buildout.test/minitage/eggs/foo-1.0.tar.gz\n    minitage.recipe: Unpacking in ...\n    Processing foo-1.0.tar.gz...\n    minitage.recipe: Installed foo 1.0 (/tmp/buildout.test/eggs/foo-1.0-p....egg)...\n\n\nStatic distribution dev+static urls\n++++++++++++++++++++++++++++++++++++++++++++++++++\nYou can also install directly from urls.\nWe ll use it to check the already present distribution files in the cache.\n\n    >>> data = \"\"\"\n    ... [versions]\n    ... mr.developer=0.15\n    ... [buildout]\n    ... versions = versions\n    ... download-cache=${buildout:directory}\n    ... parts =\n    ...     part\n    ... [part]\n    ... recipe = minitage.recipe.egg\n    ... eggs=mr.developer\n    ... [a]\n    ... recipe=minitage.recipe.egg\n    ... urls=\n    ...     http://pypi.python.org/packages/source/m/minitage.core/minitage.core-1.0.4.tar.gz#md5=1e30ceabd1b012e33b1d2f327f6609b5\n    ...     http://pypi.python.org/packages/source/m/minitage.paste/minitage.paste-1.1.tar.gz#md5=b9076b78a17f2247f68d232368fcc8f0\n    ... \"\"\"\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvvv install a') #doctest +REPORT_NDIFF\n    b...\n    Installing a...\n    minitage.recipe: Downloading http://pypi.python.org/packages/source/m/minitage.core/minitage.core-1.0.4.tar.gz#md5=1e30ceabd1b012e33b1d2f327f6609b5 in /tmp/buildout.test/minitage/eggs/minitage.core-1.0.4.tar.gz_c3e78ea4294cdd0a243fbea6e2aa9757/minitage.core-1.0.4.tar.gz...\n    minitage.recipe: Installed minitage.core 1.0.4 (/tmp/buildout.test/eggs/minitage.core-1.0.4-py...egg).\n    minitage.recipe: Pinning custom egg version in buildout, trying to write the configuration\n    minitage.recipe: CREATING buildout backup in /tmp/buildout.test/buildout.cfg.before.fixed_version.bak...\n    minitage.recipe: Downloading http://pypi.python.org/packages/source/m/minitage.paste/minitage.paste-1.1.tar.gz#md5=b9076b78a17f2247f68d232368fcc8f0 in /tmp/buildout.test/minitage/eggs/minitage.paste-1.1.tar.gz_d3403e6128eddb2b99063674ff8105a1/minitage.paste-1.1.tar.gz...\n    minitage.recipe: Installed minitage.paste 1.1 (/tmp/buildout.test/eggs/minitage.paste-1.1-py...egg).\n    minitage.recipe: Pinning custom egg version in buildout, trying to write the configuration\n    minitage.recipe: CREATING buildout backup in /tmp/buildout.test/buildout.cfg.before.fixed_version.bak...\n\nAs we are installing from an url, we must pin the version to be sure to use this egg,\neven if we have some other similar egg on index or find-links.\nSee the versions pinned to use your downloaded stuff\n\n    >>> cat('buildout.cfg')\n    <BLANKLINE>\n    [versions]\n    mr.developer=0.15\n    minitage.core = 1.0.4\n    minitage.paste = 1.1\n    [buildout]\n    versions = versions\n    download-cache=${buildout:directory}\n    parts =\n        part\n    [part]\n    recipe = minitage.recipe.egg\n    eggs=mr.developer\n    [a]\n    recipe=minitage.recipe.egg\n    urls=\n        http://pypi.python.org/packages/source/m/minitage.core/minitage.core-1.0.4.tar.gz#md5=1e30ceabd1b012e33b1d2f327f6609b5\n        http://pypi.python.org/packages/source/m/minitage.paste/minitage.paste-1.1.tar.gz#md5=b9076b78a17f2247f68d232368fcc8f0\n\nIf we try to install a newer version, via an url, it will work, even if the version is pinned.\n\n    >>> data = \"\"\"\n    ... [versions]\n    ... mr.developer=0.15\n    ... [buildout]\n    ... versions = versions\n    ... download-cache=${buildout:directory}\n    ... parts =\n    ...     part\n    ... [part]\n    ... recipe = minitage.recipe.egg\n    ... eggs=mr.developer\n    ... [a]\n    ... recipe=minitage.recipe.egg\n    ... urls=\n    ...     http://pypi.python.org/packages/source/m/minitage.core/minitage.core-1.0.33.zip#md5=9d778f890a35e06113425c303a612259\n    ...     http://pypi.python.org/packages/source/m/minitage.paste/minitage.paste-1.1.tar.gz#md5=b9076b78a17f2247f68d232368fcc8f0\n    ... \"\"\"\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install a')\n    b...\n    >>> cat('buildout.cfg')\n    <BLANKLINE>\n    [versions]...\n    minitage.core = 1.0.33...\n\nIf we try to rebuild the egg, we cannot, as the same egg is already built.\nThis is to prevent rebuilding triggered by buildout each time we launch it,\nand also to delete already good versions present in the cache.\n\n    >>> sh('bin/buildout -ovvvvv install a')\n    b...\n    minitage.recipe: If you want to rebuild, please do 'rm -rf /tmp/buildout.test/eggs/minitage.core-1.0.33-py...egg'...\n\n\n\nOffline and newest modes\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nWe have ways to make buildout not download the latest versions found\non indexes and be very conservative on what we already got local.\n\nLet's create a buildout configuration file and a basic egg not published on pypi, and install it::\n\n    >>> rmdir(tempdir)\n    >>> mkdir(tempdir)\n    >>> cd(tempdir)\n    >>> a = [mkdir(d) for d in ('eggs', 'develop-eggs', 'bin', 'src')]\n    >>> install_develop_eggs(['minitage.recipe'])\n    >>> install_eggs_from_pathes(['zc.buildout'], sys.path)\n    >>> touch('buildout.cfg')\n    >>> sh('buildout -o bootstrap')\n    buildout -o bootstrap...\n    >>> if not os.path.exists('foo'):\n    ...     mkdir('foo')\n    ... else:\n    ...     rmdir(foo)\n    ...     mkdir('foo')\n    >>> touch('foo/setup.py', data=\"\"\"\n    ... from setuptools import setup\n    ... setup(name='foo', version='1.0')\n    ...\n    ... \"\"\")\n    >>> touch('foo/toto.py', data=\"\"\"\n    ... def f():\n    ...     print \"foo\"\n    ...\n    ... \"\"\")\n    >>> noecho = [os.remove(d) for d in os.listdir('.') if '.tar.gz' in d]\n    >>> os.chdir('foo')\n    >>> sh('python setup.py sdist')\n    p...\n    >>> touch('setup.py', data=\"\"\"\n    ... from setuptools import setup\n    ... setup(name='foo', version='2.0')\n    ...\n    ... \"\"\")\n    >>> sh('python setup.py sdist')\n    p...\n    >>> noecho = [shutil.copy(os.path.join('dist', d), os.path.join('..', d)) for d in os.listdir('dist')]\n    >>> os.chdir('..')\n    >>> index_url = start_server(os.path.sep.join(tempdir))\n    >>> data = \"\"\"\n    ... [versions]\n    ... foo=1.0\n    ... [buildout]\n    ... download-cache=${buildout:directory}\n    ... parts =\n    ...     part\n    ... [part]\n    ... recipe=minitage.recipe.egg\n    ... find-links=%(index)s\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> noecho = [remove(os.path.join('eggs', egg)) for egg in os.listdir('eggs') if 'foo' in egg]\n    >>> sh('bin/buildout -vvvvv install part')\n    bin/...\n    Installing part.\n    minitage.recipe: Installing python egg(s)...\n    minitage.recipe: Downloading http://...:.../foo-1.0.tar.gz in /tmp/buildout.test/minitage/eggs/foo-1.0.tar.gz\n    minitage.recipe: Unpacking in ...\n    Processing foo-1.0.tar.gz...\n    minitage.recipe: Installed foo 1.0 (/tmp/buildout.test/eggs/foo-1.0-p....egg)...\n\nWell, now, we are 1.0.\nRemoving the version bit, but choosing to be non newest will make\nbuildout not to install the new foo-2.0 version.\n\n    >>> data = \"\"\"\\\n    ... [versions]\n    ... [buildout]\n    ... download-cache=${buildout:directory}\n    ... parts =\n    ...     part\n    ... versions = versions\n    ... [t]\n    ... recipe=minitage.recipe.egg\n    ... find-links=%(index)s\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -Nvvvvv install t')\n    b...\n    minitage.recipe: Installing python egg(s).\n    minitage.recipe: Picked: foo = 1.0\n    minitage.recipe: All egg dependencies seem to be installed!...\n\nIdem in offline mode.\n\n    >>> sh('bin/buildout -ovvvvv install t')\n    b...\n    minitage.recipe: Picked: foo = 1.0\n    minitage.recipe: All egg dependencies seem to be installed!...\n\nBut then, going online/newest will trigger the installation of the 2.0 egg.\n\n    >>> sh('bin/buildout -nvvvvv install t')\n    b...\n    minitage.recipe: Picked: foo = 2.0\n    minitage.recipe: All egg dependencies seem to be installed!...\n\nFile urls work in offline mode.\n\n    >>> data = \"\"\"\n    ... [buildout]\n    ... download-cache=${buildout:directory}\n    ... parts =\n    ...     part\n    ... [part]\n    ... recipe=minitage.recipe.egg\n    ... urls=file://${buildout:directory}/foo-2.0.tar.gz\n    ... \"\"\"\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install part')\n    b...\n    >>> cat('buildout.cfg')\n    <BLANKLINE>\n    [buildout]\n    download-cache=${buildout:directory}\n    parts =\n        part\n    versions = versions\n    [part]\n    recipe=minitage.recipe.egg\n    urls=file://${buildout:directory}/foo-2.0.tar.gz...\n    [versions]\n    foo = 2.0...\n    >>> noecho = [remove(os.path.join('eggs', egg)) for egg in os.listdir('eggs') if 'foo' in egg]\n    >>> [egg for egg in os.listdir('eggs') if 'foo' in egg]\n    []\n    >>> sh('bin/buildout -o install part')\n    b...\n    >>> [egg for egg in os.listdir('eggs') if 'foo' in egg]\n    ['foo-2.0-py...egg']\n\n\nInstalling eggs with a patch\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nWe need to specify a find-links entry to make the recipe find our 'foo' egg as it is not on pypi\nAs we want to show the update capability of the recipe, we will first install the oldest foo version.\n\nLet's create a buildout installation::\n\n    >>> rmdir(tempdir)\n    >>> mkdir(tempdir)\n    >>> cd(tempdir)\n    >>> a = [mkdir(d) for d in ('eggs', 'develop-eggs', 'bin', 'src')]\n    >>> install_develop_eggs(['minitage.recipe'])\n    >>> install_eggs_from_pathes(['zc.buildout'], sys.path)\n    >>> touch('buildout.cfg')\n    >>> sh('buildout -o bootstrap')\n    buildout -o bootstrap...\n    >>> if not os.path.exists('foo'):\n    ...     mkdir('foo')\n    ... else:\n    ...     rmdir(foo)\n    ...     mkdir('foo')\n    >>> touch('foo/setup.py', data=\"\"\"\n    ... from setuptools import setup\n    ... setup(name='foo', version='1.0')\n    ...\n    ... \"\"\")\n    >>> touch('foo/toto.py', data=\"\"\"\n    ... def f():\n    ...     print \"foo\"\n    ...\n    ... \"\"\")\n    >>> noecho = [os.remove(d) for d in os.listdir('.') if '.tar.gz' in d]\n    >>> os.chdir('foo')\n    >>> sh('python setup.py sdist')\n    p...\n    >>> touch('setup.py', data=\"\"\"\n    ... from setuptools import setup\n    ... setup(name='foo', version='2.0')\n    ...\n    ... \"\"\")\n    >>> sh('python setup.py sdist')\n    p...\n    >>> noecho = [shutil.copy(os.path.join('dist', d), os.path.join('..', d)) for d in os.listdir('dist')]\n    >>> os.chdir('..')\n    >>> touch('patch', data=\"\"\"\n    ... --- foo.old/setup.py    2009-04-18 13:36:40.199680168 +0200\n    ... +++ foo/setup.py        2009-04-18 13:26:12.307692349 +0200\n    ... @@ -2,3 +2,7 @@\n    ...  from setuptools import setup\n    ...  setup(name='foo', version='2.0')\n    ...\n    ... +\n    ... +\n    ... +print 'patched'\n    ... +\n    ... \"\"\")\n    >>> index_url = start_server(os.path.sep.join(tempdir))\n\nPatching is easy, just put your patches in YouEgg-patches.\n\n    >>> data = \"\"\"\n    ... [versions]\n    ... foo=1.0\n    ... [buildout]\n    ... download-cache=${buildout:directory}\n    ... parts =\n    ...     part\n    ... [part]\n    ... recipe=minitage.recipe.egg\n    ... find-links=%(index)s\n    ... foo-patches = ${buildout:directory}/patch\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout install part')\n    bin/buildout install part...\n    can't find file to patch at input line 4\n    Perhaps you used the wrong -p or --strip option?\n    The text leading up to this was:\n    --------------------------\n    |\n    |--- foo.old/setup.py...\n    |+++ foo/setup.py...\n    --------------------------\n    No file to patch.  Skipping patch.\n    1 out of 1 hunk ignored...\n    minitage.recipe: Installation error.\n    minitage.recipe: Message was:\n            ('Failed', 'patch -t -Np0 < /tmp/buildout.test/minitage/eggs/patches/foo/1.0/patch_d96115b00b41e282469f73708c68bdaf/patch')...\n\nOups, the patch level ! .\n\n    >>> data = \"\"\"\\\n    ... [versions]\n    ... foo=1.0\n    ... [buildout]\n    ... download-cache=${buildout:directory}\n    ... parts =\n    ...     part\n    ... [part]\n    ... recipe=minitage.recipe.egg\n    ... find-links=%(index)s\n    ... eggs=foo\n    ... foo-patches = ${buildout:directory}/patch\n    ... foo-patch-options = -Np1\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install part')\n    b...\n    minitage.recipe: Pinning custom egg version in buildout, trying to write the configuration\n    minitage.recipe: CREATING buildout backup in /tmp/buildout.test/buildout.cfg.before.fixed_version.bak...\n    minitage.recipe: All egg dependencies seem to be installed!...\n\nNow that we have it, try to resintall.\n\n    >>> sh('bin/buildout -vvvvv install part')\n    bin/buildout...\n    minitage.recipe: We have the distribution that satisfies 'foo==1.0-ZMinitagePatched-Patch'.\n    minitage.recipe: Pinning custom egg version in buildout, trying to write the configuration\n    minitage.recipe: Version already pinned, nothing has been wroten...\n\nIn all cases our buildout is patched.\n\n    >>> cat('buildout.cfg')\n    [versions]\n    foo...=...1.0-ZMinitagePatched-Patch...\n\n\nInstalling eggs with custom build_ext_options\n++++++++++++++++++++++++++++++++++++++++++++++++\n::\n\n    >>> rmdir(tempdir)\n    >>> mkdir(tempdir)\n    >>> cd(tempdir)\n    >>> a = [mkdir(d) for d in ('eggs', 'develop-eggs', 'bin', 'src')]\n    >>> install_develop_eggs(['minitage.recipe'])\n    >>> install_eggs_from_pathes(['zc.buildout'], sys.path)\n    >>> touch('buildout.cfg')\n    >>> sh('buildout -o bootstrap')\n    buildout -o bootstrap...\n    >>> index_url = start_server(os.path.sep.join(tempdir))\n    >>> if not os.path.exists('foo'):\n    ...     mkdir('foo')\n    ... else:\n    ...     rmdir('foo')\n    ...     mkdir('foo')\n    >>> cd('foo')\n    >>> touch('setup.py', data=\"\"\"\n    ... from setuptools import setup\n    ... import os\n    ... if os.path.exists('setup.cfg'):\n    ...     print 'setup.cfg:'\n    ...     print '---------------'\n    ...     print open('setup.cfg').read()\n    ... setup(name='foo', version='2.0')\n    ...\n    ... \"\"\")\n    >>> sh('python setup.py sdist')\n    p...\n    >>> noecho = [shutil.copy(os.path.join('dist', d), os.path.join('..', d)) for d in os.listdir('dist')]\n    >>> cd('..')\n\nJust add the bdist_ext options you want to the buildout\n\n    >>> data = \"\"\"\n    ... [versions]\n    ... [buildout]\n    ... download-cache=${buildout:directory}\n    ... parts =\n    ...     part\n    ... [part]\n    ... recipe=minitage.recipe.egg\n    ... find-links=%(index)s\n    ... define=Foo=1,Bar=2\n    ... bdistext-foo = bar\n    ... bdistext-bar = titi\n    ... foo-bdistext-foo = tutu\n    ... foo-swig-cpp = toto\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install part')\n    b...\n    minitage.recipe: Using bdist_ext option: define = Foo=1,Bar=2\n    minitage.recipe: Using bdist_ext option: bar = titi\n    minitage.recipe: Using bdist_ext option: foo = bar...\n    minitage.recipe: foo: Using bdist_ext option: swig-cpp = toto\n    minitage.recipe: foo: Using bdist_ext option: foo = tutu...\n    setup.cfg:\n    ---------------\n    [egg_info]\n    tag_build =\n    tag_date = 0\n    tag_svn_revision = 0\n    <BLANKLINE>\n    [build_ext]\n    foo = tutu\n    bar = titi\n    swig-cpp = toto\n    define = Foo=1,Bar=2...\n    setup.cfg:\n    ---------------\n    [egg_info]\n    tag_build =\n    tag_date = 0\n    tag_svn_revision = 0\n    <BLANKLINE>\n    [build_ext]\n    foo = tutu\n    bar = titi\n    swig-cpp = toto\n    define = Foo=1,Bar=2...\n    minitage.recipe: All egg dependencies seem to be installed!...\n\n\n\n=======================\nCHANGELOG\n=======================\n\n\n\nUP\n-----\n\n    - specific dir changepath fixed\n    - modify how environ is computed\n    - ugly bugfix when your egg cache is not on the same partition as the\n      buildout as it make cross device references errors when renaming from\n      sandbox\n    - zipped egg bugfix\n    - make sdist take precedence over eggs when you are patching on the fly.\n    - bugfix for compatibility with python2.4 and urlparse(tuple)\n    - add bdist_ext options support like zc.recipe.egg:custom\n    - make recipe cooler with distribution filename identifiers\n    - split tests in multiple files\n\n1.38\n------\n\n    - decorator helper\n\n1.37\n------\n\n    - fix exception mappings when a patch fails\n\n1.36\n--------\n\n    - fix tests develop eggs\n\n1.35\n-------\n\n    - splitted out from minitage.recipe",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://cheeseshop.python.org/pypi/minitage.recipe.egg",
    "keywords": "development buildout recipe",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "minitage.recipe.egg",
    "package_url": "https://pypi.org/project/minitage.recipe.egg/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/minitage.recipe.egg/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://cheeseshop.python.org/pypi/minitage.recipe.egg"
    },
    "release_url": "https://pypi.org/project/minitage.recipe.egg/1.61/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "zc.buildout recipes to compile and install software or python packages and generate scripts or configuration files.",
    "version": "1.61",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 794817,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e880dfbea5b13ceaeb606dfce033ae9b7319c1d6b2af0d2a6e420260dfe553f",
        "md5": "5cd1575bc19d8537c6944027513ee338",
        "sha256": "4b5f830aa6fb5ae737aadfeda265fd63290eccd748389968d549477a342577c0"
      },
      "downloads": -1,
      "filename": "minitage.recipe.egg-1.61.zip",
      "has_sig": false,
      "md5_digest": "5cd1575bc19d8537c6944027513ee338",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 51573,
      "upload_time": "2009-11-30T20:05:08",
      "upload_time_iso_8601": "2009-11-30T20:05:08.598577Z",
      "url": "https://files.pythonhosted.org/packages/0e/88/0dfbea5b13ceaeb606dfce033ae9b7319c1d6b2af0d2a6e420260dfe553f/minitage.recipe.egg-1.61.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}