{
  "info": {
    "author": "Bouke Haarsma",
    "author_email": "bouke@haarsma.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Security",
      "Topic :: System :: Systems Administration :: Authentication/Directory"
    ],
    "description": "================================\nDjango Two-Factor Authentication\n================================\n\n.. image:: https://travis-ci.org/Bouke/django-two-factor-auth.png?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/Bouke/django-two-factor-auth\n\n.. image:: https://coveralls.io/repos/Bouke/django-two-factor-auth/badge.png?branch=master\n    :alt: Test Coverage\n    :target: https://coveralls.io/r/Bouke/django-two-factor-auth?branch=master\n\n.. image:: https://badge.fury.io/py/django-two-factor-auth.png\n    :alt: PyPI\n    :target: https://pypi.python.org/pypi/django-two-factor-auth\n\nComplete Two-Factor Authentication for Django. Built on top of the one-time\npassword framework django-otp_ and Django's built-in authentication framework\n``django.contrib.auth`` for providing the easiest integration into most Django\nprojects. Inspired by the user experience of Google's Two-Step Authentication,\nallowing users to authenticate through call, text messages (SMS), by using a\ntoken generator app like Google Authenticator or a YubiKey_ hardware token\ngenerator (optional).\n\nI would love to hear your feedback on this package. If you run into\nproblems, please file an issue on GitHub, or contribute to the project by\nforking the repository and sending some pull requests. The package is\ntranslated into English, Dutch and other languages. Please contribute your own\nlanguage using Transifex_.\n\nTest drive this app through the online `example app`_, hosted by Heroku_. It\ndemos most features except the Twilio integration. The example also includes\ndjango-user-sessions_ for providing Django sessions with a foreign key to the\nuser. Although the package is optional, it improves account security control\nover ``django.contrib.sessions``.\n\nCompatible with all supported Django versions. At the moment of writing that's\nincluding 1.8, 1.9 and 1.10 on Python 2.7, 3.2, 3.3, 3.4 and 3.5. Documentation\nis available at `readthedocs.org`_.\n\n\nInstallation\n============\nInstallation with ``pip``::\n\n    $ pip install django-two-factor-auth\n\nSetup\n=====\nAdd the following apps to the ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        ...\n        'django_otp',\n        'django_otp.plugins.otp_static',\n        'django_otp.plugins.otp_totp',\n        'two_factor',\n    )\n\nAdd ``django_otp.middleware.OTPMiddleware`` to ``MIDDLEWARE_CLASSES``. It must\nbe installed *after* ``AuthenticationMiddleware``::\n\n    MIDDLEWARE_CLASSES = [\n        'django.middleware.common.CommonMiddleware',\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        'django.middleware.csrf.CsrfViewMiddleware',\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\n        'django_otp.middleware.OTPMiddleware',\n        'django.contrib.messages.middleware.MessageMiddleware',\n    ]\n\nConfigure a few urls in settings.py::\n\n    from django.core.urlresolvers import reverse_lazy\n    LOGIN_URL = 'two_factor:login'\n\nAdd the url routes to the project in urls.py::\n\n    urlpatterns = [\n        url(r'', include('two_factor.urls', 'two_factor')),\n    ]\n\nBe sure to remove any other login routes, otherwise the two-factor\nauthentication might be circumvented. The admin interface should be\nautomatically patched to use the new login method.\n\nSupport for YubiKey_ is disabled by default, but enabling is easy. Please\nrefer to the documentation for instructions.\n\n\nContribute\n==========\n* Submit issues to the `issue tracker`_ on Github.\n* Fork the `source code`_ at Github.\n* Write some code and make sure it is covered with unit tests.\n* Send a pull request with your changes.\n* Provide a translation using Transifex_.\n\nRunning tests\n-------------\nThis project aims for full code-coverage, this means that your code should be\nwell-tested. Also test branches for hardened code. You can run the full test\nsuite with::\n\n    make test\n\nOr run a specific test with::\n\n    make test TARGET=tests.tests.TwilioGatewayTest\n\nFor Python compatibility, tox_ is used. You can run the full test suite,\ncovering all supported Python and Django version with::\n\n    tox\n\nReleasing\n---------\nThe following actions are required to push a new version::\n\n    python example/manage.py makemigrations two_factor\n    git commit -am \"Added migrations\"\n\n    bumpversion [major|minor|patch]\n    git commit -am \"Released version [version]\"\n    git tag [version]\n    python setup.py sdist bdist_wheel\n    twine upload [LIST_OF_FILES]\n\n\nSee Also\n========\nHave a look at django-user-sessions_ for Django sessions with a foreign key to\nthe user. This package is also included in the online `example app`_.\n\n\nLicense\n=======\nThe project is licensed under the MIT license.\n\n.. _`example app`: http://example-two-factor-auth.herokuapp.com\n.. _django-otp: https://pypi.python.org/pypi/django-otp\n.. _Transifex: https://www.transifex.com/projects/p/django-two-factor-auth/\n.. _Twilio: http://www.twilio.com/\n.. _Heroku: https://www.heroku.com\n.. _django-user-sessions: https://pypi.python.org/pypi/django-user-sessions\n.. _tox: https://testrun.org/tox/latest/\n.. _issue tracker: https://github.com/Bouke/django-two-factor-auth/issues\n.. _source code: https://github.com/Bouke/django-two-factor-auth\n.. _readthedocs.org: http://django-two-factor-auth.readthedocs.org/\n.. _Yubikey: https://www.yubico.com/products/yubikey-hardware/\n.. _`Hynek's Sharing Your Labor of Love: PyPI Quick And Dirty`:\n   https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/django-two-factor-auth",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Bouke/django-two-factor-auth",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-two-factor-auth",
    "package_url": "https://pypi.org/project/django-two-factor-auth/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-two-factor-auth/",
    "project_urls": {
      "Download": "https://pypi.python.org/pypi/django-two-factor-auth",
      "Homepage": "https://github.com/Bouke/django-two-factor-auth"
    },
    "release_url": "https://pypi.org/project/django-two-factor-auth/1.4.0/",
    "requires_dist": [
      "Django (>=1.8)",
      "django-formtools",
      "django-otp (<0.99,>=0.3.4)",
      "django-phonenumber-field (>=0.7.2,<0.99)",
      "phonenumbers (<7.99,>=7.0.9)",
      "qrcode (<4.99,>=4.0.0)",
      "twilio; extra == 'Call'",
      "twilio; extra == 'SMS'",
      "django-otp-yubikey; extra == 'YubiKey'"
    ],
    "requires_python": "",
    "summary": "Complete Two-Factor Authentication for Django",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17048240,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "613ab7bb10dd9813a19680965d2b8fdb0c1bf7162fa322dfb5db9a342a77df12",
        "md5": "79aa60ec5313a47ecbb2db7c28583dec",
        "sha256": "f9f98848a0c51f27e48986724569fe5a7e2cfc3a611a380b03799243bb200ba0"
      },
      "downloads": -1,
      "filename": "django_two_factor_auth-1.4.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "79aa60ec5313a47ecbb2db7c28583dec",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 131561,
      "upload_time": "2016-07-26T17:08:46",
      "upload_time_iso_8601": "2016-07-26T17:08:46.950102Z",
      "url": "https://files.pythonhosted.org/packages/61/3a/b7bb10dd9813a19680965d2b8fdb0c1bf7162fa322dfb5db9a342a77df12/django_two_factor_auth-1.4.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23e2c2178180bb1a5e1df46dc46a7d5d0591fae694d3d422b7c539122c7f391a",
        "md5": "e87e9e48362effc8cf4da3e991bd9efd",
        "sha256": "0d490c314abcf66f67869f16f643dc2a8da59dc76634fbbc744d74ae2d4cf7c0"
      },
      "downloads": -1,
      "filename": "django-two-factor-auth-1.4.0.tar.gz",
      "has_sig": true,
      "md5_digest": "e87e9e48362effc8cf4da3e991bd9efd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 64362,
      "upload_time": "2016-07-26T17:08:50",
      "upload_time_iso_8601": "2016-07-26T17:08:50.017487Z",
      "url": "https://files.pythonhosted.org/packages/23/e2/c2178180bb1a5e1df46dc46a7d5d0591fae694d3d422b7c539122c7f391a/django-two-factor-auth-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2020-15105",
        "GHSA-vhr6-pvjm-9qwf"
      ],
      "details": "Django Two-Factor Authentication before 1.12, stores the user's password in clear text in the user session (base64-encoded). The password is stored in the session when the user submits their username and password, and is removed once they complete authentication by entering a two-factor authentication code. This means that the password is stored in clear text in the session for an arbitrary amount of time, and potentially forever if the user begins the login process by entering their username and password and then leaves before entering their two-factor authentication code. The severity of this issue depends on which type of session storage you have configured: in the worst case, if you're using Django's default database session storage, then users' passwords are stored in clear text in your database. In the best case, if you're using Django's signed cookie session, then users' passwords are only stored in clear text within their browser's cookie store. In the common case of using Django's cache session store, the users' passwords are stored in clear text in whatever cache storage you have configured (typically Memcached or Redis). This has been fixed in 1.12. After upgrading, users should be sure to delete any clear text passwords that have been stored. For example, if you're using the database session backend, you'll likely want to delete any session record from the database and purge that data from any database backups or replicas. In addition, affected organizations who have suffered a database breach while using an affected version should inform their users that their clear text passwords have been compromised. All organizations should encourage users whose passwords were insecurely stored to change these passwords on any sites where they were used. As a workaround, wwitching Django's session storage to use signed cookies instead of the database or cache lessens the impact of this issue, but should not be done without a thorough understanding of the security tradeoffs of using signed cookies rather than a server-side session storage. There is no way to fully mitigate the issue without upgrading.",
      "fixed_in": [
        "1.12"
      ],
      "id": "PYSEC-2020-39",
      "link": "https://osv.dev/vulnerability/PYSEC-2020-39",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2020-15105"
      ],
      "details": "### Impact\n\ndjango-two-factor-auth versions 1.11 and before store the user's password in clear text in the user session (base64-encoded). The password is stored in the session when the user submits their username and password, and is removed once they complete authentication by entering a two-factor authentication code. This means that the password is stored in clear text in the session for an arbitrary amount of time, and potentially forever if the user begins the login process by entering their username and password, and then leaves before entering their two-factor authentication code.\n\nThe severity of this issue depends on which type of session storage you have configured: in the worst case, if you're using Django's default database session storage, then users' password are stored in clear text in your database. In the best case, if you're using Django's signed cookie session, then users' passwords are only stored in clear text within their browser's cookie store. In the common case of using Django's cache session store, the users' password are stored in clear text in whatever cache storage you have configured (typically Memcached or Redis).\n\n### Patches\n\nUpgrade to version 1.12 to resolve this issue.\n\nAfter upgrading, users should be sure to delete any clear text passwords that have been stored. For example, if you're using the database session backend, you'll likely want to delete any session record from the database and purge that data from any database backups or replicas.\n\nIn addition, affected organizations who have suffered a database breach while using an affected version should inform their users that their clear text passwords have been compromised. All organizations should encourage users whose passwords were insecurely stored to change these passwords on any sites where they were used.\n\n### Workarounds\n\nSwitching Django's session storage to use signed cookies instead of the database or cache lessens the impact of this issue, but should not be done without a thorough understanding of the security tradeoffs of using signed cookies rather than a server-side session storage. There is no way to fully mitigate the issue without upgrading.\n\n### References\n\nFor an explanation of why storing cleartext password is a substantial vulnerability: [Hashing Passwords: One-Way Road to Security](https://auth0.com/blog/hashing-passwords-one-way-road-to-security/).  \nFor documentation on configuring the Django session storage engine: [Django session documentation](https://docs.djangoproject.com/en/3.0/topics/http/sessions/).\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [the repo](https://github.com/Bouke/django-two-factor-auth)",
      "fixed_in": [
        "1.12.0"
      ],
      "id": "GHSA-vhr6-pvjm-9qwf",
      "link": "https://osv.dev/vulnerability/GHSA-vhr6-pvjm-9qwf",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}