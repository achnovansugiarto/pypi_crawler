{
  "info": {
    "author": "Marko Winkler",
    "author_email": "mwinkler@omgwtfquak.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Dradis-Client\n==\n\nReworked and Maintained by no-sec-marko (DradisClient - 2021).\n\nUpdated by GoVanguard (PyDradis3 - 2018).\n\nOriginally created by Novacoast (PyDradis).\n\n## About Dradis-Client\nThis is a wrapper for the [Dradis Pro API](https://dradisframework.com/support/guides/rest_api/) written in Python 3.\nThe original project was developed by Novacoast and updated by GoVanguard. In `Dradis-Client`, all API calls were updated \nto the latest version of Dradis Pro API (currently v4.0).\n\n## Installation\nInstall pulling from this repo:\n\n```bash\ngit clone https://github.com/no-sec-marko/Dradis-Client.git\n```\n\nLocal installation\n```bash\nchmod +x packageIt.sh\n./packageIt.sh\npython3 -m pip install ./dist/dradis-client-1.0.0.tar.gz\n```\n\n## Usage\n\nInitial setup of `DradisClient`:\n\n```python\nfrom dradis import DradisClient\n\ndebug = True  # Do you want to see debug info?\nverify = True  # Force ssl certificate verification?\napi_token = '<DRADIS API KEY>'\nserver_url = '<DRADIS SERVER URL>'\nclient = DradisClient(api_token, server_url, debug, verify)\n```\n\nAll endpoints have 5 functions that work roughly the same:\n\n- *Get:* Given an element id, returns the element info.\n\n- *Get Lists:* Returns list of Clients, Projects, etc.\n\n- *Create:* Creates elements and returns their id.\n\n- *Update:* Updates elements and returns their id.\n\n- *Delete:* Deletes elements and returns True if successful.\n\n### Teams Endpoint\n\n```python\nteam_id = 1\n# Retrieves all teams as list, reduced by name and team id.\nteams = client.get_teams_list()\n# Retrieves a single team.\nteam_by_id = client.get_team(team_id=team_id)\n# Creates a team based on the name.\nnew_team_id = client.create_team(team_name='Test Team 1')\n# Updates a team. Pass the name of the team.\nupdated_team_id = client.update_team(team_id=new_team_id, team_name='Test Team 1 - Updated')\n# Search for Team by team name.\ntest_team_1_u = client.find_team_by_name(team_name='Test Team 1 - Updated')\n# Deletes a team.\nis_team_deleted = client.delete_team(team_id=updated_team_id)\n```\n\n### Users Endpoint\n\n```python\n# Retrieves all users.\nusers = client.get_users_list()\n# Retrieves a single user.\nuser = client.get_user(users[0][0][1])\n```\n\n### Project Endpoint\n\n```python\n# Retrieves all projects\nproject_list = client.get_project_list\n# Retrieves a single project.\nproject = client.get_project(pid=36)\n# Creates a project.\nnew_project_id = client.create_project(project_name='Test Project 4', team_id=1, report_template_properties_id=4,\n                                       template='Welcome Project Template')\n# Updates a project.\nnew_updated_project_id = client.update_project(pid=new_project_id, project_name='Test Project 4 - Updated',\n                                               team_id=1, report_template_properties_id=8,\n                                               template='Welcome Project Template')\n# Finds a project by name.\nupdated_project = client.find_project_by_name(project_name='Test Project 4 - Updated')\n# Deletes a project.\nis_project_deleted = client.delete_project(pid=new_updated_project_id)\n```\n\n### Node Endpoint\n\n```python\npid = 36\n# Retrieves all the Nodes in your specific project\nnode_list = client.get_node_list(pid=pid)\n# Retrieves a single Node from your specified project and displays all the Evidence and Notes associated with the Node.\nnode = client.get_node(pid=pid, node_id=544)\n# Creates a Node in the specified project.\nnew_node = client.create_node(pid=pid, label='New Node')\n# Updates a Node in your specified project.\nupdated_node = client.update_node(pid=pid, node_id=new_node, label='Updated Test Node', type_id=1, position=2)\n# Deletes a Node from your specified project.\nis_node_deleted = client.delete_node(pid=pid, node_id=updated_node)\n```\n\n###  Issues Endpoint\n\n```python\npid = 36\n# Retrieves all the Issues in your specific project.\nall_issues = client.get_issue_list(pid=pid)\n# Retrieves a single Issue from your specified project.\nissue = client.get_issue(pid=pid, issue_id=all_issues[0][0][1])\n\nnew_issue_text = {\"Title\": \"Dangerous HTTP methods: TRACE\",\n                  \"Rating\": \"Medium\",\n                  \"Description\": \"The TRACE HTTP method is used as a debugging mechanism that allows the client to \"\n                                 \"see what is being received at the other end of the request chain and use that data \"\n                                 \"for testing and diagnostic information.\"}\ntags = ['en', 'mobile']\n# Creates an Issue in the specified project.\nnew_issue_id = client.create_issue(pid=pid, title=\"New Issue\", issue_properties=new_issue_text, tags=tags)\nupdated_issue_text = {\"Title\": \"Updated Issue Title\",\n                  \"Rating\": \"Medium\",\n                  \"Description\": \"Updated sample Issue description.\"}\n# Updates an Issue in the specified project.\nupdated_issue_id = client.update_issue(pid=pid, issue_id=new_issue_id, title=\"Updated Issue Title\",\n                                       issue_properties=updated_issue_text, tags=tags)\n# Deletes an Issue from your specified project.\nis_issue_deleted = client.delete_issue(pid=pid, issue_id=updated_issue_id)\n```\n\n\n### Evidence Endpoint\n\n```python\npid = 36\nnode_id = 544\nissue_id = 1819\nnew_evidence_props = {\"Description\": \"bc. Placeholder evidence content.\"}\nupdated_evidence_props = {\"Description\": \"bc. Updated evidence content.\"}\n# Retrieves all the Evidence associated with the specific Node in your project\nevidences = client.get_evidence_list(pid=pid, node_id=node_id)\n# Retrieves a single piece of Evidence from a Node in your project.\nevidence = client.get_evidence(pid=pid, node_id=node_id, evidence_id=8017)\n# Creates a piece of Evidence on the specified Node in your project.\nnew_evidence_id = client.create_evidence(pid=pid, node_id=node_id, issue_id=issue_id,\n                                         evidence_properties=new_evidence_props)\n# Updates a specific piece of Evidence on a Node in your project.\nupdated_evidence_id = client.update_evidence(pid=pid, node_id=node_id, issue_id=issue_id, evidence_id=new_evidence_id,\n                                             evidence_properties=updated_evidence_props)\n# Deletes a piece of Evidence from the specified Node in your project.\nis_evidence_deleted = client.delete_evidence(pid=pid, node_id=node_id, evidence_id=new_evidence_id)\n```\n\n### Content Block Endpoint\n\n```python\npid = 36\ncb_id = 333\n\ncb_content = {'Title': 'New Content Block', 'Description': 'Sample content.'}\n# Retrieves all of the Content Blocks in your project.\ncontent_blocks = client.get_content_blocks(pid=pid)\n# Retrieves a single Content Block from your project.\ncontent_block = client.get_content_block(pid=pid, block_id=cb_id)\n# Creates a Content Block in your project.\nnew_content_block_id = client.create_content_block(pid=pid, block_properties=cb_content, block_group='Conclusions')\ncb_content['Title'] = 'Updated Content Block'\nupdated_cb_content = cb_content\n# Updates a specific Content Block in your project.\nupdated_content_block_id = client.update_content_block(pid=pid, block_id=new_content_block_id,\n                                                       block_properties=updated_cb_content)\n# Deletes a specific Content Block from your project.\nis_content_block_deleted = client.delete_content_block(pid=pid, block_id=updated_content_block_id)\n```\n\n### Note Endpoint\n\n```python\npid = 36\nnode_id = 544\nnew_note = {'Title': 'Host Details', 'Type': 'Details', 'Description': 'Lorem ipsum dolor sit amet, consectetur '\n                                                                       'adipiscing elit. Nullam fringilla tristique '\n                                                                       'nisi, id cursus elit tincidunt egestas. Nunc '\n                                                                       'sagittis libero eu hendrerit aliquam.'}\n# Retrieves all of the Notes associated with the specific Node in your project.\nnotes = client.get_note_list(pid=pid, node_id=node_id)\n# Retrieves a single Note from the specific Node in your project.\nnote = client.get_note(pid=pid, node_id=node_id, note_id=notes[0][0][1])\n# Creates a Note on the specified Node in your project.\nnew_note_id = client.create_note(pid=pid, node_id=node_id, note_properties=new_note, category=0)\nnew_note['Title'] = 'Updated Host Details'\nupdated_note = new_note\n# Updates a Note on the specified Node in your project.\nupdated_note_id = client.update_note(pid=pid, node_id=node_id, note_id=new_note_id, note_properties=updated_note,\n                                     category=1)\n# Deletes a Note from the specified Node in your project.\nis_note_deleted = client.delete_note(pid=pid, node_id=node_id, note_id=updated_note_id)\n```\n\n### Document Properties Endpoint\n\n```python\npid = 36\nnew_doc_props = {'dradis.client': 'ACME Ltd.', 'dradis.project': 'Test'}\n# Retrieves all of the Document Properties associated with the specific project.\ndoc_props = client.get_document_properties(pid=pid)\n# Retrieves a single Document Property from the specific Node in your project.\ndoc_prop = client.get_document_property(pid=pid, property_key='dradis.projectname')\n# Creates a Document Property in your project.\nis_doc_props_created = client.create_document_properties(pid=pid, document_properties=new_doc_props)\nupdated_doc_prop = {'dradis.project': 'Test'}\n# Updates a Note on the specified Node in your project.\nis_doc_prop_updated = client.update_document_property(pid=pid, property_key='dradis.project', property_value='Updated Value')\n# Deletes a Document Property in your project.\nis_doc_prop_deleted_1 = client.delete_document_property(pid=pid, property_key='dradis.project')\nis_doc_prop_deleted_2 = client.delete_document_property(pid=pid, property_key='dradis.client')\n```\n\n### Attachment Endpoint\n\n```python\npid = 36\nnode_id = 544\n# Retrieves all the Attachments associated with the specific Node in your project.\nattachments = client.get_attachment_list(pid=pid, node_id=node_id)\n# Retrieves a single attachment from a Node in your project.\nattachment = client.get_attachment(pid=pid, node_id=node_id, attachment_name=attachments[0]['filename'])\n# Creates an Attachment on the specified Node in your project.\nnew_attachment = client.create_attachment(pid=pid, node_id=node_id, attachment_filename='testfile.png')\n# Renames a specific Attachment on a Node in your project.\nupdated_attachment_name = client.rename_attachment(pid=pid, node_id=node_id,\n                                                   attachment_filename=new_attachment[0],\n                                                   new_attachment_filename='renamed-testfile.png')\ncookie = client.get_dradis_cookie(username='no-sec-marko', password='P4ssw0rd!')\n# Downloads a specific Attachment on a Node in your project but needs a valid Dradis session cookie.\nis_attachment_downloaded = client.download_attachment(pid=pid, node_id=node_id,\n                                                      attachment_name=updated_attachment_name['filename'],\n                                                      cookie=cookie, output_file='./attachment.png')\n# Deletes an Attachment from the specified Node in your project.\nis_attachment_deleted = client.delete_attachment(pid=pid, node_id=node_id,\n                                                 attachment_name=updated_attachment_name['filename'])\n```\n\n### IssueLibrary Endpoint\n\n```python\n# Retrieves all of the IssueLibrary entries from your instance.\nlibrary = client.get_issue_library_list()\n# Retrieves a single IssueLibrary entry.\nissue_entry = client.get_issue_library_entry(issuelib_id=library[0]['id'])\n\nnew_lib_issue = {'Title': 'Dangerous HTTP methods: TRACE', 'Rating': 'Medium', 'Description': 'The TRACE HTTP method is '\n                                                                                          'used as a debugging '\n                                                                                          'mechanism that allows the '\n                                                                                          'client to see what is '\n                                                                                          'being received at the '\n                                                                                          'other end of the request '\n                                                                                          'chain and use that data '\n                                                                                          'for testing and diagnostic '\n                                                                                          'information.'}\n\nupdated_lib_issue = {'Title': 'Dangerous HTTP methods: TRACE', 'Rating': 'Medium', 'Description': 'Updated sample '\n                                                                                              'IssueLibrary entry '\n                                                                                              'description'}\n# Creates an IssueLibrary entry.\nnew_lib_issue_id = client.create_issue_library_entry(issue_library_properties=new_lib_issue)\n# Updates a specific IssueLibrary entry.\nupdated_lib_issue_id = client.update_issue_library_entry(issuelib_id=new_lib_issue_id, issue_library_properties=updated_lib_issue)\n# Deletes a specific IssueLibrary entry from your instance.\nis_lib_issue_deleted = client.delete_issue_library_entry(issuelib_id=updated_lib_issue_id)\n```\n\n## License\nDradis-Client is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nDradis-Client is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with Dradis-Client. If not, see <http://www.gnu.org/licenses/>.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/no-sec-marko/dradis-client",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dradis-client",
    "package_url": "https://pypi.org/project/dradis-client/",
    "platform": "",
    "project_url": "https://pypi.org/project/dradis-client/",
    "project_urls": {
      "Homepage": "https://github.com/no-sec-marko/dradis-client"
    },
    "release_url": "https://pypi.org/project/dradis-client/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Updated version of pydradis3 that was developed by GoVanguard",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11756980,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2329aa841e8871934f2f1ea8ec52b500997fb580901e9cf4008fa7eeb21c1b5",
        "md5": "a6e636caa69fdbae1cacad69d76aee5e",
        "sha256": "9535067d67d1660bc904d8fc8be2987cff056d8627b29826f27aa469cf57dd9d"
      },
      "downloads": -1,
      "filename": "dradis_client-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a6e636caa69fdbae1cacad69d76aee5e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15900,
      "upload_time": "2021-10-18T11:59:55",
      "upload_time_iso_8601": "2021-10-18T11:59:55.720886Z",
      "url": "https://files.pythonhosted.org/packages/e2/32/9aa841e8871934f2f1ea8ec52b500997fb580901e9cf4008fa7eeb21c1b5/dradis_client-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70c6d2f3a237f6e600d99a088779d50696ac1d9c1b47c17dbfa6ca12100556dd",
        "md5": "2ca3bfd7477cf7685d6236f69ec3b00f",
        "sha256": "ad0c4ca81c71b48069a7fbabb94257f986c3868147187c02b912a70a9fa9a922"
      },
      "downloads": -1,
      "filename": "dradis-client-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2ca3bfd7477cf7685d6236f69ec3b00f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16353,
      "upload_time": "2021-10-18T11:59:58",
      "upload_time_iso_8601": "2021-10-18T11:59:58.324883Z",
      "url": "https://files.pythonhosted.org/packages/70/c6/d2f3a237f6e600d99a088779d50696ac1d9c1b47c17dbfa6ca12100556dd/dradis-client-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}