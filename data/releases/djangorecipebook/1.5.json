{
  "info": {
    "author": "Thomas Khyn",
    "author_email": "thomas@ksytek.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Buildout :: Recipe",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "djangorecipebook\n================\n\n|copyright| 2014-2020 Thomas Khyn\n\nBuildout recipes for django development\n\n\nAbout\n-----\n\nThe recipes available in djangorecipebook are mostly derived from\ndjangorecipe_'s functionalities. However, while djangorecipe aims at generating\nall scripts in one part, djangorecipebook enables you to define one part per\nscript (create, manage, wsgi, test, makemigrations), hence allowing the use of\ndifferent settings and/or eggs for each part.\n\nThrough its automatic minimal settings generation, djangorecipebook is\nparticularly adapted to reusable apps development, e.g. for testing or\nmaintenance (migrations generation).\n\ndjangorecipebook works with django 2.2 and 3.0 and relevant python versions\n(3.5 to 3.8, depending on django version).\n\nIf you like djangorecipebook and find it useful, you may want to thank me and\nencourage future development by sending a few mBTC / mBCH / mBSV at this address:\n``1EwENyR8RV6tMc1hsLTkPURtn5wJgaBfG9``.\n\n\nAvailable recipes\n-----------------\n\ndjangorecipebook:manage\n   Creates a management script for the project\n\ndjangorecipebook:wsgi\n   Creates a wsgi script for the project\n\ndjangorecipebook:gunicorn\n   Creates a gunicorn service launcher for the project\n\ndjangorecipebook:test\n   Creates a script that invokes ``manage.py test [apps]``, or pytest_\n\ndjangorecipebook:makemigrations (new in v1.2)\n   Generates Django migrations\n   If you need to generate south_ migrations for Django < 1.7, you need to\n   use djangorecipe 1.2.x or 1.3.x\n\ndjangorecipebook:migrate (new in v1.2)\n   Invokes ``manage.py migrate [apps]``. For the lazy ones.\n\ndjangorecipebook:create\n   Creates a django project from a user-defined template or using django's\n   ``startproject`` management command. This recipe will not generate any\n   script. The name of the created project is the name of the section.\n\n\nOptions\n-------\n\nCommon options\n..............\n\nproject-dir\n   The directory where the project files lie, relative to the buildout.cfg\n   directory.\n\n   Defaults to ``'.'`` (buildout directory).\n\nsettings\n   The settings module to load, imported from the project directory.\n\n   Defaults to ``'settings'`` or a set of minimal settings, depending on the\n   recipe.\n\nextra-paths\n   Paths to add to sys.path in the generated script.\n\n   Defaults to ``[]``.\n\nenvvars\n   Any environment variable that need to be set for the test run, one per line,\n   under the form ``VARIABLE = value`` (spaces are tolerated).\n\n   Defaults to no environment variable set.\n\ninitialization\n   Some (basic) python initialization code to insert in the generated script.\n   Don't forget that leading whitespaces are stripped.\n\n   Defaults to ``''``.\n\n\nManage options\n..............\n\nsettings\n   If a settings module is not provided, the settings will be a set of minimal\n   parameters, with the added installed apps below.\n\n   Defaults to minimal settings.\n\ninst_apps\n   The apps to add to the ``INSTALLED_APPS`` setting if no settings module is\n   provided. This option should not be used when a settings module is provided.\n\n   Defaults to ``''``.\n\ncommand\n   The management command to run, if any.\n\n   Defaults to no command (and in that case the ``args`` option is disabled).\n\nargs\n   Any command-line argument you wish to have added to the generated script,\n   separated by spaces or line-breaks.\n\n   Defaults to no arguments.\n\n\nWSGI and gunicorn options\n.........................\n\nsettings\n   Must be a settings module, no default minimal settings are available for\n   these recipes.\n\nlog-file\n   The path to a log file where all stdout and/or stderr data should be\n   redirected to.\n\n   Defaults to ``''``, which disables logging\n\nlog-level\n   The level to log errors for. Can be one of INFO (stdout + stderr) or\n   ERROR (stderr only).\n\n   Defaults to ``INFO``.\n\nvirtualenv\n   The virtualenv that should be used to run the wsgi script. This\n   requires virtualenv **and** virtualenvwrapper, as it relies upon the\n   ``WORKON_HOME`` environment variable.\n\n   Defaults to ``''``, which disables any virtual environment setup.\n\nscript_path\n   The desired output path of the script, as a path to a filename relative to\n   the buildout directory (= where the ``buildout.cfg`` file lies).\n\n   Defaults to buildout's bin directory with the recipe's name.\n\napplication (wsgi and gunicorn only)\n   Used with the ``wsgi`` recipe, it is the dotted path to a user-defined wsgi\n   application, and defaults to the result of django's\n   ``get_wsgi_application()``.\n\n   Used with the ``gunicorn`` recipe, it can be:\n      - unspecified (default), which means that the ``gunicorn`` script must be\n        called with an parameter defining the WSGI application\n      - a ``path/to/a/wsgi:application``. The ``gunicorn`` script will set the\n        current working directory to ``path/to/a`` and use ``wsgi:application``\n        as the application parameter\n      - ``auto``. The recipe will automatically generate a ``wsgi`` module\n        using the provided ``settings``, ``log-file`` and ``log-level``, and\n        the ``gunicorn`` script will refer to that module\n\nTest options\n............\n\n.. warning::\n\n   When using ``runner = pytest``, the ``settings``, ``inst_apps``, ``apps``\n   options have no effect. You should instead provide a\n   `pytest configuration file`_ in the tests working directory.\n\nrunner\n   *Replaces `nose` option from version 1.3*\n\n   Use this option if you are using nose_ (and therefore django_nose_) to test\n   your Django app or project. This will simply include ``django_nose`` and\n   ``nose`` in your buildout.\n\n   Defaults to unset.\n\nworkingdir\n   The working directory to launch the tests from.\n\n   Defaults to the current\n\nargs\n   See `Manage options`_.\n\nsettings, inst_apps\n   See `Manage options`_. Note that the ``command`` option is disabled. Not\n   available when using pytest.\n\napps\n   The names of the apps that should be tested, separated by spaces or\n   line-breaks. If using minimal settings, these apps will be added to the\n   ``INSTALLED_APPS`` (in addition to those in the ``inst_apps`` option).\n\n   Defaults to ``''``, all the apps in ``INSTALLED_APPS``. Not available when\n   using ``runner = pytest``\n\n\nMakemigrations options\n......................\n\nsettings, inst_apps, args\n   See `Manage options`_. Note that the ``command`` option is disabled.\n\napps\n   The names of the apps for which migrations should be generated, separated\n   by spaces or line-breaks. If using minimal settings, these apps will be\n   added to the ``INSTALLED_APPS`` (in addition to those in the ``inst_apps``\n   option).\n\n   Defaults to ``''``, all the apps in ``INSTALLED_APPS``\n\n\nMigrate options\n...............\n\nSame options as in `Test options`_. The only difference is that you cannot use\nminimal settings (the default is ``'settings'``) nor the ``inst_apps`` option.\nIndeed, migrations generally need a database to migrate!\n\n\nCreate options\n..............\n\nIn create mode, the following common options are unused:\n\n- extra-paths\n- initialization\n\nThe settings import path must be set as it is used to determine whether the\nproject has already been created or not.\n\nThe following options are added:\n\ntemplate-dirs\n   The directories in which to search for user-defined project templates. This\n   option may also be added in a ``[djangorecipebook]`` section (for example in\n   the default.cfg file). See the `Templates discovery`_ section below.\n\n   Defaults to the built-in templates directory, containing default django\n   project templates.\n\ntemplate\n   The template that should be used.\n\n   Defaults to the standard django project for the major version of django you\n   are using.\n\nsecret\n   The ``SECRET_KEY`` to be used in the created settings file(s).\n\n   Defaults to a randomly generated alphanumeric key.\n\nFor more details on templating, see the `Templates`_ section below.\n\n\nTemplates\n---------\n\nIn create mode, a templating engine is available for greater personalisation\nof your django project initialization.\n\nTemplates discovery\n...................\n\nIf a `template-dirs` option is found either in the recipe section or in a\nspecific `djangorecipebook` section, the recipe searches in these directories\n- from the last defined to the first - for a subdirectory name matching the\n`template` name provided.\n\nIf the search is unsuccessful or if none of `template-dirs` or `template` are\ndefined, the recipe uses the default template for the major version of django\nbeing used.\n\nFor example, if in ~/.buildout/default.cfg you have the following lines::\n\n    [djangorecipebook]\n    template-dirs =\n      /my/project/template/directory\n      /my/project/template/directory2\n\nAnd your buildout.cfg contains this section::\n\n    [mynewproject]\n    recipe = djangorecipebook:create\n    template-dirs = /my/other/template/dir\n    template = mytemplate\n\nThe recipe will search for a ``mytemplate`` directory in that order:\n\n1. /my/other/template/dir\n2. /my/project/template/directory2\n3. /my/project/template/directory\n\nTemplate engine\n...............\n\nThe template engine is as simple as it can be and relies upon pythons's\n``string.Template``. A variable can be inserted in any file or directory name or\nfile content in template directory using the syntax ``${variable}``.\n\nThe following variables are available:\n\n- any user-defined recipe option from the configuration file\n- ``secret``: the secret key for django settings\n- ``project_name``: the project name (= the section name)\n- ``year``: the current year\n- ``month``: the current month\n- ``day``: the current day of the month\n\nFor example, if you have in buildout.cfg::\n\n    [mynewproject]\n    recipe = djangorecipebook:create\n    template = mytemplate\n    author = Thomas Khyn\n\nfor a copyright notice in a module docstring, you may use::\n\n    (c) ${year} ${author}\n\nwhich will produce to the following output in the final file (if we are in\n2014)::\n\n    (c) 2014 Thomas Khyn\n\nor, if you have a directory named ``${project_name}_parameters``, the final name\nwill be ``mynewproject_parameters``.\n\n\n.. |copyright| unicode:: 0xA9\n.. _djangorecipe: https://github.com/rvanlaar/djangorecipe\n.. _nose: http://nose.readthedocs.org/en/latest/\n.. _django_nose: https://pypi.python.org/pypi/django-nose\n.. _south: http://south.readthedocs.org\n.. _`Django 1.7+`: https://docs.djangoproject.com/en/dev/topics/migrations/\n.. _pytest: http://pytest.org/\n.. _`pytest configuration file`: http://pytest-django.readthedocs.io/en/latest/tutorial.html",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/tkhyn/djangorecipebook/",
    "keywords": "django,buildout,recipe",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangorecipebook",
    "package_url": "https://pypi.org/project/djangorecipebook/",
    "platform": "",
    "project_url": "https://pypi.org/project/djangorecipebook/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/tkhyn/djangorecipebook/"
    },
    "release_url": "https://pypi.org/project/djangorecipebook/1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Buildout recipes for django development",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7854154,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e717a7757a230fdb4aa10bde4e45a42bd5f92b89de75de2a3f152b5625ec5bfd",
        "md5": "f77b6147d937e12bc53ba64469c3ae4d",
        "sha256": "2c0457fc6d747f9e28e6ae5359d618efee0d70506c38c0aa44f224342a416811"
      },
      "downloads": -1,
      "filename": "djangorecipebook-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "f77b6147d937e12bc53ba64469c3ae4d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21107,
      "upload_time": "2020-07-31T11:28:22",
      "upload_time_iso_8601": "2020-07-31T11:28:22.122788Z",
      "url": "https://files.pythonhosted.org/packages/e7/17/a7757a230fdb4aa10bde4e45a42bd5f92b89de75de2a3f152b5625ec5bfd/djangorecipebook-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}