{
  "info": {
    "author": "Bertrand Bordage",
    "author_email": "bordage.bertrand@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "************\ndjango-terms\n************\n\nSite-wide adds a definition or a link for specialized terms.\n\n|travis|_\n\n.. |travis| image:: https://travis-ci.org/BertrandBordage/django-terms.png\n.. _travis: https://travis-ci.org/BertrandBordage/django-terms\n\n\n.. image:: https://raw.github.com/BertrandBordage/django-terms/master/example_project/screenshot.png\n\n\n.. contents::\n   :depth: 3\n\n\n\nRequirements\n============\n\nMandatory\n---------\n\n* `Python <http://python.org/>`_ 2.6, 2.7, 3.2, or 3.3\n* `Django <https://www.djangoproject.com/>`_ 1.4 or 1.5\n* `beautifulsoup4 <http://www.crummy.com/software/BeautifulSoup/>`_\n\n\nOptional\n--------\n\n* `django-tinymce <https://github.com/aljosa/django-tinymce>`_\n  (tested with 1.5.1b2) to type the definition in a beautiful GUI\n  (see `TERMS_DEFINITION_WIDGET`_)\n* `django-ckeditor <https://github.com/shaunsephton/django-ckeditor>`_\n  (tested with 3.6.2.1) to type the definition in another beautiful GUI\n  (see `TERMS_DEFINITION_WIDGET`_)\n* `django-reversion <https://github.com/etianen/django-reversion>`_\n  (tested with 1.6.0) to recover changes and deletions\n* `django-CMS <https://www.django-cms.org/>`_ (tested with 2.3)\n  because django-terms has an apphook, a menu, a plugin processor and\n  a plugin\n* `django-haystack <http://haystacksearch.org/>`_ (tested with 1.2.7)\n  because django-terms has a search index\n* `django.contrib.sitemaps\n  <https://docs.djangoproject.com/en/1.4/ref/contrib/sitemaps/>`_\n  because django-terms has a sitemap\n* `South <http://south.aeracode.org/>`_ (tested with 0.8.1) because\n  django-terms has migrations\n\n\n\nInstallation\n============\n\n#. ``[sudo] pip install django-terms``\n#. Add ``'terms',`` to your ``INSTALLED_APPS``\n#. ``./manage.py syncdb`` (``./manage.py migrate terms`` if you use `South`_)\n#. Add terms to your urls:\n\n   * add ``url(r'^terms/', include('terms.urls')),`` to your `urls.py`\n   * or, if you are using django-CMS, add a page and use the apphook and menu\n\n\n\nUsage\n=====\n\n#. Add some terms in the admin\n#. Choose how django-terms should apply to your website:\n\n   * `Middleware`_ (to give django-terms a try or for development)\n   * `Template filter`_ (for production)\n   * `With django-CMS`_\n\nThe added terms should now be automatically linked to their definitions.\n\n\nMiddleware\n----------\n\nA middleware is available to automatically add links on all your website.\nIt is not recommended to use it in production because it parses and rebuilds\nwhole pages, which can be an overkill in most cases (even though django-terms\nhas excellent performances).\n\nIt is also perfect for development: it never fails silently, unlike filters\n(see `Exceptions`_ for more details).\n\n#. Add ``'terms.middleware.TermsMiddleware',``\n   to your ``MIDDLEWARE_CLASSES``\n#. If the middleware applies to unwanted Django applications,\n   HTML tags, classes, or IDs, set the corresponding `Common settings`_\n\n\nTemplate filter\n---------------\n\nA template filter is available to add links only on desired parts of\nyour website.\n\n#. Choose one of your existing templates\n#. Add ``{% load terms %}`` to the beginning of the file (just after\n   ``{% extends '[file]' %}`` if you have one)\n#. Use the filter ``replace_terms`` like every normal filter\n#. If the filter applies to unwanted HTML tags, classes, or IDs,\n   set the corresponding `Common settings`_\n\nExample:\n\n   Suppose you have such a template:\n\n     ::\n\n        {% extends 'base.html' %}\n\n        {% block article_header %}\n          {{ article.header }}\n        {% endblock %}\n\n        {% block article_content %}\n          {{ article.section1 }}\n          {{ article.section2 }}\n        {% endblock %}\n\n   Here is how you can modify it:\n\n     ::\n\n        {% extends 'base.html' %}\n        {% load terms %}\n\n        {% block article_header %}\n          {{ article.header|replace_terms }}\n        {% endblock %}\n\n        {% block article_content %}\n          {% filter replace_terms %}\n            {{ article.section1 }}\n            {{ article.section2 }}\n          {% endfilter %}\n        {% endblock %}\n\n   Now, suppose you have an HTML class ``code-snippet`` in ``article.section2``\n   where you do not want to add links on terms.\n   Go to `Common settings`_, and you will find the solution:\n\n     Add this line in `settings.py`::\n\n       TERMS_ADDITIONAL_IGNORED_CLASSES = ['code-snippet']\n\n\nWith django-CMS\n---------------\n\nA few tools are available to make your life easier if you use `django-CMS`_.\n\nPlugin processor\n................\n\nIt will automatically apply the `template filter` on every plugin.\n\nTo use it, add or modify ``CMS_PLUGIN_PROCESSORS`` in `settings.py`::\n\n   CMS_PLUGIN_PROCESSORS = (\n       ...\n       'terms.cms_plugin_processors.TermsProcessor',\n       ...\n   )\n\nGlossary plugin\n...............\n\nThis plugin displays all terms and their definitions.\n\nDon't forget to update ``CMS_PLACEHOLDER_CONF`` in your `settings.py`\nif you defined it, otherwise this plugin will not be available from your\nplaceholders.\n\nApart from this, nothing to do to make it work.\n\nApp hook and menu\n.................\n\nYou can use the the app hook and the menu to integrate the complete glossary\nto your CMS architecture.\n\nNothing to do to make it work.\n\n\n\nSettings\n========\n\nCommon settings\n---------------\n\nTERMS_DEBUG\n...........\n\n:Default: ``DEBUG``\n:Definition: If set to ``True``, allows django-terms to raise minor exceptions\n             (see `Exceptions`_).\n\nTERMS_ADDITIONAL_IGNORED_APPS\n.............................\n:Default: ``()``\n:Definition: A list or tuple of ignored Django applications\n             (expressed as strings)\n:Used by: `Middleware`_\n:Extends: `TERMS_IGNORED_APPS`_\n:Syntax example: ``['cms']``\n\nTERMS_ADDITIONAL_IGNORED_TAGS\n.............................\n\n:Default: ``()``\n:Definition: A list or tuple of ignored HTML tags (expressed as strings)\n:Used by: `Middleware`_, `Template filter`_\n:Extends: `TERMS_IGNORED_TAGS`_\n:Syntax example: ``['h1', 'h2', 'h3', 'footer']``\n\nTERMS_ADDITIONAL_IGNORED_CLASSES\n................................\n\n:Default: ``()``\n:Definition: A list or tuple of ignored HTML classes (expressed as strings)\n:Used by: `Middleware`_, `Template filter`_\n:Extends: `TERMS_IGNORED_CLASSES`_\n:Syntax example: ``['footnote', 'text-caption']``\n\nTERMS_ADDITIONAL_IGNORED_IDS\n............................\n\n:Default: ``()``\n:Definition: A list or tuple of ignored HTML IDs (expressed as strings)\n:Used by: `Middleware`_, `Template filter`_\n:Extends: `TERMS_IGNORED_IDS`_\n:Syntax example: ``['article-footer', 'side-content']``\n\nTERMS_REPLACE_FIRST_ONLY\n........................\n\n:Default: ``True``\n:Definition: If set to ``True``, adds a link only on the first occurrence\n             of each term\n:Used by: `Middleware`_, `Template filter`_\n\nTERMS_DEFINITION_WIDGET\n.......................\n\n:Default: ``'auto'``\n:Definition: Explicitly tells django-terms which text widget to choose\n             for the definition of a term.  Accepted values are\n             ``'auto'``, ``'basic'``, ``'tinymce'``, and ``'ckeditor'``.\n\n\nAdvanced settings\n-----------------\n\nThese settings should not be used, unless you know perfectly\nwhat you are doing.\n\nTERMS_IGNORED_APPS\n..................\n\n:Default: see `terms/settings.py`\n:Definition: A list or tuple of ignored Django applications\n             (expressed as strings)\n:Used by: `Middleware`_\n\nTERMS_IGNORED_TAGS\n..................\n\n:Default: see `terms/settings.py`\n:Definition: A list or tuple of ignored HTML tags (expressed as strings)\n:Used by: `Middleware`_, `Template filter`_\n\nTERMS_IGNORED_CLASSES\n.....................\n\n:Default: see `terms/settings.py`\n:Definition: A list or tuple of ignored HTML classes (expressed as strings)\n:Used by: `Middleware`_, `Template filter`_\n\nTERMS_IGNORED_IDS\n.................\n\n:Default: see `terms/settings.py`\n:Definition: A list or tuple of ignored HTML IDs (expressed as strings)\n:Used by: `Middleware`_, `Template filter`_\n\n\n\nTroubleshooting\n===============\n\nSide effects\n------------\n\nWhy?\n....\n\nWhen using django-terms, your HTML pages are totally or partially\nreconstructed:\n\n* totally reconstructed if you use the `middleware`_\n* partially reconstructed if you use the `template filter`_\n  or `with django-CMS`_\n\nThe content is parsed and rebuilt with `beautifulsoup4`_.  See `tems/html.py`\nto understand exactly how.\n\nList of known side effects\n..........................\n\nA few side effects are therefore happening during HTML reconstruction:\n\n* Entity names and numbers (e.g. ``&eacute;``, ``&#233;``, …) are unescaped.\n  This means they are replaced with their unicode characters\n  (e.g. ``&eacute;`` -> ``é``)\n* Additional spaces inside HTML tags are stripped:\n\n  * Start tags ``<a  href = \"url\" >``\n    -> ``<a href=\"url\">``\n  * End tags ``</ a >``\n    -> ``</a>``\n  * “Start-end” tags ``<input  style = \"text\"  />``\n    -> ``<input style=\"text\"/>``\n\n.. warning::\n   This implies one bad side effect: the unescaping breaks the special\n   characters rendering in some complex form fields like\n   `django-ckeditor`_.  `django.contrib.admin` is already ignored,\n   so you should not encounter any problem.  Otherwise, using filters\n   instead of the middleware and/or ignore the correct\n   apps/tags/classes/ids using `Common settings`_ will ensure a proper\n   rendering.\n\n\nPerformance\n-----------\n\n.. note::\n   I'll talk about speed, since there is no terrible impact on memory, even if\n   you only a GB of RAM on your server.\n\nUnfortunately, django-terms has a significant impact on performance,\nespecially if you use the `middleware`_.  That's why we recommend using the\n`template filter`_.\n\nWhat is important is the number of HTML tags wrapped by the filter or the\nmiddleware.  Then comes the complexity of your HTML tree.  The amount of\nflat text, luckily, has no impact.\n\nTo give you an idea, `terms/tests/terms/performance_test_before.html`\ncontains 263 tags and takes 45 ms to be parsed and rebuilt on my computer\nwith the middleware.  That gives an average of 160 µs per tag.\nIf you use the template tag only on the content of the page (124 tags), it\ntakes 28 ms.  Quite slow, but if you cache the part of the template that's\nfiltered, this issue should be negligible.\n\n\nExceptions\n----------\n\nResolver404\n...........\n\n:Raised by: `Middleware`_ only.\n:Raised in: `TERMS_DEBUG`_ mode.  Otherwise the page is ignored by django-terms.\n:Reason: This happens when django-terms is unable to resolve the current\n         ``request.path`` to determine whether the application\n         of the current page is in `TERMS_IGNORED_APPS`_.\n:Encountered: In django-CMS 2.3, when adding a plugin in frontend editing.\n\n\n\nTranslations\n============\n\nStatus\n------\n\n.. image::\n   https://www.transifex.com/projects/p/django-terms/resource/core/chart/image_png\n\nWrite your translation\n----------------------\n\nLocalization is done directly on\n`our Transifex page <https://www.transifex.com/projects/p/django-terms/>`_.\nThere is no access restriction, so feel free to spend two minutes translating\ndjango-terms to your language :o)\n\n\nGet & Compile\n-------------\n\n#. Make sure you have\n   `transifex-client <http://pypi.python.org/pypi/transifex-client/>`_\n   installed: ``[sudo] pip install transifex-client``\n#. Pull all translations from Transifex: ``tx pull -a``\n#. Compile them: ``cd terms && django-admin.py compilemessages``",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BertrandBordage/django-terms",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-terms",
    "package_url": "https://pypi.org/project/django-terms/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-terms/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/BertrandBordage/django-terms"
    },
    "release_url": "https://pypi.org/project/django-terms/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Site-wide adds a definition or a link for specialized terms.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1980804,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce783e6011f91aebd0afbe8228d369f5962dc764fc315e5d3bdb33219354d19f",
        "md5": "0ff285a4f6723d746607fe0913fe32c1",
        "sha256": "79473b967bc195074f2260791bb03d06adb657ae1ff7cb559c96adec56166ebb"
      },
      "downloads": -1,
      "filename": "django-terms-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0ff285a4f6723d746607fe0913fe32c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 48525,
      "upload_time": "2013-07-01T02:35:32",
      "upload_time_iso_8601": "2013-07-01T02:35:32.286582Z",
      "url": "https://files.pythonhosted.org/packages/ce/78/3e6011f91aebd0afbe8228d369f5962dc764fc315e5d3bdb33219354d19f/django-terms-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}