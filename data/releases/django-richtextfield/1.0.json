{
  "info": {
    "author": "Jaap Roes",
    "author_email": "jaap@eight.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "======================\r\nDjango Rich Text Field\r\n======================\r\n\r\n.. image:: https://travis-ci.org/EightMedia/django-richtextfield.svg?branch=master\r\n    :target: https://travis-ci.org/EightMedia/django-richtextfield\r\n\r\n.. image:: https://coveralls.io/repos/EightMedia/django-richtextfield/badge.png?branch=master\r\n    :target: https://coveralls.io/r/EightMedia/django-richtextfield?branch=master\r\n\r\nA Django model field and widget that renders a customizable rich\r\ntext/WYSIWYG widget. Tested with TinyMCE_ and CKEditor_. Designed to be\r\neasily extended to use other editors.\r\n\r\n\r\nQuickstart\r\n----------\r\n\r\nInstall ``django-richtextfield`` and add it to your Django\r\nproject's ``INSTALLED_APPS``::\r\n\r\n    INSTALLED_APPS += 'djrichtextfield'\r\n\r\nAdd the urls to the project's urlpatterns::\r\n\r\n    url(r'^djrichtextfield/', include('djrichtextfield.urls'))\r\n\r\nConfigure ``django-richtextfield`` in ``settings.py``::\r\n\r\n    DJRICHTEXTFIELD_CONFIG = {\r\n        'js': ['//tinymce.cachefly.net/4.1/tinymce.min.js'],\r\n        'init_template': 'djrichtextfield/init/tinymce.js',\r\n        'settings': {\r\n            'menubar': False,\r\n            'plugins': 'link image',\r\n            'toolbar': 'bold italic | link image | removeformat',\r\n            'width': 700\r\n        }\r\n    }\r\n\r\nNow you're ready to use the field in your models::\r\n\r\n    from djrichtextfield.models import RichTextField\r\n\r\n    class Post(models.Model):\r\n        content = RichTextField()\r\n\r\nor forms::\r\n\r\n    from djrichtextfield.widgets import RichTextWidget\r\n\r\n    class CommentForm(forms.ModelForm):\r\n        content = forms.CharField(widget=RichTextWidget())\r\n\r\n\r\nConfiguration\r\n-------------\r\n\r\nDefine the ``DJRICHTEXTFIELD_CONFIG`` dictionary in your project settings.\r\nThis dictionary can have the following keys:\r\n\r\n.. _conf_js:\r\n\r\n``'js'``\r\n    A list of required javascript files. These can be URLs to a CDN or paths\r\n    relative to your ``STATIC_URL`` e.g.::\r\n\r\n    'js': ['//cdn.ckeditor.com/4.4.4/standard/ckeditor.js']\r\n\r\n    or::\r\n\r\n    'js': ['path/to/editor.js', 'path/to/plugin.js']\r\n\r\n.. _conf_init_template:\r\n\r\n``'init_template'``\r\n    Path to the `init template`_ for your editor. Currently\r\n    ``django-richtextfield`` ships with two templates, either::\r\n\r\n    'init_template': 'djrichtextfield/init/tinymce.js' \r\n\r\n    or::\r\n\r\n    'init_template': 'djrichtextfield/init/ckeditor.js'\r\n\r\n.. _conf_settings:\r\n\r\n``'settings'``\r\n    A Python dictionary with the **default** configuration data for your\r\n    editor e.g.::\r\n\r\n      {  # TinyMCE\r\n          'menubar': False, \r\n          'plugins': 'link image',\r\n          'toolbar': 'bold italic | link image | removeformat',\r\n          'width': 700\r\n      }\r\n\r\n    or::\r\n\r\n      {  # CKEditor\r\n          'toolbar': [\r\n              {'items': ['Format', '-', 'Bold', 'Italic', '-',\r\n                         'RemoveFormat']},\r\n              {'items': ['Link', 'Unlink', 'Image', 'Table']},\r\n              {'items': ['Source']}\r\n          ],\r\n          'format_tags': 'p;h1;h2;h3',\r\n          'width': 700\r\n      }\r\n\r\n.. _conf_profiles:\r\n\r\n``'profiles'``\r\n  This is an **optional** configuration key. Profiles are \"named\" custom\r\n  settings used to configure specific type of fields. You can configure\r\n  profiles like this::\r\n\r\n    'profiles': {\r\n        'basic': {\r\n            'toolbar': 'bold italic | removeformat'\r\n        },\r\n        'advanced': {\r\n            'plugins': 'link image table code',\r\n            'toolbar': 'formatselect | bold italic | removeformat |'\r\n                       ' link unlink image table | code'\r\n        }\r\n    }\r\n  \r\n  .. note:: A profile is treated the same way as directly defined\r\n            `field & widget settings`_. This means that \r\n            profile settings are merged with the defaults!\r\n\r\nField & Widget settings\r\n^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nYou can override the default settings per field::\r\n\r\n    class CommentForm(forms.ModelForm):\r\n        content = forms.CharField(widget=RichTextWidget())\r\n        content.widget.field_settings = {'your': 'custom', 'settings': True}\r\n\r\nor::\r\n\r\n    class Post(models.Model):\r\n        content = RichTextField(field_settings={'your': 'custom', 'settings': True})\r\n\r\nIt's recommended to use `profiles`_, they make it easier to switch configs\r\nor even editors on a later date. You use a profile like this::\r\n\r\n    class CommentForm(forms.ModelForm):\r\n        content = forms.CharField(widget=RichTextWidget(field_settings='basic'))\r\n\r\nor::\r\n\r\n    class Post(models.Model):\r\n        content = RichTextField(field_settings='advanced')\r\n\r\n.. note:: Fields always inherit the default settings, customs settings and\r\n          profiles are merged with the defaults!\r\n\r\n\r\nCustom init / Using another editor\r\n----------------------------------\r\n\r\nThis is uncharted territory, but in theory it's fairly easy. Just configure\r\n``DJRICHTEXTFIELD_CONFIG`` to load the right Javascript files and create\r\nan `init template`_.\r\n\r\n::\r\n\r\n    DJRICHTEXTFIELD_CONFIG = {\r\n        'js': ['path/to/editor.js'],\r\n        'init_template': 'path/to/init/template.js',\r\n        'settings': {'some': 'configuration'}\r\n    }\r\n\r\nInit template\r\n^^^^^^^^^^^^^\r\n\r\nThe init template is a Django template (so it should be in the template and\r\nnot in the static directory). It contains a tiny bit of Javascript that's\r\ncalled to initialize each editor. For example, the init template for CKEditor\r\nlooks like this::\r\n\r\n    if (!CKEDITOR.instances[id]) {\r\n        CKEDITOR.replace(id, settings);\r\n    }\r\n\r\nThe init template has the following Javascript variables available from the\r\nouter scope:\r\n\r\n``$e``\r\n  jQuery wrapped textarea to be replaced\r\n``id``\r\n  The ``id`` attribute of the textarea\r\n``default_settings``\r\n  ``DJRICHTEXTFIELD_CONFIG['settings']`` as a JS object\r\n``custom_settings``\r\n  The ``field_settings`` as a JS object\r\n``settings``\r\n    Merge of ``default_settings`` and ``custom_settings``\r\n\r\n\r\nHandling uploads & other advanced features\r\n------------------------------------------\r\n\r\n``django-richtextfield`` built to be editor agnostic. This means that it's\r\nup to you to handle file uploads, show content previews and support\r\nother \"advanced\" features.\r\n\r\n\r\n.. _Profiles: conf_profiles_\r\n.. _TinyMCE: http://www.tinymce.com/\r\n.. _CKEditor: http://ckeditor.com/\r\n\r\n\r\nHistory\r\n-------\r\n\r\n0.1 (2014-09-30)\r\n^^^^^^^^^^^^^^^^\r\n\r\n* First release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EightMedia/django-richtextfield",
    "keywords": "django-richtextfield,djrichtextfield django wywiwyg field",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-richtextfield",
    "package_url": "https://pypi.org/project/django-richtextfield/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-richtextfield/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/EightMedia/django-richtextfield"
    },
    "release_url": "https://pypi.org/project/django-richtextfield/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Django model field and widget that renders a customizable WYSIWYG/rich text editor",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10060054,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3b11edf0806fdc332da89002c6e131e0baf407d42371af2df5ce431bd39ba36",
        "md5": "8887cb89751c2d5af1f4a9f02b0b3e6d",
        "sha256": "271ad82cd0c64819c19c92971998a9d87d1e6246546698f0535cbe2bd84887f4"
      },
      "downloads": -1,
      "filename": "django_richtextfield-1.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "8887cb89751c2d5af1f4a9f02b0b3e6d",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 11025,
      "upload_time": "2014-09-30T13:22:18",
      "upload_time_iso_8601": "2014-09-30T13:22:18.024692Z",
      "url": "https://files.pythonhosted.org/packages/e3/b1/1edf0806fdc332da89002c6e131e0baf407d42371af2df5ce431bd39ba36/django_richtextfield-1.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61adb3d1dca54bf6f0273b0e3f7ff1705ae211ddd82ccab50b0b3b44abb760ed",
        "md5": "3a2d481f8ea27dd61d0aac56a22f48e2",
        "sha256": "6d7314d56a7a4db7d70fb457aff888b5e0a7262e01b4a6d2857be37ba7f8a344"
      },
      "downloads": -1,
      "filename": "django-richtextfield-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3a2d481f8ea27dd61d0aac56a22f48e2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13780,
      "upload_time": "2014-09-30T13:22:14",
      "upload_time_iso_8601": "2014-09-30T13:22:14.910669Z",
      "url": "https://files.pythonhosted.org/packages/61/ad/b3d1dca54bf6f0273b0e3f7ff1705ae211ddd82ccab50b0b3b44abb760ed/django-richtextfield-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}