{
  "info": {
    "author": "Jaap Roes",
    "author_email": "jaap.roes@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "======================\nDjango Rich Text Field\n======================\n\n.. image:: https://badge.fury.io/py/django-richtextfield.svg\n    :target: https://pypi.python.org/pypi/django-richtextfield/\n    :alt: Latest Version\n\n.. image:: https://travis-ci.org/jaap3/django-richtextfield.svg?branch=master\n    :target: https://travis-ci.org/jaap3/django-richtextfield\n\n.. image:: https://coveralls.io/repos/jaap3/django-richtextfield/badge.svg?branch=master\n    :target: https://coveralls.io/r/jaap3/django-richtextfield?branch=master\n\nA Django model field and widget that renders a customizable rich\ntext/WYSIWYG widget. Tested with TinyMCE_ and CKEditor_. Designed to be\neasily extended to use other editors.\n\n\nQuickstart\n----------\n\nInstall ``django-richtextfield`` and add it to your Django\nproject's ``INSTALLED_APPS``, ``django.contrib.admin`` must also be in ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = [\n        'django.contrib.admin',\n        ...\n        'djrichtextfield'\n    ]\n\nAdd the urls to the project's urlpatterns::\n\n    path('djrichtextfield/', include('djrichtextfield.urls'))\n\nConfigure ``django-richtextfield`` in ``settings.py``::\n\n    DJRICHTEXTFIELD_CONFIG = {\n        'js': ['//tinymce.cachefly.net/4.1/tinymce.min.js'],\n        'init_template': 'djrichtextfield/init/tinymce.js',\n        'settings': {\n            'menubar': False,\n            'plugins': 'link image',\n            'toolbar': 'bold italic | link image | removeformat',\n            'width': 700\n        }\n    }\n\nNow you're ready to use the field in your models::\n\n    from djrichtextfield.models import RichTextField\n\n    class Post(models.Model):\n        content = RichTextField()\n\nor forms::\n\n    from djrichtextfield.widgets import RichTextWidget\n\n    class CommentForm(forms.ModelForm):\n        content = forms.CharField(widget=RichTextWidget())\n\n\nConfiguration\n-------------\n\nDefine the ``DJRICHTEXTFIELD_CONFIG`` dictionary in your project settings.\nThis dictionary can have the following keys:\n\n.. _conf_js:\n\n``'js'``\n    A list of required javascript files. These can be URLs to a CDN or paths\n    relative to your ``STATIC_URL`` e.g.::\n\n    'js': ['//cdn.ckeditor.com/4.4.4/standard/ckeditor.js']\n\n    or::\n\n    'js': ['path/to/editor.js', 'path/to/plugin.js']\n\n.. _conf_init_template:\n\n``'init_template'``\n    Path to the `init template`_ for your editor. Currently\n    ``django-richtextfield`` ships with two templates, either::\n\n    'init_template': 'djrichtextfield/init/tinymce.js' \n\n    or::\n\n    'init_template': 'djrichtextfield/init/ckeditor.js'\n\n.. _conf_settings:\n\n``'settings'``\n    A Python dictionary with the **default** configuration data for your\n    editor e.g.::\n\n      {  # TinyMCE\n          'menubar': False, \n          'plugins': 'link image',\n          'toolbar': 'bold italic | link image | removeformat',\n          'width': 700\n      }\n\n    or::\n\n      {  # CKEditor\n          'toolbar': [\n              {'items': ['Format', '-', 'Bold', 'Italic', '-',\n                         'RemoveFormat']},\n              {'items': ['Link', 'Unlink', 'Image', 'Table']},\n              {'items': ['Source']}\n          ],\n          'format_tags': 'p;h1;h2;h3',\n          'width': 700\n      }\n\n.. _conf_profiles:\n\n``'profiles'``\n  This is an **optional** configuration key. Profiles are \"named\" custom\n  settings used to configure specific type of fields. You can configure\n  profiles like this::\n\n    'profiles': {\n        'basic': {\n            'toolbar': 'bold italic | removeformat'\n        },\n        'advanced': {\n            'plugins': 'link image table code',\n            'toolbar': 'formatselect | bold italic | removeformat |'\n                       ' link unlink image table | code'\n        }\n    }\n  \n  .. note:: A profile is treated the same way as directly defined\n            `field & widget settings`_. This means that \n            profile settings are merged with the defaults!\n\nField & Widget settings\n^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can override the default settings per field::\n\n    class CommentForm(forms.ModelForm):\n        content = forms.CharField(widget=RichTextWidget())\n        content.widget.field_settings = {'your': 'custom', 'settings': True}\n\nor::\n\n    class Post(models.Model):\n        content = RichTextField(field_settings={'your': 'custom', 'settings': True})\n\nIt's recommended to use `profiles`_, they make it easier to switch configs\nor even editors on a later date. You use a profile like this::\n\n    class CommentForm(forms.ModelForm):\n        content = forms.CharField(widget=RichTextWidget(field_settings='basic'))\n\nor::\n\n    class Post(models.Model):\n        content = RichTextField(field_settings='advanced')\n\n.. note:: Fields always inherit the default settings, customs settings and\n          profiles are merged with the defaults!\n\n\nCustom init / Using another editor\n----------------------------------\n\nThis is uncharted territory, but in theory it's fairly easy. Just configure\n``DJRICHTEXTFIELD_CONFIG`` to load the right Javascript files and create\nan `init template`_.\n\n::\n\n    DJRICHTEXTFIELD_CONFIG = {\n        'js': ['path/to/editor.js'],\n        'init_template': 'path/to/init/template.js',\n        'settings': {'some': 'configuration'}\n    }\n\nInit template\n^^^^^^^^^^^^^\n\nThe init template is a Django template (so it should be in the template and\nnot in the static directory). It contains a tiny bit of Javascript that's\ncalled to initialize each editor. For example, the init template for CKEditor\nlooks like this::\n\n    if (!CKEDITOR.instances[id]) {\n        CKEDITOR.replace(id, settings);\n    }\n\nThe init template has the following Javascript variables available from the\nouter scope:\n\n``$e``\n  jQuery wrapped textarea to be replaced\n``id``\n  The ``id`` attribute of the textarea\n``default_settings``\n  ``DJRICHTEXTFIELD_CONFIG['settings']`` as a JS object\n``custom_settings``\n  The ``field_settings`` as a JS object\n``settings``\n    Merge of ``default_settings`` and ``custom_settings``\n\n\nHandling uploads & other advanced features\n------------------------------------------\n\n``django-richtextfield`` built to be editor agnostic. This means that it's\nup to you to handle file uploads, show content previews and support\nother \"advanced\" features.\n\n\n.. _Profiles: conf_profiles_\n.. _TinyMCE: http://www.tinymce.com/\n.. _CKEditor: http://ckeditor.com/\n\n\nHistory\n-------\n\n1.2.4 (2018-09-25)\n^^^^^^^^^^^^^^^^^^\n\n- Fix display issue in Django 2.1's admin interface\n\n\n1.2.3 (2018-09-11)\n^^^^^^^^^^^^^^^^^^\n\n- Add support for Django 2.1\n\n\n1.2.2 (2018-06-12)\n^^^^^^^^^^^^^^^^^^\n\n* Conditionally load the (un)minified version of jquery depending on ``DEBUG``\n* Load jQuery before all other scripts\n\n\n1.2.1 (2018-01-18)\n^^^^^^^^^^^^^^^^^^\n\n* Add ``['admin/js/vendor/jquery/jquery.min.js', 'admin/js/jquery.init.js']``\n  to ``RichTextWidget.media.js``. This makes the widget usable outside of the\n  admin (but still requires ``django.contrib.admin`` to be in ``INSTALLED_APPS``)\n  and prevents javascript errors inside the admin in certain edge cases.\n\n\n1.2 (2017-12-04)\n^^^^^^^^^^^^^^^^\n\n* Remove support for Django < 1.11\n* Add support for Django 2.0\n\n\n1.1 (2016-01-14)\n^^^^^^^^^^^^^^^^\n\n* Remove support for Django < 1.8\n* Tested with Django 1.8 & Django 1.9\n\n1.0.1 (2014-11-13)\n^^^^^^^^^^^^^^^^^^\n\n* Fix unicode error\n\n1.0 (2014-09-30)\n^^^^^^^^^^^^^^^^\n\n* First release",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jaap3/django-richtextfield",
    "keywords": "django-richtextfield,djrichtextfield django wywiwyg field",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-richtextfield",
    "package_url": "https://pypi.org/project/django-richtextfield/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-richtextfield/",
    "project_urls": {
      "Homepage": "https://github.com/jaap3/django-richtextfield"
    },
    "release_url": "https://pypi.org/project/django-richtextfield/1.2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django model field and widget that renders a customizable WYSIWYG/rich text editor",
    "version": "1.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10060054,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65c0f140326745a523407c50d5e5f7ae5b628d2e5607fd731b1b8bb6da2492e7",
        "md5": "3ebec05fed6bfed186c531b7f293f3b4",
        "sha256": "fcbaeccedd74e006dcb037271a2fd0f23848bfed0ecc6f83b4ca880fd7c94195"
      },
      "downloads": -1,
      "filename": "django-richtextfield-1.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "3ebec05fed6bfed186c531b7f293f3b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14315,
      "upload_time": "2018-09-25T07:22:11",
      "upload_time_iso_8601": "2018-09-25T07:22:11.007883Z",
      "url": "https://files.pythonhosted.org/packages/65/c0/f140326745a523407c50d5e5f7ae5b628d2e5607fd731b1b8bb6da2492e7/django-richtextfield-1.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}