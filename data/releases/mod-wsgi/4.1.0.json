{
  "info": {
    "author": "Graham Dumpleton",
    "author_email": "Graham.Dumpleton@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: BSD",
      "Operating System :: POSIX :: Linux",
      "Operating System :: POSIX :: SunOS/Solaris",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Server"
    ],
    "description": "========\r\nMOD_WSGI\r\n========\r\n\r\nThe mod_wsgi package provides an Apache module that implements a WSGI\r\ncompliant interface for hosting Python based web applications on top of the\r\nApache web server.\r\n\r\nInstallation of mod_wsgi can now be performed in one of two ways.\r\n\r\nThe first way of installing mod_wsgi is the traditional way that has\r\nbeen used in the past, where it is installed as a module directly into your\r\nApache installation.\r\n\r\nThe second and newest way of installing mod_wsgi is to install it as a\r\nPython package into your Python installation.\r\n\r\nThis new way of installing mod_wsgi will compile not only the Apache\r\nmodule for mod_wsgi, but will also install a set of Python modules and\r\nan admin script for running up Apache directly from the command line\r\nwith an auto generated configuration.\r\n\r\nThis later mechanism for running up Apache, which is referred to as the\r\nmod_wsgi express version, provides a much simpler way of getting starting\r\nwith hosting your Python web application.\r\n\r\nIn particular, the new installation method makes it very easy to use\r\nApache/mod_wsgi in a development environment without the need to perform\r\nany Apache configuration yourself.\r\n\r\nSystem Requirements\r\n-------------------\r\n\r\nWith either installation method for mod_wsgi, you obviously must have\r\nApache installed.\r\n\r\nIf running Linux, any corresponding developer variant of the specific\r\nApache package you are using also needs to be installed. This is required\r\nin order to be able to compile mod_wsgi from source code.\r\n\r\nFor example, on Ubuntu Linux, if you were using the Apache prefork MPM\r\nyou would need both:\r\n\r\n* apache2-mpm-prefork\r\n* apache2-prefork-dev\r\n\r\nIf instead you were using the Apache worker MPM, you would need both:\r\n\r\n* apache2-mpm-worker\r\n* apache2-threaded-dev\r\n\r\nIn general it is recommend you use the Apache worker MPM where you have\r\na choice, although mod_wsgi will work with both, as well as the event\r\nand ITK MPM, plus winnt MPM on Windows.\r\n\r\nIf you are running MacOS X, the Apache server and required developer\r\nfiles for compiling mod_wsgi are already present.\r\n\r\nInstallation into Apache\r\n------------------------\r\n\r\nFor installation directly into your Apache installation, see the full\r\ndocumentation at:\r\n\r\n* http://www.modwsgi.org/\r\n\r\nAlso see the documentation if wishing to use mod_wsgi on Windows as the\r\nmethod of installing direct into your Python installation will not work\r\non Windows.\r\n\r\nInstallation into Python\r\n------------------------\r\n\r\nTo install the mod_wsgi express version directly into your Python\r\ninstallation, from within the source directory of the mod_wsgi package you\r\ncan run::\r\n\r\n    python setup.py install\r\n\r\nThis will compile mod_wsgi and install the resulting package into your\r\nPython installation.\r\n\r\nIf wishing to install an official release direct from PyPi, you can\r\ninstead run::\r\n\r\n    pip install mod_wsgi\r\n\r\nIf you wish to use a version of Apache which is installed into a non\r\nstandard location, you can set and export the ``APXS`` environment variable\r\nto the location of the Apache ``apxs`` script for your Apache installation\r\nbefore performing the installation.\r\n\r\nNote that nothing will be copied into your Apache installation at this\r\npoint. As a result, you do not need to run this as the root user unless\r\ninstalling it into a site wide Python installation rather than a Python\r\nvirtual environment.\r\n\r\nTo verify that the installation was successful, run the ``mod_wsgi-express``\r\nscript with the ``start-server`` command::\r\n\r\n    mod_wsgi-express start-server\r\n\r\nThis will start up Apache/mod_wsgi on port 8000. You can then verify that\r\nthe installation worked by pointing your browser at::\r\n\r\n    http://localhost:8000/\r\n\r\nWhen started in this way, the Apache web server will stay in the\r\nforeground. To stop the Apache server, use CTRL-C.\r\n\r\nFor a simple WSGI application contained in a WSGI script file called\r\n``wsgi.py``, in the current directory, you can now run::\r\n\r\n    mod_wsgi-express start-server wsgi.py\r\n\r\nThis instance of the Apache web server will be completely independent of,\r\nand will not interfere with any existing instance of Apache you may have\r\nrunning on port 80.\r\n\r\nIf you already have another web server running on port 8000, you can\r\noverride the port to be used using the ``--port`` option::\r\n\r\n    mod_wsgi-express start-server wsgi.py --port 8001\r\n\r\nFor a complete list of options you can run::\r\n\r\n    mod_wsgi-express start-server --help\r\n\r\nFurther information on using the mod_wsgi express version see the main\r\nmod_wsgi documentation.\r\n\r\nUsing mod_wsgi express with Django\r\n----------------------------------\r\n\r\nTo use the mod_wsgi express version with Django, after having installed\r\nthe mod_wsgi package into your Python installation, edit your Django\r\nsettings module and add ``mod_wsgi.server`` to the list of installed apps.\r\n\r\n::\r\n\r\n    INSTALLED_APPS = (\r\n        'django.contrib.admin',\r\n        'django.contrib.auth',\r\n        'django.contrib.contenttypes',\r\n        'django.contrib.sessions',\r\n        'django.contrib.messages',\r\n        'django.contrib.staticfiles',\r\n        'mod_wsgi.server',\r\n    )\r\n\r\nTo prepare for running of the mod_wsgi express version, ensure that you\r\nfirst collect up any Django static file assets into the directory specified\r\nfor them in the Django settings file::\r\n\r\n    python manage.py collectstatic\r\n\r\nYou can now run the Apache server with mod_wsgi hosting your Django\r\napplication by running::\r\n\r\n    python manage.py runmodwsgi\r\n\r\nIf working in a development environment and you would like to have any code\r\nchanges automatically reloaded, then you can use the ``--reload-on-changes``\r\noption.\r\n\r\n::\r\n\r\n    python manage.py runmodwsgi --reload-on-changes\r\n\r\nUsing mod_wsgi express with New Relic\r\n-------------------------------------\r\n\r\nIf using `New Relic <http://www.newrelic.com/>`_ for application\r\nperformance monitoring, and you already have the ``newrelic`` package\r\ninstalled and your Python agent configuration file generated, you can use\r\nthe ``--with-newrelic`` option.\r\n\r\nYou do not need to use the ``newrelic-admin`` script that New Relic\r\nprovides to wrap the execution of the server. You only need to set the\r\n``NEW_RELIC_CONFIG_FILE`` environment variable to the location of your\r\nagent configuration file.\r\n\r\n::\r\n\r\n    NEW_RELIC_CONFIG_FILE=`pwd`/newrelic.ini\r\n    export NEW_RELIC_CONFIG_FILE\r\n\r\n    mod_wsgi-express wsgi.py --with-newrelic\r\n\r\nNew Relic provides a free Lite tier so there is no excuse for not using it.\r\nLearn about what your Python web application is really doing. [1]_\r\n\r\nUsing mod_wsgi express with wdb (Web Debugger)\r\n----------------------------------------------\r\n\r\nIf a fan of `wdb <https://github.com/Kozea/wdb>`_ for debugging your web\r\napplication during development, and you already have that installed, you\r\ncan use the ``--with-wdb`` option.\r\n\r\n::\r\n\r\n    mod_wsgi-express wsgi.py --with-wdb\r\n\r\nYou do not need to start the wdb server yourself, it will be automatically\r\nstarted and managed for you.\r\n\r\n.. [1] Disclaimer: I work for New Relic and am the primary developer of\r\n       the Python agent. So of course it is awesome. :-)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.modwsgi.org/",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "Graham Dumpleton",
    "maintainer_email": "Graham.Dumpleton@gmail.com",
    "name": "mod-wsgi",
    "package_url": "https://pypi.org/project/mod-wsgi/",
    "platform": "",
    "project_url": "https://pypi.org/project/mod-wsgi/",
    "project_urls": {
      "Homepage": "http://www.modwsgi.org/"
    },
    "release_url": "https://pypi.org/project/mod-wsgi/4.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Installer for Apache/mod_wsgi.",
    "version": "4.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15063015,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f2853b15dc4d45a6c85f86c4f6499b8372f0d5cf6a43dbac4753c9deef2d89a",
        "md5": "bdf315a9ce49d8e9ba423c05f9159359",
        "sha256": "960c465e89ff1075db4893e59cc0e1e8f75c2952985218490fb5006c26157cc6"
      },
      "downloads": -1,
      "filename": "mod_wsgi-4.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bdf315a9ce49d8e9ba423c05f9159359",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 883245,
      "upload_time": "2014-05-23T11:29:42",
      "upload_time_iso_8601": "2014-05-23T11:29:42.771232Z",
      "url": "https://files.pythonhosted.org/packages/4f/28/53b15dc4d45a6c85f86c4f6499b8372f0d5cf6a43dbac4753c9deef2d89a/mod_wsgi-4.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2022-2255"
      ],
      "details": "A vulnerability was found in mod_wsgi. The X-Client-IP header is not removed from a request from an untrusted proxy, allowing an attacker to pass the X-Client-IP header to the target WSGI application because the condition to remove it is missing.",
      "fixed_in": [
        "4.9.3"
      ],
      "id": "GHSA-7527-8855-9cf8",
      "link": "https://osv.dev/vulnerability/GHSA-7527-8855-9cf8",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-2255",
        "GHSA-7527-8855-9cf8"
      ],
      "details": "A vulnerability was found in mod_wsgi. The X-Client-IP header is not removed from a request from an untrusted proxy, allowing an attacker to pass the X-Client-IP header to the target WSGI application because the condition to remove it is missing.",
      "fixed_in": [
        "4.9.3"
      ],
      "id": "PYSEC-2022-254",
      "link": "https://osv.dev/vulnerability/PYSEC-2022-254",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}