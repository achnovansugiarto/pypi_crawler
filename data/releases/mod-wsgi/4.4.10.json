{
  "info": {
    "author": "Graham Dumpleton",
    "author_email": "Graham.Dumpleton@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: BSD",
      "Operating System :: POSIX :: Linux",
      "Operating System :: POSIX :: SunOS/Solaris",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Server"
    ],
    "description": "========\r\nMOD_WSGI\r\n========\r\n\r\nThe mod_wsgi package provides an Apache module that implements a WSGI\r\ncompliant interface for hosting Python based web applications on top of the\r\nApache web server.\r\n\r\nInstallation of mod_wsgi can now be performed in one of two ways.\r\n\r\nThe first way of installing mod_wsgi is the traditional way that has\r\nbeen used in the past, where it is installed as a module directly into your\r\nApache installation.\r\n\r\nThe second and newest way of installing mod_wsgi is to install it as a\r\nPython package into your Python installation.\r\n\r\nThis new way of installing mod_wsgi will compile not only the Apache\r\nmodule for mod_wsgi, but will also install a set of Python modules and\r\nan admin script for running up Apache directly from the command line\r\nwith an auto generated configuration.\r\n\r\nThis later mechanism for running up Apache, which is referred to as the\r\nmod_wsgi express version, provides a much simpler way of getting starting\r\nwith hosting your Python web application.\r\n\r\nIn particular, the new installation method makes it very easy to use\r\nApache/mod_wsgi in a development environment without the need to perform\r\nany Apache configuration yourself.\r\n\r\nSystem Requirements\r\n-------------------\r\n\r\nWith either installation method for mod_wsgi, you obviously must have\r\nApache installed.\r\n\r\nIf running Linux, any corresponding developer variant of the specific\r\nApache package you are using also needs to be installed. This is required\r\nin order to be able to compile mod_wsgi from source code.\r\n\r\nFor example, on Ubuntu Linux with Apache 2.2, if you were using the Apache\r\nprefork MPM you would need both:\r\n\r\n* apache2-mpm-prefork\r\n* apache2-prefork-dev\r\n\r\nIf instead you were using the Apache worker MPM, you would need both:\r\n\r\n* apache2-mpm-worker\r\n* apache2-threaded-dev\r\n\r\nIn general it is recommend you use the Apache worker MPM where you have\r\na choice, although mod_wsgi will work with both, as well as the event\r\nand ITK MPM, plus winnt MPM on Windows.\r\n\r\nIf you are running MacOS X, the Apache server and required developer\r\nfiles for compiling mod_wsgi are already present.\r\n\r\nInstallation into Apache\r\n------------------------\r\n\r\nFor installation directly into your Apache installation, see the full\r\ndocumentation at:\r\n\r\n* http://www.modwsgi.org/\r\n\r\nAlso see the documentation if wishing to use mod_wsgi on Windows as the\r\nmethod of installing direct into your Python installation will not work\r\non Windows.\r\n\r\nInstallation into Python\r\n------------------------\r\n\r\nTo install the mod_wsgi express version directly into your Python\r\ninstallation, from within the source directory of the mod_wsgi package you\r\ncan run::\r\n\r\n    python setup.py install\r\n\r\nThis will compile mod_wsgi and install the resulting package into your\r\nPython installation.\r\n\r\nIf wishing to install an official release direct from PyPi, you can\r\ninstead run::\r\n\r\n    pip install mod_wsgi\r\n\r\nIf you wish to use a version of Apache which is installed into a non\r\nstandard location, you can set and export the ``APXS`` environment variable\r\nto the location of the Apache ``apxs`` script for your Apache installation\r\nbefore performing the installation.\r\n\r\nNote that nothing will be copied into your Apache installation at this\r\npoint. As a result, you do not need to run this as the root user unless\r\ninstalling it into a site wide Python installation rather than a Python\r\nvirtual environment.\r\n\r\nTo verify that the installation was successful, run the ``mod_wsgi-express``\r\nscript with the ``start-server`` command::\r\n\r\n    mod_wsgi-express start-server\r\n\r\nThis will start up Apache/mod_wsgi on port 8000. You can then verify that\r\nthe installation worked by pointing your browser at::\r\n\r\n    http://localhost:8000/\r\n\r\nWhen started in this way, the Apache web server will stay in the\r\nforeground. To stop the Apache server, use CTRL-C.\r\n\r\nFor a simple WSGI application contained in a WSGI script file called\r\n``wsgi.py``, in the current directory, you can now run::\r\n\r\n    mod_wsgi-express start-server wsgi.py\r\n\r\nThis instance of the Apache web server will be completely independent of,\r\nand will not interfere with any existing instance of Apache you may have\r\nrunning on port 80.\r\n\r\nIf you already have another web server running on port 8000, you can\r\noverride the port to be used using the ``--port`` option::\r\n\r\n    mod_wsgi-express start-server wsgi.py --port 8001\r\n\r\nFor a complete list of options you can run::\r\n\r\n    mod_wsgi-express start-server --help\r\n\r\nFurther information on using the mod_wsgi express version see the main\r\nmod_wsgi documentation.\r\n\r\nNon standard Apache installations\r\n---------------------------------\r\n\r\nMany Linux distributions have a tendency to screw around with the standard\r\nApache Software Foundation layout for installation of Apache. This can\r\ninclude renaming the Apache ``httpd`` executable to something else, and in\r\naddition to potentially renaming it, replacing the original binary with a\r\nshell script which performs additional actions which can only be performed\r\nas the ``root`` user.\r\n\r\nIn the case of the ``httpd`` executable simply being renamed, the\r\nexecutable will obviously not be found and mod_wsgi express will fail to\r\nstart at all.\r\n\r\nIn this case you should work out what the ``httpd`` executable was renamed\r\nto and use the ``--httpd-executable`` option to specify its real location.\r\n\r\nFor example, if ``httpd`` was renamed to ``apache2``, you might need to use::\r\n\r\n    mod_wsgi-express start-server wsgi.py --httpd-executable=/usr/sbin/apache2\r\n\r\nIn the case of the ``httpd`` executable being replaced with a shell script\r\nwhich performs additional actions before then executing the original\r\n``httpd`` executable, and the shell script is failing in some way, you will\r\nneed to use the location of the original ``httpd`` executable the shell\r\nscript is in turn executing.\r\n\r\nRunning mod_wsgi express as root\r\n--------------------------------\r\n\r\nThe primary intention of mod_wsgi express is to make it easier for users\r\nto run up Apache on non privileged ports, especially during the development\r\nof a Python web application. If you want to be able to run Apache using\r\nmod_wsgi express on a privileged port such as the standard port 80 used by\r\nHTTP servers, then you will need to run ``mod_wsgi-express`` as root. In\r\ndoing this, you will need to perform additional steps.\r\n\r\nThe first thing you must do is supply the ``--user`` and ``--group``\r\noptions to say what user and group your Python web application should run\r\nas. Most Linux distrbutions will pre define a special user for Apache to\r\nrun as, so you can use that. Alternatively you can use any other special\r\nuser account you have created for running the Python web application::\r\n\r\n    mod_wsgi-express start-server wsgi.py --port=80 \\\r\n        --user www-data --group www-data\r\n\r\nThis approach to running ``mod_wsgi-express`` will be fine so long as you\r\nare using a process supervisor which expects the started process to remain\r\nin the foreground and not daemonize.\r\n\r\nIf however you are directly integrating into the system init scripts where\r\nseparate start and stop commands are expected, with the executing process\r\nexpected to be daemonized, then a different process is required to setup\r\nmod_wsgi express.\r\n\r\nIn this case, instead of simply using the ``start-server`` command to\r\n``mod_wsgi-express`` you should use ``setup-server``::\r\n\r\n    mod_wsgi-express setup-server wsgi.py --port=80 \\\r\n        --user www-data --group www-data \\\r\n        --server-root=/etc/mod_wsgi-express-80\r\n\r\nIn running this command, it will not actually startup Apache. All it will do\r\nis create the set of configuration files and startup script to be run.\r\n\r\nSo that these are not created in the default location of a directory under\r\n``/tmp``, you should use the ``--server-root`` option to specify where they\r\nshould be placed.\r\n\r\nHaving created the configuration and startup script, to start the Apache\r\ninstance you can now run::\r\n\r\n    /etc/mod_wsgi-express-80/apachectl start\r\n\r\nTo subsequently stop the Apache instance you can run::\r\n\r\n    /etc/mod_wsgi-express-80/apachectl stop\r\n\r\nYou can also restart the Apache instance as necessary using::\r\n\r\n    /etc/mod_wsgi-express-80/apachectl restart\r\n\r\nUsing this approach, the original options you supplied to ``setup-server``\r\nwill effectively be cached with the resulting configuration used each time.\r\nIf you need to update the set of options, run ``setup-server`` again with\r\nthe new set of options.\r\n\r\nNote that even taking all these steps, it is possible that running up\r\nApache as ``root`` using mod_wsgi express may fail on systems where SELinux\r\nextensions are enabled. This is because the SELinux profile may not match\r\nwhat is being expected for the way that Apache is being started, or\r\nalternatively, the locations that Apache has been specified as being\r\nallowed to access, don't match where the directory specified using the\r\n``--server-root`` directory was placed. You may therefore need to configure\r\nSELinux or move the directory used with ``--server-root`` to an allowed\r\nlocation.\r\n\r\nUsing mod_wsgi express with Django\r\n----------------------------------\r\n\r\nTo use the mod_wsgi express version with Django, after having installed\r\nthe mod_wsgi package into your Python installation, edit your Django\r\nsettings module and add ``mod_wsgi.server`` to the list of installed apps.\r\n\r\n::\r\n\r\n    INSTALLED_APPS = (\r\n        'django.contrib.admin',\r\n        'django.contrib.auth',\r\n        'django.contrib.contenttypes',\r\n        'django.contrib.sessions',\r\n        'django.contrib.messages',\r\n        'django.contrib.staticfiles',\r\n        'mod_wsgi.server',\r\n    )\r\n\r\nTo prepare for running of the mod_wsgi express version, ensure that you\r\nfirst collect up any Django static file assets into the directory specified\r\nfor them in the Django settings file::\r\n\r\n    python manage.py collectstatic\r\n\r\nYou can now run the Apache server with mod_wsgi hosting your Django\r\napplication by running::\r\n\r\n    python manage.py runmodwsgi\r\n\r\nIf working in a development environment and you would like to have any code\r\nchanges automatically reloaded, then you can use the ``--reload-on-changes``\r\noption.\r\n\r\n::\r\n\r\n    python manage.py runmodwsgi --reload-on-changes\r\n\r\nIf wanting to have Apache started as root in order to listen on port 80,\r\ninstead of using ``mod_wsgi-express setup-server`` as described above,\r\nuse the ``--setup-only`` option to the ``runmodwsgi`` management\r\ncommand.\r\n\r\n::\r\n\r\n    python manage.py runmodwsgi --setup-only --port=80 \\\r\n        --user www-data --group www-data \\\r\n        --server-root=/etc/mod_wsgi-express-80\r\n\r\nUsing mod_wsgi express with New Relic\r\n-------------------------------------\r\n\r\nIf using `New Relic <http://www.newrelic.com/>`_ for application\r\nperformance monitoring, and you already have the ``newrelic`` package\r\ninstalled and your Python agent configuration file generated, you can use\r\nthe ``--with-newrelic`` option.\r\n\r\nYou do not need to use the ``newrelic-admin`` script that New Relic\r\nprovides to wrap the execution of the server. You only need to set the\r\n``NEW_RELIC_CONFIG_FILE`` environment variable to the location of your\r\nagent configuration file.\r\n\r\n::\r\n\r\n    NEW_RELIC_CONFIG_FILE=`pwd`/newrelic.ini\r\n    export NEW_RELIC_CONFIG_FILE\r\n\r\n    mod_wsgi-express start-server wsgi.py --with-newrelic",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.modwsgi.org/",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "Graham Dumpleton",
    "maintainer_email": "Graham.Dumpleton@gmail.com",
    "name": "mod-wsgi",
    "package_url": "https://pypi.org/project/mod-wsgi/",
    "platform": "",
    "project_url": "https://pypi.org/project/mod-wsgi/",
    "project_urls": {
      "Homepage": "http://www.modwsgi.org/"
    },
    "release_url": "https://pypi.org/project/mod-wsgi/4.4.10/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Installer for Apache/mod_wsgi.",
    "version": "4.4.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15063015,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db2ca5a40a7fe9eda2ccd904c9c4caf511adc002d43dbf8069722e229cec2a10",
        "md5": "cb9179d82c36d0457ac4f12ed5948668",
        "sha256": "73d63fc7ad69190b8ce99bb0b64f296e707168206fa60a97e46307e74fc956a8"
      },
      "downloads": -1,
      "filename": "mod_wsgi-4.4.10.tar.gz",
      "has_sig": false,
      "md5_digest": "cb9179d82c36d0457ac4f12ed5948668",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 986351,
      "upload_time": "2015-03-07T02:33:54",
      "upload_time_iso_8601": "2015-03-07T02:33:54.068691Z",
      "url": "https://files.pythonhosted.org/packages/db/2c/a5a40a7fe9eda2ccd904c9c4caf511adc002d43dbf8069722e229cec2a10/mod_wsgi-4.4.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2022-2255"
      ],
      "details": "A vulnerability was found in mod_wsgi. The X-Client-IP header is not removed from a request from an untrusted proxy, allowing an attacker to pass the X-Client-IP header to the target WSGI application because the condition to remove it is missing.",
      "fixed_in": [
        "4.9.3"
      ],
      "id": "GHSA-7527-8855-9cf8",
      "link": "https://osv.dev/vulnerability/GHSA-7527-8855-9cf8",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-2255",
        "GHSA-7527-8855-9cf8"
      ],
      "details": "A vulnerability was found in mod_wsgi. The X-Client-IP header is not removed from a request from an untrusted proxy, allowing an attacker to pass the X-Client-IP header to the target WSGI application because the condition to remove it is missing.",
      "fixed_in": [
        "4.9.3"
      ],
      "id": "PYSEC-2022-254",
      "link": "https://osv.dev/vulnerability/PYSEC-2022-254",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}