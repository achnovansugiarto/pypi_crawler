{
  "info": {
    "author": "Paul Wilhelm",
    "author_email": "anfrage@paulwilhelm.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering"
    ],
    "description": "\nMagnetiCalc\n===========\n\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/ISC)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=TN6YTPVX36YHA&source=url)\n[![API Documentation](https://img.shields.io/badge/Documentation-API-orange)](https://shredengineer.github.io/MagnetiCalc/)\n[![PyPI version](https://img.shields.io/pypi/v/MagnetiCalc?label=PyPI)](https://pypi.org/project/MagnetiCalc/)\n\n**What does MagnetiCalc do?**\n\nMagnetiCalc calculates the magnetic flux density, vector potential, energy, self-inductance\nand magnetic dipole moment of arbitrary coils in vacuum.\nAs an experimental feature, different core media can be modeled as regions of variable relative permeability.\n\nInside a VisPy/OpenGL-accelerated PyQt5 GUI, the static magnetic flux density\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-field due to DC currents,\nin units of <i>Tesla</i>)\nor the magnetic vector potential\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">-field,\nin units of <i>Tesla-meter</i>)\nis displayed in interactive 3D, using multiple metrics for highlighting the field properties.\n\n**Who needs MagnetiCalc?**\n\nMagnetiCalc does its job for hobbyists, students, engineers and researchers of magnetic phenomena.\nI designed MagnetiCalc from scratch, because I didn't want to mess around\nwith expensive and/or overly complex simulation software\nwhenever I needed to solve a magnetostatic problem.\n\n**How does it work?**\n\nThe <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-field calculation\nis implemented using the Biot-Savart law [1], employing multiprocessing techniques;\nMagnetiCalc uses just-in-time compilation (JIT/Numba) to achieve high-performance calculations.\nAdditionally, the use of easily constrainable \"sampling volumes\" allows for selective calculation over\ngrids of arbitrary shape and arbitrary relative permeabilities\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mu_r(\\mathbf{x})\" alt=\"µ_r(x)\">.\n\nThe shape of any wire is modeled as a 3D piecewise linear curve.\nArbitrary loops of wire are sliced into differential current elements\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{\\ell}\" alt=\"l\">),\neach of which contributes to the total resulting field\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">,\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">)\nat some fixed 3D grid point (<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{x}\" alt=\"x\">),\nsumming over the positions of all current elements\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{x^'}\" alt=\"x'\">):\n\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}(\\mathbf{x})=I \\cdot \\frac{\\mu_0}{4 \\pi} \\cdot \\displaystyle \\sum_\\mathbf{x^'} \\mu_r(\\mathbf{x}) \\cdot \\frac{\\mathbf{\\ell}(\\mathbf{x^')}}{\\mid \\mathbf{x} - \\mathbf{x^'} \\mid}\"><br>\n\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}(\\mathbf{x})=I \\cdot \\frac{\\mu_0}{4 \\pi} \\cdot \\displaystyle \\sum_\\mathbf{x^'} \\mu_r(\\mathbf{x}) \\cdot \\frac{\\mathbf{\\ell}(\\mathbf{x^'}) \\times (\\mathbf{x} - \\mathbf{x^'})}{\\mid \\mathbf{x} - \\mathbf{x^'} \\mid}\"><br>\n\nAt each grid point, the field magnitude (or field angle in some plane) is displayed using colored arrows and/or dots;\nfield color and alpha transparency are individually mapped using one of the various available metrics;\nsee [Appendix: Metrics](#appendix-metrics).\n\nThe coil's energy <img src=\"https://render.githubusercontent.com/render/math?math=E\" alt=\"E\"> [2]\nand self-inductance <img src=\"https://render.githubusercontent.com/render/math?math=L\" alt=\"L\"> [3]\nare calculated by summing the squared\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-field\nover the entire sampling volume;\nensure that the sampling volume encloses a large, non-singular portion of the field:\n\n<img src=\"https://render.githubusercontent.com/render/math?math=E=\\frac{1}{\\mu_0} \\cdot \\displaystyle \\sum_\\mathbf{x} \\frac{\\mathbf{B}(\\mathbf{x}) \\cdot \\mathbf{B}(\\mathbf{x})}{\\mu_r(\\mathbf{x})}\"><br>\n\n<img src=\"https://render.githubusercontent.com/render/math?math=L=\\frac{1}{\\I^2} \\cdot E\"><br>\n\nAdditionally, the scalar magnetic dipole moment\n<img src=\"https://render.githubusercontent.com/render/math?math=m\" alt=\"m\"> [4]\nis calculated by summing over all current elements:\n\n<img src=\"https://render.githubusercontent.com/render/math?math=m=I \\cdot \\frac{1}{2} \\cdot \\Bigl| \\displaystyle \\sum_\\mathbf{x^'} \\mathbf{x^'} \\times \\mathbf{\\ell}(\\mathbf{x^'}) \\Bigr|\"><br>\n\n***References***\n\n[1]: Jackson, Klassische Elektrodynamik, 5. Auflage, S. 204, (5.4).<br>\n[2]: Kraus, Electromagnetics, 4th Edition, p. 269, 6-9-1.<br>\n[3]: Jackson, Klassische Elektrodynamik, 5. Auflage, S. 252, (5.157).<br>\n[4]: Jackson, Klassische Elektrodynamik, 5. Auflage, S. 216, (5.54).\n\n\nScreenshot\n----------\n\n![Screenshot](https://raw.githubusercontent.com/shredEngineer/MagnetiCalc/master/docs/Screenshot.png)\n\n(Screenshot taken from the latest GitHub release.)\n\nInstallation\n------------\nTested with Python 3.8 in Ubuntu 20.04.\n\nIf you have trouble installing MagnetiCalc,\nmake sure to file an [issue](https://github.com/shredEngineer/MagnetiCalc/issues)\nso I can help you get it up and running!\n\n### Prerequisites\n\nThe following dependency packages have to be installed first (Ubuntu 20.04):\n```shell\nsudo apt install python3-dev\nsudo apt install libxcb-xinerama0 --reinstall\n```\n\n### Option A: Automatic install via pip\n**Note:** On some systems, it may be necessary to upgrade pip first:\n```shell\npython3 -m pip install pip --upgrade\n```\n\nInstall (or upgrade) MagnetiCalc to the user site-packages directory and start it from there: \n```shell\npython3 -m pip install magneticalc --upgrade\npython3 -m magneticalc\n```\n\nThis will automatically install all dependency packages.\n\n**Note:** From within a *Jupyter Notebook*, MagnetiCalc must be installed and run like this:\n```python\nimport sys\n!{sys.executable} -m pip install magneticalc --upgrade\n!{sys.executable} -m magneticalc\n```\n\n### Option B: Manual download\nFirst, manually install all dependency packages (upgrading each to the latest version):\n```shell\npython3 -m pip install numpy numba PyQt5 vispy qtawesome colorit si-prefix --upgrade\n```\n\nClone the latest version of MagnetiCalc from GitHub and start it directly: \n```shell\ngit clone https://github.com/shredEngineer/MagnetiCalc\ncd MagnetiCalc\npython3 -m magneticalc\n```\n\nFor debugging, you may now also install (uninstall) the package in a virtual environment:\n```shell\npython3 -m pip install .\n…\npython3 -m pip uninstall magneticalc -y\n``` \n\nLicense\n-------\nCopyright © 2020, Paul Wilhelm, M. Sc. <[anfrage@paulwilhelm.de](mailto:anfrage@paulwilhelm.de)>\n\n<b>ISC License</b>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nContribute\n----------\nYou are invited to contribute to MagnetiCalc in any way you like! :)\n\nIf this software has been helpful to you in some way or another, please let me and others know!\n\nToDo\n----\n* Add CUDA backend for Biot-Savart implementation.\n* Add installation instructions for Windows, ensure consistent PyQt5 look and feel.\n* Add support for selective display over a portion of the metric range, in order to get a kind of iso-contour display.\n* Add support for modeling of core material saturation and hysteresis effects.\n* Add support for multiple wires, study mutual induction.\n\nVideo\n-----\nA very short demo of MagnetiCalc in action:\n\n[![Magnetic Field Calculation with Python (MagnetiCalc)](https://raw.githubusercontent.com/shredEngineer/MagnetiCalc/master/docs/Video-Thumb.png)](https://www.youtube.com/watch?v=B60dk3BZO0c)\n\nLinks\n-----\nIf you want to comment on the project or see additional info, please visit my personal website:\nhttps://paulwilhelm.de/magneticalc/\n\n*Appendix:* Metrics\n-------------------\n\n| Metric               | Symbol                                                                                       | Description                         |\n|----------------------|----------------------------------------------------------------------------------------------|-------------------------------------|\n| ``Magnitude``        | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}\\mid\">            | Magnitude in space                  |\n| ``Magnitude X``      | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{X}\\mid\">        | Magnitude in X-direction            |\n| ``Magnitude Y``      | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{Y}\\mid\">        | Magnitude in Y-direction            |\n| ``Magnitude Z``      | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{Z}\\mid\">        | Magnitude in Z-direction            |\n| ``Magnitude XY``     | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{XY}\\mid\">       | Magnitude in XY-plane               |\n| ``Magnitude XZ``     | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{XZ}\\mid\">       | Magnitude in XZ-plane               |\n| ``Magnitude YZ``     | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{YZ}\\mid\">       | Magnitude in YZ-plane               |\n| ``Log Magnitude``    | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B}\\mid\">         | Logarithmic Magnitude in space      |\n| ``Log Magnitude X``  | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B_X}\\mid\">       | Logarithmic Magnitude in X-direction|\n| ``Log Magnitude Y``  | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B_Y}\\mid\">       | Logarithmic Magnitude in Y-direction|\n| ``Log Magnitude Z``  | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B_Z}\\mid\">       | Logarithmic Magnitude in Z-direction|\n| ``Log Magnitude XY`` | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B}_{XY}\\mid\">    | Logarithmic Magnitude in XY-plane   |\n| ``Log Magnitude XZ`` | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B}_{XZ}\\mid\">    | Logarithmic Magnitude in XZ-plane   |\n| ``Log Magnitude YZ`` | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B}_{YZ}\\mid\">    | Logarithmic Magnitude in YZ-plane   |\n| ``Angle XY``         | <img src=\"https://render.githubusercontent.com/render/math?math=\\measuredangle\\vec{B}_{XY}\"> | Field angle in XY-plane             |\n| ``Angle XZ``         | <img src=\"https://render.githubusercontent.com/render/math?math=\\measuredangle\\vec{B}_{XZ}\"> | Field angle in XZ-plane             |\n| ``Angle YZ``         | <img src=\"https://render.githubusercontent.com/render/math?math=\\measuredangle\\vec{B}_{YZ}\"> | Field angle in YZ-plane             |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shredEngineer/MagnetiCalc",
    "keywords": "",
    "license": "ISC License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MagnetiCalc",
    "package_url": "https://pypi.org/project/MagnetiCalc/",
    "platform": "any",
    "project_url": "https://pypi.org/project/MagnetiCalc/",
    "project_urls": {
      "Homepage": "https://github.com/shredEngineer/MagnetiCalc"
    },
    "release_url": "https://pypi.org/project/MagnetiCalc/1.8.3.1/",
    "requires_dist": [
      "numpy",
      "numba (>=0.50.0)",
      "PyQt5",
      "vispy (>=0.6.5)",
      "qtawesome (>=1.0.0)",
      "colorit (>=0.1.0)",
      "si-prefix (>=1.2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "MagnetiCalc calculates the magnetic flux density, vector potential, energy, self-inductance and magnetic dipole moment of arbitrary coils in vacuum. As an experimental feature, different core media can be modeled as regions of variable relative permeability. Inside a VisPy/OpenGL-accelerated PyQt5 GUI, the static magnetic flux density (B-field due to DC currents) or the magnetic vector potential (A-field) is displayed in interactive 3D, using multiple metrics for highlighting this field's properties.",
    "version": "1.8.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14294492,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ec61e260f14882700605b441c3d81d1b12e2c1483a730a5d4e675da0eaf4599",
        "md5": "76e11e8fd995323bd57df045bedccfc8",
        "sha256": "ad7247873a2ed0f38897b3c5596b8cf3b4cc48cef35155e0d1d750202e3dfd29"
      },
      "downloads": -1,
      "filename": "MagnetiCalc-1.8.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76e11e8fd995323bd57df045bedccfc8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 93565,
      "upload_time": "2020-11-13T16:38:40",
      "upload_time_iso_8601": "2020-11-13T16:38:40.164174Z",
      "url": "https://files.pythonhosted.org/packages/5e/c6/1e260f14882700605b441c3d81d1b12e2c1483a730a5d4e675da0eaf4599/MagnetiCalc-1.8.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b959e22f4f6bdc31c95c4160e73f92bbc73d39c5997f7cee53ae1234f91223d",
        "md5": "8ac22c39cc295a61fbf951900296a2a6",
        "sha256": "139f4762ae273ab783a512808bf123512cd7621ababd23d5a7c8b7359ae05650"
      },
      "downloads": -1,
      "filename": "MagnetiCalc-1.8.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8ac22c39cc295a61fbf951900296a2a6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 57924,
      "upload_time": "2020-11-13T16:38:41",
      "upload_time_iso_8601": "2020-11-13T16:38:41.236574Z",
      "url": "https://files.pythonhosted.org/packages/4b/95/9e22f4f6bdc31c95c4160e73f92bbc73d39c5997f7cee53ae1234f91223d/MagnetiCalc-1.8.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}