{
  "info": {
    "author": "Paul Wilhelm",
    "author_email": "anfrage@paulwilhelm.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering"
    ],
    "description": "\nMagnetiCalc\n===========\n\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/ISC)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=TN6YTPVX36YHA&source=url)\n[![API Documentation](https://img.shields.io/badge/Documentation-API-orange)](https://shredengineer.github.io/MagnetiCalc/)\n[![PyPI version](https://img.shields.io/pypi/v/MagnetiCalc?label=PyPI)](https://pypi.org/project/MagnetiCalc/)\n\n**What does MagnetiCalc do?**\n\nMagnetiCalc calculates the magnetic field of arbitrary coils in vacuum, examples included.\nInside a VisPy/OpenGL-accelerated PyQt5 GUI, the static magnetic flux density\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-field due to DC currents,\nin units of <i>Tesla</i>) is displayed\nin interactive 3D, using multiple metrics for highlighting the field properties.\nAlternatively, the magnetic vector potential<br>\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">-field,\nin units of <i>Tesla-meter</i>) may be displayed.\nAll parameters and presets can interactively be changed inside the GUI.\nThere is also an experimental feature to calculate the coil's energy and self-inductance.\n\n**Who needs MagnetiCalc?**\n\nMagnetiCalc does its job for hobbyists, students, engineers and researchers of magnetic phenomena.\nI designed MagnetiCalc from scratch, because I didn't want to mess around\nwith expensive and/or overly complex simulation software\nwhenever I needed to solve a magnetostatic problem.\n\n**How does it work?**\n\nThe <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-field calculation\nis implemented using the Biot-Savart law [1], employing multiprocessing techniques.\nThe use of easily constrainable \"sampling volumes\" allows for selective calculation over\ngrids of arbitrary shape.\n\nThe shape of any wire is modeled as a 3D piecewise linear curve.\nArbitrary loops of wire are sliced into differential current elements\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{\\ell}\" alt=\"l\">),\neach of which contributes to the total resulting field\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">,\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">)\nat some fixed 3D grid point (<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{x}\" alt=\"x\">),\nsumming over the positions of all current elements\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{x^'}\" alt=\"x'\">):\n\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}(\\mathbf{x})=I \\cdot \\frac{\\mu_0}{4 \\pi} \\cdot \\displaystyle \\sum_\\mathbf{x^'} \\frac{\\mathbf{\\ell}(\\mathbf{x^')}}{\\mid \\mathbf{x} - \\mathbf{x^'} \\mid}\"><br>\n\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}(\\mathbf{x})=I \\cdot \\frac{\\mu_0}{4 \\pi} \\cdot \\displaystyle \\sum_\\mathbf{x^'} \\frac{\\mathbf{\\ell}(\\mathbf{x^'}) \\times (\\mathbf{x} - \\mathbf{x^'})}{\\mid \\mathbf{x} - \\mathbf{x^'} \\mid}\"><br>\n\nAt each grid point, the field magnitude (or field angle in some plane) is displayed using colored arrows and/or dots;\nfield color and alpha transparency are individually mapped using one of the various available metrics:\n\n| Metric               | Symbol                                                                                       | Description                         |\n|----------------------|----------------------------------------------------------------------------------------------|-------------------------------------|\n| ``Magnitude``        | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}\\mid\">            | Magnitude in space                  |\n| ``Magnitude XY``     | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{XY}\\mid\">       | Magnitude in XY-plane               |\n| ``Magnitude XZ``     | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{XZ}\\mid\">       | Magnitude in XZ-plane               |\n| ``Magnitude YZ``     | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{YZ}\\mid\">       | Magnitude in YZ-plane               |\n| ``Log Magnitude``    | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B}\\mid\">         | Logarithmic Magnitude in space      |\n| ``Log Magnitude XY`` | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B}_{XY}\\mid\">    | Logarithmic Magnitude in XY-plane   |\n| ``Log Magnitude XZ`` | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B}_{XZ}\\mid\">    | Logarithmic Magnitude in XZ-plane   |\n| ``Log Magnitude YZ`` | <img src=\"https://render.githubusercontent.com/render/math?math=ln \\mid\\vec{B}_{YZ}\\mid\">    | Logarithmic Magnitude in YZ-plane   |\n| ``Angle XY``          | <img src=\"https://render.githubusercontent.com/render/math?math=\\measuredangle\\vec{B}_{XY}\"> | Field angle in XY-plane             |\n| ``Angle XZ``          | <img src=\"https://render.githubusercontent.com/render/math?math=\\measuredangle\\vec{B}_{XZ}\"> | Field angle in XZ-plane             |\n| ``Angle YZ``          | <img src=\"https://render.githubusercontent.com/render/math?math=\\measuredangle\\vec{B}_{YZ}\"> | Field angle in YZ-plane             |\n\nAs an experimental feature,\nthe coil's energy <img src=\"https://render.githubusercontent.com/render/math?math=E\" alt=\"E\"> [2]\nand self-inductance <img src=\"https://render.githubusercontent.com/render/math?math=L\" alt=\"L\"> [3]\nare calculated by summing the squared\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-field\nover the entire sampling volume.\nHowever, these values are currently not reliable, varying strongly with the other parameters;\nessentially, the sampling volume must enclose a large, non-singular portion of the field.\n\n<img src=\"https://render.githubusercontent.com/render/math?math=E=\\frac{1}{\\mu_0} \\cdot \\displaystyle \\sum_\\mathbf{x} \\mathbf{B}(\\mathbf{x}) \\cdot \\mathbf{B}(\\mathbf{x})\"><br>\n\n<img src=\"https://render.githubusercontent.com/render/math?math=L=\\frac{1}{\\I^2} \\cdot E\"><br>\n\n[1]: Jackson, Klassische Elektrodynamik, 5. Auflage, S. 204, (5.4).<br>\n[2]: Kraus, Electromagnetics, 4th Edition, p. 269, 6-9-1.<br>\n[3]: Jackson, Klassische Elektrodynamik, 5. Auflage, S. 252, (5.157).\n\n\nScreenshot\n----------\n\n![Screenshot](https://raw.githubusercontent.com/shredEngineer/MagnetiCalc/master/docs/Screenshot.png)\n\n(Screenshot taken from the latest GitHub release.)\n\nInstallation\n------------\nTested with Python 3.8 in Ubuntu 20.04.\n\nIf you have trouble installing MagnetiCalc,\nmake sure to file an [issue](https://github.com/shredEngineer/MagnetiCalc/issues)\nso I can help you get it up and running!\n\n### Prerequisites\n\nThe following dependency packages have to be installed first (Ubuntu 20.04):\n```shell\nsudo apt install python3-dev\nsudo apt install libxcb-xinerama0 --reinstall\n```\n\n### Option A: Automatic install via pip\n**Note:** On some systems, it may be necessary to upgrade pip first:\n```shell\npython3 -m pip install pip --upgrade\n```\n\nInstall MagnetiCalc to the user site-packages directory and start it from there: \n```shell\npython3 -m pip install magneticalc\npython3 -m magneticalc\n```\n\nThis will automatically install all dependency packages.\n\n**Note:** From within a *Jupyter Notebook*, MagnetiCalc may be installed and run like this:\n```python\nimport sys\n!{sys.executable} -m pip install magneticalc\n!{sys.executable} -m magneticalc\n```\n\n### Option B: Manual download\nFirst, manually install all dependency packages (upgrading each to the latest version):\n```shell\npython3 -m pip install PyQt5 qtawesome vispy matplotlib numpy colorit si-prefix --upgrade\n```\n\nClone the latest version of MagnetiCalc from GitHub and start it directly: \n```shell\ngit clone https://github.com/shredEngineer/MagnetiCalc\ncd MagnetiCalc\npython3 -m magneticalc\n```\n\nFor debugging, you may now also install (uninstall) the package in a virtual environment:\n```shell\npython3 -m pip install .\nâ€¦\npython3 -m pip uninstall magneticalc -y\n``` \n\nToDo\n----\n* Improve the calculation of self-inductance; there seems to be a scaling error!\n* Add support for saving/loading configuration to/from other filenames.\n* Add installation instructions for Windows, ensure consistent PyQt5 look and feel.\n* Add support for adding, editing and removing sampling volume constraints;\n  the SamplingVolume module already supports constraints, but the GUI currently doesn't.\n  This will also require changes to the way the field labels are currently distributed (relying on a *complete* grid).\n* Add support for selective display over a portion of the metric range, in order to get a kind of iso-contour display.\n* Add support for different media with arbitrary geometry and permeability.\n* Add support for multiple wires, study mutual induction.\n* Move the field and metric calculations directly to the OpenGL shader engines,\n  thus most likely drastically shortening overall computation time.\n\nContribute\n----------\nYou are invited to contribute to MagnetiCalc in any way you like! :)\n\nIf this software has been helpful to you in some way or another, please let me and others know!\n\nLicense\n-------\nCopyright Â© 2020, Paul Wilhelm, M. Sc. <[anfrage@paulwilhelm.de](mailto:anfrage@paulwilhelm.de)>\n\n<b>ISC License</b>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nVideo Demo\n----------\nHere is a very short demo of an earlier version of MagnetiCalc in action:\n\n[![Magnetic Field Calculation with Python (MagnetiCalc)](https://raw.githubusercontent.com/shredEngineer/MagnetiCalc/master/docs/Video-Thumb.png)](https://www.youtube.com/watch?v=rsVbu5uF0eU)\n\nLinks\n-----\nIf you want to comment on the project or see additional info, please visit my personal website:\nhttps://paulwilhelm.de/magneticalc/\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shredEngineer/MagnetiCalc",
    "keywords": "",
    "license": "ISC License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MagnetiCalc",
    "package_url": "https://pypi.org/project/MagnetiCalc/",
    "platform": "any",
    "project_url": "https://pypi.org/project/MagnetiCalc/",
    "project_urls": {
      "Homepage": "https://github.com/shredEngineer/MagnetiCalc"
    },
    "release_url": "https://pypi.org/project/MagnetiCalc/1.7.0/",
    "requires_dist": [
      "PyQt5",
      "qtawesome (>=1.0.0)",
      "vispy (>=0.6.5)",
      "matplotlib",
      "numpy",
      "colorit (>=0.1.0)",
      "si-prefix (>=1.2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "MagnetiCalc calculates the magnetic field of arbitrary coils in vacuum, examples included. Inside a VisPy/OpenGL-accelerated PyQt5 GUI, the static magnetic flux density (B-field due to DC currents) is displayed in interactive 3D, using multiple metrics for highlighting this field's properties. Alternatively, the magnetic vector potential (A-field) may be displayed. All parameters and presets can interactively be changed inside the GUI.",
    "version": "1.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14294492,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb40681423c2f37d3a5d47a25e27cdd8b512635ac5649ea1f1b6791355fbafef",
        "md5": "0ae28956dc95a738550aebd537ef762d",
        "sha256": "7374e2f87c62ad097b628492647ec760a354845f1f0e909e7f65a91a50ebf3ad"
      },
      "downloads": -1,
      "filename": "MagnetiCalc-1.7.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0ae28956dc95a738550aebd537ef762d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 73056,
      "upload_time": "2020-11-04T02:00:28",
      "upload_time_iso_8601": "2020-11-04T02:00:28.726311Z",
      "url": "https://files.pythonhosted.org/packages/cb/40/681423c2f37d3a5d47a25e27cdd8b512635ac5649ea1f1b6791355fbafef/MagnetiCalc-1.7.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62bd11f32c3636e8da3952e55ad5059ac4e0519bb3e21bf6f8908f99caebddec",
        "md5": "d66df01ff4ae04b71050b707e7083967",
        "sha256": "9529e44ec6aab8b7bb0f5870a3a1bbbe755fdf1f2bf1456b31c3f40d78f2736b"
      },
      "downloads": -1,
      "filename": "MagnetiCalc-1.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d66df01ff4ae04b71050b707e7083967",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 44868,
      "upload_time": "2020-11-04T02:00:30",
      "upload_time_iso_8601": "2020-11-04T02:00:30.167806Z",
      "url": "https://files.pythonhosted.org/packages/62/bd/11f32c3636e8da3952e55ad5059ac4e0519bb3e21bf6f8908f99caebddec/MagnetiCalc-1.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}