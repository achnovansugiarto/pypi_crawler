{
  "info": {
    "author": "Paul Wilhelm, M. Sc.",
    "author_email": "anfrage@paulwilhelm.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering"
    ],
    "description": "MagnetiCalc\n===========\n\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/ISC)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=TN6YTPVX36YHA&source=url)\n[![API Documentation](https://img.shields.io/badge/Documentation-API-orange)](https://shredengineer.github.io/MagnetiCalc/)\n[![PyPI version](https://img.shields.io/pypi/v/MagnetiCalc?label=PyPI)](https://pypi.org/project/MagnetiCalc/)\n\n**What does MagnetiCalc do?**\n\nMagnetiCalc calculates the static magnetic flux density, vector potential, energy, self-inductance\nand magnetic dipole moment of arbitrary coils. Inside a [VisPy](https://github.com/vispy/vispy) / OpenGL-accelerated\nPyQt5 GUI, the magnetic flux density\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-field,\nin units of <i>Tesla</i>)\nor the magnetic vector potential\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">-field,\nin units of <i>Tesla-meter</i>)\nis displayed in interactive 3D, using multiple metrics for highlighting the field properties.\n\n<i>Experimental feature:</i> To calculate the energy and self-inductance of permeable (i.e. ferrous) materials,\ndifferent core media can be modeled as regions of variable relative permeability;\nhowever, core saturation is currently not modeled, resulting in excessive flux density values.\n \n**Who needs MagnetiCalc?**\n\nMagnetiCalc does its job for hobbyists, students, engineers and researchers of magnetic phenomena.\nI designed MagnetiCalc from scratch, because I didn't want to mess around\nwith expensive and/or overly complex simulation software\nwhenever I needed to solve a magnetostatic problem.\n\n**How does it work?**\n\nThe <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-field calculation\nis implemented using the Biot-Savart law [1], employing multiprocessing techniques;\nMagnetiCalc uses just-in-time compilation ([JIT](https://numba.pydata.org/))\nand, if available, GPU-acceleration ([CUDA](https://numba.pydata.org/numba-doc/dev/cuda/overview.html))\nto achieve high-performance calculations.\nAdditionally, the use of easily constrainable \"sampling volumes\" allows for selective calculation over\ngrids of arbitrary shape and arbitrary relative permeabilities\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mu_r(\\mathbf{x})\" alt=\"Âµ_r(x)\"> (<i>experimental</i>).\n\nThe shape of any wire is modeled as a 3D piecewise linear curve.\nArbitrary loops of wire are sliced into differential current elements\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{\\ell}\" alt=\"l\">),\neach of which contributes to the total resulting field\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">,\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">)\nat some fixed 3D grid point (<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{x}\" alt=\"x\">),\nsumming over the positions of all current elements\n(<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{x^'}\" alt=\"x'\">):\n\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}(\\mathbf{x})=I \\cdot \\frac{\\mu_0}{4 \\pi} \\cdot \\displaystyle \\sum_\\mathbf{x^'} \\mu_r(\\mathbf{x}) \\cdot \\frac{\\mathbf{\\ell}(\\mathbf{x^')}}{\\mid \\mathbf{x} - \\mathbf{x^'} \\mid}\"><br>\n\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}(\\mathbf{x})=I \\cdot \\frac{\\mu_0}{4 \\pi} \\cdot \\displaystyle \\sum_\\mathbf{x^'} \\mu_r(\\mathbf{x}) \\cdot \\frac{\\mathbf{\\ell}(\\mathbf{x^'}) \\times (\\mathbf{x} - \\mathbf{x^'})}{\\mid \\mathbf{x} - \\mathbf{x^'} \\mid}\"><br>\n\nAt each grid point, the field magnitude (or field angle in some plane) is displayed using colored arrows and/or dots;\nfield color and alpha transparency are individually mapped using one of the various\n[available metrics](#appendix-metrics).\n\nThe coil's energy <img src=\"https://render.githubusercontent.com/render/math?math=E\" alt=\"E\"> [2]\nand self-inductance <img src=\"https://render.githubusercontent.com/render/math?math=L\" alt=\"L\"> [3]\nare calculated by summing the squared\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-field\nover the entire sampling volume;\nensure that the sampling volume encloses a large, non-singular portion of the field:\n\n<img src=\"https://render.githubusercontent.com/render/math?math=E=\\frac{1}{\\mu_0} \\cdot \\displaystyle \\sum_\\mathbf{x} \\frac{\\mathbf{B}(\\mathbf{x}) \\cdot \\mathbf{B}(\\mathbf{x})}{\\mu_r(\\mathbf{x})}\"><br>\n\n<img src=\"https://render.githubusercontent.com/render/math?math=L=\\frac{1}{\\I^2} \\cdot E\"><br>\n\nAdditionally, the scalar magnetic dipole moment\n<img src=\"https://render.githubusercontent.com/render/math?math=m\" alt=\"m\"> [4]\nis calculated by summing over all current elements:\n\n<img src=\"https://render.githubusercontent.com/render/math?math=m=\\Bigl| I \\cdot \\frac{1}{2} \\cdot \\displaystyle \\sum_\\mathbf{x^'} \\mathbf{x^'} \\times \\mathbf{\\ell}(\\mathbf{x^'}) \\Bigr|\"><br>\n\n***References***\n\n[1]: Jackson, Klassische Elektrodynamik, 5. Auflage, S. 204, (5.4).<br>\n[2]: Kraus, Electromagnetics, 4th Edition, p. 269, 6-9-1.<br>\n[3]: Jackson, Klassische Elektrodynamik, 5. Auflage, S. 252, (5.157).<br>\n[4]: Jackson, Klassische Elektrodynamik, 5. Auflage, S. 216, (5.54).\n\n\nScreenshot\n----------\n\n![Screenshot](https://raw.githubusercontent.com/shredEngineer/MagnetiCalc/master/docs/Screenshot.png)\n\n(Screenshot taken from the latest GitHub release.)\n\nInstallation\n------------\n\nIf you have trouble installing MagnetiCalc,\nmake sure to file an [issue](https://github.com/shredEngineer/MagnetiCalc/issues)\nso I can help you get it up and running!\n\nRequirements:\n* Python 3.6+\n\nTested with:\n* Python 3.8 in Ubuntu 20.04\n* Python 3.7 in Linux Mint 19.3\n* Python 3.8.10 in Windows 10 (21H2)\n\n### Prerequisites\nOn some systems, it may be necessary to upgrade pip first:\n `python3 -m pip install pip --upgrade`\n\n*Note:* Windows users need to type `python` instead of `python3`\n\n#### Linux\nThe following dependencies must be installed first (Ubuntu 20.04):\n```shell\nsudo apt install python3-dev\nsudo apt install libxcb-xinerama0 --reinstall\n```\n\n#### Windows\nIt is recommended to install [Python 3.8.10](https://www.python.org/downloads/release/python-3810/). \nInstallation will currently fail for Python 3.9+ due to missing dependencies.\n\nOn some systems, it may be necessary to install the latest [Microsoft Visual C++ Redistributable](https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170) first.\n\n### Option A: Automatic install via pip\nThis will install or upgrade MagnetiCalc (and its dependencies) to the user site-packages directory and start it from there.\n\n#### Linux\n```shell\npython3 -m pip install magneticalc --upgrade\npython3 -m magneticalc\n```\n\n#### Windows\n```shell\npython -m pip install --upgrade magneticalc\npython -m magneticalc\n```\n\n#### Juptyer Notebook & Jupyter Lab\nFrom within a [Jupyter](https://jupyter.org/) Notebook,\nMagnetiCalc can be installed (upgraded) and run like this:\n```python\nimport sys\n!{sys.executable} -m pip install magneticalc --upgrade\n!{sys.executable} -m magneticalc\n```\n\n### Option B: Manual download\n*Note:* Windows users need to type `python` instead of `python3`.\n\nInstall (upgrade) all dependencies to the user site-packages directory:\n```shell\npython3 -m pip install numpy numba scipy PyQt5 vispy qtawesome sty si-prefix h5py --upgrade\n```\n\nUse [Git](https://git-scm.com/) to clone the latest version of MagnetiCalc from GitHub: \n```shell\ngit clone https://github.com/shredEngineer/MagnetiCalc\n```\n\nEnter the cloned directory and start MagnetiCalc:\n```shell\ncd MagnetiCalc\npython3 -m magneticalc\n```\n\n### Enabling CUDA Support\nTested in Ubuntu 20.04, using the NVIDIA CUDA 10.1 driver and NVIDIA GeForce GTX 1650 GPU.\n\nPlease refer to the\n[Numba Installation Guide](https://numba.pydata.org/numba-doc/latest/user/installing.html)\nwhich includes the steps necessary to get CUDA up and running.\n\n## Data Import/Export and Python API\n\n### GUI\nMagnetiCalc allows the following data to be imported/exported using the GUI:\n* Import/export wire points from/to TXT file.\n* Export <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">-/\n  <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-fields,\nwire points and wire current to an [HDF5](https://www.h5py.org/) container for use in post-processing.\n\n### API\nDocumentation: [API](https://shredengineer.github.io/MagnetiCalc/magneticalc.API.API.html),\n[MagnetiCalc_Data](https://shredengineer.github.io/MagnetiCalc/magneticalc.MagnetiCalc_Data.MagnetiCalc_Data.html)\n\nThe [`API`](magneticalc/API.py) class\nprovides basic functions for importing/exporting data programmatically:\n\n* Generate a wire shape using [NumPy](https://numpy.org/) and export it to a TXT file: \n  ```python\n  from magneticalc import API\n  import numpy as np\n  \n  wire = [\n      (np.cos(a), np.sin(a), np.sin(16 * a))\n      for a in np.linspace(0, 2 * np.pi, 200)\n  ]\n  \n  API.export_wire(\"MyWire.txt\", wire)\n  ```\n\n* Import an HDF5 file containing an\n  <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">-field\n  (which needs to be generated using the GUI first)\n  and plot it using [Matplotlib](https://matplotlib.org/stable/users/index.html).\n  ```python\n  from magneticalc import API\n  import matplotlib.pyplot as plt\n\n  data = API.import_hdf5(\"MagnetiCalc_Export_A.hdf5\")\n  axes = data.get_axes()\n  a_field = data.get_a_field()\n\n  ax = plt.figure(figsize=(10, 10), dpi=150).add_subplot(projection=\"3d\")\n  ax.quiver(*axes, *a_field, length=5e5, normalize=False, linewidth=2)\n  plt.show()\n  ```\n\n  The data is wrapped in a [`MagnetiCalc_Data`](magneticalc/MagnetiCalc_Data.py) object\n  which provides convenience functions for accessing, transforming and reshaping the data:\n  * `.get_dimension()` returns the sampling volume dimension as a 3-tuple.\n  * `.get_axes(reduce=True)` returns the axis ticks of the sampling volume.\n  * `.get_axes_list()` returns a list of all 3D points of the sampling volume.\n  * `.get_a_field_list()` returns a list of all 3D vectors of the\n    <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">-Field.\n  * `.get_a_field(as_3d=True)` returns a 3D field for each component of the\n    <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">-Field,\n    indexed over the reduced axes.\n\nLicense\n-------\nCopyright Â© 2020â2021, Paul Wilhelm, M. Sc. <[anfrage@paulwilhelm.de](mailto:anfrage@paulwilhelm.de)>\n\n<b>ISC License</b>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nContribute\n----------\nYou are invited to contribute to MagnetiCalc in any way you like! :)\n\nIf this software has been helpful to you in some way or another, please let me and others know!\n\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=TN6YTPVX36YHA&source=url)\n\nToDo\n----\n\n**General**\n* Ensure consistent PyQt5 look and feel in Windows and Linux. (Dynamically adjust dialogs.)\n* Move from `INI` format to [HDF5](https://www.h5py.org/) format for storing project data; make auto-generated `MagnetiCalc.ini` a global settings file instead. (Retain option to import old `MagnetiCalc.ini` files.)\n* Add a global settings dialog for some selection of options currently hard-coded in various classes.\n\n**Functional**\n* Add an overlay for vector metrics, like gradient or curvature (derived from the fundamental <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{A}\" alt=\"A\">- and <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{B}\" alt=\"B\">-fields).\n* Add a list of objects, for wires and permeability classes (constraints), with a transformation pipeline for each object; move the `Wire` widget to a dedicated dialog window instead.\n  (Add support for multiple wires, study mutual induction.)\n* Highlight permeability classes with <img src=\"https://render.githubusercontent.com/render/math?math=\\mu_r \\neq 0\"> in the 3D view.\n* Add support for multiple current values and animate the resulting fields.\n* Add support for modeling of core material saturation and hysteresis effects ([LandauâLifshitzâGilbert equation](https://en.wikipedia.org/wiki/Landau%E2%80%93Lifshitz%E2%80%93Gilbert_equation)).\n* Provide a means to emulate permanent magnets.\n\n**Usability**\n* Add more example projects to `examples/`.\n* Move variations of each wire preset (e.g. the number of turns) into an individual sub-menu; alternatively, provide a dialog for parametric generation.\n* Add stationary coordinate system and ruler in the bottom left corner.\n* Add support for selective display over a portion of the metric range, enabling a kind of iso-contour display.\n\n**Known Bugs**\n* Fix issue where the points of a sampling volume with *fractional* resolution are not always spaced equidistantly for some sampling volume dimensions.\n* Fix calculation of divergence right at the sampling volume boundary.\n* Fix delayed GUI start-up when loading \"complex\" files.\n* Fix missing scaling of VisPy markers when zooming.\n* Fix unnecessary shading of VisPy markers.\n\n**Code Quality**\n* Add debug output where it is missing.\n* Add type hints where they are missing.\n* Use my `QtWidgets2` wrapper everywhere.\n* Use the [`@property` decorator](https://stackoverflow.com/a/36943813/2035671) for accessing data where applicable. \n* Merge sparse `*_Types.py` modules with higher-level classes if possible.\n\n**Design**\n* Replace plain `QMessageBox` dialogs with nice-looking custom dialogs where possible. \n\nVideo\n-----\nA very short demo of MagnetiCalc in action:\n\n[![Magnetic Field Calculation with Python (MagnetiCalc)](https://raw.githubusercontent.com/shredEngineer/MagnetiCalc/master/docs/Video-Thumb.png)](https://www.youtube.com/watch?v=d3QKdYfOuvQ)\n\nLinks\n-----\nIf you want to comment on the project or see additional info, please visit my personal website:\nhttps://paulwilhelm.de/magneticalc/\n\n*Appendix:* Metrics\n-------------------\n\n| Metric               | Symbol                                                                                                     | Description                           |\n|----------------------|------------------------------------------------------------------------------------------------------------|---------------------------------------|\n| ``Magnitude``        | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}\\mid\">                          | Magnitude in space                    |\n| ``Magnitude X``      | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{X}\\mid\">                      | Magnitude in X-direction              |\n| ``Magnitude Y``      | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{Y}\\mid\">                      | Magnitude in Y-direction              |\n| ``Magnitude Z``      | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{Z}\\mid\">                      | Magnitude in Z-direction              |\n| ``Magnitude XY``     | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{XY}\\mid\">                     | Magnitude in XY-plane                 |\n| ``Magnitude XZ``     | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{XZ}\\mid\">                     | Magnitude in XZ-plane                 |\n| ``Magnitude YZ``     | <img src=\"https://render.githubusercontent.com/render/math?math=\\mid\\vec{B}_{YZ}\\mid\">                     | Magnitude in YZ-plane                 |\n| ``Divergence``       | <img src=\"https://render.githubusercontent.com/render/math?math=\\nabla\\cdot\\vec{B}\">                       | Divergence                            |\n| ``Divergence +``     | <img src=\"https://render.githubusercontent.com/render/math?math=%2b\\{\\nabla\\cdot\\vec{B}\\}_{>0}\">           | Positive Divergence                   |\n| ``Divergence â``     | <img src=\"https://render.githubusercontent.com/render/math?math=-\\{\\nabla\\cdot\\vec{B}\\}_{<0}\">             | Negative Divergence                   |\n| ``Log Magnitude``    | <img src=\"https://render.githubusercontent.com/render/math?math=\\log_{10} \\mid\\vec{B}\\mid\">                     | Logarithmic Magnitude in space        |\n| ``Log Magnitude X``  | <img src=\"https://render.githubusercontent.com/render/math?math=\\log_{10} \\mid\\vec{B_X}\\mid\">                   | Logarithmic Magnitude in X-direction  |\n| ``Log Magnitude Y``  | <img src=\"https://render.githubusercontent.com/render/math?math=\\log_{10} \\mid\\vec{B_Y}\\mid\">                   | Logarithmic Magnitude in Y-direction  |\n| ``Log Magnitude Z``  | <img src=\"https://render.githubusercontent.com/render/math?math=\\log_{10} \\mid\\vec{B_Z}\\mid\">                   | Logarithmic Magnitude in Z-direction  |\n| ``Log Magnitude XY`` | <img src=\"https://render.githubusercontent.com/render/math?math=\\log_{10} \\mid\\vec{B}_{XY}\\mid\">                | Logarithmic Magnitude in XY-plane     |\n| ``Log Magnitude XZ`` | <img src=\"https://render.githubusercontent.com/render/math?math=\\log_{10} \\mid\\vec{B}_{XZ}\\mid\">                | Logarithmic Magnitude in XZ-plane     |\n| ``Log Magnitude YZ`` | <img src=\"https://render.githubusercontent.com/render/math?math=\\log_{10} \\mid\\vec{B}_{YZ}\\mid\">                | Logarithmic Magnitude in YZ-plane     |\n| ``Log Divergence``   | <img src=\"https://render.githubusercontent.com/render/math?math=\\log_{10} \\ \\ \\nabla\\cdot\\vec{B}\">              | Logarithmic Divergence                |\n| ``Log Divergence +`` | <img src=\"https://render.githubusercontent.com/render/math?math=\\log_{10} \\ %2b\\{\\nabla\\cdot\\vec{B}\\}_{>0}\">    | Positive Logarithmic Divergence       |\n| ``Log Divergence â`` | <img src=\"https://render.githubusercontent.com/render/math?math=\\log_{10} \\ -\\{\\nabla\\cdot\\vec{B}\\}_{<0}\"> | Negative Logarithmic Divergence       |\n| ``Angle XY``         | <img src=\"https://render.githubusercontent.com/render/math?math=\\measuredangle\\vec{B}_{XY}\">               | Field angle in XY-plane               |\n| ``Angle XZ``         | <img src=\"https://render.githubusercontent.com/render/math?math=\\measuredangle\\vec{B}_{XZ}\">               | Field angle in XZ-plane               |\n| ``Angle YZ``         | <img src=\"https://render.githubusercontent.com/render/math?math=\\measuredangle\\vec{B}_{YZ}\">               | Field angle in YZ-plane               |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shredEngineer/MagnetiCalc",
    "keywords": "",
    "license": "ISC License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MagnetiCalc",
    "package_url": "https://pypi.org/project/MagnetiCalc/",
    "platform": "any",
    "project_url": "https://pypi.org/project/MagnetiCalc/",
    "project_urls": {
      "Homepage": "https://github.com/shredEngineer/MagnetiCalc"
    },
    "release_url": "https://pypi.org/project/MagnetiCalc/1.12.0/",
    "requires_dist": [
      "numpy",
      "numba (>=0.50.0)",
      "scipy",
      "PyQt5",
      "vispy (>=0.6.5)",
      "qtawesome (>=1.0.0)",
      "sty",
      "si-prefix (>=1.2.2)",
      "h5py"
    ],
    "requires_python": ">=3.6",
    "summary": "MagnetiCalc calculates the magnetic flux density, vector potential, energy, self-inductance and magnetic dipole moment of arbitrary coils. Inside a VisPy / OpenGL-accelerated PyQt5 GUI, the static magnetic flux density (B-field) or the magnetic vector potential (A-field) is displayed in interactive 3D, using multiple metrics for highlighting this field's properties.",
    "version": "1.12.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14294492,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "234c82747eaaf220fededee7259f7c57944de9a2696d237dbcd18624f121153f",
        "md5": "1fd9cfdd18af04c25a501b98d5aafa35",
        "sha256": "758d4bf8820ee1e0c931c252434fdca260a77294e3102cf80ac19464002650ff"
      },
      "downloads": -1,
      "filename": "MagnetiCalc-1.12.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1fd9cfdd18af04c25a501b98d5aafa35",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 128911,
      "upload_time": "2022-01-02T08:16:52",
      "upload_time_iso_8601": "2022-01-02T08:16:52.163647Z",
      "url": "https://files.pythonhosted.org/packages/23/4c/82747eaaf220fededee7259f7c57944de9a2696d237dbcd18624f121153f/MagnetiCalc-1.12.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e268bbb6224ffbcde1281f8650655326df501391a563586e07979bc84f7cd8f4",
        "md5": "9b72fec3611adbcfea1e676635ff03e9",
        "sha256": "c3d50e101166ef656a87b45897f620bf27251cb0ac16e0ccb2be67cd9c7f3cd4"
      },
      "downloads": -1,
      "filename": "MagnetiCalc-1.12.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9b72fec3611adbcfea1e676635ff03e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 78152,
      "upload_time": "2022-01-02T08:16:54",
      "upload_time_iso_8601": "2022-01-02T08:16:54.015973Z",
      "url": "https://files.pythonhosted.org/packages/e2/68/bbb6224ffbcde1281f8650655326df501391a563586e07979bc84f7cd8f4/MagnetiCalc-1.12.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}