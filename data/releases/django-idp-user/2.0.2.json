{
  "info": {
    "author": "Mahmoud Al-Rawy, Euron Metaliaj, Klajdi Çaushi, Aleksandër Nasto, Andi Çuku, Klement Omeri",
    "author_email": "hello@cardoai.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "===============\nDjango IDP User\n===============\n\nQuick start\n-----------\n\n1. Add \"idp_user\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'idp_user',\n    ]\n\n2. Add the settings of the app in settings.py like this::\n\n    APP_ENV = \"development\"/\"staging\"/\"production\"\n\n    AUTH_USER_MODEL = 'idp_user.User'\n\n    IDP_USER_APP = {\n        \"APP_IDENTIFIER\": \"str\",\n        \"ROLES\": \"path.to.roles_choices\",\n        \"FAUST_APP_PATH\": \"backend.kafka_consumer.app\",\n        \"USE_REDIS_CACHE\": True,\n        \"IDP_URL\": \"idp_url\",  # Optional\n        \"APP_ENTITIES\": {\n            \"<entity_type>\": {\n                \"model\": \"<path.to.entity_type.model>\",\n                \"identifier_attr\": \"<field_name>\",\n                \"label_attr\": \"<field_name>\",\n            }\n        },\n        \"CONSUMER_APP_ENV\": (Optional) \"development\"/\"staging\"/\"production\",\n    }\n\n    REST_FRAMEWORK = {\n        'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema' / 'idp_user.schema_extensions.AutoSchemaWithRole',\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n            'idp_user.auth.AuthenticationBackend',\n        ),\n    }\n\n    SPECTACULAR_SETTINGS = {\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n            'idp_user.schema_extensions.BearerTokenScheme',\n        ),\n        'SERVE_AUTHENTICATION': ()\n    }\n\n    # Kafka Related\n    KAFKA_ARN = \"<aws_kafka_arn>\"  # Encoded in base64\n    KAFKA_AWS_ACCESS_KEY_ID = \"<access_key_id>\"\n    KAFKA_AWS_SECRET_ACCESS_KEY = \"<secret_access_key_id>\"  # Encoded in base64\n    AWS_S3_REGION_NAME = \"<region_name>\"\n\n3. Run ``python manage.py migrate`` to create the models.\n\nSettings Reference\n------------------\n\n* ``APP_IDENTIFIER``\n\n  * The app identifier, as defined in the IDP.\n\n* ``ROLES``\n\n  * The path to the roles choices.\n\n* ``FAUST_APP_PATH``\n\n  * The path to the Faust app.\n\n* ``IDP_URL``\n\n  * The URL of the IDP, used for local development, or when using the IDP as an Authentication Backend.\n\n* ``USE_REDIS_CACHE``\n\n  * If True, the cache will be used\n  * When developing locally, you can leave this as ``False``.\n\n* ``APP_ENTITIES``\n\n  * This dict links the AppEntityTypes declared on the IDP for this app to their actual models,\n    so that they can be used for authorization purposes. In the value dicts, the attributes that will be\n    used as the identifier and label are declared as well.\n\n* ``CONSUMER_APP_ENV``\n\n  * The environment of the Faust Kafka Consumer app.\n  * If not set, the value of ``APP_ENV`` will be used.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CardoAI/django-idp-user",
    "keywords": "",
    "license": "MIT (X11)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-idp-user",
    "package_url": "https://pypi.org/project/django-idp-user/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-idp-user/",
    "project_urls": {
      "Homepage": "https://github.com/CardoAI/django-idp-user"
    },
    "release_url": "https://pypi.org/project/django-idp-user/2.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "A Django app that handles the communication between the IDP and the products for the authorization of users.",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16373395,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df0119a2d9c72a1e9506166f30e09dcbb71930e9bbc21eb77e833b8441faea22",
        "md5": "aabb907bca369e18270e6d6a67edcb35",
        "sha256": "1a3ff6f5c7a0a5f17499129de681f74bb080ff16688311331d35e896952338d7"
      },
      "downloads": -1,
      "filename": "django_idp_user-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "aabb907bca369e18270e6d6a67edcb35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 16086,
      "upload_time": "2023-01-04T10:18:29",
      "upload_time_iso_8601": "2023-01-04T10:18:29.047943Z",
      "url": "https://files.pythonhosted.org/packages/df/01/19a2d9c72a1e9506166f30e09dcbb71930e9bbc21eb77e833b8441faea22/django_idp_user-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}