{
  "info": {
    "author": "Tommy Dougiamas",
    "author_email": "tom@digitalnook.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Maze Solver\n### Created by Tommy Dougiamas  \n\nThis algorithm finds the shortest path through black and white maze images. It outputs an image with the path marked in green.\n\n\n## Installing\n\n### **Easy Installation**\n\nCheck that your python version is >=3.5 with `python3 -V`. (You might have to use `python3.5` or similar).\nAlso make sure that pip is installed with `python3 -m pip -V`.\n\nTo install, simply run `python3 -m pip install mazesolver` on the command line as root/admin. \n\nYou can run the tool using `mazesolver`.\n\n### **Install from source**\n\n**For GNU/Linux:**\n\n`git clone https://github.com/exciteabletom/mazesolver.git`\n\n`cd mazesolver`\n\n`./setup.py build`\n\n`sudo ./setup.py install`\n\n**For Windows CMD:**\n\nMake sure your prompt has admin permissions.\n\n`git clone https://github.com/exciteabletom/mazesolver.git`\n\n`chdir mazesolver`\n\n`python3 setup.py build`\n\n`python3 setup.py install`\n\n\n\n## What are the rules for maze images?\n- Walls marked with black pixels and paths marked with white pixels\n\n- Walls around the entire maze\n\n- One entrance on the top row and one exit on the bottom row\n\n*If this is confusing, check out some of the example mazes in the **pics** directory.*\n\n\n\n## How do I use it?\n\nYou can use `mazesolver --help` to get a list of commands.\n\nMake sure that your image meets the specifications above.\n\nNormal usage will look something like this: `mazesolver -i path/to/input_img -o path/to/output_dir/`\n\n\n\n## How does the algorithm work?\n\n- Start at the entrance and label it zero.\n\n- Move to any neighbouring cells and mark them with 1\n\n- Move to any of the cells neighbouring the ones marked 1 and label them 2\n\n- Continue doing this until all cells are marked\n\n- Start from the exit of the maze and move to any neighbouring cell that == the current cell's number -1. Until we reach 0 (the entrance).\n\nWe now have the shortest path from the entrance to the exit!\n\n\n> Licensed under GNU GPLv3\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/exciteabletom/mazesolver",
    "keywords": "maze algortihm image solve",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mazesolver",
    "package_url": "https://pypi.org/project/mazesolver/",
    "platform": "",
    "project_url": "https://pypi.org/project/mazesolver/",
    "project_urls": {
      "Homepage": "https://github.com/exciteabletom/mazesolver"
    },
    "release_url": "https://pypi.org/project/mazesolver/1.2.3/",
    "requires_dist": [
      "Pillow (>=6.0)"
    ],
    "requires_python": ">=3.5",
    "summary": "A shortest-path maze solving algorithm for image-based mazes.",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7763143,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94ed4554a535a7b46f0505c7af1b5781343fe86259bc44f5233395c171157fd2",
        "md5": "5200d859476d24b0b28fcaed60494c3d",
        "sha256": "91f34315cd604e59628b79db5270625f248856e5bfb7da7da0bb6c00e79a522e"
      },
      "downloads": -1,
      "filename": "mazesolver-1.2.3.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "5200d859476d24b0b28fcaed60494c3d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 9471,
      "upload_time": "2020-03-20T05:09:02",
      "upload_time_iso_8601": "2020-03-20T05:09:02.311045Z",
      "url": "https://files.pythonhosted.org/packages/94/ed/4554a535a7b46f0505c7af1b5781343fe86259bc44f5233395c171157fd2/mazesolver-1.2.3.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "afc0ce8a06b0d0034d4921cb017296d529ca0ec31f6b2c1a4069e4d8c1777a1a",
        "md5": "9583117b018d7839edd970ba8deea08e",
        "sha256": "a8532884903489abf4ab8987317c23240b2c53b725d9810be437a398f99de749"
      },
      "downloads": -1,
      "filename": "mazesolver-1.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9583117b018d7839edd970ba8deea08e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 20030,
      "upload_time": "2020-03-20T05:09:01",
      "upload_time_iso_8601": "2020-03-20T05:09:01.101357Z",
      "url": "https://files.pythonhosted.org/packages/af/c0/ce8a06b0d0034d4921cb017296d529ca0ec31f6b2c1a4069e4d8c1777a1a/mazesolver-1.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}