{
  "info": {
    "author": "Ariel Jonathan Roffé",
    "author_email": "arielroffe@filo.uba.ar",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "======\nLogics\n======\n\nLogics is a Python framework for mathematical logic. It aims at generality (being able to represent as many systems\nas possible), well-documented and readable code and minimal dependencies, rather than speed. Some of its intended\napplications are educational software (e.g. `TAUT <https://taut-logic.com/>`_, which uses a previous version of this\npackage), and quick prototyping of ideas for research purposes.\n\nTo see the documentation, visit `this link <https://logics.readthedocs.io/en/latest/?>`_.\n\n\nInstallation\n############\n\nTo install using ``pip``:\n\n.. code:: bash\n\n   $ pip install logics\n\nOr clone it from this repository:\n\n.. code:: bash\n\n   $ git clone https://github.com/ariroffe/logics.git\n\n\nExamples\n########\n\nThe following are some random examples of what you can do with this package. For a full specification of the\nfunctionality see the documentation.\n\nDefine a language:\n\n>>> from logics.classes.propositional import Language\n>>> language = Language(atomics=['p', 'q', 'r'],\n...                     constant_arity_dict={'~': 1, '∧': 2},\n...                     sentential_constants=['⊥', '⊤'],\n...                     metavariables=['A', 'B', 'C'],\n...                     context_variables=['Γ', 'Δ', 'Σ', 'Λ', 'Π', 'Θ'])\n\n\nConstruct formulae and inferences/metainferences, and use specific methods of those classes:\n\n>>> from logics.utils.parsers import classical_parser\n>>> formula = classical_parser.parse('~(p and not q)')\n>>> inference = classical_parser.parse('(p / p) // (q / p & not p)')\n>>> type(formula)\n<class 'logics.classes.propositional.formula.Formula'>\n>>> type(inference)\n<class 'logics.classes.propositional.inference.Inference'>\n>>> formula.depth\n3\n>>> formula.is_well_formed(language)\nTrue\n>>> formula.is_instance_of(classical_parser.parse('not (A and B)'), language)\nTrue\n>>> formula2 = formula.substitute(classical_parser.parse(\"p\"), classical_parser.parse(\"p or q\"))\n>>> classical_parser.unparse(formula2)\n'~((p ∨ q) ∧ ~q)'\n>>> inference.level\n2\n\nDefine a mixed many-valued model theory, and use it:\n\n>>> from logics.instances.propositional.languages import classical_infinite_language_with_sent_constants\n>>> from logics.classes.propositional.semantics import MixedManyValuedSemantics\n>>> trivalued_truth_values = ['1', 'i', '0']\n>>> trivalued_truth_functions = {\n...     '~': ['0', 'i', '1'],\n...     '∧': [ #1   #i   #0\n...           ['1', 'i', '0'],    # 1\n...           ['i', 'i', '0'],    # i\n...           ['0', '0', '0']],   # 0\n...     '∨': [ #1   #i   #0\n...           ['1', '1', '1'],    # 1\n...           ['1', 'i', 'i'],    # i\n...           ['1', 'i', '0']],   # 0\n...     '→': [ #1   #i   #0\n...           ['1', 'i', '0'],    # 1\n...           ['1', 'i', 'i'],    # i\n...           ['1', '1', '1']],   # 0\n...     '↔': [ #1   #i   #0\n...           ['1', 'i', '0'],    # 1\n...           ['i', 'i', 'i'],    # i\n...           ['0', 'i', '1']],   # 0\n...     }\n>>> ST = MixedManyValuedSemantics(language=classical_infinite_language_with_sent_constants,\n...                               truth_values=trivalued_truth_values,\n...                               premise_designated_values=['1'],\n...                               conclusion_designated_values=['1', 'i'],\n...                               truth_function_dict=trivalued_truth_functions,\n...                               sentential_constant_values_dict={'⊥': '0', '⊤': '1'},\n...                               name='ST')\n>>> ST.valuation(classical_parser.parse('p then q'), {'p': '1', 'q': 'i'})\n'i'\n>>> ST.satisfies(classical_parser.parse('(A / B), (B / C) // (A / C)'), {'A': '1', 'B': 'i', 'C': '0'})\nFalse\n>>> ST.is_valid(classical_parser.parse('p and ~p / q'))\nTrue\n>>> ST.is_locally_valid(classical_parser.parse('(A / B), (B / C) // (A / C)'))\nFalse\n>>> ST.is_globally_valid(classical_parser.parse('(A / B), (B / C) // (A / C)'))\nTrue\n>>> # There are also some predefined systems (ST is one of them, the above was unnecesary)\n>>> from logics.instances.propositional.many_valued_semantics import TS_mvl_semantics as TS\n>>> from logics.instances.propositional.many_valued_semantics import LP_mvl_semantics as LP\n>>> LP.is_valid(classical_parser.parse('p and ~p / q'))\nFalse\n>>> from logics.classes.propositional.semantics import MixedMetainferentialSemantics\n>>> TSST = MixedMetainferentialSemantics([TS, ST])\n>>> TSST.is_locally_valid(classical_parser.parse('(A / B), (B / C) // (A / C)'))\nTrue\n\nAs in `TAUT <https://taut-logic.com/>`_, logics has natural deduction module:\n\n>>> # You can define your own natural deduction system, here we will just import a predefined instance:\n>>> from logics.instances.propositional.natural_deduction import classical_natural_deduction_system\n>>> from logics.utils.solvers import classical_natural_deduction_solver\n>>> derivation = classical_natural_deduction_solver.solve(classical_parser.parse(\"A → B, ~B / ~A\"))\n>>> derivation.print_derivation(classical_parser)\n0. A → B; premise; []\n1. ~B; premise; []\n|  2. A; supposition; []\n|  3. B; E→; [0, 2]\n|  4. ⊥; E~; [1, 3]\n5. ~A; I~; [2, 4]\n>>> classical_natural_deduction_system.is_correct_derivation(derivation)\nTrue\n\nI have now added tableaux systems:\n\n>>> from logics.classes.propositional.proof_theories import TableauxNode\n>>> # Again, you can define your own tableaux system, here I use a predefined instance\n>>> from logics.instances.propositional.tableaux import classical_tableaux_system\n>>> n1 = TableauxNode(content=classical_parser.parse('~~~~p'))\n>>> n2 = TableauxNode(content=classical_parser.parse('~p'), parent=n1)\n>>> n3 = TableauxNode(content=classical_parser.parse('~~p'), justification='R~~', parent=n2)\n>>> n1.print_tree(classical_parser)\n(~~~p)\n└── ~p\n    └── ~~p (R~~)\n>>> classical_tableaux_system.node_is_closed(n2)\nFalse\n>>> classical_tableaux_system.tree_is_closed(n1)\nTrue\n>>> classical_tableaux_system.rule_is_applicable(n1, 'R~~')\nTrue\n>>> classical_tableaux_system.is_correct_tree(n1)\nTrue\n>>> # The tableaux solver (unlike ND one) will work for any arbitrary system you define\n>>> tree = classical_tableaux_system.solve_tree(classical_parser.parse(\"~(p ∧ q) / ~p ∨ ~q\"))\n>>> tree.print_tree(classical_parser)\n~(p ∧ q)\n└── ~(~p ∨ ~q)\n    ├── ~p (R~∧)\n    │   └── ~~p (R~∨)\n    │       └── ~~q (R~∨)\n    └── ~q (R~∧)\n        └── ~~p (R~∨)\n            └── ~~q (R~∨)\n>>> # There is even a tableaux class for indexed tableaux, here is a predefined instance\n>>> from logics.instances.propositional.tableaux import LP_tableaux_system\n>>> tree2 = LP_tableaux_system.solve_tree(classical_parser.parse(\"~(p ∨ q) / ~~p ∧ ~~q\"))\n>>> tree2.print_tree(classical_parser)\n~(p ∨ q), 1\n└── ~~p ∧ ~~q, 0\n    └── ~p ∧ ~q, 1 (R~∨1)\n        ├── ~~p, 0 (R∧0)\n        │   └── ~p, 1 (R∧1)\n        │       └── ~q, 1 (R∧1)\n        │           └── p, 0 (R~~0)\n        └── ~~q, 0 (R∧0)\n            └── ~p, 1 (R∧1)\n                └── ~q, 1 (R∧1)\n                    └── q, 0 (R~~0)\n\nAnd sequent calculi:\n\n>>> sequent = classical_parser.parse(\"Gamma, A ==> B, Delta\")\n>>> classical_parser.unparse(sequent)\n'Γ, A ⇒ B, Δ'\n>>> sequent2 = sequent.substitute(language, \"Γ\", classical_parser.parse(\"D\"))\n>>> classical_parser.unparse(sequent2)\n'D, A ⇒ B, Δ'\n>>> # Again, you can define your sequent calculus, here I use a predefined instance\n>>> from logics.instances.propositional.sequents import LK\n>>> LK.sequent_is_axiom(classical_parser.parse(\"p or q ==> p or q\"))\nTrue\n>>> from logics.classes.propositional.proof_theories import SequentNode\n>>> n1 = SequentNode(content=classical_parser.parse('A ==> A'), justification='identity')\n>>> n2 = SequentNode(content=classical_parser.parse('A ==> A, Delta'), justification='WR', children=[n1])\n>>> n3 = SequentNode(content=classical_parser.parse('Gamma, A ==> A, Delta'), justification='WL', children=[n2])\n>>> n3.print_tree(classical_parser)  # the root of the tree is the derived node\nΓ, A ⇒ A, Δ (WL)\n└── A ⇒ A, Δ (WR)\n    └── A ⇒ A (identity)\n>>> LK.is_correct_tree(n1)\nTrue\n>>> LK.tree_is_closed(n3)\nTrue\n>>> # There is also a solver that will work whenever your system has no elimination rules\n>>> # A system that the solver can work with easily, see the docs for a description\n>>> from logics.instances.propositional.sequents import LKminEA\n>>> tree = LKminEA.reduce(classical_parser.parse(\"Gamma ==> A or ~A\"))\n>>> tree.print_tree(classical_parser)\nΓ ⇒ A ∨ ~A (∨R1)\n└── Γ ⇒ A, ~A (~R)\n    └── Γ, A ⇒ A (WL)\n        └── A ⇒ A (identity)\n\nThere are also some predicate logic tools:\n\n>>> from logics.classes.predicate.semantics import Model\n>>> model = Model({\n...     'domain': {1, 2},\n...     'a': 1,\n...     'b': 2,\n...     'P': {1},\n...     'R': {(1,1), (1,2)},\n...     'f': {((1,), 2), ((2,), 1)},\n...     'g': {((1, 1), 1), ((1, 2), 2), ((2, 1), 1), ((2, 2), 2)}\n... })\n>>> model.denotation('f')\n{((2,), 1), ((1,), 1)}\n>>> # Again, predefined instance, you can define this yourself\n>>> from logics.instances.predicate.model_semantics import classical_functional_model_semantics\n>>> classical_functional_model_semantics.valuation(parser.parse(\"P(a)\"), model)\n'1'\n>>> classical_functional_model_semantics.valuation(parser.parse(\"R(a, b)\"), model)\n'1'\n>>> classical_functional_model_semantics.valuation(parser.parse(\"R(f(a), g(f(a), b))\"), model)\n'0'\n>>> classical_functional_model_semantics.valuation(parser.parse(\"exists x (P(f(x)))\"), model)\n'1'\n>>> classical_functional_model_semantics.valuation(parser.parse(\"forall X (exists x (X(f(x))))\"), model)\n'0'\n>>> # You can also define theories with fixed denotations for some terms by subclassing Model\n>>> from itertools import count\n>>> from logics.instances.predicate.model_subclasses import ArithmeticModel\n>>> from logics.utils.parsers.predicate_parser import arithmetic_parser\n>>> from logics.instances.predicate.model_semantics import arithmetic_model_semantics\n>>> arithmetic_model = ArithmeticModel({'domain': count(0)})\n>>> arithmetic_model_semantics.valuation(arithmetic_parser.parse(\"s(0) > 0\"), arithmetic_model)\n'1'\n>>> arithmetic_model_semantics.valuation(arithmetic_parser.parse(\"s(0) + s(0) = s(s(0))\"), arithmetic_model)\n'1'\n>>> arithmetic_model_semantics.valuation(arithmetic_parser.parse(\"exists x (x = s(0))\"), arithmetic_model)\n'1'\n\n\nAnd many more things! (see the documentation)\n\n\nAcknowledgements\n################\n\n`logics` is a project by `Ariel Jonathan Roffé <https://sites.google.com/view/ariel-roffe/home>`_ (CONICET / University\nof Buenos Aires)\n\nContributors to the project:\n\n* `Joaquin S. Toranzo Calderon <https://uba.academia.edu/JoaquinToranzoCalderon>`_ (`mapped_logics` module)\n\nThe author also wishes to thank the `Buenos Aires Logic Group <https://www.ba-logic.com/>`_ who supported this project.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ariroffe/logics",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logics",
    "package_url": "https://pypi.org/project/logics/",
    "platform": null,
    "project_url": "https://pypi.org/project/logics/",
    "project_urls": {
      "Homepage": "https://github.com/ariroffe/logics"
    },
    "release_url": "https://pypi.org/project/logics/1.3.0/",
    "requires_dist": [
      "anytree (>=2.8.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Logics is a Python framework for mathematical logic",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17336133,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83b036c82ecae3ea80ef095fd95bc8e0e3baf0e0ce9f0581c00bfd40ea51b914",
        "md5": "4fb5bed2e50dd1eb54111d8ec0318a28",
        "sha256": "c8b96b1efb7361660e36173b7827e2374731c25cdf758e3a169fb028d28509f5"
      },
      "downloads": -1,
      "filename": "logics-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4fb5bed2e50dd1eb54111d8ec0318a28",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 147718,
      "upload_time": "2023-02-22T18:27:04",
      "upload_time_iso_8601": "2023-02-22T18:27:04.286839Z",
      "url": "https://files.pythonhosted.org/packages/83/b0/36c82ecae3ea80ef095fd95bc8e0e3baf0e0ce9f0581c00bfd40ea51b914/logics-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f03e95671c6477154f1ca996ffd84666dc5c944ac2a63e38e8bf9680e6e9f2d",
        "md5": "a47e185356ce24825a162d98a8e9cf84",
        "sha256": "098d5babf5a9e9550e622b3d2518ca7b62b7ebd29e737e44218777e44ff65aa9"
      },
      "downloads": -1,
      "filename": "logics-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a47e185356ce24825a162d98a8e9cf84",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 129101,
      "upload_time": "2023-02-22T18:27:07",
      "upload_time_iso_8601": "2023-02-22T18:27:07.149862Z",
      "url": "https://files.pythonhosted.org/packages/8f/03/e95671c6477154f1ca996ffd84666dc5c944ac2a63e38e8bf9680e6e9f2d/logics-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}