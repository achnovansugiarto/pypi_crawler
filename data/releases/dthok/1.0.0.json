{
  "info": {
    "author": "Palo IT Singapore",
    "author_email": "SG-PyPi-Group@sg.palo-it.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Introduction\nD-Thok is a python package to generate mock Test data in csv, json and xml format which can be used for any Mock Service, Performance Testing etc. It required input parameter as schema file where required structure is defined with data type, number of records, required format and file name.\n\n# Index\n<table>\n<tr>\n  <th>Setup</th>\n  <td>\n      <a href=\"#Installation\">Installation</a>\n    | <a href=\"#Execution\">Execution</a>\n  </td>\n</tr>\n<tr>\n  <th>Input Data Type</th>\n  <td>\n      <a href=\"#alphabets\"><code>alphabets</code></a>\n    | <a href=\"#alphanumeric\"><code>alpha-numeric</code></a>\n    | <a href=\"#numeric\"><code>numeric</code></a>\n    | <a href=\"#code\"><code>code</code></a>\n    | <a href=\"#title\"><code>title</code></a>\n    | <a href=\"#firstName\"><code>firstName</code></a>\n    | <a href=\"#lastName\"><code>lastName</code></a>\n    | <a href=\"#date_of_birth\"><code>date_of_birth</code></a>\n    | <a href=\"#choices\"><code>choices</code></a>\n    | <a href=\"#PhoneNumber\"><code>PhoneNumber</code></a>\n    | <a href=\"#email\"><code>email</code></a>\n    | <a href=\"#streetName\"><code>streetName</code></a>\n    | <a href=\"#postcode\"><code>postcode</code></a>\n    | <a href=\"#country\"><code>country</code></a>\n    | <a href=\"#city\"><code>city</code></a>\n    | <a href=\"#date\"><code>date</code></a>\n    | <a href=\"#company\"><code>company</code></a>\n    | <a href=\"#boolean\"><code>boolean</code></a>\n    | <a href=\"#accountNumber\"><code>accountNumber</code></a>\n    | <a href=\"#constant\"><code>constant</code></a>\n\n  </td>\n</tr>\n<tr>\n  <th>Output File Format</th>\n  <td>\n      <a href=\"#csv\">csv</a> \n    | <a href=\"#json\">json</a>\n    | <a href=\"#xml\">xml</a>\n  </td>\n</tr>\n</table>\n\n## Input Datatype\nRequired input schema definition have to provided with all required Field name and required datatype in JSON format. Here is Sample input Schema definition [file](https://github.com/paloitsingapore/dthok/tree/main/Helper/SampleInputFile),\n\n```json\n[\n\t{\n\t  \"EmployeeID\" \t\t: \"code||PALO-%%-##LTD!@\",\n\t  \"Salutation\"\t   \t: \"alphabet||title\",\n\t  \"Firstname\"  \t\t: \"alphabet|20|firstName\",\n\t  \"Lastname\"   \t\t: \"alphabet|20|lastName\",\n\t  \"DOB\"\t\t   \t: \"date_of_birth|MinAge=30,MaxAge=40|%m-%d-%Y\",\n\t  \"Gender\"\t   \t: \"choices|('Male', 'Female')|\",\n\t  \"Mobile\"     \t\t: \"PhoneNumber||India\",\n\t  \"emailId\"\t   \t: \"alphanum||email\",\n\t  \"Address\"    \t\t:\n\t  {\n\n            \"AddressType\"   : \"choices|('RES', 'OFF', 'WRK')|\",\n\t    \"Street-1\"      : \"alphabet|20|streetName\",\n\t    \"Street-2\"      : \"alphanum|20|streetName\",\n\t    \"Postalcode\"    : \"numeric|6|postcode\",\n\t    \"country\"\t    : \"alphabet||country\",\n\t    \"city\"\t    : \"alphabet||city\"\n\t  },\n\t  \"DOJ\"\t\t  \t: \"date|StartDate=20100223,EndDate=20200330|%Y-%m-%d\",\n\t  \"Client\"\t  \t: \"alphabet||company\",\n\t  \"Active\"\t\t: \"boolean||\",\n\t  \"AccountNum\"\t\t: \"alphanum|NONE|accountNumber\",\n\t  \"Salary\"\t    \t: \"constant|Monthly|\",\n          \"DeskNumber\"\t    \t: \"constant|null|\"\n\t}\n]\n```\n\n\nBelow are the sample data type syntax that can be used in input file.\n### alphabets\n\nTo generate random alphabetic String\n\nSyntax: \n```json\n\"<Node Name>\" : \"alphabet|<length>\"\n```\ne.g.\n```json\n\"ProductName\" : \"alphabet|30\"\n```\n\n### alphanum\nTo generate random alphanumeric String\n\nSyntax: \n```json\n\"<Node Name>\" : \"alphanum|<length>\"\n```\ne.g.\n```json\n\"ProductNumber\" : \"alphanum|30\"\n```\n\n### numeric\nTo generate random numeric value\n\nSyntax: \n```json\n\"<Node Name>\" : \"numeric|<length>\"\n```\ne.g.\n```json\n\"ProductID\" : \"numeric|30\"\n```\n\n### code\nIf you want to generate a code with some Prefix String\n\nSyntax: \n```json\n\"<Node Name>\" : \"code||<Prefix String><regex>\"\n```\n* Number signs (‘#’) are replaced with a random digit (0 to 9)\n* Number signs (‘#’) are replaced with a random digit (0 to 9)\n* Percent signs (‘%’) are replaced with a random non-zero digit (1 to 9)\n* Exclamation marks (‘!’) are replaced with a random digit or an empty string\n* At symbols (‘@’) are replaced with a random non-zero digit or an empty string\n\ne.g.\n```json\n\"EmployeeID\" : \"code||PALO-%%-##LTD!@\"\n\nOutput: \n\"EmployeeID\": \"PALO-26-12LTD8\"\n```\n### title\nTo generate random salutations like Dr. or Mr. or Mrs. or Mx.\n\nSyntax: \n```json\n\"<Node Name>\" : \"alphabet||title\"\n```\ne.g.\n```json\n\"Salutation\" : \"alphabet||title\"\n\nOutput: \n\"Salutation\": \"Mr.\"\n```\n\n### firstName\nUse to generate random firstName\n\nSyntax: \n```json\n\"<Node Name>\" : \"alphabet|<Max length>|firstName\"\n```\ne.g.\n```json\n\"Firstname\" : \"alphabet|20|firstName\",\n\nOutput: \n\"Firstname\": \"Samantha\"\n```\n\n### lastName\nUse to generate random lastname\n\nSyntax: \n```json\n\"<Node Name>\" : \"alphabet|<Max length>|lastName\"\n```\ne.g.\n```json\n\"LastName\" : \"alphabet|20|lastName\"\n\nOutput: \n\"LastName\": \"Daniel\"\n```\n\n### date_of_birth\nUse to generate random date_of_birth\n\nSyntax: \n```json\n\"<Node Name>\" : \"date_of_birth|MinAge=<age>,MaxAge=<age>|<DateFormat>\"\n```\ne.g.\n```json\n\"DOB\" : \"date_of_birth|MinAge=30,MaxAge=40|%m-%d-%Y\"\n\nOutput: \n\"DOB\": \"04-14-1981\"\n```\n\n### choices\nIf we want to select a value randomly from given choices\n\nSyntax: \n```json\n\"<Node Name>\" : \"choices|(<'value1', 'value2'>)|\"\n```\ne.g.\n```json\n\"AddressType\": \"choices|('RES', 'OFF', 'WRK')|\"\n\nOutput: \n\"AddressType\": \"RES\"\n```\n\n### PhoneNumber\nRandom Phone Number based on country\n\nSyntax: \n```json\n\"<Node Name>\" : \"PhoneNumber||<Country Name>\"\n```\ne.g.\n```json\n\"Mobile\" : \"PhoneNumber||India\"\n\nOutput: \n\"Mobile\": \"+917880010426\"\n```\n### email\nRandom Email Address\n\nSyntax: \n```json\n\"<Node Name>\" : \"alphanum||email\"\n```\ne.g.\n```json\n\"emailId\" : \"alphanum||email\"\n\nOutput: \n\"emailId\": \"ncooper@hopkins.com\"\n```\n\n### streetName\nRandom Street Address Name\n\nSyntax: \n```json\n\"<Node Name>\" : \"alphabet|<length>|streetName\"\n```\ne.g.\n```json\n\"Street-1\": \"alphabet|20|streetName\"\n\nOutput: \n\"Street-1\": \"Douglas Crossing\"\n```\n\n### postcode\nRandom postcode\n\nSyntax: \n```json\n\"<Node Name>\" : \"numeric|<length>|postcode\"\n```\ne.g.\n```json\n\"Postalcode\": \"numeric|6|postcode\"\n\nOutput: \n\"Postalcode\": \"20494\"\n```\n### country\nRandom country\n\nSyntax: \n```json\n\"<Node Name>\" : \"alphabet||country\"\n```\ne.g.\n```json\n\"country\": \"alphabet||country\"\n\nOutput: \n\"country\": \"Singapore\"\n```\n### city\nRandom city\n\nSyntax: \n```json\n\"<Node Name>\" : \"alphabet||city\"\n```\ne.g.\n```json\n\"City\": \"alphabet||city\"\n\nOutput: \n\"city\": \"Bangalore\"\n```\n\n### date\nGenerate Random Date between two date\n\nSyntax: \n```json\n\"<Node Name>\" : \"date|StartDate=<date in yyyyMMdd>,EndDate=<date in yyyyMMdd>|<required Date Format>\"\n```\ne.g.\n```json\n\"DOJ\": \"date|StartDate=20100223,EndDate=20200330|%Y-%m-%d\"\n\nOutput: \n\"DOJ\": \"2011-07-04\"\n```\n\n### company\nGenerate Random Company Name\n\nSyntax: \n```json\n\"<Node Name>\" : \"alphabet||company\"\n```\ne.g.\n```json\n\"Client\": \"alphabet||company\"\n\nOutput: \n\"Client\": \"Williams-Harris\"\n```\n\n### boolean\nRandomly choose boolean value\n\nSyntax: \n```json\n\"<Node Name>\" : \"boolean||\"\n```\ne.g.\n```json\n\"Active\": \"boolean||\"\n\nOutput: \n\"Active\": \"False\"\n```\n\n### accountNumber\nGenerate random Basic or Internal account number \n\nSyntax: \n```json\n\"<Node Name>\" : \"alphanum|<Account Type>|accountNumber\" \n```\n* NONE - Generate a Basic Bank Account Number (BBAN)\n* Internal - Generate an International Bank Account Number (IBAN)\n\ne.g.\n```json\n\"AccountNum\": \"alphanum|NONE|accountNumber\"\n\nOutput: \n\"AccountNum\": \"JRMR05894987945503\"\n```\n### constant\nIf you want to use Constant values for all the records\n\nSyntax: \n```json\n\"<Node Name>\" : \"constant|<Required Value>|\"\n```\n* NONE - Generate a Basic Bank Account Number (BBAN)\n* Internal - Generate an International Bank Account Number (IBAN)\n\ne.g.\n```json\n\"Salary\": \"constant|Monthly|\"\n\nOutput: \n\"Salary\": \"Monthly\"\n```\n\n## Installation\n\nRun the following to install:\n\n```python\npip install dthok\n```\n\nNote: Python version should be >=3.6\n\n## Execution\n\n- Command structure to generate required bulk file,\n\n```commandline\ndthok -f <input Payload file path> -n <No. of Records> -fmt <Output file format (csv, json or xml)> -o <Output file name>\n```\nFor Example:\n```commandline\ndthok -f  /test1.json -n  10 -fmt  json -o MyTestData\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/paloitsingapore/dthok",
    "keywords": "dthok",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dthok",
    "package_url": "https://pypi.org/project/dthok/",
    "platform": "",
    "project_url": "https://pypi.org/project/dthok/",
    "project_urls": {
      "Homepage": "https://github.com/paloitsingapore/dthok"
    },
    "release_url": "https://pypi.org/project/dthok/1.0.0/",
    "requires_dist": [
      "Faker",
      "randominfo",
      "dict2xml",
      "json2xml",
      "xmltodict",
      "phone-gen"
    ],
    "requires_python": ">=3.6",
    "summary": "Bulk Test Data Generator",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11822194,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1fbf11f347ded7c0080eba9a042f73cb9e3e1adf83d071c4bf1bc915b70d41c5",
        "md5": "0296315697c4b4dec30a9bcf3f268097",
        "sha256": "f1fd5c01437f82300990f753d781d56fb0d61cdc072b617fe6ed72feda612920"
      },
      "downloads": -1,
      "filename": "dthok-1.0.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "0296315697c4b4dec30a9bcf3f268097",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": ">=3.6",
      "size": 8115,
      "upload_time": "2021-10-25T10:41:29",
      "upload_time_iso_8601": "2021-10-25T10:41:29.573760Z",
      "url": "https://files.pythonhosted.org/packages/1f/bf/11f347ded7c0080eba9a042f73cb9e3e1adf83d071c4bf1bc915b70d41c5/dthok-1.0.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08d0a1faa4bf28f96d4be09f33ed75b38ea1331933f7b9b612e63791335fe3f6",
        "md5": "db6fe33be33379580a6dd96652504b5a",
        "sha256": "bae3b33749c60614535ff549109fc0856511a45f30bbedaad603c4b9fbc9c5d6"
      },
      "downloads": -1,
      "filename": "dthok-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "db6fe33be33379580a6dd96652504b5a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7263,
      "upload_time": "2021-10-25T10:41:33",
      "upload_time_iso_8601": "2021-10-25T10:41:33.572084Z",
      "url": "https://files.pythonhosted.org/packages/08/d0/a1faa4bf28f96d4be09f33ed75b38ea1331933f7b9b612e63791335fe3f6/dthok-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}