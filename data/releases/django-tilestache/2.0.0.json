{
  "info": {
    "author": "George Silva",
    "author_email": "george@sigmageosistemas.com.br",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "=============================\nDjango TileStache\n=============================\n\n.. image:: https://badge.fury.io/py/django-tilestache.svg\n    :target: https://badge.fury.io/py/django-tilestache\n\n.. image:: https://travis-ci.org/george-silva/django-tilestache.svg?branch=master\n    :target: https://travis-ci.org/george-silva/django-tilestache\n\n.. image:: https://codecov.io/gh/george-silva/django-tilestache/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/george-silva/django-tilestache\n\nCommand and Control Center for Tilestache, inside a django app.\n\nTileStache is a marvelous piece of software that can serve all kinds\nof map tiles.\n\nOur difficulty is that we needed a dynamic configuration for it, so we\ncreated something integrated with Django, to act as command and control\ncenter for it.\n\nBasically the goal of this project is to have a Django app that can\nconfigure TileStache. After that, we can serve some tiles from Django,\nusing the same configuration or use an array of TileStache servers to\nit for us.\n\nThere are two main parts here:\n\n* The configuration edition/storage/serialization;\n* The command and control center;\n\nDocumentation\n-------------\n\nTODO\n\nQuickstart\n----------\n\nInstall Django TileStache::\n\n    pip install django-tilestache\n\nAdd it to your `INSTALLED_APPS`:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django_tilestache.apps.DjangoTilestacheConfig',\n        ...\n    )\n\nAdd Django TileStache's URL patterns:\n\n.. code-block:: python\n\n    from django_tilestache import urls as django_tilestache_urls\n\n\n    urlpatterns = [\n        ...\n        url(r'^', include(django_tilestache_urls)),\n        ...\n    ]\n\nThis is optional. We have a few views that you can configure yourself. You don't need to follow our URL scheme.\n\nUsage\n-----\n\nLayers\n======\n\nIt's simple:\n\n.. code-block:: python\n\n    from django_tilestache.models import Layer\n\n    layer = Layer.objects.create(\n        **{\n            'name': 'foolayer'  # this is the tilestache layer name\n            'provider': {\n\n            },  # tilestache provider options\n            '...' : 'foo' # all other options\n        }\n    )\n\nCaches\n======\n\nTODO\n\nViews\n=====\n\nThere are two main views for django-tilestache. One is for serving the configuration and the other is for\nserving tiles.\n\nThese views are not secured. It's your responsibility to configure these DRF APIViews with the\nauthentication and authorizations.\n\nThe configuration view will output a valid Tilestache JSON configuration.\n\nThe tile view will output a tile, depending on the registered configuration (caches and layers).\n\nCache management\n================\n\nYou can use the CacheManager object to manage the cache\nfor your tilestache.\n\nAll you need to do is pass along the correct configuration\nfor it and use the methods, passing along geometries.\n\nThe CacheManager will take care of it. As long as your conf\nis correct, it should do the correct thing.\n\nHow to run a tilestache server with the custom config?\n======================================================\n\nYou can only use WSGI for now to do it.\n\nUsing gunicorn, here is a simple example:\n\n.. code-block:: bash\n\n    gunicorn \"django_tilestache:RemoteTileStache('http://localhost:8000/api/tilestache/')\" -b localhost:8080 --log-level=DEBUG\n\nYou can pass along other options as well, such as authentication\ninformation. **Dont forget to secure your configuration view!**\n\nFeatures\n--------\n\n* Cache management (seed and purge)\n* Store tilestache layers in django models\n* Custom tilestache server that looksup for configuration in a remote server\n* Endpoint for serving the tilestache configuration\n* Endpoint for serving the tilestache tiles, from Django\n\nRoadmap\n-------\n\n* Management commands (generate conf, purge/seed cache, etc);\n* Allow to use the Django cache settings instead of defining your own again\n* Allow simple definition of layers using a Django style declarative configuration, like so:\n\n.. code-block:: python\n\n    class FooModel(models.Model):\n        name = models.CharField(max_length=128)\n        geom = models.PointField()\n        class Meta:\n            tilestache = (\n                {'name': 'foo-layer-a', 'provider': 'foo'},\n                {'name': 'foo-layer-b', 'provider': 'bar'}\n            )\n\n\nUploading new distros\n---------------------\n\n.. code-block:: bash\n\n    bumpversion --current-version x.x.x minor\n    make release\n    git push origin master --tags\n\n\nRunning Tests\n-------------\n\nDoes the code actually work?\n\n.. code-block:: python\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install tox\n    (myenv) $ tox\n\nWARNING: not fully tested with tox YET.\n\nIt's tested and working for Django 1.11 and Python 2.7.\n\nCredits\n-------\n\nTools used in rendering this package:\n\n* `SIGMA Geosistemas`_\n* TileStache_\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _SIGMA Geosistemas: https://sigmageosistemas.com.br\n.. _TileStache: http://tilestache.org\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n\n0.6.0 (2017-05-30)\n\n* First **actual release** on PyPI.\n* New TileStache server that can ping a configuration URL and\nself configure.\n* Layer model and all the serializers needed to make this work\nusing Django REST Framework\n* REST View to handle fecthing the configuration from the database\n* REST View to serve tiles from Django\n\n0.1.0 (2017-04-24)\n++++++++++++++++++\n\n* First release on PyPI.\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.sigmageosistemas.com.br/dev/django-tilestache",
    "keywords": "django-tilestache",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-tilestache",
    "package_url": "https://pypi.org/project/django-tilestache/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-tilestache/",
    "project_urls": {
      "Homepage": "https://gitlab.sigmageosistemas.com.br/dev/django-tilestache"
    },
    "release_url": "https://pypi.org/project/django-tilestache/2.0.0/",
    "requires_dist": [
      "apscheduler",
      "django",
      "django-appconf",
      "djangorestframework",
      "djangorestframework-filters",
      "djangorestframework-gis",
      "jsonfield",
      "pylru",
      "requests",
      "tilestache"
    ],
    "requires_python": "",
    "summary": "Command and Control Center for Tilestache, inside a django app",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4497913,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "453a4681facb6c3a06dc6ac4db6e0628030fd5a74da734f4ca9b5a60b7910da6",
        "md5": "12df14801430e6f568563d4773fe9fba",
        "sha256": "cb771f136f8feddabdc459a23ea0283d2d3e2c057f3507f39096c641550809d3"
      },
      "downloads": -1,
      "filename": "django_tilestache-2.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "12df14801430e6f568563d4773fe9fba",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 23705,
      "upload_time": "2017-09-25T19:56:28",
      "upload_time_iso_8601": "2017-09-25T19:56:28.532933Z",
      "url": "https://files.pythonhosted.org/packages/45/3a/4681facb6c3a06dc6ac4db6e0628030fd5a74da734f4ca9b5a60b7910da6/django_tilestache-2.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fc847f1368416d835e658f53a549be7f6b1363d5983644c84d490e7a07c8d0f",
        "md5": "fe4c8b18b688cb3f018780724e6b84c7",
        "sha256": "95b6892db2f1afaaddb646cb9ad8a5a1de8a9d2f00741c811bb73512002f4066"
      },
      "downloads": -1,
      "filename": "django-tilestache-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fe4c8b18b688cb3f018780724e6b84c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20433,
      "upload_time": "2017-09-25T19:56:30",
      "upload_time_iso_8601": "2017-09-25T19:56:30.533568Z",
      "url": "https://files.pythonhosted.org/packages/3f/c8/47f1368416d835e658f53a549be7f6b1363d5983644c84d490e7a07c8d0f/django-tilestache-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}