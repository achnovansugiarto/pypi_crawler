{
  "info": {
    "author": "David Sanders",
    "author_email": "davesque@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Simple JWT\n==========\n\nA minimal JSON Web Token authentication plugin for the `Django REST Framework\n<http://www.django-rest-framework.org/>`__.\n\n.. image:: https://travis-ci.org/davesque/django-rest-framework-simplejwt.svg?branch=master\n  :target: https://travis-ci.org/davesque/django-rest-framework-simplejwt\n.. image:: https://codecov.io/gh/davesque/django-rest-framework-simplejwt/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/davesque/django-rest-framework-simplejwt\n\n-------------------------------------------------------------------------------\n\nSimple JWT provides a JSON Web Token authentication backend for the Django REST\nFramework.  It aims to provide an out-of-the-box solution for JWT\nauthentication which avoids some of the common pitfalls of the JWT\nspecification.  Below, we list some of the major goals of the project:\n\nDiscourage crypto negotiation\n-----------------------------\n\nProtocols which allow for negotiation of crypto algorithms (this includes JWT)\nare generally considered to be weak by design.  Simple JWT assumes that most\nuse cases will be covered by sha-256 HMAC signing with a shared secret.\n\nObject-oriented API\n-------------------\n\nSimple JWT strives to implement its functionality in an object-oriented way.\nSome behavior can be customized through settings variables, but it is expected\nthat the rest will be handled through subclassing.  Following from this, people\nwishing to customize the finer details of Simple JWT's behavior are expected to\nbecome familiar with the library's classes and the relationships there between.\n\nSafe defaults, predictability\n-----------------------------\n\nAssuming users of the library don't extensively and invasively subclass\neverything, Simple JWT's overall behavior shouldn't be surprising.  Settings\nvariable defaults should be safe.  Where authentication and authorization are\nconcerned, it should be hard to shoot oneself in the foot.\n\nInstallation\n------------\n\nSimple JWT can be installed with pip::\n\n  pip install djangorestframework_simplejwt\n\nThen, your django project must be configured to use the library.  In\n``settings.py``, add\n``rest_framework_simplejwt.authentication.JWTAuthentication`` to the list of\nauthentication classes::\n\n  REST_FRAMEWORK = {\n      ...\n      'DEFAULT_AUTHENTICATION_CLASSES': (\n          ...\n          'rest_framework_simplejwt.authentication.JWTAuthentication',\n      )\n      ...\n  }\n\nAlso, in your root ``urls.py`` file (or any other url config), include routes\nfor Simple JWT's ``TokenObtainPairView`` and ``TokenRefreshView`` views::\n\n  from rest_framework_simplejwt.views import (\n      TokenObtainPairView,\n      TokenRefreshView,\n  )\n\n  urlpatterns = [\n      ...\n      url(r'^api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n      url(r'^api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n      ...\n  ]\n\nUsage\n-----\n\nTo verify that Simple JWT is working, you can use curl to issue a couple of\ntest requests::\n\n  curl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"username\": \"davidattenborough\", \"password\": \"boatymcboatface\"}' \\\n    http://localhost:8000/api/token/\n\n  ...\n  {\n    \"access\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNDU2LCJqdGkiOiJmZDJmOWQ1ZTFhN2M0MmU4OTQ5MzVlMzYyYmNhOGJjYSJ9.NHlztMGER7UADHZJlxNG0WSi22a2KaYSfd1S-AuT7lU\",\n    \"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImNvbGRfc3R1ZmYiOiLimIMiLCJleHAiOjIzNDU2NywianRpIjoiZGUxMmY0ZTY3MDY4NDI3ODg5ZjE1YWMyNzcwZGEwNTEifQ.aEoAYkSJjoWH1boshQAaTkf8G3yn0kapko6HFRt7Rh4\"\n  }\n\nYou can use the returned access token to prove authentication for a protected\nview::\n\n  curl \\\n    -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNDU2LCJqdGkiOiJmZDJmOWQ1ZTFhN2M0MmU4OTQ5MzVlMzYyYmNhOGJjYSJ9.NHlztMGER7UADHZJlxNG0WSi22a2KaYSfd1S-AuT7lU\" \\\n    http://localhost:8000/api/some-protected-view/\n\nWhen this short-lived access token expires, you can use the longer-lived\nrefresh token to obtain another access token::\n\n  curl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImNvbGRfc3R1ZmYiOiLimIMiLCJleHAiOjIzNDU2NywianRpIjoiZGUxMmY0ZTY3MDY4NDI3ODg5ZjE1YWMyNzcwZGEwNTEifQ.aEoAYkSJjoWH1boshQAaTkf8G3yn0kapko6HFRt7Rh4\"}' \\\n    http://localhost:8000/api/token/refresh/\n\n  ...\n  {\"access\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNTY3LCJqdGkiOiJjNzE4ZTVkNjgzZWQ0NTQyYTU0NWJkM2VmMGI0ZGQ0ZSJ9.ekxRxgb9OKmHkfy-zs1Ro_xs1eMLXiR17dIDBVxeT-w\"}\n\nSettings\n--------\n\nSome of Simple JWT's behavior can be customized through settings variables in\n``settings.py``::\n\n  # Django project settings.py\n\n  from datetime import timedelta\n\n  ...\n\n  SIMPLE_JWT = {\n      'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n      'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n\n      'SECRET_KEY': SECRET_KEY,  # Defaults to django project secret key\n\n      'AUTH_HEADER_TYPE': 'Bearer',\n      'USER_ID_FIELD': 'id',\n      'USER_ID_CLAIM': 'user_id',\n\n      'AUTH_TOKEN_CLASS': 'rest_framework_simplejwt.tokens.AccessToken',\n      'TOKEN_TYPE_CLAIM': 'token_type',\n\n      'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),\n      'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\n      'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\n  }\n\nAbove, the default values for these settings are shown.\n\n-------------------------------------------------------------------------------\n\nACCESS_TOKEN_LIFETIME\n  A ``datetime.timedelta`` object which specifies how long access tokens are\n  valid.  This ``timedelta`` value is added to the current UTC time during\n  token generation to obtain the token's default \"exp\" claim value.\n\nREFRESH_TOKEN_LIFETIME\n  A ``datetime.timedelta`` object which specifies how long refresh tokens are\n  valid.  This ``timedelta`` value is added to the current UTC time during\n  token generation to obtain the token's default \"exp\" claim value.\n\nSECRET_KEY\n  The secret key which is used to sign the content of generated tokens.  This\n  setting defaults to the value of the ``SECRET_KEY`` setting for your django\n  project.  Although this is the most reasonable default that Simple JWT can\n  provide, it is recommended that developers change this setting to a value\n  which is independent from the django project secret key.  This will make\n  changing the secret key used for tokens easier in the event that it is\n  compromised.\n\nAUTH_HEADER_TYPE\n  The authorization header type that will be checked for views that require\n  authentication.  For example, a value of ``'Bearer'`` means that views\n  requiring authentication would look for a header with the following format:\n  ``Authorization: Bearer <token>``.\n\nUSER_ID_FIELD\n  The database field from the user model that will be included in generated\n  tokens to identify users.  It is recommended that the value of this setting\n  specifies a field which does not normally change once its initial value is\n  chosen.  For example, specifying a \"username\" or \"email\" field would be a\n  poor choice since an account's username or email might change depending on\n  how account management in a given service is designed.  This could allow a\n  new account to be created with an old username while an existing token is\n  still valid which uses that username as a user identifier.\n\nUSER_ID_CLAIM\n  The claim in generated tokens which will be used to store user identifiers.\n  For example, a setting value of ``'user_id'`` would mean generated tokens\n  include a \"user_id\" claim that contains the user's identifier.\n\nAUTH_TOKEN_CLASS\n  A dot path to a class which specifies the type of token that is expected to\n  prove authentication.  More about this in the \"Token types\" section below.\n\nTOKEN_TYPE_CLAIM\n  The claim name that is used to store a token's type.  More about this in the\n  \"Token types\" section below.\n\nSLIDING_TOKEN_LIFETIME\n  A ``datetime.timedelta`` object which specifies how long sliding tokens are\n  valid to prove authentication.  This ``timedelta`` value is added to the\n  current UTC time during token generation to obtain the token's default \"exp\"\n  claim value.  More about this in the \"Sliding tokens\" section below.\n\nSLIDING_TOKEN_REFRESH_LIFETIME\n  A ``datetime.timedelta`` object which specifies how long sliding tokens are\n  valid to be refreshed.  This ``timedelta`` value is added to the current UTC\n  time during token generation to obtain the token's default \"exp\" claim value.\n  More about this in the \"Sliding tokens\" section below.\n\nSLIDING_TOKEN_REFRESH_EXP_CLAIM\n  The claim name that is used to store the exipration time of a sliding token's\n  refresh period.  More about this in the \"Sliding tokens\" section below.\n\nToken types\n-----------\n\nSimple JWT provides a number of token types which can be used for\nauthorization.  In a token's payload, its type can be identified by the value\nof its token type claim, which is \"token_type\" by default.  This may have a\nvalue of \"access\", \"refresh\", or \"sliding\".  The claim name used to store the\ntype can be customized by changing the ``TOKEN_TYPE_CLAIM`` setting.\n\nBy default, Simple JWT expects an \"access\" token to prove authentication.  The\nexpected token type is determined by the value of the ``AUTH_TOKEN_CLASS``\nsetting.  This setting contains a dot path to a token class and is normally set\nto ``'rest_framework_simplejwt.tokens.AccessToken'``.  At present, the only\nother possible value for this setting is\n``'rest_framework_simplejwt.tokens.SlidingToken'``.\n\nSliding tokens\n--------------\n\nSliding tokens offer a more convenient experience to users of tokens with the\ntrade-offs of being less secure and, in the case that the blacklist app is\nbeing used, less performant.  A sliding token is one which contains both an an\nexpiration claim and a refresh expiration claim.  As long as the timestamp in\na sliding token's expiration claim has not passed, it can be used to prove\nauthentication.  Additionally, as long as the timestamp in its refresh\nexpiration claim has not passed, it may also be submitted to a refresh view to\nget another copy of itself with a renewed expiration claim.\n\nIf you want to use sliding tokens, change the value of the ``AUTH_TOKEN_CLASS``\nsetting to ``'rest_framework_simplejwt.tokens.SlidingToken'``.  Also, instead\nof defining urls for the ``TokenObtainPairView`` and ``TokenRefreshView``\nviews, define urls instead for the ``TokenObtainSlidingView`` and the\n``TokenRefreshSlidingView``::\n\n  from rest_framework_simplejwt.views import (\n      TokenObtainSlidingView,\n      TokenRefreshSlidingView,\n  )\n\n  urlpatterns = [\n      ...\n      url(r'^api/token/', TokenObtainSlidingView.as_view(), name='token_obtain'),\n      url(r'^api/token/refresh/', TokenRefreshSlidingView.as_view(), name='token_refresh'),\n      ...\n  ]\n\nBe aware that, if you are using the blacklist app, Simple JWT will validate all\nsliding tokens against the blacklist for each authenticated request.  This will\nslightly reduce the performance of authenticated API views.\n\nBlacklist app\n-------------\n\nSimple JWT includes an app that provides token blacklist functionality.  To use\nthis app, include it in your list of installed apps in ``settings.py``::\n\n  # Django project settings.py\n\n  ...\n\n  INSTALLED_APPS = (\n      ...\n      'rest_framework_simplejwt.token_blacklist',\n      ...\n  }\n\nAlso, make sure to run ``python manage.py migrate`` to run the app's\nmigrations.\n\nIf the blacklist app is detected in ``INSTALLED_APPS``, Simple JWT will add any\ngenerated refresh or sliding tokens to a list of outstanding tokens.  It will\nalso check that any refresh or sliding token does not appear in a blacklist of\ntokens before it considers it as valid.\n\nThe Simple JWT blacklist app implements its outstanding and blacklisted token\nlists using two model: ``OutstandingToken`` and ``BlacklistedToken``.  Model\nadmins are defined for both of these models.  To add a token to the blacklist,\nfind its corresponding ``OutstandingToken`` record in the admin and use the\nadmin again to create a ``BlacklistedToken`` record that points to the\n``OutstandingToken`` record.\n\nThe blacklist app also provides a management command, ``flushexpiredtokens``,\nwhich will delete any tokens from the outstanding list and blacklist that have\nexpired.  You should set up a cron job on your server or hosting platform which\nruns this command daily.\n\nExperimental features\n---------------------\n\nJWTTokenUserAuthentication backend\n  The ``JWTTokenUserAuthentication`` backend's ``authenticate`` method does not\n  perform a database lookup to obtain a user instance.  Instead, it returns a\n  ``rest_framework_simplejwt.models.TokenUser`` instance which acts as a\n  stateless user object backed only by a validated token instead of a record in\n  a database.  This can facilitate developing single sign-on functionality\n  between separately hosted Django apps which all share the same token secret\n  key.  To use this feature, add the\n  ``rest_framework_simplejwt.authentication.JWTTokenUserAuthentication``\n  backend (instead of the default ``JWTAuthentication`` backend) to the Django\n  REST Framework's ``DEFAULT_AUTHENTICATION_CLASSES`` config setting::\n\n    REST_FRAMEWORK = {\n        ...\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n            ...\n            'rest_framework_simplejwt.authentication.JWTTokenUserAuthentication',\n        )\n        ...\n    }\n\nAcknowledgements\n----------------\n\nThis project borrows code from the `Django REST Framework\n<https://github.com/encode/django-rest-framework/>`__ as well as concepts from\nthe implementation of another JSON web token library for the Django REST\nFramework, `django-rest-framework-jwt\n<https://github.com/GetBlimp/django-rest-framework-jwt>`__.  The licenses from\nboth of those projects have been included in this repository in the \"licenses\"\ndirectory.\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davesque/django-rest-framework-simplejwt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangorestframework-simplejwt",
    "package_url": "https://pypi.org/project/djangorestframework-simplejwt/",
    "platform": "",
    "project_url": "https://pypi.org/project/djangorestframework-simplejwt/",
    "project_urls": {
      "Homepage": "https://github.com/davesque/django-rest-framework-simplejwt"
    },
    "release_url": "https://pypi.org/project/djangorestframework-simplejwt/2.0.5/",
    "requires_dist": [
      "django",
      "djangorestframework",
      "python-jose"
    ],
    "requires_python": "",
    "summary": "A minimal JSON Web Token authentication plugin for Django REST Framework",
    "version": "2.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15476226,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed2e2ecf616fb3f9cd58bff39c6de186317b9cf7515243905cac8cf43c998881",
        "md5": "a746e69a76d5d7001590abee80fc6893",
        "sha256": "d8c15ecf1a81e50e1525d27904fa76661ee91231479d0918985e75c41052d58a"
      },
      "downloads": -1,
      "filename": "djangorestframework_simplejwt-2.0.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a746e69a76d5d7001590abee80fc6893",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 27944,
      "upload_time": "2017-07-06T19:47:29",
      "upload_time_iso_8601": "2017-07-06T19:47:29.043285Z",
      "url": "https://files.pythonhosted.org/packages/ed/2e/2ecf616fb3f9cd58bff39c6de186317b9cf7515243905cac8cf43c998881/djangorestframework_simplejwt-2.0.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00f591d53142ec0ae89dfafe498aa5ecb059eeb3ab9c6267d67a046f5adb71d7",
        "md5": "684d8a0687444ff4874cb8c5df56f4c2",
        "sha256": "eac0c6ddb4db56776a2f629674bb0894860e8196d2eb7bac7f06bf88981dd751"
      },
      "downloads": -1,
      "filename": "djangorestframework_simplejwt-2.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "684d8a0687444ff4874cb8c5df56f4c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16789,
      "upload_time": "2017-07-06T19:47:30",
      "upload_time_iso_8601": "2017-07-06T19:47:30.043310Z",
      "url": "https://files.pythonhosted.org/packages/00/f5/91d53142ec0ae89dfafe498aa5ecb059eeb3ab9c6267d67a046f5adb71d7/djangorestframework_simplejwt-2.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}