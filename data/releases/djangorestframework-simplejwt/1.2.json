{
  "info": {
    "author": "David Sanders",
    "author_email": "davesque@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Simple JWT\n==========\n\nA minimal JSON Web Token authentication plugin for the `Django REST Framework\n<http://www.django-rest-framework.org/>`_.\n\n.. image:: https://travis-ci.org/davesque/django-rest-framework-simplejwt.svg?branch=master\n  :target: https://travis-ci.org/davesque/django-rest-framework-simplejwt\n.. image:: https://codecov.io/gh/davesque/django-rest-framework-simplejwt/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/davesque/django-rest-framework-simplejwt\n\n----\n\nSimple JWT provides a JSON Web Token authentication backend for the Django REST\nFramework.  It aims to provide an out-of-the-box solution for JWT\nauthentication which is minimal and avoids some of the common pitfalls of the\nJWT specification.  Below, we list some of the major goals of the project:\n\nDiscourage crypto negotiation\n-----------------------------\n\nProtocols which allow for negotiation of crypto algorithms (this includes JWT)\nare generally considered to be weak by design.  Simple JWT assumes that most\nuse cases will be covered by sha-256 HMAC signing with a shared secret.\nCustomization of which algorithms are used to sign/verify tokens is possible\nbut not intended to be easy.\n\nObject oriented API\n-------------------\n\nThe implementation of Simple JWT emphasizes an object-oriented design.  The\nintention is that customization of Simple JWT's funcionality is done mostly\nthrough subclassing.  This will hopefully encourage developers to understand\nthe library at a deeper level and possibly reduce the risk of deploying a\nflawed JWT authentication system.  The classes which comprise the bulk of\nSimple JWT's functionality are meant to be easy to read and understand.\n\nSafe defaults\n-------------\n\nConfigurable aspects of Simple JWT should have reasonably safe defaults.  Users\nof this library should feel free to plug and play without shooting themselves\nin the foot.\n\nInstallation\n------------\n\nSimple JWT can be installed with pip::\n\n  pip install djangorestframework_simplejwt\n\nThen, your django project must be configured to use the library.  In\n``settings.py``, add\n``rest_framework_simplejwt.authentication.JWTAuthentication`` to the list of\nauthentication classes::\n\n  REST_FRAMEWORK = {\n      ...\n      'DEFAULT_AUTHENTICATION_CLASSES': (\n          ...\n          'rest_framework_simplejwt.authentication.JWTAuthentication',\n      )\n      ...\n  }\n\nAlso, in your root ``urls.py`` file, include Simple JWT's default urls::\n\n  urlpatterns = [\n      ...\n      url(r'^api/', include('rest_framework_simplejwt.urls')),\n      ...\n  ]\n\nAPI views to obtain and refresh tokens should be available at\n``/api/token/obtain/`` and ``/api/token/refresh/``.\n\nUsage\n-----\n\nTo verify that Simple JWT is working, you can use curl to issue a couple of\ntest requests::\n\n  curl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"username\": \"davidattenborough\", \"password\": \"boatymcboatface\"}' \\\n    http://localhost:8000/api/token/obtain/\n\n  ...\n  {\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJjb2xkX3N0dWZmIjoi4piDIiwiZXhwIjoxMjM0NTYsInJlZnJlc2hfZXhwIjoxMjM1MDB9.8po9BafZiPi1aaWTKYCt3q0_2eLlWabj4nfQVYXLCK8\"}\n\nYou can use the returned token to prove authentication for a protected view::\n\n  curl \\\n    -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJjb2xkX3N0dWZmIjoi4piDIiwiZXhwIjoxMjM0NTYsInJlZnJlc2hfZXhwIjoxMjM1MDB9.8po9BafZiPi1aaWTKYCt3q0_2eLlWabj4nfQVYXLCK8\" \\\n    http://localhost:8000/api/some-protected-view/\n\nOr you can refresh the token if it is still refreshable::\n\n  curl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJjb2xkX3N0dWZmIjoi4piDIiwiZXhwIjoxMjM0NTYsInJlZnJlc2hfZXhwIjoxMjM1MDB9.8po9BafZiPi1aaWTKYCt3q0_2eLlWabj4nfQVYXLCK8\"}' \\\n    http://localhost:8000/api/token/refresh/\n\n  ...\n  {\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJjb2xkX3N0dWZmIjoi4piDIiwiZXhwIjoxMjM0ODAsInJlZnJlc2hfZXhwIjoxMjM1MDB9.tTXYxsumgb7Odj9NsAAVpSaNnkS8gfAh-yjEnlW0JiQ\"}\n\nSettings\n--------\n\nSome of Simple JWT's behavior can be customized through settings variables in\n``settings.py``::\n\n  from datetime import timedelta\n\n  ...\n\n  SIMPLE_JWT = {\n      'AUTH_HEADER_TYPE': 'Bearer',\n\n      'USER_ID_FIELD': 'id',\n      'PAYLOAD_ID_FIELD': 'user_id',\n\n      'TOKEN_LIFETIME': timedelta(days=1),\n      'TOKEN_REFRESH_LIFETIME': timedelta(days=7),\n\n      'SECRET_KEY': SECRET_KEY,  # Default to the django secret key\n\n      'TOKEN_BACKEND': 'rest_framework_simplejwt.backends.TokenBackend',\n  }\n\nAbove, the default values for these settings are shown.\n\n-----\n\nAUTH_HEADER_TYPE\n  The authorization header type that will be checked for views that require\n  authentication.  For example, a value of ``'Bearer'`` means that views\n  requiring authentication would look for a header with the following format:\n  ``Authorization: Bearer <token>``.\n\nUSER_ID_FIELD\n  The database field from the user model that will be included in generated\n  tokens to identify users.  It is recommended that the value of this setting\n  specifies a field which does not normally change once its initial value is\n  chosen.  For example, specifying a \"username\" or \"email\" field would be a poor\n  choice since an account's username or email might change depending on how\n  account management in a given service is designed.  This could allow a new\n  account to be created with an old username while an existing token is still\n  valid which uses that username as a user identifier.\n\nPAYLOAD_ID_FIELD\n  The key name which will be used for the claim that specifies the user\n  identifier in generated tokens.  For example, a setting value of ``'user_id'``\n  would mean generated tokens include a \"user_id\" claim that contains the user's\n  identifier.\n\nTOKEN_LIFETIME\n  A ``datetime.timedelta`` object which specifies how long a generated token is\n  valid.  This ``timedelta`` value is added to the current UTC time while a token\n  is being generated to obtain the token's \"exp\" claim value.  Once the time\n  specified by this \"exp\" claim has passed, a token will no longer be valid for\n  authorization and can no longer be refreshed.\n\nTOKEN_REFRESH_LIFETIME\n  A ``datetime.timedelta`` object which specifies how long a generated token\n  may be refreshed.  This ``timedelta`` value is added to the current UTC time\n  while a token is being generated to obtain the token's \"refresh_exp\" claim\n  value.  Once the time specified by this \"refresh_exp\" claim has passed, a token\n  can no longer be refreshed.  However, if the time specified by a token's \"exp\"\n  claim still has not passed, it can still be used for authorization.\n\nSECRET_KEY\n  The secret key which is used to sign the content of generated tokens.  This\n  setting defaults to the value of the ``SECRET_KEY`` setting for the django\n  project.  Although this is the most reasonable default that Simple JWT can\n  provide, it is recommended that developers change this setting to a value which\n  is independent from the django project secret key.  This will make changing the\n  secret key used for tokens easier in the event that it is compromised or a\n  token exists which must be immediately invalidated.\n\nTOKEN_BACKEND\n  Specifies a dot path to a class which implements a set of low-level token\n  operations used by Simple JWT.  For more information, see the \"Customization\"\n  section below.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davesque/django-rest-framework-simplejwt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangorestframework-simplejwt",
    "package_url": "https://pypi.org/project/djangorestframework-simplejwt/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djangorestframework-simplejwt/",
    "project_urls": {
      "Homepage": "https://github.com/davesque/django-rest-framework-simplejwt"
    },
    "release_url": "https://pypi.org/project/djangorestframework-simplejwt/1.2/",
    "requires_dist": [
      "django",
      "djangorestframework",
      "python-jose"
    ],
    "requires_python": "",
    "summary": "A minimal JSON Web Token authentication plugin for Django REST Framework",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15476226,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b948d1667f87b1bdd54625d324fd9e070ffdc2a96125a35e4444a44abffdddd6",
        "md5": "873868d2b1b83c0399eca53d5351c09b",
        "sha256": "821a2aef2d4cede33a83fed199774add3670222119a5504fb6caefb135c5f28e"
      },
      "downloads": -1,
      "filename": "djangorestframework_simplejwt-1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "873868d2b1b83c0399eca53d5351c09b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 15281,
      "upload_time": "2017-05-14T22:44:46",
      "upload_time_iso_8601": "2017-05-14T22:44:46.852179Z",
      "url": "https://files.pythonhosted.org/packages/b9/48/d1667f87b1bdd54625d324fd9e070ffdc2a96125a35e4444a44abffdddd6/djangorestframework_simplejwt-1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b370ab3676e5ae9adce6add6581e5dab941253cf19bb905ebdbfe2180efbe08e",
        "md5": "edf851d90e0179cef407d0008366f503",
        "sha256": "bd9acae6d7af0e3776c9b92881b5af7ae73cf43d934bfecd829e87fd1f6cd2ea"
      },
      "downloads": -1,
      "filename": "djangorestframework_simplejwt-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "edf851d90e0179cef407d0008366f503",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9005,
      "upload_time": "2017-05-14T22:44:49",
      "upload_time_iso_8601": "2017-05-14T22:44:49.198889Z",
      "url": "https://files.pythonhosted.org/packages/b3/70/ab3676e5ae9adce6add6581e5dab941253cf19bb905ebdbfe2180efbe08e/djangorestframework_simplejwt-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}