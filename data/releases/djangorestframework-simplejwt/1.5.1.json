{
  "info": {
    "author": "David Sanders",
    "author_email": "davesque@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Simple JWT\n==========\n\nA minimal JSON Web Token authentication plugin for the `Django REST Framework\n<http://www.django-rest-framework.org/>`_.\n\n.. image:: https://travis-ci.org/davesque/django-rest-framework-simplejwt.svg?branch=master\n  :target: https://travis-ci.org/davesque/django-rest-framework-simplejwt\n.. image:: https://codecov.io/gh/davesque/django-rest-framework-simplejwt/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/davesque/django-rest-framework-simplejwt\n\n-------------------------------------------------------------------------------\n\nSimple JWT provides a JSON Web Token authentication backend for the Django REST\nFramework.  It aims to provide an out-of-the-box solution for JWT\nauthentication which is minimal and avoids some of the common pitfalls of the\nJWT specification.  Below, we list some of the major goals of the project:\n\nDiscourage crypto negotiation\n-----------------------------\n\nProtocols which allow for negotiation of crypto algorithms (this includes JWT)\nare generally considered to be weak by design.  Simple JWT assumes that most\nuse cases will be covered by sha-256 HMAC signing with a shared secret.\n\nObject-oriented API\n-------------------\n\nSimple JWT strives to implement its functionality in an object-oriented\nway.  Some behavior can be customized through settings variables, but it is\nexpected that the rest will be handled through subclassing.  Following from\nthis, people wishing to customize the finer details of Simple JWT's behavior\nare expected to become familiar with the library's classes and the\nrelationships there between.\n\nSafe defaults, predictability\n-----------------------------\n\nAssuming users of the library don't extensively and invasively subclass\neverything, Simple JWT's overall behavior shouldn't be surprising.  Settings\nvariable defaults should be safe.  Where authentication and authorization are\nconcerned, it should be hard to shoot oneself in the foot.\n\nInstallation\n------------\n\nSimple JWT can be installed with pip::\n\n  pip install djangorestframework_simplejwt\n\nThen, your django project must be configured to use the library.  In\n``settings.py``, add\n``rest_framework_simplejwt.authentication.JWTAuthentication`` to the list of\nauthentication classes::\n\n  REST_FRAMEWORK = {\n      ...\n      'DEFAULT_AUTHENTICATION_CLASSES': (\n          ...\n          'rest_framework_simplejwt.authentication.JWTAuthentication',\n      )\n      ...\n  }\n\nAlso, in your root ``urls.py`` file, include Simple JWT's default urls::\n\n  urlpatterns = [\n      ...\n      url(r'^api/', include('rest_framework_simplejwt.urls')),\n      ...\n  ]\n\nAPI views to obtain and refresh tokens should be available at\n``/api/token/obtain/`` and ``/api/token/refresh/``.\n\nUsage\n-----\n\nTo verify that Simple JWT is working, you can use curl to issue a couple of\ntest requests::\n\n  curl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"username\": \"davidattenborough\", \"password\": \"boatymcboatface\"}' \\\n    http://localhost:8000/api/token/obtain/\n\n  ...\n  {\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJjb2xkX3N0dWZmIjoi4piDIiwiZXhwIjoxMjM0NTYsInJlZnJlc2hfZXhwIjoxMjM1MDB9.8po9BafZiPi1aaWTKYCt3q0_2eLlWabj4nfQVYXLCK8\"}\n\nYou can use the returned token to prove authentication for a protected view::\n\n  curl \\\n    -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJjb2xkX3N0dWZmIjoi4piDIiwiZXhwIjoxMjM0NTYsInJlZnJlc2hfZXhwIjoxMjM1MDB9.8po9BafZiPi1aaWTKYCt3q0_2eLlWabj4nfQVYXLCK8\" \\\n    http://localhost:8000/api/some-protected-view/\n\nOr you can refresh the token if it is still refreshable::\n\n  curl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJjb2xkX3N0dWZmIjoi4piDIiwiZXhwIjoxMjM0NTYsInJlZnJlc2hfZXhwIjoxMjM1MDB9.8po9BafZiPi1aaWTKYCt3q0_2eLlWabj4nfQVYXLCK8\"}' \\\n    http://localhost:8000/api/token/refresh/\n\n  ...\n  {\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJjb2xkX3N0dWZmIjoi4piDIiwiZXhwIjoxMjM0ODAsInJlZnJlc2hfZXhwIjoxMjM1MDB9.tTXYxsumgb7Odj9NsAAVpSaNnkS8gfAh-yjEnlW0JiQ\"}\n\nSettings\n--------\n\nSome of Simple JWT's behavior can be customized through settings variables in\n``settings.py``::\n\n  from datetime import timedelta\n\n  ...\n\n  SIMPLE_JWT = {\n      'AUTH_HEADER_TYPE': 'Bearer',\n\n      'USER_ID_FIELD': 'id',\n      'USER_ID_CLAIM': 'user_id',\n\n      'TOKEN_LIFETIME': timedelta(days=1),\n      'TOKEN_REFRESH_LIFETIME': timedelta(days=7),\n\n      'SECRET_KEY': SECRET_KEY,  # Default to the django secret key\n  }\n\nAbove, the default values for these settings are shown.\n\n-------------------------------------------------------------------------------\n\nAUTH_HEADER_TYPE\n  The authorization header type that will be checked for views that require\n  authentication.  For example, a value of ``'Bearer'`` means that views\n  requiring authentication would look for a header with the following format:\n  ``Authorization: Bearer <token>``.\n\nUSER_ID_FIELD\n  The database field from the user model that will be included in generated\n  tokens to identify users.  It is recommended that the value of this setting\n  specifies a field which does not normally change once its initial value is\n  chosen.  For example, specifying a \"username\" or \"email\" field would be a\n  poor choice since an account's username or email might change depending on\n  how account management in a given service is designed.  This could allow a\n  new account to be created with an old username while an existing token is\n  still valid which uses that username as a user identifier.\n\nUSER_ID_CLAIM\n  The claim in generated tokens which will be used to store user identifiers.\n  For example, a setting value of ``'user_id'`` would mean generated tokens\n  include a \"user_id\" claim that contains the user's identifier.\n\nTOKEN_LIFETIME\n  A ``datetime.timedelta`` object which specifies how long a generated token is\n  valid.  This ``timedelta`` value is added to the current UTC time while a\n  token is being generated to obtain the token's \"exp\" claim value.  Once the\n  time specified by this \"exp\" claim has passed, a token will no longer be\n  valid for authorization and can no longer be refreshed.\n\nTOKEN_REFRESH_LIFETIME\n  A ``datetime.timedelta`` object which specifies how long a generated token\n  may be refreshed.  This ``timedelta`` value is added to the current UTC time\n  while a token is being generated to obtain the token's \"refresh_exp\" claim\n  value.  Once the time specified by this \"refresh_exp\" claim has passed, a\n  token can no longer be refreshed.  However, if the time specified by a\n  token's \"exp\" claim still has not passed, it can still be used for\n  authorization.\n\nSECRET_KEY\n  The secret key which is used to sign the content of generated tokens.  This\n  setting defaults to the value of the ``SECRET_KEY`` setting for the django\n  project.  Although this is the most reasonable default that Simple JWT can\n  provide, it is recommended that developers change this setting to a value\n  which is independent from the django project secret key.  This will make\n  changing the secret key used for tokens easier in the event that it is\n  compromised or a token exists which must be immediately invalidated.\n\nExperimental features\n---------------------\n\nJWTTokenUserAuthentication backend\n  The ``JWTTokenUserAuthentication`` backend's ``authenticate`` method does not\n  perform a database lookup to obtain a user instance.  Instead, it returns a\n  ``TokenUser`` instance which acts as a stateless user object backed only by a\n  validated token instead of a record in a database.  This can facilitate\n  developing single sign-on functionality between separately hosted Django apps\n  which all share the same token secret key.  To use this feature, add the\n  ``rest_framework_simplejwt.authentication.JWTTokenUserAuthentication``\n  backend (instead of the default ``JWTAuthentication`` backend) to the Django\n  REST Framework's ``DEFAULT_AUTHENTICATION_CLASSES`` config setting::\n\n    REST_FRAMEWORK = {\n        ...\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n            ...\n            'rest_framework_simplejwt.authentication.JWTTokenUserAuthentication',\n        )\n        ...\n    }\n\nAcknowledgements\n----------------\n\nThis project borrows code from the `Django REST Framework\n<https://github.com/encode/django-rest-framework/>`_ as well as concepts from\nthe implementation of another JSON web token library for the Django REST\nFramework, `django-rest-framework-jwt\n<https://github.com/GetBlimp/django-rest-framework-jwt>`_.  The licenses from\nboth of those projects have been included in this repository in the \"licenses\"\ndirectory.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davesque/django-rest-framework-simplejwt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangorestframework-simplejwt",
    "package_url": "https://pypi.org/project/djangorestframework-simplejwt/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djangorestframework-simplejwt/",
    "project_urls": {
      "Homepage": "https://github.com/davesque/django-rest-framework-simplejwt"
    },
    "release_url": "https://pypi.org/project/djangorestframework-simplejwt/1.5.1/",
    "requires_dist": [
      "django",
      "djangorestframework",
      "python-jose"
    ],
    "requires_python": "",
    "summary": "A minimal JSON Web Token authentication plugin for Django REST Framework",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15476226,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "582b104500e7638b5539240659834460a35017e11915a7c69ae95db7334a4be9",
        "md5": "e7614321057c0cf3b7c4eb64244d8939",
        "sha256": "301e76cef939ee391da203ca6ce63462690ec0eca1aa96d59b14470a4110b89a"
      },
      "downloads": -1,
      "filename": "djangorestframework_simplejwt-1.5.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e7614321057c0cf3b7c4eb64244d8939",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 19031,
      "upload_time": "2017-06-22T23:01:47",
      "upload_time_iso_8601": "2017-06-22T23:01:47.503065Z",
      "url": "https://files.pythonhosted.org/packages/58/2b/104500e7638b5539240659834460a35017e11915a7c69ae95db7334a4be9/djangorestframework_simplejwt-1.5.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "496e7b6d986c7809e6b85b1125130f58ac089719b27d0127c71c08570ccbdfad",
        "md5": "beb3386692e00f6c920646161f98edee",
        "sha256": "382517ed4f22ec796a9bf084f8ac20112511c586ce1973d34a3828d7aea25b27"
      },
      "downloads": -1,
      "filename": "djangorestframework_simplejwt-1.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "beb3386692e00f6c920646161f98edee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11561,
      "upload_time": "2017-06-22T23:01:49",
      "upload_time_iso_8601": "2017-06-22T23:01:49.374935Z",
      "url": "https://files.pythonhosted.org/packages/49/6e/7b6d986c7809e6b85b1125130f58ac089719b27d0127c71c08570ccbdfad/djangorestframework_simplejwt-1.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}