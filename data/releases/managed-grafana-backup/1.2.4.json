{
  "info": {
    "author": "author",
    "author_email": "ysde108@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Grafana Backup Tool\n\nA Python-based application to backup Grafana settings using the [Grafana API](https://grafana.com/docs/grafana/latest/http_api/).\n\nThe aim of this tool is to:\n1. Easily backup and restore Grafana.\n2. Have versioned backups`(date and time in file name)` for restoring and saving to cloud storage providers. Currently support\n   1. `Amazon S3`\n   2. `Azure Storage`\n   3. `GCP Cloud Storage` (Use service-account's credential file, [see here](https://cloud.google.com/storage/docs/reference/libraries#linux-or-macos))\n\n## Supported components\n* Folder\n* Folder Permissions\n* Dashboard (contains Alert)\n* Datasource\n* Alert Channel\n* Organization (Needs Basic Authentication (username and password, see [grafana doc](https://grafana.com/docs/grafana/latest/http_api/org/#admin-organizations-api))\n\t* You need to set `Admin's account and password` in `grafanaSettings.json`, or set the base64 encoded `admin account and password` in ENV `GRAFANA_BASIC_AUTH`. E.g `export GRAFANA_BASIC_AUTH=YWRtaW46YWRtaW4=`\n\t* Or Sets this ENV of the Grafana server `GF_USERS_ALLOW_ORG_CREATE=true`. see [grafana doc](https://grafana.com/docs/grafana/latest/http_api/org/#create-organization)\n* User (Needs Basic Authentication (username and password, see [grafana doc](https://grafana.com/docs/grafana/latest/http_api/org/#admin-organizations-api))\n\t* You need to set `Admin's account and password` in `grafanaSettings.json`, or set the base64 encoded `admin account and password` in ENV `GRAFANA_BASIC_AUTH`. E.g `export GRAFANA_BASIC_AUTH=YWRtaW46YWRtaW4=`\n\t* Grafana's api doesn't provide user's password when backing up, so the `default_password (which is in the grafanaSetting.json)` will be used when restoring.\n* Snapshots\n* Dashboard Versions (only backup, no restore)\n* Annotations\n\n**NOTE** The only supported `orgId` right now is `1`, the default organization will be backed up only!\n\n## Requirements\n* Bash\n* Python 2.7 or Python 3.x\n* Access to a Grafana API server.\n* A `Token` of an `Admin` role (see `Configuration` section below for more info)\n\n## Configuration\nThere are three ways to setup the configuration:\n\n1. Use `environment variables` to define the variables for connecting to a Grafana server.\n2. Use `hard-coded settings` in `conf/grafanaSettings.json` (this is the default settings file if not specified otherwise).\n3. Use `~/.grafana-backup.json` to define variables in json format.\n\n### Example Config\n* Check out the [examples](examples) folder for more configuration details\n\n**NOTE** If you use `environment variables`, you need to add the following to your `.bashrc` or execute once before using the tool (please change variables according to your setup):\n\n(`GRAFANA_HEADERS` is optional, use it if necessary. please see [#45](https://github.com/ysde/grafana-backup-tool/issues/45))\n\n```bash\n### Do not use a trailing slash on GRAFANA_URL\nexport GRAFANA_URL=http://some.host.org:3000\nexport GRAFANA_TOKEN=eyJrIjoidUhaU2ZQQndrWFN3RRVkUnVfrT56a1JoaG9KWFFObEgiLCJuIjoiYWRtaW4iLCJpZCI6MX0=\n\n# GRAFANA_HEADERS is optional\nexport GRAFANA_HEADERS=Host:some.host.org\n```\n\nTo create and obtain a `Token` for your Grafana server, please refer to the [official documentation](https://grafana.com/docs/grafana/latest/http_api/auth/).\n\n**NOTE** that you need to generate a `Token` with an `Admin` role for the backup to succeed, otherwise you will have potential permission issues.\n\n## Installation\n### Virtual environment (optional but recommended)\nCreate a virtualenv, you could using something like `pyenv` if you'd prefer\n```\nvirtualenv -p $(which python3) venv\nsource venv/bin/activate\n```\n\n### Installation using pypi\n```\npip install grafana-backup\n```\n\n### Installation using this repo\nFirst clone this repo\n```\ngit clone https://github.com/ysde/grafana-backup-tool.git\ncd grafana-backup-tool\n```\nInstallation works best using `pip`\n```\npip install .\n```\n\n## How to Use\n* First perform the **Configuration** and **Installation** sections as described above.\n* Use the `grafana-backup save` command to backup all your folders, dashboards, datasources and alert channels to the `_OUTPUT_` subdirectory of the current directory.\n\n***Example:***\n\n```bash\n$ grafana-backup save\n$ tree _OUTPUT_\n_OUTPUT_/\n└── 202006272027.tar.gz\n```\n\n* Use the `grafana-backup restore <archive_file>` command with a path to a previous backup to restore everything.\n\n**NOTE** this *may* result in data loss, by overwriting data on the server.\n\n***Example:***\n\n```bash\n$ grafana-backup restore _OUTPUT_/202006272027.tar.gz\n```\n\n## Docker\nReplace variables below to use the Docker version of this tool\n* `{YOUR_GRAFANA_TOKEN}`: Your Grafana site `Token`.\n* `{YOUR_GRAFANA_URL}`: Your Grafana site `URL`.\n* `{YOUR_BACKUP_FOLDER_ON_THE_HOST}`: The `backup folder` on the Grafana host machine.\n\n### Backup\n\nIf you decide to use a volume (-v) then you'll need to create the volume first with 1337 uid/gid ownership first, example:\n```\nmkdir /tmp/backup\nsudo chown 1337:1337 /tmp/backup\n```\n\n```\ndocker run --user $(id -u):$(id -g) --rm --name grafana-backup-tool \\\n           -e GRAFANA_TOKEN={YOUR_GRAFANA_TOKEN} \\\n           -e GRAFANA_URL={YOUR_GRAFANA_URL} \\\n           -e GRAFANA_ADMIN_ACCOUNT={YOUR_GRAFANA_ADMIN_ACCOUNT} \\\n           -e GRAFANA_ADMIN_PASSWORD={YOUR_GRAFANA_ADMIN_PASSWORD} \\\n           -e VERIFY_SSL={True/False} \\\n           -v {YOUR_BACKUP_FOLDER_ON_THE_HOST}:/opt/grafana-backup-tool/_OUTPUT_  \\\n           ysde:grafana-backup\n```\n\n***Example:***\n\n```\ndocker run --user $(id -u):$(id -g) --rm --name grafana-backup-tool \\\n           -e GRAFANA_TOKEN=\"eyJrIjoiNGZqTDEyeXNaY0RsMXNhbkNTSnlKN2M3bE1VeHdqVTEiLCJuIjoiZ3JhZmFuYS1iYWNrdXAiLCJpZCI6MX0=\" \\\n           -e GRAFANA_URL=http://192.168.0.79:3000 \\\n           -e GRAFANA_ADMIN_ACCOUNT=admin \\\n           -e GRAFANA_ADMIN_PASSWORD=adminpassword \\\n           -e VERIFY_SSL=False \\\n           -v /tmp/backup/:/opt/grafana-backup-tool/_OUTPUT_ \\\n           ysde:grafana-backup\n```\n\n***S3 Example:*** Set S3 configurations in `-e` or `grafanaSettings.json`([example](https://github.com/ysde/grafana-backup-tool/blob/master/examples/grafana-backup.example.json))\n```\n           -e AWS_S3_BUCKET_NAME=\"my-backups-bucket\" \\\n           -e AWS_S3_BUCKET_KEY=\"grafana-backup-folder\" \\\n           -e AWS_DEFAULT_REGION=\"us-east-1\" \\\n           -e AWS_ACCESS_KEY_ID=\"secret\" \\\n           -e AWS_SECRET_ACCESS_KEY=\"secret\" \\\n```\n\n***Azure Example:*** Set Azure configurations in `-e` or `grafanaSettings.json`([example](https://github.com/ysde/grafana-backup-tool/blob/master/examples/grafana-backup.example.json))\n```\n\t\t   -e AZURE_STORAGE_CONTAINER_NAME=\"azure-storage-container-name\" \\\n\t\t   -e AZURE_STORAGE_CONNECTION_STRING=\"azure-storage-connection-string\"\n```\n\n***GCS Example:*** Set GCS configurations in `-e` or `grafanaSettings.json`([example](https://github.com/ysde/grafana-backup-tool/blob/master/examples/grafana-backup.example.json))\n```\n\t\t   -e GCS_BUCKET_NAME=\"bucket-name\" \\\n\t\t   -e GOOGLE_APPLICATION_CREDENTIALS=\"credential-file-path\"\n```\n\n\n### Restore\n\n```\ndocker run --user $(id -u):$(id -g) --rm --name grafana-backup-tool \\\n           -e GRAFANA_TOKEN={YOUR_GRAFANA_TOKEN} \\\n           -e GRAFANA_URL={YOUR_GRAFANA_URL} \\\n           -e GRAFANA_ADMIN_ACCOUNT={YOUR_GRAFANA_ADMIN_ACCOUNT} \\\n           -e GRAFANA_ADMIN_PASSWORD={YOUR_GRAFANA_ADMIN_PASSWORD} \\\n           -e VERIFY_SSL={True/False} \\\n           -e RESTORE=\"true\" \\\n           -e ARCHIVE_FILE={THE_ARCHIVED_FILE_NAME} \\\n           -v {YOUR_BACKUP_FOLDER_ON_THE_HOST}:/opt/grafana-backup-tool/_OUTPUT_  \\\n           ysde:grafana-backup\n```\n\n***Example:***\n\n```\ndocker run --user $(id -u):$(id -g) --rm --name grafana-backup-tool \\\n           -e GRAFANA_TOKEN=\"eyJrIjoiNGZqTDEyeXNaY0RsMXNhbkNTSnlKN2M3bE1VeHdqVTEiLCJuIjoiZ3JhZmFuYS1iYWNrdXAiLCJpZCI6MX0=\" \\\n           -e GRAFANA_URL=http://192.168.0.79:3000 \\\n           -e GRAFANA_ADMIN_ACCOUNT=admin \\\n           -e GRAFANA_ADMIN_PASSWORD=adminpassword \\\n           -e VERIFY_SSL=False \\\n           -e RESTORE=\"true\" \\\n           -e ARCHIVE_FILE=\"202006280247.tar.gz\" \\\n           -v /tmp/backup/:/opt/grafana-backup-tool/_OUTPUT_ \\\n           ysde:grafana-backup\n```\n\n### Building\nYou can build the docker image simply by executing `make` in the root of this repo. The image will get tagged as `ysde:grafana-backup`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ysde/grafana-backup-tool",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "managed-grafana-backup",
    "package_url": "https://pypi.org/project/managed-grafana-backup/",
    "platform": null,
    "project_url": "https://pypi.org/project/managed-grafana-backup/",
    "project_urls": {
      "Homepage": "https://github.com/ysde/grafana-backup-tool"
    },
    "release_url": "https://pypi.org/project/managed-grafana-backup/1.2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python-based application to backup Grafana settings using the Grafana API",
    "version": "1.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13934449,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffe000c2fe8cb62ee05e777d2fbfcdb41d65cb4fbf6fe492f4e4297a2975a4e3",
        "md5": "8a1df4acc7a8babe779ae38476734ae4",
        "sha256": "866ac6cfcf7c6bba7b74d90c20f48c9faa60c9e644f589bcbd78442e76f96b39"
      },
      "downloads": -1,
      "filename": "managed-grafana-backup-1.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "8a1df4acc7a8babe779ae38476734ae4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26655,
      "upload_time": "2022-05-25T14:46:40",
      "upload_time_iso_8601": "2022-05-25T14:46:40.810305Z",
      "url": "https://files.pythonhosted.org/packages/ff/e0/00c2fe8cb62ee05e777d2fbfcdb41d65cb4fbf6fe492f4e4297a2975a4e3/managed-grafana-backup-1.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}