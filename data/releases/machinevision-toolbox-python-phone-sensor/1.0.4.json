{
  "info": {
    "author": "Callum Hays",
    "author_email": "callumjhays@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# machinevision-toolbox-python.phone-sensor\n\nThis package provides a `PhoneSensor` class which hosts a webapp through which you can easily retrieve camera and orientation data (if supported) from a smart-phone for example.\n\nFor best results, use with the latest possible version of Chrome on Android.\n\n## Quick start\n\nInstall with `pip`:\n\n```bash\npip install -U --force-reinstall machinevision-toolbox-python.phone-sensor\n```\n\nExample Code:\n\n```python\nfrom phone_sensor import PhoneSensor\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\n# Hosts a webserver in a background thread.\n# And display a QR code link to the app\nwith PhoneSensor(qrcode=True) as phone:\n    # wait for button press to snap a photo\n    bgr, time = phone.grab(button=True)\n    # get device orientation as a Quaternion\n    imu_data = phone.imu()\n\n    plt.subplot(1, 2, 1)\n    # img is bgr (opencv style), matplotlib uses RGB - so flip\n    rgb = np.flip(bgr, axis=2)\n    plt.imshow(rgb)\n    plt.title(f\"t = {time}\")\n\n    plt.subplot(1, 2, 2)\n    plt.bar(['x', 'y', 'z', 'w'], imu_data.quaternion)\n    plt.title(f\"t = {imu_data.unix_timestamp}\")\n    plt.show()\n```\n\nwhich will output:\n\n![example](docs/example.png)\n\n<table>\n<tr>\n<td>\nThe above code will create an ASCII QRcode in your terminal. Scanning it with a smartphone will take you to a webapp hosted by the `PhoneSensor`. Due to browser API security concerns, the app must be served over HTTPS, which in this case requires a self-signed certificate. Therefore you must accept the certificate before accessing the app (don't be scared!). For example, on Firefox Android:\n</td>\n<td>\n<img src=\"docs/selfsigned-warning.webp\" alt=\"drawing\" width=\"800\"/>\n</td>\n</tr>\n</table>\n\nOnce done, you should be met with the main UI, which looks like:\n\n![UI screenshot](docs/screenshot.png)\n\nThe output `img` is a `width x height x 3` BGR `np.ndarray` like you'd expect from `machinevisiontoolbox` or `opencv-python`.\n\n## Documentation\n\n### PhoneSensor()\n\n```python\nclass phone_sensor.PhoneSensor(): ...\n\ndef PhoneSensor.__init__(self, *, qrcode=False, host='0.0.0.0', port=8000,\n                         logger=logging.getLogger('mvt.phone_sensor'), log_level=logging.WARN,\n                         proxy_client_from=None)\n```\n\n- **Parameters**\n\n  - **qrcode** (`bool`) – True to output a QRCode in the terminal window that points to the server accessible via LAN, defaults to False\n\n  - **host** (`str`) – Which hostname/ip to host the server on, defaults to “0.0.0.0”\n\n  - **port** (`int`) – Which port to host the server on, defaults to 8000\n\n  - **logger** (`Logger`) – A standard logging.Logger for debugging and general log information, defaults to logging.getLogger(‘mvt.phone_sensor’)\n\n  - **log_level** (`int`) – Log level for the aforementioned logger, defaults to logging.WARN\n\n  - **proxy_client_from** (`Optional`[`str`]) – A separate host from which to proxy the web client, defaults to None.\n    Mainly for development purposes, using a hot-reloaded webpack server for the client\n    rather than the one shipped with your pip install\n\n---\n\n### PhoneSensor.close()\n\n```python\ndef PhoneSensor.close(self)\n```\n\nClose the server and relinquish control of the port.\nUse of PhoneSensor as a context manager is preferred to this where suitable.\nMay be called automatically by the garbage collector.\n\n---\n\n### PhoneSensor.grab()\n\n```python\ndef PhoneSensor.grab(self, cam='back', *, resolution=(640, 480), button=False, wait=None,\n                     encoding='webp', quality=90) -> Tuple[np.ndarray, float]\n```\n\nGrab an image from the first/currently connected webapp client\n\n- **Parameters**\n\n  - **cam** (`Literal`[‘front’, ‘back’]) – Default camera to use, defaults to ‘back’.\n    Most smartphones have a ‘front’ (the side with the touchscreen) and a ‘back’ camera.\n    This may be temporarily overridden through the menu on the client.\n\n  - **resolution** (`Tuple`[`int`, `int`]) – The desired resolution (width, height) of the photo, defaults to (640, 480).\n    Choosing lower values will increase performance, allowing you to take more photos in quicker succession.\n    Note this is not necessarily respected - It’s up to the browser’s implementation which resolution\n    it chooses, with this value being the ‘ideal’. For example, if you ask for (999999, 480)\n    the browser might choose (640, 480) instead.\n\n  - **button** (`bool`) – True to wait for button press, defaults to False.\n\n  - **wait** (`Optional`[`float`]) – Minimum amount of time to wait since previous photo before taking a new one, defaults to None.\n    Incompatible with the button arg.\n\n  - **encoding** (`Literal`[‘jpeg’, ‘png’, ‘webp’, ‘bmp’]) – The encoding mimetype for the image, defaults to ‘webp’.\n    In order of most to least performance, the recommended options are: [‘webp’, ‘jpeg’, ‘png’, ‘bmp’].\n    ‘webp’ and ‘jpeg’ are lossy compressions, so they will have differing compression artifacts.\n    ‘png’ and ‘bmp’ are lossless. ‘bmp’ is essentially “no encoding” so you may use this if\n    network is not a bottleneck (which it typically is). Otherwise ‘png’ is also lossless.\n\n  - **quality** (`int`) – The quality (within (0, 100]) at which to encode the image, defaults to 90.\n    Lower may slightly increase performance at the cost of image quality, however,\n    the effect is typically insignificant. Does nothing for lossless encodings such as ‘png’.\n\n- **Raises**\n\n  **PhoneSensor.ClientDisconnect** – If the device disconnects from the app after receiving the command.\n\n- **Return type**\n\n  `Tuple`[`ndarray`, `float`]\n\n- **Returns**\n\n  An (img, timestamp) tuple,\n  where img is a numpy.ndarray in the format you would expect from OpenCV (h x w x bgr)\n  and timestamp is a unix timestamp from the client device (seconds since epoch)\n\n---\n\n### PhoneSensor.imu()\n\n```python\ndef PhoneSensor.imu(self, wait=None) -> ImuDataFrame\n```\n\nRetrieve orientation and motion data from a capable device.\n\n- **Parameters**\n\n  **wait** (`Optional`[`float`]) – Minimum amount of time to wait since previous reading before taking a new one, defaults to None.\n\n- **Raises**\n\n  - **PhoneSensor.ClientDisconnect** – If the device disconnects from the app after receiving the command.\n\n  - **PhoneSensor.DataUnavailable** – if the device is incapable of providing the data (eg. desktop pc),\n    or if the browser disallows it, either due to app permissions or if it does not support the features.\n\n- **Return type**\n\n  `PhoneSensor.ImuDataFrame`\n\n- **Returns**\n\n  An ImuDataFrame, with the orientation and IMU sensor data.\n\n---\n\n### PhoneSensor.ImuDataFrame\n\n```python\nclass PhoneSensor.ImuDataFrame:\n    unix_timestamp: float\n    quaternion: Tuple[float, float, float, float] # (x, y, z, w)\n    # if supported by the browser (rare)\n    accelerometer: Optional[Tuple[float, float, float]] # (x, y, z)\n    gyroscope: Optional[Tuple[float, float, float]] # (x, y, z)\n    magnetometer: Optional[Tuple[float, float, float]] # (x, y, z)\n\n```\n\nA collection of sensor readings taken from the phone and the time at which it was recorded. Includes raw accelerometer, magnetometer and gyroscope tuples if supported by the browser (generally only new versions of Android Chrome).\n\n## Contributing\n\nPRs welcome! The stack is Python3.6 and Typescript4.1 & CreateReactApp4.0\n\n### Development Install\n\nFirst, clone this repo and install dependencies\n\n```bash\nnpm install\npip install -e .\n```\n\n### Running in Development Mode\n\n1. Run the dev-server (and keep it running):\n\n```bash\nnpm start\n```\n\n2. Create a PhoneSensor in proxy mode:\n\n```python\n>>> from phone_sensor import PhoneSensor\n>>> phone = PhoneSensor(qrcode=True, proxy_client_from=\"localhost:3000\")\n>>> phone.grab(button=True)\n```\n\nor just run the `python examples/devmode.py`\n\nThen click the link in terminal to test the app\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CallumJHays/machinevision-toolbox-python.phone-sensor",
    "keywords": "python webapp imu motion camera machinevision computervision opencv",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "machinevision-toolbox-python.phone-sensor",
    "package_url": "https://pypi.org/project/machinevision-toolbox-python.phone-sensor/",
    "platform": "",
    "project_url": "https://pypi.org/project/machinevision-toolbox-python.phone-sensor/",
    "project_urls": {
      "Documentation": "https://github.com/CallumJHays/machinevision-toolbox-python.phone-sensor",
      "Homepage": "https://github.com/CallumJHays/machinevision-toolbox-python.phone-sensor",
      "Source": "https://github.com/CallumJHays/machinevision-toolbox-python.phone-sensor",
      "Tracker": "https://github.com/CallumJHays/machinevision-toolbox-python.phone-sensor/issues"
    },
    "release_url": "https://pypi.org/project/machinevision-toolbox-python.phone-sensor/1.0.4/",
    "requires_dist": [
      "pyqrcode",
      "websockets",
      "numpy",
      "typing-extensions",
      "Pillow ; extra == 'pil'",
      "matplotlib ; extra == 'matplotlib'",
      "opencv-python ; extra == 'opencv'"
    ],
    "requires_python": ">=3.6",
    "summary": "PhoneSensor for machinevisiontoolbox. Get camera and IMU data from a camera remotely with Python",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9769162,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "560b72ad568f4244d9f2509dc38a90f328e2a647b4f9ba77b674b2513f81009c",
        "md5": "e302c1ffcf0615aa97d89155b9cc718d",
        "sha256": "d602ae1518206ab30562676fd2698204057caa65657460fb0efa804a8e876d21"
      },
      "downloads": -1,
      "filename": "machinevision_toolbox_python.phone_sensor-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e302c1ffcf0615aa97d89155b9cc718d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 474528,
      "upload_time": "2021-03-15T02:03:24",
      "upload_time_iso_8601": "2021-03-15T02:03:24.869370Z",
      "url": "https://files.pythonhosted.org/packages/56/0b/72ad568f4244d9f2509dc38a90f328e2a647b4f9ba77b674b2513f81009c/machinevision_toolbox_python.phone_sensor-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "717a51d868f52d80115123f4d677c2cb4bccabc8bb7997a19fc79cf29adbbb0a",
        "md5": "f3386f51926b9db63a82075e57232b51",
        "sha256": "1e13e52bc47e4bf03be076bf1e67e2ddc3a3b6519512c466f01871594a72103b"
      },
      "downloads": -1,
      "filename": "machinevision-toolbox-python.phone-sensor-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "f3386f51926b9db63a82075e57232b51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11325,
      "upload_time": "2021-03-15T02:03:26",
      "upload_time_iso_8601": "2021-03-15T02:03:26.074150Z",
      "url": "https://files.pythonhosted.org/packages/71/7a/51d868f52d80115123f4d677c2cb4bccabc8bb7997a19fc79cf29adbbb0a/machinevision-toolbox-python.phone-sensor-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}