{
  "info": {
    "author": "Ralf Gerlich",
    "author_email": "ralf@ralfgerlich.biz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": ".. image:: https://travis-ci.com/ralfgerlich/modypy.svg?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.com/ralfgerlich/modypy\n\n.. image:: https://codecov.io/gh/ralfgerlich/modypy/branch/master/graph/badge.svg\n    :alt: Cove Coverage\n    :target: https://codecov.io/gh/ralfgerlich/modypy\n\n.. image:: https://www.code-inspector.com/project/17342/score/svg\n    :alt: Code Quality Store\n\n.. image:: https://www.code-inspector.com/project/17342/status/svg\n    :alt: Code Grade\n\nMoDyPy (rhymes with \"modify\") is a Python framework for *Mo*\\ delling *dy*\\ namic\nsystems in *Py*\\ thon. The framework provides methods for describing continous-time\nlinear and non-linear systems in\n`state-space representation <https://en.wikipedia.org/wiki/State-space_representation>`_.\nIt was originally inspired by `simupy <https://github.com/simupy/simupy>`_\ndeveloped by Ben Margolis, but has a completely different philosophy and\narchitecture than simupy.\n\nThe basic components of a dynamic system in MoDyPy are states and signals.\nStates represent the internal state of the system, and signals represent the\nvalues calculated based on the state. Ports can be connected to signals, so that\nreusable blocks with input and output ports can be easily built.\n\nFor example, a simple combination of a DC-motor and a propeller can be built\nas follows:\n\n.. code-block:: python\n\n    import matplotlib.pyplot as plt\n\n    from modypy.blocks.aerodyn import Propeller\n    from modypy.blocks.elmech import DCMotor\n    from modypy.blocks.sources import constant\n    from modypy.model import System\n    from modypy.simulation import Simulator\n    from modypy.utils.uiuc_db import load_static_propeller\n\n    # Import propeller data from UIUC database\n    thrust_coeff, torque_coeff = \\\n        load_static_propeller(\n            'volume-1/data/apcsf_8x3.8_static_2777rd.txt',\n            interp_options={\n                \"bounds_error\": False,\n                \"fill_value\": \"extrapolate\"\n            }\n        )\n\n    # Create the Engine\n    system = System()\n    dcmotor = DCMotor(system,\n                      Kv=789.E-6,\n                      R=43.3E-3,\n                      L=1.9E-3,\n                      J=5.284E-6)\n    propeller = Propeller(system,\n                          thrust_coeff=thrust_coeff,\n                          power_coeff=torque_coeff,\n                          diameter=8*25.4E-3)\n\n    # Connect the signals\n    propeller.torque.connect(dcmotor.external_torque)\n    dcmotor.speed_rps.connect(propeller.speed_rps)\n\n    # Create the sources\n    voltage = constant(system, value=3.5)\n    density = constant(system, value=1.29)\n\n    # Connect the sources\n    voltage.connect(dcmotor.voltage)\n    density.connect(propeller.density)\n\n    # Run the simulator\n    simulator = Simulator(system=system, start_time=0)\n    simulator.run_until(t_bound=0.5)\n\n    # Plot the results\n    plt.plot(simulator.result.time, simulator.result.signals[:, propeller.thrust.signal_slice])\n    plt.title(\"Propeller Simulation\")\n    plt.xlabel(\"Time (s)\")\n    plt.ylabel(\"Thrust (N)\")\n    plt.show()\n\n\n.. image:: docs/propeller.png\n\nMain Features\n=============\n\n- Simple architecture based on states, signals and connectible ports\n- Enables hierarchical modelling\n- Allows the establishment of reusable building blocks\n- Simulator for continuous-time, linear and non-linear systems\n- Steady state determination and linearization\n- Library of standard blocks, including 6-degree-of-freedom rigid body motion\n- Tested for 100% statement and branch coverage\n\nInstallation\n============\n\nMoDyPy is available via the *pip* installer:\n\n.. code-block:: bash\n\n  $ pip install modypy\n\nTo install the development version,\n\n.. code-block:: bash\n\n  $ git clone https://github.com/ralfgerlich/modypy.git\n  $ pip install -e modypy\n\nExamples\n========\n\nCheck out the examples in the ``examples`` directory:\n\n``dcmotor.py``\n    A simple example using a DC-motor driving a propeller.\n``rigidbody.py``\n    Some rigid-body simulation using moments and forces showing an object\n    moving in a circle with constant velocity and turn-rate.\n``bouncing_ball.py``\n    An example modelling a bouncing ball, demonstrating the use of events and\n    event-handler functions.\n``quadcopter_trim.py``\n    A larger example showcasing the steady-state-determination and linearisation\n    of complex systems, in this case for a quadrocopter frame with four\n    DC-motors with propellers.\n\nThey can be run from the sources using, e.g.,\n\n.. code-block:: bash\n\n  $ pip install matplotlib\n  $ python examples/bouncing_ball.py\n\nNote that some of the examples require ``matplotlib`` to run and display the\nresults.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ralfgerlich/simtree",
    "keywords": "",
    "license": "BSD 2-clause \"Simplified\" License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modypy",
    "package_url": "https://pypi.org/project/modypy/",
    "platform": "",
    "project_url": "https://pypi.org/project/modypy/",
    "project_urls": {
      "Homepage": "https://github.com/ralfgerlich/simtree"
    },
    "release_url": "https://pypi.org/project/modypy/1.0/",
    "requires_dist": [
      "numpy (>=1.18.1)",
      "scipy (>=1.5.4)"
    ],
    "requires_python": ">=3.6",
    "summary": "A framework for hierarchical modelling and simulation of dynamic systems",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10581390,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e443a358c5e0c1ce25121af13f917b40aa76b00cb54b59503221c803d53d503",
        "md5": "90add373d45e9ded8a09ca608dc033b6",
        "sha256": "4fb014cadf9784468a2f74a707fbae44722781898d719f2f050b77f31fa2b334"
      },
      "downloads": -1,
      "filename": "modypy-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "90add373d45e9ded8a09ca608dc033b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 30389,
      "upload_time": "2021-01-06T19:37:55",
      "upload_time_iso_8601": "2021-01-06T19:37:55.050816Z",
      "url": "https://files.pythonhosted.org/packages/1e/44/3a358c5e0c1ce25121af13f917b40aa76b00cb54b59503221c803d53d503/modypy-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "818d81a1f0996d60a3927920ed4e25d933c501abc5c3427578a9a70cd89a5d75",
        "md5": "bd75241c1968dd192bf773d27b16fcdf",
        "sha256": "e1dc885f1634581e2540fdb0fc550814ee73e1a7a749b595f61447ce8212a46f"
      },
      "downloads": -1,
      "filename": "modypy-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bd75241c1968dd192bf773d27b16fcdf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18930,
      "upload_time": "2021-01-06T19:37:56",
      "upload_time_iso_8601": "2021-01-06T19:37:56.096701Z",
      "url": "https://files.pythonhosted.org/packages/81/8d/81a1f0996d60a3927920ed4e25d933c501abc5c3427578a9a70cd89a5d75/modypy-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}