{
  "info": {
    "author": "celsius narhwal",
    "author_email": "hello@celsiusnarhwal.dev",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# loctocat\n\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/loctocat?logo=pypi&logoColor=white&style=for-the-badge)\n[![PyPI](https://img.shields.io/pypi/v/loctocat?color=green&logo=pypi&style=for-the-badge&logoColor=white)](https://pypi.org/project/loctocat)\n![GitHub release (latest SemVer including pre-releases)](https://img.shields.io/github/v/release/celsiusnarhwal/loctocat?color=orange&include_prereleases&label=latest%20release&logo=github&style=for-the-badge)\n[![PyPI - License](https://img.shields.io/pypi/l/loctocat?color=03cb98&style=for-the-badge)](https://github.com/celsiusnarhwal/loctocat/blob/HEAD/LICENSE.md)\n\nlocatocat brings simple yet flexible OAuth 2.0 device flow authentication to Python. It has built-in asyncio support\nand even predefined authenticators for popular services. Plus, it's fully compliant with\n[RFC 8628](https://tools.ietf.org/html/rfc8628), making it compatible with any OAuth2-supporting service that\n(correctly) implements the standard.\n\n## Installation\n\n```bash\npip install loctocat\n```\n\n## Basic Usage\n\n### The `Authenticator` Class\n\nEvery authentication flow starts with loctocat's `Authenticator` class.\n\n```python\nfrom loctocat import Authenticator\n\nauthenticator = Authenticator(\n    client_id=\"your_client_id\",\n    auth_url=\"https://example.com/oauth2/authorize\",\n    token_url=\"https://example.com/oauth2/token\",\n    scopes=[\"list\", \"of\", \"scopes\"],\n)\n```\n\nIt's pretty simple â€” just instantiate the class with your client ID, authorization URL (where you'll get your device\nand user codes), token URL (where you'll poll the authorization server for an access token), and a list of any scopes\nyou need.\n\nOnce you've got an `Authenticator`, getting an access token is as simple as:\n\n```python\ntoken = authenticator.authenticate()\n```\n\nWhoa. That was easy.\n\n`Authenticator.authenticate()` will, in order:\n\n1. Obtain device and user codes from the authorization server\n2. Prompt the user to visit the verficiation URL and enter the user code\n3. Poll the authorization server for an access token\n4. Return the access token as a string\n\nHere's an example of using `Authenticator` to authenticate with GitHub:\n\n```python\n# https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#device-flow\n\nfrom loctocat import Authenticator\n\nauthenticator = Authenticator(\n    client_id=\"github_client_id\",  # Replace this with your app's actual client ID, obviously.\n    auth_url=\"https://github.com/login/device/code\",\n    token_url=\"https://github.com/login/oauth/access_token\",\n    scopes=[\"repo\"],  # https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps\n)\n\ntoken = authenticator.authenticate()\n```\n\nLike I said, easy. Unless you're building an asynchronous application, in which case this doesn't work at all, since\n`Authenticator.authenticate()` is a blocking call. Fortunately, loctocat has you covered.\n\n### The `AsyncAuthenticator` Class\n\n`AsyncAuthenticator` is a subclass of `Authenticator` that functions exactly the same except all its methods are\nasynchronous (and therefore must be called with `await`). Here's an example of `AsyncAuthenticator` in action:\n\n```python\nfrom loctocat import AsyncAuthenticator\n\nauthenticator = AsyncAuthenticator(\n    client_id=\"your_client_id\",\n    auth_url=\"https://example.com/oauth2/authorize\",\n    token_url=\"https://example.com/oauth2/token\",\n    scopes=[\"list\", \"of\", \"scopes\"],\n)\n\ntoken = await authenticator.authenticate()\n```\n\nWhoa. That was easy.\n\n`AsyncAuthenticator.authenticate()` will, in orâ€”wait, I'm getting dÃ©jÃ  vu.\n\n## Advanced Usage\n\nMaybe `Authenticator.authenticate()` is too simplistic for you. Maybe you'd rather, I don't know,\nhandle the user-facing authentication prompt yourself, or control when loctocat starts polling for access tokens.\nFortunately, locotcat has you covered.\n\n(Keep in mind that `AsyncAuthenticator` is a subclass of `Authenticator` and inherits all of its methods and\nattributes.)\n\n### `Authenticator.ping()`\n\n`Authenticator.ping()` requests device and user codes from the authorization server, returning a `LoctocatAuthInfo`\nobject that looks like this:\n\n```py\nclass LoctocatAuthInfo:\n    device_code: str\n    user_code: str\n    verification_uri: str\n    expires_in: int\n    interval: int\n```\n\nPretty self-explanatory. You can do whatever you want with this information (aside from change it\nâ€” `LoctocatAuthInfo`'s attributes are read-only). For example, you could prompt the user with some custom text\ncontaining the user code and verification URI:\n\n```python\nauth_info = authenticator.ping()\n\nprint(f\"Check it out, yo! This is some epic text telling YOU to go {auth_info.verification_uri} and enter {auth_info.user_code}! Swag!\")\n```\n\n### `Authenticator.poll()`\n\n`Authenticator.poll()` polls the authorization server for an access token, returning it as a string. You **don't**\nneed to pass the `LoctocatAuthInfo` object returned by `Authenticator.ping()` to `Authenticator.poll()` â€” the\nauthorization info is automatically remembered by `Authenticator`. All you have to do is call the method:\n\n```python\n# Authenticator.ping() must have been called on the Authenticator object already or this will not work.\n\ntoken = authenticator.poll()\n```\n\nWhoa. That was easy.\n\n(Fun fact: `Authenticator.authenticate()` is just a wrapper around `ping()` and `poll()`.)\n\n## Pro Usage\n\nMaybe [Advanced Usage](#advanced-usage) isn't advanced enough for you. Maybe you're working with an authorization\nserver that requires parameters beyond those defined by `Authenticator`. Maybe you want to customize the prompts and\nmessages displayed by `Authenticator.authenticate()` without having to use `Authenticator.ping()` and\n`Authenticator.poll()`. Maybe loctocat has a predefined authenticator for a service you like, and you want to use it.\nUnfortunately, loctocat doesn't have you covered.\n\n...\n\nOkay, loctocat actually does have you covered, but that stuff is the domain of loctocat's unfinished documentation\nsite. Emphasis on unfinished. It's not finished yet.\n\nFortunately, loctocat has you covered. loctocat's a pretty small library and it's public modules and classes are all\nproperly documented in the source code, so you're welcome to learn by example(?) and take a look around.\n\nOr you could wait until I finish the documentation site. I'm not your mother.\n\n## FAQ\n\nMaybe you have questions about loctocat that haven't been answered by the rest of this README. Maybe you just want to see me talk to\nmyself for like, two paragraphs. Fortunately, loctocat has you covered.\n\n### Q: loctowhat now\n\nA: Lock + [Octocat](https://octodex.github.com). loctocat was born out of my need for a Python library that implemented\nOAuth 2.0 device flow authentication for GitHub.\n\n### Q: I can just do this with requests-oauthlib or [INSERT OAUTH LIBRARY HERE] and those are like wayyyy more popular and tested so ummmm owned much?\n\nA: Ratio.\n\n### Q: loctocat isn't working with [INSERT SERVICE HERE] and I'm FRUSTRATED AAAAGGGGGGHHHHH\n\nA: loctocat is compliant with the OAuth 2.0 Device Authorization Grant standard so it's probably the service's fault.\nMake sure the service actually does support the device flow and is generally compliant with RFC 8628. If you're sure\nloctocat is the problem, [open an issue](https://github.com/celsiusnarhwal/loctocat/issues/new).\n\n### Q: oh my god thank you I've been looking for a library like this forever you have no idea\n\nA: You're very welcome. ðŸ™‚\n\n## License\n\nIn an age where developers must take great caution not to tread on the intellectual property of others, you must be\nhoping that a such an incredible library is made available under a permissive license. Fortunately,\nloctocat has you covered.\n\nloctocat is licensed under the [MIT License](https://github.com/celsiusnarhwal/loctocat/blob/HEAD/LICENSE.md).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/celsiusnarhwal/loctocat",
    "keywords": "oauth,oauth2,authentication,device-flow,asyncio",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "loctocat",
    "package_url": "https://pypi.org/project/loctocat/",
    "platform": null,
    "project_url": "https://pypi.org/project/loctocat/",
    "project_urls": {
      "Homepage": "https://github.com/celsiusnarhwal/loctocat",
      "Repository": "https://github.com/celsiusnarhwal/loctocat"
    },
    "release_url": "https://pypi.org/project/loctocat/1.0.1/",
    "requires_dist": [
      "requests (>=2.28.1,<3.0.0)",
      "oauthlib (>=3.2.2,<4.0.0)",
      "halo (>=0.0.31,<0.0.32)",
      "termcolor (>=2.1.1,<3.0.0)",
      "aiohttp (>=3.8.3,<4.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Simple yet flexible OAuth 2.0 device flow authentication for Python",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15894223,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f4b1ca046d00ef85d05c6519000e8f5a43dc11bfa40d15e0d53b4e69b147862",
        "md5": "76692b7ca328386d63c91b2dae732ded",
        "sha256": "ac4170800024addfd7a0246b7eae644f6e534ac9107fa5d3c3585a488933abe2"
      },
      "downloads": -1,
      "filename": "loctocat-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76692b7ca328386d63c91b2dae732ded",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 13000,
      "upload_time": "2022-11-24T12:59:12",
      "upload_time_iso_8601": "2022-11-24T12:59:12.574659Z",
      "url": "https://files.pythonhosted.org/packages/9f/4b/1ca046d00ef85d05c6519000e8f5a43dc11bfa40d15e0d53b4e69b147862/loctocat-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb893f14749e7410cc03d4b47f02c49dcf10471e489de2413f290e39e0725973",
        "md5": "900195f5fddb064b7f956eabc1cce0ca",
        "sha256": "f1a391f3458fdfa60205ec67afc51c079b2308c97a6264ae98187018ea53f037"
      },
      "downloads": -1,
      "filename": "loctocat-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "900195f5fddb064b7f956eabc1cce0ca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 11178,
      "upload_time": "2022-11-24T12:59:13",
      "upload_time_iso_8601": "2022-11-24T12:59:13.947408Z",
      "url": "https://files.pythonhosted.org/packages/eb/89/3f14749e7410cc03d4b47f02c49dcf10471e489de2413f290e39e0725973/loctocat-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}