{
  "info": {
    "author": "Matt Pizzimenti",
    "author_email": "mjpizz+metamake@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Description\n===========\n\nMetamake **is a simple way to define common tasks** and execute those tasks by\nname, similar to Rake.  Metamake **is not** a dependency-tracking build tool\nlike Make, ant, qmake, SCons, Visual Studio, or XCode.  Metamake is used\n**with** these build tools to orchestrate complex builds that work in a\ncross-platform fashion.\n\nUsage\n=====\nUsing Metamake is as easy as creating a 'Makefile.py' in your project\ndirectory::\n\n    from metamake import task, shell, path\n\n    @task\n    def build()\n        \"\"\"builds the widget\"\"\"\n        shell(\"qmake proj.pro -o Makefile.proj && make -f Makefile.proj\")\n        path(\"src/headers\").copytree(\"dist/include\")\n\nOn the commandline, you can then type ``metamake ls`` to see a listing\nof all Metamake tasks defined in your Makefile.py, with their docstrings\nhelpfully listed to describe the purpose of that task.\n\nAdvanced Features\n=================\n\nBackwards-compatibility with Make\n---------------------------------\nYou will notice that whenever you run Metamake, a \"Makefile\" will be\ncreated in your working directory that contains a bootstrapped version of\nMetamake inside.  This allows anybody to build your project without needing\nMetamake to be installed. With the bootstrapped Makefile, you can type\n``make <args>`` to achieve the same effect as ``metamake <args>``.  Whenever you\nupdate Metamake on your system, these bootstrapped Makefiles will be updated\nautomatically next time you execute Metamake for that project.  Commit these\nMakefiles to your repository so that other people can check out your project\nand build it without installing Metamake.\n\nEasy Commandline Flag Definition\n--------------------------------\nFinally, Metamake allows you to define commandline flags that can be passed\ninto your application.  These flags will work regardless of whether you use\nthe 'metamake' tool or the bootstrapped Makefile::\n\n    from metamake import task, shell, path, Flag\n\n    Flag(\"cleanfirst\").explain(\"set this flag to 'true' to do a clean build\")\n\n    @task\n    def build()\n        \"\"\"builds the widget\"\"\"\n        if Flag(\"cleanfirst\").value is \"true\":\n            clean()\n        shell(\"qmake\")\n\n    @task\n    def clean()\n        \"\"\"cleans the widget\"\"\"\n        shell(\"rm -rf build\")\n\nWhen you execute ``metamake ls`` on the commandline, you will see these flags\nlisted underneath all of the task definitions, with the explanation that\nyou provided as documentation.\n\nReadable, Cross-platform Filesystem Manipulation\n------------------------------------------------\nJason Orendorff's excellent `path.py <http://pypi.python.org/pypi/path.py/>`_\nlibrary unifies all of the cross-platform Python filesystem manipulations\nunder a single object called **path**::\n\n    from metamake import task, path\n\n    @task\n    def build():\n        \"\"\"builds the widget\"\"\"\n        path(\"dist/include\").makedirs()\n        path(\"src/widget\").copytree(\"dist/include/widget\")\n        for header_file in path(\"src/gadget\").listdir(\"*.h\"):\n            header_file.copyfile(\"dist/include/gadget/%%s\" %% header_file.basename())\n\nMetamake extends Jason's library by providing console logging for file operations.\nThis makes it easy to see the manipulations that are happening to your filesystem\non the commandline.\n\nExternal Dependency Tracking (alpha-quality)\n--------------------------------------------\nMetamake also supports the concept of Dependencies.  This allows you to specify\nexternal dependencies for your project, without setting up messy hierarchical\nbuilds using svn:externals or similar tools.  Every Dependency has three\nmethods:  ``update``, ``build``, and ``clean``::\n\n    from metamake import task, shell, Dependency\n\n    gadgetlib = Dependency(\n        url = \"svn://myrepo.com/gadgetlib\",\n        path = \"~/.gadgetlib\",\n        build_cmd = \"make\",\n        clean_cmd = \"make clean\",\n    )\n\n    @task\n    def build()\n        \"\"\"builds the widget\"\"\"\n        gadgetlib.update()\n        gadgetlib.build()\n        shell(\"qmake\")\n\n*NOTE:* in this example, build_cmd and clean_cmd are optional",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/metamake/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metamake",
    "package_url": "https://pypi.org/project/metamake/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/metamake/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/metamake/"
    },
    "release_url": "https://pypi.org/project/metamake/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Metamake is a dead-simple task-based automation tool written in Python.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 794715,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d1ee26002726bc8b8befb6fcbb1128737edd5fdafa1f3e2cf5c6b8a65007f4e",
        "md5": "d8eeec5c35685f4d12cfdf190e449fc2",
        "sha256": "b5d1e913d79900797e9fe538ab1574a09a77ad3f97cfdc9869fa766968e2fe5c"
      },
      "downloads": -1,
      "filename": "metamake-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d8eeec5c35685f4d12cfdf190e449fc2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 41002,
      "upload_time": "2008-11-03T15:46:49",
      "upload_time_iso_8601": "2008-11-03T15:46:49Z",
      "url": "https://files.pythonhosted.org/packages/5d/1e/e26002726bc8b8befb6fcbb1128737edd5fdafa1f3e2cf5c6b8a65007f4e/metamake-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}