{
  "info": {
    "author": "UbiCast",
    "author_email": "dev@ubicast.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Multimedia :: Video",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mediaserver-api-client.svg)\n![PyPI](https://img.shields.io/pypi/v/mediaserver-api-client.svg)\n![Travis (.org) branch](https://img.shields.io/travis/UbiCastTeam/mediaserver-client/master.svg)\n\n# mediaserver-client\n\nA python3 reference implementation of an UbiCast MediaServer API client.\n\n\n## Installation\n\nTo install the latest release of the mediaserver-client from PyPI :\n\n```sh\npip install mediaserver-api-client\n```\n\nFor development, the package can be installed in editable mode to allow changes on it :\n\n```sh\ngit clone git@github.com:UbiCastTeam/mediaserver-client.git\ncd mediaserver-client/\n# there it's recommended to create/enable some virtualenv\npip install --editable .\n```\n\n\n## Important\n\nFor production use, it is recommended to use the branch named \"stable\". The \"master\" branch is used for development.\n\n\n## Client class instantiation\n\nThe client class (`ms_client`.`client`.`MediaServerClient`) takes two arguments:\n* `local_conf`: This argument can be either a dict, a path (`str` object) or a unix user (`unix:msuser` for example). The default value is `None`, which means no configuration.\n* `setup_logging`: This argument must be a boolean. If set to `True`, the logging to console will be configured. The default value is `True`.\n\n\n## Notes about older client\n\nIf you are using the first version of this client (a single file named mediaserver_api_client.py), here are the steps to update your client:\n\n* Remove the old client file (mediaserver_api_client.py).\n* Install the new client using the setup.py.\n* Replace the import path of `MediaServerClient` (see examples).\n* Replace the arguments named `config_dict` and `config_path` by `local_conf` in the `MediaServerClient` init.\n* Replace all occurences of `MediaServerClient`.`config` by `MediaServerClient`.`conf`.\n\n\n## Examples\n\n### Start/Stop a live\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nresponse = msc.api('/lives/prepare', method='post')\nif response['success']:\n    oid = response['oid']\n    rtmp_uri = response['publish_uri']\n\n    print(oid, rtmp_uri)\n\n    print(msc.api('/lives/start', method='post', data={'oid': oid}))\n\n    print(msc.api('/lives/stop', method='post', data={'oid': oid}))\n```\n\n### Remove all users function\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\n\ndef remove_all_users():\n    print('Remove all users')\n    users = msc.api('/users')['users']\n\n    for user in users:\n        msc.api('/users/delete', method='get', params={'id': user['id']})\n```\n\n### Add media with a video, make it published at once\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nprint(msc.add_media('Test multichunk upload mp4', file_path='test.mp4', validated='yes', speaker_email='user@domain.com'))\n```\n\n### Create user personal channel and upload into it\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\npersonal_channel_oid = msc.api('/channels/personal/', method='get', params={'email': 'test@test.com'}).get('oid')\n\nrespone_like = {\n    'slug': 'testtestcom_05881',\n    'oid': 'c125855df7d36iudslp3',\n    'dbid': 113,\n    'title': 'test@test.com',\n    'success': True\n}\nif personal_channel_oid:\n    print('Uploading to personal channel %s' % personal_channel_oid)\n\n    print(msc.add_media('Test multichunk upload mp4', file_path='test.mp4', validated='yes', speaker_email='user@domain.com', channel=personal_channel_oid))\n```\n\n### Add media with a zip\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nprint(msc.add_media('Test multichunk upload zip', file_path='/tmp/test.zip'))\nprint(msc.add_media(file_path='test.mp4'))\n```\n\n### Add a user\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nprint(msc.api('users/add/', method='post', data={'email': 'test@test.com'}))\n```\n\n### Add users with csv file; example file (header should be included):\n\nusers.csv :\n\n``` csv\nFirstname;Lastname;Email;Company\nAlbert;Einstein;albert.einstein@test.com;Humanity\n```\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nmsc.import_users_csv('users.csv')\n```\n\n### Add an annotation\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nprint(msc.api('annotations/post', params={'oid': 'v125849d470d7v92kvtc', 'time': 1000}))\n```\n\n### Get Chapters\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nprint(msc.api('annotations/chapters/list', params={'oid': 'v125849d470d7v92kvtc'}))\n```\n\n### Get annotations types list and print chapters id\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nresponse = msc.api('annotations/types/list', params={'oid': 'v125849d470d7v92kvtc'})\nfor a in response['types']:\n    if a['slug'] == 'chapter':\n        print(a['id'])\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/UbiCastTeam/mediaserver-client",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.ubicast.eu/en/solutions/delivery/",
    "keywords": "api,client,mediaserver,ubicast",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mediaserver-api-client",
    "package_url": "https://pypi.org/project/mediaserver-api-client/",
    "platform": "",
    "project_url": "https://pypi.org/project/mediaserver-api-client/",
    "project_urls": {
      "Download": "https://github.com/UbiCastTeam/mediaserver-client",
      "Homepage": "https://www.ubicast.eu/en/solutions/delivery/"
    },
    "release_url": "https://pypi.org/project/mediaserver-api-client/3.6/",
    "requires_dist": [
      "requests (~=2.21)",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "twine ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A python3 reference implementation of an UbiCast MediaServer API client",
    "version": "3.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17207955,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b874086519e64179c8b6fe3e2f2795c845ccf7de913d03b091f5a03d702d647",
        "md5": "a216489828729234eeec30abf6d3f281",
        "sha256": "dfbab76cacf4d66de5ae51cfbeb868d93e05dfabcb5b22042c1336329dbc2f18"
      },
      "downloads": -1,
      "filename": "mediaserver_api_client-3.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a216489828729234eeec30abf6d3f281",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 15479,
      "upload_time": "2020-06-26T09:26:22",
      "upload_time_iso_8601": "2020-06-26T09:26:22.592831Z",
      "url": "https://files.pythonhosted.org/packages/5b/87/4086519e64179c8b6fe3e2f2795c845ccf7de913d03b091f5a03d702d647/mediaserver_api_client-3.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19832ff169dfb1e4d994d16a2044694928248773883f1bef91bd97f2465d73fc",
        "md5": "9c3608dc6fc8b424ae073882ed5b3dc4",
        "sha256": "c625394ed0dee950ae3828ac077a2c8b911a0cab9c4752ec7e416965a1eeb65f"
      },
      "downloads": -1,
      "filename": "mediaserver-api-client-3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "9c3608dc6fc8b424ae073882ed5b3dc4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24417,
      "upload_time": "2020-06-26T09:26:23",
      "upload_time_iso_8601": "2020-06-26T09:26:23.864937Z",
      "url": "https://files.pythonhosted.org/packages/19/83/2ff169dfb1e4d994d16a2044694928248773883f1bef91bd97f2465d73fc/mediaserver-api-client-3.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}