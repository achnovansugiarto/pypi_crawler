{
  "info": {
    "author": "UbiCast",
    "author_email": "dev@ubicast.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Video",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mediaserver-api-client.svg)\n![PyPI](https://img.shields.io/pypi/v/mediaserver-api-client.svg)\n\n# mediaserver-client\n\nA python3 reference implementation of an UbiCast Nudgis API client.\nNudgis was called MediaServer in the past but the internal name of Nudgis is still MediaServer.\n\n## Requirements\n\ngit\npython >= 3.9 (download the latest stable release from https://www.python.org/downloads/)\n\nOptional:\n* python3-venv\n\n## Installation\n\n### Linux & OSX\n\nFor development, the package can be installed in editable mode to allow changes on it :\n\n```sh\ngit clone https://github.com/UbiCastTeam/mediaserver-client.git\ncd mediaserver-client/\npython3 -m venv .env\nsource .env/bin/activate  # remember to run this every time you enter the folder and need to restore the environment\npython3 -m pip install --editable .\n```\n\nIf you want to install it system-wide as dependency, the releases are available on pypi:\n```sh\npip install mediaserver-api-client\n```\n\n### Windows\n\n* Open cmd.exe and check python is available with `py --version` which should display the Python version\n\n```\n>py --version\nPython 3.11.1\n```\n\n* From this project root path, run:\n\n```\n> py -m venv .env\n> \".env/Scripts/activate.bat\"\n> pip install .\n``` \n \n* Check it works with:\n\n```\n>py -m examples.ping_server\nTraceback (most recent call last):\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\n  File \"<frozen runpy>\", line 88, in _run_code\n  File \"C:\\Users\\User\\src\\mediaserver-client\\examples\\ping_server.py\", line 17, in <module>\n    print(msc.api('/'))\n          ^^^^^^^^^^^^\n  File \"C:\\Users\\User\\src\\mediaserver-client\\ms_client\\client.py\", line 221, in api\n    result = self.request(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\src\\mediaserver-client\\ms_client\\client.py\", line 98, in request\n    self.check_conf()\n  File \"C:\\Users\\User\\src\\mediaserver-client\\ms_client\\client.py\", line 71, in check_conf\n    configuration_lib.check_conf(self.conf)\n  File \"C:\\Users\\User\\src\\mediaserver-client\\ms_client\\lib\\configuration.py\", line 87, in check_conf\n    raise ConfigurationError('The value of \"SERVER_URL\" is not set. Please configure it.')\nms_client.lib.configuration.ConfigurationError: The value of \"SERVER_URL\" is not set. Please configure it.\n```\n\nDespite the error above, it shows that the installation is complete.\n\n## Configuration\n\nCopy the provided `config.json.example` file into e.g. `myconfig.json`, edit it with a text editor and fill the URL and API KEY.\n\n* Check it works with:\n\nLinux:\n```\n$ python3 ./examples/ping.py myconfig.json\n{'success': True, 'mediaserver': '11.1.1'}\n```\nWindows:\n```\n$ py ./examples/ping.py myconfig.json\n{'success': True, 'mediaserver': '11.1.1'}\n```\n\n## Client class instantiation\n\nThe client class (`ms_client`.`client`.`MediaServerClient`) takes two arguments:\n* `local_conf`: This argument can be either a dict, a path (`str` object) or a unix user (`unix:msuser` for example) -- only aplicable from running scripts from within the server running mediaserver (Nudgis). The default value is `None`, which means no configuration.\n* `setup_logging`: This argument must be a boolean. If set to `True`, the logging to console will be configured. The default value is `True`.\n\n## Configuration\n\nYou can see available parameters in the default configuration file :\n[Default configuration](/ms_client/conf.py)\n\nThe local configuration must be a json file.\n\n## Examples\n\n### Start/Stop a live\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nresponse = msc.api('/lives/prepare', method='post')\nif response['success']:\n    oid = response['oid']\n    rtmp_uri = response['publish_uri']\n\n    print(oid, rtmp_uri)\n\n    print(msc.api('/lives/start', method='post', data={'oid': oid}))\n\n    print(msc.api('/lives/stop', method='post', data={'oid': oid}))\n```\n\n### Remove all users function\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\n\ndef remove_all_users():\n    print('Remove all users')\n    users = msc.api('/users')['users']\n\n    for user in users:\n        msc.api('/users/delete', method='get', params={'id': user['id']})\n```\n\n### Add media with a video, make it published at once\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nprint(msc.add_media('Test multichunk upload mp4', file_path='test.mp4', validated='yes', speaker_email='user@domain.com'))\n```\n\n### Create user personal channel and upload into it\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\npersonal_channel_oid = msc.api('/channels/personal/', method='get', params={'email': 'test@test.com'}).get('oid')\n\nrespone_like = {\n    'slug': 'testtestcom_05881',\n    'oid': 'c125855df7d36iudslp3',\n    'dbid': 113,\n    'title': 'test@test.com',\n    'success': True\n}\nif personal_channel_oid:\n    print('Uploading to personal channel %s' % personal_channel_oid)\n\n    print(msc.add_media('Test multichunk upload mp4', file_path='test.mp4', validated='yes', speaker_email='user@domain.com', channel=personal_channel_oid))\n```\n\n### Add media with a zip\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nprint(msc.add_media('Test multichunk upload zip', file_path='/tmp/test.zip'))\nprint(msc.add_media(file_path='test.mp4'))\n```\n\n### Add a user\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nprint(msc.api('users/add/', method='post', data={'email': 'test@test.com'}))\n```\n\n### Add users with csv file; example file (header should be included):\n\nusers.csv :\n\n``` csv\nFirstname;Lastname;Email;Company\nAlbert;Einstein;albert.einstein@test.com;Humanity\n```\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nmsc.import_users_csv('users.csv')\n```\n\n### Add an annotation\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nprint(msc.api('annotations/post', params={'oid': 'v125849d470d7v92kvtc', 'time': 1000}))\n```\n\n### Get Chapters\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nprint(msc.api('annotations/chapters/list', params={'oid': 'v125849d470d7v92kvtc'}))\n```\n\n### Get annotations types list and print chapters id\n\n``` python\nfrom ms_client.client import MediaServerClient\nmsc = MediaServerClient(local_conf='your-conf.json')\n\nresponse = msc.api('annotations/types/list', params={'oid': 'v125849d470d7v92kvtc'})\nfor a in response['types']:\n    if a['slug'] == 'chapter':\n        print(a['id'])\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/UbiCastTeam/mediaserver-client",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.ubicast.eu/en/solutions/delivery/",
    "keywords": "api,client,mediaserver,nudgis,ubicast",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mediaserver-api-client",
    "package_url": "https://pypi.org/project/mediaserver-api-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/mediaserver-api-client/",
    "project_urls": {
      "Download": "https://github.com/UbiCastTeam/mediaserver-client",
      "Homepage": "https://www.ubicast.eu/en/solutions/delivery/"
    },
    "release_url": "https://pypi.org/project/mediaserver-api-client/4.0/",
    "requires_dist": [
      "requests (>=2.28)",
      "flake8 ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A python3 reference implementation of an UbiCast MediaServer API client",
    "version": "4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17207955,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b29f56ae04a0502d2fdd64065c6af1e349d3230c130d32d41991c9c8645b0bea",
        "md5": "44fb80a63d0e7a5af4fcd7d05c1a3a26",
        "sha256": "4b5b89d8675389170a9377bf5ecdbb15e66d761845f4ba7c08134a318b33d6c3"
      },
      "downloads": -1,
      "filename": "mediaserver_api_client-4.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "44fb80a63d0e7a5af4fcd7d05c1a3a26",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 17598,
      "upload_time": "2023-03-08T14:44:48",
      "upload_time_iso_8601": "2023-03-08T14:44:48.390219Z",
      "url": "https://files.pythonhosted.org/packages/b2/9f/56ae04a0502d2fdd64065c6af1e349d3230c130d32d41991c9c8645b0bea/mediaserver_api_client-4.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2674cd60656f0e007395d52ac16af22cc5b04e8b64368ed9527125b62084a123",
        "md5": "233153f443565633e8e5f09a45cdeae7",
        "sha256": "57f55534171731757803e7badc48dff43ddefc3786e5b3e06ca70f9ffeec419f"
      },
      "downloads": -1,
      "filename": "mediaserver-api-client-4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "233153f443565633e8e5f09a45cdeae7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15787,
      "upload_time": "2023-03-08T14:44:50",
      "upload_time_iso_8601": "2023-03-08T14:44:50.184987Z",
      "url": "https://files.pythonhosted.org/packages/26/74/cd60656f0e007395d52ac16af22cc5b04e8b64368ed9527125b62084a123/mediaserver-api-client-4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}