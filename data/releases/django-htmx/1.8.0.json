{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "===========\ndjango-htmx\n===========\n\n.. image:: https://img.shields.io/github/workflow/status/adamchainz/django-htmx/CI/main?style=for-the-badge\n   :target: https://github.com/adamchainz/django-htmx/actions?workflow=CI\n\n.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge\n  :target: https://github.com/adamchainz/django-htmx/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/django-htmx.svg?style=for-the-badge\n   :target: https://pypi.org/project/django-htmx/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nExtensions for using Django with `htmx <https://htmx.org/>`__.\n\nRequirements\n------------\n\nPython 3.7 to 3.10 supported.\n\nDjango 2.2 to 4.0 supported.\n\n----\n\n**Want to work smarter and faster?**\nCheck out my book `Boost Your Django DX <https://adamchainz.gumroad.com/l/byddx>`__ which covers many ways to improve your development experience.\n\n----\n\nInstallation\n------------\n\n1. Install with **pip**:\n\n   .. code-block:: sh\n\n       python -m pip install django-htmx\n\n2. Add django-htmx to your ``INSTALLED_APPS``:\n\n   .. code-block:: python\n\n       INSTALLED_APPS = [\n           ...,\n           \"django_htmx\",\n           ...,\n       ]\n\n3. Add the middleware:\n\n   .. code-block:: python\n\n       MIDDLEWARE = [\n           ...,\n           \"django_htmx.middleware.HtmxMiddleware\",\n           ...,\n       ]\n\n4. (Optional) Add the extension script to your template, as documented below.\n\nIt’s up to you to add htmx (and any extensions) to your project, via a ``<script>`` tag in your base template.\nFor resilience, you probably want to download it into your project’s static files, rather than rely on the ``unpkg.com`` hosted version.\n\nExample app\n-----------\n\nSee the `example app <https://github.com/adamchainz/django-htmx/tree/main/example>`__ in the ``example/`` directory of the GitHub repository for usage of django-htmx.\n\nReference\n---------\n\nExtension Script\n^^^^^^^^^^^^^^^^\n\ndjango-htmx comes with a small JavaScript extension for htmx’s behaviour.\nCurrently the extension only includes a debug error handler, documented below.\n\nThe script is served as a static file called ``django-htmx.js``, but you shouldn’t reference it directly.\nInstead, use the included template tags, for both Django and Jinja templates.\n\nFor **Django Templates**, load and use the template tag, after your htmx ``<script>`` tag:\n\n.. code-block:: django\n\n    {% load django_htmx %}\n    {% django_htmx_script %}\n\nFor **Jinja Templates**, you need to perform two steps.\nFirst, load the tag function into the globals of your `custom environment <https://docs.djangoproject.com/en/stable/topics/templates/#django.template.backends.jinja2.Jinja2>`__:\n\n.. code-block:: python\n\n    # myproject/jinja2.py\n    from jinja2 import Environment\n    from django_htmx.jinja import django_htmx_script\n\n\n    def environment(**options):\n        env = Environment(**options)\n        env.globals.update(\n            {\n                # ...\n                \"django_htmx_script\": django_htmx_script,\n            }\n        )\n        return env\n\nSecond, call the function in your template, after your htmx ``<script>`` tag:\n\n.. code-block:: jinja\n\n    {{ django_htmx_script() }}\n\nDebug Error Handler\n~~~~~~~~~~~~~~~~~~~\n\nhtmx’s default behaviour when encountering an HTTP error is to discard the response.\nThis can make it hard to debug errors in development.\n\nThe django-htmx script includes an error handler that’s active when debug mode is on.\nThe handler detects responses with 404 and 500 status codes and replaces the page with their content.\nThis change allows you to debug with Django’s default error responses as you would for a non-htmx request.\n\nSee this in action in the “Error Demo” section of the example app.\n\n``django_htmx.middleware.HtmxMiddleware``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis middleware attaches ``request.htmx``, an instance of ``HtmxDetails``.\n\nSee it action in the “Middleware Tester” section of the example app.\n\n``django_htmx.middleware.HtmxDetails``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis class provides shortcuts for reading the htmx-specific `request headers <https://htmx.org/reference/#request_headers>`__.\n\n``__bool__(): bool``\n~~~~~~~~~~~~~~~~~~~~\n\n``True`` if the request was made with htmx, otherwise ``False``.\nThis is based on the presence of the ``HX-Request`` header.\n\nThis allows you to switch behaviour for requests made with htmx like so:\n\n.. code-block:: python\n\n    def my_view(request):\n        if request.htmx:\n            template_name = \"partial.html\"\n        else:\n            template_name = \"complete.html\"\n        return render(template_name, ...)\n\n``boosted: bool``\n~~~~~~~~~~~~~~~~~\n\n``True`` if the request came from an element with the ``hx-boost`` attribute.\nBased on the ``HX-Boosted`` header.\n\n``current_url: str | None``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe current URL of the browser, or ``None`` for non-htmx requests.\nBased on the ``HX-Current-URL`` header.\n\n``history_restore_request: bool``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``True`` if the request is for history restoration after a miss in the local history cache.\nBased on the ``HX-History-Restore-Request`` header.\n\n``prompt: str | None``\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe user response to `hx-prompt <https://htmx.org/attributes/hx-prompt/>`__ if it was used, or ``None``.\n\n``target: str | None``\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``id`` of the target element if it exists, or ``None``.\nBased on the ``HX-Target`` header.\n\n``trigger: str | None``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``id`` of the triggered element if it exists, or ``None``.\nBased on the ``HX-Trigger`` header.\n\n``trigger_name: str | None``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``name`` of the triggered element if it exists, or ``None``.\nBased on the ``HX-Trigger-Name`` header.\n\n``triggering_event: Any | None``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe deserialized JSON representtation of the event that triggered the request if it exists, or ``None``.\nThis header is set by the `event-header htmx extension <https://htmx.org/extensions/event-header/>`__, and contains details of the DOM event that triggered the request.\n\n``django_htmx.http.HttpResponseClientRedirect: type[HttpResponse]``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nhtmx can trigger a client side redirect when it receives a response with the |HX-Redirect header|__.\n``HttpResponseClientRedirect`` is a `HttpResponseRedirect <https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpResponseRedirect>`__ subclass for triggering such redirects.\n\n.. |HX-Redirect header| replace:: ``HX-Redirect`` header\n__ https://htmx.org/reference/#response_headers\n\nFor example:\n\n.. code-block:: python\n\n    from django_htmx.http import HttpResponseClientRedirect\n\n\n    def sensitive_view(request):\n        if not sudo_mode.active(request):\n            return HttpResponseClientRedirect(\"/activate-sudo-mode/\")\n        ...\n\n``django_htmx.http.HttpResponseStopPolling: type[HttpResponse]``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen using a `polling trigger <https://htmx.org/docs/#polling>`__, htmx will stop polling when it encounters a response with the special HTTP status code 286.\n``HttpResponseStopPolling`` is a `custom response class <https://docs.djangoproject.com/en/stable/ref/request-response/#custom-response-classes>`__ with that status code.\n\nFor example:\n\n.. code-block:: python\n\n    from django_htmx.http import HttpResponseStopPolling\n\n\n    def my_pollable_view(request):\n        if event_finished():\n            return HttpResponseStopPolling()\n        ...\n\n``django_htmx.http.HTMX_STOP_POLLING: int``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA constant for the HTTP status code 286, for use with e.g. `Django’s render shortcut <https://docs.djangoproject.com/en/stable/topics/http/shortcuts/#django.shortcuts.render>`__.\n\n.. code-block:: python\n\n    from django_htmx.http import HTMX_STOP_POLLING\n\n\n    def my_pollable_view(request):\n        if event_finished():\n            return render(\"event-finished.html\", status=HTMX_STOP_POLLING)\n        ...\n\n``django_htmx.http.trigger_client_event(response, name, *, params, after)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFull signature:\n\n.. code-block:: python\n\n    def trigger_client_event(\n        response: HttpResponse,\n        name: str,\n        params: dict[str, Any],\n        *,\n        after: EventAfterType = \"receive\"\n    ) -> None:\n        ...\n\nModify the |HX-Trigger headers|__ of ``response``  to trigger client-side events.\nTakes the name of the event to trigger and any JSON-compatible parameters for it, and stores them in the appropriate header.\nUses |DjangoJSONEncoder|__ for its extended data type support.\n\n.. |HX-Trigger headers| replace:: ``HX-Trigger`` headers\n__ https://htmx.org/headers/hx-trigger/\n\n.. |DjangoJSONEncoder| replace:: ``DjangoJSONEncoder``\n__ https://docs.djangoproject.com/en/stable/topics/serialization/#django.core.serializers.json.DjangoJSONEncoder\n\nWhich of the ``HX-Trigger`` headers is modified depends on the value of ``after``:\n\n* ``\"receive\"``, the default, maps to ``HX-Trigger``\n* ``\"settle\"`` maps to ``HX-Trigger-After-Settle``\n* ``\"swap\"`` maps to ``HX-Trigger-After-Swap``\n\nCalling ``trigger_client_event`` multiple times for the same ``response`` and ``after`` will add or replace the given event name and preserve others.\n\nFor example:\n\n.. code-block:: python\n\n    from django_htmx.http import trigger_client_event\n\n\n    def end_of_long_process(request):\n        response = render(\"end-of-long-process.html\")\n        trigger_client_event(\n            response,\n            \"showConfetti\",\n            {\"colours\": [\"purple\", \"red\", \"pink\"]},\n            after=\"swap\",\n        )\n        return response\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-htmx",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-htmx",
    "package_url": "https://pypi.org/project/django-htmx/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-htmx/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-htmx/blob/main/HISTORY.rst",
      "Homepage": "https://github.com/adamchainz/django-htmx",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/django-htmx/1.8.0/",
    "requires_dist": [
      "Django (>=2.2)"
    ],
    "requires_python": ">=3.7",
    "summary": "Extensions for using Django with htmx.",
    "version": "1.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024217,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3e21fc7e004cf877313c3350cf03190e4d52979475ef0b72eb0309057902947",
        "md5": "c90951b87d5deb3d79acd1cd5cc9828e",
        "sha256": "f84d10d346e7862cc46f25204ec3cddd8d48b0a93f3f7c234d1f75fa62bbea8a"
      },
      "downloads": -1,
      "filename": "django_htmx-1.8.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c90951b87d5deb3d79acd1cd5cc9828e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8867,
      "upload_time": "2022-01-10T16:52:49",
      "upload_time_iso_8601": "2022-01-10T16:52:49.104724Z",
      "url": "https://files.pythonhosted.org/packages/b3/e2/1fc7e004cf877313c3350cf03190e4d52979475ef0b72eb0309057902947/django_htmx-1.8.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57393c0736ec9a58bbbfae49139bddc282c102d31049b3f1c2b28992fa56f43b",
        "md5": "cd7a4e20376a5d08f68ea07b578535a5",
        "sha256": "a8d41e74b907b9b9491fc9af99cf9a4a2879f9e9eee26592d4baf84f5f5982e5"
      },
      "downloads": -1,
      "filename": "django-htmx-1.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cd7a4e20376a5d08f68ea07b578535a5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12715,
      "upload_time": "2022-01-10T16:52:50",
      "upload_time_iso_8601": "2022-01-10T16:52:50.452860Z",
      "url": "https://files.pythonhosted.org/packages/57/39/3c0736ec9a58bbbfae49139bddc282c102d31049b3f1c2b28992fa56f43b/django-htmx-1.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}