{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "===========\ndjango-htmx\n===========\n\n.. image:: https://img.shields.io/github/workflow/status/adamchainz/django-htmx/CI/main?style=for-the-badge\n   :target: https://github.com/adamchainz/django-htmx/actions?workflow=CI\n\n.. image:: https://img.shields.io/codecov/c/github/adamchainz/django-htmx/main?style=for-the-badge\n  :target: https://app.codecov.io/gh/adamchainz/django-htmx\n\n.. image:: https://img.shields.io/pypi/v/django-htmx.svg?style=for-the-badge\n   :target: https://pypi.org/project/django-htmx/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nExtensions for using Django with `htmx <https://htmx.org/>`__.\n\nRequirements\n------------\n\nPython 3.6 to 3.9 supported.\n\nDjango 2.2 to 4.0 supported.\n\n----\n\n**Are your tests slow?**\nCheck out my book `Speed Up Your Django Tests <https://gumroad.com/l/suydt>`__ which covers loads of best practices so you can write faster, more accurate tests.\n\n----\n\nInstallation\n------------\n\n1. Install with **pip**:\n\n   .. code-block:: sh\n\n       python -m pip install django-htmx\n\n2. Add django-htmx to your ``INSTALLED_APPS``:\n\n   .. code-block:: python\n\n       INSTALLED_APPS = [\n           ...,\n           \"django_htmx\",\n           ...,\n       ]\n\n3. Add the middleware:\n\n   .. code-block:: python\n\n       MIDDLEWARE = [\n           ...,\n           \"django_htmx.middleware.HtmxMiddleware\",\n           ...,\n       ]\n\n4. (Optional) Add the extension script to your template, as documented below.\n\n\nExample app\n-----------\n\nSee the `example app <https://github.com/adamchainz/django-htmx/tree/main/example>`__ in the ``example/`` directory of the GitHub repository for usage of django-htmx.\n\nReference\n---------\n\nExtension Script\n^^^^^^^^^^^^^^^^\n\ndjango-htmx comes with a small JavaScript extension for htmx’s behaviour.\nCurrently the extension only includes a debug error handler, documented below.\n\nThe script is served as a static file called `django-htmx.js`, but you shouldn’t reference it directly.\nInstead, use the included template tags, for both Django and Jinja templates.\nInclude the relevant template tag after your htmx script tag.\n\nFor **Django Templates**, load and use the template tag:\n\n.. code-block:: django\n\n    {% load django_htmx %}\n    {% django_htmx_script %}\n\nFor **Jinja Templates**, you need to perform two steps.\nFirst, load the tag function into the globals of your `custom environment <https://docs.djangoproject.com/en/stable/topics/templates/#django.template.backends.jinja2.Jinja2>`__:\n\n.. code-block:: python\n\n    # myproject/jinja2.py\n    from jinja2 import Environment\n    from django_htmx.jinja import django_htmx_script\n\n\n    def environment(**options):\n        env = Environment(**options)\n        env.globals.update(\n            {\n                # ...\n                \"django_htmx_script\": django_htmx_script,\n            }\n        )\n        return env\n\nSecond, call the function in your template:\n\n.. code-block:: jinja\n\n    {{ django_htmx_script() }}\n\nDebug Error Handler\n~~~~~~~~~~~~~~~~~~~\n\nhtmx’s default behaviour when encountering an HTTP error is to discard the response.\nThis can make it hard to debug errors in development.\n\nThe django-htmx script includes an error handler that’s active when debug mode is on.\nThe handler detects responses with 404 and 500 status codes and replaces the page with their content.\nThis change allows you to debug with Django’s default error responses as you would for a non-htmx request.\n\nSee this in action in the “Error Demo” section of the example app.\n\n``django_htmx.middleware.HtmxMiddleware``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis middleware attaches ``request.htmx``, an instance of ``HtmxDetails``.\n\nSee it action in the “Middleware Tester” section of the example app.\n\n``django_htmx.middleware.HtmxDetails``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis class provides shortcuts for reading the htmx-specific `request headers <https://htmx.org/reference/#request_headers>`__.\n\n``__bool__(): bool``\n~~~~~~~~~~~~~~~~~~~~\n\n``True`` if the request was made with htmx, otherwise ``False``.\nThis is based on the presence of the ``HX-Request`` header.\n\nThis allows you to switch behaviour for requests made with htmx like so:\n\n.. code-block:: python\n\n    def my_view(request):\n        if request.htmx:\n            template_name = \"partial.html\"\n        else:\n            template_name = \"complete.html\"\n        return render(template_name, ...)\n\n``boosted: bool``\n~~~~~~~~~~~~~~~~~\n\n``True`` if the request request came from an element with the ``hx-boost`` attribute.\nBased on the ``HX-Boosted`` header.\n\n``current_url: str | None``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe current URL of the browser, or ``None`` for non-htmx requests.\nBased on the ``HX-Current-URL`` header.\n\n``history_restore_request: bool``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``True`` if the request is for history restoration after a miss in the local history cache.\nBased on the ``HX-History-Restore-Request`` header.\n\n``prompt: str | None``\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe user response to `hx-prompt <https://htmx.org/attributes/hx-prompt/>`__ if it was used, or ``None``.\n\n``target: str | None``\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``id`` of the target element if it exists, or ``None``.\nBased on the ``HX-Target`` header.\n\n``trigger: str | None``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``id`` of the triggered element if it exists, or ``None``.\nBased on the ``HX-Trigger`` header.\n\n``trigger_name: str | None``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``name`` of the triggered element if it exists, or ``None``.\nBased on the ``HX-Trigger-Name`` header.\n\n``triggering_event: Any | None``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe deserialized JSON representtation of the event that triggered the request if it exists, or ``None``.\nThis header is set by the `event-header htmx extension <https://htmx.org/extensions/event-header/>`__, and contains details of the DOM event that triggered the request.\n\n``django_htmx.http.HttpResponseStopPolling: type[HttpResponse]``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen using a `polling trigger <https://htmx.org/docs/#polling>`__, htmx will stop polling when it encounters a response with the special HTTP status code 286.\n``HttpResponseStopPolling`` is a `custom response class <https://docs.djangoproject.com/en/stable/ref/request-response/#custom-response-classes>`__ with that status code.\n\nFor example:\n\n.. code-block:: python\n\n    from django_htmx.http import HttpResponseStopPolling\n\n\n    def my_pollable_view(request):\n        if event_finished():\n            return HttpResponseStopPolling()\n        ...\n\n``django_htmx.http.HTMX_STOP_POLLING: int``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA constant for the HTTP status code 286, for use with e.g. `Django’s render shortcut <https://docs.djangoproject.com/en/stable/topics/http/shortcuts/#django.shortcuts.render>`__.\n\n.. code-block:: python\n\n    from django_htmx.http import HTMX_STOP_POLLING\n\n\n    def my_pollable_view(request):\n        if event_finished():\n            return render(\"event-finished.html\", status=HTMX_STOP_POLLING)\n        ...\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-htmx",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-htmx",
    "package_url": "https://pypi.org/project/django-htmx/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-htmx/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-htmx/blob/main/HISTORY.rst",
      "Homepage": "https://github.com/adamchainz/django-htmx",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/django-htmx/1.4.0/",
    "requires_dist": [
      "Django (>=2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Extensions for using Django with htmx.",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024217,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1c857a7c3db2a71fa734aba292b94c21708d5f9b7c68f6e5ba596b14103b546",
        "md5": "7b73a0aa09963ef39c39010230aec925",
        "sha256": "38ebc09ab39bbc9fb5e00a1ff21426cb1b4e227bc8badfafbd5e832d5d367710"
      },
      "downloads": -1,
      "filename": "django_htmx-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7b73a0aa09963ef39c39010230aec925",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7556,
      "upload_time": "2021-10-02T21:21:58",
      "upload_time_iso_8601": "2021-10-02T21:21:58.938182Z",
      "url": "https://files.pythonhosted.org/packages/f1/c8/57a7c3db2a71fa734aba292b94c21708d5f9b7c68f6e5ba596b14103b546/django_htmx-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1e040caccb06c69ed504de97daf498d7f0204b048a4897f38ca4ca48ea7ad46",
        "md5": "d730c49636c425b8abae1948f7cba71d",
        "sha256": "3ce38d7e888e0bd6121f40a001890bcfc3158c15a9d2a790ed488853fd1559aa"
      },
      "downloads": -1,
      "filename": "django-htmx-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d730c49636c425b8abae1948f7cba71d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10600,
      "upload_time": "2021-10-02T21:22:00",
      "upload_time_iso_8601": "2021-10-02T21:22:00.528921Z",
      "url": "https://files.pythonhosted.org/packages/a1/e0/40caccb06c69ed504de97daf498d7f0204b048a4897f38ca4ca48ea7ad46/django-htmx-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}