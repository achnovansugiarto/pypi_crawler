{
  "info": {
    "author": "Joseph D. Hughes",
    "author_email": "modflow@usgs.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Hydrology"
    ],
    "description": "# pymake\n\nPython package for compiling MODFLOW-based programs.\n\n### Version 1.2.2\n\n![pymake continuous integration](https://github.com/modflowpy/pymake/workflows/pymake%20continuous%20integration/badge.svg)\n[![codecov](https://codecov.io/gh/modflowpy/pymake/branch/master/graph/badge.svg)](https://codecov.io/gh/modflowpy/pymake)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/fe4275a3cfb84acf9c84aba7b4ae2086)](https://www.codacy.com/gh/modflowpy/pymake/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=modflowpy/pymake&amp;utm_campaign=Badge_Grade)\n[![Documentation Status](https://readthedocs.org/projects/mfpymake/badge/?version=latest)](https://mfpymake.readthedocs.io/en/latest/?badge=latest)\n\nThis is a python package for compiling MODFLOW-based and other Fortran, C, and\nC++ programs. The package determines the build order using a directed acyclic\ngraph and then compiles the source files using GNU compilers (`gcc`, `g++`,\n`gfortran`) or Intel compilers (`ifort`, `icc`).\n\npymake can be run from the command line or it can be called from within python.\nBy default, pymake sets the optimization level, Fortran flags, C/C++ flags, and\nlinker flags that are consistent with those used to compile MODFLOW-based\nprograms released by the USGS.\n\npymake includes example scripts for building MODFLOW 6, MODFLOW-2005,\nMODFLOW-NWT, MODFLOW-USG, MODFLOW-LGR, MODFLOW-2000, MODPATH 6, MODPATH 7,\nGSFLOW, VS2DT, MT3DMS, MT3D-USGS, SEAWAT, and SUTRA. Example scripts for\ncreating the utility programs CRT, Triangle, and GRIDGEN are also included. The\nscripts download the distribution file from the USGS (and other organizations)\nand compile the source into a binary executable.\n\nNote that if gfortran is used to compile MODFLOW-based codes, the `openspec.f`\nand `FILESPEC.inc` (MT3DMS) files will automatically be changed to the\nfollowing so that binary files are created properly using standard Fortran:\n\n```\nc -- created by pymake.py\nCHARACTER*20 ACCESS,FORM,ACTION(2)\nDATA ACCESS/'STREAM'/\nDATA FORM/'UNFORMATTED'/\nDATA (ACTION(I),I=1,2)/'READ','READWRITE'/\nc -- end of include file\n```\n\n## Command Line Usage\n\npymake can be used to compile MODFLOW 6 directly from the command line using\nthe Intel Fortran compiler `ifort` from a subdirectory at the same level as\nthe `src` subdirectory by specifying:\n\n```\npython -m pymake ../src/ ../bin/mf6 -mc --subdirs -fc ifort\n```\n\nTo see help for running from command line, use the following statement.\n\n```\npython -m pymake -h\n```\n\nThe help message identifies required positional arguments and optional\narguments that can be provided to overide default values.\n\n```\nusage: __main__.py [-h] [-fc {ifort,mpiifort,gfortran,none}] [-cc {gcc,clang,clang++,icc,icl,mpiicc,g++,cl,none}] [-ar {ia32,ia32_intel64,intel64}] [-mc] [-dbl] [-dbg] [-e] [-dr] [-sd] [-ff FFLAGS]\n                   [-cf CFLAGS] [-sl {-lc,-lm}] [-mf] [-cs COMMONSRC] [-ef EXTRAFILES] [-exf EXCLUDEFILES] [-so] [-ad APPDIR] [-v] [--keep] [--zip ZIP] [--inplace] [--networkx]\n                   srcdir target\n\nThis is the pymake program for compiling fortran, c, and c++ source files, such as the source files that come with MODFLOW. The program works by building a directed acyclic graph of the module\ndependencies and then compiling the source files in the proper order.\n\npositional arguments:\n  srcdir                Path source directory.\n  target                Name of target to create. (can include path)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -fc {ifort,mpiifort,gfortran,none}\n                        Fortran compiler to use. (default is gfortran)\n  -cc {gcc,clang,clang++,icc,icl,mpiicc,g++,cl,none}\n                        C/C++ compiler to use. (default is gcc)\n  -ar {ia32,ia32_intel64,intel64}, --arch {ia32,ia32_intel64,intel64}\n                        Architecture to use for Intel and Microsoft compilers on Windows. (default is intel64)\n  -mc, --makeclean      Clean temporary object, module, and source files when done. (default is False)\n  -dbl, --double        Force double precision. (default is False)\n  -dbg, --debug         Create debug version. (default is False)\n  -e, --expedite        Only compile out of date source files. Clean must not have been used on previous build. (default is False)\n  -dr, --dryrun         Do not actually compile. Files will be deleted, if --makeclean is used. Does not work yet for ifort. (default is False)\n  -sd, --subdirs        Include source files in srcdir subdirectories. (default is None)\n  -ff FFLAGS, --fflags FFLAGS\n                        Additional Fortran compiler flags. Fortran compiler flags should be enclosed in quotes and start with a blank space or separated from the name (-ff or --fflags) with a equal\n                        sign (-ff='-O3'). (default is None)\n  -cf CFLAGS, --cflags CFLAGS\n                        Additional C/C++ compiler flags. C/C++ compiler flags should be enclosed in quotes and start with a blank space or separated from the name (-cf or --cflags) with a equal sign\n                        (-cf='-O3'). (default is None)\n  -sl {-lc,-lm}, --syslibs {-lc,-lm}\n                        Linker system libraries. Linker libraries should be enclosed in quotes and start with a blank space or separated from the name (-sl or --syslibs) with a equal sign\n                        (-sl='-libgcc'). (default is None)\n  -mf, --makefile       Create a GNU make makefile. (default is False)\n  -cs COMMONSRC, --commonsrc COMMONSRC\n                        Additional directory with common source files. (default is None)\n  -ef EXTRAFILES, --extrafiles EXTRAFILES\n                        List of extra source files to include in the compilation. extrafiles can be either a list of files or the name of a text file that contains a list of files. (default is None)\n  -exf EXCLUDEFILES, --excludefiles EXCLUDEFILES\n                        List of extra source files to exclude from the compilation. excludefiles can be either a list of files or the name of a text file that contains a list of files. (default is\n                        None)\n  -so, --sharedobject   Create shared object or dll on Windows. (default is False)\n  -ad APPDIR, --appdir APPDIR\n                        Target path that overides path defined target path (default is None)\n  -v, --verbose         Verbose output to terminal. (default is False)\n  --keep                Keep existing executable. (default is False)\n  --zip ZIP             Zip built executable. (default is False)\n  --inplace             Source files in srcdir are used directly. (default is False)\n  --networkx            Use networkx package to build Directed Acyclic Graph use to determine the order source files are compiled in. (default is False)\n\nNote that the source directory should not contain any bad or duplicate source files as all source files in the source directory, the common source file directory (srcdir2), and the extra files\n(extrafiles) will be built and linked. Files can be excluded by using the excludefiles command line switch.\n\n```\n\nNote that command line arguments for Fortran flags, C/C++ flags, and syslib\nlibraries should be enclosed in quotes and start with a space prior to the\nfirst value (`-ff ' -O3'`) or use an equal sign separating the command line\nargument and the values (`-ff='-O3'`). The command line argument to use an\n`-O3` optimization level when compiling MODFLOW 6 with the `ifort` compiler\nwould be:\n\n```\npython -m pymake ../src/ ../bin/mf6 -mc --subdirs -fc ifort -ff='-O3'\n```\n\n## From Python\n\n### Script to compile MODFLOW 6\n\nWhen using the pymake object (`Pymake()`) only the positional arguments\n(`srcdir`, `target`) need to be specified in the script.\n\n```python\nimport pymake\n\npm = pymake.Pymake()\npm.srcdir = '../src'\npm.target = 'mf6'\npm.include_subdirs = True\npm.build()\n```\n\nIt is suggested that optional variables required for successful compiling and\nlinking be manually specified in the script to mininimize the potential for\nunsuccessful builds. For MODFLOW 6, subdirectories in the `src` subdirectory\nneed to be included and '`pm.include_subdirs = True`' has been specified in the\nscript. Custom optimization levels and compiler flags could be specified to get\nconsistent builds.\n\nNon-default values for the optional arguments can specified as command line\narguments. For example, MODFLOW 6 could be compiled using Intel compilers\ninstead of the default GNU compilers with the script listed above by\nspecifying:\n\n```\npython mymf6script.py -fc ifort -cc icc\n```\n\n## Automatic Download and Build\n\nThe following scripts can be run directly from the command line to build\nMODFLOW 6, MODFLOW-2005, MODFLOW-NWT, MODFLOW-USG, MODFLOW-LGR, MODFLOW-2000,\nMODPATH 6, MODPATH 7, MT3DMS, MT3D-USGS, and SEAWAT binaries on Linux, Mac, and\nWindows. The scripts will download the distribution file from the USGS\n(requires internet connection), unzip the file, and compile the source.  \nMT3DMS will be downloaded from the University of Alabama and Triangle will be\ndownloaded from\n[netlib.org](http://www.netlib.org/voronoi/triangle.zip). The scripts use the\n`pymake.build_apps()` method which download and unzip the distribution files\nand set all of the pymake settings required to build the program. Available\nexample scripts include:\n\n* `make_modflow6.py`\n* `make_mf2005.py`\n* `make_mfnwt.py`\n* `make_mfusg.py`\n* `make_mflgr.py`\n* `make_mf2000.py`\n* `make_modpath6.py`\n* `make_modpath7.py`\n* `make_gsflow.py`\n* `make_vs2dt.py`\n* `make_mt3d.py`\n* `make_mt3dusgs.py`\n* `make_swtv4.py`\n* `make_crt.py`\n* `make_gridgen.py`\n* `make_triangle.py`\n\nOptional command line arguments can be used to customize the build (`-fc`,\n`-cc`, `--fflags`, etc.). MODFLOW 6 could be built using intel compilers and\nan `O3` optimation level by specifying:\n\n```\npython make_mf6.py -fc=ifort --fflags='-O3'\n```\n\n## Installation\n\nTo install pymake using pip type:\n\n```\npip install mfpymake\n```\n\nTo install pymake directly from the git repository type:\n\n```\npip install https://github.com/modflowpy/pymake/zipball/master\n```\n\nTo update your version of pymake with the latest from the git repository type:\n\n```\npip install https://github.com/modflowpy/pymake/zipball/master --upgrade\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/mfpymake",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/modflowpy/pymake",
    "keywords": "MODFLOW,groundwater,hydrogeology",
    "license": "CC0",
    "maintainer": "Joseph D. Hughes",
    "maintainer_email": "jdhughes@usgs.gov",
    "name": "mfpymake",
    "package_url": "https://pypi.org/project/mfpymake/",
    "platform": "Windows",
    "project_url": "https://pypi.org/project/mfpymake/",
    "project_urls": {
      "Bug Tracker": "https://github.com/modflowpy/pymake/issues",
      "Documentation": "https://mfpymake.readthedocs.io",
      "Download": "https://pypi.org/project/mfpymake",
      "Homepage": "https://github.com/modflowpy/pymake",
      "Source Code": "https://github.com/modflowpy/pymake"
    },
    "release_url": "https://pypi.org/project/mfpymake/1.2.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "pymake is a Python package to compile MODFLOW-based models.",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16055016,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84c76857d7c77ab5a2a80aa3d8eda059476868fef7550a79dbf33fa55bb3bbc6",
        "md5": "43dbdfa11672fc7c418fab84a0b0898a",
        "sha256": "f22e41940e67c1dfa7edcc7e5b4131e90e057ab853916d639badd46e7ce63334"
      },
      "downloads": -1,
      "filename": "mfpymake-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "43dbdfa11672fc7c418fab84a0b0898a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 69243,
      "upload_time": "2021-12-03T23:11:16",
      "upload_time_iso_8601": "2021-12-03T23:11:16.393484Z",
      "url": "https://files.pythonhosted.org/packages/84/c7/6857d7c77ab5a2a80aa3d8eda059476868fef7550a79dbf33fa55bb3bbc6/mfpymake-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}