{
  "info": {
    "author": "Emmanuelle Delescolle, Adrien Brunet, Mauro Bianchi, Mattia Larentis, Aaron Elliot Ross",
    "author_email": "info@levit.be",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# DRF-schema-adapter [![Build Status](https://travis-ci.org/drf-forms/drf-schema-adapter.svg?branch=master)](https://travis-ci.org/drf-forms/drf-schema-adapter)\n\n`drf-schema-adapter` is a set of tools used to make it as straight-forward to declare an API endpoint\nas it is to declare a new `ModelAdmin` in Django and export the corresponding definition to frontend\nframeworks and libraries.\n\n## Compatibility Matrix\n\n**DRF-schema-adapter** is compatible with the following matrix\n\n|                 | Py 3.5       | Py 3.6       | Py 3.7       | Py 3.8       | Py 3.9       |\n| --------------- | ------------ | ------------ | ------------ | ------------ | ------------ |\n| **Django 2.0**  | DRF 3.8-3.10 | No           | No           | No           | No           |\n| **Django 2.1**  | DRF 3.8-3.10 | No           | No           | No           | No           |\n| **Django 2.2**  | No           | DRF 3.8-3.10 | DRF 3.8-3.10 | DRF 3.8-3.10 | Untested     |\n| **Django 3.0**  | No           | DRF 3.10     | DRF 3.10+    | DRF 3.10+    | DRF 3.10+    |\n| **Django 3.1**  | No           | Untested     | DRF 3.11+    | DRF 3.11+    | DRF 3.11+    |\n| **Django 3.2**  | No           | Untested     | DRF 3.12+    | DRF 3.12+    | DRF 3.12+    |\n\n:warning: For Python 2.7 or Django 1.x support, please use versions 1.x or prior\n\n## Installation\n\n### With pip\n\n```bash\npip install drf-schema-adapter\n```\n\n### From source\n\nWithin the source directory:\n\n```bash\npython setup.py install\n```\n\n\n## Demo application\n\nYou can see a demo application running at\n[https://djembersample.pythonanywhere.com/](https://djembersample.pythonanywhere.com/).\n\n## Basic usage\n\nFirst of all you'll need to import the default EndpointRouter in your urls.py file.\n\n```python\nfrom drf_auto_endpoint.router import router\n```\n\nAs well as add its urls to your `urlpatterns` in `urls.py`, the same way you would with DRF's\n`DefaultRouter`.\n\n```python\nurlpatterns = [\n    ...\n    url(r'^api/', include(router.urls)),\n    ...\n]\n```\n\n### Prototyping\n\nThe quickest way to get a working endpoint is to register a model with the router. Register accepts\nan optional keyword argument for the `url` associated to that endpoint. By default the url for an\nendpoint willbe `app_label/verbose_name_plural`\n\n```python\nfrom drf_auto_endpoint.router import router\nfrom my_app.models import MyModel, OtherModel\n\nrouter.register(MyModel)\nrouter.register(OtherModel, url='my_custom_url')\n\nurlpatterns = [\n    url(r'^api/', include(router.urls)),\n]\n```\n\n### Adding schema information to your `OPTIONS` calls\n\nDjango REST framework provides the ability to customize those calls thanks to\n[metadata classes](http://www.django-rest-framework.org/api-guide/metadata/).\n\nSetup DRF to use one of **DRF-schema-adapter**'s metadata classes to get schema information:\n\n```python\n## settings.py\n\n...\nREST_FRAMEWORK = {\n    'DEFAULT_METADATA_CLASS': 'drf_auto_endpoint.metadata.AutoMetadata',\n}\n```\n\n\n### Exporting to the frontend\n\nFirst add `'export_app'` to your setting's `INSTALLED_APPS`, then run:\n\n```bash\n./manage.py export --adapter_name EmberAdapter samples/products\n```\n\n## Full documentation\n\nFor much more complete documentation, please see: http://drf-schema-adapter.readthedocs.io\n\n## Related projects\n\n- Django:\n  - [Django Rest Framework](http://www.django-rest-framework.org/)\n  - [DRF-Base64](https://bitbucket.org/levit_scs/drf_base64)\n- Ember:\n  - [ember-cli-dynamic-model](https://bitbucket.org/levit_scs/ember-cli-dynamic-model)\n  - [ember-cli-crudities](https://bitbucket.org/levit_scs/ember-cli-crudities)\n- Angular:\n  - [angular-formly](http://angular-formly.com/)\n- React:\n  _nothing so far_\n- Third-party adapters:\n  _nothing so far_\n\n## Contibuting guide-lines\n\nIf you'd like to contibute to *DRF-schema-adapter**, you are more than welcome to do so. In order to\nmake contributing to this project a rich experience for everyone, please follow these guide-lines:\n\n- First, fork the project with your own GitHub account, build your code on your own repository and\nsubmit a pull-request once your contribution is ready.\n- Before contributing a bug-fix or new feature, create an issue explaining what the problem/need is\nfirst. When submitting your pull-request, make sure to reference the original issue.\n- For any code you contribute, make sure to follow PEP8 recommendation (soft line-limit 100, hard\nlimit 120).\n- For bug-fixes, please first write a test that will fail with the current code and passes using your\npatch. For easier evaluation, please do so in 2 separate commits\n- For new features, if your feature can be implemented as a third-party app (like new adapters), please\ndon't contribute them to this repo, publish your own application and open an issue telling us about it.\nWe will make sure to add a link to your application in this README.\n- Read and respect the [Code Of Conduct](./COC.md)\n\n## ToDo\n\n- [ ] Write better documentation\n- [ ] Write more/better tests\n\n---\n\nLicense information available [here](LICENSE.md).\n\nContributors code of conduct is available [here](COC.md). Note that this COC **will** be enforced.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/drf-forms/drf-schema-adapter",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-schema-adapter",
    "package_url": "https://pypi.org/project/drf-schema-adapter/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-schema-adapter/",
    "project_urls": {
      "Homepage": "https://github.com/drf-forms/drf-schema-adapter"
    },
    "release_url": "https://pypi.org/project/drf-schema-adapter/2.0.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Making using Django with frontend libraries and frameworks DRYer",
    "version": "2.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17237454,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcd96321faa488222ee4c3e50151c0dd9a82e08f41fc50ab3c6f9deb897659c3",
        "md5": "26f9ee5be620703950e071928c607e38",
        "sha256": "1e98776868eba2fd21ba38422ae12a1f05cf8e99a0c74c144535c78bc8422660"
      },
      "downloads": -1,
      "filename": "drf-schema-adapter-2.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "26f9ee5be620703950e071928c607e38",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31410,
      "upload_time": "2021-09-09T13:10:57",
      "upload_time_iso_8601": "2021-09-09T13:10:57.608478Z",
      "url": "https://files.pythonhosted.org/packages/bc/d9/6321faa488222ee4c3e50151c0dd9a82e08f41fc50ab3c6f9deb897659c3/drf-schema-adapter-2.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}