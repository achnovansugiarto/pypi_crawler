{
  "info": {
    "author": "Jordan Kowal",
    "author_email": "kowaljordan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Django Database Translation\n\n## **DESCRIPTION**\nNatively, Django only handles hardcoded text translation. This package aims to assist you in translating the entries of your database. It is fairly easy to setup and use, as demonstrated below.\n\nThe three main actions of the program are:\n- Automatically generates database entries for any field that must be translated\n- Allows you to access the translations directly from your model's admin\n- Easily translate your instances before pushing them in your template/context/json\n\n**Please note, this does not TRANSLATE for you**. It creates the entries in the database for your translations, which you have to fill. Here's how it works in practice:\n\n- I have registered 3 languages: French, English, Italian\n- I have registered the \"Project\" model and said it must be translated\n- I have registered 2 fields within the Project model, \"name\" and \"description\", as field that will require translations\n- Whenever I create a new project, 6 new translation entries will be create: \"name\" in 3 languages, and \"description\" in 3 languages.\n- If I go in my \"Project\" admin, I will be able to directly edit those 6 translations\n- To use translations in the frontend, simply translate your object using our utils functions before pushing them in your context/template/JSON\n\n**Note that this package works RETROACTIVELY**. Translation entries will be generated for all existing instances when deploying this app\n\n## **WHAT IT CONTAINS**\nHere's a quick recap of what this package contains:\n\n- 4 new database tables:\n  - `Field` (ddt_fields)\n  - `Item` (ddt_items)\n  - `Language` (ddt_languages)\n  - `Translation` (ddt_translations)\n- A few class extenders/templates:\n  - `TranslatedField` which is a Field that will be used for any field that must be translated\n  - `TranslatedModel` to extend any model that has at least one `TranslatedField`\n  - `TranslatedAdmin` to extend any admin whose model inherits from `TranslatedModel`\n- A few tools for language selection:\n  - `LanguageSelection`, a form that can be used in the frontend to pick a language\n  - `update_user_language`, a function that updates the user language for both django and our app\n- A few tools for getting translations\n  - `all_instances_as_translated_dict`: Applies 'instance_as_translated_dict' to the iterable of instances\n  - `get_current_language`: Returns the Language instance used by our user or sets a default\n  - `instance_as_translated_dict`: Returns a model instance into a dict containing all of its fields\n\nIt contains other elements, but this is what you will be using 99% of the time.\n\n## **SETUP**\n\n### **1. Installation**\nFirst, we must install the package:\n\n- Install the package with `pip install django-database-translation`\n- In `settings.py`, in your `INSTALLED_APPS`, add `\"django_database_translation\"` (note that we are using **underscores** this time)\n- Then run the `python manage.py makemigrations django_database_translation` command\n- Then run the `python manage.py migrate django_database_translation` command to create the 4 new tables\n\n### **2. Updating your models**\nThe point here is to \"flag\" which models have fields that must be translated. As a result, we will **extend** the models, and **change** the fields:\n\n- Extend a model using `TranslatedModel` for any model that contains TranslatedFields\n- Change any field that will be translated to a `TranslatedField` (it is a ForeignKey to our Item model)\n\nHere's an example of code:\n\n```python\nfrom datetime import datetime\nfrom django.db import models\nfrom django_database_translation.fields import TranslatedField\nfrom django_database_translation.models import TranslatedModel\n\nclass Project(TranslatedModel):  # <-- Extended class\n    title = TranslatedField(  # <-- Field changed\n        related_name=\"portfolio_project_title\",\n        verbose_name=\"Title\"\n    )\n    description = TranslatedField(  # <-- Field changed\n        related_name=\"portfolio_project_description\",\n        verbose_name=\"Description\"\n    )\n    date_posted = models.DateField(\n        db_index=True,\n        default=datetime.now,\n        help_text=\"Date displayed on the frontend\",\n        null=False,\n        verbose_name=\"Posted on\",\n    )\n```\n\nOnce you're all done, run the `makemigrations` and `migrate` commands to update your own database with your new changes.\n\n### **3. Updating your admins**\nNow that our models have been updated, we can update their admins. Note that you must only update the admins of models that have been extended with `TranslatedModel`.\n\nSimply extend your admin using the `TranslatedAdmin` class:\n\n```python\nfrom django.contrib import admin\nfrom django_database_translation.admin import TranslatedAdmin\nfrom .models import Project\n\n@admin.register(Project)\nclass ProjectAdmin(TranslatedAdmin):  # <-- Extended class\n    # Your code here\n```\n\nNow you will be able to edit translations directly from your admins.\n\n### **4. Manually fill Language and Field in the admin**\nNow we need to manually create a few entries in both our `Language` and `Field` models. Do not worry about `Item` and `Translation`, their content will be generated automatically.\n\n#### **--> Language**\nIn this table, simply create all the languages available on your website. Make sure that the `django_language_name` matches an entry in `LANGUAGES` from `settings.py`.\n\n```python\n# If settings.py is like this:\nLANGUAGES = (\n    (\"fr-fr\", \"FranÃ§ais\"),\n    (\"en-us\", \"English\"),\n)\n# Make sure your \"django_language_name\" is either \"fr-fr\" or \"en-us\"\n```\n\n#### **--> Field**\nHere you must simply register all the fields you've changed to `TranslatedField`. Make sure their name matches the actual name of the field.\n\n### **5. Translate your entries**\nNow that everything is setup, you can go in your admin and go in any of your database entry. If it is a model that uses `TranslatedModel` and its admin is `TranslatedAdmin`, you'll be able to see the translations directly in its admin. Go ahead and translate anything that must be translated.\n\n## **SHOWING TRANSLATIONS**\n### **1. Updating the user language**\nSince you're translating your database, you are probably also translating all of your HTML/Python texts, meaning you are using django built-in `i18n` and `translation` modules (gettext, etc.). To make life easier, we created the `update_user_language` function. It will update both django and our module current language for this user. Here's how it works:\n- Have a form where the user can choose its language\n- Make sure to use our `Language` entries as available choices\n- When the users POST the form (and `form.is_valid()`), call this function with the request object and the chosen Language id.\n- The session will be updated using your Language `instance.django_language_name`\n\nExample:\n\n```python\n# We call this when the form is valid\ndef form_valid(self, form):\n    # (...)\n    language_id = form.cleaned_data['language_id']\n    update_user_language(self.request, language_id=language_id)\n    # (...)\n```\n\nTo gain some time, you can use the `LanguageSelection` form as your form for the language selection. It is a form with:\n- Only one field: the language id\n- This field is a ChoiceField\n- The available choices are the Language entries\n- Uses either a RADIO for the form rendering\n\nHere is a full example of a view that is accessible everywhere on a website:\n\n```python\nfrom django.shortcuts import redirecte\nfrom django.views.generic import View\nfrom django_database_translation.forms import LanguageSelection\nfrom django_database_translation.utils import update_user_language\n\nclass UpdateLanguageSelection(View):\n    \"\"\"\n    View only reachable through POST that allows you to select your language\n    A form sending a POST request to this view is available on every page:\n    - The form is in our context_processor\n    - The main.html renders the form\n    \"\"\"\n\n    # ----------------------------------------\n    # Settings\n    # ----------------------------------------\n    form_class = LanguageSelection\n\n    # ----------------------------------------\n    # Core Methods\n    # ----------------------------------------\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        Defines how to handle a GET request.\n        In this case, they are not allowed and will be redirected\n        \"\"\"\n        return self.redirect_to_current_page()\n\n    def post(self, request, *args, **kwargs):\n        \"\"\"\n        Defines how to handle a POST request.\n        It will update the user session language.\n        \"\"\"\n        form = self.form_class(request.POST)\n        if form.is_valid():\n            response = self.form_valid(form)\n        else:\n            response = self.form_invalid(form)\n        return response\n\n    # ----------------------------------------\n    # Helper Methods\n    # ----------------------------------------\n    def form_invalid(self, form):\n        \"\"\"Simply redirects to the current page\"\"\"\n        return self.redirect_to_current_page()\n\n    def form_valid(self, form):\n        \"\"\"\n        Called if the form is valid and data has been cleaned\n        Updates the user current language then redirects him to the current page\n        \"\"\"\n        language_id = form.cleaned_data['language_id']\n        update_user_language(self.request, language_id=language_id)\n        return self.redirect_to_current_page()\n\n    def redirect_to_current_page(self):\n        \"\"\"Reloads the current page or redirects you to the homepage\"\"\"\n        current_page = self.request.META['HTTP_REFERER']\n        if not current_page:\n            current_page = \"home\"\n        return redirect(current_page)\n```\n\n### **2. Displaying the translations**\nThe last thing left to do is to display the translations. Our instances have keys to `Item`, which then have keys to `Translation`. To get the translations, we need to pair an `Item` with a `Language`.\n\nFirst off, get the language using our `get_current_language`. This will return the user's current `Language` instance.\n\nThen, before sending your object(s) in the template/context/JSON, translate them using `instance_as_translated_dict` or `all_instances_as_translated_dict`. Your instances will become dictionaries, and your `Item` keys will automatically be replaced with your translated text. Those two functions can either be given a `language`, or guess it themselves by using the `request` arg. If you're going to make several translations in the same functions, get the `language` first. This will avoid making a new database request each time to guess the language.\n\nYou'll find below an example with a Project model and a Job model, where we:\n- Translate projects by overriding the `get_queryset` method\n- Get and translate jobs by overriding the `get_context_data` method\n- In one case, we get the language THEN translate\n- In the other case, we simply push the request, and the function will guess the language\n- (This is done only as a showcase)\n\n```python\nfrom django.utils.translation import gettext\nfrom django.views.generic import ListView\nfrom django_database_translation.utils import all_instances_as_translated_dict, get_current_language\nfrom .models import Job, Project\n\nclass ProjectList(ListView):\n    # ----------------------------------------\n    # Settings\n    # ----------------------------------------\n    model = Project\n    template_name = \"portfolio/pages/portfolio.html\"\n    context_object_name = \"projects\"\n    ordering = [\"-date_posted\"]\n\n    # ----------------------------------------\n    # Overridden Methods\n    # ----------------------------------------\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        The method was overridden to do the following:\n            - Add the 'meta_title' to the context\n            - Add the active 'jobs' to the context and translating their data\n        \"\"\"\n        # Get the Job instances and translate them using the request\n        all_jobs = Job.objects.all()\n        jobs = filter(lambda x: x.count_projects(), all_jobs)\n        jobs = all_instances_as_translated_dict(jobs, depth=True, request=self.request)\n        # Update the context\n        context = super(ProjectList, self).get_context_data(**kwargs)\n        context.update({\n            \"meta_title\": gettext(\"portoflio_meta_title\"),\n            \"jobs\": jobs,\n        })\n        return context\n\n    def get_queryset(self):\n        # We get the language first, then use it for our translation\n        language = get_current_language(self.request)\n        query = Project.objects.filter(active=True)\n        query = all_instances_as_translated_dict(query, depth=True, language=language)\n        return query\n```\n\n## **ADDTIONAL INFORMATION**\n\n### **Translate with depth**\nIn the example above, with Project and Job, you'll notice we translated them using `depth=True`. It means that if our `TranslatedModel` has foreign keys to other models, those models will also be translated. In this case, if `Project` has a FK to `Job`, we can acces `Job.name` by:\n- Using `project[\"job\"][\"name\"]` in python (*fields are now keys, not attributes*)\n- Using `project.job.name` in html/templates (*same syntax as normal instances*)\n\n### **How to translate a form that uses the database**\nSometimes, your form will have `ChoiceField` generated from your database. If the table used is a `TranslatedModel`, you'll need to get the right language for your form. Since a form doesn't have access to the `request` object, you need to pass either the `language` or the `request` in your form init method. Here's an example on how to do it:\n\n```python\n# In your FORM, override the __init__ method like so:\ndef __init__(self, *args, **kwargs):\n    self.language = kwargs.pop(\"language\", None)\n    super(YourFormName, self).__init__(*args, **kwargs)\n\n# In your VIEW, call the form like so:\ndef function_inside_your_view(self):\n    # (...)\n    request = self.request\n    language = get_current_language(request)\n    form = self.form_class(request.GET, language=language) # (or .POST, etc.)\n    # (...)\n```\n\n### **Model.objects.bulk_create()**\nIf a model inherits from `TranslatedModel`, it will not be able to use its `.bulk_create()` method. We are forced deactivate it as our program uses **signals** to work, and `.bulk_create()` does not trigger signals.\n\n### **More info on the utils functions**\nHere's a closer look on the utils functions:\n\n```python\n# --------------------------------------------------------------------------------\n# > Imports\n# --------------------------------------------------------------------------------\nfrom django.db import models\nfrom django.db.models.fields.files import ImageFieldFile, FieldFile\nfrom django.utils.translation import activate, LANGUAGE_SESSION_KEY\nfrom .models import Item, Language, Translation\n\n\n# --------------------------------------------------------------------------------\n# > Functions\n# --------------------------------------------------------------------------------\ndef all_instances_as_translated_dict(instances, depth=True, language=None, request=None):\n    \"\"\"\n    Description:\n        Applies 'instance_as_translated_dict' to the iterable of instances\n        Returns a list of dicts which contains the fields of all your instances\n        Check the 'instance_as_translated_dict' for more info\n    Args:\n        instances (iterable): An iterable of your model instances\n        depth (bool, optional): Determines if FK will also be transformed into dicts. Defaults to True.\n        language (Language, optional): A Language instance from this app. Defaults to None.\n        request (HttpRequest, option): HttpRequest from Django. Defaults to None.\n    Returns:\n        list: A list of dicts, where each dict contains the fields/values of the initial instances\n    \"\"\"\n    # Checking arguments\n    if language is None and request is None:\n        raise TypeError(\"You must provide either 'language' or 'request'\")\n    # Get the language from the session\n    if language is None:\n        language = get_current_language(request)\n    # Loop over instances\n    results = []\n    for instance in instances:\n        result = instance_as_translated_dict(instance, depth=depth, language=language)\n        results.append(result)\n    return results\n\n\ndef get_current_language(request, set_default=True, default_id=1):\n    \"\"\"\n    Description:\n        Returns the current active language. Will set a default language if none is found.\n    Args:\n        request (HttpRequest): HttpRequest from Django\n        set_default (Boolean): Indicates if a default language must be activated (if none currently is). Default to True.\n        default_id (Integer): The PK for the default Language instance. Default to 1\n    Returns:\n        Language: The currently used language from our app's Language model\n    \"\"\"\n    # Base variables\n    language = None\n    language_name = request.session.get(LANGUAGE_SESSION_KEY, False)\n    # Get the language\n    if language_name:\n        try:\n            language = Language.objects.get(django_language_name=language_name)\n        except Language.DoesNotExist:\n            pass\n    # Set a default language if necessary\n    if language is None and set_default:\n        language = set_default_language(request, default_id)\n    # Always return the active language\n    return language\n\n\ndef get_translation(language, item_id):\n    \"\"\"\n    Description:\n        Returns a translated text using an Item id and a Language instance\n    Args:\n        language (Language): Language instance from this app\n        item_id (int): Key contained in the 'translated field'\n    Returns:\n        str: The translated text\n    \"\"\"\n    translation = \"\"\n    try:\n        entry = Translation.objects.get(language=language, item_id=item_id)\n        translation = entry.text\n    except Translation.DoesNotExist:\n        pass\n    return translation\n\n\ndef instance_as_translated_dict(instance, depth=True, language=None, request=None):\n    \"\"\"\n    Description:\n        Returns a model instance into a dict containing all of its fields\n        Language can be given as an argument, or guess through the user of \"request\"\n        With \"depth\" set to True, ForeignKey will also be transformed into sub-dict\n        Files and images are replaced by a subdict with 'path', 'url', and 'name' keys\n        Meaning you will be able to manipulate the dict in an HTML template much like an instance\n    Args:\n        instance (Model): An instance from any of your models\n        depth (bool, optional): Determines if FK will also be transformed into dicts. Defaults to True.\n        language (Language, optional): A Language instance from this app. Defaults to None.\n        request (HttpRequest, option): HttpRequest from Django. Defaults to None.\n    Returns:\n        dict: A dict with all of the instance's fields and values\n    \"\"\"\n    # Checking arguments\n    if language is None and request is None:\n        raise TypeError(\"You must provide either 'language' or 'request'\")\n    # Get the language from the session\n    if language is None:\n        language = get_current_language(request)\n    # Loop over fields\n    translated_dict = {}\n    fields = instance._meta.get_fields()\n    for field in fields:\n        value = getattr(instance, field.name, None)\n        if value is not None:\n            value_type = type(value)\n            # Case 1: Get the translation\n            if value_type == Item:\n                new_value = Translation.objects.get(item=value, language=language).text\n            # Case 2: Go to the linked model and repeat the process (unless depth=False)\n            elif issubclass(value_type, models.Model):\n                if depth:\n                    new_value = instance_as_translated_dict(value, depth=True, language=language)\n                else:\n                    new_value = value\n            # Case 3:\n            elif value_type in {ImageFieldFile, FieldFile}:\n                if value:\n                    new_value = {\n                        \"name\": getattr(value, \"name\", \"\"),\n                        \"url\": getattr(value, \"url\", \"\"),\n                        \"path\": getattr(value, \"path\", \"\"),\n                    }\n                else:\n                    new_value = \"\"\n            # Case 4: Keep the value as it is\n            else:\n                new_value = value\n            translated_dict[field.name] = new_value\n    return translated_dict\n\n\ndef set_default_language(request, pk=1):\n    \"\"\"Sets the default language if none is chosen\"\"\"\n    language = Language.objects.get(id=pk)\n    update_user_language(request, language=language)\n    return language\n\n\ndef update_user_language(request, language=None, language_id=None):\n    \"\"\"\n    Description:\n        Updates the user current language following Django guildelines\n        This will allow for both \"Django\" frontend translations and \"our app\" database translation\n        The new language must be passed either through a Language instance or an ID\n    Args:\n        request (HttpRequest): Request object from Django, used to get to the session\n        language (Language, optional): A Language instance from this app. Defaults to None.\n        language_id (id, optional): ID of the language in our database. Defaults to None.\n    \"\"\"\n    # Checking arguments\n    if language is None and language_id is None:\n        raise TypeError(\"You must provide either 'language' or 'language_id'\")\n    # Get the language from the session\n    if language is None:\n        language = Language.objects.get(id=language_id)\n    # Update the user's language\n    activate(language.django_language_name)\n    request.session[LANGUAGE_SESSION_KEY] = language.django_language_name\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Jordan-Kowal/django_database_translation/archive/v1.1.4.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Jordan-Kowal/django_database_translation",
    "keywords": "django,database,db,translation,translate,backend",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-database-translation",
    "package_url": "https://pypi.org/project/django-database-translation/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-database-translation/",
    "project_urls": {
      "Download": "https://github.com/Jordan-Kowal/django_database_translation/archive/v1.1.4.tar.gz",
      "Homepage": "https://github.com/Jordan-Kowal/django_database_translation"
    },
    "release_url": "https://pypi.org/project/django-database-translation/1.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Package to handle database translation in your Django apps",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10466960,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd7556e32c069add84bb81ba729443213e8c2f5208db2f666b353d1f63f8dd3f",
        "md5": "d1588094133424718e3ab4816aa0f954",
        "sha256": "6d48b08142b8e13c7c5c67c4ac89faf418618267f7738b6c793e6230d3ecc967"
      },
      "downloads": -1,
      "filename": "django_database_translation-1.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1588094133424718e3ab4816aa0f954",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22203,
      "upload_time": "2019-12-13T20:53:06",
      "upload_time_iso_8601": "2019-12-13T20:53:06.540553Z",
      "url": "https://files.pythonhosted.org/packages/bd/75/56e32c069add84bb81ba729443213e8c2f5208db2f666b353d1f63f8dd3f/django_database_translation-1.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45f8e71652e41b75162ccae3dd0e211b139141b5ceb04760aa50d74aca48b79c",
        "md5": "58613f4c8d0bc65433d625102cc9308c",
        "sha256": "5325d2ce228351f102425238f30065362902945114e2e9a55332186f515c6e33"
      },
      "downloads": -1,
      "filename": "django_database_translation-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "58613f4c8d0bc65433d625102cc9308c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24016,
      "upload_time": "2019-12-13T20:53:08",
      "upload_time_iso_8601": "2019-12-13T20:53:08.300018Z",
      "url": "https://files.pythonhosted.org/packages/45/f8/e71652e41b75162ccae3dd0e211b139141b5ceb04760aa50d74aca48b79c/django_database_translation-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}