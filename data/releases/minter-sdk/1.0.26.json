{
  "info": {
    "author": "U-node Team",
    "author_email": "rymka1989@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\" background=\"black\"><img src=\"un_top.svg\" width=\"450\"></p>\n\n<p align=\"center\">\n</p>\n\nPython SDK\n\nPorted from official Minter's <a href=\"https://github.com/MinterTeam/minter-php-sdk\">php SDK</a>\n\nCreated by <a href=\"https://www.u-node.net\">https://www.u-node.net</a>'s masternode co-founder Roman Matusevich \n\nYou can support our project by sending any Minter's coins to our wallet Mx6e0cd64694b1e143adaa7d4914080e748837aec9\n\nFeel free to delegate to our 3% masternode Mp02bc3c3f77d5ab9732ef9fc3801a6d72dc18f88328c14dc735648abfe551f50f\n\n\n# Installation\n`pip install minter-sdk`\n\n\n\n# Using API\n```python\nfrom mintersdk.minterapi import MinterAPI\n\nnode_url = 'https://minter-node-1.testnet.minter.network:8841'  # Example of a node url\napi = MinterAPI(api_url=node_url)\n\n# 'connect_timeout', 'read_timeout', 'headers' kwargs would be passed to request, if provided\napi = MinterAPI(api_url=node_url, connect_timeout=1, read_timeout=3, headers={})\n```\nNumeric strings automatically are converted to integers in `response['result']` dict.\n\nSome API methods accept `pip2bip (bool)` argument to convert coin values from PIP to BIP.  \nValues are `Decimal` type after conversion.\n\n## Methods\n- `get_addresses(addresses, height=None, pip2bip=False)`  \n  Returns addresses balances.\n\n- `get_balance(address, height=None, pip2bip=False)`  \n  Returns coins list, balance and transaction count (for nonce) of an address.\n\n- `get_block(height, pip2bip=False)`\n  Returns block data at given height.\n\n- `get_candidate(public_key, height=None, pip2bip=False)`  \n  Returns candidateâ€™s info by provided public_key. It will respond with 404 code if candidate is not found.\n\n- `get_candidates(height=None, include_stakes=False, pip2bip=False)`  \n  Returns list of candidates.\n\n- `get_coin_info(symbol, height=None, pip2bip=False)`  \n  Returns information about coin. Note: this method does not return information about base coins (MNT and BIP).\n\n- `get_events(height, pip2bip=False)`  \n  Returns events at given height.\n\n- `get_genesis(pip2bip=False)`  \n  Return network genesis.\n\n- `get_latest_block_height()`  \n  Returns latest block height.\n\n- `get_max_gas_price(height=None)`  \n  Returns current max gas price.\n\n- `get_min_gas_price()`  \n  Returns current min gas price.\n\n- `get_missed_blocks(public_key, height=None)`  \n  Returns missed blocks by validator public key.\n\n- `get_network_info()`  \n  Return node network information.\n\n- `get_nonce(address)`  \n  Returns next transaction number (nonce) of an address.\n\n- `get_status()`  \n  Returns node status info.\n\n- `get_transaction(tx_hash, pip2bip=False)`  \n  Returns transaction info.\n\n- `get_transactions(query, page=None, limit=None, pip2bip=False)`  \n  Return transactions by query.\n\n- `get_unconfirmed_transactions(limit=None)`  \n  Returns unconfirmed transactions.\n\n- `get_validators(height=None, page=None, limit=None)`  \n  Returns list of active validators.\n\n- `estimate_coin_buy(coin_to_sell, value_to_buy, coin_to_buy, height=None, pip2bip=False)`  \n  Return estimate of buy coin transaction.  \n  Provide value in PIP if `pip2bip is False` or in BIP if `pip2bip is True`\n\n- `estimate_coin_sell(coin_to_sell, value_to_sell, coin_to_buy, height=None, pip2bip=False)`  \n  Return estimate of sell coin transaction.  \n  Provide value in PIP if `pip2bip is False` or in BIP if `pip2bip is True`\n\n- `estimate_coin_sell_all(coin_to_sell, value_to_sell, coin_to_buy, height=None, pip2bip=False)`  \n  Return estimate of sell all coin transaction.  \n  Provide value in PIP if `pip2bip is False` or in BIP if `pip2bip is True`\n\n- `estimate_tx_commission(tx, height=None, pip2bip=False)`  \n  Return estimate of transaction.\n\n- `send_transaction(tx)`  \n  Returns the result of sending signed tx.\n\n\n\n# SDK use\n## Create transactions\nEach Minter transaction requires `nonce, gas_coin` to be passed.  Also you can pass `payload, chain_id, gas_price`.\n\n`MiterTx(nonce, gas_coin, payload='', service_data='', chain_id=1, gas_price=1, **kwargs)`\n\n**To create Minter transaction you MUST use concrete transaction class.**\n\nAll transaction values should be passed in BIP, you shouldn't convert them to PIP.  \nAll coin symbols are case insensitive, e.g. you can pass `gas_coin='BIP'` or `gas_coin='bip'`\n\n### Transactions\n- MinterBuyCoinTx\n  ```python\n  from mintersdk.sdk.transactions import MinterBuyCoinTx\n  tx = MinterBuyCoinTx(coin_to_buy='SYMBOL', value_to_buy=1, coin_to_sell='SYMBOL', max_value_to_sell=2, nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterCreateCoinTx\n  ```python\n  from mintersdk.sdk.transactions import MinterCreateCoinTx\n  tx = MinterCreateCoinTx(name='Coin description', symbol='SYMBOL', initial_amount=1.5, initial_reserve=10000, crr=50, max_supply=1000, nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterDeclareCandidacyTx\n  ```python\n  from mintersdk.sdk.transactions import MinterDeclareCandidacyTx\n  tx = MinterDeclareCandidacyTx(address='Mx...', pub_key='Mp...', commission=1, coin='SYMBOL', stake=100, nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterDelegateTx\n  ```python\n  from mintersdk.sdk.transactions import MinterDelegateTx\n  tx = MinterDelegateTx(pub_key='Mp...', coin='SYMBOL', stake=100, nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterRedeemCheckTx\n  ```python\n  from mintersdk.sdk.transactions import MinterRedeemCheckTx\n  tx = MinterRedeemCheckTx(check='check hash str', proof='proof hash str', nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterSellAllCoinTx\n  ```python\n  from mintersdk.sdk.transactions import MinterSellAllCoinTx\n  tx = MinterSellAllCoinTx(coin_to_sell='SYMBOL', coin_to_buy='SYMBOL', min_value_to_buy=100, nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterSellCoinTx\n  ```python\n  from mintersdk.sdk.transactions import MinterSellCoinTx\n  tx = MinterSellCoinTx(coin_to_sell='SYMBOL', value_to_sell=1, coin_to_buy='SYMBOL', min_value_to_buy=2, nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterSendCoinTx\n  ```python\n  from mintersdk.sdk.transactions import MinterSendCoinTx\n  tx = MinterSendCoinTx(coin='SYMBOL', to='Mx...', value=5, nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterMultiSendCoinTx\n  ```python\n  from mintersdk.sdk.transactions import MinterMultiSendCoinTx\n\n  txs = [\n      {'coin': 'SYMBOL', 'to': 'Mx..1', 'value': 5},\n      {'coin': 'SYMBOL', 'to': 'Mx..2', 'value': 1},\n      {'coin': 'SYMBOL', 'to': 'Mx..3', 'value': 4}\n  ]\n  tx = MinterMultiSendCoinTx(txs=txs, nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterSetCandidateOffTx\n  ```python\n  from mintersdk.sdk.transactions import MinterSetCandidateOffTx\n  tx = MinterSetCandidateOffTx(pub_key='Mp...', nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterSetCandidateOnTx\n  ```python\n  from mintersdk.sdk.transactions import MinterSetCandidateOnTx\n  tx = MinterSetCandidateOnTx(pub_key='Mp...', nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterUnbondTx\n  ```python\n  from mintersdk.sdk.transactions import MinterUnbondTx\n  tx = MinterUnbondTx(pub_key='Mp...', coin='SYMBOL', value=100, nonce=1, gas_coin='SYMBOL')\n  ```\n\n- MinterEditCandidateTx\n  ```python\n  from mintersdk.sdk.transactions import MinterEditCandidateTx\n  tx = MinterEditCandidateTx(pub_key='Mp...', reward_address='Mx...', owner_address='Mx...', nonce=1, gas_coin='SYMBOL')\n  ```\n\n\n## Sign transaction\nWhen your transaction object is created, you can sign it.\nEvery transaction can be signed by private key or/and by signature.  \nKeep in mind, we have some `tx = MinterSomeTx(...)` and API `api = MinterAPI(...)`\n\n- Sign single signature type transaction\n  ```python\n  # Sign with private key\n  tx.sign(private_key='PRIVATE_KEY')\n\n  # Sign with signature\n  tx.signature_type = tx.SIGNATURE_SINGLE_TYPE\n\n  signature = tx.generate_signature(private_key='PRIVATE_KEY')\n\n  tx.sign(signature=signature)\n  ```\n\n- Sign multi signature type transaction\n  ```python\n  # Sign with private keys\n  tx.sign(private_key=['PRIVATE_KEY_1', 'PRIVATE_KEY_2', ...], ms_address='Multisig address Mx...')\n\n  # Sign with signatures\n  tx.signature_type = tx.SIGNATURE_MULTI_TYPE\n\n  signature_1 = tx.generate_signature(private_key='PRIVATE_KEY_1')\n  signature_2 = tx.generate_signature(private_key='PRIVATE_KEY_2')\n\n  tx.sign(signature=[signature_1, signature_2], ms_address='Multisig address Mx...')\n\n  # Sign with both private keys and signatures\n  tx.signature_type = tx.SIGNATURE_MULTI_TYPE\n\n  private_key_1 = 'PRIVATE_KEY_1'\n  private_key_2 = 'PRIVATE_KEY_2'\n\n  signature_1 = tx.generate_signature(private_key='PRIVATE_KEY_3')\n  signature_2 = tx.generate_signature(private_key='PRIVATE_KEY_4')\n\n  tx.sign(private_key=[private_key_1, private_key_2], signature=[signature_1, signature_2], ms_address='Multisig address Mx...'))\n  ```\n\nAs you see above, to generate signature we must set transaction `signature_type` before generating signature.  \n\nYou can set this argument while creating transaction.  \n`tx = MinterSomeTx(..., signature_type=MinterTx.SIGNATURE_MULTI_TYPE)`  \n`tx = MinterSomeTx(..., signature_type=MinterTx.SIGNATURE_SINGLE_TYPE)`  \n\nAfter that you can simply generate signature without setting it's signature type by overriding attribute.   \n`signature = tx.generate_signature(private_key='PRIVATE_KEY')`\n\n### Adding signature to multi signature type transaction\nWhen multi signature transaction is created it can be partially signed, e.g. signed by 2 of 3 private keys.  \nThen partially signed transaction can be transferred to another client and this client can add own signature to transaction.  \n```python\nfrom mintersdk.sdk.transactions import MinterTx\n\n# Client 1\n# Create transaction\ntx = MinterSomeTx(...)\n\n# Sign transaction\ntx.sign(private_key=['PK_1', 'PK_2'], ms_address='Mx...')\n\n# Then tx.signed_tx is transferred to Client 2\n\n\n# Client 2\n# Received raw_tx (tx.signed_tx from Client 1)\ntx = MinterTx.add_signature(signed_tx=raw_tx, private_key='PK_3')\n```  \nClient 2 will get new tx object with client's 2 signature.  \nClient 2 may pass `tx.signed_tx` to next client or just send `tx.signed_tx` to the network.\n\n\n## Send transaction\nWhen transaction is created and signed, you can send transaction to network. Signed transaction for sending can be found in `tx.signed_tx` attribute.  \n```python\n# Create transaction\ntx = MinterSomeTx(...)\n\n# Sign transaction\ntx.sign(...)\n\n# Send transaction\nresponse = api.send_transaction(tx=tx.signed_tx)\n```\n\n\n\n# Create transaction from raw\nYou can create transaction object from raw transaction hash. You will get tx object of tx type.\n\n```python\nfrom mintersdk.sdk.transactions import MinterTx\n\ntx = MinterTx.from_raw(raw_tx='...')\n```\n\n\n\n# Minter deeplink\nLet's create a MinterSendCoinTx\n```python\nfrom mintersdk.sdk.transactions import MinterSendCoinTx\ntx = MinterSendCoinTx(coin='BIP', to='Mx18467bbb64a8edf890201d526c35957d82be3d95', value=1.23456789, nonce=1, gas_coin='MNT', gas_price=1, payload='Hello World')\n```\n\nNow it's time to create deeplink\n```python\nfrom mintersdk.sdk.deeplink import MinterDeeplink\ndl = MinterDeeplink(tx=tx, data_only=False)\n\n# Deeplink is generated by all tx params (nonce, gas_price, gas_coin, payload) by default.\n# If you want to create deeplink only by tx data, set `data_only=True`\n```\n\nAfter deeplink object is created, you can override it's attributes, e.g.\n```python\ndl = MinterDeeplink(tx=tx)\ndl.nonce = ''\ndl.gas_coin = 'MNT'\ndl.gas_price = 10\n```\n\nWhen your deeplink object is ready, generate it\n```python\nurl_link = dl.generate()\n\n# If password check is needed, pass password to generate method\nurl_link = dl.generate(password='mystrongpassword')\n```\n\nThen you might want to create QR-code from your deeplink\n```python\nfrom mintersdk import MinterHelper\nqr_code_filepath = MinterHelper.generate_qr(text=url_link)\n\n# For additional params information for `MinterHelper.generate_qr()`, please see sourcecode for this method.\n```\n\n\n\n# Minter check\n## Create and sign check\n```python\nfrom mintersdk.sdk.check import MinterCheck\n\n# Create check without password\ncheck = MinterCheck(nonce=1, due_block=300000, coin='MNT', value=1, gas_coin='MNT')\n\n# Or create check with password\ncheck = MinterCheck(nonce=1, due_block=300000, coin='MNT', value=1, gas_coin='MNT', passphrase='pass')\n\n# Sign check\nsigned_check = check.sign(private_key='PRIVATE_KEY')\n```\n\n\n## Create proof\n```python\nfrom mintersdk.sdk.check import MinterCheck\n\nproof = MinterCheck.proof(address='Mx...', passphrase='pass')\n```\n\n\n## Create check object from raw\n```python\nfrom mintersdk.sdk.check import MinterCheck\n\n# Create and sign check\ncheck = MinterCheck(nonce=1, due_block=300000, coin='MNT', value=1, gas_coin='MNT')\nsigned_check = check.sign(private_key='PRIVATE_KEY')\n\n# Create object from signed check\ncheck = MinterCheck.from_raw(rawcheck=signed_check)\n```\n\n\n\n# Minter Wallet\n```python\nfrom mintersdk.sdk.wallet import MinterWallet\n\n# Create new wallet\nwallet = MinterWallet.create()\n\n# Get wallet data from existing mnemonic\nwallet = MinterWallet.create(mnemonic='YOUR MNEMONIC PHRASE')\n```\n\n\n\n# Helpers\n## Convert between PIP and BIP\n```python\nfrom mintersdk.shortcuts import to_pip, to_bip\n\n# Get BIP from PIP\npip_value = 1000000000000000000\nbip_value = to_bip(pip_value)\n\n# Get PIP from BIP\nbip_value = 100\npip_value = to_pip(bip_value)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/U-node/minter-sdk",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minter-sdk",
    "package_url": "https://pypi.org/project/minter-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/minter-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/U-node/minter-sdk"
    },
    "release_url": "https://pypi.org/project/minter-sdk/1.0.26/",
    "requires_dist": [
      "rlp",
      "bitcoin",
      "mnemonic",
      "base58",
      "pysha3",
      "requests",
      "pyqrcode",
      "deprecated"
    ],
    "requires_python": "",
    "summary": "Python SDK for Minter Network",
    "version": "1.0.26",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7347135,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a57d177bb26b28d36c5883ddc57c6e2c605e93d951c23fcf63ed4529c1b8662f",
        "md5": "1737f77d54c5194aab1bb323a32fa2b6",
        "sha256": "36051729788a318755d94fbb35db991687bd51fe4199c8242dd676cef8e6cc50"
      },
      "downloads": -1,
      "filename": "minter_sdk-1.0.26-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1737f77d54c5194aab1bb323a32fa2b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 64530,
      "upload_time": "2020-03-27T18:21:23",
      "upload_time_iso_8601": "2020-03-27T18:21:23.841893Z",
      "url": "https://files.pythonhosted.org/packages/a5/7d/177bb26b28d36c5883ddc57c6e2c605e93d951c23fcf63ed4529c1b8662f/minter_sdk-1.0.26-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d788171e435198dd6f96619e8b938473e60035de0b8fcb44471557dc78256eb7",
        "md5": "d424514b5610025bfdc27cb99d068278",
        "sha256": "f8ee91134cd542dcb5b4a0d4a9a66a88866dc1272cfd27c9567e52f968a170e5"
      },
      "downloads": -1,
      "filename": "minter-sdk-1.0.26.tar.gz",
      "has_sig": false,
      "md5_digest": "d424514b5610025bfdc27cb99d068278",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 55619,
      "upload_time": "2020-03-27T18:21:25",
      "upload_time_iso_8601": "2020-03-27T18:21:25.665682Z",
      "url": "https://files.pythonhosted.org/packages/d7/88/171e435198dd6f96619e8b938473e60035de0b8fcb44471557dc78256eb7/minter-sdk-1.0.26.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}