{
  "info": {
    "author": "Bradley Ayers",
    "author_email": "bradley.ayers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "django-tables2 - An app for creating HTML tables\n================================================\n\n|Build status|\n\ndjango-tables2 simplifies the task of turning sets of data into HTML\ntables. It has native support for pagination and sorting. It does for\nHTML tables what ``django.forms`` does for HTML forms. e.g.\n\n.. figure:: http://dl.dropbox.com/u/33499139/django-tables2/example.png\n   :alt: An example table rendered using django-tables2\n\n   An example table rendered using django-tables2\nIts features include:\n\n-  Any iterable can be a data-source, but special support for Django\n   querysets is included.\n-  The builtin UI does not rely on JavaScript.\n-  Support for automatic table generation based on a Django model.\n-  Supports custom column functionality via subclassing.\n-  Pagination.\n-  Column based table sorting.\n-  Template tag to enable trivial rendering to HTML.\n-  Generic view mixin.\n\nExample\n=======\n\nCreating a table for a model ``Simple`` is as simple as:\n\n.. code:: python\n\n    import django_tables2 as tables\n\n    class SimpleTable(tables.Table):\n        class Meta:\n            model = Simple\n\nThis would then be used in a view:\n\n.. code:: python\n\n    def simple_list(request):\n        queryset = Simple.objects.all()\n        table = SimpleTable(queryset)\n        return render_to_response(\"simple_list.html\", {\"table\": table},\n                                  context_instance=RequestContext(request))\n\nAnd finally in the template:\n\n::\n\n    {% load django_tables2 %}\n    {% render_table table %}\n\nThis example shows one of the simplest cases, but django-tables2 can do\na lot more! Check out the\n`documentation <http://django-tables2.readthedocs.org/en/latest/>`__ for\nmore details.\n\nBuilding the documentation\n==========================\n\nIf you want to build the docs from within a virtualenv, and Sphinx is\ninstalled globally, use:\n\n::\n\n    make html SPHINXBUILD=\"python $(which sphinx-build)\"\n\nPublishing a release\n====================\n\n1. Bump the version in ``django-tables2/__init__.py``.\n2. Update ``README.md``.\n3. Run\n   ``python setup.py sdist upload --sign --identity=<your gpg identity>``.\n\nChange log\n==========\n\nv1.0.6\n------\n\n-  Support for custom text value in LinkColumn (#277 by\n   [@toudi](https://github.com/toudi))\n-  Refactor LinkColumn.render\\_link() to not escape twice #279\n-  Removed ``Attrs`` (wrapper for dict), deprecated on 2012-09-18\n\nv1.0.5\n------\n\n-  First version released by new maintainer\n   [@jieter](https://github.com/jieter)\n-  Dropped support for django 1.5 and 1.6, add python 3.5 with django\n   1.8 and 1.9 to the build matrix (#273)\n-  Prevent ``SingleTableView`` from calling ``get_queryset`` twice.\n   (fixes #155)\n-  Don't call managers when resolving accessors. (#214 by\n   [@mbertheau](https://github.com/mbertheau), fixes #211)\n\nv1.0.4\n------\n\n-  Fix bug in retrieving ``field.verbose_name`` under Django 1.8.\n\nv1.0.3\n------\n\n-  Remove setup.cfg as PyPI doesn't actually support it, instead it's a\n   distutils2 thing that's been discontinued.\n\nv1.0.2\n------\n\n-  Add setup.cfg to declare README.md for PyPI.\n\nv1.0.1\n------\n\n-  Convert README to markdown so it's formatted nicely on PyPI.\n\nv1.0.0\n------\n\n-  Travis CI builds pass.\n-  Added Python 3.4 support.\n-  Added Django 1.7 and Django 1.8 support.\n-  Dropped Python 2.6 and 3.2 support.\n-  Drop Django 1.2 support\n-  Convert tests to using py.test.\n\nv0.16.0\n-------\n\n-  Django 1.8 fixes\n-  ``BoundColumn.verbose_name`` now titlises only if no verbose\\_name\n   was given. ``verbose_name`` is used verbatim.\n-  Add max\\_length attribute to person CharField\n-  Add Swedish translation\n-  Update docs presentation on readthedocs\n\nv0.15.0\n-------\n\n-  Add UK, Russian, Spanish, Portuguese, and Polish translations\n-  Add support for computed table ``attrs``.\n\nv0.14.0\n-------\n\n-  ``querystring`` and ``seturlparam`` template tags now require the\n   request to be in the context (backwards incompatible) -- #127\n-  Add Travis CI support\n-  Add support for Django 1.5\n-  Add L10N control for columns #120 (ignored in < Django 1.3)\n-  Drop Python 2.6.4 support in favour of Python 3.2 support\n-  Non-queryset data ordering is different between Python 3 and 2. When\n   comparing different types, their truth values are now compared before\n   falling back to string representations of their type.\n\nv0.13.0\n-------\n\n-  Add FileColumn.\n\nv0.12.1\n-------\n\n-  When resolving an accessor, *all* exceptions are smothered into\n   ``None``.\n\nv0.12.0\n-------\n\n-  Improve performance by removing unnecessary queries\n-  Simplified pagination:\n\n-  ``Table.page`` is an instance attribute (no longer ``@property``)\n-  Exceptions raised by paginators (e.g. ``EmptyPage``) are no longer\n   smothered by ``Table.page``\n-  Pagination exceptions are raised by ``Table.paginate``\n-  ``RequestConfig`` can handles pagination errors silently, can be\n   disabled by including ``silent=False`` in the ``paginate`` argument\n   value\n\n-  Add ``DateTimeColumn`` and ``DateColumn`` to handle formatting\n   ``datetime`` and timezones.\n-  Add ``BooleanColumn`` to handle bool values\n-  ``render_table`` can now build and render a table for a queryset,\n   rather than needing to be passed a table instance\n-  Table columns created automatically from a model now use specialised\n   columns\n-  ``Column.render`` is now skipped if the value is considered *empty*,\n   the default value is used instead. Empty values are specified via\n   ``Column.empty_values``, by default is ``(None, '')`` (backward\n   incompatible)\n-  Default values can now be specified on table instances or\n   ``Table.Meta``\n-  Accessor's now honor ``alters_data`` during resolving. Fixes issue\n   that would delete all your data when a column had an accessor of\n   ``delete``\n-  Add ``default`` and ``value`` to context of ``TemplateColumn``\n-  Add cardinality indication to the pagination area of a table\n-  ``Attrs`` is deprecated, use ``dict`` instead\n\nv0.11.0\n-------\n\n-  Add ``URLColumn`` to render URLs in a data source into hyperlinks\n-  Add ``EmailColumn`` to render email addresses into hyperlinks\n-  ``TemplateColumn`` can now Django's template loaders to render from a\n   file\n\nv0.10.4\n-------\n\n-  Fix more bugs on Python 2.6.4, all tests now pass.\n\nv0.10.3\n-------\n\n-  Fix issues for Python 2.6.4 -- thanks Steve Sapovits & brianmay\n-  Reduce Django 1.3 dependency to Table.as\\_html -- thanks brianmay\n\nv0.10.2\n-------\n\n-  Fix MANIFEST.in to include example templates, thanks TWAC.\n-  Upgrade django-attest to fix problem with tests on Django 1.3.1\n\nv0.10.1\n-------\n\n-  Fixed support for Django 1.4's paginator (thanks koledennix)\n-  Some juggling of internal implementation. ``TableData`` now supports\n   slicing and returns new ``TableData`` instances. ``BoundRows`` now\n   takes a single argument ``data`` (a ``TableData`` instance).\n-  Add support for ``get_pagination`` on ``SingleTableMixin``.\n-  ``SingleTableMixin`` and ``SingleTableView`` are now importable\n   directly from ``django_tables2``.\n\nv0.10.0\n-------\n\n-  Renamed ``BoundColumn.order_by`` to ``order_by_alias`` and never\n   returns ``None`` (**Backwards incompatible**). Templates are affected\n   if they use something like:\n\n   {% querystring\n   table.prefixed\\_order\\_by\\_field=column.order\\_by.opposite\\|default:column.name\n   %}\n\nWhich should be rewritten as:\n\n::\n\n      {% querystring table.prefixed_order_by_field=column.order_by_alias.next %}\n\n-  Added ``next`` shortcut to ``OrderBy`` returned from\n   ``BoundColumn.order_by_alias``\n-  Added ``OrderByTuple.get()``\n-  Deprecated ``BoundColumn.sortable``, ``Column.sortable``,\n   ``Table.sortable``, ``sortable`` CSS class,\n   ``BoundColumns.itersortable``, ``BoundColumns.sortable``; use\n   ``orderable`` instead of ``sortable``.\n-  Added ``BoundColumn.is_ordered``\n-  Introduced concept of an ``order by alias``, see glossary in the docs\n   for details.\n\nv0.9.6\n------\n\n-  Fix bug that caused an ordered column's th to have no HTML\n   attributes.\n\nv0.9.5\n------\n\n-  Updated example project to add colspan on footer cell so table border\n   renders correctly in Webkit.\n-  Fix regression that caused 'sortable' class on\n\n   .. raw:: html\n\n      <th>\n\n   .\n-  Table.\\ **init** no longer *always* calls .order\\_by() on querysets,\n   fixes #55. This does introduce a slight backwards incompatibility.\n   ``Table.order_by`` now has the possibility of returning ``None``,\n   previously it would *always* return an ``OrderByTuple``.\n-  DeclarativeColumnsMetaclass.\\ **new** now uses super()\n-  Testing now requires pylint and Attest >=0.5.3\n\nv0.9.4\n------\n\n-  Fix regression that caused column verbose\\_name values that were\n   marked as safe to be escaped. Now any verbose\\_name values that are\n   instances of SafeData are used unmodified.\n\nv0.9.3\n------\n\n-  Fix regression in ``SingleTableMixin``.\n-  Remove stray ``print`` statement.\n\nv0.9.2\n------\n\n-  ``SingleTableView`` now uses ``RequestConfig``. This fixes issues\n   with ``order_by_field``, ``page_field``, and ``per_page_field`` not\n   being honored.\n-  Add ``Table.Meta.per_page`` and change ``Table.paginate`` to use it\n   as default.\n-  Add ``title`` template filter. It differs from Django's built-in\n   ``title`` filter because it operates on an individual word basis and\n   leaves words containing capitals untouched. **Warning**: use\n   ``{% load ... from ... %}`` to avoid inadvertantly replacing Django's\n   builtin ``title`` template filter.\n-  ``BoundColumn.verbose_name`` no longer does ``capfirst``, titlising\n   is now the responsbility of ``Column.header``.\n-  ``BoundColumn.__unicode__`` now uses ``BoundColumn.header`` rather\n   than ``BoundColumn.verbose_name``.\n\nv0.9.1\n------\n\n-  Fix version in setup.py (doh)\n\nv0.9.0\n------\n\n-  Add support for column attributes (see Attrs)\n-  Add BoundRows.items() to yield (bound\\_column, cell) pairs\n-  Tried to make docs more concise. Much stronger promotion of using\n   RequestConfig and {% querystring %}\n\nv0.8.4\n------\n\n-  Removed random 'print' statements.\n-  Tweaked 'paleblue' theme css to be more flexible\n-  removed ``whitespace: no-wrap``\n-  header background image to support more than 2 rows of text\n\nv0.8.3\n------\n\n-  Fixed stupid import mistake. Tests didn't pick it up due to them\n   ignoring ``ImportError``.\n\nv0.8.2\n------\n\n-  ``SingleTableView`` now inherits from ``ListView`` which enables\n   automatic ``foo_list.html`` template name resolution (thanks dramon\n   for reporting)\n-  ``render_table`` template tag no suppresses exceptions when\n   ``DEBUG=True``\n\nv0.8.1\n------\n\n-  Fixed bug in render\\_table when giving it a template (issue #41)\n\nv0.8.0\n------\n\n-  Added translation support in the default template via ``{% trans %}``\n-  Removed ``basic_table.html``, ``Table.as_html()`` now renders\n   ``table.html`` but will clobber the querystring of the current\n   request. Use the ``render_table`` template tag instead\n-  ``render_table`` now supports an optional second argument -- the\n   template to use when rendering the table\n-  ``Table`` now supports declaring which template to use when rendering\n   to HTML\n-  Django >=1.3 is now required\n-  Added support for using django-haystack's ``SearchQuerySet`` as a\n   data source\n-  The default template ``table.html`` now includes block tags to make\n   it easy to extend to change small pieces\n-  Fixed table template parsing problems being hidden due to a\n   subsequent exception being raised\n-  Http404 exceptions are no longer raised during a call to\n   ``Table.paginate()``, instead it now occurs when ``Table.page`` is\n   accessed\n-  Fixed bug where a table couldn't be rendered more than once if it was\n   paginated\n-  Accessing ``Table.page`` now returns a new page every time, rather\n   than reusing a single object\n\nv0.7.8\n------\n\n-  Tables now support using both ``sequence`` and ``exclude`` (issue\n   #32).\n-  ``Sequence`` class moved to ``django_tables2/utils.py``.\n-  Table instances now support modification to the ``exclude`` property.\n-  Removed ``BoundColumns._spawn_columns``.\n-  ``Table.data``, ``Table.rows``, and ``Table.columns`` are now\n   attributes rather than properties.\n\n.. |Build status| image:: https://travis-ci.org/bradleyayers/django-tables2.svg\n   :target: https://travis-ci.org/bradleyayers/django-tables2",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bradleyayers/django-tables2/",
    "keywords": null,
    "license": "Simplified BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-tables2",
    "package_url": "https://pypi.org/project/django-tables2/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-tables2/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/bradleyayers/django-tables2/"
    },
    "release_url": "https://pypi.org/project/django-tables2/1.0.6/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Table/data-grid framework for Django",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17170602,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "701294d9e96fe8ee6d7ca639679586c0afc7e4be6972d57b441b9f9b40e46d9c",
        "md5": "319927cac8fc20409426abb7c5ea88aa",
        "sha256": "29fda34506d220dba3e95c02b96fa3f323c91c8ffb6d957e51f49c29721752f6"
      },
      "downloads": -1,
      "filename": "django-tables2-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "319927cac8fc20409426abb7c5ea88aa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 970971,
      "upload_time": "2015-12-29T08:56:12",
      "upload_time_iso_8601": "2015-12-29T08:56:12.020503Z",
      "url": "https://files.pythonhosted.org/packages/70/12/94d9e96fe8ee6d7ca639679586c0afc7e4be6972d57b441b9f9b40e46d9c/django-tables2-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}