{
  "info": {
    "author": "Bradley Ayers",
    "author_email": "bradley.ayers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "django-tables2 - An app for creating HTML tables\n------------------------------------------------\n\n.. image:: https://badge.fury.io/py/django-tables2.svg\n    :target: https://pypi.python.org/pypi/django-tables2\n    :alt: Latest PyPI version\n\n.. image:: https://travis-ci.org/bradleyayers/django-tables2.svg\n    :target: https://travis-ci.org/bradleyayers/django-tables2\n    :alt: Travis CI\n\ndjango-tables2 simplifies the task of turning sets of data into HTML tables. It\nhas native support for pagination and sorting. It does for HTML tables what\n`django.forms` does for HTML forms. e.g.\n\n.. image:: http://dl.dropbox.com/u/33499139/django-tables2/example.png\n    :alt: An example table rendered using django-tables2\n\nIts features include:\n\n- Any iterable can be a data-source, but special support for Django querysets is included.\n- The builtin UI does not rely on JavaScript.\n- Support for automatic table generation based on a Django model.\n- Supports custom column functionality via subclassing.\n- Pagination.\n- Column based table sorting.\n- Template tag to enable trivial rendering to HTML.\n- Generic view mixin.\n\nExample\n-------\n\nStart by adding \"django_tables2\" to your INSTALLED_APPS setting like this:\n\n.. code:: python\n\n        INSTALLED_APPS = (\n            ...,\n            'django_tables2',\n        )\n\nCreating a table for a model `Simple` is as simple as:\n\n.. code:: python\n\n    import django_tables2 as tables\n\n    class SimpleTable(tables.Table):\n        class Meta:\n            model = Simple\n\nThis would then be used in a view:\n\n.. code:: python\n\n    def simple_list(request):\n        queryset = Simple.objects.all()\n        table = SimpleTable(queryset)\n        return render(request, 'simple_list.html', {'table': table})\n\nAnd finally in the template:\n\n.. code::\n\n    {% load django_tables2 %}\n    {% render_table table %}\n\nThis example shows one of the simplest cases, but django-tables2 can do a lot\nmore! Check out the _documentation: http://django-tables2.readthedocs.org/en/latest/ for more details.\n\nRunning the tests\n-----------------\n\nWith ``tox`` installed, you can run the test suite by typing ``tox``. It will take\ncare of installing the correct dependencies. During development, you might not\nwant to wait for the tests to run in all environments. In that case, use the ``-e``\nargument to specify an environment:\n\n``tox -e py27-1.9`` to run the tests in python 2.7 with Django 1.9.\n\nTo generate a html coverage report:\n\n    PYTHONPATH=. py.test -s --cov=django_tables2 --cov-report html\n\n\nBuilding the documentation\n--------------------------\n\nIf you want to build the docs from within a virtualenv, and Sphinx is installed\nglobally, use:\n\n    cd docs/\n    make html SPHINXBUILD=\"python $(which sphinx-build)\"\n\n\nPublishing a release\n--------------------\n\n1. Bump the version in ``django-tables2/__init__.py``.\n2. Update ``CHANGELOG.md``.\n3. Create a tag ``git tag -a v1.0.6 -m 'tagging v1.0.6'``\n4. Run ``python setup.py sdist upload --sign --identity=<your gpg identity>``.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bradleyayers/django-tables2/",
    "keywords": null,
    "license": "Simplified BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-tables2",
    "package_url": "https://pypi.org/project/django-tables2/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-tables2/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/bradleyayers/django-tables2/"
    },
    "release_url": "https://pypi.org/project/django-tables2/1.1.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Table/data-grid framework for Django",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17170602,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed97c997574d0160208ff3537c23c774145ce93eab4abd32594988e9e623c488",
        "md5": "faba40f322d7300163b578a224a9aa4c",
        "sha256": "e15e1eeb3fb2c748ce23aa6ecaf6737e096d9cd421c30697df333a5b267b335a"
      },
      "downloads": -1,
      "filename": "django-tables2-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "faba40f322d7300163b578a224a9aa4c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 979010,
      "upload_time": "2016-03-22T08:15:41",
      "upload_time_iso_8601": "2016-03-22T08:15:41.420128Z",
      "url": "https://files.pythonhosted.org/packages/ed/97/c997574d0160208ff3537c23c774145ce93eab4abd32594988e9e623c488/django-tables2-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}