{
  "info": {
    "author": "itsmewulf",
    "author_email": "wulf.developer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dsc.py  [![Badge](https://img.shields.io/pypi/v/dsc.py?color=3776AB&logo=python&style=for-the-badge)](https://pypi.org/project/dsc.py/)  [![Badge 2](https://img.shields.io/pypi/dm/dsc.py?color=3776AB&logo=python&style=for-the-badge)](https://pypi.org/project/dsc.py/)\nA simple and easy to use, fully asynchronous wrapper for the dsc.gg API.\n\n### Installation \n\n```pip install dsc.py```\n\n### Usage \n\nBelow you can find example usage of all of this library's methods and client initialization.  \nFor reference regarding objects returned by the library, [check this out](#objects)\n\n\n#### Initialize the client\n```py \nimport dsc \n\nclient = dsc.Client(key='YOUR_API_KEY')\n```\n\n#### Get a user\n```py\nuser = await client.get_user(548803750634979340)\n\nprint(f\"This user joined dsc.gg on {user.created_at}\")\n```\n\n#### Get a link\n```py\nlink = await client.get_link('link') # Can be either a slug or a full URL\n\nprint(f\"This link owner's ID is: {link.owner_id}, and it leads to {link.redirect}\")\n``` \n\n#### Search \n```py \nlinks = await client.search('search_query', limit=50) # optional limit\n\nprint(len(links))\n```\n\n#### Create a link \nYou can get fancy with this one, and create an embed to use with the link, see below.\nPlease note that the color will not work, when creating, only when updating a link.\n##### Create an embed\n```py \nembed = dsc.Embed(\n    color=dsc.Color.red(),\n    title='Embed title',\n    image='image url',\n    description='Embed description'\n)\n```\n---\nAnything other than the slug and the redirect is optional!\nThis and the other methods below return the status code if `raise_for_status` was not passed into the client constructor.\n```py\nres = await client.create_link('link slug', 'redirect', embed=embed) \n\nif res.status == 200:\n    print('Link created!')\nelse:\n    print('An error occurred.')\n```\n\n#### Update a link\nSimilar to creating, except the link slug has to be an existing link, there's no need to pass `type` in.  \nNot passing some arguments into the embed will result in updating only these fields and leaving other ones as they are.\n```py\nupdated_embed = dsc.Embed(color=dsc.Color.red())\nawait client.update_link('link slug', password='youshallnotpass', unlisted=True, embed=updated_embed)\n```\n\n#### Delete a link\n```py\nawait client.delete_link('link slug')\n```\n\n### Objects \ndsc.py includes 4 objects - User, Link, Embed and Color.\nEvery attribute of the object will be listed, datetime values are in UTC.\n\n---\n\n#### User \n\n###### Attributes\n- id: `int`\n- premium: `bool`\n- verified: `bool`\n- joined_at: `datetime` \n- staff: `bool`\n\n###### Methods\n- `to_dict()` - Return the object in the form of a dictionary\n\n---\n\n#### Link\n\n###### Attributes\n- slug: `str`\n- redirect: `str`\n- owner_id: `int`\n- embed: `dsc.Embed` (See the object below)\n- editors: `List[int]` \n- created_at: `datetime` \n- type: `str` ('bot', 'server', 'template' or 'link')\n- unlisted: `str`\n\n###### Methods\n- `to_dict()` - Return the object in the form of a dictionary\n\n---\n\n#### Embed\nReturned in responses or user created, embeds are a way to make your links stand out.\n\n###### Attributes\n- color: `dsc.Color` (See the object below)\n- title: `str`\n- description: `str`\n- image `str` (image URL)\n\n###### Methods\n- `to_dict()` - Return the object in the form of a dictionary\n\n###### Class methods\n- `from_dict(data: dict)` - Return an Embed object initialized with values from the dictionary\n\n---\n\n#### Color\nThis is extremely similar to discord.py's Color, though allows passing strings as well.  \nAll discord.py built-in color class-methods are here too, ex. `dsc.Color.red()`\n\n###### Attributes\n- value: `int`\n\n###### Methods\n- `to_dict()` - Return the object in the form of a dictionary\n\n\n### Contributing \n\nThis package is opensource so anyone with adequate python experience can contribute to this project!\n\n### Reporting Issues\nIf you find any error/bug/mistake with the package or in the code feel free to create an issue and report it [here.](https://github.com/itsmewulf/dsc.py/issues)\n\n### Fix/Edit Content\nIf you want to contribute to this package, fork the repository, make your changes and then simply create a Pull Request!\n\n### Contact\nIf you want to contact me:  \n**Mail -** ```wulf.developer@gmail.com```<br>\n**Discord -** ```wulf#9632```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/itsmewulf/dsc.py",
    "keywords": "api-wrapper,http,request,api,wrapper,discord",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dsc.py",
    "package_url": "https://pypi.org/project/dsc.py/",
    "platform": "",
    "project_url": "https://pypi.org/project/dsc.py/",
    "project_urls": {
      "Homepage": "https://github.com/itsmewulf/dsc.py"
    },
    "release_url": "https://pypi.org/project/dsc.py/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A simple and easy to use, fully asynchronous wrapper for the dsc.gg API.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9845961,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85055a1217ada980ff81a4751fcc85bb11cef37e51a614bbf2e2c6003a818bc3",
        "md5": "1f181b4a96b488be2a1b4046d7908b14",
        "sha256": "3e29dc86acc848d41dfc6e53751eda537b34c815ac55e502c2e971848bf04de7"
      },
      "downloads": -1,
      "filename": "dsc.py-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1f181b4a96b488be2a1b4046d7908b14",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13244,
      "upload_time": "2020-12-11T08:03:01",
      "upload_time_iso_8601": "2020-12-11T08:03:01.025903Z",
      "url": "https://files.pythonhosted.org/packages/85/05/5a1217ada980ff81a4751fcc85bb11cef37e51a614bbf2e2c6003a818bc3/dsc.py-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f805f8428ec878073c578b7727496c591d9f655430179698a6bf94d27c239f0",
        "md5": "49f2169f8f7b4ccaa4324adb1a1c698e",
        "sha256": "baa8752f2869c5ce05ef29b8c207f7d3124426a9c12f5a243423834ccd110612"
      },
      "downloads": -1,
      "filename": "dsc.py-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "49f2169f8f7b4ccaa4324adb1a1c698e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12398,
      "upload_time": "2020-12-11T08:03:02",
      "upload_time_iso_8601": "2020-12-11T08:03:02.549954Z",
      "url": "https://files.pythonhosted.org/packages/6f/80/5f8428ec878073c578b7727496c591d9f655430179698a6bf94d27c239f0/dsc.py-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}