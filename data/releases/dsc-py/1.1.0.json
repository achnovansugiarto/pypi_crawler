{
  "info": {
    "author": "itsmewulf",
    "author_email": "wulf.developer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dsc.py  [![Badge](https://img.shields.io/pypi/v/dsc.py?color=3776AB&logo=python&style=for-the-badge)](https://pypi.org/project/dsc.py/)  [![Badge 2](https://img.shields.io/pypi/dm/dsc.py?color=3776AB&logo=python&style=for-the-badge)](https://pypi.org/project/dsc.py/)\n\nA simple and easy to use, fully asynchronous wrapper for the dsc.gg API.\n\n### Installation\n\n```pip install dsc.py```\n\n### Usage\n\nBelow you can find example usage of all of this library's methods and client initialization.  \nFor reference regarding objects returned by the library, [check this out](#objects)\n\n#### Initialize the client\n\n```py\nimport dsc\n\nclient = dsc.Client(key='YOUR_API_KEY')\n```\n\n#### Get a user\n\n```py\nuser = await client.get_user(USER_ID)\n\nprint(f\"This user joined dsc.gg on {user.created_at}\")\n```\n\n#### Get a link\n\n```py\nlink = await client.get_link('link')  # Can be either a slug or a full URL\n\nprint(f\"This link owner's ID is: {link.owner_id}, and it leads to {link.redirect}\")\n``` \n\n#### Get an app\n\n```py\napp = await client.get_app(APP_ID)\n\nprint(f\"This app's owner's ID is {app.owner_id} and it was created at {app.created_at}\")\n```\n\n#### Get top links\n\n```py\nlinks = await client.get_top_links()\n\nprint(links[1].id)\n```\n\n#### Get a user's links (whitelist only)\n\n```py\nlinks = await client.get_user_links(USER_ID)\n\nprint(links[0].redirect)\n```\n\n#### Get a user's apps (whitelist only)\n\n```py\napps = await client.get_user_apps(USER_ID)\n\nprint(any([app.verified for app in apps]))  # check if the user has any verified apps\n```\n\n#### Search (whitelist only)\n\n```py\nlinks = await client.search('search_query', limit=50)  # optional limit\n\nprint(len(links))\n```\n\n#### Create a link\n\nYou can get fancy with this one, and create an embed to use with the link, see below. Please note that the color will\nnot work, when creating, only when updating a link.\n\n##### Create an embed\n\n```py\nembed = dsc.Embed(\n    color=dsc.Color.red(),\n    title='Embed title',\n    image='image url',\n    description='Embed description'\n)\n```\n\n---\nAnything other than the slug and the redirect is optional!\nconstructor.\n\n```py\nres = await client.create_link('link slug', 'redirect', embed=embed)\n\nif res.status == 200:\n    print('Link created!')\nelse:\n    print('An error occurred.')\n```\n\n#### Update a link\n\nSimilar to creating, except the link slug has to be an existing link, there's no need to pass `type` in.  \nNot passing some arguments into the embed will result in updating only these fields and leaving other ones as they are.\n\n```py\nupdated_embed = dsc.Embed(color=dsc.Color.red())\nawait client.update_link('link slug', password='youshallnotpass', unlisted=True, embed=updated_embed)\n```\n\n#### Delete a link\n\n```py\nawait client.delete_link('link slug')\n```\n\n### Objects\n\ndsc.py includes 4 objects - User, Link, Embed and Color. Every attribute of the object will be listed, datetime values\nare in UTC.\n\n---\n\n#### App\n\n###### Attributes\n\n- id: `int`\n- owner_id: `int`\n- verified: `bool`\n- created_at: `datetime`\n- key: `Optional[str]` (present only if you own the app)\n\n###### Methods\n\n- `to_dict()` - Return the object in the form of a dictionary\n\n#### User\n\n###### Attributes\n\n- id: `int`\n- premium: `bool`\n- verified: `bool`\n- joined_at: `datetime`\n- staff: `bool`\n\n###### Methods\n\n- `to_dict()` - Return the object in the form of a dictionary\n\n---\n\n#### Link\n\n###### Attributes\n\n- id: `str`\n- redirect: `str`\n- owner_id: `int`\n- embed: `dsc.Embed` (See the object below)\n- editors: `List[int]`\n- created_at: `datetime`\n- type: `str` ('bot', 'server', 'template' or 'link')\n- unlisted: `str`\n- disabled: `bool`\n- bumped_at: `datetime`\n- domain: `str`\n\n###### Methods\n\n- `to_dict()` - Return the object in the form of a dictionary\n\n---\n\n#### Embed\n\nReturned in responses or user created, embeds are a way to make your links stand out.\n\n###### Attributes\n\n- color: `dsc.Color` (See the object below)\n- title: `str`\n- description: `str`\n- image `str` (image URL)\n\n###### Methods\n\n- `to_dict()` - Return the object in the form of a dictionary\n\n###### Class methods\n\n- `from_dict(data: dict)` - Return an Embed object initialized with values from the dictionary\n\n---\n\n#### Color\n\nThis is extremely similar to discord.py's Color, though allows passing strings as well.  \nAll discord.py built-in color class-methods are here too, ex. `dsc.Color.red()`\n\n###### Attributes\n\n- value: `int`\n\n###### Methods\n\n- `to_dict()` - Return the object in the form of a dictionary\n\n###### Class methods\n\n- [just like discord.py](https://discordpy.readthedocs.io/en/latest/api.html?highlight=color#discord.Colour.teal)\n\n### Contributing\n\nThis package is opensource so anyone with adequate python experience can contribute to this project!\n\n### Reporting Issues\n\nIf you find any error/bug/mistake with the package or in the code feel free to create an issue and report\nit [here.](https://github.com/itsmewulf/dsc.py/issues)\n\n### Fix/Edit Content\n\nIf you want to contribute to this package, fork the repository, make your changes and then simply create a Pull Request!\n\n### Contact\n\nIf you want to contact me:  \n**Mail -** ```wulf.developer@gmail.com```<br>\n**Discord -** ```wulf#9632```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/itsmewulf/dsc.py",
    "keywords": "api-wrapper,http,request,api,wrapper,discord",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dsc.py",
    "package_url": "https://pypi.org/project/dsc.py/",
    "platform": "",
    "project_url": "https://pypi.org/project/dsc.py/",
    "project_urls": {
      "Homepage": "https://github.com/itsmewulf/dsc.py"
    },
    "release_url": "https://pypi.org/project/dsc.py/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A simple and easy to use, fully asynchronous wrapper for the dsc.gg API.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9845961,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ad5ede2de4699054674b88d526613c0229ef0cbf5b34fd34c02c59c33f4aa05",
        "md5": "31138841494bd3afe9f520ac7ff7cb83",
        "sha256": "00e6acc14891eecae7cf0c4be04803be22f22dd60ad2b42891bf63d828328e85"
      },
      "downloads": -1,
      "filename": "dsc.py-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "31138841494bd3afe9f520ac7ff7cb83",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 14047,
      "upload_time": "2020-12-14T16:40:52",
      "upload_time_iso_8601": "2020-12-14T16:40:52.840172Z",
      "url": "https://files.pythonhosted.org/packages/2a/d5/ede2de4699054674b88d526613c0229ef0cbf5b34fd34c02c59c33f4aa05/dsc.py-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83ab5660e4f3f23b17cbb90e7b9aa754705754dcfe065cb48c9fcd9e8144f861",
        "md5": "655250d0001634421f6ccb0158ebfbf1",
        "sha256": "49336b9044beaf540206a5411e3953bbe6543525f9160b11fcab884d78f364e0"
      },
      "downloads": -1,
      "filename": "dsc.py-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "655250d0001634421f6ccb0158ebfbf1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13583,
      "upload_time": "2020-12-14T16:40:54",
      "upload_time_iso_8601": "2020-12-14T16:40:54.733774Z",
      "url": "https://files.pythonhosted.org/packages/83/ab/5660e4f3f23b17cbb90e7b9aa754705754dcfe065cb48c9fcd9e8144f861/dsc.py-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}