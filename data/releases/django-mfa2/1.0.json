{
  "info": {
    "author": "Mohamed El-Kalioby",
    "author_email": "mkalioby@mkalioby.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-mfa2\nA Django app that handles MFA, it supports TOTP, U2F, FIDO2 U2F (Web Authn), Email Tokens , and Trusted Devices\n\n\nFor FIDO2, both security keys and android-safetynet are supported.\n\nTrusted device is a mode for the user to add a device that doesn't support security keys like iOS and andriod without fingerprints or NFC.\n\n`**Note**: U2F and FIDO2 can only be served under secure context (https)`\n\nDepends on\n\n* pyotp\n* python-u2flib-server\n* ua-parser\n* user-agents\n* python-jose\n* fido2==0.5\n\n\n# Installation\n1. `pip install django-mfa2`\n1. in your settings.py add the application to your installed apps\n   ```python\n   INSTALLED_APPS=(\n   '......',\n   'mfa',\n   '......')\n   ```\n1. Add the following settings to your file\n\n   ```python \n   MFA_UNALLOWED_METHODS=()   # Methods that shouldn't be allowed for the user\n   MFA_LOGIN_CALLBACK=\"\"      # A function that should be called by username to login the user in session\n   MFA_RECHECK=True           # Allow random rechecking of the user\n   MFA_RECHECK_MIN=10         # Minimum interval in seconds\n   MFA_RECHECK_MAX=30         # Maximum in seconds\n   MFA_QUICKLOGIN=True        # Allow quick login for returning users by provide only their 2FA \n\n   TOKEN_ISSUER_NAME=\"PROJECT_NAME\"      #TOTP Issuer name\n\n   U2F_APPID=\"https://localhost\"    #URL For U2F\n   FIDO_SERVER_ID=u\"localehost\"      # Server rp id for FIDO2, it the full domain of your project\n   FIDO_SERVER_NAME=u\"PROJECT_NAME\"\n   FIDO_LOGIN_URL=BASE_URL\n   ```\n   **Method Names**\n   * U2F\n   * FIDO2\n   * TOTP\n   * Trusted_Devices\n   * Email\n\n1. Break your login function\n\n   Usually your login function will check for username and password, log the user in if the username and password are correct and create the user session, to support mfa, this has to change\n\n      * authenticate the user\n      * if username and password are correct , check if the user has mfa or not\n          * if user has mfa then redirect to mfa page\n          * if user doesn't have mfa then call your function to create the user session\n\n   ```python\n    def login(request): # this function handles the login form POST\n       user = auth.authenticate(username=username, password=password)  \n       if user is not None: # if the user object exist\n            from mfa.helpers import has_mfa\n            res =  has_mfa(username = username,request=request) # has_mfa returns false or HttpResponseRedirect\n            if res:\n                return res\n            return log_user_in(request,username=user.username) \n            #log_user_in is a function that handles creatung user session, it should be in the setting file as MFA_CALLBACK\n     ```\n1. Add mfa to urls.py\n   ```python \n   import mfa\n   import mfa.TrustedDevice\n   urls_patterns= [\n   '...',\n   url(r'^mfa/', include('mfa.urls')),\n   url(r'devices/add$', mfa.TrustedDevice.add,name=\"mfa_add_new_trusted_device\"), # This short link to add new trusted device\n   '....',\n    ]\n    ```\n1. Provide `mfa_auth_base.html` in your templaes with block called 'head' and 'content'\n    The template will be included during the user login.\n    If you will use Email Token method, then you have to provide template named `mfa_email_token_template.html` that will content the format of the email with parameter named `user` and `otp`.\n1. To match the look and feel of your project, MFA includes `base.html` but it needs blocks named `head` & `content` to added its content to it.\n1. Somewhere in your app, add a link to 'mfa_home'\n```<li><a href=\"{% url 'mfa_home' %}\">Security</a> </li>```\n\nFor Example, See https://github.com/mkalioby/AutoDeploy/commit/5f1d94b1804e0aa33c79e9e8530ce849d9eb78cc in AutDeploy Project\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/mkalioby/django-mfa2/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mkalioby/django-mfa2/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mfa2",
    "package_url": "https://pypi.org/project/django-mfa2/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-mfa2/",
    "project_urls": {
      "Download": "https://github.com/mkalioby/django-mfa2/",
      "Homepage": "https://github.com/mkalioby/django-mfa2/"
    },
    "release_url": "https://pypi.org/project/django-mfa2/1.0/",
    "requires_dist": [
      "django (>=1.7)",
      "jsonfield",
      "simplejson",
      "pyotp",
      "python-u2flib-server",
      "ua-parser",
      "user-agents",
      "python-jose",
      "fido2 (==0.5)",
      "jsonLookup"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
    "summary": "Allows user to add 2FA to their accounts",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16149504,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a7d1d375464711b25656fb0bf1ea0a8423fba134eb0af73ff0cc69101f995e9",
        "md5": "d65ec4d29aed9db5c4d3227ee870ad8a",
        "sha256": "84d28d75a1177a58f5f2980fca20605b74ecb86c15b5982c125c4fc723d9f904"
      },
      "downloads": -1,
      "filename": "django-mfa2-1.0.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "d65ec4d29aed9db5c4d3227ee870ad8a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 51251,
      "upload_time": "2019-01-23T12:49:47",
      "upload_time_iso_8601": "2019-01-23T12:49:47.488187Z",
      "url": "https://files.pythonhosted.org/packages/6a/7d/1d375464711b25656fb0bf1ea0a8423fba134eb0af73ff0cc69101f995e9/django-mfa2-1.0.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f796c77d72c95dad02066617c02717d853963b1d699fbf6377a0b6c08a7066d6",
        "md5": "b2c1e17b0b29903123db50f779c196e1",
        "sha256": "0b8dea47d6364220925eca5087bd580beef188e65c39001250e745057f6dfa34"
      },
      "downloads": -1,
      "filename": "django_mfa2-1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b2c1e17b0b29903123db50f779c196e1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 59041,
      "upload_time": "2019-01-23T12:49:40",
      "upload_time_iso_8601": "2019-01-23T12:49:40.289481Z",
      "url": "https://files.pythonhosted.org/packages/f7/96/c77d72c95dad02066617c02717d853963b1d699fbf6377a0b6c08a7066d6/django_mfa2-1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2022-42731"
      ],
      "details": "mfa/FIDO2.py in django-mfa2 before 2.5.1 and 2.6.x before 2.6.1 allows a replay attack that could be used to register another device for a user. The device registration challenge is not invalidated after usage.",
      "fixed_in": [
        "2.5.1",
        "2.6.1"
      ],
      "id": "GHSA-vw39-2wj9-4q86",
      "link": "https://osv.dev/vulnerability/GHSA-vw39-2wj9-4q86",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}