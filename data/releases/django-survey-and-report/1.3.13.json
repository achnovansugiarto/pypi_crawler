{
  "info": {
    "author": "Pierre SASSOULAS",
    "author_email": "pierre.sassoulas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Natural Language :: English",
      "Natural Language :: French",
      "Natural Language :: Japanese",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Utilities"
    ],
    "description": "# Django survey\n\nA django survey app, based on and compatible with \"django-survey\".\nYou will be able to migrate your data from an ancient version of\ndjango-survey, but it has been ported to python 3 and you can export results as\nCSV or PDF using your native language.\n\nIf you want the latest version still compatible with python 2.7 you need a\nversion < 1.3.0.\n\n[![Build Status](https://travis-ci.org/Pierre-Sassoulas/django-survey.svg?branch=master)](https://travis-ci.org/Pierre-Sassoulas/django-survey)\n[![Coverage Status](https://coveralls.io/repos/github/Pierre-Sassoulas/django-survey/badge.svg?branch=master)](https://coveralls.io/github/Pierre-Sassoulas/django-survey?branch=master)\n[![PyPI version](https://badge.fury.io/py/django-survey-and-report.svg)](https://badge.fury.io/py/django-survey-and-report)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n## Table of contents\n\n* [Getting started](#getting-started)\n* [Making a survey](#making-a-survey)\n* [Generating a pdf report from the survey's result](#generating-a-pdf-report-from-the-surveys-result)\n  * [Basic example](#basic-example)\n  * [Sankey's diagram](#sankey-diagram)\n  * [Advanced example](#advanced-example)\n  * [Implementing a custom treatment](#implementing-a-custom-treatment)\n* [Contributing as a developper](#contributing-as-a-developper)\n  * [Development environment](#development-environment)\n  * [Committing code](#committing-code)\n    * [Launching tests](#launching-tests)\n    * [Adding test data](#adding-test-data)\n    * [Launching coverage](#launching-coverage)\n    * [Applying Lint](#applying-Lint)\n* [Translating the project](#translating-the-project)\n  * [Language available](#language-available)\n  * [As a developper](#as-a-developper)\n  * [As a translator](#as-a-translator)\n* [Credit](#credits)\n\n## Getting started\n\nAdd `django-survey-and-report` to your requirements and get it with pip.\n\n~~~~bash\necho 'django-survey-and-report' > requirements.txt\npip install -r requirements.txt\n~~~~\n\nAdd `bootstrapform` and `survey` in the `INSTALLED_APPS` in your settings :\n\n~~~~python\nINSTALLED_APPS = [\n\t# Your own installed apps here\n]\n\nINSTALLED_APPS += [\n\t'bootstrapform',\n\t'survey'\n]\n~~~~\n\nAdd an URL entry to your project’s urls.py, for example:\n\n~~~python\nfrom django.conf import settings\nfrom django.conf.urls import include, url\n\nurlpatterns = [\n    # Your own url pattern here\n]\n\nif 'survey' in settings.INSTALLED_APPS:\n    urlpatterns += [\n        url(r'^survey/', include('survey.urls'))\n    ]\n~~~~\n\nNote: you can use whatever you wish as the URL prefix.\n\nTo uninstall `django-survey-and-report`, simply comment out or remove the\n'survey' line in your `INSTALLED_APPS`.\n\nIf you want to use the pdf rendering with the Sankey's diagram generation\nyou will have to install python-tk (for python 2.7) or python3-tk (for python 3.x).\n\n## Making a survey\n\nUsing the admin interface you can create surveys, add questions, give questions\ncategories, and mark them as required or not. You can define choices for answers\nusing comma separated words.\n\n![Creating of a question](doc/creating_questions.png \"Creating of a question\")\n\nThe front-end survey view then automatically populates based on the questions\nthat have been defined and published in the admin interface. We use bootstrap3\nto render them.\n\n![Answering a survey](doc/answering_questions.png \"Answering a survey\")\n\nSubmitted responses can be viewed via the admin backend, in an exported csv\nor in a pdf generated with latex.\n\n## Generating a pdf report from the survey's result\n\nYou can manage the way the report is created in a yaml file, globally, survey\nby survey, or question by question. In order to render pdf you will need to\ninstall texlive and python-tk or python3-tk for sankey's diagram.\n\nThe results are generated for the server only when needed, but you can force\nit as a developper with:\n\n~~~~bash\npython manage.py exportresult -h\n~~~~\n\nFollowing is an example of a configuration file. you can generate one with:\n\n~~~~bash\npython manage.py generatetexconf -h\n~~~~\n\n### Basic example\n\n~~~~yaml\ngeneric:\n  document_option: 11pt\n'Test survëy':\n  document_class: report\n  questions:\n    'Lorem ipsum dolor sit amët, <strong> consectetur </strong> adipiscing elit.':\n      chart:\n        type: polar\n        text: pin\n    'Dolor sit amët, consectetur<strong>  adipiscing</strong>  elit.':\n      chart:\n        type: cloud\n        text: inside\n~~~~\n\nThe pdf is then generated using the very good pgf-pie library.\n\n![The generated pdf for the polar and pin options](doc/report.png \"The generated pdf for the polar and pin options\")\n\n![The generated pdf for the cloud and inside options](doc/report_2.png \"The generated pdf for the cloud and inside options\")\n\n### Sankey diagram\n\nIf you installed python3-tk, you can also show the relation between two\nquestions using a sankey diagram :\n\n~~~~yaml\n'Lorem ipsum dolor sit amët, <strong> consectetur </strong> adipiscing elit.':\n  chart:\n    type: sankey\n    question: 'Dolor sit amët, consectetur<strong>  adipiscing</strong>  elit.'\n~~~~\n\nYou get this as a result:\n\n![The generated pdf for the sankey example](doc/sankey.png \"The generated pdf for the sankey example\")\n\n### Advanced example\n\nYou can also limit the answers shown by cardinality, filter them, group them\ntogether and choose the color for each answer or group of answers.\n\nIf you use this configuration for the previous question:\n~~~~yaml\n'Test survëy':\n  'Dolor sit amët, consectetur<strong>  adipiscing</strong>  elit.':\n    multiple_charts:\n      'Sub Sub Section with radius=3':\n        color:\n          Yës: blue!50\n          No: red!50\n          Whatever: red!50!blue!50\n        radius: 3\n      'Sub Sub Section with text=pin':\n        group_together:\n          Nah:\n            - No\n            - Whatever\n          K.:\n            - Yës\n        color:\n          Nah: blue!33!red!66\n          K.: blue!50\n        text: pin\n    chart:\n      radius: 1\n      type: cloud\n      text: inside\n~~~~\n\nYou get this as a result:\n\n![The generated pdf for the multiple charts example](doc/multicharts.png \"The generated pdf for the multiple charts example\")\n\n### Implementing a custom treatment\n\nIf you want to make your own treatment you can use your own class, for example.\n\nConfiguration:\n~~~~yaml\n'Test survëy':\n  questions:\n    'Ipsum dolor sit amët, <strong> consectetur </strong>  adipiscing elit.':\n      chart:\n        type: survey.tests.exporter.tex.CustomQuestion2TexChild\n~~~~\n\nCode in `survey.tests.exporter.tex.CustomQuestion2TexChild`:\n\n~~~~python\nfrom survey.exporter.tex.question2tex_chart import Question2TexChart\n\n\nclass CustomQuestion2TexChild(Question2TexChart):\n\n    def get_results(self):\n        self.type = \"polar\"\n        return \"\"\"        2/There were no answer at all,\n        3/But we have a custom treatment to show some,\n        2/You can make minor changes too !\"\"\"\n~~~~\n\nResult:\n\n![The generated pdf for the custom example](doc/custom.png \"The generated pdf for the custom example\")\n\nFor a full example of a configuration file look at `example_conf.yaml` in doc,\nyou can also generate your configuration file with\n`python manage.py generatetexconf -h`, it will create the default skeleton\nfor every survey and question.\n\n## Contributing as a developper\n\n### Development environment\n\nThis is the typical command you should do to get started:\n\n~~~~bash\npython -m venv venv/ # Create virtualenv\nsource venv/bin/activate # Activate virtualenv\npip install -e \".[dev]\" # Install dev requirements\npre-commit install # Install pre-commit hook framework\npython manage.py migrate # Create database\npython manage.py loaddata survey/tests/testdump.json # Load test data\npython manage.py createsuperuser\npython manage.py runserver # Launch server\n~~~~\n\n### Committing code\n\n#### Launching tests\n\n~~~~bash\npython manage.py test survey\n~~~~\n\n#### Adding test data\n\nIf you want to dump a test database after adding data to it, this is\nthe command to have a minimal diff :\n\n~~~~bash\npython manage.py dumpdata --format json -e contenttypes -e admin -e auth.Permission\n-e sessions.session -e sites.site --natural-foreign --indent 1\n-o survey/tests/testdump.json\n~~~~\n\n#### Launching coverage\n\n~~~~bash\ncoverage run --source=survey --omit=survey/migrations/* ./manage.py test\ncoverage html\nxdg-open htmlcov/index.html\n~~~~\n\n#### Applying Lint\n\nWe're using `pre-commit`, it should take care of linting during commit.\n\n## Translating the project\n\nDjango survey's is available in multiple language.\nYour contribution would be very appreciated if you\nknow a language that is not yet available.\n\n### Language available\n\nThe software is developed in english. Other available languages are :\n\n* [x] Chinese thanks to [朱聖黎 (Zhu Sheng Li)](https://github.com/digglife/)\n* [x] French thanks to [Pierre Sassoulas](https://github.com/Pierre-Sassoulas/)\n* [x] Japanese thanks to [Nobukuni Suzue](https://github.com/nsuzue/)\n* [x] Spanish thanks to [Javier Ordóñez](https://github.com/ordonja/)\n* [x] Russian thanks to [Vlad M.](https://github.com/manchos/)\n\n### As a developper\n\nIf your language do not exists add it in the `LANGUAGE` variable in the\nsettings, like [here](https://github.com/Pierre-Sassoulas/django-survey/commit/ee3bdba26c303ad12fc4584938e724b39223faa9#diff-bdf3ecebd8379ca98cc89e545fc90899).\nDo not forget to credit yourself like in the header seen\n[here](https://github.com/Pierre-Sassoulas/django-zxcvbn-password-validator/commit/274d7c9b27268a0455f80ea518c452532b970ea4#diff-8015f170326f20998060314fda9b92b1)\n\nThen you can translate with :\n\n~~~~bash\npython manage.py makemessages\n# python manage.py createsuperuser ? (You need to login for rosetta)\npython manage.py runserver\n# Access http://localhost:8000/admin to login\n# Then go to http://localhost:8000/rosetta to translate\npython manage.py makemessages --no-obsolete --no-wrap\ngit add survey/locale/\n...\n~~~~\n\nIf your language is not yet available in rosetta,\n[this stack overflow question](https://stackoverflow.com/questions/12946830/)\nshould work even for language not handled by django.\n\n### As a translator\n\nIf you're not a developper, open an issue on github and ask for a .po\nfile in your language. I will generate it for you, so you can edit it with an\nonline editor. I will then create the .po and commit them, so you can edit them\nwith your github account or integrate it myself if you do not have one.\nYou will be credited\n[here](https://github.com/Pierre-Sassoulas/django-survey#language-available).\n\n## Credits\n\nBased on [jessykate's django-survey](https://github.com/jessykate/django-survey),\nand contribution by jibaku, joshualoving, and ijasperyang in forks of jessykate's project.\n\nWe use [anazalea's pySankey](https://github.com/anazalea/pySankey) for sankey's\ndiagram during reporting.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Pierre-Sassoulas/django-survey",
    "keywords": "",
    "license": "AGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-survey-and-report",
    "package_url": "https://pypi.org/project/django-survey-and-report/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-survey-and-report/",
    "project_urls": {
      "Homepage": "https://github.com/Pierre-Sassoulas/django-survey"
    },
    "release_url": "https://pypi.org/project/django-survey-and-report/1.3.13/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A django survey app, based on and compatible with \"django-survey\". You will be able to migrate your data from an ancient version of django-survey, but it has been ported to python 3 and you can export results as CSV or PDF using your native language.",
    "version": "1.3.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15579831,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4a7efc7bf8413456486272413d8d4b6c54e872648df42bbf858620d193a8cbe",
        "md5": "ebdefd5b7b8bb45c52e6209a5682bb77",
        "sha256": "6eb284eb28a34b7f42190117a6f834d1234b3b50e763d4aba572fa87222a5f29"
      },
      "downloads": -1,
      "filename": "django-survey-and-report-1.3.13.tar.gz",
      "has_sig": false,
      "md5_digest": "ebdefd5b7b8bb45c52e6209a5682bb77",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 326611,
      "upload_time": "2020-01-17T15:55:42",
      "upload_time_iso_8601": "2020-01-17T15:55:42.866326Z",
      "url": "https://files.pythonhosted.org/packages/a4/a7/efc7bf8413456486272413d8d4b6c54e872648df42bbf858620d193a8cbe/django-survey-and-report-1.3.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}