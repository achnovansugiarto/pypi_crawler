{
  "info": {
    "author": "Sondre Lilleb√∏ Gundersen",
    "author_email": "sondrelg@live.no",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "License :: Other/Proprietary License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Documentation",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: Unit"
    ],
    "description": "Django Swagger Tester\n=====================\n\n.. role:: python(code)\n   :language: python\n\n.. image:: https://img.shields.io/pypi/v/django-swagger-tester.svg\n    :target: https://pypi.org/project/django-swagger-tester/\n\n.. image:: https://img.shields.io/pypi/pyversions/django-swagger-tester.svg\n    :target: https://pypi.org/project/django-swagger-tester/\n\n.. image:: https://img.shields.io/pypi/djversions/django-swagger-tester.svg\n    :target: https://pypi.python.org/pypi/django-swagger-tester\n\n.. image:: https://readthedocs.org/projects/django-swagger-tester/badge/?version=latest\n    :target: https://django-swagger-tester.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://codecov.io/gh/sondrelg/django-swagger-tester/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/sondrelg/django-swagger-tester\n\n|\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://pypi.org/project/django-swagger-tester/\n\n.. image:: http://www.mypy-lang.org/static/mypy_badge.svg\n    :target: http://mypy-lang.org/\n    :alt: Checked with mypy\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white\n    :target: https://github.com/pre-commit/pre-commit\n\n--------------\n\n**Documentation**: `https://django-swagger-tester.readthedocs.io <https://django-swagger-tester.readthedocs.io/en/latest/?badge=latest>`_\n\n**Repository**: `https://github.com/sondrelg/django-swagger-tester <https://github.com/sondrelg/django-swagger-tester>`_\n\n--------------\n\n\n\nThis package is a simple test utility for your Django Swagger documentation.\n\nIts aim is to make it easy for developers to catch and correct documentation errors in their Swagger docs by\ncomparing documented responses to actual API responses, or validating documented request bodies using actual input serializers.\n\nFeatures\n--------\n\nThe package has three main features:\n\n-  `Testing response documentation`_\n\n-  `Testing input documentation`_\n\n-  and `ensuring your docs comply with a single parameter naming standard (case type)`_.\n\n   Supported naming standards include ``camelCase``, ``snake_case``,\n   ``kebab-case``, and ``PascalCase``.\n\n\nImplementations\n---------------\n\nThis package currently supports:\n\n- Testing of dynamically rendered OpenAPI schemas using using `drf_yasg`_\n- Testing of any implementation which generates a static schema yaml or json file (e.g., like `DRF`_)\n\n\nIf you're using another method to generate your documentation and would like to use this package, feel free to add an issue, or create a PR. Adding a new implementation is as easy as adding the required logic needed to load the OpenAPI schema.\n\nInstallation\n============\n\nInstall using pip:\n\n.. code:: python\n\n   pip install django-swagger-tester\n\nConfiguration\n=============\n\nSettings\n--------\n\nTo use Django Swagger Settings in your project, you first need to add a ``django_swagger_tester`` to your installed apps.\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        ...\n        'django_swagger_tester',\n    ]\n\nSecondly, you need to configure the ``SWAGGER_TESTER`` package settings in your ``settings.py``:\n\n.. code:: python\n\n    from django_swagger_tester.loaders import StaticSchemaLoader\n    from django_swagger_tester.case_testers import is_camel_case\n\n    SWAGGER_TESTER = {\n        'SCHEMA_LOADER': StaticSchemaLoader,\n        'PATH': './static/openapi-schema.yml',\n        'CASE_TESTER': is_camel_case,\n        'CASE_PASSLIST': [],\n        'CAMEL_CASE_PARSER': False,\n    }\n\nParameters\n----------\n\n*SCHEMA_LOADER*\n~~~~~~~~~~~~~~~\n\nThe loader class you use is dictated by how your OpenAPI schema is generated. If your schema is a static file, you should use the ``StaticSchemaLoader``. If not, you should select the loader class that serves your implementation.\n\nLoader classes can be imported from ``django_swagger_tester.loaders`` and currently include:\n\n- ``StaticSchemaLoader``\n- ``DrfYasgSchemaLoader``\n\nExample:\n\n.. code:: python\n\n    from django_swagger_tester.loaders import DrfYasgSchemaLoader\n\n    SWAGGER_TESTER = {\n        'SCHEMA_LOADER': DrfYasgSchemaLoader,\n    }\n\n\n*PATH*\n~~~~~~\n\nPath takes the file path of your OpenAPI schema file. this is only required if you're using the ``StaticSchemaLoader`` loader class.\n\nExample:\n\n.. code:: python\n\n  SWAGGER_TESTER = {\n      'PATH': BASE_DIR / '/openapi-schema.yml',\n  }\n\n*CASE_TESTER*\n~~~~~~~~~~~~~\n\nThe callable passed for this input decide the naming standard you wish to enforce for your documentation.\n\nThere are currently four supported options:\n\n-  ``camel case``\n-  ``snake case``\n-  ``pascal case``\n-  ``kebab case``\n- or you can pass ``None`` to skip case validation completely\n\nYour OpenAPI schema will be tested to make sure all parameter names\nare correctly cased according to this preference. If you do not wish\nto enforce this check, you can specify ``None`` to skip this feature.\n\nExample:\n\n.. code:: python\n\n    from django_swagger_tester.case_testers import is_camel_case\n\n    SWAGGER_TESTER = {\n        'CASE_TESTER': is_camel_case,\n    }\n\n**Default**: ``None``\n\n*CASE_PASSLIST*\n~~~~~~~~~~~~~~~~\n\nList of string for ignoring exceptions from general case-testing. Say you've decided that all your responses should be camel cased, but you've already made ``IP`` a capitalized response key; you can the add the key to your ``CASE_PASSLIST`` to avoid this being flagged as an error in your tests.\n\nExample:\n\n.. code:: python\n\n    from django_swagger_tester.case_testers import is_camel_case\n\n    SWAGGER_TESTER = {\n        'CASE_PASSLIST': ['IP', 'DHCP'],\n    }\n\n**Default**: ``[]``\n\n*CAMEL_CASE_PARSER*\n~~~~~~~~~~~~~~~~~~~\n\nShould be set to ``True`` if you use `djangorestframework-camel-case <https://github.com/vbabiy/djangorestframework-camel-case>`_'s\n``CamelCaseJSONParser`` or ``CamelCaseJSONRenderer`` for your API views.\n\nExample:\n\n.. code:: python\n\n  SWAGGER_TESTER = {\n      'CAMEL_CASE_PARSER': True,\n  }\n\n**Default**: ``False``\n\n\nResponse Validation\n===================\n\nTo make sure your API response matches your documented response, the ``validate_response`` function compares the two at each level of depth.\n\nA pytest implementation might look like this:\n\n.. code:: python\n\n    from django_swagger_tester.testing import validate_response\n\n    def test_200_response_documentation(client):\n        route = 'api/v1/test/1'\n        response = client.get(route)\n        assert response.status_code == 200\n        assert response.json() == expected_response\n\n        # test swagger documentation\n        validate_response(response=response, method='GET', route=route)\n\nA Django-test implementation might look like this:\n\n.. code-block:: python\n\n    from django_swagger_tester.testing import validate_response\n\n    class MyApiTest(APITestCase):\n\n        path = '/api/v1/test/'\n\n        def setUp(self) -> None:\n            user, _ = User.objects.update_or_create(username='test_user')\n            self.client.force_authenticate(user=user)\n\n        def test_get_200(self) -> None:\n            response = self.client.get(self.path, headers={'Content-Type': 'application/json'})\n            expected_response = [...]\n\n            self.assertEqual(response.status_code, 200)\n            self.assertEqual(response.json(), expected_response)\n\n            # test swagger documentation\n            validate_response(response=response, method='GET', route=self.path)\n\nIt is also possible to test more than a single response at the time:\n\n.. code:: python\n\n    def test_post_endpoint_responses(client):\n        # 201 - Resource created\n        response = client.post(...)\n        validate_response(response=response, method='POST', route='api/v1/test/')\n\n        # 400 - Bad data\n        response = client.post(...)\n        validate_response(response=response, method='POST', route='api/v1/test/')\n\n    def test_get_endpoint_responses(client):\n        # 200 - Fetch resource\n        response = client.get(...)\n        validate_response(response=response, method='GET', route='api/v1/test/<id>')\n\n        # 404 - Bad ID\n        response = client.get(...)\n        validate_response(response=response, method='GET', route='api/v1/test/<bad id>')\n\nErrors\n------\n\nWhen found, errors will be raised in the following format:\n\n.. code-block:: shell\n\n    django_swagger_tester.exceptions.SwaggerDocumentationError: Item is misspecified:\n\n    Summary\n    -------------------------------------------------------------------------------------------\n\n    Error:      The following properties seem to be missing from your response body: length, width.\n\n    Expected:   {'name': 'Saab', 'color': 'Yellow', 'height': 'Medium height', 'width': 'Very wide', 'length': '2 meters'}\n    Received:   {'name': 'Saab', 'color': 'Yellow', 'height': 'Medium height'}\n\n    Hint:       Remove the key(s) from you Swagger docs, or include it in your API response.\n    Sequence:   init.list\n\n    -------------------------------------------------------------------------------------------\n\n    * If you need more details: set `verbose=True`\n\n``Expected`` describes the response data, and ``Received`` describes the schema. In this example, the response data is\nmissing two attributes, ``height`` and ``width``, documented in the OpenAPI schema indicating that either the response needs to include more data, or\nthat the OpenAPI schema should be corrected.\n\nSome errors will include hints to help you understand what actions to take, to rectify the error.\n\nFinally, all errors will include a ``Sequence`` string indicating how the response tester has iterated through the orignal data structure, before finding an error.\n\n\nInput Validation\n================\n\nTo make sure your request body documentation is accurate, and will stay accurate, you can use endpoint serializers to validate your schema directly.\n\n``validate_input_serializer`` constructs an example representation of the documented request body, and passes it to the serializer it is given. This means it's only useful if you use serializers for validating your incoming request data.\n\nA Django test implementation of input validation for a whole project could be structured like this:\n\n.. code:: python\n\n    from django.test import SimpleTestCase\n    from django_swagger_tester.testing import validate_input_serializer\n\n    from api.serializers.validation.request_bodies import ...\n\n\n    class TestSwaggerInput(SimpleTestCase):\n        endpoints = [\n            {\n                'api/v1/orders/': [\n                    ('POST', ValidatePostOrderBody),\n                    ('PUT', ValidatePutOrderBody),\n                    ('DELETE', ValidateDeleteOrderBody)\n                ]\n            },\n            {\n                'api/v1/orders/<id>/entries/': [\n                    ('POST', ValidatePostEntryBody),\n                    ('PUT', ValidatePutEntryBody),\n                    ('DELETE', ValidateEntryDeleteBody)\n                ]\n            },\n        ]\n\n        def test_swagger_input(self) -> None:\n            \"\"\"\n            Verifies that the documented request bodies are valid.\n            \"\"\"\n            for endpoint in self.endpoints:\n                for route, values in endpoint.items():\n                    for method, serializer in values:\n                        validate_input_serializer(serializer=serializer, method=method, route=route)\n\n.. _`https://django-swagger-tester.readthedocs.io/`: https://django-swagger-tester.readthedocs.io/en/latest/?badge=latest\n.. _Testing response documentation: https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#response-validation\n.. _Testing input documentation: https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#input-validation\n.. _ensuring your docs comply with a single parameter naming standard (case type): https://django-swagger-tester.readthedocs.io/en/latest/implementation.html#case-checking\n.. _drf_yasg: https://github.com/axnsan12/drf-yasg\n.. _documentation: https://django-swagger-tester.readthedocs.io/\n.. _docs: https://django-swagger-tester.readthedocs.io/\n.. _drf: https://www.django-rest-framework.org/topics/documenting-your-api/#generating-documentation-from-openapi-schemas\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sondrelg/django-swagger-tester",
    "keywords": "openapi,swagger,api,testing,django",
    "license": "BSD-4-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-swagger-tester",
    "package_url": "https://pypi.org/project/django-swagger-tester/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-swagger-tester/",
    "project_urls": {
      "Documentation": "https://django-swagger-tester.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/sondrelg/django-swagger-tester",
      "Repository": "https://github.com/sondrelg/django-swagger-tester"
    },
    "release_url": "https://pypi.org/project/django-swagger-tester/2.0.0/",
    "requires_dist": [
      "djangorestframework",
      "django (>=2.2,<4.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Django test utility for validating Swagger documentation",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9213281,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a510ccfe4d37e1eb4047a266e72379e63a29981be0d519c03975eba28005ae9",
        "md5": "534761a7f903c0d8237ef82fc5579cbf",
        "sha256": "5acc5e54624da3721c9d299a0acca6f7ac06629ef99fccba7bc7570d344c4b0a"
      },
      "downloads": -1,
      "filename": "django_swagger_tester-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "534761a7f903c0d8237ef82fc5579cbf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 26458,
      "upload_time": "2020-09-14T16:00:26",
      "upload_time_iso_8601": "2020-09-14T16:00:26.922141Z",
      "url": "https://files.pythonhosted.org/packages/9a/51/0ccfe4d37e1eb4047a266e72379e63a29981be0d519c03975eba28005ae9/django_swagger_tester-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0aca0b145e7525a62c5c79a7eb248b682d9223f06bb619c737c6e7e2040ae243",
        "md5": "10b32b5885ced1e2c438a3475cd3e082",
        "sha256": "3003c580a1a9d3e8c4c2e98a33a788c0609296fb8255b85d5cb9459850127281"
      },
      "downloads": -1,
      "filename": "django-swagger-tester-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "10b32b5885ced1e2c438a3475cd3e082",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 23865,
      "upload_time": "2020-09-14T16:00:25",
      "upload_time_iso_8601": "2020-09-14T16:00:25.574197Z",
      "url": "https://files.pythonhosted.org/packages/0a/ca/0b145e7525a62c5c79a7eb248b682d9223f06bb619c737c6e7e2040ae243/django-swagger-tester-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}