{
  "info": {
    "author": "Ib Hansen",
    "author_email": "Ib.Hansen.Iv@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ModelFlow\r\nA Python toolkit to manage models\r\n\r\nThe easy way to start is here [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/IbHansen/modelflow/master). \r\n\r\nThis will start **ModelFlow** as an online Jupyter notebook. Select one of the notebooks (files with the extension .ipynb). Some of the \r\nnotebooks are ModelFlow related. Other implement different model \r\n\r\n - FRBUS  will start the FRB/US model from the Federal reserve board. \r\n - Q-JEM will start the Quarterly Japanese Economic Model from Bank of Japan\r\n - ADAM will start the Anual Danish Aggregate Model for the Danish Statistical agency. \r\n - Solow will implement a simple textybook Solow model. \r\n\r\nYou can also look at the python files of the system. Located at the **modelflow/** folder\r\n\r\nAlternative look at the *getting started* section later in this file. It explains how to run ModelFlow localy. \r\n\r\nThe **Pandas** library is a great library to handle all kinds of datamanipulation and transformations. \r\n\r\nHowever when it comes to models which contains lags or models which requires solving simultanous equations, Pandas is not quite helpful. \r\n\r\nModelFlow extends Pandas to handle a range of such models. And they can be large.  \r\n\r\nIt requires you to specify the *model* specified as equations (the **business logic**) and place the *data* in a Pandas  **DataFrame**.  ModelFlow allows the model to meet the data and return the result as a new DataFrame. \r\n\r\nA number of **analytical tools for model and result analytic** helps to understand the model and its results.\r\n\r\nThe user can **extend and modify the tools** to her or his needs.\r\n\r\n**Onboarding models and combining models from different sources**. Creating a Macro prudential model often entails recycling several models specified in different ways: Excel, Latex, Dynare, Python or other languages. Python's ecosystem makes it possible to transform many different models into ModelFlow models or to wrap them into functions which can be called from ModelFlow models.\r\n\r\n**Models can be specified in a high level Business logic language (a Domain Specific language)**. This allows the formulation of a model in a concise and expressive language which is close to the economic of the model. The user can concentrate on the economic or financial content - not the coding of the solution. The code for solving the model is generated by the tool. Then you can *solve the\r\nsimultaneous* (or *non-simultaneous* model) in an efficient way. \r\n\r\n## Introduction \r\n\r\n**ModelFlow is written in Python**. Python comes \"batteries included\" and is\r\nthe basis of a very rich ecosystem, which consists of a wide array of\r\nlibraries. ModelFlow is just another library. It supplements the existing\r\nlibraries regarding modeling language and solving and allows the use of\r\nPython as a model management framework.\r\n\r\n**Data handling and wrangling is done in the Pandas library**. This\r\nlibrary is the Swiss army knife of data science in Python. It can import and export data to most systems and it is very powerful in manipulating and transforming data.\r\nThe core\r\nelement of Pandas is the *Dataframe*. A Dataframe is a two-dimensional\r\ntabular data structure. Each *column* consists of cells of the same type\r\n-- it can be a number, a string, a matrix or another Python data object.This includes matrices and other dataframes. Each *row is indexed.* The index can basically be any type of variable\r\nincluding dates, which is especially relevant for economic and financial models.\r\n\r\n**ModelFlow gives the user tools for more than solving models**. This\r\nincludes:\r\n\r\n-   *Visualization* and comparison of results\r\n\r\n-   *Integration* of models from different sources\r\n\r\n-   *Analyze the logical structure of a model*. By applying graph theory, \r\n    ModelFlow can find data lineage, find a suitable calculating sequence and trace \r\n    causes of changes through the calculations.\r\n\r\n-   *Inverting* the model to calculating the necessary instruments to\r\n    achieve a desired target.\r\n\r\n-   Calculating the *attributions* from input to the results of a model.\r\n\r\n-   Calculating the *attribution* from input to the result of each\r\n    formula.\r\n\r\n-   Finding and calculating partial *derivatives* of formulas\r\n\r\n-   *Integrating user defined python functions* in the Business logic\r\n    language (like optimization, calculating risk weights or to make a matrices consistent with the RAS algorithm  )\r\n\r\n-   *Wrap matlab* models so they can be used in the Business logic\r\n    language.\r\n\r\n-   *Speed up* solving using \"Just in time compilation\"\r\n\r\n-   Analyze the model structure through tools from graph theory\r\n\r\n-   Handle *large models.* 1,000,000 formulas is not a problem.\r\n\r\n-   Integrate model management in Jupyter notebooks for *agile and user\r\n    friendly model use*\r\n\r\n\r\n**The core code of ModelFlow is small and\r\ndocumented.** Thus it can easily be modified and expanded to the specific need of the user. *ModelFlow is a toolset*. It can handle models, which conform to the tools.\r\n\r\nIf you need a feature or have a model which can't be handled in ModelFlow,\r\nyou are encouraged to improve ModelFlow. Please share the\r\nimprovement, other users may have the same need, or can be inspired by\r\nyour work.\r\n\r\nAlso bear in mind that ModelFlow is experimental. It is provided ”as is”, without any representation or warranty of any kind either express or implied.   \r\n\r\n## Getting started\r\n\r\nYou need Python 3.7+ with asssociated libraries. The easy way is to install Anaconda Python is to download the distribution from [https://www.anaconda.com/distribution](https://www.anaconda.com/distribution)\r\n\r\nNow you can install ModelFlow by running a command window from the Anaconda prompt and execute theese commands \r\n```\r\nconda install modelflow -c ibh -c defaults -c conda-forge\r\n```\r\nYou will find the anaconda prompt by searching \"anaconda\" in the start menu search field\r\n\r\nTry out one of the workbooks. to do this you:\r\n```\r\nclick on the Adaconda prompth in the Anaconda folder\r\ncd <The location you have downloaded the workbooks>\r\njupyter notebook\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://https://github.com/IbHansen/ModelFlow2",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ModelFlowIb",
    "package_url": "https://pypi.org/project/ModelFlowIb/",
    "platform": null,
    "project_url": "https://pypi.org/project/ModelFlowIb/",
    "project_urls": {
      "Homepage": "https://https://github.com/IbHansen/ModelFlow2"
    },
    "release_url": "https://pypi.org/project/ModelFlowIb/1.49/",
    "requires_dist": [
      "pandas",
      "matplotlib",
      "Seaborn",
      "sympy",
      "jupyter",
      "ipywidgets",
      "numpy",
      "networkx",
      "tqdm",
      "scipy",
      "numexpr",
      "bottleneck",
      "XLsxWriter",
      "pyarrow",
      "tabulate",
      "openpyxl",
      "xarray",
      "setuptools",
      "wheel",
      "cvxopt",
      "numba",
      "jupyter-contrib-nbextensions",
      "rise",
      "ipysheet",
      "shiny",
      "shinywidgets"
    ],
    "requires_python": ">=3.7",
    "summary": "A tool to solve and manage dynamic economic models",
    "version": "1.49",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17416734,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e5016d6bf158050f0cd6260bce4aa19010de32320454d6e66985e2a88c410cf",
        "md5": "51f1fa5de253ecb438a7a9accf8e4296",
        "sha256": "daed32add7b3760f26337c828ccd67423c41227bcb37e90a1abad8d28ecaafff"
      },
      "downloads": -1,
      "filename": "ModelFlowIb-1.49-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "51f1fa5de253ecb438a7a9accf8e4296",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 997430,
      "upload_time": "2023-01-10T22:52:49",
      "upload_time_iso_8601": "2023-01-10T22:52:49.165254Z",
      "url": "https://files.pythonhosted.org/packages/1e/50/16d6bf158050f0cd6260bce4aa19010de32320454d6e66985e2a88c410cf/ModelFlowIb-1.49-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}