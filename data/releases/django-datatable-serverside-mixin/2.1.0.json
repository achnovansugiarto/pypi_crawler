{
  "info": {
    "author": "Matt Henry",
    "author_email": "matthttam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Django Serverside DataTables\n\nThis is a fork of Umesh Krishna's django-serverside-datatable which was written for an older version of DataTables. This updated version has been rewritten. Thanks to Umesh for the foundation to start from.\n\nThis is  package that lets you easily extend views to work with DataTables.net server-side processing in your Django Project.\n\nSupports DataTables features such as Pagination, Search, filtering, etc...\n\n## Requirements\n- Pythin version 3.10+ (may work on older versions but is untested)\n- Django version 3.x or 4.x\n\n## Install\n\n```\npip install django-datatable-serverside-mixin\n```\n\n\n## How to use\n\nCreate a django View that inherits from  **ServerSideDatatableMixin**.\nExample (backend):\n\n```python\n# views.py\n\nfrom django_serverside_datatable_mixin.views import ServerSideDataTablesMixin\n\n\nclass PersonListView(ServerSideDatatableMixin):\n\tqueryset = Person.objects.all()\n\tcolumns = ['person_name', 'person_code', 'person_description','person__building__name']\n```\n```python\n# urls.py\n# add the following element to your urlpatterns array\n\npath('data/', views.PersonListView.as_view()), \n\n```\n\nExample (frontend):\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.datatables.net/1.12.1/css/jquery.dataTables.min.css\"/>\n \n\t<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n\t<script type=\"text/javascript\" src=\"https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<h1>People</h1>\n\t\t<hr>\n\t\t<table id=\"people-table\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t<th>Code</th>\n\t\t\t\t\t<th>Description</th>\n\t\t\t\t\t<th>Building Name</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody></tbody>\n\t\t</table>\n\n\t\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n\t\t<script src=\"https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js\"></script>\n\t\t<script language=\"javascript\">\n\t\t\t$(document).ready(function () {\n\t\t\t\t$('#people-table').dataTable({\n\t\t\t\t\tserverSide: true,\n\t\t\t\t\tsAjaxSource: \"http://127.0.0.1:8000/data/\",  // new url\n                                        columns: [\n                                            {name: \"name\", data: \"name\"},\n                                            {name: \"code\", data: \"code\"},\n                                            {name: \"description\", data: \"description\"},\n                                            {name: \"building\", data: \"building__name\"},\n                                        ],\n\t\t\t\t});\n\t\t\t});\n\t\t</script>\n\t</body>\n</html>\n```\nThe dataTables `columns` option must be configured in the dataTable initialization. Each column is `required` to have a `data` attribute corresponding to the view's `columns` array. Name is optional as of version 2.0.0 and is no longer used.\n\nThe `data` attribute must correspond to a valid field provided by the view and must ultimately match an attribute on records in your queryset. Use annotations on your queryset if you prefer data values that don't look like \"person__building__name.\"\n\nThis is generally compatible with DataTables features such as ColReorder and colvis.\n\nFor further customization of Datatable, you may refer the [Datatables.net official documentation](https://datatables.net/manual/).\n\n### Data Callback\nServerSideDataTablesMixin provides a callback method named data_callback that can be overridden. Use this method to change the formatting or add/remove any pieces of data. This gives you full flexibility to render the data *after* everything has been sorted, filtered, paginated, etc...\n\n\n```python\nclass PersonListView(ServerSideDataTablesMixin):\n\tdef data_callback(self, data: list[dict]) -> list[dict]:\n\t\tfor row in data:\n\t\t\trow[\"actions\"] = render_to_string(\n\t\t\t\t\"people/table_row_buttons.html\",\n\t\t\t\tcontext={\"person\": row},\n\t\t\t\trequest=self.request,\n\t\t\t)\n\t\t\trow[\"id\"] = f\"{<b>row['id']</b>\"\n\t\treturn super().data_callback(data)\n```\n\nIn the example above the data for the ID column would render with <b> tags to make it bold. The table_row_buttons.html template would render buttons based on the person object. This text is added to the `row[\"actions\"]` attribute and the javascript would look for a column definition for `data: \"actions\"`.\n\n# Updates\n## New in version 2.1.0:\n- Renamed ServerSideDataTablesMixin to ServerSideDataTablesMixin. A deprecation warning will trigger if the old class name is used.\n- Added a data_callback method to ServerSideDataTablesMixin which can be used to manipulate the data just before rendering to JSON. Useful for adding HTML or modifying any data fields based on view context (like permissions).\n## New in version 2.0.0:\n- Fixed a bug where using a -1 for the pagination length would not work as expected (now provides all records)\n- Implemented regex filtering\n- Implemented column based filtering\n- Wrote tests\n- Refactored all code to streamline the process and speed up queries\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matthttam/django_datatable_serverside_mixin",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-datatable-serverside-mixin",
    "package_url": "https://pypi.org/project/django-datatable-serverside-mixin/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-datatable-serverside-mixin/",
    "project_urls": {
      "Homepage": "https://github.com/matthttam/django_datatable_serverside_mixin"
    },
    "release_url": "https://pypi.org/project/django-datatable-serverside-mixin/2.1.0/",
    "requires_dist": [
      "Django (>=3.0)",
      "querystring-parser (>=1.2.4)"
    ],
    "requires_python": ">=3.10",
    "summary": "Server-side DataTables processing view mixin for Django",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15490737,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8cbe2283a16ca9f9cb126ddca8b12f7d25ddca66c0c6b909bb78c52aaaa58a2",
        "md5": "caf73d95fa03507d160984b7256024d9",
        "sha256": "83b1d02c5e808d8f223e8c7693b1629a9441b0900a2cb5c9bac1e1b1e1c5cdd7"
      },
      "downloads": -1,
      "filename": "django_datatable_serverside_mixin-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "caf73d95fa03507d160984b7256024d9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 12056,
      "upload_time": "2022-10-21T15:49:31",
      "upload_time_iso_8601": "2022-10-21T15:49:31.107659Z",
      "url": "https://files.pythonhosted.org/packages/c8/cb/e2283a16ca9f9cb126ddca8b12f7d25ddca66c0c6b909bb78c52aaaa58a2/django_datatable_serverside_mixin-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8c8c9ece55d268fc84e2fa22042de8540bb479adbba321c2ec743429db4d39b",
        "md5": "4817a67c0398a72e1f3311f234960a27",
        "sha256": "1f62e8b2a5ac71efaa52a4be0c8533cf91945a01d0fa1d720d271a660dfbe7aa"
      },
      "downloads": -1,
      "filename": "django_datatable_serverside_mixin-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4817a67c0398a72e1f3311f234960a27",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 10072,
      "upload_time": "2022-10-21T15:49:33",
      "upload_time_iso_8601": "2022-10-21T15:49:33.535578Z",
      "url": "https://files.pythonhosted.org/packages/b8/c8/c9ece55d268fc84e2fa22042de8540bb479adbba321c2ec743429db4d39b/django_datatable_serverside_mixin-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}