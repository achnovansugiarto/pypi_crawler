{
  "info": {
    "author": "James Socol",
    "author_email": "me@jamessocol.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "===============\ndjango-jsonview\n===============\n\n\n.. image:: https://travis-ci.org/jsocol/django-jsonview.png?branch=master\n   :target: https://travis-ci.org/jsocol/django-jsonview\n\n**django-jsonview** is a simple decorator that translates Python objects\nto JSON and makes sure your view will always return JSON.\n\nI've copied and pasted this so often I decided I just wanted to put it\nin a package.\n\n\nInstallation\n============\n\nJust install with ``pip``::\n\n    pip install django-jsonview\n\nNo need to add to ``INSTALLED_APPS`` or anything.\n\n\nUsage\n=====\n\nJust import the decorator, use, and return a JSON-serializable object::\n\n    from jsonview.decorators import json_view\n\n    @json_view\n    def my_view(request):\n        return {\n            'foo': 'bar',\n        }\n\n\n`Class-based views`_ (CBVs) can either use Django's\n``@method_decorator`` or can wrap the output of ``.as_view()``::\n\n    from django.utils.decorators import method_decorator\n    from jsonview.decorators import json_view\n\n\n    class MyView(View):\n        @method_decorator(json_view)\n        def dispatch(self, *args, **kwargs):\n            return super(MyView, self).dispatch(*args, **kwargs)\n\n    # or, in URLconf\n\n    patterns = [\n        url(r'^/my-view/$', json_view(MyView.as_view())),\n    ]\n\n\nContent Types\n-------------\n\nIf you need to return a content type other than the standard\n``application/json``, you can specify that in the decorator with the\n``content_type`` argument, for example::\n\n    from jsonview.decorators import json_view\n\n    @json_view(content_type='application/vnd.github+json')\n    def myview(request):\n        return {'foo': 'bar'}\n\nThe response will have the appropriate content type header.\n\n\nReturn Values\n-------------\n\nThe default case is to serialize your return value and respond with HTTP\n200 and a Content-Type of ``application/json``.\n\nThe ``@json_view`` decorator will handle many exceptions and other\ncases, including:\n\n* ``Http404``\n* ``PermissionDenied``\n* ``HttpResponseNotAllowed`` (e.g. ``require_GET``, ``require_POST``)\n* ``jsonview.exceptions.BadRequest`` (see below)\n* Any other exception (logged to ``django.request``).\n\nAny of these exceptions will return the correct status code (i.e., 404,\n403, 405, 400, 500) a Content-Type of ``application/json``, and a\nresponse body that looks like::\n\n    json.dumps({\n        'error': STATUS_CODE,\n        'message': str(exception),\n    })\n\n.. note::\n\n   As of v0.4, application exceptions do **not** behave this way if\n   ``DEBUG = False``. When ``DEBUG = False``, the ``message`` value is\n   always ``An error occurred``. When ``DEBUG = True``, the exception\n   message is sent back.\n\n\n``BadRequest``\n--------------\n\nHTTP does not have a great status code for \"you submitted a form that\ndidn't validate,\" and so Django doesn't support it very well. Most\nexamples just return 200 OK.\n\nNormally, this is fine. But if you're submitting a form via Ajax, it's\nnice to have a distinct status for \"OK\" and \"Nope.\" The HTTP 400 Bad\nRequest response is the fallback for issues with a request\nnot-otherwise-specified, so let's do that.\n\nTo cause ``@json_view`` to return a 400, just raise a\n``jsonview.exceptions.BadRequest`` with whatever appropriate error\nmessage.\n\n\nExceptions\n----------\n\nIf your view raises an exception, ``@json_view`` will catch the\nexception, log it to the normal ``django.request`` logger_, and return a\nJSON response with a status of 500 and a body that looks like the\nexceptions in the `Return Values`_ section.\n\n.. note::\n\n   Because the ``@json_view`` decorator handles the exception instead of\n   propagating it, any exception middleware will **not** be called, and\n   any response middleware **will** be called.\n\n\nStatus Codes\n------------\n\nIf you need to return a different HTTP status code, just return two\nvalues instead of one. The first is your serializable object, the second\nis the integer status code::\n\n    @json_view\n    def myview(request):\n        if not request.user.is_subscribed():\n            # Send a 402 Payment Required status.\n            return {'subscribed': False}, 402\n        # Send a 200 OK.\n        return {'subscribed': True}\n\n\nExtra Headers\n-------------\n\nYou can add custom headers to the response by returning a tuple of three\nvalues: an object, a status code, and a dictionary of headers.\n\n::\n\n    @json_view\n    def myview(request):\n        return {}, 200, {'X-Server': 'myserver'}\n\nCustom header values may be overwritten by response middleware.\n\n\nRaw Return Values\n-----------------\n\nTo make it possible to cache JSON responses as strings (and because they\naren't JSON serializable anyway) if you return an ``HttpResponse``\nobject (or subclass) it will be passed through unchanged, e.g.::\n\n    from django import http\n    from jsonview.decorators import JSON\n\n    @json_view\n    def caching_view(request):\n        kached = cache.get('cache-key')\n        if kached:\n            return http.HttpResponse(kached, content_type=JSON)\n        # Assuming something else populates this cache.\n        return {'complicated': 'object'}\n\n.. note::\n\n   ``@require_POST`` and the other HTTP method decorators  work by\n   *returning* a response, rather than *raising*, an an exception, so\n   ``HttpResponseNotAllowed`` is handled specially.\n\n\nAlternative JSON Implementations\n================================\n\nThere is a healthy collection of JSON parsing and generating libraries\nout there. By default, it will use the old standby, the stdlib ``json``\nmodule. But, if you'd rather use ujson_, or cjson_ or yajl_, you should\ngo for it. Just add this to your Django settings::\n\n    JSON_MODULE = 'ujson'\n\nAnything, as long as it's a module that has ``.loads()`` and ``.dumps()``\nmethods.\n\n\nConfiguring JSON Output\n-----------------------\n\n.. versionadded:: 0.5\n\nAdditional keyword arguments can be passed to ``json.dumps()`` via the\n``JSON_OPTIONS = {}`` Django setting. For example, to pretty-print JSON\noutput::\n\n    JSON_OPTIONS = {\n        'indent': 4,\n    }\n\nOr to compactify it::\n\n    JSON_OPTIONS = {\n        'separators': (',', ':'),\n    }\n\njsonview uses ``DjangoJSONEncoder`` by default. To use a different JSON\nencoder, use the ``cls`` option::\n\n    JSON_OPTIONS = {\n        'cls': 'path.to.MyJSONEncoder',\n    }\n\n``JSON_OPTIONS['cls']`` may be a dotted string or a ``JSONEncoder``\nclass.\n\n.. versionchanged:: 1.0\n\n**If you are using a JSON module that does not support the ``cls``\nkwarg**, such as ujson, set the ``cls`` option to ``None``::\n\n    JSON_OPTIONS = {\n        'cls': None,\n    }\n\n\nAtomic Requests\n===============\n\nBecause ``@json_view`` catches exceptions, the normal Django setting\n``ATOMIC_REQUESTS`` does not correctly cause a rollback. This can be\nworked around by explicitly setting ``@transaction.atomic`` *below* the\n``@json_view`` decorator, e.g.::\n\n    @json_view\n    @transaction.atomic\n    def my_func(request):\n        # ...\n\n\nContributing\n============\n\n`Pull requests`_ and issues_ welcome! I ask two simple things:\n\n* Tests, including the new ones you added, must pass. (See below.)\n* The ``flake8`` tool should not return any issues.\n\n\nRunning Tests\n-------------\n\nTo run the tests, you probably want to create a virtualenv_, then\ninstall Django and Mock with ``pip``::\n\n    pip install Django==${DJANGO_VERSION} mock==1.0.1\n\nThen run the tests with::\n\n    ./run.sh test\n\n\n.. _logger:\n   https://docs.djangoproject.com/en/dev/topics/logging/#django-request\n.. _Pull requests: https://github.com/jsocol/django-jsonview/pulls\n.. _issues: https://github.com/jsocol/django-jsonview/issues\n.. _virtualenv: http://www.virtualenv.org/\n.. _ujson: https://pypi.python.org/pypi/ujson\n.. _cjson: https://pypi.python.org/pypi/python-cjson\n.. _yajl: https://pypi.python.org/pypi/yajl\n.. _Class-based views: https://docs.djangoproject.com/en/1.9/topics/class-based-views/intro/#decorating-class-based-views",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jsocol/django-jsonview",
    "keywords": null,
    "license": "Apache v2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-jsonview",
    "package_url": "https://pypi.org/project/django-jsonview/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-jsonview/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/jsocol/django-jsonview"
    },
    "release_url": "https://pypi.org/project/django-jsonview/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Always return JSON from your Django view.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7601430,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4669a8f6c83d99ef01da5c722d7b213cccc7c17995215f069593782c3f4e8c1",
        "md5": "3bdc4519b8b25fb5756f653509202bd0",
        "sha256": "0dca666cf49bc054a395abd646e0dad970e444e1f94f856efabe0cb2415b96e5"
      },
      "downloads": -1,
      "filename": "django_jsonview-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3bdc4519b8b25fb5756f653509202bd0",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 13494,
      "upload_time": "2016-05-28T22:01:46",
      "upload_time_iso_8601": "2016-05-28T22:01:46.705625Z",
      "url": "https://files.pythonhosted.org/packages/b4/66/9a8f6c83d99ef01da5c722d7b213cccc7c17995215f069593782c3f4e8c1/django_jsonview-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25d9a3ad7ab1a382a07cd188f74f86b9bebeaf74921b9b116ae3f7a1a57fe263",
        "md5": "e70c836fc4733ef42f253adb5fa49b73",
        "sha256": "d1cc736c03d582874e21d20be96f302c96ee6f85b8352ed806c6bd8b863f6f77"
      },
      "downloads": -1,
      "filename": "django-jsonview-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e70c836fc4733ef42f253adb5fa49b73",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11709,
      "upload_time": "2016-05-28T22:01:42",
      "upload_time_iso_8601": "2016-05-28T22:01:42.638343Z",
      "url": "https://files.pythonhosted.org/packages/25/d9/a3ad7ab1a382a07cd188f74f86b9bebeaf74921b9b116ae3f7a1a57fe263/django-jsonview-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}