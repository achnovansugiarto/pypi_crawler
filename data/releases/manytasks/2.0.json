{
  "info": {
    "author": "dugu9sword",
    "author_email": "dugu9sword@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Manytasks\n\nA lightweight tool for deploying many tasks automatically, without any modification to your code.\n\n- [Manytasks](#manytasks)\n  - [Installation](#installation)\n  - [Quick Example](#quick-example)\n  - [Sample Configuration](#sample-configuration)\n  - [Design Philosophy](#design-philosophy)\n  - [Analysis](#analysis)\n  - [History](#history)\n\n\n## Installation\n\nI **recommend** you install from github to get the newest features:\n\n`pip install git+https://github.com/dugu9sword/manytasks.git` \n\nYou can also install the package (**maybe outdated**) from pypi:\n\n`pip install manytasks [not recommended]` \n\n\n## Quick Example\n\n```\ncd examples/python\n\n# configuration is stored in tasks.json\nmanytasks run tasks\n```\n\nAll running logs are stored in `tasks.logs`. \n\n- The running log of the manytasks is written into `task.logs/status.txt` \n\n- The IO stream of tasks (e.g. `print()`, `Exception`, `Error`, ...) are redirected to `task.logs/task-[index].txt`.\n\n\n## Sample Configuration\n\nFor more complex cases, see `ADVANCED_CASES.md`.\n\n```python\n{\n  \"executor\": \"python some.py\",    \n  \"cuda\": [4, 5, 6, 7],\n  \"concurrency\": 4,           # num of tasks to run in parallel\n  \"cuda_per_task\": 1,\n  \"configs\": {\n    # basic configurations\n    \"==base==\": [          \n      \"arg0\",\n      \"--a\", [50, 100],       # `--a` takes value from [50, 100]\n      \"--name\", \"a_${--a}\"    # \"${--a}\" refers to the value of `--a`\n    ],\n    # more disjoint configurations\n    \"==more==\": [\n      [ \"--c1\", [1, 2] ],            # [1, 2]\n      [ \"--c2\", \"$<x|y>.$<1:4>\" ],   # [x.1, x.2, x.3, y.1, y.2, y.3]\n    ]\n  }\n}\n```\n\nwhich yields:\n```bash\n---  ----  ---  ------  ----  ----\nidx  __1   --a  --name  --c1  --c2\n0    arg0  50   a_50    1     -\n1    arg0  50   a_50    2     -\n2    arg0  100  a_100   1     -\n3    arg0  100  a_100   2     -\n4    arg0  50   a_50    -     x.1\n5    arg0  50   a_50    -     x.2\n6    arg0  50   a_50    -     x.3\n7    arg0  50   a_50    -     y.1\n8    arg0  50   a_50    -     y.2\n9    arg0  50   a_50    -     y.3\n10   arg0  100  a_100   -     x.1\n11   arg0  100  a_100   -     x.2\n12   arg0  100  a_100   -     x.3\n13   arg0  100  a_100   -     y.1\n14   arg0  100  a_100   -     y.2\n15   arg0  100  a_100   -     y.3\n---  ----  ---  ------  ----  ----\n```\n\n### Syntax Sugar\n\nThe syntax sugar makes the enumeration of arguments more easier.\n\n| Type                     | Example Input                | Example Output                             |\n| ------------------------ | ---------------------------- | ------------------------------------------ |\n| **list**                 | `$<1:6>`                     | `[1, 2, 3, 4, 5]`                          |\n| **list** (with step)     | `$<1:6:2>`                   | `[1, 3, 5]`                                |\n| **list** (with zero-pad) | `$<1:6:2;3>`                | `[001, 003, 005]`                          |\n| **set**          | `$<a\\|b\\|c>`               | `[a, b, c]`                                |\n| **script**         | `$<range(3,6)>`              | `[3, 4, 5]`                                |\n| **script** (more) | `$<open(\"foo\").readlines()>` | `it depends.`                              |\n| **composition** | `x_$<1:3;3>.txt` | `[x_001.txt, x_002.txt]` |\n| **composition** (more) | `logs/$<a\\|b>.$<1:3>`         | `[logs/a.1, logs/a.2, logs/b.1, logs/b.2]` |\n\n\n\n\n\n## Design Philosophy\n\n**Q**: Why not use other open-source tools for hyper-parameter tuning, such as `optuna`, `hydra`, `wandb`?\n\n**A**: The first time I developed this tool is 2019-1-1, when most of those tools (except `optuna`) were **not born** yet. What's more, \n\n- These tools are **heavy**, which means:\n    - You need to modify your code (add several lines of `import xxx; xxx.foo(); xxx.bar();`) to integrate their functionalities.\n    - You may have to replace your `print(...)` or `log(...)` function with theirs, sometimes your results may be logged to their server. \n    - These tools are highly binded with `python`, which means they may fail if your code is written in `perl` (such as `mosetokenizer` in machine translation), `bash` (such as your code for preprocessing), etc.\n- `manytasks` is a lightweight tool which helps you deploy many tasks **without any modification** to your code, all logs will be saved in your machine.\n\n**Q**:When should you use other open-source tools for hyper-parameter tuning, such as `optuna`, `hydra`, `wandb`?\n\n**A**: For complex cases when you would like to enjoy their power of hyper-parameter tuning.\n\n## Analysis\n\nSee `Analysis.md`.\n\n## History\n\nSee `History.md`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dugu9sword/manytasks",
    "keywords": "manytasks",
    "license": "WTFPL Licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "manytasks",
    "package_url": "https://pypi.org/project/manytasks/",
    "platform": "any",
    "project_url": "https://pypi.org/project/manytasks/",
    "project_urls": {
      "Homepage": "https://github.com/dugu9sword/manytasks"
    },
    "release_url": "https://pypi.org/project/manytasks/2.0/",
    "requires_dist": [
      "jstyleson",
      "tabulate",
      "numpy",
      "psutil",
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "A tool for deploying many tasks automatically.",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14740614,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd72bf73f950f258aeec823b09c249b4f0aaede4372b209342e2668e15ffcdf9",
        "md5": "f9d9b36c39ee21b49854a918d85d5447",
        "sha256": "e1f09e5ff33983a8b048c6fef59c4d58ddffbd7cc2c9da6a9ea5f1514485e860"
      },
      "downloads": -1,
      "filename": "manytasks-2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f9d9b36c39ee21b49854a918d85d5447",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14672,
      "upload_time": "2022-08-12T14:22:48",
      "upload_time_iso_8601": "2022-08-12T14:22:48.788386Z",
      "url": "https://files.pythonhosted.org/packages/cd/72/bf73f950f258aeec823b09c249b4f0aaede4372b209342e2668e15ffcdf9/manytasks-2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8933b79a4e28fe62560181f5fa99d425e29b7f32794b880ce6f62025833b1ae8",
        "md5": "1beb456ba0ca3121c0195ead635de470",
        "sha256": "18baba4eb6bf81b069bec93b382424adc4241d1802561005a99142065a8f3188"
      },
      "downloads": -1,
      "filename": "manytasks-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1beb456ba0ca3121c0195ead635de470",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13941,
      "upload_time": "2022-08-12T14:22:50",
      "upload_time_iso_8601": "2022-08-12T14:22:50.845346Z",
      "url": "https://files.pythonhosted.org/packages/89/33/b79a4e28fe62560181f5fa99d425e29b7f32794b880ce6f62025833b1ae8/manytasks-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}