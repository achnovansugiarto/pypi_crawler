{
  "info": {
    "author": "Dmitry Vasilyev",
    "author_email": "info@postgrespro.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Monitoring"
    ],
    "description": "****************************************\nmamonsu: Monitoring agent for PostgreSQL\n****************************************\n\n============\nBuild status\n============\n.. image:: https://travis-ci.org/postgrespro/mamonsu.svg?branch=master\n    :target: https://travis-ci.org/postgrespro/mamonsu\n\n========\nLicense\n========\n\nDevelopment version, available on github, released under BSD 3-clause.\n\n============\nInstallation\n============\n\nPre-Build packages for:\n\n    Linux distros: https://packagecloud.io/postgrespro/mamonsu\n\n    `Windows installers <https://oc.postgrespro.ru/index.php/s/qu7YsFvOE55LdXo>`_\n\nInstall via pip:\n\n.. code-block:: bash\n\n    $ pip install mamonsu\n\nInstall from git:\n\n.. code-block:: bash\n\n    $ git clone ... && cd mamonsu && python setup.py build && python setup.py install\n\nBuild deb:\n\n.. code-block:: bash\n\n    $ apt-get install make dpkg-dev debhelper python-dev python-setuptools\n    $ git clone ... && cd mamonsu && make deb && dpkg -i mamonsu*.deb\n\nBuild rpm:\n\n.. code-block:: bash\n\n    $ yum install make rpm-build python2-devel python-setuptools\n    $ git clone ... && cd mamonsu && make rpm && rpm -i mamonsu*.rpm\n\nBuild win32 exe: (worked with python v3.{4,5}: py2exe v0.9.2.2 and pywin32 v220 or python v2.7: py2exe v0.6.9 and pywin32 v220):\n\n.. code-block:: bash\n\n    $ git clone ... && cd mamonsu && python setup_win32.py py2exe\n    $ cp dist\\{mamonsu, service_win32}.exe c:\\mamonsu\n    $ c:\\mamonsu\\mamonsu.exe -w c:\\mamonsu\\agent.conf\n    $ c:\\mamonsu\\service_win32.exe -install\n    $ net start mamonsu\n\nBuild nsis installer:\n\n.. code-block:: bash\n\n    $ git clone ... && cd mamonsu && python setup_win32.py py2exe\n    $ nsis packaging/win/mamonsu.nsis\n\n==========\nConfigure\n==========\n\nExport template for zabbix:\n\n.. code-block:: bash\n\n    $ mamonsu export template template.xml --add-plugins /etc/mamonsu/plugins\n    or\n    $ wget https://raw.githubusercontent.com/postgrespro/mamonsu/master/packaging/conf/template.xml\n    or\n    $ cp /usr/share/mamonsu/template.xml .\n\nImport this file in web interface of zabbix: Configuration => Templates => Import, or deploy with mamonsu:\n\n.. code-block:: bash\n\n    $ mamonsu zabbix template export /usr/share/mamonsu/template.xml --url=http://zabbix/ --user=Admin --password=zabbix\n\nAdd this template like `PostgresPro-Linux` at your monitoring host, or create host with mamonsu:\n\n.. code-block:: bash\n\n    $ mamonsu zabbix host create <client name> <hostgroup id> <template id> <ip> --url=http://zabbix/ --user=Admin --password=zabbix\n\nGenerate config on monitring host (or use preinstalled):\n\n.. code-block:: bash\n\n    $ mamonsu export config /etc/mamonsu/agent.conf --add-plugins /etc/mamonsu/plugins\n\nChange previously zabbix server address and client hostname:\n\n.. code-block:: bash\n\n    $ vim /etc/mamonsu/agent.conf\n\n    $ cat /etc/mamonsu/agent.conf\n\n    [zabbix]\n    ; enabled by default\n    enabled = True\n    client = zabbix_client_host_name\n    address = zabbix_server_ip\n\n    [postgres]\n    ; enabled by default\n    enabled = True\n    user = mamonsu\n    database = mamonsu\n    ; empty password\n    password = None\n    port = 5432\n    query_timeout = 10\n\n    [system]\n    ; enabled by default\n    enabled = True\n\n    [log]\n    file = /var/log/mamonsu/agent.log\n    level = INFO\n\nBootstrap DDL for monitoring (if you want to monitoring without superuser rights)\n\n.. code-block:: bash\n\n    $ createdb mamonsu\n    $ createuser mamonsu\n    $ mamonsu bootstrap -U postgres -d mamonsu\n\n==================\nWrite your plugin\n==================\n\nAll plugins must exist in plugin directory which is defined in your configuration file.\n\nSee the `examples <https://github.com/postgrespro/mamonsu/tree/master/examples>`_ for aditional information.\n\nAfter add new plugin, you must to reexport template and import this file to zabbix.\n\n=========\n3rd-party\n=========\n\n* `repo mamonsu-plugins <https://github.com/tarabanton/mamonsu-plugins>`_ for skytools, nginx, rabbitmq, uwsgi, gdnsd.\n\n====\nRun\n====\n\n.. code-block:: bash\n\n    $ service mamonsu start\n    or by hand:\n    $ mamonsu -d -a /etc/mamonsu/plugins -c /etc/mamonsu/agent.conf -p /var/run/mamonsu.pid\n\n====================\nMetrics:  PostgreSQL\n====================\n\n.. code-block:: bash\n\n    'PostgreSQL: ping': pgsql.ping[]\n    'PostgreSQL: service uptime': pgsql.uptime[]\n    'PostgreSQL: cache hit ratio': pgsql.cache[hit]\n    'PostgreSQL: number of total connections': pgsql.connections[total]\n    'PostgreSQL: number of waiting connections': pgsql.connections[waiting]\n    'PostgreSQL: number of active connections': pgsql.connections[active]\n    'PostgreSQL: number of idle connections': pgsql.connections[idle]\n    'PostgreSQL: number of idle in transaction connections': pgsql.connections[idle_in_transaction]\n    'PostgreSQL checkpoint: by timeout (in hour)': pgsql.checkpoint[count_timed]\n    'PostgreSQL checkpoint: by wal (in hour)': pgsql.checkpoint[count_wal]\n    'PostgreSQL checkpoint: write time': pgsql.checkpoint[write_time]\n    'PostgreSQL checkpoint: sync time': pgsql.checkpoint[checkpoint_sync_time]\n    'PostgreSQL bgwriter: buffers written during checkpoints': pgsql.bgwriter[buffers_checkpoint]\n    'PostgreSQL bgwriter: buffers written': pgsql.bgwriter[buffers_clean]\n    'PostgreSQL bgwriter: number of bgwriter stopped by max write count': pgsql.bgwriter[maxwritten_clean]\n    'PostgreSQL bgwriter: buffers written directly by a backend': pgsql.bgwriter[buffers_backend]\n    'PostgreSQL bgwriter: times a backend execute its own fsync': pgsql.bgwriter[buffers_backend_fsync]\n    'PostgreSQL bgwriter: buffers allocated': pgsql.bgwriter[buffers_alloc]\n    'PostgreSQL: count of autovacuum workers': pgsql.autovacumm.count[]\n    'PostgreSQL transactions: total': pgsql.transactions[total]\n    'PostgreSQL blocks: hit': pgsql.blocks[hit]\n    'PostgreSQL blocks: read': pgsql.blocks[read]\n    'PostgreSQL event: conflicts': pgsql.events[conflicts]\n    'PostgreSQL event: deadlocks': pgsql.events[deadlocks]\n    'PostgreSQL event: rollbacks': pgsql.events[xact_rollback]\n    'PostgreSQL temp: bytes written': pgsql.temp[bytes]\n    'PostgreSQL temp: files created': pgsql.temp[files]\n    'PostgreSQL tuples: deleted': pgsql.tuples[deleted]\n    'PostgreSQL tuples: fetched': pgsql.tuples[fetched]\n    'PostgreSQL tuples: inserted': pgsql.tuples[inserted]\n    'PostgreSQL tuples: returned': pgsql.tuples[returned]\n    'PostgreSQL tuples: updated': pgsql.tuples[updated]\n    'PostgreSQL: streaming replication lag in seconds': pgsql.replication_lag[sec]\n    'PostgreSQL: wal write speed': pgsql.wal.write[]\n    'PostgreSQL: count of xlog files': pgsql.wal.count[]\n    'PostgreSQL statements: read bytes/s': pgsql.stat[read_bytes]\n    'PostgreSQL statements: write bytes/s': pgsql.stat[write_bytes]\n    'PostgreSQL statements: dirty bytes/s': pgsql.stat[dirty_bytes]\n    'PostgreSQL statements: read io time': pgsql.stat[read_time]\n    'PostgreSQL statements: write io time': pgsql.stat[write_time]\n    'PostgreSQL statements: other (mostly cpu) time': pgsql.stat[other_time]\n    'PostgreSQL locks: Read only queries': pgsql.pg_locks[accessshare]\n    'PostgreSQL locks: SELECT FOR SHARE and SELECT FOR UPDATE': pgsql.pg_locks[rowshare]\n    'PostgreSQL locks: Write queries': pgsql.pg_locks[rowexclusive]\n    'PostgreSQL locks: VACUUM, ANALYZE, CREATE INDEX CONCURRENTLY': pgsql.pg_locks[shareupdateexclusive]\n    'PostgreSQL locks: CREATE INDEX': pgsql.pg_locks[share]\n    'PostgreSQL locks: Locks from application': pgsql.pg_locks[sharerowexclusive]\n    'PostgreSQL locks: Locks from application or some operation on system catalogs': pgsql.pg_locks[exclusive]\n    'PostgreSQL locks: ALTER TABLE, DROP TABLE, TRUNCATE, REINDEX, CLUSTER, VACUUM FULL, LOCK TABLE': pgsql.pg_locks[accessexclusive]\n    'PostgreSQL oldest query running time': pgsql.oldest[query_time]\n    'PostgreSQL age of oldest xid': pgsql.oldest[xid_age]\n    'PostgreSQL waits: Lightweight locks': pgsql.all_lock[lwlock]\n    'PostgreSQL waits: Heavyweight locks': pgsql.all_lock[hwlock]\n    'PostgreSQL waits: Buffer locks': pgsql.all_lock[buffer]\n    'PostgreSQL waits: lock on a relation': pgsql.hwlock[relation]\n    'PostgreSQL waits: extend a relation': pgsql.hwlock[extend]\n    'PostgreSQL waits: lock on a tuple': pgsql.hwlock[tuple]\n    'PostgreSQL waits: transaction to finish': pgsql.hwlock[transactionid]\n    'PostgreSQL waits: virtual xid lock': pgsql.hwlock[virtualxid]\n    'PostgreSQL waits: speculative insertion lock': pgsql.hwlock[speculative_token]\n    'PostgreSQL waits: lock on database object': pgsql.hwlock[object]\n    'PostgreSQL waits: userlock': pgsql.hwlock[userlock]\n    'PostgreSQL waits: advisory user lock': pgsql.hwlock[advisory]\n    'PostgreSQL waits: XID access': pgsql.lwlock[xid]\n    'PostgreSQL waits: WAL access': pgsql.lwlock[wal]\n    'PostgreSQL waits: CLOG access': pgsql.lwlock[clog]\n    'PostgreSQL waits: Replication Locks': pgsql.lwlock[replication]\n    'PostgreSQL waits: Buffer operations': pgsql.lwlock[buffer]\n    'PostgreSQL waits: Other operations': pgsql.lwlock[other]\n\n    'Database {#DATABASE}: size': pgsql.database.size[{#DATABASE}]\n    'Count of bloating tables in database: {#DATABASE}': pgsql.database.bloating_tables[{#DATABASE}]\n    'Max age (datfrozenxid) in: {#DATABASE}': pgsql.database.bloating_tables[{#DATABASE}]\n\n\n=====================\nMetrics: Linux system\n=====================\n\n.. code-block:: bash\n\n    'System uptime': system.uptime[]\n    'System load average over 1 minute': system.la[1]\n    'Processes: in state running': system.processes[running]\n    'Processes: in state blocked': system.processes[blocked]\n    'Processes: forkrate': system.processes[forkrate]\n    'Opened files': system.open_files[]\n    'CPU time spent by normal programs and daemons': system.cpu[user]\n    'CPU time spent by nice(1)d programs': system.cpu[nice]\n    'CPU time spent by the kernel in system activities': system.cpu[system]\n    'CPU time spent by Idle CPU time': system.cpu[idle]\n    'CPU time spent waiting for I/O operations': system.cpu[iowait]\n    'CPU time spent handling interrupts': system.cpu[irq]\n    'CPU time spent handling batched interrupts': system.cpu[softirq]\n    'Block devices: read requests': system.disk.all_read[]\n    'Block devices: write requests': system.disk.all_write[]\n    'Apps: User-space applications': system.memory[apps]\n    'Buffers: Block device cache and dirty': system.memory[buffers]\n    'Swap: Swap space used': system.memory[swap]\n    'Cached: Parked file data (file content) cache': system.memory[cached]\n    'Free: Wasted memory': system.memory[unused]\n    'Slab: Kernel used memory (inode cache)': system.memory[slab]\n    'SwapCached: Fetched unmod yet swap pages': system.memory[swap_cache]\n    'PageTables: Map bt virtual and physical': system.memory[page_tables]\n    'VMallocUsed: vmaloc() allocated by kernel': system.memory[vmalloc_used]\n    'Committed_AS: Total committed memory': system.memory[committed]\n    'Mapped: All mmap()ed pages': system.memory[mapped]\n    'Active: Memory recently used': system.memory[active]\n    'Inactive: Memory not currently used': system.memory[inactive]\n\n    'Mount point {#MOUNTPOINT}: used': system.vfs.used[{#MOUNTPOINT}]\n    'Mount point {#MOUNTPOINT}: free' system.vfs.free[{#MOUNTPOINT}]\n    'Mount point {#MOUNTPOINT}: free in percents': system.vfs.percent_free[{#MOUNTPOINT}]\n    'Mount point {#MOUNTPOINT}: free inodes in percent': system.vfs.percent_inode_free[{#MOUNTPOINT}]\n    'Block device {#BLOCKDEVICE}: utilization': system.disk.utilization[{#BLOCKDEVICE}]\n    'Block device {#BLOCKDEVICE}: read operations': system.disk.read[{#BLOCKDEVICE}]\n    'Block device {#BLOCKDEVICE}: write operations': system.disk.write[{#BLOCKDEVICE}]\n    'Block device {#BLOCKDEVICE}: read byte/s': system.disk.read_b[{#BLOCKDEVICE}]\n    'Block device {#BLOCKDEVICE}: write byte/s': system.disk.write_b[{#BLOCKDEVICE}]\n    'Net device {#NETDEVICE}: RX bytes/s': system.net.rx_bytes[{#NETDEVICE}]\n    'Net device {#NETDEVICE}: RX errors/s': system.net.rx_errors[{#NETDEVICE}]\n    'Net device {#NETDEVICE}: RX drops/s': system.net.rx_drops[{#NETDEVICE}]\n    'Net device {#NETDEVICE}: TX bytes/s': system.net.tx_bytes[{#NETDEVICE}]\n    'Net device {#NETDEVICE}: TX errors/s': system.net.tx_errors[{#NETDEVICE}]\n    'Net device {#NETDEVICE}: TX drops/s': system.net.tx_drops[{#NETDEVICE}]\n\n=======================\nMetrics: Windows system\n=======================\n\n.. code-block:: bash\n\n    'Memory cached': system.memory[cache]\n    'Memory available': system.memory[available]\n    'Memory free': system.memory[free]\n    'CPU user time': system.cpu[user_time]\n    'CPU idle time': system.cpu[idle_time]\n    'CPU privileged time': system.cpu[privileged_time]\n    'Network bytes total': system.network[total_bytes]\n    'Network output queue length': system.network[total_output_queue]\n\n============\nScreenshots\n============\n\n.. image::  https://raw.githubusercontent.com/postgrespro/mamonsu/master/examples/statistics-1.png\n.. image::  https://raw.githubusercontent.com/postgrespro/mamonsu/master/examples/statistics-2.png\n.. image::  https://raw.githubusercontent.com/postgrespro/mamonsu/master/examples/statistics-3.png\n\n============\nTool: Report\n============\n\nCreate report about used hardware and PostgreSQL:\n\n.. code-block:: bash\n\n    $ mamonsu report\n\n==========\nTool: Tune\n==========\n\nMake generic optimization for system and PostgreSQL, based on hardware information:\n\n.. code-block:: bash\n\n    $ mamonsu tune\n\n==========================\nTool: analog of zabbix_get\n==========================\n\n.. code-block:: bash\n\n    $ mamonsu agent version\n    $ mamonsu agent metric-list\n    $ mamonsu agent metric-get <key>\n\n================\nTool: Zabbix CLI\n================\n\nSimple cli for control your Zabbix Server\n\n.. code-block:: bash\n\n    $ export ZABBIX_USER=Admin\n    $ export ZABBIX_PASSWD=zabbix\n    $ export ZABBIX_URL='http://localhost/zabbix'\n\n    $ mamonsu zabbix template list\n    $ mamonsu zabbix template show <template name>\n    $ mamonsu zabbix template id <template name>\n    $ mamonsu zabbix template delete <template id>\n    $ mamonsu zabbix template export <file>\n\n    $ mamonsu zabbix host list\n    $ mamonsu zabbix host show <hostname>\n    $ mamonsu zabbix host id <hostname>\n    $ mamonsu zabbix host delete <host id>\n    $ mamonsu zabbix host create <host name> <hostgroup id> <template id> <ip>\n    $ mamonsu zabbix host info templates <host id>\n    $ mamonsu zabbix host info hostgroups <host id>\n    $ mamonsu zabbix host info graphs <host id>\n    $ mamonsu zabbix host info items <host id>\n\n    $ mamonsu zabbix hostgroup list\n    $ mamonsu zabbix hostgroup show <hostgroup name>\n    $ mamonsu zabbix hostgroup id <hostgroup name>\n    $ mamonsu zabbix hostgroup delete <hostgroup id>\n    $ mamonsu zabbix hostgroup create <hostgroup name>\n\n    $ mamonsu zabbix item error <host name>\n    $ mamonsu zabbix item lastvalue <host name>\n    $ mamonsu zabbix item lastclock <host name>\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/postgrespro/mamonsu",
    "keywords": "monitoring",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mamonsu",
    "package_url": "https://pypi.org/project/mamonsu/",
    "platform": "",
    "project_url": "https://pypi.org/project/mamonsu/",
    "project_urls": {
      "Homepage": "https://github.com/postgrespro/mamonsu"
    },
    "release_url": "https://pypi.org/project/mamonsu/2.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Monitoring agent for PostgreSQL",
    "version": "2.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5820424,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12cfadd328696164a15c1d79a52d0dd33c0423b7c7b601b86da02fd0f6f2d34c",
        "md5": "e169f140b497da8c15098723eef69a47",
        "sha256": "ecc6cc02133dc2490e88d4abff6a45a69b967b3e85f08754a1eaf12bfc9c2a41"
      },
      "downloads": -1,
      "filename": "mamonsu-2.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e169f140b497da8c15098723eef69a47",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 85124,
      "upload_time": "2017-12-13T07:13:01",
      "upload_time_iso_8601": "2017-12-13T07:13:01.652846Z",
      "url": "https://files.pythonhosted.org/packages/12/cf/add328696164a15c1d79a52d0dd33c0423b7c7b601b86da02fd0f6f2d34c/mamonsu-2.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}