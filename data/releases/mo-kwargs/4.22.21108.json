{
  "info": {
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# More KWARGS!\n\n|Branch      |Status   |\n|------------|---------|\n|master      | [![Build Status](https://travis-ci.org/klahnakoski/mo-kwargs.svg?branch=master)](https://travis-ci.org/klahnakoski/mo-kwargs) |\n|dev         | [![Build Status](https://travis-ci.org/klahnakoski/mo-kwargs.svg?branch=dev)](https://travis-ci.org/klahnakoski/mo-kwargs)  [![Coverage Status](https://coveralls.io/repos/github/klahnakoski/mo-kwargs/badge.svg?branch=dev)](https://coveralls.io/github/klahnakoski/mo-kwargs?branch=dev)  |\n\n\n\n## Motivation\n\nExtensive use of dependency injection, plus managing the configuration for each of the components being injected, can result in some spectacularly complex system configuration. One way to reduce the complexity is to use configuration templates that contain useful defaults, and then overwrite the properties that need to be changed for the desired configuration. \n\n`@override` has been created to provide this templating system for Python function calls. It is mostly used for class constructors, but any method can benefit. The `@overrides` decorator adds a `kwargs` parameter which can be given a template of default parameters; but unlike `**kwargs`, it will not raise duplicate key exceptions.\n\n## Provide default values\n\nWe decorate the `login()` function with `@override`. In this case, `username` is a required parameter, and `password` will default to `None`. \n\n        @override\n        def login(username, password=None):\n            pass\n\nDefine some `dicts` for use with our `kwargs` parameter:\n\n        creds = {\"userame\": \"ekyle\", \"password\": \"password123\"}\n        alt_creds = {\"username\": \"klahnakoski\"}\n\n\nThe simplest case is when we use `kwargs` with no overrides\n\n        login(kwargs=creds)\n        # SAME AS\n        login(**creds)\n        # SAME AS\n        login(username=\"ekyle\", password=\"password123\")\n\nYou may override any property in `kwargs`: In this case it is `password`\n\n        login(password=\"123\", kwargs=creds)\n        # SAME AS\n        login(username=\"ekyle\", password=\"123\")\n\nThere is no problem with overriding everything in `kwargs`:\n\n        login(username=\"klahnakoski\", password=\"asd213\", kwargs=creds)\n        # SAME AS\n        login(username=\"klahnakoski\", password=\"asd213\")\n\nYou may continue to use `**kwargs`; which provides a way to overlay one parameter template (`creds`) with another (`alt_creds`)\n\n        login(kwargs=creds, **alt_creds)\n        # SAME AS\n        login(username=\"klahnakoski\", password=\"password123\")\n\n## Handle too many parameters\n\nSometimes your method parameters come from a configuration file, or some other outside source which is outside your control. There may be more parameters than your method is willing to accept.  \n\n        creds = {\"username\": \"ekyle\", \"password\": \"password123\", \"port\":9000}\n        def login(username, password=None):\n             print(kwargs.get(\"port\"))\n\nWithout `mo-kwargs`, passing the `creds` dictionary directly to `login()` would raise a key error\n\n        >>> login(**creds)\n        Traceback (most recent call last):\n          File \"<stdin>\", line 1, in <module>\n        TypeError: login() got an unexpected keyword argument 'port'\n            \nThe traditional solution is to pass the parameters explicitly:\n\n        login(username=creds.username, password=creds.password)\n\nbut that can get get tedious when done often, or the parameter list get long. `mo-kwargs` allows you to pass the whole dictionary to the `kwargs` parameter; only the parameters used by the method are used:\n\n        @override\n        def login(username, password=None):\n            pass\n         \n        login(kwargs=creds)\n        # SAME AS\n        login(**creds)\n\n## Package all parameters\n\nYour method can accept `kwargs` as a parameter. If it does, ensure it defaults to `None` so that it's not required.\n\n        @override\n        def login(username, password=None, kwargs=None):\n            print(kwargs.get(\"username\"))\n            print(kwargs.get(\"port\"))\n\n`kwargs` will always be a dict, possibly empty, with the full set of parameters. This is different from using `**kwargs` which contains only the remainder of the keyword parameters.\n\n        >>> creds = {\"username\": \"ekyle\", \"password\": \"password123\", \"port\":9000}\n        >>> login(**creds)\n        ekyle\n        9000",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klahnakoski/mo-kwargs",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mo-kwargs",
    "package_url": "https://pypi.org/project/mo-kwargs/",
    "platform": "",
    "project_url": "https://pypi.org/project/mo-kwargs/",
    "project_urls": {
      "Homepage": "https://github.com/klahnakoski/mo-kwargs"
    },
    "release_url": "https://pypi.org/project/mo-kwargs/4.22.21108/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "More KWARGS! Let call parameters override kwargs",
    "version": "4.22.21108",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547905,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c2cb456e45ce6227f203f44e4e72edbc0f71e584fc52e5e71634750389a749f",
        "md5": "206752b559e0f94b2c2a488cabdad387",
        "sha256": "9c9d00ab86f1f75013193807d90cad17cbc515384cf3b17b8aff3104a300f7ce"
      },
      "downloads": -1,
      "filename": "mo-kwargs-4.22.21108.tar.gz",
      "has_sig": false,
      "md5_digest": "206752b559e0f94b2c2a488cabdad387",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6463,
      "upload_time": "2021-04-18T23:14:22",
      "upload_time_iso_8601": "2021-04-18T23:14:22.738192Z",
      "url": "https://files.pythonhosted.org/packages/0c/2c/b456e45ce6227f203f44e4e72edbc0f71e584fc52e5e71634750389a749f/mo-kwargs-4.22.21108.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}