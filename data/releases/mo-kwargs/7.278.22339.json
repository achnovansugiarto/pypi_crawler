{
  "info": {
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "\r\n# More KWARGS!\r\n\r\nObject destructuring of function parameters for Python!\r\n\r\n[![PyPI Latest Release](https://img.shields.io/pypi/v/mo-kwargs.svg)](https://pypi.org/project/mo-kwargs/)\r\n[![Build Status](https://app.travis-ci.com/klahnakoski/mo-kwargs.svg?branch=master)](https://travis-ci.com/github/klahnakoski/mo-kwargs)\r\n [![Coverage Status](https://coveralls.io/repos/github/klahnakoski/mo-kwargs/badge.svg?branch=dev)](https://coveralls.io/github/klahnakoski/mo-kwargs?branch=dev)\r\n[![Downloads](https://pepy.tech/badge/mo-kwargs)](https://pepy.tech/project/mo-kwargs)\r\n\r\n\r\n## Motivation\r\n\r\nJavascript has [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring), and it can be used for function parameters. This has a couple of benefts over Python's keyword arguments:\r\n\r\n* Extra caller parameters are ignored (eg `f({a, b, c})`)\r\n* Duplicate parameters are handled elegantly (eg `f({a, a})`) \r\n\r\nThe `mo-kwargs` library provides this functionality with the `@override` decorator, with additional benefits:\r\n \r\n * required parameters throw an error if missing, just like regular Python\r\n * all parameters, even ones not in the argument list, are passed in the optional `kwargs` parameter \r\n \r\nThe `@override` decorator adds a `kwargs` argument which can be passed a dict of call parameters; but unlike `**kwargs`, it will not raise duplicate key exceptions.\r\n\r\n## Provide default values\r\n\r\nWe decorate the `login()` function with `@override`. `username` is a required parameter, and `password` will default to `None`. \r\n\r\n        @override\r\n        def login(username, password=None):\r\n            pass\r\n\r\nDefine some `dicts` for use with our `kwargs` parameter:\r\n\r\n        creds = {\"userame\": \"ekyle\", \"password\": \"password123\"}\r\n        alt_creds = {\"username\": \"klahnakoski\"}\r\n\r\n\r\nThe simplest case is when we use `kwargs` with no overrides\r\n\r\n        login(kwargs=creds)\r\n        # SAME AS\r\n        login(**creds)\r\n        # SAME AS\r\n        login(username=\"ekyle\", password=\"password123\")\r\n\r\nYou may override any property in `kwargs`: In this case it is `password`\r\n\r\n        login(password=\"123\", kwargs=creds)\r\n        # SAME AS\r\n        login(username=\"ekyle\", password=\"123\")\r\n\r\nThere is no problem with overriding everything in `kwargs`:\r\n\r\n        login(username=\"klahnakoski\", password=\"asd213\", kwargs=creds)\r\n        # SAME AS\r\n        login(username=\"klahnakoski\", password=\"asd213\")\r\n\r\nYou may continue to use `**kwargs`; which provides a way to overlay one parameter template (`creds`) with another (`alt_creds`)\r\n\r\n        login(kwargs=creds, **alt_creds)\r\n        # SAME AS\r\n        login(username=\"klahnakoski\", password=\"password123\")\r\n\r\n## Handle too many parameters\r\n\r\nSometimes your method parameters come from a configuration file, or some other outside source which is outside your control. There may be more parameters than your method is willing to accept.  \r\n\r\n        creds = {\"username\": \"ekyle\", \"password\": \"password123\", \"port\":9000}\r\n        def login(username, password=None):\r\n             print(kwargs.get(\"port\"))\r\n\r\nWithout `mo-kwargs`, passing the `creds` dictionary directly to `login()` would raise a key error\r\n\r\n        >>> login(**creds)\r\n        Traceback (most recent call last):\r\n          File \"<stdin>\", line 1, in <module>\r\n        TypeError: login() got an unexpected keyword argument 'port'\r\n            \r\nThe traditional solution is to pass the parameters explicitly:\r\n\r\n        login(username=creds.username, password=creds.password)\r\n\r\nbut that can get get tedious when done often, or the parameter list get long. `mo-kwargs` allows you to pass the whole dictionary to the `kwargs` parameter; only the parameters used by the method are used:\r\n\r\n        @override\r\n        def login(username, password=None):\r\n            pass\r\n         \r\n        login(kwargs=creds)\r\n        # SAME AS\r\n        login(username=creds.username, password=creds.password)\r\n\r\n## Package all parameters\r\n\r\nYour method can accept `kwargs` as a parameter. If it does, ensure it defaults to `None` so that it's not required.\r\n\r\n        @override\r\n        def login(username, password=None, kwargs=None):\r\n            print(kwargs.get(\"username\"))\r\n            print(kwargs.get(\"port\"))\r\n\r\n`kwargs` will always be a dict, possibly empty, with the full set of parameters. This is different from using `**kwargs` which contains only the remainder of the keyword parameters.\r\n\r\n        >>> creds = {\"username\": \"ekyle\", \"password\": \"password123\", \"port\":9000}\r\n        >>> login(**creds)\r\n        ekyle\r\n        9000\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klahnakoski/mo-kwargs",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mo-kwargs",
    "package_url": "https://pypi.org/project/mo-kwargs/",
    "platform": null,
    "project_url": "https://pypi.org/project/mo-kwargs/",
    "project_urls": {
      "Homepage": "https://github.com/klahnakoski/mo-kwargs"
    },
    "release_url": "https://pypi.org/project/mo-kwargs/7.278.22339/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Object destructuring of function parameters for Python!",
    "version": "7.278.22339",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547905,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfeda96c9c42b3e4e2c261bd5ecfb4ec2158c67811eeb527b7f55df0d4a23246",
        "md5": "16603813fe1bbbf315913bcec2c12874",
        "sha256": "153740de74ca06bdd80628899950e126f7c4a6af5827533a90a006fa5f576406"
      },
      "downloads": -1,
      "filename": "mo-kwargs-7.278.22339.tar.gz",
      "has_sig": false,
      "md5_digest": "16603813fe1bbbf315913bcec2c12874",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11012,
      "upload_time": "2022-12-05T03:59:11",
      "upload_time_iso_8601": "2022-12-05T03:59:11.191422Z",
      "url": "https://files.pythonhosted.org/packages/bf/ed/a96c9c42b3e4e2c261bd5ecfb4ec2158c67811eeb527b7f55df0d4a23246/mo-kwargs-7.278.22339.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}