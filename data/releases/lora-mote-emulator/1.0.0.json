{
  "info": {
    "author": "Lu Hou",
    "author_email": "houlu8674@bupt.edu.cn",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "LoRa Mote Emulator\n==================\n\n|version|\n|python| \n|license|\n\nThis is a useful tool to test LoRa server.\n\nTo emulate end devices (a.k.a. Motes in |LoRaWAN(TM)| protocol)\n\n*Support* |LoRaWAN(TM)| *1.0.2 & 1.1 protocol*\n\n**Using Gateways from** |Semtech(TM)|\n\n.. |LoRaWAN(TM)| unicode:: LoRaWAN U+2122\n.. |Semtech(TM)| unicode:: Semtech U+2122\n\n\nSystem Requirements\n-------------------\n\n- Ubuntu\n- Python(>=3.6, mandatory)\n\nInstalltion\n-------------------\n\nPYPI\n************\n\n- Use ``pip`` to install ``lora-mote-emulator``::\n\n    pip install lora-mote-emulator\n\n\nMANUALLY\n************\n\n- Use ``pip`` to install ``pipenv``::\n\n    pip install pipenv\n\n- Clone this repo into a directory::\n\n    git clone https://github.com/houluy/lora-mote-emulator.git\n\n- Use ``pipenv`` to create a virtual Python environment and install all the dependencies::\n\n    pipenv install\n\n- Build the project::\n\n    python -m build \n  \nHere, if there is not Python 3.6 in your system, a warning will occur, and no package will be installed. It is perfect to install Python 3.6 from `source <https://www.python.org/downloads/release/python-362/>`_. Otherwise, remove the ``Pipfile.lock`` and redo the above command.\n\n- Run the emulator to see the help::\n\n    pipenv run python main.py -h\n\nor by::\n\n    pipenv shell\n    mote -h\n\n\nUsage\n------------------\n\n::\n\n    usage: mote [-h] [-v version] [-c CONFIG] [--model MODEL] {join,app,pull,cmd,rejoin,info,abp} ...\n\n    Tool to emulate LoRa mote (a.k.a end-device) and Gateway, supported command list: ['join', 'app', 'pull', 'cmd', 'rejoin', 'info', 'abp']\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v version, --version version\n                            Choose LoRaWAN version, 1.0.2 or 1.1(default)\n      -c CONFIG, --config CONFIG\n                            Specify the directory of config files, default './config'\n      --model MODEL         Specify the directory to save the model file, default './models'\n\n    Supported commands:\n      {join,app,pull,mac,rejoin,info,abp}\n        join                Send join request.\n        app                 Send application data.\n        pull                Send PULL_DATA.\n        mac                 Send MACCommand.\n        rejoin              Send rejoin request.\n        info                Show information of current mote.\n        abp                 Initialize mote in ABP mode.\n\t\t\t\nTutorial\n--------\n\n- First, we need to create a ``config`` directory to put config files in. It can be copy from github repo ``config/*.json.tpl`` template files. In the directory, several JSON config files are included.\n    + ``config.json``: Basic configurations.\n    + ``gateway.json``: Gateway EUI.\n    + ``device.json``: Device parameters for OTAA mode.\n    + ``abp.json``: Device parameters for ABP mode.\n\n\nOTAA\n****\n\n- Modify device infomation in ``device.json`` copied. An example: ::\n\n    {\n        \"Device\": {\n            \"JoinEUI\": \"0000000000000000\",\n            \"DevEUI\": \"0000000000000000\"\n        },\n        \"RootKeys\": {\n            \"AppKey\": \"00000000000000000000000000000000\",\n            \"NwkKey\": \"00000000000000000000000000000000\"\n        }\n    }\n        \n**NOTE**: If you want to emulate LoRaWAN 1.0 device, first set ``JoinEUI`` equal to ``AppEUI`` and set ``NwkKey`` equal to ``AppKey``.\n\nABP\n***\n\n- Modify device activation information in ``abp.json``. An example: ::\n\n    {\n        \"deveui\": \"0000000000000000\",\n        \"joineui\": \"0000000000000000\",\n        \"devaddr\": \"00000000\",\n        \"appkey\": \"00000000000000000000000000000000\",\n        \"nwkkey\": \"00000000000000000000000000000000\",\n        \"nwksenckey\": \"00000000000000000000000000000000\",\n        \"snwksintkey\": \"00000000000000000000000000000000\",\n        \"fnwksintkey\": \"00000000000000000000000000000000\",\n        \"appskey\": \"00000000000000000000000000000000\",\n        \"fcntup\": 0,\n        \"version\": \"1.1\"\n    }\n\t\n- Currently, five kinds of message is supported: pull data, join request, rejoin request, confirmed (or unconfirmed) data up (with or without FOpts) and MAC Commands in FRMPayload field:\n\n**NOTE**: Always remember to ``mote pull`` to keep the gateway alive in server.\n\n::\n\n\tmote info\n\tmote pull\n\tmote abp\n\tmote join [-n]\n\tmote rejoin 'rejointyp' (0, 1, 2)\n\tmote app 'message' (uplink message, will be encoded by UTF-8) [-auf]\n\tmote mac 'command' (MAC Commands in FRMPayload field)\n\nHere is the example step of interaction with `ChirpStack <https://www.chirpstack.io>`_:\n\n::\n\n    mote pull\n    mote join -n\n    mote app helloworld -f 0302\n    mote main.py mac 0302\n\nContribution\n------------\n\nThis repo is hosted on https://github.com/houluy/lora-motes-emulator and under MIT license, any contribution or suggestion is welcome. Just open an issue or send a pull request.\n\n\n.. |version| image:: https://img.shields.io/badge/LoRaWAN-1.1-orange.svg?style=plastic\n.. |python| image:: https://img.shields.io/badge/Python-3.6%2C3.7-blue.svg?style=plastic&logo=python\n.. |license| image:: https://img.shields.io/badge/License-MIT-red.svg?style=plastic\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lora-mote-emulator",
    "package_url": "https://pypi.org/project/lora-mote-emulator/",
    "platform": "",
    "project_url": "https://pypi.org/project/lora-mote-emulator/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/lora-mote-emulator/1.0.0/",
    "requires_dist": [
      "pycryptodome",
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "Emulate LoRa mote (a.k.a end-device) and gateway.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12916448,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62f5fe0a5257602aeebae97c627c138b63b9a2c52dbed92eb61024aca596bd1a",
        "md5": "9225cc5cb02a205fc5108ba88dd24080",
        "sha256": "679274b86b87e96fd3698db5f4d8225bb35a7df746f2dfdca074dd42e4364382"
      },
      "downloads": -1,
      "filename": "lora_mote_emulator-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9225cc5cb02a205fc5108ba88dd24080",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19830,
      "upload_time": "2022-02-09T07:18:00",
      "upload_time_iso_8601": "2022-02-09T07:18:00.457603Z",
      "url": "https://files.pythonhosted.org/packages/62/f5/fe0a5257602aeebae97c627c138b63b9a2c52dbed92eb61024aca596bd1a/lora_mote_emulator-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f6649b64634f1835fff77d323ef8b6ab9ad06504b1c9823cd61095d3ca49e9d",
        "md5": "997765c51015e15ef6e6a73aa628e9b1",
        "sha256": "20efb0224490c68eb0cc9fc3d5ab2e51336fdd77f8b8ea9b6aceb09a5bd53178"
      },
      "downloads": -1,
      "filename": "lora-mote-emulator-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "997765c51015e15ef6e6a73aa628e9b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17792,
      "upload_time": "2022-02-09T07:18:02",
      "upload_time_iso_8601": "2022-02-09T07:18:02.717984Z",
      "url": "https://files.pythonhosted.org/packages/3f/66/49b64634f1835fff77d323ef8b6ab9ad06504b1c9823cd61095d3ca49e9d/lora-mote-emulator-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}