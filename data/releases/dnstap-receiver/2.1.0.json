{
  "info": {
    "author": "Denis MACHARD",
    "author_email": "d.machard@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Dnstap streams receiver\n\n![Testing](https://github.com/dmachard/dnstap_receiver/workflows/Testing/badge.svg) ![Build](https://github.com/dmachard/dnstap_receiver/workflows/Build/badge.svg) ![Pypi](https://github.com/dmachard/dnstap_receiver/workflows/PyPI/badge.svg) ![Dockerhub](https://github.com/dmachard/dnstap_receiver/workflows/DockerHub/badge.svg) \n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/dnstap_receiver)\n\nThis Python module acts as a DNS tap streams receiver for DNS servers.\nInput streams can be a unix socket or multiple remote dns servers.\nThe output is printed directly to stdout or send to remote tcp address \nin JSON, YAML or one line text format and more. \n\n## Table of contents\n* [Installation](#installation)\n    * [PyPI](#pypi)\n    * [Docker Hub](#docker-hub)\n* [Inputs handler](#inputs-handler)\n    * [TCP socket](#tcp-socket)\n    * [Unix socket](#unix-socket)\n* [Outputs handler](#outputs-handler)\n    * [Stdout](#stdout)\n    * [File](#file)\n    * [TCP socket](#tcp-socket)\n    * [Syslog](#syslog)\n    * [Metrics](#stdout-metrics)\n* [More options](#more-options)\n    * [External config file](#external-config-file)\n    * [Verbose mode](#verbose-mode)\n    * [Filtering feature](#filtering-feature)\n* [API](#api)\n    * [Configuration](#configuration)\n    * [Security](#security)\n    * [URL endpoints](#url-endpoints)\n* [Tested DNS servers](#tested-dns-servers)\n    * [ISC - bind](#bind)\n    * [PowerDNS - pdns-recursor](#pdns-recursor)\n    * [PowerDNS - dnsdist](#dnsdist)\n    * [NLnet Labs - nsd](#nsd)\n    * [NLnet Labs - unbound](#unbound)\n* [About](#about)\n\n## Installation\n\n### PyPI\n\nDeploy the dnstap receiver in your DNS server with the pip command.\n\n```python\npip install dnstap_receiver\n```\n\nAfter installation, you can execute the `dnstap_receiver` to start-it.\n\nUsage:\n\n```\nusage: dnstap_receiver [-h] [-l L] [-p P] [-u U] [-v] [-c C]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -l L        IP of the dnsptap server to receive dnstap payloads (default: '0.0.0.0')\n  -p P        Port the dnstap receiver is listening on (default: 6000)\n  -u U        read dnstap payloads from unix socket\n  -v          verbose mode\n  -c C        external config file\n```\n\n\n### Docker Hub\n\nPull the dnstap receiver image from Docker Hub.\n\n```bash\ndocker pull dmachard/dnstap-receiver:latest\n```\n\nDeploy the container\n\n```bash\ndocker run -d -p 6000:6000 --name=dnstap01 dmachard/dnstap-receiver\n```\n\nFollow containers logs \n\n```bash\ndocker logs dnstap01 -f\n```\n\n## Inputs handler\n\nSeverals inputs handler are supported to read incoming dnstap messages:\n- [TCP socket](#tcp-socket)\n- [Unix socket](#unix-socket)\n\n### TCP socket\n\nThe TCP socket input enable to receive dnstap messages from multiple dns servers.\nThis is the default input if you execute the binary without arguments.\nThe receiver is listening on `localhost` interface and the tcp port `6000`.\nYou can change binding options with `-l` and `-p` arguments.\n\n```\n./dnstap_receiver -l 0.0.0.0 -p 6000\n```\n\nYou can also activate `TLS` on the socket, add the following config as external config file\nto activate the tls support, configure the path of the certificate and key to use.\n\n```yaml\ninput:\n  tcp-socket:\n    # enable tls support\n    tls-support: true\n    # provide certificate server path\n    tls-server-cert: /etc/dnstap_receiver/server.crt\n    # provide certificate key path\n    tls-server-key: /etc/dnstap_receiver/server.key\n```\n\nThen execute the dnstap receiver with the configuration file:\n\n```\n./dnstap_receiver -c /etc/dnstap-receiver/dnstap.conf\n```\n\n### Unix socket\n\nThe unix socket input enables read dnstap message from a unix socket. \nConfigure the path of the socket with the `-u` argument.\n\n```\n./dnstap_receiver -u /var/run/dnstap.sock\n```\n\n## Outputs handler\n\nOutputs handler can be configured to forward messages in several modes.\n- [Stdout](#stdout)\n- [File](#file)\n- [Metrics](#metrics)\n- [TCP socket](#tcp-socket)\n- [Syslog](#syslog)\n\n### Stdout\n\nThis output enables to forward dnstap messages directly to Stdout.\nAdd the following configuration as external config to activate this output:\n\n```yaml\noutput:\n  stdout:\n    # enable or disable\n    enable: true\n    # format available text|json|yaml\n    format: text\n```\n\nOutput can be formatted in different way:\n- text (default one)\n- json \n- yaml\n\nText format:\n\n```\n2020-09-16T18:51:53.547352+00:00 centos RESOLVER_QUERY NOERROR - - INET UDP 43b ns2.google.com. A\n2020-09-16T18:51:53.591736+00:00 centos RESOLVER_RESPONSE NOERROR - - INET UDP 59b ns2.google.com. A\n```\n\nJSON format:\n\n```json\n{\n    \"identity\": \"dev-centos8\",\n    \"qname\": \"www.google.com.\",\n    \"rrtype\": \"A\",\n    \"source-ip\": \"192.168.1.114\",\n    \"message\": \"CLIENT_QUERY\",\n    \"family\": \"INET\",\n    \"protocol\": \"UDP\",\n    \"source-port\": 42222,\n    \"length\": 43,\n    \"timestamp\": \"2020-09-16T18:51:53.591736+00:00\",\n    \"rcode\": \"NOERROR\"\n}\n```\n\nYAML format:\n\n```yaml\nrcode: NOERROR\nlength: 49\nmessage: RESOLVER_QUERY\nfamily: INET\nqname: dns4.comlaude-dns.eu.\nrrtype: AAAA\nsource-ip: '-'\nsource-port: '-'\ntimestamp: '2020-09-16T18:51:53.591736+00:00'\nprotocol: UDP\n\n```\n\n### File\n\nThis output enables to forward dnstap messages directly to a log file.\nAdd the following configuration as external config to activate this output:\n\n```yaml\n  # forward to log file\n  file:\n    # enable or disable\n    enable: true\n    # format available text|json|yaml\n    format: text\n    # log file path or null to print to stdout\n    file: /var/log/dnstap.log\n    # max size for log file\n    file-max-size: 10M\n    # number of max log files\n    file-count: 10\n```\n\n### TCP socket\n\nThis output enables to forward dnstap message to a remote tcp collector.\nAdd the following configuration as external config to activate this output:\n\n```yaml\noutput:\n  # forward to remote tcp destination\n  tcp-socket:\n    # enable or disable\n    enable: true\n    # format available text|json|yaml\n    format: text\n    # delimiter\n    delimiter: \"\\n\"\n    # retry interval in seconds to connect\n    retry: 5\n    # remote ipv4 or ipv6 address\n    remote-address: 10.0.0.2\n    # remote tcp port\n    remote-port: 8192\n```\n\n### Syslog\n\nThis output enables to forward dnstap message to a syslog server.\nAdd the following configuration as external config to activate this output:\n\n\n```yaml\noutput:\n  syslog:\n    # enable or disable\n    enable: false\n    # syslog over tcp or udp\n    transport: udp\n    # format available text|json\n    format: text\n    # retry interval in seconds to connect\n    retry: 5\n    # remote ipv4 or ipv6 address of the syslog server\n    remote-address: 10.0.0.2\n    # remote port of the syslog server\n    remote-port: 514\n```\n\nExample of output on syslog server\n\n```\nSep 22 12:43:01 bind CLIENT_RESPONSE NOERROR 192.168.1.100 51717 INET UDP 173b www.netflix.fr. A\nSep 22 12:43:01 bind CLIENT_RESPONSE NOERROR 192.168.1.100 51718 INET UDP 203b www.netflix.fr. AAAA\n```\n\n### Metrics\n\nThis output enables to generate metrics in one line and print-it to stdout. Add the following configuration as external config to activate this output:\n\n```\noutput:\n  metrics:\n    # enable or disable\n    enable: true\n    # print every N seconds.\n    interval: 300\n    # cumulative statistics, without clearing them after printing\n    cumulative: true\n    # log file path or null to print to stdout\n    file: null\n    # max size for log file\n    file-max-size: 10M\n    # number of max log files\n    file-count: 10\n```\n\nExample of output\n\n```\n2020-10-13 05:19:35,522 18 QUERIES, 3.6 QPS, 1 CLIENTS, 18 INET, 0 INET6, \n18 UDP, 0 TCP, 17 DOMAINS\n```\n\n## More options\n\n### External config file\n\nThe `dnstap_receiver` binary can takes an external config file with the `-c` argument\nSee [config file](https://github.com/dmachard/dnstap-receiver/blob/master/dnstap_receiver/dnstap.conf) example.\n\n```\n./dnstap_receiver -c /etc/dnstap-receiver/dnstap.conf\n```\n\n### Verbose mode\n\nYou can execute the binary in verbose mode with the `-v` argument:\n\n```\n./dnstap_receiver -v\n2020-11-25 20:26:59,790 DEBUG Start receiver...\n2020-11-25 20:26:59,790 DEBUG Output handler: stdout\n2020-11-25 20:26:59,790 DEBUG Input handler: tcp socket\n2020-11-25 20:26:59,790 DEBUG Input handler: listening on 0.0.0.0:6000\n2020-11-25 20:26:59,790 DEBUG Api rest: listening on 0.0.0.0:8080\n```\n\n### Filtering feature\n\nThis feature can be useful if you want to ignore some messages and keep just what you want.\nSeveral filter are available:\n- by qname field\n- by dnstap identity field.\n\n#### By dnstap identity\n\nYou can filtering incoming dnstap messages according to the dnstap identity field.\nA regex can be configured in the external configuration file to do that\n\n```yaml\nfilter:\n  # dnstap identify filtering feature with regex support\n  dnstap-identities: dnsdist01|unbound01\n```\n\n#### By qname\n\nYou can filtering incoming dnstap messages according to the query name.\nA regex can be configured in the external configuration file to do that\n\n```yaml\nfilter: \n  # qname filtering feature with regex support\n  qname-regex: \".*.com\"\n```\n\n## API\n\n### Configuration\n\nEnable the REST API \n\n```yaml\n# rest api\nweb-api:\n    # enable or disable\n    enable: true\n    # web api key\n    api-key: changeme\n    # listening address ipv4 0.0.0.0 or ipv6 [::]\n    local-address: 127.0.0.1\n    # listing on port\n    local-port: 8080\n```\n\n### Security\n\nTo access to the API, key must be sent in the X-API-Key request header.\nAn HTTP 401 response is returned when a wrong or no API key is received.\n\n```\nX-API-Key: secret\n```\n\n### URL Endpoints\n\n**GET /streams**\n\nGet streams list by dnstap identity.\n\nExample request:\n\n```\nGET /streams\n```\n\nExample JSON response:\n\n```json\n{\n  \"streams\": [\n               \"dnsdist1\", \n               \"unbound1\"\n             ]\n}\n```\n\n**GET /count**\n\nGet some counters like number of queries, clients, ...\nThis endpoint accepts optional arguments in the query:\n- **more** (optional): additional counters to return\n    - query|response: total of queries or response\n    - qps: query per second\n    - clients: total unique clients ip\n    - domains: total unique domains\n    - query|response/[inet|inet6] : total of IPv4 or IPv6 queries or responses\n    - query|response/[udp|tcp]: total of queries or responses with UDP or TCP protocol\n    - query|response/[rcode]: total of queries or responses according to the rcode (noerror, nxdomain, ...)\n    - query|response/[rrtype]: total of queries or responses acccording to the record resource type (a, aaaa, ...)\n\nExample request:\n\n```\nGET /count\n```\n\nExample JSON response:\n\n```json\n{\n  \"stream\": null,\n  \"counters\": {\n                \"clients\": 2,\n                \"domains\": 13,\n                \"query\": 5983,\n                \"response\": 5983,\n                \"qps\": 0,\n                \"response/noerror\": 5983,\n                \"response/nxdomain\": 0\n               }\n}\n```\n\n**GET /top**\n\nGet top statistics from the dnstap-receiver in JSON format.\nThis endpoint accepts optional arguments in the query:\n- **n** (default is 10): number of elements to return\n- **stream** (optional): return statistic according to the dnstap identity or all if not provided\n- **more** (optional): additional criteria to return for top domain\n    - [rcode]/response|query: top n domains according to the rcode (noerror, nxdomain, refused, ...)\n    - [rrtype]/response|query: top n domains according to the rrtype (aa, aaaa, cname, ...)\n\nExample request:\n\n```\nGET /top\n```\n\nExample JSON response:\n\n```json\n{\n  \"stream\": null, \n  \"top-domain\": {\n                  \"noerror/response\": [\n                                        [\"www.google.fr.\", 2969], \n                                        [\"d220140hrb0h87.cloudfront.net.\", 3],\n                                        [\"uu.net.\", 1], \n                                        [\"fr.uu.net.\", 1], \n                                        [\"nan2.fr.uu.net.\", 1], \n                                        [\"cloudfront.net.\", 1], \n                                        [\"awsdns-53.net.\", 1], \n                                        [\"ns-942.awsdns-53.net.\", 1]\n                                        ], \n                   \"nxdomain/response\": []\n                 }, \n   \"top-client\": {\n                  \"hit/ip\": [\n                             [\"127.0.0.1\", 11938],\n                             [\"-\", 28]\n                            ],\n                  \"length/ip\": [\n                                [\"127.0.0.1\", 969528],\n                                [\"-\", 7048]\n                               ]\n                 }, \n   \"top-rcode\": {\n                  \"hit/query\": [\n                                [\"query/noerror\", 5983]\n                               ], \n                  \"hit/response\": [\n                                   [\"response/noerror\", 5983]\n                                  ]\n                }, \n   \"top-rrtype\": {\n                  \"hit/query\": [\n                                 [\"query/a\", 3982], \n                                 [\"query/aaaa\", 2001]\n                               ], \n                  \"hit/response\": [\n                                    [\"response/a\", 3982], \n                                    [\"response/aaaa\", 2001]\n                                   ]\n                 }\n}\n```\n\n**DELETE /reset**\n\nReset statistics\n\nExample request:\n\n```\nDELETE /reset\n```\n\nExample response:\n\n```\n204 No Content\n```\n\n## Tested DNS servers\n\nThis dnstap receiver has been tested with success with the following dns servers:\n - **ISC - bind**\n - **PowerDNS - dnsdist, pdns-recursor**\n - **NLnet Labs - nsd, unbound**\n\n### bind\n\n![pdns-recursor 9.11.22](https://img.shields.io/badge/9.11.22-tested-green)\n\nDnstap messages supported:\n - RESOLVER_QUERY\n - RESOLVER_RESPONSE\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n - AUTH_QUERY\n - AUTH_RESPONSE\n\n#### Build with dnstap support\n\nDownload latest source and build-it with dnstap support:\n\n```bash\n./configure --enable-dnstap\nmake && make install\n```\n\n#### Unix socket\n\nUpdate the configuration file `/etc/named.conf` to activate the dnstap feature:\n\n```\noptions {\n    dnstap { client; auth; resolver; forwarder; };\n    dnstap-output unix \"/var/run/named/dnstap.sock\";\n    dnstap-identity \"dns-bind\";\n    dnstap-version \"bind\";\n}\n```\n\nExecute the dnstap receiver with `named` user:\n\n```bash\nsu - named -s /bin/bash -c \"dnstap_receiver -u \"/var/run/named/dnstap.sock\"\"\n```\n\n### pdns-recursor\n\n![pdns-recursor 4.3.4](https://img.shields.io/badge/4.3.4-tested-green) ![pdns-recursor 4.4.0](https://img.shields.io/badge/4.4.0-tested-green)\n\nDnstap messages supported:\n - RESOLVER_QUERY\n - RESOLVER_RESPONSE\n\n#### Unix socket\n\nUpdate the configuration file to activate the dnstap feature:\n\n```\nvim /etc/pdns-recursor/recursor.conf\nlua-config-file=/etc/pdns-recursor/recursor.lua\n\nvim /etc/pdns-recursor/recursor.lua\ndnstapFrameStreamServer(\"/var/run/pdns-recursor/dnstap.sock\")\n```\n\nExecute the dnstap receiver with `pdns-recursor` user:\n\n```bash\nsu - pdns-recursor -s /bin/bash -c \"dnstap_receiver -u \"/var/run/pdns-recursor/dnstap.sock\"\"\n```\n\n#### TCP stream\n\nUpdate the configuration file to activate the dnstap feature with tcp mode \nand execute the dnstap receiver in listening tcp socket mode:\n\n```\nvim /etc/pdns-recursor/recursor.conf\nlua-config-file=/etc/pdns-recursor/recursor.lua\n\nvim /etc/pdns-recursor/recursor.lua\ndnstapFrameStreamServer(\"10.0.0.100:6000\")\n```\n\nNote: TCP stream are only supported with a recent version of libfstrm.\n\n### dnsdist\n\n![dnsdist 1.4.0](https://img.shields.io/badge/1.4.0-tested-green) ![dnsdist 1.5.0](https://img.shields.io/badge/1.5.0-tested-green)\n\nDnstap messages supported:\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n\n#### Unix socket\n\nCreate the dnsdist folder where the unix socket will be created:\n\n```bash\nmkdir -p /var/run/dnsdist/\nchown dnsdist.dnsdist /var/run/dnsdist/\n```\n\nUpdate the configuration file `/etc/dnsdist/dnsdist.conf` to activate the dnstap feature:\n\n```\nfsul = newFrameStreamUnixLogger(\"/var/run/dnsdist/dnstap.sock\")\naddAction(AllRule(), DnstapLogAction(\"dnsdist\", fsul))\naddResponseAction(AllRule(), DnstapLogResponseAction(\"dnsdist\", fsul))\n```\n\nExecute the dnstap receiver with `dnsdist` user:\n\n```bash\nsu - dnsdist -s /bin/bash -c \"dnstap_receiver -u \"/var/run/dnsdist/dnstap.sock\"\"\n```\n\n#### TCP stream\n\nUpdate the configuration file `/etc/dnsdist/dnsdist.conf` to activate the dnstap feature\nwith tcp stream and execute the dnstap receiver in listening tcp socket mode:\n\n```\nfsul = newFrameStreamTcpLogger(\"127.0.0.1:8888\")\naddAction(AllRule(), DnstapLogAction(\"dnsdist\", fsul))\naddResponseAction(AllRule(), DnstapLogResponseAction(\"dnsdist\", fsul))\n```\n\n### nsd\n\n![nsd 4.3.2](https://img.shields.io/badge/4.3.2-tested-green)\n\nDnstap messages supported:\n - AUTH_QUERY\n - AUTH_RESPONSE\n\n#### Build with dnstap support\n\nDownload latest source and build-it with dnstap support:\n\n```bash\n./configure --enable-dnstap\nmake && make install\n```\n\n#### Unix socket\n\nUpdate the configuration file `/etc/nsd/nsd.conf` to activate the dnstap feature:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"/var/run/nsd/dnstap.sock\"\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-auth-query-messages: yes\n    dnstap-log-auth-response-messages: yes\n```\n\nExecute the dnstap receiver with `nsd` user:\n\n```bash\nsu - nsd -s /bin/bash -c \"dnstap_receiver -u \"/var/run/nsd/dnstap.sock\"\"\n```\n\n\n### unbound\n\n![unbound 1.11.0](https://img.shields.io/badge/1.11.0-tested-green) ![unbound 1.112.0](https://img.shields.io/badge/1.12.0-tested-green)\n\nDnstap messages supported:\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n - RESOLVER_QUERY\n - RESOLVER_RESPONSE\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n\n#### Build with dnstap support\n\nDownload latest source and build-it with dnstap support:\n\n```bash\n./configure --enable-dnstap\nmake && make install\n```\n\n#### Unix socket\n\nUpdate the configuration file `/etc/unbound/unbound.conf` to activate the dnstap feature:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"dnstap.sock\"\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-resolver-query-messages: yes\n    dnstap-log-resolver-response-messages: yes\n    dnstap-log-client-query-messages: yes\n    dnstap-log-client-response-messages: yes\n    dnstap-log-forwarder-query-messages: yes\n    dnstap-log-forwarder-response-messages: yes\n```\n\nExecute the dnstap receiver with `unbound` user:\n\n```bash\nsu - unbound -s /bin/bash -c \"dnstap_receiver -u \"/usr/local/etc/unbound/dnstap.sock\"\"\n```\n\n#### TCP stream\n\nUpdate the configuration file `/etc/unbound/unbound.conf` to activate the dnstap feature \nwith tcp mode and execute the dnstap receiver in listening tcp socket mode:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"\"\n    dnstap-ip: \"10.0.0.100@6000\"\n    dnstap-tls: no\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-client-query-messages: yes\n    dnstap-log-client-response-messages: yes\n```\n\n#### TLS stream\n\nUpdate the configuration file `/etc/unbound/unbound.conf` to activate the dnstap feature \nwith tls mode and execute the dnstap receiver in listening tcp/tls socket mode:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"\"\n    dnstap-ip: \"10.0.0.100@6000\"\n    dnstap-tls: yes\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-client-query-messages: yes\n    dnstap-log-client-response-messages: yes\n```\n\n# About\n\n| | |\n| ------------- | ------------- |\n| Author | Denis Machard <d.machard@gmail.com> |\n| PyPI | https://pypi.org/project/dnstap_receiver/ |\n| Github | https://github.com/dmachard/dnstap-receiver |\n| DockerHub | https://hub.docker.com/r/dmachard/dnstap-receiver |\n| | |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dmachard/dnstap_receiver",
    "keywords": "dnstap receiver client json yaml text",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dnstap-receiver",
    "package_url": "https://pypi.org/project/dnstap-receiver/",
    "platform": "any",
    "project_url": "https://pypi.org/project/dnstap-receiver/",
    "project_urls": {
      "Homepage": "https://github.com/dmachard/dnstap_receiver"
    },
    "release_url": "https://pypi.org/project/dnstap-receiver/2.1.0/",
    "requires_dist": [
      "dnspython",
      "protobuf",
      "pyyaml",
      "aiohttp"
    ],
    "requires_python": "",
    "summary": "Python Dnstap receiver",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15714027,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b8fb27e0d49d1e2ae80bd57742b84f1e3fa5e76ede88950539ef40db1dc58d3",
        "md5": "9933155d982258df4fd69e415fafbad7",
        "sha256": "bcf928093b6a5c6449af34f9cab44adb7851af55efc17c8694b10cb8f7f34b93"
      },
      "downloads": -1,
      "filename": "dnstap_receiver-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9933155d982258df4fd69e415fafbad7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16690,
      "upload_time": "2020-11-26T17:48:28",
      "upload_time_iso_8601": "2020-11-26T17:48:28.880580Z",
      "url": "https://files.pythonhosted.org/packages/7b/8f/b27e0d49d1e2ae80bd57742b84f1e3fa5e76ede88950539ef40db1dc58d3/dnstap_receiver-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2377515dead39ecd6c6abb9bae7ff1935e836e30f35d320870b659a7064a4d0",
        "md5": "f122171a6a36affddb4bf42102e3f3c5",
        "sha256": "cfcba71caf630711f274b82cd2d6c71f290b083aeedc92a6f56d37360ed204dc"
      },
      "downloads": -1,
      "filename": "dnstap_receiver-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f122171a6a36affddb4bf42102e3f3c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20549,
      "upload_time": "2020-11-26T17:48:30",
      "upload_time_iso_8601": "2020-11-26T17:48:30.008473Z",
      "url": "https://files.pythonhosted.org/packages/d2/37/7515dead39ecd6c6abb9bae7ff1935e836e30f35d320870b659a7064a4d0/dnstap_receiver-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}