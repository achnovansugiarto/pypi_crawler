{
  "info": {
    "author": "Denis MACHARD",
    "author_email": "d.machard@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Dnstap streams receiver\n\n![](https://github.com/dmachard/dnstap_receiver/workflows/Publish%20to%20PyPI/badge.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/dnstap_receiver)\n\nThis Python module acts as a DNS tap streams receiver for DNS servers.\nInput streams can be a unix socket or multiple remote dns servers.\nThe output is printed directly to stdout or send to remote tcp address in JSON, YAML or one line text format. \n\n## Table of contents\n* [Installation](#installation)\n* [Start dnstap receiver](#start-dnstap-receiver)\n    * [Unix socket mode](#unix-socket-mode)\n    * [TCP socket mode](#tcp-socket-mode)\n    * [TLS socket mode](#tls-socket-mode)\n* [More options](#more-options)\n    * [Verbose mode](#verbose-mode)\n    * [Quiet text output](#quiet-text-output)\n    * [External config file](#external-config-file)\n    * [JSON-formatted output](#json-formatted-output)\n    * [YAML-formatted output](#yaml-formatted-output)\n    * [Forward to remote destination](#forward-to-remote-destination)\n    * [Filtering by dnstap identity](#filtering-by-dnstap-identity)\n    * [Filtering by qname](#filtering-by-qname)\n* [Tested DNS servers](#tested-dns-servers)\n    * [ISC - bind](#bind)\n        * [Build with dnstap support](#build-with-dnstap-support)\n        * [Unix socket](#unix-socket)\n    * [PowerDNS - pdns-recursor](#pdns-recursor)\n        * [Unix socket](#unix-socket-1)\n        * [TCP stream](#tcp-stream)\n    * [PowerDNS - dnsdist](#dnsdist)\n        * [Unix socket](#unix-socket-2)\n        * [TCP stream](#tcp-stream-1)\n    * [NLnet Labs - nsd](#nsd)\n        * [Build with dnstap support](#build-with-dnstap-support-1)\n        * [Unix socket](#unix-socket-3)\n        * [TCP stream](#tcp-stream-2)\n    * [NLnet Labs - unbound](#unbound)\n        * [Build with dnstap support](#build-with-dnstap-support-2)\n        * [Unix socket](#unix-socket-4)\n        * [TCP stream](#tcp-stream-3)\n        * [TLS stream](#tls-stream)\n* [Tested Logs Collectors](#tested-dns-servers)\n    * [Logstash](#logstash-with-json-input)\n* [Systemd service file configuration](#systemd-service-file-configuration)\n* [About](#about)\n\n## Installation\n\nDeploy the dnstap receiver in your DNS server with the pip command.\n\n```python\npip install dnstap_receiver\n```\n\n## Start dnstap receiver\n\n### TCP socket mode\n\nThis mode enable to receive dnstap messages from multiple dns servers.\nBy default, the receiver is listening on the ip `0.0.0.0` and the tcp port `6000`.\n\n```\n./dnstap_receiver\n```\n\n### Unix socket mode\n\nIn this mode, the `dnstap_receiver` binary takes in input a unix socket \n\n```\n./dnstap_receiver -u /var/run/dnstap.sock\n```\n\n### TLS socket mode\n\nThis mode enable to receive dnstap messages from multiple dns servers with tcp/tls transport.\nBy default, the receiver is listening on the ip `0.0.0.0` and the tcp port `6000`.\n\nGenerate a certificate and private key for the dnstap receiver:\n\n```\nopenssl req -x509 -newkey rsa:4096 -sha256  -nodes -keyout server.key -out server.crt  -subj \"/CN=dnstap_receiver.com\" -days 3650\n```\n\nCreate the external configuration file and enable tls:\n\n```yaml\ninput-mode:\n  # enable tls on socket\n  tls-support: true\n  tls-server-cert: /etc/dnstap_receiver/server.crt\n  tls-server-key: /etc/dnstap_receiver/server.key\n```\n\nFinally execute the dnstap receiver with the configuration file:\n\n```\n./dnstap_receiver -c /etc/dnstap-receiver/dnstap.conf\n```\n\n## More options\n\n### Verbose mode\n\nYou can execute the binary in verbose mode with the `-v` argument\n\n```\n./dnstap_receiver -v\n2020-09-12 23:47:35,833 Start dnstap receiver...\n2020-09-12 23:47:35,833 Using selector: EpollSelector\n2020-09-12 23:47:35,834 Listening on 0.0.0.0:6000\n```\n\n### Quiet text output\n\nBy default the output will be print in quiet text format.\n\n```\n2020-09-16T18:51:53.547352+00:00 dev-centos8 RESOLVER_QUERY NOERROR - - IP4 UDP 43b ns2.google.com. A\n2020-09-16T18:51:53.591736+00:00 dev-centos8 RESOLVER_RESPONSE NOERROR - - IP4 UDP 59b ns2.google.com. A\n```\n\n### External config file\n\nThe `dnstap_receiver` binary can takes an external config file with the `-c` argument\n\n```\n./dnstap_receiver -c /etc/dnstap-receiver/dnstap.conf\n```\n\nExample of configuration file\n\n```yaml\n# enable verbose mode\nverbose: true\n\n# read and decode dnstap messages from\ninput-mode:\n  # read dnstap message from tcp socket\n  local-address: 0.0.0.0\n  local-port: 6000\n  # enable tls on socket\n  tls-support: false\n  tls-server-cert: null\n  tls-server-key: null\n  # read dnstap message fom unix socket\n  unix-socket: null\n\nfilter: \n  # qname filtering feature with regex support\n  qname-regex: null\n  # dnstap identify filtering feature with regex support\n  dnstap-identities: null\n\n# format dnstap message output\noutput-format:\n  text: true\n  yaml: false\n  json: false\n\n# forward decoded messages to a remote tcp destination\nforward-to:\n  enable: false\n  remote-address: null\n  remote-port: null\n```\n\n### JSON-formatted output\n\nJSON output can be activated through the external configuration file\n\n```yaml\n# format dnstap message output\noutput-format:\n  text: false\n  yaml: false\n  json: true\n```\n\nOutput example:\n\n```json\n{\n    \"identity\": \"dev-centos8\",\n    \"query-name\": \"www.google.com.\",\n    \"query-type\": \"A\",\n    \"source-ip\": \"192.168.1.114\",\n    \"message\": \"CLIENT_QUERY\",\n    \"protocol\": \"IP4\",\n    \"transport\": \"UDP\",\n    \"source-port\": 42222,\n    \"length\": 43,\n    \"timestamp\": \"2020-09-12 22:24:34.132\",\n    \"code\": \"NOERROR\"\n}\n```\n\n### YAML-formatted output\n\nYAML output can be activated through the external configuration file\n\n```yaml\n# format dnstap message output\noutput-format:\n  text: false\n  yaml: true\n  json: false\n```\n\nOutput example:\n\n```yaml\ncode: NOERROR\nlength: 49\nmessage: RESOLVER_QUERY\nprotocol: IP4\nquery-name: dns4.comlaude-dns.eu.\nquery-type: AAAA\nsource-ip: '-'\nsource-port: '-'\ntimestamp: '2020-09-12 14:13:53.948'\ntransport: UDP\n\n```\n\n### Forward to remote destination\n\nForward dnstap message to a remote tcp collector can be done through the \nexternal configuration file \n\n```yaml\n# forward decoded messages to a remote tcp destination\nforward-to:\n  enable: true\n  remote-address: 10.0.0.2\n  remote-port: 8192\n```\n\n### Filtering by dnstap identity\n\nYou can filtering incoming dnstap messages according to the dnstap identity field.\nA regex can be configured in the external configuration file to do that\n\n```yaml\nfilter:\n  # dnstap identify filtering feature with regex support\n  dnstap-identities: dnsdist01|unbound01\n```\n\n### Filtering by qname\n\nYou can filtering incoming dnstap messages according to the query name.\nThis feature can be useful if you want to ignore some domains and keep just what you want.\nA regex can be configured in the external configuration file to do that\n\n```yaml\nfilter: \n  # qname filtering feature with regex support\n  qname-regex: \".*.com\"\n```\n\n## Tested DNS servers\n\nThis dnstap receiver has been tested with success with the following dns servers:\n - **ISC - bind**\n - **PowerDNS - dnsdist, pdns-recursor**\n - **NLnet Labs - nsd, unbound**\n\n### bind\n\n![pdns-recursor 9.11.22](https://img.shields.io/badge/9.11.22-tested-green)\n\nDnstap messages supported:\n - RESOLVER_QUERY\n - RESOLVER_RESPONSE\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n - AUTH_QUERY\n - AUTH_RESPONSE\n\n#### Build with dnstap support\n\nDownload latest source and build-it with dnstap support:\n\n```bash\n./configure --enable-dnstap\nmake && make install\n```\n\n#### Unix socket\n\nUpdate the configuration file `/etc/named.conf` to activate the dnstap feature:\n\n```\noptions {\n    dnstap { client; auth; resolver; forwarder; };\n    dnstap-output unix \"/var/run/named/dnstap.sock\";\n    dnstap-identity \"dns-bind\";\n    dnstap-version \"bind\";\n}\n```\n\nExecute the dnstap receiver with `named` user:\n\n```bash\nsu - named -s /bin/bash -c \"dnstap_receiver -u \"/var/run/named/dnstap.sock\"\"\n```\n\n### pdns-recursor\n\n![pdns-recursor 4.3.4](https://img.shields.io/badge/4.3.4-tested-green)\n\nDnstap messages supported:\n - RESOLVER_QUERY\n - RESOLVER_RESPONSE\n\n#### Unix socket\n\nUpdate the configuration file to activate the dnstap feature:\n\n```\nvim /etc/pdns-recursor/recursor.conf\nlua-config-file=/etc/pdns-recursor/recursor.lua\n\nvim /etc/pdns-recursor/recursor.lua\ndnstapFrameStreamServer(\"/var/run/pdns-recursor/dnstap.sock\")\n```\n\nExecute the dnstap receiver with `pdns-recursor` user:\n\n```bash\nsu - pdns-recursor -s /bin/bash -c \"dnstap_receiver -u \"/var/run/pdns-recursor/dnstap.sock\"\"\n```\n\n#### TCP stream\n\n\nUpdate the configuration file to activate the dnstap feature with tcp mode \nand execute the dnstap receiver in listening tcp socket mode:\n\n```\nvim /etc/pdns-recursor/recursor.conf\nlua-config-file=/etc/pdns-recursor/recursor.lua\n\nvim /etc/pdns-recursor/recursor.lua\ndnstapFrameStreamServer(\"10.0.0.100:6000\")\n```\n\n### dnsdist\n\n![dnsdist 1.4.0](https://img.shields.io/badge/1.4.0-tested-green) ![dnsdist 1.5.0](https://img.shields.io/badge/1.5.0-tested-green)\n\nDnstap messages supported:\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n\n#### Unix socket\n\nCreate the dnsdist folder where the unix socket will be created:\n\n```bash\nmkdir -p /var/run/dnsdist/\nchown dnsdist.dnsdist /var/run/dnsdist/\n```\n\nUpdate the configuration file `/etc/dnsdist/dnsdist.conf` to activate the dnstap feature:\n\n```\nfsul = newFrameStreamUnixLogger(\"/var/run/dnsdist/dnstap.sock\")\naddAction(AllRule(), DnstapLogAction(\"dnsdist\", fsul))\naddResponseAction(AllRule(), DnstapLogResponseAction(\"dnsdist\", fsul))\n```\n\nExecute the dnstap receiver with `dnsdist` user:\n\n```bash\nsu - dnsdist -s /bin/bash -c \"dnstap_receiver -u \"/var/run/dnsdist/dnstap.sock\"\"\n```\n\n#### TCP stream\n\nUpdate the configuration file `/etc/dnsdist/dnsdist.conf` to activate the dnstap feature\nwith tcp stream and execute the dnstap receiver in listening tcp socket mode:\n\n```\nfsul = newFrameStreamTcpLogger(\"127.0.0.1:8888\")\naddAction(AllRule(), DnstapLogAction(\"dnsdist\", fsul))\naddResponseAction(AllRule(), DnstapLogResponseAction(\"dnsdist\", fsul))\n```\n\n### nsd\n\n![nsd 4.3.2](https://img.shields.io/badge/4.3.2-tested-green)\n\nDnstap messages supported:\n - AUTH_QUERY\n - AUTH_RESPONSE\n\n#### Build with dnstap support\n\nDownload latest source and build-it with dnstap support:\n\n```bash\n./configure --enable-dnstap\nmake && make install\n```\n\n#### Unix socket\n\nUpdate the configuration file `/etc/nsd/nsd.conf` to activate the dnstap feature:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"/var/run/nsd/dnstap.sock\"\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-auth-query-messages: yes\n    dnstap-log-auth-response-messages: yes\n```\n\nExecute the dnstap receiver with `nsd` user:\n\n```bash\nsu - nsd -s /bin/bash -c \"dnstap_receiver -u \"/var/run/nsd/dnstap.sock\"\"\n```\n\n\n### unbound\n\n![unbound 1.11.0](https://img.shields.io/badge/1.11.0-tested-green)\n\nDnstap messages supported:\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n - RESOLVER_QUERY\n - RESOLVER_RESPONSE\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n\n#### Build with dnstap support\n\nDownload latest source and build-it with dnstap support:\n\n```bash\n./configure --enable-dnstap\nmake && make install\n```\n\n#### Unix socket\n\nUpdate the configuration file `/etc/unbound/unbound.conf` to activate the dnstap feature:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"dnstap.sock\"\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-resolver-query-messages: yes\n    dnstap-log-resolver-response-messages: yes\n    dnstap-log-client-query-messages: yes\n    dnstap-log-client-response-messages: yes\n    dnstap-log-forwarder-query-messages: yes\n    dnstap-log-forwarder-response-messages: yes\n```\n\nExecute the dnstap receiver with `unbound` user:\n\n```bash\nsu - unbound -s /bin/bash -c \"dnstap_receiver -u \"/usr/local/etc/unbound/dnstap.sock\"\"\n```\n\n#### TCP stream\n\nUpdate the configuration file `/etc/unbound/unbound.conf` to activate the dnstap feature \nwith tcp mode and execute the dnstap receiver in listening tcp socket mode:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"\"\n    dnstap-ip: \"10.0.0.100@6000\"\n    dnstap-tls: no\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-client-query-messages: yes\n    dnstap-log-client-response-messages: yes\n```\n\n#### TLS stream\n\nUpdate the configuration file `/etc/unbound/unbound.conf` to activate the dnstap feature \nwith tls mode and execute the dnstap receiver in listening tcp/tls socket mode:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"\"\n    dnstap-ip: \"10.0.0.100@6000\"\n    dnstap-tls: yes\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-client-query-messages: yes\n    dnstap-log-client-response-messages: yes\n```\n\n\n## Tested Logs Collectors\n\n### Logstash with json input\n\nvim /etc/logstash/conf.d/00-dnstap.conf\n\n```\ninput {\n  tcp {\n      port => 8192\n      codec => json\n  }\n}\n\nfilter {\n  date {\n     match => [ \"dt_query\" , \"yyyy-MM-dd HH:mm:ss.SSS\" ]\n     target => \"@timestamp\"\n  }\n}\n\noutput {\n   elasticsearch {\n    hosts => [\"http://localhost:9200\"]\n    index => \"dnstap-lb\"\n  }\n}\n```\n\n## Systemd service file configuration\n\nSystem service file for CentOS:\n\n```bash\nvim /etc/systemd/system/dnstap_receiver.service\n\n[Unit]\nDescription=Python DNS tap Service\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/bin/dnstap_receiver -u /etc/dnsdist/dnstap.sock -f 10.0.0.2:8192\nRestart=on-abort\nType=simple\nUser=root\n\n[Install]\nWantedBy=multi-user.target\n```\n\n```bash\nsystemctl daemon-reload\nsystemctl start dnstap_receiver\nsystemctl status dnstap_receiver\nsystemctl enable dnstap_receiver\n```\n\n# About\n\n| | |\n| ------------- | ------------- |\n| Author |  Denis Machard <d.machard@gmail.com> |\n| License |  MIT | \n| PyPI |  https://pypi.org/project/dnstap_receiver/ |\n| | |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dmachard/dnstap_receiver",
    "keywords": "dnstap receiver client json yaml text",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dnstap-receiver",
    "package_url": "https://pypi.org/project/dnstap-receiver/",
    "platform": "any",
    "project_url": "https://pypi.org/project/dnstap-receiver/",
    "project_urls": {
      "Homepage": "https://github.com/dmachard/dnstap_receiver"
    },
    "release_url": "https://pypi.org/project/dnstap-receiver/1.0.2/",
    "requires_dist": [
      "dnslib",
      "protobuf",
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "Python Dnstap receiver",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15714027,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2fac0927582eb22518d77cad1c2c1916b4bf15a4ab6df2647120237102232f6b",
        "md5": "963895e4fb5dd3a62ff11a78c2e3e3c0",
        "sha256": "5f93a2a36165ae02b546fbd2abad58cef5fd3736845b6bc30d059412f107d558"
      },
      "downloads": -1,
      "filename": "dnstap_receiver-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "963895e4fb5dd3a62ff11a78c2e3e3c0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11372,
      "upload_time": "2020-09-16T19:11:06",
      "upload_time_iso_8601": "2020-09-16T19:11:06.489394Z",
      "url": "https://files.pythonhosted.org/packages/2f/ac/0927582eb22518d77cad1c2c1916b4bf15a4ab6df2647120237102232f6b/dnstap_receiver-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7fe4a8f8fb257eb547d088f5daabae8844554d6f55512b52570c5f782c60fde2",
        "md5": "0facc162bce1126e301d29a1d0f54cce",
        "sha256": "04485f685397ce01bc3557eaef0af9823d418706097a724edc6faa46852a4e94"
      },
      "downloads": -1,
      "filename": "dnstap_receiver-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0facc162bce1126e301d29a1d0f54cce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14107,
      "upload_time": "2020-09-16T19:11:07",
      "upload_time_iso_8601": "2020-09-16T19:11:07.579892Z",
      "url": "https://files.pythonhosted.org/packages/7f/e4/a8f8fb257eb547d088f5daabae8844554d6f55512b52570c5f782c60fde2/dnstap_receiver-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}