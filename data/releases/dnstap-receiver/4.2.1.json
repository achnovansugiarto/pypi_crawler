{
  "info": {
    "author": "Denis MACHARD",
    "author_email": "d.machard@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Dnstap streams receiver\n\n![Testing](https://github.com/dmachard/dnstap_receiver/workflows/Testing/badge.svg) ![Build](https://github.com/dmachard/dnstap_receiver/workflows/Build/badge.svg) ![Pypi](https://github.com/dmachard/dnstap_receiver/workflows/PyPI/badge.svg) ![Dockerhub](https://github.com/dmachard/dnstap_receiver/workflows/DockerHub/badge.svg) \n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/dnstap_receiver)\n\nThis Python module acts as a [dnstap](https://dnstap.info/) streams receiver for DNS servers.\nInput streams can be a unix, tcp or raw socket.\nThe output is printed directly on stdout or sent to remote tcp address \nin JSON, YAML or one line text format and more. \n\n## Table of contents\n* [Installation](#installation)\n    * [PyPI](#pypi)\n    * [Docker Hub](#docker-hub)\n* [Inputs handler](#inputs-handler)\n    * [TCP socket (server)](#tcp-socket-server)\n    * [TCP socket (client)](#tcp-socket-client)\n    * [Unix socket](#unix-socket)\n    * [Raw socket (sniffer)](#raw-socket-sniffer)\n* [Outputs handler](#outputs-handler)\n    * [Stdout](#stdout)\n    * [File](#file)\n    * [TCP](#tcp)\n    * [Syslog](#syslog)\n    * [Metrics](#metrics)\n    * [Dnstap](#dnstap)\n* [More options](#more-options)\n    * [External config file](#external-config-file)\n    * [Verbose mode](#verbose-mode)\n    * [Filtering feature](#filtering-feature)\n    * [GeoIP support](#geoip-support)\n* [Statistics](#statistics)\n    * [Counters](#counters)\n    * [Tables](#tables)\n    * [Metrics](#metrics-1)\n* [Build-in Webserver](#build-in-webserver)\n    * [Configuration](#configuration)\n    * [Security](#security)\n    * [HTTP API](#http-api)\n* [Tested DNS servers](#tested-dns-servers)\n    * [ISC - bind](#bind)\n    * [PowerDNS - pdns-recursor](#pdns-recursor)\n    * [PowerDNS - dnsdist](#dnsdist)\n    * [NLnet Labs - nsd](#nsd)\n    * [NLnet Labs - unbound](#unbound)\n    * [CoreDNS](#coredns)\n* [Benchmark](#benchmark)\n* [About](#about)\n\n## Installation\n\n### PyPI\n\nDeploy the dnstap receiver in your DNS server with the pip command.\n\n```python\npip install dnstap_receiver\n```\n\nAfter installation, you can execute the `dnstap_receiver` to start-it.\n\nUsage:\n\n```\nusage: dnstap_receiver [-h] [-l L] [-p P] [-u U] [-v] [-c C]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -l L        IP of the dnsptap server to receive dnstap payloads (default: '0.0.0.0')\n  -p P        Port the dnstap receiver is listening on (default: 6000)\n  -u U        read dnstap payloads from unix socket\n  -v          verbose mode\n  -c C        external config file\n```\n\n\n### Docker Hub\n\nPull the dnstap receiver image from Docker Hub.\n\n```bash\ndocker pull dmachard/dnstap-receiver:latest\n```\n\nDeploy the container\n\n```bash\ndocker run -d -p 6000:6000 -p 8080:8080 --name=dnstap01 dmachard/dnstap-receiver\n```\n\nAdd the following argument to your container if you want to provide your own [configuration](#external-config-file) file.\n\n```bash\n-v /home/dnstap.conf:/etc/dnstap_receiver/dnstap.conf\n```\n\nFollow containers logs \n\n```bash\ndocker logs dnstap01 -f\n```\n\n## Inputs handler\n\nSeverals inputs handler are supported to read incoming dnstap messages:\n- [TCP socket (server)](#tcp-socket-server)\n- [TCP socket (client)](#tcp-socket-client)\n- [Unix socket](#unix-socket)\n- [Raw socket (sniffer)](#raw-socket-sniffer)\n\n### TCP socket (server)\n\nThe TCP socket input enable to receive dnstap messages from multiple dns servers.\nThis is the default input if you execute the binary without arguments.\nThe receiver is listening on `localhost` interface and the tcp port `6000`.\nYou can change binding options with `-l` and `-p` arguments.\n\n```\n./dnstap_receiver -l 0.0.0.0 -p 6000\n```\n\nYou can also activate `TLS` on the socket, add the following config as external config file\nto activate the tls support, configure the path of the certificate and key to use.\n\n```yaml\ninput:\n  tcp-socket:\n    # enable tls support\n    tls-support: true\n    # provide certificate server path\n    tls-server-cert: /etc/dnstap_receiver/server.crt\n    # provide certificate key path\n    tls-server-key: /etc/dnstap_receiver/server.key\n```\n\nThen execute the dnstap receiver with the configuration file:\n\n```\n./dnstap_receiver -c /etc/dnstap-receiver/dnstap.conf\n```\n\n### TCP socket (client)\n\nThe TCP socket input enable to receive dnstap messages from remote dns servers.\nThe communication is initiated by the dnstap receiver.\n\nConfigure this input as below\n\n```yaml\ninput:\n  # tcp client\n  tcp-client:\n    # enable or disable\n    enable: true\n    # retry interval in seconds to connect\n    retry: 1\n    # remote dns server address\n    remote-address: 10.0.0.2\n    # remote dns server port\n    remote-port: 6000\n```\n\n### Unix socket\n\nThe unix socket input enables read dnstap message from a unix socket. \nConfigure the path of the socket with the `-u` argument.\n\n```\n./dnstap_receiver -u /var/run/dnstap.sock\n```\n\n### Raw socket (sniffer)\n\nThis input enable to sniff a network interface.\nConfigure this input as below, you need to provide the name of your interface and associated ip.\n\n```yaml\ninput:\n  # sniff dns messages from network interface \n  sniffer:\n    # enable or disable\n    enable: true\n    # interface name to sniff\n    eth-name: ens18\n    # ip interface to sniff\n    eth-ip: [ 10.0.0.2 ]\n    # dnstap identity\n    dnstap-identity: sniffer\n    # sniff on the list of dns port\n    dns-port: [ 53 ]\n    # record incoming dns client queries\n    record-client-query: true\n    # record outgoing dns client responses\n    record-client-response: true\n```\n\n## Outputs handler\n\nOutputs handler can be configured to forward messages in several modes.\n- [Stdout](#stdout)\n- [File](#file)\n- [Metrics](#metrics)\n- [TCP](#tcp)\n- [Syslog](#syslog)\n- [Dnstap](#dnstap)\n\n### Stdout\n\nThis output enables to forward dnstap messages directly to Stdout.\nAdd the following configuration as external config to activate this output:\n\n```yaml\noutput:\n  stdout:\n    # enable or disable\n    enable: true\n    # format available text|json|yaml\n    format: text\n```\n\nOutput can be formatted in different way:\n- text (default one)\n- json \n- yaml\n\nText format:\n\n```\n2020-09-16T18:51:53.547352+00:00 lb1 CLIENT_QUERY NOERROR - - INET UDP 43b ns2.google.com. A -\n2020-09-16T18:51:53.591736+00:00 lb2 CLIENT_RESPONSE NOERROR - - INET UDP 59b ns2.google.com. A 0.048\n```\n\nJSON format:\n\n```json\n{\n    \"identity\": \"lb1\",\n    \"qname\": \"www.google.com.\",\n    \"rrtype\": \"A\",\n    \"query-ip\": \"192.168.1.114\",\n    \"message\": \"CLIENT_QUERY\",\n    \"family\": \"INET\",\n    \"protocol\": \"UDP\",\n    \"query-port\": 42222,\n    \"length\": 43,\n    \"timestamp\": \"2020-09-16T18:51:53.591736+00:00\",\n    \"rcode\": \"NOERROR\",\n    \"id\": 33422,\n    \"flags\": \"RD\",\n    \"latency\": \"-\"\n}\n```\n\nYAML format:\n\n```yaml\nidentity: lb1\nrcode: NOERROR\nlength: 49\nmessage: CLIENT_QUERY\nfamily: INET\nqname: dns4.comlaude-dns.eu.\nrrtype: AAAA\nquery-ip: '-'\nquery-port: '-'\ntimestamp: '2020-09-16T18:51:53.591736+00:00'\nprotocol: UDP\nid: 33422\nflags: RD\nlatency: '-'\n\n```\n\n### File\n\nThis output enables to forward dnstap messages directly to a log file.\nAdd the following configuration as external config to activate this output:\n\n```yaml\n  # forward to log file\n  file:\n    # enable or disable\n    enable: true\n    # format available text|json|yaml\n    format: text\n    # log file path or null to print to stdout\n    file: /var/log/dnstap.log\n    # max size for log file\n    file-max-size: 10M\n    # number of max log files\n    file-count: 10\n```\n\nIf you are running the dnstap in a container, follow this procedure to save logs in your host instead of the container.\n\nFirst one, create the folder in the host:\n\n```\nmkdir /var/dnstap/\nchown 1000:1000 /var/dnstap/\n```\n\nCreate the following configuration for your dnstap receiver\n\n```\ntrace:\n    verbose: true\noutput:\n  stdout:\n    enable: false\n  file:\n    enable: true\n    format: text\n    file: /home/dnstap/logs/dnstap.log\n    file-max-size: 10M\n    file-count: 10\n```\n\n\nThen execute the container with volume\n\n```\ndocker run -d -p 6000:6000 -p 8080:8080 -v ${PWD}/dnstap.conf:/etc/dnstap_receiver/dnstap.conf \\\n-v /var/dnstap:/home/dnstap/logs/ --name=dnstap01 dmachard/dnstap-receiver\n```\n\n\n### TCP\n\nThis output enables to forward dnstap message to a remote tcp collector.\nAdd the following configuration as external config to activate this output:\n\n```yaml\noutput:\n  # forward to remote tcp destination\n  tcp-socket:\n    # enable or disable\n    enable: true\n    # format available text|json|yaml\n    format: text\n    # delimiter\n    delimiter: \"\\n\"\n    # retry interval in seconds to connect\n    retry: 5\n    # remote ipv4 or ipv6 address\n    remote-address: 10.0.0.2\n    # remote tcp port\n    remote-port: 8192\n```\n\n### Syslog\n\nThis output enables to forward dnstap message to a syslog server.\nAdd the following configuration as external config to activate this output:\n\n\n```yaml\noutput:\n  syslog:\n    # enable or disable\n    enable: false\n    # syslog over tcp or udp\n    transport: udp\n    # format available text|json\n    format: text\n    # retry interval in seconds to connect\n    retry: 5\n    # remote ipv4 or ipv6 address of the syslog server\n    remote-address: 10.0.0.2\n    # remote port of the syslog server\n    remote-port: 514\n```\n\nExample of output on syslog server\n\n```\nSep 22 12:43:01 bind CLIENT_RESPONSE NOERROR 192.168.1.100 51717 INET UDP 173b www.netflix.fr. A 0.040\nSep 22 12:43:01 bind CLIENT_RESPONSE NOERROR 192.168.1.100 51718 INET UDP 203b www.netflix.fr. AAAA 0.060\n```\n\n### Metrics\n\nThis output enables to generate metrics in one line and print-it to stdout. Add the following configuration as external config to activate this output:\n\n```yaml\noutput:\n  metrics:\n    # enable or disable\n    enable: true\n    # print every N seconds.\n    interval: 300\n    # cumulative statistics, without clearing them after printing\n    cumulative: true\n    # log file path or null to print to stdout\n    file: null\n    # max size for log file\n    file-max-size: 10M\n    # number of max log files\n    file-count: 10\n```\n\nExample of output\n\n```\n2020-10-13 05:19:35,522 18 QUERIES, 3.6 QPS, 1 CLIENTS, 18 INET, 0 INET6, \n18 UDP, 0 TCP, 17 DOMAINS\n```\n\n### Dnstap\n\nThis output enables to send dnstap messages to a remote dnstap receiver. Add the following configuration as external config to activate this output:\n\n```yaml\n  # forward to another remote dnstap receiver\n  dnstap:\n    # enable or disable\n    enable: true\n    # retry interval in seconds to connect\n    retry: 1\n    # remote ipv4 or ipv6 address of the remote dnstap receiver\n    remote-address: 10.0.0.51\n    # remote port of the remote dnstap receiver\n    remote-port: 6000\n    # dnstap identity\n    dnstap-identity: dnstap-receiver\n```\n\n## More options\n\n### External config file\n\nThe `dnstap_receiver` binary can takes an external config file with the `-c` argument or searches for a config file named dnstap.conf in /etc/dnstap_receiver/.\n\nSee [config file](/dnstap_receiver/dnstap.conf) example.\n\n```\n./dnstap_receiver -c /etc/dnstap-receiver/dnstap.conf\n```\n\n### Verbose mode\n\nYou can execute the binary in verbose mode with the `-v` argument:\n\n```\n./dnstap_receiver -v\n2020-11-25 20:26:59,790 DEBUG Start receiver...\n2020-11-25 20:26:59,790 DEBUG Output handler: stdout\n2020-11-25 20:26:59,790 DEBUG Input handler: tcp socket\n2020-11-25 20:26:59,790 DEBUG Input handler: listening on 0.0.0.0:6000\n2020-11-25 20:26:59,790 DEBUG Api rest: listening on 0.0.0.0:8080\n```\n\n### Filtering feature\n\nThis feature can be useful if you want to ignore some messages and keep just what you want.\nSeveral filter are available:\n- by qname field\n- by dnstap identity field.\n\n#### By dnstap identity\n\nYou can filtering incoming dnstap messages according to the dnstap identity field.\nA regex can be configured in the external configuration file to do that\n\n```yaml\nfilter:\n  # dnstap identify filtering feature with regex support\n  dnstap-identities: dnsdist01|unbound01\n```\n\n#### By qname\n\nYou can filtering incoming dnstap messages according to the query name.\nA regex can be configured in the external configuration file to do that\n\n```yaml\nfilter: \n  # qname filtering feature with regex support\n  qname-regex: \".*.com\"\n```\n\n### GeoIP support\n\nThe `dnstap receiver` can be extended with GeoIP. To do that, you need to configure your own city database in binary format.\n\n```yaml\n# geoip support, can be used to get the country, and city\n# according to the source ip in the dnstap message\ngeoip:\n    # enable or disable\n    enable: true\n    # city database path in binary format\n    city-database: /var/geoip/GeoLite2-City.mmdb\n    # represent country in iso mode\n    country-iso: false\n```\n\nWith the GeoIP support, the following new fields will be added:\n - country\n - city\n\n## Statistics\n\nSome statistics are computed [on the fly](/dnstap_receiver/statistics.py) and stored in memory, you can get them: \n- directly from the [web server](#web-server) through the HTTP API. \n- with the [dnstap-dashboard](https://github.com/dmachard/dnstap-dashboard), a top-like command\n- from your [Prometheus](https://prometheus.io/) instance\n\n### Counters\n\n- **query**: number of queries\n- **response**: number of answers\n- **qps**: number of queries per second\n- **clients**: number of unique clients ip\n- **domains**: number of unique domains\n- **query/inet**: number of IPv4 queries\n- **query/inet6**: number of IPv6 queries\n- **response/inet**: number of IPv4 answers\n- **response/inet6**: number of IPv6 answers\n- **query/udp**: number of queries with UDP protocol\n- **query/tcp**: number of queries with TCP protocol\n- **response/udp**: number of answers with UDP protocol\n- **response/tcp**: number of answers with TCP protocol\n- **response/[rcode]**: number of answers per specific rcode = noerror, nxdomain, refused,...\n- **query/[rrtype]**: number of queries per record resource type = = a, aaaa, cname,...\n- **query/bytes**: total number of bytes with queries\n- **response/bytes**: total number of bytes with answers\n- **response/latency0_1**: number of queries answered in less than 1ms\n- **response/latency1_10**: number of queries answered in 1-10 ms\n- **response/latency10_50**: number of queries answered in 10-50 ms\n- **response/latency50_100**: number of queries answered in 50-100 ms\n- **response/latency100_1000**: number of queries answered in 100-1000 ms\n- **response/latency_slow**: number of queries answered in more than 1 second\n\n### Tables\n\n- **tlds**: \n  - **hit/query**: table of [n] tlds sorted by number of queries\n  - **hit/response**: table of [n] tlds sorted by number of answers\n- **domains**: \n  - **[rcode]/query**: table of [n] domains sorted by number of queries\n  - **[rcode]/response**: table of [n] domains sorted by number of answers\n- **clients**: \n  - **hit/client**: table of [n] ip addresses sorted by number of queries\n  - **length/ip**: table of [n] ip addresses sorted by number of bytes\n- **rrtypes** \n  - **hit/query**: table of [n] resources record types sorted by the number of queries\n  - **hit/response**: table of [n] resources record types sorted by the number of answers\n- **top-rcodes**:\n  - **hit/query**: table of [n] return codes sorted by the number of queries\n  - **hit/response**: table of [n] return codes sorted by the number of answers\n\n### Metrics\n\nMetrics in [Prometheus](https://prometheus.io/) format with global counters and specific by dnstap stream.\n\nSee [metrics file](/metrics.txt) example.\n```\n# HELP dnstap_queries Number of queries received\n# TYPE dnstap_queries counter\ndnstap_queries 0\n# HELP dnstap_responses Number of responses received\n# TYPE dnstap_responses counter\ndnstap_responses 0\n# HELP dnstap_responses_noerror Number of NOERROR answers\n# TYPE dnstap_responses_noerror counter\ndnstap_responses_noerror 0\n# HELP dnstap_responses_nxdomain Number of NXDomain answers\n# TYPE dnstap_responses_nxdomain counter\ndnstap_responses_nxdomain 0\n# HELP dnstap_responses_servfail Number of SERVFAIL  answers\n# TYPE dnstap_responses_servfail counter\ndnstap_responses_servfail 0\n...\n```\n\n## Build-in Webserver\n\nThe build-in web server can be used to get statistics computed by the dnstap receiver.\n\n### Configuration\n\nEnable the HTTP API, don't forget to change the default password.\n\n```yaml\n# rest api\nweb-api:\n    # enable or disable\n    enable: true\n    # web api key\n    api-key: changeme\n    # basicauth login\n    login: admin\n    # basicauth password\n    password: changeme\n    # listening address ipv4 0.0.0.0 or ipv6 [::]\n    local-address: 0.0.0.0\n    # listing on port\n    local-port: 8080\n```\n\n### Security\n\nThe following authentication methods are supported:\n- BasicAuth\n- X-API-Key\n\nTo access to the API, one of them method must be used in the request header.\nAn HTTP 401 response is returned when the authentication failed.\n\n### HTTP API\n\nSee the [swagger](https://generator.swagger.io/?url=https://raw.githubusercontent.com/dmachard/dnstap-receiver/master/swagger.yml) documentation.\n\n## Tested DNS servers\n\nThis dnstap receiver has been tested with success with the following dns servers:\n - [ISC](https://www.isc.org/bind/) - **bind**\n - [PowerDNS](https://github.com/PowerDNS) - **dnsdist, pdns-recursor**\n - [NLnet Labs](https://github.com/NLnetLabs) - **nsd, unbound**\n - [CoreDNS](https://github.com/coredns)\n\n### bind\n\n![pdns-recursor 9.11.22](https://img.shields.io/badge/9.11.22-tested-green) ![pdns-recursor 9.16.10](https://img.shields.io/badge/9.16.10-tested-green)\n\nDnstap messages supported:\n - RESOLVER_QUERY\n - RESOLVER_RESPONSE\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n - AUTH_QUERY\n - AUTH_RESPONSE\n\n#### Build with dnstap support\n\nSince 9.16 version, the dnstap feature is enabled before that you need to download latest source and build-it with dnstap support:\n\n```bash\n./configure --enable-dnstap\nmake && make install\n```\n\n#### Unix socket\n\nUpdate the configuration file `/etc/named.conf` to activate the dnstap feature:\n\n```\noptions {\n    dnstap { client; auth; resolver; forwarder; };\n    dnstap-output unix \"/var/run/named/dnstap.sock\";\n    dnstap-identity \"dns-bind\";\n    dnstap-version \"bind\";\n}\n```\n\nExecute the dnstap receiver with `named` user:\n\n```bash\nsu - named -s /bin/bash -c \"dnstap_receiver -u \"/var/run/named/dnstap.sock\"\"\n```\n\nIf you have some troubles take a look to [selinux](https://gitlab.isc.org/isc-projects/bind9/-/issues/2356#note_185516)\n\n#### TCP stream\n\nNot supported on Bind! You can apply the following workaround with the `socat` command.\n\n```\nwhile true; do socat unix-listen:/var/run/dnsdist/dnstap.sock tcp4-connect:<ip_dnstap_receiver>:<port_dnstap_receiver>,forever,interval=10, fork; sleep 1; done\n```\n\n### pdns-recursor\n\n![pdns-recursor 4.3.4](https://img.shields.io/badge/4.3.4-tested-green) ![pdns-recursor 4.4.0](https://img.shields.io/badge/4.4.0-tested-green)\n\nDnstap messages supported:\n - RESOLVER_QUERY\n - RESOLVER_RESPONSE\n\n#### Unix socket\n\nUpdate the configuration file to activate the dnstap feature:\n\n```\nvim /etc/pdns-recursor/recursor.conf\nlua-config-file=/etc/pdns-recursor/recursor.lua\n\nvim /etc/pdns-recursor/recursor.lua\ndnstapFrameStreamServer(\"/var/run/pdns-recursor/dnstap.sock\")\n```\n\nExecute the dnstap receiver with `pdns-recursor` user:\n\n```bash\nsu - pdns-recursor -s /bin/bash -c \"dnstap_receiver -u \"/var/run/pdns-recursor/dnstap.sock\"\"\n```\n\n#### TCP stream\n\nUpdate the configuration file to activate the dnstap feature with tcp mode \nand execute the dnstap receiver in listening tcp socket mode:\n\n```\nvim /etc/pdns-recursor/recursor.conf\nlua-config-file=/etc/pdns-recursor/recursor.lua\n\nvim /etc/pdns-recursor/recursor.lua\ndnstapFrameStreamServer(\"10.0.0.100:6000\")\n```\n\nNote: TCP stream are only supported with a recent version of libfstrm.\n\n### dnsdist\n\n![dnsdist 1.4.0](https://img.shields.io/badge/1.4.0-tested-green) ![dnsdist 1.5.0](https://img.shields.io/badge/1.5.0-tested-green)\n\nDnstap messages supported:\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n\n#### Unix socket\n\nCreate the dnsdist folder where the unix socket will be created:\n\n```bash\nmkdir -p /var/run/dnsdist/\nchown dnsdist.dnsdist /var/run/dnsdist/\n```\n\nUpdate the configuration file `/etc/dnsdist/dnsdist.conf` to activate the dnstap feature:\n\n```\nfsul = newFrameStreamUnixLogger(\"/var/run/dnsdist/dnstap.sock\")\naddAction(AllRule(), DnstapLogAction(\"dnsdist\", fsul))\naddResponseAction(AllRule(), DnstapLogResponseAction(\"dnsdist\", fsul))\n-- Cache Hits\naddCacheHitResponseAction(AllRule(), DnstapLogResponseAction(\"dnsdist\", fsul))\n```\n\nExecute the dnstap receiver with `dnsdist` user:\n\n```bash\nsu - dnsdist -s /bin/bash -c \"dnstap_receiver -u \"/var/run/dnsdist/dnstap.sock\"\"\n```\n\n#### TCP stream\n\nUpdate the configuration file `/etc/dnsdist/dnsdist.conf` to activate the dnstap feature\nwith tcp stream and execute the dnstap receiver in listening tcp socket mode:\n\n```\nfsul = newFrameStreamTcpLogger(\"127.0.0.1:8888\")\naddAction(AllRule(), DnstapLogAction(\"dnsdist\", fsul))\naddResponseAction(AllRule(), DnstapLogResponseAction(\"dnsdist\", fsul))\n-- Cache Hits\naddCacheHitResponseAction(AllRule(), DnstapLogResponseAction(\"dnsdist\", fsul))\n```\n\n### nsd\n\n![nsd 4.3.2](https://img.shields.io/badge/4.3.2-tested-green)\n\nDnstap messages supported:\n - AUTH_QUERY\n - AUTH_RESPONSE\n\n#### Build with dnstap support\n\nDownload latest source and build-it with dnstap support:\n\n```bash\n./configure --enable-dnstap\nmake && make install\n```\n\n#### Unix socket\n\nUpdate the configuration file `/etc/nsd/nsd.conf` to activate the dnstap feature:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"/var/run/nsd/dnstap.sock\"\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-auth-query-messages: yes\n    dnstap-log-auth-response-messages: yes\n```\n\nExecute the dnstap receiver with `nsd` user:\n\n```bash\nsu - nsd -s /bin/bash -c \"dnstap_receiver -u \"/var/run/nsd/dnstap.sock\"\"\n```\n\n\n### unbound\n\n![unbound 1.11.0](https://img.shields.io/badge/1.11.0-tested-green) ![unbound 1.12.0](https://img.shields.io/badge/1.12.0-tested-green) ![unbound 1.13.0](https://img.shields.io/badge/1.13.0-tested-green)\n\nDnstap messages supported:\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n - RESOLVER_QUERY\n - RESOLVER_RESPONSE\n\n#### Build with dnstap support\n\nDownload latest source and build-it with dnstap support:\n\n```bash\n./configure --enable-dnstap\nmake && make install\n```\n\n#### Unix socket\n\nUpdate the configuration file `/etc/unbound/unbound.conf` to activate the dnstap feature:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"dnstap.sock\"\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-resolver-query-messages: yes\n    dnstap-log-resolver-response-messages: yes\n    dnstap-log-client-query-messages: yes\n    dnstap-log-client-response-messages: yes\n    dnstap-log-forwarder-query-messages: yes\n    dnstap-log-forwarder-response-messages: yes\n```\n\nExecute the dnstap receiver with `unbound` user:\n\n```bash\nsu - unbound -s /bin/bash -c \"dnstap_receiver -u \"/usr/local/etc/unbound/dnstap.sock\"\"\n```\n\n#### TCP stream\n\nUpdate the configuration file `/etc/unbound/unbound.conf` to activate the dnstap feature \nwith tcp mode and execute the dnstap receiver in listening tcp socket mode:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"\"\n    dnstap-ip: \"10.0.0.100@6000\"\n    dnstap-tls: no\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-client-query-messages: yes\n    dnstap-log-client-response-messages: yes\n```\n\n#### TLS stream\n\nUpdate the configuration file `/etc/unbound/unbound.conf` to activate the dnstap feature \nwith tls mode and execute the dnstap receiver in listening tcp/tls socket mode:\n\n```yaml\ndnstap:\n    dnstap-enable: yes\n    dnstap-socket-path: \"\"\n    dnstap-ip: \"10.0.0.100@6000\"\n    dnstap-tls: yes\n    dnstap-send-identity: yes\n    dnstap-send-version: yes\n    dnstap-log-client-query-messages: yes\n    dnstap-log-client-response-messages: yes\n```\n\n### CoreDNS\n\n![coredns 1.8.0](https://img.shields.io/badge/1.8.0-tested-green)\n\nDnstap messages supported:\n - CLIENT_QUERY\n - CLIENT_RESPONSE\n - FORWARDER_QUERY\n - FORWARDER_RESPONSE\n\n#### Unix socket\n\ncorefile example\n\n```\n.:53 {\n    dnstap /tmp/dnstap.sock full\n    forward . 8.8.8.8:53\n}\n```\n\nThen execute CoreDNS with your corefile\n\n```bash\n ./coredns -conf corefile\n```\n\n#### TCP stream\n\ncorefile example\n\n```\n.:53 {\n        dnstap tcp://10.0.0.51:6000 full\n        forward . 8.8.8.8:53\n}\n```\n\nThen execute CoreDNS with your corefile\n\n```bash\n ./coredns -conf corefile\n```\n\n# Benchmark\n\n## Limited lab\n\nTested on a limited lab with the following processor: Intel Core i5-7200U @2,50GHz \n\nMetrics are extracted every second:\n\n```bash\nwatch -n 1 \"time curl --user admin:changeme http://[ip_dnstap_receiver]:8080/metrics\"\n```\n\nDns generator used:\n\n```bash\ndocker pull ns1labs/flame\ndocker run ns1labs/flame [ip_dns_server]\n```\n\nResult:\n\n| Parameters| Values | \n| ------------- | ------------- |\n| Query per seconds | ~11000 |\n| Domains | ~40000 |\n| Clients | 1 |\n| CPU usage | ~30% |\n| Memory usage | ~100Mo |\n| Network usage | ~5.7Mb |\n\n\n# About\n\n| | |\n| ------------- | ------------- |\n| Author | Denis Machard <d.machard@gmail.com> |\n| PyPI | https://pypi.org/project/dnstap-receiver/ |\n| Github | https://github.com/dmachard/dnstap-receiver |\n| DockerHub | https://hub.docker.com/r/dmachard/dnstap-receiver |\n| | |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dmachard/dnstap_receiver",
    "keywords": "dnstap receiver client json yaml text",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dnstap-receiver",
    "package_url": "https://pypi.org/project/dnstap-receiver/",
    "platform": "any",
    "project_url": "https://pypi.org/project/dnstap-receiver/",
    "project_urls": {
      "Homepage": "https://github.com/dmachard/dnstap_receiver"
    },
    "release_url": "https://pypi.org/project/dnstap-receiver/4.2.1/",
    "requires_dist": [
      "dnstap-pb",
      "pyyaml",
      "aiohttp",
      "geoip2",
      "tlds",
      "cachetools",
      "fstrm"
    ],
    "requires_python": "",
    "summary": "Python Dnstap receiver",
    "version": "4.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15714027,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b692a31d09225fb0329ea22e4532059b8a21f715c5d6d7dcadec2100ca46729",
        "md5": "9d9b2d1c215e16c3a4ecd399967ca806",
        "sha256": "c81e8b96574c4829b066af29f8fd8a7a314af60073c79e313555463ff3392b55"
      },
      "downloads": -1,
      "filename": "dnstap_receiver-4.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9d9b2d1c215e16c3a4ecd399967ca806",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 35317,
      "upload_time": "2021-03-10T18:54:53",
      "upload_time_iso_8601": "2021-03-10T18:54:53.877578Z",
      "url": "https://files.pythonhosted.org/packages/2b/69/2a31d09225fb0329ea22e4532059b8a21f715c5d6d7dcadec2100ca46729/dnstap_receiver-4.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "790ea4fc6fee3d8d974b026e059e7335c7578b86e7a0233836aadd66b21a34af",
        "md5": "cb4eb354fb28bef15be0d473e9bda9fe",
        "sha256": "df53df3da682c36b16e926a729bd65ad9cb56c32faf5afbf936bcc0e54f1189a"
      },
      "downloads": -1,
      "filename": "dnstap_receiver-4.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cb4eb354fb28bef15be0d473e9bda9fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35736,
      "upload_time": "2021-03-10T18:54:55",
      "upload_time_iso_8601": "2021-03-10T18:54:55.110814Z",
      "url": "https://files.pythonhosted.org/packages/79/0e/a4fc6fee3d8d974b026e059e7335c7578b86e7a0233836aadd66b21a34af/dnstap_receiver-4.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}