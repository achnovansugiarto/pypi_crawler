{
  "info": {
    "author": "Rick van Hattem",
    "author_email": "Rick.van.Hattem@Fawo.nl",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License"
    ],
    "description": "Introduction\n============\n\n`Mailjet <http://www.mailjet.com>`__ is a real-time Cloud Emailing\nplatform and this is a python library to access the `Mailjet Web\nAPI <https://mailjet.com/docs/api>`__.\n\nInstallation\n============\n\n-  Clone this repository:\n\n``git clone https://github.com/WoLpH/mailjet``\n\n-  ``cd`` into the cloned directory and execute:\n\n``python setup.py install``.\n\nThe settings can be configured from a Django settings file through\n``MAILJET_API_KEY`` and ``MAILJET_SECRET_KEY``, or through environment\nvariables with the same name.\n\ni.e.\n\n.. code:: py\n\n    export MAILJET_API_KEY='YOUR_API_KEY'\n    export MAILJET_SECRET_KEY='YOUR_SECRET_KEY'\n\nAlternatively, you can just pass the API key and Secret key as\nparameters when initializing the mailjet API as follows:\n\n.. code:: py\n\n    import mailjet\n\n    mailjet_api = mailjet.Api(api_key='YOUR_API_KEY', secret_key='YOUR_SECRET_KEY')\n\nUsage\n=====\n\n-  To get your account and profile information:\n\n.. code:: py\n\n    import mailjet\n\n    mailjet_api = mailjet.Api(api_key='YOUR_API_KEY', secret_key='YOUR_SECRET_KEY')\n    account_info = mailjet_api.user.infos()\n\n``acount_info`` would now be assigned the following python dict:\n\n.. code:: py\n\n    {\n        'status': 'OK',\n        'infos': {\n            'username': 'user@domain.com',\n            'firstname': 'firstname',\n            'locale': 'en_US',\n            'lastname': 'lastname',\n            'company_name': 'company_name',\n            'contact_phone': None,\n        }\n    }\n\n-  Create a new list of contacts, following on from the previous\n   example:\n\n.. code:: py\n\n    contact_list = mailjet_api.lists.create(\n        label='test',\n        name='testlist',  # Only alphanumeric characters are allowed!\n        method='POST'\n    )\n\n``contact_list`` will now contain a dictionary with the status and list\nid as below:\n\n.. code:: py\n\n    {\n        'status': 'OK',\n        'contact_id': 000000000\n    }\n\n-  You can now add contacts to your list using the ``contact_id``:\n\n.. code:: py\n\n    mailjet_api.lists.addcontact(\n        contact='example@example.com',\n        id=contact_list['list_id'],\n        method='POST'\n    )\n\nFAQ\n===\n\nHow do I give reserved python keywords as parameters?\n-----------------------------------------------------\n\nMethods such as creating a campaign require you to use reserved python\nkeywords, such as ``from`` - hence, in order to overcome this, do the\nfollowing:\n\n.. code:: py\n\n    params = dict()\n    params['method'] ='POST'\n    params['subject'] = 'My first campaign'\n    params['list_id'] = contact_list['list_id']\n    params['lang'] = 'en'\n    params['from'] = 'noreply@example.com'\n    params['from_name'] = 'Your name'\n    params['footer'] = 'default'\n    campaign = mailjet_api.message.createcampaign(**params)\n\nHow do I debug errors?\n----------------------\n\nThe errors produced by the ``mailjet`` library (or actually, produced by\nthe ``urllib2`` library) are still normal http responses. So if you wish\nto read the actual response, do something like this:\n\n.. code:: py\n\n    try:\n        contact_list = mailjet_api.lists.create(\n            label='test',\n            name='Test list',  # Incorrect because of the space in the name\n            method='POST'\n        )\n    except Exception, e:\n        print 'Mailjet response: %r, %r' % (e, e.read())",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/mailjet/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WoLpH/mailjet",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mailjet",
    "package_url": "https://pypi.org/project/mailjet/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mailjet/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/WoLpH/mailjet"
    },
    "release_url": "https://pypi.org/project/mailjet/1.4.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "mailjet is a django app to implement the mailjet REST API",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1985326,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3977a678087c632014668b8902e3f822b9ad392bef9434cc13d0cb2abf4558c0",
        "md5": "b1d7abf588ee15cc56dcbe52580ecfb2",
        "sha256": "8ecb23ea3cfb0bc52ddc0678cfed7f36eab4904c4c21ddf8d0f94125bcac7e71"
      },
      "downloads": -1,
      "filename": "mailjet-1.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b1d7abf588ee15cc56dcbe52580ecfb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10653,
      "upload_time": "2016-03-02T08:48:03",
      "upload_time_iso_8601": "2016-03-02T08:48:03.394950Z",
      "url": "https://files.pythonhosted.org/packages/39/77/a678087c632014668b8902e3f822b9ad392bef9434cc13d0cb2abf4558c0/mailjet-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}