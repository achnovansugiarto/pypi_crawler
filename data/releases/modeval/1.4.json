{
  "info": {
    "author": "Diquah",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# modeval\r\n\r\n![](https://img.shields.io/badge/license-MIT-blue) ![](https://img.shields.io/badge/python-3.x-yellowgreen)\r\n\r\nModeval (or Modular Eval) is a modular and secure string evaluation library that can be used to create custom parsers or interpreters.\r\n\r\nInstall with: `pip install modeval`\r\n\r\n### Basic Use\r\n\r\nIf performance is not really a concern, you can use the `meval()` function.\r\n\r\n```python\r\nfrom modeval import meval\r\n\r\n# Evalute string. Spaces are automatically removed.\r\nprint( meval('1 * (2-3)') )\r\n```\r\n\r\nCreating a parser class is more efficient for crunching lots of expressions with the same ruleset.\r\n\r\n```python\r\nfrom modeval import Parser\r\n\r\n# Create a new parser with the default ruleset.\r\np = Parser()\r\n\r\n# Evalute string. Spaces are automatically removed.\r\nprint( p.eval('1 * (2-3)') )\r\n```\r\n\r\n### Rulesets \r\n\r\nThe Parser class will use a basic mathematical ruleset if no ruleset is specified. Use the default ruleset as a guide on how to make custom ones.\r\n\r\n:warning: ***Warning:*** You cannot change the ruleset of a parser once it has been initialized. Create a new parser instead.\r\n\r\n```python\r\nfrom modeval import Parser, Ruleset, meval\r\n\r\nimport operator # (standard library)\r\n\r\ndefault_ruleset = Ruleset()\r\n\r\n# Notice the order of the array follows order of operations.\r\ndefault_ruleset.operators = [\r\n    [('^', operator.pow), ('**', operator.pow)],\r\n    [('*', operator.mul), ('/', operator.truediv)],\r\n    [('+', operator.add), ('-', operator.sub)]\r\n]\r\n\r\np = Parser(ruleset = default_ruleset)\r\nmeval('1+1', ruleset=default_ruleset) # Rulesets can also be supplied to meval()\r\n```\r\n\r\nThe second item in the tuple must be the function that will be called when the operator is used. The attached method must have two inputs *in the correct order* (`L + R` is parsed as `add(L, R)`).\r\n\r\nModeval also supports functions like `sin()`, but they are not included in the default ruleset. However, they are included in `scientific_ruleset` which can be imported and used. Adding custom functions works as follows:\r\n\r\n```python\r\nfrom modeval import Parser, Ruleset\r\n\r\nimport math # (standard library)\r\n\r\ncustom_ruleset = Ruleset()\r\n\r\n# Function order does not matter, so an extra layer of grouping is not needed.\r\ncustom_ruleset.functions = [\r\n    ('sin', math.sin),\r\n    ('cos', math.cos),\r\n    ('tan', math.tan)\r\n]\r\n\r\np = Parser(ruleset = custom_ruleset)\r\n# You can now use \"sin(...)\" in the input string for eval().\r\n```\r\n\r\nSpeaking of `sin()`, what about `pi`? Modeval also supports custom variables. They can be set like this:\r\n```python\r\nfrom modeval import Parser, Ruleset\r\n\r\nimport math # (standard library)\r\n\r\ncustom_ruleset = Ruleset()\r\n\r\ncustom_ruleset.variables = [\r\n    ('pi', math.pi) # Keep in mind this needs to be a value and not a reference to function.\r\n]\r\n\r\np = Parser(ruleset = custom_ruleset)\r\n# Now you can use \"pi\" just like any other number.\r\n```\r\n\r\n### Utilities\r\n\r\nThe function `parse_parentheses()` is also available for use. It takes one string as an input and will output a nested array depending on the parenthesis grouping in the input string.\r\n\r\nFor example: `parse_parentheses('ab(c(d))') ==> ['a', 'b', ['c', ['d']]]`\r\n\r\n### Technical Limitations\r\n\r\nMulti-character operators, functions, and variables are assigned a single Unicode character during processing. This means that you have a limit of 143,697 operators/functions/variables. This is 1,000 less than the Unicode limit, since the first few unicode characters are used for letters and numbers.\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/diquah/modeval/archive/refs/tags/v1.4.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/diquah/modeval/tree/v1.4",
    "keywords": "eval,expression,parser,math,string,modular",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modeval",
    "package_url": "https://pypi.org/project/modeval/",
    "platform": "",
    "project_url": "https://pypi.org/project/modeval/",
    "project_urls": {
      "Download": "https://github.com/diquah/modeval/archive/refs/tags/v1.4.tar.gz",
      "Homepage": "https://github.com/diquah/modeval/tree/v1.4"
    },
    "release_url": "https://pypi.org/project/modeval/1.4/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Pure Python modular math evaluater without using built-in eval() and no dependencies.",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12452736,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a65e39e723ac7f4b775db8606a2a1c1737d24b61f44b646248b577de125f1a61",
        "md5": "f2fb3f22a14b76a059b1ea872cb4598d",
        "sha256": "e36454dfbfe9a34166d8b7677bb8579bc48c53d313b8e554f6fbfadd6e293d76"
      },
      "downloads": -1,
      "filename": "modeval-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "f2fb3f22a14b76a059b1ea872cb4598d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6545,
      "upload_time": "2021-12-26T15:06:00",
      "upload_time_iso_8601": "2021-12-26T15:06:00.382262Z",
      "url": "https://files.pythonhosted.org/packages/a6/5e/39e723ac7f4b775db8606a2a1c1737d24b61f44b646248b577de125f1a61/modeval-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}