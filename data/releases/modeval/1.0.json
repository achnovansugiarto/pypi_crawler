{
  "info": {
    "author": "Ruby Cookinson",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10"
    ],
    "description": "# modeval\r\n\r\n![](https://img.shields.io/badge/license-MIT-blue) ![](https://img.shields.io/badge/python-3.10-yellowgreen)\r\n\r\nModeval (or Modular Eval) is a modular and secure string evaluation library that can be used to create custom parsers or interpreters.\r\n\r\n### Basic Use\r\n\r\n```python\r\nfrom modeval import Parser\r\n\r\n# Create a new parser with the default ruleset.\r\np = Parser()\r\n\r\n# Evalute string. Spaces are automatically removed.\r\nprint( p.eval('1 * (2-3)') )\r\n```\r\n\r\n### Rulesets \r\n\r\nThe Parser class will use a basic mathematical ruleset if no specific ruleset is specified. Use the default ruleset as a guide on how to make custom ones.\r\n\r\n```python\r\nfrom modeval import Parser, Ruleset\r\n\r\nimport operator # (standard library)\r\n\r\ndefault_ruleset = Ruleset()\r\n\r\n# Notice the order of the array follows order of operations.\r\ndefault_ruleset.operators = [\r\n    [('^', operator.pow), ('**', operator.pow)],\r\n    [('*', operator.mul), ('/', operator.truediv)],\r\n    [('+', operator.add), ('-', operator.sub)]\r\n]\r\n\r\np = Parser(ruleset = default_ruleset)\r\n```\r\n\r\nOperator behavior is defined by the function attached to the sign/symbol in the tuple.\r\n\r\nNote that the attached methods must have two inputs *in the correct order* (`L + R` is parsed as `add(L, R)`).\r\n\r\nModeval also supports functions like `sin()`, but they are not included in the default ruleset. To add them, reference the following:\r\n\r\n```python\r\nfrom modeval import Parser, Ruleset\r\n\r\nimport math # (standard library)\r\n\r\ncustom_ruleset = Ruleset()\r\n\r\n# Function order does not matter, so an extra layer of grouping is not needed.\r\ncustom_ruleset.functions = [\r\n    ('sin', math.sin),\r\n    ('cos', math.cos),\r\n    ('tan', math.tan)\r\n]\r\n\r\np = Parser(ruleset = custom_ruleset)\r\n# You can now use \"sin(...)\" in the input string for eval().\r\n```\r\n\r\nSpeaking of `sin()`, what about `pi`? Modeval also supports custom variables. They can be set like this:\r\n```python\r\nfrom modeval import Parser, Ruleset\r\n\r\nimport math # (standard library)\r\n\r\ncustom_ruleset = Ruleset()\r\n\r\ncustom_ruleset.variables = [\r\n    ('pi', math.pi) # Keep in mind this needs to be a value and not a function.\r\n]\r\n\r\np = Parser(ruleset = custom_ruleset)\r\n# Now you can use pi as you would expect (pi*3/2)\r\n```\r\n\r\n### Super Technical Limitations\r\n\r\nIf you're planning on doing something crazy with this library, I'd read this.\r\n\r\nMulti-character operators and functions are assigned unicode characters while being processed so there is a limit of around 4000 variables (and also a very high upper limit of functions). If this is a problem you can increase the offset of the ***function*** unicode character conversion. Decreasing the offset of the operators runs the risk of an operator getting translated into a regular number.\r\n\r\nA possible fix for this is automatically allocating unicode characters based on the number of operators and variables but this is not implemented as of now.\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/rubycookinson/modeval/archive/refs/tags/1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rubycookinson/modeval",
    "keywords": "eval,expression,parser,math,string,modular",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modeval",
    "package_url": "https://pypi.org/project/modeval/",
    "platform": "",
    "project_url": "https://pypi.org/project/modeval/",
    "project_urls": {
      "Download": "https://github.com/rubycookinson/modeval/archive/refs/tags/1.0.tar.gz",
      "Homepage": "https://github.com/rubycookinson/modeval"
    },
    "release_url": "https://pypi.org/project/modeval/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Pure Python math evaluater without using eval() and no dependencies.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12452736,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5ea40bc7004ddadd228bb01d9db95126abd92eb9c3aac018e8cf3041d4e2c30",
        "md5": "f57ff661774165de87f31ef03ff7de84",
        "sha256": "b47b4917e933cdb7b953c0dba7fc3cedb3bede7890ea0e7589974faa29bcec11"
      },
      "downloads": -1,
      "filename": "modeval-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f57ff661774165de87f31ef03ff7de84",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5019,
      "upload_time": "2021-12-23T13:42:08",
      "upload_time_iso_8601": "2021-12-23T13:42:08.854499Z",
      "url": "https://files.pythonhosted.org/packages/c5/ea/40bc7004ddadd228bb01d9db95126abd92eb9c3aac018e8cf3041d4e2c30/modeval-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}