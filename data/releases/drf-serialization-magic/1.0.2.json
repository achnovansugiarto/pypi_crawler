{
  "info": {
    "author": "Thang Dang Minh",
    "author_email": "thangdangdev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# DRF Serialization Magic\n\n**A collection of useful Decorators to DRY up your Django Rest Framework project when working with Serializers**\n\nFull documentation on [read the docs](https://drf-serialization-magic.readthedocs.io/en/latest/)\n\n## Overview\n\nSerialization magic helps you boost your code and reduce duplication\nby using a higher-order function to reduce the number of lines of code\nand maintain consistency in your project.\n\n## Requirements\n\n- Python (>= 3.7)\n- [Django](https://github.com/django/django) (>= 3.0)\n- [Django REST Framework](https://github.com/tomchristie/django-rest-framework) (> 3.11)\n\n## Installation\n\nUsing `pip`:\n\n```bash\n$ pip install drf-serialization-magic\n```\n\n## Basic Usage\n\n**RenderSerialization**\n\n```py\n# model user\nfrom django.contrib.auth.models import AbstractUser\n\nclass User(AbstractUser):\n    pass\n```\n\n```py\n# serializers.py\nfrom rest_framework import serializers\nfrom drf_serialization_magic.models import User\n\nclass UserInformationSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField()\n    username = serializers.CharField()\n\n    class Meta:\n        model = User\n        fields = [\"id\", \"email\", \"username\"]\n```\n\n- With `@api_view` decorator function\n\n```py\nfrom rest_framework.decorators import api_view\nfrom drf_serialization_magic import RenderSerialization\nfrom drf_serialization_magic.serializers import UserInformationSerializer\n\n@api_view(http_method_names=[\"GET\"])\n@RenderSerialization(serializer_cls=UserInformationSerializer)\ndef get_user_func_view(request):\n    return request.user\n```\n\nAPI response\n\n```json\n{\n  \"data\": {\n    \"id\": 1,\n    \"email\": \"userA@example.com\",\n    \"username\": \"userA\"\n  }\n}\n```\n\n- With `GenericViewSet` class\n\n```py\nfrom drf_serialization_magic import RenderSerialization\nfrom rest_framework.viewsets import GenericViewSet\nfrom drf_serialization_magic.models import User\nfrom drf_serialization_magic.serializers import UserInformationSerializer\n# ...\n\n\nclass UserViewSet(GenericViewSet):\n    def get_queryset(self):\n        return User.objects.all()\n\n    @RenderSerialization(serializer_cls=UserInformationSerializer)\n    def list(self, request):\n        return self.get_queryset()\n```\n\nAPI response\n\n```json\n{\n  \"count\": 2,\n  \"next\": null,\n  \"previous\": null,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"email\": \"tom_hiddleston@gmail.com\",\n      \"username\": \"tom_hiddleston\"\n    },\n    {\n      \"id\": 2,\n      \"email\": \"chris_hemsworth@gmail.com\",\n      \"username\": \"chris_hemsworth\"\n    }\n  ]\n}\n```\n\n- With `APIView` class\n\n```py\nfrom rest_framework.views import APIView\nfrom drf_serialization_magic import RenderSerialization\nfrom drf_serialization_magic.serializers import UserInformationSerializer\n\n\nclass UserAPIView(APIView):\n    @RenderSerialization(serializer_cls=UserInformationSerializer)\n    def get(self, request):\n        return request.user\n```\n\n**ValidateSerialization**\n\n- When validating body data(`POST` method)\n\n```py\nfrom rest_framework.views import APIView\nfrom drf_serialization_magic import RenderSerialization, ValidateSerialization\nfrom drf_serialization_magic.serializers import UserInformationSerializer\nfrom drf_serialization_magic.models import User\n\n\n# combination usage\nclass UserAPIView(APIView):\n    @RenderSerialization(serializer_cls=UserInformationSerializer)\n    @ValidateSerialization(serializer_cls=UserInformationSerializer, location=\"body\")\n    def create(self, request, data):\n        # data object is validated\n        # the default will use key `data`, if you want to use another key,\n        # pass argument to_key=\"something\" in ValidateSerialization\n        user = User.objects.create(**data)\n        return user\n```\n\nAPI call\n\n```bash\nPOST /api/users HTTP/1.1\nHost: 127.0.0.1\nContent-Type: application/json\nAccept: */*\n\n\n{\n  \"email\": \"chris.evans\",\n  \"username\": \"chris_evans\"\n}\n\n```\n\nAPI response (422 HTTP status's code)\n\n```json\n{\n  \"errors\": [\n    {\n      \"field\": \"email\",\n      \"detail\": [\"Enter a valid email address.\"]\n    }\n  ],\n  \"message\": \"Validation Error!\"\n}\n```\n\n- When validating query params\n\n```py\nfrom drf_serialization_magic import RenderSerialization, ValidateSerialization\nfrom drf_serialization_magic.serializers import UserInformationSerializer\nfrom drf_serialization_magic.models import User\nfrom rest_framework.viewsets import GenericViewSet\n\n\nclass UserViewSet(GenericViewSet):\n\n    # combination usage\n    @RenderSerialization(serializer_cls=UserInformationSerializer)\n    @ValidateSerialization(serializer_cls=UserInformationSerializer, location=\"query\")\n    def list(self, request, query):\n        # data dict is validated\n        # the default will use key `data`, if you want to use another key,\n        # pass argument to_key=\"something\" in ValidateSerialization\n        user = User.objects.filter(username=query[\"username\"])\n        return user\n```\n\nAPI call\n\n```\nGET /api/users?email=chris_evans HTTP/1.1\n```\n\nAPI response(422 HTTP status's code)\n\n```json\n{\n  \"errors\": [\n    {\n      \"field\": \"email\",\n      \"detail\": [\"Enter a valid email address.\"]\n    }\n  ],\n  \"message\": \"Validation Error!\"\n}\n```\n\nAccept list query params lookup:\n\n```py\nfrom drf_serialization_magic import RenderSerialization, ValidateSerialization\nfrom drf_serialization_magic.serializers import UserListLookUpSerializer, UserInformationSerializer\n    \nfrom drf_serialization_magic.models import User\nfrom rest_framework.viewsets import GenericViewSet\n\n\nclass UserViewSet(GenericViewSet):\n\n    # combination usage\n    @RenderSerialization(serializer_cls=UserInformationSerializer)\n    @ValidateSerialization(serializer_cls=UserListLookUpSerializer, location=\"query\")\n    def list(self, request, query):\n        # query dict is validated\n        # the default will use key `query`, if you want to use another key,\n        # pass argument to_key=\"something\" in ValidateSerialization\n        user = User.objects.filter(username__in=query[\"username\"])\n        return user\n```\n\nAPI request\n\n```\nGET /api/users?username=chris_evans&username=tom_hiddleston HTTP/1.1\n```\n\nAPI response\n\n```json\n{\n  \"count\": 2,\n  \"next\": null,\n  \"previous\": null,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"email\": \"tom_hiddleston@gmail.com\",\n      \"username\": \"tom_hiddleston\"\n    },\n    {\n      \"id\": 3,\n      \"email\": \"chris.evans@gmail.com\",\n      \"username\": \"chris_evans\"\n    }\n  ]\n}\n```\n\n## Testing\n\nTested with:\n\n- Python (>= 3.9)\n- [Django](https://github.com/django/django) (>= 3.1)\n- [Django REST Framework](https://github.com/tomchristie/django-rest-framework) (> 3.11)\n\n\n## Support\n\nIf you need help, don't hesitate to start an [issue][issue].\nFor commercial support, please contact via email:\n[Thang Dang Minh](mailto:thangdangdev@gmail.com?subject=[GitHub]%20Source%20Django%20Serialization%20Magic)\n\n[issue]: https://github.com/tkppro/drf-serialization-magic/issues\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tkppro/drf-serialization-magic",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-serialization-magic",
    "package_url": "https://pypi.org/project/drf-serialization-magic/",
    "platform": null,
    "project_url": "https://pypi.org/project/drf-serialization-magic/",
    "project_urls": {
      "Homepage": "https://github.com/tkppro/drf-serialization-magic"
    },
    "release_url": "https://pypi.org/project/drf-serialization-magic/1.0.2/",
    "requires_dist": [
      "Django (>=3.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Open package for Django Rest Framework to reduce the duplication of code when working with Serializer",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16327352,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e1c146de81376d242cf472c4b9a5dbc714dd4edf0d6884cbaf8c4c14ce15f5a",
        "md5": "31863cc037e9a58a92775046d7224a11",
        "sha256": "c1238af1b3f4ae7152a763ace6b3069d354b175a2bc297ecfc153e18af524bef"
      },
      "downloads": -1,
      "filename": "drf_serialization_magic-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "31863cc037e9a58a92775046d7224a11",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7917,
      "upload_time": "2023-01-02T07:20:26",
      "upload_time_iso_8601": "2023-01-02T07:20:26.169076Z",
      "url": "https://files.pythonhosted.org/packages/6e/1c/146de81376d242cf472c4b9a5dbc714dd4edf0d6884cbaf8c4c14ce15f5a/drf_serialization_magic-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e444b6beee1ef37b424f650c25af5419e1316493f22f75fd02e1cf51f4e7b64",
        "md5": "c3298eb9b825c16d494e2fd15d951694",
        "sha256": "6d1d4bf40be203c9beb1c96feb601d0f0b4d8a664f7516e6986b710ccb6f4831"
      },
      "downloads": -1,
      "filename": "drf-serialization-magic-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c3298eb9b825c16d494e2fd15d951694",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 8300,
      "upload_time": "2023-01-02T07:20:27",
      "upload_time_iso_8601": "2023-01-02T07:20:27.760064Z",
      "url": "https://files.pythonhosted.org/packages/7e/44/4b6beee1ef37b424f650c25af5419e1316493f22f75fd02e1cf51f4e7b64/drf-serialization-magic-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}