{
  "info": {
    "author": "Eliot Berriot",
    "author_email": "contact@eliotberriot.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "=============================\ndjango-dynamic-preferences\n=============================\n\n.. image:: https://badge.fury.io/py/django-dynamic-preferences.png\n    :target: https://badge.fury.io/py/django-dynamic-preferences\n\n.. image:: https://readthedocs.org/projects/django-dynamic-preferences/badge/?version=latest\n    :target: http://django-dynamic-preferences.readthedocs.org/en/latest/\n\n.. image:: https://travis-ci.org/EliotBerriot/django-dynamic-preferences.svg?branch=master\n    :target: https://travis-ci.org/EliotBerriot/django-dynamic-preferences\n\n.. image:: https://travis-ci.org/EliotBerriot/django-dynamic-preferences.svg?branch=develop\n    :target: https://travis-ci.org/EliotBerriot/django-dynamic-preferences\n\n.. image:: https://img.shields.io/codecov/c/github/EliotBerriot/django-dynamic-preferences/master.svg\n    :target: https://codecov.io/github/EliotBerriot/django-dynamic-preferences?branch=master\n\n.. warning::\n\n    There is a critical bug in version 1.2 that can result in dataloss. Please upgrade to 1.3 as\n    soon as possible and do not use 1.2 in production. See `#81 <https://github.com/EliotBerriot/django-dynamic-preferences/pull/81>`_ for more details.\n\nDynamic-preferences is a Django app, BSD-licensed, designed to help you manage your project settings. While most of the time,\na `settings.py` file is sufficient, there are some situations where you need something more flexible such as:\n\n* per-user settings (or, generally speaking, per instance settings)\n* settings change without server restart\n\nFor per-instance settings, you could actually store them in some kind of profile model. However, it means that every time you want to add a new setting, you need to add a new column to the profile DB table. Not very efficient.\n\nDynamic-preferences allow you to register settings (a.k.a. preferences) in a declarative way. Preferences values are serialized before storage in database, and automatically deserialized when you need them.\n\nWith dynamic-preferences, you can update settings on the fly, through django's admin or custom forms, without restarting your application.\n\nThe project is tested and work under Python 2.7 and 3.4, 3.5 and 3.6, with django >=1.8.\n\nFeatures\n--------\n\n* Simple to setup\n* Admin integration\n* Forms integration\n* Bundled with global and per-user preferences\n* Can be extended to other models if need (e.g. per-site preferences)\n* Integrates with django caching mechanisms to improve performance\n\nDocumentation\n-------------\n\nThe full documentation is at https://django-dynamic-preferences.readthedocs.org.\n\nContributing\n------------\n\nSee http://django-dynamic-preferences.readthedocs.org/en/latest/contributing.html\n\n\n\n\nChangelog\n=========\n\n1.5 (16-12-2017)\n******************\n\nFrom now on, django-dynamic-preferences should fully support Django 2.0.\nThis release should be fully backward-compatible with previous versions\nof the module.\n\nYou will still have to upgrade your own code to work with Django 2, like\nadding on_delete option to your ForeignKey fields.\n\n* removed typo in API code that could cause a crash (#127)\n* added on_dete=models.CASCADE to migrations for Django 2.0 compatibility (#129 and #131)\n* Duration, date and datetime serialization issue in rest framework (#115)\n\nContributors:\n\n* @rvignesh89\n* @zamai\n\n\n1.4.2 (06-11-2017)\n******************\n\n* Fix #121: reverted Section import missing from dynamic_preferences.types\n\nContributors:\n\n* @okolimar\n* @swalladge\n\n\n1.4.1 (03-11-2017)\n******************\n\n* Section verbose name and filter in django admin (#114)\n* Fixed wrong import in Quickstart documentation (#113)\n* Fix #111: use path as returned by storage save method (#112)\n\nContributors:\n\n* @okolimar\n* @swalladge\n\n\n1.4 (15-10-2017)\n******************\n\n* Fix #8: we now have date, datetime and duration preferences\n* Fix #108: Dropped tests and guaranteed compatibility with django 1.8 and 1.9, though\n* Fix #103: bugged filtering of user preferences via REST API\n* Fix #78: removed ``create_default_per_instance_preferences``.\n  This is *not* considered a backward-incompatible change as this method did nothing at all\n  and was not documented\n\nContributors:\n\n* @rvignesh89\n* @haroon-sheikh\n\n\n1.3.3 (25-09-2017)\n******************\n\n* Fix #97 where the API serializer could crash during preference update because of incomplete parsing\n\nContributors:\n\n* @rvignesh89\n\n1.3.2 (11-09-2017)\n******************\n\n* Should fix Python 3.3 complaints in CI, also add tests on Python 3.6 (#94)\n* Fixed #75: Fix checkpreferences command that was not deleting obsolete preferences anymore (#93)\n* Retrieve existing preferences in bulk (#92)\n* Cache values when queried in all() (#91)\n\nContributors:\n\n* @czlee\n\n1.3.1 (30-07-2017)\n******************\n\n- Fix #84: serialization error for preferences with None value (@swalladge)\n- More documentation about preferences form fields\n\n1.3 (03-07-2017)\n*******************\n\nThis release fix a critical bug in 1.2 that can result in data loss.\n\nPlease upgrade to 1.3 as soon as possible and never use 1.2 in production. See `#81 <https://github.com/EliotBerriot/django-dynamic-preferences/pull/81>`_ for more details.\n\n1.2 (06-07-2017)\n*******************\n\n.. warning::\n\n    There is a critical bug in this that can result in dataloss. Please upgrade to 1.3 as\n    soon as possible and never use 1.2 in production. See `#81 <https://github.com/EliotBerriot/django-dynamic-preferences/pull/81>`_ for more details.\n\n- important performance improvements (less database and cache queries)\n- A brand new `REST API <https://django-dynamic-preferences.readthedocs.io/en/latest/rest_api.html>`_ based on Django REST Framework, to interact with preferences (this is an optionnal, opt-in feature)\n- A new `FilePreference <https://django-dynamic-preferences.readthedocs.io/en/latest/preference_types.html#dynamic_preferences.types.FilePreference>`_ [original work by @macolo]\n\n1.1.1 (11-05-2017)\n*******************\n\nBugfix release to restore disabled user preferences admin (#77).\n\n1.1 (06-03-2017)\n*****************\n\n* Fixed #49 and #71 by passing full section objects in templates (and not just the section identifiers). This means it's easier to write template that use sections, for example if you want have i18n in your project and want to display the translated section's name. URL reversing for sections is also more reliable in templates. If you subclassed `PreferenceRegistry`  to implement your own preference class and use the built-in templates, you need to add a ``section_url_namespace`` attribute to your registry class to benefit from the new URL reversing.\n\n[Major release] 1.0 (21-02-2017)\n***********************************\n\nDynamic-preferences was release more than two years ago, and since then, more than 20 feature and bugfixe releases have been published.\nBut even after two years the project was still advertised as in Alpha-state on PyPi, and  the tags used for the releases, were implicitly saying that the project was not production-ready.\n\nToday, we're changing that by releasing the first major version of dynamic-preferences, the ``1.0`` release. We will stick to semantic versioning and keep backward compatibility until the next major version.\n\nDynamic-preferences is already used in various production applications .The implemented features are stable, working, and address many of the uses cases the project was designed for:\n\n- painless and efficient global configuration for your project\n- painless and efficient per-user (or any other model) settings\n- ease-of-use, both for end-user (via the admin interface) and developpers (settings are easy to create and to manage)\n- more than decent performance, thanks to caching\n\nBy making a major release, we want to show that the project is trustworthy and, in the end, to attract new users and develop the community around it. Development will goes on as before, with an increased focus on stability and backward compatibility.\n\n**Because of the major version switch, some dirt was removed from the code, and manual intervention is required for the upgrade. Please have a for the detailed instructions:** https://django-dynamic-preferences.readthedocs.io/en/latest/upgrade.html\n\nThanks to all the people who contributed over the years by reporting bugs, asking for new features, working on the documentation or on implementing solutions!\n\n0.8.4 (10-01-2017)\n******************\n\nThis version is an emergency release to restore backward compatibility that was broken in 0.8.3, as\ndescribed in issue #67. Please upgrade as soon as possible if you use 0.8.3.\n\nSpecial thanks to [czlee](https://github.com/czlee) for reporting this!\n\n\n0.8.3 (06-01-2017) (**DO NOT USE: BACKWARD INCOMPATIBLE**)\n**********************************************************\n\n**This release introduced by mistake a backward incompatible change (commit 723f2e).**\n**Please upgrade to 0.8.4 or higher to restore backward compatibility with earlier versions**\n\nThis is a small bugfix release. Happy new year everyone!\n\n* Now fetch model default value using the get_default method\n* Fixed #50: now use real apps path for autodiscovering, should fix some strange error when using AppConfig and explicit AppConfig path in INSTALLED_APPS\n* Fix #63: Added initial doc to explain how to bind preferences to arbitrary models (#65)\n* Added test to ensure form submission works when no section filter is applied, see #53\n* Example project now works with latest django versions\n* Added missing max_length on example model\n* Fixed a few typos in example project\n\n\n0.8.2 (23-08-2016)\n******************\n\n* Added django 1.10 compatibility [ricard33]\n* Fixed tests for django 1.7\n* Fix issue #57: PreferenceManager.get() returns value [ricard33]\n* Fixed missing coma in boolean serializer [czlee]\n* Added some documentations and example [JetUni]\n\n0.8.1 (25-02-2016)\n******************\n\n* Fixed still inconsistend preference order in form builder (#44) [czlee]\n\n0.8 (23-02-2016)\n****************\n\n**Warning**: there is a backward incompatbile change in this release. To address #45 and #46, an\nimport statement was removed from __init__.py. Please refer to the documentation for upgrade instructions:\nhttp://django-dynamic-preferences.readthedocs.org/en/stable/upgrade.html\n\n0.7.2 (23-02-2016)\n******************\n\n* Fix #45: importerrror on pip install, and removed useless import\n* Replaced built-in registries by persisting_theory, this will maintain a consistent order for preferences, see #44\n\n0.7.1 (12-02-2016)\n******************\n\n* Removed useless sections and fixed typos/structure in documentation, fix #39\n* Added setting to disable user preferences admin, see #33\n* Added setting to disable preference caching, fix #7\n* Added validation agains sections and preferences names, fix #28, it could raise backward incompatible behaviour, since invalid names will stop execution by default\n\n0.7 (12-01-2016)\n****************\n\n* Added by_name and get_by_name methods on manager to retrieve preferences without using sections, fix #34\n* Added float preference, fix #31 [philipbelesky]\n* Made name, section read-only in django admin, fix #36 [what-digital]\n* Fixed typos in documentation [philipbelesky]\n\n0.6.6 (23-12-2015)\n******************\n\n* Fixed #23 (again bis repetita): Fixed second migration to create section and name columns with correct length\n\n0.6.5 (23-12-2015)\n******************\n\n* Fixed #23 (again): Fixed initial migration to create section and name columns with correct length\n\n0.6.4 (23-12-2015)\n******************\n\n* Fixed #23: Added migration for shorter names and sections\n\n0.6.3 (09-12-2015)\n******************\n\n* Fixed #27: AttributeError: 'unicode' object has no attribute 'name' in preference `__repr__` [pomerama]\n\n0.6.2 (24-11-2015)\n******************\n\n* Added support for django 1.9, [yurtaev]\n* Better travic CI conf (which run tests against two version of Python and three versions of django up to 1.9), fix #22 [yurtaev]\n\n0.6.1 (6-11-2015)\n*****************\n\n* Added decimal field and serializer\n\n0.6 (24-10-2015)\n****************\n\n* Fixed #10 : added model choice preference\n* Fixed #19 : Sections are now plain python objects, the string notation is now deprecated\n\n0.5.4 (06-09-2015)\n******************\n\n* Merged PR #16 that fix a typo in the code\n\n0.5.3 (24-08-2015)\n******************\n\n* Added switch for list_editable in admin and warning in documentation, fix #14\n* Now use Textarea for LongStringPreference, fix #15\n\n0.5.2 (22-07-2015)\n******************\n\n* Fixed models not loaded error\n\n0.5.1 (17-07-2015)\n******************\n\n* Fixed pip install (#3), thanks @willseward\n* It's now easier to override preference form field attributes on a preference (please refer to `Preferences attributes <http://django-dynamic-preferences.readthedocs.org/en/latest/quickstart.html#preferences-attributes>`_  for more information)\n* Cleaner serializer api\n\n0.5 (12-07-2015)\n****************\n\nThis release may involves some specific upgrade steps, please refer to the ``Upgrade`` section of the documentation.\n\n0.5 (12-07-2015)\n****************\n\nThis release may involves some specific upgrade steps, please refer to the ``Upgrade`` section of the documentation.\n\n* Migration to CharField for section and name fields. This fix MySQL compatibility issue #2\n* Updated example project to the 0.4 API\n\n0.4.2 (05-07-2015)\n******************\n\n* Minor changes to README / docs\n\n0.4.1 (05-07-2015)\n******************\n\n* The cookiecutter part was not fully merged\n\n0.4 (05-07-2015)\n****************\n\n* Implemented cache to avoid database queries when possible, which should result in huge performance improvements\n* Whole API cleanup, we now use dict-like objects to get preferences values, which simplifies the code a lot (Thanks to Ryan Anguiano)\n* Migrated the whole app to cookiecutter-djangopackage layout\n* Docs update to reflect the new API\n\n0.3.1 (10-06-2015)\n******************\n\n* Improved test setup\n* More precise data in setup.py classifiers\n\n0.2.4 (14-10-2014)\n******************\n\n* Added Python 3.4 compatibility\n\n0.2.3 (22-08-2014)\n******************\n\n* Added LongStringPreference\n\n0.2.2 (21-08-2014)\n******************\n\n* Removed view that added global and user preferences to context. They are now replaced by template context processors\n\n0.2.1 (09-07-2014)\n******************\n\n* Switched from GPLv3 to BSD license\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EliotBerriot/django-dynamic-preferences",
    "keywords": "django-dynamic-preferences",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-dynamic-preferences",
    "package_url": "https://pypi.org/project/django-dynamic-preferences/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-dynamic-preferences/",
    "project_urls": {
      "Homepage": "https://github.com/EliotBerriot/django-dynamic-preferences"
    },
    "release_url": "https://pypi.org/project/django-dynamic-preferences/1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Dynamic global and instance settings for your django project",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14861687,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3245653a5d0a46f949c431926b75e434ff9720972ba3fff131e1971cb63e8bf1",
        "md5": "b2cbb5f0afa3f1d386673b9438d2b316",
        "sha256": "1eecb6e7fe688865f030ddbbf60952af4573417f2baa35d6a864477f8865d8ca"
      },
      "downloads": -1,
      "filename": "django_dynamic_preferences-1.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b2cbb5f0afa3f1d386673b9438d2b316",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 46531,
      "upload_time": "2017-12-16T13:15:14",
      "upload_time_iso_8601": "2017-12-16T13:15:14.047010Z",
      "url": "https://files.pythonhosted.org/packages/32/45/653a5d0a46f949c431926b75e434ff9720972ba3fff131e1971cb63e8bf1/django_dynamic_preferences-1.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ede8f35c1ded9dca8261a02fd7e5757099e947890386d40e918510dbfda28bfb",
        "md5": "cc8e0a8e6c9197a122b1b7ee2048f273",
        "sha256": "f1dc2a55e5e6a8fa5dd32326b3bb1505397eb724f29f8d66630201cda9c51ba7"
      },
      "downloads": -1,
      "filename": "django-dynamic-preferences-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "cc8e0a8e6c9197a122b1b7ee2048f273",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31385,
      "upload_time": "2017-12-16T13:15:11",
      "upload_time_iso_8601": "2017-12-16T13:15:11.666000Z",
      "url": "https://files.pythonhosted.org/packages/ed/e8/f35c1ded9dca8261a02fd7e5757099e947890386d40e918510dbfda28bfb/django-dynamic-preferences-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}