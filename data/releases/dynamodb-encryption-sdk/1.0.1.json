{
  "info": {
    "author": "Amazon Web Services",
    "author_email": "aws-cryptools@amazon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Security",
      "Topic :: Security :: Cryptography"
    ],
    "description": "############################################\nAmazon DynamoDB Encryption Client for Python\n############################################\n\nThe `Amazon DynamoDB Encryption Client for Python`_ provides client-side encryption of `Amazon\nDynamoDB`_ items to help you to protect your table data before you send it to DynamoDB. It\nprovides an implementation of the `Amazon DynamoDB Encryption Client`_ that is fully compatible\nwith the `Amazon DynamoDB Encryption Client for Java`_.\n\nYou can find the latest Python documentation at `Read the Docs`_ and you can find the latest\nfull documents in our `primary documents`_.\n\nYou can find our source on `GitHub`_.\n\n***************\nGetting Started\n***************\n\nRequired Prerequisites\n======================\n\n* Python 2.7 or 3.4+\n\nInstallation\n============\n\n.. note::\n\n   If you have not already installed `cryptography`_, you might need to install additional\n   prerequisites as detailed in the `cryptography installation guide`_ for your operating\n   system.\n\n   .. code::\n\n       $ pip install dynamodb-encryption-sdk\n\nConcepts\n========\n\nFor a detailed description of the concepts that are important to understand when using this\nclient, please review our `Concepts Guide`_.\n\n\n*****\nUsage\n*****\n\nHelper Clients\n==============\n\nWe provide helper clients that look and feel like the low level client (`EncryptedClient`_),\nservice resource (`EncryptedResource`_), and table resource (`EncryptedTable`_) available\nfrom the `boto3`_ library. For most uses, once configured, these clients can be used exactly\nas you would a standard client from `boto3`_, and your items will be transparently encrypted\non write and decrypted on read.\n\nWhat can't I do with the helper clients?\n----------------------------------------\n\nFor most uses, the helper clients (once configured) can be used as drop-in replacements for\nthe `boto3`_ clients. However, there are a couple cases where this is not the case.\n\nUpdate Item\n^^^^^^^^^^^\n\nBecause we can't know that a partial update you might be making to an item covers all\nof the signed attributes in your item, we do not allow ``update_item`` on the helper clients.\n\nThis is because if you update only some of the signed attributes, then next time you try\nto read that item the signature validation will fail.\n\nAttribute Filtering\n^^^^^^^^^^^^^^^^^^^\n\nBecause we can't know what attributes in an item are signed, the helper clients do not allow\nany attribute filtering.\n\nFor ``get_item``, ``batch_get_item``, and ``scan``, this includes the use of ``AttributesToGet``\nand ``ProjectionExpression``.\n\nFor ``scan``, this also includes the use of ``Select`` values ``SPECIFIC_ATTRIBUTES`` and\n``ALL_PROJECTED_ATTRIBUTES``.\n\nThis is because if you do not retrieve all signed attributes, the signature validation will\nfail.\n\nItem Encryptor\n==============\n\nThe helper clients provide a familiar interface but the actual item encryption and decryption\nis handled by a low-level item encryptor. You usually will not need to interact with these\nlow-level functions, but for certain advanced use cases it can be useful.\n\nIf you do choose to use the item encryptor functions directly, you will need to provide a\n`CryptoConfig`_ for each call.\n\n.. code-block:: python\n\n   >>> from dynamodb_encryption_sdk.encrypted.item import decrypt_python_item, encrypt_python_item\n   >>> plaintext_item = {\n   ...     'some': 'data',\n   ...     'more': 5\n   ... }\n   >>> encrypted_item = encrypt_python_item(\n   ...     item=plaintext_item,\n   ...     crypto_config=my_crypto_config\n   ... )\n   >>> decrypted_item = decrypt_python_item(\n   ...     item=encrypted_item,\n   ...     crypto_config=my_crypto_config\n   ... )\n\n\nWhen should I use the item encryptor?\n-------------------------------------\n\nOne example of a use case where you might want to use the item encryptor directly is when\nprocessing items in a `DynamoDB Stream`_. Since you receive the items data directly, and\nin DynamoDB JSON format, you can use the `decrypt_dynamodb_item`_ function to decrypt the\nitem in the stream. We also provide helper `transformation functions`_\n\nAdvanced Use\n============\n\nBy default, the helper clients use your attribute actions and cryptographic materials provider\nto build the `CryptoConfig`_ that is provided to the item encryptor. For some advanced use\ncases, you might want to provide a custom `CryptoConfig`_ for specific operations.\n\nAll data plane operations (get item, put item, etc) on helper clients accept a ``crypto_config``\nparameter in addition to all of the parameters that the underlying `boto3`_ client accepts.\n\nIf this parameter is supplied, that `CryptoConfig`_ will be used for that operation instead\nof the one that the client would normally construct for you.\n\n.. code-block:: python\n\n    >>> from dynamodb_encryption_sdk.encrypted.table import EncryptedTable\n    >>> encrypted_table = EncryptedTable(\n    ...     table=table,\n    ...     materials_provider=my_crypto_materials_provider\n    ... )\n    >>> encrypted_table.put_item(\n    ...     Item=my_standard_item\n    ... )  # this uses the crypto config built by the helper\n    >>> encrypted_table.put_item(\n    ...     Item=my_special_item,\n    ...     crypto_config=my_special_crypto_config\n    ... )  # this uses my_special_crypto_config\n\n\n.. _Amazon DynamoDB Encryption Client: https://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/\n.. _Amazon DynamoDB: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html\n.. _primary documents: https://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/\n.. _Concepts Guide: https://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/concepts.html\n.. _Amazon DynamoDB Encryption Client for Java: https://github.com/awslabs/aws-dynamodb-encryption-java/\n.. _Amazon DynamoDB Encryption Client for Python: https://github.com/awslabs/aws-dynamodb-encryption-python/\n.. _DynamoDB Stream: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\n.. _Read the Docs: http://aws-dynamodb-encryption-python.readthedocs.io/en/latest/\n.. _GitHub: https://github.com/awslabs/aws-dynamodb-encryption-python/\n.. _cryptography: https://cryptography.io/en/latest/\n.. _cryptography installation guide: https://cryptography.io/en/latest/installation/\n.. _boto3: https://boto3.readthedocs.io/en/latest/\n.. _EncryptedClient: lib/encrypted/client.html\n.. _EncryptedResource: lib/encrypted/resource.html\n.. _EncryptedTable: lib/encrypted/table.html\n.. _CryptoConfig: lib/encrypted/config.html\n.. _decrypt_dynamodb_item: lib/encrypted/item.html#dynamodb_encryption_sdk.encrypted.item.decrypt_dynamodb_item\n.. _transformation functions: lib/tools/transform.html\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/awslabs/aws-dynamodb-encryption-python",
    "keywords": "dynamodb-encryption-sdk aws kms encryption dynamodb",
    "license": "Apache License 2.0",
    "maintainer": "Amazon Web Services",
    "maintainer_email": "",
    "name": "dynamodb-encryption-sdk",
    "package_url": "https://pypi.org/project/dynamodb-encryption-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynamodb-encryption-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/awslabs/aws-dynamodb-encryption-python"
    },
    "release_url": "https://pypi.org/project/dynamodb-encryption-sdk/1.0.1/",
    "requires_dist": [
      "boto3 (>=1.4.4)",
      "cryptography (>=1.8.1)",
      "attrs (>=17.4.0)",
      "enum34; python_version < \"3.4\""
    ],
    "requires_python": "",
    "summary": "DynamoDB Encryption Client for Python",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16493139,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a64c465b1aa9e5f5155247f9be3fd0324da45179bb2839fe11658a760e62d19a",
        "md5": "955963d71ae9291ed818852e05cc62c0",
        "sha256": "42365574110e11f759a6946e39a256634706a4b9d38a10828975cfd7ee7d06cf"
      },
      "downloads": -1,
      "filename": "dynamodb_encryption_sdk-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "955963d71ae9291ed818852e05cc62c0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 102069,
      "upload_time": "2018-05-02T23:58:12",
      "upload_time_iso_8601": "2018-05-02T23:58:12.157684Z",
      "url": "https://files.pythonhosted.org/packages/a6/4c/465b1aa9e5f5155247f9be3fd0324da45179bb2839fe11658a760e62d19a/dynamodb_encryption_sdk-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "188e4f9b6b1ab7c203097e5e10b7ebb52480647bf2b0e0e9e6e4fb07ee355cbf",
        "md5": "0da01e76090659c978a8bd64a4c03aa5",
        "sha256": "fc21fb43f6072a8a215cecc8fd9c88a09d2a49cd61da9852c3157c75845b5800"
      },
      "downloads": -1,
      "filename": "dynamodb-encryption-sdk-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0da01e76090659c978a8bd64a4c03aa5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 54995,
      "upload_time": "2018-05-02T23:58:13",
      "upload_time_iso_8601": "2018-05-02T23:58:13.617407Z",
      "url": "https://files.pythonhosted.org/packages/18/8e/4f9b6b1ab7c203097e5e10b7ebb52480647bf2b0e0e9e6e4fb07ee355cbf/dynamodb-encryption-sdk-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [],
      "details": "### Impact\nThis advisory concerns users of MostRecentProvider in the DynamoDB Encryption Client with a key provider like AWS Key Management Service that allows for permissions on keys to be modified.\n\nWhen key usage permissions were changed at the key provider, time-based key reauthorization logic in MostRecentProvider did not reauthorize the use of the key. This created the potential for keys to be used in the DynamoDB Encryption Client after permissions to do so were revoked at the key provider.\n\n### Patches\nFixed as of 1.3.0.  We recommend users to modify their code and adopt `CachingMostRecentProvider`.\n\n\n### Workarounds\nUsers who cannot upgrade to use the `CachingMostRecentProvider` can call `clear()` on the cache to manually flush all of its contents. Next use of the key will force a re-validation to occur with the key provider.",
      "fixed_in": [
        "1.3.0"
      ],
      "id": "GHSA-4ph2-8337-hm62",
      "link": "https://osv.dev/vulnerability/GHSA-4ph2-8337-hm62",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}