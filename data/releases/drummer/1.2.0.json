{
  "info": {
    "author": "Andrea Capitanelli",
    "author_email": "andrea@capitanelli.gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: System"
    ],
    "description": "\n# Drummer\n\nDrummer is a python multi-process and multi-task job scheduler for Linux, best served as a systemd service. You can create jobs with your own tasks, and you can decide the execution flow depending on the outcome of each task.\n\nFor instance: if task A succeeds, then execute task B; if it fails, then execute task C. And, no matter the result of A, always do execute also task D.\n\nDrummer is heavily insipired by [Comodojo Extender](https://github.com/comodojo): I wish therefore to acknowledge its author.\n\n\n### Quick start\n\nInstallation is quick and easy.\n\n> \\> pip install drummer\n\nSpecify a folder where to init Drummer environment and, optionally, a filename for the internal database.\n\n> \\> drummer-admin init BASE_FOLDER [--database database_file]\n\nDuring the initialization, Drummer will ask whether it should create also the related Linux systemd service file (this is the recommended choice). It will ask also which python executable to use, should you use a Virtualenv installation.\n\nNow you are *almost* ready to start.\n\n\n### How Drummer works\n\nDrummer machinery is composed of three processes:\n1. a scheduler process, built on top of [sched module](https://docs.python.org/3/library/sched.html \"Python Event Scheduler\")\n2. a socket listener, to handle requests and responses with the Drummer cli\n3. a main process, which puts together all pieces and takes care of the overall behaviour\n\nIn order to ensure the multi-tasking capability, each task is run by a separate process.\n\nWhen you create a new environment for Drummer, you will notice several files and folders being created:\n- the **config** folder, for configuration and task file and, if you chose so, the systemd file;\n- a **database** folder, which contains the internal sqlite database with schedules;\n- a **tasks** folder, for placing your tasks;\n- the CLI launcher, **drummer-cli.py**.\n\n\n### Configuration\n\nConfiguration is stored in file *drummer-config.yml*.\n\nAmong all, you can specify where to store the log file and the database, which folder to use for your tasks (by default, Drummer looks for them inside the **tasks** folder), how many task can be runned at the same time, and so on.\n\n\n### Tasks\n\nTo be well formed, user-defined tasks should respect few basic requirements, i.e. they:\n- extend the **Task** class provided by **drummer** module\n- implement a **run** method as execution entry point\n- use the **Response** class, along with a valid **StatusCode**, for handling the task outcome (valid **StatusCode** attributes are: \"STATUS_OK\", \"STATUS_WARNING\", \"STATUS_ERROR\")\n\nA fully working example:\n\n```\nfrom drummer import Task\nfrom drummer.foundation import Response, StatusCode\n\nclass MyTask(Task):\n\n    def run(self, params):\n\n        # the Drummer logger, built on top of python logging facility\n        logger = self.logger\n\n        logger.info('Starting MyTask')\n\n        response = Response()\n\n        try:\n\n            with open('mytask.txt', 'a') as f:\n                f.write('Hello world!')\n\n            logger.info('File has been updated')\n\n            response.set_status(StatusCode.STATUS_OK)\n            response.set_data({'result': 'Task ended OK'})\n\n        except:\n\n            response.set_status(StatusCode.STATUS_ERROR)\n            response.set_data({'result': 'Task had an error'})\n\n        finally:\n\n            return response\n```\n\nThe *run* method takes a dictionary with optional task arguments. It is empty if no arguments are specified.\n\nTo complete the registration process, you have to declare the task, along with its path, inside *drummer-tasks.yml*. Drummer must know the path of python file to load (expressed as relative path with respect to base folder), and the name of the class which exposed the *run* method.\n\nYou can automatically update the task list by issuing the **task:update** command. Drummer will parse all valid tasks found inside the *taskdir* folder.\n\nOf course you can also *__init__* your task class; in that case, you must take care of configuration and logger, as in the following:\n\n```\nfrom drummer import Task\n\nclass MyTask(Task):\n\n    def __init__(self, config, logger):\n\n        # init Task class\n        super().__init__(config, logger)\n\n        # your init code here\n        # ...\n\n```\n\n### cli\n\nYou can start Drummer in two ways: as a systemd service (via *systemctl* command) or with cli, by invoking the **service:start** command.\n\n> \\> python drummer-cli.py service:start\n\nThe cli provides commands to:\n- list all jobs and get info on a single job\n- add, remove, enable, disable, or immediately execute a schedule\n- list and execute single tasks\n- automatically register valid tasks\n- import and export the schedulation table\n\nFor details see:\n\n> \\> python drummer-cli.py -h\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/acapitanelli/drummer",
    "keywords": "scheduler extender multi-process multi-tasking",
    "license": "MIT",
    "maintainer": "Andrea Capitanelli",
    "maintainer_email": "andrea@capitanelli.gmail.com",
    "name": "drummer",
    "package_url": "https://pypi.org/project/drummer/",
    "platform": "",
    "project_url": "https://pypi.org/project/drummer/",
    "project_urls": {
      "Homepage": "https://github.com/acapitanelli/drummer"
    },
    "release_url": "https://pypi.org/project/drummer/1.2.0/",
    "requires_dist": [
      "clips",
      "croniter",
      "inquirer",
      "PTable",
      "PyYAML",
      "SQLAlchemy"
    ],
    "requires_python": ">=3.6.0",
    "summary": "A multi-process, multi-tasking job scheduler.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6040323,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e79e496c1f40595c3e417439d7ecf56fd01b69f23aeeff7234540b1fc23927d1",
        "md5": "3da7337f773c2984e5dffb01ce1df780",
        "sha256": "2ede60314ca312e329079edbc752fce6604d89905bfc3ca463c5eeee41aaa7e6"
      },
      "downloads": -1,
      "filename": "drummer-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3da7337f773c2984e5dffb01ce1df780",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 35999,
      "upload_time": "2019-09-22T15:44:33",
      "upload_time_iso_8601": "2019-09-22T15:44:33.735501Z",
      "url": "https://files.pythonhosted.org/packages/e7/9e/496c1f40595c3e417439d7ecf56fd01b69f23aeeff7234540b1fc23927d1/drummer-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6804e08e4941b90b8e79ac4d97a1a9ad2798a5adf761541913220c4db2fade74",
        "md5": "5963f15bbd745e266f0ef4d222e4f695",
        "sha256": "6d93b28bbd38f795cc806580267f0100aabf0160230c841d5a0ea12d798f6d3f"
      },
      "downloads": -1,
      "filename": "drummer-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5963f15bbd745e266f0ef4d222e4f695",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 21760,
      "upload_time": "2019-09-22T15:44:35",
      "upload_time_iso_8601": "2019-09-22T15:44:35.502782Z",
      "url": "https://files.pythonhosted.org/packages/68/04/e08e4941b90b8e79ac4d97a1a9ad2798a5adf761541913220c4db2fade74/drummer-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}