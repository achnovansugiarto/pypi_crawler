{
  "info": {
    "author": "Yurzs",
    "author_email": "yurzs+mdocument@yurzs.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "MDocument\n=========\n\n|pipeline status| |coverage report| |pypi link|\n\n.. |pipeline status| image:: https://git.yurzs.dev/yurzs/mdocument/badges/master/pipeline.svg\n   :target: https://git.yurzs.dev/yurzs/mdocument/-/commits/master\n\n.. |coverage report| image:: https://git.yurzs.dev/yurzs/mdocument/badges/master/coverage.svg\n   :target: https://git.yurzs.dev/yurzs/mdocument/-/commits/master\n\n.. |pypi link| image:: https://badge.fury.io/py/mdocument.svg\n   :target: https://pypi.org/project/mdocument\n\nSimple DRM for async mongo motor client\n\nUsage\n-----\n\n.. code-block:: python\n\n    import asyncio\n\n    from mdocument import Document\n\n    import motor.motor_asyncio\n\n    client = motor.motor_asyncio.AsyncIOMotorClient()\n\n    class Comment(Document):\n        collection = \"comments\"\n        database = \"mdocument\"\n        client = client\n\n\n    class Video(Document):\n        collection = \"videos\"\n        database = \"mdocument\"\n        client = client\n\n        @Document.related(self_field=\"_id\", other_field=\"video\")\n        def comments(self):\n            pass\n\n    async def main():\n        video = await Video.create(\n            title=\"Test\",\n        )\n\n        comment1 = await Comment.create(\n            video=video._id,\n            message=\"First!\",\n        )\n\n        comment2 = await Comment.create(\n            video=video._id,\n            message=\"Second!\"\n        )\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\nNow we can easily access our comments using our related documents\n\n.. code-block:: python\n\n    print(await video.comments)\n    [\n        Comment(_id=5e7533d55eb6a8c6d24d3cc7, video=5e7533d55eb6a8c6d24d3cc6, message=First!),\n        Comment(_id=5e7533d55eb6a8c6d24d3cc8, video=5e7533d55eb6a8c6d24d3cc6, message=Second!)\n    ]\n\nDocument methods\n================\n\nHere is a list of Document basic methods\n\n@related\n--------\n\nDecorator for defining related documents. Made for easily managing deletion of related documents.\n\n.. code-block:: python\n\n    def related(self_path, other_path, multiple=True, parent=True):\n\nExample:\n\n.. code-block:: python\n\n    from mdocument import Document, DeleteDocument\n\n    import motor.motor_asyncio\n\n    client = motor.motor_asyncio.AsyncIOMotorClient()\n\n    class Artist(Document):\n        collection = \"artists\"\n        database = \"mdocument\"\n        client = client\n\n        @Document.related(\"Artist._id\", \"Album._id\")\n        def albums(self):\n            pass\n\n    class Album(Document):\n        collection = \"albums\"\n        database = \"mdocument\"\n        client = client\n\n        @Document.related(\"Album._id\", \"Song._id\")\n        def songs(self):\n            pass\n\n\n    class Song(Document):\n        collection = \"songs\"\n        database = \"abc\"\n        client = client\n\nAs we set our relations. Now we have next actions:\nAlbum deleted -> all songs related to this album are deleted\nAuthor deleted -> all albums related to author are deleted -> each song related to deleted albums deleted\n\n.create\n-------\n.. code-block:: python\n\n    @classmethod\n    async def create(cls, **kwargs):\n\nIf you want to create a new document you can do it easily with .create method.\nExample:\n\n.. code-block:: python\n\n    import asyncio\n\n    from mdocument import Document\n\n    import motor.motor_asyncio\n\n    client = motor.motor_asyncio.AsyncIOMotorClient()\n\n    class Message(Document):\n        collection = \"messages\"\n        database = \"mdocument\"\n        client = client\n\n\n    loop.run_until_complete(\n        Message.create(from_user=\"admin\", text=\"Test message!\")\n    )\n\nThis will create document in database:\n\n.. code-block:: python\n\n    {\n        '_id': ObjectId('5e75373e5eb6a8c6d14d3ccd'),\n        'from_user': 'admin',\n        'text': \"Test message!\"\n    }\n\n.push_update\n------------\n\nUpdates document and all @related fields.\n\n.. code-block:: python\n\n    await Message.push_update()\n\n.delete\n-------\n\nDeletion of document from database. Based on your set @related rules all related documents will be modified too.\n\n.. code-block:: python\n\n    message = await Message.one(from_user=\"admin\")\n\n    await message.delete()\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.yurzs.dev/yurzs/MDocument",
    "keywords": "mongo,motor,Document,ORM",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdocument",
    "package_url": "https://pypi.org/project/mdocument/",
    "platform": "",
    "project_url": "https://pypi.org/project/mdocument/",
    "project_urls": {
      "Homepage": "https://git.yurzs.dev/yurzs/MDocument"
    },
    "release_url": "https://pypi.org/project/mdocument/3.0.1590436924/",
    "requires_dist": [
      "motor"
    ],
    "requires_python": "",
    "summary": "Simple DRM for motor client",
    "version": "3.0.1590436924",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13162189,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fcca797f0498ef9661a6bd21b3324763d075a4856c65f9fc3db3e03e4d2f20eb",
        "md5": "4313cb912a25e43d5151c398dfe1ce33",
        "sha256": "61ead6feceaccf1cb2aa5042fd309736de4a1e496614c70372b91b7a2ba52e50"
      },
      "downloads": -1,
      "filename": "mdocument-3.0.1590436924-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4313cb912a25e43d5151c398dfe1ce33",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8416,
      "upload_time": "2020-05-25T20:02:06",
      "upload_time_iso_8601": "2020-05-25T20:02:06.102575Z",
      "url": "https://files.pythonhosted.org/packages/fc/ca/797f0498ef9661a6bd21b3324763d075a4856c65f9fc3db3e03e4d2f20eb/mdocument-3.0.1590436924-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c21cc81802d7410226f59ac74790def4dbc8f7c20a5f4e0073e588fe2583f86",
        "md5": "6221fda96a5f9702153b77328eb6287e",
        "sha256": "c1197b64bf8c114cf1937e27614e30b2b00451e7e8dd7572b6a5943875caaae3"
      },
      "downloads": -1,
      "filename": "mdocument-3.0.1590436924.tar.gz",
      "has_sig": false,
      "md5_digest": "6221fda96a5f9702153b77328eb6287e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8153,
      "upload_time": "2020-05-25T20:02:07",
      "upload_time_iso_8601": "2020-05-25T20:02:07.691067Z",
      "url": "https://files.pythonhosted.org/packages/5c/21/cc81802d7410226f59ac74790def4dbc8f7c20a5f4e0073e588fe2583f86/mdocument-3.0.1590436924.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}