{
  "info": {
    "author": "Yurzs",
    "author_email": "yurzs+mdocument@yurzs.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "MDocument\n=========\n\n|pipeline status|\n\n.. |pipeline status| image:: https://git.yurzs.dev/yurzs/mdocument/badges/master/pipeline.svg\n   :target: https://git.yurzs.dev/yurzs/mdocument/-/commits/master\n\n|coverage report|\n\n.. |coverage report| image:: https://git.yurzs.dev/yurzs/mdocument/badges/master/coverage.svg\n   :target: https://git.yurzs.dev/yurzs/mdocument/-/commits/master\n\nSimple DRM for async mongo motor client\n\nUsage\n-----\n\n.. code-block:: python\n\n    import asyncio\n\n    from mdocument import Document, DatabaseClient\n\n    client1 = DatabaseClient(uri=\"localhost\")\n\n    class Comment(Document):\n        _collection_ = \"comments\"\n        _database_ = \"mdocument\"\n        _client_ = client1\n\n\n    class Video(Document):\n        _collection_ = \"videos\"\n        _database_ = \"mdocument\"\n        _client_ = client1\n\n        @Document.related(self_field=\"_id\", other_field=\"video\")\n        def comments(self):\n            return Comment\n\n\n    loop = asyncio.get_event_loop()\n    Document.setup(loop, \"localhost\", \"test_database\")\n\n    async def main():\n        video = await Video.create(\n            title=\"Test\",\n        )\n\n        comment1 = await Comment.create(\n            video=video._id,\n            message=\"First!\",\n        )\n\n        comment2 = await Comment.create(\n            video=video._id,\n            message=\"Second!\"\n        )\n\n    loop.run_until_complete(main())\n\nNow we can easily access our comments using our related documents\n\n.. code-block:: python\n\n    print(await video.comments)\n    [\n        Comment(_id=5e7533d55eb6a8c6d24d3cc7, video=5e7533d55eb6a8c6d24d3cc6, message=First!),\n        Comment(_id=5e7533d55eb6a8c6d24d3cc8, video=5e7533d55eb6a8c6d24d3cc6, message=Second!)\n    ]\n\nDocument methods\n================\n\nHere is a list of Document basic methods\n\n@related\n--------\n\nDecorator for defining related documents. Made for easily managing deletion of related documents.\n\n.. code-block:: python\n\n    def related(self_field, other_field, multiple=True, on_delete=None):\n\nExample:\n\n.. code-block:: python\n\n    from mdocument import Document, DeleteDocument\n\n\n    class Artist(Document):\n        __collection__ = \"artists\"\n\n        @Document.related(\"_id\", \"album._id\", on_delete=DeleteDocument)\n        def albums(self):\n            return Album\n\n    class Album(Document):\n        __collection__ = \"messages\"\n\n        @Document.related(\"_id\", \"album._id\", on_delete=DeleteDocument)\n        def songs(self):\n            return Song\n\n\n    class Song(Document):\n        __collection__ = \"songs\"\n\nAs we set our relations. Now we have next actions:\nAlbum deleted -> all songs related to this album are deleted\nAuthor deleted -> all albums related to author are deleted -> each song related to deleted albums deleted\n\n.create\n-------\n.. code-block:: python\n\n    async def create(cls, loop=None, update_immediately=False, **kwargs):\n\nIf you want to create a new document you can do it easily with .create method.\nExample:\n\n.. code-block:: python\n\n    import asyncio\n\n    from mdocument import Document, DatabaseClient\n\n\n    class Message(Document):\n        _collection_ = \"messages\"\n        _database_ = \"mdocument\"\n        _client_ = DatabaseClient(host=\"localhost\")\n\n    Document.setup(loop, \"localhost\", \"test_database\")\n\n    loop.run_until_complete(\n        Message.create(from_user=\"admin\", text=\"Test message!\")\n    )\n\nThis will create document in database:\n\n.. code-block:: python\n\n    {\n        '_id': ObjectId('5e75373e5eb6a8c6d14d3ccd'),\n        'from_user': 'admin',\n        'text': \"Test message!\"\n    }\n\n.push_update\n------------\n\nUpdates document and all @related fields.\n\n.. code-block:: python\n\n    await Message.push_update()\n\n.delete\n-------\n\nDeletion of document from database. Based on your set @related rules all related documents will be modified too.\n\n.. code-block:: python\n\n    message = await Message.one(from_user=\"admin\")\n\n    await message.delete()\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.yurzs.dev/yurzs/MDocument",
    "keywords": "mongo,motor,Document,ORM",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdocument",
    "package_url": "https://pypi.org/project/mdocument/",
    "platform": "",
    "project_url": "https://pypi.org/project/mdocument/",
    "project_urls": {
      "Homepage": "https://git.yurzs.dev/yurzs/MDocument"
    },
    "release_url": "https://pypi.org/project/mdocument/2.0.1585164327/",
    "requires_dist": [
      "motor"
    ],
    "requires_python": "",
    "summary": "Simple DRM for motor client",
    "version": "2.0.1585164327",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13162189,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd56aaa831784cda6042b98794a3429e7a6b1a2f9da8954e6d7d1dcd6d61cdf9",
        "md5": "174f8eb334bbb1eb3d9760685b4da753",
        "sha256": "695bb5f61532ff63da7f9709c63a11d8d05185efb359f23577ebe43806a5f7f0"
      },
      "downloads": -1,
      "filename": "mdocument-2.0.1585164327-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "174f8eb334bbb1eb3d9760685b4da753",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7740,
      "upload_time": "2020-03-25T19:25:28",
      "upload_time_iso_8601": "2020-03-25T19:25:28.554779Z",
      "url": "https://files.pythonhosted.org/packages/cd/56/aaa831784cda6042b98794a3429e7a6b1a2f9da8954e6d7d1dcd6d61cdf9/mdocument-2.0.1585164327-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2f483ad9fd25e2b5e52708153f634df242e6a25e9079bd7227578acef5dcebf",
        "md5": "4d5628154f8164dab15af0a1db4b4f31",
        "sha256": "822502106f3a7cdd2d83a996b62263a1156360218fdfffb657dcb5b941d0e5e5"
      },
      "downloads": -1,
      "filename": "mdocument-2.0.1585164327.tar.gz",
      "has_sig": false,
      "md5_digest": "4d5628154f8164dab15af0a1db4b4f31",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6983,
      "upload_time": "2020-03-25T19:25:33",
      "upload_time_iso_8601": "2020-03-25T19:25:33.973540Z",
      "url": "https://files.pythonhosted.org/packages/b2/f4/83ad9fd25e2b5e52708153f634df242e6a25e9079bd7227578acef5dcebf/mdocument-2.0.1585164327.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}