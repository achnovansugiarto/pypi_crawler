{
  "info": {
    "author": "Yurzs",
    "author_email": "yurzs+mdocument@yurzs.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "MDocument\n=========\n\n|pipeline status| |coverage report| |pypi link|\n\n.. |pipeline status| image:: https://git.yurzs.dev/yurzs/mdocument/badges/master/pipeline.svg\n   :target: https://git.yurzs.dev/yurzs/mdocument/-/commits/master\n\n.. |coverage report| image:: https://git.yurzs.dev/yurzs/mdocument/badges/master/coverage.svg\n   :target: https://git.yurzs.dev/yurzs/mdocument/-/commits/master\n\n.. |pypi link| image:: https://badge.fury.io/py/mdocument.svg\n   :target: https://pypi.org/project/mdocument\n\nSimple DRM for async mongo motor client\n\nUsage\n-----\n\n.. code-block:: python\n\n    import asyncio\n\n    import motor.motor_asyncio\n\n    from mdocument import Document\n\n    client = motor.motor_asyncio.AsyncIOMotorClient()\n\n    class Comment(Document):\n        collection = \"comments\"\n        database = \"mdocument\"\n        client = client\n\n\n    class Video(Document):\n        collection = \"videos\"\n        database = \"mdocument\"\n        client = client\n\n        @Document.related(Comment.Field.video, self_field_name=\"_id\")\n        def comments(self):\n            pass\n\n    async def main():\n        video = await Video.create(title=\"Test\")\n\n        comment1 = await Comment.create(\n            video=video._id,\n            message=\"First!\",\n        )\n\n        comment2 = await Comment.create(\n            video=video._id,\n            message=\"Second!\"\n        )\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\nNow we can easily access our comments using our related documents\n\n.. code-block:: python\n\n    print(await video.comments)\n    [\n        Comment(_id=5e7533d55eb6a8c6d24d3cc7, video=5e7533d55eb6a8c6d24d3cc6, message=First!),\n        Comment(_id=5e7533d55eb6a8c6d24d3cc8, video=5e7533d55eb6a8c6d24d3cc6, message=Second!)\n    ]\n\nDocument methods\n================\n\nHere is a list of Document basic methods\n\n@related\n--------\n\nDecorator for defining related documents. Made for easily managing deletion of related documents.\n\n.. code-block:: python\n\n    def related(self_path, other_path, multiple=True, parent=True):\n\nExample:\n\n.. code-block:: python\n\n    from mdocument import Document, DeleteDocument\n\n    import motor.motor_asyncio\n\n    client = motor.motor_asyncio.AsyncIOMotorClient()\n\n    class Artist(Document):\n        collection = \"artists\"\n        database = \"mdocument\"\n        client = client\n\n        @Document.related(Album.Field._id, self_field_name=\"_id\")\n        def albums(self):\n            pass\n\n    class Album(Document):\n        collection = \"albums\"\n        database = \"mdocument\"\n        client = client\n\n        @Document.related(Song.Field._id, self_field_name=\"_id\")\n        def songs(self):\n            pass\n\n\n    class Song(Document):\n        collection = \"songs\"\n        database = \"abc\"\n        client = client\n\nAs we set our relations. Now we have next actions:\nAlbum deleted -> all songs related to this album are deleted\nAuthor deleted -> all albums related to author are deleted -> each song related to deleted albums deleted\n\n.create\n-------\n.. code-block:: python\n\n    @classmethod\n    async def create(cls, **kwargs):\n\nIf you want to create a new document you can do it easily with .create method.\nExample:\n\n.. code-block:: python\n\n    import asyncio\n\n    from mdocument import Document\n\n    import motor.motor_asyncio\n\n    client = motor.motor_asyncio.AsyncIOMotorClient()\n\n    class Message(Document):\n        collection = \"messages\"\n        database = \"mdocument\"\n        client = client\n\n\n    loop.run_until_complete(\n        Message.create(from_user=\"admin\", text=\"Test message!\")\n    )\n\nThis will create document in database:\n\n.. code-block:: python\n\n    {\n        '_id': ObjectId('5e75373e5eb6a8c6d14d3ccd'),\n        'from_user': 'admin',\n        'text': \"Test message!\"\n    }\n\n.push_update\n------------\n\nUpdates document and all @related fields.\n\n.. code-block:: python\n\n    await Message.push_update()\n\n.delete\n-------\n\nDeletion of document from database. Based on your set @related rules all related documents will be modified too.\n\n.. code-block:: python\n\n    message = await Message.one(from_user=\"admin\")\n\n    await message.delete()\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.yurzs.dev/yurzs/MDocument",
    "keywords": "mongo,motor,Document,ORM",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdocument",
    "package_url": "https://pypi.org/project/mdocument/",
    "platform": "",
    "project_url": "https://pypi.org/project/mdocument/",
    "project_urls": {
      "Homepage": "https://git.yurzs.dev/yurzs/MDocument"
    },
    "release_url": "https://pypi.org/project/mdocument/3.0.1591920385/",
    "requires_dist": [
      "motor"
    ],
    "requires_python": "",
    "summary": "Simple DRM for motor client",
    "version": "3.0.1591920385",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13162189,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "287c5b120803842206f926c83446a20a97f3616f606488ecd6ef07b6d6e38728",
        "md5": "be311e871d8be569cd29d422344fc94d",
        "sha256": "8756891f56f8c6688efa0b6bb4154cadfb4d71e614f45947cd1df0cc4d054433"
      },
      "downloads": -1,
      "filename": "mdocument-3.0.1591920385-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be311e871d8be569cd29d422344fc94d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7723,
      "upload_time": "2020-06-12T00:06:31",
      "upload_time_iso_8601": "2020-06-12T00:06:31.989500Z",
      "url": "https://files.pythonhosted.org/packages/28/7c/5b120803842206f926c83446a20a97f3616f606488ecd6ef07b6d6e38728/mdocument-3.0.1591920385-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a21b09ed02b6df30ea5f38b5d998005c4da83bf03a7af64ac52361934789824",
        "md5": "dc58a2ca5cafd067015e82a41bb00298",
        "sha256": "29dfd2c16a7b70145192bdfdb5eeb32a88ffae9e173fd41a6e6d8c77f2cbfce6"
      },
      "downloads": -1,
      "filename": "mdocument-3.0.1591920385.tar.gz",
      "has_sig": false,
      "md5_digest": "dc58a2ca5cafd067015e82a41bb00298",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7249,
      "upload_time": "2020-06-12T00:06:33",
      "upload_time_iso_8601": "2020-06-12T00:06:33.319005Z",
      "url": "https://files.pythonhosted.org/packages/7a/21/b09ed02b6df30ea5f38b5d998005c4da83bf03a7af64ac52361934789824/mdocument-3.0.1591920385.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}