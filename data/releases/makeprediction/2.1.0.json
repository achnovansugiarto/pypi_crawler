{
  "info": {
    "author": "Hanany Tolba",
    "author_email": "hananytolba@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "\n<!-- ![alt text](assets/logo.png)\n -->\n<img src=\"assets/logo.png\" alt=\"makeprediction logo\" width=\"300px\"/>\n<!-- <img src=\"assets/logo_1.png\" alt=\"makeprediction logo\" width=\"300px\"/>\n -->\n\n\nMakePrediction is a package for building Gaussian process models in Python. It was originally created by [Hanany Tolba].\n \n * MakePrediction is an open source project. If you have relevant skills and are interested in contributing then please do contact us (hananytolba@yahoo.com).*\n\nGaussian process regression (GPR):\n=====================================\nThe advantages of Gaussian processes are:\n\n* The prediction interpolates the observations.\n* The prediction is probabilistic (Gaussian) so that one can compute empirical confidence intervals and decide based on those if one should refit (online fitting, adaptive fitting) the prediction in some region of interest.\n* Versatile: different kernels can be specified. Common kernels are provided, but it is also possible to specify custom kernels.\n\nIn addition to standard scikit-learn estimator API,\n* The methods proposed here are much faster than standard scikit-learn estimator API.\n* The prediction method here (**predict**) is very complete compared to scikit-learn gaussian process API with many options such as:\nthe *sparse* context and the automatic online update of prediction.\n\n   \n\n\n## What does makeprediction do?\n* Modelling and analysis time series.\n\n* Automatic time-series prediction (forecasting) using Gaussian processes model.\n* Real-Time time series prediction.\n* Deploy on production the fitted (or saved) makeprediction model.\n\n### Applications:\n* Energy consumption prediction. \n* Energy demand prediction.\n* Stock price prediction.\n* Stock market prediction.\n* ...\n### Latest release from PyPI\n\n* pip install makeprediction\n\n### Latest source from GitHub\n\n*Be aware that the `master` branch may change regularly, and new commits may break your code.*\n\n[MakePrediction GitHub repository](https://github.com/HananyTolba/MakePrediction.git), run:\n\n* pip install .\n\nExample\n==========================\n\nHere is a simple example:\n\n```python\nfrom makeprediction.quasigp import QuasiGPR as qgpr\nfrom makeprediction.invtools import date2num\nfrom makeprediction.kernels import *\nimport datetime\nimport pandas as pd\nimport numpy as np\n\n#generate time series\n###############################\n  \nx = pd.date_range(start = datetime.datetime(2021,1,1), periods=1000, freq = '3s' )\ntime2num = date2num(x)\n\n# f(x)\nf = lambda dt:  100*np.sin(2*np.pi*dt/500)*np.sin(2*np.pi*dt/3003)  + 500\n# f(x) + noise\ny = f(time2num) + 7*np.random.randn(x.size)\n\n# split time serie into train and test\ntrainSize = int(x.size *.7)\nxtrain,ytrain = x[:trainSize], y[:trainSize]\nxtest,ytest = x[trainSize:], y[trainSize:]\n\n# Create an instance of the class qgpr as model and plot it with plotly:\n#########################################\nmodel = qgpr(xtrain,ytrain, RBF()) \nmodel.plotly()\n```\n<img src=\"assets/fig1.svg\" alt=\"makeprediction logo\" width=\"700px\"/>\n\n```python\n#fit the model\nmodel.fit()\n```\n\n\n```python\n#predict with model and plot\nmodel.predict(xtest)\nmodel.plotly(ytest)\n```\n<img src=\"assets/fig2.svg\" alt=\"makeprediction logo\" width=\"700px\"/>\n\n\n```python\n\n#Online prediction with update\nypred = []\nfor i in range(xtest.size):\n    yp,_ = model.predict(xtest[i],return_value = True)\n    ypred.append(yp)\n    data = {'x_update': xtest[i], 'y_update': ytest[i],}\n    model.update(**data)\n\n\n#plot \n\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (10,5))\nplt.plot(xtest,ytest,'b', label ='Test')\nplt.plot(xtest,ypred,'r',label='Prediction')\nplt.legend()\n```\n<img src=\"assets/fig_pred.svg\" alt=\"makeprediction logo\" width=\"700px\"/>\n\nThe previous prediction with updating, can be obtained simply by the \"predict\" method as follows:\n\n```python\n#prediction with update \nmodel.predict(xtest,ytest[:-1])\n#And ploly \nmodel.plotly(ytest)\n```\n<img src=\"assets/fig3.svg\" alt=\"makeprediction logo\" width=\"700px\"/>\n\n```python\n# Errors of prediction\nmodel.score(ytest)\n\n{'train_errors': {'MAE': 5.525659848832947,\n  'MSE': 48.75753482298262,\n  'R2': 0.9757047695585449},\n 'test_errors': {'MAE': 6.69916209795533,\n  'MSE': 68.7186589422385,\n  'R2': 0.9816696384584944}}\n```\n\nSave the model:\n------------------\n```python\n\nmodel_path = 'saved_model'\nmodel.save(model_path)\n```\n\n\n\n\n\n\n\nDeployement of makeprediction model\n=========================================\n\nNow we are going to simulate the behavior of data that arrives continuously  in realtime  and stored in a database. \nWe will create a 'csv' file named 'live_db.csv' that automatically grows every 3 seconds with a new line.\n\nCreate a 'realtime_db.py' file and copy the following code into it  \n\n```python\nfrom makeprediction.ts_generation import rtts\nimport numpy as np\ndef func(t):\n    f_t  = 100*np.sin(2*np.pi*t/500)*np.sin(2*np.pi*t/3003)  + 500  + 7*np.random.randn(1)[0]\n    return f_t\n\nif __name__ == '__main__':\n    rtts(function = func,step = 3,filename = 'live_db.csv')\n```\n\n\nYou can notice that the function 'func' is the same as the one that generates the time series that we have noted \"f\".\n\nNow in a terminal type:\n```bash\npython realtime_db.py \n```\nor \n```bash\npython3 realtime_db.py \n```\nor in a new Jupyter notepad\n\n```jupyter-notebook\n!python realtime_db.py \n```\naccording to your preference  \n\nLoad the model\n--------------------\n\n```python\nfrom makeprediction.quasigp import QuasiGPR as qgpr\nmodel_path = 'saved_model'\n#load the model\nloaded_model = qgpr()\nloaded_model = loaded_model.load(model_path)\n```\n\nDeployement\n---------------\n```python\n\nloaded_model.deploy2dashbord('live_db.csv')\n```\n```bash\n\nDash is running on http://127.0.0.1:9412/\n\nINFO:makeprediction.quasigp:Dash is running on http://127.0.0.1:9412/\n\n * Serving Flask app \"makeprediction.quasigp\" (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\nINFO:werkzeug: * Running on http://127.0.0.1:9412/ (Press CTRL+C to quit)\nINFO:werkzeug:127.0.0.1 - - [18/Feb/2021 14:22:51] \"POST /_dash-update-component HTTP/1.1\" 200 -\nINFO:werkzeug:127.0.0.1 - - [18/Feb/2021 14:22:51] \"POST /_dash-update-component HTTP/1.1\" 200 -\nINFO:werkzeug:127.0.0.1 - - [18/Feb/2021 14:22:51] \"POST /_dash-update-component HTTP/1.1\" 200 -\n```\n\n\n<img src=\"assets/Capture_1.png\" alt=\"makeprediction logo\" width=\"1000px\"/>\n\n<img src=\"assets/Capture_2.png\" alt=\"makeprediction logo\" width=\"1000px\"/>\n\nDemo\n---------\nAll  files of this demo are in the 'demos' directory.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/HananyTolba/MakePrediction.git",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HananyTolba/MakePrediction.git",
    "keywords": "Gaussian Process Regression,Time series prediction,Deep Learning,Machine Learning",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "makeprediction",
    "package_url": "https://pypi.org/project/makeprediction/",
    "platform": "",
    "project_url": "https://pypi.org/project/makeprediction/",
    "project_urls": {
      "Download": "https://github.com/HananyTolba/MakePrediction.git",
      "Homepage": "https://github.com/HananyTolba/MakePrediction.git"
    },
    "release_url": "https://pypi.org/project/makeprediction/2.1.0/",
    "requires_dist": [
      "numpy",
      "colorama",
      "tqdm",
      "termcolor",
      "scipy",
      "requests",
      "joblib",
      "matplotlib",
      "pandas",
      "pytest",
      "plotly",
      "dash",
      "dash-bootstrap-components"
    ],
    "requires_python": ">=3.5",
    "summary": "Fast and easy gaussian process regression for time series prediction",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14036176,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ee77fcf7d6a9a6e5a29aa54ad6deabff9b4b248331055a9d536df36836f7be7",
        "md5": "2963bc544523da146089fe2a67bbc3bd",
        "sha256": "8c7cf8b1ac3c6d5e200b33d0f20fb632906bcf5044aa0e92e6063aec3b85fdf8"
      },
      "downloads": -1,
      "filename": "makeprediction-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2963bc544523da146089fe2a67bbc3bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 134803,
      "upload_time": "2021-06-04T12:33:42",
      "upload_time_iso_8601": "2021-06-04T12:33:42.036083Z",
      "url": "https://files.pythonhosted.org/packages/1e/e7/7fcf7d6a9a6e5a29aa54ad6deabff9b4b248331055a9d536df36836f7be7/makeprediction-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "755cb51846688764c4131d222019052a9aba63620e3c31116307a93148fbc08b",
        "md5": "2fa039dc84027211b540f183ffc2d6e4",
        "sha256": "19ddcbbbec88824d2b9a5e1e29d5734eb5cf435c54ff7aaa971f7af214b20aa0"
      },
      "downloads": -1,
      "filename": "makeprediction-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2fa039dc84027211b540f183ffc2d6e4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 134757,
      "upload_time": "2021-06-04T12:33:43",
      "upload_time_iso_8601": "2021-06-04T12:33:43.816430Z",
      "url": "https://files.pythonhosted.org/packages/75/5c/b51846688764c4131d222019052a9aba63620e3c31116307a93148fbc08b/makeprediction-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}