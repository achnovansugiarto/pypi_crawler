{
  "info": {
    "author": "Hanany Tolba",
    "author_email": "hananytolba@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "\n<!-- ![alt text](assets/logo.png)\n -->\n<img src=\"assets/logo.png\" alt=\"makeprediction logo\" width=\"300px\"/>\n<!-- <img src=\"assets/logo_1.png\" alt=\"makeprediction logo\" width=\"300px\"/>\n -->\n\n\nMakePrediction is a package for building an automatic Gaussian process regression (GPR) models for time series prediction in Python. It was originally created by [Hanany Tolba].\n \n * MakePrediction is an open source project. If you have relevant skills and are interested in contributing then please do contact us (hananytolba@yahoo.com).*\n\nGaussian process regression (GPR):\n=====================================\nThe advantages of this Gaussian processes package:\n* Very fast training.\n* Very fast prediction.\n* The prediction can be interpolated as desired. \n* The training of the model is automatic, no kernel function needs to be specified. An optimal choice of kernel is automatically elaborated.\n* Possibility to choose a kernel function manually.\n* The prediction is probabilistic (Gaussian) so that confidence intervals can be calculated and used to decide whether to make a strategic decision.  \n* The package provides an API for deployment. \n\n   \n## Where do you find time series?\n* Energy\n* Finance \n* Medical, Biotech, and Healthcare\n* IoT Monitoring \n* Supply Chain\n* Agriculture\n* Retail\n\n\n## What does makeprediction do?\n* Modelling and analysis time series.\n* Automatic time-series prediction (forecasting).\n* Real-Time time series prediction.\n* Deploy on production the fitted (or saved) makeprediction model.\n\n### Applications:\n* Energy consumption prediction. \n* Energy demand prediction.\n* Stock price prediction.\n* Stock market prediction.\n* ...\n### Latest release from PyPI\n\n* pip install makeprediction\n\n### Latest source from GitHub\n\n*Be aware that the `master` branch may change regularly, and new commits may break your code.*\n\n[MakePrediction GitHub repository](https://github.com/HananyTolba/MakePrediction.git), run:\n\n* pip install .\n\nExample\n==========================\n\nHere is a simple example:\n\n```python\nimport pandas as pd\nimport numpy as np\n\nfrom makeprediction.gpts import GaussianProcessTimeSerie\nfrom makeprediction.kernels import RBF, White\nfrom makeprediction.visualization import Visualizer\n\n#generate time series\n###############################\n  \nx = pd.date_range(start = datetime.datetime(2021,1,1), periods=1000, freq = '3s' )\ntime2num = date2num(x)\n\n# Simulate a data\ndate = pd.date_range(start = '2022',periods = 1000, freq = '30T')\n# As sum of RBF kernel and Gaussian noise kernel\nkernel = RBF() + White(variance = .01) \n# add mean and variance \ndata = 1000 + 50*kernel.simulate(date, seed = np.random.seed(1234))\n# create a dataframe with data\ndf = pd.DataFrame(data = data, index = date, columns=['value'])\ndf.head()\n\n\n# split time serie into train and test\nTRAIN_SIZE = int(.8*len(df))\ndf_train, df_test = df[:TRAIN_SIZE], df[TRAIN_SIZE:]\n\n# Create an instance of the class GaussianProcessTimeSerie with train data:\n#########################################\nmodel = GaussianProcessTimeSerie(df_train.index, df_train.value)\n# Show train data with test data \nVisualizer.iplot(model, df_test.index, df_test.value)\n\n```\n<img src=\"assets/fig1.svg\" alt=\"makeprediction logo\" width=\"700px\"/>\n\n```python\n# fit the model\nmodel.fit()\n```\n\n\n```python\n#predict with model and plot result\nmodel.predict(df_test.index)\nVisualizer.iplot(model, df_test.index, df_test.value)\n\n```\n<img src=\"assets/fig2.svg\" alt=\"makeprediction logo\" width=\"700px\"/>\n\n\n```python\n# Show initial score \nmodel.score(df_test.value)\n\n# Online prediction with updating \nypred = np.empty(shape = (0,))\nypred_std = np.empty(shape = (0,))\n\nfor x,y in df_test.itertuples():\n    # predict for x value\n    yp,yp_std = model.predict(x,return_value = True)\n    ypred = np.append(ypred,yp)\n    ypred_std = np.append(ypred_std,yp_std)\n    # update the model for (x,y)\n    data = {'x_update': x, 'y_update': y}\n    model.update(**data)\n#Set all new prediction to the model    \nmodel.set_prediction(df_test.index, ypred, ypred_std)\n\n# Show new prediction \n\nVisualizer.iplot(model, df_test.index, df_test.value)\n```\n<img src=\"assets/fig_pred.svg\" alt=\"makeprediction logo\" width=\"700px\"/>\n\nThe previous prediction with updating, can be obtained simply by the \"predict\" method as follows:\n\n\n<img src=\"assets/fig3.svg\" alt=\"makeprediction logo\" width=\"700px\"/>\n\n```python\n# Show new score \nmodel.score(df_test.value)\n\n{'TrainErrors': {'MBE': 1.9652784019209927e-05,\n  'MAE': 3.8085808450980743,\n  'MSE': 22.963876468774956,\n  'RMSE': 4.792063904913514,\n  'NRMSE': 0.004642410409421008,\n  'R2': 0.9867205336559287},\n 'TestErrors': {'MBE': -0.3680353774898197,\n  'MAE': 4.749355093190354,\n  'MSE': 34.36287534118008,\n  'RMSE': 5.8619856142078755,\n  'NRMSE': 0.005905883435157759,\n  'R2': 0.9879230611904987}}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/HananyTolba/MakePrediction.git",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HananyTolba/MakePrediction.git",
    "keywords": "Gaussian Process Regression,Time series prediction,Machine Learning",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "makeprediction",
    "package_url": "https://pypi.org/project/makeprediction/",
    "platform": null,
    "project_url": "https://pypi.org/project/makeprediction/",
    "project_urls": {
      "Download": "https://github.com/HananyTolba/MakePrediction.git",
      "Homepage": "https://github.com/HananyTolba/MakePrediction.git"
    },
    "release_url": "https://pypi.org/project/makeprediction/4.0.1/",
    "requires_dist": [
      "joblib (==1.1.0)",
      "matplotlib (==3.5.1)",
      "numpy (==1.22.1)",
      "pandas (==1.3.5)",
      "plotly (==5.5.0)",
      "pytest (==6.2.5)",
      "requests (==2.27.1)",
      "scipy (==1.7.3)",
      "setuptools (==58.0.4)",
      "tqdm (==4.62.3)"
    ],
    "requires_python": ">=3.8",
    "summary": "Automatic and fast Gaussian process for time serie prediction.",
    "version": "4.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14036176,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b12c790dc769779da5560bf0001718afade7c1be9d0230a8fc4765612b36dcc3",
        "md5": "75c505f0e74e37ef64b0ae0183c65f86",
        "sha256": "90c310fe3d2490947f28e5f7e35f2c6677a2216c8e024dc92d561b082028491c"
      },
      "downloads": -1,
      "filename": "makeprediction-4.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "75c505f0e74e37ef64b0ae0183c65f86",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 58108,
      "upload_time": "2022-03-30T12:26:02",
      "upload_time_iso_8601": "2022-03-30T12:26:02.518304Z",
      "url": "https://files.pythonhosted.org/packages/b1/2c/790dc769779da5560bf0001718afade7c1be9d0230a8fc4765612b36dcc3/makeprediction-4.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}