{
  "info": {
    "author": "epi2melabs",
    "author_email": "epi2melabs@nanoporetech.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![Oxford Nanopore Technologies logo](https://github.com/epi2me-labs/mapula/raw/master/images/ONT_logo_590x106.png)\n\n\n# Mapula\nThis package provides a command line tool that is able to parse alignments in `SAM` format and produce a range of useful stats.\n\nMapula provides several subcommands, use `--help` with each\none to find detailed usage instructions.\n\n## Installation\nCount mapula can be installed following the usual Python tradition:\n```\npip install mapula\n```\n\n## Usage\nThe main command is `mapula count`. This command can accept one or several input `SAM` or `BAM` files and output various useful statistics.\n\nFor available options, see:\n```\nmapula count -h\n```\n\n**Per-alignment (outputs to stdout)**\n\nIf you have no need of aggregated stats, you can opt to pipe\nper-alignment stats to stdout (WIP: currently only in json format). Or for instance if mapula is part of a chain of piping operators, you may relay the `SAM` records.\n\nPipe per-alignment stats to stdout in `.json` format:\n```\nmapula count <paths_to_sam_or_bam> -r <path_to_a_reference_fasta> -p json\n```\nPipe `SAM` records from multiple files to stdout:\n```\nmapula count <paths_to_sam_or_bam> <paths_to_sam_or_bam> -p sam\n```\n\n**Aggregation (outputs to file)**\n\nAggregated stats can be calculated by enabling the `-a` flag. Alignments are grouped by user-specified criteria, `-s`. These aggregations can then be output \nin two formats using `-f`. The `.csv` format is the most easily iterpretable for a quick glance, or for onward programmatic analysis the `.json` output contains a more in-depth view of the data.\n\nOutput some stats in `.csv` format containing mapping stats:\n```\nmapula count <paths_to_sam_or_bam> -r <path_to_a_reference_fasta> -a\n```\n\nOutput some stats in `.csv` format split by `read_group` and `barcode`:\n```\nmapula count <paths_to_sam_or_bam> -r <path_to_a_reference_fasta> -a -s barcode read_group\n```\n\nOutput some stats in `.csv` and `.json` format split by `SAM` and reference `fasta`:\n```\nmapula count \\\n  <paths_to_sam_or_bam> <paths_to_sam_or_bam> \\\n  -r <path_to_a_reference_fasta> <path_to_a_reference_fasta> \\\n  -a \\\n  -s source fasta\n```\n\nReceive some `SAM` or `BAM` from stdin, calculate some aggregated stats and output in `.csv`, and pipe the `SAM` records onwards:\n```\nminimap2 -y -ax map-ont <path_to_a_reference_fasta> *_reads.fastq \\\n  | mapula -r <path_to_a_reference_fasta> -a source fasta run_id barcode -p sam \\\n  | samtools sort -o sorted.aligned.bam\n```\n\n## Important: tags\n\nAt present, for access to `barcode`, `run_id`, `read_group`, mapula depends on tags being available within the input `SAM` records, as follows:\n- `barcode` = `bc`\n- `run_id` = `rd`\n- `read_group` = `rg`\n\nIf these are not available, Mapula will just provide a placeholder of `Unknown`. The minimap2 flag `-y` can carry information from the `.fastq`\nheader into the records it creates to faciliate this transfer of information.\n\n---\n\nHelp\n----\n\n**Licence and Copyright**\n\nÂ© 2021- Oxford Nanopore Technologies Ltd.\n\n`mapula` is distributed under the terms of the Mozilla Public License 2.0.\n\n**Research Release**\n\nResearch releases are provided as technology demonstrators to provide early\naccess to features or stimulate Community development of tools. Support for\nthis software will be minimal and is only provided directly by the developers.\nFeature requests, improvements, and discussions are welcome and can be\nimplemented by forking and pull requests. However much as we would\nlike to rectify every issue and piece of feedback users may have, the\ndevelopers may have limited resource for support of this software. Research\nreleases may be unstable and subject to rapid iteration by Oxford Nanopore\nTechnologies.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/epi2me-labs/mapula",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mapula",
    "package_url": "https://pypi.org/project/mapula/",
    "platform": "",
    "project_url": "https://pypi.org/project/mapula/",
    "project_urls": {
      "Homepage": "https://github.com/epi2me-labs/mapula"
    },
    "release_url": "https://pypi.org/project/mapula/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Calculation of alignment statistics",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10072353,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df3e284779f39193bdec4b234eefb9cb8e832ee79bdd7d22e32218188b64b4ea",
        "md5": "5f27c3fcfa3a50d8dd58eec9c19bf114",
        "sha256": "8ec080f91f86f01fdc66e0f213ade8a258256c00d8f4425b0712debb6520134b"
      },
      "downloads": -1,
      "filename": "mapula-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5f27c3fcfa3a50d8dd58eec9c19bf114",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17741,
      "upload_time": "2021-03-05T18:35:00",
      "upload_time_iso_8601": "2021-03-05T18:35:00.092609Z",
      "url": "https://files.pythonhosted.org/packages/df/3e/284779f39193bdec4b234eefb9cb8e832ee79bdd7d22e32218188b64b4ea/mapula-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}