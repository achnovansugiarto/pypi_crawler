{
  "info": {
    "author": "Radico",
    "author_email": "mus.radi85@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": ".. image:: https://badge.fury.io/py/django-comments-dab.svg\n    :target: https://pypi.org/project/django-comments-dab/\n    :alt: pypi\n\n.. image:: https://badge.fury.io/gh/radi85%2FComment.svg\n    :target: https://github.com/Radi85/Comment/releases\n    :alt: tag\n\n.. image:: https://travis-ci.org/Radi85/Comment.svg?branch=master\n    :target: https://travis-ci.org/Radi85/Comment\n    :alt: build\n\n.. image:: https://coveralls.io/repos/github/Radi85/Comment/badge.svg\n    :target: https://coveralls.io/github/Radi85/Comment\n    :alt: coverage\n\n.. image:: https://img.shields.io/pypi/pyversions/django-comments-dab.svg\n    :target: https://pypi.python.org/pypi/django-comments-dab/\n    :alt: python\n\n.. image:: https://img.shields.io/pypi/djversions/django-comments-dab.svg\n    :target: https://pypi.python.org/pypi/django-comments-dab/\n    :alt: django\n\n.. image:: https://readthedocs.org/projects/django-comment-dab/badge/?version=latest\n    :target: https://django-comment-dab.readthedocs.io/?badge=latest\n    :alt: docs\n\n.. image:: https://img.shields.io/github/contributors/radi85/Comment\n    :target: https://github.com/Radi85/Comment/graphs/contributors\n    :alt: contributors\n\n.. image:: https://img.shields.io/github/license/radi85/Comment?color=gr\n    :target: https://github.com/Radi85/Comment/blob/master/LICENSE\n    :alt: licence\n\n.. image:: https://img.shields.io/pypi/dm/django-comments-dab\n    :alt: downloads\n\n\n===================\ndjango-comments-dab\n===================\n\n\n    .. image:: /docs/_static/img/comment.gif\n\n\n    Content:\n\n    * Introduction_\n    * Installation_\n    * Setup_\n    * Usage_\n    * `Web API`_\n    * `Style Customization`_\n    * Example_\n\n.. _Introduction:\n\nIntroduction\n============\n\n**dab stands for Django-Ajax-Bootstrap**\n\n``django-comments-dab`` is a commenting application for Django-powered\nwebsites.\n\nIt allows you to integrate commenting functionality with any model you have e.g. blogs, pictures, video etc…\n\n*List of actions the authenticated user can do:*\n\n    1. Post a new comment.\n\n    2. Reply to an existing comment.\n\n    3. Edit a comment.\n\n    4. Delete a comment.\n\n    5. React to a comment. Available reactions are LIKE and DISLIKE  # open PR if you would like to have more reactions\n\n\n- All actions are done by AJAX calls - JQuery 3.2.1\n\n- Bootstrap 4.1.1 is used in comment templates for responsive design.\n\n.. _Installation:\n\nInstallation\n============\n\nRequirements:\n-------------\n\n    1. **django>=2.1**\n    2. **djangorestframework**  # only for the API Framework\n    3. **Bootstrap 4.1.1**\n    4. **jQuery 3.2.1**\n\n\nInstallation:\n-------------\n\n\nInstallation is available via ``pip``\n\n::\n\n    $ pip install django-comments-dab\n\n\nor via source on github\n\n::\n\n    $ git clone https://github.com/radi85/Comment.git\n    $ cd Comment\n    $ python setup.py install\n\n\nComment Settings and urls:\n--------------------------\n\n    1. Add ``comment`` to your installed_apps in your ``settings.py`` file. It should be added after ``django.contrib.auth``.\n    2. ``LOGIN_URL`` shall be defined in the settings.\n\nyour ``settings.py`` should look like the following:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        ...\n        'comment',\n        ..\n    )\n\n    LOGIN_URL = 'login'  # or your actual url\n\nIn your ``urls.py``:\n\n.. code:: python\n\n    urlpatterns = patterns(\n        path('admin/', admin.site.urls),\n        path('comment/', include('comment.urls')),\n        ...\n        path('api/', include('comment.api.urls')),  # only for API Framework\n        ...\n    )\n\nMigrations:\n-----------\n\nMigrate comment app:\n\n::\n\n    $ python manage.py migrate comment\n\n\n.. _Setup:\n\nSetup\n=====\n\nStep 1 - Connecting comment model with the target model\n-------------------------------------------------------\n\nIn your models.py add the field ``comments`` as a ``GenericRelation`` field to the required model.\n\nPS: Please note that field name must be ``comments`` **NOT** ``comment``.\n\nE.g. ``Post`` model, as shown below:\n\n.. code:: python\n\n    from django.contrib.contenttypes.fields import GenericRelation\n    from comment.models import Comment\n\n    class Post(models.Model):\n        author = models.ForeignKey(User)\n        title = models.CharField(max_length=200)\n        body = models.TextField()\n        # the field name should be comments\n        comments = GenericRelation(Comment)\n\nStep 2 - Adding template tags:\n------------------------------\n\n``render_comments`` *tag uses 2 required and 2 optional args*:\n\n    1. Instance of the targeted model. (**Required**)\n    2. Request object. (**Required**)\n    3. oauth. (optional - Default is false)\n    4. comments_per_page (number of Comments Per Page - Default is 10)\n\n\n.. _Usage:\n\nUsage\n=====\n\n1. Basics usage:\n----------------\n\n``include_static`` this tag will include required jquery and javascript file,\nif you already use jquery please make sure it is not the slim version which doesn't support ajax.\n``include_bootstrap`` tag is for bootstrap-4.1.1, if it’s already included\nin your project, get rid of this tag.\n\nIn your template (e.g. post_detail.html) add the following template tags where ``obj`` is the instance of post model.\n\n.. code:: python\n\n    {% load comment_tags %}  # Loading the template tag\n    {% render_comments obj request %}  # Render all the comments belonging to a passed object\n\n\n**Include static files:**\n\nThe ``comment`` app has three template tags for static files that the app requires.\nThese tags need to be included in the end of your base template.\n\n\n- **Case 1:** You already have jQuery in your project then the following tags shall be included below jQuery file:\n\n.. code:: html\n\n    {% load comment_tags %}  <!-- Loading the template tag -->\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.js\"></script>\n    {% include_static %}  <!-- Include comment.js file only -->\n    {% include_bootstrap %}  <!-- Include bootstrap-4.1.1 - remove this line if it is already used in your project -->\n\n\n- **Case 2:** You don't have jQuery in your project then the following tags shall be included:\n\n.. code:: html\n\n    {% load comment_tags %}  <!-- Loading the template tag -->\n\n    {% include_static_jquery %}  <!-- Include mini jQuery 3.2.1 and required js file -->\n    {% include_bootstrap %}  <!-- Include bootstrap 4.1.1 - remove this line if BS 4.1.1 is already used in your project -->\n\n\n2. Advanced usage:\n------------------\n\n1. Pagination:\n^^^^^^^^^^^^^^^\n\n    By default the comments will be paginated, 10 comments per page.\n    To disabled the pagination pass ``comments_per_page=None``\n    To change the default number, pass ``comments_per_page=number`` to ``render_comments``.\n\n    .. code:: html\n\n        {% load comment_tags %}  <!-- Loading the template tag -->\n\n        {% render_comments obj request comments_per_page=5 %}  <!-- Include all the comments belonging to a certain object -->\n        {% include_bootstrap %} <!-- Include bootstrap 4.1.1 - remove this line if BS 4.1.1 is already used in your project -->\n        {% include_static %} <!-- Include jQuery 3.2.1 and required js file -->\n\n\n\n2. Integrate user profile:\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    If you have a profile model for the user and you would like to show the\n    profile image next to each comment, do the following steps:\n\n    - Add ``PROFILE_APP_NAME`` and ``PROFILE_MODEL_NAME`` variables to your ``settings.py`` file.\n        e.g if user profile app is called ``accounts`` and profile model is called ``UserProfile``\n\n        ``settings.py``:\n\n        .. code:: python\n\n            PROFILE_APP_NAME = 'accounts'\n            PROFILE_MODEL_NAME = 'UserProfile' # letter case insensitive\n\n\n\n    - Make sure that ``get_absolute_url`` method is defined in your profile model.\n\n        .. code:: python\n\n            from django.urls import reverse\n\n            class UserProfile(models.Model):\n                user = models.OneToOneField(User, on_delete=models.CASCADE)\n                ...\n                ...\n\n                # this method must be defined for appropriate url mapping in comments section\n                def get_absolute_url(self):\n                    return reverse('your_profile_url_name')\n\n.. _Enable Flagging:\n\n3. Enable flagging:\n^^^^^^^^^^^^^^^^^^^\n\n    The comment can be reported by the users.\n    This feature can be enabled by adding the ``COMMENT_FLAGS_ALLOWED`` to ``settings.py`` and its value must be greater than 0 (the default).\n\n    The comment that has been reported more than the ``COMMENT_FLAGS_ALLOWED`` value, will be hidden from the view.\n    To keep displaying the flagged comments to all users add ``COMMENT_SHOW_FLAGGED=True`` to ``settings.py``\n\n    The default report reasons are:\n\n        1. Spam | Exists only to promote a service.\n        2. Abusive | Intended at promoting hatred.\n        3. Something else. With a message info, this option will be always appended reasons list.\n\n    The reasons can be customized by adding ``COMMENT_FLAG_REASONS`` list of tuples to ``settings.py``. E.g.\n\n    ``settings.py``\n\n    .. code:: python\n\n        COMMENT_FLAG_REASONS = [\n            (1, _('Spam | Exists only to promote a service')),\n            (2, _('Abusive | Intended at promoting hatred')),\n            (3, _('Racist | Sick mentality')),\n            (4, _('Whatever | Your reason')),\n            ...\n        ]\n\nGroups and Permissions:\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nFor flagging purpose, the following groups and permissions will be created on the next migrate:\n\n**permissions:**\n    1. delete_comment  (default)\n    2. delete_flagged_comment\n\n**groups:**\n    1. comment_admin => has both mentioned permissions (edit permission might be added in the future)\n    2. comment_moderator => has delete_flagged_comment permission\n\n* Comment admin can delete any comment.\n* Comment moderator can delete FLAGGED comment only.\n\nPS: If the groups or the permissions don't exist, just run migrate. ``./manage.py migrate``\n\n.. _`Web API`:\n\nWeb API\n=======\n\ndjango-comments-dab uses django-rest-framework to expose a Web API that provides\ndevelopers with access to the same functionality offered through the web user interface.\n\nThere are 5 methods available to perform the following actions:\n\n\n    1. Post a new comment. (Authenticated)\n\n    2. Reply to an existing comment. (Authenticated)\n\n    3. Edit a comment you posted. (Authenticated)\n\n    4. Delete a comment you posted. (Authenticated)\n\n    5. React to a comment. (Authenticated)\n\n    6. Report a comment. (Authenticated) Flagging system should be enabled\n\n    7. Retrieve the list of comments and associated replies to a given content type and object ID.\n\nThese actions are explained below.\n\nSetup:\n------\n\nTo integrate the comment API in your content type (e.g Post model), in ``serializers.py``\nfor the Post model add comments field as shown below:\n\n\n.. code:: python\n\n    from rest_framework import serializers\n    from comment.models import Comment\n    from comment.api.serializers import CommentSerializer\n\n\n    class PostSerializer(serializers.ModelSerializer):\n\n        comments = serializers.SerializerMethodField()\n\n        class Meta:\n            model = Post\n            fields = (\n                'id',\n                ...\n                ...\n                'comments'\n            )\n\n        def get_comments(self, obj):\n            comments_qs = Comment.objects.filter_parents_by_object(obj)\n            return CommentSerializer(comments_qs, many=True).data\n\n\nBy default all fields in profile model will be nested inside the user object in JSON response.\nThis can only happen if the profile attributes are defined in your ``settings.py``.\nIn case you would like to serialize particular fields in the profile model you should explicitly\ndeclare the ``COMMENT_PROFILE_API_FIELDS`` tuple inside your ``settings.py``:\n\n\n.. code:: python\n\n        PROFILE_APP_NAME = 'accounts'\n        PROFILE_MODEL_NAME = 'userprofile'\n        # the field names below must be similar to your profile model fields\n        COMMENT_PROFILE_API_FIELDS = ('display_name', 'birth_date', 'image')\n\n\nComment API actions:\n--------------------\n\n**1- Retrieve the list of comments and associated replies to a given content type and object ID:**\n\n    This action can be performed by providing the url with data queries related to the content type.\n\n    Get request accepts 3 params:\n\n\n    - ``type``: is the model name of the content type that have comments associated with it.\n    - ``id``: is the id of an object of that model\n\n\n\n\n    For example if you are using axios to retrieve the comment list of second object (id=2) of a model (content type) called post.\n    you can do the following:\n\n    ::\n\n        $ curl -H \"Content-Type: application/json\" 'http://localhost:8000/api/comments/?type=MODEL_NAME&id=ID'\n\n\n**2- Create a comment or reply to an existing comment:**\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    - ``type``: is the model name of the content type that have comments associated with it.\n    - ``id``: is the id of an object of that model\n    - ``parent_id``: is 0 or **NOT PROVIDED** for parent comments and for reply comments must be the id of parent comment\n\n\n    Example: posting a parent comment\n\n    ::\n\n        $ curl -X POST -u USERNAME:PASSWORD -d \"content=CONTENT\" -H \"Content-Type: application/json\" \"http://localhost:8000/api/comments/create/?type=MODEL_NAME&id=ID&parent_id=0\"\n\n\n**3- Update a comment:**\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    This action requires the ``comment.id`` that you want to update:\n\n\n    ::\n\n        $ curl -X PUT -u USERNAME:PASSWORD -d \"content=CONTENT\" -H \"Content-Type: application/json\" \"http://localhost:8000/api/comments/ID/\n\n\n**4- Delete a comment:**\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    This action requires the ``comment.id`` that you want to delete:\n\n    ::\n\n        $ curl -X DELETE -u USERNAME:PASSWORD -H \"Content-Type: application/json\" \"http://localhost:8000/api/comments/ID/\n\n\n**5- React to a comment:**\n\n    ``POST`` is the allowed method to perform a reaction on a comment.\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    This action requires the ``comment.id``. and,\n    ``reaction_type``: one of ``like`` or ``dislike``\n\n    ::\n\n       $ curl -X POST -u USERNAME:PASSWORD -H \"Content-Type: application/json\" \"http://localhost:8000/api/comments/ID/react/REACTION_TYPE/\n\n\n    PS: As in the UI, clicking the **liked** button will remove the reaction => unlike the comment. This behaviour is performed when repeating the same post request.\n\n\n**6- Report a comment**\n\n    Flagging system must be enabled by adding the attribute ``COMMENT_FLAGS_ALLOWED`` to ``settings.py``. See `Enable Flagging`_\n\n    ``POST`` is the allowed method to report a comment.\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    This action requires the ``comment.id``.\n\n    1. Set a flag:\n\n    .. code:: python\n\n        payload = {\n            'reason': REASON,  # number of the reason\n            'info': ''  # this is required if the reason is 100 ``Something else``\n        }\n\n    ::\n\n       $ curl -X POST -u USERNAME:PASSWORD -H \"Content-Type: application/json\" -d '{\"reason\":1, \"info\":\"\"}' http://localhost:8000/api/comments/ID/flag/\n\n\n    2. Un-flag a comment:\n\n        To un-flag a FLAGGED comment, set reason value to `0` or remove the payload from the request.\n\n    ::\n\n    $ curl -X POST -u USERNAME:PASSWORD http://localhost:8000/api/comments/ID/flag/\n\n\n.. _`Style Customization`:\n\nStyle Customization\n====================\n\n1- Default blocks:\n---------------------\n\nBS classes, pagination and some other template values can be now customized from within your templates directory as follows:\n\n    1. Create ``comment`` folder inside your templates directory.\n\n    2. Create new template file ``.html`` with the same name of the default template you wish to override and put it in the right directory.\n\n    **Templates tree:**\n\n    .. code:: bash\n\n        templates\n        └── comment\n            ├── comments\n            │   ├── apply_icon.html\n            │   ├── base.html\n            │   ├── cancel_icon.html\n            │   ├── child_comment.html\n            │   ├── comment_body.html\n            │   ├── comment_content.html\n            │   ├── comment_form.html\n            │   ├── comment_modal.html\n            │   ├── content.html\n            │   ├── create_comment.html\n            │   ├── delete_icon.html\n            │   ├── edit_icon.html\n            │   ├── pagination.html\n            │   ├── parent_comment.html\n            │   └── update_comment.html\n            ├── flags\n            │   ├── flag_icon.html\n            │   ├── flag_modal.html\n            │   └── flags.html\n            └── reactions\n                ├── dislike_icon.html\n                ├── like_icon.html\n                └── reactions.html\n\n\n\nfor example to override the BS classes of submit buttons and pagination style do the following:\n\n    create ``templates/comment/comments/create_comment.html``\n\n    .. code:: jinja\n\n        {% extends \"comment/comments/create_comment.html\" %}\n\n        {% block submit_button_cls %}\n        btn btn-primary btn-block btn-sm\n        {% endblock submit_button_cls %}\n\n        {# override pagination style: #}\n        {% block pagination %}\n        {% include 'comment/comments/pagination.html' with active_btn='bg-danger' text_style='text-dark' li_cls='page-item rounded mx-1' %}\n        {% endblock pagination %}\n\n\nFor full guide on the default templates and block tags name `Read the Doc`_\n\n.. _`Read the Doc`: https://django-comment-dab.readthedocs.io/styling.html/\n\n\n2- CSS file:\n------------\n\nTo customize the default style of comments app , you can create a ``comment.css`` file inside your ``static/css`` directory.\n\nThe new created file will override the original file used in the app.\n\n\n.. _Example`:\n\nExample\n=======\n\n.. code:: bash\n\n    $ git clone https://github.com/Radi85/Comment.git  # or clone your forked repo\n    $ cd Comment\n    $ python3 -m virtualenv local_env  # or any name. local_env is in .gitignore\n    $ source local_env/bin/activate\n    $ pip install -r test/example/requirements.txt\n    $ python test/example/manage.py runserver\n\n\nLogin with:\n\n    username: ``test``\n\n    password: ``django-comments``\n\nThe icons are picked from `Feather`_. Many thanks for the good work.\n\n.. _`Feather`: https://feathericons.com",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/radi85/Comment",
    "keywords": "django comment development ajax",
    "license": "MIT",
    "maintainer": "Radi Mustafa",
    "maintainer_email": "mus.radi85@gmail.com",
    "name": "django-comments-dab",
    "package_url": "https://pypi.org/project/django-comments-dab/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-comments-dab/",
    "project_urls": {
      "Documentation": "https://django-comment-dab.readthedocs.io/index.html",
      "Homepage": "https://github.com/radi85/Comment",
      "Source Code": "https://github.com/radi85/Comment"
    },
    "release_url": "https://pypi.org/project/django-comments-dab/1.6.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django Comment app. It can be associated with any given model.",
    "version": "1.6.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14244194,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc9cca10c6b24fee13ed330e8cbb4607e50470f8d44aafcc064f20d2ab56ae3d",
        "md5": "8d88d03d00de4d8acf38ad160e836759",
        "sha256": "f86de3671cb339b1353d4424fafa83a19539d2fa3f19666b997062ecafbab5d1"
      },
      "downloads": -1,
      "filename": "django-comments-dab-1.6.5.tar.gz",
      "has_sig": false,
      "md5_digest": "8d88d03d00de4d8acf38ad160e836759",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 122248,
      "upload_time": "2020-06-19T08:28:31",
      "upload_time_iso_8601": "2020-06-19T08:28:31.572943Z",
      "url": "https://files.pythonhosted.org/packages/fc/9c/ca10c6b24fee13ed330e8cbb4607e50470f8d44aafcc064f20d2ab56ae3d/django-comments-dab-1.6.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}