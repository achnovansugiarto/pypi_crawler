{
  "info": {
    "author": "Radico",
    "author_email": "mus.radi85@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": ".. image:: https://badge.fury.io/py/django-comments-dab.svg\n    :target: https://badge.fury.io/py/django-comments-dab\n\n.. image:: https://badge.fury.io/gh/radi85%2FComment.svg\n    :target: https://badge.fury.io/gh/radi85%2FComment\n\n.. image:: https://travis-ci.org/Radi85/Comment.svg\n    :target: https://travis-ci.org/Radi85/Comment\n\n.. image:: https://coveralls.io/repos/github/Radi85/Comment/badge.svg\n    :target: https://coveralls.io/github/Radi85/Comment\n\n.. image:: https://img.shields.io/pypi/pyversions/django-comments-dab.svg\n   :target: https://pypi.python.org/pypi/django-comments-dab/\n\n.. image:: https://img.shields.io/pypi/djversions/django-comments-dab.svg\n   :target: https://pypi.python.org/pypi/django-comments-dab/\n\ndjango-comments-dab\n===================\n\n**dab stands for Django-Ajax-Bootstrap**\n\n``django-comments-dab`` is a commenting application for Django-powered\nwebsites.\n\nIt allows you to integrate commenting functionality with any model you have e.g. blogs, pictures, video etc…\n\n*List of actions the authenticated user can do:*\n\n    1. Post a new comment.\n\n    2. Reply to an existing comment.\n\n    3. Edit a comment you posted.\n\n    4. Delete a comment you posted.\n\n\n- All actions are done by ajax calls - JQuery 3.2.1\n\n- Bootstrap 4.1.1 is used in comment templates for responsive design.\n\n\nInstallation\n------------\n\nRequirements:\n~~~~~~~~~~~~~\n\n    1. **django>=2.1**\n    2. **djangorestframework**  # only for API Framework\n    3. **Bootstrap 4.1.1**\n    4. **jQuery 3.2.1**\n\n\nInstallation:\n~~~~~~~~~~~~~\n\n\nInstallation is available via ``pip``\n\n::\n\n    $ pip install django-comments-dab\n\n\nor via source on github\n\n::\n\n    $ git clone https://github.com/radi85/Comment.git\n    $ cd Comment\n    $ python setup.py install\n\n\nComment Settings and urls:\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    1. Add ``comment`` to your installed_apps in your ``settings.py`` file. It should be added after ``django.contrib.auth``.\n    2. ``LOGIN_URL`` shall be defined in the settings.\n\nyour ``settings.py`` should look like the following:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        ...\n        'comment',\n        ..\n    )\n\n    LOGIN_URL = 'login'  # or your actual url\n\nIn your ``urls.py``:\n\n.. code:: python\n\n    urlpatterns = patterns(\n        path('admin/', admin.site.urls),\n        path('comment/', include('comment.urls')),\n        ...\n        path('api/', include('comment.api.urls')),  # only for API Framework\n        ...\n    )\n\nMigrations:\n~~~~~~~~~~~\n\nMigrate comment app:\n\n::\n\n    $ python manage.py migrate comment\n\n\n\nSetup\n-----\n\nStep 1 - Connecting comment model with the target model\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn your models.py add the field ``comments`` as a ``GenericRelation`` field to the required model.\n\nPS: Please note that field name must be ``comments`` **NOT** ``comment``.\n\nE.g. ``Post`` model, as shown below:\n\n.. code:: python\n\n    from django.contrib.contenttypes.fields import GenericRelation\n    from comment.models import Comment\n\n    class Post(models.Model):\n        author = models.ForeignKey(User)\n        title = models.CharField(max_length=200)\n        body = models.TextField()\n        # the field name should be comments\n        comments = GenericRelation(Comment)\n\nStep 2 - Adding template tags:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``render_comments`` *tag uses 2 positional and 2 optional args*:\n\n    1. Instance of the targeted model. (**positional**)\n    2. Request object. (**positional**)\n    3. oauth. (optional - Default is false)\n    4. comments_per_page (number of Comments Per Page - Default is 10)\n\n\n1. Basics usage:\n^^^^^^^^^^^^^^^^\n\n``include_static`` this tag will include required jquery and javascript file,\nif you already use jquery please make sure it is not the slim version which doesn't support ajax.\n``include_bootstrap`` tag is for bootstrap-4.1.1, if it’s already included\nin your project, get rid of this tag.\n\nIn your template (e.g. post_detail.html) add the following template tags where ``obj`` is the instance of post model.\n\n.. code:: python\n\n    {% load comment_tags %}  # Loading the template tag\n    {% render_comments obj request %}  # Render all the comments belonging to a passed object\n\n\n**Include static files:**\n\nThe ``comment`` app has three template tags for static files that the app requires.\nThese tags need to be included in the end of your base template.\n\n\n- **Case 1:** You already have jQuery in your project then the following tags shall be included below jQuery file:\n\n.. code:: html\n\n    {% load comment_tags %}  <!-- Loading the template tag -->\n\n    <script src=\"https://code.jquery.com/jquery-3.3.1.js\"></script>\n    {% include_static %}  <!-- Include comment.js file only -->\n    {% include_bootstrap %}  <!-- Include bootstrap-4.1.1 - remove this line if it is already used in your project -->\n\n\n- **Case 2:** You don't have jQuery in your project then the following tags shall be included:\n\n.. code:: html\n\n    {% load comment_tags %}  <!-- Loading the template tag -->\n\n    {% include_static_jquery %}  <!-- Include mini jQuery 3.2.1 and required js file -->\n    {% include_bootstrap %}  <!-- Include bootstrap 4.1.1 - remove this line if BS 4.1.1 is already used in your project -->\n\n\n2. Advanced usage:\n^^^^^^^^^^^^^^^^^^\n\n    **1. Customize or remove the pagination:**\n\n    By default the comments will be paginated, 10 comments per page.\n    To disabled the pagination pass ``comments_per_page=None``\n    To change the default number, pass ``comments_per_page=number`` to ``render_comments``.\n\n    .. code:: html\n\n        {% load comment_tags %}  <!-- Loading the template tag -->\n\n        {% render_comments obj request comments_per_page=5 %}  <!-- Include all the comments belonging to a certain object -->\n        {% include_bootstrap %} <!-- Include bootstrap 4.1.1 - remove this line if BS 4.1.1 is already used in your project -->\n        {% include_static %} <!-- Include jQuery 3.2.1 and required js file -->\n\n\n\n    **2. Integrate existing profile app with comments app:**\n\n    If you have a profile model for the user and you would like to show the\n    profile image next to each comment, do the following steps:\n\n    - Add ``PROFILE_APP_NAME`` and ``PROFILE_MODEL_NAME`` variables to your ``settings.py`` file.\n        e.g if user profile app is called ``accounts`` and profile model is called ``UserProfile``\n\n        ``settings.py``:\n\n        .. code:: python\n\n            PROFILE_APP_NAME = 'accounts'\n            PROFILE_MODEL_NAME = 'UserProfile' # letter case insensitive\n\n\n\n    - Make sure that ``get_absolute_url`` method is defined in your profile model.\n\n        .. code:: python\n\n            from django.urls import reverse\n\n            class UserProfile(models.Model):\n                user = models.OneToOneField(User, on_delete=models.CASCADE)\n                ...\n                ...\n\n                # this method must be defined for appropriate url mapping in comments section\n                def get_absolute_url(self):\n                    return reverse('your_profile_url_name')\n\n\nWeb API\n-------\n\ndjango-comments-dab uses django-rest-framework to expose a Web API that provides\ndevelopers with access to the same functionality offered through the web user interface.\n\nThere are 5 methods available to perform the following actions:\n\n\n    1. Post a new comment. (Authenticated)\n\n    2. Reply to an existing comment. (Authenticated)\n\n    3. Edit a comment you posted. (Authenticated)\n\n    4. Delete a comment you posted. (Authenticated)\n\n    5. Retrieve the list of comments and associated replies to a given content type and object ID.\n\nThese actions are explained below.\n\nSetup:\n~~~~~~\n\nTo integrate the comment API in your content type (e.g Post model), in ``serializers.py``\nfor the Post model add comments field as shown below:\n\n\n.. code:: python\n\n    from rest_framework import serializers\n    from comment.models import Comment\n    from comment.api.serializers import CommentSerializer\n\n\n    class PostSerializer(serializers.ModelSerializer):\n\n        comments = serializers.SerializerMethodField()\n\n        class Meta:\n            model = Post\n            fields = ('id',\n                      ...\n                      ...\n                      'comments')\n\n        def get_comments(self, obj):\n            comments_qs = Comment.objects.filter_parents_by_object(obj)\n            return CommentSerializer(comments_qs, many=True).data\n\n\nBy default all fields in profile model will be nested inside the user object in JSON response.\nThis can only happen if the profile attributes are defined in your ``settings.py``.\nIn case you would like to serialize particular fields in the profile model you should explicitly\ndeclare the ``COMMENT_PROFILE_API_FIELDS`` tuple inside your ``settings.py``:\n\n\n.. code:: python\n\n        PROFILE_APP_NAME = 'accounts'\n        PROFILE_MODEL_NAME = 'userprofile'\n        # the field names below must be similar to your profile model fields\n        COMMENT_PROFILE_API_FIELDS = ('display_name', 'birth_date', 'image')\n\n\nComment API actions:\n~~~~~~~~~~~~~~~~~~~~\n\n    **1- Retrieve the list of comments and associated replies to a given content type and object ID:**\n\n    This action can be performed by providing the url with data queries related to the content type.\n\n    Get request accepts 3 params:\n\n\n    - ``type``: is the model name of the content type that have comments associated with it.\n    - ``id``: is the id of an object of that model\n\n\n\n\n    For example if you are using axios to retrieve the comment list of second object (id=2) of a model (content type) called post.\n    you can do the following:\n\n    ::\n\n        $ curl 'http://localhost:8000/api/comments/?type=TYPE&id=ID'\n\n\n    **2- Post a comment or reply to an existing comment:**\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    - ``parent_id``: is 0 or **NOT PROVIDED** for parent comments and for reply comments must be the id of parent comment\n\n\n    Example: posting a parent comment\n\n    ::\n\n        $ curl -X POST -u USERNAME:PASSWORD -d \"content=CONTENT\" \"http://localhost:8000/api/comments/create/?type=MODEL&id=ID&parent_id=0\"\n\n\n    **3- Update a comment:**\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    This action requires the ``comment.id`` that you want to update:\n\n\n    ::\n\n        $ curl -X PUT -u USERNAME:PASSWORD -d \"content=CONTENT\" \"http://localhost:8000/api/comments/ID/\n\n\n\n    **4- Delete a comment:**\n\n    Authorization must be provided as a TOKEN or USERNAME:PASSWORD.\n\n    This action requires the ``comment.id`` that you want to delete:\n\n    ::\n\n        $ curl -X DELETE -u USERNAME:PASSWORD \"http://localhost:8000/api/comments/ID/\n\n\n\nStyle Customize:\n----------------\n\n1- Bootstrap classes:\n~~~~~~~~~~~~~~~~~~~~~\n\nBS class used in the default template can be now customized from within your templates directory as follows:\n\n    1. Create ``comment`` folder inside your templates directory.\n\n    2. Create new template file ``.html`` with the same name of the default template you wish to override BS classes in it.\n\n\nfor example to override the BS classes of comment and reply btn do the following:\n\ncreate ``templates/comment/create_comment.html``\n\n.. code:: python\n\n    {% extends \"comment/create_comment.html\" %}\n\n    {% block post_btn_cls %}\n    btn btn-primary btn-block btn-sm\n    {% endblock post_btn_cls %}\n\n`Read the Doc`_ for more info about template names and block tags name.\n\n.. _`Read the Doc`: https://django-comment-dab.readthedocs.io/\n\n\n2- CSS file:\n~~~~~~~~~~~~\n\nIf you want to customize the default style of comments app , you can do the following steps:\n\n    1. Create a ``comment.css`` file inside your ``static/css`` directory.\n\n    2. The new created file will override the original file used in the app.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/radi85/Comment",
    "keywords": "comment comment development",
    "license": "MIT",
    "maintainer": "Radi Mustafa",
    "maintainer_email": "mus.radi85@gmail.com",
    "name": "django-comments-dab",
    "package_url": "https://pypi.org/project/django-comments-dab/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-comments-dab/",
    "project_urls": {
      "Documentation": "https://django-comment-dab.readthedocs.io/index.html",
      "Homepage": "https://github.com/radi85/Comment",
      "Source Code": "https://github.com/radi85/Comment"
    },
    "release_url": "https://pypi.org/project/django-comments-dab/1.4.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django Comment app. It can be associated with any given model.",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14244194,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bce098862793ffc0e7ca71a2cfe2acaaa4bd3df4500da057bf45cc1e7deb902",
        "md5": "44bdd12d61f43228d72a968bc11aca76",
        "sha256": "82af4b8550bf14c5c61a9bf1969e2ef96873f065a6915bd72006f9d607e989f5"
      },
      "downloads": -1,
      "filename": "django-comments-dab-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "44bdd12d61f43228d72a968bc11aca76",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 100506,
      "upload_time": "2020-04-26T18:01:16",
      "upload_time_iso_8601": "2020-04-26T18:01:16.511001Z",
      "url": "https://files.pythonhosted.org/packages/7b/ce/098862793ffc0e7ca71a2cfe2acaaa4bd3df4500da057bf45cc1e7deb902/django-comments-dab-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}