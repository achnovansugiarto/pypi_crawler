{
  "info": {
    "author": "Thomas Khyn",
    "author_email": "thomas@ksytek.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Other Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development",
      "Topic :: Text Editors :: Text Processing"
    ],
    "description": "djinga\n======\n\n|copyright| 2014 Thomas Khyn\n\nUnobtrusive jinja2 integration in Django\n\nFreely inspired from django-jinja_ and django-jinja2_, as none of them met all\nmy expectations!\n\n\nCompatible with django 1.4 to 1.7 and relevant python versions (2.7 to 3.4).\n\n\nUsage\n-----\n\n- Install djinga using the method of your choice\n- Add 'djinga' to your INSTALLED_APPS\n- Change the TEMPLATE_LOADERS settings to::\n\n   TEMPLATE_LOADERS = (\n      'djinga.loaders.FileSystemLoader',\n      'djinga.loaders.AppLoader',\n   )\n\n- Add the relevant `settings`_ for jinja2\n\n\nHow it works\n------------\n\nBy default, a template will be rendered using Django's built-in template engine\nif it has a .html, .htm, .djhtml or .djhtm file extension. If it has a .jjhtml\nor .jjhtm file extension, it will be rendered by Jinja2, using the setting\nvalues provided in django's setting module.\n\n\nSettings\n--------\n\nJINJA2_DJ_EXTS\n   A list or tuple of file extensions (with or without the leading dot) for\n   templates that should be rendered with Django's internal template engine.\n\n   Defaults to ``('html', 'htm', 'jjhtml', 'jjhtm')``\n\nJINJA2_JJ_EXTS\n   A list or tuple of the file extensions (with or without the leading dot) for\n   templates that should be rendered with Jinja2.\n\n   Defaults to ``('jjhtml', 'jjhtm')``\n\nJINJA2_CONDITION\n   A function taking as sole argument the path of the template file and\n   returning True if the file should be rendered with Jinja2. Defaults to a\n   function returning True if the extension is in JINJA2_JJ_EXTS\n\nJINJA2_EXTENSIONS\n   A tuple or list of extensions to be loaded by jinja2 (as python objects or\n   paths to the python objects). `Some extensions`_ are shipped with\n   djinga under ``djinga.ext.*``.\n\nJINJA2_ENV_ARGS\n   The jinja2 environment's constructor keyword arguments as a dictionary.\n\nJINJA2_GLOBALS\n   The jinja2 globals as a dictionary.\n\nJINJA2_FILTERS\n   The jinja2 filters as a dictionary.\n\nJINJA2_LOAD_FROM\n   A tuple or list of module paths to load globals and filters from. This\n   advantageously complements or replaces ``JINJA_GLOBALS`` and\n   ``JINJA2_FILTERS``. See `Adding globals and filters`_ for details.\n\nJinja2 extensions\n-----------------\n\nDjinga comes with several Jinja2 extensions:\n\ndjinga.ext.static\n   Provides a ``{% static 'path' %}`` tag to refer to Django's staticfiles\n   directory\n\ndjinga.ext.css\n   Provides a ``{% css 'rel/path/to/file.css' %}`` tag that generates a\n   HTML link element refering to the css file located at a relative path in\n   a css directory. The css directory's path can be defined relatively to\n   Django's staticfiles directory through the setting JINJA2_STATIC_CSS\n\ndjinga.ext.js\n   Same as djinga.ext.css but generates a HTML script element refering to a\n   javascript file. The js directory's relative path can be set through the\n   setting JINJA2_STATIC_JS\n\ndjinga.ext.media\n   Simply concatenates django's MEDIA_URL to the argument provided\n\ndjinga.ext.django\n   From `a PR on coffin`_.\n   Provides a ``{% django %}{% enddjango %}`` tag to include django template\n   language in a jinja2 template. For this tag to work, the\n   ``django.core.context_processors.request`` context processor must be\n   enabled.\n\ndjinga.ext.csrf_token\n   From coffin_\n   Provides a Django-like ``{% csrf_token %}`` tag.\n\ndjinga.ext.url\n   Provides a tag for URL reversing, similar to the django templates one.\n\ndjinga.ext.htmlcompress.HTMLCompress / SelectiveHTMLCompress\n   Based on `Armin Ronacher's version`_.\n   Eliminates useless whitespace at template compilation time without extra\n   overhead.\n\nDjango template tags\n--------------------\n\nThe following tags are available in any django template explicitly loading\n``djinga_tags`` using the ``{% load djinga_tags %}`` statement.\n\nextends\n   Overrides the standard ``{% extends %}`` tag and enables it to refer to\n   jinja2 files as well as normal django template files. While the template\n   engine for the current file remains Django's one, the template engine for\n   the extended file can be either Jinja2 or Django, depending on the file\n   extension (in JINJA2_DJ_EXTS or JINJA2_JJ_EXTS)\n\n\n\nAdding globals and filters\n--------------------------\n\nA straightforward way to add globals and filters and make them available from\nyour Jinja2 templates is to add them to the ``JINJA2_GLOBALS`` or the\n``JINJA2_FILTERS`` in the settings module.\n\nHowever, this is not always convenient nor possible (import loops), and djinga\ntherefore provides a way to ease this process, through the ``jj_global`` and\n``jj_filter`` decorators in combination with the ``JINJA2_LOAD_FROM`` setting.\n\nBasically, the decorators mark the functions as Jinja2 globals or filters,\nwhile the setting (a list of module paths) indicates djinga where to look for\nthem.\n\nA short example is better than long explanations, so here we go.\n\nThis::\n\n   [my_app/my_module.py]\n   from djinga.register import jj_filter, jj_global\n\n   @jj_global\n   def my_tag(*args, **kw):\n      pass\n\n   @jj_filter\n   def my_filter(*args, **kw)\n      pass\n\n   [settings.py]\n   JINJA2_LOAD_FROM = (\n      'my_app.my_module',\n   )\n\nis equivalent to this::\n\n   [my_app/my_module.py]\n   def my_tag(*args):\n      pass\n\n   def my_filter(*args, **kw)\n      pass\n\n   [settings.py]\n   from my_module import my_tag, my_filter\n   JINJA2_GLOBALS = {'my_tag': my_tag}\n   JINJA2_FILTERS = {'my_filter': my_filter}\n\n...with the significant advantage of not requiring a possibly issue-prone\n``import`` statement in the ``settings`` module.\n\nThe ``jj_global`` and ``jj_filter`` decorators are compatible with any of the\n`Jinja2 built-in decorators`_. They do not affect the behavior nor the\nsignature of the decorated function, so you can use it normally (as a normal\nDjango template tag or filter, for example).\n\nThe collected globals and filters are appended to the ones already specified\nin ``JINJA2_GLOBALS`` and ``JINJA2_FILTERS``.\n\n\n``makemesssages`` management command\n------------------------------------\n\nAdapted from coffin_.\n\nDjinga overrides the Django ``makemessages`` core management command to include\nthe specific Jinja2 translation tags and ensure the strings marked for\ntranslation in Jinja2 templates appear in the translations dictionary.\n\n\n.. |copyright| unicode:: 0xA9\n\n.. _django-jinja: https://github.com/niwibe/django-jinja\n.. _django-jinja2: https://github.com/yuchant/django-jinja2\n.. _`Some extensions`: `Jinja2 extensions`_\n.. _`a PR on coffin`: https://github.com/coffin/coffin/pull/12/files?short_path=88b99bb#diff-e511b022f54e135b99f896c8fb355067R131\n.. _coffin: https://github.com/coffin/coffin/pull/12/files?short_path=88b99bb\n.. _`Armin Ronacher's version`: https://github.com/mitsuhiko/jinja2-htmlcompress/blob/master/jinja2htmlcompress.py\n.. _`Jinja2 built-in decorators`: http://jinja.pocoo.org/docs/api/#utilities",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/tkhyn/djinga",
    "keywords": "django,jinja2",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "djinga",
    "package_url": "https://pypi.org/project/djinga/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djinga/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/tkhyn/djinga"
    },
    "release_url": "https://pypi.org/project/djinga/1.1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Unobtrusive jinja2 integration in Django",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3404995,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc384badfefb306940d561fbff9e388c49c9c596365054e40fb7799b36d578ad",
        "md5": "4fed7cca69faed659fa17c9508f84c7b",
        "sha256": "3f3ddb4e9d12cf120decf187ab10538fcb23ba85e5e779b6f93ac1933a184b70"
      },
      "downloads": -1,
      "filename": "djinga-1.1.2.zip",
      "has_sig": false,
      "md5_digest": "4fed7cca69faed659fa17c9508f84c7b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24929,
      "upload_time": "2014-08-15T01:06:31",
      "upload_time_iso_8601": "2014-08-15T01:06:31.619082Z",
      "url": "https://files.pythonhosted.org/packages/bc/38/4badfefb306940d561fbff9e388c49c9c596365054e40fb7799b36d578ad/djinga-1.1.2.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}