{
  "info": {
    "author": "the m group, https://m.pr/",
    "author_email": "hi@m.pr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-distill\n\n`django-distill` is a minimal configuration static site generator and publisher\nfor Django. Requires at least Django 1.10 or Django 2.0.\n\n`django-distill` extends existing Django sites with the ability to export\nfully functional static sites. It is suitable for sites such as blogs that have\na mostly static front end but you still want to use a CMS to manage the\ncontent.\n\nIt plugs directly into the existing Django framework without the need to write\ncustom renderers or other more verbose code. You can also use existing fully\ndynamic sites and just generate static pages for a small subsection of pages\nrather than the entire site.\n\nFor static files on CDNs we use the following 'cache buster' library to allow\nfor fast static media updates when pushing changes:\n\nhttps://github.com/mgrp/django-cachekiller\n\n\n# Installation\n\nInstall from pip:\n\n```bash\n$ pip install django-distill\n```\n\nAdd `django_distill` to your `INSTALLED_APPS` in your `settings.py`:\n\n```python\nINSTALLED_APPS += ('django_distill',)\n```\n\nThat's it.\n\n\n# Limitations\n\n`django-distill` generates static pages and therefore only views which allow\n`GET` requests that return an `HTTP 200` status code are supported.\n\nIt is assumed you are using URI parameters such as `/blog/123-abc` and not\nquerystring parameters such as `/blog?post_id=123&title=abc`. Querystring\nparameters do not make sense for static page generation for obvious reasons.\n\nAdditionally With one-off static pages dynamic internationalisation won't work\nso all files are generated using the `LANGUAGE_CODE` value in your\n`settings.py`.\n\nStatic media files such as images and style sheets are copied from your static\nmedia directory defined in `STATIC_ROOT`. This means that you will want to run\n`./manage.py collectstatic` **before** you run `./manage.py distill-local`\nif you have made changes to static media. `django-distill` doesn't chain this\nrequest by design, however you can enable it with the `--collectstatic`\nargument.\n\n\n# Usage\n\nAssuming you have an existing Django project, edit a `urls.py` to include the\n`distill_path` function which replaces Django's standard `path` function and\nsupports the new keyword arguments `distill_func` and `distill_file`. The\n`distill_func` argument should be provided with a function or callable class\nthat returns an iterable or None. The `distill_file` argument is entirely\noptional and allows you to override the URL that would otherwise be generated\nfrom the reverse of the URL regex. This allows you to rename URLs like\n`/example` to any other name like `example.html`. As of v0.8 any URIs ending\nin a slash `/` are automatically modified to end in `/index.html`. An example\ndistill setup for a theoretical blogging app would be:\n\n```python\n# Replaces the standard django.conf.path, identical syntax\nfrom django_distill import distill_path\n\n# Views and models from a theoretical blogging app\nfrom blog.views import PostIndex, PostView, PostYear\nfrom blog.models import Post\n\ndef get_index():\n    # The index URI path, '', contains no parameters, named or otherwise.\n    # You can simply just return nothing here.\n    return None\n\ndef get_all_blogposts():\n    # This function needs to return an iterable of dictionaries. Dictionaries\n    # are required as the URL this distill function is for has named parameters.\n    # You can just export a small subset of values here if you wish to\n    # limit what pages will be generated.\n    for post in Post.objects.all():\n        yield {'blog_id': post_id, 'blog_title': post.title}\n\ndef get_years():\n    # You can also just return an iterable containing static strings if the\n    # URL only has one argument and you are using positional URL parameters:\n    return (2014, 2015)\n    # This is really just shorthand for ((2014,), (2015,))\n\nurlpatterns = (\n    # e.g. / the blog index\n    distill_path('',\n                 PostIndex.as_view(),\n                 name='blog-index',\n                 distill_func=get_index,\n                 # / is not a valid file name! override it to index.html\n                 distill_file='index.html'),\n    # e.g. /post/123-some-post-title using named parameters\n    distill_path('post/<int:blog_id>-<slug:blog_title>',\n                 PostView.as_view(),\n                 name='blog-post',\n                 distill_func=get_all_blogposts),\n    # e.g. /posts-by-year/2015 using positional parameters\n    distill_path('posts-by-year/<int:year>',\n                 PostYear.as_view(),\n                 name='blog-year',\n                 distill_func=get_years),\n)\n```\n\nYour site will still function identically with the above changes. Internally\nthe `distill_func` and `distill_file` parameters are removed and the URL is\npassed back to Django for normal processing. This has no runtime performance\nimpact as this happens only once upon starting the application.\n\nIf you prefer, you can use the `distill_url` or `distill_re_path` functions\ninstead. These replace the `django.conf.urls.url` or `django.urls.url` and\n`django.urls.re_path` functions respectively. Their usage is identical to the\nabove:\n\n```python\nfrom django_distill import distill_url, distill_re_path\n\nurlpatterns = (\n    distill_url(r'some/regex'\n                SomeView.as_view(),\n                name='url-view',\n                distill_func=some_func),\n    distill_re_path(r'some/other/regex'\n                SomeOtherView.as_view(),\n                name='url-other-view',\n                distill_func=some_other_func),\n)\n```\n\n**Note** `django-distill` will track the Django project changes, therefore at\nsome point the `distill_url` in the future when Django itself depreciates the\n`django.conf.url` function `distill_url` will cease to work. You can use\n`distill_re_path` as a drop-in replacement. It is advisable to use\n`distill_path` or `distill_re_path` if you're building a site now.\n\n\n# The `distill-local` command\n\nOnce you have wrapped the URLs you want to generate statically you can now\ngenerate a complete functioning static site with:\n\n```bash\n$ ./manage.py distill-local [optional /path/to/export/directory]\n```\n\nUnder the hood this simply iterates all URLs registered with `distill_url` and\ngenerates the pages for them using parts of the Django testing framework to\nspoof requests. Once the site pages have been rendered then files from the\n`STATIC_ROOT` are copied over. Existing files with the same name are replaced in\nthe target directory and orphan files are deleted.\n\n`distill-local` supports the following optional arguments:\n\n`--collectstatic`: Automatically run `collectstatic` on your site before\nrendering, this is just a shortcut to save you typing an extra command.\n\n`--quiet`: Disable all output other than asking confirmation questions.\n\n`--force`: Assume 'yes' to all confirmation questions.\n\n**Note**  If any of your views contain a Python error then rendering will fail\nthen the stack trace will be printed to the terminal and the rendering command\nwill exit with a status code of 1.\n\n\n# The `distill-publish` command\n\n```bash\n$ ./manage.py distill-publish [optional destination here]\n```\n\nIf you have configured at least once publishing destination (see below) you can\nuse the `distill-publish` command to publish the site to a remote location.\n\nThis will perform a full synchronisation, removing any remote files that are no\nlonger present in the generated static site and uploading any new or changed\nfiles. The site will be built into a temporary directory locally first when\npublishing which is deleted once the site has been published. Each file will be\nchecked that it has been published correctly by requesting it via the\n`PUBLIC_URL`.\n\n`distill-publish` supports the following optional arguments:\n\n`--collectstatic`: Automatically run `collectstatic` on your site before\nrendering, this is just a shortcut to save you typing an extra command.\n\n`--quiet`: Disable all output other than asking confirmation questions.\n\n`--force`: Assume 'yes' to all confirmation questions.\n\n**Note** that this means if you use `--force` and `--quiet` that the output\ndirectory will have all files not part of the site export deleted without any\nconfirmation.\n\n**Note**  If any of your views contain a Python error then rendering will fail\nthen the stack trace will be printed to the terminal and the rendering command\nwill exit with a status code of 1.\n\n\n# The `distill-test-publish` command\n\n```bash\n$ ./manage.py distill-test-publish [optional destination here]\n```\n\nThis will connect to your publishing target, authenticate to it, upload a\nrandomly named file, verify it exists on the `PUBLIC_URL` and then delete it\nagain. Use this to check your publishing settings are correct.\n\n`distill-test-publish` has no arguments.\n\n\n# Optional configuration settings\n\nYou can set the following optional `settings.py` variables:\n\n**DISTILL_DIR**: string, default directory to export to:\n\n```python\nDISTILL_DIR = '/path/to/export/directory'\n```\n\n**DISTILL_PUBLISH**: dictionary, like Django's `settings.DATABASES`, supports\n`default`:\n\n```python\nDISTILL_PUBLISH = {\n    'default': {\n        ... options ...\n    },\n    'some-other-target': {\n        ... options ...\n    },\n}\n```\n\n\n# Publishing targets\n\nYou can automatically publish sites to various supported remote targets through\nbackends just like how you can use MySQL, SQLite, PostgreSQL etc. with\nDjango by changing the backend database engine. Currently the engines supported\nby `django-distill` are:\n\n**django_distill.backends.rackspace_files**: Publish to a Rackspace Cloud Files\n  container. Requires the Python library `pyrax` (`$ pip install pyrax`). The\n  container must already exist (use the Rackspace Cloud control panel). Options:\n\n```python\n'some-rackspace-container': {\n    'ENGINE': 'django_distill.backends.rackspace_files',\n    'PUBLIC_URL': 'http://.../',\n    'USERNAME': '...',\n    'API_KEY': '...',\n    'REGION': '...',\n    'CONTAINER': '...',\n},\n```\n\n**django_distill.backends.amazon_s3**: Publish to an Amazon S3 bucket. Requires\n  the Python library `boto` (`$ pip install boto`). The bucket must already\n  exist (use the AWS control panel). Options:\n\n```python\n'some-s3-container': {\n    'ENGINE': 'django_distill.backends.amazon_s3',\n    'PUBLIC_URL': 'http://.../',\n    'ACCESS_KEY_ID': '...',\n    'SECRET_ACCESS_KEY': '...',\n    'BUCKET': '...',\n},\n```\n\n**django_distill.backends.google_storage**: Publish to a Google Cloud Storage\n  bucket. Requires the Python libraries `google-api-python-client` and\n  `google-cloud-storage`\n  (`$ pip install google-api-python-client google-cloud-storage`). The bucket\n  must already exist and be set up to host a public static website (use the\n  Google Cloud control panel). Options:\n\n```python\n'some-google-storage-bucket': {\n    'ENGINE': 'django_distill.backends.google_storage',\n    'PUBLIC_URL': 'https://storage.googleapis.com/[bucket.name.here]/',\n    'JSON_CREDENTIALS': '/path/to/some/credentials.json',\n    'BUCKET': '[bucket.name.here]',\n},\n```\n\n# Tests\n\nThere is a minimal test suite, you can run it by cloing this repository,\ninstalling the required dependancies in `requirements.txt` then execuiting:\n\n```bash\n# ./run-tests.py\n```\n\n\n# Contributing\n\nAll properly formatted and sensible pull requests, issues and comments are\nwelcome.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mgrp/django-distill",
    "keywords": "django,distill,static,s3,rackspace,google cloud storage",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-distill",
    "package_url": "https://pypi.org/project/django-distill/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-distill/",
    "project_urls": {
      "Homepage": "https://github.com/mgrp/django-distill"
    },
    "release_url": "https://pypi.org/project/django-distill/1.5/",
    "requires_dist": [
      "future",
      "django",
      "requests"
    ],
    "requires_python": "",
    "summary": "Static site renderer and publisher for Django.",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17521399,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cba4dd911903038547ab7762805bcbc58cef3677cde58c2183c370ad9566afa2",
        "md5": "6984c8b3e4b3ea365750b8fbfae1e4ee",
        "sha256": "2976944f88517bbcfcf5a51b16d2b95d98d664601c964d8632d541cbbd6f79c5"
      },
      "downloads": -1,
      "filename": "django_distill-1.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6984c8b3e4b3ea365750b8fbfae1e4ee",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 22975,
      "upload_time": "2018-10-19T13:29:45",
      "upload_time_iso_8601": "2018-10-19T13:29:45.821466Z",
      "url": "https://files.pythonhosted.org/packages/cb/a4/dd911903038547ab7762805bcbc58cef3677cde58c2183c370ad9566afa2/django_distill-1.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c204c8d2ecf317fa0f737b373f2ee8400a4927542907ea5d66c203ee6df3f129",
        "md5": "8dd3974ac19c65221bc16785ffd3ce39",
        "sha256": "a032cb098a7b36a5859b12bb4db832abd983533387733481e2600e6c716bf7a8"
      },
      "downloads": -1,
      "filename": "django-distill-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "8dd3974ac19c65221bc16785ffd3ce39",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15250,
      "upload_time": "2018-10-19T13:29:47",
      "upload_time_iso_8601": "2018-10-19T13:29:47.304747Z",
      "url": "https://files.pythonhosted.org/packages/c2/04/c8d2ecf317fa0f737b373f2ee8400a4927542907ea5d66c203ee6df3f129/django-distill-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}