{
  "info": {
    "author": "Kacper Sawicki, Krzysztof Krze≈õlak",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Prototype with Orange using Live Objects\n### Discover Orange  [**Live Objects**](https://liveobjects.orange-business.com) using dedicated SDK for **Python and uPython compatible** boards and systems.\n\nThis code wraps all the functions necessary to make your object work with Live Objects.\n\n You can declare parameters, which you can later update OTA from Live objects. You can also create commands to trigger actions remotely.\n Only thing u must do yourself is connecting the board with internet.\n\nCode uses MQTT connection to exchange data with Live objects under the hood to keep your parameters up to date or execute the commands received without you having to take care of them (apart from writing the code of these commands, of course).\n\n## Compatibility ##\n| System | MQTT | MQTTS |\n| :--- | :---: | :---: |\n| Linux | OK |OK |\n| Windows | OK |OK |\n| Raspberry Pi | OK |OK |\n| ESP8266 | OK | - |\n| ESP32 | OK | OK |\n\n## Prerequisites/dependecies ##\nThis code needs a few libraries to run\n- Python needs [paho-mqtt](https://pypi.org/project/paho-mqtt/)\n- uPython needs [umqttsimple, umqttrobust and ssl](https://github.com/micropython/micropython-lib)\n\n## How to use ##\n\n1. Log in to [Live Objects](https://liveobjects.orange-business.com) or request a [trial account](https://liveobjects.orange-business.com/#/request_account) (up to 10 devices for 1 year) if you don't have one.\n2. Create an [API key](https://liveobjects.orange-business.com/#/administration/apikeys) for your device. Give it a name, select the *Device access* role and validate. Copy the key.\n3. Clone or download the directory from Github.\n4. Change **\\<APIKEY\\>** in sketches to one you generated\n5. Run script\n\n## Developer guide ##\n\n### Constructor ###\n\nConstructor of LiveObjects looks like this\n\n```Python\nlo = LiveObjects.Connection(\"mqttID\",LiveObjects.NONE,\"<APIKEY>\", debug = True)\n```\n\nFirst parameter is ID of the device, second is type of connection security ( NONE / SSL), third is Api Key to LiveObjects and last is debug mode, if you don't want to output debug messages set it to False. You can also use `lo.setDebug(False)`.\n\n### Debug messages ###\n\nYou can use LiveObjects to output debug messages.\n```Python\nfoo = 21\n#INFO / ERROR / WARNING\nlo.outputDebug(LiveObjects.INFO,\"example value\", foo, ...)\n#Output: [INFO] example value 21 ...\n```\n\n### Declare parameters ###\nYou can update over the air some parameters of your sketch using Live Objects's parameters. Parameters and Commands must be declared **before** your device connects to Live Objects.\n\nYou can declare parameters with the `addParameter()` instruction, which accepts the following arguments:\n- the label of your parameter as it will be displayed on Live Objects;\n- the value of parameter\n- parameter type [INT STRING FLOAT BINARY]\n- (optional) a callback function, if you need to perform some tasks after the parameter has been updated\n\nTo retrieve a parameter use function `getParameter()` which takes following arguments:\n- Parameter name\n\nExample:\n```Python\nlo.addParameter(\"messageRate\", 25, LiveObjects.INT);\nlo.addParameter(\"sendDHTData\", true ,LiveObjects.BINARY, myCallbackFunction);\n...\nif lo.getParameter(\"sendDHTData\"):\n    lo.addToPayload(\"temperature\",DHT.readTemeprature())\n    lo.addToPayload(\"humidity\",DHT.readHumidity())\n```\n\nThe callback function takes 2 arguments\n```Python\ndef myCallbackFunction(parameterName, newValue):\n  // do stuff\n```\n\nFurther reading on Live Objects' [Parameters](https://liveobjects.orange-business.com/doc/html/lo_manual.html#_configuration).\n\n### Declare commands ###\nCommands lets you trigger specific actions on your device from Live Objects. Parameters and Commands must be declared _before_ your device connects to Live Objects.\n\nCommands can be declared using the `addcommand()` instruction, which accepts the following arguments:\n- the label of your command\n- the callback function that will execute the command.\n```Python\nlo.addParameter(\"a command\", myCallback);\n```\n\nThe callback function should take 1 parameter and return dictonary\n```Python\ndef myCallback(args={}):\n  // do stuff\n  return {}\n```\n\nArguments and response are optional when using commands, but they can be useful if you want to pass parameters to your function. For instance, you could define a `play tone` command that will use some parameters like the frequency of the tone, or its duration.\n- Any incoming arguments will be passed as member of a dictonary\n- You can pass response arguments in the form of a dictonary by returning them\n```Python\ndef playTone(args={}):\n  duration = args[\"duration\"]\n  frequency = args[\"frequency\"]\n  // play the tone accordingly to arguments\n  ...\n  return {\"I played\":\"the tone\"}\n}\n\ndef setup():\n  lo.addCommand(\"play tone\", playTone)\n```\n> :warning: **Command name and arguments are case-sensitive when creating the command on Live Objects.**: On the opposite, there is no specific order for specifying the command arguments.\n\nFurther reading on Live Objects' [Commands](https://liveobjects.orange-business.com/doc/html/lo_manual.html#MQTT_DEV_CMD).\n\n### Sending data ###\nYou can send data very easily to Live Objects.\n\n#### Dead simple method ####\nCompose your payload using the `addToPayload()` instruction. You will need to provide a label for your value, and the data itself. You data can be of any simple type.\n\nData is added on each call to `addToPayload()`, so repeat the instruction if you have multiple data to send. When your payload is ready, send it using `sendData()`. That simple.\n```Python\nvalue=21\nmyOtherValue=37\n\ndef foo():\n  // collect data\n  lo.addToPayload(\"my data\", value)\n  lo.addToPayload(\"my other data\", myOtherValue)\n  lo.sendData() # send to LiveObjects\n```\n\nAs soon the data is send, your payload is cleared and waiting for the next sending.\n\n### Advanced payload feautres ###\n```Python\n  #add \"model\" property to your message\n  lo.addModel(\"exampleName\")\n\n  #Add \"tag\" property to your message\n  lo.addTag(\"kitchen\")\n  lo.addTags([\"humidity\",\"bathroom\"])\n\n  #Use your object as payload (this function doesn't append current paylod)\n  obj = [\"example\":\"value\", \"example2\":\"value2\" ]\n  lo.setObjectAsPayload(obj)\n```\n\n\n### Connect, disconnect and loop ###\nYou can control the connection and disconnection of your device using `connect()` and `disconnect()`.\n\n\n\nIn order to check for any incoming configuration update or command, you need to keep the `loop()` instruction in your main loop.\n```Python\ndef foo():\n  lo.connect();\n  while True:\n     #Do some stuff\n     #...\n     lo.loop(); #Keep this in main loop\n  lo.disconnect()\n```\n\n\n# Installation guide for uPython #\n## Example for ESP8266 ##\n## Requirements ##\n1. [ampy](https://learn.adafruit.com/micropython-basics-load-files-and-run-code/install-ampy)\n2. [umqttsimple, umqttrobust and ssl](https://github.com/micropython/micropython-lib)\n3. [PuTTY](https://www.putty.org/) (for Windows)\n\n## Installation steps ##\n1. Copy files into device\n  ```\n  ampy -pCOMXX put umqttrobus.py \n  ampy -pCOMXX put umqttsimple.py \n  ampy -pCOMXX put ssl.py \n  ampy -pCOMXX put LiveObjects //It will copy directory with its content \n  ```\n2. Prepare your sketch and save it as main.py then copy file into device\n```\nampy -pCOMXX put main.py\n```\n3. Setup internet connection in boot.py file and upload it into device.\n```Python\n# This file is executed on every boot (including wake-boot from deepsleep)\n#import esp\n#esp.osdebug(None)\nimport uos, machine\n#uos.dupterm(None, 1) # disable REPL on UART(0)\nimport gc\n#import webrepl\n#webrepl.start()\ngc.collect()\n\n\n#Network connection\nimport network\nsta_if = network.WLAN(network.STA_IF)\nif not sta_if.isconnected():\n    print('connecting to network...')\n    sta_if.active(True)\n    sta_if.connect('SSID', 'PASS')\n    while not sta_if.isconnected():\n        pass\nprint('network config:', sta_if.ifconfig())\n```\nYou may want to get content of file first, then use \n```\nampy -pCOMXX get boot.py \n```\n4. Connect to device and check if it's working using PuTTY\n\n    Crtl + D soft resets device\n\n    Ctrl + C Stops currently running script\n\n## Summary ##\nAfter all steps content of the device should look like this\n```\n>ampy -pCOMXX ls\n/LiveObjects\n/boot.py\n/main.py\n/ssl.py\n/umqttrobust.py\n/umqttsimple.py\n\n>ampy -pCOMXX ls LiveObjects\n/LiveObjects/Connection.py\n/LiveObjects/__init__.py\n/LiveObjects/certfile.cer\n```\n\n## Troubleshooting ##\nIf you are getting 'MQTT exception: 5' check your api key\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DatavenueLiveObjects/LiveObjects_SDK_for_Python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LiveObjects",
    "package_url": "https://pypi.org/project/LiveObjects/",
    "platform": "",
    "project_url": "https://pypi.org/project/LiveObjects/",
    "project_urls": {
      "Homepage": "https://github.com/DatavenueLiveObjects/LiveObjects_SDK_for_Python"
    },
    "release_url": "https://pypi.org/project/LiveObjects/1.0.0/",
    "requires_dist": [
      "paho-mqtt"
    ],
    "requires_python": "",
    "summary": "This module allows to easy send data to Orange LiveObjects using Python3 and uPython",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17260069,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b04f97190e0eb4fe55ba67908bd5557771ae3ce75771bb5dc76e8ed8eb9c65f7",
        "md5": "a7d4701110a3271bb27459bdf1c4b870",
        "sha256": "699a0c400ccfa1ae12f21b8d7e47076a40f8f94e0dc7f8593c2dd0b42a8b21f0"
      },
      "downloads": -1,
      "filename": "LiveObjects-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a7d4701110a3271bb27459bdf1c4b870",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13306,
      "upload_time": "2020-11-25T08:50:03",
      "upload_time_iso_8601": "2020-11-25T08:50:03.105916Z",
      "url": "https://files.pythonhosted.org/packages/b0/4f/97190e0eb4fe55ba67908bd5557771ae3ce75771bb5dc76e8ed8eb9c65f7/LiveObjects-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}