{
  "info": {
    "author": "Florian Leitner",
    "author_email": "florian.leitner@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Medical Science Apps.",
      "Topic :: Software Development :: Libraries",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "#####\nMEDIC\n#####\n\nSynopsis\n========\n\nA tool to parse MEDLINE XML files or download eUtils' PubMed XML,\nbootstrapping a MEDLINE/PubMed database store,\nupdating and/or deleting the records, and\nwriting the contents of selected PMIDs into flat-files.\n\nEntity Relationship Model\n=========================\n\n::\n\n    [Author] → [Medline] ← [Descriptor] ← [Qualifier]\n                ↑     ↑\n      [Identifier]   [Section]  [Database]  [Chemical]\n\nMedline (records)\n  **pmid**:BIGINT, *status*:ENUM(state), *journal*:VARCHAR(256),\n  *created*:DATE, completed:DATE, revised:DATE, modified:DATE\n\nAuthor (authors)\n  **pmid**:FK(Medline), **pos**:SMALLINT, *name*:TEXT,\n  initials:VARCHAR(128), forename:VARCHAR(128), suffix:VARCHAR(128),\n\nDescriptor (descriptors)\n  **pmid**:FK(Medline), **pos**:SMALLINT, *name*:TEXT, major:BOOL\n\nQualifier (qualifiers)\n  **pmid**:FK(Descriptor), **pos**:FK(Descriptor), **sub**:SMALLINT,\n  *name*:TEXT, major:BOOL\n\nIdentifier (identifiers)\n  **pmid**:FK(Medline), **namespace**:VARCHAR(32), *value*:VARCHAR(256)\n\nDatabase (databases)\n  **pmid**:FK(Medline), **name**:VARCHAR(32), **accession**:VARCHAR(256)\n\nChemical (chemicals)\n  **pmid**:FK(Medline), **num**:VARCHAR(32), uid:VARCHAR(256), *name*:VARCHAR(256)\n\nSection (sections)\n  **pmid**:FK(Medline), **seq**:SMALLINT, *name*:ENUM(section),\n  label:VARCHAR(256), *content*:TEXT\n\n- **bold** (Composite) Primary Key\n- *italic* NOT NULL\n\nSupported PubMed XML Elements\n=============================\n\nEntities\n--------\n\n- The citation (`Medline` and `Identifier`)\n- Title, Abstract, and Copyright (`Section`)\n- Author (`Author`)\n- Chemical (`Chemcial`)\n- DataBank (`Database`)\n- MeshHeading (`Descriptor` and `Qualifier`)\n- DeleteCitation (for deleting records when parsing updates)\n\nFields/Values\n-------------\n\n- AbstractText (`Section.name` \"Abstract\" or the ``NlmCategory``, `Section.content` with ``Label`` as `Section.label`)\n- AccessionNumber (`Database.accession`)\n- ArticleId (`Identifier.value` with ``IdType`` as `Identifier.namesapce`; only available in online PubMed XML)\n- ArticleTitle (`Section.name` \"Title\", `Section.content`)\n- CollectiveName (`Author.name`)\n- CopyrightInformation (`Section.name` \"Copyright\", `Section.content`)\n- DataBankName (`Database.name`)\n- DateCompleted (`Medline.completed`)\n- DateCreated (`Medline.created`)\n- DateRevised (`Medline.revised`)\n- DescriptorName (`Descriptor.name` with ``MajorTopicYN`` as `Descriptor.major`)\n- ELocationID (`Identifier.value` with ``EIdType`` as `Identifier.namespace`)\n- ForeName (`Author.forename`)\n- Initials (`Author.initials`)\n- LastName (`Author.name`)\n- MedlineCitation (only ``Status`` as `Medline.status`)\n- MedlineTA (`Medline.journal`)\n- NameOfSubstance (`Chemcial.name`)\n- OtherID (`Identifier.value` iff ``Source`` is \"PMC\" with `Identifier.namespace` as \"pmc\")\n- PMID (`Medline.pmid`)\n- QualifierName (`Qualifier.name` with ``MajorTopicYN`` as `Qualifier.major`)\n- RegistryNumber (`Chemical.uid`)\n- Suffix (`Author.suffix`)\n- VernacularTitle (`Section.name` \"Vernacular\", `Section.content`)\n\nRequirements\n============\n\n- Python 3.2+\n- SQL Alchemy 0.7+\n- any database SQL Alchemy can work with\n\n*Note* that while any SQL Alchemy DB will work, it is **strongly** discouraged\nto use any other combination that PostgeSQL and psycogp2, because it is the\nonly combination in SQL Alchemy where data streaming from the DB actually\nworks. You can use other DBs for small MEDLINE collections, but in general,\nfor now, it is recommended to stick to this combo.\n\nNotice: VersionID\n=================\n\nMEDLINE has began to use versions to allow publishers to add multiple citations\nfor the same PMID. This only occurs with 71 articles from one journal,\n\"PLOS Curr\", in the 2013 baseline, creating a total of 149 non-unique records.\n\nAs this is the only journal and as there should only be one abstract per\npublication in the database, alternative versions are currently being ignored.\nIn other words, if a MedlineCitation has a VersionID value, that records can\nbe skipped to avoid DB errors from non-unique records.\n\nIn short, this tool currently **only removes** alternate citations.\n\nSetup\n=====\n\nIf you are **not** using ``pip install medic``, install all\ndependencies/requirements::\n\n    pip install argparse # only for python3 < 3.2\n    pip install sqlalchemy\n    pip install psycopg2 # optional, can use any other DB driver\n\nCreate the PostreSQL database (optional)::\n\n    createdb medline \n\nUsage\n=====\n\n``medic [options] COMMAND PMID|FILE...``\n\nThe ``--url URL`` option represents the DSN of the database and might\nbe needed (default: ``postgresql://localhost/medline``); For example:\n\nPostgres\n    ``postgresql://host//dbname``\nSQLite\n    ``sqlite:////absolute/path/to/foo.db`` or\n    ``sqlite:///relative/path/to/foo.db``\n\nThe tool has five **COMMAND** options:\n\n``insert``\n    create records in the DB by parsing MEDLINE XML files or\n    by downloading PubMed XML from NCBI eUtils for a list of PMIDs\n``write``\n    write records as plaintext files to a directory, each file named as\n    \"<pmid>.txt\", and containing most of the DB stored content or just the\n    TIAB (title and abstract). In addition, summary files in TSV and HTML\n    format can be generated (see option ``--format``).\n``update``\n    insert or update records in the DB (instead of creating them); note that\n    if a record exists, but is added with ``create``, this would throw an\n    `IntegrityError`. If you are not sure if the records are in the DB or\n    not, use ``update`` (N.B. that ``update`` is slower).\n``delete``\n    delete records from the DB for a list of PMIDs\n``parse``\n    does not interact with the DB, but rather creates \".tab\" files for each\n    table that later can be used to load a database, particularly useful when\n    bootstrapping a large collection\n\nFor example, to download two PubMed records by PMID and put them into\nthe DB::\n\n    medic update 1000 123456\n\nTo add a MEDLINE XML update file to the DB::\n\n    medic parse --update medline14n1234.xml.gz\n    psql medline -f delete.sql\n    # load all tables; see below\n\nAdd a single MEDLINE XML file quickly to the database::\n\n    medic insert medline13n0001.xml.gz\n\nExport a few records from the database into a HTML file::\n\n    medic write --format html 292837491 128374 213487\n\nNote that in the above examples, because of the suffix \".gz\", the parser\nautomatically decompresses the file(s) first. This feature *only* works\nwith GNU-zipped files and the \".gz\" suffix must be present.\n\nTherefore, command line arguments are treated as follows:\n\ninteger values\n    are always treated as PMIDs to download PubMed XML data\nall other values\n    are always treated as MEDLINE XML files to parse\nvalues ending in \".gz\"\n    are always treated as gzipped MEDLINE XML files\n\nLoading the MEDLINE baseline\n============================\n\nPlease be aware that the MEDLINE baseline **is not unique**, meaning that it\ncontains a few records multiple times (see the above notice about the\n``VersionID`` above).\n\nFor example, in the 2013 baseline, PMID 20029614 is present ten times in the\nbaseline, each version at a different stage of revision. Because it is the\nfirst entry (in the order they appear in the baseline files) without a\n``VersionID`` that seems to be the relevant record, it ``medic`` by default\nfilters citations with other versions than \"1\". If you want to actually parse\nother versions of a citation, use the option ``--all``.\n\nTo quickly load a parsed dump into a PostgreSQL DB on the same machine, do::\n\n    for table in records descriptors qualifiers authors sections databases \\\n    identifiers chemicals;\n      do psql medline -c \"COPY $table FROM '`pwd`/${table}.tab';\";\n    done\n\nFor the update files, you need to go one-by-one, adding them in order, and\nusing the flag ``--update`` when parsing the XML. After parsing an XML file\nand *before* loading the dumps, run ``psql medline -f delete.sql`` to get rid\nof all entities that are being updated or should be removed (PMIDs listed as\n``DeleteCitation``\\ s).",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fnl/medic",
    "keywords": null,
    "license": "GNU GPL v3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "medic",
    "package_url": "https://pypi.org/project/medic/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/medic/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/fnl/medic"
    },
    "release_url": "https://pypi.org/project/medic/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A command line tool to manage a PubMed DB mirror.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1741517,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89d5521d3e5d0dc65c5dd273355396a7f0d9d56c46ab4635c5807f0906827238",
        "md5": "1fc4e45ec0a12b516c53854de9db336c",
        "sha256": "9848097e18bcc90f4de52d018ff91a2eb606754983e3329c97516cadf29faf82"
      },
      "downloads": -1,
      "filename": "medic-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1fc4e45ec0a12b516c53854de9db336c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18831,
      "upload_time": "2013-10-24T16:04:37",
      "upload_time_iso_8601": "2013-10-24T16:04:37.827368Z",
      "url": "https://files.pythonhosted.org/packages/89/d5/521d3e5d0dc65c5dd273355396a7f0d9d56c46ab4635c5807f0906827238/medic-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}