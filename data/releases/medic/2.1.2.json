{
  "info": {
    "author": "Florian Leitner",
    "author_email": "florian.leitner@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Medical Science Apps.",
      "Topic :: Software Development :: Libraries",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "=====\nmedic\n=====\n-------------------------------------------------\na command-line tool to manage a mirror of MEDLINE\n-------------------------------------------------\n\nThe Swiss Army knife to parse MEDLINE_ XML files or\ndownload eUtils' PubMed_ XML records,\nbootstrapping a local MEDLINE/PubMed database,\nupdating and/or deleting the records, and\nwriting the contents of selected PMIDs into flat-files.\n\nSynopsis\n========\n\n::\n\n  medic [options] CMD FILE|PMID...\n\n  man medic\n  medic --help\n  medic --output /tmp parse baseline/medline*.xml.gz\n  medic --update parse update/medline*.xml.gz\n  medic --info delete delete.txt\n  medic --url sqlite:///tmp.db insert pubmed.xml\n  medic --pmid-lists update pmids_to_fetch_online.txt\n  medic --all update medline13n1000.xml\n  medic --format html write 1028734 1298474 > out.html\n  medic --logfile log.txt write pmid_list.txt\n\nSetup\n=====\n\nIf you are **not** using ``pip install medic``, install all\ndependencies/requirements::\n\n  pip install sqlalchemy\n  # only if using python3 < 3.2:\n  pip install argparse \n\nInstall the **DB driver** you prefer to use (supported are PostgreSQL\nand SQLite, with the latter part of the Python StdLib)::\n\n  pip install psycopg2 \n\nCreate the PostreSQL database::\n\n  createdb medline \n\nIf you are fine working with SQLite, you only need to use the path to the\nSQLite DB file in the URL option (that will implicitly \"create\" the DB)::\n\n  medic insert --url sqlite:///tmp.db 123456\n\nTo create the tables in the DB, you can \"try\" to fetch a record: As the DB\nis empy, this will not write anything, but SQL Alchemy will create the tables\nfor you in the DB::\n\n  medic write 123 # for PostgreSQL\n  medic --url sqlite:///tmp.db write 123 # for SQLite\n\nDescription\n===========\n\n``medic [options] COMMAND PMID|FILE...``\n\nThe ``--url URL`` option represents the DSN of the database and might\nbe needed (default: ``postgresql://localhost/medline``); For example:\n\nPostgreSQL\n  ``postgresql://host//dbname``\nSQLite DB\n  ``sqlite:////absolute/path/to/foo.db`` or\n  ``sqlite:///relative/path/to/foo.db``\n\nThe five **COMMAND** arguments:\n\n``insert``\n  Create records in the DB by parsing MEDLINE XML files or\n  by downloading PubMed XML from NCBI eUtils for a list of PMIDs.\n  The insert fails if the record already exists in the DB.\n``write`` *\n  Write records as MEDLINE_ files to a directory, each file named as\n  \"<pmid>.txt\". Alternatively, just the TIAB (title and abstract) plain-text\n  can be output, and finally, a single file in TSV or HTML format can be\n  generated (see option ``--format``).\n  If the requested PMID does not exist in the DB, the command does not fail,\n  but the relevant file, row, or element will not have been written.\n``update``\n  Insert or update records in the DB (instead of creating them); note that\n  if a record exists, but is added with ``create``, this would throw an\n  `IntegrityError`. If you are not sure if the records are in the DB or\n  not, use ``update`` (N.B. that ``update`` is slower).\n``delete`` *\n  Delete records from the DB for a list of PMIDs (using ``--pmid-lists``)\n``parse``\n  Does not interact with the DB, but rather creates \".tab\" files for each\n  table that later can be used to load a database, particularly useful when\n  bootstrapping a large collection.\n\n\\* Note that ``write`` and ``delete`` can only use PMID lists (option\n``--pmid-lists``), so for these two commands, that option is always active\n(implicitly).\n\nFor example, to download two PubMed records by PMID and update them in\nthe DB::\n\n  medic update 100000 123456\n\nAdd a single MEDLINE or PubMed XML file to the database::\n\n  medic insert pudmed.xml\n\nExport a few records from the database as HTML (to STDOUT)::\n\n  medic write --format html 292837491 128374 213487\n\nNote that if the suffix \".gz\" is present, the parser automatically\ndecompresses the XML file(s) first. This feature *only* works with\nGNU-zipped files and the \".gz\" suffix must be present.\n\nTherefore, command line arguments are treated as follows:\n\ninteger values\n  are always treated as PMIDs to download PubMed XML data\nall other values\n  are always treated as MEDLINE XML files to parse\n  **unless** you use the option ``--pmid-lists``\nfiles ending in \".gz\"\n  are treated as gzipped MEDLINE XML files\n\nRequirements\n============\n\n- Python 3.2+\n- SQL Alchewy 0.8+\n- PostgreSQL 8.4+ or SQLite 3.7+\n\n*Note* that while any DB supported by SQL Alchemy should work, all other DBs\nare **untested**.\n\nLoading MEDLINE\n===============\n\nPlease be aware that the MEDLINE distribution **is not unique**, meaning that\nit contains a few records multiple times (see the section about\n**Version IDs**).\n\nParsing and loading the baseline into a PostgreSQL DB on the same machine::\n\n  medic parse baseline/medline14n*.xml.gz\n\n  for table in citations abstracts authors chemicals databases \\\n  descriptors identifiers keywords publication_types qualifiers sections; \n    do psql medline -c \"COPY $table FROM '`pwd`/${table}.tab';\";\n  done\n\nFor the update files, you need to go *one-by-one*, adding each one *in order*,\nand using the flag ``--update`` when parsing the XML. After parsing an XML file\nand *before* loading the dump, run ``medic delete delete.txt`` to get rid of\nall entities that will be updated or should be removed (PMIDs listed as\n``DeleteCitation``\\ s)::\n\n  # parse a MEDLINE update file:\n  medic --update parse medline14n1234.xml.gz\n\n  # delete its updated and DeleteCitation records:\n  medic delete delete.txt\n\n  # load (COPY) all tables for that MEDLINE file:\n  for table in citations abstracts authors chemicals databases \\\n  descriptors identifiers keywords publication_types qualifiers sections; \n    do psql medline -c \"COPY $table FROM '`pwd`/${table}.tab';\";\n  done\n\nAlternatively - simpler but slower - you can just ``update`` from the XML\ndirectly::\n\n  medic update medline14n1234.xml.gz\n\nVersion IDs\n===========\n\nMEDLINE has began to use versions to allow publishers to add multiple citations\nfor the same PMID. This only occurs with 71 articles from one journal,\n\"PLOS Curr\", in the 2013 baseline, creating a total of 149 non-unique records.\n\nAs this is the only journal and as there may only be one record per PMID in the\ndatabase, alternative versions are currently being ignored. In other words, if\na MedlineCitation has a VersionID value other than \"1\", those records can be\nskipped to avoid DB errors from non-unique records.\n\nFor example, in the 2013 baseline, PMID 20029614 is present ten times in the\nbaseline, each version at a different stage of revision. Because it is the\nfirst entry (in the order they appear in the baseline files) without a\n``VersionID`` or a version of \"1\" that is the relevant record, ``medic`` by\ndefault filters citations with other versions than \"1\". If you do want to\nprocess other versions of a citation, use the option ``--all``.\n\nTo summarize, *medic* by default **removes** alternate citations.\n\nDatabase Tables\n===============\n\nCitation (citations)\n  **pmid**:BIGINT, *status*:ENUM(state), *title*:TEXT, *journal*:VARCHAR(256),\n  *pub_date*:VARCHAR(256), issue:VARCHAR(256), pagination:VARCHAR(256),\n  *created*:DATE, completed:DATE, revised:DATE, modified:DATE\n\nAbstract (abstracts)\n  **pmid**:FK(Citation), **source**:ENUM(type), copyright:TEXT\n\nSection (sections)\n  **pmid**:FK(Medline), **source**:ENUM(type), **seq**:SMALLINT,\n  *name*:ENUM(section), label:VARCHAR(256), *content*:TEXT\n\nAuthor (authors)\n  **pmid**:FK(Medline), **pos**:SMALLINT, *name*:TEXT,\n  initials:VARCHAR(128), forename:VARCHAR(128), suffix:VARCHAR(128),\n\nPublicationType (publication_types)\n  **pmid**:FK(Medline), **value**:VARCHAR(256)\n\nDescriptor (descriptors)\n  **pmid**:FK(Medline), **num**:SMALLINT, major:BOOL, *name*:TEXT\n\nQualifier (qualifiers)\n  **pmid**:FK(Descriptor), **num**:FK(Descriptor), **sub**:SMALLINT, major:BOOL, *name*:TEXT\n\nIdentifier (identifiers)\n  **pmid**:FK(Medline), **namespace**:VARCHAR(32), *value*:VARCHAR(256)\n\nDatabase (databases)\n  **pmid**:FK(Medline), **name**:VARCHAR(32), **accession**:VARCHAR(256)\n\nChemical (chemicals)\n  **pmid**:FK(Medline), **idx**:VARCHAR(32), uid:VARCHAR(256), *name*:VARCHAR(256)\n\nKeyword (keywords)\n  **pmid**:FK(Medline), **owner**:ENUM(owner), **cnt**:SMALLINT, major:BOOL, *value*:TEXT\n\n- **bold** (Composite) Primary Key\n- *italic* NOT NULL (Strings that may not be NULL are also never empty.)\n\nSupported XML Elements\n======================\n\nEntities\n--------\n\n- MedlineCitation and ArticleTitle (``Medline`` and ``Identifier``)\n- Abstract and OtherAbstract (``Abstract`` and ``Section``)\n- Author (``Author``)\n- Chemical (``Chemcial``)\n- DataBank (``Database``)\n- Keyword (``Keyword``)\n- MeshHeading (``Descriptor`` and ``Qualifier``)\n- PublicationType (``PublicationType``)\n- DeleteCitation (for deleting records when parsing updates)\n\nFields/Values\n-------------\n\n- Abstract (with \"NLM\" as ``Abstract.source``)\n- AbstractText (``Section.name`` \"Abstract\" or the *NlmCategory*, ``Section.content`` with *Label* as ``Section.label``)\n- AccessionNumber (``Database.accession``)\n- ArticleId (``Identifier.value`` with *IdType* as ``Identifier.namesapce``; only available in online PubMed XML)\n- ArticleTitle (``Citation.title``)\n- CollectiveName (``Author.name``)\n- CopyrightInformation (``Abstract.copyright``)\n- DataBankName (``Database.name``)\n- DateCompleted (``Medline.completed``)\n- DateCreated (``Medline.created``)\n- DateRevised (``Medline.revised``)\n- DescriptorName (``Descriptor.name`` with *MajorTopicYN* as ``Descriptor.major``)\n- ELocationID (``Identifier.value`` with *EIdType* as ``Identifier.namespace``)\n- ForeName (``Author.forename``)\n- Initials (``Author.initials``)\n- Issue (``Medline.issue``)\n- Keyword (``Keyword.value`` with *Owner* as ``Keyword.owner`` and *MajorTopicYN* as ``Keyword.major``)\n- LastName (``Author.name``)\n- MedlineCitation (with *Status* as ``Medline.status``)\n- MedlineTA (``Medline.journal``)\n- NameOfSubstance (``Chemcial.name``)\n- MedlinePgn (``Medline.pagination``)\n- OtherAbstract (with *Type* as ``Abstract.source``)\n- OtherID (``Identifier.value`` iff *Source* is \"PMC\" with ``Identifier.namespace`` as \"pmc\")\n- PMID (``Medline.pmid``)\n- PubDate (``Medline.pub_date``)\n- PublicationType (``PublicationType.value``)\n- QualifierName (``Qualifier.name`` with *MajorTopicYN* as ``Qualifier.major``)\n- RegistryNumber (``Chemical.uid``)\n- Suffix (``Author.suffix``)\n- VernacularTitle (``Section.name`` \"Vernacular\", ``Section.content``)\n- Volume (``Medline.issue``)\n\nVersion History\n===============\n\n2.1.2\n  - fixed a bug where SQLite did not find the implicit FK->PK reference\n    (thanks to Jason Hennessey for reporting the issue)\n2.1.1\n  - added SQLite temporary DB example URL to help output\n  - refactored HTML output code\n2.1.0\n  - DB schema change from: ``records() -> sections(content)``\n    to: ``citations(title) -> abstracts(copyright) -> sections(content)``\n  - name change: the entity/table Medline/records is now called Citation/citations\n  - title and copyright text is no longer stored in Section/sections\n  - added a new Abstract/abstracts entity/table with a ``copyright`` attribute\n    (formerly stored in ``sections.content`` with ``name`` = 'Copyright') \n  - added a new ``citations.title`` attribute\n    (formerly stored in ``sections.content`` with ``name`` = 'Title') \n  - added a new ``source`` primary-key attribute to Section and Abstract\n    (set to either 'NLM' for regular Abstract elements or to\n    the value of the OtherAbstract Type attribute for other abstracts)\n  - skipping \"Abstract available from the publisher.\"-only abstracts\n2.0.2\n  - made the use of ``--pmid-lists`` for ``delete`` and ``write`` implicit\n  - added instructions to bootstrap the tables in a PostgreSQL DB\n  - minor improvements to this manual\n  - fixed a bug when inserting/updating from MEDLINE XML files\n2.0.1\n  - fixed a bug that lead to skipping of abstracts\n    (thanks to Chris Roeder for detecting the issue)\n2.0.0\n  - added Keywords and PublicationTypes\n  - added MEDLINE publication date, volume, issue, and pagination support\n  - added MEDLINE output format and made it the default\n  - DB structure change: descriptors.major and qualifiers.major columns swapped\n  - DB structure change: section.name is now an untyped varchar (OtherAbstract separation)\n  - cleaned up the ORM test cases\n1.1.1\n  - code cleanup (PEP8, PyFlake)\n  - fixed an issue where the parser would not leave the skipping state\n1.1.0\n  - ``--update parse`` now writes a file to use with ``--pmid-lists delete``\n  - fixed a bug with CRUD manager\n  - added a man page\n1.0.2\n  - fixes to make the PyPi version and ``pip install medic`` work\n1.0.1\n  - updates to the setup.py and README.rst files\n1.0.0\n  - initial release\n\nCopyright and License\n=====================\n\nLicense: `GNU GPL v3`_\\ .\nCopryright 2012, 2013 Florian Leitner. All rights reserved.\n\n.. _GNU GPL v3: http://www.gnu.org/licenses/gpl-3.0.html\n.. _MEDLINE: http://www.nlm.nih.gov/bsd/mms/medlineelements.html\n.. _PubMed: http://www.ncbi.nlm.nih.gov/pubmed",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fnl/medic",
    "keywords": null,
    "license": "GNU GPL v3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "medic",
    "package_url": "https://pypi.org/project/medic/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/medic/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/fnl/medic"
    },
    "release_url": "https://pypi.org/project/medic/2.1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A command line tool to manage a PubMed DB mirror.",
    "version": "2.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1741517,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24656988013a8b2178fc2291a778bf5ac4214e4a34c68530110cb176dd651ae9",
        "md5": "186e4f7d158cc3d5a5370c10bb134c59",
        "sha256": "e7834102987a98495fa856dc1e8ca5d8bc3feeccc75d2d1e8a7845a752bfaac4"
      },
      "downloads": -1,
      "filename": "medic-2.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "186e4f7d158cc3d5a5370c10bb134c59",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27007,
      "upload_time": "2014-03-04T07:55:08",
      "upload_time_iso_8601": "2014-03-04T07:55:08.039162Z",
      "url": "https://files.pythonhosted.org/packages/24/65/6988013a8b2178fc2291a778bf5ac4214e4a34c68530110cb176dd651ae9/medic-2.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}