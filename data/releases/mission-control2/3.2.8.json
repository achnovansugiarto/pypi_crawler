{
  "info": {
    "author": "Praekelt Foundation",
    "author_email": "dev@praekelt.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
    ],
    "description": "Mission Control\n===============\n\nA project launcher for Marathon\n\nInstallation\n------------\nTo install using a terminal::\n\n    $ virtualenv ve\n    $ source ve/bin/activate\n    (ve)$ pip install mission-control2\n    (ve)$ export DJANGO_SETTINGS_MODULE=\"mc2.settings\"\n    (ve)$ ve/bin/django-admin migrate --noinput\n\nRunning\n-------\n\nBecause this system uses Google Accounts with OAuth2 for authentication there are a few\nsteps one needs to complete in order to get a working system:\n\nCreate a super user::\n\n    (ve)$ ve/bin/django-admin createsuperuser\n\nStart the application on local address ``127.0.0.1:8000``::\n\n    (ve)$ ve/bin/django-admin runserver\n\nOAuth works with HTTP based callbacks & token exchange, for this to work our\nlocal server needs to be reachable on the Internet. Ngrok_ is a great utility\nthat allows for this. Follow the installation instructions on the Ngrok_\nwebsite for your operating system. Once installed run::\n\n    $ ngrok 8000\n\nThis will generate a random ``ngrok.com`` subdomain for you on which your\nlocal server will be reachable. The random subdomain address is useful for\nadhoc testing but we would recommend you use something predictable. This can\nbe done using the ``-subdomain`` command line argument::\n\n    $ ngrok -subdomain mc2 8000\n\nIf you haven't already, create a Google Developer Project at\n``https://console.developers.google.com/project`` .\n\n.. image:: images/pic1.png\n    :align: center\n\nNext, navigate to ``https://console.developers.google.com/apis/credentials`` ,\nselect the 'OAuth Consent Screen', choose a product name and save.\n\n.. image:: images/pic2.png\n    :align: center\n\nThen select \"New credentials\" and select \"OAuth Client ID\". Then enter the\nnecessary information\n\n.. image:: images/pic3.png\n    :align: center\n\nOnce saved, Google will have generated the unique keys you will need to\ncomplete the OAuth setup:\n\n.. image:: images/pic4.png\n    :align: center\n\nFor quick setup, you would then enter the following::\n\n    (ve)$ export SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=\"647082549192-142tni49187fck8i2n1p0ptjofihd1k4.apps.googleusercontent.com\"\n    (ve)$ export SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=\"mJG2Qgbsmwal8MdCeP_7x_S6D\"\n\nYour Google OAuth setup should now be configured.\n\nYou can specify the following ``environment variables`` to configure the app:\n\n.. code-block:: python\n\n    # Django settings\n    SECRET_KEY\n    PROJECT_ROOT\n    DATABASE_URL\n\n    # Mesos Settings\n    MESOS_DEFAULT_MEMORY_ALLOCATION\n    MESOS_MARATHON_HOST\n    MESOS_HTTP_PORT\n    MESOS_DEFAULT_CPU_SHARE\n    MESOS_DEFAULT_INSTANCES\n\n    # Log Driver settings\n    LOGDRIVER_PATH\n    LOGDRIVER_BACKLOG\n\n    # Sentry configuration\n    RAVEN_DSN\n    RAVEN_CONFIG\n\n    # Social Auth\n    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY\n    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET\n\nOnce all this is done visit MC2 via your\ncustom http://mc2.ngrok.com tunnel and sign-up via Google.\n\nYou'll be greeted with an empty page since no applications have been created\nyet. Only Django ``superusers`` are allowed to create new applications.\nYou'll need to login into the Django admin page as the superuser you created\nearlier and promote the account created via GitHub to being a super user\nto expose the application creation features.\n\n.. _Ngrok: http://www.ngrok.com/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/praekelt/mc2",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mission-control2",
    "package_url": "https://pypi.org/project/mission-control2/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mission-control2/",
    "project_urls": {
      "Homepage": "http://github.com/praekelt/mc2"
    },
    "release_url": "https://pypi.org/project/mission-control2/3.2.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Mission Control - allows for easy launching of apps on Marathon",
    "version": "3.2.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3474366,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1818894e79261e9230ad2cbe415ce861f64939c352f7c3cc03b5f986f52e0a32",
        "md5": "793a8765420ad9561b1d6a17aa4327bc",
        "sha256": "c0320003f6ca4b7436e185200701bf3897c78cdf0982ba576520dc619c903558"
      },
      "downloads": -1,
      "filename": "mission-control2-3.2.8.tar.gz",
      "has_sig": false,
      "md5_digest": "793a8765420ad9561b1d6a17aa4327bc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3235255,
      "upload_time": "2016-02-10T17:31:33",
      "upload_time_iso_8601": "2016-02-10T17:31:33.341826Z",
      "url": "https://files.pythonhosted.org/packages/18/18/894e79261e9230ad2cbe415ce861f64939c352f7c3cc03b5f986f52e0a32/mission-control2-3.2.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}