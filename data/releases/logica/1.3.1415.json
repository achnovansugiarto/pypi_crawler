{
  "info": {
    "author": "Evgeny Skvortsov",
    "author_email": "logica@evgeny.ninja",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Topic :: Database"
    ],
    "description": "<!--\nCopyright 2020 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Logica: language of Big Data\n\nLogica is an open source declarative logic programming\nlanguage for data manipulation. Logica is a successor to\n[Yedalog](https://research.google/pubs/pub43462/),\na language created at Google earlier.\n\n## Why?\n\nLogica is for engineers, data scientists and other specialists who want to use\nlogic programming syntax when writing queries and pipelines to run on\n[BigQuery](https://cloud.google.com/bigquery).\n\nLogica compiles to StandardSQL and gives you access to the power of BigQuery\nengine with the convenience of logic programming syntax. This is useful because\nBigQuery is magnitudes more powerful than state of the art native\nlogic programming engines.\n\nWe encourage you to try Logica, especially if\n\n*   you already use logic programming and need more computational power, **or**\n*   you use SQL, but feel unsatisfied about its readability, **or**\n*   you want to learn logic programming and apply it to processing of Big Data.\n\nIn the future we plan to support more SQL dialects and engines.\n\n## I have not heard of logic programming. What is it?\n\nLogic programming is a declarative programming paradigm where the program is\nwritten as a set of logical statements.\n\nLogic programming was developed in academia from the late 60s. Prolog and\nDatalog are the most prominent examples of logic programming languages. Logica\nis a language of the Datalog family.\n\nDatalog and relational databases start from the same idea: think of data\nas relations and think of data manipulation as a sequence of operations over\nthese relations. But Datalog and SQL differ in how these operations are\ndescribed. Datalog is inspired by the mathematical syntax of the first order\npropositional logic and SQL follows the syntax of natural language.\n\nSQL was based on the natural language to give access to databases to the people\nwithout formal training in computer programming or mathematics. This convenience\nmay become costly when the logic that you want to express is non trivial.\nThere are many examples of hard-to-read SQL queries that correspond to simple\nlogic programs.\n\n## How does Logica work?\n\nLogica compiles the logic program into a SQL expression, so it can be executed\non BigQuery, the state of the art SQL engine.\n\nAmong database theoreticians Datalog and SQL are known to be _equivalent_. And\nindeed the conversion from Datalog to SQL and back is often straightforward.\nHowever there are a few nuances, for example how to treat disjunction and\nnegation. In Logica we tried to make choices that make understanding of the\nresulting SQL structure as easy as possible, thus empowering user to write\nprograms that are executed efficiently.\n\n## Why is it called _Logica_?\n\n_Logica_ stands for _**Logic** with **a**ggregation_.\n\n## How to learn?\n\nLearn basics of Logica with the [CoLab tutorial](https://colab.research.google.com/github/EvgSkv/logica/blob/main/tutorial/Logica_tutorial.ipynb) located at [`tutorial`](https://github.com/EvgSkv/logica/tree/main/tutorial) folder.\nSee examples of using Logica in [`examples`](https://github.com/EvgSkv/logica/tree/main/examples) folder.\n\nTutorial and examples show how to access Logica from CoLab. You can also install Logica command line tool.\n\n## Prerequisites\n\nTo run Logica programs on BigQuery you will need a \n[Google Cloud Project](https://console.cloud.google.com/projectcreate).\nOnce you have a project you can run Logica programs in CoLab providing your project id.\n\nTo run Logica locally you need [Python3](https://www.python.org/downloads/).\n\nTo initiate Logica predicates execution from the command line \nyou will need `bq`, a\nBigQuery [command line tool](https://cloud.google.com/bigquery/docs/bq-command-line-tool). For that you need to install \n[Google Cloud SDK](https://cloud.google.com/sdk/docs/install).\n\n## Installation\n\nGoogle Cloud Project is the only thing you need to run Logica in Colab, see\n[Hello World example](https://colab.research.google.com/github/EvgSkv/logica/blob/main/examples/Logica_example_Hello_World.ipynb).\n\nYou can install Logica command with `pip` as follows.\n\n```sh\n# Install.\npython3 -m pip install logica\n# Run:\n# To see usage message.\npython3 -m logica\n# To print SQL for HelloWorld program.\npython3 -m logica - print Greet <<<'Greet(greeting: \"Hello world!\")'\n```\n\nIf your `PATH` includes Python's `bin` folder then you will also be able to\nrun it simply as\n\n```sh\nlogica - print Greet <<<'Greet(greeting: \"Hello world!\")'\n```\n\nAlternatively, you can clone GitHub repository:\n\n```sh\ngit clone https://github.com/evgskv/logica\ncd logica\n./logica - print Greet <<<'Greet(greeting: \"Hello world!\")'\n```\n\n\n## Code samples\n\nHere a couple examples of how Logica code looks like.\n\n### Prime numbers\n\nFind prime numbers less than 30.\n\nProgram `primes.l`:\n```\n# Define natural numbers from 1 to 29.\nN(x) :- x in Range(30);\n# Define primes.\nPrime(prime: x) :-\n  N(x),\n  x > 1,\n  ~(\n    N(y),\n    y > 1,\n    y != x,\n    x % y == 0\n  );\n```\n\nRunning `primes.l`\n```sh\n$ logica primes.l run Prime\n+-------+\n| prime |\n+-------+\n|     2 |\n|     3 |\n|     5 |\n|     7 |\n|    11 |\n|    13 |\n|    17 |\n|    19 |\n|    23 |\n|    29 |\n+-------+\n```\n\n### News mentions\n\nWho was mentioned in the news in 2020 the most?\nLet's query [GDELT Project](https://www.gdeltproject.org/) dataset.\n\nProgram `mentions.l`\n```\n@OrderBy(Mentions, \"mentions desc\");\n@Limit(Mentions, 10);\nMentions(person:, mentions? += 1) distinct :-\n  gdelt-bq.gdeltv2.gkg(persons:, date:),\n  Substr(ToString(date), 0, 4) == \"2020\",\n  the_persons == Split(persons, \";\"),\n  person in the_persons;\n```\n\nRunning `mentions.l`\n```\n$ logica mentions.l run Mentions\n+----------------+----------+\n|     person     | mentions |\n+----------------+----------+\n| donald trump   |  3624228 |\n| joe biden      |  1591320 |\n| los angeles    |  1221998 |\n| george floyd   |   923472 |\n| boris johnson  |   845955 |\n| barack obama   |   541672 |\n| vladimir putin |   486428 |\n| bernie sanders |   409224 |\n| andrew cuomo   |   375594 |\n| nancy pelosi   |   375373 |\n+----------------+----------+\n```\n\nNote that cities of Los Angeles and Las Vegas are mentioned in this table due to known\nmissclasification issue in the GDELT data analysis.\n\n## Feedback\n\nFeel free to create [github issues](https://github.com/EvgSkv/logica/issues)\nfor bugs and feature requests.\n\nYou questions and comments are welcome at our [github discussions](https://github.com/EvgSkv/logica/discussions)!\n\n\n\n---\n\nUnless otherwise noted, the Logica source files are distributed\nunder the Apache 2.0 license found in the LICENSE file.\n\nThis is not an officially supported Google product.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/evgskv/logica",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logica",
    "package_url": "https://pypi.org/project/logica/",
    "platform": "",
    "project_url": "https://pypi.org/project/logica/",
    "project_urls": {
      "Homepage": "https://github.com/evgskv/logica"
    },
    "release_url": "https://pypi.org/project/logica/1.3.1415/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "Logica language.",
    "version": "1.3.1415",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16154949,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8dec4b1044ea8273a2b05eb72f0ac1aa9485bea65523a527ec2fcacd029aa78d",
        "md5": "16160fa1589feba01bd02d4cf330771b",
        "sha256": "3168b72452c416d397e318b43461fe3ad1b60e27a926fd1220d046af7a620478"
      },
      "downloads": -1,
      "filename": "logica-1.3.1415-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "16160fa1589feba01bd02d4cf330771b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 82698,
      "upload_time": "2022-02-07T19:27:30",
      "upload_time_iso_8601": "2022-02-07T19:27:30.172920Z",
      "url": "https://files.pythonhosted.org/packages/8d/ec/4b1044ea8273a2b05eb72f0ac1aa9485bea65523a527ec2fcacd029aa78d/logica-1.3.1415-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "135477ed6c6cc3c070762d761de081784830365a5d11b11b0e6b655ffa0b28cd",
        "md5": "5b5868aa306cdcef7b7919c25161d1f8",
        "sha256": "c13a0358e6d7e79f4e37e6db9355bf47f1e3b3dd4dc55c7de4e8ddda51121c4d"
      },
      "downloads": -1,
      "filename": "logica-1.3.1415.tar.gz",
      "has_sig": false,
      "md5_digest": "5b5868aa306cdcef7b7919c25161d1f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 65411,
      "upload_time": "2022-02-07T19:27:32",
      "upload_time_iso_8601": "2022-02-07T19:27:32.137705Z",
      "url": "https://files.pythonhosted.org/packages/13/54/77ed6c6cc3c070762d761de081784830365a5d11b11b0e6b655ffa0b28cd/logica-1.3.1415.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}