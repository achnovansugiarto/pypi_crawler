{
  "info": {
    "author": "Yana Bromberg, Maximilian Miller",
    "author_email": "mmiller@bromberglab.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# mlNODS\n### split machine learning data sets using graph partioning\n\nAppropriate assessments require appropriate splits of training and evaluation data sets and this in turn requires clustering. For many problems single-linkage clustering suffices toward this end. Encountering a problem that could not be solved by such a standard procedure, we developed a simple graph-based tool for the creation of unique data sets.\n\nmlNODS is a graph-based method which allows to split original data sets into non-overlapping sets that cannot be grouped without removing some of the data. mlNODS optimizes the following constraints: (1) retain as many data points as possible, and (2) remove any overlap between two split sets. The nodes of our graph are the original data points, and the connections are measures for the similarity between nodes (e.g. sequence similarity for protein sets). The method begins by building the full graph and proceeds by removing nodes in order to optimally fit the constraints to the similarity table. mlNODS is applicable to any prob- lem and has the additional benefit of allowing overlap within one set (i.e. training on homologues) while it is disal- lowed between two sets (i.e. training and testing do not overlap).\n\n```bash\nusage: mlnods [-h] -s SPLITS -c CUTOFF [-l LIMIT] -e EDGES_FILE\n                [-f EDGES_FORMAT] -n NODES_FILE [-a] [-r RANDOM]\n                [-o OUTFOLDER] [-v] [-q] [--version]\n\nThis is a script that will create independent sets of data\n\nVersion: 1.0 [03/14/20]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SPLITS, --splits SPLITS\n                        number of splits required\n  -c CUTOFF, --cutoff CUTOFF\n                        similarity cutoff in the units of link scores\n  -l LIMIT, --limit LIMIT\n                        limit on the number of links for each node (default=0, infinity)\n  -e EDGES_FILE, --edges EDGES_FILE\n                        file containing a table of instances with link scores for each pair\n  -f EDGES_FORMAT, --format EDGES_FORMAT\n                        format of the table file\n\n                        blast     : takes a list of -m 9 formated blast files and builds a table based on seqID\n                        hssp      : takes a list of -m 9 formated blast files, runs HSSP scoring script and builds an HSSP distance table\n                        self<int> : space/tab separated table file, similarity score in column <int>\n                                    eg \"ID1 ID2 similarity_score\" will be addressed as self3 (default=self5)\n  -n NODES_FILE, --nodes NODES_FILE\n                        instance file containing IDs of all instances being considered\n\n                        IDs are case-independent (eg ABC = abc)\n                        IDs are always preceeded by \">\" and followed by a white space.\n                        No white spaces are allowed in an ID.\n                        If score is provided for an ID, it should be surrounded by spaces and directly follow the ID\n                        (eg. >abl1_human 10 gene associated with ....)\n                        Everything between two IDs is printed in the junction files, but not considered in evaluation\n  -a, --abundance       the option to score\n\n                        false : score retrieved from instance file, range [0-100], default=50 when missing\n                        true  : score approximated by actual number of times an ID appears in the instance file\n  -r RANDOM, --random RANDOM\n                        set a fixed random seed to generate consistent partitions\n  -o OUTFOLDER, --outfolder OUTFOLDER\n                        path to output folder (default=<current directory>\n  -v, --verbose         set verbosity level\n  -q, --quiet           no logging to stdout\n  --version             show program's version number and exit\n\nIf an ID is present in the instance file, but not in the table file the ID is considered to not be linked to anything else\nIf an ID is present in the table file but not in the instance file, it is ignored\n\nmlnods was developed by Yana Bromberg and refactored by Maximilian Miller.\n\nFeel free to contact us for support at services@bromberglab.org.\nThis software is licensed under [NPOSL-3.0](http://opensource.org/licenses/NPOSL-3.0)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/bromberglab/mlnods",
    "keywords": "graph partition,graph analysis,cross-validation dataset",
    "license": "NPOSL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlnods",
    "package_url": "https://pypi.org/project/mlnods/",
    "platform": "",
    "project_url": "https://pypi.org/project/mlnods/",
    "project_urls": {
      "Bug Tracker": "https://bitbucket.org/bromberglab/mlnods/issues",
      "Documentation": "https://bitbucket.org/bromberglab/mlnods/wiki/docs",
      "Homepage": "https://bitbucket.org/bromberglab/mlnods",
      "Source Code": "https://bitbucket.org/bromberglab/mlnods"
    },
    "release_url": "https://pypi.org/project/mlnods/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "a python package to split machine learning data sets using graph partitioning",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6813680,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c9478ed5eef2e9a99fcaa073d432cdbb47f40e48f0e347dd8214c3a86eed35c",
        "md5": "ac087a4cbebeda077483648dfb14f1de",
        "sha256": "731bae895d8e91644033ed8d2861167d23a934146f10241b385f15d78c354b5d"
      },
      "downloads": -1,
      "filename": "mlnods-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac087a4cbebeda077483648dfb14f1de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 26498,
      "upload_time": "2020-03-14T21:07:57",
      "upload_time_iso_8601": "2020-03-14T21:07:57.552200Z",
      "url": "https://files.pythonhosted.org/packages/0c/94/78ed5eef2e9a99fcaa073d432cdbb47f40e48f0e347dd8214c3a86eed35c/mlnods-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d7bc214a06fcde5369ba16cca408def377a6355d1c3def1b5716dca22629732",
        "md5": "8d3ed9befbc4e73838cffe3924760f54",
        "sha256": "880dbaa15b3ef11268d2cbf18a925022504f43dff06841a9624d08dcc5973364"
      },
      "downloads": -1,
      "filename": "mlnods-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8d3ed9befbc4e73838cffe3924760f54",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25566,
      "upload_time": "2020-03-14T21:07:58",
      "upload_time_iso_8601": "2020-03-14T21:07:58.843172Z",
      "url": "https://files.pythonhosted.org/packages/3d/7b/c214a06fcde5369ba16cca408def377a6355d1c3def1b5716dca22629732/mlnods-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}