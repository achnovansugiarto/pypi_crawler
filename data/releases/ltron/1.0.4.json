{
  "info": {
    "author": "Aaron Walsman",
    "author_email": "aaronwalsman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![LTRON](assets/ltron_logo.png?raw=true \"LTRON\")\n\n# Interactive Lego Machine Learning Environment\n\nLTRON is an environment for interactive machine learning assembly problems using Lego bricks.  It is based on [LDraw](https://ldraw.org/) the [Open Model Repository](https://omr.ldraw.org/), and uses additional data from [LDCAD](http://www.melkert.net/LDCad).\n\nIf you use LTRON in acadmic work, please cite our [ECCV 2022 Paper](https://arxiv.org/abs/2207.13738):\n```\n@inproceedings{walsman2022break,\n  author = {Aaron Walsman, Muru Zhang, Klemen Kotar, Karthik Desingh, Ali Farhadi, Dieter Fox},\n  title = {Break and Make: Interactive Structural Understanding Using LEGO Bricks},\n  booktitle = {European Conference on Computer Vision},\n  year={2022}\n}\n```\n\n### Examples\n8661-1 - Carbon Star.mpd\n![carbon_star](assets/carbon_star.png?raw=true)\n\n31025 - Mountain Hut - Mountain Hut.mpd\n![house](assets/house.png?raw=true)\n\n10030-1 - Imperial Star Destroyer - UCS.mpd\n![destroyer](assets/destroyer.png?raw=true)\n\n## Installation:\nTo install LTRON run:\n```\npip install ltron\nltron_asset_installer\n```\n\nThe first line will download LTRON from pypi and install it in your python path. The second line will download and install a set of models and part files that are necessary for LTRON.  By default, these assets are installed to `~/.cache/ltron` and `~/.cache/splendor`.  This will take around 3GB of space.\n\nRelease Versions:\n - [Embodied AI Workshop, CVPR 2021:](https://embodied-ai.org/papers/LegoTron.pdf) (pypi 0.0.X) (branch TODO).\n - [ECCV 2022:](https://arxiv.org/abs/2207.13738) (pypi 1.0.X) (branch v1.0.0)\n - Ongoing Work (not in pypi) (branch master)\n\n## Testing Things Out:\nOnce installed you should be able to run `ltron_viewer` to interactively inspect a lego model.  For example from the top directory you can run:\n\n`ltron_viewer \"~/.cache/ltron/collections/omr/ldraw/8661-1 - Carbon Star.mpd\"`\n\nOr:\n\n`ltron_viewer \"~/.cache/ltron/collections/omr/ldraw/75050-1 - B-Wing.mpd\"`\n\nOr:\n\n`ltron_viewer \"~/.cache/ltron/collections/omr/ldraw/75060 - Slave I.mpd\"`\n\nYou can interact with the model by clicking on it and dragging the mouse around.  LMB - Orbit.  RMB - Pan.  Scroll - Zoom.  There are a few keys you can press `h` to hide the brick you are hovering over, `v` to show all hidden bricks and `m` to switch back and forth between mask mode and regular rendering.  See other options in `ltron/visualization/ltron_viewer.py`.\n\n## Requirements:\n```\ngym\nnumpy\npyquaternion\ngdown\ntqdm\nsplendor-render\n```\nThe splendor-render package only works on Ubuntu at the moment, and requires OpenGL 4.6.  As long as you have a modern GPU with recent drivers you should be fine.\n\nYou may need to install freeglut:\n```\nsudo apt-get install freeglut3-dev\n```\n\n## File Formats\nLTRON uses the [LDraw file formats](https://www.ldraw.org/article/218) (.dat, .ldr, .mpd) to describe bricks and models.  We convert all bricks to obj files for use in splendor-render.  These are installed to `~/.cache/splendor/ltron_assets_low` or `~/.cache/splendor/ltron_assets_high`.\n\nThe Open Model Repository files are installed to `~/.cache/ltron/collections/omr/ldraw`.\n\n## Data Layout:\nThis section is current as of v1.0.X, but may be streamlined in future releases:\n\nAs noted above, the LTRON assets are placed by default in `~/.cache/ltron`.  This location can be changed by setting the `$LTRON_HOME` environment variable.  Additionally, some rendering assets are placed in `~/.cache/splendor`.  This location can be changed by setting the $SPLENDOR_HOME` environment variable.\n\nAll LTRON datasets are registered in `$LTRON_HOME/settings.cfg`.  In LTRON each dataset contains a json file that describes where to find the files associated with that dataset, and various metadata.  These are listed in the `[datasets]` header in the `settings.cfg` file.  These json files usually refer to a particular \"collection\" of ldraw files.  You can think of a collection as a root file path where several ldraw files and/or episode zip files live.  These locations are specified in the `[collections]` header in the `settings.cfg` file.\n\nLooking the `$LTRON_HOME/collections/random_construction_6_6/rc_6_6.json` file we can see what kind of data it contains:\n- `splits`: a set of names corresponding to a block of files used for training or testing.  `rc_6_6.json` contains nine splits: a `train_N`, `test_N` and `train_episodes_N` for N=2,4,8.  The path to each of these splits starts with `{random_construction_6_6}/...` which tells the system to look for these files inside the `random_construction_6_6` collection.\n- `max_instances_per_scene`: an upper bound on number of instances that exist in any of the ldraw files used in the dataset.\n- `max_edges_per_scene`: an upper bound on the number of connections between bricks that exist in any of the ldraw files used in this dataset.\n- `shape_ids`: a class label for each brick shape used in this dataset\n- `class_ids`: a separate class label for each brick color used in this dataset\n\nUsing this structure provides access to the following commands:\n- `ltron.dataset.get_dataset_info('dataset_name')` returns the contents of the json dataset file\n- `ltron.dataset.get_dataset_paths('dataset_name', 'split_name', subset=None, rank=0, size=1)` returns a list of paths belonging to a particular split.\n- `ltron.dataset.get_zip_paths('dataset_name', 'split_name', subset=None, rank=0, size=1)` returns a zipfile object and a list of its contents for a particular split.\n\n## LtronEnv Structure\nWe have tried to make the LtronEnv structure modular so that it can be customized for a variety of observation types, action spaces and tasks.  Therefore the LtronEnv [gym](https://github.com/openai/gym) environment is a container for multiple components, each of which specify their own action/observation spaces and state variables.  When LtronEnv's reset/step/etc. method is called, it executes each of its component's reset/step/etc. methods in order and accumulating the result into a dictionary based on the component's name.  Currently only the Break and Make (ltron/gym/envs/break_and_make_env.py in v1.0.0) is stable.\n\n## Further Notes:\nAll 3D units are in [LDraw LDUs](http://www.ldraw.org/article/218.html).  One LDU is approximately 0.4 mm, so the physical extents of these scenes can be quite large.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aaronwalsman/ltron",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ltron",
    "package_url": "https://pypi.org/project/ltron/",
    "platform": null,
    "project_url": "https://pypi.org/project/ltron/",
    "project_urls": {
      "Homepage": "https://github.com/aaronwalsman/ltron"
    },
    "release_url": "https://pypi.org/project/ltron/1.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "LEGO interactive machine learning environment.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14592111,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "971f152e5a95205ff4b4ad0dcac30a7ec7041264c5a17453e26f789aa6724131",
        "md5": "b0cd9127b0ac640bd51cd731fac50131",
        "sha256": "06c0ff8516095acf2198d8ea6d9d3bf00b78210803ca15b17fa43b896d6a2ddb"
      },
      "downloads": -1,
      "filename": "ltron-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "b0cd9127b0ac640bd51cd731fac50131",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 167954,
      "upload_time": "2022-07-29T17:05:45",
      "upload_time_iso_8601": "2022-07-29T17:05:45.053299Z",
      "url": "https://files.pythonhosted.org/packages/97/1f/152e5a95205ff4b4ad0dcac30a7ec7041264c5a17453e26f789aa6724131/ltron-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}