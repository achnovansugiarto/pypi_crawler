{
  "info": {
    "author": "Massimo Bono",
    "author_email": "massimobono1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\nIntroduction\n============\n\nThis package represents the common setup a generic service app developped by CBIM should\nspecifies. This is a comprehensive list of what it does\n\nDatabase\n--------\n\n\n* remove user table\n* remove group table\n* remove user-group table\n* create models for the relationship user-permission and group-permission in order to be first entities:\n   this needs to be done since authentication in CBIM is handled by an external service and we wish not to\n   store such information in each service database;\n\nBackends\n--------\n\nWe provide ``PermissionCacherAuthenticationBackend``\\ , which is  backend that requires an ``access_token`` in input\nfor authentication. The authentication scheme is using a JWT token, hence ``graphene-jwt`` is used.\nThe authentication backends assumes that ``users`` and ``groups`` table are not present in the local database,\nbut stored in another service. So in the local database there are only the ``user_permission`` and ``group_permissions``\ntables. We use the ``user_id`` inside the JWT decoded token to fetch permissions. The permissions are then stored\nin the server cache to ease the access. Permissions are retrievable as usual from ``user.get_all_permissions`` or checkable\nvia ``user.has_perm``. \n\nPacakges that should not use this app\n=====================================\n\nHere there is the list of exceptions:\n\n\n* user-auth-service: this service provides the authentication and does not needs the models and the migrations from this package \n\nInstallation\n============\n\nJust pip install it:\n\n.. code-block::\n\n   pip install django-cbim-general-service\n\nConfiguration\n=============\n\nFirst you need to add the app in INSTALLED_APPS.: \n\n.. code-block::\n\n   INSTALLED_APPS += \"django_cbim_general_service\"\n\nIf django_app_graphql is present, be sure to add this after the app. Furthermore, you need to add this app\nafter the \"auth\" one.\n\nThen you need to configure graphql:\n\n.. code-block::\n\n   INSTALLED_APPS = [\n       # graphql\n       'graphene_django',\n       'django_filters',\n       # make sure the django_app_graphql is the last app you add!\n       'django_app_graphql',\n   ]\n\nBe sure to add them at the end of the ``INSTALLED_APPS``\\ , otherwise it won't work.\nYou also need to register a single authentication backend.\n\n.. code-block::\n\n   AUTHENTICATION_BACKENDS = [\n       \"PermissionCacherAuthenticationBackend\",\n   ]\n\nThis is the only backend you will need.\nThe project uses a cache to store user,roles and permissions in runtime.\nYou need to add one called ``users``\\ :\n\n.. code-block::\n\n   CACHES = {\n       'users': {\n           'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n           'LOCATION': 'users',\n       }\n   }\n\nFinally you need to configure ``graphene-jwt`` and ``django-app-graphql`` (if you are using it):\n\n.. code-block::\n\n   GRAPHENE = {\n       \"SCHEMA\": \"django_app_graphql.graphene.schema.schema\",\n       'SCHEMA_OUTPUT': 'graphqls-schema.json',\n       'SCHEMA_INDENT': 2,\n       'MIDDLEWARE': [\n           \"graphql_jwt.middleware.JSONWebTokenMiddleware\",\n           \"django_app_graphql.middleware.GraphQLStackTraceInErrorMiddleware\",\n       ],\n   }\n\n   GRAPHENE_DJANGO_EXTRAS = {\n       'DEFAULT_PAGINATION_CLASS': 'graphene_django_extras.paginations.LimitOffsetGraphqlPagination',\n       'DEFAULT_PAGE_SIZE': 20,\n       'MAX_PAGE_SIZE': 50,\n       'CACHE_ACTIVE': True,\n       'CACHE_TIMEOUT': 300  # seconds\n   }\n\n   # see https://django-graphql-jwt.domake.io/en/latest/refresh_token.html\n   GRAPHQL_JWT = {\n       # This configures graphqls-jwt to add \"token\" input at each request to be authenticated\n       'JWT_ALLOW_ARGUMENT': True,\n       'JWT_ARGUMENT_NAME': \"token\",\n       'JWT_VERIFY_EXPIRATION': True,\n       'JWT_EXPIRATION_DELTA': timedelta(days=1),\n       'JWT_ALGORITHM': \"HS256\",\n       'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=7),\n       'JWT_AUTH_HEADER_PREFIX': \"Bearer\",\n       # VERY IMPORTANT TO MAKE EVERYTHING WORK!\n       'JWT_DECODE_HANDLER': 'django_cbim_general_service.utils.jwt_decoder_handler',\n       'JWT_PAYLOAD_GET_USERNAME_HANDLER': 'django_cbim_general_service.utils.get_jwt_payload_get_username',\n       'JWT_GET_USER_BY_NATURAL_KEY_HANDLER': 'django_cbim_general_service.utils.get_user_by_natural_key_handler',\n   }\n\n   DJANGO_APP_GRAPHQL = {\n       \"BACKEND_TYPE\": \"graphene\",\n       \"EXPOSE_GRAPHIQL\": True,\n       \"GRAPHQL_SERVER_URL\": \"\",\n       \"ENABLE_GRAPHQL_FEDERATION\": True,\n       \"SAVE_GRAPHQL_SCHEMA\": os.path.join(\"output\", \"schema.graphql\"),\n       \"ADD_DUMMY_QUERIES_IF_ABSENT\": True,\n       \"ADD_DUMMY_MUTATIONS_IF_ABSENT\": True,\n   }\n\nDocumentation\n=============\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.cbim.it",
    "keywords": "django",
    "license": "commercial",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cbim-general-service",
    "package_url": "https://pypi.org/project/django-cbim-general-service/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cbim-general-service/",
    "project_urls": {
      "Homepage": "http://www.cbim.it"
    },
    "release_url": "https://pypi.org/project/django-cbim-general-service/1.13.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django app that every service implemented using DJango in CBIM should use",
    "version": "1.13.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11644356,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3c6563f41faeb91fe2b31e69f1d3b4eb4a6d2293566836e80a126c94cd70476",
        "md5": "4dee83f9cd0e8608ee34eb5ca2244070",
        "sha256": "3a5f202ecd08650c7e037224968e61f21b73023d795c00e3a7b2685e544148f0"
      },
      "downloads": -1,
      "filename": "django_cbim_general_service-1.13.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4dee83f9cd0e8608ee34eb5ca2244070",
      "packagetype": "bdist_wheel",
      "python_version": "3.8",
      "requires_python": null,
      "size": 31821,
      "upload_time": "2021-10-06T13:35:02",
      "upload_time_iso_8601": "2021-10-06T13:35:02.213252Z",
      "url": "https://files.pythonhosted.org/packages/e3/c6/563f41faeb91fe2b31e69f1d3b4eb4a6d2293566836e80a126c94cd70476/django_cbim_general_service-1.13.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}