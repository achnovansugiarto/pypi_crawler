{
  "info": {
    "author": "James McMahon",
    "author_email": "james1345@googlemail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP :: Session"
    ],
    "description": "django-rest-knox\n================\n\n.. image:: https://travis-ci.org/James1345/django-rest-knox.svg?branch=develop\n   :target: https://travis-ci.org/James1345/django-rest-knox\n\nAuthentication Module for django rest auth\n\nKnox provides easy to use authentication for `Django REST\nFramework <http://www.django-rest-framework.org/>`__ The aim is to allow\nfor common patterns in applications that are REST based, with little\nextra effort; and to ensure that connections remain secure.\n\nKnox Authentication is token based, similar to the\n``TokenAuthentication`` built in to DRF. However, it overcomes some\nproblems present in the default implementation:\n\n-  DRF Tokens are generated with ``os.urandom``, which is not\n   cryptographically secure.\n\nKnox uses OpenSSL to provide tokens. - DRF tokens are limitted to one\nper user. This does not facilitate securely signing in from multiple\ndevices, as the token is shared. It also requires *all* devices to be\nlogged out if a server-side logout is required (i.e. the token is\ndeleted).\n\nKnox provides one token per call to the login view - allowing each\nclient to have its own token which is deleted on the server side when\nthe client logs out.\n\nKnox also provides an option for a logged in client to remove *all*\ntokens that the server has - forcing all clients to re-authenticate.\n\nInstallation\n------------\n\nRequirements\n~~~~~~~~~~~~\n\nKnox depends on ``cryptography`` to provide bindings to ``OpenSSL`` for\ntoken generation This requires the OpenSSL build libraries to be\navailable.\n\nWindows\n^^^^^^^\n\nCryptography is a statically linked build, no extra steps are needed\n\nLinux\n^^^^^\n\n``cryptography`` should build very easily on Linux provided you have a C\ncompiler, headers for Python (if youâ€™re not using ``pypy``), and headers\nfor the OpenSSL and ``libffi`` libraries available on your system.\n\nDebian and Ubuntu:\n\n.. code:: bash\n\n    sudo apt-get install build-essential libssl-dev libffi-dev python3-dev python-dev\n\nFedora and RHEL-derivatives:\n\n.. code:: bash\n\n    sudo yum install gcc libffi-devel python-devel openssl-devel\n\nFor other systems or problems, see the `cryptography installation\ndocs <https://cryptography.io/en/latest/installation/>`__\n\nInstalling Knox\n~~~~~~~~~~~~~~~\n\nKnox should be installed with pip\n\n.. code:: bash\n\n    pip install django-rest-knox\n\nadd ``rest_framework`` and ``knox`` to your ``INSTALLED_APPS``\n\n.. code:: python\n\n    INSTALLED_APPS = (\n      ...\n      rest_framework,\n      knox,\n      ...\n    )\n\nRemember to apply the migrations for the models\n\n.. code:: bash\n\n    python manage.py migrate\n\nUsage\n-----\n\nViews\n~~~~~\n\nKnox achieves most of its functionality through three views. These can\neasily be included via your url config:\n\n.. code:: python\n\n    urlpatterns = [\n      #...snip...\n      url(r'api/auth/', include('knox.urls'))\n      #...snip...\n    ]\n\n**N.B.** it is important to use the string syntax and not try to import\n``knox.urls``, as the reference to the ``User`` model will cause the app\nto fail at import time.\n\nThe views would then acessible as:\n\n-  ``/api/auth/login`` -> ``LoginView``\n-  ``/api/auth/logout`` -> ``LogoutView``\n-  ``/api/auth/logoutall`` -> ``LogoutAllView``\n\nthey can also be looked up by name:\n\n.. code:: python\n\n    reverse('knox_login')\n    reverse('knox_logout')\n    reverse('knox_logoutall')\n\nLoginView\n^^^^^^^^^\n\nThis view accepts only a post request with an empty body.\n\nThe LoginView accepts the same sort of authentication as your Rest\nFramework ``DEFAULT_AUTHENTICATION_CLASSES`` setting. If this is not\nset, it defaults to ``(SessionAuthentication, BasicAuthentication)``.\n\nLoginView was designed to work well with Basic authentication, or\nsimilar schemes.\n\nWhen it receives an authenticated request, it will return json -\n``user`` an object representing the user that was authenticated -\n``token`` the token that should be used for other requests\n\nLogoutView\n^^^^^^^^^^\n\nThis view accepts only a post request with an empty body. It responds to\nKnox Token Authentication. On a successful request, the token used to\nauthenticate is deleted from the system and can no longer be used to\nauthenticate.\n\nLogoutAllView\n^^^^^^^^^^^^^\n\nThis view accepts only a post request with an empty body. It responds to\nKnox Token Authentication. On a successful request, the token used to\nauthenticate, and *all other tokens* registered to the same ``User``\naccount, are deleted from the system and can no longer be used to\nauthenticate.\n\nAuthentication Classes\n~~~~~~~~~~~~~~~~~~~~~~\n\nKnox provides one class for authentication - ``TokenAuthentication``\nThis works in using `DRF's authentication\nsystem <http://www.django-rest-framework.org/api-guide/authentication/>`__.\n\nKnox tokens should be generated using the provided views. Any\n``APIView`` or ``ViewSet`` can be accessed using these tokens by adding\n``TokenAuthentication`` to the View's ``authentication_classes``. To\nauthenticate, the ``Authorization`` header should be set on the request,\nwith a value of the word 'Token', then a space, then the authentication\ntoken provided by ``LoginView``.\n\nExample:\n\n.. code:: python\n\n    from rest_framework.permissions import IsAuthenticated\n    from rest_framework.response import Response\n    from rest_framework.views import APIView\n\n    from knox.auth import TokenAuthentication\n\n    class ExampleView(APIView):\n        authentication_classes = (TokenAuthentication,)\n        permission_classes = (IsAuthenticated,)\n\n        def get(self, request, format=None):\n            content = {\n                'foo': 'bar'\n            }\n            return Response(content)\n\nExample auth header:\n\n.. code:: javascript\n\n    Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b9836F45E23A345\n\n.. .. image:: https://travis-ci.org/James1345/django-rest-knox.svg?branch=develop\n   :target: https://travis-ci.org/James1345/django-rest-knox image:: https://travis-ci.org/James1345/django-rest-knox.svg?branch=develop\n   :target: https://travis-ci.org/James1345/django-rest-knox",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/James1345/django-rest-knox",
    "keywords": "django rest authentication login",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-rest-knox",
    "package_url": "https://pypi.org/project/django-rest-knox/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-rest-knox/",
    "project_urls": {
      "Homepage": "https://github.com/James1345/django-rest-knox"
    },
    "release_url": "https://pypi.org/project/django-rest-knox/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Authentication for django rest framework",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12747324,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5460adc5d7b70e3296500bf7a5631290ea87c47ad92a545ebd09a88538e29766",
        "md5": "2e4f1c0482559069ad2187a03e55842a",
        "sha256": "ea2f7fba9736f8754cdd2129fae5bfedf01f8015d697a4b7ced3e7482cd6df12"
      },
      "downloads": -1,
      "filename": "django-rest-knox-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2e4f1c0482559069ad2187a03e55842a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7439,
      "upload_time": "2015-09-14T18:09:15",
      "upload_time_iso_8601": "2015-09-14T18:09:15.772228Z",
      "url": "https://files.pythonhosted.org/packages/54/60/adc5d7b70e3296500bf7a5631290ea87c47ad92a545ebd09a88538e29766/django-rest-knox-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}