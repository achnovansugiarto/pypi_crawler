{
  "info": {
    "author": "A-yon Lee",
    "author_email": "i@hyurl.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ðŸŒ¹Microse\n\nMicrose (stands for *Micro Remote Object Serving Engine*) is a light-weight\nengine that provides applications the ability to serve modules as RPC services,\nwhether in another process or in another machine.\n\nThis is the python version of the microse implementation. For API reference,\nplease check the [API documentation](./api.md), or the\n[Protocol Reference](https://github.com/microse-rpc/microse-node/blob/master/docs/protocol.md).\n\nOther implementations:\n\n- [microse-node](https://github.com/microse-rpc/microse-node) Node.js implementation\n- [microse-swoole](https://github.com/microse-rpc/microse-swoole) PHP implementation\n    based on swoole\n\n## Install\n\n```sh\npip install microse\n```\n\n## Peel The Onion\n\nIn order to use microse, one must create a root `ModuleProxyApp` instance, so\nother files can use it as a root namespace and access its sub-modules.\n\n### Example\n\n```py\n# app/app.py\nfrom microse.app import ModuleProxyApp\nimport os\n\n# Create an abstract class to be used for IDE intellisense:\nclass AppInstance(ModuleProxyApp):\n    pass\n\n# Create the instance amd add type notation,\n# 'app' will be the root namespace for modules\napp: AppInstance = ModuleProxyApp(\"app\")\n```\n\nIn other files, just define a class with the same name as the filename, so that\nanother file can access it directly via the `app` namespace.\n\n```py\n# Be aware that the class name must correspond to the filename.\n\n# app/Bootstrap.py\nclass Bootstrap:\n    def init(self):\n        # ...\n```\n\nDon't forget to augment types in the `AppInstance` class if you need IDE typing\nsupport:\n\n```python\nfrom app.Bootstrap import Bootstrap as iBootstrap\n\nclass AppInstance(ModuleProxyApp):\n    @property\n    def Bootstrap(self) -> iBootstrap:\n        pass\n```\n\nAnd other files can access to the modules via the namespace:\n\n```py\n# index.py\nfrom app import app\n\n#  Accessing the module as a singleton and calling its function directly.\napp.Bootstrap.init()\n```\n\n### Non-class Module\n\nIf a module doesn't have a class with the same name as the filename, the module\nit it self will be used instead.\n\n```py\n# app/config.py\nasync def get(name: str):\n    # some async operations...\n    return value\n```\n\n```py\n# call the function directly\nvalue = await app.config.get(\"someKey\")\n```\n\n## Remote Service\n\nThe above example accesses the module and calls the function in the current\nprocess, but we can do more, we can serve the module as a remote service, and\ncalls its functions as remote procedures.\n\n### Example\n\nFor example, if I want to serve a user service in a different process, I just\nhave to do this:\n\n```py\n# app/services/User.py\n# It is recommended not to define the '__init__' method or use a non-parameter\n# '__init__' method.\n\nclass User:\n    __users = [\n        { \"firstName\": \"David\", \"lastName\": \"Wood\" },\n        # ...\n    ]\n\n    # Any method that will potentially be called remotely shall be async.\n    async def getFullName(self, firstName: str):\n        for user in self.__users:\n            if user[\"firstName\"] == firstName:\n                return f\"{user['firstName']} {user['lastName']}\"\n\n\n# app/app.py\nfrom app.services.User import User as iUser\n\nclass iServices:\n    @property\n    def User(self) -> iUser:\n        pass\n\nclass AppInstance(ModuleProxyApp):\n    @property\n    def services(self) -> iService:\n        pass\n```\n\n```py\n# server.py\nfrom app import app\nimport asyncio\n\nasync def serve():\n    server = await app.serve(\"ws://localhost:4000\")\n    await server.register(app.services.User)\n\n    print(\"Server started!\")\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(serve())\nloop.run_forever()\n```\n\nJust try `python server.py` and the service will be started immediately.\n\nAnd in the client-side code, connect to the service before using remote\nfunctions.\n\n```py\n# client.py\nfrom app import app\nimport asyncio\n\nasync def connect():\n    client = await app.connect(\"ws://localhost:4000\")\n\n    # Once registered, all functions of the service module will be remotized.\n    await client.register(app.services.User)\n\n    # Accessing the instance in local style but actually calling remote.\n    fullName = await app.services.User.getFullName(\"David\")\n\n    print(fullName) # David Wood\n\nasyncio.get_event_loop().run_until_complete(connect())\n```\n\nNOTE: to ship a service in multiple server nodes, just create and connect to\nmultiple channels, and register the service to each of them, when calling remote\nfunctions, microse will automatically calculate routes and redirect traffics to\nthem.\n\nNOTE: RPC calling will serialize (via JSON) all input and output data, those\ndata that cannot be serialized will be lost during transmission.\n\n## Generator Support\n\nWhen in the need of transferring large data, generator functions could be a\ngreat help, unlike general functions, which may block network traffic when\ntransmitting large data since they send the data as a whole, generator functions,\non the other hand, will transfer the data piece by piece.\n\n```py\n# app/services/User.py\nclass User:\n    __friends = {\n        \"David\": [\n            { \"firstName\": \"Albert\", \"lastName\": \"Einstein\" },\n            { \"firstName\": \"Nicola\", \"lastName\": \"Tesla\" },\n            # ...\n        ],\n        # ...\n    }\n\n    async def getFriendsOf(self, name: str):\n        friends = self.__friends.get(name)\n\n        if friends:\n            for friend in friends:\n                yield f\"{friend['firstName'} {friend['lastName']}\"\n```\n\n```py\n# index.py\n\nasync def handle():\n    generator = app.services.User.getFriendsOf(\"David\")\n\n    async for name in generator:\n        print(name)\n        # Albert Einstein\n        # Nicola tesla\n        # ...\n\n    # The following usage gets the same result.\n    generator2 = app.services.User.getFriendsOf(\"David\")\n\n    while True:\n        try:\n            name = await generator2.__anext__()\n            print(name)\n            # Albert Einstein\n            # Nicola tesla\n            # ...\n\n        # When all data has been transferred, a StopAsyncIteration exception\n        # will be raised.\n        except StopAsyncIteration:\n            break\n\nasyncio.get_event_loop().run_until_complete(handle())\n```\n\n## Life Cycle Support\n\nMicrose provides a way to support life cycle functions, if a service class has\nan `init()` method, it will be used for asynchronous initiation, and if the\nclass has a `destroy()` method, it will be used for asynchronous destruction.\nWith these feature, the service class can, for example, connect to a database\nwhen starting the server and release the connection when the server shuts down.\n\n```py\n# app/services/User.py\nclass user:\n    # Instead of using '__init__()', which is synchronous, we define an\n    # asynchronous 'init()' method.\n    async def init(self):\n        # ...\n\n    # Instead of using '__del__()', which is synchronous, we define an\n    # asynchronous 'destroy()' method.\n    async def destroy(self):\n        # ...\n```\n\n## Standalone Client\n\nMicrose also provides a way to be running as a client-only application, in this\ncase the client will not actually load any modules since there are no such files,\ninstead, it just map the module names so you can use them as usual.\n\nIn the following example, we assume that `app.services.user` service is served\nby a Node.js program, and we can use it in our python program as usual.\n\n```py\nfrom microse.app import ModuleProxyApp\n\napp = ModuleProxyApp(\"app\", False) # pass the second argument False\n\nasync def handle():\n    client = await app.connect(\"ws://localhost:4000\")\n    await client.register(app.services.user)\n\n    fullName = await app.services.user.getFullName(\"David\")\n\n    print(fullName) # David Wood\n\nasyncio.get_event_loop().run_until_complete(handle())\n```\n\nFor client-only application, you may need to declare all abstract classes:\n\n```py\nclass iUser:\n    def getFullName(self, name: str) -> str:\n        pass\n\nclass iServices:\n    @property\n    def user(self) -> iUser:\n        pass\n\nclass AppInstance(ModuleProxyApp):\n    @property\n    def services(self) -> iServices:\n        pass\n```\n\n## Process Interop\n\nThis implementation supports interop in the same process, that means, if it\ndetects that the target remote instance is served in the current process,\nthe function will always be called locally and prevent unnecessary network\ntraffic.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/microse-rpc/microse-py",
    "keywords": "rpc,micro-service,module-proxy",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microse",
    "package_url": "https://pypi.org/project/microse/",
    "platform": "",
    "project_url": "https://pypi.org/project/microse/",
    "project_urls": {
      "Homepage": "https://github.com/microse-rpc/microse-py"
    },
    "release_url": "https://pypi.org/project/microse/1.0.0/",
    "requires_dist": [
      "websockets (>=8.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Micro Remote Object Serving Engine",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10634551,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3a557eff1e9a70e812e6bea74527f826f5a944ead851cf48dc1c139e980de62",
        "md5": "efee0029089de4ebc78b845c27dcd6ec",
        "sha256": "0c1465c63dd8919d7d544b84496ae39739f5355afa61849230ddb67944951f24"
      },
      "downloads": -1,
      "filename": "microse-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efee0029089de4ebc78b845c27dcd6ec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17790,
      "upload_time": "2020-10-25T18:32:23",
      "upload_time_iso_8601": "2020-10-25T18:32:23.820737Z",
      "url": "https://files.pythonhosted.org/packages/b3/a5/57eff1e9a70e812e6bea74527f826f5a944ead851cf48dc1c139e980de62/microse-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2fc49a30baa996bc30efd60fef39b2c26cd92c8d095f8a7a11d336a7028c3e0",
        "md5": "60979bf3594356e6a1138b0a3e464459",
        "sha256": "09206958c948168e6fd3c79e29f455abb87bdd015614b4551472ad61af7f54c5"
      },
      "downloads": -1,
      "filename": "microse-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "60979bf3594356e6a1138b0a3e464459",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18096,
      "upload_time": "2020-10-25T18:32:27",
      "upload_time_iso_8601": "2020-10-25T18:32:27.401222Z",
      "url": "https://files.pythonhosted.org/packages/f2/fc/49a30baa996bc30efd60fef39b2c26cd92c8d095f8a7a11d336a7028c3e0/microse-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}