{
  "info": {
    "author": "Johannes Hoppe",
    "author_email": "info@johanneshoppe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Office/Business :: Financial :: Accounting",
      "Topic :: Software Development"
    ],
    "description": "===========\nDjango-VIES\n===========\n\nValidate and store VAT Information Exchange System (VIES) data in Django.\n\nInstallation\n------------\n\n.. code:: shell\n\n    python3 -m pip install django-vies\n\nUsage\n-----\n\n``VATINField`` for models\n\n.. code:: python\n\n    from django.db import models\n    from vies.models import VATINField\n\n    class Company(models.Model):\n        name = models.CharField(max_length=100)\n        vat = VATINField(blank=True, null=True)\n\n``VATIN`` wrapper class, allows access to result.\n\n.. code:: python\n\n    >>> from vies.types import VATIN\n    >>> vat = VATIN('LU', '26375245')\n    >>> vat.is_valid()\n    True\n    >>> vat.data\n    {\n        'countryCode': 'LU',\n        'vatNumber': '26375245',\n        'requestDate': datetime.date(2020, 4, 13),\n        'valid': True,\n        'name': 'AMAZON EUROPE CORE S.A R.L.',\n        'address': '38, AVENUE JOHN F. KENNEDY\\nL-1855  LUXEMBOURG'\n    }\n\n\nYou can also use the classmethod ``VATIN.from_str`` to create ``VATIN``\nfrom ``str``.\n\n.. code:: python\n\n    >>> from vies.types import VATIN\n    >>> vat = VATIN.from_str('LU26375245')\n    >>> vat.is_valid()\n    True\n\nThe VIES API endpoint can be very unreliable and seems to have an IP based access limit.\nTherefore the ``VATINField`` does NOT perform API based validation by default. It needs\nto be explicitly turned on or performed in a separate task.\n\ne.g.\n\n.. code:: python\n\n    from vies.models import VATINField\n    from vies.validators import VATINValidator\n\n\n    class Company(models.Model):\n        name = models.CharField(max_length=100)\n        vat = VATINField(validators=[VATINValidator(verify=True, validate=True)])\n\n``validate=True`` will tell the validator to validate against the VIES API.\n``verify`` is enabled on by default and will only verify that the VATIN matches the country's specifications.\n\nIt is recommended to perform VIES API validation inside an asynchronous task.\n\ne.g. using celery\n\n.. code:: python\n\n    from celery import shared_task\n    from vies.models import VATINField\n\n\n    class Company(models.Model):\n        name = models.CharField(max_length=100)\n        vat = VATINField()\n        vat_is_valid = models.BooleanField(default=False)\n\n        def __init__(self, *args, **kwargs):\n            self.__vat = self.vat\n            super(Company, self).__init__(*args, **kwargs)\n\n        def save(self, *args, **kwargs):\n            if self.__vat != self.vat:\n                validate_vat_field.delay(self)\n            super(Company, self).save(*args, **kwargs)\n            self.__vat = self.vat\n\n        def refresh_from_db(self, *args, **kwargs)\n            super(Company, self).refresh_from_db(*args, **kwargs)\n            self.__vat = self.vat\n\n    @shared_task\n    def validate_vat_field(company):\n        try:\n            company.vat.validate()\n        except ValidationError:\n            company.vat_is_valid = False\n        else:\n            company.vat_is_valid = True\n        finally:\n            company.save(update_fields=['vat_is_valid'])\n\n\nTranslations\n------------\n\nFeel free to contribute translations, it's simple!\n\n.. code:: shell\n\n    cd vies\n    django-admin makemessages -l $YOUR_COUNTRY_CODE\n\nJust edit the generated PO file. Pull-Requests are welcome!\n\n\nLicense\n-------\nThe MIT License (MIT)\n\nCopyright (c) 2014-2016 Johannes Hoppe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/codingjoe/django-vies",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-vies",
    "package_url": "https://pypi.org/project/django-vies/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-vies/",
    "project_urls": {
      "Homepage": "https://github.com/codingjoe/django-vies"
    },
    "release_url": "https://pypi.org/project/django-vies/6.0.1/",
    "requires_dist": [
      "Django (>=2.2)",
      "retrying (>=1.1.0)",
      "zeep (>=2.5.0)"
    ],
    "requires_python": "",
    "summary": "Validate and store VAT Information Exchange System (VIES) data in Django.",
    "version": "6.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10905250,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8de9840aabdcc7e2f3fbb60bdc1dd5206732e2eb530c2656fa8d0262fd17ad1a",
        "md5": "8b45a6ae0fb5a5f5ac86ead7383a5709",
        "sha256": "adfdec0023e447793d3bea3572737f60d9173558c386e4a5b9a0653579bfa157"
      },
      "downloads": -1,
      "filename": "django_vies-6.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8b45a6ae0fb5a5f5ac86ead7383a5709",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 14511,
      "upload_time": "2021-07-08T15:09:09",
      "upload_time_iso_8601": "2021-07-08T15:09:09.761806Z",
      "url": "https://files.pythonhosted.org/packages/8d/e9/840aabdcc7e2f3fbb60bdc1dd5206732e2eb530c2656fa8d0262fd17ad1a/django_vies-6.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a69eb95c64fa545b663c9b46dad203db3cea7be74ce2aaf02962b7724a5132ab",
        "md5": "1791b5ab923d2c9811e3a90237a34059",
        "sha256": "4141dac68d1d1c5e1cff7092b045ae1c4b58ef96b04808ccfa2ff9ff5337b1d9"
      },
      "downloads": -1,
      "filename": "django-vies-6.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1791b5ab923d2c9811e3a90237a34059",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10916,
      "upload_time": "2021-07-08T15:09:10",
      "upload_time_iso_8601": "2021-07-08T15:09:10.790154Z",
      "url": "https://files.pythonhosted.org/packages/a6/9e/b95c64fa545b663c9b46dad203db3cea7be74ce2aaf02962b7724a5132ab/django-vies-6.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}