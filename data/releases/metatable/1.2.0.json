{
  "info": {
    "author": "Andrei Lapets",
    "author_email": "a@lapets.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=========\nmetatable\n=========\n\nExtensible table data structure that supports the introduction of user-defined workflow combinators and the use of these combinators in concise workflow descriptions.\n\n|pypi| |readthedocs| |actions| |coveralls|\n\n.. |pypi| image:: https://badge.fury.io/py/metatable.svg\n   :target: https://badge.fury.io/py/metatable\n   :alt: PyPI version and link.\n\n.. |readthedocs| image:: https://readthedocs.org/projects/metatable/badge/?version=latest\n   :target: https://metatable.readthedocs.io/en/latest/?badge=latest\n   :alt: Read the Docs documentation status.\n\n.. |actions| image:: https://github.com/reity/metatable/workflows/lint-test-cover-docs/badge.svg\n   :target: https://github.com/reity/metatable/actions/workflows/lint-test-cover-docs.yml\n   :alt: GitHub Actions status.\n\n.. |coveralls| image:: https://coveralls.io/repos/github/reity/metatable/badge.svg?branch=main\n   :target: https://coveralls.io/github/reity/metatable?branch=main\n   :alt: Coveralls test coverage summary.\n\nPackage Installation and Usage\n------------------------------\nThe package is available on `PyPI <https://pypi.org/project/metatable/>`_::\n\n    python -m pip install metatable\n\nThe library can be imported in the usual ways::\n\n    import metatable\n    from metatable import *\n\nExamples\n^^^^^^^^\nThis library makes it possible to work with tabular data that is represented as a list of lists (*i.e.*, each row is a list of column values and a table is a list of rows)::\n\n    >>> from metatable import *\n    >>> t = metatable([['a', 0], ['b', 1], ['c', 2]])\n    >>> list(iter(t))\n    [['a', 0], ['b', 1], ['c', 2]]\n\nAll rows in a ``metatable`` instance can be updated in-place using a symbolic representation (implemented using the `symbolism <https://pypi.org/project/symbolism/>`_ library) of the transformation that must be applied to each row. For example, the transformation ``{1: column(0)}`` indicates that the value in the column having index ``1`` (*i.e.*, the right-hand column) should be replaced with the value in the column having index ``0`` (*i.e.*, the left-hand column)::\n\n    >>> t.update({1: column(0)})\n    [['a', 'a'], ['b', 'b'], ['c', 'c']]\n\nIt is also possible to perform an update that removes rows based on a condition. The condition in the example below is the symbolic expression ``column(1) > symbol(0)`` (constructed using the `symbolism <https://pypi.org/project/symbolism/>`_ library)::\n\n    >>> from symbolism import symbol\n    >>> t = metatable([['a', 0], ['b', 1], ['c', 2]])\n    >>> t.update_filter({0: column(1)}, column(1) > symbol(0))\n    [[1, 1], [2, 2]]\n\nThere is also support for working with a tabular data set in which there is a header row containing column names::\n\n    >>> t = metatable([['char', 'num'], ['a', 0], ['b', 1]], header=True)\n    >>> t.update({1: column(0)})\n    [['char', 'num'], ['a', 'a'], ['b', 'b']]\n\nSee the module documentation for additional examples.\n\nDocumentation\n-------------\nThe documentation can be generated automatically from the source files using `Sphinx <https://www.sphinx-doc.org/>`_::\n\n    cd docs\n    python -m pip install -r requirements.txt\n    sphinx-apidoc -f -E --templatedir=_templates -o _source .. ../setup.py && make html\n\nTesting and Conventions\n-----------------------\nAll unit tests are executed and their coverage is measured when using `pytest <https://docs.pytest.org/>`_ (see ``setup.cfg`` for configuration details)::\n\n    python -m pip install pytest pytest-cov\n    python -m pytest\n\nAlternatively, all unit tests are included in the module itself and can be executed using `doctest <https://docs.python.org/3/library/doctest.html>`_::\n\n    python metatable/metatable.py -v\n\nStyle conventions are enforced using `Pylint <https://www.pylint.org/>`_::\n\n    python -m pip install pylint\n    python -m pylint metatable\n\nContributions\n-------------\nIn order to contribute to the source code, open an issue or submit a pull request on the `GitHub page <https://github.com/reity/metatable>`_ for this library.\n\nVersioning\n----------\nThe version number format for this library and the changes to the library associated with version number increments conform with `Semantic Versioning 2.0.0 <https://semver.org/#semantic-versioning-200>`_.\n\nPublishing\n----------\nThis library can be published as a `package on PyPI <https://pypi.org/project/metatable/>`_ by a package maintainer. Install the `wheel <https://pypi.org/project/wheel/>`_ package, remove any old build/distribution files, and package the source into a distribution archive::\n\n    python -m pip install wheel\n    rm -rf dist *.egg-info\n    python setup.py sdist bdist_wheel\n\nNext, install the `twine <https://pypi.org/project/twine/>`_ package and upload the package distribution archive to PyPI::\n\n    python -m pip install twine\n    python -m twine upload dist/*\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/reity/metatable",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metatable",
    "package_url": "https://pypi.org/project/metatable/",
    "platform": null,
    "project_url": "https://pypi.org/project/metatable/",
    "project_urls": {
      "Homepage": "https://github.com/reity/metatable"
    },
    "release_url": "https://pypi.org/project/metatable/1.2.0/",
    "requires_dist": [
      "symbolism (~=0.3)"
    ],
    "requires_python": "",
    "summary": "Extensible table data structure that supports concise workflow descriptions via user-defined combinators.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14649671,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0db6850a546cdbbd6b261bbff5e6670724ff7ba033de9f94072f25c5e34e6d2d",
        "md5": "bc05a659857ea241af42ab980b949b24",
        "sha256": "637759eecabcd550aa0e51ea8f1e83d193dd677f55fa289f9b0a081491e0a3be"
      },
      "downloads": -1,
      "filename": "metatable-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bc05a659857ea241af42ab980b949b24",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7050,
      "upload_time": "2022-03-29T22:42:02",
      "upload_time_iso_8601": "2022-03-29T22:42:02.818344Z",
      "url": "https://files.pythonhosted.org/packages/0d/b6/850a546cdbbd6b261bbff5e6670724ff7ba033de9f94072f25c5e34e6d2d/metatable-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ed22063a3585237f2a1f024f972b2cc756fff6dde14f637ba5337bdaf430039",
        "md5": "8ddcf6aff338c336284c6397023306ce",
        "sha256": "9da076658bc16fd50360b205c07bb1f8b86a2228f6a2a139325dd2173b188fd6"
      },
      "downloads": -1,
      "filename": "metatable-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8ddcf6aff338c336284c6397023306ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6542,
      "upload_time": "2022-03-29T22:42:04",
      "upload_time_iso_8601": "2022-03-29T22:42:04.346009Z",
      "url": "https://files.pythonhosted.org/packages/2e/d2/2063a3585237f2a1f024f972b2cc756fff6dde14f637ba5337bdaf430039/metatable-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}