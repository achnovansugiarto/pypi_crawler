{
  "info": {
    "author": "Dan Greenhalgh",
    "author_email": "dgreenhalgh@vercer.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Django Query Preparer\n\nDjango Query Preparer (`dqp`) can prepare your queries in the database on application start so they don't need to be parsed and compiled at execution time! This is a postgres specific implementation which targets python 3.7+ and Django 2.2+.\n\n## Usage\n\n### Raw SQL\n\n#### Quickstart\n\nPreparing and executing raw SQL statements is straight forward:\n\n```python\nfrom dqp import execute_stmt, prepare_sql\n\n@prepare_sql\ndef myquery():\n    return \"select count(*) from django_migrations;\"\n\nexecute_stmt(myquery())  # <- note that we call myquery() which gives us the name of the prepared statement.\n```\n\nThe steps to preparing and executing an SQL query on the fly are:\n1. Write a function that takes no arguments and returns a string which is the query to prepare.\n2. Decorate this function with the `@prepare_sql` decorator. Note that `@prepare_sql` evaluates the function and prepares the SQL in the database immediately.\n3. Call `execute_stmt` and pass the function as the prepared statement name. The decorator changes the output of the function in your scope to return the name of the prepared statement.\n\nYou can use placeholder parameters as normal too:\n\n```python\nfrom dqp import execute_stmt, prepare_sql\n\n@prepare_sql\ndef myquery():\n    return \"select count(*) from django_migrations where id < %s;\"\n\nexecute_stmt(myquery(), [10])\n```\n\nor\n\n```python\nfrom dqp import execute_stmt, prepare_sql\n\n@prepare_sql\ndef myquery():\n    return \"select count(*) from django_migrations where id < %(migration_id)s;\"\n\nexecute_stmt(myquery(), {\"migration_id\": 10})\n```\n\n#### In Django\n\nIt's almost as easy to use prepared SQL statements in a Django app:\n\n1. Add `\"dqp.apps.DQPConfig\"` to your list of `INSTALLED_APPS`.\n2. Again, write a function that takes no arguments and returns one string which is the query to prepare.\n3. Decorate this function with the `@register_prepared_sql` decorator.  The decorated functions will be evaluated and prepared in the database when the app receives the `on_ready` signal.\n4. Call `execute_stmt` and pass the function as the prepared statement name.\n\ne.g:\n\n```python\nfrom django.http import JsonResponse\n\nfrom dqp import execute_stmt, register_prepared_sql\n\n@register_prepared_sql\ndef myquery():\n    return \"select count(*) from django_migrations;\"\n\ndef view_migrations(request):\n    # migrations will be a list of dicts\n    migrations = execute_stmt(myquery())\n    return JsonResponse(migrations)\n```\n\n### Django ORM queries\n\n#### Basic Usage\n\nYou can also prepare queries built using the Django ORM methods.\n\n1. Add `\"dqp.apps.DQPConfig\"` to your list of `INSTALLED_APPS`.\n2. For the model that you want to prepare the query against, add the `PreparedStatementManager`:\n\n```python\nfrom django.db import models\n\nfrom dqp.manager import PreparedStatementManager\n\nclass MyModel(models.Model):\n  name = models.CharField(max_length=50, blank=True, null=True)\n  alias = models.CharField(max_length=50, blank=True, null=True)\n\n  objects = models.Manager()\n  prepare = PreparedStatementManager()  # <-- Here is the PreparedStatementManager!\n```\n\n3. Write a function that takes no arguments and returns a query set using the `PreparedStatementManager`. Decorate it with the `register_prepared_qs` decorator:\n\n```python\nfrom dqp import register_prepared_qs\n\n@register_prepared_qs\ndef get_all_from_my_model():\n  return MyModel.prepare.all()\n```\n\n4. Call `execute_stmt()`. It will return a `PreparedStatementQuerySet`:\n\n```python\nfrom dqp import execute_stmt\nqs = execute_stmt(get_all_from_my_model())\n\nfrom dqp.queryset import PreparedStatementQuerySet\nisinstance(qs, PreparedStatementQuerySet)  # -> True\n```\n\nYou can use a placeholder when preparing query sets with input arguments:\n\n```python\nfrom dqp import register_prepared_qs, Placeholder\n\n@register_prepared_qs\ndef get_my_model_lt():\n  return MyModel.prepare.filter(id__lt=Placeholder(\"id\"))\n\nexecute_stmt(get_my_model_lt(), id=4)\n```\n\nYou have to name your placeholders and then use those names as keyword arguments to `execute_stmt`. This is because Django can re-order the filters so there's no guarantee that the order in which you specify the filters in the ORM functions will be the order they appear in the executed SQL.\n\nIf you want to use lists as inputs you can use `ListPlaceholder`:\n```python\nfrom dqp import register_prepared_qs, ListPlaceholder\n\n@register_prepared_qs\ndef get_my_model_in():\n  return MyModel.prepare.filter(id__in=ListPlaceholder(\"ids\"))\n\nexecute_stmt(get_my_model_in(), ids=[4, 5])\n```\n\nEach placeholder must have a unique name within the same query. You can mix and match constant and passed in parameters:\n\n```python\nfrom dqp import register_prepared_qs, ListPlaceholder\n\n@register_prepared_qs\ndef get_active_in_range():\n  return MyModel.prepare.filter(id__in=ListPlaceholder(\"ids\"), active=True)\n\nexecute_stmt(get_active_in_range(), ids=range(10))\n```\n\n\n\n### Limitations\n\nThe following query set methods are not supported when preparing a query nor on a `PreparedStatementQuerySet`:\n- `aggregate()`\n- `in_bulk()`\n- `create()`\n- `bulk_create()`\n- `bulk_update()`\n- `get_or_create()`\n- `update_or_create()`\n- `delete()`\n- `update()`\n- `exists()`\n- `explain()`\n\n### Prefetch Related\nYou cannot use `prefetch_related` when preparing a query:\n\n```python\n@register_prepared_qs\ndef get_my_model_lt():\n  return MyModel.prepare.filter(id__lt=Placeholder).prefetch_related('related_field')\n\n> PreparedQueryNotSupported: Cannot use prefetch_related when preparing queysets. Add the prefetch related to the returned queryset on statement execution\n```\n\nAs the error says, you must use the prefetch related AFTER executing the prepared statement:\n\n```python\n@register_prepared_qs\ndef get_my_model_lt():\n  return MyModel.prepare.filter(id__lt=Placeholder)\n\nqs = execute_stmt(get_my_model_lt(), [4])\nqs = qs.prefetch_related('related_field')\n```\n\nThe query for the `prefetch_related` will not be a prepared statement. If you need the related data to be prepared and executed as prepared statement then you'll have to write two separate queries and map one to the other manually.\n\n### Differences with ordinary Django usage:\nIn normal Django usage `get()`, `count()`, `first()`, `last()`, `latest()` and `earliest()` all execute immediately. This doesn't happen for prepared queries: they do not execute immediately. But they will still produce what you expect:\n\n```python\n# Normal django usage\nMyModel.objects.count()\n# > 12\n\n# Prepared statement usage\n@prepare_qs\ndef my_model_count():\n  return MyModel.prepare.count()\n# > no result - not executed yet\n\nexecute_stmt(my_model_count())\n# > 12\n```\n\nA query prepared using `get()`, `first()`, `last()`, `latest()` and `earliest()` follows the Django behaviour when executed and will return a model instance, not a query set, or it will raise the same exceptions if zero or more than one rows match the filter.\n\n```python\n@prepare_qs\ndef my_model_get():\n  return MyModel.prepare.get(id=1)\n# > no result - not executed yet\n\nqs = execute_stmt(my_model_get())\nisinstance(qs, MyModel)\n# > True\n```\n\nYou can use  `count()`, `first()` and `last()` on a `PreparedStatementQuerySet` but you can't use `get()`, `filter()`, `latest()` or `earliest()`. You'll need to use python's built-in `filter` and `sorted` methods to further filter or order the results of an executed prepared statement.\n\n## Start-up Behaviour\n\nDjango-query-preparer will attempt to prepare all registered queries on app start-up when it receives the on-ready signal from Django.  Sometimes this will fail, e.g. because a table or column in one of your prepared queries hasn't been created by a migration yet, or because you're running tests and there's no schema!  In these cases, `dqp` will catch the error and log it as a `warning`. Then when the prepared statement is executed for the first time (for each process) it will try again to prepare the query before execution. If it fails again then the error will be raised.  We feel that this offers the best compromise between performance and pragmatism.\n\n## Configuration\n\nAs noted, add `\"dqp.apps.DQPConfig\"` to your list of `INSTALLED_APPS`.\n\nPrepared statements in postgres are only valid for the duration of the database session. So if you start a new database session then any prepared statements that have been previously prepared will be lost.  To make use of prepared statements in Django you'll need to make sure that your Django app doesn't create a new database connection for every request. You can use the `CONN_MAX_AGE` parameter to force Django to re-use database connections.  Alternatively you can use `pgbouncer` (see below) to pool your db connections.\n\n## Using with Celery\n\nCelery creates a new database connection for every job.  This means that you cannot use prepared statements without some sort of connection pooling, e.g. `pgbouncer`.\n\n## Using with `pgbouncer`\n\nWhile `pgbouncer` will re-use a database connection between, by default it will run `DISCARD ALL` before returning a session back to the pool to be re-used. This will deallocate all prepared queries. To get around this, set the  `server_reset_query` config item to be `\"SET SESSION AUTHORIZATION DEFAULT; RESET ALL; CLOSE ALL; UNLISTEN *; SELECT pg_advisory_unlock_all(); DISCARD SEQUENCES; DISCARD TEMP;\"` in your `pgbouncer` config.\n\n## Common errors\n\n```\nProgrammingError: can't adapt type 'PreparedStatementQuerySet'\n```\n\nThis is caused by passing a query set into `execute_stmt` rather than a primitive type, or more likely a list of primitive types. If you have a set of values from another query set then you need to call `list()` on them to convert form a query set to a list.\n\n## Using `dqp` in tests\n\n### Unittest\n\nPrepared queries are stored per database session in postgres. But database sessions are restarted between each test by Django. To make sure that all you prepared statements are re-prepared before every test add the `PrepStmtTestMixin` to your test class:\n\n```python\nfrom django.test import TestCase\nfrom dqp.testing import PrepStmtTestMixin\n\nclass MyTests(TestCase, PrepStmtTestMixin):\n    @classmethod\n    def setUp(cls):\n      # If you have a setUp method in your test class then you'll need to call super().setUp()\n      # to make sure the setUp method of PrepStmtTestMixin is called.\n      super().setUp()\n\n    def test_stuff(self):\n      # ...\n      pass\n```\n\nAs re-preparing the statements does take a small amount of time you should only use the `PrepStmtTestMixin` in the tests that use prepared queries.\n\n### Pytest\n\nYou can use the `prepare_all` function to prepare statements at the start of any test that requires it:\n\n```python\nimport pytest\nfrom dqp.testing import prepare_all\n\n@pytest.mark.django_db(transaction=True)\ndef test_stuff():\n    prepare_all()\n    # testing code...\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vercer-cmt/django-query-preparer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-query-preparer",
    "package_url": "https://pypi.org/project/django-query-preparer/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-query-preparer/",
    "project_urls": {
      "Homepage": "https://github.com/vercer-cmt/django-query-preparer"
    },
    "release_url": "https://pypi.org/project/django-query-preparer/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A package to prepare queries in postgres before execution",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6660773,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e092e0544d58d63bf485559c54be39d7da704bdd4a0d014943052a13ab31ad9",
        "md5": "515dca07d5bff9e013d771ace234086e",
        "sha256": "8f572ceaf64b6f226e3cc884a0dd26f6b11f7a7e4ed78f172af80c99f3b8f701"
      },
      "downloads": -1,
      "filename": "django_query_preparer-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "515dca07d5bff9e013d771ace234086e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18066,
      "upload_time": "2020-02-17T10:15:09",
      "upload_time_iso_8601": "2020-02-17T10:15:09.757822Z",
      "url": "https://files.pythonhosted.org/packages/5e/09/2e0544d58d63bf485559c54be39d7da704bdd4a0d014943052a13ab31ad9/django_query_preparer-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "caf1455258d551b11a6f12eb2684e60bb797e59314f35264a523de905893f36c",
        "md5": "682b2d748e8e7177457cf3c7c2a6078e",
        "sha256": "024d43f5ccd5ec3044e272de5d4f5eb8f12ec41f4190d4e5a0e33b6a1d2a5205"
      },
      "downloads": -1,
      "filename": "django-query-preparer-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "682b2d748e8e7177457cf3c7c2a6078e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13764,
      "upload_time": "2020-02-17T10:15:12",
      "upload_time_iso_8601": "2020-02-17T10:15:12.689301Z",
      "url": "https://files.pythonhosted.org/packages/ca/f1/455258d551b11a6f12eb2684e60bb797e59314f35264a523de905893f36c/django-query-preparer-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}