{
  "info": {
    "author": "Seb35",
    "author_email": "seb35pypi0@seb35.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: Public Domain",
      "Natural Language :: French",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "MetsLesLiens\n============\n\nRecherche ~~et qualifie~~ (pas pour l’instant) des liens dans\ndes textes de loi français.\n\nDémarrage rapide\n----------------\n\nAvant de commencer, un résumé de ce qu’on fait :\n\n1. Dans cette première étape, nous cherchons à placer des liens dans des\n   textes de loi français, en gros toutes les expressions ressemblant\n   plus ou moins à « article L. 327-3 quatertricies-0 de la loi n°\n   94-239 du 28 février 1994 ».\n2. Seule une analyse syntaxique est faite à ce stade, il n’est pas\n   affirmé que l’article pointé existe réellement : seront donc\n   retournés à ce stade des *candidats de liens*.\n\nDémonstration\n'''''''''''''\n\nLes sorties de deux textes sont disponibles :\n\n* `la loi 78-17 <https://framagit.org/parlement-ouvert/metslesliens/snippets/1529>`__\n  (`texte <https://framagit.org/parlement-ouvert/metslesliens/snippets/1643>`__)\n* `le code civil <https://framagit.org/parlement-ouvert/metslesliens/snippets/1530>`__\n  (`texte <https://framagit.org/parlement-ouvert/metslesliens/snippets/1644>`__)\n\nSont présentés successivement les candidats de liens :\n\n* sous forme `texte`, avec leurs index en nombre de caractères et leurs\n  numéro de ligne,\n* sous forme `structuré`, avec les données découpées et ordonnées dans\n  un forme facilement réutilisable en Python,\n* sous forme `arbre`, avec leurs index et l’ensemble des arbres capturés.\n\nInstallation et utilisation de base\n'''''''''''''''''''''''''''''''''''\n\n1. Installer Python 3 et pip ;\n2. Télécharger cette librairie :\n   ``git clone https://framagit.org/parlement-ouvert/metslesliens.git``\n3. Installer les dépendances avec pip :\n   ``pip install -r requirements.txt``\n4. Obtenir un texte de loi écrit en texte brut : pas (trop) de HTML, ou\n   du moins il faut que les expressions recherchées ne soient pas\n   entrecoupées de balisages. Les textes écrits en Markdown par `Archéo\n   Lex <https://archeo-lex.fr>`__ sont censés convenir ;\n5. Lancer le programme principal donnelescandidats.py :\n   ``./donnelescandidats.py fichier_du_texte.txt``\n\nQue faire ensuite ?\n-------------------\n\n1. Essayer les formats « structuré » et « arbre » dans une optique de\n   réutilisation de la bibliothèque\n\n   Il est possible d’ajouter un paramètre « format » dans le programme\n   principal et la bibliothèque :\n   ``./donnelescandidats.py --format=structuré fichier_du_texte.txt``\n   ``./donnelescandidats.py --format=arbre fichier_du_texte.txt``\n   Le format « structuré » retourne les structures Python prêtes à être\n   réutilisées dans d’autres programmes, par exemple de visualisation\n   ou de traitement de la loi. La structure est normalement assez\n   naturelle, noter juste que, pour les articles et autres titres,\n   les tuples (str, str) sont les plages d’articles/titres ; par exemple\n   « les articles 34, 41 à 45 et 56 » donnent la liste ['34', ('41', '45'),\n   '56'].\n   Le format « arbre » permet de voir directement la structure retournée\n   par la grammaire via Parsimonious, ce format est utile pour comprendre\n   le fonctionnement interne de la librairie metslesliens et de la grammaire.\n\n2. Vérifier la qualité\n\n   Ce programme est en cours de développement, il faudrait désormais\n   confirmer la qualité de la reconnaissance des liens. Pour cela, les\n   humains lecteurs de cette notice sont invité à comparer les résultats\n   du programme avec ce qu’ils estiment être un lien qu’il faudrait\n   reconnaître de façon automatique.\n\n   Un format spécial a été introduit dans ce but, permettant d’afficher\n   un peu plus de contexte autour des pré-candidats (les expressions\n   susceptibles d’être un lien mais non-vérifiées par la grammaire), cela\n   permet a priori de pouvoir vérifier plus rapidement et facilement les\n   potentiels liens :\n   ``./donnelescandidats.py --format=debug fichier_du_texte.txt``\n   Il y a 20 caractères avant le pré-candidat et 120 pour le pré-candidat,\n   tous sans aucun retour à la ligne. Lorsqu’une expression est reconnue,\n   elle est indiquée entre les caractères \"⬤ \" (ce caractère se repère\n   bien dans les pavés de texte).\n\n   Si vous effectuez une telle tâche, d’abord « merci ! », ensuite le\n   mieux est de créer une\n   `issue <https://framagit.org/parlement-ouvert/metslesliens/issues>`__\n   pour dire ce que vous avez vérifié (même et surtout si le résultat du\n   programme était correct) et, s’il y a des manques ou au contraire des\n   liens qui n’auraient pas dûs être reconnus, donner les expressions\n   fautives dans la description de l’issue.\n\n   Pour les plus programmeurs, vous pouvez proposer une `merge\n   request <https://framagit.org/parlement-ouvert/metslesliens/merge_requests>`__\n   en modifiant la `grammaire\n   PEG <https://framagit.org/parlement-ouvert/blob/master/metslesliens/grammaire-liens.txt>`__.\n\n3. Améliorer la grammaire\n\n   Alimentées par les vérifications, les problèmes sur la grammaire peuvent\n   être corigés. Ils sont listés dans la colonne `\"grammaire\" <https://framagit.org/parlement-ouvert/metslesliens/boards>`__\n   de la liste des issues. Il est parfois nécessaire d’une recherche\n   documentaire, par exemple sur la forme des liens vers les directives\n   européennes ou vers les décisions du Conseil constitutionnel. La correction\n   proprement dite se fait en général en changeant seulement le fichier de\n   grammaire, mais il peut être nécessaire d’adapter aussi le code Python\n   (mais si vous ne savez pas coder, la première étape permet déjà d’avancer).\n\n4. Ajouter un autre module de qualification (programmeurs)\n\n   Je pense qu’il faudrait ajouter un deuxième module de qualification\n   des candidats de liens, afin de vérifier que lesdits candidats de\n   liens existent réellement dans les textes cibles.\n\n   Cela suppose d’avoir une base de données exhaustive des articles\n   existants, notamment la base LEGI de la DILA et notamment sa forme\n   structurée `legi.py <https://github.com/Legilibre/legi.py>`__. Il\n   s’agirait donc de créer une fonction vérifiant, pour chaque candidat,\n   qu’il existe dans la base LEGI pour les liens externes ou dans le\n   texte en cours pour les liens internes. Cette recherche utilisera\n   probablement comme pivots : le numéro de l’article, la nature du\n   texte, le numéro du texte, la date de vigueur (qui doit donc être\n   donnée en contexte), possiblement la date du texte.\n\n   Le résultat de cette recherche permettrait d’enrichir le résultat,\n   d’abord avec un booléen \"existe ou non\" (et une non-existence est un\n   problème dans les données ou dans leur traitement), ensuite avec des\n   données supplémentaires comme les numéros LEGIARTI ou LEGITEXT.\n\n   Voir les issues `#11 <https://framagit.org/parlement-ouvert/metslesliens/issues/11>`__\n   et `#17 <https://framagit.org/parlement-ouvert/metslesliens/issues/17>`__.\n\n5. Discuter\n\n   Possiblement sur `le topic dédié sur le forum Parlement\n   ouvert <https://forum.parlement-ouvert.fr/t/reconnaissance-de-liens/572>`__.\n\nLicence\n-------\n\nLa licence est WTFPL 2.0. Au-delà du nom provocateur, cette licence\npermet une redistribution et réutilisation sans limites du code,\npermettant que les meilleures idées puissent être réutilisées et être\nutiles à la société.\n\nQuoique la licence ne l’impose aucunement, les réutilisateurs de cette\nlibrairie sont invités à se faire connaître, dans les buts : 1)\nd’évaluer la popularité de la librairie – et donc de motiver les\ndéveloppeurs et donc de pérenniser le développement ; 2)\nd’éventuellement être prévenus avant un changement\nnon-rétro-compatible ; 3) d’éviter que le premier contact ne soit pas à\nl’occasion d’un bug, ce qui n’est pas forcément agréable. Dans la mesure\ndu possible et des envies, les réutilisateurs sont également encouragés\nà participer au développement de la librairie.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://framagit.org/parlement-ouvert/metslesliens",
    "keywords": "law,legal,legalese,france",
    "license": "WTFPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metslesliens",
    "package_url": "https://pypi.org/project/metslesliens/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/metslesliens/",
    "project_urls": {
      "Homepage": "https://framagit.org/parlement-ouvert/metslesliens"
    },
    "release_url": "https://pypi.org/project/metslesliens/1.3.0/",
    "requires_dist": [
      "parsimonious"
    ],
    "requires_python": "",
    "summary": "Mets des liens entre articles d’un texte de loi français.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3942951,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66fabbddf556c2ebbb1008f0255b3d2ff880c45ac800cac4cb0fb456d0626005",
        "md5": "64cb1910dcc653aef004a6371680bc95",
        "sha256": "ec119fbe6c9d064b77284828e5eb3b3a6bd684e4633f13aea41bca5a89f01602"
      },
      "downloads": -1,
      "filename": "metslesliens-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "64cb1910dcc653aef004a6371680bc95",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18447,
      "upload_time": "2018-06-08T13:43:55",
      "upload_time_iso_8601": "2018-06-08T13:43:55.098330Z",
      "url": "https://files.pythonhosted.org/packages/66/fa/bbddf556c2ebbb1008f0255b3d2ff880c45ac800cac4cb0fb456d0626005/metslesliens-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e91c57d25a287d589a3d3454ba77f70f9a05c67c780f4c12e15733afc4ab6a75",
        "md5": "7ad524b5749362f0dfaa124e20dc79b7",
        "sha256": "b80bcc98db0f196bdf2dbdb9c7e52a592231ff1c740f3d2123c5022d1302cf8c"
      },
      "downloads": -1,
      "filename": "metslesliens-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7ad524b5749362f0dfaa124e20dc79b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17218,
      "upload_time": "2018-06-08T13:43:56",
      "upload_time_iso_8601": "2018-06-08T13:43:56.678465Z",
      "url": "https://files.pythonhosted.org/packages/e9/1c/57d25a287d589a3d3454ba77f70f9a05c67c780f4c12e15733afc4ab6a75/metslesliens-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}