{
  "info": {
    "author": "herr.kaste",
    "author_email": "herr.kaste@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Testing"
    ],
    "description": "Mockito is a spying framework originally based on the Java library with the same name.\n\n.. image:: https://travis-ci.org/kaste/mockito-python.svg?branch=master\n    :target: https://travis-ci.org/kaste/mockito-python\n\n\nInstall\n=======\n\n``pip install mockito``\n\n\nRun the tests\n-------------\n\n::\n\n    pip install pytest\n    py.test\n\n\nQuick Start\n===========\n\n90% use case is that you want to stub out a side effect.\n\n::\n\n    from mockito import when, unstub\n\n    when(os.path).exists('/foo').thenReturn(True)\n\n    # or:\n    import requests  # the famous library\n    # you actually want to return a Response-like obj, we'll fake it\n    response = mock({'status_code': 200, 'text': 'Ok'}\n    when(requests).get(...).thenReturn(response)\n\n    # use it\n    requests.get('http://google.com/')\n\n\nOr, say you want to mock the class Dog::\n\n    class Dog(object):\n        def bark(self):\n            return 'Wuff'\n\n\n    # either mock the class\n    when(Dog).bark().thenReturn('Miau!')\n    # now all instances have a different behavior\n    rex = Dog()\n    assert rex.bark() == 'Miau!'\n\n    # or mock a concrete instance\n    when(rex).bark().thenReturn('Grrrr')\n    assert rex.bark() == 'Grrrr'\n    # a different dog will still 'Miau!'\n    assert Dog().bark() == 'Miau!'\n\n    # be sure to call unstub() once in while\n    unstub()\n\n\nSure, you can verify your interactions::\n\n    from mockito import verify\n    # once again\n    rex = Dog()\n    when(rex).bark().thenReturn('Grrrr')\n\n    rex.bark()\n    rex.bark()\n\n    # `times` defaults to 1\n    verify(rex, times=2).bark()\n\n\nIn general mockito is very picky::\n\n    # this will fail because `Dog` has no method named `waggle`\n    when(rex).waggle().thenReturn('Nope')\n    # this will fail because `bark` does not take any arguments\n    when(rex).bark('Grrr').thenReturn('Nope')\n\n\n    # given this function\n    def bark(sound, post='!'):\n        return sound + post\n\n    from mockito import kwargs\n    when(main).bark('Grrr', **kwargs).thenReturn('Nope')\n\n    # now this one will fail\n    bark('Grrr')  # because there are no keyword arguments used\n    # this one will fail because `then` does not match the function signature\n    bark('Grrr', then='!!')\n    # this one will go\n    bark('Grrr', post='?')\n\n    # there is also an args matcher\n    def add_tasks(*tasks, verbose=False):\n        pass\n\n    from mockito import args\n    # If you omit the `thenReturn` it will just return `None`\n    when(main).add_tasks(*args)\n\n    add_tasks('task1', 'task2')  # will go\n    add_tasks()  # will fail\n    add_tasks('task1', verbose=True)  # will fail too\n\n    # On Python 3 you can also use `...`\n    when(main).add_tasks(...)\n    # when(main).add_tasks(Ellipsis) on Python 2\n\n    add_tasks('task1')  # will go\n    add_tasks(verbose=True)  # will go\n    add_tasks('task1', verbose=True)  # will go\n    add_tasks()  # will go\n\n\nTo start with an empty stub use ``mock``::\n\n    from mockito import mock\n\n    obj = mock()\n\n    # pass it around, eventually it will be used\n    obj.say('Hi')\n\n    # back in the tests, verify the interactions\n    verify(obj).say('Hi')\n\n    # by default all invoked methods take any arguments and return None\n    # you can configure your expected method calls with the ususal `when`\n    when(obj).say('Hi').thenReturn('Ho')\n\n    # There is also a shortcut to set some attributes\n    obj = mock({\n        'hi': 'ho'\n    })\n\n    assert obj.hi == 'ho'\n\n    # This would work for methods as well; in this case\n    obj = mock({\n        'say': lambda _: 'Ho'\n    })\n\n    # But you don't have any argument and signature matching\n    assert obj.say('Anything') == 'Ho'\n\n    # At least you can verify your calls\n    verify(obj).say(...)\n\n    # Btw, you can make screaming strict mocks::\n    obj = mock(strict=True)  # every unconfigured, unexpected call will raise\n\n\nYou can use an empty stub specced against a concrete class::\n\n    # Given the above `Dog`\n    rex = mock(Dog)\n\n    # Now you can stub out any known method on `Dog` but other will throw\n    when(rex).bark().thenReturn('Miau')\n    # this one will fail\n    when(rex).waggle()\n\n    # These mocks are in general very strict, so even this will fail\n    rex.health  # unconfigured attribute\n\n    # Of course you can just set it in a setup routine\n    rex.health = 121\n\n    # Or again preconfigure\n    rex = mock({'health': 121}, spec=Dog)\n\n    # Btw, you can make loose specced mocks::\n    rex = mock(Dog, strict=False)\n\n\n\n\nRead the docs\n=============\n\nhttp://pythonhosted.org/mockito/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kaste/mockito-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mockito",
    "package_url": "https://pypi.org/project/mockito/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mockito/",
    "project_urls": {
      "Homepage": "https://github.com/kaste/mockito-python"
    },
    "release_url": "https://pypi.org/project/mockito/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Spying framework",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14884952,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "705e13855305127faee8a83a0f278ad5742560353a3af36562a581a48e88f1ee",
        "md5": "43c0361e7c461ecba09db5e4bc84055f",
        "sha256": "2d75731e4a2a7d35972f60dadf52abdb08eef513a17cf426ec070d9672df9465"
      },
      "downloads": -1,
      "filename": "mockito-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "43c0361e7c461ecba09db5e4bc84055f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29796,
      "upload_time": "2017-01-24T12:19:40",
      "upload_time_iso_8601": "2017-01-24T12:19:40.683915Z",
      "url": "https://files.pythonhosted.org/packages/70/5e/13855305127faee8a83a0f278ad5742560353a3af36562a581a48e88f1ee/mockito-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}