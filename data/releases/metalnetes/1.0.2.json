{
  "info": {
    "author": "Jay Johnson",
    "author_email": "jay.p.h.johnson@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Metalnetes\n==========\n\nTools for managing multiple kubernetes **1.13.4** clusters on KVM (3 Centos 7 vms) running on a bare metal server (tested on Ubuntu 18.04).\n\n.. image:: https://i.imgur.com/8uvAcgF.png\n\nThis will install:\n\n- Kubernetes cluster deployed 3 CentOS 7 VMs using 100 GB with static IPs and installed using KVM\n- Rook Ceph Storage Cluster for Persistent Volumes\n- Grafana + Prometheus\n- Optional - Stock Analysis Engine that includes:\n    - Minio (on-premise S3)\n    - Redis cluster\n    - Jupyter\n- SSH access\n\nGetting Started\n---------------\n\n::\n\n    git clone https://github.com/jay-johnson/metalnetes.git metalnetes\n    cd metalnetes\n\nStart VMs and Kubernetes Cluster\n--------------------------------\n\n::\n\n    ./boot.sh\n\nView Kubernetes Nodes\n---------------------\n\n::\n\n    ./tools/show-nodes.sh\n\nMonitoring the Kubernetes Cluster\n=================================\n\nLog in to Grafana from a browser:\n\n- Username: **trex**\n- Password: **123321**\n\nhttps://grafana.example.com\n\nGrafana comes ready-to-go with these starting dashboards:\n\nView Kubernetes Pods in Grafana\n-------------------------------\n\n.. image:: https://i.imgur.com/GHo7dbd.png\n\nView Rook Ceph Cluster in Grafana\n----------------------------------\n\n.. image:: https://i.imgur.com/wptrQW2.png\n\nView Redis Cluster in Grafana\n-----------------------------\n\n.. image:: https://i.imgur.com/kegYzXZ.png\n\nChanging Between Kubernetes Clusters\n====================================\n\nIf you create new ``k8.env`` files for each cluster, like ``dev_k8.env`` and ``prod_k8.env`` then you can then quickly toggle between clusters using:\n\n#.  Load ``dev`` Cluster Config file: ``k8.env``\n\n    ::\n\n        source dev_k8.env\n\n#.  Use the ``metal`` bash function to sync the ``KUBECONFIG`` through the ``dev`` cluster and local host\n\n    ::\n\n        metal\n\n#.  Load ``prod`` Cluster Config file: ``k8.env``\n\n    ::\n\n        source prod_k8.env\n\n#.  Use the ``metal`` bash function to sync the ``KUBECONFIG`` through the ``prod`` cluster and local host\n\n    ::\n\n        metal\n\nCustomize VMs and Manage Kubernetes Deployments\n===============================================\n\nThese are the steps the automated ``./boot.sh`` runs in order for customizing and debugging your kubernetes deployment.\n\nCreate VMs Using KVM on Ubuntu\n==============================\n\n#.  Install `KVM <https://help.ubuntu.com/community/KVM/Installation>`__ and `arp-scan <https://github.com/royhills/arp-scan>`__ to find each VM's ip address\n\n    This guide was written using an Ubuntu bare metal server, but it is just KVM under the hood. Please feel free to open a PR if you know the commands for CentOS, Fedora or RHEL and I will add them.\n\n    ::\n\n        cd kvm\n        sudo ./install-kvm.sh\n\n#.  Start VMs\n\n    This will create 3 vms by default and uses an `internal fork from the giovtorres/kvm-install-vm script <https://github.com/giovtorres/kvm-install-vm/blob/master/kvm-install-vm>`__. To provision vm disks using ``qemu-img``, this tool will prompt for ``root`` access when needed.\n\n    ::\n\n        ./start-cluster-vms.sh\n\n#.  Assign IPs to Router or DNS server\n\n    This tool uses ``arp-scan`` to find all active ip addresses on the network bridge. With this list, the tool then looks up each vm's ip by the MAC address, and it requires ``root`` privileges.\n\n    ::\n\n        ./find-vms-on-bridge.sh\n\n    Alternatively you can set ``/etc/hosts`` too:\n\n    ::\n\n        192.168.0.110   m10 m10.example.com master10.example.com\n        192.168.0.111   m11 m11.example.com master11.example.com\n        192.168.0.112   m12 m12.example.com master12.example.com\n\n#.  Bootstap Nodes\n\n    Once the vm's are routable by their fqdn (e.g. ``m10.example.com``), you can use the bootstrap tool to start preparing the cluster nodes, confirm ssh access works with all nodes.\n\n    ::\n\n        ./bootstrap-new-vms.sh\n\nInstall Kubernetes on CentOS 7\n==============================\n\nConfiguration\n-------------\n\nNow that the VMs are ready you can use the `k8.env CLUSTER_CONFIG example file <https://github.com/jay-johnson/metalnetes/tree/master/k8.env>`__ for managing kubernetes clusters on your own vms. This step becomes the starting point for start, restarting and managing clusters.\n\n::\n\n    cd ..\n    ./install-centos-vms.sh\n\nVM and Kubernetes Node Configuration\n------------------------------------\n\n- `VM names, Cluster Nodes, Node Labels, Cluster Tools section <https://github.com/jay-johnson/metalnetes/tree/master/k8.env>`__\n\nHelm and Tiller Configuration\n-----------------------------\n\n- `Helm and Tiller <https://github.com/jay-johnson/metalnetes/tree/master/k8.env>`__\n\nCluster Storage Configuation\n----------------------------\n\n- `Storage (rook-ceph by default) <https://github.com/jay-johnson/metalnetes/tree/master/k8.env>`__\n- `Additional Block Devices per VM <https://github.com/jay-johnson/metalnetes/tree/master/k8.env>`__\n\nPrivate Docker Registry\n-----------------------\n\n- `Registry <https://github.com/jay-johnson/metalnetes/tree/master/k8.env>`__\n\nStart Kubernetes Cluster\n========================\n\nWith 3 vms setup using the `install-centos-vms.sh <https://github.com/jay-johnson/metalnetes/tree/master/install-centos-vms.sh>`__ follow these steps to stand up and tear down a kubernetes cluster.\n\nLoad the CLUSTER_CONFIG environment\n-----------------------------------\n\n::\n\n    # from within the repo's root dir:\n    export CLUSTER_CONFIG=$(pwd)/k8.env\n\nFully Clean and Reinitialize the Kubernetes Cluster\n---------------------------------------------------\n\n::\n\n    ./clean.sh\n\nStart Kubernetes Cluster with a Private Docker Registry + Rook Ceph\n-------------------------------------------------------------------\n\n::\n\n    ./start.sh\n\nCheck Kubernetes Nodes\n----------------------\n\n::\n\n    ./tools/show-labels.sh\n\nCluster Join Tool\n=================\n\nIf you want to reboot vms and have the nodes re-join and rebuild the kubernetes cluster use:\n\n::\n\n    ./join.sh\n\n(Optional Validation) - Deploy Stock Analysis Engine\n====================================================\n\nThis repository was created after trying to decouple my `AI kubernetes cluster for analyzing network traffic <https://github.com/jay-johnson/deploy-to-kubernetes>`__ and my `Stock Analysis Engine (ae) that uses many deep neural networks to predict future stock prices during live-trading hours <https://github.com/AlgoTraders/stock-analysis-engine>`__ from using the same kubernetes cluster. Additionally with the speed ae is moving, I am looking to keep exploring more high availablity solutions and configurations to ensure the intraday data collection never dies (hopefully out of the box too!).\n\nDeploy AE\n---------\n\n::\n\n    ./deploy-ae.sh\n\nDeployment Tools\n================\n\nRook-Ceph\n---------\n\nDeploy `rook-ceph <https://rook.io/docs/rook/v0.9/ceph-quickstart.html>`__ using the `Advanced Configuration <https://rook.io/docs/rook/v0.9/advanced-configuration.html>`__\n\n::\n\n    ./deploy-rook-ceph.sh\n\nConfirm Rook-Ceph Operator Started\n\n::\n\n    ./rook-ceph/describe-operator.sh\n\nPrivate Docker Registry\n-----------------------\n\nDeploy a private docker registry for use with the cluster with:\n\n::\n\n    ./deploy-registry.sh\n\nDeploy Helm\n-----------\n\nDeploy `helm <https://helm.sh/docs/>`__\n\n::\n\n    ./deploy-helm.sh\n\nDeploy Tiller\n-------------\n\nDeploy tiller:\n\n::\n\n    ./deploy-tiller.sh\n\nDelete Cluster VMs\n==================\n\n::\n\n    ./kvm/_uninstall.sh\n\nBackground and Notes\n====================\n\nCustomize the vm install steps done during boot up using the `cloud-init-script.sh <https://github.com/jay-johnson/metalnetes/tree/master/install-centos-vms.sh>`__.\n\nLicense\n=======\n\nApache 2.0 - Please refer to the `LICENSE <https://github.com/jay-johnson/metalnetes/blob/master/LICENSE>`__ for more details.\n\nFAQ\n===\n\nWhat IP did my vms get?\n-----------------------\n\nFind VMs by MAC address using the ``K8_VM_BRIDGE`` bridge device using:\n\n::\n\n    ./kvm/find-vms-on-bridge.sh\n\nFind your MAC addresses with a tool that uses ``arp-scan`` to list all ip addresses on the configured bridge device (``K8_VM_BRIDGE``):\n\n::\n\n    ./kvm/list-bridge-ips.sh\n\nWhy Are Not All Rook Ceph Operators Starting?\n---------------------------------------------\n\nRestart the cluster if you see an error like this when looking at the ``rook-ceph-operator``:\n\n::\n\n    # find pods: kubectl get pods -n rook-ceph-system | grep operator\n    kubectl -n rook-ceph-system describe po rook-ceph-operator-6765b594d7-j56mw\n\n::\n\n    Warning  FailedCreatePodSandBox  7m56s                   kubelet, m12.example.com  Failed create pod sandbox: rpc error: code = Unknown desc = failed to set up sandbox container \"9ab1c663fc53f75fa4f0f79effbb244efa9842dd8257eb1c7dafe0c9bad1ee6c\" network for pod \"rook-ceph-operator-6765b594d7-j56mw\": NetworkPlugin cni failed to set up pod \"rook-ceph-operator-6765b594d7-j56mw_rook-ceph-system\" network: failed to set bridge addr: \"cni0\" already has an IP address different from 10.244.2.1/24\n\n::\n\n    ./clean.sh\n    ./deploy-rook-ceph.sh\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jay-johnson/metalnetes",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metalnetes",
    "package_url": "https://pypi.org/project/metalnetes/",
    "platform": "",
    "project_url": "https://pypi.org/project/metalnetes/",
    "project_urls": {
      "Homepage": "https://github.com/jay-johnson/metalnetes"
    },
    "release_url": "https://pypi.org/project/metalnetes/1.0.2/",
    "requires_dist": [
      "awscli",
      "boto3",
      "bs4",
      "celery",
      "celery[redis]",
      "colorlog",
      "coverage",
      "flake8 (<=3.4.1)",
      "future",
      "mock",
      "pep8 (>=1.7.1)",
      "pycodestyle (<=2.3.1)",
      "pylint",
      "recommonmark",
      "redis (<3)",
      "sphinx",
      "sphinx-autobuild",
      "sphinx-rtd-theme",
      "tabulate",
      "unittest2",
      "urllib3 (<=1.23)",
      "ujson"
    ],
    "requires_python": "",
    "summary": "Tools for managing multiple kubernetes clusters on KVM (on 3 Centos 7 vms) running on a bare metal server (tested on Ubuntu 18.04)",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5122066,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85ea8b7cf7425395f1fd64b1bd6018d3ee59e8cfacd6b095de26efadf16c2a7a",
        "md5": "cca07ea795a923189ec290fc01c46f21",
        "sha256": "97a774e085b23d05f4116d43829d107c732dfce8306f6ea8f35fe94dabecab55"
      },
      "downloads": -1,
      "filename": "metalnetes-1.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cca07ea795a923189ec290fc01c46f21",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 9136,
      "upload_time": "2019-03-21T06:02:32",
      "upload_time_iso_8601": "2019-03-21T06:02:32.813546Z",
      "url": "https://files.pythonhosted.org/packages/85/ea/8b7cf7425395f1fd64b1bd6018d3ee59e8cfacd6b095de26efadf16c2a7a/metalnetes-1.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d5c664ed24aeae1340210f8ba58dd5e765304f3b1739f6ab01f54cf861bf27a",
        "md5": "3e0ec1847ba05a225517bda57ce1fc5c",
        "sha256": "e5f74a48369879e180e824ca0bcad739a1b6d12552f1709680d05a0626958a25"
      },
      "downloads": -1,
      "filename": "metalnetes-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3e0ec1847ba05a225517bda57ce1fc5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6014,
      "upload_time": "2019-03-21T06:02:34",
      "upload_time_iso_8601": "2019-03-21T06:02:34.426027Z",
      "url": "https://files.pythonhosted.org/packages/6d/5c/664ed24aeae1340210f8ba58dd5e765304f3b1739f6ab01f54cf861bf27a/metalnetes-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}