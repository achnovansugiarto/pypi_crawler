{
  "info": {
    "author": "moshi",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# MGCplotter: Microbial Genome Circular plotter\n\n![Python3](https://img.shields.io/badge/Language-Python3-steelblue)\n![OS](https://img.shields.io/badge/OS-_Mac_|_Linux-steelblue)\n![License](https://img.shields.io/badge/License-GPL3-steelblue)\n[![Latest PyPI version](https://img.shields.io/pypi/v/mgcplotter.svg)](https://pypi.python.org/pypi/mgcplotter)\n[![Bioconda](https://img.shields.io/conda/vn/bioconda/mgcplotter.svg?color=green)](https://anaconda.org/bioconda/mgcplotter)  \n[![CI](https://github.com/moshi4/MGCplotter/workflows/CI/badge.svg)](https://github.com/moshi4/MGCplotter/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/moshi4/MGCplotter/branch/main/graph/badge.svg?token=IEVJ47GXZY)](https://codecov.io/gh/moshi4/MGCplotter)\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Installation](#installation)\n- [Dependencies](#dependencies)\n- [Usage](#usage)\n- [Output Contents](#output-contents)\n- [Example Gallery](#example-gallery)\n\n## Overview\n\nMGCplotter is easy-to-use command line tool for plotting microbial genome in circular layout using Circos.\nMGCplotter requires Genbank format genome file and implements following 3 main functions for plotting figure.\n\n1. **`Plot Basic Features of Microbial Genome`**  \n  Basic Features mean *Forward/Reverse CDS*, *rRNA*, *tRNA*, *GC content*, *GC skew*.  \n  MGCplotter can control plot result of feature's color/size/visibility by command options.  \n\n2. **`Assign & Plot COG Functional Classification`**  \n  Assign COG functional classification to reference genome CDS using [COGclassifier](https://github.com/moshi4/COGclassifier).\n  COG functional classification colors are used in plot result of forward/reverse CDS.\n\n    <details>\n    <summary>List of COG Functional Classification Color</summary>\n\n    ![COG_definition_fig](https://github.com/moshi4/MGCplotter/blob/main/images/cog_definition_legend.png?raw=true)  \n\n    </details>\n\n3. **`Search & Plot Conserved CDS between reference and query species`**  \n  Conserved CDS of query genome relative to reference genome is searched by [MMseqs2](https://github.com/moshi4/COGclassifier) RBH method.\n  Each query conserved CDS is plotted with gradient color based on identity of RBH result.\n\n![MGCplotter_example_fig](https://github.com/moshi4/MGCplotter/blob/main/images/example_result01.png?raw=true)  \n**Fig.1: Plot result of *Mycoplasma Gallisepticum* genome**  \nOuter to inner tracks mean (1) Forward CDS (2) Reverse CDS (3) rRNA (4) tRNA (5) GC content (6) GC skew, respectively.\nCOG functional classification color is assigned to Forward/Reverse CDS.\n\n![MGCplotter_example_fig](https://github.com/moshi4/MGCplotter/blob/main/images/example_result02.png?raw=true)  \n**Fig.2: Add conserved CDS tracks of 3 query species to Fig.1**  \nConserved CDS of query genomes relative to reference genome is shown.\n\n## Installation\n\nMGCplotter is implemented in Python3.\n\n**Install bioconda package:**\n\n    conda install -c conda-forge -c bioconda mgcplotter\n\n**Install PyPI pakcage:**\n\n    pip install mgcplotter\n\n**Use Docker ([Docker Image](https://hub.docker.com/repository/docker/moshi4/mgcplotter/general)):**\n\n    docker pull moshi4/mgcplotter:latest\n    docker run moshi4/mgcplotter:latest MGCplotter -h\n\n## Dependencies\n\n- [Circos](http://circos.ca/)  \n  Software package for visualizing data and information in circular layout\n- [COGclassifier](https://github.com/moshi4/COGclassifier)  \n  A tool for classifying prokaryote protein sequences into COG functional category\n- [MMseqs2](https://github.com/soedinglab/MMseqs2)  \n  Ultra fast and sensitive sequence search and clustering suite\n\n## Usage\n\n### Basic Command\n\n    MGCplotter -r [genome genbank file] -o [output directory] --assign_cog_color\n\n### Options\n\n    General Options:\n      -r R, --ref_file R      Reference genome genbank file (*.gb|*.gbk|*.gbff)\n      -o O, --outdir O        Output directory\n      --query_files  [ ...]   Query CDS fasta or genome genbank files (*.fa|*.faa|*.fasta|*.gb|*.gbk|*.gbff)\n      --cog_evalue            COGclassifier e-value parameter (Default: 1e-02)\n      --mmseqs_evalue         MMseqs RBH search e-value parameter (Default: 1e-03)\n      -t , --thread_num       Threads number parameter (Default: MaxThread - 1)\n      -f, --force             Forcibly overwrite previous calculation result (Default: OFF)\n      -v, --version           Print version information\n      -h, --help              Show this help message and exit\n\n    Graph Size Options:\n      --ticks_labelsize       Ticks label size (Default: 35)\n      --forward_cds_r         Forward CDS track radius size (Default: 0.07)\n      --reverse_cds_r         Reverse CDS track radius size (Default: 0.07)\n      --rrna_r                rRNA track radius size (Default: 0.07)\n      --trna_r                tRNA track radius size (Default: 0.07)\n      --conserved_cds_r       Conserved CDS track radius size (Default: 0.04)\n      --gc_content_r          GC content track radius size (Default: 0.15)\n      --gc_skew_r             GC skew track radius size (Default: 0.15)\n\n    Graph Color Options:\n      --assign_cog_color      Assign COG classification color to reference CDSs (Default: OFF)\n      --cog_color_json        User-defined COG classification color json file\n      --forward_cds_color     Forward CDS color (Default: 'red')\n      --reverse_cds_color     Reverse CDS color (Default: 'blue')\n      --rrna_color            rRNA color (Default: 'green')\n      --trna_color            tRNA color (Default: 'magenta')\n      --conserved_cds_color   Conserved CDS color (Default: 'chocolate')\n      --gc_content_p_color    GC content color for positive value from average (Default: 'black')\n      --gc_content_n_color    GC content color for negative value from average (Default: 'grey')\n      --gc_skew_p_color       GC skew color for positive value (Default: 'olive')\n      --gc_skew_n_color       GC skew color for negative value (Default: 'purple')\n\n### Example Command\n\n#### 1. *M.Gallisepticum* genome simple plot (= Fig.1)\n\nReference: [Mgallisepticum.gbff](https://github.com/moshi4/MGCplotter/wiki/dataset/example01/Mgallisepticum.zip) (0.63 MB)\n\n    MGCplotter -r Mgallisepticum.gbff -o ./example_result01 --assign_cog_color\n\n#### 2. *M.Gallisepticum* genome plot with 3 query conserved CDS (= Fig.2)\n\nReference: [Mgallisepticum.gbff](https://github.com/moshi4/MGCplotter/wiki/dataset/example02/Mgallisepticum.zip) (0.63 MB),\nQuery: [example02](https://github.com/moshi4/MGCplotter/wiki/dataset/example02/example02.zip) (2.0 MB)\n\n    MGCplotter -r Mgallisepticum.gbff -o ./example_result02 --assign_cog_color \\\n               --query_files ./example02/*.gbff\n\n## Output Contents\n\n- **`circos[.png|.svg]`**  \n  Plot result figure file\n\n- **`reference_cds.faa`**  \n  Reference genome CDS fasta file (Extract from genbank file)\n\n- **`circos_config/`**  \n  Circos config files directory\n\n- **`circos_legend/`**  \n  Circos legend files directory\n\n- **`cogclassifier/`**  \n  [COGclassifier](https://github.com/moshi4/COGclassifier#output-contents) result files directory\n\n- **`rbh_search/`**  \n  MMseqs RBH result files directory\n\n## Example Gallery\n\n### 1. *E.coli* genome simple plot (No COG assignment)\n\nReference: [ecoli.gbk](https://github.com/moshi4/MGCplotter/wiki/dataset/gallery01/ecoli.zip) (3.5 MB)\n\n    MGCplotter -r ./ecoli.gbk -o ./gallery_result01 --rrna_color blue --trna_color red \\\n               --gc_content_p_color orange --gc_content_n_color blue \\\n               --gc_skew_p_color pink --gc_skew_n_color green \n\n![MGCplotter_gallery_fig](https://github.com/moshi4/MGCplotter/blob/main/images/gallery_result01.png?raw=true)  \n\n### 2. *E.coli* genome plot with 3 query conserved CDS\n\nReference: [ecoli.gbk](https://github.com/moshi4/MGCplotter/wiki/dataset/gallery02/ecoli.zip) (3.5 MB),\nQuery: [gallery02](https://github.com/moshi4/MGCplotter/wiki/dataset/gallery02/gallery02.zip) (10.7 MB)\n\n    MGCplotter -r ./ecoli.gbk -o ./gallery_result02 --assign_cog_color \\\n               --query_files ./gallery02/NC_011751.gbk ./gallery02/NC_017634.gbk ./gallery02/NC_018658.gbk \\\n               --ticks_labelsize 50\n\n> Conserved CDS tracks are lined up from outside to inside in `--query_files` argument order.\n> In this case, NC_011751,NC_017634,NC_018658 are lined up from outside to inside.\n\n![MGCplotter_gallery_fig](https://github.com/moshi4/MGCplotter/blob/main/images/gallery_result02.png?raw=true)  \n\n### 3. *M.Gallisepticum* genome plot with 30 query conserved CDS\n\nReference: [Mgallisepticum.gbff](https://github.com/moshi4/MGCplotter/wiki/dataset/gallery03/Mgallisepticum.zip) (0.63 MB),\nQuery: [gallery03](https://github.com/moshi4/MGCplotter/wiki/dataset/gallery03/gallery03.zip) (19.6 MB)\n\n    MGCplotter -r ./Mgallisepticum.gbff -o ./gallery_result03 --assign_cog_color \\\n              --query_files ./gallery03/*.gbff --conserved_cds_color '#dc143c' \\\n              --rrna_r 0 --trna_r 0 --conserved_cds_r 0.01\n\n![MGCplotter_gallery_fig](https://github.com/moshi4/MGCplotter/blob/main/images/gallery_result03.png?raw=true)  \n\n### 4. *M.Alvi* genome contigs plot with 6 query conserved CDS\n\nReference: [Malvi.gbk](https://github.com/moshi4/MGCplotter/wiki/dataset/gallery04/Malvi.zip) (0.57 MB),\nQuery: [gallery04](https://github.com/moshi4/MGCplotter/wiki/dataset/gallery04/gallery04.zip) (1.0 MB)\n\n    MGCplotter -r ./Malvi.gbk -o ./gallery_result04 --assign_cog_color \\\n               --query_files ./gallery04/*.faa --conserved_cds_r 0.05 \\\n               --gc_content_r 0 --gc_skew_r 0\n\n> Malvi.gbk is multi record(contig) Genbank format genome file.\n> In MGCplotter, multi contigs are simply concatenated and\n> each contig boundary is shown in mostouter circle color (lightgrey/darkgrey).\n\n![MGCplotter_gallery_fig](https://github.com/moshi4/MGCplotter/blob/main/images/gallery_result04.png?raw=true)  \n\n### 5. *M.Gallisepticum* genome plot (User-defined COG classification color)\n\nReference: [Mgallisepticum.gbk](https://github.com/moshi4/MGCplotter/wiki/dataset/gallery05/Mgallisepticum.zip) (0.63 MB),\nCOG Color Json: [cog_color.json](https://github.com/moshi4/MGCplotter/wiki/dataset/gallery05/cog_color.zip) (0.5 KB)\n\n    MGCplotter -r ./Mgallisepticum.gbff -o ./gallery_result05 --assign_cog_color \\\n              --cog_color_json ./cog_color.json\n\n> User can change COG functional classification color by user-defined color json file.\n> Template json file can be obtained by `generate_cog_color_template` command.\n\n  <details>\n  <summary>COG functional classification color template json</summary>\n\n    {\n      \"J\": \"#f43cf3\",\n      \"A\": \"#f04ff0\",\n      \"K\": \"#f04fa0\",\n      \"L\": \"#f04f4f\",\n      \"B\": \"#f4793c\",\n      \"D\": \"#f0f04f\",\n      \"Y\": \"#f3f43c\",\n      \"V\": \"#f5f52a\",\n      \"T\": \"#f7f718\",\n      \"M\": \"#caf718\",\n      \"N\": \"#9ef718\",\n      \"Z\": \"#71f718\",\n      \"W\": \"#45f718\",\n      \"U\": \"#18f718\",\n      \"O\": \"#07f830\",\n      \"X\": \"#07f807\",\n      \"C\": \"#2af5f5\",\n      \"G\": \"#3cf3f4\",\n      \"E\": \"#4ff0f0\",\n      \"F\": \"#4f9ff0\",\n      \"H\": \"#4f4ff0\",\n      \"I\": \"#793cf4\",\n      \"P\": \"#3c3cf4\",\n      \"Q\": \"#2a5df5\",\n      \"R\": \"#939393\",\n      \"S\": \"#808080\",\n      \"-\": \"#6c6c6c\"\n    }\n\n  </details>\n\n![MGCplotter_gallery_fig](https://github.com/moshi4/MGCplotter/blob/main/images/gallery_result05.png?raw=true)  \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/moshi4/MGCplotter/",
    "keywords": "bioinformatics,genomics,comparative-genomics,circos,visualization",
    "license": "GPL-3.0-only",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mgcplotter",
    "package_url": "https://pypi.org/project/mgcplotter/",
    "platform": null,
    "project_url": "https://pypi.org/project/mgcplotter/",
    "project_urls": {
      "Homepage": "https://github.com/moshi4/MGCplotter/",
      "Repository": "https://github.com/moshi4/MGCplotter/"
    },
    "release_url": "https://pypi.org/project/mgcplotter/1.0.1/",
    "requires_dist": [
      "biopython (>=1.79,<2.0)",
      "matplotlib (>=3.5.1,<4.0.0)",
      "cogclassifier (>=1.0.4,<2.0.0)",
      "pandas (>=1.4.2,<2.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Microbial Genome Circular plotting tool using Circos",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13554569,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7671339a81fcc3b1020314ea209dffeec46744a8977743609b730db2ebf63f05",
        "md5": "86f387947d4da0cb6a2399b69a7f6d64",
        "sha256": "eb53eac30fd135cbb30ccd6a255a98d413a960b2d3e98b4f05e0eab556d110cd"
      },
      "downloads": -1,
      "filename": "mgcplotter-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "86f387947d4da0cb6a2399b69a7f6d64",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 34867997,
      "upload_time": "2022-04-19T11:05:26",
      "upload_time_iso_8601": "2022-04-19T11:05:26.916390Z",
      "url": "https://files.pythonhosted.org/packages/76/71/339a81fcc3b1020314ea209dffeec46744a8977743609b730db2ebf63f05/mgcplotter-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2032b2dcb0ed0f83040ec7736589a11f17127be0f983f9bae3f7565f31830783",
        "md5": "ba0c90a710acdef1a60f0d9d914238ed",
        "sha256": "4fdd9e330a46dc9f2dac9e80ba0ce75445b9fe1ef0d846c891ef95eb7a5612c3"
      },
      "downloads": -1,
      "filename": "mgcplotter-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ba0c90a710acdef1a60f0d9d914238ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 37811565,
      "upload_time": "2022-04-19T11:05:31",
      "upload_time_iso_8601": "2022-04-19T11:05:31.931977Z",
      "url": "https://files.pythonhosted.org/packages/20/32/b2dcb0ed0f83040ec7736589a11f17127be0f983f9bae3f7565f31830783/mgcplotter-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}