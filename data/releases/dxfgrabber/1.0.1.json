{
  "info": {
    "author": "Manfred Moitzi",
    "author_email": "me@mozman.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 7 - Inactive",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "WARNING\n=======\n\nThis is an outdated python package, please switch to `ezdxf`: https://pypi.org/project/ezdxf/\n\nAdvantage of `ezdxf` over `dxfgrabber` is read/write support for DXF versions:\n\n    - R12\n    - R2000\n    - R2004\n    - R2007\n    - R2010\n    - R2013\n    - R2018\n\nDocumentation\n=============\n\nhttp://dxfgrabber.readthedocs.io\n\nSource at GitHub.com:\n\nhttps://github.com/mozman/dxfgrabber.git\n\nContact\n=======\n\ndxfgrabber@mozman.at\n\nNews\n====\n\nVersion 1.0.1 - 2020-01-01\n\n  * WARNING: OUTDATED PACKAGE - switch to `ezdxf`: https://pypi.org/project/ezdxf/\n\nVersion 1.0.0 - 2018-01-01\n\n  * entering just maintenance and bugfix mode - no new features planned\n\nVersion 0.8.4 - 2017-02-19\n\n  * dxfgrabber can read DXF files with only an ENTITIES section\n\nVersion 0.8.3 - 2017-02-06\n\n  * BUGFIX: handles windows line ending '\\r\\n' in streams correct, some streams do not produce universal line endings\n\nVersion 0.8.2 - 2017-01-22\n\n  * BUGFIX: TEXT font resolving issue\n  * Moved to GitHub.com: https://github.com/mozman/dxfgrabber.git\n\n\nVersion 0.8.1 - 2016-08-17\n\n  * BUGFIX: restored VERTEX bulge values\n  * NEW: excepts 'inf.0' and '-inf.0' float values created by QGIS (AutoCAD does not read this none standard values)\n\nVersion 0.8.0 - 2016-04-24\n\n  * internal refactoring - removed extra layer for DXF R12 and DXF R13 implementation\n  * removed parts implemented in Cython\n  * new version is ~30% faster than the old pure Python version but ~15% slower than the version with C-extension\n  * some pep8 refactorings, renamed attributes like startparam to start_param\n\nVersion 0.7.5 - 2015-11-29\n\n  * Python only version runs with CPython (2.7, 3.4, 3.5), pypy-5.0.0 and pypy3-2.4.0\n  * accepts block definitions without explicit base point, defaults to (0, 0, 0)\n  * NEW: reads DXF versions older than AC1009 (DXF R12), as far I know, I need more old files for testing\n  * KNOWN BUG: Win7 and Python 2.7.10 - can't build Cython extension with MingW32, use Python 2.7.9 instead\n  * KNOWN BUG: Win7 and Python 3.5.0 - can't build Cython extension with MingW32 but work with VC2015\n\nVersion 0.7.4 - 2014-05-23\n\n  * NEW: added support for R12 2d splines (by POLYLINE); POLYLINE.mode == \"spline2d\"\n  * NEW: TEXT.plain_text(), removes format codes like ``&&u`` and transforms ``%%d`` to ``Â°``\n  * BUGFIX: unicode/str error in Cython extension for Python 2.7\n  * BUGFIX: every LWPolyline in DXF version > AC1009 had default thickness of 0.0\n  * BUGFIX: Polyline.width had incorrect values\n\nVersion 0.7.3 - 2014-05-16\n\n  * NEW: ``options = {\"assure_3d_coords\": True}``, guarantees (x, y, z) tuples for ALL coordinates, this option is by default\n    ``False``\n  * NEW: extended TrueColor() class, see docs\n  * NEW: dxfgrabber.aci_to_true_color(index) returns the DXF default true color value for AutoCAD Color Index *index*\n    as TrueColor()\n  * NEW: added is_backwards, is_upside_down, width, oblique, font, bigfont attributes to TEXT, ATTRIB, ATTDEF entities\n  * NEW: added plain_text() method to TEXT, ATTRIB and ATTDEF to get text content without formatting codes like '%%u'\n  * NEW: added font, bigfont, rect_width, horizontal_width and vertical_height attributes to MTEXT\n  * NEW: added resolve_text_styles(text_styles) method to TEXT, ATTRIB, ATTDEF, MTEXT entities\n  * NEW: new import option \"resolve_text_styles\" and it is *True* by default\n  * NEW: added extrusion direction to all entities\n  * NEW: added row_count, col_count, row_spacing, col_spacing attributes to INSERT.\n  * NEW: MText.plain_text(split=False) tries to remove format codes, returns a single string or a list of strings\n  * NEW: added n_smooth_density, m_smooth_density, smooth_type to Polymesh\n  * NEW: added smooth_type to Polyface\n  * CHANGE: LWPolyline again: LWPolyline.points list of (x, y) or (x, y, z) depends on \"assure_3d_coords\",\n    LWPolyline.width list of (start-width, end-width), .bulge list of floats, removed LWPolyline.get_rstrip_points() and\n    added .const_width attribute (if != 0, ignore .width list).\n  * CHANGE: Polyline method points() is now a field (list) and added lists for width and bulge for consistent APIs of\n    LWPolyline and Polyline.\n  * BUGFIX: wrong DXF subclass for Arc.extrusion (error in DXF Standard)\n\nVersion 0.7.2 - 2014-05-09\n\n  * NEW: grabs SAB data of BODY, 3DSOLID, ... entities for DXF version AC1027 (R2013) and later\n  * NEW: support for dxf attributes: true_color (AC1018), transparency (AC1018), shadow_mode (AC1021)\n    in prior DXF versions this attributes are set to None.\n  * NEW: using Cython for some speed optimizations, but Cython is not a installation requirement; control the Cython\n    extension by environment variable DXFGRABBER_CYTHON = ON|OFF, by default the Cython extension is activated.\n  * CHANGED: LWPolyline.points are always 5-tuples (x, y, start_width, end_width, bulge)\n\nVersion 0.7.1 - 2014-05-02\n\n  * BUGFIX: now really accept floats as int (thanks to ProE)\n\nVersion 0.7.0 - 2014-05-01\n\n  * NEW: support for MESH entity\n  * NEW: support for LIGHT entity\n  * NEW: support for SUN entity\n  * NEW: support for HELIX entity\n  * NEW: support for BODY entity, you get the ACIS code\n  * NEW: support for 3DSOLID entity, you get the ACIS code\n  * NEW: support for REGION entity, you get the ACIS code\n  * NEW: support for SURFACE entity, you get the ACIS code\n  * NEW: support for undocumented PLANESURFACE entity, you get the ACIS code\n  * BUGFIX: accept floats as int (thanks to ProE)\n\nVersion 0.6.1 - 2014-04-25\n\n  * BUGFIX: support for undocumented VERTEX subclass 'AcDbFaceRecord' without preceding 'AcDbVertex'\n  * extended the Polyface entity, see new docs\n\nVersion 0.6.0 - 2014-01-09\n\n  * skip comment tags (999)\n  * dxfversion defaults to 'AC1009', if no header variable $ACADVER exists\n  * can open minimalistic DXF12 files (without HEADER, TABLES and BLOCKS section)\n  * added support for STYLE table\n  * added support for LTYPE table\n\nVersion 0.5.2 - 2013-05-20\n\n  * bugfix: fixed \\*nix newline problem in readfile_as_asc()\n\nVersion 0.5.1 - 2013-05-20\n\n  * updated docs - added a *Howto* section\n  * added attribute frozen to class Layer()\n  * index operator for: Drawing.layers[layername]\n  * added modelspace() and paperspace() iterators to class Drawing()\n  * supported Python versions: CPython 2.7, CPython 3.3, pypy - no explicit testing with CPython 3.2\n\nVersion 0.5.0 - 2013-05-04\n\n  * beta status\n  * solved problems with 'utf-8' and codepage ANSI_936 encoded dxf files\n\nVersion 0.4.0 - 2012-08-12\n\n  * beta status\n\nVersion 0.1.0 - 2012-07-21\n\n  * Initial setup\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/mozman/dxfgrabber/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mozman/dxfgrabber.git",
    "keywords": "DXF",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dxfgrabber",
    "package_url": "https://pypi.org/project/dxfgrabber/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/dxfgrabber/",
    "project_urls": {
      "Download": "https://github.com/mozman/dxfgrabber/releases",
      "Homepage": "https://github.com/mozman/dxfgrabber.git"
    },
    "release_url": "https://pypi.org/project/dxfgrabber/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python library to grab information from DXF drawings - all DXF versions supported.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6381551,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b92354940748d3887e9f0939d839fac2699b9b3fb36d650ee93515f78cbe4d2a",
        "md5": "09f79eeec33cb63fb104dbfd03af84cb",
        "sha256": "b54c6f93178551af5241dc0fe31bdb3a3ac61deb064bbcc5a0cebf769d74899a"
      },
      "downloads": -1,
      "filename": "dxfgrabber-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "09f79eeec33cb63fb104dbfd03af84cb",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 34595,
      "upload_time": "2020-01-01T05:53:44",
      "upload_time_iso_8601": "2020-01-01T05:53:44.859815Z",
      "url": "https://files.pythonhosted.org/packages/b9/23/54940748d3887e9f0939d839fac2699b9b3fb36d650ee93515f78cbe4d2a/dxfgrabber-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01f933f2c36f49b24ffae6d7be973f347d8846040a42c38634e8e96aa93b2d32",
        "md5": "efa2d804aace7535ebc8f2ef79c9d5e3",
        "sha256": "329ddb5fa5a11c0fd4b83b14615686c62924a323ccf4ef2e7bc5771788d220a1"
      },
      "downloads": -1,
      "filename": "dxfgrabber-1.0.1.zip",
      "has_sig": false,
      "md5_digest": "efa2d804aace7535ebc8f2ef79c9d5e3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 114274,
      "upload_time": "2020-01-01T05:53:46",
      "upload_time_iso_8601": "2020-01-01T05:53:46.971685Z",
      "url": "https://files.pythonhosted.org/packages/01/f9/33f2c36f49b24ffae6d7be973f347d8846040a42c38634e8e96aa93b2d32/dxfgrabber-1.0.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}