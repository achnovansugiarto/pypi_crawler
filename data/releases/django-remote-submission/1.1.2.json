{
  "info": {
    "author": "T. Hobson, M. Doucet and R. M. Ferraz Leal",
    "author_email": "ferrazlealrm@ornl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "=============================\nDjango Remote Submission\n=============================\n\n.. image:: https://badge.fury.io/py/django-remote-submission.png\n    :target: https://badge.fury.io/py/django-remote-submission\n\n.. image:: https://travis-ci.org/ornl-ndav/django-remote-submission.png?branch=master\n    :target: https://travis-ci.org/ornl-ndav/django-remote-submission\n\n.. image:: https://codecov.io/gh/ornl-ndav/django-remote-submission/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/ornl-ndav/django-remote-submission\n\nA Django application to manage long running job submission, including starting the job, saving logs, and storing results.\n\nFeatures\n--------\n\n* Able to connect to any server via SSH user/password or key-based authentication.\n\n* Able to transfer and launch any script in the remote server (e.g. python or bash scripts).\n\n* Able to capture and receive logs and write them to a database in realtime.\n\n* Able to return any modified files from the remote server.\n\n* Uses WebSockets to notify the Web Client of the Job status: ``initial``, ``submitted``, ``success`` or ``failure``.\n\n* Uses WebSockets to provide Job Log (standard output and standard error) in real time to the Web Client.\n\nDocumentation\n-------------\n\nThe full documentation is at https://django-remote-submission.readthedocs.org.\n\n==========\nQuickstart\n==========\n\nInstall Django Remote Submission::\n\n    pip install django-remote-submission\n\nThen use it in a project:\n\n.. code:: python\n\n    from django_remote_submission.models import Server, Job\n    from django_remote_submission.tasks import submit_job_to_server\n\n    server = Server.objects.get_or_create(\n        title='My Server Title',\n        hostname='example.com',\n        port=22,\n    )[0]\n\n    python2_interpreter = Interpreter.objects.get_or_create(\n        name = 'python2',\n        path = '/usr/bin/python2.7 -u',\n    )[0]\n\n    python3_interpreter = Interpreter.objects.get_or_create(\n        name = 'python3',\n        path = '/usr/bin/python3.5 -u',\n    )[0]\n\n    server.interpreters.set([python2_interpreter,\n                             python3_interpreter])\n\n    job = Job.objects.get_or_create(\n        title='My Job Title',\n        program='print(\"hello world\")',\n        remote_directory='/tmp/',\n        remote_filename='test.py',\n        owner=request.user,\n        server=server,\n        interpreter=python2_interpreter,\n    )[0]\n\n    # Using delay calls celery:\n    modified_files = submit_job_to_server.delay(\n        job_pk=job.pk,\n        password=request.POST.get('password'),\n    )\n\nFor testing, sometimes is useful to bypass the remote server and run the task in the local computer.\nFor this, the ``submit_job_to_server`` routine can be called with the argument ``remote=False``.\nThe function above would be:\n\n.. code:: python\n\n    modified_files = submit_job_to_server.delay(\n        job_pk=job.pk,\n        password=request.POST.get('password'),\n        remote=False,\n    )\n\nNote that it stills use Celery. It just ignores the password passed as argument.\n\nTo avoid storing the password one can deploy the client public key in the server.\n\n.. code:: python\n\n    from django_remote_submission.tasks import copy_key_to_server\n\n    copy_key_to_server(\n        username=env.remote_user,\n        password=env.remote_password,\n        hostname=env.server_hostname,\n        port=env.server_port,\n        public_key_filename=None, # finds it automaticaly\n    )\n\nAnd it can be deleted once the session is finished:\n\n.. code:: python\n\n    from django_remote_submission.tasks import delete_key_from_server\n\n    delete_key_from_server(\n        username=env.remote_user,\n        password=env.remote_password,\n        hostname=env.server_hostname,\n        port=env.server_port,\n        public_key_filename=None,\n    )\n\n\n=================\nRunning the Tests\n=================\n\nDoes the code actually work?\n\n::\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install -r requirements_test.txt\n    (myenv) $ make test\n\nSome of the tests use a test server to check the functional aspects of the\nlibrary. Specifically, it will try to connect to the server multiple times, run\nsome programs, and check that their output is correct.\n\nTo run those tests as well, copy the ``.env.base`` file to ``.env`` and modify\nthe variables as needed. If this file has not been set up, then those tests\nwill be skipped, but it won't affect the success or failure of the tests.\n\nRunning tests independtely, e.g.::\n\n    pytest -v tests/test_models.py\n    pytest -v tests/test_models.py::test_server_string_representation\n\n===================\nRunning the Example\n===================\n\nSet the ``example/.env`` file. Copy or rename ``example/.env.base`` and fill in the details of the remote machine where the ``sshd`` server is running::\n\n    EXAMPLE_PYTHON_PATH\n    EXAMPLE_PYTHON_ARGUMENTS\n    EXAMPLE_SERVER_HOSTNAME\n    EXAMPLE_SERVER_PORT\n    EXAMPLE_REMOTE_DIRECTORY\n    EXAMPLE_REMOTE_FILENAME\n    EXAMPLE_REMOTE_USER\n    EXAMPLE_REMOTE_PASSWORD\n\nSet up the example's virtualenv::\n\n    virtualenv venv\n    source venv/bin/activate\n    pip install -r requirements.txt\n\nLaunch Redis::\n\n    redis-server\n\nLaunch Celery::\n\n    cd example\n    celery -A server.celery worker --loglevel=info\n\nLaunch Django::\n\n    cd example\n    ./manage.py makemigrations\n    ./manage.py migrate\n    ./manage.py loaddata fixtures/initial_data.json\n    # You may want to create another user:\n    # python manage.py createsuperuser\n    ./manage.py runserver\n\nOpen in the browser one of the links below. The password for admin is ``admin123`` unless you prefer to use the created password::\n\n    # For the Admin Interface\n    http://localhost:8000/admin/\n    # For the REST API\n    http://localhost:8000/\n    # To test Job creation with live status update\n    http://127.0.0.1:8000/example/\n\n=============\nWeb Interface\n=============\n\nThe app provides two web sockets to see in real time the Job Status and the Log associated to a Job.\n\nThose are defined in ``routing.py``::\n\n    path=r'^/job-user/$'\n    path=r'^/job-log/(?P<job_pk>[0-9]+)/$'    \n\nThe ``example`` app comes with the Live Job Status and Live Log examples. See::\n    \n    # Jobs\n    http://127.0.0.1:8000/example/\n    # Job 123 Log\n    http://127.0.0.1:8000/logs/123/\n\nBoth files::\n\n    django-remote-submission/example/templates/example_job_status.html\n    django-remote-submission/example/templates/example_job_log.html\n\nHave the client side web socket code to interact with the ``django-remote-submission`` app.\nAlso to include the Live information on a web app it is worth looking at the celery configuration:\n\n``django-remote-submission/example/server/celery.py``\n\nand the WebSockets routing:\n\n``django-remote-submission/example/server/routing.py``\n\n============\nUseful notes\n============\n\nThe Results files are stored in MEDIA. So add to your setings something similar to:\n\n.. code:: python\n\n\tMEDIA_URL = '/media/'\n\tMEDIA_ROOT = '../dist/media'\n\nTo make media available in DEBUG mode, you might want to add to the main ``urls.py``:\n\n.. code:: python\n\n\tif settings.DEBUG:\n\t    # Serving files uploaded by a user during development\n\t    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\n\n=======\nCredits\n=======\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n\n1.1.2 (2017-08-18)\n+++++++++++++++++++\n\n* Fixed Local wrapper truncate the log.\n\n1.1.1 (2017-08-18)\n+++++++++++++++++++\n\n* Fix issue with python 2.7\n\n1.1.0 (2017-08-18)\n+++++++++++++++++++\n\n* Creates the remote directory if it does not exist.\n\n1.0.1 (2017-08-18)\n+++++++++++++++++++\n\n* Updated DOC with the ``remote`` argument.\n\n1.0.0 (2017-08-17)\n+++++++++++++++++++\n\n* All ready to be released\n* Tasks have an attribute to run locally or remotelly.\n\n0.13.0 (2017-08-17)\n+++++++++++++++++++\n\n* LocalWrapper and RemoteWrapper are in the wrapper package.\n\n0.12.0 (2017-08-16)\n+++++++++++++++++++\n\n* Improved documentation\n\n0.11.2 (2017-08-15)\n+++++++++++++++++++\n\n* Publication ready\n\n0.2.0 (2016-11-17)\n++++++++++++++++++\n\n* Add django admin interface.\n* Add migrations folder.\n* Add log policies for submitting tasks.\n* Add return value for modified files.\n\n0.1.1 (2016-11-15)\n++++++++++++++++++\n\n* Add port number to Server model.\n* Add task to submit jobs.\n* Add status updates to task.\n* Fix unicode error when submitting jobs.\n* Fix verbose/related names for models.\n\n0.1.0 (2016-11-08)\n++++++++++++++++++\n\n* First release on PyPI.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ornl-ndav/django-remote-submission",
    "keywords": "django-remote-submission",
    "license": "ISCL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-remote-submission",
    "package_url": "https://pypi.org/project/django-remote-submission/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-remote-submission/",
    "project_urls": {
      "Homepage": "https://github.com/ornl-ndav/django-remote-submission"
    },
    "release_url": "https://pypi.org/project/django-remote-submission/1.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django application to manage long running job submission, including starting the job, saving logs, and storing results.",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3876615,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf394841a51ffa5230ca198ad7d3943daf2b2394a36ea930ac27a490aba105de",
        "md5": "f681e63692ba193c604efb2b10149fe9",
        "sha256": "a9712cabbc2ae35c82fa42466c0fc996cb565cc1b60d9274a66395e38e5e48aa"
      },
      "downloads": -1,
      "filename": "django_remote_submission-1.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f681e63692ba193c604efb2b10149fe9",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "requires_python": null,
      "size": 32147,
      "upload_time": "2017-08-21T21:07:07",
      "upload_time_iso_8601": "2017-08-21T21:07:07.797298Z",
      "url": "https://files.pythonhosted.org/packages/bf/39/4841a51ffa5230ca198ad7d3943daf2b2394a36ea930ac27a490aba105de/django_remote_submission-1.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39c1277abbbd955770610a1e8eac0078f1f7f9b2db8f5f4d5fe6c904c976824b",
        "md5": "5716977814b44bc89d9b3c9722c31379",
        "sha256": "be68da9d5efa4a71b256aed467db040cdf94ba8d191c2f0e806e0fa3988ff257"
      },
      "downloads": -1,
      "filename": "django-remote-submission-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5716977814b44bc89d9b3c9722c31379",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24465,
      "upload_time": "2017-08-21T21:07:05",
      "upload_time_iso_8601": "2017-08-21T21:07:05.789152Z",
      "url": "https://files.pythonhosted.org/packages/39/c1/277abbbd955770610a1e8eac0078f1f7f9b2db8f5f4d5fe6c904c976824b/django-remote-submission-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}