{
  "info": {
    "author": "Souheil Chelfouh",
    "author_email": "trollfot@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Zope3",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "=================\ndolmen.app.layout\n=================\n\n`dolmen.app.layout` provides ready-to-use components to get a fully\nfunctional and extensively pluggable User Interface for a Dolmen\napplication (see `dolmen.app.site`).\n\n\nAbout Dolmen\n============\n\nDolmen is an application development framework based on Grok and ZTK\nwhich also provides a CMS (Content Management System) out of the\nbox. Dolmen is being made with four main objectives in mind: easily\npluggable, rock solid and fast content type development, readability\nand speed.\n\n\nGetting started\n===============\n\nWe import all the needed dependencies of the tests::\n\n  >>> from dolmen import content\n  >>> from grokcore.component import testing\n  >>> from zope.site.hooks import getSite\n  >>> from zope.component import getMultiAdapter \n  >>> from zope.publisher.browser import TestRequest\n   \nWe import everything needed for the API verification::\n\n  >>> from zope.interface import verify\n  >>> from dolmen.app.layout import interfaces as API\n \nWe define and intanciate a Context object and a request for our tests\nto come::\n\n  >>> class Mammoth(content.Content):\n  ...    content.name(u'Furry Mammoth')\n\n  >>> testing.grok_component('mammoth', Mammoth)\n  True\n\n  >>> root = getSite()\n  >>> root['manfred'] = Mammoth()\n  >>> manfred = root['manfred']\n\n  >>> request = TestRequest()\n\n\nGlobal interface\n================\n  \n  >>> from dolmen.app.layout import master\n\n  >>> API.IGlobalUI.extends(API.IContentProviders)\n  True\n\n  >>> API.IGlobalUI.providedBy(master)\n  True\n  >>> verify.verifyObject(API.IGlobalUI, master)\n  True\n\n\nContent providers\n-----------------\n \nDescription\n~~~~~~~~~~~\n\n  >>> for name, attr in API.IContentProviders.namesAndDescriptions():\n  ...   print \"%s: %s\" % (name, attr.getDoc())\n  Footer: Viewlet manager for the bottom part of the body.\n  AboveBody: Viewlet manager located above the main content.\n  BelowBody: Viewlet manager located below the main content.\n  Header: Viewlet manager involved in rendering the HTML head.\n  Top: Viewlet manager for the top part of the body.\n  Resources: Viewlet manager including resources.\n\n\nLayout\n------\n\nDescription\n~~~~~~~~~~~\n\n  >>> interfaceDescription(API.IGlobalUI)\n  Master: Base layout using all the `IContentProviders` components to build a coherent yet overridable rendering.\n\n\nContextual UI\n=============\n\n  >>> from dolmen.app.layout import viewlets\n\n  >>> API.IContextualUI.providedBy(viewlets)\n  True\n  >>> verify.verifyObject(API.IContextualUI, viewlets)\n  True\n\nDescription\n-----------\n\n  >>> interfaceDescription(API.IContextualUI)\n  ContextualActions: Viewlet rendering contextual actions.\n  FlashMessages: Viewlet displaying site-wide messages.\n\n\nView components\n===============\n\n  >>> from dolmen.app.layout import models\n\nModels\n------\n\nModels are base classes to be used in your own\nclasses. `dolmen.app.layout` provides a collections of ready-to-use\nmodels::\n\n  >>> API.IModels.providedBy(models)\n  True\n  >>> verify.verifyObject(API.IModels, models)\n  True\n\nDescription\n~~~~~~~~~~~\n\n  >>> interfaceDescription(API.IModels)\n  Index: Page showing as default view on an object.\n  Form: Generic page form.\n  Page: Page embedded in a layout.\n\nDefault views\n-------------\n\n`dolmen.app.layout` registers some views, out-of-the-box, to allow you\nto interact with your `dolmen.content` objects and your application::\n\n  >>> API.IBaseViews.providedBy(models)\n  True\n  >>> verify.verifyObject(API.IBaseViews, models)\n  True\n\nDescription\n~~~~~~~~~~~\n\n  >>> interfaceDescription(API.IBaseViews)\n  Edit: Default edit form.\n  Add: Default add form.\n  DefaultView: Display form used as index.\n  Delete: Default delete form.\n\nQuery\n~~~~~\n\nWe can now test to see if our default views are retrieved::\n\n  >>> view = getMultiAdapter((manfred, request), name=\"index\")\n  >>> view\n  <dolmen.app.layout.models.DefaultView object at ...>\n\n  >>> edit = getMultiAdapter((manfred, request), name=\"edit\")\n  >>> edit\n  <dolmen.app.layout.models.Edit object at ...>\n\nThe add form is a bit different, as it relies on an adding view (see\n`dolmen.forms.crud` and `dolmen.content` for more information)::\n\n  >>> from dolmen.forms.crud import Adder\n\n  >>> adding = Adder(root, request)\n  >>> adding\n  <dolmen.forms.crud.addview.Adder object at ...>\n\n  >>> adding.traverse(\"dolmen.app.layout.Mammoth\", None)\n  <dolmen.app.layout.models.Add object at ...>\n\n\nSkins\n=====\n\n`dolmen.app.layout` provides a browser layer and a skin, to serve as a\nbase component for your own skins::\n\n  >>> from dolmen.app.layout import skin\n\n  >>> API.ISkin.providedBy(skin)\n  True\n  >>> verify.verifyObject(API.ISkin, skin)\n  True\n\nDescription\n-----------\n\n  >>> interfaceDescription(API.ISkin)\n  IBaseSkin: Skin providing the IBaseLayer. Can be applied directly or inherited.\n  IBaseLayer: Layer used to register all the Dolmen centric view components.\n  Resource: Viewlet component used to include resources\n\n\nMenus\n=====\n\n  >>> from dolmen.app.layout import menus\n\n  >>> API.IMenus.providedBy(menus)\n  True\n  >>> verify.verifyObject(API.IMenus, menus)\n  True\n\nDescription\n-----------\n\n  >>> interfaceDescription(API.IMenus)\n  ContextualMenu: Menu defining contextual actions.\n  MenuViewlet: Generic viewlet rendering a `IBrowserMenu`.\n\nContextual menu\n---------------\n\n  >>> manager = master.Top(manfred, request, view)\n  >>> manager\n  <dolmen.app.layout.master.Top object at ...>\n\n  >>> manager.update()\n  >>> print manager.render()\n  <dl id=\"contextual-actions\" class=\"menu\">\n    <dt>Contextual actions</dt>\n    <dd>\n      <ul>\n        <li class=\"selected entry\">\n  \t  <a title=\"View\">View</a>\n        </li>\n        <li class=\"entry\">\n    \t  <a href=\"http://127.0.0.1/manfred/edit\" title=\"Edit\">Edit</a>\n        </li>\n        <li class=\"entry\">\n    \t  <a href=\"http://127.0.0.1/manfred/delete\" title=\"Delete\">Delete</a>\n        </li>\n      </ul>\n    </dd>\n  </dl>\n\n\nCredits\n=======\n\nAll Dolmen packages are sponsorised by NPAI (http://www.npai.fr)\n\n\nChangelog\n=========\n\n1.0 (unreleased)\n----------------\n\n* Update to use grokcore.layout instead of megrok.layout.\n\n1.0b2 (2011-02-01)\n------------------\n\n* Updated versions dependencies to remove the use of\n  ``megrok.resource`` in favor of ``fanstatic``.\n\n\n1.0b1 (2010-11-16)\n------------------\n\n* The ContextualMenu viewlet now computes the URL using the 'url'\n  attribute of the entries, as it should be.\n\n\n1.0a2 (2010-11-05)\n------------------\n\n* Dependencies have been slimmed down : ``dolmen.app.layout`` now longer\n  provides coverage for the ``megrok.z3ctable`` and ``zeam.form.composed``\n  packages. We now rely on the grokcore packages and no longer on the\n  ``grok`` package itself.\n\n* Tests no longer use ``zope.testing``.\n\n\n1.0a1 (2010-06-03)\n------------------\n\n* The flash messages are now retrieved thanks to `grokcore.message`.\n\n* Tests have been corrected and simplified.\n\n* Using now `zeam.form` instead of `z3c.form`.\n\n* Using now `dolmen.menu` instead of `megrok.menu`.\n\n* `dolmen.app.layout` now required python2.6 to work. This is due to\n  the use of class decorators.\n\n\n0.5.1 (2010-02-26)\n------------------\n\n* Corrected the success message getter for the `Delete` form. It used\n  to fetch the property object and try to persist it. Now, it gets its\n  value as it should.\n\n\n0.5.0 (2010-02-25)\n------------------\n\n* Using now the latest ``megrok.layout``. This removes the need for the\n  `ApplicationAwareView` mixin. This version of ``dolmen.app.layout`` will\n  only work with `Grok >= 1.1rc1`.\n\n\n0.4.0 (2010-02-17)\n------------------\n\n* INotFound errors are not located in the `index.html` view. This\n  allows to use a layout transparently. The __parent__ is set to the\n  `ob` attribute of the INotFound object.\n\n* The contextual menu is no longer restricted to `IBaseContent`\n  objects. It is now registered for `Interface`.\n\n* The dependencies have been greatly reduced by the removal of all the\n  `zope.app` packages.\n\n\n0.3.1 (2010-01-21)\n------------------\n\n* Bug fix: the success message of a Delete form is a property and\n  can't be called directly through the class. We need to use fget.\n\n\n0.3 (2009-12-26)\n----------------\n\n* The layout now provides and uses a way to include resources, using\n  megrok.resourceviewlet. Two components have been added for that:\n  `ResourcesManager` and `Resource`, respectively a viewletmanager and\n  a viewlet base class.\n\n* The imports has been modified to avoid using any zope.app package.\n\n\n0.2.2 (2009-11-03)\n------------------\n\n* Now the configure.zcml includes the `megrok.z3ctable` meta.zcml.\n\n* Updated dependencies in setup.py\n\n\n0.2.1 (2009-11-02)\n------------------\n\n* Corrected flash messages and redirection in the delete form.\n\n\n0.2 (2009-11-02)\n----------------\n\n* Added Delete form to complete the CRUD actions.\n\n\n0.1 (2009-11-02)\n----------------\n\n* Initial release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://gitweb.dolmen-project.org/",
    "keywords": "Grok Zope3 CMS Dolmen",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dolmen.app.layout",
    "package_url": "https://pypi.org/project/dolmen.app.layout/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/dolmen.app.layout/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://gitweb.dolmen-project.org/"
    },
    "release_url": "https://pypi.org/project/dolmen.app.layout/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Layout and page models for Dolmen applications",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 907651,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0be64cbc666e2793dc93006cb6cb0309981b29cde7ffc50de1e613e67fea4b25",
        "md5": "091312be37a0db31002356b247a373fc",
        "sha256": "9cabf25d01f42267fad7f0c2cc61e6d1d90391e26fde4d12a744ab0072fa0e3c"
      },
      "downloads": -1,
      "filename": "dolmen.app.layout-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "091312be37a0db31002356b247a373fc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13913,
      "upload_time": "2013-10-30T19:35:16",
      "upload_time_iso_8601": "2013-10-30T19:35:16.386370Z",
      "url": "https://files.pythonhosted.org/packages/0b/e6/4cbc666e2793dc93006cb6cb0309981b29cde7ffc50de1e613e67fea4b25/dolmen.app.layout-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}