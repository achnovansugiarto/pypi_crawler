{
  "info": {
    "author": "无声andTreize",
    "author_email": "saint_228@126.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# DreamMultiDevices\n基于Python/Airtest/Unittest的自动化多设备测试\n\n\n\n1.本框架由无声andTreize编写，落落测试。\n须事先安装如下环境：python3.6以上、airtest、pocoui、BeautifulReport、unittest。\n安装方法\n\n    pip install DreamMultiDevices\n\n使用下列命令初始化配置，初始化只需要一次，会存储在config.ini中：\n\n    from DreamMultiDevices.core.MultiAdb import *\n    madb=MultiAdb()\n    madb.set_packagename(\"\")#填待测apk的包名\n    madb.set_apkpath(\"\")#填待测apk在硬盘上的绝对路径\n    madb.set_TestCasePath(\"\")#填本地测试用例目录的绝对路径\n\n调用方法\n\n    from DreamMultiDevices.start import *\n\n    if __name__ == \"__main__\":\n        start()\n\n2./config.ini。整个项目的配置文件。\n\n    [config]\n    packName填写待测试包名，str；\n    deviceslist填写测试设备名，以逗号分隔，（PS：如不想使用配置，留空即可，则读取当前所有已连接的设备）元组；\n    apkpath填写待测试应用的安装地址，须使用绝对路径，str；\n    testcase填写期望测试的用例id，须是一个int元组，RunTestCase函数会比对testcase元组与TestCase目录下的TC_*.py文件，在元组内的用例才会被测试；\n    needclickinstall和needclickstartapp 填写True或False，设置是否需要安装点击或运行点击，不为True则不执行；\n    timeoutperaction填写全局sleep时间，int；\n    timeoutofstartapp填写安装app等待时间，int；\n    iteration填写权限脚本循环次数，int。\n\n    [TestCaseforDevice]\n    按设备配置执行用例，不填则默认全部\n\n\n3./start.py。可以使用pycharm运行，也可以被其他方法调用运行。\n\n4./core/index index是整个框架的索引，负责根据devices分发进程，让每个设备各自去运行enterprocess()函数。该函数里进行设备的初始化，在确保初始化成功、安装包成功的情况下，启动待测试apk并调用RunTestCase函数，进行测试用例的分发。\n\n5./core/MultiADB Madb类，集成了各个与device有关的方法。\n\n6./tools/PushApk2Devices 负责安装apk到设备上，会先判断待测包是否已存在，存在则删除并重装，重装时会自动调用inputThread进行安装权限的点击。这里的代码需要用户自行完成，具体写法请参考inputThread里已经提供的示范代码。\n\n7./tools/StartApp 。StartApp负责启动apk，然后会进行应用开启权限的点击，此处代码也需要用户自行完成。\n\n8./core/RunTestCase。RunTestCase是运行测试用例的分发函数，读取之前配置表上的testcase元组并与TestCase目录下的文件进行比对，一致的则列入测试范围。\n\n9./TestCase目录。本目录下放置所有的待测试用例。用例须以TC_开头，用例采用标准的unittest格式。每条用例的执行结果会是一个suite对象，并在全部执行完以后，聚合到RunTestCase的report对象上。可以通过set_TestCasePath(\"\")方法重置。\n\n10./TestCast/TC_******.py 单个用例的执行文件，由用户自行编写，最后须符合unittest格式。特别要说明一点，BeautifulReport的默认截图方法是异常时触发语法糖截图。使用时略有不便，我新增了GetScreen()函数，可以在任意需要时实时截图。\n\n11./Report/Html报告。RunTestCase使用BeautifulReport库进行报告输出。会在调用文件所在的目录生成一个Report目录，输出内容在Report目录下，以设备名和时间命名，相关截图则存储在Report/Screen目录下。\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/saint228/DreamMultiDevices",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DreamMultiDevices",
    "package_url": "https://pypi.org/project/DreamMultiDevices/",
    "platform": "",
    "project_url": "https://pypi.org/project/DreamMultiDevices/",
    "project_urls": {
      "Homepage": "https://github.com/saint228/DreamMultiDevices"
    },
    "release_url": "https://pypi.org/project/DreamMultiDevices/1.24/",
    "requires_dist": [
      "airtest (>=1.0.26)",
      "BeautifulReport (>=0.0.9)",
      "pocoui (>=1.0.76)",
      "xlwings (>=0.15.8)"
    ],
    "requires_python": "",
    "summary": "新增了adblog功能，修复了不认识android10的问题",
    "version": "1.24",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7186427,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d99395171bca66270551ce1405aded0ec5866166702d6eac24d081fe15b66db2",
        "md5": "440af49bc8c2fd55748852e042fb1898",
        "sha256": "e1d2206056400ce351d29adb1b0e6945e422820c47307ee814efab902a9c81e8"
      },
      "downloads": -1,
      "filename": "DreamMultiDevices-1.24-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "440af49bc8c2fd55748852e042fb1898",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 38127,
      "upload_time": "2020-05-06T10:38:58",
      "upload_time_iso_8601": "2020-05-06T10:38:58.265974Z",
      "url": "https://files.pythonhosted.org/packages/d9/93/95171bca66270551ce1405aded0ec5866166702d6eac24d081fe15b66db2/DreamMultiDevices-1.24-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "323c4237226a595d867d5392258a45b800b2c2783f8b6e94869891e70c79cd77",
        "md5": "376fc46ca550ab6722c0150eb904a9b0",
        "sha256": "2b237af57cd7a529bd587150605b07abf2c87663d0af75510d251d70c90937de"
      },
      "downloads": -1,
      "filename": "DreamMultiDevices-1.24.tar.gz",
      "has_sig": false,
      "md5_digest": "376fc46ca550ab6722c0150eb904a9b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26636,
      "upload_time": "2020-05-06T10:38:59",
      "upload_time_iso_8601": "2020-05-06T10:38:59.613196Z",
      "url": "https://files.pythonhosted.org/packages/32/3c/4237226a595d867d5392258a45b800b2c2783f8b6e94869891e70c79cd77/DreamMultiDevices-1.24.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}