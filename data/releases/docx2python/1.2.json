{
  "info": {
    "author": "Shay Hill",
    "author_email": "shay_public@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# docx2python\n\nExtract docx headers, footers, (formatted) text, footnotes, endnotes, properties, and images to a Python object.\n\n[full documentation](https://docx2python.readthedocs.io/en/latest/index.html)\n\nThe code is an expansion/contraction of [python-docx2txt](https://github.com/ankushshah89/python-docx2txt) (Copyright (c) 2015 Ankush Shah). The original code is mostly gone, but some of the bones may still be here.\n\n__shared features__:\n* extracts text from docx files\n* extracts images from docx files\n* no dependencies (docx2python requires pytest to test)\n\n__additions:__\n* converts bullets and numbered lists to ascii with indentation\n* retains some structure of the original file (more below)\n* extracts document properties (creator, lastModifiedBy, etc.) \n* inserts image placeholders in text ('`----image1.jpg----`')\n* (optionally) retains font size, font color, bold, italics, and underscore as html\n* full test coverage and documentation for developers\n\n__subtractions:__\n* no command-line interface\n* will only work with later versions of Python\n\n\n## Installation\n```bash\npip install docx2python\n```\n\n## Use\n\n```python\nfrom docx2python import docx2python\n\n# extract docx content\ndocx2python('path/to/file.docx')\n\n# extract docx content, write images to image_directory\ndocx2python('path/to/file.docx', 'path/to/image_directory')\n\n# extract docx content with basic font styles converted to html\ndocx2python('path/to/file.docx', html=True)\n```\n\nNote on html feature:\n* font size, font color, bold, italics, and underline supported\n* every tag open in a paragraph will be closed in that paragraph (and, where appropriate, reopened in the next paragraph). If two subsequenct paragraphs are bold, they will be returned as `<b>paragraph q</b>`, `<b>paragraph 2</b>`. This is intentional to make  each paragraph its own entity. \n* if you specify `export_font_style=True`, `>` and `<` in your docx text will be encoded as `&gt;` and `&lt;`\n\n## Return Value\n\nFunction `docx2python` returns an object with several attributes.\n\n__header__ - contents of the docx headers in the return format described herein\n\n__footer__ - contents of the docx footers in the return format described herein\n\n__body__ - contents of the docx in the return format described herein\n\n__document__ - header  + body + footer (read only)\n\n__text__ - all docx text as one string, similar to what you'd get from `python-docx2txt`\n\n__properties__ - docx property names mapped to values (e.g., `{\"lastModifiedBy\": \"Shay Hill\"}`)\n\n__images__ - image names mapped to images in binary format. Write to filesystem with\n\n```\nfor name, image in result.images.items():\n    with open(name, 'wb') as image_destination:\n        write(image_destination, image)\n```\n\n## Return Format\n\nSome structure will be maintained. Text will be returned in a nested list, with paragraphs always at depth 4 (i.e., `output.body[i][j][k][l]` will be a paragraph).\n\nIf your docx has no tables, output.body will appear as one a table with all contents in one cell:\n\n```python\n[  # document\n    [  # table\n        [  # row\n            [  # cell\n                \"Paragraph 1\",\n                \"Paragraph 2\",\n                \"-- bulleted list\",\n                \"-- continuing bulleted list\",\n                \"1)  numbered list\",\n                \"2)  continuing numbered list\"\n                \"    a)  sublist\",\n                \"        i)  sublist of sublist\",\n                \"3)  keeps track of indention levels\",\n                \"    a)  resets sublist counters\"\n            ]\n        ]\n     ]\n ]\n```\n\nTable cells will appear as table cells. Text outside tables will appear as table cells.\n\n\nTo preserve the even depth (text always at depth 4), nested tables will appear as new, top-level tables. This is clearer with an example:\n\n```python\n#  docx structure\n\n[  # document\n    [  # table A\n        [  # table A row\n            [  # table A cell 1\n                \"paragraph in table A cell 1\"\n            ],\n            [  # nested table B\n                [  # table B row\n                    [  # table B cell\n                        \"paragraph in table B\"\n                    ]\n                ]\n            ],\n            [  # table A cell 2\n                'paragraph in table A cell 2'\n            ]\n        ]\n    ]\n]\n```\n\nbecomes ...\n```python\n[  # document \n    [  # table A\n        [  # row in table A\n            [  # cell in table A\n                \"table A cell 1\"\n            ]\n        ]\n    ],\n    [  # table B\n        [  # row in table B\n            [  # cell in table B\n                \"table B cell\"\n            ]\n        ]\n    ],\n    [  # table C\n        [  # row in table C\n            [  # cell in table C\n                \"table A cell 2\"\n            ]\n        ]\n    ]\n]\n```\n\nThis ensures text appears\n\n1. only once\n1. in the order it appears on the docx\n1. always at depth four (i.e., `result.body[i][j][k][l]` will be a string).\n\n## Working with output\n\nThis package provides several documented helper functions in [the ``docx2python.iterators`` module](https://docx2python.readthedocs.io/en/latest/docx2python.html#module-iterators). Here are a few recipes possible with these functions:\n\n```python\nfrom docx2python.iterators import enum_cells\n\ndef remove_empty_paragraphs(tables):\n    for (i, j, k), cell in enum_cells(tables):\n        tables[i][j][k] = [x for x in cell if x]\n```\n\n```\n>>> tables = [[[['a', 'b'], ['a', '', 'd', '']]]]\n>>> remove_empty_paragraphs(tables)\n    [[[['a', 'b'], ['a', 'd']]]]\n```\n\n```python\nfrom docx2python.iterators import enum_at_depth\n\ndef html_map(tables) -> str:\n    \"\"\"Create an HTML map of document contents.\n\n    Render this in a browser to visually search for data.\n    \"\"\"\n    tables = self.document\n\n    # prepend index tuple to each paragraph\n    for (i, j, k, l), paragraph in enum_at_depth(tables, 4):\n        tables[i][j][k][l] = \" \".join([str((i, j, k, l)), paragraph])\n\n    # wrap each paragraph in <pre> tags\n    for (i, j, k), cell in enum_at_depth(tables, 3):\n        tables[i][j][k] = \"\".join([f\"<pre>{x}</pre>\" for x in cell])\n\n    # wrap each cell in <td> tags\n    for (i, j), row in enum_at_depth(tables, 2):\n        tables[i][j] = \"\".join([f\"<td>{x}</td>\" for x in row])\n\n    # wrap each row in <tr> tags\n    for (i,), table in enum_at_depth(tables, 1):\n        tables[i] = \"\".join(f\"<tr>{x}</tr>\" for x in table)\n\n    # wrap each table in <table> tags\n    tables = \"\".join([f'<table border=\"1\">{x}</table>' for x in tables])\n\n    return [\"<html><body>\"] + tables + [\"</body></html>\"]\n```\n\n```\n>>> tables = [[[['a', 'b'], ['a', 'd']]]]\n>>> html_toc(tables)\n<html>\n    <body>\n        <table border=\"1\">\n            <tr>\n                <td>\n                    '(0, 0, 0, 0) a'\n                    '(0, 0, 0, 1) b'\n                </td>\n                <td>\n                    '(0, 0, 1, 0) a'\n                    '(0, 0, 1, 1) d'\n                </td>\n            </tr>\n        </table>\n    </body>\n</html>\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ShayHill/docx2python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docx2python",
    "package_url": "https://pypi.org/project/docx2python/",
    "platform": "",
    "project_url": "https://pypi.org/project/docx2python/",
    "project_urls": {
      "Homepage": "https://github.com/ShayHill/docx2python"
    },
    "release_url": "https://pypi.org/project/docx2python/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Extract content from docx files",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16687874,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89c3a22455ccf3e9c7e9282b92bfd6299c051a18d392c82d7c9926a15311909e",
        "md5": "897265b12eca1de82972368def98d81e",
        "sha256": "b982efbd5a32d6ac400f80dc847a5d3c384afc1e331c9c344b87d73081a9c9c5"
      },
      "downloads": -1,
      "filename": "docx2python-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "897265b12eca1de82972368def98d81e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21016,
      "upload_time": "2020-03-19T23:44:15",
      "upload_time_iso_8601": "2020-03-19T23:44:15.815669Z",
      "url": "https://files.pythonhosted.org/packages/89/c3/a22455ccf3e9c7e9282b92bfd6299c051a18d392c82d7c9926a15311909e/docx2python-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a96c90a9e7980c03ab329e97ad4f8f2dc442214e6a287724c2dbc1798c17aa06",
        "md5": "ff3142648b28df126cad0f566f594c0b",
        "sha256": "3e3024e3c2ec24ce63ea88792e3cd0dea547c86a23a95d8aa748a99207e8b44c"
      },
      "downloads": -1,
      "filename": "docx2python-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff3142648b28df126cad0f566f594c0b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18589,
      "upload_time": "2019-07-10T19:49:03",
      "upload_time_iso_8601": "2019-07-10T19:49:03.642881Z",
      "url": "https://files.pythonhosted.org/packages/a9/6c/90a9e7980c03ab329e97ad4f8f2dc442214e6a287724c2dbc1798c17aa06/docx2python-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d05eeabf6a6b663212afc7ade6cdc96a296ca3ca5b421cfee515c2dd15d37f9",
        "md5": "6866518e4a2b32d0d061eb375e014c76",
        "sha256": "5bcf062defdd497d83093838ddaba5dd85fe015850393deaa2db85d41291b75f"
      },
      "downloads": -1,
      "filename": "docx2python-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6866518e4a2b32d0d061eb375e014c76",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23256,
      "upload_time": "2019-07-10T19:49:05",
      "upload_time_iso_8601": "2019-07-10T19:49:05.199876Z",
      "url": "https://files.pythonhosted.org/packages/4d/05/eeabf6a6b663212afc7ade6cdc96a296ca3ca5b421cfee515c2dd15d37f9/docx2python-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}