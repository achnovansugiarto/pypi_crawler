{
  "info": {
    "author": "Eugenio Berretta",
    "author_email": "euberdeveloper@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# mediawiki-history-dumps-scraper\n\nThis is the **pip** module of \"Mediawiki history dumps scraper\", refer to the [main branch](https://github.com/euberdeveloper/mediawiki-history-dumps-scraper) to see in general the projects' purpose.\n\n## What does the module do?\n\nThis pip module allows you to get (also selectively), through a **scraper**, the available content in [Mediawiki history dumps](https://dumps.wikimedia.org/other/mediawiki_history/readme.html). You can check wich versions are available, which language, which datasets, the download links, the size...\n\n## How was it made?\n\nThis module was written in **Python 3.9** and uses `requests` and regexps to **scrape** the content from the [Download site](https://dumps.wikimedia.org/other/mediawiki_history/). The package manager is **poetry**, because it is far better than just pip and because it has a command to directly publish it to pypi. It is also linted with **pylint**.\n\n## How to use it?\n\n### Installation\n\nWith *pip*:\n\n```bash\npip install mhdscraper\n```\n\nWith *pipenv*:\n\n```bash\npipenv install mhdscraper\n```\n\nWith *poetry*:\n\n```bash\npoetry add mhdscraper\n```\n\n### Examples\n\nAn example (you can add print of a variable to see the response).\n\n```python\nimport mhdscraper\n\nfrom datetime import date\n\n# Returns the root url of the datasets site\nwiki_url = print(mhdscraper.WIKI_URL)\n\n# Returns a list of versions, returning the version name and its url\nversions = mhdscraper.fetch_versions()\n# Returns a list of datasets, returning the dataset name, its url and \n# including all the available wikies (name and url)\nversions_with_langs = mhdscraper.fetch_versions(wikies=True)\n\n# Returns a list containing all the wikies of the latest version, \n# returning name and url\nwikies = mhdscraper.fetch_wikies('latest')\n# Returns a list containing the wikies ending with 'wiki' of the \n# latest version, returning name and url\nwikies_ending_with_wiki = mhdscraper.fetch_wikies('latest', wikitype='wiki')\n# Returns a list containing the wikies starting with 'it' of the latest version, \n# returning name, url and the list of available dumps\nwikies_with_dumps = mhdscraper.fetch_wikies('latest', lang='it', dumps=True)\n\n# Returns a list containing all the dumps of 'itwiki' of the latest version, \n# reurning many pieces of information such as filename, start and end date \n# of the content, size in bytes, url to download it...\ndumps = mhdscraper.fetch_dumps('latest', 'itwiki')\n# Returna a listo containing all the dumps of 'itwiki' of the latest version,\n# whose content is between 2004-01-01 and 2005-02-01\ndumps_selected = mhdscraper.fetch_dumps('latest', 'itwiki', start=date(2004, 1, 1), end=date(2005, 2, 1))\n```\n\nThe result of:\n\n```python\nimport mhdscraper\nfrom datetime import date\n\nresult = mhdscraper.fetch_wikies('latest', lang='it', wikitype='wiki', dumps=True, start=date(2010, 1, 1), end=date(2012, 12, 31))\n```\n\nWould be (as of July 2021):\n\n```json\n[\n    {\n        \"dumps\": [\n            {\n                \"bytes\": \"691419132\",\n                \"filename\": \"2021-06.itwiki.2010.tsv.bz2\",\n                \"from\": \"2010-01-01\",\n                \"lastUpdate\": \"2021-07-03T10:38:00\",\n                \"time\": \"2010\",\n                \"to\": \"2010-12-31\",\n                \"url\": \"https://dumps.wikimedia.org/other/mediawiki_history/2021-06/itwiki/2021-06.itwiki.2010.tsv.bz2\"\n            },\n            {\n                \"bytes\": \"706208269\",\n                \"filename\": \"2021-06.itwiki.2011.tsv.bz2\",\n                \"from\": \"2011-01-01\",\n                \"lastUpdate\": \"2021-07-03T10:57:00\",\n                \"time\": \"2011\",\n                \"to\": \"2011-12-31\",\n                \"url\": \"https://dumps.wikimedia.org/other/mediawiki_history/2021-06/itwiki/2021-06.itwiki.2011.tsv.bz2\"\n            },\n            {\n                \"bytes\": \"747376403\",\n                \"filename\": \"2021-06.itwiki.2012.tsv.bz2\",\n                \"from\": \"2012-01-01\",\n                \"lastUpdate\": \"2021-07-03T10:11:00\",\n                \"time\": \"2012\",\n                \"to\": \"2012-12-31\",\n                \"url\": \"https://dumps.wikimedia.org/other/mediawiki_history/2021-06/itwiki/2021-06.itwiki.2012.tsv.bz2\"\n            }\n        ],\n        \"url\": \"https://dumps.wikimedia.org/other/mediawiki_history/2021-06/itwiki\",\n        \"wiki\": \"itwiki\"\n    }\n]\n```\n\n## API\n\n### `WIKI_URL`\n\nIt is a constant containing the url of the root of the datasets site\n\n### `fetch_latest_version(*, wikies, lang, wikitype, dumps, start, end)`\n\nFetches the last version of the mediawiki history dumps.\n\nThe version is the year-month of the release of the dumps\n\nKeyword parameters:\n* __wikies__ (_bool, default=False)_: If for each returned version the wikies will be fetched\n* __lang__ _(str, default=None)_: If the wikies argument is True, the language of the wikies to return (a wiki name starts with the language).\n* __wikitype__ _(str, default=None)_: If the wikies argument is True, the wiki type of the wikies to return (a wiki name ends with the wiki type).\n* __dumps__ _(bool, default=false)_: If for each returned wiki the wikies will be fetched\n* __start__ _(date, default=None)_: If the wikies and dumps arguments are True, retrieve only the dumps newer than this date\n* __end__ _(date, default=None)_: If the wikies and dumps arguments are True, retrieve only the dumps older than this date\n\nReturns a dict with:\n*  `version` _(str)_ for the version year-month\n*  `url` _(str)_ for the url of that version. \n*  `wikies` will contain the fetched wikies if the argument was set to True.  \nIf no version is found, `None` is returned.\n\n### `fetch_versions(*, wikies, lang, wikitype, dumps, start, end)`\n\nFetch the versions of the mediawiki history dumps\n\nThe versions are the year-month of the release of the dumps\n\nKeyword parameters:\n* __wikies__ (_bool, default=False)_: If for each returned version the wikies will be fetched\n* __lang__ _(str, default=None)_: If the wikies argument is True, the language of the wikies to return (a wiki name starts with the language).\n* __wikitype__ _(str, default=None)_: If the wikies argument is True, the wiki type of the wikies to return (a wiki name ends with the wiki type).\n* __dumps__ _(bool, default=false)_: If for each returned wiki the wikies will be fetched\n* __start__ _(date, default=None)_: If the wikies and dumps arguments are True, retrieve only the dumps newer than this date\n* __end__ _(date, default=None)_: If the wikies and dumps arguments are True, retrieve only the dumps older than this date\n\nReturns a list of dicts with:\n* `version` _(str)_ for the version year-month\n* `url` _(str)_ for the url of that version. \n* `wikies` will contain the fetched wikies if the argument was set to True (see *fetch_wikies* to see the result).\n\n### `fetch_wikies(version, /, *, lang, wikitype, dumps, start, end)`\n\nFetch the wikies of a version of the mediawiki history dumps\n\nParameters:\n* version _(str)_: The version whose wikies will be returned. If \"latest\" is passed, the latest version is retrieved.\n\nKeyword parameters:\n* lang _(str, default=None)_: The language of the wikies to return (a wiki name starts with the language).\n* wikitype _(str, default=None)_: The wiki type of the wikies to return (a wiki name ends with the wiki type).\n* dumps _(bool, default=false)_: If for each returned wiki the dumps will be fetched\n* start _(date, default=None)_: If the dumps argument is True, retrieve only the dumps newer than this date\n* end _(date, default=None)_: If the dumps argument is True, retrieve only the dumps older than this date\n\nReturns a list of dicts with:\n* `wiki` _(str)_ for the wiki name\n* `url` _(str)_ for the url of that wiki. \nIn addition, if the `dumps` argument is True, a `dumps` (list) field contain the fetched dumps (see *fetch_dumps* to see the reuslt).\n\n### `fetch_dumps(version, wiki, /, *, start, end)`\n\nFetch the dumps of a wiki of the mediawiki history dumps\n\nParameters:\n* version _(str)_: The version of the wiki\n* wiki _(str)_: The wiki whose dumps will be returned\n\nKeyword parameters:\n* start _(date, default=None)_: Retrieve only the dumps newer than this date\n* end _(date, default=None)_: Retrieve only the dumps older than this date\n\nReturns a list of dicts with:\n* `filename` _(str)_ for dump file name\n* `time` _(str)_ for the time of the data (`'all-time'`, year or year-month\n* `lastUpdate` _(datetime)_ for the last update date\n* `bytes` _(int)_ for the size in bytes of the file\n* `from` _(date)_ for the start date of the data\n* `to` _(date)_ for the end date of the data\n* `url` _(str)_ the url of the file\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/euberdeveloper/wikimedia-history-dumps-scraper#pip",
    "keywords": "mediawiki,mediawiki-history-dumps,tsv,scraper,wikipedia,wikimedia",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mhdscraper",
    "package_url": "https://pypi.org/project/mhdscraper/",
    "platform": "",
    "project_url": "https://pypi.org/project/mhdscraper/",
    "project_urls": {
      "Homepage": "https://github.com/euberdeveloper/wikimedia-history-dumps-scraper#pip",
      "Repository": "https://github.com/euberdeveloper/wikimedia-history-dumps-scraper#pip"
    },
    "release_url": "https://pypi.org/project/mhdscraper/1.0.3/",
    "requires_dist": [
      "requests (>=2.25.1,<3.0.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "Mediawiki history dumps scraper, a module that scrapes the site of \"Mediawiki history dumps\" and returns to you the available content.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11032907,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a3315cb9f0f74a458061fac5848a79aefb716f437089bb13b9ba3082395ecb3",
        "md5": "9eaae183d2359622a4e21ed22929044e",
        "sha256": "f221470fe9cd5005074f11adc28a41252e2683d4b5dd249079e6d2c36f52c468"
      },
      "downloads": -1,
      "filename": "mhdscraper-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9eaae183d2359622a4e21ed22929044e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 30170,
      "upload_time": "2021-07-28T22:56:59",
      "upload_time_iso_8601": "2021-07-28T22:56:59.573549Z",
      "url": "https://files.pythonhosted.org/packages/1a/33/15cb9f0f74a458061fac5848a79aefb716f437089bb13b9ba3082395ecb3/mhdscraper-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "545e4bd9bff8cba9082055c6eea63d218a4352a305d0ffb9a08dc5011ee35706",
        "md5": "ccf032eb817ef912710c7343aa3156a4",
        "sha256": "cb0bb53460147f498464f2147a6ed261cb4c81d74ce9aa699c0a800926694f34"
      },
      "downloads": -1,
      "filename": "mhdscraper-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ccf032eb817ef912710c7343aa3156a4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 18696,
      "upload_time": "2021-07-28T22:57:01",
      "upload_time_iso_8601": "2021-07-28T22:57:01.475006Z",
      "url": "https://files.pythonhosted.org/packages/54/5e/4bd9bff8cba9082055c6eea63d218a4352a305d0ffb9a08dc5011ee35706/mhdscraper-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}