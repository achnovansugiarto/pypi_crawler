{
  "info": {
    "author": "Jochem Berends",
    "author_email": "jberends@jbits.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: System :: Archiving :: Backup",
      "Topic :: System :: Archiving :: Compression",
      "Topic :: System :: Archiving :: Mirroring"
    ],
    "description": "# Duplicity Backup to S3\n\n[![image](https://img.shields.io/pypi/v/duplicity_backup_s3.svg)](https://pypi.python.org/pypi/duplicity_backup_s3)\n\n[![image](https://img.shields.io/travis/jberends/duplicity_backup.svg)](https://travis-ci.org/jberends/duplicity_backup)\n\n[![image](https://pyup.io/repos/github/jberends/duplicity_backup/shield.svg)](https://pyup.io/repos/github/jberends/duplicity_backup)\n\nDuplicity backup to S3 for production servers using simple yaml file.\n\n## License\n\nFree software: Apache Software License 2.0\n\n## Features\n\nThis is a duplicity command line backup wrapper that will backup to S3 that is using a validated yaml configuration file using modern and awesome CLI patterns. The commands `incremental`, `list files`, `status`, `verify`, `cleanup`, `remove` and `init` are implemented.\n\nThe primary use case to build this (yet another one) CLI wrapper for duplicity, is to be able to deploy the command in production and inject it into a `cron.daily` and having a hands-off automated backup of production servers. We use it a KE-works to automate our production server backups to Amazon S3.\n\n## OS Dependencies\n\n- [duplicity](http://duplicity.nongnu.org/)\n- [python-boto](https://pypi.org/project/boto/) to connect to S3\n\n## Installation\n\nYou can either install this as a system command on any operating system supporting Python 3.5 or later.\n\nTo install as global command from PyPI:\n\n```bash\nsudo python3 -m pip install duplicity-backup-s3\n```\n\nTo install for your user only from PyPI enter the following commmand:\n\n```bash\npython3 -m pip install --user duplicity-backup-s3\n```\n\nTo install from the git repository (latest master branch):\n\n```bash\npython3 -m pip install --user git+https://github.com/jberends/duplicity_backup.git#wheel=duplicity_backup_s3\n```\n\n### First use\n\nTo first use, you need to create a configuration yaml file. You can use the helper command `init` for that. Use the built-in help function for your enjoyment.\n\n```bash\n# help is neigh\nduplicity_backup_s3 --help\n\n# and to init the configuration YAML file\nduplicity_backup_s3 init\n```\n\nIt will drop you a `duplicity_backup_s3.yaml` in your current directory. That may look like this:\n\n```yaml\naws:\n  AWS_ACCESS_KEY_ID: foobar_aws_key_id  # your amazon S3 user that has write right to a backup bucket\n  AWS_SECRET_ACCESS_KEY: foobar_aws_access_key  # your amazon S3 user secret\nbackuproot: /home  # the backup 'root' path. Everything underneath is considered for backup.\nexcludes:\n  - \"**\"  # a list of exclude paths. May be '**' to exclude everything except what you include\nincludes:\n  - /home/Pictures  # a list of includes, which are full paths\n  - /home/Music\nremote:\n  bucket: '<an_s3_bucket>'  # S3 bucket name\n  path: '__test'  # subpath within the bucket\nfull_if_older_than: 7D  # default is incremental, will create full backup every 7Days.\n```\n\nYou can alter the configuration file to your liking. The command will check the configuration for its validity and tell you what went wrong and what you need to correct. If you made mistakes, it can be beneficial to checkout the duplicity man page for more information on that topic. However we tried to be as verbose as possible to guide you in the right direction.\n\n### First backup\n\nTo perform your first backup, which is a full one, use the following command:\n\n```bash\nduplicity_backup_s3 incr --verbose\n\n# or if the config is somewhere else\nduplicity_backup_s3 incr --config /path/to/configuation.yaml\n```\n\nThat might take time according to the size of the backup.\nYou can see the volumes being uploaded to your configured [S3 bucket](https://s3.console.aws.amazon.com/s3/home) using the S3 console.\n\nTo check the backup collection, list and verify the contents of the backup you may use:\n\n```bash\n# collection status\nduplicity_backup_s3 status\n\n# list all files\nduplicity_backup_s3 list\n\n# verify backup\nduplicity_backup_s3 verify\n```\n\n### Remove old backups\n\nTo remove older backups, duplicity provides some commands. We implemented those in the `remove` command.\n\n```bash\n# to remove backups older than 7D\nduplicity_backup_s3 remove --older-than 7D\n\n# to remove older backup except the last 4 full backups\nduplicity_backup_s3 remove --all-but-n-full 4\n```\n\n### Restore backups\n\nTo restore backup we implemented the `restore` command.\n\n```bash\n# to restore backups from yesterday to a current directory\nduplicity_backup_s3 restore --time 1D\n\n# to restore specific subdirectory from a specific date/time to a custom directory\nduplicity_backup_s3 restore --dir specific_subdir \\\n    --time 2020-12-08T22:22:00+01:00 --target ~/a_restoredir\n```\n\n### Using this as daily backup in a cronjob\n\nTo use this in a daily cron job, you can alter the `crontab` for the user `root`\n\n```bash\ncrontab -u root -e\n```\n\nYou can alter the crontab in the following way\n\n```text\n# Daily backup and remove older backup\n7 4 * * * /bin/duplicity_backup_s3 incr --config=/path/to/conf.yaml && /bin/duplicity_backup_s3 remove --older-than 7D --config=/path/to/conf.yaml\n# | | | | +- the command to execute\n# | | | +--- day of the week (0-6) Sunday=0 (*=every day)\n# | | +----- month of the year (*=every month)\n# | +------- day of the month (*=every day)\n# +--------- hour of the day\n#----------- minute in the hour\n```\n\n## TODO\n\n- [x] implement appdirs for default configuration file placement\n- [x] implement restore for restoring\n- [ ] test on digitalocean\n- [x] If requested migrate `--s3-european-buckets` to configuration file\n- [ ] If requested implement GPG/Encryption capabilities. Possibly reusing code of `kecpkg-tools` to manage certificates.\n- [ ] Initialise itself into `cron.daily`\n\n## Credits\n\n- This package was inspired by the great work done by the duplicity team, back in the days.\n- This package was inspired by the great amount of bash code by the [duplicity_backup.sh](https://github.com/zertrin/duplicity-backup.sh) project.\n- This package is thankful on my knees to the great work done by the Authors and contributors behind the [Click](https://click.palletsprojects.com/en/7.x/) project, packing tons of CLI awesomeness since 2014.\n- This package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and the [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) project template.\n\\n\\n# Changelog\n\n## v1.1.0 (8DEC20)\n\n* added restore command implementation.\n\n## v1.0.2 (3APR20)\n\n* Added appdirs to the setup.py requirements.\n\n## v1.0.1 (UNRELEASED)\n\nNot released to the public.\n\n## v1.0.0 (16DEC19)\n\nFirst production release.\n\n* implemented appdirs, such that the configuration file can be safely placed and located from a known configuration directory on disk.\n* added `remove` command to remove collections from the backup target after a specified time. Please consult the `duplicity_backup_s3 remove --help` documentation for guidance.\n* added `init` command to initialise the configuration in an interactive fashion for users.\n* various development improvements, eg Github actions for testing and publishing to PyPI; removed all flake8 warnings and pydocstyle errors. Added pre-commit hooks. Code is A++ grade now.\n\n## v0.5.0 (5JUN19)\n\nFirst initial public release.\n\n* commands `incr`, `list`, `status`, `verify`, `cleanup` implemented.\n* added yaml schema check for the configuration file.\n\n## v0.2.0 (3JUN19)\n\nInternal release.\n\n* migrated to command structure. Now offers `incr` and `init`\n\n## v0.1.0 (3JUN19)\n\nInternal release.\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jberends/duplicity_backup",
    "keywords": "duplicity_backup_s3",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "duplicity-backup-s3",
    "package_url": "https://pypi.org/project/duplicity-backup-s3/",
    "platform": "",
    "project_url": "https://pypi.org/project/duplicity-backup-s3/",
    "project_urls": {
      "Changelog": "https://github.com/jberends/duplicity_backup/blob/master/CHANGELOG.md",
      "Homepage": "https://github.com/jberends/duplicity_backup",
      "Readme": "https://github.com/jberends/duplicity_backup/blob/master/README.md",
      "Source": "https://github.com/jberends/duplicity_backup",
      "Tracker": "https://github.com/jberends/duplicity_backup/issues"
    },
    "release_url": "https://pypi.org/project/duplicity-backup-s3/1.1.0/",
    "requires_dist": [
      "Click (>=7.0)",
      "PyYAML",
      "envparse",
      "appdirs",
      "cerberus"
    ],
    "requires_python": ">=3.5",
    "summary": "Duplicity backup to S3 for production servers using simple yaml config file.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16631625,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ead9d3eda9ba7afa3eb9a4537f6d28698734359409d266a03faba840c05eb62e",
        "md5": "fe1dc293dae9911240ae88c45ef23303",
        "sha256": "2b7e919420afd761e252a21b644ddb00187938b22a058d1e37ab19a16492501b"
      },
      "downloads": -1,
      "filename": "duplicity_backup_s3-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe1dc293dae9911240ae88c45ef23303",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 22832,
      "upload_time": "2020-12-08T21:26:36",
      "upload_time_iso_8601": "2020-12-08T21:26:36.309708Z",
      "url": "https://files.pythonhosted.org/packages/ea/d9/d3eda9ba7afa3eb9a4537f6d28698734359409d266a03faba840c05eb62e/duplicity_backup_s3-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "329528edb51ec0634152c498df51e7e1a7f44f3a8bdd431f770f77030cdca8e8",
        "md5": "69c842578a17a235c15bdf19f3872ae3",
        "sha256": "e2cc6de1ff856c03356563ab1b7116a703e9e0bb3992b95e44508a8122b8b6a6"
      },
      "downloads": -1,
      "filename": "duplicity_backup_s3-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "69c842578a17a235c15bdf19f3872ae3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 21674,
      "upload_time": "2020-12-08T21:26:37",
      "upload_time_iso_8601": "2020-12-08T21:26:37.292486Z",
      "url": "https://files.pythonhosted.org/packages/32/95/28edb51ec0634152c498df51e7e1a7f44f3a8bdd431f770f77030cdca8e8/duplicity_backup_s3-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}