{
  "info": {
    "author": "Giuseppe Marco Randazzo",
    "author_email": "gmrandazzo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MLMBench - MachineLearning Molecular Benchmarch\nMLMBench collects datasets and splits them to do FAIR ML benchmarks.\nMLMBench can be used with different ML algorithms and data representations\nfor molecular property/activity predictions and more.\n\nThe scope of this code is:\n- keep a simple API representation\n- no need of other libraries\n- keep the dataset offline and represented as CSV file (RFC 4180 standard) or SMILES string list.\n\n\nSplits are made using well-known rational approaches such as:\n\n- random split\n- meaningful split for model target extrapolation\n- meaningful split for chemical diversity extrapolation\n- literature published split\n\nThe datasets are stored in the \"data\" directory in subfolders.\nEvery subfolder needs the following files with the following names:\n\n- Readme.txt: explain some dataset info (provenience, type of data, descriptors version, and so on)\n- cv.splits: the split required to do a fair trainin, test, validation in any ml algorithm\n- dataset.csv: the matrix of features \n- target.csv: the matrix of target/targets\n- dataset.smi: the smiles list\n\nInstall\n-------\n\n```\n\npip3 install mlmbench\n\n```\n\nHow to use\n----------\n\n```\n#!/usr/bin/env python3\n\nfrom mlmbench.data import Datasets\n\nds = Datasets()\nprint(ds.get_available_datasets())\nprint(f'Dataset info: {ds.get_info(\"esol-random\")}')\nfor train_data, test_data, val_data in ds.ttv_generator(\"esol-random\"):\n    print(\"train \", train_data[\"xdata\"].shape, train_data[\"target\"].shape, len(train_data[\"smi\"]))\n    print(\"test \", test_data[\"xdata\"].shape, test_data[\"target\"].shape, len(test_data[\"smi\"]))\n    print(\"val \", val_data[\"xdata\"].shape, val_data[\"target\"].shape, len(val_data[\"smi\"]))\n    \n    # Do ml training/test validation, collect the results and store it in your \n    # appropriate format to do your analysis.\n\n    print(\"-\"*40)\n\n```\n\nSubmit new dataset\n__________________\n\n1) Fork the project!\n2) Clone the forked project\n3) Add the dataset in this form:\n    dataset.csv: tabular data for any kind of descriptors\n    target.csv: tabular data for one or multiple targets\n    dataset.smi: smiles of the molecule in its appropriate format \"c1ccccc1 benzene\"\n    cv.split: The split you like. This specific file needs to be compatible with the following\n    \t      standard. The file comprises lines representing the model,\n    \t      groups split by the \";\" character, and every group representing\n    \t      the compound name, and every name is split using the \",\" character.\n    i.e.\n           train keys           test keys            validation keys\n    line 1  mol1,mol2,mol3,.. ; mol200,mol201,... ; mol400,mol401,...\n    line 2  ...\n    line 3  ..\n\n    Readme.md: Info regarding the dataset(i.e. source and so on)\n4) Create a pull request and 99.9% will be merged\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gmrandazzo/mlmbench",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlmbench",
    "package_url": "https://pypi.org/project/mlmbench/",
    "platform": null,
    "project_url": "https://pypi.org/project/mlmbench/",
    "project_urls": {
      "Homepage": "https://github.com/gmrandazzo/mlmbench"
    },
    "release_url": "https://pypi.org/project/mlmbench/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "MLM MachineLearning Molecular Benchmarch",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17259751,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "787cbe9493dcae585f6c29f8a9f43a6019cec0caa662cfd4db335df3f88df10a",
        "md5": "5784462b9a6cdcd873b48ab030232267",
        "sha256": "293c08001f053b5fb1261595b034c255f6d429ce84c036ec24ada9edd8d42ab2"
      },
      "downloads": -1,
      "filename": "mlmbench-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5784462b9a6cdcd873b48ab030232267",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 50561249,
      "upload_time": "2023-03-11T07:26:40",
      "upload_time_iso_8601": "2023-03-11T07:26:40.247169Z",
      "url": "https://files.pythonhosted.org/packages/78/7c/be9493dcae585f6c29f8a9f43a6019cec0caa662cfd4db335df3f88df10a/mlmbench-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f680bca47710ea12d6d590df5c484773a92112939f1b3296db5c5c8bb9ccf938",
        "md5": "4d7bb581de9064e194629a267bd48bdf",
        "sha256": "aa26a745c1cc58b4a4265b931fdf73f5309e18a0da785636f329df2f2d1f8916"
      },
      "downloads": -1,
      "filename": "mlmbench-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4d7bb581de9064e194629a267bd48bdf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 49937018,
      "upload_time": "2023-03-11T07:26:50",
      "upload_time_iso_8601": "2023-03-11T07:26:50.030717Z",
      "url": "https://files.pythonhosted.org/packages/f6/80/bca47710ea12d6d590df5c484773a92112939f1b3296db5c5c8bb9ccf938/mlmbench-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}