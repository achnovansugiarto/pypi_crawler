{
  "info": {
    "author": "",
    "author_email": "\"Sterling G. Baird\" <sterling.baird@utah.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "<!-- TODO: add buttons for code ocean and Zenodo DOI [![Open in Code Ocean](https://codeocean.com/codeocean-assets/badge/open-in-code-ocean.svg)](https://codeocean.com/capsule/3904426/tree)-->\n# DiSCoVeR\n[![Open In Colab (PyPI)](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1MgV_ZewS6gLm1a3Vyhg33pFHi5uTld_2?usp=sharing)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/sparks-baird/mat_discover/main?labpath=mat_discover_pypi.ipynb)\n[![Open in Code Ocean](https://codeocean.com/codeocean-assets/badge/open-in-code-ocean.svg)](https://doi.org/10.24433/CO.8463578.v1)\n\n[![PyPI version](https://img.shields.io/pypi/v/mat_discover.svg)](https://pypi.org/project/mat_discover/)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/mat_discover?label=PyPI%20downloads)\n\n![Conda](https://img.shields.io/conda/v/sgbaird/mat_discover)\n![Conda](https://img.shields.io/conda/pn/sgbaird/mat_discover)\n[![Anaconda-Server Downloads](https://anaconda.org/sgbaird/mat_discover/badges/downloads.svg)](https://anaconda.org/sgbaird/mat_discover)\n[![Anaconda-Server Badge](https://anaconda.org/sgbaird/mat_discover/badges/latest_release_relative_date.svg)](https://anaconda.org/sgbaird/mat_discover)\n<!-- ![Conda](https://img.shields.io/conda/dn/sgbaird/mat_discover) -->\n<!-- [![Anaconda-Server Downloads](https://anaconda.org/sgbaird/mat_discover/badges/downloads.svg)](https://anaconda.org/sgbaird/mat_discover) -->\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) <!-- ![Coveralls](https://img.shields.io/coveralls/github/sparks-baird/mat_discover) -->\n[![Coverage Status](https://coveralls.io/repos/github/sparks-baird/mat_discover/badge.svg?branch=main)](https://coveralls.io/github/sparks-baird/mat_discover?branch=main)\n![Lines of code](https://img.shields.io/tokei/lines/github/sparks-baird/mat_discover)\n![GitHub](https://img.shields.io/github/license/sparks-baird/mat_discover)\n[![DOI](https://zenodo.org/badge/392897894.svg)](https://zenodo.org/badge/latestdoi/392897894)\n<!-- ![PyPI - License](https://img.shields.io/pypi/l/mat_discover) -->\n\nA materials discovery algorithm geared towards exploring high performance candidates in new chemical spaces using composition-only.\n\n<img src=https://user-images.githubusercontent.com/45469701/139520031-bf4fda18-9be7-4c54-b70b-c9be8e974cea.png width=500>  \n<sup>Bulk modulus values overlaid on DensMAP densities (cropped).</sup>\n\n## Citing\nThe preprint is hosted on ChemRxiv:\n> Baird S, Diep T, Sparks T. DiSCoVeR: a Materials Discovery Screening Tool for High Performance, Unique Chemical Compositions. ChemRxiv 2021. [doi:10.33774/chemrxiv-2021-5l2f8-v2](https://dx.doi.org/10.33774/chemrxiv-2021-5l2f8). This content is a preprint and has not been peer-reviewed.\n\nThe BibTeX citation is as follows:\n```bib\n@article{baird_diep_sparks_2021,\nplace={Cambridge},\ntitle={DiSCoVeR: a Materials Discovery Screening Tool for High Performance, Unique Chemical Compositions},\nDOI={10.33774/chemrxiv-2021-5l2f8-v2},\njournal={ChemRxiv},\npublisher={Cambridge Open Engage},\nauthor={Baird, Sterling and Diep, Tran and Sparks, Taylor},\nyear={2021}\n}\n```\n\n## DiSCoVeR Workflow\n<img src=\"https://sparks-baird.github.io/mat_discover/figures/discover-workflow.png\" alt=\"DiSCoVeR Workflow\" width=600>\n\n<sup>Figure 1. DiSCoVeR workflow to create chemically homogeneous clusters.  (a) Training and validation data.  (b) ElMD pairwise distances.  (c) DensMAP embeddings and DensMAP densities.  (d) Clustering via HDBSCAN*.  (e) Pareto plot and discovery scores.  (f) Pareto plot of cluster properties</sup>\n\n## Installation\nI recommend that you run `mat_discover` in a separate conda environment, at least for initial testing. After installing [Anaconda](https://docs.anaconda.com/anaconda/navigator/index.html) or [Miniconda](https://docs.conda.io/en/latest/miniconda.html), you can [create a new environment](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands) via:\n```python\nconda create --name mat_discover\n```\nThere are three ways to install `mat_discover`: Anaconda (`conda`), PyPI (`pip`), and from source. Anaconda is the preferred method.\n### Anaconda\nTo install `mat_discover` using `conda`, first, update `conda` via:\n```python\nconda update conda\n```\nThe Anaconda `mat_discover` package is hosted on the [@sgbaird channel](https://anaconda.org/sgbaird/repo) and can be installed via:\n```python\nconda install -c sgbaird mat_discover\n```\n### Pip\nTo install via `pip`, first update `pip` via:\n```python\npip install -U pip\n```\n\nDue to limitations of PyPI distributions of CUDA/PyTorch, you will need to install PyTorch separately via the command that's most relevant to you ([PyTorch Getting Started](https://pytorch.org/get-started/locally/)). For example, for Stable/Windows/Pip/Python/CUDA-11.3:\n```python\npip3 install torch==1.10.0+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html\n```\n<!--- ```python\nconda install pytorch cudatoolkit=11.1 -c pytorch -c conda-forge\n``` --->\n\nFinally, install `mat_discover`:\n```python\npip install mat_discover\n```\n### From Source\nTo install from source, clone the `mat_discover` repository:\n\n```python\ngit clone --recurse-submodules https://github.com/sparks-baird/mat_discover.git\ncd mat_discover\n```\n\nTo perform the local installation, you can use `pip`, `conda`, or `flit`:\n| **pip**            | **conda**                                 | **flit**                           |\n| ------------------ | ----------------------------------------- | ---------------------------------- |\n| `pip install -e .` | `conda env create --file environment.yml` | `conda install flit; flit install` |\n\n<!-- conda install torch cudatoolkit=11.1 -c pytorch -c conda-forge # or use pip command specific to you from https://pytorch.org/get-started/locally/ -->\n\n## Basic Usage\n### Fit/Predict\n```python\nfrom mat_discover.mat_discover_ import Discover\ndisc = Discover()\ndisc.fit(train_df) # DataFrames should have at minimum \"formula\" and \"target\" columns\nscores = disc.predict(val_df)\ndisc.plot()\ndisc.save()\nprint(disc.dens_score_df.head(10), disc.peak_score_df.head(10))\n```\n\nSee [mat_discover_example.py](mat_discover_example.py), [![Open In Colab (PyPI)](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1MgV_ZewS6gLm1a3Vyhg33pFHi5uTld_2?usp=sharing), or [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/sparks-baird/mat_discover/main?labpath=mat_discover_pypi.ipynb). On Google Colab and Binder, this may take a few minutes to install and load, respectively. During training and prediction, Google Colab will be faster than Binder since Google Colab has access to a GPU while Binder does not.\n\n### Load Data\nIf you're using your own dataset, you will need to supply a Pandas DataFrame that contains `formula` and `target` columns. If you have a `train.csv` file (located in current working directory) with these two columns, this can be converted to a DataFrame via:\n```python\nimport pandas as pd\ndf = pd.read_csv(\"train.csv\")\n```\nNote that you can load any of the datasets within `CrabNet/data/`, which includes `matbench` data, other datasets from the CrabNet paper, and a recent (as of Oct 2021) snapshot of `K_VRH` bulk modulus data from Materials Project. For example, to load the bulk modulus snapshot:\n```python\nfrom crabnet.data.materials_data import elasticity\ntrain_df, val_df = disc.data(elasticity, \"train.csv\") # note that `val.csv` within `elasticity` is every other Materials Project compound (i.e. \"target\" column filled with zeros)\n```\n\nThe built-in data directories are as follows:\n> ```python\n> {'benchmark_data',\n>  'benchmark_data.CritExam__Ed',\n>  'benchmark_data.CritExam__Ef',\n>  'benchmark_data.OQMD_Bandgap',\n>  'benchmark_data.OQMD_Energy_per_atom',\n>  'benchmark_data.OQMD_Formation_Enthalpy',\n>  'benchmark_data.OQMD_Volume_per_atom',\n>  'benchmark_data.aflow__Egap',\n>  'benchmark_data.aflow__ael_bulk_modulus_vrh',\n>  'benchmark_data.aflow__ael_debye_temperature',\n>  'benchmark_data.aflow__ael_shear_modulus_vrh',\n>  'benchmark_data.aflow__agl_thermal_conductivity_300K',\n>  'benchmark_data.aflow__agl_thermal_expansion_300K',\n>  'benchmark_data.aflow__energy_atom',\n>  'benchmark_data.mp_bulk_modulus',\n>  'benchmark_data.mp_e_hull',\n>  'benchmark_data.mp_elastic_anisotropy',\n>  'benchmark_data.mp_mu_b',\n>  'benchmark_data.mp_shear_modulus',\n>  'element_properties',\n>  'matbench',\n>  'materials_data',\n>  'materials_data.elasticity',\n>  'materials_data.example_materials_property'}\n> ```\n\nTo see what `.csv` files are available (e.g. `train.csv`), you will probably need to navigate to [CrabNet/data/](https://github.com/sgbaird/CrabNet/tree/master/data) and explore.\n\nFinally, to download data from Materials Project directly, see [generate_elasticity_data.py](https://github.com/sparks-baird/mat_discover/blob/main/generate_elasticity_data.py).\n\n## Interactive Plots\nInteractive plots for several types of Pareto front plots can be found [here](https://sparks-baird.github.io/mat_discover/figures/).\n\n## Developing\nThis project was developed primarily in \"Python in Visual Studio Code\" using `black`, `mypy`, `pydocstyle`, `kite`, other tools, and various community extensions. Some other notable tools used in this project are:\n- Miniconda\n- `pipreqs` was used as a starting point for `requirements.txt`\n- `flit` is used to create `pyproject.toml` and publish to PyPI\n- `conda env export --from-history -f environment.yml` was used as a starting point for `environment.yml`\n- `grayskull` is used to generate `meta.yaml` for publishing to `conda-forge`\n- `conda-smithy` is used to create a feedstock for `conda-forge`\n- A variety of GitHub actions are used (see [workflows](.github/workflows))\n- `pytest` is used for testing\n- `numba` is used to accelerate the Wasserstein distance matrix computations via CPU or GPU\n\nTo help with development, you will need to [install from source](README.md#from-source). Note that when using a `conda` environment (recommended), you may avoid certain issues down the road by opening VS Code via an Anaconda command prompt and entering the command `code` (at least until the VS Code devs fix some of the issues associated with opening it \"normally\"). For example, in Windows, press the \"Windows\" key, type \"anaconda\", and open \"Anaconda Powershell Prompt (miniconda3)\" or similar. Then type `code` and press enter.\n\n## Bugs, Questions, and Suggestions\nIf you find a bug or have suggestions for documentation please [open an issue](https://github.com/sparks-baird/mat_discover/issues/new/choose). If you're reporting a bug, please include a simplified reproducer. If you have questions, have feature suggestions/requests, or are interested in extending/improving `mat_discover` and would like to discuss, please use the Discussions tab and use the appropriate category (\"Ideas\", \"Q&A\", etc.). Pull requests are welcome and encouraged.\n\n<!---\nRecommended installation through `pip` with python 3.7.\n\n```\npip install python==3.7\npip install ElM2D\n```\n\nFor the background theory, please read our paper [\"The Earth Mover’s Distance as a Metric for the Space of Inorganic Compositions\"](https://pubs.acs.org/doi/full/10.1021/acs.chemmater.0c03381)\n\n## Examples\n\nFor more interactive examples please see www.elmd.io/plots\n\n## Usage\n\n### Computing Distance Matrices\n\n### Sorting\n\n### Embedding\n\n### Saving\n\n### Cross Validation\n\n### Available Metrics\n\n## Citing\n\nIf you would like to cite this code in your work, please use the following reference\n\n```\n@article{doi:10.1021/acs.chemmater.0c03381,\nauthor = {Hargreaves, Cameron J. and Dyer, Matthew S. and Gaultois, Michael W. and Kurlin, Vitaliy A. and Rosseinsky, Matthew J.},\ntitle = {The Earth Mover’s Distance as a Metric for the Space of Inorganic Compositions},\njournal = {Chemistry of Materials},\nvolume = {32},\nnumber = {24},\npages = {10610-10620},\nyear = {2020},\ndoi = {10.1021/acs.chemmater.0c03381},\nURL = {\n        https://doi.org/10.1021/acs.chemmater.0c03381\n},\neprint = {\n        https://doi.org/10.1021/acs.chemmater.0c03381\n}\n}\n```\n--->\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mat_discover",
    "package_url": "https://pypi.org/project/mat_discover/",
    "platform": "",
    "project_url": "https://pypi.org/project/mat_discover/",
    "project_urls": {
      "Source": "https://github.com/sparks-baird/mat_discover"
    },
    "release_url": "https://pypi.org/project/mat_discover/1.3.1/",
    "requires_dist": [
      "tqdm",
      "pqdm",
      "seaborn",
      "pymatgen",
      "scipy",
      "hdbscan",
      "cython",
      "numba>=0.53.1",
      "plotly",
      "kaleido",
      "pandas",
      "matplotlib>=3.4.3",
      "joblib",
      "psutil",
      "scikit_learn",
      "umap-learn",
      "dill",
      "crabnet >=1.0.5",
      "chem_wasserstein >=1.0.2",
      "pytest ; extra == \"test\"",
      "ElM2D==0.4.1 ; extra == \"test\"",
      "pytest-cov ; extra == \"test\"",
      "pre-commit ; extra == \"test\""
    ],
    "requires_python": "",
    "summary": "Data-driven materials discovery based on composition.",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14749219,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8147c1830c3bb4eb14f22f1d4aaea03fbd06713461e57fdc0270569f5e7a47dd",
        "md5": "b1e5eff70946e746319e2afa896396d6",
        "sha256": "1ce74b50e29e1c7c85653e561e6f58f81bf35f842ca7dfeb26c68cc1d6fd3403"
      },
      "downloads": -1,
      "filename": "mat_discover-1.3.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b1e5eff70946e746319e2afa896396d6",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 39734,
      "upload_time": "2021-10-30T20:23:08",
      "upload_time_iso_8601": "2021-10-30T20:23:08.853345Z",
      "url": "https://files.pythonhosted.org/packages/81/47/c1830c3bb4eb14f22f1d4aaea03fbd06713461e57fdc0270569f5e7a47dd/mat_discover-1.3.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3d494fe7362b973d7b3ce95242aba9f07af44d32da5336ca7a2ddd4ee69089f",
        "md5": "2fc2d236dacc694c5f6a9a95b786453a",
        "sha256": "83d5110beb18c40b22a260eb74cfb938aee8f09714f3825792980dfd936ff3e5"
      },
      "downloads": -1,
      "filename": "mat_discover-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2fc2d236dacc694c5f6a9a95b786453a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8926404,
      "upload_time": "2021-10-30T20:23:17",
      "upload_time_iso_8601": "2021-10-30T20:23:17.755056Z",
      "url": "https://files.pythonhosted.org/packages/c3/d4/94fe7362b973d7b3ce95242aba9f07af44d32da5336ca7a2ddd4ee69089f/mat_discover-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}