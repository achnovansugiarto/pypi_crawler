{
  "info": {
    "author": "Harry T. J. Bevins",
    "author_email": "htjb2@cam.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Astronomy",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "==================================================\nmaxsmooth: Derivative Constrained Function Fitting\n==================================================\n\nIntroduction\n------------\n\n:maxsmooth: Derivative Constrained Function Fitting\n:Author: Harry Thomas Jones Bevins\n:Version: 1.0.0\n:Homepage: https://github.com/htjb/maxsmooth\n\nDerivative Constrained Functions and ``maxsmooth``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``maxsmooth`` is an open source software for fitting derivative constrained\nfunctions, DCFs such as Maximally Smooth Functions\n, MSFs to data sets. MSFs are functions for which there are no zero\ncrossings in derivatives of order m >= 2 within the domain of interest.\nThey are designed to prevent the loss of\nsignals when fitting out dominant foregrounds and in some cases can be used to\nhighlight systematics left in the data. More generally for DCFs the minimum\nconstrained derivative order, m can take on any value or a set of\nspecific high order derivatives can be constrained.\n\n``maxsmooth`` uses quadratic programming implemented with ``CVXOPT`` to fit\ndata subject to a linear constraint. The constraint on an MSF are not explicitly\nlinear and each constrained derivative can be positive or negative.\n``maxsmooth`` is, however, designed to test the <= 0 constraint multiplied\nby a positive or negative sign. Where a positive sign in front of the m\\ :sup:`th`\norder derivative forces the derivative\nto be negative for all x. For an N\\ :sup:`th` order polynomial ``maxsmooth`` can test\nevery available sign combination but by default it implements a 'sign-sampling'/'sign-flipping'\nalgorithm. This is detailed in the ``maxsmooth`` paper (see citation) but is summarized\nbelow.\n\nThe available sign combinations act as discrete parameter spaces all with\nglobal minima and ``maxsmooth`` is capable of finding the minimum of these global\nminima by implementing a descent algorithm which is followed by a directional\nexploration. The descent routine typically finds an approximate to the global\nminimum and then the directional exploration is a complete search\nof the sign combinations in the neighbourhood\nof that minimum. The searched region is limited by factors\nthat encapsulate enough of the neighbourhood to confidently return the global minimum.\n\nThe sign sampling method is reliant on the problem being 'well defined' but this\nis not always the case and it is in these instances possible to run the code testing\nevery available sign combination on the constrained derivatives. For a definition of\na 'well defined' problem and it's counter part see the ``maxsmooth`` paper.\n\n``maxsmooth`` features a built in library of DCFs or\nallows the user to define their own. The addition of possible inflection points\nand zero crossings in higher order derivatives is also available to the user.\nThe software has been designed with these two\napplications in mind and is a simple interface.\n\nExample Fit\n~~~~~~~~~~~\n\nShown below is an example MSF fit performed with ``maxsmooth`` to data that\nfollows a y = x\\ :sup:`2.5` power law with a randomly generated Gaussian\nnoise with a standard deviation 0.02. The top panel shows the data and the\nbottom panel shows the residual\nafter subtraction of the MSF fit. The software using one of the built in DCF models\nand fitting normalised data is shown to be capable of recovering the\nrandom noise.\n\n.. image:: ../images/README.png\n  :width: 400\n  :align: center\n\nInstallation\n~~~~~~~~~~~~\n\nLicence and Citation\n~~~~~~~~~~~~~~~~~~~~\n\nThe software is free to use on the MIT open source license. However if you use\nthe software for academic purposes we request that you cite the ``maxsmooth``\npaper. ::\n\n  H. T. J. Bevins et al., in prep.\n\nDocumentation\n~~~~~~~~~~~~~\nThe documentation can be compiled locally from the git repository and requires\n`sphinx <https://pypi.org/project/Sphinx/>`__ to be installed.\nYou can do this via:\n\n.. code::\n\n  cd docs/\n  make html\n\nor\n\n.. code::\n\n  cd docs/\n  make latexpdf\n\nThe resultant docs can be found in the docs/_build/html/ and docs/_build/latex/\nrespectively.\n\nRequirements\n~~~~~~~~~~~~\n\nThe code was written in Python 3.6 but should be backward compatible with\nPython 2 although this has not been thoroughly tested.\n\nTo run the code you will need the following additional packages:\n\n- `matplotlib <https://pypi.org/project/matplotlib/>`__\n- `numpy <https://pypi.org/project/numpy/>`__\n- `CVXOPT <https://pypi.org/project/cvxopt/>`__\n- `scipy <https://pypi.org/project/scipy/>`__\n- `progressbar <https://pypi.org/project/progressbar/>`__\n\nTo compile the documentation locally you will need:\n\n- `sphinx <https://pypi.org/project/Sphinx/>`__\n- `numpydoc <https://pypi.org/project/numpydoc/>`__\n\nTo run the test suit you will need:\n\n- `pytest <https://pypi.org/project/pytest/>`__\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/htjb/maxsmooth",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maxsmooth",
    "package_url": "https://pypi.org/project/maxsmooth/",
    "platform": "",
    "project_url": "https://pypi.org/project/maxsmooth/",
    "project_urls": {
      "Homepage": "https://github.com/htjb/maxsmooth"
    },
    "release_url": "https://pypi.org/project/maxsmooth/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "maxsmooth:Derivative Constrained Function Fitting",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11529534,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4602a1b54028152da443f5beb70583b5ef4ffbc9790156c2febfd4ef05bc1ed3",
        "md5": "30ff73058f335393a0eba4f78603ecb4",
        "sha256": "bab2902a3bce8a9b3439ad1235543968128fa2d3f322feca6af5403f2ebefd2e"
      },
      "downloads": -1,
      "filename": "maxsmooth-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "30ff73058f335393a0eba4f78603ecb4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23360,
      "upload_time": "2020-07-10T15:00:05",
      "upload_time_iso_8601": "2020-07-10T15:00:05.588876Z",
      "url": "https://files.pythonhosted.org/packages/46/02/a1b54028152da443f5beb70583b5ef4ffbc9790156c2febfd4ef05bc1ed3/maxsmooth-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}