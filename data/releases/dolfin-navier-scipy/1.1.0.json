{
  "info": {
    "author": "Jan Heiland",
    "author_email": "jnhlnd@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dolfin_navier_scipy\n\n[![DOI](https://zenodo.org/badge/15728657.svg)](https://zenodo.org/badge/latestdoi/15728657)\n[![PyPI version](https://badge.fury.io/py/dolfin-navier-scipy.png)](https://badge.fury.io/py/dolfin-navier-scipy)\n\nThis python module `dns` provides an interface between the FEM toolbox [`FEniCS`](www.fenicsproject.org) and [`SciPy`](www.scipy.org) in view of simulation and control of incompressible flows. Basically, `FEniCS` is used to discretize the *incompressible Navier-Stokes equations* in space. Then `dns` makes the discretized operators available in `SciPy` for use in model reduction, simulation, or control and optimization. \n\n`dns` also contains a solver for the steady state and time dependent problems.\n\n## Quick Start\n\nTo get started, create the needed subdirectories and run one of the `tests/time_dep_nse_.py` files, e.g.\n\n```\npip install sadptprj_riclyap_adi\ncd tests\nmkdir data\nmkdir results\n# export PYTHONPATH=\"$PYTHONPATH:path/to/repo/\"  # add the repo to the path\n# pip install dolfin_navier_scipy                # or install the module using pip\npython3 time_dep_nse_expnonl.py\n```\n\nThen, to examine the results, launch\n```\nparaview results/vel_TH__timestep.pvd\n```\n\n## Test Cases and Examples\n\nA selection:\n\n * `tests/mini_setup.py`: a minimal setup for a steady-state simulation\n * `tests/steadystate_schaefer-turek_2D-1.py`: the 2D steady-state cylinder wake benchmark by *Sch&auml;fer/Turek*\n * `tests/steadystate_rotcyl.py`: the 2D cylinder wake with a freely rotating cylinder as benchmarked in *Richter et al.*\n * `tests/time_dep_nse_.py`: time integration with Picard and Newton linearization\n * `tests/time_dep_nse_expnonl.py`: time integration with explicit treatment of the nonlinearity\n * `tests/time_dep_nse_bcrob.py`: time integration of the cylinder wake with boundary controls\n * `tests/time_dep_nse_krylov.py`: time integration with iterative solves of the state equations via [`krypy`](https://github.com/andrenarchy/krypy)\n * `tests/time_dep_nse_double_rotcyl_bcrob.py`: rotating double cylinder via\n   Robin boundary conditions\n\n## Dependencies\n\n * dolfin interface to [FEniCS](https://fenicsproject.org/) -- tested with `v2019.2.0`, `v2018.1.0`, `v2017.2` \n * [sadptprj_riclyap_adi](https://github.com/highlando/sadptprj_riclyap_adi)\n\nThe latter is my home-brew module that includes the submodule `lin_alg_utils` with routines for solving the saddle point problem as it arises in the `(v,p)` formulation of the NSE. \n\n**Note**: the branch `lau-included` already contains the module `sadptprj_riclyap_adi`\n\n## Documentation\n\nDocumentation of the code goes [here](http://dolfin-navier-scipy.readthedocs.org/en/latest/index.html).\n\n## Installation as Module\n\n```\npip install dolfin_navier_scipy\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/highlando/dolfin_navier_scipy",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dolfin-navier-scipy",
    "package_url": "https://pypi.org/project/dolfin-navier-scipy/",
    "platform": "",
    "project_url": "https://pypi.org/project/dolfin-navier-scipy/",
    "project_urls": {
      "Homepage": "https://github.com/highlando/dolfin_navier_scipy"
    },
    "release_url": "https://pypi.org/project/dolfin-navier-scipy/1.1.0/",
    "requires_dist": [
      "numpy",
      "scipy",
      "sadptprj-riclyap-adi"
    ],
    "requires_python": "",
    "summary": "A Scipy-Fenics interface for incompressible Navier-Stokes",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16833122,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c69e7250dc34d2d39d6dde1cbaf16f70741a04e9b96bbe81990d5009e558681c",
        "md5": "f0c7f879c8f1cd4cd8979c85e37db278",
        "sha256": "e5715091ad905adc2901d066f868dfe53264c4c7070684cd1fec6d57310b7fc3"
      },
      "downloads": -1,
      "filename": "dolfin_navier_scipy-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f0c7f879c8f1cd4cd8979c85e37db278",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 55922,
      "upload_time": "2021-01-11T10:33:56",
      "upload_time_iso_8601": "2021-01-11T10:33:56.365187Z",
      "url": "https://files.pythonhosted.org/packages/c6/9e/7250dc34d2d39d6dde1cbaf16f70741a04e9b96bbe81990d5009e558681c/dolfin_navier_scipy-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "434961db004012d9b8cb7ed2dcc9dd57cb80cd6682fc7f57889053d71a493073",
        "md5": "43e58957d9703e6e7c318fcb48c62d04",
        "sha256": "52fc17470b7e9c387c11b965190505cfd7775266c8bdf16668aca31d06fca9b1"
      },
      "downloads": -1,
      "filename": "dolfin_navier_scipy-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "43e58957d9703e6e7c318fcb48c62d04",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39838,
      "upload_time": "2021-01-11T10:33:57",
      "upload_time_iso_8601": "2021-01-11T10:33:57.886868Z",
      "url": "https://files.pythonhosted.org/packages/43/49/61db004012d9b8cb7ed2dcc9dd57cb80cd6682fc7f57889053d71a493073/dolfin_navier_scipy-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}