{
  "info": {
    "author": "Thanasis Mattas",
    "author_email": "atmattas@physics.auth.gr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MattFlow\n\nA CFD python package for the shallow water equations.\n\nMattFlow simulates the surface of the water after any initial conditions, such as drops or stones falling on.\n___\n\n\n| requirements      | os        |\n| ----------------  | --------- |\n| python 3          | GNU/Linux |\n| numpy 1.16.4      | Windows   |\n| matplotlib 3.1.1  |           |\n| ffmpeg (optional) |           |\n\n\n## How to install & run MattFlow\n\n1. anaconda environment (recomended)\n\n```bash\n$ mkdir mattflow\n$ cd mattflow\n$ conda create --name mattflows python=3\n$ conda activate mattflow\n$ pip install mattflow\n$ mattflow\n```\n\n2. venv (python>=3.3)  \n\n```bash\n$ mkdir mattflow\n$ cd mattflow\n$ python3 -m venv mattflow_env\n$ source mattflow_env/bin/activate\n$ pip install mattflow\n$ mattflow\n```\n\n3. pip\n\n```bash\n$ mkdir mattflow\n$ cd mattflow\n$ pip install --user mattflow\n$ mattflow\n```\n\n\n## Swallow Water Equations\n\nSWE is a simpified CFD problem which models the surface of the water, with the assumption  \nthat the horizontal length scale is much greater than the vertical length scale.  \n\nSWE is a coupled system of 3 hyperbolic partial deferential equations, that derive from  \nconservation of mass and conservation of linear momentum (Navier-Stokes) equations, in  \ncase of a horizontal stream bed, with no Coriolis, frictional or viscours forces ([wiki]).\n\n<img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/9b9d481407c0c835525291740de8d1c446265ce2\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -18ex; width:46ex; height:19ex;\" alt=\"{\\displaystyle {\\begin{aligned}{\\frac {\\partial (\\rho \\eta )}{\\partial t}}&amp;+{\\frac {\\partial (\\rho \\eta u)}{\\partial x}}+{\\frac {\\partial (\\rho \\eta v)}{\\partial y}}=0,\\\\[3pt]{\\frac {\\partial (\\rho \\eta u)}{\\partial t}}&amp;+{\\frac {\\partial }{\\partial x}}\\left(\\rho \\eta u^{2}+{\\frac {1}{2}}\\rho g\\eta ^{2}\\right)+{\\frac {\\partial (\\rho \\eta uv)}{\\partial y}}=0,\\\\[3pt]{\\frac {\\partial (\\rho \\eta v)}{\\partial t}}&amp;+{\\frac {\\partial (\\rho \\eta uv)}{\\partial x}}+{\\frac {\\partial }{\\partial y}}\\left(\\rho \\eta v^{2}+{\\frac {1}{2}}\\rho g\\eta ^{2}\\right)=0.\\end{aligned}}}\">\n\nwhere:  \n_η_ : height  \n_u_ : velocity along the x axis  \n_υ_ : velocity along the y axis  \n_ρ_ : density  \n_g_ : gravity acceleration\n\n\n## MattFlow structure <span style=\"font-size:small;\">[jupyter notebook]</span>\n\n0. configuration of the simulation via a config file\n1. pre-process  \nstructured/cartesian mesh\n2. solution  \n   supported solvers:  \n   - [Lax-Friedrichs] Reiman\n   &nbsp;&nbsp;                | O(Δt, Δx<sup>2</sup>, Δy<sup>2</sup>)  \n   - 2-stage [Rugne-Kutta]\n   &nbsp; &nbsp; &nbsp;        | O(Δt<sup>2</sup>, Δx<sup>2</sup>, Δy<sup>2</sup>)\n   &ensp;| default  \n   - [MacCormack]\n   &emsp; &emsp; &emsp; &emsp; | O(Δt<sup>2</sup>, Δx<sup>2</sup>, Δy<sup>2</sup>)\n   &ensp;| experimental\n3. post-processing  \n   matplotlib animation\n\n## Additional configurations\n\n- mesh sizing\n- domain sizing\n- initial conditions (single drop, multiple drops, rain)\n- boundary conditions (currently: reflective)\n- solver\n- plotting style\n- animation options\n\nCurrently, you can configure the simulation at the _config_ module  \n\n## TODO\n\n1. exceptions\n2. pytest\n3. linting\n4. Simple API to configure the simulation\n5. Implementation of higher order schemes\n6. Addition of source terms\n7. Addition of viscous models\n8. Moving core to C++, Cython or Numba\n9. Support moving objects inside the domain\n10. Unstructured mesh\n11. Extent to 3D CFD\n\n***Start the flow!***\n\n>(C) 2019, Thanasis Mattas  \n>atmattas@physics.auth.gr\n\n\n[//]: # \"links\"\n\n[wiki]: <https://en.wikipedia.org/wiki/Shallow_water_equations>\n[Lax-Friedrichs]: <https://en.wikipedia.org/wiki/Lax%E2%80%93Friedrichs_method>\n[Rugne-Kutta]: <https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods>\n[Lax-Wendroff]: <https://en.wikipedia.org/wiki/Lax%E2%80%93Wendroff_method>\n[MacCormack]: <https://en.wikipedia.org/wiki/MacCormack_method>\n[jupyter notebook]: <https://colab.research.google.com/github/ThanasisMattas/mattflow/blob/master/notebooks/mattflow_notebook.ipynb#scrollTo=sqSJYpEwmJN3>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ThanasisMattas/mattflow.git",
    "keywords": "",
    "license": "GNU GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mattflow",
    "package_url": "https://pypi.org/project/mattflow/",
    "platform": "",
    "project_url": "https://pypi.org/project/mattflow/",
    "project_urls": {
      "Homepage": "https://github.com/ThanasisMattas/mattflow.git"
    },
    "release_url": "https://pypi.org/project/mattflow/1.0.4/",
    "requires_dist": [
      "numpy (>=1.16.4)",
      "matplotlib (>=3.1.1)",
      "ffmpeg ; extra == 'write_video'"
    ],
    "requires_python": "",
    "summary": "A CFD python package for the shallow water equations",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10759201,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1050a54fe4c3fc427e5d037c60f6538d2e19deb0b7808b4d102b17cd2e61ccd3",
        "md5": "68dd9df1dd64d529b227e635a2403968",
        "sha256": "398d0b4ed112f012901166ae9f84efcafb25cfa2c67a287f0a75e3c00ee6281b"
      },
      "downloads": -1,
      "filename": "mattflow-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "68dd9df1dd64d529b227e635a2403968",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 33665,
      "upload_time": "2019-08-11T13:16:23",
      "upload_time_iso_8601": "2019-08-11T13:16:23.685196Z",
      "url": "https://files.pythonhosted.org/packages/10/50/a54fe4c3fc427e5d037c60f6538d2e19deb0b7808b4d102b17cd2e61ccd3/mattflow-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "615c961f714dbb458d2e0d7eb19d7ed911795a1843c1d612b8655d437385993e",
        "md5": "8f51a337c403b2e40403284e2560ebc2",
        "sha256": "6df312da6f1071c1dea96336d2a44bab6cf1f92a69ed3fed21d57bd927c4987c"
      },
      "downloads": -1,
      "filename": "mattflow-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "8f51a337c403b2e40403284e2560ebc2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16536,
      "upload_time": "2019-08-11T13:16:25",
      "upload_time_iso_8601": "2019-08-11T13:16:25.826146Z",
      "url": "https://files.pythonhosted.org/packages/61/5c/961f714dbb458d2e0d7eb19d7ed911795a1843c1d612b8655d437385993e/mattflow-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}