{
  "info": {
    "author": "Athanasios Mattas",
    "author_email": "thanasismatt@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MattFlow\n\n![Conda] ![Lincense]\n\nA CFD python package for the Shallow Water Equations\n\nMattFlow simulates the surface of the water after any initial conditions, such as drops or stones falling on.\n\n<img src=\"https://media.giphy.com/media/jpVKPxzBiGoSvNYUrY/giphy.gif\" width=\"265\" height=\"150\" /> <img src=\"https://media.giphy.com/media/VJNqBY7uKP3r0AvCcp/giphy.gif\" width=\"265\" height=\"150\" /> <img src=\"https://media.giphy.com/media/QxYpANpE5snKSrdLJ5/giphy.gif\" width=\"265\" height=\"150\" />\n\n___\n\n| requirements         | os        |\n| -------------------- | --------- |\n| python3              | GNU/Linux |\n| numpy >= 1.18.5      | Windows   |\n| matplotlib >= 3.3.1  | OSX       |\n| numba >= 0.51.2      |           |\n| joblib >= 0.13.2     |           |\n| ffmpeg (optional)    |           |\n\n## Install & Run\n\n```bash\n$ conda create --name mattflow -y\n$ conda activate mattflow\n$ conda install -c mattasa mattflow\n$ mattflow\n```\n\n## Swallow Water Equations\n\nSWE is a simpified CFD problem which models the surface of the water, with the assumption<br />\nthat the horizontal length scale is much greater than the vertical length scale.\n\nSWE is a coupled system of 3 hyperbolic partial differential equations, that derive from the<br />\nconservation of mass and the conservation of linear momentum (Navier-Stokes) equations, in<br />\ncase of a horizontal stream bed, with no Coriolis, frictional or viscours forces ([wiki]).\n\n<img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/9b9d481407c0c835525291740de8d1c446265ce2\" class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"vertical-align: -18ex; width:46ex; height:19ex;\" alt=\"{\\displaystyle {\\begin{aligned}{\\frac {\\partial (\\rho \\eta )}{\\partial t}}&amp;+{\\frac {\\partial (\\rho \\eta u)}{\\partial x}}+{\\frac {\\partial (\\rho \\eta v)}{\\partial y}}=0,\\\\[3pt]{\\frac {\\partial (\\rho \\eta u)}{\\partial t}}&amp;+{\\frac {\\partial }{\\partial x}}\\left(\\rho \\eta u^{2}+{\\frac {1}{2}}\\rho g\\eta ^{2}\\right)+{\\frac {\\partial (\\rho \\eta uv)}{\\partial y}}=0,\\\\[3pt]{\\frac {\\partial (\\rho \\eta v)}{\\partial t}}&amp;+{\\frac {\\partial (\\rho \\eta uv)}{\\partial x}}+{\\frac {\\partial }{\\partial y}}\\left(\\rho \\eta v^{2}+{\\frac {1}{2}}\\rho g\\eta ^{2}\\right)=0.\\end{aligned}}}\">\n\nwhere:<br />\n_η_ : height<br />\n_u_ : velocity along the x axis<br />\n_υ_ : velocity along the y axis<br />\n_ρ_ : density<br />\n_g_ : gravity acceleration\n\n## Structure\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ThanasisMattas/mattflow/blob/master/notebooks/mattflow_notebook.ipynb)\n\n0. configuration of the simulation via a config file\n1. pre-process<br />\nstructured/cartesian mesh\n2. solution<br />\n   supported solvers:\n   - [Lax-Friedrichs] Riemann\n   &nbsp;&nbsp;                | O(Δt, Δx<sup>2</sup>, Δy<sup>2</sup>)\n   - 2-stage [Runge-Kutta]\n   &nbsp; &nbsp; &nbsp; &nbsp; | O(Δt<sup>2</sup>, Δx<sup>2</sup>, Δy<sup>2</sup>)\n   &ensp;| default\n   - [MacCormack]\n   &emsp; &emsp; &emsp; &emsp; &nbsp; | O(Δt<sup>2</sup>, Δx<sup>2</sup>, Δy<sup>2</sup>)\n   &ensp;| experimental\n3. post-processing<br />\n   matplotlib animation\n\n## Configuration options\n\n- mesh sizing\n- domain sizing\n- initial conditions (single drop, multiple drops, rain)\n- boundary conditions (currently: reflective)\n- solver\n- multiprocessing\n- plotting style\n- animation options\n\nCurrently, the simulation can be configured at the ```config.py``` module.\n\n## TODO\n\n1. CI\n2. API (TUI-GUI)\n3. Consider Cythonizing or moving to C++\n4. Higher order schemes\n5. Include source terms\n6. Include viscous models\n7. Algorithm that converts every computational second to a real-time second,\n   modifying the fps at<br />the post-processing animation, because each\n   iteration uses different time-step (CFL condition).\n8. Moving objects inside the domain\n9. Unstructured mesh\n10. 3D CFD\n\n\n## License\n[GNU General Public License v3.0]\n<br />\n<br />\n\nSpecial thanks to [Marios Mitalidis] for the valuable feedback.\n\n<br />\n\n***Start the flow!***\n\n\n>(C) 2019, Athanasios Mattas<br />\n>thanasismatt@gmail.com\n\n\n[//]: # \"links\"\n\n\n[Conda]: <https://img.shields.io/conda/v/mattasa/mattflow>\n[Lincense]: <https://img.shields.io/github/license/ThanasisMattas/mattflow>\n[wiki]: <https://en.wikipedia.org/wiki/Shallow_water_equations>\n[Lax-Friedrichs]: <https://en.wikipedia.org/wiki/Lax%E2%80%93Friedrichs_method>\n[Runge-Kutta]: <https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods>\n[Lax-Wendroff]: <https://en.wikipedia.org/wiki/Lax%E2%80%93Wendroff_method>\n[MacCormack]: <https://en.wikipedia.org/wiki/MacCormack_method>\n[GNU General Public License v3.0]: <https://github.com/ThanasisMattas/mattflow/blob/master/COPYING>\n[Marios Mitalidis]: <https://github.com/mmitalidis>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ThanasisMattas/mattflow.git",
    "keywords": "",
    "license": "GNU GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mattflow",
    "package_url": "https://pypi.org/project/mattflow/",
    "platform": "",
    "project_url": "https://pypi.org/project/mattflow/",
    "project_urls": {
      "Homepage": "https://github.com/ThanasisMattas/mattflow.git"
    },
    "release_url": "https://pypi.org/project/mattflow/1.3.7/",
    "requires_dist": [
      "numpy (>=1.18.5)",
      "matplotlib (>=3.3.1)",
      "joblib (>=0.13.2)",
      "ffmpeg ; extra == 'write_video'"
    ],
    "requires_python": "",
    "summary": "A CFD python package for the Shallow Water Equations",
    "version": "1.3.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10759201,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e67121a66a17521d3af6da61170db987cd0540a1c2652fe566b5d26989f1a31",
        "md5": "542c42246ac1a04119c3d290b7e93215",
        "sha256": "3b7324fc1e5eeae84a2e4c055adc5ea11846e07ef36b2c92834639ab4c46263f"
      },
      "downloads": -1,
      "filename": "mattflow-1.3.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "542c42246ac1a04119c3d290b7e93215",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 42335,
      "upload_time": "2020-12-06T11:14:48",
      "upload_time_iso_8601": "2020-12-06T11:14:48.036398Z",
      "url": "https://files.pythonhosted.org/packages/0e/67/121a66a17521d3af6da61170db987cd0540a1c2652fe566b5d26989f1a31/mattflow-1.3.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "652e010a9789bb14f6037995955f00cf300eb689b84dfac724c025ed83f33fca",
        "md5": "d136856f837e2d42ddf967b13f48cffb",
        "sha256": "da1ce3317e412c32b00b48669784ffaae5e5cf6567af587d5e1be9c1b0326da9"
      },
      "downloads": -1,
      "filename": "mattflow-1.3.7.tar.gz",
      "has_sig": false,
      "md5_digest": "d136856f837e2d42ddf967b13f48cffb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24306,
      "upload_time": "2020-12-06T11:14:58",
      "upload_time_iso_8601": "2020-12-06T11:14:58.755101Z",
      "url": "https://files.pythonhosted.org/packages/65/2e/010a9789bb14f6037995955f00cf300eb689b84dfac724c025ed83f33fca/mattflow-1.3.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}