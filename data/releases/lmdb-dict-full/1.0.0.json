{
  "info": {
    "author": null,
    "author_email": "Jesse London <jesselondon@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Database",
      "Topic :: Database :: Front-Ends",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# lmdb-dict\n\n[![PyPI - Version](https://img.shields.io/pypi/v/lmdb-dict.svg)](https://pypi.org/project/lmdb-dict)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/lmdb-dict.svg)](https://pypi.org/project/lmdb-dict)\n\n**The full-featured `dict` interface to the LMDB \"Lightning\" Database.**\n\n* Internally optimized via `lmdb` library cursors. Optional LRU caching of deserialized values. Thread-safe operations. No added reserved keys, *etc.*\n\n* Provides value-serializing `SafeLmdbDict` and str-only `StrLmdbDict`, as well as abstract base class `LmdbDict` for customization of database encoding.\n\n* Unique-key, labeled and unlabeled databases and read-write sessions supported.\n\n-----\n\n**Table of Contents**\n\n- [Installation](#installation)\n- [Use](#use)\n  - [General use](#general-use)\n  - [Caching](#caching)\n  - [Str-only](#str-only)\n- [License](#license)\n\n## Installation\n\n```console\npip install lmdb-dict\n```\n\n## Use\n\n### General use\n\n`SafeLmdbDict` provides the full `dict` interface to a LMDB database at a given filesystem path. (An empty database is automatically provisioned within a directory without one.)\n\nValues are automatically serialized (deserialized) and compressed (decompressed) using [PyYAML](https://pypi.org/project/PyYAML/) and [zlib](https://docs.python.org/3/library/zlib.html).\n\n```python\nfrom lmdb_dict import SafeLmdbDict\n\ndbdict = SafeLmdbDict('/path/to/db/directory/0/')\n\ndbdict['aaa'] = {'values': [0, 1, 'x']}\n```\n\nOne or more named databases are also supported.\n\nLMDB requires that the maximum number of named databases is specified up-front. Below we'll only need two named databases.\n\n```python\nusers = SafeLmdbDict('/path/to/db/directory/1/', name='users', max_dbs=2)\n\nhats = SafeLmdbDict('/path/to/db/directory/1/', name='hats', max_dbs=2)\n```\n\nNote that it would otherwise be unsafe to hold open multiple `lmdb` client objects within a single process at once. This is handled automatically: a weak reference is kept to the client opened for each filesystem path and reused for each `LmdbDict` requiring it.\n\n### Caching\n\nCaching of LMDB itself *should not be necessary*. The database \"fully exploits the operating system’s buffer cache\" and memory mapping [[ref]](https://lmdb.readthedocs.io/en/release/).\n\nMoreover, `lmdb-dict` makes every effort to use `lmdb` efficiently, such that the user need not be concerned with undue overhead of interacting with the database-backed dictionary.\n\nThat said: the value serialization layer of `SafeLmdbDict` is another matter. Given sufficiently hefty values to deserialize, it *may* be worthwhile to engage the `lmdb-dict` caching layer, along with the trade-offs that it entails.\n\n#### Caveats\n\n**`lmdb-dict` caching is thread-safe**\n\nThis is achieved with behind-the-scenes locking – narrowly applied to singular keys where feasible – but the small overhead of which applies when caching.\n\n**`lmdb-dict` caching is *not* (yet) *automatically* process-safe**\n\nCaching is thread-safe thanks to thread locks and (again) weak references to caches which must be shared across dictionaries backed by the same databases.\n\nAchieving the same under a multiprocessing regime would be another matter.\n\nUsers may nonetheless make use of `lmdb-dict` while multiprocessing, either without caching or with thoughtful application of caches across processes.\n\n#### Options\n\nCaching is built into all concrete subclasses of `LmdbDict`; however, it is disabled by default, in that it is set to `DummyCache` – a mapping capable of storing zero items.\n\nSubclasses of `LmdbDict` check their cache for its maximum capacity by means of: `getattr(cache, 'maxsize', …)`. A cache reporting `maxsize=0` – such as the `DummyCache` – will be given *dummy locks*, such that locking is disabled for this dictionary.\n\nA cache reporting any other `maxsize` – or lacking this property – is treated as a proper cache, and locking will be applied.\n\nCaching may be specified – to `SafeLmdbDict` for example – via an instance, a class, or any callable returning an instance of a mapping for use as a deserialization cache. Either an instance or a class are strongly recommended, as these enable checking any cache retrieved from the weak reference registry against the user's instantiation argument.\n\n```python\nfrom lmdb_dict.cache import LRUCache128\n\nSafeLmdbDict('/path/to/db/directory/', cache=LRUCache128)\n```\n\nAbove, we've specified that our `SafeLmdbDict` should cache deserialized values using an instance of `LRUCache128` – that is, a subclass of the `LRUCache` provided by [cachetools](https://pypi.org/project/cachetools/). `LRUCache128` distinguishes itself only in that it requires no initialization arguments – a requirement of supplying a callable in lieu of a cache instance – and it sets `maxsize=128`.\n\nAs a shortcut to the above, `lmdb-dict` provides `CachedLmdbDict`:\n\n```python\nfrom lmdb_dict import CachedLmdbDict\n\nCachedLmdbDict('/path/to/db/directory/')\n```\n\n`CachedLmdbDict` differs from other subclasses of `LmdbDict` in that it defaults to caching via `LRUCache128`. Other caches may be specified via the `cache` argument. Supplying an entity with property `maxsize=0` – such as the `DummyCache` – will raise a `TypeError`.\n\n### Str-only\n\nThe above concrete subclasses of `LmdbDict` support arbitrary serializable values in order to best mimic the functionality of the Python `dict`.\n\nFor use-cases supporting str-only (and/or bytes-only) values, all of the above concerns over serialization, caching and locking may be sidestepped.\n\n`StrLmdbDict` provides the same full-featured `dict` interface to LMDB, but only for values of type `str` and `bytes`.\n\n```python\nfrom lmdb_dict import StrLmdbDict\n\nStrLmdbDict('/path/to/db/directory/')\n```\n\n`StrLmdbDict` further differs from other subclasses of `LmdbDict` in that it accepts no `cache` argument, and may not perform caching.\n\n## License\n\n`lmdb-dict` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "dict,lmdb",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "lmdb-dict-full",
    "package_url": "https://pypi.org/project/lmdb-dict-full/",
    "platform": null,
    "project_url": "https://pypi.org/project/lmdb-dict-full/",
    "project_urls": {
      "Documentation": "https://github.com/chicago-cdac/lmdb-dict#readme",
      "Issues": "https://github.com/chicago-cdac/lmdb-dict/issues",
      "Source": "https://github.com/chicago-cdac/lmdb-dict"
    },
    "release_url": "https://pypi.org/project/lmdb-dict-full/1.0.0/",
    "requires_dist": [
      "cachetools~=5.3",
      "dickens~=2.0",
      "lmdb>=1.4",
      "pyyaml>=6"
    ],
    "requires_python": ">=3.8",
    "summary": "Full-featured Python dict interface to the LMDB \"Lightning\" Database.",
    "version": "1.0.0",
    "yanked": true,
    "yanked_reason": "distribution rename to accomodate prior work (which this library intends to supersede)"
  },
  "last_serial": 17514745,
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "2c5ae52e5ca135530742d47bedbff751c9ed46615a1878262ec9f613245df309",
        "md5": "c524a51a1b34ca49d3fe83ec5f2da58c",
        "sha256": "b9a3db44e8cf4e5f3c0f812c12dabd3ab82304ffdd286e816eaf0bbe9f35b0de"
      },
      "downloads": -1,
      "filename": "lmdb_dict_full-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c524a51a1b34ca49d3fe83ec5f2da58c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 18475,
      "upload_time": "2023-03-30T18:32:55",
      "upload_time_iso_8601": "2023-03-30T18:32:55.432537Z",
      "url": "https://files.pythonhosted.org/packages/2c/5a/e52e5ca135530742d47bedbff751c9ed46615a1878262ec9f613245df309/lmdb_dict_full-1.0.0-py3-none-any.whl",
      "yanked": true,
      "yanked_reason": "distribution rename to accomodate prior work (which this library intends to supersede)"
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "4ba7c2a2b5098a4db1c4f80035f15447f467f790f3d2f596b12815e4042e20a6",
        "md5": "926af89437f960678bd0e5d2d848d0f6",
        "sha256": "c97001a1c09697eecfcdb69433ad58bdb60bc074428e91758fdd52d88278e00a"
      },
      "downloads": -1,
      "filename": "lmdb_dict_full-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "926af89437f960678bd0e5d2d848d0f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 14614,
      "upload_time": "2023-03-30T18:32:57",
      "upload_time_iso_8601": "2023-03-30T18:32:57.799035Z",
      "url": "https://files.pythonhosted.org/packages/4b/a7/c2a2b5098a4db1c4f80035f15447f467f790f3d2f596b12815e4042e20a6/lmdb_dict_full-1.0.0.tar.gz",
      "yanked": true,
      "yanked_reason": "distribution rename to accomodate prior work (which this library intends to supersede)"
    }
  ],
  "vulnerabilities": []
}