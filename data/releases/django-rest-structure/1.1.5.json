{
  "info": {
    "author": "Aref Mousakhani",
    "author_email": "aref.mousakhani@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Django Rest Structure\n\nThis app make your rest api application simple\n\n# Document\n\n## 1. Install by running\n`pip install django-rest-structure`\n___\n## 2. Add middleware to your `MIDDLEWARE` (or `MIDDLEWARE_CLASSES`) setting like this:\n\n```python\nMIDDLEWARE = (\n   'django_rest_structure.middlewares.middleware.RequestHandlerMiddleware',\n   ...\n)\n```\n___\n## 3. Add exception handler to your `REST_FRAMEWORK` setting like this:\n\n```python\nREST_FRAMEWORK = {\n    ...\n    'EXCEPTION_HANDLER': 'django_rest_structure.results.exception.exception_handler'\n    ...\n}\n```\n###### then add to `YOUR-PROJECT/urls.py`\n```python\nhandler404 = 'django_rest_structure.api.views.error_view_404'\nhandler500 = 'django_rest_structure.api.views.error_view_500'\nhandler403 = 'django_rest_structure.api.views.error_view_403'\nhandler400 = 'django_rest_structure.api.views.error_view_400'\n\n```\n___\n\n\n## 4. Create your result messages like:\n```python\nfrom django_rest_structure.results.codes import ResultMessageStructure\nfrom django_rest_structure.results.exception import ResultMessages\n\nclass MyCustomResultMessages(ResultMessages):\n    CUSTOM_ERROR = ResultMessageStructure(1, 'My Custom Error', False, 500)\n    # `1` is your result code\n    # `My Custom Error` is your result message\n    # `False` define result is success or not\n    # `500` is http response code\n```\n___\n\n## 5. Create your custom exception like:\n```python\nfrom django_rest_structure.results.exception import Err\n\nclass MyCustomError(MyCustomResultMessages, Err):\n    def __init__(self, *args, **kwargs):\n        super(MyCustomError, self).__init__(*args, **kwargs)\n\n```\n___\n## 6. Now you should create your views like:\n\n```python\nfrom django_rest_structure.api.views import BaseApiView\n\nclass MyView(BaseApiView):\n    def post_method(self, request, *args, **kwargs):\n        result = {}\n        return ResponseStructure(ResultMessages.GET_SUCCESSFULLY, result)\n```\n#### sample 1:\n###### request data: \n\n```json\n{}\n```\n###### response data: \n```json\n{\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Done\",\n        \"is_success\": true\n    },\n    \"result\": {}\n}\n```\n\n## 7. Create your serializers like:\n\n### 1. simple serializers \n\n```python\nfrom django_rest_structure.api.views import BaseApiView\nfrom django_rest_structure.api.serializers import BaseSerializer\nfrom rest_framework import serializers\n\nclass MySerializer(BaseSerializer):\n    my_field = serializers.CharField()\n\n    def get_response(self):\n        # the request available on self.request\n        response_data = {\n            'my_field': self.validated_data['my_field']\n        }\n        return ResponseStructure(ResultMessages.GET_SUCCESSFULLY, response_data)\n\n\n\nclass MyView(BaseApiView):\n    def post_method(self, request, *args, **kwargs):\n        return MySerializer(request.data, check_is_valid=True, request=request).get_response()\n\n\n```\n#### sample 1:\n###### request data: \n```json\n{\n    \"my_field\": \"test\"\n}\n```\n###### response data: \n```json\n{\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Done\",\n        \"is_success\": true\n    },\n    \"result\": {\n        \"my_field\": \"test\"\n    }\n}\n```\n### 2. serializer with custom validation\n```python\nfrom django_rest_structure.api.views import BaseApiView\nfrom django_rest_structure.api.serializers import BaseSerializer\nfrom django_rest_structure.api.validations import StrFieldValidation\nfrom rest_framework import serializers\n\ndef my_field_vld(value, **extra_params):\n    return value.upper()\n\n\nclass MySerializer(BaseSerializer):\n    # returned object from StrFieldValidation is available on validated_data\n    my_field = serializers.CharField(validators=[StrFieldValidation(\n        regex=r'^[A-Za-z]+$',\n        error_message='just enter alphabet',\n        extra_function=my_field_vld\n    )])\n\n    def get_response(self):\n        # the request available on self.request\n        response_data = {\n            'my_field': self.validated_data['my_field']\n        }\n        return ResponseStructure(ResultMessages.GET_SUCCESSFULLY, response_data)\n\n\nclass MyView(BaseApiView):\n    def post_method(self, request, *args, **kwargs):\n        return MySerializer(request.data, check_is_valid=True, request=request).get_response()\n\n```\n#### sample 1:\n###### request data: \n```json\n{\n    \"my_field\": \"@\"\n}\n```\n###### response data: \n```json\n{\n    \"status\": {\n        \"code\": 406,\n        \"message\": \"Entered Data Is Not Valid\",\n        \"is_success\": false\n    },\n    \"result\": {\n        \"my_field\": [\n            \"enter just alphabet\"\n        ]\n    }\n}\n```\n#### sample 2:\n###### request data: \n```json\n{\n    \"my_field\": \"Test\"\n}\n```\n###### response data: \n```json\n{\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Done\",\n        \"is_success\": true\n    },\n    \"result\": {\n        \"my_field\": \"TEST\"\n    }\n}\n```\n### 3. list serializer\n```python\nfrom django_rest_structure.api.views import BaseApiView\nfrom django_rest_structure.api.serializers import MyListSerializer\n\nclass MySerializer(MyListSerializer):\n\n    def get_response(self):\n        # the request available on self.request\n        my_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n        response_data = self.paging_structure(\n            *self.paging(my_list)\n        )\n        return ResponseStructure(ResultMessages.GET_SUCCESSFULLY, response_data)\n\n\nclass MyView(BaseApiView):\n    def post_method(self, request, *args, **kwargs):\n        return MySerializer(request.data, check_is_valid=True, request=request).get_response()\n\n```\n#### sample 1:\n###### request data: \n```json\n{\n    \"page\": 1,\n    \"count\": 5\n}\n```\n###### response data: \n```json\n{\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Done\",\n        \"is_success\": true\n    },\n    \"result\": {\n        \"list\": [\n            \"a\",\n            \"b\",\n            \"c\",\n            \"d\",\n            \"e\"\n        ],\n        \"page\": 1,\n        \"count_in_page\": 5,\n        \"total_count\": 12\n    }\n}\n```\n\n## 8. Config your settings\n\n##### change structure response function by adding to your `settings.py`\n```python\n\nREST_STRUCTURE_CONF = {\n    'response_handler': 'django_rest_structure.results.structure.response_structure'\n}\n\n```\n###### define your custom function like:\n```python\n\ndef response_structure(response):\n    return {\n        'status': {\n            'code': response.message.code,\n            'message': response.message.message,\n            'is_success': response.message.is_success_result,\n\n        },\n        'result': response.body\n    }\n\n```\n\n##### change logging handler function by adding to your `settings.py`\n```python\n\nREST_STRUCTURE_CONF = {\n        'log_handler': 'django_rest_structure.logs.console.emmit',\n}\n\n```\n###### define your custom function like:\n```python\n\nimport logging\nlogger = logging.Logger('console')\n\n\n\ndef emmit(request, response, error, request_time, response_time):\n    if error is not None:\n        logger.debug(error)\n\n\n```\n## 9. You can see the simple project that use from this package at: [django_rest_structure_sample](https://github.com/ArefMousakhani/django_rest_structure_sample)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ArefMousakhani/django_rest_structure",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-structure",
    "package_url": "https://pypi.org/project/django-rest-structure/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-rest-structure/",
    "project_urls": {
      "Homepage": "https://github.com/ArefMousakhani/django_rest_structure"
    },
    "release_url": "https://pypi.org/project/django-rest-structure/1.1.5/",
    "requires_dist": [
      "djangorestframework (>=3.12.4)",
      "django (>=3.0.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Structure for django rest framework.",
    "version": "1.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13824028,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e9e5ab663a116aeac46d326f4fad2dc9a1075f7c8deb53ec140942099f6f10e",
        "md5": "918dd26a8af07735ad51d7075a428702",
        "sha256": "417337e65878205a2b9664aa3421655b87806fcf9555931f68ba0a1fb65c1d6e"
      },
      "downloads": -1,
      "filename": "django_rest_structure-1.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "918dd26a8af07735ad51d7075a428702",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 14372,
      "upload_time": "2022-05-15T21:03:33",
      "upload_time_iso_8601": "2022-05-15T21:03:33.400897Z",
      "url": "https://files.pythonhosted.org/packages/5e/9e/5ab663a116aeac46d326f4fad2dc9a1075f7c8deb53ec140942099f6f10e/django_rest_structure-1.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3935f45778dd311c6cfbd75252bc54f295f72d675273942c0d3d99b83c774c7",
        "md5": "2428b63994cacb689354104d17e727a9",
        "sha256": "2bcb292932961746421330792aa1c254371495e68de358a03f8dfd1e90cad5f7"
      },
      "downloads": -1,
      "filename": "django-rest-structure-1.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "2428b63994cacb689354104d17e727a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 10336,
      "upload_time": "2022-05-15T21:03:37",
      "upload_time_iso_8601": "2022-05-15T21:03:37.039526Z",
      "url": "https://files.pythonhosted.org/packages/c3/93/5f45778dd311c6cfbd75252bc54f295f72d675273942c0d3d99b83c774c7/django-rest-structure-1.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}