{
  "info": {
    "author": "lmk",
    "author_email": "lminko.lmk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# MadMAC [![Build Status](https://travis-ci.com/laminko/madmac.svg?branch=master)](https://travis-ci.com/laminko/madmac)\n\nMAC address generator library for testers.\n\n## Content\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Command](#as-a-command)\n  - [Module](#as-a-module)\n\n### Installation\n\nUsing `pip`:\n\n> `pip install madmac`\n\nUsing source:\n\n```bash\n$ git clone https://github.com/laminko/madmac.git\n$ cd madmac\n$ python setup.py install\n```\n\n### Usage\n\n#### As a command\n\nCan be used `madmac` as command. The following will generate random MAC address.\n\n```bash\nmadmac\n```\n\nTo see help, enter `madmac --help`.\n\n```bash\nmadmac --help\nusage: madmac [-h] [-o OUI] [-r START] [-s STOP] [-t TOTAL] [-d DELIMITER]\n              [-c CASE]\n\nMAC address generator library for testers.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUI, --oui OUI     6-digit organizationally unique identifier\n  -r START, --start START\n                        NIC specific start address\n  -s STOP, --stop STOP  NIC specific end address\n  -t TOTAL, --total TOTAL\n                        Number of MACs to generate\n  -d DELIMITER, --delimiter DELIMITER\n                        Delimiter for MAC address\n  -c CASE, --case CASE  Use lower or upper\n```\n\n> **NOTE**: `madmac` is not a binary file. You need to install python 3.5 to execute the command.\n\n#### As a module\n\nImport `MacGenerator` class from `madmac` module. And create an object using `MacGenerator` and call its member `generate()` function. `generate()` function will return python generator object.\n\nThe following code will generate single MAC address using default values.\n\n```python\nfrom madmac import MacGenerator\n\nmacg = MacGenerator()\nmacs = macg.generate()  # generator object which contains one item\nfrom pprint import pprint\npprint(list(macs))\n```\n\nDefault values are as follows:\n\n```python\n# 'oui':  None,\n# 'start': None,\n# 'stop': None,\n# 'total': 1,\n# 'delimiter': ':',\n# 'case': 'lower'\n```\n\nOne can provide `oui`:\n\n```python\nfrom madmac import MacGenerator\n\nmacg = MacGenerator(oui='F0-9F-C2')\nlist(macg.generate())\n```\n\nAlso specify `start` address and `end` address if they are known:\n\n```python\nfrom madmac import MacGenerator\n\nstart = '00-B0-A0'\nstop = '00-B0-DF'\nmacg = MacGenerator(start=start, stop=stop)\n```\n\n> **NOTE**: Above snippet describes to use random `oui`, but to use certain range from `start` and `stop` values. It will ignore `total` parameter. Delimiter and Case will be default values.\n\nSometimes, we might want to generate certain amount of MAC addresses:\n\n```python\nfrom madmac import MacGenerator\n\nmacg = MacGenerator(total=100)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/laminko/madmac",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "madmac",
    "package_url": "https://pypi.org/project/madmac/",
    "platform": "",
    "project_url": "https://pypi.org/project/madmac/",
    "project_urls": {
      "Homepage": "https://github.com/laminko/madmac"
    },
    "release_url": "https://pypi.org/project/madmac/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.5.2",
    "summary": "madmac: MAC address generator",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5389418,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dbedc41925b65b172728971c8e3618ff23dcb9d03218ac70fea846018f061f00",
        "md5": "cdcb7cd7060866bb3b3e5fa168f22778",
        "sha256": "af4da44b9d586fb176af6cc6a42ea0bda5408f247b6376714f1bebc7d968aaf7"
      },
      "downloads": -1,
      "filename": "madmac-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cdcb7cd7060866bb3b3e5fa168f22778",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5.2",
      "size": 5195,
      "upload_time": "2019-06-12T04:33:54",
      "upload_time_iso_8601": "2019-06-12T04:33:54.318767Z",
      "url": "https://files.pythonhosted.org/packages/db/ed/c41925b65b172728971c8e3618ff23dcb9d03218ac70fea846018f061f00/madmac-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "862c3867b95f154f48164d927ef45f43e0d0d62ecf7ab099edb131caf4507bbb",
        "md5": "99de1763e013cf553073727a8a1d0931",
        "sha256": "06b581352f827280c57e0f35282c635439eb98e9cfab9ed517fbade4db2acc9b"
      },
      "downloads": -1,
      "filename": "madmac-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "99de1763e013cf553073727a8a1d0931",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.2",
      "size": 5426,
      "upload_time": "2019-06-12T04:33:55",
      "upload_time_iso_8601": "2019-06-12T04:33:55.668880Z",
      "url": "https://files.pythonhosted.org/packages/86/2c/3867b95f154f48164d927ef45f43e0d0d62ecf7ab099edb131caf4507bbb/madmac-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}