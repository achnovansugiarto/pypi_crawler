{
  "info": {
    "author": "PolySwarm Developers",
    "author_email": "info@polyswarm.io",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# microengine-utils\n\nUtility package for [PolySwarm Engines](https://docs.polyswarm.io/suppliers/roles-in-the-marketplace#engines)\n\nSupports Python 3.6 and greater.\n\n## Installation\n\nFrom PyPI:\n\n    pip install microengine-utils\n\nFrom source:\n\n    python3 setup.py install\n\n    OR\n\n    pip3 install .\n\n\n> If you get an error about a missing package named `wheel`, that means your version of pip or setuptools is too old.\n> You need pip >= 19.0 and setuptools >= 40.8.0. \n> To update pip, run `pip install -U pip`.\n> To update setuptools, run `pip install -U setuptools`\n\n## Usage\n\nHere is an example for how to use the `datadog` metrics utility in an Engine.\n\n```python\nimport asgiref.sync as asgiref_sync\nimport logging\nimport os\nimport platform\nimport polyswarm_myengine\n\nfrom polyswarmartifact.schema.verdict import Verdict\nfrom polyswarmclient.abstractscanner import AbstractScanner, ScanResult\nfrom microengine_utils.constants import SCAN_VERDICT, SCAN_FAIL, SCAN_TIME\nfrom microengine_utils.datadog import configure_metrics\n\nlogger = logging.getLogger(__name__)\n\nDATADOG_API_KEY = 'my_api_key'\nDATADOG_APP_KEY = 'my_app_key'\n\n# Configure Datadog metric keys for use in the application\nENGINE_NAME = 'myengine'\nSCANNER_TYPE = 'file'\nOS_TYPE = 'windows'\n# Set the environment name, \"local\" is used for testing\nPOLY_WORK = os.getenv('POLY_WORK', 'local') \n# Set the hostname, \"local\" is used for testing\nSOURCE = os.getenv(\"HOSTNAME\", \"localhost\")\n\nclass Scanner(AbstractScanner):\n\n    def __init__(self):\n        self.datadog_api_key = os.getenv('DATADOG_API_KEY', None)\n        self.datadog_app_key = os.getenv('DATADOG_APP_KEY', None)\n        self.metrics_collector = configure_metrics(self.datadog_api_key,\n                                                   self.datadog_app_key,\n                                                   ENGINE_NAME,\n                                                   OS_TYPE,\n                                                   POLY_WORK,\n                                                   SOURCE)\n\n    async def scan(self, guid, artifact_type, content, metadata, chain):\n        version = await Scanner._get_my_engine_version()\n        metadata = Verdict().set_malware_family('')\\\n                            .set_scanner(operating_system=platform.system(),\n                                         architecture=platform.machine(),\n                                         vendor_version=version,\n                                         version=polyswarm_myengine.__version__)\n\n        artifact_name = await asgiref_sync.sync_to_async(self._create_temp_file)(content)\n\n        with self.metrics_collector.timer(SCAN_TIME):\n            try:\n                exit_code, scan_output = await Scanner._run_system_cmd(Scanner._get_full_command(artifact_name))\n                logger.info(\"myengine scan result: %s\", scan_output)\n            finally:\n                await asgiref_sync.sync_to_async(os.unlink)(artifact_name)\n            if exit_code != 0:\n                self.metrics_collector.increment(SCAN_FAIL)\n                return ScanResult(metadata=metadata.json())\n\n            infected_bool, malware_family = Scanner._process_output(scan_output)\n            metadata.set_malware_family(malware_family)\n            confidence = 0.8\n            if infected_bool:\n                self.metrics_collector.increment(SCAN_VERDICT,\n                                                 tags=['verdict:malicious',\n                                                       f'malware_family:{metadata.malware_family}',\n                                                       'type:file'])\n            else:\n                self.metrics_collector.increment(SCAN_VERDICT, tags=['verdict:benign', 'type:file'])\n            return ScanResult(bit=True, verdict=infected_bool, confidence=confidence, metadata=metadata.json())\n\n```\n\nHere is an example for using the `malwarerepoclient` utility in Engine unit tests\n\n```python\nimport asyncio\nimport pytest\nimport sys\n\nfrom microengine_utils.malwarerepoclient import DummyMalwareRepoClient\nfrom polyswarm_myengine import Scanner\nfrom polyswarmartifact import ArtifactType\n\n\n@pytest.yield_fixture()\ndef event_loop():\n    loop = asyncio.get_event_loop()\n    if sys.platform == 'win32':\n        loop = asyncio.ProactorEventLoop()\n    yield loop\n    loop.close()\n\n\n@pytest.mark.asyncio\nasync def test_scan_random_malicious_and_not():\n    scanner = Scanner()\n\n    for t in [True, False]:\n        mal_md, mal_content = DummyMalwareRepoClient().get_random_file(malicious_filter=t)\n        result = await scanner.scan(\"nocare\", ArtifactType.FILE, mal_content, None, \"home\")\n        assert result.verdict == t\n```\n\n## Testing\n\n    git clone https://github.com/polyswarm/microengine-utils.git\n    cd microengine-utils\n    pip3 install -r requirements.txt\n    pip3 install .\n    pytest -s -v\n    \n## Questions? Problems?\n\nFile a ticket or email us at `info@polyswarm.io`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/polyswarm/microengine-utils",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microengine-utils",
    "package_url": "https://pypi.org/project/microengine-utils/",
    "platform": "",
    "project_url": "https://pypi.org/project/microengine-utils/",
    "project_urls": {
      "Homepage": "https://github.com/polyswarm/microengine-utils"
    },
    "release_url": "https://pypi.org/project/microengine-utils/1.5.1/",
    "requires_dist": [
      "datadog (~=0.36.0)",
      "polyswarm-artifact (~=1.4.2)",
      "pydantic (~=1.6.1)",
      "requests (~=2.22.0)"
    ],
    "requires_python": ">=3.6,<4",
    "summary": "Library for Polyswarm Microengine Utility Package",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11938756,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd10e195f66532c439ad855c510016ad7ca7c432a9ec7a22c651fd63bd68cf63",
        "md5": "d599ed2c43a940c280c0bc90809a12e8",
        "sha256": "a73c95e253a727c2d86e2ed40f16d58d66e1a1ceb158360e02848b7154a9b796"
      },
      "downloads": -1,
      "filename": "microengine_utils-1.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d599ed2c43a940c280c0bc90809a12e8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4",
      "size": 13866,
      "upload_time": "2021-11-05T17:46:43",
      "upload_time_iso_8601": "2021-11-05T17:46:43.468109Z",
      "url": "https://files.pythonhosted.org/packages/dd/10/e195f66532c439ad855c510016ad7ca7c432a9ec7a22c651fd63bd68cf63/microengine_utils-1.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b707961e63d202d927317019ac0470fcf9122d18e9771bb585424685777329cb",
        "md5": "392b33e99292221548e58ae90065e4c3",
        "sha256": "6a0a2f1afd3a91a373400396a48bc0c60317373727293831fadf9ed3cbd8a229"
      },
      "downloads": -1,
      "filename": "microengine-utils-1.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "392b33e99292221548e58ae90065e4c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4",
      "size": 14201,
      "upload_time": "2021-11-05T17:46:44",
      "upload_time_iso_8601": "2021-11-05T17:46:44.719183Z",
      "url": "https://files.pythonhosted.org/packages/b7/07/961e63d202d927317019ac0470fcf9122d18e9771bb585424685777329cb/microengine-utils-1.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}