{
  "info": {
    "author": "Kevin Pedro",
    "author_email": "kpedro88@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# magiconfig\n\nConfigure Python with Python.\n\n## Overview\n\nmagiconfig is an extension of argparse that stops the\n[configuration complexity clock](https://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html)\nby enabling users to configure Python with Python.\nIt provides all the power of Python to manipulate and compose configuration parameters,\nbypassing the limitations of text-based configuration languages.\n\n## Philosophy\n\nThis module treats argparse as an engine that ultimately provides a namespace of attributes (\"dests\") to be consumed by user applications.\nWith magiconfig, these attributes can be provided by an imported `MagiConfig` Python object,\nin addition to the usual command-line arguments.\n\n## Features\n\n* compatible with both Python 2 and Python 3\n* provides custom `ArgumentParser` class, which is a drop-in replacement for `argparse.ArgumentParser`\n* provides `MagiConfig` object that extends `argparse.Namespace` to add useful methods:\n  * `write()`: produce a Python config file that reproduces the current state of the namespace\n  * `join()`: merge with another config object\n  * used both as the input object in config files and as the output object of the parser\n* options related to the Python config file and object are contained in the class `MagiConfigOptions`:\n  * `args`: the command-line arguments to indicate the config file (default: \"-C\", \"--config\")\n  * `help`: custom help message for config args (optional)\n  * `obj`: name of the `MagiConfig` object to be imported from the config file (default: \"config\")\n  * `obj_args`: optional command-line arguments to indicate the object to be imported (default: `obj`)\n  * `obj_help`: custom help message for obj args (optional)\n  * `required`: if the config arg is required when parsing (default: False)\n  * `default`: default value for the config file name (default: None)\n  * `strict`: reject imported config object if it has unknown attributes (default: False)\n    * additional dests, unrelated to the command-line arguments, can be specified using `ArgumentParser.set_defaults(*args,**kwargs)`\n    * to specify additional dests without providing default values, provide strings for `*args` in the above method\n* precedence of parameter values: command line > config file > defaults\n* values provided in a config file satisfy the \"required\" attribute of any such arguments specified in the parser\n* types specified for dests in argparse arguments are enforced for attributes imported from a config file\n  * exception: if multiple types are specified for a single dest, types are ignored in imported attributes\n* dests can be obtained from nested configs by using dots in the dest names\n\n## Examples\n\n### 1) Basic setup\n\nThe simple script in [examples/example1.py](./examples/example1.py)\ndemonstrates the different ways to set values, as well as some of the features of magiconfig.\n\nThe help printout for the arguments defined in the script:\n```\nusage: example1.py [-C CONFIG] [-h] [-f FOO] -b BAR [-i]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -C CONFIG, --config CONFIG\n                        name of config file to import (w/ object: config)\n  -f FOO, --foo FOO     foo arg\n  -b BAR, --bar BAR     bar arg\n  -i, --ipsum           ipsum arg\n```\n\nWhen the script is run as follows:\n```\npython3 examples/example1.py -C examples/config1.py --foo 'foo'\n```\n\nIt prints the resulting namespace:\n```\nMagiConfig(bar=3.0, foo='foo', ipsum=False)\n```\n\nHere, the `bar` argument is set by the config file [examples/config1.py](./examples/config1.py),\nthe `foo` argument is set on the command line, and the `ipsum` argument retains its default value.\n\nThe script also writes the final namespace into a config file `examples/config1_out.py`:\n```python\nfrom magiconfig import MagiConfig\n\nconfig = MagiConfig()\nconfig.bar = 3.0\nconfig.foo = 'foo'\nconfig.ipsum = False\n```\n\nWith this config file, the script can be rerun to produce the same output without\nthe need to specify any other command-line arguments:\n`python examples/example1.py -C examples/config1_out.py`.\n\n### 2) Subparsers\n\nThe script in [examples/example2.py](./examples/example2.py)\ndemonstrates how a common config file [examples/config2.py](./examples/config2.py)\ncan be used with multiple subparsers.\n\nThe parser has two modes defined, `one` (with an argument `foo`)\nand `two` (with an argument `bar`).\nEach subparser mode specifies a different config object;\nin this case, each of these config objects is a member of a top-level config object.\n\nThe script can be run in each mode with the same input config file:\n```\n> python examples/example2.py one -C examples/config2.py\nMagiConfig(foo='foo')\n> python examples/example2.py two -C examples/config2.py\nMagiConfig(bar=2.0)\n```\n\n### 3) Config-driven\n\nIn a config-driven script, it may be desirable to encapsulate many parameters only in the config file,\nwhile supporting only parameters related to running the script as command-line arguments.\nThe script in [examples/example3.py](./examples/example3.py) is an example.\n\nIt shows how an organized schema with different categories and parameters can be defined and transmitted to the parser.\nThis allows the parser to use strict mode to validate input configurations, rejecting any config with unknown parameters.\nThe config file [examples/config3.py](./examples/config3.py) can be used with the script:\n```\n> python examples/example3.py -C examples/config3.py -v\nMagiConfig(dataset=MagiConfig(background='background', path='/data', signal='signal'), hyper=MagiConfig(learning_rate=0.1, loss='log'), training=MagiConfig(size=0.5, weights=[1, 1]), verbose=True)\n```\n\n### 4) Scaling up\n\nWhen scaling up an application to handle a large number of possible inputs,\na typical pattern is that some of the parameters are common,\nwhile other parameters may be unique to each input.\nRather than requiring a separate config file for each possible input,\nall of the config objects can be generated within a single Python file.\nThe script in [examples/example4.py](./examples/example4.py)\nallows the config object name to be specified on the command line;\nother config objects in the config file are just ignored.\n\nThe help message for this script is:\n```\nusage: example4.py [-C CONFIG] [-O OBJ] [-h] [-f FOO] -b BAR -i INPUT\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -C CONFIG, --config CONFIG\n                        name of config file to import (w/ object from -O,--\n                        obj)\n  -O OBJ, --obj OBJ     name of object to import from config file\n  -f FOO, --foo FOO     foo arg\n  -b BAR, --bar BAR     bar arg\n  -i INPUT, --input INPUT\n                        input arg\n```\n\nThe script can be run with different inputs all contained in [examples/config4.py](./examples/config4.py):\n```\n> python3 examples/example4.py -C examples/config4.py -O config.a\nMagiConfig(bar=3.0, foo='foo', input='a')\n> python3 examples/example4.py -C examples/config4.py -O config.b\nMagiConfig(bar=3.0, foo='foo', input='b')\n```\n\n## Inspirations\n\nThis project owes inspiration (and in some cases code) to:\n* [ConfigArgParse](https://github.com/bw2/ConfigArgParse)\n* [configurati](https://github.com/duckworthd/configurati)\n* [WMCore](https://github.com/dmwm/WMCore)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kpedro88/magiconfig",
    "keywords": "config,configuration,argparse,parameters,magiconfig",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "magiconfig",
    "package_url": "https://pypi.org/project/magiconfig/",
    "platform": "",
    "project_url": "https://pypi.org/project/magiconfig/",
    "project_urls": {
      "Homepage": "https://github.com/kpedro88/magiconfig"
    },
    "release_url": "https://pypi.org/project/magiconfig/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*",
    "summary": "An extension of argparse to configure Python with Python",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17117616,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46c154c14b4526d9773241d216ac3bec412c2158f21a0d38293ac4888a59346a",
        "md5": "f6c80e4113d83cbe27a51de16cb609f1",
        "sha256": "8224c12555e70313d34d7e108229e0aa113726dceb296a274f0ad3935cc2d176"
      },
      "downloads": -1,
      "filename": "magiconfig-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f6c80e4113d83cbe27a51de16cb609f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*",
      "size": 9072,
      "upload_time": "2020-01-09T21:58:23",
      "upload_time_iso_8601": "2020-01-09T21:58:23.547338Z",
      "url": "https://files.pythonhosted.org/packages/46/c1/54c14b4526d9773241d216ac3bec412c2158f21a0d38293ac4888a59346a/magiconfig-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}