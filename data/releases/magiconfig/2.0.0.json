{
  "info": {
    "author": "Kevin Pedro",
    "author_email": "kpedro88@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# magiconfig\n\nConfigure Python with Python.\n\nTable of Contents\n=================\n* [Overview](#overview)\n* [Philosophy](#philosophy)\n* [Features](#features)\n   * [ArgumentParser](#argumentparser)\n      * [Constructor](#constructor)\n      * [parse_args(), parse_known_args()](#parse_args-parse_known_args)\n      * [parse_config(config_name, config_obj, config_strict, namespace=None)](#parse_configconfig_name-config_obj-config_strict-namespacenone)\n      * [set_config_options(**kwargs)](#set_config_optionskwargs)\n      * [write_config(namespace, filename, obj=None)](#write_confignamespace-filename-objnone)\n      * [add_config_only(*args, **kwargs)](#add_config_onlyargs-kwargs)\n      * [remove_config_only(arg)](#remove_config_onlyarg)\n      * [remove_argument(arg, keep=False)](#remove_argumentarg-keepfalse)\n   * [MagiConfigOptions](#magiconfigoptions)\n      * [Constructor](#constructor-1)\n   * [MagiConfig](#magiconfig-1)\n      * [write(filename, config_obj)](#writefilename-config_obj)\n      * [join(other_config, prefer_other=False)](#joinother_config-prefer_otherfalse)\n      * [getattr(), setattr()](#getattr-setattr)\n   * [MagiConfigError](#magiconfigerror)\n   * [Other](#other)\n      * [Subparser aliases](#subparser-aliases)\n      * [Convenience](#convenience)\n* [Examples](#examples)\n   * [1) Basic setup](#1-basic-setup)\n   * [2) Subparsers](#2-subparsers)\n   * [3) Config-driven](#3-config-driven)\n   * [4) Scaling up](#4-scaling-up)\n* [Inspirations](#inspirations)\n\n(Created by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc))\n\n## Overview\n\nmagiconfig is an extension of argparse that stops the\n[configuration complexity clock](https://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html)\nby enabling users to configure Python with Python.\nIt provides all the power of Python to manipulate and compose configuration parameters,\nbypassing the limitations of text-based configuration languages.\n\n## Philosophy\n\nThis module treats argparse as an engine that ultimately provides a namespace of attributes (\"dests\") to be consumed by user applications.\nWith magiconfig, these attributes can be provided by an imported [`MagiConfig`](#MagiConfig-1) Python object,\nin addition to the usual command-line arguments.\n\n## Features\n\nmagiconfig is compatible with both Python 2 and Python 3.\nIt provides a custom [`ArgumentParser`](#ArgumentParser) class, which is a drop-in replacement for `argparse.ArgumentParser`.\nIt also provides [`MagiConfig`](#MagiConfig-1), [`MagiConfigOptions`](#MagiConfigOptions), and [`MagiConfigError`](#MagiConfigError) classes.\n\n### ArgumentParser\n\nThe API of this class is extended with several additional functions to manage config settings, as well as to provide other useful operations.\n\n#### Constructor\n\nThe constructor supports several additional options:\n* `config_options`: takes an instance of [`MagiConfigOptions`](#MagiConfigOptions); default = `None` (falls back to standard argparse behavior)\n* `config_only_help`: include config-only args in the help message (see [`add_config_only()`](#add_config_onlyargs-kwargs)); default = `True`\n\n#### `parse_args(), parse_known_args()`\n\nThese function interfaces are unchanged from argparse, but they return a [`MagiConfig`](#MagiConfig-1) object.\nIf an input `namespace` argument is provided but is not of type [`MagiConfig`](#MagiConfig-1), a conversion will be attempted.\n\n#### `parse_config(config_name, config_obj, config_strict, namespace=None)`\n\nThis is mainly an internal function used in `parse_known_args()`, but like that function, it could also be used standalone.\n\n* `config_name`: name of config file to import\n* `config_obj`: name of config object inside config file\n* `config_strict`: whether to reject imported config object if it has unknown attributes\n* `namespace`: `Namespace` object to append to, if any\n\nRaises [`MagiConfigError`](#MagiConfigError) if any required config-only arguments are missing or if `config_strict` is `True` and the imported config has unknown attributes.\n\n#### `set_config_options(**kwargs)`\n\nThis function allows changing the config options after the parser is initialized.\nIt accepts all parameters that can be used to construct an instance of [`MagiConfigOptions`](#MagiConfigOptions).\nRaises [`MagiConfigError`](#MagiConfigError) if any other parameters are provided.\n\n#### `write_config(namespace, filename, obj=None)`\n\n* `namespace`: [`MagiConfig`](#MagiConfig-1) object to be written\n* `filename`: name of file to write\n* `obj`: name of the [`MagiConfig`](#MagiConfig-1) object in the file (default: class member `config_options.obj` or `\"config\"` if no `config_options` specified)\n\nThis function can be used to preserve the state of the configuration after any command-line modifications (see [Example 1](#1-basic-setup)).\n\n#### `add_config_only(*args, **kwargs)`\n\nThis interface allows adding dests that are only provided by the config, not by command-line arguments.\n\n* `args`: no default value, not required\n* `**kwargs`: default value OR required (value=`None`)\n\nRaises [`MagiConfigError`](#MagiConfigError) if any dests have already been used by arguments (actions) added to the parser.\nSimilarly, `add_argument()` now raises `ArgumentError` if it specifies a dest that has already been added as config-only by this function.\n\n#### `remove_config_only(arg)`\n\n* `arg`: name of config-only arg to remove\n\nRaises `KeyError` if arg is not found in the list of config-only args.\n\n#### `remove_argument(arg, keep=False)`\n\nThis function allows removing a single argument (a missing feature in argparse).\n\n* `arg`: flag (for optional arguments) or dest (for positional arguments)\n* `keep`: for optional arguments, `True` will remove just the single specified flag `arg` (the entire action is removed only if it has no remaining flags); `False` (default) always removes the action associated with the flag\n* for positional arguments, all positional actions with the specified dest are removed (but not optional arguments with that dest)\n\nExits with `error()` if an unknown argument is provided.\n\n### MagiConfigOptions\n\nThis simple class stores options related to the use of configs in the [`ArgumentParser`](#ArgumentParser).\n\n#### Constructor\n\n* `args`: the command-line arguments to indicate the config file (default: `[\"-C\", \"--config\"]`)\n* `help`: custom help message for config args (optional)\n* `required`: if the config arg is required when parsing (default: `False`)\n* `default`: default value for the config file name (default: `None`)\n* `dest`: destination for config arg (default: `\"config\"`)\n* `obj`: name of the `MagiConfig` object to be imported from the config file (default: `\"config\"`)\n* `obj_args`: command-line arguments to indicate the name of the object to be imported (optional)\n* `obj_help`: custom help message for obj args (optional)\n* `obj_dest`: destination for obj arg (default: `\"obj\"`)\n* `strict`: reject imported config object if it has unknown attributes (default: `False`)\n* `strict_args`: optional command-line arguments to toggle strictness\n  * if `strict` above is set to `False`, providing an arg will toggle it to `True`; if set to `True`, will toggle it to `False`\n* `strict_help`: custom help message for strict args (optional)\n* `strict_dest`: destination for strict arg (default: `\"strict\"`)\n\nThe values for `args`, `obj_args`, and `strict_args` can be positional arguments (rather than the optional arguments shown here).\n\n### MagiConfig\n\nThis class extends `argparse.Namespace` to add a few useful methods.\nIt is used both as the input object in config files and as the output object of [`ArgumentParser`](#ArgumentParser).\n\n#### `write(filename, config_obj)`\n\n* `filename`: name of file to write\n* `config_obj`: name of [`MagiConfig`](#MagiConfig-1) object in file\n\n#### `join(other_config, prefer_other=False)`\n\n* `other_config`: other [`MagiConfig`](#MagiConfig-1) object to merge\n* `prefer_other`: prefer values from other config, if dest is present in both configs (default: prefer this config)\n\n#### `getattr()`, `setattr()`\n\nThese class methods are extended to handle nested config objects automatically.\nAny nonexistent intermediate objects are initialized as [`MagiConfig`](#MagiConfig-1) instances. Example:\n```python\nfrom magiconfig import MagiConfig\nx = MagiConfig()\nsetattr(x,\"y.z\",\"test\")\nprint(x)\n```\nreturns: `MagiConfig(y=MagiConfig(z='test'))`\n\nThis enables obtaining dests from nested configs by using dots in the dest names.\n\n### MagiConfigError\n\nThis class derives from `Exception` and denotes magiconfig-specific errors.\n\n### Other\n\n#### Subparser aliases\n\n`_SubParsersAction.add_parser` is modified to backport the use of subparsers aliases to Python 2.\n\n#### Convenience\n\nAll public classes and constants from argparse are added to the magiconfig namespace for easier drop-in usage.\n\nA class `ArgumentDefaultsRawHelpFormatter` is defined to present help messages with default values and without line wrapping (from [ConfigArgParse](https://github.com/bw2/ConfigArgParse)).\n\n## Examples\n\n### 1) Basic setup\n\nThe simple script in [examples/example1.py](./examples/example1.py)\ndemonstrates the different ways to set values, as well as some of the features of magiconfig.\n\nThe help printout for the arguments defined in the script:\n```\nusage: example1.py [-h] [-C CONFIG] [-f FOO] -b BAR [-i]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -C CONFIG, --config CONFIG\n                        name of config file to import (w/ object: config)\n  -f FOO, --foo FOO     foo arg\n  -b BAR, --bar BAR     bar arg\n  -i, --ipsum           ipsum arg\n```\n\nWhen the script is run as follows:\n```\npython3 examples/example1.py -C examples/config1.py --foo 'foo'\n```\n\nIt prints the resulting namespace:\n```\nMagiConfig(bar=3.0, foo='foo', ipsum=False)\n```\n\nHere, the `bar` argument is set by the config file [examples/config1.py](./examples/config1.py),\nthe `foo` argument is set on the command line, and the `ipsum` argument retains its default value.\n\nThe script also writes the final namespace into a config file `examples/config1_out.py`:\n```python\nfrom magiconfig import MagiConfig\n\nconfig = MagiConfig()\nconfig.bar = 3.0\nconfig.foo = 'foo'\nconfig.ipsum = False\n```\n\nWith this config file, the script can be rerun to produce the same output without\nthe need to specify any other command-line arguments:\n`python examples/example1.py -C examples/config1_out.py`.\n\n### 2) Subparsers\n\nThe script in [examples/example2.py](./examples/example2.py)\ndemonstrates how a common config file [examples/config2.py](./examples/config2.py)\ncan be used with multiple subparsers.\n\nThe parser has two modes defined, `one` (with an argument `foo`)\nand `two` (with an argument `bar`).\nEach subparser mode specifies a different config object;\nin this case, each of these config objects is a member of a top-level config object.\n\nThe script can be run in each mode with the same input config file:\n```\n> python examples/example2.py one -C examples/config2.py\nMagiConfig(foo='foo')\n> python examples/example2.py two -C examples/config2.py\nMagiConfig(bar=2.0)\n```\n\n### 3) Config-driven\n\nIn a config-driven script, it may be desirable to encapsulate many parameters only in the config file,\nwhile supporting only parameters related to running the script as command-line arguments.\nThe script in [examples/example3.py](./examples/example3.py) is an example.\n\nIt shows how an organized schema with different categories and parameters can be defined and transmitted to the parser.\nThis allows the parser to use strict mode to validate input configurations, rejecting any config with unknown parameters.\nThe config file [examples/config3.py](./examples/config3.py) can be used with the script:\n```\n> python examples/example3.py -C examples/config3.py -v\nMagiConfig(dataset=MagiConfig(background='background', path='/data', signal='signal'), hyper=MagiConfig(learning_rate=0.1, loss='log'), training=MagiConfig(size=0.5, weights=[1, 1]), verbose=True)\n```\n\nThis example also shows how config-only arguments can be given default values or marked as required. These attributes are reflected in the help message:\n```\n> python examples/example3.py --help\nusage: example3.py [-h] [-C CONFIG] [-v]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -C CONFIG, --config CONFIG\n                        name of config file to import (w/ object: config) (default: None)\n  -v, --verbose         enable verbose output (default: False)\n\nconfig-only arguments:\n  dataset.background    (required)\n  dataset.path            (default: /data)\n  dataset.signal        (required)\n  hyper.learning_rate\n  hyper.loss\n  training.size\n  training.weights\n```\n\n### 4) Scaling up\n\nWhen scaling up an application to handle a large number of possible inputs,\na typical pattern is that some of the parameters are common,\nwhile other parameters may be unique to each input.\nRather than requiring a separate config file for each possible input,\nall of the config objects can be generated within a single Python file.\nThe script in [examples/example4.py](./examples/example4.py)\nallows the config object name to be specified on the command line;\nother config objects in the config file are just ignored.\n\nThe help message for this script is:\n```\nusage: example4.py [-h] [-C CONFIG] [-O OBJ] [-f FOO] -b BAR -i INPUT\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -C CONFIG, --config CONFIG\n                        name of config file to import (w/ object from -O,--obj) (default: None)\n  -O OBJ, --obj OBJ     name of object to import from config file (default: config)\n  -f FOO, --foo FOO     foo arg (default: lorem)\n  -b BAR, --bar BAR     bar arg (default: None)\n  -i INPUT, --input INPUT\n                        input arg (default: None)\n```\n\nThe script can be run with different inputs all contained in [examples/config4.py](./examples/config4.py):\n```\n> python3 examples/example4.py -C examples/config4.py -O config.a\nMagiConfig(bar=3.0, foo='foo', input='a')\n> python3 examples/example4.py -C examples/config4.py -O config.b\nMagiConfig(bar=3.0, foo='foo', input='b')\n```\n\n## Inspirations\n\nThis project owes inspiration (and in some cases code) to:\n* [ConfigArgParse](https://github.com/bw2/ConfigArgParse)\n* [configurati](https://github.com/duckworthd/configurati)\n* [WMCore](https://github.com/dmwm/WMCore)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kpedro88/magiconfig",
    "keywords": "config,configuration,argparse,parameters,magiconfig",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "magiconfig",
    "package_url": "https://pypi.org/project/magiconfig/",
    "platform": "",
    "project_url": "https://pypi.org/project/magiconfig/",
    "project_urls": {
      "Homepage": "https://github.com/kpedro88/magiconfig"
    },
    "release_url": "https://pypi.org/project/magiconfig/2.0.0/",
    "requires_dist": null,
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*",
    "summary": "An extension of argparse to configure Python with Python",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17117616,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1f40dc03741aeeab0b2b57849e560c6a946ec355a86829c960a1818662cef20",
        "md5": "90fd1a576b5ed65446138ed9ef9a8ec5",
        "sha256": "68c37ef1edd5cfe70e442550f8547c3e5461c46ca34484f46a77765b0fe02f9d"
      },
      "downloads": -1,
      "filename": "magiconfig-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "90fd1a576b5ed65446138ed9ef9a8ec5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*",
      "size": 17976,
      "upload_time": "2020-03-18T17:12:12",
      "upload_time_iso_8601": "2020-03-18T17:12:12.019578Z",
      "url": "https://files.pythonhosted.org/packages/e1/f4/0dc03741aeeab0b2b57849e560c6a946ec355a86829c960a1818662cef20/magiconfig-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}