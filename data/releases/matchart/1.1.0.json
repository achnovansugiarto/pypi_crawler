{
  "info": {
    "author": null,
    "author_email": "baterflyrity <baterflyrity@yandex.ru>",
    "bugtrack_url": null,
    "classifiers": [
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "# MatChart\n\nMatChart is a convenient one-line wrapper around *matplotlib* plotting library.\n\n## Usage\n\n```python\nfrom matchart import plot\n\nplot([x1, y1], [y2], [x3, y3], y4, ..., \n         # common parameters\n         kind='plot',         \n         show: bool = True,\n         # plotter explict parameters\n         label: ClippedArguments = None,\n         color: CycledArguments = None,\n         marker: ClippedArguments = None,\n         linestyle: ClippedArguments = None,\n         linewidth: ClippedArguments = None,\n         markersize: ClippedArguments = None,\n         # figure and axes parameters\n         legend: Optional[bool] = None,\n         legend_kwargs: Optional[Dict[str, Any]] = None,\n         title: Optional[str] = None,\n         title_kwargs: Optional[Dict[str, Any]] = None,\n         xlabel: Optional[str] = None,\n         xlabel_kwargs: Optional[Dict[str, Any]] = None,\n         ylabel: Optional[str] = None,\n         ylabel_kwargs: Optional[Dict[str, Any]] = None,\n         limit: Union[Tuple[Any, Any, Any, Any], bool] = True,\n         figsize: Tuple[float, float] = (10, 8),         \n         dpi: float = 100,\n         subplots_kwargs: Optional[Dict[str, Any]] = None,\n         grid: Optional[bool] = False,\n         grid_kwargs: Optional[Dict[str, Any]] = None,\n         theme='seaborn-v0_8-deep',\n         # plotter rest parameters\n         **plotter_kwargs  #\n         ) -> Tuple[Figure, Axes, List[Artist]]\n```\n\n`kind` - pyplot [function name](https://matplotlib.org/stable/plot_types/index.html), e.g. _plot_ or _scatter_.\n\n`show` - whether to show plot or just to draw it.\n\n`label`, `color`, `marker`, `linestyle`, `linewidth`, `markersize` and rest `plotter_kwargs` - plotter parameters. Can differ per kind. See [common parameters](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html) for `kind='plot'`. Can be `list` or `tuple` to define per-dataset values. Values can also be `None` or even clipped to skip definition for particular dataset.\n\n`legend` - set `True`, `False` or `None` to autodetect. `legend_kwargs` - [additional parameters](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.legend.html).\n\n`title` - plot's title. `title_kwargs` - [additional parameters](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_title.html).\n\n`xlabel` - horizontal axis label. `xlabel_kwargs` - [additional parameters](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_xlabel.html).\n\n`ylabel` - vertical axis label. `ylabel_kwargs` - [additional parameters](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_ylabel.html).\n\n`limit` - set `True` to autodetect 2D plot's borders or `False` to use dafault matplot's behaviur. Set to `(left, right, bottom, top)` to use [custom borders](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_ylim.html).\n\n`figsize` - plot's size as `(width, height)` in inches. By default is overriden with *10x8*.\n\n`dpi` - plot's resolution in dots-per-inch.\n\n`subplots_kwargs` - [additional plot's parameters](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html) and [Figure's parameters](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figure.html#matplotlib.pyplot.figure).\n\n`grid` - plot's [grid visibility](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.grid.html) with `grid_kwargs` as additional parameters.\n\n`theme` - plot's [style](https://matplotlib.org/stable/api/style_api.html#matplotlib.style.use). By default is overriden with *seaborn-v0_8-deep*.\n\n## Example\n\n### Just plot something\n\nFirstly prepare data:\n\n```python\nimport numpy as np\n\nx1 = np.arange(21)\ny1 = x1 ** 2\ny2 = x1 ** 1.9\nx3 = 5, 15\ny3 = 300, 100\ny4 = x1 ** 2.1\n```\n\nThen plot data:\n\n```python\nfrom matchart import plot\n\nplot([x1, y1], [y2], [x3, y3], y4,  \n     label=['$x^{2}$', '$x^{1.9}$', 'Points'],  \n     xlabel='X', ylabel='Y',  \n     title='Power of $x$ comparison.',  \n     grid=True,  \n     color=[None, 'green', 'red', 'gray'],  \n     marker=['o', None, '*'],  \n     linestyle=[None, '--'],  \n     linewidth=[None, 3, 0],  \n     markersize=20,  \n     fillstyle='top')\n```\n\n![](docs/example1.png)\n\n### Migrate from matplotlib simple\n\nLet's take [FiveThirtyEight style sheet example](https://matplotlib.org/stable/gallery/style_sheets/fivethirtyeight.html#sphx-glr-gallery-style-sheets-fivethirtyeight-py):\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.style.use('fivethirtyeight')\n\nx = np.linspace(0, 10)\nnp.random.seed(19680801)  # Fixing random state for reproducibility\n\nfig, ax = plt.subplots()\nax.plot(x, np.sin(x) + x + np.random.randn(50))\nax.plot(x, np.sin(x) + 0.5 * x + np.random.randn(50))\nax.plot(x, np.sin(x) + 2 * x + np.random.randn(50))\nax.plot(x, np.sin(x) - 0.5 * x + np.random.randn(50))\nax.plot(x, np.sin(x) - 2 * x + np.random.randn(50))\nax.plot(x, np.sin(x) + np.random.randn(50))\nax.set_title(\"'fivethirtyeight' style sheet\")\nplt.show()\n```\n\n![](docs/simple_matplotlib.png)\n\nand rewrite it with MatChart:\n\n```python\nfrom matchart import plot\nimport numpy as np\n\nx = np.linspace(0, 10)\nnp.random.seed(19680801)  # Fixing random state for reproducibility\n\nplot([x, np.sin(x) + x + np.random.randn(50)], \n\t[x, np.sin(x) + 0.5 * x + np.random.randn(50)],\n\t[x, np.sin(x) + 2 * x + np.random.randn(50)],\n\t[x, np.sin(x) - 0.5 * x + np.random.randn(50)],\n\t[x, np.sin(x) - 2 * x + np.random.randn(50)],\n\t[x, np.sin(x) + np.random.randn(50)],\n\ttitle=\"'fivethirtyeight' style sheet\",\n\ttheme='fivethirtyeight')\n```\n\n![](docs/simple_matchart.png)\n\n*Note that default figure sizes differ.*\n\n### Migrate from matplotlib stackplot\n\nLet's take [stackplots example](https://matplotlib.org/stable/gallery/lines_bars_and_markers/stackplot_demo.html#sphx-glr-gallery-lines-bars-and-markers-stackplot-demo-py):\n\n```python\nimport matplotlib.pyplot as plt\n\n# data from United Nations World Population Prospects (Revision 2019)\n# https://population.un.org/wpp/, license: CC BY 3.0 IGO\nyear = [1950, 1960, 1970, 1980, 1990, 2000, 2010, 2018]\npopulation_by_continent = {\n\t'africa':   [228, 284, 365, 477, 631, 814, 1044, 1275],\n\t'americas': [340, 425, 519, 619, 727, 840, 943, 1006],\n\t'asia':     [1394, 1686, 2120, 2625, 3202, 3714, 4169, 4560],\n\t'europe':   [220, 253, 276, 295, 310, 303, 294, 293],\n\t'oceania':  [12, 15, 19, 22, 26, 31, 36, 39],\n}\n\nfig, ax = plt.subplots()\nax.stackplot(year, population_by_continent.values(),\n             labels=population_by_continent.keys(), alpha=0.8)\nax.legend(loc='upper left')\nax.set_title('World population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\nplt.show()\n```\n\n![](docs/stackplot_matplotlib.png)\n\nand rewrite it with MatChart:\n\n```python\nfrom matchart import plot\n\n# data from United Nations World Population Prospects (Revision 2019)\n# https://population.un.org/wpp/, license: CC BY 3.0 IGO\nyear = [1950, 1960, 1970, 1980, 1990, 2000, 2010, 2018]\npopulation_by_continent = {\n\t'africa':   [228, 284, 365, 477, 631, 814, 1044, 1275],\n\t'americas': [340, 425, 519, 619, 727, 840, 943, 1006],\n\t'asia':     [1394, 1686, 2120, 2625, 3202, 3714, 4169, 4560],\n\t'europe':   [220, 253, 276, 295, 310, 303, 294, 293],\n\t'oceania':  [12, 15, 19, 22, 26, 31, 36, 39],\n}\n\nplot([year, population_by_continent.values()], \n\tkind='stackplot', \n\tlabels=population_by_continent.keys(), \n\talpha=0.8, \n\tlegend=True, \n\tlegend_kwargs=dict(loc='upper left'), \n\tlimit=False, \n\ttitle='World population', \n\txlabel='Year', \n\tylabel='Number of people (millions)')\n```\n\n![](docs/stackplot_matchart.png)\n\n*Note that default figure sizes differ.*\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "plot,chart,diagram,matplotlib,visualization",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "matchart",
    "package_url": "https://pypi.org/project/matchart/",
    "platform": null,
    "project_url": "https://pypi.org/project/matchart/",
    "project_urls": {
      "Home": "https://github.com/baterflyrity/matchart"
    },
    "release_url": "https://pypi.org/project/matchart/1.1.0/",
    "requires_dist": [
      "matplotlib",
      "pandas",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "Convenient plotting wrapper around matplotlib.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17538888,
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "bae0812c9a0f0abd32c083c2072c5943223f65d9513c0c14b5bb9eabd02ecba4",
        "md5": "7ad152e0d6e829d6ee820d95662ec5a8",
        "sha256": "69e5bdb5304079385fcaa07ce6bd8355be71494cb780a91438b5ac02f94b8e36"
      },
      "downloads": -1,
      "filename": "matchart-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7ad152e0d6e829d6ee820d95662ec5a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5657,
      "upload_time": "2023-04-01T10:37:19",
      "upload_time_iso_8601": "2023-04-01T10:37:19.758360Z",
      "url": "https://files.pythonhosted.org/packages/ba/e0/812c9a0f0abd32c083c2072c5943223f65d9513c0c14b5bb9eabd02ecba4/matchart-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "b57c0c5a0b8af1ecfc36e3e7abf6ead88443676e20d715a670eca27573a6f6ab",
        "md5": "d5e4e11aefeab850f31eb1d47012986b",
        "sha256": "532ffd82ea6b1c633f5064856676f616d5121b6b3d815e12dd5a6625a315e2e1"
      },
      "downloads": -1,
      "filename": "matchart-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d5e4e11aefeab850f31eb1d47012986b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 335978,
      "upload_time": "2023-04-01T10:37:26",
      "upload_time_iso_8601": "2023-04-01T10:37:26.638192Z",
      "url": "https://files.pythonhosted.org/packages/b5/7c/0c5a0b8af1ecfc36e3e7abf6ead88443676e20d715a670eca27573a6f6ab/matchart-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}