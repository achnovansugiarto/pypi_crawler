{
  "info": {
    "author": "Germain CHAZOT",
    "author_email": "g.chazot@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# OneEvent\nA Django App to manage registration to events.\n\n[![Pypi Version](https://img.shields.io/pypi/v/django-oneevent.svg)](https://pypi.org/project/django-oneevent/)\n[![Python Versions](https://img.shields.io/pypi/pyversions/django-oneevent.svg)](https://pypi.org/project/django-oneevent/)\n[![Build Status](https://travis-ci.org/gchazot/OneEvent.svg?branch=master)](https://travis-ci.org/gchazot/OneEvent)\n\n## Usage\n\n### Basics\nThe objective of OneEvent is to simplify provide people organising an event with a tool to:\n* Let participants quickly self-register to the event\n* Let participants update or cancel their registration to the event\n* Ask participants simple questions about their registration. These are called \"Choices\", and the\npossible answers are called \"options\".\n* Provide aggregated views of participants and their choices to the organisers.\n\nSo, there are 2 categories of users for the app: **organisers** and **participants**.\n\n#### Event creation (Organiser)\nThe story starts then when a user creates a new event. They then become the \"organiser\" of that\nevent. The creation process happens by filling in a few details about the event, like a title,\ndescription and time frame. The organiser can also add some choices that participants will have to\nmake and the options that they will be able to choose.\n\nOnce the event is created, the organiser can **publish** the event to make it visible to other\nusers. They can then *invite* participants by sharing with them the registration URL to the event.\n\n#### Registration (Participant)\nWhen a user navigates to the registration page, they are provided with a single-page with all the\npublic details about the event (Location, date and time, description, etc.).\n\nThere, they can confirm or decline their attendance to the event and select their answer for each\nof the choices that the organiser has asked them to make.\n\nThis is all that participants usually have to do.\n\n#### Event management (Organiser)\nUp until the event actually happens (the app is not very useful after that). Organisers can access\nthe event management page. There, they are provided with details of all the participants and their\nchoices, in tabular and aggregated views.\n\nThere they can also export that data to a spreadsheet format, to automate printing of customised\nseat tags for example or any other exciting thing planned for the participants.\n\n#### Event modification (Organiser)\nAt any point, the organiser can update the details of the event. Especially, there is a point at\nwhich they will want to close registration to the event, or even archive it (hopefully after it's\nhappened).\n\n**Special care** should be taken when modifying the choices and options provided to participants,\nas those changes cannot be undone, and may result in loosing the choices that participants have\nalready made and saved.\n\n### Advanced concepts\nOneEvent provides a few advanced features to help with the organisation of complex events.\n\n#### Multiple Organisers\nIt is possible to add more organisers to an event. They will get access to some of the management\nfeatures of the app so they can help with the organisation.\n\n#### Registration limits\nOrganisers can define some limits for registration, all of them are optional:\n* Maximum Number of Participants: Once the number of attending participants reaches that limits,\nusers that have not confirmed their attendance yet will be presented with an error message. Note\nthat a value of 0 (zero) means that there is no limit.\n* Booking Close Time: If defined, users that have not confirmed attendance yet will not be allowed\nto do it any more after this time.\n* Choices close time: If defined, participants will still be able to modify their choices up until\nthis time. This time needs to be equal or later than the Booking Close Time.\n\n#### Sessions\nSome events require participants to choose which session they want to attend.\n\nFor example, I might be organising a small training of 30 mins in my company, in a room that can\ntake 10 people but I have to train 50 of them. This would be an ideal scenario to describe by\noffering (at least) 5 different sessions that participants can choose from.\n\n(Note that this can only be configured after the event has been created)\n\n#### Pricing Categories\nSadly, sometimes, participants have to contribute to be able to attend your event. OneEvent provides\nan easy way to track who has paid what they owe.\n\nMultiple categories of price can be defined and named to offer different prices. Users can be\nmatched to each category based on the **groups** they belong to. More on users and groups in next\nsection about user accounts.\n\n### User accounts\nOneEvent relies on Django user and group management. This means it's your site that needs to\nimplement user authentication.\n\nFor most functionality, only **User** accounts are required to use the app. However, in order to\ndefine multiple *Pricing Categories*, Users must be assigned into groups that allow OneEvent to\ndecide which category the user belongs to.\n\nMaking sure that users are in the Groups they are supposed to can be tricky, but this functionality\ncan prove particularly useful in corporate environments if your site's authentication system can\nassign users to groups depending on the structure of your organisation.\n\n## Installation\nOneEvent is only tested with Django 1.11 running on Python 2.7. The instructions below assume those\nare used. Feel free to report any successful experience using it with different versions. \n\nNote: As an example, have a look at the [`dev_server.sh`](dev_server.sh) file and the resulting\ndevelopment site it creates. You may also have a look at\n[this sandbox website](https://oneevent-sandbox.herokuapp.com/) and\n[the repository that manages it](https://github.com/gchazot/oneevent-sandbox)\n\n#### Python package\nFirst, install the python package:\n```shell script\npip install django-oneevent\n```\nYou will probably want to add it, potentially with a pinned down version, in your `requirements.txt`\nor other dependency configuration you're using.\n\n#### Django settings\nThen you can add the app and its dependencies to your Django settings file:\n```python\n# settings.py\n\nINSTALLED_APPS = [\n    ...\n    'oneevent',\n    'crispy_forms',\n    ...\n]\n\n#### Django URLs\nLoad the configuration for the URL views.\n\n```python\nfrom django.conf.urls import include, url\n\nurlpatterns += [\n    ...\n    url(r'^', include('oneevent.urls')),\n    ...\n]\n```\n\nA few customizations are available:\n* Define the name of the site or the color of the navbar in settings.\n```python\nONEEVENT_SITE_BRAND = \"OneEvent Sandbox\"\nONEEVENT_NAVBAR_COLOR = \"green\"\n```\n* Customise the authentication section in the navbar. To do this, just create in your site's\n`<templates_folder>/oneevent/` folder one or more of the following template files and fill it with\nyour desired content:\n  * `navbar_auth_avatar.html`: To customise just the user menu title\n  * `navbar_auth_extra_actions.html`: To insert actions in the user menu\n  * `navbar_auth.html`: To customise the entire user menu section\n\n  A good starting point is to copy the file from our code.\n\n## Development\nThe `dev_server.sh` script is here to help setting up a development site.\n\n```shell script\n./dev_server.sh run\n```\nThis will start a local dev server running with its own virtualenv.\n\n```shell script\n./dev_server.sh test\n```\nThis will run all the tests currently available in the codebase and provided by Django.\n\n```shell script\n./dev_server.sh --help\n```\nFor more options the script has to offer.\n\n## Releasing\n#### Preparation\n* Merge all desired changes to `master`\n* Update `setup.cfg` with the new version number and commit\n* Tag the desired version\n* Push the tag to GitHub\n\n#### Automatic release\n[Travis the Builder](https://travis-ci.org/github/gchazot/OneEvent) takes care of everything.\n\n#### Manual release process\nA little more involved but it's Okay I guess\n```shell script\nrm -rf build/ dist/ django_oneevent.egg-info/\npython setup.py sdist\ntwine upload dist/*\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gchazot/OneEvent",
    "keywords": "",
    "license": "License :: OSI Approved :: MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-oneevent",
    "package_url": "https://pypi.org/project/django-oneevent/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-oneevent/",
    "project_urls": {
      "Homepage": "https://github.com/gchazot/OneEvent"
    },
    "release_url": "https://pypi.org/project/django-oneevent/1.0.0/",
    "requires_dist": null,
    "requires_python": "~=3.6",
    "summary": "A Django app to manage registration to events.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15354659,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "040fea403606d26fca0315ed1bb5da1a18c280373b077e6d02eaa03c10af6081",
        "md5": "c622d6efa6ec3e6ae49b2f9cd7cd76b2",
        "sha256": "092d9337c24911f98bb16b5032e2e7dae0da3e010de0b76eae76be9ba2397aac"
      },
      "downloads": -1,
      "filename": "django-oneevent-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c622d6efa6ec3e6ae49b2f9cd7cd76b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 43601,
      "upload_time": "2020-05-11T06:53:00",
      "upload_time_iso_8601": "2020-05-11T06:53:00.432144Z",
      "url": "https://files.pythonhosted.org/packages/04/0f/ea403606d26fca0315ed1bb5da1a18c280373b077e6d02eaa03c10af6081/django-oneevent-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}