{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "========================\ndjango-linear-migrations\n========================\n\n.. image:: https://img.shields.io/github/workflow/status/adamchainz/django-linear-migrations/CI/master?style=for-the-badge\n   :target: https://github.com/adamchainz/django-linear-migrations/actions?workflow=CI\n\n.. image:: https://img.shields.io/codecov/c/github/adamchainz/django-linear-migrations/master?style=for-the-badge\n   :target: https://app.codecov.io/gh/adamchainz/django-linear-migrations\n\n.. image:: https://img.shields.io/pypi/v/django-linear-migrations.svg?style=for-the-badge\n   :target: https://pypi.org/project/django-linear-migrations/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nEnsure your migration history is linear.\n\nFor a bit of background, see the `introductory blog post <https://adamj.eu/tech/2020/12/10/introducing-django-linear-migrations/>`__.\n\nRequirements\n============\n\nPython 3.6 to 3.9 supported.\n\nDjango 2.2 to 3.2 supported.\n\n----\n\n**Are your tests slow?**\nCheck out my book `Speed Up Your Django Tests <https://gumroad.com/l/suydt>`__ which covers loads of best practices so you can write faster, more accurate tests.\n\n----\n\nInstallation\n============\n\nFirst, install with **pip**:\n\n.. code-block:: bash\n\n    python -m pip install django-linear-migrations\n\nSecond, add the app to your ``INSTALLED_APPS`` setting:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        ...\n        \"django_linear_migrations\",\n        ...\n    ]\n\nThe app relies on overriding the built-in ``makemigrations`` command.\nIf your project has a custom ``makemigrations`` command, ensure the app containing your custom command is **above** ``django_linear_migrations``, and that your command subclasses its ``Command`` class:\n\n.. code-block:: python\n\n    # myapp/management/commands/makemigrations.py\n    from django_linear_migrations.management.commands.makemigrations import (\n        Command as BaseCommand,\n    )\n\n\n    class Command(BaseCommand):\n        ...\n\nThird, check the automatic detection of first-party apps.\nRun this command:\n\n.. code-block:: sh\n\n    python manage.py create-max-migration-files --dry-run\n\nThis command is for creating ``max_migration.txt`` files (more on which later) - in dry run mode it lists the apps it would make such files for.\nIt tries to automatically detect which apps are first-party, i.e. belong to your project.\nThe automatic detection checks the path of app’s code to see if is within a virtualenv, but this detection can sometimes fail, for example on editable packages installed with ``-e``.\nIf you see any apps listed that *aren’t* part of your project, define the list of first-party apps’ labels in a ``FIRST_PARTY_APPS`` setting that you combine into ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    FIRST_PARTY_APPS = [\n\n    ]\n\n    INSTALLED_APPS = FIRST_PARTY_APPS + [\n        \"django_linear_migrations\",\n        ...\n    ]\n\n(Note: Django recommends you always list first-party apps first in your project so they can override things in third-party and contrib apps.)\n\nFourth, create the ``max_migration.txt`` files for your first-party apps:\n\n.. code-block:: sh\n\n    python manage.py create-max-migration-files\n\nIn the future, when you add a new app to your project, you’ll need to add it to ``FIRST_PARTY_APPS`` (if defined) and rerun this command for the new app’s label:\n\n.. code-block:: sh\n\n    python manage.py create-max-migration-files my_new_app\n\nUsage\n=====\n\ndjango-linear-migrations helps you work on Django projects where several branches adding migrations may be in progress at any time.\nIt enforces that your apps have a *linear* migration history, avoiding merge migrations and the problems they can cause from migrations running in different orders.\nIt does this by making ``makemigrations`` record the name of the latest migration in per-app ``max_migration.txt`` files.\nThese files will then cause a merge conflicts in your source control tool (Git, Mercurial, etc.) in the case of migrations being developed in parallel.\nThe first merged migration for an app will prevent the second from being merged, without addressing the conflict.\nThe included ``rebase-migration`` command can help automatically such conflicts.\n\nSystem Checks\n-------------\n\ndjango-linear-migrations comes with several system checks that verify that your ``max_migration.txt`` files are in sync.\nThese are:\n\n* ``dlm.E001``: ``<app_label>``'s max_migration.txt does not exist.\n* ``dlm.E002``: ``<app_label>``'s max_migration.txt contains multiple lines.\n* ``dlm.E003``: ``<app_label>``'s max_migration.txt points to non-existent migration '``<bad_migration_name>``'.\n* ``dlm.E004``: ``<app_label>``'s max_migration.txt contains '``<max_migration_name>``', but the latest migration is '``<real_max_migration_name>``'.\n\n``rebase-migration`` command\n----------------------------\n\nThis management command can help you fix migration conflicts.\nFollowing a conflicted “rebase” operation in your source control tool, run it with the name of the app to auto-fix the migrations for:\n\n.. code-block:: console\n\n    $ python manage.py rebase-migration <app_label>\n\nNote rebasing the migration might not always be the *correct* thing to do.\nIf the migrations in main and feature branches have both affected the same models, rebasing the migration on the end may not make sense.\nHowever, such parallel changes would *normally* cause conflicts in your models files or other parts of the source code as well.\n\nLet's walk through an example using Git, although it should extend to other source control tools.\n\nImagine you were working on your project's ``books`` app in a feature branch called ``titles`` and created a migration called ``0002_longer_titles``.\nMeanwhile a commit has been merged to your ``main`` branch with a *different* 2nd migration for ``books`` called ``0002_author_nicknames``.\nThanks to django-linear-migrations, the ``max_migration.txt`` file will show as conflicted between your feature and main branches.\n\nYou start the fix by reversing your new migration from your local database.\nThis is necessary since it will be renamed after rebasing and seen as unapplied.\nYou do this by switching to the feature branch ``titles`` migrating back to the last common migration:\n\n.. code-block:: console\n\n    $ git switch titles\n    $ python manage.py migrate books 0001\n\nYou then fetch the latest code:\n\n.. code-block:: console\n\n    $ git switch main\n    $ git pull\n    ...\n\nYou then rebase your ``titles`` branch on top of it, for which Git will detect the conflict on ``max_migration.txt``:\n\n.. code-block:: console\n\n    $ git switch titles\n    $ git rebase main\n    Auto-merging books/models.py\n    CONFLICT (content): Merge conflict in books/migrations/max_migration.txt\n    error: could not apply 123456789... Increase Book title length\n    Resolve all conflicts manually, mark them as resolved with\n    \"git add/rm <conflicted_files>\", then run \"git rebase --continue\".\n    You can instead skip this commit: run \"git rebase --skip\".\n    To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\n    Could not apply 123456789... Increase Book title length\n\nIf you look at the contents of the ``books`` app's ``max_migration.txt`` at this point, it will look something like this:\n\n.. code-block:: console\n\n    $ cat books/migrations/max_migration.txt\n    <<<<<<< HEAD\n    0002_author_nicknames\n    =======\n    0002_longer_titles\n    >>>>>>> 123456789 (Increase Book title length)\n\nIt's at this point you can use ``rebase-migration`` to automatically fix the ``books`` migration history:\n\n.. code-block:: console\n\n    $ python manage.py rebease-migration books\n    Renamed 0002_longer_titles.py to 0003_longer_titles.py, updated its dependencies, and updated max_migration.txt.\n\nThis places the conflicted migration on the end of the migration history.\nIt renames the file appropriately, modifies its ``dependencies = [...]`` declaration, and updates the migration named in ``max_migration.txt`` appropriately.\n\nAfter this, you should be able to continue the rebase:\n\n.. code-block:: console\n\n    $ git add books/migrations\n    $ git rebase --continue\n\nAnd then migrate your local database to allow you to continue development:\n\n.. code-block:: console\n\n    $ python manage.py migrate books\n    Operations to perform:\n      Target specific migration: 0003_longer_titles, from books\n    Running migrations:\n      Applying books.0002_author_nicknames... OK\n      Applying books.0003_longer_titles... OK\n\nInspiration\n===========\n\nI’ve seen similar techniques to the one implemented by django-linear-migrations at several places, and they acted as the inspiration for putting this package together.\nMy previous client `Pollen <https://pollen.co/>`__ and current client `ev.energy <https://ev.energy/>`__ both have implementations.\nThis `Doordash blogpost <https://medium.com/@DoorDash/tips-for-building-high-quality-django-apps-at-scale-a5a25917b2b5>`__ covers a similar system that uses a single file for tracking latest migrations.\nAnd there's also a package called `django-migrations-git-conflicts <https://pypi.org/project/django-migrations-git-conflicts/>`__ which works fairly similarly.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-linear-migrations",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-linear-migrations",
    "package_url": "https://pypi.org/project/django-linear-migrations/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-linear-migrations/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-linear-migrations/blob/master/HISTORY.rst",
      "Homepage": "https://github.com/adamchainz/django-linear-migrations",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/django-linear-migrations/1.5.0/",
    "requires_dist": [
      "Django (>=2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Ensure your migrations are linear.",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024220,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2deb1ced0591ff842f99c7f590fb18c12fc170230a15e97d6f1a76b653e511a9",
        "md5": "8b3dbb8963406a0585adf339d74b797a",
        "sha256": "eb5eba1e002757eeaa9d9a221e934622a94bf5e999467f2c018f27e675874fd6"
      },
      "downloads": -1,
      "filename": "django_linear_migrations-1.5.0-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "8b3dbb8963406a0585adf339d74b797a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12116,
      "upload_time": "2021-01-25T14:49:31",
      "upload_time_iso_8601": "2021-01-25T14:49:31.553422Z",
      "url": "https://files.pythonhosted.org/packages/2d/eb/1ced0591ff842f99c7f590fb18c12fc170230a15e97d6f1a76b653e511a9/django_linear_migrations-1.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cfca0a64a08c9ddf50803c20ba94fd42450524e516c835de88f99f5adb93d7f0",
        "md5": "0f4f66f6daff10a2317541d0026a76fd",
        "sha256": "5b4701fa6b5415cffca241d2942da0a04bcf104b6907e1a0191bc00d1a204fc2"
      },
      "downloads": -1,
      "filename": "django-linear-migrations-1.5.0.tar.gz",
      "has_sig": true,
      "md5_digest": "0f4f66f6daff10a2317541d0026a76fd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 83742,
      "upload_time": "2021-01-25T14:49:33",
      "upload_time_iso_8601": "2021-01-25T14:49:33.171535Z",
      "url": "https://files.pythonhosted.org/packages/cf/ca/0a64a08c9ddf50803c20ba94fd42450524e516c835de88f99f5adb93d7f0/django-linear-migrations-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}