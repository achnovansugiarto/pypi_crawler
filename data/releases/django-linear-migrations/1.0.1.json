{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "========================\ndjango-linear-migrations\n========================\n\n.. image:: https://img.shields.io/github/workflow/status/adamchainz/django-linear-migrations/CI/master?style=for-the-badge\n   :target: https://github.com/adamchainz/django-linear-migrations/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/django-linear-migrations.svg?style=for-the-badge\n   :target: https://pypi.org/project/django-linear-migrations/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nEnsure your migration history is linear.\n\nRequirements\n============\n\nPython 3.6 to 3.9 supported.\n\nDjango 2.2 to 3.1 supported.\n\n----\n\n**Are your tests slow?**\nCheck out my book `Speed Up Your Django Tests <https://gumroad.com/l/suydt>`__ which covers loads of best practices so you can write faster, more accurate tests.\n\n----\n\nInstallation\n============\n\nFirst, install with **pip**:\n\n.. code-block:: bash\n\n    python -m pip install django-linear-migrations\n\nSecond, add the app to your ``INSTALLED_APPS`` setting:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        ...\n        \"django_linear_migrations\",\n        ...\n    ]\n\nThe app relies on overriding the built-in ``makemigrations`` command.\nIf your project has a custom ``makemigrations`` command, ensure the app containing your custom command is **above** ``django_linear_migrations``, and that your command subclasses its ``Command`` class:\n\n.. code-block:: python\n\n    # myapp/management/commands/makemigrations.py\n    from django_linear_migrations.management.commands.makemigrations import (\n        Command as BaseCommand,\n    )\n\n\n    class Command(BaseCommand):\n        ...\n\nThird, run this one-off command for installation:\n\n.. code-block:: sh\n\n    python manage.py create-max-migration-files\n\nThis creates a new ``max_migration.txt`` file in each of your first-party apps’ ``migrations`` directories and exits.\nMore on those files below...\n\nUsage\n=====\n\ndjango-linear-migrations helps you work on Django projects where several branches adding migrations may be in progress at any time.\nIt enforces that your apps have a *linear* migration history, avoiding merge migrations and the problems they can cause from migrations running in different orders.\nIt does this by making ``makemigrations`` record the name of the latest migration in per-app ``max_migration.txt`` files.\nThese files will then cause a merge conflicts in your source control tool (Git, Mercurial, etc.) in the case of migrations being developed in parallel.\nThe first merged migration for an app will prevent the second from being merged, without addressing the conflict.\nThe included ``rebase-migration`` command can help automatically such conflicts.\n\nSystem Checks\n-------------\n\ndjango-linear-migrations comes with several system checks that verify that your ``max_migration.txt`` files are in sync.\nThese are:\n\n* ``dlm.E001``: ``<app_label>``'s max_migration.txt does not exist.\n* ``dlm.E002``: ``<app_label>``'s max_migration.txt contains multiple lines.\n* ``dlm.E003``: ``<app_label>``'s max_migration.txt points to non-existent migration '``<bad_migration_name>``'.\n* ``dlm.E004``: ``<app_label>``'s max_migration.txt contains '``<max_migration_name>``', but the latest migration is '``<real_max_migration_name>``'.\n\n``rebase-migration`` command\n----------------------------\n\nThis management command can help you fix migration conflicts.\nFollowing a conflicted “rebase” operation in your source control tool, run it with the name of the app to auto-fix the migrations for:\n\n.. code-block:: console\n\n    $ python manage.py rebase-migration <app_label>\n\nLet's walk through an example using Git, although it should extend to other source control tools.\n\nImagine you were working on your project's ``books`` app in a feature branch and created a migration called ``0002_longer_titles``.\nMeanwhile a commit has been merged to your ``main`` branch with a *different* 2nd migration for ``books`` called ``0002_author_nicknames``.\nThanks to django-linear-migrations, the ``max_migration.txt`` file will show as conflicted between your feature and main branches.\n\nYou can start to fix the conflict by pulling your latest ``main`` branch, then rebasing your ``titles`` branch on top of it.\nWhen you do this, Git will report the conflict:\n\n.. code-block:: console\n\n    $ git switch main\n    $ git pull\n    ...\n    $ git switch titles\n    $ git rebase main\n    Auto-merging books/models.py\n    CONFLICT (content): Merge conflict in books/migrations/max_migration.txt\n    error: could not apply 123456789... Increase Book title length\n    Resolve all conflicts manually, mark them as resolved with\n    \"git add/rm <conflicted_files>\", then run \"git rebase --continue\".\n    You can instead skip this commit: run \"git rebase --skip\".\n    To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\n    Could not apply 123456789... Increase Book title length\n\nIf you look at the contents of the ``books`` app's ``max_migration.txt`` at this point, it will look something like this:\n\n.. code-block:: console\n\n    $ cat books/migrations/max_migration.txt\n    <<<<<<< HEAD\n    0002_author_nicknames\n    =======\n    0002_longer_titles\n    >>>>>>> 123456789 (Increase Book title length)\n\nIt's at this point you can use ``rebase-migration`` to automatically fix the ``books`` migration history:\n\n.. code-block:: console\n\n    $ python manage.py rebease-migration books\n    Renamed 0002_longer_titles.py to 0003_longer_titles.py, updated its dependencies, and updated max_migration.txt.\n\nThis places the conflcited migration on the end of the migration history.\nIt renames the file appropriately, modifies its ``dependencies = [...]`` declaration, and updates the migration named in ``max_migration.txt`` appropriately.\n\nAfter this, you should be able to continue the rebase:\n\n.. code-block:: console\n\n    $ git add books/migrations\n    $ git rebase --continue\n\nNote this might not always be the *correct* thing to do.\nIf the migrations in main and feature branches have both affected the same models, rebasing the migration on the end may not make sense.\nHowever, such parallel changes would *normally* cause conflicts in other parts of the source code as well, such as in the models.\n\nInspiration\n===========\n\nI’ve seen similar techniques to the one implemented by django-linear-migrations at several places, and they acted as the inspiration for putting this package together.\nMy previous client `Pollen <https://pollen.co/>`__ and current client `ev.energy <https://ev.energy/>`__ both have implementations.\nThis `Doordash blogpost <https://medium.com/@DoorDash/tips-for-building-high-quality-django-apps-at-scale-a5a25917b2b5>`__ covers a similar system that uses a single file for tracking latest migrations.\nAnd there's also a package called `django-migrations-git-conflicts <https://pypi.org/project/django-migrations-git-conflicts/>`__ which works fairly similarly.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-linear-migrations",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-linear-migrations",
    "package_url": "https://pypi.org/project/django-linear-migrations/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-linear-migrations/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-linear-migrations/blob/master/HISTORY.rst",
      "Homepage": "https://github.com/adamchainz/django-linear-migrations",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/django-linear-migrations/1.0.1/",
    "requires_dist": [
      "Django (>=2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Ensure your migrations are linear.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024220,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f747c23ba3b86c0ae4ad19e9b8ffb24e25ae242aebeb1b2b04122de3bdfd962",
        "md5": "29deef49e8e27518265e586976269682",
        "sha256": "c8beece265168a173b4b8e94f1e7107a195b885a31bd71ae810512e6d520b34e"
      },
      "downloads": -1,
      "filename": "django_linear_migrations-1.0.1-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "29deef49e8e27518265e586976269682",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10992,
      "upload_time": "2020-12-11T14:35:12",
      "upload_time_iso_8601": "2020-12-11T14:35:12.779605Z",
      "url": "https://files.pythonhosted.org/packages/3f/74/7c23ba3b86c0ae4ad19e9b8ffb24e25ae242aebeb1b2b04122de3bdfd962/django_linear_migrations-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a27921d30d80673dc696f0450484087ef72e5de2e2b07c10a8a365ba63e5bdec",
        "md5": "a2496eba7f8f3a9fae1d1bf3b20366cd",
        "sha256": "ba7a3d7eb60cf87321e86572a8f2a2cfb3e2207597e44d31b04a0b7e4d7a34a9"
      },
      "downloads": -1,
      "filename": "django-linear-migrations-1.0.1.tar.gz",
      "has_sig": true,
      "md5_digest": "a2496eba7f8f3a9fae1d1bf3b20366cd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 77449,
      "upload_time": "2020-12-11T14:35:14",
      "upload_time_iso_8601": "2020-12-11T14:35:14.128036Z",
      "url": "https://files.pythonhosted.org/packages/a2/79/21d30d80673dc696f0450484087ef72e5de2e2b07c10a8a365ba63e5bdec/django-linear-migrations-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}