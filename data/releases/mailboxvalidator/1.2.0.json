{
  "info": {
    "author": "MailboxValidator.com",
    "author_email": "support@mailboxvalidator.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "MailboxValidator Python Module\n==============================\n\nThis Python module enables user to easily validate if an email address is valid, a type of disposable email or free email.\n\nThis module can be useful in many types of projects, for example\n\n - to validate an user's email during sign up\n - to clean your mailing list prior to email sending\n - to perform fraud check\n - and so on\n\n\nInstallation\n============\n\nTo install this module type the following:\n\n\tpip install MailboxValidator\n\n\nDependencies\n============\n\nAn API key is required for this module to function.\n\nGo to https://www.mailboxvalidator.com/plans#api to sign up for FREE API plan and you'll be given an API key.\n\n\nFunctions\n=========\n\n## EmailValidation(api_key)\n\nCreates a new instance of the MailboxValidator object with the API key.\n\n## validate_email(email_address)\n\nPerforms email validation on the supplied email address.\n\n### Return Fields\n\n| Field Name | Description |\n|-----------|------------|\n| email_address | The input email address. |\n| domain | The domain of the email address. |\n| is_free | Whether the email address is from a free email provider like Gmail or Hotmail. Return values: True, False |\n| is_syntax | Whether the email address is syntactically correct. Return values: True, False |\n| is_domain | Whether the email address has a valid MX record in its DNS entries. Return values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable) |\n| is_smtp | Whether the mail servers specified in the MX records are responding to connections. Return values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable) |\n| is_verified | Whether the mail server confirms that the email address actually exist. Return values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable) |\n| is_server_down | Whether the mail server is currently down or unresponsive. Return values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable) |\n| is_greylisted | Whether the mail server employs greylisting where an email has to be sent a second time at a later time. Return values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable) |\n| is_disposable | Whether the email address is a temporary one from a disposable email provider. Return values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable) |\n| is_suppressed | Whether the email address is in our blacklist. Return values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable) |\n| is_role | Whether the email address is a role-based email address like admin@example.net or webmaster@example.net. Return values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable) |\n| is_high_risk | Whether the email address contains high risk keywords. Return values: True, False, -&nbsp;&nbsp;&nbsp;(- means not applicable) |\n| is_catchall | Whether the email address is a catch-all address. Return values: True, False, Unknown, -&nbsp;&nbsp;&nbsp;(- means not applicable) |\n| mailboxvalidator_score | Email address reputation score. Score > 0.70 means good; score > 0.40 means fair; score <= 0.40 means poor. |\n| time_taken | The time taken to get the results in seconds. |\n| status | Whether our system think the email address is valid based on all the previous fields. Return values: True, False |\n| credits_available | The number of credits left to perform validations. |\n| error_code | The error code if there is any error. See error table in the below section. |\n| error_message | The error message if there is any error. See error table in the below section. |\n\n## is_disposable_email(email_address)\n\nCheck if the supplied email address is from a disposable email provider.\n\n### Return Fields\n\n| Field Name | Description |\n|-----------|------------|\n| email_address | The input email address. |\n| is_disposable | Whether the email address is a temporary one from a disposable email provider. Return values: True, False |\n| credits_available | The number of credits left to perform validations. |\n| error_code | The error code if there is any error. See error table in the below section. |\n| error_message | The error message if there is any error. See error table in the below section. |\n\n## is_free_email(email_address)\n\nCheck if the supplied email address is from a free email provider.\n\n### Return Fields\n\n| Field Name | Description |\n|-----------|------------|\n| email_address | The input email address. |\n| is_free | Whether the email address is from a free email provider like Gmail or Hotmail. Return values: True, False |\n| credits_available | The number of credits left to perform validations. |\n| error_code | The error code if there is any error. See error table in the below section. |\n| error_message | The error message if there is any error. See error table below. |\n\n\nSample Codes\n============\n\n## Validate email\n\n```python\nimport MailboxValidator\n\n\tmbv = MailboxValidator.EmailValidation('PASTE_API_KEY_HERE')\n\tresults = mbv.validate_email('example@example.com')\n\n\tif results is None:\n\t\tprint(\"Error connecting to API.\\n\")\n\telif results['error_code'] == '':\n\t\tprint('email_address = ' + results['email_address'] + \"\\n\")\n\t\tprint('domain = ' + results['domain'] + \"\\n\")\n\t\tprint('is_free = ' + results['is_free'] + \"\\n\")\n\t\tprint('is_syntax = ' + results['is_syntax'] + \"\\n\")\n\t\tprint('is_domain = ' + results['is_domain'] + \"\\n\")\n\t\tprint('is_smtp = ' + results['is_smtp'] + \"\\n\")\n\t\tprint('is_verified = ' + results['is_verified'] + \"\\n\")\n\t\tprint('is_server_down = ' + results['is_server_down'] + \"\\n\")\n\t\tprint('is_greylisted = ' + results['is_greylisted'] + \"\\n\")\n\t\tprint('is_disposable = ' + results['is_disposable'] + \"\\n\")\n\t\tprint('is_suppressed = ' + results['is_suppressed'] + \"\\n\")\n\t\tprint('is_role = ' + results['is_role'] + \"\\n\")\n\t\tprint('is_high_risk = ' + results['is_high_risk'] + \"\\n\")\n\t\tprint('is_catchall = ' + results['is_catchall'] + \"\\n\")\n\t\tprint('mailboxvalidator_score = ' + str(results['mailboxvalidator_score']) + \"\\n\")\n\t\tprint('time_taken = ' + str(results['time_taken']) + \"\\n\")\n\t\tprint('status = ' + results['status'] + \"\\n\")\n\t\tprint('credits_available = ' + str(results['credits_available']) + \"\\n\")\n\telse:\n\t\tprint('error_code = ' + results['error_code'] + \"\\n\")\n\t\tprint('error_message = ' + results['error_message'] + \"\\n\")\n```\n\n\n## Check if an email is from a disposable email provider\n\n```python\nimport MailboxValidator\n\n\tmbv = MailboxValidator.EmailValidation('PASTE_API_KEY_HERE')\n\tresults = mbv.is_disposable_email('example@example.com')\n\n\tif results is None:\n\t\tprint(\"Error connecting to API.\\n\")\n\telif results['error_code'] == '':\n\t\tprint('email_address = ' + results['email_address'] + \"\\n\")\n\t\tprint('is_disposable = ' + results['is_disposable'] + \"\\n\")\n\t\tprint('credits_available = ' + str(results['credits_available']) + \"\\n\")\n\telse:\n\t\tprint('error_code = ' + results['error_code'] + \"\\n\")\n\t\tprint('error_message = ' + results['error_message'] + \"\\n\")\n```\n\n## Check if an email is from a free email provider\n\n```python\nimport MailboxValidator\n\n\tmbv = MailboxValidator.EmailValidation('PASTE_API_KEY_HERE')\n\tresults = mbv.is_free_email('example@example.com')\n\n\tif results is None:\n\t\tprint(\"Error connecting to API.\\n\")\n\telif results['error_code'] == '':\n\t\tprint('email_address = ' + results['email_address'] + \"\\n\")\n\t\tprint('is_free = ' + results['is_free'] + \"\\n\")\n\t\tprint('credits_available = ' + str(results['credits_available']) + \"\\n\")\n\telse:\n\t\tprint('error_code = ' + results['error_code'] + \"\\n\")\n\t\tprint('error_message = ' + results['error_message'] + \"\\n\")\n```\n\nErrors\n======\n\n| error_code | error_message |\n| ---------- | ------------- |\n| 100 | Missing parameter. |\n| 101 | API key not found. |\n| 102 | API key disabled. |\n| 103 | API key expired. |\n| 104 | Insufficient credits. |\n| 105 | Unknown error. |\n\nCopyright\n=========\n\nCopyright (C) 2018-2021 by MailboxValidator.com, support@mailboxvalidator.com\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MailboxValidator/mailboxvalidator-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MailboxValidator",
    "package_url": "https://pypi.org/project/MailboxValidator/",
    "platform": "",
    "project_url": "https://pypi.org/project/MailboxValidator/",
    "project_urls": {
      "Homepage": "https://github.com/MailboxValidator/mailboxvalidator-python"
    },
    "release_url": "https://pypi.org/project/MailboxValidator/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Email verification module for Python using MailboxValidator API. It validates if the email is valid, from a free provider, contains high-risk keywords, whether it's a catch-all address and so much more.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10833108,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a9c354c78652596a7ff1146868365d80cb536000a4b2eed491f87993909679cc",
        "md5": "33c2a1586aeea2158a8ec0fa3ae9d41a",
        "sha256": "876a62e0cbe620e0ea026e302fd9781639d46b9c64ee0f846a4a7bf1cedcf3de"
      },
      "downloads": -1,
      "filename": "MailboxValidator-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "33c2a1586aeea2158a8ec0fa3ae9d41a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4702,
      "upload_time": "2021-07-06T09:00:56",
      "upload_time_iso_8601": "2021-07-06T09:00:56.745225Z",
      "url": "https://files.pythonhosted.org/packages/a9/c3/54c78652596a7ff1146868365d80cb536000a4b2eed491f87993909679cc/MailboxValidator-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06dd26f161716648e9694f5f555a47280163cacbe7797982cd58891b1074e4e8",
        "md5": "4047dcdd7f06765da4ccb5202083812b",
        "sha256": "eaceae0413e4ef32dfdf42723c17ea7f7693a69ca505c94db448f5bc2ac26497"
      },
      "downloads": -1,
      "filename": "MailboxValidator-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4047dcdd7f06765da4ccb5202083812b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3908,
      "upload_time": "2021-07-06T09:00:58",
      "upload_time_iso_8601": "2021-07-06T09:00:58.129815Z",
      "url": "https://files.pythonhosted.org/packages/06/dd/26f161716648e9694f5f555a47280163cacbe7797982cd58891b1074e4e8/MailboxValidator-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}