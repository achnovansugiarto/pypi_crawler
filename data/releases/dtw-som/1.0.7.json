{
  "info": {
    "author": "Maria Ines Silva",
    "author_email": "misilva73@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Education",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "# DTW-SOM: Self-organizing map for time-series data\n\nThe method DTW-SOM (Dynamic Time Warping Self-Organizing Map) was built for the paper \n*Exploring time-series motifs through DTW-SOM*. In the [github repository](https://github.com/misilva73/dtw_som), you'll\n find all the work presented in the paper.\n\nDTW-SOM is a vanilla Self-Organizing Map with three main differences, namely (1) the use the Dynamic Time Warping \ndistance instead of the Euclidean distance, (2) the adoption of two new network initialization routines (a random sample \ninitialization and an anchor initialization) and (3) the adjustment of the Adaptation phase of the training to work with \nvariable-length time-series sequences.\n\nIn the paper, we argue that visually exploring time-series motifs computed by motif discovery algorithms can be useful\n to understand and debug results and we propose the use of DTW-SOM on the list of motif’s centers to conduct these \nexplorations. We then test DTW-SOM in a synthetic motif dataset and a real time-series dataset called GunPoint. After an \nexploration of results, we conclude that DTW-SOM is capable of extracting relevant information from a set of motifs and \ndisplay it in a visualization that is space-efficient.\n\n## Github project structure\n\n    ├── notebooks          <- Jupyter notebooks use to test dtwsom and to run the anlsysis for the paper (including the plots)\n    ├── paper              <- Folder the the PDF and latex project for the paper\n    ├── src                <- Folder with the dtwsom module\n    ├── README.md          <- The top-level README for this project\n    ├── requirements.txt   <- The requirements file for reproducing the environment used in the paper\n\n## Prerequisites\n\nIn order to run the DTW-SOM package, you need the following packages:\n\n    dtaidistance==1.2.3\n    matplotlib==3.1.2\n    numpy==1.18.1\n    pyclustering==0.9.3.1\n    scipy==1.4.1\n\nIn addition to these, if you wish to run the notebooks in this repository, then you need the following packages:\n\n    jupyterlab==1.2.5\n    matplotlib==3.1.2\n    matrixprofile-ts==0.0.9\n\n## Installing\n\nThis packages is available on PyPI and thus can be directly installed with pip:\n\n```bash\npip install dtw_som\n```\n\nAlternatively, this package can installed from source by cloning this repository and installing it manually with the \ncommand:\n\n```bash\npython setup.py install\n```\n\n## Example Code\n\nImport packages and generate a dummy dataset with 2 clusters, a noisy sine curve and a noise line centered at 10:\n\n```python\nimport dtwsom\nimport math\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pyclustering.nnet.som import type_conn\n\n\ndef gen_noisy_sine_list(f0, fs, mean_dur, size):\n    final_list = []\n    for i in range(size):\n        dur = random.sample([mean_dur-1, mean_dur, mean_dur+1], 1)[0]\n        t = np.arange(dur)\n        sinusoid = np.sin(2*np.pi*t*(f0/fs))\n        noise = np.random.normal(0,0.3, dur)\n        noisy_sinusoid = noise + sinusoid\n        final_list.append(noisy_sinusoid)\n    return final_list\n\ndef gen_noisy_list(mean_dur, size):\n    final_list = []\n    for i in range(size):\n        dur = random.sample([mean_dur-1, mean_dur, mean_dur+1], 1)[0]\n        noise = np.random.normal(0,0.3, dur)+10\n        final_list.append(noise)\n    return final_list\n\n\nsin_dataset = gen_noisy_sine_list(1, 10, 25, 50) + gen_noisy_list(20, 50)\nrandom.shuffle(sin_dataset)\n```\n\nDefine and train the network:\n\n```python\nrows = 3\ncols = 3\nstructure = type_conn.grid_four\nnetwork = dtwsom.DtwSom(rows, cols, structure)\n\nnetwork.train(sin_dataset, 20)\n```\n\nAfter training, you can visualise the U-matrix the Winner matrix:\n\n```python\nnetwork.show_distance_matrix()\nnetwork.show_winner_matrix()\n```\n\nFinally, you can also visualize the each unit as a time-series:\n\n```python\nn_neurons = network._size\nfig, axs = plt.subplots(3,3,figsize=(20, 10), sharey=True)\nfor neuron_index in range(n_neurons):\n    col = math.floor(neuron_index/3)\n    row = neuron_index % 3\n    neuron_weights = network._weights[neuron_index]\n    axs[row, col].plot(np.arange(len(neuron_weights)), neuron_weights, label=str(neuron_index))\n    axs[row, col].set_ylabel(\"Neuron: \"+str(neuron_index))\nplt.show()\n```\n\nTo confirm the output of this example, check the following \n[notebook](https://github.com/misilva73/dtw_som/blob/master/notebooks/testing_dtwsom.ipynb).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/misilva73/dtw_som",
    "keywords": "",
    "license": "GNU Public License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtw-som",
    "package_url": "https://pypi.org/project/dtw-som/",
    "platform": "",
    "project_url": "https://pypi.org/project/dtw-som/",
    "project_urls": {
      "Homepage": "https://github.com/misilva73/dtw_som"
    },
    "release_url": "https://pypi.org/project/dtw-som/1.0.7/",
    "requires_dist": [
      "scipy",
      "matplotlib",
      "numpy",
      "pyclustering",
      "dtaidistance"
    ],
    "requires_python": ">=3.6",
    "summary": "DTW-SOM: Self-organizing map for time-series data",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7534909,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c77220aab992f5815009ef59d008056f985fbae26881fa499d73730cc35acff4",
        "md5": "f0a7019b0e9015a2c9cba4981c6f8ce7",
        "sha256": "388392dec34de0759c98e8da02777613f8588d1d0e42159dca8ce21e29cc058c"
      },
      "downloads": -1,
      "filename": "dtw_som-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f0a7019b0e9015a2c9cba4981c6f8ce7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8385,
      "upload_time": "2020-04-20T11:05:01",
      "upload_time_iso_8601": "2020-04-20T11:05:01.509261Z",
      "url": "https://files.pythonhosted.org/packages/c7/72/20aab992f5815009ef59d008056f985fbae26881fa499d73730cc35acff4/dtw_som-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55161c7240bac980cba5ae273d165eadd2e0174050f71c523cfb41f4baea6ea1",
        "md5": "c27f37e33c7b3928c66b2a72c80607fe",
        "sha256": "5a349e24b6b404b62b45c9b80ede41240029eefe55f826ab9f84fd8914517015"
      },
      "downloads": -1,
      "filename": "dtw-som-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "c27f37e33c7b3928c66b2a72c80607fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8119,
      "upload_time": "2020-04-20T11:05:02",
      "upload_time_iso_8601": "2020-04-20T11:05:02.793325Z",
      "url": "https://files.pythonhosted.org/packages/55/16/1c7240bac980cba5ae273d165eadd2e0174050f71c523cfb41f4baea6ea1/dtw-som-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}