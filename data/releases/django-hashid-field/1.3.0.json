{
  "info": {
    "author": "Nathan Shafer",
    "author_email": "nate-pypi@lotech.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": ".. image:: https://travis-ci.org/nshafer/django-hashid-field.svg?branch=master\n    :target: https://travis-ci.org/nshafer/django-hashid-field\n.. image:: https://badge.fury.io/py/django-hashid-field.svg\n    :target: https://badge.fury.io/py/django-hashid-field\n\nDjango Hashid Field\n====================\n\nA custom Model Field that uses the `Hashids <http://hashids.org/>`_ `library <https://pypi.python.org/pypi/hashids/>`_\nto obfuscate an IntegerField or AutoField. It can be used in new models or dropped in place of an existing IntegerField,\nexplicit AutoField, or an automatically generated AutoField.\n\nFeatures\n--------\n\n* Stores IDs as integers in the database\n* Allows lookups and filtering by either integer, hashid string or Hashid object\n* Can disable integer lookups\n* Can be used as sort key\n* Can drop-in replace an existing IntegerField (HashidField) or AutoField (HashidAutoField)\n* Allows specifying a salt globally\n* Supports custom *salt*, *min_length* and *alphabet* settings per field\n* Supports Django REST Framework Serializers\n\nRequirements\n------------\n\nThis module is tested and known to work with:\n\n* Python 2.7, 3.5\n* Django 1.8, 1.9, 1.10, 1.11\n* Hashids 1.1\n* Django REST Framework 3.5\n\nInstallation\n------------\n\nInstall the package (preferably in a virtualenv):\n\n.. code-block:: bash\n\n    $ pip install django-hashid-field\n\nConfigure a global SALT for all HashidFields to use by default in your settings.py.\n\n.. code-block:: python\n\n    HASHID_FIELD_SALT = \"a long and secure salt value that is not the same as SECRET_KEY\"\n    # Note: You can generate a secure key with:\n    #     from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\n\nAdd it to your model\n\n.. code-block:: python\n\n    from hashid_field import HashidField\n\n    class Book(models.Model):\n        reference_id = HashidField()\n\nMigrate your database\n\n.. code-block:: bash\n\n    $ ./manage.py makemigrations\n    $ ./manage.py migrate\n\nUpgrading\n------------\n\nPlease see the `Change Log <https://github.com/nshafer/django-hashid-field/blob/master/CHANGELOG.md>`_\n\nBasic Usage\n-----------\n\nUse your field like you would any other, for the most part. You can assign integers:\n\n.. code-block:: python\n\n    >>> b = Book()\n    >>> b.reference_id = 123\n    >>> b.reference_id\n    Hashid(123): OwLxW8D\n\nYou can assign valid hashids. It's valid only if it can be decoded into an integer based on your salt:\n\n.. code-block:: python\n\n    >>> b.reference_id = 'r8636LO'\n    >>> b.reference_id\n    Hashid(456): r8636LO\n\nYou can access your field with either integers, hashid strings or Hashid objects:\n\n.. code-block:: python\n\n    >>> Book.objects.filter(reference_id=123)\n    <QuerySet [<Book:  (OwLxW8D)>]>\n    >>> Book.objects.filter(reference_id='OwLxW8D')\n    <QuerySet [<Book:  (OwLxW8D)>]>\n    >>> b = Book.objects.get(reference_id='OwLxW8D')\n    >>> b\n    <Book:  (OwLxW8D)>\n    >>> h = b.reference_id\n    >>> h\n    Hashid(123): OwLxW8D\n    >>> Book.objects.filter(reference_id=h)\n    <Book:  (OwLxW8D)>\n\nThe objects returned from a HashidField are an instance of the class Hashid, and allow basic access to the original\ninteger or the hashid:\n\n.. code-block:: python\n\n    >>> from hashid_field import Hashid\n    >>> h = Hashid(123)\n    >>> h.id\n    123\n    >>> h.hashid\n    'Mj3'\n    >>> print(h)\n    Mj3\n    >>> repr(h)\n    'Hashid(123): Mj3'\n\nHashid Auto Field\n-----------------\n\nAlong with ``HashidField`` there is also a ``HashidAutoField`` that works in the same way, but that auto-increments just\nlike an ``AutoField``.\n\n.. code-block:: python\n\n    from hashid_field import HashidAutoField\n\n    class Book(models.Model):\n        serial_id = HashidAutoField(primary_key=True)\n\nThe only difference is that if you don't assign a value to it when you save, it will auto-generate a value from your\ndatabase, just as an AutoField would do. Please note that ``HashidAutoField`` inherits from ``AutoField`` and there can\nonly be one ``AutoField`` on a model at a time.\n\n.. code-block:: python\n\n    >>> b = Book()\n    >>> b.save()\n    >>> b.serial_id\n    Hashid(1): AJEM7LK\n\nIt can be dropped into an existing model that has an auto-created AutoField (all models do by default) as long as you\ngive it the same name and set ``primary_key=True``. So if you have this model:\n\n.. code-block:: python\n\n    class Author(models.Model):\n        name = models.CharField(max_length=40)\n\nThen Django has created a field for you called 'id' automatically. We just need to override that by specifying our own\nfield with *primary_key* set to True.\n\n.. code-block:: python\n\n    class Author(models.Model):\n        id = HashidAutoField(primary_key=True)\n        name = models.CharField(max_length=40)\n\nAnd now you can use the 'id' or 'pk' attributes on your model instances:\n\n.. code-block:: python\n\n    >>> a = Author.objects.create(name=\"John Doe\")\n    >>> a.id\n    Hashid(60): N8VNa8z\n    >>> Author.objects.get(pk='N8VNa8z')\n    <Author: Author object>\n\nSettings\n--------\n\nHASHID_FIELD_SALT\n~~~~~~~~~~~~~~~~~\n\nYou can optionally set a global Salt to be used by all HashFields and HashidAutoFields in your project, or set the salt\non each individual field. Please note that changing this value will cause all HashidFields to change their values, and\nany previously published IDs will become invalid.\n\n:Type:    string\n:Default: \"\"\n:Example:\n    .. code-block:: python\n\n        HASHID_FIELD_SALT = \"a long and secure salt value that is not the same as SECRET_KEY\"\n\nHASHID_FIELD_ALLOW_INT\n~~~~~~~~~~~~~~~~~~~~~~\n\nGlobal setting on whether or not to allow lookups or fetches of fields using the underlying integer that's stored in the\ndatabase. Enabled by default for backwards-compatibility. You can enable this to prevent users from being to do a\nsequential scan of objects by pulling objects by integers (1, 2, 3) instead of Hashid strings (\"Ba9p1AG\", \"7V9gk9Z\",\n\"wro12zm\").\n\n:Type:    boolean\n:Default: True\n:Example:\n    .. code-block:: python\n\n        HASHID_FIELD_ALLOW_INT = False\n\n\nField Parameters\n----------------\n\nBesides the standard field options, there are 3 settings you can tweak that are specific to HashidField and\nAutoHashidField.\n\n**Please note** that changing any of these values *will* affect the obfuscation of the integers that are\nstored in the database, and will change what are considered \"valid\" hashids. If you have links or URLs that include\nyour HashidField values, then they will stop working after changing any of these values. It's highly advised that you\ndon't change any of these settings once you publish any references to your field.\n\nsalt\n~~~~\n\n:Type:    string\n:Default: settings.HASHID_FIELD_SALT, \"\"\n:Example:\n    .. code-block:: python\n\n        reference_id = HashidField(salt=\"Some salt value\")\n\nmin_length\n~~~~~~~~~~\n\n:Type:     int\n:Default:  7\n:Note:     This defaults to 7 for the field since the maximum IntegerField value can be encoded in 7 characters with\n           the default *alphabet* setting of 62 characters.\n:Example:\n    .. code-block:: python\n\n        reference_id = HashidField(min_length=15)\n\nalphabet\n~~~~~~~~\n\n:Type:    string of characters (16 minimum)\n:Default: Hashids.ALPHABET, which is \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\n:Example:\n    .. code-block:: python\n\n        # Only use numbers and lower-case letters\n        reference_id = HashidField(alphabet=\"0123456789abcdefghijklmnopqrstuvwxyz\")\n\nallow_int\n~~~~~~~~~\n\n:Type:    boolean\n:Default: settings.HASHID_FIELD_ALLOW_INT, True\n:Example:\n    .. code-block:: python\n\n        reference_id = HashidField(allow_int=False)\n\n\nHashid Class\n------------\n\nOperations with a HashidField or HashidAutoField return a ``Hashid`` object. This simple class does the heavy lifting of\nconverting integers and hashid strings back and forth. There shouldn't be any need to instantiate these manually.\n\nMethods\n~~~~~~~\n\n\\__init__(id, salt='', min_length=0, alphabet=Hashids.ALPHABET):\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:id: **REQUIRED** Integer you wish to *encode*\n:salt: Salt to use. **Default**: ''\n:min_length: Minimum length of encoded hashid string. **Default**: 0\n:alphabet: The characters to use in the encoded hashid string. **Default**: Hashids.ALPHABET\n\nset(id)\n^^^^^^^\n\n:id: Integer you with to *encode*\n\nInstance Variables\n~~~~~~~~~~~~~~~~~~\n\nid\n^^\n\n:type: Int\n:value: The *decoded* integer\n\nhashid\n^^^^^^\n\n:type: String\n:value: The *encoded* hashid string\n\nhashids\n^^^^^^^\n\n:type: Hashids()\n:value: The instance of the Hashids class that is used to *encode* and *decode*\n\n\nDjango REST Framework Integration\n=================================\n\nIf you wish to use a HashidField or HashidAutoField with a DRF ModelSerializer, there is one extra step that you must\ntake. Automatic declaration of any Hashid*Fields will result in an ImproperlyConfigured exception being thrown. You\nmust explicitly declare them in your Serializer, as there is no way for the generated field to know how to work with\na Hashid*Field, specifically what 'salt', 'min_length' and 'alphabet' to use, and can lead to very difficult errors or\nbehavior to debug, or in the worst case, corruption of your data. Here is an example:\n\n.. code-block:: python\n\n    from rest_framework import serializers\n    from hashid_field.rest import HashidSerializerCharField\n\n\n    class BookSerializer(serializers.ModelSerializer):\n        reference_id = HashidSerializerCharField(source_field='library.Book.reference_id')\n\n        class Meta:\n            model = Book\n            fields = ('id', 'reference_id')\n\nThe ``source_field`` allows the HashidSerializerCharField to copy the 'salt', 'min_length' and 'alphabet' settings from\nthe given field at ``app_name.model_name.field_name`` so that it can be defined in just one place. Explicit settings are\nalso possible:\n\n.. code-block:: python\n\n    reference_id = HashidSerializerCharField(salt=\"a different salt\", min_length=10, alphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\nIf nothing is given, then the field will use the same global settings as a Hashid*Field. It is very important that the\noptions for the serializer field matches the model field, or else strange errors or data corruption can occur.\n\nHashidSerializerCharField will serialize the value into a Hashids string, but will deserialize either a Hashids string or\ninteger and save it into the underlying Hashid*Field properly. There is also a HashidSerializerIntegerField that will\nserialize the Hashids into an un-encoded integer as well.\n\nPrimary Key Related Fields\n--------------------------\n\nAny models that have a ForeignKey to another model that uses a Hashid*Field as its Primary Key will need to explicitly\ndefine how the\n`PrimaryKeyRelatedField <http://www.django-rest-framework.org/api-guide/relations/#primarykeyrelatedfield>`_\nshould serialize and deserialize the resulting value using the ``pk_field`` argument. For the given ``Author`` model defined\nabove that has an ``id = HashidAutoField(primary_key=True)`` set, your BookSerializer should look like the following.\n\n.. code-block:: python\n\n    from rest_framework import serializers\n    from hashid_field.rest import HashidSerializerCharField\n\n\n    class BookSerializer(serializers.ModelSerializer):\n        author = serializers.PrimaryKeyRelatedField(pk_field=HashidSerializerCharField(source_field='library.Author.id'), read_only=True)\n\n        class Meta:\n            model = Book\n            fields = ('id', 'author')\n\nMake sure you pass the source field to the HashidSerializer*Field so that it can copy the 'salt', 'min_length' and 'alphabet'\nas described above.\n\nThis example sets ``read_only=True`` but you can explicitly define a ``queryset`` or override ``get_queryset(self)`` to allow\nread-write behavior.\n\nFor a ManyToManyField, you must also remember to pass ``many=True`` to the ``PrimaryKeyRelatedField``.\n\n\nHashidSerializerCharField\n-------------------------\n\nSerialize a Hashid\\*Field to a Hashids string, de-serialize either a valid Hashids string or integer into a\nHashid\\*Field.\n\nParameters\n~~~~~~~~~~\n\nsource_field\n^^^^^^^^^^^^\n\nA 3-field dotted notation of the source field to load matching 'salt', 'min_length' and 'alphabet' settings from. Must\nbe in the format of \"app_name.model_name.field_name\". Example: \"library.Book.reference_id\".\n\nsalt, min_length, alphabet\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSee `Field Parameters`_\n\n\nHashidSerializerIntegerField\n============================\n\nSerialize a Hashid\\*Field to an integer, de-serialize either a valid Hashids string or integer into a\nHashid\\*Field. See `HashidSerializerCharField`_ for parameters.\n\nDevelopment\n===========\n\nHere are some rough instructions on how to set up a dev environment to develop this module. Modify as needed. The\nsandbox is a django project that uses django-hashid-id, and is useful for developing features with.\n\n- `git clone https://github.com/nshafer/django-hashid-field.git && cd django-hashid-field`\n- `mkvirtualenv -a . -p /usr/bin/python3 -r sandbox/requirements.txt django-hashid-field`\n- `python setup.py develop`\n- `sandbox/manage.py migrate`\n- `sandbox/manage.py createsuperuser`\n- `sandbox/manage.py loaddata authors books editors`\n- `sandbox/manage.py runserver`\n- `python runtests.py`\n\nFor any pull requests, clone the repo and push to it, then create the PR.\n\nLICENSE\n=======\n\nMIT License. You may use this in commercial and non-commercial projects with proper attribution.\nPlease see the `LICENSE <https://github.com/nshafer/django-hashid-field/blob/master/LICENSE>`_\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nshafer/django-hashid-field",
    "keywords": "django hashids hashid",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-hashid-field",
    "package_url": "https://pypi.org/project/django-hashid-field/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-hashid-field/",
    "project_urls": {
      "Homepage": "https://github.com/nshafer/django-hashid-field"
    },
    "release_url": "https://pypi.org/project/django-hashid-field/1.3.0/",
    "requires_dist": [
      "Django (>1.8,<1.12)",
      "hashids (>=1.2.0)"
    ],
    "requires_python": "",
    "summary": "A Hashids obfuscated Django Model Field",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15452651,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7123d44db0f71e57c0c237b15551df2c6dec289ce596c7337fa107416d79e623",
        "md5": "d54d49c4abe1c44b7c30d6f0577529fa",
        "sha256": "f415a159aebd668f0f77e3e24057811875f98cdd65dbb0309349c2c84c92eaef"
      },
      "downloads": -1,
      "filename": "django_hashid_field-1.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d54d49c4abe1c44b7c30d6f0577529fa",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18369,
      "upload_time": "2017-09-25T22:07:46",
      "upload_time_iso_8601": "2017-09-25T22:07:46.102111Z",
      "url": "https://files.pythonhosted.org/packages/71/23/d44db0f71e57c0c237b15551df2c6dec289ce596c7337fa107416d79e623/django_hashid_field-1.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fdf6ac0bf6df5df2b54bd9426a3653ef412d91314981596b079cee8b06aca41b",
        "md5": "cbb50c816a2f77dd5a6ed65bbe6ac54c",
        "sha256": "e4359219d299015f66ecc750f6c6893bab2a6a6690d9b70d7dfee6b37b5e467b"
      },
      "downloads": -1,
      "filename": "django-hashid-field-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cbb50c816a2f77dd5a6ed65bbe6ac54c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17448,
      "upload_time": "2017-09-25T22:07:47",
      "upload_time_iso_8601": "2017-09-25T22:07:47.812805Z",
      "url": "https://files.pythonhosted.org/packages/fd/f6/ac0bf6df5df2b54bd9426a3653ef412d91314981596b079cee8b06aca41b/django-hashid-field-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}