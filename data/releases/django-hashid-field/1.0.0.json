{
  "info": {
    "author": "Nathan Shafer",
    "author_email": "nate-pypi@lotech.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Django Hashid Field\n====================\n\nA custom Model Field that uses the `Hashids <http://hashids.org/>`_ `library <https://pypi.python.org/pypi/hashids/>`_\nto obfuscate an IntegerField or AutoField. It can be used in new models or dropped in place of an existing IntegerField,\nexplicit AutoField, or an automatically generated AutoField.\n\nFeatures\n--------\n\n* Stores IDs as integers in the database\n* Allows lookups and filtering by either integer, hashid string or Hashid object\n* Can be used as sort key\n* Can drop-in replace an existing IntegerField (HashidField) or AutoField (HashidAutoField)\n* Allows specifying a salt globally\n* Supports custom *salt*, *min_length* and *alphabet* settings per field\n\nInstallation\n------------\n\nInstall the package (preferably in a virtualenv):\n\n.. code-block:: bash\n\n    $ pip install django-hashid-field\n\n\nAdd it to your model\n\n.. code-block:: python\n\n    from hashid_field import HashidField\n\n    class Book(models.Model):\n        reference_id = HashidField()\n\nMigrate your database\n\n.. code-block:: bash\n\n    $ ./manage.py makemigrations\n    $ ./manage.py migrate\n\nUpgrading\n------------\n\nPlease see the `Change Log <https://github.com/nshafer/django-hashid-field/blob/master/CHANGELOG.md>`_\n\nBasic Usage\n-----------\n\nUse your field like you would any other, for the most part. You can assign integers:\n\n.. code-block:: python\n\n    >>> b = Book()\n    >>> b.reference_id = 123\n    >>> b.reference_id\n    Hashid(123): OwLxW8D\n\nYou can assign valid hashids. It's valid only if it can be decoded into an integer based on your salt:\n\n.. code-block:: python\n\n    >>> b.reference_id = 'r8636LO'\n    >>> b.reference_id\n    Hashid(456): r8636LO\n\nYou can access your field with either integers, hashid strings or Hashid objects:\n\n.. code-block:: python\n\n    >>> Book.objects.filter(reference_id=123)\n    <QuerySet [<Book:  (OwLxW8D)>]>\n    >>> Book.objects.filter(reference_id='OwLxW8D')\n    <QuerySet [<Book:  (OwLxW8D)>]>\n    >>> b = Book.objects.get(reference_id='OwLxW8D')\n    >>> b\n    <Book:  (OwLxW8D)>\n    >>> h = b.reference_id\n    >>> h\n    Hashid(123): OwLxW8D\n    >>> Book.objects.filter(reference_id=h)\n    <Book:  (OwLxW8D)>\n\nThe objects returned from a HashidField are an instance of the class Hashid, and allow basic access to the original\ninteger or the hashid:\n\n.. code-block:: python\n\n    >>> from hashid_field import Hashid\n    >>> h = Hashid(123)\n    >>> h.id\n    123\n    >>> h.hashid\n    'Mj3'\n    >>> print(h)\n    Mj3\n    >>> repr(h)\n    'Hashid(123): Mj3'\n\nHashid Auto Field\n-----------------\n\nAlong with `HashidField` there is also a `HashidAutoField` that works in the same way, but that auto-increments.\n\n.. code-block:: python\n\n    from hashid_field import HashidAutoField\n\n    class Book(models.Model):\n        serial_id = HashidAutoField()\n\nThe only difference is that if you don't assign a value to it when you save, it will auto-generate a value from your\ndatabase, just as an AutoField would do:\n\n.. code-block:: python\n\n    >>> b = Book()\n    >>> b.save()\n    >>> b.serial_id\n    Hashid(1): AJEM7LK\n\nIt can be dropped into an existing model that has an auto-created AutoField (all models do by default) as long as you\ngive it `primary_key=True`. So if you have this model:\n\n.. code-block:: python\n\n    class Author(models.Model):\n        name = models.CharField(max_length=40)\n\nThen Django has created a field for you called 'id' automatically. We just need to override that by specifying our own\nfield with *primary_key* set to True.\n\n.. code-block:: python\n\n    class Author(models.Model):\n        id = HashidAutoField(primary_key=True)\n        name = models.CharField(max_length=40)\n\nAnd now you can use the 'id' or 'pk' attributes on your model instances:\n\n.. code-block:: python\n\n    >>> a = Author.objects.create(name=\"John Doe\")\n    >>> a.id\n    Hashid(60): N8VNa8z\n    >>> Author.objects.get(pk='N8VNa8z')\n    <Author: Author object>\n\nSettings\n--------\n\nHASHID_FIELD_SALT\n~~~~~~~~~~~~~~~~~\n\nYou can optionally set a global Salt to be used by all HashFields and HashidAutoFields in your project, or set the salt\non each individual field.\n\n:Type:    string\n:Default: \"\"\n:Example:\n    .. code-block:: python\n\n        HASHID_FIELD_SALT = \"a long and secure salt value that is not the same as settings.SECRET_KEY\"\n\n\nField Parameters\n----------------\n\nBesides the standard field options, there are 3 settings you can tweak that are specific to HashidField and\nAutoHashidField.\n\n**Please note** that changing any of these values *will* affect the obfuscation of the integers that are\nstored in the database, and will change what are considered \"valid\" hashids. If you have links or URLs that include\nyour HashidField values, then they will stop working after changing any of these values. It's highly advised that you\ndon't change any of these settings once you publish any references to your field.\n\nsalt\n~~~~\n\n:Type:    string\n:Default: settings.HASHID_FIELD_SALT\n:Example:\n    .. code-block:: python\n\n        reference_id = HashidField(salt=\"Some salt value\")\n\nmin_length\n~~~~~~~~~~\n\n:Type:     int\n:Default:  7\n:Note:     This defaults to 7 for the field since the maximum IntegerField value can be encoded in 7 characters with\n           the default *alphabet* setting of 62 characters.\n:Example:\n    .. code-block:: python\n\n        reference_id = HashidField(min_length=15)\n\nalphabet\n~~~~~~~~\n\n:Type:    string of characters (16 minimum)\n:Default: Hashids.ALPHABET, which is \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\n:Example:\n    .. code-block:: python\n\n        # Only use numbers and lower-case letters\n        reference_id = HashidField(alphabet=\"0123456789abcdefghijklmnopqrstuvwxyz\")\n\n\nHashid Class\n------------\n\nOperations with a HashidField or HashidAutoField return a ``Hashid`` object. This simple class does the heavy lifting of\nconverting integers and hashid strings back and forth. There shouldn't be any need to instantiate these manually.\n\nMethods\n~~~~~~~\n\n\\__init__(id, salt='', min_length=0, alphabet=Hashids.ALPHABET):\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:id: **REQUIRED** Integer you wish to *encode*\n:salt: Salt to use. **Default**: ''\n:min_length: Minimum length of encoded hashid string. **Default**: 0\n:alphabet: The characters to use in the encoded hashid string. **Default**: Hashids.ALPHABET\n\nset(id)\n^^^^^^^\n\n:id: Integer you with to *encode*\n\nInstance Variables\n~~~~~~~~~~~~~~~~~~\n\nid\n^^\n\n:type: Int\n:value: The *decoded* integer\n\nhashid\n^^^^^^\n\n:type: String\n:value: The *encoded* hashid string\n\nhashids\n^^^^^^^\n\n:type: Hashids()\n:value: The instance of the Hashids class that is used to *encode* and *decode*",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nshafer/django-hashid-field",
    "keywords": "django hashids hashid",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-hashid-field",
    "package_url": "https://pypi.org/project/django-hashid-field/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-hashid-field/",
    "project_urls": {
      "Homepage": "https://github.com/nshafer/django-hashid-field"
    },
    "release_url": "https://pypi.org/project/django-hashid-field/1.0.0/",
    "requires_dist": [
      "Django (>1.8,<1.11)",
      "hashids (>=1.1.0)"
    ],
    "requires_python": "",
    "summary": "A Hashids obfuscated Django Model Field",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15452651,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a82b239bf1fbc83fa6230f4c6e316f3bf9b3d2646b5650decac43be97355232e",
        "md5": "9b7036cb7d4ab9b0da2bbf39108e3818",
        "sha256": "aac70dcb1803307aba96de2cf13be4e165482922d28b8495c037f127b2cb0182"
      },
      "downloads": -1,
      "filename": "django_hashid_field-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b7036cb7d4ab9b0da2bbf39108e3818",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 10147,
      "upload_time": "2016-12-27T20:04:54",
      "upload_time_iso_8601": "2016-12-27T20:04:54.050781Z",
      "url": "https://files.pythonhosted.org/packages/a8/2b/239bf1fbc83fa6230f4c6e316f3bf9b3d2646b5650decac43be97355232e/django_hashid_field-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a9b90ba8f4b8d5d4b845a582a10fb38206007c57c3da9e5dbef59561c87abcd",
        "md5": "825b052633cf14092867f3337bb0260c",
        "sha256": "29ffc06caaca4904084b6bba4f096aea24d2212857def1a497627399a24ca8c1"
      },
      "downloads": -1,
      "filename": "django-hashid-field-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "825b052633cf14092867f3337bb0260c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7493,
      "upload_time": "2016-12-27T20:04:55",
      "upload_time_iso_8601": "2016-12-27T20:04:55.859491Z",
      "url": "https://files.pythonhosted.org/packages/3a/9b/90ba8f4b8d5d4b845a582a10fb38206007c57c3da9e5dbef59561c87abcd/django-hashid-field-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}