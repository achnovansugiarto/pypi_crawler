{
  "info": {
    "author": "Thomas Moreau",
    "author_email": "thomas.moreau.2010@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "# Reusable Process Pool Executor  [![Build Status](https://dev.azure.com/joblib/loky/_apis/build/status/joblib.loky?branchName=master)](https://dev.azure.com/joblib/loky/_build/latest?definitionId=2&branchName=master) [![codecov](https://codecov.io/gh/joblib/loky/branch/master/graph/badge.svg)](https://codecov.io/gh/joblib/loky)\n\n\n### Goal\n\nThe aim of this project is to provide a robust, cross-platform and\ncross-version implementation of the `ProcessPoolExecutor` class of\n`concurrent.futures`. It notably features:\n\n  * __Consistent and robust spawn behavior__: All processes are started\n    using fork + exec on POSIX systems. This ensures safer interactions with\n    third party libraries. On the contrary, `multiprocessing.Pool` uses\n    fork without exec by default, causing third party runtimes to crash\n    (e.g. OpenMP, macOS Accelerate...).\n\n  * __Reusable executor__: strategy to avoid re-spawning a complete\n    executor every time. A singleton executor instance can be reused (and\n    dynamically resized if necessary) across consecutive calls to limit\n    spawning and shutdown overhead. The worker processes can be shutdown\n    automatically after a configurable idling timeout to free system\n    resources.\n\n  * __Transparent cloudpickle integration__: to call interactively\n    defined functions and lambda expressions in parallel. It is also\n    possible to register a custom pickler implementation to handle\n    inter-process communications.\n\n  * __No need for ``if __name__ == \"__main__\":`` in scripts__: thanks\n    to the use of ``cloudpickle`` to call functions defined in the\n    ``__main__`` module, it is not required to protect the code calling\n    parallel functions under Windows.\n\n  * __Deadlock free implementation__: one of the major concern in\n    standard `multiprocessing` and `concurrent.futures` modules is the\n    ability of the `Pool/Executor` to handle crashes of worker\n    processes. This library intends to fix those possible deadlocks and\n    send back meaningful errors. Note that the implementation of\n    `concurrent.futures.ProcessPoolExecutor` that comes with Python 3.7+\n    is as robust as the executor from loky but the later also works for\n    older versions of Python.\n\n\n### Installation\n\nThe recommended way to install `loky` is with `pip`,\n```bash\npip install loky\n```\n\n`loky` can also be installed from sources using\n```bash\npython setup.py install\n```\n\nNote that `loky` has an optional dependency on [`psutil`][1] to allow early memory leak detections.\n\n### Usage\n\n```python\nimport os\nfrom time import sleep\nfrom loky import get_reusable_executor\n\n\ndef say_hello(k):\n    pid = os.getpid()\n    print(\"Hello from {} with arg {}\".format(pid, k))\n    sleep(.01)\n    return pid\n\n\n# Create an executor with 4 worker processes, that will\n# automatically shutdown after idling for 2s\nexecutor = get_reusable_executor(max_workers=4, timeout=2)\n\nres = executor.submit(say_hello, 1)\nprint(\"Got results:\", res.result())\n\nresults = executor.map(say_hello, range(50))\nn_workers = len(set(results))\nprint(\"Number of used processes:\", n_workers)\nassert n_workers == 4\n```\n\nFor more advance usage, see our [documentation](https://loky.readthedocs.io/en/stable/)\n\n### Workflow to contribute\n\nTo contribute to **loky**, first create an account on [github](http://github.com/).\nOnce this is done, fork the [loky repository](http://github.com/loky/loky) to\nhave your own repository, clone it using 'git clone' on the computers where you\nwant to work. Make your changes in your clone, push them to your github account,\ntest them on several computers, and when you are happy with them, send a pull\nrequest to the main repository.\n\n### Running the test suite\n\nTo run the test suite, you need the `pytest` (version >= 3) and `psutil`\nmodules. Run the test suite using:\n\n```sh\n    pip install -e .\n    pytest .\n```\n\nfrom the root of the project.\n\n### Acknowledgement\n\nThis work is supported by the Center for Data Science, funded by the IDEX\nParis-Saclay, ANR-11-IDEX-0003-02\n\n\n[1]: https://github.com/giampaolo/psutil\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joblib/loky/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "loky",
    "package_url": "https://pypi.org/project/loky/",
    "platform": "any",
    "project_url": "https://pypi.org/project/loky/",
    "project_urls": {
      "Homepage": "https://github.com/joblib/loky/"
    },
    "release_url": "https://pypi.org/project/loky/2.8.0/",
    "requires_dist": [
      "cloudpickle"
    ],
    "requires_python": "",
    "summary": "A robust implementation of concurrent.futures.ProcessPoolExecutor",
    "version": "2.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15106700,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2615a6958c714772d0481556e49e42b197b4e4a01a3acad57f6334a5159fd74",
        "md5": "2500eeeddc200a54443be5064cbc9c6f",
        "sha256": "7c4d012c277393e22135cc137231b632d185e4482a29ea60afaf34e3b687c4c1"
      },
      "downloads": -1,
      "filename": "loky-2.8.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2500eeeddc200a54443be5064cbc9c6f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 65760,
      "upload_time": "2020-05-14T14:41:47",
      "upload_time_iso_8601": "2020-05-14T14:41:47.451846Z",
      "url": "https://files.pythonhosted.org/packages/c2/61/5a6958c714772d0481556e49e42b197b4e4a01a3acad57f6334a5159fd74/loky-2.8.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac02815e43e69592a8a0eabc3d3d99f3e83eb6e401bc248046767f33417d9f08",
        "md5": "1db75c07a289d5b39fe2fb909a0ab9a8",
        "sha256": "76e0431a8f124c267e6a95df66426265e5d35d75310638950871ba76dc12b545"
      },
      "downloads": -1,
      "filename": "loky-2.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1db75c07a289d5b39fe2fb909a0ab9a8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 119870,
      "upload_time": "2020-05-14T14:41:49",
      "upload_time_iso_8601": "2020-05-14T14:41:49.529834Z",
      "url": "https://files.pythonhosted.org/packages/ac/02/815e43e69592a8a0eabc3d3d99f3e83eb6e401bc248046767f33417d9f08/loky-2.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}