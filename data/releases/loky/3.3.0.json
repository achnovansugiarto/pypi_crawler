{
  "info": {
    "author": "Thomas Moreau",
    "author_email": "thomas.moreau.2010@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "\n<a href=\"https://loky.readthedocs.io\">\n<img src=\"docs/_static/loky_logo.svg\"\nalt=\"Loky logo\" width=96/></a>\n\n\n# Reusable Process Pool Executor\n[![Build Status](https://dev.azure.com/joblib/loky/_apis/build/status/joblib.loky?branchName=master)](https://dev.azure.com/joblib/loky/_build/latest?definitionId=2&branchName=master)\n[![Documentation Status](https://readthedocs.org/projects/loky/badge/?version=latest)](https://loky.readthedocs.io/en/latest/?badge=latest)\n[![codecov](https://codecov.io/gh/joblib/loky/branch/master/graph/badge.svg)](https://codecov.io/gh/joblib/loky)\n[![DOI](https://zenodo.org/badge/48578152.svg)](https://zenodo.org/badge/latestdoi/48578152)\n\n\n### Goal\n\nThe aim of this project is to provide a robust, cross-platform and\ncross-version implementation of the `ProcessPoolExecutor` class of\n`concurrent.futures`. It notably features:\n\n  * __Consistent and robust spawn behavior__: All processes are started\n    using fork + exec on POSIX systems. This ensures safer interactions with\n    third party libraries. On the contrary, `multiprocessing.Pool` uses\n    fork without exec by default, causing third party runtimes to crash\n    (e.g. OpenMP, macOS Accelerate...).\n\n  * __Reusable executor__: strategy to avoid re-spawning a complete\n    executor every time. A singleton executor instance can be reused (and\n    dynamically resized if necessary) across consecutive calls to limit\n    spawning and shutdown overhead. The worker processes can be shutdown\n    automatically after a configurable idling timeout to free system\n    resources.\n\n  * __Transparent cloudpickle integration__: to call interactively\n    defined functions and lambda expressions in parallel. It is also\n    possible to register a custom pickler implementation to handle\n    inter-process communications.\n\n  * __No need for ``if __name__ == \"__main__\":`` in scripts__: thanks\n    to the use of ``cloudpickle`` to call functions defined in the\n    ``__main__`` module, it is not required to protect the code calling\n    parallel functions under Windows.\n\n  * __Deadlock free implementation__: one of the major concern in\n    standard `multiprocessing` and `concurrent.futures` modules is the\n    ability of the `Pool/Executor` to handle crashes of worker\n    processes. This library intends to fix those possible deadlocks and\n    send back meaningful errors. Note that the implementation of\n    `concurrent.futures.ProcessPoolExecutor` that comes with Python 3.7+\n    is as robust as the executor from loky but the latter also works for\n    older versions of Python.\n\n\n### Installation\n\nThe recommended way to install `loky` is with `pip`,\n```bash\npip install loky\n```\n\n`loky` can also be installed from sources using\n```bash\ngit clone https://github.com/joblib/loky\ncd loky\npython setup.py install\n```\n\nNote that `loky` has an optional dependency on [`psutil`][1] to allow early\nmemory leak detections.\n\n### Usage\n\nThe basic usage of `loky` relies on the `get_reusable_executor`, which\ninternally manages a custom `ProcessPoolExecutor` object, which is reused or\nre-spawned depending on the context.\n\n```python\nimport os\nfrom time import sleep\nfrom loky import get_reusable_executor\n\n\ndef say_hello(k):\n    pid = os.getpid()\n    print(f\"Hello from {pid} with arg {k}\")\n    sleep(.01)\n    return pid\n\n\n# Create an executor with 4 worker processes, that will\n# automatically shutdown after idling for 2s\nexecutor = get_reusable_executor(max_workers=4, timeout=2)\n\nres = executor.submit(say_hello, 1)\nprint(\"Got results:\", res.result())\n\nresults = executor.map(say_hello, range(50))\nn_workers = len(set(results))\nprint(\"Number of used processes:\", n_workers)\nassert n_workers == 4\n```\n\nFor more advance usage, see our\n[documentation](https://loky.readthedocs.io/en/stable/)\n\n### Workflow to contribute\n\nTo contribute to **loky**, first create an account on\n[github](http://github.com/). Once this is done, fork the\n[loky repository](http://github.com/loky/loky) to have your own repository,\nclone it using 'git clone' on the computers where you want to work. Make your\nchanges in your clone, push them to your github account, test them on several\ncomputers, and when you are happy with them, send a pull request to the main\nrepository.\n\n### Running the test suite\n\nTo run the test suite, you need the `pytest` (version >= 3) and `psutil`\nmodules. From the root of the project, run the test suite using:\n\n```sh\n    pip install -e .\n    pytest .\n```\n\n### Why was the project named `loky`?\n\nWhile developping `loky`, we had some bad experiences trying to debug deadlocks\nwhen using `multiprocessing.Pool` and `concurrent.futures.ProcessPoolExecutor`,\nespecially when calling functions with non-picklable arguments or returned\nvalues at the beginning of the project. When we had to chose a name, we had\ndealt with so many deadlocks that we wanted some kind of invocation to repel\nthem! Hence `loky`: a mix of a god, locks and the `y` that make it somehow\ncooler and nicer : (and also less likely to result in name conflict in google\nresults ^^).\n\nFixes to avoid those deadlocks in `concurrent.futures` were also contributed\nupstream in Python 3.7+, as a less mystical way to repel the deadlocks :D\n\n### Acknowledgement\n\nThis work is supported by the Center for Data Science, funded by the IDEX\nParis-Saclay, ANR-11-IDEX-0003-02\n\n\n[1]: https://github.com/giampaolo/psutil\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joblib/loky/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "loky",
    "package_url": "https://pypi.org/project/loky/",
    "platform": "any",
    "project_url": "https://pypi.org/project/loky/",
    "project_urls": {
      "Homepage": "https://github.com/joblib/loky/"
    },
    "release_url": "https://pypi.org/project/loky/3.3.0/",
    "requires_dist": [
      "cloudpickle"
    ],
    "requires_python": ">=3.7",
    "summary": "A robust implementation of concurrent.futures.ProcessPoolExecutor",
    "version": "3.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15106700,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93218302f4143477dd1af7d6d38beb2b3725f1f6e7393e4e005e96fa7be996fb",
        "md5": "ed8d2afe4232ae412e7595c02fc23e00",
        "sha256": "ffddf71eadf3d870547fc0e941584e7aa82cea72452f23f4e40551873e69551b"
      },
      "downloads": -1,
      "filename": "loky-3.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ed8d2afe4232ae412e7595c02fc23e00",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 53582,
      "upload_time": "2022-09-15T15:59:12",
      "upload_time_iso_8601": "2022-09-15T15:59:12.076450Z",
      "url": "https://files.pythonhosted.org/packages/93/21/8302f4143477dd1af7d6d38beb2b3725f1f6e7393e4e005e96fa7be996fb/loky-3.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "350e97520e1a9317637727fd05d00ae4d834eaf82b19ca7ef3e2dcedf4446656",
        "md5": "c44cee7735ce9c531fe6e5983247c8d6",
        "sha256": "dbe10cd89603193da80529c6cdab901dd6a4176f0e749ba6f5eb775e352b1e73"
      },
      "downloads": -1,
      "filename": "loky-3.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c44cee7735ce9c531fe6e5983247c8d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 97203,
      "upload_time": "2022-09-15T15:59:13",
      "upload_time_iso_8601": "2022-09-15T15:59:13.783825Z",
      "url": "https://files.pythonhosted.org/packages/35/0e/97520e1a9317637727fd05d00ae4d834eaf82b19ca7ef3e2dcedf4446656/loky-3.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}