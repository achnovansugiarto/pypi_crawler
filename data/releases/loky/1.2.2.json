{
  "info": {
    "author": "Thomas Moreau",
    "author_email": "thomas.moreau.2010@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "# Reusable Process Pool Executor  [![Build Status](https://travis-ci.org/tomMoral/loky.svg?branch=master)](https://travis-ci.org/tomMoral/loky) [![Build status](https://ci.appveyor.com/api/projects/status/oifqilb5sb0p7fdp/branch/master?svg=true)](https://ci.appveyor.com/project/tomMoral/loky/branch/master) [![codecov](https://codecov.io/gh/tomMoral/loky/branch/master/graph/badge.svg)](https://codecov.io/gh/tomMoral/loky)\n\n\n### Goal \n\nThe aim of this project is to provide a robust, cross-platform and\ncross-version implementation of the `ProcessPoolExecutor` class of\n`concurrent.futures`. It notably features:\n\n  * __Deadlock free implementation__: one of the major concern in\n    standard `multiprocessing` and `concurrent.futures` libraries is the\n    ability of the `Pool/Executor` to handle crashes of worker\n    processes. This library intends to fix those possible deadlocks and\n    send back meaningful errors.\n\n  * __Consistent spawn behavior__: All processes are started using\n    fork/exec on POSIX systems. This ensures safer interactions with\n    third party libraries.\n\n  * __Reusable executor__: strategy to avoid respawning a complete\n    executor every time. A singleton executor instance can be reused (and\n    dynamically resized if necessary) across consecutive calls to limit\n    spawning and shutdown overhead. The worker processes can be shutdown\n    automatically after a configurable idling timeout to free system\n    resources.\n\n  * __Transparent cloudpickle integration__: to call interactively\n    defined functions and lambda expressions in parallel. It is also\n    possible to register a custom pickler implementation to handle\n    inter-process communications.\n\n  * __No need for ``if __name__ == \"__main__\":`` in scripts__: thanks\n    to the use of ``cloudpickle`` to call functions defined in the\n    ``__main__`` module, it is not required to protect the code calling\n    parallel functions under Windows.\n\n### Usage\n\n```python\nimport os\nfrom time import sleep\nfrom loky import get_reusable_executor\n\n\ndef say_hello(k):\n    pid = os.getpid()\n    print(\"Hello from {} with arg {}\".format(pid, k))\n    sleep(.01)\n    return pid\n\n\n# Create an executor with 4 worker processes, that will\n# automatically shutdown after idling for 2s\nexecutor = get_reusable_executor(max_workers=4, timeout=2)\n\nres = executor.submit(say_hello, 1)\nprint(\"Got results:\", res.result())\n\nresults = executor.map(say_hello, range(50))\nn_workers = len(set(results))\nprint(\"Number of used processes:\", n_workers)\nassert n_workers == 4\n```\n\n### Acknowledgement\n\nThis work is supported by the Center for Data Science, funded by the IDEX\nParis-Saclay, ANR-11-IDEX-0003-02\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tommoral/loky/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "loky",
    "package_url": "https://pypi.org/project/loky/",
    "platform": "any",
    "project_url": "https://pypi.org/project/loky/",
    "project_urls": {
      "Homepage": "https://github.com/tommoral/loky/"
    },
    "release_url": "https://pypi.org/project/loky/1.2.2/",
    "requires_dist": [
      "cloudpickle"
    ],
    "requires_python": "",
    "summary": "A robust implementation of concurrent.futures.ProcessPoolExecutor",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15106700,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf93f6951800c21fbf66bda814235fa36532570ec85626d70d4645f500c3634b",
        "md5": "ca9d1948493a8580b74433b88aecc2a0",
        "sha256": "df0fdb4faa246e8b71110553d6a688fc0cbe4f8344934dc12834980ef2ae2191"
      },
      "downloads": -1,
      "filename": "loky-1.2.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca9d1948493a8580b74433b88aecc2a0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 55662,
      "upload_time": "2018-02-19T12:49:09",
      "upload_time_iso_8601": "2018-02-19T12:49:09.334469Z",
      "url": "https://files.pythonhosted.org/packages/bf/93/f6951800c21fbf66bda814235fa36532570ec85626d70d4645f500c3634b/loky-1.2.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50a14ed9f569851cbfd2d3325cf162d7999c3f1deefe59a07b5c780f6b10a1d5",
        "md5": "6f903c2cf56d49061ed5c6c95ad27dd8",
        "sha256": "f812d62677daa6ca1e86f2fa31713839e3e8e8cafb4775ed0975d7103b1ec09d"
      },
      "downloads": -1,
      "filename": "loky-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6f903c2cf56d49061ed5c6c95ad27dd8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 69955,
      "upload_time": "2018-02-19T12:49:14",
      "upload_time_iso_8601": "2018-02-19T12:49:14.074109Z",
      "url": "https://files.pythonhosted.org/packages/50/a1/4ed9f569851cbfd2d3325cf162d7999c3f1deefe59a07b5c780f6b10a1d5/loky-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}