{
  "info": {
    "author": "Stefano Schmidt",
    "author_email": "stefanoschmidt1995@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "mlgw\n====\n\n**Author** Stefano Schmidt\n\n**email** stefanoschmidt1995@gmail.com\n\n**Copyright** Copyright (C) 2020 Stefano Schmidt\n\n**Licence** CC BY 4.0\n\n**Version** 1.2.6\n\nMACHINE LEARNING MODEL FOR THE GRAVITATIONAL WAVES GENERATED BY BLACK-HOLE BINARIES\n===================================================================================\n\n``mlgw`` (Machine Learning Gravitational Waves) is a useful tool to quickly generate a GW waveform for a BBH coalescence. It is part of a Master thesis work at University of Pisa (Italy) under supervision of prof. Walter Del Pozzo.\nIt implements a ML model which is able to reproduce waveforms of GWs generated by state-of-the-art models. It is quicker than standard methods and it has the same degree of accuracy.\n\nTo generate a wave:\n::\n\n\timport mlgw.GW_generator as generator\n\timport numpy as np\n\timport matplotlib.pyplot as plt\n\tfrom mpl_toolkits.axes_grid.inset_locator import (inset_axes, InsetPosition,mark_inset)\n\n\t#generating the wave\n\tgen = generator.GW_generator() #creating an istance of the generator\n\ttheta = np.array([20,10,0.5,-0.3]) #list of parameters to be given to generator [m1,m2,s1,s2]\n\ttimes = np.linspace(-8,0.02, 100000) #time grid: peak of 22 mode at t=0\n\th_p, h_c = gen.get_WF(theta, times) #returns amplitude and phase of the wave\n\n\tgen.summary() #printing model summary\n\n\t#plotting the wave\n\tplt.figure(figsize=(15,8))\n\tplt.title(\"GW by a BBH with [m1,m2,s1,s2] = \"+str(theta), fontsize = 15)\n\tplt.plot(times, h_p, c='k') #plot the plus polarization\n\tplt.xlabel(\"Time (s)\", fontsize = 12)\n\tplt.ylabel(r\"$h_+$\", fontsize = 12)\n\taxins = inset_axes(plt.gca(), width=\"70%\", height=\"30%\", loc=2, borderpad = 2.)\n\taxins.plot(times[times >= -0.2], h_p[times >= -0.2], c='k')\n\tplt.show()\n\nThe output is: ::\n\n\t###### Summary for MLGW model ######\n\t   Grid size:     3500 \n\t   Minimum time:  0.7999999999999999 s/M_sun\n\t   ## Model for Amplitude \n\t      - #PCs:          4\n\t      - #Experts:      4 4 4 4\n\t      - #Features:     34\n\t      - Features:      00 11 22 01 02 12 000 001 002 011 012 022 111 112 122 222 0000 0001 0002 0011 0022 0012 0111 0112 0122 0222 1111 1112 1122 1222 2222\n\t   ## Model for Phase \n\t      - #PCs:          4\n\t      - #Experts:      4 4 4 4\n\t      - #Features:     34\n\t      - Features:      00 11 22 01 02 12 000 001 002 011 012 022 111 112 122 222 0000 0001 0002 0011 0022 0012 0111 0112 0122 0222 1111 1112 1122 1222 2222\n\t####################################\n\n.. image:: https://raw.githubusercontent.com/stefanoschmidt1995/MLGW/master/MLGW_package/docs/WF_example.png\n   :width: 700px\n\nThe ML model\n============\nThe model is composed by a PCA + Mixture of Experts model and aims to generate a GW given some input parameter of the BBH. So far the model is fitted only to deal with aligned BH spins.\n\nA PCA model is used to reduce dimensionality, through a linear transformation, of a wave represented in a dense grid. It maps the wave to the linear combination of the first ``K`` principal components of the dataset.\n\nA Mixture of Experts model (MoE) is useful to map the orbital parameters of the black holes to the reduced representation of the wave. A prediction of MoE is a linear combination of regression models (the experts), weighted by the output of a gating function which decides which expert to use. The orbital parameters considered are mass ratio ``q=m1/m2`` and the two BHs z-component spins ``s1`` and ``s2``; the total mass ``m1+m2`` is a scale factor and the dependence on it must not be fitted.\nThe experts performs a polynomial regression (using data augmentation in a basis function expansion). The terms in the polynomial are specified at training time.\n\nA complete model includes two PCA models for both phase and amplitude of the wave and a MoE model for each of the PC considered. The expert takes the form of a basis function regression and one can specify the features they want to use for their regression in the training and test data.\n\nA dataset of GW must be created to fit the PCA model. It holds waves in time domain, generated them in a fixed reduced grid ``t' = t/M_tot`` where M_tot is the total mass of the BBH. The grid is such that the peak of the 22 mode is at ``t = 0``.\n\nUsage of mlgw\n=============\nIt outputs the GW strain:\n\n.. image:: https://raw.githubusercontent.com/stefanoschmidt1995/MLGW/master/MLGW_package/docs/strain.png\n   :width: 700px\n\nwhere m_i and s_i are BH masses and spins, d_L the luminosity distance from the source, i is the inclination angle and phi is a reference phase. So far only the \\|m\\| = 2 modes are included.\n\nPackage ``mlgw`` consists in five modules.\n\n   * **GW_generator**: the module holds class ``GW_generator`` which builds up all the model components (i.e. PCA + regressions for each PC) and performs some post processing of the waveform for dealing with known dependence on other physical quantities. It also compute the gradients of the waveform with respct to the relevant physical paramters.\n   * **EM_MoE**: holds an implementation of a MoE model as well as the softmax classifier required for it\n   * **ML_routines**: holds an implementation of the PCA model as well a GDA classifier and a routine to do data augmentation\n   * **GW_helper**: provides some routines to generate a dataset and to evaluate the closeness between waves. This is useful to assess model ability to reproduce original waves\n   * **fit_model**: provides some routines useful to fit the MoE + PCA model.\n\nClass ``GW_generator`` provides method ``get_WF`` to return the desidered waveform. Orbital parameters must be specified. It accepts N data as ``(N,D) np.array``. The D features must have one of the following layout:\n::\n\n\tD = 3\t[q, spin1_z, spin2_z]\n\tD = 4\t[m1, m2, spin1_z, spin2_z]\n\tD = 5\t[m1, m2, spin1_z , spin2_z, D_L]\n\tD = 6\t[m1, m2, spin1_z , spin2_z, D_L, inclination]\n\tD = 7\t[m1, m2, spin1_z , spin2_z, D_L, inclination, phi_0]\n\tD = 14\t[m1, m2, spin1 (3,), spin2 (3,), D_L, inclination, phi_0, long_asc_nodes, eccentricity, mean_per_ano]\n\nMethod ``__call__`` can only be given the last line.\n\nThe ML model generates the waves in reduced grid ``t' = t/M_tot`` with a fixed number of grid points. With argument ``t_grid``, the user can specify a grid which they want to evaluate the wave at.\nAny custom grid must meet the convention that the peak of amplitude of the 22 mode happens at the origin of time (i.e. the inspiral takes place at negative times).\nAn additional boolean argument ``red_grid`` must state whether the grid is in reduced time domain or true time domain.\nFurthermore, the ``out_type`` option allows the user to choose the desidered output representation of the wave. Currently, the code implements the output of plus cross polarizations, amplitude and phase and real and imaginary part of the 22 mode.\n\nMethod ``get_grads`` computes the gradients of the waveform with respect to orbital parameters.\n\nInstallation & documentation\n============================\nTo install the package: ::\n\n\tpip install mlgw\n\nIt requires ``numpy``, ``scipy`` and ``lalsuite``, all available to PyPI.\n\t\nThis page is intented to present the use of the code only for generating a wave. For more advanced use or for more information, please refer to the code documentation: ::\n\n\timport mlgw\n\thelp(mlgw)\n\thelp(mlgw.<module_name>)\n\nFor full source code (and much more) see: https://github.com/stefanoschmidt1995/MLGW\n\nIn the thesis, the model is explained in every details as well as the underlying theory and the validation results. The document is available `here <https://raw.githubusercontent.com/stefanoschmidt1995/MLGW/master/MLGW_package/docs/thesis.pdf>`_.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stefanoschmidt1995/MLGW/",
    "keywords": "",
    "license": "CC by 4.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlgw",
    "package_url": "https://pypi.org/project/mlgw/",
    "platform": "",
    "project_url": "https://pypi.org/project/mlgw/",
    "project_urls": {
      "Homepage": "https://github.com/stefanoschmidt1995/MLGW/"
    },
    "release_url": "https://pypi.org/project/mlgw/1.2.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Machine learning modelling of the gravitational waves generated by black-hole binaries",
    "version": "1.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9104331,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e7adadf96c01c9fba0f1e24cade762439909f8c7f5c460efc196dabc1ced04e",
        "md5": "a42ebd4dae52cc43e8f718075227b8af",
        "sha256": "c95174d8980a70176977e908c52a9f76ce1ddaf2c48058bba8cba9e5a18e1db4"
      },
      "downloads": -1,
      "filename": "mlgw-1.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "a42ebd4dae52cc43e8f718075227b8af",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1667052,
      "upload_time": "2020-06-16T08:27:21",
      "upload_time_iso_8601": "2020-06-16T08:27:21.814142Z",
      "url": "https://files.pythonhosted.org/packages/4e/7a/dadf96c01c9fba0f1e24cade762439909f8c7f5c460efc196dabc1ced04e/mlgw-1.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}