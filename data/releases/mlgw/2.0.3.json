{
  "info": {
    "author": "Stefano Schmidt",
    "author_email": "stefanoschmidt1995@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "mlgw\n====\n\n**Author** Stefano Schmidt\n\n**email** stefanoschmidt1995@gmail.com\n\n**Copyright** Copyright (C) 2020 Stefano Schmidt\n\n**Licence** CC BY 4.0\n\n**Version** 2.0.3\n\nMACHINE LEARNING MODEL FOR THE GRAVITATIONAL WAVES GENERATED BY BLACK-HOLE BINARIES\n===================================================================================\n\n``mlgw`` (Machine Learning Gravitational Waves) is a useful tool to quickly generate a GW waveform for a BBH coalescence. It is part of a Master thesis work at University of Pisa (Italy) under supervision of prof. Walter Del Pozzo.\nIt implements a ML model which is able to reproduce waveforms of GWs generated by state-of-the-art models, with an aribitrary number of modes. It is quicker than standard methods and it has the same degree of accuracy.\nThe older version of the model (which includes only the dominant 22 mode) is presented in this `paper <https://arxiv.org/abs/2011.01958>`_.\n\nTo generate (and plot) a wave:\n::\n\n\timport mlgw.GW_generator as generator\n\timport numpy as np\n\timport matplotlib.pyplot as plt\n\tfrom mpl_toolkits.axes_grid.inset_locator import (inset_axes, InsetPosition,mark_inset)\n\n\t#generating the wave\n\tgen = generator.GW_generator() #creating an istance of the generator (using default model)\n\ttheta = np.array([20,10,0.5,-0.3]) #list of parameters to be given to generator [m1,m2,s1,s2]\n\ttimes = np.linspace(-8,0.02, 100000) #time grid: peak of 22 mode at t=0\n\tmodes = [(2,2), (3,3), (4,4), (5,5)]\n\th_p, h_c = gen.get_WF(theta, times, modes) #returns amplitude and phase of the wave\n\n\t#plotting the wave\n\tplt.figure(figsize=(15,8))\n\tplt.title(\"GW by a BBH with [m1,m2,s1,s2] = \"+str(theta), fontsize = 15)\n\tplt.plot(times, h_p, c='k') #plot the plus polarization\n\tplt.xlabel(\"Time (s)\", fontsize = 12)\n\tplt.ylabel(r\"$h_+$\", fontsize = 12)\n\taxins = inset_axes(plt.gca(), width=\"70%\", height=\"30%\", loc=2, borderpad = 2.)\n\taxins.plot(times[times >= -0.2], h_p[times >= -0.2], c='k')\n\tplt.show()\n\nThe output is:\n\n.. image:: https://raw.githubusercontent.com/stefanoschmidt1995/MLGW/master/mlgw_package/docs/WF_example.png\n   :width: 700px\n\nThe ML model\n============\nThe waveform is composed by a superposition of modes, each labeld by a tuple (l,m). The model performs a different fit for each of the mode and sums them to get the full waveform.\n\nThe model to fit each mode is composed by a PCA + Mixture of Experts model and aims to generate the mode amplitude and phase given some input parameter of the BBH. So far the model is fitted only to deal with aligned BH spins.\n\nA PCA model is used to reduce dimensionality, through a linear transformation, of a wave represented in a dense grid. It maps the wave to the linear combination of the first ``K`` principal components of the dataset.\n\nA Mixture of Experts model (MoE) is useful to map the orbital parameters of the black holes to the reduced representation of the wave. A prediction of MoE is a linear combination of regression models (the experts), weighted by the output of a gating function which decides which expert to use. The orbital parameters considered are mass ratio ``q=m1/m2`` and the two BHs z-component spins ``s1`` and ``s2``; the total mass ``m1+m2`` is a scale factor and the dependence on it must not be fitted.\nThe experts performs a polynomial regression (using data augmentation in a basis function expansion). The terms in the polynomial are specified at training time.\n\nA complete model for a mode includes two PCA models for both phase and amplitude of the wave and a MoE model for each of the PC considered. The expert takes the form of a basis function regression and one can specify the features they want to use for their regression in the training and test data.\n\nA dataset of GWs must be created to fit the PCA model. It holds waves in time domain, generated in a fixed reduced grid ``t' = t/M_tot`` where M_tot is the total mass of the BBH.\nEach mode is time aligned sucht that the peak of the 22 mode is at ``t = 0``.\n\nUsage of mlgw\n=============\nIt outputs the GW strain:\n\n.. image:: https://raw.githubusercontent.com/stefanoschmidt1995/MLGW/master/mlgw_package/docs/strain.png\n   :width: 700px\n\nwhere m_i and s_i are BH masses and spins, d_L the luminosity distance from the source, i is the inclination angle and phi is a reference phase. The (l,m) modes included depends on the model considered: use ``mlgw.GW_generator.GW_generator.list_modes()`` to list them.\n\nPackage ``mlgw`` consists in five modules.\n\n   * **GW_generator**: the module holds class ``mode_generator`` which builds up all the components for a fit for a single mode (i.e. PCA + regressions for each PC). Class ``GW_generator`` collects many istances of ``mode_generator`` and sum them together including the dependence on spherical harmonics.\n   * **EM_MoE**: holds an implementation of a MoE model as well as the softmax classifier required for it\n   * **ML_routines**: holds an implementation of the PCA model as well a GDA classifier and a routine to do data augmentation\n   * **GW_helper**: provides some routines to generate a dataset and to evaluate the closeness between waves. This is useful to assess model ability to reproduce original waves\n   * **fit_model**: provides some routines useful to fit the MoE + PCA model.\n\nClass ``GW_generator`` provides method ``get_WF`` to return the plus and cross polarization of the waveform. The orbital parameters must be specified. It accepts N data as ``(N,D) np.array``. The D features must have one of the following layout:\n::\n\n\tD = 3\t[q, spin1_z, spin2_z]\n\tD = 4\t[m1, m2, spin1_z, spin2_z]\n\tD = 5\t[m1, m2, spin1_z , spin2_z, D_L]\n\tD = 6\t[m1, m2, spin1_z , spin2_z, D_L, inclination]\n\tD = 7\t[m1, m2, spin1_z , spin2_z, D_L, inclination, phi_0]\n\tD = 14\t[m1, m2, spin1 (3,), spin2 (3,), D_L, inclination, phi_0, long_asc_nodes, eccentricity, mean_per_ano]\n\nMethod ``__call__`` can only be given the last line.\n\nThe user should also provide a time grid to evaluate the WF at. The grid must meet the convention that the peak of amplitude of the 22 mode happens at the origin of time (i.e. the inspiral takes place at negative times).\nFurthermore, an optional mode list can be provided, in order to control which higher modes shall be included in the WF.\n\nMethod ``get_modes`` provide the bare (l,m) modes. The user can choose the output type (if amplitude and phase or real and imaginary part) and also which modes to have returned.\n\nInstallation & documentation\n============================\nTo install the package: ::\n\n\tpip install mlgw\n\nIt requires ``numpy`` and ``scipy`` all available to PyPI.\n\nA number of tutorials are available to the interested user.\n\n\t* `generate_WF.py <https://raw.githubusercontent.com/stefanoschmidt1995/MLGW/master/mlgw_v2/generate_WF.py>`_: to generate the WF and using the model in its basic features.\n\t* `test_HM.py <https://raw.githubusercontent.com/stefanoschmidt1995/MLGW/master/mlgw_v2/test_HM.py>`_: to test the accuracy of the model. It requires a local installation of EOB model `TEOBResumS <https://arxiv.org/abs/1806.01772>`_ and it compares the ``mlgw`` results with those of ``TEOBResumS``.\n\t* `play_WF.py <https://raw.githubusercontent.com/stefanoschmidt1995/MLGW/master/mlgw_v2/play_WF.py>`_: an interactive plot to plot how a WF changes when the the masses, spins and geometrical variables change.\n\nA number of pre-fitted model are realeased together with the model. The available models can be listed with ``mlgw.GW_generator.list_models()``.\nHowever the user is welcome to fit their own model, using the module ``mlgw.fit_model``. To build a model, two steps are required:\n\n\t* **Generating a dataset of WFs**: in this part a datset of WFs is created for each of the (l,m) mode to be included. The user here shall choose the range of orbital parameters to include within the dataset as well as the length in time of the WF. See `generate_dataset.py <https://raw.githubusercontent.com/stefanoschmidt1995/MLGW/master/mlgw_v2/generate_dataset.py>`_ for a practical guide on how to do it.\n\t* **Fitting the model on the dataset**: in this part, for each mode, a PCA model and a MoE model are fitted with the available data. Once the various ML models are properly gathered together, ``mlgw`` is raeady to be used. See `do_the_fit.py <https://raw.githubusercontent.com/stefanoschmidt1995/MLGW/master/mlgw_v2/do_the_fit.py>`_ for more information.\n\t\nThe tutorials above are intended only to present a basic usage.\nFor more advanced use or for more information, please refer to the code documentation: ::\n\n\timport mlgw\n\thelp(mlgw)\n\thelp(mlgw.<module_name>)\n\nFor more information on the model you can have a look at the presentation paper: `arxiv.org/abs/2011.01958 <https://arxiv.org/abs/2011.01958>`_.\n\nFor full source code (and much more) see: https://github.com/stefanoschmidt1995/MLGW",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stefanoschmidt1995/MLGW/",
    "keywords": "",
    "license": "CC by 4.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlgw",
    "package_url": "https://pypi.org/project/mlgw/",
    "platform": "",
    "project_url": "https://pypi.org/project/mlgw/",
    "project_urls": {
      "Homepage": "https://github.com/stefanoschmidt1995/MLGW/"
    },
    "release_url": "https://pypi.org/project/mlgw/2.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Machine learning modelling of the gravitational waves generated by black-hole binaries",
    "version": "2.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9104331,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "977ba9b89191f94cd1e02bfba12e029e6b5016446c3dbc160af9d8c605647ef8",
        "md5": "f645e9bea6d31242e5063deae496074d",
        "sha256": "73bb3eef9d08be81c8ff13832a7c6781691fd6a3b201872768f128be8ecfdcac"
      },
      "downloads": -1,
      "filename": "mlgw-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f645e9bea6d31242e5063deae496074d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4726898,
      "upload_time": "2021-01-11T10:57:56",
      "upload_time_iso_8601": "2021-01-11T10:57:56.748995Z",
      "url": "https://files.pythonhosted.org/packages/97/7b/a9b89191f94cd1e02bfba12e029e6b5016446c3dbc160af9d8c605647ef8/mlgw-2.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}