{
  "info": {
    "author": "Bertrand Bordage, Andrew Chen Wang",
    "author_email": "acwangpython@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "**New Maintainer**: `Andrew Chen Wang`_ is a new maintainer of this repo. Bordage is still the admin but will most likely be inactive.\n\nDjango Cachalot\n===============\n\nCaches your Django ORM queries and automatically invalidates them.\n\nDocumentation: http://django-cachalot.readthedocs.io\n\n----\n\n.. image:: http://img.shields.io/pypi/v/django-cachalot.svg?style=flat-square&maxAge=3600\n   :target: https://pypi.python.org/pypi/django-cachalot\n\n.. image:: http://img.shields.io/travis/noripyt/django-cachalot/master.svg?style=flat-square&maxAge=3600\n   :target: https://travis-ci.org/noripyt/django-cachalot\n\n.. image:: http://img.shields.io/coveralls/noripyt/django-cachalot/master.svg?style=flat-square&maxAge=3600\n   :target: https://coveralls.io/r/noripyt/django-cachalot?branch=master\n\n.. image:: http://img.shields.io/scrutinizer/g/noripyt/django-cachalot/master.svg?style=flat-square&maxAge=3600\n   :target: https://scrutinizer-ci.com/g/noripyt/django-cachalot/\n\n.. image:: https://img.shields.io/badge/cachalot-Chat%20on%20Slack-green?style=flat&logo=slack\n    :target: https://join.slack.com/t/cachalotdjango/shared_invite/enQtOTMyNzI0NTQzOTA3LWViYmYwMWY3MmU0OTZkYmNiMjBhN2NjNjc4OWVlZDNiMjMxN2Y3YzljYmNiYTY4ZTRjOGQxZDRiMTM0NWE3NGI\n\nQuickstart\n----------\n\nCachalot officially supports Python 2.7, 3.4-3.8 and Django 1.11, 2.0-2.2, 3.0 with the databases PostgreSQL, SQLite, and MySQL.\n\nNote: Python 3.4 with MySQL fails on tests. If you're MySQL is configured correctly,\n\nThird-Party Cache Comparison\n----------------------------\n\nThere are three main third party caches: cachalot, cache-machine, and cache-ops. Which do you use? We suggest a mix:\n\nTL;DR Use cachalot for cold or modified <50 times per seconds (Most people should stick with only cachalot since you\nmost likely won't need to scale to the point of needing cache-machine added to the bowl). If you're an enterprise that\nalready has huge statistics, then mixing cold caches for cachalot and your hot caches with cache-machine is the best\nmix.\n\nRecall, cachalot caches THE ENTIRE TABLE. That's where its inefficiency stems from: if you keep updating the records,\nthen the cachalot constantly invalidates the table and re-caches. Luckily caching is very efficient, it's just the cache\ninvalidation part that kills all our systems. Look at Note 1 below to see how Reddit deals with it.\n\nCachalot is more-or-less intended for cold caches or \"just-right\" conditions. If you find a partition library for\nDjango (also authored but work-in-progress by `Andrew Chen Wang`_), then the caching will work better since sharding\nthe cold/accessed-the-least records aren't invalidated as much.\n\nCachalot is good when there are <50 modifications per second on a hot cached table. This is mostly due to cache invalidation. It's the same with any cache,\nwhich is why we suggest you use cache-machine for hot caches. Cache-machine caches individual objects, taking up more in the memory store but\ninvalidates those individual objects instead of the entire table like cachalot.\n\nYes, the bane of our entire existence lies in cache invalidation and naming variables. Why does cachalot suck when\nstuck with a huge table that's modified rapidly? Since you've mixed your cold (90% of) with your hot (10% of) records,\nyou're caching and invalidating an entire table. It's like trying to boil 1 ton of noodles inside ONE pot instead of\n100 pots boiling 1 ton of noodles. Which is more efficient? The splitting up of them.\n\nNote 1: My personal experience with caches stems from Reddit's: https://redditblog.com/2017/01/17/caching-at-reddit/\n\nNote 2: Technical comparison: https://django-cachalot.readthedocs.io/en/latest/introduction.html#comparison-with-similar-tools\n\nDiscussion\n----------\n\nHelp? Technical chat? `It's here on Slack <https://join.slack.com/t/cachalotdjango/shared_invite/enQtOTMyNzI0NTQzOTA3LWViYmYwMWY3MmU0OTZkYmNiMjBhN2NjNjc4OWVlZDNiMjMxN2Y3YzljYmNiYTY4ZTRjOGQxZDRiMTM0NWE3NGI>`_.\n\nLegacy chat: https://gitter.im/django-cachalot/Lobby\n\n.. _Andrew Chen Wang: https://github.com/Andrew-Chen-Wang\n\n.. image:: https://raw.github.com/noripyt/django-cachalot/master/django-cachalot.jpg",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/noripyt/django-cachalot",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cachalot",
    "package_url": "https://pypi.org/project/django-cachalot/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cachalot/",
    "project_urls": {
      "Homepage": "https://github.com/noripyt/django-cachalot"
    },
    "release_url": "https://pypi.org/project/django-cachalot/2.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Caches your Django ORM queries and automatically invalidates them.",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17268246,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "430037abfec1b7ef4775eac18f2ce7ed6efdd4802d8c10631420f5439bbb3e57",
        "md5": "993628dcab291f7444d692d1853c6dd0",
        "sha256": "c6fa5d0b8c0f8e812e4d9d512d0f923937413f6a892276fe0b094da57cd0d321"
      },
      "downloads": -1,
      "filename": "django-cachalot-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "993628dcab291f7444d692d1853c6dd0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 42428,
      "upload_time": "2020-02-12T05:56:01",
      "upload_time_iso_8601": "2020-02-12T05:56:01.587148Z",
      "url": "https://files.pythonhosted.org/packages/43/00/37abfec1b7ef4775eac18f2ce7ed6efdd4802d8c10631420f5439bbb3e57/django-cachalot-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}