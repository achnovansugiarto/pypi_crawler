{
  "info": {
    "author": "Bertrand Bordage, Andrew Chen Wang",
    "author_email": "acwangpython@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Django Cachalot\n===============\n\nCaches your Django ORM queries and automatically invalidates them.\n\nDocumentation: http://django-cachalot.readthedocs.io\n\n----\n\n.. image:: http://img.shields.io/pypi/v/django-cachalot.svg?style=flat-square&maxAge=3600\n   :target: https://pypi.python.org/pypi/django-cachalot\n\n.. image:: https://img.shields.io/pypi/pyversions/django-cachalot\n    :target: https://django-cachalot.readthedocs.io/en/latest/\n\n.. image:: https://travis-ci.com/noripyt/django-cachalot.svg?branch=master\n   :target: https://travis-ci.com/noripyt/django-cachalot\n\n.. image:: http://img.shields.io/coveralls/noripyt/django-cachalot/master.svg?style=flat-square&maxAge=3600\n   :target: https://coveralls.io/r/noripyt/django-cachalot?branch=master\n\n.. image:: http://img.shields.io/scrutinizer/g/noripyt/django-cachalot/master.svg?style=flat-square&maxAge=3600\n   :target: https://scrutinizer-ci.com/g/noripyt/django-cachalot/\n\n.. image:: https://img.shields.io/discord/773656139207802881\n    :target: https://discord.gg/WFGFBk8rSU\n\n----\n\nTable of Contents:\n\n- Quickstart\n- Usage\n- Hacking\n- Benchmark\n- Third-Party Cache Comparison\n- Discussion\n\nQuickstart\n----------\n\nCachalot officially supports Python 3.5-3.9 and Django 2.0-2.2, 3.0-3.1 with the databases PostgreSQL, SQLite, and MySQL.\n\nUsage\n-----\n\n#. ``pip install django-cachalot``\n#. Add ``'cachalot',`` to your ``INSTALLED_APPS``\n#. If you use multiple servers with a common cache server,\n   `double check their clock synchronisation <https://django-cachalot.readthedocs.io/en/latest/limits.html#multiple-servers>`_\n#. If you modify data outside Django\n   – typically after restoring a SQL database –,\n   use the `manage.py command <https://django-cachalot.readthedocs.io/en/latest/quickstart.html#command>`_\n#. Be aware of `the few other limits <https://django-cachalot.readthedocs.io/en/latest/limits.html#limits>`_\n#. If you use\n   `django-debug-toolbar <https://github.com/jazzband/django-debug-toolbar>`_,\n   you can add ``'cachalot.panels.CachalotPanel',``\n   to your ``DEBUG_TOOLBAR_PANELS``\n#. Enjoy!\n\nHacking\n-------\n\nTo start developing, install the requirements\nand run the tests via tox.\n\nMake sure you have the following services:\n\n* Memcached\n* Redis\n* PostgreSQL\n* MySQL\n\nFor setup:\n\n#. Install: ``pip install -r requirements/hacking.txt``\n#. For PostgreSQL: ``CREATE ROLE cachalot LOGIN SUPERUSER;``\n#. Run: ``tox --current-env`` to run the test suite on your current Python version.\n#. You can also run specific databases and Django versions: ``tox -e py38-django3.1-postgresql-redis``\n\nBenchmark\n---------\n\nCurrently, benchmarks are supported on Linux and Mac/Darwin.\nYou will need a database called \"cachalot\" on MySQL and PostgreSQL.\nAdditionally, on PostgreSQL, you will need to create a role\ncalled \"cachalot.\" You can also run the benchmark, and it'll raise\nerrors with specific instructions for how to fix it.\n\n#. Install: ``pip install -r requirements/benchmark.txt``\n#. Run: ``python benchmark.py``\n\nThe output will be in benchmark/TODAY'S_DATE/\n\nTODO Create Docker-compose file to allow for easier running of data.\n\nThird-Party Cache Comparison\n----------------------------\n\nThere are three main third party caches: cachalot, cache-machine, and cache-ops. Which do you use? We suggest a mix:\n\nTL;DR Use cachalot for cold or modified <50 times per minutes (Most people should stick with only cachalot since you\nmost likely won't need to scale to the point of needing cache-machine added to the bowl). If you're an enterprise that\nalready has huge statistics, then mixing cold caches for cachalot and your hot caches with cache-machine is the best\nmix. However, when performing joins with ``select_related`` and ``prefetch_related``, you can\nget a nearly 100x speed up for your initial deployment.\n\nRecall, cachalot caches THE ENTIRE TABLE. That's where its inefficiency stems from: if you keep updating the records,\nthen the cachalot constantly invalidates the table and re-caches. Luckily caching is very efficient, it's just the cache\ninvalidation part that kills all our systems. Look at Note 1 below to see how Reddit deals with it.\n\nCachalot is more-or-less intended for cold caches or \"just-right\" conditions. If you find a partition library for\nDjango (also authored but work-in-progress by `Andrew Chen Wang`_), then the caching will work better since sharding\nthe cold/accessed-the-least records aren't invalidated as much.\n\nCachalot is good when there are <50 modifications per minute on a hot cached table. This is mostly due to cache invalidation. It's the same with any cache,\nwhich is why we suggest you use cache-machine for hot caches. Cache-machine caches individual objects, taking up more in the memory store but\ninvalidates those individual objects instead of the entire table like cachalot.\n\nYes, the bane of our entire existence lies in cache invalidation and naming variables. Why does cachalot suck when\nstuck with a huge table that's modified rapidly? Since you've mixed your cold (90% of) with your hot (10% of) records,\nyou're caching and invalidating an entire table. It's like trying to boil 1 ton of noodles inside ONE pot instead of\n100 pots boiling 1 ton of noodles. Which is more efficient? The splitting up of them.\n\nNote 1: My personal experience with caches stems from Reddit's: https://redditblog.com/2017/01/17/caching-at-reddit/\n\nNote 2: Technical comparison: https://django-cachalot.readthedocs.io/en/latest/introduction.html#comparison-with-similar-tools\n\nDiscussion\n----------\n\nHelp? Technical chat? `It's here on Discord <https://discord.gg/WFGFBk8rSU>`_.\n\nLegacy chats:\n\n- https://gitter.im/django-cachalot/Lobby\n- https://join.slack.com/t/cachalotdjango/shared_invite/zt-dd0tj27b-cIH6VlaSOjAWnTG~II5~qw\n\n.. _Andrew Chen Wang: https://github.com/Andrew-Chen-Wang\n\n.. image:: https://raw.github.com/noripyt/django-cachalot/master/django-cachalot.jpg\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/noripyt/django-cachalot",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cachalot",
    "package_url": "https://pypi.org/project/django-cachalot/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cachalot/",
    "project_urls": {
      "Homepage": "https://github.com/noripyt/django-cachalot"
    },
    "release_url": "https://pypi.org/project/django-cachalot/2.3.4/",
    "requires_dist": [
      "Django (>=2)"
    ],
    "requires_python": "",
    "summary": "Caches your Django ORM queries and automatically invalidates them.",
    "version": "2.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17268246,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d903fa0dac72a7e12300487983f234e3612f487ef5587ae1c15f3a3846e9932",
        "md5": "1befed4ad6253f68973cff2e7c02ea7b",
        "sha256": "4062026e4d797896a49165b1227d525b3ce08e3ccf643d4659e833c554a77c4c"
      },
      "downloads": -1,
      "filename": "django_cachalot-2.3.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1befed4ad6253f68973cff2e7c02ea7b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 49668,
      "upload_time": "2021-03-23T03:14:16",
      "upload_time_iso_8601": "2021-03-23T03:14:16.983837Z",
      "url": "https://files.pythonhosted.org/packages/6d/90/3fa0dac72a7e12300487983f234e3612f487ef5587ae1c15f3a3846e9932/django_cachalot-2.3.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57f69f96053ad595f2ebc0a5595ef081219561fd0236e03078be42311a72d1bf",
        "md5": "e7cb5beffde0f3913941e274ffe4953c",
        "sha256": "cb984972a3dfe87e7d2a64a235dfcb74a1dc6a152b433e2ba0badb5c06e4bf3c"
      },
      "downloads": -1,
      "filename": "django-cachalot-2.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "e7cb5beffde0f3913941e274ffe4953c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 47360,
      "upload_time": "2021-03-23T03:14:18",
      "upload_time_iso_8601": "2021-03-23T03:14:18.180601Z",
      "url": "https://files.pythonhosted.org/packages/57/f6/9f96053ad595f2ebc0a5595ef081219561fd0236e03078be42311a72d1bf/django-cachalot-2.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}