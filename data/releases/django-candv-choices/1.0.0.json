{
  "info": {
    "author": "Alexander Oblovatniy",
    "author_email": "oblovatniy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "django-candv-choices\r\n====================\r\n\r\n|PyPi package| |Downloads|\r\n\r\nUse complex constants built with `candv`_ library instead of standard `choices`_\r\nfields for `Django`_ models.\r\n\r\nTry `online live demo <http://django-candv-choices.herokuapp.com/>`_! Use\r\n``demo``/``demo`` as login/pass for authentication.\r\n\r\n|Demo preview|\r\n\r\n\r\n**Table of contents**\r\n\r\n.. contents::\r\n    :local:\r\n    :depth: 1\r\n    :backlinks: none\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nInstall from `PyPI <https://pypi.python.org/pypi/django-candv-choices>`_:\r\n\r\n.. code-block:: bash\r\n\r\n    $ pip install django-candv-choices\r\n\r\n\r\nProblem overview\r\n----------------\r\n\r\nWell, you need to define some constant choices for your Django model field.\r\nLet's start from defining constants themselves:\r\n\r\n.. code-block:: python\r\n\r\n    # constants.py\r\n    from django.utils.translation import ugettext_lazy as _\r\n\r\n    AUTH_TYPE_BASIC = 'BASIC'\r\n    AUTH_TYPE_DIGEST = 'DIGEST'\r\n    AUTH_TYPE_CLIENT_CERT = 'CLIENT-CERT'\r\n    AUTH_TYPE_FORM = 'FORM'\r\n\r\n    AUTH_TYPES = (\r\n        (AUTH_TYPE_BASIC, _(\"HTTP Basic Authentication\")),\r\n        (AUTH_TYPE_DIGEST, _(\"HTTP Digest Authentication \")),\r\n        (AUTH_TYPE_CLIENT_CERT, _(\"HTTPS Client Authentication \")),\r\n        (AUTH_TYPE_FORM, _(\"Form Based Authentication \")),\r\n    )\r\n\r\nHere we define constant names and attach verbose names to them. Bloated\r\ndefinition, no docstring for constants group, no docstings per constant. What if\r\nyou need to define some help text per constant? 4 more definitions? Well, then\r\njust imagine, how you will attach them. And what about other attributes?\r\nAnd what about adding some methods for constants? How about getting constant by\r\nits name? By value? And how about performing some operations on the whole\r\nconstants group?\r\n\r\nOnly at this point you may end up with one big module which will work only with\r\none group of constants. And this work will be a big pain.\r\n\r\nBut OK, let's go further and define some DB model field:\r\n\r\n.. code-block:: python\r\n\r\n    # models.py\r\n    from django.db import models\r\n    from django.utils.translation import ugettext_lazy as _\r\n\r\n    from . constants import AUTH_TYPES, AUTH_TYPE_BASIC\r\n\r\n\r\n    class Request(models.Model):\r\n\r\n        auth_type = models.CharField(\r\n            verbose_name=_(\"Auth type\"),\r\n            help_text=_(\"Example of default constants\"),\r\n            choices=AUTH_TYPES,\r\n            blank=False,\r\n            max_length=11,\r\n            default=AUTH_TYPE_BASIC)\r\n\r\n3 things to mention here:\r\n\r\n* you have to import constant group itself;\r\n* you may have to import dafault value too;\r\n* you need go back to constants definition, iterate over each constant,\r\n  calculate its length and select the longest value to pass it as ``max_length``\r\n  argument. And don't try to make a mistake, or you will be punished otherwise.\r\n\r\nI use ``CharField`` here intentionally. It can be good to use ``IntegerField``,\r\n``PositiveSmallIntegerField`` and so on, but it is very probable that you will\r\nbe willing someone to kill you due to hidden bugs.\r\n\r\nNow it's showtime! Let's render our field:\r\n\r\n.. code-block:: jinja\r\n\r\n    <ul>\r\n    {% for r in requests %}\r\n      <li>{{ r.auth_type }}</li>\r\n    {% endfor %}\r\n    </ul>\r\n\r\nWhat do you see? ``BASIC``, ``DIGEST``, ``FORM``, etc. Oops! How to get our\r\nhuman messages like ``HTTP Basic Authentication``?\r\n\r\nYou need to convert constants group to ``dict`` and pass it to template's\r\ncontext! But wait, this is not the end. You can not access dict values directly\r\nwithin templates. You need to create a library of template tags, register a\r\nfilter and load the library to template:\r\n\r\n.. code-block:: python\r\n\r\n    # templatetags/custom_tags.py\r\n    from django import template\r\n\r\n    register = template.Library()\r\n\r\n\r\n    @register.filter\r\n    def lookup(d, key):\r\n        return d[key]\r\n\r\n\r\n.. code-block:: jinja\r\n\r\n    {% load custom_tags %}\r\n    <ul>\r\n    {% for r in requests %}\r\n      <li>{{ AUTH_TYPES|lookup:r.auth_type }}</li>\r\n    {% endfor %}\r\n    </ul>\r\n\r\n\r\nThis is madness!\r\n\r\n\r\nSolution\r\n--------\r\n\r\nThe solution is to use `candv`_ and this library. The former allows you to\r\ndefine stand-alone groups of complex constants and latter allows you to use\r\nthose constants as choises.\r\n\r\nLet's examine some simple example and define some constants:\r\n\r\n.. code-block:: python\r\n\r\n    # constants.py\r\n    from candv import SimpleConstant, Constants\r\n\r\n    class METHOD_TYPE(Constants):\r\n        \"\"\"\r\n        Available HTTP methods.\r\n        \"\"\"\r\n        GET = SimpleConstant()\r\n        PUT = SimpleConstant()\r\n        POST = SimpleConstant()\r\n        DELETE = SimpleConstant()\r\n        TRACE = SimpleConstant()\r\n\r\nHere we defined a group of constants with no attributes. Looks pretty, let's use\r\nit:\r\n\r\n.. code-block:: python\r\n\r\n    # models.py\r\n    from candv_choices import ChoicesField\r\n\r\n    from django.db import models\r\n    from django.utils.translation import ugettext_lazy as _\r\n\r\n    from . constants import METHOD_TYPE\r\n\r\n    class Request(models.Model):\r\n\r\n        method = ChoicesField(\r\n            verbose_name=_(\"method\"),\r\n            help_text=_(\"Example of simple candv constants\"),\r\n            choices=METHOD_TYPE,\r\n            blank=False,\r\n        )\r\n\r\nThat's all. You can pass some default value if you want,\r\ne.g. ``default=METHOD_TYPE.GET``.\r\n\r\nNow you can render it:\r\n\r\n.. code-block:: jinja\r\n\r\n    <ul>\r\n    {% for r in requests %}\r\n      <li>{{ r.method.name }}</li>\r\n    {% endfor %}\r\n    </ul>\r\n\r\nThe output will contain ``GET``, ``PUT``, ``POST``, etc. Want more? Let's add\r\nvalues, verbose names and help texts:\r\n\r\n.. code-block:: python\r\n\r\n    # constants.py\r\n    from candv import VerboseValueConstant, Values\r\n    from django.utils.translation import ugettext_lazy as _\r\n\r\n    class RESULT_TYPE(Values):\r\n        \"\"\"\r\n        Possible operation results.\r\n        \"\"\"\r\n        SUCCESS = VerboseValueConstant(\r\n            value='2C7517',\r\n            verbose_name=_(\"Success\"),\r\n            help_text=_(\"Yay! Everything is good!\")\r\n        )\r\n        FAILURE = VerboseValueConstant(\r\n            value='A30D0D',\r\n            verbose_name=_(\"Failure\"),\r\n            help_text=_(\"Oops! Something went wrong!\")\r\n        )\r\n        PENDING = VerboseValueConstant(\r\n            value='E09F26',\r\n            verbose_name=_(\"Pending\"),\r\n            help_text=_(\"Still waiting for the task to complete...\")\r\n        )\r\n\r\n..\r\n\r\n    Please, refer to `candv usage`_ to learn how to define and use constants.\r\n    You may find `candv customization`_ useful too.\r\n\r\nHere we have used `Values`_ as container and `VerboseValueConstant`_ as class\r\nfor items. Each constant has a ``name`` (e.g. ``SUCCESS``), a value, a verbose\r\ntext and a help text. All of this you can access directly from everywhere.\r\n\r\nField definition does not differ much from previous:\r\n\r\n.. code-block:: python\r\n\r\n    # models.py\r\n    from candv_choices import ChoicesField\r\n\r\n    from django.db import models\r\n    from django.utils.translation import ugettext_lazy as _\r\n\r\n    from . constants import RESULT_TYPE\r\n\r\n    class Request(models.Model):\r\n\r\n        result = ChoicesField(\r\n                verbose_name=_(\"result\"),\r\n                help_text=_(\"Example of complex candv constants with verbose names, \"\r\n                            \"help texts and inner values\"),\r\n                choices=RESULT_TYPE,\r\n                blank=False,\r\n                default=RESULT_TYPE.SUCCESS,\r\n            )\r\n\r\nYou may use ``blank=True`` if you wish, there's no problem. Let's output our\r\ndata:\r\n\r\n.. code-block:: jinja\r\n\r\n    <table>\r\n    {% for r in requests %}\r\n      <tr>\r\n        <td style=\"color: #{{ r.result.value }};\" title=\"{{ r.result.help_text }}\">\r\n          {{ r.result.verbose_name }}\r\n        </td>\r\n      </tr>\r\n    {% endfor %}\r\n    </table>\r\n\r\nNot so hard, innit?\r\n\r\nYou can pass any constants to ``ChoicesField`` from your old projects or\r\nexternal libraries. Enjoy!\r\n\r\nCaveats\r\n-------\r\n\r\n* Django admin renders choices by converting them to strings. So,\r\n  ``__str__`` and ``__unicode__`` methods will be automatically overriden for\r\n  constant items. It will return the name of the constant. By default, constants\r\n  in ``candv`` do not have those methods at all (I cannot find a reason why the\r\n  should to), so it seems not to be a problem. Just be aware.\r\n* ``candv`` supports creating constants' `hierarchies`_. If you have some reason\r\n  to use them as choices for DB field, take into accout that choices will be\r\n  built only from top-level group of constants.\r\n* ``candv`` supports Python 2.7, 3.2 and 3.3. This library surely works with 2.7\r\n  and have to work with the others, but I'm not sure (just no time to check).\r\n\r\n\r\nThings to think about\r\n---------------------\r\n\r\n* Django has `MultipleChoiceField`_ and `TypedMultipleChoiceField`_. I haven't\r\n  used used them, but I think it can be useful to implement analogues for\r\n  'candv', especially for ``MultipleChoiceField``.\r\n* I think, there is a place to think about implementation of full support of\r\n  hierarchies. Maybe it's possible to make some nested choices, or at least\r\n  flatten them.\r\n\r\nChangelog\r\n---------\r\n\r\n* `1.0.0`_ (Jun 22, 2014)\r\n\r\n  Initial version\r\n\r\n\r\n.. |PyPi package| image:: https://badge.fury.io/py/django-candv-choices.png\r\n   :target: http://badge.fury.io/py/django-candv-choices/\r\n.. |Downloads| image:: https://pypip.in/d/django-candv-choices/badge.png\r\n   :target: https://crate.io/packages/django-candv-choices/\r\n\r\n.. |Demo preview| image:: http://i.imgur.com/NXKsgRA.png\r\n   :target: http://django-candv-choices.herokuapp.com/\r\n   :alt: Live demo screenshot\r\n\r\n.. _candv: http://candv.readthedocs.org/en/latest/\r\n.. _choices: https://docs.djangoproject.com/en/1.6/ref/models/fields/#django.db.models.Field.choices\r\n.. _Django: https://www.djangoproject.com/\r\n\r\n.. _Values: http://candv.readthedocs.org/en/latest/candv.html#candv.Values\r\n.. _VerboseValueConstant: http://candv.readthedocs.org/en/latest/candv.html#candv.VerboseValueConstant\r\n\r\n.. _candv usage: http://candv.readthedocs.org/en/latest/usage.html#usage\r\n.. _candv customization: http://candv.readthedocs.org/en/latest/customization.html\r\n\r\n.. _hierarchies: http://candv.readthedocs.org/en/latest/usage.html#hierarchies\r\n\r\n.. _MultipleChoiceField: https://docs.djangoproject.com/en/1.6/ref/forms/fields/#multiplechoicefield\r\n.. _TypedMultipleChoiceField: https://docs.djangoproject.com/en/1.6/ref/forms/fields/#typedmultiplechoicefield\r\n\r\n.. _1.0.0: https://github.com/oblalex/django-candv-choices/releases/tag/v1.0.0",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/oblalex/django-candv-choices/archive/v1.0.0.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oblalex/django-candv-choices",
    "keywords": "choices constants Django candv values",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-candv-choices",
    "package_url": "https://pypi.org/project/django-candv-choices/",
    "platform": "ANY",
    "project_url": "https://pypi.org/project/django-candv-choices/",
    "project_urls": {
      "Download": "https://github.com/oblalex/django-candv-choices/archive/v1.0.0.zip",
      "Homepage": "https://github.com/oblalex/django-candv-choices"
    },
    "release_url": "https://pypi.org/project/django-candv-choices/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Use complex constants built with 'candv' library instead of standard 'choices' fields for 'Django' models.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1660082,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d9e0da1ad1f3f4e401909922060627dec4d2c22874ddb85e37f16118d1c57f2",
        "md5": "14f85887554f520d2a566bfc2cd6e544",
        "sha256": "8d3c61d4ee9383bea0d951df15e7989830d503ec3caf62efde7c19d031b675b3"
      },
      "downloads": -1,
      "filename": "django-candv-choices-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "14f85887554f520d2a566bfc2cd6e544",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8827,
      "upload_time": "2014-06-22T17:59:19",
      "upload_time_iso_8601": "2014-06-22T17:59:19.868462Z",
      "url": "https://files.pythonhosted.org/packages/6d/9e/0da1ad1f3f4e401909922060627dec4d2c22874ddb85e37f16118d1c57f2/django-candv-choices-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}