{
  "info": {
    "author": "",
    "author_email": "larsvonschaff@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Django Mockingbird: the fastest way to write the fastest Django unit tests\n\n\n## 1. What is Django Mockingbird and why would I need it?\n\nUntil now, there were two options for writing tests for a Django application: either create objects in the database for every test or mock the database queries using [Unit test’s Mock](https://docs.python.org/3/library/unittest.mock.html). While the former is slow, the latter is complicated to write and read. Both add a lot of setup code to our tests. Django Mockingbird introduces a new way to write tests for Django, which is fast to run as well as simple to write.\n\n## 2. How does it work?\n\nIt works by creating a mock object which behaves exactly like the Django model, but does not execute any queries under the hood. It only takes one line of code to use it in your test. It is not meant to be used in place of frameworks like Pytest, but to complement them.\n\n## 3. How do I use it?\n\n### Installation \n\n```python\npip install djangomockingbird\n```\n\n### Constructions the mocks\n\n```python\n\nfrom models import Model\nfrom djangomockingbird import make_mocks\n\nmy_mock = make_mocks(Model)\n\n```\nmy_mock is now an object that mimics Model's behaviour exactly.\n\n### Using the mocks \n\n\nThe most straightforward way is to monkeypatch the object directly using its absolute path. In this example function_to_test is a function that can containt any amount of queries involving Model. With Django Mockingbird only the code below is necessary for this kind of test to pass, no matter how complicated the queries.\n\n\n```python\nfrom djangomockingbird import make_mocks\nimport myapp\nimport function_to_test\n\ndef test_my_test_case():\n\n    myapp.myfile.Model = make_mocks(Model)\n    result = function_to_test()\n    #assertions here\n\n```\nA good way to use Django mockingbird is also with [Pytest's](https://docs.pytest.org/en/stable/) monkeypatch.\n\n\n```python\nimport pytest\nfrom djangomockingbird import make_mocks\nimport myapp\nimport function_to_test\n\ndef test_my_test_case(monkeypatch):\n    mock_model = make_mocks(Model)\n    monkeypatch.setattr('myapp.myfile.Model', mock_model)\n    result = function_to_test()\n    #assertions here\n\n```\n\n### Specifiying mock return data\n\nYou can specify the values of specific fields of the model object you are mocking. If you don’t empty strings will be returned. Construct a dictionary with field names as keys and desired returs as values and pass it to the 'specs' argument of make_mocks. If you try to specify a nonexisant field as a key an error will be thrown, but you can specify any kind of value you want.\n\n```python\n\nmock = make_mocks(Model, specs={'model_field':'desired_value'})\n\n```\n\n\n### Attention! Cases where returns must be specified: Model methods\n\nIf your model has custom methods and they are used by the test, you must specify their names and return data to the mock, otherwise your tests won't pass. \n\n```python\n\n model_method_specs = {'to_dict': {'': ''}}\n mock = make_mocks(Model, model_method_specs=model_method_specs)\n\n ```\n\n\n## 4. Is it production ready? Can I help make it better? \n\nThis is still a very new project, but is quite stable for the general use case. However, there are advanced use cases that are not yet supported, most notably [custom model managers](https://docs.djangoproject.com/en/3.1/topics/db/managers/#custom-managers). For those test cases you can try supplementing Django Mockingbird with your own code or other libraries. Because this tool is really just one elaborate mock model it is very flexible and plays well with pretty much anything.\n\nWe would appreciate you opening issues to bring any defects or oversights to light. Contributions are also kindly accepted - see more on the code arhitecture principles below if you are interested. \n\n## 5. Where can I read more details on the architcture and stuff?\n\nRead about the how functional programming principles were used in the library [here](http://www.cmdctrlesc.xyz/post/6) and on metaprogramming features [here](http://www.cmdctrlesc.xyz/post/5).\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/larsvonschaff/Django-mockingbird",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangomockingbird",
    "package_url": "https://pypi.org/project/djangomockingbird/",
    "platform": "",
    "project_url": "https://pypi.org/project/djangomockingbird/",
    "project_urls": {
      "Homepage": "https://github.com/larsvonschaff/Django-mockingbird"
    },
    "release_url": "https://pypi.org/project/djangomockingbird/1.0.3/",
    "requires_dist": [
      "django"
    ],
    "requires_python": "",
    "summary": "The fastest way to write the fastest Django unit tests",
    "version": "1.0.3",
    "yanked": true,
    "yanked_reason": null
  },
  "last_serial": 16507557,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9811f92237d1067c3aa7d9ea336889f4b8c5d511c31160eea271c5a421907cd9",
        "md5": "f129e0ea49b8428cd385704f2c22427a",
        "sha256": "2215b79b3f2fdf90b8c3758d5133f12cdee1efbc0bc3d48bbece0d2d0d620522"
      },
      "downloads": -1,
      "filename": "djangomockingbird-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f129e0ea49b8428cd385704f2c22427a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7953,
      "upload_time": "2021-10-14T19:56:46",
      "upload_time_iso_8601": "2021-10-14T19:56:46.335728Z",
      "url": "https://files.pythonhosted.org/packages/98/11/f92237d1067c3aa7d9ea336889f4b8c5d511c31160eea271c5a421907cd9/djangomockingbird-1.0.3-py3-none-any.whl",
      "yanked": true,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e93690242bea3aca04f82fd085b9ca2d57ff01f78500db8a01df5b93c46572c",
        "md5": "379d3980adc714a50586142afca5fc17",
        "sha256": "559d9b0b340a45b61d1abf2a3074632df17c60c5da6203c465ad72eb950e9066"
      },
      "downloads": -1,
      "filename": "djangomockingbird-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "379d3980adc714a50586142afca5fc17",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6515,
      "upload_time": "2021-10-14T19:56:48",
      "upload_time_iso_8601": "2021-10-14T19:56:48.692717Z",
      "url": "https://files.pythonhosted.org/packages/3e/93/690242bea3aca04f82fd085b9ca2d57ff01f78500db8a01df5b93c46572c/djangomockingbird-1.0.3.tar.gz",
      "yanked": true,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}