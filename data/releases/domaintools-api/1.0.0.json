{
  "info": {
    "author": "DomainTools",
    "author_email": "integrations@domaintools.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "![domaintools](https://github.com/DomainTools/python_api/raw/main/artwork/logo.png)\n===================\n\n[![PyPI version](https://badge.fury.io/py/domaintools_api.svg)](http://badge.fury.io/py/domaintools_api)\n[![CI Status](https://github.com/domaintools/python_api/workflows/Tests/badge.svg)](https://github.com/domaintools/python_api/actions)\n[![Coverage Status](https://coveralls.io/repos/github/DomainTools/python_api/badge.svg?branch=main)](https://coveralls.io/github/DomainTools/python_api?branch=main)\n[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://pypi.python.org/pypi/domaintools_api/)\n\nDomainTools Official Python API\n\n![domaintools Example](https://github.com/DomainTools/python_api/raw/main/artwork/example.gif)\n\nThe DomainTools Python API Wrapper provides an interface to work with our cybersecurity and related data tools provided by our Iris Investigate™, Iris Enrich™, and Iris Detect™ products. It is actively maintained and may be downloaded via <a href=\"https://github.com/DomainTools/python_api\">GitHub</a> or <a href=\"https://pypi.org/project/domaintools-api/\">PyPI</a>. See the included README file, the examples folder, and API documentation (https://app.swaggerhub.com/apis-docs/DomainToolsLLC/DomainTools_APIs/1.0#) for more info.\n\nInstalling the DomainTools API\n===================\n\nTo install the API run\n\n```bash\npip install domaintools_api --upgrade\n```\n\nIdeally, within a virtual environment.\n\n\nUsing the API\n===================\n\nTo start out create an instance of the API - passing in your credentials\n\n```python\n\nfrom domaintools import API\n\n\napi = API(USER_NAME, KEY)\n```\n\nEvery API endpoint is then exposed as a method on the API object, with any parameters that should be passed into that endpoint\nbeing passed in as method arguments:\n\n```python\napi.iris_enrich('domaintools.com')\n```\n\nYou can get an overview of every endpoint that you can interact with using the builtin help function:\n\n```python\nhelp(api)\n```\n\nOr if you know the endpoint you want to use, you can get more information about it:\n\n```python\nhelp(api.iris_investigate)\n```\n\nIf applicable, native Python looping can be used directly to loop through any results:\n\n```python\nfor result in api.iris_enrich('domaintools.com').response().get('results', {}):\n    print(result['domain'])\n```\n\nYou can also use a context manager to ensure processing on the results only occurs if the request is successfully made:\n\n```python\nwith api.iris_enrich('domaintools.com').response().get('results', {}) as results:\n    print(results)\n```\n\nFor API calls where a single item is expected to be returned, you can directly interact with the result:\n\n```python\nprofile = api.domain_profile('google.com')\ntitle = profile['website_data']['title']\n```\n\nFor any API call where a single type of data is expected you can directly cast to the desired type:\n\n```python\nfloat(api.reputation('google.com')) == 0.0\nint(api.reputation('google.com')) == 0\n```\n\nThe entire structure returned from DomainTools can be retrieved by doing `.data()` while just the actionable response information\ncan be retrieved by doing `.response()`:\n\n```python\napi.iris_enrich('domaintools.com').data() == {'response': { ... }}\napi.iris_enrich('domaintools.com').response() == { ... }\n```\n\nYou can directly get the html, xml, or json version of the response by calling `.(html|xml|json)()` These only work with non AsyncResults:\n```python\njson = str(api.domain_search('google').json())\nxml = str(api.domain_search('google').xml())\nhtml = str(api.domain_search('google').html())\n```\n\nIf any API call is unsuccesfull, one of the exceptions defined in `domaintools.exceptions` will be raised:\n\n```python-traceback\napi.domain_profile('notvalid').data()\n\n\n---------------------------------------------------------------------------\nBadRequestException                       Traceback (most recent call last)\n<ipython-input-3-f9e22e2cf09d> in <module>()\n----> 1 api.domain_profile('google').data()\n\n/home/tcrosley/projects/external/python_api/venv/lib/python3.5/site-packages/domaintools-0.0.1-py3.5.egg/domaintools/base_results.py in data(self)\n     25                 self.api._request_session = Session()\n     26             results = self.api._request_session.get(self.url, params=self.kwargs)\n---> 27             self.status = results.status_code\n     28             if self.kwargs.get('format', 'json') == 'json':\n     29                 self._data = results.json()\n\n/home/tcrosley/projects/external/python_api/venv/lib/python3.5/site-packages/domaintools-0.0.1-py3.5.egg/domaintools/base_results.py in status(self, code)\n     44\n     45         elif code == 400:\n---> 46             raise BadRequestException()\n     47         elif code == 403:\n     48             raise NotAuthorizedException()\n\nBadRequestException:\n\n```\n\nthe exception will contain the status code and the reason for the exception:\n\n```python\ntry:\n    api.domain_profile('notvalid').data()\nexcept Exception as e:\n    assert e.code == 400\n    assert 'We could not understand your request' in e.reason['error']['message']\n```\n\nYou can get the status code of a response outside of exception handling by doing `.status`:\n\n```python\n\napi.domain_profile('google.com').status == 200\n```\n\nUsing the API Asynchronously\n===================\n\n![domaintools Async Example](https://github.com/DomainTools/python_api/raw/main/artwork/example_async.gif)\n\nThe DomainTools API automatically supports async usage:\n\n```python\n\nsearch_results = await api.iris_enrich('domaintools.com').response().get('results', {})\n```\n\nThere is built-in support for async context managers:\n\n```python\nasync with api.iris_enrich('domaintools.com').response().get('results', {}) as search_results:\n    # do things\n```\n\nAnd direct async for loops:\n\n```python\nasync for result in api.iris_enrich('domaintools.com').response().get('results', {}):\n    print(result)\n```\n\nAll async operations can safely be intermixed with non async ones - with optimal performance achieved if the async call is done first:\n```python\nprofile = api.domain_profile('google.com')\nawait profile\ntitle = profile['website_data']['title']\n```\n\nInteracting with the API via the command line client\n===================\n\n![domaintools CLI Example](https://github.com/DomainTools/python_api/raw/main/artwork/example_cli.gif)\n\nImmediately after installing `domaintools_api` with pip, a `domaintools` command line client will become available to you:\n\n```bash\ndomaintools --help\n```\n\nTo use - simply pass in the api_call you would like to make along with the parameters that it takes and your credentials:\n\n```bash\ndomaintools iris_investigate --domains domaintools.com -u $TEST_USER -k $TEST_KEY\n```\n\nOptionally, you can specify the desired format (html, xml, json, or list) of the results:\n\n```bash\ndomaintools domain_search google --max_length 10 -u $TEST_USER -k $TEST_KEY -f html\n```\n\nTo avoid having to type in your API key repeatedly, you can specify them in `~/.dtapi` separated by a new line:\n\n```bash\nAPI_USER\nAPI_KEY\n```\n\nPython Version Support Policy\n===================\n\nPlease see the [supported versions](https://github.com/DomainTools/python_api/raw/main/PYTHON_SUPPORT.md) document \nfor the DomainTools Python support policy.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/domaintools/python_api",
    "keywords": "Python,Python3",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "domaintools-api",
    "package_url": "https://pypi.org/project/domaintools-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/domaintools-api/",
    "project_urls": {
      "Homepage": "https://github.com/domaintools/python_api"
    },
    "release_url": "https://pypi.org/project/domaintools-api/1.0.0/",
    "requires_dist": [
      "httpx",
      "dateparser"
    ],
    "requires_python": "",
    "summary": "DomainTools Official Python API",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14744310,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b3772fb346e51dab1e7a0c1c65decb6c22f476b7b1863db0dc4244f7fa33844",
        "md5": "8e376e6a02d7f44e63d595f0d45164a8",
        "sha256": "451c84ec5068ea1aee5f1141588d6e41b53b23cf6244d3580fc320b5843c9e94"
      },
      "downloads": -1,
      "filename": "domaintools_api-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8e376e6a02d7f44e63d595f0d45164a8",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 21847,
      "upload_time": "2022-06-16T15:49:19",
      "upload_time_iso_8601": "2022-06-16T15:49:19.706590Z",
      "url": "https://files.pythonhosted.org/packages/4b/37/72fb346e51dab1e7a0c1c65decb6c22f476b7b1863db0dc4244f7fa33844/domaintools_api-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b181ace6b5276b08871a7423e8598546c25a485a4219ff368559b17e68b0833",
        "md5": "2877b69babcaf641109899ef2fee8266",
        "sha256": "33d578e1bf1bac8744dab113820fd082aaf273e752bf6fa057748abe5bc6459e"
      },
      "downloads": -1,
      "filename": "domaintools_api-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2877b69babcaf641109899ef2fee8266",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22109,
      "upload_time": "2022-06-16T15:49:21",
      "upload_time_iso_8601": "2022-06-16T15:49:21.648842Z",
      "url": "https://files.pythonhosted.org/packages/2b/18/1ace6b5276b08871a7423e8598546c25a485a4219ff368559b17e68b0833/domaintools_api-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}