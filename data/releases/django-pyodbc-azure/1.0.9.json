{
  "info": {
    "author": "Michiya Takahashi",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.4",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "django-pyodbc-azure\n===================\n\n*django-pyodbc-azure* is a refined fork of\n`django-pyodbc <https://github.com/avidal/django-pyodbc>`__, a\n`Django <http://djangoproject.com/>`__ MS SQL Server external DB backend\nthat uses ODBC by employing the\n`pyodbc <https://code.google.com/p/pyodbc/>`__ library. It supports MS\nSQL Server and Windows Azure SQL Database.\n\nFeatures\n--------\n\n-  Supports Django 1.2, 1.3, 1.4, 1.5\n-  Supports MS SQL Server 2005, 2008/2008R2, 2012, and Windows Azure SQL\n   Database\n-  Supports LIMIT+OFFSET and offset w/o LIMIT emulation.\n-  Passes most of the tests of the Django test suite.\n-  Compatible with *SQL Server* and *SQL Server Native Client* (Windows),\n   *Micosoft ODBC Driver for SQL Server* and *FreeTDS* (Linux) ODBC drivers.\n\nDependencies\n------------\n\n-  Django 1.2 or newer\n-  pyodbc 2.1 or newer\n\nInstallation\n------------\n\n1. Install pyodbc\n\n2. Install django-pyodbc-azure ::\n\n    pip install django-pyodbc-azure\n\n3. Now you can point the ``ENGINE`` setting in the settings file used by\n   your Django application or project to the ``'sql_server.pyodbc'``\n   module path ::\n\n    'ENGINE': 'sql_server.pyodbc'\n\nConfiguration\n-------------\n\nThe following database-level settings control the behavior of the backend:\n\nStandard Django settings\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  ENGINE\n\n   String. It must be ``\"sql_server.pyodbc\"``.\n\n-  NAME\n\n   String. Database name. Required.\n\n-  HOST\n\n   String. SQL Server instance in ``\"server\\instance\"`` (on-premise) or\n   ``\"server.database.windows.net\"`` (Windows Azure SQL Database) format.\n\n-  PORT\n\n   String. Server instance port.\n   An empty string means the default port.\n\n-  USER\n\n   String. Database user name in ``\"user\"`` (on-premise) or\n   ``\"user@server\"`` (Windows Azure SQL Database) format.\n   If not given then MS Integrated Security will be used.\n\n-  PASSWORD\n\n   String. Database user password.\n\n-  TEST_NAME\n\n   String. The name of database to use when running the test suite.\n   If the default value (``None``) is used, the test database will use\n   the name \"test\\_\" + ``NAME``.\n\n-  TEST_COLLATION\n\n   String. The collation order to use when creating the test database.\n   If the default value (``None``) is used, the test database is assigned\n   the default collation of the instance of SQL Server.\n\n-  TEST_CREATE\n\n   Boolean. If it is set to ``False``, the test database wonâ€™t be\n   automatically created at the beginning of the tests and dropped at the end.\n   This is useful not to be charged too much for creating new databases\n   in every test when you run tests with Windows Azure SQL Database.\n\n-  TEST_DEPENDENCIES\n\n   String. The creation-order dependencies of the database.\n   See the official Django documentation for more details.\n\n-  TEST_MIRROR\n\n   String. The alias of the database that this database should\n   mirror during testing. Default value is ``None``.\n   See the official Django documentation for more details.\n\nOPTIONS\n~~~~~~~\n\nDictionary. Current available keys are:\n\n-  autocommit\n\n   Boolean. Indicates if pyodbc should direct the ODBC driver to\n   activate the autocommit feature. Default value is ``False``.\n\n-  MARS_Connection\n\n   Boolean. Only relevant when using Microsoft's SQL Server drivers\n   (SQL Server Native Client or ODBC Driver for SQL Server).\n   Default value is ``False``.\n\n-  driver\n\n   String. ODBC Driver to use (``\"SQL Server Native Client 11.0\"`` etc).\n   See http://msdn.microsoft.com/en-us/library/ms130892.aspx. Default is\n   ``\"SQL Server\"`` on Windows and ``\"FreeTDS\"`` on other platforms.\n\n-  dsn\n\n   String. A named DSN can be used instead of ``HOST``.\n\n-  host_is_server\n\n   Boolean. Only relevant if using the FreeTDS ODBC driver under\n   Unix/Linux.\n\n   By default, when using the FreeTDS ODBC driver the value specified in\n   the ``HOST`` setting is used in a ``SERVERNAME`` ODBC connection\n   string component instead of being used in a ``SERVER`` component;\n   this means that this value should be the name of a *dataserver*\n   definition present in the ``freetds.conf`` FreeTDS configuration file\n   instead of a hostname or an IP address.\n\n   But if this option is present and it's value is ``True``, this\n   special behavior is turned off.\n\n   See http://www.freetds.org/userguide/dsnless.htm for more information.\n\n-  extra_params\n\n   String. Additional parameters for the ODBC connection. The format is\n   ``\"param=value;param=value\"``.\n\n-  collation\n\n   String. Name of the collation to use when performing text field\n   lookups against the database. Default is ``None``; this means no\n   collation specifier is added to your lookup SQL (the default\n   collation of your database will be used). For Chinese language you\n   can set it to ``\"Chinese_PRC_CI_AS\"``.\n\n-  use_legacy_datetime\n\n   Boolean. ``DateField``, ``TimeField`` and ``DateTimeField`` of models\n   are mapped to SQL Server's legacy ``datetime`` type if the value is ``True``\n   (the same behavior as the original ``django-pyodbc``). Otherwise, they\n   are mapped to new dedicated data types (``date``, ``time``, ``datetime2``).\n   Default value is ``False``, and note that the feature is always activated\n   when you use SQL Server 2005 or FreeTDS.\n\nbackend-specific settings\n~~~~~~~~~~~~~~~~~~~~~~~~~\nThe following project-level settings also control the behavior of the backend:\n\n-  DATABASE_CONNECTION_POOLING\n\n   Boolean. If it is set to ``False``, pyodbc's connection pooling feature\n   won't be activated.\n\nExample\n~~~~~~~\n\nHere is an example of the database settings:\n\n::\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'sql_server.pyodbc',\n            'NAME': 'mydb',\n            'USER': 'user@myserver',             \n            'PASSWORD': 'password',\n            'HOST': 'myserver.database.windows.net',\n            'PORT': '',\n\n            'OPTIONS': {\n                'driver': 'SQL Server Native Client 11.0',\n                'MARS_Connection': True,\n            },\n        },\n    }\n    \n    # set this to False if you want to turn off pyodbc's connection pooling\n    DATABASE_CONNECTION_POOLING = False\n\nUtilities\n---------\n\nbackend-specific aggregation classes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA couple of aggregation classes specific to SQL Server\n(``Avg``, ``StdDev``, ``Variance``) are bundled with the backend.\nInstead of Django's standard ones, you can use them like this: ::\n\n   from sql_server.pyodbc.aggregates import Avg\n\n   vals = Book.objects.aggregate(Avg('price'))\n\nAnd you can use Django's standard classes for other aggregating operations.\n\nLicense\n=======\n\nNew BSD LICENSE\n\nCredits\n=======\n\n-  `Ramiro Morales <https://people.djangoproject.com/ramiro/>`__\n-  `Filip Wasilewski <http://code.djangoproject.com/ticket/5246>`__\n-  `Wei guangjing <https://people.djangoproject.com/vcc/>`__\n-  `mamcx <http://code.djangoproject.com/ticket/5062>`__\n-  `Alex Vidal <http://github.com/avidal/>`__\n-  `Michiya Takahashi <http://github.com/michiya/>`__",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/michiya/django-pyodbc-azure",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-pyodbc-azure",
    "package_url": "https://pypi.org/project/django-pyodbc-azure/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-pyodbc-azure/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/michiya/django-pyodbc-azure"
    },
    "release_url": "https://pypi.org/project/django-pyodbc-azure/1.0.9/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django backend for MS SQL Server and Windows Azure SQL Database using pyodbc",
    "version": "1.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4190536,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a944d905fde5dfba9e9d2d861a72d3d13f9a4a6646b61a443063ccc386626c7a",
        "md5": "4f6cf5914799ed3cfd889e7d89a6dce4",
        "sha256": "2893b609762d2efc10fdb34cffbde4d45ea24d4aaf1a0bedc050bbcbd171a25f"
      },
      "downloads": -1,
      "filename": "django-pyodbc-azure-1.0.9.zip",
      "has_sig": false,
      "md5_digest": "4f6cf5914799ed3cfd889e7d89a6dce4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34548,
      "upload_time": "2013-11-10T03:21:05",
      "upload_time_iso_8601": "2013-11-10T03:21:05.182525Z",
      "url": "https://files.pythonhosted.org/packages/a9/44/d905fde5dfba9e9d2d861a72d3d13f9a4a6646b61a443063ccc386626c7a/django-pyodbc-azure-1.0.9.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}