{
  "info": {
    "author": "Michiya Takahashi",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.4",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "django-pyodbc-azure\n===================\n\n*django-pyodbc-azure* is a refined fork of\n`django-pyodbc <https://github.com/avidal/django-pyodbc>`__, a\n`Django <http://djangoproject.com/>`__ MS SQL Server external DB backend\nthat uses ODBC by employing the\n`pyodbc <https://code.google.com/p/pyodbc/>`__ library. It supports MS\nSQL Server and Windows Azure SQL Database.\n\nFeatures\n--------\n\n-  Supports Django 1.2, 1.3, 1.4, and 1.5\n-  Supports MS SQL Server 2005, 2008/2008R2, 2012, and Windows Azure SQL\n   Database\n-  Supports LIMIT+OFFSET and offset w/o LIMIT emulation.\n-  Passes most of the tests of the Django test suite.\n-  Compatible with SQL Server and SQL Server Native Client (Windows),\n   Microsoft ODBC Driver for SQL Server and FreeTDS ODBC drivers\n   (Linux).\n\nDependencies\n------------\n\n-  Django 1.2 or newer\n-  pyodbc 2.1 or newer\n\nInstallation\n------------\n\n1. Install pyodbc\n\n2. Install django-pyodbc-azure ::\n\n    pip install django-pyodbc-azure\n\n3. Now you can point the ``ENGINE`` setting in the settings file used by\n   your Django application or project to the ``'sql_server.pyodbc'``\n   module path ::\n\n    'ENGINE': 'sql_server.pyodbc'\n\nConfiguration\n-------------\n\nThe following settings in ``DATABASES['alias']`` control the behavior of\nthe backend:\n\nStandard Django settings\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  ENGINE\n\n   String. It must be ``\"sql_server.pyodbc\"``.\n\n-  DATABASE_NAME\n\n   String. Database name. Required.\n\n-  HOST\n\n   String. SQL Server instance in ``\"server\\instance\"`` (on-premise) or\n   ``\"server.database.windows.net\"`` (Windows Azure SQL Database)\n   format.\n\n-  PORT\n\n   String. Server instance port.\n\n-  USER\n\n   String. Database user name in ``\"user\"`` (on-premise) or\n   ``\"user@server\"`` (Windows Azure SQL Database) format. If not given\n   then MS Integrated Security will be used.\n\n-  PASSWORD\n\n   String. Database user password.\n\nOPTIONS\n~~~~~~~\n\nDictionary. Current available keys are:\n\n-  autocommit\n\n   Boolean. Indicates if pyodbc should direct the the ODBC driver to\n   activate the autocommit feature. Default value is ``False``.\n\n-  MARS_Connection\n\n   Boolean. Only relevant when using MS *SQL Server Native Client*\n   driver. Default value is ``False``.\n\n-  driver\n\n   String. ODBC Driver to use (``\"SQL Server Native Client 11.0\"`` etc).\n   See http://msdn.microsoft.com/en-us/library/ms130892.aspx. Default is\n   ``\"SQL Server\"`` on Windows and ``\"FreeTDS\"`` on other platforms.\n\n-  dsn\n\n   String. A named DSN can be used instead of ``HOST``.\n\n-  host_is_server\n\n   Boolean. Only relevant if using the FreeTDS ODBC driver under\n   Unix/Linux.\n\n   By default, when using the FreeTDS ODBC driver the value specified in\n   the ``HOST`` setting is used in a ``SERVERNAME`` ODBC connection\n   string component instead of being used in a ``SERVER`` component;\n   this means that this value should be the name of a *dataserver*\n   definition present in the ``freetds.conf`` FreeTDS configuration file\n   instead of a hostname or an IP address.\n\n   But if this option is present and it's value is ``True``, this\n   special behavior is turned off.\n\n   See http://freetds.org/userguide/dsnless.htm for more information.\n\n-  extra_params\n\n   String. Additional parameters for the ODBC connection. The format is\n   ``\"param=value;param=value\"``.\n\n-  collation\n\n   String. Name of the collation to use when performing text field\n   lookups against the database. Default is ``None``; this means no\n   collation specifier is added to your lookup SQL (the default\n   collation of your database will be used). For Chinese language you\n   can set it to ``\"Chinese_PRC_CI_AS\"``.\n\n-  use_legacy_datetime\n\n   Boolean. DateField, TimeField and DateTimeField of models are mapped\n   to SQL Server's legacy ``datetime`` type if the value is ``True``\n   (it's the same behavior as the old django-pyodbc). Otherwise, they\n   are mapped to new dedicated data types (``date``, ``time``,\n   ``datetime2``). Default value is ``False``.\n\nExample\n~~~~~~~\n\nHere is an example of ``'default'`` database settings:\n\n::\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'sql_server.pyodbc',\n            'NAME': 'mydb',\n            'USER': 'user@myserver',             \n            'PASSWORD': 'password',\n            'HOST': 'myserver.database.windows.net',\n            'PORT': '',\n\n            'OPTIONS': {\n                'driver': 'SQL Server Native Client 11.0',\n                'MARS_Connection': True,\n            },\n        },\n    }\n\nLicense\n=======\n\nNew BSD LICENSE\n\nCredits\n=======\n\n-  `Ramiro Morales <https://people.djangoproject.com/ramiro/>`__\n-  `Filip Wasilewski <http://code.djangoproject.com/ticket/5246>`__\n-  `Wei guangjing <https://people.djangoproject.com/vcc/>`__\n-  `mamcx <http://code.djangoproject.com/ticket/5062>`__\n-  `Alex Vidal <http://github.com/avidal/>`__\n-  `Michiya Takahashi <http://github.com/michiya/>`__",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/michiya/django-pyodbc-azure",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-pyodbc-azure",
    "package_url": "https://pypi.org/project/django-pyodbc-azure/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-pyodbc-azure/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/michiya/django-pyodbc-azure"
    },
    "release_url": "https://pypi.org/project/django-pyodbc-azure/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django backends for MS SQL Server and Windows Azure SQL Database using pyodbc",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4190536,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7b4b4235431d42c294dd690ee4fa49f5a9ed155521df26bf03033f2df6d9f3d",
        "md5": "a37aae4f6818b154155c2c9947fab4f8",
        "sha256": "8f0f89644661753b6487d9c4ad8a780ba422d010e0d5e8c649d4377bb6d3fff3"
      },
      "downloads": -1,
      "filename": "django-pyodbc-azure-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a37aae4f6818b154155c2c9947fab4f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25224,
      "upload_time": "2013-04-14T02:44:48",
      "upload_time_iso_8601": "2013-04-14T02:44:48.638233Z",
      "url": "https://files.pythonhosted.org/packages/d7/b4/b4235431d42c294dd690ee4fa49f5a9ed155521df26bf03033f2df6d9f3d/django-pyodbc-azure-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}