{
  "info": {
    "author": "Chris Chang",
    "author_email": "c@crccheck.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Django Object Actions\n=====================\n\n.. image:: https://travis-ci.org/crccheck/django-object-actions.png\n   :target: https://travis-ci.org/crccheck/django-object-actions\n\n.. image:: https://coveralls.io/repos/crccheck/django-object-actions/badge.png\n    :target: https://coveralls.io/r/crccheck/django-object-actions\n\nIf you've ever tried making your own admin object tools and you were\nlike me, you immediately gave up. Why can't they be as easy as making\nDjango Admin Actions? Well now they can be.\n\n\nQuick-Start Guide\n-----------------\n\nInstall Django Object Actions::\n\n    pip install django-object-actions\n\nAdd ``django_object_actions`` to your ``INSTALLED_APPS`` so Django can find our\ntemplates.\n\nIn your admin.py::\n\n    from django_object_actions import DjangoObjectActions\n\n\n    class ArticleAdmin(DjangoObjectActions, admin.ModelAdmin):\n        def publish_this(self, request, obj):\n            publish_obj(obj)\n        publish_this.label = \"Publish\"  # optional\n        publish_this.short_description = \"Submit this article\"  # optional\n\n        change_actions = ('publish_this', )\n\n\nUsage\n-----\n\nDefining new tool actions are just like defining regular `admin actions\n<https://docs.djangoproject.com/en/dev/ref/contrib/admin/actions/>`_. The major\ndifference is the action functions for you write for the change view will take\nan object instance instead of a queryset (see *Re-using Admin Actions* below).\n\nTool actions are exposed by putting them in a ``change_actions`` attribute in\nyour model admin. You can also add tool actions to the changelist views too.\nYou'll get a queryset like a regular admin action::\n\n    from django_object_actions import DjangoObjectActions\n\n    class MyModelAdmin(DjangoObjectActions, admin.ModelAdmin):\n        def toolfunc(self, request, obj):\n            pass\n        toolfunc.label = \"This will be the label of the button\"  # optional\n        toolfunc.short_description = \"This will be the tooltip of the button\"  # optional\n\n        def make_published(modeladmin, request, queryset):\n            queryset.update(status='p')\n\n        change_actions = ('toolfunc', )\n        changelist_actions = ('make_published', )\n\nJust like admin actions, you can send a message with ``self.message_user``.\nNormally, you would do something to the object and go back to the same\nplace, but if you return a HttpResponse, it will follow it (hey, just\nlike admin actions!).\n\nIf your admin modifies ``get_urls``, ``change_view``, or ``changelist_view``,\nyou'll need to take extra care.\n\nRe-using Admin Actions\n``````````````````````\n\nIf you would like a preexisting admin action to also be an change action, add\nthe ``takes_instance_or_queryset`` decorator like::\n\n\n    from django_object_actions import (DjangoObjectActions,\n            takes_instance_or_queryset)\n\n    class RobotAdmin(DjangoObjectActions, admin.ModelAdmin):\n        # ... snip ...\n\n        @takes_instance_or_queryset\n        def tighten_lug_nuts(self, request, queryset):\n            queryset.update(lugnuts=F('lugnuts') - 1)\n\n        change_actions = ['tighten_lug_nuts']\n        actions = ['tighten_lug_nuts']\n\nCustomizing Admin Actions\n`````````````````````````\n\nTo give the action some a helpful title tooltip, add a ``short_description``\nattribute, similar to how admin actions work::\n\n    def increment_vote(self, request, obj):\n        obj.votes = obj.votes + 1\n        obj.save()\n    increment_vote.short_description = \"Increment the vote count by one\"\n\nBy default, Django Object Actions will guess what to label the button based on\nthe name of the function. You can override this with a ``label`` attribute::\n\n    def increment_vote(self, request, obj):\n        obj.votes = obj.votes + 1\n        obj.save()\n    increment_vote.label = \"Vote++\"\n\nIf you need even more control, you can add arbitrary attributes to the buttons\nby adding a Django widget style `attrs` attribute::\n\n    def increment_vote(self, request, obj):\n        obj.votes = obj.votes + 1\n        obj.save()\n    increment_vote.attrs = {\n        'class': 'addlink',\n    }\n\nProgrammatically Disabling Actions\n``````````````````````````````````\n\nYou can programmatically disable registered actions by defining your own custom\n``get_change_actions()`` method. In this example, certain actions only apply to\ncertain object states (i.e. You should not be able to close an company account\nif the account is already closed)::\n\n    def get_change_actions(self, request, object_id, form_url):\n        actions = super(PollAdmin, self).get_change_actions(request, object_id, form_url)\n        actions = list(actions)\n        if not request.user.is_superuser:\n            return []\n\n        obj = self.model.objects.get(pk=object_id)\n        if obj.question.endswith('?'):\n            actions.remove('question_mark')\n\n        return actions\n\nThe same is true for changelist actions with ``get_changelist_actions``.\n\n\nAlternate Installation\n``````````````````````\n\nYou don't have to add this to ``INSTALLED_APPS``, all you need to to do is copy\nthe template ``django_object_actions/change_form.html`` some place Django's\ntemplate loader `will find it\n<https://docs.djangoproject.com/en/dev/ref/settings/#template-dirs>`_.\n\nIf you don't intend to use the template customizations at all, don't add\n``django_object_actions`` to your ``INSTALLED_APPS`` at all and use\n``BaseDjangoObjectActions`` instead of ``DjangoObjectActions``.\n\n\nMore Examples\n-------------\n\nMaking an action that links off-site::\n\n    def external_link(self, request, obj):\n        from django.http import HttpResponseRedirect\n        url = f'https://example.com/{obj.id}'\n        return HttpResponseRedirect(url)\n\n\nLimitations\n-----------\n\n1. ``django-object-actions`` expects functions to be methods of the model admin.\n   While Django gives you a lot more options for their admin actions.\n\n2. If you provide your own custom ``change_form.html``, you'll also need to\n   manually copy in the relevant bits of `our change form\n   <https://github.com/crccheck/django-object-actions/blob/master/django_obj\n   ect_actions/templates/django_object_actions/change_form.html>`_. You can also\n   use ``from django_object_actions import BaseDjangoObjectActions`` instead.\n\n3. Security. This has been written with the assumption that everyone in the\n   Django admin belongs there. Permissions should be enforced in your own\n   actions irregardless of what this provides. Better default security is\n   planned for the future.\n\n\nDemo Admin & Docker images\n--------------------------\n\nYou can try the demo admin against several versions of Django with these Docker\nimages: https://hub.docker.com/r/crccheck/django-object-actions/\n\nThis runs the example Django project in ``./example_project`` based on the\n\"polls\" tutorial. ``admin.py`` demos what you can do with this app.\n\n\nDevelopment\n-----------\n\nGetting started *(with virtualenvwrapper)*::\n\n    # get a copy of the code\n    git clone git@github.com:crccheck/django-object-actions.git\n    cd django-object-actions\n    # set up your virtualenv (with virtualenvwrapper)\n    mkvirtualenv django-object-actions\n    # Install requirements\n    make install\n    # Hack your path so that we can reference packages starting from the root\n    add2virtualenv .\n    make test  # run test suite\n    make quickstart  # runs 'make resetdb' and some extra steps\n\nThis will install whatever the latest stable version of Django is. You can also\ninstall a specific version of Django and ``pip install -r requirements.txt``.\n\nVarious helpers are available as make commands. Type ``make help`` and view the\n``Makefile`` to see what other things you can do.\n\n\nSimilar Packages\n----------------\n\nIf you want an actions menu for each row of your changelist, check out `Django Admin Row Actions\n<https://github.com/DjangoAdminHackers/django-admin-row-actions>`_.\n\nDjango Object Actions is very similar to\n`django-object-tools <https://github.com/praekelt/django-object-tools>`_,\nbut does not require messing with your urls.py, does not do anything\nspecial with permissions, and uses the same patterns as making `admin\nactions <https://docs.djangoproject.com/en/dev/ref/contrib/admin/actions/#actions-as-modeladmin-methods>`_\nin Django.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/crccheck/django-object-actions",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-object-actions",
    "package_url": "https://pypi.org/project/django-object-actions/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-object-actions/",
    "project_urls": {
      "Homepage": "https://github.com/crccheck/django-object-actions"
    },
    "release_url": "https://pypi.org/project/django-object-actions/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django app for adding object tools for models in the admin",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15766658,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ffd71b59a1ec31f229c154a17e907564c945d604e955c48ea7a5888499622ba",
        "md5": "3e23ec8a290eb23116f099ce42852947",
        "sha256": "ac764e1fea91150160a9690c1cb5ae88d320da89cd06c65ec24c92247fb0762c"
      },
      "downloads": -1,
      "filename": "django_object_actions-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e23ec8a290eb23116f099ce42852947",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "requires_python": null,
      "size": 13125,
      "upload_time": "2018-03-09T06:52:45",
      "upload_time_iso_8601": "2018-03-09T06:52:45.736191Z",
      "url": "https://files.pythonhosted.org/packages/1f/fd/71b59a1ec31f229c154a17e907564c945d604e955c48ea7a5888499622ba/django_object_actions-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ba6fca5cac3f23902488eb557ceb89005788bbf7e2bee2327bb40d943f84d9d",
        "md5": "06fc00697d42e67832e0dddcfb784dde",
        "sha256": "54151c8760cc3dc8627fdd0e66e5b1ae5391625756d7b301b939155a74f231a6"
      },
      "downloads": -1,
      "filename": "django-object-actions-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "06fc00697d42e67832e0dddcfb784dde",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12014,
      "upload_time": "2018-03-09T06:52:43",
      "upload_time_iso_8601": "2018-03-09T06:52:43.704403Z",
      "url": "https://files.pythonhosted.org/packages/6b/a6/fca5cac3f23902488eb557ceb89005788bbf7e2bee2327bb40d943f84d9d/django-object-actions-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}