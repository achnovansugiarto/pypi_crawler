{
  "info": {
    "author": "Harry White",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "django-jsonforms\n================\n\n.. image:: https://travis-ci.org/Aristotle-Metadata-Enterprises/django-jsonforms.svg?branch=master\n    :target: https://travis-ci.org/Aristotle-Metadata-Enterprises/django-jsonforms\n\ndjango-jsonforms provides the JSONSchemaField, a Django form field that renders a dynamic form created from a json schema. The form is created using json-editor (https://github.com/jdorn/json-editor). The field also validates submitted data against the json schema and can be rendered as a standard form field.\n\nInstallation\n------------\n\nInstall with pip\n``pip install django-jsonforms``\n\nAdd ``django_jsonforms`` to your INSTALLED_APPS\n\nMake sure you have APP_DIRS set to True in your TEMPLATES setting\nMore about the templates setting here: https://docs.djangoproject.com/en/2.0/ref/settings/#templates\n\nRequirements\n------------\n\nThe python requirements jsonschema and django will be installed when installing the package through pip\nAdditionally jQuery is required on the page that will be rendering the form.\n\nInstructions for adding jQuery here: https://www.w3schools.com/jquery/jquery_get_started.asp\n\nUsage\n-----\n\nThe field can be used like any other Django form field, it has the schema and options attributes which can be either python dictionaries or paths to staticfiles as as shown below\n\n+ The schema parameter is the json schema the field will use\n+ The options parameter is passed through to the json-editor object, these options are described here: https://github.com/jdorn/json-editor#options (the schema option is not used)\n+ An optional ajax parameter determines whether any files are loaded via ajax on the frontend or loaded in the backend and put into html parameters (defaults to true)\n\nExample::\n\n    from django.forms import ModelForm, Form\n    from django_jsonforms.forms import JSONSchemaField\n\n    class RegistrySettingsForm(Form):\n\n        json = JSONSchemaField(\n            schema = 'schema/schema.json',\n            options = 'schema/options.json'\n        )\n\nIn this example the schema file would be located in 'static/schema/schema.json'. You will need to run collectstatic after creating the file\n\nExample showing all options::\n\n    class RegistrySettingsForm(Form):\n\n        json = JSONSchemaField(\n            schema = 'schema/schema.json',\n            options = {\"theme\": \"bootstrap3\"},\n            ajax = false\n        )\n\nSince it is common to have only one field in this type of form. A form with a single JSONSchemaField named json is also available to use\n\nForm Example::\n\n    from django_jsonforms.forms import JSONSchemaForm\n\n    form = JSONSchemaForm(schema=... , options=... , ajax=...)\n\nNote:\n\nWhen rendering the form don't forget to render the forms media with the template tag {{ form.media }}. This is required for the field to function correctly\n\nThe data returned when the field is submitted is in the form of a python dictionary. This may need to be converted before being stored depending on the model field being used\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Aristotle-Metadata-Enterprises/django-jsonforms",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-jsonforms",
    "package_url": "https://pypi.org/project/django-jsonforms/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-jsonforms/",
    "project_urls": {
      "Homepage": "https://github.com/Aristotle-Metadata-Enterprises/django-jsonforms"
    },
    "release_url": "https://pypi.org/project/django-jsonforms/1.0.3/",
    "requires_dist": [
      "jsonschema",
      "django"
    ],
    "requires_python": "",
    "summary": "JSON Schema forms for Django",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10144883,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f905dac0ea3d3a0c94169a8db355c997d2e90bb4fadeb7f58721922d56ba5d32",
        "md5": "e657b31e05b24f15ad405484fddc9026",
        "sha256": "477f00a0ca3f2e1c64dfcf7cd1c139eac77b45ff0de8d26d5cd734fc9441396e"
      },
      "downloads": -1,
      "filename": "django_jsonforms-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e657b31e05b24f15ad405484fddc9026",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10425,
      "upload_time": "2018-03-01T05:48:13",
      "upload_time_iso_8601": "2018-03-01T05:48:13.239781Z",
      "url": "https://files.pythonhosted.org/packages/f9/05/dac0ea3d3a0c94169a8db355c997d2e90bb4fadeb7f58721922d56ba5d32/django_jsonforms-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7e69e938aae7c433d3370554b7390e67262a42f82ded15aea05bbf609ed364d",
        "md5": "996e03e6a370571302869bab76193eaf",
        "sha256": "d01ee9716121f19b48a5d0d74d94f08eea275a337a38738890277199c3a991ad"
      },
      "downloads": -1,
      "filename": "django-jsonforms-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "996e03e6a370571302869bab76193eaf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 85429,
      "upload_time": "2018-03-01T05:48:16",
      "upload_time_iso_8601": "2018-03-01T05:48:16.269658Z",
      "url": "https://files.pythonhosted.org/packages/b7/e6/9e938aae7c433d3370554b7390e67262a42f82ded15aea05bbf609ed364d/django-jsonforms-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}