{
  "info": {
    "author": "Dave Hall",
    "author_email": "dave@etianen.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "django-require\n==============\n\n**django-require** is a Django staticfiles post-processor for optimizing\nwith `RequireJS <http://requirejs.org/>`_.\n\nFeatures\n--------\n\n-  Optimize your static assets using the excellent r.js optimizer.\n-  Compile standalone modules using the\n   `almond.js <https://github.com/requirejs/almond>`_ shim.\n-  Compatible with any Django staticfiles storage backend.\n\nInstallation\n------------\n\n1. Checkout the latest django-require release and copy or symlink the\n   ``require`` directory into your ``PYTHONPATH``.  If using pip, run\n   ``pip install django-require``.\n2. Add ``'require'`` to your ``INSTALLED_APPS`` setting.\n3. Set your ``STATICFILES_STORAGE`` setting to\n   ``'require.storage.OptimizedStaticFilesStorage'``,\n   ``'require.storage.OptimizedCachedStaticFilesStorage'`` or\n   ``'require.storage.OptimizedManifestStaticFilesStorage'``.\n\nAvailable settings\n------------------\n\nAvailable settings, and their default values, are shown below. You\nshould configure this to match the layout of your project's static\nfiles. Please consult the `RequireJS <http://requirejs.org/>`_\ndocumentation for more information about how to build javascript using\nRequireJS.\n\n.. code:: python\n\n    # The baseUrl to pass to the r.js optimizer, relative to STATIC_ROOT.\n    REQUIRE_BASE_URL = \"js\"\n\n    # The name of a build profile to use for your project, relative to REQUIRE_BASE_URL.\n    # A sensible value would be 'app.build.js'. Leave blank to use the built-in default build profile.\n    # Set to False to disable running the default profile (e.g. if only using it to build Standalone\n    # Modules)\n    REQUIRE_BUILD_PROFILE = None\n\n    # The name of the require.js script used by your project, relative to REQUIRE_BASE_URL.\n    REQUIRE_JS = \"require.js\"\n\n    # A dictionary of standalone modules to build with almond.js.\n    # See the section on Standalone Modules, below.\n    REQUIRE_STANDALONE_MODULES = {}\n\n    # Whether to run django-require in debug mode.\n    REQUIRE_DEBUG = settings.DEBUG\n\n    # A tuple of files to exclude from the compilation result of r.js.\n    REQUIRE_EXCLUDE = (\"build.txt\",)\n\n    # The execution environment in which to run r.js: auto, node or rhino.\n    # auto will auto-detect the environment and make use of node if available and rhino if not.\n    # It can also be a path to a custom class that subclasses\n    # require.environments.Environment and defines some \"args\" function that\n    # returns a list with the command arguments to execute.\n    REQUIRE_ENVIRONMENT = \"auto\"\n\nGenerating require.js\n---------------------\n\nAs a shortcut to downloading a copy of require.js from the internet, you\ncan simply run the ``require_init`` management to copy a version of\nrequire.js into your ``STATICFILES_DIRS``, at the location specified by\nyour ``REQUIRE_BASE_URL`` and ``REQUIRE_JS`` settings.\n\n.. code:: bash\n\n    $ ./manage.py require_init\n\nGenerating build profiles\n-------------------------\n\nIn almost all cases, you'll want to create a custom build profile for\nyour project. To help you get started, django-require can generate a\ndefault build profile into your ``STATICFILES_DIRS``. Just set your\n``REQUIRE_BUILD_PROFILE`` setting to a build profile name, and run\n``require_init``. A good name for a build profile would be\n``'app.build.js'``.\n\nAny standalone modules that your specify with a build profile will also\nhave a default build profile generated when you run this command.\n\nRunning javascript modules in templates\n---------------------------------------\n\nYou can run javascript modules in templates by using the\n``{% require_module %}`` template tag.\n\n.. code:: html\n\n    <html>\n        {% load require %}\n        <head>\n            {% require_module 'main' %}\n        </head>\n        <body></body>\n    </html>\n\nThis template fragment would then render to something like:\n\n.. code:: html\n\n    <html>\n        <head>\n            <script src=\"/static/js/require.js\" data-main=\"/static/js/main.js\"></script>\n        </head>\n        <body></body>\n    </html>\n\nIf the ``'main'`` module was specified as a standalone module in your\n``REQUIRE_STANDALONE_MODULES`` setting, and ``REQUIRE_DEBUG`` is\n``False``, then the template fragment would instead render as:\n\nThis template fragment would then render to something like:\n\n.. code:: html\n\n    <html>\n        <head>\n            <script src=\"/static/js/main-built.js\"></script>\n        </head>\n        <body></body>\n    </html>\n\nBuilding standalone modules\n---------------------------\n\nAs a further optimization to your code, you can build your modules to\nrun independently of require.js, which can often speed up page load\ntimes. Standalone modules are built using the almond.js shim, so consult\nthe `almond.js <https://github.com/requirejs/almond>`_ documentation to\nmake sure that it's safe to build your module in standalone mode.\n\nTo specify standalone modules, simply add them to your\n``REQUIRE_STANDALONE_MODULES`` setting, as below:\n\n.. code:: python\n\n    REQUIRE_STANDALONE_MODULES = {\n        \"main\": {\n            # Where to output the built module, relative to REQUIRE_BASE_URL.\n            \"out\": \"main-built.js\",\n\n            # Optional: A build profile used to build this standalone module.\n            \"build_profile\": \"main.build.js\",\n        }\n    }\n\nRunning the r.js optimizer\n--------------------------\n\nThe r.js optimizer is run automatically whenever you call the\n``collectstatic`` management command. The optimizer is run as a\npost-processing step on your static files.\n\ndjango-require provides three storage classes that are ready to use with\nthe r.js optimizer:\n\n-  ``require.storage.OptimizedStaticFilesStorage`` - A filesystem-based\n   storage that runs the r.js optimizer.\n-  ``require.storage.OptimizedCachedStaticFilesStorage`` - As above, but\n   fingerprints all files with an MD5 hash of their contents for HTTP\n   cache-busting.\n-  ``require.storage.OptimizedManifestStaticFilesStorage`` - As above, but\n   fingerprints all files with an MD5 hash of their contents for HTTP\n   cache-busting and stores the fingerprints in a JSON file on disk instead\n   of using a cache. Please note that the\n   ``OptimizedManifestStaticFilesStorage`` is only available in Django 1.7 and\n   above.\n\nCreating your own optimizing storage classes\n--------------------------------------------\n\nYou can add r.js optimization to any Django staticfiles storage class by\nusing the ``require.storage.OptimizedFilesMixin``. For example, to make\nan optimizing storage that uploads to Amazon S3 using ``S3BotoStorage``\nfrom\n`django-storages <http://django-storages.readthedocs.org/en/latest/>`_:\n\n.. code:: python\n\n    from storages.backends.s3boto import S3BotoStorage\n    from require.storage import OptimizedFilesMixin\n\n    # S3 storage with r.js optimization.\n    class OptimizedS3BotoStorage(OptimizedFilesMixin, S3BotoStorage):\n        pass\n\n    # S3 storage with r.js optimization and MD5 fingerprinting.\n    from django.contrib.staticfiles.storage import CachedFilesMixin\n    class OptimizedCachedS3BotoStorage(OptimizedFilesMixin, CachedFilesMixin, S3BotoStorage):\n        pass\n\nFor ready-made storage classes that combine django-require with Amazon S3, check out\n`django-require-s3 <https://github.com/etianen/django-require-s3>`_.\n\nOther projects extending django-require\n---------------------------------------\n\n- `django-require-license <https://github.com/collab-project/django-require-license>`_ - prepends a license header to compressed file(s) generated with django-require\n\nTests\n-----\n\nYou can run the test suite from the root of the source checkout::\n\n    test_project/manage.py test require\n\nTest coverage reports can be generated from the same directory with::\n\n    coverage run --source='.' test_project/manage.py test require\n    coverage html\n\nOpen `htmlcov/index.html` in a browser to see the HTML coverage report.\n\nSupport and announcements\n-------------------------\n\nDownloads and bug tracking can be found at the `main project\nwebsite <http://github.com/etianen/django-require>`_.\n\nYou can keep up to date with the latest announcements by joining the\n`django-require discussion\ngroup <http://groups.google.com/group/django-require>`_.\n\nMore information\n----------------\n\nThe django-require project was developed by Dave Hall. You can get the\ncode from the `django-require project\nsite <http://github.com/etianen/django-require>`_.\n\nDave Hall is a freelance web developer, based in Cambridge, UK. You can\nusually find him on the Internet in a number of different places:\n\n-  `Website <http://www.etianen.com/>`_\n-  `Twitter <http://twitter.com/etianen>`_\n-  `Google Profile <http://www.google.com/profiles/david.etianen>`_\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/etianen/django-require",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-require",
    "package_url": "https://pypi.org/project/django-require/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-require/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/etianen/django-require"
    },
    "release_url": "https://pypi.org/project/django-require/1.0.11/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Django staticfiles post-processor for optimizing with RequireJS.",
    "version": "1.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2295189,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f02e79046f2c90c50506e934eec52cb1503f1e07a8d4c4d621ea257ba83ba5de",
        "md5": "fae5702fab00143a1ed7227064c867ec",
        "sha256": "01c4c48ee60753ca4485c1de8096d2af63d53d0198f53ca8564edb5ba33b166e"
      },
      "downloads": -1,
      "filename": "django-require-1.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "fae5702fab00143a1ed7227064c867ec",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7183759,
      "upload_time": "2016-08-22T10:22:31",
      "upload_time_iso_8601": "2016-08-22T10:22:31.677812Z",
      "url": "https://files.pythonhosted.org/packages/f0/2e/79046f2c90c50506e934eec52cb1503f1e07a8d4c4d621ea257ba83ba5de/django-require-1.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}