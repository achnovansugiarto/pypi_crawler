{
  "info": {
    "author": "Srijan Anand",
    "author_email": "srijan.pydev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "=========\nMango-JWT\n=========\n\nMango-JWT is a minimal JWT User Authentication tool for Django Rest Framework and MongoDB. Recommended for developers using django-rest-framework and pymongo. Not supported in versions below Django 2.0. ::\n\n    pip install mango-jwt\n\n\n\nQuick start\n-----------\n\n1. Add \"mongo_auth\" to your INSTALLED_APPS setting below \"rest_framework\"::\n\n    INSTALLED_APPS = [\n        ...\n        'rest_framework',\n        'mongo_auth',\n    ]\n\n\n2. Include the mongo_auth URLconf in your project urls.py like this::\n\n    path('mongo_auth/', include('mongo_auth.urls')),\n\n3. Add DB config in settings.py :- ::\n\n    # Minimal settings (all mandatory)\n    MANGO_JWT_SETTINGS = {\n        \"db_host\": \"some_db_host\",\n        \"db_port\": \"some_db_port\",\n        \"db_name\": \"for_example_auth_db\",\n        \"db_user\": \"username\",\n        \"db_pass\": \"password\"\n    }\n\n    # Or use Advanced Settings (including optional settings)\n    MANGO_JWT_SETTINGS = {\n        \"db_host\": \"some_db_host\",\n        \"db_port\": \"some_db_port\",\n        \"db_name\": \"for_example_auth_db\",\n        \"db_user\": \"username\",\n        \"db_pass\": \"password\",\n        \"auth_collection\": \"name_your_auth_collection\", # default is \"user_profile\"\n        \"fields\": (\"email\", \"password\"), # default\n        \"jwt_secret\": \"secret\", # default\n        \"jwt_life\": 7, # default (in days)\n        \"secondary_username_field\": \"mobile\" # default is None\n    }\n\n4. If **secondary_username_field** is provided, users will be able to login with this field as well as \"email\". This is best for scenarios where you want users to login with either of their unique fields.\n\n   For example, you may want users to login with \"email\" or \"mobile\".\n\n5. You may or may not include \"secondary_username_field\" in \"fields\".\n\n    **Note: \"secondary_username_field\" cannot be \"email\" as its \"primary_username\" and \"secondary_username_field\" will be set to None instead.**\n\n6. Make a POST request on http://127.0.0.1:8000/mongo_auth/signup/ with body as :- ::\n\n    {\n        \"email\": \"some_email@email.com\",\n        \"password\": \"some_password\",\n        other_fields\n        ...\n    }\n\n7. Now login with these credentials at http://127.0.0.1:8000/mongo_auth/login/ :- ::\n\n    {\n        \"username\": \"some_email@email.com or secondary_username_field_value\",\n        \"password\": \"some_password\"\n    }\n\n8. This will return a JWT. Pass this JWT in your request in **\"Authorization\"** header.\n\n---------------------------\nAuthenticatedOnly\n---------------------------\n\nThe **AuthenticatedOnly** permission class will only allow authenticated users to access your endpoint. ::\n\n    from rest_framework.views import APIView\n    from mongo_auth.permissions import AuthenticatedOnly\n    from rest_framework.response import Response\n    from rest_framework import status\n\n    class GetTest(APIView):\n\n        permission_classes = [AuthenticatedOnly]\n\n        def get(self, request, format=None):\n            try:\n                print(request.user)  # This is where magic happens\n                return Response(status=status.HTTP_200_OK,\n                                data={\"data\": {\"msg\": \"User Authenticated\"}})\n            except:\n                return Response(status=status.HTTP_404_NOT_FOUND)\n\n\nOr, if you're using the **@api_view** decorator with function based views. ::\n\n    from mongo_auth.permissions import AuthenticatedOnly\n    from rest_framework.decorators import permission_classes\n    from rest_framework.decorators import api_view\n    from rest_framework.response import Response\n    from rest_framework import status\n\n    @api_view([\"GET\"])\n    @permission_classes([AuthenticatedOnly])\n    def get_test(request):\n        try:\n            print(request.user)\n            return Response(status=status.HTTP_200_OK,\n                            data={\"data\": {\"msg\": \"User Authenticated\"}})\n        except:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n\n\nDon't forget to pass **\"Authorization\"** Header in your requests while using your views with **\"AuthenticatedOnly\"** Permission Class.\n\n----------------------\nmongo_auth.db.database\n----------------------\n\nAs the Mongo Connection Object has already been initialised in the package, you can use it directly::\n\n    from mongo_auth.db import database\n\n    print(list(database[\"collection_name\"].find({}, {\"_id\": 0}).limit(10)))\n\n\nMore Info\n---------\n\n1. Passlib is used for password encryption with default scheme as \"django_pbkdf2_sha256\".\n\n2. Only for Django 2.0 and above.\n\n3. Dependent on \"django-rest-framework\" and \"pymongo\".\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/srijannnd/mango-jwt",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mango-jwt",
    "package_url": "https://pypi.org/project/mango-jwt/",
    "platform": "",
    "project_url": "https://pypi.org/project/mango-jwt/",
    "project_urls": {
      "Homepage": "https://github.com/srijannnd/mango-jwt"
    },
    "release_url": "https://pypi.org/project/mango-jwt/1.3.0/",
    "requires_dist": [
      "Django (>=2.0)",
      "djangorestframework",
      "passlib",
      "PyJWT",
      "pymongo",
      "pytz"
    ],
    "requires_python": "",
    "summary": "JWT Authentication for Django Rest Framework and MongoDB",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6519399,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7eccacb4c61158fbbdc64cddd3485a3612514bf8e546b120cb7f04f80091105",
        "md5": "77f408e42377b4343b2ebcf05f1d5fff",
        "sha256": "4170031f12654ba0139620d6a0c9b675f1a63670f09612b56ccbffd735081fca"
      },
      "downloads": -1,
      "filename": "mango_jwt-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "77f408e42377b4343b2ebcf05f1d5fff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7581,
      "upload_time": "2018-10-31T11:52:27",
      "upload_time_iso_8601": "2018-10-31T11:52:27.224679Z",
      "url": "https://files.pythonhosted.org/packages/f7/ec/cacb4c61158fbbdc64cddd3485a3612514bf8e546b120cb7f04f80091105/mango_jwt-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b21a19bdf630a4272df021832a5131068d726c60b5560fef9f76610ca671a01a",
        "md5": "0822c5667a8c413e53ec89b0325800a9",
        "sha256": "187769bed7988ce2087f0cbf8eabc74471ade2960d5fc8142212e92d2d7cf923"
      },
      "downloads": -1,
      "filename": "mango-jwt-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0822c5667a8c413e53ec89b0325800a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5999,
      "upload_time": "2018-10-31T11:52:29",
      "upload_time_iso_8601": "2018-10-31T11:52:29.603451Z",
      "url": "https://files.pythonhosted.org/packages/b2/1a/19bdf630a4272df021832a5131068d726c60b5560fef9f76610ca671a01a/mango-jwt-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}