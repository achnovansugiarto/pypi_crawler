{
  "info": {
    "author": "Fabien MICHEL",
    "author_email": "fabien.michel@hespul.org",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: Other/Proprietary License",
      "License :: Public Domain",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Really simple permission backend for django\n\nClass based, No database\n\nInspired by [django-permission](https://github.com/lambdalisue/django-permission)\n\nTested with Django 3.2 - python 3.8 (For older django versions, use `django-simple_perms 0.2.8`\n\n# Introduction\n\nThe app autodiscover perms.py module in your project's apps.\n\nThis modules should register PermissionLogic based class.\n\nWhen calling django's has_perm method, it will run the corresponding method name in your PermissionLogic class.\n\nSee usage section below for comprehensive example.\n\n# Usage\n\n*settings.py*\n\n```python\nINSTALLED_APPS = (\n  # ...\n  'simple_perms',  # Add simple_perms app to your INSTALLED_APPS\n  # ...\n)\n\nAUTHENTICATION_BACKENDS = (\n    'simple_perms.PermissionBackend',  # Add permission backend before django's one\n    'django.contrib.auth.backends.ModelBackend',\n)\n```\n\n*project_app/perms.py*\n\n```python\nfrom simple_perms import register, PermissionLogic\n\n\nclass ProjectLogic(PermissionLogic):\n\n    def add_project(self, user, project, perm):\n        return True\n\n    def change_project(self, user, project, perm):\n        return user.is_admin() or project.owner == user\n\n    delete_project = change_project\n\n    def default_permission(self, user, project, perm):\n      # Optional, default to global default permission, which default to False\n      return user.is_admin()\n\n\nregister('project_app', ProjectLogic)\n```\n\n```python\nuser1.has_perm('project_app.add_project')  # True\nuser1.has_perm('project_app.change_project', user1_project)  # True\nuser1.has_perm('project_app.delete_project', user1_project)  # True\nuser2.has_perm('project_app.change_project', user1_project)  # False\nadmin.has_perm('project_app.change_project', user1_project)  # True\n```\n\n# Default permission\n\nIf a checked permission doesn't exists in registered PermissionLogic based classe, the backend will run the default_permission method of this class. If no default_permission defined, it default to the global default permission which default to False.\n\n**Change global default permission**\n\n*settings.py*\n\n```python\nSIMPLE_PERMS_GLOBAL_DEFAULT_PERMISSION = 'path.to.custom_global_default_permission'\n```\n\n*path/to.py*\n```python\ndef custom_global_default_permission(user, obj, perm):\n    return user.is_admin()\n```\n\nglobal_default_permission and default_permission have the same arguments as others permissions : `(user, obj, perm)`\n\n\n# Change autodiscovered module name\n\nsimple_perms autodiscover perms.py modules in every django's apps. You can change the module name to autodiscover using the SIMPLE_PERMS_MODULE_NAME setting :\n\n```python\nSIMPLE_PERMS_MODULE_NAME = 'permission'\n```\n\n# Run tests\n\n```bash\npython runtests.py\n```\n\n# Helper for your tests\n\n```python\n\nfrom django.test import TestCase\nfrom simple_perms.helpers import AssertPermissions\n\n\nclass TestContractPermission(AssertPermissions, TestCase):\n    def setUp(self):\n        self.admin = UserFactory(role=\"admin\")\n        self.contract = ContractFactory()\n\n    def test_permissions_for_admin(self):\n        permissions = [\n            { 'usr': 'admin', 'perm': 'contracts.add',    'args': (None,),           'result': True, },\n            { 'usr': 'admin', 'perm': 'contracts.view',   'args': (self.contract, ), 'result': True, },\n            { 'usr': 'admin', 'perm': 'contracts.change', 'args': (self.contract, ), 'result': True, },\n        ]\n        self.assertPerms(permissions)\n```\n\nWhich fails:\n\n``` text\n======================================================================\nFAIL: test_permissions_for_admin (contracts.tests.perms.TestContractPermission)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/app/django/contracts/tests/perms.py\", line 48, in test_permissions_of_admin\n    self.assertPerms(permissions)\n  File \"/app/django/django-simple_perms/simple_perms/helpers.py\", line 37, in assertPerms\n    raise e\n  File \"/app/django/django-simple_perms/simple_perms/helpers.py\", line 66, in _test_permission_\n    getattr(self, permission['usr']).has_perm(permission['perm'], *permission['args'])\nAssertionError: ('PERM ERROR admin contracts.add:  False is not true', 'PERM ERROR admin contracts.view:  False is not true', 'PERM ERROR admin contracts.change:  False is not true')\n\n----------------------------------------------------------------------\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/hespul/django-simple_perms",
    "keywords": "",
    "license": "WTFPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-simple-perms",
    "package_url": "https://pypi.org/project/django-simple-perms/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-simple-perms/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/hespul/django-simple_perms",
      "Repository": "https://bitbucket.org/hespul/django-simple_perms"
    },
    "release_url": "https://pypi.org/project/django-simple-perms/1.0.1/",
    "requires_dist": [
      "django (>=3.2,<4.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "A simple class based permission backend for django",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15180775,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "906a4674d3adad630f1d5a9ead536d0829504d19728fa9a6c6ccb7afdf0e64ef",
        "md5": "46d62e918d0140c6e949f3a1355c4bf3",
        "sha256": "01188c3aeafbd90a79edb323338f0b6cf0c2e1ac60402d8049915c74741dbce2"
      },
      "downloads": -1,
      "filename": "django_simple_perms-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "46d62e918d0140c6e949f3a1355c4bf3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 6152,
      "upload_time": "2022-01-28T15:36:45",
      "upload_time_iso_8601": "2022-01-28T15:36:45.542526Z",
      "url": "https://files.pythonhosted.org/packages/90/6a/4674d3adad630f1d5a9ead536d0829504d19728fa9a6c6ccb7afdf0e64ef/django_simple_perms-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5ad248b7fbc8baebf47a3889b624fd70926b8d2335bbeb53eb1f9ffece194ff",
        "md5": "c7a00cf53e40e760409389d87465cf2e",
        "sha256": "42d9b290ae25593bff7df5fdb62e4b607927578c36f0b06e634457983591719e"
      },
      "downloads": -1,
      "filename": "django-simple_perms-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c7a00cf53e40e760409389d87465cf2e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 5374,
      "upload_time": "2022-01-28T15:36:43",
      "upload_time_iso_8601": "2022-01-28T15:36:43.787016Z",
      "url": "https://files.pythonhosted.org/packages/c5/ad/248b7fbc8baebf47a3889b624fd70926b8d2335bbeb53eb1f9ffece194ff/django-simple_perms-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}