{
  "info": {
    "author": "Andrey Kislyuk",
    "author_email": "kislyuk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Domovoi: AWS Lambda event handler manager\n=========================================\n\n*Domovoi* is an extension to `AWS Chalice <https://github.com/awslabs/chalice>`_ to handle `AWS Lambda\n<https://aws.amazon.com/lambda/>`_ `event sources\n<http://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html#intro-core-components-event-sources>`_ other\nthan HTTP requests through API Gateway. Domovoi lets you easily configure and deploy a Lambda function to run on a\nschedule or in response to a variety of events like an `SNS <https://aws.amazon.com/sns/>`_ push notification, S3 event, or\ncustom `state machine <https://aws.amazon.com/step-functions/>`_ transition:\n\n.. code-block:: python\n\n    import json, boto3, domovoi\n\n    app = domovoi.Domovoi()\n\n    @app.scheduled_function(\"cron(0 18 ? * MON-FRI *)\")\n    def foo(event, context):\n        context.log(\"foo invoked at 06:00pm (UTC) every Mon-Fri\")\n        return dict(result=True)\n\n    @app.scheduled_function(\"rate(1 minute)\")\n    def bar(event, context):\n        context.log(\"bar invoked once a minute\")\n        boto3.resource(\"sns\").create_topic(Name=\"bartender\").publish(Message=json.dumps({\"beer\": 1}))\n        return dict(result=\"Work work work\")\n\n    @app.sns_topic_subscriber(\"bartender\")\n    def tend(event, context):\n        message = json.loads(event[\"Records\"][0][\"Sns\"][\"Message\"])\n        context.log(dict(beer=\"Quadrupel\", quantity=message[\"beer\"]))\n\n    @app.cloudwatch_event_handler(source=[\"aws.ecs\"])\n    def monitor_ecs_events(event, context):\n        message = json.loads(event[\"Records\"][0][\"Sns\"][\"Message\"])\n        context.log(\"Got an event from ECS: {}\".format(message))\n\n    @app.s3_event_handler(bucket=\"myS3bucket\", events=[\"s3:ObjectCreated:*\"], prefix=\"foo\", suffix=\".bar\")\n    def monitor_s3(event, context):\n        message = json.loads(event[\"Records\"][0][\"Sns\"][\"Message\"])\n        context.log(\"Got an event from S3: {}\".format(message))\n\n    # Set use_sns=False to subscribe your Lambda directly to S3 events without forwrading them through an SNS topic.\n    # That approach has fewer moving parts, but you can only subscribe one Lambda function to events in a given S3 bucket.\n    @app.s3_event_handler(bucket=\"myS3bucket\", events=[\"s3:ObjectCreated:*\"], prefix=\"foo\", suffix=\".bar\", use_sns=False)\n    def monitor_s3(event, context):\n        message = json.loads(event[\"Records\"][0][\"Sns\"][\"Message\"])\n        context.log(\"Got an event from S3: {}\".format(message))\n\n    # DynamoDB event format: https://docs.aws.amazon.com/lambda/latest/dg/eventsources.html#eventsources-ddb-update\n    @app.dynamodb_stream_handler(table_name=\"MyDynamoTable\", batch_size=200)\n    def handle_dynamodb_stream(event, context):\n        context.log(\"Got {} events from DynamoDB\".format(len(event[\"Records\"])))\n        context.log(\"First event: {}\".format(event[\"Records\"][0][\"dynamodb\"]))\n\n    # Use the following command to log a CloudWatch Logs message that will trigger this handler:\n    # python -c'import watchtower as w, logging as l; L=l.getLogger(); L.addHandler(w.CloudWatchLogHandler()); L.error(dict(x=8))'\n    # See http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html for the filter pattern syntax\n    @app.cloudwatch_logs_sub_filter_handler(log_group_name=\"watchtower\", filter_pattern=\"{$.x = 8}\")\n    def monitor_cloudwatch_logs(event, context):\n        print(\"Got a CWL subscription filter event:\", event)\n\n    # See http://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html\n    # See the \"AWS Step Functions state machines\" section below for a complete example of setting up a state machine.\n    @app.step_function_task(state_name=\"Worker\", state_machine_definition=state_machine)\n    def worker(event, context):\n        return {\"result\": event[\"input\"] + 1, \"my_state\": context.stepfunctions_task_name}\n\nInstallation\n------------\n::\n\n    pip install domovoi\n\nUsage\n-----\nFirst-time setup::\n\n    chalice new-project\n\nReplace the Chalice app entry point (in ``app.py``) with the Domovoi app entry point as above, then deploy the event handlers::\n\n    domovoi deploy\n\nTo stage files into the deployment package, use a ``domovoilib`` directory in your project where you would use\n``chalicelib`` in Chalice. For example, ``my_project/domovoilib/rds_cert.pem`` becomes ``/var/task/domovoilib/rds_cert.pem``\nwith your function executing in ``/var/task/app.py`` with ``/var/task`` as the working directory. See the\n`Chalice docs <http://chalice.readthedocs.io/>`_ for more information on how to set up Chalice configuration.\n\nSupported event types\n~~~~~~~~~~~~~~~~~~~~~\nSee `Supported Event Sources <http://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html>`_ for an\noverview of event sources that can be used to trigger Lambda functions. Domovoi supports the following event sources:\n\n* `SNS subscriptions <https://docs.aws.amazon.com/lambda/latest/dg/eventsources.html#eventsources-sns>`_\n* CloudWatch Events rule targets, including CloudWatch Scheduled Events (see\n  `CloudWatch Events Event Examples <http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html>`_ for a\n  list of event types supported by CloudWatch Events)\n* `S3 events <https://docs.aws.amazon.com/lambda/latest/dg/eventsources.html#eventsources-s3-put>`_\n* AWS Step Functions state machine tasks\n* `CloudWatch Logs filter subscriptions <https://docs.aws.amazon.com/lambda/latest/dg/eventsources.html#eventsources-cloudwatch-logs>`_\n* `DynamoDB stream events <https://docs.aws.amazon.com/lambda/latest/dg/eventsources.html#eventsources-ddb-update>`_\n\nPossible future event sources to support:\n\n* Kinesis stream events\n* SES (email) events\n\nAWS Step Functions state machines\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nDomovoi supports AWS Lambda integration with `AWS Step Functions\n<https://aws.amazon.com/documentation/step-functions>`_. Step Functions state machines can be started using the\n`StartExecution <http://docs.aws.amazon.com/step-functions/latest/apireference/API_StartExecution.html>`_ method or the\n`API Gateway Step Functions integration\n<http://docs.aws.amazon.com/step-functions/latest/dg/tutorial-api-gateway.html>`_.\n\nSee the `domovoi/examples <domovoi/examples>`_ directory for examples of Domovoi ``app.py`` apps using a state machine,\nincluding a loop that restarts the Lambda when it's about to hit its execution time limit, and a threadpool pattern that\ndivides work between multiple Lambdas.\n\nWhen creating a Step Functions State Machine driven Domovoi daemon Lambda, the State Machine assumes the same IAM role as\nthe Lambda itself. To allow the State Machine to invoke the Lambda, edit the IAM policy (under your app directory, in\n`.chalice/policy.json`) to include a statement allowing the \"lambda:InvokeFunction\" action on all resources, or on the\nARN of the Lambda itself.\n\nConfiguration: Dead Letter Queues\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nTo enable your Lambda function to forward failed invocation notifications to `dead letter queuees\n<http://docs.aws.amazon.com/lambda/latest/dg/dlq.html>`_, set the configuration key ``dead_letter_queue_target_arn`` in\nthe file ``.chalice/config.json`` to the target DLQ ARN. For example::\n\n  {\n    \"app_name\": \"my_app\",\n    ...\n    \"dead_letter_queue_target_arn\": \"arn:aws:sns:us-east-1:123456789012:my-dlq\"\n  }\n\nYou may need to update your Lambda IAM policy (``.chalice/policy.json``) to give your Lambda access to SNS or SQS.\n\nLinks\n-----\n* `Project home page (GitHub) <https://github.com/kislyuk/domovoi>`_\n* `Documentation (Read the Docs) <https://domovoi.readthedocs.org/en/latest/>`_\n* `Package distribution (PyPI) <https://pypi.python.org/pypi/domovoi>`_\n* `Change log <https://github.com/kislyuk/domovoi/blob/master/Changes.rst>`_\n\nBugs\n~~~~\nPlease report bugs, issues, feature requests, etc. on `GitHub <https://github.com/kislyuk/domovoi/issues>`_.\n\nLicense\n-------\nLicensed under the terms of the `Apache License, Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0>`_.\n\n.. image:: https://travis-ci.org/kislyuk/domovoi.png\n        :target: https://travis-ci.org/kislyuk/domovoi\n.. image:: https://codecov.io/github/kislyuk/domovoi/coverage.svg?branch=master\n        :target: https://codecov.io/github/kislyuk/domovoi?branch=master\n.. image:: https://img.shields.io/pypi/v/domovoi.svg\n        :target: https://pypi.python.org/pypi/domovoi\n.. image:: https://img.shields.io/pypi/l/domovoi.svg\n        :target: https://pypi.python.org/pypi/domovoi\n.. image:: https://readthedocs.org/projects/domovoi/badge/?version=latest\n        :target: https://domovoi.readthedocs.org/\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kislyuk/domovoi",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "domovoi",
    "package_url": "https://pypi.org/project/domovoi/",
    "platform": "MacOS X",
    "project_url": "https://pypi.org/project/domovoi/",
    "project_urls": {
      "Homepage": "https://github.com/kislyuk/domovoi"
    },
    "release_url": "https://pypi.org/project/domovoi/1.5.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "AWS Lambda event handler manager",
    "version": "1.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5733600,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e1c6987d1df84de77a04b7cf026c33a1e2662eb6a8ea11911b168565972c05d",
        "md5": "1a038073a1400160692aca75b78bde7d",
        "sha256": "c78731a4b11ef3549e71eb2f635a0a9dfcd7cb244c3a245605fe268fa509a27d"
      },
      "downloads": -1,
      "filename": "domovoi-1.5.2-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "1a038073a1400160692aca75b78bde7d",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 15164,
      "upload_time": "2018-02-05T16:40:39",
      "upload_time_iso_8601": "2018-02-05T16:40:39.035854Z",
      "url": "https://files.pythonhosted.org/packages/9e/1c/6987d1df84de77a04b7cf026c33a1e2662eb6a8ea11911b168565972c05d/domovoi-1.5.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "276ba50c256ef4d215e4b087e7a435c63c1a17e327a7b0e66a48d53be7563f04",
        "md5": "dd7fcb07a19d9998843eb048223e4553",
        "sha256": "1aa50f508fb591ae1d3db5d5b5d888bd5ab94df3b69afc422f296413cfa94735"
      },
      "downloads": -1,
      "filename": "domovoi-1.5.2.tar.gz",
      "has_sig": true,
      "md5_digest": "dd7fcb07a19d9998843eb048223e4553",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12559,
      "upload_time": "2018-02-05T16:40:36",
      "upload_time_iso_8601": "2018-02-05T16:40:36.816571Z",
      "url": "https://files.pythonhosted.org/packages/27/6b/a50c256ef4d215e4b087e7a435c63c1a17e327a7b0e66a48d53be7563f04/domovoi-1.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}