{
  "info": {
    "author": "Andrey Kislyuk",
    "author_email": "kislyuk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Domovoi: AWS Lambda event handler manager\n=========================================\n\n*Domovoi* is an extension to `AWS Labs Chalice <https://github.com/awslabs/chalice>`_ to handle `AWS Lambda\n<https://aws.amazon.com/lambda/>`_ `event sources\n<http://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html#intro-core-components-event-sources>`_ other\nthan HTTP requests through API Gateway. Domovoi lets you easily configure and deploy a Lambda function to run on a\nschedule or in response to a variety of events like an `SNS <https://aws.amazon.com/sns/>`_ push notification, S3 event, or\ncustom state machine transition:\n\n.. code-block:: python\n\n    import json, boto3, domovoi\n\n    app = domovoi.Domovoi()\n\n    @app.scheduled_function(\"cron(0 18 ? * MON-FRI *)\")\n    def foo(event, context):\n        context.log(\"foo invoked at 06:00pm (UTC) every Mon-Fri\")\n        return dict(result=True)\n\n    @app.scheduled_function(\"rate(1 minute)\")\n    def bar(event, context):\n        context.log(\"bar invoked once a minute\")\n        boto3.resource(\"sns\").create_topic(Name=\"bartender\").publish(Message=json.dumps({\"beer\": 1}))\n        return dict(result=\"Work work work\")\n\n    @app.sns_topic_subscriber(\"bartender\")\n    def tend(event, context):\n        message = json.loads(event[\"Records\"][0][\"Sns\"][\"Message\"])\n        context.log(dict(beer=\"Quadrupel\", quantity=message[\"beer\"]))\n\n    @app.cloudwatch_event_handler(source=[\"aws.ecs\"])\n    def monitor_ecs_events(event, context):\n        message = json.loads(event[\"Records\"][0][\"Sns\"][\"Message\"])\n        context.log(\"Got an event from ECS: {}\".format(message))\n\n    @app.s3_event_handler(bucket=\"myS3bucket\", events=[\"s3:ObjectCreated:*\"], prefix=\"foo\", suffix=\".bar\")\n    def monitor_s3(event, context):\n        message = json.loads(event[\"Records\"][0][\"Sns\"][\"Message\"])\n        context.log(\"Got an event from S3: {}\".format(message))\n\n    # Set use_sns=False to subscribe your Lambda directly to S3 events without forwrading them through an SNS topic.\n    # This has fewer moving parts, but you can only subscribe one Lambda function to events in a given S3 bucket.\n    @app.s3_event_handler(bucket=\"myS3bucket\", events=[\"s3:ObjectCreated:*\"], prefix=\"foo\", suffix=\".bar\", use_sns=False)\n    def monitor_s3(event, context):\n        message = json.loads(event[\"Records\"][0][\"Sns\"][\"Message\"])\n        context.log(\"Got an event from S3: {}\".format(message))\n\n    # See the \"AWS Step Functions state machines\" section below for a complete example of setting up a state machine.\n    @app.step_function_task(state_name=\"Worker\", state_machine_definition={})\n    def worker(event, context):\n        return {\"result\": event[\"input\"] + 1}\n\nInstallation\n------------\n::\n\n    pip install domovoi\n\nUsage\n-----\nFirst-time setup::\n\n    chalice new-project\n\nReplace the Chalice app entry point (in ``app.py``) with the Domovoi app entry point as above, then deploy the event handlers::\n\n    domovoi deploy\n\nTo stage files into the deployment package, use a ``domovoilib`` directory in your project where you would use\n``chalicelib`` in Chalice. For example, ``my_project/domovoilib/rds_cert.pem`` becomes ``/var/task/domovoilib/rds_cert.pem``\nwith your function executing in ``/var/task/app.py`` with ``/var/task`` as the working directory. See the\n`Chalice docs <http://chalice.readthedocs.io/>`_ for more information on how to set up Chalice configuration.\n\nSupported event types\n~~~~~~~~~~~~~~~~~~~~~\nSee http://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html for an overview of event sources that\ncan be used to trigger Lambda functions. Domovoi supports the following event sources:\n\n* SNS subscriptions\n* CloudWatch Events rule targets, including CloudWatch Scheduled Events (see\n  http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html for a list of event types supported by\n  CloudWatch Events)\n* S3 events\n* AWS Step Functions state machine tasks\n\nTODO:\n\n* CloudWatch Logs filter subscriptions\n* DynamoDB events\n* SES (email) events\n\nAWS Step Functions state machines\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nDomovoi supports AWS Lambda integration with `AWS Step Functions\n<https://aws.amazon.com/documentation/step-functions>`_. Step Functions state machines can be started using the\n`StartExecution <http://docs.aws.amazon.com/step-functions/latest/apireference/API_StartExecution.html>`_ method or the\n`API Gateway Step Functions integration\n<http://docs.aws.amazon.com/step-functions/latest/dg/tutorial-api-gateway.html>`_.\n\nSee `domovoi/examples/state_machine_app.py <domovoi/examples/state_machine_app.py>`_ for a complete example of a Domovoi\n``app.py`` using a state machine.\n\nConfiguration: Dead Letter Queues\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nTo enable your Lambda function to forward failed invocation notifications to `dead letter queuees\n<http://docs.aws.amazon.com/lambda/latest/dg/dlq.html>`_, set the configuration key ``dead_letter_queue_target_arn`` in\nthe file ``.chalice/config.json`` to the target DLQ ARN. For example::\n\n  {\n    \"app_name\": \"my_app\",\n    ...\n    \"dead_letter_queue_target_arn\": \"arn:aws:sns:us-east-1:123456789012:it-ded\"\n  }\n\nYou may need to update your Lambda IAM policy (``.chalice/policy.json``) to give your Lambda access to SNS or SQS.\n\nLinks\n-----\n* `Project home page (GitHub) <https://github.com/kislyuk/domovoi>`_\n* `Documentation (Read the Docs) <https://domovoi.readthedocs.org/en/latest/>`_\n* `Package distribution (PyPI) <https://pypi.python.org/pypi/domovoi>`_\n* `Change log <https://github.com/kislyuk/domovoi/blob/master/Changes.rst>`_\n\nBugs\n~~~~\nPlease report bugs, issues, feature requests, etc. on `GitHub <https://github.com/kislyuk/domovoi/issues>`_.\n\nLicense\n-------\nLicensed under the terms of the `Apache License, Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0>`_.\n\n.. image:: https://travis-ci.org/kislyuk/domovoi.png\n        :target: https://travis-ci.org/kislyuk/domovoi\n.. image:: https://codecov.io/github/kislyuk/domovoi/coverage.svg?branch=master\n        :target: https://codecov.io/github/kislyuk/domovoi?branch=master\n.. image:: https://img.shields.io/pypi/v/domovoi.svg\n        :target: https://pypi.python.org/pypi/domovoi\n.. image:: https://img.shields.io/pypi/l/domovoi.svg\n        :target: https://pypi.python.org/pypi/domovoi\n.. image:: https://readthedocs.org/projects/domovoi/badge/?version=latest\n        :target: https://domovoi.readthedocs.org/\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kislyuk/domovoi",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "domovoi",
    "package_url": "https://pypi.org/project/domovoi/",
    "platform": "MacOS X",
    "project_url": "https://pypi.org/project/domovoi/",
    "project_urls": {
      "Homepage": "https://github.com/kislyuk/domovoi"
    },
    "release_url": "https://pypi.org/project/domovoi/1.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "AWS Lambda event handler manager",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5733600,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f7508ba9200dd0781279217f56e9f2218c2903620a64ec8df0c0cd79b85bd26",
        "md5": "f14ec8e375205a386530516720494708",
        "sha256": "947a3f199d9a129619f33f3c9f4cae383d16c54cf9c391e2bea7049ea7157d7c"
      },
      "downloads": -1,
      "filename": "domovoi-1.3.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "f14ec8e375205a386530516720494708",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 12885,
      "upload_time": "2017-10-26T20:35:37",
      "upload_time_iso_8601": "2017-10-26T20:35:37.155295Z",
      "url": "https://files.pythonhosted.org/packages/4f/75/08ba9200dd0781279217f56e9f2218c2903620a64ec8df0c0cd79b85bd26/domovoi-1.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be952cdc15f0a3f13225bd24c9fad3ebbdd6bad51b5b1157e15cef622b97a38e",
        "md5": "3306d601700b11aa26b5d3c6d1b8c4ae",
        "sha256": "9eab4cb03ea7c1bd292b87c00bc0534ea2bb973d485c5b7670d735bc99f94117"
      },
      "downloads": -1,
      "filename": "domovoi-1.3.0.tar.gz",
      "has_sig": true,
      "md5_digest": "3306d601700b11aa26b5d3c6d1b8c4ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10302,
      "upload_time": "2017-10-26T20:35:34",
      "upload_time_iso_8601": "2017-10-26T20:35:34.892695Z",
      "url": "https://files.pythonhosted.org/packages/be/95/2cdc15f0a3f13225bd24c9fad3ebbdd6bad51b5b1157e15cef622b97a38e/domovoi-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}