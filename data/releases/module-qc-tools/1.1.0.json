{
  "info": {
    "author": "",
    "author_email": "Jay Chan <jay.chan@cern.ch>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# module-qc-tools v1.1.0\n\nA general python tool for running ITkPixV1.1 module QC tests\n\n## Table of contents\n\n1. [Requirements](#requirements)\n2. [Installation](#installation)\n3. [Usage](#usage)\n4. [Configuration and external commands](#configuration-and-external-commands)\n5. [Measurements](#measurements)\n   1. [ADC calibration](#adc-calibration)\n   2. [SLDOVI](#sldovi)\n   3. [VCal calibration](#vcal-calibration)\n   4. [Analog readback](#analog-readback)\n   5. [Injection capacitance](#injection-capacitance)\n6. [Schema check](#schema-check)\n7. [For developer](#for-developer)\n\n## Requirements\n\nThis tool requires users to have >= python3.7 with the following packages\ninstalled:\n\n- `numpy`\n- `tabulate`\n\nCheck the local python version with `python -V`. If the local python version is\nlower than Python 3.7, set up a virtual python environment following the\ninstructions [here](https://itk.docs.cern.ch/general/Virtual_Environments/).\n\nIn addition, users shall install `YARR` and prepare external scripts for remote\ncontrol of power supply, multimeter and NTC readout. The external scripts shall\nfollow a fixed format, which is detailed in the later section.\n\n## Installation\n\nThis package may be accessed by cloning from gitlab or by installing it via pip.\n\n### via clone\n\nUse this method if you want to use the latest version of the package from\ngitlab. First clone the project:\n\n```\ngit clone https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-tools.git\n```\n\nUpon a successful checkout, `cd` to the new `module-qc-tools` directory and run\nthe following to install the necessary software:\n\n```verbatim\n$ python -m venv venv\n$ source venv/bin/activate\n$ python -m pip install --upgrade pip\n$ python -m pip install -e .\n```\n\n### via pip\n\nUse this method if you want to use the latest stable (versioned) release of the\npackage.\n\n```\npython -m venv venv\nsource venv/bin/activate\npython -m pip install -U pip\npython -m pip install -U pip module-qc-tools==1.1.0\n```\n\n## Usage\n\nAfter installation, one just needs to enter the virtual environment in each new\nsession to use the scripts:\n\n```verbatim\nsource venv/bin/activate\n```\n\nThe first step in using this package is to set up the\n[Configuration and external commands](#configuration-and-external-commands)\ninput json file. This json file is then passed as input to the scripts used to\nrun the [Measurements](#measurements).\n\n## Configuration and external commands\n\nAll the configuration/settings are defined in a single json file. Examples are\nprovided in `$(module-qc-tools --prefix)/configs/':\n\n```\nexample_merged_vmux_L0.json --> Layer 0\nexample_merged_vmux_L1.json --> Layer 1\nexample_merged_vmux_L2.json --> Layer 2\n```\n\nPlease choose the correct layer so that the measurements are performed properly.\nThis is especially important for the SLDO test.\n\n<details> <summary> $(module-qc-tools --prefix)/configs/example_merged_vmux_L2.json </summary>\n\n```json\n{\n        \"yarr\": {\n                \"run_dir\": \"../Yarr\",\n                \"controller\": \"configs/controller/specCfg-rd53b-16x1.json\",\n                \"scanConsole_exe\": \"./bin/scanConsole\",\n                \"write_register_exe\": \"./bin/write-register\",\n                \"read_adc_exe\": \"./bin/read-adc\"\n        },\n        \"power_supply\": {\n                \"run_dir\": \"../labRemote\",\n                \"on_cmd\": \"./build/bin/powersupply -e ./src/configs/input-hw.json -n PS -c 1 power-on\",\n                \"off_cmd\": \"./build/bin/powersupply -e ./src/configs/input-hw.json -n PS -c 1 power-off\",\n                \"set_cmd\": \"./build/bin/powersupply -e ./src/configs/input-hw.json -n PS -c 1 set-current {i} {v}\",\n                \"getI_cmd\": \"./build/bin/powersupply -e ./src/configs/input-hw.json -n PS -c 1 meas-current\",\n                \"getV_cmd\": \"./build/bin/powersupply -e ./src/configs/input-hw.json -n PS -c 1 meas-voltage\"\n        },\n        \"multimeter\": {\n                \"run_dir\": \"../labRemote\",\n                \"dcv_cmd\": [\n                        \"./build/bin/meter -e ./src/configs/input-hw-min_marija.json -n myVmuxMeter -c 0 meas-voltage\"\n                ]\n        },\n        \"ntc\": {\n                \"run_dir\": \"../labremote_devel/scripts\",\n                \"cmd\": \"python measureT.py\"\n        },\n        \"tasks\": {\n                \"SLDO\": {...}\n\t\t\"VCAL_CALIBRATION\": {...}\n\t\t\"ANALOG_READBACK\": {...}\n\t\t\"ADC_CALIBRATION\": {...}\n\t\t\"INJECTION_CAPACITANCE\": {...}\n        }\n}\n```\n\n</details>\n\nThe major blocks (e.g. `yarr`, `power_supply`, `multimeter`, `ntc`) correspond\nto how the scripts will communicate with the module via YARR and how they will\ncommunicate with the lab equipment. Each of these blocks are explained in the\nfollowing sections. The `task` block specifies the settings of each scan\nperformed by the scripts, and will be explained in the\n[Measurements](#measurements) section.\n\n### yarr\n\nThe `yarr` block specifies the path to the `YARR` repository as well as the\ncorresponding YARR configuration files.\n\n- `run_dir`: path (relative or absolute) to the directory where `YARR` commands\n  should be run\n- `controller`: path (relative to `run_dir` or absolute) to the controller file\n- `scanConsole_exe`\": path (relative to `run_dir` or absolute) to the\n  `scanConsole` executable\n- `write_register_exe`\": path (relative to `run_dir` or absolute) to the\n  `write_register` executable\n- `read_adc_exe`\": path (relative to `run_dir` or absolute) to the `read_adc`\n  executable\n\n### power_supply\n\nThe `power_supply` block specifies the path and the commands for handling the\npower supply\n\n- `run_dir`: path (relative or absolute) to the directory where `power_supply`\n  commands should be run\n- `on_cmd`: command to turn on the power supply with specified voltage and\n  current. Use the syntax `{v}` and `{i}` to represent the voltage and current\n  that are to be given as input arguments\n- `off_cmd`: command to turn off the power supply\n- `set_cmd`: command to set voltage and current for power supply. Use the syntax\n  `{v}` and `{i}` to represent the voltage and current that are to be given as\n  input arguments\n- `getI_cmd`: command to measure current of the power supply. This command shall\n  return a std output which represents the value of the current (float in the\n  unit of [A]). For example, when I = 5.2A, `getI_cmd` returns std output =\n  `5.2`.\n- `getV_cmd`: command to measure voltage of the power supply. This command shall\n  return a std output which represents the value of the voltage (float in the\n  unit of [V]). For example, when V = 1.8A, `getV_cmd` returns std output =\n  `1.8`.\n\n### multimeter\n\nThe `multimeter` block specifies the path and the commands for handling the\nmultimeter\n\n- `run_dir`: path (relative or absolute) to the directory where `multimeter`\n  commands should be run\n- `dcv_cmd`: list of commands to measure voltage from the multimeter. Each\n  command corresponds to a single multimeter channel (only the used channels\n  need to be listed). Each command returns a std output which represents the\n  value of measured voltage (float in the unit of [V]). For example, when V =\n  0.352V, `dcv_cmd` returns std output = `0.352`.\n\n### ntc\n\nThe `ntc` block specifies the path and the commands for handling the NTC\n\n- `run_dir`: path (relative or absolute) to the directory where `ntc` commands\n  should be run\n- `cmd`: command to measure temperature from the module NTC. The command returns\n  a std output which represents the value of measured temperature (float in the\n  unit of [C]). For example: when T = 36.2C, `cmd` returns std output = `36.2`.\n\n## Measurements\n\nAn overview of the steps in the module QC procedure is documented in the\n[Electrical specification and QC procedures for ITkPixV1.1 modules](https://gitlab.cern.ch/atlas-itk/pixel/module/itkpix-electrical-qc/)\ndocument and in\n[this spreadsheet](https://docs.google.com/spreadsheets/d/1qGzrCl4iD9362RwKlstZASbhphV_qTXPeBC-VSttfgE/edit#gid=989740987).\nEach measurement is performed with one script. All scripts assume that the\nmodules to be tested are already powered on.\n\n### ADC calibration\n\n`measurement-ADC-CALIBRATION`\n\nThis script will run the ADC calibration (`task = ADC_CALIBRATION`) as specified\nin the input configuration json file (i.e.\n`$(module-qc-tools --prefix)/configs/example_merged_vmux_L2.json`).\n\n<details> <summary> Configuration settings </summary>\n\n- `v_max`: the voltage to be set to the power supply (i.e. the max voltage since\n  the power supply should operate in constant current)\n- `i_config`: the current at which the module should be configured\n- `MonitorV`: list of Vmux channels to be measured\n- `InjVcalRange`: the range of the calibration injection circuit(1: a large\n  range and 0: a small range i.e. half the large range but a finer step)\n- `Range`: the DACs scan range [\"start\", \"stop\", \"step\"]\n- `share_vmux`: whether to merge the Vmux channels or not\n- `v_mux_channels`: multimeter channel to measure the Vmux for each chip\n  (correspond to each element in the dcv_cmd in the multimeter block)\n\n</details>\n\n<details> <summary> Help message </summary>\n\n```\n$ measurement-ADC-CALIBRATION --help\nusage: measurement-ADC-CALIBRATION [-h] [-c CONFIG] [-i [INPUT_FILE [INPUT_FILE ...]]] [-o OUTPUT_DIR] [--verbose] [-m MODULE_CONNECTIVITY] [--permodule]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CONFIG, --config CONFIG\n                        Config file\n  -i [INPUT_FILE [INPUT_FILE ...]], --input-file [INPUT_FILE [INPUT_FILE ...]]\n                        input file if exists\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        output directory\n  -m MODULE_CONNECTIVITY, --module-connectivity MODULE_CONNECTIVITY\n                        path to the module connectivity. Used also to identify the module SN, and to set the default output directory\n  --verbose             verbose mode\n  --permodule           Store results in one file per module (default: one file per chip)\n```\n\n</details>\n\n<details> <summary> Example </summary>\n\n```\nmeasurement-ADC-CALIBRATION -c $(module-qc-tools --prefix)/configs/example_merged_vmux_L2.json -m ~/module_data/20UPGR91301046/20UPGR91301046_L2_warm.json\n```\n\n</details>\n\n<details> <summary> Example command to run on the toy emulator </summary>\n\n```\nmeasurement-ADC-CALIBRATION -c $(module-qc-tools --prefix)/configs/emulator_merged_vmux_L2.json -o emulator/outputs/\n```\n\n</details>\n\n### SLDOVI\n\n`measurement-SLDO`\n\nThis script will run the VI scans (`task = SLDO`) as specified in the input\nconfiguration json file (i.e.\n`$(module-qc-tools --prefix)/configs/example_merged_vmux_L2.json`).\n\n<details> <summary> Configuration settings </summary>\n\n- `v_max`: the voltage to be set to the power supply (i.e. the max voltage since\n  the power supply should operate in constant current)\n- `i_config`: the current at which the module should be configured\n- `i_min`: the minimum current of the VI scan\n- `i_max`: the maximum current of the VI scan\n- `n_points`: how many points should be measured (equally spread between the max\n  of the min currents)\n- `extra_i`: extra current points to be measured\n- `v_mux`: list of Vmux channels to be measured\n- `i_mux`: list of Imux channels to be measured\n- `share_vmux`: whether to merge the Vmux channels or not\n- `v_mux_channels`: multimeter channel to measure the Vmux for each chip\n  (correspond to each element in the dcv_cmd in the multimeter block)\n\n</details>\n\n<details> <summary> Help message </summary>\n\n```\n$ measurement-SLDO --help\nusage: measurement-SLDO [-h] [-c CONFIG] [-i [INPUT_FILE [INPUT_FILE ...]]] [-o OUTPUT_DIR] [-m MODULE_CONNECTIVITY] [--permodule]\n                        [--verbose]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CONFIG, --config CONFIG\n                        Config file\n  -i [INPUT_FILE [INPUT_FILE ...]], --input-file [INPUT_FILE [INPUT_FILE ...]]\n                        input file if exists\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        output directory\n  -m MODULE_CONNECTIVITY, --module-connectivity MODULE_CONNECTIVITY\n                        path to the module connectivity. Used also to identify the module SN, and to\n                        set the default output directory\n  --permodule           Store results in one file per module (default: one file per chip)\n  --verbose             verbose mode\n```\n\n</details>\n\n<details> <summary> Example </summary>\n\n```\nmeasurement-SLDO -c $(module-qc-tools --prefix)/configs/example_merged_vmux_L2.json -m ~/module_data/20UPGR91301046/20UPGR91301046_L2_warm.json\n```\n\n</details>\n\n<details> <summary> Example command to run on the toy emulator </summary>\n\n```\nmeasurement-SLDO -c $(module-qc-tools --prefix)/configs/emulator_merged_vmux_L2.json -o emulator/outputs\n```\n\n</details>\n\n### VCal calibration\n\n`measurement-VCAL-CALIBRATION`\n\nThis script will run the VCal calibration (`task = VCAL_CALIBRATION`) as\nspecified in the input configuration json file (i.e.\n`$(module-qc-tools --prefix)/configs/example_merged_vmux_L2.json`).\n\n<details> <summary> Configuration settings </summary>\n\n- `v_max`: the voltage to be set to the power supply (i.e. the max voltage since\n  the power supply should operate in constant current)\n- `i_config`: the current at which the module should be configured\n- `InjVcalRange`: the range of the calibration injection circuit(1: a large\n  range and 0: a small range i.e. half the large range but a finer step)\n- `MonitorV`: two DACs VMUX assignments Vcal_med(8) and Vcal_high(7)\n- `MonitorV_GND`: the GNDA VMUX assignment 30\n- `Large_Range`: the large DACs scan range [\"start\", \"stop\", \"step\"]\n- `Small_Range`: the small DACs scan range [\"start\", \"stop\", \"step\"]\n- `share_vmux`: whether to merge the Vmux channels or not\n- `v_mux_channels`: multimeter channel to measure the Vmux for each chip\n  (correspond to each element in the dcv_cmd in the multimeter block)\n\n</details>\n\n<details> <summary> Help message </summary>\n\n```\n$ measurement-VCAL-CALIBRATION --help\nusage: measurement-VCAL-CALIBRATION [-h] [-c CONFIG] [-o OUTPUT_DIR] [-m MODULE_CONNECTIVITY] [--verbose] [--permodule]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CONFIG, --config CONFIG\n                        Config file\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        output directory\n  -m MODULE_CONNECTIVITY, --module-connectivity MODULE_CONNECTIVITY\n                        path to the module connectivity. Used also to identify the module SN, and to\n                        set the default output directory\n  --verbose             verbose mode\n  --permodule           Store results in one file per module (default: one file per chip)\n```\n\n</details>\n\n<details> <summary> Example </summary>\n\n```\nmeasurement-VCAL-CALIBRATION -c $(module-qc-tools\n--prefix)/configs/example_merged_vmux_L2.json -m\n~/module_data/20UPGR91301046/20UPGR91301046_L2_warm.json\n\n```\n\n</details>\n\n<details> <summary> Example command to run on the toy emulator </summary>\n\n```\nmeasurement-VCAL-CALIBRATION -c $(module-qc-tools\n--prefix)/configs/emulator_merged_vmux_L2.json -o emulator/outputs/\n\n```\n\n</details>\n\n### Analog readback\n\n`measurement-ANALOG-READBACK`\n\nThis script will measure all internal voltages available through VMUX and IMUX,\nmeasure the chip temperature, and measure VDDA/VDDD vs Trim. channels. The scan\nsettings are defined in the `task = ANALOG_READBACK` block of the input\nconfiguration file (i.e.\n`$(module-qc-tools --prefix)/configs/example_merged_vmux_L2.json`). The NTC\nneeds to be set in order to run this script, so that the temperature can be\nread.\n\n<details> <summary> Configuration settings </summary>\n\n- `v_max`: the voltage to be set to the power supply (i.e. the max voltage since\n  the power supply should operate in constant current)\n- `i_config`: the current at which the module should be configured\n- `v_mux`: list of Vmux channels to be measured\n- `i_mux`: list of Imux channels to be measured\n- `v_mux_ntc`: list of Vmux channels to be measured for ntc temperature\n- `i_mux_ntc`: list of Imux channels to be measured for ntc temperature\n- `v_mux_tempsens`: list of Vmux channels to be measured for 3 temperature\n  sensors\n- `MonSensSldoDigSelBias`: Bias 0 and 1 for MOS sensor near digital SLDO\n- `MonSensSldoAnaSelBias`: Bias 0 and 1 for MOS sensor near analog SLDO\n- `MonSensAcbSelBias`: Bias 0 and 1 for MOS sensor near center\n- `MonSensSldoDigDem`: Dem 0-15 for MOS sensor near digital SLDO\n- `MonSensSldoAnaDem`: Dem 0-15 for MOS sensor near analog SLDO\n- `MonSensAcbDem`: Dem 0-15 for MOS sensor near center\n- `share_vmux`: whether to merge the Vmux channels or not\n- `v_mux_channels`: multimeter channel to measure the Vmux for each chip\n  (correspond to each element in the dcv_cmd in the multimeter block)\n\n</details>\n\n<details> <summary> Help message </summary>\n\n```\nusage: measurement-ANALOG-READBACK [-h] [-c CONFIG] [-i [INPUT_FILE [INPUT_FILE ...]]] [-o OUTPUT_DIR]\n                                   [-m MODULE_CONNECTIVITY] [--verbose] [--permodule]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CONFIG, --config CONFIG\n                        Config file\n  -i [INPUT_FILE [INPUT_FILE ...]], --input-file [INPUT_FILE [INPUT_FILE ...]]\n                        input file if exists\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        output directory\n  -m MODULE_CONNECTIVITY, --module-connectivity MODULE_CONNECTIVITY\n                        path to the module connectivity. Used also\n                        to identify the module SN, and to set the default output directory\n  --verbose             verbose mode\n  --permodule           Store results in one file per module (default: one file per chip)\n```\n\n</details>\n\n<details> <summary> Example </summary>\n\n```\nmeasurement-ANALOG-READBACK -c $(module-qc-tools\n--prefix)/configs/example_merged_vmux_L2.json -m\n~/module_data/20UPGR91301046/20UPGR91301046_L2_warm.json\n\n```\n\n</details>\n\n<details> <summary> Example command to run on the toy emulator </summary>\n\n```\nmeasurement-ANALOG-READBACK -c $(module-qc-tools\n--prefix)/configs/emulator_merged_vmux_L2.json -o emulator/outputs\n\n```\n\n</details>\n\n### Injection capacitance\n\n`measurement-INJECTION-CAPACITANCE`\n\nThis script will run the injection capacitance measurement\n(`task = INJECTION_CAPACITANCE`) as specified in the input configuration json\nfile (i.e. `$(module-qc-tools --prefix)/configs/example_merged_vmux_L2.json`).\n\n<details> <summary> Configuration settings </summary>\n\n- `v_max`: the voltage to be set to the power supply (i.e. the max voltage since\n  the power supply should operate in constant current)\n- `i_config`: the current at which the module should be configured\n- `n_meas`: number of measurements to perform\n- `v_mux`: list of Vmux channels to be measured\n- `i_mux`: list of Imux channels to be measured\n- `share_vmux`: whether to merge the Vmux channels or not\n- `v_mux_channels`: multimeter channel to measure the Vmux for each chip\n  (correspond to each element in the dcv_cmd in the multimeter block)\n\n</details>\n\n<details> <summary> Help message </summary>\n\n```\nusage: measurement-INJECTION-CAPACITANCE [-h] [-c CONFIG] [-i [INPUT_FILE [INPUT_FILE ...]]]\n                                         [-o OUTPUT_DIR] [-m MODULE_CONNECTIVITY] [--verbose]\n                                         [--permodule]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CONFIG, --config CONFIG\n                        Config file\n  -i [INPUT_FILE [INPUT_FILE ...]], --input-file [INPUT_FILE [INPUT_FILE ...]]\n                        input file if exists\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        output directory\n  -m MODULE_CONNECTIVITY, --module-connectivity MODULE_CONNECTIVITY\n                        path to the module connectivity. Used also\n                        to identify the module SN, and to set the default output directory\n  --verbose             verbose mode\n  --permodule           Store results in one file per module (default: one file per chip)\n```\n\n</details>\n\n<details> <summary> Example </summary>\n\n```\nmeasurement-INJECTION-CAPACITANCE -c $(module-qc-tools\n--prefix)/configs/example_merged_vmux_L2.json -m\n~/module_data/20UPGR91301046/20UPGR91301046_L2_warm.json\n\n```\n\n</details>\n\n<details> <summary> Example command to run on the toy emulator </summary>\n\n```\nmeasurement-INJECTION-CAPACITANCE -c $(module-qc-tools\n--prefix)/configs/emulator_merged_vmux_L2.json -o emulator/outputs/\n\n```\n\n</details>\n\n## Output data\n\nThe output of the measurements follows the structure below:\n\n```\n|** Measurements |** <test_type> |** VCAL_CALIB |** <timestamp> |\\_\\_\n<chip_name/module_serial_number>.json\n\n```\n\nThe test-type of each measuremnt is the corresponding test-code used in the\nProduction Data Base. The naming iof each measuremnet script is chosen to be the\nsame as the test-type. The timestamp is chosen to be the start time of the\nmeasurement.\n\n## Schema check\n\nThe schema for the output json files is checked based on the schema files\nspecified in the folder `schema`. To run the common schema check for all test\noutputs, do:\n\n```\njsonschema --instance [path to output json files] $(module-qc-tools\n--prefix)/schema/common.json\n\n```\n\nTo run the further schema check for a specific test output, do:\n\n```\njsonschema --instance [path to output json files] $(module-qc-tools\n--prefix)/schema/[qc_task].json\n```\n\n<details> <summary> Example (with the emulator output files) </summary>\n\n```\njsonschema --instance emulator/outputs/SLDO_reference/<timestamp>/chip1.json\n$(module-qc-tools --prefix)/schema/common.json jsonschema --instance\nemulator/outputs/SLDO_reference/<timestamp>/chip1.json $(module-qc-tools\n--prefix)/schema/SLDO.json\n```\n\n</details>\n\n## Time Estimates\n\n| Measurement     | Duration |\n| --------------- | -------- |\n| ADC calib       | 00:17:24 |\n| SLDO VI         | 00:32:00 |\n| Vcal calib      | 00:18:47 |\n| Analog Readback | 00:40:25 |\n| Injection Cap.  | 00:05:17 |\n\n## For Developer\n\n### versioning\n\nIn case you need to tag the version of the code, you need to have either `hatch`\nor `pipx` installed.\n\n1. Activate python environment, e.g. `source venv/bin/activate`.\n2. Run `python -m pip install hatch` or `python -m pip install pipx`.\n\nYou can bump the version via:\n\n```\npipx run hatch run tag x.y.z\n\n# or\n\nhatch run tag x.y.z\n```\n\nwhere `x.y.z` is the new version to use. This should be run from the default\nbranch (`main` / `master`) as this will create a commit and tag, and push for\nyou. So make sure you have the ability to push directly to the default branch.\n\n### pre-commit\n\nInstall pre-commit to avoid CI failure. Once pre-commit is installed, a git hook\nscript will be run to identify simple issues before submission to code review.\n\nInstruction for installing pre-commit in a python environment:\n\n1. Activate python environment, e.g. `source venv/bin/activate`.\n2. Run `python3 -m pip install pre-commit`.\n3. Run `pre-commit install` to install the hooks in `.pre-commit-config.yaml`.\n\nAfter installing pre-commit, `.pre-commit-config.yaml` will be run every time\n`git commit` is done. Redo `git add` and `git commit`, if the pre-commit script\nchanges any files.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Copyright (c) 2018 The Python Packaging Authority  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "Giordon Stark <gstark@cern.ch>",
    "name": "module-qc-tools",
    "package_url": "https://pypi.org/project/module-qc-tools/",
    "platform": null,
    "project_url": "https://pypi.org/project/module-qc-tools/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-tools/-/issues",
      "Homepage": "https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-tools",
      "Source": "https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-tools"
    },
    "release_url": "https://pypi.org/project/module-qc-tools/1.1.0/",
    "requires_dist": [
      "importlib-resources; python_version < '3.9'",
      "jsonschema",
      "module-qc-data-tools>=1.0.1",
      "numpy",
      "pre-commit",
      "tabulate"
    ],
    "requires_python": ">=3.7",
    "summary": "Module qc tools",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17495591,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8096a2226487242bf61acfc0a4fb0022f3ff31283dab59498ffe26f27a343b3f",
        "md5": "2558dfaeafb874791b3fe57e77de5b51",
        "sha256": "44fa31b11421c2cc68aa004c2937c2585fed032283923170039a304295c23640"
      },
      "downloads": -1,
      "filename": "module_qc_tools-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2558dfaeafb874791b3fe57e77de5b51",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 79406,
      "upload_time": "2023-02-17T19:53:10",
      "upload_time_iso_8601": "2023-02-17T19:53:10.339193Z",
      "url": "https://files.pythonhosted.org/packages/80/96/a2226487242bf61acfc0a4fb0022f3ff31283dab59498ffe26f27a343b3f/module_qc_tools-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7edd0ba8853b8b5e6fa9356b0e7a76160229b7fba0beece2d4c9805762ffd7a",
        "md5": "8f7ccce19445cce6083b2b1e48eed422",
        "sha256": "dc3517e74e1c1437c2a8ac9c2a8e4d0f9c0f8466acfeb1fe79d2d57f92546114"
      },
      "downloads": -1,
      "filename": "module_qc_tools-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8f7ccce19445cce6083b2b1e48eed422",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 69188,
      "upload_time": "2023-02-17T19:53:12",
      "upload_time_iso_8601": "2023-02-17T19:53:12.260003Z",
      "url": "https://files.pythonhosted.org/packages/d7/ed/d0ba8853b8b5e6fa9356b0e7a76160229b7fba0beece2d4c9805762ffd7a/module_qc_tools-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}