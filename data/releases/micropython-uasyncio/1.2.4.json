{
  "info": {
    "author": "MicroPython Developers",
    "author_email": "micro-python@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "uasyncio\n========\n\nuasyncio is MicroPython's asynchronous sheduling library, roughly\nmodeled after CPython's asyncio.\n\nuasyncio doesn't use naive always-iterating scheduling algorithm,\nbut performs a real time-based scheduling, which allows it (and\nthus the whole system) to sleep when there is nothing to do (actual\nimplementation of that depends on I/O scheduling algorithm which\nactually performs the wait operation).\n\nMajor conceptual differences to asyncio:\n\n* Avoids defining a notion of Future, and especially wrapping coroutines\n  in Futures, like CPython asyncio does. uasyncio works directly with\n  coroutines (and callbacks).\n* uasyncio uses wrap-around millisecond timebase (as native to all\n  MicroPython ports.)\n* Instead of single large package, number of subpackages are provided\n  (each installable separately).\n\nSpecific differences:\n\n* For millisecond scheduling, ``loop.call_later_ms()`` and\n  ``uasyncio.sleep_ms()`` are provided.\n* As there's no monotonic time, ``loop.call_at()`` is not provided.\n  Instead, there's ``loop.call_at_()`` which is considered an internal\n  function and has slightly different signature.\n* ``call_*`` funcions don't return Handle and callbacks scheduled by\n  them aren't cancellable. If they need to be cancellable, they should\n  accept an object as an argument, and a \"cancel\" flag should be set\n  in the object, for a callback to test.\n* ``Future`` object is not available.\n* ``ensure_future()`` and ``Task()`` perform just scheduling operations\n  and return a native coroutine, not Future/Task objects.\n* Some other functions are not (yet) implemented.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/micropython/micropython-lib",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-uasyncio",
    "package_url": "https://pypi.org/project/micropython-uasyncio/",
    "platform": "",
    "project_url": "https://pypi.org/project/micropython-uasyncio/",
    "project_urls": {
      "Homepage": "https://github.com/micropython/micropython-lib"
    },
    "release_url": "https://pypi.org/project/micropython-uasyncio/1.2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Lightweight asyncio-like library for MicroPython, built around native Python coroutines.",
    "version": "1.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5660174,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "49913228f62e1d7238d416b37a04cba1427fb8b4abe3666aff6d8bd1f68cd0ad",
        "md5": "34e4c8a71389be0027ec48b8e4dad270",
        "sha256": "ecc8bc70a401b69bbd75fe2a2b3c19cac9f2d36678c4701e802460f9ff8ef07e"
      },
      "downloads": -1,
      "filename": "micropython-uasyncio-1.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "34e4c8a71389be0027ec48b8e4dad270",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3419,
      "upload_time": "2017-11-05T15:52:52",
      "upload_time_iso_8601": "2017-11-05T15:52:52.293078Z",
      "url": "https://files.pythonhosted.org/packages/49/91/3228f62e1d7238d416b37a04cba1427fb8b4abe3666aff6d8bd1f68cd0ad/micropython-uasyncio-1.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}