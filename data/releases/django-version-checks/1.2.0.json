{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "=====================\ndjango-version-checks\n=====================\n\n.. image:: https://img.shields.io/github/workflow/status/adamchainz/django-version-checks/CI/main?style=for-the-badge\n   :target: https://github.com/adamchainz/django-version-checks/actions?workflow=CI\n\n.. image:: https://img.shields.io/codecov/c/github/adamchainz/django-version-checks/main?style=for-the-badge\n   :target: https://app.codecov.io/gh/adamchainz/django-version-checks\n\n.. image:: https://img.shields.io/pypi/v/django-version-checks.svg?style=for-the-badge\n   :target: https://pypi.org/project/django-version-checks/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nSystem checks for your project's environment.\n\nRequirements\n============\n\nPython 3.6 to 3.9 supported.\n\nDjango 2.2 to 3.2 supported.\n\n----\n\n**Are your tests slow?**\nCheck out my book `Speed Up Your Django Tests <https://gumroad.com/l/suydt>`__ which covers loads of best practices so you can write faster, more accurate tests.\n\n----\n\nInstallation\n============\n\nFirst, install with **pip**:\n\n.. code-block:: bash\n\n    python -m pip install django-version-checks\n\nSecond, add the app to your ``INSTALLED_APPS`` setting:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        ...,\n        \"django_version_checks\",\n        ...,\n    ]\n\nThird, add a ``VERSION_CHECKS`` setting with the version checks you want to enforce (as documented below).\nFor example:\n\n.. code-block:: python\n\n    VERSION_CHECKS = {\n        \"python\": \"==3.9.*\",\n    }\n\nUsage\n=====\n\nSee also the `introductory blog post <https://adamj.eu/tech/2020/12/14/introducing-django-version-checks/>`__.\n\ndjango-version-checks adds several `system checks <https://docs.djangoproject.com/en/stable/topics/checks/>`__ that can help ensure that the current environment has the right versions of Python, databases, etc.\nThis is useful when coordinating upgrades across all your infrastructure.\n\nNote that django-version-checks does not check the versions of your Python dependencies.\nThis is because such checks need doing at the start of the Python process, in your `manage.py` file, before Django imports your apps.\nAny mismatched versions are likely to cause import time problems, before django-version-checks‚Äô system checks can execute.\nTo add checks on your Python dependencies, check out `pip-lock <https://github.com/adamchainz/pip-lock/>`__.\n\nChecks use the `PEP 440 specifier format <https://www.python.org/dev/peps/pep-0440/#id53>`__ via the ``packaging`` module.\nThis is the same format used by pip, and allows some flexibility in specifying valid version ranges.\nThe ``~=`` operator is particularly useful.\nFor example, you can use ``~=3.9.1`` to mean ‚Äú3.9.1+, but less than 3.10.0‚Äù, allowing environments to take on patch releases without changes, but nothing more.\n\nThe individual checks are documented below.\nEach occupies a key in the ``VERSION_CHECKS`` dictionary, and documents its supported types for specifiers.\nIf a check is misconfigured with a bad type or specifier you will see one of these system check errors:\n\n* ``dvc.E001``: ``<check>`` is misconfigured. Expected a ``<type>`` but got ``<value>``.\n* ``dvc.E002``: ``<check>`` is misconfigured. ``<value>`` is not a valid PEP440 specifier.\n\n``mysql`` check\n----------------\n\nThis check compares the current version of MariaDB/MySQL to the given specifier.\nThe range can specified either as a single string:\n\n.. code-block:: python\n\n    VERSION_CHECKS = {\n        \"mysql\": \"~=10.5.8\",\n    }\n\n...or as a dictionary mapping database aliases to their specifiers:\n\n.. code-block:: python\n\n    VERSION_CHECKS = {\n        \"postgresql\": {\n            \"default\": \"~=10.5.8\",\n            \"analytics\": \"~=10.4.17\",\n        },\n    }\n\nNote: as a database check, Django will only run this during ``migrate`` or when using ``check --database`` (Django 3.1+) / ``check --tags database`` (Django <3.1).\nSee (`docs <https://docs.djangoproject.com/en/3.1/ref/checks/#builtin-tags>`__).\n\nIf this check fails, the system check will report:\n\n* ``dvc.E005``: The current version of MariaDB/MySQL (``<version>``) for the ``<alias>`` database connection does not match the specified range (``<range>``).\n\n``python`` check\n----------------\n\nThis check compares the current version of Python to the given single specifier:\n\n.. code-block:: python\n\n    VERSION_CHECKS = {\n        \"python\": \"~=3.9.1\",\n    }\n\nIf this check fails, the system check will report:\n\n* ``dvc.E003``: The current version of Python (``<version>``) does not match the specified range (``<range>``).\n\n``postgresql`` check\n--------------------\n\nThis check compares the current version of PostgreSQL to the given specifier.\nThe range can specified either as a single string:\n\n.. code-block:: python\n\n    VERSION_CHECKS = {\n        \"postgresql\": \"~=12.2\",\n    }\n\n...or as a dictionary mapping database aliases to their specifiers:\n\n.. code-block:: python\n\n    VERSION_CHECKS = {\n        \"postgresql\": {\n            \"default\": \"~=12.2\",\n            \"analytics\": \"~=13.1\",\n        },\n    }\n\nNote: as a database check, Django will only run this during ``migrate`` or when using ``check --database`` (Django 3.1+) / ``check --tags database`` (Django <3.1).\nSee (`docs <https://docs.djangoproject.com/en/3.1/ref/checks/#builtin-tags>`__).\n\nIf this check fails, the system check will report:\n\n* ``dvc.E004``: The current version of PostgreSQL (``<version>``) for the ``<alias>`` database connection does not match the specified range (``<range>``).\n\n``sqlite`` check\n--------------------\n\nThis check compares the current version of SQLite to the given single specifier:\n\n.. code-block:: python\n\n    VERSION_CHECKS = {\n        \"sqlite\": \"~=12.2\",\n    }\n\nNote: as a database check, Django will only run this during ``migrate`` or when using ``check --database`` (Django 3.1+) / ``check --tags database`` (Django <3.1).\nSee (`docs <https://docs.djangoproject.com/en/3.1/ref/checks/#builtin-tags>`__).\n\nIf this check fails, the system check will report:\n\n* ``dvc.E006``: The current version of SQLite (``<version>``) does not match the specified range (``<range>``).\n\nExample Upgrade\n===============\n\nLet‚Äôs walk through using django-version-checks to upgrade Python from version 3.8 to 3.9.\nWe have an infrastructure consisting of CI, staging, and production environments, and several developers‚Äô development machines.\n\nFirst, we add a pre-existing check to ensure that all environments are on Python 3.8:\n\n.. code-block:: python\n\n    VERSION_CHECKS = {\n        \"python\": \"~=3.8.6\",\n    }\n\nSecond, we rewrite the specifier to allow versions of Python 3.9:\n\n.. code-block:: python\n\n    VERSION_CHECKS = {\n        \"python\": \">=3.8.6,<3.10.0\",\n    }\n\nThird, we upgrade our infrastructure.\nWe‚Äôd probably upgrade in the order: CI, development environments, staging, production.\nEach environment should have an automated run of ``manage.py check``, as per the `Django deployment checklist <https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/>`__.\n\nFourth, we change the specifier again to allow Python 3.9 only:\n\n.. code-block:: python\n\n    VERSION_CHECKS = {\n        \"python\": \"~=3.9.1\",\n    }\n\nAnd we‚Äôre upgraded! üéâ\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-version-checks",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-version-checks",
    "package_url": "https://pypi.org/project/django-version-checks/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-version-checks/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-version-checks/blob/main/HISTORY.rst",
      "Homepage": "https://github.com/adamchainz/django-version-checks",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/django-version-checks/1.2.0/",
    "requires_dist": [
      "Django (>=2.2)",
      "packaging (>=20.8)"
    ],
    "requires_python": ">=3.6",
    "summary": "System checks for your project's environment.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024254,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3a3af45c7506bf03655576057d82bb67c098cfaea8b8c638c46c596818daf9b",
        "md5": "de9c6c7493c175a550e32e321473d375",
        "sha256": "7e52748d1ecae9f7afcbee3104fd57687a0a7e1cb253c0cdb39098b367144b9b"
      },
      "downloads": -1,
      "filename": "django_version_checks-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "de9c6c7493c175a550e32e321473d375",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8220,
      "upload_time": "2021-08-13T13:40:48",
      "upload_time_iso_8601": "2021-08-13T13:40:48.904105Z",
      "url": "https://files.pythonhosted.org/packages/d3/a3/af45c7506bf03655576057d82bb67c098cfaea8b8c638c46c596818daf9b/django_version_checks-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f5f1fb472d281298ffe69de92b1e5a7b9a2fe3cb775619feacda7ac56d6af1c",
        "md5": "e523d08a7c6f7c6122d2762cd04c4fc0",
        "sha256": "7579b6f0e031545f9ecbbe516940e28ae46d8e7f39199fd19831792bcd55f1dd"
      },
      "downloads": -1,
      "filename": "django-version-checks-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e523d08a7c6f7c6122d2762cd04c4fc0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10198,
      "upload_time": "2021-08-13T13:40:50",
      "upload_time_iso_8601": "2021-08-13T13:40:50.388261Z",
      "url": "https://files.pythonhosted.org/packages/2f/5f/1fb472d281298ffe69de92b1e5a7b9a2fe3cb775619feacda7ac56d6af1c/django-version-checks-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}