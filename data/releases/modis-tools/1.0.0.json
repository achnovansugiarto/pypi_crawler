{
  "info": {
    "author": "fraym",
    "author_email": "datascience@fraym.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# MODIS Tools\n\nMODIS Tools is a Python library to easily (and quickly) download MODIS imagery from the NASA Earthdata platform.\n\nNASA’s Earthdata portal organizes MODIS data into collections, products, and granules. MODIS Tools provides a series of classes to search MODIS collection metadata for products, select the tiles you want, and download granules from the results of those queries. All you need are Earthdata account credentials and the desired MODIS product’s short name and version. \n\n## Example\n\nAfter adding your username and password, the snippet below will download MOD13A1 granules for Nigeria for 2016, 2017, and 2018 to the current directory.\n\n```python\nfrom modis_tools.auth import ModisSession\nfrom modis_tools.resources import CollectionApi, GranuleApi\nfrom modis_tools.granule_handler import GranuleHandler\n\nusername = \"\"  # Update this line\npassword = \"\"  # Update this line\n\n# Authenticate a session\nsession = ModisSession(username=username, password=password)\n\n# Query the MODIS catalog for collections\ncollection_client = CollectionApi(session=session)\ncollections = collection_client.query(short_name=\"MOD13A1\", version=\"006\")\n\n# Query the selected collection for granules\ngranule_client = GranuleApi.from_collection(collections[0], session=session)\n\n# Filter the selected granules via spatial and temporal parameters\nnigeria_bbox = [2.1448863675, 4.002583177, 15.289420717, 14.275061098]\nnigeria_granules = granule_client.query(start_date=\"2016-01-01\", end_date=\"2018-12-31\", bounding_box=nigeria_bbox)\n\n# Download the granules\nGranuleHandler.download_from_granules(nigeria_granules, session)\n```\n\n## Further Details and Options\n\n### Authentication\n\nWith username and password:\n\n```python\nfrom modis_tools.auth import ModisSession\nfrom modis_tools.resources import CollectionApi\n\nusername = \"\"\npassword = \"\"\n\n# Reusable session\nsession = ModisSession(username=username, password=password)\ncollection_client = CollectionApi(session=session)\n# - or -\ncollection_client = CollectionApi(username=username, password=password)\n```\n\nWith session as context manager\n\n```python\n...\nwith ModisSession(username=username, password=password) as session:\n    collection_client = CollectionApi(session=session)\n    ...\n```\n\nUsing a netrc file, you can create clients without authentication:\n\n```python\nfrom modis_tools.auth import add_earthdata_netrc, remove_earthdata_netrc\n\nusername = \"\"\npassword = \"\"\n# Create an entry for Earthdata in the ~/.netrc file, only needs to be run once\nadd_earthdata_netrc(username, password)\n\n...\n# Now sessions can be created without passing username and password explicitly\nsession = ModisSession()\ngranule_client = GranuleApi()\n\n# You can remove the credentials if necessary. It will only remove\n# the Earthdata entry\nremove_earthdata_netrc()\n...\n```\n\n### Query Parameters\n\nYou can interact with the Earthdata Search API to browse collections and granules via the `CollectionApi` and `GranuleApi` classes respectively. Most query parameters for collections and granules listed in the [Earthdata documentation](https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html) can be passed directly to either class's `query()` method. \n\n*Note: To specify a modifier for a parameter (eg. `parameter[option]`), you'll need to unpack it from a dictionary: `**{\"parameter[option]\": \"value\"}` rather than passing it directly as a keyword argument.*\n\n*Note: Response models for both classes' `query()` methods can be found in `modis_tools/models.py`.*\n\n```python\n# Collections query returns a list of matching collections\ncollections = collection_client.query(short_name=\"MOD13A1\", version=\"006\")\n\n# Create a GranuleApi from a Collection, the `concept_id` search parameter is set\n# to the collection\ngranule_client = GranuleApi.from_collection(collections[0])\n# Granules collection returns a generator with matching granules\ngranules = granule_client.query(start_date=\"2019-02-02\", limit=50)\n```\n\nSome parameters will be preprocessed and formatted. You can also use the raw parameters shown in the Earthdata documentation, but you'll have to make sure the format is correct.\n\n#### Time parameters\n\nTime ranges can be defined by at least one of `start_date` and `end_date` that can be passed as `datetime.datetime` objects, or strings/dicts/tuples that can be parsed to `datetime` objects. `time_delta` can be a `datetime.timedelta` object or something that can be parsed to one.\n\n```python\nfrom datetime import datetime, timedelta\n\n# Any of the following definitions work for both `start_date` and `end_date`\nstart_date = datetime(2017, 12, 31)\nstart_date = {\"year\": 2017, \"month\": 12, \"day\": 31}\nstart_date = \"2017-12-31\"\nstart_date = (2017, 12, 31)\n\n# Any of the following definitions for time_delta will create a one year time range.\n# Sign of time delta doesn't matter, it will be determined by whether start or end\n# is provided\ntime_delta = timedelta(365)\ntime_delta = 365 # Days is the default unit for time_delta\ntime_delta = {\"weeks\": 52, \"days\": 1}\n\nend_date = datetime(2018, 12, 31)\n\n# With the above parameters, the following three will query the same time range\ngranules = granule_client.query(start_date=start_end, end_date=end_date)\ngranules = granule_client.query(time_delta=time_delta, start_date=start_date)\ngranules = granule_client.query(time_delta=time_delta, end_date=end_date)\n\n# If only one of start or end is provided, the date query is open ended\ngranules = granule_client.query(start_date=start_end)\n```\n\n#### Spatial parameters\n\nThe `spatial` and `bounding_box` parameters for collections and granules will parse ogr `Geometry`s, shapely `geometry`s (used by geopandas), or\nGeoJSONs features/geometries. Multipolygons and geometry collections are converted to convex hulls for simpler queries. All spatial queries should\nbe in `(longitude, latitude)` order.\n\nIf bounding box is a geometry object, the envelope will be calculated. As a list or tuple, bounding box should be in the order `(xmin, ymin, xmax, ymax)`.\n\n```python\nimport geopandas as gpd\n\ndf = gpd.read_file(\"/Users/leith/Desktop/dhs_mwi.geojson\")\ngeom = df.geometry[0]\n\nmalawi_granules = granule_client.query(start_date=\"2017-01-01\", end_date=\"2018-12-31\", spatial=geom)\n\n...\nfrom osgeo import ogr\n\nds = ogr.GetDriverByName(\"GeoJSON\").Open(\"drc.geojson\")\nl = ds.GetLayer()\nfeat = l.GetNextFeature()\n\ndrc_granules = granule_client.query(start_date=\"2015-09-01\", bounding_box=feat.geometry)\n```\n\n### Downloading\n\nThe return value of a query with the GranuleAPI is a generator. This avoids calling the MODIS API more than is immediately needed if more than one page of results is found. \n\nIterating through a generator consumes it. If you need to reuse the values, convert it to a list with `list(granules)`.\n\n```python\nGranuleHandler.download_from_granules(granules, session=session)\n\n# Files paths can be traced from the granule return values\nfile_paths = GranuleHandler.download_from_granules(granules, session=session)\n\n# Saves to current directory, use `path` to save somewhere else\nGranuleHandler.download_from_granules(granules, session=session, path=\"../Desktop\")\n```\n\n#### Multithreaded Downloads\n\nThe `threads` parameter in `GranuleHandler.download_from_granules()` specifies how many concurrent processes or threads should be used while downloading. \n\n`threads` is an integer, specifying the maximum number of concurrently running workers. \n\n* If 1 is given, no parallelism is used at all, which is useful for debugging. \n* If set to -1, all CPUs are used. \n* For `threads` below -1, (n_cpus + 1 + n_jobs) are used. For example with `threads=-2`, all CPUs but one are used.\n\n```python\nGranuleHandler.download_from_granules(nigeria_granules, modis_session=session, threads=-1)\n```\n\n#### MODIS Data Types\n\nCurrently modis_tools only supports downloading of hdf file type.\n\n## Development and Testing\n\n### Setting up a development environment\n\n- To install all production dependencies, run:\n\n  ```python\n  pip install -r requirements.txt\n  ```\n\n- To install dev-dependencies to run tests, run:\n\n  ```python\n  pip install -e .[test]\n  ```\n\n- Note that `gdal` is optionally supported as an extra dependency. This is for users who wish to use `ogr.Geometry` objects to spatially query the modis data to be retrieved. Assuming you have all the libraries installed to run gdal, you can install this dependency with:\n\n  ```python\n  pip install -e .[gdal]\n  ```\n\n- To install more than one extra dependency-set, separate them with a comma as seen in the below example. The full list of supported dependency-sets are listed under `extras_require` in setup.py:\n\n  ```python\n  pip install -e .[test,gdal]\n  ```\n\n### Testing\n\n1. All tests can be found in `./tests` with a directory structure mirroring the directory structure of the files being tested\n2. To run tests, navigate terminal to the root of this repo, and\n   1. To run only unit tests (faster) run the following:\n      `pytest -m \"not integration_test\"`\n   2. To run only integration tests (slower) run the following:\n      `pytest -m integration_test`\n   3. To run the whole test suit, run:\n      `pytest`\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fraymio/modis-tools.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modis-tools",
    "package_url": "https://pypi.org/project/modis-tools/",
    "platform": "",
    "project_url": "https://pypi.org/project/modis-tools/",
    "project_urls": {
      "Homepage": "https://github.com/fraymio/modis-tools.git"
    },
    "release_url": "https://pypi.org/project/modis-tools/1.0.0/",
    "requires_dist": [
      "requests (==2.*)",
      "pydantic (==1.*)",
      "python-dateutil (==2.*)",
      "shapely (==1.*)",
      "gdal ; extra == 'gdal'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "Tools for working with the MODIS API and MODIS data.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15122002,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14f47c2f50d049383fcb7161f6730dfc660b03a9c7553bb74798d91d625c4786",
        "md5": "2e8963f90d40f88d41d4e650f4c576a6",
        "sha256": "b0f2fecd45791fa11922e13327e3fd2f98ce7317410db0a8cf3121284fbe40c8"
      },
      "downloads": -1,
      "filename": "modis_tools-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2e8963f90d40f88d41d4e650f4c576a6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 23109,
      "upload_time": "2022-01-07T15:48:54",
      "upload_time_iso_8601": "2022-01-07T15:48:54.155942Z",
      "url": "https://files.pythonhosted.org/packages/14/f4/7c2f50d049383fcb7161f6730dfc660b03a9c7553bb74798d91d625c4786/modis_tools-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "222c65374dd07cd28eeffbc173ae55bafc82074656510ea2f4637613a5fe28b6",
        "md5": "d7d826e1e7f87cb44b6f5958ddfc8c55",
        "sha256": "8c17751c9b5474ae54c9f67df56a27d8b7caa3782022fdf6f241fd9157432d04"
      },
      "downloads": -1,
      "filename": "modis_tools-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d7d826e1e7f87cb44b6f5958ddfc8c55",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 22510,
      "upload_time": "2022-01-07T15:48:55",
      "upload_time_iso_8601": "2022-01-07T15:48:55.761059Z",
      "url": "https://files.pythonhosted.org/packages/22/2c/65374dd07cd28eeffbc173ae55bafc82074656510ea2f4637613a5fe28b6/modis_tools-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}