{
  "info": {
    "author": "Christian Kreuzberger",
    "author_email": "ckreuzberger@anexia-it.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django Rest Password Reset\n\n[![PyPI version](https://badge.fury.io/py/django-rest-passwordreset.svg)](https://badge.fury.io/py/django-rest-passwordreset)\n[![Build Status](https://travis-ci.org/anx-ckreuzberger/django-rest-passwordreset.svg?branch=master)](https://travis-ci.org/anx-ckreuzberger/django-rest-passwordreset)\n\nThis python package provides a simple password reset strategy for django rest framework, where users can request password \nreset tokens via their registered e-mail address.\n\nThe main idea behind this package is to not make any assumptions about how the token is delivered to the end-user (e-mail, text-message, etc...).\nInstead, this package provides a signal that can be reacted on (e.g., by sending an e-mail or a text message).\n\nThis package basically provides two REST endpoints:\n\n* Request a token\n* Verify (confirm) a token (and change the password)\n\n## Quickstart\n\n1. Install the package from pypi using pip:\n```bash\npip install django-rest-passwordreset\n```\n\n2. Add ``django_rest_passwordreset`` to your ``INSTALLED_APPS`` (after ``rest_framework``) within your Django settings file:\n```python\nINSTALLED_APPS = (\n    ...\n    'django.contrib.auth',\n    ...\n    'rest_framework',\n    ...\n    'django_rest_passwordreset',\n    ...\n)\n```\n\n3. This package provides two endpoints, which can be included by including ``django_rest_passwordreset.urls`` in your ``urls.py`` as follows:\n```python\nfrom django.conf.urls import url, include\n\n\nurlpatterns = [\n    ...\n    url(r'^api/password_reset/', include('django_rest_passwordreset.urls', namespace='password_reset')),\n    ...\n]    \n```\n**Note**: You can adapt the url to your needs.\n\n### Endpoints\n\nThe following endpoints are provided:\n\n * `POST ${API_URL}/reset_password/` - request a reset password token by using the ``email`` parameter\n * `POST ${API_URL}/reset_password/confirm/` - using a valid ``token``, the users password is set to the provided ``password``\n \nwhere `${API_URL}/` is the url specified in your *urls.py* (e.g., `api/password_reset/`)\n \n\n### Configuration / Settings\n\nThe following settings can be set in Djangos ``settings.py`` file:\n\n* `DJANGO_REST_MULTITOKENAUTH_RESET_TOKEN_EXPIRY_TIME` - time in hours about how long the token is active (Default: 24)\n\n  **Please note**: expired tokens are automatically cleared based on this setting in every call of ``ResetPasswordRequestToken.post``.\n \n### Signals\n\n* ``reset_password_token_created(sender, instance, reset_password_token)`` Fired when a reset password token is generated\n* ``pre_password_reset(user)`` - fired just before a password is being reset\n* ``post_password_reset(user)`` - fired after a password has been reset\n\n### Example for sending an e-mail\n\n1. Create two new django templates: `email/user_reset_password.html` and `email/user_reset_password.txt`. Those templates will contain the e-mail message sent to the user, aswell as the password reset link (or token).\nWithin the templates, you can access the following context variables: `current_user`, `username`, `email`, `reset_password_url`. Feel free to adapt this to your needs.\n\n2. Add the following code, which contains a Django Signal, to your application (see [this part of the django documentation](https://docs.djangoproject.com/en/1.11/topics/signals/#connecting-receiver-functions) for more information on where to put signals).\n```python\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.dispatch import receiver\nfrom django.template.loader import render_to_string\nfrom django.urls import reverse\n\nfrom django_rest_passwordreset.signals import reset_password_token_created\n\n\n@receiver(reset_password_token_created)\ndef password_reset_token_created(sender, instance, reset_password_token, *args, **kwargs):\n    \"\"\"\n    Handles password reset tokens\n    When a token is created, an e-mail needs to be sent to the user\n    :param sender: View Class that sent the signal\n    :param instance: View Instance that sent the signal\n    :param reset_password_token: Token Model Object\n    :param args:\n    :param kwargs:\n    :return:\n    \"\"\"\n    # send an e-mail to the user\n    context = {\n        'current_user': reset_password_token.user,\n        'username': reset_password_token.user.username,\n        'email': reset_password_token.user.email,\n        'reset_password_url': \"{}?token={}\".format(reverse('password_reset:reset-password-request'), reset_password_token.key)\n    }\n\n    # render email text\n    email_html_message = render_to_string('email/user_reset_password.html', context)\n    email_plaintext_message = render_to_string('email/user_reset_password.txt', context)\n\n    msg = EmailMultiAlternatives(\n        # title:\n        \"Password Reset for {title}\".format(title=\"Some website title\"),\n        # message:\n        email_plaintext_message,\n        # from:\n        \"noreply@somehost.local\",\n        # to:\n        [reset_password_token.user.email]\n    )\n    msg.attach_alternative(email_html_message, \"text/html\")\n    msg.send()\n\n```\n\n3. You should now be able to use the endpoints to request a password reset token via your e-mail address. \nIf you want to test this locally, I recommend using some kind of fake mailserver (such as maildump).\n\n\n## Custom Token Generator\n\nBy default, a random string token of length 10 to 50 is generated using the ``RandomStringTokenGenerator`` class.\nThis library offers a possibility to configure the params of ``RandomStringTokenGenerator`` as well as switch to\nanother token generator, e.g. ``RandomNumberTokenGenerator``. You can also generate your own token generator class.\n\nYou can change that by adding \n```python\nDJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {\n    \"CLASS\": ...,\n    \"OPTIONS\": {...}\n}\n```\ninto Django settings.py file.\n\n\n### RandomStringTokenGenerator\nThis is the default configuration. \n```python\nDJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_passwordreset.tokens.RandomStringTokenGenerator\"\n}\n```\n\nYou can configure the length as follows:\n```python\nDJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_passwordreset.tokens.RandomStringTokenGenerator\",\n    \"OPTIONS\": {\n        \"min_length\": 20,\n        \"max_lenght\": 30\n    }\n}\n```\n   \n\n### RandomNumberTokenGenerator\n```python\nDJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_passwordreset.tokens.RandomNumberTokenGenerator\"\n}\n```\n\nYou can configure the minimum and maximum number as follows:\n```python\nDJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_passwordreset.tokens.RandomNumberTokenGenerator\",\n    \"OPTIONS\": {\n        \"min_number\": 1500,\n        \"max_number\": 9999\n    }\n}\n```\n\n\n### Write your own Token Generator\n\nPlease see [token_configuration/django_rest_passwordreset/tokens.py](token_configuration/django_rest_passwordreset/tokens.py) for example implementation of number and string token generator.\n\nThe basic idea is to create a new class that inherits from BaseTokenGenerator, takes arbitrary arguments (`args` and `kwargs`)\nin the ``__init__`` function as well as implementing a `generate_token` function.\n\n```python\nfrom django_rest_passwordreset.tokens import BaseTokenGenerator\n\n\nclass RandomStringTokenGenerator(BaseTokenGenerator):\n    \"\"\"\n    Generates a random string with min and max length using os.urandom and binascii.hexlify\n    \"\"\"\n\n    def __init__(self, min_length=10, max_length=50, *args, **kwargs):\n        self.min_length = min_length\n        self.max_length = max_length\n\n    def generate_token(self, *args, **kwargs):\n        \"\"\" generates a pseudo random code using os.urandom and binascii.hexlify \"\"\"\n        # determine the length based on min_length and max_length\n        length = random.randint(self.min_length, self.max_length)\n\n        # generate the token using os.urandom and hexlify\n        return binascii.hexlify(\n            os.urandom(self.max_length)\n        ).decode()[0:length]\n```\n\n\n## Compatibility Matrix\n\nThis library should be compatible with the latest Django and Django Rest Framework Versions. For reference, here is\na matrix showing the guaranteed and tested compatibility.\n\ndjango-rest-passwordreset Version | Django Versions | Django Rest Framework Versions\n--------------------------------- | ----------------| ------------------------------\n0.9.7 | 1.8, 1.11, 2.0, 2.1 | 3.6 - 3.9\n1.0 (WIP) | 1.11, 2.0, 2.2 | 3.6 - 3.9\n\n## Documentation / Browsable API\n\nThis package supports the [DRF auto-generated documentation](https://www.django-rest-framework.org/topics/documenting-your-api/) (via `coreapi`) as well as the [DRF browsable API](https://www.django-rest-framework.org/topics/browsable-api/).\n\n![drf_browsable_email_validation](docs/browsable_api_email_validation.png \"Browsable API E-Mail Validation\")\n\n![drf_browsable_password_validation](docs/browsable_api_password_validation.png \"Browsable API E-Mail Validation\")\n\n![coreapi_docs](docs/coreapi_docs.png \"Core API Docs\")\n\n\n## Known Issues\n\n### Django 2.1 Migrations - Multiple Primary keys for table ...\nDjango 2.1 introduced a breaking change for migrations (see [Django Issue #29790](https://code.djangoproject.com/ticket/29790)). We therefore had to rewrite the migration [0002_pk_migration.py](django_rest_passwordreset/migrations/0002_pk_migration.py) such that it covers Django versions before (`<`) 2.1 and later (`>=`) 2.1.\n\nSome information is written down in Issue #8.\n\n## Contributions\n\nThis library tries to follow the unix philosophy of \"do one thing and do it well\" (which is providing a basic password reset endpoint for Django Rest Framework). Contributions are welcome in the form of pull requests and issues! If you create a pull request, please make sure that you are not introducing breaking changes. \n\n## Tests\n\nSee folder [tests/](tests/). Basically, all endpoints are covered with multiple\nunit tests.\n\nUse this code snippet to run tests:\n```bash\npip install -r requirements_test.txt\npython setup.py install\ncd tests\npython manage.py test\n```\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anx-ckreuzberger/django-rest-passwordreset",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-passwordreset",
    "package_url": "https://pypi.org/project/django-rest-passwordreset/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-passwordreset/",
    "project_urls": {
      "Homepage": "https://github.com/anx-ckreuzberger/django-rest-passwordreset"
    },
    "release_url": "https://pypi.org/project/django-rest-passwordreset/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An extension of django rest framework, providing a configurable password reset strategy",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15104653,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34f58bf32378a9183bbef9f195d4c4fb2a4ce97b2e56b1f88214434a2036bb64",
        "md5": "d6d77c9e730096f4d1d679735a3fc74c",
        "sha256": "abd27349cd5702d3704f87412a2cd51630b5da95a3ffde01f123e586d7d46b5a"
      },
      "downloads": -1,
      "filename": "django-rest-passwordreset-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d6d77c9e730096f4d1d679735a3fc74c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 200303,
      "upload_time": "2019-04-15T07:13:24",
      "upload_time_iso_8601": "2019-04-15T07:13:24.798104Z",
      "url": "https://files.pythonhosted.org/packages/34/f5/8bf32378a9183bbef9f195d4c4fb2a4ce97b2e56b1f88214434a2036bb64/django-rest-passwordreset-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}