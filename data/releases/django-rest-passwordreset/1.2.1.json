{
  "info": {
    "author": "Christian Kreuzberger",
    "author_email": "ckreuzberger@anexia-it.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django Rest Password Reset\n\n[![PyPI version](https://img.shields.io/pypi/v/django-rest-passwordreset.svg)](https://pypi.org/project/django-rest-passwordreset/)\n[![build-and-test actions status](https://github.com/anexia-it/django-rest-passwordreset/workflows/build-and-test/badge.svg)](https://github.com/anexia-it/django-rest-passwordreset/actions)\n[![Codecov](https://img.shields.io/codecov/c/gh/anexia-it/django-rest-passwordreset)](https://codecov.io/gh/anexia-it/django-rest-passwordreset)\n\nThis python package provides a simple password reset strategy for django rest framework, where users can request password \nreset tokens via their registered e-mail address.\n\nThe main idea behind this package is to not make any assumptions about how the token is delivered to the end-user (e-mail, text-message, etc...).\nInstead, this package provides a signal that can be reacted on (e.g., by sending an e-mail or a text message).\n\nThis package basically provides two REST endpoints:\n\n* Request a token\n* Verify (confirm) a token (and change the password)\n\n## Quickstart\n\n1. Install the package from pypi using pip:\n```bash\npip install django-rest-passwordreset\n```\n\n2. Add ``django_rest_passwordreset`` to your ``INSTALLED_APPS`` (after ``rest_framework``) within your Django settings file:\n```python\nINSTALLED_APPS = (\n    ...\n    'django.contrib.auth',\n    ...\n    'rest_framework',\n    ...\n    'django_rest_passwordreset',\n    ...\n)\n```\n\n3. This package stores tokens in a separate database table (see [django_rest_passwordreset/models.py](django_rest_passwordreset/models.py)). Therefore, you have to run django migrations:\n```bash\npython manage.py migrate\n```\n\n4. This package provides three endpoints, which can be included by including ``django_rest_passwordreset.urls`` in your ``urls.py`` as follows:\n```python\nfrom django.urls import path, include\n\nurlpatterns = [\n    ...\n    path(r'^api/password_reset/', include('django_rest_passwordreset.urls', namespace='password_reset')),\n    ...\n]\n```\n**Note**: You can adapt the URL to your needs.\n\n### Endpoints\n\nThe following endpoints are provided:\n\n * `POST ${API_URL}/` - request a reset password token by using the ``email`` parameter\n * `POST ${API_URL}/confirm/` - using a valid ``token``, the users password is set to the provided ``password``\n * `POST ${API_URL}/validate_token/` - will return a 200 if a given ``token`` is valid\n\nwhere `${API_URL}/` is the url specified in your *urls.py* (e.g., `api/password_reset/` as in the example above)\n\n\n### Signals\n\n* ``reset_password_token_created(sender, instance, reset_password_token)`` Fired when a reset password token is generated\n* ``pre_password_reset(sender, user)`` - fired just before a password is being reset\n* ``post_password_reset(sender, user)`` - fired after a password has been reset\n\n### Example for sending an e-mail\n\n1. Create two new django templates: `email/user_reset_password.html` and `email/user_reset_password.txt`. Those templates will contain the e-mail message sent to the user, aswell as the password reset link (or token).\nWithin the templates, you can access the following context variables: `current_user`, `username`, `email`, `reset_password_url`. Feel free to adapt this to your needs.\n\n2. Add the following code, which contains a Django Signal Receiver (`@receiver(...)`), to your application. Take care where to put this code, as it needs to be executed by the python interpreter (see the section *The `reset_password_token_created` signal is not fired* below, aswell as [this part of the django documentation](https://docs.djangoproject.com/en/1.11/topics/signals/#connecting-receiver-functions) and [How to Create Django Signals Tutorial](https://simpleisbetterthancomplex.com/tutorial/2016/07/28/how-to-create-django-signals.html) for more information).\n```python\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.dispatch import receiver\nfrom django.template.loader import render_to_string\nfrom django.urls import reverse\n\nfrom django_rest_passwordreset.signals import reset_password_token_created\n\n\n@receiver(reset_password_token_created)\ndef password_reset_token_created(sender, instance, reset_password_token, *args, **kwargs):\n    \"\"\"\n    Handles password reset tokens\n    When a token is created, an e-mail needs to be sent to the user\n    :param sender: View Class that sent the signal\n    :param instance: View Instance that sent the signal\n    :param reset_password_token: Token Model Object\n    :param args:\n    :param kwargs:\n    :return:\n    \"\"\"\n    # send an e-mail to the user\n    context = {\n        'current_user': reset_password_token.user,\n        'username': reset_password_token.user.username,\n        'email': reset_password_token.user.email,\n        'reset_password_url': \"{}?token={}\".format(\n            instance.request.build_absolute_uri(reverse('password_reset:reset-password-confirm')),\n            reset_password_token.key)\n    }\n\n    # render email text\n    email_html_message = render_to_string('email/user_reset_password.html', context)\n    email_plaintext_message = render_to_string('email/user_reset_password.txt', context)\n\n    msg = EmailMultiAlternatives(\n        # title:\n        \"Password Reset for {title}\".format(title=\"Some website title\"),\n        # message:\n        email_plaintext_message,\n        # from:\n        \"noreply@somehost.local\",\n        # to:\n        [reset_password_token.user.email]\n    )\n    msg.attach_alternative(email_html_message, \"text/html\")\n    msg.send()\n\n```\n\n3. You should now be able to use the endpoints to request a password reset token via your e-mail address. \nIf you want to test this locally, I recommend using some kind of fake mailserver (such as maildump).\n\n\n\n# Configuration / Settings\n\nThe following settings can be set in Django ``settings.py`` file:\n\n* `DJANGO_REST_MULTITOKENAUTH_RESET_TOKEN_EXPIRY_TIME` - time in hours about how long the token is active (Default: 24)\n\n  **Please note**: expired tokens are automatically cleared based on this setting in every call of ``ResetPasswordRequestToken.post``.\n\n* `DJANGO_REST_PASSWORDRESET_NO_INFORMATION_LEAKAGE` - will cause a 200 to be returned on `POST ${API_URL}/reset_password/`\n  even if the user doesn't exist in the databse (Default: False) \n\n* `DJANGO_REST_MULTITOKENAUTH_REQUIRE_USABLE_PASSWORD` - allows password reset for a user that does not \n  [have a usable password](https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#django.contrib.auth.models.User.has_usable_password) (Default: True)\n\n## Custom Email Lookup\n\nBy default, `email` lookup is used to find the user instance. You can change that by adding \n```python\nDJANGO_REST_LOOKUP_FIELD = 'custom_email_field'\n```\ninto Django settings.py file.\n\n## Custom Remote IP Address and User Agent Header Lookup\n\nIf your setup demands that the IP adress of the user is in another header (e.g., 'X-Forwarded-For'), you can configure that (using Django Request Headers):\n\n```python\nDJANGO_REST_PASSWORDRESET_IP_ADDRESS_HEADER = 'HTTP_X_FORWARDED_FOR'\n```\n\nThe same is true for the user agent:\n\n```python\nHTTP_USER_AGENT_HEADER = 'HTTP_USER_AGENT'\n```\n\n## Custom Token Generator\n\nBy default, a random string token of length 10 to 50 is generated using the ``RandomStringTokenGenerator`` class.\nThis library offers a possibility to configure the params of ``RandomStringTokenGenerator`` as well as switch to\nanother token generator, e.g. ``RandomNumberTokenGenerator``. You can also generate your own token generator class.\n\nYou can change that by adding \n```python\nDJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {\n    \"CLASS\": ...,\n    \"OPTIONS\": {...}\n}\n```\ninto Django settings.py file.\n\n\n### RandomStringTokenGenerator\nThis is the default configuration. \n```python\nDJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_passwordreset.tokens.RandomStringTokenGenerator\"\n}\n```\n\nYou can configure the length as follows:\n```python\nDJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_passwordreset.tokens.RandomStringTokenGenerator\",\n    \"OPTIONS\": {\n        \"min_length\": 20,\n        \"max_length\": 30\n    }\n}\n```\n\nIt uses `os.urandom()` to generate a good random string.\n\n\n### RandomNumberTokenGenerator\n```python\nDJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_passwordreset.tokens.RandomNumberTokenGenerator\"\n}\n```\n\nYou can configure the minimum and maximum number as follows:\n```python\nDJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_passwordreset.tokens.RandomNumberTokenGenerator\",\n    \"OPTIONS\": {\n        \"min_number\": 1500,\n        \"max_number\": 9999\n    }\n}\n```\n\nIt uses `random.SystemRandom().randint()` to generate a good random number.\n\n\n### Write your own Token Generator\n\nPlease see [token_configuration/django_rest_passwordreset/tokens.py](token_configuration/django_rest_passwordreset/tokens.py) for example implementation of number and string token generator.\n\nThe basic idea is to create a new class that inherits from BaseTokenGenerator, takes arbitrary arguments (`args` and `kwargs`)\nin the ``__init__`` function as well as implementing a `generate_token` function.\n\n```python\nfrom django_rest_passwordreset.tokens import BaseTokenGenerator\n\n\nclass RandomStringTokenGenerator(BaseTokenGenerator):\n    \"\"\"\n    Generates a random string with min and max length using os.urandom and binascii.hexlify\n    \"\"\"\n\n    def __init__(self, min_length=10, max_length=50, *args, **kwargs):\n        self.min_length = min_length\n        self.max_length = max_length\n\n    def generate_token(self, *args, **kwargs):\n        \"\"\" generates a pseudo random code using os.urandom and binascii.hexlify \"\"\"\n        # determine the length based on min_length and max_length\n        length = random.randint(self.min_length, self.max_length)\n\n        # generate the token using os.urandom and hexlify\n        return binascii.hexlify(\n            os.urandom(self.max_length)\n        ).decode()[0:length]\n```\n\n\n## Compatibility Matrix\n\nThis library should be compatible with the latest Django and Django Rest Framework Versions. For reference, here is\na matrix showing the guaranteed and tested compatibility.\n\ndjango-rest-passwordreset Version | Django Versions | Django Rest Framework Versions | Python |\n--------------------------------- | --------------- | ------------------------------ | ------ |\n0.9.7 | 1.8, 1.11, 2.0, 2.1 | 3.6 - 3.9 | 2.7\n1.0 | 1.11, 2.0, 2.2 | 3.6 - 3.9 | 2.7\n1.1 | 1.11, 2.2 | 3.6 - 3.9 | 2.7\n1.2 | 2.2, 3.0, 3.1 | 3.10, 3.11 | 3.5 - 3.8\n\n\n## Documentation / Browsable API\n\nThis package supports the [DRF auto-generated documentation](https://www.django-rest-framework.org/topics/documenting-your-api/) (via `coreapi`) as well as the [DRF browsable API](https://www.django-rest-framework.org/topics/browsable-api/).\n\nTo add the endpoints to the browsable API, you can use a helper function in your `urls.py` file:\n```python\nfrom rest_framework.routers import DefaultRouter\nfrom django_rest_passwordreset.urls import add_reset_password_urls_to_router\n\nrouter = DefaultRouter()\nadd_reset_password_urls_to_router(router, base_path='api/auth/passwordreset')\n```\n\nAlternatively you can import the ViewSets manually and customize the routes for your setup:\n```python\nfrom rest_framework.routers import DefaultRouter\nfrom django_rest_passwordreset.views import ResetPasswordValidateTokenViewSet, ResetPasswordConfirmViewSet, \\\n    ResetPasswordRequestTokenViewSet\n\nrouter = DefaultRouter()\nrouter.register(\n    r'api/auth/passwordreset/validate_token',\n    ResetPasswordValidateTokenViewSet,\n    basename='reset-password-validate'\n)\nrouter.register(\n    r'api/auth/passwordreset/confirm',\n    ResetPasswordConfirmViewSet,\n    basename='reset-password-confirm'\n)\nrouter.register(\n    r'api/auth/passwordreset/',\n    ResetPasswordRequestTokenViewSet,\n    basename='reset-password-request'\n)\n```\n\n![drf_browsable_email_validation](docs/browsable_api_email_validation.png \"Browsable API E-Mail Validation\")\n\n![drf_browsable_password_validation](docs/browsable_api_password_validation.png \"Browsable API E-Mail Validation\")\n\n![coreapi_docs](docs/coreapi_docs.png \"Core API Docs\")\n\n\n## Known Issues / FAQ\n\n### Django 2.1 Migrations - Multiple Primary keys for table ...\nDjango 2.1 introduced a breaking change for migrations (see [Django Issue #29790](https://code.djangoproject.com/ticket/29790)). We therefore had to rewrite the migration [0002_pk_migration.py](django_rest_passwordreset/migrations/0002_pk_migration.py) such that it covers Django versions before (`<`) 2.1 and later (`>=`) 2.1.\n\nSome information is written down in Issue #8.\n\n### The `reset_password_token_created` signal is not fired\nYou need to make sure that the code with `@receiver(reset_password_token_created)` is executed by the python interpreter. To ensure this, you have two options:\n\n1. Put the code at a place that is automatically loaded by Django (e.g., models.py, views.py), or\n\n2. Import the file that contains the signal within your app.py `ready` function:\n\n  *some_app/signals.py*\n  ```python\n  from django.core.mail import EmailMultiAlternatives\n  from django.dispatch import receiver\n  from django.template.loader import render_to_string\n  from django.urls import reverse\n\n  from django_rest_passwordreset.signals import reset_password_token_created\n\n\n  @receiver(reset_password_token_created)\n  def password_reset_token_created(sender, instance, reset_password_token, *args, **kwargs):\n      # ...\n  ```\n\n  *some_app/app.py*\n  ```python\n  from django.apps import AppConfig\n\n  class SomeAppConfig(AppConfig):\n      name = 'your_django_project.some_app'\n      verbose_name = 'Some App'\n\n      def ready(self):\n          import your_django_project.some_app.signals  # noqa\n  ```\n\n  *some_app/__init__.py*\n  ```python\n  default_app_config = 'your_django_project.some_app.SomeAppConfig'\n  ```\n\n### MongoDB not working\n\nApparently, the following piece of code in the Django Model prevents MongodB from working:\n\n```python\n id = models.AutoField( \n     primary_key=True \n ) \n```\n\nSee issue #49 for details.\n\n## Contributions\n\nThis library tries to follow the unix philosophy of \"do one thing and do it well\" (which is providing a basic password reset endpoint for Django Rest Framework). Contributions are welcome in the form of pull requests and issues! If you create a pull request, please make sure that you are not introducing breaking changes. \n\n## Tests\n\nSee folder [tests/](tests/). Basically, all endpoints are covered with multiple\nunit tests.\n\nUse this code snippet to run tests:\n```bash\npython setup.py install\ncd tests\npython manage.py test\n```\n\n## Release on PyPi\n\nTo release this package on pypi, the following steps are used:\n\n```bash\nrm -rf dist/ build/\npython setup.py sdist\ntwine upload dist/*\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anx-ckreuzberger/django-rest-passwordreset",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-passwordreset",
    "package_url": "https://pypi.org/project/django-rest-passwordreset/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-passwordreset/",
    "project_urls": {
      "Homepage": "https://github.com/anx-ckreuzberger/django-rest-passwordreset"
    },
    "release_url": "https://pypi.org/project/django-rest-passwordreset/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An extension of django rest framework, providing a configurable password reset strategy",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15104653,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcef1ec4b10937ca8185f369ae8085b85c295e24415752bd8967c12b1a2eba78",
        "md5": "999b3a985a240416d97c801565daca4b",
        "sha256": "6be5d34b334cae4e381336fa32987e48276eec976aa454bb0ef428438eba3d44"
      },
      "downloads": -1,
      "filename": "django_rest_passwordreset-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "999b3a985a240416d97c801565daca4b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25697,
      "upload_time": "2021-10-22T14:43:39",
      "upload_time_iso_8601": "2021-10-22T14:43:39.581233Z",
      "url": "https://files.pythonhosted.org/packages/bc/ef/1ec4b10937ca8185f369ae8085b85c295e24415752bd8967c12b1a2eba78/django_rest_passwordreset-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a4ce9a8f10d8c345c8d1f883ff7546af0e27f95d29b6000a72164a65e8fa87d",
        "md5": "9c6ee24ba76cea2cfc56c0e15b108774",
        "sha256": "9762f337983b33f66b9ec95d4f19b3da8daba2b7d22ac005ba114ddda98aae38"
      },
      "downloads": -1,
      "filename": "django-rest-passwordreset-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9c6ee24ba76cea2cfc56c0e15b108774",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 206662,
      "upload_time": "2021-10-22T14:43:40",
      "upload_time_iso_8601": "2021-10-22T14:43:40.703798Z",
      "url": "https://files.pythonhosted.org/packages/3a/4c/e9a8f10d8c345c8d1f883ff7546af0e27f95d29b6000a72164a65e8fa87d/django-rest-passwordreset-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}