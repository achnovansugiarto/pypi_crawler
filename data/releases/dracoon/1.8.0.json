{
  "info": {
    "author": "Octavio Simone",
    "author_email": "octsim@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n[![dracoon tests](https://github.com/unbekanntes-pferd/dracoon-python-api/actions/workflows/testing.yml/badge.svg)](https://github.com/unbekanntes-pferd/dracoon-python-api/actions/workflows/testing.yml)\n  \n  \n  <h3 align=\"center\">DRACOON-PYTHON-API</h3>\n\n  <p align=\"center\">\n    Python connector to DRACOON API\n    <br />\n    <a href=\"https://github.com/unbekanntes-pferd/DRACOON-PYTHON-API\"><strong>Explore the docs »</strong></a>\n    <br />\n    <a href=\"https://github.com/unbekanntes-pferd/DRACOON-PYTHON-API/issues\">Report Bug</a>\n  </p>\n</p>\n\n<!-- TABLE OF CONTENTS -->\n## Table of Contents\n\n* [About the Project](#about-the-project)\n  * [Built With](#built-with)\n* [Getting Started](#getting-started)\n  * [Prerequisites](#prerequisites)\n  * [Installation](#installation)\n* [Usage](#usage)\n* [Roadmap](#roadmap)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n\n<!-- ABOUT THE PROJECT -->\n## About The Project\n__Disclaimer: this is an unofficial repo and is not supported by DRACOON__<br>\nThis package provides a wrapper for the DRACOON API including full crypto support. \nDRACOON is a cloud storage product / service (SaaS) by DRACOON GmbH (http://dracoon.com). \nDRACOON API documentation can be found here (Swagger UI):\n\nhttps://dracoon.team/api/\n\n### Built With\n\n* [Python 3.9.0](https://www.python.org/)\n* [httpx module](https://www.python-httpx.org/)\n* [cryptography](https://cryptography.io/en/latest/)\n* [pydantic](https://pydantic-docs.helpmanual.io/)\n\n[List all dependencies](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/requirements.txt)\n\n<!-- GETTING STARTED -->\n## Getting Started\n\nTo get started, create a virtual environment in Python and install the dracoon package:\n```bash\nvirtualenv <DIR>\nsource <DIR>/bin/activate \npython3 -m pip install dracoon\n```\n\n### Prerequisites\n\nYou will need a working Python 3 installation - check your version:\n* Python\n```bash\npython3 --version\n```\n\n### Installation\n\n1. Install the package from PyPi\n```bash\npython3 -m pip install dracoon\n```\n\n<!-- USAGE EXAMPLES -->\n## Usage\n### Import DRACOON\n```Python\nfrom dracoon import DRACOON\n```\n\nThis is the main class and contains all other adapters to access DRACOON API endpoints. \nThe object contains a client (DRACOONClient) which handles all http connections via httpx (async). \n\n\n### Object creation\n```Python\ndracoon = DRACOON(base_url, client_id, client_secret)\n```\n\n* _client_id_: please register your OAuth app or use dracoon_legacy_scripting (default)\n* _client_secret_: please register your OAuth app or use dracoon_legacy_scripting - secret is an empty string (no secret)\n* _base_url_: Your DRACOON URL instance (e.g. https://dracoon.team)\n\n#### Optional settings\nYou can additionally configure the logs for any script using the following optional parameters:\n* _log_stream_: default is set to False – when set to True, will output the logs to console / terminal (stderr)\n* _log_level_: default is set to logging.INFO – if required, can be changed to e.g. logging.DEBUG (this will contain senstive information e.g. names of created objects!). In order to use the log level, import logging module\n* _log_file_: default is set to './dracoon.log' (based on cwd of the running script!) – you can use any path with write access to log\n* _raise_on_err_: default is set to False – if set to True, any HTTP error (4xx or higher) will raise an error and stop the script / application\n\nFull parameters:\n```Python\ndracoon = DRACOON(base_url, client_id, client_secret, log_level, log_stream, log_file, raise_on_err)\n```\n\nA note to raising on errors: You can set the raise_on_err flag individually for any adapter method (e.g. nodes.get_nodes(raise_on_err=True)) to ensure the app breaks in case an error occurs. \n\n\n### Authentication\n\n#### Password flow\n\n```Python\nconnection = await dracoon.connect(OAuth2ConnectionType.password_flow, username, password)\n```\n\nThe connection result contains the tokens (access and refresh, including validity).\n\nYou need pass one of the supported OAuth2 connection types. \nTo access the enums, import OAuth2ConnectionType:\n\n```Python\nfrom dracoon import DRACOON, OAuth2Connectiontype\n```\n\nPlease note: you can only authenticate if OAuth app is correctly configured. Only local accounts (including Active Directory) can be used via password flow.\nFull example: [Login via password flow](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/login_password_flow.py)\n\n#### Authorization code flow\n```Python\nprint(dracoon.get_code_url())\nauth_code = input('Enter auth code:')\nconnection = await dracoon.connect(auth_code=auth_code)\n```\nIf you do not provide a connection type, the default will be auth code.\nYou should prompt (or fetch) the auth code via the respective url.\nFull example: [Login via auth code](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/login_auth_code_flow.py)\n\nPlease note: you can only authenticate if OAuth app is correctly configured. You will need a custom app with authorization code flow enabled and you will need to set your redirect uri to https://your.domain.com/oauth/callback for CLI usage (default). Otherwise, use a custom redirect uri by providing it as a parameter when creating a DRACOON instance:\n\n```Python\nDRACOON(base_url=base_url, client_id=client_id, client_secret=client_secret, redirect_uri='x-custom-handler://your.handler')\n```\n\n#### Test connection\n```Python\nconnected = dracoon.test_connection()\n```\nThis will provide a true / false result depending on the connection.\nIf no flag is set, this will just check if the access token is valid based on the token validity.\nIn order to test the connection with a request, use the test flag:\n\n```Python\nconnected = dracoon.test_connection(test=True)\n```\n\nAn authenticated ping is used to verify the tokens are valid.\n\n#### Refresh token\n\nAll methods check for access token validity and fetch new tokens, if the access tokens expire.\nTherefore it should not be necessary to manually request it.\n\nYou can manually use the refresh token auth as follows, if you have an authenticated instance:\n\n```Python\nconnection = await dracoon.client.connect(OAuth2ConnectionType.refresh_token)\n```\n\nEvery connect process will update the connection.\n\nIn order to securely store a refresh token, you can access the connection:\n\n```Python\nrefresh_token = dracoon.connection.refresh_token\n```\n\nYou can then create a new authenticated object like this:\n\n```Python\nconnection = await dracoon.connect(connection_type=OAuth2ConnectionType.refresh_token, refresh_token=xxxxx)\n```\n\n\n\n#### Log out\n```Python\nawait dracoon.logout()\n```\nThis will revoke both access and refresh tokens.\n\n\n### Send requests\n\n1. You can access specific API endpoints by accessing the related adapter, e.g. for users, once you have connected:\n\n```Python\nresult = await dracoon.users.get_users()\n```\n\nPlease note: \n* GET requests are limited to returning 500 items. Therefore all such requests contain an offset parameter (default is 0)\n* Providing a filter or sorting is optional - see API documentation and examples on usage – filter, sort or any other query parameter can be passed as parameter in any method\n* Raising on errors: Default is set to False – if needed, you can use the raise_on_err flag to stop for responses with HTTP status code 4xx or higher\n* If you do not connect the client, the adapters are not instantiated and \ncannot be accessed!\n* All (!) calls are async methods and need to be awaited\n\nAvailable adapters:\n\n```Python\ndracoon.config  # config API including webhooks\ndracoon.users  # users management\ndracoon.groups # groups management\ndracoon.user # user account and keypair setup\ndracoon.nodes # nodes (up- and download including S3 direct up)\ndracoon.shares # shares and file requests\ndracoon.uploads # upload API\ndracoon.reports # new reporting API\ndracoon.eventlog # old eventlog API\n```\n\n\n2. This package contains type hints and includes models for all payloads and responses (updates and create payloads).\nTo faciliate compliant object creation, there are several helper methods which can be found via make_, e.g.:\n\n```Python\nroom = dracoon.nodes.make_room(...)\n```\n\nThis helps finding the right parameters and building objects that are compliant with the DRACOON models.\n\n#### Aynchronous requests\n\nWith httpx this package supports full async request handling. This means all methods are coroutines which can be awaited.\nYou can use any runtime supported by httpx, e.g. asyncio (which comes with Python3).\n\nIn order to send requests asynchronously, you can use `asyncio.gather()` – example:\n\n```Python\nuser1_res = dracoon.users.create_user(user1)\nuser2_res = dracoon.users.create_user(user2)\nuser3_res = dracoon.users.create_user(user3)\n...\n\nusers = await asyncio.gather(user1_res, user2_res, user3_res, ...)\n\n```\n\nThe result is completely typed and returns a tuple with the responses in the order you sent the request:\nFor users[0] you receive user_1_res and so on.\n\n**Caution:** It is not recommended to use massive async requests for creating objects (e.g. creating rooms) or permissions based operations, as this might cause unexpected behaviour / errors.\n\nFor these cases, use small batches (e.g. 2 - 3 requests) to process requests faster without compromising the DRACOON API.\n\nExample for batches:\n\n```Python\nroom1_res = dracoon.nodes_create_room(room1)\nroom2_res = dracoon.nodes_create_room(room2)\nroom3_res = dracoon.nodes_create_room(room3)\n\n...\n\nrooms = await asyncio.gather(room1_res, room2_res, room3_res, ...)\n```\n\nYou can additionally use a helper to create an iterator with a given batch size:\n\n```Python\nrooms_reqs = [dracoon.nodes.create_room(room) for room in rooms]\n\n# will process 10 requests concurrently \nfor reqs in dracoon.batch_process(coro_list=room_reqs, batch_size=10):\n  await asyncio.gather(*reqs)\n\n...\n\nrooms = await asyncio.gather(room1_res, room2_res, room3_res, ...)\n```\n\n## Cryptography\n\nDRACOON cryptography is fully supported by the package. In order to use it, import the relevant functions or en- and decryptors:\n\n```Python\nfrom dracoon.crypto import create_plain_userkeypair\nfrom dracoon.crypto import create_file_key\n```\n\n### Create a new keypair\n\nThe account adapter (user) includes a method to set a new keypair:\n\n```Python\ndracoon.user.set_keypair(secret)\n\n```\nA new keypair will be generated (4096bit RSA asymmetric).\nPrior to setting a new keypair you always need to delete the old one!\nPlease note: Deleting a keypair can cause data loss.\n\n### Getting your (plain) keypair\n\nIn order to work with encrypted rooms you will need to access your keypair:\n\n```Python\nawait dracoon.get_keypair(secret=secret)\n\n```\nThis method of the main API wrapper will accept a secret (that you need to pass or prompt) returns the plain keypair and stores in in \nthe client for the current session.\n\n\n### En- and decode on the fly (in memory)\n\nFor smaller payload you can directly use the functions returning either\nplain or encrypted bytes like this:\n\n```Python\nplain_bytes = decrypt_bytes(enc_data, plain_file_key)\nenc_bytes = encrypt_bytes(plain_data, plain_file_key)\n\n```\n\n### Chunking\n\nFor larger files it is recommended to encrypt (and upload) in chunks.\nAn example of encryptor usage:\n\n```Python\ndracoon_cipher = FileEncryptionCipher(plain_file_key=plain_file_key)\nenc_chunk = dracoon_cipher.encode_bytes(chunk)\nlast_data, plain_file_key = dracoon_cipher.finalize()\n\n```\nYou can instantiate an encryptor / decryptor by passing a plain file key.\nWhen finalizing, you need to add the last data to the last chunk.\nThe result of the completed encryption is an updated plain_file_key with a specific tag.\n\nHint: You do not need to implement the upload process and can directly use full methods in the uploads adapter (see next chapter).\n\n## Transfers\n\n### Uploads\n\nThe nodes and uploads adapters include full methods to upload data to DRACOON and includes chunking and encryption support.\nImplementing the upload with respective calls is not recommended - please use the main wrapper (see example below) instead.\n\nHere is an example of uploading a file to an encrypted room:\n\n```Python\n\n    source = '/Example/Path/test.mov'\n    target = '/Example/Target/'\n    \n    await dracoon.upload(file_path=source, target_path=target, display_progress=True)\n    \n```\n\nThe default chunk size is 32 MB but can be passed as an option (chunksize, in bytes).\n\nIf you have the node id of the target room / folder, you can also pass this and ommit the target_path like this:\n\n```Python\n\n    await dracoon.upload(file_path=source, display_progress=True, target_parent_id=999)\n    \n```\n\nYou can also pass a custom file name, if required:\n\n```Python\n\n    await dracoon.upload(file_path=source, display_progress=True, target_parent_id=999, file_name='my_custom.pdf')\n    \n```\n\n\nThe main API wrapper includes a method that includes upload for encrypted and unencrypted files.\nFull example: [File upload](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/upload.py)\n\n### Downloads\n\nThe downloads adapter includes full methods to download data from DRACOON including chunking and encryption support.\n\nAs with uploads, the main wrapper has a method which handles encryption, keypair and file key.\nUsage:\n\n```Python\n\ntarget = '/Example/Target'\nsource = '/DEMO/testfile.bin'\nawait dracoon.download(file_path=source, target_path=target)\n\n```\n\nYou can also pass a custom file name, if required:\n\n```Python\nawait dracoon.download(file_path=source, target_path=target, file_name='custom_file.pdf')\n```\nIf a file already exists, a FileConflictError will be raised (file is not overwritten).\n\nFull example: [Download files](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/download.py)\n\n\n### Callbacks\n\nIn order to keep track of a transfer progress, both up- and download accept a callback function which accepts a value of the changed bytes and the total size of the binary once (when initializing).\n\nA function should therefore adhere to the following signature:\n\n```Python\n\nclass Callback(Protocol):\n    def __call__(self, val: int, total: int = ...) -> Any:\n        ...\n\n```\nThe function should accept the bytes as first value and accept the total as an optional parameter. \n\nA base class to build own jobs is also provided and called TransferJob - usage with inheritance (demo with tqdm as progress bar):\n\n```Python\nclass CustomTransferJob(TransferJob):\n    \"\"\" object representing a single transfer (up- / download) \"\"\"\n    progress_bar = None\n    \n    def __init__(self) -> None:\n        super().__init__()\n    \n    def update_progress(self, val: int, total: int = None) -> None:\n        self.transferred += val\n        if total is not None and self.total == 0:\n            self.total = total\n            self.progress_bar = tqdm(unit='iMB',unit_divisor=1024, total=self.total, unit_scale=True)\n        \n        if self.progress_bar:\n            self.progress_bar.update(val)\n    \n    def __del__(self):\n        if self.progress_bar:\n            self.progress_bar.close()\n            \n        \n    @property\n    def progress(self):\n        if self.total > 0:\n            return self.transferred / self.total\n        else:\n            return 0\n```\n\nA full example can be found here: \n\n[Use transfer callbacks](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/transfer_callbacks.py)\n\n## Error handling \n\nIn order to perform error handling, you can import needed errors from the errors module:\n\n```Python\nfrom dracoon.errors import DRACOONBaseError, DRACOONHttpError, HTTPNotFoundError\n\n```\n\nThe error hirarchy is like this: \n\n* DRACOONBaseError - main error class\n  * DRACOONCryptoError - error related to crypto operations\n    * individual crypto errors\n  * DRACOONHttpError - error with response status code > 3xx (4xx and above)\n    * HTTPNotFoundError - individual error named after response, e.g. 404 Not Found\n    ...\n  * DRACOONClientError - error with the client (not connected etc.)\n     * individual crypto errors\n  * DRACOONValidationError - errors validating input\n    * individual validation errors (e.g. FileConflictError)\n\nIn order to raise exceptions based on HTTP status codes you MUST provide the raise_on_err flag for the method like this:\n\n```Python\n\nawait dracoon.users.get_users(raise_on_err=True)\n\n```\n\nAlternatively you can set raise_on_err globally when creating the DRACOON object:\n\n```Python\n\ndracoon = DRACOON(base_url=base_url, client_id=client_id, client_secret=client_secret, log_level=logging.INFO, raise_on_err=True)\n\n```\n\nExample of catching errors:\n\n```Python\ntry:\n   await dracoon.users.get_user(user_id=999)\nexcept HTTPNotFoundError:\n  print(\"User not found\")\nexcept HTTPForbiddenError:\n  print(\"User is not a user manager - operation not allowed\")\nexcept DRACOONHttpError:\n  print(\"Oops, an unknown error ocurred\")\n\n```\n\n## Examples\n\n_For examples, check out the example files:_<br>\n\n* [Login via password flow](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/login_password_flow.py)\n* [Login via auth code](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/login_auth_code_flow.py)\n* [Create a user](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/create_user.py)\n* [Set up personal rooms](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/personal_rooms.py)\n* [Process pending group assignments](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/pending_assignments.py)\n* [Set a new keypair](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/create_new_keypair.py)\n* [Upload file](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/upload.py)\n* [Download files](https://github.com/unbekanntes-pferd/dracoon-python-api/blob/master/examples/download.py)\n\n<!-- ROADMAP -->\n## Roadmap\n* Add branding API \n\n<!-- LICENSE -->\n## License\n\nDistributed under the Apache License. See [LICENSE](/LICENSE) for more information.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/unbekanntes-pferd/DRACOON-PYTHON-API",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dracoon",
    "package_url": "https://pypi.org/project/dracoon/",
    "platform": null,
    "project_url": "https://pypi.org/project/dracoon/",
    "project_urls": {
      "Homepage": "https://github.com/unbekanntes-pferd/DRACOON-PYTHON-API"
    },
    "release_url": "https://pypi.org/project/dracoon/1.8.0/",
    "requires_dist": [
      "httpx",
      "asyncio",
      "pydantic",
      "cryptography",
      "tqdm"
    ],
    "requires_python": "",
    "summary": "DRACOON API wrapper in Python",
    "version": "1.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15816756,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2b0237679d540c3b8d8f5f907d46e9f220eed771ec3c278c935ed0ee2632baf",
        "md5": "789c8e1def1616777cd4898dd4f1d1f5",
        "sha256": "dc9c826704d798b630cfb20998593057507eea3e5fdd4c64db1c1a5718998766"
      },
      "downloads": -1,
      "filename": "dracoon-1.8.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "789c8e1def1616777cd4898dd4f1d1f5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 93299,
      "upload_time": "2022-10-26T16:04:35",
      "upload_time_iso_8601": "2022-10-26T16:04:35.757630Z",
      "url": "https://files.pythonhosted.org/packages/f2/b0/237679d540c3b8d8f5f907d46e9f220eed771ec3c278c935ed0ee2632baf/dracoon-1.8.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64e11b38bb5d42b0d5bf9c4f7cd861a170cb5a18c58a0495826eafb41c772676",
        "md5": "28c9a64af61c5d3526c0dae7666276ed",
        "sha256": "11fad2c3a7a7afb45db7873706e31c54c0e8e3cc9e6de973f1e3931a6a92e486"
      },
      "downloads": -1,
      "filename": "dracoon-1.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "28c9a64af61c5d3526c0dae7666276ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 74027,
      "upload_time": "2022-10-26T16:04:40",
      "upload_time_iso_8601": "2022-10-26T16:04:40.750567Z",
      "url": "https://files.pythonhosted.org/packages/64/e1/1b38bb5d42b0d5bf9c4f7cd861a170cb5a18c58a0495826eafb41c772676/dracoon-1.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}