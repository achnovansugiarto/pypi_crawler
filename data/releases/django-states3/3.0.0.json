{
  "info": {
    "author": "Ulam Labs",
    "author_email": "contact@ulam.io",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Django States\n=============\n\n|Build Status|\n\nDescription\n-----------\n\nState engine for django models. Define a state graph for a model and\nremember the state of each object. State transitions can be logged for\nobjects.\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install django-states2\n\nUsage example\n-------------\n\nTo use a state machine, you should add a state field to the model\n\n.. code:: python\n\n    from django_states.fields import StateField\n    from django_states.machine import StateMachine, StateDefinition, StateTransition\n\n    class PurchaseStateMachine(StateMachine):\n       log_transitions = True\n\n       # possible states\n       class initiated(StateDefinition):\n           description = _('Purchase initiated')\n           initial = True\n\n       class paid(StateDefinition):\n           description = _('Purchase paid')\n\n           def handler(self, instance):\n               code_to_execute_when_arriving_in_this_state()\n\n       class shipped(StateDefinition):\n           description = _('Purchase shipped')\n\n       # state transitions\n       class mark_paid(StateTransition):\n           from_state = 'initiated'\n           to_state = 'paid'\n           description = 'Mark this purchase as paid'\n\n       class ship(StateTransition):\n           from_state = 'paid'\n           to_state = 'shipped'\n           description = 'Ship purchase'\n\n           def handler(transition, instance, user):\n               code_to_execute_during_this_transition()\n\n           def has_permission(transition, instance, user):\n               return true_when_user_can_make_this_transition()\n\n    class Purchase(StateModel):\n        purchase_state = StateField(machine=PurchaseStateMachine, default='initiated')\n        ... (other fields for a purchase)\n\nIf ``log_transitions`` is enabled, another model is created. Everything\nshould be compatible with South\\_ for migrations.\n\nNote: If you're creating a ``DataMigration`` in\n`South <http://south.aeracode.org/>`__, remember to use\n``obj.save(no_state_validation=True)``\n\nUsage example:\n\n.. code:: python\n\n   p = Purchase()\n\n   # Will automatically create state object for this purchase, in the\n   # initial state.\n   p.save()\n   p.get_purchase_state_info().make_transition('mark_paid', request.user) # User parameter is optional\n   p.state # Will return 'paid'\n   p.get_purchase_state_info().description # Will return 'Purchase paid'\n\n   # Returns an iterator of possible transitions for this purchase.\n   p.get_purchase_state_info().possible_transitions()\n\n   # Which can be used like this..\n   [x.get_name() for x in p.possible_transitions]\n\nFor better transition control, override:\n\n-  ``has_permission(self, instance, user)``: Check whether this user is\n   allowed to make this transition.\n-  ``handler(self, instance, user)``: Code to run during this\n   transition. When an exception has been raised in here, the transition\n   will not be made.\n\nGet all objects in a certain state::\n\n   Purchase.objects.filter(state='initiated')\n\nValidation\n----------\n\nYou can add a test that needs to pass before a state transition can be\nexecuted. Well, you can add 2: one based on the current user\n(``has_permission``) and one generic (``validate``).\n\nSo on a ``StateTransition``-object you need to specify an extra\n``validate`` function (signature is ``validate(cls, instance)``). This\nshould yield ``TransitionValidationError``, this way you can return\nmultiple errors on that need to pass before the transition can happen.\n\nThe ``has_permission`` function (signature\n``has_permission(transition, instance, user)``) should check whether the\ngiven user is allowed to make the transition. E.g. a super user can\nmoderate all comments while other users can only moderate comments on\ntheir blog-posts.\n\nGroups\n------\n\nSometimes you want to group several states together, since for a certain\nview (or other content) it doesn't really matter which of the states it\nis. We support 2 different state groups, inclusive (only these) or\nexclusive (everything but these):\n\n.. code:: python\n\n  class is_paid(StateGroup):\n      states = ['paid', 'shipped']\n\n  class is_paid(StateGroup):\n      exclude_states = ['initiated']\n\nState graph\n-----------\n\nYou can get a graph of your states by running the ``graph_states``\nmanagement command.\n\n.. code:: sh\n\n   python manage.py graph_states myapp.Purchase.state\n\nThis requires `graphviz <http://graphviz.org>`__ and python bindings for\ngraphviz: ``pygraphviz`` and ``yapgvb``.\n\n.. |Build Status| image:: https://travis-ci.org/vikingco/django-states2.svg?branch=fix%2F15403%2Fdebug-in_group-and-add-unittests\n   :target: https://travis-ci.org/vikingco/django-states2",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ulamlabs/django-states3",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-states3",
    "package_url": "https://pypi.org/project/django-states3/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-states3/",
    "project_urls": {
      "Homepage": "https://github.com/ulamlabs/django-states3"
    },
    "release_url": "https://pypi.org/project/django-states3/3.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "State machine for django models",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6246072,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb6b60050b296f996de1a8810f38cd96b5ad0e5ed38c093c6e4118f6ddcb2a2d",
        "md5": "cb7fe08a4247c740af63332cbd4474db",
        "sha256": "8bd292c0d956e310b43263949de009f936dd38a9671ea1aea470a9010b32cdb7"
      },
      "downloads": -1,
      "filename": "django-states3-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cb7fe08a4247c740af63332cbd4474db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19976,
      "upload_time": "2019-12-02T13:35:46",
      "upload_time_iso_8601": "2019-12-02T13:35:46.048578Z",
      "url": "https://files.pythonhosted.org/packages/eb/6b/60050b296f996de1a8810f38cd96b5ad0e5ed38c093c6e4118f6ddcb2a2d/django-states3-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}