{
  "info": {
    "author": "Luke Plant",
    "author_email": "L.Plant.98@cantab.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "===============\ndjango-functest\n===============\n\n.. image:: https://github.com/django-functest/django-functest/workflows/Python%20package/badge.svg\n   :target: https://github.com/django-functest/django-functest/actions?query=workflow%3A%22Python+package%22+branch%3Amaster\n\n.. image:: https://readthedocs.org/projects/django-functest/badge/?version=latest\n   :target: https://django-functest.readthedocs.org/en/latest/\n\n\nHelpers for creating high-level functional tests in Django, with a unified API\nfor WebTest and Selenium tests.\n\n    Exploring django-functest makes me angry! Why? Because I've wasted so much\n    time writing low-level, boilerplate-filled tests for the past few years\n    instead of using it —\n    `jerivas <https://github.com/stephenmcd/mezzanine/issues/1012#issuecomment-666802439>`_\n\nWhat is `WebTest\n<https://docs.pylonsproject.org/projects/webtest/en/latest/index.html>`__?\nImagine a text-based, HTML-only browser that doesn’t load CSS, Javascript etc,\noperates directly on a WSGI interface in a synchronous fashion for performance\nand robustness, and is controlled programmatically.\n\nWhat is `Selenium <https://www.selenium.dev/>`__? A tool that opens full browsers\nlike Firefox and Chrome (with an isolated profile), and provides an API for\ncontrolling them.\n\nFor an idea of what writing tests with django-functest looks like in practice,\nyou might be interested in the video in our `writing tests interactively\ndocumentation\n<https://django-functest.readthedocs.io/en/latest/interactive.html>`_.\n\nDocumentation\n-------------\n\nThe full documentation is at https://django-functest.readthedocs.org.\n\nInstallation\n------------\n\n::\n\n   pip install django-functest\n\nSee also the `dependencies documentation\n<http://django-functest.readthedocs.io/en/latest/installation.html#dependencies>`_\nfor important compatibility information.\n\nFeatures\n--------\n\n* A simplified API for writing functional tests in Django (tests that check the\n  behaviour of entire views, or sets of views, e.g. a checkout process).\n\n* A unified API that abstracts over both `WebTest\n  <http://webtest.pythonpaste.org/en/latest/>`__ and `Selenium\n  <https://pypi.python.org/pypi/selenium>`__ - write two tests at once!\n\n* Many of the gotchas and difficulties of using WebTest and Selenium ironed out\n  for you.\n\n* Well tested - as well as its own test suite, which is run against Firefox\n  and Chrome, it is also used by `Wolf & Badger\n  <https://www.wolfandbadger.com/>`_ for tests covering many business critical\n  functionalities.\n\n* Supports running with pytest (using pytest-django) as well as Django’s\n  ``manage.py test``\n\nTypical usage\n-------------\n\nIn your tests.py:\n\n.. code-block:: python\n\n   from django.test import LiveServerTestCase, TestCase\n   from django_functest import FuncWebTestMixin, FuncSeleniumMixin, FuncBaseMixin\n\n\n   class ContactTestBase(FuncBaseMixin):\n       # Abstract class, doesn't inherit from TestCase\n\n       def test_contact_form(self):\n           self.get_url(\"contact_form\")\n           self.fill(\n               {\n                   \"#id_name\": \"Joe\",\n                   \"#id_message\": \"Hello\",\n               }\n           )\n           self.submit(\"input[type=submit]\")\n           self.assertTextPresent(\"Thanks for your message\")\n\n\n   class ContactWebTest(ContactTestBase, FuncWebTestMixin, TestCase):\n       pass\n\n\n   class ContactSeleniumTest(ContactTestBase, FuncSeleniumMixin, LiveServerTestCase):\n       pass\n\n\nIn this way, you can write a single test with a high-level API, and run it in\ntwo ways - using a fast, WSGI-based method which emulates typical HTTP usage of a\nbrowser, and using a full browser that actually executes Javascript (if present)\netc.\n\nThe approach taken by django-functest is ideal if your web app is mostly a\n\"classic\" app with server-side rendered HTML combined with a careful sprinkling\nof Javascript to enhance the UI, which you also need to be able to test. If such\nan approach seems old-fashioned to you, have a look at `htmx.org\n<https://htmx.org/>`_ or `hotwire <https://hotwired.dev/>`_ and get with the new\nkids! (OK most of are actually quite old but we make fast web sites...)\n\nUnder the hood, the WSGI-based method uses and builds upon `WebTest\n<http://webtest.pythonpaste.org/en/latest/>`_ and `django-webtest\n<https://pypi.python.org/pypi/django-webtest>`_.\n\ndjango-functest provides its functionality as mixins, so that you can have your\nown base class for tests.\n\nContributing and tests\n----------------------\n\nSee `CONTRIBUTING.rst <CONTRIBUTING.rst>`_ for information about running the test suite and\ncontributing to django-functest.\n\n\nPaid support\n------------\n\nSome of the maintainers are able to provide support on a paid basis for this\nOpen Source project. This includes the following kinds of things:\n\n* Paying for bug fixes or new features (with the understanding that these\n  changes will become freely available as part of the project and are not\n  'owned' by the person who paid for them).\n\n* Debugging or other support for integrating django-functest into your project.\n\n* Writing a test suite for you from scratch using django-functest.\n\nIf you are interested in these, you can contact the following developers:\n\n* Luke Plant - long time Django expert and contributor - `info and status <https://lukeplant.me.uk/development-work.html>`_.\n\n\nCredits\n-------\n\nThis library was written originally by `spookylukey <https://github.com/spookylukey/>`_,\nfurther improved by developers at `Wolf & Badger\n<https://www.wolfandbadger.com/>`_, and released with the kind permission of that\ncompany.\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/django-functest/django-functest",
    "keywords": "django-functest",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-functest",
    "package_url": "https://pypi.org/project/django-functest/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-functest/",
    "project_urls": {
      "Homepage": "https://github.com/django-functest/django-functest"
    },
    "release_url": "https://pypi.org/project/django-functest/1.5.1/",
    "requires_dist": [
      "django-webtest (>=1.9.9)",
      "WebTest (>=3)",
      "selenium (>=4)",
      "furl (>=0.4.9)",
      "pyquery (>=1.2.10)",
      "Django (>=2.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Helpers for creating functional tests in Django, with a unified API for WebTest and Selenium tests.",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16300825,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7b0c90934e583336c64b4543a7c3bc29b0ff4a1ba7cec99f9286665b2882c78",
        "md5": "004c175dfbcede701d28210c2302d4ce",
        "sha256": "b9acecfb222ceef9b30d2c81d0c8ef60c9a65091b218630e50552d09806a5600"
      },
      "downloads": -1,
      "filename": "django_functest-1.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "004c175dfbcede701d28210c2302d4ce",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 38523,
      "upload_time": "2022-09-12T14:58:06",
      "upload_time_iso_8601": "2022-09-12T14:58:06.360684Z",
      "url": "https://files.pythonhosted.org/packages/b7/b0/c90934e583336c64b4543a7c3bc29b0ff4a1ba7cec99f9286665b2882c78/django_functest-1.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9a4f5c2e3cb3b211144d665f41f30f8fad951dce87d911080180ccf55fa783e",
        "md5": "a63127e4ce9fd01291f16370c239979a",
        "sha256": "d845b6ef659a5939d19d3a5fccd66949c51d7737cf613d6e5955dc64447346e0"
      },
      "downloads": -1,
      "filename": "django-functest-1.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a63127e4ce9fd01291f16370c239979a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 71225,
      "upload_time": "2022-09-12T14:58:07",
      "upload_time_iso_8601": "2022-09-12T14:58:07.828996Z",
      "url": "https://files.pythonhosted.org/packages/e9/a4/f5c2e3cb3b211144d665f41f30f8fad951dce87d911080180ccf55fa783e/django-functest-1.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}