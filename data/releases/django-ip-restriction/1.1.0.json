{
  "info": {
    "author": "Department for International Trade - Export team",
    "author_email": "tools@digital.trade.gov.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "=====================\nDjango IP Restriction\n=====================\n\nDepartment of International Trade Django IP Whitelist.  A Django middleware to restrict incoming IPs to a Django project to a list of allowed IPs or IP ranges.  Access to the admin login screen, and access to authenticated users are configurable, so it can be set such that users can authenticate, and bypass the IP restriction for the site.\n\nRequirements\n------------\n\n* Python >= 3.3\n* Django >= 1.9\n\n\n===========\nQuick start\n===========\n\n#. Install the package::\n\n    $ pip install django-ip-restriction\n\n#. Add the middleware to your settings (Note: the minimum necessary other middleware components are Django's `SessionMiddleware` and `AuthenticationMiddleware`, these are added by default to your settings)::\n\n    # Django 1.9\n    MIDDLEWARE_CLASSES = [\n        ...\n        'ip_restriction.IpWhitelister',\n        ...\n    ]\n\n    # Django 1.10+\n    MIDDLEWARE = [\n        ...\n        'ip_restriction.IpWhitelister',\n        ...\n    ]\n\n\n=============\nConfiguration\n=============\n\nTurning on or off, and configuring the IP whitelist is done either via variables in your Django settings, or via environment variables.  Values in Django settings take preference over values in the environment.\n\nTurning on/off the middleware is done via ``RESTRICT_IPS``, and the default value is False.  Either set this variable to True in Django settings, or set a truthy value (e.g. 'true', '1') in your environment.\n\nIndividual IPs can be whitelisted via ``ALLOWED_IPS``, which is either a list of IP strings in Django settings, or a comma-separated list of IPs in the environment, e.g the following 2 are equivalent::\n\n    # in bash (spaces are disregarded, trailing commas are OK)\n    export ALLOWED_IPS='192.168.0.1, 192.168.0.2,192.168.0.3,'\n\n    # in settings.py (will override the above environment variable)\n    ALLOWED_IPS = ['192.168.0.1', '192.168.0.2', '192.168.0.3']\n\nIP ranges can be whitelisted via ``ALLOWED_IP_RANGES``, which is either a list of IP range strings (CIDR notation) in Django settings, or a comma-separated list of IP ranges in the environment, e.g.::\n\n    # in bash\n    export ALLOWED_IP_RANGES='192.168.0.0/8, 127.0.0.0/2'\n\n    # in settings.py\n    ALLOWED_IPS = ['192.168.0.0/8', '127.0.0.0/2']\n\nRegardless of the IP addresses/rages that are in the whitelist, access for all authenticated users can be allowed with ``ALLOW_AUTHENTICATED``.  If true, this will allow any valid sessions past the IP restriction.\n\nRegardless of the IP addresses/rages that are in the whitelist, access to the admin URLs is also allowed past the IP restriction if ``ALLOW_ADMIN`` is true.\n\nSetting both ``ALLOW_ADMIN`` *and* ``ALLOW_AUTHENTICATED`` to true is recommended, and will allow any user that can log in, to first access only the admin interface in order to authenitcate, and from then have access to all URLs for the project.\n\nThe following two settings relate to CloudFront and the way forwarded IPs are provided as well as\nthe additional security of the secret token.\n\nSetting ``SECRET_HEADER_NAME`` and ``SECRET_HEADER_VALUE`` will cause requests to be rejected\nif the value of a header specified in SECRET_HEADER_NAME does not match the SECRET_HEADER_VALUE provided.\n\n``REAL_IP_POSITION`` can be provided to support scenarios using CloudFront where the real IP is positioned\nin a list of IPs provided, and is zero based and counted from the end. For example, with a forwarded ip list of:\n\n`x_forwarded_for:\"193.240.177.2, 193.240.177.99, 216.137.62.70, 127.0.0.1\"`\n\nThe real IP is the 3rd from the left, and the 4th one is assumed to be a spoofing attempt. The value is therefore\nset to 2.\n\nRestict Admin views only\n------------------------\n\nTo restrict admin views only set the variables ``RESTRICT_ADMIN_BY_IPS``, ``ALLOWED_ADMIN_IPS`` and ``ALLOWED_ADMIN_IP_RANGES``\n\n============\nContributing\n============\n\nContributions are welcome. Please follow the guidelines below to make life easier:\n\n* Fork the repo, branch off release, make changes, then make a pull request (PR) to release on the main repo\n* Include documentation for any new features\n* Please limit changes for a PR to a single feature, or a single bugfix\n    - Make multiple PRs for multiple discrete changes\n* Please squash commits - ideally a single commit, but at least to a sensible minimum\n    - If a PR reasonably should have multiple commits, consider if it should *actually* be separate PRs\n\n\n=======\nLicense\n=======\n\nMIT licensed. See the bundled `LICENSE  <https://github.com/uktrade/dit-ip/blob/master/LICENSE>`_ file for more\ndetails.\n\n\n====\nTODO\n====\n\n* Allow the IP restriction to work in a blacklisting mode, rather than just a whitelisting mode\n* Get continuous integration to run on multiple python versions from 3.0+\n    - Currently only running on 3.5.0\n    - Utilise parallelism\n* Run tests on multiple Django versions\n    - Currently only running against Django 1.9\n    - Utilise parallelism",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/uktrade/dit-ip",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-ip-restriction",
    "package_url": "https://pypi.org/project/django-ip-restriction/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-ip-restriction/",
    "project_urls": {
      "Homepage": "https://github.com/uktrade/dit-ip"
    },
    "release_url": "https://pypi.org/project/django-ip-restriction/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django middleware to restrict incoming IPs to a Django project.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4909809,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "535dab689f8faf42dfcec6b6e655f96adb661853c0b2fe0f1fc81e0e8190dc1c",
        "md5": "53bd19e70915d02001662110cd15bd6e",
        "sha256": "860668282621d13f918e5677e85db13b906abdcbf563086da839e4eda0fa03f9"
      },
      "downloads": -1,
      "filename": "django-ip-restriction-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "53bd19e70915d02001662110cd15bd6e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5931,
      "upload_time": "2019-03-07T11:52:49",
      "upload_time_iso_8601": "2019-03-07T11:52:49.251843Z",
      "url": "https://files.pythonhosted.org/packages/53/5d/ab689f8faf42dfcec6b6e655f96adb661853c0b2fe0f1fc81e0e8190dc1c/django-ip-restriction-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}