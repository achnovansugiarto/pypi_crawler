{
  "info": {
    "author": "Jonas und der Wolf GmbH",
    "author_email": "opensource@jonasundderwolf.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "====================\ndjango-video-encoder\n====================\n\n.. image:: https://img.shields.io/pypi/v/django-video-encoder.svg\n    :target: https://pypi.python.org/pypi/django-video-encoder\n\n.. image:: https://img.shields.io/pypi/pyversions/django-video-encoder.svg\n    :target: https://pypi.python.org/pypi/django-video-encoder\n\n.. image:: https://img.shields.io/pypi/djversions/django-video-encoder\n    :alt: PyPI - Django Version\n    :target: https://pypi.python.org/pypi/django-video-encoder\n\n\nSimple integration with video encoding backends.\n\nFor now only the remote zencoder.com is supported.\n\nUpload videos and asynchronously store the encoded videos and\nthe generated thumbnails.\n\nRequirements\n============\n\nDjango 2.2+ and Celery to asynchronously run the encoding tasks.\n\nUsage\n=====\n\nYou will need to add the following to your django settings:\n\n* Add `django_video_encoder` to `INSTALLED_APPS`\n* Add generic relation fields to your video models ::\n\n    formats = GenericRelation(Format)\n    thumbnails = GenericRelation(Thumbnail)\n\n* Set the `DJANGO_VIDEO_ENCODER_THUMBNAIL_INTERVAL`\n* Add the desired formats, for example ::\n\n    DJANGO_VIDEO_ENCODER_FORMATS = {\n        \"H264 (HD)\": {\"video_codec\": \"h264\"},  # full resolution if not specified\n        \"H264\": {\"video_codec\": \"h264\", \"width\": 720, \"height\": 404},\n        \"VP9 (HD)\": {\"video_codec\": \"vp9\"},\n        \"VP9\": {\"video_codec\": \"vp9\", \"width\": 720, \"height\": 404},\n    }\n\nAnd specific settings using the zencoder backend:\n\n* Add `ZENCODER_API_KEY` and `ZENCODER_NOTIFICATION_SECRET`\n* You may also specify `ZENCODER_REGION` (default: europe) to the most suitable for you\n\n`DJANGO_VIDEO_ENCODER_FORMATS` is a dictionary of\n`{format_label: format_kwargs}` where `format_kwargs` is a\ndictionary requiring `video_codec` and where all arguments are\nadded to the encoding job POST. You can define width, height and\nmuch more see the\n`Zencoder API <https://zencoder.support.brightcove.com/references/reference.html#operation/createJob>`_.\n\nTests\n=====\n\nRun tests with `tox`\n\n\nMisc\n====\n\nTo not be confused with the archived\n`theonion/django-zencoder <https://github.com/theonion/django-zencoder>`_\nwhich is installed as `zencoder`\n\nSee also similar project `escaped/django-video-encoding <https://github.com/escaped/django-video-encoding>`_\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jonasundderwolf/django-video-encoder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-video-encoder",
    "package_url": "https://pypi.org/project/django-video-encoder/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-video-encoder/",
    "project_urls": {
      "Homepage": "http://github.com/jonasundderwolf/django-video-encoder"
    },
    "release_url": "https://pypi.org/project/django-video-encoder/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple integration of a Django model with a FileField to encoding backends",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8560911,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "875a818d55c0148d032f0550856fa61f8c7b58c6414098c08865082af9efd044",
        "md5": "75adb3a44de6397f3a38380dd5fe65e5",
        "sha256": "6015c8e998353b33c4c78b0362ad2f9b02b11982433f5d0a106786e986e1bc9e"
      },
      "downloads": -1,
      "filename": "django_video_encoder-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "75adb3a44de6397f3a38380dd5fe65e5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16800,
      "upload_time": "2020-11-02T10:02:19",
      "upload_time_iso_8601": "2020-11-02T10:02:19.047464Z",
      "url": "https://files.pythonhosted.org/packages/87/5a/818d55c0148d032f0550856fa61f8c7b58c6414098c08865082af9efd044/django_video_encoder-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6eadd89ad53f0935b1d43bf10564e1eed73619edad7d934cfa917d132c708ef0",
        "md5": "da73bda24d37a3d5ed61f04d3a0e306a",
        "sha256": "54f9fdd89d80917fb022657e69701e40310d4e155b1ca9f4d9b4cdd5adae018b"
      },
      "downloads": -1,
      "filename": "django_video_encoder-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "da73bda24d37a3d5ed61f04d3a0e306a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11191,
      "upload_time": "2020-11-02T10:02:20",
      "upload_time_iso_8601": "2020-11-02T10:02:20.133686Z",
      "url": "https://files.pythonhosted.org/packages/6e/ad/d89ad53f0935b1d43bf10564e1eed73619edad7d934cfa917d132c708ef0/django_video_encoder-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}