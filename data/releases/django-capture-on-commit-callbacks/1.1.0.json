{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "==================================\ndjango-capture-on-commit-callbacks\n==================================\n\n.. image:: https://github.com/adamchainz/django-capture-on-commit-callbacks/workflows/CI/badge.svg?branch=master\n   :target: https://github.com/adamchainz/django-capture-on-commit-callbacks/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/django-capture-on-commit-callbacks.svg\n   :target: https://pypi.python.org/pypi/django-capture-on-commit-callbacks\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/python/black\n\nCapture and make assertions on ``transaction.on_commit()`` `callbacks <https://docs.djangoproject.com/en/3.0/topics/db/transactions/#performing-actions-after-commit>`__.\nThis allows you to write your tests with the ``TestCase``, rather than needing the slower ``TransactionTestCase`` to actually commit the transactions.\n\nThis package was made as a first pass for `Django PR #12944 <https://github.com/django/django/pull/12944>`__, which is a solution for `Ticket #30457 “on_commit should be triggered in a TestCase” <https://code.djangoproject.com/ticket/30457>`__.\n\nRead more in my blog post `The Fast Way to Test Django transaction.on_commit() Callbacks <https://adamj.eu/tech/2020/05/20/the-fast-way-to-test-django-transaction-on-commit-callbacks/>`__.\n\nInstallation\n============\n\nUse **pip**:\n\n.. code-block:: bash\n\n    python -m pip install django-capture-on-commit-callbacks\n\nRequirements\n============\n\nPython 3.5 to 3.8 supported.\n\nDjango 2.0 to 3.0 suppported.\n\nAPI\n===\n\n``capture_on_commit_callbacks(*, using=\"default\", execute=False)``\n------------------------------------------------------------------\n\nActs as a context manager that captures ``on_commit`` callbacks for the given database connection.\nIt returns a list that contains, on exit of the context, the captured callback functions.\nFrom this list you can make assertions on the callbacks or call them to invoke their side effects, emulating a commit.\n\nAll arguments must be passed as keyword arguments.\n\n``using`` is the alias of the database connection to capture callbacks for.\n\n``execute`` specifies whether to call all the callbacks automatically as the context manager exits, if no exception has been raised.\n\nFor example, you can test a commit hook that sends an email like so:\n\n.. code-block:: python\n\n    from django.core import mail\n    from django.test import TestCase\n    from django_capture_on_commit_callbacks import capture_on_commit_callbacks\n\n\n    class ContactTests(TestCase):\n        def test_post(self):\n            with capture_on_commit_callbacks() as callbacks:\n                response = self.client.post(\n                    \"/contact/\",\n                    {\"message\": \"I like your site\"},\n                )\n\n            self.assertEqual(response.status_code, 200)\n\n            self.assertEqual(len(callbacks), 1)\n            # Execute the callback\n            callbacks[0]()\n\n            self.assertEqual(len(mail.outbox), 1)\n            self.assertEqual(mail.outbox[0].subject, \"Contact Form\")\n            self.assertEqual(mail.outbox[0].body, \"I like your site\")\n\nThe same test can be written a bit more succinctly with ``execute=True``:\n\n.. code-block:: python\n\n    from django.core import mail\n    from django.test import TestCase\n    from django_capture_on_commit_callbacks import capture_on_commit_callbacks\n\n\n    class ContactTests(TestCase):\n        def test_post(self):\n            with capture_on_commit_callbacks(execute=True) as callbacks:\n                response = self.client.post(\n                    \"/contact/\",\n                    {\"message\": \"I like your site\"},\n                )\n\n            self.assertEqual(response.status_code, 200)\n\n            self.assertEqual(len(callbacks), 1)\n\n            self.assertEqual(len(mail.outbox), 1)\n            self.assertEqual(mail.outbox[0].subject, \"Contact Form\")\n            self.assertEqual(mail.outbox[0].body, \"I like your site\")\n\n``TestCaseMixin``\n-----------------\n\nA mixin class to be added to your custom ``TestCase`` subclass.\nIt adds one method, ``captureOnCommitCallbacks()`` that aliases ``capture_on_commit_callbacks()``, to match the ``camelCase`` style of unittest assertions.\n\nYou can add to your custom ``TestCase`` classes like so:\n\n.. code-block:: python\n\n    from django import test\n    from django_capture_on_commit_callbacks import TestCaseMixin\n\n\n    class TestCase(TestCaseMixin, test.TestCase):\n        pass\n\nYou could then rewrite the above tests with your custom ``TestCase`` class like so:\n\n.. code-block:: python\n\n    from django.core import mail\n    from example.test import TestCase\n\n\n    class ContactTests(TestCase):\n        def test_post(self):\n            with self.captureOnCommitCallbacks(execute=True) as callbacks:\n                response = self.client.post(\n                    \"/contact/\",\n                    {\"message\": \"I like your site\"},\n                )\n\n            self.assertEqual(response.status_code, 200)\n\n            self.assertEqual(len(callbacks), 1)\n\n            self.assertEqual(len(mail.outbox), 1)\n            self.assertEqual(mail.outbox[0].subject, \"Contact Form\")\n            self.assertEqual(mail.outbox[0].body, \"I like your site\")\n\nHistory\n=======\n\n1.1.0 (2020-05-24)\n------------------\n\n* Made ``captureOnCommitCallbacks()`` a ``classmethod`` so it can be used from within class methods such as ``setUpClass()``, ``setUpTestData()``.\n* Avoiding capturing callbacks enqueued within rolled back ``atomic()`` blocks.\n  As a side effect of this change, the returned list of callbacks is only populated when the context manager exits.\n* Add Django 3.1 support.\n\n1.0.0 (2020-05-20)\n------------------\n\n* Initial release.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-capture-on-commit-callbacks",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-capture-on-commit-callbacks",
    "package_url": "https://pypi.org/project/django-capture-on-commit-callbacks/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-capture-on-commit-callbacks/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-capture-on-commit-callbacks/blob/master/HISTORY.rst",
      "Homepage": "https://github.com/adamchainz/django-capture-on-commit-callbacks"
    },
    "release_url": "https://pypi.org/project/django-capture-on-commit-callbacks/1.1.0/",
    "requires_dist": [
      "Django (>=2.0)"
    ],
    "requires_python": ">=3.5",
    "summary": "Capture and make assertions on transaction.on_commit() callbacks.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13770667,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6384a0e9aec6a3e52fb81dd865dfb8b5e429dfbfe4c314fbbde789c23a291fb1",
        "md5": "6787a3323528860aa7945d02c4e38892",
        "sha256": "b6199328273f6ec0feb37a30f0abe4edd350d462fd9df63ca67ea8071a118435"
      },
      "downloads": -1,
      "filename": "django_capture_on_commit_callbacks-1.1.0-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "6787a3323528860aa7945d02c4e38892",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 4697,
      "upload_time": "2020-05-24T17:30:28",
      "upload_time_iso_8601": "2020-05-24T17:30:28.283579Z",
      "url": "https://files.pythonhosted.org/packages/63/84/a0e9aec6a3e52fb81dd865dfb8b5e429dfbfe4c314fbbde789c23a291fb1/django_capture_on_commit_callbacks-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "726f06768f64e332878346ba4ae9dd929f02e2b5aa00452d83ca7d06e2ef2651",
        "md5": "29082026ac39f632b7d34237028b289d",
        "sha256": "59cb40cbb133f96fcd7d7d39bcfff1570778a6afe28c30efeebcda0ffd01fae9"
      },
      "downloads": -1,
      "filename": "django-capture-on-commit-callbacks-1.1.0.tar.gz",
      "has_sig": true,
      "md5_digest": "29082026ac39f632b7d34237028b289d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 50939,
      "upload_time": "2020-05-24T17:30:29",
      "upload_time_iso_8601": "2020-05-24T17:30:29.644241Z",
      "url": "https://files.pythonhosted.org/packages/72/6f/06768f64e332878346ba4ae9dd929f02e2b5aa00452d83ca7d06e2ef2651/django-capture-on-commit-callbacks-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}