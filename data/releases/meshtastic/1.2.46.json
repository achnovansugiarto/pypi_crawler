{
  "info": {
    "author": "Kevin Hester",
    "author_email": "kevinh@geeksville.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Meshtastic-python\n[![Open in Visual Studio Code](https://open.vscode.dev/badges/open-in-vscode.svg)](https://open.vscode.dev/meshtastic/Meshtastic-python)\n![Unit Tests](https://github.com/meshtastic/Meshtastic-python/actions/workflows/ci.yml/badge.svg)\n\n\nA python client for using [Meshtastic](https://www.meshtastic.org) devices. This small library (and example application) provides an easy API for sending and receiving messages over mesh radios. It also provides access to any of the operations/data available in the device user interface or the Android application. Events are delivered using a publish-subscribe model, and you can subscribe to only the message types you are interested in.\n\nFull documentation including examples [here](https://meshtastic.github.io/Meshtastic-python/meshtastic/index.html).\n\nInstallation is easily done through the Python package installer pip (note, you must use pip version 20 or later):\n\n- check that your computer has the required serial drivers installed, if not download them from [here](https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers).\n- check that your computer has Python 3 installed.\n- check that your computer has \"pip3\" installed, if not follow [this guide](https://www.makeuseof.com/tag/install-pip-for-python/).\n- check that pytap2 is installed by pip3. If not, install it:\n\n```\nsudo pip3 install --upgrade pytap2\n```\n\n- install meshtastic:\n\n```\nsudo pip3 install --upgrade meshtastic\n```\n\nAn example using Python 3 code to send a message to the mesh:\n\n```\nimport meshtastic\ninterface = meshtastic.SerialInterface() # By default will try to find a meshtastic device, otherwise provide a device path like /dev/ttyUSB0\ninterface.sendText(\"hello mesh\") # or sendData to send binary data, see documentations for other options.\ninterface.close()\n```\n\nFor the rough notes/implementation plan see [TODO](https://github.com/meshtastic/Meshtastic-python/blob/master/TODO.md).\n\n## Command line tool\n\nThis pip package will also install a \"meshtastic\" command line executable, which displays packets sent over the network as JSON and lets you see serial debugging information from the meshtastic devices. The source code for this tool is also a good [example](https://github.com/meshtastic/Meshtastic-python/blob/master/meshtastic/__main__.py) of a 'complete' application that uses the meshtastic python API.\n\nNOTE: This command is not run inside of python; you run it from your operating system shell prompt directly.  If when you type \"meshtastic\" it doesn't find the command and you are using Windows: Check that the python \"scripts\" directory [is in your path](https://datatofish.com/add-python-to-windows-path/).\n\nTo display a (partial) list of the available commands:\n\n```\nmeshtastic -h\n```\n\n### Changing device settings\n\nYou can also use this tool to set any of the device parameters which are stored in persistent storage. For instance, here's how to set the device\nto keep the bluetooth link alive for eight hours (any usage of the bluetooth protcol from your phone will reset this timer)\n\n```\nmeshtastic --set wait_bluetooth_secs 28800\nConnected to radio...\nSetting preference wait_bluetooth_secs to 28800\nWriting modified preferences to device...\n```\n\nOr to set a node at a fixed position and never power up the GPS.\n\n```\nmeshtastic --setlat 25.2 --setlon -16.8 --setalt 120\n```\n\nOr to configure an ESP32 based board to join a wifi network as a station (wifi support in the device code is coming soon):\n\n```\nmeshtastic --set wifi_ap_mode false --set wifi_ssid mywifissid --set wifi_password mywifipsw\n```\n\nOr to configure an ESP32 to run as a Wifi access point:\n\n```\nmeshtastic --set wifi_ap_mode true --set wifi_ssid mywifissid --set wifi_password mywifipsw\n```\n\nOnce an a node is connected to a Wi-Fi network, you can use the `--host` option to access it instead of using the USB serial bridge:\n\n```\nmeshtastic --host Meshtastic-0123.lan --info --nodes\n```\n\nFor a full list of preferences which can be set (and their documentation) see [here](https://meshtastic.org/docs/developers/protobufs/api#radioconfiguserpreferences).\n\n### Changing channel settings\n\nThe channel settings can be changed similiarly.  Either by using a standard (sharable) meshtastic URL or you can set partiular channel parameters (for advanced users).\n\nThe URL is constructed automatically based off of the current channel settings. So if you want to customize a channel you could do something like:\n\n```\nmeshtastic --ch-set name mychan --ch-set channel_num 4 --info\n```\n\nThis will change some channel params and then show device info (which will include the current channel URL)\n\nYou can even set the channel preshared key to a particular AES128 or AES256 sequence.\n\n```\nmeshtastic --ch-set psk 0x1a1a1a1a2b2b2b2b1a1a1a1a2b2b2b2b1a1a1a1a2b2b2b2b1a1a1a1a2b2b2b2b --info\n```\n\nUse \"--ch-set psk none\" to turn off encryption.  \n\nUse \"--ch-set psk random\" will assign a new (high quality) random AES256 key to the primary channel (similar to what the Android app does when making new channels).\n\nUse \"--ch-set psk default\" to restore the standard 'default' (minimally secure, because it is in the source code for anyone to read) AES128 key.\n\nAll \"ch-set\" commands will default to the primary channel at index 0, but can be applied to other channels with the \"ch-index\" parameter:\n\n```\nmeshtastic --ch-index 1 --ch-set name mychan --ch-set channel_num 4 --info\n```\n\n## Ham radio support\n\nMeshtastic is designed to be used without a radio operator license.  If you do have a license you can set your operator ID and turn off encryption with:\n\n```\nmeshtastic --port /dev/ttyUSB1 --set-ham KI1345\nConnected to radio\nSetting HAM ID to KI1345 and turning off encryption\nWriting modified channels to device\n```\n\n## Changing multiple settings from a yaml file\n\nYou can put parameters into a yaml file to update multiple values. See the [example_config.yaml](example_config.yaml).\n\nThis is how you might call it:\n```\nmeshtastic --configure example_config.yaml\n```\n\n## FAQ/common problems\n\nThis is a collection of common questions and answers from our friendly forum.\n\n### [Permission denied: ‘/dev/ttyUSB0’](https://meshtastic.discourse.group/t/question-on-permission-denied-dev-ttyusb0/590/3?u=geeksville)\n\nThis indicates an OS permission problem for access by your user to the USB serial port.  Typically this is fixed by the following.\n\n```\nsudo usermod -a -G dialout $USER\n```\n\nThis adds the \"dialout\" group to your user.  You'll need to obtain a new login session (for example, by logging out and logging back in) for the group change (and thus permission change) to take effect.\n\n## Mac OS Big Sur\n\nThere is a problem with Big Sur and pyserial. The workaround is to install a newer version of pyserial:\n\n```\npip3 install -U --pre pyserial\n```\n\nAfterwards you can use the Meshtastic python client again on MacOS.\n\n## A note to developers of this lib\n\nWe use the visual-studio-code default python formatting conventions (autopep8).  So if you use that IDE you should be able to use \"Format Document\" and not generate unrelated diffs.  If you use some other editor, please don't change formatting on lines you haven't changed.\n\nIf you need to build a new release you'll need:\n\n```\napt install pandoc\nsudo pip3 install markdown pdoc3 webencodings pyparsing twine autopep8 pylint pytest pytest-cov\n```\n\nFor development, you will probably want to run:\n```\npip3 install -r requirements.txt\n```\n\n\nTo lint, run:\n```\npylint meshtastic\n```\n\nTo test, first install this code locally, then run pytest:\n```\npip3 install .\npytest\n```\nPossible options for testing:\n* For more verbosity, add \"-v\" or even \"-vv\" like this:\n\n```\npytest -vv\n```\n\n* To run just unit tests:\n\n```\npytest\n# or (more verbosely)\npytest -m unit\n```\n\n* To run just integration tests:\n\n```\npytest -m int\n```\n\n* To run the smoke test with only one device connected serially (aka smoke1):\n\n```\npytest -m smoke1\n```\n\nCAUTION: Running smoke1 will reset values on the device, including the region to 1 (US).\nBe sure to hit the reset button on the device after the test is completed.\n\n* To run the smoke test with only two device connected serially (aka smoke2):\n\n```\npytest -m smoke2\n```\n\n* To run the wifi smoke test:\n\n```\npytest -m smokewifi\n```\n\n* To run a specific test:\n\n```\npytest -msmoke1 meshtastic/tests/test_smoke1.py::test_smoke1_info\n# or to run a specific smoke2 test\npytest -m smoke2 meshtastic/tests/test_smoke2.py::test_smoke2_info\n# or to run a specific smoke_wifi test\npytest -m smokewifi meshtastic/tests/test_smoke_wifi.py::test_smokewifi_info\n```\n\n* To add another classification of tests such as \"unit\" or \"smoke1\", see [pytest.ini](pytest.ini).\n\n* To see the unit test code coverage:\n\n```\npytest --cov=meshtastic\n# or if want html coverage report\npytest --cov-report html --cov=meshtastic\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/meshtastic/Meshtastic-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meshtastic",
    "package_url": "https://pypi.org/project/meshtastic/",
    "platform": "",
    "project_url": "https://pypi.org/project/meshtastic/",
    "project_urls": {
      "Homepage": "https://github.com/meshtastic/Meshtastic-python"
    },
    "release_url": "https://pypi.org/project/meshtastic/1.2.46/",
    "requires_dist": [
      "pyserial (>=3.4)",
      "protobuf (>=3.13.0)",
      "pypubsub (>=4.0.3)",
      "dotmap (>=1.3.14)",
      "pexpect (>=4.6.0)",
      "pyqrcode (>=1.2.1)",
      "pygatt (>=4.0.5)",
      "tabulate (>=0.8.9)",
      "timeago (>=1.0.15)",
      "pyyaml",
      "pytap2 (>=2.0.0) ; extra == 'tunnel'"
    ],
    "requires_python": ">=3.6",
    "summary": "Python API & client shell for talking to Meshtastic devices",
    "version": "1.2.46",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17485228,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "40954cc3a8d3032c9bfe384fc96cdccb45d08dc628fde7d7a1378ce33288c90e",
        "md5": "cd5b318d8921d34116421d09091e20fc",
        "sha256": "8a457e1d40bdff3e253d344edcc9a8c891176b21a21647d3b9f4f9266c814166"
      },
      "downloads": -1,
      "filename": "meshtastic-1.2.46-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd5b318d8921d34116421d09091e20fc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 73943,
      "upload_time": "2021-12-16T20:00:30",
      "upload_time_iso_8601": "2021-12-16T20:00:30.267811Z",
      "url": "https://files.pythonhosted.org/packages/40/95/4cc3a8d3032c9bfe384fc96cdccb45d08dc628fde7d7a1378ce33288c90e/meshtastic-1.2.46-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc2b3a12fd7a4bbb4a49dd64707d7b717f20e1e79d9b5d1cfa13e096cff2121d",
        "md5": "c84e75c19bde94b71a8f725c6af00217",
        "sha256": "6b701f4d665aa9343130909019b46c314a17f948b1cb3bb8fe8f40aa43730cbd"
      },
      "downloads": -1,
      "filename": "meshtastic-1.2.46.tar.gz",
      "has_sig": false,
      "md5_digest": "c84e75c19bde94b71a8f725c6af00217",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 63578,
      "upload_time": "2021-12-16T20:00:32",
      "upload_time_iso_8601": "2021-12-16T20:00:32.748694Z",
      "url": "https://files.pythonhosted.org/packages/bc/2b/3a12fd7a4bbb4a49dd64707d7b717f20e1e79d9b5d1cfa13e096cff2121d/meshtastic-1.2.46.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}