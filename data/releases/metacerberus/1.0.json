{
  "info": {
    "author": "Jose L. Figueroa III, Richard A. White III",
    "author_email": "jlfiguer@uncc.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Welcome to MetaCerberus\n\n## About \nMetaCerberus transforms raw shotgun metaomics sequencing (i.e. metagenomics/metatranscriptomic) data into knowledge. It is a start to finish python code for versatile analysis of the Functional Ontology Assignments for Metagenomes (FOAM) database and KEGG via Hidden Markov Models (HMM) for whole ecosystem metabolomic analysis.\n\n![GitHub Logo](metacerberus_logo.jpg)\n\n## Installing MetaCerberus\n\n### Option 1) Anaconda\n\n- Anaconda install from bioconda with all dependencies:\n\n```\nconda create -n metacerberus -c conda-forge -c bioconda metacerberus -y\nconda activate metacerberus\nmetacerberus.py --setup\n```\n\n### Option 2) Manual Install\n\n1. Clone github Repo\n\n```\ngit clone https://github.com/raw-lab/metacerberus.git\n```\n\n2. Run Setup File\n\n```\ncd metacerberus\nbash install_metacerberus.sh\nconda activate metacerberus\nmetacerberus.py --setup\n```\n\nThis creates an anaconda environment called \"metacerberus\" with all dependencies installed.\n\n## Input formats\n\n- From any NextGen sequencing technology (from Illumina, PacBio, Oxford Nanopore)\n- type 1 raw reads (.fastq format)\n- type 2 nucleotide fasta (.fasta, .fa, .fna, .ffn format), assembled raw reads into contigs\n- type 3 protein fasta (.faa format), assembled contigs which genes are converted to amino acid sequence\n\n## Output Files\n\n- If an output directory is given, that folder will be created where all files are stored.\n- If no output directory is specified, the 'pipeline' subfolder will be created in the current directory.\n- Gage/Pathview R analysis provided as separate scripts within R. \n\n## Visualization of Outputs\n\n- We use Plotly to visualize the data\n- Once the program is executed the html reports with the visuals will be saved to the last step of the pipeline.\n- The HTML files require plotly.js to be present. One has been provided in the package and is saved to the report folder.\n\n## Quick start examples\n\n### Illumina data \n\n#### Bacterial, Archaea and Bacteriophage \n```\nconda activate metacerberus\nmetacerberus.py --prodigal [input_folder] --illumina --meta --dir_out [out_folder] \n```\n\n#### Eukaryotes and Viruses\n```\nconda activate metacerberus\nmetacerberus.py --fraggenescan [input_folder] --illumina --meta --dir_out [out_folder] \n```\n\n### Nanopore data \n\n#### Bacterial, Archaea and Bacteriophage\n```\nconda activate metacerberus\nmetacerberus.py --prodigal [input_folder]  --nanopore --meta --dir_out [out_folder]\n```\n\n#### Eukaryotes and Viruses\n```\nconda activate metacerberus\nmetacerberus.py --fraggenescan [input_folder] --nanopore --meta --dir_out [out_folder] \n```\n\n### PacBio data\n\n#### Microbial, Archaea and Bacteriophage\n```\nconda activate metacerberus\nmetacerberus.py --prodigal [input_folder]  --pacbio --meta --dir_out [out_folder]\n```\n\n#### Eukaryotes and Viruses\n```\nconda activate metacerberus\nmetacerberus.py --fraggenescan [input_folder]  --pacbio --meta --dir_out [out_folder]\n```\n\n### SUPER (both methods)\n```\nconda activate metacerberus\nmetacerberus.py --super [input_folder]  --pacbio/--nanopore/--illumina --meta --dir_out [out_folder]\n```\n\n- Note: Fraggenescan will work for prokaryotes and viruses/bacteriophage but prodigal will not work for eukaryotes. \n\n\n## Prerequisites and dependencies\n\n- python >= 3.7\n- MetaCerberus currently runs best with Python version 3.7, 3.8, 3.9 due to compatibility with dependencies.\n- MetaCerberus currently doesn't support Python 3.10 due to the \"Ray\" dependency. \n- Python 3.10 is not currently supported.\n\n### Available from Bioconda\n\n- fastqc - <https://github.com/s-andrews/FastQC>\n- fastp - <https://github.com/OpenGene/fastp>\n- porechop - <https://github.com/rrwick/Porechop>\n- bbmap - <https://sourceforge.net/projects/bbmap/> or <https://github.com/BioInfoTools/BBMap>\n- prodigal - <https://github.com/hyattpd/Prodigal>\n- hmmer - <https://github.com/EddyRivasLab/hmmer>\n\n- NOTE: The KEGG database contains KOs related to Human disease. It is possible that these will show up in the results, even when analyzing microbes.\n\n## MetaCerberus Options\n\n- If the metacerberus environment is not used, make sure the dependencies are in PATH or specified in the config file.\n- Run metacerberus.py with the options required for your project.\n\n```\nusage: metacerberus.py [-c CONFIG] [--prodigal PRODIGAL] [--fraggenescan FRAGGENESCAN] [--meta META] [--super SUPER] [--protein PROTEIN]\n                       [--illumina | --nanopore | --pacbio] [--setup] [--uninstall] [--dir_out DIR_OUT] [--scaffolds] [--minscore MINSCORE] [--cpus CPUS]\n                       [--chunker CHUNKER] [--replace] [--keep] [--hmm HMM] [--class CLASS] [--slurm_nodes SLURM_NODES] [--tmpdir TMPDIR] [--version] [-h]\n                       [--adapters ADAPTERS] [--control_seq CONTROL_SEQ]\n\noptional arguments:\n  --illumina            Specifies that the given FASTQ files are from Illumina\n  --nanopore            Specifies that the given FASTQ files are from Nanopore\n  --pacbio              Specifies that the given FASTQ files are from PacBio\n\nRequired arguments\nAt least one sequence is required.\n<accepted formats {.fastq .fasta .faa .fna .ffn .rollup}>\nExample:\n> metaerberus.py --prodigal file1.fasta\n> metacerberus.py --config file.config\n*Note: If a sequence is given in .fastq format, one of --nanopore, --illumina, or --pacbio is required.:\n  -c CONFIG, --config CONFIG\n                        Path to config file, command line takes priority\n  --prodigal PRODIGAL   Prokaryote nucleotide sequence (includes microbes, bacteriophage)\n  --fraggenescan FRAGGENESCAN\n                        Eukaryote nucleotide sequence (includes other viruses, works all around for everything)\n  --meta META           Metagenomic nucleotide sequences (Uses prodigal)\n  --super SUPER         Run sequence in both --prodigal and --fraggenescan modes\n  --protein PROTEIN, --amino PROTEIN\n                        Protein Amino Acid sequence\n\noptional arguments:\n  --setup               Set this flag to ensure dependencies are setup [False]\n  --uninstall           Set this flag to remove downloaded databases and FragGeneScan+ [False]\n  --dir_out DIR_OUT     path to output directory, creates \"pipeline\" folder. Defaults to current directory. [./meta_cerberus]\n  --scaffolds           Sequences are treated as scaffolds [False]\n  --minscore MINSCORE   Filter for parsing HMMER results [25]\n  --cpus CPUS           Number of CPUs to use per task. System will try to detect available CPUs if not specified [Auto Detect]\n  --chunker CHUNKER     Split files into smaller chunks, in Megabytes [Disabled by default]\n  --replace             Flag to replace existing files. [False]\n  --keep                Flag to keep temporary files. [False]\n  --hmm HMM             Specify a custom HMM file for HMMER. Default uses downloaded FOAM HMM Database\n  --class CLASS         path to a tsv file which has class information for the samples. If this file is included scripts will be included to run Pathview in R\n  --slurm_nodes SLURM_NODES\n                        list of node hostnames from SLURM, i.e. $SLURM_JOB_NODELIST\n  --tmpdir TMPDIR       temp directory for RAY [system tmp dir]\n  --version, -v         show the version number and exit\n  -h, --help            show this help message and exit\n\n  --adapters ADAPTERS   FASTA File containing adapter sequences for trimming\n  --control_seq CONTROL_SEQ\n                        FASTA File containing control sequences for decontamination\n\nArgs that start with '--' (eg. --prodigal) can also be set in a config file (specified via -c). Config file syntax allows: key=value, flag=true, stuff=[a,b,c] (for\ndetails, see syntax at https://goo.gl/R74nmi). If an arg is specified in more than one place, then commandline values override config file values which override defaults.\n```\n\n### GAGE / PathView\n\nAfter processing the HMM files MetaCerberus calculates a KO (KEGG Orthology) counts table from KEGG/FOAM for processing through GAGE and PathView.\nGAGE is recommended for pathway enrichment followed by PathView for visualize the metabolic pathways. A \"class\" file is required through the --class option to run this analysis. The output is saved under the step_10-visualizeData/combined/pathview folder. Also, at least 4 samples need to be used for this type of analysis.  \n  \nGAGE and PathView also require internet access to be able to download information from a database. MetaCerberus will save a bash script 'run_pathview.sh' in the step_10-visualizeData/combined/pathview directory along with the KO Counts tsv files and the class file for running manualy in case MetaCerberus was run on a cluster without access to the internet.\n\n### Multiprocessing / Multi-Computing with RAY\n\nMetaCerberus uses Ray for distributed processing. This is compatible with both multiprocessing on a single node (computer) or multiple nodes in a cluster.  \nMetaCerberus has been tested on a cluster using Slurm <https://github.com/SchedMD/slurm>.  \n  \nA script has been included to facilitate running MetaCerberus on Slurm. To use MetaCerberus on a Slurm cluster, setup your slurm script and run it using sbatch.  \n\n```bash\nsbatch example_script.sh\n```\n\nexample script:  \n\n```bash\n#!/usr/bin/env bash\n\n#SBATCH --job-name=test-job\n#SBATCH --nodes=3\n#SBATCH --tasks-per-node=1\n#SBATCH --cpus-per-task=16\n#SBATCH --mem=128MB\n#SBATCH -e slurm-%j.err\n#SBATCH -o slurm-%j.out\n#SBATCH --mail-type=END,FAIL,REQUEUE\n\necho \"=====================================================\"\necho \"Start Time  : $(date)\"\necho \"Submit Dir  : $SLURM_SUBMIT_DIR\"\necho \"Job ID/Name : $SLURM_JOBID / $SLURM_JOB_NAME\"\necho \"Node List   : $SLURM_JOB_NODELIST\"\necho \"Num Tasks   : $SLURM_NTASKS total [$SLURM_NNODES nodes @ $SLURM_CPUS_ON_NODE CPUs/node]\"\necho \"======================================================\"\necho \"\"\n\n# Load any modules or resources here\nconda activate metacerberus\n# source the slurm script to initialize the Ray worker nodes\nsource ray-slurm-metacerberus.sh\n# run MetaCerberus\nmetacerberus.py --prodigal [input_folder] --illumina --dir_out [out_folder]\n\necho \"\"\necho \"======================================================\"\necho \"End Time   : $(date)\"\necho \"======================================================\"\necho \"\"\n```\n\n## Citing MetaCerberus\n\nMetaCerberus: python code for versatile Functional Ontology Assignments for Metagenomes (FOAM) database searching via Hidden Markov Models (HMM) with environmental focus of shotgun metaomics data. Preprints.\n\n## CONTACT\n\nThe informatics point-of-contact for this project is [Dr. Richard Allen White III](https://github.com/raw-lab).  \nIf you have any questions or feedback, please feel free to get in touch by email.  \nDr. Richard Allen White III - rwhit101@uncc.edu or raw937@gmail.com.  \nJose L. Figueroa III - jlfiguer@uncc.edu  \nOr [open an issue](https://github.com/raw-lab/metacerberus/issues).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/raw-lab/metacerberus",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MetaCerberus",
    "package_url": "https://pypi.org/project/MetaCerberus/",
    "platform": "Unix",
    "project_url": "https://pypi.org/project/MetaCerberus/",
    "project_urls": {
      "Homepage": "https://github.com/raw-lab/metacerberus"
    },
    "release_url": "https://pypi.org/project/MetaCerberus/1.0/",
    "requires_dist": null,
    "requires_python": "<3.10",
    "summary": "Versatile Functional Ontology Assignments for Metagenomes via Hidden Markov Model (HMM) searching with environmental focus of shotgun meta'omics data",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13938688,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7c437a9597b039b08a179a990ff45ede4c2ee56cd50431ca2efe08c08c0451f",
        "md5": "8be902984491da6b7deb4dd348b69c0f",
        "sha256": "dba98a71d0d13e63b66bcadc28408f5b3f6f76e87e6b9c90e03516ccc0c4cf2b"
      },
      "downloads": -1,
      "filename": "MetaCerberus-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8be902984491da6b7deb4dd348b69c0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<3.10",
      "size": 2897995,
      "upload_time": "2022-05-25T23:08:43",
      "upload_time_iso_8601": "2022-05-25T23:08:43.337282Z",
      "url": "https://files.pythonhosted.org/packages/f7/c4/37a9597b039b08a179a990ff45ede4c2ee56cd50431ca2efe08c08c0451f/MetaCerberus-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}