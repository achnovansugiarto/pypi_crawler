{
  "info": {
    "author": "Andy Babic",
    "author_email": "andyjbabic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# django-querystring-tag\n\nThis tiny package adds the `{% querystring %}` tag: A powerful, well tested template tag for modifying and rendering safe, suitably-encoded querystring values.\n\nIt's the clean and simple way to create pagination links, filters and other state-preserving links, without cluttering up your view code!\n\n## Installation\n\n1.  Install the package from pypi:\n\n    **With Poetry**\n\n    ```console\n    $ poetry add django-querystring-tag\n    ```\n\n    **With pip**\n\n    ```console\n    $ pip install django-querystring-tag\n    ```\n\n2.  Add `\"querystring_tag\"` to the `INSTALLED_APPS` list in your Django project settings.\n\n3.  Optional: To use the `{% querystring %}` tag freely, without having to `{% load %}` it into templates, add `\"querystring_tag.templatetags.querystring_tag\"` to the `['OPTIONS']['builtins']` list for your chosen template backend. [See an example](https://github.com/ababic/django-querystring-tag/blob/master/querystring_tag/testapp/settings.py#L36).\n\n## How to use\n\nLoad the tag in the templates where you want to use it, by adding the following to the template (usually at the top):\n\n```\n{% load querystring_tag %}\n```\n\n### Set or replace parameter values\n\nThe most common requirement is to completely replace the value for a specific parameter. This is done using a regular keyword argument, with an `=` operator between the parameter name and value. For example:\n\n```\n{% querystring foo=\"bar\" %}\n```\n\n### Remove a single parameter value\n\nWhen working with multi-value parameters, you may find yourself having to **remove** a specific value, without affecting any other values.\n\nIn these situations, you can use the `-=` operator instead of the usual `=`. For example, if the current querystring looked something like this:\n\n```\n?q=test&bar=1&bar=2&bar=3\n```\n\nAnd you wanted to remove `&bar=2`, your querystring tag might look like this:\n\n```\n{% querystring bar-=2 %}\n```\n\nIf the specified value isn't present, the instruction will simply be ignored.\n\n### Add a signle parameter value\n\nWhen working with multi-value parameters, you may find yourself having to **add** a specific value for a parameter, without affecting any other values.\n\nIn these situations, you can use the `+=` operator instead of the usual `=`. For example, if the current querystring looked something like this:\n\n```\n?q=test&bar=1&bar=2&bar=3\n```\n\nAnd you wanted to add `&bar=4`, your querystring tag might look like this:\n\n```\n{% querystring bar+=4 %}```\n```\n\nIf the specified value is already present, the instruction will simply be ignored.\n\n### Use template variables anywhere!\n\nUnlike a lot of custom template tags, `{% querystring %}` supports the use of template variables in keys as well as values. For example, if the tag was being used to generate pagination links, and ``page_param_name`` and ``page_num`` were variables available in the template, you could use them both like so:\n\n```\n{% querystring page_param_name=page_num %}\n```\n\n### Supported value types\n\nValues can be strings, booleans, integers, dates, datetimes, Django model instances, or iterables of either of these values.\n\nWhen encountering a Django model instance, `{% querystring %}` will automatically take the `pk` value from it, and use that to modify the querystring. To use a different field value, you can use the tag's `model_value_field` option (see further down for details). Alternatively, you can add a `querystring_value_field` attribute to your model class. For example:\n\n```python\nclass Category(models.Model):\n    name = models.CharField(max_length=50)\n    slug = models.SlugField(max_length=50, unique=True)\n\n    # use 'slug' values in querystrings\n    querystring_value_field = \"slug\"\n```\n\n### Specifying multiple values\n\nAs mentioned above, you can provide an iterable as a value to specify multiple values for a parameter at once. That could be a native Python type, such as a `list`, `tuple` or `set`, but could also be anything that implements the `__iter__` method to support iteration, for example, a `QuerySet`.\n\nFor example, if the context contained a variable ``tag_list``, which was list of strings (```['tag1', 'tag2', 'tag3']```), you can include all\nof those values by referencing the list value. For example:\n\n```\n{% querystring tags=tag_list %}\n```\n\nThe output of the above would be:\n\n```\n\"?tags=tag1&amp;tags=tag2&amp;tags=tag3\"\n```\n\n### Options reference\n\n#### `source_data`\n\n**Supported value types**: `QueryDict`, `dict`, `str`\n\n**Default value**: `request.GET`\n\nThe tag defaults to using ``request.GET`` as the data source for the querystring, but the `source_data` keyword argument can be used to specify use an alternative ``QueryDict``, ``dict`` or string value.\n\nFor example, say you were using a Django form to validate query data, and only want valid data to be included. You could use the Form's `cleaned_data` to generate a querystring instead:\n\n```\n{% load querystring_tag %}\n{% querystring source_data=form.cleaned_data page=2 %}\n```\n\n#### `remove_blank`\n\n**Supported value types**: `bool`\n\n**Default value**: `True`\n\nAny parameter values with a value of `None` or `\"\"` (an empty string) are removed from the querystring default.\n\nTo retain blank values, include `remove_blank=False` in your `{% querystring %}` tag.\n\n#### `remove_utm`\n\n**Supported value types**: `bool`\n\n**Default value**: `True`\n\nParameter names starting with `\"utm_\"` (the format used for Google Analytics tracking parameters) are exluded from the generated querystrings by default, as it's unlikley that you'll want these to be repeated in links to other pages.\n\nTo retain these parameters instead, include `remove_utm=False` in your `{% querystring %}` tag.\n\n#### `model_value_field`\n\n**Supported value types**: `str`\n\n**Default value**: `\"pk\"`\n\nBy default, when encountering a Django model instance as a value, `{% querystring %}` will take the `pk` value from the instance to use in the querystring. If you'd like to use a different field value, you can use the `model_value_field` option to specify an alternative field.\n\nFor example, if the model had a `slug` field that you were using as the public-facing identifier, you could specify that `slug` values be used in the querystring, like so:\n\n```\n{% querystring tags=tag_queryset model_field_value='slug' %}\n```\n\n#### `only`\n\nUse this option at the start of your `{% querystring %}` tag when you only want the querystring to include values for specific parameters.\n\nFor example, say the current querystring looked like this:\n\n```\n?q=keywords&group=articles&category=2&published_after=2022-01-01\n```\n\nAnd you wanted to render a querystring containing only the `q` and `group` params. You could use `only` to achieve this:\n\n```\n{% load querystring_tag %}\n{% querystring only 'q' 'group' %}\n```\n\nThe resulting string would be:\n\n```\n?q=keywords&group=articles\n```\n\nNOTE: `only` is compatible with every other option except for `discard`. It can even be combined with any number of modifying keyword arguments; Just remember to keep the `only` keyword and related field names as the left-most parameters.\n\n#### `discard`\n\nUse this option at the start of your `{% querystring %}` tag when you want exclude specific parameter values from the querystring.\n\nFor example, say the current querystring looked like this:\n\n```\n?q=keywords&group=articles&category=2&published_after=2022-01-01\n```\n\nAnd you wanted to preserve everything except for `group` `published_after` in the rendered querystring. You could use `discard` to achieve this:\n\n```\n{% load querystring_tag %}\n{% querystring discard 'group' 'published_after' %}\n```\n\nNOTE: `discard` is compatible with every other option except for `only`. It can even be combined with any number of modifying keyword arguments; Just remember to keep the `discard` keyword and related field names as the left-most parameters.\n\n## Testing the code locally\n\nIf you have a recent version of Python 3 installed, you can use a simple virtualenv to run tests locally. After cloning the repository, navigate to the project's root directory on your machine, then run the following:\n\n### To create the virtualenv\n\n```console\n$ virtualenv venv\n$ source venv/bin/activate\n$ pip install -e '.[test]' -U\n$ deactivate\n```\n\n### To run tests\n\n```console\n$ source venv/bin/activate\n$ pytest\n$ deactivate\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "django querystring GET parameters pagination filter state-preserving link template tag util",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-querystring-tag",
    "package_url": "https://pypi.org/project/django-querystring-tag/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-querystring-tag/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/django-querystring-tag/1.0.1/",
    "requires_dist": [
      "Django (>=3.1)",
      "black (==22.3.0) ; extra == 'lint'",
      "isort (==5.9.3) ; extra == 'lint'",
      "flake8 (==3.9.2) ; extra == 'lint'",
      "pytest-cov (==2.12.1) ; extra == 'test'",
      "pytest-mock (==3.6.1) ; extra == 'test'",
      "pytest-django (==4.4.0) ; extra == 'test'",
      "pytest (==6.2.4) ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16520071,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d37cbbb1af08d3311dfe79c2cbdfe0058bf2a8e3b5b39691db2daa7a7e0c330",
        "md5": "8d23b9ee0a92096ca6e1ea3683bd99f9",
        "sha256": "26e2ea50bf0f7ae305afbbd002bef2ee279f78873443049d5558f14de43aa591"
      },
      "downloads": -1,
      "filename": "django_querystring_tag-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8d23b9ee0a92096ca6e1ea3683bd99f9",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 14054,
      "upload_time": "2022-04-29T22:58:16",
      "upload_time_iso_8601": "2022-04-29T22:58:16.113393Z",
      "url": "https://files.pythonhosted.org/packages/1d/37/cbbb1af08d3311dfe79c2cbdfe0058bf2a8e3b5b39691db2daa7a7e0c330/django_querystring_tag-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48bcb67a77206282fde98345195be80c9180757fc64d20ae50e02fb38009ef28",
        "md5": "7c129b84997b97da917e44291626cbd5",
        "sha256": "913bf6422cb6944c1f6a734a3013445b6cd449da25b473cdc72fe444d753b40c"
      },
      "downloads": -1,
      "filename": "django-querystring-tag-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7c129b84997b97da917e44291626cbd5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12940,
      "upload_time": "2022-04-29T22:58:17",
      "upload_time_iso_8601": "2022-04-29T22:58:17.709382Z",
      "url": "https://files.pythonhosted.org/packages/48/bc/b67a77206282fde98345195be80c9180757fc64d20ae50e02fb38009ef28/django-querystring-tag-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}