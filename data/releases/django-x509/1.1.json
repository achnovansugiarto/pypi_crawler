{
  "info": {
    "author": "Federico Capoano",
    "author_email": "f.capoano@cineca.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Security :: Cryptography"
    ],
    "description": "django-x509\n===========\n\n.. image:: https://github.com/openwisp/django-x509/workflows/Django-x509%20Build/badge.svg?branch=master\n   :target: https://github.com/openwispdjango-x509/actions?query=workflow%3A\"Django-x509+Build%22\"\n   :alt: CI build status\n\n.. image:: https://coveralls.io/repos/openwisp/django-x509/badge.svg\n   :target: https://coveralls.io/r/openwisp/django-x509\n   :alt: Test Coverage\n\n.. image:: https://img.shields.io/librariesio/release/github/openwisp/django-x509\n   :target: https://libraries.io/github/openwisp/django-x509#repository_dependencies\n   :alt: Dependency monitoring\n\n.. image:: https://img.shields.io/gitter/room/nwjs/nw.js.svg\n   :target: https://gitter.im/openwisp/general\n   :alt: chat\n\n.. image:: https://badge.fury.io/py/django-x509.svg\n   :target: http://badge.fury.io/py/django-x509\n   :alt: Pypi Version\n\n.. image:: https://pepy.tech/badge/django-x509\n   :target: https://pepy.tech/project/django-x509\n   :alt: downloads\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://pypi.org/project/black/\n   :alt: code style: black\n\n------------\n\n.. image:: https://github.com/openwisp/django-x509/raw/master/docs/demo_x509.gif\n   :alt: demo\n\n------------\n\nSimple reusable django app implementing x509 PKI certificates management.\n\n**Want to help OpenWISP?** `Find out how to help us grow here\n<http://openwisp.io/docs/general/help-us.html>`_.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp2-docs/master/assets/design/openwisp-logo-black.svg\n  :target: http://openwisp.org\n\n------------\n\n.. contents:: **Table of Contents**:\n   :backlinks: none\n   :depth: 3\n\n------------\n\nCurrent features\n----------------\n\n* CA generation\n* Import existing CAs\n* End entity certificate generation\n* Import existing certificates\n* Certificate revocation\n* CRL view (public or protected)\n* Possibility to specify x509 extensions on each certificate\n* Random serial numbers based on uuid4 integers (see `why is this a good idea\n  <https://crypto.stackexchange.com/questions/257/unpredictability-of-x-509-serial-numbers>`_)\n* Possibility to generate and import passphrase protected x509 certificates/CAs\n* Passphrase protected x509 content will be shown encrypted in the web UI\n\nProject goals\n-------------\n\n* provide a simple and reusable x509 PKI management django app\n* provide abstract models that can be imported and extended in larger django projects\n\nDependencies\n------------\n\n* Python >= 3.7\n* OpenSSL\n\nInstall stable version from pypi\n--------------------------------\n\nInstall from pypi:\n\n.. code-block:: shell\n\n    pip install django-x509\n\nInstall development version\n---------------------------\n\nInstall tarball:\n\n.. code-block:: shell\n\n    pip install https://github.com/openwisp/django-x509/tarball/master\n\nAlternatively you can install via pip using git:\n\n.. code-block:: shell\n\n    pip install -e git+git://github.com/openwisp/django-x509#egg=django-x509\n\nIf you want to contribute, install your cloned fork:\n\n.. code-block:: shell\n\n    git clone git@github.com:<your_fork>/django-x509.git\n    cd django-x509\n    python setup.py develop\n\nSetup (integrate in an existing django project)\n-----------------------------------------------\n\nAdd ``django_x509`` to ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # other apps\n        'django_x509',\n    ]\n\nAdd the URLs to your main ``urls.py``:\n\n.. code-block:: python\n\n    from django.contrib import admin\n\n    urlpatterns = [\n        # ... other urls in your project ...\n\n        url(r'admin/', admin.site.urls),\n    ]\n\nThen run:\n\n.. code-block:: shell\n\n    ./manage.py migrate\n\nInstalling for development\n--------------------------\n\nInstall sqlite:\n\n.. code-block:: shell\n\n    sudo apt-get install sqlite3 libsqlite3-dev\n\nInstall your forked repo:\n\n.. code-block:: shell\n\n    git clone git://github.com/<your_fork>/django-x509\n    cd django-x509/\n    python setup.py develop\n\nInstall test requirements:\n\n.. code-block:: shell\n\n    pip install -r requirements-test.txt\n\nCreate database:\n\n.. code-block:: shell\n\n    cd tests/\n    ./manage.py migrate\n    ./manage.py createsuperuser\n\nLaunch development server:\n\n.. code-block:: shell\n\n    ./manage.py runserver\n\nYou can access the admin interface at http://127.0.0.1:8000/admin/.\n\nRun tests with:\n\n.. code-block:: shell\n\n    ./runtests.py\n\nInstall and run on docker\n--------------------------\n\nBuild from docker file:\n\n.. code-block:: shell\n\n   sudo docker build -t openwisp/djangox509 .\n\nRun the docker container:\n\n.. code-block:: shell\n\n   sudo docker run -it -p 8000:8000 openwisp/djangox509\n\nSettings\n--------\n``DJANGO_X509_DEFAULT_CERT_VALIDITY``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``int``     |\n+--------------+-------------+\n| **default**: | ``365``     |\n+--------------+-------------+\n\nDefault validity period (in days) when creating new x509 certificates.\n\n\n``DJANGO_X509_DEFAULT_CA_VALIDITY``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``int``     |\n+--------------+-------------+\n| **default**: | ``3650``    |\n+--------------+-------------+\n\nDefault validity period (in days) when creating new Certification Authorities.\n\n``DJANGO_X509_DEFAULT_KEY_LENGTH``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``int``     |\n+--------------+-------------+\n| **default**: | ``2048``    |\n+--------------+-------------+\n\nDefault key length for new CAs and new certificates.\n\nMust be one of the following values:\n\n* ``512``\n* ``1024``\n* ``2048``\n* ``4096``\n\n``DJANGO_X509_DEFAULT_DIGEST_ALGORITHM``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``str``     |\n+--------------+-------------+\n| **default**: | ``sha256``  |\n+--------------+-------------+\n\nDefault digest algorithm for new CAs and new certificates.\n\nMust be one of the following values:\n\n* ``sha1``\n* ``sha224``\n* ``sha256``\n* ``sha384``\n* ``sha512``\n\n``DJANGO_X509_CA_BASIC_CONSTRAINTS_CRITICAL``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------+\n| **type**:    | ``bool``  |\n+--------------+-----------+\n| **default**: | ``True``  |\n+--------------+-----------+\n\nWhether the ``basicConstraint`` x509 extension must be flagged as critical when creating new CAs.\n\n``DJANGO_X509_CA_BASIC_CONSTRAINTS_PATHLEN``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+---------------------+\n| **type**:    | ``int`` or ``None`` |\n+--------------+---------------------+\n| **default**: | ``0``               |\n+--------------+---------------------+\n\nValue of the ``pathLenConstraint`` of ``basicConstraint`` x509 extension used when creating new CAs.\n\nWhen this value is a positive ``int`` it represents the maximum number of non-self-issued\nintermediate certificates that may follow the generated certificate in a valid certification path.\n\nSet this value to ``None`` to avoid imposing any limit.\n\n``DJANGO_X509_CA_KEYUSAGE_CRITICAL``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------------------+\n| **type**:    | ``bool``                 |\n+--------------+--------------------------+\n| **default**: | ``True``                 |\n+--------------+--------------------------+\n\nWhether the ``keyUsage`` x509 extension should be flagged as \"critical\" for new CAs.\n\n``DJANGO_X509_CA_KEYUSAGE_VALUE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------------------+\n| **type**:    | ``str``                  |\n+--------------+--------------------------+\n| **default**: | ``cRLSign, keyCertSign`` |\n+--------------+--------------------------+\n\nValue of the ``keyUsage`` x509 extension for new CAs.\n\n``DJANGO_X509_CERT_KEYUSAGE_CRITICAL``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------------------+\n| **type**:    | ``bool``                 |\n+--------------+--------------------------+\n| **default**: | ``False``                |\n+--------------+--------------------------+\n\nWhether the ``keyUsage`` x509 extension should be flagged as \"critical\" for new\nend-entity certificates.\n\n``DJANGO_X509_CERT_KEYUSAGE_VALUE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+---------------------------------------+\n| **type**:    | ``str``                               |\n+--------------+---------------------------------------+\n| **default**: | ``digitalSignature, keyEncipherment`` |\n+--------------+---------------------------------------+\n\nValue of the ``keyUsage`` x509 extension for new end-entity certificates.\n\n``DJANGO_X509_CRL_PROTECTED``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------+\n| **type**:    | ``bool``  |\n+--------------+-----------+\n| **default**: | ``False`` |\n+--------------+-----------+\n\nWhether the view for downloading Certificate Revocation Lists should\nbe protected with authentication or not.\n\nExtending django-x509\n---------------------\n\nOne of the core values of the OpenWISP project is `Software Reusability <http://openwisp.io/docs/general/values.html#software-reusability-means-long-term-sustainability>`_,\nfor this reason *django-x509* provides a set of base classes\nwhich can be imported, extended and reused to create derivative apps.\n\nIn order to implement your custom version of *django-x509*,\nyou need to perform the steps described in this section.\n\nWhen in doubt, the code in the `test project <https://github.com/openwisp/django-x509/tree/master/tests/openwisp2/>`_\nand the `sample app <https://github.com/openwisp/django-x509/tree/master/tests/openwisp2/sample_x509/>`_\nwill serve you as source of truth:\njust replicate and adapt that code to get a basic derivative of\n*django-x509* working.\n\n**Premise**: if you plan on using a customized version of this module,\nwe suggest to start with it since the beginning, because migrating your data\nfrom the default module to your extended version may be time consuming.\n\n1. Initialize your custom module\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe first thing you need to do is to create a new django app which will\ncontain your custom version of *django-x509*.\n\nA django app is nothing more than a\n`python package <https://docs.python.org/3/tutorial/modules.html#packages>`_\n(a directory of python scripts), in the following examples we'll call this django app\n``myx509``, but you can name it how you want::\n\n    django-admin startapp myx509\n\nKeep in mind that the command mentioned above must be called from a directory\nwhich is available in your `PYTHON_PATH <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH>`_\nso that you can then import the result into your project.\n\nNow you need to add ``myx509`` to ``INSTALLED_APPS`` in your ``settings.py``,\nensuring also that ``django_x509`` has been removed:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # ... other apps ...\n        # 'django_x509'  <-- comment out or delete this line\n        'myx509'\n    ]\n\nFor more information about how to work with django projects and django apps,\nplease refer to the `django documentation <https://docs.djangoproject.com/en/dev/intro/tutorial01/>`_.\n\n2. Install ``django-x509`` & ``openwisp-utils``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall (and add to the requirement of your project)::\n\n    pip install django-x509 openwisp-utils\n\n3. Add ``EXTENDED_APPS``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd the following to your ``settings.py``:\n\n.. code-block:: python\n\n    EXTENDED_APPS = ['django_x509']\n\n4. Add ``openwisp_utils.staticfiles.DependencyFinder``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_utils.staticfiles.DependencyFinder`` to\n``STATICFILES_FINDERS`` in your ``settings.py``:\n\n.. code-block:: python\n\n    STATICFILES_FINDERS = [\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n        'openwisp_utils.staticfiles.DependencyFinder',\n    ]\n\n5. Add ``openwisp_utils.loaders.DependencyLoader``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_utils.loaders.DependencyLoader`` to ``TEMPLATES`` in your ``settings.py``:\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'OPTIONS': {\n                'loaders': [\n                    'django.template.loaders.filesystem.Loader',\n                    'django.template.loaders.app_directories.Loader',\n                    'openwisp_utils.loaders.DependencyLoader',\n                ],\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                ],\n            },\n        }\n    ]\n\n6. Inherit the AppConfig class\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the following files in the sample app of the test project:\n\n- `sample_x509/__init__.py <https://github.com/openwisp/django-x509/tree/master/tests/openwisp2/sample_x509/__init__.py>`_.\n- `sample_x509/apps.py <https://github.com/openwisp/django-x509/tree/master/tests/openwisp2/sample_x509/apps.py>`_.\n\nYou have to replicate and adapt that code in your project.\n\nFor more information regarding the concept of ``AppConfig`` please refer to\nthe `\"Applications\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/applications/>`_.\n\n7. Create your custom models\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHere we provide an example of how to extend the base models of\n*django-x509*. We added a simple \"details\" field to the\nmodels for demostration of modification:\n\n.. code-block:: python\n\n    from django.db import models\n    from django_x509.base.models import AbstractCa, AbstractCert\n\n    class DetailsModel(models.Model):\n        details = models.CharField(max_length=64, blank=True, null=True)\n\n        class Meta:\n            abstract = True\n\n    class Ca(DetailsModel, AbstractCa):\n        \"\"\"\n        Concrete Ca model\n        \"\"\"\n        class Meta(AbstractCa.Meta):\n            abstract = False\n\n    class Cert(DetailsModel, AbstractCert):\n        \"\"\"\n        Concrete Cert model\n        \"\"\"\n        class Meta(AbstractCert.Meta):\n            abstract = False\n\nYou can add fields in a similar way in your ``models.py`` file.\n\n**Note**: for doubts regarding how to use, extend or develop models please refer to\nthe `\"Models\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/db/models/>`_.\n\n8. Add swapper configurations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOnce you have created the models, add the following to your ``settings.py``:\n\n.. code-block:: python\n\n    # Setting models for swapper module\n    DJANGO_X509_CA_MODEL = 'myx509.Ca'\n    DJANGO_X509_CERT_MODEL = 'myx509.Cert'\n\nSubstitute ``myx509`` with the name you chose in step 1.\n\n9. Create database migrations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate and apply database migrations::\n\n    ./manage.py makemigrations\n    ./manage.py migrate\n\nFor more information, refer to the\n`\"Migrations\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/migrations/>`_.\n\n10. Create the admin\n~~~~~~~~~~~~~~~~~~~~\n\nRefer to the `admin.py file of the sample app <https://github.com/openwisp/django-x509/tree/master/tests/openwisp2/sample_x509/admin.py>`_.\n\nTo introduce changes to the admin, you can do it in two main ways which are described below.\n\n**Note**: for more information regarding how the django admin works, or how it can be customized,\nplease refer to `\"The django admin site\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/contrib/admin/>`_.\n\n1. Monkey patching\n##################\n\nIf the changes you need to add are relatively small, you can resort to monkey patching.\n\nFor example:\n\n.. code-block:: python\n\n    from django_x509.admin import CaAdmin, CertAdmin\n\n    # CaAdmin.list_display.insert(1, 'my_custom_field') <-- your custom change example\n    # CertAdmin.list_display.insert(1, 'my_custom_field') <-- your custom change example\n\n2. Inheriting admin classes\n###########################\n\nIf you need to introduce significant changes and/or you don't want to resort to\nmonkey patching, you can proceed as follows:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from swapper import load_model\n\n    from django_x509.base.admin import AbstractCaAdmin, AbstractCertAdmin\n\n    Ca = load_model('django_x509', 'Ca')\n    Cert = load_model('django_x509', 'Cert')\n\n    class CertAdmin(AbstractCertAdmin):\n        # add your changes here\n\n    class CaAdmin(AbstractCaAdmin):\n        # add your changes here\n\n    admin.site.register(Ca, CaAdmin)\n    admin.site.register(Cert, CertAdmin)\n\n11. Create root URL configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the `urls.py <https://github.com/openwisp/django-x509/tree/master/tests/openwisp2/urls.py>`_\nfile in the test project.\n\nFor more information about URL configuration in django, please refer to the\n`\"URL dispatcher\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/http/urls/>`_.\n\n12. Import the automated tests\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen developing a custom application based on this module, it's a good\nidea to import and run the base tests too, so that you can be sure the changes\nyou're introducing are not breaking some of the existing features of *django-x509*.\n\nIn case you need to add breaking changes, you can overwrite the tests defined\nin the base classes to test your own behavior.\n\n.. code-block:: python\n\n    from django.test import TestCase\n    from django_x509.tests.base import TestX509Mixin\n    from django_x509.tests.test_admin import ModelAdminTests as BaseModelAdminTests\n    from django_x509.tests.test_ca import TestCa as BaseTestCa\n    from django_x509.tests.test_cert import TestCert as BaseTestCert\n\n    class ModelAdminTests(BaseModelAdminTests):\n        app_label = 'myx509'\n\n    class TestCert(BaseTestCert):\n        pass\n\n    class TestCa(BaseTestCa):\n        pass\n\n    del BaseModelAdminTests\n    del BaseTestCa\n    del BaseTestCert\n\nNow, you can then run tests with::\n\n    # the --parallel flag is optional\n    ./manage.py test --parallel myx509\n\nSubstitute ``myx509`` with the name you chose in step 1.\n\nFor more information about automated tests in django, please refer to\n`\"Testing in Django\" <https://docs.djangoproject.com/en/dev/topics/testing/>`_.\n\nContributing\n------------\n\nPlease refer to the `OpenWISP contributing guidelines <http://openwisp.io/docs/developer/contributing.html>`_.\n\nSupport\n-------\n\nSee `OpenWISP Support Channels <http://openwisp.org/support.html>`_.\n\nChangelog\n---------\n\nSee `CHANGES <https://github.com/openwisp/django-x509/blob/master/CHANGES.rst>`_.\n\nLicense\n-------\n\nSee `LICENSE <https://github.com/openwisp/django-x509/blob/master/LICENSE>`_.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/openwisp/django-x509/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/openwisp/django-x509",
    "keywords": "django,x509,pki,PEM,openwisp",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-x509",
    "package_url": "https://pypi.org/project/django-x509/",
    "platform": "Platform Indipendent",
    "project_url": "https://pypi.org/project/django-x509/",
    "project_urls": {
      "Download": "https://github.com/openwisp/django-x509/releases",
      "Homepage": "https://github.com/openwisp/django-x509"
    },
    "release_url": "https://pypi.org/project/django-x509/1.1/",
    "requires_dist": [
      "django (<=4.1.0,>=3.0.0)",
      "openwisp-utils (~=1.0.0)",
      "jsonfield (<4.0.0,>=3.1.0)",
      "cryptography (~=36.0.0)",
      "pyopenssl (~=21.0.0)"
    ],
    "requires_python": "",
    "summary": "Reusable django app to generate and manage x509 certificates",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13571028,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d64f9a525b85f2e0c9bf323d0dd6aaf851c2d125e7109789a276b3b166f0545",
        "md5": "4a9561c4f005b42524553fe01402984f",
        "sha256": "e70ff5bf0bcc3fe511057c9667e7a1f0b34dd67e8f4b85bf5a4f8095c99af252"
      },
      "downloads": -1,
      "filename": "django_x509-1.1-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "4a9561c4f005b42524553fe01402984f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 52726,
      "upload_time": "2022-04-20T19:28:17",
      "upload_time_iso_8601": "2022-04-20T19:28:17.843497Z",
      "url": "https://files.pythonhosted.org/packages/5d/64/f9a525b85f2e0c9bf323d0dd6aaf851c2d125e7109789a276b3b166f0545/django_x509-1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10430511cc9029bada4ad979a19ec6c1c6f3ec5b9f1e4aaa02153ce4d883a9ed",
        "md5": "ae3401de9bd93336bb21aef77c8ab95e",
        "sha256": "3771ffed2a0b60a898ca338822d81bcbba2e99d90053441d38d52e15dd79c1af"
      },
      "downloads": -1,
      "filename": "django-x509-1.1.tar.gz",
      "has_sig": true,
      "md5_digest": "ae3401de9bd93336bb21aef77c8ab95e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 49693,
      "upload_time": "2022-04-20T19:28:20",
      "upload_time_iso_8601": "2022-04-20T19:28:20.516816Z",
      "url": "https://files.pythonhosted.org/packages/10/43/0511cc9029bada4ad979a19ec6c1c6f3ec5b9f1e4aaa02153ce4d883a9ed/django-x509-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}