{
  "info": {
    "author": "Develatio Technologies S.L.",
    "author_email": "contacto@develat.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Internationalization",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Localization"
    ],
    "description": "![PyPI](https://img.shields.io/pypi/v/django-walletpass.svg)\n![t](https://img.shields.io/badge/status-beta-red.svg)\n\n\n# django-walletpass\n\n\nThis application implements the creation of **signed .pkpass** files and\n**API endpoints** for pass registration, updates and logging.\n\n## Features\n\n- Build .pkpass with the `PassBuilder` class\n- Sign .pkpass with SMIME (as apple describes in their documentation)\n- Server implementation for store, registration, update and logging\n- Push notifications (APNs) on pass update\n- Individual storage backend setting\n- Support for mime-type upload using django-storages S3\n\n## Requirements\n\n- Django 2.*\n- Python >= 3.5\n- pyca/cryptography (for .pkpass SMIME sign)\n- djangorestframework >= 3.8\n\n## Getting Started\n\n### Install\n\n```\n$ pip install django-walletpass\n```\n\n### Configure\n\nAdd 'django_walletpass' to you installed apps in the settings.py file.\n\nLoad the content of your cert.pem and key.pem in your settings.py file.\n\n```\n\nWALLETPASS = {\n    'CERT_PATH': 'path/to/your/cert.pem',\n    'KEY_PATH': 'path/to/your/key.pem',\n    # (None if isn't protected)\n    # MUST be in bytes-like\n    'KEY_PASSWORD': b'1234',\n}\n```\n\nAdd extra needed conf to your settings.py file.\n\n```\nWALLETPASS = {\n    'CERT_PATH': 'path/to/your/cert.pem',\n    'KEY_PATH': 'path/to/your/key.pem',\n    # (None if isn't protected)\n    # MUST be in bytes-like\n    'KEY_PASSWORD': b'1234',\n\n    'PASS_TYPE_ID': 'pass.io.develat.devpubs.example',\n    'TEAM_ID': '123456',\n    'SERVICE_URL': 'https://example.com/passes/',\n}\n```\n\nIf you plan to use token JWT auth instead key/cert, use:\n\n```\nWALLETPASS = {\n    'PUSH_AUTH_STRATEGY': 'token',\n    'TOKEN_AUTH_KEY_PATH': 'path/to/your/key.p8',\n    'TOKEN_AUTH_KEY_ID': 'key_id',\n\n    'PASS_TYPE_ID': 'pass.io.develat.devpubs.example',\n    'TEAM_ID': '123456',\n    'SERVICE_URL': 'https://example.com/passes/',\n}\n```\n\n\nYou should also import the urls into your site urls.\n```\nurlpatterns = [\n    url(r'^api/passes/', include('django_walletpass.urls')),\n```\n\ndjango-walletpass signals certain events that might come handy in your\napplication.\n\n```\nfrom django_walletpass.views import pass_registered, pass_unregistered\n\n@receiver(pass_registered)\ndef pass_registered(sender, **kwargs):\n    pass\n\n@receiver(pass_unregistered)\ndef pass_unregistered(sender, **kwargs):\n    pass\n```\n\n\n### Configure storage and upload path (optional)\n\nDefault: DEFAULT_FILE_STORAGE\n\n```\nWALLETPASS_CONF = {\n    # Defaults to DEFAULT_FILE_STORAGE\n    'STORAGE_CLASS': 'my.custom.storageclass,\n    'UPLOAD_TO': 'passes'\n}\n```\n\n### Push notifications sandbox (optional)\n\nDefault: False\n\n```\nWALLETPASS_CONF = {\n    'PUSH_SANDBOX': False,\n}\n```\n\n### CA certificates path (optional)\n\n```\nWALLETPASS_CONF = {\n    # Cert in pem format.\n    'APPLE_WWDRCA_PEM_PATH': 'path/to/cert.pem',\n}\n```\n\n### Redirect to pass url (optional)\nUsefull if you are using `django-storages` and you want to serve your .pkpass\nfiles from `s3`.\n\nDefault: False\n\n```\nWALLETPASS_CONF = {\n    STORAGE_HTTP_REDIRECT: True,\n}\n```\n\n\n## Build and sign passes\n\n### Init builder object:\n\nInit empty builder\n\n```\nfrom django_walletpass.models import  PassBuilder\nbuilder = PassBuilder()\n```\n\nInit builder usign a directory as base\n\n```\nfrom django_walletpass.models import  PassBuilder\nbuilder = PassBuilder(directory='/path/to/your.pass/')\n```\n\nIf the base directory contains a `pass.json` it will be loaded, but remember\nthat required attributes of `pass.json` will be overwritten during build process\nusing this values:\n\n```\n{\n    \"passTypeIdentifier\": WALLETPASS_CONF['PASS_TYPE_ID'],\n    \"serialNumber\": secrets.token_urlsafe(20),\n    \"teamIdentifier\": WALLETPASS_CONF['TEAM_ID'],\n    \"webServiceURL\": WALLETPASS_CONF['SERVICE_URL'],\n    \"authenticationToken\": crypto.gen_random_token(),\n}\n```\n\n### Handle pass.json data\n\nTo handle `pass.json` data, there is a dict inside your builder instance, you\ncan manage it like a normal python dictionary.\n\n\nUpdate some attrs:\n\n```\nbuilder.pass_data.update({\n  \"barcode\": {\n    \"message\": \"123456789\",\n    \"format\": \"PKBarcodeFormatPDF417\",\n    \"messageEncoding\": \"iso-8859-1\"\n  },\n  \"organizationName\": \"Organic Produce\",\n  \"description\": \"Organic Produce Loyalty Card\",\n})\n```\n\nUpdate one attr:\n\n```\nbuilder.pass_data['description'] = \"Organic Produce Loyalty Card\"\n```\n\n### Overwrite automatically generated required attribute values\n\n```\nbuilder.pass_data_required.update({\n    \"passTypeIdentifier\": \"customvalue\",\n    \"serialNumber\": \"customvalue\",\n    \"teamIdentifier\": \"customvalue\",\n    \"webServiceURL\": \"customvalue\",\n    \"authenticationToken\": \"customvalue\",\n})\n```\n\nyou can overwrite individual attributes:\n\n\n```\nbuilder.pass_data_required.update({\n    \"serialNumber\": \"customvalue\",\n})\nbuilder.pass_data_required['serialNumber] = 'cutomvalue'\n```\n\n### Add extra files\n\n```\nfile_content = open('myfile', 'rb').read()\nbuilder.add_file('image.png', file_content)\n```\n\nYou can also add files to directories:\n\n```\nfile_content = open('myfile', 'rb').read()\nbuilder.add_file('en.lproj/pass.strings', file_content)\n```\n\n\n### Build .pkpass\n\nBuild the content of .pkpass\n\n```\npkpass_content = builder.build()\n```\n\nWrite to file:\n\n```\npkpass_file = open('mypass.pkpass', 'rb')\npkpass_file.write(pkpass_content)\n```\n\nSave to new record in DB:\n\n```\npass_instance = builder.write_to_model()\npass_instance.save()\n```\n\nSave to existent record in DB:\n\n```\nbuilder.write_to_model(pass_instance)\npass_instance.save()\n```\n\n### Load .pkpass from DB and update\n\n```\nbuilder = pass_instance.get_pass_builder()\nbuilder.pass_data.update({'field': 'value'})\nbuilder.build()\nbuilder.save_to_db(pass_instance)\n```\n\n### Run tests locally\n\nCheckout source and run from source root directory\n\n```\ndocker run -it --rm -v \"$(pwd):/app\" python:3.8 bash -c \"cd /app; python setup.py install; ./example/manage.py test django_walletpass\"\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/develatio/django-walletpass/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-walletpass",
    "package_url": "https://pypi.org/project/django-walletpass/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-walletpass/",
    "project_urls": {
      "Homepage": "http://github.com/develatio/django-walletpass/"
    },
    "release_url": "https://pypi.org/project/django-walletpass/2.0/",
    "requires_dist": [
      "Django (>=2.0)",
      "cryptography (>=2.4.2)",
      "apns2 (>=0.7.1)",
      "pyopenssl",
      "djangorestframework (>=3.8)"
    ],
    "requires_python": ">=3.5.0",
    "summary": "Django .pkpass builder, server and push notifications",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16363051,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "74a07da6ceec792b6f80d2bb764b03bdae91af6f2eb89b58b381ac44bdc81468",
        "md5": "4050b5ef23111025f4a384921f89d46f",
        "sha256": "f9cdec300e24115ad36768e65ef9e9eb794c3c0f7483861612bfb336be2fd34c"
      },
      "downloads": -1,
      "filename": "django_walletpass-2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4050b5ef23111025f4a384921f89d46f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5.0",
      "size": 22702,
      "upload_time": "2023-01-09T17:25:15",
      "upload_time_iso_8601": "2023-01-09T17:25:15.958513Z",
      "url": "https://files.pythonhosted.org/packages/74/a0/7da6ceec792b6f80d2bb764b03bdae91af6f2eb89b58b381ac44bdc81468/django_walletpass-2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b078a7fda309cf7c3cddb27b1f0223bded54f5dd5f21e917f97fab65e8ebe331",
        "md5": "d02b2030095253e43c6fb0c8289c3f10",
        "sha256": "4c55b274e38544a29c5a72aa6da54634cf4dda997e5ae6229672e4faeea13e37"
      },
      "downloads": -1,
      "filename": "django-walletpass-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d02b2030095253e43c6fb0c8289c3f10",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.0",
      "size": 18896,
      "upload_time": "2023-01-09T17:25:17",
      "upload_time_iso_8601": "2023-01-09T17:25:17.690194Z",
      "url": "https://files.pythonhosted.org/packages/b0/78/a7fda309cf7c3cddb27b1f0223bded54f5dd5f21e917f97fab65e8ebe331/django-walletpass-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}