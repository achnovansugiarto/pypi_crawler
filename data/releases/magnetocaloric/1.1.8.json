{
  "info": {
    "author": "Supratim Das",
    "author_email": "supratim0707@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3"
    ],
    "description": "# magnetocaloric 1.1.8\n#### Developed by Supratim Das\n![MIT License](https://img.shields.io/apm/l/atomic-design-ui.svg?)\n\nEffective approach to determine magnetocaloric performance of any magnetic material using python programming. From isotherm M(H) curves, using the Maxwell Relation the magnetocaloric performance of a material can be calculated with the help of this module.\n\n## What's New\n- Relative cooling power (RCP) can be calculated.\n- A method to visualize 'Full Width Of Half Maxima' has been employed.\n- Another methods to illustrate Tricritical mean field model, 3D Heisenberg model and 3D Ising model have also been employed.\n\n\n## Examples of How To Use\n\n### 1. Installation \n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install magnetocaloric package.\n\n```bash\n\n pip install magnetocaloric==1.1.8\n\n```\n### 2. Manage Excel Spreadsheet\n-  Check the main excel spreadsheet from where the M-H data will be fetched by the program, data must be arranged in this format given below. \n\n![](https://github.com/supratimdasinfo/Magnetocaloric-Effect/blob/main/Screenshot%20(229).png?raw=True)\n\n-  And add one extra magnetic field (Hmax + del_H) with null magnetic moment values. This is nothing else than to bring magnetic moment values of the last row under calculation.\n\n![](https://github.com/supratimdasinfo/Magnetocaloric-Effect/blob/main/Screenshot%20(232).png?raw=True)\n\n- Create two new files (file extension xlsx) to hold the results obtained after the calculation and definitely make them closed, other wise XlsxWriter will not get access.\n\n###  3. Execution\nRun the code at any python based environment ( IDLE, PyCharm, Spyder etc.). But I recommend you simply execute this code using command prompt or IDLE. \n\n```python\n\nimport magnetocaloric.mcepy as mc\n\nprint(mc.mce(a, b))\n\n```\nHere, 'a' is the total number of temperature and 'b' is the total number of applied magnetic field.\n\n## Caution\n\n- Before adding the Hmax + del_H value into the M(H) spreadsheet, The maximum value of applied magnetic field (Hmax) must be the multiple of (10xdel_H). As an example, if del_H = 500 Oe / 0.05 T, Hmax must be like 5000 Oe/0.5 T, 10000 Oe / 1 T, 15000 Oe / 1.5 T,........ or any other multiple of (10x500 Oe) whether the value of the magnetic field is Tesla or Oersted. For another example, if del_H = 700 Oe / 0.07 T, Hmax must be like 7000 Oe/0.7 T, 14000 Oe / 1.4 T, 21000 Oe / 2.1 T,........ or any other multiple of (10x700 Oe). Otherwise Hmax for not being a proper numbered figure, an error may occur. This caution is also applicable to the previous versions of the package as well.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/supratimdasinfo/Magnetocaloric-Effect",
    "keywords": "magnetocaloric,mcepy,magnetic,programming,code,python,supratim",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "magnetocaloric",
    "package_url": "https://pypi.org/project/magnetocaloric/",
    "platform": null,
    "project_url": "https://pypi.org/project/magnetocaloric/",
    "project_urls": {
      "Homepage": "https://github.com/supratimdasinfo/Magnetocaloric-Effect"
    },
    "release_url": "https://pypi.org/project/magnetocaloric/1.1.8/",
    "requires_dist": [
      "num2words",
      "matplotlib",
      "xlrd (==1.2.0)",
      "openpyxl",
      "tableprint",
      "XlsxWriter",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Effective Approach To Calculate Magnetocaloric Effect Of Any Magnetic Material Using Python",
    "version": "1.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14011739,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97fb4f88e5f1c97dbc9d93c498bafc8c556e1668bd4ea679b9ffef11a75fa8f1",
        "md5": "42035db311ac683fde16bdfb19ea4a50",
        "sha256": "374d6eea1ce667ca3e56c4583a01cb3ab2da0f1bf4e6ab5fef42da4a0ea40e34"
      },
      "downloads": -1,
      "filename": "magnetocaloric-1.1.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "42035db311ac683fde16bdfb19ea4a50",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9926,
      "upload_time": "2022-05-01T11:44:22",
      "upload_time_iso_8601": "2022-05-01T11:44:22.245569Z",
      "url": "https://files.pythonhosted.org/packages/97/fb/4f88e5f1c97dbc9d93c498bafc8c556e1668bd4ea679b9ffef11a75fa8f1/magnetocaloric-1.1.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20b58e1e00749f6b41f0bf5049843c3cb4f0e51c7363ec6a4d8b3a8c4ceee891",
        "md5": "3f750b05c520c85a63b94714e92d5e5d",
        "sha256": "699c2a529872171e71f3a9aba3f1bc505aee60dd474a1f53aaa62a78235465a4"
      },
      "downloads": -1,
      "filename": "magnetocaloric-1.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "3f750b05c520c85a63b94714e92d5e5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8637,
      "upload_time": "2022-05-01T11:44:24",
      "upload_time_iso_8601": "2022-05-01T11:44:24.273135Z",
      "url": "https://files.pythonhosted.org/packages/20/b5/8e1e00749f6b41f0bf5049843c3cb4f0e51c7363ec6a4d8b3a8c4ceee891/magnetocaloric-1.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}