{
  "info": {
    "author": "Ege Akman",
    "author_email": "me@egeakman.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: AsyncIO",
      "Framework :: aiohttp",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Multimedia :: Video",
      "Topic :: Security"
    ],
    "description": "# mjpeg-streamer\r\n\r\n## Overview\r\n\r\nThe mjpeg-streamer package provides a simple and efficient way to stream MJPEG video from OpenCV-compatible sources over HTTP. It provides a flexible interface that allows users to specify the video source and configure various parameters such as image size, quality, and FPS.\r\n\r\n## Installation\r\n\r\nYou can install the package via pip:\r\n\r\n```bash\r\npip install mjpeg-streamer\r\n```\r\n\r\n## Usage\r\n\r\nHere's a simple example that shows how to use the MJPEG Server package to stream video from a webcam:\r\n\r\n```python\r\nimport cv2\r\nfrom mjpeg_streamer import MjpegServer, Stream\r\n\r\ncap = cv2.VideoCapture(0)\r\n\r\nstream = Stream(\"my_camera\", size=(640, 480), quality=50, fps=30)\r\n\r\nserver = MjpegServer(\"localhost\", 8080)\r\nserver.add_stream(stream)\r\nserver.start()\r\n\r\nwhile True:\r\n    _, frame = cap.read()\r\n    cv2.imshow(stream.name, frame)\r\n    if cv2.waitKey(1) == ord(\"q\"):\r\n        break\r\n\r\n    stream.set_frame(frame)\r\n\r\nserver.stop()\r\n```\r\n\r\nThis example starts the MJPEG server on localhost:8080 and streams video from the default webcam. The video is resized to 640x480 pixels, compressed with JPEG quality of 50, and streamed at 30 FPS.\r\n\r\nTo view the video stream, you can open a web browser and navigate to http://localhost:8080/my_camera.\r\n\r\n## Class Reference\r\n\r\n### *Stream*\r\nA class that represents a single video stream. A stream consists of a sequence of frames that can be set and retrieved using the set_frame and _get_frame methods.\r\n\r\n***Constructor:***\r\n\r\n```python\r\nStream(name: str, size: Optional[Tuple[int, int]] = None, quality: int = 50, fps: int = 24)\r\n```\r\n\r\nCreates a new Stream instance with the given unique name, image size, JPEG quality (1-100), and FPS.\r\n\r\n***Methods:***\r\n\r\n- *set_frame*\r\n\r\n    ```python\r\n    set_frame(frame: np.ndarray)\r\n    ```\r\n\r\n    Sets the current frame to the given Numpy array (OpenCV frame).\r\n\r\n<br>\r\n\r\n- *_get_frame* (private)\r\n\r\n    ```python\r\n    _get_frame()\r\n    ```\r\n    Returns the current frame as a Numpy array.\r\n\r\n### *MjpegServer*\r\n\r\nA class that represents an MJPEG server. The server can serve multiple video streams, each identified by a unique name.\r\n\r\n***Constructor:***\r\n\r\n```python\r\nMjpegServer(host: str = \"localhost\", port: int = 8080)\r\n```\r\n\r\nCreates a new MjpegServer instance with the given host and port.\r\n\r\n***Methods:***\r\n\r\n- *add_stream*\r\n\r\n    ```python\r\n    add_stream(stream: Stream)\r\n    ```\r\n\r\n    Adds a new video stream to the server.\r\n\r\n<br>\r\n\r\n- *start*\r\n\r\n    ```python\r\n    start()\r\n    ```\r\n\r\n    Starts the server in a separate thread.\r\n\r\n<br>\r\n\r\n- *stop*\r\n\r\n    ```python\r\n    stop()\r\n    ```\r\n\r\n    Stops the server.\r\n\r\n## Contributing\r\n\r\nContributions are welcome! Please open an issue or submit a pull request.\r\n\r\n## License\r\n\r\nThis project is licensed under the AGPL-3.0 License - see the [LICENSE](LICENSE) file for details.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/egeakman/mjpeg-streamer/archive/2023.3.19.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/egeakman/mjpeg-streamer",
    "keywords": "aiohttp,MJPEG,asyncio,OpenCV,server,multi-camera,computer-vision,streaming,streamer,video,webcam",
    "license": "AGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mjpeg-streamer",
    "package_url": "https://pypi.org/project/mjpeg-streamer/",
    "platform": null,
    "project_url": "https://pypi.org/project/mjpeg-streamer/",
    "project_urls": {
      "Download": "https://github.com/egeakman/mjpeg-streamer/archive/2023.3.19.tar.gz",
      "Homepage": "https://github.com/egeakman/mjpeg-streamer",
      "Issues": "https://github.com/egeakman/mjpeg-streamer/issues"
    },
    "release_url": "https://pypi.org/project/mjpeg-streamer/2023.3.19/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Simple MJPEG streamer for Python",
    "version": "2023.3.19",
    "yanked": true,
    "yanked_reason": "Not working on Linux"
  },
  "last_serial": 17452275,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "72f240d9e866116eb07dd423c1b374ad420aa01f782359777b164095ba2b204e",
        "md5": "45e5ff5b7ff27dd0c746b60e677bfcff",
        "sha256": "b0cdf370fc00a5672d0a3540f54279e3f5063a8b9dd2c3b0d8d671f1f5680a0c"
      },
      "downloads": -1,
      "filename": "mjpeg-streamer-2023.3.19.tar.gz",
      "has_sig": false,
      "md5_digest": "45e5ff5b7ff27dd0c746b60e677bfcff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15686,
      "upload_time": "2023-03-19T18:11:06",
      "upload_time_iso_8601": "2023-03-19T18:11:06.658162Z",
      "url": "https://files.pythonhosted.org/packages/72/f2/40d9e866116eb07dd423c1b374ad420aa01f782359777b164095ba2b204e/mjpeg-streamer-2023.3.19.tar.gz",
      "yanked": true,
      "yanked_reason": "Not working on Linux"
    }
  ],
  "vulnerabilities": []
}