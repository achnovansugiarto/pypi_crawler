{
  "info": {
    "author": "Ilkka Tuohela",
    "author_email": "hile@iki.fi",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "This project contains some python tools to automate Mixxx MIDI mapping file \nmanagement. With this tool you can write well-formed XML .midi.xml files from\nsimple text configuration files, possibly mapping multiple channels and decks\nwith one configuration line.\n\nThe script does also create a stub .js template file for MIDI scripts. \n\nThis script was used to create controller mappings for CDJ-2000, all input files\nin this project are in data directory. Only manual changes were to finish the \ngenerated .js stub functions. \n\nExample command used to create this mapping was:\n\nmixxx-create-midimap --midi-id='PIONEER CDJ 2000' --name='Pioneer CDJ-2000' \\\n  --prefix=PioneerCDJ2000 --decks=2 --midi-channels=1,2 \\\n  --script-template-directory=/tmp --author=\"Ilkka Tuohela\" --email=hile@iki.fi \\\n  -D \"Pioneer CDJ-2000 configuration for 2 decks on midi channels 1 and 2\" \\\n  data/cdj.controls\n\nEXAMPLES\n\nSee files in data directory for examples of control and output configuration\nfiles.\n\nCONFIGURATION FILES\n\nThe script expects two configuration files on command line:\n- first argument contains configurations for controls\n- second argument contains configurations for outputs\n\nInvalid lines in files are ignored, so we can keep all fields in there even if\nnot mapped.\n\nControl files have following syntax:\nGroup:Key <midicode> <hexvalue> {options} # comment\n\n- If Group is 'Channel', you can automatically create configuration for both\n  decks with flags -d2 and -c1,2 (MIDI channels 1 and 2) to the script\n\n- Key must be valid command in mixxx, unless scripts are created, in which case\n  it needs to be valid js function name\n\n- midicode is a variable defined in mixxxmap.midi_constants, see \n  pydoc mixxxmap.midi_constants. This is combined with MIDI channel\n  to create mixxx config 'status' key \n\n- hexvalue is the MIDI code value, 0x00 to 0x7f\n\n- options can contain any of the valid control option names,separtated by comma. \n  You can list supported values with following command:\n  python -c 'from mixxxmap.midimap import CONTROL_OPTION_NAMES;print CONTROL_OPTION_NAMES'\n\n- comment is just a comment string, which is added to the .midi.xml file for\n  the control if defined.\n\nIf the options contain 'Script-Binding', the script function name is parsed\nfrom the 'key' field. In this case, 'key' doesn't need to be valid mixxx key.\n\nOutput files have following syntax:\nGroup:Key <midicode> <hexvalue> <on> <off>\nSimilar to controls, with additional required arguments for on and off values.\nIf both on and off are not given, values 0.0 and 1.0 are used.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hile/mixxxmap/downloads",
    "keywords": "Mixxx MIDI mapping",
    "license": "PSF",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mixxxmap",
    "package_url": "https://pypi.org/project/mixxxmap/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mixxxmap/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/hile/mixxxmap/downloads"
    },
    "release_url": "https://pypi.org/project/mixxxmap/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Module for Mixxx MIDI mapping automatic generation",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 353413,
  "urls": [],
  "vulnerabilities": []
}