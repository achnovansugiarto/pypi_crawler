{
  "info": {
    "author": "Sergei Maertens",
    "author_email": "sergeimaertens@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "Django SystemJS\n=====================\n\n.. image:: https://travis-ci.org/sergei-maertens/django-systemjs.svg?branch=master\n    :target: https://travis-ci.org/sergei-maertens/django-systemjs\n\n\n.. image:: https://coveralls.io/repos/sergei-maertens/django-systemjs/badge.svg\n  :target: https://coveralls.io/r/sergei-maertens/django-systemjs\n\n.. image:: https://img.shields.io/pypi/v/django-systemjs.svg\n  :target: https://pypi.python.org/pypi/django-systemjs\n\n\nDjango SystemJS brings the Javascript of tomorrow to Django, today.\n\nIt leverages JSPM (https://jspm.io) to do the heavy lifting for your\nclient side code, while keeping development flow easy and deployment\nwithout worries. In DEBUG mode, your Javascript modules are loaded\nasynchronously. In production, your app is nicely bundled via JSPM\nand ties in perfectly with `django.contrib.staticfiles`.\n\n\nInstallation\n------------\nYou will need to add 'systemjs' to your `INSTALLED_APPS` to be able\nto use the templatetag and management command.\n\nJSPM has to be installed and configured correctly - you will need npm for\nthat. Refer to the JSPM installation documentation.\n\nSome notable configuation options:\n\n* set the base url to your `STATIC_URL`.\n* set the base path to your `STATIC_ROOT`.\n\nUsage\n-----\n\nTemplate tag\n************\n\nUsually, in your template you would write something like::\n\n    <script src=\"/path/to/system.js\"></script>\n    <script src=\"/path/to/config.js\"></script>\n    <script>System.import('my/awesome/app');</script>\n\nWith Django SystemJS you can replace this with::\n\n    {% load system_tags %}\n    <script src=\"/path/to/system.js\"></script>\n    <script src=\"/path/to/config.js\"></script>\n    {% systemjs_import 'my/awesome/app' %}\n\n\nIf `SYSTEMJS_ENABLED` is `False` (default value is `not DEBUG`),\nthe tag will output the previous `System.import` statement. Otherwise,\nit will output something like::\n\n    <script src=\"/static/SYSTEMJS/my/awesome/app.js\"></script>\n\nThis url is generated by the configured static files backend, so if you\nuse the `CachedStaticFilesStorage`, all will be well. Django-storages is\nuntested, if you run into any issues, raise an issue and support will probably\nbe added.\n\nManagement command\n******************\n\nDjango SystemJS comes with a management command to create all the\nbundles. It does so by checking all your template files and\nextracting the `{% systemjs_import '...' %}` template tags.::\n\n    python manage.py systemjs_bundle\n\n\nBy default it will look at all templates in your app directories, and\nadditionally the additional template dirs for the vanilla Django\ntemplate engine.\n\n.. note::\n\n    The default bundling mechanism changed in 0.2. Before 0.2, all bundles would\n    by default be created as self-executing (`jspm bundle-sfx <app>`). This\n    was changed to the default `jspm bundle <app>` command. Self-executing\n    bundles include the entire SystemJS library and your `config.js`, leading\n    to 1MB+ bundle files. This is painful if you have multiple bundles.\n\n    A better strategy is to leverage the JSPM CDN (see jspm docs), and then\n    don't forget to include your `config.js` (which you would probably do in\n    development mode anyway).\n\n    Self-executing bundles can still be generated with the `--sfx` management\n    command option::\n\n        python manage.py systemjs_bundle --sfx\n\n\nExample workflow\n----------------\nDjango SystemJS is designed as a non-intrusive library in development mode,\nso that it won't sit in your way too much. Simply using the template tag\nwill be all you have to do as long as you're running with `DEBUG=True`.\n\nAssuming nothing is installed, what follows is an example step-by-step\nto deploy your application.\n\nInstall npm dependencies from package.json. This should pull in `jspm`::\n\n    npm install\n\nInstall `jspm` dependencies from package.json::\n\n    jspm install\n\nRun collectstatic so all files can be found by the webserver. This\nmust be done before you run `systemjs_bundle`, because (with the\nproposed `config.js`) jspm will look for the modules in `STATIC_ROOT`.::\n\n    python manage.py collectstatic --link --noinput\n\n(Re)generate the bundles::\n\n    python manage.py systemjs_bundle\n\nThat's it! It should work!\n\nAvailable settings\n------------------\n\n`SYSTEMJS_ENABLED`: defaults to `not settings.DEBUG`. If disabled, the loading\nof modules will happen in the 'standard' jspm way.\n\n`SYSTEMJS_JSPM_EXECUTABLE`: path to the `jspm-cli` executable. Defaults to\n`jspm`, which should be available if installed globally with `npm`.\n\n`SYSTEMJS_OUTPUT_DIR`: name of the subdirectory within `settings.STATIC_ROOT`.\nBundled files will end up in this directory, and this is the place the\ntemplatetag will point static files to.\n\nContact\n-------\nIf you run into any issues, miss certain features or want to contribute,\nthe central point is the github repo: https://github.com/sergei-maertens/django-systemjs",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sergei-maertens/django-systemjs",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-systemjs",
    "package_url": "https://pypi.org/project/django-systemjs/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-systemjs/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/sergei-maertens/django-systemjs"
    },
    "release_url": "https://pypi.org/project/django-systemjs/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Brings SystemJS to Django staticfiles",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2518345,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93a37e8e3b503cab41ce771acabfe8a2a0a6c0f33aa975cdfde94c422c660560",
        "md5": "f5520619e28825a39b98f507a11f5994",
        "sha256": "09da619fada021b6f00c57586b8144ea892ad7b3d7a9581feb32683d29218fbf"
      },
      "downloads": -1,
      "filename": "django-systemjs-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f5520619e28825a39b98f507a11f5994",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8697,
      "upload_time": "2016-01-19T10:06:45",
      "upload_time_iso_8601": "2016-01-19T10:06:45.473482Z",
      "url": "https://files.pythonhosted.org/packages/93/a3/7e8e3b503cab41ce771acabfe8a2a0a6c0f33aa975cdfde94c422c660560/django-systemjs-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}