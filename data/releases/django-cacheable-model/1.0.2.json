{
  "info": {
    "author": "Harisankar Krishna Swamy",
    "author_email": "harisankar.krishna@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django cacheable model\nA cacheable model for django.\n\n* A generic way of creating cache keys from Django model fields\n* Retrieve django models from cache with field values (cache on the way if cache missed)\n* Retrieve all the model instances (suitable for small set of models)\n\nSee usage example below\n\n# 1. Github\nhttps://github.com/harisankar-krishna-swamy/django_cacheable_model\n\n# 2. Install\npip install django_cacheable_model\n\n# 3. Configuration\n* `CACHE_SET_MANY_LIMIT` is chunk size for calls to `cache.set_many`.  \n   when `all_ins_from_cache` brings in all entries from cache, it will set each object  \n   in chunks to control request size. Default is `5` i.e if there are 10 instances of a model  \n   from db this config will set each of the models to the cache in two groups of `5`\n\n# 4. Usage\n\nSee samples in  `example_django_project` views.py and models.py.\n\n### 4.1. Create a model that inherits from CacheableModel\n```python\nclass Question(CacheableModel):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\n\nclass Choice(CacheableModel):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n```\n\n### 4.2. Use cache operations from django_cacheable_model.utils\n\n```python\nfrom django_cacheable_model.utils import all_ins_from_cache, model_ins_from_cache\n\n# Get all instances of model from cache (use for smaller set of models)\ncontext['choices'] = all_ins_from_cache(Choice)\n\n# Get all instances with select_related and order_by\nchoices = all_ins_from_cache(Choice,\n                             select_related=('question',),\n                             order_by_fields=('-id',))\n\n# Get a single model. Note this method returns a list of matching objects\ncontext['choice'] = model_ins_from_cache(Choice, {'id': 5})[-1]\n```\n\n# 5. To do\na) Example and document use of prefetch_related  \nb) Doc and tests for util methods  \nc) `timeout` in documentation\n\n# 6. License\nApache2 License\n\n# 7. Development\n\n## 7.1 Python\n\nPython 3.10.10 is used for development. Pyenv is used for managing Python versions.  \nInstall dev requirements in `dev-requirements.txt`\n```bash\n# in root folder\n# Set python version for project folder using pyenv\npyenv local 3.10.10\n# Create virtual environment \npython3 -m venv .venv\n# Activate the virtual environment\nsource .venv/bin/activate\n# Install all packages\npip install -r dev-requirements.txt\npre-commit install\n```\n## 7.2 IDE (PyCharm) setup\nSet Python interpreter to the virtual env created  \nSet `.venv` folder as excluded in Pycharm  \nSet `src` folder as source root  \nFor test runs from IDE set `src` as working directory\n## 7.3 Test\n1. Start memcached container for caching\n```bash\ncd src/tests/containers\n# pull container and \ndocker-compose pull\ndocker-compose up -d\n# Check container is running\ndocker ps\n```\n2. Run tests\n```bash\ncd src\npytest\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/harisankar-krishna-swamy/django_cacheable_model.git",
    "keywords": "django cacheable model",
    "license": "Apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cacheable-model",
    "package_url": "https://pypi.org/project/django-cacheable-model/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-cacheable-model/",
    "project_urls": {
      "GitHub": "https://github.com/harisankar-krishna-swamy/django_cacheable_model.git",
      "Homepage": "https://github.com/harisankar-krishna-swamy/django_cacheable_model.git"
    },
    "release_url": "https://pypi.org/project/django-cacheable-model/1.0.2/",
    "requires_dist": [
      "django (>=2.0)"
    ],
    "requires_python": ">=3.7.4, <4",
    "summary": "A cacheable Django model",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17390843,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b8f2e5b6fc40f3434e5ee34f089073ca79554c7ec9c19b22d79fd28c53a96c7",
        "md5": "994a69bbed2796f9fa9305cf80bdf72f",
        "sha256": "137fc391e50feab0cd5151cbe9620a8de45a2eb6fd8d59ebf22af28bd213993d"
      },
      "downloads": -1,
      "filename": "django_cacheable_model-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "994a69bbed2796f9fa9305cf80bdf72f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.4, <4",
      "size": 13107,
      "upload_time": "2023-03-22T00:44:25",
      "upload_time_iso_8601": "2023-03-22T00:44:25.406539Z",
      "url": "https://files.pythonhosted.org/packages/1b/8f/2e5b6fc40f3434e5ee34f089073ca79554c7ec9c19b22d79fd28c53a96c7/django_cacheable_model-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}