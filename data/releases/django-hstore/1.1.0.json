{
  "info": {
    "author": "Mikko Hellsing",
    "author_email": "mikko@aino.se",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "=============\ndjango-hstore\n=============\n\nDjango-hstore is a niche library which integrates the `hstore`_ extension of\nPostgreSQL into Django, assuming one is using Django 1.2+, PostgreSQL 9.0+, and\nPsycopg 2.3+.\n\nLimitations\n===========\n\n- Due to how Django implements its ORM, you will need to use the custom\n  ``postgresql_psycopg2`` backend defined in this package, which naturally will\n  prevent you from dropping in other django extensions which require a custom\n  backend (unless you fork and combine).\n- PostgreSQL's implementation of hstore has no concept of type; it stores a\n  mapping of string keys to string values. This library makes no attempt to\n  coerce keys or values to strings.\n\nRunning the tests\n=================\n\nAssuming one has the dependencies installed, and a PostgreSQL 9.0+ server up and\nrunning::\n\n    python setup.py test\n\nUsage\n=====\n\nFirst, update your settings module to specify the custom database backend::\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django_hstore.postgresql_psycopg2',\n            ...\n        }\n    }\n    \n**Note to South users:** If you keep getting errors like `There is no South\ndatabase module 'south.db.None' for your database.`, add the following to\n`settings.py`::\n\n    SOUTH_DATABASE_ADAPTERS = {'default': 'south.db.postgresql_psycopg2'}\n\nThe library provides three principal classes:\n\n``django_hstore.hstore.DictionaryField``\n    An ORM field which stores a mapping of string key/value pairs in an hstore\n    column.\n``django_hstore.hstore.ReferencesField``\n    An ORM field which builds on DictionaryField to store a mapping of string\n    keys to django object references, much like ForeignKey.\n``django_hstore.hstore.HStoreManager``\n    An ORM manager which provides much of the query functionality of the\n    library.\n\nModel definition is straightforward::\n\n    from django.db import models\n    from django_hstore import hstore\n\n    class Something(models.Model):\n        name = models.CharField(max_length=32)\n        data = hstore.DictionaryField()\n        objects = hstore.HStoreManager()\n\n        def __unicode__(self):\n            return self.name\n\nYou then treat the ``data`` field as simply a dictionary of string pairs::\n\n    instance = Something.objects.create(name='something', data={'a': '1', 'b': '2'})\n    assert instance.data['a'] == '1'\n\n    empty = Something.objects.create(name='empty')\n    assert empty.data == {}\n\n    empty.data['a'] = '1'\n    empty.save()\n    assert Something.objects.get(name='something').data['a'] == '1'\n\nYou can issue indexed queries against hstore fields::\n\n    # equivalence\n    Something.objects.filter(data={'a': '1', 'b': '2'})\n\n    # subset by key/value mapping\n    Something.objects.filter(data__contains={'a': '1'})\n\n    # subset by list of keys\n    Something.objects.filter(data__contains=['a', 'b'])\n\n    # subset by single key\n    Something.objects.filter(data__contains='a')\n\nYou can also take advantage of some db-side functionality by using the manager::\n\n    # identify the keys present in an hstore field\n    >>> Something.objects.hkeys(id=instance.id, attr='data')\n    ['a', 'b']\n\n    # peek at a a named value within an hstore field\n    >>> Something.objects.hpeek(id=instance.id, attr='data', key='a')\n    '1'\n\n    # do the same, after filter\n    >>> Something.objects.filter(id=instance.id).hpeek(attr='data', key='a')\n    '1'\n\n    # remove a key/value pair from an hstore field\n    >>> Something.objects.filter(name='something').hremove('data', 'b')\n\nThe hstore methods on manager pass all keyword arguments aside from ``attr`` and\n``key`` to ``.filter()``.\n\n.. _hstore: http://www.postgresql.org/docs/9.1/interactive/hstore.html",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aino/django-hstore",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-hstore",
    "package_url": "https://pypi.org/project/django-hstore/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-hstore/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/aino/django-hstore"
    },
    "release_url": "https://pypi.org/project/django-hstore/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Support for PostgreSQL's hstore for Django.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10426113,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0cd3a90fc13cdab49d073d92d146e3af1c7d154f7520baf9a4c15aae818d44e6",
        "md5": "eb494ef8f86bde18441ba5533ea947ca",
        "sha256": "6729feaebd8e62615b04b00eb69cf11e6a0eda6b09b8224e9bf8018c36fad687"
      },
      "downloads": -1,
      "filename": "django-hstore-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "eb494ef8f86bde18441ba5533ea947ca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11660,
      "upload_time": "2012-02-05T14:45:02",
      "upload_time_iso_8601": "2012-02-05T14:45:02.036659Z",
      "url": "https://files.pythonhosted.org/packages/0c/d3/a90fc13cdab49d073d92d146e3af1c7d154f7520baf9a4c15aae818d44e6/django-hstore-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}