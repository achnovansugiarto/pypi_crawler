{
  "info": {
    "author": "Djangonauts Organization",
    "author_email": "django-hstore@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "=============================\ndjango-hstore (schemaless DB)\n=============================\n\n.. image:: https://travis-ci.org/djangonauts/django-hstore.png\n   :target: https://travis-ci.org/djangonauts/django-hstore\n\n.. image:: https://coveralls.io/repos/djangonauts/django-hstore/badge.png\n  :target: https://coveralls.io/r/djangonauts/django-hstore\n\n.. image:: https://landscape.io/github/djangonauts/django-hstore/master/landscape.png\n   :target: https://landscape.io/github/djangonauts/django-hstore/master\n   :alt: Code Health\n\n.. image:: https://requires.io/github/djangonauts/django-hstore/requirements.png?branch=master\n   :target: https://requires.io/github/djangonauts/django-hstore/requirements/?branch=master\n   :alt: Requirements Status\n\n.. image:: https://badge.fury.io/py/django-hstore.png\n    :target: http://badge.fury.io/py/django-hstore\n\n.. image:: https://pypip.in/d/django-hstore/badge.png\n    :target: http://badge.fury.io/py/django-hstore\n\nDjango-hstore is a niche library which integrates the `hstore`_ extension of\nPostgreSQL into Django.\n\nHStore brings the power of schemaless databases into PostgreSQL, giving us the `advantage of flexibility and performance`_ without renouncing to the robustness of SQL databases.\n\nMailing List: https://groups.google.com/forum/#!forum/django-hstore\n\nDependencies:\n\n* **Python 2.6, 2.7 or 3.3**\n* **Django 1.4, 1.5 and 1.6**\n* **PostgreSQL 9.0+**\n* **Psycopg 2.4.3+**.\n\nExtras:\n\n* **Postgis compatibility**\n* **Python3** support\n* usable **admin widget**\n* nice admin widget for **django-grappelli**\n\nadmin widget screenshot:\n\n.. figure:: https://raw.github.com/djangonauts/django-hstore/master/docs/deafult-admin-widget.png\n\ngrappelli admin widget screenshot:\n\n.. figure:: https://raw.github.com/djangonauts/django-hstore/master/docs/hstore-widget.png\n\n===========\nLimitations\n===========\n\n* PostgreSQL's implementation of hstore has no concept of type; it stores a\n  mapping of string keys to string values. Values are stored as strings in the\n  database regarding of their original type.\n* Hstore extension is not automatically installed on use this package. You must install it manually.\n* To run tests, hstore extension must be installed on template1 database.\n\n**Important Note:** the future version of HStore will bring types, nested structures and more advanced features, for more info read `On the state of HStore`_ by Engine Yard.\n\n================\nInstall (stable)\n================\n\nInstall the stable version using pip by running:\n\n.. code-block:: bash\n\n    pip install django-hstore\n\n=============\nInstall (dev)\n=============\n\nInstall the development version with pip (you need git) by running:\n\n.. code-block:: bash\n\n    pip install -e git+git://github.com/djangonauts/django-hstore#egg=django-hstore\n\n=====\nSetup\n=====\n\nFirst, add **django_hstore** to your `settings.INSTALLED_APPS`:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django_hstore',\n        ..\n    )\n\nSecond, collect static files (needed for the admin widget) with:\n\n.. code-block:: bash\n\n    python manage.py collectstatic\n\n===========================\nUpgrade from older versions\n===========================\n\nIn **version 1.2.x** some internals have been changed in order to simplify usage and prevent errors.\n\nValues are automatically converted to strings, fields costantly validate input and so on.\n\nIf you are upgrading from an older version ensure your application code works as expected. If it doesn't you will either have to update your code or tie your application's requirement to the older version of django-hstore (1.1.1).\n\n===================\nNote to South users\n===================\n\nIf you keep getting errors like `There is no South\ndatabase module 'south.db.None' for your database.`, add the following to\n`settings.py`:\n\n.. code-block:: python\n\n    SOUTH_DATABASE_ADAPTERS = {'default': 'south.db.postgresql_psycopg2'}\n\n============\nAdmin widget\n============\n\ndjango-hstore ships a nice admin widget that makes the field more user-friendly.\n\n.. figure:: https://raw.github.com/djangonauts/django-hstore/master/docs/deafult-admin-widget.png\n\nEach time a key or a value is modified the underlying textarea is updated:\n\n.. figure:: https://raw.github.com/djangonauts/django-hstore/master/docs/deafult-admin-widget-raw.png\n\n======================\nGrappelli Admin widget\n======================\n\nIf you use the awsome `django-grappelli`_ there's an even nicer looking widget for you too!\n\n.. figure:: https://raw.github.com/djangonauts/django-hstore/master/docs/hstore-widget.png\n\nEach time a key or a value is modified the underlying textarea is updated:\n\n.. figure:: https://raw.github.com/djangonauts/django-hstore/master/docs/hstore-widget-raw.png\n\n=====\nUsage\n=====\n\nThe library provides three principal classes:\n\n``django_hstore.hstore.DictionaryField``\n    An ORM field which stores a mapping of string key/value pairs in an hstore\n    column.\n``django_hstore.hstore.ReferencesField``\n    An ORM field which builds on DictionaryField to store a mapping of string\n    keys to django object references, much like ForeignKey.\n``django_hstore.hstore.HStoreManager``\n    An ORM manager which provides much of the query functionality of the\n    library.\n``django_hstore.hstore.HStoreGeoManager``\n    An additional ORM manager to provide Geodjango functionality as well.\n\n------------\nModel fields\n------------\n\nModel definition is straightforward:\n\n.. code-block:: python\n\n    from django.db import models\n    from django_hstore import hstore\n\n    class Something(models.Model):\n        name = models.CharField(max_length=32)\n        data = hstore.DictionaryField()  # can pass attributes like null, blank, ecc.\n\n        objects = hstore.HStoreManager()\n        # IF YOU ARE USING POSTGIS:\n        # objects = hstore.HStoreGeoManager()\n\nReferenceField model field is also straightforward:\n\n.. code-block:: python\n\n    class ReferenceContainer(models.Model):\n        name = models.CharField(max_length=32)\n        refs = hstore.ReferencesField()\n\n        objects = hstore.HStoreManager()\n\n----------\nPython API\n----------\n\nYou then treat the ``data`` field as simply a dictionary of string pairs:\n\n.. code-block:: python\n\n    instance = Something.objects.create(name='something', data={'a': '1', 'b': '2'})\n    assert instance.data['a'] == '1'\n\n    empty = Something.objects.create(name='empty')\n    assert empty.data == {}\n\n    empty.data['a'] = '3'\n    empty.save()\n    assert Something.objects.get(name='empty').data['a'] == '3'\n\nBooleans, integers, floats, lists and dictionaries will be converted to strings.\nLists, dictionaries and booleans are converted into JSON formatted strings, so\ncan be decoded if needed:\n\n.. code-block:: python\n\n    instance = Something.objects.create(name='something', data={'int': 1, 'bool': True})\n\n    instance.data['int'] == '1'\n    instance.data['bool'] == 'true'\n\n    import json\n    instance.data['dict'] = { 'list': ['a', False, 1] }\n    instance.data['dict'] == '{\"list\": [\"a\", false, 1]}'\n    json.loads(instance.data['dict']) == { 'list': ['a', False, 1] }\n    >>> True\n\nYou can issue indexed queries against hstore fields:\n\n.. code-block:: python\n\n    # equivalence\n    Something.objects.filter(data={'a': '1', 'b': '2'})\n\n    # comparison (greater than, less than or equal to, ecc)\n    Something.objects.filter(data__gt={'a': '1'})\n    Something.objects.filter(data__gte={'a': '1'})\n    Something.objects.filter(data__lt={'a': '2'})\n    Something.objects.filter(data__lte={'a': '2'})\n\n    # subset by key/value mapping\n    Something.objects.filter(data__contains={'a': '1'})\n\n    # subset by list of some key values\n    Something.objects.filter(data__contains={'a': ['1', '2']})\n\n    # subset by list of keys\n    Something.objects.filter(data__contains=['a', 'b'])\n\n    # subset by single key\n    Something.objects.filter(data__contains=['a'])\n\nYou can still do classic django \"contains\" lookups as you would normally do for normal text\nfields if you were looking for a particular string. In this case, the HSTORE field\nwill be converted to text and the lookup will be performed on all the keys and all the values:\n\n.. code-block:: python\n\n    Something.objects.create(data={ 'some_key': 'some crazy Value' })\n\n    # classic text lookup (look up for occurence of string in all the keys)\n    Something.objects.filter(data__contains='crazy')\n    Something.objects.filter(data__contains='some_key')\n    # classic case insensitive text looup\n    Something.objects.filter(data__icontains='value')\n    Something.objects.filter(data__icontains='SOME_KEY')\n\n--------------\nHSTORE manager\n--------------\n\nYou can also take advantage of some db-side functionality by using the manager:\n\n.. code-block:: python\n\n    # identify the keys present in an hstore field\n    >>> Something.objects.hkeys(id=instance.id, attr='data')\n    ['a', 'b']\n\n    # peek at a a named value within an hstore field\n    >>> Something.objects.hpeek(id=instance.id, attr='data', key='a')\n    '1'\n\n    # do the same, after filter\n    >>> Something.objects.filter(id=instance.id).hpeek(attr='data', key='a')\n    '1'\n\n    # remove a key/value pair from an hstore field\n    >>> Something.objects.filter(name='something').hremove('data', 'b')\n\nThe hstore methods on manager pass all keyword arguments aside from ``attr`` and\n``key`` to ``.filter()``.\n\n--------------------\nReferenceField Usage\n--------------------\n\n**ReferenceField** is a field that allows to reference other database objects\nwithout using a classic ManyToMany relationship.\n\nHere's an example with the `ReferenceContainer` model defined in the **Model fields** section:\n\n.. code-block:: python\n\n    r = ReferenceContainer(name='test')\n    r.refs['another_object'] = AnotherModel.objects.get(slug='another-object')\n    r.refs['some_object'] = AnotherModel.objects.get(slug='some-object')\n    r.save()\n\n    r = ReferenceContainer.objects.get(name='test')\n    r.refs['another_object']\n    '<AnotherModel: AnotherModel object>'\n    r.refs['some_object']\n    '<AnotherModel: AnotherModel some_object>'\n\nThe database is queried only when references are accessed directly.\nOnce references have been retrieved they will be stored for any eventual subsequent access:\n\n.. code-block:: python\n\n    r = ReferenceContainer.objects.get(name='test')\n    # this won't query the database\n    r.refs\n    { u'another_object': u'myapp.models.AnotherModel:1', u'some_object': u'myapp.models.AnotherModel:2' }\n\n    # this will query the database\n    r.refs['another_object']\n    '<AnotherModel: AnotherModel object>'\n\n    # retrieved reference is now visible also when calling the HStoreDict object:\n    r.refs\n    { u'another_object': <AnotherModel: AnotherModel object>, u'some_object': u'myapp.models.AnotherModel:2' }\n\n=======================\nMultiple database setup\n=======================\n\nIf for some reason you have to use django-hstore in a **multi-database setup** and\nsome of the database you are using don't have the hstore extension installed,\nyou can skip hstore registration by setting ``HAS_HSTORE`` to ``False`` in your\ndatabase config:\n\n.. code-block:: python\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.postgresql_psycopg2',\n            'NAME': 'name',\n            'USER': 'user',\n            'PASSWORD': 'pass',\n            'HOST': 'localhost',\n            'PORT': '',\n        },\n        'other': {\n            'ENGINE': 'django.db.backends.postgresql_psycopg2',\n            'NAME': 'other',\n            'USER': 'user',\n            'PASSWORD': 'pass',\n            'HOST': 'localhost',\n            'PORT': '',\n            'HAS_HSTORE': False,\n        }\n    }\n\nIf you do that, then don't try to create ``DictionaryField`` in that database.\n\nBe sure to check out allow_syncdb_ documentation.\n\n.. _allow_syncdb: https://docs.djangoproject.com/en/1.5/topics/db/multi-db/#allow_syncdb\n\n=================\nRunning the tests\n=================\n\nAssuming one has the dependencies installed, and a **PostgreSQL 9.0+** server up and\nrunning:\n\n.. code-block:: bash\n\n    python runtests.py\n\nYou might need to tweak the DB settings according to your DB configuration. For it,\nyou can copy the file ``local_settings.py.example`` to ``local_settings.py`` and add\nyour database tweaks on it. ``local_settings.py`` will be automatically imported.\n\nIf after running this command you get an **error** saying::\n\n    type \"hstore\" does not exist\n\nTry this:\n\n.. code-block:: bash\n\n    psql template1 -c 'create extension hstore;'\n\nMore details here: `PostgreSQL error type hstore does not exist`_\n\n.. _hstore: http://www.postgresql.org/docs/9.1/interactive/hstore.html\n.. _PostgreSQL error type hstore does not exist: http://clarkdave.net/2012/09/postgresql-error-type-hstore-does-not-exist/\n.. _django-grappelli: http://grappelliproject.com/\n.. _advantage of flexibility and performance: http://www.craigkerstiens.com/2013/07/03/hstore-vs-json/\n.. _On the state of HStore: https://blog.engineyard.com/2013/on-the-state-of-hstore\n\n=================\nHow to contribute\n=================\n\n1. Join the mailing List: `django-hstore mailing list`_ and announce your intentions\n2. Follow `PEP8, Style Guide for Python Code`_\n3. Fork this repo\n4. Write code\n5. Write tests for your code\n6. Ensure all tests pass\n7. Ensure test coverage is not under 90%\n8. Document your changes\n9. Send pull request\n\n.. _PEP8, Style Guide for Python Code: http://www.python.org/dev/peps/pep-0008/\n.. _django-hstore mailing list: https://groups.google.com/forum/#!forum/django-hstore\n\n==================\nDeprecation policy\n==================\n\nAt any momment of time, **django-hstore** developers will mantain support for three versions of django.\n\nAs example: The current stable release of django is 1.6, so django-hstore official supported versions are: 1.4, 1.5 and 1.6. When\ndjango 1.7 is released, 1.4 version will become on unsupported django version.\n\n\n.. image:: https://d2weczhvl823v0.cloudfront.net/djangonauts/django-hstore/trend.png\n   :target: https://bitdeli.com/free",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/djangonauts/django-hstore/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/djangonauts/django-hstore",
    "keywords": "django,hstore,schemaless",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-hstore",
    "package_url": "https://pypi.org/project/django-hstore/",
    "platform": "Platform Indipendent",
    "project_url": "https://pypi.org/project/django-hstore/",
    "project_urls": {
      "Download": "https://github.com/djangonauts/django-hstore/releases",
      "Homepage": "https://github.com/djangonauts/django-hstore"
    },
    "release_url": "https://pypi.org/project/django-hstore/1.2.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Bring schemaless PostgreSQL (HStore) in Django",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10426113,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "624e56a6c47a2b44fd515fa2f73e836b5a507ecd89b3e50b35b089e7e9e72719",
        "md5": "f24e7077a452db376e43e9a2e9ac891c",
        "sha256": "542ef06a8783f02fd22dff8e970a61d7966c8096989b11594e7a3e8a226629b6"
      },
      "downloads": -1,
      "filename": "django_hstore-1.2.2-py2.7.egg",
      "has_sig": true,
      "md5_digest": "f24e7077a452db376e43e9a2e9ac891c",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 40117,
      "upload_time": "2014-03-11T14:56:01",
      "upload_time_iso_8601": "2014-03-11T14:56:01.177676Z",
      "url": "https://files.pythonhosted.org/packages/62/4e/56a6c47a2b44fd515fa2f73e836b5a507ecd89b3e50b35b089e7e9e72719/django_hstore-1.2.2-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6064dfe6ef3f3472775dffb6b678e76a195c559564d4478ac7bdfa1348239be3",
        "md5": "646405cf584beee86fcdde3373109626",
        "sha256": "988542c0b00040c1cc86b072b00409fa5619da52081eeed6b2c11fbc722c89ff"
      },
      "downloads": -1,
      "filename": "django-hstore-1.2.2.tar.gz",
      "has_sig": true,
      "md5_digest": "646405cf584beee86fcdde3373109626",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25905,
      "upload_time": "2014-03-11T14:56:17",
      "upload_time_iso_8601": "2014-03-11T14:56:17.307465Z",
      "url": "https://files.pythonhosted.org/packages/60/64/dfe6ef3f3472775dffb6b678e76a195c559564d4478ac7bdfa1348239be3/django-hstore-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}