{
  "info": {
    "author": "Bryan Veloso",
    "author_email": "bryan@revyver.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": "ImageKit is a Django app that helps you to add variations of uploaded images\r\nto your models. These variations are called \"specs\" and can include things\r\nlike different sizes (e.g. thumbnails) and black and white versions.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n1. ``pip install django-imagekit``\r\n   (or clone the source and put the imagekit module on your path)\r\n2. Add ``'imagekit'`` to your ``INSTALLED_APPS`` list in your project's settings.py\r\n\r\n\r\nAdding Specs to a Model\r\n-----------------------\r\n\r\nMuch like ``django.db.models.ImageField``, Specs are defined as properties\r\nof a model class::\r\n\r\n    from django.db import models\r\n    from imagekit.models import ImageSpec\r\n\r\n    class Photo(models.Model):\r\n        original_image = models.ImageField(upload_to='photos')\r\n        formatted_image = ImageSpec(image_field='original_image', format='JPEG',\r\n                quality=90)\r\n\r\nAccessing the spec through a model instance will create the image and return\r\nan ImageFile-like object (just like with a normal\r\n``django.db.models.ImageField``)::\r\n\r\n    photo = Photo.objects.all()[0]\r\n    photo.original_image.url # > '/media/photos/birthday.tiff'\r\n    photo.formatted_image.url # > '/media/cache/photos/birthday_formatted_image.jpeg'\r\n\r\nCheck out ``imagekit.models.ImageSpec`` for more information.\r\n\r\n\r\nProcessors\r\n----------\r\n\r\nThe real power of ImageKit comes from processors. Processors take an image, do\r\nsomething to it, and return the result. By providing a list of processors to\r\nyour spec, you can expose different versions of the original image::\r\n\r\n    from django.db import models\r\n    from imagekit.models import ImageSpec\r\n    from imagekit.processors import resize, Adjust\r\n\r\n    class Photo(models.Model):\r\n        original_image = models.ImageField(upload_to='photos')\r\n        thumbnail = ImageSpec([Adjust(contrast=1.2, sharpness=1.1),\r\n                resize.Crop(50, 50)], image_field='original_image',\r\n                format='JPEG', quality=90)\r\n\r\nThe ``thumbnail`` property will now return a cropped image::\r\n\r\n    photo = Photo.objects.all()[0]\r\n    photo.thumbnail.url # > '/media/cache/photos/birthday_thumbnail.jpeg'\r\n    photo.thumbnail.width # > 50\r\n    photo.original_image.width # > 1000\r\n\r\nThe original image is not modified; ``thumbnail`` is a new file that is the\r\nresult of running the ``imagekit.processors.resize.Crop`` processor on the\r\noriginal.\r\n\r\nThe ``imagekit.processors`` module contains processors for many common\r\nimage manipulations, like resizing, rotating, and color adjustments. However,\r\nif they aren't up to the task, you can create your own. All you have to do is\r\nimplement a ``process()`` method::\r\n\r\n    class Watermark(object):\r\n        def process(self, image):\r\n            # Code for adding the watermark goes here.\r\n            return image\r\n\r\n    class Photo(models.Model):\r\n        original_image = models.ImageField(upload_to='photos')\r\n        watermarked_image = ImageSpec([Watermark()], image_field='original_image',\r\n                format='JPEG', quality=90)\r\n\r\n\r\nAdmin\r\n-----\r\n\r\nImageKit also contains a class named ``imagekit.admin.AdminThumbnail``\r\nfor displaying specs (or even regular ImageFields) in the\r\n`Django admin change list`_. AdminThumbnail is used as a property on\r\nDjango admin classes::\r\n\r\n    from django.contrib import admin\r\n    from imagekit.admin import AdminThumbnail\r\n    from .models import Photo\r\n\r\n\r\n    class PhotoAdmin(admin.ModelAdmin):\r\n        list_display = ('__str__', 'admin_thumbnail')\r\n        admin_thumbnail = AdminThumbnail(image_field='thumbnail')\r\n\r\n\r\n    admin.site.register(Photo, PhotoAdmin)\r\n\r\nAdminThumbnail can even use a custom template. For more information, see\r\n``imagekit.admin.AdminThumbnail``.\r\n\r\n.. _`Django admin change list`: https://docs.djangoproject.com/en/dev/intro/tutorial02/#customize-the-admin-change-list",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jdriscoll/django-imagekit/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-imagekit",
    "package_url": "https://pypi.org/project/django-imagekit/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-imagekit/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/jdriscoll/django-imagekit/"
    },
    "release_url": "https://pypi.org/project/django-imagekit/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Automated image processing for Django models.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11900866,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75d6c0384b63b662b8b210e92232c2597f40880eef810abb639be79a8470ff70",
        "md5": "91037cece3d8e82e9864c4058234a319",
        "sha256": "e5bc349c4c7f6dbb310c63cba3a7f1197378e92db6115f799ec37caa57da459d"
      },
      "downloads": -1,
      "filename": "django-imagekit-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "91037cece3d8e82e9864c4058234a319",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21335,
      "upload_time": "2011-10-31T17:34:17",
      "upload_time_iso_8601": "2011-10-31T17:34:17.897129Z",
      "url": "https://files.pythonhosted.org/packages/75/d6/c0384b63b662b8b210e92232c2597f40880eef810abb639be79a8470ff70/django-imagekit-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}