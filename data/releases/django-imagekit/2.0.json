{
  "info": {
    "author": "Bryan Veloso",
    "author_email": "bryan@revyver.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": "ImageKit is a Django app that helps you to add variations of uploaded images\nto your models. These variations are called \"specs\" and can include things\nlike different sizes (e.g. thumbnails) and black and white versions.\n\n**For the complete documentation on the latest stable version of ImageKit, see**\n`ImageKit on RTD`_.\n\n.. _`ImageKit on RTD`: http://django-imagekit.readthedocs.org\n\n\nInstallation\n------------\n\n1. Install `PIL`_ or `Pillow`_. If you're using an ``ImageField`` in Django,\n   you should have already done this.\n2. ``pip install django-imagekit``\n   (or clone the source and put the imagekit module on your path)\n3. Add ``'imagekit'`` to your ``INSTALLED_APPS`` list in your project's settings.py\n\n.. note:: If you've never seen Pillow before, it considers itself a\n   more-frequently updated \"friendly\" fork of PIL that's compatible with\n   setuptools. As such, it shares the same namespace as PIL does and is a\n   drop-in replacement.\n\n.. _`PIL`: http://pypi.python.org/pypi/PIL\n.. _`Pillow`: http://pypi.python.org/pypi/Pillow\n\n\nAdding Specs to a Model\n-----------------------\n\nMuch like ``django.db.models.ImageField``, Specs are defined as properties\nof a model class::\n\n    from django.db import models\n    from imagekit.models import ImageSpecField\n\n    class Photo(models.Model):\n        original_image = models.ImageField(upload_to='photos')\n        formatted_image = ImageSpecField(image_field='original_image', format='JPEG',\n                options={'quality': 90})\n\nAccessing the spec through a model instance will create the image and return\nan ImageFile-like object (just like with a normal\n``django.db.models.ImageField``)::\n\n    photo = Photo.objects.all()[0]\n    photo.original_image.url # > '/media/photos/birthday.tiff'\n    photo.formatted_image.url # > '/media/cache/photos/birthday_formatted_image.jpeg'\n\nCheck out ``imagekit.models.ImageSpecField`` for more information.\n\nIf you only want to save the processed image (without maintaining the original),\nyou can use a ``ProcessedImageField``::\n\n    from django.db import models\n    from imagekit.models.fields import ProcessedImageField\n\n    class Photo(models.Model):\n        processed_image = ImageSpecField(format='JPEG', options={'quality': 90})\n\nSee the class documentation for details.\n\n\nProcessors\n----------\n\nThe real power of ImageKit comes from processors. Processors take an image, do\nsomething to it, and return the result. By providing a list of processors to\nyour spec, you can expose different versions of the original image::\n\n    from django.db import models\n    from imagekit.models import ImageSpecField\n    from imagekit.processors import ResizeToFill, Adjust\n\n    class Photo(models.Model):\n        original_image = models.ImageField(upload_to='photos')\n        thumbnail = ImageSpecField([Adjust(contrast=1.2, sharpness=1.1),\n                ResizeToFill(50, 50)], image_field='original_image',\n                format='JPEG', options={'quality': 90})\n\nThe ``thumbnail`` property will now return a cropped image::\n\n    photo = Photo.objects.all()[0]\n    photo.thumbnail.url # > '/media/cache/photos/birthday_thumbnail.jpeg'\n    photo.thumbnail.width # > 50\n    photo.original_image.width # > 1000\n\nThe original image is not modified; ``thumbnail`` is a new file that is the\nresult of running the ``imagekit.processors.ResizeToFill`` processor on the\noriginal. (If you only need to save the processed image, and not the original,\npass processors to a ``ProcessedImageField`` instead of an ``ImageSpecField``.)\n\nThe ``imagekit.processors`` module contains processors for many common\nimage manipulations, like resizing, rotating, and color adjustments. However,\nif they aren't up to the task, you can create your own. All you have to do is\nimplement a ``process()`` method::\n\n    class Watermark(object):\n        def process(self, image):\n            # Code for adding the watermark goes here.\n            return image\n\n    class Photo(models.Model):\n        original_image = models.ImageField(upload_to='photos')\n        watermarked_image = ImageSpecField([Watermark()], image_field='original_image',\n                format='JPEG', options={'quality': 90})\n\n\nAdmin\n-----\n\nImageKit also contains a class named ``imagekit.admin.AdminThumbnail``\nfor displaying specs (or even regular ImageFields) in the\n`Django admin change list`_. AdminThumbnail is used as a property on\nDjango admin classes::\n\n    from django.contrib import admin\n    from imagekit.admin import AdminThumbnail\n    from .models import Photo\n\n\n    class PhotoAdmin(admin.ModelAdmin):\n        list_display = ('__str__', 'admin_thumbnail')\n        admin_thumbnail = AdminThumbnail(image_field='thumbnail')\n\n\n    admin.site.register(Photo, PhotoAdmin)\n\nAdminThumbnail can even use a custom template. For more information, see\n``imagekit.admin.AdminThumbnail``.\n\n.. _`Django admin change list`: https://docs.djangoproject.com/en/dev/intro/tutorial02/#customize-the-admin-change-list\n\n\nImage Cache Backends\n--------------------\n\nWhenever you access properties like ``url``, ``width`` and ``height`` of an\n``ImageSpecField``, its cached image is validated; whenever you save a new image\nto the ``ImageField`` your spec uses as a source, the spec image is invalidated.\nThe default way to validate a cache image is to check to see if the file exists\nand, if not, generate a new one; the default way to invalidate the cache is to\ndelete the image. This is a very simple and straightforward way to handle cache\nvalidation, but it has its drawbacks—for example, checking to see if the image\nexists means frequently hitting the storage backend.\n\nBecause of this, ImageKit allows you to define custom image cache backends. To\nbe a valid image cache backend, a class must implement three methods:\n``validate``, ``invalidate``, and ``clear`` (which is called when the image is\nno longer needed in any form, i.e. the model is deleted). Each of these methods\nmust accept a file object, but the internals are up to you. For example, you\ncould store the state (valid, invalid) of the cache in a database to avoid\nfilesystem access. You can then specify your image cache backend on a per-field\nbasis::\n\n    class Photo(models.Model):\n        ...\n        thumbnail = ImageSpecField(..., image_cache_backend=MyImageCacheBackend())\n\nOr in your ``settings.py`` file if you want to use it as the default::\n\n    IMAGEKIT_DEFAULT_IMAGE_CACHE_BACKEND = 'path.to.MyImageCacheBackend'\n\n\nContributing\n------------\n\nWe love contributions! And you don't have to be an expert with the library—or\neven Django—to contribute either: ImageKit's processors are standalone classes\nthat are completely separate from the more intimidating internals of Django's\nORM. If you've written a processor that you think might be useful to other\npeople, open a pull request so we can take a look!\n\nImageKit's image cache backends are also fairly isolated from the ImageKit guts.\nIf you've fine-tuned one to work perfectly for a popular file storage backend,\nlet us take a look! Maybe other people could use it.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jdriscoll/django-imagekit/",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-imagekit",
    "package_url": "https://pypi.org/project/django-imagekit/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-imagekit/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/jdriscoll/django-imagekit/"
    },
    "release_url": "https://pypi.org/project/django-imagekit/2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Automated image processing for Django models.",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11900866,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63b3e655131c05870017670bc87d51c1b4b75e3bf2247de6b4950438e82ae9c2",
        "md5": "5a3e23647e6eeba89d03c876d7264d43",
        "sha256": "c5aadafbf0d7453fd7fa6ba4d6f7537f2454f2d1082da865c6ec1d0ea3f0fb9e"
      },
      "downloads": -1,
      "filename": "django-imagekit-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5a3e23647e6eeba89d03c876d7264d43",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 163829,
      "upload_time": "2012-04-24T23:09:15",
      "upload_time_iso_8601": "2012-04-24T23:09:15.884108Z",
      "url": "https://files.pythonhosted.org/packages/63/b3/e655131c05870017670bc87d51c1b4b75e3bf2247de6b4950438e82ae9c2/django-imagekit-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}