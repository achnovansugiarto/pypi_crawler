{
  "info": {
    "author": "lxml dev team",
    "author_email": "lxml-dev@lxml.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.4",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Markup :: HTML",
      "Topic :: Text Processing :: Markup :: XML"
    ],
    "description": "lxml is a Pythonic, mature binding for the libxml2 and libxslt libraries.  It\r\nprovides safe and convenient access to these libraries using the ElementTree\r\nAPI.\r\n\r\nIt extends the ElementTree API significantly to offer support for XPath,\r\nRelaxNG, XML Schema, XSLT, C14N and much more.\r\n\r\nTo contact the project, go to the `project home page\r\n<http://lxml.de/>`_ or see our bug tracker at\r\nhttps://launchpad.net/lxml\r\n\r\nIn case you want to use the current in-development version of lxml,\r\nyou can get it from the github repository at\r\nhttps://github.com/lxml/lxml .  Note that this requires Cython to\r\nbuild the sources, see the build instructions on the project home\r\npage.  To the same end, running ``easy_install lxml==dev`` will\r\ninstall lxml from\r\nhttps://github.com/lxml/lxml/tarball/master#egg=lxml-dev if you have\r\nan appropriate version of Cython installed.\r\n\r\n\r\nAfter an official release of a new stable series, bug fixes may become\r\navailable at\r\nhttps://github.com/lxml/lxml/tree/lxml-3.0 .\r\nRunning ``easy_install lxml==3.0bugfix`` will install\r\nthe unreleased branch state from\r\nhttps://github.com/lxml/lxml/tarball/lxml-3.0#egg=lxml-3.0bugfix\r\nas soon as a maintenance branch has been established.  Note that this\r\nrequires Cython to be installed at an appropriate version for the build.\r\n\r\n3.0 (2012-10-08)\r\n================\r\n\r\nFeatures added\r\n--------------\r\n\r\n* Python level access to (optional) libxml2 memory debugging features\r\n  to simplify debugging of memory leaks etc.\r\n\r\n* The ``.iter()`` method of elements now accepts ``tag`` arguments like\r\n  ``\"{*}name\"`` to search for elements with a given local name in any\r\n  namespace. With this addition, all combinations of wildcards now work\r\n  as expected:\r\n  ``\"{ns}name\"``, ``\"{}name\"``, ``\"{*}name\"``, ``\"{ns}*\"``, ``\"{}*\"``\r\n  and ``\"{*}*\"``.  Note that ``\"name\"`` is equivalent to ``\"{}name\"``,\r\n  but ``\"*\"`` is ``\"{*}*\"``.\r\n  The same change applies to the ``.getiterator()``, ``.itersiblings()``,\r\n  ``.iterancestors()``, ``.iterdescendants()``, ``.iterchildren()``\r\n  and ``.itertext()`` methods;the ``strip_attributes()``,\r\n  ``strip_elements()`` and ``strip_tags()`` functions as well as the\r\n  ``iterparse()`` class.\r\n\r\n* C14N allows specifying the inclusive prefixes to be promoted\r\n  to top-level during exclusive serialisation.\r\n\r\n* Initial support for building in PyPy (through cpyext).\r\n\r\n* DTD objects gained an API that allows read access to their\r\n  declarations.\r\n\r\n* ``xpathgrep.py`` gained support for parsing line-by-line (e.g.\r\n  from grep output) and for surrounding the output with a new root\r\n  tag.\r\n\r\n* ``E-factory`` in ``lxml.builder`` accepts subtypes of known data\r\n  types (such as string subtypes) when building elements around them.\r\n\r\n* Tree iteration and ``iterparse()`` with a selective ``tag``\r\n  argument supports passing a set of tags.  Tree nodes will be\r\n  returned by the iterators if they match any of the tags.\r\n\r\nBugs fixed\r\n----------\r\n\r\n* End-of-file handling was incorrect in iterparse() when reading from\r\n  a low-level C file stream and failed in libxml2 2.9.0 due to its\r\n  improved consistency checks.\r\n\r\n* Passing long Unicode strings into the ``feed()`` parser interface\r\n  failed to read the entire string.\r\n\r\n* The ``.find*()`` methods in ``lxml.objectify`` no longer use XPath\r\n  internally, which makes them faster in many cases (especially when\r\n  short circuiting after a single or couple of elements) and fixes\r\n  some behavioural differences compared to ``lxml.etree``.  Note that\r\n  this means that they no longer support arbitrary XPath expressions\r\n  but only the subset that the ``ElementPath`` language supports.\r\n  The previous implementation was also redundant with the normal\r\n  XPath support, which can be used as a replacement.\r\n\r\n* ``el.find('*')`` could accidentally return a comment or processing\r\n  instruction that happened to be in the wrong spot.  (Same for the\r\n  other ``.find*()`` methods.)\r\n\r\n* The error logging is less intrusive and avoids a global setup where\r\n  possible.\r\n\r\n* Fixed undefined names in html5lib parser.\r\n\r\n* ``xpathgrep.py`` did not work in Python 3.\r\n\r\n* ``Element.attrib.update()`` did not accept an ``attrib`` of\r\n  another Element as parameter.\r\n\r\n* For subtypes of ``ElementBase`` that make the ``.text`` or ``.tail``\r\n  properties immutable (as in objectify, for example), inserting text\r\n  when creating Elements through the E-Factory feature of the class\r\n  constructor would fail with an exception, stating that the text\r\n  cannot be modified.\r\n\r\nOther changes\r\n-------------\r\n\r\n* The build no longer uses Cython by default unless the generated C files\r\n  are missing.  To use Cython, pass the option \"--with-cython\".  To ignore\r\n  the fatal build error when Cython is required but not available (e.g. to\r\n  run special setup.py commands that do not actually run a build), pass\r\n  \"--without-cython\".\r\n\r\n* The code was adapted to work with the upcoming libxml2 2.9.0 release.\r\n\r\n* The code base was overhauled to properly use 'const' where the API\r\n  of libxml2 and libxslt requests it.  This also has an impact on the\r\n  public C-API of lxml itself, as defined in ``etreepublic.pxd``, as\r\n  well as the provided declarations in the ``lxml/includes/`` directory.\r\n  Code that uses these declarations may have to be adapted.  On the\r\n  plus side, this fixes several C compiler warnings, also for user\r\n  code, thus making it easier to spot real problems again.\r\n\r\n* The functionality of \"lxml.cssselect\" was moved into a separate PyPI\r\n  package called \"cssselect\".  To continue using it, you must install\r\n  that package separately.  The \"lxml.cssselect\" module is still\r\n  available and provides the same interface, provided the \"cssselect\"\r\n  package can be imported at runtime.\r\n\r\n* Element attributes passed in as an ``attrib`` dict or as keyword\r\n  arguments are now sorted by (namespaced) name before being created\r\n  to make their order predictable for serialisation and iteration.\r\n  Note that adding or deleting attributes afterwards does not take\r\n  that order into account, i.e. setting a new attribute appends it\r\n  after the existing ones.\r\n\r\n* Several classes that are for internal use only were removed\r\n  from the ``lxml.etree`` module dict:\r\n  ``_InputDocument, _ResolverRegistry, _ResolverContext, _BaseContext,\r\n  _ExsltRegExp, _IterparseContext, _TempStore, _ExceptionContext,\r\n  __ContentOnlyElement, _AttribIterator, _NamespaceRegistry,\r\n  _ClassNamespaceRegistry, _FunctionNamespaceRegistry,\r\n  _XPathFunctionNamespaceRegistry, _ParserDictionaryContext,\r\n  _FileReaderContext, _ParserContext, _PythonSaxParserTarget,\r\n  _TargetParserContext, _ReadOnlyProxy, _ReadOnlyPIProxy,\r\n  _ReadOnlyEntityProxy, _ReadOnlyElementProxy, _OpaqueNodeWrapper,\r\n  _OpaqueDocumentWrapper, _ModifyContentOnlyProxy,\r\n  _ModifyContentOnlyPIProxy, _ModifyContentOnlyEntityProxy,\r\n  _AppendOnlyElementProxy, _SaxParserContext, _FilelikeWriter,\r\n  _ParserSchemaValidationContext, _XPathContext,\r\n  _XSLTResolverContext, _XSLTContext, _XSLTQuotedStringParam``\r\n\r\n* Several internal classes can no longer be inherited from:\r\n  ``_InputDocument, _ResolverRegistry, _ExsltRegExp, _ElementUnicodeResult,\r\n  _IterparseContext, _TempStore, _AttribIterator, _ClassNamespaceRegistry,\r\n  _XPathFunctionNamespaceRegistry, _ParserDictionaryContext,\r\n  _FileReaderContext, _PythonSaxParserTarget, _TargetParserContext,\r\n  _ReadOnlyPIProxy, _ReadOnlyEntityProxy, _OpaqueDocumentWrapper,\r\n  _ModifyContentOnlyPIProxy, _ModifyContentOnlyEntityProxy,\r\n  _AppendOnlyElementProxy, _FilelikeWriter, _ParserSchemaValidationContext,\r\n  _XPathContext, _XSLTResolverContext, _XSLTContext, _XSLTQuotedStringParam,\r\n  _XSLTResultTree, _XSLTProcessingInstruction``",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://pypi.python.org/packages/source/l/lxml/lxml-3.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://lxml.de/",
    "keywords": "",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lxml",
    "package_url": "https://pypi.org/project/lxml/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/lxml/",
    "project_urls": {
      "Download": "http://pypi.python.org/packages/source/l/lxml/lxml-3.0.tar.gz",
      "Homepage": "http://lxml.de/"
    },
    "release_url": "https://pypi.org/project/lxml/3.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API.",
    "version": "3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16160772,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0326376fd3b51a113f8a260537bda00ea5fa456643052b7b608423bd74e37db9",
        "md5": "603b167376069303ee34ada2378c4554",
        "sha256": "90d6ccc3a6522e26796baa079321427a7d469af968d814f35683ef192111d8f9"
      },
      "downloads": -1,
      "filename": "lxml-3.0.tar.gz",
      "has_sig": true,
      "md5_digest": "603b167376069303ee34ada2378c4554",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3204839,
      "upload_time": "2012-10-08T17:48:49",
      "upload_time_iso_8601": "2012-10-08T17:48:49.452758Z",
      "url": "https://files.pythonhosted.org/packages/03/26/376fd3b51a113f8a260537bda00ea5fa456643052b7b608423bd74e37db9/lxml-3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cc1cf5501dbb6b5d596552ed46dae7fdbd5a181b08bbf522073ef93b74349f2",
        "md5": "4561fe5a1a7bef9db43384908aaa56f5",
        "sha256": "0b25f4a502dd8a70727fc2408691d5d2c8873ea4d23f5ca52d6738f257d064a7"
      },
      "downloads": -1,
      "filename": "lxml-3.0.win32-py2.6.exe",
      "has_sig": false,
      "md5_digest": "4561fe5a1a7bef9db43384908aaa56f5",
      "packagetype": "bdist_wininst",
      "python_version": "2.6",
      "requires_python": null,
      "size": 3158219,
      "upload_time": "2013-03-19T08:48:09",
      "upload_time_iso_8601": "2013-03-19T08:48:09.029585Z",
      "url": "https://files.pythonhosted.org/packages/5c/c1/cf5501dbb6b5d596552ed46dae7fdbd5a181b08bbf522073ef93b74349f2/lxml-3.0.win32-py2.6.exe",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e153fdb00e2c00e87b1aa6386adffdacc37d9b09042ef7b3b983f548850663f",
        "md5": "be3a51a1f218ccb096936ccac3821538",
        "sha256": "e19ad09c69611748fe21a6c75607353226e3740642373d5fdde64aaaa76d15cf"
      },
      "downloads": -1,
      "filename": "lxml-3.0.win32-py2.7.exe",
      "has_sig": false,
      "md5_digest": "be3a51a1f218ccb096936ccac3821538",
      "packagetype": "bdist_wininst",
      "python_version": "2.7",
      "requires_python": null,
      "size": 3158130,
      "upload_time": "2013-03-19T08:56:32",
      "upload_time_iso_8601": "2013-03-19T08:56:32.195158Z",
      "url": "https://files.pythonhosted.org/packages/2e/15/3fdb00e2c00e87b1aa6386adffdacc37d9b09042ef7b3b983f548850663f/lxml-3.0.win32-py2.7.exe",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a6103a0bbadfe7603f974dd2dc1aa7b6f40d33f5c586df4ab990a6560b0f368",
        "md5": "a938402dae48486ad21b622105a64989",
        "sha256": "b2ad432af16a50405b04369653aa4bcffd86483897181756aa6156a99095f44a"
      },
      "downloads": -1,
      "filename": "lxml-3.0.win32-py3.2.exe",
      "has_sig": false,
      "md5_digest": "a938402dae48486ad21b622105a64989",
      "packagetype": "bdist_wininst",
      "python_version": "3.2",
      "requires_python": null,
      "size": 3155435,
      "upload_time": "2013-04-12T07:32:29",
      "upload_time_iso_8601": "2013-04-12T07:32:29.855405Z",
      "url": "https://files.pythonhosted.org/packages/9a/61/03a0bbadfe7603f974dd2dc1aa7b6f40d33f5c586df4ab990a6560b0f368/lxml-3.0.win32-py3.2.exe",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9867040c9e42463ebbf6042e37cc5c7c05f1e4d18291043a6ca9e8c7a8f38d01",
        "md5": "7873f872f7f29e5c745745e9b14dfc02",
        "sha256": "89f36359d440ccd6e25de258c156e507398aed78b5639bea490da5101e7a0fd9"
      },
      "downloads": -1,
      "filename": "lxml-3.0.win-amd64-py2.6.exe",
      "has_sig": false,
      "md5_digest": "7873f872f7f29e5c745745e9b14dfc02",
      "packagetype": "bdist_wininst",
      "python_version": "2.6",
      "requires_python": null,
      "size": 3409992,
      "upload_time": "2013-03-19T08:52:18",
      "upload_time_iso_8601": "2013-03-19T08:52:18.183601Z",
      "url": "https://files.pythonhosted.org/packages/98/67/040c9e42463ebbf6042e37cc5c7c05f1e4d18291043a6ca9e8c7a8f38d01/lxml-3.0.win-amd64-py2.6.exe",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "302f29d562eba5586a50d6bbe3b3f0657b3ec1f050a8e4f1be6c411c2f621a8a",
        "md5": "ce174ce429fc4116f2d6d19f2cf97c42",
        "sha256": "3656374e887b7a9efebfa876250dd7c73f4875c1ce3ea4dc76d87cbcb413fbf7"
      },
      "downloads": -1,
      "filename": "lxml-3.0.win-amd64-py2.7.exe",
      "has_sig": false,
      "md5_digest": "ce174ce429fc4116f2d6d19f2cf97c42",
      "packagetype": "bdist_wininst",
      "python_version": "2.7",
      "requires_python": null,
      "size": 3409193,
      "upload_time": "2013-03-19T08:59:58",
      "upload_time_iso_8601": "2013-03-19T08:59:58.929976Z",
      "url": "https://files.pythonhosted.org/packages/30/2f/29d562eba5586a50d6bbe3b3f0657b3ec1f050a8e4f1be6c411c2f621a8a/lxml-3.0.win-amd64-py2.7.exe",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2021-28957",
        "GHSA-jq4v-f5q6-mjqq"
      ],
      "details": "An XSS vulnerability was discovered in python-lxml's clean module versions before 4.6.3. When disabling the safe_attrs_only and forms arguments, the Cleaner class does not remove the formaction attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in lxml 4.6.3.",
      "fixed_in": [
        "4.6.3"
      ],
      "id": "PYSEC-2021-19",
      "link": "https://osv.dev/vulnerability/PYSEC-2021-19",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2014-3146"
      ],
      "details": "Incomplete blacklist vulnerability in the lxml.html.clean module in lxml before 3.3.5 allows remote attackers to conduct cross-site scripting (XSS) attacks via control characters in the link scheme to the clean_html function.",
      "fixed_in": [
        "3.3.5"
      ],
      "id": "PYSEC-2014-9",
      "link": "https://osv.dev/vulnerability/PYSEC-2014-9",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2018-19787",
        "GHSA-xp26-p53h-6h2p"
      ],
      "details": "An issue was discovered in lxml before 4.2.5. lxml/html/clean.py in the lxml.html.clean module does not remove javascript: URLs that use escaping, allowing a remote attacker to conduct XSS attacks, as demonstrated by \"j a v a s c r i p t:\" in Internet Explorer. This is a similar issue to CVE-2014-3146.",
      "fixed_in": [
        "4.2.5"
      ],
      "id": "PYSEC-2018-12",
      "link": "https://osv.dev/vulnerability/PYSEC-2018-12",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2020-27783",
        "GHSA-pgww-xf46-h92r"
      ],
      "details": "A XSS vulnerability was discovered in python-lxml's clean module. The module's parser didn't properly imitate browsers, which caused different behaviors between the sanitizer and the user's page. A remote attacker could exploit this flaw to run arbitrary HTML/JS code.",
      "fixed_in": [
        "4.6.2"
      ],
      "id": "PYSEC-2020-62",
      "link": "https://osv.dev/vulnerability/PYSEC-2020-62",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2021-43818",
        "GHSA-55x5-fj6c-h6m8"
      ],
      "details": "lxml is a library for processing XML and HTML in the Python language. Prior to version 4.6.5, the HTML Cleaner in lxml.html lets certain crafted script content pass through, as well as script content in SVG files embedded using data URIs. Users that employ the HTML cleaner in a security relevant context should upgrade to lxml 4.6.5 to receive a patch. There are no known workarounds available.",
      "fixed_in": [
        "4.6.5"
      ],
      "id": "PYSEC-2021-852",
      "link": "https://osv.dev/vulnerability/PYSEC-2021-852",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2021-28957"
      ],
      "details": "An XSS vulnerability was discovered in the python `lxml` clean module versions before 4.6.3. When disabling `the safe_attrs_only` and `forms` arguments, the `Cleaner` class does not remove the `formaction` attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in `lxml` 4.6.3.",
      "fixed_in": [
        "4.6.3"
      ],
      "id": "GHSA-jq4v-f5q6-mjqq",
      "link": "https://osv.dev/vulnerability/GHSA-jq4v-f5q6-mjqq",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2020-27783"
      ],
      "details": "A XSS vulnerability was discovered in python-lxml's clean module. The module's parser didn't properly imitate browsers, which caused different behaviors between the sanitizer and the user's page. A remote attacker could exploit this flaw to run arbitrary HTML/JS code.",
      "fixed_in": [
        "4.6.2"
      ],
      "id": "GHSA-pgww-xf46-h92r",
      "link": "https://osv.dev/vulnerability/GHSA-pgww-xf46-h92r",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2021-43818"
      ],
      "details": "### Impact\nThe HTML Cleaner in lxml.html lets certain crafted script content pass through, as well as script content in SVG files embedded using data URIs.\n\nUsers that employ the HTML cleaner in a security relevant context should upgrade to lxml 4.6.5.\n\n### Patches\nThe issue has been resolved in lxml 4.6.5.\n\n### Workarounds\nNone.\n\n### References\nThe issues are tracked under the report IDs GHSL-2021-1037 and GHSL-2021-1038.\n",
      "fixed_in": [
        "4.6.5"
      ],
      "id": "GHSA-55x5-fj6c-h6m8",
      "link": "https://osv.dev/vulnerability/GHSA-55x5-fj6c-h6m8",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2018-19787"
      ],
      "details": "An issue was discovered in lxml before 4.2.5. lxml/html/clean.py in the lxml.html.clean module does not remove javascript: URLs that use escaping, allowing a remote attacker to conduct XSS attacks, as demonstrated by \"j a v a s c r i p t:\" in Internet Explorer. This is a similar issue to CVE-2014-3146.",
      "fixed_in": [
        "4.2.5"
      ],
      "id": "GHSA-xp26-p53h-6h2p",
      "link": "https://osv.dev/vulnerability/GHSA-xp26-p53h-6h2p",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-2309"
      ],
      "details": "NULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered.",
      "fixed_in": [
        "4.9.1"
      ],
      "id": "GHSA-wrxv-2j5q-m38w",
      "link": "https://osv.dev/vulnerability/GHSA-wrxv-2j5q-m38w",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-2309",
        "GHSA-wrxv-2j5q-m38w"
      ],
      "details": "NULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered.",
      "fixed_in": [
        "4.9.1"
      ],
      "id": "PYSEC-2022-230",
      "link": "https://osv.dev/vulnerability/PYSEC-2022-230",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}