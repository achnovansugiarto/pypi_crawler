{
  "info": {
    "author": "fangyunsm",
    "author_email": "fangyunsm <934476300@qq.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Dsxquant\n\nDsxquant 是一个基于python语言开发的的量化工具箱，主要特征是其工具属性，专为上层策略应用提供服务。\n\n## 一、简介\nDsxquant 采用模块化设计思想，框架集成了数据、回测、策略、因子、仿真、资管、交易等模块。\n\n技术架构\n\n<img src=\"https://www.dsxquant.com/wp-content/uploads/2023/03/Dsxquant-Main-Engine-2-1024x985.png\" width=\"300\" />\n\n## 二、数据结构\n\n文档数据结构描述主要基于Pandas的 Series 和DataFrame，框架接口都支持返回Json数据，Series、DataFrame，支持 csv 文件转换等。\n\n## 三、安装\nDsxquant 托管在 Github,Gitee,PyPi，默认采用PyPi包安装方式\n\n### 1、PyPi 安装\n\n```\npip install dsxquant\n```\n\n### 2、Git 源码安装导入\n\n```\ngit clone https://github.com/dsxkline/dsxquant.git\n```\n\n### 3、安装依赖\n\n```\npip install pandas\n```\n\n## 四、快速上手\n\n安装后直接导入包即可使用\n\n``` python\nimport dsxquant\n# dsxquant 默认维护了一个连接\n# 可直接读取实时行情\nresult = dsxquant.get_quotes(\"sh000001,sh600000\").series()\nprint(result)\n```\n\n## 五、连接\n\n连接方式：\n同步连接 （默认）connect()\n异步连接 syncconnect()\n### 示例：\n\n``` python\n# 默认采用同步连接\ndd = dsxquant.dataser()\nif dd.connect():\n   # 读取行业分类\n   result = dd.get_hangye().series()\n   print(result)\n```\n\n### 框架支持with语法\n\n```python\n# with语法框架设计了自动连接，如果连接不成功会返回None，所以这里判断一下即可\nwith dsxquant.dataser() as dd:\n    # 连接成功可调用\n    if dd:\n       result = dd.get_quotes(\"sh000001\").datas()\n       print(result.data)\n```\n\n### 异步订阅模式\n\n```python\n# 异步订阅模式，订阅模式请求是异步进行的，订阅成功后服务器会主动推送信息到您的回调函数中,注意请不要手动调用关闭连接方法\ndd_async = dsxquant.dataser.asyncconnect()\nif dd_async:\n    # 异步请求实时行情接口，服务器会主动推送实时行情\n    def quotes_callback(response:dsxquant.parser):\n        # logger.debug(response.get(\"msg\"))\n        result = response.dataframe()\n        logger.debug(result)\n        pass\n\n    result = dd_async.sub_quotes(\"sh000001,sh600000,sz000001,bj430047,bj430090\",quotes_callback)\n    logger.debug(result)\n```\n\n## 六、订阅\n\nDsxquant 提供实时行情订阅功能，可批量订阅，也可以全量订阅。订阅功能需要启用异步连接 asyncconnect()，批量订阅最多支持50个股票代码，全量订阅默认全市场变动数据推送。\n\n```python\n# 异步订阅模式，订阅模式请求是异步进行的，订阅成功后服务器会主动推送信息到您的回调函数中,注意请不要手动调用关闭连接方法\ndd_async = dsxquant.dataser.asyncconnect()\nif dd_async:\n    # 异步请求实时行情接口，服务器会主动推送实时行情\n    def quotes_callback(response:dsxquant.parser):\n        # print(response.get(\"msg\"))\n        result = response.dataframe()\n        print(result)\n    # 批量订阅股票代码,批量订阅最多支持50个股票代码\n    result = dd_async.sub_quotes(\"sh000001,sh600000,sz000001,bj430047,bj430090\",quotes_callback)\n    print(result)\n        \n    def quotes_all_callback(response:dsxquant.parser):\n        dd = response.dataframe()\n        # 第一行默认是字段名称数组 [\"amount\",\"close\",.....]\n        names:list = list(dd.values[0])\n        # 第二行开始是数据\n        quote = dd.loc[1,:]\n        code = quote[names.index(\"code\")]\n        t = quote[names.index(\"lasttime\")]\n        d = quote[names.index(\"lastdate\")]\n        t = datetime.datetime.strptime(d+\" \"+t,\"%Y-%m-%d %H:%M:%S\")\n        s = datetime.datetime.now() - t\n        print(\"%s 笔 %s 时间 %s 当前时间 %s 延时 %s s\" % (dd.__len__(),code,t,datetime.datetime.now(),s.seconds))\n    # 全量订阅全市场所有股票实时行情\n    dd_async.sub_all_quotes(quotes_all_callback)\n```\n\n### 取消订阅\n\n```python\nsuccess = dd_async.cancel(quote)\nif success!=None:\n    print(\"cancel success:\"+quote.api_name)\n```\n\n## 七、读取市场股票\n\n目前市场仅支持上交所、深交所、北交所。\n\n### 市场枚举值：\n\n```python\n# 市场代码\nclass MARKET:\n    SH=0                            # 上交所\n    SZ=1                            # 深交所\n    BJ=2                            # 北交所\n    HK=3                            # 港交所\n    US=4                            # 美国\n```\n\n### 读取某个市场的所有股票列表\n\n```python\n# 读取某个市场的所有股票代码列表\nresult = dd.get_stocks(dsxquant.market.SZ).series()\nprint(result)\n```\n\n## 八、读取分类列表\n\n主要是读取行业、概念、地域分类的股票代码\n\n### 读取行业分类\n```python\n# 读取行业分类\nresult = dd.get_hangye().series()\nprint(result)\n```\n\n输出格式\n\n```\n\n       0\n0     煤炭\n1   石油石化\n2   美容护理\n3     环保\n4   电力设备\n...\n25    汽车\n26    电子\n27  有色金属\n28    钢铁\n29  农林牧渔\n30    综合\n```\n\n### 读取概念分类\n```python\n# 读取概念分类\nresult = dd.get_gainian().series()\nprint(result)\n```\n\n输出格式\n\n```\n         0\n0      血氧仪\n1    毫米波雷达\n2     eSIM\n3     AI训练\n4     数字哨兵\n..     ...\n619     举牌\n620   军民融合\n621    京津冀\n622   抗癌药物\n623   昨日涨停\n```\n\n### 读取地域分类\n\n```python\n# 读取地域分类\nresult = dd.get_diyu().series()\nprint(result)\n```\n\n输出格式\n\n```\n           0\n0   新疆维吾尔自治区\n1    宁夏回族自治区\n2        青海省\n3        甘肃省\n25       辽宁省\n...\n29       天津市\n30       北京市\n```\n\n## 九、读取实时行情\n\n目前仅支持A股实时行情，行情来自于网络公开数据，延时10秒以上，供个人量化开发者测试所用，请勿用于商业用途。\n\n```python\n # 读取实时行情并导出csv文件\nresult = dd.get_quotes([(\"000002\",dsxquant.MARKET.SZ),(\"600000\",dsxquant.MARKET.SH)]).csv(\"quotes.csv\")\nprint(result)\n\n# 读取实时行情\nresult = dd.get_quotes([(\"000002\",dsxquant.MARKET.SZ),(\"600000\",dsxquant.MARKET.SH)]).dataframe()\nprint(result)\n\n# 读取实时行情，批量字符串\nresult = dd.get_quotes(\"sh000001,sz000001,sh600000\").datas()\nprint(result.data)\n\n# 读取实时行情，字符串\nresult = dd.get_quotes(\"sh000001\").datas()\nif result.success:\n    print(result.data)\n```\n\n## 十、读取历史K线\n\n读取上市以来所有的历史K线数据，前后复权数据等。支持读取日K、周K、月K、年K等数据\n\n### 读取日K历史数据\n\n```python\n# 读取历史K线数据\nresult = dd.get_klines(\"000001\",dsxquant.MARKET.SZ,cycle=dsxquant.config.CYCLE.DAY).dataframe()\nprint(result)\n```\n\n输出格式 [日期,开,高,低,收,成交量,成交额]\n\n```\n                                                     0\n0    20230227,621462.0,13.88,13.68,13.86,621462.0,8...\n1    20230224,14.02,14.03,13.80,13.86,729989,101265...\n2    20230223,14.00,14.32,13.98,14.05,824491,116553...\n3    20230222,14.00,14.12,13.94,14.02,638922,895742...\n4    20230221,14.06,14.20,13.92,14.10,990495,139315...\n..                                                 ...\n315  20211109,17.48,17.65,17.26,17.53,1240573,21631...\n316  20211108,17.62,17.81,17.36,17.42,1376815,24064...\n317  20211105,17.85,18.00,17.57,17.64,1096040,19424...\n318  20211104,18.08,18.10,17.80,17.87,983411,176067...\n319  20211103,18.10,18.24,17.85,18.03,1114972,20093...\n```\n\n### 读取周K历史数据\n\n```python\n# 读取周K线数据\nresult = dd.get_klines(\"000001\",dsxquant.MARKET.SZ,cycle=dsxquant.config.CYCLE.WEEK).dataframe()\nprint(result)\n```\n\n### 读取月K历史数据\n\n```python\n# 读取月K线数据\nresult = dd.get_klines(\"000001\",dsxquant.MARKET.SZ,cycle=dsxquant.config.CYCLE.MONTH).dataframe()\nprint(result)\n```\n\n### 读取年K历史数据\n\n```python\n# 读取年K线数据\nresult = dd.get_klines(\"000001\",dsxquant.MARKET.SZ,cycle=dsxquant.config.CYCLE.YEAR).dataframe()\nprint(result)\n```\n\n## 十一、读取分钟K线\n\n支持读取30天内的历史分钟K线数据，1分钟、5分钟、15分钟、30分钟、60分钟等。\n\n### 读取1分钟历史数据\n\n```python\n# 读取1分钟K线数据\nresult = dd.get_klines(\"000001\",dsxquant.MARKET.SZ,cycle=dsxquant.config.CYCLE.M1,page_size=1000).dataframe()\nprint(result)\n```\n\n返回数据格式\n```\n                                                     0\n0    202302240931,14.02,14.03,13.94,13.96,26062,364...\n1    202302240932,13.96,13.96,13.92,13.96,10384,144...\n2    202302240933,13.96,13.96,13.93,13.94,6386,8908...\n3    202302240934,13.93,13.94,13.92,13.93,10046,139...\n4    202302240935,13.93,13.93,13.92,13.93,4432,6172...\n..                                                 ...\n475  202302031456,14.35,14.36,14.34,14.35,3920,5624...\n476  202302031457,14.36,14.36,14.34,14.34,5109,7332...\n477  202302031458,14.35,14.35,14.35,14.35,585,84005...\n478        202302031459,14.35,14.35,14.35,14.35,0,0.00\n479  202302031500,14.32,14.32,14.32,14.32,21701,310...\n```\n\n### 读取5分钟历史数据\n\n```python\n# 读取5分钟K线数据\nresult = dd.get_klines(\"000001\",dsxquant.MARKET.SZ,cycle=dsxquant.config.CYCLE.M5,page_size=1000).dataframe()\nprint(result)\n```\n\n### 读取15分钟历史数据\n\n```python\n# 读取15分钟K线数据\nresult = dd.get_klines(\"000001\",dsxquant.MARKET.SZ,cycle=dsxquant.config.CYCLE.M15,page_size=1000).dataframe()\nprint(result)\n```\n\n### 读取30分钟历史数据\n```python\n# 读取30分钟K线数据\nresult = dd.get_klines(\"000001\",dsxquant.MARKET.SZ,cycle=dsxquant.config.CYCLE.M30,page_size=1000).dataframe()\nprint(result)\n```\n\n### 读取60分钟历史数据\n\n```python\n# 读取60分钟K线数据\nresult = dd.get_klines(\"000001\",dsxquant.MARKET.SZ,cycle=dsxquant.config.CYCLE.M60,page_size=1000).dataframe()\nprint(result)\n```\n\n## 十二、复权因子\n\n框架复权因子采用的是涨跌幅复权算法，算法已开源，主要采用分红配股和股改数据进行计算，详细算法介绍可参考文章《量化基础算法:K线涨跌幅复权算法揭秘和实现》\n\n### 获取复权因子\n\n```python\n# 请求复权因子\nresult = dd.get_factors(\"000001\",dsxquant.MARKET.SZ).dataframe()\nprint(result)\n```\n\n输出格式，除权日的复权因子列表 {日期:[前复权因子,后复权因子]}\n```\n\n20220722    0.982475,60.840279\n20210514    0.974809,59.774055\n20200528    0.958463,59.307677\n20190626    0.948114,58.313133\n20180712    0.933428,57.683542\n20170721    0.919984,56.790039\n20160616    0.755418,55.972096\n20150413    0.623983,45.959846\n20140612    0.512923,37.963297\n20130620    0.317744,31.206389\n20121019    0.315393,19.331661\n20081031    0.241891,19.188569\n20070618    0.219832,14.716718\n20030929    0.216301,13.374637\n20020723    0.214064,13.159841\n20001106    0.186992,13.023705\n19991018    0.182043,11.376639\n19970825    0.120593,11.075537\n19960527     0.060297,7.336915\n19950925      0.04872,3.668457\n19940711     0.031303,2.964128\n19930524     0.016436,1.904488\n```\n\n得到复权因子后，根据对应的日期即可计算出前后复权数据,计算方法参考 《量化基础算法:K线涨跌幅复权算法揭秘和实现》\n\n## 十三、分红配股\n\n获取上市以来所有的分红配股信息，此信息来源于网络公开数据，由Dsxquant整理清洗。\n\n### 获取分红配股\n\n```python\n# 请求分红配股信息\nresult = dd.get_sharebonus(\"000001\",dsxquant.MARKET.SZ).dataframe()\nprint(result)\n```\n\n返回数据格式，参数名称可参考 接口文档\n\n```\ncode              sz000001\nper_ten_allo              \nallo_price                \nanno_day        2022-07-15\nper_ten_send             0\nper_ten_incr             0\nper_cash_div          2.28\nshare_day       2022-07-22\nreg_day         2022-07-21\nlist_day              \n```\n\n## 十四、财务报表\n\n财务报表数据来源于网络公开数据，由Dsxquant收集整理，提供财务指标、资产负债表、利润表、现金流量表等报表查询。\n\n### 获取财务指标\n\n```python\n# 财务指标\nresult = dd.get_finance(\"000002\",dsxquant.MARKET.SZ,report_type=dsxquant.config.REPORT_TYPE.DEFAULT).dataframe()\nprint(result)\n```\n\n返回数据格式\n\n```\nCODE                 sz000002\nDATE               2022-09-30\nZZC      1832624105913.530029\nLDZC     1482234397741.830078\nGDZC       14951487488.129999\nZFZ      1426655627128.919922\nLDFZ     1168326002698.350098\nJZC       405968478784.610107\nMGJZC                19.73719\nYYSR      337673241644.890015\nYYLR       37447020773.470001\nLRZE       37731123134.410004\nJLR            27244596166.41\nMGSY                   1.4697\n```\n\n### 获取资产负债表\n\n```python\n# 资产负债表\nresult = dd.get_finance(\"000002\",dsxquant.MARKET.SZ,report_type=dsxquant.config.REPORT_TYPE.BALANCESHEET).dataframe()\nprint(result)\n```\n返回数据格式\n```\nreport_date               2022-09-30\nzc_1                                \nzc_2                                \nzc_3                                \nzc_20                               \n                        ...         \nfzgdqy_2                        None\nfzgdqy_total    1832624105913.530029\nop_1                            None\nop_2                            None\ncode                        sz000002\n```\n\n### 获取现金流量表\n\n```python\n# 现金流量表\nresult = dd.get_finance(\"000002\",dsxquant.MARKET.SZ,report_type=dsxquant.config.REPORT_TYPE.CASHFLOW).dataframe()\nprint(result)\n```\n\n返回数据格式\n\n```\nreport_date    2022-09-30\njy_in_1                  \njy_in_2                  \njy_in_3                  \njy_in_4              None\n                  ...    \nje_11                    \nfbcce_add                \nop_1                 None\nop_2                 None\ncode             sz000002\n```\n\n### 获取利润表\n\n```python\n# 利润表\nresult = dd.get_finance(\"000002\",dsxquant.MARKET.SZ,report_type=dsxquant.config.REPORT_TYPE.PROFIT).dataframe()\nprint(result)\n```\n\n返回数据格式\n\n```\nreport_date             2022-09-30\nyyzsr          337673241644.890015\nsr_1           337673241644.890015\nsr_2                          None\nsr_3                          None\n                      ...         \nzhsy_3          26123838848.540001\nzhsy_4          15412047995.690001\nzhsy_5              10711790852.85\nzhsy_6                        None\ncode                      sz000002\n```\n\n## 十五、分时线\n仅支持查询30天内分时线历史数据\n\n```python\n# 请求分时图信息，默认是最新一个交易日的信息\nresult = dd.get_timeshring(\"000001\",dsxquant.MARKET.SZ).datas()\nif result.success:\n    print(result.data)\n```\n\n返回数据格式\n\n```\n[\n['0925', 13.85, 659700.0, 9136845.0, 13.85], \n['0930', 13.85, 3384822.0, 46903478.453999996, 13.857], \n['0931', 13.82, 1444600.0, 20009154.6, 13.851], \n['0932', 13.85, 1255300.0, 17382139.099999998, 13.847], \n['0933', 13.88, 2193900.0, 30396484.5, 13.855], \n['0934', 13.86, 913600.0, 12658841.6, 13.856], \n...\n['1454', 13.95, 404100.0, 5612949.0, 13.89], \n['1455', 13.95, 670000.0, 9306970.0, 13.891], \n['1456', 13.95, 300500.0, 4174245.5, 13.891], \n['1500', 13.96, 993594.0, 13803007.848, 13.892]\n]\n```\n\n## 十六、逐笔交易\n\n只支持查询30天内的历史逐笔交易信息\n\n### 获取逐笔交易信息\n\n```python\n# 请求逐笔交易\nresult = dd.get_translist(\"000001\",dsxquant.MARKET.SZ).dataframe()\nprint(result)\n```\n\n返回数据格式\n\n```\n      0      1         2             3       4\n0  1500  13.96  993594.0  1.380301e+07  13.892\n1  1456  13.95  300500.0  4.174246e+06  13.891\n2  1455  13.95  670000.0  9.306970e+06  13.891\n3  1454  13.95  404100.0  5.612949e+06  13.890\n4  1453  13.94  537500.0  7.465875e+06  13.890\n5  1452  13.96  356300.0  4.949007e+06  13.890\n6  1451  13.96  246100.0  3.418083e+06  13.889\n7  1450  13.95  671800.0  9.330630e+06  13.889\n8  1449  13.96  253800.0  3.525028e+06  13.889\n9  1448  13.96  423200.0  5.877402e+06  13.888\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dsxkline/dsx_quant_python",
    "keywords": "quant 量化",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dsxquant",
    "package_url": "https://pypi.org/project/dsxquant/",
    "platform": null,
    "project_url": "https://pypi.org/project/dsxquant/",
    "project_urls": {
      "Bug Tracker": "https://github.com/dsxkline/dsxquant/issues",
      "Homepage": "https://github.com/dsxkline/dsxquant"
    },
    "release_url": "https://pypi.org/project/dsxquant/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6,<4",
    "summary": "Dsxquant 是一个基于python语言开发的的量化工具箱，主要特征是其工具属性，专为上层策略应用提供服务。",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17141988,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81ba80deade490f413b104086f6694cf7f2f97149a528563e2b8e2ea9625ba4c",
        "md5": "e15d9a58ca2461634b9cb89d1be708e4",
        "sha256": "c8336fec3206b94f6a261c8b6333e209d294c7e69efc2c79f23d5520118aae9b"
      },
      "downloads": -1,
      "filename": "dsxquant-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e15d9a58ca2461634b9cb89d1be708e4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4",
      "size": 27755,
      "upload_time": "2023-03-03T09:43:34",
      "upload_time_iso_8601": "2023-03-03T09:43:34.578134Z",
      "url": "https://files.pythonhosted.org/packages/81/ba/80deade490f413b104086f6694cf7f2f97149a528563e2b8e2ea9625ba4c/dsxquant-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79a1ae73c63489d05d85f388bc6c5805deb61143ef0e3acabc82ad3d59f7f663",
        "md5": "9639958fc8d2c3aa9220086fd21661eb",
        "sha256": "769f4f5375c1313e62cce6f07e733981b3b088d38cce9905a01e6a2846c72335"
      },
      "downloads": -1,
      "filename": "dsxquant-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9639958fc8d2c3aa9220086fd21661eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4",
      "size": 20086,
      "upload_time": "2023-03-03T09:43:37",
      "upload_time_iso_8601": "2023-03-03T09:43:37.091459Z",
      "url": "https://files.pythonhosted.org/packages/79/a1/ae73c63489d05d85f388bc6c5805deb61143ef0e3acabc82ad3d59f7f663/dsxquant-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}