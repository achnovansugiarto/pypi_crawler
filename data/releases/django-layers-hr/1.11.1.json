{
  "info": {
    "author": "Hedley Roos",
    "author_email": "hedleyroos@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django Layers\n=============\n\n.. figure:: https://travis-ci.org/hedleyroos/django-layers.svg?branch=develop\n   :align: center\n   :alt: Travis\n\n   Travis\n\n--------------\n\nDjango Layers makes it possible to serve a set of templates and\nstatic resources as defined in ``settings.py``. This means you can serve\ndifferent HTML, Javascript and CSS to eg. basic mobile devices, smart\nphones and desktop browsers. These template sets (aka layers) also\nstack, so if you create ``foo.html`` for basic devices it is\nautomatically available for desktop browsers as well. You can override\n``foo.html`` for desktop browsers.\n\nInstallation\n------------\n\n1. Install or add ``django-layers-hr`` to your Python path.\n2. Add ``layers`` after ``django.contrib.static`` to your ``INSTALLED_APPS`` setting.\n3. Ensure the app that you will be creating layers for appears first in\n   ``INSTALLED_APPS`` else template override won't work.\n\nExample\n-------\n\nNote: there is a working example in the ``example`` subdirectory.\n\nWe have sites example.com, basic.example.com and smart.example.com. Each\nof the sites have their own ``settings.py``, thus different Django\nprocesses.\n\nDirectory structure\n^^^^^^^^^^^^^^^^^^^\n\n::\n\n    templates\n        - basic\n            - foo.html (1)\n            - bar.html (2)\n        - smart\n            - bar.html (3)\n        - web\n            - bar.html (4)\n\n    static\n        - basic\n            - foo.css (5)\n            - bar.css (6)\n        - smart\n            - bar.css (7)\n        - web\n            - bar.css (8)\n\nSettings\n^^^^^^^^\n\nWe define an \"inheritance\" hierarchy using a list-of-lists notation.\n\nTwo lines of inheritance: basic-smart and basic-web::\n\n    LAYERS = {'tree': ['basic', ['smart'], ['web']]}\n\nOne lines of inheritance: basic-smart-web.::\n\n    LAYERS = {'tree': ['basic', ['smart', ['web']]]}\n\nThere are two ways to configure layer lookup for system: specify the current\nlayer in a settings file or look it up from the request. Omit the ``current``\nkey to enable request based lookups::\n\n    LAYERS = {'tree': ['basic', ['smart'], ['web']], 'current': 'web'}\n\nLegacy settings require layers to be defined in separate settings files. The example\nbelow means we have three settings files, and thus three Django processes.\nPlease migrate to the default ``tree`` format.\n\n-  Desktop settings has ``LAYERS = {'layers': ['basic', 'web']}``.\n-  Basic settings has ``LAYERS = {'layers': ['basic']}``.\n-  Smart settings has ``LAYERS = {'layers': ['basic', 'smart']}``.\n\nAdd the loaders and finders to settings. The order is\nimportant.\n\n::\n\n    INSTALLED_APPS = (\n        'myapp',\n        'layers',\n        ...\n    )\n\n    TEMPLATE_LOADERS = (\n        'layers.loaders.filesystem.Loader',\n        'django.template.loaders.filesystem.Loader',\n        'layers.loaders.app_directories.Loader',\n        'django.template.loaders.app_directories.Loader',\n    )\n\n    STATICFILES_FINDERS = (\n        'layers.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'layers.finders.AppDirectoriesFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n    )\n\nTemplate results\n^^^^^^^^^^^^^^^^\n\n-  http://example.com/foo yields (1).\n-  http://example.com/bar yields (4).\n-  http://basic.example.com/foo yields (1).\n-  http://basic.example.com/bar yields (2).\n-  http://smart.example.com/foo yields (1).\n-  http://smart.example.com/foo yields (3).\n\nStatic results\n^^^^^^^^^^^^^^\n\n-  http://example.com/static/foo.css yields (5).\n-  http://example.com/static/bar.css yields (8).\n-  http://basic.example.com/static/foo.css yields (5).\n-  http://basic.example.com/static/bar.css yields (6).\n-  http://smart.example.com/static/foo.css yields (5).\n-  http://smart.example.com/static/foo.css yields (7).\n\nOverriding templates from other apps\n------------------------------------\n\nThe normal template resolution rules apply. Creating eg.\n``templates/web/registration/login.html`` will override the login page\nfor web only.\n\nCollectstatic\n-------------\n\nCollectstatic remains unaffected. The collector delegates to finders, so\nall layer aware resources end up with partial paths under the\n``STATIC_ROOT`` directory.\n\nDecorators\n----------\nA user could follow a link that leads him to a layer that serves a broken page. For example a web site\nis served on www.site.com with an accompanying basic site m.site.com. Visiting www.site.com/flashy-dashboard\nwith a basic device like a Samsung E250 will result in the user being redirected to m.site.com/flashy-dashboard.\nThat page probably does not exist for basic devices because it can't render it well enough. In such a case a\ndecorator ``exclude_from_layers`` is provided that renders a friendly page instead of a 404 or 500 error::\n\n    class WebOnlyView(TemplateView):\n        template_name = \"layers/web_only_view.html\"\n\n        @exclude_from_layers(layers=(\"basic\",))\n        def get(self, *args, **kwargs):\n            return super(WebOnlyView, self).get(*args, **kwargs)\n\nRequest based layer lookup\n--------------------------\nThe preferred way of layer lookup is through the presense of an\n``X-Django-Layer`` header in the request. Django Layers layer lookup is very\nsimilar to the site object lookup done in ``django.contrib.sites``. If a layer\nis explicitly defined in settings then that is used, else the request headers\nare inspected.\n\nDuring development you will likely define the layer in your settings file, but\nin a production environment you don't want a Django process per layer, so\nrequest based lookups are preferred.\n\nLayer objects\n-------------\nThe management command `load_layers` creates a `Layer` object for each layer in\nyour project. It is useful for doing layer based filtering at database level.\n\nCan I add my own layers?\n------------------------\nYes! Basic, smart and web are just examples. You can define any hierarchy with\nany names.\n\nAuthors\n=======\n\n* Hedley Roos\n* Altus Barry\n\nChangelog\n=========\n\n1.11.1\n------\n#. Guard against KeyError, when request is empty in get_current_layer_stack().\n\n1.11.0\n------\n#. Django 1.11 compatibility.\n\n1.10.1\n------\n#. Fix typos in documentation.\n#. Add `layers_collectstatic` management command to do layer aware static file collection.\n\n\n1.10.0\n------\n#. Django 1.10 compatibility.\n#. Make it possible to determine the layer from the request. This removes the need for a Django process per layer.\n\n1.9\n---\n#. Drop Django 1.6 compatibility. Django 1.9 is supported and tested.\n\n0.5.1\n-----\n#. Rewrite decorator to be function based because it makes it easier to use in urls.py.\n\n0.5\n---\n#. Provide decorator `exclude_from_layers` so a view renders properly even if it can't render for a particular layer.\n\n0.4\n---\n#. Remove redundant collectstatic management command.\n\n0.3\n---\n#. Expand tests.\n#. Fix bug where static file not defined in a layer could not be overwritten in a layer.\n#. Provide a layer aware replacement for collectstatic.\n\n0.2\n---\n#. Inevitable package rename.\n\n0.1\n---\n#. Initial release.\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/hedleyroos/django-layers",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-layers-hr",
    "package_url": "https://pypi.org/project/django-layers-hr/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-layers-hr/",
    "project_urls": {
      "Homepage": "http://github.com/hedleyroos/django-layers"
    },
    "release_url": "https://pypi.org/project/django-layers-hr/1.11.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Serve different templates and static files for eg. mobi and web. Layers can be stacked to enable resource re-use.",
    "version": "1.11.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4623979,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93040a3c498b17ae6be262a3208de8e1d344b9106551452c5cba6d24247145a9",
        "md5": "0859f849899e19e48c4794d06b2f04bd",
        "sha256": "1660d4c6a428ef30c40dde5ca79e5a00764a9c855877ff8a964dc6a4bb881642"
      },
      "downloads": -1,
      "filename": "django_layers_hr-1.11.1-py2.7.egg",
      "has_sig": false,
      "md5_digest": "0859f849899e19e48c4794d06b2f04bd",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 55037,
      "upload_time": "2018-03-28T10:09:22",
      "upload_time_iso_8601": "2018-03-28T10:09:22.709674Z",
      "url": "https://files.pythonhosted.org/packages/93/04/0a3c498b17ae6be262a3208de8e1d344b9106551452c5cba6d24247145a9/django_layers_hr-1.11.1-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22686533345e2ca1b00b958628bb17a4481c1ea5fefaa6bd2ba3d9c7d7c166da",
        "md5": "efc99f5f1dcf4c3514aee238e061d2c1",
        "sha256": "e0f84b17ef91fc7227fb28663cfef9771e21b15a10c0b94ee3cca48cdbfda11d"
      },
      "downloads": -1,
      "filename": "django-layers-hr-1.11.1.tar.gz",
      "has_sig": false,
      "md5_digest": "efc99f5f1dcf4c3514aee238e061d2c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16121,
      "upload_time": "2018-03-28T10:09:19",
      "upload_time_iso_8601": "2018-03-28T10:09:19.970019Z",
      "url": "https://files.pythonhosted.org/packages/22/68/6533345e2ca1b00b958628bb17a4481c1ea5fefaa6bd2ba3d9c7d7c166da/django-layers-hr-1.11.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}