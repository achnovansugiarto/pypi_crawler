{
  "info": {
    "author": "Ethan McCreadie",
    "author_email": "ethanmcc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# django-makeconf\n\nMake config files from Django settings variables and templates.\n\n## Installation\n\nFrom your Django app, install the module from pip:\n\n\tpip install django-makeconf\n\t\nThen make sure it's included in your `INSTALLED_APPS` section:\n\n\tINSTALLED_APPS = (\n\t\t...\n\t    'makeconf',\n\t)\n\n## Templates\n\nCreate templates in the `templates/` directory of your app. For example, if you create `myapp/templates/makeconf/Dockerfile.tmpl`, you can generate `Dockerfile` in the root of your app by configuring `MAKECONF_MAP` in your settings file:\n\n\tMAKECONF_MAP = {\n\t\t'Dockerfile': 'makeconf/Dockerfile.tmpl',\n\t}\n\t\nThis relies on Django's template finder, which is pretty flexible. It will scan all your apps for a template with the same path name. The `Dockerfile` will be generated using the `Dockerfile.tmpl`, and it will have access to the `settings` variable. \n\n## Elastic Beanstalk Modules\n\nElastic Beanstalk configuration files can be declared using `MAKECONF_EB_MODULES`. Templates named `<module_name>.tmpl` can be referenced in a list by the module name. If you had a `newrelic` module and a `postgres` module that each configure your server with packages, files, etc., you can automatically turn the following format:\n\n    MAKECONF_EB_MODULES = ['postgres', 'newrelic']\n\nInto additional `MAKECONF_MAP` entries like so:\n\n    MAKECONF_MAP = {\n        ...\n        '.ebextensions/01_postgres.config': 'postgres.tmpl',\n        '.ebextensions/02_newrelic.config': 'newrelic.tmpl',\n    }\n\nIf `MAKECONF_EB_MODULES` is set, `.ebextensions` will be erased with each build.\n\n## Options\n\nCurrently, there is one option which can be set using `MAKECONF_OPTIONS`:\n\n* `executable_extensions` - Files with extensions in this list will be created executable. Defaults to `['.sh']`.\n\n## Usage\n\nAssuming you have a `TIER` variable defined as `'qa'` in your settings file and the following template,\n\n\tFROM amazon/aws-eb-python:3.4.2-onbuild-3.5.1\n\t\n\tADD uwsgi-start.sh /\n\t\n\tENV DJANGO_SETTINGS_MODULE config.settings.{{ settings.TIER }}\n\t\n\tEXPOSE 8080\n\nyou could run\n\n\tpython manage.py makeconf\n\t\nand `{{ settings.TIER }}` would be replaced with `qa` in the output file.\n\n## Shared Templates\n\nIf people use this, I could see shareable formats published for different services and needs. I'm currently using it to build Elastic Beanstalk and Docker configurations based on my Django settings, so I may end up publishing Django apps with names like `django-makeconf-elasticbeanstalk-configure-proxy`, or `django-makeconf-eb-docker-settings-module`, which would simply contain templates in their `templates/` directories (plus a `setup.py` and a `MANIFEST.in` that included the template files). You'd be able to pip install those templates and use them directly in your `MAKECONF_MAP`.\n\nAlso, I'm totally open to contributions in that vein or pull requests / issues on this project.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ethanmcc/django-makeconf",
    "keywords": null,
    "license": "BSD License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-makeconf",
    "package_url": "https://pypi.org/project/django-makeconf/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-makeconf/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ethanmcc/django-makeconf"
    },
    "release_url": "https://pypi.org/project/django-makeconf/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Django app that provides commands to build deployment and other configuration files based on Django settings.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2827249,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c88f9eee02b453fecd4ecdad8b6635c4870205460c90c8ef187e0838f5b322d",
        "md5": "5362f5c8cc91e05813eb97810da7a9ea",
        "sha256": "ad648671cdd3006b092df8ee37454e09424e4b36331d2071e417c76fe1a527dc"
      },
      "downloads": -1,
      "filename": "django-makeconf-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5362f5c8cc91e05813eb97810da7a9ea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3882,
      "upload_time": "2015-11-12T21:06:56",
      "upload_time_iso_8601": "2015-11-12T21:06:56.487609Z",
      "url": "https://files.pythonhosted.org/packages/1c/88/f9eee02b453fecd4ecdad8b6635c4870205460c90c8ef187e0838f5b322d/django-makeconf-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}