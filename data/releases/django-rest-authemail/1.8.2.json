{
  "info": {
    "author": "Celia Oakley",
    "author_email": "celia.oakley@alumni.stanford.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": "django-rest-authemail\n=====================\n\n![Python package](https://github.com/celiao/django-rest-authemail/workflows/build/badge.svg)\n![codecov](https://img.shields.io/codecov/c/github/celiao/django-rest-authemail)\n![pypi](https://img.shields.io/pypi/pyversions/django-rest-authemail)\n![pypi](https://img.shields.io/pypi/djversions/django-rest-authemail?label=django)\n![pypi](https://img.shields.io/pypi/v/django-rest-authemail)\n\n`django-rest-authemail` is a Django/Python application that provides a RESTful API interface for user signup and authentication.  Email addresses are used for authentication, rather than usernames.  Because the authentication user model is based on Django's `AbstractBaseUser` and is itself abstract, the model can be extended without the need for additional database tables.  Token authentication allows the API to be accessed from a variety of front ends, including Django, React and AngularJS clients, and iOS and Android mobile apps.\n\n\nFeatures\n--------\n\n- API endpoints for signup, signup email verification, login, logout, password reset, password reset verification, password change, and user detail.\n- Extensible abstract user model.\n- Perform password confirmation and other client-side validation on the front end for a better user experience.\n- Token authentication.\n- User models in the admin interface include inlines for signup and password reset codes.\n- An example project is included and contains example UI templates.\n- Supports and tested with Python 3.6 and 3.7.\n- Supports and tested with Django 1.11.17, 2.0, and 2.1.\n- Supports and tested with Django REST Framework 3.7.1 through 3.11.0.\n\n\nInstallation\n------------\n\n`django-rest-authemail` is available on the Python Package Index (PyPI) at https://pypi.python.org/pypi/django-rest-authemail.\n\nInstall `django-rest-authemail` using one of the following techniques.\n\n- Use pip.  Note that particular versions of Django and the Django REST Framework may be installed.\n\n```\npip install django-rest-authemail\n```\n\n- Download the .tar.gz file from PyPI and install it yourself.\n- Download the [source from Github](http://github.com/celiao/django-rest-authemai) and install it yourself.\n\nIf you install it yourself, also install [Django](https://www.djangoproject.com/), the [Django REST Framework](http://www.django-rest-framework.org), and [requests](http://www.python-requests.org/en/latest).\n\nUsage\n-----\n\nCreate a Django project, if you haven't already. For example,\n\n```python\ndjango-admin startproject mysite\n```\n\nIn the `settings.py` file of your project, include `rest_framework` and `rest_framework.authtoken` in `INSTALLED_APPS`. Set the authentication scheme for the Django REST Framework to `TokenAuthentication`.\n\n```python\nmysite/settings.py\n----\n\nINSTALLED_APPS = [\n\t...\n\t'rest_framework',\n\t'rest_framework.authtoken',\n\t...\n]\n\nREST_FRAMEWORK = {\n\t'DEFAULT_AUTHENTICATION_CLASSES': (\n\t\t'rest_framework.authentication.TokenAuthentication',\n\t)\n}\n```\n\nOptionally, you may add an `AUTH_EMAIL_VERIFICATION` setting to specify whether to enable email verification for new users on account registration/signup. Setting this to `False` will automatically verify newly created users.\n\nCreate a Django application for your user data.  For example,\n\n```python\npython manage.py startapp accounts\n```\n\nIn the `models.py` file of your application, extend `EmailAbstractUser`, add custom fields, and assign `objects` to `EmailUserManager()`.  For example,\n\n```python\naccounts/models.py\n----\n\nfrom django.db import models\nfrom authemail.models import EmailUserManager, EmailAbstractUser\n\nclass MyUser(EmailAbstractUser):\n\t# Custom fields\n\tdate_of_birth = models.DateField('Date of birth', null=True, blank=True)\n\n\t# Required\n\tobjects = EmailUserManager()\n```\n\nIn the `settings.py` file of your project, include `authemail` and your application in `INSTALLED_APPS`. Set `AUTH_USER_MODEL` to the class of your user model.  For example,\n\n```python\nmysite/settings.py\n----\n\nINSTALLED_APPS = [\n\t...\n\t'rest_framework',\n\t'rest_framework.authtoken',\n\t'authemail',\n\t'accounts',\n\t...\n]\n\nAUTH_USER_MODEL = 'accounts.MyUser'\n\n```\n\nIn the `admin.py` file of your project, extend `EmailUserAdmin` to add your custom fields.  For example,\n\n```python\nmysite/admin.py\n----\n\nfrom django.contrib import admin\nfrom django.contrib.auth import get_user_model\nfrom authemail.admin import EmailUserAdmin\n\nclass MyUserAdmin(EmailUserAdmin):\n\tfieldsets = (\n\t\t(None, {'fields': ('email', 'password')}),\n\t\t('Personal Info', {'fields': ('first_name', 'last_name')}),\n\t\t('Permissions', {'fields': ('is_active', 'is_staff', \n\t\t\t\t\t\t\t\t\t   'is_superuser', 'is_verified', \n\t\t\t\t\t\t\t\t\t   'groups', 'user_permissions')}),\n\t\t('Important dates', {'fields': ('last_login', 'date_joined')}),\n\t\t('Custom info', {'fields': ('date_of_birth',)}),\n\t)\n\nadmin.site.unregister(get_user_model())\nadmin.site.register(get_user_model(), MyUserAdmin)\n```\n\n\nCreate the database tables with Django's `makemigrations`, `migrate`, and create a superuser with `createsuperuser`.\n\n```python\npython manage.py makemigrations\npython manage.py migrate\npython manage.py createsuperuser\n```\n\n\nCheck your setup by starting a Web server on your local machine:\n\n```python\npython manage.py runserver\n```\n\n\nDirect your browser to the `Django` `/admin` and log in.\n\n```python\n127.0.0.1:8000/admin\n```\n\nYou should see `Users`, `Tokens`, `Password reset codes`, `Signup codes`, and `Groups`.  If you click on `Users`, you should see your superuser account.\n\nAdd the `authemail` API endpoints to your project's `urls.py` file.  For example,\n\n```python\nmysite/urls.py\n----\n\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n\tpath('admin/', admin.site.urls),\n\n\tpath('api/accounts/', include('authemail.urls')),\n]\n```\n\nWhen users signup or reset their password, they will be sent an email with a link and verification code.  Include email settings as environment variables or in your project's `settings.py` file.  For example,\n\n```python\nmysite/settings.py\n----\n\n# Email settings\n# https://docs.djangoproject.com/en/3.1/topics/email/\n# https://docs.djangoproject.com/en/3.1/ref/settings/#email-host\n\nimport os\n\nEMAIL_FROM = os.environ.get('AUTHEMAIL_DEFAULT_EMAIL_FROM') or '<YOUR DEFAULT_EMAIL_FROM HERE>'\nEMAIL_BCC = os.environ.get('AUTHEMAIL_DEFAULT_EMAIL_BCC') or '<YOUR DEFAULT_EMAIL_BCC HERE>'\n\nEMAIL_HOST = os.environ.get('AUTHEMAIL_EMAIL_HOST') or 'smtp.gmail.com'\nEMAIL_PORT = os.environ.get('AUTHEMAIL_EMAIL_PORT') or 587\nEMAIL_HOST_USER = os.environ.get('AUTHEMAIL_EMAIL_HOST_USER') or '<YOUR EMAIL_HOST_USER HERE>'\nEMAIL_HOST_PASSWORD = os.environ.get('AUTHEMAIL_EMAIL_HOST_PASSWORD') or '<YOUR EMAIL_HOST_PASSWORD HERE>'\nEMAIL_USE_TLS = True\nEMAIL_USE_SSL = False\n```\n\nTry out `authemail` API calls by firing up `python` and using the `authemail` wrapper methods (`runserver` should still be executing).  For example,\n\n```python\npython\n>>> from authemail import wrapper\n>>> account = wrapper.Authemail()\n>>> first_name = 'Your first name'\n>>> last_name = 'Your last name'\n>>> email = 'your_email@gmail.com'\n>>> password = 'Your password'\n>>> response = account.signup(first_name=first_name, last_name=last_name,\n... email=email, password=password)\n```\n\nIn the `Django` `/admin`, you should see a new user (not verified) and a new signup code.  You should receive an email at `your_email@gmail.com`.  Use the code in the email to verify your email address using the wrapper (normally, the link in the email would point to the front end, which would issue the signup verify request to the API):\n\n```python\n>>> code = '7f31e7a515df266532df4e00e0cf1967a7de7d17'\n>>> response = account.signup_verify(code=code)\n```\n\nIn the `Django` `/admin`, the new user is now verified and the signup code is absent.  The new user can now login and you can inspect the associated login token:\n\n```python\n>>> response = account.login(email=email, password=password)\n>>> account.token\n'a84d062c1b60a36e6740eb60c6f9da8d1f709322'\n```\n\nYou will find the same token for the user in the `Token` table in the `Django` `/admin`.  Find out more information about the user (insert your token):\n\n```python\n>>> token = 'a84d062c1b60a36e6740eb60c6f9da8d1f709322'\n>>> response = account.users_me(token=token)\n>>> response\n{'first_name': 'Your first name', 'last_name': 'Your last name', 'email': 'your_email@gmail.com'}\n```\n\nUse the authentication token to logout:\n\n```python\n>>> response = account.logout(token=token)\n>>> response\n{'success': 'User logged out.'}\n```\n\nPlay with password reset and change!\n\nDjango REST Framework Browsable API\n-----\n\nIf you are having trouble getting your code to execute, or are just curious, try out the Django REST Framework Browsable API.  If you type an `authemail` API endpoint into your browser, the Browsable API should appear (`runserver` should still be executing).  For example,\n\n```python\n127.0.0.1:8000/api/accounts/signup\n```\n\nEnter information in the HTML form fields of the Browsable API, e.g.:\n\n![signup_html_form here](README_images/signup_html_form.jpg)\n\nThen click on `POST`.  You will either receive an error message to help in your debugging, or, if your signup was successful:\n\n![signup_html_form_success here](README_images/signup_html_form_success.jpg)\n\nTry out the other `authemail` API endpoints with the Django REST Framework Browsable API.\n\n\nFront End Example Project\n----\n\nMake `authemail` API calls from front end code.  To get started, follow the steps in the`example_project` `README.md`.  Enhance the Django code in the `example_project` or extend the concepts to React, AngularJS, iOS, and Android front ends.\n\nWhen calling endpoints from the front end that require authentication (`logout`, `password/change`, and `users/me`), include the authorization token key in the HTTP header.  For example,\n\n```python\nAuthorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\n```\n\nHere's an example using ``curl``,\n\n```python\ncurl -X GET 'http://127.0.0.1:8000/api/accounts/logout/' \\\n     -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'\n```\n\nWrapper\n-------\nA wrapper is available to access the Authemail API with Python code.  First create an instance of the Authemail class, then call methods to access the API.  There is a one-to-one mapping between the endpoints and instance methods.  For example,\n\n```python\nmysite/views.py\n----\n\nfrom authemail import wrapper\n\naccount = wrapper.Authemail()\nresponse = account.signup(first_name=first_name, last_name=last_name,\n\temail=email, password=password)\n\nif 'detail' in response:\n\t# Handle error condition\nelse:\n\t# Handle good response\n```\n\nSee `example_project/views.py` for more sample usage.\n\n\nAuthemail API Endpoints\n-----------------------\nFor the endpoints that follow, the base path is shown as `/api/accounts`.  This path is for example purposes.  It can be customized in your project's `urls.py` file.\n\n**POST /api/accounts/signup**\n\nCall this endpoint to sign up a new user and send a verification email.  Sample email templates are found in `authemail/templates/authemail`.  To override the email templates, copy and modify the sample templates, or create your own, in `your_app/templates/authemail`.\n\nYour front end should handle password confirmation, and if desired, require the visitor to input their first and last names.\n\nUnverified users can sign up multiple times, but only the latest signup code will be active.\n\n- Payload\n\n    - email (required)\n    - password (required)\n    - first_name (optional)\n    - last_name (optional)\n\n- Possible responses\n\n```python\n201 (Created)\nContent-Type: application/json\n{\n\t\"email\": \"amelia.earhart@boeing.com\"\n\t\"first_name\": \"Amelia\", \n\t\"last_name\": \"Earhart\", \n}\n\n400 (Bad Request)\nContent-Type: application/json\n{\n\t\"email\": [\n\t\t\"This field is required.\"\n\t], \n\t\"password\": [\n\t\t\"This field is required.\"\n\t] \n}\n\n{\n\t\"email\": [\n\t\t\"Enter a valid email address.\"\n\t]\n}\n\n{\n\t\"detail\": \"User with this Email address already exists.\"\n}\n```\n\n**GET /api/accounts/signup/verify/?code=\\<code\\>**\n\nWhen the user clicks the link in the verification email, the front end should call this endpoint to verify the user.\n\n- Parameters\n\n    - code (required)\n\n- Possible responses\n\n```python\n200 (OK)\nContent-Type: application/json\n{\n\t\"success\": \"User verified.\"\n}\n\n400 (Bad Request)\nContent-Type: application/json\n{\n\t\"detail\": \"Unable to verify user.\"\n}\n```\n\n**POST /api/accounts/login**\n\nCall this endpoint to log in a user.  Use the authentication token in future calls to identify the user.\n\n- Payload\n\n    - email (required)\n    - password (required)\n\n- Possible responses\n\n\n```python\n200 (OK)\nContent-Type: application/json\n{\n\t\"token\": \"91ec67d093ded89e0a752f35188802c261899013\"\n}\n\n400 (Bad Request)\nContent-Type: application/json\n{\n\t\"password\": [\n\t\t\"This field is required.\"\n\t], \n\t\"email\": [\n\t\t\"This field is required.\"\n\t]\n}\n\n{\n\t\"email\": [\n\t\t\"Enter a valid email address.\"\n\t]\n}\n\n401 (Unauthorized)\n{\n\t\"detail\": \"Authentication credentials were not provided.\"\n}\n\n{\n\t\"detail\": \"Unable to login with provided credentials.\"\n}\n```\n\n**GET /api/accounts/logout**\n\nCall this endpoint to log out an authenticated user.\n\n- HTTP Header\n\n```python\nAuthorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\n```\n\n- Possible responses\n\n```python\n200 (OK)\nContent-Type: application/json\n{\n\t\"success\": \"User logged out.\"\n}\n\n401 (Unauthorized)\nContent-Type: application/json\n{\n\t\"detail\": \"Authentication credentials were not provided.\"\n}\n\n{\n\t\"detail\": \"Invalid token\"\n}\n```\n\n**POST /api/accounts/password/reset**\n\nCall this endpoint to send an email to a user so they can reset their password.   Similar to signup verification, the password reset email templates are found in `authemail/templates/authemail`.  Override the default templates by placing your similarly-named templates in `your_app/templates/authemail`.\n\n- Payload\n\n    - email (required)\n\n- Possible responses\n\n```python\n201 (Created)\nContent-Type: application/json\n{\n\t\"email\": \"amelia.earhart@boeing.com\"\n}\n\n400 (Bad Request)\nContent-Type: application/json\n{\n\t\"email\": [\n\t\t\"This field is required.\"\n\t]\n}\n\n{\n\t\"email\": [\n\t\t\"Enter a valid email address.\"\n\t]\n}\n\n{\n\t\"detail\": \"Password reset not allowed.\"\n}\n```\n\n**GET /api/accounts/password/reset/verify/?code=\\<code\\>**\n\nWhen the user clicks the link in the password reset email, call this endpoint to verify the password reset code.\n\n- Parameters\n\n    - code (required)\n\n- Possible responses\n\n```python\n200 (OK)\nContent-Type: application/json\n{\n\t\"success\": \"User verified.\"\n}\n\n400 (Bad Request)\nContent-Type: application/json\n{\n\t\"password\": [\n\t\t\"This field is required.\"\n\t] \n}\n\n400 (Bad Request)\nContent-Type: application/json\n{\n\t\"detail\": \"Unable to verify user.\"\n}\n```\n\n**POST /api/accounts/password/reset/verified**\n\nCall this endpoint with the password reset code and the new password, to reset the user's password.  The front end should prompt the user for a confirmation password and give feedback if the passwords don't match.\n\n- Payload\n\n    - code (required)\n    - password (required)\n\n- Possible responses\n\n```python\n200 (OK)\nContent-Type: application/json\n{\n\t\"success\": \"Password reset.\"\n}\n\n400 (Bad Request)\nContent-Type: application/json\n{\n\t\"password\": [\n\t\t\"This field is required.\"\n\t] \n}\n\n400 (Bad Request)\nContent-Type: application/json\n{\n\t\"detail\": \"Unable to verify user.\"\n}\n```\n\n**POST /api/accounts/password/change**\n\nCall this endpoint to change a user's password.\n\n- HTTP Header\n\n```python\nAuthorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\n```\n\n- Payload\n\n    - password (required)\n\n- Possible responses\n\n```python\n200 (OK)\nContent-Type: application/json\n{\n\t\"success\": \"Password changed.\"\n}\n\n400 (Bad Request)\nContent-Type: application/json\n{\n\t\"password\": [\n\t\t\"This field is required.\"\n\t] \n}\n\n401 (Unauthorized)\nContent-Type: application/json\n{\n\t\"detail\": \"Authentication credentials were not provided.\"\n}\n\n{\n\t\"detail\": \"Invalid token\"\n}\n```\n\n**GET /api/accounts/users/me**\n\nCall this endpoint after logging in and obtaining an authorization token to learn more about the user.\n\n- HTTP Header\n\n```python\nAuthorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\n```\n\n- Possible responses\n\n```python\n200 (OK)\nContent-Type: application/json\n{\n\t\"id\": 1,\n\t\"email\": \"amelia.earhart@boeing.com\",\n\t\"first_name\": \"Amelia\",\n\t\"last_name\": \"Earhart\",\n}\n\n401 (Unauthorized)\nContent-Type: application/json\n{\n\t\"detail\": \"Authentication credentials were not provided.\"\n}\n\n{\n\t\"detail\": \"Invalid token\"\n}\n```\n\n\nInspiration and Ideas\n---------------------\nInspiration and ideas for `django-rest-authemail` were derived from:\n\n- [django-rest-framework](http://www.django-rest-framework.org/)\n- [django-email-as-username](https://pypi.python.org/pypi/django-email-as-username/1.6.7)\n- [django-registration](http://django-registration.readthedocs.org/en/latest/)\n- [django-rest-auth](https://pypi.python.org/pypi/django-rest-auth)\n- [tmdbsimple](https://pypi.python.org/pypi/tmdbsimple)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/celiao/django-rest-authemail/tarball/1.8.2",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/celiao/django-rest-authemail",
    "keywords": "django,python,rest,rest-framework,api,auth,authentication,email,user,username,registration,signup,login,logout,password,django-rest-framework,djangorestframework,django-registration,django-email-as-username",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-authemail",
    "package_url": "https://pypi.org/project/django-rest-authemail/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-authemail/",
    "project_urls": {
      "Download": "https://github.com/celiao/django-rest-authemail/tarball/1.8.2",
      "Homepage": "http://github.com/celiao/django-rest-authemail"
    },
    "release_url": "https://pypi.org/project/django-rest-authemail/1.8.2/",
    "requires_dist": [
      "Django (<=2.1.1,>=1.11.17)",
      "djangorestframework (<=3.11.0,>=3.7.1)",
      "requests (>=2.3.0)"
    ],
    "requires_python": "",
    "summary": "A RESTful API for user signup and authentication using email addresses",
    "version": "1.8.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17488524,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7624f3b29368e502a84fe4a97e258b311de69c1f88ebe6793f4ca93931856371",
        "md5": "3b65a5b8d448955d47cb198e40388fd6",
        "sha256": "14a680b41f326dc1430d9658963c720a9084e55175f292d563803d1b9f0fabc8"
      },
      "downloads": -1,
      "filename": "django_rest_authemail-1.8.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3b65a5b8d448955d47cb198e40388fd6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 36618,
      "upload_time": "2020-10-07T03:29:16",
      "upload_time_iso_8601": "2020-10-07T03:29:16.986213Z",
      "url": "https://files.pythonhosted.org/packages/76/24/f3b29368e502a84fe4a97e258b311de69c1f88ebe6793f4ca93931856371/django_rest_authemail-1.8.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b4bdcf0bb32e3fc361d50f5cc610da2496c8c64bce2a08958becc43bf7bc9d3",
        "md5": "b18b8cdcc6453b2ff35d8b684f46df22",
        "sha256": "641c10ad30ea4c64cb3499355a6146b97cff69f6f96e03722bfe39e86feabb0b"
      },
      "downloads": -1,
      "filename": "django-rest-authemail-1.8.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b18b8cdcc6453b2ff35d8b684f46df22",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36931,
      "upload_time": "2020-10-07T03:29:18",
      "upload_time_iso_8601": "2020-10-07T03:29:18.472199Z",
      "url": "https://files.pythonhosted.org/packages/8b/4b/dcf0bb32e3fc361d50f5cc610da2496c8c64bce2a08958becc43bf7bc9d3/django-rest-authemail-1.8.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}