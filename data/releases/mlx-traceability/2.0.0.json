{
  "info": {
    "author": "Stein Heselmans",
    "author_email": "teh@melexis.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Framework :: Sphinx :: Extension",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Documentation",
      "Topic :: Documentation :: Sphinx",
      "Topic :: Utilities"
    ],
    "description": "==========================\nSphinx Traceability plugin\n==========================\n\nSphinx plugin that allows defining documentation items and relations between those items. Can be used\nas a requirements management tool for e.g. ISO26262 projects.\n\n.. _traceability_goal:\n\n----\nGoal\n----\n\nDefine documentation items which can be linked to each other. E.g. define requirements which can be derived from\nother requirements, or linked to design items and test case descriptions.\n\nEvery item is an object in the documentation, which can have different relations to other objects in the documentation.\nDocumentation objects can be spread in different documents.\n\nTwo kinds of relationships exist:\n\n:Internal relationships: Relationships between objects of the documentation (items). Once a (forward) relationship\n                         from item A to item B is defined, the reverse relationship from item B to item A is\n                         automatically generated by the plugin.\n\n:External relationships: Relationship from an object of the documentation (item), to an external reference (url of\n                         e.g. an external tool). As no item B exists, the reverse relationship is also not defined.\n\nRelationship are configurable.\n\nThe plugin can generate\n\n- rendered versions of the defined documentation objects\n- flat lists of documentation objects\n- traceability matrices between objects\n\n.. _traceability_installing:\n\n----------\nInstalling\n----------\n\n.. code-block::\n\n    pip3 install mlx.traceability\n\n.. _traceability_config:\n\n-------------\nConfiguration\n-------------\n\nThe *conf.py* file contains the documentation configuration for your project. This file needs to be equipped in order\nto configure the traceability plugin.\n\nFirst the plugin needs to be enabled in the *extensions* variable:\n\n.. code-block::\n\n    extensions = [\n        'mlx.traceability.traceability',\n        ...\n    ]\n\nSecond the path to the static javascript assets needs to be added to the sphinx ``html_static_path``\nvariable.\n\n.. code-block::\n\n    import os\n    import mlx.traceability\n\n    html_static_path = [os.path.join(os.path.dirname(mlx.traceability.__file__), 'assets')]\n\n\n.. _traceability_config_relations:\n\nValid relationships\n===================\n\nPython variable *traceability_relationsips* can be defined in order to override the\ndefault configuration of the traceability plugin.\nIt is a *set* of relationship pairs: the *key* is the name of the forward relationship, while the *value* holds the\nname of the corresponding reverse relationship.\n\nRelationships with prefix *ext_* are threated in a different way: they are handled as external relationships and don't\nneed a reverse relationship.\n\nExample of internal and external relationship pairs:\n\n.. code-block:: python\n\n    traceability_relationships = {\n        'validates': 'validated_by',\n        'ext_polarion_reference': ''\n    }\n\n.. _traceability_config_relation2string:\n\nStringification of relationships\n================================\n\nPython variable *traceability_relationship_to_string* can be defined in order to override the\ndefault configuration of the traceability plugin.\nIt is a *set* of relationship stringifications: the *key* is the name of the (forward or reverse) relationship, while\nthe *value* holds the string representation (as to be rendered in html) of the relationship.\n\nExample of internal and external relationship stringification:\n\n.. code-block:: python\n\n    traceability_relationship_to_string = {\n        'validates': 'Validates',\n        'validated_by': 'Validated by',\n        'ext_polarion_reference': 'Polarion reference'\n    }\n\n.. _traceability_config_ext2url:\n\nExternal relationship to URL translation\n========================================\n\nExternal relationships need to be translated to URL's while rendering. For each defined external relationship,\nan entry in the Python *set* named *traceability_external_relationship_to_url* is needed. The URL generation\nis templated using the *fieldx* keyword, where x is a number incrementing from 1 onwards for each value in the URL\nthat needs to be replaced.\n\nExample configuration of URL translation of external relationship using 2 fields:\n\n.. code-block:: python\n\n    traceability_external_relationship_to_url = {\n        'ext_polarion_reference': 'https://melexis.polarion.com/polarion/#/project/field1/workitem?id=field2',\n    }\n\n.. _traceability_config_render_relations:\n\nRendering of relationships per documentation object\n===================================================\n\nWhen rendering the documentation objects, the user has the option to include/exclude the rendering of the\nrelationships to other documentation objects. This can be done through the Python variable\n*traceability_render_relationship_per_item* which is *boolean*: a value of 'True' will enable rendering\nof relationships per documentation object, while a value of 'False' will disable this rendering.\n\nExample configuration of enable rendering relationships per item:\n\n.. code-block:: python\n\n    traceability_render_relationship_per_item = True\n\n.. _traceability_config_callback:\n\nCallback per item (advanced)\n============================\n\nThe plugin allows parsing and modifying documentation objects 'behind the scenes' using a callback. The callback\nhas this prototype:\n\n.. code-block:: python\n\n    def traceability_my_callback_per_item(name, all_items):\n        '''\n        Custom callback on items\n\n        :param name: Name (id) of the item currently being parsed\n        :param all_items: Set of all items that are parsed so far\n        '''\n        return\n\nThe callback is executed while parsing the documentation item from your rst-file. Note that not all items are\navailable at the time this callback executes, the *all_items* parameter is a growing set of documentation objects.\n\nIn some project this callback is used to assign a relation to an ASIL attribute (also a documentation\nobject) to all of the requirements.\n\nExample of no callback per item:\n\n.. code-block:: python\n\n    traceability_callback_per_item = None\n\n.. _traceability_default_config:\n\nDefault config\n==============\n\nThe plugin itself holds a default config that can be used for any traceability documenting project:\n\n.. code-block:: python\n\n    traceability_callback_per_item = None\n    traceability_relationships = {\n        'fulfills': 'fulfilled_by',\n        'depends_on': 'impacts_on',\n        'implements': 'implemented_by',\n        'realizes': 'realized_by',\n        'validates': 'validated_by',\n        'trace': 'backtrace',\n        'ext_toolname': ''\n    }\n    traceability_relationship_to_string = {\n        'fulfills': 'Fulfills',\n        'fulfilled_by': 'Fulfilled by',\n        'depends_on': 'Depends on',\n        'impacts_on': 'Impacts on',\n        'implements': 'Implements',\n        'implemented_by': 'Implemented by',\n        'realizes': 'Realizes',\n        'realized_by': 'Realized by',\n        'validates': 'Validates',\n        'validated_by': 'Validated by',\n        'trace': 'Traces',\n        'backtrace': 'Back traces',\n        'ext_toolname': 'Referento to toolname'\n    }\n    traceability_external_relationship_to_url = {\n        'ext_toolname': 'http://toolname.company.com/field1/workitem?field2'\n    }\n    traceability_render_relationship_per_item = False\n\nThis default configuration build into the plugin, can be overriden through the conf.py of your project.\n\nFor Melexis.SWCC silicon projects, the SWCC process holds a default configuration in the *config/traceability_config.py* file.\nFor each of the above configuration variables, the default configuration file holds a variable with *swcc_* prefix.\nTaking the default configuration is as easy as assiging the above configuration value with the *swcc_* variable.\nOverriding a configuration is as easy as assigning your own values to a configuration value.\n\nExample of accepting default configuration for relationships, while disabling (override) rendering of relationships\nper documentation object:\n\n.. code-block:: python\n\n    sys.path.insert(0, os.path.abspath('<path_to_process_submodule>/config'))\n\n    from traceability_config import swcc_traceability_relationships\n    from traceability_config import swcc_traceability_relationship_to_string\n\n    traceability_relationships = swcc_traceability_relationships\n    traceability_relationship_to_string = swcc_traceability_relationship_to_string\n    traceability_render_relationship_per_item = False\n\n.. _traceability_usage:\n\n-----\nUsage\n-----\n\n.. _required_sphinx_options:\n\nRequired sphinx options\n=======================\n\nBy default sphinx (*sphinx-build*) performs an incremental build: it only parses the changed files, and generates\nnew output for changed files. As this plugin generates automatic reverse relations, the incremental build option\nof sphinx needs to be disabled. This can be done using the *-E* option:\n\n.. code-block::\n\n    sphinx-build -E <other_options>\n\n:Rationale: The plugin allows linking documentation items through relations. If a forward relation from *item-A*\n            (in *document-a.rst*) to *item-B* (in *document-b.rst*) is created, the reverse relations from\n            *item-B* to *item-A* is automatically created. With incremental builds, documents only get re-generated\n            when they are changed. This means the automatic reverse relation cannot be created if that *document-B*\n            was not touched.\n            By disabling incremental builds, it is made sure every document is updated (with automatic reverse\n            relations) on every re-build.\n\nThe plugin assumes incremental builds are disabled, as this makes the implementation of the plugin much easier.\n\n.. _traceability_usage_item:\n\nDefining documentation items\n============================\n\nDocumentation items can be defined using the *item* directive, specifying:\n\n- the name (id) of the documenation item\n- caption or short description of the documentation item\n- internal/external relationships to other documentation items (details in next paragraph)\n- content of documentation item including any rst content including text, images, formulas, code-blocks, etc.\n\n.. code-block:: rest\n\n    .. item:: SWRQT-MY_FIRST_REQUIREMENT Caption of my first requirement\n        :validated_by: ITEST-MY_FIRST_INTEGRATION_TEST\n        :ext_polarion_reference: project_x:workitem_y\n\n        According to the Polarion reference, the software **shall** implement my first requirement.\n\nThe relations to other documentation items can be specified as:\n\n- a space seperated list of item ID's, or\n- items can be linked to on a newline (tabulated)\n\n.. code-block:: rest\n\n    .. item:: SWRQT-MY_FIRST_REQUIREMENT Caption of my first requirement\n        :validated_by:\n            ITEST-MY_FIRST_INTEGRATION_TEST\n            ITEST-MY_SECOND_INTEGRATION_TEST\n\n.. _traceability_usage_item_linking:\n\nManual link to documentation items\n==================================\n\nManual links in RST documentation to any of the documentation items is possible using the *:item:* role:\n\n.. code-block:: rest\n\n    For validating the :item:`SWRQT-MY_FIRST_REQUIREMENT`, we plan to use setup x in the y configuration.\n\n.. _traceability_usage_item_list:\n\nFlat list of documentation items\n================================\n\nA flat list of documentation items can be generated using a python regular expression filter:\n\n.. code-block:: rest\n\n    .. item-list:: All software requirements\n        :filter: SWRQT\n\nwhere *SWRQT* (*filter* argument) can be replace by any python regular expression. Documentation items matching\ntheir ID to the given regular expression end up in the list.\n\n.. _traceability_usage_item_matrix:\n\nTraceability matrix of documentation items\n==========================================\n\nA traceability matrix of documentation items can be generated using:\n\n.. code-block:: rest\n\n    .. item-matrix:: Requirements to test case description traceability\n        :source: SWRQT\n        :target: [IU]TEST\n        :type: validated_by\n\nwhere the *source* and *target* arguments can be replaced by any python regular expression. The *type* argument\nis a space-separated list of relationships that should be matched in the matrix.\n\nDocumentation items matching their ID to the given *source* regular expression end up in the left column of the\ngenerated table. Documentation items matching their ID to the given *target* regular expression with a matching\nrelationship (see *type* argument) will end up in the right column of the generated table.\n\n.. _traceability_usage_item_tree:\n\nDocumentation items tree-view\n=============================\n\nA tree-view of documentation items can be generated using:\n\n.. code-block:: rest\n\n    .. item-tree:: Requirements tree view\n        :top: SWRQT\n        :top_relation_filter: depends_on\n        :type: impacts_on validated_by\n\nwhere the *top* argument can be replaced by any python regular expression. The *top_relation_filter* and *type* arguments\nare space-separated lists of relationships.\n\nThe directive generates an expandable tree of links to documentation items. A nested bullet list is generated\nwith at the top level, the top level documentation items. These are the ones matching their ID to the *top*\nregular expression, and not having any relation of *top_relation_filter* kind to a documentation item matching the same\n*top* regular expression against its ID.\n\nGoing deeper down this nested bullet list, the items relationships are checked: if there is a *type*\nrelationship (*type* is a space seperated list of relationships) it gets added as a one-level-deeper item in\nthe nested bullet list. This action is repeated recursively.\n\n.. warning::\n\n    The *type* is a list of relationships, which cannot hold the forward and reverse relationship of a pair.\n    This would give endless repetition of the same nesting, and an endless recursion in python. The plugin\n    checks the *item-tree* directives for this mistake!\n\n.. _traceability_process:\n\n-------\nProcess\n-------\n\nThe Melexis.SWCC process has a Guideline for documenting in Restructured Text (RST). It holds guidelines for using\nthe traceability plugin with naming conventions, templates, etc.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/melexis/sphinx-traceability-extension/tarball/2.0.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/melexis/sphinx-traceability-extension",
    "keywords": "traceability,requirements engineering,requirements management,software engineering,systems engineering,sphinx,requirements,ASPICE,ISO26262,ASIL",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlx.traceability",
    "package_url": "https://pypi.org/project/mlx.traceability/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mlx.traceability/",
    "project_urls": {
      "Download": "https://github.com/melexis/sphinx-traceability-extension/tarball/2.0.0",
      "Homepage": "https://github.com/melexis/sphinx-traceability-extension"
    },
    "release_url": "https://pypi.org/project/mlx.traceability/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Sphinx traceability extension (Melexis fork)",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17063199,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf12bb1a9cc49e23823619a9cc0327b094355332c2f7ad011c474088e3d3614f",
        "md5": "2b542cfa74d018580055a404e73bcbf7",
        "sha256": "ef09ff55c030c7fb332d0d0d28646c8146091fff699d0e1c4a2c11a946e332a7"
      },
      "downloads": -1,
      "filename": "mlx.traceability-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2b542cfa74d018580055a404e73bcbf7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 43911,
      "upload_time": "2017-11-15T14:35:52",
      "upload_time_iso_8601": "2017-11-15T14:35:52.871609Z",
      "url": "https://files.pythonhosted.org/packages/cf/12/bb1a9cc49e23823619a9cc0327b094355332c2f7ad011c474088e3d3614f/mlx.traceability-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}