{
  "info": {
    "author": "Stein Heselmans",
    "author_email": "teh@melexis.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Framework :: Sphinx :: Extension",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Documentation",
      "Topic :: Documentation :: Sphinx",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://img.shields.io/badge/License-GPL%20v3-blue.svg\n    :target: https://www.gnu.org/licenses/gpl-3.0\n    :alt: GPL3 License\n\n.. image:: https://badge.fury.io/py/mlx.traceability.svg\n    :target: https://badge.fury.io/py/mlx.traceability\n    :alt: Pypi packaged release\n\n.. image:: https://travis-ci.org/melexis/sphinx-traceability-extension.svg?branch=master\n    :target: https://travis-ci.org/melexis/sphinx-traceability-extension\n    :alt: Build status\n\n.. image:: https://img.shields.io/badge/Documentation-published-brightgreen.svg\n    :target: https://melexis.github.io/sphinx-traceability-extension/\n    :alt: Documentation\n\n.. image:: https://codecov.io/gh/melexis/sphinx-traceability-extension/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/melexis/sphinx-traceability-extension\n    :alt: Code Coverage\n\n.. image:: https://codeclimate.com/github/melexis/sphinx-traceability-extension/badges/gpa.svg\n    :target: https://codeclimate.com/github/melexis/sphinx-traceability-extension\n    :alt: Code Climate Status\n\n.. image:: https://codeclimate.com/github/melexis/sphinx-traceability-extension/badges/issue_count.svg\n    :target: https://codeclimate.com/github/melexis/sphinx-traceability-extension\n    :alt: Issue Count\n\n.. image:: https://requires.io/github/melexis/sphinx-traceability-extension/requirements.svg?branch=master\n    :target: https://requires.io/github/melexis/sphinx-traceability-extension/requirements/?branch=master\n    :alt: Requirements Status\n\n.. image:: https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\n    :target: https://github.com/melexis/sphinx-traceability-extension/issues\n    :alt: Contributions welcome\n\n==========================\nSphinx Traceability plugin\n==========================\n\nSphinx plugin that allows defining documentation items and relations between those items. Can be used\nas a requirements management tool for e.g. ISO26262 projects.\n\n.. _traceability_goal:\n\n----\nGoal\n----\n\nDefine documentation items which can be linked to each other. E.g. define requirements which can be derived from\nother requirements, or linked to design items and test case descriptions.\n\nEvery item is an object in the documentation, which can have different relations to other objects in the documentation.\nDocumentation objects can be spread in different documents.\n\nTwo kinds of relationships exist:\n\n- Internal relationships: Relationships between objects of the documentation (items). Once a (forward) relationship\n  from item A to item B is defined, the reverse relationship from item B to item A is\n  automatically generated by the plugin.\n\n- External relationships: Relationship from an object of the documentation (item), to an external reference (url of\n  e.g. an external tool). As no item B exists, the reverse relationship is also not defined.\n\nRelationship are configurable.\n\nThe plugin can generate\n\n- rendered versions of the defined documentation objects\n- flat lists of documentation objects\n- traceability matrices between objects\n\n.. _traceability_installing:\n\n----------\nInstalling\n----------\n\n.. code-block::\n\n    pip3 install mlx.traceability\n\n.. _traceability_config:\n\n-------------\nConfiguration\n-------------\n\nThe *conf.py* file contains the documentation configuration for your project. This file needs to be equipped in order\nto configure the traceability plugin.\n\nFirst the plugin needs to be enabled in the *extensions* variable:\n\n.. code-block::\n\n    extensions = [\n        'mlx.traceability.traceability',\n        ...\n    ]\n\nSecond the path to the static javascript assets needs to be added to the sphinx ``html_static_path``\nvariable.\n\n.. code-block::\n\n    import os\n    import mlx.traceability\n\n    html_static_path = [os.path.join(os.path.dirname(mlx.traceability.__file__), 'assets')]\n\n.. _traceability_config_attributes:\n\nValid attributes\n================\n\nPython variable *traceability_attributes* can be defined in order to override the\ndefault configuration of the traceability plugin.\nIt is a *set* of attribute pairs: the *key* is the name of the attribute (can only be lowercase),\nwhile the *value* holds the regular expression to which the attribute-value should comply.\n\nExample of attributes and their regular expression:\n\n.. code-block:: python\n\n    traceability_attributes = {\n        'value': '^.*$',\n        'asil': '^(QM|[ABCD])$',\n    }\n\n.. _traceability_config_attribute2string:\n\nStringification of attributes\n================================\n\nPython variable *traceability_attribute_to_string* can be defined in order to override the\ndefault configuration of the traceability plugin.\nIt is a *set* of attribute stringifications: the *key* is the name of the attribute, while\nthe *value* holds the string representation (as to be rendered in html) of the attribute name.\n\nExample of attribute stringification:\n\n.. code-block:: python\n\n    traceability_relationship_to_string = {\n        'value': 'Value',\n        'asil': 'ASIL',\n    }\n\n.. _traceability_config_relations:\n\nValid relationships\n===================\n\nPython variable *traceability_relationsips* can be defined in order to override the\ndefault configuration of the traceability plugin.\nIt is a *set* of relationship pairs: the *key* is the name of the forward relationship, while the *value* holds the\nname of the corresponding reverse relationship. Both can only be lowercase.\n\nRelationships with prefix *ext_* are threated in a different way: they are handled as external relationships and don't\nneed a reverse relationship.\n\nExample of internal and external relationship pairs:\n\n.. code-block:: python\n\n    traceability_relationships = {\n        'validates': 'validated_by',\n        'ext_polarion_reference': ''\n    }\n\n.. _traceability_config_relation2string:\n\nStringification of relationships\n================================\n\nPython variable *traceability_relationship_to_string* can be defined in order to override the\ndefault configuration of the traceability plugin.\nIt is a *set* of relationship stringifications: the *key* is the name of the (forward or reverse) relationship, while\nthe *value* holds the string representation (as to be rendered in html) of the relationship.\n\nExample of internal and external relationship stringification:\n\n.. code-block:: python\n\n    traceability_relationship_to_string = {\n        'validates': 'Validates',\n        'validated_by': 'Validated by',\n        'ext_polarion_reference': 'Polarion reference'\n    }\n\n.. _traceability_config_ext2url:\n\nExternal relationship to URL translation\n========================================\n\nExternal relationships need to be translated to URL's while rendering. For each defined external relationship,\nan entry in the Python *set* named *traceability_external_relationship_to_url* is needed. The URL generation\nis templated using the *fieldx* keyword, where x is a number incrementing from 1 onwards for each value in the URL\nthat needs to be replaced.\n\nExample configuration of URL translation of external relationship using 2 fields:\n\n.. code-block:: python\n\n    traceability_external_relationship_to_url = {\n        'ext_polarion_reference': 'https://melexis.polarion.com/polarion/#/project/field1/workitem?id=field2',\n    }\n\n.. _traceability_config_render_relations:\n\nRendering of relationships per documentation object\n===================================================\n\nWhen rendering the documentation objects, the user has the option to include/exclude the rendering of the\nrelationships to other documentation objects. This can be done through the Python variable\n*traceability_render_relationship_per_item* which is *boolean*: a value of 'True' will enable rendering\nof relationships per documentation object, while a value of 'False' will disable this rendering.\n\nExample configuration of enable rendering relationships per item:\n\n.. code-block:: python\n\n    traceability_render_relationship_per_item = True\n\nRendering of attributes per documentation object\n================================================\n\nThe rendering of attributes of documentation objects can be controlled through the *boolean* variable\n*traceability_render_attributes_per_item*: rendering of attributes is enabled by setting it to 'True' (the default)\nwhile a value of 'False' will prevent the attribute list from being rendered.\n\nExample configuration of disabling per item attribute rendering:\n\n.. code-block:: python\n\n    traceability_render_attributes_per_item = False\n\n.. _traceability_config_no_captions:\n\nNo captions\n===========\n\nBy default, the output will contain hyperlinks to all related items. By default the caption for the target\nitem is displayed for each of the related items. The captions can be omitted at configuration level (see\nthis section) and at directive level (see e.g. `traceability_usage_item_matrix`_).\n\nNo captions for item\n--------------------\n\nExample configuration of disabling the rendering of captions on item:\n\n.. code-block:: python\n\n    traceability_item_no_captions = True\n\nNo captions for item-list\n-------------------------\n\nExample configuration of disabling the rendering of captions on item-list:\n\n.. code-block:: python\n\n    traceability_list_no_captions = True\n\nNo captions for item-matrix\n---------------------------\n\nExample configuration of disabling the rendering of captions on item-matrix:\n\n.. code-block:: python\n\n    traceability_matrix_no_captions = True\n\nNo captions for item-attributes-matrix\n--------------------------------------\n\nExample configuration of disabling the rendering of captions on item-attributes-matrix:\n\n.. code-block:: python\n\n    traceability_attributes_matrix_no_captions = True\n\nNo captions for item-tree\n-------------------------\n\nExample configuration of disabling the rendering of captions on item-tree:\n\n.. code-block:: python\n\n    traceability_tree_no_captions = True\n\n.. _traceability_config_export:\n\nExport\n======\n\nThe plugin allows exporting the documentation items.\n\nExport to JSON\n--------------\n\nAs a preliminary test feature, the plugin allows to export the documentation items to a JSON database. The feature\ncan be enabled by setting the configuration to your JSON-file to export to. Note, the JSON-file is overwritten\n(not appended) on every build of the documentation.\n\n.. code-block:: python\n\n    traceability_json_export_path = '/path/to/your/database.json'\n\nAs a preliminary feature, the database only contains per documentation item:\n\n- the id,\n- the caption,\n- the document name and line number,\n- the relations to other items.\n\nThe actual content (RST content with images, formulas, etc) of the item is currently not stored.\n\n.. note:: Requires sphinx >= 1.6.0\n\n.. _traceability_config_callback:\n\nCallback per item (advanced)\n============================\n\nThe plugin allows parsing and modifying documentation objects 'behind the scenes' using a callback. The callback\nhas this prototype:\n\n.. code-block:: python\n\n    def traceability_my_callback_per_item(name, all_items):\n        '''\n        Custom callback on items\n\n        :param name: Name (id) of the item currently being parsed\n        :param all_items: Set of all items that are parsed so far\n        '''\n        return\n\nThe callback is executed while parsing the documentation item from your rst-file. Note that not all items are\navailable at the time this callback executes, the *all_items* parameter is a growing set of documentation objects.\n\nExample of no callback per item:\n\n.. code-block:: python\n\n    traceability_callback_per_item = None\n\n.. _traceability_default_config:\n\nDefault config\n==============\n\nThe plugin itself holds a default config that can be used for any traceability documenting project:\n\n.. code-block:: python\n\n    traceability_callback_per_item = None\n    traceability_attributes = {\n        'value': '^.*$',\n        'asil': '^(QM|[ABCD])$',\n        'aspice': '^[123]$',\n        'status': '^.*$'\n    }\n    traceability_attribute_to_string = {\n        'value': 'Value',\n        'asil': 'ASIL',\n        'aspice': 'ASPICE',\n        'status': 'Status'\n    }\n    traceability_relationships = {\n        'fulfills': 'fulfilled_by',\n        'depends_on': 'impacts_on',\n        'implements': 'implemented_by',\n        'realizes': 'realized_by',\n        'validates': 'validated_by',\n        'trace': 'backtrace',\n        'ext_toolname': ''\n    }\n    traceability_relationship_to_string = {\n        'fulfills': 'Fulfills',\n        'fulfilled_by': 'Fulfilled by',\n        'depends_on': 'Depends on',\n        'impacts_on': 'Impacts on',\n        'implements': 'Implements',\n        'implemented_by': 'Implemented by',\n        'realizes': 'Realizes',\n        'realized_by': 'Realized by',\n        'validates': 'Validates',\n        'validated_by': 'Validated by',\n        'trace': 'Traces',\n        'backtrace': 'Back traces',\n        'ext_toolname': 'Referento to toolname'\n    }\n    traceability_external_relationship_to_url = {\n        'ext_toolname': 'http://toolname.company.com/field1/workitem?field2'\n    }\n    traceability_render_relationship_per_item = False\n\nThis default configuration build into the plugin, can be overriden through the conf.py of your project.\n\nFor Melexis.SWCC silicon projects, the SWCC process holds a default configuration in the *config/traceability_config.py* file.\nFor each of the above configuration variables, the default configuration file holds a variable with *swcc_* prefix.\nTaking the default configuration is as easy as assiging the above configuration value with the *swcc_* variable.\nOverriding a configuration is as easy as assigning your own values to a configuration value.\n\nExample of accepting default configuration for relationships, while disabling (override) rendering of relationships\nper documentation object:\n\n.. code-block:: python\n\n    sys.path.insert(0, os.path.abspath('<path_to_process_submodule>/config'))\n\n    from traceability_config import swcc_traceability_attributes\n    from traceability_config import swcc_traceability_relationships\n    from traceability_config import swcc_traceability_relationship_to_string\n\n    traceability_attributes = swcc_traceability_attributes\n    traceability_relationships = swcc_traceability_relationships\n    traceability_relationship_to_string = swcc_traceability_relationship_to_string\n    traceability_render_relationship_per_item = False\n\n.. _traceability_usage:\n\n-----\nUsage\n-----\n\n.. _required_sphinx_options:\n\nRequired sphinx options\n=======================\n\nBy default sphinx (*sphinx-build*) performs an incremental build: it only parses the changed files, and generates\nnew output for changed files. As this plugin generates automatic reverse relations, the incremental build option\nof sphinx needs to be disabled. This can be done using the *-E* option:\n\n.. code-block::\n\n    sphinx-build -E <other_options>\n\n:Rationale: The plugin allows linking documentation items through relations. If a forward relation from *item-A*\n            (in *document-a.rst*) to *item-B* (in *document-b.rst*) is created, the reverse relations from\n            *item-B* to *item-A* is automatically created. With incremental builds, documents only get re-generated\n            when they are changed. This means the automatic reverse relation cannot be created if that *document-B*\n            was not touched.\n            By disabling incremental builds, it is made sure every document is updated (with automatic reverse\n            relations) on every re-build.\n\nThe plugin assumes incremental builds are disabled, as this makes the implementation of the plugin much easier.\n\n.. _traceability_usage_item:\n\nDefining documentation items\n============================\n\nDocumentation items can be defined using the *item* directive, specifying:\n\n- the name (id) of the documenation item\n- caption or short description of the documentation item\n- attributes for the documentation item\n- internal/external relationships to other documentation items (details in next paragraph)\n- content of documentation item including any rst content including text, images, formulas, code-blocks, etc.\n\n.. code-block:: rest\n\n    .. item:: SWRQT-MY_FIRST_REQUIREMENT Caption of my first requirement\n        :value: 400\n        :status: Approved\n        :validated_by: ITEST-MY_FIRST_INTEGRATION_TEST\n        :ext_polarion_reference: project_x:workitem_y\n        :nocaptions:\n\n        According to the Polarion reference, the software **shall** implement my first requirement.\n\nAttributes can be added to the item, using the `configured attribute keys <traceability_default_config>`_\n(e.g. *value* in the above example). The content of the attribute is threated as a single string and should\nmatch the regular expression in configuration.\n\nThe relations to other documentation items can be specified as:\n\n- a space seperated list of item ID's, or\n- items can be linked to on a newline (tabulated)\n\n.. code-block:: rest\n\n    .. item:: SWRQT-MY_FIRST_REQUIREMENT Caption of my first requirement\n        :validated_by:\n            ITEST-MY_FIRST_INTEGRATION_TEST\n            ITEST-MY_SECOND_INTEGRATION_TEST\n\nThe output will contain hyperlinks to all related items. By default the caption for the target item is displayed for\neach of these related items. With the option *nocaptions* these captions can be omited.\n\n.. _adding_relations:\n\nAdding relations outside of the item definitions\n================================================\n\nIn some cases, it's useful to add relations outside of the definition of the items\ninvolved. In that case, you can use the ``item-link`` directive as follows\n\n.. code-block:: rest\n\n    .. item-link::\n        :sources: RQT1 RQT2\n        :targets: TST3 TST4 TST5\n        :type: validates\n\nThis directive has no representation in the documentation build output. It will\njust add an additional relationship to the items mentioned in ``sources`` and\n``targets``\n\n.. _traceability_usage_item_linking:\n\nManual link to documentation items\n==================================\n\nManual links in RST documentation to any of the documentation items is possible using the *:item:* role:\n\n.. code-block:: rest\n\n    For validating the :item:`SWRQT-MY_FIRST_REQUIREMENT`, we plan to use setup x in the y configuration.\n\n.. _traceability_usage_item_list:\n\nFlat list of documentation items\n================================\n\nA flat list of documentation items can be generated using a python regular expression filter:\n\n.. code-block:: rest\n\n    .. item-list:: All software requirements\n        :filter: SWRQT\n        :status: Appr\n        :nocaptions:\n\nwhere *SWRQT* (*filter* argument) can be replaced by any python regular expression. Documentation items matching\ntheir ID to the given regular expression end up in the list.\n\nwhere *status* can be replaced by any configured attribute, and *Appr* can be replaced by any python regular\nexpression. Documentation items where the *status* attribute matches the given regular expression end up in the list.\n\nBy default the caption for every item in the list is shown. By providing the *nocaptions* flag, the\ncaption can be omitted. This gives a smaller list, but also less details.\n\n.. _traceability_usage_item_attributes_matrix:\n\nMatrix with attributes of documentation items\n=============================================\n\nA matrix listing the attributes of documentation items can be generated using:\n\n.. code-block:: rest\n\n    .. item-attributes-matrix:: Attributes for requirements\n        :filter: SWRQT\n        :status: Appr\n        :attributes: status\n        :sort: status\n        :reverse:\n        :nocaptions:\n\nwhere the *filter* argument can be replaced by any python regular expression. Documentation items matching\ntheir ID to the given regular expression end up in the list.\n\nwhere *status* can be replaced by any configured attribute, and *Appr* can be replaced by any python regular\nexpression. Documentation items where the *status* attribute matches the given regular expression end up in the list.\n\nwhere *attributes* argument is a space-separated list of attributes that should be matched in the matrix.\n\nAbove arguments can be avoided, or left empty, in which case the table will contain all attributes for all\ndocumentation items.\n\nDocumentation items matching their ID to the given *filter* regular expression end up in as rows in the\ngenerated table. The matching attribute values end up as columns in the generated table. Documentation items\nthat don't have a value for a certain attribute will have an empty cell at the corresponding location.\n\nBy default the caption for every item in the table is shown. By providing the *nocaptions* flag, the\ncaption can be omitted. This gives a smaller table, but also less details.\n\nBy default items are sorted based on their name. With the *sort* argument it is possible to sort on one\nor more attribute values. When providing multiple attributes on which to sort, the attribute keys are\nspace separated. The sorting is a natural sort. With the *reverse* argument, the sorting is reversed.\n\nOptionally, the *class* attribute can be specified, to customize table output, especially useful when rendering to\nLaTeX.  Normally the *longtable* class is used when the number of rows is greater than 30 which allows long tables to\nspan multiple pages. By setting *class* to *longtable* manually you can force the use of this environment.\n\n.. _traceability_usage_item_matrix:\n\nTraceability matrix of documentation items\n==========================================\n\nA traceability matrix of documentation items can be generated using:\n\n.. code-block:: rest\n\n    .. item-matrix:: Requirements to test case description traceability\n        :source: SWRQT\n        :target: [IU]TEST\n        :status: Appr\n        :sourcetitle: Software requirements\n        :targettitle: Integration and unit test cases\n        :type: validated_by\n        :nocaptions:\n        :stats:\n\nwhere the *source* and *target* arguments can be replaced by any python regular expression.\n\nwhere *status* can be replaced by any configured attribute, and *Appr* can be replaced by any python regular\nexpression. Only documentation items where the *status* attribute matches the given regular expression end up in\nthe *source* part of the matrix. The attribute value is **not** used as a filter on the *target* part.\n\nThe *type* argument\nis a space-separated list of relationships that should be matched in the matrix. The *sourcetitle* and *targettitle*\narguments are the titles of the columns in the generated matrix.\n\nDocumentation items matching their ID to the given *source* regular expression end up in the left column of the\ngenerated table. Documentation items matching their ID to the given *target* regular expression with a matching\nrelationship (see *type* argument) will end up in the right column of the generated table.\n\nBy default the caption for every item in the table is shown. By providing the *nocaptions* flag, the\ncaption can be omitted. This gives a smaller table, but also less details.\n\nBy providing the *stats* flag, some statistics (coverage percentage) are calculated and displayed above the\nmatrix. The plugin counts the number of items having a target item in the target-column (=covered or allocated),\nand the number of items having no target in the target-column (=not covered or allocated). And calculates a\ncoverage/allocation percentage from these counts. If the *stats* flag is not given, this percentage is not\ndisplayed.\n\nOptionally, the *class* attribute can be specified, to customize table output, especially useful when rendering to\nLaTeX.  Normally the *longtable* class is used when the number of rows is greater than 30 which allows long tables to\nspan multiple pages. By setting *class* to *longtable* manually you can force the use of this environment.\n\n.. _traceability_usage_2d_matrix:\n\n2D-matrix of documentation items\n================================\n\nA 2D-matrix of documentation items can be generated using:\n\n.. code-block:: rest\n\n    .. item-2d-matrix:: Requirements to test case description traceability\n        :source: SWRQT\n        :target: [IU]TEST\n        :status: Appr\n        :hit: x\n        :miss:\n        :type: validated_by\n\nwhere the *source* and *target* arguments can be replaced by any python regular expression.\n\nwhere *status* can be replaced by any configured attribute, and *Appr* can be replaced by any python regular\nexpression. Only documentation items where the *status* attribute matches the given regular expression end up in\nthe *source* part of the matrix. The attribute value is **not** used as a filter on the *target* part.\n\nThe *type* argument is a space-separated list of relationships that should be matched in the matrix.\n\nDocumentation items matching their ID to the given *source* regular expression end up as columns of the\ngenerated table. Documentation items matching their ID to the given *target* regular expression end up as\nrows of the generated table. Where source and target items have a matching relationship (see *type* argument)\nan 'x' will be placed in the cell at co-ordinates of source/target.\n\nCaptions for items in the 2D table are never shown, as it would give a too heavy loaded table.\n\nOptionally, the *class* attribute can be specified, to customize table output, especially useful when rendering to\nLaTeX.  Normally the *longtable* class is used when the number of rows is greater than 30 which allows long tables to\nspan multiple pages. By setting *class* to *longtable* manually you can force the use of this environment.\n\n.. _traceability_usage_item_tree:\n\nDocumentation items tree-view\n=============================\n\nNote: this feature is not supported when building for latex/pdf.\n\nA tree-view of documentation items can be generated using:\n\n.. code-block:: rest\n\n    .. item-tree:: Requirements tree view\n        :top: SWRQT\n        :top_relation_filter: depends_on\n        :status: Appr\n        :type: impacts_on validated_by\n        :nocaptions:\n\nwhere the *top* argument can be replaced by any python regular expression. The *top_relation_filter* and *type* arguments\nare space-separated lists of relationships.\n\nThe directive generates an expandable tree of links to documentation items. A nested bullet list is generated\nwith at the top level, the top level documentation items. These are the ones matching their ID to the *top*\nregular expression, and not having any relation of *top_relation_filter* kind to a documentation item matching the same\n*top* regular expression against its ID.\n\nThe *status* can be replaced by any configured attribute, and *Appr* can be replaced by any python regular\nexpression. Only documentation items where the *status* attribute matches the given regular expression end up in\nthe tree.\n\nGoing deeper down this nested bullet list, the items relationships are checked: if there is a *type*\nrelationship (*type* is a space seperated list of relationships) it gets added as a one-level-deeper item in\nthe nested bullet list. This action is repeated recursively.\n\n.. warning::\n\n    The *type* is a list of relationships, which cannot hold the forward and reverse relationship of a pair.\n    This would give endless repetition of the same nesting, and an endless recursion in python. The plugin\n    checks the *item-tree* directives for this mistake!\n\nBy default the caption for every item in the tree is shown. By providing the *nocaptions* flag, the\ncaption can be omitted. This gives a smaller tree, but also less details.\n\n.. _traceability_process:\n\n-------\nProcess\n-------\n\nThe Melexis.SWCC process has a Guideline for documenting in Restructured Text (RST). It holds guidelines for using\nthe traceability plugin with naming conventions, templates, etc.\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/melexis/sphinx-traceability-extension/tarball/2.11.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/melexis/sphinx-traceability-extension",
    "keywords": "traceability,requirements engineering,requirements management,software engineering,systems engineering,sphinx,requirements,ASPICE,ISO26262,ASIL",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlx.traceability",
    "package_url": "https://pypi.org/project/mlx.traceability/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mlx.traceability/",
    "project_urls": {
      "Download": "https://github.com/melexis/sphinx-traceability-extension/tarball/2.11.0",
      "Homepage": "https://github.com/melexis/sphinx-traceability-extension"
    },
    "release_url": "https://pypi.org/project/mlx.traceability/2.11.0/",
    "requires_dist": [
      "Sphinx (>=0.6)",
      "docutils",
      "natsort"
    ],
    "requires_python": "",
    "summary": "Sphinx traceability extension (Melexis fork)",
    "version": "2.11.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17063199,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7019053448a312c3e63d8a16fbe8a16a1bc20e70c07ac825fa0ad21a233eb4fe",
        "md5": "dcc8a54f7c58c77cf9a546b3db294df5",
        "sha256": "dd34e2970848649ace7ebe4708742cd10e1cfe5de176cd3baa96a52fc2b703fb"
      },
      "downloads": -1,
      "filename": "mlx.traceability-2.11.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dcc8a54f7c58c77cf9a546b3db294df5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 37972,
      "upload_time": "2019-01-30T13:06:17",
      "upload_time_iso_8601": "2019-01-30T13:06:17.969022Z",
      "url": "https://files.pythonhosted.org/packages/70/19/053448a312c3e63d8a16fbe8a16a1bc20e70c07ac825fa0ad21a233eb4fe/mlx.traceability-2.11.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37da8bcd8598ace08778eb52b42d1a49fbd8a2d9f00ab4049a7a94afb7f160ec",
        "md5": "6cba7c1a80ee8b71ac01fb81f51407d9",
        "sha256": "c73662fb2867d9cd0af1baec17c1997e1eabf53f9a0b643b2f655875c4ec2bd3"
      },
      "downloads": -1,
      "filename": "mlx.traceability-2.11.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6cba7c1a80ee8b71ac01fb81f51407d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 62628,
      "upload_time": "2019-01-30T13:06:19",
      "upload_time_iso_8601": "2019-01-30T13:06:19.767329Z",
      "url": "https://files.pythonhosted.org/packages/37/da/8bcd8598ace08778eb52b42d1a49fbd8a2d9f00ab4049a7a94afb7f160ec/mlx.traceability-2.11.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}