{
  "info": {
    "author": "Eric Florenzano",
    "author_email": "floguy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Using django-avatar\n===================\n\n\nBasics\n------\n\nTo integrate ``django-avatar`` with your site, there are relatively few things\nthat are required.  A minimal integration can work like this:\n\n1.  List this application in the ``INSTALLED_APPS`` portion of your settings\n    file.  Your settings file will look something like::\n   \n        INSTALLED_APPS = (\n            # ...\n            'avatar',\n        )\n\n2.  Add the pagination urls to the end of your root urlconf.  Your urlconf\n    will look something like::\n    \n        urlpatterns = patterns('',\n            # ...\n            (r'^admin/(.*)', admin.site.root),\n            (r'^avatar/', include('avatar.urls')),\n        )\n\n3.  Somewhere in your template navigation scheme, link to the change avatar\n    page::\n    \n        <a href=\"{% url avatar_change %}\">Change your avatar</a>\n\n4.  Wherever you want to display an avatar for a user, first load the avatar\n    template tags::\n    \n        {% load avatar_tags %}\n    \n    Then, use the ``avatar`` tag to display an avatar of a default size::\n    \n        {% avatar user %}\n    \n    Or specify a size (in pixels) explicitly::\n    \n        {% avatar user 65 %}\n\n5.  Optionally customize ``avatar/change.html`` and\n    ``avatar/confirm_delete.html`` to conform to your site's look and feel.\n\n\nViews\n-----\n\nThere are only two views for this application: one for changing a user's avatar,\nand another for deleting a user's avatar.\n\nChanging an avatar\n~~~~~~~~~~~~~~~~~~\n\nThe actual view function is located at ``avatar.views.change``, and this can\nbe referenced by the url name ``avatar_change``.  It takes two keyword\narguments: ``extra_context`` and ``next_override``.  If ``extra_context`` is\nprovided, that context will be placed into the template's context.  \n\nIf ``next_override`` is provided, the user will be redirected to the specified\nURL after form submission.  Otherwise the user will be redirected to the URL\nspecified in the ``next`` parameter in ``request.POST``.  If ``request.POST``\nhas no ``next`` parameter, ``request.GET`` will be searched.  If ``request.GET``\nhas no ``next`` parameter, the ``HTTP_REFERER`` header will be inspected.  If\nthat header does not exist, the user will be redirected back to the current URL.\n\nDeleting an avatar\n~~~~~~~~~~~~~~~~~~\n\nThe actual view function is located at ``avatar.views.delete``, and this can be\nreferenced by the url name ``avatar_delete``.  It takes the same two keyword\narguments as ``avatar.views.change`` and follows the same redirection rules\nas well.\n\n\nTemplate Tags\n-------------\n\nTo begin using these template tags, you must first load the tags into the\ntemplate rendering system:\n\n    {% load avatar_tags %}\n\n``{% avatar_url user [size in pixels] %}``\n    Renders the URL of the avatar for the given user.  User can be either a\n    ``django.contrib.auth.models.User`` object instance or a username.\n\n``{% avatar user [size in pixels] %}``\n    Renders an HTML ``img`` tag for the given user for the specified size.  User\n    can be either a ``django.contrib.auth.models.User`` object instance or a\n    username.\n\n``{% render_avatar avatar [size in pixels] %}``\n    Given an actual ``avatar.models.Avatar`` object instance, renders an HTML\n    ``img`` tag to represent that avatar at the requested size.\n\n\nGlobal Settings\n---------------\n\nThere are a number of settings available to easily customize the avatars that\nappear on the site.  Listed below are those settings:\n\nAUTO_GENERATE_AVATAR_SIZES\n    An iterable of integers representing the sizes of avatars to generate on\n    upload.  This can save rendering time later on if you pre-generate the\n    resized versions.  Defaults to ``(80,)``\n\nAVATAR_RESIZE_METHOD\n    The method to use when resizing images, based on the options available in\n    PIL.  Defaults to ``Image.ANTIALIAS``.\n\nAVATAR_STORAGE_DIR\n    The directory under ``MEDIA_ROOT`` to store the images.  If using a\n    non-filesystem storage device, this will simply be appended to the beginning\n    of the file name.\n\nAVATAR_GRAVATAR_BACKUP\n    A boolean determining whether to default to the Gravatar service if no\n    ``Avatar`` instance is found in the system for the given user.  Defaults to\n    True.\n\nAVATAR_DEFAULT_URL\n    The default URL to default to if ``AVATAR_GRAVATAR_BACKUP`` is set to False\n    and there is no ``Avatar`` instance found in the system for the given user.\n\n\nManagement Commands\n-------------------\n\nThis application does include one management command: ``rebuild_avatars``.  It\ntakes no arguments and, when run, re-renders all of the thumbnails for all of\nthe avatars for the pixel sizes specified in the ``AUTO_GENERATE_AVATAR_SIZES``\nsetting.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ericflo/django-avatar/",
    "keywords": "avatar,django",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-avatar",
    "package_url": "https://pypi.org/project/django-avatar/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-avatar/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/ericflo/django-avatar/"
    },
    "release_url": "https://pypi.org/project/django-avatar/1.0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "django-avatar",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17002301,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6c518dd5c2fe09211949160cd3d1eda3a5d123031b797552386139cc56a37ff",
        "md5": "b6879ad641d807158db5d8b3783d0416",
        "sha256": "611f7fdbf0d73e3607a8d35f71894bc36d478376d6b3444469432f1ab30777d3"
      },
      "downloads": -1,
      "filename": "django-avatar-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b6879ad641d807158db5d8b3783d0416",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9596,
      "upload_time": "2009-11-07T19:32:49",
      "upload_time_iso_8601": "2009-11-07T19:32:49.790855Z",
      "url": "https://files.pythonhosted.org/packages/f6/c5/18dd5c2fe09211949160cd3d1eda3a5d123031b797552386139cc56a37ff/django-avatar-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}