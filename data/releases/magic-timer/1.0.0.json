{
  "info": {
    "author": "Sidney Radcliffe",
    "author_email": "sidneyradcliffe@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# magic-timer\n\n[![](https://github.com/sradc/magic-timer/workflows/Python%20package/badge.svg)](https://github.com/sradc/magic-timer/commits/)\n\n`pip install magic-timer`\n\nConveniently get a rough idea of how long things take. \n\nThis is a light wrapper around the standard library's [time.monotonic](https://docs.python.org/3/library/time.html#time.monotonic). It aims to provide a clean API, and nice output strings.\n\n\n## How to use:\n\n```python\nfrom magic_timer import MagicTimer\n\ntimer = MagicTimer(history=True)\nfor i in range(3):\n    expensive_computation()\n    # Print nicely formatted string:\n    print(f\"{i} - elapsed time {timer}\")\n\n# Get the elapsed times that were printed:\nprint(\"timer.str_history =\", timer.str_history)\n```\n\n```\n0 - elapsed time 510 milliseconds\n1 - elapsed time 1.1 seconds\n2 - elapsed time 1.6 seconds\ntimer.str_history = [0.5046274580000158, 1.005028416000016, 1.510260250000016]\n```\n\n## Use via context manager:\n\n```python\nfrom magic_timer import MagicTimer\n\nwith MagicTimer() as timer:\n    # do stuff\n    x = sum(i*i for i in range(100_000))\n\n# Print a nicely formatted string:\nprint('Stuff took', timer)\n\n# Or get the elapsed time in seconds:\ntime_elapsed = timer.time_elapsed()\nprint(time_elapsed)\n```\n\n```\nStuff took 8.0 milliseconds\n0.007906290999997623\n```\n\n## Use via `MagicTimer` object:\n\n```python\nfrom magic_timer import MagicTimer\n\ndef do_stuff():\n    [i*i for i in range(5_000_000)]\n\ntimer = MagicTimer()\ndo_stuff()\nprint('Stuff took', timer)\ndo_stuff()\nprint(\"Note the timer's still ticking, unless `.stop()` is called...\", timer)\n```\n\n```\nStuff took 210 milliseconds\nNote the timer's still ticking, unless `.stop()` is called... 400 milliseconds\n```\n\n\n\nTo pause the timer, use the `stop` method (restart with the `.start()` method). (Note that the context manager automatically calls `.stop()`).\n\n```python\nfrom magic_timer import MagicTimer\n\ndef do_stuff():\n    [i*i for i in range(5_000_000)]\n\ntimer = MagicTimer()\ndo_stuff()\ntimer.stop()\nprint('Stuff took', timer)\ntime_elapsed = timer.time_elapsed()\nother_stuff()\ntimer.start()  # continue timing\n```\n\n## Use via `ftimer` decorator:\n\n```python\nfrom magic_timer import ftimer\n\n@ftimer\ndef do_stuff():\n    [i*i for i in range(20_000_000)]\n\ndo_stuff()\n```\n\n```\n`do_stuff` ran in 1.9 seconds.\n```\n\n### The use case for this package:\n\nYou have something you want to time, but you don't want to time it multiple times with [timeit](https://docs.python.org/3/library/timeit.html).\n\nYou also don't want to use [Jupyter's `%%timeit`](https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-timeit) because it puts the cell into a different scope.\n\nYou can import `magic-timer`, throw it in, and get a rough idea of the time taken. (It's slightly neater than using time.monotonic directly.)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sradc/magic-timer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "magic-timer",
    "package_url": "https://pypi.org/project/magic-timer/",
    "platform": null,
    "project_url": "https://pypi.org/project/magic-timer/",
    "project_urls": {
      "Homepage": "https://github.com/sradc/magic-timer"
    },
    "release_url": "https://pypi.org/project/magic-timer/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Conveniently get a rough idea of how long things take.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13393013,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09c8ef00e73d3c8597c1d52b7b84e5906e10fed1bafe0d90dce420b4514a5621",
        "md5": "d658b024377834bc6c9c269114428cb1",
        "sha256": "8df28d35ab728e0b6be7f36a00e6e04a575a100e6a276014590a6c6d7ca4f856"
      },
      "downloads": -1,
      "filename": "magic_timer-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d658b024377834bc6c9c269114428cb1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5165,
      "upload_time": "2022-04-03T15:58:47",
      "upload_time_iso_8601": "2022-04-03T15:58:47.977990Z",
      "url": "https://files.pythonhosted.org/packages/09/c8/ef00e73d3c8597c1d52b7b84e5906e10fed1bafe0d90dce420b4514a5621/magic_timer-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08273c657007a4c5aff735811c298db7f6645e05bd6187b1c31d7b534b37541d",
        "md5": "4b65c5f49e21e51deb1d2913261ac618",
        "sha256": "fc440ee58aab16963b497bd8910ae5c747d2bd592cfa374361dced66b03943c6"
      },
      "downloads": -1,
      "filename": "magic-timer-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4b65c5f49e21e51deb1d2913261ac618",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4506,
      "upload_time": "2022-04-03T15:58:49",
      "upload_time_iso_8601": "2022-04-03T15:58:49.855353Z",
      "url": "https://files.pythonhosted.org/packages/08/27/3c657007a4c5aff735811c298db7f6645e05bd6187b1c31d7b534b37541d/magic-timer-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}