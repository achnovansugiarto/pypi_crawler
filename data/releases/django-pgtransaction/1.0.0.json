{
  "info": {
    "author": "Opus 10 Engineering",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "django-pgtransaction\n====================\n\ndjango-pgtransaction offers a drop-in replacement for the\ndefault ``django.db.transaction`` module which, when used on top of a PostgreSQL\ndatabase, extends the functionality of that module with Postgres-specific features.\n\nAt present, django-pgtransaction offers an extension of the\n``django.db.transaction.atomic`` context manager/decorator which allows one to\ndynamically set the `isolation level <https://www.postgresql.org/docs/current/transaction-iso.html>`__\nwhen opening a transaction, as well as specifying\na retry policy for when an operation in that transaction results in a Postgres locking\nexception. See the quickstart below or `the docs <https://django-pgtransaction.readthedocs.io/>`__ for examples.\n\nQuickstart\n==========\n\nSet the isolation level of a transaction by using ``pgtransaction.atomic``:\n\n.. code-block:: python\n\n    import pgtransaction\n\n    with pgtransaction.atomic(isolation_level=pgtransaction.SERIALIZABLE):\n        # Do queries...\n\nThere are three isolation levels: ``pgtransaction.READ_COMMITTED``, ``pgtransaction.REPEATABLE_READ``,\nand ``pgtransaction.SERIALIZABLE``. By default it inherits the parent isolation level, which is Django's\ndefault of \"READ COMMITTED\".\n\nWhen using stricter isolation levels like ``pgtransaction.SERIALIZABLE``, Postgres will throw\nserialization errors upon concurrent updates to rows. Use the ``retry`` argument with the decorator\nto retry these failures:\n\n.. code-block:: python\n\n    @pgtransaction.atomic(isolation_level=pgtransaction.SERIALIZABLE, retry=3)\n    def do_queries():\n        # Do queries...\n\nNote that the ``retry`` argument will not work when used as a context manager. A ``RuntimeError``\nwill be thrown.\n\nBy default, retries are only performed when ``psycopg2.errors.SerializationError`` or\n``psycopg2.errors.DeadlockDetected`` errors are raised. Configure retried psycopg2 errors with\n``settings.PGTRANSACTION_RETRY_EXCEPTIONS``. You can set a default retry amount with\n``settings.PGTRANSACTION_RETRY``.\n\n``pgtransaction.atomic`` can be nested, but keep the following in mind:\n\n1. The isolation level cannot be changed once a query has been performed.\n2. The retry argument only works on the outermost invocation as a decorator, otherwise ``RuntimeError`` is raised.\n\nDocumentation\n=============\n\nCheck out the `Postgres docs <https://www.postgresql.org/docs/current/transaction-iso.html>`__\nto learn about transaction isolation in Postgres. \n\n`View the django-pgtransaction docs here\n<https://django-pgtransaction.readthedocs.io/>`_.\n\nInstallation\n============\n\nInstall django-pgtransaction with::\n\n    pip3 install django-pgtransaction\n\nAfter this, add ``pgtransaction`` to the ``INSTALLED_APPS``\nsetting of your Django project.\n\nContributing Guide\n==================\n\nFor information on setting up django-pgtransaction for development and\ncontributing changes, view `CONTRIBUTING.rst <CONTRIBUTING.rst>`_.\n\nPrimary Authors\n===============\n\n- `Paul Gilmartin <https://github.com/PaulGilmartin>`__\n- `Wes Kendall <https://github.com/wesleykendall>`__\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Opus10/django-pgtransaction",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pgtransaction",
    "package_url": "https://pypi.org/project/django-pgtransaction/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-pgtransaction/",
    "project_urls": {
      "Documentation": "https://django-pgtransaction.readthedocs.io",
      "Homepage": "https://github.com/Opus10/django-pgtransaction",
      "Repository": "https://github.com/Opus10/django-pgtransaction"
    },
    "release_url": "https://pypi.org/project/django-pgtransaction/1.0.0/",
    "requires_dist": [
      "django (>=2)",
      "importlib_metadata (>=4); python_version >= \"3.7\" and python_version < \"3.8\""
    ],
    "requires_python": ">=3.7.0,<4",
    "summary": "A context manager/decorator which extends Django's atomic function with the ability to set isolation level and retries for a given transaction.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15158510,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09d93507cc38222eab27566037e56b8607642a4d51e852989ef07d35a7fbf762",
        "md5": "3de1677f752cd993c80a5d2be24b4c55",
        "sha256": "4a692fd199586dc5a3c641cd905d874c8c14c36b9bc8abe7f409faf0a9f152dc"
      },
      "downloads": -1,
      "filename": "django_pgtransaction-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3de1677f752cd993c80a5d2be24b4c55",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0,<4",
      "size": 6916,
      "upload_time": "2022-09-20T20:42:13",
      "upload_time_iso_8601": "2022-09-20T20:42:13.610024Z",
      "url": "https://files.pythonhosted.org/packages/09/d9/3507cc38222eab27566037e56b8607642a4d51e852989ef07d35a7fbf762/django_pgtransaction-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "713e0e4e2cd856581cedcc16a074575c3c4261d7143ab90bcf8f2ba912b776b8",
        "md5": "bcd0a3835150755a2c8bc239258b333e",
        "sha256": "631a825b997a72c80dd254161986b58de62f1595e3ebe103604485145f367b8e"
      },
      "downloads": -1,
      "filename": "django-pgtransaction-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bcd0a3835150755a2c8bc239258b333e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0,<4",
      "size": 6568,
      "upload_time": "2022-09-20T20:42:11",
      "upload_time_iso_8601": "2022-09-20T20:42:11.870368Z",
      "url": "https://files.pythonhosted.org/packages/71/3e/0e4e2cd856581cedcc16a074575c3c4261d7143ab90bcf8f2ba912b776b8/django-pgtransaction-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}