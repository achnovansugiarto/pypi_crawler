{
  "info": {
    "author": "Vladimír Gorej",
    "author_email": "gorej@codescale.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Bug Tracking",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Utilities"
    ],
    "description": "django-profiler\n===============\n\ndjango-profiler is util for profiling python code mainly in django projects\nbut can be used also on ordinary python code. It counts sql queries a measures\ntime of code execution. It logs its output via standard\npython logging library and uses logger `profiling`. If your profiler name\ndoesn't contain any empty spaces e.g. Profiler('Profiler1') django-profiler will\nlog all the output to the `profiling.Profiler` logger.\n\n\nRequirements\n------------\n\n- python 2.7+\n\n\nInstallation\n------------\n\nInstall via *pip* or copy this module into your project or into your PYTHON_PATH.\n\n\nConfiguration\n-------------\n\n**django settings.py constants**\n\n::\n\n PROFILING_LOGGER_NAME\n PROFILING_SQL_QUERIES\n\nIt is possible to change default django-profiler logger name by defining\nPROFILING_LOGGER_NAME = 'logger_name' in your django *settings.py*.\n\nTo log also sql queries into profiler logger set PROFILING_SQL_QUERIES to True\nin your django *settings.py* module.\n\n\nExamples\n--------\n\n**Example 1**\n\nUsing context manager approach. Output will be logged to *profiling* logger.\n\n::\n\n from profiling import Profiler\n with Profiler('Complex Computation'):\n     # code with some complex computations\n\n**Example 2**\n\nUsing context manager approach. Output will be logged to *profiling.Computation* logger.\n\n::\n\n from profiling import Profiler\n with Profiler('Computation'):\n     # code with some complex computations\n\n**Example 3**\n\nUsing standard approach. Output will be logged to *profiling* logger.\n\n::\n\n from profiling import Profiler\n profiler =  Profiler('Complex Computation')\n profiler.start()\n # code with some complex computations\n profiler.stop()\n\n**Example 4**\n\nUsing standard approach and starting directly in constructor. Output will be logged to *profiling* logger.\n\n::\n\n from profiling import Profiler\n profiler =  Profiler('Complex Computation', start=True)\n # code with some complex computations\n profiler.stop()\n\n**Example 5**\n\nUsing decorator approach. Output will be logged to *profiling.complex_computations* logger.\n\n::\n\n from profiling import profile\n\n @profile\n def complex_computations():\n     #some complex computations\n\n**Example 6**\n\nUsing decorator approach. Output will be logged to *profiling.ComplexClass.complex_computations* logger.\n\n::\n\n from profiling import profile\n\n class ComplexClass(object):\n     @profile\n     def complex_computations():\n         #some complex computations\n\n**Example 7**\n\nUsing decorator approach. Output will be logged to *profiling.complex_computations* logger.\n`profile` execution stats are logged to *profiling.complex_computations* logger.\n\n::\n\n from profiling import profile\n\n @profile(stats=True)\n def complex_computations():\n     #some complex computations\n\n**Example 8**\n\nUsing decorator approach. Output will be logged to *profiling.complex_computations* logger.\n`profile` execution stats are printed to sys.stdout.\n\n::\n\n import sys\n\n from profiling import profile\n\n @profile(stats=True, stats_buffer=sys.stdout)\n def complex_computations():\n     #some complex computations\n\n\n**Example 9**\n\nUsing decorator approach. Output will be logged to *profiling.ComplexClass.complex_computations* logger.\n`profile` stats will be logged to *profiling.ComplexClass.complex_computations*.\n\n::\n\n from profiling import profile\n\n class ComplexClass(object)\n    @profile(stats=True)\n    def complex_computations():\n        #some complex computations\n\n\nTests\n-----\n\n**Tested on evnironment**\n\n- Xubuntu Linux 11.10 oneiric 64-bit\n- python 2.7.2+\n- python unittest\n\n**Running tests**\n\nTo run the test run command: ::\n\n $ python test.py\n $ python setup.py test\n\n\nAuthor\n------\n\n| char0n (Vladimír Gorej, CodeScale s.r.o.)\n| email: gorej@codescale.net\n| web: http://www.codescale.net\n\n\nReferences\n----------\n\n- http://github.com/CodeScaleInc/django-profiler\n- http://pypi.python.org/pypi/django-profiler/\n- http://www.codescale.net/en/community#django-profiler",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://github.com/char0n/django-profiler/tarball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.codescale.net/en/community#django-profiler",
    "keywords": "django profiler profiling code profile",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-profiler",
    "package_url": "https://pypi.org/project/django-profiler/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-profiler/",
    "project_urls": {
      "Download": "http://github.com/char0n/django-profiler/tarball/master",
      "Homepage": "http://www.codescale.net/en/community#django-profiler"
    },
    "release_url": "https://pypi.org/project/django-profiler/2.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "util for profiling python code mainly in django projects, but can be used also on ordinary python code",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 862588,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bc16a85b662c6812b3d51bd70d0624159ca80dd7085415e5080996c328833d9",
        "md5": "1704a167cb0dadb1f77652d923d09032",
        "sha256": "ee5e5619521f1ce896753716f0eda947c402850450577a3a1e9b7204d9cbcf20"
      },
      "downloads": -1,
      "filename": "django-profiler-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1704a167cb0dadb1f77652d923d09032",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6077,
      "upload_time": "2013-09-11T10:24:07",
      "upload_time_iso_8601": "2013-09-11T10:24:07.064931Z",
      "url": "https://files.pythonhosted.org/packages/6b/c1/6a85b662c6812b3d51bd70d0624159ca80dd7085415e5080996c328833d9/django-profiler-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}