{
  "info": {
    "author": "Alice Bevan-McGregor",
    "author_email": "alice@gothcandy.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "============\nmarrow.mongo\n============\n\n    Â© 2016 Alice Bevan-McGregor and contributors.\n\n..\n\n    https://github.com/marrow/mongo\n\n..\n\n    |latestversion| |ghtag| |downloads| |masterstatus| |mastercover| |masterreq| |ghwatch| |ghstar|\n\n\n\nIntroduction\n============\n\nMarrow Mongo is a collection of small, focused utilities written to enhance use of the `PyMongo native MongoDB driver\n<http://api.mongodb.com/python/current/>`__ without the overhead, glacial update cycle, complexity, and head-space\nrequirements of a full active record object document mapper. Additionally, it provides a very light-weight database\nconnection plugin for the `WebCore web framework <https://github.com/marrow/WebCore>`__ and Python standard logging\nadapter to emit logs to MongoDB.\n\n\nInstallation\n============\n\nInstalling ``marrow.mongo`` is easy, just execute the following in a terminal::\n\n    pip install marrow.mongo\n\n**Note:** We *strongly* recommend always using a container, virtualization, or sandboxing environment of some kind when\ndeveloping using Python; installing things system-wide is yucky (for a variety of reasons) nine times out of ten.  We\nprefer light-weight `virtualenv <https://virtualenv.pypa.io/en/latest/virtualenv.html>`__, others prefer solutions as\nrobust as `Vagrant <http://www.vagrantup.com>`__.\n\nIf you add ``marrow.mongo`` to the ``install_requires`` argument of the call to ``setup()`` in your application's\n``setup.py`` file, marrow.mongo will be automatically installed and made available when your own application or\nlibrary is installed.  We recommend using \"less than\" version numbers to ensure there are no unintentional\nside-effects when updating.  Use ``marrow.mongo<1.1`` to get all bugfixes for the current release, and\n``marrow.mongo<2.0`` to get bugfixes and feature updates while ensuring that large breaking changes are not installed.\n\nThis package has only one hard dependency, a modern (>3.2) version of the ``pymongo`` package.  Installing\n``marrow.mongo`` will also install this package.\n\n\nDevelopment Version\n-------------------\n\n    |developstatus| |developcover| |ghsince| |issuecount| |ghfork|\n\nDevelopment takes place on `GitHub <https://github.com/>`__ in the\n`marrow.mongo <https://github.com/marrow/mongo/>`__ project.  Issue tracking, documentation, and downloads\nare provided there.\n\nInstalling the current development version requires `Git <http://git-scm.com/>`__, a distributed source code management\nsystem.  If you have Git you can run the following to download and *link* the development version into your Python\nruntime::\n\n    git clone https://github.com/marrow/mongo.git\n    (cd mongo; python setup.py develop)\n\nYou can then upgrade to the latest version at any time::\n\n    (cd mongo; git pull; python setup.py develop)\n\nIf you would like to make changes and contribute them back to the project, fork the GitHub project, make your changes,\nand submit a pull request.  This process is beyond the scope of this documentation; for more information see\n`GitHub's documentation <http://help.github.com/>`__.\n\n\nDocuments\n=========\n\nThis package utilizes the `Marrow Schema <https://github.com/marrow/schema>`__ declarative schema toolkit and extends\nit to encompass MongoDB data storage concerns. You define data models by importing classes describing the various\ncomponents of a collection, such as ``Document``, ``ObjectId``, or ``String``, then compose them into a declarative\nclass model. For example, if you wanted to define a simple user account model, you would begin by importing::\n\n    from marrow.mongo import Index, Document\n    from marrow.mongo.field import ObjectId, String, Number, Array\n\nOne must always import ``Document`` from ``marrow.mongo.core`` prior to any import of registered fields from\n``marrow.mongo``. As a note, due to the magical nature of this plugin import registry, it may change in future feature\nreleases. The old interface will be deprecated with a warning for one feature version first, however; pin your\ndependencies.\n\n\nDefining Documents\n------------------\n\nNow we can define our own ``Document`` subclass::\n\n    class Account(Document):\n        username = String(required=True)\n        name = String()\n        locale = String(default='en-CA-u-tz-cator-cu-CAD', assign=True)\n        age = Number()\n        \n        id = ObjectId('_id', assign=True)\n        tag = Array(String(), default=lambda: [], assign=True)\n        \n        _username = Index('username', unique=True)\n\nBroken down::\n\n    class Account(Document):\n\nNo surprises here, we subclass the Document class. This is required to utilize the metaclass that makes the\ndeclarative naming and order-presrving sequence generation work. We begin to define fields::\n\n    username = String(required=True)\n    name = String()\n    locale = String(default='en-CA-u-tz-cator-cu-CAD', assign=True)\n\nIntroduced here is ``required``, indicating that when generating the *validation document* for this document to\nensure this field always has a value. This validation is not currently performed application-side. Also notable is the\nuse of ``assign`` on a string field; this will assign the default value during instantiation. Then we have a different\ntype of field::\n\n    age = Number()\n\nThis allows storage of any numeric value, either integer or floating point. Now there is the record identifier::\n\n    id = ObjectId('_id', assign=True)\n\nMarrow Mongo does not assume your documents contain IDs; there is no separation internally between top-level documents\nand \"embedded documents\", leaving the declaration of an ID up to you. You might not always wish to use an ObjectID,\neither; please see MongoDB's documentation for discussion of general modelling practices. The first positional\nparameter for most non-complex fields is the name of the MongoDB-side field. Underscores imply an attribute is\n\"protected\" in Python, so we remap it by assigning it to just ``id``.  The ``assign`` argument here ensures whenever a\nnew ``Account`` is instantiated an ObjectID will be immediately generated and assigned.\n\nFinally there is an array of tags::\n\n    tag = Array(String(), default=lambda: [], assign=True)\n\nThis combines what we've been using so far into one field. An ``Array`` is a *complex field* (a container) and as such\nthe types of values allowed to be contained therein may be defined positionally. (If you want to override the field's\ndatabase-side name, pass in a ``name`` as a keyword argument.) A default is defined as an anonymous callback function\nwhich constructs a new list on each request. The default will be executed and the result assigned automatically during\ninitialization as per ``id`` or ``locale``.\n\nLastly we define a unique index on the username to speed up any queries involving that field::\n\n    _username = Index('username', unique=True)\n\n\nInstantiating Documents\n-----------------------\n\nWith a document schema defined we can now begin populating data::\n\n    alice = Account('amcgregor', \"Alice Bevan-McGregor\", age=27)\n    print(alice.id)  # Already has an ID.\n    print(alice.id.generation_time)  # This even includes the creation time.\n\nAs can be seen above construction accepts positional and keyword parameters. Fields will be filled, positionally, in\nthe order they were defined, unless otherwise adjusted using the ``adjust_attribute_sequence`` decorator.\n\nAssuming a ``pymongo`` collection is accessible by the variable name ``collection`` we can construct our index::\n\n    Account._username.create_index(collection)\n\nThere is no need to run this command more than once unless the collection is dropped.\n\nLet's insert our record::\n\n    result = collection.insert_one(alice)\n    assert result.acknowledged and result.inserted_id == alice.id\n\nYup, that's it. Instances of ``Document`` are directly usable in place of a dictionary argument to ``pymongo``\nmethods. We then validate that the document we wanted inserted was, in fact, inserted. Using an assert in this way,\nthis validation will not be run in production code run with the ``-O`` option passed (or ``PYTHONOPTIMIZE``\nenvironment variable set) in the invocation to Python.\n\n\nQuerying Documents\n------------------\n\nNow that we have a document stored in the database, let's retrieve it back out and get the result as an ``Account``\ninstance::\n\n    record = collection.find_one(Account.username == 'amcgregor')\n    record = Account.from_mongo(record)\n    print(record.name)  # Alice Bevan-McGregor\n\nSeveral things are going on here. First it's important to note that Marrow Mongo isn't making the query happen for\nyou, and does not automatically cast dictionaries to ``Document`` subclasses when querying. The first line\ndemonstrates the native approach to building *filter documents*, the first argument to ``find`` or ``find_one``.\n\nYou can use standard Python comparison operators, bitwise operators, and several additional querying methods through\nclass-level access to the defined fields. The result of one of these operations or method calls is a dictionary-like\nobject that is the query. They may be combined through bitwise and (``&``) and bitwise or (``|``) operations, however\ndue to Python's order of operations, individual field comparisons must be wrapped in parenthesis if combining.\n\nCombining produces a new ``Ops`` instance, so it is possible to use these to pre-construct parts of queries prior to\nuse. As a tip, it can save time (and visual clutter) to assign the document class to a short, single-character\nvariable name to make repeated reference easier.\n\n\nVersion History\n===============\n\nVersion 1.0\n-----------\n\n* Initial release.\n\n\nLicense\n=======\n\nmarrow.mongo has been released under the MIT Open Source license.\n\nThe MIT License\n---------------\n\nCopyright Â© 2016 Alice Bevan-McGregor and contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the âSoftwareâ), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED âAS ISâ, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n.. |ghwatch| image:: https://img.shields.io/github/watchers/marrow/mongo.svg?style=social&label=Watch\n    :target: https://github.com/marrow/mongo/subscription\n    :alt: Subscribe to project activity on Github.\n\n.. |ghstar| image:: https://img.shields.io/github/stars/marrow/mongo.svg?style=social&label=Star\n    :target: https://github.com/marrow/mongo/subscription\n    :alt: Star this project on Github.\n\n.. |ghfork| image:: https://img.shields.io/github/forks/marrow/mongo.svg?style=social&label=Fork\n    :target: https://github.com/marrow/mongo/fork\n    :alt: Fork this project on Github.\n\n.. |masterstatus| image:: http://img.shields.io/travis/marrow/mongo/master.svg?style=flat\n    :target: https://travis-ci.org/marrow/mongo/branches\n    :alt: Release build status.\n\n.. |mastercover| image:: http://img.shields.io/codecov/c/github/marrow/mongo/master.svg?style=flat\n    :target: https://codecov.io/github/marrow/mongo?branch=master\n    :alt: Release test coverage.\n\n.. |masterreq| image:: https://img.shields.io/requires/github/marrow/mongo.svg\n    :target: https://requires.io/github/marrow/mongo/requirements/?branch=master\n    :alt: Status of release dependencies.\n\n.. |developstatus| image:: http://img.shields.io/travis/marrow/mongo/develop.svg?style=flat\n    :target: https://travis-ci.org/marrow/mongo/branches\n    :alt: Development build status.\n\n.. |developcover| image:: http://img.shields.io/codecov/c/github/marrow/mongo/develop.svg?style=flat\n    :target: https://codecov.io/github/marrow/mongo?branch=develop\n    :alt: Development test coverage.\n\n.. |developreq| image:: https://img.shields.io/requires/github/marrow/mongo.svg\n    :target: https://requires.io/github/marrow/mongo/requirements/?branch=develop\n    :alt: Status of development dependencies.\n\n.. |issuecount| image:: http://img.shields.io/github/issues-raw/marrow/mongo.svg?style=flat\n    :target: https://github.com/marrow/mongo/issues\n    :alt: Github Issues\n\n.. |ghsince| image:: https://img.shields.io/github/commits-since/marrow/mongo/1.0.0.svg\n    :target: https://github.com/marrow/mongo/commits/develop\n    :alt: Changes since last release.\n\n.. |ghtag| image:: https://img.shields.io/github/tag/marrow/mongo.svg\n    :target: https://github.com/marrow/mongo/tree/1.0.0\n    :alt: Latest Github tagged release.\n\n.. |latestversion| image:: http://img.shields.io/pypi/v/marrow.mongo.svg?style=flat\n    :target: https://pypi.python.org/pypi/marrow.mongo\n    :alt: Latest released version.\n\n.. |downloads| image:: http://img.shields.io/pypi/dw/marrow.mongo.svg?style=flat\n    :target: https://pypi.python.org/pypi/marrow.mongo\n    :alt: Downloads per week.\n\n.. |cake| image:: http://img.shields.io/badge/cake-lie-1b87fb.svg?style=flat\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marrow/mongo/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marrow.mongo",
    "package_url": "https://pypi.org/project/marrow.mongo/",
    "platform": "",
    "project_url": "https://pypi.org/project/marrow.mongo/",
    "project_urls": {
      "Homepage": "https://github.com/marrow/mongo/"
    },
    "release_url": "https://pypi.org/project/marrow.mongo/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Light-weight utilities to augment, not replace the Python MongoDB driver.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3172078,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63f65026b54115b875f624bffb418bdbee0a938ebff0cbea80ef25a7a883a029",
        "md5": "006705089a54b8354e716ce4f5f3773c",
        "sha256": "0f7e7c8cae1a6fc1629ce826d6e548e7f1b7acce7a7f9d74e1ebf4cf7adbffd4"
      },
      "downloads": -1,
      "filename": "marrow.mongo-1.0.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "006705089a54b8354e716ce4f5f3773c",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "requires_python": null,
      "size": 73012,
      "upload_time": "2016-11-21T09:53:24",
      "upload_time_iso_8601": "2016-11-21T09:53:24.976230Z",
      "url": "https://files.pythonhosted.org/packages/63/f6/5026b54115b875f624bffb418bdbee0a938ebff0cbea80ef25a7a883a029/marrow.mongo-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "237eebb8627c935d9d286c0dad48f4b6d8d22bbe24129c51acef1b8cd77d041c",
        "md5": "9ac59b88a37346c59aea371b7efd5897",
        "sha256": "a21bdcd9bd200821fa0816ad2fd133d7b32c42f7c96a8d4f7c9a800fb06f638b"
      },
      "downloads": -1,
      "filename": "marrow.mongo-1.0.0.tar.gz",
      "has_sig": true,
      "md5_digest": "9ac59b88a37346c59aea371b7efd5897",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40327,
      "upload_time": "2016-11-21T09:53:22",
      "upload_time_iso_8601": "2016-11-21T09:53:22.222295Z",
      "url": "https://files.pythonhosted.org/packages/23/7e/ebb8627c935d9d286c0dad48f4b6d8d22bbe24129c51acef1b8cd77d041c/marrow.mongo-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}