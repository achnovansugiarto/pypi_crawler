{
  "info": {
    "author": "Nicholas Hall <nicholas.hall@dtc.ox.ac.uk>",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# AOTools: A microscope add-on for adaptive optics\n\nA composite device for controlling and using deformable mirror adaptive\noptic elements. This composite device can be constructed from any\npython-microscope compatible adaptive optics elements and cameras (see \npython-microscope compatibility list) as well as certain spatial light\nmodulators. The functions presented allow a user to calibrate and \ncharacterise a adaptive optics elements using a variety of wavefront \nsensing techniques, to set control matrices determined by other   \ncalibration methods and perform sensorless adaptive optics correction  \nwith a variety of metrics.\n\n**Set-up:**\n\nAOTools is set-up like a regular python-microscope device and served with\nthe python-microscope device server (see device  server documentation: \nhttps://www.python-microscope.org/examples.html). The device layout is \nas follows:\n\n    device(AdaptiveOpticsDevice, [ip_address], [port],\n           {mirror_uri:mirror_args,\n           wavefront_uri:wavefront_args,\n           slm_uri:slm_args})\n\nWhere the various `_args` are lists in the following format:\n    \n    [microscope_device_name, ip_address, port]\n    \nNote that all microscope_device_name variables need to be imported from\npython-microscope, ip_address variables must be a string and port variables \nmust be an int.\n\n**Adding new wavefront sensing techniques:**\n\nThe currently implemented wavefront sensing techniques are stored in the\n*aoAlg.py* file as functions of the AdaptiveOpticsFunctions class with \nthe naming convention *\"unwrap_\"* Each of these functions, and any new \nfunctions a user may wish to add, should be of the form:\n\t\n\tdef unwrap_*new_technique*(self, image, (N key word variables), **kwargs):\n\t\t#The actual function definition\n\t\treturn phase_image\n\t\nThere may be no key word variables required. If any are required, they\nshould be placed between the image key word variable and \\*\\*kwargs.\nThe final \\*\\*kwarg syntax is included to catch any key word variables required \nfor other wavefont sensing techniques which higher level processes which\nutilise Microscope-AOtools may pass to the functions, depending on how the \nwavefont sensing switching is enabled at those levels. The function should \noutput a phase image as a real valued numpy array.\n\nMany wavefront sensing techniques have pre-requisites that, once set, do not\nneed to be calculated again e.g. the inteferometric wavefront sensing technique \nrequires a mask to isolate the phase information in the Fourier transform. Once\nthis mask has been constructed for one image, it can be used for all subsequent \nwavefront sensing images. These pre-requisites are stored as attributes of the \nAdaptiveOpticsFunctions class. Methods for constructing these pre-requisites\nand attributes for storing them should be added to the AdaptiveOpticsFunctions \nclass. The attributes should be set as *None* in the *\\_\\_init\\_\\_* function.\n\nOnce the new wavefont sensing technique has been added to *aoAlg.py* it\nshould be added to the *unwrap_function* dictionary in *aoDev.py* with an \nappropriate string key i.e. the interferometry wavefront sensing technique\nhas the string key *\"interferometry\"*. Checks for the appropriate pre-requisites \nshould be added to the *check_unwrap_conditions* function in *aoDev.py*. At \nthis point the new wavefont sensing technique can be used in any of the Set-up \nmethods in the same manner as the existing wavefont sensing techniques. \n\n**Adding new image quality metrics:**\n\nThe currently implemented image quality assessment techniques are\nstored in the *aoMetrics.py* file as functions with the naming \nconvention *\"measure_\"* and have the same input and output forms. Each \nof these functions, and any new functions a user may wish to add, should\nbe of the form:\n\t\n\tdef measure_*new_technique*(image, (N key word variables), **kwargs):\n\t\t#The actual function definition\n\t\treturn metric\n\t\nThere may be no key word variables required. If any are required, they\nshould be placed between the image key word variable and \\*\\*kwargs.\nThe final \\*\\*kwarg syntax is included to catch any key word variables required \nfor other image quality assessment techniques which higher level processes \nwhich utilise Microscope-AOtools may pass to the functions, depending on how \nthe metric switching is enabled at those levels. The function should output a \nsingle value, which can be an integer or a floating point number. \n\t\nOnce the new image quality assessment technique has been added to *aoMetrics.py* \nit should be added to the *metric_function* dictionary in *aoAlg.py* with an \nappropriate string key i.e. the contrast image quality metric has the string key \n*\"contrast\"*. At this point the new image quality metric can be used in any of \nthe Use Case methods in the same manner as the existing image quality assessment \ntechniques.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MicronOxford/microscope-aotools",
    "keywords": "",
    "license": "GPL-3.0+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microscope-aotools",
    "package_url": "https://pypi.org/project/microscope-aotools/",
    "platform": "",
    "project_url": "https://pypi.org/project/microscope-aotools/",
    "project_urls": {
      "Homepage": "https://github.com/MicronOxford/microscope-aotools"
    },
    "release_url": "https://pypi.org/project/microscope-aotools/1.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An extensible microscope adaptive optics use.",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9704431,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb98b43e854ffadb8ec32bb34fd709645105593a45819c8e6de513399fab38a0",
        "md5": "dd18c43df038c0c6591a63f38fe0819a",
        "sha256": "ceab9f89b151d15e6559e383fcf1942ac9a6241b32851591c5de36e7c6bfb54d"
      },
      "downloads": -1,
      "filename": "microscope-aotools-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "dd18c43df038c0c6591a63f38fe0819a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22158,
      "upload_time": "2020-11-01T16:51:24",
      "upload_time_iso_8601": "2020-11-01T16:51:24.850782Z",
      "url": "https://files.pythonhosted.org/packages/fb/98/b43e854ffadb8ec32bb34fd709645105593a45819c8e6de513399fab38a0/microscope-aotools-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}