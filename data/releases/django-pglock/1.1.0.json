{
  "info": {
    "author": "Opus 10 Engineering",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "django-pglock\n#############\n\n``django-pglock`` performs advisory locks, table locks, and helps manage blocking locks.\nHere's some of the functionality at a glance:\n\n* ``pglock.advisory`` for application-level locking, for example, ensuring that tasks don't overlap.\n* ``pglock.model`` for locking an entire model.\n* ``pglock.timeout`` for dynamically setting the timeout to acquire a lock.\n* ``pglock.prioritize`` to kill blocking locks for critical code, such as migrations.\n* The ``PGLock`` and ``BlockedPGLock`` models for querying active and blocked locks.\n* The ``pglock`` management command that wraps the models and provides other utilities.\n\nQuickstart\n==========\n\nAdvisory Locks\n--------------\n\nUse ``pglock.advisory`` to acquire a `Postgres advisory lock <https://www.postgresql.org/docs/current/explicit-locking.html#ADVISORY-LOCKS>`__:\n\n.. code-block:: python\n\n    import pglock\n\n    with pglock.advisory(\"my_lock_id\"):\n        # This code blocks until the \"my_lock_id\" lock is available\n\n\nAbove our code will block until the lock is available, meaning\nno instances of the function will run simultaneously. Use\nthe ``timeout`` argument to configure how long to wait for\nthe lock. A timeout of zero will return immediately:\n\n.. code-block:: python\n\n    with pglock.advisory(\"my_lock_id\", timeout=0) as acquired:\n        if acquired:\n            # The lock is acquired\n\nUse ``side_effect=pglock.Raise`` to raise a ``django.db.utils.OperationalError`` if\nthe lock can't be acquired. When using the decorator, you can also use\n``side_effect=pglock.Skip`` to skip the function if the lock can't be acquired:\n\n.. code-block:: python\n\n    @pglock.advisory(timeout=0, side_effect=pglock.Skip)\n    def non_overlapping_func():\n        # This function will not run if there's another one already running.\n        # The decorator lock ID defaults to <module_name>.<function_name>\n\nModel Locks\n-----------\n\n``pglock.model`` can take a lock on an entire model during a transaction. For example:\n\n.. code-block:: python\n\n    from django.db import transaction\n    import pglock\n\n    with transaction.atomic():\n        pglock.model(\"auth.User\")\n\n        # Any operations on auth.User will be exclusive here. Even read access\n        # for other transactions is blocked\n\n``pglock.model`` uses `Postgres's LOCK statement <https://www.postgresql.org/docs/current/sql-lock.html>`__,\nand it accepts the lock mode as a argument. See the\n`Postgres docs for more information <https://www.postgresql.org/docs/current/sql-lock.html>`__.\n\n**Note** ``pglock.model`` is similar to ``pglock.advisory``. Use the ``timeout`` argument\nto avoid waiting for locks, and supply the appropriate ``side_effect`` to adjust runtime behavior.\n\nPrioritizing Blocked Code\n-------------------------\n\n``pglock.prioritize`` will terminate any locks blocking the wrapped code:\n\n.. code-block:: python\n\n    import pglock\n\n    @pglock.prioritize()\n    def my_func():\n        # Any other statements that have conflicting locks will be killed on a\n        # periodic interval.\n        MyModel.objects.update(val=\"value\")\n\n``pglock.prioritize`` is useful for prioritizing code, such as migrations, to avoid\nsituations where locks are held for too long.\n\nSetting the Lock Timeout\n------------------------\n\nUse ``pglock.timeout`` to dynamically set `Postgres's lock_timeout runtime\nsetting <https://www.postgresql.org/docs/current/runtime-config-client.html>`__:\n\n.. code-block:: python\n\n    import pglock\n\n    @pglock.timeout(1)\n    def do_stuff():\n        # This function will throw an exception if any code takes longer than\n        # one second to acquire a lock\n\nQuerying Locks\n--------------\n\nUse ``pglock.models.PGLock`` to query active locks. It wraps\n`Postgres's pg_locks view <https://www.postgresql.org/docs/current/view-pg-locks.html>`__.\nUse ``pglock.models.BlockedPGLock`` to query locks and join the activity that's blocking\nthem.\n\nUse ``python manage.py pglock`` to view and kill locks from the command line. It has\nseveral options for dynamic filters and re-usable configuration.\n\nCompatibility\n=============\n\n``django-pglock`` is compatible with Python 3.7 - 3.10, Django 2.2 - 4.1, and Postgres 10 - 15.\n\nDocumentation\n=============\n\n`View the django-pglock docs here\n<https://django-pglock.readthedocs.io/>`_ to learn more about:\n\n* Using advisory locks.\n* Locking models.\n* Setting dynamic lock timeouts.\n* Killing blocking locks.\n* The proxy models and custom queryset methods.\n* Using and configuring the management command.\n\nInstallation\n============\n\nInstall django-pglock with::\n\n    pip3 install django-pglock\n\nAfter this, add both ``pgactivity`` and ``pglock`` to the ``INSTALLED_APPS``\nsetting of your Django project.\n\nContributing Guide\n==================\n\nFor information on setting up django-pglock for development and\ncontributing changes, view `CONTRIBUTING.rst <CONTRIBUTING.rst>`_.\n\nPrimary Authors\n===============\n\n- `Wes Kendall <https://github.com/wesleykendall>`__\n- `Paul Gilmartin <https://github.com/PaulGilmartin>`__\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Opus10/django-pglock",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pglock",
    "package_url": "https://pypi.org/project/django-pglock/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-pglock/",
    "project_urls": {
      "Documentation": "https://django-pglock.readthedocs.io",
      "Homepage": "https://github.com/Opus10/django-pglock",
      "Repository": "https://github.com/Opus10/django-pglock"
    },
    "release_url": "https://pypi.org/project/django-pglock/1.1.0/",
    "requires_dist": [
      "django (>=2)",
      "django-pgactivity (>=1.1,<2)",
      "importlib_metadata (>=4); python_version >= \"3.7\" and python_version < \"3.8\""
    ],
    "requires_python": ">=3.7.0,<4",
    "summary": "Postgres locking routines and lock table access.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15647897,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e01cf2dfa8a544d63008cc24a8a04932e7fc2c87f25b2b07e7ac5c9cfd1ed1a",
        "md5": "f2ae28ec6dbd2bd67263e67de6213a93",
        "sha256": "1059083259825f38b90e934d9c0f3be1eaa4de6fdff555c643c319f122c99bd3"
      },
      "downloads": -1,
      "filename": "django_pglock-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f2ae28ec6dbd2bd67263e67de6213a93",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0,<4",
      "size": 15964,
      "upload_time": "2022-11-04T00:13:07",
      "upload_time_iso_8601": "2022-11-04T00:13:07.404789Z",
      "url": "https://files.pythonhosted.org/packages/6e/01/cf2dfa8a544d63008cc24a8a04932e7fc2c87f25b2b07e7ac5c9cfd1ed1a/django_pglock-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ff1e4086389d8a952520f1e8ce23287d15a777d7fa0c866a478034672c6c6b4",
        "md5": "8dc30f0a73fe523184e69712139a41d4",
        "sha256": "fcb9b5591efaa1cef40e276b32aa52916359004ea9184fc61214923d4310f47e"
      },
      "downloads": -1,
      "filename": "django-pglock-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8dc30f0a73fe523184e69712139a41d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0,<4",
      "size": 16523,
      "upload_time": "2022-11-04T00:13:05",
      "upload_time_iso_8601": "2022-11-04T00:13:05.655769Z",
      "url": "https://files.pythonhosted.org/packages/7f/f1/e4086389d8a952520f1e8ce23287d15a777d7fa0c866a478034672c6c6b4/django-pglock-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}