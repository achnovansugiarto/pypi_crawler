{
  "info": {
    "author": "Hsiaoming Yang",
    "author_email": "me@lepture.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: Web Environment :: Mozilla",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Compilers",
      "Topic :: Software Development :: Debuggers"
    ],
    "description": "LiveReload\n==========\n\nThis is a brand new LiveReload in version 2.0.0.\n\n.. image:: https://pypip.in/d/livereload/badge.png\n   :target: https://pypi.python.org/pypi/livereload\n   :alt: Downloads\n.. image:: https://pypip.in/v/livereload/badge.png\n   :target: https://pypi.python.org/pypi/livereload\n   :alt: Version\n\n\nInstallation\n------------\n\nPython LiveReload is designed for web developers who know Python.\n\nInstall Python LiveReload with pip::\n\n    $ pip install livereload\n\nIf you don't have pip installed, try easy_install::\n\n    $ easy_install livereload\n\nCommand Line Interface\n----------------------\n\nPython LiveReload provides a command line utility, ``livereload``, for starting a server in a directory.\n\nBy default, it will listen to port 35729, the common port for `LiveReload browser extensions`_. ::\n\n    $ livereload --help\n    usage: livereload [-h] [-p PORT] [directory]\n\n    Start a `livereload` server\n\n    positional arguments:\n      directory             Directory to watch for changes\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -p PORT, --port PORT  Port to run `livereload` server on\n\n.. _`livereload browser extensions`: http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-\n\nDeveloper Guide\n---------------\n\nThe new livereload server is designed for developers. It can power a\nwsgi application now::\n\n    from livereload import Server, shell\n\n    server = Server(wsgi_app)\n\n    # run a shell command\n    server.watch('static/*.stylus', 'make static')\n\n    # run a function\n    def alert():\n        print('foo')\n    server.watch('foo.txt', alert)\n\n    # output stdout into a file\n    server.watch('style.less', shell('lessc style.less', output='style.css'))\n\n    server.serve()\n\nThe ``Server`` class accepts parameters:\n\n- app: a wsgi application\n- watcher: a watcher instance, you don't have to create one\n\nserver.watch\n~~~~~~~~~~~~\n\n``server.watch`` can watch a filepath, a directory and a glob pattern::\n\n    server.watch('path/to/file.txt')\n    server.watch('directory/path/')\n    server.watch('glob/*.pattern')\n\nYou can also use other library (for example: formic) for more powerful\nfile adding::\n\n    for filepath in formic.FileSet(include=\"**.css\"):\n        server.watch(filepath, 'make css')\n\nYou can delay a certain seconds to send the reload signal::\n\n    # delay 2 seconds for reloading\n    server.watch('path/to/file', delay=2)\n\n\nserver.serve\n~~~~~~~~~~~~\n\nSetup a server with ``server.serve`` method. It can create a static server\nand a livereload server::\n\n    # use default settings\n    server.serve()\n\n    # livereload on another port\n    server.serve(liveport=35729)\n\n    # use custom host and port\n    server.serve(port=8080, host='localhost')\n\n\nshell\n~~~~~\n\nThe powerful ``shell`` function will help you to execute shell commands. You\ncan use it with ``server.watch``::\n\n    server.watch('style.less', shell('lessc style.less', output='style.css'))\n\n    # commands can be a list\n    server.watch('style.less', shell(['lessc', 'style.less'], output='style.css'))\n\n    # working with Makefile\n    server.watch('assets/*.styl', shell('make assets', cwd='assets'))\n\n\nFrameworks Integration\n----------------------\n\nLivereload can work seamlessly with your favorite framework.\n\nDjango\n~~~~~~\n\nHere is a little hint on Django. Change your ``manage.py`` file to::\n\n    #!/usr/bin/env python\n    import os\n    import sys\n\n    if __name__ == \"__main__\":\n        os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"hello.settings\")\n\n        from django.core.management import execute_from_command_line\n\n        if 'livereload' in sys.argv:\n            from django.core.wsgi import get_wsgi_application\n            from livereload import Server\n            application = get_wsgi_application()\n            server = Server(application)\n\n            # Add your watch\n            # server.watch('path/to/file', 'your command')\n            server.serve()\n        else:\n            execute_from_command_line(sys.argv)\n\nWhen you execute ``./manage.py livereload``, it will start a livereload server.\n\n\nFlask\n~~~~~\n\nWrap Flask with livereload is much simpler::\n\n    # app is a Flask object\n    app = create_app()\n\n    server = Server(app.wsgi_app)\n    # server.watch\n    server.serve()\n\n\nBottle\n~~~~~~\n\nWrap the ``Bottle`` app with livereload server::\n\n    app = Bottle()\n    server = Server(app)\n    # server.watch\n    server.serve()",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lepture/python-livereload",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "livereload",
    "package_url": "https://pypi.org/project/livereload/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/livereload/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/lepture/python-livereload"
    },
    "release_url": "https://pypi.org/project/livereload/2.3.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python LiveReload is an awesome tool for web developers",
    "version": "2.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16177216,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "44783734f142a26c3aa82c0df98a20f1a449ea94976913a74315fd4ee44b5148",
        "md5": "114cb56f8c972078745dbdb22ccb815e",
        "sha256": "5dabad9c47c53468244865d67882cc2f5a2ec69bc1bfd454392b78abbcb68a25"
      },
      "downloads": -1,
      "filename": "livereload-2.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "114cb56f8c972078745dbdb22ccb815e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18464,
      "upload_time": "2014-11-05T07:22:55",
      "upload_time_iso_8601": "2014-11-05T07:22:55.172007Z",
      "url": "https://files.pythonhosted.org/packages/44/78/3734f142a26c3aa82c0df98a20f1a449ea94976913a74315fd4ee44b5148/livereload-2.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}