{
  "info": {
    "author": "Muhammad Yasirroni",
    "author_email": "muhammadyasirroni@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# MATPOWER Case Frames\n\nParse MATPOWER case into pandas DataFrame.\n\nUnlike the [tutorial](https://github.com/yasirroni/matpower-pip#extra-require-oct2py-or-matlabengine) on [`matpower-pip`](https://github.com/yasirroni/matpower-pip), this package support parsing MATPOWER case using `re` instead of `Oct2Py` and Octave. After that, you can further parse the data into any format supported by you solver.\n\n## Installation\n\n```plaintext\npip install matpowercaseframes\n```\n\n## Usage\n\n```python\nfrom matpowercaseframes import CaseFrames\n\ncase_path = 'case9.m'\ncf = CaseFrames(case_path)\n\nprint(cf.gencost)\n```\n\nIf you have `matpower` installed via `pip install matpower` (did not require `matpower[octave]`), you can easily navigate MATPOWER case using:\n\n```python\nimport os\nfrom matpower import path_matpower # require `pip install matpower`\nfrom matpowercaseframes import CaseFrames\n\ncase_name = 'case9.m'\ncase_path = os.path.join(path_matpower, 'data', case_name)\ncf = CaseFrames(case_path)\n\nprint(cf.gencost)\n```\n\nIf you use `matpower[octave]`, `CaseFrames` also support `oct2py.io.Struct` as input using:\n\n```python\nfrom matpower import start_instance\nfrom matpowercaseframes import CaseFrames\n\nm = start_instance()\n\n# support mpc before runpf\nmpc = m.loadcase('case9', verbose=False)\ncf = CaseFrames(mpc)\nprint(cf.gencost)\n\n# support mpc after runpf\nmpc = m.runpf(mpc, verbose=False)\ncf = CaseFrames(mpc)\nprint(cf.gencost)\n\nm.exit()\n```\n\n## Acknowledgement\n\nThis repository was supported by the [Faculty of Engineering, Universitas Gadjah Mada](https://ft.ugm.ac.id/en/) under the supervision of [Mr. Sarjiya](https://www.researchgate.net/profile/Sarjiya_Sarjiya). If you use this package for your research, we are very glad if you cite any relevant publication under Mr. Sarjiya's name as a thanks (but you are not responsible to). You can found his publications on the [semantic scholar](https://www.semanticscholar.org/author/Sarjiya/2267414) or [IEEE](https://ieeexplore.ieee.org/author/37548066400).\n\nThis package is a a fork and simplification from [psst](https://github.com/ames-market/psst) MATPOWER parser, thus we greatly thanks psst developers and contributors.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/UGM-EPSLab/MATPOWER-Case-Frames",
    "keywords": "psst,matpower,parser",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matpowercaseframes",
    "package_url": "https://pypi.org/project/matpowercaseframes/",
    "platform": null,
    "project_url": "https://pypi.org/project/matpowercaseframes/",
    "project_urls": {
      "Homepage": "https://github.com/UGM-EPSLab/MATPOWER-Case-Frames"
    },
    "release_url": "https://pypi.org/project/matpowercaseframes/1.0.1/",
    "requires_dist": [
      "pandas (>=1.0.0)",
      "numpy (>=1.12)",
      "matpower (>=7.1.0.2.1.4) ; extra == 'matpower'"
    ],
    "requires_python": ">=3.7",
    "summary": "Parse MATPOWER case into pandas DataFrame",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17359980,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71a4239604829a534cd2e4337f40544ec9b42f47745f689656b0d643e1496a08",
        "md5": "892eb2ec7a2248579ba814d23261fcc3",
        "sha256": "b93346f1aaea383ea0160822daf10515a81f120a8a9fe4d3fba5eec8cbd6158b"
      },
      "downloads": -1,
      "filename": "matpowercaseframes-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "892eb2ec7a2248579ba814d23261fcc3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 14763,
      "upload_time": "2022-09-06T02:04:29",
      "upload_time_iso_8601": "2022-09-06T02:04:29.645893Z",
      "url": "https://files.pythonhosted.org/packages/71/a4/239604829a534cd2e4337f40544ec9b42f47745f689656b0d643e1496a08/matpowercaseframes-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d525739d2e1564b4f6e4d67c2f10a6897bdbfc7408079400a7d4886f23ee4b1",
        "md5": "518dbbc709b63437d0ae8f3b8ff4421a",
        "sha256": "7235660e1f361512806c5156356960dfa596a01ce6b61a37500827923b724057"
      },
      "downloads": -1,
      "filename": "matpowercaseframes-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "518dbbc709b63437d0ae8f3b8ff4421a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12151,
      "upload_time": "2022-09-06T02:04:30",
      "upload_time_iso_8601": "2022-09-06T02:04:30.681284Z",
      "url": "https://files.pythonhosted.org/packages/5d/52/5739d2e1564b4f6e4d67c2f10a6897bdbfc7408079400a7d4886f23ee4b1/matpowercaseframes-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}