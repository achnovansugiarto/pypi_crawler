{
  "info": {
    "author": "Charles TISSIER",
    "author_email": "charles@vingtcinq.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "|mailchimp3 v2.0.14 on PyPi| |MIT license| |Stable|\n\npython-mailchimp-api\n====================\n\nA straighforward python client for v3 of MailChimp API using\nrequests >= 2.7.0.\n\nGetting Started\n---------------\n\nInstallation\n~~~~~~~~~~~~\n\nThis client is hosted at PyPi under the name ``mailchimp3``, to install\nit, simply run\n\n``pip install mailchimp3``\n\nUpgrading from v1.x\n~~~~~~~~~~~~~~~~~~~\n\nThe installation procedure for 2.x is the same as before, however there\nare a massive number of changes to the naming conventions within this\nwrapper and the way in which certain methods are called. Please read\nthe documentation below carefully for information on the new structure\nand expanded functionality. With this release, all documented endpoints\nare implemented and all endpoint methods are available.\n\nHistory\n~~~~~~~\n\nUp to date with\n`changelog <http://developer.mailchimp.com/documentation/mailchimp/guides/changelog/>`__\nfeatures listed thru 1/12/2017.\n\nInitialization\n~~~~~~~~~~~~~~\n\nGrab ``YOUR_SECRET_KEY`` from your mailchimp account (Account > Extra >\nApi Keys). ``YOUR_USERNAME`` is the one you use to login.\n\n::\n\n    from mailchimp3 import MailChimp\n\n    client = MailChimp('YOUR_USERNAME', 'YOUR_SECRET_KEY')\n\nPagination\n~~~~~~~~~~\n\nSimply add ``count`` and ``offset`` arguments in your function. The\ncount is how many records to return, the offset is how many records to\nskip. For endpoints that allow the pagination parameters, the all()\nmethod has an additional boolean ``get_all`` argument that will loop\nthrough all records until the API no longer returns any to get all\nrecords without manually performing an additional query. By default,\ncount is 10 and offset is 0 for all endpoints that support it. The\n``get_all`` parameter on the all() method on any endpoint defaults to\nfalse, which follows the values that are provided in the call, and\nusing ``get_all=True`` will ignore the provided count and offset to\nensure that all records are returned.\n\n::\n\n    client.lists.members.all('123456', count=100, offset=0)\n\nFields\n~~~~~~\n\nMany endpoints allow you to select which fields will be returned out of\nall available fields (for example, only the email\\_address of a\nmember). Simply add ``fields`` arguments in your function. The\nfollowing only display email\\_address and id for each member in list\n123456:\n\n::\n\n    client.lists.members.all('123456', get_all=True, fields=\"members.email_address,members.id\")\n\nExamples\n~~~~~~~~\n\n::\n\n    # returns all the lists (only name and id)\n    client.lists.all(get_all=True, fields=\"lists.name,lists.id\")\n\n    # returns all members inside list '123456'\n    client.lists.members.all('123456', get_all=True)\n\n    # return the first 100 member's email addresses for the list with id 123456\n    client.lists.members.all('123456', count=100, offset=0, fields=\"members.email_address\")\n\n    # returns the list matching id '123456'\n    client.lists.get('123456')\n\n    # add John Doe with email john.doe@example.com to list matching id '123456'\n    client.lists.members.create('123456', {\n        'email_address': 'john.doe@example.com',\n        'status': 'subscribed',\n        'merge_fields': {\n            'FNAME': 'John',\n            'LNAME': 'Doe',\n        },\n    })\n\n    # returns all the campaigns\n    client.campaigns.all(get_all=True)\n\n    # You can also disable at runtime with the optional ``enabled`` parameter.\n    # Every API call will return None\n    client = MailChimp('YOUR USERNAME', 'YOUR SECRET KEY', enabled=False)\n\n    # You are encouraged to specify a value in seconds for the  ``timeout``\n    # parameter to avoid hanging requests.\n    client = MailChimp('YOUR USERNAME', 'YOUR SECRET KEY', timeout=10.0)\n\nAPI Structure\n-------------\n\nAll endpoints follow the structure listed in the official MailChimp API\nv3 documentation. The structure will be listed below and then the\nindividual methods available after.\n\n::\n\n    MailChimp\n    +- Root\n    +- Authorized Apps\n    +- Automations\n    |  +- Actions\n    |  +- Emails\n    |  |  +- Actions\n    |  |  +- Queues\n    |  +- Removed Subscribers\n    +- Batch Operations\n    +- Campaign Folders\n    +- Campaigns\n    |  +- Actions\n    |  +- Content\n    |  +- Feedback\n    |  +- Send Checklist\n    +- Conversations\n    |  +- Messages\n    +- Stores\n    |  +- Carts\n    |  |  +- Lines\n    |  +- Customers\n    |  +- Orders\n    |  |  +- Lines\n    |  +- Products\n    |     +- Variants\n    +- File Manager Files\n    +- File Manager Folders\n    +- Lists\n    |  +- Abuse Reports\n    |  +- Activity\n    |  +- Clients\n    |  +- Growth History\n    |  +- Interest Categories\n    |  |  +- Interests\n    |  +- Members\n    |  |  +- Activity\n    |  |  +- Goals\n    |  |  +- Notes\n    |  +- Merge Fields\n    |  +- Segments\n    |  |  +- Segment Members\n    |  +- Signup Forms\n    |  +- Twitter Lead Generation Carts\n    |  +- Webhooks\n    +- Reports\n    |  +- Campaign Abuse\n    |  +- Campaign Advice\n    |  +- Click Reports\n    |  |  +- Members\n    |  +- Domain Performance\n    |  +- EepURL Reports\n    |  +- Email Activity\n    |  +- Location\n    |  +- Sent To\n    |  +- Sub-Reports\n    |  +- Unsubscribes\n    +- Seach Campaigns\n    +- Search Members\n    +- Template Folders\n    +- Templates\n       +- Default Content\n\nAPI Endpoints\n-------------\n\nBelow is the list of all endpoints and the methods that can be called\nagainst them. Any endpoint that has a method that takes an ID argument\n(for example the app\\_id in the authorized\\_apps endpoint or the\nsubscriber\\_hash in the list members endpoints) will record all IDs\npassed as well as those generated by methods that will only ever return\na single result such as the create() method present on some endpoints.\nThese stored attributes are only available at the level that they were\npassed or created at and must be passed again to interact with a lower\nor higher level such as accessing a list and then a member. The below\ncode assumes that you have initialized the MailChimp class as listed\nabove with the name ``client``.\n\nRoot\n~~~~\n\nRoot\n^^^^\n\n::\n\n    client.root.get()\n\nAuthorized Apps\n~~~~~~~~~~~~~~~\n\nAuthorized Apps\n^^^^^^^^^^^^^^^\n\n::\n\n    client.authorized_apps.create(data={})\n    client.authorized_apps.all(get_all=False)\n    client.authorized_apps.get(app_id='')\n\nAutomations\n~~~~~~~~~~~\n\nAutomations\n^^^^^^^^^^^\n\n::\n\n    client.automations.all(get_all=False)\n    client.automations.get(workflow_id='')\n\nAutomation Actions\n^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.automations.actions.pause(workflow_id='')\n    client.automations.actions.start(workflow_id='')\n\nAutomation Emails\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.automations.emails.all(workflow_id='')\n    client.automations.emails.get(workflow_id='', email_id='')\n\nAutomation Email Actions\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.automations.emails.actions.pause(workflow_id='', email_id='')\n    client.automations.emails.actions.start(workflow_id='', email_id='')\n\nAutomation Email Queues\n^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.automations.emails.queues.create(workflow_id='', email_id='', data={})\n    client.automations.emails.queues.all(workflow_id='', email_id='')\n    client.automations.emails.queues.get(workflow_id='', email_id='', subscriber_hash='')\n\nAutomation Removed Subscribers\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.automations.removed_subscribers.create(workflow_id='', data={})\n    client.automations.removed_subscribers.all(workflow_id='')\n\nBatch Operations\n~~~~~~~~~~~~~~~~\n\nBatches\n^^^^^^^\n\n::\n\n    client.batches.create(data={})\n    client.batches.all(get_all=False)\n    client.batches.get(batch_id='')\n    client.batches.delete(batch_id='')\n\nCampaigns\n~~~~~~~~~\n\nFolders\n^^^^^^^\n\n::\n\n    client.campaign_folders.create(data={})\n    client.campaign_folders.all(get_all=False)\n    client.campaign_folders.get(folder_id='')\n    client.campaign_folders.update(folder_id='', data={})\n    client.campaign_folders.delete(folder_id='')\n\nCampaigns\n^^^^^^^^^\n\n::\n\n    client.campaigns.create(data={})\n    client.campaigns.all(get_all=False)\n    client.campaigns.get(campaign_id='')\n    client.campaigns.update(campaign_id='')\n    client.campaigns.delete(campaign_id='')\n\nCampaign Actions\n^^^^^^^^^^^^^^^^\n\n::\n\n    client.campaigns.actions.cancel(campaign_id='')\n    client.campaigns.actions.pause(campaign_id='')\n    client.campaigns.actions.replicate(campaign_id='')\n    client.campaigns.actions.resume(campaign_id='')\n    client.campaigns.actions.schedule(campaign_id='', data={})\n    client.campaigns.actions.send(campaign_id='')\n    client.campaigns.actions.test(campaign_id='', data={})\n    client.campaigns.actions.unschedule(campaign_id='')\n\nCampaign Content\n^^^^^^^^^^^^^^^^\n\n::\n\n    client.campaigns.content.get(campaign_id='')\n    client.campaigns.content.update(campaign_id='', data={})\n\nCampaign Feedback\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.campaigns.feedback.create(campaign_id='', data={})\n    client.campaigns.feedback.all(campaign_id='', get_all=False)\n    client.campaigns.feedback.get(campaign_id='', feedback_id='')\n    client.campaigns.feedback.update(campaign_id='', feedback_id='', data={})\n    client.campaigns.feedback.delete(campaign_id='', feedback_id='')\n\nCampaign Send Checklist\n^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.campaigns.send_checklist.get(campaign_id='')\n\nConversations\n~~~~~~~~~~~~~\n\nConversations\n^^^^^^^^^^^^^\n\n::\n\n    client.conversations.all(get_all=False)\n    client.conversations.get(conversation_id='')\n\nConversation Messages\n^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.conversations.messages.create(conversation_id='', data={})\n    client.conversations.messages.all(conversation_id='')\n    client.conversations.messages.get(conversation_id='', message_id='')\n\nE-Commerce\n~~~~~~~~~~\n\nStores\n^^^^^^\n\n::\n\n    client.stores.create(data={})\n    client.stores.all(get_all=False)\n    client.stores.get(store_id='')\n    client.stores.update(store_id='', data={})\n    client.stores.delete(store_id='')\n\nStore Carts\n^^^^^^^^^^^\n\n::\n\n    client.stores.carts.create(store_id='', data={})\n    client.stores.carts.all(store_id='', get_all=False)\n    client.stores.carts.get(store_id='', cart_id='')\n    client.stores.carts.update(store_id='', cart_id='', data={})\n    client.stores.carts.delete(store_id='', cart_id='')\n\nStore Cart Lines\n^^^^^^^^^^^^^^^^\n\n::\n\n    client.stores.carts.lines.create(store_id='', cart_id='', data={})\n    client.stores.carts.lines.all(store_id='', cart_id='', get_all=False)\n    client.stores.carts.lines.get(store_id='', cart_id='', line_id='')\n    client.stores.carts.lines.update(store_id='', cart_id='', line_id='', data={})\n    client.stores.carts.lines.delete(store_id='', cart_id='', line_id='')\n\nStore Customers\n^^^^^^^^^^^^^^^\n\n::\n\n    client.stores.customers.create(store_id='', data={})\n    client.stores.customers.all(store_id='', get_all=False)\n    client.stores.customers.get(store_id='', customer_id='')\n    client.stores.customers.update(store_id='', customer_id='', data={})\n    client.stores.customers.create_or_update(store_id='', customer_id='', data={})\n    client.stores.customers.delete(store_id='', customer_id='')\n\nStore Orders\n^^^^^^^^^^^^\n\n::\n\n    client.stores.orders.create(store_id='', data={})\n    client.stores.orders.all(store_id='', get_all=False)\n    client.stores.orders.get(store_id='', order_id='')\n    client.stores.orders.update(store_id='', order_id='', data={})\n    client.stores.orders.delete(store_id='', order_id='')\n\nStore Order Lines\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.stores.orders.lines.create(store_id='', order_id='', data={})\n    client.stores.orders.lines.all(store_id='', order_id='', get_all=False)\n    client.stores.orders.lines.get(store_id='', order_id='', line_id='')\n    client.stores.orders.lines.update(store_id='', order_id='', line_id='', data={})\n    client.stores.orders.lines.delete(store_id='', order_id='', line_id='')\n\nStore Products\n^^^^^^^^^^^^^^\n\n::\n\n    client.stores.products.create(store_id='', data={})\n    client.stores.products.all(store_id='', get_all=False)\n    client.stores.products.get(store_id='', product_id='')\n    client.stores.products.update(store_id='', product_id='')\n    client.stores.products.delete(store_id='', product_id='')\n\nStore Product Variants\n^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.stores.products.variants.create(store_id='', product_id='', data={})\n    client.stores.products.variants.all(store_id='', product_id='', get_all=False)\n    client.stores.products.variants.get(store_id='', product_id='', variant_id='')\n    client.stores.products.variants.update(store_id='', product_id='', variant_id='', data={})\n    client.stores.products.variants.create_or_update(store_id='', product_id='', variant_id='', data={})\n    client.stores.products.variants.delete(store_id='', product_id='', variant_id='')\n\nFile Manager\n~~~~~~~~~~~~\n\nFiles\n^^^^^\n\n::\n\n    client.files.create(data={})\n    client.files.all(get_all=False)\n    client.files.get(file_id='')\n    client.files.update(file_id='', data={})\n    client.files.delete(file_id='')\n\nFolders\n^^^^^^^\n\n::\n\n    client.folders.create(data={})\n    client.folders.all(get_all=False)\n    client.folders.get(folder_id='')\n    client.folders.update(folder_id='', data={})\n    client.folders.delete(folder_id='')\n\nLists\n~~~~~\n\nLists\n^^^^^\n\n::\n\n    client.lists.create(data={})\n    client.lists.update_members(list_id='', data={})\n    client.lists.all(get_all=False)\n    client.lists.get(list_id='')\n    client.lists.update(list_id='', data={})\n    client.lists.delete(list_id='')\n\nList Abuse Reports\n^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.abuse_reports.all(list_id='', get_all=False)\n    client.lists.abuse_reports.get(list_id='', report_id='')\n\nList Activity\n^^^^^^^^^^^^^\n\n::\n\n    client.lists.activity.all(list_id='')\n\nList Clients\n^^^^^^^^^^^^\n\n::\n\n    client.lists.clients.all(list_id='')\n\nList Growth History\n^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.growth_history.all(list_id='', get_all=False)\n    client.lists.growth_history.get(list_id='', month='')\n\nList Interest Categories\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.interest_categories.create(list_id='', data={})\n    client.lists.interest_categories.all(list_id='', get_all=False)\n    client.lists.interest_categories.get(list_id='', category_id='')\n    client.lists.interest_categories.update(list_id='', category_id='', data={})\n    client.lists.interest_categories.delete(list_id='', category_id='')\n\nList Interest Category Interests\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.interest_categories.interests.create(list_id='', category_id='', data={})\n    client.lists.interest_categories.interests.all(list_id='', category_id='', get_all=False)\n    client.lists.interest_categories.interests.get(list_id='', category_id='', interest_id='')\n    client.lists.interest_categories.interests.update(list_id='', category_id='', interest_id='', data={})\n    client.lists.interest_categories.interests.delete(list_id='', category_id='', interest_id='')\n\nList Members\n^^^^^^^^^^^^\n\n::\n\n    client.lists.members.create(list_id='', data={})\n    client.lists.members.all(list_id='', get_all=False)\n    client.lists.members.get(list_id='', subscriber_hash='')\n    client.lists.members.update(list_id='', subscriber_hash='', data={})\n    client.lists.members.create_or_update(list_id='', subscriber_hash='', data={})\n    client.lists.members.delete(list_id='', subscriber_hash='')\n\nList Member Activity\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.members.activity.all(list_id='', subscriber_hash='')\n\nList Member Goals\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.members.goals.all(list_id='', subscriber_hash='')\n\nList Member Notes\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.members.notes.create(list_id='', subscriber_hash='', data={})\n    client.lists.members.notes.all(list_id='', subscriber_hash='', get_all=False)\n    client.lists.members.notes.get(list_id='', subscriber_hash='', note_id='')\n    client.lists.members.notes.update(list_id='', subscriber_hash='', note_id='', data={})\n    client.lists.members.notes.delete(list_id='', subscriber_hash='', note_id='')\n\nList Merge Fields\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.merge_fields.create(list_id='', data={})\n    client.lists.merge_fields.all(list_id='', get_all=False)\n    client.lists.merge_fields.get(list_id='', merge_id='')\n    client.lists.merge_fields.update(list_id='', merge_id='', data={})\n    client.lists.merge_fields.delete(list_id='', merge_id='')\n\nList Segments\n^^^^^^^^^^^^^\n\n::\n\n    client.lists.segments.create(list_id='', data={})\n    client.lists.segments.all(list_id='', get_all=False)\n    client.lists.segments.get(list_id='', segment_id='')\n    client.lists.segments.update(list_id='', segment_id='', data={})\n    client.lists.segments.update_members(list_id='', segment_id='', data={})\n    client.lists.segments.delete(list_id='', segment_id='')\n\nList Segment Members\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.segments.members.create(list_id='', segment_id='', data={})\n    client.lists.segments.members.all(list_id='', segment_id='', get_all=False)\n    client.lists.segments.members.delete(list_id='', segment_id='', subscriber_hash='')\n\nList Signup Forms\n^^^^^^^^^^^^^^^^^\n\n::\n\n    client.lists.signup_forms.create(list_id='', data={})\n    client.lists.signup_forms.all(list_id='')\n\nList Webhooks\n^^^^^^^^^^^^^\n\n::\n\n    client.lists.webhooks.create(list_id='', data={})\n    client.lists.webhooks.all(list_id='')\n    client.lists.webhooks.get(list_id='', webhook_id='')\n    client.lists.webhooks.update(list_id='', webhook_id='', data={})\n    client.lists.webhooks.delete(list_id='', webhook_id='')\n\nReports\n~~~~~~~\n\nReports\n^^^^^^^\n\n::\n\n    client.reports.all(get_all=False)\n    client.reports.get(campaign_id='')\n\nCampaign Abuse Reports\n^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.abuse_reports.all(campaign_id='')\n    client.reports.abuse_reports.get(campaign_id='', report_id='')\n\nCampaign Advice\n^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.advice.all(campaign_id='')\n\nClick Details Report\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.click_details.all(campaign_id='', get_all=False)\n    client.reports.click_details.get(campaign_id='', link_id='')\n\nClick Details Report Members\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.click_details.members.all(campaign_id='', link_id='', get_all=False)\n    client.reports.click_details.members.get(campaign_id='', link_id='', subscriber_hash='')\n\nDomain Performance Reports\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.domain_performance.all(campaign_id='')\n\nEepURL Reports\n^^^^^^^^^^^^^^\n\n::\n\n    client.reports.eepurl.all(camnpaign_id='')\n\nEmail Activity Reports\n^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.email_activity.all(campaign_id='', get_all=False)\n    client.reports.email_activity.get(campaign_id='', subscriber_hash='')\n\nLocations Report\n^^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.locations.all(campaign_id='')\n\nSent To Reports\n^^^^^^^^^^^^^^^\n\n::\n\n    client.reports.sent_to.all(campaign_id='', get_all=False)\n    client.reports.sent_to.get(campaign_id='', subscriber_hash='')\n\nSub-Reports\n^^^^^^^^^^^\n\n::\n\n    client.reports.subreports.all(campaign_id='')\n\nUnsubscribes\n^^^^^^^^^^^^\n\n::\n\n    client.reports.unsubscribes.all(campaign_id='', get_all=False)\n    client.reports.unsubscribes.get(campaign_id='', subscriber_hash='')\n\nSearch\n~~~~~~\n\nCampaigns\n^^^^^^^^^\n\n::\n\n    client.search_campaigns.get()\n\nMembers\n^^^^^^^\n\n::\n\n    client.search_members.get()\n\nTemplates\n~~~~~~~~~\n\nFolders\n^^^^^^^\n\n::\n\n    client.template_folders.create(data={})\n    client.template_folders.all(get_all=False)\n    client.template_folders.get(folder_id='')\n    client.template_folders.update(folder_id='', data={})\n    client.template_folders.delete(folder_id='')\n\nTemplates\n^^^^^^^^^\n\n::\n\n    client.templates.create(data={})\n    client.templates.all(get_all=False)\n    client.templates.get(template_id='')\n    client.templates.update(template_id='', data={})\n    client.templates.delete(template_id='')\n\nDefault Content\n^^^^^^^^^^^^^^^\n\n::\n\n    client.templates.default_content.all(template_id='')\n\nSupport\n-------\n\nIf you are having issues, please let us know or submit a pull request.\n\nLicense\n-------\n\nThe project is licensed under the MIT License.\n\n.. |mailchimp3 v2.0.14 on PyPi| image:: https://img.shields.io/badge/pypi-2.0.14-green.svg\n   :target: https://pypi.python.org/pypi/mailchimp3\n.. |MIT license| image:: https://img.shields.io/badge/licence-MIT-blue.svg\n.. |Stable| image:: https://img.shields.io/badge/status-stable-green.svg",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/charlesthk/python-mailchimp",
    "keywords": "mailchimp api v3 client wrapper",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mailchimp3",
    "package_url": "https://pypi.org/project/mailchimp3/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mailchimp3/",
    "project_urls": {
      "Homepage": "https://github.com/charlesthk/python-mailchimp"
    },
    "release_url": "https://pypi.org/project/mailchimp3/2.0.14/",
    "requires_dist": [
      "requests (>=2.7.0)"
    ],
    "requires_python": "",
    "summary": "A python client for v3 of MailChimp API",
    "version": "2.0.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12788129,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8bf266e8ab9d1b5092537a0101747edc339468642cd6525612caf37176e7377f",
        "md5": "06aac68ba9cace7c62f8b23fd2317343",
        "sha256": "47a8e89e682f9b284a26efd3ee7b609b458b8f00ae2957b23634df4094da020b"
      },
      "downloads": -1,
      "filename": "mailchimp3-2.0.14-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "06aac68ba9cace7c62f8b23fd2317343",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 82790,
      "upload_time": "2017-06-28T23:48:24",
      "upload_time_iso_8601": "2017-06-28T23:48:24.294873Z",
      "url": "https://files.pythonhosted.org/packages/8b/f2/66e8ab9d1b5092537a0101747edc339468642cd6525612caf37176e7377f/mailchimp3-2.0.14-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e085ffba061301ac734a720c1427f9356d6934b677580b1336b865feaa4b1459",
        "md5": "d31c41e59f4c98aab311f76d0d9e808e",
        "sha256": "62876bfe1be38cc96928eab2a2d8195db4af58a6adf535e580e3b3186f76172c"
      },
      "downloads": -1,
      "filename": "mailchimp3-2.0.14.tar.gz",
      "has_sig": false,
      "md5_digest": "d31c41e59f4c98aab311f76d0d9e808e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36453,
      "upload_time": "2017-06-28T23:48:27",
      "upload_time_iso_8601": "2017-06-28T23:48:27.262630Z",
      "url": "https://files.pythonhosted.org/packages/e0/85/ffba061301ac734a720c1427f9356d6934b677580b1336b865feaa4b1459/mailchimp3-2.0.14.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}