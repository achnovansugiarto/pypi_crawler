{
  "info": {
    "author": "evtn",
    "author_email": "g@evtn.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# matlog\n\n**This module is well-documented with docstrings and type hints. Use `help(matlog.tokens)` or your editor hints to get familiar with it.**\n\nBasic usage:    \n```python\nfrom matlog import Expression\n\nexpr = Expression(\"A & B\")\nprint(expr.solve(A=1, B=0)) # False\nprint(expr.solve(B=0)) # False\nprint(expr.table()) # prints the truth table of expression\n```\n\n## Installation\n\nSimply use `pip install matlog` or clone repo and launch `setup.py`\n\n\n## Contents\n+ [Expression string](#expression-string)\n+ [Using Expression object](#expression)\n  + [Truth tables](#truth-tables)\n  + [Evaluating expression](#evaluating-expression)\n  + [Partial evaluation](#partial-evaluation)\n  + [Equality check](equality-check)\n  + [proposition](proposition)\n\n## Expression string\nAn expression string is a bunch of tokens (atoms, expressions, operators and literals) in a specific order.\nThere's a big example of expression string:    \n`a | (b -> c) == (~a ^ 1) <- ~z`\n\nLet's review in detail:    \n\n### Atoms\n\nAny letter is considered as an atom. Atoms can be only one letter long and must be divided by operators.\n\n### Literals\n\nA literal is `1` or `0` (True and False respectively). Literals are treated like atoms.\n\n### Expressions\n\nAny expression can contain nested expression strings in brackets. Nested expressions are treated like atoms.\n\n### Operators\n\n*matlog* expression syntax supports 6 binary operators and one unary (listed in order of priority, from high to low):\n+ **~** (not / negation) *unary*: turns **True** to **False** and vice versa. \n+ **&** (and / conjunction): **True** if (and only if) both operands are **True**\n+ **|** (or / disjunction): **True** if (and only if) any operand is **True**.\n+ **->** (implication): **False** if (and only if) the left operand is **True** but the right is **False**\n+ **==** (equality / biconditional): **True** if (and only if) operands are equal to each other\n+ **^** (xor / exclusive disjunction): **False** if (and only if) operands are equal to each other\n+ **<-** (converse implication): **->** with reversed operands order\n\n## Expression\n\nExpression class is the main class of the module.\nThere are three ways to create an Expression object:\n+ from an [expression string](#expression-string): `Expression(expr_str)`\n+ copying an existing Expression: `expr.copy()` (same as `Expression(expr.tokens)`)\n+ deep-copying an existing Expression object: `expr.deep_copy()`\n+ constructing an Expression from tokens (**module won't check if it is valid in this case**): `Expression([token1, token2...])`\n\n### Truth tables \n\nYou can use `.table(keep=None)` method to build a truth table for an Expression object.\n`keep` parameter can be either `1` or `0` (to filter rows with corresponding values) or `None` if you need a full table    \n\n### Evaluating expression\n\nIf you need a value for a specific set of values, you can use `.solve()` method like this:\n\n```python\nfrom matlog import Expression\nexpr = Expression(\"A & B | C\")\nprint(expr.solve(A=1, B=0, C=1)) # prints (1)\nprint(expr.solve({\"A\": 1, \"B\": 0, \"C\": 1})) # you can pass a dictionary too\n```\n\nif you need a result value (release version would provide more convenient ways, of course):\n\n```python\nexpr.value(A=1, B=0, C=1) # 1 (raises an exception if there's not enough data to solve expression)\n```\n\n### Partial evaluation\n\nIf you know some (but not all) values, you can also use `.solve()`, providing some values:\n\n```python\nfrom matlog import Expression\nexpr = Expression(\"A & B | C\")\nprint(expr.solve(B=0)) # prints (C)\nprint(expr.solve({\"B\": 0})) # prints (C) too\n``` \n\n### Equality check\n\nIf you're wondering if expressions are equal (producing the same results with any set of values), you can use `Expression.equals()` method:\n\n```python\nfrom matlog import Expression, are_equal\nexpr1 = Expression(\"A & B\")\nexpr2 = Expression(\"B & A\")\nprint(expr1.equals(expr2)) # True\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/evtn/matlog/archive/v2.0.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/evtn/matlog",
    "keywords": "math mathematical logic boolean algebra",
    "license": "GNUv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matlog",
    "package_url": "https://pypi.org/project/matlog/",
    "platform": "",
    "project_url": "https://pypi.org/project/matlog/",
    "project_urls": {
      "Download": "https://github.com/evtn/matlog/archive/v2.0.2.tar.gz",
      "Homepage": "https://github.com/evtn/matlog"
    },
    "release_url": "https://pypi.org/project/matlog/2.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6.*",
    "summary": "matlog â€” Boolean Algebra Parser+Solver",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10429188,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1f0674113a396aaa385e20e5ce6e4b176c083f2cd98cb928bca1a76b95f799e",
        "md5": "41058c258bd0d801225d2f8ab315b5c1",
        "sha256": "64a844f39b63b6ff0a3322e71d9d4f9f5c5951bf3ae1e9aecb5f240fc30f2c30"
      },
      "downloads": -1,
      "filename": "matlog-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "41058c258bd0d801225d2f8ab315b5c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.*",
      "size": 9577,
      "upload_time": "2021-01-26T10:41:59",
      "upload_time_iso_8601": "2021-01-26T10:41:59.151333Z",
      "url": "https://files.pythonhosted.org/packages/a1/f0/674113a396aaa385e20e5ce6e4b176c083f2cd98cb928bca1a76b95f799e/matlog-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}