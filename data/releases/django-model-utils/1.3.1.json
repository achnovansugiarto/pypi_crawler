{
  "info": {
    "author": "Carl Meyer",
    "author_email": "carl@oddbird.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "==================\ndjango-model-utils\n==================\n\n.. image:: https://secure.travis-ci.org/carljm/django-model-utils.png?branch=master\n   :target: http://travis-ci.org/carljm/django-model-utils\n.. image:: https://coveralls.io/repos/carljm/django-model-utils/badge.png?branch=master\n   :target: https://coveralls.io/r/carljm/django-model-utils\n\nDjango model mixins and utilities.\n\nInstallation\n============\n\nInstall from PyPI with ``pip``::\n\n    pip install django-model-utils\n\nor get the `in-development version`_::\n\n    pip install django-model-utils==tip\n\n.. _in-development version: http://bitbucket.org/carljm/django-model-utils/get/tip.tar.gz#egg=django_model_utils-tip\n\nTo use ``django-model-utils`` in your Django project, just import and\nuse the utility classes described below; there is no need to modify\nyour ``INSTALLED_APPS`` setting.\n\nDependencies\n------------\n\n``django-model-utils`` is tested with `Django`_ 1.2 and later on Python 2.6 and 2.7.\n\n.. _Django: http://www.djangoproject.com/\n\n\nContributing\n============\n\nPlease file bugs and send pull requests to the `GitHub repository`_ and `issue\ntracker`_.\n\n.. _GitHub repository: https://github.com/carljm/django-model-utils/\n.. _issue tracker: https://github.com/carljm/django-model-utils/issues\n\n(Until January 2013 django-model-utils primary development was hosted at\n`BitBucket`_; the issue tracker there will remain open until all issues and\npull requests tracked in it are closed, but all new issues should be filed at\nGitHub.)\n\n.. _BitBucket: https://bitbucket.org/carljm/django-model-utils/overview\n\n\nChoices\n=======\n\n``Choices`` provides some conveniences for setting ``choices`` on a Django model field::\n\n    from model_utils import Choices\n\n    class Article(models.Model):\n        STATUS = Choices('draft', 'published')\n        # ...\n        status = models.CharField(choices=STATUS, default=STATUS.draft, max_length=20)\n\nA ``Choices`` object is initialized with any number of choices. In the\nsimplest case, each choice is a string; that string will be used both\nas the database representation of the choice, and the human-readable\nrepresentation. Note that you can access options as attributes on the\n``Choices`` object: ``STATUS.draft``.\n\nBut you may want your human-readable versions translated, in which\ncase you need to separate the human-readable version from the DB\nrepresentation. In this case you can provide choices as two-tuples::\n\n    from model_utils import Choices\n\n    class Article(models.Model):\n        STATUS = Choices(('draft', _('draft')), ('published', _('published')))\n        # ...\n        status = models.CharField(choices=STATUS, default=STATUS.draft, max_length=20)\n\nBut what if your database representation of choices is constrained in\na way that would hinder readability of your code? For instance, you\nmay need to use an ``IntegerField`` rather than a ``CharField``, or\nyou may want the database to order the values in your field in some\nspecific way. In this case, you can provide your choices as triples,\nwhere the first element is the database representation, the second is\na valid Python identifier you will use in your code as a constant, and\nthe third is the human-readable version::\n\n    from model_utils import Choices\n\n    class Article(models.Model):\n        STATUS = Choices((0, 'draft', _('draft')), (1, 'published', _('published')))\n        # ...\n        status = models.IntegerField(choices=STATUS, default=STATUS.draft)\n\n\nStatusField\n===========\n\nA simple convenience for giving a model a set of \"states.\"\n``StatusField`` is a ``CharField`` subclass that expects to find a\n``STATUS`` class attribute on its model, and uses that as its\n``choices``. Also sets a default ``max_length`` of 100, and sets its\ndefault value to the first item in the ``STATUS`` choices::\n\n    from model_utils.fields import StatusField\n    from model_utils import Choices\n    \n    class Article(models.Model):\n        STATUS = Choices('draft', 'published')\n        # ...\n        status = StatusField()\n\n(The ``STATUS`` class attribute does not have to be a `Choices`_\ninstance, it can be an ordinary list of two-tuples).\n\n``StatusField`` does not set ``db_index=True`` automatically; if you\nexpect to frequently filter on your status field (and it will have\nenough selectivity to make an index worthwhile) you may want to add this\nyourself.\n\n\nMonitorField\n============\n\nA ``DateTimeField`` subclass that monitors another field on the model,\nand updates itself to the current date-time whenever the monitored\nfield changes::\n\n    from model_utils.fields import MonitorField, StatusField\n    \n    class Article(models.Model):\n        STATUS = Choices('draft', 'published')\n        \n        status = StatusField()\n        status_changed = MonitorField(monitor='status')\n\n(A ``MonitorField`` can monitor any type of field for changes, not only a\n``StatusField``.)\n\nSplitField\n==========\n\nA ``TextField`` subclass that automatically pulls an excerpt out of\nits content (based on a \"split here\" marker or a default number of\ninitial paragraphs) and stores both its content and excerpt values in\nthe database.\n\nA ``SplitField`` is easy to add to any model definition::\n\n    from django.db import models\n    from model_utils.fields import SplitField\n\n    class Article(models.Model):\n        title = models.CharField(max_length=100)\n        body = SplitField()\n\n``SplitField`` automatically creates an extra non-editable field\n``_body_excerpt`` to store the excerpt. This field doesn't need to be\naccessed directly; see below.\n\nAccessing a SplitField on a model\n---------------------------------\n\nWhen accessing an attribute of a model that was declared as a\n``SplitField``, a ``SplitText`` object is returned.  The ``SplitText``\nobject has three attributes:\n\n``content``:\n    The full field contents.\n``excerpt``:\n    The excerpt of ``content`` (read-only).\n``has_more``:\n    True if the excerpt and content are different, False otherwise.\n\nThis object also has a ``__unicode__`` method that returns the full\ncontent, allowing ``SplitField`` attributes to appear in templates\nwithout having to access ``content`` directly.\n\nAssuming the ``Article`` model above::\n\n    >>> a = Article.objects.all()[0]\n    >>> a.body.content\n    u'some text\\n\\n<!-- split -->\\n\\nmore text'\n    >>> a.body.excerpt\n    u'some text\\n'\n    >>> unicode(a.body)\n    u'some text\\n\\n<!-- split -->\\n\\nmore text'\n\nAssignment to ``a.body`` is equivalent to assignment to\n``a.body.content``.\n\n.. note::\n    a.body.excerpt is only updated when a.save() is called\n\n\nCustomized excerpting\n---------------------\n\nBy default, ``SplitField`` looks for the marker ``<!-- split -->``\nalone on a line and takes everything before that marker as the\nexcerpt. This marker can be customized by setting the ``SPLIT_MARKER``\nsetting.\n\nIf no marker is found in the content, the first two paragraphs (where\nparagraphs are blocks of text separated by a blank line) are taken to\nbe the excerpt. This number can be customized by setting the\n``SPLIT_DEFAULT_PARAGRAPHS`` setting.\n\nTimeFramedModel\n===============\n\nAn abstract base class for any model that expresses a time-range. Adds\n``start`` and ``end`` nullable DateTimeFields, and a ``timeframed``\nmanager that returns only objects for whom the current date-time lies\nwithin their time range.\n\nStatusModel\n===========\n\nPulls together `StatusField`_, `MonitorField`_ and `QueryManager`_\ninto an abstract base class for any model with a \"status.\"\n\nJust provide a ``STATUS`` class-attribute (a `Choices`_ object or a\nlist of two-tuples), and your model will have a ``status`` field with\nthose choices, a ``status_changed`` field containing the date-time the\n``status`` was last changed, and a manager for each status that\nreturns objects with that status only::\n\n    from model_utils.models import StatusModel\n    from model_utils import Choices\n    \n    class Article(StatusModel):\n        STATUS = Choices('draft', 'published')\n    \n    # ...\n    \n    a = Article()\n    a.status = Article.STATUS.published\n\n    # this save will update a.status_changed\n    a.save()\n    \n    # this query will only return published articles:\n    Article.published.all()\n\nInheritanceManager\n==================\n\nThis manager (`contributed by Jeff Elmore`_) should be attached to a base model\nclass in a model-inheritance tree.  It allows queries on that base model to\nreturn heterogenous results of the actual proper subtypes, without any\nadditional queries.\n\nFor instance, if you have a ``Place`` model with subclasses ``Restaurant`` and\n``Bar``, you may want to query all Places::\n\n    nearby_places = Place.objects.filter(location='here')\n\nBut when you iterate over ``nearby_places``, you'll get only ``Place``\ninstances back, even for objects that are \"really\" ``Restaurant`` or ``Bar``.\nIf you attach an ``InheritanceManager`` to ``Place``, you can just call the\n``select_subclasses()`` method on the ``InheritanceManager`` or any\n``QuerySet`` from it, and the resulting objects will be instances of\n``Restaurant`` or ``Bar``::\n\n    from model_utils.managers import InheritanceManager\n\n    class Place(models.Model):\n        # ...\n        objects = InheritanceManager()\n\n    class Restaurant(Place):\n        # ...\n\n    class Bar(Place):\n        # ...\n\n    nearby_places = Place.objects.filter(location='here').select_subclasses()\n    for place in nearby_places:\n        # \"place\" will automatically be an instance of Place, Restaurant, or Bar\n\nThe database query performed will have an extra join for each subclass; if you\nwant to reduce the number of joins and you only need particular subclasses to\nbe returned as their actual type, you can pass subclass names to\n``select_subclasses()``, much like the built-in ``select_related()`` method::\n\n    nearby_places = Place.objects.select_subclasses(\"restaurant\")\n    # restaurants will be Restaurant instances, bars will still be Place instances\n\n``InheritanceManager`` also provides a subclass-fetching alternative to the\n``get()`` method::\n    \n    place = Place.objects.get_subclass(id=some_id)\n    # \"place\" will automatically be an instance of Place, Restaurant, or Bar\n\nIf you don't explicitly call ``select_subclasses()`` or ``get_subclass()``,\nan ``InheritanceManager`` behaves identically to a normal ``Manager``; so\nit's safe to use as your default manager for the model.\n\n.. note::\n\n    Due to `Django bug #16572`_, on Django versions prior to 1.6\n    ``InheritanceManager`` only supports a single level of model inheritance;\n    it won't work for grandchild models.\n\n.. note::\n    The implementation of ``InheritanceManager`` uses ``select_related``\n    internally.  Due to `Django bug #16855`_, this currently means that it\n    will override any previous ``select_related`` calls on the ``QuerySet``.\n\n.. _contributed by Jeff Elmore: http://jeffelmore.org/2010/11/11/automatic-downcasting-of-inherited-models-in-django/\n.. _Django bug #16855: https://code.djangoproject.com/ticket/16855\n.. _Django bug #16572: https://code.djangoproject.com/ticket/16572\n\n\nTimeStampedModel\n================\n\nThis abstract base class just provides self-updating ``created`` and\n``modified`` fields on any model that inherits from it.\n\nQueryManager\n============\n\nMany custom model managers do nothing more than return a QuerySet that\nis filtered in some way. ``QueryManager`` allows you to express this\npattern with a minimum of boilerplate::\n\n    from django.db import models\n    from model_utils.managers import QueryManager\n\n    class Post(models.Model):\n        ...\n        published = models.BooleanField()\n        pub_date = models.DateField()\n        ...\n\n        objects = models.Manager()\n        public = QueryManager(published=True).order_by('-pub_date')\n\nThe kwargs passed to ``QueryManager`` will be passed as-is to the\n``QuerySet.filter()`` method. You can also pass a ``Q`` object to\n``QueryManager`` to express more complex conditions. Note that you can\nset the ordering of the ``QuerySet`` returned by the ``QueryManager``\nby chaining a call to ``.order_by()`` on the ``QueryManager`` (this is\nnot required).\n\n\nPassThroughManager\n==================\n\nA common \"gotcha\" when defining methods on a custom manager class is that those\nsame methods are not automatically also available on the QuerySets returned by\nthat manager, so are not \"chainable\". This can be counterintuitive, as most of\nthe public QuerySet API is mirrored on managers. It is possible to create a\ncustom Manager that returns QuerySets that have the same additional methods,\nbut this requires boilerplate code. The ``PassThroughManager`` class\n(`contributed by Paul McLanahan`_) removes this boilerplate.\n\n.. _contributed by Paul McLanahan: http://paulm.us/post/3717466639/passthroughmanager-for-django\n\nTo use ``PassThroughManager``, rather than defining a custom manager with\nadditional methods, define a custom ``QuerySet`` subclass with the additional\nmethods you want, and pass that ``QuerySet`` subclass to the\n``PassThroughManager.for_queryset_class()`` class method. The returned\n``PassThroughManager`` subclass will always return instances of your custom\n``QuerySet``, and you can also call methods of your custom ``QuerySet``\ndirectly on the manager::\n\n    from datetime import datetime\n    from django.db import models\n    from django.db.models.query import QuerySet\n    from model_utils.managers import PassThroughManager\n\n    class PostQuerySet(QuerySet):\n        def by_author(self, user):\n            return self.filter(user=user)\n\n        def published(self):\n            return self.filter(published__lte=datetime.now())\n\n        def unpublished(self):\n            return self.filter(published__gte=datetime.now())\n\n\n    class Post(models.Model):\n        user = models.ForeignKey(User)\n        published = models.DateTimeField()\n\n        objects = PassThroughManager.for_queryset_class(PostQuerySet)()\n\n    Post.objects.published()\n    Post.objects.by_author(user=request.user).unpublished()\n\n\nModelTracker\n============\n\nA ``ModelTracker`` can be added to a model to track changes in model fields.  A\n``ModelTracker`` allows querying for field changes since a model instance was\nlast saved.  An example of applying ``ModelTracker`` to a model::\n\n    from django.db import models\n    from model_utils import ModelTracker\n\n    class Post(models.Model):\n        title = models.CharField(max_length=100)\n        body = models.TextField()\n\n        tracker = ModelTracker()\n\nAccessing a model tracker\n-------------------------\n\nThere are multiple methods available for checking for changes in model fields.\n\nprevious\n~~~~~~~~\nReturns the value of the given field during the last save::\n\n    >>> a = Post.objects.create(title='First Post')\n    >>> a.title = 'Welcome'\n    >>> a.tracker.previous('title')\n    u'First Post'\n\nReturns ``None`` when the model instance isn't saved yet.\n\nhas_changed\n~~~~~~~~~~~\nReturns ``True`` if the given field has changed since the last save::\n\n    >>> a = Post.objects.create(title='First Post')\n    >>> a.title = 'Welcome'\n    >>> a.tracker.has_changed('title')\n    True\n    >>> a.tracker.has_changed('body')\n    False\n\nReturns ``True`` if the model instance hasn't been saved yet.\n\nchanged\n~~~~~~~\nReturns a dictionary of all fields that have been changed since the last save\nand the values of the fields during the last save::\n\n    >>> a = Post.objects.create(title='First Post')\n    >>> a.title = 'Welcome'\n    >>> a.body = 'First post!'\n    >>> a.tracker.changed()\n    {'title': 'First Post', 'body': ''}\n\nReturns ``{}`` if the model instance hasn't been saved yet.\n\n\nTracking specific fields\n------------------------\n\nA fields parameter can be given to ``ModelTracker`` to limit model tracking to\nthe specific fields::\n\n    from django.db import models\n    from model_utils import ModelTracker\n\n    class Post(models.Model):\n        title = models.CharField(max_length=100)\n        body = models.TextField()\n\n        title_tracker = ModelTracker(fields=['title'])\n\nAn example using the model specified above::\n\n    >>> a = Post.objects.create(title='First Post')\n    >>> a.body = 'First post!'\n    >>> a.title_tracker.changed()\n    {}\n\nCHANGES\n=======\n\n1.3.1 (2013.04.11)\n------------------\n\n- Added explicit default to ``BooleanField`` in tests, for Django trunk\n  compatibility.\n\n- Fix intermittent ``StatusField`` bug.  Fixes GH-29.\n\n\n1.3.0 (2013.03.27)\n------------------\n\n- Allow specifying default value for a ``StatusField``. Thanks Felipe\n  Prenholato.\n\n- Fix calling ``create()`` on a ``RelatedManager`` that subclasses a dynamic\n  ``PassThroughManager``. Thanks SeiryuZ for the report. Fixes GH-24.\n\n- Add workaround for https://code.djangoproject.com/ticket/16855 in\n  InheritanceQuerySet to avoid overriding prior calls to\n  ``select_related()``. Thanks ivirabyan.\n\n- Added support for arbitrary levels of model inheritance in\n  InheritanceManager. Thanks ivirabyan. (This feature only works in Django\n  1.6+ due to https://code.djangoproject.com/ticket/16572).\n\n- Added ``ModelTracker`` for tracking field changes between model saves. Thanks\n  Trey Hunner.\n\n\n1.2.0 (2013.01.27)\n------------------\n\n- Moved primary development from `Bitbucket`_ to `GitHub`_. Bitbucket mirror\n  will continue to receive updates; Bitbucket issue tracker will be closed once\n  all issues tracked in it are resolved.\n\n.. _BitBucket: https://bitbucket.org/carljm/django-model-utils/overview\n.. _GitHub: https://github.com/carljm/django-model-utils/\n\n- Removed deprecated ``ChoiceEnum``, ``InheritanceCastModel``,\n  ``InheritanceCastManager``, and ``manager_from``.\n\n- Fixed pickling of ``PassThroughManager``. Thanks Rinat Shigapov.\n\n- Set ``use_for_related_fields = True`` on ``QueryManager``.\n\n- Added ``__len__`` method to ``Choices``. Thanks Ryan Kaskel and James Oakley.\n\n- Fixed ``InheritanceQuerySet`` on Django 1.5. Thanks Javier García Sogo.\n\n1.1.0 (2012.04.13)\n------------------\n\n- Updated AutoCreatedField, AutoLastModifiedField, MonitorField, and\n  TimeFramedModel to use ``django.utils.timezone.now`` on Django 1.4.\n  Thanks Donald Stufft.\n\n- Fixed annotation of InheritanceQuerysets. Thanks Jeff Elmore and Facundo\n  Gaich.\n\n- Dropped support for Python 2.5 and Django 1.1. Both are no longer supported\n  even for security fixes, and should not be used.\n\n- Added ``PassThroughManager.for_queryset_class()``, which fixes use of\n  ``PassThroughManager`` with related fields. Thanks Ryan Kaskel for report and\n  fix.\n\n- Added ``InheritanceManager.get_subclass()``. Thanks smacker.\n\n1.0.0 (2011.06.16)\n------------------\n\n- Fixed using SplitField on an abstract base model.\n\n- Fixed issue #8, adding ``use_for_related_fields = True`` to\n  ``InheritanceManager``.\n\n- Added ``PassThroughManager``. Thanks Paul McLanahan.\n\n- Added pending-deprecation warnings for ``InheritanceCastModel``,\n  ``manager_from``, and Django 1.1 support. Removed documentation for the\n  deprecated utilities. Bumped ``ChoiceEnum`` from pending-deprecation to\n  deprecation.\n\n- Fixed issue #6, bug with InheritanceManager and descriptor fields (e.g.\n  FileField).  Thanks zyegfryed for the fix and sayane for tests.\n\n0.6.0 (2011.02.18)\n------------------\n\n- updated SplitField to define get_prep_value rather than get_db_prep_value.\n  This avoids deprecation warnings on Django trunk/1.3, but makes SplitField\n  incompatible with Django versions prior to 1.2.\n\n- added InheritanceManager, a better approach to selecting subclass instances\n  for Django 1.2+. Thanks Jeff Elmore.\n\n- added InheritanceCastManager and InheritanceCastQuerySet, to allow bulk\n  casting of a queryset to child types.  Thanks Gregor Müllegger.\n\n0.5.0 (2010.09.24)\n------------------\n\n- added manager_from (thanks George Sakkis)\n- added StatusField, MonitorField, TimeFramedModel, and StatusModel\n  (thanks Jannis Leidel)\n- deprecated ChoiceEnum and replaced with Choices\n\n0.4.0 (2010.03.16)\n------------------\n\n- added SplitField\n- added ChoiceEnum\n- added South support for custom model fields\n\n0.3.0\n-----\n\n* Added ``QueryManager``\n\nTODO\n====\n\n* Switch to proper test skips once Django 1.3 is minimum supported.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/carljm/django-model-utils/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-model-utils",
    "package_url": "https://pypi.org/project/django-model-utils/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-model-utils/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/carljm/django-model-utils/"
    },
    "release_url": "https://pypi.org/project/django-model-utils/1.3.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django model mixins and utilities",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15782405,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e902c31f2003226ab69f6d71c502f3a81e68188b2bf2b69f37e15932ef7e5189",
        "md5": "4b71e93b96113fce4f5e13e8c36e9fe5",
        "sha256": "dbd0582ae749521d857746816ff1216b264dfc338bbd4aa215023b95b2586bf6"
      },
      "downloads": -1,
      "filename": "django-model-utils-1.3.1.tar.gz",
      "has_sig": true,
      "md5_digest": "4b71e93b96113fce4f5e13e8c36e9fe5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29005,
      "upload_time": "2013-04-12T03:37:19",
      "upload_time_iso_8601": "2013-04-12T03:37:19.602324Z",
      "url": "https://files.pythonhosted.org/packages/e9/02/c31f2003226ab69f6d71c502f3a81e68188b2bf2b69f37e15932ef7e5189/django-model-utils-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}