{
  "info": {
    "author": "GAEL Systems",
    "author_email": "drb-python@gael.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# WCS driver\nThe web coverage service driver extends abstracts WxS driver with the GetCoverage feature.\n\n\n# Nodes\n### WcsServiceNode\nRepresents the WCS service. This node has no attribute and\nhas as children WcsOperationNode like GetCoverage.\nOthers children give information about the service like for example \nServiceMetadata, that could give information about Supported Format inside a XmlNode.\nThose children are filled in by the information returned from \nthe service's GetCapabilities request.\n\n\n\n### WcsOperationNode\n\nRepresents an operation than can mde on the service.\nFor WCS service, the mandatory operation are GetCoverage, GetCapabilities, and \nGetFeatureInfo.\nOptional operations may be provided by the service \nand indicated in the possibilities thereof. \nThose optional operations are also represented as WcsOperationNode.\n\nFor perform an operation (mandatory or optional), you can use the operator '[]' with a dict that contains \nthe parameters of the request.\n\nExample:\n```\ndict_request = {'COVERAGEID': 'nitrogen_5-15cm_Q0.5'}\n\ndescribe_coverage = service_wcs['DescribeCoverage'][dict_request]\n```\n\nFor mandatory operations GetCoverage and DescribeCoverage you can\nalternatively use Predicate WcsGetCoveragePredicate and WcsDescribeCoveragePredicate.\n\nSpecific class define WcsNodeOperationGetCoverage and WcsNodeOperationDescribeCoverage \nfor accept respectively WcsGetCoveragePredicate WcsDescribeCoveragePredicate.\n\nExample:\n```\npredicate = WcsGetCoveragePredicate(coverage_id='nitrogen_5-15cm_Q0.5', format=}\n\n\nget_coverage = service_wcs['GetCoverage'][predicate]\n```\n\n# Installation\n```\npip install drb-driver-wcs\n```\n# Examples\n\n```python\nfrom drb.drivers.wcs import WcsServiceNode\n\nurl_wcs='https+wcs://myserver_wcs/wcs'\n\n\nservice_wcs = WcsServiceNode(url_wcs)\n\nlist_cap = service_wcs.children\n\nprint('----------------------------------------')\nprint('list_cap')\n\nprint(list_cap)\n\nfor child in service_wcs.children:\n    print(child)\n    print(child.name)\n\n# => <drb_driver_wxs.wXs_node.WXSNodeOperation object at 0x7fea3b54ac70>\n# => GetCapabilities\n# => <drb_driver_wcs.wcs_nodes.WcsNodeOperationDescribeCoverage object at 0x7fea3b5652e0>\n# => DescribeCoverage\n# => <drb_driver_wcs.wcs_nodes.WcsNodeOperationGetCoverage object at 0x7fea3b5765b0>\n# => GetCoverage\n# => <drb_driver_xml.xml_node.XmlNode object at 0x7fea3b54aca0>\n# => Contents\n#     \n    \ndict_request = {'COVERAGE': 'greenland_accumulation', 'VERSION' : '1.1.1'}\n\ndescribe = service_wcs['DescribeCoverage'][dict_request]\n\nprint('-----------------------------------------------------------------')\nprint('DescribeCoverage: nitrogen_5...')\nprint(describe)\nprint(describe[0].name)\n# => <drb_driver_xml.xml_node.XmlNode object at 0x7f7aa91f0be0>\n# => CoverageDescription\n\n```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/drb-python/impl/wcs",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drb-driver-wcs",
    "package_url": "https://pypi.org/project/drb-driver-wcs/",
    "platform": null,
    "project_url": "https://pypi.org/project/drb-driver-wcs/",
    "project_urls": {
      "Homepage": "https://gitlab.com/drb-python/impl/wcs"
    },
    "release_url": "https://pypi.org/project/drb-driver-wcs/1.1.0/",
    "requires_dist": [
      "drb-driver-wxs (~=1.1.1)"
    ],
    "requires_python": ">=3.8",
    "summary": "DRB WCS OGC Service driver",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16174738,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d06887f1325f240f2e8ef3d4e0852b9a13d729bd2b858887b049d4854b03e6ba",
        "md5": "fee98a845bd8194cbd57b9b7763da661",
        "sha256": "f380a21ed516cd832b74e7046913e8d1c71690d81e2dbbe9e31bd30ba7eb1fdd"
      },
      "downloads": -1,
      "filename": "drb_driver_wcs-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fee98a845bd8194cbd57b9b7763da661",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 5558,
      "upload_time": "2022-12-21T15:22:57",
      "upload_time_iso_8601": "2022-12-21T15:22:57.457973Z",
      "url": "https://files.pythonhosted.org/packages/d0/68/87f1325f240f2e8ef3d4e0852b9a13d729bd2b858887b049d4854b03e6ba/drb_driver_wcs-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "001c6d1b521254eee2c811924a99e4f3a22a7d9f09e7dd238a6627da151b913d",
        "md5": "ac4d7ff945272e194bd6a3859c961f14",
        "sha256": "e9ae4ee0577b2c1b91f50849f529bedcb23b17fd0bb69384a1de142098f71a55"
      },
      "downloads": -1,
      "filename": "drb-driver-wcs-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ac4d7ff945272e194bd6a3859c961f14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 22960,
      "upload_time": "2022-12-21T15:22:59",
      "upload_time_iso_8601": "2022-12-21T15:22:59.054225Z",
      "url": "https://files.pythonhosted.org/packages/00/1c/6d1b521254eee2c811924a99e4f3a22a7d9f09e7dd238a6627da151b913d/drb-driver-wcs-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}