{
  "info": {
    "author": "Patrick Samson",
    "author_email": "maxcom@laposte.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Communications :: Email"
    ],
    "description": ".. django-postman documentation master file, created by\r\n           sphinx-quickstart on Fri Nov 26 09:32:49 2010.\r\n           You can adapt this file completely to your liking, but it should at least\r\n           contain the root `toctree` directive.\r\n        \r\n        Welcome to django-postman's documentation!\r\n        ==========================================\r\n        \r\n        This is an application for `Django <http://www.djangoproject.com>`_-powered websites.\r\n        \r\n        Basically, the purpose is to allow authenticated users of a site to exchange private **messages**\r\n        within the site.  In this documentation, the word *user* is to be understood as an instance of a User,\r\n        in the django.contrib.auth context.\r\n        \r\n        So it is mainly for a User-to-User exchange.\r\n        But it may be beneficial for a subscriber to receive inquiries from any visitor, ie even if non authenticated.\r\n        For instance, a subscriber as a service provider wants an ask-me-details form on a presentation page\r\n        to facilitate possible business contacts.\r\n        In this case, the visitor is presented a compose message form with an additional field to give\r\n        an email address for the reply. The email is obfuscated to the recipient.\r\n        \r\n        What is a message ? Roughly a piece of text, about a subject, sent by a sender to a recipient.\r\n        Each user has access to a collection of messages, stored in folders:\r\n        \r\n            | **Inbox** for incoming messages\r\n            | **Sent** for sent messages\r\n            | **Archives** for archived messages\r\n            | **Trash** for messages marked as deleted\r\n        \r\n        In folders, messages can be presented in two modes:\r\n        \r\n        * by **conversation**, for a compact view: the original message and its replies are grouped in a set\r\n          to constitute one sole entry.\r\n          The lastest message (based on the time) is the representative of the set.\r\n        * by **message**, for an expanded view: each message is considered by itself.\r\n        \r\n        Here is a summary of features:\r\n        \r\n        * A non-User (email is undisclosed) can write to a User and get a reply\r\n          (can be disabled by configuration)\r\n        * Exchanges can be moderated (with auto-accept and auto-reject plug-ins)\r\n        * Optional recipient filter plug-ins\r\n        * Optional exchange filtering plug-ins (blacklists)\r\n        * Multi-recipient writing is possible (can be disabled by configuration)\r\n          with min/max constraints\r\n        * Messages are managed by conversations\r\n        * Messages in folders are sortable by sender|recipient|subject|date\r\n        * 'Archives' folder in addition to classic Inbox, Sent and Trash folders\r\n        * A Quick-Reply form to only ask for a response text\r\n        * A cleanup management command to clear the old deleted messages\r\n        \r\n        It has support for optional additional applications:\r\n        \r\n        * Autocomplete recipient field (default is 'django-ajax-selects'),\r\n          with multiple recipient management\r\n        * New message notification (default is `django-notification`_)\r\n        * Asynchronous mailer (default is `django-mailer`_)\r\n        \r\n        .. _`django-notification`: http://github.com/jtauber/django-notification/\r\n        .. _`django-mailer`: http://github.com/jtauber/django-mailer/\r\n        \r\n        Moderation\r\n        ----------\r\n        As an option, messages may need to be validated by a moderator before to be visible\r\n        to the recipient.  Possible usages are:\r\n        \r\n        * to control there is no unwanted words in the text fields.\r\n        * to make sure that no direct contact informations are exchanged when the site is an intermediary\r\n          and delivers services based on subscription fees.\r\n        \r\n        Messages are first created in a *pending* state. A moderator is in charge to change them to\r\n        a *rejected* or *accepted* state.  This operation can be done in two ways:\r\n        \r\n        * By a person, through the Admin site. A specially simplified change view is provided,\r\n          with one-click buttons to accept or reject the message.\r\n        * Automatically, through one or more auto-moderator functions.\r\n        \r\n        Filters\r\n        -------\r\n        As options, custom filters can disallow messages, in two ways:\r\n        \r\n        * **user filter**: a user is not in a state to act as a recipient\r\n        * **exchange filter**: criteria for a message between a specific sender\r\n          and a specific recipient are not fulfilled",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/psam/django-postman/overview",
    "keywords": "django messages messaging email moderation",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-postman",
    "package_url": "https://pypi.org/project/django-postman/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-postman/",
    "project_urls": {
      "Homepage": "http://bitbucket.org/psam/django-postman/overview"
    },
    "release_url": "https://pypi.org/project/django-postman/3.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "User-to-User messaging system for Django, with gateway to AnonymousUser, moderation and thread management, user & exchange filters, inbox/sent/archives/trash folders, support for apps: auto-complete, notification, mailer.",
    "version": "3.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15496360,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0da25c4951371dbe9b4d0b5cab85fc32e628b040d66935057de7af959fd5ec49",
        "md5": "1341f9fb4c3bdd245f91e1f5db57acd8",
        "sha256": "c124d35050c332f075ad378f2bc87ae7a2c2f68d9b8bb93ca140a3ed3625d139"
      },
      "downloads": -1,
      "filename": "django-postman-3.2.0.zip",
      "has_sig": false,
      "md5_digest": "1341f9fb4c3bdd245f91e1f5db57acd8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 233494,
      "upload_time": "2014-11-09T12:31:48",
      "upload_time_iso_8601": "2014-11-09T12:31:48.102822Z",
      "url": "https://files.pythonhosted.org/packages/0d/a2/5c4951371dbe9b4d0b5cab85fc32e628b040d66935057de7af959fd5ec49/django-postman-3.2.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}