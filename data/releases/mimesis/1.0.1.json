{
  "info": {
    "author": "Likid Geimfari (Isaak Uchakaev)",
    "author_email": "likid.geimfari@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/lk-geimfari/mimesis/master/media/large-logo.png\n    :target: https://github.com/lk-geimfari/mimesis\n\n\n\nMimesis\n-------\n\n|Build Status| |Build status on Windows| |codecov| |PyPI version|\n|Python|\n\n**Mimesis** is a fast and easy to use library for Python programming\nlanguage, which helps generate mock data for a variety of purposes (see\n\"`Data providers <#data-providers>`__\") in a variety of languages (see\n\"`Locales <#locales>`__\"). This data can be particularly useful during\nsoftware development and testing. For example, it could be used to\npopulate a testing database for a web application with user information\nsuch as email addresses, usernames, first names, last names, etc.\n\nMimesis offers a number of advantages over other similar libraries, such\nas Faker:\n\n-  Performance. Mimesis is significantly\n   `faster <http://i.imgur.com/pCo6yPA.png>`__ than other similar\n   libraries.\n-  Completeness. Mimesis strives to provide many detailed providers that\n   offer a variety of data generators.\n-  Simplicity. Mimesis does not require any modules other than the\n   Python standard library.\n\nSee\n`here <https://gist.github.com/lk-geimfari/461ce92fd32379d7b73c9e12164a9154>`__\nfor an example of how we compare performance with other libraries.\n\nDocumentation\n-------------\n\nMimesis is very simple to use, and the below examples should help you\nget started. Complete documentation for Mimesis is available on `Read\nthe Docs <http://mimesis.readthedocs.io/>`__.\n\nInstallation\n------------\n\nTo install mimesis, simply:\n\n.. code:: zsh\n\n    ➜  ~ pip install mimesis\n\n**Note**: Version ``1.0.0`` has suffered significant\nchanges, so there is no backwards\ncompatibility with earlier versions of this library.\n\nGetting started\n---------------\n\nAs we said above, this library is really easy to use. A simple usage\nexample is given below:\n\n.. code:: python\n\n    >>> from mimesis import Personal\n    >>> from mimesis.enums import Gender\n    >>> person = Personal('en')\n\n    >>> person.full_name(gender=Gender.FEMALE)\n    'Antonetta Garrison'\n\n    >>> person.occupation()\n    'Backend Developer'\n\n    >>> templates = ['U_d', 'U-d', 'l_d', 'l-d']\n    >>> for template in templates:\n    ...     person.username(template=template)\n\n    'Adders_1893'\n    'Abdel-1888'\n    'constructor_1884'\n    'chegre-2051'\n\nLocales\n-------\n\nYou can specify a locale when creating providers and they will return\ndata that is appropriate for the language or country associated with\nthat locale:\n\n.. code:: python\n\n    >>> from mimesis import Personal\n\n    >>> de = Personal('de')\n    >>> fr = Personal('fr')\n    >>> pl = Personal('pl')\n\n    >>> de.full_name()\n    'Sabrina Gutermuth'\n\n    >>> fr.full_name()\n    'César Bélair\n\n    >>> pl.full_name()\n    'Światosław Tomankiewicz'\n\nMimesis currently includes support for 33 different locales. See `details <http://mimesis.readthedocs.io/locales.html>`__ for more information.\n\nWhen you only need to generate data for a single locale, use the\n``Generic()`` provider, and you can access all providers of Mimesis from\none object.\n\n.. code:: python\n\n    >>> from mimesis import Generic\n    >>> from mimesis.enums import TLDType\n    >>> g = Generic('es')\n\n    >>> g.datetime.month()\n    'Agosto'\n\n    >>> g.food.fruit()\n    'Limón'\n\n    >>> g.internet.top_level_domain(TLDType.GEOTLD)\n    '.moscow'\n\n\nData Providers\n--------------\n\nMimesis support over twenty different data providers available, which can produce data related to food, people, computer hardware, transportation, addresses, and more. See `details <http://mimesis.readthedocs.io/providers.html>`__ for more information.\n\n\nCustom Providers\n----------------\n\nYou also can add custom provider to ``Generic()``, using\n``add_provider()`` method:\n\n.. code:: python\n\n    >>> from mimesis import Generic\n    >>> from mimesis.providers import BaseProvider\n    >>> generic = Generic('en')\n\n    >>> class SomeProvider(BaseProvider):\n    ...     class Meta:\n    ...         name = \"some_provider\"\n    ...\n    ...     def hello(self):\n    ...         return \"Hello!\"\n\n    >>> class Another(BaseProvider):\n    ...     def bye(self):\n    ...         return \"Bye!\"\n\n    >>> generic.add_provider(SomeProvider)\n    >>> generic.add_provider(Another)\n\n    >>> generic.some_provider.hello()\n    'Hello!'\n\n    >>> generic.another.bye()\n    'Bye!'\n\nor multiple custom providers using method ``add_providers()``:\n\n.. code:: python\n\n    >>> generic.add_providers(SomeProvider, Another)\n\n\nBuiltins specific data providers\n--------------------------------\n\nSome countries have data types specific to that country. For example\n«Social Security Number» (SSN) in the United States of America (``en``),\nand «Cadastro de Pessoas Físicas» (CPF) in Brazil (``pt-br``). If you\nwould like to use these country-specific providers, then you must import\nthem explicitly:\n\n.. code:: python\n\n    >>> from mimesis import Generic\n    >>> from mimesis.builtins import BrazilSpecProvider\n\n    >>> generic = Generic('pt-br')\n    >>> generic.add_provider(BrazilSpecProvider)\n    >>> generic.brazil_provider.cpf()\n    '696.441.186-00'\n\nYou can use specific-provider without adding it to ``Generic()``:\n\n.. code:: python\n\n    >>> BrazilSpecProvider().cpf()\n    '712.455.163-37'\n\nGenerate data by schema\n-----------------------\n\nFor generating data by schema, just create an instance of ``Field`` object,\nwhich take any string which represents name of the any method of any\nsupported data provider and the ``**kwargs`` of the method, after that\nyou should describe the schema in lambda function and run filling the\nschema using method ``fill()``:\n\n.. code:: python\n\n    >>> from mimesis.schema import Field\n    >>> from mimesis.enums import Gender\n    >>> _ = Field('en')\n    >>> app_schema = (\n    ...     lambda: {\n    ...         \"id\": _('uuid'),\n    ...         \"name\": _('word'),\n    ...         \"version\": _('version'),\n    ...         \"owner\": {\n    ...             \"email\": _('email'),\n    ...             \"token\": _('token'),\n    ...             \"creator\": _('full_name', gender=Gender.FEMALE),\n    ...         },\n    ...     }\n    ... )\n    >>> _.fill(schema=app_schema, iterations=10)\n\nMimesis support generating data by schema only starting from version\n``1.0.0``.\n\nIntegration with py.test and factory\\_boy\n-----------------------------------------\n\nWe have created libraries which can help you easily use Mimesis with\n``factory_boy`` and ``py.test``.\n\n-  `mimesis-factory <https://github.com/mimesis-lab/mimesis-factory>`__\n   - Integration with the ``factory_boy``.\n-  `pytest-mimesis <https://github.com/mimesis-lab/pytest-mimesis>`__ -\n   Integration with the ``py.test``.\n\nHow to Contribute\n-----------------\n\n1. Fork it\n2. Take a look at contributions `guidelines </CONTRIBUTING.md>`__\n3. Create your feature branch (``git checkout -b feature/new_locale``)\n4. Commit your changes (``git commit -am 'Add new_locale'``)\n5. Add yourself to list of contributors\n6. Push to the branch (``git push origin feature/new_locale``)\n7. Create a new Pull Request\n\nLicense\n-------\n\nMimesis is licensed under the MIT License. See\n`LICENSE <https://github.com/lk-geimfari/mimesis/blob/master/LICENSE>`__\nfor more information.\n\nDisclaimer\n----------\n\nThe authors assume no responsibility for how you use this library data\ngenerated by it. This library is designed only for developers with good\nintentions. Do not use the data generated with Mimesis for illegal\npurposes.\n\n.. |Build Status| image:: https://travis-ci.org/lk-geimfari/mimesis.svg?branch=master\n   :target: https://travis-ci.org/lk-geimfari/mimesis\n.. |Build status on Windows| image:: https://ci.appveyor.com/api/projects/status/chj8huslvn6vde18?svg=true\n   :target: https://ci.appveyor.com/project/lk-geimfari/mimesis\n.. |codecov| image:: https://codecov.io/gh/lk-geimfari/mimesis/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/lk-geimfari/mimesis\n.. |PyPI version| image:: https://badge.fury.io/py/mimesis.svg\n   :target: https://badge.fury.io/py/mimesis\n.. |Python| image:: https://img.shields.io/badge/python-3.5%2C%203.6-brightgreen.svg\n   :target: https://badge.fury.io/py/mimesis",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lk-geimfari/mimesis",
    "keywords": "fake,mock,data,populate,database,testing,generate,mimesis,dummy",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mimesis",
    "package_url": "https://pypi.org/project/mimesis/",
    "platform": "",
    "project_url": "https://pypi.org/project/mimesis/",
    "project_urls": {
      "Homepage": "https://github.com/lk-geimfari/mimesis"
    },
    "release_url": "https://pypi.org/project/mimesis/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Mimesis: mock data for developers.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16135784,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c754757f012ebdffc2969b322de4a28443088d73799b8b47214e848909d48eeb",
        "md5": "54437a149e7d5db491acdfb8a5a9cc57",
        "sha256": "cf2f5582ff611a14361a88e9f96e2f6dcef614fb876418fb5ee18b263fe5198e"
      },
      "downloads": -1,
      "filename": "mimesis-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "54437a149e7d5db491acdfb8a5a9cc57",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2452816,
      "upload_time": "2017-12-04T13:20:25",
      "upload_time_iso_8601": "2017-12-04T13:20:25.481985Z",
      "url": "https://files.pythonhosted.org/packages/c7/54/757f012ebdffc2969b322de4a28443088d73799b8b47214e848909d48eeb/mimesis-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}