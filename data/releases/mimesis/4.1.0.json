{
  "info": {
    "author": "Isaak Uchakaev (Likid Geimfari)",
    "author_email": "likid.geimfari@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing"
    ],
    "description": "Mimesis - Fake Data Generator\n-----------------------------\n\n|\n\n.. image:: https://raw.githubusercontent.com/lk-geimfari/mimesis/master/media/readme-logo.png\n     :target: https://github.com/lk-geimfari/mimesis\n\n|\n\nDescription\n-----------\n\n.. image:: https://travis-ci.org/lk-geimfari/mimesis.svg?branch=master\n     :target: https://travis-ci.org/lk-geimfari/mimesis\n     :alt: Travis CI\n\n.. image:: https://readthedocs.org/projects/mimesis/badge/?version=latest\n     :target: https://mimesis.name/\n     :alt: Documentation Status\n\n.. image:: https://codecov.io/gh/lk-geimfari/mimesis/branch/master/graph/badge.svg\n     :target: https://codecov.io/gh/lk-geimfari/mimesis\n     :alt: Code Coverage\n\n.. image:: https://www.codefactor.io/repository/github/lk-geimfari/mimesis/badge\n   :target: https://www.codefactor.io/repository/github/lk-geimfari/mimesis\n   :alt: CodeFactor\n\n.. image:: https://img.shields.io/pypi/v/mimesis?color=bright-green\n     :target: https://pypi.org/project/mimesis/\n     :alt: PyPi Version\n\n.. image:: https://img.shields.io/badge/python-3.6+-brightgreen.svg\n     :target: https://badge.fury.io/py/mimesis\n     :alt: Python version\n\nMimesis is a high-performance fake data generator for Python, which provides data for a variety of\npurposes in a variety of languages. The fake data could be used to populate a testing database,\ncreate fake API endpoints, create JSON and XML files of arbitrary structure, anonymize data taken\nfrom production and etc.\n\nThe key features are:\n\n- **Performance**: The `fastest <https://mimesis.name/foreword.html#performance>`_ data generator available for Python.\n- **Extensibility**: You can create your own data providers and use them with Mimesis.\n- **Generic data provider**: The `simplified <https://mimesis.name/getting_started.html#generic-provider>`_ access to all the providers from a single object.\n- **Multilingual**: Supports data for `a lot of languages <https://mimesis.name/getting_started.html#locales>`_.\n- **Data variety**: Supports `a lot of data providers <https://mimesis.name/api.html>`_ for a variety of purposes.\n- **Schema-based generators**: Provides an easy mechanism to generate data by the schema of any complexity.\n- **Country-specific data providers**: Provides data specific only for `some countries <https://mimesis.name/api.html#builtin-data-providers>`_.\n\n\nInstallation\n------------\n\n\nTo install mimesis, simply use pip:\n\n.. code:: text\n\n    [venv] ~ ‚ü© pip install mimesis\n\nUsage\n-----\n\nThis library is really easy to use and everything you need is just import an object which\nrepresents a type of data you need (we call such object *Provider*).\n\nIn example below we import provider `Person <https://mimesis.name/api.html#person>`_,\nwhich represents data related to personal information, such as name, surname, email and etc:\n\n.. code:: python\n\n    >>> from mimesis import Person\n    >>> person = Person('en')\n\n    >>> person.full_name()\n    'Brande Sears'\n\n    >>> person.email(domains=['mimesis.name'])\n    'roccelline1878@mimesis.name'\n\n    >>> person.telephone(mask='1-4##-8##-5##3')\n    '1-436-896-5213'\n\n\nMore about the other providers you can read in our `documentation`_.\n\n.. _documentation: https://mimesis.name/getting_started.html#providers\n\n\nLocales\n-------\n\nMimesis currently includes support for 34 different `locales`_. You can\nspecify a locale when creating providers and they will return data that\nis appropriate for the language or country associated with that locale.\n\nLet's take a look how it works:\n\n.. code:: python\n\n    >>> from mimesis import Person\n    >>> from mimesis.enums import Gender\n\n    >>> de = Person('de')\n    >>> en = Person('en')\n\n    >>> de.full_name(gender=Gender.FEMALE)\n    'Sabrina Gutermuth'\n\n    >>> en.full_name(gender=Gender.MALE)\n    'Layne Gallagher'\n\n.. _locales: https://mimesis.name/getting_started.html#locales\n\nProviders\n---------\n\nMimesis support over twenty different data providers available,\nwhich can produce data related to people, food, computer hardware,\ntransportation, addresses, internet and more.\n\nSee `API Reference <https://mimesis.name/api.html>`_ for more info.\n\n\nGenerating structured data\n--------------------------\n\nYou can generate dictionaries which can be easily converted to any\nthe format you want (JSON/XML/YAML etc.)  with any structure you want.\n\nLet's build dummy API endpoint, using Flask to illustrate the idea:\n\n.. code:: python\n     \n     from flask import Flask, jsonify, request\n     from mimesis.schema import Field, Schema\n     from mimesis.enums import Gender\n\n     app = Flask(__name__)\n\n\n     @app.route('/apps', methods=('GET',))\n     def apps_view():\n         locale = request.args.get('locale', default='en', type=str)\n         count = request.args.get('count', default=1, type=int)\n\n         _ = Field(locale)\n\n         schema = Schema(schema=lambda: {\n             'id': _('uuid'),\n             'name': _('text.word'),\n             'version': _('version', pre_release=True),\n             'timestamp': _('timestamp', posix=False),\n             'owner': {\n                 'email': _('person.email', domains=['test.com'], key=str.lower),\n                 'token': _('token_hex'),\n                 'creator': _('full_name', gender=Gender.FEMALE)},\n         })\n         data = schema.create(iterations=count)\n         return jsonify(data)\n\nBelow, on the screenshot, you can see a response from this fake API (``/apps``):\n\n.. image:: https://user-images.githubusercontent.com/15812620/84743283-64e92400-afba-11ea-8252-76e2ea168972.png\n     :target: https://mimesis.name/getting_started.html#schema-and-fields\n     :alt: Schema and Fields\n\nSee `Schema and Fields <https://mimesis.name/getting_started.html#schema-and-fields>`_ for more info.\n\nDocumentation\n-------------\n\nYou can find the complete documentation on the `Read the Docs`_.\n\nIt is divided into several sections:\n\n-  `Foreword`_\n-  `Getting Started`_\n-  `Tips and Tricks`_\n-  `API Reference`_\n-  `Contributing`_\n-  `Changelog`_\n\nYou can improve it by sending pull requests to this repository.\n\n.. _Read the Docs: https://mimesis.name\n.. _Foreword: https://mimesis.name/foreword.html\n.. _Getting Started: https://mimesis.name/getting_started.html\n.. _Tips and Tricks: https://mimesis.name/tips.html\n.. _API Reference: https://mimesis.name/api.html\n.. _Contributing: https://mimesis.name/contributing.html\n.. _Changelog: https://mimesis.name/changelog.html\n\n\nHow to Contribute\n-----------------\n\n1. Take a look at `contributing guidelines`_.\n2. Check for open issues or open a fresh issue to start a discussion\n   around a feature idea or a bug.\n3. Fork the repository on GitHub to start making your changes to the\n   *your_branch* branch.\n4. Add yourself to the list of `contributors`_.\n5. Send a pull request and bug the maintainer until it gets merged and\n   published.\n\n.. _contributing guidelines: https://github.com/lk-geimfari/mimesis/blob/master/CONTRIBUTING.rst\n.. _contributors: https://github.com/lk-geimfari/mimesis/blob/master/CONTRIBUTORS.rst\n\n\nLicense\n-------\n\nMimesis is licensed under the MIT License. See `LICENSE`_ for more\ninformation.\n\n.. _LICENSE: https://github.com/lk-geimfari/mimesis/blob/master/LICENSE",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lk-geimfari/mimesis",
    "keywords": "fake,mock,data,populate,database,testing,generate,mimesis,dummy",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mimesis",
    "package_url": "https://pypi.org/project/mimesis/",
    "platform": "",
    "project_url": "https://pypi.org/project/mimesis/",
    "project_urls": {
      "Homepage": "https://github.com/lk-geimfari/mimesis"
    },
    "release_url": "https://pypi.org/project/mimesis/4.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Mimesis: fake data generator.",
    "version": "4.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16135784,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b487c7cadc308506d5d101f670694c2ad111dbb34e077d135223637e7bfe96b7",
        "md5": "d343d1b216cd3cfe4f3e7e54a7de1e0b",
        "sha256": "0f217774ea46cf486fc1f7cd443279487a1a875e292a147259f00ef54d745c48"
      },
      "downloads": -1,
      "filename": "mimesis-4.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d343d1b216cd3cfe4f3e7e54a7de1e0b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2789944,
      "upload_time": "2020-08-16T10:56:27",
      "upload_time_iso_8601": "2020-08-16T10:56:27.075925Z",
      "url": "https://files.pythonhosted.org/packages/b4/87/c7cadc308506d5d101f670694c2ad111dbb34e077d135223637e7bfe96b7/mimesis-4.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}