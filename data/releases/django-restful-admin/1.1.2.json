{
  "info": {
    "author": "Amir Mohsen Asaran",
    "author_email": "admin@mihanmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "\n\n# Expose Django's admin as a RESTFUL service  \n\n\n - [x] Support all of restful api  \n - [x]  Auto generat serializers  \n - [x] Use [Django Rest Framework](http://www.django-rest-framework.org/)  \n - [x] Fully customization support  \n - [x] Using Django Rest Framework ViewSet as AdminModels\n - [x] Support default Django auth permission\n - [x] Support Django custom model permission with simple configuration\n - [x] Using Django Rest Framework Serializer(or ModelSerializer) as request validators\n - [x] Support Single Serializer class to customize your detail view\n - [x] Auto generate documentation for CURDs\n - [x] Pagination and ability to change paginator\n - [x] Support custom action with permission\n - [x] Support all features in DRF\n - [x] Support LogEntry (Log history of objects)\n\n## Todo\n - [ ] Add some documentation\n - [ ] Add custom route Api documentation\n - [ ] Add list_display\n - [ ] Add Filter And Search\n - [ ] Add exlude\n - [ ] Add Fields\n - [ ] Example inline\n - [ ] Localization\n - [ ] Somethings that's need in future \n\n\n## How To Install  \n\n pip install django-restful-admin  \nadd to `INSTALED_APPS`  \n  ```\n INSTALLED_APPS = [\n      ...  \n     'rest_framework',   \n    'django_restful_admin',    \n     ...  \n ]  \n ```\n## How To use  \nyou need only add the bellow code to  `admin.py` in your apps  \n\n  ```\n from django_restful_admin import admin\n from yourapp.models improt FisrtModel, ScoundModel   \n\nadmin.site.register(FisrtModel)    \nadmin.site.register(ScoundModel)   \n```\n\nThen add URL to your project `urls.py`  \n\n  ```\n from django_restful_admin import admin as api_admin \n    urlpatterns = [    \n        ...   \n        path('apiadmin/', api_admin.site.urls),  \n\t\t ...     \n  ]  \n```\n\nRun the project and open URL `http://your-ip:port/apiadmin/`  \n\nenjoy!  \n\n## Change Log  \n   - [x] export admin in __init__.py\n   - [x] Add default django auth permissions support\n   - [x] Add admin.register decorator\n\n# Customization \n\n### Example\nCreate a new Django project\n```\n$ django-admin startproject example`\n$ cd example\n$ python manage.py startapp blog\n```\n\nCreate blog app models in `blog/models.py`\n```\nfrom django.db import models\n\nclass Category(models.Model)\n\ttitle = models.CharField(  \n\t  max_length=255  \n\t)\n\nclass Post(models.Model):\n\ttitle = models.CharField(  \n\t  max_length=255  \n\t)\n\tsummery = models.TextField()\n\tdescription = models.TextField()\n\tcategory = models.ForeignKey(  \n\t\tCategory,  \n\t\trelated_name='products',  \n\t\ton_delete=models.CASCADE  \n\t)\n```\n\nAdd your blog app in `INSTALLED_APPS` in `example/settings.py`\n\n```\nINSTALLED_APPS = [\n\t\t# Django default apps...\n\t\t'rest_framework',\n\t\t'django_restful_admin',\n\n\t\t'blog'\n]\n```\n\nAdd admin URLs to django URLs in `example/urls.py`\n\n```\nfrom django.conf.urls import url  \nfrom django.contrib import admin  \nfrom django_restful_admin import admin as api_admin  \nfrom django.urls import path  \n\n\nurlpatterns = [  \n  path('apiadmin/', api_admin.site.urls),  # this line added\n  # path('admin/', admin.site.urls),\n  # your apis custom must be set here  \n]\n```\n\nRegister your model to restful admin site in `blog/admin.py`\n\n```\nfrom django_restful_admin import admin as api_admin  \nfrom blog.models import *    \n\napi_admin.site.register(Post) \napi_admin.site.register(Category) \n```\n\nAdd View and use decorators `blog/admin.py`\n```\n...\n@api_admin.register(Category, Product)  \nclass MyCustomApiAdmin(BaseRestFulModelAdmin):  \n    authentication_classes = (CustomTokenAuthentication,)\n\tpermission_classes = [IsAuthenticated] \n... \n```\nRead more about authentication and permission DRF [Documentation](https://www.django-rest-framework.org/api-guide/authentication/#authentication).\n\n## Customize serialization\nAt first, you must define your serializer class \nMake `serializers.py` file in `blog`\nOpen `blog/serializers.py` and make serializer like this:\n\n```\nfrom rest_framework import serializers\nfrom .models import *\nclass ProductSerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Product\n\t\tfeilds = ('id', 'title')\nclass CategorySerializer(serializers.ModelSerializer):\n\tclass Meta:\n\t\tmodel = Category\n\t\tfields = ('id','title)\n\nclass SingleProductSerializer(serializers.ModelSerializer):\n\tcategory = CategorySerializer(read_only=True)\n\tclass Meta:\n\t\tmodel = Product\n\t\tfeilds = ('id', 'title', 'summery', 'description', 'category')\n```\n```\nfrom .serializers import ProductSerializer, SingleProductSerializer\n@api_admin.register(Product)  \nclass ProductApiAdmin(BaseRestFulModelAdmin):  \n    serializer_class = ProductSerializer\n    single_serializer_class = SingleProductSerializer\n```\n`serializer_class` use for serialize list of objects but  `single_serializer_class` use for serializer **view signle object**, **update**, **partial update** and **create**.\n\n## Add a custom route with permission\n```\n@api_admin.register(Product)  \nclass MyCustomApiAdmin(BaseRestFulModelAdmin):\n\n\t@api_admin.action(permission='product.view_product', detail=True, methods=['GET'], url_path=r'my-custom-action/(?P<another_key>[^/.]+)')  \n\tdef my_custom_action(self, request, pk, another_key):\n\t\tpass\n\t\t## Do what you want to do\n\t\t## this action make url like this /apiadmin/blog/product/2/my-custom-action/XXX\n```\nIf you want to except permission you just send permission=True, for creating custom permission you can pass **closure function** or **lambda** to permission like this `permission=lambda: view, action, request, obj=None: True`\n\n# Contribute  \nIf you think you can help me please let's start.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/amirasaran/django-restful-admin",
    "keywords": "django restful admin",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-restful-admin",
    "package_url": "https://pypi.org/project/django-restful-admin/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-restful-admin/",
    "project_urls": {
      "Homepage": "https://github.com/amirasaran/django-restful-admin"
    },
    "release_url": "https://pypi.org/project/django-restful-admin/1.1.2/",
    "requires_dist": [
      "django (>=2.0.0)",
      "djangorestframework (>=3.0.0)"
    ],
    "requires_python": "",
    "summary": "Python Django RestFul Admin",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8256497,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dde9ca9fecf68d5c54d4b11758a4f9fd4f54abfeb00464cb6e74102c5652a871",
        "md5": "6b77e93ab8daa8995aef72975beb293d",
        "sha256": "9fa700245df3ee86780600d4e989f93043339ed1a06f023ad1f3e7164f325488"
      },
      "downloads": -1,
      "filename": "django_restful_admin-1.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6b77e93ab8daa8995aef72975beb293d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 11147,
      "upload_time": "2020-09-23T20:09:09",
      "upload_time_iso_8601": "2020-09-23T20:09:09.191897Z",
      "url": "https://files.pythonhosted.org/packages/dd/e9/ca9fecf68d5c54d4b11758a4f9fd4f54abfeb00464cb6e74102c5652a871/django_restful_admin-1.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85fac416faa4c36579201f57e3431b54dfd8483858fdbc12842fe253e2ab35de",
        "md5": "f6ce8827a5775ee36038daf9c858c924",
        "sha256": "365f4c2e4b7d28ae39c4b4212c82e7066589445ecebb6154fcce351747d886bc"
      },
      "downloads": -1,
      "filename": "django-restful-admin-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f6ce8827a5775ee36038daf9c858c924",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9469,
      "upload_time": "2020-09-23T20:09:13",
      "upload_time_iso_8601": "2020-09-23T20:09:13.282778Z",
      "url": "https://files.pythonhosted.org/packages/85/fa/c416faa4c36579201f57e3431b54dfd8483858fdbc12842fe253e2ab35de/django-restful-admin-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}