{
  "info": {
    "author": "Nikhil Narayana",
    "author_email": "nikhil.narayana@live.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Melee-YouTube-Uploader\nA YouTube Uploader for my Melee recordings\n\nA modified version of FRC-YouTube-Uploader for Super Smash Bros. Melee and Super Smash Bros. Ultimate.\n\n**IMPORTANT NOTE**\n\nThis application **DOES NOT** support enabling monetization at the moment. I highly suggest you upload videos as unlisted and set monetization settings before making them public or monitor your uploads and update monetization settings as they are uploaded (you can adjust the settings while the files are being uploaded without breaking anything). If you see the YouTube ContentID API in your Google Developer Console and are willing to help me test updates to fix the issue DM me on twitter at @xMetonym.\n\n## To Do\n* Automate creation of thumbnails\n* Automate file picking\n* Update this README even more\n\n## Contributing\nPRs are appreciated and will be reviewed quickly, the only code quality standard I have is to follow PEP8 standard except for the line length. If you have trouble understanding my code just ask me.\n\n## Questions and Support\nI am always open to help setup the program or fix any techincal issues you may have. Please send me a DM on twitter with your issue and I'll get you sorted out.\n\n## Current Feature Set:\n* Upload videos\n* Queue and dequeue Videos to upload\n* Adds a lot of relevant tags\n* Adds to a YouTube playlist\n* Saves and loads form values\n* Loading values from history\n* Melee and Ultimate Character List\n* Websocket hook into Scoreboard Assistant to update player names\n\n## How to Setup\n1. Install [Python 3.7.1](https://www.python.org/downloads/release/python-371/) for your OS with the PATH added and make sure there are no other versions of Python 3.\n2. Install the program with `pip3 install -U meleeuploader`. If you want untested features you can download the repo and install with `pip3 install -U /path/to/repo`\n3. Start the program by running `meleeuploader` for the Melee character list or `smashuploader` for the Ultimate character list in terminal.\n4. Add in the necessary info in the Event Values and Match Values tabs\n5. Hit submit when the match finishes.\n6. Update forms with the next match's info.\n7. Repeat steps 4-6 and enjoy not having to deal with YouTube's front end ðŸŽ‰.\n\n### Create Your Own Credentials\nIn the future I will not be including YouTube API credentials with this project. So here is a guide to create your own credentials.\n\n1. Open the [Google Developer Console](https://console.developers.google.com/)\n2. Hit the `Select Project` button near the top and create a new project.\n3. Once the project is created, select the project.\n4. Hit the `Enable APIs and Services` button and enable the YouTube Data API V3.\n5. Once the API is enabled it will tell you to create credentials and there will be a button to press.\n6. Follow the steps laid out in the credential creation wizard and make sure to select `Other UI` for `Where will you be calling the API from?` and `User Data` for `What data will you be accessing?`.\n7. Once you have downloaded your credentails remember to rename them `client_secrets.json` (if you don't see the `.json` when renaming the file just use `client_secrets`) and put the file in `C:\\Users\\[Your Username]\\` or, if you are on macOS or Unix, whatever `echo ~` returns in terminal. macOS users can also just do `open ~` to open a Finder window at that directory.\n8. If you already created YouTube Account credentials for the program, open the program and select `Settings -> Remove YouTube Credentials`\n\n### Additional Setup Options\n#### Windows\nIf you want to launch the application easily, you can find the exe by hitting the Windows key and typing `meleeuploader`, if that doesn't show the option to run the command then you can probably find the exe at `C:\\Users\\[Your Username]\\AppData\\Local\\Programs\\Python\\Python37\\Scripts\\`. Pinning the exe to the taskbar allows quick access to the program.\n\n#### Mac and Unix\n`meleeuploader &` if you want to hide the terminal window. There are probably ways to launch the program quicker, but I don't use macOS/Unix for uploading usually.\n\n## How to use fields\n### Required\n`Event Name`, `File`, `Video Privacy`, `Match Type`, and `Player Tags` are the only required fields for uploading any file.\n\n#### File\nFile is able to be used as either a file or directory input. Because of how the input selector is setup you will need to select a file within the directory you wish to use and then you can delete the filename from the field. If you select a directory it will not be deleted after submission.\n\n### Optional\n#### Match Type Prefix and Suffix\nThese are fairly self explanatory, you can add a bit of text before and after the `Match Type`. When submitting the video the `Prefix` is kept while the `Suffix` is cleared.\n\n#### Sponsor Tag\nThis field will be added to the player tag like so `{sponsor} | {player}` resulting in names like `TSM | Leffen`.\n\n#### Characters\nMelee characters are currently ordered by tier list placing, according to the 2015 official NTSC tier list.  \nUltimate characters are currently ordered by the default character select screen without echo stacking.  \nIf you don't add any characters for either player, both players will not have characters in the title.  \nCharacters that are selected will be in the order they are shown in the list, not the selected order (unfortunate issue with the GUI framework).  \nYou can swap the character list using the menu bar or load the preferred character list by using `meleeuploader` for Melee and `smashuploader` for Ultimate.\n\n#### YouTube PlaylistID\nThe URL of the playlist after creation can be put here, the program will trim it to just the part it needs. The URL should look like `https://www.youtube.com/playlist?list=PLSCJwgNAP2cXdlHlwbZr38JDHuuc8vx_s`, if the address has a string with `PL` at the start, it should work.\n\n#### Bracket Link\nAny URL will work here, just make sure to include `https://` so YouTube users can click on the link in the description.\n\n#### Tags\nIf you want to add additional tags, for a specific event or your channel, add them here. Separate the tags with commas and don't worry about leading or trailing spaces.  \nAlso multiple tags about Melee and the players are added by the program so don't add any related to those in this field.\n\n#### Description\nAdditional text can be added to the description here, it will go between the bracket link and the credit text.\n\n#### Submit\nThe submit button does a lot, it adds submission to queue, clears fields in match values that aren't generally needed for consecutive matches, and prevents you from adding submissions that don't meet the minimum criteria.\n\n## How to use advanced features\n\n### History - Fixing an upload that didn't work\nHistory was built so I could fix uploads that exceeded the title limit on YouTube (100 characters). \n\nBy loading the history window from the menubar, you can double click any row in the list to reload the form with the values you inputted for that submission. Every submission will create a new entry, but the history window is only updated on load, you will need to close and reopen it to see new entries.\n\n### Queue - Saving uploads for later\nQueue was built so I could upload VODs after an event because the venue didn't have the bandwidth to support streaming and uploading simultaneously. \n\nQueue refers to the list of upcoming uploads in the status tab. By selecting `Toggle Uploads` you can toggle the uploading function, but continue to add entries to the queue. Once you have finished adding all the VODs you want to upload, selecting `Save Queue` will write the entire queue to your disk to be loaded later on. Finally, using `Load Queue` will load the entire queue file and start uploading immediately.\n\n### Scoreboard Assistant Websocket\nSA Websocket was built so I could avoid retyping information that I put into Scoreboard Assistant.\n\nTo enable the websocket open the `Settings` menu tab and select the `Enable Websocket` option. Just make sure that SA is open before you start the websocket.\n\nThe websocket will pull from the `Player 1`, `Player 2`, and `Match` fields. The match type will be parsed to find a similar option in the ones given, but will otherwise leave it as is.\n\n### OBS Websocket\nThis is a peculiar feature that I built with only myself in mind. There are no plans to expand what I've set it up to do.\n\nI've set it up so once recording has been stopped, the application will submit the information that is currently inputted. This combined with `SA Websocket` is a powerful feature set to quickly queue sets. The only info the user will have to",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NikhilNarayana/Melee-YouTube-Uploader",
    "keywords": "smash melee youtube uploader",
    "license": "GNU Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MeleeUploader",
    "package_url": "https://pypi.org/project/MeleeUploader/",
    "platform": "",
    "project_url": "https://pypi.org/project/MeleeUploader/",
    "project_urls": {
      "Homepage": "https://github.com/NikhilNarayana/Melee-YouTube-Uploader"
    },
    "release_url": "https://pypi.org/project/MeleeUploader/1.6.4/",
    "requires_dist": null,
    "requires_python": "~=3.6",
    "summary": "A YouTube Uploader with Super Smash Bros. in mind",
    "version": "1.6.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024023,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a96f2a96180af4b72d4c76fa14bdb71061e449015940ad01be222824e2520d44",
        "md5": "13d3103aa42c569cd0e7b85ec168a9e8",
        "sha256": "611082fc09fe5bbd7d3e9afe5c71f88306106d64a9c278f39513b4eaf133d17e"
      },
      "downloads": -1,
      "filename": "MeleeUploader-1.6.4.tar.gz",
      "has_sig": false,
      "md5_digest": "13d3103aa42c569cd0e7b85ec168a9e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 13662,
      "upload_time": "2019-01-01T08:03:52",
      "upload_time_iso_8601": "2019-01-01T08:03:52.156430Z",
      "url": "https://files.pythonhosted.org/packages/a9/6f/2a96180af4b72d4c76fa14bdb71061e449015940ad01be222824e2520d44/MeleeUploader-1.6.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}