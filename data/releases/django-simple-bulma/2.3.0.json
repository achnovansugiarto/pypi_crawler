{
  "info": {
    "author": "Python Discord",
    "author_email": "staff@pythondiscord.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-simple-bulma\n===================\n`django-simple-bulma` is a Django application that makes [Bulma](https://bulma.io)\nand [Bulma-Extensions](https://wikiki.github.io/) available to use in your Django project with as little setup as\npossible. The goal of this project is to make it as easy as possible to use Bulma with Django.\n\nThis project currently uses **Bulma v0.9.2**, and is automatically updated with every new release. If a new version has\ncome out with features you'd like to make use of,\nplease [create an issue](https://github.com/python-discord/django-simple-bulma/issues), and we will be happy to make a\nrelease to update it.\n\nInstallation\n------------\nTo get `django-simple-bulma`, up and running for your Django project, follow these simple steps:\n\n- Install it from PyPI with `pip install django-simple-bulma` (or add it to\n  your [Pipfile](https://pipenv.readthedocs.io/en/latest/))\n- In your Django projects `settings.py` file:\n  - Add `django_simple_bulma` to your `INSTALLED_APPS`\n    ```python\n    INSTALLED_APPS = [\n      # ...\n      'django_simple_bulma',\n      # ...\n    ]\n    ```\n  - Add `django_simple_bulma.finders.SimpleBulmaFinder` to your `STATICFILES_FINDERS`. This normally holds two default\n    handlers that you will probably want to keep, so unless you have any other custom Finders, it should look like this:\n    ```python\n    STATICFILES_FINDERS = [\n      # First add the two default Finders, since this will overwrite the default.\n      'django.contrib.staticfiles.finders.FileSystemFinder',\n      'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n\n      # Now add our custom SimpleBulma one.\n      'django_simple_bulma.finders.SimpleBulmaFinder',\n    ]\n    ```\n- Run `python manage.py collectstatic` command in order to build Bulma and move it to your `staticfiles` folder. Please\n  note that you will need to use this command every time you make a change to the configuration, as this is the only way\n  to rebuild the Bulma css file. If you are not using `collectstatic`\n  , [read up on it](https://stackoverflow.com/questions/34586114/whats-the-point-of-djangos-collectstatic)\n  and [start using it](https://docs.djangoproject.com/en/2.1/ref/contrib/staticfiles/).\n\n  This app works fine with [Whitenoise](http://whitenoise.evans.io/en/stable/), which is a great way to serve static\n  files without needing to mess with your webserver.\n\n`django-simple-bulma` should now be working! In order to import it into your template, first load the app\nwith `{% load django_simple_bulma %}`, and then use the `{% bulma %}` template tag. If you're planning on using icons,\nyou might also want to import FontAwesome by using `{% font_awesome %}`.\n\n  ```html\n<head>\n  <!-- ... -->\n  {% load django_simple_bulma %}\n  {% bulma %}\n  {% font_awesome %}\n  <!-- ... -->\n</head>\n  ```\n\n- You're all set! Any Bulma classes you apply should now be working!\n\nCustomization\n-------------\nBulma looks nice by default, but most users will want to customize its look and feel. For this, we've provided a super\nsimple way to change the [Bulma variables](https://bulma.io/documentation/customize/variables/) and to choose\nwhich [Bulma extensions](https://wikiki.github.io/) you want to load into your project.\n\nIn order to do this, we'll simply create a dictionary inside your `settings.py` called `BULMA_SETTINGS`, and configure\nit there. Here's an example of what that looks like:\n\n```python\n# Custom settings for django-simple-bulma\nBULMA_SETTINGS = {\n  \"extensions\": [\n    \"bulma-collapsible\",\n    \"bulma-calendar\",\n  ],\n  \"variables\": {\n    \"primary\": \"#000000\",\n    \"size-1\": \"6rem\",\n  },\n  \"alt_variables\": {\n    \"primary\": \"#fff\",\n    \"scheme-main\": \"#000\",\n  },\n  \"output_style\": \"compressed\",\n  \"fontawesome_token\": \"e761a01be3\",\n}\n```\n\nYou may here define any variable found on the [Bulma variables](https://bulma.io/documentation/customize/variables/)\npage, and you may use any valid SASS or CSS as the value. For example, `hsl(217, 71%, 53%)` would be a valid value for a\ncolor variable, as would `#ffff00`. Please note that any syntactically incorrect values may prevent Bulma from building\ncorrectly, so be careful what you add here unless you know exactly what you're doing.\n\n#### Multiple themes\n\nIf you want multiple different configurations of variables, then you should define them as separate themes. Define a new\ntheme by providing a key that matches the regex `\\w+_variables` (e.g. `alt_variables` or `dark_variables`), unique\nstylesheets will then be generated using the variables at that key.\n\nTo use these stylesheets in a template, pass the theme name to the `{% bulma %}` tag either as a\nstring `{% bulma 'alt' %}` or as a template variable `{% bulma theme %}`.\n\n#### Extensions\n\nIf the `extensions` key is not found, it will default to not loading any extensions. If you want all extensions, simply\nset it to the string `\"all\"`.\n\nWe currently support these extensions:\n\n- bulma-badge\n- bulma-calendar\n- bulma-carousel\n- bulma-collapsible\n- bulma-checkradio\n- bulma-divider\n- bulma-megamenu\n- bulma-pageloader\n- bulma-pricingtable\n- bulma-quickview\n- bulma-ribbon\n- bulma-slider\n- bulma-steps\n- bulma-switch\n- bulma-tagsinput\n- bulma-timeline\n- bulma-tooltip\n- bulma-coolcheckboxes (Cool-Checkboxes-for-Bulma.io)\n\nIf an extension you want to use is missing, feel free\nto [create an issue](https://github.com/python-discord/django-simple-bulma/issues) and we will be happy to add it.\nAlternatively, add it yourself and create a pull request (\nsee [this pr](https://github.com/python-discord/django-simple-bulma/pull/55) for some context on how to go about doing\nthat).\n\n#### CSS style\n\nThe `output_style` parameter determines the style of the resulting CSS file. It can be any of `\"nested\"` (default)\n, `\"expanded\"`, `\"compact\"`, and `\"compressed\"`. It is recommended to use `\"compressed\"` in production as to reduce the\nfinal file size.\n\n#### FontAwesome\n\nThe optional `fontawesome_token` parameter allows you to specify your personal FontAwesome kit, which is necessary for\nFontAwesome v6 and up. This should be set to the identifier part of your FontAwesome kit script src parameter. For\nexample, if your FontAwesome kit looks like this:\n\n```html\n<script src=\"https://kit.fontawesome.com/e761a01be3.js\" crossorigin=\"anonymous\"></script>\n```\n\nThen your `fontawesome_token` should be **e761a01be3**.\n\nThis is used by the `{% font_awesome %}` template tag to set up FontAwesome for you. If you don't specify\na `fontawesome_token`, **the template tag will still work**, but will then use an older version of FontAwesome (v5.14.0)\n.\n\nAdditional scripts\n------------------\nFor your convenience, we also give you the option to add other quality of life improvements to your Bulma app. You may\nwant to add these as well if they sound useful to you.\n\n* `bulma-fileupload` will handle displaying the filename in\n  your [file upload inputs](https://bulma.io/documentation/form/file/).\n* `bulma-navbar-burger` will hook up your `navbar-burger`s and `navbar-menu`s automatically, to provide a toggle for\n  mobile users. We use a slightly updated version\n  of [the example from Bulma's documentation](https://bulma.io/documentation/components/navbar/#navbarJsExample) -\n  simply add a `data-target` attribute to your `navbar-burger` that refers to the `id` of the `navbar-menu` that should\n  be expanded and collapsed by the button.\n* `bulma-notifications` will allow you to close [notifications](https://bulma.io/documentation/elements/notification/)\n  by clicking on the X button.\n* `bulma-dropdown` will open/close dropdowns using the `is-active` class. It mimics how the dropdowns function on\n  the [documentation page](https://bulma.io/documentation/components/dropdown/#hoverable-or-toggable).\n* `bulma-modal` will handle opening and closing modals. Just assign the `modal-button` class to a `<button>`, and make\n  sure it has a `data-target` attribute that matches the `id` of the modal that you want to open.\n  See [the example code from Bulma's documentation](https://bulma.io/documentation/components/modal/) for modal element\n  code.\n\nCompiling custom SCSS\n------------------------\n\nIf you're writing custom SCSS for your application, `django-simple-bulma` provides a mechanism for compiling it for you.\nThis is provided mainly because `django-simple-bulma` may cause conflicts and issues with other tools to compile SCSS\nfor you.\n\nTo use this feature, please specify the `custom_css` key when defining your `BULMA_SETTINGS`. This should be a list of\nstrings, containing _relative paths_ to `.scss` files to be compiled.\n\n```python\nBULMA_SETTINGS = {\n  \"custom_scss\": [\n    \"css/base/base.scss\",                  # This is okay\n    \"my_app/static/css/base/base.scss\",    # This also is okay\n    \"C:\\Users\\MainDawg\\my_app\\static\\...\"  # Don't do this, though.\n  ],\n}\n```\n\nThe default Django behavior when collecting static files is to keep the containing file structure for them when they're\ncopied over to the final staticfiles directory. We do the same thing, so all directories and subdirectories will still\nbe intact in your staticfiles folder after they've been collected.\n\nHere's the strategy the finder uses:\n\n* If your path contains `static/`, assume that the base path ends there and use the rest of the path as a relative path\n  to the resource.\n* Use whatever Finders you have enabled in your `settings.py` to search for the file using that relative path.\n* If the path is found using one of these Finders, compile it to css and collect it.\n* Otherwise, raise a `ValueException` asking you to double-check the filepath.\n\nTroubleshooting\n---------------\n\n- If you have the module `sass` installed, please note that it is incompatible with this project. There is a namespace\n  conflict between `sass` and `libsass` which will make `django-simple-bulma` crash when you attempt to do\n  a `collectstatic`. To solve this, just uninstall `sass` and use `libsass` instead.\n\nIf you run into any other problems with this app,\nplease [create an issue](https://github.com/python-discord/django-simple-bulma/issues), and I'll will be happy to help\nyou with it. You can also find me at at https://discord.gg/python as `lemon#0001`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-discord/django-simple-bulma",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-simple-bulma",
    "package_url": "https://pypi.org/project/django-simple-bulma/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-simple-bulma/",
    "project_urls": {
      "Homepage": "https://github.com/python-discord/django-simple-bulma"
    },
    "release_url": "https://pypi.org/project/django-simple-bulma/2.3.0/",
    "requires_dist": [
      "Django (>=2.0)",
      "libsass (~=0.19)",
      "flake8 (~=3.8) ; extra == 'dev'",
      "flake8-annotations (~=2.0) ; extra == 'dev'",
      "flake8-bugbear (~=20.1) ; extra == 'dev'",
      "flake8-docstrings (~=1.4) ; extra == 'dev'",
      "flake8-import-order (~=0.18) ; extra == 'dev'",
      "flake8-tidy-imports (~=4.0) ; extra == 'dev'",
      "flake8-todo (~=0.7) ; extra == 'dev'",
      "flake8-string-format (~=0.3) ; extra == 'dev'",
      "pdoc (~=0.3) ; extra == 'dev'",
      "pep8-naming (~=0.9) ; extra == 'dev'",
      "pre-commit (~=2.1) ; extra == 'dev'",
      "PyGithub (~=1.43) ; extra == 'dev'",
      "wheel (~=0.33) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Django application to add the Bulma CSS framework and its extensions",
    "version": "2.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12820070,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfad32ec2c0c877224a725805166f955051e92f97e1cbd1df4a699935fc24d66",
        "md5": "10f54f915557165ba5f3db197eb232b6",
        "sha256": "a6fdc26627679f77cd73acb2635ed0418ee4011a92d02a0c624c47234005d4fb"
      },
      "downloads": -1,
      "filename": "django_simple_bulma-2.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "10f54f915557165ba5f3db197eb232b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 369784,
      "upload_time": "2021-05-28T13:33:31",
      "upload_time_iso_8601": "2021-05-28T13:33:31.749350Z",
      "url": "https://files.pythonhosted.org/packages/bf/ad/32ec2c0c877224a725805166f955051e92f97e1cbd1df4a699935fc24d66/django_simple_bulma-2.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff7b0c65dc4cbccde2ad4cc9bd9a739c0996e728c05fe40b3d69a552c8a3d4e6",
        "md5": "32365e6556633be735d6ef267a5d2f6c",
        "sha256": "d40496812c9b8c05a994a0f3b8084bc6e0e3e2cab27dec69947e580489ed037d"
      },
      "downloads": -1,
      "filename": "django-simple-bulma-2.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "32365e6556633be735d6ef267a5d2f6c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 311614,
      "upload_time": "2021-05-28T13:33:33",
      "upload_time_iso_8601": "2021-05-28T13:33:33.297842Z",
      "url": "https://files.pythonhosted.org/packages/ff/7b/0c65dc4cbccde2ad4cc9bd9a739c0996e728c05fe40b3d69a552c8a3d4e6/django-simple-bulma-2.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}