{
  "info": {
    "author": "Norman Moeschter-Schenck",
    "author_email": "norman.moeschter@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python"
    ],
    "description": "[![GitHub Release](https://img.shields.io/github/v/release/normoes/monero_health.svg)](https://github.com/normoes/monero_health/releases)\n[![GitHub Tags](https://img.shields.io/github/v/tag/normoes/monero_health.svg)](https://github.com/normoes/monero_health/tags)\n\n# Monero health\n\nMonero health is supposed to provide information about the Monero daemon health.\n\nThere are 3 health checks at the moment:\n* Checking the Monero daemon RPC status using the `hard_fork_info` RPC.\n* Checking the Monero daemon P2P status (checks the given P2P port).\n* Checking the age of the last block on the daemon using a pre-configured offset.\n\n**_Note_**:\n\nThe Monero daemon RPC information are retrieved using the Monero daemon JSON RPC.\nThe RPC connection is established using [`python-monerorpc`](https://github.com/monero-ecosystem/python-monerorpc).\n\n## Configuration\n\n### Monero daemon RPC connection\nThe connection to the Monero daemon RPC can be configured using environment variables:\n\n| environment variable | default value |\n|----------------------|---------------|\n| `MONEROD_URL` | `\"127.0.0.1\"` |\n| `MONEROD_RPC_PORT` | `18081` |\n| `MONEROD_P2P_PORT` | `18080` |\n| `MONEROD_RPC_USER` | `\"\"` |\n| `MONEROD_RPC_PASSWORD` | `\"\"` |\n\n**_Note_**:\n\nThe RPC connection is established using [`python-monerorpc`](https://github.com/monero-ecosystem/python-monerorpc).\n\n### Last block age\n```\nfrom monero_health.monero_health import daemon_last_block_check\n```\n\nThe last block's timestamp is checked against a given pre-configured offset:\n\n| environment variable | default value |\n|----------------------|---------------|\n| `OFFSET` | `12` |\n| `OFFSET_UNIT` | `\"minutes\"` |\n\nI.e that the last block is considered out-of-date as soon as it becomes older than - in the default case - `12 [minutes]`.\n\nThe Monero RPC method used is:\n* `get_last_block_header`\n\n### Daemon RPC status\n```\nfrom monero_health.mmonero_health import daemon_rpc_status_check\n```\n\nNo additional configuration needed.\n\nThe Monero RPC method used is:\n* `hard_fork_info`\n\n### Daemon P2P status\n```\nfrom monero_health.mmonero_health import daemon_p2p_status_check\n```\n\nNo additional configuration is needed.\n\nA socket connection is established, which checks the connectivity to the P2P port.\n\n## Results\n\n### JSON response\nThis module is not really supposed to be run as a script, rather as a module.\n\nHowever, it is possible to directly run it as a script. it will then output the complete information. The following only shows part of it, sepcifically the result of the method `daemon_combined_status_check`:\n```python\n    MONEROD_URL=mainnet.community.xmr.to python -m monero_health.monero_health\n    ...\n    {\n        \"last_block\": {\n            \"hash\": \"2931d04a73c4e286d1e568a0e61ba37fdf175ff6974d343ca136c62ecaaeeee4\",\n            \"block_age\": \"0:01:57\",\n            \"block_timestamp\": \"2020-09-23T19:40:02\",\n            \"check_timestamp\": \"2020-09-23T19:41:59\",\n            \"status\": \"OK\",\n            \"block_recent\": true,\n            \"block_recent_offset\": 12,\n            \"block_recent_offset_unit\": \"minutes\",\n            \"host\": \"mainnet.community.xmr.to:18081\"\n        },\n        \"monerod\": {\n            \"rpc\": {\n                \"status\": \"OK\",\n                \"host\": \"mainnet.community.xmr.to:18081\"\n            },\n            \"p2p\": {\n                \"status\": \"OK\",\n                \"host\": \"mainnet.community.xmr.to:18080\"\n            },\n            \"status\": \"OK\",\n            \"host\": \"mainnet.community.xmr.to\",\n            \"version\": 12\n        },\n        \"status\": \"OK\",\n        \"host\": \"mainnet.community.xmr.to\"\n    }\n```\n\nWhen imported as a module the functions can be imported/called separately, like this:\n* Last block age:\n```python\n    from monero_health.mmonero_health import (\n        daemon_last_block_check,\n    )\n    ...\n    result = daemon_last_block_check()\n    ...\n```\n* Monero daemaon status:\n```python\n    from monero_health.mmonero_health import (\n        daemon_status_check,\n    )\n    ...\n    result = daemon_status_check()\n    ...\n```\n* Combined daemon status:\n```python\n    from monero_health.mmonero_health import (\n        daemon_combined_status_check,\n    )\n    ...\n    result = daemon_combined_status_check()\n    ...\n```\n\n### Possible status values\n\nThe `status` returned can have the following values:\n* `OK`\n  - For a last block that **is not** considered old: (`daemon_last_block_check`)\n  - For a daemon with status `OK`: (`daemon_rpc_status_check`, `daemon_p2p_status_check`, `daemon_stati_check`)\n  - Every possible status is `OK`: (`daemon_combined_status_check`)\n* `ERROR`\n  - For a last block that **is** considered old: (`daemon_last_block_check`)\n  - For a daemon with status `ERROR`: (`daemon_rpc_status_check`, `daemon_p2p_status_check`, `daemon_stati_check`)\n  - At least one possible status is `ERROR`: (`daemon_combined_status_check`)\n* `UNKNOWN`\n  - In case of a connection error not initiated by the peer (mostly related to HTTP requests): (`daemon_last_block_check`, `daemon_rpc_status_check`, `daemon_p2p_status_check`, `daemon_stati_check`)\n  - At least one possible status is `UNKNOWN`: (`daemon_combined_status_check`)\n\n### Errors\n\nIn case of an error, an `error` key is added to the responses of:\n* `daemon_last_block_check`\n* `daemon_rpc_status_check`, `daemon_p2p_status_check`, `daemon_stati_check`\nbut not to `daemon_combined_status_check`.\n\nThis error key always contains the keys:\n* `error`\n* `message`\n\nExample - No Monero daemon running at `127.0.0.1:18081`:\n```\n{\n    \"hash\": \"---\",\n    \"block_age\": -1,\n    \"block_timestamp\": \"---\",\n    \"check_timestamp\": \"2020-09-24T11:52:30\",\n    \"status\": \"UNKNOWN\",\n    \"block_recent\": false,\n    \"block_recent_offset\": 12,\n    \"block_recent_offset_unit\": \"minutes\",\n    \"host\": \"mainnet.community.xmr:18081\",\n    \"error\": {\n        \"message\": \"Cannot determine status.\",\n        \"error\": \"-341: Could not establish a connection, original error: 'HTTPConnectionPool(host='mainnet.community.xmr', port=18081): Max retries exceeded with url: /json_rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f0f3bb5b150>: Failed to establish a new connection: [Errno -5] No address associated with hostname'))'.\"\n    }\n}\n```\n\n## Full example\n\nWhen run as a script (against the XMR.to public node `node.xmr.to`):\n```\nMONEROD_URL=mainnet.community.xmr.to python -m monero_health.monero_health\n```\n\nAll health and status checks are run one after another against `mainnet.community.xmr.to`:\n* Last block (last block's timestamp).\n* Daemon RPC status (port `18081`, RPC method `hard_fork_info`).\n* Daemon P2P status (port `18080`).\n* Both dameon stati (combined `status` key).\n* Run all checks **but do not consider** the daemon P2P status in the resulting `status` key (dameon P2P result is still returned).\n* Run all checks **and consider** the daemon P2P status in the resulting `status` key.\n\nThe result will look like this:\n```\n----Last block check----:\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18081'.\n{\"hash\": \"441380be4c9f10e6ceaec1daeab716cfffab22a8c2adbf765d00fc8d34effe23\", \"block_age\": \"0:01:13\", \"block_timestamp\": \"2020-09-23T19:50:11\", \"check_timestamp\": \"2020-09-23T19:51:24\", \"status\": \"OK\", \"block_recent\": true, \"block_recent_offset\": 12, \"block_recent_offset_unit\": \"minutes\", \"host\": \"mainnet.community.xmr.to:18081\"}\n----Daemon rpc check----\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18081'.\n{\"status\": \"OK\", \"version\": 12, \"host\": \"mainnet.community.xmr.to:18081\"}\n----Daemon p2p check----\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18080'.\nINFO:monero_scripts.connect_to_node:Trying to connect to 'mainnet.community.xmr.to:18080'.\nINFO:monero_scripts.connect_to_node:Successfully connected to 'mainnet.community.xmr.to:18080'.\n{\"status\": \"OK\", \"host\": \"mainnet.community.xmr.to:18080\"}\n----Daemon stati check, not considering P2P status----\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18081'.\nINFO:DaemonHealth:{\"message\": \"Combined daemon status (RPC, P2P) is 'OK'.\"}\n{\"rpc\": {\"status\": \"OK\", \"host\": \"mainnet.community.xmr.to:18081\"}, \"status\": \"OK\", \"host\": \"mainnet.community.xmr.to\", \"version\": 12}\n----Daemon stati check, also considering P2P status----\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18081'.\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18080'.\nINFO:monero_scripts.connect_to_node:Trying to connect to 'mainnet.community.xmr.to:18080'.\nINFO:monero_scripts.connect_to_node:Successfully connected to 'mainnet.community.xmr.to:18080'.\nINFO:DaemonHealth:{\"message\": \"Combined daemon status (RPC, P2P) is 'OK'.\"}\n{\"rpc\": {\"status\": \"OK\", \"host\": \"mainnet.community.xmr.to:18081\"}, \"p2p\": {\"status\": \"OK\", \"host\": \"mainnet.community.xmr.to:18080\"}, \"status\": \"OK\", \"host\": \"mainnet.community.xmr.to\", \"version\": 12}\n----Overall check, not considering P2P status----\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18081'.\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18081'.\nINFO:DaemonHealth:{\"message\": \"Combined daemon status (RPC, P2P) is 'OK'.\"}\nINFO:DaemonHealth:{\"message\": \"Combined status is 'OK'.\"}\n{\"last_block\": {\"hash\": \"441380be4c9f10e6ceaec1daeab716cfffab22a8c2adbf765d00fc8d34effe23\", \"block_age\": \"0:01:20\", \"block_timestamp\": \"2020-09-23T19:50:11\", \"check_timestamp\": \"2020-09-23T19:51:31\", \"status\": \"OK\", \"block_recent\": true, \"block_recent_offset\": 12, \"block_recent_offset_unit\": \"minutes\", \"host\": \"mainnet.community.xmr.to:18081\"}, \"monerod\": {\"rpc\": {\"status\": \"OK\", \"host\": \"mainnet.community.xmr.to:18081\"}, \"status\": \"OK\", \"host\": \"mainnet.community.xmr.to\", \"version\": 12}, \"status\": \"OK\", \"host\": \"mainnet.community.xmr.to\"}\n----Overall check, also considering P2P status----\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18081'.\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18081'.\nINFO:DaemonHealth:Checking 'mainnet.community.xmr.to:18080'.\nINFO:monero_scripts.connect_to_node:Trying to connect to 'mainnet.community.xmr.to:18080'.\nINFO:monero_scripts.connect_to_node:Successfully connected to 'mainnet.community.xmr.to:18080'.\nINFO:DaemonHealth:{\"message\": \"Combined daemon status (RPC, P2P) is 'OK'.\"}\nINFO:DaemonHealth:{\"message\": \"Combined status is 'OK'.\"}\n{\"last_block\": {\"hash\": \"441380be4c9f10e6ceaec1daeab716cfffab22a8c2adbf765d00fc8d34effe23\", \"block_age\": \"0:01:21\", \"block_timestamp\": \"2020-09-23T19:50:11\", \"check_timestamp\": \"2020-09-23T19:51:32\", \"status\": \"OK\", \"block_recent\": true, \"block_recent_offset\": 12, \"block_recent_offset_unit\": \"minutes\", \"host\": \"mainnet.community.xmr.to:18081\"}, \"monerod\": {\"rpc\": {\"status\": \"OK\", \"host\": \"mainnet.community.xmr.to:18081\"}, \"p2p\": {\"status\": \"OK\", \"host\": \"mainnet.community.xmr.to:18080\"}, \"status\": \"OK\", \"host\": \"mainnet.community.xmr.to\", \"version\": 12}, \"status\": \"OK\", \"host\": \"mainnet.community.xmr.to\"}\n```\n\n## Tests and development\n```\n# Create and activate a virtual environment.\npython -m venv venv\n. venv/bin/activate\n\n# Install the dependencies.\npip install --upgrade pip-tools\npip-sync requirements.txt\n\n# Run tests.\npytest\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/normoes/monero_health/archive/v1.1.4.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/normoes/monero_health",
    "keywords": "",
    "license": "",
    "maintainer": "Norman Moeschter-Schenck",
    "maintainer_email": "<norman.moeschter@gmail.com>",
    "name": "monero-health",
    "package_url": "https://pypi.org/project/monero-health/",
    "platform": "",
    "project_url": "https://pypi.org/project/monero-health/",
    "project_urls": {
      "Download": "https://github.com/normoes/monero_health/archive/v1.1.4.tar.gz",
      "Homepage": "https://github.com/normoes/monero_health"
    },
    "release_url": "https://pypi.org/project/monero-health/1.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Check health of monero daemons.",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8727094,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "228c664aa09d3b54e46d7c2e8624102543d57b7de2079a4593c1a758e07b1d49",
        "md5": "051fa298e9a018e956376d3af546f5ce",
        "sha256": "b991e98898b9646efb40da854299338d061669b85641806571cf187ed8c9e259"
      },
      "downloads": -1,
      "filename": "monero_health-1.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "051fa298e9a018e956376d3af546f5ce",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7392,
      "upload_time": "2020-09-24T12:24:44",
      "upload_time_iso_8601": "2020-09-24T12:24:44.391160Z",
      "url": "https://files.pythonhosted.org/packages/22/8c/664aa09d3b54e46d7c2e8624102543d57b7de2079a4593c1a758e07b1d49/monero_health-1.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "571f80abc56d8105369dccff0b417bb93e49c5e03cc281305c42cc7f4036372e",
        "md5": "84ceb4241e867d5faf4769e9e7f6d630",
        "sha256": "367a4b3a9cdc693e90c6fb04f61b083e294e956c8cb9f1f6b1b156f195adbd6a"
      },
      "downloads": -1,
      "filename": "monero_health-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "84ceb4241e867d5faf4769e9e7f6d630",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8580,
      "upload_time": "2020-09-24T12:24:36",
      "upload_time_iso_8601": "2020-09-24T12:24:36.136175Z",
      "url": "https://files.pythonhosted.org/packages/57/1f/80abc56d8105369dccff0b417bb93e49c5e03cc281305c42cc7f4036372e/monero_health-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}