{
  "info": {
    "author": "Norman Moeschter-Schenck",
    "author_email": "norman.moeschter@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python"
    ],
    "description": "# Monero health\n\nMonero health is supposed to provide information about the Monero daemon health.\n\nThere are two health checks at the moment:\n* Checking the Monero daemon RPC status using the `hard_fork_info` RPC.\n* Checking the Monero daemon P2P status (checks the given P2P port).\n* Checking the age of the last block on the daemon using a pre-configured offset.\n\n**_Note_**:\n\nThe Monero daemon RPC information are retrieved using the Monero daemon JSON RPC.\nThe RPC connection is established using [`python-monerorpc`](https://github.com/monero-ecosystem/python-monerorpc).\n\n## Configuration\n\n### Monero daemon RPC connection\nThe connection to the Monero daemon RPC can be configured using environment variables:\n\n| environment variable | default value |\n|----------------------|---------------|\n| `MONEROD_URL` | `\"127.0.0.1\"` |\n| `MONEROD_RPC_PORT` | `18081` |\n| `MONEROD_P2P_PORT` | `18080` |\n| `MONEROD_RPC_USER` | `\"\"` |\n| `MONEROD_RPC_PASSWORD` | `\"\"` |\n\n**_Note_**:\n\nThe RPC connection is established using [`python-monerorpc`](https://github.com/monero-ecosystem/python-monerorpc).\n\n### Last block age\n```\nfrom monero_health import daemon_last_block_check\n```\n\nThe last block's timestamp is checked against a given pre-configured offset:\n\n| environment variable | default value |\n|----------------------|---------------|\n| `OFFSET` | `12` |\n| `OFFSET_UNIT` | `\"minutes\"` |\n\nI.e that the last block is considered out-of-date as soon as it becomes older than - in the default case - `12 [minutes]`.\n\nThe Monero RPC method used is:\n* `get_last_block_header`\n\n### Daemon RPC status\n```\nfrom monero_health import daemon_rpc_status_check\n```\n\nNo additional configuration is needed.\n\nThe Monero RPC method used is:\n* `hard_fork_info`\n\n### Daemon P2P status\n```\nfrom monero_health import daemon_p2p_status_check\n```\n\nNo additional configuration is needed.\n\nA socket connection is established, which checks the connectivity to the P2P port.\n\n## Results\n\n### JSON response\nThis module is not really supposed to be run as a script, rather as a module.\n\nHowever, it is possible to directly run it as a script. it will then output the complete information:\n```python\n    MONEROD_URL=node.xmr.to python monero_health.py\n    # Last block age.\n    INFO:DaemonHealth:Checking 'node.xmr.to:18081'.\n    {'hash': 'b0f683278980ac65adfa6600c040d38f29f2299912c6c580d04f2f6704bf11d3', 'block_timestamp': '2019-12-19T15:02:16', 'check_timestamp': '2019-12-19T15:08:29', 'status': 'OK', 'block_recent': True, 'block_recent_offset': 12, 'block_recent_offset_unit': 'minutes'}\n    # Monero daemon status.\n    INFO:DaemonHealth:Checking 'node.xmr.to:18081'.\n    {'status': 'OK', 'version': 12}\n```\n\nWhen imported as a module the functions can be imported/called separately, like this:\n* Last block age:\n```python\n    from monero_health import (\n        daemon_last_block_check,\n    )\n    ...\n    result = daemon_last_block_check()\n    ...\n```\n* Monero daemaon status:\n```python\n    from monero_health import (\n        daemon_status_check,\n    )\n    ...\n    result = daemon_status_check()\n    ...\n```\n* Combined daemon status:\n```python\n    from monero_health import (\n        daemon_combined_status_check,\n    )\n    ...\n    result = daemon_combined_status_check()\n    ...\n```\n\n### Possible status values\n\nThe `status` returned can have the following values:\n* `OK`\n  - For a last block that **is not** considered old: (`daemon_last_block_check`)\n  - For a daemon with status `OK`: (`daemon_rpc_status_check`, `daemon_p2p_status_check`, `daemon_stati_check`)\n  - Every possible status is `OK`: (`daemon_combined_status_check`)\n* `ERROR`\n  - For a last block that **is** considered old: (`daemon_last_block_check`)\n  - For a daemon with status `ERROR`: (`daemon_rpc_status_check`, `daemon_p2p_status_check`, `daemon_stati_check`)\n  - At least one possible status is `ERROR`: (`daemon_combined_status_check`)\n* `UNKNOWN`\n  - In case of a connection error not initiated by the peer (mostly related to HTTP requests): (`daemon_last_block_check`, `daemon_rpc_status_check`, `daemon_p2p_status_check`, `daemon_stati_check`)\n  - At least one possible status is `UNKNOWN`: (`daemon_combined_status_check`)\n\n### Errors\n\nIn case of an error, an `error` key is added to the responses of:\n* `daemon_last_block_check`\n* `daemon_rpc_status_check`, `daemon_p2p_status_check`, `daemon_stati_check`\nbut not to `daemon_combined_status_check`.\n\nThis error key always contains the keys:\n* `error`\n* `message`\n\nExample - No Monero daemon running at `127.0.0.1:18081`:\n```\n{\n    \"block_recent\": false,\n    \"block_recent_offset\": \"12\",\n    \"block_recent_offset_unit\": \"minutes\",\n    \"block_timestamp\": \"---\",\n    \"check_timestamp\": \"2020-01-07T14:53:24\",\n    \"error\": {\n        \"error\": \"-341: could not establish a connection, original error: HTTPConnectionPool(host='127.0.0.1', port=18081): Max retries exceeded with url: /json_rpc (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fe25e449cd0>: Failed to establish a new connection: [Errno 111] Connection refused'))\",\n        \"message\": \"Cannot determine daemon status. Daemon: '127.0.0.1:18081'.\"\n    },\n    \"hash\": \"---\",\n    \"status\": \"UNKNOWN\"\n}\n```\n\n## Full example\n\nWhen run as a script (against the XMR.to public node `node.xmr.to`):\n```\nMONEROD_URL=node.xmr.to python monero_health.py\n```\n\nall health and status checks are run one after another:\n* Last block (last block's timestamp).\n* Daemon RPC status (port `18081`, RPC method `hard_fork_info`).\n* Daemon P2P status (port `18080`).\n* Both dameon stati (combined `status` key).\n* Run all checks **but do not consider** the daemon P2P status in the resulting `status` key (dameon P2P result is still returned).\n* Run all checks **and consider** the daemon P2P status in the resulting `status` key.\n\nThe result will look like this:\n```\n----Last block check----:\nINFO:DaemonHealth:Checking 'node.xmr.to:18081'.\n{'hash': '552cc36a9f0d9417876aaac61ee45b9b4582b054dd4f33e7534f79736318e002', 'block_age': '0:01:54', 'block_timestamp': '2020-02-21T16:34:08', 'check_timestamp': '2020-02-21T16:36:02', 'status': 'OK', 'block_recent': True, 'block_recent_offset': 12, 'block_recent_offset_unit': 'minutes', 'host': 'node.xmr.to:18081'}\n----Daemon rpc check----:\nINFO:DaemonHealth:Checking 'node.xmr.to:18081'.\n{'status': 'OK', 'version': 12, 'host': 'node.xmr.to:18081'}\n----Daemon p2p check----:\nINFO:DaemonHealth:Checking 'node.xmr.to:18080'.\n{'status': 'OK', 'host': 'node.xmr.to:18080'}\n----Daemon stati check----:\nINFO:DaemonHealth:Checking 'node.xmr.to:18081'.\nINFO:DaemonHealth:Checking 'node.xmr.to:18080'.\nINFO:DaemonHealth:{\"message\": \"Combined daemon status (RPC, P2P) is 'OK'.\"}\n{'rpc': {'status': 'OK', 'version': 12, 'host': 'node.xmr.to:18081'}, 'p2p': {'status': 'OK', 'host': 'node.xmr.to:18080'}, 'status': 'OK', 'host': 'node.xmr.to'}\n----Overall RPC check----:\nINFO:DaemonHealth:Checking 'node.xmr.to:18081'.\nINFO:DaemonHealth:Checking 'node.xmr.to:18081'.\nINFO:DaemonHealth:Checking 'node.xmr.to:18080'.\nINFO:DaemonHealth:{\"message\": \"Combined daemon status (RPC, P2P) is 'OK'.\"}\n--OK\nINFO:DaemonHealth:{\"message\": \"Combined status is 'OK'.\"}\n{'last_block': {'hash': '552cc36a9f0d9417876aaac61ee45b9b4582b054dd4f33e7534f79736318e002', 'block_age': '0:01:55', 'block_timestamp': '2020-02-21T16:34:08', 'check_timestamp': '2020-02-21T16:36:03', 'status': 'OK', 'block_recent': True, 'block_recent_offset': 12, 'block_recent_offset_unit': 'minutes', 'host': 'node.xmr.to:18081'}, 'monerod': {'rpc': {'status': 'OK', 'version': 12, 'host': 'node.xmr.to:18081'}, 'p2p': {'status': 'OK', 'host': 'node.xmr.to:18080'}, 'status': 'OK', 'host': 'node.xmr.to'}, 'status': 'OK', 'host': 'node.xmr.to'}\n----Overall check----:\nINFO:DaemonHealth:Checking 'node.xmr.to:18081'.\nINFO:DaemonHealth:Checking 'node.xmr.to:18081'.\nINFO:DaemonHealth:Checking 'node.xmr.to:18080'.\nINFO:DaemonHealth:{\"message\": \"Combined daemon status (RPC, P2P) is 'OK'.\"}\n--OK\nINFO:DaemonHealth:{\"message\": \"Combined status is 'OK'.\"}\n{'last_block': {'hash': '552cc36a9f0d9417876aaac61ee45b9b4582b054dd4f33e7534f79736318e002', 'block_age': '0:01:56', 'block_timestamp': '2020-02-21T16:34:08', 'check_timestamp': '2020-02-21T16:36:04', 'status': 'OK', 'block_recent': True, 'block_recent_offset': 12, 'block_recent_offset_unit': 'minutes', 'host': 'node.xmr.to:18081'}, 'monerod': {'rpc': {'status': 'OK', 'version': 12, 'host': 'node.xmr.to:18081'}, 'p2p': {'status': 'OK', 'host': 'node.xmr.to:18080'}, 'status': 'OK', 'host': 'node.xmr.to'}, 'status': 'OK', 'host': 'node.xmr.to'}\n(venv) [norman ~/git_sources/monero_health.git (master *+%=)]$\n```\n\n## Tests\n```\n# Create and activate a virtual environment.\npython -m venv venv\n. venv/bin/activate\n# Install the dependencies.\npip install --upgrade -r requirements.txt\n# Run tests.\npytest\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/normoes/monero_health/archive/v1.0.6.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/normoes/monero_health",
    "keywords": "",
    "license": "",
    "maintainer": "Norman Moeschter-Schenck",
    "maintainer_email": "<norman.moeschter@gmail.com>",
    "name": "monero-health",
    "package_url": "https://pypi.org/project/monero-health/",
    "platform": "",
    "project_url": "https://pypi.org/project/monero-health/",
    "project_urls": {
      "Download": "https://github.com/normoes/monero_health/archive/v1.0.6.tar.gz",
      "Homepage": "https://github.com/normoes/monero_health"
    },
    "release_url": "https://pypi.org/project/monero-health/1.0.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Check health of monero daemons.",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8727094,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3399f8e3dd0e16e3aefa3af43889c1287d8f0cd5a8390fc77b38e2c4bf4292ff",
        "md5": "08d5ad59835d600148304e8c6db021e2",
        "sha256": "e13e140b60d58d9d3e878bf276f86b13d62e30032a2f6979b4ae2dd0c752b4cf"
      },
      "downloads": -1,
      "filename": "monero_health-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "08d5ad59835d600148304e8c6db021e2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7059,
      "upload_time": "2020-07-29T07:57:35",
      "upload_time_iso_8601": "2020-07-29T07:57:35.913393Z",
      "url": "https://files.pythonhosted.org/packages/33/99/f8e3dd0e16e3aefa3af43889c1287d8f0cd5a8390fc77b38e2c4bf4292ff/monero_health-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}