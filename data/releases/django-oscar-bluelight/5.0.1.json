{
  "info": {
    "author": "Craig Weber",
    "author_email": "crgwbr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "===============================\nDjango Oscar Bluelight Specials\n===============================\n\n|  |license| |kit| |format|\n\nThis package contains enhancements and improvements to the built-in offers and vouchers features in Django Oscar.\n\n\nFeatures\n========\n\n- **Group Restricted Vouchers**: Bluelight adds the ability to restrict application of vouchers to a specific whitelist of groups (`django.contrib.auth.models.Group`). For example, you could create a voucher code that can only be applied by users who belong to the group *Customer Service Reps*.\n- **Compound Offer Conditions**: By default, Oscar only allows assigning a single condition to a promotional offer. Compound offer conditions allow you to create more complex logic around when an offer should be enabled. For example, you could create a compound condition specifying that a basket must contain at least 3 items *and* have a total value greater than $50.\n    - Compound conditions can aggregate an unlimited number of child conditions together.\n    - Compound conditions can join their child conditions using either an *AND* or an *OR* conjunction.\n    - Very complex conditions requiring both *AND* and *OR* conjunctions can be modeled by creating multiple levels of compound conditions.\n- **Parent / Child Voucher Codes**: By default Oscar doesn't support bulk creation of voucher codes. Bluelight adds the ability to bulk create any number of child vouchers (with unique, automatically generated codes) for any standard (non-child) voucher. This can be useful when sending voucher codes to customer's through email, as it allows the creation of hundreds or thousands of non-sequential, one-time-use codes.\n    - Child codes can be added when creating a new voucher or after a voucher is created.\n    - More child codes can be generated for a voucher at any time.\n    - Child codes can be exported in CSV and JSON formats.\n    - Any time a parent voucher is edited (name changed, benefit altered, etc), all child codes are also updated to match.\n    - When a parent voucher is deleted, all children are also deleted.\n    - Once a voucher has child codes assigned to it, the parent voucher itself can not be applied by anyone.\n\n\nRoadmap\n=======\n\n- Make child code creation and updating more performant, possibly by (1) extracting some of the work into asynchronous Celery tasks and (2) better tracking of dirty model fields before saving.\n- Add ability to duplicate vouchers.\n- Add ability to add conditions to vouchers.\n\nCaveats\n=======\n\nBluelight currently works by forking four of Oscar's apps: offer, voucher, dashboard.offers, and dashboard.vouchers. Currently there is no way to use Bluelight if your application has already forked those applications.\n\n\nInstallation\n============\n\nInstall `django-oscar-bluelight`.::\n\n    $ pip install django-oscar-bluelight\n\nImport Bluelight's settings into your projects `settings.py` file.::\n\n    from oscar.defaults import *\n    from oscarbluelight.defaults import *  # Needed so that Bluelight's views show up in the dashboard\n\nAdd Bluelight to your installed apps (replacing the equivalent Django Oscar apps). The top-level ``oscarbluelight`` app must be defined before the ``oscar`` app—if it isn't Django will not correctly find the Bluelight's templates.::\n\n    INSTALLED_APPS = [\n        ...\n        # Bluelight. Must come before `django-oscar` so that template inheritance / overrides work correctly.\n        'oscarbluelight',\n        'django_pgviews',\n\n        # django-oscar\n        'oscar',\n        'oscar.apps.analytics',\n        'oscar.apps.checkout',\n        'oscar.apps.address',\n        'oscar.apps.shipping',\n        'oscar.apps.catalogue',\n        'oscar.apps.catalogue.reviews',\n        'sandbox.partner',  # 'oscar.apps.partner',\n        'sandbox.basket',  # 'oscar.apps.basket',\n        'oscar.apps.payment',\n        'oscarbluelight.offer',  # 'oscar.apps.offer',\n        'oscar.apps.order',\n        'oscar.apps.customer',\n        'oscar.apps.search',\n        'oscarbluelight.voucher',  # 'oscar.apps.voucher',\n        'oscar.apps.wishlists',\n        'oscar.apps.dashboard',\n        'oscar.apps.dashboard.reports',\n        'oscar.apps.dashboard.users',\n        'oscar.apps.dashboard.orders',\n        'oscar.apps.dashboard.catalogue',\n        'oscarbluelight.dashboard.offers',  # 'oscar.apps.dashboard.offers',\n        'oscar.apps.dashboard.partners',\n        'oscar.apps.dashboard.pages',\n        'oscar.apps.dashboard.ranges',\n        'oscar.apps.dashboard.reviews',\n        'oscarbluelight.dashboard.vouchers',  # 'oscar.apps.dashboard.vouchers',\n        'oscar.apps.dashboard.communications',\n        'oscar.apps.dashboard.shipping',\n        ...\n    ]\n\nFork the basket application in your project and add ``BluelightBasketMixin`` as a parent class of the ``Line`` model.::\n\n    from oscar.apps.basket.abstract_models import AbstractLine\n    from oscarbluelight.mixins import BluelightBasketLineMixin\n\n    class Line(BluelightBasketLineMixin, AbstractLine):\n        pass\n\n    from oscar.apps.basket.models import *  # noqa\n\n\nUsage\n=====\n\nAfter installation, the new functionality will show up in the Oscar dashboard under the Offers menu.\n\n\nChangelog\n=========\n\n5.0.1\n------------------\n- Remove duplicate ``offer_type`` field from offer form.\n\n5.0.0\n------------------\n- Oscar 3.1 compatibility\n- Drops Oscar 3.0 compatibility (due to 3.1's significant changes to offers / vouchers).\n- Fix bug in Offer Restrictions form which always reset voucher-type offers to site-type offers.\n- Add new “Fixed Price Per Item” benefit type\n\n4.1.0\n------------------\n- Add new dashboard view to view and delete voucher child codes.\n- Tweak voucher form to allow creating custom child codes on initial voucher creation.\n\n4.0.0\n------------------\n- Oscar 3.0 Compatibility\n- Add checkbox for excluding offer from cosmetic pricing\n\n3.0.1\n-------------------\n- Improve performance of the \"Add Products to Range\" functionality in the dashboard by utilizing batch inserts.\n\n3.0.0\n------------------\n- Use Postgres materialized views to improve performance of querying for products in a range.\n\n2.0.0\n------------------\n- Support django-oscar 2.1\n\n1.0.0\n------------------\n- Add improved reporting formats for offers and vouchers.\n\n0.14.1\n------------------\n- Fix bug in CompoundBenefit which caused lines to not be properly consumed by a condition if the last-to-be-applied child benefit didn't trigger a discount.\n\n0.14.0\n------------------\n- Add support for django-oscar 2.x.\n- Drop support for django-oscar 1.x.\n\n0.13.0\n------------------\n- Internationalization\n- Feature: Compound Benefits. Allows applying more than one benefit with a single offer.\n- Improve performance of Range.contains_product by utilizing Redis SETs. Requires Redis caching on the Django site\n\n0.12.0\n------------------\n- Improve UI of the offer group dashboard view.\n- Improve checkout performance by tuning the update query in Offer.record_usage.\n- Alter behavior of MultibuyDiscountBenefit. Not discounts the second-most expensive product, rather than the cheapest product.\n- Remove now-unused cosmetic-pricing settings.\n\n0.11.1\n------------------\n- Fix bug with effective price.\n\n0.11.0\n------------------\n- Add support for adding images to Offers and Vouchers.\n- Add support for Python 3.7.\n- Add support for Django 2.1.\n\n0.10.0\n------------------\n- Add flag to offer result objects to allow flagging a result as hidden in the UI. Doesn't functionally affect anything other than adding the boolean flag property.\n- Bugfix for clearing products from range cache\n\n0.9.0\n------------------\n- Add support for Oscar 1.6 and Django 2.0.\n    - Due to the write of the offer's system in Oscar 1.6, this release drops support for Oscar 1.5.\n\n0.8.7\n------------------\n- Fix exception thrown when editing a voucher\n- Fix broken Webpack build\n\n0.8.6\n------------------\n- Improve performance of offer application by caching the results of ``Range.contains_product`` and ``Range.contains``.\n\n0.8.5\n------------------\n- Improve performance of cosmetic price application by using ``select_related``.\n\n0.8.4\n------------------\n- Fix Django 2.0 Deprecation warnings.\n\n0.8.3\n------------------\n- Fix bug preventing saving an Offer's short name in the dashboard.\n\n0.8.2\n------------------\n- Fix method signature bug in several shipping benefits.\n\n0.8.1\n------------------\n- Adds support for Django 1.11 and Oscar 1.5\n\n0.8.0\n------------------\n- Add Concept of System Offer Groups.\n    - System Offer Groups are standard offer groups, but are automatically created and are ensured to always exist. They can not, therefore, be created or deleted via the dashboard UI. They are lazy-created by referencing them in code using the ``oscarbluelight.offer.groups.register_system_offer_group(slug='foo')`` function.\n    - Along with this functionality comes the addition of offer and group related signals which can be used to perform actions at specific points in time during offer group application. For example you could create a system offer group for offers which should be applied only after taxes have been calculated. Then you could use the ``pre_offer_group_apply`` signal to perform tax calculation on a basket directly before the offer group is applied.\n\n0.7.1\n------------------\n- Fix exception in dashboard when adding compound conditions\n\n0.7.0\n------------------\n- Fix bug related to conditions consuming basket lines when the condition range differed from the benefit range.\n- Run model validation before applying benefits to a basket. Results in better error reporting of invalid but difficult to enforce data.\n- Start to rebuild OfferGroup dashboard view as a React application.\n    - Currently just recreates existing functionality using React and an API endpoint.\n    - Next release will include drag-and-drop priority sorting of offers, vouchers, and offer groups.\n\n0.6.1\n------------------\n- Drop Django 1.9 support.\n- In offer group list, dim inactive offers and vouchers.\n- List related vouchers on benefit and condition edit pages.\n- Limit orders displayed on voucher stats.\n- Start testing against Django 1.11 and Oscar 1.5rc1:\n    - Fix issue with Voucher ordering when doing a select_for_update.\n    - Fix Oscar 1.5 issue with conditionaloffer_set vs offers related name.\n    - Fix Oscar 1.5 issue with basket.Line.line_tax.\n    - Upgrade sandbox to Oscar 1.5.\n- Add new field to ConditionalOffer: short_name\n- Make OfferApplications ordered\n\n0.6.0\n------------------\n- Add concept of Offer groups.\n    - This makes it possible to create promotions which overlap on line items.\n- Add API for determining why a line was discounted.\n\n0.5.4\n------------------\n- Improve unit testing with tox.\n\n0.5.3\n------------------\n- Upgrade test dependencies.\n\n0.5.2\n------------------\n- Upgraded to ``versiontag`` 1.2.0.\n\n0.5.1\n------------------\n- Fixed bug where voucher condition range was always set to be equal to the benefit range.\n\n0.5.0\n------------------\n- Create custom subclasses of all built-in Oscar conditions and Benefits\n    - Eliminates need for monkey-patching the ``Condition.consume_items`` method.\n    - Adds migration to change all row's proxy_class from ``oscar.apps.offer.FOOBAR`` to ``oscarbluelight.offer.FOOBAR``.\n- Change behavior of ``FixedPriceBenefit`` to be more logical.\n    - Uses the benefit's assigned range instead of the condition's range.\n    - Respects the ``max_affected_items`` setting.\n- Improved dashboard form validation using polymorphic ``_clean`` methods on benefits and conditions.\n- Disallow deleting a range when a benefit or a condition depends on it.\n- If a benefit or condition's proxy_class isn't a proxy_model, automatically create the row in the subclass's table.\n\n0.4.1\n------------------\n- Fixed several exceptions throw in dashboard views when a voucher had no offers linked to it.\n\n0.4.0\n------------------\n- Dashboard:\n    - Separate vouchers form offers in benefits and conditions lists\n    - Add condition field to voucher form. Allows creating more complex vouchers, such as those that require specific items in the basket.\n    - Add priority field to vouchers and offers forms. Display priority field in detail and list fields.\n    - Add offer restrictions fields to voucher form.\n- Performance:\n    - Move child code creation and updating background task with Celery.\n\n0.3.1\n------------------\n- Use correct transaction.atomic syntax in voucher creation.\n- Fix validation of voucher name and code when child codes exist.\n- Set max_length to 128 on name field of voucher form, to match model.\n\n0.3.0\n------------------\n- Makes it possible to selectively apply offers to specific groups of users (using django.auth.contrib.models.Group).\n- Adds custom dashboard screens for managing offer / voucher benefits.\n\n0.2.2\n------------------\n- Fix bug preventing Voucher.groups form field from being blank\n\n0.2.1\n------------------\n- Fix bug the excluded templates from package.\n\n0.2.0\n------------------\n- Renamed package to `oscarbluelight` to have consistent naming with other Oscar projects.\n\n0.1.1\n------------------\n- Fix bug the excluded templates from package.\n\n0.1.0\n------------------\n- Initial release.\n\n\n.. |license| image:: https://img.shields.io/pypi/l/django-oscar-bluelight.svg\n    :target: https://pypi.python.org/pypi/django-oscar-bluelight\n.. |kit| image:: https://badge.fury.io/py/django-oscar-bluelight.svg\n    :target: https://pypi.python.org/pypi/django-oscar-bluelight\n.. |format| image:: https://img.shields.io/pypi/format/django-oscar-bluelight.svg\n    :target: https://pypi.python.org/pypi/django-oscar-bluelight\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/thelabnyc/django-oscar-bluelight",
    "keywords": "",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-oscar-bluelight",
    "package_url": "https://pypi.org/project/django-oscar-bluelight/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-oscar-bluelight/",
    "project_urls": {
      "Homepage": "https://gitlab.com/thelabnyc/django-oscar-bluelight"
    },
    "release_url": "https://pypi.org/project/django-oscar-bluelight/5.0.1/",
    "requires_dist": [
      "celery (>=4.3)",
      "django (>=2.2)",
      "django-oscar (>=3.1b0)",
      "django-redis (>=4.8.0)",
      "django-pgviews (>=0.5.7)",
      "djangorestframework (>=3.10)",
      "redis (>=3.0.0)",
      "coverage (>=4.4.2) ; extra == 'development'",
      "django-debug-toolbar (>=3.2.1) ; extra == 'development'",
      "flake8 (>=3.2.1) ; extra == 'development'",
      "hiredis (>=0.2.0) ; extra == 'development'",
      "psycopg2cffi (>=2.7.7) ; extra == 'development'",
      "sorl-thumbnail (>=11.04) ; extra == 'development'",
      "sphinx (>=1.5.2) ; extra == 'development'",
      "splinter (>=0.7.5) ; extra == 'development'",
      "tox (>=2.6.0) ; extra == 'development'",
      "unittest-xml-reporting (>=3.0.4) ; extra == 'development'",
      "versiontag (>=1.2.0) ; extra == 'development'"
    ],
    "requires_python": "",
    "summary": "Bluelight Specials - Enhancements to the offer and vouchers features for Django Oscar.",
    "version": "5.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16200131,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c558e08fa3ec4d95ef0065954e3ba92ec8b5ee5cf6b5eae5eb96c11473a0fd0",
        "md5": "f1076d1ad4dcfe80644a31cb91d43ca8",
        "sha256": "b1c90967f387815c1a18220bbb89baa3468d05f9e4026c2916bd9e9e79232f2d"
      },
      "downloads": -1,
      "filename": "django_oscar_bluelight-5.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1076d1ad4dcfe80644a31cb91d43ca8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 536803,
      "upload_time": "2021-09-13T18:56:09",
      "upload_time_iso_8601": "2021-09-13T18:56:09.547446Z",
      "url": "https://files.pythonhosted.org/packages/1c/55/8e08fa3ec4d95ef0065954e3ba92ec8b5ee5cf6b5eae5eb96c11473a0fd0/django_oscar_bluelight-5.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd69fe90db5ce474d52fc3f1f1fae5a396b73e749e435b588257b81fced2053f",
        "md5": "3633baa694b36ccb0c8ca53c4abcc22c",
        "sha256": "531790ffaf873fea810c9f876f24fa2746aa431d81d35e1004fafb398af1481f"
      },
      "downloads": -1,
      "filename": "django-oscar-bluelight-5.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3633baa694b36ccb0c8ca53c4abcc22c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 472814,
      "upload_time": "2021-09-13T18:56:12",
      "upload_time_iso_8601": "2021-09-13T18:56:12.202452Z",
      "url": "https://files.pythonhosted.org/packages/bd/69/fe90db5ce474d52fc3f1f1fae5a396b73e749e435b588257b81fced2053f/django-oscar-bluelight-5.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}