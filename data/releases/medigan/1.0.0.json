{
  "info": {
    "author": "Richard Osuala, Grzegorz Skorupko, Noussair Lazrak",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<!-- # MEDIGAN -->\n<!-- ![medigan](medigan_logo_1.png) -->\n![medigan](docs/source/_static/medigan_logo.png)\n\n![Continuous integration](https://github.com/RichardObi/medigan/actions/workflows/python-ci.yml/badge.svg)\n[![PyPI version](https://badge.fury.io/py/medigan.svg)](https://badge.fury.io/py/medigan)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.6327625.svg)](https://doi.org/10.5281/zenodo.6327625)\n\n## A modular package for automated synthetic data generation.\n\n- :x: **Problem 1:** Data scarcity in medical imaging. \n\n- :x: **Problem 2:** Scarcity of readily reusable generative models in medical imaging.\n\n- :white_check_mark: **Solution:** `medigan`\n    1. dataset sharing via generative models :gift:\n    2. data augmentation :gift:\n    3. domain adaptation :gift:\n    4. synthetic data evaluation method testing with multi-model datasets :gift:\n\n`medigan` provides functions for sharing and re-use of pretrained generative models in medical imaging.\n\n## Features:\n\n- Instead of training your own, use one a generative models from `medigan` to generate synthetic data.\n\n- Search and find a model in `medigan` using search terms (e.g. \"Mammography\" or \"Endoscopy\").\n\n- Contribute your own generative model to `medigan` to increase its visibility, re-use, and impact.\n\n## Available models\n\n| Output type                     | Modality |      Model type    |   Output size   | Base dataset |     Output examples      |    `model_id`     |  Hosted on  |  Reference |\n|-----------------------------|:--------:|:-------------:|:--------:|:------------:|:------:|:------:|:------:|:------:|\n| <sub> Breast Calcification        </sub> | <sub>  mammography  </sub> | <sub>    dcgan     </sub> | <sub> 128x128 </sub> | <sub>  [Inbreast](https://www.academicradiology.org/article/S1076-6332(11)00451-X/fulltext)   </sub> | ![sample](docs/source/_static/samples/00001.png) | <sub> `00001_DCGAN_MMG_CALC_ROI` </sub> | <sub>[Zenodo (5187714)](https://doi.org/10.5281/zenodo.5187714) </sub> | | \n| <sub> Breast Mass                 </sub> | <sub>  mammography  </sub> | <sub>    dcgan     </sub> | <sub> 128x128 </sub> | <sub>   [Optimam](https://doi.org/10.48550/arXiv.2004.04742)   </sub> | ![sample](docs/source/_static/samples/00002.png) | <sub> `00002_DCGAN_MMG_MASS_ROI` </sub> | <sub>[Zenodo (5188557)](https://doi.org/10.5281/zenodo.5188557) </sub> | <sub>[Alyafi et al (2019)](https://doi.org/10.48550/arXiv.1909.02062) </sub> | \n| <sub> Breast Density Transfer     </sub> | <sub>  mammography  </sub> | <sub>   cyclegan   </sub> | <sub>1332x800 </sub> | <sub>    [BCDR](https://bcdr.eu/information/about)     </sub> | ![sample](docs/source/_static/samples/00003.png) | <sub> `00003_CYCLEGAN_MMG_DENSITY_FULL` </sub> | <sub>[Zenodo (5547263)](https://doi.org/10.5281/zenodo.5547263) </sub> | | \n| <sub> Breast Mass with Mask       </sub> | <sub>  mammography  </sub> | <sub>   pix2pix    </sub> | <sub> 256x256 </sub> | <sub>    [BCDR](https://bcdr.eu/information/about)     </sub> | ![sample](docs/source/_static/samples/00004.png) <br> ![sample](docs/source/_static/samples/00004_mask.png) | <sub><sub> `00004_PIX2PIX_MMG_MASSES_W_MASKS` </sub></sub> | <sub>[Zenodo (7093759)](https://doi.org/10.5281/zenodo.7093759) </sub> |  | \n| <sub> Breast Mass                 </sub> | <sub>  mammography  </sub> | <sub>    dcgan     </sub> | <sub> 128x128 </sub> | <sub>    [BCDR](https://bcdr.eu/information/about)     </sub> | ![sample](docs/source/_static/samples/00005.png) | <sub> `00005_DCGAN_MMG_MASS_ROI` </sub> | <sub>[Zenodo (6555188)](https://doi.org/10.5281/zenodo.6555188) </sub> | <sub>[Szafranowska et al (2022)](https://doi.org/10.48550/arXiv.2203.04961) </sub> | \n| <sub> Breast Mass                 </sub> | <sub>  mammography  </sub> | <sub>   wgan-gp    </sub> | <sub> 128x128 </sub> | <sub>    [BCDR](https://bcdr.eu/information/about)     </sub> | ![sample](docs/source/_static/samples/00006.png) | <sub> `00006_WGANGP_MMG_MASS_ROI` </sub> | <sub>[Zenodo (6554713)](https://doi.org/10.5281/zenodo.6554713) </sub> | <sub>[Szafranowska et al (2022)](https://doi.org/10.48550/arXiv.2203.04961) </sub> | \n| <sub> Brain Tumors on Flair, T1, T1c, T2 with Masks  </sub> | <sub>  brain MRI  </sub> | <sub>   inpaint GAN    </sub> | <sub> 256x256 </sub> | <sub>    [BRATS 2018](https://wiki.cancerimagingarchive.net/pages/viewpage.action?pageId=37224922)     </sub> | ![sample](docs/source/_static/samples/00007_F.png) <br> ![sample](docs/source/_static/samples/00007_T1.png) <br> ![sample](docs/source/_static/samples/00007_T1c.png) <br> ![sample](docs/source/_static/samples/00007_T2.png) <br> ![sample](docs/source/_static/samples/00007_mask.png) <br> ![sample](docs/source/_static/samples/00007_grade_mask.png) | <sub> `00007_INPAINT_BRAIN_MRI` </sub> | <sub> [Zenodo (7041737)](https://doi.org/10.5281/zenodo.7041737) </sub> | <sub>[Kim et al (2020)](https://doi.org/10.1002/mp.14701) </sub> | \n| <sub> Breast Mass (Mal/Benign)    </sub> | <sub>  mammography  </sub> | <sub>   c-dcgan     </sub> | <sub> 128x128 </sub> | <sub>    [CBIS-DDSM](https://wiki.cancerimagingarchive.net/display/Public/CBIS-DDSM)     </sub> | ![sample](docs/source/_static/samples/00008.png) | <sub> `00008_C-DCGAN_MMG_MASSES` </sub> | <sub>[Zenodo (6647349)](https://doi.org/10.5281/zenodo.6647349) </sub> | |  \n| <sub> Polyp with Mask             </sub> | <sub>  endoscopy  </sub> | <sub>   pggan   </sub> | <sub> 256x256 </sub> | <sub>    [HyperKvasir](https://osf.io/mh9sj/)     </sub> | ![sample](docs/source/_static/samples/00009.png) <br> ![sample](docs/source/_static/samples/00009_mask.png) | <sub> `00009_PGGAN_POLYP_PATCHES_W_MASKS` </sub> | <sub>[Zenodo (6653743)](https://doi.org/10.5281/zenodo.6653743) </sub> | <sub>[Thambawita et al (2022)](https://doi.org/10.1371/journal.pone.0267976) </sub> | \n| <sub> Polyp with Mask             </sub> | <sub>  endoscopy  </sub> | <sub>   fastgan </sub> | <sub> 256x256 </sub> | <sub>    [HyperKvasir](https://osf.io/mh9sj/)     </sub> | ![sample](docs/source/_static/samples/00010.png) <br> ![sample](docs/source/_static/samples/00010_mask.png) | <sub> `00010_FASTGAN_POLYP_PATCHES_W_MASKS` </sub> | <sub>[Zenodo (6660711)](https://doi.org/10.5281/zenodo.6660711) </sub> | <sub>[Thambawita et al (2022)](https://doi.org/10.1371/journal.pone.0267976) </sub> | \n| <sub> Polyp with Mask             </sub> | <sub>  endoscopy  </sub> | <sub>   singan </sub> | <sub> â‰ˆ250x250 </sub> | <sub>    [HyperKvasir](https://osf.io/mh9sj/)     </sub> | ![sample](docs/source/_static/samples/00011.png) <br> ![sample](docs/source/_static/samples/00011_mask.png) | <sub> `00011_SINGAN_POLYP_PATCHES_W_MASKS` </sub> | <sub>[Zenodo (6667944)](https://doi.org/10.5281/zenodo.6667944) </sub> | <sub>[Thambawita et al (2022)](https://doi.org/10.1371/journal.pone.0267976) </sub> | \n| <sub> Breast Mass (Mal/Benign)    </sub> | <sub>  mammography  </sub> | <sub>   c-dcgan     </sub> | <sub> 128x128 </sub> | <sub>    [BCDR](https://bcdr.eu/information/about)     </sub> | ![sample](docs/source/_static/samples/00012.png) | <sub> `00012_C-DCGAN_MMG_MASSES` </sub> | <sub>[Zenodo (6755693)](https://doi.org/10.5281/zenodo.6818095) </sub> | | \n| <sub> Breast Density Transfer MLO </sub> | <sub>  mammography  </sub> | <sub>   cyclegan   </sub> | <sub>1332x800 </sub> | <sub>    [OPTIMAM](https://doi.org/10.48550/arXiv.2004.04742)     </sub> | ![sample](docs/source/_static/samples/00013.png) | <sub> `00013_CYCLEGAN_MMG_DENSITY_OPTIMAM_MLO` </sub> | <sub>[Zenodo (6818095)](https://doi.org/10.5281/zenodo.6818095) </sub> | | \n| <sub> Breast Density Transfer CC  </sub> | <sub>  mammography  </sub> | <sub>   cyclegan   </sub> | <sub>1332x800 </sub> | <sub>    [OPTIMAM](https://doi.org/10.48550/arXiv.2004.04742)     </sub> | ![sample](docs/source/_static/samples/00014.png) | <sub> `00014_CYCLEGAN_MMG_DENSITY_OPTIMAM_CC` </sub> | <sub>[Zenodo (6818103)](https://doi.org/10.5281/zenodo.6818103) </sub> | |  \n| <sub> Breast Density Transfer MLO </sub> | <sub>  mammography  </sub> | <sub>   cyclegan   </sub> | <sub>1332x800 </sub> | <sub>    [CSAW](https://link.springer.com/article/10.1007/s10278-019-00278-0)     </sub> | ![sample](docs/source/_static/samples/00015.png) | <sub> `00015_CYCLEGAN_MMG_DENSITY_CSAW_MLO` </sub> | <sub>[Zenodo (6818105)](https://doi.org/10.5281/zenodo.6818105) </sub> | |  \n| <sub> Breast Density Transfer CC  </sub> | <sub>  mammography  </sub> | <sub>   cyclegan   </sub> | <sub>1332x800 </sub> | <sub>    [CSAW](https://link.springer.com/article/10.1007/s10278-019-00278-0)    </sub> | ![sample](docs/source/_static/samples/00016.png) | <sub> `00016_CYCLEGAN_MMG_DENSITY_CSAW_CC` </sub> | <sub>[Zenodo (6818107)](https://doi.org/10.5281/zenodo.6818107) </sub> | | \n| <sub> Lung Nodules                </sub> | <sub>  chest x-ray  </sub> | <sub>   dcgan      </sub> | <sub>128x128  </sub> | <sub>    [NODE21](https://zenodo.org/record/4725881#.YxNmNuxBwXA)     </sub> | ![sample](docs/source/_static/samples/00017.png) | <sub> `00017_DCGAN_XRAY_LUNG_NODULES` </sub> | <sub>[Zenodo (6943691)](https://doi.org/10.5281/zenodo.6943691) </sub> | | \n| <sub> Lung Nodules                </sub> | <sub>  chest x-ray  </sub> | <sub>   wgan-gp      </sub> | <sub>128x128  </sub> | <sub>    [NODE21](https://zenodo.org/record/4725881#.YxNmNuxBwXA)     </sub> | ![sample](docs/source/_static/samples/00018.png) | <sub> `00018_WGANGP_XRAY_LUNG_NODULES` </sub> | <sub>[Zenodo (6943761)](https://doi.org/10.5281/zenodo.6943761) </sub> | | \n| <sub> Chest Xray Images           </sub> | <sub>  chest x-ray  </sub> | <sub>   pggan      </sub> | <sub>1024x1024  </sub> | <sub>    [ChestX-ray14](https://nihcc.app.box.com/v/ChestXray-NIHCC/folder/36938765345)     </sub> | ![sample](docs/source/_static/samples/00019.png) | <sub> `00019_PGGAN_CHEST_XRAY` </sub> | <sub>[Zenodo (6943803)](https://doi.org/10.5281/zenodo.6943803) </sub> | | \n| <sub> Chest Xray Images           </sub> | <sub>  chest x-ray  </sub> | <sub>   pggan      </sub> | <sub>1024x1024  </sub> | <sub>    [ChestX-ray14](https://nihcc.app.box.com/v/ChestXray-NIHCC/folder/36938765345)     </sub> | ![sample](docs/source/_static/samples/00020.png) | <sub> `00020_PGGAN_CHEST_XRAY` </sub> | <sub>[Zenodo (7046280)](https://doi.org/10.5281/zenodo.7046280) </sub> | <sub> [Segal et al (2021)](https://doi.org/10.1007/s42979-021-00720-7) </sub> |\n| <sub> Brain T1-T2 MRI Modality Transfer </sub> | <sub>  brain MRI  </sub> | <sub>   cyclegan      </sub> | <sub>224x192  </sub> | <sub>    [CrossMoDA 2021](https://arxiv.org/abs/2201.02831)     </sub> | ![sample](docs/source/_static/samples/00021.png) | <sub> `00021_CYCLEGAN_BRAIN_MRI_T1_T2` </sub> | <sub>[Zenodo (7074555)](https://doi.org/10.5281/zenodo.7074555) </sub> | <sub> [Joshi et al (2022)](https://doi.org/10.1007/978-3-031-09002-8_47) </sub> |\n\nModel information can be found in the [model documentation](https://medigan.readthedocs.io/en/latest/models.html) and in the [global.json](https://github.com/RichardObi/medigan/blob/main/config/global.json) model metadata.\n\n## Installation\nTo install the current release, simply run:\n```python\npip install medigan\n```\n\n## Getting Started\nExamples and notebooks are located at [examples](examples) folder\n\nDocumentation is available at [medigan.readthedocs.io](https://medigan.readthedocs.io/en/latest/)\n\n\n### Generation example\n#### DCGAN \nCreate mammography calcification images using DCGAN model\n```python\n# import medigan and initialize Generators\nfrom medigan import Generators\ngenerators = Generators()\n\n# generate 6 samples with model 1 (00001_DCGAN_MMG_CALC_ROI). \n# Also, auto-install required model dependencies.\ngenerators.generate(model_id=1, num_samples=6, install_dependencies=True)\n```\n![sample](docs/source/_static/samples/dcgan/gan_sample_1.png)\n![sample](docs/source/_static/samples/dcgan/gan_sample_2.png)\n![sample](docs/source/_static/samples/dcgan/gan_sample_3.png)\n![sample](docs/source/_static/samples/dcgan/gan_sample_4.png)\n![sample](docs/source/_static/samples/dcgan/3.png)\n![sample](docs/source/_static/samples/dcgan/gan_sample_5.png)\n\n\n#### CYCLEGAN \nCreate mammograms translated from Low-to-High Breast Density using CYCLEGAN model\n```python\nfrom medigan import Generators\ngenerators = Generators()\n# model 3 is \"00003_CYCLEGAN_MMG_DENSITY_FULL\"\ngenerators.generate(model_id=3, num_samples=1)\n```\n![sample](docs/source/_static/samples/cyclegan/sample_image_5_low.png)\n&rarr;\n![sample](docs/source/_static/samples/cyclegan/sample_image_5_high.png)\n\n\n### Search Example\nSearch for a [model](https://medigan.readthedocs.io/en/latest/models.html) inside medigan using keywords\n```python\n# import medigan and initialize Generators\nfrom medigan import Generators\ngenerators = Generators()\n\n# list all models\nprint(generators.list_models())\n\n# search for models that have specific keywords in their config\nkeywords = ['DCGAN', 'Mammography', 'BCDR']\nresults = generators.find_matching_models_by_values(keywords)\n```\n\n### Get Model as Dataloader \nWe can directly receive a [torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader) object for any of medigan's generative models.\n```python\nfrom medigan import Generators\ngenerators = Generators()\n# model 4 is \"00004_PIX2PIX_MMG_MASSES_W_MASKS\"\ndataloader = generators.get_as_torch_dataloader(model_id=4, num_samples=3)\n```\n\nVisualize the contents of the dataloader.\n```python\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nplt.figure()\n# subplot with 2 rows and len(dataloader) columns\nf, img_array = plt.subplots(2, len(dataloader)) \n\nfor batch_idx, data_dict in enumerate(dataloader):\n    sample = np.squeeze(data_dict.get(\"sample\"))\n    mask = np.squeeze(data_dict.get(\"mask\"))\n    img_array[0][batch_idx].imshow(sample, interpolation='nearest', cmap='gray')\n    img_array[1][batch_idx].imshow(mask, interpolation='nearest', cmap='gray')\nplt.show()\n```\n![sample](docs/source/_static/samples/gan_sample_00004_dataloader.png)\n\n## Visualize A Model \nWith our interface, it is possible to generate sample by manually setting the conditional inputs or latent vector values. The sample is updated in realtime, so it's possible to observe how the images changes when the parameters are modified. The visualization is available only for models with accessible input latent vector. Depending on a model, a conditional input may be also available or synthetic segmentation mask.\n```\nfrom medigan import Generators\n\ngenerators = Generators()\n# model 10 is \"00010_FASTGAN_POLYP_PATCHES_W_MASKS\"\ngenerators.visualize(10)\n```\n\n![sample](docs/source/_static/interface.png)\n\n## Contribute A Model\n\nCreate an [__init__.py](templates/examples/__init__.py) file in your model's root folder. \n\nNext, run the following code to contribute your model to medigan.\n\n- Your model will be stored on [Zenodo](https://zenodo.org/). \n\n- Also, a Github [issue](https://github.com/RichardObi/medigan/issues) will be created to add your model's metadata to medigan's [global.json](https://github.com/RichardObi/medigan/blob/main/config/global.json).\n\n- To do so, please provide a github access token ([get one here](https://github.com/settings/tokens)) and a zenodo access token ([get one here](https://zenodo.org/account/settings/applications/tokens/new/)), as shown below. After creation, the zenodo access token may take a few minutes before being recognized in zenodo API calls.\n\n```python\nfrom medigan import Generators\ngenerators = Generators()\n\n# Contribute your model\ngenerators.contribute(\n    model_id = \"00100_YOUR_MODEL\", # assign an ID\n    init_py_path =\"path/ending/with/__init__.py\",\n    model_weights_name = \"10000\",\n    model_weights_extension = \".pt\",\n    generate_method_name = \"generate\", # in __init__.py\n    dependencies = [\"numpy\", \"torch\"], \n    creator_name = \"YOUR_NAME\",\n    creator_affiliation = \"YOUR_AFFILIATION\",\n    zenodo_access_token = 'ZENODO_ACCESS_TOKEN',\n    github_access_token = 'GITHUB_ACCESS_TOKEN',\n```\nThank you for your contribution! \n\nYou will soon receive a reply in the Github [issue](https://github.com/RichardObi/medigan/issues) that you created for your model by running ```generators.contribute()```.\n\n## Contributions in General\nWe welcome contributions to medigan. Please send us an email or read the [contributing guidelines](CONTRIBUTING.md) regarding contributing to the medigan project.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RichardObi/medigan",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medigan",
    "package_url": "https://pypi.org/project/medigan/",
    "platform": null,
    "project_url": "https://pypi.org/project/medigan/",
    "project_urls": {
      "Bug Tracker": "https://github.com/RichardObi/medigan/issues",
      "Homepage": "https://github.com/RichardObi/medigan"
    },
    "release_url": "https://pypi.org/project/medigan/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "medigan is a modular open-source Python library that provides an interface to multiple generative models and automates synthetic dataset generation.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15259824,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ea8923333c6a0a77808f6cd15c53eea38b297740d3c1290056d9355b4723f9c",
        "md5": "f80add92140fba92227a684d31e8bd87",
        "sha256": "a53b358234c7d635ce92988023f641d3652ebab40862edbb49fa2477e85b51fd"
      },
      "downloads": -1,
      "filename": "medigan-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f80add92140fba92227a684d31e8bd87",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 52863,
      "upload_time": "2022-09-29T20:15:37",
      "upload_time_iso_8601": "2022-09-29T20:15:37.493141Z",
      "url": "https://files.pythonhosted.org/packages/8e/a8/923333c6a0a77808f6cd15c53eea38b297740d3c1290056d9355b4723f9c/medigan-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}