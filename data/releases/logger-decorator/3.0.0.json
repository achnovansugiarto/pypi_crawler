{
  "info": {
    "author": "Dmitriy Ignatiev",
    "author_email": "dmitrignatyev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "#  Logger Decorator\n\n    \n    Logger Decorator can log sync/async/yield (sync/async) functions. \n    \n    Can pass unique request id for all functions to have possibility ease find in your log all operations by filtering request_id.\n    \n    Use as simple python decorator\n\n## Getting started\n    1. pip install logger_decorator\n    1.1 import: from logger_decorator import logger_decorator\n    1.2 If function return yield need to pass yield_=True\n    1.3 Decorator need to be placed last\n    1.4 To generate unique request_id  you need use  middleware\n# Example middleware usage (Fast Api)\n\n    @app.middleware(\"http\")\n        async def log_request(request: Request, call_next):\n            set_request_id() # to create unique request_id\n            response: responses.StreamingResponse = await call_next(request)\n            return response\n\n# Usage with Threads to pass request_id\n    1. To pass request_id use <kwargs> kwargs = {'request_id': get_request_id_()}\n\n# To use with Celery and pass request_id from your app to celery\n    celery_task.apply_async(args=(ar,), kwargs={'request_id': get_request_id_()})\n\n# Usage with celery Beat\n           celery.conf.beat_schedule = {\n               'call-every-10-seconds': {\n               'task': 'my_schedule_task',\n               'schedule': 10.0, #time-interval type\n           }\n        \n           @logger_decorator(event_type='task1')\n           def task1(*args, **kwargs):\n               pass\n        \n           @logger_decorator(event_type='task2')\n           def task2(*args, **kwargs):\n               pass\n        \n    \n        @celery.task(name='my_schedule_task') \n        def my_schedule_task(*args, **kwargs):\n            set_request_id() # create request_id\n            task1(request_id=get_request_id_())\n            task2(request_id=get_request_id_())\n\n\n# Usage with Django\n    <middlewary.py>\n    from logger_decorator import set_request_id\n\n    class MyMiddleware:\n        def __init__(self, get_response):\n            set_request_id() # initializations request_id\n            self._get_response = get_response\n    \n        def __call__(self, request):\n            response = self._get_response(request)\n            set_request_id() # initializations request_id\n            return response\n    \n    <serializers.py>\n    from rest_framework import serializers\n    from main.models import Book\n    from logger_decorator import logger_decorator\n    \n    @logger_decorator(event_type='helper_func')\n    def helper_func():\n        return 'ok'\n    \n    \n    class BookModelSerializer(serializers.ModelSerializer):\n    \n        title = serializers.SerializerMethodField()\n    \n        @logger_decorator(event_type='get_title')\n        def get_title(self, obj):\n            helper_func()\n            return obj.title\n    \n        class Meta:\n            model = Book\n            fields = '__all__'\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logger-decorator",
    "package_url": "https://pypi.org/project/logger-decorator/",
    "platform": null,
    "project_url": "https://pypi.org/project/logger-decorator/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/logger-decorator/3.0.0/",
    "requires_dist": [
      "loguru"
    ],
    "requires_python": ">=3.6",
    "summary": "",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15751227,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "472e376f5cb4f11fe3ab37653a61201f2a3158171cfc6f0cf02fec8e791d9bbf",
        "md5": "ea4fc4e853da01263dc94d53efe74514",
        "sha256": "72161f5cf7072c22e0b1260330d1b31c67012e85fc69c655676c5d2a681f14a3"
      },
      "downloads": -1,
      "filename": "logger_decorator-3.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ea4fc4e853da01263dc94d53efe74514",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3612,
      "upload_time": "2022-11-13T13:37:01",
      "upload_time_iso_8601": "2022-11-13T13:37:01.497851Z",
      "url": "https://files.pythonhosted.org/packages/47/2e/376f5cb4f11fe3ab37653a61201f2a3158171cfc6f0cf02fec8e791d9bbf/logger_decorator-3.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82399a4db30e77fa503c9588b2bc5bf4c49cecb4cf45d1fa47f03c00174e6802",
        "md5": "c8b07bba1e09f06e33d6d180cb7682fe",
        "sha256": "5bf0eb2b62a4c41429e83e3de0d00f6addf82c6fe50e08bd0e0c1bf5c1a6f537"
      },
      "downloads": -1,
      "filename": "logger-decorator-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c8b07bba1e09f06e33d6d180cb7682fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3471,
      "upload_time": "2022-11-13T13:37:03",
      "upload_time_iso_8601": "2022-11-13T13:37:03.645080Z",
      "url": "https://files.pythonhosted.org/packages/82/39/9a4db30e77fa503c9588b2bc5bf4c49cecb4cf45d1fa47f03c00174e6802/logger-decorator-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}