{
  "info": {
    "author": "django-telegrambot",
    "author_email": "francesco.scarlato@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "=============================\ndjango-telegrambot\n=============================\n\n.. image:: https://badge.fury.io/py/django-telegrambot.png\n    :target: https://badge.fury.io/py/django-telegrambot\n\n.. image:: https://travis-ci.org/JungDev/django-telegrambot.png?branch=master\n    :target: https://travis-ci.org/JungDev/django-telegrambot\n\nA simple app to develop Telegram bots with Django\n\nDocumentation\n-------------\n\nThe full documentation is at https://django-telegrambot.readthedocs.org.\n\nQuickstart\n----------\n\nInstall django-telegrambot::\n\n    pip install django-telegrambot\n\nConfigure your installation\n---------------------------\n\nAdd ``django_telegrambot`` in ``INSTALLED_APPS`` ::\n\n       #settings.py\n       INSTALLED_APPS = (\n           ...\n           'django_telegrambot',\n           ...\n       )\n\nAnd set your bots::\n\n        #settings.py\n        #Django Telegram Bot settings\n\n        DJANGO_TELEGRAMBOT = {\n\n            'MODE' : 'WEBHOOK', #(Optional [str]) # The default value is WEBHOOK,\n                                # otherwise you may use 'POLLING'\n                                # NB: if use polling you must provide to run\n                                # a management command that starts a worker\n\n            'WEBHOOK_SITE' : 'https://mywebsite.com',\n        \t'WEBHOOK_PREFIX' : '/prefix', # (Optional[str]) # If this value is specified,\n                                          # a prefix is added to webhook url\n\n        \t#'WEBHOOK_CERTIFICATE' : 'cert.pem', # If your site use self-signed\n        \t                 #certificate, must be set with location of your public key\n        \t                 #certificate.(More info at https://core.telegram.org/bots/self-signed )\n\n        \t'BOTS' : [\n                {\n                   'TOKEN': '123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11', #Your bot token.\n\n        \t\t   #'ALLOWED_UPDATES':(Optional[list[str]]), # List the types of\n        \t\t\t\t\t\t   #updates you want your bot to receive. For example, specify\n        \t\t\t\t\t\t   #``[\"message\", \"edited_channel_post\", \"callback_query\"]`` to\n        \t\t\t\t\t\t   #only receive updates of these types. See ``telegram.Update``\n        \t\t\t\t\t\t   #for a complete list of available update types.\n        \t\t\t\t\t\t   #Specify an empty list to receive all updates regardless of type\n        \t\t\t\t\t\t   #(default). If not specified, the previous setting will be used.\n        \t\t\t\t\t\t   #Please note that this parameter doesn't affect updates created\n        \t\t\t\t\t\t   #before the call to the setWebhook, so unwanted updates may be\n        \t\t\t\t\t\t   #received for a short period of time.\n\n        \t\t   #'TIMEOUT':(Optional[int|float]), # If this value is specified,\n        \t\t                   #use it as the read timeout from the server\n\n        \t\t   #'WEBHOOK_MAX_CONNECTIONS':(Optional[int]), # Maximum allowed number of\n        \t\t                   #simultaneous HTTPS connections to the webhook for update\n        \t\t                   #delivery, 1-100. Defaults to 40. Use lower values to limit the\n        \t\t                   #load on your bot's server, and higher values to increase your\n        \t\t                   #bot's throughput.\n\n        \t\t   #'POLL_INTERVAL' : (Optional[float]), # Time to wait between polling updates from Telegram in\n                                   #seconds. Default is 0.0\n\n        \t\t   #'POLL_CLEAN':(Optional[bool]), # Whether to clean any pending updates on Telegram servers before\n        \t\t                   #actually starting to poll. Default is False.\n\n        \t\t   #'POLL_BOOTSTRAP_RETRIES':(Optional[int]), # Whether the bootstrapping phase of the `Updater`\n        \t\t                   #will retry on failures on the Telegram server.\n        \t\t                   #|   < 0 - retry indefinitely\n        \t\t                   #|     0 - no retries (default)\n        \t\t                   #|   > 0 - retry up to X times\n\n        \t\t   #'POLL_READ_LATENCY':(Optional[float|int]), # Grace time in seconds for receiving the reply from\n        \t\t                   #server. Will be added to the `timeout` value and used as the read timeout from\n                                   #server (Default: 2).\n                },\n                #Other bots here with same structure.\n            ],\n\n        }\n\n\n\nInclude in your urls.py the ``django_telegrambot.urls`` (NB: If you upgrade from a previous version, you MUST change how to include ``django_telegrambot.urls``. Never set prefix here!)::\n\n        #urls.py\n        urlpatterns = [\n            ...\n            url(r'^', include('django_telegrambot.urls')),\n            ...\n        ]\n\nThen use it in a project creating a module ``telegrambot.py`` in your app ::\n\n        #myapp/telegrambot.py\n        # Example code for telegrambot.py module\n        from telegram.ext import CommandHandler, MessageHandler, Filters\n        from django_telegrambot.apps import DjangoTelegramBot\n\n        import logging\n        logger = logging.getLogger(__name__)\n\n\n        # Define a few command handlers. These usually take the two arguments bot and\n        # update. Error handlers also receive the raised TelegramError object in error.\n        def start(bot, update):\n            bot.sendMessage(update.message.chat_id, text='Hi!')\n\n\n        def help(bot, update):\n            bot.sendMessage(update.message.chat_id, text='Help!')\n\n\n        def echo(bot, update):\n            bot.sendMessage(update.message.chat_id, text=update.message.text)\n\n\n        def error(bot, update, error):\n            logger.warn('Update \"%s\" caused error \"%s\"' % (update, error))\n\n\n        def main():\n            logger.info(\"Loading handlers for telegram bot\")\n\n            # Default dispatcher (this is related to the first bot in settings.DJANGO_TELEGRAMBOT['BOTS'])\n            dp = DjangoTelegramBot.dispatcher\n            # To get Dispatcher related to a specific bot\n            # dp = DjangoTelegramBot.getDispatcher('BOT_n_token')     #get by bot token\n            # dp = DjangoTelegramBot.getDispatcher('BOT_n_username')  #get by bot username\n\n            # on different commands - answer in Telegram\n            dp.add_handler(CommandHandler(\"start\", start))\n            dp.add_handler(CommandHandler(\"help\", help))\n\n            # on noncommand i.e message - echo the message on Telegram\n            dp.add_handler(MessageHandler([Filters.text], echo))\n\n            # log all errors\n            dp.add_error_handler(error)\n\n            # log all errors\n            dp.addErrorHandler(error)\n\n\n\nFeatures\n--------\n\n* Multiple bots\n\nContributing\n------------\n\nPatches and bug reports are welcome, just please keep the style consistent with the original source.\n\nRunning Tests\n--------------\n\nDoes the code actually work?\n\n::\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install -r requirements-test.txt\n    (myenv) $ python runtests.py\n\nSample Application\n------------------\nThere a sample application in `sampleproject` directory. Here is installation instructions:\n\n1. Install requirements with command\n\n        pip install -r requirements.txt\n2. Copy file `local_settings.sample.py` as `local_settings.py` and edit your bot token\n\n        cp sampleproject/local_settings.sample.py sampleproject/local_settings.py\n\n        nano sampleproject/local_settings.py\n3. Run Django migrations\n\n        python manage.py migrate\n4. Run server\n\n        python manage.py runserver\n5. To test webhook locally install `ngrok` application and run command\n\n        ./ngrok http 8000\n6. Change `WEBHOOK_SITE` and `ALLOWED_HOSTS` in local_settings.py file\n\nCredits\n---------\nRequired package:\n* `Python Telegram Bot`_\n\n.. _`Python Telegram Bot`: https://github.com/python-telegram-bot/python-telegram-bot\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n\n\n\n\n\nHistory\n-------\n1.0.0 (2017-05-25)\n++++++++++++++++++\n* IMPORTANT: If you upgrade from a previous version, you MUST change how to include django_telegrambot.urls and settings.py.\n* Added admin dashboard, available at /admin/django-telegrambot\n* Added polling mode from management command (an easy to way to run bot in local machine, not recommended in production)\n* More setting available\n* Improved AppConfig\n* Improved sample project\n\n0.2.6 (2017-04-08)\n++++++++++++++++++\n* Improved module loading\n* Added sample project\n\n0.2.5 (2017-03-06)\n++++++++++++++++++\n* Fix compatibility with python-telegram-bot 5.1\n\n0.2.4 (2016-10-04)\n++++++++++++++++++\n* Fix compatibility with Django 1.10\n\n0.2.3 (2016-07-30)\n++++++++++++++++++\n* Fix default dispatcher and bot\n\n0.2.2 (2016-07-27)\n++++++++++++++++++\n* Fix multi workers\n\n0.2.1 (2016-07-24)\n++++++++++++++++++\n* Update for python-telegram-bot release v5.0\n\n0.2.0 (2016-04-27)\n++++++++++++++++++\n\n* Update for python-telegram-bot release v4.0.1\n\n0.1.8 (2016-03-22)\n++++++++++++++++++\n\n* Update for deprecation in python-telegram-bot release v3.4\n\n0.1.5 (2016-01-28)\n++++++++++++++++++\n\n* Fix compatibility.\n\n0.1.4 (2016-01-28)\n++++++++++++++++++\n\n* Fix compatibility.\n\n0.1.3 (2016-01-28)\n++++++++++++++++++\n\n* Fix setting certificate.\n* Add method DjangoTelegramBot.getBot(); get bot instance by token or username.\n\n0.1.2 (2016-01-26)\n++++++++++++++++++\n\n* First release on PyPI.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JungDev/django-telegrambot",
    "keywords": "django-telegrambot",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-telegrambot",
    "package_url": "https://pypi.org/project/django-telegrambot/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-telegrambot/",
    "project_urls": {
      "Homepage": "https://github.com/JungDev/django-telegrambot"
    },
    "release_url": "https://pypi.org/project/django-telegrambot/1.0.0/",
    "requires_dist": [
      "python-telegram-bot"
    ],
    "requires_python": "",
    "summary": "A simple app to develop Telegram bot with Django",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2918671,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4032d5061ccc185a2153ff3e1dd86fa4c181678d15784ba7acb6b9703bfe7097",
        "md5": "4d313d8f4d4c34ae34dee818da6ce438",
        "sha256": "41305bf10496197dc5070355a14da21cee21a445bcc7e62049101ca3f5db7ceb"
      },
      "downloads": -1,
      "filename": "django_telegrambot-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d313d8f4d4c34ae34dee818da6ce438",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 17512,
      "upload_time": "2017-05-25T19:19:42",
      "upload_time_iso_8601": "2017-05-25T19:19:42.064048Z",
      "url": "https://files.pythonhosted.org/packages/40/32/d5061ccc185a2153ff3e1dd86fa4c181678d15784ba7acb6b9703bfe7097/django_telegrambot-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}