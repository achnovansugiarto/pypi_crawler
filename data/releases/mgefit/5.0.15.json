{
  "info": {
    "author": "Michele Cappellari",
    "author_email": "michele.cappellari@physics.ox.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "The MgeFit Package\r\n==================\r\n\r\n**MgeFit: Multi-Gaussian Expansion Fitting of Galactic Images**\r\n\r\n.. image:: https://img.shields.io/pypi/v/mgefit.svg\r\n        :target: https://pypi.org/project/mgefit/\r\n.. image:: https://img.shields.io/badge/arXiv-astroph:0201430-orange.svg\r\n        :target: https://arxiv.org/abs/astro-ph/0201430\r\n.. image:: https://img.shields.io/badge/DOI-10.1046/...-green.svg\r\n        :target: https://doi.org/10.1046/j.1365-8711.2002.05412.x\r\n\r\nMgeFit is a Python implementation of the robust and efficient Multi-Gaussian\r\nExpansion (MGE) fitting algorithm for galactic images of `Cappellari (2002)\r\n<https://ui.adsabs.harvard.edu/abs/2002MNRAS.333..400C>`_.\r\n\r\nThe MGE parameterization is useful in the construction of realistic dynamical \r\nmodels of galaxies (see `JAM modelling <https://pypi.org/project/jampy/>`_), \r\nfor PSF deconvolution of images, for the correction and estimation of dust \r\nabsorption effects, or for galaxy photometry.\r\n\r\n.. contents:: :depth: 2\r\n\r\nAttribution\r\n-----------\r\n\r\nIf you use this software for your research, please cite\r\n`Cappellari (2002) <https://ui.adsabs.harvard.edu/abs/2002MNRAS.333..400C>`_.\r\nThe BibTeX entry for the paper is::\r\n\r\n    @Article{Cappellari2002,\r\n        author = {{Cappellari}, M.},\r\n        title = {Efficient multi-Gaussian expansion of galaxies},\r\n        journal = {MNRAS},\r\n        eprint = {arXiv:astro-ph/0201430}\r\n        year = {2002},\r\n        volume = {333},\r\n        pages = {400-410},\r\n        doi = {10.1046/j.1365-8711.2002.05412.x}\r\n    }\r\n\r\n\r\nInstallation\r\n------------\r\n\r\ninstall with::\r\n\r\n    pip install mgefit\r\n\r\nWithout writing access to the global ``site-packages`` directory, use::\r\n\r\n    pip install --user mgefit\r\n    \r\nTo upgrade MgeFit to the latest version use::\r\n\r\n    pip install --upgrade mgefit    \r\n\r\nUsage Examples\r\n--------------\r\n\r\nTo learn how to use the ``MgeFit`` package, copy, modify and run \r\nthe example programs in the ``mgefit/examples`` directory. \r\nIt can be found within the main ``MgeFit`` package installation folder \r\ninside `site-packages <https://stackoverflow.com/a/46071447>`_. \r\nThe detailed documentation is contained in the docstring of each file, \r\nor for the main procedure on `PyPi <https://pypi.org/project/mgefit/>`_.\r\n\r\n###########################################################################\r\n\r\nmge_fit_sectors\r\n===============\r\n\r\nPurpose\r\n-------\r\n\r\nApproximates the surface brightness of a galaxy with a Multi-Gaussian Expansion\r\n(MGE) model, using the robust and automated fitting method of\r\n`Cappellari (2002) <https://ui.adsabs.harvard.edu/abs/2002MNRAS.333..400C>`_.\r\n\r\nThe measurements are taken along sectors with a previous call to the\r\nprocedure ``sectors_photometry`` in the ``MgeFit`` package .\r\nAll measurements within this program are in the instrumental units of ``pixels``\r\nand ``counts``. This routine fits MGE models with constant position angle and\r\ncommon center.\r\n\r\nCalling Sequence\r\n----------------\r\n\r\n.. code-block:: python\r\n\r\n    from mgefit.mge_fit_sectors import mge_fit_sectors\r\n\r\n    m = mge_fit_sectors(radius, angle, counts, eps,\r\n             bulge_disk=False, fignum=1, linear=False, negative=False,\r\n             ngauss=None, normpsf=1., outer_slope=4, plot=False, qbounds=None,\r\n             quiet=False, rbounds=None, scale=1., sigmapsf=0., sol=0)\r\n\r\n    total_counts, sigma, q_obs = m.sol  # assign the solution to variables\r\n    print(m.sol.T)  # Print a table of best-fitting MGE parameters\r\n\r\nExample programs are in the ``mgefit/examples`` directory.\r\nIt can be found within the main ``MgeFit`` package installation folder\r\ninside `site-packages <https://stackoverflow.com/a/46071447>`_.\r\n\r\nA PDF manual ``readme_mge_fit_sectors.pdf`` is contained in the main\r\ninstallation directory ``mgefit`` of the package inside\r\n`site-packages <https://stackoverflow.com/a/46071447>`_.\r\n\r\nInput Parameters\r\n----------------\r\n\r\nradius: array_like with shape (n,)\r\n    Vector containing the radius of the surface brightness\r\n    measurements, taken from the galaxy center. This is given\r\n    in units of PIXELS (!) of the image. When fitting multiple images\r\n    simultaneously this is in pixels units of the high-resolution image.\r\nangle: array_like with shape (n,)\r\n    Vector containing the polar angle of the surface brightness\r\n    measurements, measured from the galaxy major axis (in degrees).\r\ncounts: array_like with shape (n,)\r\n    Vector containing the surface brightness measurements in COUNTS/PIXEL (!) at\r\n    the polar coordinates specified by the vectors ``radius`` and ``angle``.\r\n    When fitting multiple images simultaneously this is in counts/pixels units\r\n    of the high-resolution image.\r\neps:\r\n    Crude estimate for the galaxy characteristic ellipticity\r\n    ``eps = 1 - b/a = 1 - q'``\r\n\r\nOptional Keywords\r\n-----------------\r\n\r\nbulge_disk:\r\n    Set ``bulge_disk=True`` to perform a non-parametric bulge/disk\r\n    decomposition using MGE. When ``bulge_disk=True`` the Gaussians\r\n    are divided into two sets, each with a unique axial ratio. The two\r\n    sets are meant to describe and model the contribution of bulge and\r\n    disks in spiral or lenticular galaxies, or nuclear disk in ellipticals.\r\n\r\n    When this keyword is set one should increase ``ngauss``.\r\n    One should also either set ``qbounds=None`` or specify four\r\n    elements in ``qbounds`` for the even/odd Gaussians.\r\nfignum:\r\n    Optional number to assign to the plotting window.\r\nlinear:\r\n    Set this keyword to start with the fully linear algorithm\r\n    and then optimize the fit with the nonlinear method\r\n    [see Section 3.4 of `Cappellari (2002)`_ for details].\r\n    Nowadays using this keyword instroduces a small speed panelty but\r\n    produces more robust fits and is always reccomended.\r\nnegative:\r\n    Set this keyword to allow for negative Gaussians in the fit.\r\n    Use this only if everything else didn't work or if there is clear\r\n    evidence that negative Gaussians are actually needed.\r\n    Negative Gaussians are needed e.g. when fitting a boxy bulge.\r\nngauss:\r\n    Maximum number of Gaussians allowed in the MGE fit.\r\n    Typical values are in the range 10-20 when ``linear=False``\r\n    (default: ``ngauss=12``) and ``20**2-40**2`` when ``linear=True``\r\n    (default: ``ngauss=30**2=900``).\r\nnormpsf: array_like with shape (p,)\r\n    This is optional if only a scalar is given for ``sigmapsf``, otherwise it\r\n    must contain the normalization of each MGE component of the PSF, whose\r\n    sigma is given by ``sigmapsf``. The vector needs to have the same number of\r\n    elements as ``sigmapsf`` and it must be normalized as ``normpsf.sum() = 1``\r\n    (default: ``normpsf=1``).\r\nouter_slope:\r\n    This scalar forces the surface brightness profile of\r\n    the MGE model to decrease at least as fast as ``R**(-outer_slope)``\r\n    at the largest measured radius (Default: ``outer_slope=2``).\r\nplot:\r\n    Set ``plot=True`` to plot the best-fitting MGE profiles.\r\nqbounds:\r\n    This can be either a two or a four elements vector.\r\n\r\n    If ``qbounds`` has two elements, it gives the minimum and maximum\r\n    axial ratio ``q`` allowed in the MGE fit.\r\n\r\n    If ``qbounds`` has four elements ``[[qMin1, qMax1], [qMin2, qMax2]]``,\r\n    then the first two elements give the limits on ``q`` for the even\r\n    Gaussians, while the last two elements give the limits on ``q`` for the\r\n    odd Gaussians. In this way ``qbounds`` can be used to perform disk/bulges\r\n    decompositions in a way similar to the ``bulge_disk`` keyword.\r\nquiet:\r\n    Set ``quiet = True`` to suppress printed output.\r\nrbounds:\r\n    Two elements vector giving the minimum and maximum ``sigma``\r\n    allowed in the MGE fit. This is in the same PIXELS units as ``radius``.\r\nscale:\r\n    The pixel scale in arcsec/pixels. This is *only* used for the scale on\r\n    the plots. It has no influence on the output. (default: 1)\r\nsigmapsf: array_like with shape (p,)\r\n    Scalar giving the ``sigma`` of the PSF, or vector with the ``sigma`` of an\r\n    MGE model for the circular PSF. This is in the same PIXELS units as ``radius``.\r\n    When fitting multiple images simultaneously this is the PSF of the\r\n    high-resolution image [see pg. 406 of `Cappellari (2002)`_ for details].\r\n    (Default: no convolution)\r\nsol:\r\n    If this keyword has at least 6 elements in input, the sigma\r\n    and q_obs will be used as starting point for the optimization.\r\n    This is useful for testing but is never needed otherwise.\r\n    The format is described in the Output Parameters below.\r\n\r\nOutput Parameters\r\n-----------------\r\n\r\nStored as attributes of the ``MgeFit`` class:\r\n\r\n.sol: array_like with shape (3, ngauss)\r\n    Array with the best-fitting MGE solution:\r\n\r\n    .sol[0]: array_like with shape (ngauss)\r\n        ``total_counts`` of the Gaussian components;\r\n    .sol[1]: array_like with shape (ngauss)\r\n        ``sigma`` is the dispersion of the best-fitting Gaussians in pixels;\r\n    .sol[2]: array_like with shape (ngauss)\r\n        ``q_obs`` is the observed axial ratio of the best-fitting\r\n        Gaussian components [q' in the notation of `Cappellari (2002)`_].\r\n\r\n    The relation below gives the Gaussians peak surface brightness ``surf``::\r\n\r\n        total_counts, q_obs, sigma = m.sol  # Assign MGE solution to variables\r\n        surf = total_counts/(2*np.pi*q_obs*sigma**2)\r\n\r\nabsdev:\r\n    Mean absolute deviation between the fitted MGE and the\r\n    data expressed as a fraction. Good fits to high S/N images\r\n    can reach values of ``absdev < 0.02 = 2%``.\r\n\r\n###########################################################################\r\n\r\nmge_fit_1d\r\n==========\r\n\r\nPurpose\r\n-------\r\n\r\nApproximates the 1-dim radial profile of the density or surface-brightness \r\nof a galaxy with a Multi-Gaussian Expansion (MGE) model, using the robust \r\nand automated fitting method of\r\n`Cappellari (2002) <https://ui.adsabs.harvard.edu/abs/2002MNRAS.333..400C>`_.\r\n\r\nCalling Sequence\r\n----------------\r\n\r\n.. code-block:: python\r\n\r\n    p = mge_fit_1d(x, y, negative=False, ngauss=12, rbounds=None,\r\n                   inner_slope=2, outer_slope=3, quiet=False, fignum=1)\r\n    \r\n    total_counts, sigma = p.sol  # Assign the solution to variables\r\n    print(m.sol.T)  # Print a table of best-fitting MGE parameters\r\n\r\nSee usage example at the end of this file.\r\n\r\nInput Parameters\r\n----------------\r\n\r\nx: array_like with shape (n,)\r\n    Vector of the logarithmically sampled (Important!)\r\n    abscissa for the profile that has to be fitted.\r\ny: array_like with shape (n,)\r\n    Ordinate of the profile evaluated at the abscissa `x`.\r\n\r\nOptional Keywords\r\n-----------------\r\n\r\nngauss:\r\n    Number of Gaussian on want to fit. Typical values are 10-20.\r\n\r\nnegative:\r\n    Set ``negative=True`` to allow for negative Gaussians in the fit.\r\n    Use this only if there is clear evidence that negative Gaussians\r\n    are actually needed e.g. to fit a radially increasing profile.\r\n\r\ninner_slope:\r\n    This scalar forces the surface brightness profile of the MGE model to\r\n    decrease as ``R**(-inner_slope)`` at the smallest measured radius\r\n    (Default: ``inner_slope=2``). The default is generally ok, but it can\r\n    be changed e.g. to allow for steeper inner profiles.\r\n\r\nouter_slope:\r\n    This scalar forces the surface brightness profile of the MGE model to\r\n    decrease as ``R^(**outer_slope)`` at the largest measured radius\r\n    (Default: ``outer_slope=3``). The default is generally ok, but it can\r\n    be changed e.g. to allow for a sharper outer truncation.\r\n\r\nrbounds:\r\n    Two elements vector giving the minimum and maximum sigma allowed in the\r\n    MGE fit. This is in the same units of ``x``. With this keyword,\r\n    ``inner_slope`` and ``outer_slope`` are ignored.\r\n\r\nquiet:\r\n    Set ``quiet=True`` to suppress plots and printed output.\r\n\r\nOutput Parameters\r\n-----------------\r\n\r\nStored as attributes of the ``mge_fit_1d`` class:\r\n\r\n.sol: array_like with shape (2, ngauss)\r\n    Contains an array with the best-fitting solution:\r\n\r\n    .sol[0]: array_like with shape (ngauss)\r\n        ``TotalCounts`` (area under the 1-dim curve) of the Gaussians.\r\n    .sol[1]: array_like with shape (ngauss)\r\n        ``sigma``, is the dispersion of the Gaussians in units of ``x``.\r\n\r\n    IMPORTANT: Given the ``TotalCounts`` definition:\r\n\r\n    - If the fit was done to the projected surface density profile\r\n      ``(Msun/pc^2)`` the Gaussians peak surface densities\r\n      ``(Msun/pc^2)`` are given by::\r\n\r\n        surf = TotalCounts/(np.sqrt(2*np.pi)*Sigma)\r\n\r\n    - If the fit was done to the intrinsic density profile ``(Msun/pc^3)``\r\n      the Gaussians peak densities ``(Msun/pc^3)`` are still given by::\r\n\r\n        dens = TotalCounts/(np.sqrt(2*np.pi)*Sigma)\r\n\r\n    - In either case, one can convert between densities in ``(Msun/pc^3)``\r\n      and surface densities in ``(Msun/pc^2)`` using the formula::\r\n\r\n        dens = surf/(np.sqrt(2*np.pi)*Sigma)\r\n        \r\n      This is eq. (6) of the file ``readme_mge_fit_sectors.pdf`` \r\n      contained in the main installation directory ``mgefit`` of the \r\n      package inside `site-packages <https://stackoverflow.com/a/46071447>`_.\r\n\r\nExample\r\n-------\r\n\r\nThe sequence of commands below was used to generate the\r\none-dimensional MGE fit of Fig.3 in `Cappellari (2002)`_\r\n\r\n.. code-block:: python\r\n\r\n    import numpy as np\r\n    from mgefit.mge_fit_1d import mge_fit_1d\r\n\r\n    n = 300 # Number of sampled points\r\n    R = np.geomspace(0.01, 300, n)  # radii must be logarithmically sampled\r\n    rho = (1 + R)**(-4)\r\n    p = mge_fit_1d(R, rho, ngauss=16)\r\n\r\n###########################################################################\r\n\r\nfind_galaxy\r\n===========\r\n\r\nPurpose\r\n-------\r\n\r\nFind the largest region of connected pixels (after smoothing)\r\nlying above a given intensity level of the image.\r\nThis is useful to automatically identify the location and orientation of\r\na galaxy in an image, assuming it is the largest positive fluctuation.\r\nThe conventions used by this routine are the same as for the rest\r\nof the ``MgeFit```` package.\r\n\r\nThis procedure uses the weighted first and second moments of the intensity\r\ndistribution for the computation of the galaxy center and position angle.\r\n\r\nCalling Sequence\r\n----------------\r\n\r\n.. code-block:: python\r\n\r\n    from mgefit.find_galaxy import find_galaxy\r\n\r\n    f = find_galaxy(img, binning=5, fraction=0.1, level=None,\r\n                    nblob=1, plot=False, quiet=False)\r\n    print('Ellipticity: %.3f' % f.eps)\r\n\r\nInput Parameters\r\n----------------\r\n\r\nImg: array_like with shape (nr, nc)\r\n    The galaxy images as a 2-dim array.\r\n\r\nOptional Keywords\r\n-----------------\r\n\r\nbinning: float, optional\r\n    pixel scale for the image smoothing applied before selection.\r\nfraction: float, optional\r\n    This corresponds (approximately) to the fraction\r\n    ``[0 < fraction < 1]`` of the image pixels that one wants to consider\r\n    to estimate galaxy parameters (default ``fraction = 0.1 = 10%``)\r\nlevel: float, optional\r\n    Level above which to select pixels to consider in the\r\n    estimate of the galaxy parameters. This is an alternative\r\n    to the use of the ``fraction`` keyword.\r\nnblob: int, optional\r\n    If ``nblob=1`` (default) the procedure selects the largest feature\r\n    in the image, if ``nblob=2`` the second largest is selected, and so\r\n    on for increasing values of ``nblob``. This is useful when the\r\n    galaxy is not the largest feature in the image.\r\nplot: boolean, optional\r\n    set ``plot=True`` to display an image in the current graphic window\r\n    showing the pixels used in the computation of the moments.\r\nquiet: boolean, optional\r\n    Set ``quiet = True`` to suppress printed output.\r\n\r\nOutput Parameters\r\n-----------------\r\n\r\nStored as attributes of the ``find_galaxy`` class:\r\n\r\n.eps:\r\n    The galaxy \"average\" ellipticity ``Eps = 1 - b/a = 1 - q'``.\r\n.pa:\r\n    Standard astronomical PA measured counter-clockwise from the image ``Y``\r\n    axis (assumed to coincide with North). Note: ``f.pa = 270 - f.theta``.\r\n.theta:\r\n    Position angle measured clock-wise from the image ``X`` axis.\r\n.majoraxis:\r\n    Maximum distance of any of the the selected pixels from ``(xmed, ymed)``.\r\n    For a standar galaxy surface brightness this corresponds to the\r\n    major axis of the selected isophote.\r\n.xpeak:\r\n    First index (row) in ``Img``, of the pixel containing the galaxy center.\r\n    To be precise this coordinate represents the first index of the brightest\r\n    pixels within a 40x40 pixels box centered on the galaxy average center.\r\n\r\n    IMPORTANT: The brightest galaxy pixel is the element ``Img[xpeak, ypeak]``.\r\n    In the plot produced by ``find_galaxy``, the brightest pixel has\r\n    coordinates ``(Ypeak, Xpeak)``, with the two coordinates swapped!\r\n.ypeak:\r\n    Second index (column) in Img, of the brightest galaxy pixel.\r\n.xmed:\r\n    ``X`` coordinate of luminosity weighted galaxy center.\r\n.ymed:\r\n    ``Y`` coordinate of luminosity weighted galaxy center.\r\n\r\nExample\r\n-------\r\n\r\nThe command below locates the position and orientation of a galaxy\r\nin the image ``Img```` and produces a plot showing the obtained results\r\nand the region of the image used in the computation:\r\n\r\n.. code-block:: python\r\n\r\n    f = find_galaxy(img, plot=True)\r\n    print(f'Ellipticity: {f.eps:.3f}')\r\n\r\nThe command below only uses 2% of the image pixels to estimate\r\nthe intensity weighted moments and show the results:\r\n\r\n.. code-block:: python\r\n\r\n    f = find_galaxy(img, fraction=0.02, plot=True)\r\n    print(f'Coordinates of the peak intensity: {f.xpeak} {f.xpeak}')\r\n\r\n###########################################################################\r\n\r\n\r\nLicense\r\n=======\r\n\r\nOther/Proprietary License\r\n\r\nCopyright (c) 1999-2023 Michele Cappellari\r\n\r\nThis software is provided as is without any warranty whatsoever.\r\nPermission to use, for non-commercial purposes is granted.\r\nPermission to modify for personal or internal use is granted,\r\nprovided this copyright and disclaimer are included in all \r\ncopies of the software. All other rights are reserved.\r\nIn particular, redistribution of the code is not allowed.\r\n\r\nChangelog\r\n=========\r\n\r\nV5.0.15: MC, Oxford, 31 March 2023\r\n    - `mge_print_contours`, `mge_print_contours_twist`: New keyword `minlevel`.\r\n    - `mge_print_contours`, `mge_print_contours_twist`: Analytic integral of the central pixel.\r\n    - `mge_fit_examples`: Updated to use `minlevel` keyword.\r\n    - Included documentation of more functions on PyPi.\r\n\r\nV5.0.14: MC, Oxford, 24 June 2021\r\n    - Formatted documentation as reStructuredText.\r\n\r\nV5.0.13: MC, Oxford, 1 October 2020\r\n    - With ``negative=True`` use Numpy linalg.lstsq instead of Scipy\r\n      for a better default in the criterion for rank deficiency.\r\n      Fixed ignoring negative weights in output with ``negative=True``.  \r\n\r\nV5.0.12: MC, Oxford, 1 October 2018\r\n    - Fixed clock DeprecationWarning in Python 3.7.\r\n      Use SciPy 1.1 `maxiter` keyword in `nnls`. \r\n\r\nV5.0.11: MC, Oxford, 12 May 2018\r\n    - Dropped legacy Python 2.7 support. \r\n\r\nV5.0.10: MC, Oxford, 17 April 2018\r\n    - Changed imports for mgefit package. \r\n\r\nV5.0.9: MC, Oxford, 21 November 2017\r\n    - changed `sigmapsf` and `normpsf` keywords to lowercase.  \r\n\r\nV5.0.8: MC, Oxford, 25 May 2017\r\n    - _fitfunc() does not return unused status any more, for consistency \r\n      with the corresponding change to cap_mpfit. \r\n\r\nV5.0.7: MC, Oxford, 14 February 2017\r\n    - Make plot() callable after the program terminates.\r\n      Included `fignum` keyword and removed obsolete `debug` keyword.\r\n      Use line colors from current color cycle. \r\n\r\nV5.0.6: MC, Oxford, 24 January 2017\r\n    - Improved labelling for Matplotlib 2.0. \r\n\r\nV5.0.5: MC, Oxford, 18 June 2015\r\n    - Fixed plotting issue when combining profiles from multiple images.\r\n      Thanks to Arianna Picotti (MPIA) for the bug report with examples.\r\n      Only plot profiles for the best-fitting MGE. \r\n\r\nV5.0.4: MC, Atlantic Ocean, 6 June 2015\r\n    - Fully broadcast _fitfunc. \r\n\r\nV5.0.3: MC, Atlantic Ocean, 28 March 2015\r\n    - Make sure qbounds is a Numpy array. Include absdev in the class attributes.\r\n      Nicely format printed solution. \r\n\r\nV5.0.2: MC, Oxford, 24 September 2014\r\n    - Improved plotting. \r\n\r\nV5.0.1: MC, Oxford, 25 May 2014\r\n    - Support both Python 2.7 and Python 3. \r\n\r\nV5.0.0: MC, Aspen Airport, 8 February 2014\r\n    - Translated from IDL into Python. \r\n\r\nV4.1.3: MC, Oxford, 23 January 2013\r\n    - Explained optional usage of SOL in input.\r\n      Removed stop when MPFIT reports over/underflow.  \r\n\r\nV4.1.2: MC, Oxford, 24 April 2012\r\n    - Small change to the treatment of the innermost unresolved Gaussians. \r\n\r\nV4.1.1: MC, Oxford, 12 November 2010\r\n    - Added keyword /QUIET. \r\n\r\nV4.1.0: MC, Oxford, 22 April 2010\r\n    - Allow QBOUNDS to have four elements, to perform bulge/disk\r\n      decompositions similarly to the /BULGE_DISK option.  \r\n\r\nV4.0.1: MC, Oxford, 6 June 2009\r\n    - Added output keyword ABSDEV. Fixed display not being updated\r\n      while iterating under Windows. \r\n\r\nV4.0.0: MC, Windhoek, 5 October 2008\r\n    - Added /BULGE_DISK keyword to perform non-parametric bulge/disks\r\n      decompositions using MGE. Updated MPFIT to version v1.52 2008/05/04,\r\n      to fix a bug with the required parinfo.tied mechanism. In the new\r\n      version of MPFIT, which I again renamed MGE_MPFIT, I implemented\r\n      my previous important modification to improve convergence with\r\n      MGE_FIT_SECTORS. \r\n\r\nV3.9.5: MC, Oxford, 24 September 2008\r\n    - Force Gaussians smaller than the PSF, which have a degenerate\r\n      axial ratio, to have the same axial ratio as the mean of the first\r\n      two well determined Gaussians. \r\n\r\nV3.9.4: MC, Oxford, 16 May 2008\r\n    - Use more robust la_least_squares (IDL 5.6) instead of SVDC with\r\n      /NEGATIVE keyword. \r\n\r\nV3.9.3: MC, Leiden, 18 October 2005\r\n    - Changed axes labels in plots. \r\n\r\nV3.9.2: MC, Leiden, 11 October 2005\r\n    - Print iterations of the longer part at the end, not of the\r\n      short \"Gaussian cleaning\" part. \r\n\r\nV3.9.1: MC, Leiden, 1 May 2005\r\n    - Replaced LOGRANGE keyword in example with the new MAGRANGE.\r\n\r\nV3.9.0: MC, Leiden, 23 October 2004\r\n    - Allow forcing the outer slope of the surface brightness profile of\r\n      the MGE model to decrease at least as R**-n at the largest measured\r\n      radius (cfr. version 3.8).\r\n      Clean the solution at the end of the nonlinear fit as already done in\r\n      the /LINEAR implementation. It's almost always redundant, but quick.  \r\n\r\nV3.8.1: MC, Vicenza, 23 August 2004\r\n    - Make sure this routine uses the Nov/2000 version of Craig Markwardt\r\n      MPFIT which was renamed MGE_MPFIT to prevent potential conflicts with\r\n      more recent versions of the same routine. \r\n\r\nV3.8.0: MC, Leiden, 8 May 2004\r\n    - Force the surface brightness of the MGE model to decrease at\r\n      least as R**-2 at the largest measured radius. \r\n\r\nV3.7.6: MC, Leiden, 20 March 2004\r\n    - Use updated calling sequence for BVLS. \r\n\r\nV3.7.5: MC, Leiden 23 July 2003\r\n    - Corrected small bug introduced in V3.73. Thanks to Arend Sluis. \r\n\r\nV3.7.4: MC, Leiden, 9 May 2003\r\n    - Use N_ELEMENTS instead of KEYWORD_SET to test\r\n      non-logical keywords. \r\n\r\nV3.7.3: MC, Leiden, 7 March 2003\r\n    - Force the input parameters to the given bounds if they\r\n      fall outside the required range before starting the fit.\r\n      After feedback from Remco van den Bosch.\r\n\r\nV3.7.2: MC, Leiden, 13 October 2002\r\n    - Added ERRMSG keyword to MPFIT call.\r\n\r\nV3.7.1: MC, Leiden 20 May 2002\r\n    - Added compilation options.\r\n\r\nV3.7.0: MC, Leiden, 23 February 2002\r\n    - Added explicit stepsize (STEP) of numerical derivative in\r\n      parinfo structure, after suggestion by Craig B. Markwardt.\r\n\r\nV3.6.0: MC, Leiden, 23 October 2001\r\n    - Modified implementation of /NEGATIVE keyword.\r\n          \r\nV3.5.0: MC, Leiden, 8 October 2001\r\n    - Updated documentation.\r\n\r\nV3.4.0: MC, Leiden, 20 September 2001\r\n    - Added /FASTNORM keyword\r\n\r\nV3.3.0: MC, Leiden, 26 July 2001\r\n    - Added MGE PSF convolution, central pixel integration and changed\r\n      program input parameters to make it independent from SECTORS_PHOTOMETRY\r\n\r\nV3.2.0: MC, Leiden, 8 July 2001\r\n    - Graphical changes: always show about 7 sectors on the screen, \r\n      and print plots with shared axes. \r\n\r\nV3.1.0: MC, Leiden, 27 April 2001\r\n    - More robust definition of err in FITFUNC_MGE_SECTORS.\r\n\r\nV3.0.0: MC, Padova, July 2000\r\n    - Significant changes.\r\n\r\nV2.0.0: MC, Leiden, January 2000\r\n    - Major revisions.\r\n\r\nV1.0.0: Padova, February 1999\r\n    - First implementation by Michele Cappellari.\r\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://purl.org/cappellari/software",
    "keywords": "",
    "license": "Other/Proprietary License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mgefit",
    "package_url": "https://pypi.org/project/mgefit/",
    "platform": null,
    "project_url": "https://pypi.org/project/mgefit/",
    "project_urls": {
      "Homepage": "https://purl.org/cappellari/software"
    },
    "release_url": "https://pypi.org/project/mgefit/5.0.15/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MgeFit: Multi-Gaussian Expansion Fitting of Galactic Images",
    "version": "5.0.15",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17526541,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc05219fd4d0b9b2bbb4d1fe0943ef4c9fc71bf6c0e091c76785ecb6565ece89",
        "md5": "d8a5907176ebf9c5ba2593b4e63eb41f",
        "sha256": "511265948414f86dc7bbf1fb13fcd082448788c8970e59567d798e8edfee9367"
      },
      "downloads": -1,
      "filename": "mgefit-5.0.15.tar.gz",
      "has_sig": false,
      "md5_digest": "d8a5907176ebf9c5ba2593b4e63eb41f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11472702,
      "upload_time": "2023-03-31T12:51:38",
      "upload_time_iso_8601": "2023-03-31T12:51:38.051892Z",
      "url": "https://files.pythonhosted.org/packages/dc/05/219fd4d0b9b2bbb4d1fe0943ef4c9fc71bf6c0e091c76785ecb6565ece89/mgefit-5.0.15.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}