{
  "info": {
    "author": "Michael van Tellingen",
    "author_email": "michaelvantellingen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "===================\ndjango-healthchecks\n===================\n\nSimple Django app/framework to publish health check for monitoring purposes\n\nFeatures:\n\n* Custom checks via Python functions\n* Remote healthchecks\n* Heartbeat monitoring\n\n\nStatus\n======\n.. image:: https://github.com/mvantellingen/django-healthchecks/workflows/Python%20Tests/badge.svg\n    :target: https://github.com/mvantellingen/django-healthchecks/actions?query=workflow%3A%22Python+Tests%22\n\n.. image:: http://codecov.io/github/mvantellingen/django-healthchecks/coverage.svg?branch=master\n    :target: http://codecov.io/github/mvantellingen/django-healthchecks?branch=master\n\n.. image:: https://img.shields.io/pypi/v/django-healthchecks.svg\n    :target: https://pypi.python.org/pypi/django-healthchecks/\n\nInstallation\n============\n\n.. code-block:: shell\n\n   pip install django_healthchecks\n\n\nUsage\n=====\n\nAdd the following to your urls.py:\n\n\n.. code-block:: python\n\n    url(r'^healthchecks/', include('django_healthchecks.urls')),\n\n\nAdd a setting with the available healthchecks:\n\n.. code-block:: python\n\n    HEALTH_CHECKS = {\n        'postgresql': 'django_healthchecks.contrib.check_database',\n        'cache_default': 'django_healthchecks.contrib.check_cache_default',\n        'solr': 'your_project.lib.healthchecks.check_solr',\n    }\n\n\nYou can also include healthchecks over http. This is useful when you want to\nmonitor if depending services are up:\n\n.. code-block:: python\n\n    HEALTH_CHECKS = {\n        ...\n        'my_microservice': 'https://my-service.services.internal/healthchecks/',\n        ...\n    }\n\n\nBy default, http health checks will time out after 500ms. You can override this\nas follows:\n\n.. code-block:: python\n\n    HEALTH_CHECKS_HTTP_TIMEOUT = 0.5\n\n\nBy default the status code is always 200, you can change this to something\nelse by using the `HEALTH_CHECKS_ERROR_CODE` setting:\n\n.. code-block:: python\n\n    HEALTH_CHECKS_ERROR_CODE = 503\n\n\nYou can also add some simple protection to your healthchecks via basic auth.\nThis can be specified per check or a wildcard can be used `*`.\n\n.. code-block:: python\n\n    HEALTH_CHECKS_BASIC_AUTH = {\n        '*': [('admin', 'pass')],\n        'solr': [],\n    }\n\n\nUsing heartbeats\n================\n\nHeartbeats give a periodic update, to see whether an service was recently active.\nWhen the service doesn't report back within timeout, a healthcheck can be triggered.\nTo use heartbeats, add the application to the ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        ...\n        \"django_healthchecks\",\n    ]\n\nInclude one of these checks:\n\n.. code-block:: python\n\n    HEALTH_CHECKS = {\n        ...\n        'heartbeats': 'django_healthchecks.contrib.check_heartbeats'\n        ...\n        'expired_heartbeats': 'django_healthchecks.contrib.check_expired_heartbeats',\n        ...\n    }\n\nOptionally, define an initial timeout:\n\n.. code-block:: python\n\n    HEALTHCHECKS_DEFAULT_HEARTBEAT_TIMEOUT = timedelta(days=1)\n\nLet your code track the beats:\n\n.. code-block:: python\n\n    from datetime import timedelta\n    from django_healthchecks.heartbeats import update_heartbeat\n\n    update_heartbeat(\"myservice.name\", default_timeout=timedelta(days=2))\n\nOr use the decorator:\n\n.. code-block:: python\n\n    from django_healthchecks.heartbeats import update_heartbeat_on_success\n\n    @update_heartbeat_on_success(\"myservice.name\", default_timeout=...)\n    def long_running_task():\n        ....\n\nEach time ``update_heartbeat()`` is called, the heartbeat is reset.\nWhen a heartbeat didn't receive an update before it's ``timeout``,\nthe service name be mentioned in the ``check_expired_heartbeats`` check.\n\nUpdating timeouts\n~~~~~~~~~~~~~~~~~\n\nThe ``default_timeout`` parameter is only assigned upon creation. Any updates\nhappen through the Django admin. To update the timeout automatically on\ncode deployment, use the ``timeout`` parameter instead. This will replace the\nstored timeout value each time the ``update_heartbeat()`` function\nis called, erasing any changes made in the Django admin.\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mvantellingen/django-healthchecks",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-healthchecks",
    "package_url": "https://pypi.org/project/django-healthchecks/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-healthchecks/",
    "project_urls": {
      "Homepage": "https://github.com/mvantellingen/django-healthchecks"
    },
    "release_url": "https://pypi.org/project/django-healthchecks/1.5.0/",
    "requires_dist": [
      "Django (>=3.2)",
      "requests (>=2.24.0)",
      "certifi (>=2020.6.20)",
      "sphinx (>=1.4.0) ; extra == 'docs'",
      "coverage[toml] (==5.2) ; extra == 'test'",
      "pytest (==6.2.5) ; extra == 'test'",
      "pytest-django (==3.9.0) ; extra == 'test'",
      "requests-mock (==1.8.0) ; extra == 'test'",
      "freezegun (==0.3.15) ; extra == 'test'",
      "isort (==5.0.6) ; extra == 'test'",
      "flake8 (==3.8.3) ; extra == 'test'",
      "flake8-blind-except (==0.1.1) ; extra == 'test'",
      "flake8-debugger (==3.2.1) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Simple Django app/framework to publish health checks",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14105883,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "383cc4063946ae0dfc3d16de5615b1e3161b8d88a768d70078b9811977703d80",
        "md5": "233a3f7d3e12641dd3dac9f1ecab736a",
        "sha256": "25eb021a4a94240b28d996e82775ad6c3b392a2b262360b965a24b88fcfad78d"
      },
      "downloads": -1,
      "filename": "django_healthchecks-1.5.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "233a3f7d3e12641dd3dac9f1ecab736a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12081,
      "upload_time": "2022-06-12T09:48:47",
      "upload_time_iso_8601": "2022-06-12T09:48:47.118216Z",
      "url": "https://files.pythonhosted.org/packages/38/3c/c4063946ae0dfc3d16de5615b1e3161b8d88a768d70078b9811977703d80/django_healthchecks-1.5.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9d08cf815b7cadd7ba9cf9ce527c92ba323c45c4060d77d9ae8bc6a357d962d",
        "md5": "3869fef543e4d7a626da91f7cbe135f2",
        "sha256": "0f167deaa30bde59552796799abf2a97a118bc190e8601eef713379703cf9f64"
      },
      "downloads": -1,
      "filename": "django-healthchecks-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3869fef543e4d7a626da91f7cbe135f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10653,
      "upload_time": "2022-06-12T09:48:48",
      "upload_time_iso_8601": "2022-06-12T09:48:48.767990Z",
      "url": "https://files.pythonhosted.org/packages/f9/d0/8cf815b7cadd7ba9cf9ce527c92ba323c45c4060d77d9ae8bc6a357d962d/django-healthchecks-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}