{
  "info": {
    "author": "Caktus Consulting Group, LLC",
    "author_email": "solutions@caktusgroup.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Office/Business :: Financial :: Accounting",
      "Topic :: Office/Business :: Scheduling",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-timepiece\n================\n\ndjango-timepiece is a multi-user application for tracking people's time on\nprojects. Documentation is available on `Read The Docs`_.\n\n:master: |master-status|\n:develop: |develop-status|\n\n.. |master-status| image::\n    https://api.travis-ci.org/caktus/django-timepiece.png?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/caktus/django-timepiece\n\n.. |develop-status| image::\n    https://api.travis-ci.org/caktus/django-timepiece.png?branch=develop\n    :alt: Build Status\n    :target: https://travis-ci.org/caktus/django-timepiece\n\nFeatures\n--------\n\n * A simple CRM with projects and businesses\n * User dashboards with budgeted hours based on project contracts\n * Time sheets with daily, weekly, and monthly summaries\n * Verified, approved, and invoiced time sheet workflows\n * Monthly payroll reporting with overtime, paid leave, and vacation summaries\n * Project invoicing with hourly summaries\n\nRequirements\n------------\n\ndjango-timepiece is compatible with Django 1.8 (on Python 2.7 and Python 3.5) and\nDjango 1.9 (on Python 2.7 and Python 3.5). PostgreSQL is the only\nofficially supported backend. For a full list of required libraries, see\nthe `requirements/base.txt` from the project source on `GitHub`_.\n\nWe actively support desktop versions of Chrome and Firefox, as well as common\nmobile platforms. We do not support most versions of Internet Explorer. We\nwelcome pull requests to fix bugs on unsupported browsers.\n\nDocumentation\n-------------\n\nDocumentation is hosted on `Read The Docs`_.\n\nTo build the documentation locally:\n\n#. Download a copy of the `django-timepiece` source, either through\n   use of `git clone` or by downloading a zipfile from `GitHub`_.\n\n#. Make sure that the top-level directory is on your Python path. If you're\n   using a virtual environment, this can be accomplished via::\n\n        cd /path/to/django-timepiece/ && add2virtualenv .\n\n#. Install the requirements in `requirements/docs.txt` from the project\n   source on `GitHub`_.\n\n#. Run ``make html`` from within the `docs/` directory. HTML files will be\n   output in the `docs/_build/html/` directory.\n\nInstallation\n------------\n\n#. django-timepiece is available on `PyPI`_, so the easiest way to\n   install it and its dependencies is to use `pip`_::\n\n    $ pip install django-timepiece\n\n#. Ensure that `less`_ is installed on your machine and the version is <=1.4.0::\n\n    # Install node.js and npm:\n    $ sudo apt-get install python-software-properties\n    $ sudo add-apt-repository ppa:chris-lea/node.js\n    $ sudo apt-get update\n    $ sudo apt-get install nodejs npm\n\n    # Use npm to install less from package.json:\n    $ npm install\n\n#. If you are starting from the included example project, copy the example\n   local settings file at `example_project/settings/local.py.example` to\n   `example_project/settings/local.py`.\n\n   If you are using an existing project, you will need to make the following\n   changes to your settings:\n\n   - Add `timepiece` and its dependencies to ``INSTALLED_APPS``::\n\n        INSTALLED_APPS = (\n            ...\n            'bootstrap_toolkit',\n            'compressor',\n            'selectable',\n\n            # Must come last.\n            'timepiece',\n            'timepiece.contracts',\n            'timepiece.crm',\n            'timepiece.entries',\n            'timepiece.reports',\n        )\n\n   - Configure your middleware::\n\n        MIDDLEWARE_CLASSES = (\n            'django.middleware.common.CommonMiddleware',\n            'django.contrib.sessions.middleware.SessionMiddleware',\n            'django.middleware.csrf.CsrfViewMiddleware',\n            'django.contrib.auth.middleware.AuthenticationMiddleware',\n            'django.contrib.messages.middleware.MessageMiddleware',\n        )\n\n   - Add `django.core.context_processors.request` and django-timepiece context\n     processors to ``TEMPLATE_CONTEXT_PROCESSORS``::\n\n        TEMPLATE_CONTEXT_PROCESSORS = (\n            \"django.contrib.auth.context_processors.auth\",\n            \"django.core.context_processors.debug\",\n            \"django.core.context_processors.i18n\",\n            \"django.core.context_processors.media\",\n            \"django.contrib.messages.context_processors.messages\",\n            \"django.core.context_processors.request\",           # <----\n            \"timepiece.context_processors.quick_clock_in\",      # <----\n            \"timepiece.context_processors.quick_search\",        # <----\n            \"timepiece.context_processors.extra_settings\",      # <----\n        )\n\n   - Configure compressor settings::\n\n        COMPRESS_PRECOMPILERS = (\n            ('text/less', 'lessc {infile} {outfile}'),\n        )\n        COMPRESS_ROOT = '%s/static/' % PROJECT_PATH\n        INTERNAL_IPS = ('127.0.0.1',)\n\n   - Set ``USE_TZ`` to ``False``. django-timepiece does not currently support\n     timezones.\n\n#. Run ``syncdb`` and ``migrate``.\n\n#. Add URLs for django-timepiece and selectable to `urls.py`, e.g.::\n\n    urlpatterns = [\n        ...\n        (r'^selectable/', include('selectable.urls')),\n        (r'', include('timepiece.urls')),\n        ...\n    ]\n\n#. Add the ``django.contrib.auth`` URLs to `urls.py`, e.g.::\n\n    urlpatterns = [\n        ...\n        url(r'^accounts/login/$', 'django.contrib.auth.views.login',\n            name='auth_login'),\n        url(r'^accounts/logout/$', 'django.contrib.auth.views.logout_then_login',\n            name='auth_logout'),\n        url(r'^accounts/password-change/$',\n            'django.contrib.auth.views.password_change',\n            name='change_password'),\n        url(r'^accounts/password-change/done/$',\n            'django.contrib.auth.views.password_change_done'),\n        url(r'^accounts/password-reset/$',\n            'django.contrib.auth.views.password_reset',\n            name='reset_password'),\n        url(r'^accounts/password-reset/done/$',\n            'django.contrib.auth.views.password_reset_done'),\n        url(r'^accounts/reset/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$',\n            'django.contrib.auth.views.password_reset_confirm'),\n        url(r'^accounts/reset/done/$',\n            'django.contrib.auth.views.password_reset_complete'),\n        ...\n    ]\n\n#. Create registration templates. For examples, see the registration templates\n   in `example_project/templates/registration`. Ensure that your project's\n   template directory is added to ``TEMPLATE_DIRS``::\n\n    TEMPLATE_DIRS = (\n        ...\n        '%s/templates' % PROJECT_PATH,\n        ...\n    )\n\nDevelopment sponsored by `Caktus Group`_.\n\n\n.. _Caktus Group: https://www.caktusgroup.com/services\n.. _GitHub: https://github.com/caktus/django-timepiece\n.. _less: http://lesscss.org\n.. _pip: http://pip.openplans.org/\n.. _PyPI: http://pypi.python.org/pypi/django-timepiece\n.. _Read The Docs: http://django-timepiece.readthedocs.org",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/caktus/django-timepiece",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-timepiece",
    "package_url": "https://pypi.org/project/django-timepiece/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-timepiece/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/caktus/django-timepiece"
    },
    "release_url": "https://pypi.org/project/django-timepiece/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A multi-user application for tracking employee time on projects.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6920867,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edcbe501955f4520f2c8fe1b111412b015b116d55007b30d38fe3a7f5a69204a",
        "md5": "fa43bb74ea61656933f408c52e96e11b",
        "sha256": "a0b8d0bbcecffc681af508bb6255484ea3b9217db1ea0426cd7cba401f9230d5"
      },
      "downloads": -1,
      "filename": "django-timepiece-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fa43bb74ea61656933f408c52e96e11b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 645481,
      "upload_time": "2016-03-01T00:26:16",
      "upload_time_iso_8601": "2016-03-01T00:26:16.737421Z",
      "url": "https://files.pythonhosted.org/packages/ed/cb/e501955f4520f2c8fe1b111412b015b116d55007b30d38fe3a7f5a69204a/django-timepiece-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}