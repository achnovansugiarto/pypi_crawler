{
  "info": {
    "author": "albi-c",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# mlog++\n\n[![Run Unit Tests](https://github.com/albi-c/mlogpp/actions/workflows/test.yml/badge.svg?branch=master)](https://github.com/albi-c/mlogpp/actions/workflows/test.yml)\n\nstatically typed high level mindustry logic language\n\n## Installation:\n`pip install mlogpp`\n\n## Usage:\n`python -m mlogpp <file(s) to compile> [options]`\n\n### Options:\n* `-o:f`, `--output-file` - output to file\n* `-o:s`, `--output-stdout` - output to stdout\n* `-o:c`, `--output-clip` - output to clipboard (default)\n* `-v`, `--verbose` - output more information\n* `-l`, `--lines` - print line numbers when output is stdout\n* `-V`, `--version` - print version and exit\n\n## Examples:\n### Hello, World:\n```javascript\nprint(\"Hello, World!\")\nprintflush(message1)\n```\nPrints `Hello, World!`\n\n### For loops:\n```javascript\nfor (num i = 1; i < 11; i += 1) {\n    print(i)\n    if (i < 10) {\n        print(\", \")\n    }\n}\n\nprintflush(message1)\n```\nPrints `1, 2, 3, 4, 5, 6, 7, 8, 9, 10`\n\n### Ranges:\n```javascript\nfor (i : 5) {\n    print(i + 1)\n    print(\" \")\n}\n\nprintflush(message1)\n```\nPrints `1 2 3 4 5`\n\n### Functions:\n```javascript\nfunction length(num x, num y) -> num {\n    return sqrt(x * x + y * y)\n}\n\nprint(length(3, 4))\nprintflush(message1)\n```\nPrints `5`\n\n### Memory cell access:\n```javascript\ncell1[0] = 10\nprint(cell1[0])\nprintflush(message1)\n```\nPrints `10`\n\n### Subcommands:\n```javascript\nubind(@mega)\nucontrol.move(@thisx, @thisy)\n```\nMakes all `@mega` units move to the processor\n\n### Scopes:\n```javascript\nnum a = 0\nnum b = 0\n\nfunction test(num x) {\n    num a = x\n    b = x\n}\n\ntest(10)\n\nprint(a)\nprint(\" \")\nprint(b)\n\nprintflush(message1)\n```\nPrints `0 10`\n\n### Longer examples can be found in `examples/`\n\n## Features:\n* variables \\\n  `num x = 1`\n* types \\\n  * `num`, `str`\n  * `Block`, `Unit`,\n  * `BlockType`, `UnitType`, `ItemType`, `LiquidType`,\n  * `Controller`, `Team`\n* comments \\\n  `# comment`\n* memory cell access \\\n  `cell1[0] = cell1[1]`\n* functions \\\n  `function f(num x, num y) -> num { return x + y }`\n* subcommands \\\n  `ucontrol.move(1, 2)`\n* if / else \\\n  `if (a == b) { print(\"a\") } else { print(\"b\") }`\n* while loops \\\n  `while (a > b) { b += 1 }`\n* for loops \\\n  `for (num i = 0; i < 10; i += 1) { print(i) }`\n* ranges \\\n  `for (i : 5) { print(i) }`\n* break / continue\n* native functions \\\n  `ubind(@mega)`\n* constants \\\n  `const VALUE = 30`\n\n## Native functions:\n* read `result`, `cell`, `position`\n    * Read data from `cell` at `position` to `result`\n* write `data`, `cell`, `position`\n    * Write `data` to `cell` at `position`\n* draw `operation`, `arg0` ... `arg5`\n    * Add a draw `operation` to the draw buffer\n    * Operations:\n        * clear `red`, `green`, `blue`\n        * color `red`, `green`, `blue`, `alpha`\n        * stroke `width`\n        * line `x1`, `y1`, `x2`, `y2`\n        * rect `x`, `y`, `width`, `height`\n        * lineRect `x`, `y`, `width`, `height`\n        * poly `x`, `y`, `sides`, `radius`, `rotation`\n        * linePoly  `x`, `y`, `sides`, `radius`, `rotation`\n        * triangle `x1`, `y1`, `x2`, `y2`, `x3`, `y3`\n        * image `x`, `y`, `image`, `size`, `rotation`\n* drawflush `display`\n    * Flush the draw buffer to `display`\n* print `message`\n    * Add `message` to the draw buffer\n* printflush `message`\n    * Flush the draw buffer to `message`\n* getlink `result`, `n`\n    * Put the `n`th link to `result`\n* control `command`, `block`, `arg0` ... `arg2`\n    * Control `block`\n    * Commands:\n        * enabled `block`, `enabled`\n        * shoot `block`, `x`, `y`, `shoot`\n        * shootp `block`, `unit`, `shoot`\n        * config `block`, `configuration`\n        * color `block`, `red`, `green`, `blue`\n* radar `filter0` ... `filter2`, `sort`, `block`, `order`, `result`\n    * Find an unit near `block` and store it in `result`\n    * Filters:\n        * any\n        * enemy\n        * ally\n        * player\n        * attacker\n        * flying\n        * boss\n        * ground\n    * Sort:\n        * distance\n        * health\n        * shield\n        * armor\n        * maxHealth\n* sensor `result`, `block`, `parameter`\n    * Get `parameter` of `block` and store it in `result`\n* op `operation`, `result`, `op0`, `op1`\n    * Perform a mathematical operation\n    * Operations:\n        * Basic: add, sub, mul, div, idiv (integer division), mod, pow, lessThan, lessThanEq, greaterThan, greaterThanEq, max, min, abs, log, log10, floor, ceil, sqrt, sin, cos, tan, asin, acos, atan, equal, notEqual\n        * Bitwise: shl (shift left), shr (shift right), or, and, xor, not\n        * Special:\n            * strictEqual - doesn't coerce types\n            * land - logic and\n            * angle - angle of vector\n            * len - length of vector\n            * noise - simplex noise\n            * rand - random number\n* wait `time`\n    * Wait `time` seconds\n* lookup `type`, `result`, `id`\n    * Look up `type` by `id`\n    * Types:\n        * block\n        * unit\n        * item\n        * liquid\n* end\n    * End the program\n* jump `position`, `condition`, `op0`, `op1`\n    * Jump to `position` if `condition` is met\n    * Conditions:\n        * equal\n        * notEqual\n        * lessThan\n        * lessThanEq\n        * greaterThan\n        * greaterThanEq\n        * strictEqual\n        * always\n* ubind `type`\n    * Bind next unit of type `type` and store it in `@unit`\n* ucontrol `command`, `op0` ... `op4`\n    * Control the bound unit\n    * Commands:\n        * idle\n        * stop\n        * move `x`, `y`\n        * approach `x`, `y`, `radius`\n        * boost `enable`\n        * pathfind\n        * target `x`, `y`, `shoot`\n        * targetp `unit`, `shoot`\n        * itemDrop `to`, `amount`\n        * itemTake `from`, `item`, `amount`\n        * payDrop\n        * payTake `takeUnits`\n        * mine `x`, `y`\n        * flag `value`\n        * build `x`, `y`, `block`, `rotation`, `configuration`\n        * getBlock `x`, `y`, `type`, `building`\n        * within `x`, `y`, `radius`, `result`\n* uradar `filter0` ... `filter2`, `sort`, `___`, `order`, `result`\n    * Same as radar, except `block` is replaced by `@unit`\n* ulocate `type`, `arg0` ... `arg2`, `outx`, `outy`, `found`, `building`\n    * Locate block of type `type`\n    * Types:\n        * ore `___`, `___`, `oreType`\n        * building `group`, `enemy`, `___`\n        * spawn `___`, `___`, `___`\n        * damaged `___`, `___`, `___`\n    * Building groups:\n        * core\n        * storage\n        * generator\n        * turret\n        * factory\n        * repair\n        * rally\n        * battery\n        * reactor\n\n* mathematical functions (replacement for `op`):\n    * mod\n    * pow\n    * and, or, xor, not\n    * max, min\n    * abs\n    * log, log10\n    * ceil, floor\n    * sqrt\n    * sin, cos, tan\n    * asin, acos, atan\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/albi-c/mlog++",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlogpp",
    "package_url": "https://pypi.org/project/mlogpp/",
    "platform": null,
    "project_url": "https://pypi.org/project/mlogpp/",
    "project_urls": {
      "Bug Tracker": "https://github.com/albi-c/mlog++/issues",
      "Homepage": "https://github.com/albi-c/mlog++"
    },
    "release_url": "https://pypi.org/project/mlogpp/3.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "statically typed high level mindustry logic language",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16703231,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27083021fd9523bf9d9086ff5a1a5a1b804139012fc8336fca97dac6919cceda",
        "md5": "37954dba8853e3ff9a75aa0cc548feb6",
        "sha256": "53a2582d2cdd22de115eeda93ca3b6544a7394877305db473528f05cbb2472c3"
      },
      "downloads": -1,
      "filename": "mlogpp-3.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "37954dba8853e3ff9a75aa0cc548feb6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 38747,
      "upload_time": "2023-02-05T19:14:00",
      "upload_time_iso_8601": "2023-02-05T19:14:00.374736Z",
      "url": "https://files.pythonhosted.org/packages/27/08/3021fd9523bf9d9086ff5a1a5a1b804139012fc8336fca97dac6919cceda/mlogpp-3.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0223e864753ee0d28cde52ee01c6321bbd45bc3edd6cb5dd60b556f6388b2d7a",
        "md5": "4eba73884ed12429c77443a5194c2068",
        "sha256": "8fce47b09903246227616e6b282760a7c43e08eeb2b439a585f8bee1574e76dc"
      },
      "downloads": -1,
      "filename": "mlogpp-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4eba73884ed12429c77443a5194c2068",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 34780,
      "upload_time": "2023-02-05T19:14:01",
      "upload_time_iso_8601": "2023-02-05T19:14:01.556004Z",
      "url": "https://files.pythonhosted.org/packages/02/23/e864753ee0d28cde52ee01c6321bbd45bc3edd6cb5dd60b556f6388b2d7a/mlogpp-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}