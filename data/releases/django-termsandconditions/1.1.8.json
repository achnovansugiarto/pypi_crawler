{
  "info": {
    "author": "Tim White",
    "author_email": "tim@cyface.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "===========================\nDjango Terms and Conditions\n===========================\n\n.. image:: https://badge.fury.io/py/django-termsandconditions.svg\n    :target: http://badge.fury.io/py/django-termsandconditions\n    :alt: PyPi Package Version\n\n.. image:: https://travis-ci.org/cyface/django-termsandconditions.svg?branch=master\n    :target: https://travis-ci.org/cyface/django-termsandconditions\n    :alt: Travis Build Status\n\n.. image:: https://coveralls.io/repos/cyface/django-termsandconditions/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/cyface/django-termsandconditions?branch=master\n    :alt: Coveralls Code Coverage\n\n.. image:: https://scrutinizer-ci.com/g/cyface/django-termsandconditions/badges/quality-score.png?b=master\n    :target: https://scrutinizer-ci.com/g/cyface/django-termsandconditions/\n    :alt: Scrutinizer Code Quality\n\n.. image:: https://readthedocs.org/projects/django-termsandconditions/badge/?version=latest\n    :target: http://django-termsandconditions.readthedocs.org/en/latest/?badge=latest\n    :alt: Documentation Status\n\nDjango Terms and Conditions gives you an configurable way to send users to a T&C acceptance page before they\ncan access the site if you wish.\n\nContributors:\n\n- Tim White (tim@cyface.com)\n- Adibo (https://github.com/adibo)\n\n.. contents:: Table of Contents\n\nFeatures\n========\n\nThis module is meant to be as quick to integrate as possible, and thus extensive customization will likely benefit from a fork. That said, a number of options are available. Currently, the app allows for\n\n- terms-and-conditions versioning (via version_number)\n- multiple terms-and-conditions allowed (via slug field)\n- per-user terms-and-conditions acceptance\n- middleware to take care of redirecting to proper terms-and-conditions acceptance page upon the version change\n- multi-language support\n\nInstallation\n============\n\nFrom `pypi <https://pypi.python.org>`_::\n\n    $ pip install django-termsandconditions\n\nor::\n\n    $ easy_install django-termsandconditions\n\nor clone from `github <http://github.com>`_::\n\n    $ git clone git://github.com/cyface/django-termsandconditions.git\n\nand add django-termsandconditions to the ``PYTHONPATH``::\n\n    $ export PYTHONPATH=$PYTHONPATH:$(pwd)/django-termsandconditions/\n\nor::\n\n    $ cd django-termsandconditions\n    $ sudo python setup.py install\n\nDemo App\n========\nThe termsandconditions_demo app is included to quickly let you see how to get a working installation going.\n\nThe demo is built as a mobile app using `jQueryMobile <http://jquerymobile.com/>`_ loaded from the jQuery CDN.\n\nTake a look at the ``requirements.txt`` file in the ``termsandconditions_demo`` directory for a quick way to use pip to install\nall the needed dependencies::\n\n    $ pip install -r requirements.txt\n\nThe ``settings_main.py``, and ``settings_local_template.py`` files have a working configuration you can crib from.\n\nThe templates in the ``termsandconditions/templates``, and ``termsandconditions_demo/templates`` directories\ngive you a good idea of the kinds of things you will need to do if you want to provide a custom interface.\n\nConfiguration\n=============\n\nConfiguration is minimal for termsandconditions itself, A quick guide to a basic setup\nis below, take a look at the demo app for more details.\n\nRequirements\n------------\n\nThe app needs ``django>=1.8.3,<1.10``.\n\nAdd INSTALLED_APPS\n------------------\n\nAdd termsandconditions to installed applications::\n\n    INSTALLED_APPS = (\n        ...\n        'termsandconditions',\n    )\n\nAdd urls to urls.py\n-------------------\n\nIn your urls.py, you need to pull in the termsandconditions and/or termsandconditions urls::\n\n    # Terms and Conditions\n    url(r'^terms/', include('termsandconditions.urls')),\n\nTerms and Conditions\n====================\n\nYou will need to set up a Terms and Conditions entry in the admin (or via direct DB load) for users to accept if\nyou want to use the T&C module.\n\nThe default Terms and Conditions entry has a slug of ``'site-terms'``.\n\nIf you don't create one, the first time a user is forced to accept the terms, it will create a default entry for you.\n\nTerms and Conditions Versioning\n-------------------------------\nNote that the versions and dates of T&Cs are important. You can create a new version of a T&C with a future date,\nand once that date is in the past, it will force users to accept that new version of the T&Cs.\n\nTerms and Conditions Middleware\n-------------------------------\nYou can force protection of your whole site by using the T&C middleware. Once activated, any attempt to access an\nauthenticated page will first check to see if the user has accepted the active T&Cs. This can be a performance impact,\nso you can also use the _TermsAndConditionsDecorator to protect specific views, or the pipeline setup to only check on\naccount creation.\n\nHere is the middleware configuration::\n\n    MIDDLEWARE_CLASSES = (\n        ...\n        'termsandconditions.middleware.TermsAndConditionsRedirectMiddleware',\n\nBy default, some pages are excluded from the middleware, you can configure exclusions with these settings::\n\n    ACCEPT_TERMS_PATH = '/terms/accept/'\n    TERMS_EXCLUDE_URL_PREFIX_LIST = {'/admin/',})\n    TERMS_EXCLUDE_URL_LIST = {'/', '/terms/required/', '/logout/', '/securetoo/'}\n\nTERMS_EXCLUDE_URL_PREFIX_LIST is a list of 'starts with' strings to exclude, while TERMS_EXCLUDE_URL_LIST is a list of\nexplicit full paths to exclude.\n\nTerms and Conditions View Decorator\n-----------------------------------\nYou can protect only specific views with T&Cs using the @terms_required() decorator at the top of a function like this::\n\n    from termsandconditions.decorators import terms_required\n\n    @login_required\n    @terms_required\n    def terms_required_view(request):\n        ...\n\nNote that you can skip @login_required only if you are forcing auth on that view in some other way.\n\nRequiring T&Cs for Anonymous Users is not supported.\n\nTerms and Conditions Template Tag\n---------------------------------\n\nTo facilitate support of terms changes without a direct redirection to the ``/terms/accept`` url, a template tag is\nsupplied for convenience. Thus, instead of using e.g. the ``TermsAndConditionsRedirectMiddleware`` one can use the\ntemplate tag. The template tag will take care that a proper modal is shown to the user informing a user that new terms\nhave been set and need to be accepted. To use the template tag, do the following. In your template (for example in\nbase.html), include the following lines::\n\n    {% load terms_tags %}\n    .... your template here ....\n\n    {% show_terms_if_not_agreed %}\n\nAlternatively use::\n\n    {% load terms_tags %}\n    .... your template here ....\n\n    {% show_terms_if_not_agreed field='HTTP_REFERER' %}\n\nif you want other than default ``TERMS_HTTP_PATH_FIELD`` to be used (this can also be controlled via settings, see below).\nThis will ensure that on every page using the template (that is on each page using base.html in this case), respective\nT&C css and js are loaded to take care for handling the modal.\n\nThe modal will show the basic information about the new terms as well as a link to page which enables the user to\naccept these terms. Please note that a user may wish not to accept terms and close the modal. In such a case, the\nmodal will be shown again as soon as another view with the template including the template tag is called.\nThis simple mechanism allows to nag users with new T&C while still allowing them to use the service, without instant\nredirections.\n\nThe following configuration setting applies for the template tag::\n\n    TERMS_HTTP_PATH_FIELD = 'PATH_INFO'\n\nwhich defaults to ``PATH_INFO``. When needed (e.g. while using a separate AJAX view to take care for the modal) this can be changed to ``HTTP_REFERER``.\n\nTerms and Conditions Pipeline\n-----------------------------\nYou can force T&C acceptance when a new user account is created using the django-socialauth pipeline::\n\n    SOCIAL_AUTH_PIPELINE = (\n        'social_auth.backends.pipeline.social.social_auth_user',\n        'social_auth.backends.pipeline.associate.associate_by_email',\n        'social_auth.backends.pipeline.user.get_username',\n        'social_auth.backends.pipeline.user.create_user',\n        'social_auth.backends.pipeline.social.associate_user',\n        'social_auth.backends.pipeline.social.load_extra_data',\n        'social_auth.backends.pipeline.misc.save_status_to_session',\n        'termsandconditions.pipeline.user_accept_terms',\n    )\n\nNote that the configuration above also prevents django-socialauth from updating profile data from the social backends\nonce a profile is created, due to::\n\n    'social_auth.backends.pipeline.user.update_user_details'\n\n...not being included in the pipeline. This is wise behavior when you are letting users update their own profile details.\n\nThis pipeline configuration will send users to the '/terms/accept' page right before sending them on to whatever you\nhave set SOCIAL_AUTH_NEW_USER_REDIRECT_URL to.  However, it will not, without the middleware or decorators described\nabove, check that the user has accepted the latest T&Cs before letting them continue on to viewing the site.\n\nYou can use the various T&C methods in concert depending on your needs.\n\nMulti-Language Support\n======================\nIn case you are in need of your ``termsandconditions`` objects to handle multiple languages, we recommend to use\n``django-modeltranslation <https://github.com/deschler/django-modeltranslation>`` (or similar) module.\nIn case of django-modeltranslation the setup is rather straight forward, but needs several steps. Here they are.\n\n1. Modify your ``settings.py``\n------------------------------\n\nIn your ``settings.py`` file, you need to specify the ``LANGUAGES`` and set ``MIGRATION_MODULES`` to point to a local\nmigration directory for the ``termsandconditions`` module (the migration due to modeltranslation will live there)::\n\n    LANGUAGES = (\n        ('en', 'English'),\n        ('pl', 'Polish'),\n    )\n\n    MIGRATION_MODULES = {\n        # local path for migration for the termsandconditions\n        'termsandconditions': 'your_app.migrations.migrations_termsandconditions',\n    }\n\nDon't forget to create the respective directory and the ``__init__.py`` file there!\nPlease note that ``migrations_termsandconditions`` directory name is used to avoid confusion with the T&C app name.\n\n2. Make initial local migration\n-------------------------------\n\nAs we switch to the local migration for the ``termsandconditions`` module, we need to execute initial migration\nfor the module (as a starting point). Thus::\n\n    python manage.py makemigrations termsandconditions\n\nThe relevant initial migration file should now be in ``your_app/migrations/migrations_termsandconditions`` directory.\nNow, just execute the migration::\n\n    python manage.py migrate termsandconditions\n\n3. Add translation\n------------------\n\nTo translate terms-and-conditions model to other languages (as specified in ``settings.py``), create a ``translation.py``\nfile in your project, with the following content::\n\n    from modeltranslation.translator import translator, TranslationOptions\n    from termsandconditions.models import TermsAndConditions\n\n    class TermsAndConditionsTranslationOptions(TranslationOptions):\n        fields = ('name', 'text', 'info')\n    translator.register(TermsAndConditions, TermsAndConditionsTranslationOptions)\n\nThis assumes you want to have 3 most relevant model fields translated.\nAfter that you just need to make migrations again (to account for new fields due to modeltranslation)::\n\n    python manage.py makemigrations termsandconditions\n\nThat's it. Your model is now ready to cover the translations! Just as hint we suggest to also include some\ndata migration in order to populate newly created, translated fields (i.e. ``name_en``, ``name_pl``, etc.) with\nthe initial data (e.g. by copying the content of the base field, i.e. ``name``, etc.)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cyface/django-termsandconditions",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-termsandconditions",
    "package_url": "https://pypi.org/project/django-termsandconditions/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-termsandconditions/",
    "project_urls": {
      "Homepage": "https://github.com/cyface/django-termsandconditions"
    },
    "release_url": "https://pypi.org/project/django-termsandconditions/1.1.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "django-termsandconditions enables users to accept terms and conditions of a site.",
    "version": "1.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16577019,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6adcc01e5fb900e39fa340952ee14e9e79389e7486c5c66d595463a9eec3d00f",
        "md5": "6865b534e119c9a85f5d63cc27194a36",
        "sha256": "e3999b1ae1e54f3e03f8c0216f26bc4d928448303c693487cfc72918447c86cc"
      },
      "downloads": -1,
      "filename": "django-termsandconditions-1.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "6865b534e119c9a85f5d63cc27194a36",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22166,
      "upload_time": "2016-06-07T14:47:33",
      "upload_time_iso_8601": "2016-06-07T14:47:33.321469Z",
      "url": "https://files.pythonhosted.org/packages/6a/dc/c01e5fb900e39fa340952ee14e9e79389e7486c5c66d595463a9eec3d00f/django-termsandconditions-1.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2022-4589"
      ],
      "details": "A vulnerability has been found in cyface Terms and Conditions Module up to 2.0.10 and classified as problematic. Affected by this vulnerability is the function returnTo of the file termsandconditions/views.py. The manipulation leads to open redirect. The attack can be launched remotely. Upgrading to version 2.0.11 can address this issue. The name of the patch is 03396a1c2e0af95e12a45c5faef7e47a4b513e1a. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216175.",
      "fixed_in": [
        "2.0.11"
      ],
      "id": "GHSA-6rmf-cv6p-4h27",
      "link": "https://osv.dev/vulnerability/GHSA-6rmf-cv6p-4h27",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}