{
  "info": {
    "author": "Erik Nyquist",
    "author_email": "eknyquist@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "duckargs\r\n========\r\n\r\n.. |tests_badge| image:: https://github.com/eriknyquist/duckargs/actions/workflows/tests.yml/badge.svg\r\n.. |cov_badge| image:: https://github.com/eriknyquist/duckargs/actions/workflows/coverage.yml/badge.svg\r\n.. |version_badge| image:: https://badgen.net/pypi/v/duckargs\r\n.. |license_badge| image:: https://badgen.net/pypi/license/duckargs\r\n\r\n|tests_badge| |cov_badge| |version_badge| |license_badge|\r\n\r\nThe purpose of this package is to save some typing whenever you want to quickly\r\ncreate a python program that accepts command line arguments. Just run ``duckargs``\r\nwith the arguments that you want your program to accept, with example values for\r\noptions, and ``duckargs`` will generate the python code for a program that uses\r\n``argparse`` to handle those arguments.\r\n\r\nInstall\r\n=======\r\n\r\nInstall with pip (python 3x required):\r\n\r\n::\r\n\r\n    pip install duckargs\r\n\r\nExample\r\n=======\r\n\r\nRun duckargs from the command line via ``python -m duckargs``, followed by whatever arguments/options/flags\r\nyou want your program to accept, and ``duckargs`` will print the corresponding python code.\r\n\r\n::\r\n\r\n    $ python -m duckargs positional_arg1 positional_arg2 -i --int-val 4 -f 3.3 -F --file file_that_exists -a -b -c > program.py\r\n\r\n\r\nAfter running the above command, the file ``program.py`` will contain the following code:\r\n\r\n\r\n.. code:: python\r\n\r\n    # positional_arg1 positional_arg2 -i --int-val 4 -f 3.3 -F --file file_that_exists -a -b -c\r\n\r\n    import argparse\r\n\r\n    def main():\r\n        parser = argparse.ArgumentParser(description='',\r\n                                         formatter_class=argparse.ArgumentDefaultsHelpFormatter)\r\n\r\n        parser.add_argument('positional_arg1', help='a string')\r\n        parser.add_argument('positional_arg2', help='a string')\r\n        parser.add_argument('-i', '--int-val', default=4, type=int, help='an int value')\r\n        parser.add_argument('-f', default=3.3, type=float, help='a float value')\r\n        parser.add_argument('-F', '--file', default='file_that_exists', type=argparse.FileType(), help='a filename')\r\n        parser.add_argument('-a', action='store_true', help='a flag')\r\n        parser.add_argument('-b', action='store_true', help='b flag')\r\n        parser.add_argument('-c', action='store_true', help='c flag')\r\n        args = parser.parse_args()\r\n\r\n        print(args.positional_arg1)\r\n        print(args.positional_arg2)\r\n        print(args.int_val)\r\n        print(args.f)\r\n        print(args.file)\r\n        print(args.a)\r\n        print(args.b)\r\n        print(args.c)\r\n\r\n    if __name__ == \"__main__\":\r\n        main()\r\n\r\nComma-separated choices for option argument\r\n===========================================\r\n\r\nIf you have an option which accepts an argument, and you write an argument string with\r\nmultiple values separated by commas (e.g. ``-m --mode active,idle,sim``), then ``duckargs``\r\nwill use the comma-separated values as a ``choices`` list for argparse, e.g.:\r\n\r\n::\r\n\r\n    parser.add_argument('-m', '--mode', choices=['active', 'idle', 'stim'], default='active', help='a string')\r\n\r\nReal filename for option argument\r\n=================================\r\n\r\nIf you have an option which accepts an argument, and the argument string that you write\r\nhappens to be the path to a file that actually exists (e.g. ``-f --filename real_file.txt``),\r\nthen ``duckargs`` will tell argparse that this argument is a file, e.g.:\r\n\r\n::\r\n\r\n    parser.add_argument('-f', '--filename', default='real_file.txt', type=argparse.FileType(), help='a filename')\r\n\r\n\r\nUse duckargs in python code\r\n===========================\r\n\r\nIf you want to use duckargs in your own script, you can use the ``duckargs.generate_python_code`` function,\r\nwhich accepts a list of command line arguments:\r\n\r\n.. code:: python\r\n\r\n    import sys\r\n    from duckargs import generate_python_code\r\n\r\n    python_code = generate_python_code(sys.argv)\r\n\r\nPitfalls\r\n========\r\n\r\nIf you have a combination of flags and positional arguments, and you happen to have a flag\r\nfollowed by a positional argument (as in: ``python -m duckargs -q --quiet positional_arg``),\r\n``duckargs`` has no way to tell that you wanted a positional arg, so it will assume you want\r\nan option ``-q --quiet`` with a required argument.\r\n\r\nTo avoid this, it is recommended to declare your positional arguments first (as in: ``python -m duckargs positional_arg -q --quiet``)\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/eriknyquist/duckargs",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "duckargs",
    "package_url": "https://pypi.org/project/duckargs/",
    "platform": null,
    "project_url": "https://pypi.org/project/duckargs/",
    "project_urls": {
      "Contributions": "https://github.com/eriknyquist/duckargs/pulls",
      "Documentation": "https://github.com/eriknyquist/duckargs",
      "Homepage": "http://github.com/eriknyquist/duckargs",
      "Issues": "https://github.com/eriknyquist/duckargs/issues"
    },
    "release_url": "https://pypi.org/project/duckargs/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Productivity tool for quickly creating python programs that parse command-line arguments. Stop writing argparse boilerplate code!",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17446993,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35517770c14c38a623ff3c9e552576789faa6e5e25d07c04ce39ce1003629b0d",
        "md5": "9b0a8848247a377af5a1a7241b2f39a0",
        "sha256": "293943395c65262a6176dde4fb4b71039fbab3cdf2363ad0a55e167794f6f957"
      },
      "downloads": -1,
      "filename": "duckargs-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b0a8848247a377af5a1a7241b2f39a0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9172,
      "upload_time": "2023-03-26T04:31:49",
      "upload_time_iso_8601": "2023-03-26T04:31:49.591687Z",
      "url": "https://files.pythonhosted.org/packages/35/51/7770c14c38a623ff3c9e552576789faa6e5e25d07c04ce39ce1003629b0d/duckargs-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}