{
  "info": {
    "author": "Truveris Inc.",
    "author_email": "dev@truveris.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "mdstat for python\n=================\n\nThis short library is used to convert your ``/proc/mdstat`` file into an object\nusable in Python.  It comes with a short ``mdjson`` script that dumps your file\nin a JSON format.\n\nRequirements\n------------\n - Linux (or at least get mdstat files from a Linux machine)\n - Python 2.7+ (or 3.2+)\n\nExample usage\n-------------\nFor most use cases, you can simple run ``mdstat.parse()`` to get nested\ndictionaries repesenting your local ``/proc/mdstat`` file.  If you fetch the\nfile remotely or need to run the parser on a stream, use ``parse_stream``.\n\n.. code-block:: javascript\n\n    $ mdjson\n    {\n        \"personalities\": [\n            \"raid10\"\n        ],\n        \"unused_devices\": [],\n        \"devices\": {\n            \"md127\": {\n                \"read_only\": true,\n                \"status\": {\n                    \"near_copies\": 2,\n                    \"blocks\": 34359475200,\n                    \"raid_disks\": 4,\n                    \"offset_copies\": 0,\n                    \"sync_request\": null,\n                    \"far_copies\": 1,\n                    \"synced\": [\n                        true,\n                        true,\n                        true,\n                        true\n                    ],\n                    \"chunks\": \"512K\",\n                    \"super\": \"1.2\",\n                    \"non_degraded_disks\": 4\n                },\n                \"bitmap\": null,\n                \"resync\": null,\n                \"active\": true,\n                \"disks\": {\n                    \"xvdf\": {\n                        \"spare\": true,\n                        \"faulty\": false,\n                        \"write_mostly\": false,\n                        \"number\": 4,\n                        \"replacement\": false\n                    },\n                    \"xvdd\": {\n                        \"spare\": false,\n                        \"faulty\": false,\n                        \"write_mostly\": false,\n                        \"number\": 2,\n                        \"replacement\": false\n                    },\n                    \"xvde\": {\n                        \"spare\": false,\n                        \"faulty\": false,\n                        \"write_mostly\": false,\n                        \"number\": 3,\n                        \"replacement\": false\n                    },\n                    \"xvdb\": {\n                        \"spare\": false,\n                        \"faulty\": false,\n                        \"write_mostly\": false,\n                        \"number\": 0,\n                        \"replacement\": false\n                    },\n                    \"xvdc\": {\n                        \"spare\": false,\n                        \"faulty\": false,\n                        \"write_mostly\": false,\n                        \"number\": 1,\n                        \"replacement\": false\n                    }\n                },\n                \"personality\": \"raid10\"\n            }\n        }\n    }\n\nYou can also use the python interface to generate a nested dictionary:\n\n.. code-block:: python\n\n    >>> import mdstat\n    >>> mdstat.parse()\n    {\n        \"personalities\": [\n            \"raid1\",\n            \"raid5\",\n            \"raid10\",\n        ],\n        \"devices\": {\n            \"md0\": {\n                \"active\": True,\n                [... snip ...]\n            }\n        }\n        \"unused_devices\": []\n    }\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/truveris/py-mdstat/",
    "keywords": "linux,mdstat,mdadm,mdjson,raid",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mdstat",
    "package_url": "https://pypi.org/project/mdstat/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mdstat/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/truveris/py-mdstat/"
    },
    "release_url": "https://pypi.org/project/mdstat/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "mdstat parser",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2114315,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65537908d2c11bafbf6bee9784c63c68bd4277dd6d3cc680eadc4a49cc9e30c2",
        "md5": "5977746b7de272c3559119c43b820066",
        "sha256": "4969ae166ac35e2d71829c8be0935b65aaf3f6bc429863ad5f621c6bad4b235c"
      },
      "downloads": -1,
      "filename": "mdstat-1.0.0.tar.gz",
      "has_sig": true,
      "md5_digest": "5977746b7de272c3559119c43b820066",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7048,
      "upload_time": "2015-07-11T23:02:00",
      "upload_time_iso_8601": "2015-07-11T23:02:00.505904Z",
      "url": "https://files.pythonhosted.org/packages/65/53/7908d2c11bafbf6bee9784c63c68bd4277dd6d3cc680eadc4a49cc9e30c2/mdstat-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}