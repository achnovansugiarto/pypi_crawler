{
  "info": {
    "author": "Ondrej Dolejsi",
    "author_email": "ondrej.dolejsi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: BSD",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Adaptive Technologies",
      "Topic :: Internet",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Internet :: WWW/HTTP :: Site Management",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Server",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Pre-processors",
      "Topic :: System :: Logging",
      "Topic :: System :: Monitoring",
      "Topic :: System :: Networking :: Monitoring"
    ],
    "description": "# Dynoscale Agent\n\n#### Simple yet efficient scaling agent for Python apps on Heroku\n\n## 📖 Usage\n\n1. Add __dynoscale__ to your app on Heroku: `heroku addons:create dscale`\n2. Install __dynoscale__:  `python -m pip install dynoscale`\n    1. Add __dynoscale__ to your app, you can either wrap your app or if you use Gunicorn, you can also just use one of\n       its hooks (`pre_request``):\n        1. If you want to wrap you app (let's look at Flask example):\n       ```python\n       from flask import Flask\n    \n       app = Flask(__name__)\n       \n       @app.route(\"/\")\n       def index():\n           return \"Hello from Flask!\"\n    \n       if __name__ == \"__main__\":\n           app.run(host='127.0.0.1', port=3000, debug=True)\n       ```\n       then just wrap your WSGI app like this\n       ```python\n       from flask import Flask\n       # FIRST, IMPORT DYNOSCALE\n       from dynoscale.wsgi import DynoscaleWsgiApp\n    \n       app = Flask(__name__)\n       \n       @app.route(\"/\")\n       def index():\n           return \"Hello from Flask!\"\n       \n       if __name__ == \"__main__\":\n           # THE CHANGE BELOW IS ALL YOU NEED TO DO\n           app.wsgi_app = DynoscaleWsgiApp(app.wsgi_app)\n           # YUP, WE KNOW, CAN'T GET SIMPLER THAN THAT :)\n           app.run(host='127.0.0.1', port=3000, debug=True)\n       ```\n    2. Or, if you'd prefer to use the hook, then change your `gunicorn.conf.py` accordingly instead:\n       ```python\n       # This one line will do it for you:\n       from dynoscale.hooks.gunicorn import pre_request  # noqa # pylint: disable=unused-import\n       ``` \n       If you already use the `pre_request` hook, alias ours and call it manually:\n       ```python\n       # Alias the import...\n       from dynoscale.hooks.gunicorn import pre_request as hook\n       \n       # ...and remember to call ours first!\n       def pre_request(worker, req):\n          hook(worker, req)\n          # ...do your own thing...\n       ```\n3. __Profit!__ _Literally, this will save you money! 💰💰💰 😏_\n\n## ℹ️ Info\n\nYou should consider the `dynoscale.wsgi.DynoscaleWsgiApp(wsgi_app)`\nand `dynoscale.hooks.gunicorn.pre_request(worker, req)` the only two bits of public interface.\n\n## 🤯 Examples\n\nFeel free to check out `./examples`, yes, we do have examples in the repository :)\n\n## 👩‍💻 Contributing\n\nInstall development requirements by running `noglob pip install -e .[test]` if you use ZSH, or\n`pip install -e .[test]` if you're stuck with Bash.\n\nYou can run _pytest_ from terminal: `pytest`\n\nYou can run _flake8_ from terminal: `flake8 ./src`  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://dynoscale.net",
    "keywords": "heroku,scaling,dyno,wsgi",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynoscale",
    "package_url": "https://pypi.org/project/dynoscale/",
    "platform": null,
    "project_url": "https://pypi.org/project/dynoscale/",
    "project_urls": {
      "Documentation": "http://dynoscale.net/documentation/category/general",
      "Homepage": "https://dynoscale.net",
      "Source": "https://github.com/Mjolnir-Software/dynoscale-python",
      "Tracker": "https://github.com/Mjolnir-Software/dynoscale-python"
    },
    "release_url": "https://pypi.org/project/dynoscale/1.1.0/",
    "requires_dist": [
      "requests (>=2.27.1)",
      "pytest (>=7.0.1) ; extra == 'test'",
      "pytest-asyncio (>=0.18.1) ; extra == 'test'",
      "pytest-cov (>=3.0.0) ; extra == 'test'",
      "pylint (>=2.12.2) ; extra == 'test'",
      "flake8 (>=4.0.1) ; extra == 'test'",
      "pytest-flake8 (>=1.1.1) ; extra == 'test'",
      "responses (>=0.18.0) ; extra == 'test'",
      "redislite (>=6.0.674690) ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "A simple yet efficient scaling agent for Python apps on Heroku",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17378932,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22e7e5ebd7ee0b0b46b930a48c40dbc38de070f1a3cebb46788d7be8d399f436",
        "md5": "3d8396479098a3db99174d3f916275ea",
        "sha256": "11ab7a26f7a71d169b6ff6647fd854b6f3bdfa184f2ef8b4e2fd765921ced726"
      },
      "downloads": -1,
      "filename": "dynoscale-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d8396479098a3db99174d3f916275ea",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16614,
      "upload_time": "2022-03-25T15:16:01",
      "upload_time_iso_8601": "2022-03-25T15:16:01.084030Z",
      "url": "https://files.pythonhosted.org/packages/22/e7/e5ebd7ee0b0b46b930a48c40dbc38de070f1a3cebb46788d7be8d399f436/dynoscale-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7f527810d2e0e4894231d81ed5f0f4d1c764dd6737b4f64b160f395be2d5a44",
        "md5": "c1ca53666e00e0fdfb7c0afdad5b08ca",
        "sha256": "0ab1c979526a160c3eb7fcf7f766fd5376ddea0ae949c01539a758ba9752b52a"
      },
      "downloads": -1,
      "filename": "dynoscale-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c1ca53666e00e0fdfb7c0afdad5b08ca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 14401,
      "upload_time": "2022-03-25T15:16:02",
      "upload_time_iso_8601": "2022-03-25T15:16:02.679640Z",
      "url": "https://files.pythonhosted.org/packages/f7/f5/27810d2e0e4894231d81ed5f0f4d1c764dd6737b4f64b160f395be2d5a44/dynoscale-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}