{
  "info": {
    "author": "Ondrej Dolejsi",
    "author_email": "ondrej.dolejsi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: BSD",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Topic :: Adaptive Technologies",
      "Topic :: Internet",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Internet :: WWW/HTTP :: Site Management",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Server",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Pre-processors",
      "Topic :: System :: Logging",
      "Topic :: System :: Monitoring",
      "Topic :: System :: Networking :: Monitoring"
    ],
    "description": "# Dynoscale Agent\n\n### Simple yet efficient scaling agent for Python apps on Heroku\n\nDynoscale Agent supports both **WSGI** and **ASGI** based apps and **RQ** workers _(DjangoQ and Celery support is coming\nsoon)_.\nThe easies way to use it in your project is import the included Gunicorn hook in your _gunicorn.conf.py_ but we'll\nexplain\nthe setup process in more detail below.\n\n### Note that for auto-scaling to work, your web/workers have to run on _Standard_ or _Performace_ dynos!\n\n## Getting started\n\nThere are generally 3 steps to set up autoscaling with Dynoscale:\n\n1) Add **Dynoscale** addon to your Heroku app\n2) Install **dynoscale** package\n3) Initialize **dynoscale** when you app starts\n\n### 1) Enabling Dynoscale add-on\n\nThere are two ways to add the Dynoscale add-on to your app.  \nFirst one is to add the add-on through the Heroku dashboard by navigating to _your app_, then selecting the _resources_\ntab and finally searching for _dynoscale_ then select your plan and at this point your app will be restarted with the\naddon enabled.\n\nThe second option is to install it with _heroku cli tools_, using this command for example:\n\n    heroku addons:create dscale:performance\n\n### 2) Installing dynoscale agent package\n\nThis is same as installing any other Python package, for example: `python -m pip install dynoscale`.\n\nIf you'd like to confirm it's installed by heroku, then run:\n\n    heroku run python -c \"import dynoscale; print(dynoscale.__version__)\"  \n\nwhich will print out the installed version (for example: `1.2.0`)\n\nIf you'd like to confirm that dynoscale found the right env vars run:\n\n    heroku run python -c \"from dynoscale.config import Config; print(Config())\"\n\nand you'll likely see something like this:\n\n    Running python -c \"from dynoscale.config import Config; print(Config())\" on ‚¨¢ your-app-name-here... up, run.9816 (Eco)\n    {\"DYNO\": \"run.9816\", \"DYNOSCALE_DEV_MODE\": false, \"DYNOSCALE_URL\": \"https://dynoscale.net/api/v1/report/yoursecretdynoscalehash\", \"redis_urls\": {\"REDISCLOUD_URL\": \"redis://default:anothersecrethere@redis-12345.c258.us-east-1-4.ec2.cloud.redislabs.com:12345\"}}\n\n### 3) Initialize dynoscale during the app startup\n\nThis can take multiple forms and depends on your app. Is your app WSGI or ASGI? How do you serve it? Do you have\nworkers? There are [examples](https://github.com/Mjolnir-Software/dynoscale-python/tree/main/examples) in the repo, take\na look! I hope you'll find something close to your setup.\n\nIf you have a WSGI app _(ex.: Bottle, Flask, CherryPy, Pylons, Django, ...)_ and you serve the app with **Gunicorn**\nthen in your `gunicorn.conf.py` just import the pre_request hook from dynoscale and that's it:\n\n```python\n# `gunicorn.conf.py` - Using Dynoscale Gunicorn Hook\nfrom dynoscale.hooks.gunicorn import pre_request  # noqa # pylint: disable=unused-import\n```\n\nOr if you prefer you can **instead** pass your WSGI app into DynoscaleWsgiApp():\n\n```python\n# `web.py` - Flask Example\nfrom dynoscale.wsgi import DynoscaleWsgiApp\n\napp = Flask(__name__)\napp.wsgi_app = DynoscaleWsgiApp(app.wsgi_app)\n```\n\nDo you use Gunicorn with Uvicorn workers? Replace `uvicorn.workers.UvicornWorker`\nwith `dynoscale.DynoscaleUvicornWorker` like so:\n\n```python\n# Contents of gunicorn.conf.py\n...\n# worker_class = 'uvicorn.workers.UvicornWorker'\nworker_class = 'dynoscale.uvicorn.DynoscaleUvicornWorker'\n...\n```\n\n... and you're done!\n\nDo you serve you ASGI app some other way? (ex.: Starlette, Responder, FastAPI, Sanic, Django, Guillotina, ...)_ wrap\nyour ASGI app\nwith DynoscaleASGIApp:\n\n```python\n# `web.py` - Starlette Example\nimport os\n\nfrom starlette.applications import Starlette\nfrom starlette.responses import Response\nfrom starlette.routing import Route\n\nfrom dynoscale.asgi import DynoscaleAsgiApp\n\n\nasync def home(_):\n    return Response(\"Hello from Starlette, scaled by Dynoscale!\", media_type='text/plain')\n\n\napp = DynoscaleAsgiApp(Starlette(debug=True, routes=[Route('/', endpoint=home, methods=['GET'])]))\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run('web:app', host='0.0.0.0', port=int(os.getenv('PORT', '8000')), log_level=\"info\")\n```\n\n---\n\n## üìñ Complete WSGI example\n\n1. Add __dynoscale__ to your app on Heroku: `heroku addons:create dscale`\n2. Install __dynoscale__:  `python -m pip install dynoscale`\n    1. Add __dynoscale__ to your app, you can either wrap your app or if you use Gunicorn, you can also just use one of\n       its hooks (`pre_request`):\n        1. If you want to wrap you app (let's look at Flask example):\n       ```python\n       import os\n       \n       from flask import Flask\n    \n       app = Flask(__name__)\n       \n       @app.route(\"/\")\n       def index():\n           return \"Hello from Flask!\"\n    \n       if __name__ == \"__main__\":\n           app.run(host='0.0.0.0', port=int(os.getenv('PORT', '8000')), debug=True)\n       ```\n       then just wrap your WSGI app like this\n       ```python\n       from flask import Flask\n       # FIRST, IMPORT DYNOSCALE\n       from dynoscale.wsgi import DynoscaleWsgiApp\n    \n       app = Flask(__name__)\n       \n       @app.route(\"/\")\n       def index():\n           return \"Hello from Flask!\"\n       \n       if __name__ == \"__main__\":\n           # THE CHANGE BELOW IS ALL YOU NEED TO DO\n           app.wsgi_app = DynoscaleWsgiApp(app.wsgi_app)\n           # YUP, WE KNOW, CAN'T GET SIMPLER THAN THAT :)\n           app.run(host='127.0.0.1', port=3000, debug=True)\n       ```\n    2. Or, if you'd prefer to use the hook, then change your `gunicorn.conf.py` accordingly instead:\n       ```python\n       # This one line will do it for you:\n       from dynoscale.hooks.gunicorn import pre_request  # noqa # pylint: disable=unused-import\n       ``` \n       If you already use the `pre_request` hook, alias ours and call it manually:\n       ```python\n       # Alias the import...\n       from dynoscale.hooks.gunicorn import pre_request as hook\n       \n       # ...and remember to call ours first!\n       def pre_request(worker, req):\n          hook(worker, req)\n          # ...do your own thing...\n       ```\n3. __Profit!__ _Literally, this will save you money! üí∞üí∞üí∞ üòè_\n\n## üìñ Complete ASGI example\n\n1. Add __dynoscale__ to your app on Heroku: `heroku addons:create dscale`\n2. Prepare your amazing webapp, we'll use **Starlette** served by **Gunicorn** with **Uvicorn** workers:\n    ```python\n    # web.py\n    import datetime\n    from starlette.applications import Starlette\n    from starlette.responses import Response\n    from starlette.routing import Route\n    \n    \n    async def home(_):\n        return Response(\n            \"Hello from üåü Starlette üåü served by Gunicorn using Uvicorn workers and scaled by Dynoscale!\\n\"\n            f\"It's {datetime.datetime.now()} right now.\",\n            media_type='text/plain'\n        )\n    \n    \n    app = Starlette(debug=True, routes=[Route('/', endpoint=home, methods=['GET'])])\n    ```\n   ... add Gunicorn config:\n    ```python\n    # gunicorn.conf.py\n    import os\n    # ENV vars\n    PORT = int(os.getenv('PORT', '3000'))\n    WEB_CONCURRENCY = int(os.getenv('WEB_CONCURRENCY', '10'))\n    \n    # Gunicorn config\n    wsgi_app = \"web:app\"\n    \n    # ‚îå---------- THIS HERE IS ALL OF DYNOSCALE SETUP ----------‚îê\n    # | # worker_class = 'uvicorn.workers.UvicornWorker'        |\n    worker_class = 'dynoscale.uvicorn.DynoscaleUvicornWorker' # |\n    # ‚îî---------------------------------------------------------‚îò\n    \n    bind = f\"0.0.0.0:{PORT}\"\n    preload_app = True\n    \n    workers = WEB_CONCURRENCY\n    max_requests = 1000\n    max_requests_jitter = 50\n    \n    accesslog = '-'\n    loglevel = 'debug'\n    ```\n3. Install all the dependencies:\n   - `python -m pip install \"uvicorn[standard]\" gunicorn dynoscale`\n4. Start it up with:\n   ```bash\n     DYNO=web.1 DYNOSCALE_DEV_MODE=true DYNOSCALE_URL=https://some_request_bin_or_some_such.com gunicorn\n   ```\n   - On Heroku, DYNO and DYNOSCALE_URL will be set for you, you should only have `web: gunicorn` in your procfile.\n   - In this example we start Dynoscale in dev mode to simulate random queue times, don't do this on Heroku!\n5. That's it you're done, now __Profit!__ _Literally, this will save you money! üí∞üí∞üí∞ üòè_\n\n## ‚ÑπÔ∏è Info\n\nYou should consider\nthe `dynoscale.wsgi.DynoscaleWsgiApp(wsgi_app)`, `dynoscale.hooks.gunicorn.pre_request(worker, req)`, `dynoscale.asgi.DynoscaleASGIApp(asgi_app)`\nand `dynoscale.uvicorn.DynoscaleUvicornWorker` the only parts of the public interface.\n\n## ü§Ø Examples\n\nPlease check out `./examples`, yes, we do have examples in the repository :)\n\n## üë©‚Äçüíª Contributing\n\nInstall development requirements:\n\n- `pip install -e \".[test]\"`\n\nYou can run _pytest_ from terminal: `pytest`\n\nYou can run _flake8_ from terminal: `flake8 ./src`  \n\n# Change Log of `dynoscale` for Python\n### 1.2.0 [2023-01-08]\n - dropping support for Python 3.7, 3.8, 3.9\n - adding support for Gunicorn with Uvicorn workers, use dynoscale.uvicorn.DynoscaleUnicornWorker\n\n### 1.1.3 [2023-01-13]\n\n- Added support for ASGI through DynoscaleAsgiApp class\n- Added options to control DS repository storage location with environment variables\n\n### 1.1.2 [2022-05-27]\n\n- Added logging to DynoscaleRQLogger\n\n### 1.1.1 [2022-05-12]\n\n- fixed issue when using GUNICORN hook (Incorrect key name in headers)\n\n### 1.1.0 [2022-03-25]\n\n- Support for [RQ](https://python-rq.org)\n\n### 1.0.0 [2022-02-27]\n\nFirst public release\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://dynoscale.net",
    "keywords": "heroku,scaling,dyno,wsgi",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynoscale",
    "package_url": "https://pypi.org/project/dynoscale/",
    "platform": null,
    "project_url": "https://pypi.org/project/dynoscale/",
    "project_urls": {
      "Documentation": "http://dynoscale.net/documentation/category/general",
      "Homepage": "https://dynoscale.net",
      "Source": "https://github.com/Mjolnir-Software/dynoscale-python",
      "Tracker": "https://github.com/Mjolnir-Software/dynoscale-python"
    },
    "release_url": "https://pypi.org/project/dynoscale/1.2.0/",
    "requires_dist": [
      "asgiref (>=3.6.0)",
      "requests (>=2.28.2)",
      "pytest (>=7.2.1) ; extra == 'test'",
      "pytest-asyncio (>=0.20.3) ; extra == 'test'",
      "pytest-cov (>=4.0.0) ; extra == 'test'",
      "pylint (>=2.16.1) ; extra == 'test'",
      "flake8 (>=5.0.4) ; extra == 'test'",
      "pytest-flake8 (>=1.1.1) ; extra == 'test'",
      "responses (>=0.22.0) ; extra == 'test'",
      "redislite (>=6.2.805324) ; extra == 'test'",
      "rq (>=1.12.0) ; extra == 'test'",
      "Flask (>=2.2.2) ; extra == 'test'",
      "colorlog (>=6.7.0) ; extra == 'test'",
      "starlette (>=0.23.1) ; extra == 'test'",
      "uvicorn[standard] (>=0.20.0) ; extra == 'test'",
      "gunicorn (>=20.1.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.10",
    "summary": "A simple yet efficient scaling agent for Python apps on Heroku",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17378932,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e73692dcf148852d0fec6168da91f9671d3bea0beb4c8a5329bbb79e5e15f73a",
        "md5": "5602bea38488c903c2f2806eef5cebf5",
        "sha256": "5aabb62a6897143d121bf2cff1bfcb520847e19173fa5eec3f8cde5064bf45ed"
      },
      "downloads": -1,
      "filename": "dynoscale-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5602bea38488c903c2f2806eef5cebf5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 21463,
      "upload_time": "2023-02-08T18:03:38",
      "upload_time_iso_8601": "2023-02-08T18:03:38.698745Z",
      "url": "https://files.pythonhosted.org/packages/e7/36/92dcf148852d0fec6168da91f9671d3bea0beb4c8a5329bbb79e5e15f73a/dynoscale-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63839993dd1320b8878a0b23f32a2b68326368ecbd647f23b14356d03d4cf69a",
        "md5": "d71c9c87494d8c935e225527eb45211f",
        "sha256": "b87dbe0e13efc8b2b053b9886bda250d5d5420959fbc4c66c5741558e6cbce11"
      },
      "downloads": -1,
      "filename": "dynoscale-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d71c9c87494d8c935e225527eb45211f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 29165,
      "upload_time": "2023-02-08T18:03:40",
      "upload_time_iso_8601": "2023-02-08T18:03:40.856666Z",
      "url": "https://files.pythonhosted.org/packages/63/83/9993dd1320b8878a0b23f32a2b68326368ecbd647f23b14356d03d4cf69a/dynoscale-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}