{
  "info": {
    "author": "Hong Minhee <http://hongminhee.org/>",
    "author_email": "dahlia@lunant.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "The Python dictionary-based mock memcached client library. It does not\nconnect to any memcached server, but keeps a dictionary and stores every cache\ninto there internally. It is a just emulated API of memcached client only for\ntests. It implements expiration also. NOT THREAD-SAFE.  ::\n\n    try:\n        import memcache\n    except ImportError:\n        import warnings\n        import mockcache as memcache\n        warnings.warn(\"imported mockcache instead of memcache; cannot find \"\n                      \"memcache module\")\n\n    mc = memcache.Client([\"127.0.0.1:11211\"])\n\nThis module and other memcached client libraries have the same behavior.\n\n>>> from mockcache import Client\n>>> mc = Client()\n>>> mc\n<mockcache.Client {}>\n>>> mc.get(\"a\")\n>>> mc.get(\"a\") is None\nTrue\n>>> mc.set(\"a\", \"1234\")\n1\n>>> mc.get(\"a\")\n'1234'\n>>> mc\n<mockcache.Client {'a': ('1234', None)}>\n>>> mc.add(\"a\", \"1111\")\n0\n>>> mc.get(\"a\")\n'1234'\n>>> mc\n<mockcache.Client {'a': ('1234', None)}>\n>>> mc.replace(\"a\", \"2222\")\n1\n>>> mc.get(\"a\")\n'2222'\n>>> mc\n<mockcache.Client {'a': ('2222', None)}>\n>>> mc.append(\"a\", \"3\")\n1\n>>> mc.get(\"a\")\n'22223'\n>>> mc\n<mockcache.Client {'a': ('22223', None)}>\n>>> mc.prepend(\"a\", \"1\")\n1\n>>> mc.get(\"a\")\n'122223'\n>>> mc\n<mockcache.Client {'a': ('122223', None)}>\n>>> mc.incr(\"a\")\n122224\n>>> mc.get(\"a\")\n122224\n>>> mc\n<mockcache.Client {'a': (122224, None)}>\n>>> mc.incr(\"a\", 10)\n122234\n>>> mc.get(\"a\")\n122234\n>>> mc\n<mockcache.Client {'a': (122234, None)}>\n>>> mc.decr(\"a\")\n122233\n>>> mc.get(\"a\")\n122233\n>>> mc\n<mockcache.Client {'a': (122233, None)}>\n>>> mc.decr(\"a\", 5)\n122228\n>>> mc.get(\"a\")\n122228\n>>> mc\n<mockcache.Client {'a': (122228, None)}>\n>>> mc.replace(\"b\", \"value\")\n0\n>>> mc.get(\"b\")\n>>> mc.get(\"b\") is None\nTrue\n>>> mc\n<mockcache.Client {'a': (122228, None)}>\n>>> mc.add(\"b\", \"value\", 5)\n1\n>>> mc.get(\"b\")\n'value'\n>>> mc  # doctest: +ELLIPSIS\n<mockcache.Client {'a': (122228, None), 'b': ('value', ...)}>\n>>> import time\n>>> time.sleep(6)\n>>> mc.get(\"b\")\n>>> mc.get(\"b\") is None\nTrue\n>>> mc\n<mockcache.Client {'a': (122228, None)}>\n>>> mc.set(\"c\", \"value\")\n1\n>>> mc.get_multi([\"a\", \"b\", \"c\"])\n{'a': 122228, 'c': 'value'}\n>>> mc.set_multi({\"a\": 999, \"b\": 998, \"c\": 997}, key_prefix=\"pf_\")\n[]\n>>> mc.get(\"pf_a\")\n999\n>>> multi_result = mc.get_multi([\"b\", \"c\"], key_prefix=\"pf_\")\n>>> multi_result[\"b\"]\n998\n>>> multi_result[\"c\"]\n997\n>>> mc.delete(\"a\")\n1\n>>> mc.get(\"a\") is None\nTrue\n>>> mc.set(\"a b c\", 123) #doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\nMockcachedKeyCharacterError: Control characters not allowed\n>>> mc.set(None, 123) #doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\nMockcachedKeyNoneError: Key is None\n>>> mc.set(123, 123) #doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\nMockcachedKeyTypeError: Key must be str()'s\n>>> mc.set(u\"a\", 123) #doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\nMockcachedStringEncodingError: Key must be str()'s, not unicode.\n>>> mc.set(\"a\" * 251, 123) #doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\nMockcachedKeyLengthError: Key length is > ...",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lunant/mockcache",
    "keywords": null,
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mockcache",
    "package_url": "https://pypi.org/project/mockcache/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mockcache/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/lunant/mockcache"
    },
    "release_url": "https://pypi.org/project/mockcache/1.0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "The Python dictionary-based mock memcached client library.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1933292,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f8d45e8a33605593796552cfc67b186539da9318f7f4fd40834d427a3537e6d",
        "md5": "18e266040d9203117daad327bd4a3826",
        "sha256": "c637c35eaf0322f6c5fa6875a3fc5dc756514585a8b77abe4482d69bf364196d"
      },
      "downloads": -1,
      "filename": "mockcache-1.0.3.tar.gz",
      "has_sig": true,
      "md5_digest": "18e266040d9203117daad327bd4a3826",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4659,
      "upload_time": "2016-02-01T08:47:24",
      "upload_time_iso_8601": "2016-02-01T08:47:24.690888Z",
      "url": "https://files.pythonhosted.org/packages/8f/8d/45e8a33605593796552cfc67b186539da9318f7f4fd40834d427a3537e6d/mockcache-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}