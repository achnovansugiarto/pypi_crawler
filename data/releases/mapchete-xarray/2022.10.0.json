{
  "info": {
    "author": "Joachim Ungar",
    "author_email": "joachim.ungar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "===============\nmapchete xarray\n===============\n\nThis driver enables mapchete to write multidimensional arrays into a `Zarr`_ archive.\n\n.. image:: https://badge.fury.io/py/mapchete-xarray.svg\n    :target: https://badge.fury.io/py/mapchete-xarray\n\n.. image:: https://github.com/ungarj/mapchete_xarray/actions/workflows/python-package.yml/badge.svg\n    :target: https://github.com/ungarj/mapchete_xarray/actions\n\n.. image:: https://coveralls.io/repos/github/ungarj/mapchete_xarray/badge.svg?branch=master\n    :target: https://coveralls.io/github/ungarj/mapchete_xarray?branch=master\n\n.. image:: https://img.shields.io/pypi/pyversions/mapchete_xarray.svg\n    :target: https://pypi.python.org/pypi/mapchete_xarray\n\n\nThis driver creates a Zarr according to the structure used by the `GDAL Zarr driver`_. Bands are stored in separate 2D arrays (y, x). If a time dimension is configured, the time axis is applied to the individual bands (time, y, x).\n\nWhen using a time axis, please note that it has to be initialized with the full time range, i.e. it is not possible to extend the time axis after it was initialized.\n\nIf you plan extending your Zarr over multiple process runs you can achieve this by always specifying the full time range in the output configuration and then simply write a couple of slices per process run. Please note that for every process run after initialization you will have to use the `--overwrite` flag, otherwise the process tile will be skipped.\n\n-----\nUsage\n-----\n\nA process file can either return a `xarray.Dataset`, `xarray.DataArray` or a `numpy.ndarray` object. Please make sure though that when using a time axis, the timestamps of the slices have to be provided. In case of returning a `numpy.ndarray` this information is not available so this array has to match exactly to the output Zarr shape on the time and bands axes.\n\n3D output array\n---------------\n\nFor a simple 3D (bands, x, y) output:\n\n.. code-block:: yaml\n\n    # example.mapchete\n    process: process.py\n    zoom_levels:\n        min: 0\n        max: 12\n    input:\n    output:\n        format: xarray\n        path: output.zarr\n        dtype: uint16\n        bands: 3\n    pyramid:\n        grid: geodetic\n        metatiling: 2\n\n\n.. code-block:: python\n\n    # process.py\n    import numpy as np\n    import xarray as xr\n\n\n    def execute(\n        mp,\n        bands=3,\n        dtype=\"uint16\",\n    ):\n        shape = (bands, *mp.tile.shape)\n        dims = [\"bands\", \"Y\", \"X\"]\n        coords = {}\n\n        return xr.DataArray(\n            data=np.full(shape=shape, fill_value=500, dtype=dtype),\n            dims=dims,\n            coords=coords,\n        )\n\n\n4D output array\n---------------\n\nFor a simple 4 (time, bands, x, y) output:\n\n.. code-block:: yaml\n\n    # example.mapchete\n    process: process.py\n    zoom_levels:\n        min: 0\n        max: 12\n    input:\n    output:\n        format: xarray\n        path: output.zarr\n        dtype: uint16\n        bands: 3\n        time:\n            start: 2022-03-01\n            end: 2022-03-31\n            pattern: 0 0 * * *\n            chunksize: 10\n            # alternatively you can use steps:\n            # steps:\n            #     - 2022-06-01\n            #     - 2022-06-04\n            #     - 2022-06-06\n            #     - 2022-06-09\n            #     - 2022-06-11\n    pyramid:\n        grid: geodetic\n        metatiling: 2\n\n\n.. code-block:: python\n\n    # process.py\n    import dateutil\n    import numpy as np\n    import xarray as xr\n\n\n    def execute(\n        mp,\n        bands=3,\n        dtype=\"uint16\",\n        timestamps=None,\n    ):\n        timestamps = [\n            \"2022-03-01\",\n            \"2022-03-02\",\n            \"2022-03-04\",\n            \"2022-03-07\",\n            \"2022-03-09\",\n        ]\n        shape = (bands, len(timestamps), *mp.tile.shape)\n        dims = [\"band\", \"time\", \"Y\", \"X\"]\n        coords = {\"time\": [dateutil.parser.parse(t) for t in timestamps]}\n\n        return xr.DataArray(\n            data=np.full(shape=shape, fill_value=500, dtype=dtype),\n            dims=dims,\n            coords=coords,\n        )\n\n\n------------\nInstallation\n------------\n\n.. code-block:: shell\n\n    # install using pip:\n    $ pip install mapchete_xarray\n    # verify driver is vailable ('xarray' should be listed as output format):\n    $ mapchete formats\n\n\n-------------------\nCurrent Limitations\n-------------------\n\n- No reprojection allowed when reading from a Zarr archive.\n- No output pixelbuffer possible.\n\n\n-------\nLicense\n-------\n\nMIT License\n\nCopyright (c) 2019-2022 `EOX IT Services`_\n\n.. _`EOX IT Services`: https://eox.at/\n.. _`Zarr`: https://zarr.readthedocs.io/en/stable/index.html\n.. _`GDAL Zarr driver`: https://gdal.org/drivers/raster/zarr.html\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ungarj/mapchete_xarray",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mapchete-xarray",
    "package_url": "https://pypi.org/project/mapchete-xarray/",
    "platform": null,
    "project_url": "https://pypi.org/project/mapchete-xarray/",
    "project_urls": {
      "Homepage": "https://github.com/ungarj/mapchete_xarray"
    },
    "release_url": "https://pypi.org/project/mapchete-xarray/2022.10.0/",
    "requires_dist": [
      "croniter",
      "dask",
      "mapchete[s3] (>=2022.7.0)",
      "python-dateutil",
      "xarray",
      "zarr"
    ],
    "requires_python": "",
    "summary": "Mapchete xarray output driver",
    "version": "2022.10.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15487182,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f729bcfba01c055334f53c5529288923e12fc409ebf9714956a09b8bb6110f76",
        "md5": "b37abc4f86710bf3b48466537c86d5f7",
        "sha256": "f6262cf62b5673bc6093840d124839e429f88f9ab3c762179dde2c0ed6128583"
      },
      "downloads": -1,
      "filename": "mapchete_xarray-2022.10.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b37abc4f86710bf3b48466537c86d5f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13220,
      "upload_time": "2022-10-21T13:55:52",
      "upload_time_iso_8601": "2022-10-21T13:55:52.237893Z",
      "url": "https://files.pythonhosted.org/packages/f7/29/bcfba01c055334f53c5529288923e12fc409ebf9714956a09b8bb6110f76/mapchete_xarray-2022.10.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bd58536b12d17f0e8a1995a275b33107527679e2b570ccba64628f069d03132",
        "md5": "8c6da873ae7b55439811f57344e7bcd7",
        "sha256": "52ac8b5123d3216990b73ce6f9db9cbf9f615e88f8ac7b2a34e6d43f3c77f274"
      },
      "downloads": -1,
      "filename": "mapchete_xarray-2022.10.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8c6da873ae7b55439811f57344e7bcd7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12738,
      "upload_time": "2022-10-21T13:55:54",
      "upload_time_iso_8601": "2022-10-21T13:55:54.108792Z",
      "url": "https://files.pythonhosted.org/packages/7b/d5/8536b12d17f0e8a1995a275b33107527679e2b570ccba64628f069d03132/mapchete_xarray-2022.10.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}