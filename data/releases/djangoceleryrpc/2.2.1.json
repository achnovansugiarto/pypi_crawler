{
  "info": {
    "author": "axeman",
    "author_email": "alex.manaev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Environment :: Console",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.4",
      "Framework :: Django :: 1.5",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "django-celery-rpc\n=================\n\n[![Build Status](https://github.com/just-work/django-celery-rpc/workflows/build/badge.svg?branch=master&event=push)](https://github.com/just-work/django-celery-rpc/actions?query=event%3Apush+branch%3Amaster+workflow%3Abuild)\n[![codecov](https://codecov.io/gh/just-work/django-celery-rpc/branch/master/graph/badge.svg)](https://codecov.io/gh/just-work/django-celery-rpc)\n[![PyPI version](https://badge.fury.io/py/django-celery-rpc.svg)](https://badge.fury.io/py/djangoceleryrpc)\n\nRemote access from one system to models and functions of other one using Celery machinery.\n\nRelies on three outstanding python projects:\n\n - [Celery](http://www.celeryproject.org/)\n - [Django Rest Framework](http://www.djang)\n - [Django](https://www.djangoproject.com/)\n\n## Main features\n\nClient and server are designed to:\n\n - filter models with Django ORM lookups, Q-objects and excludes;\n - change model state (create, update, update or create, delete);\n - change model state in bulk mode (more than one object per request);\n - atomic get-set model state with bulk mode support;\n - call function;\n - client does not require Django;\n\n## Installation\n\n```shell script\npip install djangoceleryrpc\n```\n\n## Basic Configuration\n\nDefault configuration of **django-celery-rpc** must be overridden in settings.py by **CELERY_RPC_CONFIG**.\nThe **CELERY_RPC_CONFIG** is a dict which must contains at least two keys: **BROKER_URL** and **CELERY_RESULT_BACKEND**.\nAny Celery config params also permitted\n(see [Configuration and defaults](http://celery.readthedocs.org/en/latest/configuration.html))\n\n### server **span**\n\nsetting.py:\n\n```python\n# minimal required configuration\nCELERY_RPC_CONFIG = {\n\t'BROKER_URL': 'amqp://guest:guest@rabbitmq:5672//',\n\t'CELERY_RESULT_BACKEND': 'redis://redis:6379/0',\n}\n```\n\n### server **eggs**\n\nsetting.py:\n\n```python\n# alternate request queue and routing key\nCELERY_RPC_CONFIG = {\n\t'BROKER_URL': 'amqp://guest:guest@rabbitmq:5672/',\n\t'CELERY_RESULT_BACKEND': 'amqp://guest:guest@rabbitmq:5672/',\n\t'CELERY_DEFAULT_QUEUE': 'celery_rpc.requests.alter_queue',\n\t'CELERY_DEFAULT_ROUTING_KEY': 'celery_rpc.alter_routing_key'\n}\n```\n\n### client\n\nsetting.py:\n\n```python\n# this settings will be used in clients by default\nCELERY_RPC_CONFIG = {\n\t'BROKER_URL': 'amqp://guest:guest@rabbitmq:5672/',\n\t'CELERY_RESULT_BACKEND': 'redis://redis:6379/0',\n}\n\n# 'eggs' alternative configuration will be explicitly passed to the client constructor\nCELERY_RPC_EGGS_CLIENT = {\n\t# BROKER_URL will be used by default from section above\n\t'CELERY_RESULT_BACKEND': 'amqp://guest:guest@rabbitmq:5672/',\n\t'CELERY_DEFAULT_QUEUE': 'celery_rpc.requests.alter_queue',\n\t'CELERY_DEFAULT_ROUTING_KEY': 'celery_rpc.alter_routing_key'\n}\n```\n\n*Note:\n1. client and server must share the same __BROKER_URL__, __RESULT_BACKEND__, __DEFAULT_EXCHANGE__, __DEFAULT_QUEUE__, __DEFAULT_ROUTING_KEY__\n2. different server must serve different request queues with different routing keys or must work with different exchanges*\n\nexample.py\n\n```python\nfrom celery_rpc.client import Client\nfrom django.conf import settings\n\n# create client with default settings\nspan_client = Client()\n\n# create client for `eggs` server\neggs_client = Client(CELERY_RPC_EGGS_CLIENT)\n```\n\n## Using client\n\nYou can find more examples in tests.\n\n### Filtering\n\nSimple filtering example\n\n```\nspan_client.filter('app.models:MyModel', kwargs=dict(filters={'a__exact':'a'}))\n```\n\nFiltering with Q object\n\n```\nfrom django.db.models import Q\nspan_client.filter('app.models:MyModel', kwargs=dict(filters_Q=(Q(a='1') | Q(b='1')))\n```\n\nAlso, we can use both Q and lookups\n\n```\nspan_client.filter('app.models:MyModel', kwargs=dict(filters={'c__exact':'c'}, filters_Q=(Q(a='1') | Q(b='1')))\n```\n\nExclude supported\n\n```\nspan_client.filter('app.models:MyModel', kwargs=dict(exclude={'c__exact':'c'}, exclude_Q=(Q(a='1') | Q(b='1')))\n```\n\nYou can mix filters and exclude, Q-object with lookups. Try it yourself. ;)\n\nFull list of available kwargs:\n\n    filters - dict of terms compatible with django lookup fields\n    offset - offset from which return a results\n    limit - max number of results\n    fields - list of serializer fields, which will be returned\n    exclude - lookups for excluding matched models\n    order_by - order of results (list, tuple or string),\n        minus ('-') set reverse order, default = []\n    filters_Q - django Q-object for filtering models\n    exclude_Q - django Q-object for excluding matched models\n\n\nList of all MyModel objects with high priority\n\n```\nspan_client.filter('app.models:MyModel', high_priority=True)\n```\n\n### Creating\n\nCreate one object\n\n```python\nspan_client.create('apps.models:MyModel', data={\"a\": \"a\"})\n```\n\nBulk creating\n\n```python\nspan_client.create('apps.models:MyModel', data=[{\"a\": \"a\"}, {\"a\": \"b\"}])\n```\n\n### Updating\n\nUpdate one object by PK field name\n\n```python\nspan_client.update('apps.models:MyModel', data={\"id\": 1, \"a\": \"a\"})\n```\n\nUpdate one object by special alias 'pk' which matched automatically to PK field\n\n```python\nspan_client.update('apps.models:MyModel', data={\"id\": 1, \"a\": \"a\"})\n```\n\nAttention! Magic area! Update one object by any field you wish\n\n```python\nspan_client.update('apps.models:MyModel', data={\"alternative_key_field\": 42, \"a\": \"a\"}, \n\t\t\t\t   {'identity': 'alternative_key_field'})\n```\n\n### Update or create, Delete and so on\n\nAll cases are very similar. Try it you console!\n\n### Full list of supported model methods\n\n - `filter` - select models\n - `create` - create new models, raise exception if model exists\n - `update` - update existing models\n - `update_or_create` - update if exist or create new\n - `delete` - delete existing models\n - `getset` - set new state and return old state atomically \n\nAll method support options:\n\n - `fields` - shrink result fields\n - `serializer_cls` - fully qualified symbol name to DRF serializer class on server\n - `identity` - field name which will be used rather than PK field (mindless for `filter`)\n\n### Pipe\n\nIt's possible to pipeline tasks, so they will be executed in one transaction.\n\n```python\np = span_client.pipe()\np = p.create('apps.models:MyModel', data={\"a\": \"a\"})\np = p.create('apps.models:MyAnotherModel', data={\"b\": \"b\"})\np.run()\n```\n\nYou can pass some arguments from previous task to the next.\n\nSuppose you have those models on the server\n\n```python\nclass MyModel(models.Model):\n    a = models.CharField()\n\nclass MyAnotherModel(models.Model):\n    fk = models.ForeignKey(MyModel)\n    b = models.CharField()\n```\n\nYou need to create instance of MyModel and instance of MyAnotherModel which reffers to MyModel\n\n```python\np = span_client.pipe()\np = p.create('apps.models:MyModel', data={\"a\": \"a\"})\np = p.translate({\"fk\": \"id\"}, defaults={\"b\": \"b\"})\np = p.create('apps.models:MyAnotherModel')\np.run()\n```\n\nIn this example the `translate` task: \n - take result of the previous `create` task\n - extract value of \"id\" field from it\n - add this value to \"defaults\" by key \"fk\"\n\nAfter that next `create` task takes result of `translate` as input data\n\n### Add/delete m2m relations\n\nLets take such models:\n\n```python\nclass MyModel(models.Model):\n    str = models.CharField()\n\nclass MyManyToManyModel(models.Model):\n    m2m = models.ManyToManyField(MyModel, null=True)\n```\n\nAdd relation between existing objects\n\n```python\nmy_models = span_client.create('apps.models:MyModel', \n\t\t\t\t\t\t\t   [{'str': 'monthy'}, {'str': 'python'}])\nm2m_model = span_client.create('apps.models:MyManyToManyModel',\n                               {'m2m': [my_models[0]['id']]})\n\n# Will add 'python' to m2m_model.m2m where 'monty' already is\ndata = {'mymodel': my_models[1]['id'], 'mymanytomanymodel': m2m_model['id']}\nthrough = span_client.create('apps.models:MyManyToManyModel.m2m.through', data)\n```\n\nAnd then delete some of existing relations\n\n```python\n# Next `pipe` will eliminate all relations where `mymodel__str` equals 'monty'\np = span_client.pipe()\np = p.filter('apps.models:MyManyToManyModel.m2m.through', {'mymodel__str': 'monthy'})\np = p.delete('apps.models:MyManyToManyModel.m2m.through')\np.run()\n```\n\n## Run server instance\n\n```python\ncelery worker -A celery_rpc.app\n```\n\nServer with support task consuming prioritization\n\n```python\ncelery multi start 2 -A celery_rpc.app -Q:1 celery_rpc.requests.high_priority\n```\n\n*Note, you must replace 'celery_rpc.request' with actual value of config param __CELERY_DEFAULT_QUEUE__*\n\nCommand will start two instances. First instance will consume from high priority queue only. Second instance will serve both queues.\n\nFor daemonization see [Running the worker as a daemon](http://celery.readthedocs.org/en/latest/tutorials/daemonizing.html)\n\n## Run tests\n\n```shell\npython django-celery-rpc/celery_rpc/runtests/runtests.py\n```\n\n## More Configuration\n\n### Overriding base task class\n\n```python\nOVERRIDE_BASE_TASKS = {\n    'ModelTask': 'package.module.MyModelTask',\n    'ModelChangeTask': 'package.module.MyModelChangeTask',\n    'FunctionTask': 'package.module.MyFunctionTask'\n}\n\n\n```\nSupported class names: `ModelTask`, `ModelChangeTask`, `FunctionTask`\n\n### Handling remote exceptions individually\n\n```python\n# Both server and client\nCELERY_RPC_CONFIG['WRAP_REMOTE_ERRORS'] = True\n```\n\nAfter enabling remote exception wrapping client will raise same errors happened\n on the server side.\nIf client side has no error defined (i.e. no package installed), \n`Client.RemoteError` will be raised.\nAlso, `Client.RemoteError` is a base for all exceptions on the client side.\n\nFor unknown exceptions this code is valid:\n\n```python\ntry:\n    result = rpc_client.call(\"remote_func\")\nexcept rpc_client.errors.SomeUnknownError as e:\n    # here a stub for remote SomeUnknownError is handled\n    print (e.args)\n```\n\nFor known exceptions both variants work:\n\n```python\n\ntry:\n    result = rpc_client.call(\"remote_func\")\nexcept rpc_client.errors.MultipleObjectsReturned as e:\n    # django.core.exceptions.MultipleObjectsReturned\n    handle_error(e)\nexcept django.core.exceptions.ObjectDoesNotExist as e:\n    # django.core.exceptions.ObjectDoesNotExist \n    handle_error(e)\n```\n\nIf original exception hierarchy is needed:\n\n```python\n\nSomeBaseError = rpc_client.errors.SomeBaseError\n\nDerivedError = rpc_client.errors.subclass(SomeBaseError, \"DerivedError\")\n```\n\n\n## TODO\n\n - Set default non-generic model serializer.\n - Test support for RPC result backend from Celery.\n - Token auth and permissions support (like DRF).\n - Resource map and strict mode.\n - ...\n\n## Acknowledgements\n\nThanks for all who contributing to this project:\n - https://github.com/voron3x\n - https://github.com/dtrst\n - https://github.com/anatoliy-larin\n - https://github.com/bourivouh\n - https://github.com/tumb1er\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/just-work/django-celery-rpc",
    "keywords": "",
    "license": "Public",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangoceleryrpc",
    "package_url": "https://pypi.org/project/djangoceleryrpc/",
    "platform": "",
    "project_url": "https://pypi.org/project/djangoceleryrpc/",
    "project_urls": {
      "Homepage": "https://github.com/just-work/django-celery-rpc"
    },
    "release_url": "https://pypi.org/project/djangoceleryrpc/2.2.1/",
    "requires_dist": [
      "celery (<5.1.0,>=3.1.5)",
      "jsonpickle (<1.4.1,>=0.8.0)",
      "six"
    ],
    "requires_python": "",
    "summary": "Remote access from one system to models and functions of another one using Celery machinery.",
    "version": "2.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16972222,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4dfcfefbd6c77bda14403140e64ce15a7b0609950f30a5e33bb19984a1d91850",
        "md5": "c5610535f7b93127896e94fe2a22c316",
        "sha256": "dd58d448a0209a6b9f46f2d5c18865a9b7707113e00bc6162dcb1a70a7de034c"
      },
      "downloads": -1,
      "filename": "djangoceleryrpc-2.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c5610535f7b93127896e94fe2a22c316",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 37371,
      "upload_time": "2020-10-31T16:54:43",
      "upload_time_iso_8601": "2020-10-31T16:54:43.100034Z",
      "url": "https://files.pythonhosted.org/packages/4d/fc/fefbd6c77bda14403140e64ce15a7b0609950f30a5e33bb19984a1d91850/djangoceleryrpc-2.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32726f5fb969ca0dc7a1c63b8aaa9311f446187b4689a5e8cc2091dba2aa762e",
        "md5": "780dcd7772b38012a8e28d051b93b065",
        "sha256": "79e927fcc23daf2869daf9d6e857d8ef0b4f5c16d4b7bebb2bc6bc3f8091c709"
      },
      "downloads": -1,
      "filename": "djangoceleryrpc-2.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "780dcd7772b38012a8e28d051b93b065",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34728,
      "upload_time": "2020-10-31T16:54:44",
      "upload_time_iso_8601": "2020-10-31T16:54:44.066286Z",
      "url": "https://files.pythonhosted.org/packages/32/72/6f5fb969ca0dc7a1c63b8aaa9311f446187b4689a5e8cc2091dba2aa762e/djangoceleryrpc-2.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}