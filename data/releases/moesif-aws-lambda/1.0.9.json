{
  "info": {
    "author": "Moesif, Inc",
    "author_email": "keyur@moesif.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Moesif AWS Lambda Middleware\n\n[![Built For][ico-built-for]][link-built-for]\n[![Software License][ico-license]][link-license]\n[![Source Code][ico-source]][link-source]\n\nMiddleware (Python) to automatically log API calls from AWS Lambda functions\nand sends to [Moesif](https://www.moesif.com) for API analytics and log analysis. \n\nDesigned for APIs that are hosted on AWS Lambda using Amazon API Gateway or Application Load Balancer\nas a trigger.\n\nThis middleware expects the\n[Lambda proxy integration type.](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html#api-gateway-set-up-lambda-proxy-integration-on-proxy-resource)\nIf you're using AWS Lambda with API Gateway, you are most likely using the proxy integration type.\n\n## How to install\n\n```shell\npip install moesif_aws_lambda\n```\n\n## How to use\n\n### 1. Add middleware to your Lambda application.\n\n```python\nfrom moesif_aws_lambda.middleware import MoesifLogger\n\nmoesif_options = {\n    'LOG_BODY': True\n}\n\n@MoesifLogger(moesif_options)\ndef lambda_handler(event, context):\n    return {\n        'statusCode': 200,\n        'isBase64Encoded': False,\n        'body': {\n            'msg': 'Hello from Lambda!'\n        },\n        'headers': {\n            'Content-Type': 'application/json'\n        }\n    }\n```\n\n### 2. Set MOESIF_APPLICATION_ID environment variable \n\nAdd a new environment variable with the name `MOESIF_APPLICATION_ID` and the value being your Moesif application id,\nwhich can be found in the [_Moesif Portal_](https://www.moesif.com/).\nAfter signing up for a Moesif account, your Moesif Application Id will be displayed during the onboarding steps. \n\nYou can always find your Moesif Application Id at any time by logging \ninto the [_Moesif Portal_](https://www.moesif.com/), click on the top right menu,\n and then clicking _Installation_.\n\n## Repo file structure\n\n- `moesif_aws_lambda/middleware.py` the middleware library\n- `lambda_function.py` sample AWS Lambda function using the middleware\n\n## Optional: Capturing outgoing API calls\nIf you want to capture all outgoing API calls from your Python Lambda function to third parties like\nStripe or to your own dependencies, call `start_capture_outgoing()` to start capturing. This mechanism works by \npatching the [Requests](https://requests.readthedocs.io/en/master/) \n\n```python\nfrom moesif_aws_lambda.middleware import *\nstart_capture_outgoing(moesif_options) # moesif_options are the configuration options.\n```\n\n## Configuration options\n\n### __`IDENTIFY_USER`__\n\nType: `(event, context) => String`\n\n`IDENTIFY_USER` is a function that takes AWS lambda `event` and `context` objects as arguments\nand returns a user_id. This enables Moesif to attribute API requests to individual unique users\nso you can understand who calling your API. This can be used simultaneously with `IDENTIFY_COMPANY`\nto track both individual customers and the companies their a part of.\n\n\n```python\ndef identify_user(event, context):\n  # your code here, must return a string\n  return event[\"requestContext\"][\"identity\"][\"cognitoIdentityId\"]\n```\n\n### __`IDENTIFY_COMPANY`__\n\nType: `(event, context) => String`\n\n`IDENTIFY_COMPANY` is a function that takes AWS lambda `event` and `context` objects as arguments\nand returns a company_id. If your business is B2B, this enables Moesif to attribute \nAPI requests to specific companies or organizations so you can understand which accounts are \ncalling your API. This can be used simultaneously with `IDENTIFY_USER` to track both \nindividual customers and the companies their a part of. \n\n\n```python\ndef identify_company(event, context):\n  # your code here, must return a string\n  return '7890'\n}\n```\n\n### __`GET_SESSION_TOKEN`__\n\nType: `(event, context) => String`\n\n`GET_SESSION_TOKEN` a function that takes AWS lambda `event` and `context` objects as arguments and returns a\nsession token (i.e. such as an API key).\n\n\n```python\ndef get_session_token(event, context):\n    # your code here, must return a string.\n    return 'XXXXXXXXX'\n```\n\n### __`GET_API_VERSION`__\n\nType: `(event, context) => String`\n\n`GET_API_VERSION` is a function that takes AWS lambda `event` and `context` objects as arguments and\nreturns a string to tag requests with a specific version of your API.\n\n\n```python\ndef get_api_version(event, context):\n  # your code here. must return a string.\n  return '1.0.0'\n```\n\n### __`GET_METADATA`__\n\nType: `(event, context) => String`\n\n`GET_METADATA` is a function that AWS lambda `event` and `context` objects as arguments and returns an object that allows you to add custom metadata that will be associated with the request. The metadata must be a simple python object that can be converted to JSON. For example, you may want to save a function_name, a trace_id, or request_context with the request.\n\n\n```python\ndef get_metadata(event, context):\n  # your code here:\n  return {\n        'trace_id': context.aws_request_id,\n        'function_name': context.function_name,\n        'request_context': event['requestContext']\n    }\n```\n\n### __`SKIP`__\n\nType: `(event, context) => Boolean`\n\n`SKIP` is a function that takes AWS lambda `event` and `context` objects as arguments and returns true\nif the event should be skipped (i.e. not logged)\n<br/>_The default is shown below and skips requests to the root path \"/\"._\n\n\n```python\ndef should_skip(event, context):\n    # your code here. must return a boolean.\n    return \"/\" in event['path']\n```\n\n### __`MASK_EVENT_MODEL`__\n\nType: `MoesifEventModel => MoesifEventModel`\n\n`MASK_EVENT_MODEL` is a function that takes the final Moesif event model (rather than the AWS lambda event/context objects) as an argument before being sent to Moesif. With maskContent, you can make modifications to headers or body such as removing certain header or body fields.\n\n```python\ndef mask_event(eventmodel):\n  # remove any field that you don't want to be sent to Moesif.\n  return eventmodel\n ```\n\n### __`DEBUG`__\n\nType: `Boolean`\n\nSet to true to print debug logs if you're having integration issues. \n\n### __`LOG_BODY`__\n\nType: `Boolean`\n\n`LOG_BODY` is default to true, set to false to remove logging request and response body to Moesif.\n\n## Options for logging outgoing calls\n\nThe options below are applied to outgoing API calls. The request and response objects passed in are  [Requests](https://requests.readthedocs.io/en/master/user/advanced/#request-and-response-objects) request and [Response](https://requests.readthedocs.io/en/master/user/advanced/#request-and-response-objects) response objects.\n\n### __`SKIP_OUTGOING`__\n(optional) _(req, res) => boolean_, a function that takes a [Requests](https://requests.readthedocs.io/en/master/) request and response,\nand returns true if you want to skip this particular event.\n\n### __`IDENTIFY_USER_OUTGOING`__\n(optional, but highly recommended) _(req, res) => string_, a function that takes [Requests](https://requests.readthedocs.io/en/master/) request and response, and returns a string that is the user id used by your system. While Moesif tries to identify users automatically,\nbut different frameworks and your implementation might be very different, it would be helpful and much more accurate to provide this function.\n\n### __`IDENTIFY_COMPANY_OUTGOING`__\n(optional) _(req, res) => string_, a function that takes [Requests](https://requests.readthedocs.io/en/master/) request and response, and returns a string that is the company id for this event.\n\n### __`GET_METADATA_OUTGOING`__\n(optional) _(req, res) => dictionary_, a function that takes [Requests](https://requests.readthedocs.io/en/master/) request and response, and\nreturns a dictionary (must be able to be encoded into JSON). This allows\nto associate this event with custom metadata. For example, you may want to save a VM instance_id, a trace_id, or a tenant_id with the request.\n\n### __`GET_SESSION_TOKEN_OUTGOING`__\n(optional) _(req, res) => string_, a function that takes [Requests](https://requests.readthedocs.io/en/master/) request and response, and returns a string that is the session token for this event. Again, Moesif tries to get the session token automatically, but if you setup is very different from standard, this function will be very help for tying events together, and help you replay the events.\n\n### __`LOG_BODY_OUTGOING`__\n(optional) _boolean_, default True, Set to False to remove logging request and response body.\n\n## Update User\n\n### Update A Single User\nCreate or update a user profile in Moesif.\nThe metadata field can be any customer demographic or other info you want to store.\nOnly the `user_id` field is required.\nFor details, visit the [Python API Reference](https://www.moesif.com/docs/api?python#update-a-user).\n\n```python\nfrom moesif_aws_lambda.middleware import *\n\nmoesif_options = {\n    'LOG_BODY': True,\n    'DEBUG': True,\n}\n\n# Only user_id is required.\n# Campaign object is optional, but useful if you want to track ROI of acquisition channels\n# See https://www.moesif.com/docs/api#users for campaign schema\n# metadata can be any custom object\nuser = {\n  'user_id': '12345',\n  'company_id': '67890', # If set, associate user with a company object\n  'campaign': {\n    'utm_source': 'google',\n    'utm_medium': 'cpc',\n    'utm_campaign': 'adwords',\n    'utm_term': 'api+tooling',\n    'utm_content': 'landing'\n  },\n  'metadata': {\n    'email': 'john@acmeinc.com',\n    'first_name': 'John',\n    'last_name': 'Doe',\n    'title': 'Software Engineer',\n    'sales_info': {\n        'stage': 'Customer',\n        'lifetime_value': 24000,\n        'account_owner': 'mary@contoso.com'\n    },\n  }\n}\n\nupdate_user(user, moesif_options)\n```\n\n### Update Users in Batch\nSimilar to update_user, but used to update a list of users in one batch.\nOnly the `user_id` field is required.\nFor details, visit the [Python API Reference](https://www.moesif.com/docs/api?python#update-users-in-batch).\n\n```python\nfrom moesif_aws_lambda.middleware import *\n\nmoesif_options = {\n    'LOG_BODY': True,\n    'DEBUG': True,\n}\n\nuserA = {\n  'user_id': '12345',\n  'company_id': '67890', # If set, associate user with a company object\n  'metadata': {\n    'email': 'john@acmeinc.com',\n    'first_name': 'John',\n    'last_name': 'Doe',\n    'title': 'Software Engineer',\n    'sales_info': {\n        'stage': 'Customer',\n        'lifetime_value': 24000,\n        'account_owner': 'mary@contoso.com'\n    },\n  }\n}\n\nuserB = {\n  'user_id': '54321',\n  'company_id': '67890', # If set, associate user with a company object\n  'metadata': {\n    'email': 'mary@acmeinc.com',\n    'first_name': 'Mary',\n    'last_name': 'Jane',\n    'title': 'Software Engineer',\n    'sales_info': {\n        'stage': 'Customer',\n        'lifetime_value': 48000,\n        'account_owner': 'mary@contoso.com'\n    },\n  }\n}\nupdate_users_batch([userA, userB], moesif_options)\n```\n\n## Update Company\n\n### Update A Single Company\nCreate or update a company profile in Moesif.\nThe metadata field can be any company demographic or other info you want to store.\nOnly the `company_id` field is required.\nFor details, visit the [Python API Reference](https://www.moesif.com/docs/api?python#update-a-company).\n\n```python\nfrom moesif_aws_lambda.middleware import *\n\nmoesif_options = {\n    'LOG_BODY': True,\n    'DEBUG': True,\n}\n\n# Only company_id is required.\n# Campaign object is optional, but useful if you want to track ROI of acquisition channels\n# See https://www.moesif.com/docs/api#update-a-company for campaign schema\n# metadata can be any custom object\ncompany = {\n  'company_id': '67890',\n  'company_domain': 'acmeinc.com', # If domain is set, Moesif will enrich your profiles with publicly available info\n  'campaign': {\n    'utm_source': 'google',\n    'utm_medium': 'cpc',\n    'utm_campaign': 'adwords',\n    'utm_term': 'api+tooling',\n    'utm_content': 'landing'\n  },\n  'metadata': {\n    'org_name': 'Acme, Inc',\n    'plan_name': 'Free',\n    'deal_stage': 'Lead',\n    'mrr': 24000,\n    'demographics': {\n        'alexa_ranking': 500000,\n        'employee_count': 47\n    },\n  }\n}\n\nupdate_company(company, moesif_options)\n```\n\n### Update Companies in Batch\nSimilar to update_company, but used to update a list of companies in one batch.\nOnly the `company_id` field is required.\nFor details, visit the [Python API Reference](https://www.moesif.com/docs/api?python#update-companies-in-batch).\n\n```python\nfrom moesif_aws_lambda.middleware import *\n\nmoesif_options = {\n    'LOG_BODY': True,\n    'DEBUG': True,\n}\n\ncompanyA = {\n  'company_id': '67890',\n  'company_domain': 'acmeinc.com', # If domain is set, Moesif will enrich your profiles with publicly available info\n  'metadata': {\n    'org_name': 'Acme, Inc',\n    'plan_name': 'Free',\n    'deal_stage': 'Lead',\n    'mrr': 24000,\n    'demographics': {\n        'alexa_ranking': 500000,\n        'employee_count': 47\n    },\n  }\n}\n\ncompanyB = {\n  'company_id': '09876',\n  'company_domain': 'contoso.com', # If domain is set, Moesif will enrich your profiles with publicly available info\n  'metadata': {\n    'org_name': 'Contoso, Inc',\n    'plan_name': 'Free',\n    'deal_stage': 'Lead',\n    'mrr': 48000,\n    'demographics': {\n        'alexa_ranking': 500000,\n        'employee_count': 53\n    },\n  }\n}\n\nupdate_companies_batch([companyA, companyB], moesif_options)\n```\n\n## Examples\n\n- [A complete example is available on GitHub](https://github.com/Moesif/moesif-aws-lambda-python-example).\n\n## Other integrations\n\nTo view more documentation on integration options, please visit __[the Integration Options Documentation](https://www.moesif.com/docs/getting-started/integration-options/).__\n\n[ico-built-for]: https://img.shields.io/badge/built%20for-aws%20lambda-blue.svg\n[ico-license]: https://img.shields.io/badge/License-Apache%202.0-green.svg\n[ico-source]: https://img.shields.io/github/last-commit/moesif/moesif-aws-lambda-python.svg?style=social\n\n[link-built-for]: https://aws.amazon.com/lambda/\n[link-license]: https://raw.githubusercontent.com/Moesif/moesif-aws-lambda-python/master/LICENSE\n[link-source]: https://github.com/moesif/moesif-aws-lambda-python\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.moesif.com/docs/server-integration/aws-lambda-python/",
    "keywords": "moesif aws serverless api gateway lambda debug logging trace analytics",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "moesif-aws-lambda",
    "package_url": "https://pypi.org/project/moesif-aws-lambda/",
    "platform": null,
    "project_url": "https://pypi.org/project/moesif-aws-lambda/",
    "project_urls": {
      "Homepage": "https://www.moesif.com/docs/server-integration/aws-lambda-python/"
    },
    "release_url": "https://pypi.org/project/moesif-aws-lambda/1.0.9/",
    "requires_dist": [
      "moesifapi (>=1.4.0)",
      "lambda-decorators",
      "moesifpythonrequest (>=0.2.0)",
      "nose ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Moesif Middleware to automatically log API calls from AWS Lambda functions",
    "version": "1.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15894244,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa92d74c4e68fca44775fb956d6383e88f71071df17dbface5469946c3dc60c4",
        "md5": "cea9eb3fca87b4f8a5104aebdc2f9f42",
        "sha256": "c30910a111769fabcb30927efdb9b796ce752f712aef4d09885518745a1af8b0"
      },
      "downloads": -1,
      "filename": "moesif_aws_lambda-1.0.9-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cea9eb3fca87b4f8a5104aebdc2f9f42",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 17245,
      "upload_time": "2022-09-09T23:57:03",
      "upload_time_iso_8601": "2022-09-09T23:57:03.902869Z",
      "url": "https://files.pythonhosted.org/packages/aa/92/d74c4e68fca44775fb956d6383e88f71071df17dbface5469946c3dc60c4/moesif_aws_lambda-1.0.9-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2684a44728194e5973192b5db8c65736d0c4b58dd21137269f21d05374205139",
        "md5": "73bf9267426dccb950ce6a1332b0c48b",
        "sha256": "537c0cc14e59de180ab6618237f78d1d60b3956bde399b8fc06f74131282e2e0"
      },
      "downloads": -1,
      "filename": "moesif_aws_lambda-1.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "73bf9267426dccb950ce6a1332b0c48b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20970,
      "upload_time": "2022-09-09T23:57:05",
      "upload_time_iso_8601": "2022-09-09T23:57:05.521708Z",
      "url": "https://files.pythonhosted.org/packages/26/84/a44728194e5973192b5db8c65736d0c4b58dd21137269f21d05374205139/moesif_aws_lambda-1.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}