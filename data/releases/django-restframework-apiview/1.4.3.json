{
  "info": {
    "author": "007gzs",
    "author_email": "007gzs@sina.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "#############################\nDjango REST_framework APIView\n#############################\n.. image:: https://travis-ci.org/007gzs/django_restframework_apiview.svg?branch=master\n       :target: https://travis-ci.org/007gzs/django_restframework_apiview\n\n***********\nScreenshots\n***********\n.. image:: https://github.com/007gzs/django_restframework_apiview/raw/master/img/demo.jpg\n\n****************\nUse in your app\n****************\nInstall using pip::\n\n    pip install django_restframework_apiview\n\nAdd 'apiview' to your INSTALLED_APPS setting::\n\n    INSTALLED_APPS = (\n        ...\n        'apiview',\n    )\n\nJSONP Renderer And debug apiview with paramslist::\n\n    REST_FRAMEWORK = {\n        ...\n        'DEFAULT_RENDERER_CLASSES': [\n            ...\n            'apiview.renderers.JSONPRenderer',\n        ],\n    }\n    if DEBUG:\n        REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append('apiview.renderers.BrowsableAPIRenderer')\n\nAdd error code to settings.py::\n    \n    ERROR_CODE_DEFINE = (\n        ('ERR_AUTH_NOLOGIN',            10001,  'No login'),\n        ('ERR_AUTH_USER_EXISTS',        10002,  'User name has exists'),\n        ('ERR_AUTH_USER_NOT_EXISTS',    10003,  'User not exists'),\n        ('ERR_AUTH_PASSWORD',           10005,  'Password error'),\n    )\n\nedit myapp/views.py::\n    \n    #! usr/bin/env python\n    # encoding: utf-8\n    from __future__ import absolute_import, unicode_literals\n\n    from django.db import IntegrityError, transaction\n    from django.contrib.auth import authenticate, login\n    from django.contrib.auth.models import User\n    from apiview.err_code import ErrCode\n    from apiview.exceptions import CustomError\n    from apiview.view import APIView\n    from apiview.views import ViewSite\n    from apiview.views import fields\n\n\n    site = ViewSite(name='base', app_name='base')\n\n\n    class APIBase(APIView):\n\n        class Meta:\n            path = '/'\n            param_fields = (\n                ('channel', fields.CharField(help_text='App Channel', required=False)),\n                ('version', fields.CharField(help_text='App Version', required=False)),\n            )\n\n\n    class UserAPIBase(APIBase):\n\n        def check_user_permission(self, request):\n            user = request.user\n            if not user.is_authenticated() or not isinstance(user, User):\n                raise CustomError(ErrCode.ERR_AUTH_NOLOGIN)\n\n        def view(self, request, *args, **kwargs):\n            self.check_user_permission(request)\n            return super(APIBase, self).view(request, *args, **kwargs)\n\n        class Meta:\n            path = '/user'\n\n\n    @site\n    class Login(APIBase):\n\n        name = '用户登陆'\n\n        def get_context(self, request, *args, **kwargs):\n            user = authenticate(username=request.params.username, password=request.params.password)\n            if user is None:\n                raise CustomError(ErrCode.ERR_AUTH_PASSWORD)\n            login(request, user)\n            return self.get_default_context(user_info={'username':request.user.username, 'email':request.user.email})\n\n        class Meta:\n            path = 'user/login'\n            param_fields = (\n                ('username', fields.CharField(help_text='用户名')),\n                ('password', fields.CharField(help_text='密码')),\n            )\n\n\n    @site\n    class Register(APIBase):\n\n        name = '用户注册'\n\n        def get_context(self, request, *args, **kwargs):\n            try:\n                user = User.objects.create_user(request.params.username, request.params.email, request.params.password)\n            except IntegrityError:\n                raise CustomError(ErrCode.ERR_AUTH_USER_EXISTS)\n            return self.get_default_context()\n\n        class Meta:\n            path = 'user/register'\n            param_fields = (\n                ('username', fields.RegexField(help_text='用户名', regex=r'^[a-zA-Z0-9_]{3,10}$')),\n                ('password', fields.CharField(help_text='密码')),\n                ('email', fields.EmailField(help_text='Email')),\n            )\n\n    @site\n    class Info(UserAPIBase):\n\n        name = '用户信息'\n\n        def get_context(self, request, *args, **kwargs):\n            user_info = {'username':request.user.username, 'email':request.user.email}\n\n            return self.get_default_context(user_info=user_info)\n\n\n    @site\n    class Logout(UserAPIBase):\n\n        name = '退出登陆'\n\n        def get_context(self, request, *args, **kwargs):\n            logout(request)\n\n            return self.get_default_context()\n\n    urlpatterns = site.urlpatterns\n\nadd to urls.py end:\n\n    urlpatterns.append(url(r'^test/', include(\"myapp.views\")))\n\n*******\nExample\n*******\nrun example::\n\n    git clone https://github.com/007gzs/django_restframework_apiview.git\n    cd django_restframework_apiview/example\n    pip install -r requirements.txt\n    python manage.py makemigrations\n    python manage.py migrate\n    python manage.py runserver\n    open http://127.0.0.1:8000/example.html in browser\n\n\napi demo::\n    http://127.0.0.1:8000/example/param_filed_info",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/007gzs/django_restframework_apiview",
    "keywords": "django rest framework api view",
    "license": "LGPL v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-restframework-apiview",
    "package_url": "https://pypi.org/project/django-restframework-apiview/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-restframework-apiview/",
    "project_urls": {
      "Homepage": "https://github.com/007gzs/django_restframework_apiview"
    },
    "release_url": "https://pypi.org/project/django-restframework-apiview/1.4.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django REST_framework APIView",
    "version": "1.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9282220,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4062003b70f1c435e7484c84740bfd22fd84faf022311cc525472ac76144865",
        "md5": "b2bbccf274f71e718733d50aa7662a50",
        "sha256": "72c00dde2829be97fe8d653c4ab8654871c64b101889fa820b1229d2c4c7a57d"
      },
      "downloads": -1,
      "filename": "django_restframework_apiview-1.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b2bbccf274f71e718733d50aa7662a50",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 60162,
      "upload_time": "2021-02-01T03:32:09",
      "upload_time_iso_8601": "2021-02-01T03:32:09.720662Z",
      "url": "https://files.pythonhosted.org/packages/c4/06/2003b70f1c435e7484c84740bfd22fd84faf022311cc525472ac76144865/django_restframework_apiview-1.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}