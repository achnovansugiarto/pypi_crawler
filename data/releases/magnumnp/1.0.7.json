{
  "info": {
    "author": "Florian Bruckner",
    "author_email": "florian.bruckner@univie.ac.at",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "magnum.np 1.0.7\n===============\n\nmagnum.np is a Python library for the solution of micromagnetic problems with the finite-difference method. It implements state-of-the-art algorithms and is based on [pytorch](http://www.pytorch.org/), which allows to seamlessly run code either on GPU or on CPU. Simulation scripts are written in Python which leads to very readable yet flexible code. Due to [pytorch](http://www.pytorch.org/) integration, extensive postprocessing can be done directly in the simulations scripts. Furthermore [pytorch](http://www.paraview.org/)'s autograd feature makes it possible to solve inverse problems without significant modifications of the code. This manual is meant to give you both a quick start and a reference to magnum.np.\n\n\nFeatures\n--------\n* Explicit / Implicit time-integration of the Landau-Lifshitz-Gilbert Equation\n* Fast FFT Demagnetization-field computation optimized for small memory footprint\n* Fast FFT Oersted-field optimized for small memory footprint\n* Arbitrary Material Parameters variing in space and time\n* Spin-torque model by Zhang and Li, Slonczewski\n* Antiferromagnetic coupling layers (RKKY)\n* Dzyaloshinskii-Moriya interaction (interface, bulk, D2d)\n* String method for energy barrier computations\n* Sophisticated domain handling, e.g. for spatially varying material parameters\n* Seemingless VTK import / export via [pyvista](https://docs.pyvista.org/)\n* Inverse Problems via [pytorch](http://www.pytorch.org/)'s autograd feature\n\n\nDocumented Demos:\n-----------------\nDemo scripts for various applications are available in the [demo](demos/README.md) directory.\n\nThe following demos are also stored on Google Colab, where they can directly be run without any local installation:\n\n   * [Standard Problem #4](demos/sp4/run.ipynb)\n\n\nInstallation\n------------\n\n### from Python Package Index (PyPi)\nFor a clean and independent system, we start with a clean virtual python environment (this step could be omitted, if you would like to install magnum.np the available python environment)\n\n    mkdir venv\n    python -m venv venv\n    source venv/bin/activate\n\nFinally install a release versions of magnum.np by means of pip:\n\n    pip install magnum.np\n\n\n### from source code (gitlab.com)\nMore advanced users can also install magnum.np from source code.\nIt can be downloaded from https://gitlab.com/magnum.np/magnum.np .\n\nAfter activating the virtual environment magnum.np can be simply installed using pip. For example\ninstalling with the -e option also allows to modify the source code:\n\n    pip install -e .\n\nNote that a default version of [pytorch](http://www.pytorch.org) is included in magnum.np's dependecy list. If you would like to uses a specific pytorch version (fitting your installed CUDA library) it needs to be installed in advance.\n\n### run remotely via Google Colab\n---------------------------------\nMagnum.np could also be used without any hardware by executing it remotely on resources provided by [Google Colab](http://colab.research.google.com). The platform offers different runtime types like CPU(None), GPU or TPU. This allows users to directly test magnum.np, whithout needing their own hardware. Advanced users can use Google Colab(Pro), which provides access to current GPUs like the A100.\n\nSome jupyter-notebook examples are included in the [demo](demos/README.md) directory, which also include links to Colab, where they can directly be run without any local installation.\n\n\nExample\n-------\nThe following demo code shows the solution of the muMAG Standard Problem #5 and can be found in the demos directory:\n\n```python\nfrom magnumnp import *\nimport torch\n\nTimer.enable()\n\n# initialize state\nn  = (40, 40, 1)\ndx = (2.5e-9, 2.5e-9, 10e-9)\nmesh = Mesh(n, dx)\n\nstate = State(mesh)\nstate.material = {\n    \"Ms\": 8e5,\n    \"A\": 1.3e-11,\n    \"alpha\": 0.1,\n    \"xi\": 0.05,\n    \"b\": 72.17e-12\n    }\n\n# initialize magnetization that relaxes into s-state\nstate.m = state.Constant([0,0,0])\nstate.m[:20,:,:,1] = -1.\nstate.m[20:,:,:,1] = 1.\nstate.m[20,20,:,1] = 0.\nstate.m[20,20,:,2] = 1.\n\nstate.j = state.Tensor([1e12, 0, 0])\n\n# initialize field terms\ndemag    = DemagField()\nexchange = ExchangeField()\ntorque   = SpinTorqueZhangLi()\n\n# initialize sstate\nllg = LLGSolver([demag, exchange])\nllg.relax(state)\nwrite_vti(state.m, \"data/m0.vti\", state)\n\n# perform integration with spin torque\nllg = LLGSolver([demag, exchange, torque])\nlogger = ScalarLogger(\"data/m.dat\", ['t', 'm'])\nwhile state.t < 5e-9:\n    llg.step(state, 1e-10)\n    logger << state\n\nTimer.print_report()\n```\n\nDocumentation\n-------------\nThe documentation is located in the doc directory and can be built using [sphinx](https://www.sphinx-doc.org).\nFor example the following commands build an HTML documentation of the actual source code and stores it in the `public` folder:\n\n    sphinx-build -b html docs public\n\nAlternatively, the latest version of the documentation is always available on [https://magnum.np.gitlab.io/magnum.np/](https://magnum.np.gitlab.io/magnum.np/)\n\n\nCitation\n--------\nIf you use magnum.np in your work or publication, please cite the following reference:\n\n[1] Bruckner, Florian, et al. \"magnum.np -- A pytorch based GPU enhanced Finite Difference Micromagnetic Simulation Framework for High Level Development and Inverse Design\", to be published (2023).\n\n\nContributing\n------------\nContributions are gratefully accepted.\nThe source code is hosted on [www.gitlab.com/magnum.np/magnum.np](www.gitlab.com/magnum.np/magnum.np).\nIf you have any issues or question, just open an issue via gitlab.com.\nTo contribute code, fork our repository on gitlab.com and create a corresponding merge request.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://gitlab.com/magnum.np/magnum.np",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "magnumnp",
    "package_url": "https://pypi.org/project/magnumnp/",
    "platform": null,
    "project_url": "https://pypi.org/project/magnumnp/",
    "project_urls": {
      "Changelog": "https://gitlab.com/magnum.np/magnum.np/blob/main/CHANGELOG",
      "Documentation": "https://magnum.np.gitlab.io/magnum.np/",
      "Homepage": "http://gitlab.com/magnum.np/magnum.np"
    },
    "release_url": "https://pypi.org/project/magnumnp/1.0.7/",
    "requires_dist": [
      "torch",
      "numpy",
      "scipy",
      "setproctitle",
      "pyvista",
      "xitorch",
      "torchdiffeq"
    ],
    "requires_python": "",
    "summary": "magnum.np finite-difference package for the solution of micromagnetic problems",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17068426,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d369f21b543ff3be006fe26968ab332a4155e9132d62da05e0791a9d06951bff",
        "md5": "f008218f3d31d2c3a5ca0d755c900311",
        "sha256": "14adbc17b0339395a4349f8cd73cac1e1ae824c66a846fc51fe86b5e63628d97"
      },
      "downloads": -1,
      "filename": "magnumnp-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f008218f3d31d2c3a5ca0d755c900311",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 79282,
      "upload_time": "2023-02-21T10:19:16",
      "upload_time_iso_8601": "2023-02-21T10:19:16.894447Z",
      "url": "https://files.pythonhosted.org/packages/d3/69/f21b543ff3be006fe26968ab332a4155e9132d62da05e0791a9d06951bff/magnumnp-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d56112a0ccd825acbfb57dadee7c349f7815a9f934554eb8ba001deb807e111d",
        "md5": "cd4ff918cac7d2cf4a25f15c0a7cd01d",
        "sha256": "7234c1ebf895cd9af0c7fafd96b53e71377da72cf2654e4ec999a9897ae23b02"
      },
      "downloads": -1,
      "filename": "magnumnp-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "cd4ff918cac7d2cf4a25f15c0a7cd01d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 55603,
      "upload_time": "2023-02-21T10:19:18",
      "upload_time_iso_8601": "2023-02-21T10:19:18.410703Z",
      "url": "https://files.pythonhosted.org/packages/d5/61/12a0ccd825acbfb57dadee7c349f7815a9f934554eb8ba001deb807e111d/magnumnp-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}