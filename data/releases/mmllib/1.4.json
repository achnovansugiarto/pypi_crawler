{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Artistic Software",
      "Topic :: Multimedia :: Sound/Audio :: Conversion",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "MMLlib - Modern library for handling Music Macro Language\n=========================================================\n\nAbout\n-----\n\nMMLlib is a pure Python implementation of functionality related to the\n`Music Macro\nLanguage <https://en.wikipedia.org/wiki/Music_Macro_Language>`__ as\nimplemented by Microsoft® GW-BASIC® and compatibles, which is its most\ncommon form, also implemented by the PC speaker driver in Linux and\n`BSD <http://www.mirbsd.org/man4/spkr>`__, with a number of extensions\nand changes:\n\n-  ``|`` denotes a bar line, ignored by the Linux/BSD driver\n-  support for multiple (parallel) instrument tracks\n-  a per-file header with work metadata (optional)\n-  lines starting with a ``#`` are comments\n-  the alias ``~`` (itself a BSD extension) is not supported\n\nThe library currently contains functions to:\n\n-  parse an (extended) MML file into metadata and individual tracks\n-  return a normalised form of the MML that does not make use of the\n   extensions and should PLAY on the original BASIC interpreter\n-  a duration estimate and the number of tracks are added to the metadata\n-  return a list of tuples (frequency, duration) to play (in a threaded\n   interpreter, such as Floppi-Music)\n-  bar lines are indicated separately as integer ``1``\n-  return an event-oriented list of measures / bars across all tracks;\n   each measure has a duration and a list of time-fixed tone on/off\n   events; facilitates playing in non-threaded interpreters and,\n   possibly, MIDI export\n-  export (extended) MML to MusicXML\n-  which can be imported by e.g. `MuseScore <https://musescore.org/>`__\n   to…\n\n   -  double-check the MML score for mistakes in a visual representation\n   -  play, arrange, etc. the music\n   -  beautify the score to print it as sheet music\n   -  export into other formats or share on their website\n\n-  export (currently only the first track of) MML to an NXC program\n-  check tracks for synchronisation error\n\n   -  missing tracks, i.e. with 0 bars\n   -  missing bars (can only be detected at the end, of course)\n   -  missing notes within a bar, relative to other tracks\n\n- play a playlist (parsed MML) using PWM on GPIO pins on ESP boards\n  under MicroPython (experimental; may not work for higher pitches)\n\nExamples\n--------\n\nSome example extended MML files are contained within the examples/\ndirectory, in lieu of better documentation for the extended format, in\naddition to the `MML format documentation\n<http://www.mirbsd.org/man4/spkr>`__.\n\nProjects using MMLlib\n---------------------\n\n:Floppi-Music:\n    `Floppi-Music <https://edugit.org/nik/floppi-music>`__ has\n    MML as input format for floppy drive music on Raspberry Pi and uses\n    MMLlib for processing. Floppi-Music is also the origin of MMLlib\n    from before it was spun off into a separate project of its own.\n\nDescription of the (extended) music macro language\n==================================================\n\nBased on http://www.antonis.de/qbebooks/gwbasman/play.html and\nhttp://www.mirbsd.org/man4/spkr which, in turn, are modelled after\nthe IBM BASICA “PLAY” command.\n\nSymbols of MML\n--------------\n\n:A-G[#,+,-][length]:\n    A-G are notes. # or + following a note produces a sharp; - produces a\n    flat.\n\n:L(n):\n\n    Sets the length of each note. L4 is a quarter note, L1 is a whole note,\n    and so on. n may be from 1 to 64. Length may also follow the note to\n    change the length for that note only. A16 is equivalent to L16A. Default\n    is L4.\n\n:ML:\n    Music legato. Each note plays the full period set by L. While not\n    explicitly specified, most implementations tie sequences of identical\n    pitch where all (but the last) are styled legato. Otherwise, or if\n    the pitch differs, the notes are played with a slur.\n\n:MN:\n    Music normal. Each note plays seven-eighths of the time determined by L\n    (length). This is the default.\n\n:MS:\n    Music staccato. Each note plays three-quarters of the time determined by\n    L.\n\n:N(n):\n    Play note n. n may range from 0 to 84. In the 7 possible octaves, there\n    are 84 notes. n set to 0 (or omitted) indicates a rest.\n\n:O(n):\n    Octave 0 sets the current octave. There are 7 octaves (0 through 6).\n    Default is 4. Middle C is at the beginning of octave 2. The special\n    values L and N control octave tracking. L enables octave tracking, N\n    disables it; with octave tracking enabled, jumps between notes are\n    limited to 6 half-tones, otherwise, the octave is incremented or\n    decremented accordingly. Octave tracking is disabled by default.\n    Octave tracking is suspended for one note after an octave change,\n    including setting the default octave at the beginning of the track,\n    and only applies to letter notes.\n\n:P(n):\n    Pause. n may range from 1-64; the current L value is used if omitted.\n\n:T(n):\n    Tempo. T sets the number of L4s in a minute. n may range from 32-255.\n    Default is 120.\n\n:. (period):\n    A period after a note increases the playing time of the note by 3/2\n    times the period determined by L (length of note) times T (tempo).\n    Multiple periods can appear after a note, and the playing time is scaled\n    accordingly. For example, A. will cause the note A to play one and half\n    times the playing time determined by L (length of the note) times T (the\n    tempo); two periods placed after A (A..) will cause the note to be\n    played at 9/4 times its ascribed value; an A with three periods (A...)\n    at 27/8, etc. Periods may also appear after a P (pause), and increase\n    the pause length as described above.\n\n:>:\n    A greater-than symbol raises the current octave by one.\n\n:<:\n    A less-than symbol lowers the current octave by one.\n\n:\\|:\n    Optionally used as a synchronisation mark for multi-track music. This is\n    a proprietary extension in the Floppi-Music project.\n\nComments\n--------\n\nLines starting with # are comments. At the beginning of the file,\ncomments may be used to encode metadata. This is yet to be specified.\nThe current implementation parses key/value pairs separated by a colon\nand a space, strips both key and value, lower-cases the key and adds it\nto a dictionary.\n\nThe MusicXML export currently specifically recognises these keys:\n\n-  Title, Copyright, Encoder (person), Source\n-  Composer, Lyrics, Arranger, Translator *xor* Artist (deprecated, only\n   one)\n\nAny other key is treated as miscellaneous field.\n\nVoices\n------\n\nThe voices of a song are interleaved. They are grouped per notation\nsystem, and the notation systems are seperated by empty lines.\n\nChangelog for MMLlib\n====================\n\n1.4\n---\n\n- Bump major version to enable semantic versioning\n- Add octave tracking feature.\n- Add basic support for MicroPython/ESP PWM\n- The “mmllint” command can now output “normalised” MML,\n  that is, MML which will play on GW-BASIC without the\n  extensions (such as octave tracking or permitting omission\n  of the default argument values) present\n- “N” without number is now correctly parsed (as rest)\n- Update documentation wrt performance expectations, fine detail\n- ./run.py (in-tree) defaults to python3 as interpreter now\n- “O” without number now sets the default octave (extension),\n  which was already implied in both documentation and consistency\n\n0.3\n---\n\n-  Enable Python 3 compatibility.\n-  Add new mmllint script.\n-  Include example MML songs.\n-  Add first parts of test suite.\n-  Some bugfixes.\n\n0.2\n---\n\n-  Add mml2musicxml script.\n\n0.1\n---\n\n-  Separate from Floppi-Music.\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://edugit.org/nik/mmllib",
    "keywords": "",
    "license": "MirOS",
    "maintainer": "Dominik George",
    "maintainer_email": "nik@naturalnet.de",
    "name": "MMLlib",
    "package_url": "https://pypi.org/project/MMLlib/",
    "platform": "",
    "project_url": "https://pypi.org/project/MMLlib/",
    "project_urls": {
      "Homepage": "https://edugit.org/nik/mmllib"
    },
    "release_url": "https://pypi.org/project/MMLlib/1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Modern library for handling Music Macro Language",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12368854,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c29d5d008dd54765c63fe1011bf91e69a3fba78419dc26a8b9768dca018f4647",
        "md5": "578eddc96165cfc3d00ec6f784e9133a",
        "sha256": "3b89989d4afa3510d7f7ee7184474c9252bd32138e1ab4e519e2823cf05f8057"
      },
      "downloads": -1,
      "filename": "MMLlib-1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "578eddc96165cfc3d00ec6f784e9133a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23408,
      "upload_time": "2021-12-21T08:16:04",
      "upload_time_iso_8601": "2021-12-21T08:16:04.309014Z",
      "url": "https://files.pythonhosted.org/packages/c2/9d/5d008dd54765c63fe1011bf91e69a3fba78419dc26a8b9768dca018f4647/MMLlib-1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a4d2b6337bc76dbca4f1f74e30b818315e6c9eca06b8e9d22ca21fcd5120b4b",
        "md5": "27eb867bed2aa590754f57a3c4fe52b9",
        "sha256": "c2bffd2357b8ff087b02cc1d902973eed385340667ed4c000588ad5d85111964"
      },
      "downloads": -1,
      "filename": "MMLlib-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "27eb867bed2aa590754f57a3c4fe52b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39324,
      "upload_time": "2021-12-21T08:16:05",
      "upload_time_iso_8601": "2021-12-21T08:16:05.944526Z",
      "url": "https://files.pythonhosted.org/packages/1a/4d/2b6337bc76dbca4f1f74e30b818315e6c9eca06b8e9d22ca21fcd5120b4b/MMLlib-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}