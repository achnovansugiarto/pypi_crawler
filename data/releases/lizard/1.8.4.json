{
  "info": {
    "author": "Terry Yin",
    "author_email": "terry@odd-e.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: Freeware",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: C",
      "Programming Language :: C++",
      "Programming Language :: Java",
      "Programming Language :: JavaScript",
      "Programming Language :: Objective C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "Lizard\r\n======\r\n\r\nWas hfcca, A Header Free Cyclomatic Complexity Analyzer.\r\n\r\n|Build Status|\r\n\r\nVisit the tool website |Web Site|\r\n\r\nlizard is a simple code complexity analyzer without caring about the\r\nC/C++ header files or Java imports. It can deal with\r\n\r\n-  C/C++\r\n-  Java\r\n-  JavaScript\r\n-  Objective C.\r\n-  Python\r\n\r\nIt counts\r\n\r\n-  the nloc (lines of code without comments),\r\n-  CCN (cyclomatic complexity number),\r\n-  token count of functions.\r\n-  parameter count of functions.\r\n\r\nYou can set limitation for CCN (-C), the number of parameters (-a).\r\nFunctions that exceed these limitations will generate warnings. The exit\r\ncode of lizard will be none-Zero if there are warnings.\r\n\r\nThis tool actually calculates how complex the code 'looks' rather than\r\nhow complex the code real 'is'. People will need this tool because it's\r\noften very hard to get all the included folders and files right when\r\nthey are complicated. But we don't really need that kind of accuracy for\r\ncyclomatic complexity.\r\n\r\nIt requires python2.7 or above (early versions are not verified).\r\n\r\nInstallation\r\n------------\r\n\r\nlizard.py can be used as a stand alone Python script, most\r\nfunctionalities are there. You can always use it without any\r\ninstallation. To acquire all the functionalities of lizard, you will\r\nneed a proper install.\r\n\r\n::\r\n\r\n   python lizard.py\r\n\r\nIf you want a proper install:\r\n\r\n::\r\n\r\n   [sudo] pip install lizard\r\n\r\nOr if you've got the source:\r\n\r\n::\r\n\r\n   [sudo] python setup.py install\r\n\r\nUsage\r\n-----\r\n\r\n::\r\n\r\n   lizard [options] [PATH or FILE] [PATH] ... \r\n\r\nRun for the code under current folder (recursively):\r\n\r\n::\r\n\r\n   lizard\r\n\r\nExclude anything in the tests folder:\r\n\r\n::\r\n\r\n    lizard mySource/ -x\"./tests/*\"\r\n\r\nOptions\r\n~~~~~~~\r\n\r\n::\r\n\r\n      --version             show program's version number and exit\r\n      -h, --help            show this help message and exit\r\n      -v, --verbose         Output in verbose mode (long function name)\r\n      -C CCN, --CCN=CCN     Threshold for cyclomatic complexity number warning.\r\n                            The default value is 15. Functions with CCN bigger\r\n                            than this number will generate warning\r\n      -a ARGUMENTS, --arguments=ARGUMENTS\r\n                            Limit for number of parameters\r\n      -w, --warnings_only   Show warnings only, using clang/gcc's warning format\r\n                            for printing warnings.\r\n                            http://clang.llvm.org/docs/UsersManual.html#cmdoption-\r\n                            fdiagnostics-format\r\n      -i NUMBER, --ignore_warnings=NUMBER\r\n                            If the number of warnings is equal or less than the\r\n                            number, the tool will exit normally, otherwize it will\r\n                            generate error. Useful in makefile when improving\r\n                            legacy code.\r\n      -x EXCLUDE, --exclude=EXCLUDE\r\n                            Exclude files that match this pattern. * matches\r\n                            everything, ? matches any single characoter,\r\n                            \"./folder/*\" exclude everything in the folder,\r\n                            recursively. Multiple patterns can be specified. Don't\r\n                            forget to add \"\" around the pattern.\r\n      -X, --xml             Generate XML in cppncss style instead of the normal\r\n                            tabular output. Useful to generate report in Jenkins\r\n                            server\r\n      -P, --no_preprocessor_count\r\n                            By default, a #if will also increase the complexity.\r\n                            Adding this option to ignore them\r\n      -t WORKING_THREADS, --working_threads=WORKING_THREADS\r\n                            number of working threads. The default value is 1.\r\n      -d, --find_duplicates\r\n                            Find and skip analysis for file duplicates.\r\n      -s, --sort\r\n                            Sort the warning with field. The field can be nloc, \r\n                            cyclomatic_complexity, token_count, parameter_count,\r\n                            etc. Or an customized file.\r\n\r\nExample use\r\n-----------\r\n\r\nAnalyze a folder recursively: lizard mahjong\\_game/src\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n::\r\n\r\n   ==============================================================\r\n     NLOC    CCN  token  param    function@line@file\r\n   --------------------------------------------------------------\r\n       10      2     29      2    start_new_player@26@./html_game.c\r\n      ...\r\n        6      1      3      0    set_shutdown_flag@449@./httpd.c\r\n       24      3     61      1    server_main@454@./httpd.c\r\n   --------------------------------------------------------------\r\n   2 file analyzed.\r\n   ==============================================================\r\n   LOC    Avg.NLOC AvgCCN Avg.ttoken  function_cnt    file\r\n   --------------------------------------------------------------\r\n       191     15      3        51        12     ./html_game.c\r\n       363     24      4        86        15     ./httpd.c\r\n\r\n   ======================================\r\n   !!!! Warnings (CCN > 15) !!!!\r\n   ======================================\r\n       66     19    247      1    accept_request@64@./httpd.c\r\n   =================================================================================\r\n   Total NLOC  Avg.NLOC  Avg CCN  Avg token  Fun Cnt  Warning cnt   Fun Rt   NLOC Rt  \r\n   --------------------------------------------------------------------------------\r\n          554        20     4.07      71.15       27            1      0.04    0.12\r\n\r\nWarnings only (in clang/gcc formation):lizard -w mahjong\\_game\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n::\r\n\r\n   ./src/html_ui/httpd.c:64: warning: accept_request has 19 CCN and 1 params (66 NLOC, 247 tokens)\r\n   ./src/mahjong_game/mj_table.c:109: warning: mj_table_update_state has 20 CCN and 1 params (72 NLOC, 255 tokens)\r\n\r\nUsing lizard as Python module\r\n-----------------------------\r\n\r\nYou can also use lizard as a Python module in your code:\r\n\r\n.. code:: python\r\n\r\n    >>> import lizard\r\n    >>> i = lizard.analyze_file(\"../cpputest/tests/AllTests.cpp\")\r\n    >>> print i.__dict__\r\n    {'nloc': 9, 'function_list': [<lizard.FunctionInfo object at 0x10bf7af10>], 'filename': '../cpputest/tests/AllTests.cpp'}\r\n    >>> print i.function_list[0].__dict__\r\n    {'cyclomatic_complexity': 1, 'token_count': 22, 'name': 'main', 'parameter_count': 2, 'nloc': 3, 'long_name': 'main( int ac , const char ** av )', 'start_line': 30}\r\n\r\nYou can also use source code string instead of file. But you need to\r\nprovide a file name (to identify the language).\r\n\r\n.. code:: python\r\n\r\n    >>> i = lizard.analyze_file.analyze_source_code(\"AllTests.cpp\", \"int foo(){}\")\r\n\r\nWhitelist\r\n---------\r\n\r\nIf for some reason you would like to ignore the warnings, you can use\r\nthe whitelist. Add 'whitelizard.txt' to the current folder, then the\r\nfunctions defined in the file will be ignored. This is an example\r\n\r\n::\r\n\r\n   #whitelizard.txt\r\n   #The file name can only be whitelizard.txt and put it in the current folder.\r\n   #You may have commented lines begin with #.\r\n   function_name1, function_name2 # list function names in mulitple lines or split with comma.\r\n   filename:function1, function2  # you can also specify the filename\r\n\r\nOptions in Comments\r\n-------------------\r\n\r\nYou can use options in the comments of the source code to change the\r\nbehavior of lizard. By putting \"#lizard forgives\" inside a function or\r\nbefore a function it will suppress the warning for that function.\r\n\r\n::\r\n\r\n   int foo() {\r\n       // #lizard forgives the complexity\r\n       ...\r\n   }\r\n\r\nWishlist (The features that will come in the near future)\r\n---------------------------------------------------------\r\n-  Support Python & Ruby\r\n\r\nChange Logs\r\n-----------\r\n\r\n-  2014.04.07 Remove option -e (display function end line), and make it default\r\n-  2014.04.06 Remove option -d (ignore duplicated content), and make it default\r\n-  2014.04.06 Remove option -p (no preprocessor count), and a '#if' will always be counted in cyclomatic complexity\r\n-  2014.03.31 Support JavaScript!\r\n-  2014.03.22 Change the -v (--verbose) option to -V. This is because -v\r\n   will be used for --version.\r\n\r\n.. |Build Status| image:: https://travis-ci.org/terryyin/lizard.png?branch=master\r\n   :target: https://travis-ci.org/terryyin/lizard\r\n\r\n.. |Web Site| image:: http://www.lizard.ws/website/static/img/logo-small.png\r\n   :target: http://www.lizard.ws",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://pypi.python.org/lizard/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.lizard.ws",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lizard",
    "package_url": "https://pypi.org/project/lizard/",
    "platform": "any",
    "project_url": "https://pypi.org/project/lizard/",
    "project_urls": {
      "Download": "https://pypi.python.org/lizard/",
      "Homepage": "http://www.lizard.ws"
    },
    "release_url": "https://pypi.org/project/lizard/1.8.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A code analyzer without caring the C/C++ header files.It works with Java, C/C++, JavaScript, Python, Objective C. Metrics includes cyclomatic complexity number etc.",
    "version": "1.8.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13552571,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a654c510e075d48b765946049d44c55ddacff4df96be9cfbdcf4ee38a2679a9",
        "md5": "c309a855c0c25d2d68c11a07bd695b4d",
        "sha256": "9be26318be46db45c40550cfe4e1bc49d936202294460c9fd0f1fa71c5a92d3c"
      },
      "downloads": -1,
      "filename": "lizard-1.8.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c309a855c0c25d2d68c11a07bd695b4d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31654,
      "upload_time": "2014-06-17T06:46:48",
      "upload_time_iso_8601": "2014-06-17T06:46:48.343950Z",
      "url": "https://files.pythonhosted.org/packages/0a/65/4c510e075d48b765946049d44c55ddacff4df96be9cfbdcf4ee38a2679a9/lizard-1.8.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}