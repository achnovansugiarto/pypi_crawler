{
  "info": {
    "author": "Terry Yin",
    "author_email": "terry@odd-e.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: Freeware",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: C",
      "Programming Language :: C++",
      "Programming Language :: Java",
      "Programming Language :: JavaScript",
      "Programming Language :: Objective C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "|Web Site| Lizard\n=================\n\n.. image:: https://travis-ci.org/terryyin/lizard.png?branch=master\n    :target: https://travis-ci.org/terryyin/lizard\n.. image:: https://badge.fury.io/py/lizard.svg\n    :target: https://badge.fury.io/py/lizard\n.. |Web Site| image:: http://www.lizard.ws/website/static/img/logo-small.png\n    :target: http://www.lizard.ws\n\n|\n\nLizard is an extensible Cyclomatic Complexity Analyzer for many programming languages\nincluding C/C++ (doesn't require all the header files or Java imports). It also does\ncopy-paste detection (code clone detection/code duplicate detection) and many other forms of static\ncode analysis.\n\nA list of supported languages:\n\n-  C/C++ (works with C++14)\n-  Java\n-  C# (C Sharp)\n-  JavaScript (With ES6 and JSX)\n-  TypeScript\n-  Objective-C\n-  Swift\n-  Python\n-  Ruby\n-  TTCN-3\n-  PHP\n-  Scala\n-  GDScript\n-  Golang\n-  Lua\n-  Rust\n-  Fortran\n\nBy default lizard will search for any source code that it knows and mix\nall the results together. This might not be what you want. You can use\nthe \"-l\" option to select language(s).\n\nIt counts\n\n-  the nloc (lines of code without comments),\n-  CCN (cyclomatic complexity number),\n-  token count of functions.\n-  parameter count of functions.\n\nYou can set limitation for CCN (-C), the number of parameters (-a).\nFunctions that exceed these limitations will generate warnings. The exit\ncode of lizard will be none-Zero if there are warnings.\n\nThis tool actually calculates how complex the code 'looks' rather than\nhow complex the code really 'is'. People will need this tool because it's\noften very hard to get all the included folders and files right when\nthey are complicated. But we don't really need that kind of accuracy for\ncyclomatic complexity.\n\nIt requires python2.7 or above (early versions are not verified).\n\nInstallation\n------------\n\nlizard.py can be used as a stand alone Python script, most\nfunctionalities are there. You can always use it without any\ninstallation. To acquire all the functionalities of lizard, you will\nneed a proper install.\n\n::\n\n   python lizard.py\n\nIf you want a proper install:\n\n::\n\n   [sudo] pip install lizard\n\nOr if you've got the source:\n\n::\n\n   [sudo] python setup.py install --install-dir=/path/to/installation/directory/\n\nUsage\n-----\n\n::\n\n   lizard [options] [PATH or FILE] [PATH] ...\n\nRun for the code under current folder (recursively):\n\n::\n\n   lizard\n\nExclude anything in the tests folder:\n\n::\n\n    lizard mySource/ -x\"./tests/*\"\n\n\nOptions\n~~~~~~~\n\n::\n\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -l LANGUAGES, --languages LANGUAGES\n                        List the programming languages you want to analyze. if left empty, it'll\n                        search for all languages it knows. `lizard -l cpp -l java`searches for\n                        C++ and Java code. The available languages are: cpp, java, csharp,\n                        javascript, python, objectivec, ttcn, ruby, php, swift, scala, GDScript,\n                        go, lua, rust, typescript\n  -V, --verbose         Output in verbose mode (long function name)\n  -C CCN, --CCN CCN     Threshold for cyclomatic complexity number warning. The default value is\n                        15. Functions with CCN bigger than it will generate warning\n  -f INPUT_FILE, --input_file INPUT_FILE\n                        get a list of filenames from the given file\n  -o OUTPUT_FILE, --output_file OUTPUT_FILE\n                        Output file. The output format is inferred from the file extension (e.g.\n                        .html), unless it is explicitly specified (e.g. using --xml).\n  -L LENGTH, --length LENGTH\n                        Threshold for maximum function length warning. The default value is 1000.\n                        Functions length bigger than it will generate warning\n  -a ARGUMENTS, --arguments ARGUMENTS\n                        Limit for number of parameters\n  -w, --warnings_only   Show warnings only, using clang/gcc's warning format for printing\n                        warnings. http://clang.llvm.org/docs/UsersManual.html#cmdoption-\n                        fdiagnostics-format\n  --warning-msvs        Show warnings only, using Visual Studio's warning format for printing\n                        warnings. https://msdn.microsoft.com/en-us/library/yxkt8b26.aspx\n  -i NUMBER, --ignore_warnings NUMBER\n                        If the number of warnings is equal or less than the number, the tool will\n                        exit normally; otherwise, it will generate error. If the number is\n                        negative, the tool exits normally regardless of the number of warnings.\n                        Useful in makefile for legacy code.\n  -x EXCLUDE, --exclude EXCLUDE\n                        Exclude files that match the pattern. * matches everything, ? matches any\n                        single character, \"./folder/*\" exclude everything in the folder\n                        recursively. Multiple patterns can be specified. Don't forget to add \"\"\n                        around the pattern.\n  -t WORKING_THREADS, --working_threads WORKING_THREADS\n                        number of working threads. The default value is 1. Using a bigger number\n                        can fully utilize the CPU and often faster.\n  -X, --xml             Generate XML in cppncss style instead of the tabular output. Useful to\n                        generate report in Jenkins server\n  --csv                 Generate CSV output as a transform of the default output\n  -H, --html            Output HTML report\n  -m, --modified        Calculate modified cyclomatic complexity number , which count a\n                        switch/case with multiple cases as one CCN.\n  -E EXTENSIONS, --extension EXTENSIONS\n                        User the extensions. The available extensions are: -Ecpre: it will ignore\n                        code in the #else branch. -Ewordcount: count word frequencies and\n                        generate tag cloud. -Eoutside: include the global code as one function.\n                        -EIgnoreAssert: to ignore all code in assert. -ENS: count nested control\n                        structures.\n  -s SORTING, --sort SORTING\n                        Sort the warning with field. The field can be nloc,\n                        cyclomatic_complexity, token_count, parameter_count, etc. Or an customized field.\n  -T THRESHOLDS, --Threshold THRESHOLDS\n                        Set the limit for a field. The field can be nloc, cyclomatic_complexity,\n                        token_count, parameter_count, etc. Or an customized file. Lizard will\n                        report warning if a function exceed the limit\n  -W WHITELIST, --whitelist WHITELIST\n                        The path and file name to the whitelist file. It's './whitelizard.txt' by\n                        default. Find more information in README.\n\n\nExample use\n-----------\n\nAnalyze a folder recursively: lizard mahjong\\_game/src\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n   ==============================================================\n     NLOC    CCN  token  param    function@line@file\n   --------------------------------------------------------------\n       10      2     29      2    start_new_player@26@./html_game.c\n      ...\n        6      1      3      0    set_shutdown_flag@449@./httpd.c\n       24      3     61      1    server_main@454@./httpd.c\n   --------------------------------------------------------------\n   2 file analyzed.\n   ==============================================================\n   LOC    Avg.NLOC AvgCCN Avg.ttoken  function_cnt    file\n   --------------------------------------------------------------\n       191     15      3        51        12     ./html_game.c\n       363     24      4        86        15     ./httpd.c\n\n   ======================================\n   !!!! Warnings (CCN > 15) !!!!\n   ======================================\n       66     19    247      1    accept_request@64@./httpd.c\n   =================================================================================\n   Total NLOC  Avg.NLOC  Avg CCN  Avg token  Fun Cnt  Warning cnt   Fun Rt   NLOC Rt\n   --------------------------------------------------------------------------------\n          554        20     4.07      71.15       27            1      0.04    0.12\n\nWarnings only (in clang/gcc formation):lizard -w mahjong\\_game\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n   ./src/html_ui/httpd.c:64: warning: accept_request has 19 CCN and 1 params (66 NLOC, 247 tokens)\n   ./src/mahjong_game/mj_table.c:109: warning: mj_table_update_state has 20 CCN and 1 params (72 NLOC, 255 tokens)\n\n\nSet warning threshold for any field:lizard -T nloc=25\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe option `-Tcyclomatic_complexity=10` is equal to `-C10`.\nThe option `-Tlength=10` is equal to `-L10`.\nThe option `-Tparameter_count=10` is equal to `-a10`.\n\nYou can also do `-Tnloc=10` to set the limit of the NLOC. Any function that\nhas NLOC greater than 10 will generate a warning.\n\nGenerated code\n-----------------------------\n\nLizard has a simple solution with generated code. Any code in a source file that is following\na comment containing \"GENERATED CODE\" will be ignored completely. The ignored code will not\ngenerate any data, except the file counting.\n\n\nCode Duplicate Detector\n-----------------------------\n\n::\n\n   lizard -Eduplicate <path to your code>\n\n\nGenerate A Tag Cloud For Your Code\n----------------------------------\n\nYou can generate a \"Tag cloud\" of your code by the following command. It counts the identifiers in your code (ignoring the comments).\n\n::\n\n   lizard -EWordCount <path to your code>\n\n\nUsing lizard as Python module\n-----------------------------\n\nYou can also use lizard as a Python module in your code:\n\n.. code:: python\n\n    >>> import lizard\n    >>> i = lizard.analyze_file(\"../cpputest/tests/AllTests.cpp\")\n    >>> print i.__dict__\n    {'nloc': 9, 'function_list': [<lizard.FunctionInfo object at 0x10bf7af10>], 'filename': '../cpputest/tests/AllTests.cpp'}\n    >>> print i.function_list[0].__dict__\n    {'cyclomatic_complexity': 1, 'token_count': 22, 'name': 'main', 'parameter_count': 2, 'nloc': 3, 'long_name': 'main( int ac , const char ** av )', 'start_line': 30}\n\nYou can also use source code string instead of file. But you need to\nprovide a file name (to identify the language).\n\n.. code:: python\n\n    >>> i = lizard.analyze_file.analyze_source_code(\"AllTests.cpp\", \"int foo(){}\")\n\nWhitelist\n---------\n\nIf for some reason you would like to ignore the warnings, you can use\nthe whitelist. Add 'whitelizard.txt' to the current folder (or use -W to point to the whitelist file), then the\nfunctions defined in the file will be ignored. Please notice that if you assign the file pathname, it needs to\nbe exactly the same relative path as Lizard to find the file. An easy way to get the file pathname is to copy it from\nthe Lizard warning output.\nThis is an example whitelist:\n\n::\n\n   #whitelizard.txt\n   #The file name can only be whitelizard.txt and put it in the current folder.\n   #You may have commented lines begin with #.\n   function_name1, function_name2 # list function names in multiple lines or split with comma.\n   file/path/name:function1, function2  # you can also specify the filename\n\nOptions in Comments\n-------------------\n\nYou can use options in the comments of the source code to change the\nbehavior of lizard. By putting \"#lizard forgives\" inside a function or\nbefore a function it will suppress the warning for that function.\n\n::\n\n   int foo() {\n       // #lizard forgives the complexity\n       ...\n   }\n\n\nLimitations\n-----------\n\nLizard requires syntactically correct code.\nUpon processing input with incorrect or unknown syntax:\n\n- Lizard guarantees to terminate eventually (i.e., no forever loops, hangs)\n  without hard failures (e.g., exit, crash, exceptions).\n\n- There is a chance of a combination of the following soft failures:\n\n    - omission\n    - misinterpretation\n    - improper analysis / tally\n    - success (the code under consideration is not relevant, e.g., global macros in C)\n\nThis approach makes the Lizard implementation\nsimpler and more focused with partial parsers for various languages.\nDevelopers of Lizard attempt to minimize the possibility of soft failures.\nHard failures are bugs in Lizard code,\nwhile soft failures are trade-offs or potential bugs.\n\nIn addition to asserting the correct code,\nLizard may choose not to deal with some advanced or complicated language features:\n\n- C/C++ digraphs and trigraphs are not recognized.\n- C/C++ preprocessing or macro expansion is not performed.\n  For example, using macro instead of parentheses (or partial statements in macros)\n  can confuse Lizard's bracket stacks.\n- Some C++ complicated templates may cause confusion with matching angle brackets\n  and processing less-than ``<`` or more-than ``>`` operators\n  inside of template arguments.\n\n\nLiteratures Referring to Lizard\n-------------------------------\n\nLizard is often used in software related researches. If you used it to support your work, you may contact the lizard author to add your work in the following list.\n\n- Software Quality in the ATLAS experiment at CERN, which refers to Lizard as one of the tools, has been published in the Journal of Physics: http://iopscience.iop.org/article/10.1088/1742-6596/898/7/072011\n\n    - S Martin-Haugh et al 2017 J. Phys.: Conf. Ser. 898 072011\n\nLizard is also used as a plugin for fastlane to help check code complexity and submit xml report to sonar.\n\n- `fastlane-plugin-lizard <https://github.com/liaogz82/fastlane-plugin-lizard>`_\n- `sonar <https://github.com/Backelite/sonar-swift/blob/develop/docs/sonarqube-fastlane.md>`_\n- `European research project FASTEN (Fine-grained Analysis of SofTware Ecosystems as Networks, <http://fasten-project.eu/)>`_\n  - `for a quality analyzer <https://github.com/fasten-project/quality-analyzer>`_\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://pypi.python.org/lizard/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.lizard.ws",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lizard",
    "package_url": "https://pypi.org/project/lizard/",
    "platform": "any",
    "project_url": "https://pypi.org/project/lizard/",
    "project_urls": {
      "Download": "https://pypi.python.org/lizard/",
      "Homepage": "http://www.lizard.ws"
    },
    "release_url": "https://pypi.org/project/lizard/1.17.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A code analyzer without caring the C/C++ header files. It works with Java, C/C++, JavaScript, Python, Ruby, Swift, Objective C. Metrics includes cyclomatic complexity number etc.",
    "version": "1.17.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13552571,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d2eef0a4cc393164d24e5b2784850ed92dbd27999ab51244cd38a62dac48ff8",
        "md5": "f76a3c90ada471329d495340eb8aa123",
        "sha256": "3a5c429321e67d4a1970adb30ce8c6aebf4688c275b2589d89b4bbd6ed3d40a9"
      },
      "downloads": -1,
      "filename": "lizard-1.17.9-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f76a3c90ada471329d495340eb8aa123",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 64794,
      "upload_time": "2021-07-10T07:13:48",
      "upload_time_iso_8601": "2021-07-10T07:13:48.488198Z",
      "url": "https://files.pythonhosted.org/packages/4d/2e/ef0a4cc393164d24e5b2784850ed92dbd27999ab51244cd38a62dac48ff8/lizard-1.17.9-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4516dbe57aa29fa48eb76ae0b4d25a041cf6e2e2323afda72497429c31a18211",
        "md5": "02724af4e468059f0f3ee97f04eeee74",
        "sha256": "76ee0e631d985bea1dd6521a03c6c2fa9dce5a2248b3d26c49890e9e085b7aed"
      },
      "downloads": -1,
      "filename": "lizard-1.17.9.tar.gz",
      "has_sig": false,
      "md5_digest": "02724af4e468059f0f3ee97f04eeee74",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 61915,
      "upload_time": "2021-07-10T07:13:50",
      "upload_time_iso_8601": "2021-07-10T07:13:50.481375Z",
      "url": "https://files.pythonhosted.org/packages/45/16/dbe57aa29fa48eb76ae0b4d25a041cf6e2e2323afda72497429c31a18211/lizard-1.17.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}