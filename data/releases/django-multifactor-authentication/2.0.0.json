{
  "info": {
    "author": "Andrei Vasin",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Django Multifactor Authentication\n\n\n[![pypi version](https://img.shields.io/pypi/v/django-multifactor-authentication.svg)](https://pypi.org/project/django-multifactor-authentication/)\n\n\nFlexible authentication for web, mobile, desktop and hybrid apps. It can be used for 1fa, 2fa and mfa cases. Easily configurable and extendable with new authentication methods or services. Authenticaton scenarios, called `flows`, are based on `identifiers` and `secrets`, which can be used or not used in multiple combinations:\n- username, email, phone, ...\n- password, passcode (one-time pass or token), hardcode (device or card id), ...\n\nFull list of supported services and corresponding identifiers:\n- Email\n- Phone (as Sms)\n- WhatsApp\n- Google Authenticator\n- Microsoft Authenticator\n- Authy, andOTP, etc\n- Yubikey (soon)\n- ...add yours\n\nand service providers:  \n- Twilio\n- Vonage (Nexmo)\n- Amazon SNS (soon)\n- ...add yours\n\n\n\n\n### Usage\n\nThe package creates custom user model, that could be used as is or as inherited. General priniciples for custom user models in Django are respected ([how it works](https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#substituting-a-custom-user-model)).\n\n\nBase settings (required):\n```\nAUTH_USER_MODEL = 'multauth.User'\nAUTHENTICATION_BACKENDS = (\n    'multauth.backends.ModelBackend',\n    # ...etc\n)\n\nMULTAUTH_FLOWS = (\n    ('phone', 'hardcode', 'passcode',),\n    ('email', 'password', 'passcode',),\n    ('username', 'password',),\n    # ...etc\n)\n\n```\nThese flows mean, that user could be authenticated with any of these sets of crendials, ie set of `identfier` and `secrets`. For example, this one: ('email', 'password', 'passcode',). Usually only one set of credentials is used.\n\n\nExtra settings (optional):  \n(see built-in [services](./multauth/services), [providers](./multauth/providers) and [templates](./multauth/templates))  \n```\nMULTAUTH_SERVICES = [\n  'multauth.services.UsernameService',\n  'multauth.services.EmailService',\n  'multauth.services.PhoneService',\n] # by default\n\nMULTAUTH_DEBUG = True # False by default\nMULTAUTH_PASSCODE_LENGTH = 6 # size in digits\nMULTAUTH_PASSCODE_EXPIRY = 3600 # time in seconds\nMULTAUTH_PASSCODE_SERVICE = 'multauth.services.PhoneService' # by default\n\nMULTAUTH_SERVICE_EMAIL_PROVIDER = 'multauth.providers.MailProvider' # by default\nMULTAUTH_SERVICE_PHONE_PROVIDER = 'multauth.providers.TwilioProvider' # by default\n\nMULTAUTH_SERVICE_EMAIL_TEMPLATE_NAME = 'custom'\nMULTAUTH_SERVICE_EMAIL_VERIFICATION_VIEWNAME = 'custom'\nMULTAUTH_SERVICE_PHONE_TEMPLATE_NAME = 'custom'\n```\n\n\nProvider specific settings (could be required):  \n```\nMULTAUTH_PROVIDER_TWILIO_ACCOUNT_SID = 'SID'\nMULTAUTH_PROVIDER_TWILIO_AUTH_TOKEN = 'TOKEN'\nMULTAUTH_PROVIDER_TWILIO_CALLER_ID = 'CALLER_ID' # '+15005550006'\n\nMULTAUTH_PROVIDER_VONAGE_API_KEY = 'KEY'\nMULTAUTH_PROVIDER_VONAGE_API_SECRET = 'SECRET'\nMULTAUTH_PROVIDER_VONAGE_BRAND_NAME = 'BRAND_NAME' # 'Vonage APIs'\n```\n\n\n### Usage more\n\nCustom use cases and how to config or code them.\n\n\n#### APIs\n\nPackage contains full set of [rest api endpoints](./multauth/api/urls.py), but it's optional. To activate it, `djangorestframework>=3.10.3` should be installed and the urls be included:\n```\nurlpatterns = [\n    path(r'^', include('multauth.api.urls')),\n]\n```\n\n\n#### User activation\n\nUsers are set as \"active\" on creation.\nThis behavior is not managed by settings for now (check for further updates).\n\n\n#### Services verification\n\nBy default all services are set as \"confirmed\" on creation.\nTo change this behavior extra settings should be added, for example:  \n```\nMULTAUTH_SERVICE_EMAIL_CONFIRMED = False\nMULTAUTH_SERVICE_PHONE_CONFIRMED = False\n...\n```\n\nNon-comfirmed services will automatically be called for verification (token/key to be sent) on creation or idenfier updates. To invoke verification manually, call api endpoints:\n- `multauth:signup-verification`\n\nor model methods:\n- `user.verify` for all non-confirmed services\n- `user.verify_email` for email\n- `user.verify_phone` for phone\n- ...\n\nAnd to complete verification process call api endpoints:\n- `multauth:signup-verification-phone` to post the token\n- `multauth:signup-verification-email` to post the token\n- `multauth:signup-verification-email-key` as a classic in-email link to pass the key\n- ...\n\nor model methods:\n- `user.verify_phone_token`\n- `user.verify_email_token`\n- `user.verify_email_key`\n- ...\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/andrenerd/django-multifactor-authentication",
    "keywords": "django authentication multifactor mfa 2fa 3fa user signin signup otp google microsoft authenticator authy andotp whatsapp telegram yubikey twillio sendgrid nexmo sns",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-multifactor-authentication",
    "package_url": "https://pypi.org/project/django-multifactor-authentication/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-multifactor-authentication/",
    "project_urls": {
      "Homepage": "https://github.com/andrenerd/django-multifactor-authentication",
      "Source": "https://github.com/andrenerd/django-multifactor-authentication"
    },
    "release_url": "https://pypi.org/project/django-multifactor-authentication/2.0.0/",
    "requires_dist": [
      "django (<4.0.0,>=2.2)",
      "phonenumbers (>=8.0.0)",
      "django-phonenumber-field (>=3.0.1)",
      "django-otp (>=0.4.3)",
      "djangorestframework (<4.0.0,>=3.10.3) ; extra == 'api'",
      "qrcode (>=4.0) ; extra == 'authenticator'",
      "twilio ; extra == 'twilio'",
      "vonage ; extra == 'vonage'"
    ],
    "requires_python": ">=3.5",
    "summary": "Flexible authentication for web, mobile, desktop and hybrid apps. It can be used for 1fa, 2fa and mfa cases.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8892198,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1709c417fb3ca7c11cd023a9b31072d780a118ab107de654c789d64a59da5af3",
        "md5": "44f369e7a4368d2169a2dc3d4b4c3646",
        "sha256": "03563ba8e011923b6925135ce8b5f71e9c3dccb0ae4d773af2e01cf8f7c02d97"
      },
      "downloads": -1,
      "filename": "django_multifactor_authentication-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "44f369e7a4368d2169a2dc3d4b4c3646",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 73506,
      "upload_time": "2020-12-12T23:54:04",
      "upload_time_iso_8601": "2020-12-12T23:54:04.542033Z",
      "url": "https://files.pythonhosted.org/packages/17/09/c417fb3ca7c11cd023a9b31072d780a118ab107de654c789d64a59da5af3/django_multifactor_authentication-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b046fedd65e59fd731f9cbc581b3e6c6232cbc27f4c90b8074956f6f3e87dd2b",
        "md5": "4c4684e0be7e0bad025fee0e0784708d",
        "sha256": "f0f2e1b3a7f3aefe659f4ced479e1dc917589ef14f738a4ccbf3ad44597d5977"
      },
      "downloads": -1,
      "filename": "django-multifactor-authentication-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4c4684e0be7e0bad025fee0e0784708d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 25710,
      "upload_time": "2020-12-12T23:54:10",
      "upload_time_iso_8601": "2020-12-12T23:54:10.658901Z",
      "url": "https://files.pythonhosted.org/packages/b0/46/fedd65e59fd731f9cbc581b3e6c6232cbc27f4c90b8074956f6f3e87dd2b/django-multifactor-authentication-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}