{
  "info": {
    "author": "Will Allen",
    "author_email": "wkhallen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "# Data Transfer Protocol Library\n\ndtplib is a cross platform networking library written in Python.\n\nSource: [https://github.com/WKHAllen/dtplib](https://github.com/WKHAllen/dtplib)\n\n## Dependencies\n\n* [compressdir](https://github.com/WKHAllen/compressdir)\n* [cryptography](https://github.com/pyca/cryptography)\n* [rsa](https://github.com/sybrenstuvel/python-rsa/)\n\n## Installation\n\n```console\n$ pip install dtplib\n```\n\n## Server\n\n### Creating a server\n\n```py\ns = Server(onRecv=None, onConnect=None, onDisconnect=None, blocking=False, eventBlocking=False, recvDir=None, daemon=True, jsonEncode=False)\n```\n\nCreate a server object.\n\n`onRecv` is a function that will be called when a packet is received. It takes the following parameters: client socket, data, datatype (0: object, 1: file).\n`onConnect` is a function that will be called when a client connects. It takes the following parameters: client socket.\n`onDisconnect` is a function that will be called when a client disconnects. It takes the following parameters: client socket.\nIf `blocking` is True, the start method will block until stopping.\nIf `eventBlocking` is True, `onRecv`, `onConnect`, and `onDisconnect` will block when called.\n`recvDir` is the directory in which files will be put in when received.\nIf `daemon` is True, all threads spawned will be daemon threads.\nIf `jsonEncode` is True, packets will be encoded using json instad of pickle.\n\n### Starting the server\n\n```py\ns.start(host=None, port=None)\n```\n\nStart the server. If `host` is not specified, it will default to `socket.gethostname()`. If `port` is not specified, it will default to `0`, which represents an arbitrary unused port.\n\n### Stopping the server\n\n```py\ns.stop()\n```\n\nStop the server.\n\n### Check if the server is serving\n\n```py\ns.serving()\n```\n\n### Get the server's address\n\n```py\ns.getAddr()\n```\n\n### Get a client's address\n\n```py\ns.getClientAddr(conn)\n```\n\nGet a client's address, providing the client socket object.\n\n### Get a list of a server's clients\n\n```py\ns.getClients()\n```\n\n### Remove a client\n\n```py\ns.removeClient(conn)\n```\n\nDisconnect a client from the server, providing the client socket object.\n\n### Send data to a client\n\n```py\ns.send(data, conn=None)\n```\n\nSend data to a client. `conn` is the client socket object to send the data to. If `conn` is None, data is sent to all clients.\n\n### Send a file or directory to a client\n\n```py\ns.sendFile(path, conn=None)\n```\n\nSend a file or directory to a client. `path` is the path to the file or directory. `conn` is the client socket object to send the file or directory to. If `conn` is None, the file or directory is sent to all clients.\n\n## Server alternative\n\nThe dtplib server object can be used in a with statement.\n\n```py\nwith server(host, port, *args, **kwargs) as s:\n    pass\n```\n\n`host` is the server IP address. `port` is the port number. `args` and `kwargs` will be passed to the Server class constructor.\n\n## Client\n\n### Creating a client\n\n```py\nc = Client(onRecv=None, onDisconnected=None, blocking=False, eventBlocking=False, recvDir=None, daemon=True, jsonEncode=False)\n```\n\nCreate a client object.\n\n`onRecv` is a function that will be called when a packet is received. It takes the following parameters: data, datatype (0: object, 1: file).\n`onDisconnected` is a function that will be called when the server disconnects suddenly. It takes no parameters.\nIf `blocking` is True, the connect method will block until disconnecting.\nIf `eventBlocking` is True, `onRecv` and `onDisconnected` will block when called.\n`recvDir` is the directory in which files will be put in when received.\nIf `daemon` is True, all threads spawned will be daemon threads.\nIf `jsonEncode` is True, packets will be encoded using json instad of pickle.\n\n### Connecting to a server\n\n```py\nc.connect(host, port)\n```\n\n### Disconnecting from the server\n\n```py\nc.disconnect()\n```\n\n### Check if connected to a server\n\n```py\nc.connected()\n```\n\n### Get the client's address\n\n```py\nc.getAddr()\n```\n\n### Get the remote server's address\n\n```py\nc.getServerAddr()\n```\n\n### Send data to the server\n\n```py\nc.send(data)\n```\n\nSend data to the server, providing the data to be sent.\n\n### Send a file or directory to the server\n\n```py\nc.sendFile(path)\n```\n\nSend a file or directory to the server, providing the path to the file or directory to be sent.\n\n## Client alternative\n\nThe dtplib client object can be used in a with statement.\n\n```py\nwith client(host, port, *args, **kwargs) as c:\n    pass\n```\n\n`host` is the server IP address. `port` is the port number. `args` and `kwargs` will be passed to the Client class constructor.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WKHAllen/dtplib",
    "keywords": "networking,websocket,socket,server,client",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtplib",
    "package_url": "https://pypi.org/project/dtplib/",
    "platform": "",
    "project_url": "https://pypi.org/project/dtplib/",
    "project_urls": {
      "Homepage": "https://github.com/WKHAllen/dtplib"
    },
    "release_url": "https://pypi.org/project/dtplib/1.2.0/",
    "requires_dist": [
      "compressdir",
      "cryptography",
      "rsa"
    ],
    "requires_python": "",
    "summary": "A cross platform networking library written in Python",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6720354,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a77da53a111a530f54612016b384a36ce4e62ab65a703fb72adc24270c440154",
        "md5": "4601d0701a7a527b3bbf2e226bb7468a",
        "sha256": "1b7c0d73d4f19fa43668b142bdca67363d9578b95590716370d23637a259f939"
      },
      "downloads": -1,
      "filename": "dtplib-1.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4601d0701a7a527b3bbf2e226bb7468a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8705,
      "upload_time": "2020-02-27T20:11:33",
      "upload_time_iso_8601": "2020-02-27T20:11:33.555883Z",
      "url": "https://files.pythonhosted.org/packages/a7/7d/a53a111a530f54612016b384a36ce4e62ab65a703fb72adc24270c440154/dtplib-1.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}