{
  "info": {
    "author": "Caleb Hattingh",
    "author_email": "caleb.hattingh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "dockerctx\n=========\n\n`dockerctx` is a context manager for managing the lifetime of a docker container.\n\nThe main use case is for setting up scaffolding for running tests, where you want\nsomething a little broader than *unit tests*, but less heavily integrated than,\nsay, what you might write using `Robot framework`_.\n\n.. _Robot framework: http://robotframework.org/\n\nInstall\n-------\n\n.. code-block:: bash\n\n    $ pip install dockerctx\n\nFor dev, you have to use flit_:\n\n.. code-block:: bash\n\n    $ pip install flit\n    $ flit install\n\nThe development-specific requirements will be installed automatically.\n\n.. _flit: https://flit.readthedocs.io/en/latest/\n\nDemo\n----\n\nThis is taken from one of the tests:\n\n.. code-block:: python\n\n    import time\n    import redis\n    import pytest\n    from dockerctx import new_container\n\n    # First make a pytest fixture\n\n    @pytest.fixture(scope='function')\n    def f_redis():\n\n        # This is the new thing! It's pretty clear.  The `ready_test` provides\n        # a way to customize what \"ready\" means for each container. Here,\n        # we simply pause for a bit.\n\n        with new_container(\n                image_name='redis:latest',\n                ports={'6379/tcp': 56379},\n                ready_test=lambda: time.sleep(0.5) or True) as container:\n            yield container\n\n    # Here is the test.  Since the fixture is at the \"function\" level, a fully\n    # new Redis container will be created for each test that uses this fixture.\n    # After the test completes, the container will be removed.\n\n    def test_redis_a(f_redis):\n        # The container object comes from the `docker` python package. Here we\n        # access only the \"name\" attribute, but there are many others.\n        print('Container %s' % f_redis.name)\n        r = redis.StrictRedis(host='localhost', port=56379, db=0)\n        r.set('foo', 'bar')\n        assert r.get('foo') == b'bar'\n\nNote that a brand new Redis container is created here, used within the\ncontext of the context manager (which is wrapped into a *pytest* fixture\nhere), and then the container is destroyed after the context manager\nexits.\n\n\nIn the src, there is another, much more elaborate test which\n\n#. runs a *postgres* container;\n#. waits for postgres to begin accepting connections;\n#. creates a database;\n#. creates tables (using the SQLAlchemy_ ORM);\n#. performs database operations;\n#. tears down and removes the container afterwards.\n\n.. _SQLAlchemy: http://www.sqlalchemy.org/\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cjrh/dockerctx",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dockerctx",
    "package_url": "https://pypi.org/project/dockerctx/",
    "platform": "",
    "project_url": "https://pypi.org/project/dockerctx/",
    "project_urls": {
      "Homepage": "https://github.com/cjrh/dockerctx"
    },
    "release_url": "https://pypi.org/project/dockerctx/2018.11.1/",
    "requires_dist": [
      "docker",
      "typing; python_version < '3.5'",
      "psycopg2",
      "sqlalchemy; extra == \"dev\"",
      "sqlalchemy_utils; extra == \"dev\"",
      "sqllogformatter; extra == \"dev\"",
      "pytest; extra == \"dev\"",
      "redis; extra == \"dev\""
    ],
    "requires_python": "",
    "summary": "A context manager for a docker container. ",
    "version": "2018.11.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4488189,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cca269b42359061eea5cd06ede841f0029934e93ae78e62e68e312ab61b5ced",
        "md5": "a0618c7f5278e52b4b08e9326c6e9886",
        "sha256": "5e7d6cb3a40075478c6d356b2cb4237487d6038d31eed8dbedb5a32deddc903e"
      },
      "downloads": -1,
      "filename": "dockerctx-2018.11.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a0618c7f5278e52b4b08e9326c6e9886",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 10202,
      "upload_time": "2018-11-15T04:26:43",
      "upload_time_iso_8601": "2018-11-15T04:26:43.445956Z",
      "url": "https://files.pythonhosted.org/packages/5c/ca/269b42359061eea5cd06ede841f0029934e93ae78e62e68e312ab61b5ced/dockerctx-2018.11.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "060662cd6943ceb9b7bce194cb409e2a7e778eb6ef4e1bfa6e84a83cd3370859",
        "md5": "6d5d86f575cab111008f530d0d915606",
        "sha256": "f2f7f0869f74a0bf2cf407c9863d7aeae60fa9f06adcbf8fe8c8dafe8f4e35fc"
      },
      "downloads": -1,
      "filename": "dockerctx-2018.11.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6d5d86f575cab111008f530d0d915606",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8419,
      "upload_time": "2018-11-15T04:26:52",
      "upload_time_iso_8601": "2018-11-15T04:26:52.255959Z",
      "url": "https://files.pythonhosted.org/packages/06/06/62cd6943ceb9b7bce194cb409e2a7e778eb6ef4e1bfa6e84a83cd3370859/dockerctx-2018.11.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}