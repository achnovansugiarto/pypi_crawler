{
  "info": {
    "author": "Salaah Amin",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Django Email Signals\nA Django application that provides functionality to create signals via the admin panel which will send emails based on some changes to some models.\n\nThe application allows you to set your own constraints and email templates and aims to achieve this with minimal configuration.\n\n# Use Cases\n**Admins are able to setup signals/emails themselves**\n\nIf an admin user has requested for an email to be sent when something happens on the database, what do we do? We developers create a new signal, set any constraints, create the email templates, piece everything together, create unit tests and then deploy. Relatively simple, but still time-consuming especially when there are multiple signals to set up for various changes. This quickly becomes a quite lengthy process.\n\nThis application aims to solve this by providing a way for admins to create these signals themselves rather than having to request the feature and wait for deployment. This is a great way to ease the pressure off developers whilst giving admins the ability to get results quickly.\n\n*How would an admin know what fields to enter for the params?*\nThe application validates the form before saving but also provides autocomplete for the fields.\n\n**Quickly prototyping and testing an email template**\n\nCreating and testing templates for some bigger teams can be a time-consuming process. This is particularly true when the request is from someone who for whatever reason cannot view your screen and relies on you deploying to a test environment to be able to test the template.\n\nThe process then can become a bit tedious. Ever been in a scenario where you deploy some code to test, have it reviewed, have to tweak some code, redeploy it, and have the process repeated a few times?\n\nThis application aims to solve this by providing a way for admins to create the HTML content themselves using a rich text editor. This allows admins to quickly prototype and test the email content themselves. Once ready, all they need to do is click on \"show source code\", and send that sweet source code to you.\n\n## Installation\nTo install the application, run the following command:\n```\npip install django-email-signals\n```\n\nThe pip install command will be all that is required for most people, however if you want to look under the hood and see what's going on, you can clone the source directory:\n```\ngit clone https://github.com/Salaah01/django-email-signals.git\n```\n\n## Setup\n**1. Add to `INSTALLED_APPS`**\ni. Add Add `ckeditor` to your `INSTALLED_APPS` in your `settings.py` file.\n\n```python\nINSTALLED_APPS = [\n  'app_1`,\n  'app_2`,\n  '...',\n  'ckeditor',\n]\n```\n\nii. Add Add `email_signals` to your `INSTALLED_APPS` in your `settings.py` file. This should be added after any apps which contain models for which you would like to create signals using this application.\n\n```python\nINSTALLED_APPS = [\n  'app_1`,\n  'app_2`,\n  '...',\n  'ckeditor',\n  'email_signals`\n]\n```\n\n**2. Run Migrations and Collect Static**\n```\npython manage.py migrate\npython manage.py collectstatic\n```\n\n**3. Update URLs (Option)**\nUpdate your root `urls.py` file to include the following:\n```python\nfrom django.urls import include\n\nurl_patterns = [\n  path('email-signals/', include('email_signals.urls')),\n]\n```\nWe recommend changing the URL to something a bit harder to guess, just to make life harder for those pesky snoopers. The application paths all require the user to be a staff member to be able to access the links.\n\nThough this step is optional, we recommend doing it as it will make setting constraints in the admin area much easier. The URLs are needed to provide a dropdown with options when building your constraints.\n\n**4. Add a Default Email (Optional)**\nAdd `EMAIL_SIGNAL_DEFAULT_SENDER` to your settings.\ne.g: `EMAIL_SIGNAL_DEFAULT_SENDER = 'someone@mail.com`\nIf you don't want to explicitly specify a sender email for every signal you define, you can set `EMAIL_SIGNAL_DEFAULT_SENDER` in your project `settings.py`.\n\n**5. Add the Model Mixin**\nOn the models that you want to raise signals, you will need to add the following mixin as a dependency to the models: `email_signals.models.EmailSignalMixin`.\n\nExample:\nLet's suppose you have the following model.\n```python\nfrom django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=200, null=True)\n    email = models.CharField(max_length=200)\n```\nYou would need to change this model to the following:\n\n```python\nfrom email_signals.models import EmailSignalMixin\n\nclass Customer(models.Model, EmailSignalMixin):\n    name = models.CharField(max_length=200, null=True)\n    email = models.CharField(max_length=200)\n```\n\n**6. Add Recipients**\nDepending on the change to the data, you may want to send an email to different people. We facilitate this by setting up the various possible mailing lists into the model itself. This one is easier to show first then explain:\n\n```python\nfrom email_signals.models import EmailSignalMixin\n\nclass Customer(models.Model, EmailSignalMixin):\n    name = models.CharField(max_length=200, null=True)\n    email = models.CharField(max_length=200)\n\n    def customer_emails(self):\n        \"\"\"Recipient is the customer.\"\"\"\n        return [self.email]\n\n    def management_mailing_list(self):\n        \"\"\"Recipient list includes management.\"\"\"\n        return ['manager@somewhere.com', 'supervisor@somewhere.com']\n```\n\nWe've created two functions called `customer_emails` and `management_mailing_list` which each return a collection of email addresses. Later on, when we setup the signals, we will be asked to set the mailing list to use for each signal. This is where we would enter our function names ``customer_emails` or `management_mailing_list`.\n\nThis therefore, allows us to set up different mailing lists within our models.\n## Adding Signals\nNow that the setup is complete, signals can be added via the admin (or by updating the database directly).\n\nWe will imagine I am running a site on localhost and so the admin panel can be found by navigating to http://localhost:8000/admin/. The signals can then be accessed by navigating to http://localhost:8000/admin/email_signals/signal/. We will start by adding some signals. Click on \"add signal\" to get started.\n\nA wise man taught me *it's better to sound silly for a moment than not know something and feel stupid forever*. So, in that vein, though it might seem obvious, we'll go through the options in the form and discuss what each option\nis responsible for.\n\n| Field Label      | Field Name       | Description                                                                                                                    |\n| ---------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| Name             | name             | An name for your signal, just to make it easier to distinguish from other records.                                             |\n| Description      | description      | (Optional) Description for your signal.                                                                                        |\n| Model (Table)    | content_type     | Choose from the drop down the model this signal relates to.                                                                                        |\n| Plain text content | plain_message | (Optional) Plain text email to send.                                                                                           |\n| HTML content       | html_message       | (Optional) HTML email to send.                                                                                                 |\n| Subject          | subject          | Email subject                                                                                                                  |\n| From email       | from_email       | (Optional) The email sender. Defaults to `settings.EMAIL_SIGNAL_DEFAULT_SENDER`.                                           |\n| Mailing list  | mailing_list    | The recipient list where the text you enter, corresponds to a method called in the model class with the same name. e.g: If you enter `customer_mails`, then there will need to be a method called `customer_mails` that returns a collection of emails in the model class. |\n| Template         | template         | (Optional) Path to a template, should you wish to render an email from a template. This uses Django's template loader, so as the value you provide here should be relative to `settings.TEMPLATES[i]['DIRS']`.                                             |\n| Signal Type      | signal_type      | Type of signal to raise for this record.                                                                                       |\n| Active           | active           | A switch to turn this signal on and off.                                                                                       |\n\n**Signal Constraints**\nThis inline model is where you can set some constraints which will determine if the signal should be raised on a case by case basis.\n\n| Field Label | Field Name | Description                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| ----------- | ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Parameter 1 | param_1    | The first parameter to use when testing a constraint. This parameter must exist in the signal kwargs or the model instance.                                                                                                                                                                                                                                                                                                                  |\n| Comparison  | comparison | Define how to compare the parameters. E.g: parameter 1 is **greater than** parameter 2.                                                                                                                                                                                                                                                                                                                                                      |\n| Parameter 1 | param_1    | (Optional) The second parameter to use when testing a constraint. This parameter can be left empty when the constraint is something sensible. For example, if constraint is \"Is True\" then there is no need for parameter 2. But if the constraint is, \"Greater Than\", then parameter 2 is needed. Parameter 2 can also be a primitive type such as 'a', '1', '1.1'. The application will attempt to convert strings into numbers if it can. |\n\n**Parameters are Deep**\nBoth parameters 1 and 2 allow you to search deep inside an object.\nLet's suppose we have the following structure and signal has received a `CustomerOrder` instance.\n\n```mermaid\nclassDiagram\n    User <| -- Customer\n    Customer <| -- CustomerOrder\n\n    class User {\n      id\n      first_name\n      last_name\n      email\n    }\n\n    class Customer {\n      id\n      user\n      fav_language\n    }\n\n    class CustomerOrder {\n      id\n      customer\n      order_id\n      total\n    }\n```\n\nGiven a `CustomerOrder` instance (we'll call this variable `order`), we can set the following in our constraints:\n\n| \\#  | Parameter 1                  | Comparison   | Parameter 2                 |\n| --- | ---------------------------- | ------------ | --------------------------- |\n| 1   | `'customer.user.id'`         | Greater Than | `'5'`                       |\n| 2   | `'customer.user.first_name'` | Equal To     | `'customer.user.last_name'` |\n\nConstraint 1 will check the following:\n```python\norder.customer.user.id > 5\n```\nSimilarly, constraint 2 will check the following:\n```python\norder.customer.user.first_name == order.customer.user.last_name\n```\n\nOnly when all constraints are satisfied will the email be sent.\n\n## Playground\nThe repository comes with an example project to get you started. If you prefer to test this application yourself then I recommend cloning the repository.\n\nNavigating to `example` and running the Django project inside.\n\n\n## Testing\nIn the root of the project there is a `runtests.py` file which can be used to run the tests.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Salaah01/django-email-signals",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-email-signals",
    "package_url": "https://pypi.org/project/django-email-signals/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-email-signals/",
    "project_urls": {
      "Homepage": "https://github.com/Salaah01/django-email-signals"
    },
    "release_url": "https://pypi.org/project/django-email-signals/1.0.1/",
    "requires_dist": [
      "django-ckeditor (>=5.0.0)",
      "django (>=2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "A Django app that allows users to dynamically send emails whenever there are some changes on some tables.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15084116,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b7dd4cf26c8c9f76167b9b6d80c199f00d1ec6c2523083e57baeb344ad403d9",
        "md5": "5d5fe05edbb8af0302271730110e0fb4",
        "sha256": "d12420af3cae4bf5d562bd40af5080ef7ae6c29e95a1a4e5fef0d0a831baf7f3"
      },
      "downloads": -1,
      "filename": "django_email_signals-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5d5fe05edbb8af0302271730110e0fb4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 37191,
      "upload_time": "2022-03-16T16:59:55",
      "upload_time_iso_8601": "2022-03-16T16:59:55.565438Z",
      "url": "https://files.pythonhosted.org/packages/1b/7d/d4cf26c8c9f76167b9b6d80c199f00d1ec6c2523083e57baeb344ad403d9/django_email_signals-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76513f02d1b038d6bec6baeb4a1e0ff767131429970a5a538d85431f167ad422",
        "md5": "fbba70c979c52c6e3e61f29ab2c7a6c5",
        "sha256": "e1797a4a858b16b6638e0f422264bbe61300e9448dc32b5df56336b96fb6df54"
      },
      "downloads": -1,
      "filename": "django-email-signals-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fbba70c979c52c6e3e61f29ab2c7a6c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 28454,
      "upload_time": "2022-03-16T16:59:57",
      "upload_time_iso_8601": "2022-03-16T16:59:57.990923Z",
      "url": "https://files.pythonhosted.org/packages/76/51/3f02d1b038d6bec6baeb4a1e0ff767131429970a5a538d85431f167ad422/django-email-signals-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}