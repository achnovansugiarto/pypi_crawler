{
  "info": {
    "author": "Pavan Kumar",
    "author_email": "pavanputhra@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Dockdj\n\n#### Production Quality Django Deployments\n\nDockdj is a command line tool that allows you to deploy any [Django](https://www.djangoproject.com/) app to your own server.\n\nThis tool is inspired by [Meteor up](http://meteor-up.com/) tool which is used to deploy [Meteor.js](https://www.meteor.com/) app.\n\nYou can install and use Dockdj on Linux, Mac and Windows. It can deploy to servers running Ubuntu 14 or newer.\n\nDockdj is powered by [Docker](http://www.docker.com/), making deployment easy to manage and reducing server specific errors.\n\n\n#### Requirement\n\nThis tool needs Python > 3.6\n\n#### Install\n\nInstall the dockdj using following command\n\n    $ pip install dockdj\n\n\n#### Usage\n\nLets say you have a Django project with following directory structure.\n\n    parent\n        - hello_world\n        |    - hello_world\n        |        - wsgi.py\n\nCreate a sibling to the django project directory for saving dockdj settings files which will be used to deploy the django app\n\n    $ mkdir deploy\n\n    parent\n        - hello_world\n        |    -hello_world\n        |        -wsgi.py\n        - deploy\n\n    $ cd deploy\n\n    $ dockdj init\n\nThis will create two files `dockdj.yaml` and `settings.py`\n\n    parent\n        - hello_world\n        |    -hello_world\n        |        -wsgi.py\n        - deploy\n            - dockdj.yaml\n            - settings.py\n\nModify the `dockdj.yaml` file to enter server configuration and app details. Initial file looks as follows.\n\n    ---\n    servers:\n    - host: 1.2.3.4\n      # must be sudo without password\n      username: root\n      pem: \"~/.ssh/id_rsa\"\n      # optional\n      env:\n        PER_SERVER: abc\n    app:\n      # Any name used by script to name docker\n      name: abc\n      # Django app dir which contains wsgi.py and settings.py\n      django_app: 'hello_world'\n      requirements_file: 'requirements.txt'\n      port: 80\n      # Django app dir which contains wsgi.py and settings.py\n      path: \"/path/to/project\"\n      docker:\n        image: python:3.7\n      env:\n        FOO: foo\n        BAR: bar\n\n`settings.py` fill contains settings which will be appended to your django app's settings.py file. You can enter production related settings or override development settings here. Initial `settings.py` file looks like as follows.\n\n\n    DEBUG = False\n\n    # Add the your servers host name or ip address\n    ALLOWED_HOSTS = ['1.2.3.4', 'www.example.com']\n\n\nAfter editing these two files appropriately run following command to setup server. This will install docker in Ubuntu servers if not already installed.\n\n\n    $ dockdj setup\n\n\nTo deploy the django app run following.\n\n    $ dockdj deploy\n\nThis will create docker image of your Django app. Runs the Django app using [gunicorn](https://gunicorn.org/) and binds the port to the port specified in `dockdj.yaml`.\n\n\n#### Django manage.py\n\nYou can run manage.py script on server using manage sub command as follows.\n\n    $ dockdj manage migrate\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pavanputhra/dockdj",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dockdj",
    "package_url": "https://pypi.org/project/dockdj/",
    "platform": "",
    "project_url": "https://pypi.org/project/dockdj/",
    "project_urls": {
      "Homepage": "https://github.com/pavanputhra/dockdj"
    },
    "release_url": "https://pypi.org/project/dockdj/1.1.0/",
    "requires_dist": [
      "fabric",
      "PyYAML"
    ],
    "requires_python": "",
    "summary": "Deploy the Django app to Ubuntu server as docker container.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4843973,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e29456751d17cd89a5c1e84ec44a080550a3577985a71f822056ab3e4adb1f1",
        "md5": "22eac7b59fba30c6349b085449df29e3",
        "sha256": "c86975dd347789c2ec5cd5714af3f9964476007be46220b8494852b90ea814d1"
      },
      "downloads": -1,
      "filename": "dockdj-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "22eac7b59fba30c6349b085449df29e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7529,
      "upload_time": "2019-01-10T16:17:04",
      "upload_time_iso_8601": "2019-01-10T16:17:04.587594Z",
      "url": "https://files.pythonhosted.org/packages/8e/29/456751d17cd89a5c1e84ec44a080550a3577985a71f822056ab3e4adb1f1/dockdj-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0154224f661a1534047dea8ba4e21f5c16a8b46c54777540962bf48d8683940f",
        "md5": "3018c85f1a8c5ff5623a8010f391b6d0",
        "sha256": "3e077411e84b0e00d438b6fb029fd7cf368da8c754f8d4c42e49804dc18ec25b"
      },
      "downloads": -1,
      "filename": "dockdj-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3018c85f1a8c5ff5623a8010f391b6d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5240,
      "upload_time": "2019-01-10T16:17:06",
      "upload_time_iso_8601": "2019-01-10T16:17:06.465679Z",
      "url": "https://files.pythonhosted.org/packages/01/54/224f661a1534047dea8ba4e21f5c16a8b46c54777540962bf48d8683940f/dockdj-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}