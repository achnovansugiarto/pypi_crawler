{
  "info": {
    "author": "Robert Singer",
    "author_email": "robertgsinger@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django Lifecycle Hooks\n\n[![Package version](https://badge.fury.io/py/django-lifecycle.svg)](https://pypi.python.org/pypi/django-lifecycle)\n[![Python versions](https://img.shields.io/pypi/status/django-lifecycle.svg)](https://img.shields.io/pypi/status/django-lifecycle.svg/)\n[![Python versions](https://img.shields.io/pypi/pyversions/django-lifecycle.svg)](https://pypi.org/project/django-lifecycle/)\n![PyPI - Django Version](https://img.shields.io/pypi/djversions/django-lifecycle)\n\nThis project provides a `@hook` decorator as well as a base model and mixin to add lifecycle hooks to your Django models. Django's built-in approach to offering lifecycle hooks is [Signals](https://docs.djangoproject.com/en/dev/topics/signals/). However, my team often finds that Signals introduce unnecessary indirection and are at odds with Django's \"fat models\" approach.\n\n**Django Lifecycle Hooks** supports Python 3.7, 3.8 and 3.9, Django 2.0.x, 2.1.x, 2.2.x, 3.0.x, 3.1.x, and 3.2.x.\n\nIn short, you can write model code like this:\n\n```python\nfrom django_lifecycle import LifecycleModel, hook, BEFORE_UPDATE, AFTER_UPDATE\n\n\nclass Article(LifecycleModel):\n    contents = models.TextField()\n    updated_at = models.DateTimeField(null=True)\n    status = models.ChoiceField(choices=['draft', 'published'])\n    editor = models.ForeignKey(AuthUser)\n\n    @hook(BEFORE_UPDATE, when='contents', has_changed=True)\n    def on_content_change(self):\n        self.updated_at = timezone.now()\n\n    @hook(AFTER_UPDATE, when=\"status\", was=\"draft\", is_now=\"published\")\n    def on_publish(self):\n        send_email(self.editor.email, \"An article has published!\")\n```\n\nInstead of overriding `save` and `__init__` in a clunky way that hurts readability:\n\n```python\n    # same class and field declarations as above ...\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._orig_contents = self.contents\n        self._orig_status = self.status\n\n\n    def save(self, *args, **kwargs):\n        if self.pk is not None and self.contents != self._orig_contents:\n            self.updated_at = timezone.now()\n\n        super().save(*args, **kwargs)\n\n        if self.status != self._orig_status:\n            send_email(self.editor.email, \"An article has published!\")\n```\n\n---\n\n**Documentation**: <a href=\"https://rsinger86.github.io/django-lifecycle/\" target=\"_blank\">https://rsinger86.github.io/django-lifecycle</a>\n\n**Source Code**: <a href=\"https://github.com/rsinger86/django-lifecycle/\" target=\"_blank\">https://github.com/rsinger86/django-lifecycle</a>\n\n---\n\n# Changelog\n\n## 1.0.0 (May 2022)\n\n- Drops Python 3.6 support\n- Adds `priority` hook kwarg to control the order in which hooked methods fire. Thanks @EnriqueSoria!\n- Internal cleanup/refactoring. Thanks @EnriqueSoria!\n\n## 0.9.6 (February 2022)\n\n- Adds missing `packaging` to `install_requires`. Thanks @mikedep333!\n\n## 0.9.5 (February 2022)\n\n- Makes the `has_changed`, `changes_to` conditions depend on whether the field in question was included in the SQL update/insert statement by checking\n  the `update_fields` argument passed to save.\n\n## 0.9.4 (February 2022)\n\n- Adds optional @hook `on_commit` argument for executing hooks when the database transaction is committed. Thanks @amcclosky!\n\n## 0.9.3 (October 2021)\n\n- Correct packge info to note that Django 3.2 is supported.\n\n## 0.9.2 (October 2021)\n\n- Run hooked methods inside transactions, just as signals do. Thanks @amirmotlagh!\n\n## 0.9.1 (March 2021)\n\n- Makes hooks work with OneToOneFields. Thanks @bahmdev!\n\n## 0.9.0 (February 2021)\n\n- Prevents calling a hooked method twice with the same state. Thanks @garyd203!\n\n## 0.8.1 (January 2021)\n\n- Added missing return to `delete()` method override. Thanks @oaosman84!\n\n## 0.8.0 (October 2020)\n\n- Significant performance improvements. Thanks @dralley!\n\n## 0.7.7 (August 2020)\n\n- Fixes issue with `GenericForeignKey`. Thanks @bmbouter!\n\n## 0.7.6 (May 2020)\n\n- Updates to use constants for hook names; updates docs to indicate Python 3.8/Django 3.x support. Thanks @thejoeejoee!\n\n## 0.7.5 (April 2020)\n\n- Adds static typed variables for hook names; thanks @Faisal-Manzer!\n- Fixes some typos in docs; thanks @tomdyson and @bmispelon!\n\n## 0.7.1 (January 2020)\n\n- Fixes bug in `utils._get_field_names` that could cause recursion bug in some cases.\n\n## 0.7.0 (December 2019)\n\n- Adds `changes_to` condition - thanks @samitnuk! Also some typo fixes in docs.\n\n## 0.6.1 (November 2019)\n\n- Remove variable type annotation for Python 3.5 compatability.\n\n## 0.6.0 (October 2019)\n\n- Adds `when_any` hook parameter to watch multiple fields for state changes\n\n## 0.5.0 (September 2019)\n\n- Adds `was_not` condition\n- Allow watching changes to FK model field values, not just FK references\n\n## 0.4.2 (July 2019)\n\n- Fixes missing README.md issue that broke install.\n\n## 0.4.1 (June 2019)\n\n- Fixes [urlman](https://github.com/andrewgodwin/urlman)-compatability.\n\n## 0.4.0 (May 2019)\n\n- Fixes `initial_value(field_name)` behavior - should return value even if no change. Thanks @adamJLev!\n\n## 0.3.2 (February 2019)\n\n- Fixes bug preventing hooks from firing for custom PKs. Thanks @atugushev!\n\n## 0.3.1 (August 2018)\n\n- Fixes m2m field bug, in which accessing auto-generated reverse field in `before_create` causes exception b/c PK does not exist yet. Thanks @garyd203!\n\n## 0.3.0 (April 2018)\n\n- Resets model's comparison state for hook conditions after `save` called.\n\n## 0.2.4 (April 2018)\n\n- Fixed support for adding multiple `@hook` decorators to same method.\n\n## 0.2.3 (April 2018)\n\n- Removes residual mixin methods from earlier implementation.\n\n## 0.2.2 (April 2018)\n\n- Save method now accepts `skip_hooks`, an optional boolean keyword argument that controls whether hooked methods are called.\n\n## 0.2.1 (April 2018)\n\n- Fixed bug in `_potentially_hooked_methods` that caused unwanted side effects by accessing model instance methods decorated with `@cache_property` or `@property`.\n\n## 0.2.0 (April 2018)\n\n- Added Django 1.8 support. Thanks @jtiai!\n- Tox testing added for Python 3.4, 3.5, 3.6 and Django 1.8, 1.11 and 2.0. Thanks @jtiai!\n\n# Testing\n\nTests are found in a simplified Django project in the `/tests` folder. Install the project requirements and do `./manage.py test` to run them.\n\n# License\n\nSee [License](LICENSE.md).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rsinger86/django-lifecycle",
    "keywords": "django model lifecycle hooks callbacks",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-lifecycle",
    "package_url": "https://pypi.org/project/django-lifecycle/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-lifecycle/",
    "project_urls": {
      "Homepage": "https://github.com/rsinger86/django-lifecycle"
    },
    "release_url": "https://pypi.org/project/django-lifecycle/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Declarative model lifecycle hooks.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13966015,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc827356fd11d2f41d61e9d3261cebcb1d71d3b27feb852c5df96f6f467760fe",
        "md5": "3772abe5623bf9eacb4d7c3a894b7238",
        "sha256": "136c48e65d439cc34a6cb9a10d6d17611a9a5223f8249ee9c190ca5c7a67e9c1"
      },
      "downloads": -1,
      "filename": "django-lifecycle-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3772abe5623bf9eacb4d7c3a894b7238",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13424,
      "upload_time": "2022-05-29T00:00:04",
      "upload_time_iso_8601": "2022-05-29T00:00:04.204897Z",
      "url": "https://files.pythonhosted.org/packages/bc/82/7356fd11d2f41d61e9d3261cebcb1d71d3b27feb852c5df96f6f467760fe/django-lifecycle-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}