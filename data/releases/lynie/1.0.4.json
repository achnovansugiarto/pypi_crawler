{
  "info": {
    "author": "JessaTehCrow",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Lynie\nAn easy to use python to oneline-icator.\n\nSupport for atleast `Python 3.8.7`. \nUnsure for other versions.\n\n## Usage\nLynie only has one function that has to be called in order to turn a filename into a single line.\n\nImport `lynie`, and call `lynie.parse_file(filename)`. It will return the one line in the form of a string.\nWith this string you can write it to a file.\nHere's a simple example of how you can use it (File: `example.py`):\n```py\nimport  lynie\n\nfilename = \"oneline.py\"\noutput_file = \"example_output.py\"\n\n#Get the one line equivalent of the file\nline = lynie.parse_file(filename)\n\n#Write to output file\nwith  open(output_file,\"w\")  as  f:\n\tf.write(line)\n```\n\n## Known problems\n\nAs of right now, there's a few things Lynie can't do.\n\n- With\n- Try except\n- While\n\n`With` is a difficult thing to do as it's impossible to do in a single line. It also doesn't have a single line equivalent.\n\n`Try Except` Is something that might be possible. However as of right now it's not in Lynie as it's syntax is uncompatible with list comprehensions.\n\n`While` Is possible by using a recursive function. Though i haven't implemented it yet, it will come soon.\n\n___\nThere's also a different problem that Lynie can do, however not perfectly.\nStarred function arguments is something that i've had problems with, but i haven't found a solution to.\n`def some_function(*list_input, argument=False, argument2=True)`\nLynie will only be able to see `*list_input` and completely ignores `argument` and `argument2`.\nThis is due to `ast` not seeing anything past the starred argument. However it will still see kwarg arguments.\n`(*list_input, **kwargs)` will work.\nSo you can \"Optimize\" your code for Lynie to still take those arguments.\n```py\ndef some_func(*inp, output=False):\n\tif output:\n\t\tprint(inp)\n\n#Could become something like:\n\ndef some_func(*inp,**kwargs):\n\t#Put the default values in the data dict\n\tdata = {\"output\":False}\n\n\t#Update data with kwargs. Overwriting the default one if 'output' is in kwargs.\n\t#But keeps the default value if it isn't defined\n\tdata.update(kwargs)\n\n\t#Set `output` to the value in the dict\n\toutput = data['output']\n\n\t#Rest of code\n\tif output:\n\t\tprint(inp)\n```\n___\nIf you have any other problems, feel free to raise an issue on this github repo.\n\n## TODO\n\n- Change the way the imports work\n- add support for while loops\n- find a way to use try/except\n\n## What to use it for\nHonestly, i wouldn't know.\nThough, judging by the fact that you've found this Repo, you already would have some use for it.\nMay that be obfuscation, just for fun, or just to see if it was possible. You're here!\n\n## Why\nI'm in a [discord server](https://discord.gg/ZwQgNfZa) where they have daily python challenges, and most people there try to make those challenges in as little code as possible. Or mainly try to do it within one line.\n\nAnd while doing that, i suddenly realized you could pretty much make anything in one line.\nSo i did some experimenting with it, by turning some of my functions of different modules into a single line.\nAnd succeeded with all of them.\n\nThen i had the bright idea to make a module that turns other scripts into a single line.\nIt was a very daunting first few hours. As i had no clue how i was going to even begin doing such a thing.\nAs everything in python would need to be supported, in a way that everyone can use it, not only for my code.\n\nThough, thankfully, my first try worked good. Good enough to have continued it to the point where it is now.\nThere probably are better ways of doing this, however I'm proud enough of myself to have accomplished this to begin with. Maybe later I'll make a better version of it.\n\n## Change log\n1.0:\n\n\tAdded:\n\t\t- Assignments\n\t\t- Functions\n\t\t- For loops\n\t\t- If / Else statements\n\t\t- f strings\n\t\t- function calls\n\t\t- imports\n\t\t- lambda functions\n\n1.1:\n\n\tAdded:\n\t\t- Example file\t\n\t\t- Comments\n\n1.2:\n\n\tAdded:\n\t\t- Modulo operator\n\n\tChanged:\n\t\t- Example files\n\n1.3:\n\n\tAdded:\n\t\t- List comprehension support\n\t\t- Description for `parse_file` function.\n\n\tFixed:\n\t\t- Output for constants\n\t\t- Function argument parsing\n\t\t- If Else output being a string instead of code\n\t\t- Variable assign parsing\n\t\t- Function return parsing\n\n1.3.5:\n\n\tAdded:\n\t\t- A testing script\n\t\t- Folder with scripts to test\n\n\tChanged:\n\t\t- Made Lynie a PIP module\n\t\t- Made changes.txt have shorter version numbers\n\t\t- _get_args to be more readable\n\n1.4\n\n\tAdded:\n\t\t- parse_string function\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jessatehcrow/lynie",
    "keywords": "python,one line,simple",
    "license": "",
    "maintainer": "JessaTehCrow",
    "maintainer_email": "",
    "name": "lynie",
    "package_url": "https://pypi.org/project/lynie/",
    "platform": "",
    "project_url": "https://pypi.org/project/lynie/",
    "project_urls": {
      "Homepage": "https://github.com/jessatehcrow/lynie"
    },
    "release_url": "https://pypi.org/project/lynie/1.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An easy to use python oneline-icator.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11317555,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e3e582a819912c35bf7f908585b33e9e33cd37c6b759a0e7f43779c0e074917",
        "md5": "81faadf06e1d0f5f7a20361935ecb151",
        "sha256": "ab9df24f219273ffa7e4e1ab5ade149b61f86756201287088f75943f1678b204"
      },
      "downloads": -1,
      "filename": "lynie-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81faadf06e1d0f5f7a20361935ecb151",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8004,
      "upload_time": "2021-08-30T20:39:51",
      "upload_time_iso_8601": "2021-08-30T20:39:51.286782Z",
      "url": "https://files.pythonhosted.org/packages/1e/3e/582a819912c35bf7f908585b33e9e33cd37c6b759a0e7f43779c0e074917/lynie-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43676ea2e8260f136eaaa5ed3788c6c10b44ab0bb261072f798a00410e68abaf",
        "md5": "fbaed465133ac2ec4c2bdc0f9b292bd5",
        "sha256": "32ec861e2913fb854b50c56e4d700ab5e1162e11960671c72a9e00c9c532a83e"
      },
      "downloads": -1,
      "filename": "lynie-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "fbaed465133ac2ec4c2bdc0f9b292bd5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8154,
      "upload_time": "2021-08-30T20:39:54",
      "upload_time_iso_8601": "2021-08-30T20:39:54.023054Z",
      "url": "https://files.pythonhosted.org/packages/43/67/6ea2e8260f136eaaa5ed3788c6c10b44ab0bb261072f798a00410e68abaf/lynie-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}