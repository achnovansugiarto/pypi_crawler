{
  "info": {
    "author": "Real-Gecko",
    "author_email": "alexandrbezenkov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django Router\n\nYou have a data and you need to provide some CRUD functionality for it quickly. What do you do?\n\n1. Create model\n2. Add some views\n3. ????\n4. PROFIT!\n\nRight? Right! Done! And nothing works! Why? `URLS.PY`!!! You always forget this ones? I have a solution!\n\nMaintaining Django's `urls.py` can become really annoying when you have a lot of apps with dozens urls in each. Other frameworks deal with it in elegant ways, like Flask's `@app.route` decorator. This project brings same concept to Django by adding `@router` decorator functions.\n\n# Compatibility\n\nThis project is automatically tested with Python 3.7, 3.8, 3.9, 3.10 and Django 2.2, 3.1, 3.2, 4.0, 4.1. Latest version for each release. Compatibility with earlier versions of Python or Django(starting from 2.0) is possible, but not guaranteed.\n\n# Installation\n\nPackage is hosted in `pypi.org` thus you can use any tool that works with it to install the package:\n\n`pip install django-router`\n\n`poetry add django-router`\n\nAdd `django_router` to your `INSTALLED_APPS`\n\n```python\n# superduperproject/settings.py\nINSTALLED_APPS = [\n    ...\n    \"django_router\",\n    ...\n]\n```\n\n---\n\nModify project `urls.py` (the top one)\n\n```python\n# superduperproject/urls.py\nfrom django_router import router\n\n# the only time you need to modify any `urls.py`\nurlpatterns = router.urlpatterns\n\n# or with existing ones\nurlpatterns = [\n    ...\n] + router.urlpatterns\n```\n\n# Concept\n\nTo easily understand all the auto naming concept of the app take a look at testing project within the repo.\n\n# Usage\n\nJust use decorator in your apps' `views.py`. Django Router uses **autodiscovery** feature, so make sure views you're interested in are either inside `views.py` or get imported into it.\n\n```python\n# employees/views.py\nfrom django_router import router\nfrom employees.models import Employee\nfrom django.shortcuts import render\nfrom django.views.generic.edit import CreateView\n\n# Works with function based views\n# Resulting url will be `/employees/employee_list/`\n@router.path()\ndef employee_list(request):\n    employees = Employee.objects.all()\n    return render(request, 'employee_list.html', {'employees':employees})\n\n# As well as with class based views\n# Resulting url will be `/employees/employee_create/`\n@router.path()\ndef EmployeeCreate(CreateView):\n    model = Employee\n\n```\n\nAnd that's it! No more need to deal with lengthy `urls.py`!\n\n# How it works\n\nRouter has two functions `path` and `re_path` which work exactly the same as `django.urls` functions you already know. Except that you don't even need to specify **url** or **name**.\n\nView module path is used to determine the resulting URL prefix. So URL for views in `employees/views.py` app will start with `/employees/...` , `employees/manage/views.py` - `/employees/manage/...` URL etc.\n\nAlso first module will be used as a namespace for reverse\n\n```python\nreverse('employees:employee_list')\n```\n\n**NOTICE**: nested namespaces are not supported for now.\n\nApp has some functionality builtin for automatic `pattern` and `name` generation.\n\nFor FBVs if no name is provided function name will be used, camel case will be turned into snake case:\n\n```python\n# same as path('import_employees/', import_employees, name='import_employees')\n@router.path()\ndef import_employees(request):\n    ...\n\n# same as path('import_employees/', ImportEmployees.as_view(), name='import_employees')\n@router.path()\nclass ImportEmployees(View):\n    ...\n```\n\nFor generic Django views(`CreateView`,`UpdateView`,`ListView`,`DetailView`,`DeleteView`) there's some builtin autonaming behavior which tries to be logical.\n\n```python\n@route.path()\nclass NewEmployeeView(CreateView):\n    model = Employee\n\n# is same as\npath('employee/create/', NewEmployeeView.as_view(), name='employee_create')\n\n```\n\nOf course you can specify path and name as usual:\n\n```python\n@router.path('im_emp/', name='employees_import')\ndef import_employees(request):\n    ...\n```\n\n# Settings\n\nSettings for the project are mostly to control autonaming behavior.\nThese are default settings for the project\n\n```python\nROUTER_SETTINGS = {\n    \"SIMPLE_AUTO_NAMING\": False,\n    \"WORDS_SEPARATOR\": \"_\",\n    \"MODEL_NAMES_MONOLITHIC\": True,\n    \"DJANGO_ADMIN_LIKE_NAMES\": False,\n}\n```\n\n---\n\n**`SIMPLE_AUTO_NAMING`**: if set to true all other settings are ignored, name and url are composed from view name, `CamelCase` turned to `snake_case`:\n\n```\n\"test_app.views.SimpleCbv\" -> [\"/test_app/simple_cbv/\", \"test_app:simple_cbv\"],\n\"test_app.views.simple_fbv\" -> [\"/test_app/simple_fbv/\", \"test_app:simple_fbv\"],\n```\n\n---\n\n**`WORDS_SEPARATOR`**: a separator char that'll be used during camel to snake case conversion in view names:\n\n```python\n@router.path()\nclass EmployeeList(ListView):\n    model = Employee\n```\n\n`WORDS_SEPARATOR = \"_\"`\n\n`path('employee_list/', EmployeeList.as_view(), name=`**_`'employee_list'`_**`)`\n\n`WORDS_SEPARATOR = \"-\"`\n\n`path('employee_list/', EmployeeList.as_view(), name=`**_`'employee-list'`_**`)`\n\n---\n\n`MODEL_NAMES_MONOLITHIC`: only works when `MODEL_BASED_PATTERNS = True`, control whether separator is used for model names consisting of multiple words\n\n```python\n@router.path()\nclass EmployeeAddressList(ListView):\n    model = EmployeeAddress\n```\n\n`MODEL_NAMES_MONOLITHIC = True`\n\n`path('employeeaddress/', EmployeesAddressList.as_view(), name='employeeaddress_list')`\n\n`MODEL_NAMES_MONOLITHIC = False`\n\n`path('employee_address/', EmployeesAddressList.as_view(), name='employee_address_list')`\n\n---\n\n**`DJANGO_ADMIN_LIKE_NAMES`**: if true uses strings like in Django admin for view names and paths\n\n-   `ListView: changelist`\n-   `UpdateView: change`\n-   `CreateView: add`\n\n```python\n@router.path()\nclass EmployeeCreate(CreateView):\n    model = Employee\n```\n\n`path('employee/add/', EmployeeCreate.as_view(), name='employee_add')`\n\n# Management commands\n\n`python manage.py router_list` - to see list of all available routes created by the router.\n\n`python manage.py router_urls` - to see list of all available routes as if they're in `urls.py`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Real-Gecko/django-router",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-router",
    "package_url": "https://pypi.org/project/django-router/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-router/",
    "project_urls": {
      "Homepage": "https://github.com/Real-Gecko/django-router"
    },
    "release_url": "https://pypi.org/project/django-router/1.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Use simple decorators on views instead of maintaining lengthy urls.py",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15576801,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a36ca214450c1d25cb0b1f9e79d11674838540fd31b2808f9be02dfd3c6625d8",
        "md5": "c2618f6d6067da35799236a641535911",
        "sha256": "4d3026d8d3ae609dbba850909652f23d5979f9535e9e768f82fe00d410dc5039"
      },
      "downloads": -1,
      "filename": "django_router-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c2618f6d6067da35799236a641535911",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8494,
      "upload_time": "2022-10-27T17:43:53",
      "upload_time_iso_8601": "2022-10-27T17:43:53.352605Z",
      "url": "https://files.pythonhosted.org/packages/a3/6c/a214450c1d25cb0b1f9e79d11674838540fd31b2808f9be02dfd3c6625d8/django_router-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab4568048cea5c59bb542286e9bf15cb42cf68867444d0d80602f7a19ef1d24f",
        "md5": "296cc0fc3aa3013ac8efd1bb90975caa",
        "sha256": "e3f4da2f158010efe9ddd817f10b347662255b472f2507e6fbcbae232601c1a7"
      },
      "downloads": -1,
      "filename": "django_router-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "296cc0fc3aa3013ac8efd1bb90975caa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7580,
      "upload_time": "2022-10-27T17:43:55",
      "upload_time_iso_8601": "2022-10-27T17:43:55.161568Z",
      "url": "https://files.pythonhosted.org/packages/ab/45/68048cea5c59bb542286e9bf15cb42cf68867444d0d80602f7a19ef1d24f/django_router-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}