{
  "info": {
    "author": "Real-Gecko",
    "author_email": "alexandrbezenkov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django Router\n\nMaintaining Django's `urls.py` can become really annoying when you have a lot of 'em(dozens in single file). Other frameworks deal with the problem in more elegant ways, like Flask's `@app.route` decorator. This project brings same concept to Django by adding `@router` decorator functions. No more need to deal with lengthy `urls.py`.\n\n# What you get\n\nJust use decorator in your app's `views.py`. Django Router uses **autodiscovery** feature, so make sure views you're interested in are either inside `views.py` or get imported into it.\n\n```python\n# employees/views.py\nfrom django_router import router\nfrom employees.models import Employee\nfrom django.shortcuts import render\nfrom django.views.generic.edit import CreateView\n\n# Works with function based views\n# Resulting url will be `/employees/employee_list/`\n@router.path()\ndef employee_list(request):\n    employees = Employee.objects.all()\n    return render(request, 'employee_list.html', {'employees':employees})\n\n# As well as with class based views\n# Resulting url will be `/employees/employee_create/`\n@router.path()\ndef EmployeeCreate(CreateView):\n    model = Employee\n\n```\n\nAnd that's it!\n\n# How it works\n\nRouter has two functions `path` and `re_path` which work exactly the same as `django.urls` functions you already know. Except that you don't even need to specify **url** or **name**.\n\nIf no name is provided function name will be used, camel case will be turned into snake case:\n\n```python\n# same as path('import_employees/', import_employees, name='import_employees')\n@router.path()\ndef import_employees(request):\n    ...\n\n# same as path('import_employees/', ImportEmployees.as_view(), name='import_employees')\n@router.path()\nclass ImportEmployees(View):\n    ...\n```\n\nOf course you can specify path and name as usual:\n\n```python\n@router.path('im_emp/', name='employees_import')\ndef import_employees(request):\n    ...\n```\n\n# Settings\n\nSettings for the project are mostly to control autonaming behavior.\nThese are default settings for the project\n\n```python\nROUTER_SETTINGS={\n    \"NAME_WORDS_SEPARATOR\": \"_\"\n    \"TRY_USE_MODEL_NAMES\": True\n    \"MODEL_NAMES_MONOLITHIC\": True\n}\n```\n\n---\n\n**`NAME_WORDS_SEPARATOR`**: a separator char that'll be used during camel to snake case conversion in view names:\n\n```python\n@router.path()\nclass EmployeeList(ListView):\n    model = Employee\n```\n\n`NAME_WORDS_SEPARATOR = \"_\"`\n\n`path('employee_list/', EmployeeList.as_view(), name=`**_`'employee_list'`_**`)`\n\n`NAME_WORDS_SEPARATOR = \"-\"`\n\n`path('employee_list/', EmployeeList.as_view(), name=`**_`'employee-list'`_**`)`\n\n---\n\n**`TRY_USE_MODEL_NAMES`**: try to use model name for view naming within CBV while forming URLs\n\n```python\n@router.path()\nclass Employees(ListView):\n    model = Employee\n```\n\n`TRY_USE_MODEL_NAMES = True`\n\n`path('employee_list/', Employees.as_view(), name='employee_list')`\n\n`TRY_USE_MODEL_NAMES = False`\n\n`path('employees/', Employees.as_view(), name='employees')`\n\n---\n\n`MODEL_NAMES_MONOLITHIC`: only works when `TRY_USE_MODEL_NAMES = True`, control whether separator is used for model names consisting of multiple words\n\n```python\n@router.path()\nclass EmployeeAddressList(ListView):\n    model = EmployeeAddress\n```\n\n`MODEL_NAMES_MONOLITHIC = True`\n\n`path('employeeaddress/', EmployeesAddressList.as_view(), name='employeeaddress_list')`\n\n`MODEL_NAMES_MONOLITHIC` = False\n\n`path('employee_address/', EmployeesAddressList.as_view(), name='employee_address_list')`\n\n# Management command\n\nYou can run `python manage.py routerlist` to see list of all available routes created by the router.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Real-Gecko/django-router",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-router",
    "package_url": "https://pypi.org/project/django-router/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-router/",
    "project_urls": {
      "Homepage": "https://github.com/Real-Gecko/django-router"
    },
    "release_url": "https://pypi.org/project/django-router/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.4,<4.0",
    "summary": "Use simple decorators on views instead of maintaining lengthy urls.py",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15576801,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3bf574208463e5ddc9445a659433fef7ee38592110c55824225f35fdf6c9ce7",
        "md5": "e4f07c97c0bea8faa07dcc9ab806aa39",
        "sha256": "a1bf7e0c9a190a8295f8c2ece1fa60dfcbac514fa66c2f4ddd835c7f1a5f1df1"
      },
      "downloads": -1,
      "filename": "django_router-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e4f07c97c0bea8faa07dcc9ab806aa39",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4,<4.0",
      "size": 6359,
      "upload_time": "2022-10-14T11:47:46",
      "upload_time_iso_8601": "2022-10-14T11:47:46.076471Z",
      "url": "https://files.pythonhosted.org/packages/a3/bf/574208463e5ddc9445a659433fef7ee38592110c55824225f35fdf6c9ce7/django_router-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dad4f0cd147a3c443373654cecca15db411810f2bb0657b0fabbc7ba2aca7e28",
        "md5": "828dd05d3a1210686f7c1c04820d9660",
        "sha256": "76702f6e9625100b5a8e6fb4cdbf868d4ec100be0ff6cd0abaf5b6e03d380db2"
      },
      "downloads": -1,
      "filename": "django_router-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "828dd05d3a1210686f7c1c04820d9660",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4,<4.0",
      "size": 5389,
      "upload_time": "2022-10-14T11:47:47",
      "upload_time_iso_8601": "2022-10-14T11:47:47.520541Z",
      "url": "https://files.pythonhosted.org/packages/da/d4/f0cd147a3c443373654cecca15db411810f2bb0657b0fabbc7ba2aca7e28/django_router-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}