{
  "info": {
    "author": "lorry_rui",
    "author_email": "lrui@logitech.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Copyright (c) 2021 lorry_rui , Newark ,USA  \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute,  and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\n*for manufacture test sweep tone sound file ,which also do combined some package from opensource.  \naudio file analyze USE only  @  Lorry RUi  \n\nMain feature for this package\t\n============================  \n\n\t1) Can Open write sound file. like WAV/MP3 file read/write (like SOUNDFILE)\n\t2) Can play(can set master speaker volume) and recording throgh microphone, which can point the \n\t\tspecific mic. (Like Sounddevice)\t\n\t3) Can get single tone power and THD+N  \n\t4) can get sweep tone FR , THD, rub/buzz\n\t5) can  measure sound Spectrogram (For ML or noise study) (Like librosa)\n\n____________________________________\t\n\n\nMail to: lorryruizhihua@gmail.com  \n\n         lrui@logitech.com\n\nhttps://pypi.org/project/LvAut  \n\nhttps://github.com/Lorrytoolcenter/LvAut  \n\n\t|tests| |coverage| |docs| |python-versions| |license|  \n\n\nThe Python package handles all kind of audio files  \n-----------------\n\nsample code:\n============== \n.. code:: python    \n\n\t   import LvAut.lvaut_THD as AUT \n\t   filename='yourfile.wav' \n\t   signal, sample_rate, channels=AUT.load(filename) \n\nchange master speaker volume \n-----------------\n.. code:: python    \n\n\t\timport LvAut.lvaut_THD as AUT  \n\t\tAUT.setspeakervolume(40)  ## set master speaker volume from 0 to 100\n\n\nplay master speaker  \n-----------------\n.. code:: python   \n\n\t\timport LvAut.lvaut_THD as AUT\n\t\tAUT.playsoundWin('yourfile.wav')\n\n\nlist all speaker and mics devices  \n-----------------\n.. code:: python \n\n\t\timport LvAut1.device as sd\n\t\tprint(sd.query_devices())\n\n\n\nrecording master microphone(you can choose specific device)  \n-----------------\n.. code:: python    \n\n\t\timport LvAut.device as sd\n\t\timport LvAut.lvaut_THD as AUT\n\t\tfs = 44100  # Sample rate\n\t\tseconds = 5  # Duration of recording\n\t\tmyrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=1)  # using default mic\n\t\t#myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=1, device=\"Microphone (Logitech Webcam C930e), Windows DirectSound\")\n\t\tsd.wait()  # Wait until recording is finished\n\t\tAUT.write(\"test.wav\",myrecording,fs)\n\n\nanalyze_sweep tone\n-----------------\n\n.. code-block:: python  \n\n\t\timport LvAut.lvaut_THD as AUT  \n\t\tfilename='Device_Mic_THD_R_3.wav'  \n\t\ttrigeFrequncy=400  ## this need sweep from high(above 400) to low sweep tone  \n\t\tstopananlysis=100   ## stop analyze_sweep  \n\t\tchannaelselect=1 ### if recording is dual channel ,leftchannel=1, rightchannel=2, otherwise no need to define  \n\t\tfreq,thdh,thd_N,power,Freq_THD,thd_data,Freq_Power,PowerS,RubBuzz_data=AUT.analyze_sweep(filename, trigeFrequncy,stopananlysis,channaelselect) \n\t\tprint('FFT Frequency:   %.1f Hz' % freq)  \n\t\tprint(\"Sweep Max THD:   %.4f%% \" %thdh)  \n\t\tprint(\"Sweep Max THD+N: %.4f%%      Note, this is single tone use only \" %thd_N)  \n\t\tprint(\"spectrum Max Power:       %.2fdB \" %power)     \n\n\n\n\noutput explain which analyze_sweep tone\n----------------------------------    \n\n\t\t*1)freq  means: single tone , measured frequency  \n\t\t*1.1)thd_N   means: single Max THD+N   \t\n\t\t*2)thdh   means: Sweep Max THD    \n\t\t*3)Freq_THD, measure THD's frequency   \n\t\t*4)thd_data, measure THD's data   \n\t\t*5)Freq_Power,measure Power's frequency  \n\t\t*6)PowerS,  measure Power's data  \n\t\t*7)RubBuzz_data    measure RB's data    \n\n\n\n\nanalyze_sweep tone out chart setting\n-----------------\n.. code-block:: python  \n\n\t\timport LvAut.lvaut_THD as AUT  \n\t\tfilename='Device_Mic_THD_R_3.wav'  \n\t\ttrigeFrequncy=400  ## this need sweep from high(above 400) to low sweep tone  \n\t\tstopananlysis=100   ## stop analyze_sweep  \n\t\tchannaelselect=1 ### if recording is dual channel ,leftchannel=1, rightchannel=2, otherwise no need to define  \n\t\tfreq,thdh,thd_N,power,Freq_THD,thd_data,Freq_Power,PowerS,RubBuzz_data=AUT.analyze_sweep(filename, trigeFrequncy,stopananlysis,channaelselect) \t\t\n\t\tAUT.diplaychart(Freq_THD,thd_data,Freq_Power,PowerS,RubBuzz_data,chart_name=\"save_picture_name\",channel= channaelselect)#display chart, pleae note : this function need import matplotlib\n\n\n\nanalyze sound file spectrogram\n-----------------\n\n.. code-block:: python  \n\n\t\timport LvAut.lvaut_THD as AUT\n\t\timport LvAut.lvspectrum as lvs\n\t\timport numpy as np\n\n\t\tfilename='your soundfile.wav'\n\t\ty, sample_rate, channels=AUT.load(filename)\n\n\t\tS_scale = lvs.stft(y, n_fft=2048, hop_length=512)\n\t\tY_scale = np.abs(S_scale)\n\t\tY_log_scale = lvs.power_to_db(Y_scale)\n\t\tprint(Y_log_scale)\n\t\t## print out all data  \t\n\n\n\n\nanalyze sound file spectrogram(which need install matplotlib)\n-----------------\n\n.. code-block:: python  \n\n\t\timport LvAut.lvaut_THD as AUT\n\t\timport LvAut.lvspectrum as lvs\n\t\timport LvAut.lvdisplay as lvd\n\n\t\timport matplotlib.pyplot as plt\n\t\timport numpy as np\n\n\t\tfilename='your sound file.wav'\n\n\t\tdef plot_spectrogram(Y, sr, hop_length, y_axis=\"linear\"):\n\t\t\tplt.figure(figsize=(16, 10))\n\t\t\tlvd.specshow(Y,\n\t\t\t\t\t\t\t\t\t sr=sr,\n\t\t\t\t\t\t\t\t\t hop_length=hop_length,\n\t\t\t\t\t\t\t\t\t x_axis=\"time\",\n\t\t\t\t\t\t\t\t\t y_axis=y_axis)\n\t\t\tplt.colorbar(format=\"%+2.f\")\n\t\t\tplt.show()\n\n\n\n\t\ty, sample_rate, channels=AUT.load(filename)\n\n\t\tS_scale = lvs.stft(y, n_fft=1024, hop_length=512)\n\t\tY_scale = np.abs(S_scale)\n\t\tY_log_scale = lvs.power_to_db(Y_scale)\n\t\t#print(Y_log_scale)\n\t\tplot_spectrogram(Y_log_scale, sample_rate, 512)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Lorrytoolcenter/LvAut",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LvAut",
    "package_url": "https://pypi.org/project/LvAut/",
    "platform": "",
    "project_url": "https://pypi.org/project/LvAut/",
    "project_urls": {
      "Homepage": "https://github.com/Lorrytoolcenter/LvAut"
    },
    "release_url": "https://pypi.org/project/LvAut/2021.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Audio sound file testing module",
    "version": "2021.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11247665,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "443bdf5cbd715c8180f6a6c0b44ea88ccb9537c007c5a639193cc5428e40d489",
        "md5": "873151b26ece77677bd611b50da5ca2b",
        "sha256": "8d78ab3c386e237d67ba0626088d5a481aaba4b784d23c00a4b13ca71c16f804"
      },
      "downloads": -1,
      "filename": "LvAut-2021.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "873151b26ece77677bd611b50da5ca2b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 1477116,
      "upload_time": "2021-08-01T23:31:32",
      "upload_time_iso_8601": "2021-08-01T23:31:32.230231Z",
      "url": "https://files.pythonhosted.org/packages/44/3b/df5cbd715c8180f6a6c0b44ea88ccb9537c007c5a639193cc5428e40d489/LvAut-2021.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3060079b452ec53272ed773a73d6787357b1347c812372c715d5f2486c050cb",
        "md5": "aedf58d1bf4c8ba337184eaec480533b",
        "sha256": "aca195aa5778938c0f895715599eb2dd4b7cd90bb98cb11d5616c9915e439040"
      },
      "downloads": -1,
      "filename": "LvAut-2021.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "aedf58d1bf4c8ba337184eaec480533b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 1401328,
      "upload_time": "2021-08-01T23:31:51",
      "upload_time_iso_8601": "2021-08-01T23:31:51.431222Z",
      "url": "https://files.pythonhosted.org/packages/f3/06/0079b452ec53272ed773a73d6787357b1347c812372c715d5f2486c050cb/LvAut-2021.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}