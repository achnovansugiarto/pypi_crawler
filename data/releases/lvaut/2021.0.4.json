{
  "info": {
    "author": "lorry_rui",
    "author_email": "lrui@logitech.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Copyright (c) 2021 lorry_rui  \n\n//////////usage:///////////////// \n\nfor test sweep tone WAV file only  \n\nVC_tde USE only  @ logitech , Lorry RUi  \n\nhttps://pypi.org/project/LvAut  \n\nhttps://github.com/Lorrytoolcenter/LvAut  \n\n\nsample code:  \n\n\"\"\"  \nCreated on newark, logitech  \nlorry rui 12/20/2020  \nplease use sweep tone from High to low  \n\nbefore uising: please install lib for AUT_THD libary in LvAut // prefer to install robotRun which have python.3.6  \npip install matplotlib  \npip install sounddevice  \npip install playsound  \n\n\"\"\"  \n\n##### Package necessary #####  \nimport sys,time  \nimport threading  \nimport numpy as np  \nimport AUT.AUT_THD as AUT  \nfrom matplotlib import pyplot as plt\nfrom playsound import playsound\n\nimport sounddevice as sd\n\n#print(sd.query_devices())  ### this one can print all audio device\n\nchannaelselect=1 ### if recording is dual channel ,leftchannel=1, rightchannel=2, otherwise no need to define\n\ntrigeFrequncy=400\nstopananlysis=100\n\nTHDtestrangeL=200    ## want to check THD range\nTHDtestrangeH=10000\nTHD_limit_low=0\nTHD_limit_up=10\n\nPowertestrangeL=200\nPowertestrangeH=2000\nPower_limit_low=-70\nPower_limit_up=-40\n\n\n\noutfilename=\"audio.wav\"   ### this one for Wav file to \n\n\n\nfrom scipy.io.wavfile import write\n\ndef checkdata(freq,data,start_Freq,end_Freq,lowlimit,uplimit):\n    output1=[]\n    output2=[]\n\n    for i,ele in enumerate(freq):\n        if ele >start_Freq  and  ele < end_Freq:\n\n            output1.append(ele)\n            output2.append(data[i])\n    maxval=max(output2)\n    minval=min(output2)\n    if maxval <lowlimit or  maxval > uplimit:\n        result=\"fail\"\n        return output1,output2,maxval,minval,result\n    else:\n        result=\"pass\"\n        return output1,output2,maxval,minval,result\n\n\n\n\ndef play():\n    playsound('SweepTone SPKR FR THD_16000Hz_50Hz_-3dBFS_5s.wav')\n##    sd.default.samplerate = 44100\n##    #sd.default.device = 'digital output'\n##    data, fs = sf.read(\"1k.wav\", dtype='float32')\n##    sd.play(data, fs, device=\"Speakers (Logitech G933 Gaming , MME\")\n##    \ndef record():\n    fs = 44100  # Sample rate\n    seconds = 5  # Duration of recording\n\n    myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=1, device=\"Microphone (Logitech Webcam C93, MME\")\n    sd.wait()  # Wait until recording is finished\n    write(outfilename, fs, myrecording)  # Save as WAV file \n\ndef job():\n    t1 = threading.Thread(target = record)  # \n    t1.start()   #\n    #time.sleep(1)\n    play()\n    t1.join()\n    time.sleep(2)# \n\nif __name__ == \"__main__\":\n    print(\"Start preprocessing\")\n    #job()\n\n    #files = sys.argv[1:]\n\n\n\n    if outfilename:\n\n        try:\n            freq,thdh,thd_N,power,Freq_THD,thd_data,Freq_Power,PowerS=AUT.analyze_channels(outfilename, trigeFrequncy,stopananlysis,channaelselect)\n            outF1,outTHDalldata,maxval,minval,THDresult=checkdata(Freq_THD,thd_data,THDtestrangeL,THDtestrangeH,THD_limit_low,THD_limit_up)\n            outF2,outPower_alldata,maxval2,minval2,Powerresult=checkdata(Freq_Power,PowerS,PowertestrangeL,PowertestrangeH,Power_limit_low,Power_limit_up)\n\n\n\n            print('FFT Frequency:   %.1f Hz' % freq)\n            print(\"Sweep Max THD:   %.4f%% \" %thdh)\n            print(\"Sweep Max THD+N: %.4f%%      Note, this is single tone use only \" %thd_N)\n            print(\"Max Power:       %.2fdB \" %power)\n            print(\"Range Max THD:    {} %   which check from {} Hz to {} Hz as limit from {}% to {}% \".format(maxval, THDtestrangeL, THDtestrangeH,THD_limit_low,THD_limit_up))\n            print(\"Range Power:  {} dB to {}dB   which check from {} Hz to {} Hz as limit from {}dB to {}dB \".format( round(maxval2),round(minval2),PowertestrangeL, PowertestrangeH,Power_limit_low,Power_limit_up))\n            print(\"THD: {} \".format(THDresult))\n            print(\"Range Power:{} \".format(Powerresult))\n\n\n        except Exception as e:\n            print('Couldn\\'t analyze \"' + filename + '\"')\n            print(e)\n        print()\n    else:\n\n        sys.exit(\"You must provide at least one file to analyze\")\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Lorrytoolcenter/LvAut",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LvAut",
    "package_url": "https://pypi.org/project/LvAut/",
    "platform": "",
    "project_url": "https://pypi.org/project/LvAut/",
    "project_urls": {
      "Homepage": "https://github.com/Lorrytoolcenter/LvAut"
    },
    "release_url": "https://pypi.org/project/LvAut/2021.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Audio wav file test module",
    "version": "2021.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11247665,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee6c4ca38dbb7e50f5201e7502b9ccbac00fb6feaeb563cbe3e87136c7e6cde3",
        "md5": "c3fedf8ed7ee532c267feffefc44efe9",
        "sha256": "40982dfb9d9e787a2802b9b38e5c1fc745d92ce36eb03238f52e8847a3bfa178"
      },
      "downloads": -1,
      "filename": "LvAut-2021.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c3fedf8ed7ee532c267feffefc44efe9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 96232,
      "upload_time": "2021-07-28T19:55:19",
      "upload_time_iso_8601": "2021-07-28T19:55:19.852290Z",
      "url": "https://files.pythonhosted.org/packages/ee/6c/4ca38dbb7e50f5201e7502b9ccbac00fb6feaeb563cbe3e87136c7e6cde3/LvAut-2021.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7fd091269cb671d776d4140fbea8e0c2244dc7894f89db8b25661e562ad43b6f",
        "md5": "b5e779c0e920928aef0335dada305d7f",
        "sha256": "b500a95eae15d4015348e923a6f03740d20e2f6fc0fe00d1b7479d2dfdb264c9"
      },
      "downloads": -1,
      "filename": "LvAut-2021.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "b5e779c0e920928aef0335dada305d7f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 96657,
      "upload_time": "2021-07-28T19:55:24",
      "upload_time_iso_8601": "2021-07-28T19:55:24.215016Z",
      "url": "https://files.pythonhosted.org/packages/7f/d0/91269cb671d776d4140fbea8e0c2244dc7894f89db8b25661e562ad43b6f/LvAut-2021.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}