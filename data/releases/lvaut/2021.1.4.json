{
  "info": {
    "author": "lorry_rui",
    "author_email": "lrui@logitech.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Copyright (c) 2021 lorry_rui , Newark ,USA  \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute,  and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\n*for manufacture test sweep tone sound file ,which also do combined some package from opensource.  \naudio file analyze USE only  @  Lorry RUi  \n\nMain feature for this package\t\n============================  \n\n\t1) Can Open write sound file. like WAV/MP3 file read/write ( SOUNDFILE)\n\t2) Can play(can set master speaker volume) and recording through microphone, which can point the \n\t\tspecific Mic. ( Sounddevice)\t\n\t3) Can get single tone power and THD+N  \n\t4) can get sweep tone FR , THD, rub/buzz\n\t5) can  measure sound Spectrogram (For ML or noise study) ( librosa)\n\n____________________________________\t\n\n\nMail to: :lorryruizhihua@gmail.com  \n\n         :lrui@logitech.com\n\nhttps://pypi.org/project/LvAut  \n\nhttps://github.com/Lorrytoolcenter/LvAut  \n\n\t|tests| |coverage| |docs| |python-versions| |license|  \n\n\nThe Python package handles all kind of audio files  \n-----------------\n\nsample code:\n============== \n.. code:: python    \n\n\t   import LvAut.lvaut_THD as AUT \n\t   filename='yourfile.wav' \n\t   signal, sample_rate, channels=AUT.load(filename) \n\nchange master speaker volume (from keyboard level)\n-----------------\n.. code:: python    \n\n\t\timport LvAut.lvaut_THD as AUT  \n\t\tAUT.setspeakervolume(40)  ## set master speaker volume from 0 to 100\n\n\nchange current speaker volume and current level (from MS driver level) \n----------------------------------\n.. code:: python    \n\n\t\timport LvAut.lvaut_THD as AUT  \n\t\ta=AUT.speaker_volume(50)## set current speaker volume from 0 to 100,return reading after set\n\t\tb=AUT.mic_level(50)## set current microphone level from 0to 100,return reading after set\n\t\tprint(a,b)\n\n\n\n\nplay master speaker  \n-----------------\n.. code:: python   \n\n\t\timport LvAut.lvaut_THD as AUT\n\t\tAUT.playsoundWin('yourfile.wav')\n\n\nlist all speaker and mics devices  \n-----------------\n.. code:: python \n\n\t\timport LvAut.device as sd\n\t\tprint(sd.query_devices())\n\n\n\nrecording master microphone(you can choose specific device)  \n-----------------\n.. code:: python    \n\n\t\timport LvAut.device as sd\n\t\timport LvAut.lvaut_THD as AUT\n\t\tfs = 44100  # Sample rate\n\t\tseconds = 5  # Duration of recording\n\t\tmyrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=1)  # using default mic\n\t\t#myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=1, device=\"Microphone (Logitech Webcam C930e), Windows DirectSound\")\n\t\tsd.wait()  # Wait until recording is finished\n\t\tAUT.write(\"test.wav\",myrecording,fs)\n\n\nrecording and play simultaneously\n-----------------\n.. code:: python    \n\n\t\timport LvAut.lvaut_THD as AUT\n\t\timport LvAut.soundload as sf\n\t\timport LvAut.device as sd\n\t\tdata, fs = sf.read(your sound file, frames=-1, start=None, stop=None, dtype=None, always_2d=False,\n\t\t\t\t\t\t   fill_value=None, out=None, samplerate=None, channels=None,\n\t\t\t\t\t\t   format=None, subtype=None, endian=None, closefd=True)\n\t\tmyrecording = sd.playrec(data, samplerate=fs, channels=1, dtype=None,\n\t\t\t\t\t\t\t\t out=None, input_mapping=None, output_mapping=None, blocking=False,\n\t\t\t\t\t\t\t\t device=device) # if None , will use default device\n\t\tsd.wait()  # Wait until recording is finished\n\t\tAUT.write(outfile,myrecording,fs,'PCM_32') ## 'PCM_16','PCM_32', 'FLOAT', 'DOUBLE'\n\n\nanalyze_sweep tone\n-----------------\n\n.. code-block:: python  \n\n\t\timport LvAut.lvaut_THD as AUT  \n\t\tfilename='Device_Mic_THD_R_3.wav'  \n\t\ttrigeFrequncy=400  ## this need sweep from high(above 400) to low sweep tone  \n\t\tstopananlysis=100   ## stop analyze_sweep  \n\t\tchannaelselect=1 ### if recording is dual channel ,leftchannel=1, rightchannel=2, otherwise no need to define  \n\t\tfreq,thdh,thd_N,power,Freq_THD,thd_data,Freq_Power,PowerS,RubBuzz_data=AUT.analyze_sweep(filename, trigeFrequncy,stopananlysis,channaelselect) \n\t\tprint('FFT Frequency:   %.1f Hz' % freq)  \n\t\tprint(\"Sweep Max THD:   %.4f%% \" %thdh)  \n\t\tprint(\"Sweep Max THD+N: %.4f%%      Note, this is single tone use only \" %thd_N)  \n\t\tprint(\"spectrum Max Power:       %.2fdB \" %power)     \n\n\n\n\noutput explain which analyze_sweep tone\n----------------------------------    \n\n\t\t*1)freq  means: single tone , measured frequency  \n\t\t*1.1)thd_N   means: single Max THD+N   \t\n\t\t*2)thdh   means: Sweep Max THD    \n\t\t*3)Freq_THD, measure THD's frequency   \n\t\t*4)thd_data, measure THD's data   \n\t\t*5)Freq_Power,measure Power's frequency  \n\t\t*6)PowerS,  measure Power's data  \n\t\t*7)RubBuzz_data    measure RB's data    \n\n\n\n.. image:: images/wav_channel_1_THD_out.png\n   :width: 600\n\n\n\n\nanalyze_sweep tone out chart setting\n-----------------\n.. code-block:: python  \n\n\t\timport LvAut.lvaut_THD as AUT  \n\t\tfilename='Device_Mic_THD_R_3.wav'  \n\t\ttrigeFrequncy=400  ## this need sweep from high(above 400) to low sweep tone  \n\t\tstopananlysis=100   ## stop analyze_sweep  \n\t\tchannaelselect=1 ### if recording is dual channel ,leftchannel=1, rightchannel=2, otherwise no need to define  \n\t\tfreq,thdh,thd_N,power,Freq_THD,thd_data,Freq_Power,PowerS,RubBuzz_data=AUT.analyze_sweep(filename, trigeFrequncy,stopananlysis,channaelselect) \t\t\n\t\tAUT.diplaychart(Freq_THD,thd_data,Freq_Power,PowerS,RubBuzz_data,chart_name=\"save_picture_name\",channel= channaelselect)#display chart, pleae note : this function need import matplotlib\n\n\n\nanalyze sound file spectrogram : Convert a power spectrogram (amplitude squared) to decibel (dB) units This computes the scaling ``20 * log10(S / ref)`` in a numerically\n-----------------\n\n.. code-block:: python  \n\n\t\timport LvAut.lvaut_THD as AUT\n\t\timport LvAut.lvspectrum as lvs\n\t\timport numpy as np\n\n\t\tfilename='your soundfile.wav'\n\t\ty, sample_rate, channels=AUT.load(filename)\n\n\t\tS_scale = lvs.stft(y, n_fft=2048, hop_length=512)\n\t\tY_scale = np.abs(S_scale)\n\t\tY_log_scale = lvs.amplitude_to_db(Y_scale,ref=np.max)\n\t\tprint(Y_log_scale)\n\t\t## print out all data  \t\n\n\n\n\nanalyze sound file spectrogram(which need install matplotlib)#Compute dB relative to peak power\n-----------------\n\n.. code-block:: python  \n\n\t\timport LvAut.lvaut_THD as AUT\n\t\timport LvAut.lvspectrum as lvs\n\t\timport LvAut.lvdisplay as lvd\n\n\t\timport matplotlib.pyplot as plt\n\t\timport numpy as np\n\n\t\tfilename='your sound file.wav'\n\n\t\tdef plot_spectrogram(Y, sr, hop_length, y_axis=\"linear\"):\n\t\t\tplt.figure(figsize=(16, 10))\n\t\t\tlvd.specshow(Y,\n\t\t\t\t\t\t\t\t\t sr=sr,\n\t\t\t\t\t\t\t\t\t hop_length=hop_length,\n\t\t\t\t\t\t\t\t\t x_axis=\"time\",\n\t\t\t\t\t\t\t\t\t y_axis=y_axis)\n\t\t\tplt.colorbar(format=\"%+2.f\")\n\t\t\tplt.show()\n\n\n\n\t\ty, sample_rate, channels=AUT.load(filename)\n\n\t\tS_scale = lvs.stft(y, n_fft=1024, hop_length=512)\n\t\tY_scale = np.abs(S_scale)\n\t\tY_log_scale = lvs.amplitude_to_db(Y_scale,ref=np.max)\n\t\tplot_spectrogram(Y_log_scale, sample_rate, 512)\n\n\n\n\n\n.. image:: images/tonal_test.png\n   :width: 600\n\n.. image:: images/THD_tools.jpg\n   :width: 600\n\ngithub sample code explain  https://github.com/Lorrytoolcenter/LvAut  \n============================  \n\n\t| 1) **masters_speaker_volume.py**  : test master volume  \n\t| 1.1) *mic_speaker_level.py*  : sample for changing current speaker volume and current level  \n\t| 2) *play_sound.py* : test play speaker  \n\t| 3) *record_sound.py* : test recording   \n\t| 4) *plot_spectrogram.py* plot spectrogram chart  \n\t| 5) *spectrumg_data.py*    : pull out data  \n\t| 6) *SingleTone_thd.py*  : play single and get THD  \n\t| 7) *sweep_thd.py*       : Play sweep tone and get THD by your input traget tone\n\t| 8) :ref:`<play_record.py>`       : recording and play simultaneously  \n\t| 9) *wav_file_test_sample.py*       : analyze Sweep WAV file to get FR and THD  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Lorrytoolcenter/LvAut",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LvAut",
    "package_url": "https://pypi.org/project/LvAut/",
    "platform": "",
    "project_url": "https://pypi.org/project/LvAut/",
    "project_urls": {
      "Homepage": "https://github.com/Lorrytoolcenter/LvAut"
    },
    "release_url": "https://pypi.org/project/LvAut/2021.1.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Audio sound file testing/analyzes module",
    "version": "2021.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11247665,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3066cf2629279bf957b4781ed671dbfeb89111824aab1fa3587f6c154b0389b",
        "md5": "797fc1aa237b87c1162f973c23b65562",
        "sha256": "ba6eb1f5ec208fce8ac7cfc36bdaf8f7a6eb249055b1ab2fc7cc11a2faeb160c"
      },
      "downloads": -1,
      "filename": "LvAut-2021.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "797fc1aa237b87c1162f973c23b65562",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 1585691,
      "upload_time": "2021-08-14T00:17:33",
      "upload_time_iso_8601": "2021-08-14T00:17:33.060538Z",
      "url": "https://files.pythonhosted.org/packages/e3/06/6cf2629279bf957b4781ed671dbfeb89111824aab1fa3587f6c154b0389b/LvAut-2021.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a4731126d524d3ac3ab003c489f0aa4db72c06f6fc96a31a5c8cc7779968ce6",
        "md5": "36a691100f8abd876a2af7eec2a2e7ed",
        "sha256": "753ea17402054cbc75f8465f30e39ac7e779fa66d88578cee5f074a6855befa4"
      },
      "downloads": -1,
      "filename": "LvAut-2021.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "36a691100f8abd876a2af7eec2a2e7ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 1414119,
      "upload_time": "2021-08-14T00:17:36",
      "upload_time_iso_8601": "2021-08-14T00:17:36.864750Z",
      "url": "https://files.pythonhosted.org/packages/6a/47/31126d524d3ac3ab003c489f0aa4db72c06f6fc96a31a5c8cc7779968ce6/LvAut-2021.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}