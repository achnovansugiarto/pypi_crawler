{
  "info": {
    "author": "lorry_rui",
    "author_email": "lrui@logitech.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Copyright (c) 2021 lorry_rui  \n\n//////////usage:///////////////// \n\nfor test sweep tone WAV file only  \n\nVC_tde USE only  @ logitech , Lorry RUi  \n\nhttps://pypi.org/project/LvAut  \n\nhttps://github.com/Lorrytoolcenter/LvAut  \n|tests| |coverage| |docs| |python-versions| |license|\n\nThe Python package **audio_wav** handles all kind of audio files\n\n\n\nsample code:  \n.. code-block:: python\n\t\"\"\"\n\tCreated on newark, USA\n\tlorry rui 12/20/2020\n\tplease use sweep tone from High to low\n\n\tbefore uising: please install lib for lvaut_THD libary  \n\tpip install matplotlib\n\n\n\n\t\"\"\"\n\n\t##### Package necessary #####\n\timport sys,time\n\timport numpy as np\n\n\timport lvaut_THD as AUT\n\tfrom matplotlib import pyplot as plt\n\n\n\n\tchannaelselect=1 ### if recording is dual channel ,leftchannel=1, rightchannel=2, otherwise no need to define\n\n\ttrigeFrequncy=400\n\tstopananlysis=100\n\n\tTHDtestrangeL=200    ## want to check THD range\n\tTHDtestrangeH=10000\n\tTHD_limit_low=0\n\tTHD_limit_up=10\n\n\tPowertestrangeL=200\n\tPowertestrangeH=4500\n\tPower_limit_low=-70\n\tPower_limit_up=-40\n\n\n\n\toutfilename='your_wav_file.wav'### this one for Wav file want to analyze\n\n\n\tdef checkdata(freq,data,start_Freq,end_Freq,lowlimit,uplimit):\n\t\toutput1=[]\n\t\toutput2=[]\n\n\t\tfor i,ele in enumerate(freq):\n\t\t\tif ele >start_Freq  and  ele < end_Freq:\n\n\t\t\t\toutput1.append(ele)\n\t\t\t\toutput2.append(data[i])\n\t\tmaxval=max(output2)\n\t\tminval=min(output2)\n\t\tif maxval <lowlimit or  maxval > uplimit:\n\t\t\tresult=\"fail\"\n\t\t\treturn output1,output2,maxval,minval,result\n\t\telse:\n\t\t\tresult=\"pass\"\n\t\t\treturn output1,output2,maxval,minval,result\n\n\n\n\tif __name__ == \"__main__\":\n\t\tprint(\"Start preprocessing\")\n\t\t#job()\n\n\t\t#files = sys.argv[1:]\n\n\n\n\t\tif outfilename:\n\n\t\t\ttry:\n\t\t\t\tfreq,thdh,thd_N,power,Freq_THD,thd_data,Freq_Power,PowerS,RubBuzz_data=AUT.analyze_channels(outfilename, trigeFrequncy,stopananlysis,channaelselect)\n\t\t\t\toutF1,outTHDalldata,maxval,minval,THDresult=checkdata(Freq_THD,thd_data,THDtestrangeL,THDtestrangeH,THD_limit_low,THD_limit_up)\n\t\t\t\toutF2,outPower_alldata,maxval2,minval2,Powerresult=checkdata(Freq_Power,PowerS,PowertestrangeL,PowertestrangeH,Power_limit_low,Power_limit_up)\n\n\n\n\t\t\t\tprint('FFT Frequency:   %.1f Hz' % freq)\n\t\t\t\tprint(\"Sweep Max THD:   %.4f%% \" %thdh)\n\t\t\t\tprint(\"Sweep Max THD+N: %.4f%%      Note, this is single tone use only \" %thd_N)\n\t\t\t\tprint(\"Max Power:       %.2fdB \" %power)\n\t\t\t\tprint(\"Range Max THD:    {} %   which check from {} Hz to {} Hz as limit from {}% to {}% \".format(maxval, THDtestrangeL, THDtestrangeH,THD_limit_low,THD_limit_up))\n\t\t\t\tprint(\"Range Power:  {} dB to {}dB   which check from {} Hz to {} Hz as limit from {}dB to {}dB \".format( round(maxval2),round(minval2),PowertestrangeL, PowertestrangeH,Power_limit_low,Power_limit_up))\n\t\t\t\tprint(\"THD: {} \".format(THDresult))\n\t\t\t\tprint(\"Range Power:{} \".format(Powerresult))\n\n\n\t\t\texcept Exception as e:\n\t\t\t\tprint('Couldn\\'t analyze \"' + outfilename + '\"')\n\t\t\t\tprint(e)\n\t\t\tprint()\n\t\telse:\n\n\t\t\tsys.exit(\"You must provide at least one file to analyze\")\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Lorrytoolcenter/LvAut",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LvAut",
    "package_url": "https://pypi.org/project/LvAut/",
    "platform": "",
    "project_url": "https://pypi.org/project/LvAut/",
    "project_urls": {
      "Homepage": "https://github.com/Lorrytoolcenter/LvAut"
    },
    "release_url": "https://pypi.org/project/LvAut/2021.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Audio wav file test module",
    "version": "2021.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11247665,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6679699d65fbdff49ec34e200fccef79556387f81d32566fbd22911400651be5",
        "md5": "3c27d8ff5851d27426774566d5be34cc",
        "sha256": "0fc297bf9a7d207e05c50e88b5f9b5d38568ba9c92c35226a6c9af8afa78984f"
      },
      "downloads": -1,
      "filename": "LvAut-2021.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c27d8ff5851d27426774566d5be34cc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 812475,
      "upload_time": "2021-07-31T02:44:24",
      "upload_time_iso_8601": "2021-07-31T02:44:24.394742Z",
      "url": "https://files.pythonhosted.org/packages/66/79/699d65fbdff49ec34e200fccef79556387f81d32566fbd22911400651be5/LvAut-2021.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c94c310b70bafb77b30961ee447f30acc2874a5c221b73d463e4bc931df01b90",
        "md5": "953bc6f8facd820eb695a9afbcec8f7c",
        "sha256": "84955806200ef891f1ec189caa55ca27871af0e2ffd89353b8e16b8a1be6b225"
      },
      "downloads": -1,
      "filename": "LvAut-2021.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "953bc6f8facd820eb695a9afbcec8f7c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 809880,
      "upload_time": "2021-07-31T02:44:31",
      "upload_time_iso_8601": "2021-07-31T02:44:31.566666Z",
      "url": "https://files.pythonhosted.org/packages/c9/4c/310b70bafb77b30961ee447f30acc2874a5c221b73d463e4bc931df01b90/LvAut-2021.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}