{
  "info": {
    "author": "ooliver1",
    "author_email": "oliverwilkes2006@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: AsyncIO",
      "Framework :: aiohttp",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# Mafic\n\n[![MIT License](https://custom-icon-badges.demolab.com/github/license/ooliver1/mafic?color=845ec2&logo=code-square)](https://github.com/ooliver1/mafic/blob/master/LICENSE \"License File\")\n[![Releases](https://custom-icon-badges.demolab.com/github/v/release/ooliver1/mafic?display_name=tag&include_prereleases&sort=semver&logo=commit&color=c25db8)](https://github.com/ooliver1/mafic/releases \"Mafic Releases\")\n[![Dependency Version Status](https://custom-icon-badges.demolab.com/librariesio/github/ooliver1/mafic?logo=versions&color=f062a4)](https://github.com/ooliver1/mafic/blob/master/pyproject.toml \"Poetry Dependencies\")\n[![Lint Workflow Status](https://custom-icon-badges.demolab.com/github/actions/workflow/status/ooliver1/mafic/lint.yml?label=lint&logo=codescan-checkmark&color=ff738c)](https://github.com/ooliver1/mafic/actions/workflows/lint.yml \"Lint Workflow\")\n[![PyPI - Status](https://img.shields.io/pypi/status/mafic?color=ff9075&label=PyPI&logo=pypi&logoColor=white)](https://pypi.org/project/mafic \"Mafic PyPI Project\")\n[![Open Issues](https://custom-icon-badges.demolab.com/github/issues-raw/ooliver1/mafic?logo=issue-opened&color=ffb263)](https://github.com/ooliver1/mafic/issues \"Open Issues\")\n[![Open PRs](https://custom-icon-badges.demolab.com/github/issues-pr-raw/ooliver1/mafic?logo=git-pull-request&color=ffd55f)](https://github.com/ooliver1/mafic/pulls \"Open Pull Requests\")\n[![Read the Docs](https://img.shields.io/readthedocs/mafic?logo=read%20the%20docs&logoColor=white&color=f9f871)](https://mafic.readthedocs.io/en/latest/)\n\nA properly typehinted lavalink client for discord.py, nextcord, disnake and py-cord.\n\n## Installation\n\n```bash\npip install mafic\n```\n\n> **Note**\n> Use `python -m`, `py -m`, `python3 -m` or similar if that is how you install packages.\n> Generally windows uses `py -m pip` and linux uses `python3 -m pip`\n\n## Documentation\n\n[Read the docs](https://mafic.readthedocs.io/en/latest/).\n\n## Features\n\n- Fully customisable node balancing.\n- Multi-node support.\n- Filters.\n- Full API coverage.\n- Properly typehinted for Pyright strict.\n\n## Usage\n\nGo to the [Lavalink Repository](https://github.com/freyacodes/lavalink#server-configuration)\nto set up a Lavalink node.\n\n```python\nimport os\n\nimport mafic\nimport nextcord\nfrom nextcord.ext import commands\n\n\nclass MyBot(commands.Bot):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.pool = mafic.NodePool(self)\n        self.loop.create_task(self.add_nodes())\n\n    async def add_nodes(self):\n        await self.pool.create_node(\n            host=\"127.0.0.1\",\n            port=2333,\n            label=\"MAIN\",\n            password=\"<password>\",\n        )\n\n\nbot = MyBot(intents=nextcord.Intents(guilds=True, voice_states=True))\n\n\n@bot.slash_command(dm_permission=False)\nasync def play(inter: nextcord.Interaction, query: str):\n    if not inter.guild.voice_client:\n        player = await inter.user.voice.channel.connect(cls=mafic.Player)\n    else:\n        player = inter.guild.voice_client\n\n    tracks = await player.fetch_tracks(query)\n\n    if not tracks:\n        return await inter.send(\"No tracks found.\")\n\n    track = tracks[0]\n\n    await player.play(track)\n\n    await inter.send(f\"Playing {track.title}.\")\n\n\nbot.run(...)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ooliver1/mafic",
    "keywords": "nextcord,disnake,discord,disnake.py,lavalink,lavalink.py,pycord,py-cord",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mafic",
    "package_url": "https://pypi.org/project/mafic/",
    "platform": null,
    "project_url": "https://pypi.org/project/mafic/",
    "project_urls": {
      "Homepage": "https://github.com/ooliver1/mafic",
      "Repository": "https://github.com/ooliver1/mafic"
    },
    "release_url": "https://pypi.org/project/mafic/1.0.1/",
    "requires_dist": [
      "aiohttp (>=3.6.0,<4.0.0)",
      "discord.py (>=2.0.0,<3.0.0)",
      "disnake (>=2.0.0,<3.0.0)",
      "nextcord (>=2.0.0,<3.0.0)",
      "orjson (>=3.8.0,<4.0.0)",
      "py-cord (>=2.0.0,<3.0.0)",
      "yarl (>=1.0.0,<2.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "A properly typehinted lavalink client for discord.py, nextcord, disnake and py-cord.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16907721,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "760f2ebc46fed2e097a24dc670d57ea15e104b19edef99046d7d5a3f1a1966b1",
        "md5": "a5cb960501ed26b30f97bbdbcbfe765e",
        "sha256": "c8199bbdf243ad35408e926ce9b7a9fc7e5dcf82f5dd80c921c1150bf538c5e2"
      },
      "downloads": -1,
      "filename": "mafic-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5cb960501ed26b30f97bbdbcbfe765e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 43562,
      "upload_time": "2023-02-07T21:40:56",
      "upload_time_iso_8601": "2023-02-07T21:40:56.164455Z",
      "url": "https://files.pythonhosted.org/packages/76/0f/2ebc46fed2e097a24dc670d57ea15e104b19edef99046d7d5a3f1a1966b1/mafic-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d53f137ad5a0f58cab65f1571327abeea797fcc759124218bb353da58a2e999",
        "md5": "079f7df9be950751ad2a475bdd66cb50",
        "sha256": "973392a062ed663ba53e793b9bf65a60b7b3c6f3c9c182319f480488468b85bb"
      },
      "downloads": -1,
      "filename": "mafic-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "079f7df9be950751ad2a475bdd66cb50",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 35463,
      "upload_time": "2023-02-07T21:40:57",
      "upload_time_iso_8601": "2023-02-07T21:40:57.392248Z",
      "url": "https://files.pythonhosted.org/packages/0d/53/f137ad5a0f58cab65f1571327abeea797fcc759124218bb353da58a2e999/mafic-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}