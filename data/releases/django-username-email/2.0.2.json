{
  "info": {
    "author": "Tom Meagher",
    "author_email": "tom@meagher.co",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "CUser, make email the USERNAME\\_FIELD\n=====================================\n\nCUser makes it easy to use email address as your identification token\ninstead of a username.\n\nCUser is a custom Django user model (extends ``AbstractBaseUser``) so it\ntakes a tiny amount of effort to use.\n\nThe only difference between CUser and the vanilla Django ``User`` is email\naddress is the ``USERNAME_FIELD`` (and username does not exist).\n\nCUser supports Django 1.8+\n\nWhy use CUser?\n--------------\n\nBecause you want everything in ``django.contrib.auth`` except for the\n``username`` field and you also want users to **log in with email addresses**.\nAnd you don't want to create your own custom user model or authentication\nbackend.\n\nInstall & Set up\n----------------\n\n0. If you previously used Django's default user model,\n   ``django.contrib.auth.models.User``, jump to **Notes** first (then come\n   back). Otherwise, continue onward!\n\n1. Install with ``pip install django-username-email``\n\n2. Add ``cuser`` to your ``INSTALLED_APPS`` setting:\n\n   .. code-block:: python\n\n       INSTALLED_APPS = [\n           ...\n           'cuser',\n       ]\n\n3. Specify the custom model as the default user model for your project\n   using the ``AUTH_USER_MODEL`` setting in your settings.py:\n\n   .. code-block:: python\n\n       AUTH_USER_MODEL = 'cuser.CUser'\n\n4. Instead of referring to User directly, you should reference the user\n   model using ``django.contrib.auth.get_user_model()``\n\n5. If you use Django's default ``AuthenticationForm`` class, it is\n   strongly recommended that you replace it with the one included with\n   CUser. This will make the ``<input>`` have its ``type`` attribute set\n   to ``email`` and browsers' autocomplete feature will suggest email\n   addresses instead of usernames. For example, if your project is using\n   Django's default ``login`` view, this is what you would put in your\n   urls.py in order to make use of CUser's ``AuthenticationForm`` class:\n\n   .. code-block:: python\n\n       from cuser.forms import AuthenticationForm\n       from django.conf.urls import include, url\n       from django.contrib.auth.views import login\n\n       urlpatterns = [\n           url(r'^accounts/login/$', login, {'authentication_form': AuthenticationForm}, name='login'),\n           url(r'^accounts/', include('django.contrib.auth.urls')),\n           ...\n       ]\n\n6. Run migrations.\n\n   .. code-block:: shell\n\n       python manage.py migrate\n\nConfiguration\n-------------\n\nTo override any of the default settings, create a dictionary named ``CUSER`` in\nyour settings.py with each setting you want to override. For example:\n\n.. code-block:: python\n\n    CUSER = {\n        'app_verbose_name': 'Authentication and Authorization',\n        'register_proxy_auth_group_model': True,\n    }\n\nThese are the settings:\n\n``app_verbose_name`` (default: ``_(\"Custom User\")``)\n****************************************************\n\nThis controls the value that CUser will use for its ``AppConfig`` class'\n``verbose_name``.\n\n``register_proxy_auth_group_model`` (default: ``False``)\n********************************************************\n\nWhen set to ``True``, CUser's admin.py will unregister Django's default\n``Group`` model and register its own proxy model of Django's default ``Group``\nmodel (also named ``Group``). This is useful if you want Django's default\n``Group`` model to appear in the same part of the admin as CUser's ``CUser``\nmodel.\n\nNotes\n-----\n\nIf you have tables referencing Django's ``User`` model, you will have to\ndelete those table and migrations, then re-migrate. This will ensure\neverything is set up correctly from the beginning.\n\nWhen you define a foreign key or many-to-many relations to the ``User``\nmodel, you should specify the custom model using the ``AUTH_USER_MODEL``\nsetting.\n\nFor example:\n\n.. code-block:: python\n\n    from django.conf import settings\n    from django.db import models\n\n    class Profile(models.Model):\n        user = models.ForeignKey(\n            settings.AUTH_USER_MODEL,\n            on_delete=models.CASCADE,\n    )\n\nLicense\n-------\n\nReleased under the MIT license. See LICENSE for details.\n\nQuestions, comments, or anything else?\n--------------------------------------\n\n-  Open an issue\n-  `Twitter <https://twitter.com/tomfme>`__\n-  tom@meagher.co",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tmm/django-username-email/",
    "keywords": "user email username",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-username-email",
    "package_url": "https://pypi.org/project/django-username-email/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-username-email/",
    "project_urls": {
      "Homepage": "https://github.com/tmm/django-username-email/"
    },
    "release_url": "https://pypi.org/project/django-username-email/2.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Custom Django User model that makes email the USERNAME_FIELD.",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14064489,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24b18dd07e50e22ec99fc489b6327890d2591bb991719deec80cf3612ec485cd",
        "md5": "abdb89a528c0bcd4d694de5a308d3337",
        "sha256": "0a741f2e53aaa8c604980d5bdf2fd66051e96fe8549aa2386e3d1693ace00768"
      },
      "downloads": -1,
      "filename": "django-username-email-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "abdb89a528c0bcd4d694de5a308d3337",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8227,
      "upload_time": "2017-02-11T03:41:01",
      "upload_time_iso_8601": "2017-02-11T03:41:01.886766Z",
      "url": "https://files.pythonhosted.org/packages/24/b1/8dd07e50e22ec99fc489b6327890d2591bb991719deec80cf3612ec485cd/django-username-email-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}