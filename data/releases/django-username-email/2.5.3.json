{
  "info": {
    "author": "Adam Taylor",
    "author_email": "ataylor32@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "CUser, make email the USERNAME\\_FIELD\n=====================================\n\nCUser makes it easy to use email address as your identification token\ninstead of a username.\n\nCUser is a custom Django user model (extends ``AbstractBaseUser``) so it\ntakes a tiny amount of effort to use.\n\nThe only difference between CUser and the vanilla Django ``User`` is email\naddress is the ``USERNAME_FIELD`` (and username does not exist).\n\nCUser supports Django 3.2 - 4.0. If you need to use CUser with\nDjango 1.8 - 3.1, you must install an older, unmaintained version of\nCUser, as noted in the \"Install & Set up\" section.\n\nWhy use CUser?\n--------------\n\nBecause you want everything in ``django.contrib.auth`` except for the\n``username`` field and you also want users to **log in with email addresses**.\nAnd you don't want to create your own custom user model or authentication\nbackend.\n\nInstall & Set up\n----------------\n\n**Important:** To keep things simple, the steps below will guide you through\nthe process of using CUser's ``CUser`` model for your Django project's user\nmodel. However, it is strongly recommended that you set up a custom user model\nthat extends CUser's ``AbstractCUser`` class, even if CUser's ``CUser`` model\nis sufficient for you (this way, you can customize the user model if the need\narises). If you would *not* like to follow this recommendation and just want to\nuse CUser's ``CUser`` model, simply follow the steps below (you can skip the\nrest of this paragraph). If you *would* like to follow this recommendation, you\nshould still follow the steps below, but with the following adjustments: After\nstep 3, follow\n`these instructions <https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#using-a-custom-user-model-when-starting-a-project>`_,\nbut instead of using ``from django.contrib.auth.models import AbstractUser``\nuse ``from cuser.models import AbstractCUser`` and instead of using\n``from django.contrib.auth.admin import UserAdmin`` use\n``from cuser.admin import UserAdmin``. Then for step 4 of the steps below, you\nshould set ``AUTH_USER_MODEL`` to your custom user model instead of CUser's\n``CUser`` model. You should then run ``python manage.py makemigrations``. After\nthat, you may follow the remaining steps below just the way they are.\n\n1. If your Django project previously used Django's default user model,\n   ``django.contrib.auth.models.User``, or if you are unfamiliar with using\n   custom user models, jump to **Notes** first (then come\n   back). Otherwise, continue onward!\n\n2. Install with ``pip``:\n\n   .. code-block:: shell\n\n       # Django 3.2 - 4.0\n       pip install django-username-email\n\n       # Django 3.1 (unmaintained)\n       pip install django-username-email==2.4.2\n\n       # Django 2.2 or 3.0 (unmaintained)\n       pip install django-username-email==2.3.1\n\n       # Django 2.0 or 2.1 (unmaintained)\n       pip install django-username-email==2.2.4\n\n       # Django 1.11 (unmaintained)\n       pip install django-username-email==2.1.6\n\n       # Django 1.8 - 1.10 (unmaintained)\n       pip install django-username-email==2.1.2\n\n3. Add ``cuser`` to your ``INSTALLED_APPS`` setting:\n\n   .. code-block:: python\n\n       INSTALLED_APPS = [\n           ...\n           'cuser',\n       ]\n\n4. Specify the custom model as the default user model for your project\n   using the ``AUTH_USER_MODEL`` setting in your settings.py:\n\n   .. code-block:: python\n\n       AUTH_USER_MODEL = 'cuser.CUser'\n\n5. If you use Django's default ``AuthenticationForm`` class, it is\n   strongly recommended that you replace it with the one included with\n   CUser. This will make the ``<input>`` have its ``type`` attribute set\n   to ``email`` and browsers' autocomplete feature will suggest email\n   addresses instead of usernames. For example, if your project is using\n   Django's default ``LoginView`` view (or ``login`` view in Django < 1.11), this is\n   what you would put in your urls.py in order to make use of CUser's\n   ``AuthenticationForm`` class:\n\n   .. code-block:: python\n\n       from cuser.forms import AuthenticationForm\n       from django.conf.urls import include, url\n       from django.contrib.auth.views import LoginView\n\n       urlpatterns = [\n           url(r'^accounts/login/$', LoginView.as_view(authentication_form=AuthenticationForm), name='login'),\n           url(r'^accounts/', include('django.contrib.auth.urls')),\n           ...\n       ]\n\n   Or if you're using Django < 1.11:\n\n   .. code-block:: python\n\n       from cuser.forms import AuthenticationForm\n       from django.conf.urls import include, url\n       from django.contrib.auth.views import login\n\n       urlpatterns = [\n           url(r'^accounts/login/$', login, {'authentication_form': AuthenticationForm}, name='login'),\n           url(r'^accounts/', include('django.contrib.auth.urls')),\n           ...\n       ]\n\n6. Run migrations.\n\n   .. code-block:: shell\n\n       python manage.py migrate\n\n7. There is a good chance that you want foo@example.com and FOO@example.com to\n   be treated as the same email address. There is a variety of ways to go about\n   doing this. How you handle it will depend on the needs of your project and\n   personal preference, so CUser does not provide a solution for this out of\n   the box. You will need to address this yourself if this applies to you. If\n   you're using CUser's ``AuthenticationForm`` class (see step 5), you may want\n   to subclass it and override ``error_messages['invalid_login']``.\n\nConfiguration\n-------------\n\nTo override any of the default settings, create a dictionary named ``CUSER`` in\nyour settings.py with each setting you want to override. For example:\n\n.. code-block:: python\n\n    CUSER = {\n        'app_verbose_name': 'Authentication and Authorization',\n        'register_proxy_auth_group_model': True,\n    }\n\nThese are the settings:\n\n``app_verbose_name`` (default: ``_(\"Custom User\")``)\n****************************************************\n\nThis controls the value that CUser will use for its ``AppConfig`` class'\n``verbose_name``.\n\n``register_proxy_auth_group_model`` (default: ``False``)\n********************************************************\n\nWhen set to ``True``, CUser's admin.py will unregister Django's default\n``Group`` model and register its own proxy model of Django's default ``Group``\nmodel (also named ``Group``). This is useful if you want Django's default\n``Group`` model to appear in the same part of the admin as CUser's ``CUser``\nmodel.\n\nNotes\n-----\n\nIf you have tables referencing Django's ``User`` model, you will have to\ndelete those table and migrations, then re-migrate. This will ensure\neverything is set up correctly from the beginning.\n\nInstead of referring to User directly, you should reference the user model\nusing ``django.contrib.auth.get_user_model()``\n\nWhen you define a foreign key or many-to-many relations to the ``User``\nmodel, you should specify the custom model using the ``AUTH_USER_MODEL``\nsetting.\n\nFor example:\n\n.. code-block:: python\n\n    from django.conf import settings\n    from django.db import models\n\n    class Profile(models.Model):\n        user = models.ForeignKey(\n            settings.AUTH_USER_MODEL,\n            on_delete=models.CASCADE,\n    )\n\nLicense\n-------\n\nReleased under the MIT license. See LICENSE for details.\n\nOriginal author\n---------------\n\nTom Meagher\n\nQuestions, comments, or anything else?\n--------------------------------------\n\n-  Open an issue\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tmm/django-username-email/",
    "keywords": "user email username",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-username-email",
    "package_url": "https://pypi.org/project/django-username-email/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-username-email/",
    "project_urls": {
      "Homepage": "https://github.com/tmm/django-username-email/"
    },
    "release_url": "https://pypi.org/project/django-username-email/2.5.3/",
    "requires_dist": [
      "django (>=3.2)"
    ],
    "requires_python": "",
    "summary": "Custom Django User model that makes email the USERNAME_FIELD.",
    "version": "2.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14064489,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ad50ad2ac583d39a95011706aed05c146fb65efe112566ebe577f13ee631007",
        "md5": "8abfae0bd2dcf7dbb017efbac51b43d5",
        "sha256": "358a13aeffe18ac68bb95fc94c1e5c6375b4c534289cdf85d8542b459d155b79"
      },
      "downloads": -1,
      "filename": "django_username_email-2.5.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8abfae0bd2dcf7dbb017efbac51b43d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12957,
      "upload_time": "2022-06-08T02:17:02",
      "upload_time_iso_8601": "2022-06-08T02:17:02.788281Z",
      "url": "https://files.pythonhosted.org/packages/6a/d5/0ad2ac583d39a95011706aed05c146fb65efe112566ebe577f13ee631007/django_username_email-2.5.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "007bf065eb9f57aafdfd2e9e90c3357a6cf08ab1565e7bc2d11e8e3d1eda3af0",
        "md5": "f7ef06d5e8ef3afe062331ace1910350",
        "sha256": "ea3a49e5400322dfc86faeac17f82ed954305a408bea66a7653ae82ed40b7bcb"
      },
      "downloads": -1,
      "filename": "django-username-email-2.5.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f7ef06d5e8ef3afe062331ace1910350",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13079,
      "upload_time": "2022-06-08T02:17:05",
      "upload_time_iso_8601": "2022-06-08T02:17:05.231610Z",
      "url": "https://files.pythonhosted.org/packages/00/7b/f065eb9f57aafdfd2e9e90c3357a6cf08ab1565e7bc2d11e8e3d1eda3af0/django-username-email-2.5.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}