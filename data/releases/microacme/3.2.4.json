{
  "info": {
    "author": "Don Spaulding II",
    "author_email": "don@mirusresearch.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![pipeline status](https://gitlab.mirus.io/domains/roadrunner/microacme/badges/master/pipeline.svg)](https://mirus.githost.io/domains/roadrunner/microacme/commits/master)\n[![coverage report](https://gitlab.mirus.io/domains/roadrunner/microacme/badges/master/coverage.svg?job=test)](https://mirus.githost.io/domains/roadrunner/microacme/commits/master)\n\n# microacme\n`microacme` is a library intended to be used with an ACME-speaking API server, such as the one run by the LetsEncrypt service.\n\n# Why another ACME client?\n`microacme`'s main advantage is that it is designed to be easily subclassed and extended\nto allow for custom implementations of solving the ACME challenges,\nwithout having to worry about implementing the ACME RFC from scratch.\n\n\n# History\nIt began life in 2016 as a fork of diafygi's excellent [tiny-acme project](https://github.com/diafygi/acme-tiny).\nThe goals of that original library were to be small, dependency free, and easily audited.  This fork \nintends to keep the smallness, but not at the expense of readability or usability as an extendable library.\nAlso, instead of avoiding dependencies it relies on well-regarded third-party libraries for HTTP requests,\nJSON web token signatures, and cryptographic primitives (using `requests`, `jwcrypto`, and `cryptography`, respectively).\n\nAt this point, almost the entire codebase has been rewritten from scratch and bears almost no resemblance to its initial inspiration, `tiny-acme`.\n\n# Installation\n`pip install microacme`\n\n# Usage\nTo use `microacme`, you need to implement a few methods on a subclass of `microacme.ACMEClient`.\n\n```python\n    from microacme import ACMEClient\n\n    class MyCustomACMEClient(ACMEClient):\n        \"\"\"\n        Use this class as an example to build your\n        ACME client.  Override the methods below\n        to customize the challenge/response behavior\n        of the ACME client.\n        \"\"\"\n        def select_challenge(self, domain, challenges):\n            \"\"\"\n            Each domain has multiple options for solving challenges.\n\n            Override this function to pick which challenge you want to\n            solve for this domain.\n            \"\"\"\n            pass\n\n        def set_challenge(self, domain, challenge):\n            \"\"\"\n            After a challenge has been selected, it needs to actually exist somewhere.\n\n            This is where you fulfill the challenge requirements.\n            \"\"\"\n            raise NotImplementedError(\"Need to implement a function to set the challenge.\")\n\n        def validate_challenge(self, domain, challenge):\n            \"\"\"\n            Used to give the ACMEClient instance a chance to make sure\n            that the outside world will see the changes made by set_challenge.\n\n            By default, does nothing.  Could be used, for example, to sleep(1) while waiting\n            for an asynchronous upload to take place to a remote webserver.  Or to wait while\n            DNS propagation occurs.\n            \"\"\"\n            pass\n\n        def cleanup_completed_challenge(self, domain, challenge):\n            \"\"\"\n            This method is called after the challenge has succeeded.  It is used\n            to cleanup any artifacts of solving the challenge.\n            \"\"\"\n            pass\n```\n\nOnce you've implemented these methods, you can instantiate your client with an account_key and a CA url.\n\n```python\nimport microacme\n\nmy_client = MyCustomACMEClient(\n    account_key=BYTES_OF_KEY_IN_PEM_FORMAT,\n    CA=microacme.STAGING_CA\n)\n\n# If you've never used this particular account_key before:\nmy_client.register_account()\n\n# Now you're ready to get a certificate.  First, create a key:\nkey = microacme.generate_crypto_key(key_size=3072)\n\n# Next, generate a Certificate Signing Request (CSR):\ncsr = microacme.generate_csr(\n    key=key,\n    country='US',\n    state='Indiana',\n    locality='Indianapolis',\n    org_name='Widget Maker, Inc.',\n    common_name='widgetmaker.com',\n    alt_names=[\n        'mail.widgetmaker.com',\n        'dev.widgetmaker.com',\n    ],\n    auto_www=True\n)\n\n# Finally, ask the ACME server to authorize, validate, and issue the certificate:\ncert, issuer_cert = microacme.get_certificate(csr)\n\n# Congratulations, you're encrypted!\n```\n\n# Helper Methods\n`microacme` has a handful of utility methods which may come in handy as you are shuffling\nkeys and certs around between different systems.  Most of them are self explanatory, but\nsome example usage is included below.\n\n```python\n    import microacme\n\n    # Working with keys\n    crypto_key = microacme.generate_crypto_key(key_size=2048):\n    pem_bytes = microacme.crypto_key_to_pem(crypto_key, passphrase=None)  # Tack on a passphrase to protect the key at rest.\n    loaded_crypto_key = microacme.pem_to_crypto_key(pem_bytes, passphrase=None)  # Use a passphrase if the key is encrypted\n\n\n    # Working with CSRs\n    csr_object = microacme.generate_csr(\n        private_key,\n        country,\n        state,\n        locality,\n        org_name,\n        common_name,\n        alt_names=None,\n        auto_www=True\n    )\n    csr_pem_bytes = microacme.csr_to_pem(csr_object)\n    csr_object = microacme.pem_to_csr(csr_pem_bytes)\n\n\n    # Working with Certificates\n    cert_pem_bytes = microacme.cert_to_pem(cert_obj)\n    cert_object = microacme.pem_to_cert(cert_pem_bytes)\n    cert_object = microacme.der_to_cert(cert_der_bytes)\n```\n\n# Contributing\nPlease feel free to open issues on our [Gitlab issue tracker](https://gitlab.mirus.io/domains/roadrunner/microacme/issues).\n\n# License\nThe original inspiration for `microacme` was licensed as MIT.  We retain that license as well for this library.\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.mirus.io/domains/roadrunner/microacme/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microacme",
    "package_url": "https://pypi.org/project/microacme/",
    "platform": "",
    "project_url": "https://pypi.org/project/microacme/",
    "project_urls": {
      "Homepage": "https://gitlab.mirus.io/domains/roadrunner/microacme/"
    },
    "release_url": "https://pypi.org/project/microacme/3.2.4/",
    "requires_dist": [
      "requests",
      "jwcrypto",
      "cryptography",
      "pytest",
      "pytest-cov"
    ],
    "requires_python": "",
    "summary": "",
    "version": "3.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3378927,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cfab801f4f8deb294af5485ce49cc364935015b6418a8fe197c90f2431e205d",
        "md5": "bdec858b9e5184d51365673fc8674aac",
        "sha256": "8e2ea6ba5e933e522860a52bfbb44db08c52a7452321de3e45af738e4d1648e3"
      },
      "downloads": -1,
      "filename": "microacme-3.2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bdec858b9e5184d51365673fc8674aac",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11552,
      "upload_time": "2017-12-01T00:36:19",
      "upload_time_iso_8601": "2017-12-01T00:36:19.083850Z",
      "url": "https://files.pythonhosted.org/packages/5c/fa/b801f4f8deb294af5485ce49cc364935015b6418a8fe197c90f2431e205d/microacme-3.2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e5576647c1e8fb185ddfe08935bc0e26d819ce2098a24ad8acb27fc76f017ef",
        "md5": "311003a3bdd34ddd064dc66f867fcef7",
        "sha256": "d2405ce976715c6365a6b308fd80f57df74b4e3f42b2a8234c35bf1d4cd65719"
      },
      "downloads": -1,
      "filename": "microacme-3.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "311003a3bdd34ddd064dc66f867fcef7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8047,
      "upload_time": "2017-12-01T00:36:20",
      "upload_time_iso_8601": "2017-12-01T00:36:20.342899Z",
      "url": "https://files.pythonhosted.org/packages/0e/55/76647c1e8fb185ddfe08935bc0e26d819ce2098a24ad8acb27fc76f017ef/microacme-3.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}