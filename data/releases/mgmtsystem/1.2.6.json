{
  "info": {
    "author": "Peter Savage",
    "author_email": "psavage@redhat.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://landscape.io/github/RedHatQE/mgmtsystem/master/landscape.svg?style=fla\n   :scale: 50 %\n   :alt: Health Status\n   :align: left\n   :target: (https://landscape.io/github/RedHatQE/mgmtsystem/master\n.. image:: https://coveralls.io/repos/RedHatQE/mgmtsystem/badge.svg?branch=master&service=github\n   :scale: 50 %\n   :alt: Coverage Status\n   :align: left\n   :target: https://coveralls.io/github/RedHatQE/mgmtsystem?branch=master\n.. image:: https://travis-ci.org/RedHatQE/mgmtsystem.svg\n   :scale: 50 %\n   :alt: Build Status\n   :align: left\n   :target: https://travis-ci.org/RedHatQE/mgmtsystem\n\nmgmtsystem\n==========\n\nIntroduction\n------------\nmgmtsystem is a simple virtualization client with support (in varying degrees) for the following\n\n* Red Hat Enterprize Virtualization (RHEV)\n* Red Hat Openstack (RHOS)\n* Openshift\n* VMware vCenter\n* Microsoft SCVMM\n* Microsoft Azure\n* Google Compute Engine\n* Kubernetes\n* Hawkular\n\nIt can be used to control virtualization clients and offersoperations such as\n\n* list_vm (returns a list of vm_names)\n* list_template (returns a list of templates/images)\n* start_vm (starts a vm)\n* stop_vm (stops a vm)\n\nThough conceptually names differ between cloud and infrastructure virualization technologies ie. instance/v\nit was decided to stick to one representation in the codebase and interface to give a singlar API across\nall systems.\n\nUsage\n-----\nEach management system is invoked usually with a hostname and some credentials\n\n.. code-block:: python\n\n  from mgmtsystem.virtualcenter import VMWareSystem\n  \n  system = VMWareSystem(hostname='10.0.0.0', username=\"root\", password=\"password\")\n  system.list_vm()\n\nAdding a new Management System\n------------------------------\nA management system should extend the Base class, and supply \"Not Implemented\" raises for items which\nit doesn't support. This behaviour may change in the future as more and more diverse management systems.\n\n.. code-block:: python\n\n  from base import MgmtSystemAPIBase\n\n  class RHEVMSystem(MgmtSystemAPIBase):\n  \n    _stats_available = {\n      'num_vm': lambda self: self.api.get_summary().get_vms().total,\n      'num_host': lambda self: len(self.list_host()),\n      'num_cluster': lambda self: len(self.list_cluster()),\n      'num_template': lambda self: len(self.list_template()),\n      'num_datastore': lambda self: len(self.list_datastore()),\n    }\n  \n    def __init__(self, hostname, username, password, **kwargs):\n      super(RHEVMSystem, self).__init__(kwargs)\n\nThe call to ``super`` is necessary to set up the logger if noe has not been passed in with the ``logger``\nkeyword.\n\nThe developer can then add their own methods to interact with their own management system. Commonly accessible\nstatistics are generally all named the same across management systems. In this way we can treat multiple management\nsystems the same and use an identical method to check the number of vms on a RHEV system, to a VMware system.\n\nExceptions currently sit in a single module, this will probably change later with each management system having it's own\npackage and exceptions stored there.\n\nThis module was originally developed for assisting in the ManageIQ testing team.\n\nContributing\n------------\nThe guidelines to follow for this project can be found in the \ncfme `dev_guide <http://cfme-tests.readthedocs.org/guides/dev_guide.html>`_.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": "setup\ndistutils",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mgmtsystem",
    "package_url": "https://pypi.org/project/mgmtsystem/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mgmtsystem/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/mgmtsystem/1.2.6/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A base system for provider management",
    "version": "1.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2931943,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d1f10646ab8a3f580b7549d79dd8a7154f08e4a43d7b691b188907e5a587a77",
        "md5": "ebe8d1f369e6beec6851c88b9572ba2c",
        "sha256": "f8c804aec94528909fe703b7f9aa2a3c41273dec09bcff3781060294ba338db6"
      },
      "downloads": -1,
      "filename": "mgmtsystem-1.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "ebe8d1f369e6beec6851c88b9572ba2c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 44722,
      "upload_time": "2016-04-29T13:35:52",
      "upload_time_iso_8601": "2016-04-29T13:35:52.087036Z",
      "url": "https://files.pythonhosted.org/packages/8d/1f/10646ab8a3f580b7549d79dd8a7154f08e4a43d7b691b188907e5a587a77/mgmtsystem-1.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}