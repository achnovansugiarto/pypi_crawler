{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Home-page: UNKNOWN\nAuthor: lijian\nAuthor-email: 389105015@imdada.cn\nLicense: MIT\nDescription-Content-Type: UNKNOWN\nDescription: \n        ### udp\n        \n        * udp主要utx的修改，对由python3.5的支持转换为python2.7\n            * 支持Python2.7\n        \n        \n        * 安装udp  \n        \n            ```\n            pip install dup\n            ```\n        \n        * 功能列表\n            * 用例排序，只需要导入udp库，用例的执行顺序就会和编写顺序一致\n            * 用例自定义标签，可以对测试用例指定多个标签。\n            目前全部用例默认带有`FULL`标签，未指定标签的用例，默认带有`SMOKE`和`FULL`两个标签。\n        \n        * 示例\n        \n            ```py\n            @unique\n            class Tag(Enum):\n                SMOKE = 1  # 冒烟测试标记，可以重命名，但是不要删除\n                FULL = 1000  # 完整测试标记，可以重命名，但是不要删除\n        \n                # 以下开始为扩展标签，自行调整\n                SP = 2\n            ```\n        \n            ```py\n            class TestLegion(unittest.TestCase):\n        \n                @tag(Tag.SMOKE)\n                def test_create_legion(self):\n                    pass\n        \n                @tag(Tag.SP, Tag.FULL)\n                def test_quit_legion(self):\n                    \"\"\"退出军团\n        \n                    :return:\n                    \"\"\"\n                    print(\"吧啦啦啦啦啦啦\")\n                    assert 1 == 2\n            ```\n        \n        * 运行指定标签的测试用例\n        \n            ```py\n            from dup import *\n        \n            if __name__ == '__main__':\n                setting.run_case = {Tag.SMOKE}  # 只运行SMOKE冒烟用例\n                runner = TestRunner()\n                runner.add_case_dir(r\"testcase\")\n                runner.run_test(report_title='接口自动化测试报告')\n            ```\n        \n        * 数据驱动  \n        \n            ```py\n            class TestLegion(unittest.TestCase):\n        \n                @data([\"gold\", 100], [\"diamond\", 500])\n                def test_bless(self, bless_type, award):\n                    print(bless_type)\n                    print(award)\n        \n                @data(10001, 10002, 10003)\n                def test_receive_bless_box(self, box_id):\n                    \"\"\" 领取祈福宝箱\n        \n                    :return:\n                    \"\"\"\n                    print(box_id)\n        \n        * 默认会解包测试数据来一一对应函数参数，可以使用unpack=False，不进行解包  \n        \n        \t```py\n        \tclass TestBattle(unittest.TestCase):\n        \t    @data({\"gold\": 1000, \"diamond\": 100}, {\"gold\": 2000, \"diamond\": 200}, unpack=False)\n        \t    def test_get_battle_reward(self, reward):\n        \t        \"\"\" 领取战斗奖励\n        \t\n        \t        :return:\n        \t        \"\"\"\n        \t        print(reward)\n        \t        print(\"获得的钻石数量是：{}\".format(reward['diamond']))\n        \t ```\n        \n        * 检测用例是否编写了用例描述  \n        \n            ```\n            2017-11-13 12:00:19,334 WARNING legion.test_legion.test_bless没有用例描述\n            ```\n        \n        * 执行测试时，显示测试进度  \n        \n            ```\n            2017-11-13 12:00:19,336 INFO 开始进行测试\n        \t2017-11-13 12:00:19,436 INFO Start to test legion.test_legion.test_create_legion (1/5)\n        \t2017-11-13 12:00:19,536 INFO Start to test legion.test_legion.test_receive_bless_box (2/5)\n        \t2017-11-13 12:00:19,637 INFO Start to test legion.test_legion.test_receive_bless_box (3/5)\n        \t2017-11-13 12:00:19,737 INFO Start to test legion.test_legion.test_receive_bless_box (4/5)\n        \t2017-11-13 12:00:19,837 INFO Start to test legion.test_legion.test_quit_legion (5/5)\n            ```\n        \n        * setting类提供多个设置选项进行配置  \n        \n            ```py\n            class setting:\n        \n                # 只运行的用例类型\n                run_case = {Tag.SMOKE}\n        \n                # 开启用例排序\n                sort_case = True\n        \n                # 每个用例的执行间隔，单位是秒\n                execute_interval = 0.1\n        \n                # 开启检测用例描述\n                check_case_doc = True\n        \n                # 显示完整用例名字（函数名字+参数信息）\n                full_case_name = False\n        \n                # 测试报告显示的用例名字最大程度\n                max_case_name_len = 80\n        \n                # 执行用例的时候，显示报错信息\n                show_error_traceback = True\n        \n                # 生成ztest风格的报告\n                create_ztest_style_report = True\n        \n                # 生成bstest风格的报告\n                create_bstest_style_report = True\n            ```\n        \n        * 集成 [ztest](https://github.com/zhangfei19841004/ztest) 和 [BSTestRunner](https://github.com/easonhan007/HTMLTestRunner) 自动生成两份测试报告，感谢两位作者的测试报告模版\n        \n        * ztest风格\n        \n          ![ztest风格](https://github.com/jianbing/utx/raw/master/img/ztest.png)\n        \n        * bstest风格\n        \n          ![bstest风格](https://github.com/jianbing/utx/raw/master/img/bstest.png)\n        \n        * 无缝接入unittest项目，导入utx包即可开始使用扩展功能，无需修改之前的代码\n        \nPlatform: UNKNOWN\nClassifier: License :: OSI Approved :: MIT License\nClassifier: Programming Language :: Python :: 2.7\nClassifier: Programming Language :: Python :: Implementation :: CPython\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dup",
    "package_url": "https://pypi.org/project/dup/",
    "platform": "",
    "project_url": "https://pypi.org/project/dup/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dup/1.0/",
    "requires_dist": [
      "colorama",
      "enum34"
    ],
    "requires_python": "",
    "summary": "对Python unittest的功能进行了扩展 原作者：jianbing git: 'https://github.com/jianbing/utx' EMAIL = '326333381@qq.com'",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8697642,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "920de4e7a98700f7a622877a1aec08f5bc2f21d05a8327e9ea6ea0db62e78d66",
        "md5": "56856edd071abe97166d3ebb7954a0f8",
        "sha256": "1d103e1c285ccaf4c5852ddf2d78fa3c084f49f725cc5cfe1f7c03729e414b38"
      },
      "downloads": -1,
      "filename": "dup-1.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "56856edd071abe97166d3ebb7954a0f8",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 42568,
      "upload_time": "2018-03-17T06:24:36",
      "upload_time_iso_8601": "2018-03-17T06:24:36.974084Z",
      "url": "https://files.pythonhosted.org/packages/92/0d/e4e7a98700f7a622877a1aec08f5bc2f21d05a8327e9ea6ea0db62e78d66/dup-1.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ca8919526b5d2434cb9d0c9279384ba8fff36b6f1c03fa19bf6d447c28c8310",
        "md5": "65f6ec673574aebbc5ea70462e3c1534",
        "sha256": "97e3223416e29e0292fd524753be9e12ca1b21b3aa2a63015ca461aeac677628"
      },
      "downloads": -1,
      "filename": "dup-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "65f6ec673574aebbc5ea70462e3c1534",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39926,
      "upload_time": "2018-03-17T06:24:40",
      "upload_time_iso_8601": "2018-03-17T06:24:40.919802Z",
      "url": "https://files.pythonhosted.org/packages/0c/a8/919526b5d2434cb9d0c9279384ba8fff36b6f1c03fa19bf6d447c28c8310/dup-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}