{
  "info": {
    "author": "Ohunayo Gege",
    "author_email": "ohunayogege@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "**DjangorestQL** is a python library which allows you to turn your API made with **Django REST Framework(DRF)** into a GraphQL like API. \nWith **DjangorestQL** you will be able to\n\n* Send a query to your API and get exactly what you need, nothing more and nothing less.\n\n* Control the data you get, not the server.\n\n* Get predictable results, since you control what you get from the server.\n\n* Get nested resources in a single request.\n\n* Avoid Over-fetching and Under-fetching of data.\n\n* Write(create & update) nested data of any level with flexibility.\n\n_am sure you will enjoy it. Isn't it cool?_\n\nWant to see how this library is making all that possible? \n\nCheck out the full documentation at https://djangorestql.ohunayogege.com\n\n\n## Requirements\n* Python >= 3.5\n* Django >= 1.11\n* Django REST Framework >= 3.5\n\n\n## Installing\n```py\npip install djangorestql\n```\n\n\n## Getting Started\nUsing **DjangorestQL** to query data is very simple, you just have to inherit the ```DynamicFieldsMixin``` class when defining a serializer that's all.\n```py\nfrom rest_framework import serializers\nfrom django.contrib.auth.models import User\nfrom djangorestql.mixins import DynamicFieldsMixin\n\n\nclass UserSerializer(DynamicFieldsMixin, serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email']\n```\n\n**Django RESTQL** handle all requests with a ```query``` parameter, this parameter is the one used to pass all fields to be included/excluded in a response. For example to select ```id``` and ```username``` fields from User model, send a request with a ``` query``` parameter as shown below.\n\n```GET /users/?query={id, username}```\n```js\n[\n    {\n        \"id\": 1,\n        \"username\": \"ohunayo\"\n    },\n    ...\n]\n```\n\n**Django RESTQL** support querying both flat and nested resources, so you can expand or query nested fields at any level as defined on a serializer. In an example below we have ```location``` as a nested field on User model.\n\n```py\nfrom rest_framework import serializers\nfrom django.contrib.auth.models import User\nfrom django_restql.mixins import DynamicFieldsMixin\n\nfrom app.models import GroupSerializer, LocationSerializer\n\n\nclass LocationSerializer(DynamicFieldsMixin, serializers.ModelSerializer):\n    class Meta:\n        model = Location\n        fields = ['id', 'country',  'city', 'street']\n\n\nclass UserSerializer(DynamicFieldsMixin, serializers.ModelSerializer):\n    location = LocationSerializer(many=False, read_only=True) \n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email', 'location']\n```\n\nIf you want only ```country``` and ```city``` fields on a ```location``` field when retrieving users here is how you can do it\n\n```GET /users/?query={id, username, location{country, city}}```\n```js\n[\n    {\n        \"id\": 1,\n        \"username\": \"ohunayo\",\n        \"location\": {\n            \"contry\": \"Nigeria\",\n            \"city\": \"Lagos\"\n        }\n    },\n    ...\n]\n```\n\n## [Documentation :pencil:](https://djangorestql.ohunayogege.com)\nYou can do a lot with **DjangorestQL** apart from just querying data, full documentation for this project is available at https://https://djangorestql.ohunayogege.com, you are encouraged to read it inorder to utilize this library to the fullest.\n\n\n## Running Tests\n```python runtests.py```\n\n\n## Credits\n> * [GraphQL](https://graphql.org/) Usage was an idea introduced to me by a friend of mine on JavaScript, so i decided to use it on Django.\n> * My intention is to extend the capability of [drf-dynamic-fields](https://github.com/dbrgn/drf-dynamic-fields) library to support more functionalities like allowing to query nested fields both flat and iterable at any level and allow writing on nested fields while maintaining simplicity and to also relief developer stress.\n\n\n## Contributing [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n> We welcome all contributions. Please read our [CONTRIBUTING.md](https://github.com/ohunayogege/djangorestql/blob/master/CONTRIBUTING.md) first. You can submit any ideas as [pull requests](https://github.com/ohunayogege/djangorestql/pulls) or as [GitHub issues](https://github.com/ohunayogege/djangorestql/issues). If you'd like to improve code, check out the [Code Style Guide](https://github.com/ohunayogege/djangorestql/blob/master/CONTRIBUTING.md#styleguides) and have a good time!.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangorestql",
    "package_url": "https://pypi.org/project/djangorestql/",
    "platform": "",
    "project_url": "https://pypi.org/project/djangorestql/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/djangorestql/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7908265,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea22710121dde0d287c34169eca0e6cb208c52dd9c7fe5b38a0820f356ec719a",
        "md5": "81d5e4f001cb7f493ae4f8f5c7ff1e5e",
        "sha256": "f1dcc67ad447d1417b2279c6177e96634888cb7ac3fd48071656188c173fe5a2"
      },
      "downloads": -1,
      "filename": "djangorestql-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81d5e4f001cb7f493ae4f8f5c7ff1e5e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16667,
      "upload_time": "2020-08-07T14:53:39",
      "upload_time_iso_8601": "2020-08-07T14:53:39.094785Z",
      "url": "https://files.pythonhosted.org/packages/ea/22/710121dde0d287c34169eca0e6cb208c52dd9c7fe5b38a0820f356ec719a/djangorestql-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab2641a0ea1fa63adfc80c053daaac017f2743f9699fc5488d253cc90c3c5e92",
        "md5": "ba6b62cb07cb4089f445769e4ec056ca",
        "sha256": "af28f86058b0430d5318db004b8c1bb9def6786972a4bfc82f657d788b78e6be"
      },
      "downloads": -1,
      "filename": "djangorestql-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ba6b62cb07cb4089f445769e4ec056ca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16542,
      "upload_time": "2020-08-07T14:53:41",
      "upload_time_iso_8601": "2020-08-07T14:53:41.563933Z",
      "url": "https://files.pythonhosted.org/packages/ab/26/41a0ea1fa63adfc80c053daaac017f2743f9699fc5488d253cc90c3c5e92/djangorestql-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}