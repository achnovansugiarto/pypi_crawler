{
  "info": {
    "author": "Pablo Galindo Salgado",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Debuggers"
    ],
    "description": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/bloomberg/memray/main/docs/_static/images/logo.png\" width=\"70%\">\n</p>\n\n---\n\n![OS Linux](https://img.shields.io/badge/OS-Linux-blue)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/memray)\n![PyPI - Implementation](https://img.shields.io/pypi/implementation/memray)\n![PyPI](https://img.shields.io/pypi/v/memray)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/memray)\n[![Tests](https://github.com/bloomberg/memray/actions/workflows/build.yml/badge.svg)](https://github.com/bloomberg/memray/actions/workflows/build.yml)\n![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/bloomberg/memray/main/docs/_static/images/output.png\" alt=\"Memray output\"></p>\n\nMemray is a memory profiler for Python. It can track memory allocations in Python code, in native extension\nmodules, and in the Python interpreter itself. It can generate several different types of reports to help you\nanalyze the captured memory usage data. While commonly used as a CLI tool, it can also be used as a library to\nperform more fine-grained profiling tasks.\n\nNotable features:\n\n- üïµÔ∏è‚Äç‚ôÄÔ∏è Traces every function call so it can accurately represent the call stack, unlike sampling profilers.\n- ‚Ñ≠ Also handles native calls in C/C++ libraries so the entire call stack is present in the results.\n- üèé Blazing fast! Profiling slows the application only slightly. Tracking native code is somewhat slower,\n  but this can be enabled or disabled on demand.\n- üìà It can generate various reports about the collected memory usage data, like flame graphs.\n- üßµ Works with Python threads.\n- üëΩüßµ Works with native-threads (e.g. C++ threads in C extensions).\n\nMemray can help with the following problems:\n\n- Analyze allocations in applications to help discover the cause of high memory usage.\n- Find memory leaks.\n- Find hotspots in code that cause a lot of allocations.\n\nNote that Memray only works on Linux and cannot be installed on other platforms.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/bloomberg/memray/main/docs/_static/images/quotes.png\" width=\"100%\">\n</p>\n\n# Installation\n\nMemray requires Python 3.7+ and can be easily installed using most common Python\npackaging tools. We recommend installing the latest stable release from\n[PyPI](https://pypi.org/project/memray/) with pip:\n\n```shell\n    python3 -m pip install memray\n```\n\nNotice that Memray contains a C extension so releases are distributed as binary\nwheels as well as the source code. If a binary wheel is not available for your system\n(Linux x86/x64), you'll need to ensure that all the dependencies are satisfied on the\nsystem where you are doing the installation.\n\n## Building from source\n\nIf you wish to build Memray from source you need the following binary dependencies in your system:\n\n- libunwind\n- liblz4\n\nCheck your package manager on how to install these dependencies (for example `apt-get install libunwind-dev liblz4-dev` in Debian-based systems).\n\nOnce you have the binary dependencies installed, you can clone the repository and follow with the normal building process:\n\n```shell\ngit clone git@github.com:bloomberg/memray.git memray\ncd memray\npython3 -m venv ../memray-env/  # just an example, put this wherever you want\nsource ../memray-env/bin/activate\npython3 -m pip install --upgrade pip\npython3 -m pip install -e . -r requirements-test.txt -r requirements-extra.txt\n```\n\nThis will install Memray in the virtual environment in development mode (the `-e` of the last `pip install` command).\n\n# Documentation\n\nYou can find the latest documentation available [here](https://bloomberg.github.io/memray/).\n\n# Usage\n\nThere are many ways to use Memray. The easiest way is to use it as a command line tool to run your script, application, or library.\n\n```\nusage: memray [-h] [-v] {run,flamegraph,table,live,tree,parse,summary,stats} ...\n\nMemory profiler for Python applications\n\nRun `memray run` to generate a memory profile report, then use a reporter command\nsuch as `memray flamegraph` or `memray table` to convert the results into HTML.\n\nExample:\n\n    $ python3 -m memray run -o output.bin my_script.py\n    $ python3 -m memray flamegraph output.bin\n\npositional arguments:\n  {run,flamegraph,table,live,tree,parse,summary,stats}\n                        Mode of operation\n    run                 Run the specified application and track memory usage\n    flamegraph          Generate an HTML flame graph for peak memory usage\n    table               Generate an HTML table with all records in the peak memory usage\n    live                Remotely monitor allocations in a text-based interface\n    tree                Generate a tree view in the terminal for peak memory usage\n    parse               Debug a results file by parsing and printing each record in it\n    summary             Generate a terminal-based summary report of the functions that allocate most memory\n    stats               Generate high level stats of the memory usage in the terminal\n\noptional arguments:\n  -h, --help            Show this help message and exit\n  -v, --verbose         Increase verbosity. Option is additive and can be specified up to 3 times\n\nPlease submit feedback, ideas, and bug reports by filing a new issue at https://github.com/bloomberg/memray/issues\n```\n\nTo use Memray over a script or a single python file you can use\n\n```shell\npython3 -m memray run my_script.py\n```\n\nIf you normally run your application with `python3 -m my_module`, you can use the `-m` flag with `memray run`:\n\n```shell\npython3 -m memray run -m my_module\n```\n\nYou can also invoke Memray as a command line tool without having to use `-m` to invoke it as a module:\n\n```shell\nmemray run my_script.py\nmemray run -m my_module\n```\n\nThe output will be a binary file (like `memray-my_script.2369.bin`) that you can analyze in different ways. One way is to use the `memray flamegraph` command to generate a flame graph:\n\n```shell\nmemray flamegraph my_script.2369.bin\n```\n\nThis will produce an HTML file with a flame graph of the memory usage that you can inspect with your favorite browser. There are multiple other reporters that you can use to generate other types of reports, some of them generating terminal-based output and some of them generating HTML files. Here is an example of a Memray flamegraph:\n\n<img src=\"https://github.com/bloomberg/memray/blob/main/docs/_static/images/flamegraph_example.png?raw=true\" align=\"center\"/>\n\n## Pytest plugin\n\nIf you want an easy and convenient way to use `memray` in your test suite, you can consider using [pytest-memray](https://github.com/bloomberg/pytest-memray). Once installed, this pytest plugin allows you to simply add `--memray` to the command line invocation:\n\n```shell\npytest --memray tests/\n```\n\nAnd will automatically get a report like this:\n\n```\npython3 -m pytest tests --memray\n=============================================================================================================================== test session starts ================================================================================================================================\nplatform linux -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\nrootdir: /mypackage, configfile: pytest.ini\nplugins: cov-2.12.0, memray-0.1.0\ncollected 21 items\n\ntests/test_package.py .....................                                                                                                                                                                                                                      [100%]\n\n\n================================================================================================================================= MEMRAY REPORT ==================================================================================================================================\nAllocations results for tests/test_package.py::some_test_that_allocates\n\n\t üì¶ Total memory allocated: 24.4MiB\n\t üìè Total allocations: 33929\n\t üìä Histogram of allocation sizes: |‚ñÇ   ‚ñà    |\n\t ü•á Biggest allocating functions:\n\t\t- parse:/opt/bb/lib/python3.8/ast.py:47 -> 3.0MiB\n\t\t- parse:/opt/bb/lib/python3.8/ast.py:47 -> 2.3MiB\n\t\t- _visit:/opt/bb/lib/python3.8/site-packages/astroid/transforms.py:62 -> 576.0KiB\n\t\t- parse:/opt/bb/lib/python3.8/ast.py:47 -> 517.6KiB\n\t\t- __init__:/opt/bb/lib/python3.8/site-packages/astroid/node_classes.py:1353 -> 512.0KiB\n```\n\nYou can also use some of the included markers to make tests\nfail if the execution of said test allocates more memory than allowed:\n\n```python\n@pytest.mark.limit_memory(\"24 MB\")\ndef test_foobar():\n    # do some stuff that allocates memory\n```\n\nTo learn more on how the plugin can be used and configured check out [the plugin documentation](https://bloomberg.github.io/pytest-memray/#).\n\n# Native mode\n\nMemray supports tracking native C/C++ functions as well as Python functions. This can be especially useful when profiling applications that have C extensions (such as `numpy` or `pandas`) as this gives a holistic vision of how much memory is allocated by the extension and how much is allocated by Python itself.\n\nTo activate native tracking, you need to provide the `--native` argument when using the `run` subcommand:\n\n```shell\nmemray run --native my_script.py\n```\n\nThis will automatically add native information to the result file and it will be automatically used by any reporter (such the flamegraph or table reporters). This means that instead of seeing this in the flamegraphs:\n\n<img src=\"https://github.com/bloomberg/memray/blob/main/docs/_static/images/mandelbrot_operation_non_native.png?raw=true\" align=\"center\"/>\n\nYou will now be able to see what's happening inside the Python calls:\n\n<img src=\"https://github.com/bloomberg/memray/blob/main/docs/_static/images/mandelbrot_operation_native.png?raw=true\" align=\"center\"/>\n\nReporters display native frames in a different color than Python frames. They can also be distinguished by looking at the file location in a frame (Python frames will generally be generated from files with a .py extension while native frames will be generated from files with extensions like .c, .cpp or .h).\n\n# Live mode\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/bloomberg/memray/main/docs/_static/images/live_animated.gif\" alt=\"Memray output\"></p>\n\nMemray's live mode runs a script or a module in a terminal-based interface that allows you to interactively inspect its memory usage while it runs. This is useful for debugging scripts or modules that take a long time to run or that exhibit multiple complex memory patterns. You can use the `--live` option to run the script or module in live mode:\n\n```shell\n    memray run --live my_script.py\n```\n\nor if you want to execute a module:\n\n```shell\n    memray run --live -m my_module\n```\n\nThis will show the following TUI interface in your terminal:\n\n<img src=\"https://raw.githubusercontent.com/bloomberg/memray/main/docs/_static/images/live_running.png\" align=\"center\"/>\n\n## Sorting results\n\nThe results are displayed in descending order of total memory allocated by a function and the subfunctions called by it. You can change the ordering with the following keyboard shortcuts:\n\n- t (default): Sort by total memory\n\n- o: Sort by own memory\n\n- a: Sort by allocation count\n\nThe sorted column is highlighted with `< >` characters around the title.\n\n## Viewing different threads\n\nBy default, the live command will present the main thread of the program. You can look at different threads of the program by pressing the left and right arrow keys.\n\n<img src=\"https://github.com/bloomberg/memray/blob/main/docs/_static/images/live_different_thread.png?raw=true\" align=\"center\"/>\n\n# API\n\nIn addition to tracking Python processes from a CLI using `memray run`, it is also possible to programmatically enable tracking within a running Python program.\n\n```py\nimport memray\n\nwith memray.Tracker(\"output_file.bin\"):\n    print(\"Allocations will be tracked until the with block ends\")\n```\n\nFor details, see the [API documentation](https://bloomberg.github.io/memray/api.html).\n\n# License\n\nMemray is Apache-2.0 licensed, as found in the [LICENSE](LICENSE) file.\n\n# Code of Conduct\n\n- [Code of Conduct](https://github.com/bloomberg/.github/blob/main/CODE_OF_CONDUCT.md)\n\nThis project has adopted a Code of Conduct. If you have any concerns about the Code, or behavior that you have experienced in the project, please contact us at opensource@bloomberg.net.\n\n# Security Policy\n\n- [Security Policy](https://github.com/bloomberg/memray/security/policy)\n\nIf you believe you have identified a security vulnerability in this project, please send an email to the project team at opensource@bloomberg.net, detailing the suspected issue and any methods you've found to reproduce it.\n\nPlease do NOT open an issue in the GitHub repository, as we'd prefer to keep vulnerability reports private until we've had an opportunity to review and address them.\n\n# Contributing\n\nWe welcome your contributions to help us improve and extend this project!\n\nBelow you will find some basic steps required to be able to contribute to the project. If you have any questions about this process or any other aspect of contributing to a Bloomberg open source project, feel free to send an email to opensource@bloomberg.net and we'll get your questions answered as quickly as we can.\n\n## Contribution Licensing\n\nSince this project is distributed under the terms of an [open source license](LICENSE), contributions that you make\nare licensed under the same terms. In order for us to be able to accept your contributions,\nwe will need explicit confirmation from you that you are able and willing to provide them under\nthese terms, and the mechanism we use to do this is called a Developer's Certificate of Origin\n[(DCO)](https://github.com/bloomberg/.github/blob/main/DCO.md). This is very similar to the process used by the Linux(R) kernel, Samba, and many\nother major open source projects.\n\nTo participate under these terms, all that you must do is include a line like the following as the\nlast line of the commit message for each commit in your contribution:\n\n    Signed-Off-By: Random J. Developer <random@developer.example.org>\n\nThe simplest way to accomplish this is to add `-s` or `--signoff` to your `git commit` command.\n\nYou must use your real name (sorry, no pseudonyms, and no anonymous contributions).\n\n## Steps\n\n- Create an Issue, select 'Feature Request', and explain the proposed change.\n- Follow the guidelines in the issue template presented to you.\n- Submit the Issue.\n- Submit a Pull Request and link it to the Issue by including \"#<issue number>\" in the Pull Request summary.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bloomberg/memray",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memray",
    "package_url": "https://pypi.org/project/memray/",
    "platform": null,
    "project_url": "https://pypi.org/project/memray/",
    "project_urls": {
      "Homepage": "https://github.com/bloomberg/memray"
    },
    "release_url": "https://pypi.org/project/memray/1.1.0/",
    "requires_dist": [
      "jinja2",
      "rich",
      "typing-extensions ; python_version < \"3.8.0\"",
      "asv ; extra == 'benchmark'",
      "Cython ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "check-manifest ; extra == 'dev'",
      "bump2version ; extra == 'dev'",
      "sphinx ; extra == 'dev'",
      "furo ; extra == 'dev'",
      "sphinx-argparse ; extra == 'dev'",
      "towncrier ; extra == 'dev'",
      "asv ; extra == 'dev'",
      "bump2version ; extra == 'docs'",
      "sphinx ; extra == 'docs'",
      "furo ; extra == 'docs'",
      "sphinx-argparse ; extra == 'docs'",
      "towncrier ; extra == 'docs'",
      "black ; extra == 'lint'",
      "flake8 ; extra == 'lint'",
      "isort ; extra == 'lint'",
      "mypy ; extra == 'lint'",
      "check-manifest ; extra == 'lint'",
      "Cython ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'"
    ],
    "requires_python": ">=3.7.0",
    "summary": "A memory profiler for Python applications",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16965245,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb2c62a7f1fadcbc6c1701bba30a315725d4755d399b178f9a790b279908e798",
        "md5": "632684b79f16cb5616eba85fd1ebb208",
        "sha256": "2ec2f43e80e6c30558ce87466d315329af844a20337ddba2f8b8c005c35e438d"
      },
      "downloads": -1,
      "filename": "memray-1.1.0-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.whl",
      "has_sig": false,
      "md5_digest": "632684b79f16cb5616eba85fd1ebb208",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.7.0",
      "size": 3170905,
      "upload_time": "2022-05-16T23:52:50",
      "upload_time_iso_8601": "2022-05-16T23:52:50.751427Z",
      "url": "https://files.pythonhosted.org/packages/bb/2c/62a7f1fadcbc6c1701bba30a315725d4755d399b178f9a790b279908e798/memray-1.1.0-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0857b3dfcc07375d0104557d8b1fb5ce88fbde5d4dc441355becf6b06052b977",
        "md5": "7739644fcd04d3d36de9ad6ad1c77884",
        "sha256": "378b03a38c491dcaf363e5e1f67f45ea64b058d00746004b5fc6253646782c6a"
      },
      "downloads": -1,
      "filename": "memray-1.1.0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "7739644fcd04d3d36de9ad6ad1c77884",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.7.0",
      "size": 3168303,
      "upload_time": "2022-05-16T23:52:52",
      "upload_time_iso_8601": "2022-05-16T23:52:52.792472Z",
      "url": "https://files.pythonhosted.org/packages/08/57/b3dfcc07375d0104557d8b1fb5ce88fbde5d4dc441355becf6b06052b977/memray-1.1.0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70d80f35bfd97f11ddf654cf8bdcb8223fa0ce411abcb8c4504dbedcae5153b7",
        "md5": "a73ff5258da94c12f9251562f37af5af",
        "sha256": "7e6760ddc26c3c03b388390717b2f60e91b4577740d15b69c0f39303c87a076d"
      },
      "downloads": -1,
      "filename": "memray-1.1.0-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl",
      "has_sig": false,
      "md5_digest": "a73ff5258da94c12f9251562f37af5af",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7.0",
      "size": 3205320,
      "upload_time": "2022-05-16T23:52:54",
      "upload_time_iso_8601": "2022-05-16T23:52:54.543625Z",
      "url": "https://files.pythonhosted.org/packages/70/d8/0f35bfd97f11ddf654cf8bdcb8223fa0ce411abcb8c4504dbedcae5153b7/memray-1.1.0-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8874bbd37eab8f5e53558229ba85e121a21e828417461d0e641ceac1df2dd1c",
        "md5": "83942b90d9346ab652c42b48f995de08",
        "sha256": "6f156f78307bf7178b1e40e0934c0820484e95b841aeb981bc977d65d8f473b6"
      },
      "downloads": -1,
      "filename": "memray-1.1.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "83942b90d9346ab652c42b48f995de08",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7.0",
      "size": 3201156,
      "upload_time": "2022-05-16T23:52:55",
      "upload_time_iso_8601": "2022-05-16T23:52:55.910471Z",
      "url": "https://files.pythonhosted.org/packages/d8/87/4bbd37eab8f5e53558229ba85e121a21e828417461d0e641ceac1df2dd1c/memray-1.1.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5c81e39c4eb4421fb9272dfd550402b18650f56ed676751a0d694f675f0f748",
        "md5": "db8d84e89b1787dea08c1bf29f0f34b0",
        "sha256": "74e11e305ce5341eb9ff8978e08ff53a2f554cf2f24e0be298481cee9a8b776a"
      },
      "downloads": -1,
      "filename": "memray-1.1.0-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl",
      "has_sig": false,
      "md5_digest": "db8d84e89b1787dea08c1bf29f0f34b0",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.7.0",
      "size": 3189757,
      "upload_time": "2022-05-16T23:52:57",
      "upload_time_iso_8601": "2022-05-16T23:52:57.644609Z",
      "url": "https://files.pythonhosted.org/packages/f5/c8/1e39c4eb4421fb9272dfd550402b18650f56ed676751a0d694f675f0f748/memray-1.1.0-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0bdf12571424e0b14f91871f726bcb4a55004198ea6f881c7d78bf1aa398eb0d",
        "md5": "e635770429601f76d7e04fb2dce54364",
        "sha256": "314e66b65b6dcc312148d134bf7e7f9f7c3a91c3912a8ea1bcc5fd1402b05179"
      },
      "downloads": -1,
      "filename": "memray-1.1.0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "e635770429601f76d7e04fb2dce54364",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.7.0",
      "size": 3187768,
      "upload_time": "2022-05-16T23:52:59",
      "upload_time_iso_8601": "2022-05-16T23:52:59.466697Z",
      "url": "https://files.pythonhosted.org/packages/0b/df/12571424e0b14f91871f726bcb4a55004198ea6f881c7d78bf1aa398eb0d/memray-1.1.0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a46ec09eadd8b21df297a7ce0c14e4def7f420b03f6fa21e3d9d25192618975f",
        "md5": "4b227c7950d0ef9694e10f1211a4cfc0",
        "sha256": "6d611744b5e01c342b17c2403a3e85fa8ce69ebb938b8bce39c299a2780ec796"
      },
      "downloads": -1,
      "filename": "memray-1.1.0-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl",
      "has_sig": false,
      "md5_digest": "4b227c7950d0ef9694e10f1211a4cfc0",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.7.0",
      "size": 3171078,
      "upload_time": "2022-05-16T23:53:01",
      "upload_time_iso_8601": "2022-05-16T23:53:01.068289Z",
      "url": "https://files.pythonhosted.org/packages/a4/6e/c09eadd8b21df297a7ce0c14e4def7f420b03f6fa21e3d9d25192618975f/memray-1.1.0-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d46fd3b8e9b6304ba4fa298b4c1070ed45401195742f5ada7525e2d81fda29d",
        "md5": "5359b50e6ca847dde3b12f7fda0f505e",
        "sha256": "ee6a2744dbb0945eb544a8b00da1c47cdd731dceb623d9c2a3cea595ddcab470"
      },
      "downloads": -1,
      "filename": "memray-1.1.0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "5359b50e6ca847dde3b12f7fda0f505e",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.7.0",
      "size": 3168976,
      "upload_time": "2022-05-16T23:53:02",
      "upload_time_iso_8601": "2022-05-16T23:53:02.665424Z",
      "url": "https://files.pythonhosted.org/packages/1d/46/fd3b8e9b6304ba4fa298b4c1070ed45401195742f5ada7525e2d81fda29d/memray-1.1.0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "832606d9c9c63065fd0ffad38e7d64686e3e1a6cc6455cdbb938ee36dc6dcd3f",
        "md5": "a957b4e43eb11fb40b7554f32d8b1d8d",
        "sha256": "876e46e0cd42394be48b33f81314bc946f4eb023b04bf1def084c25ccf1d2bb6"
      },
      "downloads": -1,
      "filename": "memray-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a957b4e43eb11fb40b7554f32d8b1d8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 934116,
      "upload_time": "2022-05-16T23:53:04",
      "upload_time_iso_8601": "2022-05-16T23:53:04.114469Z",
      "url": "https://files.pythonhosted.org/packages/83/26/06d9c9c63065fd0ffad38e7d64686e3e1a6cc6455cdbb938ee36dc6dcd3f/memray-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}