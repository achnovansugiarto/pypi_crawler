{
  "info": {
    "author": "Fredrik Bakkevig Haugli",
    "author_email": "fredrik.haugli@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Markon\n## Continous Time Markov Chain solver for Python\n\nMarkon is a small Python utility for performing analytic solution of CTMCs. Both quantitative and\nsymbolic analysis is possible.\n\nExample:\n```python\nfrom markon import solve_ctmc\n\n# Define a CTMC as a dict of state-tuples (from_state, to_state) to a transition rate\nt = {('up', 'down'): 1,  # Transition rate from 'up' to 'down' is 1\n     ('down', 'up'): 5}  # Transition rate from 'down' to 'up' is 5\n\n# Obtain steady state probabilities\np = solve_ctmc(t)\nprint(p)\n```\n\nwill output\n```sh\n{'down': 1/6, 'up': 5/6}\n```\n\nIndividual state probabilities can be obtained, both in exact form or as a single rounded float:\n```python\nprint(p['up'])\nprint(float(p['up']))\n```\nwill output\n```sh\n5/6\n0.8333333333333334\n```\n\nGeneral symbolic analysis can also be done via [Sympy](https://www.sympy.org/):\n\n```python\nfrom markon import solve_ctmc\nimport sympy\n\n# Define Sympy symbols\nl, m = sympy.symbols('l, m')\n\nt = {('up', 'down'): l,\n     ('down', 'up'): m}\n\n# Obtain steady state probabilities with defined order\np = solve_ctmc(t, ['up', 'down'])\nprint(p)\n```\n\nwill output\n```sh\n{'up': m/(l + m), 'down': l/(l + m)}\n```\n\n\nWe can then use Sympy functionality to substitute values\n\n```python\nvalues = [(l, 1), (m,5)]\nprint(p['up'].subs(values))\n```\n\nwill output\n```sh\n5/6\n```\n\nRefer to the [Sympy documentation](https://docs.sympy.org/) for more on how to enable nice formatting of expressions, output to Latex, etc.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://gitlab.com/fredrikh/markon",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "markon",
    "package_url": "https://pypi.org/project/markon/",
    "platform": "",
    "project_url": "https://pypi.org/project/markon/",
    "project_urls": {
      "Bug Reports": "https://gitlab.com/fredrikh/markon/-/issues",
      "Homepage": "http://gitlab.com/fredrikh/markon",
      "Source": "https://gitlab.com/fredrikh/markon/"
    },
    "release_url": "https://pypi.org/project/markon/1.0.0/",
    "requires_dist": [
      "sympy"
    ],
    "requires_python": "",
    "summary": "Simple CTMC solver for Python",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10794671,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bb87f564eb069a1b508ff57c3e58fe980d3f9b9d38d47e6922d6c2c001cb82c",
        "md5": "2c279dbdbcdaff80f248003b8d837df8",
        "sha256": "b0895b96b10917f0b1a1373b5cc7ee60fd60610953540f5a23cb22d734506949"
      },
      "downloads": -1,
      "filename": "markon-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2c279dbdbcdaff80f248003b8d837df8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3365,
      "upload_time": "2021-07-01T08:45:50",
      "upload_time_iso_8601": "2021-07-01T08:45:50.722731Z",
      "url": "https://files.pythonhosted.org/packages/7b/b8/7f564eb069a1b508ff57c3e58fe980d3f9b9d38d47e6922d6c2c001cb82c/markon-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}