{
  "info": {
    "author": null,
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Marathoner\n==========\n\nMarathoner is a command line tool for effective local testing of solutions for [Marathon Match competitions](http://community.topcoder.com/longcontest/?module=ViewActiveContests) organized by [TopCoder Inc.](http://www.topcoder.com/)\n\n\nFeatures\n--------\n\n- Cross-platform: Windows, Linux, Mac OS X. Written in Python.\n- VERY simple interface.\n  To run your solution on seed 5 just type: ```5```.\n  To run your solution on first 100 seeds, just type: ```1 100```.\n- Keeping track of the best scores for each seed, so you can compare your solutions locally.\n- Export of input data from visualizer into file, so you can debug on them.\n- Works with visualizer .jar files, so it doesn't require any changes to the solution code.\n\n\nInstallation\n------------\n\nGet Python at [http://www.python.org](http://www.python.org) (versions 2.6, 2.7 and 3.x are supported).\n\nIf you have *pip* Python package manager installed, run: ```pip install marathoner```.\n\nOr download the source code and from *marathoner* directory run: ```python setup.py install```.\n\n\nGetting started\n---------------\n\nLet me show you how to setup Marathoner for a recent Marathon Match called [ColorLinker](http://community.topcoder.com/longcontest/?module=ViewProblemStatement&compid=34370&rd=15825).\n\n1. Download the visualizer [ColorLinkerVis.jar](http://www.topcoder.com/contest/problem/ColorLinker/v2/ColorLinkerVis.jar).\n   Create a solution that communicates with visualizer as described [here](http://apps.topcoder.com/forums/?module=Thread&threadID=670892&start=0)\n   and make sure your solution works by running: ```java -jar ColorLinkerVis.jar -exec \"<command>\" -seed 1```\n\n2. From command line run: ```marathoner new ColorLinkerMarat```.\n\n   In your current directory Marathoner will create a new directory named *ColorLinkerMarat* where it will\n   store all files and folders related to ColorLinker match.\n\n3. Go into newly created directory *ColorLinkerMarat* and edit *marathoner.cfg* file.\n   Fill out its contents as described in comments inside the file. Here is an example of my .cfg file for this match:\n\n   ```\n   [marathoner]\n   visualizer = c:\\Users\\Mimino\\ColorLinker\\ColorLinkerVis.jar\n   solution = \"c:\\Users\\Mimino\\ColorLinker\\ColorLinker.exe\"  # notice the quotes here!\n   # for Java:\n   #   solution = java -cp \"c:\\Users\\Mimino\\ColorLinker\\ColorLinker.class\"\n   source = c:\\Users\\Mimino\\ColorLinker\\ColorLinker\\ColorLinker.cpp\n   testcase = c:\\Users\\Mimino\\ColorLinker\\testcase.txt\n   maximize = false\n   novis = -novis\n   vis =\n   params = -side 10\n   ```\n\n4. While still in *ColorLinkerMarat* directory, from command line run: ```marathoner run```.\n   If everything is okay, you should see a welcome message and the command line prompt. Try to run:\n   ```\n   >>> 1\n   Running single test 1...\n   Score = 123456.0\n           Run time: 0.14\n           New score: 1234567.00\n           Best score: 123456.00\n           Relative score: 0.09999\n   ```\n   You should see the visualization for the seed number 1. Close the visualizer and type another command.\n\n   Congratulations, you are now ready to compete!\n\n\nAvailable commands\n------------------\n\n#### &lt;seed&gt; [vis params]\nRun single test with visualization. Examples:\n```\n>>> 5                   # run seed 5\n>>> 5 -side 15          # run seed 5 with additional visualizer option \"-side 15\"\n```\n\n#### &lt;seed1&gt; &lt;seed2&gt; [vis params]\nRun multiple tests with seeds from interval *seed1*-*seed2*, inclusive. Visualization is turned off. Examples:\n```\n>>> 1 100               # run seeds from interval 1-100, inclusive\n>>> 1 100 -side 15      # run seeds from interval 1-100, inclusive, with additional visualizer option \"-side 15\"\n```\n\n#### best [seed1] [seed2]\nPrint the best scores for the seeds. Examples:\n```\n>>> best                # print the best scores for all the known seeds\n>>> best 5              # print the best score for seed 5\n>>> best 1 100          # print the best scores for seeds in interval 1-100, inclusive\n```\n\n#### clear\nClear console window.\n\n#### help\nShow list of available commands.\n\n#### quit\nQuit Marathoner prompt.\n\n\nTagging of solutions\n--------------------\n\nOnce you have implemented a solution that you plan to run on a large number\nof tests you can *tag* the solution, before you do so:\n```\n>>> tag create my_solution             # tag the current solution with name \"my_solution\"\n```\nMarathoner will compute the hash of your current source code (you specified path to your source file in .cfg file)\nand store it under the name \"*my_solution*\". Now whenever you run some tests,\nMarathoner will check the hash of your current source code against the hashes\nof the source codes that you have already tagged. If there is a match, Marathoner will\nstore the results of the tests under the matched tag name.\n```\n>>> tag                                 # display the list of existing tags\n|-----------------|----------------------------|\n|             Tag |                    Created |\n|-----------------|----------------------------|\n| (*) my_solution | 2013-12-13 04:26:54.636494 |\n|-----------------|----------------------------|\n(*) means current active tag\n>>> 1 100                               # run seeds 1-100 and store the scores under \"my_solution\" tag\nRunning 100 tests with tag \"my_solution\"...\n>>> 101 200                             # run seeds 101-200 and add them to \"my_solution\" tag\nRunning 100 tests with tag \"my_solution\"...\n>>> tag cmp my_solution                 # view the scores of seeds 1-200 of \"my_solution\" tag\n```\nAnd now comes the killer! When you have tagged many different solutions\nand you want to compare them against each other, simply run the command:\n```\n>>> tag cmp my_solution other_solution  # compare the scores of tags \"my_solution\" and \"other_solution\"\n```\n\nNote: Be careful when you change the source code of your solution and don't compile it, Marathoner will sill run the old code, but the hash of the source file will be different.\n\n\n#### tag\nPrint the list of existing tags. Examples:\n```\n>>> tag\n|---------------|----------------------------|\n|           Tag |                    Created |\n|---------------|----------------------------|\n| (*) solution1 | 2013-12-13 04:26:54.636494 |\n|     solution2 | 2013-12-13 01:14:32.049821 |\n|---------------|----------------------------|\n(*) means current active tag\n```\n\n#### tag create &lt;tag&gt;\nTag the current solution with the given name. Examples:\n```\n>>> tag create solution1                # tag the solution with name \"solution1\"\n>>> 1 10                                # run the seeds 1-10 and store them under \"solution1\" tag\nRunning 10 tests with tag \"solution1\"...\n\n( change source code of solution )\n>>> 1 10                                # now, because the source code has changed, the current solution doesn't have any tag\nRunning 10 tests...\n\n( change source code back )             # Marathoner automatically detects the change and \"solution1\" tag is active again\n>>> 11 20                               # run the seeds 11-20 and store them under \"solution1\" tag\nRunning 10 tests with tag \"solution1\"...\n```\n\n#### tag delete &lt;tag&gt;\nDelete the selected tag. Examples:\n```\n>>> tag delete solution1\nTag \"solution1\" was deleted.\n```\n\n#### tag cmp &lt;tag1&gt; &lt;tag2&gt; ...\nCompare the scores of the selected tags. Only the seeds that all the tags have in common will be compared. Examples:\n```\n>>> tag create solution1              # create tag \"solution1\"\n>>> 1 10                              # run the seeds 1-10 and store them under \"solution1\" tag\n>>> tag cmp solution1                 # view the scores of solution1 on seeds 1-10\n\n( change source code of solution )\n>>> tag create solution2              # create tag \"solution2\"\n>>> 5 15                              # run the seeds 5-15 and store them under \"solution2\" tag\n>>> tag cmp solution1 solution2       # compare the score of solutions on seeds 5-10 (these are the seeds they have in common)\n\n( chagnge source code again )\n>>> tag create solution3              # create tag \"solution3\"\n>>> 9 10                              # run the seeds 9-10 and store them under \"solution3\" tag\n>>> tag cmp solution1 solution2 solution3  # compare the score of solutions on seeds 9-10\n```\n\n\nTips and tricks\n---------------\n\n- If your solution gets stuck, type \"*Q*\" to terminate its execution. If you are executing multiple tests, it terminates the whole execution.\n- If your solution crashes on some seed and you want to debug it, you can find input data of this seed in file specified by *testcase* field in the .cfg file.\n- If you internally measure running time of your solution, from your solution output to standard error line in format: \"```Run time = <run_time>```\" and Marathoner will parse it out for further processing.\n- You can find log of the last multiple-tests run in *ColorLinkerMarat* directory, called *multiple_tests.log*.\n- When you run multiple tests, standard error output from your solution is not displayed. But lines starting with \"!\" are displayed, still.\n- Marathoner stores copies all the tagged source codes in *ColorLinkerMarat / tags* directory, so you can view them.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "marathoner",
    "package_url": "https://pypi.org/project/marathoner/",
    "platform": null,
    "project_url": "https://pypi.org/project/marathoner/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/marathoner/1.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": null,
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1725024,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca46f44db8191c49b8743a9ddbe522ffff3883792b5b78b39f5e7a789a0c8adb",
        "md5": "fe0990a8e5fe872f9b822ec480c9a699",
        "sha256": "fb1d1671ef3cc8ec03928328cafb2bd2adba4579e9ed729f44110429958ea0c1"
      },
      "downloads": -1,
      "filename": "marathoner-1.2.0.zip",
      "has_sig": false,
      "md5_digest": "fe0990a8e5fe872f9b822ec480c9a699",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37918,
      "upload_time": "2013-12-13T04:41:38",
      "upload_time_iso_8601": "2013-12-13T04:41:38.067039Z",
      "url": "https://files.pythonhosted.org/packages/ca/46/f44db8191c49b8743a9ddbe522ffff3883792b5b78b39f5e7a789a0c8adb/marathoner-1.2.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}