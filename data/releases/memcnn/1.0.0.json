{
  "info": {
    "author": "S.C. van de Leemput",
    "author_email": "silvandeleemput@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Medical Science Apps.",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "======\nMemCNN\n======\n\n.. image:: https://img.shields.io/circleci/build/github/silvandeleemput/memcnn/master.svg        \n        :alt: CircleCI - Status master branch\n        :target: https://circleci.com/gh/silvandeleemput/memcnn/tree/master\n\n.. image:: https://img.shields.io/docker/cloud/build/silvandeleemput/memcnn.svg\n        :alt: Docker - Status\n        :target: https://hub.docker.com/r/silvandeleemput/memcnn\n\n.. image:: https://readthedocs.org/projects/memcnn/badge/?version=latest        \n        :alt: Documentation - Status master branch\n        :target: https://memcnn.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/codacy/grade/95de32e0d7c54d038611da47e9f0948b/master.svg\n        :alt: Codacy - Branch grade\n        :target: https://app.codacy.com/project/silvandeleemput/memcnn/dashboardgit\n\n.. image:: https://img.shields.io/codecov/c/gh/silvandeleemput/memcnn/master.svg   \n        :alt: Codecov - Status master branch\n        :target: https://codecov.io/gh/silvandeleemput/memcnn\n\n.. image:: https://img.shields.io/pypi/v/memcnn.svg\n        :alt: PyPI - Latest release\n        :target: https://pypi.python.org/pypi/memcnn\n\n.. image:: https://img.shields.io/conda/vn/silvandeleemput/memcnn?label=anaconda\n        :alt: Conda - Latest release\n        :target: https://anaconda.org/silvandeleemput/memcnn\n\n.. image:: https://img.shields.io/pypi/implementation/memcnn.svg        \n        :alt: PyPI - Implementation\n        :target: https://pypi.python.org/pypi/memcnn\n\n.. image:: https://img.shields.io/pypi/pyversions/memcnn.svg        \n        :alt: PyPI - Python version\n        :target: https://pypi.python.org/pypi/memcnn\n\n.. image:: https://img.shields.io/github/license/silvandeleemput/memcnn.svg        \n        :alt: GitHub - Repository license\n        :target: https://github.com/silvandeleemput/memcnn/blob/master/LICENSE.txt\n\nA `PyTorch <http://pytorch.org/>`__ framework for developing memory-efficient invertible neural networks.\n\n* Free software: `MIT license <https://github.com/silvandeleemput/memcnn/blob/master/LICENSE.txt>`__ (please cite our work if you use it)\n* Documentation: https://memcnn.readthedocs.io.\n* Installation: https://memcnn.readthedocs.io/en/latest/installation.html\n\nFeatures\n--------\n\n* Simple `ReversibleBlock` wrapper class to wrap and convert arbitrary PyTorch Modules into invertible versions.\n* Simple switching between `additive` and `affine` invertible coupling schemes and different implementations.\n* Simple toggling of memory saving by setting the `keep_input` property of the `ReversibleBlock`.\n* Training and evaluation code for reproducing RevNet experiments using MemCNN.\n* CI tests for Python v2.7 and v3.6 and torch v0.4, v1.0, and v1.1 with good code coverage.\n\nExample usage: ReversibleBlock\n------------------------------\n\n.. code:: python\n\n    import torch\n    import torch.nn as nn\n    import memcnn\n\n\n    # define a new torch Module with a sequence of operations: Relu o BatchNorm2d o Conv2d\n    class ExampleOperation(nn.Module):\n        def __init__(self, channels):\n            super(ExampleOperation, self).__init__()\n            self.seq = nn.Sequential(\n                                        nn.Conv2d(in_channels=channels, out_channels=channels,\n                                                  kernel_size=(3, 3), padding=1),\n                                        nn.BatchNorm2d(num_features=channels),\n                                        nn.ReLU(inplace=True)\n                                    )\n\n        def forward(self, x):\n            return self.seq(x)\n\n    # generate some random input data (batch_size, num_channels, y_elements, x_elements)\n    X = torch.rand(2, 10, 8, 8)\n\n    # application of the operation(s) the normal way\n    model_normal = ExampleOperation(channels=10)\n    Y = model_normal(X)\n\n    # application of the operation(s) turned invertible using the reversible block\n    F = ExampleOperation(channels=10 // 2)\n    model_invertible = memcnn.ReversibleBlock(F, coupling='additive', keep_input=True, keep_input_inverse=True)\n    Y2 = model_invertible(X)\n\n    # The input (X) can be approximated (X2) by applying the inverse method of the reversible block on Y2\n    X2 = model_invertible.inverse(Y2)\n\nRun PyTorch Experiments\n-----------------------\n\nAfter installing MemCNN run:\n\n.. code:: bash\n\n    python -m memcnn.train [MODEL] [DATASET] [--fresh] [--no-cuda]\n\n* Available values for ``DATASET`` are ``cifar10`` and ``cifar100``.\n* Available values for ``MODEL`` are ``resnet32``, ``resnet110``, ``resnet164``, ``revnet38``, ``revnet110``, ``revnet164``\n* Use the ``--fresh`` flag to remove earlier experiment results.\n* Use the ``--no-cuda`` flag to train on the CPU rather than the GPU through CUDA.\n\nDatasets are automatically downloaded if they are not available.\n\nWhen using Python 3.* replace the ``python`` directive with the appropriate Python 3 directive. For example when using the MemCNN docker image use ``python3.6``.\n\nWhen MemCNN was installed using `pip` or from sources you might need to setup a configuration file before running this command.\nRead the corresponding section about how to do this here: https://memcnn.readthedocs.io/en/latest/installation.html\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/memcnn/",
    "keywords": "memcnn invertible PyTorch",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memcnn",
    "package_url": "https://pypi.org/project/memcnn/",
    "platform": "",
    "project_url": "https://pypi.org/project/memcnn/",
    "project_urls": {
      "Homepage": "http://pypi.python.org/pypi/memcnn/"
    },
    "release_url": "https://pypi.org/project/memcnn/1.0.0/",
    "requires_dist": [
      "Pillow",
      "numpy",
      "SimpleITK",
      "tensorboardX (==1.4)",
      "tensorflow (>=1.11.0)",
      "torch (>=0.4.0)",
      "torchvision",
      "tqdm"
    ],
    "requires_python": "",
    "summary": "A PyTorch framework for developing memory efficient deep invertible networks.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11151326,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60e96111141773bce355061744c0f7b40528a7778ec0e9f395285390b6cb132b",
        "md5": "4b5122d391c71ea2f977fde2f295a9c7",
        "sha256": "23d16f077964a59ac9198917a3a7975eadc5f256638fa1075680aa8c1ae8008d"
      },
      "downloads": -1,
      "filename": "memcnn-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4b5122d391c71ea2f977fde2f295a9c7",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 42784,
      "upload_time": "2019-07-28T18:52:33",
      "upload_time_iso_8601": "2019-07-28T18:52:33.116918Z",
      "url": "https://files.pythonhosted.org/packages/60/e9/6111141773bce355061744c0f7b40528a7778ec0e9f395285390b6cb132b/memcnn-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a30975e162ffba896b8de8c37d20232a0c6cc0fdd82db42f3a7575f7e50f352",
        "md5": "23ae96bc73478b3ee9aa03b82bc3cd06",
        "sha256": "1c2f45b531307b6142339568e8a493f0e309ff76eb6136cd9b6987c47fa9b887"
      },
      "downloads": -1,
      "filename": "memcnn-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "23ae96bc73478b3ee9aa03b82bc3cd06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40804,
      "upload_time": "2019-07-28T18:52:34",
      "upload_time_iso_8601": "2019-07-28T18:52:34.817252Z",
      "url": "https://files.pythonhosted.org/packages/1a/30/975e162ffba896b8de8c37d20232a0c6cc0fdd82db42f3a7575f7e50f352/memcnn-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}