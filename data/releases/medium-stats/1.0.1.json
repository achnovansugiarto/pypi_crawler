{
  "info": {
    "author": "Oliver Tosky",
    "author_email": "olivertosky@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Medium Stats Scraper\n\nA command-line tool and Python package to fetch your Medium profile statistics \nand save the data as JSON.\n\n*Executes the same API and Graphql requests as the Medium front-end does, providing \nyou with the data as it is, pre-rendered.*\n\n## Install\n\n```bash\n$ pip install medium-stats\n```\n\n## Setup\n\n### Step 1\n\nTo make authenticated requests to Medium for your stats, the CLI tool \nneeds **two** cookies from a signed-in Medium session - \"sid\" and \"uid\".\n\n*If you want to manually find and store your cookies:*\n\n- Sign in to Medium\n- Get to your browser's developer tools and find the tab that holds cookies:\n  - *Application* for Chrome \n  - *Storage* for Firefox\n- Scroll through the cookies for medium.com until you find 'sid' and 'uid'\n\n\n![](readme_extras/cookie_howto.gif)\n\nCreate a `.medium_creds.ini` file to hold these cookie values:\n\n```bash\ncat > path_to_directory/.medium_creds.ini << EOF\n[MEDIUM]\nsid=insert_sid_value_here\nuid=insert_uid_value_here\nEOF\n\n#Note: the default behavior of the package will search your home directory for \n#this file, but you are welcome to set it to whatever directory you like and \n#pass that path as an argument to the CLI tool.\n```\n\n***\n\n*If you want to automatically find and store your cookies:*\n\n```bash\n$ pip install medium-stats[selenium]\n```\n\nThis installs some extra dependencies allowing a webscraper to authenticate to Medium\non your behalf and grab your \"sid\" and \"uid\" cookies.  *Note: You must already have \nChrome installed.*\n\nCurrently only valid for Gmail OAuth:\n\n```bash\n$ medium-stats fetch-cookies --email [EMAIL] --pwd [PASSWORD]\n\n# Or specify that your password should be pulled from an environment variable:\n$ export MEDIUM_AUTH_PWD='[PASSWORD]'\n$ medium-stats fetch-cookies --email [EMAIL] --pwd-in-env\n```\n\n### Step 2 - *Optional*:\n\nCreate a directory for your stats exports; the CLI tool will run \nunder the working directory by default.\n\n```bash\n$ mkdir path_to_target_stats_directory\n```\n\nOnce executed the CLI tool will create the following directory structure:\n```\ntarget_stats_directory/\n    stats_exports/\n        agg_stats/ \n        agg_events/ \n        post_events/\n        post_referrers/\n```\n\n## Usage\n### Command-Line\n\nSimple Use: \n\n```bash\n$ medium-stats scrape -u [USERNAME] --all\n```\n\n> This will get all Medium stats until now. \n\nGeneral Use pattern:\n```bash\nmedium-stats scrape -u USERNAME [--output_dir DIR] (--creds PATH | (--sid SID --uid UID)) \\\n(--all | [--start PERIOD_START] [--end PERIOD END]) [--mode {summary, events, articles, referrers}]\n```\nFLAGS:\n\n| flag         |                      function                     |                        default |\n|--------------|:-------------------------------------------------:|---------------------------------------------:|\n| --all        | gets all stats until now |                        |\n| --end        |    end of period for stats fetched [exclusive]    | now (UTC) |\n| --start      | beginning of period for stats fetched [inclusive] | --end minus 1 day @midnight |\n| --output-dir |          directory to hold stats exports          | current working directory |\n| --creds      |              path to credentials file             | ~/.medium_stats.ini |\n| --sid        |          your Medium session id from cookie       |\n| --uid        |          your Medium user id from cookie          |\n| --mode       |       limits retrieval to particular statistics   | ['summary', 'events', 'articles', 'referrers']|\n\n### Python\n\nBasic Usage:\n```python\nfrom medium_stats.scraper import StatGrabber\n\n# get aggregated summary statistics; \"start\" & \"stop\" params also accept datetime objects\nme = StatGrabber('username', sid='sid', uid='uid', start='2020-03-01', stop='2020-04-01')\ndata = me.get_summary_stats()\n\n# get the unattributed event logs for all your stories:\ndata_events = me.get_summary_stats(events=True)\n\n# get individual article statistics\narticles = me.get_article_ids(data) # returns a list of article_ids\n\narticle_events = me.get_all_story_stats(articles) # daily event logs\nreferrers = me.get_all_story_stats(articles, type_='referrer') # all-time referral sources\n```\n\nNote: \"summary_stats\" and \"referrer\" data pre-aggregates to your full history, \ni.e. they don't take into account \"start\" & \"stop\" parameters.\n\n#### Example output:\n`data` (summary):\n```\n[   {   'claps': 3,\n        'collectionId': '',\n        'createdAt': 1570229100438,\n        'creatorId': 'UID',\n        'firstPublishedAt': 1583526956495,\n        'friendsLinkViews': 46,\n        'internalReferrerViews': 17,\n        'isSeries': False,\n        'postId': 'ARTICLE_ID',\n        'previewImage': {   'id': 'longstring.png',\n                            'isFeatured': True,\n                            'originalHeight': 311,\n                            'originalWidth': 627},\n        'readingTime': 7,\n        'reads': 67,\n        'slug': 'this-will-be-a-title',\n        'syndicatedViews': 0,\n        'title': 'This Will Be A Title',\n        'type': 'PostStat',\n        'updateNotificationSubscribers': 0,\n        'upvotes': 3,\n        'views': 394,\n        'visibility': 0},\n        ...\n```\n\n`data_events`:\n```\n[{  'claps': 0,\n    'flaggedSpam': 0,\n    'reads': 0,\n    'timestampMs': 1585695600000,\n    'updateNotificationSubscribers': 0,\n    'upvotes': 0,\n    'userId': 'UID',\n    'views': 1},\n        ...\n```\n\n`article_events`:\n```\n{'data': {\n    'post': [{\n        '__typename': 'Post',\n        'dailyStats': [\n            {   '__typename': 'DailyPostStat',\n                'internalReferrerViews': 1,\n                'memberTtr': 119,\n                'periodStartedAt': 1583452800000,\n                'views': 8},\n            ... \n            {   '__typename': 'DailyPostStat',\n                'internalReferrerViews': 5,\n                'memberTtr': 375,\n                'periodStartedAt': 1583539200000,\n                'views': 40}],\n        'earnings': {\n            '__typename': 'PostEarnings',\n            'dailyEarnings': [],\n            'lastCommittedPeriodStartedAt': 1585526400000},\n        'id': 'ARTICLE_ID'},\n        ...\n    ]}\n}\n```\n\n`referrers`:\n```\n{'data': {'post': [{'__typename': 'Post',\n                    'id': 'POST_ID',\n                    'referrers': [{'__typename': 'Referrer',\n                                   'internal': None,\n                                   'platform': None,\n                                   'postId': 'POST_ID',\n                                   'search': None,\n                                   'site': None,\n                                   'sourceIdentifier': 'direct',\n                                   'totalCount': 222,\n                                   'type': 'DIRECT'},\n                                  ...\n                                  {'__typename': 'Referrer',\n                                   'internal': None,\n                                   'platform': None,\n                                   'postId': 'POST_ID',\n                                   'search': None,\n                                   'site': {'__typename': 'SiteReferrer',\n                                            'href': 'https://www.inoreader.com/',\n                                            'title': None},\n                                   'sourceIdentifier': 'inoreader.com',\n                                   'totalCount': 1,\n                                   'type': 'SITE'}],\n                    'title': 'TITLE_HERE',\n                    'totalStats': {'__typename': 'SummaryPostStat',\n                                   'views': 395}},\n                    ...\n                   ]\n            }\n}\n```\n\n> If you set up your credentials file already, there is a helper class `MediumConfigHelper`,\nthat wraps the standard `configparser`:\n```python\nimport os\nfrom medium_stats.cli import MediumConfigHelper\n\ndefault_creds = os.path.join(os.path.expanduser('~'), '.medium_creds.ini')\n\ncookies = MediumConfigHelper(default_creds)\nsid = cookies.sid\nuid = cookies.uid\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Medium blog scraper analytics",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medium-stats",
    "package_url": "https://pypi.org/project/medium-stats/",
    "platform": "",
    "project_url": "https://pypi.org/project/medium-stats/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/medium-stats/1.0.1/",
    "requires_dist": [
      "requests",
      "selenium ; extra == 'selenium'",
      "webdriver-manager ; extra == 'selenium'"
    ],
    "requires_python": "",
    "summary": "CLI tool to fetch your Medium stats",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13020871,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af03fa6e787c390eacf7160a15bc9d34444d08094879b655e3faf2cc013220a5",
        "md5": "52214f68d7e0f76ac08bac195d696258",
        "sha256": "9610b4b3bc307040ef204be01027d6565796a5f24a48a2e8a7f52d71d9e5220e"
      },
      "downloads": -1,
      "filename": "medium_stats-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "52214f68d7e0f76ac08bac195d696258",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24854,
      "upload_time": "2020-04-01T18:46:43",
      "upload_time_iso_8601": "2020-04-01T18:46:43.558562Z",
      "url": "https://files.pythonhosted.org/packages/af/03/fa6e787c390eacf7160a15bc9d34444d08094879b655e3faf2cc013220a5/medium_stats-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1df52ca2c52552b44b289a92ef948fae33b6b638a848a443899611d99fc90cb",
        "md5": "65074e45f55ff39747d583dc2d94d248",
        "sha256": "60db4ba63173d7e4da3bb930d9da407aedccae201e6b85ddeffdabbd56cae9b7"
      },
      "downloads": -1,
      "filename": "medium-stats-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "65074e45f55ff39747d583dc2d94d248",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25918,
      "upload_time": "2020-04-01T18:46:44",
      "upload_time_iso_8601": "2020-04-01T18:46:44.721619Z",
      "url": "https://files.pythonhosted.org/packages/e1/df/52ca2c52552b44b289a92ef948fae33b6b638a848a443899611d99fc90cb/medium-stats-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}