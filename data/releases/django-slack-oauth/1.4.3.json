{
  "info": {
    "author": "Sergey Keller",
    "author_email": "izdieu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<img src=\"http://i.imgur.com/YF8yAJS.png\" width=\"80\">\n\n# Django Slack OAuth\n\nA lightweight module for integrating your Django application with Slack.\n\n## Requirements\n\n- Django >= 1.8\n\nTo use Slack OAuth in your Django app, you'll need your `SLACK_CLIENT_ID` and `SLACK_CLIENT_SECRET` which can be found when you [Create a New Slack Application](https://api.slack.com/applications).\n\n\n## Instructions\n\n1. Install using pip:\n\n    ```\n    $ pip install django-slack-oauth\n    ```\n\n2. Add `django_slack_oauth` to `INSTALLED_APPS` in `settings.py`:\n\n    ```python\n    INSTALLED_APPS = (\n        ...\n        'django_slack_oauth',\n    )\n    ```\n\n3. Run initial migrations:\n\n    ```\n    $ python manage.py migrate\n    ```\n\n4. Add Slack OAuth base url to your project's `urls.py`:\n\n    ```python\n    urlpatterns = [\n        ...\n        url(r'^slack/', include('django_slack_oauth.urls')),\n        ...\n    ]\n    ```\n\n5. Specify your Slack credentials and OAuth Scope in `settings.py`:\n\n    ```python\n    SLACK_CLIENT_ID = os.environ.get('SLACK_CLIENT_ID')\n    SLACK_CLIENT_SECRET = os.environ.get('SLACK_CLIENT_SECRET')\n    SLACK_SCOPE = 'admin,bot'\n    ```\n    If you aren't sure what your scope should be, read more about [Slack OAuth Scopes](https://api.slack.com/docs/oauth-scopes).\n\n## Example\n\nAdd a link to Slack OAuth in one of your templates:\n\n```\n<a href='{% url 'slack_auth' %}'>Get slacked</a>\n```\n\nAfter clicking it, you will be redirected to Slack for the OAuth process. If successful, you will be redirected to a view showing a success message. You can change this view by setting `SLACK_SUCCESS_REDIRECT_URL` in `settings.py`.\n\nYou can then view the successful request and API data in the Admin under Slack OAuth Requests.\n\n\n## Advanced Usage\n\n### Pipelines\n\nPipelines allow you to create actions after a successful OAuth authentication. Some use cases may be:\n\n- Register an account for the user\n- Capture returned API data from Slack after authentication (Default Behaviour)\n- Send Slack messages to the user's Slack team after authentication\n\nThey are simply a list of functions, which get called in order. They must accept and return two parameters: `request` and `api_data`, containing the initial request and returned API data respectively.\n\nPipelines are defined as a list of callables in `settings.py`:\n\n```python\nSLACK_PIPELINES = [\n    'path.to.function1',\n    'path.to.function2',\n    ...\n]\n```\n\n\n- **Example 1:** Show returned data from the OAuth request\n\n    *settings.py*\n\n    ```python\n    ...\n    SLACK_PIPELINES = [\n        'my_app.pipelines.debug_oauth_request',\n    ]\n    ```\n\n    *my_app/pipelines.py*\n\n    ```python\n    def debug_oauth_request(request, api_data):\n        print(api_data)\n        return request, api_data\n    ```\n\n- **Example 2:** Register User and send an email\n\n    *settings.py*\n\n    ```python\n    ...\n    SLACK_PIPELINES = [\n        'my_app.pipelines.register_user',\n        'my_app.pipelines.send_email',\n    ]\n    ```\n\n    *my_app/pipelines.py*\n\n    ```python\n    from django.contrib.auth.models import User\n\n    from django_slack_oauth.models import SlackUser\n\n\n    def register_user(request, api_data):\n        if api_data['ok']:\n            user, created = User.objects.get_or_create(\n                username=api_data['team_id']+':'+api_data['user_id']\n            )\n\n            if user.is_active:\n                slacker, _ = SlackUser.objects.get_or_create(slacker=user)\n                slacker.access_token = api_data.pop('access_token')\n                slacker.extras = api_data\n                slacker.save()\n\n            if created:\n                request.created_user = user\n\n        return request, api_data\n\n\n    def notify(request, api_data):\n        if hasattr(request, 'created_user'):\n            notify_admins(\"New user with id {} has been created.\".format(request.created_user))\n            notify_user(request.created_user)\n\n        return request, api_data\n    ```\n\n_Thanks to_ [Daniel van Flymen](https://github.com/dvf)\n\n### Slack Endpoints\n\nThe following parameters may be overriden, in the (rare) case that Slack changes their endpoints:\n\n```python\nSLACK_AUTHORIZATION_URL = 'https://slack.com/oauth/authorize'\nSLACK_OAUTH_ACCESS_URL = 'https://slack.com/api/oauth.access'\n```\n\n### Forgery Attacks\n\nTo avoid forgery attacks we pass the `state` parameter in the initial authorization request. This state is stored in cache. For production environments, it's highly recommended to avoid using `LocMemCache`, and set up your cache backend using `redis` or `MemcachedCache`. For example:\n\n```python\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n        'LOCATION': '127.0.0.1:11211',\n    }\n}\n```",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/izdi/django-slack-oauth/tarball/1.4.3",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/izdi/django-slack-oauth",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-slack-oauth",
    "package_url": "https://pypi.org/project/django-slack-oauth/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-slack-oauth/",
    "project_urls": {
      "Download": "https://github.com/izdi/django-slack-oauth/tarball/1.4.3",
      "Homepage": "https://github.com/izdi/django-slack-oauth"
    },
    "release_url": "https://pypi.org/project/django-slack-oauth/1.4.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Handles OAuth and stores slack token",
    "version": "1.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4574914,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78575d12edc3e973410711181a05c99ccbddb5580b5025c22a19f63c7858f6ed",
        "md5": "4aeae038806372879eb18277a8be29c5",
        "sha256": "4602f7ff9e0d5a72efe7fc60565ccf75f1eb3672c93e80aeb5c6fc3a8b248100"
      },
      "downloads": -1,
      "filename": "django-slack-oauth-1.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4aeae038806372879eb18277a8be29c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7173,
      "upload_time": "2017-12-24T18:06:40",
      "upload_time_iso_8601": "2017-12-24T18:06:40.596522Z",
      "url": "https://files.pythonhosted.org/packages/78/57/5d12edc3e973410711181a05c99ccbddb5580b5025c22a19f63c7858f6ed/django-slack-oauth-1.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}