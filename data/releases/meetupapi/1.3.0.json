{
  "info": {
    "author": "Marco",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Meetup-API\nUse the combined power of the official Meetup API and a web scraper to implement Meetup into your project.\n\nWant to support the development financially? Donations are always welcomed! \n[Click here to donate on Liberapay](https://liberapay.com/marcoEDU)\n\n[<img src=\"http://img.shields.io/liberapay/receives/marcoEDU.svg?logo=liberapay\">](https://liberapay.com/marcoEDU)\n\n## Installation\n\n```\npip install MeetupAPI\n```\n\n## Usage\n\n```\nfrom MeetupAPI import Meetup\n```\n\n### API credentials optional\n\n#### Meetup().events()\n\nBased on [https://www.meetup.com/meetup_api/docs/:urlname/events/#list](https://www.meetup.com/meetup_api/docs/:urlname/events/#list)\n\nMeetup().events() will return a JSON with events from the group you enter. By default it returns the first 10.000 events of the group.\n\nRequired inputs for Meetup():\n```\ngroupname = str\n```\n\nOptional inputs for .events():\n```\nresults_per_page = int\npages = 'all' or int ('all' is default)\nmaximum_num_results = int\nfields = list\n```\n\n### API credentials required\n\n#### Meetup().upcoming_events()\n\nBased on [https://www.meetup.com/meetup_api/docs/find/upcoming_events/](https://www.meetup.com/meetup_api/docs/find/upcoming_events/)\n\nWill return a list of upcoming events on Meetup.\n\nRequired inputs for Meetup():\n```\ngroupname = str\nclient_id = str\nclient_secret = str\nredirect_uri = str\n```\n\nOptional inputs for .upcoming_events():\n```\nresults_per_page = int\npages = 'all' or int ('all' is default)\nmaximum_num_results = int\ncity = str (Example: 'Berlin, Germany' or 'New York, NY')\nlat = float\nlon = float\ntext = str\ntopic_category = int\nmin_num_attendees = int\nfilter = list (options are: \n    'online_meetups' -> filters for online meetups, on zoom, skype, jitsi, etc.\n    'lang:{language short code}' -> filter for events who's title is in the language you define. Example: 'lang:en' or 'lang:de'\n    'group_urls_only' -> returns urls of groups instead of events as json\n```\n\n#### Meetup().create()\n\nBased on [https://www.meetup.com/meetup_api/docs/:urlname/events/#create](https://www.meetup.com/meetup_api/docs/:urlname/events/#create)\n\nIf successfull, Meetup().create() will return the event it was given, but with the meetup link as event.url_meetup_event.\nIf the request fails, Meetup().create returns None.\n\nRequired inputs for Meetup():\n```\ngroupname = str\nclient_id = str\nclient_secret = str\nredirect_uri = str\n```\n\nOptional inputs for Meetup():\n```\ndefault_space_name = str\ndefault_space_address_street = str\ndefault_space_address_zip = str\ndefault_space_address_city = str\ndefault_space_address_countrycode = str\ndefault_space_how_to_find_us = str\ndefault_space_timezonestring = str\n```\n\nRequired inputs for .create():\n```\nevent = Event class (with fields \n    'str_name_en_US',\n    'text_description_en_US',\n    'int_minutes_duration',\n    'float_lat',\n    'float_lon',\n    'str_name_en_US',\n    'int_UNIXtime_event_start',\n    'url_meetup_event' \n    and Event.save() function)\n```\n\nOptional inputs for .create():\n```\nannounce = boolean (announces the event to group members on meetup)\npublish_status = 'draft' or 'published' (default is 'draft')\n```\n\n\n#### Meetup().delete()\n\nBased on [https://www.meetup.com/meetup_api/docs/:urlname/events/#delete](https://www.meetup.com/meetup_api/docs/:urlname/events/#delete)\n\nIf successfull, Meetup().delete() will return the event it was given, but with event.url_meetup_event = None.\nIf the request fails, Meetup().delete returns None.\n\nRequired inputs for Meetup():\n```\ngroupname = str\nclient_id = str\nclient_secret = str\nredirect_uri = str\n```\n\nRequired inputs for .delete():\n```\nevent = Event class (with field 'url_meetup_event' and Event.save() function)\n```\n\n\n#### Meetup().message()\n\nMeetup().message() can send a message (including optional placeholders) to one or multiple other users.\n\nRequired inputs for Meetup():\n```\nemail = str (required because Meetup doesn't have an API function for sending messages, so it's done via Selenium)\npassword = str (required because Meetup doesn't have an API function for sending messages, so it's done via Selenium)\n```\n\nRequired inputs for .message():\n```\nreceiver_member_ids = str or list\nmessage = str\n```\n\nOptional inputs for .message():\n```\njson_placeholders = list (with json entries in this scheme: {'keyword':xxxx,'replace_with':yyyyy})\nsave_log = boolean\nlog_path = str (default: 'sent_messages_log.json')\nspam_prevention = boolean (default: True, prevents sending the same message multiple times to the same user or sending too many messages in a short time period to the same user)\nspam_prevention_wait_time_minutes = int (default: 1440)\ntest = boolean (default: False, makes a screenshot of the message instead of sending the message)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marcoEDU/Meetup-API",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MeetupAPI",
    "package_url": "https://pypi.org/project/MeetupAPI/",
    "platform": "",
    "project_url": "https://pypi.org/project/MeetupAPI/",
    "project_urls": {
      "Homepage": "https://github.com/marcoEDU/Meetup-API"
    },
    "release_url": "https://pypi.org/project/MeetupAPI/1.3.0/",
    "requires_dist": [
      "requests",
      "PyWebScraper"
    ],
    "requires_python": ">=3.6",
    "summary": "Use the combined power of the official Meetup API and a web scraper to implement Meetup into your project.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7534363,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b418443361ef687577752e0ea7023e16bd9ef559455e67cf8aced908d59589d",
        "md5": "96136ba1359e553eef1491b2e3373512",
        "sha256": "2e10853fbb0fff1c1881c7562933444ce8da15a12537aaae7d99326eee525401"
      },
      "downloads": -1,
      "filename": "MeetupAPI-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "96136ba1359e553eef1491b2e3373512",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28087,
      "upload_time": "2020-04-19T13:34:35",
      "upload_time_iso_8601": "2020-04-19T13:34:35.739866Z",
      "url": "https://files.pythonhosted.org/packages/6b/41/8443361ef687577752e0ea7023e16bd9ef559455e67cf8aced908d59589d/MeetupAPI-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2dfcfce4709cb3c7c46def475e6dfefd361fc1bab74c5d282b53621a236d8cd",
        "md5": "eae93bfdb3e085f27ac2fe21bb0a0651",
        "sha256": "02b179f29888b8d55b404cf0c750ce8222c88897bfb2e725cd7dc586c42811ef"
      },
      "downloads": -1,
      "filename": "MeetupAPI-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "eae93bfdb3e085f27ac2fe21bb0a0651",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12310,
      "upload_time": "2020-04-19T13:34:39",
      "upload_time_iso_8601": "2020-04-19T13:34:39.116795Z",
      "url": "https://files.pythonhosted.org/packages/b2/df/cfce4709cb3c7c46def475e6dfefd361fc1bab74c5d282b53621a236d8cd/MeetupAPI-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}