{
  "info": {
    "author": "Marco",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Meetup-API\nUse the combined power of the official Meetup API and a web scraper to implement Meetup into your project.\n\nWant to support the development financially? Donations are always welcomed! \n<a href=\"https://liberapay.com/marcoEDU/donate\"><img alt=\"Donate using Liberapay\" src=\"https://liberapay.com/assets/widgets/donate.svg\"></a>\n\n## Installation\n\n```\npip install MeetupAPI\n```\n\n## Usage\n\n```\nfrom MeetupAPI import Meetup\n```\n\n### API credentials optional\n\n#### Meetup().events()\n\nBased on [https://www.meetup.com/meetup_api/docs/:urlname/events/#list](https://www.meetup.com/meetup_api/docs/:urlname/events/#list)\n\nMeetup().events() will return a JSON with events from the group you enter. By default it returns the first 10.000 events of the group.\n\nRequired inputs for Meetup():\n```\ngroupname = str\n```\n\nOptional inputs for .events():\n```\nresults_per_page = int\npages = 'all' or int ('all' is default)\nmaximum_num_results = int\nfields = list\n```\n\n\n#### Meetup().message()\n\nMeetup().message() can send a message (including optional placeholders) to one or multiple other users.\n\nRequired inputs for .message():\n```\nreceiver_members = dict or list (Example: {'name':'xxxx','id':'yyyy'})\nmessage = str\n```\n\nOptional inputs for .message():\n```\njson_placeholders = list (with json entries in this scheme: {'keyword':xxxx,'replace_with':yyyyy})\nsave_log = boolean\nlog_path = str (default: 'sent_messages_log.json')\nspam_prevention = boolean (default: True, prevents sending the same message multiple times to the same user or sending too many messages in a short time period to the same user)\nspam_prevention_wait_time_minutes = int (default: 1440)\ntest = boolean (default: False, makes a screenshot of the message instead of sending the message)\nauto_close_selenium = boolean (default: True, closes the web browser when finished with sending a message)\nscraper = PyWebScraper class (default: None, needed if you want to send multiple messages in the same browser window)\n```\n\n### API credentials required\n\n#### Meetup().upcoming_events()\n\nBased on [https://www.meetup.com/meetup_api/docs/find/upcoming_events/](https://www.meetup.com/meetup_api/docs/find/upcoming_events/)\n\nWill return a list of upcoming events on Meetup.\n\nRequired inputs for Meetup():\n```\ngroupname = str\nclient_id = str\nclient_secret = str\nredirect_uri = str\n```\n\nOptional inputs for .upcoming_events():\n```\nresults_per_page = int\npages = 'all' or int ('all' is default)\nmaximum_num_results = int\ncity = str (Example: 'Berlin, Germany' or 'New York, NY')\nlat = float\nlon = float\ntext = str\ntopic_category = int\nmin_num_attendees = int\nfilter = list (options are: \n    'online_meetups' -> filters for online meetups, on zoom, skype, jitsi, etc.\n    'lang:{language short code}' -> filter for events who's title is in the language you define. Example: 'lang:en' or 'lang:de'\n    'group_urls_only' -> returns urls of groups instead of events as json\n```\n\n#### Meetup().create()\n\nBased on [https://www.meetup.com/meetup_api/docs/:urlname/events/#create](https://www.meetup.com/meetup_api/docs/:urlname/events/#create)\n\nIf successfull, Meetup().create() will return the event it was given, but with the meetup link as event.url_meetup_event.\nIf the request fails, Meetup().create returns None.\n\nRequired inputs for Meetup():\n```\ngroupname = str\nclient_id = str\nclient_secret = str\nredirect_uri = str\n```\n\nOptional inputs for Meetup():\n```\ndefault_space_name = str\ndefault_space_address_street = str\ndefault_space_address_zip = str\ndefault_space_address_city = str\ndefault_space_address_countrycode = str\ndefault_space_how_to_find_us = str\ndefault_space_timezonestring = str\n```\n\nRequired inputs for .create():\n```\nevent = Event class (with fields \n    'str_name_en_US',\n    'text_description_en_US',\n    'int_minutes_duration',\n    'float_lat',\n    'float_lon',\n    'str_name_en_US',\n    'int_UNIXtime_event_start',\n    'url_meetup_event' \n    and Event.save() function)\n```\n\nOptional inputs for .create():\n```\nannounce = boolean (announces the event to group members on meetup)\npublish_status = 'draft' or 'published' (default is 'draft')\n```\n\n\n#### Meetup().delete()\n\nBased on [https://www.meetup.com/meetup_api/docs/:urlname/events/#delete](https://www.meetup.com/meetup_api/docs/:urlname/events/#delete)\n\nIf successfull, Meetup().delete() will return the event it was given, but with event.url_meetup_event = None.\nIf the request fails, Meetup().delete returns None.\n\nRequired inputs for Meetup():\n```\ngroupname = str\nclient_id = str\nclient_secret = str\nredirect_uri = str\n```\n\nRequired inputs for .delete():\n```\nevent = Event class (with field 'url_meetup_event' and Event.save() function)\n```\n\n\n#### Meetup().message_group_organizer()\n\nMeetup().message_group_organizer() can message the group organizers from all groups of all upcoming events in selected cities. Have in mind that there is a limit of 20 messages/day integrated into this function, to prevent you getting blocked by Meetup.\n\nOptional inputs for .message_group_organizer():\n```\nmessages = str or list (default: None. If a list is given, a random message will be selected)\nmessages_paths = str or list (default: 'message_to_organizer.txt', create a text file in that path to define a message which will be send. If a list is given, a random message will be selected)\ncities = list (default: [\n                        'San Francisco, CA',\n                        'Los Angeles, CA',\n                        'New York, NY',\n                        'Seattle, WA',\n                        'Boston, MA',\n                        'Chicago, IL',\n                        'Detroit, Michigan',\n                        'Washington, DC',\n                        'Miami, FL',\n                        'Toronto, Canada',\n                        'Barcelona, Spain',\n                        'Madrid, Spain',\n                        'Paris, France',\n                        'Rome, Italy',\n                        'Milano, Italy',\n                        'London, UK',\n                        'Berlin, Germany',\n                        'Munich, Germany',\n                        'Vienna, Austria',\n                        'Amsterdam, Netherlands',\n                        'Singapore, Singapore',\n                        'Hong Kong, Hong Kong',\n                        'Tokyo, Japan',\n                        'Seoul, South Korea'\n                    ])\ncities_processed_path = str (default: 'processed_cities.json', where the progress of processed cities will be saved)\nmaximum_num_results = int (default: 20, how many group organizer per city should be messaged. Have in mind: the daily messaging limit is 20)\nfilters = list (default: ['online_meetups', 'lang:en'], filters for upcoming_events, from which the group organizers will be collected)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marcoEDU/Meetup-API",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MeetupAPI",
    "package_url": "https://pypi.org/project/MeetupAPI/",
    "platform": "",
    "project_url": "https://pypi.org/project/MeetupAPI/",
    "project_urls": {
      "Homepage": "https://github.com/marcoEDU/Meetup-API"
    },
    "release_url": "https://pypi.org/project/MeetupAPI/1.5.2/",
    "requires_dist": [
      "requests",
      "PyWebScraper",
      "geopy"
    ],
    "requires_python": ">=3.6",
    "summary": "Use the combined power of the official Meetup API and a web scraper to implement Meetup into your project.",
    "version": "1.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7534363,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a65d821c1cc98cc79e114fc711564a56ffb9560bf0ed4f05445d1a7dab87c9ce",
        "md5": "9892b83f195a3c44dd8ef0c9d8ceb45d",
        "sha256": "f1280c213c78c9c26180943b31e8ea6f9c498132b1ac4bd2b91996ab5f4d992c"
      },
      "downloads": -1,
      "filename": "MeetupAPI-1.5.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9892b83f195a3c44dd8ef0c9d8ceb45d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 31157,
      "upload_time": "2020-05-25T20:59:09",
      "upload_time_iso_8601": "2020-05-25T20:59:09.557506Z",
      "url": "https://files.pythonhosted.org/packages/a6/5d/821c1cc98cc79e114fc711564a56ffb9560bf0ed4f05445d1a7dab87c9ce/MeetupAPI-1.5.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcedafa869add9a9151b777a023cfcc31e31efee43cfcd4ec752ddaf0af3c889",
        "md5": "4fd978b8a83662d323d25bfa55565e86",
        "sha256": "05b14dd27e286080455c0a1964da41dd02f3bd913546facf346ae49f9f6cb61c"
      },
      "downloads": -1,
      "filename": "MeetupAPI-1.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4fd978b8a83662d323d25bfa55565e86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15049,
      "upload_time": "2020-05-25T20:59:18",
      "upload_time_iso_8601": "2020-05-25T20:59:18.082802Z",
      "url": "https://files.pythonhosted.org/packages/bc/ed/afa869add9a9151b777a023cfcc31e31efee43cfcd4ec752ddaf0af3c889/MeetupAPI-1.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}