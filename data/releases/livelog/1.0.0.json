{
  "info": {
    "author": "PabloLec",
    "author_email": "pablo.lecolinet@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n<div align=\"center\">\n\n<h1>livelog</h1>\n\n<a href=\"https://img.shields.io/github/v/release/pablolec/livelog\" target=\"_blank\">\n    <img src=\"https://img.shields.io/github/v/release/pablolec/livelog\" alt=\"Release\">\n</a>\n\n<a href=\"https://github.com/PabloLec/livelog/blob/main/LICENSE\" target=\"_blank\">\n    <img src=\"https://img.shields.io/github/license/pablolec/livelog\" alt=\"License\">\n</a>\n\n<a href=\"https://github.com/PabloLec/livelog/actions/workflows/linux-tests.yml\" target=\"_blank\">\n    <img src=\"https://github.com/PabloLec/livelog/actions/workflows/linux-tests.yml/badge.svg\" alt=\"Linux\">\n</a>\n\n<a href=\"https://github.com/PabloLec/livelog/actions/workflows/macos-tests.yml\" target=\"_blank\">\n    <img src=\"https://github.com/PabloLec/livelog/actions/workflows/macos-tests.yml/badge.svg\" alt=\"macOS\">\n</a>\n\n<a href=\"https://github.com/PabloLec/livelog/actions/workflows/windows-tests.yml\" target=\"_blank\">\n    <img src=\"https://github.com/PabloLec/livelog/actions/workflows/windows-tests.yml/badge.svg\" alt=\"Windows\">\n</a>\n\n</div>\n\n---\n\n`livelog` is yet another Python logger.\n\nIts main purpose is to provide live logging for situation where logging to console is not possible. For example working on a GUI, TUI, a software plugin or a script instanciated from a different shell.\n\nIt provides a `Logger` object for your code and a built-in reader to see your logs in real time from another shell.\nEven if its overall behavior is opinionated it does offer some customization.\n\n## Demo\n\n<p align=\"center\">\n    <img src=\"docs/assets/demo.gif\">\n</p>\n\n\n## Installation\n\n```\npython3 -m pip install livelog\n```\n\n## Logging\n\n#### Basics\n\nIn your code, create a `Logger` instance with:\n\n``` python\nfrom livelog import Logger\n\nlogger = Logger()\n```\n\n#### Parameters\n\n`Logger` takes multiple optional arguments:\n\n- `file` (str): Path for your logging file. Default is a file named \"livelog.log\" in your system tmp directory.\n- `level` (str): Minimum level to be logged. Default is \"DEBUG\", you can also select \"INFO\", \"WARNING\", and \"ERROR\". Note that level filtering can also be done directly from the reader.\n- `enabled` (bool): Whether logging is enabled or not. Default is True.\n- `erase` (bool): Whether preexisting logging file should be erased or not. Default is True.\n\n``` python\nfrom livelog import Logger\n\nlogger = Logger(file= \"/home/user/\",\n                level = \"INFO\",\n                enabled = False,\n                erase = False)\n```\n\n#### Methods\n\nUse the following methods to write log messages:\n\n- `logger.debug(\"message\")`\n- `logger.info(\"message\")`\n- `logger.warn(\"message\")`\n- `logger.error(\"message\")`\n\n``` python\nfrom livelog import Logger\n\nlogger = Logger()\nlogger.debug(\"This is a debug message\")\nlogger.info(\"This is an info message\")\nlogger.warn(\"This is a warning message\")\nlogger.error(\"This is an error message\")\n```\n\n#### Attributes\n\nYou can get and set attributes after instantiation:\n\n``` python\nfrom livelog import Logger\n\nlogger = Logger(file=\"/tmp/file.log\")\nlogger.debug(\"This will write to /tmp/file.log\")\n\nlogger.file = \"/tmp/another_file.log\"\nlogger.debug(\"This will write to /tmp/another_file.log\")\n\nlogger.level = \"ERROR\"\nlogger.debug(\"This debug message will not be written.\")\n\nlogger.enabled = False\nlogger.error(\"Logging disabled. This error message will not be written.\")\n```\n\n#### Singleton\n\n`livelog` also provides a built-in singleton:\n\n```your_first_file.py```\n``` python\nfrom livelog import LoggerSingleton\n\n\nlogger = LoggerSingleton(file=\"/tmp/file.log\")\nlogger.debug(\"This will write to /tmp/file.log\")\n```\n\n```another_file.py```\n``` python\nfrom livelog import LoggerSingleton\n\n\nlogger = LoggerSingleton()\n# LoggerSingleton() returned the instance from your first file.\nlogger.debug(\"This will write to /tmp/file.log\")\n```\n\n## Reading\n\nAlthough you can access to your logging file like any other, you can use the provided reader.\n\nIf you did not specify a file for `Logger` simply use:\n```\npython3 -m livelog\n```\n\n`livelog` will read in real time the default log file.\n\n#### Options\n\n- `-f` or `--file` - Set the path of your logging file\n- `-l` or `--level` - Set the minimum log level to be read.\n- `--nocolors` - Do not print colors\n\n*Example:*\n```\npython3 -m livelog -f /tmp/myfile.log -l INFO --nocolors\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PabloLec/livelog",
    "keywords": "log,logs,logger,reader,utility",
    "license": "GPL-3.0 License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "livelog",
    "package_url": "https://pypi.org/project/livelog/",
    "platform": "",
    "project_url": "https://pypi.org/project/livelog/",
    "project_urls": {
      "Documentation": "https://github.com/PabloLec/livelog#readme",
      "Homepage": "https://github.com/PabloLec/livelog",
      "Repository": "https://github.com/PabloLec/livelog"
    },
    "release_url": "https://pypi.org/project/livelog/1.0.0/",
    "requires_dist": [
      "colorama (==0.4.4)",
      "watchdog (==2.1.5)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "File logger and live reader",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14691545,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e2f01e13e4b3d0e8892bb603e0a72d968f8b61782f5da5b7f8a343fc7124601",
        "md5": "04fca7c4fe80693465aede2ca76c2c87",
        "sha256": "3d7a48ff13090d1421fb4f38a1bdd5063cecd4cb443880c5be797867a6839f83"
      },
      "downloads": -1,
      "filename": "livelog-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "04fca7c4fe80693465aede2ca76c2c87",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 19257,
      "upload_time": "2021-10-02T16:50:13",
      "upload_time_iso_8601": "2021-10-02T16:50:13.439105Z",
      "url": "https://files.pythonhosted.org/packages/4e/2f/01e13e4b3d0e8892bb603e0a72d968f8b61782f5da5b7f8a343fc7124601/livelog-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e566712d22d6fcd4a6ec70f5b46dc5a6cc2c65ad5ef9ab7a43d2830befa6f1d6",
        "md5": "dc25228ee4e14632dda6504e24e69395",
        "sha256": "8b920801d0af2692b881a034509815e8798de2428ed17894d7f4799fbf3d2221"
      },
      "downloads": -1,
      "filename": "livelog-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dc25228ee4e14632dda6504e24e69395",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 19062,
      "upload_time": "2021-10-02T16:50:14",
      "upload_time_iso_8601": "2021-10-02T16:50:14.682581Z",
      "url": "https://files.pythonhosted.org/packages/e5/66/712d22d6fcd4a6ec70f5b46dc5a6cc2c65ad5ef9ab7a43d2830befa6f1d6/livelog-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}