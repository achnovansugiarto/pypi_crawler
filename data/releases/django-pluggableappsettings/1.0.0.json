{
  "info": {
    "author": "Nothrbridge Development Konrad & Schneider GbR",
    "author_email": "mail@nb-dev.de",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "|PyPI version| |Build Status| |Coverage Status| |Downloads| |Supported\nPython versions| |License|\n\ndjango-pluggableappsettings\n===========================\n\nThis app provides a baseclass to easily realize AppSettings for any\ndjango project. The advantage of using an AppSettings class lies in the\npossibility for the programmer to assign default values for settings if\nthe setting is not present in the main settings.py\n\nRequirements:\n-------------\n\n-  Django >= 1.6\n\nQuick start\n-----------\n\n1. Install django-pluggableappsettings\n\n   -  From the pip repository:\n      ``pip install django-pluggableappsettings``\n   -  or directly from github:\n      \\`\\ ``pip install git+git://github.com/NB-Dev/django-pluggableappsettings.git``\n\n2. Create your AppSettings class in any of your project's files. E.g. in\n   'app\\_settings.py'.\n\n3. Define your settings by setting the class attributes as one of the\n   provided settings types\n\n   ::\n\n       from django_pluggableappsettings import AppSettings, Setting\n\n       class MyAppSettings(AppSettings):\n           MY_SETTING = Setting('DEFAULT_VALUE')\n\n4. Access the setting from anywhere:\n\n   ::\n\n       from app_settings import MyAppSettings\n       setting = MyAppSettings.MY_SETTING\n\nProvided Setting Types\n----------------------\n\nThree different setting types are provided with the package:\n\nSetting(default\\_value, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe most basic setting that simply returns the value from the\nsettings.py or, if that is not set, the default value. If no default\nvalue is provided and the setting is not set in your settings.py, an\n``AttributeError`` is thrown. Also a list of aliases can be passed to\nallow for multiple names of one setting (e.g. for backwards\ncompatibility)\n\nCallableSetting(default\\_value, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBehaves as a Setting but checks whether the value is callable and calls\nit if possible before returning.\n\n**Attention:** As each setting is only loaded once and then stored in a\ncache, the call is only performed on the first access of the setting.\n\nClassSetting(default\\_value, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBehaves as a Setting but accepts only Classes or dotted paths to classes\nas values. If the value is a dotted path, the path is translated to a\nclass before returning, so the returned value is always a class.\n\nIntSetting(default\\_value, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAccepts only values that are of type int or can be casted to type int\n\nFloatSetting(default\\_value, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAccepts only values of type float of values that can be casted to type\nfloat\n\nStringSetting(default\\_value, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAccepts only strings as value\n\nIterableSetting(default\\_value, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMakes sure that the value is an iterable\n\nTypedSetting(default\\_value, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA class that checks whether the given value is of a certain type and\noptionally allows casting the value to that type. Used as a base class\nfor all type checking classes and can be easily subclassed to allow\nchecking of various value types.\n\nTo create your own type checking Setting simply subclass this type and\nset the class attributes ``_setting_type`` and ``_cast_value`` according\nto your needs. The ``_setting_type`` attribute specifies the desired\ntype while the ``_cast_value`` attribute specifies whether the value\nshould be casted to the ``_setting_type``. A ``_cast_value`` of ``True``\nessentially results in a call of ``value = _setting_type(value)``.\n\nE.g. The ``IntSetting`` is defined as follows:\n\n::\n\n    class IntSetting(TypedSetting):\n        \"\"\"\n        An integer setting\n        \"\"\"\n        _setting_type = int\n        _cast_value = True\n\nIf you need more elaborate casting functions, you can overwrite the\n``cast_value(self, value)`` function of your type which should return\nthe casted value.\n\nAccessing Values\n----------------\n\nYou can access any setting by simply importing your AppSettings class\nand accessing the corresponding attribute.\n\nRunning the tests\n-----------------\n\nThe included tests can be run standalone by running the\n``tests/runtests.py`` script. You need to have Django and mock installed\nfor them to run. If you also want to run coverage, you need to install\nit before running the tests\n\nCHANGELOG\n---------\n\nv.1.0.0\n~~~~~~~\n\n-  Releasing first stable version\n\nv.0.2.3\n~~~~~~~\n\n-  Added 'aliases' parameter to ``Setting`` to allow multiple names for\n   one setting (e.g. for backwards compatibility)\n\nv.0.2.2\n~~~~~~~\n\n-  Extended code to also work with Python 3\n\nv.0.2.1\n~~~~~~~\n\n-  Added ``TypedSetting`` Setting type which allows for the setting to\n   be typechecked\n-  Added ``IntSetting``, ``FloatSetting``, ``StringSetting`` and\n   ``ÃŒterableSetting``` as subtypes of ```TypedSetting``\n\nv.0.2.0\n~~~~~~~\n\n-  Added the changelog\n-  Redesign of settings to allow different types of settings that can\n   now also provide type checking.\n-  Settings are now explicitly defined and no ``_DEFAULT_`` prefix is\n   needed anymore\n-  Also no staticmethod decorator is needed anymore\n\n.. |PyPI version| image:: https://img.shields.io/pypi/v/django-pluggableappsettings.svg\n   :target: http://badge.fury.io/py/django-pluggableappsettings\n.. |Build Status| image:: https://travis-ci.org/NB-Dev/django-pluggableappsettings.svg?branch=master\n   :target: https://travis-ci.org/NB-Dev/django-pluggableappsettings\n.. |Coverage Status| image:: https://coveralls.io/repos/NB-Dev/django-pluggableappsettings/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/NB-Dev/django-pluggableappsettings?branch=master\n.. |Downloads| image:: https://img.shields.io/pypi/dm/django-pluggableappsettings.svg\n   :target: https://pypi.python.org/pypi/django-pluggableappsettings/\n.. |Supported Python versions| image:: https://img.shields.io/pypi/pyversions/django-pluggableappsettings.svg\n   :target: https://pypi.python.org/pypi/django-pluggableappsettings/\n.. |License| image:: https://img.shields.io/pypi/l/django-pluggableappsettings.svg\n   :target: https://pypi.python.org/pypi/django-pluggableappsettings/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/NB-Dev/django-pluggableappsettings",
    "keywords": null,
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-pluggableappsettings",
    "package_url": "https://pypi.org/project/django-pluggableappsettings/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-pluggableappsettings/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/NB-Dev/django-pluggableappsettings"
    },
    "release_url": "https://pypi.org/project/django-pluggableappsettings/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A convenience class for providing default values for a django app setting.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12637938,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9f3d1b9d71aa37d25b8d2a8453bca9ea2050d3f11cd2e21b2273a2e3cbbca9d",
        "md5": "7bc7112567fcc8b03337fda13cffb61a",
        "sha256": "32a55358228ccfc086e8fa0ec3bbd7a5bcfec34c2e56ecd2a10c5e02c97f51d1"
      },
      "downloads": -1,
      "filename": "django-pluggableappsettings-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7bc7112567fcc8b03337fda13cffb61a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6925,
      "upload_time": "2015-12-08T11:00:22",
      "upload_time_iso_8601": "2015-12-08T11:00:22.080390Z",
      "url": "https://files.pythonhosted.org/packages/d9/f3/d1b9d71aa37d25b8d2a8453bca9ea2050d3f11cd2e21b2273a2e3cbbca9d/django-pluggableappsettings-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}