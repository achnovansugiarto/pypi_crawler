{
  "info": {
    "author": "Nothrbridge Development Konrad & Schneider GbR",
    "author_email": "mail@nb-dev.de",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "|PyPI version| |Build Status| |Coverage Status| |Downloads| |Supported\nPython versions| |Supported Django versions| |License| |Codacy Badge|\n|Requirements Status|\n\ndjango-pluggableappsettings\n===========================\n\nThis app provides a baseclass to easily realize AppSettings for any\ndjango project. The advantage of using an AppSettings class lies in the\npossibility for the programmer to assign default values for settings if\nthe setting is not present in the main settings.py\n\nRequirements:\n-------------\n\n-  Django >= 1.6\n\nQuick start\n-----------\n\n1. Install django-pluggableappsettings\n\n   -  From the pip repository:\n      ``pip install django-pluggableappsettings``\n   -  or directly from github:\n      \\`\\ ``pip install git+git://github.com/NB-Dev/django-pluggableappsettings.git``\n\n2. Create your AppSettings class in any of your project's files. E.g. in\n   'app\\_settings.py'.\n\n3. Define your settings by setting the class attributes as one of the\n   provided settings types\n\n   ::\n\n       from django_pluggableappsettings import AppSettings, Setting\n\n       class MyAppSettings(AppSettings):\n           MY_SETTING = Setting('DEFAULT_VALUE')\n\n4. Access the setting from anywhere:\n\n   ::\n\n       from app_settings import MyAppSettings\n       setting = MyAppSettings.MY_SETTING\n\nProvided Setting Types\n----------------------\n\nDifferent setting types are provided with the package:\n\nSetting(default\\_value, setting\\_name, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe most basic setting that looks up the setting's value from the\n``settings.py`` usually the attribute name is used for the detection.\nIf, however, the ``settings_name`` parameter is given, this name is used\ninstead for the lookup in the ``settings.py``. It simply returns the\nvalue from the settings.py or, if that is not set, the default value. If\nno default value is provided and the setting is not set in your\nsettings.py, an ``AttributeError`` is thrown. Also a list of aliases can\nbe passed to allow for multiple names of one setting (e.g. for backwards\ncompatibility)\n\nCalledOnceSetting(default\\_value, setting\\_name, aliases, force\\_callable=False)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nChecks whether the value is callable and calls it once before returning.\nSubsequent accesses to this setting return the cached return value of\nthe first call. If ``force_callable`` is ``True``, the setting throws a\n``ValueError`` if the value of the setting is not callable.\n\nCalledEachTimeSetting(default\\_value, setting\\_name, aliases, force\\_callable=False)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nChecks whether the value is callable. If so, the callable is called each\ntime when the setting is accessed. If ``force_callable`` is ``True``,\nthe setting throws a ``ValueError`` if the value of the setting is not\ncallable.\n\nClassSetting(default\\_value, setting\\_name, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBehaves as a Setting but accepts only Classes or dotted paths to classes\nas values. If the value is a dotted path, the path is translated to a\nclass before returning, so the returned value is always a class.\n\nIntSetting(default\\_value, setting\\_name, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAccepts only values that are of type int or can be casted to type int\n\nFloatSetting(default\\_value, setting\\_name, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAccepts only values of type float of values that can be casted to type\nfloat\n\nStringSetting(default\\_value, setting\\_name, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAccepts only strings as value\n\nIterableSetting(default\\_value, setting\\_name, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMakes sure that the value is an iterable\n\nTypedSetting(default\\_value, setting\\_name, aliases)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA class that checks whether the given value is of a certain type and\noptionally allows casting the value to that type. Used as a base class\nfor all type checking classes and can be easily subclassed to allow\nchecking of various value types.\n\nTo create your own type checking setting simply subclass this type and\nset the class attributes ``_setting_type`` and ``_cast_value`` according\nto your needs. The ``_setting_type`` attribute specifies the desired\ntype while the ``_cast_value`` attribute specifies whether the value\nshould be casted to the ``_setting_type``. A ``_cast_value`` of ``True``\nessentially results in a call of ``value = _setting_type(value)``.\n\nE.g. The ``IntSetting`` is defined as follows:\n\n::\n\n    class IntSetting(TypedSetting):\n        \"\"\"\n        An integer setting\n        \"\"\"\n        _setting_type = int\n        _cast_value = True\n\nIf you need more elaborate casting functions, you can overwrite the\n``cast_value(self, value)`` function of your type which should return\nthe casted value.\n\nAccessing Values\n----------------\n\nYou can access any setting by simply importing your AppSettings class\nand accessing the corresponding attribute.\n\nTests with AppSettings\n----------------------\n\nThe package provides a convenient ``override_appsettings`` decorator /\ncontext manager to allow for the temporary override of AppSettings\nvalues. It is used just like Django's ``override_settings`` decorator\nbut with an extra argument: The AppSettings-Class that is to be altered\nhas to be passed in as first argument. Following should be keyword,\nvalue arguments where the keyword is the name of the setting to be\noverridden and the value is the desired return value.\n\nE.g.:\n\n::\n\n    from django_pluggableappsettings.test.utils import override_appsettings\n    from myapp.appsettings import MyAppSettings\n\n    class SomeTestCase(TestCase):\n        @override_appsettings(MyAppSettings, SETTING='new_value')\n        def test_decorated(self):\n            MyAppSettings.SETTING # This returns 'new_value'\n        \n        def test_context_manager(self):\n            with override_appsettings(MyAppSettings, SETTING='new_value'):\n                MyAppSettings.SETTING # This returns 'new_value'\n\nRunning the tests\n-----------------\n\nThe included tests can be run standalone by running the\n``tests/runtests.py`` script. You need to have Django and mock installed\nfor them to run. If you also want to run coverage, you need to install\nit before running the tests\n\nCHANGELOG\n---------\n\nv. 1.1.6 (2017-05-19)\n~~~~~~~~~~~~~~~~~~~~~\n\n-  Fixing the README to be correctly displayed on pypi\n\nv. 1.1.5 (2017-05-19)\n~~~~~~~~~~~~~~~~~~~~~\n\n-  Version bump as I forgot to convert the readme. Added a publish.py to\n   automate publishing in future.\n\nv. 1.1.4 (2017-05-19)\n~~~~~~~~~~~~~~~~~~~~~\n\n-  Adding tests for Django 1.10 and 1.11.\n\nv. 1.1.3 (2016-01-27)\n~~~~~~~~~~~~~~~~~~~~~\n\n-  Adding the possibility to look for a settings value under a different\n   name in the ``settings.py`` by usage of the ``settings_name``\n   parameter\n-  Fixing a bug that caused all ``AppSettings`` instances to share the\n   same cache of loaded settings. This could cause the settings to be\n   overridden by other settings\n\nv. 1.1.2 (2016-01-15)\n~~~~~~~~~~~~~~~~~~~~~\n\n-  Adding an ``override_appsettings`` decorator / context manager to\n   allow the overriding of AppSettings values in test\n-  Added the possibility to retrieve non-\\ ``Setting`` attributes from\n   the ``AppSettings`` class to allow for custom attributes or custom\n   functions.\n\nv.1.1.1\n~~~~~~~\n\n-  I screwed up with pypi and need to bump the version number - Sorry\n\nv.1.1.0\n~~~~~~~\n\n-  Changing structure of Setting class to being able to add repeatedly\n   called functions as setting.\n\n**Warning**: This breaks compatibility of custom settings classes. To\nfix this, simply rename the ``get`` method of your custom classes to\n``_get`` - Added a ``CalledEachTimeSetting`` that takes a callable that\nis called each time the setting's value is accessed - Renamed the\n``CallableSetting`` to ``CalledOnceSetting`` to make the differentiation\nto the ``CalledEachTimeSetting`` clearer. The old name will stay as an\nalias for now. - The ``CalledEachTimeSetting`` and the\n``CalledOnceSetting`` take an ``force_callable`` kwarg to set whether\nthe value of the setting is enforced to be callable or not.\n\nv.1.0.0\n~~~~~~~\n\n-  Releasing first stable version\n\nv.0.2.3\n~~~~~~~\n\n-  Added 'aliases' parameter to ``Setting`` to allow multiple names for\n   one setting (e.g. for backwards compatibility)\n\nv.0.2.2\n~~~~~~~\n\n-  Extended code to also work with Python 3\n\nv.0.2.1\n~~~~~~~\n\n-  Added ``TypedSetting`` Setting type which allows for the setting to\n   be typechecked\n-  Added ``IntSetting``, ``FloatSetting``, ``StringSetting`` and\n   ``ÌterableSetting``` as subtypes of ```TypedSetting``\n\nv.0.2.0\n~~~~~~~\n\n-  Added the changelog\n-  Redesign of settings to allow different types of settings that can\n   now also provide type checking.\n-  Settings are now explicitly defined and no ``_DEFAULT_`` prefix is\n   needed anymore\n-  Also no staticmethod decorator is needed anymore\n\nToDos:\n------\n\n-  Allow the easy definition of multiple allowed setting types so that a\n   setting could e.g. accept either string or an Integer\n-  Allow the chaining of callables with typed settings to check that the\n   return value of a callable is of the correct type\n\nMaintainers\n-----------\n\nThis Project is maintaned by `Northbridge Development Konrad & Schneider\nGbR <http://www.northbridge-development.de>`__ Softwareentwicklung\n\n.. |PyPI version| image:: https://img.shields.io/pypi/v/django-pluggableappsettings.svg\n   :target: http://badge.fury.io/py/django-pluggableappsettings\n.. |Build Status| image:: https://travis-ci.org/NB-Dev/django-pluggableappsettings.svg?branch=master\n   :target: https://travis-ci.org/NB-Dev/django-pluggableappsettings\n.. |Coverage Status| image:: https://coveralls.io/repos/NB-Dev/django-pluggableappsettings/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/NB-Dev/django-pluggableappsettings?branch=master\n.. |Downloads| image:: https://img.shields.io/pypi/dm/django-pluggableappsettings.svg\n   :target: https://pypi.python.org/pypi/django-pluggableappsettings/\n.. |Supported Python versions| image:: https://img.shields.io/pypi/pyversions/django-pluggableappsettings.svg\n   :target: https://pypi.python.org/pypi/django-pluggableappsettings/\n.. |Supported Django versions| image:: https://img.shields.io/badge/Django-1.6%2C%201.7%2C%201.8%2C%201.9%2C%201.10%2C%201.11-brightgreen.svg\n   :target: https://pypi.python.org/pypi/django-pluggableappsettings/\n.. |License| image:: https://img.shields.io/pypi/l/django-pluggableappsettings.svg\n   :target: https://pypi.python.org/pypi/django-pluggableappsettings/\n.. |Codacy Badge| image:: https://api.codacy.com/project/badge/grade/79d4fa62bb77478392d9535067d010c6\n   :target: https://www.codacy.com/app/tim_11/django-pluggableappsettings\n.. |Requirements Status| image:: https://requires.io/github/NB-Dev/django-pluggableappsettings/requirements.svg?branch=master\n   :target: https://requires.io/github/NB-Dev/django-pluggableappsettings/requirements/?branch=master",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/NB-Dev/django-pluggableappsettings",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pluggableappsettings",
    "package_url": "https://pypi.org/project/django-pluggableappsettings/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pluggableappsettings/",
    "project_urls": {
      "Homepage": "http://github.com/NB-Dev/django-pluggableappsettings"
    },
    "release_url": "https://pypi.org/project/django-pluggableappsettings/1.1.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A convenience class for providing default values for a django app setting.",
    "version": "1.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12637938,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f57084b730d26f7b379a7db78326ca31bc467aa536849475afb6fee25bd57328",
        "md5": "8f8da8d21c658043ffd803dd03284c0a",
        "sha256": "da33a8261cd539b3b26e3750b1aa7cf3508b8ecf1dd7d247c80cd83169eb1291"
      },
      "downloads": -1,
      "filename": "django-pluggableappsettings-1.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "8f8da8d21c658043ffd803dd03284c0a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10231,
      "upload_time": "2017-05-19T10:44:11",
      "upload_time_iso_8601": "2017-05-19T10:44:11.346127Z",
      "url": "https://files.pythonhosted.org/packages/f5/70/84b730d26f7b379a7db78326ca31bc467aa536849475afb6fee25bd57328/django-pluggableappsettings-1.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}