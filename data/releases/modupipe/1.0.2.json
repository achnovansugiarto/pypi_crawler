{
  "info": {
    "author": "vigenere23",
    "author_email": "lolgab1@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![Build](https://github.com/vigenere23/modupipe/actions/workflows/build.yml/badge.svg)](https://github.com/vigenere23/modupipe/actions/workflows/build.yml)\n\n# ModuPipe : A modular and extensible ETL-like pipeline builder\n\n## Benefits\n\n- Entirely typed\n- Abstract, so it fits any use case\n- Class-based for easy configurations and injections\n\n## Usage\n\nExtract-Transform-Load (ETL) pipelines are a classic form of data-processing pipelines used in the industry. It consists of 3 main elements:\n\n1. An **`Extractor`**, which returns data in a stream-like structure (`Iterator` in Python) using a pull strategy.\n2. Some **`Mapper`** (optional), which transforms (parse, converts, filters, etc.) the data obtained from the source(s). Mappers can be chained together and chained to an extractor (with `+`) in order to form a new extractor.\n3. A **`Loader`**, which receives the maybe-transformed data using a push strategy. Loaders can be multiple (with `LoaderList`) or chained together (with `+`).\n\nTherefore, those 3 processes are offered as interfaces, easily chainable and interchangeable at any time.\n\nAn interface `Runnable` is also offered in order to interface the concept of \"running a pipeline\". This enables a powerfull composition pattern for wrapping the execution behaviour of runnables.\n\n## Examples\n\nUsage examples are present in the [examples](./examples) folder.\n\n## Discussion\n\n### Optimizing pushing to multiple loaders\n\nIf you have multiple loaders (using the `LoaderList` class or many chained `PushTo` mappers), but performance is a must, then you should use a multi-processing approach (with `modupipe.runnable.MultiProcess`), and push to 1 queue per loader. Each queue will also become a direct extractor for each loader, all running in parallel. This is especially usefull when at least one of the loaders takes a long processing time.\n\nAs an example, let's take a `Loader 1` which is very slow, and a `Loader 2` which is normally fast. You'll be going from :\n\n```\n┌────── single pipeline ──────┐        ┌──────────────── single pipeline ───────────────┐\n Extractor ┬─⏵ Loader 1 (slow)    OR    Extractor ──⏵ Loader 1 (slow) ──⏵ Loader 2 (late)\n           └─⏵ Loader 2 (late)\n```\n\nto :\n\n```\n┌────── pipeline 1 ──────┐               ┌────────── pipeline 2 ─────────┐\n Extractor ┬─⏵ PutToQueue ──⏵ Queue 1 ⏴── GetFromQueue ──⏵ Loader 1 (slow)\n           └─⏵ PutToQueue ──⏵ Queue 2 ⏴── GetFromQueue ──⏵ Loader 2 (not late)\n                                         └──────────── pipeline 3 ───────────┘\n```\n\nThis will of course not accelerate the `Loader 1` processing time, but all the other loaders performances will be greatly improved by not waiting for each other.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vigenere23/modupipe",
    "keywords": "pipeline,etl,pipe",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modupipe",
    "package_url": "https://pypi.org/project/modupipe/",
    "platform": null,
    "project_url": "https://pypi.org/project/modupipe/",
    "project_urls": {
      "Homepage": "https://github.com/vigenere23/modupipe",
      "Repository": "https://github.com/vigenere23/modupipe"
    },
    "release_url": "https://pypi.org/project/modupipe/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.9,<4.0",
    "summary": "A modular and extensible ETL-like pipeline builder",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14849511,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e2754db9ce6fd562dccc2112ab1073ba6a29cde501b489154c3087157135ab0",
        "md5": "bd41a2cbb44331b792be0363f57d6dbc",
        "sha256": "46d17c5c2dc3dbb237fce62e9d3defb6d2f6eaf2836f6226ceaf7e1bb083744a"
      },
      "downloads": -1,
      "filename": "modupipe-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bd41a2cbb44331b792be0363f57d6dbc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 7725,
      "upload_time": "2022-08-23T14:07:45",
      "upload_time_iso_8601": "2022-08-23T14:07:45.846185Z",
      "url": "https://files.pythonhosted.org/packages/7e/27/54db9ce6fd562dccc2112ab1073ba6a29cde501b489154c3087157135ab0/modupipe-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2e0615ce9c556139ba996db365fb023b5044a8108ce7709f9656a5391151e7e",
        "md5": "a8dc8aec301b62bbad96f3a14a17dae5",
        "sha256": "1f653f862f11da5c9bd118c70d4cbb3d02b38a71296e531ae2c59e7f388790b7"
      },
      "downloads": -1,
      "filename": "modupipe-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a8dc8aec301b62bbad96f3a14a17dae5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 7120,
      "upload_time": "2022-08-23T14:07:46",
      "upload_time_iso_8601": "2022-08-23T14:07:46.935865Z",
      "url": "https://files.pythonhosted.org/packages/e2/e0/615ce9c556139ba996db365fb023b5044a8108ce7709f9656a5391151e7e/modupipe-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}