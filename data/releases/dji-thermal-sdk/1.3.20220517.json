{
  "info": {
    "author": "Haitao Lyu",
    "author_email": "hxl170008@utdallas.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# DJI Thermal SDK\n> use ctypes to capsulate the DJI Thermal SDK so that we can directly use python to process thermal images. \n\n\n```python\nimport nbdev\nfrom dji_thermal_sdk.dji_sdk import *\nimport dji_thermal_sdk.dji_sdk as DJI\nimport ctypes as CT\nfrom ctypes import *\nimport os\n```\n\nThis version of DJI Thermal SDK is 1.3, which was published on 05/15/2022\n\n## Install\n\n`pip install dji_thermal_sdk`\n\n## Load DLL\n\nNormally, DJI SDK DLLs include `libdirp.dll, libv_dirp.dll, libv_girp.dll, libv_iirp.dll, libv_list.ini`.  \n\nyou should put all the dlls and your codes in a same folder.  \n\nThe reason that the following codes are commented is because it can't pass the GitHub CI test, but it works well.\n\nDJI dlls use C++, and when we use ctypes to invoke them, python complier will pop out 'invalid ELF header' error.\n\n```python\n'''\ntry:\n    _libdirp = cdll.LoadLibrary(\"./libdirp.dll\")\n    DJI.set_dirp_dll(_libdirp)\nexcept FileNotFoundError as err:\n    print(err)\nprint(DJI._libdirp)\n'''\n```\n\n    <CDLL 'D:\\LYU\\Code\\git_repository\\dji_thermal_sdk\\libdirp.dll', handle 7ffe6f310000 at 0x1aa05b61850>\n    \n\n\n\n\n    True\n\n\n\n## Get the handle of a R-JPEG image\n\nDIRP_HANDLE is a void pointer, and it has been definded.  \nyou can get it by `package.DIRP_HANDLE`\n\n```python\nnbdev.show_doc(dirp_create_from_rjpeg)\n```\n\n\n<h4 id=\"dirp_create_from_rjpeg\" class=\"doc_header\"><code>dirp_create_from_rjpeg</code><a href=\"https://github.com/lyuhaitao/dji_thermal_sdk/tree/master/dji_thermal_sdk/dji_sdk.py#L162\" class=\"source_link\" style=\"float:right\">[source]</a></h4>\n\n> <code>dirp_create_from_rjpeg</code>(**`data`**, **`size`**, **`ph`**)\n\nParameters:\n    [in] data: R-JPEG binary data buffer pointer\n    [in] size: R-JPEG binary data buffer size in bytes\n    [out]ph  : DIRP API handle pointer\n        - reminder: use two-level pointer to assign value to one-level pointer\nReturn:\n    int return code dirp_ret_code_e\n\n\n```python\n'''\nrd = r\"dataset\\Deer_Goats_Unsure__2022-02-02__02-42-12(2).JPG\"\nwith open(rd, 'rb') as f:\n    content = f.read()\n    print(len(content))\n# method1 to get the file size\nprint(f\"File size: {os.path.getsize(rd)}\")\n# method 2 to get the file size\nfile_stat = os.stat(rd)\nsize = c_int32(file_stat.st_size)\nprint(f\"File size: {size}\")\n\n# the method to create a string buffer, which is important.\nrjpeg_data = CT.create_string_buffer(len(content))\nrjpeg_data.value = content\nprint(f\"rjpeg_data: {rjpeg_data}\")\n\n# test the function to create a handle of an image\nret = dirp_create_from_rjpeg(rjpeg_data,size, CT.byref(DIRP_HANDLE))\nprint(f'ret = {ret}')\nif ret == 0:\n    print(\"successfully get the r-jpeg handle.\")\n#\nprint(f\"DIRP_HANDLE: {DIRP_HANDLE}  address: {hex(DIRP_HANDLE.value)} \")\n'''\n```\n\n## Get the version of API\n\n```python\nnbdev.show_doc(dirp_get_api_version)\n```\n\n\n<h4 id=\"dirp_get_api_version\" class=\"doc_header\"><code>dirp_get_api_version</code><a href=\"https://github.com/lyuhaitao/dji_thermal_sdk/tree/master/dji_thermal_sdk/dji_sdk.py#L193\" class=\"source_link\" style=\"float:right\">[source]</a></h4>\n\n> <code>dirp_get_api_version</code>(**`version`**)\n\nParameters:\n    [out] version DIRP API version information pointer\nReturn:\n    int return code dirp_ret_code_e\n\n\n```python\nnbdev.show_doc(dirp_api_version_t)\n```\n\n\n<h2 id=\"dirp_api_version_t\" class=\"doc_header\"><code>class</code> <code>dirp_api_version_t</code><a href=\"https://github.com/lyuhaitao/dji_thermal_sdk/tree/master/dji_thermal_sdk/dji_sdk.py#L68\" class=\"source_link\" style=\"float:right\">[source]</a></h2>\n\n> <code>dirp_api_version_t</code>() :: `Structure`\n\nAPI version structure definition\n\n\n```python\n'''\njpeg_version = dirp_api_version_t() \nret = dirp_get_api_version(CT.byref(jpeg_version))\nif ret == DIRP_SUCCESS:\n    print(\"Success\")\n#\nprint(f\"jpeg_version.api: \\t {jpeg_version.api}\")\nprint(f\"jpeg_version.magic: \\t {jpeg_version.magic}\")\n'''\n```\n\n## Get Color Bar\n\n```python\nnbdev.show_doc(dirp_get_color_bar)\n```\n\n\n<h4 id=\"dirp_get_color_bar\" class=\"doc_header\"><code>dirp_get_color_bar</code><a href=\"https://github.com/lyuhaitao/dji_thermal_sdk/tree/master/dji_thermal_sdk/dji_sdk.py#L205\" class=\"source_link\" style=\"float:right\">[source]</a></h4>\n\n> <code>dirp_get_color_bar</code>(**`h`**, **`color_bar`**)\n\nParameters:\n    [in]  h: DIRP API handle\n    [out] color_bar: ISP color bar parameters pointer\nReturn:\n    int return code dirp_ret_code_e\n\n\n```python\nnbdev.show_doc(dirp_color_bar_t)\n```\n\n\n<h2 id=\"dirp_color_bar_t\" class=\"doc_header\"><code>class</code> <code>dirp_color_bar_t</code><a href=\"https://github.com/lyuhaitao/dji_thermal_sdk/tree/master/dji_thermal_sdk/dji_sdk.py#L74\" class=\"source_link\" style=\"float:right\">[source]</a></h2>\n\n> <code>dirp_color_bar_t</code>() :: `Structure`\n\nColor bar parameters structure definition\n\n\n```python\n'''\njpeg_color_bar = dirp_color_bar_t()\nret = dirp_get_color_bar(DIRP_HANDLE, CT.byref(jpeg_color_bar))\nif ret == DIRP_SUCCESS:\n    print(\"Success\")\nprint(f\"jpeg_color_bar.high: \\t {jpeg_color_bar.high}\")\nprint(f\"jpeg_color_bar.low: \\t {jpeg_color_bar.low}\")\nprint(f\"jpeg_color_bar.manual_enable: \\t {jpeg_color_bar.manual_enable}\")\n'''\n```\n\n## Get the resolution of a R-JPEG image\n\nnbdev.show_doc(dirp_create_from_rjpeg)\n\n```python\nnbdev.show_doc(dirp_get_rjpeg_resolution)\n```\n\n\n<h4 id=\"dirp_get_rjpeg_resolution\" class=\"doc_header\"><code>dirp_get_rjpeg_resolution</code><a href=\"https://github.com/lyuhaitao/dji_thermal_sdk/tree/master/dji_thermal_sdk/dji_sdk.py#L336\" class=\"source_link\" style=\"float:right\">[source]</a></h4>\n\n> <code>dirp_get_rjpeg_resolution</code>(**`h`**, **`rjpeg_info`**)\n\nGet R-JPEG image resolution information.\nParameters\n    [in]h: DIRP API handle\n    [out]rjpeg_info: R-JPEG basic information pointer\nReturns\n    int return code dirp_ret_code_e\n\n\n```python\nnbdev.show_doc(dirp_resolution_t)\n```\n\n\n<h2 id=\"dirp_resolution_t\" class=\"doc_header\"><code>class</code> <code>dirp_resolution_t</code><a href=\"https://github.com/lyuhaitao/dji_thermal_sdk/tree/master/dji_thermal_sdk/dji_sdk.py#L133\" class=\"source_link\" style=\"float:right\">[source]</a></h2>\n\n> <code>dirp_resolution_t</code>() :: `Structure`\n\nThe image size structure definition\n\n\n```python\n'''\nrjpeg_resolution = dirp_resolution_t()\nret = dirp_get_rjpeg_resolution(DIRP_HANDLE, CT.byref(rjpeg_resolution))\nprint(f'ret = {ret}')\nif ret == 0:\n    print(\"successfully get the resolution.\")\n\nout = f'Height: {rjpeg_resolution.height}, width: {rjpeg_resolution.width}'\nout\n'''\n```\n\n## Set Pseudo Color\n\n```python\nnbdev.show_doc(dirp_set_pseudo_color)\n```\n\n```python\n'''\nret = dirp_set_pseudo_color(DIRP_HANDLE, c_int(0))\nif ret == DIRP_SUCCESS:\n    print(\"Success\")\nelse:\n    print(f\"Error: ret={ret}\")\n'''\n```\n\n## Transform a thermal image by a specific palette\n\n```python\nnbdev.show_doc(dirp_process)\n```\n\n```python\n'''\nimport matplotlib.pyplot as plt\nimport numpy as np\nsize = rjpeg_resolution.height * rjpeg_resolution.width * 3 * CT.sizeof(c_uint8)\nraw_image_buffer = CT.create_string_buffer(size)\nprint(raw_image_buffer.raw[100])\nret = dirp_process(DIRP_HANDLE,byref(raw_image_buffer), size)\nif ret == DIRP_SUCCESS:\n    print(\"Success\")\nelse:\n    print(f\"Error: ret={ret}\")\n#\nraw_file_path = os.path.splitext(rd)[0] + \".raw\"\nprint(raw_file_path)\nwith open(raw_file_path, 'wb') as f:\n    f.write(raw_image_buffer.raw)\n#\nif os.path.exists(raw_file_path):\n    print(f\"Success! file size: {os.path.getsize(raw_file_path)}\")\nelse:\n    print(\"Error\")\n#\nwith open(raw_file_path, encoding='cp1252') as fin:\n    img = np.fromfile(fin, dtype = np.uint8)\n    print(img.shape)\n    img.shape = (512,640,3)\n    #original = Image.fromarray(img)\n#\n\nfig = plt.figure(figsize=(10,8))\nplt.imshow(img, cmap='gray')\n'''\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lyuhaitao/dji_thermal_sdk/tree/master/",
    "keywords": "dji thermal sdk",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dji-thermal-sdk",
    "package_url": "https://pypi.org/project/dji-thermal-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/dji-thermal-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/lyuhaitao/dji_thermal_sdk/tree/master/"
    },
    "release_url": "https://pypi.org/project/dji-thermal-sdk/1.3.20220517/",
    "requires_dist": [
      "pip",
      "packaging"
    ],
    "requires_python": ">=3.6",
    "summary": "use ctypes to invoke the DJI thermal SDK to process images.",
    "version": "1.3.20220517",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14369240,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e91a2c2d4961e73c2d2c90761876fd48b02ca725f1d150cc02876fa602478e91",
        "md5": "86bf67fa3bcc38cb931223d6e4b48352",
        "sha256": "1400f2420e55bbd3a4fa6afaa48383d46e7bf91d16d1f05029f46a3b7a8f8215"
      },
      "downloads": -1,
      "filename": "dji_thermal_sdk-1.3.20220517-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "86bf67fa3bcc38cb931223d6e4b48352",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13341,
      "upload_time": "2022-07-07T22:26:19",
      "upload_time_iso_8601": "2022-07-07T22:26:19.527280Z",
      "url": "https://files.pythonhosted.org/packages/e9/1a/2c2d4961e73c2d2c90761876fd48b02ca725f1d150cc02876fa602478e91/dji_thermal_sdk-1.3.20220517-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0900803e60c622671e1cbcfd072c93487b09e3601003a63dd5c224892043d9c",
        "md5": "92a98660f82616965b81304c9b943104",
        "sha256": "e024e21f836aa6ee385e382806df4b912a5ad937647e477246fb7b664c866c14"
      },
      "downloads": -1,
      "filename": "dji_thermal_sdk-1.3.20220517.tar.gz",
      "has_sig": false,
      "md5_digest": "92a98660f82616965b81304c9b943104",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17073,
      "upload_time": "2022-07-07T22:26:22",
      "upload_time_iso_8601": "2022-07-07T22:26:22.345491Z",
      "url": "https://files.pythonhosted.org/packages/a0/90/0803e60c622671e1cbcfd072c93487b09e3601003a63dd5c224892043d9c/dji_thermal_sdk-1.3.20220517.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}