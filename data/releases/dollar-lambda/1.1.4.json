{
  "info": {
    "author": "Ethan Brooks",
    "author_email": "ethanabrooks@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "<p align=\"center\">\n  <img height=\"300\" src=\"https://dollar-lambda.readthedocs.io/en/latest/_static/logo.png\">\n</p>\n\n[$λ](https://dollar-lambda.readthedocs.io/) provides an alternative to [`argparse`](https://docs.python.org/3/library/argparse.html)\nbased on parser combinators and functional first principles. Arguably, `$λ` is way more expressive than any reasonable\nperson would ever need... but even if it's not the parser that we need, it's the parser we deserve.\n\n# Installation\n```\npip install dollar-lambda\n```\n\n# [Documentation](https://dollar-lambda.readthedocs.io/)\n\n# Highlights\n`$λ` comes with syntactic sugar that can make building parsers completely boilerplate-free.\nFor complex parsing situations that exceed the expressive capacity of this syntax,\nthe user can also drop down to the lower-level syntax that lies behind the sugar, which can\nhandle any reasonable amount of logical complexity.\n\n## The [`@command`](https://dollar-lambda.readthedocs.io/en/latest/api.html?highlight=command#dollar_lambda.decorators.command)\ndecorator\nFor the vast majority of parsing patterns,\n[`@command`](https://dollar-lambda.readthedocs.io/en/latest/api.html?highlight=command#dollar_lambda.decorators.command)\nis the most concise way to define a parser:\n\n\n```python\nfrom dollar_lambda import command\n\n\n@command()\ndef main(x: int, dev: bool = False, prod: bool = False):\n    print(dict(x=x, dev=dev, prod=prod))\n```\n\nHere is the help text generated by this parser:\n\n\n```python\nmain(\"-h\")\n```\n\n    usage: -x X --dev --prod\n    dev: (default: False)\n    prod: (default: False)\n\n\nOrdinarily you provide no arguments to `main` and it would get them from the command line.\nThe explicit arguments in this Readme are for demonstration purposes only.\nHere is how the main function handles input:\n\n\n```python\nmain(\"-x\", \"1\", \"--dev\")\n```\n\n    {'x': 1, 'dev': True, 'prod': False}\n\n\nUse the `parsers` argument to add custom logic using the lower-level syntax:\n\n\n```python\nfrom dollar_lambda import flag\n\n\n@command(parsers=dict(kwargs=flag(\"dev\") | flag(\"prod\")))\ndef main(x: int, **kwargs):\n    print(dict(x=x, **kwargs))\n```\n\nThis parser requires either a `--dev` or `--prod` flag and maps it to the `kwargs` argument:\n\n\n```python\nmain(\"-h\")\n```\n\n    usage: -x X [--dev | --prod]\n\n\nThis assigns `{'dev': True}` to the `kwargs` argument:\n\n\n```python\nmain(\"-x\", \"1\", \"--dev\")\n```\n\n    {'x': 1, 'dev': True}\n\n\nThis assigns `{'prod': True}` to the `kwargs` argument:\n\n\n```python\nmain(\"-x\", \"1\", \"--prod\")\n```\n\n    {'x': 1, 'prod': True}\n\n\nThis fails because the parser requires one or the other:\n\n\n```python\nmain(\"-x\", \"1\")\n```\n\n    usage: -x X [--dev | --prod]\n    The following arguments are required: --dev\n\n\n## [`CommandTree`](https://dollar-lambda.readthedocs.io/en/latest/commandtree.html) for dynamic dispatch\nFor many programs, a user will want to use one entrypoint for one set of\narguments, and another for another set of arguments. Returning to our example,\nlet's say we wanted to execute `prod_function` when the user provides the\n`--prod` flag, and `dev_function` when the user provides the `--dev` flag:\n\n\n```python\nfrom dollar_lambda import CommandTree\n\ntree = CommandTree()\n\n\n@tree.command()\ndef base_function(x: int):\n    print(\"Ran base_function with arguments:\", dict(x=x))\n\n\n@base_function.command()\ndef prod_function(x: int, prod: bool):\n    print(\"Ran prod_function with arguments:\", dict(x=x, prod=prod))\n\n\n@base_function.command()\ndef dev_function(x: int, dev: bool):\n    print(\"Ran dev_function with arguments:\", dict(x=x, dev=dev))\n```\n\nLet's see how this parser handles different inputs.\nIf we provide the `--prod` flag, `$λ` automatically invokes\n `prod_function` with the parsed arguments:\n\n\n```python\ntree(\n    \"-x\", \"1\", \"--prod\"\n)  # usually you provide no arguments and tree gets them from sys.argv\n```\n\n    Ran prod_function with arguments: {'x': 1, 'prod': True}\n\n\nIf we provide the `--dev` flag, `$λ` invokes `dev_function`:\n\n\n```python\ntree(\"-x\", \"1\", \"--dev\")\n```\n\n    Ran dev_function with arguments: {'x': 1, 'dev': True}\n\n\nWith this configuration, the parser will run `base_function` if neither\n`--prod` nor `--dev` are given:\n\n\n```python\ntree(\"-x\", \"1\")\n```\n\n    Ran base_function with arguments: {'x': 1}\n\n\nThere are many other ways to use [`CommandTree`](https://dollar-lambda.readthedocs.io/en/latest/commandtree.html).\nTo learn more, we recommend the [`CommandTree` tutorial](https://dollar-lambda.readthedocs.io/en/latest/command_tree.html).\n\n## Lower-level syntax\n[`@command`](https://dollar-lambda.readthedocs.io/en/latest/api.html?highlight=command#dollar_lambda.decorators.command)\nand [`CommandTree`](https://dollar-lambda.readthedocs.io/en/latest/api.html#dollar_lambda.decorators.CommandTree)\ncover many use cases,\nbut they are both syntactic sugar for a lower-level interface that is far\nmore expressive.\n\nSuppose you want to implement a parser that first tries to parse an option\n(a flag that takes an argument),\n`-x X` and if that fails, tries to parse the input as a variadic sequence of\nfloats:\n\n\n```python\nfrom dollar_lambda import argument, option\n\np = option(\"x\", type=int) | argument(\"y\", type=float).many()\n```\n\nWe go over this syntax in greater detail in the [tutorial](https://dollar-lambda.readthedocs.io/en/latest/tutorial.html).\nFor now, suffice to say that [`argument`](https://dollar-lambda.readthedocs.io/en/latest/api.html?highlight=argument#dollar_lambda.parsers.argument)\n defines a positional argument,\n[`many`](https://dollar-lambda.readthedocs.io/en/latest/variations.html?highlight=many#many) allows parsers to be applied\nzero or more times, and [`|`](https://dollar-lambda.readthedocs.io/en/latest/api.html?highlight=__or__#dollar_lambda.parsers.Parser.__or__) expresses alternatives.\n\nHere is the help text:\n\n\n```python\np.parse_args(\n    \"-h\"\n)  # usually you provide no arguments and parse_args gets them from sys.argv\n```\n\n    usage: [-x X | [Y ...]]\n\n\nAs promised, this succeeds:\n\n\n```python\np.parse_args(\"-x\", \"1\")\n```\n\n\n\n\n    {'x': 1}\n\n\n\nAnd this succeeds:\n\n\n```python\np.parse_args(\"1\", \"2\", \"3\")\n```\n\n\n\n\n    {'y': [1.0, 2.0, 3.0]}\n\n\n\n### Thanks\nSpecial thanks to [\"Functional Pearls\"](https://www.cs.nott.ac.uk/~pszgmh/pearl.pdf) by Graham Hutton and Erik Meijer for bringing these topics to life.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://dollar-lambda.readthedocs.io",
    "keywords": "argument-parser,parser,parser-combinators,functional-programming",
    "license": "",
    "maintainer": "Ethan Brooks",
    "maintainer_email": "ethanabrooks@gmail.com",
    "name": "dollar-lambda",
    "package_url": "https://pypi.org/project/dollar-lambda/",
    "platform": null,
    "project_url": "https://pypi.org/project/dollar-lambda/",
    "project_urls": {
      "Homepage": "https://dollar-lambda.readthedocs.io",
      "Repository": "https://github.com/ethanabrooks/dollar-lambda"
    },
    "release_url": "https://pypi.org/project/dollar-lambda/1.1.4/",
    "requires_dist": [
      "pytypeclass (>=0.1.1,<0.2.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "An argument parser for Python built from functional first principles",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14600064,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eaf91ffd53850ad31e1283191a8acfcac93ec0cbb72eea76b5147e0b4974a37f",
        "md5": "baf5745624b5dc2bfcb3a14c71bf277a",
        "sha256": "a19ba905d160ddebd8e9edf63d28ee472bae520f5c720f7ae4906c718117c522"
      },
      "downloads": -1,
      "filename": "dollar_lambda-1.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "baf5745624b5dc2bfcb3a14c71bf277a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 29914,
      "upload_time": "2022-07-30T17:49:40",
      "upload_time_iso_8601": "2022-07-30T17:49:40.040239Z",
      "url": "https://files.pythonhosted.org/packages/ea/f9/1ffd53850ad31e1283191a8acfcac93ec0cbb72eea76b5147e0b4974a37f/dollar_lambda-1.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aac6c9f57e904b73f32e9ebab9cc85ef6d16ad7971c2d46e62c0dcfd99ce6bbf",
        "md5": "c0b4ae5b3d86f1d53e2b395d4d674a7f",
        "sha256": "76ada5e21fae46bf2392be9f66edf7a71bc5cc7ce1d253f8a7bfa0666130a838"
      },
      "downloads": -1,
      "filename": "dollar-lambda-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c0b4ae5b3d86f1d53e2b395d4d674a7f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 29271,
      "upload_time": "2022-07-30T17:49:38",
      "upload_time_iso_8601": "2022-07-30T17:49:38.520054Z",
      "url": "https://files.pythonhosted.org/packages/aa/c6/c9f57e904b73f32e9ebab9cc85ef6d16ad7971c2d46e62c0dcfd99ce6bbf/dollar-lambda-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}