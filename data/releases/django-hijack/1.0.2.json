{
  "info": {
    "author": "arteria GmbH",
    "author_email": "admin@arteria.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Django Hijack\n\ndjango-hijack allows superusers to hijack (=login as) and work on behalf of another user.\n\n## Installation\n\nTo get the latest stable release from PyPi\n\n    pip install django-hijack\n\nTo get the latest commit from GitHub\n\n    pip install -e git+git://github.com/arteria/django-hijack.git#egg=hijack-master\n\n\nIn your ``settings.py`` add ``hijack`` to your ``INSTALLED_APPS`` and define ``LOGIN_REDIRECT_URL``\n\n    INSTALLED_APPS = (\n        ...,\n        'hijack',\n    )\n\n    LOGIN_REDIRECT_URL = \"/hello/\"\n\n\nAdd the ``hijack`` URLs to your ``urls.py``\n\n    urlpatterns = patterns('',\n        ...\n        url(r'^hijack/', include('hijack.urls')),\n    )\n\n## Usage and modes\n\nThere are different possibilies to hijack an user and communicate with users.\n\n###  Hijack using the 'Hijack Button' on the admin site\nGo to Users in the admin backend and push the ‘Hijack’ button to hijack an user. This is the default mode and base version \nof django-hijack. To disable the ‘Hijack’ button on the admin site (by not registrating the HijackUserAdmin) set ``SHOW_HIJACKUSER_IN_ADMIN = False`` in your project settings.\n\n\n### Hijack by calling URLs in the browser's address bar\nFor advanced superusers, users can be hijacked directly from the address bar by typing:\n\n* example.com/hijack/``user-id``\n* example.com/hijack/email/``email-address``\n* example.com/hijack/username/``username``\n\n\n### Notify superusers when working behalf of another user\nThis option warns the superuser when working with another user as initally logged in. To activate this option perform \nthe following steps:\n\n* In your base.html add ``{% load hijack_tags %}``, ``{%  load staticfiles %}`` and \n* load the styles using ``<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'hijack/hijack-styles.css' %}\" />``.\n* Place ``{{ request|hijackNotification }}`` just after your opening body tag.\n* In your project settings add ``HIJACK_NOTIFY_ADMIN = True``. The default is True. \n* You need to add ``django.core.context_processors.request`` to your template context processors to be able to use requests and sessions in the templates.\n* Make sure that ``django.contrib.staticfiles`` is included in your ``INSTALLED_APPS``. \n* Do not forget to run ``python manage.py collectstatic``.\n\n### Release/reverse hijack\n\nIn the visual notification for the superuser (or staff if ``ALLOW_STAFF_TO_HIJACKUSER`` is True), when working on behalf of other users, there \nis a link to release the hijacked user and switch back. After releasing you are redirected to `LOGIN_REDIRECT_URL` or to the URL defined in `REVERSE_HIJACK_LOGIN_REDIRECT_URL`.\n\n    REVERSE_HIJACK_LOGIN_REDIRECT_URL = '/admin/auth/user/'\n    \nThe release/reverse hijack will be executed when the URL `/hijack/release-hijack/` is called (or whatever is linked to the URL with name = \"release_hijack\").\n\n#### Hijack history\nIf you (A) hijack a superuser (B) and then you hijack another user (C), the release will go backwards through the\n list of hijacked users one by one. After the first release you then are superuser (B), after the second you are superuser (A).\n\n\n### Notify users when they were hijacked\nNOTE: This use case is not fully implemented yet!\n\nThis option allows to notify and inform users when they were hijacked by a superuser. To activate this option \nfollow these steps:\n\n* In your base.html add ``{% load hijack_tags %}``, ``{%  load staticfiles %}`` and \n* load the styles using ``<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'hijack/hijack-styles.css' %}\" />``.\n* Place ``{{ request|hijackNotification }}`` just after your opening body tag.\n* In your project settings add ``HIJACK_NOTIFY_USER = True``. The default is False (= silent mode) \n* You need to add ``django.core.context_processors.request`` to your template context processors to be able to use requests and sessions in the templates.\n* Make sure that ``django.contrib.staticfiles`` is included in your ``INSTALLED_APPS``. \n* Do not forget to run ``python manage.py collectstatic``.\n\n\n### Allow staff members to hijack other users\nThis option allows staff members to hijack other users. In your project settings set ``ALLOW_STAFF_TO_HIJACKUSER`` to ``True``. The default is False.\n\n\n# Signals\n\n## Superuser logs in\nYou can catch a signal when a superuser logs in as another user. Here is an example:\n \n\tfrom django.dispatch import receiver\n\tfrom signals import post_superuser_login\n\t\n    @receiver(post_superuser_login)\n    def set_superuser(sender, **kwargs):\n\t\tprint \"Superuser hijacked userID %s\" % kwargs['user_id']\n        \n\t\t\n\t\t\n\t\t\n# TODOs, issues and planned features\n* Handle hijack using URLs on non unique email addresses.\n* unset_superuser example for signals\n* Store info in user's profile (see #3 comments, Use case: 'Notify users when they were hijacked', see above)\n* \"got it\" Link in notification to remove notification and flag from session. This is useful if hijack is used to switch between users and HIJACK_NOTIFY_ADMIN is True.\n* Custom user models support, see #7\n* Support for named URLs for the hijack button.\n* Handle signals in ``release_hijack(..)``, currently the signals are only triggered in ``login_user(..)`` and ``logout_user(..)``. \n\n# FAQ, troubleshooting and hints\n\n### Why does the hijack button not working?\n\nThe hijack button in the admin currently does not support named URLs. Include using /hijack/, see issue #16. \n\n### Why does the hijack button not show up in the admin site, even if I set ``SHOW_HIJACKUSER_IN_ADMIN = True`` in my project settings?\n\nIf your ``UserAdmin`` object is already registered in the admin site through another app (here is an example of a Facebook profile, https://github.com/philippeowagner/django_facebook_oauth/blob/master/facebook/admin.py#L8), you could disable the registration of djanog-hijack by settings ``SHOW_HIJACKUSER_IN_ADMIN = False`` in your project settings.\n\nAfterwards create a new ``UserAdmin`` class derived from ``HijackUserAdmin``. The Facebook example would look like this:\n\n\n\tfrom django.contrib import admin\n\tfrom django.contrib.auth.admin import UserAdmin\n\tfrom django.contrib.auth.models import User\n\n\tfrom hijack.admin import HijackUserAdmin\n\n\tfrom .models import FacebookProfile\n\t\n\t# We want to display our facebook profile, not the default user's profile\n\tadmin.site.unregister(User)\n\n\tclass FacebookProfileInline(admin.StackedInline):\n\t    model = FacebookProfile\n        \n\tclass FacebookProfileAdmin(HijackUserAdmin):\n\t    inlines = [FacebookProfileInline]\n\t\t\n\tadmin.site.register(User, FacebookProfileAdmin)\n\n\n# Similar projects\n\n* [django-impersonate](https://pypi.python.org/pypi/django-impersonate)\n* [django-su](https://pypi.python.org/pypi/django-su)\n\n# Contribute\n\nIf you want to contribute to this project, simply send us a pull request. Thanks. :)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/arteria/django-hijack",
    "keywords": "django,hijack,support,customer support,debugging",
    "license": "The MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-hijack",
    "package_url": "https://pypi.org/project/django-hijack/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/django-hijack/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/arteria/django-hijack"
    },
    "release_url": "https://pypi.org/project/django-hijack/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "django-hijack allows superusers to hijack (=login as) and work on behalf of another user.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17303909,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5752b7e19d90da6095bc0425bc3bb274338c7b63dea535a43e0694adbe073a79",
        "md5": "75f83c2580edd4f88d2d2c3119de3350",
        "sha256": "a8278b22c350883b353e69c1ac12dffa358a1c9c83a2681c83b7fd74c93f9611"
      },
      "downloads": -1,
      "filename": "django-hijack-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "75f83c2580edd4f88d2d2c3119de3350",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13478,
      "upload_time": "2014-11-28T15:08:29",
      "upload_time_iso_8601": "2014-11-28T15:08:29.044189Z",
      "url": "https://files.pythonhosted.org/packages/57/52/b7e19d90da6095bc0425bc3bb274338c7b63dea535a43e0694adbe073a79/django-hijack-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}