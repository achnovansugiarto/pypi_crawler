{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MaccabiStats\n\nMaccabiStats package used to analyze Maccabi Tel-Aviv games data, based on several sites but mostly on [MaccabiPedia](https://maccbaipedia.co.il).\n```\npip install maccabistats\n``` \n\n# TL;DR\n* In order to work with MaccabiStats package you need to have the serialized Maccabi Tel-Aviv games data, you can get it from [Mega](https://mega.nz/folder/vbgEED7R#0bpotoxTX-ZXGpI8hqbHOA)\nDownload the latest serialized data, which can be used as:\n```\nfrom maccabistats import get_maccabi_stats\nmaccabi_games = get_maccabi_stats(your_maccabi.games_file_path)  # Use the local path you've downloaded the file from mega.\n\n# maccabi_games object will contains everything you need\n```\n* In order to use and analyze MaccabiPedia data without the Python package, checkout this [Mega](https://mega.nz/folder/jGww3bbR#5h2-xmjM-e8Dk0jROfnGdQ) link.  \nYou find inside a zip with the games data and players events in json format.\n\nnow, enjoy :)\n\n# Intro\n\n### Loading games\nAfter you've downloaded the last serialized games from [Mega](https://mega.nz/folder/vbgEED7R#0bpotoxTX-ZXGpI8hqbHOA), load it as:\n```\nfrom maccabistats import get_maccabi_stats\nmaccabi_games = get_maccabi_stats(your_maccabi.games_file_path)  # Use the local path you've downloaded the file from mega.\n```\n\n### Filtering games\nYou can filter games by several sub categories, such as: home or away, game result, competition, opponent, etc.\n```\n>>> maccabi_games = ... (look above)\n>>>\n>>> home_games = maccabi_games.home_games\n>>> away_games = maccabi_games.away_games\n>>>\n>>> official_games = maccabi_games.official_games\n>>>\n>>> league_games = maccabi_games.league_games\n>>> europe_games = maccabi_games.europe_games\n>>>\n>>> derby = maccabi_games.get_games_against_team(\"הפועל תל אביב\")\n>>> sheran = maccabi_games.get_games_by_played_player_name(\"שרן ייני\")\n>>> great_season = maccabi_games.get_games_by_season(\"1976/77\")\n>>> # Search for the others 'maccabi_games.get_games*\" functions\n>>>\n>>> old_games = maccabi_games.played_before(\"2000\")\n>>> great_team = maccabi_games.played_before(\"1997\").played_after(\"1993\")\n>>>\n>>> # You can even chain these sub-categories:\n>>> home_derby = maccabi_games.home_games.get_games_against_team(\"הפועל תל אביב\")\n>>> sheran_europe_away_wins = maccabi_games.europe_games.away_games.get_games_by_played_player_name(\"שרן ייני\").maccabi_wins\n>>>\n>>> # If you have filtered too much, checkout the description - it's aggregated\n>>> maccabi_games.home_games.league_games.get_games_against_team(\"הפועל חיפה\")\n>>> 'Source: MaccabiPedia + Home games + League games + Against team: Hapoel Haifa | 64 games | (from 05-12-1931 to 13-12-2020)'\n```\n\nMaccabiStats object is based on fluent mechanism, that allows you to get the same object after filtering games for each 'sub-category', like:\n```\n>>> type(maccabi_games)\n>>> 'MaccabiGamesStats'\n>>>\n>>> home_games = maccabi_games.home_games\n>>> type(home_games)\n>>> 'MaccabiGamesStats'\n>>>\n>>> # Same for every other sub-category or any chain of them\n```\n\n# Basic Analysis\n\n### Players\nWhen you have your MaccabiGamesStats object, you can check some players statistics for these games:\n```\n>>> maccabi_games.players.best_scorers[:10]  # This will show you the top 10 scorers\n>>> maccabi_games.players.most_unbeaten[:10]  # This will show you the top 10 players with most unbeaten games (from what you've filter) \n```\n\nMaccabiGamesStats has several analysis options - same as \".players\" we just saw, all of them are accessible under your object.\nSome others general analysis options are:\n```\n>>> maccabi_games.coaches # Analyze information from coaches perspective\n>>> maccabi_games.referees # Analyze information from referees perspective\n```\n\n### Streaks\nAnother option of analysis is to examine streaks, players streaks and teams streaks, this can be used as:\n```\n>>> # Get the players with best scoring streak - count the game ONLY if the player has played\n>>> maccabi_games.players_streaks.get_players_with_best_goal_scoring_streak()\n>>> # Same for unbeaten players\n>>> maccabi_games.players_streaks.get_players_with_current_unbeaten_streak()\n>>>\n>>>\n>>> # You can analyze teams streaks as well, for example the teams has longest active winning streak against them\n>>> maccabi_games.teams_streaks.get_teams_with_current_win_streak()\n>>>\n>>>\n>>> # You can analyze streak from Maccabi perspective as well, like:\n>>> maccabi_games.streaks.get_longest_clean_sheet_games()  #  Games in a row without goal against Maccabi\n>>>\n>>> # If you found interesting streak and you want to see if Maccabi had something similar before, use:\n>>> maccabi_games.streaks.get_similar_unbeaten_streak_by_length(minimum_streak_length=20)\n>>> maccabi_games.streak.get_similar_* = use to get similar with len of at least X and by condition.\n```\n\n### Other analysis options\n```\n>>> # You can get the craziest maccabi comebacks by:\n>>> maccabi_games.comebacks.won_from_exactly_two_goal_diff()\n>>> maccabi_games.comebacks.won_from_exactly_x_goal_diff(goals=3)  # Wow!\n>>>\n>>> # Or getting the fatests 2/3/4 goals Maccabi scored in a game:\n>>> maccabi_games.goals_timing.fastest_three_goals()\n>>>\n>>> # If you want to get a short numeric summary of the results in your filtered games, use:\n>>> maccabi_games.results.*\n>>>\n>>> # In order to analysis Maccabi performance against other teams (non-streak), for example the team Maccabi has the most clean sheets games against:\n>>> maccabi_games.teams.teams_ordered_by_maccabi_clean_sheets_count()\n```\n\n# Advanced Analysis\n\n### Seasons\nYou can group the filtered games by season and sort the seasons by any condition, like:\n```\n>>> seasons = maccabi_games.seasons.get_seasons_stats()  # At default the season will be sorted by year.\n>>> seasons.sort_by_wins_percentage()  # Sort the season by winning percentage, you should print the season object).\n>>> seasons  # Print it\n```\n\n### Players advanced analysis\nIn order to find the oldest\\youngest players by the first time they scored\\assist\\played, use:\n```\n>>> maccabi_games.players_special_games.oldest_players_by_first_time_to_assist()\n```\n\nIn order to find the the players that scored\\assist in their first\\last games, use:\n```\n>>> # Find the players that scored twice in their first game\n>>> maccabi_games.players_first_and_last_games.players_that_scored_at_their_first_game(score_at_least=2)\n>>> # Reminder, you can search for the players that scored twice in their first away game using:\n>>> maccabi_games.away_games.players_first_and_last_games.players_that_scored_at_their_first_game(score_at_least=2)\n```  \n\nIf you are interested in the home players part in the statistics, check out this:\n```\n>>> maccabi_games.players_categories.home_players_goals_count()\n>>> # Or finding their % from the total goals on europe\n>>> maccabi_games.europe_games.players_categories.home_players_goals_ratio()\n```\n\nSometimes it's very useful to measure which player contribute the most in the \"money time\", to do so, use:\n```\n>>> # Who are the top scorers - when we count only goals that made Maccabi to lead\n>>> maccabi_games.important_goals.get_top_scorers_for_advantage()\n>>> # Who did that on derby?\n>>> maccabi_games.get_games_against_team(\"הפועל תל אביב\").important_goals.get_top_scorers_for_advantage()\n>>>\n>>> # Who scored the most in the last 5 minutes? including removal of \"non-important\" goals - you can change the range\n>>> maccabi_games.important_goals.get_top_scorers_in_last_minutes(minimum_diff_for_maccabi=-1, maximum_diff_for_maccabi=1, from_minute=85)\n```\n\n# Export data\nIf you want to export the current object MaccabiGamesStats you work on, use:\n```\n>>> maccabi_games.export.export_everything()\n>>> # You will get a zip with some jsons and a readme - check it out  \n```\n\n# Internal & Dev\n\n### Crawling maccabi games\n\nWhen crawling maccabi games each page will be saved on your disk to allow optimization for the next time.\nTo serialize maccabi games (it might take some time), use:\n```\n>>> from maccabistats import serialize_maccabi_games\n# The object will be serialized to home folder (%userprofile%) with its version and the current date.\n>>> serialize_maccabi_games(maccabi_games_stats_object)\n```\n\nManual-fixes will be run after crawling is finished and before serializing to disk.\n\nYou can 'use_multi-process-crawl' from settings to allow multi-processing,  \nBUT atm logging does not support multi-processing, so don't use that if you need to debug.\n\n\n### Manual fixes\n\nThere are some information that need to be fix manually.  \nWhen serializing maccabi games that done automatically.\nIf you Add anything to run_general_fixes, you can re-run it by:\n```\n>>> from maccabistats import get_maccabi_stats, run_general_fixes, serialize_maccabi_games\n>>> \n>>> games = get_maccabi_stats()\n>>> new_games = run_general_fixes(games)\n>>> serialize_maccabi_games(new_games)\n```\n\n### Logging\n\nAll of the log files will be saved at 'maccabistats\\logs' folder under the user home folder (%userprofile%)\nThere are several log files, each one has this pattern - maccabistats-{suffix}.log (at the mentioned folder): \n\n* all - save all log levels\n* info - save just the info log level\n* warning - save just the warn log level\n* exception - save just exceptions (log.exception)\n* stdout - not a file but log handler that print to stdout (info level +) \n\n### Optimization \n* You can use 'use-disk-to-crawl-when-available' to crawl from disk when available, each page that will be crawled from internet wil be save on disk. \n* You can reduce logging when crawling by use :\n```\n>>> from maccabistats import faster_logging\n>>> faster_logging() will disable the stdout & debug handlers.\n```\n\n### Errors Finder\n\nManual check for errors might be helpful, this is can be done by:\n```\n>>> from maccabistats import get_maccabi_stats\n>>> from maccabistats.error_finder.error_finder import ErrorsFinder\n>>> games = get_maccabi_stats()\n>>> e = ErrorsFinder(games)\n>>> e.get_all_errors_numbers()  # run all the manual errors exists\n```\n\n### Known issues\n\n* Ignoring events after 120 min (in game_events_parser -> fully_game_time_without_penalties)\n* Logging with multi-process crawling mode isn't working.\n\n### MaccabiPedia Source\n\nYou can manipulate [MaccabiPedia](http:\\\\www.maccabipedia.co.il) data by downloading it and then loading it \n(You may have to install some 'advanced' packages such as pywikibot), as the following:\n\n```\n>>> from maccabistats import run_maccabipedia_source\n>>>\n>>> # You should run this once a while, this is a heavy action to do:\n>>> maccabipedia = run_maccabipedia_source()\n>>> # Now you can manipulate maccabipedia data as explain above (its MaccabiGamesStats object, referred as \"games\" above\") \n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Maccabipedia/maccabistats",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maccabistats",
    "package_url": "https://pypi.org/project/maccabistats/",
    "platform": null,
    "project_url": "https://pypi.org/project/maccabistats/",
    "project_urls": {
      "Homepage": "https://github.com/Maccabipedia/maccabistats",
      "MaccabiPedia": "https://www.maccabipedia.co.il"
    },
    "release_url": "https://pypi.org/project/maccabistats/2.36.1/",
    "requires_dist": [
      "setuptools (>=28.*)",
      "requests (<3,>=2.20)",
      "beautifulsoup4 (<5,>=4.6)",
      "lxml (<5,>=4.1)",
      "python-dateutil (<5,>=2.7)",
      "matplotlib (<3,>=2.2.2)",
      "progressbar (<3,>=2.5)"
    ],
    "requires_python": ">=3.7",
    "summary": "Maccabi tel-aviv football team statistics manipulation.",
    "version": "2.36.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16331800,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08ab4a6a51b9d1262e456c8859ac304ea104c2e6671d991c52095847e0eb9f7a",
        "md5": "e64767d913648d012623a0f453cc02c6",
        "sha256": "28c9b029e48163a51d2f45755bac34be34a298df2402c03b9b4650c5e9c85939"
      },
      "downloads": -1,
      "filename": "maccabistats-2.36.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e64767d913648d012623a0f453cc02c6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 122849,
      "upload_time": "2022-12-18T01:51:27",
      "upload_time_iso_8601": "2022-12-18T01:51:27.917372Z",
      "url": "https://files.pythonhosted.org/packages/08/ab/4a6a51b9d1262e456c8859ac304ea104c2e6671d991c52095847e0eb9f7a/maccabistats-2.36.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}