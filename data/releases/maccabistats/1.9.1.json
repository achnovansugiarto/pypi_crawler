{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Description \n\nSimple package which allow to figure out more about maccabi tel-aviv football team while manipulating statistics.\nAtm all the data parsed from maccabi-tlv site.\n\n\n# TL;DR\nYou can get the serialized maccabi games from [mega](https://mega.nz/#F!LOJWkShT!lUJMwyWkvPIAXVkverS-Ng)\n(separate by maccabistats version).\nafter that you can just load the games:\n\n```\nfrom maccabistats import get_maccabi_stats\ngames = get_maccabi_stats(youre_maccabi.games_file_path)  # Use the local path you've downloaded the file from mega.\n```\n\nYou might want to use:\n```\ngames = games.get_first_league_games()\n```\nbecause there are not only league games.\n\nnow, enjoy :)  \n\n# Manipulating maccabi statistics\n\n  ### Loading games\n```\n>>> from maccabistats import get_maccabi_stats\n>>> games = get_maccabi_stats()  # From default file path (inside maccabistats package) when you use serialize_maccabi_games()\n>>> games = get_maccabi_stats(r\"C:\\maccabi\\maccabi.games\")  # From local custom file path\n```\n\nEach list of games is from the same type - MaccabiGamesStats.  \nAll the below manipulating can be done on every sub-category of games, like:  \nold_games, old_home_games and old_home_wins.  \n\nGetting only old home wins:\n```\n>>> old_games = games.played_before(\"1.1.2000\")\n>>> old_home_games = old_games.home_games\n>>> old_home_wins = old_home_games.maccabi_wins\n>>>\n>>> or just:\n>>> games.played_before(\"1.1.2000\").home_games.maccabi_wins\n```\n\n\n  ### Basic usage\n```\n>>> games.averages.goals_for_maccabi  # Avg goals for maccabi, for all the games in the list.\n>>> games.results.wins_percentage  #  the win % from the games in the list.\n>>>\n>>> game.get_games_* = use to filter games.\n>>> Lets combine all, wins % against hapoel haifa in league games:\n>>> game.get_first_league_games().get_games_against_team(\"הפועל חיפה\").results.wins_percentage\n```\n\n\n   ### Players\nAll of the names are very intuitive, some examples:\n```\n>>> games.players.best_scorers\n>>> games.players.get_most_winners_by_percentage()\n>>> games.players.most_played\n>>>\n>>> Getting top 5 scored players in league derby:\n>>> games.get_first_league_games().get_games_against_team(\"הפועל תל אביב\").players.best_scorers[0:5]\n```\n\n   ### Coaches and Referees\nYou can get the win\\lose percentages of each one just by:\n```\n>>> games.coaches.most_winner_coach_by_percentage\n>>> games.referees.best_referee_by_percentage[0:2]  # Top 2 referees (in all maccabi games history).\n>>>\n>>> Getting best drby coaches:\n>>> games.get_first_league_games().get_games_against_team(\"הפועל תל אביב\").coaches.most_winner_coach_by_percentage\n```\n\n\n   ### Comebacks\nYou can get the craziest maccabi comebacks:\n```\n>>> games.comebacks.won_from_exactly_two_goal_diff()\n>>> games.comebacks.won_from_exactly_x_goal_diff(goals=3)  # Wow!\n```\n\n   ### Streaks\nYou can get the longest (or by streak length) streaks of any subset of maccabi games:\n```\n>>> games.streaks.get_longest_* = use to get the longest streak by condition, like:\n>>> games.streaks.get_longest_clean_sheet_games()  #  Games in a row without goal against maccabi.\n>>>\n>>> games.streak.get_similar_* = use to get similar with len of at least X and by condition.\n>>> # All the unbeaten rows of at least len of 20:\n>>> games.streaks.get_similar_unbeaten_streak_by_length(minimum_streak_length=20)   \n```\n\n\n   ### Seasons\nYou can get the games grouped by seasons sorted by any condition, such as:\n```\n>>> seasons = games.seasons.get_seasons_stats()  # At default the season will be sorted by year.\n>>> seasons.sort_by_wins_percentage()  # Sort the season by winning percentage, you should print the season object).\n>>> seasons  # Print it\n```\n\n\n# Crawling maccabi games\n\nWhen crawling maccabi games each page will be saved on your disk to allow optimization for the next time.\nTo serialize maccabi games (it might take some time), use:\n```\n>>> from maccabistats import serialize_maccabi_games\n>>> serialize_maccabi_games(file_name)  # Default file_name will be stored inside maccabistats package.\n```\n\nManual-fixes will be run after crawling is finished and before serializing to disk.\n\nYou can 'use_multi-process-crawl' from settings to allow multi-processing,  \nBUT atm logging does not support multi-processing, so don't use that if you need to debug.\n\n\n# Manual fixes\n\nThere are some information that need to be fix manually.  \nWhen serializing maccabi games that done automatically.\nIf you Add anything to run_manual_fixes, you can re-run it by:\n```\n>>> from maccabistats import get_maccabi_stats, run_manual_fixes, serialize_maccabi_games\n>>> \n>>> games = get_maccabi_stats()\n>>> new_games = run_manual_fixes(games)\n>>> serialize_maccabi_games(new_games)\n```\n\n# Logging\n\nAll of the log files will be saved at 'maccabistats-logs' folder under the user home folder (pathlib.Path.home())\nThere are several log files, each one has this pattern - maccabistats-{suffix}.log (at the mentioned folder): \n\n* all - save all log levels\n* info - save just the info log level\n* warning - save just the warn log level\n* exception - save just exceptions (log.exception)\n* stdout - not a file but log handler that print to stdout (info level +) \n\n\n# Known issues\n\n* Players which opened as (captain or had different shirt number between games) will be counted as different players.\n* Ignoring events after 120 min (in game_events_parser -> fully_game_time_without_penalties)\n* Logging with multi-process crawling mode isn't working.\n\n\n# Optimization \n* You can use 'use-disk-to-crawl-when-available' to crawl from disk when available, each page that will be crawled from internet wil be save on disk. \n* For the first time, you can get some of the html files from: https://mega.nz/#F!szxTUDRQ ( key will be available at forum.12p.co.il)\n* You can reduce logging when crawling by use :\n```\n>>> from maccabistats import faster_logging\n>>> faster_logging() will disable the stdout & debug handlers.\n```\n\n\n# Versioning\nATM minor version change 1.X.0 may indicate API CHANGES.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maccabistats",
    "package_url": "https://pypi.org/project/maccabistats/",
    "platform": "",
    "project_url": "https://pypi.org/project/maccabistats/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/maccabistats/1.9.1/",
    "requires_dist": [
      "setuptools (==28.8.0)",
      "requests (==2.18.4)",
      "beautifulsoup4 (==4.6.0)",
      "lxml (==4.1.1)"
    ],
    "requires_python": ">=3",
    "summary": "Maccabi tel-aviv football team statistics manipulation.",
    "version": "1.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16331800,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "664193cc0208f542d6b1ef63957ed0a8bedcc8125e7862e701c2d48e14601919",
        "md5": "64b0d07886a28a34098062a8d7e8211d",
        "sha256": "1175ac53a1c3254c0f4eb0d2eb962941bfd428d623a036900921d53c2b07b03c"
      },
      "downloads": -1,
      "filename": "maccabistats-1.9.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "64b0d07886a28a34098062a8d7e8211d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 43755,
      "upload_time": "2018-04-18T23:40:16",
      "upload_time_iso_8601": "2018-04-18T23:40:16.269434Z",
      "url": "https://files.pythonhosted.org/packages/66/41/93cc0208f542d6b1ef63957ed0a8bedcc8125e7862e701c2d48e14601919/maccabistats-1.9.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}