{
  "info": {
    "author": "Alex Rubinsteyn",
    "author_email": "alex.rubinsteyn@mssm.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "[![Build Status](https://travis-ci.org/openvax/mhctools.svg?branch=master)](https://travis-ci.org/openvax/mhctools) [![Coverage Status](https://coveralls.io/repos/openvax/mhctools/badge.svg?branch=master)](https://coveralls.io/r/openvax/mhctools?branch=master)\n<a href=\"https://pypi.python.org/pypi/mhctools/\">\n    <img src=\"https://img.shields.io/pypi/v/mhctools.svg?maxAge=1000\" alt=\"PyPI\" />\n</a>\n<!-- \n<a href='https://mhctools.readthedocs.io/en/latest/?badge=latest'>\n    <img src='https://readthedocs.org/projects/mhctools/badge/?version=latest' alt='Documentation Status' />\n</a>\n--> \n<!-- \n[![DOI](https://zenodo.org/badge/18834/openvax/mhctools.svg)](https://zenodo.org/badge/latestdoi/18834/openvax/mhctools)\n-->\n\n# mhctools\nPython interface to running command-line and web-based MHC binding predictors.\n\n## Commandline examples\n\n### Prediction for user-supplied peptide sequences\n```sh\nmhctools --sequence SIINFEKL SIINFEKLQ --mhc-predictor netmhc --mhc-alleles A0201\n```\n\n### Automatically extract peptides as subsequences of specified length\n```sh\nmhctools --sequence AAAQQQSIINFEKL --extract-subsequences --mhc-peptide-lengths 8-10 --mhc-predictor mhcflurry --mhc-alleles A0201\n```\n\n## Python usage\n\n```python\nfrom mhctools import NetMHCpan\n# Run NetMHCpan for alleles HLA-A*01:01 and HLA-A*02:01\npredictor = NetMHCpan(alleles=[\"A*02:01\", \"hla-a0101\"])\n\n# scan the short proteins 1L2Y and 1L3Y for epitopes\nprotein_sequences = {\n  \"1L2Y\": \"NLYIQWLKDGGPSSGRPPPS\",\n  \"1L3Y\": \"ECDTINCERYNGQVCGGPGRGLCFCGKCRCHPGFEGSACQA\"\n}\n\nbinding_predictions = predictor.predict_subsequences(protein_sequences, peptide_lengths=[9])\n\n# flatten binding predictions into a Pandas DataFrame\ndf = binding_predictions.to_dataframe()\n\n# epitope collection is sorted by percentile rank\n# of binding predictions\nfor binding_prediction in binding_predictions:\n    if binding_prediction.affinity < 100:\n        print(\"Strong binder: %s\" % (binding_prediction,))\n```\n\n## API\n\nThe following MHC binding predictors are available in `mhctools`:\n* `MHCflurry`: open source predictor installed by default with `mhctools`, requires the user run `mhcflurry-downloads fetch` first to download MHCflurry models\n* `NetMHC3`: requires locally installed version of [NetMHC 3.x](http://www.cbs.dtu.dk/services/NetMHC-3.4/)\n* `NetMHC4`: requires locally installed version of [NetMHC 4.x](http://www.cbs.dtu.dk/services/NetMHC/)\n* `NetMHC`: a wrapper function to automatically use `NetMHC3` or `NetMHC4` depending on what's installed.\n* `NetMHCpan`: requires locally installed version of [NetMHCpan](http://www.cbs.dtu.dk/services/NetMHCpan/)\n* `NetMHCIIpan`: requires locally installed version of [NetMHCIIpan](http://www.cbs.dtu.dk/services/NetMHCIIpan/)\n* `NetMHCcons`: requires locally installed version of [NetMHCcons](http://www.cbs.dtu.dk/services/NetMHCcons/)\n* `IedbMhcClass1`: Uses IEDB's REST API for class I binding predictions.\n* `IedbMhcClass2`: Uses IEDB's REST API for class II binding predictions.\n* `RandomBindingPredictor`: Creates binding predictions with random IC50 and percentile rank values.\n\nEvery binding predictor is constructed with an `alleles` argument specifying the HLA type for which to make predictions. Predictions are generated by calling the `predict` method with a dictionary mapping sequence IDs or names to amino acid sequences.\n\nAdditionally there is a module for running the [NetChop](http://www.cbs.dtu.dk/services/NetChop)  proteosomal cleavage predictor:\n* `NetChop`: requires locally installed version of [NetChop-3.1](http://www.cbs.dtu.dk/services/NetChop/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/openvax/mhctools",
    "keywords": "",
    "license": "http://www.apache.org/licenses/LICENSE-2.0.html",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mhctools",
    "package_url": "https://pypi.org/project/mhctools/",
    "platform": "",
    "project_url": "https://pypi.org/project/mhctools/",
    "project_urls": {
      "Homepage": "https://github.com/openvax/mhctools"
    },
    "release_url": "https://pypi.org/project/mhctools/1.7.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python interface to running command-line and web-based MHC binding predictors",
    "version": "1.7.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8378148,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8656740c8d43a880343b5edb59e3a3befb4a294ee077ef677c3aef757dd2bb2",
        "md5": "168897d40fc7c290216a54c86b072676",
        "sha256": "338f86f2500216066aa31556ee8f966e62c4957767cdd83ccaf662960ba40df2"
      },
      "downloads": -1,
      "filename": "mhctools-1.7.1.tar.gz",
      "has_sig": false,
      "md5_digest": "168897d40fc7c290216a54c86b072676",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 41378,
      "upload_time": "2020-05-01T21:27:01",
      "upload_time_iso_8601": "2020-05-01T21:27:01.814748Z",
      "url": "https://files.pythonhosted.org/packages/b8/65/6740c8d43a880343b5edb59e3a3befb4a294ee077ef677c3aef757dd2bb2/mhctools-1.7.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}