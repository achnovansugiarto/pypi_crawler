{
  "info": {
    "author": "Gabriel Llera",
    "author_email": "g113r4@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# converter\n# (documentation outdated)\n\nScript to maintain a multimedia library. It will make sure that the codec and bitrate that each file has is the expected and it will do the transcodding if needed.\n\nIt can eficiently handle libraries with more than 100.000 multimedia files automatically.\nI was no able to find a free/paid software that allows me to do that, so I made my own :)\n\n**Requisites:**\n- ffmpeg\n- redis server\n- python3\n- pip3 modules: bs4, redis, colorama, argparse\n\n**Configuration:**\n\n* Change de following files as needed:\n\nconf.py:\n```python3\n# redis server host\nREDIS_HOST = '10.0.0.3'\n\n# Multimedia library path\nLIBRARY = '/XXXX/YYYYY/ZZZZZZ'\n\n# Temporal folder to save finished transcodding and ongoing ones\nTEMPORAL = '/XXXX/YYYYY/ZZZZZZ'\n```\n\nparse.py:\n```python3\nprobe = 'ffprobe -v quiet -print_format json -show_streams'\naria = 'aria2c --disable-ipv6=true --follow-torrent=mem --seed-time=0 --enable-color=false --check-certificate=false --console-log-level=error --summary-interval=0'\nffmpeg = 'ffmpeg -hide_banner -y'\nffmpeg_vo = '-vsync 2 -r 30 -vf scale=1280x1280:force_original_aspect_ratio=decrease -b:v 500k -movflags +faststart'\n\n# Commands used\ncmds = {\n    # To get coddecs details about a file\n    'w-probe': '%s {0}' % probe,\n    # To transcode a video file using nvidia hardware aceleration\n    'w-hvideo': '%s -hwaccel nvdec -i {0} -c:a copy -c:v h264_nvenc %s -f mp4 {1}' % ( ffmpeg, ffmpeg_vo ),\n    # To transcode a video file using the cpu\n    'w-svideo': '%s -i {0} -c:a copy -c:v h264 %s -f mp4 {1}' % ( ffmpeg, ffmpeg_vo ),\n    # To transcode the audio of a video file\n    'w-vaudio': '%s -i {0} -c:a aac -b:a 100k -c:v copy -f mp4 {1}' % ( ffmpeg ),\n    # To transcode an audio file\n    'w-audio': '%s -i {0} -c:a mp3 -b:a 128k -f mp3 {1}' % ( ffmpeg ),\n    # To download a file\n    'w-download': '%s -d / -o {1} {0}' % aria,\n    # To download a torrent\n    'w-torrent': '%s -d {1} {0}' % aria\n}\n\n# This function makes sure that the file's coddecs are correct.\n# If you have a different needs, you should change this one it too.\ndef job_codec(f, codecs):\n    (...)\n```\n\n**Usage:**\n\n```bash\n# To print a detailed usage text:\n./main -h\n\n# To scan files in the library and create jobs to analize them if needed:\n./main -s\n\n# To analize and transcode the files if needed:\n./main -k w-download,w-torrent,w-svideo,w-vaudio,w-audio\n\n# To transcode the files using the GPU you may notice\n# that there is a maximum supported number of transcodding jobs that they can run in parallel.\n# You can match that amount use the parameter '-jN' as needed.\n# By default, all the videos are transcodded using the GPU.\n./main -j2 -k w-hvideo\n\n# To force retry some jobs, you can clean the redis lists 'done', 'doing' and 'failed'\n# using the command:\n./main -p\n```\n\n**Logs:**\n\nExecuted commands output is appended to: **$TEMP/converter.out**\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gllera/mconv",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mconv",
    "package_url": "https://pypi.org/project/mconv/",
    "platform": "",
    "project_url": "https://pypi.org/project/mconv/",
    "project_urls": {
      "Homepage": "https://github.com/gllera/mconv"
    },
    "release_url": "https://pypi.org/project/mconv/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Multimedia library maintainer",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9100972,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28a30c4907314cf3f5aa1589d9fa3ba407e68d8810accbbecaa9d30fc028c7cf",
        "md5": "244d2495a0c3e9d7b77dc1aa649f023f",
        "sha256": "c5d61f417e26bc17acb5d0993dfecc4da714a4818002663f496b10f871f1df78"
      },
      "downloads": -1,
      "filename": "mconv-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "244d2495a0c3e9d7b77dc1aa649f023f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3327,
      "upload_time": "2021-01-10T20:35:58",
      "upload_time_iso_8601": "2021-01-10T20:35:58.719534Z",
      "url": "https://files.pythonhosted.org/packages/28/a3/0c4907314cf3f5aa1589d9fa3ba407e68d8810accbbecaa9d30fc028c7cf/mconv-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2a40feb9de89f9f6a9f645688a8a701ee60dc27064b144524afa84f6dbf965e",
        "md5": "1b223c3aa2ebfe07e020d8ab6efbce28",
        "sha256": "b07c79dbb33eec7b90f7df391500c9084af022913c922f37f356fc5486b40d82"
      },
      "downloads": -1,
      "filename": "mconv-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1b223c3aa2ebfe07e020d8ab6efbce28",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3074,
      "upload_time": "2021-01-10T20:35:59",
      "upload_time_iso_8601": "2021-01-10T20:35:59.795338Z",
      "url": "https://files.pythonhosted.org/packages/a2/a4/0feb9de89f9f6a9f645688a8a701ee60dc27064b144524afa84f6dbf965e/mconv-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}