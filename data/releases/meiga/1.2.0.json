{
  "info": {
    "author": "ALiCE Biometrics",
    "author_email": "support@alicebiometrics.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "meiga ðŸ§™ [![ci](https://github.com/alice-biometrics/meiga/workflows/ci/badge.svg)](https://github.com/alice-biometrics/meiga/actions) [![pypi](https://img.shields.io/pypi/dm/meiga)](https://pypi.org/project/meiga/)\n=====\n\nA simple, typed and monad-based Result type for Python. \n\nBeyond the exceptions :bangbang: ... another way of handling errors!\n\nThis package provides a new type for your Python applications, the **Result[Type, Type]**.\nThis Result type allows to simplify a wide range of problems, like handling potential undefined values, or reduce complexity handling exceptions. Additionally, code can be simplified following a semantic pipeline reducing the visual noise of checking data types, controlling runtime flow and side-effects.\n\nThis package is based in another solutions from another modern languages as the swift-based [Result](https://github.com/antitypical/Result) implementation.\n\n## Installation :computer:\n\n~~~\npip install meiga\n~~~\n\n## Getting Started :chart_with_upwards_trend:\t\n\n**meiga** is a framework that give us a simpler, clearer way of handling errors in Python. Use it whenever a class method or a function has the possibility of failure. \n\nConsider the following example of a function that tries to extract a String (str) for a given key from a Dict.\n\n```python\nfrom meiga import Result, Error\n\n\nclass NoSuchKey(Error):\n    pass\n\n\nclass TypeMismatch(Error):\n    pass\n\n\ndef string_from_key(dictionary: dict, key: str) -> Result[str, Error]:\n    if key not in dictionary.keys():\n        return Result(failure=NoSuchKey())\n\n    value = dictionary[key]\n    if not isinstance(value, str):\n        return Result(failure=TypeMismatch())\n\n    return Result(success=value)\n```\n\nResult meiga type provides a robust wrapper around the functions.\nRather than throw an exception, it returns a Result that either contains the String value for the given key, or an ErrorClass detailing what went wrong.\n\n## Result[T, Error]\n\nA discriminated union that encapsulates successful outcome with a value of type T or a failure with an arbitrary Error exception.\n\n#### Properties\n\n| Properties      | Definition                                                     | \n| --------------- |:--------------------------------------------------------------| \n| `value`         | Returns the encapsulated value whether it's success or failure | \n| `is_success`    | Returns true if this instance represents successful outcome. In this case is_failure returns false.|   \n| `is_failure`    | Returns true if this instance represents failed outcome. In this case is_success returns false     | \n\n#### Functions\n\n| Functions                       | Definition                                                                                   | \n| --------------------------------|:-------------------------------------------------------------------------------------------- | \n| `throw()`                       | Throws the encapsulated failure value if this instance derive from Error or BaseException.    | \n| `unwrap()`                      | Returns the encapsulated value if this instance represents success or None if it is failure. | \n| `unwrap_or_throw()`             | Returns the encapsulated value if this instance represents success or throws the encapsulated exception if it is failure. |  \n| `unwrap_or_return()`            | Returns the encapsulated value if this instance represents success or return Result as long as `@meiga` decorator wraps the function |  \n| `unwrap_or(failure_value)`      | Returns the encapsulated value if this instance represents success or the selected `failure_value` if it is failure. |  \n| `unwrap_or_else(on_failure)`    | Returns the encapsulated value if this instance represents success or execute the `on_failure` function when it is failure. |   \n| `unwrap_and(on_success)`        | Returns the encapsulated value if this instance represents success and execute the `on_success` function when it is success. |   \n| `handle(on_success,on_failure)` | Returns itself and execute the `on_success`function when the instance represemts success and the `on_failure` function when it is failure. |  \n| `map(transform)`                | Returns a transformed result applying `transform` function applied to encapsulated value if this instance represents success or failure | \n\n\nLet's image we have a dictionary that represent a user info data\n\n```console\n>>> user_info = {\"first_name\": \"Rosalia\", \"last_name\": \"De Castro\", \"age\": 60}\n```\n\nAnd we try to obtain **first_name** \n\n```console\n>>> result = string_from_key(dictionary=user_info, key=\"first_name\")\nResult[status: success | value: Rosalia]\n```\n\nYou can check the status of the result\n\n```console\n>>> result.is_success\nTrue\n>>> result.is_failure\nFalse\n```\n\nIf the result is a success you can get the expected value\n\n```console\n>>> result.value\nRosalia \n```\n\nOtherwise, if we try to access an invalid key or a non string value, returned result will be a failure.\n\n```console\n>>> result = string_from_key(dictionary=user_info, key=\"invalid_key\")\nResult[status: failure | value: NoSuchKey]\n>>> result.is_failure\nTrue\n>>> result.value\nNoSuchKey() // Error \n```\n\nOr\n\n```console\n>>> result = string_from_key(dictionary=user_info, key=\"age\")\nResult[status: failure | value: TypeMismatch]\n>>> result.is_failure\nTrue\n>>> result.value\nTypeMismatch() // Error \n```\n\n### Alias\n\nUse meiga aliases to improve the semantics of your code.\n\nFor success result you can use:\n\n```python\nresult = Result(success=\"Rosalia\")\nresult = Success(\"Rosalia\") # it is equivalent\n```\n\nIf return value is a bool you can use:\n\n```python\nresult = Success()\nresult = Success(True)\nresult = isSuccess\n``` \n\nFor failure results:\n\n```python\nclass NoSuchKey(Error):\n    pass\n\nresult = Result(failure=NoSuchKey())\nresult = Failure(NoSuchKey())\n``` \n\nIf you don't want to specify the error, you can use default value with:\n\n```python\nresult = Failure()\nresult = Failure(Error())\nresult = isFailure # Only valid for a failure result with non-specific Error() value\n```\n\nBringing previous example back. that is the way you can use the alias:\n\n```python\nfrom meiga import Result, Error, Success, Failure,\n\n\nclass NoSuchKey(Error):\n    pass\n\n\nclass TypeMismatch(Error):\n    pass\n\n\ndef string_from_key(dictionary: dict, key: str) -> Result[str, Error]:\n    if key not in dictionary.keys():\n        return Failure(NoSuchKey())\n\n    value = dictionary[key]\n    if not isinstance(value, str):\n        return Failure(TypeMismatch())\n\n    return Success(value)\n```\n\n\nFurthermore, there is a available a useful alias: ```NotImplementedMethodError```\n\nUse it when define abstract method that returns Result type\n\n```python\nfrom meiga import Result, Error, NotImplementedMethodError\n\nfrom abc import ABCMeta, abstractmethod\n\nclass AuthService:\n\n    __metaclass__ = ABCMeta\n\n    @abstractmethod\n    def __init__(self, base_url: str):\n        self.base_url = base_url\n\n    @abstractmethod\n    def create_token(self, client: str, client_id: str) -> Result[str, Error]:\n        return NotImplementedMethodError\n```\n\n### Unwrap Result\n\nIf you *wrap* a Result object, its will return a valid value if it is success. Otherwise, it will return None.\n\n```python\nresult = Result(success=\"Hi!\")\nvalue = result.unwrap()\nassert value == \"Hi!\"\n\nresult = Failure(Error())\nvalue = result.unwrap()\n\nassert value is None\n```\n\n### Handle Result\n\nThis framework also allows a method for handling Result type\n\nWhen the operations is executed with its happy path, handle function returns the success value, as with result.value.\n\n```console\n>>> result = string_from_key(dictionary=user_info, key=\"first_name\")\nResult[status: success | value: Rosalia]\n>>> first_name = result.handle()\nRosalia\n```\n\nIn addition, you can call another function after evaluate the result. Use optional parameters **success_handler** and **failure_handler** (Callable functions).\n\n```python\ndef success_handler():\n    print(\"Do my successful stuff here!\")\n\ndef failure_handler():\n     print(\"Do my failure stuff here!\")\n\n\nresult = string_from_key(dictionary=user_info, key=\"first_name\")\n\nresult.handle(on_success=success_handler, on_failure=failure_handler)\n```\n\nIf you need to add some arguments as a parameters, use **success_args** and **failure_args**:\n\n```python\ndef success_handler(param_1):\n    print(f\"param_1: {param_1}\")\n\ndef failure_handler(param_1, param_2):\n    print(f\"param_1: {param_1}\")\n    print(f\"param_2: {param_2}\")\n\n\nresult = string_from_key(dictionary=user_info, key=\"first_name\")\n\nresult.handle(on_success=success_handler, \n              on_failure=failure_handler,\n              success_args=1,\n              failure_args=(1, 2))\n```\n\n\nOn the other hand, if something wrong happens handle function will raise an Exception (ReturnErrorOnFailure). \nMeiga has available a decorator to allow to handle the exception in case of error and unwrap the value in case of success.\n\n\n```python\nfrom meiga import Result, Error\nfrom meiga.decorators import meiga\n\n@meiga\ndef handling_result(key: str) -> Result:\n    user_info = {\"first_name\": \"Rosalia\", \"last_name\": \"De Castro\", \"age\": 60}\n    first_name = string_from_key(dictionary=user_info, key=key).handle() \n    # Do whatever with the name\n    name = first_name.lower()\n    return Result(success=name)\n```\n\nIf key is valid success value would be returned. Otherwise, an Error would be returned.\n\n\n### Assertions\n\nTo help us on testing functions that returns Result, meiga provide us two functions: **assert_success** and **access_failure**.\n\nCheck the following pytest-based test for more information: [tests/unit/test_result_assertions.py](https://github.com/alice-biometrics/meiga/blob/master/tests/unit/test_result_assertions.py)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alice-biometrics/meiga",
    "keywords": "Result,Monad,Typed,Typing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meiga",
    "package_url": "https://pypi.org/project/meiga/",
    "platform": "",
    "project_url": "https://pypi.org/project/meiga/",
    "project_urls": {
      "Homepage": "https://github.com/alice-biometrics/meiga"
    },
    "release_url": "https://pypi.org/project/meiga/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple, typed and monad-based Result type for Python",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16872722,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e378596d2e8c1c1c1890475850153cbbbad24e727fa7ce0b70c6d4c8e230e4c8",
        "md5": "b81b357c41ce9f9aa4b62b062fb9093d",
        "sha256": "eff01cb4e50af0b1ee57df11e936fd7cddd67e37798922e5965d2af586c76806"
      },
      "downloads": -1,
      "filename": "meiga-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b81b357c41ce9f9aa4b62b062fb9093d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10387,
      "upload_time": "2020-01-23T17:02:52",
      "upload_time_iso_8601": "2020-01-23T17:02:52.129178Z",
      "url": "https://files.pythonhosted.org/packages/e3/78/596d2e8c1c1c1890475850153cbbbad24e727fa7ce0b70c6d4c8e230e4c8/meiga-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea7e6be2c1329d5ad27a45efcdb5f482ee8a3975f906139821c8e80403f9f3a2",
        "md5": "6a513eda810e00ef29fafa656e31b2ba",
        "sha256": "b236830d32e2acbb7c861554ac56ef2addee8657d65c25a772264d70b61f4342"
      },
      "downloads": -1,
      "filename": "meiga-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6a513eda810e00ef29fafa656e31b2ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11687,
      "upload_time": "2020-01-23T17:02:53",
      "upload_time_iso_8601": "2020-01-23T17:02:53.416742Z",
      "url": "https://files.pythonhosted.org/packages/ea/7e/6be2c1329d5ad27a45efcdb5f482ee8a3975f906139821c8e80403f9f3a2/meiga-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}