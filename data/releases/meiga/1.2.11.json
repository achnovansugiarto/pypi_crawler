{
  "info": {
    "author": "ALiCE Biometrics",
    "author_email": "support@alicebiometrics.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# meiga ðŸ§™ [![version](https://img.shields.io/github/release/alice-biometrics/meiga/all.svg)](https://github.com/alice-biometrics/meiga/releases) [![ci](https://github.com/alice-biometrics/meiga/workflows/ci/badge.svg)](https://github.com/alice-biometrics/meiga/actions) [![pypi](https://img.shields.io/pypi/dm/meiga)](https://pypi.org/project/meiga/)\n\n<img src=\"https://github.com/alice-biometrics/custom-emojis/blob/master/images/alice_header.png\" width=auto>\n\nA simple, typed and monad-based Result type for Python. \n\n## Table of Contents\n- [Installation :computer:](#installation-computer)\n- [Getting Started :chart_with_upwards_trend:](#getting-started-chart_with_upwards_trend)\n  * [Example](#example)\n  * [Features](#features)\n    - [Result](#result)\n    - [Functions](#functions)\n    - [Properties](#properties)\n    - [Alias](#alias)\n- [Advance Usage :rocket:](#advance-usage-rocket)\n  * [Unwrap Result](#unwrap-result)\n  * [Handle Result](#handle-result)\n  * [Test Assertions](#test-assertions)\n- [Contact :mailbox_with_mail:](#contact-mailbox_with_mail)\n\n\n## Installation :computer:\n\n~~~\npip install meiga\n~~~\n\n## Getting Started :chart_with_upwards_trend:\t\n\n**Meiga** give us a simpler and clearer way of handling errors in Python. Use it whenever a class method or a function has the possibility of failure. \n\nThis package provides a new type for your Python applications, the **Result[Type, Type]**.\nThis Result type allows to simplify a wide range of problems, like handling potential undefined values, or reduce complexity handling exceptions. Additionally, code can be simplified following a semantic pipeline reducing the visual noise of checking data types, controlling runtime flow and side-effects.\n\nThis package is based in another solutions from another modern languages as the swift-based [Result](https://github.com/antitypical/Result) implementation.\n\n### Example\n\nThe best way to illustrate how **meiga ðŸ§™** can help you is with an example.\n\nConsider the following example of a function that tries to extract a String (str) for a given key from a Dict.\n\n```python\nfrom meiga import Result, Error\n\n\nclass NoSuchKey(Error):\n    pass\n\n\nclass TypeMismatch(Error):\n    pass\n\n\ndef string_from_key(dictionary: dict, key: str) -> Result[str, Error]:\n    if key not in dictionary.keys():\n        return Result(failure=NoSuchKey())\n\n    value = dictionary[key]\n    if not isinstance(value, str):\n        return Result(failure=TypeMismatch())\n\n    return Result(success=value)\n```\n\nResult meiga type provides a robust wrapper around the functions.\nRather than throw an exception, it returns a Result that either contains the String value for the given key, or an ErrorClass detailing what went wrong.\n\n### Features\n\n#### Result\n\n`Result[T, Error]` ðŸ‘‰ A discriminated union that encapsulates successful outcome with a value of type T or a failure with an arbitrary Error exception.\n\n#### Functions\n\n| Functions                       | Definition                                                                                   | \n| --------------------------------|:-------------------------------------------------------------------------------------------- | \n| `throw()`                       | Throws the encapsulated failure value if this instance derive from Error or BaseException.    | \n| `unwrap()`                      | Returns the encapsulated value if this instance represents success or None if it is failure. | \n| `unwrap_or_throw()`             | Returns the encapsulated value if this instance represents success or throws the encapsulated exception if it is failure. |  \n| `unwrap_or_return()`            | Returns the encapsulated value if this instance represents success or return Result as long as `@meiga` decorator wraps the function.|  \n| `unwrap_or(failure_value)`      | Returns the encapsulated value if this instance represents success or the selected `failure_value` if it is failure. |  \n| `unwrap_or_else(on_failure)`    | Returns the encapsulated value if this instance represents success or execute the `on_failure` function when it is failure. |   \n| `unwrap_and(on_success)`        | Returns the encapsulated value if this instance represents success and execute the `on_success` function when it is success. |   \n| `handle(on_success,on_failure)` | Returns itself and execute the `on_success`function when the instance represemts success and the `on_failure` function when it is failure. |  \n| `map(transform)`                | Returns a transformed result applying `transform` function applied to encapsulated value if this instance represents success or failure | \n\n\n#### Properties\n\n| Properties      | Definition                                                     | \n| --------------- |:--------------------------------------------------------------| \n| `value`         | Returns the encapsulated value whether it's success or failure | \n| `is_success`    | Returns true if this instance represents successful outcome. In this case is_failure returns false.|   \n| `is_failure`    | Returns true if this instance represents failed outcome. In this case is_success returns false     | \n\n\nLet's image we have a dictionary that represent a user info data\n\n```console\n>>> user_info = {\"first_name\": \"Rosalia\", \"last_name\": \"De Castro\", \"age\": 60}\n```\n\nAnd we try to obtain **first_name** \n\n```console\n>>> result = string_from_key(dictionary=user_info, key=\"first_name\")\nResult[status: success | value: Rosalia]\n```\n\nYou can check the status of the result\n\n```console\n>>> result.is_success\nTrue\n>>> result.is_failure\nFalse\n```\n\nIf the result is a success you can get the expected value\n\n```console\n>>> result.value\nRosalia \n```\n\nOtherwise, if we try to access an invalid key or a non string value, returned result will be a failure.\n\n```console\n>>> result = string_from_key(dictionary=user_info, key=\"invalid_key\")\nResult[status: failure | value: NoSuchKey]\n>>> result.is_failure\nTrue\n>>> result.value\nNoSuchKey() // Error \n```\n\nOr\n\n```console\n>>> result = string_from_key(dictionary=user_info, key=\"age\")\nResult[status: failure | value: TypeMismatch]\n>>> result.is_failure\nTrue\n>>> result.value\nTypeMismatch() // Error \n```\n\n#### Alias\n\nUse meiga aliases to improve the semantics of your code.\n\nFor success result you can use:\n\n```python\nresult = Result(success=\"Rosalia\")\nresult = Success(\"Rosalia\") # it is equivalent\n```\n\nIf return value is a bool you can use:\n\n```python\nresult = Success()\nresult = Success(True)\nresult = isSuccess\n``` \n\nFor failure results:\n\n```python\nclass NoSuchKey(Error):\n    pass\n\nresult = Result(failure=NoSuchKey())\nresult = Failure(NoSuchKey())\n``` \n\nIf you don't want to specify the error, you can use default value with:\n\n```python\nresult = Failure()\nresult = Failure(Error())\nresult = isFailure # Only valid for a failure result with non-specific Error() value\n```\n\nBringing previous example back. that is the way you can use the alias:\n\n```python\nfrom meiga import Result, Error, Success, Failure,\n\n\nclass NoSuchKey(Error):\n    pass\n\n\nclass TypeMismatch(Error):\n    pass\n\n\ndef string_from_key(dictionary: dict, key: str) -> Result[str, Error]:\n    if key not in dictionary.keys():\n        return Failure(NoSuchKey())\n\n    value = dictionary[key]\n    if not isinstance(value, str):\n        return Failure(TypeMismatch())\n\n    return Success(value)\n```\n\n\nFurthermore, there is a available a useful alias: ```NotImplementedMethodError```\n\nUse it when define abstract method that returns Result type\n\n```python\nfrom meiga import Result, Error, NotImplementedMethodError\n\nfrom abc import ABCMeta, abstractmethod\n\nclass AuthService:\n\n    __metaclass__ = ABCMeta\n\n    @abstractmethod\n    def __init__(self, base_url: str):\n        self.base_url = base_url\n\n    @abstractmethod\n    def create_token(self, client: str, client_id: str) -> Result[str, Error]:\n        return NotImplementedMethodError\n```\n\n## Advance Usage :rocket:\n\n### Unwrap Result\n\nIf you *wrap* a Result object, its will return a valid value if it is success. Otherwise, it will return None.\n\n```python\nresult = Result(success=\"Hi!\")\nvalue = result.unwrap()\nassert value == \"Hi!\"\n\nresult = Failure(Error())\nvalue = result.unwrap()\n\nassert value is None\n```\n\n* Check [Functions](#functions) to know more about *unwraping* methods.\n* Check [tests/unit/test_result_unwrap.py](https://github.com/alice-biometrics/meiga/blob/master/tests/unit/test_result_unwrap.py) to see examples of usage.\n\n\nYou can use `unwrap_or_return`in combination with `@meiga` decorator. If something wrong happens unwraping your `Result`, the `unwrap_or_return` function will raise an Exception (ReturnErrorOnFailure). `@meiga` decorator allows to handle the exception in case of error and unwrap the value in case of success. The following example illustrate this:\n\n```python\nfrom meiga import Result, Error\nfrom meiga.decorators import meiga\n\n@meiga\ndef handling_result(key: str) -> Result:\n    user_info = {\"first_name\": \"Rosalia\", \"last_name\": \"De Castro\", \"age\": 60}\n    first_name = string_from_key(dictionary=user_info, key=key).unwrap_or_return() \n    # Do whatever with the name\n    name = first_name.lower()\n    return Result(success=name)\n```\n\nIf key is valid success value would be returned. Otherwise, an Error would be returned.\n\nIf you need to return a specific value if fails, you can do it with meiga:\n\n```python\nfirst_name = string_from_key(dictionary=user_info, key=key).unwrap_or_return(return_value_on_failure=isSuccess) \n```\n\n### Handle Result\n\nThis framework also allows a method for handling Result type. `handle` method returns itself and execute the `on_success` function when the instance represemts success and the `on_failure` function when it is failure.\n\n\nWhen the operations is executed with its happy path, handle function returns the success value, as with result.value.\n\n```console\n>>> result = string_from_key(dictionary=user_info, key=\"first_name\")\nResult[status: success | value: Rosalia]\n>>> first_name = result.handle()\nRosalia\n```\n\nIn addition, you can call another function after evaluate the result. Use optional parameters **success_handler** and **failure_handler** (Callable functions).\n\n```python\ndef success_handler():\n    print(\"Do my successful stuff here!\")\n\ndef failure_handler():\n     print(\"Do my failure stuff here!\")\n\n\nresult = string_from_key(dictionary=user_info, key=\"first_name\")\n\nresult.handle(on_success=success_handler, on_failure=failure_handler)\n```\n\n##### Additional parameters\n\nIf you need to add some arguments as a parameters, use **success_args** and **failure_args**:\n\n```python\ndef success_handler(param_1):\n    print(f\"param_1: {param_1}\")\n\ndef failure_handler(param_1, param_2):\n    print(f\"param_1: {param_1}\")\n    print(f\"param_2: {param_2}\")\n\n\nresult = string_from_key(dictionary=user_info, key=\"first_name\")\n\nresult.handle(on_success=success_handler, \n              on_failure=failure_handler,\n              success_args=1,\n              failure_args=(1, 2))\n```\n\n##### Additional parameters in combination with the Result itself\n\nSometimes a handle function will need information about external parameters and also about the result itself. Now, is possible this combination thanks to `Result.__id__` identifier. \n\n```python\n    parameters = (1, Result.__id__, 2)\n\n    def on_success(param_1: int, result: Result, param_2: int):\n        assert param_1 == 1\n        assert isinstance(result, Result)\n        assert result.value is True\n        assert param_2 == 2\n\n    def on_failure(param_1: int, result: Result, param_2: int):\n        assert param_1 == 1\n        assert isinstance(result, Result)\n        assert result.value == Error()\n        assert param_2 == 2\n\n    @meiga\n    def run():\n        result.handle(\n            on_success=on_success,\n            on_failure=on_failure,\n            success_args=parameters,\n            failure_args=parameters,\n        )\n\n    run()\n```\n\n\n\n\n### Test Assertions\n\nTo help us on testing functions that returns Result, meiga provide us two functions: **assert_success** and **access_failure**.\n\nCheck the following pytest-based test for more information: [tests/unit/test_result_assertions.py](https://github.com/alice-biometrics/meiga/blob/master/tests/unit/test_result_assertions.py)\n\n## Contact :mailbox_with_mail:\n\nsupport@alicebiometrics.com\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alice-biometrics/meiga",
    "keywords": "Result,Monad,Typed,Typing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meiga",
    "package_url": "https://pypi.org/project/meiga/",
    "platform": "",
    "project_url": "https://pypi.org/project/meiga/",
    "project_urls": {
      "Homepage": "https://github.com/alice-biometrics/meiga"
    },
    "release_url": "https://pypi.org/project/meiga/1.2.11/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple, typed and monad-based Result type for Python",
    "version": "1.2.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16872722,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1096280c01c64f06bf18311ef6e835d02c4a3c2f232710112ea43490f45c7ba",
        "md5": "9378e4a4825372a3739592cfb01ff765",
        "sha256": "15fea6b30081974d482920eed22f496473d3a940701a330385be0146bb7185ae"
      },
      "downloads": -1,
      "filename": "meiga-1.2.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9378e4a4825372a3739592cfb01ff765",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11771,
      "upload_time": "2020-11-24T09:06:43",
      "upload_time_iso_8601": "2020-11-24T09:06:43.427650Z",
      "url": "https://files.pythonhosted.org/packages/c1/09/6280c01c64f06bf18311ef6e835d02c4a3c2f232710112ea43490f45c7ba/meiga-1.2.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "190d6bc1248e79276b9b873ce74b75cb04f77a733e61474112a9c326de6d48ea",
        "md5": "0921d850a264ab70ee9fd8f5b44150bf",
        "sha256": "f342e4300a5fc6bc3fe4d892120e7809dd98496aa693254618b0c20a37530e1e"
      },
      "downloads": -1,
      "filename": "meiga-1.2.11.tar.gz",
      "has_sig": false,
      "md5_digest": "0921d850a264ab70ee9fd8f5b44150bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13786,
      "upload_time": "2020-11-24T09:06:44",
      "upload_time_iso_8601": "2020-11-24T09:06:44.903124Z",
      "url": "https://files.pythonhosted.org/packages/19/0d/6bc1248e79276b9b873ce74b75cb04f77a733e61474112a9c326de6d48ea/meiga-1.2.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}