{
  "info": {
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# mo-fabric\n\nA façade atop [fabric2](http://www.fabfile.org/)\n\n## Overview\n\nI have revisited [Fabric](http://www.fabfile.org/) (September 2018) to find it can handle multiple threads and multiple connections!  This is great news: it makes all my automation faster!\n\nLike with most APIs, I made a façade because Fabric is not congruent to my own programming conventions. This is not bad, just different: The domain I work in is slightly different than what the Fabric developers expect. \n\nHere are the differences:\n\n* All `stdout` and `strerr` from the remote machine is annotated, and shunted, to the local logging module.\n* A few convenience methods are added:\n  * `conn.exists(path)` - to test if a remote file exists\n  * `with conn.warn_only():` - context manager if you do not care if your commands fail\n  * `get(remote, local, use_sudo=False)` - allows you to use tilde (`~`) on Windows to refer to home directory\n  * `put(local, remote, use_sudo=False)` - similar to `get`, except copies files to remote\n  * `sudo(command)` works with the `cd()` context manager\n  * `Result.__contains__()` so checking for patterns in command output is simpler:\n    ```python\n        result = conn.run(\"ls /data1\", warn=True)\n        not_found = \"No` such file or directory\" in result\n    ```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klahnakoski/mo-fabric",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mo-fabric",
    "package_url": "https://pypi.org/project/mo-fabric/",
    "platform": "",
    "project_url": "https://pypi.org/project/mo-fabric/",
    "project_urls": {
      "Homepage": "https://github.com/klahnakoski/mo-fabric"
    },
    "release_url": "https://pypi.org/project/mo-fabric/3.30.19346/",
    "requires_dist": null,
    "requires_python": "==2.7, >=3.6",
    "summary": "Thin facade atop fabric",
    "version": "3.30.19346",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6287933,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92eff2a6a95b242f3cb1bda69e84b2d9afe49a3b52961af1d37c4705d36db1a7",
        "md5": "b15d7ba49860ed70809f87628c494c0c",
        "sha256": "61f89c2e102e03c07b7e46e50ce8de795c9f16511c04030f477cc4ede6e460d2"
      },
      "downloads": -1,
      "filename": "mo-fabric-3.30.19346.tar.gz",
      "has_sig": false,
      "md5_digest": "b15d7ba49860ed70809f87628c494c0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "==2.7, >=3.6",
      "size": 4181,
      "upload_time": "2019-12-12T18:29:12",
      "upload_time_iso_8601": "2019-12-12T18:29:12.432427Z",
      "url": "https://files.pythonhosted.org/packages/92/ef/f2a6a95b242f3cb1bda69e84b2d9afe49a3b52961af1d37c4705d36db1a7/mo-fabric-3.30.19346.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}