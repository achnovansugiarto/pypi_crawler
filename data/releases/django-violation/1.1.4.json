{
  "info": {
    "author": "Oluwaseun Peter",
    "author_email": "adepeter26@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# django-violation\n\n## Description\n\nDescription Django-violation is a very simple app which serves the purpose of violation. It can easily be plugged into any django app of your choice with just little line of code/customization but with robust function.\n\n## Installation\n\n```\n>> pip install django-violation\n```\n\n## Features\n\ndjango-violation is shipped with basic features that is needed for reporting / flagging an item, post, image, user, thread etc as invalid.\n\nAmong some of its basic features are:\n\n- An item cannot be submitted for violation by same person.\n- Built-in django admin panel.\n- Ability to redisplay rules that have been submitted by various users.\n- Can be plugged with any django app.\n- Highly customizable.\n\n**Future implementations**\n\n- Adding a UI interface.\n\n## Requirements\n\n- Python >= 3.7\n- Django >= 3.1\n\n## Usage\n\n1. Add package to list of your already available django apps in settings.py\n\n   Code:\n\n```\nINSTALLED_APPS = [\n\n...\n\n'violation',\n\n]\n```\n2. Run database migration to sync preset violation that the app ships with.\n  Code: \n\n  ```\n  >> python manage.py migrate\n  ```\n\n\n\n3. Login your project admin panel and you should see VIOLATION added menu.\n\n4. Next is to write a view code to load object you will like report.\n\n   ### CBV\n\n   For Lovers of class views, who want to customize to the core,  import `BaseViolationViewMixin`\n\n   i.e. `from violation.viewmixins.violation import BaseViolationMixin`\n\n   Inherit the view class and supply other `CreateView` parameters other than form_class.\n\n   Do something similar to this\n\n   ```\n   from violation.views.violation import BaseViolationView\n\n   class ThreadViolationView(BaseViolationView):\n       model = YourModelClass\n    template_name = ''\n   ```\n\n   It's worth noting that `BaseViolationView` ancestors are `BaseViolationMixin` and `CreateView`\n\n   ### FBV\n\n   Function base view user can follow this code logic\n\n   ```\n   from django.shortcuts import render, get_object_or_404\n\n   from violation.forms.violation import ViolationForm\n\n   from .models import Thread # where this a an imaginary thread you want to report\n\n   TEMPLATE_URL = 'apps/threads'\n\n   def report_thread(request, pk):\n       template_name = f'{TEMPLATE_URL}/report_thread.html'\n       thread = get_object_or_404(Thread, pk=pk)\n       form_kwargs = {\n           'request': request,\n           'object': thread,\n       }\n       if request.method == 'POST':\n           form = ViolationForm(data=request.POST, **form_kwargs)\n           if form.is_valid():\n               form.save()\n       else:\n           form = ViolationForm(**form_kwargs)\n       context = {\n           'form': form,\n           'thread': thread\n       }\n       return render(request, template_name, context=context)\n   ```\n\n> Most importantly, it is worth noting that request and object keywords must be passed to form in your view.\n\nFor further customization, see project source code in [github](http://github.com/adepeter/django-violations).\n\n## Limitations\n\n- Lack of links and UI.\n- Limited info on how to fully use.\n\n## Versioning\n\nSemVer is the versioning style utilized for this app. For the versions available, see the tags on this repository [releases](https://github.com/adepeter/django-violations/releases).\n\n## License\n\nThis work uses MIT license\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adepeter/django-violations",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-violation",
    "package_url": "https://pypi.org/project/django-violation/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-violation/",
    "project_urls": {
      "Homepage": "https://github.com/adepeter/django-violations",
      "Source": "https://github.com/adepeter/django-violations",
      "Tracker": "https://github.com/adepeter/django-violations/issues"
    },
    "release_url": "https://pypi.org/project/django-violation/1.1.4/",
    "requires_dist": [
      "Django (>=3.1)"
    ],
    "requires_python": ">=3.7",
    "summary": "django-violation is a reusable Django application for reporting illicit/improper acts.",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14769618,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f4298d59a8fc52cd5f61c008cf39a3289cd502e63fe90d353526048c7c91c46",
        "md5": "c3aaae79f2ae45760c44fdeaba5a1cf0",
        "sha256": "752336cb54a9c0d85fbc8bbcd83adb8fcaf691b02585b6c46fb93467fb81740b"
      },
      "downloads": -1,
      "filename": "django_violation-1.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c3aaae79f2ae45760c44fdeaba5a1cf0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13834,
      "upload_time": "2020-08-31T20:59:42",
      "upload_time_iso_8601": "2020-08-31T20:59:42.269861Z",
      "url": "https://files.pythonhosted.org/packages/0f/42/98d59a8fc52cd5f61c008cf39a3289cd502e63fe90d353526048c7c91c46/django_violation-1.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf117b7765b9ccfb3bd0e6f451f8141bd3f6315d2f76b7cfa5ba7be610155e8d",
        "md5": "7b849ca584860529c13685a5df04a2cf",
        "sha256": "d328313f3c444d15628bb763f776bd5d2929e7a15d5598a715f53bc4146a2415"
      },
      "downloads": -1,
      "filename": "django-violation-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "7b849ca584860529c13685a5df04a2cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10425,
      "upload_time": "2020-08-31T20:59:44",
      "upload_time_iso_8601": "2020-08-31T20:59:44.100780Z",
      "url": "https://files.pythonhosted.org/packages/cf/11/7b7765b9ccfb3bd0e6f451f8141bd3f6315d2f76b7cfa5ba7be610155e8d/django-violation-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}