{
  "info": {
    "author": "Carl Meyer",
    "author_email": "carl@dirtcircle.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.4",
      "Framework :: Django :: 1.5",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "===============\r\ndjango-lockdown\r\n===============\r\n\r\n.. image:: https://travis-ci.org/Dunedan/django-lockdown.svg?branch=master\r\n    :target: https://travis-ci.org/Dunedan/django-lockdown\r\n    :alt: Build Status\r\n.. image:: https://coveralls.io/repos/Dunedan/django-lockdown/badge.svg\r\n    :target: https://coveralls.io/r/Dunedan/django-lockdown\r\n    :alt: Test Coverage\r\n.. image:: https://landscape.io/github/Dunedan/django-lockdown/master/landscape.svg?style=flat\r\n    :target: https://landscape.io/github/Dunedan/django-lockdown/master\r\n    :alt: Code Health\r\n.. image:: https://pypip.in/version/django-lockdown/badge.svg\r\n    :target: https://pypi.python.org/pypi/django-lockdown/\r\n    :alt: Latest Version\r\n.. image:: https://pypip.in/download/django-lockdown/badge.svg\r\n    :target: https://pypi.python.org/pypi/django-lockdown/\r\n    :alt: Downloads\r\n\r\n\r\n``django-lockdown`` is a reusable Django application for locking down an entire\r\nsite (or particular views), with customizable date ranges and preview\r\nauthorization.\r\n\r\nInstallation\r\n============\r\n\r\nInstall from PyPI with ``easy_install`` or ``pip``::\r\n\r\n    pip install django-lockdown\r\n\r\nTo use ``django-lockdown`` in your Django project:\r\n\r\n1. Add ``'lockdown'`` to your ``INSTALLED_APPS``.\r\n\r\n2. To enable admin preview of locked-down sites or views with\r\n   passwords, set the `LOCKDOWN_PASSWORDS`_ setting to a tuple of one or\r\n   more plain-text passwords.\r\n\r\n3. Protect the entire site by using middleware, or protect individual views\r\n   by applying a decorator to them.\r\n       \r\nFor more advanced customization of admin preview authorization, see\r\nthe `LOCKDOWN_FORM`_ setting.\r\n\r\nDependencies\r\n------------\r\n\r\n``django-lockdown`` requires `Python`_ 2.7 or later and `Django`_ 1.3 or later.\r\n\r\n.. _Python: https://www.python.org/\r\n.. _Django: https://www.djangoproject.com/\r\n\r\nUsage\r\n=====\r\n\r\nUsing the middleware\r\n--------------------\r\n\r\nTo lock down the entire site, add the lockdown middleware to your\r\n``MIDDLEWARE_CLASSES`` setting::\r\n\r\n    MIDDLEWARE_CLASSES = (\r\n        # ...\r\n        'lockdown.middleware.LockdownMiddleware',\r\n    )\r\n    \r\nOptionally, you may also add URL regular expressions to a\r\n`LOCKDOWN_URL_EXCEPTIONS`_ setting.\r\n\r\nUsing the decorator\r\n-------------------\r\n\r\n- Import the decorator::\r\n\r\n    from lockdown.decorators import lockdown\r\n\r\n- Apply the decorator to individual views you want to protect. For example::\r\n\r\n    @lockdown()\r\n    def secret_page(request):\r\n        # ...\r\n\r\nThe decorator accepts six arguments:\r\n\r\n``form``\r\n  The form to use for providing an admin preview, rather than the form\r\n  referenced by `LOCKDOWN_FORM`_. Note that this must be an actual form class,\r\n  not a module reference like the setting.\r\n\r\n``until_date``\r\n  The date to use rather than the date provided by `LOCKDOWN_UNTIL`_.\r\n\r\n``after_date``\r\n  The date to use rather than the date provided by `LOCKDOWN_AFTER`_.\r\n\r\n``logout_key``\r\n  A preview logout key to use, rather than the one provided by\r\n  `LOCKDOWN_LOGOUT_KEY`_.\r\n\r\n``session_key``\r\n  The session key to use, rather than the one provided by\r\n  `LOCKDOWN_SESSION_KEY`_.\r\n \r\n``url_exceptions``\r\n  A list of regular expressions for which matching urls can bypass the lockdown\r\n  (rather than using those defined in `LOCKDOWN_URL_EXCEPTIONS`_).\r\n\r\nAny further keyword arguments are passed to the admin preview form. The default\r\nform accepts one argument:\r\n\r\n``passwords``\r\n  A tuple of passwords to use, rather than the ones provided by\r\n  `LOCKDOWN_PASSWORDS`_.\r\n\r\n\r\nSettings\r\n========\r\n\r\nLOCKDOWN_ENABLED\r\n----------------\r\n\r\nAn optional boolean value that, if set to False, disables\r\n``django-lockdown`` globally. Defaults to True (lock down enabled).\r\n\r\n\r\nLOCKDOWN_PASSWORDS\r\n------------------\r\n\r\nOne or more plain-text passwords which allow the previewing of the site or\r\nviews protected by django-lockdown::\r\n\r\n    LOCKDOWN_PASSWORDS = ('letmein', 'beta')\r\n\r\nIf this setting is not provided (and the default `LOCKDOWN_FORM`_ is being\r\nused), there will be no admin preview for locked-down pages.\r\n\r\nIf a `LOCKDOWN_FORM`_ other than the default is used, this setting has no\r\neffect.\r\n\r\nLOCKDOWN_URL_EXCEPTIONS\r\n-----------------------\r\n\r\nAn optional list/tuple of regular expressions to be matched against incoming\r\nURLs. If a URL matches a regular expression in this list, it will not be\r\nlocked. For example::\r\n\r\n    LOCKDOWN_URL_EXCEPTIONS = (\r\n        r'^/about/$',   # unlock /about/\r\n        r'\\.json$',   # unlock JSON API\r\n    )\r\n\r\nLOCKDOWN_UNTIL\r\n--------------\r\n\r\nUsed to lock the site down up until a certain date. Set to a\r\n``datetime.datetime`` object.\r\n\r\nIf neither ``LOCKDOWN_UNTIL`` nor `LOCKDOWN_AFTER`_ is provided (the default),\r\nthe site or views will always be locked.\r\n\r\nLOCKDOWN_AFTER\r\n--------------\r\n\r\nUsed to lock the site down after a certain date. Set to a ``datetime.datetime``\r\nobject.\r\n\r\nSee also: `LOCKDOWN_UNTIL`_.\r\n\r\nLOCKDOWN_LOGOUT_KEY\r\n-------------------\r\n\r\nA key which, if provided in the query string of a locked URL, will log out the\r\nuser from the preview. \r\n\r\nLOCKDOWN_FORM\r\n-------------\r\n\r\nThe default lockdown form allows admin preview by entering a preset\r\nplain-text password (checked, by default, against the `LOCKDOWN_PASSWORDS`_\r\nsetting). To set up more advanced methods of authenticating access to\r\nlocked-down pages, set ``LOCKDOWN_FORM`` to the Python dotted path to a Django\r\n``Form`` subclass. This form will be displayed on the lockout page. If the form\r\nvalidates when submitted, the user will be allowed access to locked pages::\r\n\r\n    LOCKDOWN_FORM = 'path.to.my.CustomLockdownForm'\r\n    \r\nA form for authenticating against ``django.contrib.auth`` users is provided\r\nwith django-lockdown (use ``LOCKDOWN_FORM = 'lockdown.forms.AuthForm'``). It\r\naccepts two keyword arguments (in the ``lockdown`` decorator):\r\n\r\n``staff_only``\r\n  Only allow staff members to preview. Defaults to ``True`` (but the default\r\n  can be provided as a `LOCKDOWN_AUTHFORM_STAFF_ONLY`_ setting).\r\n\r\n``superusers_only``\r\n  Only allow superusers to preview. Defaults to ``False`` (but the default\r\n  can be provided as a `LOCKDOWN_AUTHFORM_SUPERUSERS_ONLY`_ setting).\r\n\r\nLOCKDOWN_AUTHFORM_STAFF_ONLY\r\n----------------------------\r\n\r\nIf using ``lockdown.forms.AuthForm`` and this setting is ``True``, only staff\r\nusers will be allowed to preview (True by default).\r\n\r\nHas no effect if not using ``lockdown.forms.AuthForm``.\r\n\r\nLOCKDOWN_AUTHFORM_SUPERUSERS_ONLY\r\n---------------------------------\r\n\r\nIf using ``lockdown.forms.AuthForm`` and this setting is ``True``, only\r\nsuperusers will be allowed to preview (False by default). Has no effect if not\r\nusing ``lockdown.forms.AuthForm``.\r\n\r\nLOCKDOWN_SESSION_KEY\r\n--------------------\r\n\r\nOnce a client is authorized for admin preview, they will continue to\r\nbe authorized for the remainder of their browsing session (using\r\nDjango's built-in session support). ``LOCKDOWN_SESSION_KEY`` defines\r\nthe session key used; the default is ``'lockdown-allow'``.\r\n\r\n\r\nTemplates\r\n=========\r\n\r\n``django-lockdown`` uses a single template, ``lockdown/form.html``. The\r\ndefault template displays a simple \"coming soon\" message and the\r\npreview authorization form.\r\n\r\nIf you want to override this template, the lockdown preview form is available\r\nin the template context as ``form``.\r\n\r\nCHANGES\r\n=======\r\n\r\n1.1 (2015.04.06)\r\n----------------\r\n\r\n- Proper new version after 0.1.2 and 0.1.3 have been tagged after the release\r\n  of 1.0. Contains all new features of 0.1.2 and 0.1.3, most notably support\r\n  for Python 3.\r\n\r\n- Last version of django-lockdown with support for Django 1.3, 1.5 and 1.6.\r\n  Upcoming versions will only support Django versions with official security\r\n  support. For the time being these are Django 1.4 LTS, 1.7 and 1.8 LTS.\r\n\r\n- Fixes testing for Django >=1.7\r\n\r\n0.1.3 (2014.03.15) (never released)\r\n-----------------------------------\r\n\r\n- Added ``LOCKDOWN_ENABLED`` setting.\r\n\r\n- Removed Django 1.1 backport of ``decorator_from_middleware_with_args``.\r\n\r\n0.1.2 (2014.03.15) (never released)\r\n-----------------------------------\r\n\r\n- Require at least Django 1.3.\r\n\r\n- Fixed the test runner script to work with recent Django versions.\r\n\r\n- Added the csrf_token template tag to the included form template.\r\n\r\n- Minor syntax adjustments for Python 3 compatibility.\r\n\r\n1.0 (2013.07.10)\r\n------------------\r\n\r\n- BACKWARDS INCOMPATIBLE: Allow multiple passwords (the passwords setting has\r\n  changed from ``LOCKDOWN_PASSWORD`` to ``LOCKDOWN_PASSWORDS``).\r\n\r\n- Decorator changed to a callable decorator (so settings can be overridden for\r\n  an individual decorator).\r\n\r\n- Add ``AuthForm`` which can be used to allow previewing from authenticated\r\n  users (via ``django.contrib.auth``).\r\n\r\n- Allow locking up until or only after certain dates.\r\n\r\n0.1.1 (2009.11.24)\r\n------------------\r\n\r\n- Fix setup.py so ``tests`` package is not installed.\r\n\r\n0.1 (2009.11.16)\r\n----------------\r\n\r\n- Initial release.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dunedan/django-lockdown/",
    "keywords": "",
    "license": "",
    "maintainer": "Daniel Roschka",
    "maintainer_email": "danielroschka@phoenitydawn.de",
    "name": "django-lockdown",
    "package_url": "https://pypi.org/project/django-lockdown/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-lockdown/",
    "project_urls": {
      "Homepage": "https://github.com/Dunedan/django-lockdown/"
    },
    "release_url": "https://pypi.org/project/django-lockdown/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Lock down a Django site or individual views, with configurable preview authorization",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9412453,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca10a8cd3b236c060662ae136c88e253390f20fd164ce860091189ddea1d4ab1",
        "md5": "d172b191b9771abc71a9360df9e281d3",
        "sha256": "c32cdb3cb41f65c31120efb16d855b181eaa27858e07c5da6fc9149e1724a117"
      },
      "downloads": -1,
      "filename": "django-lockdown-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d172b191b9771abc71a9360df9e281d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15547,
      "upload_time": "2015-04-06T18:45:03",
      "upload_time_iso_8601": "2015-04-06T18:45:03.274688Z",
      "url": "https://files.pythonhosted.org/packages/ca/10/a8cd3b236c060662ae136c88e253390f20fd164ce860091189ddea1d4ab1/django-lockdown-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}