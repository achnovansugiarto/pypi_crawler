{
  "info": {
    "author": "Carl Meyer",
    "author_email": "carl@dirtcircle.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "===============\ndjango-lockdown\n===============\n\nA simple Django reusable application for locking down an entire site\n(or particular views), with customizable date ranges and preview authorization.\n\nInstallation\n============\n\nInstall from PyPI with ``easy_install`` or ``pip``::\n\n    pip install django-lockdown\n\nor get the `in-development version`_::\n\n    pip install django-lockdown==tip\n\n.. _in-development version: http://bitbucket.org/carljm/django-lockdown/get/tip.gz#egg=django_lockdown-tip\n\nTo use ``django-lockdown`` in your Django project:\n\n    1. Add ``'lockdown'`` to your ``INSTALLED_APPS`` setting.\n\n    2. To enable admin preview of locked-down sites or views with\n       passwords, set the `LOCKDOWN_PASSWORDS`_ setting to a tuple of one or\n       more plain-text passwords.\n\n    3. Protect the entire site by using middleware, or protect individual views\n       by applying a decorator to them.\n       \nFor more advanced customization of admin preview authorization, see\nthe `LOCKDOWN_FORM`_ setting.\n\nDependencies\n------------\n\n``django-lockdown`` requires `Django`_ 1.1 or later.\n\n.. _Django: http://www.djangoproject.com/\n\nUsage\n=====\n\nUsing the middleware\n--------------------\n\nTo lock down the entire site, add the lockdown middleware to your\n``MIDDLEWARE_CLASSES`` setting::\n\n    MIDDLEWARE_CLASSES = (\n        # ...\n        'lockdown.middleware.LockdownMiddleware',\n    )\n    \nOptionally, you may also add URL regular expressions to a\n`LOCKDOWN_URL_EXCEPTIONS`_ setting.\n\nUsing the decorator\n-------------------\n\nApply the decorator to individual views you want to protect. For example::\n\n    @lockdown()\n    def secret_page(request):\n        # ...\n\nThe decorator accepts four arguments:\n\n``form``\n  The form to use for providing an admin preview, rather than the form\n  referenced by `LOCKDOWN_FORM`_. Note that this must be an actual form class,\n  not a module reference like the setting.\n\n``until_date``\n  The date to use rather than the date provided by `LOCKDOWN_UNTIL`_.\n\n``after_date``\n  The date to use rather than the date provided by `LOCKDOWN_AFTER`_.\n\n``logout_key``\n  A preview logout key to use, rather than the one provided by\n  `LOCKDOWN_LOGOUT_KEY`_.\n\n``session_key``\n  The session key to use, rather than the one provided by\n  `LOCKDOWN_SESSION_KEY`_.\n \n``url_exceptions``\n  A list of regular expressions for which matching urls can bypass the lockdown\n  (rather than using those defined in `LOCKDOWN_URL_EXCEPTIONS`_).\n\nAny further keyword arguments are passed to the admin preview form. The default\nform accepts one argument:\n\n``passwords``\n  A tuple of passwords to use, rather than the ones provided by\n  `LOCKDOWN_PASSWORDS`_.\n\n\nSettings\n========\n\nLOCKDOWN_PASSWORDS\n------------------\n\nOne or more plain-text passwords which allow the previewing of the site or\nviews protected by django-lockdown::\n\n    LOCKDOWN_PASSWORDS = ('letmein', 'beta')\n\nIf this setting is not provided (and the default `LOCKDOWN_FORM`_ is being\nused), there will be no admin preview for locked-down pages.\n\nIf a `LOCKDOWN_FORM`_ other than the default is used, this setting has no\neffect.\n\nLOCKDOWN_URL_EXCEPTIONS\n-----------------------\n\nAn optional list/tuple of regular expressions to be matched against incoming\nURLs. If a URL matches a regular expression in this list, it will not be\nlocked. For example::\n\n    LOCKDOWN_URL_EXCEPTIONS = (\n        r'^/about/$',   # unlock /about/\n        r'\\.json$',   # unlock JSON API\n    )\n\nLOCKDOWN_UNTIL\n--------------\n\nUsed to lock the site down up until a certain date. Set to a\n``datetime.datetime`` object.\n\nIf neither ``LOCKDOWN_UNTIL`` nor `LOCKDOWN_AFTER`_ is provided (the default),\nthe site or views will always be locked.\n\nLOCKDOWN_AFTER\n--------------\n\nUsed to lock the site down after a certain date. Set to a ``datetime.datetime``\nobject.\n\nSee also: `LOCKDOWN_UNTIL`_.\n\nLOCKDOWN_LOGOUT_KEY\n-------------------\n\nA key which, if provided in the querystring of a locked URL, will log out the\nuser from the preview. \n\nLOCKDOWN_FORM\n-------------\n\nThe default lockdown form allows admin preview by entering a preset\nplain-text password (checked, by default, against the `LOCKDOWN_PASSWORDS`_\nsetting). To set up more advanced methods of authenticating access to\nlocked-down pages, set ``LOCKDOWN_FORM`` to the Python dotted path to a Django\n``Form`` subclass. This form will be displayed on the lockout page. If the form\nvalidates when submitted, the user will be allowed access to locked pages::\n\n    LOCKDOWN_FORM = 'path.to.my.CustomLockdownForm'\n    \nA form for authenticating against ``django.contrib.auth`` users is provided\nwith django-lockdown (use ``LOCKDOWN_FORM = 'lockdown.forms.AuthForm'``). It\naccepts two keyword arguments (in the ``lockdown`` decorator):\n\n``staff_only``\n  Only allow staff members to preview. Defaults to ``True`` (but the default\n  can be provided as a `LOCKDOWN_AUTHFORM_STAFF_ONLY`_ setting).\n\n``superusers_only``\n  Only allow superusers to preview. Defaults to ``False`` (but the default\n  can be provided as a `LOCKDOWN_AUTHFORM_SUPERUSERS_ONLY`_ setting).\n\nLOCKDOWN_AUTHFORM_STAFF_ONLY\n----------------------------\n\nIf using ``lockdown.forms.AuthForm`` and this setting is ``True``, only staff\nusers will be allowed to preview (True by default).\n\nHas no effect if not using ``lockdown.forms.AuthForm``.\n\nLOCKDOWN_AUTHFORM_SUPERUSERS_ONLY\n---------------------------------\n\nIf using ``lockdown.forms.AuthForm`` and this setting is ``True``, only\nsuperusers will be allowed to preview (False by default). Has no effect if not\nusing ``lockdown.forms.AuthForm``.\n\nLOCKDOWN_SESSION_KEY\n--------------------\n\nOnce a client is authorized for admin preview, they will continue to\nbe authorized for the remainder of their browsing session (using\nDjango's built-in session support). ``LOCKDOWN_SESSION_KEY`` defines\nthe session key used; the default is ``'lockdown-allow'``.\n\n\nTemplates\n=========\n\nDjango-lockdown uses a single template, ``lockdown/form.html``. The\ndefault template displays a simple \"coming soon\" message and the\npreview authorization form.\n\nIf you override this template, the lockdown preview form is available\nin the template context as ``form``.\n\nCHANGES\n=======\n\n1.0 (2013.07.10\n---------------\n\n- BACKWARDS INCOMPATIBLE: Allow multiple passwords (the passwords setting has\n  changed from ``LOCKDOWN_PASSWORD`` to ``LOCKDOWN_PASSWORDS``.\n\n- Decorator changed to a callable decorator (so settings can be overridden for\n  an individual decorator).\n\n- Add ``AuthForm`` which can be used to allow previewing from authenticated\n  users (via ``django.contrib.auth``).\n\n- Allow locking up until or only after certain dates.\n\n0.1.1 (2009.11.24)\n------------------\n\n- Fix setup.py so ``tests`` package is not installed.\n\n0.1 (2009.11.16)\n----------------\n\n- Initial release.\n\nTODO\n====\n\n* Once Django 1.2 ships with signed cookies (hopefully), replace\n  contrib.sessions dependency with a signed cookie.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/carljm/django-lockdown/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-lockdown",
    "package_url": "https://pypi.org/project/django-lockdown/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-lockdown/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://bitbucket.org/carljm/django-lockdown/"
    },
    "release_url": "https://pypi.org/project/django-lockdown/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Site-wide or per-view lockdown with customizable preview authorization",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9412453,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09c80d5955595b7b6d7baab192f8e55b58ca79856fa78504ab7eccf3d6aad426",
        "md5": "d006813e9876a85750a462f6a4ddc2fd",
        "sha256": "6ad56206e114ea089b8a835d0a9241f2b0caae87771a41a86e7bb91b80b8c020"
      },
      "downloads": -1,
      "filename": "django-lockdown-1.0.tar.gz",
      "has_sig": true,
      "md5_digest": "d006813e9876a85750a462f6a4ddc2fd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13189,
      "upload_time": "2013-07-10T16:35:21",
      "upload_time_iso_8601": "2013-07-10T16:35:21.167784Z",
      "url": "https://files.pythonhosted.org/packages/09/c8/0d5955595b7b6d7baab192f8e55b58ca79856fa78504ab7eccf3d6aad426/django-lockdown-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}