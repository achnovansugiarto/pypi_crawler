{
  "info": {
    "author": "Chris Maillefaud",
    "author_email": "chrismaillefaud@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Plugins",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "## Welcome to Django Google SSO\n[![PyPI](https://img.shields.io/pypi/v/django-google-sso)](https://pypi.org/project/django-google-sso/)\n[![Build](https://github.com/chrismaille/django-google-sso/workflows/tests/badge.svg)](https://github.com/chrismaille/django-google-sso/actions)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-google-sso)](https://www.python.org)\n[![PyPI - Django Version](https://img.shields.io/pypi/djversions/django-google-sso)](https://www.djangoproject.com/)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\nThis library aims to simplify the process of authenticating users with Google in Django Admin pages,\ninspired by libraries like [django_microsoft_auth](https://github.com/AngellusMortis/django_microsoft_auth) and [django-admin-sso](https://github.com/matthiask/django-admin-sso/)\n\n### Why another library?\n\n* This library aims for _simplicity_ and ease of use. [django-allauth](https://github.com/pennersr/django-allauth) is _de facto_ solution for Authentication in Django,\nbut add lots of boilerplate, specially the html templates. **Django-Google-SSO** just add the \"Login with Google\" button in the default login page.\n* [django-admin-sso](https://github.com/matthiask/django-admin-sso/) is a good solution, but it uses a deprecated google `auth2client` version.\n\n### Install\n\n```shell\n$ pip install django-google-sso\n```\n\n### Configuration\n\n1. Add the following to your `settings.py` `INSTALLED_APPS`:\n\n```python\nINSTALLED_APPS = [\n    # other django apps\n    \"django.contrib.messages\",  # Need for Auth messages\n    \"django.contrib.sites\",  # Add Sites framework\n    \"django_google_sso\",  # Add django_google_sso\n]\n```\n\n2. In [Google Console](https://console.cloud.google.com/apis/credentials) at _Api -> Credentials_, retrieve your\nProject Credentials and add them in your `settings.py`:\n```python\nGOOGLE_SSO_CLIENT_ID = \"your client id here\"\nGOOGLE_SSO_PROJECT_ID = \"your project id here\"\nGOOGLE_SSO_CLIENT_SECRET = \"your client secret here\"\n```\n\n3. Add the default site and allowed domains to auto-create users:\n```python\nSITE_ID = 1  # Optional, just add if you want to use sites without request.\nGOOGLE_SSO_ALLOWABLE_DOMAINS = [\"example.com\"]\n```\n\n4. In `urls.py` please add the **Django-Google-SSO** views:\n```python\nfrom django.urls import include, path\n\nurlpatterns = [\n    # other urlpatterns...\n    path(\n        \"google_sso/\", include(\"django_google_sso.urls\", namespace=\"django_google_sso\")\n    ),\n]\n```\n5. In [Google Console](https://console.cloud.google.com/apis/credentials) at _Api -> Credentials -> Oauth2 Client_,\nplease add **Django-Google-SSO** callback url, using this format: `https://your-domain.com/google_sso/callback/`,\nwhere `your-domain.com` is the domain you defined in Django Sites Framework. For example, if you change your\nSite object domain to `localhost:8000`, then your callback must be `http://localhost:8000/google_sso/callback/`.\n\n6. Run migrations:\n```shell\n$ python manage.py migrate\n```\n\n### How Django-Google-SSO works\n\nFirst, the user is redirected to the Django login page. If settings `GOOGLE_SSO_ENABLED` is True, the\n\"Login with Google\" button will be added to default form.\n\nOn click, **Django-Google-SSO** will add, in current session, the `next_path` and Google Flow `state`.\nThis session will expire in 10 minutes. Then user will be redirected to Google login page.\n\nOn callback, **Django-Google-SSO** will check `code` and `state` received. If they are valid,\nGoogle's UserInfo will be retrieved. If the user is already registered in Django, the user\nwill be logged in.\n\nOtherwise, the user will be created and logged in, if his email domain,\nmatches one of the `GOOGLE_SSO_ALLOWABLE_DOMAINS`. On creation only, this user can be set the\n`staff` or `superuser` status, if his email are in `GOGGLE_SSO_STAFF_LIST` or\n`GOGGLE_SSO_SUPERUSER_LIST` respectively.\n\nPlease note if you add an email to one of these lists, the email domain must be added to `GOOGLE_SSO_ALLOWABLE_DOMAINS` too.\n\nThis session will expire in 1 hour, or the time defined, in seconds, in `GOOGLE_SSO_SESSION_COOKIE_AGE`.\n\nBrowser will be redirected to `next_path` if operation succeeds, or the `login` page, if operation fails.\n\n### Further customization\n\nPlease add the following variables to your `settings.py`:\n\n```python\nGOOGLE_SSO_ENABLED = True  # default value\nGOOGLE_SSO_SESSION_COOKIE_AGE = 3600  # default value\n\n# Mark as True, to add superuser status to first user\n# created with email domain in `GOOGLE_SSO_ALLOWABLE_DOMAINS`\nGOGGLE_SSO_AUTO_CREATE_FIRST_SUPERUSER = True\n\nGOGGLE_SSO_STAFF_LIST = [\"email@example.com\"]\nGOGGLE_SSO_SUPERUSER_LIST = [\"another-email@example.com\"]\nGOOGLE_SSO_TIMEOUT = 10  # Time before timeout Google requests. Default value: 10 seconds\nGOOGLE_SSO_SCOPES = [  # Google default scope\n    \"openid\",\n    \"https://www.googleapis.com/auth/userinfo.email\",\n    \"https://www.googleapis.com/auth/userinfo.profile\",\n]\n```\n\n### Running behind a Reverse Proxy\nPlease make sure you're passing the correct `X-Forwarded-Proto` header.\n\n### Using the `login_required` decorator\nTo use the `login_required` decorator, or his Class Based View equivalent, you can redirect the `accounts/login` route\nto the modified login form page, adding this to your `urls.py`:\n\n````python\nfrom django.conf.urls import url\nfrom django.contrib.auth.views import LoginView\n\nurlpatterns = [\n    url(\n        r\"^accounts/login/$\",\n        LoginView.as_view(\n            template_name=\"admin_sso/login.html\"  # The modified form with google button\n        ),\n    ),\n]\n````\n\n### Example App\nTo test this library please check the `Example App` provided [here](/example_app).\n\n### Not working?\nDon't panic. Get a towel and, please, open an [issue](https://github.com/chrismaille/django-google-sso/issues).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chrismaille/django-google-sso",
    "keywords": "google,django,sso",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-google-sso",
    "package_url": "https://pypi.org/project/django-google-sso/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-google-sso/",
    "project_urls": {
      "Homepage": "https://github.com/chrismaille/django-google-sso",
      "Repository": "https://github.com/chrismaille/django-google-sso"
    },
    "release_url": "https://pypi.org/project/django-google-sso/1.0.1/",
    "requires_dist": [
      "django (>=3.2)",
      "google-auth",
      "google-auth-httplib2",
      "google-auth-oauthlib",
      "loguru"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Easily add Google SSO login to Django Admin",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17030718,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7891897b66b3abcfc438a40bfbf02abcabecbb5c25744784881e5999aa0b6e81",
        "md5": "57a53de8ca075fbbafe5f6688255ab72",
        "sha256": "2862a23b43cfa9f08aba3fbaec035160412bbc98419951ae45b3a2182311f70f"
      },
      "downloads": -1,
      "filename": "django_google_sso-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "57a53de8ca075fbbafe5f6688255ab72",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 27537,
      "upload_time": "2021-11-23T16:38:54",
      "upload_time_iso_8601": "2021-11-23T16:38:54.458353Z",
      "url": "https://files.pythonhosted.org/packages/78/91/897b66b3abcfc438a40bfbf02abcabecbb5c25744784881e5999aa0b6e81/django_google_sso-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1fc16e562b4abbb64e8356cd71585199d8595dd9b8a657afbc744b03e0d09db7",
        "md5": "c24fe062340d0e378e152b9301ca74d9",
        "sha256": "2769d561c245f4d71b7a9f64efb293d0fe0d3a71c7ade16917cbc796de79db39"
      },
      "downloads": -1,
      "filename": "django-google-sso-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c24fe062340d0e378e152b9301ca74d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 25366,
      "upload_time": "2021-11-23T16:38:56",
      "upload_time_iso_8601": "2021-11-23T16:38:56.025032Z",
      "url": "https://files.pythonhosted.org/packages/1f/c1/6e562b4abbb64e8356cd71585199d8595dd9b8a657afbc744b03e0d09db7/django-google-sso-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}