{
  "info": {
    "author": "Giuseppe De Marco",
    "author_email": "demarcog83@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "SPID/CIE Django\n-----------\n\n![CI build](https://github.com/italia/spid-django/workflows/spid-django/badge.svg)\n![Python version](https://img.shields.io/badge/license-Apache%202-blue.svg)\n![License](https://img.shields.io/badge/python-3.7%20%7C%203.8%20%7C%203.9-blue.svg)\n\n\nA SPID/CIE Service Provider based on [pysaml2](https://github.com/identitypython/pysaml2).\n\n\nIntroduction\n------------\n\nThis is a Django application that provides a SAML2 Service Provider\nfor a Single Sign On with SPID and CIE, the Italian Digital Identity System.\n\nThis project comes with a demo on a Spid button template with *spid-saml-check* IDP preconfigured.\nSee running the Demo project paragaph for details.\n\nFurthermore, this application integrates the checks of\n[Spid QA](https://www.spid.gov.it/assets/download/SPID_QAD.pdf)\nwithin its CI pipeline, through [spid-sp-test](https://github.com/peppelinux/spid-sp-test).\nSee github actions log for details.\n\nThe technical documentation on SPID and SAML is available at [Docs Italia](https://docs.italia.it/italia/spid/spid-regole-tecniche)\nThe technical documentation on CIE and SAML is available at [Docs Italia](https://docs.italia.it/italia/cie/cie-manuale-tecnico-docs)\n\n\n![big picture](gallery/animated.gif)\n\n\nDependencies\n------------\n\nThese libraries are required on your operating system environment\nin order to compile external modules of some dependencies:\n\n- xmlsec\n- python3-dev\n- python3-pip\n- libssl-dev\n- libsasl2-dev\n\n\nRunning the Demo project\n------------------------\n\nThe demo project is configured within `example/` subdirectory.\nThis project uses **spid-saml-check** as demo IDP.\n\nPrepare environment:\n````\ncd example/\nvirtualenv -ppython3 env\nsource env/bin/activate\n\npip install djangosaml2-spid\n````\n\n⚠️ djangosaml2-spid uses a *monkey-patch* version of the pysaml2 library that fixes \nsome limitations or small bugs that can affect SPID data. Patches are applied only \nonce after the app is ready to run. Take a look at module `djangosaml2_spid._saml2` \nfor patches code and references.\n\n\nYour example saml2 configuration is in `spid_config/spid_settings.py`.\nSee djangosaml2 and pysaml2 official docs for clarifications.\n\nTo run the demo project:\n - python -B ./manage.py migrate\n - python -B ./manage.py collectstatic --noinput\n - uwsgi --https 0.0.0.0:8000,./certificates/public.cert,./certificates/private.key --module example.wsgi:application --env example.settings --chdir .\n\nor execute the run.sh script with these environment settings to enable tests IdPs:\n\n````\nSPID_SAML_CHECK_IDP_ACTIVE=True SPID_DEMO_IDP_ACTIVE=True bash run.sh\n````\n\nIf you chose to use your own demo IdP you just have to save the\ncurrent demo metadata in the demo IdP configuration, this way:\n\n````\n# cd into demo IdP metadata folder ...\nwget https://localhost:8000/spid/metadata -O conf/sp_metadata.xml\n````\n\nFinally, start pid-saml-check (docker is suggested) and open 'https://localhost:8000' in your browser.\n\n\nDemo project with Docker\n------------------------\n\nTo use Docker compose environment, add to /etc/hosts this line:\n````\n127.0.0.1   hostnet\n````\n\nthen use `docker-compose --env-file docker-compose.env up` (the process takes some time) and when the services are up go to http://hostnet:8000/spid/login\n\n**warning**: if you want to change ports of any of the docker-compose services (as, spid-saml-check) and/or the FQDN of the docker-compose default network gateway (defaults to `hostnet`) you need to change all the files\nunder `./example/configs/` to match the new configurations, changing only `./docker-compose.env` will not suffice.\n\n\nSetup for an existing project\n-----------------------------\n\ndjangosaml2_spid uses a pySAML2 fork.\n\n* `pip install git+https://github.com/italia/spid-django`\n* Copy the `example/spid_config/` to your project base dir and remember to edit with your custom paramenters\n* Import SAML2 entity configuration in your project settings file: `from spid_config.spid_settings import *`\n* Add in `settings.INSTALLED_APPS` the following\n  ```\n    'djangosaml2',\n    'djangosaml2_spid',\n    'spid_config'\n  ```\n  _spid_config_ is your configuration, with statics and templates. See `example` project.\n* Add you custom User model, see example project: `AUTH_USER_MODEL = 'custom_accounts.User'`\n* Add in `settings.MIDDLEWARE`: `'djangosaml2.middleware.SamlSessionMiddleware'` for [SameSite Cookie](https://github.com/knaperek/djangosaml2#samesite-cookie)\n* Add in `settings.AUTHENTICATION_BACKENDS`:\n  ```\n    'django.contrib.auth.backends.ModelBackend',\n    'djangosaml2.backends.Saml2Backend',\n  ```\n* Generate X.509 certificates and store them to a path, generally in `./certificates`, using [spid-compliant-certificates](https://github.com/italia/spid-compliant-certificates)\n* Register the SP metadata to your test Spid IDPs\n* Start the django server for tests `./manage.py runserver 0.0.0.0:8000`\n\nSAML2 SPID compliant certificates\n---------------------------------\n\nHere an example about how to do that.\n\n````\nmkdir certificates && cd \"$_\"\n\nspid-compliant-certificates generator \\\n    --key-size 3072 \\\n    --common-name \"A.C.M.E\" \\\n    --days 365 \\\n    --entity-id https://spid.acme.it \\\n    --locality-name Roma \\\n    --org-id \"PA:IT-c_h501\" \\\n    --org-name \"A Company Making Everything\" \\\n    --sector public \\\n    --key-out private.key \\\n    --crt-out public.cert\n\ncd ../\n````\n\nMinimal SPID settings\n---------------------\n\nInstead of copy the whole demo project configuration you can add only the\nnecessary configuration entries (eg. SAML_CONFIG with 'organization' info,\nand SPID_CONTACTS, other configurations that you want to be different from\ndefaults) directly to your project settings file. In this case don't\nadd `'spid_config'` to `settings.INSTALLED_APPS`.\n\nAn example of a minimal configuration for SPID is the following:\n\n```python\nSAML_CONFIG = {\n    'entityid': 'https://your.spid.url/metadata',\n    'organization': {\n        'name': [('Example', 'it'), ('Example', 'en')],\n        'display_name': [('Example', 'it'), ('Example', 'en')],\n        'url': [('http://www.example.it', 'it'), ('http://www.example.it', 'en')],\n    },\n}\n\nSAML_USE_NAME_ID_AS_USERNAME = False\nSAML_DJANGO_USER_MAIN_ATTRIBUTE = 'username'\nSAML_CREATE_UNKNOWN_USER = True\nSAML_DJANGO_USER_MAIN_ATTRIBUTE_LOOKUP = '__iexact'\nSAML_ATTRIBUTE_MAPPING = {\n    'spidCode': ('username', ),\n    'email': ('email', ),\n    'name': ('first_name', ),\n    'familyName': ('last_name', ),\n}\n\nSPID_CONTACTS = [\n    {\n        'contact_type': 'other',\n        'telephone_number': '+39 8475634785',\n        'email_address': 'tech-info@example.org',\n        'VATNumber': 'IT12345678901',\n        'FiscalCode': 'XYZABCAAMGGJ000W',\n        'Private': '',\n    },\n]\n```\n\n⚠️ In the example project, in `spid_settings.py` we found `disable_ssl_certificate_validation` set to True. This is only for test/development purpose and its usage means that the \"remote metadata\" won't validate the https certificates. That's something not intended for production environment, remote metadata must be avoided and the tls validation must be adopted.\n\n\nAttribute Mapping\n-----------------\nIs necessary to maps SPID attributes to Django ones.\nAn example that links fiscalNumber wiht username have been configured in the example project.\nThis is another example that achieve the same behaviour without changing the default User model.\n\n````\nSAML_USE_NAME_ID_AS_USERNAME = False\nSAML_DJANGO_USER_MAIN_ATTRIBUTE = 'username'\nSAML_CREATE_UNKNOWN_USER = True\nSAML_DJANGO_USER_MAIN_ATTRIBUTE_LOOKUP = '__iexact'\n\nSAML_ATTRIBUTE_MAPPING = {\n'fiscalNumber': ('username', ),\n}\n````\n\nDownload identity providers metadata\n-----------------------------------\n\nTo update the list of entity providers use the custom django command `update_idps`.\nIn the example project you can do it as follows:\n\n````\ncd example/\npython ./manage.py update_idps\n````\n\nRunning tests (only for developers)\n-----------------------------------\n\nTests are integrated into the demo project and are intended for use\nonly by developers.\n\nTo test the application:\n````\npip install -r requirements-dev.txt\npip install -e .\npython runtests.py\n````\n\nFor running tests using the settings of the Demo project:\n````\npip install -r requirements-dev.txt\ncd example/\ncoverage erase\ncoverage run ./manage.py test djangosaml2_spid.tests\ncoverage report -m\n````\n\nWarnings\n--------\n\n- debug server uses the same SAML2 certificates, please create your SAML2 certificates for production and also a real TLS one for httpd!\n- Read djangosaml2 documentation, remember to set SESSION_COOKIE_SECURE in your project settings.py\n- The SPID Button template is only for test purpose, please don't use it in production, do your customizations instead!\n- In a production environment please don't use \"remote\" as metadata storage, use \"local\" or \"mdq\" instead!\n- When using spid-saml-check via docker image, mind that the metadata download url would match to `https://172.17.0.1:8000/spid/metadata` and not to localhost!\n\nAuthors\n------------\n\n- Giuseppe De Marco\n- Davide Brunato",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/italia/djangosaml2_spid",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangosaml2-spid",
    "package_url": "https://pypi.org/project/djangosaml2-spid/",
    "platform": "",
    "project_url": "https://pypi.org/project/djangosaml2-spid/",
    "project_urls": {
      "Homepage": "https://github.com/italia/djangosaml2_spid"
    },
    "release_url": "https://pypi.org/project/djangosaml2-spid/1.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Djangosaml2 SPID Service Provider",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11395313,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0e96757fde91a04ebf9e31106494a9725fb26248060aa5d2a1e2bfffcb568f9",
        "md5": "305d7308a2eccecf89e3f9ebfc20980f",
        "sha256": "fdacdaff5ed1165bfc9b7891aa02fed87b24132c9582dd2c7d5d211a150b2042"
      },
      "downloads": -1,
      "filename": "djangosaml2-spid-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "305d7308a2eccecf89e3f9ebfc20980f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1944292,
      "upload_time": "2021-09-08T11:51:06",
      "upload_time_iso_8601": "2021-09-08T11:51:06.475537Z",
      "url": "https://files.pythonhosted.org/packages/e0/e9/6757fde91a04ebf9e31106494a9725fb26248060aa5d2a1e2bfffcb568f9/djangosaml2-spid-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}