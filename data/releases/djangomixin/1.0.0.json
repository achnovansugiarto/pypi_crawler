{
  "info": {
    "author": "Nj Nafir",
    "author_email": "njnafir@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# djangomixin\n\nIs a set of utilities to give you advantage on your django development.\nThis utilities can help you to manage and upgrade django application.\n\nIs a open source package that works on top django mainly.\nSeveral mixins and snippets is to make django more handy in case of development.\nHave class based view snippet, date snippet, mail sending snippet, permission snippet and so on.\n\n\n# Installation\nThe latest version of djangomixin can be installed from PyPI:\n\n    pip install djangomixin\n\n\n# Quick use\nAfter install djangomixin you can test some awesome snippet, best example:\n\n\n## filename\n    from djangomixin import filename\n\n    # filename is a simple function to give you actual filename of a source file\n    my_file_name = filename(\"C://path/this is file.jpg\")\n\n\n## random_string\nrandom_string is a function to give you a lengthy random_string, such as\nwhen we need to generate a slug filed over a model we can simply use\nrandom_string to generate lengthy random_string\n\n    from djangomixin import random_string\n\n    slug = models.CharField(max_length=20, default=random_string)\n\n    # string length is by default 10, but we can change the length by passing a value in it\n    slug = models.CharField(max_length=20, default=lambda: random_string(20))\n\n\n## bootstrap_visible_fields\nbootstrap_visible_fields is for generating bootstrap field for your form and model form\nall you need to do just go to your form class then call this function and pass the specific object to it\n\n    from django import forms\n    from djangomixin import bootstrap_visible_fields\n\n\n    class MyModelForm(forms.ModelForm):\n      def __init__(self, *args, **kwargs):\n          super(MyModelForm, self).__init__(*args, **kwargs)\n          bootstrap_visible_fields(self.visible_fields)\n\n\n## RequestAttachMixin\nRequestAttachMixin is a class snippet which can be inherit by any class based view.\nBy default class based view have not request object in it.\nSo, when we need to get or verify request we have some problem in the class based view\nThis snippet will attach request object in that class object\nYou can get this request from any of method, we are using get_context_data for example\n\n    from djangomixin.class_mixin import RequestAttachMixin\n\n\n    class TestView(RequestAttachMixin):\n      template_name = 'home.html'\n\n      def get_context_data(self, *args, **kwargs):\n        data = dict(self.request.GET)\n        print(data)\n        return super(TestView, self).get_context_data(*args, **kwargs)\n\n\n## NextUrlMixin\nNextUrlMixin is a class snippet which can be inherit by any class based view.\nBy default class based view have not support next url which declined in the browser path like /?next=/admin/\nThis snippet will attach get_next_url method to your class object\ndjangomixin will verify the validity of next url, if it secure then it will give you next url path\n\n    from djangomixin.class_mixin import NextUrlMixin\n\n\n    class TestView(NextUrlMixin):\n      template_name = 'home.html'\n\n      def get_context_data(self, *args, **kwargs):\n        next_url = self.get_next_url()\n        print(next_url)\n        return super(TestView, self).get_context_data(*args, **kwargs)\n\n\n## send_mail\nsend_mail snippet is to give you nice and pretty good solution for sending mail.\nYou can verify the mail sending for any server including s3 preferable.\nTo send mail we must set some flag to our settings file and call this function with appropriate values\n\n    # In your settings, let's add this lines for server configuration\n\n    DEFAULT_FROM_EMAIL = \"Your default email who will be the sender\"\n    DEFAULT_FROM_SENDER = \"Your default name who will be the sender\"\n    USERNAME_SMTP = \"Mail server user name\"\n    PASSWORD_SMTP = \"Mail server password\"\n    HOST_SMTP = \"Mail server host address\"\n    PORT_SMTP = \"Mail server host port\"\n\n    # After adding this lines to your settings, now you can send email\n\n    from djangomixin.mail_mixin import send_mail\n\n    # send_mail accept at most six parameter, which is your info and body of mailing\n\n    send_mail(\n      sender=\"email@example.com\",\n      sender_name=\"Test User\",\n      recipient=None,\n      subject='Message From Django Server',\n      body_tex='',\n      body_html=''\n    )\n\n\n## last_month_start_end\nlast_month_start_end is to provide last month start and end day before today\nTo check this snippet work you can just pass datetime for today into it\n\n    form djangomixin.date_mixin import last_month_start_end\n    import datetime\n\n    start_end = last_month_start_end(datetime.datetime.now())\n    print(start_end)\n\n\n## month_data_range\nmonth_data_range is to provide comprehensive month data with all of info\nCheck the output of month_data_range to get and check how this value can help you rustically\n\n    from djangomixin.date_mixin import month_data_range\n\n    json_data = month_data_range()\n\n    # month_data_range have two exceptional parameter which can be more handy for you\n\n    # months_ago is by default 4\n    # include_this_month is by default False\n\n    json_data = month_data_range(months_ago=4, include_this_month=True)\n\n\n\n## allowed_roles\nallowed_roles is a fancy function to verify and block access to a view function.\nWorks as decorator in a view function as like other decorator.\nIt usage django permission management for this work.\nyou can pass allowed permission for a user as defined in django documentation for permission verification.\n\n    from djangomixin.permission_mixin import allowed_roles\n\n    # django permission verification 'module.model_action'\n    # here action can be view, change, add, delete\n\n    @allowed_roles(['store.book_view'])\n    def book_view(request):\n      ....\n\n\n# Author\ndjangomixin is a open source libraries for Python, Initially developed by Nj Nafir.\n\n\n# Contribute\n- Issue Tracker: [djangomixin issues](https://github.com/njNafir/djangomixin/issues)\n- Source Code: [djangomixin sources](https://github.com/njNafir/djangomixin)\n\n\n# Support\n\nIf you are having issues, please let us know.\nWe have a mailing list located at: njnafir@gmail.com\n\n\n# License\nThe project is licensed under the MIT license.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/njnafir/djangomixin",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangomixin",
    "package_url": "https://pypi.org/project/djangomixin/",
    "platform": "",
    "project_url": "https://pypi.org/project/djangomixin/",
    "project_urls": {
      "Homepage": "https://github.com/njnafir/djangomixin"
    },
    "release_url": "https://pypi.org/project/djangomixin/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "djangomixin is set of mixins and snippets that can help you to utilize your django functionality.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10863637,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bb40db276710f24f36e88c3e55ee195073896a647fc21f77a45e5de905e9698",
        "md5": "b674ef7e6d172cf9079223991943a0fe",
        "sha256": "7c9aa7c14fbf7e50ddfed96537eec35da2c73c6e2d28a572de9a5a3edf48cd4d"
      },
      "downloads": -1,
      "filename": "djangomixin-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b674ef7e6d172cf9079223991943a0fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7366,
      "upload_time": "2021-07-09T09:46:26",
      "upload_time_iso_8601": "2021-07-09T09:46:26.087610Z",
      "url": "https://files.pythonhosted.org/packages/4b/b4/0db276710f24f36e88c3e55ee195073896a647fc21f77a45e5de905e9698/djangomixin-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1713370edf07b0bda7789c62d35ebe571a75398fa34365fab2d5aee23c22a85e",
        "md5": "1820aef19a31dad656d1f9a4f297d1e9",
        "sha256": "8fc5389dfe5f52e70373d21a5215223877c8f728337d87c8f2cddc9a091d9a44"
      },
      "downloads": -1,
      "filename": "djangomixin-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1820aef19a31dad656d1f9a4f297d1e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6604,
      "upload_time": "2021-07-09T09:46:27",
      "upload_time_iso_8601": "2021-07-09T09:46:27.463334Z",
      "url": "https://files.pythonhosted.org/packages/17/13/370edf07b0bda7789c62d35ebe571a75398fa34365fab2d5aee23c22a85e/djangomixin-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}