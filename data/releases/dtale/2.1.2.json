{
  "info": {
    "author": "MAN Alpha Technology",
    "author_email": "ManAlphaTech@man.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "|image0|\n\n-  `Live Demo <http://alphatechadmin.pythonanywhere.com>`__\n-  `Animated US COVID-19 Deaths By\n   State <http://alphatechadmin.pythonanywhere.com/dtale/charts/3?chart_type=maps&query=date+%3E+%2720200301%27&agg=raw&map_type=choropleth&loc_mode=USA-states&loc=state_code&map_val=deaths&colorscale=Reds&cpg=false&animate_by=date>`__\n-  `3D Scatter\n   Chart <http://alphatechadmin.pythonanywhere.com/dtale/charts/4?chart_type=3d_scatter&query=&x=date&z=Col0&agg=raw&cpg=false&y=%5B%22security_id%22%5D>`__\n-  `Surface\n   Chart <http://alphatechadmin.pythonanywhere.com/dtale/charts/4?chart_type=surface&query=&x=date&z=Col0&agg=raw&cpg=false&y=%5B%22security_id%22%5D>`__\n-  `Network\n   Analysis <http://alphatechadmin.pythonanywhere.com/dtale/network/5?to=to&from=from&group=route_id&weight=>`__\n\n--------------\n\n|CircleCI| |PyPI Python Versions| |PyPI| |Conda| |ReadTheDocs| |codecov|\n|Downloads| |Open in VS Code|\n\nWhat is it?\n-----------\n\nD-Tale is the combination of a Flask back-end and a React front-end to\nbring you an easy way to view & analyze Pandas data structures. It\nintegrates seamlessly with ipython notebooks & python/ipython terminals.\nCurrently this tool supports such Pandas objects as DataFrame, Series,\nMultiIndex, DatetimeIndex & RangeIndex.\n\nOrigins\n-------\n\nD-Tale was the product of a SAS to Python conversion. What was\noriginally a perl script wrapper on top of SAS’s ``insight`` function is\nnow a lightweight web client on top of Pandas data structures.\n\nIn The News\n-----------\n\n-  `4 Libraries that can perform EDA in one line of python\n   code <https://towardsdatascience.com/4-libraries-that-can-perform-eda-in-one-line-of-python-code-b13938a06ae>`__\n-  `React Status <https://react.statuscode.com/issues/204>`__\n-  `KDNuggets <https://www.kdnuggets.com/2020/08/bring-pandas-dataframes-life-d-tale.html>`__\n-  `Man Institute <https://www.man.com/maninstitute/d-tale>`__ (warning:\n   contains deprecated functionality)\n-  `Python\n   Bytes <https://pythonbytes.fm/episodes/show/169/jupyter-notebooks-natively-on-your-ipad>`__\n-  `FlaskCon 2020 <https://www.youtube.com/watch?v=BNgolmUWBp4&t=33s>`__\n-  `San Diego\n   Python <https://www.youtube.com/watch?v=fLsGur5YqeE&t=29s>`__\n-  `Medium: towards data\n   science <https://towardsdatascience.com/introduction-to-d-tale-5eddd81abe3f>`__\n-  `Medium: Exploratory Data Analysis – Using\n   D-Tale <https://medium.com/da-tum/exploratory-data-analysis-1-4-using-d-tale-99a2c267db79>`__\n-  `EOD Notes: Using python and dtale to analyze\n   correlations <https://www.google.com/amp/s/eod-notes.com/2020/05/07/using-python-and-dtale-to-analyze-correlations/amp/>`__\n-  `Data Exploration is Now Super Easy w/\n   D-Tale <https://dibyendudeb.com/d-tale-data-exploration-tool/>`__\n-  `Practical Business\n   Python <https://pbpython.com/dataframe-gui-overview.html>`__\n\nTutorials\n---------\n\n-  `Pip Install Python YouTube\n   Channel <https://m.youtube.com/watch?v=0RihZNdQc7k&feature=youtu.be>`__\n-  `machine_learning_2019 <https://www.youtube.com/watch?v=-egtEUVBy9c>`__\n-  `D-Tale The Best Library To Perform Exploratory Data Analysis Using\n   Single Line Of\n   Code🔥🔥🔥🔥 <https://www.youtube.com/watch?v=xSXGcuiEzUc>`__\n-  `Explore and Analyze Pandas Data Structures w/\n   D-Tale <https://m.youtube.com/watch?v=JUu5IYVGqCg>`__\n-  `Data Preprocessing simplest method\n   🔥 <https://www.youtube.com/watch?v=Q2kMNPKgN4g>`__\n\n## Related Resources\n\n-  `Adventures In Flask While Developing\n   D-Tale <https://github.com/man-group/dtale/blob/master/docs/FlaskCon/FlaskAdventures.md>`__\n-  `Adding Range Selection to\n   react-virtualized <https://github.com/man-group/dtale/blob/master/docs/RANGE_SELECTION.md>`__\n-  `Building Draggable/Resizable\n   Modals <https://github.com/man-group/dtale/blob/master/docs/DRAGGABLE_RESIZABLE_MODALS.md>`__\n-  `Embedding Flask Apps within\n   Streamlit <https://github.com/man-group/dtale/blob/master/docs/EMBEDDED_STREAMLIT.md>`__\n\nContents\n--------\n\n-  `Where To Get It <#where-to-get-it>`__\n-  `Getting Started <#getting-started>`__\n\n   -  `Python Terminal <#python-terminal>`__\n   -  `As A Script <#as-a-script>`__\n   -  `Jupyter Notebook <#jupyter-notebook>`__\n   -  `Jupyterhub w/ Jupyter Server\n      Proxy <#jupyterhub-w-jupyter-server-proxy>`__\n   -  `Jupyterhub w/\n      Kubernetes <https://github.com/man-group/dtale/blob/master/docs/JUPYTERHUB_KUBERNETES.md>`__\n   -  `Docker Container <#docker-container>`__\n   -  `Google Colab <#google-colab>`__\n   -  `Kaggle <#kaggle>`__\n   -  `Binder <#binder>`__\n   -  `R with Reticulate <#r-with-reticulate>`__\n   -  `Startup with No Data <#startup-with-no-data>`__\n   -  `Command-line <#command-line>`__\n   -  `Custom Command-line Loaders <#custom-command-line-loaders>`__\n   -  `Embedding Within Your Own Flask\n      App <https://github.com/man-group/dtale/blob/master/docs/EMBEDDED_FLASK.md>`__\n   -  `Embedding Within Your Own Django\n      App <https://github.com/man-group/dtale/blob/master/docs/EMBEDDED_DJANGO.md>`__\n   -  `Embedding Within\n      Streamlit <https://github.com/man-group/dtale/blob/master/docs/EMBEDDED_DTALE_STREAMLIT.md>`__\n   -  `Running D-Tale On Gunicorn w/\n      Redis <https://github.com/man-group/dtale/blob/master/docs/GUNICORN_REDIS.md>`__\n   -  `Configuration <https://github.com/man-group/dtale/blob/master/docs/CONFIGURATION.md>`__\n   -  `Authentication <#authentication>`__\n   -  `Predefined Filters <#predefined-filters>`__\n   -  `Using Swifter <#using-swifter>`__\n\n-  `UI <#ui>`__\n\n   -  `Dimensions/Ribbon Menu/Main\n      Menu <#dimensionsribbon-menumain-menu>`__\n   -  `Header <#header>`__\n   -  `Resize Columns <#resize-columns>`__\n   -  `Editing Cells <#editing-cells>`__\n   -  `Copy Cells Into Clipboard <#copy-cells-into-clipboard>`__\n   -  `Main Menu Functions <#main-menu-functions>`__\n\n      -  `XArray Operations <#xarray-operations>`__,\n         `Describe <#describe>`__, `Outlier\n         Detection <#outlier-detection>`__, `Custom\n         Filter <#custom-filter>`__, `Dataframe\n         Functions <#dataframe-functions>`__, `Merge &\n         Stack <#merge-&-stack>`__, `Summarize\n         Data <#summarize-data>`__, `Duplicates <#duplicates>`__,\n         `Missing Analysis <#missing-analysis>`__,\n         `Correlations <#correlations>`__, `Predictive Power\n         Score <#predictive-power-score>`__, `Heat Map <#heat-map>`__,\n         `Highlight Dtypes <#highlight-dtypes>`__, `Highlight\n         Missing <#highlight-missing>`__, `Highlight\n         Outliers <#highlight-outliers>`__, `Highlight\n         Range <#highlight-range>`__, `Low Variance\n         Flag <#low-variance-flag>`__, `Instances <#instances>`__, `Code\n         Exports <#code-exports>`__, `Export CSV <#export-csv>`__, `Load\n         Data & Sample Datasets <#load-data-&-sample-datasets>`__,\n         `Refresh Widths <#refresh-widths>`__, `About <#about>`__,\n         `Theme <#theme>`__, `Reload Data <#reload-data>`__, `Unpin/Pin\n         Menu <#unpinpin-menu>`__, `Language <#language>`__,\n         `Shutdown <#shutdown>`__\n\n   -  `Column Menu Functions <#column-menu-functions>`__\n\n      -  `Filtering <#filtering>`__, `Moving\n         Columns <#moving-columns>`__, `Hiding\n         Columns <#hiding-columns>`__, `Delete <#delete>`__,\n         `Rename <#rename>`__, `Replacements <#replacements>`__,\n         `Lock <#lock>`__, `Unlock <#unlock>`__, `Sorting <#sorting>`__,\n         `Formats <#formats>`__, `Describe (Column\n         Analysis) <#describe-column-analysis>`__\n\n   -  `Charts <#charts>`__\n   -  `Network Viewer <#network-viewer>`__\n   -  `Hotkeys <#hotkeys>`__\n   -  `Menu Functions Depending on Browser\n      Dimensions <#menu-functions-depending-on-browser-dimensions>`__\n\n-  `For Developers <#for-developers>`__\n\n   -  `Cloning <#cloning>`__\n   -  `Running Tests <#running-tests>`__\n   -  `Linting <#linting>`__\n   -  `Formatting JS <#formatting-js>`__\n   -  `Docker Development <#docker-development>`__\n   -  `Adding Language Support <#adding-language-support>`__\n\n-  `Global State/Data\n   Storage <https://github.com/man-group/dtale/blob/master/docs/GLOBAL_STATE.md>`__\n-  `Startup Behavior <#startup-behavior>`__\n-  `Documentation <#documentation>`__\n-  `Dependencies <#dependencies>`__\n-  `Acknowledgements <#acknowledgements>`__\n-  `License <#license>`__\n\nWhere To get It\n---------------\n\nThe source code is currently hosted on GitHub at:\nhttps://github.com/man-group/dtale\n\nBinary installers for the latest released version are available at the\n`Python package index <https://pypi.org/project/dtale>`__ and on conda\nusing `conda-forge <https://github.com/conda-forge/dtale-feedstock>`__.\n\n.. code:: sh\n\n   # conda\n   conda install dtale -c conda-forge\n   # if you want to also use \"Export to PNG\" for charts\n   conda install -c plotly python-kaleido\n\n.. code:: sh\n\n   # or PyPI\n   pip install dtale\n\nGetting Started\n---------------\n\n======== =========\nPyCharm  jupyter\n======== =========\n|image9| |image10|\n======== =========\n\nPython Terminal\n~~~~~~~~~~~~~~~\n\nThis comes courtesy of PyCharm |image11| Feel free to invoke ``python``\nor ``ipython`` directly and use the commands in the screenshot above and\nit should work\n\nIssues With Windows Firewall\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you run into issues with viewing D-Tale in your browser on Windows\nplease try making Python public under “Allowed Apps” in your Firewall\nconfiguration. Here is a nice article: `How to Allow Apps to Communicate\nThrough the Windows\nFirewall <https://www.howtogeek.com/howto/uncategorized/how-to-create-exceptions-in-windows-vista-firewall/>`__\n\nAdditional functions available programmatically\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   import dtale\n   import pandas as pd\n\n   df = pd.DataFrame([dict(a=1,b=2,c=3)])\n\n   # Assigning a reference to a running D-Tale process\n   d = dtale.show(df)\n\n   # Accessing data associated with D-Tale process\n   tmp = d.data.copy()\n   tmp['d'] = 4\n\n   # Altering data associated with D-Tale process\n   # FYI: this will clear any front-end settings you have at the time for this process (filter, sorts, formatting)\n   d.data = tmp\n\n   # Shutting down D-Tale process\n   d.kill()\n\n   # using Python's `webbrowser` package it will try and open your server's default browser to this process\n   d.open_browser()\n\n   # There is also some helpful metadata about the process\n   d._data_id  # the process's data identifier\n   d._url  # the url to access the process\n\n   d2 = dtale.get_instance(d._data_id)  # returns a new reference to the instance running at that data_id\n\n   dtale.instances()  # prints a list of all ids & urls of running D-Tale sessions\n\nDuplicate data check\n^^^^^^^^^^^^^^^^^^^^\n\nTo help guard against users loading the same data to D-Tale multiple\ntimes and thus eating up precious memory, we have a loose check for\nduplicate input data. The check runs the following: \\* Are row & column\ncount the same as a previously loaded piece of data? \\* Are the names\nand order of columns the same as a previously loaded piece of data?\n\nIf both these conditions are true then you will be presented with an\nerror and a link to the previously loaded data. Here is an example of\nhow the interaction looks: |image12|\n\nAs A Script\n~~~~~~~~~~~\n\nD-Tale can be run as script by adding ``subprocess=False`` to your\n``dtale.show`` command. Here is an example script:\n\n.. code:: python\n\n   import dtale\n   import pandas as pd\n\n   if __name__ == '__main__':\n         dtale.show(pd.DataFrame([1,2,3,4,5]), subprocess=False)\n\nJupyter Notebook\n~~~~~~~~~~~~~~~~\n\nWithin any jupyter (ipython) notebook executing a cell like this will\ndisplay a small instance of D-Tale in the output cell. Here are some\nexamples:\n\n============== ========== =========\n``dtale.show`` assignment instance\n============== ========== =========\n|image13|      |image14|  |image15|\n============== ========== =========\n\nIf you are running ipython<=5.0 then you also have the ability to adjust\nthe size of your output cell for the most recent instance displayed:\n\n|image16|\n\nOne thing of note is that a lot of the modal popups you see in the\nstandard browser version will now open separate browser windows for\nspacial convienence:\n\n============ ============ ========= =============== =========\nColumn Menus Correlations Describe  Column Analysis Instances\n============ ============ ========= =============== =========\n|image17|    |image18|    |image19| |image20|       |image21|\n============ ============ ========= =============== =========\n\nJupyterHub w/ Jupyter Server Proxy\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nJupyterHub has an extension that allows to proxy port for user,\n`JupyterHub Server\nProxy <https://github.com/jupyterhub/jupyter-server-proxy>`__\n\nTo me it seems like this extension might be the best solution to getting\nD-Tale running within kubernetes. Here’s how to use it:\n\n.. code:: python\n\n   import pandas as pd\n\n   import dtale\n   import dtale.app as dtale_app\n\n   dtale_app.JUPYTER_SERVER_PROXY = True\n\n   dtale.show(pd.DataFrame([1,2,3]))\n\nNotice the command ``dtale_app.JUPYTER_SERVER_PROXY = True`` this will\nmake sure that any D-Tale instance will be served with the jupyter\nserver proxy application root prefix:\n\n``/user/{jupyter username}/proxy/{dtale instance port}/``\n\nOne thing to note is that if you try to look at the ``_main_url`` of\nyour D-Tale instance in your notebook it will not include the hostname\nor port:\n\n.. code:: python\n\n   import pandas as pd\n\n   import dtale\n   import dtale.app as dtale_app\n\n   dtale_app.JUPYTER_SERVER_PROXY = True\n\n   d = dtale.show(pd.DataFrame([1,2,3]))\n   d._main_url # /user/johndoe/proxy/40000/dtale/main/1\n\nThis is because it’s very hard to promgramatically figure out the\nhost/port that your notebook is running on. So if you want to look at\n``_main_url`` please be sure to preface it with:\n\n``http[s]://[jupyterhub host]:[jupyterhub port]``\n\nIf for some reason jupyterhub changes their API so that the application\nroot changes you can also override D-Tale’s application root by using\nthe ``app_root`` parameter to the ``show()`` function:\n\n.. code:: python\n\n   import pandas as pd\n\n   import dtale\n   import dtale.app as dtale_app\n\n   dtale.show(pd.DataFrame([1,2,3]), app_root='/user/johndoe/proxy/40000/`)\n\nUsing this parameter will only apply the application root to that\nspecific instance so you would have to include it on every call to\n``show()``.\n\nJupyterHub w/ Kubernetes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease read this\n`post <https://github.com/man-group/dtale/blob/master/docs/JUPYTERHUB_KUBERNETES.md>`__\n\nDocker Container\n~~~~~~~~~~~~~~~~\n\nIf you have D-Tale installed within your docker container please add the\nfollowing parameters to your ``docker run`` command.\n\n**On a Mac**:\n\n.. code:: sh\n\n   docker run -h `hostname` -p 40000:40000\n\n-  ``-h`` this will allow the hostname (and not the PID of the docker\n   container) to be available when building D-Tale URLs\n-  ``-p`` access to port 40000 which is the default port for running\n   D-Tale\n\n**On Windows**:\n\n.. code:: sh\n\n   docker run -p 40000:40000\n\n-  ``-p`` access to port 40000 which is the default port for running\n   D-Tale\n-  D-Tale URL will be http://127.0.0.1:40000/\n\n**Everything Else**:\n\n.. code:: sh\n\n   docker run -h `hostname` --network host\n\n-  ``-h`` this will allow the hostname (and not the PID of the docker\n   container) to be available when building D-Tale URLs\n-  ``--network host`` this will allow access to as many ports as needed\n   for running D-Tale processes\n\nGoogle Colab\n~~~~~~~~~~~~\n\nThis is a hosted notebook site and thanks to Colab’s internal function\n``google.colab.output.eval_js`` & the JS function\n``google.colab.kernel.proexyPort`` users can run D-Tale within their\nnotebooks.\n\n**DISCLAIMER:** It is important that you set ``USE_COLAB`` to true when\nusing D-Tale within this service. Here is an example:\n\n.. code:: python\n\n   import pandas as pd\n\n   import dtale\n   import dtale.app as dtale_app\n\n   dtale_app.USE_COLAB = True\n\n   dtale.show(pd.DataFrame([1,2,3]))\n\nIf this does not work for you try using ``USE_NGROK`` which is described\nin the next section.\n\nKaggle\n~~~~~~\n\nThis is yet another hosted notebook site and thanks to the work of\n`flask_ngrok <https://github.com/gstaff/flask-ngrok>`__ users can run\nD-Tale within their notebooks.\n\n**DISCLAIMER:** It is import that you set ``USE_NGROK`` to true when\nusing D-Tale within this service. Here is an example:\n\n.. code:: python\n\n   import pandas as pd\n\n   import dtale\n   import dtale.app as dtale_app\n\n   dtale_app.USE_NGROK = True\n\n   dtale.show(pd.DataFrame([1,2,3]))\n\nHere are some video tutorials of each:\n\n+-----------------------+-----------------------+-----------------------+\n| Service               | Tutorial              | Addtl Notes           |\n+=======================+=======================+=======================+\n| Google Colab          | |image22|             |                       |\n+-----------------------+-----------------------+-----------------------+\n| Kaggle                | |image23|             | make sure you switch  |\n|                       |                       | the “Internet” toggle |\n|                       |                       | to “On” under         |\n|                       |                       | settings of your      |\n|                       |                       | notebook so you can   |\n|                       |                       | install the egg from  |\n|                       |                       | pip                   |\n+-----------------------+-----------------------+-----------------------+\n\nIt is important to note that using NGROK will limit you to 20\nconnections per mintue so if you see this error:\n\n|image24|\n\nWait a little while and it should allow you to do work again. I am\nactively working on finding a more sustainable solution similar to what\nI did for google colab. :pray:\n\nBinder\n~~~~~~\n\nI have built a repo which shows an example of how to run D-Tale within\nBinder `here <https://github.com/aschonfeld/dtale-binder>`__.\n\nThe important take-aways are: \\* you must have ``jupyter-server-proxy``\ninstalled \\* look at the ``environment.yml`` file to see how to add it\nto your environment \\* look at the ``postBuild`` file for how to\nactivate it on startup\n\nR with Reticulate\n~~~~~~~~~~~~~~~~~\n\nI was able to get D-Tale running in R using reticulate. Here is an\nexample:\n\n::\n\n   library('reticulate')\n   dtale <- import('dtale')\n   df <- read.csv('https://vincentarelbundock.github.io/Rdatasets/csv/boot/acme.csv')\n   dtale$show(df, subprocess=FALSE, open_browser=TRUE)\n\nNow the problem with doing this is that D-Tale is not running as a\nsubprocess so it will block your R console and you’ll lose out the\nfollowing functions: - manipulating the state of your data from your R\nconsole - adding more data to D-Tale\n\n``open_browser=TRUE`` isn’t required and won’t work if you don’t have a\ndefault browser installed on your machine. If you don’t use that\nparameter simply copy & paste the URL that gets printed to your console\nin the browser of your choice.\n\nI’m going to do some more digging on why R doesn’t seem to like using\npython subprocesses (not sure if it something with how reticulate\nmanages the state of python) and post any findings to this thread.\n\nHere’s some helpful links for getting setup:\n\nreticulate\n\ninstalling python packages\n\nStartup with No Data\n~~~~~~~~~~~~~~~~~~~~\n\nIt is now possible to run D-Tale with no data loaded up front. So simply\ncall ``dtale.show()`` and this will start the application for you and\nwhen you go to view it you will be presented with a screen where you can\nupload either a CSV or TSV file for data.\n\n|image25|\n\nOnce you’ve loaded a file it will take you directly to the standard data\ngrid comprised of the data from the file you loaded. This might make it\neasier to use this as an on demand application within a container\nmanagement system like kubernetes. You start and stop these on demand\nand you’ll be presented with a new instance to load any CSV or TSV file\nto!\n\nCommand-line\n~~~~~~~~~~~~\n\nBase CLI options (run ``dtale --help`` to see all options available)\n\n+-----------------------------+----------------------------------------+\n| Prop                        | Description                            |\n+=============================+========================================+\n| ``--host``                  | the name of the host you would like to |\n|                             | use (most likely not needed since      |\n|                             | ``socket.gethostname()`` should figure |\n|                             | this out)                              |\n+-----------------------------+----------------------------------------+\n| ``--port``                  | the port you would like to assign to   |\n|                             | your D-Tale instance                   |\n+-----------------------------+----------------------------------------+\n| ``--name``                  | an optional name you can assign to     |\n|                             | your D-Tale instance (this will be     |\n|                             | displayed in the ``<title>`` &         |\n|                             | Instances popup)                       |\n+-----------------------------+----------------------------------------+\n| ``--debug``                 | turn on Flask’s “debug” mode for your  |\n|                             | D-Tale instance                        |\n+-----------------------------+----------------------------------------+\n| ``--no-reaper``             | flag to turn off auto-reaping          |\n|                             | subprocess (kill D-Tale instances      |\n|                             | after an hour of inactivity), good for |\n|                             | long-running displays                  |\n+-----------------------------+----------------------------------------+\n| ``--open-browser``          | flag to automatically open up your     |\n|                             | server’s default browser to your       |\n|                             | D-Tale instance                        |\n+-----------------------------+----------------------------------------+\n| ``--force``                 | flag to force D-Tale to try an kill    |\n|                             | any pre-existing process at the port   |\n|                             | you’ve specified so it can use it      |\n+-----------------------------+----------------------------------------+\n\nLoading data from `arctic\\ (high performance datastore for pandas\ndataframes) <https://github.com/man-group/arctic>`__ (this requires\neither installing **arctic** or **dtale[arctic]**)\n\n.. code:: bash\n\n   dtale --arctic-host mongodb://localhost:27027 --arctic-library jdoe.my_lib --arctic-node my_node --arctic-start 20130101 --arctic-end 20161231\n\nLoading data from **CSV**\n\n.. code:: bash\n\n   dtale --csv-path /home/jdoe/my_csv.csv --csv-parse_dates date\n\nLoading data from **EXCEL**\n\n.. code:: bash\n\n   dtale --excel-path /home/jdoe/my_csv.xlsx --excel-parse_dates date\n   dtale --excel-path /home/jdoe/my_csv.xls --excel-parse_dates date\n\nLoading data from **JSON**\n\n.. code:: bash\n\n   dtale --json-path /home/jdoe/my_json.json --json-parse_dates date\n\nor\n\n.. code:: bash\n\n   dtale --json-path http://json-endpoint --json-parse_dates date\n\nLoading data from **R Datasets**\n\n.. code:: bash\n\n   dtale --r-path /home/jdoe/my_dataset.rda\n\nLoading data from **SQLite DB Files**\n\n.. code:: bash\n\n   dtale --sqlite-path /home/jdoe/test.sqlite3 --sqlite-table test_table\n\nCustom Command-line Loaders\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLoading data from a **Custom** loader - Using the DTALE_CLI_LOADERS\nenvironment variable, specify a path to a location containing some\npython modules - Any python module containing the global variables\nLOADER_KEY & LOADER_PROPS will be picked up as a custom loader -\nLOADER_KEY: the key that will be associated with your loader. By default\nyou are given **arctic** & **csv** (if you use one of these are your key\nit will override these) - LOADER_PROPS: the individual props available\nto be specified. - For example, with arctic we have host, library, node,\nstart & end. - If you leave this property as an empty list your loader\nwill be treated as a flag. For example, instead of using all the arctic\nproperties we would simply specify ``--arctic`` (this wouldn’t work well\nin arctic’s case since it depends on all those properties) - You will\nalso need to specify a function with the following signature\n``def find_loader(kwargs)`` which returns a function that returns a\ndataframe or ``None`` - Here is an example of a custom loader:\n\n.. code:: python\n\n   from dtale.cli.clickutils import get_loader_options\n\n   '''\n     IMPORTANT!!! This global variable is required for building any customized CLI loader.\n     When find loaders on startup it will search for any modules containing the global variable LOADER_KEY.\n   '''\n   LOADER_KEY = 'testdata'\n   LOADER_PROPS = ['rows', 'columns']\n\n\n   def test_data(rows, columns):\n       import pandas as pd\n       import numpy as np\n       import random\n       from past.utils import old_div\n       from pandas.tseries.offsets import Day\n       from dtale.utils import dict_merge\n       import string\n\n       now = pd.Timestamp(pd.Timestamp('now').date())\n       dates = pd.date_range(now - Day(364), now)\n       num_of_securities = max(old_div(rows, len(dates)), 1)  # always have at least one security\n       securities = [\n           dict(security_id=100000 + sec_id, int_val=random.randint(1, 100000000000),\n                str_val=random.choice(string.ascii_letters) * 5)\n           for sec_id in range(num_of_securities)\n       ]\n       data = pd.concat([\n           pd.DataFrame([dict_merge(dict(date=date), sd) for sd in securities])\n           for date in dates\n       ], ignore_index=True)[['date', 'security_id', 'int_val', 'str_val']]\n\n       col_names = ['Col{}'.format(c) for c in range(columns)]\n       return pd.concat([data, pd.DataFrame(np.random.randn(len(data), columns), columns=col_names)], axis=1)\n\n\n   # IMPORTANT!!! This function is required for building any customized CLI loader.\n   def find_loader(kwargs):\n       test_data_opts = get_loader_options(LOADER_KEY, LOADER_PROPS, kwargs)\n       if len([f for f in test_data_opts.values() if f]):\n           def _testdata_loader():\n               return test_data(int(test_data_opts.get('rows', 1000500)), int(test_data_opts.get('columns', 96)))\n\n           return _testdata_loader\n       return None\n\nIn this example we simplying building a dataframe with some dummy data\nbased on dimensions specified on the command-line: - ``--testdata-rows``\n- ``--testdata-columns``\n\nHere’s how you would use this loader:\n\n.. code:: bash\n\n   DTALE_CLI_LOADERS=./path_to_loaders bash -c 'dtale --testdata-rows 10 --testdata-columns 5'\n\nAuthentication\n~~~~~~~~~~~~~~\n\nYou can choose to use optional authentication by adding the following to\nyour D-Tale ``.ini`` file (`directions\nhere <https://github.com/man-group/dtale/blob/master/docs/CONFIGURATION.md>`__):\n\n.. code:: ini\n\n   [auth]\n   active = True\n   username = johndoe\n   password = 1337h4xOr\n\nOr you can call the following:\n\n.. code:: python\n\n   import dtale.global_state as global_state\n\n   global_state.set_auth_settings({'active': True, 'username': 'johndoe', 'password': '1337h4x0r'})\n\nIf you have done this before initially starting D-Tale it will have\nauthentication applied. If you are adding this after starting D-Tale you\nwill have to kill your service and start it over.\n\nWhen opening your D-Tale session you will be presented with a screen\nlike this:\n\n|image26|\n\nFrom there you can enter the credentials you either set in your ``.ini``\nfile or in your call to ``dtale.global_state.set_auth_settings`` and you\nwill be brought to the main grid as normal. You will now have an\nadditional option in your main menu to logout:\n\n|image27|\n\nInstance Settings\n~~~~~~~~~~~~~~~~~\n\nUsers can set front-end properties on their instances programmatically\nin the ``dtale.show`` function or by calling the ``update_settings``\nfunction on their instance. For example:\n\n.. code:: python\n\n   import dtale\n   import pandas as pd\n\n   df = pd.DataFrame(dict(\n     a=[1,2,3,4,5],\n     b=[6,7,8,9,10],\n     c=['a','b','c','d','e']\n   ))\n   dtale.show(\n     df,\n     locked=['c'],\n     column_formats={'a': {'fmt': '0.0000'}},\n     nan_display='...',\n     background_mode='heatmap-col',\n     sort=[('a','DESC')],\n     vertical_headers=True,\n   )\n\nor\n\n.. code:: python\n\n   import dtale\n   import pandas as pd\n\n   df = pd.DataFrame(dict(\n     a=[1,2,3,4,5],\n     b=[6,7,8,9,10],\n     c=['a','b','c','d','e']\n   ))\n   d = dtale.show(\n     df\n   )\n   d.update_settings(\n     locked=['c'],\n     column_formats={'a': {'fmt': '0.0000'}},\n     nan_display='...',\n     background_mode='heatmap-col',\n     sort=[('a','DESC')],\n     vertical_headers=True,\n   )\n   d\n\nHere’s a short description of each instance setting available:\n\nshow_columns\n^^^^^^^^^^^^\n\nA list of column names you would like displayed in your grid. Anything\nelse will be hidden.\n\nhide_columns\n^^^^^^^^^^^^\n\nA list of column names you would like initially hidden from the grid\ndisplay.\n\ncolumn_formats\n^^^^^^^^^^^^^^\n\nA dictionary of column name keys and their front-end display\nconfiguration. Here are examples of the different format configurations:\n\\* Numeric: ``{'fmt': '0.00000'}`` \\* String: \\*\n``{'fmt': {'truncate': 10}}`` truncate string values to no more than 10\ncharacters followed by an ellipses \\* ``{'fmt': {'link': True}}`` if\nyour strings are URLs convert them to clickable links \\*\n``{'fmt': {'html': True}}`` if your strings are HTML fragments render\nthem as HTML \\* Date: ``{'fmt': 'MMMM Do YYYY, h:mm:ss a'}`` uses\n`Moment.js\nformatting <https://momentjs.com/docs/#/displaying/format/>`__\n\nnan_display\n^^^^^^^^^^^\n\nConverts any ``nan`` values in your dataframe to this when it is sent to\nthe browser (doesn’t actually change the state of your dataframe)\n\nsort\n^^^^\n\nList of tuples which sort your dataframe (EX:\n``[('a', 'ASC'), ('b', 'DESC')]``)\n\nlocked\n^^^^^^\n\nList of column names which will be locked to the right side of your grid\nwhile you scroll to the left.\n\nbackground_mode\n^^^^^^^^^^^^^^^\n\nA string denoting one of the many background displays available in\nD-Tale. Options are: \\* heatmap-all: turn on heatmap for all numeric\ncolumns where the colors are determined by the range of values over all\nnumeric columns combined \\* heatmap-col: turn on heatmap for all numeric\ncolumns where the colors are determined by the range of values in the\ncolumn \\* heatmap-col-[column name]: turn on heatmap highlighting for a\nspecific column \\* dtypes: highlight columns based on it’s data type \\*\nmissing: highlight any missing values (np.nan, empty strings, strings of\nall spaces) \\* outliers: highlight any outliers \\* range: highlight\nvalues for any matchers entered in the “range_highlights” option \\*\nlowVariance: highlight values with a low variance\n\nrange_highlights\n^^^^^^^^^^^^^^^^\n\nDictionary of column name keys and range configurations which if the\nvalue for that column exists then it will be shaded that color. Here is\nan example input:\n\n::\n\n   'a': {\n     'active': True,\n     'equals': {'active': True, 'value': 3, 'color': {'r': 255, 'g': 245, 'b': 157, 'a': 1}}, # light yellow\n     'greaterThan': {'active': True, 'value': 3, 'color': {'r': 80, 'g': 227, 'b': 194, 'a': 1}}, # mint green\n     'lessThan': {'active': True, 'value': 3, 'color': {'r': 245, 'g': 166, 'b': 35, 'a': 1}}, # orange\n   }\n\nvertical_headers\n^^^^^^^^^^^^^^^^\n\nIf set to ``True`` then the headers in your grid will be rotated 90\ndegrees vertically to conserve width. |image28|\n\nPredefined Filters\n~~~~~~~~~~~~~~~~~~\n\nUsers can build their own custom filters which can be used from the\nfront-end using the following code snippet:\n\n.. code:: python\n\n   import pandas as pd\n   import dtale\n   import dtale.predefined_filters as predefined_filters\n   import dtale.global_state as global_state\n\n   global_state.set_app_settings(dict(open_predefined_filters_on_startup=True))\n\n   predefined_filters.set_filters([\n       {\n           \"name\": \"A and B > 2\",\n           \"column\": \"A\",\n           \"description\": \"Filter A with B greater than 2\",\n           \"handler\": lambda df, val: df[(df[\"A\"] == val) & (df[\"B\"] > 2)],\n           \"input_type\": \"input\",\n           \"default\": 1,\n           \"active\": False,\n       },\n       {\n           \"name\": \"A and (B % 2) == 0\",\n           \"column\": \"A\",\n           \"description\": \"Filter A with B mod 2 equals zero (is even)\",\n           \"handler\": lambda df, val: df[(df[\"A\"] == val) & (df[\"B\"] % 2 == 0)],\n           \"input_type\": \"select\",\n           \"default\": 1,\n           \"active\": False,\n       },\n       {\n           \"name\": \"A in values and (B % 2) == 0\",\n           \"column\": \"A\",\n           \"description\": \"A is within a group of values and B mod 2 equals zero (is even)\",\n           \"handler\": lambda df, val: df[df[\"A\"].isin(val) & (df[\"B\"] % 2 == 0)],\n           \"input_type\": \"multiselect\",\n           \"default\": [1],\n           \"active\": True,\n       }\n   ])\n\n   df = pd.DataFrame(\n       ([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]),\n       columns=['A', 'B', 'C', 'D', 'E', 'F']\n   )\n   dtale.show(df)\n\nThis code illustrates the types of inputs you can have on the front end:\n\\* **input**: just a simple text input box which users can enter any\nvalue they want (if the value specified for ``\"column\"`` is an int or\nfloat it will try to convert the string to that data type) and it will\nbe passed to the handler \\* **select**: this creates a dropdown\npopulated with the unique values of ``\"column\"`` (an asynchronous\ndropdown if the column has a large amount of unique values) \\*\n**multiselect**: same as “select” but it will allow you to choose\nmultiple values (handy if you want to perform an ``isin`` operation in\nyour filter)\n\nHere is a demo of the functionality: |image29|\n\nIf there are any new types of inputs you would like available please\ndon’t hesitate to submit a request on the “Issues” page of the repo.\n\nUsing Swifter\n~~~~~~~~~~~~~\n\nSwifter is a package which will increase performance on any ``apply()``\nfunction on a pandas series or dataframe. If install the package in your\nvirtual environment\n\n.. code:: sh\n\n   pip install swifter\n   # or\n   pip install dtale[swifter]\n\nIt will be used for the following operations: - Standard dataframe\nformatting in the main grid & chart display - Column Builders - Type\nConversions - string hex -> int or float - int or float -> hex - mixed\n-> boolean - int -> timestamp - date -> int - Similarity Distance\nCalculation - Handling of empty strings when calculating missing counts\n- Building unique values by data type in “Describe” popup\n\nAccessing CLI Loaders in Notebook or Console\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nI am pleased to announce that all CLI loaders will be available within\nnotebooks & consoles. Here are some examples (the last working if you’ve\ninstalled ``dtale[arctic]``): -\n``dtale.show_csv(path='test.csv', parse_dates=['date'])`` -\n``dtale.show_csv(path='http://csv-endpoint', index_col=0)`` -\n``dtale.show_excel(path='test.xlsx', parse_dates=['date'])`` -\n``dtale.show_excel(path='test.xls', sheet=)`` -\n``dtale.show_excel(path='http://excel-endpoint', index_col=0)`` -\n``dtale.show_json(path='http://json-endpoint', parse_dates=['date'])`` -\n``dtale.show_json(path='test.json', parse_dates=['date'])`` -\n``dtale.show_r(path='text.rda')`` -\n``dtale.show_arctic(host='host', library='library', node='node', start_date='20200101', end_date='20200101')``\n\nUI\n--\n\nOnce you have kicked off your D-Tale session please copy & paste the\nlink on the last line of output in your browser |image30|\n\nDimensions/Ribbon Menu/Main Menu\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe information in the upper right-hand corner gives grid dimensions\n|image31| - lower-left => row count - upper-right => column count\n\nRibbon Menu - hovering around to top of your browser will display a menu\nitems (similar to the ones in the main menu) across the top of the\nscreen - to close the menu simply click outside the menu and/or\ndropdowns from the menu\n\n|image32|\n\nMain Menu - clicking the triangle displays the menu of standard\nfunctions (click outside menu to close it)\n\n|image33|\n\nHeader\n~~~~~~\n\nThe header gives users an idea of what operations have taken place on\nyour data (sorts, filters, hidden columns). These values will be\npersisted across broswer instances. So if you perform one of these\noperations and then send a link to one of your colleagues they will see\nthe same thing :)\n\nNotice the “X” icon on the right of each display. Clicking this will\nremove those operations.\n\nWhen performing multiple of the same operation the description will\nbecome too large to display so the display will truncate the description\nand if users click it they will be presented with a tooltip where you\ncan crop individual operations. Here are some examples:\n\n========= ========= ==============\nSorts     Filters   Hidden Columns\n========= ========= ==============\n|image34| |image35| |image36|\n========= ========= ==============\n\nResize Columns\n~~~~~~~~~~~~~~\n\nCurrently there are two ways which you can resize columns. \\* Dragging\nthe right border of the column’s header cell.\n\n|image37|\n\n-  Altering the “Maximum Column Width” property from the ribbon menu.\n\n|image38|\n\n-  **Side Note:** You can also set the ``max_column_width`` property\n   ahead of time in your `global\n   configuration <https://github.com/man-group/dtale/blob/master/docs/CONFIGURATION.md>`__\n   or programmatically using:\n\n.. code:: python\n\n   import dtale.global_state as global_state\n\n   global_state.set_app_settings(dict(max_column_width=100))\n\nEditing Cells\n~~~~~~~~~~~~~\n\nYou may edit any cells in your grid (with the exception of the row\nindexes or headers, the ladder can be edited using the\n`Rename <#rename>`__ column menu function).\n\nIn order to edit a cell simply double-click on it. This will convert it\ninto a text-input field and you should see a blinking cursor. In\naddition to turning that cell into an input it will also display an\ninput at the top of the screen for better viewing of long strings. It is\nassumed that the value you type in will match the data type of the\ncolumn you editing. For example:\n\n-  integers -> should be a valid positive or negative integer\n-  float -> should be a valid positive or negative float\n-  string -> any valid string will do\n-  category -> either a pre-existing category or this will create a new\n   category for (so beware!)\n-  date, timestamp, timedelta -> should be valid string versions of each\n-  boolean -> any string you input will be converted to lowercase and if\n   it equals “true” then it will make the cell ``True``, otherwise\n   ``False``\n\nUsers can make use of two protected values as well:\n\n-  “nan” -> ``numpy.nan``\n-  “inf” -> ``numpy.inf``\n\nTo save your change simply press “Enter” or to cancel your changes press\n“Esc”.\n\nIf there is a conversion issue with the value you have entered it will\ndisplay a popup with the specific exception in question.\n\nHere’s a quick demo:\n\n|image39|\n\nHere’s a demo of editing cells with long strings:\n\n|image40|\n\nCopy Cells Into Clipboard\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n========= ========= =========\nSelect    Copy      Paste\n========= ========= =========\n|image41| |image42| |image43|\n========= ========= =========\n\nOne request that I have heard time and time again while working on\nD-Tale is “it would be great to be able to copy a range of cells into\nexcel”. Well here is how that is accomplished: 1) Shift + Click on a\ncell 2) Shift + Click on another cell (this will trigger a popup) 3)\nChoose whether you want to include headers in your copy by clicking the\ncheckbox 4) Click Yes 5) Go to your excel workbook and execute Ctrl + V\nor manually choose “Paste” \\* You can also paste this into a standard\ntext editor and what you’re left with is tab-delimited data\n\nMain Menu Functions\n~~~~~~~~~~~~~~~~~~~\n\nXArray Operations\n^^^^^^^^^^^^^^^^^\n\n-  **Convert To XArray**: If you have are currently viewing a pandas\n   dataframe in D-Tale you will be given this option to convert your\n   data to an ``xarray.Dataset``. It is as simple as selecting one or\n   many columns as an index and then your dataframe will be converted to\n   a dataset (``df.set_index([...]).to_xarray()``) which makes toggling\n   between indexes slices much easier.\n\n|image44|\n\n-  **XArray Dimensions**: If you are currently viewing data associated\n   with an ``xarray.Dataset`` you will be given the ability to toggle\n   which dimension coordinates you’re viewing by clicking this button.\n   You can select values for all, some or none (all data - no filter) of\n   your coordinates and the data displayed in your grid will match your\n   selections. Under the hood the code being executed is as follows:\n   ``ds.sel(dim1=coord1,...).to_dataframe()``\n\n|image45|\n\nDescribe\n^^^^^^^^\n\nView all the columns & their data types as well as individual details of\neach column\n\n|image46|\n\n+-----------------------+-----------------------+-----------------------+\n| Data Type             | Display               | Notes                 |\n+=======================+=======================+=======================+\n| date                  | |image47|             |                       |\n+-----------------------+-----------------------+-----------------------+\n| string                | |image48|             | If you have less than |\n|                       |                       | or equal to 100       |\n|                       |                       | unique values they    |\n|                       |                       | will be displayed at  |\n|                       |                       | the bottom of your    |\n|                       |                       | popup                 |\n+-----------------------+-----------------------+-----------------------+\n| int                   | |image49|             | Anything with         |\n|                       |                       | standard numeric      |\n|                       |                       | classifications (min, |\n|                       |                       | max, 25%, 50%, 75%)   |\n|                       |                       | will have a nice      |\n|                       |                       | boxplot with the mean |\n|                       |                       | (if it exists)        |\n|                       |                       | displayed as an       |\n|                       |                       | outlier if you look   |\n|                       |                       | closely.              |\n+-----------------------+-----------------------+-----------------------+\n| float                 | |image50|             |                       |\n+-----------------------+-----------------------+-----------------------+\n\nOutlier Detection\n^^^^^^^^^^^^^^^^^\n\nWhen viewing integer & float columns in the `“Describe”\npopup <#describe>`__ you will see in the lower right-hand corner a\ntoggle for Uniques & Outliers.\n\n========= =========\nOutliers  Filter\n========= =========\n|image51| |image52|\n========= =========\n\nIf you click the “Outliers” toggle this will load the top 100 outliers\nin your column based on the following code snippet:\n\n.. code:: python\n\n   s = df[column]\n   q1 = s.quantile(0.25)\n   q3 = s.quantile(0.75)\n   iqr = q3 - q1\n   iqr_lower = q1 - 1.5 * iqr\n   iqr_upper = q3 + 1.5 * iqr\n   outliers = s[(s < iqr_lower) | (s > iqr_upper)]\n\nIf you click on the “Apply outlier filter” link this will add an\naddtional “outlier” filter for this column which can be removed from the\n`header <#header>`__ or the `custom filter <#custom-filter>`__ shown in\npicture above to the right.\n\nCustom Filter\n^^^^^^^^^^^^^\n\nApply a custom pandas ``query`` to your data (link to pandas\ndocumentation included in popup)\n\n========= =========\nEditing   Result\n========= =========\n|image53| |image54|\n========= =========\n\nYou can also see any outlier or column filters you’ve applied (which\nwill be included in addition to your custom query) and remove them if\nyou’d like.\n\nContext Variables are user-defined values passed in via the\n``context_variables`` argument to dtale.show(); they can be referenced\nin filters by prefixing the variable name with ‘@’.\n\nFor example, here is how you can use context variables in a pandas\nquery:\n\n.. code:: python\n\n   import pandas as pd\n\n   df = pd.DataFrame([\n     dict(name='Joe', age=7),\n     dict(name='Bob', age=23),\n     dict(name='Ann', age=45),\n     dict(name='Cat', age=88),\n   ])\n   two_oldest_ages = df['age'].nlargest(2)\n   df.query('age in @two_oldest_ages')\n\nAnd here is how you would pass that context variable to D-Tale:\n``dtale.show(df, context_variables=dict(two_oldest_ages=two_oldest_ages))``\n\nHere’s some nice documentation on the performance of `pandas\nqueries <https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html#pandas-eval-performance>`__\n\nDataframe Functions\n^^^^^^^^^^^^^^^^^^^\n\n|image55|\n\nThis video shows you how to build the following: - Numeric:\nadding/subtracting two columns or columns with static values - Bins:\nbucketing values using pandas cut & qcut as well as assigning custom\nlabels - Dates: retrieving date properties (hour, weekday, month…) as\nwell as conversions (month end) - Random: columns of data type (int,\nfloat, string & date) populated with random uniformly distributed\nvalues. - Type Conversion: switch columns from one data type to another,\nfun. :smile:\n\nMerge & Stack\n^^^^^^^^^^^^^\n\n|image56|\n\nThis feature allows users to merge or stack (vertically concatenate)\ndataframes they have loaded into D-Tale. They can also upload additional\ndata to D-Tale while wihin this feature. The demo shown above goes over\nthe following actions: - Editing of parameters to either a pandas merge\nor stack (vertical concatenation) of dataframes - Viewing direct\nexamples of each from the pandas documentation - Selection of dataframes\n- Uploading of additional dataframes from an excel file - Viewing code &\nresulting data from a merge or stack\n\nSummarize Data\n^^^^^^^^^^^^^^\n\nThis is very powerful functionality which allows users to create a new\ndata from currently loaded data. The operations currently available are:\n- **Aggregation**: consolidate data by running different aggregations on\ncolumns by a specific index - **Pivot**: this is simple wrapper around\n`pandas.Dataframe.pivot <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html>`__\nand\n`pandas.pivot_table <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html>`__\n- **Transpose**: transpose your data on a index (be careful dataframes\ncan get very wide if your index has many unique values)\n\n============ =========\nFunction     Data\n============ =========\nNo Reshaping |image57|\n|image58|    |image59|\n|image60|    |image61|\n|image62|    |image63|\n|image64|    |image65|\n============ =========\n\n|image66|\n\nDuplicates\n^^^^^^^^^^\n\nRemove duplicate columns/values from your data as well as extract\nduplicates out into separate instances.\n\nThe folowing screen shots are for a dataframe with the following data:\n|image67|\n\n+---------------------+-----------------------------+------------------+\n| Function            | Description                 | Preview          |\n+=====================+=============================+==================+\n| **Remove Duplicate  | Remove any columns that     | |image68|        |\n| Columns**           | contain the same data as    |                  |\n|                     | another and you can either  |                  |\n|                     | keep the first, last or     |                  |\n|                     | none of these columns that  |                  |\n|                     | match this criteria. You    |                  |\n|                     | can test which columns will |                  |\n|                     | be removed by clicking the  |                  |\n|                     | “View Duplicates” button.   |                  |\n+---------------------+-----------------------------+------------------+\n| **Remove Duplicate  | Remove any columns with the | |image69|        |\n| Column Names**      | same name (name comparison  |                  |\n|                     | is case-insensitive) and    |                  |\n|                     | you can either keep the     |                  |\n|                     | first, last or none of      |                  |\n|                     | these columns that match    |                  |\n|                     | this criteria. You can test |                  |\n|                     | which columns will be       |                  |\n|                     | removed by clicking the     |                  |\n|                     | “View Duplicates” button.   |                  |\n+---------------------+-----------------------------+------------------+\n| **Remove Duplicate  | Remove any rows from your   | |image70|        |\n| Rows**              | dataframe where the values  |                  |\n|                     | of a subset of columns are  |                  |\n|                     | considered duplicates. You  |                  |\n|                     | can choose to keep the      |                  |\n|                     | first, last or none of the  |                  |\n|                     | rows considered duplicated. |                  |\n+---------------------+-----------------------------+------------------+\n| **Show Duplicates** | Break any duplicate rows    | |image71|        |\n|                     | (based on a subset of       |                  |\n|                     | columns) out into another   |                  |\n|                     | dataframe viewable in your  |                  |\n|                     | D-Tale session. You can     |                  |\n|                     | choose to view all          |                  |\n|                     | duplicates or select        |                  |\n|                     | specific groups based on    |                  |\n|                     | the duplicated value.       |                  |\n+---------------------+-----------------------------+------------------+\n\nMissing Analysis\n^^^^^^^^^^^^^^^^\n\nDisplay charts analyzing the presence of missing (NaN) data in your\ndataset using the\n`missingno <https://github.com/ResidentMario/missingno>`__ pacakage. You\ncan also open them in a tab by themselves or export them to a static PNG\nusing the links in the upper right corner. You can also close the side\npanel using the ESC key.\n\n========== =========\nChart      Sample\n========== =========\nMatrix     |image72|\nBar        |image73|\nHeatmap    |image74|\nDendrogram |image75|\n========== =========\n\nCharts\n^^^^^^\n\nBuild custom charts based off your data(powered by\n`plotly/dash <https://github.com/plotly/dash>`__).\n\n-  The Charts will open in a tab because of the fact there is so much\n   functionality offered there you’ll probably want to be able to\n   reference the main grid data in the original tab\n-  To build a chart you must pick a value for X & Y inputs which\n   effectively drive what data is along the X & Y axes\n\n   -  If you are working with a 3-Dimensional chart (heatmap, 3D\n      Scatter, Surface) you’ll need to enter a value for the Z axis as\n      well\n\n-  Once you have entered all the required axes a chart will be built\n-  If your data along the x-axis (or combination of x & y in the case of\n   3D charts) has duplicates you have three options:\n\n   -  Specify a group, which will create series for each group\n   -  Specify an aggregation, you can choose from one of the following:\n      Count, First, Last, Mean, Median, Minimum, Maximum, Standard\n      Deviation, Variance, Mean Absolute Deviation, Product of All\n      Items, Sum, Rolling\n\n      -  Specifying a “Rolling” aggregation will also require a Window &\n         a Computation (Correlation, Count, Covariance, Kurtosis,\n         Maximum, Mean, Median, Minimum, Skew, Standard Deviation, Sum\n         or Variance)\n      -  For heatmaps you will also have access to the “Correlation”\n         aggregation since viewing correlation matrices in heatmaps is\n         very useful. This aggregation is not supported elsewhere\n\n   -  Specify both a group & an aggregation\n\n-  You now have the ability to toggle between different chart types:\n   line, bar, pie, wordcloud, heatmap, 3D scatter & surface\n-  If you have specified a group then you have the ability between\n   showing all series in one chart and breaking each series out into its\n   own chart “Chart per Group”\n\nHere are some examples:\n\n================== ========= ===============\nChart Type         Chart     Chart per Group\n================== ========= ===============\nline               |image76| |image77|\nbar                |image78| |image79|\nstacked            |image80| |image81|\npie                |image82| \nwordcloud          |image83| |image84|\nheatmap            |image85| \n3D scatter         |image86| \nsurface            |image87| \nMaps (Scatter GEO) |image88| \nMaps (Choropleth)  |image89| \n================== ========= ===============\n\nY-Axis Toggling\n\nUsers now have the ability to toggle between 3 different behaviors for\ntheir y-axis display: - *Default*: selecting this option will use the\ndefault behavior that comes with plotly for your chart’s y-axis -\n*Single*: this allows users to set the range of all series in your chart\nto be on the same basis as well as making that basis (min/max) editable\n- *Multi*: this allows users to give each series its own y-axis and\nmaking that axis’ range editable\n\nHere’s a quick tutorial: |image90|\n\nAnd some screenshots:\n\n========= ========= =========\nDefault   Single    Multi\n========= ========= =========\n|image91| |image92| |image93|\n========= ========= =========\n\nWith a bar chart that only has a single Y-Axis you have the ability to\nsort the bars based on the values for the Y-Axis\n\n========= =========\nPre-sort  Post-sort\n========= =========\n|image94| |image95|\n========= =========\n\n**Popup Charts**\n\nViewing multiple charts at once and want to separate one out into its\nown window or simply move one off to the side so you can work on\nbuilding another for comparison? Well now you can by clicking the\n“Popup” button :smile:\n\n**Copy Link**\n\nWant to send what you’re looking at to someone else? Simply click the\n“Copy Link” button and it will save a pre-populated chart URL into your\nclipboard. As long as your D-Tale process is still running when that\nlink is opened you will see your original chart.\n\n**Exporting Charts**\n\nYou can now export your dash charts (with the exception of Wordclouds)\nto static HTML files which can be emailed to others or saved down to be\nviewed at a later time. The best part is that all of the javascript for\nplotly is embedded in these files so the nice zooming, panning, etc is\nstill available! :boom:\n\n**Exporting CSV**\n\nI’ve been asked about being able to export the data that is contained\nwithin your chart to a CSV for further analysis in tools like Excel.\nThis button makes that possible.\n\nOFFLINE CHARTS\n~~~~~~~~~~~~~~\n\nWant to run D-Tale in a jupyter notebook and build a chart that will\nstill be displayed even after your D-Tale process has shutdown? Now you\ncan! Here’s an example code snippet show how to use it:\n\n::\n\n   import dtale\n\n   def test_data():\n       import random\n       import pandas as pd\n       import numpy as np\n\n       df = pd.DataFrame([\n           dict(x=i, y=i % 2)\n           for i in range(30)\n       ])\n       rand_data = pd.DataFrame(np.random.randn(len(df), 5), columns=['z{}'.format(j) for j in range(5)])\n       return pd.concat([df, rand_data], axis=1)\n\n   d = dtale.show(test_data())\n   d.offline_chart(chart_type='bar', x='x', y='z3', agg='sum')\n\n|image96|\n\n**Pro Tip: If generating offline charts in jupyter notebooks and you run\nout of memory please add the following to your command-line when\nstarting jupyter**\n\n``--NotebookApp.iopub_data_rate_limit=1.0e10``\n\n**Disclaimer: Long Running Chart Requests**\n\nIf you choose to build a chart that requires a lot of computational\nresources then it will take some time to run. Based on the way Flask &\nplotly/dash interact this will block you from performing any other\nrequest until it completes. There are two courses of action in this\nsituation:\n\n1) Restart your jupyter notebook kernel or python console\n2) Open a new D-Tale session on a different port than the current\n   session. You can do that with the following command:\n   ``dtale.show(df, port=[any open port], force=True)``\n\nIf you miss the legacy (non-plotly/dash) charts, not to worry! They are\nstill available from the link in the upper-right corner, but on for a\nlimited time… Here is the documentation for those: `Legacy\nCharts <https://github.com/man-group/dtale/blob/master/docs/LEGACY_CHARTS.md>`__\n\n**Your Feedback is Valuable**\n\nThis is a very powerful feature with many more features that could be\noffered (linked subplots, different statistical aggregations, etc…) so\nplease submit issues :)\n\nNetwork Viewer\n^^^^^^^^^^^^^^\n\nThis tool gives users the ability to visualize directed graphs. For the\nscreenshots I’ll beshowing for this functionality we’ll be working off a\ndataframe with the following data:\n\n|image97|\n\nStart by selecting columns containing the “To” and “From” values for the\nnodes in you network and then click “Load”: |image98|\n\nYou can also see instructions on to interact with the network by\nexpanding the directions section by clicking on the header “Network\nViewer” at the top. You can also view details about the network provided\nby the package `networkx <https://github.com/networkx>`__ by clicking\nthe header “Network Analysis”. |image99|\n\nSelect a column containing weighting for the edges of the nodes in the\n“Weight” column and click “Load”: |image100|\n\nSelect a column containing group information for each node in the “From”\ncolumn by populating “Group” and then clicking “Load”: |image101|\n\nPerform shortest path analysis by doing a Shift+Click on two nodes:\n|image102|\n\nView direct descendants of each node by clicking on it: |image103|\n\nYou can zoom in on nodes by double-clicking and zoom back out by\npressing “Esc”.\n\nCorrelations\n^^^^^^^^^^^^\n\nShows a pearson correlation matrix of all numeric columns against all\nother numeric columns - By default, it will show a grid of pearson\ncorrelations (filtering available by using drop-down see 2nd table of\nscreenshots) - If you have a date-type column, you can click an\nindividual cell and see a timeseries of pearson correlations for that\ncolumn combination - Currently if you have multiple date-type columns\nyou will have the ability to toggle between them by way of a drop-down -\nFurthermore, you can click on individual points in the timeseries to\nview the scatter plot of the points going into that correlation - Within\nthe scatter plot section you can also view the details of the PPS for\nthose data points in the chart by hovering over the number next to “PPS”\n\n========== ========== ========== ==========\nMatrix     PPS        Timeseries Scatter\n========== ========== ========== ==========\n|image104| |image105| |image106| |image107|\n========== ========== ========== ==========\n\n============= ============= ====================\nCol1 Filtered Col2 Filtered Col1 & Col2 Filtered\n============= ============= ====================\n|image108|    |image109|    |image110|\n============= ============= ====================\n\nWhen the data being viewed in D-Tale has date or timestamp columns but\nfor each date/timestamp vlaue there is only one row of data the behavior\nof the Correlations popup is a little different - Instead of a\ntimeseries correlation chart the user is given a rolling correlation\nchart which can have the window (default: 10) altered - The scatter\nchart will be created when a user clicks on a point in the rollign\ncorrelation chart. The data displayed in the scatter will be for the\nranges of dates involved in the rolling correlation for that date.\n\n========== ============\nData       Correlations\n========== ============\n|image111| |image112|\n========== ============\n\nPredictive Power Score\n^^^^^^^^^^^^^^^^^^^^^^\n\nPredictive Power Score (using the package\n`ppscore <https://github.com/8080labs/ppscore>`__) is an asymmetric,\ndata-type-agnostic score that can detect linear or non-linear\nrelationships between two columns. The score ranges from 0 (no\npredictive power) to 1 (perfect predictive power). It can be used as an\nalternative to the correlation (matrix). WARNING: This could take a\nwhile to load.\n\nThis page works similar to the `Correlations <#correlations>`__ page but\nuses the PPS calcuation to populate the grid and by clicking on cells\nyou can view the details of the PPS for those two columns in question.\n\n|image113|\\ \\|\\ |image114|\n\nHeat Map\n^^^^^^^^\n\nThis will hide any non-float or non-int columns (with the exception of\nthe index on the right) and apply a color to the background of each\ncell.\n\n-  Each float is renormalized to be a value between 0 and 1.0\n-  You have two options for the renormalization\n\n   -  **By Col**: each value is calculated based on the min/max of its\n      column\n   -  **Overall**: each value is caluclated by the overall min/max of\n      all the non-hidden float/int columns in the dataset\n\n-  Each renormalized value is passed to a color scale of red(0) -\n   yellow(0.5) - green(1.0) |image115|\n\nTurn off Heat Map by clicking menu option you previously selected one\nmore time\n\nHighlight Dtypes\n^^^^^^^^^^^^^^^^\n\nThis is a quick way to check and see if your data has been categorized\ncorrectly. By clicking this menu option it will assign a specific\nbackground color to each column of a specific data type.\n\n======== ========= ===== ========== ==== ====== ======\ncategory timedelta float int        date string bool\n======== ========= ===== ========== ==== ====== ======\npurple   orange    green light blue pink white  yellow\n======== ========= ===== ========== ==== ====== ======\n\n|image116|\n\nHighlight Missing\n^^^^^^^^^^^^^^^^^\n\n-  Any cells which contain ``nan`` values will be highlighted in yellow.\n-  Any string column cells which are empty strings or strings consisting\n   only of spaces will be highlighted in orange.\n-  ❗will be prepended to any column header which contains missing\n   values.\n\n|image117|\n\nHighlight Outliers\n^^^^^^^^^^^^^^^^^^\n\nHighlight any cells for numeric columns which surpass the upper or lower\nbounds of a `custom outlier computation <#outlier-detection>`__. \\*\nLower bounds outliers will be on a red scale, where the darker reds will\nbe near the maximum value for the column. \\* Upper bounds outliers will\nbe on a blue scale, where the darker blues will be closer to the minimum\nvalue for the column. \\* ⭐ will be prepended to any column header which\ncontains outliers.\n\n|image118|\n\nHighlight Range\n^^^^^^^^^^^^^^^\n\nHighlight any range of numeric cells based on three different criteria:\n\\* equals \\* greater than \\* less than\n\nYou can activate as many of these criteria as you’d like nad they will\nbe treated as an “or” expression. For example,\n``(x == 0) or (x < -1) or (x > 1)``\n\n========== ==========\nSelections Output\n========== ==========\n|image119| |image120|\n========== ==========\n\nLow Variance Flag\n^^^^^^^^^^^^^^^^^\n\nShow flags on column headers where both these conditions are true: \\*\nCount of unique values / column size < 10% \\* Count of most common value\n/ Count of second most common value > 20\n\nHere’s an example of what this will look like when you apply it:\n|image121|\\ \\|\\ |image122|\n\nCode Exports\n^^^^^^^^^^^^\n\n*Code Exports* are small snippets of code representing the current state\nof the grid you’re viewing including things like: - columns built -\nfiltering - sorting\n\nOther code exports available are: - Describe (Column Analysis) -\nCorrelations (grid, timeseries chart & scatter chart) - Charts built\nusing the Chart Builder\n\n|image123|\n\n====================== ===========\nType                   Code Export\n====================== ===========\nMain Grid              |image124|\nHistogram              |image125|\nDescribe               |image126|\nCorrelation Grid       |image127|\nCorrelation Timeseries |image128|\nCorrelation Scatter    |image129|\nCharts                 |image130|\n====================== ===========\n\nExport CSV\n^^^^^^^^^^\n\nExport your current data to either a CSV or TSV file:\n\n|image131|\n\nLoad Data & Sample Datasets\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo either when starting D-Tale with no pre-loaded data or after you’ve\nalready loaded some data you now have the ability to load data or choose\nfrom some sample datasets directly from the GUI:\n\n|image132|\n\nHere’s the options at you disposal: \\* Load a CSV/TSV file by dragging a\nfile to the dropzone in the top or select a file by clicking the\ndropzone \\* Load a CSV/TSV or JSON directly from the web by entering a\nURL (also throw in a proxy if you are using one) \\* Choose from one of\nour sample datasets: \\* US COVID-19 data from NY Times (updated daily)\n\\* Script breakdowns of popular shows Seinfeld & The Simpsons \\* Movie\ndataset containing release date, director, actors, box office, reviews…\n\\* Video games and their sales \\* pandas.util.testing.makeTimeDataFrame\n\nInstances\n^^^^^^^^^\n\nThis will give you information about other D-Tale instances are running\nunder your current Python process.\n\nFor example, if you ran the following script:\n\n.. code:: python\n\n   import pandas as pd\n   import dtale\n\n   dtale.show(pd.DataFrame([dict(foo=1, bar=2, biz=3, baz=4, snoopy_D_O_double_gizzle=5)]))\n   dtale.show(pd.DataFrame([\n       dict(a=1, b=2, c=3, d=4),\n       dict(a=2, b=3, c=4, d=5),\n       dict(a=3, b=4, c=5, d=6),\n       dict(a=4, b=5, c=6, d=7)\n   ]))\n   dtale.show(pd.DataFrame([range(6), range(6), range(6), range(6), range(6), range(6)]), name=\"foo\")\n\nThis will make the **Instances** button available in all 3 of these\nD-Tale instances. Clicking that button while in the first instance\ninvoked above will give you this popup:\n\n|image133|\n\nThe grid above contains the following information: - Process: timestamp\nwhen the process was started along with the name (if specified in\n``dtale.show()``) - Rows: number of rows - Columns: number of columns -\nColumn Names: comma-separated string of column names (only first 30\ncharacters, hover for full listing) - Preview: this button is available\nany of the non-current instances. Clicking this will bring up left-most\n5X5 grid information for that instance - The row highlighted in green\nsignifys the current D-Tale instance - Any other row can be clicked to\nswitch to that D-Tale instance\n\nHere is an example of clicking the “Preview” button:\n\n|image134|\n\nAbout\n^^^^^\n\nThis will give you information about what version of D-Tale you’re\nrunning as well as if its out of date to whats on PyPi.\n\n========== ===========\nUp To Date Out Of Date\n========== ===========\n|image135| |image136|\n========== ===========\n\nRefresh Widths\n^^^^^^^^^^^^^^\n\nMostly a fail-safe in the event that your columns are no longer lining\nup. Click this and should fix that\n\nTheme\n^^^^^\n\nToggle between light & dark themes for your viewing pleasure (only\naffects grid, not popups or charts).\n\n========== ==========\nLight      Dark\n========== ==========\n|image137| |image138|\n========== ==========\n\nReload Data\n^^^^^^^^^^^\n\nForce a reload of the data from the server for the current rows being\nviewing in the grid by clicking this button. This can be helpful when\nviewing the grid from within another application like jupyter or nested\nwithin another website.\n\nUnpin/Pin Menu\n^^^^^^^^^^^^^^\n\nIf you would like to keep your menu pinned to the side of your grid all\ntimes rather than always having to click the triaangle in the upper\nleft-hand corner simply click this button. It is persisted back to the\nserver so that it can be applied to all piece of data you’ve loaded into\nyour session and beyond refreshes.\n\nLanguage\n^^^^^^^^\n\n|image139|\n\nI am happy to announce that D-Tale now supports both English & Chinese\n(there is still more of the translation to be completed but the\ninfrastructure is there). And we are happy to add support for any other\nlanguages. Please see instruction on how,\n`here <#adding-language-support>`__.\n\nShutdown\n^^^^^^^^\n\nPretty self-explanatory, kills your D-Tale session (there is also an\nauto-kill process that will kill your D-Tale after an hour of\ninactivity)\n\nColumn Menu Functions\n~~~~~~~~~~~~~~~~~~~~~\n\n|image140|\n\nFiltering\n^^^^^^^^^\n\n|image141|\n\nThese interactive filters come in 3 different types: String, Numeric &\nDate. Note that you will still have the ability to apply custom filters\nfrom the “Filter” popup on the main menu, but it will get applied in\naddition to any column filters.\n\n+---------+--------------+------------------------+-------------------+\n| Type    | Filter       | Data Types             | Features          |\n+=========+==============+========================+===================+\n| String  | |image142|   | strings & booleans     | The ability to    |\n|         |              |                        | select multiple   |\n|         |              |                        | values based on   |\n|         |              |                        | what exists in    |\n|         |              |                        | the column.       |\n|         |              |                        | Notice the “Show  |\n|         |              |                        | Missing Only”     |\n|         |              |                        | toggle, this will |\n|         |              |                        | only show up if   |\n|         |              |                        | your column has   |\n|         |              |                        | nan values        |\n+---------+--------------+------------------------+-------------------+\n| Date    | |image143|   | dates                  | Specify a range   |\n|         |              |                        | of dates to       |\n|         |              |                        | filter on based   |\n|         |              |                        | on start & end    |\n|         |              |                        | inputs            |\n+---------+--------------+------------------------+-------------------+\n| Numeric | |image144|   | ints & floats          | For integers the  |\n|         |              |                        | “=” will be       |\n|         |              |                        | similar to        |\n|         |              |                        | strings where you |\n|         |              |                        | can select        |\n|         |              |                        | multiple values   |\n|         |              |                        | based on what     |\n|         |              |                        | exists in the     |\n|         |              |                        | column. You also  |\n|         |              |                        | have access to    |\n|         |              |                        | other operands:   |\n|         |              |                        | <,>,<=,>=,() -    |\n|         |              |                        | “Range exclusve”, |\n|         |              |                        | [] - “Range       |\n|         |              |                        | inclusive”.       |\n+---------+--------------+------------------------+-------------------+\n\nMoving Columns\n^^^^^^^^^^^^^^\n\n|image145|\n\nAll column movements are saved on the server so refreshing your browser\nwon’t lose them :ok_hand:\n\nHiding Columns\n^^^^^^^^^^^^^^\n\n|image146|\n\nAll column movements are saved on the server so refreshing your browser\nwon’t lose them :ok_hand:\n\nDelete\n^^^^^^\n\nAs simple as it sounds, click this button to delete this column from\nyour dataframe.\n\nRename\n^^^^^^\n\nUpdate the name of any column in your dataframe to a name that is not\ncurrently in use by your dataframe.\n\n|image147|\n\nReplacements\n^^^^^^^^^^^^\n\nThis feature allows users to replace content on their column directly or\nfor safer purposes in a brand new column. Here are the options you have:\n\n+------------------+--------------------+-----------------+------------+\n| Type             | Data Types         | Description     | Menu       |\n+==================+====================+=================+============+\n| Value(s)         | all                | Replace         | |image148| |\n|                  |                    | specific values |            |\n|                  |                    | in a column     |            |\n|                  |                    | with raw        |            |\n|                  |                    | values, output  |            |\n|                  |                    | from another    |            |\n|                  |                    | column or an    |            |\n|                  |                    | aggregation on  |            |\n|                  |                    | your column     |            |\n+------------------+--------------------+-----------------+------------+\n| Spaces Only      | strings            | Replace string  | |image149| |\n|                  |                    | values          |            |\n|                  |                    | consisting only |            |\n|                  |                    | of spaces with  |            |\n|                  |                    | raw values      |            |\n+------------------+--------------------+-----------------+------------+\n| Contains         | strings            | Replace string  | |image150| |\n| Char/Substring   |                    | values          |            |\n|                  |                    | containing a    |            |\n|                  |                    | specific        |            |\n|                  |                    | character or    |            |\n|                  |                    | substring       |            |\n+------------------+--------------------+-----------------+------------+\n| Scikit-Learn     | numeric            | Replace missing | |image151| |\n| Imputer          |                    | values with the |            |\n|                  |                    | output of using |            |\n|                  |                    | different       |            |\n|                  |                    | Scikit-Learn    |            |\n|                  |                    | imputers like   |            |\n|                  |                    | iterative, knn  |            |\n|                  |                    | & simple        |            |\n+------------------+--------------------+-----------------+------------+\n\nHere’s a quick demo: |image152|\n\nLock\n^^^^\n\nAdds your column to “locked” columns - “locked” means that if you scroll\nhorizontally these columns will stay pinned to the right-hand side -\nthis is handy when you want to keep track of which date or security_id\nyou’re looking at - by default, any index columns on the data passed to\nD-Tale will be locked\n\nUnlock\n^^^^^^\n\nRemoved column from “locked” columns\n\nSorting\n^^^^^^^\n\nApplies/removes sorting (Ascending/Descending/Clear) to the column\nselected\n\n*Important*: as you add sorts they sort added will be added to the end\nof the multi-sort. For example:\n\n========================= ================\nAction                    Sort\n========================= ================\nclick “a”                 \nsort asc                  a (asc)\nclick “b”                 a (asc)\nsort desc                 a (asc), b(desc)\nclick “a”                 a (asc), b(desc)\nsort None                 b(desc)\nsort desc                 b(desc), a(desc)\nclick “X” on sort display \n========================= ================\n\nFormats\n^^^^^^^\n\nApply simple formats to numeric values in your grid\n\n======= ========== ==========\nType    Editing    Result\n======= ========== ==========\nNumeric |image153| |image154|\nDate    |image155| |image156|\nString  |image157| |image158|\n======= ========== ==========\n\nFor all data types you have the ability to change what string is ued for\ndisplay.\n\nFor numbers here’s a grid of all the formats available with -123456.789\nas input:\n\n============= ==============\nFormat        Output\n============= ==============\nPrecision (6) -123456.789000\nThousands Sep -123,456.789\nAbbreviate    -123k\nExponent      -1e+5\nBPS           -1234567890BPS\nRed Negatives -123457\n============= ==============\n\nFor strings you can apply the follwoing formats: \\* **Truncation:**\ntruncate long strings to a certain number of characters and replace with\nan allipses “…” and see the whole value on hover. \\* **Hyperlinks:** If\nyour column is comprised of URL strings you can make them hyperlinks\nwhich will open a new tab\n\nDescribe (Column Analysis)\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBased on the data type of a column different charts will be shown. This\nside panel can be closed using the ‘X’ button in the upper right or by\npressing the ESC key.\n\n================= ================================= ==========\nChart             Data Types                        Sample\n================= ================================= ==========\nBox Plot          Float, Int, Date                  |image159|\nHistogram         Float, Int                        |image160|\nValue Counts      Int, String, Bool, Date, Category |image161|\nWord Value Counts String                            |image162|\nCategory          Float                             |image163|\nGeolocation\\*     Int, Float                        |image164|\nQ-Q Plot          Int, Float, Date                  |image165|\n================= ================================= ==========\n\n**Histogram** can be displayed in any number of bins (default: 20),\nsimply type a new integer value in the bins input\n\n**Value Count** by default, show the top 100 values ranked by frequency.\nIf you would like to show the least frequent values simply make your\nnumber negative (-10 => 10 least frequent value)\n\n**Value Count w/ Ordinal** you can also apply an ordinal to your **Value\nCount** chart by selecting a column (of type int or float) and applying\nan aggregation (default: sum) to it (sum, mean, etc…) this column will\nbe grouped by the column you’re analyzing and the value produced by the\naggregation will be used to sort your bars and also displayed in a line.\nHere’s an example:\n\n|image166|\n\n**Word Value Count** you can analyze string data by splitting each\nrecord by spaces to see the counts of each word. This chart has all the\nsame functions available as “Value Counts”. In addition, you can select\nmultiple “Cleaner” functions to be applied to your column before\nbuilding word values. These functions will perform operations like\nremoving punctuation, removing numeric character & normalizing accent\ncharacters.\n\n**Category (Category Breakdown)** when viewing float columns you can\nalso see them broken down by a categorical column (string, date, int,\netc…). This means that when you select a category column this will then\ndisplay the frequency of each category in a line as well as bars based\non the float column you’re analyzing grouped by that category and\ncomputed by your aggregation (default: mean).\n\n**Geolocation** when your data contains latitude & longitude then you\ncan view the coverage in a plotly scattergeo map. In order to have\naccess this chart your dataframe must have at least one of each of these\ntypes of columns: \\* “lat” must be contained within the lower-cased\nversion of the column name and values be between -90 & 90 \\* “lon” must\nbe contained within the lower-cased version of the column name and\nvalues be between -180 & 180\n\nHotkeys\n~~~~~~~\n\nThese are key combinations you can use in place of clicking actual\nbuttons to save a little time:\n\n+-------------+-------------------------------------------------------+\n| Keymap      | Action                                                |\n+=============+=======================================================+\n| ``shift+m`` | Opens main menu\\*                                     |\n+-------------+-------------------------------------------------------+\n| ``shift+d`` | Opens “Describe” page\\*                               |\n+-------------+-------------------------------------------------------+\n| ``shift+f`` | Opens “Custom Filter”\\*                               |\n+-------------+-------------------------------------------------------+\n| ``shift+b`` | Opens “Build Column”\\*                                |\n+-------------+-------------------------------------------------------+\n| ``shift+c`` | Opens “Charts” page\\*                                 |\n+-------------+-------------------------------------------------------+\n| ``shift+x`` | Opens “Code Export”\\*                                 |\n+-------------+-------------------------------------------------------+\n| ``esc``     | Closes any open modal window or side panel & exits    |\n|             | cell editing                                          |\n+-------------+-------------------------------------------------------+\n\n``*`` Does not fire if user is actively editing a cell.\n\nMenu Functions Depending on Browser Dimensions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDepending on the dimensions of your browser window the following buttons\nwill not open modals, but rather separate browser windows: Correlations,\nDescribe & Instances (see images from `Jupyter\nNotebook <#jupyter-notebook>`__, also Charts will always open in a\nseparate browser window)\n\nFor Developers\n--------------\n\nCloning\n~~~~~~~\n\nClone the code (git clone ssh://git@github.com:manahl/dtale.git), then\nstart the backend server:\n\n.. code:: bash\n\n   $ git clone ssh://git@github.com:manahl/dtale.git\n   # install the dependencies\n   $ python setup.py develop\n   # start the server\n   $ dtale --csv-path /home/jdoe/my_csv.csv --csv-parse_dates date\n\nYou can also run dtale from PyDev directly.\n\nYou will also want to import javascript dependencies and build the\nsource (all javascript code resides in the ``frontend`` folder):\n\n.. code:: bash\n\n   $ cd frontend\n   $ npm install\n   # 1) a persistent server that serves the latest JS:\n   $ npm run watch\n   # 2) or one-off build:\n   $ npm run build\n\nRunning tests\n~~~~~~~~~~~~~\n\nThe usual npm test command works:\n\n::\n\n   $ npm test\n\nYou can run individual test files:\n\n::\n\n   $ npm run test -- static/__tests__/dtale/DataViewer-base-test.jsx\n\nLinting\n~~~~~~~\n\nYou can lint all the JS and CSS to confirm there’s nothing obviously\nwrong with it:\n\n.. code:: bash\n\n   $ npm run lint\n\nYou can also lint individual JS files:\n\n.. code:: bash\n\n   $ npm run lint-js-file -s -- static/dtale/DataViewer.jsx\n\nFormatting JS\n~~~~~~~~~~~~~\n\nYou can auto-format code as follows:\n\n.. code:: bash\n\n   $ npm run format\n\nDocker Development\n~~~~~~~~~~~~~~~~~~\n\nYou can build python 27-3 & run D-Tale as follows:\n\n.. code:: bash\n\n   $ yarn run build\n   $ docker-compose build dtale_2_7\n   $ docker run -it --network host dtale_2_7:latest\n   $ python\n   >>> import pandas as pd\n   >>> df = pd.DataFrame([dict(a=1,b=2,c=3)])\n   >>> import dtale\n   >>> dtale.show(df)\n\nThen view your D-Tale instance in your browser using the link that gets\nprinted\n\nYou can build python 36-1 & run D-Tale as follows:\n\n.. code:: bash\n\n   $ yarn run build\n   $ docker-compose build dtale_3_6\n   $ docker run -it --network host dtale_3_6:latest\n   $ python\n   >>> import pandas as pd\n   >>> df = pd.DataFrame([dict(a=1,b=2,c=3)])\n   >>> import dtale\n   >>> dtale.show(df)\n\nThen view your D-Tale instance in your browser using the link that gets\nprinted\n\nAdding Language Support\n~~~~~~~~~~~~~~~~~~~~~~~\n\nCurrently D-Tale support both english & chinese but other languages will\ngladly be supported. To add another language simply open a pull request\nwith the following: - cake a copy & translate the values in the\nfollowing JSON english JSON files and save them to the same locations as\neach file -\n`Back-End <https://github.com/man-group/dtale/blob/master/dtale/translations/en.json>`__\n-\n`Front-End <https://github.com/man-group/dtale/blob/master/static/translations/en.json>`__\n- please make the name of these files the name of the language you are\nadding (currently english -> en, chinese -> cn) - be sure to keep the\nkeys in english, that is important\n\nLooking forward to what languages come next! :smile:\n\nGlobal State/Data Storage\n-------------------------\n\nIf D-Tale is running in an environment with multiple python processes\n(ex: on a web server running\n`gunicorn <https://github.com/benoitc/gunicorn>`__) it will most likely\nencounter issues with inconsistent state. Developers can fix this by\nconfiguring the system D-Tale uses for storing data. Detailed\ndocumentation is available here: `Data Storage and managing Global\nState <https://github.com/man-group/dtale/blob/master/docs/GLOBAL_STATE.md>`__\n\nStartup Behavior\n----------------\n\nHere’s a little background on how the ``dtale.show()`` function works: -\nby default it will look for ports between 40000 & 49000, but you can\nchange that range by specifying the environment variables DTALE_MIN_PORT\n& DTALE_MAX_PORT - think of sessions as python consoles or jupyter\nnotebooks\n\n1) Session 1 executes ``dtale.show(df)`` our state is:\n\n======= ===== =============== ===================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== ===================================\n1       40000 1               http://localhost:40000/dtale/main/1\n======= ===== =============== ===================================\n\n2) Session 1 executes ``dtale.show(df)`` our state is:\n\n======= ===== =============== =======================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =======================================\n1       40000 1,2             http://localhost:40000/dtale/main/[1,2]\n======= ===== =============== =======================================\n\n2) Session 2 executes ``dtale.show(df)`` our state is:\n\n======= ===== =============== =======================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =======================================\n1       40000 1,2             http://localhost:40000/dtale/main/[1,2]\n2       40001 1               http://localhost:40001/dtale/main/1\n======= ===== =============== =======================================\n\n3) Session 1 executes ``dtale.show(df, port=40001, force=True)`` our\n   state is:\n\n======= ===== =============== =========================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =========================================\n1       40001 1,2,3           http://localhost:40001/dtale/main/[1,2,3]\n======= ===== =============== =========================================\n\n4) Session 3 executes ``dtale.show(df)`` our state is:\n\n======= ===== =============== =========================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =========================================\n1       40001 1,2,3           http://localhost:40001/dtale/main/[1,2,3]\n3       40000 1               http://localhost:40000/dtale/main/1\n======= ===== =============== =========================================\n\n5) Session 2 executes ``dtale.show(df)`` our state is:\n\n======= ===== =============== =========================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =========================================\n1       40001 1,2,3           http://localhost:40001/dtale/main/[1,2,3]\n3       40000 1               http://localhost:40000/dtale/main/1\n2       40002 1               http://localhost:40002/dtale/main/1\n======= ===== =============== =========================================\n\n6) Session 4 executes ``dtale.show(df, port=8080)`` our state is:\n\n======= ===== =============== =========================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =========================================\n1       40001 1,2,3           http://localhost:40001/dtale/main/[1,2,3]\n3       40000 1               http://localhost:40000/dtale/main/1\n2       40002 1               http://localhost:40002/dtale/main/1\n4       8080  1               http://localhost:8080/dtale/main/1\n======= ===== =============== =========================================\n\n7) Session 1 executes ``dtale.get_instance(1).kill()`` our state is:\n\n======= ===== =============== =======================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =======================================\n1       40001 2,3             http://localhost:40001/dtale/main/[2,3]\n3       40000 1               http://localhost:40000/dtale/main/1\n2       40002 1               http://localhost:40002/dtale/main/1\n4       8080  1               http://localhost:8080/dtale/main/1\n======= ===== =============== =======================================\n\n7) Session 5 sets DTALE_MIN_RANGE to 30000 and DTALE_MAX_RANGE 39000 and\n   executes ``dtale.show(df)`` our state is:\n\n======= ===== ================= =======================================\nSession Port  Active Data ID(s) URL(s)\n======= ===== ================= =======================================\n1       40001 2,3               http://localhost:40001/dtale/main/[2,3]\n3       40000 1                 http://localhost:40000/dtale/main/1\n2       40002 1                 http://localhost:40002/dtale/main/1\n4       8080  1                 http://localhost:8080/dtale/main/1\n5       30000 1                 http://localhost:30000/dtale/main/1\n======= ===== ================= =======================================\n\nDocumentation\n-------------\n\nHave a look at the `detailed\ndocumentation <https://dtale.readthedocs.io>`__.\n\nDependencies\n------------\n\n-  Back-end\n\n   -  dash\n   -  dash_daq\n   -  Flask\n   -  Flask-Compress\n   -  flask-ngrok\n   -  Pandas\n   -  plotly\n   -  scikit-learn\n   -  scipy\n   -  xarray\n   -  arctic [extra]\n   -  redis [extra]\n   -  rpy2 [extra]\n\n-  Front-end\n\n   -  react-virtualized\n   -  chart.js\n\nAcknowledgements\n----------------\n\nD-Tale has been under active development at `Man\nNumeric <http://www.numeric.com/>`__ since 2019.\n\nOriginal concept and implementation: `Andrew\nSchonfeld <https://github.com/aschonfeld>`__\n\nContributors:\n\n-  `Phillip Dupuis <https://github.com/phillipdupuis>`__\n-  `Fernando Saravia Rajal <https://github.com/fersarr>`__\n-  `Dominik Christ <https://github.com/DominikMChrist>`__\n-  `Reza Moshksar <https://github.com/reza1615>`__\n-  `Bertrand Nouvel <https://github.com/bnouvelbmll>`__\n-  `Chris Boddy <https://github.com/cboddy>`__\n-  `Jason Holden <https://github.com/jasonkholden>`__\n-  `Tom Taylor <https://github.com/TomTaylorLondon>`__\n-  `Wilfred Hughes <https://github.com/Wilfred>`__\n-  Mike Kelly\n-  `Vincent Riemer <https://github.com/vincentriemer>`__\n-  `Youssef Habchi <http://youssef-habchi.com/>`__ - title font\n-  … and many others …\n\nContributions welcome!\n\nLicense\n-------\n\nD-Tale is licensed under the GNU LGPL v2.1. A copy of which is included\nin `LICENSE <LICENSE>`__\n\n.. |image0| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Title.png\n   :target: https://github.com/man-group/dtale\n.. |CircleCI| image:: https://circleci.com/gh/man-group/dtale.svg?style=shield&circle-token=4b67588a87157cc03b484fb96be438f70b5cd151\n   :target: https://circleci.com/gh/man-group/dtale\n.. |PyPI Python Versions| image:: https://img.shields.io/pypi/pyversions/dtale.svg\n   :target: https://pypi.python.org/pypi/dtale/\n.. |PyPI| image:: https://img.shields.io/pypi/v/dtale\n   :target: https://pypi.org/project/dtale/\n.. |Conda| image:: https://img.shields.io/conda/v/conda-forge/dtale\n   :target: https://anaconda.org/conda-forge/dtale\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/dtale/badge\n   :target: https://dtale.readthedocs.io\n.. |codecov| image:: https://codecov.io/gh/man-group/dtale/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/man-group/dtale\n.. |Downloads| image:: https://pepy.tech/badge/dtale\n   :target: https://pepy.tech/project/dtale\n.. |Open in VS Code| image:: https://open.vscode.dev/badges/open-in-vscode.svg\n   :target: https://open.vscode.dev/man-group/dtale\n.. |image9| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/gifs/dtale_demo_mini.gif\n.. |image10| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/gifs/dtale_ipython.gif\n.. |image11| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Python_Terminal.png\n.. |image12| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Duplicate_data.png\n.. |image13| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython1.png\n.. |image14| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython2.png\n.. |image15| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython3.png\n.. |image16| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython_adjust.png\n.. |image17| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Column_menu.png\n.. |image18| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/correlations_popup.png\n.. |image19| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/describe_popup.png\n.. |image20| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/histogram_popup.png\n.. |image21| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/instances_popup.png\n.. |image22| image:: http://img.youtube.com/vi/pOYl2M1clIw/0.jpg\n   :target: http://www.youtube.com/watch?v=pOYl2M1clIw\n.. |image23| image:: http://img.youtube.com/vi/8Il-2HHs2Mg/0.jpg\n   :target: http://www.youtube.com/watch?v=8Il-2HHs2Mg\n.. |image24| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ngrok_limit.png\n.. |image25| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/no_data.png\n.. |image26| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/login.png\n.. |image27| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/logout.png\n.. |image28| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/vertical_headers.png\n.. |image29| image:: http://img.youtube.com/vi/8mryVxpxjM4/0.jpg\n   :target: http://www.youtube.com/watch?v=8mryVxpxjM4\n.. |image30| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Browser1.png\n.. |image31| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Info_cell.png\n.. |image32| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Ribbon_menu.png\n.. |image33| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Info_menu_small.png\n.. |image34| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/header/sorts.PNG\n.. |image35| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/header/filters.PNG\n.. |image36| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/header/hidden.PNG\n.. |image37| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/gifs/resize_columns_w_drag.gif\n.. |image38| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/gifs/resize_columns_max_width.gif\n.. |image39| image:: http://img.youtube.com/vi/MY5w0m_4IAc/0.jpg\n   :target: http://www.youtube.com/watch?v=MY5w0m_4IAc\n.. |image40| image:: http://img.youtube.com/vi/3p9ltzdBaDQ/0.jpg\n   :target: http://www.youtube.com/watch?v=3p9ltzdBaDQ\n.. |image41| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/select_range1.png\n.. |image42| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/select_range2.png\n.. |image43| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/select_range3.png\n.. |image44| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/xarray_indexes.png\n.. |image45| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/xarray_dimensions.png\n.. |image46| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe.png\n.. |image47| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_date.png\n.. |image48| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_string.png\n.. |image49| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_int.png\n.. |image50| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_float.png\n.. |image51| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/outliers.png\n.. |image52| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/outlier_filter.png\n.. |image53| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Filter_apply.png\n.. |image54| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_filter.png\n.. |image55| image:: http://img.youtube.com/vi/G6wNS9-lG04/0.jpg\n   :target: http://www.youtube.com/watch?v=G6wNS9-lG04\n.. |image56| image:: http://img.youtube.com/vi/ignDS6OaGVQ/0.jpg\n   :target: http://www.youtube.com/watch?v=ignDS6OaGVQ\n.. |image57| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/original_data.png\n.. |image58| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/agg_col.png\n.. |image59| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/agg_col_data.png\n.. |image60| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/agg_func.png\n.. |image61| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/agg_func_data.png\n.. |image62| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/pivot.png\n.. |image63| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/pivot_data.png\n.. |image64| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/transpose.png\n.. |image65| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/transpose_data.png\n.. |image66| image:: http://img.youtube.com/vi/fYsxogXKZ2c/0.jpg\n   :target: http://www.youtube.com/watch?v=fYsxogXKZ2c\n.. |image67| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/duplicates/data.png\n.. |image68| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/duplicates/columns.png\n.. |image69| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/duplicates/columns_names.png\n.. |image70| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/duplicates/rows.png\n.. |image71| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/duplicates/show.png\n.. |image72| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/missingno/matrix.png\n.. |image73| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/missingno/bar.png\n.. |image74| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/missingno/heatmap.png\n.. |image75| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/missingno/dendrogram.png\n.. |image76| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/line.png\n.. |image77| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/line_pg.png\n.. |image78| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar.png\n.. |image79| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar_pg.png\n.. |image80| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/stacked.png\n.. |image81| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/stacked_pg.png\n.. |image82| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/pie.png\n.. |image83| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/wordcloud.png\n.. |image84| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/wordcloud_pg.png\n.. |image85| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/heatmap.png\n.. |image86| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/3d_scatter.png\n.. |image87| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/surface.png\n.. |image88| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/scattergeo.png\n.. |image89| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/choropleth.png\n.. |image90| image:: http://img.youtube.com/vi/asblF-rAACY/0.jpg\n   :target: http://www.youtube.com/watch?v=asblF-rAACY\n.. |image91| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/axis_toggle/default.PNG\n.. |image92| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/axis_toggle/single.PNG\n.. |image93| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/axis_toggle/multi.PNG\n.. |image94| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar_presort.png\n.. |image95| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar_postsort.png\n.. |image96| image:: http://img.youtube.com/vi/DseSmc3fZvc/0.jpg\n   :target: http://www.youtube.com/watch?v=DseSmc3fZvc\n.. |image97| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/network/data.png\n.. |image98| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/network/network_to_from.png\n.. |image99| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/network/network_expanded.png\n.. |image100| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/network/network_weight.png\n.. |image101| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/network/network_group.png\n.. |image102| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/network/network_shortest_path.png\n.. |image103| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/network/network_descendants.png\n.. |image104| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations.png\n.. |image105| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_pps.png\n.. |image106| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_ts.png\n.. |image107| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_scatter.png\n.. |image108| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_col1.png\n.. |image109| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_col2.png\n.. |image110| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_both.png\n.. |image111| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/rolling_corr_data.png\n.. |image112| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/rolling_corr.png\n.. |image113| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/rolling_corr_data.png\n.. |image114| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/pps.png\n.. |image115| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Heatmap.png\n.. |image116| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/highlight_dtypes.png\n.. |image117| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/highlight_missing.png\n.. |image118| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/highlight_outliers.png\n.. |image119| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/highlight_range_selections.png\n.. |image120| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/highlight_range_output.png\n.. |image121| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/highlight_range_selections.png\n.. |image122| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/low_variance.png\n.. |image123| image:: http://img.youtube.com/vi/6CkKgpv3d6I/0.jpg\n   :target: http://www.youtube.com/watch?v=6CkKgpv3d6I\n.. |image124| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/main.png\n.. |image125| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/histogram.png\n.. |image126| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/describe.png\n.. |image127| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/main.png\n.. |image128| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/corr_ts.png\n.. |image129| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/corr_scatter.png\n.. |image130| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/charts.png\n.. |image131| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/export_csv.png\n.. |image132| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/load_data.png\n.. |image133| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Instances.png\n.. |image134| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Instances_preview.png\n.. |image135| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/About-up-to-date.png\n.. |image136| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/About-out-of-date.png\n.. |image137| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/theme/light.png\n.. |image138| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/theme/dark.png\n.. |image139| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/chinese_dtale.png\n.. |image140| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Col_menu.png\n.. |image141| image:: http://img.youtube.com/vi/8zo5ZiI1Yzo/0.jpg\n   :target: http://www.youtube.com/watch?v=8zo5ZiI1Yzo\n.. |image142| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/filters/string.PNG\n.. |image143| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/filters/dates.PNG\n.. |image144| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/filters/numeric.PNG\n.. |image145| image:: http://img.youtube.com/vi/We4TH477rRs/0.jpg\n   :target: http://www.youtube.com/watch?v=We4TH477rRs\n.. |image146| image:: http://img.youtube.com/vi/ryZT2Lk_YaA/0.jpg\n   :target: http://www.youtube.com/watch?v=ryZT2Lk_YaA\n.. |image147| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/rename.png\n.. |image148| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/replacements_value.png\n.. |image149| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/replacements_spaces.png\n.. |image150| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/replacements_strings.png\n.. |image151| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/replacements_sklearn.png\n.. |image152| image:: http://img.youtube.com/vi/GiNFRtcpIt8/0.jpg\n   :target: http://www.youtube.com/watch?v=GiNFRtcpIt8\n.. |image153| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Formatting_apply.png\n.. |image154| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_formatting.png\n.. |image155| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Formatting_date_apply.png\n.. |image156| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_date_formatting.png\n.. |image157| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Formatting_string_apply.png\n.. |image158| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_string_formatting.png\n.. |image159| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/boxplot.png\n.. |image160| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/histogram.PNG\n.. |image161| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/value_counts.PNG\n.. |image162| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/word_value_counts.png\n.. |image163| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/category.PNG\n.. |image164| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/geolocation.PNG\n.. |image165| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/qq.png\n.. |image166| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/value_counts_ordinal.PNG\n\nChangelog\n---------\n\n2.1.2 (2022-3-15)\n~~~~~~~~~~~~~~~~~\n\n-  `#617 <https://github.com/man-group/dtale/issues/617>`__: file\n   loading on windows\n-  `#643 <https://github.com/man-group/dtale/issues/643>`__: correlation\n   grid dropdown display\n-  `#646 <https://github.com/man-group/dtale/issues/646>`__: initial\n   show/hide grid display\n\n.. _section-1:\n\n2.1.0 (2022-3-13)\n~~~~~~~~~~~~~~~~~\n\n-  `#617 <https://github.com/man-group/dtale/issues/617>`__: HTML\n   Exports of data grid\n-  Added option for JSONL line files in json-loader\n-  `#643 <https://github.com/man-group/dtale/issues/643>`__: updated how\n   selected columns get passed to correlation scatter charts\n-  `#642 <https://github.com/man-group/dtale/issues/642>`__: updates for\n   merge screen\n-  `#641 <https://github.com/man-group/dtale/issues/641>`__: fixed\n   histogram label precision\n-  `#614 <https://github.com/man-group/dtale/issues/614>`__: display\n   D-Tale by name\n-  `#612 <https://github.com/man-group/dtale/issues/612>`__: fixed bug\n   with replacing strings\n-  `#602 <https://github.com/man-group/dtale/issues/602>`__: update any\n   date columns to have naive timezone\n-  `#607 <https://github.com/man-group/dtale/issues/607>`__: display of\n   chinese characters in missingno plots\n-  `#606 <https://github.com/man-group/dtale/issues/606>`__: stringify\n   tuple column names\n\n.. _section-2:\n\n2.0.0 (2022-2-20)\n~~~~~~~~~~~~~~~~~\n\n-  Typescript conversion of frontend code\n\n.. _section-3:\n\n1.61.1 (2021-11-17)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#600 <https://github.com/man-group/dtale/issues/600>`__: persist\n   selected chart across columns in describe popup\n-  `#597 <https://github.com/man-group/dtale/issues/597>`__: fix for\n   aggregate function on “Summarize Data”\n\n.. _section-4:\n\n1.61.0 (2021-11-15)\n~~~~~~~~~~~~~~~~~~~\n\n-  replaced querystring package with URLSearchParams\n-  `#595 <https://github.com/man-group/dtale/issues/595>`__: probability\n   histograms\n-  `#589 <https://github.com/man-group/dtale/issues/589>`__: pareto\n   chart\n-  updates for babel ES2020 support\n\n.. _section-5:\n\n1.60.2 (2021-11-3)\n~~~~~~~~~~~~~~~~~~\n\n-  `#594 <https://github.com/man-group/dtale/issues/594>`__: fix for\n   editing cells while using redislite\n\n.. _section-6:\n\n1.60.1 (2021-10-31)\n~~~~~~~~~~~~~~~~~~~\n\n-  updates for “Time Series Analysis” with aggregation\n\n.. _section-7:\n\n1.60.0 (2021-10-31)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#591 <https://github.com/man-group/dtale/issues/591>`__: load\n   parquet from UI\n-  `#590 <https://github.com/man-group/dtale/issues/590>`__: parquet\n   export\n-  `#533 <https://github.com/man-group/dtale/issues/533>`__: Time Series\n   Analysis\n-  `#537 <https://github.com/man-group/dtale/issues/537>`__: moved\n   “Resample” to the “Dataframe Functions” popup]\n\n.. _section-8:\n\n1.59.1 (2021-10-15)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#583 <https://github.com/man-group/dtale/issues/583>`__: allow for\n   “vertical_headers” to be set from dtale.show\n\n.. _section-9:\n\n1.59.0 (2021-10-15)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#581 <https://github.com/man-group/dtale/issues/581>`__: Binder\n   proxy handling updates\n-  `#583 <https://github.com/man-group/dtale/issues/583>`__: vertical\n   column headers\n-  front-end package upgrades\n\n.. _section-10:\n\n1.58.3 (2021-10-4)\n~~~~~~~~~~~~~~~~~~\n\n-  updated dash-bio to an optional dependency\n\n.. _section-11:\n\n1.58.2 (2021-10-3)\n~~~~~~~~~~~~~~~~~~\n\n-  fix for ``background_mode`` in ``dtale.show``\n\n.. _section-12:\n\n1.58.1 (2021-10-2)\n~~~~~~~~~~~~~~~~~~\n\n-  re-pinned dash to 2.0.0\n\n.. _section-13:\n\n1.58.0 (2021-10-2)\n~~~~~~~~~~~~~~~~~~\n\n-  `#568 <https://github.com/man-group/dtale/issues/568>`__: range\n   highlight updates\n-  `#566 <https://github.com/man-group/dtale/issues/566>`__: clustergram\n   charts\n-  `#578 <https://github.com/man-group/dtale/issues/578>`__: dataset\n   correlations error\n-  `#576 <https://github.com/man-group/dtale/issues/576>`__:\n   dash_core_components and dash_html_component import updates\n-  `#579 <https://github.com/man-group/dtale/issues/579>`__: fix for\n   pandas.Series.between FutureWarning\n-  `#577 <https://github.com/man-group/dtale/issues/577>`__: specifying\n   backgrounds programmatically\n\n.. _section-14:\n\n1.57.0 (2021-9-22)\n~~~~~~~~~~~~~~~~~~\n\n-  `#565 <https://github.com/man-group/dtale/issues/565>`__: allow\n   “chart per group” display in scatter charts\n-  `#564 <https://github.com/man-group/dtale/issues/564>`__: geometric\n   mean aggregation in “Summarize Data”\n-  `#559 <https://github.com/man-group/dtale/issues/559>`__: lock\n   columns from config, highlight rows, move filters to custom filter,\n   nan display\n-  `#560 <https://github.com/man-group/dtale/issues/560>`__: Add “Gage\n   R&R” computation\n-  `#558 <https://github.com/man-group/dtale/issues/558>`__: added\n   “Filtered” toggle to “Variance Report”\n-  `#561 <https://github.com/man-group/dtale/issues/561>`__: Modify\n   behaviour for finding free port\n\n.. _section-15:\n\n1.56.0 (2021-8-31)\n~~~~~~~~~~~~~~~~~~\n\n-  `#557 <https://github.com/man-group/dtale/issues/557>`__: allow\n   filters to be applied to the “Describe” page\n-  `#555 <https://github.com/man-group/dtale/issues/555>`__\n\n   -  added option to specify default sort in config/show/CLI\n   -  predefined filter updates\n\n-  `#552 <https://github.com/man-group/dtale/issues/552>`__: added query\n   engine toggle\n-  `#553 <https://github.com/man-group/dtale/issues/553>`__: boolean\n   chart axis ticks\n-  `#554 <https://github.com/man-group/dtale/issues/554>`__: dash\n   callback input update\n\n.. _section-16:\n\n1.55.0 (2021-8-17)\n~~~~~~~~~~~~~~~~~~\n\n-  `#553 <https://github.com/man-group/dtale/issues/553>`__: charts with\n   boolean values as y or z axes\n-  `#552 <https://github.com/man-group/dtale/issues/552>`__: exceptions\n   with unsigned integers and NA values\n-  `#548 <https://github.com/man-group/dtale/issues/548>`__: updated\n   popups to redirects when in vscode\n-  fixed client-side bug with “rename” function\n\n.. _section-17:\n\n1.54.1 (2021-8-11)\n~~~~~~~~~~~~~~~~~~\n\n-  `#549 <https://github.com/man-group/dtale/issues/549>`__: fix for\n   grouping charts by multiple columns\n\n.. _section-18:\n\n1.54.0 (2021-8-6)\n~~~~~~~~~~~~~~~~~\n\n-  `#545 <https://github.com/man-group/dtale/issues/545>`__: added\n   “concatenate” & “replace” string column builders\n-  updated lodash loading to use tree-shaking\n-  `#544 <https://github.com/man-group/dtale/issues/544>`__: fixed issue\n   with loading missingno plots\n-  used plotly.js partial distribution to lower egg size\n\n.. _section-19:\n\n1.53.0 (2021-7-28)\n~~~~~~~~~~~~~~~~~~\n\n-  updated “Charts” page to handle dark-mode\n-  `#539 <https://github.com/man-group/dtale/issues/539>`__: “Substring”\n   & “Split By Character” column builders\n-  `#542 <https://github.com/man-group/dtale/issues/542>`__: fixed bug\n   with finding missings in categorical data\n-  `#543 <https://github.com/man-group/dtale/issues/543>`__: added\n   “group by” to cumulative sum builder\n-  Portuguese translation\n-  Fixes for long string tooltips\n\n.. _section-20:\n\n1.52.0 (2021-7-10)\n~~~~~~~~~~~~~~~~~~\n\n-  `#529 <https://github.com/man-group/dtale/issues/529>`__: resample\n   timeseries\n-  `#532 <https://github.com/man-group/dtale/issues/532>`__: shift and\n   expanding builders\n-  `#525 <https://github.com/man-group/dtale/issues/525>`__: bin range\n   on x-axis\n-  `#526 <https://github.com/man-group/dtale/issues/526>`__: targeted\n   histogram tooltip\n-  updated simpsons dataset to make use of image display\n\n.. _section-21:\n\n1.51.0 (2021-7-5)\n~~~~~~~~~~~~~~~~~\n\n-  `#531 <https://github.com/man-group/dtale/issues/531>`__:\n   re-organizing column builder buttons\n-  `#530 <https://github.com/man-group/dtale/issues/530>`__: typo in\n   rolling code snippet\n-  `#528 <https://github.com/man-group/dtale/issues/528>`__: feature\n   analysis\n-  `#534 <https://github.com/man-group/dtale/issues/534>`__: pinned\n   missingno less than or equal to 0.4.2\n-  `#523 <https://github.com/man-group/dtale/issues/523>`__: upgraded to\n   plotly 5\n-  Row height resize functionality\n-  `#522 <https://github.com/man-group/dtale/issues/522>`__: sorting\n   target values in histogram tooltip\n\n.. _section-22:\n\n1.50.1 (2021-6-24)\n~~~~~~~~~~~~~~~~~~\n\n-  `#520 <https://github.com/man-group/dtale/issues/520>`__: additional\n   code export update\n\n.. _section-23:\n\n1.50.0 (2021-6-23)\n~~~~~~~~~~~~~~~~~~\n\n-  `#515 <https://github.com/man-group/dtale/issues/515>`__: adding\n   dataframe.index() to chart axis\n-  `#520 <https://github.com/man-group/dtale/issues/520>`__: wrong\n   indent in chart code export\n-  `#519 <https://github.com/man-group/dtale/issues/519>`__: display raw\n   HTML\n-  `#518 <https://github.com/man-group/dtale/issues/518>`__: cumulative\n   sum builder\n-  `#517 <https://github.com/man-group/dtale/issues/517>`__: keep less\n   correlated columns\n-  `#514 <https://github.com/man-group/dtale/issues/514>`__: targeted\n   histogram fixes\n-  `#493 <https://github.com/man-group/dtale/issues/493>`__:\n   Correlations grid sorting\n-  `#505 <https://github.com/man-group/dtale/issues/505>`__: Filtering\n   enhancements\n-  `#484 <https://github.com/man-group/dtale/issues/484>`__: renamed\n   “Percentage Count” to “Count (Percentage)”\n-  `#503 <https://github.com/man-group/dtale/issues/503>`__: add\n   separate option for “Clean Column” to main menu\n\n.. _section-24:\n\n1.49.0 (2021-6-9)\n~~~~~~~~~~~~~~~~~\n\n-  bump css-what from 5.0.0 to 5.0.1\n-  added the ability to toggle the display of all columns when heatmap\n   is turned on\n-  `#491 <https://github.com/man-group/dtale/issues/491>`__: overlapping\n   histogram chart\n-  bump ws from 7.4.5 to 7.4.6\n-  Updates\n\n   -  `#509 <https://github.com/man-group/dtale/issues/509>`__:\n      resizable side panel width\n   -  `#495 <https://github.com/man-group/dtale/issues/495>`__: CSV\n      loading dialog\n   -  height of “Exponential Smoothing” in column builders\n   -  code snippet fixes\n   -  cleaner updates\n\n.. _section-25:\n\n1.48.0 (2021-5-28)\n~~~~~~~~~~~~~~~~~~\n\n-  `#504 <https://github.com/man-group/dtale/issues/504>`__: fix for\n   toggling between unique row & word values\n-  `#502 <https://github.com/man-group/dtale/issues/502>`__: updated\n   “cleaning” column builder to allow for inplace updates\n-  `#501 <https://github.com/man-group/dtale/issues/501>`__: updates to\n   describe window labels\n-  `#500 <https://github.com/man-group/dtale/issues/500>`__: cleaning\n   “Remove Numbers” code snippet fix\n-  `#488 <https://github.com/man-group/dtale/issues/488>`__: string\n   encoding for correlations\n-  `#484 <https://github.com/man-group/dtale/issues/484>`__: fixed for\n   percentage count chart aggregation\n-  Correlation Scatter Updates:\n\n   -  `#486 <https://github.com/man-group/dtale/issues/486>`__: make 15K\n      point limitation correlations scatter an editable setting\n   -  `#487 <https://github.com/man-group/dtale/issues/487>`__: fix for\n      non-unique column exception in correlation scatter\n\n-  `#480 <https://github.com/man-group/dtale/issues/480>`__: flexible\n   branding\n-  `#485 <https://github.com/man-group/dtale/issues/485>`__: Adjustable\n   height on Correlation grid\n\n.. _section-26:\n\n1.47.0 (2021-5-21)\n~~~~~~~~~~~~~~~~~~\n\n-  `#477 <https://github.com/man-group/dtale/issues/477>`__: Excel-style\n   cell editing at top of screen\n\n   -  UI input for “Maximum Column Width”\n\n-  JS package upgrades\n-  refactored how sphinx documentation is built\n\n.. _section-27:\n\n1.46.0 (2021-5-11)\n~~~~~~~~~~~~~~~~~~\n\n-  `#475 <https://github.com/man-group/dtale/issues/475>`__: fixes for\n   DtaleRedis issues\n-  `#140 <https://github.com/man-group/dtale/issues/140>`__: additional\n   string column filters\n-  refactored draggable column resizing to be more performant\n-  added dependency on nbformat\n-  updated Sphinx documentation building to only run on master builds of\n   python3.9\n\n   -  Also pinned jinja2 to 2.11.3 when building\n\n.. _section-28:\n\n1.45.0 (2021-5-5)\n~~~~~~~~~~~~~~~~~\n\n-  `#472 <https://github.com/man-group/dtale/issues/472>`__: maximum\n   column width\n-  `#471 <https://github.com/man-group/dtale/issues/471>`__: predefined\n   filters\n\n   -  `#473 <https://github.com/man-group/dtale/issues/473>`__: fixed\n      column filters\n   -  refactored settings (sortInfo, columnFilters, outlierFilters,\n      predefinedFilters) to be stored in redux\n   -  fixed issues with pinned main menu\n\n.. _section-29:\n\n1.44.1 (2021-4-27)\n~~~~~~~~~~~~~~~~~~\n\n-  `#470 <https://github.com/man-group/dtale/issues/470>`__: editing\n   cells for column names with special characters\n\n.. _section-30:\n\n1.44.0 (2021-4-26)\n~~~~~~~~~~~~~~~~~~\n\n-  `#465 <https://github.com/man-group/dtale/issues/465>`__: optional\n   authentication\n-  `#467 <https://github.com/man-group/dtale/issues/467>`__: fixed\n   column menu issues when name has special characters\n-  `#466 <https://github.com/man-group/dtale/issues/466>`__: convert\n   complex data to strings\n-  added “head” & “tail” load types for chart data sampling\n\n.. _section-31:\n\n1.43.0 (2021-4-18)\n~~~~~~~~~~~~~~~~~~\n\n-  `#463 <https://github.com/man-group/dtale/issues/463>`__: skew &\n   kurtosis on filtered data\n-  Moved Correlations & PPS to side panel\n-  Added “Show/Hide Columns” side-panel\n-  `#462 <https://github.com/man-group/dtale/issues/462>`__: Graphs slow\n   with big data\n\n.. _section-32:\n\n1.42.1 (2021-4-12)\n~~~~~~~~~~~~~~~~~~\n\n-  added ESC button handler for closing the side panel\n\n.. _section-33:\n\n1.42.0 (2021-4-11)\n~~~~~~~~~~~~~~~~~~\n\n-  Added missingno chart display\n-  added new side panel for viewing describe data\n\n   -  updated how requirements files are loaded in setup.py\n   -  added cleanup function to instance object\n   -  added animation for display of hidden/filter/sort info row\n\n-  `#306 <https://github.com/man-group/dtale/issues/306>`__: ribbon menu\n\n.. _section-34:\n\n1.41.1 (2021-3-30)\n~~~~~~~~~~~~~~~~~~\n\n-  `#458 <https://github.com/man-group/dtale/issues/458>`__: fix for\n   killing D-Tale sessions in jupyter_server_proxy\n-  `#378 <https://github.com/man-group/dtale/issues/378>`__: add\n   cleaning functions to chart inputs\n\n.. _section-35:\n\n1.41.0 (2021-3-26)\n~~~~~~~~~~~~~~~~~~\n\n-  `#390 <https://github.com/man-group/dtale/issues/390>`__: funnel\n   charts\n-  `#255 <https://github.com/man-group/dtale/issues/255>`__: extended\n   chart aggregations\n\n.. _section-36:\n\n1.40.2 (2021-3-21)\n~~~~~~~~~~~~~~~~~~\n\n-  `#454 <https://github.com/man-group/dtale/issues/454>`__: fixed issue\n   with parenthesis & percent symbols in column names\n\n.. _section-37:\n\n1.40.1 (2021-3-16)\n~~~~~~~~~~~~~~~~~~\n\n-  hotfix for chart code exports of category column analysis\n\n.. _section-38:\n\n1.40.0 (2021-3-16)\n~~~~~~~~~~~~~~~~~~\n\n-  moved “Open In New Tab” button\n-  `#135 <https://github.com/man-group/dtale/issues/135>`__: refactored\n   column analysis code and updated code exports to include plotly\n   charts\n\n.. _section-39:\n\n1.39.0 (2021-3-14)\n~~~~~~~~~~~~~~~~~~\n\n-  resizable columns\n-  updated how click loader options are found\n-  Added loader for r datasets (``*.rda`` files)\n-  updating the language menu option to list options dynamically\n\n.. _section-40:\n\n1.38.0 (2021-3-10)\n~~~~~~~~~~~~~~~~~~\n\n-  `#452 <https://github.com/man-group/dtale/issues/452>`__: handling of\n   column names with periods & spaces as well as long names\n-  updated styling of windows to match that of Charts\n-  `#448 <https://github.com/man-group/dtale/issues/448>`__: set default\n   value of “ignore_duplicate” to True\n-  `#442 <https://github.com/man-group/dtale/issues/442>`__: Dash\n   Updates\n\n   -  Split charts by y-axis values if there are multiple\n   -  Saving charts off and building new ones\n   -  Toggling which piece of data you’re viewing\n   -  Toggling language nav menu\n\n-  Instances popup changes\n\n   -  updated preview to use DataPreview\n   -  updated display of “memory usage” to numeral.js\n\n.. _section-41:\n\n1.37.1 (2021-3-6)\n~~~~~~~~~~~~~~~~~\n\n-  Updated MANIFEST.in to include requirements.txt\n\n.. _section-42:\n\n1.37.0 (2021-3-5)\n~~~~~~~~~~~~~~~~~\n\n-  `#445 <https://github.com/man-group/dtale/issues/445>`__: updated URL\n   paths to handle when D-Tale is running with jupyter server proxy\n-  `#315 <https://github.com/man-group/dtale/issues/315>`__:\n   Internationalization (supports english & chinese currently)\n-  `#441 <https://github.com/man-group/dtale/pull/441>`__: Add option to\n   ‘pin’ the menu to the screen as a fixed side panel\n-  `#434 <https://github.com/man-group/dtale/issues/434>`__\n\n   -  updated scatter plot date header to be generated server-side\n   -  updated scatter plot generation in correlations to use date index\n      rather than date value for filtering\n\n-  update setup.py to load dependencies from requirements.txt\n-  `#437 <https://github.com/man-group/dtale/pull/437>`__: optional\n   memory usage optimization and show mem usage\n\n.. _section-43:\n\n1.36.0 (2021-2-18)\n~~~~~~~~~~~~~~~~~~\n\n-  `#428 <https://github.com/man-group/dtale/pull/428>`__: Turn\n   global_state into interfaces\n-  `#434 <https://github.com/man-group/dtale/issues/434>`__: Additional\n   PPS formatting\n-  `#433 <https://github.com/man-group/dtale/issues/433>`__: fixed\n   exception message display in merge UI\n-  `#432 <https://github.com/man-group/dtale/issues/432>`__: updated\n   calls to “get_instance” in merge code snippets\n-  `#431 <https://github.com/man-group/dtale/issues/431>`__: fixed\n   stacking code example\n-  `#430 <https://github.com/man-group/dtale/issues/430>`__: replace\n   empty strings with nans when converting dates to timestamp floats\n\n.. _section-44:\n\n1.35.0 (2021-2-14)\n~~~~~~~~~~~~~~~~~~\n\n-  `#261 <https://github.com/man-group/dtale/issues/261>`__: Merging &\n   Stacking UI\n\n.. _section-45:\n\n1.34.0 (2021-2-7)\n~~~~~~~~~~~~~~~~~\n\n-  `#423 <https://github.com/man-group/dtale/issues/423>`__: y-axis\n   scale toggle\n-  `#422 <https://github.com/man-group/dtale/issues/422>`__: sheet\n   selection on excel uploads\n-  `#421 <https://github.com/man-group/dtale/issues/421>`__:\n   replacements not replacing zeroes\n\n.. _section-46:\n\n1.33.1 (2021-2-1)\n~~~~~~~~~~~~~~~~~\n\n-  `#420 <https://github.com/man-group/dtale/issues/420>`__: Added\n   python2.7 support back\n-  `#416 <https://github.com/man-group/dtale/issues/416>`__: aggregating\n   charts by “first” or “last”\n-  `#415 <https://github.com/man-group/dtale/issues/415>`__: fix display\n   of heatmap option on main menu when column heatap on\n\n.. _section-47:\n\n1.33.0 (2021-1-31)\n~~~~~~~~~~~~~~~~~~\n\n-  Excel Uploads\n-  Removed python2.7 support from code\n-  CI Updates:\n\n   -  updated JS workflow to use latest node image\n   -  dropped support for python 2.7 and added support for python 3.9\n\n-  Jest test refactoring\n-  `#415 <https://github.com/man-group/dtale/issues/415>`__: single\n   column heatmap\n-  `#414 <https://github.com/man-group/dtale/issues/414>`__: exporting\n   charts using “top_bars”\n-  `#413 <https://github.com/man-group/dtale/issues/413>`__: Q-Q Plot\n-  `#411 <https://github.com/man-group/dtale/issues/411>`__: updates for\n   column analysis warnings\n-  `#412 <https://github.com/man-group/dtale/issues/412>`__: histogram\n   for date columns\n-  `#404 <https://github.com/man-group/dtale/issues/404>`__: fixes for\n   group input display on floats and data frequencies\n\n.. _section-48:\n\n1.32.1 (2021-1-25)\n~~~~~~~~~~~~~~~~~~\n\n-  `#408 <https://github.com/man-group/dtale/issues/408>`__:\n   modifications to exponential smoothing column builder UI\n-  `#405 <https://github.com/man-group/dtale/issues/405>`__: removed\n   cleaners from non-string columns)\n-  `#404 <https://github.com/man-group/dtale/issues/404>`__: fixed bug\n   with missing group selection dropdown on strings)\n-  `#406 <https://github.com/man-group/dtale/issues/406>`__: handling\n   for duplicate bins\n\n.. _section-49:\n\n1.32.0 (2021-1-24)\n~~~~~~~~~~~~~~~~~~\n\n-  `#396 <https://github.com/man-group/dtale/issues/396>`__: added\n   kurtosis to date column descriptions and fixed issue with sequential\n   diffs hanging around for previous columns\n-  `#397 <https://github.com/man-group/dtale/issues/397>`__: group type\n   & bin type (frequency/width) options for charts\n-  Updated pandas query building to use backticks for extreme column\n   names\n-  Node tooltips and URL history building for Network Viewer\n-  `#399 <https://github.com/man-group/dtale/issues/399>`__: better\n   titles for groups in charts\n-  `#393 <https://github.com/man-group/dtale/issues/393>`__: rolling &\n   exponential smoothing column builders\n-  `#401 <https://github.com/man-group/dtale/issues/401>`__: option to\n   show top values in bar charts\n\n.. _section-50:\n\n1.31.0 (2021-1-16)\n~~~~~~~~~~~~~~~~~~\n\n-  `#387 <https://github.com/man-group/dtale/issues/387>`__: calculate\n   skew on date columns converted to millisecond integers\n-  `#386 <https://github.com/man-group/dtale/issues/386>`__: bugfixes\n   with “Rows w/ numeric” & “Rows w/ hidden”\n-  `#389 <https://github.com/man-group/dtale/issues/389>`__: added more\n   precision to KDE values\n-  update Network Viewer to allow for URL parameter passing of to, from,\n   group & weight\n-  `#343 <https://github.com/man-group/dtale/issues/343>`__: buttons to\n   load sequential diffs for different sorts\n-  `#376 <https://github.com/man-group/dtale/issues/376>`__: added bins\n   option to charts for float column groupings\n-  `#345 <https://github.com/man-group/dtale/issues/345>`__: geolocation\n   analysis\n-  `#370 <https://github.com/man-group/dtale/issues/370>`__: toggle to\n   turn off auto-loading of charts\n-  `#330 <https://github.com/man-group/dtale/issues/330>`__: data slope\n   column builder\n-  additional documentation\n\n.. _section-51:\n\n1.30.0 (2021-1-3)\n~~~~~~~~~~~~~~~~~\n\n-  fixed dependency issues with 27-3 build and pandas 1.2.0 test\n   failures\n-  `#379 <https://github.com/man-group/dtale/issues/379>`__: issue with\n   skew description\n-  `#346 <https://github.com/man-group/dtale/issues/346>`__: updated\n   mapbox description\n-  `#381 <https://github.com/man-group/dtale/issues/381>`__: Network\n   Analysis sub-page\n-  `#361 <https://github.com/man-group/dtale/issues/361>`__: Network\n   Display\n-  fixed styling of Dash modals\n\n.. _section-52:\n\n1.29.1 (2020-12-24)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#228 <https://github.com/man-group/dtale/issues/228>`__: additional\n   documentation on how to run in docker\n-  `#344 <https://github.com/man-group/dtale/issues/344>`__: Updates to\n   sorting of unique values as well as display of word value count raw\n   values\n-  `#374 <https://github.com/man-group/dtale/issues/374>`__: fixed issue\n   displaying “NaN” string values in chart group options\n-  `#373 <https://github.com/man-group/dtale/issues/373>`__: only use\n   group values in mapbox if mapbox group column(s) has been specified\n-  `#367 <https://github.com/man-group/dtale/issues/367>`__: rows with\n   hidden characters\n-  `#372 <https://github.com/man-group/dtale/issues/372>`__: updated\n   labels for First/Last aggregations and added “Remove Duplicates”\n   option\n-  `#368 <https://github.com/man-group/dtale/issues/368>`__: updated “No\n   Aggregation” to be default aggregationfor charts\n-  `#369 <https://github.com/man-group/dtale/issues/369>`__: x-axis\n   count wordclouds\n-  `#366 <https://github.com/man-group/dtale/issues/366>`__: additional\n   hyphen added to “Replace Hyphens w/ Space” cleaner\n-  `#365 <https://github.com/man-group/dtale/issues/365>`__: fixed\n   display issues with KDE\n\n.. _section-53:\n\n1.29.0 (2020-12-22)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#363 <https://github.com/man-group/dtale/issues/363>`__: show/hide\n   columns on load\n-  `#348 <https://github.com/man-group/dtale/issues/348>`__: sub-date\n   map animation fix\n-  `#347 <https://github.com/man-group/dtale/issues/347>`__: display\n   items loaded in “Load” slider\n-  `#349 <https://github.com/man-group/dtale/issues/349>`__: additional\n   duplicates handling in chart builders\n-  node-notifier depdabot alert\n-  `#351 <https://github.com/man-group/dtale/issues/351>`__: added KDE\n   to histograms in column analysis\n-  package upgrades\n-  `#350 <https://github.com/man-group/dtale/issues/350>`__: x-axis\n   column selection no longer required for charts\n\n   -  if there is no selection then the default index of (1, 2, …, N)\n      will be used in its place\n\n-  `#356 <https://github.com/man-group/dtale/issues/356>`__: “replace\n   hyphens” cleaner and cleaners added to “Value Counts” analysis\n-  `#358 <https://github.com/man-group/dtale/issues/358>`__: addition\n   skew/kurtosis display\n-  `#357 <https://github.com/man-group/dtale/issues/357>`__: cleaner for\n   hidden characters\n-  `#359 <https://github.com/man-group/dtale/issues/358>`__:\n   repositioned skew/kurt in describe\n-  `#359 <https://github.com/man-group/dtale/issues/359>`__: moved\n   “Variance Report” option up in column menu\n-  `#360 <https://github.com/man-group/dtale/issues/360>`__: updates to\n   string describe labels\n-  fixed issues with draggable/resizable modals\n\n.. _section-54:\n\n1.28.1 (2020-12-16)\n~~~~~~~~~~~~~~~~~~~\n\n-  updated modals to be resizable (re-resizable)\n\n.. _section-55:\n\n1.28.0 (2020-12-14)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#354 <https://github.com/man-group/dtale/issues/354>`__: fix for\n   building data ids greater than 10\n-  `#343 <https://github.com/man-group/dtale/issues/343>`__: remove nan\n   & nat values from sequential diff analysis\n-  `#342 <https://github.com/man-group/dtale/issues/342>`__: column\n   cleaner descriptions\n-  `#340 <https://github.com/man-group/dtale/issues/340>`__: add column\n   cleaners to “Word Value Counts” analysis chart\n-  `#341 <https://github.com/man-group/dtale/issues/341>`__: NLTK\n   stopword cleaner updates\n-  `#338 <https://github.com/man-group/dtale/issues/338>`__: removing\n   nan values from string metrics\n-  `#334 <https://github.com/man-group/dtale/issues/334>`__:\n   skew/kurtosis summary\n-  Updated modals to be movable (react-draggable)\n-  build(deps): bump ini from 1.3.5 to 1.3.7\n-  Notify iframe parent of updates\n\n.. _section-56:\n\n1.27.0 (2020-12-9)\n~~~~~~~~~~~~~~~~~~\n\n-  fixed bug with bar chart animations\n-  `#335 <https://github.com/man-group/dtale/issues/336>`__: addition\n   string metrics for Describe popup\n-  `#336 <https://github.com/man-group/dtale/issues/336>`__: sqlite\n   loader\n-  `#333 <https://github.com/man-group/dtale/issues/333>`__: sequential\n   diffs in describe popup\n-  `#332 <https://github.com/man-group/dtale/issues/332>`__: adding\n   “word counts” to Describe popup]\n-  `#329 <https://github.com/man-group/dtale/issues/329>`__: diff()\n   column builder\n-  added highlight.js & upgraded react-syntax-highlighter\n\n.. _section-57:\n\n1.26.0 (2020-12-5)\n~~~~~~~~~~~~~~~~~~\n\n-  `#325 <https://github.com/man-group/dtale/issues/325>`__: Plotly\n   export chart colors\n-  fixed highlight.js dependabot warning\n-  `#326 <https://github.com/man-group/dtale/issues/326>`__: trendline\n   with datetime data\n-  `#327 <https://github.com/man-group/dtale/issues/327>`__: fixed\n   issues with cleaner deselection\n-  `#273 <https://github.com/man-group/dtale/issues/273>`__: Predictive\n   Power Score\n\n.. _section-58:\n\n1.25.0 (2020-11-30)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#323 <https://github.com/man-group/dtale/issues/323>`__: precision\n   setting for all float columns\n-  `#265 <https://github.com/man-group/dtale/issues/265>`__: column\n   cleaners\n-  `#322 <https://github.com/man-group/dtale/issues/322>`__: colorscales\n   not being included in chart exports and colorscales added to surface\n   charts\n-  `#148 <https://github.com/man-group/dtale/issues/148>`__: random\n   sampling in charts\n\n.. _section-59:\n\n1.24.0 (2020-11-23)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#295 <https://github.com/man-group/dtale/issues/295>`__: check for\n   swifter when executing apply functions\n-  Reworked the display of the “Instances” popup\n-  fixed issue with serving static assets when using “app_root”\n\n.. _section-60:\n\n1.23.0 (2020-11-21)\n~~~~~~~~~~~~~~~~~~~\n\n-  Added better handling for ``open_browser``\n-  `#319 <https://github.com/man-group/dtale/issues/319>`__: fix for\n   loading xarray dimensions\n-  Added support for embedding D-Tale within Streamlit\n\n.. _section-61:\n\n1.22.1 (2020-11-15)\n~~~~~~~~~~~~~~~~~~~\n\n-  additional updates to how int/float hex conversions work\n\n.. _section-62:\n\n1.22.0 (2020-11-14)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#317 <https://github.com/man-group/dtale/issues/317>`__: convert\n   int/float to hexadecimal\n-  Copy Columns/Rows to clipboard using Shift+Click & Ctrl+Click\n-  Added “items” function to global state mechanisms\n-  `#296 <https://github.com/man-group/dtale/issues/296>`__: heatmap\n   doesn’t respect current filters\n\n.. _section-63:\n\n1.21.1 (2020-11-8)\n~~~~~~~~~~~~~~~~~~\n\n-  Additional fixes for #313 & #302\n\n   -  Handling for partial ``.ini`` files\n   -  Handling for dictionary inputs w/ non-iterable values\n\n.. _section-64:\n\n1.21.0 (2020-11-6)\n~~~~~~~~~~~~~~~~~~\n\n-  `#313 <https://github.com/man-group/dtale/issues/313>`__: support for\n   numpy.array, lists & dictionaries\n-  `#302 <https://github.com/man-group/dtale/issues/302>`__:\n   configuration file for default options\n-  Removal of legacy charting code & updating flask route to plotly dash\n   charts from ``/charts`` to ``/dtale/charts``\n-  Update to how routes are overriden so it will work with gunicorn\n-  Documentation\n\n   -  running within gunicorn\n   -  embedding in another Flask or Django app\n   -  configuration settings\n\n.. _section-65:\n\n1.20.0 (2020-11-1)\n~~~~~~~~~~~~~~~~~~\n\n-  `#311 <https://github.com/man-group/dtale/issues/311>`__: png chart\n   exports and fix for trandlines in exports\n-  Added the option to switch grid to “Dark Mode”\n\n.. _section-66:\n\n1.19.2 (2020-10-25)\n~~~~~~~~~~~~~~~~~~~\n\n-  Documentation updates & better formatting of sample dataset buttons\n-  bugfixes for loading empty dtale in a notebook and chart display in\n   embedded app demo\n\n.. _section-67:\n\n1.19.1 (2020-10-24)\n~~~~~~~~~~~~~~~~~~~\n\n-  Load CSV/TSV/JSON from the web as well as some sample datasets\n-  `#310 <https://github.com/man-group/dtale/issues/310>`__: handling\n   for nan in ordinal & label encoders\n\n.. _section-68:\n\n1.19.0 (2020-10-23)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#123 <https://github.com/man-group/dtale/issues/123>`__: selecting a\n   range of cells to paste into excel\n-  Documentation on embedding D-Tale in another Flask app\n-  bugfix for altering single y-axis ranges when x-axis is non-numeric\n-  `#272 <https://github.com/man-group/dtale/issues/272>`__: encoders\n   for categorical columns\n\n.. _section-69:\n\n1.18.2 (2020-10-17)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#305 <https://github.com/man-group/dtale/issues/305>`__: Show\n   Duplicates column(s) label\n-  `#304 <https://github.com/man-group/dtale/issues/304>`__: Link to\n   Custom Filter from Column Menu\n-  `#301 <https://github.com/man-group/dtale/issues/301>`__: Normalized\n   Similarity\n-  `#289 <https://github.com/man-group/dtale/issues/289>`__: Show\n   Duplicates query bug & scrollable duplicate groups\n\n.. _section-70:\n\n1.18.1 (2020-10-16)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#299 <https://github.com/man-group/dtale/issues/299>`__: Value\n   counts not matching top unique values in Column Analysis\n-  `#298 <https://github.com/man-group/dtale/issues/298>`__: Standardize\n   column builder bug\n-  `#297 <https://github.com/man-group/dtale/issues/297>`__: Similarity\n   bugs\n-  `#290 <https://github.com/man-group/dtale/issues/290>`__: show top 5\n   values with highest frequency in describe details\n-  `#288 <https://github.com/man-group/dtale/issues/288>`__: Add\n   Duplicates popup to Column Menu\n\n.. _section-71:\n\n1.18.0 (2020-10-15)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#282 <https://github.com/man-group/dtale/issues/282>`__: additional\n   exception handling for overriding routes\n-  `#271 <https://github.com/man-group/dtale/issues/271>`__:\n   standardized column builder\n-  `#282 <https://github.com/man-group/dtale/issues/282>`__: better\n   support for using D-Tale within another Flask application\n-  `#270 <https://github.com/man-group/dtale/issues/270>`__: filter\n   outliers from column menu\n-  allow users to start D-Tale without loading data\n-  `#264 <https://github.com/man-group/dtale/issues/264>`__: similarity\n   column builder\n-  `#286 <https://github.com/man-group/dtale/issues/286>`__: column\n   description lag after type conversion\n\n.. _section-72:\n\n1.17.0 (2020-10-10)\n~~~~~~~~~~~~~~~~~~~\n\n-  `#269 <https://github.com/man-group/dtale/issues/269>`__: column\n   based range highlighting\n-  `#268 <https://github.com/man-group/dtale/issues/268>`__: better\n   button labels for inplace vs. new column\n-  `#283 <https://github.com/man-group/dtale/issues/283>`__:\n   triple-quote formatting around queries in code exports\n-  `#266 <https://github.com/man-group/dtale/issues/266>`__: string\n   concatenation string builder\n-  `#267 <https://github.com/man-group/dtale/issues/267>`__: Column\n   discretion UI\n-  Fix: Pandas throws error when converting numeric column names to\n   string.\n\n.. _section-73:\n\n1.16.0 (2020-10-4)\n~~~~~~~~~~~~~~~~~~\n\n-  `#263 <https://github.com/man-group/dtale/issues/263>`__: word value\n   counts\n-  `#262 <https://github.com/man-group/dtale/issues/262>`__: duplicate\n   values\n-  `#274 <https://github.com/man-group/dtale/issues/274>`__: URL\n   linkouts\n\n.. _section-74:\n\n1.15.2 (2020-9-4)\n~~~~~~~~~~~~~~~~~\n\n-  hotfix to move HIDE_SHUTDOWN & GITHUB_FORK to ``dtale`` module\n\n.. _section-75:\n\n1.15.1 (2020-9-3)\n~~~~~~~~~~~~~~~~~\n\n-  hotfix to expose HIDE_SHUTDOWN & GITHUB_FORK from\n   ``dtale.global_state``\n\n.. _section-76:\n\n1.15.0 (2020-9-3)\n~~~~~~~~~~~~~~~~~\n\n-  `#248 <https://github.com/man-group/dtale/issues/248>`__: Added\n   ‘minPeriods’ & the rolling means (multi-value per date) dateframes\n   for Correlations popup\n-  `#254 <https://github.com/man-group/dtale/issues/254>`__: Options to\n   hide shutdown and turn off cell editing\n-  `#244 <https://github.com/man-group/dtale/issues/244>`__: Treemap\n   charts\n\n.. _section-77:\n\n1.14.1 (2020-8-20)\n~~~~~~~~~~~~~~~~~~\n\n-  `#252 <https://github.com/man-group/dtale/issues/252>`__: Describe\n   shows proper values, but repeats ‘Total Rows:’ heading instead of\n   proper headings\n\n.. _section-78:\n\n1.14.0 (2020-8-19)\n~~~~~~~~~~~~~~~~~~\n\n-  `#243 <https://github.com/man-group/dtale/issues/243>`__: column menu\n   descriptions\n-  `#247 <https://github.com/man-group/dtale/issues/247>`__: code export\n   compilation error fixes\n-  `#242 <https://github.com/man-group/dtale/issues/242>`__: type\n   conversion column menu option & auto-column names on “Build Column”\n-  `#235 <https://github.com/man-group/dtale/issues/235>`__: nan\n   formatting\n\n.. _section-79:\n\n1.13.0 (2020-8-13)\n~~~~~~~~~~~~~~~~~~\n\n-  `#231 <https://github.com/man-group/dtale/issues/231>`__: “Lock Zoom”\n   button on 3D Scatter & Surface charts for locking camera on\n   animations\n-  global & instance-level flag to turn off cell editing\n-  added the ability to upload CSVs\n-  upgraded prismjs\n-  `#234 <https://github.com/man-group/dtale/issues/234>`__: update to\n   line animations so that you can lock axes and highlight last point\n-  `#233 <https://github.com/man-group/dtale/issues/233>`__: add\n   candlestick charts\n-  `#241 <https://github.com/man-group/dtale/issues/241>`__: total\n   counts vs. count (non-nan) in describe\n-  `#240 <https://github.com/man-group/dtale/issues/240>`__: force\n   convert to float\n-  `#239 <https://github.com/man-group/dtale/issues/239>`__: converting\n   mixed columns\n-  `#237 <https://github.com/man-group/dtale/issues/237>`__: updated\n   “Pivot” reshaper to always using pivot_table\n-  `#236 <https://github.com/man-group/dtale/issues/236>`__: “inplace” &\n   “drop_index” parameters for memory optimization and parquet loader\n-  `#229 <https://github.com/man-group/dtale/issues/229>`__: added\n   histogram sample chart to bins column builder\n\n.. _section-80:\n\n1.12.1 (2020-8-5)\n~~~~~~~~~~~~~~~~~\n\n-  better axis display on heatmaps\n-  handling for column filter data on “mixed” type columns\n-  “title” parameter added for offline charts\n-  heatmap drilldowns on animations\n-  bugfix for refreshing custom geojson charts\n\n.. _section-81:\n\n1.12.0 (2020-8-1)\n~~~~~~~~~~~~~~~~~\n\n-  added better notification for when users view Category breakdowns in\n   “Column Analysis” & “Describe”\n-  fixed code snippets in “Numeric” column builder when no operation is\n   selected\n-  fixed code exports for transform, winsorixe & z-score normalize\n   column builders\n-  added colorscale option to 3D Scatter charts\n-  added “Animate By” to Heatmaps\n-  initial chart drilldown functionality (histogram, bar)\n-  fixed bug with code exports on transform, winsorize & z-score\n   normalize column builders\n-  updated labeling & tooltips on histogram charts\n-  npm package upgrades\n\n.. _section-82:\n\n1.11.0 (2020-7-23)\n~~~~~~~~~~~~~~~~~~\n\n-  updated column filters so that columns with more than 500 unique\n   values are loaded asynchronously as with AsyncSelect\n-  added code export to Variance report\n-  added z-score normalize column builder\n\n.. _section-83:\n\n1.10.0 (2020-7-21)\n~~~~~~~~~~~~~~~~~~\n\n-  `#223 <https://github.com/man-group/dtale/issues/223>`__:\n   six.collections.abc import errors in Google Colab\n-  `#135 <https://github.com/man-group/dtale/issues/135>`__: added\n   plotly chart construction to code exports\n-  `#192 <https://github.com/man-group/dtale/issues/192>`__: Variance\n   Report & flag toggle\n-  npm package upgrades\n-  added “winsorize” column builder\n\n.. _section-84:\n\n1.9.2 (2020-7-12)\n~~~~~~~~~~~~~~~~~\n\n-  `#127 <https://github.com/man-group/dtale/issues/127>`__: add “Column\n   Analysis” to “Describe”\n-  `#85 <https://github.com/man-group/dtale/issues/85>`__: hotkeys\n\n.. _section-85:\n\n1.9.1 (2020-7-3)\n~~~~~~~~~~~~~~~~\n\n-  `#213 <https://github.com/man-group/dtale/issues/213>`__: Support for\n   koalas dataframes\n-  `#214 <https://github.com/man-group/dtale/issues/214>`__: fix for\n   USE_COLAB (colab proxy endpoint injection)\n\n.. _section-86:\n\n1.9.0 (2020-7-3)\n~~~~~~~~~~~~~~~~\n\n-  added the ability to build columns using transform\n-  added USE_COLAB for accessing D-Tale within google colab using their\n   proxy\n-  `#211 <https://github.com/man-group/dtale/issues/211>`__: Code export\n   doesnt work on google colab\n\n.. _section-87:\n\n1.8.19 (2020-6-28)\n~~~~~~~~~~~~~~~~~~\n\n-  backwards compatibility of ‘colorscale’ URL parameters in charts\n-  dropping of NaN locations/groups in choropleth maps\n\n.. _section-88:\n\n1.8.18 (2020-6-28)\n~~~~~~~~~~~~~~~~~~\n\n-  `#150 <https://github.com/man-group/dtale/issues/150>`__: replace\n   colorscale dropdown with component from dash-colorscales\n-  added the ability to choose been ols & lowess trendlines in scatter\n   charts\n-  `#83 <https://github.com/man-group/dtale/issues/83>`__: allow for\n   names to be used in url strings for data_id\n\n.. _section-89:\n\n1.8.17 (2020-6-18)\n~~~~~~~~~~~~~~~~~~\n\n-  `#151 <https://github.com/man-group/dtale/issues/151>`__: allow users\n   to load custom topojson into choropleth maps\n\n.. _section-90:\n\n1.8.16 (2020-6-7)\n~~~~~~~~~~~~~~~~~\n\n-  `#200 <https://github.com/man-group/dtale/issues/200>`__: support for\n   xarray\n\n.. _section-91:\n\n1.8.15 (2020-5-31)\n~~~~~~~~~~~~~~~~~~\n\n-  `#202 <https://github.com/man-group/dtale/issues/202>`__: maximum\n   recursion errors when using Pyzo IDE\n\n.. _section-92:\n\n1.8.14 (2020-5-31)\n~~~~~~~~~~~~~~~~~~\n\n-  `#168 <https://github.com/man-group/dtale/issues/168>`__: updated\n   default colorscale for heatmaps to be Jet\n-  `#152 <https://github.com/man-group/dtale/issues/152>`__: added\n   scattermapbox as a valid map type\n-  `#136 <https://github.com/man-group/dtale/issues/136>`__: Fill\n   missing values\n-  `#86 <https://github.com/man-group/dtale/issues/86>`__: column\n   replacements for values\n-  `#87 <https://github.com/man-group/dtale/issues/87>`__: highlight\n   ranges of numeric cells\n\n.. _section-93:\n\n1.8.13 (2020-5-20)\n~~~~~~~~~~~~~~~~~~\n\n-  `#193 <https://github.com/man-group/dtale/issues/193>`__: Support for\n   JupyterHub Proxy\n\n.. _section-94:\n\n1.8.12 (2020-5-15)\n~~~~~~~~~~~~~~~~~~\n\n-  `#196 <https://github.com/man-group/dtale/issues/196>`__: dataframes\n   that have datatime indexes without a name\n-  Added the ability to apply formats to all columns of same dtype\n\n.. _section-95:\n\n1.8.11 (2020-5-3)\n~~~~~~~~~~~~~~~~~\n\n-  `#196 <https://github.com/man-group/dtale/issues/191>`__: improving\n   outlier filter suggestions\n-  `#190 <https://github.com/man-group/dtale/issues/190>`__: hide\n   “Animate” inputs when “Percentage Sum” or “Percentage Count”\n   aggregations are used\n-  `#189 <https://github.com/man-group/dtale/issues/189>`__: hide\n   “Barsort” when grouping is being applied\n-  `#187 <https://github.com/man-group/dtale/issues/187>`__: missing &\n   outlier tooltip descriptions on column headers\n-  `#186 <https://github.com/man-group/dtale/issues/186>`__: close\n   “Describe” tab after clicking “Update Grid”\n-  `#122 <https://github.com/man-group/dtale/issues/122>`__: editable\n   cells\n-  npm package upgrades\n-  circleci build script refactoring\n\n.. _section-96:\n\n1.8.10 (2020-4-26)\n~~~~~~~~~~~~~~~~~~\n\n-  `#184 <https://github.com/man-group/dtale/issues/184>`__: “nan” not\n   showing up for numeric columns\n-  `#181 <https://github.com/man-group/dtale/issues/181>`__: percentage\n   sum/count charts\n-  `#179 <https://github.com/man-group/dtale/issues/179>`__:\n   confirmation for column deletion\n-  `#176 <https://github.com/man-group/dtale/issues/176>`__: highlight\n   background of outliers/missing values\n-  `#175 <https://github.com/man-group/dtale/issues/175>`__: column\n   renaming\n-  `#174 <https://github.com/man-group/dtale/issues/174>`__: moved\n   “Describe” popup to new browser tab\n-  `#173 <https://github.com/man-group/dtale/issues/173>`__: wider\n   column input box for GroupBy in “Summarize Data” popup\n-  `#172 <https://github.com/man-group/dtale/issues/172>`__: allowing\n   groups to be specified in 3D scatter\n-  `#170 <https://github.com/man-group/dtale/issues/170>`__: filter\n   “Value” dropdown for maps to only int or float columns\n-  `#164 <https://github.com/man-group/dtale/issues/164>`__: show\n   information about missing data in “Describe” popup\n\n.. _section-97:\n\n1.8.9 (2020-4-18)\n~~~~~~~~~~~~~~~~~\n\n-  updated correlations & “Open Popup” to create new tabs instead\n-  test fixes for dash 1.11.0\n-  added python 3.7 & 3.8 support\n\n.. _section-98:\n\n1.8.8 (2020-4-9)\n~~~~~~~~~~~~~~~~\n\n-  `#144 <https://github.com/man-group/dtale/issues/144>`__: Changing\n   data type\n\n.. _section-99:\n\n1.8.7 (2020-4-8)\n~~~~~~~~~~~~~~~~\n\n-  `#137 <https://github.com/man-group/dtale/issues/137>`__: Outliers in\n   the description window\n-  `#141 <https://github.com/man-group/dtale/issues/141>`__: Currency\n   Symbole for column Format\n-  `#156 <https://github.com/man-group/dtale/issues/156>`__: heat map\n-  `#160 <https://github.com/man-group/dtale/issues/160>`__: Option to\n   filter out outliers from charts\n-  `#161 <https://github.com/man-group/dtale/issues/161>`__: Syntax\n   error in 1.8.6\n-  `#162 <https://github.com/man-group/dtale/issues/162>`__: chart map\n   animation errors with aggrigations\n-  `#163 <https://github.com/man-group/dtale/issues/163>`__: Fix scale\n   for animation mode in the chart\n\n1.8.6 [hotfix] (2020-4-5)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  updates to setup.py to include images\n\n.. _hotfix-2020-4-5-1:\n\n1.8.5 [hotfix] (2020-4-5)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  fixed bug with column calculation for map inputs\n-  `#149 <https://github.com/man-group/dtale/issues/149>`__: Icon for\n   Map charts\n\n.. _hotfix-2020-4-5-2:\n\n1.8.4 [hotfix] (2020-4-5)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  update to setup.py to include missing static topojson files\n-  `#145 <https://github.com/man-group/dtale/issues/145>`__: Choropleth\n   Map\n\n.. _section-100:\n\n1.8.3 (2020-4-4)\n~~~~~~~~~~~~~~~~\n\n-  `#143 <https://github.com/man-group/dtale/issues/143>`__: scattergeo\n   map chart UI changes\n-  updated offline chart generation of maps to work without loading\n   topojson from the web\n-  fix to allow correlations timeseries to handle when date columns jump\n   between rolling & non-rolling\n-  added slider to animation and added animation to maps\n-  fixes for IE 11 compatibility issues\n-  labeling changes for “Reshape” popup\n-  added grouping to maps\n\n.. _section-101:\n\n1.8.2 (2020-4-1)\n~~~~~~~~~~~~~~~~\n\n-  `#129 <https://github.com/man-group/dtale/issues/129>`__: show dtype\n   when hovering over header in “Highlight Dtypes” mode and description\n   tooltips added to main menu\n-  made “No Aggregation” the default aggregation in charts\n-  bugfix for line charts with more than 15000 points\n-  updated “Value Counts” & “Category Breakdown” to return top on\n   initial load\n-  `#118 <https://github.com/man-group/dtale/issues/118>`__: added\n   scattergeo & choropleth maps\n-  `#121 <https://github.com/man-group/dtale/issues/121>`__: added “not\n   equal” toggle to filters\n-  `#132 <https://github.com/man-group/dtale/issues/132>`__: updated\n   resize button to “Refresh Widths”\n-  added “Animate” toggle to scatter, line & bar charts\n-  `#131 <https://github.com/man-group/dtale/issues/131>`__: changes to\n   “Reshape Data” window\n-  `#130 <https://github.com/man-group/dtale/issues/130>`__: updates to\n   pivot reshaper\n-  `#128 <https://github.com/man-group/dtale/issues/128>`__: additional\n   hover display of code snippets for column creation\n-  `#112 <https://github.com/man-group/dtale/issues/112>`__: updated\n   “Group” selection to give users the ability to select group values\n\n.. _section-102:\n\n1.8.1 (2020-3-29)\n~~~~~~~~~~~~~~~~~\n\n-  `#92 <https://github.com/man-group/dtale/issues/92>`__: column\n   builders for random data\n-  `#84 <https://github.com/man-group/dtale/issues/84>`__: highlight\n   columns based on dtype\n-  `#111 <https://github.com/man-group/dtale/issues/111>`__: fix for\n   syntax error in charts code export\n-  `#113 <https://github.com/man-group/dtale/issues/113>`__: updates to\n   “Value Counts” chart in “Column Analysis” for number of values and\n   ordinal entry\n-  `#114 <https://github.com/man-group/dtale/issues/114>`__: export data\n   to CSV/TSV\n-  `#116 <https://github.com/man-group/dtale/issues/116>`__: upodated\n   styling for github fork link so “Code Export” is partially clickable\n-  `#119 <https://github.com/man-group/dtale/issues/119>`__: fixed bug\n   with queries not being passed to functions\n-  `#120 <https://github.com/man-group/dtale/issues/120>`__: fix to\n   allow duplicate x-axis entries in bar charts\n-  added “category breakdown” in column analysis popup for float columns\n-  fixed bug where previous “show missing only” selection was not being\n   recognized\n\n.. _section-103:\n\n1.8.0 (2020-3-22)\n~~~~~~~~~~~~~~~~~\n\n-  `#102 <https://github.com/man-group/dtale/issues/102>`__: interactive\n   column filtering for string, date, int, float & bool\n-  better handling for y-axis management in charts. Now able to toggle\n   between default, single & multi axis\n-  increased maximum groups to 30 in charts and updated error messaging\n   when it surpasses that for easier filter creation\n-  bugfix for date string width calculation\n-  updated sort/filter/hidden header so that you can now click values\n   which will trigger a tooltip for removing individual values\n-  updated Filter popup to be opened as separate window when needed\n\n.. _section-104:\n\n1.7.15 (2020-3-9)\n~~~~~~~~~~~~~~~~~\n\n-  `#105 <https://github.com/man-group/dtale/issues/105>`__: better\n   error handling for when JS files are missing\n-  `#103 <https://github.com/man-group/dtale/issues/103>`__: pinned\n   Flask to be >= 1.0.0\n-  Updated file exporting to no longer use ``flask.send_file`` since\n   that doesn’t play nice with WSGI\n\n.. _section-105:\n\n1.7.14 (2020-3-7)\n~~~~~~~~~~~~~~~~~\n\n-  Hotfix for “Reshape” popup when forwarding browser to new data\n   instances\n\n.. _section-106:\n\n1.7.13 (2020-3-7)\n~~~~~~~~~~~~~~~~~\n\n-  New data storage mechanisms available: Redis, Shelve\n-  `#100 <https://github.com/man-group/dtale/issues/100>`__: turned off\n   data limits on charts by using WebGL\n-  `#99 <https://github.com/man-group/dtale/issues/99>`__: graceful\n   handling of issue calculating min/max information for Describe popup\n-  `#91 <https://github.com/man-group/dtale/issues/91>`__: reshaping of\n   data through usage of aggregations, pivots or transposes\n-  Export chart to HTML\n-  Export chart dat to CSV\n-  Offline chart display for use within notebooks\n-  Removal of data from the Instances popup\n-  Updated styling of charts to fit full window dimensions\n\n.. _section-107:\n\n1.7.12 (2020-3-1)\n~~~~~~~~~~~~~~~~~\n\n-  added syntax highlighting to code exports with\n   react-syntax-highlighting\n-  added arctic integration test\n-  updated Histogram popup to “Column Analysis” which allows for the\n   following\n\n   -  Histograms -> integers and floats\n   -  Value Counts -> integers, strings & dates\n\n.. _section-108:\n\n1.7.11 (2020-2-27)\n~~~~~~~~~~~~~~~~~~\n\n-  hotfix for dash custom.js file missing from production webpack build\n   script\n\n.. _section-109:\n\n1.7.10 (2020-2-27)\n~~~~~~~~~~~~~~~~~~\n\n-  `#75 <https://github.com/man-group/dtale/issues/75>`__: added code\n   snippet functionality to the following:\n\n   -  main grid, histogram, correlations, column building & charts\n\n-  exposed CLI loaders through the following functions dtale.show_csv,\n   dtale.show_json, dtale.show_arctic\n\n   -  build in such a way that it is easy for custom loaders to be\n      exposed as well\n\n-  `#82 <https://github.com/man-group/dtale/issues/82>`__: pinned\n   ``future`` package to be >= 0.14.0\n\n.. _section-110:\n\n1.7.9 (2020-2-24)\n~~~~~~~~~~~~~~~~~\n\n-  support for google colab\n-  `#71 <https://github.com/man-group/dtale/issues/71>`__: Filter &\n   Formats popups no longer have smooth transition from top of screen\n-  `#72 <https://github.com/man-group/dtale/issues/72>`__: Column Menu\n   cutoff on last column of wide dataframes\n-  `#73 <https://github.com/man-group/dtale/issues/73>`__: Describe\n   popup does full refresh when clicking rows in dtype grid\n\n.. _section-111:\n\n1.7.8 (2020-2-22)\n~~~~~~~~~~~~~~~~~\n\n-  `#77 <https://github.com/man-group/dtale/issues/77>`__: removal of\n   multiprocessed timeouts\n\n.. _section-112:\n\n1.7.7 (2020-2-22)\n~~~~~~~~~~~~~~~~~\n\n-  centralized global state\n\n.. _section-113:\n\n1.7.6 (2020-2-21)\n~~~~~~~~~~~~~~~~~\n\n-  allowing the usage of context variables within filters\n-  `#64 <https://github.com/man-group/dtale/issues/64>`__: handling for\n   loading duplicate data to dtale.show\n-  updated dtale.instances() to print urls rather than show all\n   instances\n-  removal of Dash “Export to png” function\n-  passing data grid queries to chart page as default\n-  added sys.exit() to the thread that manages the reaper\n\n.. _section-114:\n\n1.7.5 (2020-2-20)\n~~~~~~~~~~~~~~~~~\n\n-  hotfix for KeyError loading metadata for columns with min/max\n   information\n\n.. _section-115:\n\n1.7.4 (2020-2-20)\n~~~~~~~~~~~~~~~~~\n\n-  `#63 <https://github.com/man-group/dtale/issues/63>`__: filtering\n   columns with special characters in name\n-  added json_loader CLI options\n-  updated moving/locking of columns to be persisted to back-end as well\n   as front-end\n-  added the ability to show/hide columns\n-  `#61 <https://github.com/man-group/dtale/issues/61>`__: added column\n   builder popup\n\n.. _section-116:\n\n1.7.3 (2020-2-13)\n~~~~~~~~~~~~~~~~~\n\n-  added the ability to move columns left or right as well as to the\n   front\n-  added formatting capabilities for strings & dates\n-  persist formatting settings to popup on reopening\n-  bugfix for width-calculation on formatting change\n\n.. _section-117:\n\n1.7.2 (2020-2-12)\n~~~~~~~~~~~~~~~~~\n\n-  60 timeout handling around chart requests\n-  pre-loaded charts through URL search strings\n-  pandas query examples in Filter popup\n\n.. _section-118:\n\n1.7.1 (2020-2-7)\n~~~~~~~~~~~~~~~~\n\n-  added pie, 3D scatter & surface charts\n-  updated popups to be displayed when the browser dimensions are too\n   small to host a modal\n-  removed Swagger due to its lack up support for updated dependencies\n\n.. _section-119:\n\n1.7.0 (2020-1-28)\n~~~~~~~~~~~~~~~~~\n\n-  redesign of charts popup to use plotly/dash\n-  `#55 <https://github.com/man-group/dtale/issues/55>`__: raise\n   exception when data contains duplicate column names\n-  heatmap integration\n-  combination of \"_main.jsx\" files into one for spacial optimization\n-  `#15 <https://github.com/man-group/dtale/issues/15>`__: made arctic\n   an “extra” dependency\n\n.. _section-120:\n\n1.6.10 (2020-1-12)\n~~~~~~~~~~~~~~~~~~\n\n-  better front-end handling of dates for charting as to avoid timezone\n   issues\n-  the ability to switch between sorting any axis in bar charts\n\n.. _section-121:\n\n1.6.9 (2020-1-9)\n~~~~~~~~~~~~~~~~\n\n-  bugfix for timezone issue around passing date filters to server for\n   scatter charts in correlations popup\n\n.. _section-122:\n\n1.6.8 (2020-1-9)\n~~~~~~~~~~~~~~~~\n\n-  additional information about how to use Correlations popup\n-  handling of all-nan data in charts popup\n-  styling issues on popups (especially Histogram)\n-  removed auto-filtering on correlation popup\n-  scatter point color change\n-  added chart icon to cell that has been selected in correlation popup\n-  responsiveness to scatter charts\n-  handling of links to ‘main’,‘iframe’ & ‘popup’ missing data_id\n-  handling of ‘inf’ values when getting min/max & describe data\n-  added header to window popups (correlations, charts, …) and a link\n   back to the grid\n-  added egg building to cirleci script\n-  correlation timeseries chart hover line\n\n.. _section-123:\n\n1.6.7 (2020-1-3)\n~~~~~~~~~~~~~~~~\n\n-  `#50 <https://github.com/man-group/dtale/issues/50>`__: updates to\n   rolling correlation functionality\n\n.. _section-124:\n\n1.6.6 (2020-1-2)\n~~~~~~~~~~~~~~~~\n\n-  `#47 <https://github.com/man-group/dtale/issues/47>`__: selection of\n   multiple columns for y-axis\n-  updated histogram bin selection to be an input box for full\n   customization\n-  better display of timestamps in axis ticks for charts\n-  sorting of bar charts by y-axis\n-  `#48 <https://github.com/man-group/dtale/issues/48>`__: scatter\n   charts in chart builder\n-  “nunique” added to list of aggregations\n-  turned on “threaded=True” for app.run to avoid hanging popups\n-  `#45 <https://github.com/man-group/dtale/issues/45>`__: rolling\n   computations as aggregations\n-  Y-Axis editor\n\n.. _section-125:\n\n1.6.5 (2019-12-29)\n~~~~~~~~~~~~~~~~~~\n\n-  test whether filters entered will return no data and block the user\n   from apply those\n-  allow for group values of type int or float to be displayed in charts\n   popup\n-  timeseries correlation values which return ‘nan’ will be replaced by\n   zero for chart purposes\n-  update ‘distribution’ to ‘series’ on charts so that missing dates\n   will not show up as ticks\n-  added “fork on github” flag for demo version & links to github/docs\n   on “About” popup\n-  limited lz4 to <= 2.2.1 in python 27-3 since latest version is no\n   longer supported\n\n.. _section-126:\n\n1.6.4 (2019-12-26)\n~~~~~~~~~~~~~~~~~~\n\n-  testing of hostname returned by ``socket.gethostname``, use\n   ‘localhost’ if it fails\n-  removal of flask dev server banner when running in production\n   environments\n-  better handling of long strings in wordclouds\n-  `#43 <https://github.com/man-group/dtale/issues/43>`__: only show\n   timeseries correlations if datetime columns exist with multiple\n   values per date\n\n.. _section-127:\n\n1.6.3 (2019-12-23)\n~~~~~~~~~~~~~~~~~~\n\n-  updated versions of packages in yarn.lock due to issue with chart.js\n   box & whisker plots\n\n.. _section-128:\n\n1.6.2 (2019-12-23)\n~~~~~~~~~~~~~~~~~~\n\n-  `#40 <https://github.com/man-group/dtale/issues/40>`__: loading\n   initial chart as non-line in chart builder\n-  `#41 <https://github.com/man-group/dtale/issues/41>`__: double\n   clicking cells in correlation grid for scatter will cause chart not\n   to display\n-  “Open Popup” button for ipython iframes\n-  column width resizing on sorting\n-  additional int/float descriptors (sum, median, mode, var, sem, skew,\n   kurt)\n-  wordcloud chart type\n\n.. _section-129:\n\n1.6.1 (2019-12-19)\n~~~~~~~~~~~~~~~~~~\n\n-  bugfix for url display when running from command-line\n\n.. _section-130:\n\n1.6.0 (2019-12-19)\n~~~~~~~~~~~~~~~~~~\n\n-  charts integration\n\n   -  the ability to look at data in line, bar, stacked bar & pie charts\n   -  the ability to group & aggregate data within the charts\n\n-  direct ipython iframes to correlations & charts pages with\n   pre-selected inputs\n-  the ability to access instances from code by data id\n   ``dtale.get_instance(data_id)``\n-  view all active data instances ``dtale.instances()``\n\n.. _section-131:\n\n1.5.1 (2019-12-12)\n~~~~~~~~~~~~~~~~~~\n\n-  conversion of new flask instance for each ``dtale.show`` call to\n   serving all data associated with one parent process under the same\n   flask instance unless otherwise specified by the user (the ``force``\n   parameter)\n\n.. _section-132:\n\n1.5.0 (2019-12-02)\n~~~~~~~~~~~~~~~~~~\n\n-  ipython integration\n\n   -  ipython output cell adjustment\n   -  column-wise menu support\n   -  browser window popups for: Correlations, Coverage, Describe,\n      Histogram & Instances\n\n.. _section-133:\n\n1.4.1 (2019-11-20)\n~~~~~~~~~~~~~~~~~~\n\n-  `#32 <https://github.com/man-group/dtale/issues/32>`__: unpin\n   jsonschema by moving flasgger to ``extras_require``\n\n.. _section-134:\n\n1.4.0 (2019-11-19)\n~~~~~~~~~~~~~~~~~~\n\n-  Correlations Pearson Matrix filters\n-  “name” display in title tab\n-  “Heat Map” toggle\n-  dropped unused “Flask-Caching” requirement\n\n.. _section-135:\n\n1.3.7 (2019-11-12)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  `#28 <https://github.com/man-group/dtale/issues/28>`__:\n      “Instances” menu option will now be displayed by default\n   -  `#29 <https://github.com/man-group/dtale/issues/29>`__: add hints\n      to how users can navigate the correlations popup\n   -  add “unicode” as a string classification for column width\n      calculation\n\n.. _section-136:\n\n1.3.6 (2019-11-08)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  choose between ``pandas.corr`` & ``numpy.corrcoef`` depending on\n      presence of NaNs\n   -  hide timeseries correlations when date columns only contain one\n      day\n\n.. _section-137:\n\n1.3.5 (2019-11-07)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  duplicate loading of histogram data\n   -  string serialization failing when mixing ``future.str`` & ``str``\n      in scatter function\n\n.. _section-138:\n\n1.3.4 (2019-11-07)\n~~~~~~~~~~~~~~~~~~\n\n-  updated correlation calculation to use ``numpy.corrcoef`` for\n   performance purposes\n-  github rebranding from manahl -> man-group\n\n.. _section-139:\n\n1.3.3 (2019-11-05)\n~~~~~~~~~~~~~~~~~~\n\n-  hotfix for failing test under certain versions of ``future`` package\n\n.. _section-140:\n\n1.3.2 (2019-11-05)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  display of histogram column information\n   -  reload of hidden “processes” input when loading instances data\n   -  correlations json failures on string conversion\n\n.. _section-141:\n\n1.3.1 (2019-10-29)\n~~~~~~~~~~~~~~~~~~\n\n-  fix for incompatible str types when directly altering state of data\n   in running D-Tale instance\n\n.. _section-142:\n\n1.3.0 (2019-10-29)\n~~~~~~~~~~~~~~~~~~\n\n-  ``webbrowser`` integration (the ability to automatically open a\n   webbrowser upon calling ``dtale.show()``)\n-  flag for hiding the “Shutdown” button for long-running demos\n-  “Instances” navigator popup for viewing all activate D-Tale instances\n   for the current python process\n\n.. _section-143:\n\n1.2.0 (2019-10-24)\n~~~~~~~~~~~~~~~~~~\n\n-  `#20 <https://github.com/man-group/dtale/issues/13>`__: fix for data\n   being overriden with each new instance\n-  `#21 <https://github.com/man-group/dtale/issues/13>`__: fix for\n   displaying timestamps if they exist\n-  calling ``show()`` now returns an object which can alter the state of\n   a process\n\n   -  accessing/altering state through the ``data`` property\n   -  shutting down a process using the ``kill()`` function\n\n.. _section-144:\n\n1.1.1 (2019-10-23)\n~~~~~~~~~~~~~~~~~~\n\n-  `#13 <https://github.com/man-group/dtale/issues/13>`__: fix for\n   auto-detection of column widths for strings and floats\n\n.. _section-145:\n\n1.1.0 (2019-10-08)\n~~~~~~~~~~~~~~~~~~\n\n-  IE support\n-  **Describe** & **About** popups\n-  Custom CLI support\n\n.. _section-146:\n\n1.0.0 (2019-09-06)\n~~~~~~~~~~~~~~~~~~\n\n-  Initial public release\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/man-group/dtale",
    "keywords": "numeric,pandas,visualization,flask",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtale",
    "package_url": "https://pypi.org/project/dtale/",
    "platform": null,
    "project_url": "https://pypi.org/project/dtale/",
    "project_urls": {
      "Homepage": "https://github.com/man-group/dtale"
    },
    "release_url": "https://pypi.org/project/dtale/2.1.2/",
    "requires_dist": [
      "dash-colorscales",
      "dash-daq",
      "Flask-Compress",
      "future (>=0.14.0)",
      "missingno (<=0.4.2)",
      "pandas",
      "requests",
      "squarify",
      "strsimpy",
      "six",
      "xlrd",
      "lz4 (<=2.2.1) ; python_version < \"3.0\"",
      "dash-bootstrap-components (<=0.10.5) ; python_version < \"3.0\"",
      "networkx (==2.2) ; python_version < \"3.0\"",
      "numpy (==1.16.6) ; python_version < \"3.0\"",
      "openpyxl (==2.6.4) ; python_version < \"3.0\"",
      "scikit-learn (==0.20.4) ; python_version < \"3.0\"",
      "xarray (==0.11.3) ; python_version < \"3.0\"",
      "et-xmlfile (<=1.0.1) ; python_version < \"3.6\"",
      "plotly (==4.14.3) ; python_version < \"3.6\"",
      "seaborn (==0.9.1) ; python_version < \"3.6\"",
      "Flask (<=1.1.4) ; python_version < \"3.7\"",
      "itsdangerous (<=1.1.0) ; python_version < \"3.7\"",
      "kaleido (==0.1.0) ; python_version <= \"3.6\"",
      "cycler (==0.10.0) ; python_version == \"2.7\"",
      "dash (==1.21.0) ; python_version == \"2.7\"",
      "decorator (==4.4.2) ; python_version == \"2.7\"",
      "kiwisolver (==1.1.0) ; python_version == \"2.7\"",
      "MarkupSafe (==1.1.1) ; python_version == \"2.7\"",
      "matplotlib (==2.2.5) ; python_version == \"2.7\"",
      "pyparsing (==2.4.7) ; python_version == \"2.7\"",
      "scipy (==1.2.3) ; python_version == \"2.7\"",
      "statsmodels (==0.10.2) ; python_version == \"2.7\"",
      "matplotlib (==3.3.4) ; python_version == \"3.0\"",
      "scipy (<=1.5.4) ; python_version == \"3.0\"",
      "statsmodels (==0.12.2) ; python_version == \"3.0\"",
      "MarkupSafe (==2.0.1) ; python_version == \"3.1\"",
      "matplotlib (==3.3.4) ; python_version == \"3.1\"",
      "packaging (<=21.0) ; python_version == \"3.1\"",
      "scipy (<=1.5.4) ; python_version == \"3.1\"",
      "statsmodels (==0.12.2) ; python_version == \"3.1\"",
      "MarkupSafe (==2.0.1) ; python_version == \"3.2\"",
      "matplotlib (==3.3.4) ; python_version == \"3.2\"",
      "packaging (<=21.0) ; python_version == \"3.2\"",
      "scipy (<=1.5.4) ; python_version == \"3.2\"",
      "statsmodels (==0.12.2) ; python_version == \"3.2\"",
      "MarkupSafe (==2.0.1) ; python_version == \"3.3\"",
      "matplotlib (==3.3.4) ; python_version == \"3.3\"",
      "packaging (<=21.0) ; python_version == \"3.3\"",
      "scipy (<=1.5.4) ; python_version == \"3.3\"",
      "statsmodels (==0.12.2) ; python_version == \"3.3\"",
      "MarkupSafe (==2.0.1) ; python_version == \"3.4\"",
      "matplotlib (==3.3.4) ; python_version == \"3.4\"",
      "packaging (<=21.0) ; python_version == \"3.4\"",
      "scipy (<=1.5.4) ; python_version == \"3.4\"",
      "statsmodels (==0.12.2) ; python_version == \"3.4\"",
      "MarkupSafe (==2.0.1) ; python_version == \"3.5\"",
      "matplotlib (==3.3.4) ; python_version == \"3.5\"",
      "packaging (<=21.0) ; python_version == \"3.5\"",
      "scipy (<=1.5.4) ; python_version == \"3.5\"",
      "statsmodels (==0.12.2) ; python_version == \"3.5\"",
      "kiwisolver (==1.1.0) ; python_version == \"3.6\"",
      "MarkupSafe (==2.0.1) ; python_version == \"3.6\"",
      "matplotlib (==3.3.4) ; python_version == \"3.6\"",
      "packaging (<=21.0) ; python_version == \"3.6\"",
      "scipy (<=1.5.4) ; python_version == \"3.6\"",
      "statsmodels (==0.12.2) ; python_version == \"3.6\"",
      "packaging (<=21.0) ; python_version == \"3.7\"",
      "scipy (==1.7.3) ; python_version == \"3.7\"",
      "statsmodels (==0.12.2) ; python_version == \"3.7\"",
      "lz4 ; python_version > \"3.0\"",
      "cycler ; python_version > \"3.0\"",
      "dash (>=2.0.0) ; python_version > \"3.0\"",
      "dash-bootstrap-components ; python_version > \"3.0\"",
      "flask-ngrok ; python_version > \"3.0\"",
      "scikit-learn (==0.24.2) ; python_version > \"3.0\"",
      "kaleido ; python_version > \"3.6\"",
      "matplotlib ; python_version > \"3.6\"",
      "statsmodels ; python_version > \"3.7\"",
      "networkx ; python_version >= \"3.0\"",
      "numpy ; python_version >= \"3.0\"",
      "openpyxl ; python_version >= \"3.0\"",
      "xarray ; python_version >= \"3.0\"",
      "et-xmlfile ; python_version >= \"3.6\"",
      "plotly (>=5.0.0) ; python_version >= \"3.6\"",
      "ppscore ; python_version >= \"3.6\"",
      "seaborn ; python_version >= \"3.6\"",
      "Flask ; python_version >= \"3.7\"",
      "itsdangerous ; python_version >= \"3.7\"",
      "scipy ; python_version >= \"3.8\"",
      "arctic (<=1.79.4) ; extra == 'arctic'",
      "dash-bio (==0.7.1) ; (python_version == \"2.7\") and extra == 'dash-bio'",
      "dash-bio ; (python_version > \"3.0\") and extra == 'dash-bio'",
      "rpy2 ; (python_version > \"3.0\") and extra == 'r'",
      "redislite ; extra == 'redis'",
      "streamlit ; extra == 'streamlit'",
      "swifter ; extra == 'swifter'",
      "ipython (<8.0.0) ; extra == 'tests'",
      "mock ; extra == 'tests'",
      "nbconvert ; extra == 'tests'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "pytest-server-fixtures ; extra == 'tests'",
      "importlib-metadata ; (python_version != \"3.6\") and extra == 'tests'",
      "importlib-metadata (<=3.7.3) ; (python_version <= \"3.6\") and extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Web Client for Visualizing Pandas Objects",
    "version": "2.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17146159,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e5780831b051ab923d7cc28e3d66c62b1ac3bace9d305fbfd6f4de7b0e3c455",
        "md5": "dff80c3240554dc4dd101a52bd166ac8",
        "sha256": "38763fc089dc071ae6fd52d5413644e9c7c3efd2a53ca5406687a8bf534065b7"
      },
      "downloads": -1,
      "filename": "dtale-2.1.2-py2.7.egg",
      "has_sig": false,
      "md5_digest": "dff80c3240554dc4dd101a52bd166ac8",
      "packagetype": "bdist_egg",
      "python_version": "2.1.2",
      "requires_python": null,
      "size": 12925161,
      "upload_time": "2022-03-15T14:54:13",
      "upload_time_iso_8601": "2022-03-15T14:54:13.318015Z",
      "url": "https://files.pythonhosted.org/packages/4e/57/80831b051ab923d7cc28e3d66c62b1ac3bace9d305fbfd6f4de7b0e3c455/dtale-2.1.2-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2193c5857c313b3d2dca3f792dc1147c4988502f072bd3f94804ca8b1b35694",
        "md5": "4d2f9744d724397433d18a9a5b124f80",
        "sha256": "4ca46a043823b36859a53c0c80db3d961d57f3012cd6896f0b0da8aae96620bf"
      },
      "downloads": -1,
      "filename": "dtale-2.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d2f9744d724397433d18a9a5b124f80",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12678013,
      "upload_time": "2022-03-15T14:54:06",
      "upload_time_iso_8601": "2022-03-15T14:54:06.489349Z",
      "url": "https://files.pythonhosted.org/packages/e2/19/3c5857c313b3d2dca3f792dc1147c4988502f072bd3f94804ca8b1b35694/dtale-2.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6486b30741da250674b0f2eab2ec7db37d18c2bfc4f46b3066a9e3a207a1801",
        "md5": "80a52a7d78219a9d736fadcdac281d79",
        "sha256": "79c489799af9ff4e7e84fea8440773413d88fe7279e5c58885272aaab2c5a46f"
      },
      "downloads": -1,
      "filename": "dtale-2.1.2-py3.6.egg",
      "has_sig": false,
      "md5_digest": "80a52a7d78219a9d736fadcdac281d79",
      "packagetype": "bdist_egg",
      "python_version": "2.1.2",
      "requires_python": null,
      "size": 12923623,
      "upload_time": "2022-03-15T14:54:19",
      "upload_time_iso_8601": "2022-03-15T14:54:19.917702Z",
      "url": "https://files.pythonhosted.org/packages/c6/48/6b30741da250674b0f2eab2ec7db37d18c2bfc4f46b3066a9e3a207a1801/dtale-2.1.2-py3.6.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d611e5e493d2ac3b6268ec28490d97437cf451a1c8091928eaeb461209ba81e0",
        "md5": "acdd099f21ab4158dba2071307ab66c2",
        "sha256": "a6e78c98036d1581ab4723925f110463131bcd496c867de128ba0d0508d39843"
      },
      "downloads": -1,
      "filename": "dtale-2.1.2-py3.7.egg",
      "has_sig": false,
      "md5_digest": "acdd099f21ab4158dba2071307ab66c2",
      "packagetype": "bdist_egg",
      "python_version": "2.1.2",
      "requires_python": null,
      "size": 12923872,
      "upload_time": "2022-03-15T14:54:27",
      "upload_time_iso_8601": "2022-03-15T14:54:27.494167Z",
      "url": "https://files.pythonhosted.org/packages/d6/11/e5e493d2ac3b6268ec28490d97437cf451a1c8091928eaeb461209ba81e0/dtale-2.1.2-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb25b2fc9ee0f0a2ada772a572b50d11f4c75444e48cd34ec70eb5052b382c8d",
        "md5": "e99951ac31c40679bc50202aba9ce298",
        "sha256": "156d48b4331491257b9ae011ad542746ca59f95b56b69e213523b5c1f1cc65ce"
      },
      "downloads": -1,
      "filename": "dtale-2.1.2-py3.8.egg",
      "has_sig": false,
      "md5_digest": "e99951ac31c40679bc50202aba9ce298",
      "packagetype": "bdist_egg",
      "python_version": "2.1.2",
      "requires_python": null,
      "size": 12929924,
      "upload_time": "2022-03-15T14:54:34",
      "upload_time_iso_8601": "2022-03-15T14:54:34.959429Z",
      "url": "https://files.pythonhosted.org/packages/cb/25/b2fc9ee0f0a2ada772a572b50d11f4c75444e48cd34ec70eb5052b382c8d/dtale-2.1.2-py3.8.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "239c31537e7b0cd95eb114ba3b68b54b406eb75cb7e649dbad02d07bd97e50f3",
        "md5": "b243d336af538361c98d8bbe8f55e41c",
        "sha256": "9a6e25f6863d52265c4890b5f000405291bd919630b7c49cd675d61fb2e0e30b"
      },
      "downloads": -1,
      "filename": "dtale-2.1.2-py3.9.egg",
      "has_sig": false,
      "md5_digest": "b243d336af538361c98d8bbe8f55e41c",
      "packagetype": "bdist_egg",
      "python_version": "2.1.2",
      "requires_python": null,
      "size": 12928818,
      "upload_time": "2022-03-15T14:54:41",
      "upload_time_iso_8601": "2022-03-15T14:54:41.047584Z",
      "url": "https://files.pythonhosted.org/packages/23/9c/31537e7b0cd95eb114ba3b68b54b406eb75cb7e649dbad02d07bd97e50f3/dtale-2.1.2-py3.9.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd55c7ebabfe6b3362862e45c8fd1e19047efa77815ed08e362598118baf6c97",
        "md5": "ab4b30119ec36888318503ed052c76e7",
        "sha256": "61f8dae64e3ab2dbe6e9dd53c1b01bd22ff7863770d58221a65ad0123fb35581"
      },
      "downloads": -1,
      "filename": "dtale-2.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ab4b30119ec36888318503ed052c76e7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12321302,
      "upload_time": "2022-03-15T14:54:47",
      "upload_time_iso_8601": "2022-03-15T14:54:47.667139Z",
      "url": "https://files.pythonhosted.org/packages/dd/55/c7ebabfe6b3362862e45c8fd1e19047efa77815ed08e362598118baf6c97/dtale-2.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}