{
  "info": {
    "author": "MAN Alpha Technology",
    "author_email": "ManAlphaTech@man.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering"
    ],
    "description": "|image0|\n\n`Live Demo <http://andrewschonfeld.pythonanywhere.com>`__\n\n--------------\n\n|CircleCI| |PyPI| |ReadTheDocs| |codecov| |Downloads|\n\nWhat is it?\n-----------\n\nD-Tale was born out a conversion from SAS to Python. What was originally\na perl script wrapper on top of SAS's ``insight`` function is now a\nlightweight web client on top of Pandas dat structures. D-Tale is the\ncombination of a Flask back-end and a React front-end to bring you an\neasy way to view & analyze Pandas data structures. Currently this tool\nsupports such Pandas objects as DataFrame, Series, MultiIndex,\nDatetimeIndex & RangeIndex. It integrates seamlessly with ipython\nnotebooks & python/ipython terminals.\n\nContents\n--------\n\n-  `Getting Started <#getting-started>`__\n-  `Python Terminal <#python-terminal>`__\n-  `Jupyter Notebook <#jupyter-notebook>`__\n-  `Command-line <#command-line>`__\n-  `UI <#ui>`__\n-  `Dimensions/Main Menu <#dimensionsmain-menu>`__\n-  `Selecting/Deselecting Columns <#selectingdeselecting-columns>`__\n-  `Menu functions w/ no columns\n   selected <#menu-functions-w-no-columns-selected>`__\n\n   -  `Describe <#describe>`__, `Charts <#charts>`__,\n      `Correlations <#correlations>`__, `Heat Map <#heat-map>`__,\n      `Instances <#instances>`__, `About <#about>`__,\n      `Resize <#resize>`__,\n      `Iframe-Mode/Full-Mode <#iframe-modefull-mode>`__,\n      `Shutdown <#shutdown>`__\n\n-  `Menu functions w/ column(s)\n   selected <#menu-functions-w-columns-selected>`__\n\n   -  `Move To Front <#move-to-front>`__, `Lock <#lock>`__,\n      `Unlock <#unlock>`__, `Sorting <#sorting>`__,\n      `Formats <#formats>`__, `Histogram <#histogram>`__\n\n-  `Menu functions within a Jupyter\n   Notebook <#menu-functions-within-a-jupyter-notebook>`__\n-  `For Developers <#for-developers>`__\n-  `Cloning <#cloning>`__\n-  `Running Tests <#running-tests>`__\n-  `Linting <#linting>`__\n-  `Formatting JS <#formatting-js>`__\n-  `Docker Development <#docker-development>`__\n-  `Startup Behavior <#startup-behavior>`__\n-  `Documentation <#documentation>`__\n-  `Requirements <#requirements>`__\n-  `Acknowledgements <#acknowledgements>`__\n-  `License <#license>`__\n\nGetting Started\n---------------\n\n+------------+------------+\n| PyCharm    | jupyter    |\n+============+============+\n| |image8|   | |image9|   |\n+------------+------------+\n\nSetup/Activate your environment and install the egg\n\n**Python 3**\n\n.. code:: bash\n\n    # create a virtualenv, if you haven't already created one\n    $ python3 -m venv ~/pyenvs/dtale\n    $ source ~/pyenvs/dtale/bin/activate\n\n    # install dtale egg (important to use the \"--upgrade\" every time you install so it will grab the latest version)\n    $ pip install --upgrade dtale\n\n**Python 2**\n\n.. code:: bash\n\n    # create a virtualenv, if you haven't already created one\n    $ python -m virtualenv ~/pyenvs/dtale\n    $ source ~/pyenvs/dtale/bin/activate\n\n    # install dtale egg (important to use the \"--upgrade\" every time you install so it will grab the latest version)\n    $ pip install --upgrade dtale\n\nNow you will have to ability to use D-Tale from the command-line or\nwithin a python-enabled terminal\n\nPython Terminal\n~~~~~~~~~~~~~~~\n\nThis comes courtesy of PyCharm |image10| Feel free to invoke ``python``\nor ``ipython`` directly and use the commands in the screenshot above and\nit should work\n\nAdditional functions available programatically\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import dtale\n    import pandas as pd\n\n    df = pd.DataFrame([dict(a=1,b=2,c=3)])\n\n    # Assigning a reference to a running D-Tale process\n    d = dtale.show(df)\n\n    # Accessing data associated with D-Tale process\n    tmp = d.data.copy()\n    tmp['d'] = 4\n\n    # Altering data associated with D-Tale process\n    # FYI: this will clear any front-end settings you have at the time for this process (filter, sorts, formatting)\n    d.data = tmp\n\n    # Shutting down D-Tale process\n    d.kill()\n\n    # using Python's `webbrowser` package it will try and open your server's default browser to this process\n    d.open_browser()\n\n    # There is also some helpful metadata about the process\n    d._data_id  # the process's data identifier\n    d._url  # the url to access the process\n\n    d2 = dtale.get_instance(d._data_id)  # returns a new reference to the instance running at that data_id\n\n    dtale.instances()  # returns a dictionary of all instances available, this would be { 1: ... }\n\nJupyter Notebook\n~~~~~~~~~~~~~~~~\n\nWithin any jupyter (ipython) notebook executing a cell like this will\ndisplay a small instance of D-Tale in the output cell. Here are some\nexamples:\n\n+------------------+--------------+-------------+\n| ``dtale.show``   | assignment   | instance    |\n+==================+==============+=============+\n| |image14|        | |image15|    | |image16|   |\n+------------------+--------------+-------------+\n\nIf you are running ipython<=5.0 then you also have the ability to adjust\nthe size of your output cell for the most recent instance displayed:\n\n.. figure:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/ipython_adjust.png\n   :alt: \n\nOne thing of note is that alot of the modal popups you see in the\nstandard browser version will now open separate browser windows for\nspacial convienence:\n\n\\|Column Menus\\|Correlations\\|Describe\\|Histogram\\|Charts\\|Instances\\|\n\\|:------:\\|:------:\\|:------:\\|:------:\\|:------:\\|:------:\\|\n\\|\\ |image17|\\ \\|\\ |image18|\\ \\|\\ |image19|\\ \\|\\ |image20|\\ \\|\\ |image21|\\ \\|\\ |image22|\\ \\|\n### Command-line Base CLI options (run ``dtale --help`` to see all\noptions available)\n\n+----------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| Prop                 | Description                                                                                                                    |\n+======================+================================================================================================================================+\n| ``--host``           | the name of the host you would like to use (most likely not needed since ``socket.gethostname()`` should figure this out)      |\n+----------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| ``--port``           | the port you would like to assign to your D-Tale instance                                                                      |\n+----------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| ``--name``           | an optional name you can assign to your D-Tale instance (this will be displayed in the ``<title>`` & Instances popup)          |\n+----------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| ``--debug``          | turn on Flask's \"debug\" mode for your D-Tale instance                                                                          |\n+----------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| ``--no-reaper``      | flag to turn off auto-reaping subprocess (kill D-Tale instances after an hour of inactivity), good for long-running displays   |\n+----------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| ``--open-browser``   | flag to automatically open up your server's default browser to your D-Tale instance                                            |\n+----------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| ``--force``          | flag to force D-Tale to try an kill any pre-existing process at the port you've specified so it can use it                     |\n+----------------------+--------------------------------------------------------------------------------------------------------------------------------+\n\nLoading data from **arctic**\n\n.. code:: bash\n\n    dtale --arctic-host mongodb://localhost:27027 --arctic-library jdoe.my_lib --arctic-node my_node --arctic-start 20130101 --arctic-end 20161231\n\nLoading data from **CSV**\n\n.. code:: bash\n\n    dtale --csv-path /home/jdoe/my_csv.csv --csv-parse_dates date\n\nLoading data from a **Custom** loader - Using the DTALE\\_CLI\\_LOADERS\nenvironment variable, specify a path to a location containing some\npython modules - Any python module containing the global variables\nLOADER\\_KEY & LOADER\\_PROPS will be picked up as a custom loader -\nLOADER\\_KEY: the key that will be associated with your loader. By\ndefault you are given **arctic** & **csv** (if you use one of these are\nyour key it will override these) - LOADER\\_PROPS: the individual props\navailable to be specified. - For example, with arctic we have host,\nlibrary, node, start & end. - If you leave this property as an empty\nlist your loader will be treated as a flag. For example, instead of\nusing all the arctic properties we would simply specify ``--arctic``\n(this wouldn't work well in arctic's case since it depends on all those\nproperties) - You will also need to specify a function with the\nfollowing signature ``def find_loader(kwargs)`` which returns a function\nthat returns a dataframe or ``None`` - Here is an example of a custom\nloader:\n\n.. code:: python\n\n    from dtale.cli.clickutils import get_loader_options\n\n    '''\n      IMPORTANT!!! This global variable is required for building any customized CLI loader.\n      When find loaders on startup it will search for any modules containing the global variable LOADER_KEY.\n    '''\n    LOADER_KEY = 'testdata'\n    LOADER_PROPS = ['rows', 'columns']\n\n\n    def test_data(rows, columns):\n        import pandas as pd\n        import numpy as np\n        import random\n        from past.utils import old_div\n        from pandas.tseries.offsets import Day\n        from dtale.utils import dict_merge\n        import string\n\n        now = pd.Timestamp(pd.Timestamp('now').date())\n        dates = pd.date_range(now - Day(364), now)\n        num_of_securities = max(old_div(rows, len(dates)), 1)  # always have at least one security\n        securities = [\n            dict(security_id=100000 + sec_id, int_val=random.randint(1, 100000000000),\n                 str_val=random.choice(string.ascii_letters) * 5)\n            for sec_id in range(num_of_securities)\n        ]\n        data = pd.concat([\n            pd.DataFrame([dict_merge(dict(date=date), sd) for sd in securities])\n            for date in dates\n        ], ignore_index=True)[['date', 'security_id', 'int_val', 'str_val']]\n\n        col_names = ['Col{}'.format(c) for c in range(columns)]\n        return pd.concat([data, pd.DataFrame(np.random.randn(len(data), columns), columns=col_names)], axis=1)\n\n\n    # IMPORTANT!!! This function is required for building any customized CLI loader.\n    def find_loader(kwargs):\n        test_data_opts = get_loader_options(LOADER_KEY, kwargs)\n        if len([f for f in test_data_opts.values() if f]):\n            def _testdata_loader():\n                return test_data(int(test_data_opts.get('rows', 1000500)), int(test_data_opts.get('columns', 96)))\n\n            return _testdata_loader\n        return None\n\nIn this example we simplying building a dataframe with some dummy data\nbased on dimensions specified on the command-line: - ``--testdata-rows``\n- ``--testdata-columns``\n\nHere's how you would use this loader:\n\n.. code:: bash\n\n    DTALE_CLI_LOADERS=./path_to_loaders bash -c 'dtale --testdata-rows 10 --testdata-columns 5'\n\nUI\n--\n\nOnce you have kicked off your D-Tale session please copy & paste the\nlink on the last line of output in your browser |image23|\n\nDimensions/Main Menu\n~~~~~~~~~~~~~~~~~~~~\n\nThe information in the upper right-hand corner gives grid dimensions\n|image24| - lower-left => row count - upper-right => column count -\nclicking the triangle displays the menu of standard functions (click\noutside menu to close it) |image25|\n\nSelecting/Deselecting Columns\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  to select a column, simply click on the column header (to deselect,\n   click the column header again)\n-  You'll notice that the columns you've selected will display in the\n   top of your browser |image26|\n\nMenu functions w/ no columns selected\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. figure:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Info_menu.png\n   :alt: \n\nDescribe\n^^^^^^^^\n\nView all the columns & their data types as well as individual details of\neach column\n\n.. figure:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Describe.png\n   :alt: \n\n+-------------+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Data Type   | Display     | Notes                                                                                                                                                                         |\n+=============+=============+===============================================================================================================================================================================+\n| date        | |image31|   |                                                                                                                                                                               |\n+-------------+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| string      | |image32|   | If you have less than or equal to 100 unique values they will be displayed at the bottom of your popup                                                                        |\n+-------------+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| int         | |image33|   | Anything with standard numeric classifications (min, max, 25%, 50%, 75%) will have a nice boxplot with the mean (if it exists) displayed as an outlier if you look closely.   |\n+-------------+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| float       | |image34|   |                                                                                                                                                                               |\n+-------------+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\nFilter\n^^^^^^\n\nApply a simple pandas ``query`` to your data (link to pandas\ndocumentation included in popup)\n\n+-------------+-------------+\n| Editing     | Result      |\n+=============+=============+\n| |image37|   | |image38|   |\n+-------------+-------------+\n\nCharts\n^^^^^^\n\nBuild custom charts based off your data.\n\n-  To build a chart you must pick a value for X & Y inputs which\n   effectively drive what data is along the X & Y axes\n-  If your data along the x-axis has duplicates you have three options:\n-  specify a group, which will create series for each group\n-  specify an aggregation, you can choose from one of the following:\n   Count, First, Last, Mean, Median, Minimum, MAximum, Standard\n   Deviation, Variance, Mean Absolute Deviation, Product of All Items,\n   Sum\n-  specify both a group & an aggregation\n-  Click the \"Load\" button which will load the data and display the\n   default cahrt type \"line\"\n-  You now have the ability to toggle between different chart types:\n   line, bar, stacked bar & pie\n-  If you have specified a group then you have the ability between\n   showing all series in one chart and breaking each series out into its\n   own chart \"Chart per Group\"\n\nHere are some examples with the following inputs: X: date, Y: Col0,\nGroup: security\\_id, Aggregation: Mean, Query:\n``security_id in (100000, 100001) and date >= '20181220' and date <= '20181231'``\n\n+--------------+-------------+-------------------+\n| Chart Type   | Chart       | Chart per Group   |\n+==============+=============+===================+\n| line         | |image47|   | |image48|         |\n+--------------+-------------+-------------------+\n| bar          | |image49|   | |image50|         |\n+--------------+-------------+-------------------+\n| stacked      | |image51|   | |image52|         |\n+--------------+-------------+-------------------+\n| pie          | |image53|   | |image54|         |\n+--------------+-------------+-------------------+\n\nThis is a very powerful feature with many more features that could be\noffered (word cloud, different statistical aggregations, etc...) so\nplease submit issues :)\n\nCorrelations\n^^^^^^^^^^^^\n\nShows a pearson correlation matrix of all numeric columns against all\nother numeric columns - By deafult, it will show a grid of pearson\ncorrelations (filtering available by using drop-down see 2nd table of\nscreenshots) - If you have a date-type column, you can click an\nindividual cell and see a timeseries of pearson correlations for that\ncolumn combination - Currently if you have multiple date-type columns\nyou will have the ability to toggle between them by way of a drop-down -\nFurthermore, you can click on individual points in the timeseries to\nview the scatter plot of the points going into that correlation\n\n+-------------+--------------+-------------+\n| Matrix      | Timeseries   | Scatter     |\n+=============+==============+=============+\n| |image58|   | |image59|    | |image60|   |\n+-------------+--------------+-------------+\n\n+-----------------+-----------------+------------------------+\n| Col1 Filtered   | Col2 Filtered   | Col1 & Col2 Filtered   |\n+=================+=================+========================+\n| |image64|       | |image65|       | |image66|              |\n+-----------------+-----------------+------------------------+\n\nHeat Map\n^^^^^^^^\n\nThis will hide any non-float columns (with the exception of the index on\nthe right) and apply a color to the background of each cell - Each float\nis renormalized to be a value between 0 and 1.0 - Each renormalized\nvalue is passed to a color scale of red(0) - yellow(0.5) - green(1.0)\n|image67|\n\nTurn off Heat Map by clicking menu option again |image68|\n\nInstances\n^^^^^^^^^\n\nThis will give you information about other D-Tale instances are running\nunder your current Python process.\n\nFor example, if you ran the following script:\n\n.. code:: python\n\n    import pandas as pd\n    import dtale\n\n    dtale.show(pd.DataFrame([dict(foo=1, bar=2, biz=3, baz=4, snoopy_D_O_double_gizzle=5)]))\n    dtale.show(pd.DataFrame([\n        dict(a=1, b=2, c=3, d=4),\n        dict(a=2, b=3, c=4, d=5),\n        dict(a=3, b=4, c=5, d=6),\n        dict(a=4, b=5, c=6, d=7)\n    ]))\n    dtale.show(pd.DataFrame([range(6), range(6), range(6), range(6), range(6), range(6)]), name=\"foo\")\n\nThis will make the **Instances** button available in all 3 of these\nD-Tale instances. Clicking that button while in the first instance\ninvoked above will give you this popup:\n\n.. figure:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Instances.png\n   :alt: \n\nThe grid above contains the following information: - Process: timestamp\nwhen the process was started along with the name (if specified in\n``dtale.show()``) - Rows: number of rows - Columns: number of columns -\nColumn Names: comma-separated string of column names (only first 30\ncharacters, hover for full listing) - Preview: this button is available\nany of the non-current instances. Clicking this will bring up left-most\n5X5 grid information for that instance - The row highlighted in green\nsignifys the current D-Tale instance - Any other row can be clicked to\nswitch to that D-Tale instance\n\nHere is an example of clicking the \"Preview\" button:\n\n.. figure:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Instances_preview.png\n   :alt: \n\nAbout\n^^^^^\n\nThis will give you information about what version of D-Tale you're\nrunning as well as if its out of date to whats on PyPi.\n\n+--------------+---------------+\n| Up To Date   | Out Of Date   |\n+==============+===============+\n| |image71|    | |image72|     |\n+--------------+---------------+\n\nResize\n^^^^^^\n\nMostly a fail-safe in the event that your columns are no longer lining\nup. Click this and should fix that\n\nIframe-mode/Full-mode\n^^^^^^^^^^^^^^^^^^^^^\n\nThis is only available if you are not viewing D-Tale from an jupyter\nnotebook output cell. This will toggle between the two types of\nfunctionality: - **Full-mode**: column selection, column-specific\noptions in in the main menu & all tools are displayed in modal windows -\n**Iframe-mode**: no column selection, column-specific menus on head\nclick & some tools will now open separate browser windows (Correlations,\nCoverage, Describe, Histogram & Instances)\n\nShutdown\n^^^^^^^^\n\nPretty self-explanatory, kills your D-Tale session (there is also an\nauto-kill process that will kill your D-Tale after an hour of\ninactivity)\n\nMenu functions w/ column(s) selected\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. figure:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Menu_one_col.png\n   :alt: \n\nMove To Front\n^^^^^^^^^^^^^\n\nMoves your column to the front of the \"unlocked\" columns\n\nLock\n^^^^\n\nAdds your column to \"locked\" columns - \"locked\" means that if you scroll\nhorizontally these columns will stay pinned to the right-hand side -\nthis is handy when you want to keep track of which date or security\\_id\nyou're looking at - by default, any index columns on the data passed to\nD-Tale will be locked\n\nUnlock\n^^^^^^\n\nRemoved column from \"locked\" columns\n\nSorting\n^^^^^^^\n\nApplies/removes sorting (Ascending/Descending/Clear) to the column\nselected\n\n*Important*: as you add sorts they sort added will be added to the end\nof the multi-sort. For example:\n\n+----------------+--------------------+\n| Action         | Sort               |\n+================+====================+\n| select \"a\"     |                    |\n+----------------+--------------------+\n| sort asc       | a (asc)            |\n+----------------+--------------------+\n| deselect \"a\"   | a (asc)            |\n+----------------+--------------------+\n| select \"b\"     | a (asc)            |\n+----------------+--------------------+\n| sort desc      | a (asc), b(desc)   |\n+----------------+--------------------+\n| select \"a\"     | a (asc), b(desc)   |\n+----------------+--------------------+\n| clear sort     | b(desc)            |\n+----------------+--------------------+\n| sort desc      | b(desc), a(desc)   |\n+----------------+--------------------+\n| select \"b\"     | b(desc), a(desc)   |\n+----------------+--------------------+\n| clear sort     |                    |\n+----------------+--------------------+\n| sort asc       | a (asc), b(asc)    |\n+----------------+--------------------+\n\nFormats\n^^^^^^^\n\nApply simple formats to numeric values in your grid\n\n+-------------+-------------+\n| Editing     | Result      |\n+=============+=============+\n| |image75|   | |image76|   |\n+-------------+-------------+\n\nHere's a grid of all the formats available with -123456.789 as input:\n\n+-----------------+------------------+\n| Format          | Output           |\n+=================+==================+\n| Precision (6)   | -123456.789000   |\n+-----------------+------------------+\n| Thousands Sep   | -123,456.789     |\n+-----------------+------------------+\n| Abbreviate      | -123k            |\n+-----------------+------------------+\n| Exponent        | -1e+5            |\n+-----------------+------------------+\n| BPS             | -1234567890BPS   |\n+-----------------+------------------+\n| Red Negatives   | -123457          |\n+-----------------+------------------+\n\nHistogram\n^^^^^^^^^\n\nDisplay histograms in bins of 5, 10, 20 or 50 for any numeric column\n\n.. figure:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Histogram.png\n   :alt: \n\nMenu functions within a Jupyter Notebook\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThese are the same functions as the menu listed earlier, but there is no\nmore column selection (instead theres menus for each column). Also the\nfollowing buttons will no longer open modals, but separate browser\nwindows: Correlations, Describe, Coverage & Instances (see images from\n`Jupyter Notebook <#jupyter-notebook>`__)\n\nThere are also menus associated with each column header which can be\ntrigger by clicking on a column header. The functions that are contained\nwithin each are: Sorting, Move To Front, Lock/Unlock, Histogram,\nDescribe, Formats (see image from `Jupyter\nNotebook <#jupyter-notebook>`__) - Histogram & Describe open separate\nbrowser windows\n\nFor Developers\n--------------\n\nCloning\n~~~~~~~\n\nClone the code (git clone ssh://git@github.com:manahl/dtale.git), then\nstart the backend server:\n\n.. code:: bash\n\n    $ git clone ssh://git@github.com:manahl/dtale.git\n    # install the dependencies\n    $ python setup.py develop\n    # start the server\n    $ python dtale --csv-path /home/jdoe/my_csv.csv --csv-parse_dates date\n\nYou can also run dtale from PyDev directly.\n\nYou will also want to import javascript dependencies and build the\nsource:\n\n.. code:: bash\n\n    $ npm install\n    # 1) a persistent server that serves the latest JS:\n    $ npm run watch\n    # 2) or one-off build:\n    $ npm run build\n\nRunning tests\n~~~~~~~~~~~~~\n\nThe usual npm test command works:\n\n::\n\n    $ npm test\n\nYou can run individual test files:\n\n::\n\n    $ TEST=static/__tests__/dtale/DataViewer-base-test.jsx npm run test-file\n\nLinting\n~~~~~~~\n\nYou can lint all the JS and CSS to confirm there's nothing obviously\nwrong with it:\n\n.. code:: bash\n\n    $ npm run lint -s\n\nYou can also lint individual JS files:\n\n.. code:: bash\n\n    $ npm run lint-js-file -s -- static/dtale/DataViewer.jsx\n\nFormatting JS\n~~~~~~~~~~~~~\n\nYou can auto-format code as follows:\n\n.. code:: bash\n\n    $ npm run format\n\nDocker Development\n~~~~~~~~~~~~~~~~~~\n\nYou can build python 27-3 & run D-Tale as follows:\n\n.. code:: bash\n\n    $ yarn run build\n    $ docker-compose build dtale_2_7\n    $ docker run -it --network host dtale_2_7:latest\n    $ python\n    >>> import pandas as pd\n    >>> df = pd.DataFrame([dict(a=1,b=2,c=3)])\n    >>> import dtale\n    >>> dtale.show(df)\n\nThen view your D-Tale instance in your browser using the link that gets\nprinted\n\nYou can build python 36-1 & run D-Tale as follows:\n\n.. code:: bash\n\n    $ yarn run build\n    $ docker-compose build dtale_3_6\n    $ docker run -it --network host dtale_3_6:latest\n    $ python\n    >>> import pandas as pd\n    >>> df = pd.DataFrame([dict(a=1,b=2,c=3)])\n    >>> import dtale\n    >>> dtale.show(df)\n\nThen view your D-Tale instance in your browser using the link that gets\nprinted\n\nStartup Behavior\n----------------\n\nHere's a little background on how the ``dtale.show()`` function works: -\nby default it will look for ports between 40000 & 49000, but you can\nchange that range by specifying the environment variables\nDTALE\\_MIN\\_PORT & DTALE\\_MAX\\_PORT - think of sessions as python\nconsoles or jupyter notebooks\n\n1) Session 1 executes ``dtale.show(df)`` our state is:\n\n+-----------+---------+-------------------+---------------------------------------+\n| Session   | Port    | Active Data IDs   | URL(s)                                |\n+===========+=========+===================+=======================================+\n| 1         | 40000   | 1                 | http://localhost:40000/dtale/main/1   |\n+-----------+---------+-------------------+---------------------------------------+\n\n2) Session 1 executes ``dtale.show(df)`` our state is:\n\n+-----------+---------+-------------------+-------------------------------------------+\n| Session   | Port    | Active Data IDs   | URL(s)                                    |\n+===========+=========+===================+===========================================+\n| 1         | 40000   | 1,2               | http://localhost:40000/dtale/main/[1,2]   |\n+-----------+---------+-------------------+-------------------------------------------+\n\n2) Session 2 executes ``dtale.show(df)`` our state is:\n\n+-----------+---------+-------------------+-------------------------------------------+\n| Session   | Port    | Active Data IDs   | URL(s)                                    |\n+===========+=========+===================+===========================================+\n| 1         | 40000   | 1,2               | http://localhost:40000/dtale/main/[1,2]   |\n+-----------+---------+-------------------+-------------------------------------------+\n| 2         | 40001   | 1                 | http://localhost:40001/dtale/main/1       |\n+-----------+---------+-------------------+-------------------------------------------+\n\n3) Session 1 executes ``dtale.show(df, port=40001, force=True)`` our\n   state is:\n\n+-----------+---------+-------------------+---------------------------------------------+\n| Session   | Port    | Active Data IDs   | URL(s)                                      |\n+===========+=========+===================+=============================================+\n| 1         | 40001   | 1,2,3             | http://localhost:40001/dtale/main/[1,2,3]   |\n+-----------+---------+-------------------+---------------------------------------------+\n\n4) Session 3 executes ``dtale.show(df)`` our state is:\n\n+-----------+---------+-------------------+---------------------------------------------+\n| Session   | Port    | Active Data IDs   | URL(s)                                      |\n+===========+=========+===================+=============================================+\n| 1         | 40001   | 1,2,3             | http://localhost:40001/dtale/main/[1,2,3]   |\n+-----------+---------+-------------------+---------------------------------------------+\n| 3         | 40000   | 1                 | http://localhost:40000/dtale/main/1         |\n+-----------+---------+-------------------+---------------------------------------------+\n\n5) Session 2 executes ``dtale.show(df)`` our state is:\n\n+-----------+---------+-------------------+---------------------------------------------+\n| Session   | Port    | Active Data IDs   | URL(s)                                      |\n+===========+=========+===================+=============================================+\n| 1         | 40001   | 1,2,3             | http://localhost:40001/dtale/main/[1,2,3]   |\n+-----------+---------+-------------------+---------------------------------------------+\n| 3         | 40000   | 1                 | http://localhost:40000/dtale/main/1         |\n+-----------+---------+-------------------+---------------------------------------------+\n| 2         | 40002   | 1                 | http://localhost:40002/dtale/main/1         |\n+-----------+---------+-------------------+---------------------------------------------+\n\n6) Session 4 executes ``dtale.show(df, port=8080)`` our state is:\n\n+-----------+---------+-------------------+---------------------------------------------+\n| Session   | Port    | Active Data IDs   | URL(s)                                      |\n+===========+=========+===================+=============================================+\n| 1         | 40001   | 1,2,3             | http://localhost:40001/dtale/main/[1,2,3]   |\n+-----------+---------+-------------------+---------------------------------------------+\n| 3         | 40000   | 1                 | http://localhost:40000/dtale/main/1         |\n+-----------+---------+-------------------+---------------------------------------------+\n| 2         | 40002   | 1                 | http://localhost:40002/dtale/main/1         |\n+-----------+---------+-------------------+---------------------------------------------+\n| 4         | 8080    | 1                 | http://localhost:8080/dtale/main/1          |\n+-----------+---------+-------------------+---------------------------------------------+\n\n7) Session 1 executes ``dtale.get_instance(1).kill()`` our state is:\n\n+-----------+---------+-------------------+-------------------------------------------+\n| Session   | Port    | Active Data IDs   | URL(s)                                    |\n+===========+=========+===================+===========================================+\n| 1         | 40001   | 2,3               | http://localhost:40001/dtale/main/[2,3]   |\n+-----------+---------+-------------------+-------------------------------------------+\n| 3         | 40000   | 1                 | http://localhost:40000/dtale/main/1       |\n+-----------+---------+-------------------+-------------------------------------------+\n| 2         | 40002   | 1                 | http://localhost:40002/dtale/main/1       |\n+-----------+---------+-------------------+-------------------------------------------+\n| 4         | 8080    | 1                 | http://localhost:8080/dtale/main/1        |\n+-----------+---------+-------------------+-------------------------------------------+\n\n7) Session 5 sets DTALE\\_MIN\\_RANGE to 30000 and DTALE\\_MAX\\_RANGE 39000\n   and executes ``dtale.show(df)`` our state is:\n\n+-----------+---------+---------------------+-------------------------------------------+\n| Session   | Port    | Active Data ID(s)   | URL(s)                                    |\n+===========+=========+=====================+===========================================+\n| 1         | 40001   | 2,3                 | http://localhost:40001/dtale/main/[2,3]   |\n+-----------+---------+---------------------+-------------------------------------------+\n| 3         | 40000   | 1                   | http://localhost:40000/dtale/main/1       |\n+-----------+---------+---------------------+-------------------------------------------+\n| 2         | 40002   | 1                   | http://localhost:40002/dtale/main/1       |\n+-----------+---------+---------------------+-------------------------------------------+\n| 4         | 8080    | 1                   | http://localhost:8080/dtale/main/1        |\n+-----------+---------+---------------------+-------------------------------------------+\n| 5         | 30000   | 1                   | http://localhost:30000/dtale/main/1       |\n+-----------+---------+---------------------+-------------------------------------------+\n\nDocumentation\n-------------\n\nHave a look at the `detailed\ndocumentation <https://dtale.readthedocs.io>`__.\n\nRequirements\n------------\n\nD-Tale works with:\n\n-  Back-end\n\n   -  arctic\n   -  Flask\n   -  Flask-Caching\n   -  Flask-Compress\n   -  flasgger\n   -  Pandas\n   -  scipy\n   -  six\n\n-  Front-end\n\n   -  react-virtualized\n   -  chart.js\n\nAcknowledgements\n----------------\n\nD-Tale has been under active development at `Man\nNumeric <http://www.numeric.com/>`__ since 2019.\n\nOriginal concept and implementation: `Andrew\nSchonfeld <https://github.com/aschonfeld>`__\n\nContributors:\n\n-  `Wilfred Hughes <https://github.com/Wilfred>`__\n-  `Dominik Christ <https://github.com/DominikMChrist>`__\n-  `Chris Boddy <https://github.com/cboddy>`__\n-  `Jason Holden <https://github.com/jasonkholden>`__\n-  `Tom Taylor <https://github.com/TomTaylorLondon>`__\n-  `Vincent Riemer <https://github.com/vincentriemer>`__\n-  `Fernando Saravia Rajal <https://github.com/fersarr>`__\n-  Mike Kelly\n-  `Youssef Habchi <http://youssef-habchi.com/>`__ - title font\n-  ... and many others ...\n\nContributions welcome!\n\nLicense\n-------\n\nD-Tale is licensed under the GNU LGPL v2.1. A copy of which is included\nin `LICENSE <LICENSE>`__\n\n.. |image0| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Title.png\n   :target: https://github.com/man-group/dtale\n.. |CircleCI| image:: https://circleci.com/gh/man-group/dtale.svg?style=shield&circle-token=4b67588a87157cc03b484fb96be438f70b5cd151\n   :target: https://circleci.com/gh/man-group/dtale\n.. |PyPI| image:: https://img.shields.io/pypi/pyversions/dtale.svg\n   :target: https://pypi.python.org/pypi/dtale/\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/dtale/badge\n   :target: https://dtale.readthedocs.io\n.. |codecov| image:: https://codecov.io/gh/man-group/dtale/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/man-group/dtale\n.. |Downloads| image:: https://pepy.tech/badge/dtale\n   :target: https://pepy.tech/project/dtale\n.. |image6| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/blog/dtale_demo_mini.gif\n.. |image7| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/blog/dtale_ipython.gif\n.. |image8| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/blog/dtale_demo_mini.gif\n.. |image9| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/blog/dtale_ipython.gif\n.. |image10| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Python_Terminal.png\n.. |image11| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/ipython1.png\n.. |image12| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/ipython2.png\n.. |image13| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/ipython3.png\n.. |image14| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/ipython1.png\n.. |image15| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/ipython2.png\n.. |image16| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/ipython3.png\n.. |image17| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Column_menu.png\n.. |image18| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/correlations_popup.png\n.. |image19| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/describe_popup.png\n.. |image20| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/histogram_popup.png\n.. |image21| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_popup.png\n.. |image22| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/instances_popup.png\n.. |image23| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Browser1.png\n.. |image24| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Info_cell.png\n.. |image25| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Info_menu_small.png\n.. |image26| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Col_select.png\n.. |image27| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Describe_date.png\n.. |image28| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Describe_string.png\n.. |image29| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Describe_int.png\n.. |image30| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Describe_float.png\n.. |image31| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Describe_date.png\n.. |image32| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Describe_string.png\n.. |image33| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Describe_int.png\n.. |image34| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Describe_float.png\n.. |image35| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Filter_apply.png\n.. |image36| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Post_filter.png\n.. |image37| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Filter_apply.png\n.. |image38| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Post_filter.png\n.. |image39| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_line.png\n.. |image40| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_line_pg.png\n.. |image41| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_bar.png\n.. |image42| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_bar_pg.png\n.. |image43| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_stacked.png\n.. |image44| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_stacked_pg.png\n.. |image45| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_pie.png\n.. |image46| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_pie_pg.png\n.. |image47| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_line.png\n.. |image48| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_line_pg.png\n.. |image49| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_bar.png\n.. |image50| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_bar_pg.png\n.. |image51| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_stacked.png\n.. |image52| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_stacked_pg.png\n.. |image53| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_pie.png\n.. |image54| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/charts_pie_pg.png\n.. |image55| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations.png\n.. |image56| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations_ts.png\n.. |image57| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations_scatter.png\n.. |image58| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations.png\n.. |image59| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations_ts.png\n.. |image60| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations_scatter.png\n.. |image61| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations_col1.png\n.. |image62| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations_col2.png\n.. |image63| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations_both.png\n.. |image64| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations_col1.png\n.. |image65| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations_col2.png\n.. |image66| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Correlations_both.png\n.. |image67| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Heatmap.png\n.. |image68| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Heatmap_toggle.png\n.. |image69| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/About-up-to-date.png\n.. |image70| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/About-out-of-date.png\n.. |image71| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/About-up-to-date.png\n.. |image72| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/About-out-of-date.png\n.. |image73| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Formatting_apply.png\n.. |image74| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Post_formatting.png\n.. |image75| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Formatting_apply.png\n.. |image76| image:: https://raw.githubusercontent.com/man-group/dtale/master/docs/images/Post_formatting.png\n\nChangelog\n---------\n\n1.6.0 (2019-12-19)\n~~~~~~~~~~~~~~~~~~\n\n-  charts integration\n\n   -  the ability to look at data in line, bar, stacked bar & pie charts\n   -  the ability to group & aggregate data within the charts\n\n-  direct ipython iframes to correlations & charts pages with\n   pre-selected inputs\n-  the ability to access instances from code by data id\n   ``dtale.get_instance(data_id)``\n-  view all active data instances ``dtale.instances()``\n\n1.5.1 (2019-12-12)\n~~~~~~~~~~~~~~~~~~\n\n-  conversion of new flask instance for each ``dtale.show`` call to\n   serving all data associated with one parent process under the same\n   flask instance unless otherwise specified by the user (the ``force``\n   parameter)\n\n1.5.0 (2019-12-02)\n~~~~~~~~~~~~~~~~~~\n\n-  ipython integration\n\n   -  ipython output cell adjustment\n   -  column-wise menu support\n   -  browser window popups for: Correlations, Coverage, Describe,\n      Histogram & Instances\n\n1.4.1 (2019-11-20)\n~~~~~~~~~~~~~~~~~~\n\n-  `#32 <https://github.com/man-group/dtale/issues/32>`__: unpin\n   jsonschema by moving flasgger to ``extras_require``\n\n1.4.0 (2019-11-19)\n~~~~~~~~~~~~~~~~~~\n\n-  Correlations Pearson Matrix filters\n-  \"name\" display in title tab\n-  \"Heat Map\" toggle\n-  dropped unused \"Flask-Caching\" requirement\n\n1.3.7 (2019-11-12)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  `#28 <https://github.com/man-group/dtale/issues/28>`__:\n      \"Instances\" menu option will now be displayed by default\n   -  `#29 <https://github.com/man-group/dtale/issues/29>`__: add hints\n      to how users can navigate the correlations popup\n   -  add \"unicode\" as a string classification for column width\n      calculation\n\n1.3.6 (2019-11-08)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  choose between ``pandas.corr`` & ``numpy.corrcoef`` depending on\n      presence of NaNs\n   -  hide timeseries correlations when date columns only contain one\n      day\n\n1.3.5 (2019-11-07)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  duplicate loading of histogram data\n   -  string serialization failing when mixing ``future.str`` & ``str``\n      in scatter function\n\n1.3.4 (2019-11-07)\n~~~~~~~~~~~~~~~~~~\n\n-  updated correlation calculation to use ``numpy.corrcoef`` for\n   performance purposes\n-  github rebranding from manahl -> man-group\n\n1.3.3 (2019-11-05)\n~~~~~~~~~~~~~~~~~~\n\n-  hotfix for failing test under certain versions of ``future`` package\n\n1.3.2 (2019-11-05)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  display of histogram column information\n   -  reload of hidden \"processes\" input when loading instances data\n   -  correlations json failures on string conversion\n\n1.3.1 (2019-10-29)\n~~~~~~~~~~~~~~~~~~\n\n-  fix for incompatible str types when directly altering state of data\n   in running D-Tale instance\n\n1.3.0 (2019-10-29)\n~~~~~~~~~~~~~~~~~~\n\n-  ``webbrowser`` integration (the ability to automatically open a\n   webbrowser upon calling ``dtale.show()``)\n-  flag for hiding the \"Shutdown\" button for long-running demos\n-  \"Instances\" navigator popup for viewing all activate D-Tale instances\n   for the current python process\n\n1.2.0 (2019-10-24)\n~~~~~~~~~~~~~~~~~~\n\n-  `#20 <https://github.com/man-group/dtale/issues/13>`__: fix for data\n   being overriden with each new instance\n-  `#21 <https://github.com/man-group/dtale/issues/13>`__: fix for\n   displaying timestamps if they exist\n-  calling ``show()`` now returns an object which can alter the state of\n   a process\n\n   -  accessing/altering state through the ``data`` property\n   -  shutting down a process using the ``kill()`` function\n\n1.1.1 (2019-10-23)\n~~~~~~~~~~~~~~~~~~\n\n-  `#13 <https://github.com/man-group/dtale/issues/13>`__: fix for\n   auto-detection of column widths for strings and floats\n\n1.1.0 (2019-10-08)\n~~~~~~~~~~~~~~~~~~\n\n-  IE support\n-  **Describe** & **About** popups\n-  Custom CLI support\n\n1.0.0 (2019-09-06)\n~~~~~~~~~~~~~~~~~~\n\n-  Initial public release",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/man-group/dtale",
    "keywords": "numeric,pandas,visualization,flask",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtale",
    "package_url": "https://pypi.org/project/dtale/",
    "platform": "",
    "project_url": "https://pypi.org/project/dtale/",
    "project_urls": {
      "Homepage": "https://github.com/man-group/dtale"
    },
    "release_url": "https://pypi.org/project/dtale/1.6.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Web Client for Visualizing Pandas Objects",
    "version": "1.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17146159,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8d4f9a7d5618d1e0d3b0497470cae8251a10ee73d20aa8921f29903298144c9",
        "md5": "0715e889d845236f8a0375fd33899e12",
        "sha256": "1b4c3d668a5b56fba13de20e3fd4096cb921d778fe55f474ee06ffff155dcfc5"
      },
      "downloads": -1,
      "filename": "dtale-1.6.0-py2.7.egg",
      "has_sig": false,
      "md5_digest": "0715e889d845236f8a0375fd33899e12",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 11855430,
      "upload_time": "2019-12-19T18:09:18",
      "upload_time_iso_8601": "2019-12-19T18:09:18.353712Z",
      "url": "https://files.pythonhosted.org/packages/d8/d4/f9a7d5618d1e0d3b0497470cae8251a10ee73d20aa8921f29903298144c9/dtale-1.6.0-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "490995b0abaac4c1c4f5af4e721ea1d346ea9669459caa3635af3d4c38c528a0",
        "md5": "6bfd47c27132faaf24410ab74ff515fa",
        "sha256": "28e063d9c80d0249dfc04523ba5d33d0a306897fc3e12820f3d872f840c380be"
      },
      "downloads": -1,
      "filename": "dtale-1.6.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6bfd47c27132faaf24410ab74ff515fa",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 11827209,
      "upload_time": "2019-12-19T18:09:31",
      "upload_time_iso_8601": "2019-12-19T18:09:31.091528Z",
      "url": "https://files.pythonhosted.org/packages/49/09/95b0abaac4c1c4f5af4e721ea1d346ea9669459caa3635af3d4c38c528a0/dtale-1.6.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7860ea04fbb8045aa52677244cec6c8d69407a15b8fed16f68a9b8d79cb0a9c7",
        "md5": "d307ab8f08ed78aa1dffba02dba6ad6f",
        "sha256": "4718c8f862bf7a948f8b55699b7a5e2028266f8c2160f3e80e2273d640646f98"
      },
      "downloads": -1,
      "filename": "dtale-1.6.0-py3.6.egg",
      "has_sig": false,
      "md5_digest": "d307ab8f08ed78aa1dffba02dba6ad6f",
      "packagetype": "bdist_egg",
      "python_version": "3.6",
      "requires_python": null,
      "size": 11855747,
      "upload_time": "2019-12-19T18:09:37",
      "upload_time_iso_8601": "2019-12-19T18:09:37.478240Z",
      "url": "https://files.pythonhosted.org/packages/78/60/ea04fbb8045aa52677244cec6c8d69407a15b8fed16f68a9b8d79cb0a9c7/dtale-1.6.0-py3.6.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9c5eaf74bd797cc4da90c35c216888f6bb9f4406a95e721ee4827b0029cfff5",
        "md5": "8c19219e06070bc0da41a7689cb1e963",
        "sha256": "8b3b4bf7e51dea8b92c442f8cf0737f14e6a7265612121ef214bf37cdddf4151"
      },
      "downloads": -1,
      "filename": "dtale-1.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8c19219e06070bc0da41a7689cb1e963",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11731736,
      "upload_time": "2019-12-19T18:09:43",
      "upload_time_iso_8601": "2019-12-19T18:09:43.968904Z",
      "url": "https://files.pythonhosted.org/packages/c9/c5/eaf74bd797cc4da90c35c216888f6bb9f4406a95e721ee4827b0029cfff5/dtale-1.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}