{
  "info": {
    "author": "MAN Alpha Technology",
    "author_email": "ManAlphaTech@man.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering"
    ],
    "description": "|D-Tale|\n\n`Live Demo <http://andrewschonfeld.pythonanywhere.com/dtale/main>`__\n\n--------------\n\n|CircleCI| |PyPI| |ReadTheDocs| |codecov| |Downloads|\n\nGetting Started\n---------------\n\n.. figure:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/blog/dtale_demo_mini.gif\n   :alt: \n\nSetup/Activate your environment and install the egg\n\n**Python 3**\n\n.. code:: bash\n\n    # create a virtualenv, if you haven't already created one\n    $ python3 -m venv ~/pyenvs/dtale\n    $ source ~/pyenvs/dtale/bin/activate\n\n    # install dtale egg (important to use the \"--upgrade\" every time you install so it will grab the latest version)\n    $ pip install --upgrade dtale\n\n**Python 2**\n\n.. code:: bash\n\n    # create a virtualenv, if you haven't already created one\n    $ python -m virtualenv ~/pyenvs/dtale\n    $ source ~/pyenvs/dtale/bin/activate\n\n    # install dtale egg (important to use the \"--upgrade\" every time you install so it will grab the latest version)\n    $ pip install --upgrade dtale\n\nNow you will have to ability to use D-Tale from the command-line or\nwithin a python-enabled terminal\n\nCommand-line\n~~~~~~~~~~~~\n\nLoading data from **arctic**\n\n.. code:: bash\n\n    dtale --arctic-host mongodb://localhost:27027 --arctic-library jdoe.my_lib --arctic-node my_node --arctic-start 20130101 --arctic-end 20161231\n\nLoading data from **CSV**\n\n.. code:: bash\n\n    dtale --csv-path /home/jdoe/my_csv.csv --csv-parse_dates date\n\nLoading data from a **Custom** loader - Using the DTALE\\_CLI\\_LOADERS\nenvironment variable, specify a path to a location containing some\npython modules - Any python module containing the global variables\nLOADER\\_KEY & LOADER\\_PROPS will be picked up as a custom loader -\nLOADER\\_KEY: the key that will be associated with your loader. By\ndefault you are given **arctic** & **csv** (if you use one of these are\nyour key it will override these) - LOADER\\_PROPS: the individual props\navailable to be specified. - For example, with arctic we have host,\nlibrary, node, start & end. - If you leave this property as an empty\nlist your loader will be treated as a flag. For example, instead of\nusing all the arctic properties we would simply specify ``--arctic``\n(this wouldn't work well in arctic's case since it depends on all those\nproperties) - You will also need to specify a function with the\nfollowing signature ``def find_loader(kwargs)`` which returns a function\nthat returns a dataframe or ``None`` - Here is an example of a custom\nloader:\n\n::\n\n    from dtale.cli.clickutils import get_loader_options\n\n    '''\n      IMPORTANT!!! This global variable is required for building any customized CLI loader.\n      When find loaders on startup it will search for any modules containing the global variable LOADER_KEY.\n    '''\n    LOADER_KEY = 'testdata'\n    LOADER_PROPS = ['rows', 'columns']\n\n\n    def test_data(rows, columns):\n        import pandas as pd\n        import numpy as np\n        import random\n        from past.utils import old_div\n        from pandas.tseries.offsets import Day\n        from dtale.utils import dict_merge\n        import string\n\n        now = pd.Timestamp(pd.Timestamp('now').date())\n        dates = pd.date_range(now - Day(364), now)\n        num_of_securities = old_div(rows, len(dates))\n        securities = [\n            dict(security_id=100000 + sec_id, int_val=random.randint(1, 100000000000),\n                 str_val=random.choice(string.ascii_letters) * 5)\n            for sec_id in range(num_of_securities)\n        ]\n        data = pd.concat([\n            pd.DataFrame([dict_merge(dict(date=date), sd) for sd in securities])\n            for date in dates\n        ], ignore_index=True)[['date', 'security_id', 'int_val', 'str_val']]\n\n        col_names = ['Col{}'.format(c) for c in range(columns)]\n        return pd.concat([data, pd.DataFrame(np.random.randn(len(data), columns), columns=col_names)], axis=1)\n\n\n    # IMPORTANT!!! This function is required for building any customized CLI loader.\n    def find_loader(kwargs):\n        test_data_opts = get_loader_options(LOADER_KEY, kwargs)\n        if len([f for f in test_data_opts.values() if f]):\n            def _testdata_loader():\n                return test_data(int(test_data_opts.get('rows', 1000500)), int(test_data_opts.get('columns', 96)))\n\n            return _testdata_loader\n        return None\n\nIn this example we simplying building a dataframe with some dummy data\nbased on dimensions specified on the command-line: - ``--testdata-rows``\n- ``--testdata-columns``\n\nHere's how you would use this loader:\n\n.. code:: bash\n\n    DTALE_CLI_LOADERS=./path_to_loaders bash -c 'dtale --testdata-rows 10 --testdata-columns 5'\n\nPython Terminal\n~~~~~~~~~~~~~~~\n\nThis comes courtesy of PyCharm |Python Terminal| Feel free to invoke\n``python`` or ``ipython`` directly and use the commands in the\nscreenshot above and it should work\n\nUI\n--\n\nOnce you have kicked off your D-Tale session please copy & paste the\nlink on the last line of output in your browser |Chrome #1|\n\nThe information in the upper right-hand corner is similar to saslook\n|Info| - lower-left => row count - upper-right => column count -\nclicking the triangle displays the menu of standard functions (click\noutside menu to close it) |Menu|\n\nSelecting/Deselecting Columns - to select a column, simply click on the\ncolumn header (to deselect, click the column header again) - You'll\nnotice that the columns you've selected will display in the top of your\nbrowser |Column Select|\n\nMenu functions w/ no columns selected\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. figure:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Info_menu.png\n   :alt: Menu\n\n   Menu\n\n-  **Describe**: view all the columns & their data types as well as\n   individual details of each column |Describe|\n\n+-------------+---------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Data Type   | Display             | Notes                                                                                                                                                                         |\n+=============+=====================+===============================================================================================================================================================================+\n| date        | |Describe date|     |                                                                                                                                                                               |\n+-------------+---------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| string      | |Describe string|   | If you have less than or equal to 100 unique values they will be displayed at the bottom of your popup                                                                        |\n+-------------+---------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| int         | |Describe int|      | Anything with standard numeric classifications (min, max, 25%, 50%, 75%) will have a nice boxplot with the mean (if it exists) displayed as an outlier if you look closely.   |\n+-------------+---------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| float       | |Describe float|    |                                                                                                                                                                               |\n+-------------+---------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n-  **Filter**: apply a simple pandas ``query`` to your data (link to\n   pandas documentation included in popup)\n\n+------------------+--------------------+\n| Editing          | Result             |\n+==================+====================+\n| |Filter Apply|   | |Filter Applied|   |\n+------------------+--------------------+\n\n-  **Coverage**: check for coverage gaps on column(s) by way of other\n   column(s) as group(s)\n-  Select column(s) in \"Group(s)\" & \"Col(s)\"\n\n   -  date-type columns you can also specify a frequency of D, W, M, Q,\n      Y\n   -  Select multiple values in \"Cols(s)\" and/or \"Groups(s)\" by holdings\n      the SHIFT key as you click\n\n-  Click \"Load\"\n-  The output will be the counts of non-nan records in \"Col(s)\" grouped\n   by your selections in \"Group(s)\"\n\n+--------------------+----------------------------+\n| Daily              | Daily Regional             |\n+====================+============================+\n| |Coverage Daily|   | |Coverage Daily Regions|   |\n+--------------------+----------------------------+\n\n-  **Correlations**: shows a pearson correlation matrix of all numeric\n   columns against all other numeric columns\n-  By deafult, it will show a grid of pearson correlations\n-  If you have a date-type column, you can click an individual cell and\n   see a timeseries of pearson correlations for that column combination\n\n   -  Currently if you have multiple date-type columns you will have the\n      ability to toggle between them by way of a drop-down\n\n-  Furthermore, you can click on individual points in the timeseries to\n   view the scatter plot of the points going into that correlation\n\n+------------------+----------------+-------------+\n| Matrix           | Timeseries     | Scatter     |\n+==================+================+=============+\n| |Correlations|   | |Timeseries|   | |Scatter|   |\n+------------------+----------------+-------------+\n\n-  **About**: This will give you information about what version of\n   D-Tale you're running as well as if its out of date to whats on PyPi.\n\n+----------------------+-----------------------+\n| Up To Date           | Out Of Date           |\n+======================+=======================+\n| |About-up-to-date|   | |About-out-of-date|   |\n+----------------------+-----------------------+\n\n-  Resize: mostly a fail-safe in the event that your columns are no\n   longer lining up. Click this and should fix that\n-  Shutdown: pretty self-explanatory, kills your D-Tale session (there\n   is also an auto-kill process that will kill your D-Tale after an hour\n   of inactivity)\n\nMenu functions w/ one column is selected\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. figure:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Menu_one_col.png\n   :alt: Menu Single-Column\n\n   Menu Single-Column\n\n-  **Move To Front**: moves your column to the front of the \"unlocked\"\n   columns\n-  **Lock**: adds your column to \"locked\" columns\n-  \"locked\" means that if you scroll horizontally these columns will\n   stay pinned to the right-hand side\n-  this is handy when you want to keep track of which date or\n   security\\_id you're looking at\n-  by default, any index columns on the data passed to D-Tale will be\n   locked\n-  **Unlock**: removed column from \"locked\" columns\n-  **Sorting** (Ascending/Descending/Clear): applies/removes sorting to\n   the column selected\n-  Important: as you add sorts they sort added will be added to the end\n   of the multi-sort. For example:\n\n+----------------+--------------------+\n| Action         | Sort               |\n+================+====================+\n| select \"a\"     |                    |\n+----------------+--------------------+\n| sort asc       | a (asc)            |\n+----------------+--------------------+\n| deselect \"a\"   | a (asc)            |\n+----------------+--------------------+\n| select \"b\"     | a (asc)            |\n+----------------+--------------------+\n| sort desc      | a (asc), b(desc)   |\n+----------------+--------------------+\n| select \"a\"     | a (asc), b(desc)   |\n+----------------+--------------------+\n| clear sort     | b(desc)            |\n+----------------+--------------------+\n| sort desc      | b(desc), a(desc)   |\n+----------------+--------------------+\n| select \"b\"     | b(desc), a(desc)   |\n+----------------+--------------------+\n| clear sort     |                    |\n+----------------+--------------------+\n| sort asc       | a (asc), b(asc)    |\n+----------------+--------------------+\n\n-  **Formats**: apply simple formats to numeric values in your grid\n\n\\|Editing\\|Result\\| \\|--------\\|:------:\\| \\|\\ |Formatting\nApply|\\ \\|\\ |Formatting Applied|\\ \\| - Here's a grid of all the formats\navailable with -123456.789 as input:\n\n+-----------------+------------------+\n| Format          | Output           |\n+=================+==================+\n| Precision (6)   | -123456.789000   |\n+-----------------+------------------+\n| Thousands Sep   | -123,456.789     |\n+-----------------+------------------+\n| Abbreviate      | -123k            |\n+-----------------+------------------+\n| Exponent        | -1e+5            |\n+-----------------+------------------+\n| BPS             | -1234567890BPS   |\n+-----------------+------------------+\n| Red Negatives   | -123457          |\n+-----------------+------------------+\n\n-  **Histogram**: display histograms in bins of 5, 10, 20 or 50 for any\n   numeric column |Histogram|\n\nFor Developers\n--------------\n\nGetting Started\n~~~~~~~~~~~~~~~\n\nClone the code (git clone ssh://git@github.com:manahl/dtale.git), then\nstart the backend server:\n\n.. code:: bash\n\n    $ git clone ssh://git@github.com:manahl/dtale.git\n    # install the dependencies\n    $ python setup.py develop\n    # start the server\n    $ python dtale --csv-path /home/jdoe/my_csv.csv --csv-parse_dates date\n\nYou can also run dtale from PyDev directly.\n\nYou will also want to import javascript dependencies and build the\nsource:\n\n.. code:: bash\n\n    $ npm install\n    # 1) a persistent server that serves the latest JS:\n    $ npm run watch\n    # 2) or one-off build:\n    $ npm run build\n\nRunning tests\n~~~~~~~~~~~~~\n\nThe usual npm test command works:\n\n::\n\n    $ npm test\n\nYou can run individual test files:\n\n::\n\n    $ TEST=static/__tests__/dtale/DataViewer-base-test.jsx npm run test-file\n\nLinting\n~~~~~~~\n\nYou can lint all the JS and CSS to confirm there's nothing obviously\nwrong with it:\n\n.. code:: bash\n\n    $ npm run lint -s\n\nYou can also lint individual JS files:\n\n.. code:: bash\n\n    $ npm run lint-js-file -s -- static/dtale/DataViewer.jsx\n\nFormatting JS\n~~~~~~~~~~~~~\n\nYou can auto-format code as follows:\n\n.. code:: bash\n\n    $ npm run format\n\nDocker development\n~~~~~~~~~~~~~~~~~~\n\nYou can build python 27-3 & run D-Tale as follows:\n\n.. code:: bash\n\n    $ yarn run build\n    $ docker-compose build dtale_2_7\n    $ docker run -it --network host dtale_2_7:latest\n    $ python\n    >>> import pandas as pd\n    >>> df = pd.DataFrame([dict(a=1,b=2,c=3)])\n    >>> import dtale\n    >>> dtale.show(df)\n\nThen view your D-Tale instance in your browser using the link that gets\nprinted\n\nYou can build python 36-1 & run D-Tale as follows:\n\n.. code:: bash\n\n    $ yarn run build\n    $ docker-compose build dtale_3_6\n    $ docker run -it --network host dtale_3_6:latest\n    $ python\n    >>> import pandas as pd\n    >>> df = pd.DataFrame([dict(a=1,b=2,c=3)])\n    >>> import dtale\n    >>> dtale.show(df)\n\nThen view your D-Tale instance in your browser using the link that gets\nprinted\n\nDocumentation\n-------------\n\nHave a look at the `detailed\ndocumentation <https://dtale.readthedocs.io>`__.\n\nRequirements\n------------\n\nD-Tale works with:\n\n-  Back-end\n\n   -  arctic\n   -  Flask\n   -  Flask-Caching\n   -  Flask-Compress\n   -  flasgger\n   -  Pandas\n   -  scipy\n   -  six\n\n-  Front-end\n\n   -  react-virtualized\n   -  chart.js\n\nAcknowledgements\n----------------\n\nD-Tale has been under active development at `Man\nNumeric <http://www.numeric.com/>`__ since 2019.\n\nOriginal concept and implementation: `Andrew\nSchonfeld <https://github.com/aschonfeld>`__\n\nContributors:\n\n-  `Wilfred Hughes <https://github.com/Wilfred>`__\n-  `Dominik Christ <https://github.com/DominikMChrist>`__\n-  `Chris Boddy <https://github.com/cboddy>`__\n-  `Jason Holden <https://github.com/jasonkholden>`__\n-  `Youssef Habchi <http://youssef-habchi.com/>`__ - title font\n-  ... and many others ...\n\nContributions welcome!\n\nLicense\n-------\n\nD-Tale is licensed under the GNU LGPL v2.1. A copy of which is included\nin `LICENSE <LICENSE>`__\n\n.. |D-Tale| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Title.png\n   :target: https://github.com/manahl/dtale\n.. |CircleCI| image:: https://circleci.com/gh/manahl/dtale.svg?style=shield&circle-token=4b67588a87157cc03b484fb96be438f70b5cd151\n   :target: https://circleci.com/gh/manahl/dtale\n.. |PyPI| image:: https://img.shields.io/pypi/pyversions/dtale.svg\n   :target: https://pypi.python.org/pypi/dtale/\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/dtale/badge\n   :target: https://dtale.readthedocs.io\n.. |codecov| image:: https://codecov.io/gh/manahl/dtale/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/manahl/dtale\n.. |Downloads| image:: https://pepy.tech/badge/dtale\n   :target: https://pepy.tech/project/dtale\n.. |Python Terminal| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Python_Terminal.png\n.. |Chrome #1| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Browser1.png\n.. |Info| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Info_cell.png\n.. |Menu| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Info_menu_small.png\n.. |Column Select| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Col_select.png\n.. |Describe| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Describe.png\n.. |Describe date| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Describe_date.png\n.. |Describe string| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Describe_string.png\n.. |Describe int| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Describe_int.png\n.. |Describe float| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Describe_float.png\n.. |Filter Apply| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Filter_apply.png\n.. |Filter Applied| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Post_filter.png\n.. |Coverage Daily| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Coverage_daily.png\n.. |Coverage Daily Regions| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Coverage_daily_regions.png\n.. |Correlations| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Correlations.png\n.. |Timeseries| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Correlations_ts.png\n.. |Scatter| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Correlations_scatter.png\n.. |About-up-to-date| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/About-up-to-date.png\n.. |About-out-of-date| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/About-out-of-date.png\n.. |Formatting Apply| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Formatting_apply.png\n.. |Formatting Applied| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Post_formatting.png\n.. |Histogram| image:: https://raw.githubusercontent.com/manahl/dtale/master/docs/images/Histogram.png\n\nChangelog\n\n1.0.0 (2019-09-06)\n~~~~~~~~~~~~~~~~~~\n\n-  Initial public release\n\n1.1.0 (2019-10-08)\n~~~~~~~~~~~~~~~~~~\n\n-  IE support\n-  **Describe** & **About** popups\n-  Custom CLI support\n\n1.1.1 (2019-10-23)\n~~~~~~~~~~~~~~~~~~\n\n-  `#13 <https://github.com/manahl/dtale/issues/13>`__: fix for\n   auto-detection of column widths for strings and floats\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/manahl/dtale",
    "keywords": "numeric,pandas,visualization,flask",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtale",
    "package_url": "https://pypi.org/project/dtale/",
    "platform": "",
    "project_url": "https://pypi.org/project/dtale/",
    "project_urls": {
      "Homepage": "https://github.com/manahl/dtale"
    },
    "release_url": "https://pypi.org/project/dtale/1.1.1/",
    "requires_dist": [
      "arctic",
      "jsonschema (<3.0.0)",
      "flasgger (==0.9.3)",
      "Flask",
      "Flask-Caching",
      "Flask-Compress",
      "future",
      "itsdangerous",
      "pandas",
      "requests",
      "scipy",
      "six"
    ],
    "requires_python": "",
    "summary": "Web Client for Visualizing Pandas Objects",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17146159,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e94e65ed85a1a03cb45b8cc9dd34d5b97ccd5fd9e25947ced2a46d73e302e61",
        "md5": "c344474065f127723fc08cf014eb8df3",
        "sha256": "38dd0a79a7c9b60fde881c6ae02f7a7bad523f05bddf4d3ff0b05e5d4aec943f"
      },
      "downloads": -1,
      "filename": "dtale-1.1.1-py2.7.egg",
      "has_sig": false,
      "md5_digest": "c344474065f127723fc08cf014eb8df3",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 4373184,
      "upload_time": "2019-10-23T18:34:19",
      "upload_time_iso_8601": "2019-10-23T18:34:19.139509Z",
      "url": "https://files.pythonhosted.org/packages/7e/94/e65ed85a1a03cb45b8cc9dd34d5b97ccd5fd9e25947ced2a46d73e302e61/dtale-1.1.1-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d96c81a3e2d371072d79827e816d3a9d3a488f3572ed39b928cbdd32b7a7ada7",
        "md5": "346609e27e6af80a177ca0523210204e",
        "sha256": "71f1d9365fdc94384a59dda694978d31b84717d2bc3d1e6ef9cc0a5eeafc309f"
      },
      "downloads": -1,
      "filename": "dtale-1.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "346609e27e6af80a177ca0523210204e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 4353041,
      "upload_time": "2019-10-23T18:29:23",
      "upload_time_iso_8601": "2019-10-23T18:29:23.359526Z",
      "url": "https://files.pythonhosted.org/packages/d9/6c/81a3e2d371072d79827e816d3a9d3a488f3572ed39b928cbdd32b7a7ada7/dtale-1.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b279dbd5265fc2b27beca6c71e42890c90a07cd5f78b58acd599aa0302a817e3",
        "md5": "5d7b54faf3dedf18d280d21bf5c8eb8e",
        "sha256": "beeeec0fdc883029fb2cdcb00ee9be48a4749717c780d3587df4265c3e0a262e"
      },
      "downloads": -1,
      "filename": "dtale-1.1.1-py3.6.egg",
      "has_sig": false,
      "md5_digest": "5d7b54faf3dedf18d280d21bf5c8eb8e",
      "packagetype": "bdist_egg",
      "python_version": "3.6",
      "requires_python": null,
      "size": 4373474,
      "upload_time": "2019-10-23T18:29:31",
      "upload_time_iso_8601": "2019-10-23T18:29:31.899771Z",
      "url": "https://files.pythonhosted.org/packages/b2/79/dbd5265fc2b27beca6c71e42890c90a07cd5f78b58acd599aa0302a817e3/dtale-1.1.1-py3.6.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0dcf166c13924d69710e0f90119ff45ec16538f28cea2ddc42a8db548370aea",
        "md5": "4307a17ea5c4dec48af3ddd0e9439c06",
        "sha256": "512a21fad9993cafc992cafbbbd7f12ead533fbd6a7f06e9984a17dfc92d8c0a"
      },
      "downloads": -1,
      "filename": "dtale-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4307a17ea5c4dec48af3ddd0e9439c06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4319680,
      "upload_time": "2019-10-23T18:29:40",
      "upload_time_iso_8601": "2019-10-23T18:29:40.419759Z",
      "url": "https://files.pythonhosted.org/packages/e0/dc/f166c13924d69710e0f90119ff45ec16538f28cea2ddc42a8db548370aea/dtale-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}