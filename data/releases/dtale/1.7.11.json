{
  "info": {
    "author": "MAN Alpha Technology",
    "author_email": "ManAlphaTech@man.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering"
    ],
    "description": "|image0|\n\n`Live Demo <http://andrewschonfeld.pythonanywhere.com>`__\n\n--------------\n\n|CircleCI| |PyPI| |ReadTheDocs| |codecov| |Downloads|\n\nWhat is it?\n-----------\n\nD-Tale is the combination of a Flask back-end and a React front-end to\nbring you an easy way to view & analyze Pandas data structures. It\nintegrates seamlessly with ipython notebooks & python/ipython terminals.\nCurrently this tool supports such Pandas objects as DataFrame, Series,\nMultiIndex, DatetimeIndex & RangeIndex.\n\nOrigins\n-------\n\nD-Tale was the product of a SAS to Python conversion. What was\noriginally a perl script wrapper on top of SAS’s ``insight`` function is\nnow a lightweight web client on top of Pandas data structures.\n\nIn The News\n-----------\n\n-  `Man Institute <https://www.man.com/maninstitute/d-tale>`__ (warning:\n   contains deprecated functionality)\n-  `Python\n   Bytes <https://pythonbytes.fm/episodes/show/169/jupyter-notebooks-natively-on-your-ipad>`__\n-  `Pip Install Python YouTube\n   Channel <https://m.youtube.com/watch?v=0RihZNdQc7k&feature=youtu.be>`__\n\nContents\n--------\n\n-  `Getting Started <#getting-started>`__\n\n   -  `Python Terminal <#python-terminal>`__\n   -  `Jupyter Notebook <#jupyter-notebook>`__\n   -  `Google Colab & Kaggle <#google-colab--kaggle>`__\n   -  `R with Reticulate <#r-with-reticulate>`__\n   -  `Command-line <#command-line>`__\n\n-  `UI <#ui>`__\n\n   -  `Dimensions/Main Menu <#dimensionsmain-menu>`__\n   -  `Selecting/Deselecting Columns <#selectingdeselecting-columns>`__\n   -  `Main Menu Functions <#main-menu-functions>`__\n\n      -  `Describe <#describe>`__, `Filter <#filter>`__,\n         `Charts <#charts>`__, `Correlations <#correlations>`__, `Heat\n         Map <#heat-map>`__, `Instances <#instances>`__,\n         `About <#about>`__, `Resize <#resize>`__,\n         `Shutdown <#shutdown>`__\n\n   -  `Column Menu Functions <#column-menu-functions>`__\n\n      -  `Moving Columns <#moving-columns>`__, `Hiding\n         Columns <#hiding-columns>`__, `Building\n         Columns <#building-columns>`__, `Lock <#lock>`__,\n         `Unlock <#unlock>`__, `Sorting <#sorting>`__,\n         `Formats <#formats>`__, `Histogram <#histogram>`__\n\n   -  `Menu Functions within a Jupyter\n      Notebook <#menu-functions-within-a-jupyter-notebook>`__\n\n-  `For Developers <#for-developers>`__\n\n   -  `Cloning <#cloning>`__\n   -  `Running Tests <#running-tests>`__\n   -  `Linting <#linting>`__\n   -  `Formatting JS <#formatting-js>`__\n   -  `Docker Development <#docker-development>`__\n\n-  `Startup Behavior <#startup-behavior>`__\n-  `Documentation <#documentation>`__\n-  `Requirements <#requirements>`__\n-  `Acknowledgements <#acknowledgements>`__\n-  `License <#license>`__\n\nGetting Started\n---------------\n\n======== ========\nPyCharm  jupyter\n======== ========\n|image6| |image7|\n======== ========\n\nInstalling the egg\n\n.. code:: bash\n\n   # install dtale egg (important to use the \"--upgrade\" every time you install so it will grab the latest version)\n   $ pip install --upgrade dtale\n\nNow you will have the ability to use D-Tale from the command-line or\nwithin a python-enabled terminal\n\nPython Terminal\n~~~~~~~~~~~~~~~\n\nThis comes courtesy of PyCharm |image8| Feel free to invoke ``python``\nor ``ipython`` directly and use the commands in the screenshot above and\nit should work\n\nIssues With Windows Firewall\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you run into issues with viewing D-Tale in your browser on Windows\nplease try making Python public under “Allowed Apps” in your Firewall\nconfiguration. Here is a nice article: `How to Allow Apps to Communicate\nThrough the Windows\nFirewall <https://www.howtogeek.com/howto/uncategorized/how-to-create-exceptions-in-windows-vista-firewall/>`__\n\nAdditional functions available programatically\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   import dtale\n   import pandas as pd\n\n   df = pd.DataFrame([dict(a=1,b=2,c=3)])\n\n   # Assigning a reference to a running D-Tale process\n   d = dtale.show(df)\n\n   # Accessing data associated with D-Tale process\n   tmp = d.data.copy()\n   tmp['d'] = 4\n\n   # Altering data associated with D-Tale process\n   # FYI: this will clear any front-end settings you have at the time for this process (filter, sorts, formatting)\n   d.data = tmp\n\n   # Shutting down D-Tale process\n   d.kill()\n\n   # using Python's `webbrowser` package it will try and open your server's default browser to this process\n   d.open_browser()\n\n   # There is also some helpful metadata about the process\n   d._data_id  # the process's data identifier\n   d._url  # the url to access the process\n\n   d2 = dtale.get_instance(d._data_id)  # returns a new reference to the instance running at that data_id\n\n   dtale.instances()  # prints a list of all ids & urls of running D-Tale sessions\n\nDuplicate data check\n^^^^^^^^^^^^^^^^^^^^\n\nTo help guard against users loading the same data to D-Tale multiple\ntimes and thus eating up precious memory, we have a loose check for\nduplicate input data. The check runs the following: \\* Are row & column\ncount the same as a previously loaded piece of data? \\* Are the names\nand order of columns the same as a previously loaded piece of data?\n\nIf both these conditions are true then you will be presented with an\nerror and a link to the previously loaded data. Here is an example of\nhow the interaction looks: |image9|\n\nJupyter Notebook\n~~~~~~~~~~~~~~~~\n\nWithin any jupyter (ipython) notebook executing a cell like this will\ndisplay a small instance of D-Tale in the output cell. Here are some\nexamples:\n\n============== ========== =========\n``dtale.show`` assignment instance\n============== ========== =========\n|image10|      |image11|  |image12|\n============== ========== =========\n\nIf you are running ipython<=5.0 then you also have the ability to adjust\nthe size of your output cell for the most recent instance displayed:\n\n|image13|\n\nOne thing of note is that a lot of the modal popups you see in the\nstandard browser version will now open separate browser windows for\nspacial convienence:\n\n============ ============ ========= ========= =========\nColumn Menus Correlations Describe  Histogram Instances\n============ ============ ========= ========= =========\n|image14|    |image15|    |image16| |image17| |image18|\n============ ============ ========= ========= =========\n\nGoogle Colab & Kaggle\n~~~~~~~~~~~~~~~~~~~~~\n\nThese are hosted notebook sites and thanks to the work of\n`flask_ngrok <https://github.com/gstaff/flask-ngrok>`__ users can run\nD-Tale within their notebooks.\n\n**DISCLAIMER:** It is import that you set ``USE_NGROK`` to true when\nusing D-Tale within these two services. Here is an example:\n\n::\n\n   import pandas as pd\n\n   import dtale\n   import dtale.app as dtale_app\n\n   dtale_app.USE_NGROK = True\n\n   dtale.show(pd.DataFrame([1,2,3]))\n\nHere are some video tutorials of each:\n\n+-----------------------+-----------------------+-----------------------+\n| Service               | Tutorial              | Addtl Notes           |\n+=======================+=======================+=======================+\n| Google Colab          | |image19|             |                       |\n+-----------------------+-----------------------+-----------------------+\n| Kaggle                | |image20|             | make sure you switch  |\n|                       |                       | the “Internet” toggle |\n|                       |                       | to “On” under         |\n|                       |                       | settings of your      |\n|                       |                       | notebook so you can   |\n|                       |                       | install the egg from  |\n|                       |                       | pip                   |\n+-----------------------+-----------------------+-----------------------+\n\nR with Reticulate\n~~~~~~~~~~~~~~~~~\n\nI was able to get D-Tale running in R using reticulate. Here is an\nexample:\n\n::\n\n   library('reticulate')\n   dtale <- import('dtale')\n   df <- read.csv('https://vincentarelbundock.github.io/Rdatasets/csv/boot/acme.csv')\n   dtale$show(df, subprocess=FALSE, open_browser=TRUE)\n\nNow the problem with doing this is that D-Tale is not running as a\nsubprocess so it will block your R console and you’ll lose out the\nfollowing functions: - manipulating the state of your data from your R\nconsole - adding more data to D-Tale\n\n``open_browser=TRUE`` isn’t required and won’t work if you don’t have a\ndefault browser installed on your machine. If you don’t use that\nparameter simply copy & paste the URL that gets printed to your console\nin the browser of your choice.\n\nI’m going to do some more digging on why R doesn’t seem to like using\npython subprocesses (not sure if it something with how reticulate\nmanages the state of python) and post any findings to this thread.\n\nHere’s some helpful links for getting setup:\n\nreticulate\n\ninstalling python packages\n\nCommand-line\n~~~~~~~~~~~~\n\nBase CLI options (run ``dtale --help`` to see all options available)\n\n+-----------------------------+----------------------------------------+\n| Prop                        | Description                            |\n+=============================+========================================+\n| ``--host``                  | the name of the host you would like to |\n|                             | use (most likely not needed since      |\n|                             | ``socket.gethostname()`` should figure |\n|                             | this out)                              |\n+-----------------------------+----------------------------------------+\n| ``--port``                  | the port you would like to assign to   |\n|                             | your D-Tale instance                   |\n+-----------------------------+----------------------------------------+\n| ``--name``                  | an optional name you can assign to     |\n|                             | your D-Tale instance (this will be     |\n|                             | displayed in the ``<title>`` &         |\n|                             | Instances popup)                       |\n+-----------------------------+----------------------------------------+\n| ``--debug``                 | turn on Flask’s “debug” mode for your  |\n|                             | D-Tale instance                        |\n+-----------------------------+----------------------------------------+\n| ``--no-reaper``             | flag to turn off auto-reaping          |\n|                             | subprocess (kill D-Tale instances      |\n|                             | after an hour of inactivity), good for |\n|                             | long-running displays                  |\n+-----------------------------+----------------------------------------+\n| ``--open-browser``          | flag to automatically open up your     |\n|                             | server’s default browser to your       |\n|                             | D-Tale instance                        |\n+-----------------------------+----------------------------------------+\n| ``--force``                 | flag to force D-Tale to try an kill    |\n|                             | any pre-existing process at the port   |\n|                             | you’ve specified so it can use it      |\n+-----------------------------+----------------------------------------+\n\nLoading data from `arctic\\ (high performance datastore for pandas\ndataframes) <https://github.com/man-group/arctic>`__\n\n.. code:: bash\n\n   dtale --arctic-host mongodb://localhost:27027 --arctic-library jdoe.my_lib --arctic-node my_node --arctic-start 20130101 --arctic-end 20161231\n\nLoading data from **CSV**\n\n.. code:: bash\n\n   dtale --csv-path /home/jdoe/my_csv.csv --csv-parse_dates date\n\nLoading data from **JSON**\n\n.. code:: bash\n\n   dtale --json-path /home/jdoe/my_json.json --json-parse_dates date\n\nor\n\n.. code:: bash\n\n   dtale --json-path http://json-endpoint --json-parse_dates date\n\nLoading data from a **Custom** loader - Using the DTALE_CLI_LOADERS\nenvironment variable, specify a path to a location containing some\npython modules - Any python module containing the global variables\nLOADER_KEY & LOADER_PROPS will be picked up as a custom loader -\nLOADER_KEY: the key that will be associated with your loader. By default\nyou are given **arctic** & **csv** (if you use one of these are your key\nit will override these) - LOADER_PROPS: the individual props available\nto be specified. - For example, with arctic we have host, library, node,\nstart & end. - If you leave this property as an empty list your loader\nwill be treated as a flag. For example, instead of using all the arctic\nproperties we would simply specify ``--arctic`` (this wouldn’t work well\nin arctic’s case since it depends on all those properties) - You will\nalso need to specify a function with the following signature\n``def find_loader(kwargs)`` which returns a function that returns a\ndataframe or ``None`` - Here is an example of a custom loader:\n\n.. code:: python\n\n   from dtale.cli.clickutils import get_loader_options\n\n   '''\n     IMPORTANT!!! This global variable is required for building any customized CLI loader.\n     When find loaders on startup it will search for any modules containing the global variable LOADER_KEY.\n   '''\n   LOADER_KEY = 'testdata'\n   LOADER_PROPS = ['rows', 'columns']\n\n\n   def test_data(rows, columns):\n       import pandas as pd\n       import numpy as np\n       import random\n       from past.utils import old_div\n       from pandas.tseries.offsets import Day\n       from dtale.utils import dict_merge\n       import string\n\n       now = pd.Timestamp(pd.Timestamp('now').date())\n       dates = pd.date_range(now - Day(364), now)\n       num_of_securities = max(old_div(rows, len(dates)), 1)  # always have at least one security\n       securities = [\n           dict(security_id=100000 + sec_id, int_val=random.randint(1, 100000000000),\n                str_val=random.choice(string.ascii_letters) * 5)\n           for sec_id in range(num_of_securities)\n       ]\n       data = pd.concat([\n           pd.DataFrame([dict_merge(dict(date=date), sd) for sd in securities])\n           for date in dates\n       ], ignore_index=True)[['date', 'security_id', 'int_val', 'str_val']]\n\n       col_names = ['Col{}'.format(c) for c in range(columns)]\n       return pd.concat([data, pd.DataFrame(np.random.randn(len(data), columns), columns=col_names)], axis=1)\n\n\n   # IMPORTANT!!! This function is required for building any customized CLI loader.\n   def find_loader(kwargs):\n       test_data_opts = get_loader_options(LOADER_KEY, kwargs)\n       if len([f for f in test_data_opts.values() if f]):\n           def _testdata_loader():\n               return test_data(int(test_data_opts.get('rows', 1000500)), int(test_data_opts.get('columns', 96)))\n\n           return _testdata_loader\n       return None\n\nIn this example we simplying building a dataframe with some dummy data\nbased on dimensions specified on the command-line: - ``--testdata-rows``\n- ``--testdata-columns``\n\nHere’s how you would use this loader:\n\n.. code:: bash\n\n   DTALE_CLI_LOADERS=./path_to_loaders bash -c 'dtale --testdata-rows 10 --testdata-columns 5'\n\nUI\n--\n\nOnce you have kicked off your D-Tale session please copy & paste the\nlink on the last line of output in your browser |image21|\n\nDimensions/Main Menu\n~~~~~~~~~~~~~~~~~~~~\n\nThe information in the upper right-hand corner gives grid dimensions\n|image22| - lower-left => row count - upper-right => column count -\nclicking the triangle displays the menu of standard functions (click\noutside menu to close it) |image23|\n\nMain Menu Functions\n~~~~~~~~~~~~~~~~~~~\n\nDescribe\n^^^^^^^^\n\nView all the columns & their data types as well as individual details of\neach column\n\n|image24|\n\n+-----------------------+-----------------------+-----------------------+\n| Data Type             | Display               | Notes                 |\n+=======================+=======================+=======================+\n| date                  | |image25|             |                       |\n+-----------------------+-----------------------+-----------------------+\n| string                | |image26|             | If you have less than |\n|                       |                       | or equal to 100       |\n|                       |                       | unique values they    |\n|                       |                       | will be displayed at  |\n|                       |                       | the bottom of your    |\n|                       |                       | popup                 |\n+-----------------------+-----------------------+-----------------------+\n| int                   | |image27|             | Anything with         |\n|                       |                       | standard numeric      |\n|                       |                       | classifications (min, |\n|                       |                       | max, 25%, 50%, 75%)   |\n|                       |                       | will have a nice      |\n|                       |                       | boxplot with the mean |\n|                       |                       | (if it exists)        |\n|                       |                       | displayed as an       |\n|                       |                       | outlier if you look   |\n|                       |                       | closely.              |\n+-----------------------+-----------------------+-----------------------+\n| float                 | |image28|             |                       |\n+-----------------------+-----------------------+-----------------------+\n\nFilter\n^^^^^^\n\nApply a simple pandas ``query`` to your data (link to pandas\ndocumentation included in popup)\n\nContext Variables are user-defined values passed in via the\n``context_variables`` argument to dtale.show(); they can be referenced\nin filters by prefixing the variable name with ‘@’.\n\nFor example, here is how you can use context variables in a pandas\nquery:\n\n.. code:: python\n\n   import pandas as pd\n\n   df = pd.DataFrame([\n     dict(name='Joe', age=7),\n     dict(name='Bob', age=23),\n     dict(name='Ann', age=45),\n     dict(name='Cat', age=88),\n   ])\n   two_oldest_ages = df['age'].nlargest(2)\n   df.query('age in @two_oldest_ages')\n\nAnd here is how you would pass that context variable to D-Tale:\n``dtale.show(df, context_variables=dict(two_oldest_ages=two_oldest_ages))``\n\n========= =========\nEditing   Result\n========= =========\n|image29| |image30|\n========= =========\n\nFYI: For python 3 users, there is now support for filtering on column\nnames with special characters in them (EX: ‘a.b’) :metal:\n\nCharts\n^^^^^^\n\nBuild custom charts based off your data(powered by\n`plotly/dash <https://github.com/plotly/dash>`__).\n\n-  The Charts will open in a tab because of the fact there is so much\n   functionality offered there you’ll probably want to be able to\n   reference the main grid data in the original tab\n-  To build a chart you must pick a value for X & Y inputs which\n   effectively drive what data is along the X & Y axes\n\n   -  If you are working with a 3-Dimensional chart (heatmap, 3D\n      Scatter, Surface) you’ll need to enter a value for the Z axis as\n      well\n\n-  Once you have entered all the required axes a chart will be built\n-  If your data along the x-axis (or combination of x & y in the case of\n   3D charts) has duplicates you have three options:\n\n   -  Specify a group, which will create series for each group\n   -  Specify an aggregation, you can choose from one of the following:\n      Count, First, Last, Mean, Median, Minimum, Maximum, Standard\n      Deviation, Variance, Mean Absolute Deviation, Product of All\n      Items, Sum, Rolling\n\n      -  Specifying a “Rolling” aggregation will also require a Window &\n         a Computation (Correlation, Count, Covariance, Kurtosis,\n         Maximum, Mean, Median, Minimum, Skew, Standard Deviation, Sum\n         or Variance)\n      -  For heatmaps you will also have access to the “Correlation”\n         aggregation since viewing correlation matrices in heatmaps is\n         very useful. This aggregation is not supported elsewhere\n\n   -  Specify both a group & an aggregation\n\n-  You now have the ability to toggle between different chart types:\n   line, bar, pie, wordcloud, heatmap, 3D scatter & surface\n-  If you have specified a group then you have the ability between\n   showing all series in one chart and breaking each series out into its\n   own chart “Chart per Group”\n\nHere are some examples:\n\n========== ========= ===============\nChart Type Chart     Chart per Group\n========== ========= ===============\nline       |image31| |image32|\nbar        |image33| |image34|\nstacked    |image35| |image36|\npie        |image37| \nwordcloud  |image38| |image39|\nheatmap    |image40| \n3D scatter |image41| \nsurface    |image42| \n========== ========= ===============\n\nSelecting multiple columns for the Y-Axis will produce similar results\nto grouping in the sense that the chart will contain multiple series,\nbut the difference is that for each column there will be a different\nY-Axis associated with it in case the values contained within each\ncolumn are on different scales.\n\n============ ===================\nMulti Y-Axis Editing Axis Ranges\n============ ===================\n|image43|    |image44|\n============ ===================\n\nWith a bar chart that only has a single Y-Axis you have the ability to\nsort the bars based on the values for the Y-Axis\n\n========= =========\nPre-sort  Post-sort\n========= =========\n|image45| |image46|\n========= =========\n\nThis is a very powerful feature with many more features that could be\noffered (linked subplots, different statistical aggregations, etc…) so\nplease submit issues :)\n\n**Disclaimer: Long Running Chart Requests**\n\nIf you choose to build a chart that requires a lot of computational\nresources then it will take some time to run. Based on the way Flask &\nplotly/dash interact this will block you from performing any other\nrequest until it completes. There are two courses of action in this\nsituation:\n\n1) Restart your jupyter notebook kernel or python console\n2) Open a new D-Tale session on a different port than the current\n   session. You can do that with the following command:\n   ``dtale.show(df, port=[any open port], force=True)``\n\nIf you miss the legacy (non-plotly/dash) charts, not to worry! They are\nstill available from the link in the upper-right corner, but on for a\nlimited time… Here is the documentation for those: `Legacy\nCharts <https://github.com/man-group/dtale/blob/master/docs/LEGACY_CHARTS.md>`__\n\nCorrelations\n^^^^^^^^^^^^\n\nShows a pearson correlation matrix of all numeric columns against all\nother numeric columns - By default, it will show a grid of pearson\ncorrelations (filtering available by using drop-down see 2nd table of\nscreenshots) - If you have a date-type column, you can click an\nindividual cell and see a timeseries of pearson correlations for that\ncolumn combination - Currently if you have multiple date-type columns\nyou will have the ability to toggle between them by way of a drop-down -\nFurthermore, you can click on individual points in the timeseries to\nview the scatter plot of the points going into that correlation\n\n========= ========== =========\nMatrix    Timeseries Scatter\n========= ========== =========\n|image47| |image48|  |image49|\n========= ========== =========\n\n============= ============= ====================\nCol1 Filtered Col2 Filtered Col1 & Col2 Filtered\n============= ============= ====================\n|image50|     |image51|     |image52|\n============= ============= ====================\n\nWhen the data being viewed in D-Tale has date or timestamp columns but\nfor each date/timestamp vlaue there is only one row of data the behavior\nof the Correlations popup is a little different - Instead of a\ntimeseries correlation chart the user is given a rolling correlation\nchart which can have the window (default: 10) altered - The scatter\nchart will be created when a user clicks on a point in the rollign\ncorrelation chart. The data displayed in the scatter will be for the\nranges of dates involved in the rolling correlation for that date.\n\n========= ============\nData      Correlations\n========= ============\n|image53| |image54|\n========= ============\n\nHeat Map\n^^^^^^^^\n\nThis will hide any non-float columns (with the exception of the index on\nthe right) and apply a color to the background of each cell - Each float\nis renormalized to be a value between 0 and 1.0 - Each renormalized\nvalue is passed to a color scale of red(0) - yellow(0.5) - green(1.0)\n|image55|\n\nTurn off Heat Map by clicking menu option again |image56|\n\nInstances\n^^^^^^^^^\n\nThis will give you information about other D-Tale instances are running\nunder your current Python process.\n\nFor example, if you ran the following script:\n\n.. code:: python\n\n   import pandas as pd\n   import dtale\n\n   dtale.show(pd.DataFrame([dict(foo=1, bar=2, biz=3, baz=4, snoopy_D_O_double_gizzle=5)]))\n   dtale.show(pd.DataFrame([\n       dict(a=1, b=2, c=3, d=4),\n       dict(a=2, b=3, c=4, d=5),\n       dict(a=3, b=4, c=5, d=6),\n       dict(a=4, b=5, c=6, d=7)\n   ]))\n   dtale.show(pd.DataFrame([range(6), range(6), range(6), range(6), range(6), range(6)]), name=\"foo\")\n\nThis will make the **Instances** button available in all 3 of these\nD-Tale instances. Clicking that button while in the first instance\ninvoked above will give you this popup:\n\n|image57|\n\nThe grid above contains the following information: - Process: timestamp\nwhen the process was started along with the name (if specified in\n``dtale.show()``) - Rows: number of rows - Columns: number of columns -\nColumn Names: comma-separated string of column names (only first 30\ncharacters, hover for full listing) - Preview: this button is available\nany of the non-current instances. Clicking this will bring up left-most\n5X5 grid information for that instance - The row highlighted in green\nsignifys the current D-Tale instance - Any other row can be clicked to\nswitch to that D-Tale instance\n\nHere is an example of clicking the “Preview” button:\n\n|image58|\n\nAbout\n^^^^^\n\nThis will give you information about what version of D-Tale you’re\nrunning as well as if its out of date to whats on PyPi.\n\n========== ===========\nUp To Date Out Of Date\n========== ===========\n|image59|  |image60|\n========== ===========\n\nResize\n^^^^^^\n\nMostly a fail-safe in the event that your columns are no longer lining\nup. Click this and should fix that\n\nShutdown\n^^^^^^^^\n\nPretty self-explanatory, kills your D-Tale session (there is also an\nauto-kill process that will kill your D-Tale after an hour of\ninactivity)\n\nColumn Menu Functions\n~~~~~~~~~~~~~~~~~~~~~\n\n|image61|\n\nMoving Columns\n^^^^^^^^^^^^^^\n\n|image62|\n\nAll column movements are saved on the server so refreshing your browser\nwon’t lose them :ok_hand:\n\nHiding Columns\n^^^^^^^^^^^^^^\n\n|image63|\n\nAll column movements are saved on the server so refreshing your browser\nwon’t lose them :ok_hand:\n\nBuilding Columns\n^^^^^^^^^^^^^^^^\n\n|image64|\n\nThis video shows you how to build the following: - Numeric:\nadding/subtracting two columns or columns with static values - Bins:\nbucketing values using pandas cut & qcut as well as assigning custom\nlabels - Dates: retrieving date properties (hour, weekday, month…) as\nwell as conversions (month end)\n\nLock\n^^^^\n\nAdds your column to “locked” columns - “locked” means that if you scroll\nhorizontally these columns will stay pinned to the right-hand side -\nthis is handy when you want to keep track of which date or security_id\nyou’re looking at - by default, any index columns on the data passed to\nD-Tale will be locked\n\nUnlock\n^^^^^^\n\nRemoved column from “locked” columns\n\nSorting\n^^^^^^^\n\nApplies/removes sorting (Ascending/Descending/Clear) to the column\nselected\n\n*Important*: as you add sorts they sort added will be added to the end\nof the multi-sort. For example:\n\n========================= ================\nAction                    Sort\n========================= ================\nclick “a”                 \nsort asc                  a (asc)\nclick “b”                 a (asc)\nsort desc                 a (asc), b(desc)\nclick “a”                 a (asc), b(desc)\nsort None                 b(desc)\nsort desc                 b(desc), a(desc)\nclick “X” on sort display \n========================= ================\n\nFormats\n^^^^^^^\n\nApply simple formats to numeric values in your grid\n\n======= ========= =========\nType    Editing   Result\n======= ========= =========\nNumeric |image65| |image66|\nDate    |image67| |image68|\nString  |image69| |image70|\n======= ========= =========\n\nHere’s a grid of all the formats available with -123456.789 as input:\n\n============= ==============\nFormat        Output\n============= ==============\nPrecision (6) -123456.789000\nThousands Sep -123,456.789\nAbbreviate    -123k\nExponent      -1e+5\nBPS           -1234567890BPS\nRed Negatives -123457\n============= ==============\n\nHistogram\n^^^^^^^^^\n\nDisplay histograms in any number of bins (default: 20), simply type a\nnew integer value in the bins input\n\n|image71|\n\nMenu Functions Depending on Browser Dimensions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDepending on the dimensions of your browser window the following buttons\nwill not open modals, but rather separate browser windows: Correlations,\nDescribe & Instances (see images from `Jupyter\nNotebook <#jupyter-notebook>`__, also Charts will always open in a\nseparate browser window)\n\nFor Developers\n--------------\n\nCloning\n~~~~~~~\n\nClone the code (git clone ssh://git@github.com:manahl/dtale.git), then\nstart the backend server:\n\n.. code:: bash\n\n   $ git clone ssh://git@github.com:manahl/dtale.git\n   # install the dependencies\n   $ python setup.py develop\n   # start the server\n   $ python dtale --csv-path /home/jdoe/my_csv.csv --csv-parse_dates date\n\nYou can also run dtale from PyDev directly.\n\nYou will also want to import javascript dependencies and build the\nsource:\n\n.. code:: bash\n\n   $ npm install\n   # 1) a persistent server that serves the latest JS:\n   $ npm run watch\n   # 2) or one-off build:\n   $ npm run build\n\nRunning tests\n~~~~~~~~~~~~~\n\nThe usual npm test command works:\n\n::\n\n   $ npm test\n\nYou can run individual test files:\n\n::\n\n   $ TEST=static/__tests__/dtale/DataViewer-base-test.jsx npm run test-file\n\nLinting\n~~~~~~~\n\nYou can lint all the JS and CSS to confirm there’s nothing obviously\nwrong with it:\n\n.. code:: bash\n\n   $ npm run lint -s\n\nYou can also lint individual JS files:\n\n.. code:: bash\n\n   $ npm run lint-js-file -s -- static/dtale/DataViewer.jsx\n\nFormatting JS\n~~~~~~~~~~~~~\n\nYou can auto-format code as follows:\n\n.. code:: bash\n\n   $ npm run format\n\nDocker Development\n~~~~~~~~~~~~~~~~~~\n\nYou can build python 27-3 & run D-Tale as follows:\n\n.. code:: bash\n\n   $ yarn run build\n   $ docker-compose build dtale_2_7\n   $ docker run -it --network host dtale_2_7:latest\n   $ python\n   >>> import pandas as pd\n   >>> df = pd.DataFrame([dict(a=1,b=2,c=3)])\n   >>> import dtale\n   >>> dtale.show(df)\n\nThen view your D-Tale instance in your browser using the link that gets\nprinted\n\nYou can build python 36-1 & run D-Tale as follows:\n\n.. code:: bash\n\n   $ yarn run build\n   $ docker-compose build dtale_3_6\n   $ docker run -it --network host dtale_3_6:latest\n   $ python\n   >>> import pandas as pd\n   >>> df = pd.DataFrame([dict(a=1,b=2,c=3)])\n   >>> import dtale\n   >>> dtale.show(df)\n\nThen view your D-Tale instance in your browser using the link that gets\nprinted\n\nStartup Behavior\n----------------\n\nHere’s a little background on how the ``dtale.show()`` function works: -\nby default it will look for ports between 40000 & 49000, but you can\nchange that range by specifying the environment variables DTALE_MIN_PORT\n& DTALE_MAX_PORT - think of sessions as python consoles or jupyter\nnotebooks\n\n1) Session 1 executes ``dtale.show(df)`` our state is:\n\n======= ===== =============== ===================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== ===================================\n1       40000 1               http://localhost:40000/dtale/main/1\n======= ===== =============== ===================================\n\n2) Session 1 executes ``dtale.show(df)`` our state is:\n\n======= ===== =============== =======================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =======================================\n1       40000 1,2             http://localhost:40000/dtale/main/[1,2]\n======= ===== =============== =======================================\n\n2) Session 2 executes ``dtale.show(df)`` our state is:\n\n======= ===== =============== =======================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =======================================\n1       40000 1,2             http://localhost:40000/dtale/main/[1,2]\n2       40001 1               http://localhost:40001/dtale/main/1\n======= ===== =============== =======================================\n\n3) Session 1 executes ``dtale.show(df, port=40001, force=True)`` our\n   state is:\n\n======= ===== =============== =========================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =========================================\n1       40001 1,2,3           http://localhost:40001/dtale/main/[1,2,3]\n======= ===== =============== =========================================\n\n4) Session 3 executes ``dtale.show(df)`` our state is:\n\n======= ===== =============== =========================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =========================================\n1       40001 1,2,3           http://localhost:40001/dtale/main/[1,2,3]\n3       40000 1               http://localhost:40000/dtale/main/1\n======= ===== =============== =========================================\n\n5) Session 2 executes ``dtale.show(df)`` our state is:\n\n======= ===== =============== =========================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =========================================\n1       40001 1,2,3           http://localhost:40001/dtale/main/[1,2,3]\n3       40000 1               http://localhost:40000/dtale/main/1\n2       40002 1               http://localhost:40002/dtale/main/1\n======= ===== =============== =========================================\n\n6) Session 4 executes ``dtale.show(df, port=8080)`` our state is:\n\n======= ===== =============== =========================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =========================================\n1       40001 1,2,3           http://localhost:40001/dtale/main/[1,2,3]\n3       40000 1               http://localhost:40000/dtale/main/1\n2       40002 1               http://localhost:40002/dtale/main/1\n4       8080  1               http://localhost:8080/dtale/main/1\n======= ===== =============== =========================================\n\n7) Session 1 executes ``dtale.get_instance(1).kill()`` our state is:\n\n======= ===== =============== =======================================\nSession Port  Active Data IDs URL(s)\n======= ===== =============== =======================================\n1       40001 2,3             http://localhost:40001/dtale/main/[2,3]\n3       40000 1               http://localhost:40000/dtale/main/1\n2       40002 1               http://localhost:40002/dtale/main/1\n4       8080  1               http://localhost:8080/dtale/main/1\n======= ===== =============== =======================================\n\n7) Session 5 sets DTALE_MIN_RANGE to 30000 and DTALE_MAX_RANGE 39000 and\n   executes ``dtale.show(df)`` our state is:\n\n======= ===== ================= =======================================\nSession Port  Active Data ID(s) URL(s)\n======= ===== ================= =======================================\n1       40001 2,3               http://localhost:40001/dtale/main/[2,3]\n3       40000 1                 http://localhost:40000/dtale/main/1\n2       40002 1                 http://localhost:40002/dtale/main/1\n4       8080  1                 http://localhost:8080/dtale/main/1\n5       30000 1                 http://localhost:30000/dtale/main/1\n======= ===== ================= =======================================\n\nDocumentation\n-------------\n\nHave a look at the `detailed\ndocumentation <https://dtale.readthedocs.io>`__.\n\nRequirements\n------------\n\nD-Tale works with:\n\n-  Back-end\n\n   -  arctic [extra]\n   -  dash\n   -  dash_daq\n   -  Flask\n   -  Flask-Compress\n   -  Pandas\n   -  scipy\n   -  six\n\n-  Front-end\n\n   -  react-virtualized\n   -  chart.js\n\nAcknowledgements\n----------------\n\nD-Tale has been under active development at `Man\nNumeric <http://www.numeric.com/>`__ since 2019.\n\nOriginal concept and implementation: `Andrew\nSchonfeld <https://github.com/aschonfeld>`__\n\nContributors:\n\n-  `Phillip Dupuis <https://github.com/phillipdupuis>`__\n-  `Dominik Christ <https://github.com/DominikMChrist>`__\n-  `Chris Boddy <https://github.com/cboddy>`__\n-  `Jason Holden <https://github.com/jasonkholden>`__\n-  `Tom Taylor <https://github.com/TomTaylorLondon>`__\n-  `Fernando Saravia Rajal <https://github.com/fersarr>`__\n-  `Wilfred Hughes <https://github.com/Wilfred>`__\n-  Mike Kelly\n-  `Vincent Riemer <https://github.com/vincentriemer>`__\n-  `Youssef Habchi <http://youssef-habchi.com/>`__ - title font\n-  … and many others …\n\nContributions welcome!\n\nLicense\n-------\n\nD-Tale is licensed under the GNU LGPL v2.1. A copy of which is included\nin `LICENSE <LICENSE>`__\n\n.. |image0| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Title.png\n   :target: https://github.com/man-group/dtale\n.. |CircleCI| image:: https://circleci.com/gh/man-group/dtale.svg?style=shield&circle-token=4b67588a87157cc03b484fb96be438f70b5cd151\n   :target: https://circleci.com/gh/man-group/dtale\n.. |PyPI| image:: https://img.shields.io/pypi/pyversions/dtale.svg\n   :target: https://pypi.python.org/pypi/dtale/\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/dtale/badge\n   :target: https://dtale.readthedocs.io\n.. |codecov| image:: https://codecov.io/gh/man-group/dtale/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/man-group/dtale\n.. |Downloads| image:: https://pepy.tech/badge/dtale\n   :target: https://pepy.tech/project/dtale\n.. |image6| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/gifs/dtale_demo_mini.gif\n.. |image7| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/gifs/dtale_ipython.gif\n.. |image8| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Python_Terminal.png\n.. |image9| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Duplicate_data.png\n.. |image10| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython1.png\n.. |image11| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython2.png\n.. |image12| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython3.png\n.. |image13| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython_adjust.png\n.. |image14| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Column_menu.png\n.. |image15| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/correlations_popup.png\n.. |image16| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/describe_popup.png\n.. |image17| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/histogram_popup.png\n.. |image18| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/instances_popup.png\n.. |image19| image:: http://img.youtube.com/vi/pOYl2M1clIw/0.jpg\n   :target: http://www.youtube.com/watch?v=pOYl2M1clIw\n.. |image20| image:: http://img.youtube.com/vi/8Il-2HHs2Mg/0.jpg\n   :target: http://www.youtube.com/watch?v=8Il-2HHs2Mg\n.. |image21| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Browser1.png\n.. |image22| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Info_cell.png\n.. |image23| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Info_menu_small.png\n.. |image24| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe.png\n.. |image25| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_date.png\n.. |image26| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_string.png\n.. |image27| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_int.png\n.. |image28| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_float.png\n.. |image29| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Filter_apply.png\n.. |image30| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_filter.png\n.. |image31| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/line.png\n.. |image32| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/line_pg.png\n.. |image33| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar.png\n.. |image34| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar_pg.png\n.. |image35| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/stacked.png\n.. |image36| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/stacked_pg.png\n.. |image37| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/pie.png\n.. |image38| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/wordcloud.png\n.. |image39| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/wordcloud_pg.png\n.. |image40| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/heatmap.png\n.. |image41| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/3d_scatter.png\n.. |image42| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/surface.png\n.. |image43| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/multi_col.png\n.. |image44| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/editing_axis.png\n.. |image45| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar_presort.png\n.. |image46| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar_postsort.png\n.. |image47| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations.png\n.. |image48| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_ts.png\n.. |image49| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_scatter.png\n.. |image50| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_col1.png\n.. |image51| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_col2.png\n.. |image52| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_both.png\n.. |image53| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/rolling_corr_data.png\n.. |image54| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/rolling_corr.png\n.. |image55| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Heatmap.png\n.. |image56| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Heatmap_toggle.png\n.. |image57| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Instances.png\n.. |image58| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Instances_preview.png\n.. |image59| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/About-up-to-date.png\n.. |image60| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/About-out-of-date.png\n.. |image61| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Col_menu.png\n.. |image62| image:: http://img.youtube.com/vi/We4TH477rRs/0.jpg\n   :target: http://www.youtube.com/watch?v=We4TH477rRs\n.. |image63| image:: http://img.youtube.com/vi/ryZT2Lk_YaA/0.jpg\n   :target: http://www.youtube.com/watch?v=ryZT2Lk_YaA\n.. |image64| image:: http://img.youtube.com/vi/G6wNS9-lG04/0.jpg\n   :target: http://www.youtube.com/watch?v=G6wNS9-lG04\n.. |image65| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Formatting_apply.png\n.. |image66| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_formatting.png\n.. |image67| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Formatting_date_apply.png\n.. |image68| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_date_formatting.png\n.. |image69| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Formatting_string_apply.png\n.. |image70| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_string_formatting.png\n.. |image71| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Histogram.png\n\nChangelog\n---------\n\n1.7.11 (2020-2-27)\n~~~~~~~~~~~~~~~~~~\n\n-  hotfix for dash custom.js file missing from production webpack build\n   script\n\n.. _section-1:\n\n1.7.10 (2020-2-27)\n~~~~~~~~~~~~~~~~~~\n\n-  `#75 <https://github.com/man-group/dtale/issues/75>`__, added code\n   snippet functionality to the following:\n\n   -  main grid, histogram, correlations, column building & charts\n\n-  exposed CLI loaders through the following functions dtale.show_csv,\n   dtale.show_json, dtale.show_arctic\n\n   -  build in such a way that it is easy for custom loaders to be\n      exposed as well\n\n-  `#82 <https://github.com/man-group/dtale/issues/82>`__, pinned\n   ``future`` package to be >= 0.14.0\n\n.. _section-2:\n\n1.7.9 (2020-2-24)\n~~~~~~~~~~~~~~~~~\n\n-  support for google colab\n-  bugfixes: `#71 <https://github.com/man-group/dtale/issues/71>`__,\n   `#72 <https://github.com/man-group/dtale/issues/72>`__,\n   `#73 <https://github.com/man-group/dtale/issues/73>`__\n\n.. _section-3:\n\n1.7.8 (2020-2-22)\n~~~~~~~~~~~~~~~~~\n\n-  `#77 <https://github.com/man-group/dtale/issues/77>`__, removal of\n   multiprocessed timeouts\n\n.. _section-4:\n\n1.7.7 (2020-2-22)\n~~~~~~~~~~~~~~~~~\n\n-  centralized global state\n\n.. _section-5:\n\n1.7.6 (2020-2-21)\n~~~~~~~~~~~~~~~~~\n\n-  allowing the usage of context variables within filters\n-  `#64 <https://github.com/man-group/dtale/issues/64>`__, handling for\n   loading duplicate data to dtale.show\n-  updated dtale.instances() to print urls rather than show all\n   instances\n-  removal of Dash “Export to png” function\n-  passing data grid queries to chart page as default\n-  added sys.exit() to the thread that manages the reaper\n\n.. _section-6:\n\n1.7.5 (2020-2-20)\n~~~~~~~~~~~~~~~~~\n\n-  hotfix for KeyError loading metadata for columns with min/max\n   information\n\n.. _section-7:\n\n1.7.4 (2020-2-20)\n~~~~~~~~~~~~~~~~~\n\n-  `#63 <https://github.com/man-group/dtale/issues/63>`__: filtering\n   columns with special characters in name\n-  added json_loader CLI options\n-  updated moving/locking of columns to be persisted to back-end as well\n   as front-end\n-  added the ability to show/hide columns\n-  `#61 <https://github.com/man-group/dtale/issues/61>`__: added column\n   builder popup\n\n.. _section-8:\n\n1.7.3 (2020-2-13)\n~~~~~~~~~~~~~~~~~\n\n-  added the ability to move columns left or right as well as to the\n   front\n-  added formatting capabilities for strings & dates\n-  persist formatting settings to popup on reopening\n-  bugfix for width-calculation on formatting change\n\n.. _section-9:\n\n1.7.2 (2020-2-12)\n~~~~~~~~~~~~~~~~~\n\n-  60 timeout handling around chart requests\n-  pre-loaded charts through URL search strings\n-  pandas query examples in Filter popup\n\n.. _section-10:\n\n1.7.1 (2020-2-7)\n~~~~~~~~~~~~~~~~\n\n-  added pie, 3D scatter & surface charts\n-  updated popups to be displayed when the browser dimensions are too\n   small to host a modal\n-  removed Swagger due to its lack up support for updated dependencies\n\n.. _section-11:\n\n1.7.0 (2020-1-28)\n~~~~~~~~~~~~~~~~~\n\n-  redesign of charts popup to use plotly/dash\n-  `#55 <https://github.com/man-group/dtale/issues/55>`__: raise\n   exception when data contains duplicate column names\n-  heatmap integration\n-  combination of \"_main.jsx\" files into one for spacial optimization\n-  `#15 <https://github.com/man-group/dtale/issues/15>`__: made arctic\n   an “extra” dependency\n\n.. _section-12:\n\n1.6.10 (2020-1-12)\n~~~~~~~~~~~~~~~~~~\n\n-  better front-end handling of dates for charting as to avoid timezone\n   issues\n-  the ability to switch between sorting any axis in bar charts\n\n.. _section-13:\n\n1.6.9 (2020-1-9)\n~~~~~~~~~~~~~~~~\n\n-  bugfix for timezone issue around passing date filters to server for\n   scatter charts in correlations popup\n\n.. _section-14:\n\n1.6.8 (2020-1-9)\n~~~~~~~~~~~~~~~~\n\n-  additional information about how to use Correlations popup\n-  handling of all-nan data in charts popup\n-  styling issues on popups (especially Histogram)\n-  removed auto-filtering on correlation popup\n-  scatter point color change\n-  added chart icon to cell that has been selected in correlation popup\n-  responsiveness to scatter charts\n-  handling of links to ‘main’,‘iframe’ & ‘popup’ missing data_id\n-  handling of ‘inf’ values when getting min/max & describe data\n-  added header to window popups (correlations, charts, …) and a link\n   back to the grid\n-  added egg building to cirleci script\n-  correlation timeseries chart hover line\n\n.. _section-15:\n\n1.6.7 (2020-1-3)\n~~~~~~~~~~~~~~~~\n\n-  `#50 <https://github.com/man-group/dtale/issues/50>`__: updates to\n   rolling correlation functionality\n\n.. _section-16:\n\n1.6.6 (2020-1-2)\n~~~~~~~~~~~~~~~~\n\n-  `#47 <https://github.com/man-group/dtale/issues/47>`__: selection of\n   multiple columns for y-axis\n-  updated histogram bin selection to be an input box for full\n   customization\n-  better display of timestamps in axis ticks for charts\n-  sorting of bar charts by y-axis\n-  `#48 <https://github.com/man-group/dtale/issues/48>`__: scatter\n   charts in chart builder\n-  “nunique” added to list of aggregations\n-  turned on “threaded=True” for app.run to avoid hanging popups\n-  `#45 <https://github.com/man-group/dtale/issues/45>`__: rolling\n   computations as aggregations\n-  Y-Axis editor\n\n.. _section-17:\n\n1.6.5 (2019-12-29)\n~~~~~~~~~~~~~~~~~~\n\n-  test whether filters entered will return no data and block the user\n   from apply those\n-  allow for group values of type int or float to be displayed in charts\n   popup\n-  timeseries correlation values which return ‘nan’ will be replaced by\n   zero for chart purposes\n-  update ‘distribution’ to ‘series’ on charts so that missing dates\n   will not show up as ticks\n-  added “fork on github” flag for demo version & links to github/docs\n   on “About” popup\n-  limited lz4 to <= 2.2.1 in python 27-3 since latest version is no\n   longer supported\n\n.. _section-18:\n\n1.6.4 (2019-12-26)\n~~~~~~~~~~~~~~~~~~\n\n-  testing of hostname returned by ``socket.gethostname``, use\n   ‘localhost’ if it fails\n-  removal of flask dev server banner when running in production\n   environments\n-  better handling of long strings in wordclouds\n-  `#43 <https://github.com/man-group/dtale/issues/43>`__: only show\n   timeseries correlations if datetime columns exist with multiple\n   values per date\n\n.. _section-19:\n\n1.6.3 (2019-12-23)\n~~~~~~~~~~~~~~~~~~\n\n-  updated versions of packages in yarn.lock due to issue with chart.js\n   box & whisker plots\n\n.. _section-20:\n\n1.6.2 (2019-12-23)\n~~~~~~~~~~~~~~~~~~\n\n-  `#40 <https://github.com/man-group/dtale/issues/40>`__: loading\n   initial chart as non-line in chart builder\n-  `#41 <https://github.com/man-group/dtale/issues/41>`__: double\n   clicking cells in correlation grid for scatter will cause chart not\n   to display\n-  “Open Popup” button for ipython iframes\n-  column width resizing on sorting\n-  additional int/float descriptors (sum, median, mode, var, sem, skew,\n   kurt)\n-  wordcloud chart type\n\n.. _section-21:\n\n1.6.1 (2019-12-19)\n~~~~~~~~~~~~~~~~~~\n\n-  bugfix for url display when running from command-line\n\n.. _section-22:\n\n1.6.0 (2019-12-19)\n~~~~~~~~~~~~~~~~~~\n\n-  charts integration\n\n   -  the ability to look at data in line, bar, stacked bar & pie charts\n   -  the ability to group & aggregate data within the charts\n\n-  direct ipython iframes to correlations & charts pages with\n   pre-selected inputs\n-  the ability to access instances from code by data id\n   ``dtale.get_instance(data_id)``\n-  view all active data instances ``dtale.instances()``\n\n.. _section-23:\n\n1.5.1 (2019-12-12)\n~~~~~~~~~~~~~~~~~~\n\n-  conversion of new flask instance for each ``dtale.show`` call to\n   serving all data associated with one parent process under the same\n   flask instance unless otherwise specified by the user (the ``force``\n   parameter)\n\n.. _section-24:\n\n1.5.0 (2019-12-02)\n~~~~~~~~~~~~~~~~~~\n\n-  ipython integration\n\n   -  ipython output cell adjustment\n   -  column-wise menu support\n   -  browser window popups for: Correlations, Coverage, Describe,\n      Histogram & Instances\n\n.. _section-25:\n\n1.4.1 (2019-11-20)\n~~~~~~~~~~~~~~~~~~\n\n-  `#32 <https://github.com/man-group/dtale/issues/32>`__: unpin\n   jsonschema by moving flasgger to ``extras_require``\n\n.. _section-26:\n\n1.4.0 (2019-11-19)\n~~~~~~~~~~~~~~~~~~\n\n-  Correlations Pearson Matrix filters\n-  “name” display in title tab\n-  “Heat Map” toggle\n-  dropped unused “Flask-Caching” requirement\n\n.. _section-27:\n\n1.3.7 (2019-11-12)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  `#28 <https://github.com/man-group/dtale/issues/28>`__:\n      “Instances” menu option will now be displayed by default\n   -  `#29 <https://github.com/man-group/dtale/issues/29>`__: add hints\n      to how users can navigate the correlations popup\n   -  add “unicode” as a string classification for column width\n      calculation\n\n.. _section-28:\n\n1.3.6 (2019-11-08)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  choose between ``pandas.corr`` & ``numpy.corrcoef`` depending on\n      presence of NaNs\n   -  hide timeseries correlations when date columns only contain one\n      day\n\n.. _section-29:\n\n1.3.5 (2019-11-07)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  duplicate loading of histogram data\n   -  string serialization failing when mixing ``future.str`` & ``str``\n      in scatter function\n\n.. _section-30:\n\n1.3.4 (2019-11-07)\n~~~~~~~~~~~~~~~~~~\n\n-  updated correlation calculation to use ``numpy.corrcoef`` for\n   performance purposes\n-  github rebranding from manahl -> man-group\n\n.. _section-31:\n\n1.3.3 (2019-11-05)\n~~~~~~~~~~~~~~~~~~\n\n-  hotfix for failing test under certain versions of ``future`` package\n\n.. _section-32:\n\n1.3.2 (2019-11-05)\n~~~~~~~~~~~~~~~~~~\n\n-  Bug fixes for:\n\n   -  display of histogram column information\n   -  reload of hidden “processes” input when loading instances data\n   -  correlations json failures on string conversion\n\n.. _section-33:\n\n1.3.1 (2019-10-29)\n~~~~~~~~~~~~~~~~~~\n\n-  fix for incompatible str types when directly altering state of data\n   in running D-Tale instance\n\n.. _section-34:\n\n1.3.0 (2019-10-29)\n~~~~~~~~~~~~~~~~~~\n\n-  ``webbrowser`` integration (the ability to automatically open a\n   webbrowser upon calling ``dtale.show()``)\n-  flag for hiding the “Shutdown” button for long-running demos\n-  “Instances” navigator popup for viewing all activate D-Tale instances\n   for the current python process\n\n.. _section-35:\n\n1.2.0 (2019-10-24)\n~~~~~~~~~~~~~~~~~~\n\n-  `#20 <https://github.com/man-group/dtale/issues/13>`__: fix for data\n   being overriden with each new instance\n-  `#21 <https://github.com/man-group/dtale/issues/13>`__: fix for\n   displaying timestamps if they exist\n-  calling ``show()`` now returns an object which can alter the state of\n   a process\n\n   -  accessing/altering state through the ``data`` property\n   -  shutting down a process using the ``kill()`` function\n\n.. _section-36:\n\n1.1.1 (2019-10-23)\n~~~~~~~~~~~~~~~~~~\n\n-  `#13 <https://github.com/man-group/dtale/issues/13>`__: fix for\n   auto-detection of column widths for strings and floats\n\n.. _section-37:\n\n1.1.0 (2019-10-08)\n~~~~~~~~~~~~~~~~~~\n\n-  IE support\n-  **Describe** & **About** popups\n-  Custom CLI support\n\n.. _section-38:\n\n1.0.0 (2019-09-06)\n~~~~~~~~~~~~~~~~~~\n\n-  Initial public release\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/man-group/dtale",
    "keywords": "numeric,pandas,visualization,flask",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtale",
    "package_url": "https://pypi.org/project/dtale/",
    "platform": "",
    "project_url": "https://pypi.org/project/dtale/",
    "project_urls": {
      "Homepage": "https://github.com/man-group/dtale"
    },
    "release_url": "https://pypi.org/project/dtale/1.7.11/",
    "requires_dist": [
      "six",
      "dash (>=1.5.0)",
      "dash-daq",
      "Flask-Compress",
      "Flask",
      "future (>=0.14.0)",
      "itsdangerous",
      "pandas",
      "requests",
      "scipy",
      "lz4 (<=2.2.1) ; python_version < \"3.0\"",
      "lz4 ; python_version > \"3.0\"",
      "flask-ngrok ; python_version > \"3.0\"",
      "arctic ; extra == 'arctic'",
      "rpy2 (<=2.8.6) ; (python_version < \"3.0\") and extra == 'r'",
      "rpy2 ; (python_version > \"3.0\") and extra == 'r'"
    ],
    "requires_python": "",
    "summary": "Web Client for Visualizing Pandas Objects",
    "version": "1.7.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17146159,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "709d3b585fb0f8431af2b4c79cdacf9142197fb908b1592a91fdb3fd95a7e2f7",
        "md5": "aeb2c86fbb625bc82726267630ee2d8e",
        "sha256": "ebed5d3f79032cc8a81552b153d6e8c505518908246a0d45050b2974c1a405e6"
      },
      "downloads": -1,
      "filename": "dtale-1.7.11-py2.7.egg",
      "has_sig": false,
      "md5_digest": "aeb2c86fbb625bc82726267630ee2d8e",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 5514048,
      "upload_time": "2020-02-27T19:53:06",
      "upload_time_iso_8601": "2020-02-27T19:53:06.447492Z",
      "url": "https://files.pythonhosted.org/packages/70/9d/3b585fb0f8431af2b4c79cdacf9142197fb908b1592a91fdb3fd95a7e2f7/dtale-1.7.11-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6aa397e9c1b63ecd23079e9fd9fb55d91d2b3f749216813d9cde58d77f12578",
        "md5": "9770093c2bfb60b8ae367ecf1b7b5432",
        "sha256": "6ecebff05b0d24468e938d7c1db280954eff28ddd639561cfd03864063735187"
      },
      "downloads": -1,
      "filename": "dtale-1.7.11-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9770093c2bfb60b8ae367ecf1b7b5432",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 5434788,
      "upload_time": "2020-02-27T19:52:57",
      "upload_time_iso_8601": "2020-02-27T19:52:57.863653Z",
      "url": "https://files.pythonhosted.org/packages/c6/aa/397e9c1b63ecd23079e9fd9fb55d91d2b3f749216813d9cde58d77f12578/dtale-1.7.11-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "132096993b5b64ff11f456a8f47e6685449fe92804df4df21f44042feb6eb044",
        "md5": "d25175f7a0081557fb9c93a9e5eae56c",
        "sha256": "7302075800d822a324c330aee84a84bf677ccb4e8615e01238f778fefd786e01"
      },
      "downloads": -1,
      "filename": "dtale-1.7.11-py3.6.egg",
      "has_sig": false,
      "md5_digest": "d25175f7a0081557fb9c93a9e5eae56c",
      "packagetype": "bdist_egg",
      "python_version": "3.6",
      "requires_python": null,
      "size": 5514868,
      "upload_time": "2020-02-27T19:53:08",
      "upload_time_iso_8601": "2020-02-27T19:53:08.466381Z",
      "url": "https://files.pythonhosted.org/packages/13/20/96993b5b64ff11f456a8f47e6685449fe92804df4df21f44042feb6eb044/dtale-1.7.11-py3.6.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ced4b4685c69736eb5767e5dc7eea4cfdbb5e91ec053dde0b61bccf6ee74a87a",
        "md5": "0754348a6e078fd31a9dd06e5bf306bc",
        "sha256": "2118f8d7fc423555f63ae9f34e8da34500b688ffadf6cb9b4aef0ffcabbbfc46"
      },
      "downloads": -1,
      "filename": "dtale-1.7.11.tar.gz",
      "has_sig": false,
      "md5_digest": "0754348a6e078fd31a9dd06e5bf306bc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5421892,
      "upload_time": "2020-02-27T19:53:19",
      "upload_time_iso_8601": "2020-02-27T19:53:19.752187Z",
      "url": "https://files.pythonhosted.org/packages/ce/d4/b4685c69736eb5767e5dc7eea4cfdbb5e91ec053dde0b61bccf6ee74a87a/dtale-1.7.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}