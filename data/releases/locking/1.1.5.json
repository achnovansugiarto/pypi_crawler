{
  "info": {
    "author": "Joseph Bylund",
    "author_email": "joseph.bylund@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# locking\n\n![build status](https://jbylund.semaphoreci.com/badges/locking/branches/master.svg?style=semaphore)\n[view build logs](https://jbylund.semaphoreci.com/branches/a07cc01d-abee-46d0-8557-64abee8fbfc2)\n\n\n1. [Overview](#overview)\n1. [Examples](#examples)\n1. [Installation](#installation)\n\n## <a id='overview'>Overview</a>\n\nThese locks provide a similar interface to those in the [threading](https://docs.python.org/3/library/threading.html#threading.Lock) and [multiprocessing](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Lock) modules with a different set of tradeoffs.\nThese locks are useable by multiple different processes when those processes agree on a naming scheme.\nThis can be used in order to allow multiple processes running on the same machine to semi-coordinate or in the case of the redis or dynamo backed locks multiple processes running on different machines to coordinate work.\nThis provides a different type of coordination than multiple workers consuming from a single queue and can allow quickly prototyping a solution where workers attempt to grab a job and take a lock on it, grabbing another job if they fail at getting the lock.\nOne benefit of this type of solution is that it allows running on spot hardware in the cloud since if a single job is dropped before it is completed the lock will soon expire and another worker will be able to grab that same piece of work.\n\nMuch like the locks provided by the threading/multiprocessing modules, these can (and probably should) be used as context managers.\n\n## <a id='examples'>Examples</a>\n\n### SocketLock\n\n`SocketLock` requires no additional third party libs, and should work well on \\*nix OS's.\n\nAdvantages:\n* if a process dies the lock is released ~instantly\n* no lockfiles polluting the filesystem\n\nDisadvantages:\n* requires all processes to be on the same host OS\n* only works on nix-based os's (and maybe not even mac)\n\n```python\nfrom locking import SocketLock\nimport time\n\nwith SocketLock(lockname=\"uniquename\") as mylock:\n    # at this point we're holding the lock and can\n    # safely perform operations without worrying about\n    # other threads/process holding a lock with this name\n    # interfering\n    time.sleep(1)\n```\n\n### FileLock\n\n`FileLock` requires no additional third party libs and _should_ work on most OS's, with the disclaimer that I only have access to \\*nix OS's.\n\n```python\nfrom locking import FileLock\nimport time\n\nwith FileLock(lockname=\"foolock\") as mylock:\n    time.sleep(1)\n```\n\n### RedisLock\n\n`RedisLock` requires [redis](https://github.com/redis/redis-py) and obviously a redis server.\nThe advantage of `RedisLock` over `SocketLock` or `FileLock` is that you don't need to be on the same host as other processes.\nThis can be useful if you want one of N hosts to perform some action.\n\n```python\nfrom locking import RedisLock\nimport time\n\nwith RedisLock(lockname=\"some_process_identifier\", hosts=[\"myredis.com\"]):\n    time.sleep(1)\n```\n\n### DynamoLock\n\n`DynamoLock` doesn't require an always on redis like `RedisLock`, however it does require dynamodb access on AWS.\nIn theory this should be pretty cheap.\n\n```python\nfrom locking import DynamoLock\nimport time\n\nwith DynamoLock(lockname=\"some_process_identifier\", table=\"locks\", checkpoint_frequency=2, ttl=5):\n    time.sleep(1)\n```\n\n## <a id='installation'>Installation</a>\n\n### From PyPI\n\n```shell\npython -m pip install --upgrade locking\n```\n\n### From GitHub\n\n```shell\npython -m pip install --upgrade git+https://git@github.com/jbylund/locking.git\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jbylund/locking",
    "keywords": "",
    "license": "",
    "maintainer": "Joseph Bylund",
    "maintainer_email": "joseph.bylund@gmail.com",
    "name": "locking",
    "package_url": "https://pypi.org/project/locking/",
    "platform": "",
    "project_url": "https://pypi.org/project/locking/",
    "project_urls": {
      "Homepage": "https://github.com/jbylund/locking"
    },
    "release_url": "https://pypi.org/project/locking/1.1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Provide locks with interface similar to those from threading  and multiprocessing, which are applicable in other situations.",
    "version": "1.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13002171,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8ec05f6a7873a01262dae175044852c661ed95fc83ac6e7abd09f6d5f0742e6",
        "md5": "6925ab931779bbf37cdb90555ca38664",
        "sha256": "c3ec87583fb26b23142c69cd0a4843f93c27d22bef897ed11a70637d4aedbd6c"
      },
      "downloads": -1,
      "filename": "locking-1.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6925ab931779bbf37cdb90555ca38664",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11423,
      "upload_time": "2022-02-24T23:58:25",
      "upload_time_iso_8601": "2022-02-24T23:58:25.727624Z",
      "url": "https://files.pythonhosted.org/packages/f8/ec/05f6a7873a01262dae175044852c661ed95fc83ac6e7abd09f6d5f0742e6/locking-1.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46b5bac6d241c6b081a65e271ba181573d332542023fb013c839fbac6d4a7e17",
        "md5": "6f136b6aac4f66ce527f4e64b83d174c",
        "sha256": "af31fae2f76ae9e37a3b6d5fd37b72ba5037a975a9b3b49dc75fecc0e5641a95"
      },
      "downloads": -1,
      "filename": "locking-1.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "6f136b6aac4f66ce527f4e64b83d174c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9899,
      "upload_time": "2022-02-24T23:58:26",
      "upload_time_iso_8601": "2022-02-24T23:58:26.956947Z",
      "url": "https://files.pythonhosted.org/packages/46/b5/bac6d241c6b081a65e271ba181573d332542023fb013c839fbac6d4a7e17/locking-1.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}