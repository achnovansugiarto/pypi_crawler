{
  "info": {
    "author": "Richard Terry",
    "author_email": "code@radiac.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Topic :: Internet"
    ],
    "description": "========\ndocker0s\n========\n\nDocker0s uses docker-compose to manage multiple containerised apps on a single host.\n\n.. image:: https://img.shields.io/pypi/v/docker0s.svg\n    :target: https://pypi.org/project/docker0s/\n    :alt: PyPI\n\n.. image:: https://github.com/radiac/docker0s/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/radiac/docker0s/actions/workflows/ci.yml\n    :alt: Tests\n\n.. image:: https://codecov.io/gh/radiac/docker0s/branch/main/graph/badge.svg?token=BCNM45T6GI\n    :target: https://codecov.io/gh/radiac/docker0s\n    :alt: Test coverage\n\n\nBring together standard docker-compose files across multiple projects in a single simple\nmanifest file, written in either YAML or Python with pre- and post-operation hooks, to\ndeploy to a single host.\n\nIt's designed for small self-hosted low-maintenance deployments which don't need the\ncomplexity of Kubernetes - think k8s with zero features and a much simpler config\nsyntax, with simple app manifests instead of helm charts.\n\nThere is a collection of ready-to-use app manifests at `docker0s-manifests`_, with\nexamples for how to deploy them to your host.\n\n.. _docker0s-manifests: https://github.com/radiac/docker0s-manifests\n\n\nQuickstart\n==========\n\nInstall::\n\n    pip install docker0s\n\n\nPut together a manifest in YAML as ``d0s-manifest.yml``:\n\n.. code-block:: yaml\n\n    apps:\n      traefik:\n        path: git+https://github.com/radiac/docker0s-manifests.git@main#traefik\n        env_file: traefik.env\n      mail:\n        path: ../apps/mail\n      website:\n        type: MountedApp\n        path: \"git+ssh://git@github.com:radiac/example.com.git@main\"\n        env:\n          DOMAIN: example.radiac.net\n    host:\n      name: example.radiac.net\n\n\nor in Python as ``d0s-manifest.py``, using subclassing to perform actions before and\nafter operations, and to add custom functionality:\n\n.. code-block:: python\n\n    from docker0s import MountedApp\n\n    class Website(MountedApp):\n        # Clone a repo to the host and look for docker-compose.yml in there\n        path = \"git+ssh://git@github.com:radiac/example.com.git@main\"\n        env = {\n            \"DOMAIN\": \"example.radiac.net\"\n        }\n\n        # Subclass methods to add your own logic\n        def deploy(self):\n            # Perform action before deployment, eg clean up any previous deployment\n            super().deploy()\n            # Perform action after deployment, eg push additional resources\n\n        def up(self, *services):\n            # Perform action before ``up``, eg report to a log\n            super().up(*services)\n            # Perform action after ``up``, eg wait and perform a test\n\n        @App.command\n        def say_hello(self, name):\n            print(f\"Hello {name}, this runs locally\")\n            self.host.exec(\"echo And {name}, this is on the host\", args={'name': name})\n\n    class Vagrant(Host):\n        name = \"vagrant\"\n\n\nThen run a command, eg::\n\n    docker0s deploy\n    docker0s up\n    docker0s restart website.django\n    docker0s exec website.django /bin/bash\n    docker0s cmd website say_hello person\n\n\nCommands\n========\n\n``docker0s deploy [<app>[.<service>]]``:\n  Deploy resources to the host\n\n``docker0s up [<app>[.<service>]]``:\n  Start all apps, a specific app, or a specific app's service\n\n``docker0s down [<app>[.<service>]]``:\n  Stop all apps, a specific app, or a specific app's service\n\n``docker0s restart [<app>[.<service>]]``:\n  Restart all apps, a specific app, or a specific app's service\n\n``docker0s exec <app>.<service> <command>``:\n  Execute a command in the specific service\n\n``docker0s cmd <app> <command> [<args> ...]``\n  Execute a local App command\n\nOptions:\n\n``--manifest=<file>``, ``-m <file>``:\n  Specify the manifest. If not specified, tries ``d0s-manifest.py`` then\n  ``d0s-manifest.yml`` in the current directory.\n\n\nManifest file\n=============\n\nA manifest file defines a list of more or apps which will be deployed to one host.\n\nYou can put everything in a single manifest, but usually you will define a generic *app\nmanifest* next to a docker-compose.yml, and then extend it in a *host manifest* where\nyou set environment variables. The syntax of both is the same, but an app manifest only\ndefines apps, whereas a host manifest defines both apps and the host to deploy it to.\n\nSee `docker0s-manifests <https://github.com/radiac/docker0s-manifests>`_ for a\ncollection of app manifests and examples for how to use them with your host manifest.\n\n\nYAML\n----\n\nA manifest file has two sections:\n\n``apps``:\n  The list of app definitions.\n\n  Each app starts with its identifier. This is used as its namespace for\n  docker-compose.\n\n  Under the identifier you can declare the type of app with ``type``; if not specified\n  it will default to ``type: App``. See \"App Types\" for more details and additional\n  arguments for the app definition.\n\n  An app can also specify environment variables to pass to docker-compose, by setting\n  ``env`` with a file path, a list of files, or key/value pairs.\n\n``host``:\n  The host definition.\n\n  There can be only one per manifest. Manifests which define a host cannot be used as a\n  base manifest (see ``extends`` attribute).\n\n\nApp types\n---------\n\n``App``:\n  A project with a docker-compose ready for use in production.\n\n  Attributes:\n\n  ``path``\n    Path to the app - a directory or repository containing the docker compose file and\n    any other assets docker0s will require. Any ``app://`` paths elsewhere in the app\n    definition will use this as the base path.\n\n  ``extends``\n    Path to a base docker0s manifest for this app.\n\n    A base manifest:\n\n    * uses the same syntax\n    * can define multiple apps\n    * can reference further base manifests\n    * must not define a host\n\n    This value can be one of two patterns:\n\n    * ``path/to/d0s-manifest.yml`` or ``path/to/d0s-manifest.py`` - this app will extend\n      using the app defined with the same name - see \"App naming\" below\n    * ``path/to/d0s-manifest.yml::AppName`` or ``path/to/d0s-manifest.py::AppName`` -\n      this app will extend using the app defined with the name ``AppName``.\n\n    Default: ``app://d0s-manifest.py``, ``app://d0s-manifest.yml`` (first found)\n\n  ``compose``\n    Path to the app's docker compose file.\n\n    Default: ``app://docker-compose.yml``\n\n  ``assets``:\n    Path or list of paths to assets which should be uploaded into an ``assets`` dir next\n    to the docker-compose. Must be ``app://`` paths.\n\n  ``env_file``\n    Path or list of paths to files containing environment variables for docker-compose.\n    See \"Environment variables\" below for details.\n\n  ``env``\n    Key-value pairs of environment variables for docker-compose.\n    See \"Environment variables\" below for details.\n\n  Example YAML:\n\n  .. code-block:: yaml\n\n      apps:\n        website:\n          path: \"git+ssh://git@github.com:radiac/example.com.git\"\n          extends: \"app://docker0s-base.py\"\n          config: \"app://docker-compose.live.yml\"\n          env_file:\n          - app://base.env\n          - website.env\n          env:\n            deployment=www.example.com\n\n\n\n``MountedApp``:\n  A project which requires the repository to be cloned on the host and mounted into\n  the service.\n\n  Takes the same arguments as an ``App``, with the following differences:\n\n  ``path``\n    Path to the app. This must be a git repository.\n\n  ``compose``\n    Path to the app's docker compose file. This must be an ``app://`` path within the\n    repository.\n\n  Example YAML:\n\n  .. code-block:: yaml\n\n      apps:\n        website:\n          type: MountedApp\n          path: \"git+ssh://git@github.com:radiac/example.com.git\"\n\n\nApp naming\n----------\n\nBecause apps are referenced by name in Python, YAML and on the command line, docker0s\nsupports apps names in ``PascalCase``, ``camelCase``, ``snake_case`` and ``kebab-case``\nin YAML and the command line. Python classes must always use ``PascalCase``:\n\n.. code-block:: python\n\n    class WebsiteExampleCom(App):\n        path = \"../website\"\n\nYAML can use any - these four app definitions are equivalent (so would raise an error):\n\n.. code-block:: yaml\n\n    apps:\n      website_example_com:\n        path: ../website\n      website-example-com:\n        path: ../website\n      websiteExampleCom:\n        path: ../website\n      WebsiteExampleCom:\n        path: ../website\n\n\nPaths\n-----\n\nAn App ``path`` can be:\n\n* relative to the manifest, eg ``traefik.env`` or ``../apps/traefik/d0s-manifest.yml``.\n  Note this is relative to the manifest where this app definition is found, so relative\n  paths in a base manifest loaded with ``extend`` will be relative to the base manifest.\n* absolute, eg ``/etc/docker0s/apps/traefik/d0s-manifest.yml``.\n* a file in a git repository in the format ``git+<protocol>://<path>@<ref>#<file>``\n  where protocol is one of ``git+https`` or ``git+ssh``, and the ref is a\n  branch, commit or tag. For example:\n\n  * ``git+ssh://git@github.com:radiac/docker0s-manifests@main#traefik``\n  * ``git+https://github.com/radiac/docker0s-manifests@v1.0#traefik/d0s-manifest.yml``\n\n\nOther fields which take a path argument (ie ``manifest``, ``compose`` and ``env_file``)\ncan use these values, as well as:\n\n* relative to the app's path with ``app://``, eg if ``path = \"../apps/traefik\"``\n  then if ``extends = \"app://docker0s-base.py\"`` it will look for the base manifest at\n  ``../apps/traefik/docker0s-base.py``\n\nFor security, when using a remote manifest from a third party git repository, we\nrecommend performing a full audit of what you are going to deploy, and then pinning to\nthat specific commit.\n\n\nEnvironment variables\n---------------------\n\nEnvironment variables for the docker-compose can be defined as one or more env files, as\na dict within the manifest, or both.\n\nIf more than one ``env_file`` is specified, files are loaded in order. If a key appears\nin more than one file, the last value loaded will be used.\n\nIf a key appears in both the ``env`` dict and an ``env_file``, the value in this field\nwill be used.\n\nEnvironment variables are evaluated before inheritance, meaning an env file key in a\nchild manifest can override an env dict key in a parent. Precedence order, with winner\nfirst:\n\n#. Child env dict\n#. Child env file\n#. Parent env dict\n#. Parent env file\n\nEnvironment variables are merged and written to an env file on the server for\ndocker-compose to use.\n\n\nApp commands\n------------\n\nPython App definitions can declare local commands - usually either utility functions to\nassist with manifest definition, such as a password encoder, or to use fabric to perform\noperations on the host, such as tailing docker logs.\n\nTo define an app, decorate it with ``App.command``::\n\n    class Website(App):\n        @App.command\n        def say_hello(self, name):\n            print(f\"Hello {name}, this runs locally\")\n            self.host.exec(\"echo And {name}, this is on the host\", args={'name': name})\n\n\nThis can then be called as:\n\n    ./docker0s cmd website say_hello person\n\nCommands currently do not have any support for validation or typing of arguments.\n\n\nDeployment\n==========\n\nDefault deployment structure::\n\n    /home/user/\n      apps/\n        app_name/\n          service_name/\n            docker-compose.yml\n            env\n        mounted_app_with_store/\n          service_name/\n            repo/\n              docker-compose.yml\n            store/\n            env\n\n\nRoadmap\n=======\n\n* Jinja support for templated docker compose files\n* Base manifest hashes, for improved security when pulling remotely\n* Support for gitops through a repository monitoring mode\n\n\nChangelog\n=========\n\n* 1.1.0 - Add command support, ``docker0s cmd ...``; restore default ``extends``;\n  standardise manifest filenames\n* 1.0.1 - Fix for entrypoint\n* 1.0.0 - Initial release\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://radiac.net/projects/docker0s/",
    "keywords": "docker containers deployment",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docker0s",
    "package_url": "https://pypi.org/project/docker0s/",
    "platform": null,
    "project_url": "https://pypi.org/project/docker0s/",
    "project_urls": {
      "Documentation": "https://radiac.net/projects/docker0s/documentation/",
      "Homepage": "https://radiac.net/projects/docker0s/",
      "Source": "https://github.com/radiac/docker0s",
      "Tracker": "https://github.com/radiac/docker0s/issues"
    },
    "release_url": "https://pypi.org/project/docker0s/1.1.0/",
    "requires_dist": [
      "click",
      "fabric",
      "python-dotenv",
      "pyyaml"
    ],
    "requires_python": ">=3.10",
    "summary": "Use docker-compose to manage multiple apps on a single host",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16377683,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c08244f5900ab7e60f4d9ab9bc82234af4b1029b2468d272f6b4fb3c52ff0722",
        "md5": "cc097ce56a6751f7778afae8679f6309",
        "sha256": "0e87d986012c1ceb8e90d1e7a006c4008a9e8c6acbde3989721ed8ce88f70f0d"
      },
      "downloads": -1,
      "filename": "docker0s-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cc097ce56a6751f7778afae8679f6309",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 24373,
      "upload_time": "2022-11-08T20:23:12",
      "upload_time_iso_8601": "2022-11-08T20:23:12.250774Z",
      "url": "https://files.pythonhosted.org/packages/c0/82/44f5900ab7e60f4d9ab9bc82234af4b1029b2468d272f6b4fb3c52ff0722/docker0s-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3fa73790c991e5dc56e568a5c52669b41ef4869b1ae21e77733b3137864cd03",
        "md5": "7c2b7c1c25ce179e9adc134b529e4e7b",
        "sha256": "7fb3f01768ff961b7f8b2b0a487bbc189e9880e2d83f285c4f464ae56d616c51"
      },
      "downloads": -1,
      "filename": "docker0s-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7c2b7c1c25ce179e9adc134b529e4e7b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 24173,
      "upload_time": "2022-11-08T20:23:13",
      "upload_time_iso_8601": "2022-11-08T20:23:13.878579Z",
      "url": "https://files.pythonhosted.org/packages/c3/fa/73790c991e5dc56e568a5c52669b41ef4869b1ae21e77733b3137864cd03/docker0s-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}