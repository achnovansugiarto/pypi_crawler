{
  "info": {
    "author": "Douwe van der Meij, Job Ganzevoort",
    "author_email": "vandermeij@gw20e.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Django Diazo\n============\n\nIntegrate Diazo in Django using WSGI middleware and add/change themes\nusing the Django Admin interface.\n\nThe code is maintained on GitHub (https://github.com/Goldmund-Wyldebeast-Wunderliebe/django-diazo).\n\n\nInstallation\n------------\n\nInstall the package:\n\n    pip install django-diazo\n\n\n### settings.py\n\nAdd the app to your project:\n\n    INSTALLED_APPS = (\n        ...\n        'adminsortable2',\n        'django_diazo',\n        ...\n    )\n\nAdd middleware (or WSGI, see below):\n\n    MIDDLEWARE_CLASSES += (\n        'django_diazo.middleware.DjangoDiazoMiddleware',\n    )\n\nIf you want to know if Django-Diazo is turned on in your templates add:\n\n    TEMPLATE_CONTEXT_PROCESSORS = (\n        ...\n        'django_diazo.context_processors.diazo_enabled',\n    )\n\nThe variable `DIAZO_ENABLED` is now available in your templates.\n\n!! IMPORTANT !!\nNote that when using the Django middleware instrumentation the Diazo `<notheme />` rules won't work.\nYou have to provide regular expression patterns in `Theme.pattern` to prevent some pages (by url) to be themed.\nWhen you want to disable theming for certain pages by content based rules for `<notheme />`, you need to use the\nWSGI middleware instead.\n\n\n### wsgi.py\n\nIf you rather use WSGI than Django middleware or you have to (at the moment) since you use exotic `<notheme />` rules,\nadd the following lines to your `wsgi.py` file:\n\n    # Apply WSGI middleware here.\n    from django_diazo.wsgi import DiazoMiddlewareWrapper\n    application = DiazoMiddlewareWrapper(application)\n\n\n### Database (migrations)\n\nAdd the following to your settings (Django >= 1.7):\n\n    MIGRATION_MODULES = {\n        'django_diazo': 'django_diazo.migrations_django',\n    }\n\nMigrate the database:\n\n    python manage.py migrate django_diazo\n\n\nCreate a built-in theme\n-----------------------\n\nYou might want to supply your Django application with an out-of-the-box\ntheme, probably also managed in a VCS.\n\nCreate a new app with a `diazo.py` file in its root. The contents of\nthis file is should be something like this:\n\n    from django_diazo.theme import DiazoTheme, registry\n\n    class SomeTheme(DiazoTheme):\n        name = 'Some Theme'\n        slug = 'some_theme'\n        pattern = '^(?!.*admin)'  # Theme everything but /admin\n    registry.register(SomeTheme)\n\nDon't forget to put your assets in the static folder, like an `index.html` and a `rules.xml`. You can find a\n`rules.xml` example in `django_diazo/examples`.\n\nTo synchronize the built-in themes with the database/application run the\nfollowing command:\n\n    python manage.py syncthemes\n\n\nDjangoCMS 3\n------------\n\nWhen using DjangoCMS 3, you might be interested in a toolbar switch to turn Diazo on/off.\nAdd the following to your settings:\n\n    INSTALLED_APPS = (\n        ...\n        'django_diazo.contrib.cms',\n        ...\n    )\n\n    MIDDLEWARE_CLASSES += (\n        ...\n        'django_diazo.contrib.cms.middleware.DjangoCmsDiazoMiddleware',\n    )\n\nThe app will add the toolbar button, the middleware takes care of setting an on/off flag in the session.\n\nNote that in production with wsgi middleware, this only works via a session (cookie), so not directly via the GET\nparameter. You will have to reload the page after switching off the theme to get an unthemed site and vice versa.\n\n\nUpload themes\n-------------\n\nBy default, the .zip files that are uploaded are extracted in the media folder.\nYou might want to serve these files via Django.\nAdd the following to your `urls.py` (only works when `DEBUG = True`):\n\n    from django.conf import settings\n    from django.conf.urls.static import static\n    from django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\n    urlpatterns += staticfiles_urlpatterns()\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\nFor production environments it is not recommended to serve files from the media folder.\nThis implementation only servers files in the `themes` folder within the media folder but it would be better to serve\nthese files using a web server and not via Django. The same holds for your `static` folder.\n\n\nExample themes / application\n----------------------------\n\nTake a look at https://github.com/Goldmund-Wyldebeast-Wunderliebe/django-diazo-themes and\nhttps://github.com/Goldmund-Wyldebeast-Wunderliebe/django-diazo-blog for examples of built-in themes and an integration\nexample.\n\nOur blog post http://www.goldmund-wyldebeast-wunderliebe.com/tech-blog/blog-posts/using-diazo-in-django also covers\nthese examples and some more background.\n\nAlso take a look at `django_diazo.contrib.themes` in this package.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Goldmund-Wyldebeast-Wunderliebe/django-diazo",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django_diazo",
    "package_url": "https://pypi.org/project/django_diazo/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django_diazo/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/Goldmund-Wyldebeast-Wunderliebe/django-diazo"
    },
    "release_url": "https://pypi.org/project/django_diazo/2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Integrate Diazo in Django using WSGI middleware and\n    add/change themes using the Django Admin interface.",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1614621,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15085a8cca54e6f6dded2d9357af794e08c969ec5989fad9ee2f36502bea75a8",
        "md5": "404cabebf78bba1deebb51d774739514",
        "sha256": "0347697c488080d0747725ba1685ae043f758b5e2ef994b91a8233a35a5e7fa6"
      },
      "downloads": -1,
      "filename": "django_diazo-2.0.zip",
      "has_sig": false,
      "md5_digest": "404cabebf78bba1deebb51d774739514",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 343107,
      "upload_time": "2015-05-17T10:50:10",
      "upload_time_iso_8601": "2015-05-17T10:50:10.290432Z",
      "url": "https://files.pythonhosted.org/packages/15/08/5a8cca54e6f6dded2d9357af794e08c969ec5989fad9ee2f36502bea75a8/django_diazo-2.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}