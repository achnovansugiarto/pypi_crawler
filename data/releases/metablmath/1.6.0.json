{
  "info": {
    "author": "Body Labs",
    "author_email": "alex@bodylabs.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "metablmath\n==========\n\n|pip install| |version| |python versions| |build status| |last commit|\n|open pull requests|\n\nThis is an active fork of\n`blmath <https://github.com/bodylabs/blmath>`__, a collection\nmath-related utilities developed at Body Labs.\n\nThe fork’s goals are moderate:\n\n-  Keep the library working in current versions of Python and other\n   tools.\n-  Make bug fixes.\n-  Provide API stability and backward compatibility with the upstream\n   version.\n-  Add additional functionality which relates well to what is here.\n-  Respond to community contributions.\n\nIt’s used by related forks such as\n`lace <https://github.com/metabolize/lace>`__.\n\nInstallation\n------------\n\nInstall dependencies\n~~~~~~~~~~~~~~~~~~~~\n\nOn macOS:\n\n::\n\n   brew install homebrew/science/suite-sparse\n   brew install homebrew/science/opencv --without-numpy\n\nOn Linux:\n\n::\n\n   sudo apt-get install python-opencv libsuitesparse-dev\n\nInstall the library\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n   pip install metablmath\n\nAnd import it just like the upstream library:\n\n.. code:: py\n\n   from blmath.numerics import vx\n\nA collection of math related utilities used by many bits of BodyLabs’\ncode.\n\nblmath.numerics\n---------------\n\nFunctions for manipulating numeric arrays, numbers, and linear algebra.\n\nThe `most commonly used of these <__init__.py>`__ are directly imported\ninto ``blmath.numerics``.\n\n-  `blmath.numerics.vx <vector_shortcuts.py>`__ is a namespace of common\n   linear algebra operations. These are easily expressed in numpy, but\n   abstracted for readability purposes.\n-  `blmath.numerics.coercion <coercion.py>`__ contains a validation\n   function ``as_numeric_array``, which produces useful error messages\n   up front on bad inputs, in place of cryptic messages like “cannot\n   broadcast…” later on.\n-  `blmath.numerics.operations <operations.py>`__ contains basic\n   numerical operations such as ``zero_safe_divide``.\n-  `blmath.numerics.predicates <predicates.py>`__ contains functions\n   like ``isnumeric``.\n-  `blmath.numerics.rounding <rounding.py>`__ contains functions\n   including “round to nearest” and ``roundedlist``.\n-  `blmath.numerics.numpy_ext <numpy_ext.py>`__ contains numpy utility\n   functions.\n-  `blmath.numerics.matlab <matlab.py>`__ contains some matlab shortcuts\n   which have no numpy equivalent. At MPI the fitting code was\n   originally written in Matlab before it was ported to Python.\n\n`blmath.numerics.linalg <linalg>`__ contains linear algebra operations.\n\n-  `blmath.numerics.linalg.sparse_cg <linalg/sparse_cg.py>`__ contains a\n   faster matrix solve optimized for sparse Jacobians.\n-  `blmath.numerics.linalg.lchol <linalg/lchol.py>`__ contains a\n   Cythonized implementation of Cholesky factorization.\n-  `blmath.numerics.linalg.isomorphism <linalg/isomorphism.py>`__\n   computes the isomorphism between two bases.\n-  `blmath.numerics.linalg.gram_schmidt <linalg/gram_schmidt.py>`__\n   provides a function for orthonormalization.\n\nblmath.geometry\n---------------\n\nGeometric operations, transforms, and primitives, in 2D and 3D.\n\nThe `most commonly used of these <__init__.py>`__ are directly imported\ninto ``blmath.geometry``.\n\n-  `blmath.geometry.Box <primitives/box.py>`__ represents an\n   axis-aligned cuboid.\n-  `blmath.geometry.Plane <primitives/plane.py>`__ represents a 2-D\n   plane in 3-space (not a hyperplane).\n-  `blmath.geometry.Polyline <primitives/polyline.py>`__ represents an\n   unconstrained polygonal chain in 3-space.\n\n``blmath.geometry.transform`` includes code for 3D transforms.\n\n-  `blmath.geometry.transform.CompositeTransform <transform/composite.py>`__\n   represents a composite transform using homogeneous coordinates.\n   (Thanks avd!)\n-  `blmath.geometry.transform.CoordinateManager <transform/coordinate_manager.py>`__\n   provides a convenient interface for named reference frames within a\n   stack of transforms and projecting points from one reference frame to\n   another.\n-  `blmath.geometry.transform.find_rigid_transform <transform/rigid_transform.py>`__\n   finds a rotation and translation that closely transforms one set of\n   points to another. Its cousin ``find_rigid_rotation`` does the same,\n   but only allows rotation, not translation.\n-  `blmath.geometry.transform.rotation.rotation_from_up_and_look <transform/rotation.py>`__\n   produces a rotation matrix that gets a mesh into the canonical\n   reference frame from “up” and “look” vectors.\n\nOther modules:\n\n-  `blmath.geometry.apex <apex.py>`__ provides functions for finding the\n   most extreme point.\n-  `blmath.geometry.barycentric <barycentric.py>`__ provides a function\n   for projecting a point to a triangle using barycentric coordinates.\n-  `blmath.geometry.convexify <convexify.py>`__ provides a function for\n   producing a convex hull from a mostly-planar curve.\n-  `blmath.geometry.segment <segment.py>`__ provides functions for\n   working with line segments in n-space.\n\nblmath.value\n------------\n\nClass for wrapping and manipulating ``value``/``units`` pairs.\n\nblmath.units\n------------\n\nTODO write something here\n\nblmath.console\n--------------\n\n-  `blmath.console.input_float <console.py>`__ reads and returns a float\n   from console.\n-  `blmath.console.input_value <console.py>`__ combines ``units`` with a\n   float input from console and returns ``Value`` object.\n\nDevelopment\n-----------\n\n.. code:: sh\n\n   pip install -r requirements_dev.txt\n   pip install -e .  # builds the native extension\n   rake unittest\n   rake lint\n\nContribute\n----------\n\n-  Issue Tracker: https://github.com/metabolize/blmath/issues\n-  Source Code: https://github.com/metabolize/blmath\n\nPull requests welcome!\n\nSupport\n-------\n\nIf you are having issues, please let us know.\n\nAcknowledgements\n----------------\n\nThis collection was developed at Body Labs and includes a combination of\ncode developed at Body Labs, from legacy code and significant new\nportions by `Eric Rachlin <https://github.com/eerac>`__, `Alex\nWeiss <https://github.com/algrs>`__, and `Paul\nMelnikow <https://github.com/paulmelnikow>`__. It was extracted from the\nBody Labs codebase and open-sourced by `Alex\nWeiss <https://github.com/algrs>`__.\n\nLicense\n-------\n\nThe project is licensed under the two-clause BSD license.\n\n.. |pip install| image:: https://img.shields.io/badge/pip%20install-metablmath-f441b8.svg?style=flat-square\n   :target: https://pypi.org/project/metablmath/\n.. |version| image:: https://img.shields.io/pypi/v/metablmath.svg?style=flat-square\n   :target: https://pypi.org/project/metablmath/\n.. |python versions| image:: https://img.shields.io/pypi/pyversions/metablmath.svg?style=flat-square\n   :target: https://pypi.org/project/metablmath/\n.. |build status| image:: https://img.shields.io/circleci/project/github/metabolize/blmath/master.svg?style=flat-square\n   :target: https://circleci.com/gh/metabolize/blmath\n.. |last commit| image:: https://img.shields.io/github/last-commit/metabolize/blmath.svg?style=flat-square\n   :target: https://github.com/metabolize/blmath/commits/master\n.. |open pull requests| image:: https://img.shields.io/github/issues-pr/metabolize/blmath.svg?style=flat-square\n   :target: https://github.com/metabolize/blmath/pulls",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/metabolize/blmath",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metablmath",
    "package_url": "https://pypi.org/project/metablmath/",
    "platform": "",
    "project_url": "https://pypi.org/project/metablmath/",
    "project_urls": {
      "Homepage": "https://github.com/metabolize/blmath"
    },
    "release_url": "https://pypi.org/project/metablmath/1.6.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Active fork of blmath, a collection math-related utilities developed at Body Labs",
    "version": "1.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5755913,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3ed4f82587072ab72f5e2458ea7610769b32873d049f2d1596e9dc5876432aa",
        "md5": "a302ed25a03af15fcdf1f041ca37581b",
        "sha256": "286586aa6e64b6e95e159da7c9dee6ed091d2992dfe823344cc7f4b2a860d12b"
      },
      "downloads": -1,
      "filename": "metablmath-1.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a302ed25a03af15fcdf1f041ca37581b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 57767,
      "upload_time": "2019-08-28T17:49:07",
      "upload_time_iso_8601": "2019-08-28T17:49:07.003651Z",
      "url": "https://files.pythonhosted.org/packages/a3/ed/4f82587072ab72f5e2458ea7610769b32873d049f2d1596e9dc5876432aa/metablmath-1.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}