{
  "info": {
    "author": "Matthias Erll",
    "author_email": "matthias@erll.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Software Distribution"
    ],
    "description": "Docker-Map\n==========\n\nManaging Docker images, containers, and their dependencies in Python.\n---------------------------------------------------------------------\n\nProject: https://github.com/merll/docker-map\n\nDocs: https://docker-map.readthedocs.io/en/latest/\n\nOverview\n========\n\nThis package provides tools for building Docker images, create\ncontainers, connect dependent resources, and run them in development as\nwell as production environments.\n\nThe library builds on functionality of the Docker Remote API client for\nPython, ``docker-py``. Its main target is to reduce the repetitive and\nerror-prone code that is required for creating and connecting containers\nin a non-trivial stack. It can be used standalone for custom\norchestration or for enhancing available deployment / remote execution\nutilities (see\n`Docker-Fabric <https://github.com/merll/docker-fabric>`__, `Salt\nContainer-Map <https://github.com/merll/salt-container-map>`__).\n\nContainers and their dependencies are configured object-based, through\nPython dictionaries, or YAML files.\n\nBuilding images\n===============\n\nWriting Dockerfiles is not hard. However, it only allows for using\nvariable context to a limited extent. For example, you may want to\nre-define directory paths in your project, without having to adjust it\nin multiple places; or you keep frequently reoccurring tasks\n(e.g.Â creating system user accounts) in your Dockerfile, and would like\nto use templates rather than copy & paste.\n\nDockerfiles\n-----------\n\nA ``DockerFile`` object generates a Dockerfile, that can either be saved\nlocally or sent off to Docker through the remote API. Supports common\ncommands such as ``addfile`` (``ADD``) or ``run``, but also formats\n``CMD`` and ``ENTRYPOINT`` appropriately for running a shell or exec\ncommand.\n\nDocker file context\n-------------------\n\n``DockerContext`` generates a Docker context tarball, that can be sent\nto the remote API. Its main purpose is to add files from ``DockerFile``\nautomatically, so that the Dockerfile and the context tarball are\nconsistent.\n\nCreating, connecting, and running containers\n============================================\n\nThis package reduces repetitions of names and paths in API commands, by\nintroducing the following main features:\n\n-  Automatically create, configure, and assign shared volumes.\n-  Automatically update containers if their shared volumes are\n   inconsistent, their image, or their configuration has been updated.\n-  Use alias names instead of paths to bind host volumes to container\n   shares.\n-  Automatically create and start containers when their dependent\n   containers are started.\n\nContainer configuration\n-----------------------\n\n``ContainerConfiguration`` objects keep the elements of a configured\ncontainer. Their main elements are:\n\n-  ``image``: Docker image to base the container on (default is\n   identical to container name).\n-  ``clients``: Optional list of clients to run the identical container\n   configuration on.\n-  ``instances``: Can generate multiple instances of a container with\n   varying host mappings; by default there is one main instance of each\n   container.\n-  ``shares``: Volumes that are simply shared by the container, only for\n   the purpose of keeping data separate from the container instance, or\n   for linking the entire container to another.\n-  ``binds``: Host volume mappings. Uses alias names instead of\n   directory paths.\n-  ``uses``: Can be names of other containers, or volumes shared by\n   another volume through ``attaches``. Has the same effect as the\n   ``volumes_from`` argument in the API, but using alias names and\n   automatically resolving these to paths.\n-  ``links``: For container linking. Container names are translated to\n   instance name on the map.\n-  ``attaches``: Generates a separate container for the purpose of\n   sharing data with another one, assigns file system permissions as set\n   in ``permissions`` and ``user``. This makes configuration of sockets\n   very easy.\n-  ``exposes``: Configures port bindings for linked containers and on\n   host interfaces.\n-  ``exec_commands``: Launches commands on containers after they have\n   been created and started.\n-  ``create_options`` and ``host_config`` provide the possibility to add\n   further keyword arguments such as ``command`` or ``entrypoint``,\n   which are passed through to the ``docker-py`` client.\n\nContainer maps\n--------------\n\n``ContainerMap`` objects contain three sets of elements:\n\n1. Container names, each associated with a ``ContainerConfiguration``.\n2. Volumes, mapping shared directory paths to alias names.\n3. Host shares, mapping host directory paths to alias names.\n\nClients, as defined in a ``ContainerConfiguration``, can also be set\nglobally on map level.\n\n``ContainerConfiguration`` instances and their elements can be created\nand used in a dictionary-like or attribute syntax, e.g.\n``container_map.containers.container_name.uses`` or\n``container_map.containers['container_name']['uses']``. Volume aliases\nare stored in ``container_map.volumes`` and host binds in\n``container_map.host``; they support the same syntax variations as\ncontainers.\n\nClient configuration\n--------------------\n\n``ClientConfiguration`` objects allow for a host-specific management of\nparameters, such as service URL and timeout. For example, the\n``interfaces`` property translates the ``exposes`` setting for a\nconfiguration on each host into a port binding argument with the local\naddress.\n\nCombining the elements\n----------------------\n\n``MappingDockerClient`` applies one or multiple ``ContainerMap``\ninstances to one or multiple Docker clients. A container on the map can\neasily be created with all its dependencies by running\n``client.create('container_name')``.\n\nRunning the container can be as easy as\n``client.start('container_name')`` or can be enhanced with custom\nparameters such as ``client.start('container_name', expose={80: 80})``.\n\nIf all configuration is stored on the map, creation and start are\ncombined in ``client.startup('container_name')``.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/merll/docker-map",
    "keywords": "docker,deployment",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docker-map",
    "package_url": "https://pypi.org/project/docker-map/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/docker-map/",
    "project_urls": {
      "Homepage": "https://github.com/merll/docker-map"
    },
    "release_url": "https://pypi.org/project/docker-map/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Managing Docker images, containers, and their dependencies in Python.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6989055,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "057c491fe9ca98d7272f444f7ddf97704d1eb6ffe785e18a62df88478be5045a",
        "md5": "396a89ebc12f82b2c708e4599f726932",
        "sha256": "c03d1f8e51dff631f367bfb55d990ba39c24777bca3c5cd5caa26123f0d0e7a6"
      },
      "downloads": -1,
      "filename": "docker_map-1.1.1-py3.7.egg",
      "has_sig": false,
      "md5_digest": "396a89ebc12f82b2c708e4599f726932",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": null,
      "size": 357058,
      "upload_time": "2020-04-09T20:41:18",
      "upload_time_iso_8601": "2020-04-09T20:41:18.189756Z",
      "url": "https://files.pythonhosted.org/packages/05/7c/491fe9ca98d7272f444f7ddf97704d1eb6ffe785e18a62df88478be5045a/docker_map-1.1.1-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba3c45ed6477b9170bb99bef0b580978d96507ac8fbf6aa50e5f9853ec57aa1f",
        "md5": "16750f2a753128edd874c5e6efd40493",
        "sha256": "f4c2f1b85e0648c00b5493f6747bd3f724a1211d761bb97f7bd1163f64ac73b9"
      },
      "downloads": -1,
      "filename": "docker-map-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "16750f2a753128edd874c5e6efd40493",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 112135,
      "upload_time": "2020-04-09T20:41:19",
      "upload_time_iso_8601": "2020-04-09T20:41:19.735810Z",
      "url": "https://files.pythonhosted.org/packages/ba/3c/45ed6477b9170bb99bef0b580978d96507ac8fbf6aa50e5f9853ec57aa1f/docker-map-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}