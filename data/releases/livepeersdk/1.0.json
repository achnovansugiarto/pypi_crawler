{
  "info": {
    "author": "Ragavendiran Balasubramanian",
    "author_email": "bgragavendiran@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# LivePeerSDK\n## Make LivePeerAPICalls from Python\n## License : MIT\n#####\n##### Copyright (c) 2022 RAGAVENDIRAN BALASUBRAMANIAN. \n##### GMAIL   : bgragavendiran@gmail.com\n##### LINKEDIN: https://www.linkedin.com/in/ragavendiranbalasubramanian/\n#####\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> Of this software and associated documentation files (the \"software\"), to deal\n> In the software without restriction, including without limitation the rights\n> To use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> Copies of the software, and to permit persons to whom the software is\n> Furnished to do so, subject to the following condition that the owner and source contributors names and \n> details  shall not to be removed from the project\n> \n> ###### \n>  The above copyright notice and this permission notice shall be included in all\n> copies or substantial portions of the Software.\n> ###### \n>  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n>  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n>  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n>  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n>  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n>  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n>  SOFTWARE.\n## Powered By\n[![N|Solid](https://images.squarespace-cdn.com/content/v1/54dab2c9e4b0512a94d54e0d/1514399509872-CKQEQL1C7O05DT70HWZC/LivepeerBrand_BradleyRHughes_Slide_02.jpg)](https://www.linkedin.com/in/ragavendiranbalasubramanian/)\n\n\n![Build Status](https://travis-ci.org/joemccann/dillinger.svg?branch=master)\n\nLivePeerSDK for Python Developed by Team Heptre,\nis a realtime PythonSDK that directly interlinks with the LivePeerAPI \nendpoints which makes the life of the user simple.\n\n\n## Features\n\n- simply start and use livepeer with ``` livePeer=LivePeerSDK(<LIVEPEER_API_KEY>)  ```      \n- The Library is highly modular and plug and play in nature\n- Forget handling requests just make the function call.\n- The request responses are all dicts \n- Detailed Docs Feeling Stuck Anywhere?? help(<functionName>) will get you right back on track.\n\n## Installation\n\nLivePeerSDK requires [python3](https://www.python.org/downloads/) to run.\n\n```sh\npip install LivePeerSDK\n```\n\n## EXAMPLES\n\nInstructions on how to use LivePeerSDK in your own project can be inferred from below.\n```\nfrom LivePeerSDK_Python.LivePeerSDK import LivePeerSDK\nLivePeer=LivePeerSDK(str(<YOUR_LIVEPEER_API_KEY>))\n\nfor asset in LivePeer.listAssets():\n    print(asset[\"id\"])\n\nOUTPUT:\n19233508-5a34-4508-b54f-fe71b062d225\n21bd42e3-044e-4093-b920-46fc104b395e\n67095c2f-beda-47f1-ad04-2787fad529c9\naecfa170-7d50-4e47-93aa-f0cae8912398\na20373cd-5c27-4948-a5cb-bb55de5def70\nd8b52bb6-4bda-4059-bd73-e6dae2d88c80\nb9ea232c-6b6c-4a36-9a9c-809f2144592f\n\nProcess finished with exit code 0\n```\n## USAGE\n\n\n| Function | USAGE |\n| ------ | ------ |\n| createUploadUrl(`name`) | Creates a new upload url to directly upload a video asset to livepeer |\n| exportAssetToIPFS(`assetID`)| Export a specific `assetID` to ipfs it initializes a cloud async call in livepeer which creates a respective `taskID` |\n| importWebAsset(`url`, `name`) | Import a video Asset to Livepeer from an external URL.|\n|listAssets() | List all assets currently uploaded to livepeer in the form of a dictionary |\n|listTasks()|List all tasks currently uploaded to livepeer |\n|retrieveAsset(`assetID`)|Retrieve a specific `assetId` from live peer|\n|retrieveTask(`taskID`)|Retrieve a specific `taskId` from livepeer with ipfs link|\n|uploadContent(`filePATH`, `assetURL`)|Create a new Direct Upload URL  to directly upload a video Asset to Livepeer|\n_______________\n> ## createUploadUrl(`name`)\n>:parameter\n>\"name\":\"Example name\"\n>\n>:returns\n>dict\n>{\n> url:<URL>,\n> asset:{'id':<assetid>, 'playbackId':<playbackId>, 'userId':<userId>, 'createdAt':<timestamp>, >'status':<STATUS>, 'name':<name>}\n> task:{'id':<taskid>, 'createdAt':<timestamp>, 'type':<importType>, 'outputAssetId':<outassetid>, >'userId':<uid>, 'params':{'uploadedObjectKey': <type>}}, 'status':{'phase': <STATUS>, 'updatedAt': <>timestamp>}}\n>}\n_________________\n> ## exportAssetToIPFS(`assetID`)\n>:param\n> \"assetID\":\"$AssetID\"\n> \n> :returns\n> {}\n_______________\n> ## importWebAsset(`url`, `name`)\n>:param\n>        \"url\":\"$EXTERNAL_URL\",\n>        \"name\":\"Example name\\\"\n_______________\n> ## listAssets()\n>:param : NONE\n> :returns\n> <class 'list'>\n> LIST OF DICTIONARIES OF FORMAT  [<class 'dict>,...]\n>\n> FOR UPLOADED VIDEOS\n> {\n> id : <`assetID`>,\n> hash : [{'hash': <hash>, 'algorithm': 'md5'}, {'hash': <hash>, 'algorithm': 'sha256'}]\n> name : <name>,\n> size : <size>,\n> status : ready,\n> userId : <userID>,\n> createdAt : <timestamps>,\n> updatedAt : <timestamps>,\n> videoSpec : {'format': <format>, 'tracks': [{'fps': <fps>, 'type': 'video', 'codec': 'h264', 'width': <width>, 'height': <height>, 'bitrate': <bitrate>, 'duration': <duration>, 'pixelFormat': 'yuv420p'}, {'type': 'audio', 'codec': 'aac', 'bitrate': <birate>, 'channels': 2, 'duration': <duration>, 'sampleRate': <samplerate>}], 'duration': <duration>}\n> playbackId : <playbackID>,\n> downloadUrl : <downloadURLfromLIVEPEERCDN>\n> }\n>\n> FOR PENDING VIDEOS\n> {\n> 'id': <ID>,\n> 'name':  <name>,\n> 'status': 'waiting',\n> 'userId': <userID>,\n> 'createdAt': <timestamps>,\n> 'playbackId': <playbackID>,\n> }\n>_______________\n> ## listTasks()\n_______________\n>:param : NONE\n>\n>:returns\n><class 'list'>\n>LIST OF DICTIONARIES OF FORMAT\n>\n>FOR EXPORT\n>{\n>'id':<taskID>,\n>'type':<type>,\n>'output': {'export': {'ipfs': {'videoFileCid':<videoFileCid>,'nftMetadataCid':<nftMetadataCid>,'videoFileUrl':<videoFileUrl>,'videoFileGatewayUrl':<videoFileGatewayUrl>,'nftMetadataUrl':<nftMetadataUrl>,'nftMetadataGatewayUrl':<nftMetadataGatewayUrl>,'params': {'export': {'ipfs': {<ipfsMetadata>}}},'status': {'phase':<phase>,'updatedAt': <timestamps>},'userId':<userId>,'createdAt': <timestamps>,'inputAssetId':<inputAssetId>}\n>}\n>\n>FOR IMPORT\n>{\n>'id': <taskID>,\n>'type': 'import',\n>'output': {'import': {'assetSpec': {'hash': [hash : [{'hash': <hash>, 'algorithm': 'md5'}, {'hash': <hash>, 'algorithm': 'sha256'}]],\n>'name': <name>,\n>'size': <size>,\n>'type': 'video',\n>'videoSpec' : {'format': <format>, 'tracks': [{'fps': <fps>, 'type': 'video', 'codec': 'h264', 'width': <width>, 'height': <height>, 'bitrate': <bitrate>, 'duration': <duration>, 'pixelFormat': 'yuv420p'}, {'type': 'audio', 'codec': 'aac', 'bitrate': <birate>, 'channels': 2, 'duration': <duration>, 'sampleRate': <samplerate>}], 'duration': <duration>}\n>}}},\n>'params': {'import': {'uploadedObjectKey': <uploadKey>}},\n>'status': {\n>'phase': <status>,\n>'userId' : <userID>,\n>'createdAt': <timestamps>,\n>'updatedAt' : <timestamps>,\n>'outputAssetId': <outputassetID>\n>}\n>}     \n>_____________\n> ## retrieveAsset(`assetID`)\n>:param :\n> `assetID` obtained from createUploadURL(name)\n> :returns\n> <class 'dict'>\n> LIST OF DICTIONARY OF FORMAT\n>\n> FOR UPLOADED VIDEOS\n> {\n> id : <`assetID`>,\n> hash : [{'hash': <hash>, 'algorithm': 'md5'}, {'hash': <hash>, 'algorithm': 'sha256'}]\n> name : <name>,\n> size : <size>,\n> status : ready,\n> userId : <userID>,\n> createdAt : <timestamps>,\n> updatedAt : <timestamps>,\n> videoSpec : {'format': <format>, 'tracks': [{'fps': <fps>, 'type': 'video', 'codec': 'h264', 'width': <width>, 'height': <height>, 'bitrate': <bitrate>, 'duration': <duration>, 'pixelFormat': 'yuv420p'}, {'type': 'audio', 'codec': 'aac', 'bitrate': <birate>, 'channels': 2, 'duration': <duration>, 'sampleRate': <samplerate>}], 'duration': <duration>}\n> playbackId : <playbackID>,\n> downloadUrl : <downloadURLfromLIVEPEERCDN>\n> }\n>\n> FOR PENDING VIDEOS\n> {\n> 'id': <ID>,\n> 'name':  <name>,\n> 'status': 'waiting',\n> 'userId': <userID>,\n> 'createdAt': <timestamps>,\n> 'playbackId': <playbackID>,\n> }\n>_______________\n> ## retrieveTask(`taskID`)\n>:param : \n>\"taskID obtained from listTASKS\n>\n>:returns\n><class 'dict'>\n>LIST OF DICTIONARIES OF FORMAT\n>\n>FOR EXPORT\n>{\n>'id':<taskID>,\n>'type':<type>,\n>'output': {'export': {'ipfs': {'videoFileCid':<videoFileCid>,'nftMetadataCid':<nftMetadataCid>,'videoFileUrl':<videoFileUrl>,'videoFileGatewayUrl':<videoFileGatewayUrl>,'nftMetadataUrl':<nftMetadataUrl>,'nftMetadataGatewayUrl':<nftMetadataGatewayUrl>,'params': {'export': {'ipfs': {<ipfsMetadata>}}},'status': {'phase':<phase>,'updatedAt': <timestamps>},'userId':<userId>,'createdAt': <timestamps>,'inputAssetId':<inputAssetId>}\n>}\n>\n>FOR IMPORT\n>{\n>'id': <taskID>,\n>'type': 'import',\n>'output': {'import': {'assetSpec': {'hash': [hash : [{'hash': <hash>, 'algorithm': 'md5'}, {'hash': <hash>, 'algorithm': 'sha256'}]],\n>'name': <name>,\n>'size': <size>,\n>'type': 'video',\n>'videoSpec' : {'format': <format>, 'tracks': [{'fps': <fps>, 'type': 'video', 'codec': 'h264', 'width': <width>, 'height': <height>, 'bitrate': <bitrate>, 'duration': <duration>, 'pixelFormat': 'yuv420p'}, {'type': 'audio', 'codec': 'aac', 'bitrate': <birate>, 'channels': 2, 'duration': <duration>, 'sampleRate': <samplerate>}], 'duration': <duration>}\n>}}},\n>'params': {'import': {'uploadedObjectKey': <uploadKey>}},\n>'status': {\n>'phase': <status>,\n>'userId' : <userID>,\n>'createdAt': <timestamps>,\n>'updatedAt' : <timestamps>,\n>'outputAssetId': <outputassetID>\n>}\n>}     \n>_____________\n> ## uploadContent(`filePATH`, `assetURL`)\n>:param\n>\"filePATH\":\"PASS THE FILE PATH OF VIDEO IN H264 and AAC codec\n>\"assetURL\":ASSET URL FOR THE FILE\n>\n>:returns\n>{}\n>_____________\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.org/project/LivePeerSDK/",
    "keywords": "LivePeerSDK",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LivePeerSDK",
    "package_url": "https://pypi.org/project/LivePeerSDK/",
    "platform": null,
    "project_url": "https://pypi.org/project/LivePeerSDK/",
    "project_urls": {
      "Git Link": "https://github.com/RAGANITHI/EthernalHacks-LivePeerSDK",
      "Homepage": "https://pypi.org/project/LivePeerSDK/"
    },
    "release_url": "https://pypi.org/project/LivePeerSDK/1.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3",
    "summary": "A simple comprehensive Python Wrapper for LivePeerAPI.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13311193,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "40846f7661aacb3cdbdc4d156dcd029020d1540019847d2d633b061b8c594aad",
        "md5": "a5e329d34e2b6c0dac5708d9768ec4e5",
        "sha256": "369960591ef5afc94b3f685ff81cd9984c93defe029a95a4b85c5858fc44077d"
      },
      "downloads": -1,
      "filename": "LivePeerSDK-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5e329d34e2b6c0dac5708d9768ec4e5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 8674,
      "upload_time": "2022-03-27T13:21:15",
      "upload_time_iso_8601": "2022-03-27T13:21:15.978768Z",
      "url": "https://files.pythonhosted.org/packages/40/84/6f7661aacb3cdbdc4d156dcd029020d1540019847d2d633b061b8c594aad/LivePeerSDK-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0ada58f5b2d2a10d1e5d300362a0961d68b18e676f546f235894a00a7eb67a7",
        "md5": "b8b79b1a6704f8f221a0b8fa4cc62119",
        "sha256": "6a2cd71463bab91ad6625b3a6e65837a576ba1d7fb64f84652cb60edc6313366"
      },
      "downloads": -1,
      "filename": "LivePeerSDK-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b8b79b1a6704f8f221a0b8fa4cc62119",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 7042,
      "upload_time": "2022-03-27T13:21:17",
      "upload_time_iso_8601": "2022-03-27T13:21:17.572328Z",
      "url": "https://files.pythonhosted.org/packages/c0/ad/a58f5b2d2a10d1e5d300362a0961d68b18e676f546f235894a00a7eb67a7/LivePeerSDK-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}