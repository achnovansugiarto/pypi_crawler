{
  "info": {
    "author": "Osvaldo Molina",
    "author_email": "osvaldo.molina.128@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django NoSQL user document storage\nDjango app that provides a simple REST API for storing and querying JSON documents.\nDesigned specially for cases where model schema is too variable or where the frontend is in charge of the schema of the stored data (backend as a service). \nNotice that the word \"document\" and \"object\" are used interchangeably in this readme.\n\n## Features\n- Storing, querying, deleting schemaless JSON documents.\n- Permission system that allows users define who can access their own documents.\n- Query objects by their contents.\n- Allow anonymous access to specific documents.\n- REST API \n\n# Package requirements\n- django-filter\n- django-guardian\n- djangorestframework\n- djangorestframework-guardian\n\n# Installing\n- Add the following apps in your settings.py:\n\n```python\nINSTALLED_APPS = (\n    ...\n    \"rest_framework\",\n    \"django_filters\",\n    \"guardian\",\n    \"nosql_objects\",\n    ...\n)\n\nAUTHENTICATION_BACKENDS = (\n    ...\n    'django.contrib.auth.backends.ModelBackend',\n    'guardian.backends.ObjectPermissionBackend',\n    ...\n)\n\n```\n\n- Add the following routes in urls.py:\n\n```python\nurlpatterns = [\n    ...\n    path('api/', include('nosql_objects.urls')),\n    ...\n]\n```\n\n- Execute migrations to add models to database.\n```python\npython manage.py migrate\n```\n\n# Object classes\nObject classes define the types of objects that can be created in your application. \nThese types are analogous to models in Django and tables in a database, and their main purpose is to delimit the schema of your objects when querying.\nThe declaration of this classes can be done trough the admin portal of Django.\n\n# Authentication\nThe examples below aren't showing any authentication code, but is required you add one like rest_framework_simplejwt.\n\n# Creating new objects\nAuthorized users can create new objects like this:\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d {{'{\"object_class\":\"myClass\", \"data\":{myInfo:\"value\"} }'}} {{http://yourdomain.com/api/objects/}}\n```\n\n# Querying\nClients can only query objects they read permission assigned. \nThe following query will list all objects visible by the user:\n```bash\ncurl http://yourdomain.com/api/objects/\n```\n\n## Filter by class\nRetriving objects on a class can be done by appending the class name in the query parameters:\n ```bash\ncurl http://yourdomain.com/api/objects/?object_class=my_class_name\n```\nOr with the unique ID of the class:\n```bash\ncurl http://yourdomain.com/api/objects/?object_class=2\n```\n\n## Filter by object contents\nObjects can be filtered by their content using the same Django syntax used for JSON fields, but passed as an object whose properties will be transformed into Django filters. For example the following code will bring all objects that have a property \"myInfo\" with a value of \"test_value\":\n```bash\ncurl -H \"Content-Type: application/json\" -d {{'{\"query\":{\"myInfo\":\"test_value\"} }'}} {{http://yourdomain.com/api/objects/1/perms/}}\n```\nThe querying filters can be appended with the following JSON filters to change behaviour:\n\n|Name | Description | Example\n| --- | --- | --- |\n|__isnull|Checks if the value of the property is null| \"propName__isnull\":false\n|__icontains|Case-insensitive containment test|\"propName__icontains\":\"hello\"\n|__endswith|Case-sensitive ends-with.|\"propName__endswith\":\"world\"\n|__iendswith|Case-insensitive ends-with.|\"propName__iendswith\":\"World\"\n|__iexact|Case-insensitive exact match.|\"propName__iexact\":\"hello world\"\n|__regex|Case-sensitive regular expression match|\"propName__regex\":false\n|__iregex|Case-insensitive regular expression match|\"propName__iregex\":false\n|__startswith|Case-sensitive starts-with|\"propName__startswith\":\"Hello \"\n|__istartswith|Case-insensitive starts-with|\"propName__istartswith\":\"hel\"\n|__lt|Number is less than|\"propName__lt\":4\n|__lte|Number is less than or equal|\"propName__lte\":5\n|__gt|Number is grater than|\"propName__gt\":4\n|__gte|Number is greater than or equal|\"propName__gte\":5\n\nProperty queries can be nested by chaining the properties with double underscore before any filters, like this:\n```json\n{\n  \"prop_example__isnull\": false,\n  \"prop_example__child_prop__endswith\": \" title\",  \n}\n```\n\nDetailed info, caveats of the query system and some additional DB specific filters can be found [Django's documentation](https://docs.djangoproject.com/en/4.1/topics/db/queries/#querying-jsonfield).\n\n*Warning*: Don't name properties of your documents with the same names as the filters, behavior is not documented yet.\n\n\n## Pagination\nPagination is used to limit the amount of results returned in querying requests. \nAll the results contain the following structure:\n```json\n{\n  \"count\": 5,\n  \"next\": \"https://api.example.org/accounts/?limit=100&offset=500\",\n  \"previous\": \"https://api.example.org/accounts/?limit=100&offset=300\",\n  \"results\": [\n    {\n      \"object_class\": \"scores\",\n      \"created_by\": 1,\n      \"updated_by\": 1,\n      \"created_at\": \"...\",\n      \"updated_at\": \"...\",\n      \"version\": 1,\n      \"data\": { \n        \"level1\": 350\n      }\n    }\n  ]\n}\n```\n\n# Permissions\nEach object contains its own list of permissions associated with it. Only users with the 'change' permission can change the permission list of an object.\nThe basic is the list of permissions `view_object`, `change_object` and `delete_object`. These are the same declared by Django, but custom permissions will be accepted too. Accessing the permissions endpoint is done using the ID of an existing object, like this:\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d {{'{\"view_object\":{\"users\":[\"userB\"]} }'}} {{http://yourdomain.com/api/objects/1/perms/}}\n```\n\nThe permission endpoint **always** adds the permissions passed, unless the property `clear` is passed as true, then any existing permission is deleted before adding the new ones.\n\nThe endpoint expects a json with the list of permissions with the users, groups or anonymous user  assigned (named 'AnonymousUser') to each, like this:\n```json\n{\n  \"clear\": true,\n  \"view_object\": {\n    \"users\": [\n      \"userA\", \n      \"userB\",\n      \"AnonymousUser\"\n    ]\n  },\n  \"change_object\": {\n    \"users\": [\n      \"userB\"\n    ]\n  },\n  \"delete_object\": {\n    \"groups\": [\n      \"admin_group\"\n    ]\n  }\n}\n```\n\nNotice that the anonymous user can only be assigned the permission of view, an existing user is required for any other type of permission.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/osval-do/django-nosql-storage/tree/main",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-nosql-objects",
    "package_url": "https://pypi.org/project/django-nosql-objects/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-nosql-objects/",
    "project_urls": {
      "Bug Tracker": "https://github.com/osval-do/django-nosql-storage/issues",
      "Changelog": "https://github.com/osval-do/django-nosql-storage/blob/main/CHANGES.rst",
      "Documentation": "https://github.com/osval-do/django-nosql-storage",
      "Homepage": "https://github.com/osval-do/django-nosql-storage/tree/main",
      "Source Code": "https://github.com/osval-do/django-nosql-storage"
    },
    "release_url": "https://pypi.org/project/django-nosql-objects/1.0/",
    "requires_dist": [
      "Django (>=3.2)",
      "django-filter",
      "django-guardian",
      "djangorestframework",
      "djangorestframework-guardian"
    ],
    "requires_python": ">=3.7",
    "summary": "Django_nosql_objects is an app for allowing users store JSON documents",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15446748,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76bccbbf8eb8cd2597f8b31dd2e7c16309819351d104480fbbaf06f70b3a1fc4",
        "md5": "eb78d4194fc1cd7b787c5c22e8bdbbad",
        "sha256": "54ca6485c9539ce7ef106b8337dc3d65401a5879f1490add0937ac353f006f44"
      },
      "downloads": -1,
      "filename": "django_nosql_objects-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eb78d4194fc1cd7b787c5c22e8bdbbad",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 12049,
      "upload_time": "2022-10-18T09:42:23",
      "upload_time_iso_8601": "2022-10-18T09:42:23.400111Z",
      "url": "https://files.pythonhosted.org/packages/76/bc/cbbf8eb8cd2597f8b31dd2e7c16309819351d104480fbbaf06f70b3a1fc4/django_nosql_objects-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "321d78257ac4ca57161ba8240e0d9c523abfb5aecb93468b7eaddcd882b484dc",
        "md5": "f1e130182387a8936af4451fc8a282ae",
        "sha256": "0c643dcc919b05535e6b143d7f2e37e86697bad9f6d86dfa2fa4d5d2a63f1e6f"
      },
      "downloads": -1,
      "filename": "django_nosql_objects-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f1e130182387a8936af4451fc8a282ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10221,
      "upload_time": "2022-10-18T09:42:26",
      "upload_time_iso_8601": "2022-10-18T09:42:26.048542Z",
      "url": "https://files.pythonhosted.org/packages/32/1d/78257ac4ca57161ba8240e0d9c523abfb5aecb93468b7eaddcd882b484dc/django_nosql_objects-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}