{
  "info": {
    "author": "Harold J. Iwen",
    "author_email": "inventorsniche349@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Max - Binary Heap Implementation - Beta Version (More Testing Coming)\nPYPI module that provides Max, Binary Heap, functionality. This is the beta version, and thus requires a few more tests. This implementation utilizes the numpy.memmap so overall memory consumption can be greatly reduced.\n\n#Overview\nDocumentation for the Max - Binary Heap Implementation:\n\n# 1. Core Functions:\n\n  How to use: <br/>\n      from MaxHeap import FUNCTION_NAME\n\n  ## def createBTO(filename)\n      +Creates a memmap matrix and returns a list containing the following: [memmap list, # of Levels, Largest Index, Number of Nodes]\n      \t       +filename = String variable describing the file name of a numpy.memmap\n\n\n  ## def createBTT(filename, numElements)\n      +Has the same functionality as createBTO, only it allows users to input how many elements he/she wants...\n\n  ## def BreadthFS(BT, value)</br>\n      +Takes the list of memmap references and searches for a particular value given by the user.\n       The return values are three components: x, y, z that make up the index...\n       \t   +BT = memmap list\n\t       \t   +value = The value to search for...\n\n  ## def getHeightTwo(value, INDEX, LEVEL, BT)\n      +Takes an index value provided by the user and returns the level of the tree that the index is on.\n       If the provided index is not in the range 0 - INDEX, -1 will be returned...\n       \t  +value = The value to return the height of. (returns -1 if the value can't be found)\n       \t  +INDEX = The max index value of the binary heap that is occupied by a value...\n\t  \t  +LEVEL = The number of levels the binary heap has...\n\t\t  +BT = memmap list\n\n  ## def isFull(NUMNODES, LEVEL)\n      +Returns 1 if the binary heap is a full tree, or -1 if not...\n            +NUMNODES = The number of occupied nodes in the binary heap...\n\t       \t+LEVEL = The highest level of the current binary heap...\n\n  ## def ExtractMax(BT, INDEX, LEVEL)\n      +Returns the extracted max value, new max INDEX value, and LEVEL value respectively in that order.\n      \t      +INDEX = The max index value of the binary heap that is occupied by a value...\n\t       \t      +LEVEL = The number of levels the binary heap has...\n\n  ## def MAXBTAdd(BT, LEVEL, INDEX, NUMNODES, value)\n      +Adds a new given value to the binary heap and returns the new LEVEL, max INDEX value, and number of nodes in that order.\n      \t+BT = Memmap list\n\t    \t+LEVEL = The number of levels the binary heap has...\n\t\t+INDEX = The max INDEX value of the binary heap.\n\t\t+NUMNODES = The number of nodes currently occupied within the binary heap.\n\t\t+value = The value to add to the binary heap.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Hiwen-STEM/MaxHeap",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.inventorsniche.com",
    "keywords": "Binary_Tree,Heap,Tree,Max_Heap,Binary",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MaxHeap",
    "package_url": "https://pypi.org/project/MaxHeap/",
    "platform": "",
    "project_url": "https://pypi.org/project/MaxHeap/",
    "project_urls": {
      "Download": "https://github.com/Hiwen-STEM/MaxHeap",
      "Homepage": "https://www.inventorsniche.com"
    },
    "release_url": "https://pypi.org/project/MaxHeap/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An beta version of a max-Heap that utilizes numpy memmaps so memory consumption can be reduced.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10563316,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4013db9af02d7f82fd77247499127f9d20b6405e43213790a7a1b21794952ea0",
        "md5": "3bbd0877f3b0216f0057b4cb7074de64",
        "sha256": "bbd0e1c3bb4772c9af08480f8ae8b9e2221a3727bc19d0b7db844de972d993b2"
      },
      "downloads": -1,
      "filename": "MaxHeap-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3bbd0877f3b0216f0057b4cb7074de64",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7195,
      "upload_time": "2021-05-25T02:02:28",
      "upload_time_iso_8601": "2021-05-25T02:02:28.680227Z",
      "url": "https://files.pythonhosted.org/packages/40/13/db9af02d7f82fd77247499127f9d20b6405e43213790a7a1b21794952ea0/MaxHeap-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}