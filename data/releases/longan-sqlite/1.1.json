{
  "info": {
    "author": "诗人猫白白",
    "author_email": "cmaye@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "<font style='font-family:Courier New '>\n\n# 欢迎使用longan-sqlite3 v0.8\n\n------\n\n我们理解您需要更便捷更高效更轻量级的工具记录数据，并将其中承载的价值传播给他人，**longan-sqlite3** 是我们给出的答案 ———— 让您随心所欲的完成如下功能\n\n> * Create\n> * Research\n> * Update\n> * Delete\n\n![longan-sqlite3-logo](https://img-blog.csdn.net/20180329103235613)\n\n\n\n> 您现在看到的这个 longan-sqlite3 版本，仅为开发版，功能将陆续增加\n\n> 0.8 修复获取表主键的方式，并增加了 Kernel 和 FastFlesh 以简化操作\n\n> 0.7 新增创建表\n\n> 0.6 新增排序和分页的函数，支持了几乎所有聚合函数\n\n> 0.5 where子句\n>       1.新增 between 和 in 的支持, 新增方法；\n>       2.提供like表达式忽略大小写的功能\n>     init方法提供debug模式，可以打印sql语句\n\n> 0.4 新增API文档\n\n> 0.3 新增分组聚合函数\n\n> 0.2 修复了主键判断，修复了handler接口\n------\n\n## 什么是 longan\n\nlongan 是一种水果，很甜，喜欢的人吃很多，不喜欢的人一吃就上火！\n\n### 1. 以下是我们计划中的功能 \n\n- [x] 支持 CRUD\n- [x] 支持 分组聚合函数\n- [x] 修复 API文档\n- [x] 新增 where 语句支持\n\n### 2. 以下是我们的行为守恒公式\n\nlongan=mc^2\n\n### 3. 使用方法\n\n - 导入longan\n```python\nfrom longan_sqlite import Longan, Flesh\n```\n - 初始化longan\n```python\nLongan.init('test.db', True)\n```\n - 实例化longan\n```python\nlongan = Longan('company')\n```\n - 导入数据库（此处会在日后的版本中进行抽象）\n```python\nlongan.execute_file('company.sql')\n```\n - 其中的表结构 company.sql\n```sql\nCREATE TABLE IF NOT EXISTS COMPANY(\n   id INTEGER PRIMARY KEY AUTOINCREMENT,\n   name           TEXT    NOT NULL,\n   age            INT     NOT NULL,\n   address        CHAR(50),\n   salary         REAL\n);\n```\n - Create\n```python\nflesh = Flesh(name='emperor', age=23, address='北京', salary=10)\nlongan.insert_or_update(flesh)\n```\n - Update\n```python\nflesh.age += 1\nflesh.salary += 5\nlongan.insert_or_update(flesh)\n```\n - Query\n```python\nret = longan.where(age_gt=18, salary_elt=100, salary_gt=0).query()\nfor r in ret:\n    print(r)\n```\n - Delete\n```python\n# 查询\nret = longan.where(age_gt=18, salary_elt=100, salary_gt=0).query()\n\nfor r in ret:\n    print(r)\n    if r.name == 'jobs':\n        # 通过对象进行删除\n        longan.delete(r)\n\n# 通过条件进行删除\nlongan.where(id_gt=0).delete()\n```\n - 0.3新增分组聚合查询\n```python\nlongan.aggregate(age_max=\"maxAge\", salary_min=\"minSalary\")\nlongan.where(age_gt=5)\nlongan.group_by('address')\nret = longan.query()\nfor r in ret:\n    print(r)\n```\n### 4. API文档\n\n| 接口        | 参数   |  说明  |\n| :--------:   | :-----:  | :----  |\n| init | db_path, debug | 初始化数据库文件，开启debug模式后，将会打印sql语句 |\n| select     | - |   未开放，当前版本默认为选择全部字段，除非使用聚合函数     |\n| from_table | table_name | 指定查询表 |\n| where | **field_condition | 借鉴了Django中查询的操作，\"_\"前为字段名，后为表达式，需要传递值 |\n| insert_or_update | *field_obj | 将一个或多个Flesh对象插入或更新到表中，会自动为对象添加主键 |\n| delete | *field_obj | 可以通过where方法来根据条件来进行删除，也可以对一个或多个Flesh对象直接删除，前提是对象拥有主键 |\n| group_by | field | 对指定字段进行分组 |\n| aggregate | **field_condition | 可以参考where语句：字段名_**聚合函数名**=\"别名\" |\n| query | - | 查询，需要组合使用 |\n| primary_key | - | 主键 |\n| ignore_case | ignore | 是否忽略大小写 |\n| limit | num, offset | 分页 |\n| order_by | field, desc |根据字段进行排序 |\n\n### 5. Where子句操作表达式\n| 操作符        | 运算符   |  说明  |\n| :--------:   | :-----:  | :----  |\n| gt | > | 大于 |\n| lt | < | 小于 |\n| eq | = | 等于 |\n| neq | != | 不等于 |\n| egt | >= | 不小于 |\n| elt | <= | 不大于 |\n| like | LIKE | 字符串模糊查询 |\n| in | IN | 集合查询，参数传值为tuple，如: age_in=(28, 29, 30) |\n| between | BETWEEN | 介于两值之间，参数传值为两个元素的tuple,如有多个则取第一个和最后一个，如：age_between=(28, 30) |\n\n</font>",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/myemperor/longan-sqlite3",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "longan-sqlite",
    "package_url": "https://pypi.org/project/longan-sqlite/",
    "platform": "",
    "project_url": "https://pypi.org/project/longan-sqlite/",
    "project_urls": {
      "Homepage": "https://github.com/myemperor/longan-sqlite3"
    },
    "release_url": "https://pypi.org/project/longan-sqlite/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "我们理解您需要更便捷更高效更轻量级的工具记录数据，并将其中承载的价值传播给他人，longan-sqlite3 是我们给出的答案",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16222206,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b44dffdf4c57a22d987dee784b3ebc3dccc94f808d37c852067818b534a2444",
        "md5": "cbaca21d8c47c46963a884d9ca791b84",
        "sha256": "ae5c636f9a7f78ffe57d36ee4f1c574f319de0ae582c9c8658725038dda54ce8"
      },
      "downloads": -1,
      "filename": "longan_sqlite-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cbaca21d8c47c46963a884d9ca791b84",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 10290,
      "upload_time": "2019-02-15T04:00:49",
      "upload_time_iso_8601": "2019-02-15T04:00:49.432387Z",
      "url": "https://files.pythonhosted.org/packages/4b/44/dffdf4c57a22d987dee784b3ebc3dccc94f808d37c852067818b534a2444/longan_sqlite-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}