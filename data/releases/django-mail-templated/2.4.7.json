{
  "info": {
    "author": "Artem Rizhov",
    "author_email": "artem.rizhov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==============================\nDjango-Mail-Templated\n==============================\n\n**Send emails using Django template system**\n\nTable of Contents\n=================\n\n*   `Overview`_\n\n*   `Installation`_\n\n*   `Usage`_\n\n*   `Troubleshooting`_\n\n*   `Useful links`_\n\n*   `Changelog <https://github.com/artemrizhov/django-mail-templated/blob/master/CHANGELOG.rst>`_\n\nOverview\n=================\n\nThis is a tiny wrapper around the standard ``EmailMessage`` class and\n``send_mail()`` function that provides an easy way to create email messages\nusing the `Django template system\n<https://docs.djangoproject.com/es/1.9/topics/templates/>`_\nJust pass ``template_name`` and ``context`` as the first parameters then use as\nnormal.\n\n**Features:**\n\n* Built with OOP, KISS and flexibility in mind. Really small and simple, but\n  yet full-featured (I hope).\n\n* Extends and mimics the built-in Django ``EmailMessage`` and ``send_mail()``.\n  Compatible as much as possible.\n\n* Fully supports Django template system including template inheritance\n  (thanks to *BradWhittington* for the note about the problem).\n\n* Supports any possible template engines and loaders.\n\n* Supports serialisation (thanks to *arjandepooter*).\n\n* Fully covered with tests.\n\n* Tested with Django 1.4-1.9.\n\n* Compatible with Python 3.\n\n\nInstallation\n=================\n\nRun:\n\n.. code-block:: console\n\n    pip install django-mail-templated\n\nAnd register the app in your settings file:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'mail_templated'\n    )\n\nAlso it is good idea to ensure that the app is installed successfully and\nis fully compatible with your environment:\n\n.. code-block:: console\n\n    python manage.py test mail_templated\n\nUsage\n=================\n\nEach email template should extend ``\"mail_templated/base.tpl\"`` or it's clone\neither directly or via descendants.\nThis is the only way to provide robust and full support for template\ninheritance, because Django template engine takes a lot of changes from time\nto time.\n\nNote that first and last newlines inside of block contents will be removed.\n\n**Plain text message:**\n\n.. code-block:: html+django\n\n    {% extends \"mail_templated/base.tpl\" %}\n\n    {% block subject %}\n    Hello {{ user.name }}\n    {% endblock %}\n\n    {% block body %}\n    This is a plain text message.\n    {% endblock %}\n\n**HTML message:**\n\n.. code-block:: html+django\n\n    {% extends \"mail_templated/base.tpl\" %}\n\n    {% block subject %}\n    Hello {{ user.name }}\n    {% endblock %}\n\n    {% block html %}\n    This is an <strong>html</strong> message.\n    {% endblock %}\n\n**Multipart message:**\n\n.. code-block:: html+django\n\n    {% extends \"mail_templated/base.tpl\" %}\n\n    {% block subject %}\n    Hello {{ user.name }}\n    {% endblock %}\n\n    {% block body %}\n    This is a plain text message.\n    {% endblock %}\n\n    {% block html %}\n    This is an <strong>html</strong> message.\n    {% endblock %}\n\n**Partial template without subject:**\n\n.. code-block:: html+django\n\n    {% extends \"mail_templated/base.tpl\" %}\n\n    {% block body %}\n    This is a plain text message.\n    {% endblock %}\n\n**Fast method using ``send_mail()`` function:**\n\n.. code-block:: python\n\n    from mail_templated import send_mail\n    send_mail('email/hello.tpl', {'user': user}, from_email, [user.email])\n\n**More control with ``EmailMessage`` class:**\n\n.. code-block:: python\n\n    from mail_templated import EmailMessage\n\n    # Create new empty message.\n    message = EmailMessage()\n\n    # Initialize message on creation.\n    message = EmailMessage('email/hello.tpl', {'user': user}, from_email,\n                           to=[user.email])\n\n    # Set default subject and body.\n    message = EmailMessage(subject=subject, body=body)\n\n    # Initialize message and render template immediately.\n    message = EmailMessage('email/hello.tpl', {'user': user}, from_email,\n                           to=[user.email], render=True)\n\n    # Initialize message later.\n    message.subject = 'Default subject'\n    message.context = {'user': user}\n    message.template_name = 'email/hello.tpl'\n    message.from_email = from_email\n    message.to = [user.email]\n\n    # Attach alternatives, files, etc., as if you'd use standard\n    # EmailMultiAlternatives object.\n    message.attach_alternative('HTML alternative', 'text/html')\n\n    # Serialize message after initialization if needed.\n    save_message_to_db(pickle.dumps(message))\n    # Then restore when ready to continue.\n    message = pickle.loads(get_message_from_db())\n\n    # Force immediate template load if you want to handle this somehow.\n    try:\n        message.load_template('email/hello.tpl')\n    except TemplateDoesNotExist:\n        message.load_template('email/default.tpl')\n\n    # You can also set template object manually.\n    message.template = get_template('mail_templated_test/plain.tpl')\n\n    # Force template rendering. If template is not loaded on this stage then\n    # it will be loaded automatically, so you actually don't have to call\n    # `load_template()` manually.\n    message.render()\n\n    # Get compiled subject and body as if you'd use standard Django message\n    # object.\n    logger.debug('Sending message with subject \"{}\" and body \"{}\"'.format(\n        message.subject, message.body))\n\n    # Change subject and body manually at any time. But remember they can be\n    # overwritten by template rendering if not rendered yet.\n    message.subject = subject\n    message.body = body\n\n    # This is also good point for serialization. Subject and body will be also\n    # serialized, the template system will not be used after deserialization.\n    message = pickle.loads(pickle.dumps(message))\n\n    # Send message when ready. It will be rendered automatically if needed.\n    message.send()\n\nLook into the `source code\n<https://github.com/artemrizhov/django-mail-templated>`_\nfor more info.\n\nTroubleshooting\n=================\n\nIf the app does not work as expected then please follow these steps:\n\n#.  Update to the latest version:\n\n    .. code-block:: console\n\n        pip install -U django-mail-templated\n\n#.  Run tests within your current Django project environment:\n\n    .. code-block:: console\n\n        python manage.py test mail_templated\n\n#.  Run tests in standalone mode:\n\n    .. code-block:: console\n\n        python -m mail_templated.tests.run\n\n#.  `Create a GitHub issue\n    <https://github.com/artemrizhov/django-mail-templated/issues/new>`_.\n\nYou also are welcome to try to fix the problem by yourself:\n\n#.  Fork and clone the `GitHub repository\n    <https://github.com/artemrizhov/django-mail-templated>`_.\n\n#.  Add a test case that demonstrates the problem.\n\n#.  Fix it and create a pull request.\n\n\nUseful links\n=================\n\n* `Django template language\n  <https://docs.djangoproject.com/es/1.9/ref/templates/language/>`_\n\n* `Built-in template tags and filters\n  <https://docs.djangoproject.com/es/1.9/ref/templates/builtins/>`_\n\n* `The basics of Django template system\n  <https://docs.djangoproject.com/es/1.9/topics/templates/>`_",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/artemrizhov/django-mail-templated",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-mail-templated",
    "package_url": "https://pypi.org/project/django-mail-templated/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-mail-templated/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/artemrizhov/django-mail-templated"
    },
    "release_url": "https://pypi.org/project/django-mail-templated/2.4.7/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Send emails using Django template system",
    "version": "2.4.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2297740,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bf05656398f184920607d8a8ad5cc0788e1dbe7f4775a00ecfcd7d4d29e5700",
        "md5": "8b41eeee19f6bec64f4c597e0d015d8c",
        "sha256": "43294d09b9fe79e55fc76f24ea4177c10d760350e4eaa4f0f493f03fe49996f4"
      },
      "downloads": -1,
      "filename": "django-mail-templated-2.4.7.tar.gz",
      "has_sig": false,
      "md5_digest": "8b41eeee19f6bec64f4c597e0d015d8c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11798,
      "upload_time": "2016-01-23T00:33:16",
      "upload_time_iso_8601": "2016-01-23T00:33:16.402158Z",
      "url": "https://files.pythonhosted.org/packages/7b/f0/5656398f184920607d8a8ad5cc0788e1dbe7f4775a00ecfcd7d4d29e5700/django-mail-templated-2.4.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}