{
  "info": {
    "author": "MFEM developement team",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "#  PyMFEM (MFEM Python wrapper)\n\nThis package (PyMFEM) is Python wrapper for the MFEM high performance parallel finite element method library.(http://mfem.org/).\n\nInstaller downloads a couple of external libraries and build them.\nBy default, \"pip install mfem\" downloads and builds the serial version of MFEM and PyMFEM.\nSee more detail below for other configurations\n\n## Install\n```\npip install mfem --no-binary mfem   # install serial MFEM + wrapper\n```\nThe setup script accept various options. TO use it, please download\nthe package and run the script manually. For example, this below download\nand build parallel version of MFEM library (linked with Metis and Hypre)\nand install under <prefix>/mfem\n```\n$ pip3 download mfem\n(expand tar.gz file and move to the downloaded directory)\n$ python setup.py install --with-parallel # it download and build metis/hypre/mfem\n```\nChoosing compiler\n```\n$ python setup.py install --with-parallel --CC=icc --CXX=icpc --MPICC=mpiicc --MPICXX=mpiicpc\n```\nFor other configurations, see docs/install.txt or help\n```\n$ python setup.py install --help\n```\n\n## Usage\nHere is an example to solve div(grad(f)) = 1 in a square and to plot the result\nwith matplotlib (modified from ex1.cpp)\n```\nimport mfem.ser as mfem\n\n# create sample mesh for square shape\nmesh = mfem.Mesh(10, 10, \"TRIANGLE\")\n\n# create finite element function space\nfec = mfem.H1_FECollection(1, mesh.Dimension())   # H1 order=1\nfespace = mfem.FiniteElementSpace(mesh, fec)      \n\n# \ness_tdof_list = mfem.intArray()\ness_bdr = mfem.intArray([1]*mesh.bdr_attributes.Size())\nfespace.GetEssentialTrueDofs(ess_bdr, ess_tdof_list)\n\n# constant coefficient \none = mfem.ConstantCoefficient(1.0)\n\n# define Bilinear and Linear operator\na = mfem.BilinearForm(fespace)\na.AddDomainIntegrator(mfem.DiffusionIntegrator(one))\na.Assemble()\nb = mfem.LinearForm(fespace)\nb.AddDomainIntegrator(mfem.DomainLFIntegrator(one))\nb.Assemble()\n\n# create gridfunction, which is where the solution vector is stored\nx = mfem.GridFunction(fespace);\nx.Assign(0.0)\n\n# form linear equation (AX=B)\nA = mfem.OperatorPtr()\nB = mfem.Vector()\nX = mfem.Vector()\na.FormLinearSystem(ess_tdof_list, x, b, A, X, B);\nprint(\"Size of linear system: \" + str(A.Height()))\n\n# solve it using PCG solver and store the solution to x\nAA = mfem.OperatorHandle2SparseMatrix(A)\nM = mfem.GSSmoother(AA)\nmfem.PCG(AA, M, B, X, 1, 200, 1e-12, 0.0)\na.RecoverFEMSolution(X, b, x)\n\n# extract vertices and solution as numpy array\nverts = mesh.GetVertexArray()\nsol = x.GetDataArray()\n\n# plot solution using Matplotlib\n\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\n\ntriang = tri.Triangulation(verts[:,0], verts[:,1])\n\nfig1, ax1 = plt.subplots()\nax1.set_aspect('equal')\ntpc = ax1.tripcolor(triang, sol, shading='gouraud')\nfig1.colorbar(tpc)\nplt.show()\n```\n![](https://raw.githubusercontent.com/mfem/PyMFEM/pip_install_dev/docs/example_image.png)\n\n\n## License\nPyMFEM is licensed under BSD-3.\nPlease refer the developers' web sites for the external libraries\n* MFEM: https://mfem.org/\n* Hypre: https://computing.llnl.gov/projects/hypre-scalable-linear-solvers-multigrid-methods\n* METIS: http://glaros.dtc.umn.edu/gkhome/metis/metis/overview",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/mfem",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://mfem.org",
    "keywords": "scientific computing,finite element method",
    "license": "BSD-3",
    "maintainer": "S. Shiraiwa",
    "maintainer_email": "shiraiwa@princeton.edu",
    "name": "mfem",
    "package_url": "https://pypi.org/project/mfem/",
    "platform": "Mac OS X",
    "project_url": "https://pypi.org/project/mfem/",
    "project_urls": {
      "Download": "https://github.com/mfem",
      "Homepage": "http://mfem.org"
    },
    "release_url": "https://pypi.org/project/mfem/4.2.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MFEM + PyMFEM (finite element method library)",
    "version": "4.2.0.3",
    "yanked": true,
    "yanked_reason": "Please use 4.2.0.7"
  },
  "last_serial": 17464108,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c88a7227773a7b6e3f831176d1fb25b6f5531f43ff4cc509eeddc6355ad4307",
        "md5": "b2ec87e870454e11a1ec8dfe5e38a52f",
        "sha256": "d6cd3bfab514578abf4f051e82493be38ca341e265b594c5846960a1c885975a"
      },
      "downloads": -1,
      "filename": "mfem-4.2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b2ec87e870454e11a1ec8dfe5e38a52f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6084149,
      "upload_time": "2021-02-07T18:05:04",
      "upload_time_iso_8601": "2021-02-07T18:05:04.865020Z",
      "url": "https://files.pythonhosted.org/packages/5c/88/a7227773a7b6e3f831176d1fb25b6f5531f43ff4cc509eeddc6355ad4307/mfem-4.2.0.3.tar.gz",
      "yanked": true,
      "yanked_reason": "Please use 4.2.0.7"
    }
  ],
  "vulnerabilities": []
}