{
  "info": {
    "author": "MFEM developement team",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/mfem/PyMFEM/HEAD?labpath=examples%2Fjupyter)\n[![badge](examples/jupyter/ex1.svg)](https://mybinder.org/v2/gh/mfem/PyMFEM/HEAD?labpath=examples%2Fjupyter%2Fex1.ipynb)\n[![badge](examples/jupyter/ex9.svg)](https://mybinder.org/v2/gh/mfem/PyMFEM/HEAD?labpath=examples%2Fjupyter%2Fex9.ipynb)\n\n#  MFEM + PyMFEM (FEM library)\n\nThis repository provides Python binding for MFEM. MFEM is a high performance parallel finite element method (FEM) library (http://mfem.org/).\n\nInstaller (setup.py) builds both MFEM and binding together.\nBy default, \"pip install mfem\" downloads and builds the serial version of MFEM and PyMFEM.\nAdditionally, the installer supports building MFEM with specific options together with other external libraries, including MPI version.\n\n## Install\n```\npip install mfem                    # binary install is available only on linux platforms (Py36-310)\npip install mfem --no-binary mfem   # install serial MFEM + wrapper from source\n\n```\n\n## Build with additional features (MPI, GPU, GPU-Hypre, GSLIB, SuiteSparse, libCEED, LAPACK)\nThe setup script accept various options. TO use it, one can either use --install-option flag\nwith pip, or download the package manually and run the script. For example, the one below downloads\nand build parallel version of MFEM library (linked with Metis and Hypre)\nand installs under <prefix>/mfem. See also, docs/install.txt\n\n### Using pip\n```\n$ pip install mfem --install-option=\"--with-parallel\" \n```\n\n### Build from local source file\n```\n# Download source and build\n$ pip download mfem --no-binary mfem (expand tar.gz file and move to the downloaded directory)\nor clone this repository\n$ git clone https://github.com/mfem/PyMFEM.git\n\n# Then, build it from local source\n$ python -m pip install ./ --install-option=\"--with-parallel\" --install-option=\"--mfem-branch=master\"\nor\n$ python setup.py install --with-parallel # it download and build metis/hypre/mfem\n\n# Verbose output\n$ python setup.py install -verbose # SWIG output and CMAKE_VERBOSE_MAKEFILE is on\n\n# Cleaning\n$ python setup.py clean --all # clean external dependencies + wrapper code\n\n# Choosing compiler\n$ python setup.py install --with-parallel --CC=icc --CXX=icpc --MPICC=mpiicc --MPICXX=mpiicpc\n\n# Run test\ncd test\npython test_examples.py -serila\n\n# Other option\nFor other configurations, see docs/install.txt or help\n$ python setup.py install --help\n\n```\n\n## Usage\nHere is an example to solve div(alpha grad(u)) = f in a square and to plot the result\nwith matplotlib (modified from ex1.cpp). Use the badge above to open this in Binder.\n```\nimport mfem.ser as mfem\n\n# create sample mesh for square shape\nmesh = mfem.Mesh(10, 10, \"TRIANGLE\")\n\n# create finite element function space\nfec = mfem.H1_FECollection(1, mesh.Dimension())   # H1 order=1\nfespace = mfem.FiniteElementSpace(mesh, fec)\n\n#\ness_tdof_list = mfem.intArray()\ness_bdr = mfem.intArray([1]*mesh.bdr_attributes.Size())\nfespace.GetEssentialTrueDofs(ess_bdr, ess_tdof_list)\n\n# constant coefficient (diffusion coefficient and RHS)\nalpha = mfem.ConstantCoefficient(1.0)\nrhs = mfem.ConstantCoefficient(1.0)\n\n# Note:\n#    Diffusion coefficient can be variable. To use numba-JIT compiled\n#    functio. Use the following, where x is numpy-like array.\n# @mfem.jit.scalar\n# def alpha(x):\n#     return x+1.0\n#\n\n# define Bilinear and Linear operator\na = mfem.BilinearForm(fespace)\na.AddDomainIntegrator(mfem.DiffusionIntegrator(alpha))\na.Assemble()\nb = mfem.LinearForm(fespace)\nb.AddDomainIntegrator(mfem.DomainLFIntegrator(rhs))\nb.Assemble()\n\n# create gridfunction, which is where the solution vector is stored\nx = mfem.GridFunction(fespace);\nx.Assign(0.0)\n\n# form linear equation (AX=B)\nA = mfem.OperatorPtr()\nB = mfem.Vector()\nX = mfem.Vector()\na.FormLinearSystem(ess_tdof_list, x, b, A, X, B);\nprint(\"Size of linear system: \" + str(A.Height()))\n\n# solve it using PCG solver and store the solution to x\nAA = mfem.OperatorHandle2SparseMatrix(A)\nM = mfem.GSSmoother(AA)\nmfem.PCG(AA, M, B, X, 1, 200, 1e-12, 0.0)\na.RecoverFEMSolution(X, b, x)\n\n# extract vertices and solution as numpy array\nverts = mesh.GetVertexArray()\nsol = x.GetDataArray()\n\n# plot solution using Matplotlib\n\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\n\ntriang = tri.Triangulation(verts[:,0], verts[:,1])\n\nfig1, ax1 = plt.subplots()\nax1.set_aspect('equal')\ntpc = ax1.tripcolor(triang, sol, shading='gouraud')\nfig1.colorbar(tpc)\nplt.show()\n```\n![](https://raw.githubusercontent.com/mfem/PyMFEM/master/docs/example_image.png)\n\n\n## License\nPyMFEM is licensed under BSD-3.\nPlease refer the developers' web sites for the external libraries\n* MFEM: https://mfem.org/\n* Hypre: https://computing.llnl.gov/projects/hypre-scalable-linear-solvers-multigrid-methods\n* METIS: http://glaros.dtc.umn.edu/gkhome/metis/metis/overview\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/mfem",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://mfem.org",
    "keywords": "scientific computing,finite element method",
    "license": "BSD-3",
    "maintainer": "S. Shiraiwa",
    "maintainer_email": "shiraiwa@princeton.edu",
    "name": "mfem",
    "package_url": "https://pypi.org/project/mfem/",
    "platform": "Mac OS X",
    "project_url": "https://pypi.org/project/mfem/",
    "project_urls": {
      "Download": "https://github.com/mfem",
      "Homepage": "http://mfem.org"
    },
    "release_url": "https://pypi.org/project/mfem/4.5.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MFEM + PyMFEM (finite element method library)",
    "version": "4.5.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17464108,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55fbb61c177c6c883593a4215b1a93e5ef7305b6f6d04754c8a11ddc0f4b5c12",
        "md5": "421b2844370dd1b29938bab90d73add9",
        "sha256": "b260c774a32bb6f0d40e428d83240ee865a4a8004e385c4d4ba1b142a5e80a7c"
      },
      "downloads": -1,
      "filename": "mfem-4.5.0.1-cp310-cp310-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "421b2844370dd1b29938bab90d73add9",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 43949283,
      "upload_time": "2023-01-29T15:01:23",
      "upload_time_iso_8601": "2023-01-29T15:01:23.917031Z",
      "url": "https://files.pythonhosted.org/packages/55/fb/b61c177c6c883593a4215b1a93e5ef7305b6f6d04754c8a11ddc0f4b5c12/mfem-4.5.0.1-cp310-cp310-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b8a8408fca545e35a8ce515c8aa1a8d80f0ec1e242f8a47ca52373144d3b0de",
        "md5": "4058e21b14959872f25daae49f2226d2",
        "sha256": "f217368de1c58ab84b2376454525fe5d7ed78adfe6c739224c5e7ebaf22465b9"
      },
      "downloads": -1,
      "filename": "mfem-4.5.0.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "4058e21b14959872f25daae49f2226d2",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 57894609,
      "upload_time": "2023-01-29T15:04:00",
      "upload_time_iso_8601": "2023-01-29T15:04:00.438333Z",
      "url": "https://files.pythonhosted.org/packages/1b/8a/8408fca545e35a8ce515c8aa1a8d80f0ec1e242f8a47ca52373144d3b0de/mfem-4.5.0.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fdbfddfaa9d77d36014ce1bfb7354ebedfee19486ee041dc2c7c4bc0ea75353",
        "md5": "fd76e3a0e753520c40298fd887d76bf3",
        "sha256": "bc40b4a27766ca0ebf69e0cefc77ac1d19a74de90669684a5c7731579c9a9342"
      },
      "downloads": -1,
      "filename": "mfem-4.5.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "fd76e3a0e753520c40298fd887d76bf3",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 58234019,
      "upload_time": "2023-01-29T14:58:45",
      "upload_time_iso_8601": "2023-01-29T14:58:45.347379Z",
      "url": "https://files.pythonhosted.org/packages/3f/db/fddfaa9d77d36014ce1bfb7354ebedfee19486ee041dc2c7c4bc0ea75353/mfem-4.5.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c92d98db6ede2631dfc5abc25eeb0169ef947e799ec9d8548faf4fd129e820e",
        "md5": "dcd26328f72a92f2bb5359397acc8d6a",
        "sha256": "38a87a525d85494a436b8101d7b479eca7fee1d5ed8fbc78861103dc88ca0c5c"
      },
      "downloads": -1,
      "filename": "mfem-4.5.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "dcd26328f72a92f2bb5359397acc8d6a",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 58326942,
      "upload_time": "2023-01-29T14:58:36",
      "upload_time_iso_8601": "2023-01-29T14:58:36.622557Z",
      "url": "https://files.pythonhosted.org/packages/7c/92/d98db6ede2631dfc5abc25eeb0169ef947e799ec9d8548faf4fd129e820e/mfem-4.5.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d016b4c4bdff6ac6e92816ba45bfae79283062e653a81f79f4675b86ee26d26d",
        "md5": "a8d9021bde2b8878ad9d2ee3b6fb12ef",
        "sha256": "e55ee46199ab575ac170ae5881698f08321389c118f3ab2e3cb520ac5b99fc18"
      },
      "downloads": -1,
      "filename": "mfem-4.5.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a8d9021bde2b8878ad9d2ee3b6fb12ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 380790,
      "upload_time": "2023-01-29T14:32:30",
      "upload_time_iso_8601": "2023-01-29T14:32:30.256042Z",
      "url": "https://files.pythonhosted.org/packages/d0/16/b4c4bdff6ac6e92816ba45bfae79283062e653a81f79f4675b86ee26d26d/mfem-4.5.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}