{
  "info": {
    "author": "TransferWise",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# pipelinewise-tap-postgres\n\n[![PyPI version](https://badge.fury.io/py/pipelinewise-tap-postgres.svg)](https://badge.fury.io/py/pipelinewise-tap-postgres)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pipelinewise-tap-postgres.svg)](https://pypi.org/project/pipelinewise-tap-postgres/)\n[![License: MIT](https://img.shields.io/badge/License-GPLv3-yellow.svg)](https://opensource.org/licenses/GPL-3.0)\n\n[Singer](https://www.singer.io/) tap that extracts data from a [PostgreSQL](https://www.postgresql.com/) database and produces JSON-formatted data following the [Singer spec](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md).\n\nThis is a [PipelineWise](https://transferwise.github.io/pipelinewise) compatible tap connector.\n\n## How to use it\n\nThe recommended method of running this tap is to use it from [PipelineWise](https://transferwise.github.io/pipelinewise). When running it from PipelineWise you don't need to configure this tap with JSON files and most of things are automated. Please check the related documentation at [Tap Postgres](https://transferwise.github.io/pipelinewise/connectors/taps/postgres.html)\n\nIf you want to run this [Singer Tap](https://singer.io) independently please read further.\n\n### Install and Run\n\nFirst, make sure Python 3 is installed on your system or follow these\ninstallation instructions for [Mac](http://docs.python-guide.org/en/latest/starting/install3/osx/) or\n[Ubuntu](https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04).\n\n\nIt's recommended to use a virtualenv:\n\n```bash\n  python3 -m venv venv\n  pip install pipelinewise-tap-postgres\n```\n\nor\n\n```bash\n  python3 -m venv venv\n  . venv/bin/activate\n  pip install --upgrade pip\n  pip install .\n```\n\n### Create a config.json\n\n```\n{\n  \"host\": \"localhost\",\n  \"port\": 5432,\n  \"user\": \"postgres\",\n  \"password\": \"secret\",\n  \"dbname\": \"db\"\n}\n```\n\nThese are the same basic configuration properties used by the PostgreSQL command-line client (`psql`).\n\nFull list of options in `config.json`:\n\n| Property                            | Type    | Required?  | Description                                                   |\n|-------------------------------------|---------|------------|---------------------------------------------------------------|\n| host                                | String  | Yes        | PostgreSQL host                                               |\n| port                                | Integer | Yes        | PostgreSQL port                                               |\n| user                                | String  | Yes        | PostgreSQL user                                               |\n| password                            | String  | Yes        | PostgreSQL password                                           |\n| dbname                              | String  | Yes        | PostgreSQL database name                                      |\n| filter_schemas                      | String  | No         | Comma separated schema names to scan only the required schemas to improve the performance of data extraction. (Default: None) |\n| ssl                                 | String  | No         | If set to `\"true\"` then use SSL via postgres sslmode `require` option. If the server does not accept SSL connections or the client certificate is not recognized the connection will fail. (Default: None) |\n| logical_poll_total_seconds          | Integer | No         | Stop running the tap when no data received from wal after certain number of seconds. (Default: 10800) |\n| break_at_end_lsn                    | Boolean | No         | Stop running the tap if the newly received lsn is after the max lsn that was detected when the tap started. (Default: true) |\n| max_run_seconds                     | Integer | No         | Stop running the tap after certain number of seconds. (Default: 43200) |\n| debug_lsn                           | String  | No         | If set to `\"true\"` then add `_sdc_lsn` property to the singer messages to debug postgres LSN position in the WAL stream. (Default: None) |\n\n\n### Run the tap in Discovery Mode\n\n```\ntap-postgres --config config.json --discover                # Should dump a Catalog to stdout\ntap-postgres --config config.json --discover > catalog.json # Capture the Catalog\n```\n\n### Add Metadata to the Catalog\n\nEach entry under the Catalog's \"stream\" key will need the following metadata:\n\n```\n{\n  \"streams\": [\n    {\n      \"stream_name\": \"my_topic\"\n      \"metadata\": [{\n        \"breadcrumb\": [],\n        \"metadata\": {\n          \"selected\": true,\n          \"replication-method\": \"LOG_BASED\",\n        }\n      }]\n    }\n  ]\n}\n```\n\nThe replication method can be one of `FULL_TABLE`, `INCREMENTAL` or `LOG_BASED`.\n\n**Note**: Log based replication requires a few adjustments in the source postgres database, please read further\nfor more information.\n\n### Run the tap in Sync Mode\n\n```\ntap-postgres --config config.json --properties catalog.json\n```\n\nThe tap will write bookmarks to stdout which can be captured and passed as an optional `--state state.json` parameter\nto the tap for the next sync.\n\n### Log Based replication requirements\n\n* PostgreSQL databases running **PostgreSQL versions 9.4.x or greater**. To avoid a critical PostgreSQL bug,\n  use at least one of the following minor versions:\n   - PostgreSQL 12.0\n   - PostgreSQL 11.2\n   - PostgreSQL 10.7\n   - PostgreSQL 9.6.12\n   - PostgreSQL 9.5.16\n   - PostgreSQL 9.4.21\n\n* **A connection to the master instance**. Log-based replication will only work by connecting to the master instance.\n\n* **wal2json plugin**: To use Log Based for your PostgreSQL integration, you must install the wal2json plugin.\n  The wal2json plugin outputs JSON objects for logical decoding, which the tap then uses to perform Log-based Replication.\n  Steps for installing the plugin vary depending on your operating system. Instructions for each operating system type\n  are in the wal2json’s GitHub repository:\n\n  * [Unix-based operating systems](https://github.com/eulerto/wal2json#unix-based-operating-systems)\n  * [Windows](https://github.com/eulerto/wal2json#windows)\n\n\n* **postgres config file**: Locate the database configuration file (usually `postgresql.conf`) and define\n  the parameters as follows:\n\n    ```\n    wal_level=logical\n    max_replication_slots=5\n    max_wal_senders=5\n    ```\n\n    Restart your PostgreSQL service to ensure the changes take effect.\n  \n    **Note**: For `max_replication_slots` and `max_wal_senders`, we’re defaulting to a value of 5.\n    This should be sufficient unless you have a large number of read replicas connected to the master instance.\n\n\n* **Existing replication slot**: Log based replication requires a dedicated logical replication slot.\n  In PostgreSQL, a logical replication slot represents a stream of database changes that can then be replayed to a\n  client in the order they were made on the original server. Each slot streams a sequence of changes from a single\n  database.\n  \n  Login to the master instance as a superuser and using the `wal2json` plugin, create a logical replication slot:\n  ```\n    SELECT *\n    FROM pg_create_logical_replication_slot('pipelinewise_<database_name>', 'wal2json');  \n  ```\n\n  **Note**: Replication slots are specific to a given database in a cluster. If you want to connect multiple\n  databases - whether in one integration or several - you’ll need to create a replication slot for each database.\n\n### To run tests:\n\n1. Install python test dependencies in a virtual env:\n```\n  python3 -m venv venv\n  . venv/bin/activate\n  pip install --upgrade pip\n  pip install .[test]\n```\n\n2. You need to have a postgres database to run the tests and export its credentials:\n```\n  export TAP_POSTGRES_HOST=<postgres-host>\n  export TAP_POSTGRES_PORT=<postgres-port>\n  export TAP_POSTGRES_USER=<postgres-user>\n  export TAP_POSTGRES_PASSWORD=<postgres-password>\n```\n\nTest objects will be created in the `postgres` database.\n\n3. To run the tests:\n```\n  make test\n```\n\n### To run pylint:\n\n1. Install python dependencies and run python linter\n```\n  python3 -m venv venv\n  . venv/bin/activate\n  pip install --upgrade pip\n  pip install .[test]\n  make pylint\n```\n\n---\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ashalitkin/pipelinewise-tap-postgres",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dp-pipelinewise-tap-postgres",
    "package_url": "https://pypi.org/project/dp-pipelinewise-tap-postgres/",
    "platform": "",
    "project_url": "https://pypi.org/project/dp-pipelinewise-tap-postgres/",
    "project_urls": {
      "Homepage": "https://github.com/ashalitkin/pipelinewise-tap-postgres"
    },
    "release_url": "https://pypi.org/project/dp-pipelinewise-tap-postgres/1.8.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Singer.io tap for extracting data from PostgresSQL - PipelineWise compatible",
    "version": "1.8.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11368296,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8cafe7661d90266ffb20ade64ae92ace8b42ae67e83da81f40a547a609fa16f7",
        "md5": "98fa50d4509d50b280ae007ec630eb9c",
        "sha256": "b7e4950c75cf3e5036b5514317b6d50713813b54d7b22632d0b64d8585d86270"
      },
      "downloads": -1,
      "filename": "dp-pipelinewise-tap-postgres-1.8.3.tar.gz",
      "has_sig": false,
      "md5_digest": "98fa50d4509d50b280ae007ec630eb9c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35624,
      "upload_time": "2021-08-09T10:49:58",
      "upload_time_iso_8601": "2021-08-09T10:49:58.004396Z",
      "url": "https://files.pythonhosted.org/packages/8c/af/e7661d90266ffb20ade64ae92ace8b42ae67e83da81f40a547a609fa16f7/dp-pipelinewise-tap-postgres-1.8.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}