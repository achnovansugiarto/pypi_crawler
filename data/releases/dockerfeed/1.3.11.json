{
  "info": {
    "author": "DIPS AS",
    "author_email": "hha@dips.no,heh@dips.no",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Docker Feed\n\n[![PyPI version](https://badge.fury.io/py/DockerFeed.svg)](https://badge.fury.io/py/DockerFeed)\n[![Build Status](https://travis-ci.com/DIPSAS/DockerFeed.svg?branch=master)](https://travis-ci.com/DIPSAS/DockerFeed)\n[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\n\nDocker Feed is a simple and convenient tool for handling deployment of docker compose files to a Swarm environment.\nBy convention, it locates all stacks to deploy on a [JFrog](https://jfrog.com/) feed with every stack following a docker-compose filename pattern of `docker-compose.stack-name.1.0.0.yml`, thus this filename convention:\n- `docker-compose.<STACK_NAME>.<VERSION>.yml`\n- Note! The stack name can only contain alphabetic letters and `-`/`_` signs.\n\nAdditionally, the Swarm probably needs to initialize some infrastructure before any stacks are deployed. This is handled by defining a `swarm.management.yml` file with details about which `configs`, `secrets`, `volumes` or `networks` to create. By convention, the `DockerFeed` tool will automatically detect the `swarm.management.yml` file if it exists in the current folder.\nPlease have a look at the [SwarmManagement](https://github.com/DIPSAS/SwarmManagement) project to get more details, but following is an example on how the `swarm.management.yml` content could look like:\n\n```yaml\nnetworks:\n    <network_name>: \n        encrypted: true\nconfigs:\n    <config_name>: <config_file>\nsecrets:\n    <secret_name>: <secret_file>\nvolumes:\n    <volume_name>:\n        driver: local\nenv_files:\n    - <environment_file>\n```\n\nTo map which stacks fits with each other, we introduce the `docker-compose-module` artifact.\nThe `docker-compose-module` artifact follows a filename pattern of `docker-compose-module.module-name.1.0.0.yml`, thus this filename convention:\n- `docker-compose-module.<MODULE_NAME>.<VERSION>.yml`\n- Note! The module name can only contain alphabetic letters and `-`/`_` signs.\n\nThe `docker-compose-module` artifact is a yaml file with this type of content:\n```yaml\nmodules:\n  my_module:\n    run:\n      - batch>=1.0.0\n    deploy:\n      - nginx>=1.0.0\n```\n\nThe `run` section of the module is a list of stacks to run as batch processes before deploying the stacks in the `deploy` section.\n\nAn example on how to use DockerFeed is found in the [./Example](./Example) folder.\n\n## Install Or Upgrade\n- pip install --upgrade DockerFeed\n\n## Prerequisites\n- python3x\n- Docker:\n  - https://www.docker.com/get-docker\n\n## Usage\nThe Docker Feed tool is available as the command line tool `dockerf`.\nHandle the docker feed by adding any of the following commands with zero or more stacks to handle.\nPrefix any of the following actions with the `module` argument to handle `docker-compose-module` deployments.\n- `init` - Initialize Swarm.\n- `deploy` - Deploy stacks to Swarm.\n    - Adding no specific stacks to deploy will result in deploying all stacks.\n    - Example: `dockerf deploy first-stack second-stack>=1.0.0 third-stack==1.2.3`\n    - Example with module deployment: `dockerf module deploy first-module second-module>=1.0.0`\n- `rm`/`remove` - Remove stacks from Swarm.\n    - Adding no specific stacks to remove will result in removing all stacks.\n    - Example: `dockerf remove first-stack second-stack`\n- `ls/list` - List stacks on feed.\n    - Hint, add search criterias following `ls`, such as:\n    - `dockerf ls first-stack second-stack>=1.0.0`\n- `prune` - Remove all stacks.\n- `pull` - Pull stacks from feed.\n- `push` - Push docker-compose files to feed.\n    - Example: `dockerf push docker-compose.first-stack.yml docker-compose.second-stack.yml`\n- `run` - Run stacks as batch processes.\n    - Logs from each process is stored in a `logs` folder in the working directory. \n- `verify` - Verify that the stacks are properly configured.\n    - Following requirements are possible to validate:\n        1. Add `--verify-image-digests` to verify that All images are tagged with an immutable [digest](https://success.docker.com/article/images-tagging-vs-digests).\n        2. Add `--verify-images` to verify that all images are labeled with following labels:\n            - org.opencontainers.image.created\n            - org.opencontainers.image.authors\n            - org.opencontainers.image.revision\n            - org.opencontainers.image.version\n            - org.opencontainers.image.documentation\n            - org.opencontainers.image.title\n        3. Additional validation checks are also possible to activate:\n            - `--verify-no-configs`\n            - `--verify-no-secrets`\n            - `--verify-no-volumes`\n            - `--verify-no-ports`\n- Optional arguments:\n  - `-s/--source` to specify feed source. Either uri to jfrog feed, or a local folder with stack files. Default is `https://artifacts/delivery-dev`.\n  - `-u/--user` to specify user credentials for jfrog as `user:password`.\n  - `-t/--token` to specify a token for jfrog.\n  - `--verify-uri` to verify the jfrog uri certificate.\n  - `-e/--env` with environment variables to expose as `envKey=envValue`:\n    - `dockerf deploy -e key1=variable1 key2=variable2`\n    - Alternatively, any present `.env` will be considered as a file with environment variables to expose.\n  - `-r/--read` with a list of files containing stacks to handle, thus each line in the file is the name of a stack to handle.\n    - `dockerf deploy -r stackList.txt stackList2.txt`\n  - `--output-folder` to specify a destination folder for pulling stack files with 'pull'. Default is `./output/`.\n  - `--ignored` followed by a list of stacks or modules to ignore.\n  - `--logs-folder` to specify folder for storing log files when executing batch processes with 'run'. Default is './logs'.\n  - `--no-logs` to drop storing log files when executing batch processes with 'run'.\n  - `--verify-stacks-on-deploy` to deploy only valid stacks.\n  - `--verify-image-digests` to validate that image digests are used.\n  - `--verify-images` to validate required labels on images.\n  - `--verify-no-configs` to validate that no Swarm configs are used in stack.\n  - `--verify-no-secrets` to validate that no Swarm secrets are used in stack.\n  - `--verify-no-volumes` to validate that no Swarm volumes are used in stack.\n  - `--verify-no-ports` to validate that no ports are exposed in stack.\n  - `-i/--infrastructure` to specify the path to swarm.management.yml files for creating the Swarm infrastructure.\n  - `-c/--cache` to specify the cache folder to use for local cache storage of files. \n  - `-said/--stack-artifact-identifier` to specify stack artifact identifier. Default is `docker-compose.`.\n  - `-maid/--module-artifact-identifier` to specify module artifact identifier. Default is `docker-compose-module.`.\n  - `-h/--help` for help:\n    - `dockerf -h`\n\n## DockerFeed In Docker\nThe [dipsas/dockerfeed](https://hub.docker.com/repository/docker/dipsas/dockerfeed) image includes [DockerFeed](https://github.com/DIPSAS/DockerFeed) binaries, and makes it possible to push and verify docker-compose charts inside of a container.\n\nAdditionally, it is possible to push regular [Helm](https://helm.sh/) charts to a helm repository.\n\n## Example\n### Push docker-compose chart:\n```\ndocker run -it -v C:/MyLocalDirectoryTo/charts/:/charts -w /charts dipsas/dockerfeed push docker-compose.stack-name.1.0.0.yml --source https://artifacts/docker-compose-feed\n```\n\n### Push helm chart:\n```\ndocker run -it -v C:/MyLocalDirectoryTo/charts/:/charts -w /charts dipsas/dockerfeed push my-helm-chart-1.0.0.tgz --source https://artifacts/helm-feed\n```\n\n## Development\n\n### Dependencies:\n  - `pip install twine`\n  - `pip install wheel`\n  - `pip install -r requirements.txt`\n\n### Publish New Version.\n1. Configure [CHANGELOG.md](./CHANGELOG.md) with new version.\n3. Build: python setup.py bdist_wheel\n4. Check: twine check dist/*\n5. Publish: twine upload dist/*\n\n### Run Unit Tests\n- python -m unittest\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DIPSAS/DockerFeed",
    "keywords": "Docker Feed",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DockerFeed",
    "package_url": "https://pypi.org/project/DockerFeed/",
    "platform": "",
    "project_url": "https://pypi.org/project/DockerFeed/",
    "project_urls": {
      "Homepage": "https://github.com/DIPSAS/DockerFeed"
    },
    "release_url": "https://pypi.org/project/DockerFeed/1.3.11/",
    "requires_dist": [
      "DockerBuildSystem (>=1.1.47)",
      "SwarmManagement (>=1.1.68)",
      "dohq-artifactory",
      "python-dotenv",
      "pyyaml",
      "requests",
      "requirements-parser",
      "semantic-version",
      "validators",
      "check-manifest ; extra == 'dev'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Docker Feed tool",
    "version": "1.3.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6824527,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ebafa9f5cc6fe57cb938dcdb8155ef03a0011eab1891ca3da54af595b8b0d87c",
        "md5": "2bcca5ff518c4f65995e548046f11c6e",
        "sha256": "416d8152f0e67d6fda17c93f0d51f6fa4649e3c4b065106d2e7258e317ddc299"
      },
      "downloads": -1,
      "filename": "DockerFeed-1.3.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2bcca5ff518c4f65995e548046f11c6e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21948,
      "upload_time": "2020-03-16T22:00:31",
      "upload_time_iso_8601": "2020-03-16T22:00:31.706483Z",
      "url": "https://files.pythonhosted.org/packages/eb/af/a9f5cc6fe57cb938dcdb8155ef03a0011eab1891ca3da54af595b8b0d87c/DockerFeed-1.3.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}