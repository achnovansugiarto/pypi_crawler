{
  "info": {
    "author": "Martins Mednis",
    "author_email": "mrt@mednis.info",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MathJSON Solver\n\n_MathJSON Solver_ is a Python module to numerically evaluate MathJSON expressions. It was created by [Longenesis team](https://longenesis.com/team) to add numerical evaluation capability of user generated mathematical expressions in [Longenesis digital health products](https://longenesis.com/engage). Its development was inspired by [CortexJS Compute Engine](https://cortexjs.io/compute-engine/).\n\n## How to use\n```python\nfrom mathjson_solver import create_solver\n\nparameters = {\"x\": 2, \"y\": 3}\nexpression = [\"Add\", \"x\", \"y\", 4]\n\nsolver = create_solver(parameters)\nanswer = solver(expression)\n\nprint(answer)\n# 9, because 2+3+4=9\n```\n\n## How to run tests\nMake sure you have `pytest` installed. Then `cd` into project directory and run:\n```bash\npytest\n```\n\n## Contributing Code\n\nWe welcome your contributions in the form of pull requests.\n\n1. Fork the repo;\n2. Make improvements;\n3. Make a pull request to share your improvements with the community and to include it into official release.\n\n\n## Currently supported MathJSON constructs\n* `Add` (alias `Sum`)\n* `Subtract`\n* `Multiply`\n* `Divide`\n* `Negate`\n* `Power`\n* `Root`\n* `Sqrt`\n* `Square`\n* `Exp`\n* `Log`\n* `Log2`\n* `Log10`\n* `Equal`\n* `Greater`\n* `GreaterEqual`\n* `Less`\n* `LessEqual`\n* `NotEqual`\n\n### Additional constructs\n* `Constants`\n* `If`\n* `Switch`\n\n\n## Examples\n```python\n[\"Add\", 2, 4, 3]                  # 2+4+3=9\n[\"Subtract\", 10, 5, 2]            # 10-5-2=3\n[\"Add\", 5, 4, [\"Negate\", 3]]      # 5+4+(-3)=6\n[\"Multiply\", 2, 3, 4]             # 2*3*4=24\n[\"Divide\", 10, 5]                 # 10/5=2.0\n[\"Divide\", 10, 4]                 # 10/4=2.5\n[\"Power\", 2, 3]                   # 2^3=8\n[\"Root\", 9, 2]                    # √9=3.0\n[\"Root\", 8, 3]                    # ∛8=2.0\n[\"Sqrt\", 9]                       # √9=3.0\n[\"Square\", 4]                     # 4^2=16\n[\"Exp\", 2]                        # e^2≅7.389\n[\"Divide\", 10, [\"Add\", 2+3]]      # 10/(2+3)=10/5=2\n[\"Log\", 2.7183]                   # ln(2.7183)≅1.0000\n[\"Log2\", 8]                       # log2(8)=3.0\n[\"Log10\", 1000]                   # log10(1000)=3.0\n[\"Equal\", 10, 10]                 # 10==10 = True\n[\"Equal\", 10, 12]                 # 10==10 = False\n[\"Abs\", -3.5]                     # |-3.5| = 3.5\n[\"Round\", -5.123456, 2]           # -5.12\n[\"Round\", -5.123456, 0]           # -5.0\n[\"Round\", -5.123456]              # -5\n```\n\n### Constants\n```python\n[\n    \"Constants\",\n    [\"constant1\", <expression>],\n    [\"constant2\", <expression>],\n    [\"constant3\", <expression>],\n    ...,\n    <expression>\n]\n```\n\n`Constants` construct consists of keyword \"Constants\" followed by arbitrary number of name&value pairs. The last element in `Constants` construct is the expression to calculate using the defined constants.\n\nThe following example has two constants defined - `x=10` and `y=20`. Then the sum of these two constants is calculated and returned.\n\n\n```python\n[\n    \"Constants\",\n    [\"x\", 10],\n    [\"y\", 20],\n    [\"Add\",\"x\", \"y\"]\n]\n```\n\n\n### If statement\n```python\n[\n    \"If\",\n    [\n        [\n            \"Equal\",\n            1,\n            0\n        ],\n        10\n    ],\n    [\n        [\n            \"Equal\",\n            2,\n            2\n        ],\n        20\n    ],\n    9000\n]\n```\nThis construct translates to:\n```\nif   1 == 0 then 10\nelif 2 == 2 then 20\nelse 9000\n```\n\n\n### Switch-Case statement\n```python\n[\"Switch\", <expression>, <expression>, [<expression>, <expression>], ...],\n```\n\n`Switch` construct consists of keyword \"Switch\" followed by expression whose value will be compared to _Cases'_ values. Then comes the default value. Then follows arbitrary number of _Cases_.\n\nExample  \n```python\n[\"Switch\", \"color\", 100, [\"red\", 10], [\"blue\", 20], [\"green\", 30]],\n```\nThe expression in this example will make solver to look for a constant (or a parameter) with the name \"color\". If \"color\" is \"red\", expression evaluates to 10, if \"blue\" - to 20, if \"green\" - to 30. Otherwise to 100. Please note that \"color\" here is a valid expression that evaluates to the actual value of \"color\" whether it is a parameter or constant.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LongenesisLtd/mathjson-solver",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mathjson-solver",
    "package_url": "https://pypi.org/project/mathjson-solver/",
    "platform": null,
    "project_url": "https://pypi.org/project/mathjson-solver/",
    "project_urls": {
      "Bug Tracker": "https://github.com/LongenesisLtd/mathjson-solver/issues",
      "Homepage": "https://github.com/LongenesisLtd/mathjson-solver"
    },
    "release_url": "https://pypi.org/project/mathjson-solver/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Utilities for MathJSON evaluation",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15189959,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9299f365e8bc18071ad5c464c3bcd508407f67ef6fd9b4472f2b07621d2ed84f",
        "md5": "f83536552832376ddd5daa6f9dd72ea3",
        "sha256": "3b71c6feb5ecaa963b3fd832f480628b4f1bb898fa2a91fd666d624f06042ffa"
      },
      "downloads": -1,
      "filename": "mathjson_solver-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f83536552832376ddd5daa6f9dd72ea3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5186,
      "upload_time": "2022-05-20T07:27:50",
      "upload_time_iso_8601": "2022-05-20T07:27:50.891519Z",
      "url": "https://files.pythonhosted.org/packages/92/99/f365e8bc18071ad5c464c3bcd508407f67ef6fd9b4472f2b07621d2ed84f/mathjson_solver-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf303cbb699095e9c28b59b02432da92ad24074be29aed861b9c594fd0a437f9",
        "md5": "4d57e958613b00ffd75d6290f8c6b955",
        "sha256": "8e17d2a2be33d5fc9996e4781c2347bb2727ce4a70116345cbfd2c546f378558"
      },
      "downloads": -1,
      "filename": "mathjson-solver-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4d57e958613b00ffd75d6290f8c6b955",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5051,
      "upload_time": "2022-05-20T07:27:52",
      "upload_time_iso_8601": "2022-05-20T07:27:52.570992Z",
      "url": "https://files.pythonhosted.org/packages/bf/30/3cbb699095e9c28b59b02432da92ad24074be29aed861b9c594fd0a437f9/mathjson-solver-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}