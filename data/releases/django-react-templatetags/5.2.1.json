{
  "info": {
    "author": "Fröjd",
    "author_email": "martin@marteinn.se",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "|Build Status| |PyPI version|\n\nDjango-React-Templatetags\n=========================\n\nThis django library allows you to add React (16+) components into your\ndjango templates.\n\nIndex\n-----\n\n-  `Requirements <#requirements>`__\n-  `Installation <#installation>`__\n-  `Quick Setup <#quick-setup>`__\n-  `Usage <#usage>`__\n-  `Settings <#settings>`__\n-  `Examples <#examples>`__\n-  `Example Application <#example-application>`__\n-  `Working With Models <#working-with-models>`__\n-  `Server Side Rendering <#server-side-rendering>`__\n-  `FAQ <#faq>`__\n-  `Tests <#tests>`__\n-  `Contributing <#contributing>`__\n-  `License <#license>`__\n\nRequirements\n------------\n\n-  Python 2.7 / Python 3.4+ / PyPy\n-  Django 1.11+\n\nInstallation\n------------\n\nInstall the library with pip:\n\n::\n\n    $ pip install django_react_templatetags\n\nQuick Setup\n-----------\n\nMake sure ``django_react_templatetags`` is added to your\n``INSTALLED_APPS``.\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        # ...\n        'django_react_templatetags',\n    )\n\nYou also need to add the ``react_context_processor`` into the\n``context_middleware``:\n\n.. code:: python\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [\n                'templates...',\n            ],\n            'APP_DIRS': True,\n            'OPTIONS': {\n                'debug': True,\n                'context_processors': [\n                    ...\n                    'django_react_templatetags.context_processors.react_context_processor',\n                ],\n            },\n        },\n    ]\n\nThis should be enough to get started.\n\nUsage\n-----\n\n1. Load the ``{% load react %}``\n2. Insert the component anywhere in your template:\n   ``{% react_render component=\"Component\" props=my_data %}``. This will\n   create a dom placeholder.\n3. Put ``{% react_print %}`` in the end of your template. (This will\n   output ``ReactDOM.render()``/``ReactDOM.hydrate()`` javascript).\n4. Make sure ``React`` and ``ReactDOM`` are included and that\n   ``ReactDOM`` are exposed globally in js (ex\n   ``window.ReactDOM = ReactDOM``)\n\nSettings\n--------\n\nGeneral\n~~~~~~~\n\n-  ``REACT_COMPONENT_PREFIX``: Adds a prefix to your React.createElement\n   include, if you want to retrive your components from somewhere else\n   then the global scope. (Default is ``\"\"``).\n\n   -  Example using (``REACT_COMPONENT_PREFIX=\"Cookie.\"``) will look for\n      components in a global scope object named ``Cookie``.\n   -  …Becomes: ``React.createElement(Cookie.MenuComponent, {})``\n\n-  ``REACT_RENDER_TAG_MANAGER``: This is a advanced setting that lets\n   you replace our tag parsing rules (ReactTagManager) with your own.\n   (Default is ``\"\"``)\n\n   -  Example: ``\"myapp.manager.MyReactTagManager\"``\n\nSSR (Server Side Rendering)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  ``REACT_RENDER_HOST``: Which endpoint SSR requests should be posted\n   at. (Default is ``\"\"``)\n\n   -  Example: ``http://localhost:7000/render-component/``\n   -  The render host is a web service that accepts a post request and\n      and renders the component to HTML. (This is what our\n      `Hastur <https://github.com/Frojd/hastur>`__ service does)\n\n-  ``REACT_RENDER_TIMEOUT``: Timeout for SSR requests, in seconds.\n   (Default is ``20``)\n-  ``REACT_RENDER_HEADERS``: Override the default request headers sent\n   to the SSR service. Default:\n   ``{'Content-type': 'application/json', 'Accept': 'text/plain'}``.\n\n   -  Example: ``REACT_RENDER_HEADERS = {'Authorization': 'Basic 123'}``\n\nExamples\n--------\n\nSingle Component Example\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis view…\n\n.. code:: python\n\n    from django.shortcuts import render\n\n    def menu_view(request):\n        return render(request, 'myapp/index.html', {\n            'menu_data': {\n                'example': 1,\n            },\n        })\n\n… and this template:\n\n.. code:: html\n\n    {% load react %}\n    <html>\n        <head>...</head>\n\n        <body>\n            <nav>\n                {% react_render component=\"Menu\" props=menu_data %}\n            </nav>\n        </body>\n\n        {% react_print %}\n    </html>\n\nWill transform into this:\n\n.. code:: html\n\n    <html>\n        <head>...</head>\n\n        <body>\n            <nav>\n                <div id=\"Menu_405190d92bbc4d00b9e3376522982728\"></div>\n            </nav>\n        </body>\n\n        <script>\n            ReactDOM.render(\n                React.createElement(Menu, {\"example\": 1}),\n                document.getElementById('Menu_405190d92bbc4d00b9e3376522982728')\n            );\n        </script>\n    </html>\n\nMulti Component Example\n~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also have multiple components in the same template\n\nThis view…\n\n.. code:: python\n\n    from django.shortcuts import render\n\n    def menu_view(request):\n        return render(request, 'myapp/index.html', {\n            'menu_data': {\n                'example': 1,\n            },\n            'title_data': 'My title',\n            'footer_data': {\n                'credits': 'Copyright Company X'\n            }\n        })\n\n… and this template:\n\n.. code:: html\n\n    {% load react %}\n    <html>\n        <head>...</head>\n\n        <body>\n            <nav>\n                {% react_render component=\"Menu\" props=menu_data %}\n                {% react_render component=\"Title\" prop_title=title %}\n                {% react_render component=\"Footer\" props=footer_data %}\n            </nav>\n        </body>\n\n        {% react_print %}\n    </html>\n\nWill transform into this:\n\n.. code:: html\n\n    <html>\n        <head>...</head>\n\n        <body>\n            <nav>\n                <div id=\"Menu_405190d92bbc4d00b9e3376522982728\"></div>\n            </nav>\n            <main>\n                <div id=\"Title_405190d92bbc4d00b9e3376522982728\"></div>\n            </main>\n            <footer>\n                <div id=\"Footer_405190d92bbc4d00b9e3376522982728\"></div>\n            </footer>\n        </body>\n\n        <script>\n            ReactDOM.render(\n                React.createElement(Menu, {\"example\": 1}),\n                document.getElementById('Menu_405190d92bbc4d00b9e3376522982728')\n            );\n            ReactDOM.render(\n                React.createElement(Title, {\"title\": \"My title\"}),\n                document.getElementById('Title_405190d92bbc4d00b9e3376522982728')\n            );\n            ReactDOM.render(\n                React.createElement(Footer, {\"credits\": \"Copyright Company X\"}),\n                document.getElementById('Footer_405190d92bbc4d00b9e3376522982728')\n            );\n        </script>\n    </html>\n\nExample Application\n-------------------\n\nHere is an `example application of a fully React-rendered Django\napplication with\nreact-sass-starterkit <https://github.com/mikaelengstrom/django-react-polls-example/>`__.\nThis was an example app for a Django-meetup talk, you might find the\n`slides on\nSlideshare <https://www.slideshare.net/Frojd/integrating-react-in-django-while-staying-sane-and-happy>`__\nhelpful.\n\nWorking with models\n-------------------\n\nIn this example, by adding ``RepresentationMixin`` as a mixin to the\nmodel, the templatetag will know how to generate the component data. You\nonly need to pass the model instance to the ``react_render``\ntemplatetag.\n\nThis model…\n\n.. code:: python\n\n    from django.db import models\n    from django_react_templatetags.mixins import RepresentationMixin\n\n    class Person(RepresentationMixin, models.Model):\n        first_name = models.CharField(max_length=255)\n        last_name = models.CharField(max_length=255)\n\n        def to_react_representation(self, context={}):\n            return {\n                'first_name': self.first_name,\n                'last_name': self.last_name,\n            }\n\n…and this view\n\n.. code:: python\n\n    import myapp.models import Person\n\n    def person_view(request, pk):\n        return render(request, 'myapp/index.html', {\n            'menu_data': {\n                'person': Person.objects.get(pk=pk),\n            },\n        })\n\n…and this template:\n\n.. code:: html\n\n    {% load react %}\n    <html>\n        <head>...</head>\n\n        <body>\n            <nav>\n                {% react_render component=\"Menu\" props=menu_data %}\n            </nav>\n        </body>\n\n        {% react_print %}\n    </html>\n\n…will transform into this:\n\n.. code:: html\n\n    ...\n\n    <script>\n        ReactDOM.render(\n            React.createElement(Menu, {\"first_name\": \"Tom\", \"last_name\": \"Waits\"}),\n            document.getElementById('Menu_405190d92bbc4d00b9e3376522982728')\n        );\n    </script>\n\nServer Side Rendering\n---------------------\n\nThis library supports SSR (Server Side Rendering) throught third-part\nlibrary `Hastur <https://github.com/Frojd/Hastur>`__.\n\nIt works by posting component name and props to endpoint, that returns\nthe html rendition. Payload example:\n\n.. code:: json\n\n    {\n        \"componentName\": \"MyComponent\",\n        \"props\": {\n            \"title\": \"my props title\",\n            \"anyProp\": \"another prop\"\n        },\n        \"static\": false\n    }\n\n``REACT_RENDER_HOST`` needs to be defined to enable communication with\nservice.\n\nFAQ\n---\n\nHow do I override the markup generated by ``react_print``?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSimple! Just override the template ``react_print.html``\n\nThis library only contains templatetags, where is the react js library?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis library only covers the template parts (that is: placeholder and js\nrender).\n\nI dont like the autogenerated element id, can I supply my own?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSure! Just add the param ``identifier=\"yourid\"`` in ``react_render``.\n\nExample:\n\n::\n\n    {% react_render component=\"Component\" identifier=\"yourid\" %}\n\n…will print\n\n.. code:: html\n\n    <div id=\"yourid\"></div>\n\nHow do I pass individual props?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd your props as arguments prefixed with ``prop_*`` to your\n``{% react_render ... %}``.\n\nExample:\n\n.. code:: html\n\n    {% react_render component=\"Component\" prop_country=\"Sweden\" prop_city=\"Stockholm\" %}\n\n…will give the component this payload:\n\n.. code:: javascript\n\n    React.createElement(Component, {\"country\": \"Sweden\", \"city\": \"Stockholm\"}),\n\nHow do I apply my own css class to the autogenerated element?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``class=\"yourclassname\"`` to your ``{% react_render ... %}``.\n\nExample:\n\n.. code:: html\n\n    {% react_render component=\"Component\" class=\"yourclassname\" %}\n\n…will print\n\n.. code:: html\n\n    <div id=\"Component_405190d92bbc4d00b9e3376522982728\" class=\"yourclassname\"></div>\n\nI want to pass the component name as a variable, is that possible?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYes! Just remove the string declaration and reference a variable in your\n``{% react_render ... %}``, the same way you do with ``props``.\n\nExample:\n\nThis view\n\n.. code:: python\n\n    render(request, 'myapp/index.html', {\n        'component_name': 'MegaMenu',\n    })\n\n…and this template\n\n.. code:: html\n\n    {% react_render component=component_name %}\n\n…will print:\n\n.. code:: html\n\n    <div id=\"Component_405190d92bbc4d00b9e3376522982728\" class=\"yourclassname\"></div>\n    React.createElement(MegaMenu),\n\nTests\n-----\n\nThis library include tests, just run ``python runtests.py``\n\nYou can also run separate test cases:\n``runtests.py tests.test_filters.ReactIncludeComponentTest``\n\nContributing\n------------\n\nWant to contribute? Awesome. Just send a pull request.\n\nLicense\n-------\n\nDjango-React-Templatetags is released under the `MIT\nLicense <http://www.opensource.org/licenses/MIT>`__.\n\n.. |Build Status| image:: https://travis-ci.org/Frojd/django-react-templatetags.svg?branch=master\n   :target: https://travis-ci.org/Frojd/django-react-templatetags\n.. |PyPI version| image:: https://badge.fury.io/py/django_react_templatetags.svg\n   :target: https://badge.fury.io/py/django_react_templatetags\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/frojd/django-react-templatetags",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-react-templatetags",
    "package_url": "https://pypi.org/project/django-react-templatetags/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-react-templatetags/",
    "project_urls": {
      "Homepage": "https://github.com/frojd/django-react-templatetags"
    },
    "release_url": "https://pypi.org/project/django-react-templatetags/5.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This django library allows you to add React components into your django templates.",
    "version": "5.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16339563,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3360affe6cc3fd15b333eab190d50b0f6183df45d17ea6b4fb37fcd8eaffcdf1",
        "md5": "11a1880a1aa4d89f4b0342433a6f2afc",
        "sha256": "e09910c62df975047a0953f8f452781d0798cac5d89a4207c722f1e5a769719d"
      },
      "downloads": -1,
      "filename": "django_react_templatetags-5.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "11a1880a1aa4d89f4b0342433a6f2afc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13931,
      "upload_time": "2018-08-10T11:23:36",
      "upload_time_iso_8601": "2018-08-10T11:23:36.044061Z",
      "url": "https://files.pythonhosted.org/packages/33/60/affe6cc3fd15b333eab190d50b0f6183df45d17ea6b4fb37fcd8eaffcdf1/django_react_templatetags-5.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}