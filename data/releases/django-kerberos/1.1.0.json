{
  "info": {
    "author": "Benjamin Dauvergne",
    "author_email": "bdauvergne@entrouvert.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Kerberos authentication for Django\n==================================\n\nProvide Kerberos authentication to Django applications.\n\nBasic usage\n===========\n\nAdd this to your project `urls.py`::\n\n    url('^accounts/kerberos/', include('django_auth_kerb.urls')),\n\nAnd use the default authentication backend, by adding that to your `settings.py` file::\n\n    AUTHENTICATION_BACKENDS = (\n        'django_auth_kerberos.backends.KerberosBackend',\n    )\n\nSettings\n========\n\n`KERBEROS_HOSTNAME`\n-------------------\n\nHostname for retrieving the service key, the correspondig principal will be\n`HTTP/{KERBEROS_HOSTNAME}@DEFAULT_REAML`, default is `None`. If `None` the hostname\nfrom the request will be used.\n\n`KERBEROS_BACKEND_CREATE`\n-------------------------\n\nWhether to create user if no existing model can be found, default is `False`.\n\n`KERBEROS_BACKEND_ADMIN_REGEXP`\n-------------------------------\n\nA regular expression that the principal must match to get superuser privileges,\ndefault is `None`. A classic example could be `r'^.*/admin$'`.\n\n`KERBEROS_SERVICE_PRINCIPAL`\n-----------------------------------\n\nThe service principal to use when checking a password against the\nKDC, you don't need the secret key for this principal, it should\njust exist inside the Kerberos database as the check is done by\ntrying to get ticket for this service. Default is\nNone. It's used only by the pseudo password haser\nand the login/password authentication backend.\n\n`KERBEROS_KEEP_PASSWORD`\n------------------------\n\nDoes the KerbersoPasswordBackend store a hash of the\nchecked password inside the user model each time a\nuser log in. Default is False. It allows your\nwebsite to provide a backup authentication if\nKerberos is failing or if you ever need to detach\nfrom the realm.\n\nCustom backend\n==============\n\nA custom authentication backend can be used, in this case the signature of the\nauthenticate method must be::\n\n    class CustomKerberosBackend(object):\n        def authenticate(self, principal=None):\n            pass\n\nSample application\n==================\n\nFirst you need to install django-kerberos into your environment like that::\n\n    python setup.py install\n\nIf you want to try the sample application you must add this line to your `/etc/hosts` file, absolutely at the beginning::\n\n    127.0.0.1 test.example.com\n\nThen you must connect to your Kerberos administration server and add the\nprincipal HTTP/test.example.com and export its key in a keytab file::\n\n    $ kadmin -p myuser/admin\n    kadmin: addprinc -randkey HTTP/test.example.com\n    kadmin: ktadd -k /tmp/keytab HTTP/test.example.com\n\nFinally you can run the sample::\n\n    cd sample; KRB5_KTNAME=FILE:/tmp/keytab python ./manage.py runserver\n\nNow you should be able to login on http://test.example.com:8000/\n\nThe sample project is configured so that all principal ending with `/admin` get\nthe staff and superuser flags. You can change that by editing the key\n`KERBEROS_BACKEND_ADMIN_REGEXP` in `sample/sample/settings.py`.\n\nPseudo hasher\n=============\n\nA pseudo hasher whose import path is `django_kerberos.hashers.KerberosHasher`\nprovide a mean to associate a Django user model to a Kerberos identity.\n\nThe content of the password field must be `kerberos$<principal name>`.\n\nTo create an user for a principal you can do::\n\n   User.objects.create(username=new_username, password='kerberos$' + principal)\n\nLogin/Password backend\n======================\n\nIf your users does not have their browser configured\nfor SPNEGO HTTP authentication you can also provide\na classic login/password form which check passwords\nusing Kerberos.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://dev.entrouvert.org/projects/authentic/",
    "keywords": null,
    "license": "AGPLv3 or later",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-kerberos",
    "package_url": "https://pypi.org/project/django-kerberos/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-kerberos/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://dev.entrouvert.org/projects/authentic/"
    },
    "release_url": "https://pypi.org/project/django-kerberos/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Kerberos authentication for Django",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5715720,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e4d5b8541fe3826c635fcbb31abf1d868b9fa41f2bb03bf72f7b545130f3778",
        "md5": "4f8d2222fd7c02eea664fc9141b39a98",
        "sha256": "11ef8f91d92a032cfc4fc7f29bf95d15defc6c61297a2f2e8777f293b6685bbf"
      },
      "downloads": -1,
      "filename": "django-kerberos-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4f8d2222fd7c02eea664fc9141b39a98",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9270,
      "upload_time": "2014-08-12T09:53:40",
      "upload_time_iso_8601": "2014-08-12T09:53:40.458209Z",
      "url": "https://files.pythonhosted.org/packages/4e/4d/5b8541fe3826c635fcbb31abf1d868b9fa41f2bb03bf72f7b545130f3778/django-kerberos-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}