{
  "info": {
    "author": "Entr'ouvert",
    "author_email": "info@entrouvert.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Kerberos authentication for Django\n==================================\n\nProvide Kerberos authentication to Django applications.\n\nPython 2 and 3, Django >1.8 are supported.\n\nBasic usage\n===========\n\nAdd this to your project `urls.py`::\n\n    url('^accounts/kerberos/', include('django_kerberos.urls')),\n\nAnd use the default authentication backend, by adding that to your `settings.py` file::\n\n    AUTHENTICATION_BACKENDS = (\n        'django_kerberos.backends.KerberosBackend',\n    )\n\nSettings\n========\n\n`KERBEROS_HOSTNAME`\n-------------------\n\nHostname for retrieving the service key, the correspondig principal will be\n`HTTP/{KERBEROS_HOSTNAME}@DEFAULT_REAML`, default is `None`. If `None` the hostname\nfrom the request will be used.\n\n`KERBEROS_BACKEND_CREATE`\n-------------------------\n\nWhether to create user if no existing model can be found, default is `False`.\n\n`KERBEROS_BACKEND_ADMIN_REGEXP`\n-------------------------------\n\nA regular expression that the principal must match to get superuser privileges,\ndefault is `None`. A classic example could be `r'^.*/admin$'`.\n\n`KERBEROS_SERVICE_PRINCIPAL`\n-----------------------------------\n\nThe service principal to use when checking a password against the\nKDC, you don't need the secret key for this principal, it should\njust exist inside the Kerberos database as the check is done by\ntrying to get ticket for this service. Default is\nNone. It's used only by the pseudo password haser\nand the login/password authentication backend.\n\n`KERBEROS_KEEP_PASSWORD`\n------------------------\n\nDoes the KerbersoPasswordBackend store a hash of the\nchecked password inside the user model each time a\nuser log in. Default is False. It allows your\nwebsite to provide a backup authentication if\nKerberos is failing or if you ever need to detach\nfrom the realm.\n\nCustom backend\n==============\n\nA custom authentication backend can be used, in this case the signature of the\nauthenticate method must be::\n\n    class CustomKerberosBackend(object):\n        def authenticate(self, principal=None):\n            pass\n\nSample application\n==================\n\nFirst you need to install django-kerberos into your environment like that::\n\n    python setup.py install\n\nIf you want to try the sample application you must add this line to your `/etc/hosts` file, absolutely at the beginning::\n\n    127.0.0.1 test.example.com\n\nThen you must connect to your Kerberos administration server and add the\nprincipal HTTP/test.example.com and export its key in a keytab file::\n\n    $ kadmin -p myuser/admin\n    kadmin: addprinc -randkey HTTP/test.example.com\n    kadmin: ktadd -k /tmp/keytab HTTP/test.example.com\n\nFinally you can run the sample::\n\n    cd sample; KRB5_KTNAME=FILE:/tmp/keytab python ./manage.py runserver\n\nNow you should be able to login on http://test.example.com:8000/\n\nThe sample project is configured so that all principal ending with `/admin` get\nthe staff and superuser flags. You can change that by editing the key\n`KERBEROS_BACKEND_ADMIN_REGEXP` in `sample/sample/settings.py`.\n\n.. caution::\n   Only use A pointers for your domain name or if your domain name is a CNAME alias then create the HTTP principal for the target domain.\n\n   Web browsers implementing the SPNEGO HTTP authenticiation protocol\n   canonicalize domain names by always resolving to a DNS A record before\n   building the corresponding principal. So if you have the following zone::\n\n      test.example.com CNAME a.example.com\n      a.example.com A a.b.c.d\n\n   and if you connect to https://test.example.com then the browser is gonna try\n   to get a ticket for the HTTP/a.examepl.com service principal not for\n   HTTP/test.example.com.\n\nPseudo hasher\n=============\n\nA pseudo hasher whose import path is `django_kerberos.hashers.KerberosHasher`\nprovide a mean to associate a Django user model to a Kerberos identity.\n\nThe content of the password field must be `kerberos$<principal name>`.\n\nTo create an user for a principal you can do::\n\n   User.objects.create(username=new_username, password='kerberos$' + principal)\n\nLogin/Password backend\n======================\n\nIf your users does not have their browser configured\nfor SPNEGO HTTP authentication you can also provide\na classic login/password form which check passwords\nusing Kerberos.\n\nAutologin\n=========\n\nA template include is provided to implement autologin. It calls the Kerberos\nlogin view using AJAX. AJAX support in the login view makes the view return a\nJSON document containing a boolean value indicating if login was sucessfull.\nIf login is succesfull the current view is reloaded.\n\nTo use this template just add the following code to any of your templates::\n\n   {% include \"django_kerberos/autologin.html\" %}\n\nAfter a succesfull login a cookie is created which prevent autologin for the\nnext 15 minutes, to permit login using other methods after an immediate logout.\n\nThe template show an HTML div having the id \"kerberos-autologin\" and containing\nthe text \"Autologin...\" so that you can add CSS styling to it.\n\nThe javascript implementation of autologin is a script named\n\"js/autlogin.html\", it can be reused to implement autologin for other\nproctocols. Its only requirement is to have a view which return 'true' if a\nlogin is successfull on an HTTP GET request. The script provide a javascript\nfunction whose signature is::\n\n     autologin(url, callback[. timeout])\n\nurl is the URL of the login view, callback is a javascript function which will\nreceive true or false depending on the login success and timeout is the number\nof seconds after a succesfull login during which autologin is disabled, default\nis 15 minutes.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://dev.entrouvert.org/projects/authentic/",
    "keywords": "",
    "license": "AGPLv3 or later",
    "maintainer": "Benjamin Dauvergne",
    "maintainer_email": "bdauvergne@entrouvert.com",
    "name": "django-kerberos",
    "package_url": "https://pypi.org/project/django-kerberos/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-kerberos/",
    "project_urls": {
      "Homepage": "http://dev.entrouvert.org/projects/authentic/"
    },
    "release_url": "https://pypi.org/project/django-kerberos/1.4.4/",
    "requires_dist": [
      "six",
      "django (>1.8)",
      "pykerberos"
    ],
    "requires_python": "",
    "summary": "Kerberos authentication for Django",
    "version": "1.4.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5715720,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c760e8ddd57fabdc563c5207d82299bcf4f410cc653dbe42856bdff968ac761",
        "md5": "9f1a1ffc1102e9534cc897718c4b1776",
        "sha256": "08ed63580504e7a9f6c96fd026cd7001cd8e20be2cee7882ae69785f66ac478c"
      },
      "downloads": -1,
      "filename": "django_kerberos-1.4.4-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f1a1ffc1102e9534cc897718c4b1776",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 13112,
      "upload_time": "2019-08-22T15:05:07",
      "upload_time_iso_8601": "2019-08-22T15:05:07.967118Z",
      "url": "https://files.pythonhosted.org/packages/0c/76/0e8ddd57fabdc563c5207d82299bcf4f410cc653dbe42856bdff968ac761/django_kerberos-1.4.4-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62d341ed722d699ee264f10e427ffba971ee8e024d63ac25f36fcfa94e0a1725",
        "md5": "1d02c53d2b78dcecff7842e283b08c6d",
        "sha256": "eb0da481a6c49b4648681621aecf54ef1aba7cb7bd1d5cbd7303b35415170d23"
      },
      "downloads": -1,
      "filename": "django-kerberos-1.4.4.tar.gz",
      "has_sig": false,
      "md5_digest": "1d02c53d2b78dcecff7842e283b08c6d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14185,
      "upload_time": "2019-08-22T15:05:10",
      "upload_time_iso_8601": "2019-08-22T15:05:10.009550Z",
      "url": "https://files.pythonhosted.org/packages/62/d3/41ed722d699ee264f10e427ffba971ee8e024d63ac25f36fcfa94e0a1725/django-kerberos-1.4.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}