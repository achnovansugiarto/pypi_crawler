{
  "info": {
    "author": "Aden Herold",
    "author_email": "aden.herold1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# django-typomatic ![pypi badge](https://img.shields.io/pypi/v/django-typomatic)\n\n_A simple solution for generating Typescript interfaces from your [Django Rest Framework Serializers](https://www.django-rest-framework.org/api-guide/serializers/)._\n\nSince I now require a simple package to generate Typescript interfaces for Django Rest Framework serializers, I've decided to port over my [Typemallow](https://github.com/adenh93/typemallow/) package for use with DRF serializers!\n\n### Usage:\n\n_Using django-typomatic is just as simple!_\n\nFirst, install the package\n`pip install django-typomatic`\n\nNext, for your Django Rest Framework serializers that you wish to generate Typescript interfaces for, simply import `ts_interface` and `generate_ts` from the `django_typomatic` module, and add the `@ts_interface()` class decorator to your Django Rest Framework serializer class.\n\nAll that is required to generate your Typescript interfaces is to call the `generate_ts()` function, and provide a filepath as a parameter to output the result.\n\n_main.py_\n\n```python\nfrom django_typomatic import ts_interface, generate_ts\nfrom rest_framework import serializers\n\n\n@ts_interface()\nclass Foo(serializers.Serializer):\n    some_field = serializers.CharField()\n    another_field = serializers.DateTimeField()\n\n\ngenerate_ts('./output.ts')\n```\n\n_output.ts_\n\n```typescript\nexport interface Foo {\n  some_field: string;\n  another_field: date;\n}\n```\n\nAlternatively, you can call `get_ts()`, which will return the generated interfaces as a raw string, rather than writing the results to a file:\n\n_main.py_\n\n```python\nfrom django_typomatic import ts_interface, get_ts\nfrom rest_framework import serializers\n\n\n@ts_interface()\nclass Foo(serializers.Serializer):\n    some_field = serializers.ListField(child=serializers.IntegerField())\n    another_field = serializers.CharField()\n\nprint(get_ts())\n```\n\nwhich outputs the following string:\n\n`export interface Foo {\\n some_field: number[];\\n another_field: string;\\n}\\n\\n`\n\n_django-typomatic_ supports nested serializers, as well as list fields and other fields that act as lists (any field with many=True)\n\n_main.py_\n\n```python\nfrom django_typomatic import ts_interface, generate_ts\nfrom rest_framework import serializers\n\n\n@ts_interface()\nclass Foo(serializers.Serializer):\n    some_field = serializers.ListField(child=serializers.IntegerField())\n    another_field = serializers.CharField()\n\n\n@ts_interface()\nclass Bar(serializers.Serializer):\n    foo = Foo()\n    foos = Foo(many=True)\n    bar_field = serializers.CharField()\n```\n\n_output.ts_\n\n```typescript\nexport interface Foo {\n  some_field: number[];\n  another_field: string;\n}\n\nexport interface Bar {\n  foo: Foo;\n  foos: Foo[];\n  bar_field: string;\n}\n```\n\n_django-typomatic_ also supports ChoiceField serializers, as well as any other serializer fields that makes use of choices.\n\n_main.py_\n\n```python\nfrom django_typomatic import ts_interface\nfrom rest_framework import serializers\nfrom django.db import models\n\n\nclass ActionType(models.TextChoices):\n    ACTION1 = \"Action1\", (\"Action1\")\n    ACTION2 = \"Action2\", (\"Action2\")\n    ACTION3 = \"Action3\", (\"Action3\")\n\n\nclass NumberType(models.IntegerChoices):\n    LOW = 1\n    MEDIUM = 2\n    HIGH = 3\n\n\n@ts_interface('choices')\nclass ChoiceSerializer(serializers.Serializer):\n    action = serializers.ChoiceField(choices=ActionType.choices)\n    num = serializers.ChoiceField(choices=NumberType.choices)\n\n```\n\n_output.ts_\n\n```typescript\nexport interface ActionSerializer {\n  action: \"Action1\" | \"Action2\" | \"Action3\";\n  num: 1 | 2 | 3;\n}\n```\n\n### Extended Usage:\n\nThe `@ts_interface()` decorator function accepts an optional parameter, _context_, which defaults to... well... 'default'.\n\n\"_Why is this the case?_\"\n\nWhen a Serializer is identified with with `@ts_interface` decorator, it is added to a list in a dictionary of serializers, with the dictionary key being the value provided to the _context_ parameter. If you were to provide different contexts for each serializer, additional keys will be created if they do not exist, or the serializer will simply be appended to the list at the existing key.\n\nThis comes in handy, as the `generate_ts()` function _also_ accepts an optional _context_ parameter, which will filter only serializers in the dictionary at the specific key.\n\nThis is useful if you wish to output different contexts to different files, e.g.\n\n_main.py_\n\n```python\n...\nfrom django_typomatic import ts_interface, generate_ts\nfrom rest_framework import serializers\n\n\n@ts_interface(context='internal')\nclass Foo(serializers.Serializer):\n    foo = serializers.CharField()\n\n\n@ts_interface(context='internal')\nclass Bar(serializers.Serializer):\n    bar = serializers.CharField()\n\n\n@ts_interface(context='external')\nclass FooBar(serializers.Serializer):\n    foo_bar = serializers.CharField()\n\n\n'''\nwe're telling django-typomatic that we only want to generate interfaces from serializers with\nan 'internal' context to './internal.ts'\n'''\ngenerate_ts('./internal.ts', context='internal')\n\n'''\nonly generate interfaces from serializers with an 'external' context to './external.ts'\n'''\ngenerate_ts('./external.ts', context='external')\n```\n\n_internal.ts_\n\n```typescript\nexport interface Foo {\n  foo: string;\n}\n\nexport interface Bar {\n  bar: string;\n}\n```\n\n_external.ts_\n\n```typescript\nexport interface FooBar {\n  foo_bar: string;\n}\n```\n\n#### Camelize\n\nYou can use django dependencies that converts the response from `snake_casing` to `camelCasing`. The solution offered for this is camelize:\n\n```python\nfrom django_typomatic import ts_interface, generate_ts\nfrom rest_framework import serializers\n\n\n@ts_interface()\nclass Foo(serializers.Serializer):\n    some_field = serializers.CharField()\n\n\ngenerate_ts('./output.ts', camelize=True)\n```\n\nDifferent from the main example. The interface attributes are now camel casing.\n\n_output.ts_\n\n```typescript\nexport interface Foo {\n  someField: string;\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adenh93/django-typomatic",
    "keywords": "Django,Django Rest Framework,DRF,Typescript,Python",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-typomatic",
    "package_url": "https://pypi.org/project/django-typomatic/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-typomatic/",
    "project_urls": {
      "Homepage": "https://github.com/adenh93/django-typomatic"
    },
    "release_url": "https://pypi.org/project/django-typomatic/1.6.3/",
    "requires_dist": [
      "django",
      "djangorestframework"
    ],
    "requires_python": "",
    "summary": "A simple solution for generating Typescript interfaces from your Django Rest Framework Serializers.",
    "version": "1.6.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17469135,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0708cf1e664e1e4d7a67bbcb8fcacb87caae6321176f18f33671303b67551711",
        "md5": "af81f06d8cb4ea28c05a67131bae1bed",
        "sha256": "816c195e33b1307bc2b3145693af280eb611b622a3f5ec4075b16f906b825e8a"
      },
      "downloads": -1,
      "filename": "django_typomatic-1.6.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "af81f06d8cb4ea28c05a67131bae1bed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7173,
      "upload_time": "2022-09-26T09:34:44",
      "upload_time_iso_8601": "2022-09-26T09:34:44.163691Z",
      "url": "https://files.pythonhosted.org/packages/07/08/cf1e664e1e4d7a67bbcb8fcacb87caae6321176f18f33671303b67551711/django_typomatic-1.6.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1380cb79b173e8fb2b59b6510153141373087cf0dcbab08a869eb6e88a52e59c",
        "md5": "4b62406f3e065eb193b547d7694ff523",
        "sha256": "972249ee0837220484b5f1e0d82d47d866c0a5bb178cc2dc547b75c87f8e8a20"
      },
      "downloads": -1,
      "filename": "django-typomatic-1.6.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4b62406f3e065eb193b547d7694ff523",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6376,
      "upload_time": "2022-09-26T09:34:48",
      "upload_time_iso_8601": "2022-09-26T09:34:48.194774Z",
      "url": "https://files.pythonhosted.org/packages/13/80/cb79b173e8fb2b59b6510153141373087cf0dcbab08a869eb6e88a52e59c/django-typomatic-1.6.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}