{
  "info": {
    "author": "Alexander",
    "author_email": "digital-mag@ya.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# django-ui-widgets\n\nThis is an add-on for django, consisting of improved widgets and fields with an expanded viewing interface and advanced features. Django widgets are taken as a basis.\n\n### Package contains\n\n- [DynamicMultiSelect](#dynamicmultiselect)\n- [DynamicSelect](#dynamicselect)\n- [DynamicModelField](#dynamicmodelfield)\n- [CustomImageField](#customimagefield)\n- [AutoUrlInput](#autourlinput)\n- [JSONViewWidget](#jsonviewwidget)\n- [DateWidget](#datewidget)\n- [DivHyperModelForm](#divhypermodelform)\n\n\n## DynamicMultiSelect\n\nThis is a replacement for `SelectMultiple`. In fact, it is an analog of django-autocomplete without using jquery. Usage:\n\n```python\nfrom ui.widgets import DynamicMultiSelect\n\nclass ProfileUpdateForm(ModelForm): \n\n    labels = ModelMultipleChoiceField(\n        queryset=SkillLabel.objects.all(),\n        widget=DynamicMultiSelect(reverse_lazy('tag_filter'))\n    )\n\n    class Meta:\n        model = Profile\n\n    def __init__(self, *args, **kwargs):\n\n        super().__init__('submit', *args, **kwargs)\n        if 'data' not in kwargs:\n            self.fields['labels'].queryset = SkillLabel.objects.filter(profile=self.instance)\n            self.fields['labels'].widget.choices = ModelChoiceIterator(self.fields['labels'])\n```\nIn the example above, `tag_filter` is a name of view url, that consists of filter returning `JsonResponse` object with a list of `dict`s contained `id` and `name` keys:\n\n```python\ndef tag_filter(request: HttpRequest):\n\n    pattern = request.GET.get('query', '')\n    result = SkillLabel.objects\\\n        .filter(name__startswith=pattern)\\\n        .extra(select={'hint': 'name'}) \\\n        .values('id', 'name') if pattern else ()\n\n    return JsonResponse(list(result), safe=False)\n```\nYou can also use `.annotate(value=F('name')` instead of `extra` for receiving proper name `name` for view in template.\n\nAlso pay attention to the choice assignment when transmitting data. This is necessary for correct form validation when checking primary keys\n\n## DynamicSelect\n\nLike `DynamicMultiSelect` *DynamicSelect* is replacement standart `Select` django widget for `ForeignKey` model fields with asynchronius autofillng from specified url. Works without jquery. Using like `DynamicMultiSelect` or through `DynamicModelField` (recomended):\n\n## DynamicModelField\n\n**DynamicModelField** is field using `DynamicSelect` widget. \n\nThe simplest usage example:\n\n```python\nform.fields['type'] = DynamicModelField(\n    reverse('tag_filter'),\n    SkillLabel.objects.filter(id=form.instance.type_id),\n    'Field Placeholder',\n)\n```\n\nIn constructor you also can specify `class_name` and optional `attrs` for DynamicSelect widget:\n\n```python\nform.fields['type'] = DynamicModelField(\n    reverse('tag_filter'),\n    SkillLabel.objects.filter(id=form.instance.type_id),\n    placeholder='Placeholder',\n    class_name='my_class',\n    attrs={'style': 'margin-bottom:0'}\n)\n```\nyou can use several of these fields on the same page and in the same form\n\n## CustomImageField\n\nA field that hides input with the file type and allows you to set the css class for the label pointing to it. \nThis is a common (and almost default) practice of decorating 'input[type=file]' in classic frontend development, which requires a lot of actions. \nWith this component, you can do it in one line. Recommended usage:\n\n```python\n    image = CustomImageField(label_css_class='image_icon', back_image='photo_up.jpg')\n```\n\nIn above sample by default inside CustomImageField is used `ImageWidget`. You can override this widget if you want. \nHowever, this is not recommended, since in this case you will need to manually implement the display of the image when it is updated\n\n## AutoUrlInput\n\nReplacement for URLInput. Adds an automatic 'https://' extension at the beginning of the line if the address is invalid\n\n**Attention!**\nfor this widget to work correctly, you must explicitly specify links to media resources in the template after the form, such as: `{{ form.media }}`\n\n\n## DateWidget\n\nCustomized *DateInput* widget:\n\n![alt JSONViewWidget](./doc/time.PNG)\n\n## JSONViewWidget\n\n**JSONViewWidget** - widget for displaying the content of `model.JSONField` (a field officially added in django 3.1). Designed specifically for use in the admin interface. Usage example:\n\n```python\nclass SkillAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n            models.JSONField: {            \n                'widget': JSONViewWidget(                \n            ) \n        },\n    }\n```\n\n![alt JSONViewWidget](./doc/json.PNG)\n\n`JSONViewWidget` inspired by [SplitJSONWidget](https://github.com/abbasovalex/django-SplitJSONWidget-form). But it has the following features that are missing in `SplitJSONWidget`, currently:\n\n- adding and removing notes of the tree first level\n- editing for array entries of the tree first level\n- view, editing and deleting for the notes of embedded levels\n\n# forms\n\n\n## DivHyperModelForm\n\ncustom ModelForm with two new methods:\n\n- **as_ht()** - works like `as_p` in template, but it already contains all the necessary content of the form tag. It means, small calling `{{form.as_p}}` by rendering\ndeploys to following code:\n\n```html\n<form method=\"post\" {{cssclass}}>\n    {% csrf_token %}\n    {{form.as_p}}\n    <input type=\"submit\" value=\"{{submit}}\">\n</form>\n```\n\n- **as_div** - works like *as_ht*, but instaed of `p` tag to display each item of the form fields it takes `div`\n\nOptional attributes:\n\n- *action* - specify `action` attribute for the `<form>` tag\n- *css_class* - specify `class` attribute for the `<form>` tag\n- *submit* - specify `value` attribute for `<submit>` tag inside tag form\n\nUsage:\n\n```python\nclass ProfileUpdateForm(DivHyperModelForm):  \n\n    class Meta:\n        model = Profile\n        exclude = ('user',)\n\n    def __init__(self, *args, **kwargs):\n\n        super().__init__('submit', 'form_class', *args, **kwargs)\n\tself.action = reverse('some_next_page')\n```\nor \n```python\nclass ProfileUpdateForm(DivHyperModelForm):  \n    action = '/'\n    submit = 'ok'\n    css_class = 'form_class'\n    \n    class Meta:\n        model = Profile\n        exclude = ('user',)\n```\n\nCreate instance and pass to template:\n\n```python\ncontext = {'form': ProfileUpdateForm(submit='ok', request=request)}\nrender('template_name.html', context, request)\n```\n\nin template:\n```html\n<!DOCTYPE html>\n<html lang=\"ru\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\t\n</head>\n<body>\n\t{{form.as_div}}\n\t{{form.media}}\n</body>\n```\n\nin above sample usage `{{form.media}}` is optionally like standart form\n\n\n\n\n# Installation:\n\nThere are two steps:\n- First step: install through *pip* utility from one of the following sources:\n    - *pypi*\n    ```\n    pip install django-ui-widgets\n    ```\n\n    - *github* (*latest version*) (*recomended*)\n    ```\n    pip install git+http://github.com/Sanshain/django-ui-widgets\n    ```\n- Second step: add **\"ui\"** app to `INSTALLED_APPS` inside `settings.py` of your project:\n\n   ```py\n   INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    \n    #...\n    \n    'ui',\n    \n    #...\n   ]\n   ```\n\nFinish",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sanshain/django-ui-widgets",
    "keywords": "django,forms,widgets,fields,django-ui",
    "license": "AGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-ui-widgets",
    "package_url": "https://pypi.org/project/django-ui-widgets/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-ui-widgets/",
    "project_urls": {
      "Homepage": "https://github.com/Sanshain/django-ui-widgets"
    },
    "release_url": "https://pypi.org/project/django-ui-widgets/1.1.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library of django ui widgets",
    "version": "1.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11969874,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0329637bcd8ab663b44df454450d1c9e35878291e9d1e29d6d032e8e601c6c66",
        "md5": "d2762423a2d4a5e9ef5672484d0ec360",
        "sha256": "7e3fe6b14a73d2a209f2252c8194b0aa66a28588a206037710a660e4751102ee"
      },
      "downloads": -1,
      "filename": "django-ui-widgets-1.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "d2762423a2d4a5e9ef5672484d0ec360",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13722,
      "upload_time": "2021-11-09T09:04:22",
      "upload_time_iso_8601": "2021-11-09T09:04:22.246277Z",
      "url": "https://files.pythonhosted.org/packages/03/29/637bcd8ab663b44df454450d1c9e35878291e9d1e29d6d032e8e601c6c66/django-ui-widgets-1.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}