{
  "info": {
    "author": "YunoJuno",
    "author_email": "code@yunojuno.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": ".. image:: https://travis-ci.org/yunojuno/django-side-effects.svg?branch=master\n    :target: https://travis-ci.org/yunojuno/django-side-effects\n\n.. image:: https://badge.fury.io/py/django-side-effects.svg\n    :target: https://badge.fury.io/py/django-side-effects\n\nDjango Side Effects\n===================\n\nDjango app for managing external side effects.\n\nPython2/3\n---------\n\n**This project is now Python3, Django 1.11+ only on master.**\n\nThe legacy Python2 code is now parked in the python2 branch.\n\nBackground\n----------\n\nThis project was created to try and bring some order to the use of external\nside-effects within the YunoJuno platform. External side-effects are (as\ndefined by us) those actions that affect external systems, and that are not\npart of the core application integrity. They fall into two main categories\nwithin our application - *notifications* and *updates*, and are best\nillustrated by example:\n\n**Notifications**\n\n* Slack messages\n* SMS (via Twilio)\n* Push notifications\n* Email\n\n**Updates**\n\n* Base CRM (sales)\n* Mailchimp CRM (marketing)\n* Elasticsearch (full-text index)\n\nThere are some shared aspects of all of these side-effects:\n\n1. They can all be processed asynchronously (queued)\n2. They can all be replayed (and are idempotent)\n3. They can be executed in any order\n4. They are not time critical\n5. They do not affect the state of the Django application\n\nAs we have continued to build out YunoJuno our use of these side-effects\nhas become ever more complex, and has in some areas left us with functions\nthat are 80% side-effects:\n\n.. code:: python\n\n    def foo():\n        # do the thing the function is supposed to do\n        update_object(obj)\n        # spend the rest of the function working out which side-effects to fire\n        if settings.notify_account_handler:\n            send_notification(obj.account_handler)\n        if obj.has_changed_foo():\n            udpate_crm(obj)\n\n\nThis results in a codebase is:\n\n* Hard to read\n* Hard to test\n* Hard to document^\n\n^ Barely a week goes by without someone asking *\"what happens when X does Y -\nI thought they got email Z?\"*\n\nSolution\n--------\n\nThis project aims to address all three of the issues above by:\n\n* Removing all side-effects code from core functions\n* Simplifying mocking / disabling of side-effects in tests\n* Simplifying testing of side-effects only\n* Automating documentation of side-effects\n\nIt does this with a combination of function decorators that can\nbe used to build up a global registry of side-effects.\n\nThe first decorator, ``has_side_effects``, is used to mark a function as one\nthat has side effects:\n\n.. code:: python\n\n    # mark this function as one that has side-effects. The label\n    # can be anything, and is used as a dict key for looking up\n    # associated side-effects functions\n    @side_effects.decorators.has_side_effects('update_profile')\n    def foo(*args, **kwargs):\n        pass\n\n**Decorating view functions**\n\nBy default, the ``has_side_effects`` decorator will run so long as the inner\nfunction does not raise an exception. View functions, however, are a paticular\ncase where the function may run, and return a perfectly valid ``HttpResponse``\nobject, but you do **not** want the side effects to run, as the response object\nhas a ``status_code`` of 404, 500, etc. In this case, you want to inspect the\ninner function return value before deciding whether to fire the side effects\nfunctions. In order to support this, the ``has_side_effects`` decorator has\na kwarg ``run_on_exit`` which takes a function that takes a single parameter,\nthe return value from the inner function, and must return ``True`` or ``False``\nwhich determines whether to run the side effects.\n\nThe ``decorators`` module contains the default argument for this kwarg, a\nfunction called ``http_response_check``. This will return ``False`` if the\ninner function return value is an ``HttpResponse`` object with a status\ncode in the 4xx-5xx range.\n\n\nThe second decorator, ``is_side_effect_of``, is used to bind those functions\nthat implement the side effects to the origin function:\n\n.. code:: python\n\n    # bind this function to the event 'update_profile'\n    @is_side_effect_of('update_profile')\n    def send_updates(*args, **kwargs):\n        \"\"\"Update CRM system.\"\"\"\n        pass\n\n    # bind this function also to 'update_profile'\n    @is_side_effect_of('update_profile')\n    def send_notifications(*args, **kwargs):\n        \"\"\"Notify account managers.\"\"\"\n        pass\n\nIn the above example, the updates and notifications have been separated\nout from the origin function, which is now easier to understand as it is\nonly responsible for its own functionality. In this example we have two\nside-effects bound to the same origin, however this is an implementation\ndetail - you could have a single function implementing all the side-effects,\nor split them out further into the individual external systems.\n\n**Passing origin function return value to side-effects handlers**\n\nBy default, side-effects handling functions must have the same function\nsignature as the origin function. (Internally the ``(*args, **kwargs)`` are\njust a straight pass-through to the handler.) However, in certain cases it\nis very useful to have access to the origin function return value. A common\ncase is where the origin function creates a new object. The framework handles\nthis internally by introspecting the handler function, and looking for\n``**kwargs``.\n\nThis is best illustrated with an example:\n\n.. code:: python\n\n    @has_side_effects(\"foo\")\n    def origin_func(arg1: int, arg2: int) -> int:\n        return arg1 + arg2\n\n    @is_side_effect_of(\"foo\")\n    def handle_func1(arg1, arg2):\n        # this func will not receive the return_value, as\n        # no kwargs are specified\n\n    @is_side_effect_of(\"foo\")\n    def handle_func1(arg1, arg2, **kwargs):\n        # this func will receive the return_value via **kwargs\n        assert \"return_value\" in kwargs\n\n    @is_side_effect_of(\"foo\")\n    def handle_func1(arg1, arg2, return_value=None):\n        # this func will receive the return_value\n\n    @is_side_effect_of(\"foo\")\n    def handle_func1(arg1, arg2, return_value):\n        # this func will receive the return_value, as it is a named arg,\n        # and there is no *args variable\n\n    @is_side_effect_of(\"foo\")\n    def handle_func1(*args, return_value):\n        # this func will *NOT* receive the return_value\n\nInternally, the app maintains a registry of side-effects functions bound to\norigin functions using the text labels. The docstrings for all the bound functions can be grouped using these labels, and then be printed out using the\nmanagement command ``display_side_effects``:\n\n.. code:: bash\n\n    $ ./manage.py display_side_effects\n\n    This command prints out the first line from the docstrings of all functions\n    registered using the @is_side_effect decorator, grouped by label.\n\n    update_profile:\n\n        - Update CRM system.\n        - Notify account managers.\n\n    close_account:\n\n        - Send confirmation email to user.\n        - Notify customer service.\n\nIf you have a lot of side-effects wired up, you can filter the list by the label:\n\n.. code:: bash\n\n    $ ./manage.py display_side_effects --label update_profile\n\n    update_profile:\n        - Update CRM system.\n        - Notify account managers.\n\nOr by a partial match on the event label:\n\n.. code:: bash\n\n    $ ./manage.py display_side_effects --label-contains profile\n\n    update_profile:\n        - Update CRM system.\n        - Notify account managers.\n\nIf you want to enforce docstrings on side-effect functions, then you can use the\n`--check-docstrings` option, which will exit with a non-zero exit code if any\ndocstrings are missing. This can be used as part of a CI process, failing any\nbuild that does not have all its functions documented. (The exit code is the count\nof functions without docstrings).\n\n.. code:: bash\n\n    $ ./manage.py display_side_effects --check-docstrings\n\n    update_profile:\n        *** DOCSTRING MISSING: update_crm ***\n        - Notify account managers.\n\n    ERROR: InvocationError for command '...' (exited with code 1)\n\nWhy not use signals?\n--------------------\n\nThe above solution probably looks extremely familiar - and it is very closely\nrelated to the built-in Django signals implementation. You could easily\nreproduce the output of this project using signals - this project is really\njust a formalisation of the way in which a signal-like pattern could be used\nto make your code clear and easy to document. The key differences are:\n\n1. Explicit statement that a function has side-effects\n2. A simpler binding mechanism (using text labels)\n3. (TODO) Async processing of receiver functions\n\nIt may well be that this project merges back in to the signals pattern in\ndue course - at the moment we still experimenting.\n\n\nInstallation\n------------\n\nThe project is available through PyPI as ``django-side-effects``:\n\n.. code::\n\n    $ pip install django-side-effects\n\nAnd the main package itself is just ``side_effects``:\n\n.. code:: python\n\n    >>> from side_effects import decorators\n\nTests\n-----\n\nThe project has pretty good test coverage (>90%) and the tests themselves run through ``tox``.\n\n.. code::\n\n    $ pip install tox\n    $ tox\n\nIf you want to run the tests manually, make sure you install the requirements, and Django.\n\n.. code::\n\n    $ pip install django==2.0  # your version goes here\n    $ tox\n\nIf you are hacking on the project, please keep coverage up.\n\nNB If you implement side-effects in your project, you will most likely want to be able to turn off the side-effects when testing your own code (so that you are not actually sending emails, updating systems), but you also probably want to know that the side-effects events that you are expecting are fired.\n\nThe following code snippet shows how to use the ``disable_side_effects`` context manager, which returns a list of all the side-effects events that are fired. There is a matching function decorator, which will append the events list as an arg to the decorated function, in the same manner that ``unittest.mock.patch`` does.\n\n.. code:: python\n\n    from side_effects.decorators import disable_side_effects, has_side_effects\n\n    @has_side_effects('do_foo')\n    def foo():\n        pass\n\n    def test_foo():\n\n        # to disable side-effects temporarily, use decorator\n        with disable_side_effects() as events:\n            foo()\n            assert events == ['do_foo']\n            foo()\n            assert events == ['do_foo', 'do_foo']\n\n\n    # events list is added to the test function as an arg\n    @disable_side_effects()\n    def test_foo_without_side_effects(events):\n        foo()\n        assert events == ['do_foo']\n\nIn addition to these testing tools there is a universal 'kill-switch' which can be set using the env var ``SIDE_EFFECTS_TEST_MODE=True``. This will completely disable all side-effects events. It is a useful tool when you are migrating a project over to the side_effects pattern - as it can highlight where existing tests are relying on side-effects from firing. Use with caution.\n\nContributing\n------------\n\nStandard GH rules apply: clone the repo to your own account, create a branch, make sure you update the tests, and submit a pull request.\n\nStatus\n------\n\nWe are using it at YunoJuno, but 'caveat emptor'. It does what we need it to do right now, and we will extend it as we evolve. If you need or want additional features, get involved :-).",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yunojuno/django-side-effects",
    "keywords": "",
    "license": "MIT",
    "maintainer": "YunoJuno",
    "maintainer_email": "code@yunojuno.com",
    "name": "django-side-effects",
    "package_url": "https://pypi.org/project/django-side-effects/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-side-effects/",
    "project_urls": {
      "Homepage": "https://github.com/yunojuno/django-side-effects"
    },
    "release_url": "https://pypi.org/project/django-side-effects/1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django app for managing external side effects.",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16087490,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a89f359956e094090e2169edd7e2cd7638cd3b62a5940b5cf1501521d1446cb9",
        "md5": "554bacf231e453f047d3bfe42ccec480",
        "sha256": "5fa2ddbcd460474b1a851dcd8022a25c8e580695b214960e51ee04be7d02608f"
      },
      "downloads": -1,
      "filename": "django-side-effects-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "554bacf231e453f047d3bfe42ccec480",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12054,
      "upload_time": "2019-12-02T17:47:01",
      "upload_time_iso_8601": "2019-12-02T17:47:01.352030Z",
      "url": "https://files.pythonhosted.org/packages/a8/9f/359956e094090e2169edd7e2cd7638cd3b62a5940b5cf1501521d1446cb9/django-side-effects-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}