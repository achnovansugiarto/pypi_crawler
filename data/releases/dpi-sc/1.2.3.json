{
  "info": {
    "author": "studentiz",
    "author_email": "studentiz@live.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# Modeling and analyzing single-cell multimodal data with deep parametric inference\nThe proliferation of single-cell multimodal sequencing technologies has enabled us to understand cellular heterogeneity with multiple views, providing novel and actionable biological insights into the disease-driving mechanisms. Here, we propose a comprehensive end-to-end single-cell multimodal data analysis framework named Deep Parametric Inference (DPI). The python packages, datasets and user-friendly manuals of DPI are freely available at https://github.com/studentiz/dpi.\n\n## The dpi framework works with scanpy and supports the following single-cell multimodal analyses\n* Multimodal data integration\n* Multimodal data noise reduction\n* Cell clustering and visualization\n* Reference and query cell types\n* Cell state vector field visualization\n## Pip install\n```python\npip install dpi-sc\n```\n## Datasets\nThe dataset participating in \"Single-cell multimodal modeling with deep parametric inference\" can be downloaded at [DPI data warehouse](http://101.34.64.251:88/)\n## Tutorial\nWe use Peripheral Blood Mononuclear Cell (PBMC) dataset to demonstrate the process of DPI analysis of single cell multimodal data. The following code is recommended to run on a computer with more than 64G memory.\n### Import dependencies\n```python\nimport scanpy as sc\nimport dpi\n```\n### Retina image output (optional)\n```python\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n```\n### Load dataset\n```python\n# The dataset can be downloaded from [Datasets] above.\nsc_data = sc.read_h5ad(\"PBMC_COVID19_Healthy_Annotated.h5ad\")\n```\n### Set marker collection\n```python\nrna_markers = [\"CCR7\", \"CD19\", \"CD3E\", \"CD4\"]\nprotein_markers = [\"AB_CCR7\", \"AB_CD19\", \"AB_CD3\", \"AB_CD4\"]\n```\n### Preprocessing\n```python\ndpi.preprocessing(sc_data)\ndpi.normalize(sc_data, protein_expression_obsm_key=\"protein_expression\")\nsc_data.var_names_make_unique()\nsc.pp.highly_variable_genes(\n    sc_data,\n    n_top_genes=3000,\n    flavor=\"seurat_v3\",\n    subset=False\n)\ndpi.add_genes(sc_data, rna_markers)\nsc_data = sc_data[:,sc_data.var[\"highly_variable\"]]\ndpi.scale(sc_data)\n```\n### Prepare and run DPI model\nConfigure DPI model parameters\n```python\ndpi.build_mix_model(sc_data, net_dim_rna_list=[512, 128], net_dim_pro_list=[128], net_dim_rna_mean=128, net_dim_pro_mean=128, net_dim_mix=128, lr=0.0001)\n```\nRun DPI model\n```python\ndpi.fit(sc_data, batch_size=256)\n```\nVisualize the loss\n```python\ndpi.loss_plot(sc_data)\n```\n### Save DPI model (optional)\n```python\ndpi.saveobj2file(sc_data, \"COVID19PBMC_healthy.dpi\")\n#sc_data = dpi.loadobj(\"COVID19PBMC_healthy.dpi\")\n```\n### Visualize the latent space\nExtract latent spaces\n```python\ndpi.get_spaces(sc_data)\n```\nVisualize the spaces\n```python\ndpi.space_plot(sc_data, \"mm_parameter_space\", color=\"green\", kde=True, bins=30)\ndpi.space_plot(sc_data, \"rna_latent_space\", color=\"orange\", kde=True, bins=30)\ndpi.space_plot(sc_data, \"pro_latent_space\", color=\"blue\", kde=True, bins=30)\n```\n### Preparation for downstream analysis\nExtract features\n```python\ndpi.get_features(sc_data)\n```\nGet denoised datas\n```python\ndpi.get_denoised_rna(sc_data)\ndpi.get_denoised_pro(sc_data)\n```\n### Cell clustering and visualization\nCell clustering\n```python\nsc.pp.neighbors(sc_data, use_rep=\"mix_features\")\ndpi.umap_run(sc_data, min_dist=0.4)\nsc.tl.leiden(sc_data)\n```\nCell cluster visualization\n```python\nsc.pl.umap(sc_data, color=\"leiden\")\n```\n### Observe multimodal data markers\nRNA markers\n```python\ndpi.umap_plot(sc_data, featuretype=\"rna\", color=rna_markers, ncols=2)\ndpi.umap_plot(sc_data, featuretype=\"rna\", color=rna_markers, ncols=2, layer=\"rna_denoised\")\n```\nProtein markers\n```python\ndpi.umap_plot(sc_data, featuretype=\"protein\", color=protein_markers, ncols=2)\ndpi.umap_plot(sc_data, featuretype=\"protein\", color=protein_markers, ncols=2, layer=\"pro_denoised\")\n```\n### Reference and query\nReference objects need to be pre-set with cell labels.\n```python\nsc.pl.umap(sc_data, color=\"initial_clustering\", frameon=False, title=\"PBMC COVID19 Healthy labels\")\n```\nDemonstrate reference and query capabilities with unannotated asymptomatic COVID-19 PBMCs.\n```python\n# The dataset can be downloaded from [Datasets] above.\nfilepath = \"COVID19_Asymptomatic.h5ad\"\nsc_data_COVID19_Asymptomatic = sc.read_h5ad(filepath)\n```\nUnannotated data also needs to be normalized.\n```python\ndpi.normalize(sc_data_COVID19_Asymptomatic, protein_expression_obsm_key=\"protein_expression\")\n```\nReferenced and queried objects require alignment features.\n```python\nsc_data_COVID19_Asymptomatic = sc_data_COVID19_Asymptomatic[:,sc_data.var.index]\n```\nRun the automated annotation function.\n```python\ndpi.annotate(sc_data, ref_labelname=\"initial_clustering\", sc_data_COVID19_Asymptomatic)\n```\nVisualize the annotated object.\n```python\nsc.pl.umap(sc_data_COVID19_Asymptomatic, color=\"labels\", frameon=False, title=\"PBMC COVID19 Asymptomatic Annotated\")\n```\n### Cell state vector field\nSimulate and visualize the cellular state when the CCR7 protein is amplified 2-fold.\n```python\ndpi.cell_state_vector_field(sc_data, feature=\"AB_CCR7\", amplitude=2, obs=\"initial_clustering\", featuretype=\"protein\")\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/studentiz/dpi",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dpi-sc",
    "package_url": "https://pypi.org/project/dpi-sc/",
    "platform": null,
    "project_url": "https://pypi.org/project/dpi-sc/",
    "project_urls": {
      "Homepage": "https://github.com/studentiz/dpi"
    },
    "release_url": "https://pypi.org/project/dpi-sc/1.2.3/",
    "requires_dist": [
      "bokeh (>=2.4.2)",
      "Pillow (>=9.0.1)",
      "six (>=1.16.0)",
      "cloudpickle (>2.0.0)",
      "scikit-misc (>=0.1.4)",
      "tensorflow (>=2.7.0)",
      "keras (>=2.7.0)",
      "leidenalg (>=0.8.8)",
      "matplotlib (>=3.5.1)",
      "numpy (>=1.21.5)",
      "pandas (>=1.4.1)",
      "PhenoGraph (>=1.5.7)",
      "scanpy (>=1.8.2)",
      "scikit-bio (>=0.5.6)",
      "scikit-learn (>=1.0.2)",
      "scipy (>=1.8.0)",
      "seaborn (>=0.11.2)",
      "statsmodels (>=0.13.1)",
      "umap-learn (>=0.5.2)"
    ],
    "requires_python": ">=3.8.12",
    "summary": "An end-to-end single-cell multimodal analysis model with deep parameter inference.",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14973375,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4107e0ea8c7f3925783e473f374464e94c24196ec9d3089697298644aeeaa6a2",
        "md5": "30c5332d330ceee227bda4058577ee8b",
        "sha256": "f32df88cfce76b32650ba027c68a5e5a34ee67daa3903f3750fe5915cc6e6dfe"
      },
      "downloads": -1,
      "filename": "dpi_sc-1.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "30c5332d330ceee227bda4058577ee8b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.12",
      "size": 22258,
      "upload_time": "2022-09-02T10:52:25",
      "upload_time_iso_8601": "2022-09-02T10:52:25.846470Z",
      "url": "https://files.pythonhosted.org/packages/41/07/e0ea8c7f3925783e473f374464e94c24196ec9d3089697298644aeeaa6a2/dpi_sc-1.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1fbfdb419046665865adbbca50aa5c5bf93844e303556532370b79992a27c00",
        "md5": "f5ead6742f359989b399c1025e820c47",
        "sha256": "cf6a28c657220eebd3a1c6c2ce9b527e5f7e0f9faa20f96430511f71ef838bd2"
      },
      "downloads": -1,
      "filename": "dpi-sc-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f5ead6742f359989b399c1025e820c47",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.12",
      "size": 16563,
      "upload_time": "2022-09-02T10:52:28",
      "upload_time_iso_8601": "2022-09-02T10:52:28.440370Z",
      "url": "https://files.pythonhosted.org/packages/c1/fb/fdb419046665865adbbca50aa5c5bf93844e303556532370b79992a27c00/dpi-sc-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}