{
  "info": {
    "author": "brianjbuck",
    "author_email": "brian@thebuckpasser.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Django Rest Framework ORJSON Renderer\n=====================================\n\n[![DRF ORJSON Renderer Tests](https://github.com/brianjbuck/drf_orjson_renderer/actions/workflows/main.yml/badge.svg)](https://github.com/brianjbuck/drf_orjson_renderer/actions/workflows/main.yml)\n\n`drf_orjson_renderer` is JSON renderer and parser for Django Rest Framework\nusing the [orjson](https://github.com/ijl/orjson) library. Backed by\n[Rust](https://www.rust-lang.org/), orjson is safe, correct and _fast_. ⚡️\n\nIn addition, unlike some performance optimized DRF renderers, It also renders\npretty printed JSON when requests are made via RestFramework's BrowsableAPI.\n\nYou get:\n- The safety of Rust\n- The speed of orjson when requests are made with `Accept: appliation/json` HTTP\n  header or when requests are made with an unspecified `Accept` header.\n- The convenience of formatted output when requested with `Accept: text/html`.\n- The ability to pass your own `default` function definition.\n\n\n## Installation\n\n`pip install drf_orjson_renderer`\n\nYou can then set the `ORJSONRenderer` class as your default renderer in your `settings.py`\n\n```Python\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": (\n        \"drf_orjson_renderer.renderers.ORJSONRenderer\",\n        \"rest_framework.renderers.BrowsableAPIRenderer\",\n    ),\n}\n```\nTo modify how data is serialized, specify options in your `settings.py`\n```Python\nREST_FRAMEWORK = {\n    \"ORJSON_RENDERER_OPTIONS\": (\n        orjson.OPT_NON_STR_KEYS,\n        orjson.OPT_SERIALIZE_DATACLASS,\n        orjson.OPT_SERIALIZE_NUMPY,\n    ),\n}\n```\n\nAlso you can set the `ORJSONParser` class as your default parser in your `settings.py`\n\n```Python\nREST_FRAMEWORK = {\n    \"DEFAULT_PARSER_CLASSES\": (\n        \"drf_orjson_renderer.parsers.ORJSONParser\",\n    ),\n}\n```\n\n## Passing Your Own `default` Function\n\nBy default, the `ORJSONRenderer` will pass a `default` function as a helper for\nserializing objects that orjson doesn't recognize. That should cover the most\ncommon cases found in a Django web application. If you find you have an object\nit doesn't recognize you can pass your own default function by overriding the\n`get_renderer_context()` method of your view:\n\n```Python\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\n\nclass MyView(APIView):\n    def default(self, obj):\n        if isinstance(obj, MyComplexData):\n            return dict(obj)\n\n    def get_renderer_context(self):\n        renderer_context = super().get_renderer_context()\n        renderer_context[\"default_function\"] = self.default\n        return renderer_context\n\n    def get(self, request, *args, **kwargs):\n        my_complex_data = MyComplexData()\n        return Response(data=my_complex_data)\n```\n\nIf you know your data is already in a format orjson natively\n[recognizes](https://github.com/ijl/orjson/#types) you can get a small\nperformance boost by passing `None` to the `renderer_context`:\n\n```Python\ndef get_renderer_context(self):\n    renderer_context = super().get_renderer_context()\n    renderer_context[\"default_function\"] = None\n    return renderer_context\n```\n\nAs of ORJSON version 3, 2-space indenting is supported in serialization. In\norder to take advantage of the RestFramework Browsable API, when the\nrequested media type is not `application/json`, the ORJSON renderer will add\n`orjson.OPT_INDENT_2` to the options mask to pretty print your output.\n\n## Numpy\n\nWhen this package was originally written ORJSON did not natively support\nserializing numpy types. This package provided an encoder class that\noverrides the DjangoJSONEncoder with support for numpy types. This encoder\nis no longer necessary but included for backwards compatibility.\n\n```Python\nfrom drf_orjson_renderer.encoders import DjangoNumpyJSONEncoder\nfrom rest_framework.views import APIView\n\nclass MyView(APIView):\n\n\n    def get_renderer_context(self):\n        renderer_context = super().get_renderer_context()\n        renderer_context[\"django_encoder_class\"] = DjangoNumpyJSONEncoder\n        return renderer_context\n```\n\n## Benchmarks\nSee the [orjson Benchmarks](https://github.com/ijl/orjson#performance) for more information\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brianjbuck/drf_orjson_renderer",
    "keywords": "drf_orjson_renderer,rest_framework,orjson",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-orjson-renderer",
    "package_url": "https://pypi.org/project/drf-orjson-renderer/",
    "platform": null,
    "project_url": "https://pypi.org/project/drf-orjson-renderer/",
    "project_urls": {
      "Homepage": "https://github.com/brianjbuck/drf_orjson_renderer"
    },
    "release_url": "https://pypi.org/project/drf-orjson-renderer/1.7.0/",
    "requires_dist": [
      "django (>=3.2)",
      "djangorestframework",
      "orjson (>=3.3.0)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Django RestFramework JSON Renderer Backed by orjson",
    "version": "1.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15844007,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9e89666b488357013b833da9f012256ba1a916cf2ec9a2440c0ddac6c71eb63",
        "md5": "0a3572ac5353d3e12f11f2ab19437843",
        "sha256": "6151e9239fdcac5d0be8ef7ff3f1ed1bb8a354b1d41d035037919169abd5f440"
      },
      "downloads": -1,
      "filename": "drf_orjson_renderer-1.7.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a3572ac5353d3e12f11f2ab19437843",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 7064,
      "upload_time": "2022-11-21T18:22:01",
      "upload_time_iso_8601": "2022-11-21T18:22:01.268948Z",
      "url": "https://files.pythonhosted.org/packages/e9/e8/9666b488357013b833da9f012256ba1a916cf2ec9a2440c0ddac6c71eb63/drf_orjson_renderer-1.7.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09ac8846642f8f304a7f1e3b1da04339238b0387d32ea04d65e80335525e2e6e",
        "md5": "3c3f93cfb99ce9f99ee5978bdcb76577",
        "sha256": "f55c54cbea6c09ec40d7594490c18ae3c1bc50439386c15bed4223ae31f86f48"
      },
      "downloads": -1,
      "filename": "drf_orjson_renderer-1.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3c3f93cfb99ce9f99ee5978bdcb76577",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 6252,
      "upload_time": "2022-11-21T18:22:04",
      "upload_time_iso_8601": "2022-11-21T18:22:04.283613Z",
      "url": "https://files.pythonhosted.org/packages/09/ac/8846642f8f304a7f1e3b1da04339238b0387d32ea04d65e80335525e2e6e/drf_orjson_renderer-1.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}