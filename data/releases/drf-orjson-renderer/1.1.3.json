{
  "info": {
    "author": "brianjbuck",
    "author_email": "brian@thebuckpasser.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Django Rest Framework ORJSON Renderer\n=====================================\n\n`drf_orjson_renderer` is JSON renderer and parser for Django Rest Framework\nusing the [orjson](https://github.com/ijl/orjson) library. Backed by\n[Rust](https://www.rust-lang.org/), orjson is safe, correct and _fast_. ⚡️\n\nIn addition, unlike some performance optimized DRF renderers, It also renders\npretty printed JSON when requests are made via RestFramework's BrowsableAPI.\n\nYou get:\n- The safety of Rust\n- The speed of orjson when requests are made with `Accept: appliation/json` HTTP\n  header or when requests are made with an unspecified `Accept` header.\n- The convenience of formatted output when requested with `Accept: text/html`.\n- The ability to pass your own `default` function definition.\n\n\n## Installation\n\n`pip install drf_orjson_renderer`\n\nYou can then set the `ORJSONRenderer` class as your default renderer in your `settings.py`\n\n```Python\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": (\n        \"drf_orjson_renderer.renderers.ORJSONRenderer\",\n        \"rest_framework.renderers.BrowsableAPIRenderer\",\n    ),\n}\n```\n\nAlso you can set the `ORJSONParser` class as your default parser in your `settings.py`\n\n```Python\nREST_FRAMEWORK = {\n    \"DEFAULT_PARSER_CLASSES\": (\n        \"drf_orjson_renderer.parsers.ORJSONParser\",\n    ),\n}\n```\n\n## Passing Your Own `default` Function\n\nBy default, the `ORJSONRenderer` will pass a `default` function as a helper for\nserializing objects that orjson doesn't recognize. That should cover the most\ncommon cases found in a Django web application. If you find you have an object\nit doesn't recognize you can pass your own default function by overriding the\n`get_renderer_context()` method of your view:\n\n```Python\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\n\nclass MyView(APIView):\n    def default(self, obj):\n        if isinstance(obj, MyComplexData):\n            return dict(obj)\n\n    def get_renderer_context(self):\n        renderer_context = super().get_renderer_context()\n        renderer_context[\"default_function\"] = self.default\n        return renderer_context\n\n    def get(self, request, *args, **kwargs):\n        my_complex_data = MyComplexData()\n        return Response(data=my_complex_data)\n```\n\nIf you know your data is already in a format orjson natively\n[recognizes](https://github.com/ijl/orjson/#types) you can get a small\nperformance boost by passing `None` to the `renderer_context`:\n\n```Python\ndef get_renderer_context(self):\n    renderer_context = super().get_renderer_context()\n    renderer_context[\"default_function\"] = None\n    return renderer_context\n```\n\nIn order to take advantage of the RestFramework Browsable API, when the\nrequested media type is not `application/json`, the ORJSON renderer will fall\nback to using the built-in Python `json` module to pretty print your output.\nIf you have overriden the default function its possible that you may need to\ndo this as well for the `json` encoder class:\n\n```Python\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\n\nclass MyJSONEncoder(DjangoJSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, MyComplexData):\n            return dict(obj)\n        return super().default(obj)\n\nclass MyView(APIView):\n\n\n    def get_renderer_context(self):\n        renderer_context = super().get_renderer_context()\n        renderer_context[\"django_encoder_class\"] = MyJSONEncoder\n        return renderer_context\n\n    def get(self, request, *args, **kwargs):\n        my_complex_data = MyComplexData()\n        return Response(data=my_complex_data)\n```\n\nThis package provides an encoder class that overrides the DjangoJSONEncoder with\nsupport for numpy types:\n\n```Python\nfrom drf_orjson_renderer.encoders import DjangoNumpyJSONEncoder\nfrom rest_framework.views import APIView\n\nclass MyView(APIView):\n\n\n    def get_renderer_context(self):\n        renderer_context = super().get_renderer_context()\n        renderer_context[\"django_encoder_class\"] = DjangoNumpyJSONEncoder\n        return renderer_context\n```\n\n## Benchmarks\nSee the [orjson Benchmarks](https://github.com/ijl/orjson#performance) for more information\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brianjbuck/drf_orjson_renderer",
    "keywords": "drf_orjson_renderer,rest_framework,orjson",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-orjson-renderer",
    "package_url": "https://pypi.org/project/drf-orjson-renderer/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-orjson-renderer/",
    "project_urls": {
      "Homepage": "https://github.com/brianjbuck/drf_orjson_renderer"
    },
    "release_url": "https://pypi.org/project/drf-orjson-renderer/1.1.3/",
    "requires_dist": [
      "django",
      "djangorestframework",
      "orjson"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Django RestFramework JSON Renderer Backed by orjson",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15844007,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f0b19365687825799c6b1d634c04d1f26ae1c37b2d7d6a27aed8c72753db4e5",
        "md5": "ab6fea8cea12319429444c031f309c63",
        "sha256": "a674885c97be62e71e1afc1c99245c93265321af0f8e4d87dd1d146797c20590"
      },
      "downloads": -1,
      "filename": "drf_orjson_renderer-1.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ab6fea8cea12319429444c031f309c63",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 6756,
      "upload_time": "2020-02-18T16:16:22",
      "upload_time_iso_8601": "2020-02-18T16:16:22.499340Z",
      "url": "https://files.pythonhosted.org/packages/7f/0b/19365687825799c6b1d634c04d1f26ae1c37b2d7d6a27aed8c72753db4e5/drf_orjson_renderer-1.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83aa2fc10d11c3cc9a71af4b002102780b8a51f32df3c6e488b5c916cac01bea",
        "md5": "78dc49b59fdad42cfaf5db5eb7301380",
        "sha256": "54c4662480ff45d439d35abe21d6c7982d9e670a9aab1ff8237c42a6b57d7557"
      },
      "downloads": -1,
      "filename": "drf_orjson_renderer-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "78dc49b59fdad42cfaf5db5eb7301380",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 5564,
      "upload_time": "2020-02-18T16:16:29",
      "upload_time_iso_8601": "2020-02-18T16:16:29.472012Z",
      "url": "https://files.pythonhosted.org/packages/83/aa/2fc10d11c3cc9a71af4b002102780b8a51f32df3c6e488b5c916cac01bea/drf_orjson_renderer-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}