{
  "info": {
    "author": "intelligenia",
    "author_email": "mario@intelligenia.es",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# django-virtual-pos\nDjango module that abstracts the flow of several virtual points of sale including PayPal\n\n\n# What's this?\n\nThis module abstracts the use of the most used virtual points of sale in Spain.\n\n# License\n\n[MIT LICENSE](LICENSE).\n\n# Implemented payment methods\n\n## PayPal\n\nEasy integration with PayPal.\n\n## Spanish Virtual Points of Sale\n\n### Ceca\n[CECA](http://www.cajasdeahorros.es/) is the Spanish confederation of savings banks.\n\n### RedSyS\n[RedSyS](http://www.redsys.es/) gives payment services to several Spanish banks like CaixaBank or Caja Rural.\n\n### Santander Elavon\n[Santander Elavon](https://www.santanderelavon.com/) is one of the payment methods of the Spanish bank Santander. \n\n\n# Requirements and Installation\n\n## Requirements\n\n- Python 2.7 (Python 3 not tested, contributors wanted!)\n- [Django](https://pypi.python.org/pypi/django)\n- [BeautifulSoup4](https://pypi.python.org/pypi/beautifulsoup4)\n- [lxml](https://pypi.python.org/pypi/lxml)\n- [pycrypto](https://pypi.python.org/pypi/pycrypto)\n- [Pytz](https://pypi.python.org/pypi/pytz)\n- [Requests](https://pypi.python.org/pypi/requests)\n\n\nType:\n````sh\n$ pip install django beautifulsoup4 lxml pycrypto pytz\n````\n\n## Installation\n\n\n### From PyPi\n\n````sh\n$ pip install django-virtual-pos\n````\n\n### From master branch\n\nMaster branch will allways contain a working version of this module. \n\n````sh\n$ pip install git+git://github.com/intelligenia/django-virtual-pos.git\n````\n\n\n### settings.py\n\nAdd the application djangovirtualpos to your settings.py:\n\n````python\nINSTALLED_APPS = (\n\t# ...\n\t\"djangovirtualpos\",\n)\n````\n\n# Use\n\nSee this [manual](manual/COMMON.md) (currently only in Spanish).\n\n## Needed models\n\nYou will need to implement this skeleton view using your own **Payment** model.\n\nThis model has must have at least the following attributes:\n - **code**: sale code given by our system.\n - **operation_number**: bank operation number.\n - **status**: status of the payment: \"paid\", \"pending\" (**pending** is mandatory) or \"canceled\".\n - **amount**: amount to be charged.\n\nAnd the following methods:\n - **online_confirm**: mark the payment as paid.\n\n## Integration examples\n- [djshop](https://github.com/diegojromerolopez/djshop)\n\n\n## Needed views\n### Sale summary view\n\n````python\ndef payment_summary(request, payment_id):\n\t\"\"\"\n\tLoad a Payment object and show a summary of its contents to the user.\n\t\"\"\"\n\n\tpayment = get_object_or_404(Payment, id=payment_id, status=\"pending\")\n\treplacements = {\n\t\t\"payment\": payment,\n\t\t# ...\n\t}\n\treturn render(request, '<sale summary template path>', replacements)\n\n````\n\nNote that this payment summary view should load a JS file called **set_payment_attributes.js**.\n\nThis file is needed to set initial payment attributes according to which bank have the user selected.\n\n\n### Payment_confirm view\n\n````python\n@csrf_exempt\ndef payment_confirmation(request, virtualpos_type):\n\t\"\"\"\n\tThis view will be called by the bank.\n\t\"\"\"\n\t# Directly call to confirm_payment view\n\n\t# Or implement the following actions\n\n\t# Checking if the Point of Sale exists\n\tvirtual_pos = VirtualPointOfSale.receiveConfirmation(request, virtualpos_type=virtualpos_type)\n\n\tif not virtual_pos:\n\t\t# The VPOS does not exist, inform the bank with a cancel\n\t\t# response if needed\n\t\treturn VirtualPointOfSale.staticResponseNok(virtualpos_type)\n\n\t# Verify if bank confirmation is indeed from the bank\n\tverified = virtual_pos.verifyConfirmation()\n\toperation_number = virtual_pos.operation.operation_number\n\n\twith transaction.atomic():\n\t\ttry:\n\t\t\t# Getting your payment object from operation number\n\t\t\tpayment = Payment.objects.get(operation_number=operation_number, status=\"pending\")\n\t\texcept Payment.DoesNotExist:\n\t\t\treturn virtual_pos.responseNok(\"not_exists\")\n\n\t\tif verified:\n\t\t\t# Charge the money and answer the bank confirmation\n\t\t\ttry:\n\t\t\t\tresponse = virtual_pos.charge()\n\t\t\t\t# Implement the online_confirm method in your payment\n\t\t\t\t# this method will mark this payment as paid and will\n\t\t\t\t# store the payment date and time.\n\t\t\t\tpayment.online_confirm()\n\t\t\texcept VPOSCantCharge as e:\n\t\t\t\treturn virtual_pos.responseNok(extended_status=e)\n\t\t\texcept Exception as e:\n\t\t\t\treturn virtual_pos.responseNok(\"cant_charge\")\n\n\t\telse:\n\t\t\t# Payment could not be verified\n\t\t\t# signature is not right\n\t\t\tresponse = virtual_pos.responseNok(\"verification_error\")\n\n\t\treturn response\n````\n\n### Payment ok view\n\n````python\ndef payment_ok(request, sale_code):\n\t\"\"\"\n\tInforms the user that the payment has been made successfully\n\t:param payment_code: Payment code.\n\t:param request: request.\n\t\"\"\"\n\n\t# Load your Payment model given its code\n\tpayment =  get_object_or_404(Payment, code=sale_code, status=\"paid\")\n\n\tcontext = {'pay_status': \"Done\", \"request\": request}\n\treturn render(request, '<payment_ok template>', {'context': context, 'payment': payment})\n````\n\n### Payment cancel view\n\n````python\ndef payment_cancel(request, sale_code):\n\t\"\"\"\n\tInforms the user that the payment has been canceled\n\t:param payment_code: Payment code.\n\t:param request: request.\n\t\"\"\"\n\n\t# Load your Payment model given its code\n\tpayment =  get_object_or_404(Payment, code=sale_code, status=\"pending\")\n\t# Mark this payment as canceled\n\tpayment.cancel()\n\n\tcontext = {'pay_status': \"Done\", \"request\": request}\n\treturn render(request, '<payment_canceled template>', {'context': context, 'payment': payment})\n````\n\n### Refund view\n\n````python\ndef refund(request, tpv, payment_code, amount, description):\n\t\"\"\"\n\t:param request:\n\t:param tpv: TPV Id\n\t:param payment_code: Payment code\n\t:param amount: Refund Amount (Example 10.89).\n\t:param description: Description of refund cause.\n\t:return:\n\t\"\"\"\n\t\n\tamount = Decimal(amount)\n\t\n\ttry:\n\t\t# Checking if the Point of Sale exists\n\t\ttpv = VirtualPointOfSale.get(id=tpv)\n\t\t# Checking if the Payment exists\n\t\tpayment = Payment.objects.get(code=payment_code, state=\"paid\")\n\t\t\n\texcept Payment.DoesNotExist as e:\n\t\treturn http_bad_request_response_json_error(message=u\"Does not exist payment with code {0}\".format(payment_code))\n\t\n\trefund_status = tpv.refund(payment_code, amount, description)\n\t\n\tif refund_status:\n\t\tmessage = u\"Refund successful\"\n\telse:\n\t\tmessage = u\"Refund with erros\"\n\n\treturn http_response_json_ok(message)\n````\n\n\n# Authors\n- Mario Barch√©in marioREMOVETHIS@REMOVETHISintelligenia.com\n- Diego J. Romero diegoREMOVETHIS@REMOVETHISintelligenia.com\n\nRemove REMOVETHIS to contact the authors.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/intelligenia/django-virtual-pos",
    "keywords": "virtual,point-of-sale,puchases,online,payments",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-virtual-pos",
    "package_url": "https://pypi.org/project/django-virtual-pos/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-virtual-pos/",
    "project_urls": {
      "Homepage": "https://github.com/intelligenia/django-virtual-pos"
    },
    "release_url": "https://pypi.org/project/django-virtual-pos/1.6.8.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "django-virtual-pos is a module that abstracts the flow of paying in several online payment platforms.",
    "version": "1.6.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7059276,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d1680fd526f6a422a120e3ccf40700c1bea1ec62002f440701886a4274e5857",
        "md5": "22c497718e72c05281925f810f6829c2",
        "sha256": "e120564afae0dc70593c4f3a3d5c7b53ede11693c44735fc9bff768b5cfa8ccc"
      },
      "downloads": -1,
      "filename": "django-virtual-pos-1.6.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "22c497718e72c05281925f810f6829c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 58688,
      "upload_time": "2018-02-12T12:24:37",
      "upload_time_iso_8601": "2018-02-12T12:24:37.484490Z",
      "url": "https://files.pythonhosted.org/packages/8d/16/80fd526f6a422a120e3ccf40700c1bea1ec62002f440701886a4274e5857/django-virtual-pos-1.6.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}