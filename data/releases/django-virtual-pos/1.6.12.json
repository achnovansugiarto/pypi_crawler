{
  "info": {
    "author": "intelligenia",
    "author_email": "mario@intelligenia.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License"
    ],
    "description": "Django Virtual Pos\n==================\n\nDjango module that abstracts the flow of several virtual points of sale\nincluding PayPal\n\nWhat’s this?\n-------------------------\n\nThis module abstracts the use of the most used virtual points of sale in\nSpain.\n\nLicense\n-------------------------\n\n`MIT LICENSE`_.\n\nImplemented payment methods\n----------------------------\n\nPaypal\n-------------------------\n\n`Paypal`_ paypal payment available.\n\nBitpay\n-------------------------\n\n`Bitpay`_ bitcoin payments, from wallet to checkout\n\nSpanish Virtual Points of Sale\n------------------------------\n\n- Ceca\n\n\n`CECA`_ is the Spanish confederation of savings banks.\n\n- RedSyS\n\n`RedSyS`_ gives payment services to several Spanish banks like CaixaBank\nor Caja Rural.\n\nSantander Elavon\n----------------\n\n`Santander Elavon`_ is one of the payment methods of the Spanish bank\nSantander.\n\nRequirements and Installation\n==============================\n\nRequirements\n----------------\n\n-  Python 2.7 (Python 3 not tested, contributors wanted!)\n-  ``Django``\n-  ``BeautifulSoup4``\n-  ``lxml``\n-  ``pycrypto``\n-  ``Pytz``\n-  ``Requests``\n\nType:\n\n.. code:: sh\n\n    $ pip install django beautifulsoup4 lxml pycrypto pytz\n\nInstallation\n----------------\n\n\nFrom PyPi\n----------------\n\n.. code:: sh\n\n    $ pip install django-virtual-pos\n\nFrom master branch\n-------------------\n\nMaster branch will allways contain a working version of this module.\n\n.. code:: sh\n\n    $ pip install git+git://github.com/intelligenia/django-virtual-pos.git\n\nsettings.py\n-------------\n\nAdd the application djangovirtualpos to your settings.py:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        # ...\n        \"djangovirtualpos\",\n    )\n\nUse\n----\n\nSee this ``manual`` (currently only in Spanish).\n\nNeeded models\n-------------\n\nYou will need to implement this skeleton view using your own **Payment**\nmodel.\n\nThis model has must have at least the following attributes: - **code**:\nsale code given by our system. - **operation_number**: bank operation\nnumber. - **status**: status of the payment: “paid”, “pending”\n(**pending** is mandatory) or “canceled”. - **amount**: amount to be\ncharged.\n\nAnd the following methods: - **online_confirm**: mark the payment as\npaid.\n\nIntegration examples\n-----------------------\n\n-  ``djshop``\n\nNeeded views\n--------------\n\nSale summary view\n------------------\n\n.. code:: python\n\n    def payment_summary(request, payment_id):\n        \"\"\"\n        Load a Payment object and show a summary of its contents to the user.\n        \"\"\"\n\n        payment = get_object_or_404(Payment, id=payment_id, status=\"pending\")\n        replacements = {\n            \"payment\": payment,\n            # ...\n        }\n        return render(request, '<sale summary template path>', replacements)\n\nNote that this payment summary view should load a JS file called\n**set_payment_attributes.js**.\n\nThis file is needed to set initial payment attributes according to which\nbank have the user selected.\n\nPayment_confirm view\n-------------------------\n\n.. code:: python\n\n    @csrf_exempt\n    def payment_confirmation(request, virtualpos_type):\n    \t\"\"\"\n    \tThis view will be called by the bank.\n    \t\"\"\"\n    \t# Directly call to confirm_payment view\n\n    \t# Or implement the following actions\n\n    \t# Checking if the Point of Sale exists\n    \tvirtual_pos = VirtualPointOfSale.receiveConfirmation(request, virtualpos_type=virtualpos_type)\n\n    \tif not virtual_pos:\n    \t\t# The VPOS does not exist, inform the bank with a cancel\n    \t\t# response if needed\n    \t\treturn VirtualPointOfSale.staticResponseNok(virtualpos_type)\n\n    \t# Verify if bank confirmation is indeed from the bank\n    \tverified = virtual_pos.verifyConfirmation()\n    \toperation_number = virtual_pos.operation.operation_number\n\n    \twith transaction.atomic():\n    \t\ttry:\n    \t\t\t# Getting your payment object from operation number\n    \t\t\tpayment = Payment.objects.get(operation_number=operation_number, status=\"pending\")\n    \t\texcept Payment.DoesNotExist:\n    \t\t\treturn virtual_pos.responseNok(\"not_exists\")\n\n    \t\tif verified:\n    \t\t\t# Charge the money and answer the bank confirmation\n    \t\t\ttry:\n    \t\t\t\tresponse = virtual_pos.charge()\n    \t\t\t\t# Implement the online_confirm method in your payment\n    \t\t\t\t# this method will mark this payment as paid and will\n    \t\t\t\t# store the payment date and time.\n    \t\t\t\tpayment.online_confirm()\n    \t\t\texcept VPOSCantCharge as e:\n    \t\t\t\treturn virtual_pos.responseNok(extended_status=e)\n    \t\t\texcept Exception as e:\n    \t\t\t\treturn virtual_pos.responseNok(\"cant_charge\")\n\n    \t\telse:\n    \t\t\t# Payment could not be verified\n    \t\t\t# signature is not right\n    \t\t\tresponse = virtual_pos.responseNok(\"verification_error\")\n\n    \t\treturn response\n\nPayment ok view\n-------------------------\n\n.. code:: python\n\n    def payment_ok(request, sale_code):\n        \"\"\"\n        Informs the user that the payment has been made successfully\n        :param payment_code: Payment code.\n        :param request: request.\n        \"\"\"\n\n        # Load your Payment model given its code\n        payment =  get_object_or_404(Payment, code=sale_code, status=\"paid\")\n\n        context = {'pay_status': \"Done\", \"request\": request}\n        return render(request, '<payment_ok template>', {'context': context, 'payment': payment})\n\nPayment cancel view\n--------------------\n\n.. code:: python\n\n    def payment_cancel(request, sale_code):\n        \"\"\"\n        Informs the user that the payment has been canceled\n        :param payment_code: Payment code.\n        :param request: request.\n        \"\"\"\n\n        # Load your Payment model given its code\n        payment =  get_object_or_404(Payment, code=sale_code, status=\"pending\")\n        # Mark this payment as canceled\n        payment.cancel()\n\n        context = {'pay_status': \"Done\", \"request\": request}\n        return render(request, '<payment_canceled template>', {'context': context, 'payment': payment})\n\n\nRefund view\n-----------\n\n.. code:: python\n\n    def refund(request, tpv, payment_code, amount, description):\n      \t\"\"\"\n      \t:param request:\n      \t:param tpv: TPV Id\n      \t:param payment_code: Payment code\n      \t:param amount: Refund Amount (Example 10.89).\n      \t:param description: Description of refund cause.\n      \t:return:\n      \t\"\"\"\n\n      \tamount = Decimal(amount)\n\n      \ttry:\n      \t\t# Checking if the Point of Sale exists\n      \t\ttpv = VirtualPointOfSale.get(id=tpv)\n      \t\t# Checking if the Payment exists\n      \t\tpayment = Payment.objects.get(code=payment_code, state=\"paid\")\n\n      \texcept Payment.DoesNotExist as e:\n      \t\treturn http_bad_request_response_json_error(message=u\"Does not exist payment with code {0}\".format(payment_code))\n\n      \trefund_status = tpv.refund(payment_code, amount, description)\n\n      \tif refund_status:\n      \t\tmessage = u\"Refund successful\"\n      \telse:\n      \t\tmessage = u\"Refund with erros\"\n\n      \treturn http_response_json_ok(message)\n\nAuthors\n===============\n\n- Mario Barchéin marioREMOVETHIS@REMOVETHISintelligenia.com\n- Diego J. Romero diegoREMOVETHIS@REMOVETHISintelligenia.com\n\nRemove REMOVETHIS to contact the authors.\n\n\n.. _MIT LICENSE: LICENSE\n.. _Paypal: https://www.paypal.com/\n.. _Bitpay: http://bitpay.com\n.. _CECA: http://www.cajasdeahorros.es/\n.. _RedSyS: http://www.redsys.es/\n.. _Santander Elavon: https://www.santanderelavon.com/\n.. _Django: https://pypi.python.org/pypi/django\n.. _BeautifulSoup4: https://pypi.python.org/pypi/beautifulsoup4\n.. _lxml: https://pypi.python.org/pypi/lxml\n.. _pycrypto: https://pypi.python.org/pypi/pycrypto\n.. _Pytz: https://pypi.python.org/pypi/pytz\n.. _Requests: https://pypi.python.org/pypi/requests\n.. _manual: manual/COMMON.md\n.. _djshop: https://github.com/diegojromerolopez/djshop",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/intelligenia/django-virtual-pos",
    "keywords": "virtual,point-of-sale,puchases,online,payments",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-virtual-pos",
    "package_url": "https://pypi.org/project/django-virtual-pos/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-virtual-pos/",
    "project_urls": {
      "Homepage": "https://github.com/intelligenia/django-virtual-pos"
    },
    "release_url": "https://pypi.org/project/django-virtual-pos/1.6.12/",
    "requires_dist": null,
    "requires_python": ">=2.7.0",
    "summary": "django-virtual-pos is a module that abstracts the flow of paying in several online payment platforms.",
    "version": "1.6.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7059276,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ded79fa3ed7e27f8015c31f32b82f22f4b64888191b1ef9104d6e441a829bb0d",
        "md5": "fb9bc0ca7897314df2e74c76ca57182b",
        "sha256": "0e7f90b823a2f51bb4ce7fe73cd95bc1811571820683aad1539f14a0749c5212"
      },
      "downloads": -1,
      "filename": "django-virtual-pos-1.6.12.tar.gz",
      "has_sig": false,
      "md5_digest": "fb9bc0ca7897314df2e74c76ca57182b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7.0",
      "size": 54469,
      "upload_time": "2020-04-20T10:57:53",
      "upload_time_iso_8601": "2020-04-20T10:57:53.139135Z",
      "url": "https://files.pythonhosted.org/packages/de/d7/9fa3ed7e27f8015c31f32b82f22f4b64888191b1ef9104d6e441a829bb0d/django-virtual-pos-1.6.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}