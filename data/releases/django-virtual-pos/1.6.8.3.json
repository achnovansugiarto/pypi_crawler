{
  "info": {
    "author": "intelligenia",
    "author_email": "mario@intelligenia.es",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License"
    ],
    "description": "django-virtual-pos\n==================\n\nDjango module that abstracts the flow of several virtual points of sale\nincluding PayPal\n\nWhat’s this?\n============\n\nThis module abstracts the use of the most used virtual points of sale in\nSpain.\n\nLicense\n=======\n\n`MIT LICENSE`_.\n\nImplemented payment methods\n===========================\n\nPaypal\n~~~~~~\n\n`Paypal`_ paypal payment available.\n\nBitpay\n~~~~~~\n\n`Bitpay`_ bitcoin payments, from wallet to checkout\n\nSpanish Virtual Points of Sale\n------------------------------\n\nCeca\n~~~~\n\n`CECA`_ is the Spanish confederation of savings banks.\n\nRedSyS\n~~~~~~\n\n`RedSyS`_ gives payment services to several Spanish banks like CaixaBank\nor Caja Rural.\n\nSantander Elavon\n~~~~~~~~~~~~~~~~\n\n`Santander Elavon`_ is one of the payment methods of the Spanish bank\nSantander.\n\nRequirements and Installation\n=============================\n\nRequirements\n------------\n\n-  Python 2.7 (Python 3 not tested, contributors wanted!)\n-  `Django`_\n-  `BeautifulSoup4`_\n-  `lxml`_\n-  `pycrypto`_\n-  `Pytz`_\n-  `Requests`_\n\nType:\n\n.. code:: sh\n\n    $ pip install django beautifulsoup4 lxml pycrypto pytz\n\nInstallation\n------------\n\nFrom PyPi\n~~~~~~~~~\n\n.. code:: sh\n\n    $ pip install django-virtual-pos\n\nFrom master branch\n~~~~~~~~~~~~~~~~~~\n\nMaster branch will allways contain a working version of this module.\n\n.. code:: sh\n\n    $ pip install git+git://github.com/intelligenia/django-virtual-pos.git\n\nsettings.py\n~~~~~~~~~~~\n\nAdd the application djangovirtualpos to your settings.py:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        # ...\n        \"djangovirtualpos\",\n    )\n\nUse\n===\n\nSee this `manual`_ (currently only in Spanish).\n\nNeeded models\n-------------\n\nYou will need to implement this skeleton view using your own **Payment**\nmodel.\n\nThis model has must have at least the following attributes: - **code**:\nsale code given by our system. - **operation_number**: bank operation\nnumber. - **status**: status of the payment: “paid”, “pending”\n(**pending** is mandatory) or “canceled”. - **amount**: amount to be\ncharged.\n\nAnd the following methods: - **online_confirm**: mark the payment as\npaid.\n\nIntegration examples\n--------------------\n\n-  `djshop`_\n\nNeeded views\n------------\n\nSale summary view\n~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    def payment_summary(request, payment_id):\n        \"\"\"\n        Load a Payment object and show a summary of its contents to the user.\n        \"\"\"\n\n        payment = get_object_or_404(Payment, id=payment_id, status=\"pending\")\n        replacements = {\n            \"payment\": payment,\n            # ...\n        }\n        return render(request, '<sale summary template path>', replacements)\n\nNote that this payment summary view should load a JS file called\n**set_payment_attributes.js**.\n\nThis file is needed to set initial payment attributes according to which\nbank have the user selected.\n\nPayment_confirm view\n~~~~~~~~~~~~~~~~~~~~\n\n\\````python @csrf_exempt def payment_confirmation(request,\nvirtualpos_typ\n\n.. _MIT LICENSE: LICENSE\n.. _Paypal: https://www.paypal.com/\n.. _Bitpay: http://bitpay.com\n.. _CECA: http://www.cajasdeahorros.es/\n.. _RedSyS: http://www.redsys.es/\n.. _Santander Elavon: https://www.santanderelavon.com/\n.. _Django: https://pypi.python.org/pypi/django\n.. _BeautifulSoup4: https://pypi.python.org/pypi/beautifulsoup4\n.. _lxml: https://pypi.python.org/pypi/lxml\n.. _pycrypto: https://pypi.python.org/pypi/pycrypto\n.. _Pytz: https://pypi.python.org/pypi/pytz\n.. _Requests: https://pypi.python.org/pypi/requests\n.. _manual: manual/COMMON.md\n.. _djshop: https://github.com/diegojromerolopez/djshop",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/intelligenia/django-virtual-pos",
    "keywords": "virtual,point-of-sale,puchases,online,payments",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-virtual-pos",
    "package_url": "https://pypi.org/project/django-virtual-pos/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-virtual-pos/",
    "project_urls": {
      "Homepage": "https://github.com/intelligenia/django-virtual-pos"
    },
    "release_url": "https://pypi.org/project/django-virtual-pos/1.6.8.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "django-virtual-pos is a module that abstracts the flow of paying in several online payment platforms.",
    "version": "1.6.8.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7059276,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "824202170ad1a73c2aa236f02bdebfc8577920bfefd779297e564efd2c6f07ee",
        "md5": "73b28e7578f7d00fec463abc6872cffc",
        "sha256": "7235df3e41eafdc6821901e10c73cc8e1c6bf43701b85c0e5de93906641e4b7d"
      },
      "downloads": -1,
      "filename": "django-virtual-pos-1.6.8.3.tar.gz",
      "has_sig": false,
      "md5_digest": "73b28e7578f7d00fec463abc6872cffc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 58221,
      "upload_time": "2018-02-19T14:52:15",
      "upload_time_iso_8601": "2018-02-19T14:52:15.648285Z",
      "url": "https://files.pythonhosted.org/packages/82/42/02170ad1a73c2aa236f02bdebfc8577920bfefd779297e564efd2c6f07ee/django-virtual-pos-1.6.8.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}