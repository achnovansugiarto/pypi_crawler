{
  "info": {
    "author": "intelligenia S.L.",
    "author_email": "diego@intelligenia.es",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License"
    ],
    "description": "django-virtual-pos\n==================\n\nDjango module that abstracts the flow of several virtual points of sale\nincluding PayPal\n\nWhat's this?\n============\n\nThis module abstracts the use of the most used virtual points of sale in\nSpain.\n\nLicense\n=======\n\n`MIT LICENSE <LICENSE>`__.\n\nImplemented payment methods\n===========================\n\nPayPal\n------\n\nEasy integration with PayPal.\n\nSpanish Virtual Points of Sale\n------------------------------\n\nCeca\n~~~~\n\n`CECA <http://www.cajasdeahorros.es/>`__ is the Spanish confederation of\nsavings banks.\n\nRedSyS\n~~~~~~\n\n`RedSyS <http://www.redsys.es/>`__ gives payment services to several\nSpanish banks like CaixaBank or Caja Rural.\n\nSantander Elavon\n~~~~~~~~~~~~~~~~\n\n`Santander Elavon <https://www.santanderelavon.com/>`__ is one of the\npayment methods of the Spanish bank Santander.\n\nRequirements and Installation\n=============================\n\nRequirements\n------------\n\n-  Python 2.7 (Python 3 not tested, contributors wanted!)\n-  `Django <https://pypi.python.org/pypi/django>`__\n-  `BeautifulSoup4 <https://pypi.python.org/pypi/beautifulsoup4>`__\n-  `lxml <https://pypi.python.org/pypi/lxml>`__\n-  `pycrypto <https://pypi.python.org/pypi/pycrypto>`__\n-  `Pytz <https://pypi.python.org/pypi/pytz>`__\n\nType:\n\n.. code:: sh\n\n    $ pip install django beautifulsoup4 lxml pycrypto pytz\n\nInstallation\n------------\n\nFrom PyPi\n~~~~~~~~~\n\n.. code:: sh\n\n    $ pip install django-virtual-pos\n\nFrom master branch\n~~~~~~~~~~~~~~~~~~\n\nMaster branch will allways contain a working version of this module.\n\n.. code:: sh\n\n    $ pip install git+git://github.com/intelligenia/django-virtual-pos.git\n\nsettings.py\n~~~~~~~~~~~\n\nAdd the application djangovirtualpos to your settings.py:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        # ...\n        \"djangovirtualpos\",\n    )\n\nUse\n===\n\nSee this `manual <manual/COMMON.md>`__ (currently only in Spanish).\n\nNeeded models\n-------------\n\nYou will need to implement this skeleton view using your own **Payment**\nmodel.\n\nThis model has must have at least the following attributes: - **code**:\nsale code given by our system. - **operation\\_number**: bank operation\nnumber. - **status**: status of the payment: \"paid\", \"pending\" or\n\"canceled\". - **amount**: amount to be charged.\n\nAnd the following methods: - **online\\_confirm**: mark the payment as\npaid.\n\nNeeded views\n------------\n\nSale summary view\n~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    def payment_summary(request, payment_id):\n        \"\"\"\n        Load a Payment object and show a summary of its contents to the user.\n        \"\"\"\n\n        payment = get_object_or_404(Payment, id=payment_id, status=\"pending\")\n        replacements = {\n            \"payment\": payment,\n            # ...\n        }\n        return render(request, '<sale summary template path>', replacements)\n\nNote that this payment summary view should load a JS file called\n**set\\_payment\\_attributes.js**.\n\nThis file is needed to set initial payment attributes according to which\nbank have the user selected.\n\nPayment\\_confirm view\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    @csrf_exempt\n    def payment_confirmation(request, virtualpos_type):\n        \"\"\"\n        This view will be called by the bank.\n        \"\"\"\n\n        # Checking if the Point of Sale exists\n        virtual_pos = VirtualPointOfSale.receiveConfirmation(request, virtualpos_type=virtualpos_type)\n\n        if not virtual_pos:\n            # The VPOS does not exist, inform the bank with a cancel\n            # response if needed\n            return VirtualPointOfSale.staticResponseNok(virtualpos_type)\n\n        # Verify if bank confirmation is indeed from the bank\n        verified = virtual_pos.verifyConfirmation()\n        operation_number = virtual_pos.operation.operation_number\n\n        with transaction.atomic():\n            try:\n                # Getting your payment object from operation number\n                payment = Payment.objects.get(operation_number=operation_number, status=\"pending\")\n            except Payment.DoesNotExist:\n                return virtual_pos.responseNok(\"not_exists\")\n\n            if verified:\n                # Charge the money and answer the bank confirmation\n                try:\n                    response = virtual_pos.charge()\n                    # Implement the online_confirm method in your payment\n                    # this method will mark this payment as paid and will\n                    # store the payment date and time.\n                    payment.online_confirm()\n                except VPOSCantCharge as e:\n                    return virtual_pos.responseNok(extended_status=e)\n                except Exception as e:\n                    return virtual_pos.responseNok(\"cant_charge\")\n\n            else:\n                # Payment could not be verified\n                # signature is not right\n                response = virtual_pos.responseNok(\"verification_error\")\n\n            return response\n\nPayment ok view\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    def payment_ok(request, sale_code):\n        \"\"\"\n        Informs the user that the payment has been made successfully\n        :param payment_code: Payment code.\n        :param request: request.\n        \"\"\"\n\n        # Load your Payment model given its code\n        payment =  get_object_or_404(Payment, code=sale_code, status=\"paid\")\n\n        context = {'pay_status': \"Done\", \"request\": request}\n        return render(request, '<payment_ok template>', {'context': context, 'payment': payment})\n\nPayment cancel view\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    def payment_cancel(request, sale_code):\n        \"\"\"\n        Informs the user that the payment has been canceled\n        :param payment_code: Payment code.\n        :param request: request.\n        \"\"\"\n\n        # Load your Payment model given its code\n        payment =  get_object_or_404(Payment, code=sale_code, status=\"pending\")\n        # Mark this payment as canceled\n        payment.cancel()\n\n        context = {'pay_status': \"Done\", \"request\": request}\n        return render(request, '<payment_canceled template>', {'context': context, 'payment': payment})\n\nAuthors\n=======\n\n-  Mario Barch√©in marioREMOVETHIS@REMOVETHISintelligenia.com\n-  Diego J. Romero diegoREMOVETHIS@REMOVETHISintelligenia.com\n\nRemove REMOVETHIS to contact the authors.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/intelligenia/django-virtual-pos",
    "keywords": "virtual point-of-sale puchases online payments",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-virtual-pos",
    "package_url": "https://pypi.org/project/django-virtual-pos/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-virtual-pos/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/intelligenia/django-virtual-pos"
    },
    "release_url": "https://pypi.org/project/django-virtual-pos/1.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "django-virtual-post is a module that abstracts the flow of paying in several virtual points of sale.",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7059276,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1e1f84253388743a9e5c7e2f4adc1cdfe419a9ac6b088b132b538098e2ca039",
        "md5": "c04d1d5331d6b884c9dcdbe883e8b72f",
        "sha256": "975a8bd1409522b26554a39d2e45c26ec9380f1ef7fdf6e88c8cc307724bfddc"
      },
      "downloads": -1,
      "filename": "django-virtual-pos-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "c04d1d5331d6b884c9dcdbe883e8b72f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1900027,
      "upload_time": "2017-03-14T11:55:00",
      "upload_time_iso_8601": "2017-03-14T11:55:00.824281Z",
      "url": "https://files.pythonhosted.org/packages/a1/e1/f84253388743a9e5c7e2f4adc1cdfe419a9ac6b088b132b538098e2ca039/django-virtual-pos-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}