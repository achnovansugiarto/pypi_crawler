{
  "info": {
    "author": "Will Carhart",
    "author_email": "wcarhart@sandiego.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# locksmith\n*Your liaison between repository secrets and the great beyond.*\n\n## Overview\n`locksmith` acts as an interface between secrets and the Python code using them.\n\n### Use case\nConsider the following scenario: *Your cool new app requires a slick, unique API key to run. Perhaps your framework requires you to put this API key in a `manifest.json` or `AppDelegate` file. However, your manifest file(s) need to be checked into GitHub, thus exposing your precious API key. `locksmith` provides a layer of security to prevent you from having to type out your secrets in plaintext anywhere in your repository.*\n\n### How it works\n`locksmith` uses [`GnuPG`](https://www.gnupg.org/) to encrypt your secrets. Each user in your repository can have their own secrets, either shared among many or unique to each user. Then, `locksmith` exposes a simple API to access your secrets in code, rather than typing out something like `API_KEY = \"something_that_shouldn't_be_shared\"`.\n\n## Installation\nInstall with `pip`:\n```\npip3 install locksmith\n```\nAlso, make sure you have `gpg` installed. You can use [`Homebrew`](https://brew.sh/):\n```\nbrew install gpg\n```\nIf you'd like to use `pinentry` too and you're using a Mac, install `pinentry-mac`:\n```\nbrew install pinentry-mac\n```\n\n## Setup and Background\nFirst, decide on who's going to be using your secrets. `locksmith` looks for secrets based on users, which are programmer-defined. For example, if I was the only user of my repo, the only user would be `wcarhart`. However, perhaps you're collaborating on a repo, where you'd have two users, such as `wcarhart` and `friend_user`. Or, perhaps you're collaborating on a repo but you'd only like to use one joint user for `locksmith`, such as `locksmith_user`.\n\nIf you have one user, `locksmith_user`, add the following file `locksmith_user.lcksmth` to your repository (but do NOT check it into version control!):\n```\nsecret0=secret_value0\nsecret1=secret_value1\n...\nsecretN=secret_valueN\n```\nAn example of this file with actual values could be:\n```\nAPI_KEY=3eWhJtewSr0sSshNX9STOLUV1nGtFznxQM8UfyYH\nDATABASE_USER=admin\nDATABASE_AUTH=password\n```\nIf you named this file `locksmith_user.lcksmth`, then these secrets will be available to the user `locksmith_user`, or to any user that knows `locksmith_user`'s password.\n\nNow, encrypt the file using `gpg`:\n```\ngpg -c locksmith_user.lcksmth\n```\nEnter a desired password. This will produce a file `locksmith_user.lcksmth.gpg`. You can now safely check this into your version control.\n\n## Usage and API\n### Usage\nFirst, make sure to include `locksmith` in your Python code:\n```\nfrom locksmith import Locksmith\n```\nThen, make a `Locksmith` object based on what user(s) you have defined:\n```\nl = Locksmith(\"locksmith_user\")\n```\nWhen the above line is executed, you will be prompted for `locksmith_user`'s password. This will happen only when you instatiate a new `Locksmith` object and not every time you access a secret.\n\n### API\n*`locksmith` exposes the following API for you to use:*\n#### `get_secret(parameter)`\nThe `get_secret` function allows you to get a specific secret, specified by `parameter`. Use it like this:\n```\nsecret_value = l.get_secret(\"API_KEY\")\n```\nIf you pass in an invalid `parameter`, `locksmith` will raise a `ValueError` or `LookupError`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wcarhart/locksmith",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "locksmith",
    "package_url": "https://pypi.org/project/locksmith/",
    "platform": "",
    "project_url": "https://pypi.org/project/locksmith/",
    "project_urls": {
      "Homepage": "https://github.com/wcarhart/locksmith"
    },
    "release_url": "https://pypi.org/project/locksmith/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Your liaison between repository secrets and the great beyond.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4903138,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e15ea7190ecec4e88bf09dd821bfea03fc57613d4f2b3995bddcb342f1e6953",
        "md5": "9e1bba734a1e96b34572d541a304bf3b",
        "sha256": "a3f4f455c3932a8c519c5a30e3b0ef8cf8fa51ef23c84a37339d2e681ce09447"
      },
      "downloads": -1,
      "filename": "locksmith-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9e1bba734a1e96b34572d541a304bf3b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4380,
      "upload_time": "2019-03-06T01:32:39",
      "upload_time_iso_8601": "2019-03-06T01:32:39.511015Z",
      "url": "https://files.pythonhosted.org/packages/1e/15/ea7190ecec4e88bf09dd821bfea03fc57613d4f2b3995bddcb342f1e6953/locksmith-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}