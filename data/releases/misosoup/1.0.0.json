{
  "info": {
    "author": "Nicolas Ochsner",
    "author_email": "nicolas.ochsner@env.ethz.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MiSoS(oup)\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nMinimal Supplying Community Search (`misosoup`) is a command line tool that\nsearches for minimal microbial communities. These are communities in which every\nmember is required for the community to persist. `misosoup` can be used for two\nmajor objectives: (1) Find minimal communities in a given medium or (2) Find\nminimal supplying communities in a medium; these are the minimal communities\nrequired for growth of a strain (or species) of interest, that we refer to as\nthe focal strain.\n\nAs input `misosoup` takes a set of genome-scale metabolic models; one for each\nstrain (species) that will be considered as potential community members. The\ntool will then execute a series of constraint-based optimizations to find\nminimal communities. For the computation of the solutions metabolic steady-state\nis assumed (as in Flux Balance Analysis). Once computed, community members,\ntheir respective growth rates and there metabolic consumption and secretion will\nbe reported in a human-readable and parsable format.\n\n## Details\n\nTo find minimal microbial communities `misosoup` solves a repeated sequence of\noptimization problems using MILP formulations:\n\n1. Minimize the number of community member (see Zelezniak, et al. PNAS\n   doi:10.1073/pnas.1421834112)\n2. Fix the active community members and optimize growth of the total community\n   biomass. If this fails, exclude the community from the possible solutions and\n   repeat.\n3. Optionally: Execute a third optimization to reflect parsimonious enzyme usage\n   (see Lewis, et al. Mol Syst Bio doi:10.1038/msb.2010.47)\n\n## Install MiSoS(soup)\n\n```bash\npip install misosoup\n```\n\nIf you are unable to install `gurobipy`, it may need to be installed manually\ne.g. on a hpc cluster, to make use of the local gurobi installation. In such\na case please refer to the instructions on the cluster support page.\n\n## Usage\n\nAfter installation, you can easily use `misosoup` with:\n\n```bash\nmisosoup MODEL_PATH/*.xml --output OUTPUT_FILE --media MEDIA_FILE --strain STRAIN\n```\n\n### Arguments\n\n* MODEL_PATH: indicates the path to the directory where the metabolic models are\n  described. Strains with metabolic models included in this directory will be\n  considered as potential members in the minimal communities. The models should\n  be in sbml format and follow the same naming conventions (e.g. if glucose's id\n  in one model is 'glc__D', the same id should be used in the other models).\n* --output\n  * Use OUTPUT_FILE for output in yaml format. If it is not given, the results\n    will be printed to stdout.\n* --media\n  * Load media from MEDIA_FILE. The file should contain the description of the\n    growth media that shall be tested. The file should contain a dictionary with\n    all media that the community should be evaluated on. Each of the media needs\n    to contain a dictionary of exchange reactions and there lower bound, (i.e.\n    `R_EX_ac_e: -10` provides *acetate* to the communities). The medium with id\n    `base_medium` will be added to all media.\n* --strain\n  * Indicates the focal STRAIN model id. If no strain is provided, `misosoup`\n    computes minimal communities.\n\n## Additional arguments\n\n`misosoup` can be used with the additional arguments:\n\n```bash\nmisosoup MODEL_PATH/*.xml --output OUTPUT_FILE --media MEDIA_FILE --strain STRAIN --parsimony --community-size COMMUNITY_SIZE --minimal-growth MINIMAL_GROWTH --exchange-format EXCHANGE_FORMAT --validate --log LOG\n```\n\n* --parsimony\n  * If this flag is used the algorithm will return the solution that minimizes\n    the total flux. This does not affect the community members but can alter\n    what each member consumes and secretes.\n* --community-size\n  * Look for communities up to size COMMUNITY_SIZE, then stop.\n* --minimal-growth\n  * Set the MINIMAL_GROWTH rate of strains. Every strain that makes up a\n    community needs to satisfy this minimal growth constraint. The default\n    growth rate used is 0.01 (1/h).\n\nFor further description:\n\n```bash\nmisosoup --help\n```\n\n## Output file\n\nThe .yaml output file will give:\n\n* The community members: `y_<STRAIN_NAME>: 1.0`.\n* The growth of each community member `Growth_<STRAIN_NAME>`.\n* The total community growth `community_growth`.\n* The flux at which metabolites are taken up or secreted to the medium. Negative\n  and positive fluxes indicate consumption and secretion, respectively. This\n  consumption/secretion pattern is given for:\n  * The community as a whole: (`R_EX_<ID>_e`)\n  * Each community member separately (`R_EX_<ID>_<STRAIN_NAME>_i`).  \n\n## Example\n\n```bash\ncd example\n```\n\nThe following code will run `misosoup` to find minimal supplying communities for\nA1R12 in a medium that contains acetate as carbon source:\n\n```bash\nmisosoup ./strains/*.xml --output ./example_output.yaml --media medium_MBM_no_co2_hco3.yaml --strain A1R12 --parsimony \n```\n\nIn the example, we run `misosoup` to find minimal supplying communities that\nwould allow growth of A1R12 in MBM with acetate (ac) as the sole source of\ncarbon. Looking at the output of the simulation (example_output.yaml) you'll see\nthat `misosoup` found two alternative supplying communities:\n\n* Solution 1: A1R12 can grow when in the presence of I3M07. If we inspect this\n  solution in more detail we can see (for example):\n  * Each strain produces carbon dioxide. We note this by looking at the\n    strain-specific carbon dioxide fluxes: `R_EX_co2_e_A1R12_i: 0.742` and\n    `R_EX_co2_e_I3M07_i: 0.957`.\n  * The community as a whole also produces carbon dioxide, which can be seen\n    looking at the community-level carbon dioxide flux `R_EX_co2_e: 1.699`.\n* Solution 2: A1R12 can grow when in the presence of I2R16. A similar analysis\n  to the one conducted for solution 1 could be followed.\n\n## Citation\n\nIf you use misosoup, please cite X.\n\n## Workflows\n\n`snakemake` is a useful tool to execute many experiments and gather results.\nSee [`misosoup` Workflow Template](https://gitlab.ethz.ch/ochsnern/misosoup_workflow_template)\non how to use it.\n\n## Development\n\nAdd here some information for developers on how the repo is structured or a basic description of the main scripts.\n\nMIT License\n\nCopyright (c) 2021 Nicolas Ochsner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sirno/misosoup",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "misosoup",
    "package_url": "https://pypi.org/project/misosoup/",
    "platform": "",
    "project_url": "https://pypi.org/project/misosoup/",
    "project_urls": {
      "Homepage": "https://github.com/sirno/misosoup"
    },
    "release_url": "https://pypi.org/project/misosoup/1.0.0/",
    "requires_dist": [
      "reframed (>=1.2.1)",
      "gurobipy",
      "pyyaml",
      "pandas",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "<3.10,>=3.7",
    "summary": "",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16957903,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a05bde42ae0fe3ec0803200d39bc827b863f9f0453b4b6f86fe1b4c2a872eb8",
        "md5": "5d4e384b7743ecbbd6765790fb8b5608",
        "sha256": "54e7b51821963c88a53e6756c885784e0ff14b586af44aa0b0c9795477e6de42"
      },
      "downloads": -1,
      "filename": "misosoup-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5d4e384b7743ecbbd6765790fb8b5608",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<3.10,>=3.7",
      "size": 18256,
      "upload_time": "2021-12-23T13:37:10",
      "upload_time_iso_8601": "2021-12-23T13:37:10.776052Z",
      "url": "https://files.pythonhosted.org/packages/8a/05/bde42ae0fe3ec0803200d39bc827b863f9f0453b4b6f86fe1b4c2a872eb8/misosoup-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbede663ca14d056e93c26363b2015e6e6f0ff3cff0f2923f7b4ec0d4096f7e2",
        "md5": "f7ab1065e1b43f46a66cdca515c37b6f",
        "sha256": "58c9cbcd394dfbb21e4561955a127043988379a064a9115667ef25179535d8be"
      },
      "downloads": -1,
      "filename": "misosoup-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f7ab1065e1b43f46a66cdca515c37b6f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<3.10,>=3.7",
      "size": 17250,
      "upload_time": "2021-12-23T13:37:12",
      "upload_time_iso_8601": "2021-12-23T13:37:12.627526Z",
      "url": "https://files.pythonhosted.org/packages/cb/ed/e663ca14d056e93c26363b2015e6e6f0ff3cff0f2923f7b4ec0d4096f7e2/misosoup-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}