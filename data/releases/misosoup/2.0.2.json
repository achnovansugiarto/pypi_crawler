{
  "info": {
    "author": "Nicolas Ochsner",
    "author_email": "nicolas.ochsner@env.ethz.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MiSoS(oup)\n\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![PyPI version](https://badge.fury.io/py/misosoup.svg)](https://badge.fury.io/py/misosoup)\n\nMinimal Supplying Community Search (`misosoup`) is a command line tool that\nsearches for minimal microbial communities --- where every member is required\nfor the community to persist in a medium. `misosoup` can be used for two major\nobjectives: (1) Find minimal communities in a given medium or (2) Find minimal\n_supplying_ communities in a medium; where every member is required for growth\nof a strain / species of interest (focal strain).\n\nAs input `misosoup` takes a set of genome-scale metabolic models; one for each\nstrain / species that will be considered as potential community member. The tool\nwill then execute a series of constraint-based optimizations to find minimal\ncommunities. For the computation of the solutions it is assumed a metabolic steady-state \n (as in Flux Balance Analysis) but no optimization criteria are required (although\n can be optionally applied). Once computed, community members, their\nrespective growth rates and there metabolic consumption and secretion will be\nreported in a human-readable and parseable format.\n\n## Details\n\n\nTo find minimal microbial communities `misosoup` solves a repeated sequence of\noptimization problems using MILP formulations:\n\n1. Minimize the number of community member (see Zelezniak, et al. PNAS\n   doi:10.1073/pnas.1421834112)\n2. Fix the active community members and check the feasibility of the entire community.\n3. Optionally: Optimize growth of the total community biomass.\n4. Optionally: Perform an optimization to reflect parsimonious enzyme usage\n   (see Lewis, et al. Mol Syst Bio doi:10.1038/msb.2010.47)\n\n## Install MiSoS(soup)\n\n`misosoup` requires a version of Python >3.7 and <3.10 (it will be compatible with 3.10 soon).\n\nThe latest stable version of `misosoup` is available through `pip` and hence it can easily installed executing:\n\n```bash\npip install misosoup\n```\n\n### Dependencies\n\n* `misosoup` uses the `Guroby` optimizer that is free for academic use but it\n  requires a license.\n* Academic licenses can be obtained on the\n  [gurobi license page](https://www.gurobi.com/academia/academic-program-and-licenses/)\n* To retrieve a license, the `grbgetkey` command is needed. The command is not\n  provided with `gurobipy` when installed through pip. Please download the full\n  gurobi version on their website and install gurobi with their installer.\n\n### Notes\n\n* If you are unable to install `gurobipy`, it may need to be installed manually\ne.g. on a hpc cluster, to make use of the local gurobi installation. In such\na case please refer to the instructions on the cluster support page.\n\n * If `misosoup` requirements are not those of your local installation, you may consider installing it within a [conda environment](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html). Once you have `anaconda` installed in your computer you create an environment:\n \n```bash\nconda create --name misosoup --channel gurobi python=3.9 gurobi\n```\n then you activate it:\n \n```bash\nconda activate misosoup\n``` \n\nand finally you can install `misosoup` within that environment.  \n \n```bash\npip install misosoup\n```\n\nBy default, `pip` installation comes with a free-trial license. Once you obtain your academic license, you want to substitute the free license with the academic one. Search in the anaconda environment the license file:\n\n```bash\nfind $path_misosoup_environment -iname '*gurobi.lic'\n```\n\nWhich will return the $path_free_license. Now simply overwrite the free license by the academic one:\n\n```bash\ncp $path_academic_license $path_free_license\n```\n\n## Usage\n\nAfter installation, you can easily use `misosoup` with:\n\n```bash\nmisosoup MODEL_PATH/*.xml --output OUTPUT_FILE --media MEDIA_FILE --strain STRAIN\n```\n\n### Arguments\n\n* MODEL_PATH: indicates the path to the directory where the metabolic models are\n  described. Strains with metabolic models included in this directory will be\n  considered as potential members in the minimal communities. The models should\n  be in sbml format and follow the same naming conventions (e.g. if glucose's id\n  in one model is 'glc__D', the same id should be used in the other models).\n* --output\n  * Use OUTPUT_FILE for output in yaml format. If it is not given, the results\n    will be printed to stdout.\n* --media\n  * Load media from MEDIA_FILE. The file should contain the description of the\n    growth media that shall be tested. The file should contain a dictionary with\n    all media that the community should be evaluated on. Each of the media needs\n    to contain a dictionary of exchange reactions and there lower bound, (i.e.\n    `R_EX_ac_e: -10` provides _acetate_ to the communities). The medium with id\n    `base_medium` will be added to all media.\n* --strain\n  * Indicates the focal STRAIN model id. If no strain is provided, `misosoup`\n    computes minimal communities.\n\n## Additional arguments\n\n`misosoup` can be used with the additional arguments:\n\n```bash\nmisosoup MODEL_PATH/*.xml --output OUTPUT_FILE --media MEDIA_FILE --strain STRAIN --parsimony --community-size COMMUNITY_SIZE --minimal-growth MINIMAL_GROWTH --exchange-format EXCHANGE_FORMAT --validate --log LOG\n```\n\n* `--parsimony`\n    * If this flag is used the algorithm will return the solution that minimizes\n    the total flux. This does not affect the community members but can alter\n    what each member consumes and secretes.\n* `--community-size`\n    * Instead of looking for all communities, find all communities up to size\n    COMMUNITY_SIZE\n* `--minimal-growth`\n    * Set the MINIMAL_GROWTH rate of strains. Every strain that makes up a\n    community needs to satisfy this minimal growth constraint. The default\n    growth rate used is 0.01 (1/h).\n\nFor further description:\n\n```bash\nmisosoup --help\n```\n\n## Output file\n\nThe .yaml output file will give:\n\n* The community members: `y_<STRAIN_NAME>: 1.0`.\n* The growth of each community member `Growth_<STRAIN_NAME>`.\n* The total community growth `community_growth`.\n* The flux at which metabolites are taken up or secreted to the medium. Negative\n  and positive fluxes indicate consumption and secretion, respectively. This\n  consumption/secretion pattern is given for:\n  * The community as a whole: (`R_EX_<ID>_e`)\n  * Each community member separately (`R_EX_<ID>_<STRAIN_NAME>_i`).\n\n## Example\n\n```bash\ncd example\n```\n\nThe following code will run `misosoup` to find minimal supplying communities for\nA1R12 in a medium that contains acetate as carbon source:\n\n```bash\nmisosoup ./strains/*.xml --output ./output_example.yaml --media media_mbm_no_co2_hco3.yaml --strain A1R12 --parsimony\n```\n\nIn the example, we run `misosoup` to find minimal supplying communities that\nwould allow growth of the strain\n[A1R12](https://biocyc.org/A1R12/organism-summary) in MBM with acetate (ac) as\nthe sole source of carbon. Looking at the output of the simulation\nexample_output.yaml) you'll see that `misosoup` found two alternative supplying\ncommunities:\n\n* Solution 1: A1R12 can grow when in the presence of I3M07. If we inspect this\n  solution in more detail we can see (for example):\n  * Each strain produces carbon dioxide. We note this by looking at the\n    strain-specific carbon dioxide fluxes: `R_EX_co2_e_A1R12_i: 0.742` and\n    `R_EX_co2_e_I3M07_i: 0.957`.\n  * The community as a whole also produces carbon dioxide, which can be seen\n    looking at the community-level carbon dioxide flux `R_EX_co2_e: 1.699`.\n* Solution 2: A1R12 can grow when in the presence of I2R16. A similar analysis\n  to the one conducted for solution 1 could be followed.\n\n## Citation\n\nIf you use misosoup, please cite X.\n\n## Workflows\n\n`snakemake` is a useful tool to execute many experiments and gather results.\nSee [`misosoup` Workflow Template](https://gitlab.ethz.ch/ochsnern/misosoup_workflow_template)\non how to use it.\n\n## Development\n\nAny contributions are welcome.\n\n\nMIT License\n\nCopyright (c) 2021 Nicolas Ochsner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sirno/misosoup",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "misosoup",
    "package_url": "https://pypi.org/project/misosoup/",
    "platform": null,
    "project_url": "https://pypi.org/project/misosoup/",
    "project_urls": {
      "Homepage": "https://github.com/sirno/misosoup"
    },
    "release_url": "https://pypi.org/project/misosoup/2.0.2/",
    "requires_dist": [
      "reframed (>=1.2.1)",
      "gurobipy",
      "pyyaml (>=6.0)",
      "pandas",
      "pylint ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "black ; extra == 'dev'"
    ],
    "requires_python": "<3.10,>=3.7",
    "summary": "",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16957903,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd55ee976d4de4bfe47607b98c6fbaf6890cf9cfb89433c69818464746e01f65",
        "md5": "196d7ef7bc8afee0d32f9cd1a828abcd",
        "sha256": "96035a11ca98d502664011d7791b4765efdf2325702ec97a216209e409921471"
      },
      "downloads": -1,
      "filename": "misosoup-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "196d7ef7bc8afee0d32f9cd1a828abcd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<3.10,>=3.7",
      "size": 614171,
      "upload_time": "2022-09-02T14:19:45",
      "upload_time_iso_8601": "2022-09-02T14:19:45.792034Z",
      "url": "https://files.pythonhosted.org/packages/fd/55/ee976d4de4bfe47607b98c6fbaf6890cf9cfb89433c69818464746e01f65/misosoup-2.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29ae0a2c0ea2857032f43654e8041730c36c48d24b2d4a27d62b2aa0d542e202",
        "md5": "9e17ecf086b5d2085061d8ae436320df",
        "sha256": "a3cdac23184093abaa38d37a73f762e4ad8bcffefa9cd21088e6a30434dd1dc5"
      },
      "downloads": -1,
      "filename": "misosoup-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9e17ecf086b5d2085061d8ae436320df",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<3.10,>=3.7",
      "size": 571580,
      "upload_time": "2022-09-02T14:19:47",
      "upload_time_iso_8601": "2022-09-02T14:19:47.917126Z",
      "url": "https://files.pythonhosted.org/packages/29/ae/0a2c0ea2857032f43654e8041730c36c48d24b2d4a27d62b2aa0d542e202/misosoup-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}