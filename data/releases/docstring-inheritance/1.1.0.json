{
  "info": {
    "author": "Antoine Dechaume",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<!--\n Copyright 2021 Antoine DECHAUME\n\n This work is licensed under the Creative Commons Attribution 4.0\n International License. To view a copy of this license, visit\n http://creativecommons.org/licenses/by/4.0/ or send a letter to Creative\n Commons, PO Box 1866, Mountain View, CA 94042, USA.\n -->\n\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/docstring-inheritance)\n![PyPI](https://img.shields.io/pypi/v/docstring-inheritance)\n![Conda (channel only)](https://img.shields.io/conda/vn/conda-forge/docstring-inheritance)\n![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)\n![Codecov branch](https://img.shields.io/codecov/c/gh/AntoineD/docstring-inheritance/main)\n\n`docstring-inheritance` is a python package to avoid writing and maintaining duplicated python docstrings.\nThe typical usage is to enable the inheritance of the docstrings from a base class\nsuch that its derived classes fully or partly inherit the docstrings.\n\n# Features\n\n- Handle numpy and google docstring formats (i.e. sections based docstrings):\n    - [NumPy docstring format specification](https://numpydoc.readthedocs.io/en/latest/format.html)\n    - [Google docstring format specification](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings)\n- Handle docstrings for functions, classes, methods, class methods, static methods, properties.\n- Handle docstrings for classes with multiple or multi-level inheritance.\n- Docstring sections are inherited individually,\n  like methods.\n- For docstring sections documenting signatures,\n  the signature arguments are inherited individually.\n- Minimum performance cost: the inheritance is performed at import time,\n  not for each call.\n- Compatible with rendering the documentation with [Sphinx](http://www.sphinx-doc.org/).\n\n# Licenses\n\nThe source code is distributed under the MIT license.\nThe documentation is distributed under the CC BY 4.0 license.\nThe dependencies, with their licenses, are given in the CREDITS.rst file.\n\n# Installation\n\nInstall with pip:\n\n```commandline\npip install docstring-inheritance\n```\n\nOr with conda:\n\n```commandline\nconda install -c conda-forge docstring-inheritance\n```\n\n# Basic Usage\n\n## Inheriting docstrings for classes\n\n`docstring-inheritance` provides\n[metaclasses](https://docs.python.org/3/reference/datamodel.html#customizing-class-creation)\nto enable the docstrings of a class to be inherited from its base classes.\nThis feature is automatically transmitted to its derived classes as well.\nThe docstring inheritance is performed for the docstrings of the:\n- class\n- methods\n- classmethods\n- staticmethods\n- properties\n\nUse the `NumpyDocstringInheritanceMeta` metaclass to inherit docstrings in numpy format\nif `__init__` method is documented in its own docstring.\nOtherwise, if `__init__` method is documented in the class docstring,\nuse the `NumpyDocstringInheritanceInitMeta` metaclass.\n\nUse the `GoogleDocstringInheritanceMeta` metaclass to inherit docstrings in google format.\nif `__init__` method is documented in its own docstring.\nOtherwise, if `__init__` method is documented in the class docstring,\nuse the `GoogleDocstringInheritanceInitMeta` metaclass.\n\n```python\nfrom docstring_inheritance import NumpyDocstringInheritanceMeta\n\n\nclass Parent(metaclass=NumpyDocstringInheritanceMeta):\n  def meth(self, x, y=None):\n    \"\"\"Parent summary.\n\n    Parameters\n    ----------\n    x:\n       Description for x.\n    y:\n       Description for y.\n\n    Notes\n    -----\n    Parent notes.\n    \"\"\"\n\n\nclass Child(Parent):\n  def meth(self, x, z):\n    \"\"\"\n    Parameters\n    ----------\n    z:\n       Description for z.\n\n    Returns\n    -------\n    Something.\n\n    Notes\n    -----\n    Child notes.\n    \"\"\"\n\n\n# The inherited docstring is\nChild.meth.__doc__ == \"\"\"Parent summary.\n\nParameters\n----------\nx:\n   Description for x.\nz:\n   Description for z.\n\nReturns\n-------\nSomething.\n\nNotes\n-----\nChild notes.\n\"\"\"\n```\n\n## Inheriting docstrings for functions\n\n`docstring-inheritance` provides functions to inherit the docstring of a callable from a string.\nThis is typically used to inherit the docstring of a function from another function.\n\nUse the `inherit_google_docstring` function to inherit docstrings in google format.\n\nUse the `inherit_numpy_docstring` function to inherit docstrings in numpy format.\n\n```python\nfrom docstring_inheritance import inherit_google_docstring\n\n\ndef parent():\n  \"\"\"Parent summary.\n\n  Args:\n      x: Description for x.\n      y: Description for y.\n\n  Notes:\n      Parent notes.\n  \"\"\"\n\n\ndef child():\n  \"\"\"\n  Args:\n      z: Description for z.\n\n  Returns:\n      Something.\n\n  Notes:\n      Child notes.\n  \"\"\"\n\n\ninherit_google_docstring(parent.__doc__, child)\n\n# The inherited docstring is\nchild.__doc__ == \"\"\"Parent summary.\n\nArgs:\n    x: Description for x.\n    z: Description for z.\n\nReturns:\n    Something.\n\nNotes:\n    Child notes.\n\"\"\"\n```\n\n# Docstring inheritance specification\n\n## Sections order\n\nThe sections of an inherited docstring are sorted according to order defined in the\n[NumPy docstring format specification](https://numpydoc.readthedocs.io/en/latest/format.html):\n- `Summary`\n- `Extended summary`\n- `Parameters` for the NumPy format or `Args` for the Google format\n- `Returns`\n- `Yields`\n- `Receives`\n- `Other Parameters`\n- `Attributes`\n- `Methods`\n- `Raises`\n- `Warns`\n- `Warnings`\n- `See Also`\n- `Notes`\n- `References`\n- `Examples`\n- sections with other names come next\n\nThis ordering is also used for the docstring written with the\n[Google docstring format specification](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings)\neven though it does not define all of these sections.\n\n## Sections with items\n\nThose sections are:\n- `Other Parameters`\n- `Methods`\n- `Attributes`\n\nThe inheritance is done at the key level,\ni.e. a section of the inheritor will not fully override the parent one:\n- the keys in the parent section and not in the child section are inherited,\n- the keys in the child section and not in the parent section are kept,\n- for keys that are both in the parent and child section,\n  the child ones are kept.\n\nThis allows to only document the new keys in such a section of an inheritor.\nFor instance:\n\n```python\nfrom docstring_inheritance import NumpyDocstringInheritanceMeta\n\n\nclass Parent(metaclass=NumpyDocstringInheritanceMeta):\n  \"\"\"\n  Attributes\n  ----------\n  x:\n     Description for x\n  y:\n     Description for y\n  \"\"\"\n\n\nclass Child(Parent):\n  \"\"\"\n  Attributes\n  ----------\n  y:\n     Overridden description for y\n  z:\n     Description for z\n  \"\"\"\n\n\n# The inherited docstring is\nChild.__doc__ == \"\"\"\nAttributes\n----------\nx:\n   Description for x\ny:\n   Overridden description for y\nz:\n   Description for z\n\"\"\"\n```\n\nHere the keys are the attribute names.\nThe description for the attribute `y` has been overridden\nand the description for the attribute `z` has been added.\nThe only remaining description from the parent is for the attribute `x`.\n\n### Sections documenting signatures\n\nThose sections are:\n- `Parameters` (numpy format only)\n- `Args` (google format only)\n\nIn addition to the inheritance behavior described [above](#sections-with-items):\n- the arguments not existing in the inheritor signature are removed,\n- the arguments are sorted according the inheritor signature,\n- the arguments with no description are provided with a dummy description.\n\n```python\nfrom docstring_inheritance import GoogleDocstringInheritanceMeta\n\n\nclass Parent(metaclass=GoogleDocstringInheritanceMeta):\n  def meth(self, w, x, y):\n    \"\"\"\n    Args:\n        w: Description for w\n        x: Description for x\n        y: Description for y\n    \"\"\"\n\n\nclass Child(Parent):\n  def meth(self, w, y, z):\n    \"\"\"\n    Args:\n        z: Description for z\n        y: Overridden description for y\n    \"\"\"\n\n\n# The inherited docstring is\nChild.meth.__doc__ == \"\"\"\nArgs:\n    w: Description for w\n    y: Overridden description for y\n    z: Description for z\n\"\"\"\n```\n\nHere the keys are the argument names.\nThe description for the argument `y` has been overridden\nand the description for the argument `z` has been added.\nThe only remaining description from the parent is for the argument `w`.\n\n# Advanced usage\n\n## Abstract base class\n\nTo create a parent class that both is abstract and has docstring inheritance,\nan additional metaclass is required:\n\n```python\nimport abc\nfrom docstring_inheritance import NumpyDocstringInheritanceMeta\n\n\nclass Meta(abc.ABCMeta, NumpyDocstringInheritanceMeta):\n  pass\n\n\nclass Parent(metaclass=Meta):\n  pass\n```\n# Similar projects\n\n[custom_inherit](https://github.com/rsokl/custom_inherit):\n`docstring-inherit` started as fork of this project before being re-written,\nwe thank its author.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AntoineD/docstring-inheritance",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docstring-inheritance",
    "package_url": "https://pypi.org/project/docstring-inheritance/",
    "platform": null,
    "project_url": "https://pypi.org/project/docstring-inheritance/",
    "project_urls": {
      "Documentation": "https://antoined.github.io/docstring-inheritance",
      "Homepage": "https://github.com/AntoineD/docstring-inheritance",
      "Source": "https://github.com/AntoineD/docstring-inheritance",
      "Tracker": "https://github.com/AntoineD/docstring-inheritance/issues"
    },
    "release_url": "https://pypi.org/project/docstring-inheritance/1.1.0/",
    "requires_dist": [
      "covdefaults ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'"
    ],
    "requires_python": "<3.12,>=3.7",
    "summary": "Avoid writing and maintaining duplicated docstrings.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16437929,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62e0a3860c1fe5a7ba4812c11f348c791a23f9f58acfab253ca51afc8fbe75cb",
        "md5": "108911467eb9ae3567e4360362590792",
        "sha256": "d556c1be903e5628b8c19b41d28b0640bb86b102bd18ee5279833b6ba298ca44"
      },
      "downloads": -1,
      "filename": "docstring_inheritance-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "108911467eb9ae3567e4360362590792",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<3.12,>=3.7",
      "size": 16553,
      "upload_time": "2023-01-13T20:52:18",
      "upload_time_iso_8601": "2023-01-13T20:52:18.600706Z",
      "url": "https://files.pythonhosted.org/packages/62/e0/a3860c1fe5a7ba4812c11f348c791a23f9f58acfab253ca51afc8fbe75cb/docstring_inheritance-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f48b0257c5cd75b8f4ad4006b6a874b69ee5a635f3bb455ad44ca12e6d4b1d3b",
        "md5": "abbece6dc850bbd3acc44275d0a7773c",
        "sha256": "8f0df487d25247406f295462aad3e7df1441616158cda173461fea0079790502"
      },
      "downloads": -1,
      "filename": "docstring-inheritance-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "abbece6dc850bbd3acc44275d0a7773c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<3.12,>=3.7",
      "size": 20106,
      "upload_time": "2023-01-13T20:52:20",
      "upload_time_iso_8601": "2023-01-13T20:52:20.922640Z",
      "url": "https://files.pythonhosted.org/packages/f4/8b/0257c5cd75b8f4ad4006b6a874b69ee5a635f3bb455ad44ca12e6d4b1d3b/docstring-inheritance-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}