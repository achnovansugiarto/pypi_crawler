{
  "info": {
    "author": "Nyaruka",
    "author_email": "code@nyaruka.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Introduction\n============\n\n|Build Status| |Coverage Status| |PyPI Release|\n\nWhy type:\n\n.. code:: html\n\n    <div class=\"left\" id=\"banner\">\n        Greetings!\n    </div>\n\nwhen you can just type:\n\n.. code:: haml\n\n    .left#banner\n        Greetings!\n\n... and do something more fun with all the time you save not typing\nangle brackets and remembering to close tags?\n\nThe syntax above is `Haml <http://www.haml-lang.com>`__ - a templating\nlanguage used extensively in the Ruby on Rails community. This library\nlets Django developers use a Haml like syntax in their templates. It's\nnot a template engine in itself, but simply a compiler which will\nconvert \"HamlPy\" files into templates that Django can understand.\n\nThis project is a fork of the no longer maintained\n`HamlPy <https://github.com/jessemiller/HamlPy>`__. It introduces Python\n3 support, support for new Django versions, and a host of new features\nand bug fixes. Note that the package name is now *django-hamlpy*.\n\nInstalling\n----------\n\nThe latest stable version can be installed using\n`pip <http://pypi.python.org/pypi/pip/>`__:\n\n::\n\n    pip install django-hamlpy\n\nAnd the latest development version can be installed directly from\nGitHub:\n\n::\n\n    pip install git+https://github.com/nyaruka/django-hamlpy\n\n**NOTE:** If you run into build errors, then you may need to install\n`python's development\npackage <http://stackoverflow.com/a/21530768/2896976>`__.\n\nSyntax\n------\n\nAlmost all of the syntax of Haml is preserved.\n\n.. code:: haml\n\n    #profile(style=\"width: 200px\")\n        .left.column\n            #date 2010/02/18\n            #address Toronto, ON\n        .right.column<\n            #bio Jesse Miller\n\nturns into:\n\n.. code:: htmldjango\n\n    <div id='profile' style=\"width: 200px\">\n        <div class='left column'>\n            <div id='date'>2010/02/18</div>\n            <div id='address'>Toronto, ON</div>\n        </div>\n        <div class='right column'><div id='bio'>Jesse Miller</div></div>\n    </div>\n\nThe main difference is instead of interpreting Ruby, or even Python we\ninstead can create Django tags and variables. For example:\n\n.. code:: haml\n\n    %ul#athletes\n        - for athlete in athlete_list\n            %li.athlete{'id': 'athlete_#{ athlete.pk }'}= athlete.name\n\nbecomes...\n\n.. code:: htmldjango\n\n    <ul id='athletes'>\n        {% for athlete in athlete_list %}\n            <li class='athlete' id='athlete_{{ athlete.pk }}'>{{ athlete.name }}</li>\n        {% endfor %}\n    </ul>\n\nUsage\n-----\n\nThere are two different ways to use this library.\n\nOption 1: Template loaders\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThese are Django template loaders which will convert any templates with\n``.haml`` or ``.hamlpy`` extensions to regular Django templates whenever\nthey are requested by a Django view. To use them, add them to the list\nof template loaders in your Django settings, e.g.\n\n.. code:: python\n\n    TEMPLATES=[\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': ['./templates'],\n            'OPTIONS': {\n                'loaders': (\n                    'hamlpy.template.loaders.HamlPyFilesystemLoader',\n                    'hamlpy.template.loaders.HamlPyAppDirectoriesLoader',\n                    ...\n                ), \n            }\n        }\n    ]\n\nEnsure they are listed before the standard Django template loaders or\nthese loaders will try to process your Haml templates.\n\nTemplate caching\n^^^^^^^^^^^^^^^^\n\nYou can use these loaders with template caching - just add\n``django.template.loaders.cached.Loader`` to your list of loaders, e.g.\n\n.. code:: python\n\n    'loaders': (\n        ('django.template.loaders.cached.Loader', (\n            'hamlpy.template.loaders.HamlPyFilesystemLoader',\n            'hamlpy.template.loaders.HamlPyAppDirectoriesLoader',\n            ...\n        )),\n    )\n\nSettings\n^^^^^^^^\n\nYou can configure the Haml compiler with the following Django settings:\n\n-  ``HAMLPY_ATTR_WRAPPER`` -- The character that should wrap element\n   attributes. Defaults to ``'`` (an apostrophe).\n-  ``HAMLPY_DJANGO_INLINE_STYLE`` -- Whether to support ``={...}``\n   syntax for inline variables in addition to ``#{...}``. Defaults to\n   ``False``.\n\nOption 2: Watcher\n~~~~~~~~~~~~~~~~~\n\nThe library can also be used as a stand-alone program. There is a\nwatcher script which will monitor Haml files in a given directory and\nconvert them to HTML as they are edited.\n\n::\n\n    usage: hamlpy_watcher.py [-h] [-v] [-i EXT [EXT ...]] [-ext EXT] [-r S]\n                             [--tag TAG] [--attr-wrapper {\",'}] [--django-inline]\n                             [--jinja] [--once]\n                             input_dir [output_dir]\n\n    positional arguments:\n      input_dir             Folder to watch\n      output_dir            Destination folder\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --verbose         Display verbose output\n      -i EXT [EXT ...], --input-extension EXT [EXT ...]\n                            The file extensions to look for.\n      -ext EXT, --extension EXT\n                            The output file extension. Default is .html\n      -r S, --refresh S     Refresh interval for files. Default is 3 seconds.\n                            Ignored if the --once flag is set.\n      --tag TAG             Add self closing tag. eg. --tag macro:endmacro\n      --attr-wrapper {\",'}  The character that should wrap element attributes.\n                            This defaults to ' (an apostrophe).\n      --django-inline       Whether to support ={...} syntax for inline variables\n                            in addition to #{...}\n      --jinja               Makes the necessary changes to be used with Jinja2.\n      --once                Runs the compiler once and exits on completion.\n                            Returns a non-zero exit code if there were any compile\n                            errors.\n\nCreate message files for translation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nJust include your Haml templates along with all the other files which\ncontain translatable strings, e.g.\n\n.. code:: bash\n\n    python manage.py makemessages --extension haml,html,py,txt\n\nReference\n---------\n\nCheck out the\n`reference <http://github.com/nyaruka/django-hamlpy/blob/master/REFERENCE.md>`__\nfile for the complete syntax reference and more examples.\n\nClass Based Views\n-----------------\n\nThis library also provides `the same class based generic views than\ndjango <https://docs.djangoproject.com/en/1.10/topics/class-based-views/generic-display/>`__\nwith the enhancement that they start by looking for templates endings\nwith ``*.haml`` and ``*.hamlpy`` in addition to their default templates.\nApart from that, they are exactly the same class based generic views.\nFor example:\n\n.. code:: python\n\n    from hamlpy.views.generic import DetailView, ListView\n    from my_app.models import SomeModel\n\n    # will look for the templates `my_app/somemodel_detail.haml`,\n    # `my_app/somemodel_detail.hamlpy` and  `my_app/somemodel_detail.html`\n    DetailView.as_view(model=SomeModel)\n\n    # will look for the templates `my_app/somemodel_list.haml`,\n    # `my_app/somemodel_list.hamlpy` and  `my_app/somemodel_list.html`\n    ListView.as_view(model=SomeModel)\n\nThe available view classes are:\n\nDisplay views:\n\n-  `DetailView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#detailview>`__\n-  `ListView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#listview>`__\n\nEdit views:\n\n-  `CreateView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#createview>`__\n-  `UpdateView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#updateview>`__\n-  `DeleteView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#deleteview>`__\n\nDate related views:\n\n-  `DateDetailView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#datedetailview>`__\n-  `ArchiveIndexView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#archiveindexview>`__\n-  `YearArchiveView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#yeararchiveview>`__\n-  `MonthArchiveView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#montharchiveview>`__\n-  `WeekArchiveView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#weekarchiveview>`__\n-  `DayArchiveView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#dayarchiveview>`__\n-  `TodayArchiveView <https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#todayarchiveview>`__\n\nAll views are importable from ``hamlpy.views.generic`` and are built\nusing the ``HamlExtensionTemplateView`` mixin which you can use to\ncreate your own custom Haml-using views. For example:\n\n.. code:: python\n\n    from hamlpy.views.generic import HamlExtensionTemplateView\n\n    class MyNewView(HamlExtensionTemplateView, ParentViewType):\n        pass\n\n**Note**: ``HamlExtensionTemplateView`` *needs* to be first in the\ninheritance list.\n\nContributing\n------------\n\nWe're always happy to have contributions to this project. To get started\nyou'll need to clone the project and install the dependencies:\n\n::\n\n    virtualenv env\n    source env/bin/activate\n    pip install -r requirements/base.txt\n    pip install -r requirements/tests.txt\n\nPlease write tests for any new features and always ensure the current\ntests pass. To run the tests, use:\n\n::\n\n    py.test hamlpy  \n\nTo run the performance test, use:\n\n::\n\n    python -m hamlpy.test.test_templates\n\n.. |Build Status| image:: https://travis-ci.org/nyaruka/django-hamlpy.svg?branch=master\n   :target: https://travis-ci.org/nyaruka/django-hamlpy\n.. |Coverage Status| image:: https://coveralls.io/repos/github/nyaruka/django-hamlpy/badge.svg?branch=master\n   :target: https://coveralls.io/github/nyaruka/django-hamlpy?branch=master\n.. |PyPI Release| image:: https://img.shields.io/pypi/v/django-hamlpy.svg\n   :target: https://pypi.python.org/pypi/django-hamlpy/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/nyaruka/django-hamlpy",
    "keywords": "haml django converter",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-hamlpy",
    "package_url": "https://pypi.org/project/django-hamlpy/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-hamlpy/",
    "project_urls": {
      "Homepage": "http://github.com/nyaruka/django-hamlpy"
    },
    "release_url": "https://pypi.org/project/django-hamlpy/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Haml like syntax for Django templates.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17144762,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a0b5478d5d9af5b21197197ab7e6af7d2c1fbab5fa9070bf262f394ba5efd11",
        "md5": "933728332c71b23077827af0c8699ac8",
        "sha256": "af4c6b02840c6df6c2d6f5354a571300399a8fa3f8d9de9481575d5ca88514b4"
      },
      "downloads": -1,
      "filename": "django_hamlpy-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "933728332c71b23077827af0c8699ac8",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 44310,
      "upload_time": "2017-01-26T11:01:42",
      "upload_time_iso_8601": "2017-01-26T11:01:42.396448Z",
      "url": "https://files.pythonhosted.org/packages/7a/0b/5478d5d9af5b21197197ab7e6af7d2c1fbab5fa9070bf262f394ba5efd11/django_hamlpy-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4a6ab94b7fd486ce3140cdf8691f38cbd8544b3d7efda30a8817c8b683ca25a",
        "md5": "23ba956c44292ff49ac31b0bf6b475f8",
        "sha256": "7f1aa2050377f8912d876b227da28f8691dea360214c62d4cab16fa7052f5ca1"
      },
      "downloads": -1,
      "filename": "django-hamlpy-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "23ba956c44292ff49ac31b0bf6b475f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34949,
      "upload_time": "2017-01-26T11:01:38",
      "upload_time_iso_8601": "2017-01-26T11:01:38.504527Z",
      "url": "https://files.pythonhosted.org/packages/d4/a6/ab94b7fd486ce3140cdf8691f38cbd8544b3d7efda30a8817c8b683ca25a/django-hamlpy-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}