{
  "info": {
    "author": "Bosco Curtu",
    "author_email": "bcurtu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "==============\ndjango-sermepa\n==============\n\nDjango sermepa es una aplicación muy al estilo de django-paypal para usar el TPV Virtual de Redsys/Sermepa, el TPV más usado en España.\n\nPermite generar cobros puntuales, recurrentes por fichero o por referencia, y devoluciones.\n\nLa app tiene una vista que escucha las notificaciones del TPV (se debe pedir su activación a tu banco) y lanza signals para que sean procesadas por tu aplicación de cobros, para cambiar de estado el pedido, enviar emails de notificación...\n\nPara utilizarlo sigue los siguientes pasos\n\n1. Copia la carpeta sermepa a tu proyecto\n2. Añadelo a INSTALLED_APPS del settings.py\n3. Ojo, hay nuevos modelos: syncdb o migrations (no incluídas, depende de tu versiòn de django)\n\n4. Añade los siguientes settings::\n\n    SERMEPA_URL_PRO = 'https://sis.redsys.es/sis/realizarPago'\n    SERMEPA_URL_TEST = 'https://sis-t.redsys.es:25443/sis/realizarPago'\n    SERMEPA_MERCHANT_CODE = '327234688' #comercio de test\n    SERMEPA_TERMINAL = '002'\n    SERMEPA_SECRET_KEY = 'qwertyasdf0123456789'\n    SERMEPA_BUTTON_IMG = '/site_media/_img/targets.jpg'\n    SERMEPA_CURRENCY = '978' #Euros\n\n Deberás modificar SERMEPA_MERCHANT_CODE, SERMEPA_SECRET_KEY, SERMEPA_BUTTON_IMG, SERMEPA_TERMINAL\n\n5. Añade la ruta de la respuesta de Sermepa a tus urls::\n\n     (r'^sermepa/', include('sermepa.urls')),\n     \n6. Programa los listeners de las signals de OK, KO y si quieres de error:\n \n 6.1 El listener recibe un objecto de tipo `SermepaResponse <https://github.com/bcurtu/django-sermepa/blob/master/sermepa/models.py>`_\n con toda la información de la operación del TPV. Puedes usar un listener que procese todas los casos, o uno por cada caso (OK y KO)\n\n .. code:: python\n\n    def payment_ok(sender, **kwargs):\n        '''sender es un objecto de clase SermepaResponse. Utiliza el campo Ds_MerchantData\n        para asociarlo a tu Pedido o Carrito'''\n        pedido = Pedido.objects.get(id=sender.Ds_MerchantData)\n        pedido.estado = 'cobrado'\n        pedido.save()\n        send_email_success(pedido)\n\n    def payment_ko(sender, **kwargs):\n        '''sender es un objecto de clase SermepaResponse. Utiliza el campo Ds_MerchantData\n        para asociarlo a tu Pedido o Carrito''\n        pass        \n\n    def sermepa_ipn_error(sender, **kwargs):\n        '''Esta señal salta cuando el POST data recibido está mal firmado. Solo pasa en caso de intentos de cracking.\n        sender es un objecto de clase SermepaResponse. Utiliza el campo Ds_MerchantData\n        para asociarlo a tu Pedido o Carrito''\n        pass\n ..\n\n 6.2 Asocia el listener a las señales, en algún punto que se cargue al iniciar el proyecto, por ejemplo en el models.py\n\n .. code:: python\n\n    from sermepa.signals import payment_was_successful\n    from sermepa.signals import payment_was_error\n    from sermepa.signals import signature_error\n\n    payment_was_successful.connect(payment_ok)\n    payment_was_error.connect(payment_ko)\n    signature_error.connect(sermepa_ipn_error)\n ..\n\n \n7. Utiliza el form de `SermepaPaymentForm <https://github.com/bcurtu/django-sermepa/blob/master/sermepa/forms.py>`_ para inicializar el botón de pago. \n\n El botón de pago será un formulario POST a la url del TPV, firmado con tu clave secreta, que deberá pasar toda la información de la operación: modalidad de pago, importe (en céntimos), URLs de notificación, OK y KO, descripción, datos del comercio, identificador de tu pedido, identificador de la operación...\n \n Existen diferentes modalidades de pago:\n\n 1. Las compras puntuales, el Ds_Merchant_TransactionType='0' y el Ds_Merchant_Order debe ser un string siempre único y de 10 caracteres.\n\n 2. Las suscripciones o pagos recurrentes. Existen 2 tipos, por fichero o por referencia.\n\n  2.1 Por fichero, tienen un límite de 12 meses o 12 cobros. \n\n   2.1.1 El primer cobro el Ds_Merchant_TransactionType='L' y el Ds_Merchant_Order debe ser siempre único. \n    \n    El tpv responde con el mismo valor pasado en la variable Ds_Order más 2 dígitos adicionales indicando el número de transacción (la primera es 00)\n\n   2.1.2 Los cobros sucesivos se debe pasar el Ds_Merchant_TransactionType='M' y el primer Ds_Merchant_Order\n\n  2.2 Por referencia, no tiene límite de tiempo ni de cobros. Este sistema soporta cobros de 0€ para activaciones y cambios de tarjetas.\n\n   2.2.1 El primer cobro el Ds_Merchant_TransactionType='0' y el Ds_Merchant_Order='REQUIRED'\n\n    El tpv responde con un nuevo parámetro Ds_Merchant_Identifier, que hay que almacenar (idreferencia)\n\n   2.2.2 Los cobros sucesivos son Ds_Merchant_TransactionType='0' y el Ds_Merchant_Order=idreferencia (el valor que nos han pasado en el primero cobro)\n\n **Mira el código del ejemplo** (`sermepa_test/views.py <https://github.com/bcurtu/django-sermepa/blob/master/sermepa_test/views.py>`_) para más info:\n\n\n8.  El TPV enviará una respuesta (SermepaResponse) con la información que se le ha enviado más nuevos datos relacionados con el pago. A destacar:\n\n - Ds_MerchantData es el mismo valor enviado en el formulario en el campo Ds_Merchant_MerchantData. Debería contener el identificador de tu Pedido o Carrito\n - Ds_Merchant_Identifier: la referencia para cobros recurrentes sucesivos si se utiliza el pago por referencia.\n - Ds_ExpiryDate: Fecha de expiración de la tarjeta\n - Ds_Card_Number: Número asteriscado de la tarjeta\n\n\n\n \n9. Prueba el formulario de compra puntual en http://localhost:8000/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bcurtu/django-sermepa",
    "keywords": null,
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-sermepa",
    "package_url": "https://pypi.org/project/django-sermepa/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-sermepa/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/bcurtu/django-sermepa"
    },
    "release_url": "https://pypi.org/project/django-sermepa/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A django app to emit and listen Redsys/sermepa payments",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1721752,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5cd911777cb296b4cb0b3ef3ad1ca2faccd328a3d8cba18d3add501dc6b15ce",
        "md5": "3c90b968ccde52402e417c67aff3fea8",
        "sha256": "0805ca3ac3c0fb7a1e9dd54d150e8ccf83fa65c971c773e634497bbeb2415052"
      },
      "downloads": -1,
      "filename": "django-sermepa-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3c90b968ccde52402e417c67aff3fea8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7141,
      "upload_time": "2015-04-11T21:58:04",
      "upload_time_iso_8601": "2015-04-11T21:58:04.179885Z",
      "url": "https://files.pythonhosted.org/packages/b5/cd/911777cb296b4cb0b3ef3ad1ca2faccd328a3d8cba18d3add501dc6b15ce/django-sermepa-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}