{
  "info": {
    "author": "Uros Trstenjak",
    "author_email": "uros.trstenjak@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "============================\nDjango Bootstrap Modal Forms\n============================\n\nA jQuery plugin for creating AJAX driven Django forms in Bootstrap modal.\n\nInstallation\n============\n\n1. Install django-bootstrap-modal-forms::\n\n    $ pip install django-bootstrap-modal-forms\n\n2. Add \"bootstrap_modal_forms\" to your INSTALLED_APPS setting::\n\n    INSTALLED_APPS = [\n        ...\n        'bootstrap_modal_forms',\n        ...\n    ]\n\n3. Include Bootstrap, jQuery and jquery.bootstrap.modal.forms.js on every page where you would like to set up the AJAX driven Django forms in Bootstrap modal.\n\nIMPORTANT: Adjust Bootstrap and jQuery file paths to match yours, but include jquery.bootstrap.modal.forms.js exactly as in code bellow.\n\n.. code-block:: html+django\n\n    <head>\n        <link rel=\"stylesheet\" href=\"{% static 'assets/css/bootstrap.css' %}\">\n    </head>\n\n    <body>\n        <script src=\"{% static 'assets/js/bootstrap.js' %}\"></script>\n        <script src=\"{% static 'assets/js/jquery.js' %}\"></script>\n        <script src=\"{% static 'js/jquery.bootstrap.modal.forms.js' %}\"></script>\n    </body>\n\nUsage\n=====\n\n1. Form\n*******\n\nDefine either Django Form or ModelForm. django-bootstrap-modal-forms works with both.\n\n.. code-block:: python\n\n    forms.py\n\n    from django import forms\n    from .models import Test\n\n    class TestForm(forms.ModelForm):\n        class Meta:\n            model = Test\n            fields = ['test_field_1', 'test_field_2', ]\n\n2. Form's html\n**************\n\n.. code-block:: html\n\n    test/create_test.html\n\n    <form method=\"post\" action=\"{% url 'test:create_test' %}\">\n      {% csrf_token %}\n\n     <div class=\"modal-header\">\n        <h5 class=\"modal-title\">Create a new test</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n        {% for field in form %}\n          <div class=\"form-group{% if field.errors %} invalid{% endif %}\">\n            <label for=\"{{ field.id_for_label }}\">{{ field.label }}</label>\n            {% field %}\n            {% for error in field.errors %}\n              <p class=\"help-block\">{{ error }}</p>\n            {% endfor %}\n          </div>\n        {% endfor %}\n      </div>\n\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n        <button type=\"submit\" class=\"btn btn-primary\" formnovalidate=\"formnovalidate\">Create</button>\n      </div>\n\n    </form>\n\n- Define form's html and save it as Django template.\n- Bootstrap 4 modal elements are used in this example.\n- Form should POST to url defined in #4.\n- Add \"invalid\" class or custom errorClass to the elements that wrap the fields.\n- \"invalid\" class acts as a flag for the fields having errors after the form has been POSTed.\n\n3. Class-based view\n*******************\n\nDefine a class-based view TestFormView that processes the form defined in #1 and uses the template defined in #2. Define also the success_url for TestFormView and separate SuccessView with your own success.html.\n\n.. code-block:: python\n\n    views.py\n\n    from django.shortcuts import render\n    from django.urls import reverse_lazy\n    from django.views.generic.base import TemplateView\n    from django.views.generic.edit import CreateView\n\n    from .forms import TestForm\n\n    class TestFormView(CreateView):\n        template_name = 'test/create_test.html'\n        form_class = TestForm\n        success_url = reverse_lazy('test:success_view')\n\n    class SuccessView(TemplateView):\n        template_name = \"test/success.html\"\n\n4. URL for the view\n*******************\n\nDefine URL for the views in #3.\n\n.. code-block:: python\n\n    from django.urls import path\n\n    from . import views\n\n    app_name = 'test'\n    urlpatterns = [\n        path('', views.index, name='index'),\n        path('test/create_test/', views.TestFormView.as_view(), name='create_test')\n        path('test/success/', views.SuccessView.as_view(), name='success_view')\n    ]\n\n5. Bootstrap modal and trigger element\n**************************************\n\nDefine the Bootstrap modal window and trigger element.\n\n.. code-block:: html\n\n    test/index.html\n\n    <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" id=\"modal\">\n      <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\">\n\n        </div>\n      </div>\n    </div>\n\n    <button type=\"button\" class=\"btn btn-primary\" id=\"createTest\">\n      <span class=\"fa fa-plus fa-sm\"></span>\n      New Test\n    </button>\n\n- Same modal window can be used for multiple modalForms in single template (see #6).\n- Form's html from #2 is loaded within ``<div class=\"modal-content\"></div>``.\n- Trigger element (in this example button) selected with id selector is used for instantiation of modalForm (see #6).\n- Any element can be trigger element as long as modalForm is bound to it.\n\n6. modalForm\n************\n\nAdd script to the template from #5 and bind the modalForm to the trigger element. Set TestFormView URL defined in #4 as formURL and SuccessView URL as successURL properties of modalForm.\n\nIf you want to create **more modalForms in single template using the same modal window** from #5, repeat steps #1 to #4, create new trigger element as in #5 and bind the new modalForm with unique URLs to it.\n\nIMPORTANT: Default values for ``modalID``, ``modalContent``, ``modalForm`` and ``errorClass`` are used in this example, while ``formURL`` and ``successURL`` are customized. If you customize any other option adjust the code of the above examples accordingly.\n\n.. code-block:: html\n\n    test/index.html\n\n    <script type=\"text/javascript\">\n    $(document).ready(function() {\n\n        $(\"#createTest\").modalForm({\n            formURL: \"{% url 'test:create_test' %}\",\n            successURL: \"{% url 'test:success_view' %}\"\n        });\n\n    });\n    </script>\n\nOptions\n=======\n\nmodalID\n  Sets the custom id of the modal. ``Default: \"#modal\"``\n\nmodalContent\n  Sets the custom class of the element to which the form's html is appended. ``Default: \".modal-content\"``\n\nmodalForm\n  Sets the custom form selector. ``Default: \".modal-content form\"``\n\nformURL\n  Sets the url of the form's view and html. ``Default: null``\n\nsuccessURL\n  Sets the url for redirection after successful form submission. ``Default: \"/\"``\n\nerrorClass\n  Sets the custom errorClass for the form fields. ``Default: \".invalid\"``\n\n\nHow it works\n============\n\n1. Click event on trigger element opens modal with ``modalID``\n2. Form at ``formURL`` is appended to the element with ``modalContent`` class\n3. On submit the form is POSTed via AJAX request to ``formURL``\n4. **Unsuccessful POST request** returns errors, which are shown under form fields in modal\n5. **Successful POST request** redirects to ``successURL``\n\nContribute\n==========\n\nThis is an Open Source project and any contribution is appriciated.\n\nLicense\n=======\n\nThis project is licensed under the MIT License.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trco/django-bootstrap-modal-forms",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-bootstrap-modal-forms",
    "package_url": "https://pypi.org/project/django-bootstrap-modal-forms/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-bootstrap-modal-forms/",
    "project_urls": {
      "Homepage": "https://github.com/trco/django-bootstrap-modal-forms"
    },
    "release_url": "https://pypi.org/project/django-bootstrap-modal-forms/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A jQuery plugin for creating AJAX driven Django forms in Bootstrap modal.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17164866,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9bbd7d5c52e56904b05abe6d40184edff491967ef7bd1848ffc2c3ee4984e7fa",
        "md5": "d82c2032c2fd7a2d5d93ea2a7c5aeea3",
        "sha256": "a02618036b67887e6de1689b85fa5afc1f896fedadb65543b84b39ce6b30aecc"
      },
      "downloads": -1,
      "filename": "django-bootstrap-modal-forms-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d82c2032c2fd7a2d5d93ea2a7c5aeea3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5757,
      "upload_time": "2018-08-11T19:29:44",
      "upload_time_iso_8601": "2018-08-11T19:29:44.729743Z",
      "url": "https://files.pythonhosted.org/packages/9b/bd/7d5c52e56904b05abe6d40184edff491967ef7bd1848ffc2c3ee4984e7fa/django-bootstrap-modal-forms-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}