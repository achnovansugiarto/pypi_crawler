{
  "info": {
    "author": "Livio Ribeiro",
    "author_email": "livioribeiro@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: CherryPy",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: Session"
    ],
    "description": "===================\n        cherrypy.authorizer\n        ===================\n        \n        Test utilities for cherrypy. Can be run under py.test, nosetests or unittest.\n        \n        Based on `code provided by Sylvain Hellegouarch <https://bitbucket.org/Lawouach/cherrypy-recipes/src/d140e6da973aa271e6b68a8bc187e53615674c5e/testing/unit/serverless/?at=default>`_\n        \n        The response returned by the methods on the class ``lribeiro.cherrypy.test.CPTestCase`` is added two properties:\n        ``status_code`` and ``text``, providing an easier way to retrieve the response body as a string and the status code as\n        an integer\n        \n        The class ``lribeiro.cherrypy.test.CPTestCase`` provides facilities to setup serverless testing and has helper methods\n        to perform requests.\n        \n        You need to provide a ``root`` class attribute when using ``CPTestCase`` that will be the root of your test application.\n        \n        You can also provide a ``preserve_cookies`` class attribute to control whether the cookies must be resent with every\n        request. This is useful when testing authentication. The default value is ``True``.\n        \n        ======== ==============\n        method   description\n        ======== ==============\n        get()    GET request\n        post()   POST request\n        put()    PUT request\n        delete() DELETE request\n        head()   HEAD request\n        patch()  PATCH request\n        ======== ==============\n        \n        These methods call the ``request()`` method with the specified http method set passing any additional parameter.\n        \n        The ``request()`` method accepts the following parameters (none of them is required - defaults in parenthesis):\n        \n        ============= ======================================================================\n        parameter     description\n        ============= ======================================================================\n        path          path to request ('/')\n        method        method to request ('GET')\n        app_path      path of the application to make requests against ('')\n        scheme        http or https ('http')\n        proto         http version ('HTTP/1.1')\n        data          dict contaning data to post on request body (None)\n        headers       dict contaning request headers to be sent (None)\n        cookies       dict contaning cookies to be sent (None)\n        auto_redirect whether to follow redirect responses (False)\n        \\*\\*kwargs      data to be sent in querystring or request body, in case of POST or PUT\n        ============= ======================================================================\n        \n        In addition to the request methods, the are assertion methods:\n        \n        =================== ======================================================================================================================\n        method              description\n        =================== ======================================================================================================================\n        assert_status       assert a specific https status. Constants for http status can be found in ``lribeiro.cherrypy.test.httpstatus`` module\n        assert_ok           shortcut to ``assert_status(httpstatus.OK)``\n        assert_not_found    shortcut to ``assert_status(httpstatus.NOT_FOUND)``\n        assert_error        shortcut to ``assert_status(httpstatus.INTERNAL_SERVER_ERROR)``\n        assert_redirect     assert the the response is a redirect\n        assert_redirect_to  assert the the response is a redirect and verifies the Location of the redirect\n        assert_not_redirect assert that a response is not a redirect\n        assert_contains     assert that the response body contains a string\n        assert_not_contains assert that the response body does not contain a string\n        assert_body         assert that the response body is equals to a string\n        assert_header       assert that the a response header has a specific value\n        assert_has_header   assert that the response has a header\n        assert_cookie       assert that the a response cookie has a specific value\n        assert_has_cookie   assert that the response has a cookie\n        assert_path         assert that the request path_info is the same as the one given\n        =================== ======================================================================================================================\n        \n        Developed under Python3.4 and tested against Python2.7, Python3.4 and pypy.\n        \n        Example:\n        --------\n        \n        .. sourcecode:: python\n        \n            import cherrypy\n        \n            from lribeiro.cherrypy.test import CPTestCase\n        \n        \n            class Root:\n                @cherrypy.expose\n                def index(self):\n                    return 'index'\n        \n                @cherrypy.expose\n                def post(self, name):\n                    return 'name = ' + name\n        \n                @cherrypy.expose\n                def redir(self, to)\n                    raise cherrypy.HTTPRedirect(to)\n        \n        \n            class TestTests(CPTestCase):\n                root = Root()\n        \n                def test_index(self):\n                    self.get('/')\n                    self.assert_ok()\n                    self.assert_not_redirect()\n        \n                def test_post(self):\n                    self.post('/post', name='Lorem Ipsum')\n                    self.assert_contains('Lorem Ipsum')\n        \n                def test_redir(self):\n                    self.get('/redir', to='/some/page')\n                    self.assert_redirect('/some/page')",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/livioribeiro/cherrypy-test",
    "keywords": "cherrypy,test,unittest,py.test,nosetests",
    "license": "BSD License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "lribeiro.cherrypy.test",
    "package_url": "https://pypi.org/project/lribeiro.cherrypy.test/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/lribeiro.cherrypy.test/",
    "project_urls": {
      "Homepage": "http://bitbucket.org/livioribeiro/cherrypy-test"
    },
    "release_url": "https://pypi.org/project/lribeiro.cherrypy.test/1.0.1/",
    "requires_dist": [
      "CherryPy"
    ],
    "requires_python": null,
    "summary": "Test utilities for CherryPy",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1710281,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86f0aac88ffe4cd0d652727bbcf86dffd605c61ffdd5f16d65b6e3da83b6fe5b",
        "md5": "1b1a3c843a10d9895898f14ab1bebbd7",
        "sha256": "5b6e36270398eb6cd1cb4488bd8ddb36495037f45399cd2715fc3efdea605cba"
      },
      "downloads": -1,
      "filename": "lribeiro.cherrypy.test-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b1a3c843a10d9895898f14ab1bebbd7",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 10645,
      "upload_time": "2014-09-16T11:45:02",
      "upload_time_iso_8601": "2014-09-16T11:45:02.053107Z",
      "url": "https://files.pythonhosted.org/packages/86/f0/aac88ffe4cd0d652727bbcf86dffd605c61ffdd5f16d65b6e3da83b6fe5b/lribeiro.cherrypy.test-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "882a968858d3d74c0783c7781c088a6b61f2c73f47d5b1f714b3c9d098c9eedc",
        "md5": "bca0effdd544c289da5808959f3ec00c",
        "sha256": "af73f1c2454008da64f0f317dd7f94b79b42f67fd4266054f0fc0d5a087b9eda"
      },
      "downloads": -1,
      "filename": "lribeiro.cherrypy.test-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bca0effdd544c289da5808959f3ec00c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7160,
      "upload_time": "2014-09-16T11:45:04",
      "upload_time_iso_8601": "2014-09-16T11:45:04.949347Z",
      "url": "https://files.pythonhosted.org/packages/88/2a/968858d3d74c0783c7781c088a6b61f2c73f47d5b1f714b3c9d098c9eedc/lribeiro.cherrypy.test-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}