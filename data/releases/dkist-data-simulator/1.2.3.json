{
  "info": {
    "author": "AURA / NSO",
    "author_email": "stuart@cadair.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "A header generator and FITS file creator for DKIST data\n-------------------------------------------------------\n\nThis package is designed to generate sets of FITS files which represent DKIST level 0 and level 1 data.\nThese generated data should not be considered as a promise of what will be delivered when real data is obtained, these products are still a work in progress.\n\nUsing\n-----\n\nGenerating Pesudo Random Data\n#############################\n\nThe simplest way to generate data is to to use the `dkist_data_simulator.spec122.Spec122Dataset` or `dkist_data_simulator.spec214.Spec214Dataset` classes.\n\nTo generate a header::\n\n  >>> from dkist_data_simulator.spec122 import Spec122Dataset\n  >>> ds = Spec122Dataset(dataset_shape=(1, 512, 512), array_shape=(1, 512, 512), time_delta=10)\n  >>> ds.header()\n\nA complete list of headers for all frames in the dataset can be generated with the ``generate_headers`` method.\n\nIt is also possible to iterate over a dataset, this changes the ``.index`` property.\n\nThis can be used to generate a sequence of headers one at a time::\n\n  >>> header_generator = (d.header() for d in ds)\n\nIt can also be used to generate files in memory::\n\n  >>> import io\n  >>> file_generator = (d.file(io.BytesIO()) for d in ds)\n\n\nCustomising the Generated Data\n##############################\n\nTo customise the data being generated, subclass a dataset.\nTo add new headers, either the ``add_constant_key`` method, or the ``add_generator_function`` methods can be used in the constructor.\nAlso a shorthand way of having a function generate key values is to use the `dkist_data_simulator.dataset.key_function` decorator.\n\n  >>> from dkist_data_simulator.dataset import key_function\n  >>> from dkist_data_simulator.spec122 import Spec122Dataset\n  >>> class ExampleDataset(Spec122Dataset):\n  ...     def __init__(self, *args, **kwargs):\n  ...         super().__init__(*args, **kwargs)\n  ...         # Add a header key with a given, fixed value over all headers\n  ...         self.add_constant_key(\"INSTRUME\", \"Example\")\n  ...         # Add a header key with a given, single random value over all headers\n  ...         self.add_constant_key(\"EXPER_ID\")\n  ...\n  ...     @key_function(\"FRAMEVOL\")\n  ...     def framevol(self, key):\n  ...         return 10\n\n\nTo remove a key from a generated header (for instance to generate invalid data), overload the ``header()`` method and remove keys before returning::\n\n  >>> class InvalidDataset(Spec122Dataset):\n  ...     def header(self, *args, **kwargs):\n  ...         header = super().header(*args, **kwargs)\n  ...         header.pop(\"NAXIS\")\n  ...         return header\n\n\nLicense\n-------\n\nThis project is Copyright (c) AURA / NSO and licensed under\nthe terms of the BSD 3-Clause license. This package is based upon\nthe `Openastronomy packaging guide <https://github.com/OpenAstronomy/packaging-guide>`_\nwhich is licensed under the BSD 3-clause licence. See the licenses folder for\nmore information.\n\n\nContributing\n------------\n\nWe love contributions! dkist-data-simulator is open source,\nbuilt on open source, and we'd love to have you hang out in our community.\n\n**Imposter syndrome disclaimer**: We want your help. No, really.\n\nThere may be a little voice inside your head that is telling you that you're not\nready to be an open source contributor; that your skills aren't nearly good\nenough to contribute. What could you possibly offer a project like this one?\n\nWe assure you - the little voice in your head is wrong. If you can write code at\nall, you can contribute code to open source. Contributing to open source\nprojects is a fantastic way to advance one's coding skills. Writing perfect code\nisn't the measure of a good developer (that would disqualify all of us!); it's\ntrying to create something, making mistakes, and learning from those\nmistakes. That's how we all improve, and we are happy to help others learn.\n\nBeing an open source contributor doesn't just mean writing code, either. You can\nhelp out by writing documentation, tests, or even giving feedback about the\nproject (and yes - that includes giving feedback about the contribution\nprocess). Some of these contributions may be the most valuable to the project as\na whole, because you're coming to the project with fresh eyes, so you can see\nthe errors and assumptions that seasoned contributors have glossed over.\n\nNote: This disclaimer was originally written by\n`Adrienne Lowe <https://github.com/adriennefriend>`_ for a\n`PyCon talk <https://www.youtube.com/watch?v=6Uj746j9Heo>`_, and was adapted by\ndkist-data-simulator based on its use in the README file for the\n`MetPy project <https://github.com/Unidata/MetPy>`_.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dkist-data-simulator",
    "package_url": "https://pypi.org/project/dkist-data-simulator/",
    "platform": "",
    "project_url": "https://pypi.org/project/dkist-data-simulator/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dkist-data-simulator/1.2.3/",
    "requires_dist": [
      "dkist-fits-specifications",
      "hashids",
      "tqdm",
      "sunpy",
      "astropy",
      "scipy",
      "sphinx ; extra == 'docs'",
      "sphinx-automodapi ; extra == 'docs'",
      "sphinx-autodoc-typehints ; extra == 'docs'",
      "pytest ; extra == 'test'",
      "pytest-doctestplus ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "dkist-inventory (>=0.2rc1) ; extra == 'test'",
      "dkist-header-validator ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "A header generator and FITS file creator for DKIST data.",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17192637,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1641d09b03cd2ae81781e1750d977e5ca034a7b68341cb06bd7b1dcc28e85ce",
        "md5": "9b0e3fa0ac89f4f4c27b18ae0c4cfc2e",
        "sha256": "c36c6415b5f07007a2df7f7d988b594adad24c71ec18632f1757c424666b9985"
      },
      "downloads": -1,
      "filename": "dkist_data_simulator-1.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b0e3fa0ac89f4f4c27b18ae0c4cfc2e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 33722,
      "upload_time": "2021-09-02T21:04:16",
      "upload_time_iso_8601": "2021-09-02T21:04:16.690000Z",
      "url": "https://files.pythonhosted.org/packages/c1/64/1d09b03cd2ae81781e1750d977e5ca034a7b68341cb06bd7b1dcc28e85ce/dkist_data_simulator-1.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f953a3d618e6cba2951fb6a19815316b22fae291b80f46cea875201f8fd28e00",
        "md5": "646f2ff04cb1111a9c52bff910ffaac4",
        "sha256": "4516ddb536483ff85528d0d5de44c7bfbcce513d0961dc0bf3b595e4ef09800c"
      },
      "downloads": -1,
      "filename": "dkist_data_simulator-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "646f2ff04cb1111a9c52bff910ffaac4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 32220,
      "upload_time": "2021-09-02T21:04:18",
      "upload_time_iso_8601": "2021-09-02T21:04:18.226355Z",
      "url": "https://files.pythonhosted.org/packages/f9/53/a3d618e6cba2951fb6a19815316b22fae291b80f46cea875201f8fd28e00/dkist_data_simulator-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}