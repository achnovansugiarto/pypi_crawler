{
  "info": {
    "author": "PeopleDoc",
    "author_email": "mickael.guerin@people-doc.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# django-postgres-hot-upgrade\n\n[![Deployed to PyPI](https://img.shields.io/pypi/v/django-postgres-hot-upgrade?logo=pypi&logoColor=white)](https://pypi.org/pypi/django-postgres-hot-upgrade)\n[![Deployed to PyPI](https://img.shields.io/pypi/pyversions/django-postgres-hot-upgrade?logo=pypi&logoColor=white)](https://pypi.org/pypi/django-postgres-hot-upgrade)\n[![Continuous Integration](https://img.shields.io/github/workflow/status/peopledoc/django-postgres-hot-upgrade/CI?logo=github)](https://github.com/peopledoc/django-postgres-hot-upgrade/actions?workflow=CI)\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://www.contributor-covenant.org/version/2/0/code_of_conduct/)\n\n\nLet Django clear its PostgreSQL extensions OIDs cache, making it possible to update\nthe PostgreSQL version to a new major version on the fly.\n\n## The how\n```console\n$ pip install django-postgres-hot-upgrade\n```\n```python\nINSTALLED_APPS = [\n    ...,\n    # Warning: django_postgres_hot_upgrade requires to be placed before\n    # django.contrib.postgres otherwise it will not work.\n    'django_postgres_hot_upgrade',\n    'django.contrib.postgres',\n    ...,\n]\n```\n\n## The why\n\nPostgreSQL keeps internal ids of for various objects\n([OIDs](https://www.postgresql.org/docs/current/datatype-oid.html)). This includes\nloaded extentions. In order to interact with those extensions, Django needs to know\nthese IODs, so it loads them and, in order to avoid [unneeded\nrequests](https://code.djangoproject.com/ticket/28334?), it caches them in memory for\nthe duration of the process.\n\nSeveral PostgreSQL servers running the same version of PostgreSQL will have consistent\nOIDs but when you upgrade, OIDs can change. If one uses a PostgreSQL load balancer such\nas [pgbouncer](https://www.pgbouncer.org/) or [pgpool](https://www.pgpool.net), one\ncould be tempted to migrate between major PostgreSQL versions on the fly, avoinding\ndowntime. Indeed, for sufficiently recent versions of PostgreSQL, this would work, apart\nfrom the OID problem: if OIDs change, Django needs to update its cache.\n\n`django_postgres_hot_upgrade` memorizes the postgres version of the server after each\nconnection. When the version is updated, it clears the internal Django OIDs cache,\nforcing Django to fetch the new values.\n\n\n## The rest\n\n**Compatibility**: Please refer to versions of Python and Django tested in\n[tox.ini](tox.ini).\n\n**License**: [MIT](LICENSE)\n\n**Code of Conduct**: This project is placed under the [Contributor\nCoveneant](https://www.contributor-covenant.org/version/2/0/code_of_conduct/). Please\nreport any abuse to `joachim.jablon at people-doc.com`.\n\n\n## [Maintainers] The ugly part\n\nApart from its unit tests, this package has an integration test. In order to test the\nfeature, we need to simulate a change of OIDs caused by a live update from PG10 to PG12\nin a controlled CI environment. This is the most fragile part of the lib, and the most\nlikely to break in the future. Here's what you need to know:\n\n- `docker-compose.yml` define two databases `postgres10` and `postgres12` listening on\n  5432 and 5433 respectively.\n- `tests/django_settings.py` define a `default` database using libpq envvars. Note that\n  in the settings, we requests the tests to run on the normal database instead of\n  dedicated `test_<foo>` database.\n- The OIDs are created by Postgres when installing the extensions. This happens in\n  `tests/migrations/0001_initial.py`. The `DJANGO_REVERSE_OPERATIONS` env var controls\n  the order of the 2 extensions creation. Running the PG10 migration in normal order\n  and the PG12 migration in reverse order ensures the OIDs will be different.\n- The `runtests` script ensure the migrations run on both databases in the decided\n  order, then launches the test. Without this, the integration test would likely fail\n  because the OIDs would be the same in the two databases.\n- `tox` calls `runtests`.\n- GitHub Actions call `tox`.\n\nThe following work to launch tests locally:\n\n- run `tox` or `runtests` on fresh databases\n- run `pytests` if you know the OIDs are already properly set on the 2 databases\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/peopledoc/django-postgres-hot-upgrade",
    "keywords": "django migrations postgresql",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-postgres-hot-upgrade",
    "package_url": "https://pypi.org/project/django-postgres-hot-upgrade/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-postgres-hot-upgrade/",
    "project_urls": {
      "Homepage": "https://github.com/peopledoc/django-postgres-hot-upgrade"
    },
    "release_url": "https://pypi.org/project/django-postgres-hot-upgrade/1.0.1/",
    "requires_dist": [
      "Django (>=2.2.0)",
      "black ; extra == 'dev'",
      "check-manifest ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "isort (>=5) ; extra == 'dev'",
      "psycopg2-binary ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-django ; extra == 'dev'",
      "pytest-mock ; extra == 'dev'",
      "tox ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Django app that resets django.contrib.postgres caches that store postgres extensions OIDs",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12696308,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa872cd07e11fd0e5a6c9c1154793d95a400704470d220f4830e8207554b946d",
        "md5": "0ed7f8cfb7192364455e3cb488da7264",
        "sha256": "aa9478e7e7dc5eb53a8cd197de4b4469cdb0b72d0d4c05777e8de46076631f3e"
      },
      "downloads": -1,
      "filename": "django_postgres_hot_upgrade-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0ed7f8cfb7192364455e3cb488da7264",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5305,
      "upload_time": "2020-09-24T09:25:00",
      "upload_time_iso_8601": "2020-09-24T09:25:00.653348Z",
      "url": "https://files.pythonhosted.org/packages/aa/87/2cd07e11fd0e5a6c9c1154793d95a400704470d220f4830e8207554b946d/django_postgres_hot_upgrade-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d346ef40a593a2005b2d5833a12501a041ebf60950b788864a3050dee7db0381",
        "md5": "f6aaa01e7b159c72209bac3f0fa3e21f",
        "sha256": "187d293c60a6151f05165a88b7884ad8be4b9ae312275d9430382b1854a8437e"
      },
      "downloads": -1,
      "filename": "django-postgres-hot-upgrade-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f6aaa01e7b159c72209bac3f0fa3e21f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7737,
      "upload_time": "2020-09-24T09:25:04",
      "upload_time_iso_8601": "2020-09-24T09:25:04.602607Z",
      "url": "https://files.pythonhosted.org/packages/d3/46/ef40a593a2005b2d5833a12501a041ebf60950b788864a3050dee7db0381/django-postgres-hot-upgrade-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}