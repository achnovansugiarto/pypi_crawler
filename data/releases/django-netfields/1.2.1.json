{
  "info": {
    "author": "James Oakley",
    "author_email": "jfunk@funktronics.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Utilities"
    ],
    "description": "Django PostgreSQL Netfields\n===========================\n\n.. image:: https://secure.travis-ci.org/jimfunk/django-postgresql-netfields.png\n\nThis project is an attempt at making proper PostgreSQL net related fields for\nDjango. In Django pre 1.4 the built in ``IPAddressField`` does not support IPv6\nand uses an inefficient ``HOST()`` cast in all lookups. As of 1.4 you can use\n``GenericIPAddressField`` for IPv6, but the casting problem remains.\n\nIn addition to the basic ``IPAddressField`` replacement a ``CIDR`` and\na ``MACADDR`` field have been added. This library also provides a manager that\nallows for advanced IP based lookup directly in the ORM.\n\nIn Python, the values of the IP address fields are represented as types from\nthe ipaddress_ module. In Python 2.x, a backport_ is used. The MAC address\nfield is represented as an EUI type from the netaddr_ module.\n\n.. _ipaddress: https://docs.python.org/3/library/ipaddress.html\n.. _backport: https://pypi.python.org/pypi/ipaddress/\n.. _netaddr: http://pythonhosted.org/netaddr/\n\nDependencies\n------------\n\nCurrent version of code is targeting Django >= 1.8 support, as this relies\nheavily on ORM internals and supporting multiple versions is especially tricky.\n\nGetting started\n---------------\n\nMake sure ``netfields`` is in your ``PYTHONPATH`` and in ``INSTALLED_APPS``.\n\n``InetAddressField`` will store values in PostgreSQL as type ``INET``. In\nPython, the value will be represented as an ``ipaddress.ip_interface`` object\nrepresenting an IP address and netmask/prefix length pair unless the\n``store_prefix_length`` argument is set to `False``, in which case the value\nwill be represented as an ``ipaddress.ip_address`` object.\n\n.. code-block:: python\n\n from netfields import InetAddressField, NetManager\n\n class Example(models.Model):\n     inet = InetAddressField()\n     # ...\n\n     objects = NetManager()\n\n``CidrAddressField`` will store values in PostgreSQL as type ``CIDR``. In\nPython, the value will be represented as an ``ipaddress.ip_network`` object.\n\n.. code-block:: python\n\n from netfields import CidrAddressField, NetManager\n\n class Example(models.Model):\n     inet = CidrAddressField()\n     # ...\n\n     objects = NetManager()\n\n``MACAddressField`` will store values in PostgreSQL as type ``MACADDR``. In\nPython, the value will be represented as a ``netaddr.EUI`` object. Note that\nthe default text representation of EUI objects is not the same as that of the\n``netaddr`` module. It is represented in a format that is more commonly used\nin network utilities and by network administrators (``00:11:22:aa:bb:cc``).\n\n.. code-block:: python\n\n from netfields import MACAddressField, NetManager\n\n class Example(models.Model):\n     inet = MACAddressField()\n     # ...\n\nFor ``InetAddressField`` and ``CidrAddressField``, ``NetManager`` is required\nfor the extra lookups to be available. Lookups for ``INET`` and ``CIDR``\ndatabase types will be handled differently than when running vanilla Django.\nAll lookups are case-insensitive and text based lookups are avoided whenever\npossible. In addition to Django's default lookup types the following have been\nadded:\n\n``__net_contained``\n    is contained within the given network\n\n``__net_contained_or_equal``\n    is contained within or equal to the given network\n\n``__net_contains``\n    contains the given address\n\n``__net_contains_or_equals``\n    contains or is equal to the given address/network\n\n``__net_overlaps``\n    contains or contained by the given address\n\n``__family``\n    matches the given address family\n\n``__host``\n    matches the host part of an address regardless of prefix length\n\nThese correspond with the operators and functions from\nhttp://www.postgresql.org/docs/9.4/interactive/functions-net.html\n\n``CidrAddressField`` includes two extra lookups:\n\n``__max_prefixlen``\n    Maximum value (inclusive) for ``CIDR`` prefix, does not distinguish between IPv4 and IPv6\n\n``__min_prefixlen``\n    Minimum value (inclusive) for ``CIDR`` prefix, does not distinguish between IPv4 and IPv6\n\nDatabase Functions\n''''''''''''''''''\n\n`Postgres network address functions <https://www.postgresql.org/docs/11/functions-net.html>`_ are exposed via the ``netfields.functions`` module.  They can be used to extract additional information from these fields or to construct complex queries.\n\n.. code-block:: python\n\n from django.db.models import F\n\n from netfields import CidrAddressField, NetManager\n from netfields.functions import Family, Masklen\n\n class Example(models.Model):\n     inet = CidrAddressField()\n     # ...\n\n ipv4_with_num_ips = (\n     Example.objects.annotate(\n         family=Family(F('inet')),\n         num_ips=2 ** (32 - Masklen(F('inet')))  # requires Django >2.0 to resolve\n     )\n     .filter(family=4)\n )\n\n**CidrAddressField and InetAddressField Functions**\n\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| Postgres Function              | Django Function  | Return Type          | Description                                                    |\n+================================+==================+======================+================================================================+\n| abbrev(``T``)                  | Abbrev           | ``TextField``        | abbreviated display format as text                             |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| broadcast(``T``)               | Broadcast        | ``InetAddressField`` | broadcast address for network                                  |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| family(``T``)                  | Family           | ``IntegerField``     | extract family of address; 4 for IPv4, 6 for IPv6              |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| host(``T``)                    | Host             | ``TextField``        | extract IP address as text                                     |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| hostmask(``T``)                | Hostmask         | ``InetAddressField`` | construct host mask for network                                |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| masklen(``T``)                 | Masklen          | ``IntegerField``     | extract netmask length                                         |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| netmask(``T``)                 | Netmask          | ``InetAddressField`` | construct netmask for network                                  |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| network(``T``)                 | Network          | ``CidrAddressField`` | extract network part of address                                |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| set_masklen(``T``, int)        | SetMasklen       | ``T``                | set netmask length for inet value                              |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| text(``T``)                    | AsText           | ``TextField``        | extract IP address and netmask length as text                  |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| inet_same_family(``T``, ``T``) | IsSameFamily     | ``BooleanField``     | are the addresses from the same family?                        |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| inet_merge(``T``, ``T``)       | Merge            | ``CidrAddressField`` | the smallest network which includes both of the given networks |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n\n**MACAddressField Functions**\n\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| Postgres Function              | Django Function  | Return Type          | Description                                                    |\n+================================+==================+======================+================================================================+\n| trunc(``T``)                   | Trunc            | ``T``                | set last 3 bytes to zero                                       |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n\nIndexes\n'''''''\n\nAs of Django 2.2, indexes can be created for ``InetAddressField`` and ``CidrAddressField`` extra lookups directly on the model.\n\n.. code-block:: python\n\n from django.contrib.postgres.indexes import GistIndex\n from netfields import CidrAddressField, NetManager\n\n class Example(models.Model):\n     inet = CidrAddressField()\n     # ...\n\n     class Meta:\n         indexes = (\n             GistIndex(\n                 fields=('inet',), opclasses=('inet_ops',),\n                 name='app_example_inet_idx'\n             ),\n         )\n\nFor earlier versions of Django, a custom migration can be used to install an index.\n\n.. code-block:: python\n\n from django.db import migrations\n\n class Migration(migrations.Migration):\n     # ...\n\n     operations = [\n         # ...\n         migrations.RunSQL(\n             \"CREATE INDEX app_example_inet_idx ON app_example USING GIST (inet inet_ops);\"\n         ),\n         # ...\n     ]\n\nErrata\n------\n\n* In Django < 1.9.6 types returned in ArrayFields are strings and not ipaddress types. See\n  https://code.djangoproject.com/ticket/25143\n\nRelated Django bugs\n-------------------\n\n* 11442_ - Postgresql backend casts inet types to text, breaks IP operations and IPv6 lookups.\n* 811_ - IPv6 address field support.\n\nhttps://docs.djangoproject.com/en/dev/releases/1.4/#extended-ipv6-support is also relevant\n\n.. _11442: http://code.djangoproject.com/ticket/11442\n.. _811: http://code.djangoproject.com/ticket/811\n\n\nSimilar projects\n----------------\n\nhttps://bitbucket.org/onelson/django-ipyfield tries to solve some of the same\nissues as this library. However, instead of supporting just postgres via the proper\nfields types the ipyfield currently uses a ``VARCHAR(39)`` as a fake unsigned 64 bit\nnumber in its implementation.\n\nHistory\n-------\n\nMain repo was originally kept https://github.com/adamcik/django-postgresql-netfields\nLate April 2013 the project was moved to https://github.com/jimfunk/django-postgresql-netfields\nto pass the torch on to someone who actually uses this code actively :-)\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jimfunk/django-postgresql-netfields",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-netfields",
    "package_url": "https://pypi.org/project/django-netfields/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-netfields/",
    "project_urls": {
      "Homepage": "https://github.com/jimfunk/django-postgresql-netfields"
    },
    "release_url": "https://pypi.org/project/django-netfields/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django PostgreSQL netfields implementation",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13307970,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a78c3310dec99369a8a50f049c971dc7df661e471109cfda6961ef9b723368e9",
        "md5": "cf9ad203b360e56758652239e1a7dd11",
        "sha256": "1d6b7eb6c209390048103be9f1e8d73e39c89a277412eb6f18ee3e9e3ed4a17f"
      },
      "downloads": -1,
      "filename": "django-netfields-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cf9ad203b360e56758652239e1a7dd11",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19220,
      "upload_time": "2019-12-03T04:33:16",
      "upload_time_iso_8601": "2019-12-03T04:33:16.693084Z",
      "url": "https://files.pythonhosted.org/packages/a7/8c/3310dec99369a8a50f049c971dc7df661e471109cfda6961ef9b723368e9/django-netfields-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}