{
  "info": {
    "author": "Adam Coddington",
    "author_email": "me@adamcoddington.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": ".. image:: https://travis-ci.org/coddingtonbear/django-measurement.png?branch=master\n   :target: https://travis-ci.org/coddingtonbear/django-measurement\n.. image:: https://pypip.in/v/django-measurement/badge.png\n  :target: https://crate.io/packages/django-measurement\n.. image:: https://pypip.in/d/django-measurement/badge.png\n  :target: https://crate.io/packages/django-measurement\n.. image:: https://pypip.in/license/django-measurement/badge.png\n  :target: https://pypi.python.org/pypi/django-measurement/\n\nEasily use, manipulate, and store unit-aware measurement objects using Python\nand Django.\n\n**Note**: Version 2.0 has no backward compatibility due to major design changes.\n\n`django.contrib.gis.measure <https://github.com/django/django/blob/master/django/contrib/gis/measure.py>`_\nhas these wonderful 'Distance' objects that can be used not only for storing a\nunit-aware distance measurement, but also for converting between different\nunits and adding/subtracting these objects from one another.\n\nThis module provides for a django model field and admin interface for storing\nany measurements provided by `python-measurement <https://github.com/coddingtonbear/python-measurement>`_.\n\nExample use with a model:\n\n.. code-block:: python\n\n   from django_measurement.models import MeasurementField\n   from django_measurement.measure import Volume\n   from django.db import models\n   \n   class BeerConsumptionLogEntry(models.Model):\n       name = models.CharField(max_length=255)\n       volume = MeasurementField(Volume)\n   \n       def __unicode__(self):\n           return u\"%s of %s\" % (self.name, self.volume)\n\n   entry = BeerConsumptionLogEntry()\n   entry.name = 'Bear Republic Racer 5'\n   entry.volume = Volume(us_pint=1)\n   entry.save()\n\nThese stored measurement objects can be used in all of the usual ways supported\nby `python-measurement <https://github.com/coddingtonbear/python-measurement>`_\ntoo:\n\n.. code-block:: python\n\n   >>> from django_measurement.measures import Weight\n   >>> weight_1 = Weight(lb=125)\n   >>> weight_2 = Weight(kg=40)\n   >>> added_together = weight_1 + weight_2\n   >>> added_together\n   Weight(lb=213.184976807)\n   >>> added_together.kg  # Maybe I actually need this value in kg?\n   96.699\n\n- Documentation for django-measurement is available an\n  `ReadTheDocs <http://django-measurement.readthedocs.org/>`_.\n- Please post issues on\n  `Github <http://github.com/coddingtonbear/django-measurement/issues>`_.\n- Test status available on\n  `Travis-CI <https://travis-ci.org/coddingtonbear/django-measurement>`_.\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/coddingtonbear/django-measurement/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-measurement",
    "package_url": "https://pypi.org/project/django-measurement/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-measurement/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/coddingtonbear/django-measurement/"
    },
    "release_url": "https://pypi.org/project/django-measurement/2.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Convenient fields and classes for handling measurements",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13031245,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f55868d2b65475dfd18d81dd9f0b43b0bd220ee2c3c76d51748423163bb27b26",
        "md5": "e3a2c5dec35c9724770efd3a898bf68b",
        "sha256": "cd7b8ea5a4544a0ea28260ff2f724725faaebc952f482945218918748eac0a8e"
      },
      "downloads": -1,
      "filename": "django-measurement-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e3a2c5dec35c9724770efd3a898bf68b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4532,
      "upload_time": "2015-12-21T13:49:25",
      "upload_time_iso_8601": "2015-12-21T13:49:25.224154Z",
      "url": "https://files.pythonhosted.org/packages/f5/58/68d2b65475dfd18d81dd9f0b43b0bd220ee2c3c76d51748423163bb27b26/django-measurement-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}