{
  "info": {
    "author": "Aaron Esau",
    "author_email": "python@aaronesau.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# About\n\nMeissner Lop is a dictionary-based mutation-based exploit fuzzer for XSS.\n\n![xss](https://raw.githubusercontent.com/Arinerron/meissner/master/tests/run.gif)\n\n# Installation\n### Automatic\n\n```bash\npip3 install meissner\n```\n\n### Manual\n\n```\ngit clone https://github.com/arinerron/meissner.git\ncd meissner\nsudo ./setup.py install\n```\n\n# Usage\n\n```\nusage: meissner [-h] [--no-ansi] [--log-level LOG_LEVEL] [--url URL] [--dictionary DICTIONARY] [--threads THREADS] [--filter FILTER] [--engine ENGINE] [cmd [cmd ...]]\n\nMeissner Lop - XSS Filter Bypass Exploit Fuzzer\n\npositional arguments:\n  cmd                   the command to execute, where {xss} is the injection point\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --no-ansi, -c         disable ANSI coloring on all output\n  --log-level LOG_LEVEL, -v LOG_LEVEL\n                        set logging level\n  --url URL, --uri URL, -u URL\n                        use a URL harness, where {xss} is the injection point\n  --dictionary DICTIONARY, --dict DICTIONARY, -d DICTIONARY\n                        the Meissner mutation dictionary to use\n  --threads THREADS, --threads-count THREADS, -t THREADS\n                        the number of threads allocated to use for engines\n  --filter FILTER, -f FILTER\n                        pass the input through a filter before the program\n  --engine ENGINE, --browser ENGINE, -e ENGINE\n                        the browser rendering engine to use\n```\n\n## General\n\nWhen entering a URL, simply put the string `{xss}` where you would like to insert XSS payloads. For example:\n\n```bash\nmeissner --url 'https://example.com/vulnerable.php?query={xss}'\n```\n\nAdditionally, if you have a script that outputs the generated HTML, Meissner Lop can work with you. For example, if a mutation XSS CTF challenge provides source and you setup a local instance at `https://localhost:8080/xss.php`, you may use that as the URL. It is more efficient to run instances locally as HTTP requests will not have to travel across the internet.\n\nMeissner can also provide XSS payloads through `argv` if you have an executable that generates HTML output. This option is by far the most efficient as it removes need for HTTP servers/clients and networking.\n\nFor example, if your executable is called `./give-me-flag`, you may use the tool like:\n\n```bash\nmeissner -- ./give-me-flag '{xss}'\n```\n\nIf the `{xss}` argument is not found in the arguments, Meissner will assume that you would like payloads to be passed through stdin/stdout.\n\n# Limitations\n\n- The tool does not attempt to abide by any character or length restrictions. This does not mean that it will not work for your specific XSS vulnerability, however; just that it may take longer to find something as the tool is not specifically trying to abide by restrictions.\n- Meissner does not attempt to parse HTML and bypass filters in that way; rather, it is a \"dumb\" fuzzer and prioritizes based on cases it considers interesting. However, it can brute-force XSS challenges MUCH faster than you can. I'd recommend running this tool in the background while you manually solve challenges.\n- The fuzzer may take the fun of the challenge away from you. If you are playing a CTF for fun, then solve the challenge by hand! ... unless you get some sort of odd satisfaction from using tools to solve all your problems like I do--in which case, by all means, use this tool.\n\n# TODO\n- double URL encoding\n\n- New features\n    - more intelligent fuzzing\n        - detect \"interesting\" cases and prioritize them\n    - more mutations\n        - randomly pick bytes to encode with HTML entities\n    - make HTTP requests more flexible\n        - random user agent generation\n        - `POST`, `PUT`, etc requests\n        - cookies\n        - proxies\n        - requests from a file\n    - support custom filters through Python files (use stdin/stdout)\n    - if `{xss}`not found in stdin/stdout, write through stdin\n    - saving and restoring progress\n- Fix bugs / race conditions (search for `XXX: ` in the code!)\n    - expose some of the hardcoded timeouts to the CLI\n- Write documentation\n- Create more / better dictionaries\n- Optimizations!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Arinerron/meissner",
    "keywords": "ctf xss hacking mutation fuzzer fuzzing fuzz dictionary attack attacking injection scripting",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meissner",
    "package_url": "https://pypi.org/project/meissner/",
    "platform": "",
    "project_url": "https://pypi.org/project/meissner/",
    "project_urls": {
      "Homepage": "https://github.com/Arinerron/meissner"
    },
    "release_url": "https://pypi.org/project/meissner/1.0.2/",
    "requires_dist": [
      "smartbytes",
      "selenium",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "a dictionary-based XSS mutation fuzzer",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6953883,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f4d74d74c75c564df0dadd0e10b80fccc6931a18ab9e06f1e3f0713fa58afb5",
        "md5": "6667d5c9e98a03bff980ee82e0f803af",
        "sha256": "e068de5754cb3384b7e44df05bf770e2a65e7d4368c245a041048bfa8453c025"
      },
      "downloads": -1,
      "filename": "meissner-1.0.2-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "6667d5c9e98a03bff980ee82e0f803af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16627,
      "upload_time": "2020-04-05T03:56:26",
      "upload_time_iso_8601": "2020-04-05T03:56:26.942121Z",
      "url": "https://files.pythonhosted.org/packages/9f/4d/74d74c75c564df0dadd0e10b80fccc6931a18ab9e06f1e3f0713fa58afb5/meissner-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da6e1d5e6150f1b2ab41b6715b5b627afee65569848425bb8e0c219b970e3821",
        "md5": "b8c04dea6c59af649e9d6a236caf47f9",
        "sha256": "1f614db7d5a6d4ef8fd73397bef703d17b79c53ab14b46aa31bbd4a931995944"
      },
      "downloads": -1,
      "filename": "meissner-1.0.2.tar.gz",
      "has_sig": true,
      "md5_digest": "b8c04dea6c59af649e9d6a236caf47f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15324,
      "upload_time": "2020-04-05T03:56:28",
      "upload_time_iso_8601": "2020-04-05T03:56:28.369418Z",
      "url": "https://files.pythonhosted.org/packages/da/6e/1d5e6150f1b2ab41b6715b5b627afee65569848425bb8e0c219b970e3821/meissner-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}