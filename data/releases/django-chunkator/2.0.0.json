{
  "info": {
    "author": "PeopleDoc",
    "author_email": "rd@people-doc.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "================\ndjango-chunkator\n================\n\n\nChunk large QuerySets into small chunks, and iterate over them without killing\nyour RAM.\n\n.. image:: https://travis-ci.org/peopledoc/django-chunkator.svg\n\nTested with all the combinations of:\n\n* Python: 3.5, 3.6, 3.7, 3.8\n* Django: 2, 2.1, 2.2, 3.0, master\n\n\n.. note::\n\n    Django 3.0 is incompatible with Python 3.5, see <https://docs.djangoproject.com/en/3.0/releases/3.0/#python-compatibility>\n\nUsage\n=====\n\n.. code:: python\n\n    from chunkator import chunkator\n    for item in chunkator(LargeModel.objects.all(), 200):\n        do_something(item)\n\nThis tool is intended to work on Django querysets.\n\nYour model **must** define a ``pk`` field (this is done by default, but\nsometimes it can be overridden) and this pk has to be unique. ``django-\nchunkator`` has been tested with PostgreSQL and SQLite, using regular PKs and\nUUIDs as primary keys.\n\nYou can also use ``values()``:\n\n.. code:: python\n\n    from chunkator import chunkator\n    for item in chunkator(LargeModel.objects.values('pk', 'name'), 200):\n        do_something(item)\n\n.. important::\n\n    If you're using ``values()`` you **have** to add at least your \"pk\" field\n    to the values, otherwise, the chunkator will throw a\n    ``MissingPkFieldException``.\n\n.. warning::\n\n    This will not **accelerate** your process. Instead of having one BIG query,\n    you'll have several small queries. This will save your RAM instead, because\n    you'll not load a huge queryset result before looping on it.\n\nIf you want to manipulate the pages directly, you can use `chunkator_page`:\n\n.. code:: python\n\n    from chunkator import chunkator_page\n    queryset = LargeModel.objects.all().values('pk')\n    for page in chunkator_page(queryset, 200):\n        launch_some_task([item['pk'] for item in page])\n\nLicense\n=======\n\nMIT License.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/peopledoc/django-chunkator",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-chunkator",
    "package_url": "https://pypi.org/project/django-chunkator/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-chunkator/",
    "project_urls": {
      "Homepage": "https://github.com/peopledoc/django-chunkator"
    },
    "release_url": "https://pypi.org/project/django-chunkator/2.0.0/",
    "requires_dist": [
      "django"
    ],
    "requires_python": "",
    "summary": "Chunk large QuerySets into small chunks, and iterate over them without killing your RAM.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12696312,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e20c3b02663d901ddbdbc89a7b98de4cdae768214b0931921a14953ef058eb0",
        "md5": "4eb33cdff127c777d6d7f080e97d0904",
        "sha256": "210713faf05d68035d067de9b015868b3d902d5405865401384a3c134f64c43a"
      },
      "downloads": -1,
      "filename": "django_chunkator-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4eb33cdff127c777d6d7f080e97d0904",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3317,
      "upload_time": "2020-06-22T13:17:28",
      "upload_time_iso_8601": "2020-06-22T13:17:28.297589Z",
      "url": "https://files.pythonhosted.org/packages/1e/20/c3b02663d901ddbdbc89a7b98de4cdae768214b0931921a14953ef058eb0/django_chunkator-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "acc3b3dd9b543068294cb6cae2b965aba927ac71b8adf17e5255ec2f0632cf78",
        "md5": "8619a53f456be3a6ce786ee54deeeda5",
        "sha256": "57d705966762e6ba6879c2344a1b9288045f64c638fa47cbe00467f0eeeadfaf"
      },
      "downloads": -1,
      "filename": "django-chunkator-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8619a53f456be3a6ce786ee54deeeda5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3612,
      "upload_time": "2020-06-22T13:17:29",
      "upload_time_iso_8601": "2020-06-22T13:17:29.984724Z",
      "url": "https://files.pythonhosted.org/packages/ac/c3/b3dd9b543068294cb6cae2b965aba927ac71b8adf17e5255ec2f0632cf78/django-chunkator-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}