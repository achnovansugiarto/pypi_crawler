{
  "info": {
    "author": "PeopleDoc",
    "author_email": "rd@people-doc.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "================\ndjango-chunkator\n================\n\n\nChunk large QuerySets into small chunks, and iterate over them without killing\nyour RAM.\n\n.. image:: https://travis-ci.org/novafloss/django-chunkator.svg\n\nTested with all the combinations of:\n\n* Python: 2.7, 3.4, 3.5.\n* Django: 1.8 (LTS), 1.9, 1.10, 1.11.\n\nAlso, tested the following:\n\n* Python 3.6 + Django 1.11\n* Python 3.4, 3.5, 3.6 + Django \"master\".\n\nUsage\n=====\n\n.. code:: python\n\n    from chunkator import chunkator\n    for item in chunkator(LargeModel.objects.all(), 200):\n        do_something(item)\n\nThis tool is intended to work on Django querysets.\n\nYour model **must** define a ``pk`` field (this is done by default, but\nsometimes it can be overridden) and this pk has to be unique. ``django-\nchunkator`` has been tested with PostgreSQL and SQLite, using regular PKs and\nUUIDs as primary keys.\n\nYou can also use ``values()``:\n\n.. code:: python\n\n    from chunkator import chunkator\n    for item in chunkator(LargeModel.objects.values('pk', 'name'), 200):\n        do_something(item)\n\n.. important::\n\n    If you're using ``values()`` you **have** to add at least your \"pk\" field\n    to the values, otherwise, the chunkator will throw a\n    ``MissingPkFieldException``.\n\n.. warning::\n\n    This will not **accelerate** your process. Instead of having one BIG query,\n    you'll have several small queries. This will save your RAM instead, because\n    you'll not load a huge queryset result before looping on it.\n\nIf you want to manipulate the pages directly, you can use `chunkator_page`:\n\n.. code:: python\n\n    from chunkator import chunkator_page\n    queryset = LargeModel.objects.all().values('pk')\n    for page in chunkator_page(queryset, 200):\n        launch_some_task([item['pk'] for item in page])\n\nLicense\n=======\n\nMIT License.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/novafloss/django-chunkator",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-chunkator",
    "package_url": "https://pypi.org/project/django-chunkator/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-chunkator/",
    "project_urls": {
      "Homepage": "https://github.com/novafloss/django-chunkator"
    },
    "release_url": "https://pypi.org/project/django-chunkator/1.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Chunk large QuerySets into small chunks, and iterate over them without killing your RAM.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12696312,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e8368a5a8b3600f65e8edf548e75d4de6a8b7342175bddee8ae9d586a961730",
        "md5": "90b38028ee0835cdb989b2d7960c2061",
        "sha256": "6fe6816803b0acfc315061d681c5095ebea3a16e2bafde8b04b9ccc966986089"
      },
      "downloads": -1,
      "filename": "django_chunkator-1.3.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "90b38028ee0835cdb989b2d7960c2061",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 5247,
      "upload_time": "2017-09-14T07:28:24",
      "upload_time_iso_8601": "2017-09-14T07:28:24.740428Z",
      "url": "https://files.pythonhosted.org/packages/3e/83/68a5a8b3600f65e8edf548e75d4de6a8b7342175bddee8ae9d586a961730/django_chunkator-1.3.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8184698dde683053e2f431109dfa8756fb8a233d722f6f30e751b512cd9454e8",
        "md5": "e0f14641e1bcf8f17f84b288445ac973",
        "sha256": "42f12a96a48acbc1590f1b55159df414fa8138ab0f82a99919f6ebe7f5f0cf86"
      },
      "downloads": -1,
      "filename": "django-chunkator-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e0f14641e1bcf8f17f84b288445ac973",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3694,
      "upload_time": "2017-09-14T07:27:49",
      "upload_time_iso_8601": "2017-09-14T07:27:49.939847Z",
      "url": "https://files.pythonhosted.org/packages/81/84/698dde683053e2f431109dfa8756fb8a233d722f6f30e751b512cd9454e8/django-chunkator-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}