{
  "info": {
    "author": "PeopleDoc",
    "author_email": "rd@people-doc.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "================\ndjango-chunkator\n================\n\n\nChunk large QuerySets into small chunks, and iterate over them without killing\nyour RAM.\n\n.. image:: https://travis-ci.org/peopledoc/django-chunkator.svg\n\nTested with all the combinations of:\n\n* Python: 2.7, 3.5, 3.6, 3.7, 3.8\n* Django: 1.11, 2, 2.1, 2.2, master\n\n\nUsage\n=====\n\n.. code:: python\n\n    from chunkator import chunkator\n    for item in chunkator(LargeModel.objects.all(), 200):\n        do_something(item)\n\nThis tool is intended to work on Django querysets.\n\nYour model **must** define a ``pk`` field (this is done by default, but\nsometimes it can be overridden) and this pk has to be unique. ``django-\nchunkator`` has been tested with PostgreSQL and SQLite, using regular PKs and\nUUIDs as primary keys.\n\nYou can also use ``values()``:\n\n.. code:: python\n\n    from chunkator import chunkator\n    for item in chunkator(LargeModel.objects.values('pk', 'name'), 200):\n        do_something(item)\n\n.. important::\n\n    If you're using ``values()`` you **have** to add at least your \"pk\" field\n    to the values, otherwise, the chunkator will throw a\n    ``MissingPkFieldException``.\n\n.. warning::\n\n    This will not **accelerate** your process. Instead of having one BIG query,\n    you'll have several small queries. This will save your RAM instead, because\n    you'll not load a huge queryset result before looping on it.\n\nIf you want to manipulate the pages directly, you can use `chunkator_page`:\n\n.. code:: python\n\n    from chunkator import chunkator_page\n    queryset = LargeModel.objects.all().values('pk')\n    for page in chunkator_page(queryset, 200):\n        launch_some_task([item['pk'] for item in page])\n\nLicense\n=======\n\nMIT License.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/peopledoc/django-chunkator",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-chunkator",
    "package_url": "https://pypi.org/project/django-chunkator/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-chunkator/",
    "project_urls": {
      "Homepage": "https://github.com/peopledoc/django-chunkator"
    },
    "release_url": "https://pypi.org/project/django-chunkator/1.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Chunk large QuerySets into small chunks, and iterate over them without killing your RAM.",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12696312,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a692cab3d8411da8cd703ea7cd6b2a0a7ae105cadf7aa8d8fc9abc0d843a92b",
        "md5": "ffda93d8db8230a5b1dcd0c1d155627d",
        "sha256": "ded57d95dbd49a36371e02f25714e89b3a9bcbb68a4c11dcf5b364c04fee2f66"
      },
      "downloads": -1,
      "filename": "django_chunkator-1.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ffda93d8db8230a5b1dcd0c1d155627d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4183,
      "upload_time": "2020-02-05T08:29:46",
      "upload_time_iso_8601": "2020-02-05T08:29:46.136784Z",
      "url": "https://files.pythonhosted.org/packages/3a/69/2cab3d8411da8cd703ea7cd6b2a0a7ae105cadf7aa8d8fc9abc0d843a92b/django_chunkator-1.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f8d0229d4947ce0b45104d8b4343b82644c5f7808e453bcd6247bdd8621490b",
        "md5": "7fd9a6e7a5d53cb2dadf4d40b10ca2fb",
        "sha256": "27b29f782cb2cff0af4ff7419b51f9e3e5a82e08c42231360bc98a538603353d"
      },
      "downloads": -1,
      "filename": "django-chunkator-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7fd9a6e7a5d53cb2dadf4d40b10ca2fb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3633,
      "upload_time": "2020-02-05T08:29:22",
      "upload_time_iso_8601": "2020-02-05T08:29:22.168872Z",
      "url": "https://files.pythonhosted.org/packages/2f/8d/0229d4947ce0b45104d8b4343b82644c5f7808e453bcd6247bdd8621490b/django-chunkator-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}