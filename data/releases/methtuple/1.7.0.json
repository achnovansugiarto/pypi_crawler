{
  "info": {
    "author": "Peter Hickey",
    "author_email": "peter.hickey@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# methtuple\n\n![Python package](https://github.com/PeteHaitch/methtuple/actions/workflows/python.yaml/badge.svg)\n\n## Overview\n\n### What does it do?\n\n`methtuple` allows the user to investigate the co-occurence of methylation marks at the level of individual DNA fragments. It does this by performing methylation calling at _m-tuples_ of methylation loci from high-throughput bisulfite sequencing data, such as _methylC-seq_. In short, `methtuple` extracts and tabulates the methylation states of all m-tuples from a SAM/BAM file (for a user-defined value of _m_).\n\n### Why would I want to do that?\n\nA typical read from a bisulfite-sequencing experiment reports a binary methylated or unmethylated measurement at multiple loci. Each read originates from a single cell. Because methylation calls are made from individual reads/read-pairs, we can investigate the co-occurence of methylation events at the level of individual DNA fragments.\n\nI have been using `methtuple` to investigate the spatial dependence of DNA methylation at the level of individual DNA fragments by studying methylation patterns of CpG 2-tuples. `methtuple` can also be used as a drop-in replacement for `bismark_methylation_extractor` while also providing enhanced filtering options and a slightly faster runtime (10-20% faster, albeit with an increased memory usage).\n\n### What is an m-tuple?\n\nThe simplest _m-tuple_ is the 1-tuple (_m_ = 1). `methtuple` tabulates the number of reads that are methylated (_M_) and unmethylated (_U_) for each methylation 1-tuple in the genome. 1-tuples are the type of methylation calling performed by most methylation calling software such as Bismark's `bismark_methylation_extractor`.\n\nA 2-tuple (_m_ = 2) is a pair of methylation loci. `methtuple` tabulates the number of reads that methylated at each locus in the pair (_MM_), both unmethylated (_UU_) or methylated at one locus but not the other (_MU_ or _UM_). This idea readily extends to 3-tuples, 4-tuples, etc.\n\nIn its default settings, and with _m_ > 1, `methtuple` tries to create only m-tuples made of \"neighbouring\" loci. However, please see the example below for why I say this only \"tries\" to create m-tuples of neighbouring loci. For a DNA fragment containing _k_ methylation loci there are _k - m + 1_ m-tuples made of neighbouring loci.\n\nAlternatively, we can create all combinations of m-tuples by using the `--all-combinations` flag. For a DNA fragment containing _k_ methylation loci there are \"_k_ choose _m_\" m-tuples when using `--all-combinations`, a number that grows rapidly in _k_, particularly when _m_ is close to _k/2_.\n\nRegardless of how m-tuples are constructed, `methtuple` always takes care to only count each methylation locus once when it has been twice-sequenced by overlapping paired-end reads.\n\n### Draw me a picture\n\nWell, I hope ASCII art will do.\n\nSuppose we sequence a region of the genome containing five methylation loci with three paired-end reads (`A`, `B` and `C`):\n\n```text\nref: 1    2   3 4 5\nA_1: |----->\nA_2:         <------|\nB_1: |----->\nB_2:           <----|\nC_1:    |----->\nC_2:      <------|\n```\n\nIf we are interested in 1-tuples, then we would obtain the following from each read by running `methtuple`:\n\n```text\nA: {1}, {2}, {3}, {4}, {5}\nB: {1}, {2}, {4}, {5}\nC: {2}, {3}, {4}\n```\n\nThis result is true regardless of whether the `--all-combinations` flag is set.\n\nIf we are interested in 3-tuples, then we would obtain the following from each read by running `methtuple` in its default mode:\n\n```text\nA: {1, 2, 3}, {2, 3, 4}, {3, 4, 5}\nB: {1, 2, 4}, {2, 4, 5}\nC: {2, 3, 4}\n```\n\nThings to note:\n\n* Read-pair `A` sequences all three (= 5 - 3 + 1) \"neighbouring\" 3-tuples\n* Read-pair `B` sequences none of the \"neighbouring\" 3-tuples but does \"erroneously\" construct two non-neighbouring 3-tuples. This happens because m-tuples are created independently from each read-pair; effectively, read-pair `B` is \"unaware\" of methylation locus `3`. Depending on the downstream analysis, you may want to _post-hoc_ filter out these \"non-neighbouring\" m-tuples.\n* The twice-sequenced methylation loci, `2` and `3`, in read-pair `C` are not double counted.\n\nHowever, if we were to run `methtuple` with `--all-combinations` then we would obtain:\n\n```text\nA: {1, 2, 3}, {2, 3, 4}, {3, 4, 5}, {1, 2, 4}, {1, 2, 5}, {1, 3, 4}, {1, 3, 5}, {1, 4, 5}, {2, 3, 5}, {2, 4, 5}\nB: {1, 2, 4}, {2, 4, 5}, {1, 2, 5}, {1, 4, 5}\nC: {2, 3, 4}\n```\n\n## Installation and dependencies\n\n`methtuple` is written in Python and relies upon the `pysam` module. __NOTE: `methtuple` now requires `pysam v0.8.4` or greater.__\n\nRunning `python setup.py install` will attempt to install `pysam` if it isn't found on your system. Alternatively, instructions for installing `pysam` are available from [https://github.com/pysam-developers/pysam](https://github.com/pysam-developers/pysam).\n\nI have extensively used and tested `methtuple` with Python 2.7. It should also work on Python 3.2, 3.3, 3.4, and 3.5 with the current version of `pysam` (`v0.8.4`), as indicated by the [Travis-CI builds](https://travis-ci.org/PeteHaitch/methtuple).\n\n### Using `pip`\n\nThe simplest way:\n\n```sh\npip install methtuple\n```\n\n`methtuple` is written in Python and requires the `pysam` module. __NOTE: `methtuple` now requires `pysam v0.8.4` or greater.__\n\nAlternatively, after cloning or downloading the `methtuple` git repositority, simply run:\n\n```sh\npython setup.py install\n```\n\nin the root `methtuple` directory should work for most systems.\n\n## Usage\n\n### Basic usage\n\n`methtuple` processes a single SAM or BAM file and works for both single-end and paired-end sequencing data. Example BAM files from single-end directional and paired-end directional bisulfite-sequencing experiments are available in the `data/` directory.\n\nMethylation measurements may be filtered by base quality or other criteria such as the mapping quality of the read or whether the read is marked as a PCR duplicate. For a full list of filtering options, please run `methtuple --help` or see the __Advanced Usage__ section below.\n\nCurrently, the SAM/BAM file must have been created with [Bismark](http://www.bioinformatics.bbsrc.ac.uk/projects/download.html#bismark). If the data were aligned with Bismark version < 0.8.3 please use the `--aligner Bismark_old` flag. Please file an issue if you would like to use a SAM/BAM file created with another aligner and I will do my best to support it.\n\nThe main options to pass `methtuple` are the size of the m-tuple (`-m`); the type of methylation, which is some combination of _CG_, _CHG_, _CHH_ and _CNN_ (`--methylation-type`); any filters to be applied to reads or positions within reads (see below); the SAM/BAM file; and the sample name, which will be used as a prefix for all output files. Multiple methylation types may be specified jointly, e.g., `--methylation-type CG --methylation-type CHG`\n\n### Output\n\nThree output files are created and summary information is written to `STDOUT`. The main output file is a tab-delimited file of all m-tuples, `<in>.<--methylation-type>.<-m>[ac].tsv`, where `<in>` is the prefix of the `<in.bam>|<in.sam>` SAM/BAM file and `ac` is added if the `--all-combinations` flag was used, e.g., `SRR949207.CG.2ac.tsv`. Output files may be gzipped (`--gzip`) or bzipped (`--bzip2`).\n\nHere are the first 5 rows (including with the header row) from `data/se_directional.fq.gz_bismark_bt2.CG.2.tsv`, which is created by running the single-end directional example shown below:\n\n```text\nchr     strand  pos1    pos2    MM      MU      UM      UU\nchr1    +       6387768 6387783 1       0       0       0\nchr1    +       7104116 7104139 1       0       0       0\nchr1    +       7104139 7104152 1       0       0       0\nchr1    +       9256170 9256179 0       0       0       1\n```\n\nSo, for example, at the CpG 2-tuple chr1:+:(6,387,768, 6,387,783) we observed 1 read that was methylated at chr1:+:6,387,768 and methylated at chr1:+:6,387,783.\n\nThe `strand` is recorded as `+` (forward strand, \"OT\" in Bismark), `-` (reverse strand, \"OB\" in Bismark) or `*`, meaning not applicable (if the `--strand-collapse` option is set). The position of all methylation loci is always with respect to the forward strand.\n\nThe second file (`<in>.<--methylation-type>_per_read.hist`) is a text histogram of the number of methylation loci per read/readpair (of the type specified by `--methylation-type`) that passed the filters specified at runtime of `methtuple`.\n\nHere is the file `data/se_directional.fq.gz_bismark_bt2.CG_per_read.hist`, which is created by running the single-end directional example shown below:\n\n```text\nn       count\n0       4561\n1       2347\n2       789\n3       296\n4       144\n5       61\n6       29\n7       19\n8       3\n9       4\n10      2\n11      1\n12      3\n13      4\n14      1\n18      2\n```\n\nSo, 4,561 reads aligned to a position containing no CpGs while 2 reads aligned to a position containing 18 CpGs.\n\nAn optional third and final file (`<in>.reads_that_failed_QC.txt>`) records the querynames (`QNAME`) of all reads that failed to pass quality control filters and which filter the read failed. This file may be omitted by use of the `--no-failed-filter-file` flag.\n\nIn this case we didn't set any quality control filters and so this file is empty.\n\n### Examples\n\nTwo small example datasets are included in the `data/` directory. Included are the FASTQ files and the SAM/BAM files generated with __Bismark__ in __Bowtie2__ mode. More details of the example datasets can be found in `data/README.md`\n\nAlthough the example datasets are both from directional bisulfite-sequencing protocols, `methtuple` also works with data from non-directional bisulfite-sequencing protocols.\n\n#### Single-end reads\n\nThe following command will extract all CpG 2-tuples from the file `data/se_directional.bam`:\n\n```sh\nmethtuple -m 2 --methylation-type CG data/se_directional.fq.gz_bismark_bt2.bam\n```\n\nThis results in 3 files:\n\n* `data/se_directional.fq.gz_bismark_bt2.CG.2.tsv`\n* `data/se_directional.fq.gz_bismark_bt2.CG_per_read.hist`\n* `data/se_directional.fq.gz_bismark_bt2.reads_that_failed_QC.txt`\n\n#### Paired-end reads\n\nPaired-end data must firstly be sorted by queryname prior to running `methtuple`. BAM files created by Bismark, such as `data/pe_directional.bam`, are already sorted by queryname. So, to extract all CG/CHH 3-tuples we would simply run:\n\n```sh\nmethtuple -m 3 --methylation-type CG --methylation-type CHH data/pe_directional_1.fq.gz_bismark_bt2_pe.bam\n```\n\nThis results in 3 files:\n\n* `data/pe_directional_1.fq.gz_bismark_bt2_pe.CG_CHH.3.tsv`\n* `data/pe_directional_1.fq.gz_bismark_bt2_pe.CG_CHH_per_read.hist`\n* `data/pe_directional_1.fq.gz_bismark_bt2_pe.reads_that_failed_QC.txt`\n\n##### Note on sort-order of paired-end SAM/BAM files\n\nIf your paired-end SAM/BAM file is sorted by genomic coordinates, then you must first sort the SAM/BAM by queryname and then run `methtuple` on the queryname-sorted SAM/BAM. This can be done by using `samtools sort` with the `-n` option or Picard's `SortSam` function with the `SO=queryname` option:\n\n```sh\n# Create a coordinate-sorted SAM/BAM for the sake of argument\nsamtools sort data/pe_directional_1.fq.gz_bismark_bt2_pe.bam data/cs_pe_directional_1.fq.gz_bismark_bt2_pe\n# Re-sort the coordinate-sorted BAM by queryname\nsamtools sort -n data/cs_pe_directional_1.fq.gz_bismark_bt2_pe.bam data/qs_pe_directional_1.fq.gz_bismark_bt2_pe\n# Run methtuple on the queryname sorted BAM\nmethtuple -m 3 --methylation-type CG --methylation-type CHG data/qs_pe_directional_1.fq.gz_bismark_bt2_pe.bam\n```\n\n### Memory usage and running time\n\nFor a rough indication of performance, here are the results for processing approximately 40,000,000 100bp paired-end reads from chr1 of a 20-30x coverage whole-genome methylC-seq experiment of human data. This analysis used a single AMD Opteron 6276 CPU (2.3GHz) on a shared memory system.\n\n#### `-m 2`\n\nMemory usage peaked at 1.9GB and the running time was approximately 5 hours.\n\n#### `-m 2 --all-combinations`\n\nMemory usage peaked at 7GB and the running time was approximately 5.5 hours.\n\nUse of the `--all-combinations` flag creates all possible m-tuples, including non-neighbouring ones. This produces many more m-tuples and so increases the memory usage.\n\n#### `-m 5`\n\nMemory usage peaked at 1.5GB and the running time was approximately 4.3 hours.\n\n### Helper script\n\nI frequently work with large, coordinate-sorted SAM/BAM files. To speed up the extraction of m-tuples, I use a simple parallelisation strategy with [GNU parallel](http://www.gnu.org/software/parallel/). The idea is to split the SAM/BAM file into chromosome-level SAM/BAM files, process each chromosome-level SAM/BAM separately and then recombine these chromosome-level files into a genome-level file. The script `helper_scripts/run_methtuple.sh` implements this strategy; simply edit the key variables in this script or adapt it to your own needs. Please check the requirements listed in `helper_scripts/run_methtuple.sh`.\n\n#### Warnings\n\n* __WARNING__: This simple strategy uses as many cores as there are chromosomes. This can result in __very__ large memory usage, depending on the value of `-m`, and may cause problems if you have more chromosomes than available cores.\n* __WARNING__: The script `tabulate_hist.R` must be in the same directory as `run_methtuple.sh`\n\n### Advanced usage\n\nA full list of options is available by running `methtuple --help`:\n\n```text\nusage: methtuple [options] <in.bam>|<in.sam>\nPlease run 'methtuple -h' for a full list of options.\n\nExtract methylation patterns at m-tuples of methylation loci from the aligned\nreads of a bisulfite-sequencing experiment. Currently only supports SAM/BAM\nfiles created with Bismark.\n\nInput options:\n  <in.bam>|<in.sam>     Input file in BAM or SAM format. Use - to specify STDIN.\n                        The header must be included and alignments must have\n                        been done using Bismark.\n  --aligner {Bismark,Bismark_old}\n                        The aligner used to generate the SAM/BAM file.\n                        Bismark_old refers to Bismark version < 0.8.3 (default:\n                        Bismark)\n  --Phred64             Quality scores are encoded as Phred64 rather than\n                        Phred33 (default: False)\n\nOutput options:\n  -o PREFIX, --output-prefix PREFIX\n                        By default, all output files have the same prefix as\n                        that of the input file. This will override the prefix of\n                        output file names\n  --sc, --strand-collapse\n                        Collapse counts across across Watson and Crick strands.\n                        Only possible for CG methylation type. The strand is\n                        recorded as '*' if this option is selected. (default:\n                        False)\n  --nfff, --no-failed-filter-file\n                        Do not create the file listing the reads that failed to\n                        pass to pass the filters and which filter it failed\n                        (default: False)\n  --gzip                gzip all output files. --gzip and --bzip2 are mutually\n                        exclusive (default: False)\n  --bzip2               bzip2 all output files. --gzip and --bzip2 are mutually\n                        exclusive (default: False)\n\nConstruction of methylation loci m-tuples:\n  --mt {CG,CHG,CHH,CNN}, --methylation-type {CG,CHG,CHH,CNN}\n                        The methylation type. Multiple methylation types may be\n                        analysed jointly by repeated use of this argument, e.g.,\n                        --methylation-type CG --methylation-type CHG. The\n                        default ('None') corresponds to CG (default: None)\n  -m <int>              The size of the m-tuples, i.e., the 'm' in m-tuples\n                        (default: 1)\n  --ac, --all-combinations\n                        Create all combinations of m-tuples, including non-\n                        neighbouring m-tuples. WARNING: This will greatly\n                        increase the memory usage, particularly for larger\n                        values of -m and when analysing non-CG methylation\n                        (default: False)\n\nFiltering of reads:\n  Applied before filtering of bases\n\n  --id, --ignore-duplicates\n                        Ignore reads that have been flagged as PCR duplicates\n                        by, for example, Picard's MarkDuplicates function. More\n                        specifically, ignore reads with the 0x400 bit in the\n                        FLAG (default: False)\n  --mmq <int>, --min-mapq <int>\n                        Ignore reads with a mapping quality score (mapQ) less\n                        than <int> (default: 0)\n  --of {sequence_strict,sequence,XM_strict,XM,XM_ol,quality,Bismark}, --overlap-filter {sequence_strict,sequence,XM_strict,XM,XM_ol,quality,Bismark}\n                        The type of check to be performed (listed roughly from\n                        most-to-least stringent): Ignore the read-pair if the\n                        sequence in the overlap differs between mates\n                        (sequence_strict); Ignore the overlapping region if the\n                        sequence in the overlap differs between mates\n                        (sequence); Ignore the read-pair if the XM-tag in the\n                        overlap differs (XM_strict); Ignore the overlapping\n                        region if the XM-tag in the overlap differs between\n                        mates (XM); Ignore any positions in the overlapping\n                        region where the XM-tags differ between the mates\n                        (XM_ol); Use the mate with the higher average quality\n                        basecalls in the overlapping region (quality); Use the\n                        first mate of each read-pair, i.e., the method used by\n                        bismark_methylation_extractor with the --no_overlap flag\n                        (Bismark) (default: XM_ol)\n  --uip, --use-improper-pairs\n                        Use the improper read-pairs, i.e. don't filter them.\n                        More specifically, check the 0x2 FLAG bit of each read;\n                        the exact definition of an improper read-pair depends on\n                        the aligner and alignment parameters (default: False)\n\nFiltering of bases:\n  Applied after filtering of reads\n\n  --ir1p VALUES, --ignore-read1-positions VALUES\n                        If single-end data, ignore these read positions from all\n                        reads. If paired-end data, ignore these read positions\n                        from just read_1 of each pair. Multiple values should be\n                        comma-delimited, ranges can be specified by use of the\n                        hyphen and all positions should use 1-based co-\n                        ordinates. For example, 1-5,80,95-100 corresponds to\n                        ignoring read-positions 1, 2, 3, 4, 5, 80, 98, 99, 100.\n                        (default: None)\n  --ir2p VALUES, --ignore-read2-positions VALUES\n                        Ignore these read positions from just read_2 of each\n                        pair if paired-end sequencing. Multiple values should be\n                        comma-delimited, ranges can be specified by use of the\n                        hyphen and all positions should use 1-based co-\n                        ordinates. For example, 1-5,80,95-100 corresponds to\n                        ignoring read-positions 1, 2, 3, 4, 5, 80, 98, 99, 100.\n                        (default: None)\n  --mbq <int>, --min-base-qual <int>\n                        Ignore read positions with a base quality score less\n                        than <int> (default: 0)\n\nOther:\n  -v, --version         show program's version number and exit\n  -h, --help            show this help message and exit\n\nmethtuple (v1.7.0) by Peter Hickey (peter.hickey@gmail.com,\nhttps://github.com/PeteHaitch/methtuple/)\n```\n\n## Limitations and notes\n\nThese are current limitations and their statuses:\n\n### Only works with data aligned with the __Bismark__ mapping software\n\n`methtuple` makes use of Bismark's custom SAM tags `XM`, `XR` and `XG`. The `XM` tag is used to infer the methylation state of each sequenced cytosine while the `XR` and `XG` tags are used to infer the orientation and strand of the alignment. If the data were aligned with Bismark version < 0.8.3 please use the `--oldBismark` flag.\n\nPlease file an issue if you would like to use a SAM/BAM file created with another aligner and I will do my best to support it; also, see [Issue #30](https://github.com/PeteHaitch/methtuple/issues/30)\n\n### Paired-end data must be sorted by queryname and it is recommended that SAMtools is used to do this\n\nSorting paired-end data by queryname (`QNAME`) is required in order to avoid expensive lookups when finding the mate of a paired-end read. `methtuple` requires that read_1 always occurs before read_2 in each pair. Unfortunately, the SAM specifications provides no guarantee about the relative order of `read_1` and `read_2` when they have identical `QNAME` and the file is sorted by queryname.\n\nThe SAM/BAM file created by Bismark is already in the required order and so this is not an issue. However, if the SAM/BAM file produced by Bismark has sunsequently been re-sorted in some way (e.g., sorted by genomic co-ordinates for use with Picard's MarkDuplicates utility), then the file will need to be re-sorted. According to Heng Li, one of the developer's of SAMtools, \"samtools sort starts to put `read_1` before `read_2` since 0.1.19, released on 03/19/2013.\" ([https://github.com/samtools/hts-specs/issues/5#issuecomment-106797588](https://github.com/samtools/hts-specs/issues/5#issuecomment-106797588)). Therefore, `samtools sort -n` is the recommended way to sort the SAM/BAM file by queryname in order to ensure that `read_1` occurs before `read_2`. The helper script `helper_scripts/run_methtuple.sh` works with a coordinate-sorted SAM/BAM file and does so by including a step to sort the chromosome-level SAM/BAM files by queryname using `samtools sort -n`.\n\n### The `--aligner Bismark_old` option is a bit crude\n\nSpecifically, it assumes that there are no '/' characters in the read names (`QNAME`) and that the SAM/BAM has not been processed with any other programs, e.g. Picard's MarkDuplicates, that might change the `FLAG` field. Please file an issue or submit a pull request if you would like this improved.\n\n### Construction of \"non-neighbouring\" m-tuples\n\nAs discussed in the above example, `methtuple` tries not to create \"non-neighbouring\" m-tuples, however, these do occur due to m-tuples being created independently from each read/read-pair. I do not make use of non-neighbouring m-tuples in my downstream analyses and so I _post-hoc_ filter these out.\n\nIf you would like the option to create all possible m-tuples, both \"neighbouring\" and \"non-neighbouring\", please let me know at [https://github.com/PeteHaitch/methtuple/issues/85](https://github.com/PeteHaitch/methtuple/issues/85) as there is a simple solution that just awaits motivation for me to implement it.\n\n### Choice of `--overlap-filter`\n\nThe two mates of a paired-end read, `read_1` and `read_2`, often overlap in bisulfite-sequencing data. `methtuple` ensures that the overlapping sequence isn't double-counted and offers several different choices of how overlapping paired-end reads are processed via the `--overlap-filter` flag. Listed roughly from most-to-least stringent these are:\n\n1. `sequence_strict`: Check that the entire overlapping sequence is identical; if not identical then do not use any methylation calls from the entire read-pair.\n2. `sequence`: Check that the entire overlapping sequence is identical; if not identical then do not use any methylation calls from the overlap.\n3. `XM_strict`: Check that the XM-tag is identical for the overlapping region; if not identical then do not use any methylation calls from the entire read-pair.\n4. `XM`: Check that the XM-tag is identical for the overlapping region; if not identical then do not use any methylation calls from the overlap.\n5. `XM_ol`: Check that the XM-tag is identical for the overlapping region; if not identical then exclude those positions of disagreement and count once the remaining positions in the overlap.\n6. `quality`: No check of the overlapping bases; simply use the read with the higher average quality basecalls in the overlapping region.\n7. `Bismark`: No check of the overlapping bases; simply use the overlapping bases from read_1, i.e., the method used by `bismark_methylation_extractor` with the `--no_overlap` flag.\n\n### Other notes\n\n* Bismark-Bowtie1 always sets the mapping quality (`mapQ`) as the value 255, which means unavailable in the SAM format specification. Thus the `--min-mapq` option will not have any effect for Bismark-Bowtie1 data.\n* `methtuple` skips paired-end reads where either mate is unmapped.\n\n## Acknowledgements\n\nA big thank you to [Felix Krueger](http://www.bioinformatics.babraham.ac.uk/people.html) (the author of Bismark) for his help in understanding mapping of bisulfite-sequencing data and for answering my many questions along the way.\n\nThanks also to Tobias Sargeant ([@folded](https://github.com/folded)) for his help in turning the original `methtuple.py` script into the current Python module `methtuple` and for help in setting up a testing framework.\n\n## Questions and comments\n\nPlease use the [GitHub Issue Tracker](www.github.com/PeteHaitch/methtuple) to file bug reports or request new functionality. I welcome questions and comments; you can email me at <peter.hickey@gmail.com>.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PeteHaitch/methtuple",
    "keywords": "bisulfite sequencing methylation bismark bioinformatics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "methtuple",
    "package_url": "https://pypi.org/project/methtuple/",
    "platform": "",
    "project_url": "https://pypi.org/project/methtuple/",
    "project_urls": {
      "Homepage": "https://github.com/PeteHaitch/methtuple"
    },
    "release_url": "https://pypi.org/project/methtuple/1.7.0/",
    "requires_dist": [
      "pysam (>=0.8.4)"
    ],
    "requires_python": "",
    "summary": "methtuple",
    "version": "1.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13408121,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da1dda760a305d1bc66b619bcb202ab37530aa57c3651a74a6882645ef1f8891",
        "md5": "546ebff5bcb26dd84dd796d66d253c76",
        "sha256": "480157df34a21c83a2ab555f8d420b1c628fd5eab5ad7bb0badebb5d6e5815af"
      },
      "downloads": -1,
      "filename": "methtuple-1.7.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "546ebff5bcb26dd84dd796d66d253c76",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 55011,
      "upload_time": "2022-02-10T04:36:14",
      "upload_time_iso_8601": "2022-02-10T04:36:14.560586Z",
      "url": "https://files.pythonhosted.org/packages/da/1d/da760a305d1bc66b619bcb202ab37530aa57c3651a74a6882645ef1f8891/methtuple-1.7.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0aabe0dc92910dd30580ac2047cd9acb7295bdb4dad89f9afd72b4c59fef10aa",
        "md5": "4016c67d36b4df6e0f83fc8e4062f5b1",
        "sha256": "51c5f0f5c859e6d2317d2d1df92256a02100572753e1e1eeccb8c57fc2265466"
      },
      "downloads": -1,
      "filename": "methtuple-1.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4016c67d36b4df6e0f83fc8e4062f5b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 53548,
      "upload_time": "2022-02-10T04:36:16",
      "upload_time_iso_8601": "2022-02-10T04:36:16.792878Z",
      "url": "https://files.pythonhosted.org/packages/0a/ab/e0dc92910dd30580ac2047cd9acb7295bdb4dad89f9afd72b4c59fef10aa/methtuple-1.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}