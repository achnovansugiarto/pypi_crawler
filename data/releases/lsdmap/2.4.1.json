{
  "info": {
    "author": "Clementi group",
    "author_email": "eh22@rice.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "LSDMap\n======\n\nLSDMap package is used to compute Locally Scaled Diffusion Map. \nTypical usage is to call the \"lsdmap\" script:\n\n\tlsdmap -f <configuration_file> -c <structure_file> <other_options>\n\nor using MPI:\n\n\tmpiexec -n <number_of_processors> lsdmap -f <configuration_file> -c <structure_file> <other_options>\n\nA typical example of configuration file is ./examples/lsdmap/config.ini\nThe structure file should contain all the configurations needed to compute\nLSDMap. After execution of the script, a .ev and a .eg file should have\nbeen generated containing the eigenvectors and eigenvalues, respectively. \n\nSee the paper W. Zheng, M. A. Rohrdanz, M. Maggioni and C. Clementi, J. Chem. Phys., 2011, 134, 144109 for more information on how LSDMap works.\n\nInstallation\n------------\n\nThe install with pip is following:\n\n       pip install numpy\n       pip install Cython\n       pip install lsdmap\n\nAn alternative installation is:\n1. First, make sure that you have NumPy, SciPy, mpi4py and cython\n   installed. If not, get them from http://numpy.scipy.org/,\n   http://mpi4py.scipy.org/, http://cython.org/. Compile/install them.\n\n2. From the main lsdmap distribution directory run this command\n   (plus any extra flags, e.g., --prefix or --user to specify the\n   installation directory):\n\n        python setup.py install\n\nAfter installation, make sure that the folder bin inside your installation\ndirectory is included in your PATH. It contains the executable \"lsdmap\"\nthat is used to compute LSDMap. \nTests can be run in the folder examples/lsdmap. This folder contains the structure file aladip_1000.gro\nwhich contains 1000 configurations of alanine dipeptide in vacuum and\nan example of configuration file (.ini) that should be used to compute\nLSDMap. To test the program, simply type in this folder:\n\n\tlsdmap -f config.ini -c aladip_1000.gro\n\nAfter execution, a file \".ev\" and a file \".eg\" must have been generated.\nThey contain the eigenvectors and eigenvalues of the Fokker-Planck operator,\nrespectively. In the file \".ev\", the first column corresponds to the values\nof the first eigenvector (largest eigenvalue), the second column corresponds\nto the values of the second one, and so on. The first line corresponds to\nthe values of the eigenvectors for the first configuration given in the\nstructure file, the second line corresponds to the second configuration, \nand so on.\n\nLSDMap can be computed using MPI using a command similar to:\n\n\tmpiexec -n <number_of_processors> lsdmap -f <configuration_file> -c <structure_file>\n\nFor more information on lsdmap command, simply type:\n\n\tlsdmap -h\n\n\n\nDM-d-MD\n=======\n\nDM-d-MD (Diffusion-Map directed Molecular Dynamics) is an adaptive sampling\nalgorithm based on LSDMap. For an introduction to DM-d-MD, see the paper\nJ.Preto and C. Clementi, Phys. Chem. Chem. Phys., 2014, 16, 19181-19191.\n\nBesides LSDMap, DM-d-MD requires GROMACS to be correctly installed.\n\nDM-d-MD is automatically installed when installing LSDMap via the command:\n\n        python setup.py install\n\nA typical usage of DM-d-MD is to call:\n\n\tdmdmd -f <configuration_file>\n\n\nPrerequisites\n-------------\n\nIn order to use DM-d-MD, it is required that GROMACS has been correctly\ninstalled and that \"grompp\" and \"mdrun\" commands are working properly\nfor a serial utilization. If not, please visit http://www.gromacs.org/.\n\n\nTesting\n-------\n\nThe Folder examples/dmdmd contains an example of DM-d-MD configuration\nfile (dmdmd.ini) as well as files required to run GROMACS MD simulations\nfor the photoactive yellow protein (PYP). DM-d-MD can be launched by \nexecuting the command:\n\n\tdmdmd -f dmdmd.ini\n\nwithin the specified folder.\n\n\nDiffusion-Map Sampling\n======================\n\nDMap Sampling (Diffusion Map Sampling) is our most recent adaptive sampling\nalgorithm. It combines LSDMap and techniques from Umbrella Sampling, metadynamics\nto offer the best way of exploring configuration spaces of macromolecular\nsystems and estimating their free energy landscapes.\n\nDMap Sampling consists in conducting biased Molecular Dynamics simulations (MD)\nwhere the biased potential is a local estimate of the free energy of the \nsystem along Diffusion Map coordinates. Since DMap coordinates are associated\nwith slow time scales of MD simulations, it becomes easier to explore a wider \nregion of the configuration space without remaining in local minima. To run\nthe biased MD, an appropriate modified version of GROMACS is needed. To install\nit, see the paragraph Installation below.\n\n\nInstallation\n------------\n\nIn order to use DMap sampling, one should meet the following requirements:\n\n1. Installing the LSDMap package from the 'dmaps' branch, i.e., by first using:\n\n\tgit checkout dmaps\n\nthen installing the lsdmap package using \n\n\tpython setup.py install\n\nNote that this version of LSDMap requires a shared \".so\" library of python.\nThis library can be generated during the installation of python by using the\noption \"--enable-shared\" when configuring python:\n\n\t./configure --enable-shared ...\n\n2. Installing the modified (serial, simple precision) version of GROMACS. The\npackage can be git-cloned using the following command:\n\n\tgit clone git://git.code.sf.net/p/dmaps-gromacs/code dmaps-gromacs-code\n\n   Note that the package contains a modified version of GROMACS 4.6.1. Once cloned,\n   follow the following steps to install the package: \n\n   a. Create the GROMACS Makefile. The modified version of GROMACS should\n      be configured similarly to the standard version of GROMACS 4.6, with\n      single precision and GPU and MPI options disabled. Please refer to\n      http://www.gromacs.org/Documentation/Installation_Instructions_4.6\n      for more information on how to build GROMACS. A typical way of\n      configuring our modified version of GROMACS could be the following\n      once the installation directory has been git cloned:\n\n\tcd dmaps-gromacs-code\n\tmkdir cmake-build\n\tcd cmake-build\n\tcmake .. -DGMX_BUILD_OWN_FFTW=ON -DCMAKE_INSTALL_PREFIX=/path/to/local/directory -DGMX_GPU=OFF -DGMX_MPI=OFF\n\n      Beware that the above commands is a simple example. Some machines may\n      require additional options to have GROMACS work properly. Again, refer\n      to the GROMACS webpage above for more information.\n      \n   b. Before installing GROMACS, link the DMap Sampling library to it.\n      Before using make or make install, you should tell GROMACS that it should\n      consider a library called libdms.so at the compilation. The library\n      was created when the LSDMap package was installed. First, you\n      should find the location of this particular library. If the installation\n      of LSDMap went properly, the corresponding path should be \n      /path/to/site-packages/lsdmap/dmaps/critical/libdms.so, where \n      path/to/site-packages is the path to the python \"site-packages\" folder where\n      LSDMap has been installed. Then, starting from the folder \n      dmaps-gromacs-code that was git cloned earlier, you should edit the file\n      src/kernel/CMakeLists.txt. At line 78 in this file, \"path/to/libdms.so\" in \n      \"set(LIBDMS path/to/libdms.so)\" should be modified to correspond to the\n      absolute path to the library \"libdms.so\" that you found.\n\n   c. Compile GROMACS by typing (from the folder cmake-build that was created in\n      step a):\n\n\tmake install\n\nTesting\n-------\n\nTo run Diffusion Map Sampling, use the following command from the examples/dmaps\ndirectory:\n\n\tdmaps -f settings\n\nAs the job progresses, logging messages will be written to the console.\nIf Diffusion Map Sampling finished correclty it should have created 3 folders,\ncorresponding to the first three iterations of the DMap Sampling procedure (in\nthe file settings, niters=3 by default), called iterX, where X is the number\nof the iteration.\n\nTo analyze the results of a particular iteration, go inside the corresponding\n\"iter\" folder. From there, you can use the script phipsi.sh which is located in\nthe parent directory, by typing:\n\n\t../phipsi.sh\n\nThis will compute collective variables that are commonly used to analyze results\nof the system tested here, alanine dipeptide. A bunch of python scripts are available\nin the folder examples/dmaps/scripts to plot specific figures. For example, the\nfile examples/dmaps/scripts/plotfephipsi.py can be used to plot the free energy\nlandscape as a a function of the coordinates phi and psi computed after running\nthe script phipsi.sh. From the same \"iter\" folder, using:\n\n\tpython ../scripts/plotfephipsi.py\n\nwill plot the desired figure. Note that it requires the modules matplotlib and\ndensplot to be installed on the local host. The former can be downloaded from\nhttp://matplotlib.org/, whereas the latter can be git cloned \nfrom https://github.com/jp43/densplot and installed the usual way using \n\n\tpython setup.py install",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ClementiGroup/LSDMap",
    "keywords": null,
    "license": "LICENSE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "lsdmap",
    "package_url": "https://pypi.org/project/lsdmap/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/lsdmap/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ClementiGroup/LSDMap"
    },
    "release_url": "https://pypi.org/project/lsdmap/2.4.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "LSDMap package",
    "version": "2.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2112561,
  "urls": [],
  "vulnerabilities": []
}