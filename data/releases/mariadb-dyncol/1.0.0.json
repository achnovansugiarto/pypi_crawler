{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "==============\nmariadb-dyncol\n==============\n\n.. image:: https://img.shields.io/pypi/v/mariadb-dyncol.svg\n    :target: https://pypi.python.org/pypi/mariadb-dyncol\n\n.. image:: https://travis-ci.org/adamchainz/mariadb-dyncol.png?branch=master\n        :target: https://travis-ci.org/adamchainz/mariadb-dyncol\n\n.. image:: https://img.shields.io/pypi/dm/mariadb-dyncol.svg\n        :target: https://pypi.python.org/pypi/mariadb-dyncol\n\nPack/unpack Python ``dict``\\s into/out of MariaDB's **Dynamic Columns** format.\n\nA quick example:\n\n.. code-block:: python\n\n    >>> mariadb_dyncol.pack({\"key\": \"value\"})\n    b'\\x04\\x01\\x00\\x03\\x00\\x00\\x00\\x03\\x00key!value'\n    >>> mariadb_dyncol.unpack(mariadb_dyncol.pack({\"key\": \"value\"}))\n    {'key': 'value'}\n\nFeatures\n========\n\n* Sensible type mapping\n* Tested against binary data from MariaDB server and its test suite\n* Python 2.7 and 3 compatible\n* Fuzz tested with `hypothesis <http://hypothesis.readthedocs.org/en/latest/>`_\n\nAPI\n===\n\nAll functions and names are accessible as attributes of the ``mariadb_dyncol``\nmodule, which you can import with ``import mariadb_dyncol``.\n\n``pack(mapping)``\n-----------------\n\nPacks the given mapping (a ``dict``) into the MariaDB Dynamic Columns\nformat for named columns and returns it as a byte string (Python 3's ``bytes``,\nPython 2's ``str``). This is suitable for then inserting into a table as part\nof a normal query.\n\nThe ``dict``\\'s keys must all be unicode strings, and the values must all be\none of the supported data types:\n\n* ``int`` between ``-(2 ** 32) + 1`` and ``(2 ** 64) - 1``\n* ``str`` up to 4GB\n* ``float`` - anything except ``NaN`` or ``+/- inf``\n* ``datetime.datetime`` - full range supported\n* ``datetime.date`` - full range supported\n* ``datetime.time`` - full range supported\n* Any ``dict`` that is valid by these rules, allowing nested keys. There is no\n  nesting limit except from for MariaDB's ``COLUMN_JSON`` function which\n  restricts the depth to 10\n\nNote that this does not support the ``DECIMAL`` type that MariaDB does (and\nwould naturally map to Python's ``Decimal``) - it is a little more fiddly to\npack/unpack, though certainly possible, and pull requests are welcomed. If you\ntry and pack a ``Decimal``, a ``DynColNotSupported`` exception will be raised.\n\nThere are other restrictions on the UTF-8 encoded column names as documented in\nMariaDB:\n\n* The maximum length of a column name is 16383 bytes\n* The maximum length of all column names (at one level in nested hierarchies)\n  is 65535 bytes\n\nAll other unsupported types will raise a ``DynColTypeError``. Out of range\nvalues will raise a ``DynColValueError``.\n\nExamples:\n\n.. code-block:: python\n\n    >>> mariadb_dyncol.pack({\"a\": 1})\n    b\"0401000100000000006102\"\n    >>> mariadb_dyncol.pack({\"a\": \"ðŸ’©\"})\n    b\"0401000100000003006121F09F92A9\"\n\n``unpack(bytestring)``\n----------------------\n\nUnpacks MariaDB dynamic columns data encoded byte string into a dict; the types\nyou can expect back are those listed above. This is suitable for fetching the\ndata direct from MariaDB and decoding in Python as opposed to with MariaDB's\n``COLUMN_JSON`` function, preserving the types that JSON discards.\n\nAs noted above, ``DECIMAL`` values are not supported, and unpacking this\nwill raise ``DynColNotSupported``. Also strings will only be decoded with the\nMySQL charset ``utf8mb4`` which corresponds to the full UTF-8 spec, and such\nstrings will raise ``DynColNotSupported`` as well.\n\nUnsupported column formats, for example the old MariaDB numbered dynamic\ncolumns format, or corrupt data, will raise ``DynColValueError``.\n\nExamples:\n\n.. code-block:: python\n\n    >>> mariadb_dyncol.unpack(b\"0401000100000003006121F09F92A9\")\n    {\"a\": \"ðŸ’©\"}\n    >>> mariadb_dyncol.unpack(b\"0401000100000000006102\")\n    {\"a\": 1}\n\n\n\n\nHistory\n-------\n\n1.0.0\n-----\n\n* Support to pack and unpack the named dynamic columns format. No support for\n  DECIMAL values or strings with a non utf8mb4 charset.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/mariadb-dyncol",
    "keywords": "MariaDB",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mariadb-dyncol",
    "package_url": "https://pypi.org/project/mariadb-dyncol/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mariadb-dyncol/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/adamchainz/mariadb-dyncol"
    },
    "release_url": "https://pypi.org/project/mariadb-dyncol/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Pack/unpack Python dicts into/out of MariaDB's Dynamic Columns format.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16028321,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed743934e52b4369bdde6f5062eaed48e806d42fdcb5e21929ed7d0e922e713c",
        "md5": "3e50df23ad5f2294af6f8c209632735d",
        "sha256": "036c304e6ee2045f172d2cb49198a736b5a2dafc55690e2cb1988bcb9d07f4b0"
      },
      "downloads": -1,
      "filename": "mariadb_dyncol-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e50df23ad5f2294af6f8c209632735d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 9162,
      "upload_time": "2015-10-09T13:22:05",
      "upload_time_iso_8601": "2015-10-09T13:22:05.240506Z",
      "url": "https://files.pythonhosted.org/packages/ed/74/3934e52b4369bdde6f5062eaed48e806d42fdcb5e21929ed7d0e922e713c/mariadb_dyncol-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b191577a8b8e132b429bd6e52e8efac9240e5d9fa96515f914c9be4ac2726f45",
        "md5": "a017a9b8929c08cbff8397585d090a21",
        "sha256": "a52acda46f01e9baa47e064aa53eb3c774ee773cfee73fe9c6e02b5420b2939a"
      },
      "downloads": -1,
      "filename": "mariadb-dyncol-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a017a9b8929c08cbff8397585d090a21",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12190,
      "upload_time": "2015-10-09T13:22:15",
      "upload_time_iso_8601": "2015-10-09T13:22:15.674162Z",
      "url": "https://files.pythonhosted.org/packages/b1/91/577a8b8e132b429bd6e52e8efac9240e5d9fa96515f914c9be4ac2726f45/mariadb-dyncol-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}