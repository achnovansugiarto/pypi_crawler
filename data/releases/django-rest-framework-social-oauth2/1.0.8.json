{
  "info": {
    "author": "Philip Garnero",
    "author_email": "philip.garnero@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Django rest-framework Social Oauth2\n===================================\n\n.. image:: https://badge.fury.io/py/django-rest-framework-social-oauth2.svg\n    :target: http://badge.fury.io/py/django-rest-framework-social-oauth2\n\nThis module provides a python-social-auth and oauth2 support for django-rest-framework.\n\nThe first aim of this package is to help setting up social auth for your rest api. It also helps setting up your Oauth2 provider.\n\nThis package is relying on `python-social-auth <http://psa.matiasaguirre.net/docs/index.html>`_ and `django-oauth-toolkit <https://django-oauth-toolkit.readthedocs.org>`_.\nYou should probably read their docs if you were to go further than what is done here.\nIf you have some hard time understanding Oauth2 you can read a simple explanation `here <https://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified>`_.\n\n\nInstallation\n------------\n\nInstall with pip::\n\n    pip install django-rest-framework-social-oauth2\n\n\nAdd these apps to your `INSTALLED_APPS`\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'oauth2_provider',\n        'social_django',\n        'rest_framework_social_oauth2',\n    )\n\n\nInclude auth urls to your urls.py\n\n.. code-block:: python\n\n    urlpatterns = patterns(\n        ...\n        (r'^auth/', include('rest_framework_social_oauth2.urls')),\n    )\n\n\nAdd these context processors to your `TEMPLATE_CONTEXT_PROCESSORS`\n\n.. code-block:: python\n\n    TEMPLATE_CONTEXT_PROCESSORS = (\n        ...\n        'social_django.context_processors.backends',\n        'social_django.context_processors.login_redirect',\n    )\n\nSince Django version 1.8, the TEMPLATE_CONTEXT_PROCESSORS is deprecated, set the 'context_processors' option in the OPTIONS of a DjangoTemplates backend instead.\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            ...\n            'OPTIONS': {\n                'context_processors': [\n                    ...\n                    'social_django.context_processors.backends',\n                    'social_django.context_processors.login_redirect',\n                ],\n            },\n        }\n    ]\n\nYou can then enable the authentication classes for django rest framework by default or per view (add or update the `REST_FRAMEWORK` and `AUTHENTICATION_BACKENDS` entries to your settings.py)\n\n.. code-block:: python\n\n    REST_FRAMEWORK = {\n        ...\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n            ...\n            'oauth2_provider.contrib.rest_framework.OAuth2Authentication',\n            'rest_framework_social_oauth2.authentication.SocialAuthentication',\n        ),\n    }\n\n.. code-block:: python\n\n    AUTHENTICATION_BACKENDS = (\n        ...\n       'rest_framework_social_oauth2.backends.DjangoOAuth2',\n       'django.contrib.auth.backends.ModelBackend',\n    )\n\nThe settings of this app are:\n - DRFSO2_PROPRIETARY_BACKEND_NAME sets the name of your Oauth2 social backend (e.g Facebook), defaults to \"Django\"\n - DRFSO2_URL_NAMESPACE sets the namespace for reversing urls.\n\n\nNow go to django admin and add a new Application.\n - client_id and client_secret shouldn't be changed\n - user should be your superuser\n - redirect_uris should be left blank\n - client_type should be set to confidential\n - authorization_grant_type should be set to 'Resource owner password-based'\n - name can be set to whatever you want\n\n\nThe installation is done, you can now test the app.\n\nRemember that you need to read the docs from `python-social-auth` and `django-oauth-toolkit` if you want to go further.\nIf you want to enable a social backend (like facebook), check the docs of `python-social-auth` about `supported backends <http://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends>`_ or `django-social-auth` about `bakends system <http://python-social-auth.readthedocs.io/en/latest/configuration/django.html>`_.\n\n\nTesting the setup\n-----------------\n\n- Now that the installation is done, let's try it ! Ask a token for an user using curl :\n\n    curl -X POST -d \"client_id=<client_id>&client_secret=<client_secret>&grant_type=password&username=<user_name>&password=<password>\" http://localhost:8000/auth/token\n\n`<client_id>` and `<client_secret>` are the keys generated automatically that you can find in the model Application you created.\n\n-  Now let's imagine you need to refresh your token :\n\n    curl -X POST -d \"grant_type=refresh_token&client_id=<client_id>&client_secret=<client_secret>&refresh_token=<your_refresh_token>\" http://localhost:8000/auth/token\n\n- Now let's try something else ! Let's exchange an external token for a token linked to your app :\n\n    curl -X POST -d \"grant_type=convert_token&client_id=<client_id>&client_secret=<client_secret>&backend=<backend>&token=<backend_token>\" http://localhost:8000/auth/convert-token\n\n`<backend>` here needs to be replaced by the name of an enabled backend (facebook for example if that's the case). Note that PROPRIETARY_BACKEND_NAME is a valid backend name but there is no use to do that here.\n`<backend_token>` is for the token you got from the service utilizing an iOS app for example.\n\n- Finally, let's try revoking tokens :\n\n    - Revoke a single token :\n\n        curl -X POST -d \"client_id=<client_id>&client_secret=<client_secret>&token=<your_token>\" http://localhost:8000/auth/revoke-token\n\n    - Revoke all tokens for an user :\n\n        curl -H \"Authorization: Bearer <token>\" -X POST -d \"client_id=<client_id>\" http://localhost:8000/auth/invalidate-sessions\n\n\nIf you have any questions feel free to ask me.\n\n\nSocial Authentication\n---------------------\n\nAs you probably noticed, we enabled a default authentication backend called SocialAuthentication.\nThis backend lets you register and authenticate your users seamlessly on your api.\n\nThe class simply gets the backend name and token from the Authorization header and try to authenticate the user using the right external provider.\n\nIf the user was not registered on your app, it will create a new user to be used.\n\nExample request :\n\n    curl -H \"Authorization: Bearer <backend_name> <backend_token>\" http://localhost:8000/route/to/your/view\n\n\nFacebook Example\n----------------\n\nTo use Facebook as the authorization backend of your django-rest-framework api, your settings.py file should look like this:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        # OAuth\n        'oauth2_provider',\n        'social_django',\n        'rest_framework_social_oauth2',\n    )\n\n    TEMPLATES = [\n        {\n            ...\n            'OPTIONS': {\n                'context_processors': [\n                    ...\n                    # OAuth\n                    'social_django.context_processors.backends',\n                    'social_django.context_processors.login_redirect',\n                ],\n            },\n        }\n    ]\n\n    REST_FRAMEWORK = {\n        ...\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n            ...\n            # OAuth\n            'oauth2_provider.contrib.rest_framework.OAuth2Authentication',\n            'rest_framework_social_oauth2.authentication.SocialAuthentication',\n        )\n    }\n\n    AUTHENTICATION_BACKENDS = (\n\n        # Others auth providers (e.g. Google, OpenId, etc)\n        ...\n\n        # Facebook OAuth2\n        'social_core.backends.facebook.FacebookAppOAuth2',\n        'social_core.backends.facebook.FacebookOAuth2',\n\n        # django-rest-framework-social-oauth2\n        'rest_framework_social_oauth2.backends.DjangoOAuth2',\n\n        # Django\n        'django.contrib.auth.backends.ModelBackend',\n\n    )\n\n    # Facebook configuration\n    SOCIAL_AUTH_FACEBOOK_KEY = '<your app id goes here>'\n    SOCIAL_AUTH_FACEBOOK_SECRET = '<your app secret goes here>'\n\n    # Define SOCIAL_AUTH_FACEBOOK_SCOPE to get extra permissions from facebook. Email is not sent by default, to get it, you must request the email permission:\n    SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']\n    SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {\n        'fields': 'id, name, email'\n    }\n\n\n- You can test these settings by running the following command :\n\n    curl -X POST -d \"grant_type=convert_token&client_id=<client_id>&client_secret=<client_secret>&backend=facebook&token=<facebook_token>\" http://localhost:8000/auth/convert-token\n\nThis request returns the \"access_token\" that you should use on all HTTP requests with DRF. What is happening here is that we are converting a third-party access token (<user_access_token>) in an access token to use with your api and its clients (\"access_token\"). You should use this token on each and further communications between your system/application and your api to authenticate each request and avoid authenticating with FB every time.\n\nYou can find the id and secret of your app at https://developers.facebook.com/apps/.\n\nFor testing purposes you can use the access token `<user_access_token>` from https://developers.facebook.com/tools/accesstoken/.\n\nFor more information on how to configure python-social-auth with Facebook visit http://python-social-auth.readthedocs.io/en/latest/backends/facebook.html.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PhilipGarnero/django-rest-framework-social-oauth2",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-rest-framework-social-oauth2",
    "package_url": "https://pypi.org/project/django-rest-framework-social-oauth2/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-rest-framework-social-oauth2/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/PhilipGarnero/django-rest-framework-social-oauth2"
    },
    "release_url": "https://pypi.org/project/django-rest-framework-social-oauth2/1.0.8/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "python-social-auth and oauth2 support for django-rest-framework",
    "version": "1.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3521332,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47ac2c9e20a6f70fd394b1f6164d39bf1c424c74243dea43e9ce8e5101747465",
        "md5": "4fcf1d31707fdffec644365aa92f4c5a",
        "sha256": "5dbb611beddad85445f193c15aeb97247655357f31b4cf65c0403f9d0fc062d1"
      },
      "downloads": -1,
      "filename": "django-rest-framework-social-oauth2-1.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "4fcf1d31707fdffec644365aa92f4c5a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10360,
      "upload_time": "2017-06-18T14:36:02",
      "upload_time_iso_8601": "2017-06-18T14:36:02.015705Z",
      "url": "https://files.pythonhosted.org/packages/47/ac/2c9e20a6f70fd394b1f6164d39bf1c424c74243dea43e9ce8e5101747465/django-rest-framework-social-oauth2-1.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}