{
  "info": {
    "author": "Guitheg, Embraysite",
    "author_email": "gthgobin@gmail.com, costes.ambroise@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Environment :: GPU :: NVIDIA CUDA :: 11.3",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Desktop Environment :: File Managers",
      "Topic :: Education",
      "Topic :: Office/Business :: Financial :: Investment",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# MLCF - Machine Learning Toolkit for Cryptocurrency Forecasting  \n\nThis library provides tools for cryptocurrency forecasting and trade decision making.  \nFor now, the library provide only data tools, such as:\n\n- OHLCV file reader\n- Tools to add extern and intern indicators\n- Tools to labelize data\n- Tools to work on a set of intervals in order\n- Tools to windowed the data\n- Tools to build, save and read a dataset\n- Tools to standardize data\n- Tools to preprocess the data by filtering some windows\n\nThis library doesn't provide models or an end-to-end trade bot.\n\nFor more information, find the documentation here : <https://guitheg.github.io/mlcf>\n\n---\n\n## Installation\n\nOS officially supported:  \n\n- **Linux**  \n\nPython version officially supported:  \n\n- **3.7**  \n\n- **3.8**  \n\n- **3.9**\n\n---\n\n### Installation for Linux (python v3.7)\n\n- MLCF package\n\n```bash\npip install mlcf\n```\n\n---\n\n### Installation for Linux (python  v3.8, v3.9)\n\n```bash\npip install mlcf --no-binary TA-LIB\n```\n\n---\n\n## MLCF example module usage\n\nIn this part, we will introduce some example usage of MLCF module.\n\n---\n\n### File reader module\n\n```python\n# -----------  read file ---------------------------------\nfrom pathlib import Path\nfrom mlcf.datatools.data_reader import (\n    read_ohlcv_json_from_file,\n    read_ohlcv_json_from_dir,\n    read_json_file\n)\n\n# from a ohlcv json file\ndata = read_ohlcv_json_from_file(Path(\"tests/testdata/ETH_BUSD-15m.json\"))\n\n# from a directory, a pair, and a timeframe\npair = \"ETH_BUSD\"\ntf = \"15m\"\ndata = read_ohlcv_json_from_dir(Path(\"tests/testdata/\"), pair=pair, timeframe=tf)\n\n# read a json file (but not necessary a OHLCV file)\ndata = read_json_file(Path(\"tests/testdata/meteo.json\"), 'time', [\"time\", \"Temperature\"])\n\n# -------------------------------------------------------\n```\n\n### Indicator Module\n\n```python\n# ------------------- Indicators module -----------------------------\nfrom mlcf.indicators.add_indicators import add_intern_indicator\n\n# you can add yoursel your own indicators or features\ndata[\"return\"] = data[\"close\"].pct_change(1)\ndata.dropna(inplace=True)  # make sure to drop nan values\n\n# you can add intern indicator\ndata = add_intern_indicator(data, indice_name=\"adx\")\n# -------------------------------------------------------\n```\n\n### Label Tool\n\n```python\n# ------------------- Labelize Tool -----------------------------\nfrom mlcf.datatools.utils import labelize\n\n# A good practice is to take the mean and the standard deviation of the value you want to\n# labelize\nmean = data[\"return\"].mean()\nstd = data[\"return\"].std()\n\n# Here you give the value you want to labelize with column='return'. The new of the labels column\n# will be the name give to 'label_col_name'\ndata = labelize(\n    data,\n    column=\"return\",\n    labels=5,\n    bounds=(mean-std, mean+std),\n    label_col_name=\"label\"\n)\n```\n\n### Data Intervals Module, Standardization Tools and WindowFilter Tool\n\n```python\n# ------------------- Data Intervals Module and Standardization Tools -----------------------------\nfrom mlcf.datatools.data_intervals import DataIntervals\nfrom mlcf.datatools.standardize_fct import ClassicStd, MinMaxStd\nfrom mlcf.datatools.windowing.filter import LabelBalanceFilter\n\n# We define a dict which give us the information about what standardization apply to each columns.\nstd_by_features = {\n    \"close\": ClassicStd(),\n    \"return\": ClassicStd(with_mean=False),  # to avoid to shift we don't center\n    \"adx\": MinMaxStd(minmax=(0, 100))  # the value observed in the adx are between 0 and 100 and we\n                                       # want to set it between 0 and 1.\n}\ndata_intervals = DataIntervals.create_data_intervals_obj(data, n_intervals=10)\ndata_intervals.standardize(std_by_features)\n\n# We can apply a filter the dataset we want. Here we will filter the values in order to balance\n# the histogram of return value. For this, we use the label previously process on return.\nfilter_by_set = {\n    \"train\": LabelBalanceFilter(\"label\")  # the column we will balance the data is 'label\n                                          # the max count will be automatically process\n}\n\n# dict_train_val_test is a dict with the key 'train', 'val', 'test'. The value of the dict is a\n# WTSeries (a windowed time series).\ndict_train_val_test = data_intervals.windowing(\n    window_width=30,\n    window_step=1,\n    selected_columns=[\"close\", \"return\", \"adx\"],\n    filter_by_dataset=filter_by_set\n)\n# -------------------------------------------------------\n```\n\n### Window Iterator Tool\n\n```python\n# -------------------- Window Iterator Tool --------------------\n\n# If we don't want to use the Data Interval Module. We can simple use a WTSeries with our data.\nfrom mlcf.datatools.windowing.tseries import WTSeriesLite\n\n# To create a WTSeries from pandas.DataFrame\nwtseries = WTSeriesLite.create_wtseries_lite(\n    dataframe=data,\n    window_width=30,\n    window_step=1,\n    selected_columns=[\"close\", \"return\", \"adx\"],\n    window_filter=LabelBalanceFilter(\"label\")\n)\n\n# Or from a wtseries .h5 file:\nwtseries = WTSeriesLite.read(Path(\"/tests/testdata/wtseries.h5\"))\n\n# We can save the wtseries as a file.\nwtseries.write(Path(\"/tests/testdata\", \"wtseries\"))\n\n# we can iterate over the wtseries:\nfor window in wtseries:\n    pass\n    # Where window is a pd.Dataframe representing a window.\n\n# -------------------------------------------------------\n```\n\n### Forecast Window Iterator Tool\n\n```python\n# -------------------- Forecast Window Iterator Tool --------------------\n\n# This class allow us to iterate over a WTSeries but the iteration\n# (__getitem__) give us a tuple of 2\n\nfrom mlcf.datatools.windowing.forecast_iterator import WindowForecastIterator\n\ndata_train = WindowForecastIterator(\n    wtseries,\n    input_width=29,\n    target_width=1,  # The sum of the input_width and target_width must not exceed the window width\n                     # of the wtseries\n    input_features=[\"close\", \"adx\"],\n    target_features=[\"return\"]\n)\nfor window in data_train:\n    window_input, window_target = window\n    pass\n# -------------------------------------------------------\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Guitheg/mlcf/tree/main",
    "keywords": "finance,machine-learning,ai,deep-learning,time-series,toolkit,cryptocurrency,neural-networks,forecasting,trading-algorithm,investment,trading-agent,mlcf",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlcf",
    "package_url": "https://pypi.org/project/mlcf/",
    "platform": null,
    "project_url": "https://pypi.org/project/mlcf/",
    "project_urls": {
      "Homepage": "https://github.com/Guitheg/mlcf/tree/main"
    },
    "release_url": "https://pypi.org/project/mlcf/2.2.6/",
    "requires_dist": [
      "pandas-ta",
      "tsfresh",
      "sklearn",
      "tables",
      "TA-Lib"
    ],
    "requires_python": ">=3.7",
    "summary": "MLCF - Machine Learning Toolkit for Cryptocurrency Forecasting",
    "version": "2.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13989483,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2e59aa4dfade68b55d4ae21985a0c98c42416609afd64967e7586cbe0e07503",
        "md5": "cea0e2cef4d7de71228d7448415c5231",
        "sha256": "a1e031ce2748d29dea6001b83e686099159a0ef395552b0bed67836889ad5a9e"
      },
      "downloads": -1,
      "filename": "mlcf-2.2.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cea0e2cef4d7de71228d7448415c5231",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 56547,
      "upload_time": "2022-05-31T15:12:18",
      "upload_time_iso_8601": "2022-05-31T15:12:18.835581Z",
      "url": "https://files.pythonhosted.org/packages/b2/e5/9aa4dfade68b55d4ae21985a0c98c42416609afd64967e7586cbe0e07503/mlcf-2.2.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47e29c59279b213973da4578a7bcb5940192870d1f9c11764d79ab386b9b7912",
        "md5": "1aa348d4888cb99104a7ced5617346a4",
        "sha256": "0253187165ed6e5581473dc1e23587ced0dee23315e875f25d2d57d2d206d5b7"
      },
      "downloads": -1,
      "filename": "mlcf-2.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "1aa348d4888cb99104a7ced5617346a4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 49089,
      "upload_time": "2022-05-31T15:12:20",
      "upload_time_iso_8601": "2022-05-31T15:12:20.688186Z",
      "url": "https://files.pythonhosted.org/packages/47/e2/9c59279b213973da4578a7bcb5940192870d1f9c11764d79ab386b9b7912/mlcf-2.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}