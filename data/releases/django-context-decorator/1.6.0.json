{
  "info": {
    "author": "Tobias Kunze",
    "author_email": "r@rixx.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "django-context-decorator\n------------------------\n\n.. image:: https://img.shields.io/travis/rixx/django-context-decorator.svg\n   :target: https://travis-ci.org/rixx/django-context-decorator\n   :alt: Continuous integration\n\n.. image:: https://img.shields.io/codecov/c/github/rixx/django-context-decorator.svg\n   :target: https://codecov.io/gh/rixx/django-context-decorator\n   :alt: Coverage\n\n.. image:: https://img.shields.io/pypi/v/django-context-decorator.svg\n   :target: https://pypi.python.org/pypi/django-context-decorator\n   :alt: PyPI\n\n``django-context-decorator`` is a Python package for Django removing the need\nto call ``super().get_context_data(**kwargs)`` in nearly every Django view.\n\nYou can also read the `blog post`_ about this package.\n\nUsage\n=====\n\n.. code-block:: python\n\n   from django_context_decorator import context\n   from django.utils.functional import cached_property\n   from django.views.generic import TemplateView\n\n   class MyView(TemplateView):\n       template_name = 'path/to/template.html'\n\n       @context\n       def context_variable(self):\n           return 'context value'\n\n       @context\n       @property\n       def context_property(self):\n           return 'context property'\n\n       @context\n       @cached_property\n       def expensive_context_property(self):\n           return 'expensive context property'\n\nNow you'll have access to ``{{ context_variable }}``, ``{{ context_property }}``\nand ``{{ expensive_context_property }}`` in your template.\n\nPlease note: While this package works with the ``@cached_property`` decorator,\nplease make sure to add the ``@context`` decorator **above** the\n``@cached_property`` decorator.\n\nThis is especially useful when you couple it with inheritance, because it\nallows you to re-use parent class variables without having to extract them from\nyour ``context``. So you could write a long-form like this:\n\n.. code-block:: python\n\n    from django.views.generic import TemplateView\n\n\n    class BaseMixin:\n\n        def get_context_data(self, **kwargs):\n            ctx = super().get_context_data(**kwargs)\n            ctx['var_from_base_mixin'] = 'var_from_base_mixin'\n            return ctx\n\n\n    class View1(BaseMixin, TemplateView):\n\n        def get_context_data(self, **kwargs):\n            ctx = super().get_context_data(**kwargs)\n            ctx['var_from_view_1'] = 'value_from_view_1'\n            return ctx\n\n\n    class View2(View1):\n\n        def get_context_data(self, **kwargs):\n            ctx = super().get_context_data(**kwargs)\n            ctx['var_from_view_2'] = 'value_from_view_2'\n            return ctx\n\ninstead like this:\n\n.. code-block:: python\n\n    from django.views.generic import TemplateView\n    from django_context_decorator import context\n\n\n    class BaseMixin:\n\n        @context\n        def var_from_base_mixin(self):\n            return 'var_from_base_mixin'\n\n\n    class View1(BaseMixin, TemplateView):\n\n        @context\n        def var_from_view_1(self):\n            return 'value_from_view_1'\n\n\n    class View2(View1):\n\n        @context\n        def var_from_view_2(self):\n            return 'value_from_view_2'\n\n\n\nLimitations\n===========\n\nDue to the usage of ``__set_name__``, this package is limited to Python 3.6+.\n\nDevelopment\n===========\n\nAll code resides in ``django_context_decorator.py``. Tests are collected by\n``pytest`` from all files starting with ``test_``. To run tests, start a\nvirtual environment, install the dependencies, and run ``pytest``::\n\n    pip install django pytest pytest-cov\n    pytest --cov-report term --cov=django_context_decorator\n\n.. _blog post: https://rixx.de/blog/a-context-decorator-for-django/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rixx/django-context-decorator",
    "keywords": "django context templates",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-context-decorator",
    "package_url": "https://pypi.org/project/django-context-decorator/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-context-decorator/",
    "project_urls": {
      "Homepage": "https://github.com/rixx/django-context-decorator"
    },
    "release_url": "https://pypi.org/project/django-context-decorator/1.6.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A context decorator for Django views",
    "version": "1.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6119117,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "659d4f4ab5c8d7d4355fe57d68d4f114d7dfa37c19facfea54c3328caa04bd3b",
        "md5": "fdc67689201bac9c902318d2af053aef",
        "sha256": "6b4ba53811362c359221da243dd8db19c02891bb493e984e4dbe5edfd54f40b5"
      },
      "downloads": -1,
      "filename": "django_context_decorator-1.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fdc67689201bac9c902318d2af053aef",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3255,
      "upload_time": "2019-11-11T19:19:46",
      "upload_time_iso_8601": "2019-11-11T19:19:46.675410Z",
      "url": "https://files.pythonhosted.org/packages/65/9d/4f4ab5c8d7d4355fe57d68d4f114d7dfa37c19facfea54c3328caa04bd3b/django_context_decorator-1.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9b6438d311b3b53e92ecc8083b890758157120dad763567bbb3e42b439a3947",
        "md5": "5a338b1c0ab020f4b5cf62b8ba9f239f",
        "sha256": "4a70acd422165807710873cfa5e0cbf9e24ad2548b065f726e404f9473997e29"
      },
      "downloads": -1,
      "filename": "django_context_decorator-1.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5a338b1c0ab020f4b5cf62b8ba9f239f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3336,
      "upload_time": "2019-11-11T19:19:48",
      "upload_time_iso_8601": "2019-11-11T19:19:48.083238Z",
      "url": "https://files.pythonhosted.org/packages/e9/b6/438d311b3b53e92ecc8083b890758157120dad763567bbb3e42b439a3947/django_context_decorator-1.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}