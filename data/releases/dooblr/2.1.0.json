{
  "info": {
    "author": "Tyler Crumpton",
    "author_email": "tyler.crumpton@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "|Logo|\n\ndooblr - The Data Doubler\n=========================\n\n|Build Status|\n\nUtility for duplicating data received over MQTT to InfluxDB.\n\nInstallation\n------------\nIn the very near future, **dooblr** will be able to be installed via pypi/pip. Until then, or if you want the latest,\nbleeding-edge version, you can install it by cloning or downloading the repo and running ``pip install`` inside the\nroot directory::\n\n    pip install ./\n\nYou should then be able to run **dooblr**::\n\n    dooblr\n    \nDocker\n------\n**dooblr** has also been conveniently Dockerized!\n\nYou will want to mount or copy your configs into the container at the ```/root/.dooblr``` directory.  An example of how Makers Local 256 uses dooblr can be found in the [makerslocal/dooblr-prod](https://github.com/makerslocal/dooblr-prod) repo.\n\nExample:\n\n    docker run -v $(pwd)/config:/root/.dooblr makerslocal/dooblr:latest\n\nConfiguration\n-------------\n**dooblr** is configured using YAML files, and these files are stored in the user's home directory. On Linux-based\nsystems they'll need to be in a directory like::\n\n    /home/<username>/.dooblr/\n\nOn Windows they're loaded from somewhere like::\n\n    C:\\Users\\<username>\\.dooblr\\\n\nAfter the first run of **dooblr**, this directory will be created, and some default configuration files will be there.\n**dooblr** requires a main ``dooblr.yml`` that defines MQTT and InfluxDB connections, and one or more measurement\nconfigs.\n\nA default-settings ``dooblr.yml`` config file will look like::\n\n    # dooblr.yaml\n    global:\n        config-dir: /home/<username>/.dooblr/measurements  # Directory that contains dooblr's measurement configs\n\n    mqtt:\n        host: localhost  # Host, domain name, or IP address of the MQTT broker\n        port: 1883       # Port number of the MQTT broker\n\n    influxdb:\n        host: localhost   # Host, domain name, or IP address of the InfluxDB instance\n        port: 8086        # Port number of the InfluxDB instance\n        username: root    # Username for the InfluxDB instance\n        password: root    # Password for the InfluxDB instance\n        database: dooblr  # Database to use in InfluxDB (will be created if it doesn't exist already)\n\nBy default, **dooblr** looks for ``*.yml`` measurement configs in the ``.dooblr/measurements/`` directory. Measurement\nconfigs are used to tell **dooblr** which topics and pieces of data need to be pulled from MQTT and pushed to InfluxDB.\n**dooblr** expects the MQTT message to contain simple JSON data in its payload.\n\nLet's say you have a device that publishes to the ``home/kitchen/fridge/temperature`` and\n``home/kitchen/freezer/temperature`` topics with the data::\n\n    {\"temperature\": 40.1, \"units\":\"F\", \"humidity\": 0.12, \"label\": \"blue\"}\n\nYou would probably want to create a measurement config called ``temperature.yml`` that looks like::\n\n    # temperature.yml\n    temperature:\n        topics:\n        - home/kitchen/fridge/temperature\n        - home/kitchen/freezer/temperature\n        - home/kitchen/+/temperature  # Standard MQTT wildcards also apply here\n        fields:\n        - temperature\n        - humidity\n        tags:\n        - units\n        optional_tags:\n        - label  # Maybe not every message on these topics have a \"label\" property!\n\nNotice that there can be multiple topics, fields, and tags. Tags and fields refer to the tags and fields used in\nInfluxDB. Optional tags will not raise an error if they weren't defined in the MQTT message, while regular tags will.\n\n.. |Build Status| image:: https://travis-ci.org/makerslocal/dooblr.svg?branch=master\n   :target: https://travis-ci.org/makerslocal/dooblr\n\n.. |Logo| image:: https://github.com/makerslocal/dooblr/blob/master/logo/text_logo.png?raw=true\n   :height: 70px\n   :alt: dooblr logo",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/makerslocal/dooblr",
    "keywords": "",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dooblr",
    "package_url": "https://pypi.org/project/dooblr/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dooblr/",
    "project_urls": {
      "Homepage": "https://github.com/makerslocal/dooblr"
    },
    "release_url": "https://pypi.org/project/dooblr/2.1.0/",
    "requires_dist": [
      "configparser",
      "influxdb",
      "paho-mqtt",
      "pyyaml",
      "schema"
    ],
    "requires_python": "",
    "summary": "Duplicate data received over MQTT to InfluxDB",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3642715,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3d94810ffce0627c7d23c77ae289c8df3450a57f662a560600742573bc4d5e1",
        "md5": "a7b4b9985d750eeed5bcc7ef736aa3f4",
        "sha256": "cb30a2262cd167ace6ba205eaea6b5650a6f9b39e16b3ddfc9a55e2fca5c8a20"
      },
      "downloads": -1,
      "filename": "dooblr-2.1.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "a7b4b9985d750eeed5bcc7ef736aa3f4",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 10423,
      "upload_time": "2016-11-20T03:11:23",
      "upload_time_iso_8601": "2016-11-20T03:11:23.207513Z",
      "url": "https://files.pythonhosted.org/packages/d3/d9/4810ffce0627c7d23c77ae289c8df3450a57f662a560600742573bc4d5e1/dooblr-2.1.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6444c77513aa0f3fdc2b5caddad18f9e334d43cdf1b73311421157b3e0f6cf22",
        "md5": "b4886f669b30e56ed37e99c3c17a3651",
        "sha256": "f51ae6bb99a7872d83c6e0b73dbc21d25e9a27acfc0d1de4ca0ecf5c020e140d"
      },
      "downloads": -1,
      "filename": "dooblr-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b4886f669b30e56ed37e99c3c17a3651",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8102,
      "upload_time": "2016-11-20T03:11:25",
      "upload_time_iso_8601": "2016-11-20T03:11:25.552776Z",
      "url": "https://files.pythonhosted.org/packages/64/44/c77513aa0f3fdc2b5caddad18f9e334d43cdf1b73311421157b3e0f6cf22/dooblr-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}