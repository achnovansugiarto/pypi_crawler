{
  "info": {
    "author": "GoTLiuM InSPiRiT",
    "author_email": "gotlium@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Django-Db-Mailer\n================\n\n.. image:: https://api.travis-ci.org/LPgenerator/django-db-mailer.png?branch=development\n    :alt: Build Status\n    :target: https://travis-ci.org/LPgenerator/django-db-mailer\n.. image:: https://landscape.io/github/LPgenerator/django-db-mailer/master/landscape.svg\n   :target: https://landscape.io/github/LPgenerator/django-db-mailer/master\n   :alt: Code Health\n.. image:: https://api.codacy.com/project/badge/grade/ad1442e15215494499ed08b80d4c41c5\n    :target: https://www.codacy.com/app/gotlium/django-db-mailer\n    :alt: Codacy\n.. image:: https://img.shields.io/badge/python-2.6,2.7,3.4+,pypy,pypy3-blue.svg\n    :alt: Python 2.6, 2.7, 3.4+, pypy, pypy3\n    :target: https://pypi.python.org/pypi/django-db-mailer/\n.. image:: https://img.shields.io/pypi/v/django-db-mailer.svg\n    :alt: Current version on PyPi\n    :target: https://pypi.python.org/pypi/django-db-mailer/\n.. image:: https://img.shields.io/pypi/dm/django-db-mailer.svg\n    :alt: Downloads from PyPi\n    :target: https://pypi.python.org/pypi/django-db-mailer/\n.. image:: https://readthedocs.org/projects/django-db-mailer/badge/?version=latest\n    :target: http://django-db-mailer.readthedocs.org/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/badge/license-GPLv2-green.svg\n    :target: https://pypi.python.org/pypi/django-db-mailer/\n    :alt: License\n\n\nDocumentation available at `Read the Docs <http://django-db-mailer.readthedocs.org/>`_.\n\n\nWhat's that\n-----------\n| Django module to easily send emails/push/sms/tts using django templates stored on database.\n| From box you can use it with django-celery for send background messages.\n| Also you have opportunity to create reports from logs by mail categories and slug.\n| Groups with Recipients and send by model signal also available by default.\n| Can be used without any depends from programming language as a external service.\n| That app very simple to install and use on your projects.\n\n\nInstallation\n------------\n\n1. Using pip:\n\n.. code-block:: bash\n\n    $ pip install django-db-mailer\n\n2. Add the ``dbmail`` application to ``INSTALLED_APPS`` in your settings file (usually ``settings.py``)\n3. Sync database (``./manage.py syncdb`` or ``./manage.py migrate``).\n\n**Important:** South 1.0 or greater is required to run migrations.\n\n\nMail API\n--------\n\n.. code-block:: python\n\n    from dbmail.models import MailTemplate\n    from dbmail import send_db_mail\n\n    # New dbmail template\n    MailTemplate.objects.create(\n        name=\"Site welcome template\",\n        subject=\"[{{prefix}}] Welcome {{full_name}}!\",\n        message=\"Hi, {{username}}. Welcome to our site.\",\n        slug=\"welcome\",\n        is_html=False,\n    )\n\n    # Send message with created template\n    send_db_mail(\n        # slug which defined on db template\n        slug='welcome',\n\n        # recipient can be list, or str separated with comma or simple string\n        # 'user1@example.com' or 'user1@example.com, user2@example.com' or\n        # ['user1@example.com', 'user2@example.com'] or string Mail group slug\n        recipient='user1@example.com',\n\n        # All *args params will be accessible on template context\n        {\n            'username': request.user.username,\n            'full_name': request.user.get_full_name(),\n            'signup_date': request.user.date_joined,\n            'prefix': \"DbMail\",\n        },\n\n        # You can access to all model fields. For m2m and fk fields, you should use module_name\n        MyModel.objects.get(pk=1),\n\n        # Optional kwargs:\n        # backend='dbmail.backends.mail',\n        # provider='apps.utils.some.mail.provider',\n        # from_email='from@example.com'\n        # cc=['cc@example.com'],\n        # bcc=['bcc@example.com'],\n        # user=User.objects.get(pk=1),\n        #\n        # language='ru',\n        #\n        # attachments=[(filename, content, mimetype)],\n        # files=['hello.jpg', 'world.png'],\n        # headers={'Custom-Header':'Some value'},\n        #\n        # queue='default',\n        # retry_delay=300,\n        # max_retries=3,\n        # retry=True,\n        # time_limit=30,\n        # send_after=60,\n        #\n        # use_celery=True,\n    )\n\n\nSms API\n-------\n\n.. code-block:: python\n\n    from dbmail import send_db_sms\n\n\n    send_db_sms(\n        # slug which defined on db template\n        slug='welcome',\n\n        # recipient can be list, or str separated with comma or simple string\n        # '+79031234567' or +79031234567, +79031234568, +79031234569' or\n        # ['+79031234567', '+79031234568'] or string Mail group slug\n        recipient='+79031234567',\n\n        # All *args params will be accessible on template context\n        {\n            'username': request.user.username,\n            'full_name': request.user.get_full_name(),\n            'signup_date': request.user.date_joined\n        },\n\n        # You can access to all model fields. For m2m and fk fields, you should use module_name\n        MyModel.objects.get(pk=1),\n\n        # Optional kwargs:\n        # backend='dbmail.backends.sms',\n        # provider='dbmail.providers.nexmo.sms',\n        # from_email='DBMail'\n        # user=User.objects.get(pk=1),\n        #\n        # language='ru',\n        #\n        # queue='default',\n        # retry_delay=300,\n        # max_retries=3,\n        # retry=True,\n        # time_limit=30,\n        # send_after=60,\n        #\n        # use_celery=True,\n    )\n\n\n\nText to speech API\n------------------\n\n.. code-block:: python\n\n    from dbmail import send_db_tts\n\n\n    send_db_tts(\n        # slug which defined on db template\n        slug='welcome',\n\n        # recipient can be list, or str separated with comma or simple string\n        # '+79031234567' or +79031234567, +79031234568, +79031234569' or\n        # ['+79031234567', '+79031234568'] or string Mail group slug\n        recipient='+79031234567',\n\n        # All *args params will be accessible on template context\n        {\n            'username': request.user.username,\n            'full_name': request.user.get_full_name(),\n            'signup_date': request.user.date_joined\n        },\n\n        # You can access to all model fields. For m2m and fk fields, you should use module_name\n        MyModel.objects.get(pk=1),\n\n        # Optional kwargs:\n        # backend='dbmail.backends.tts',\n        # provider='dbmail.providers.nexmo.tts',\n        # from_email='DBMail'\n        # user=User.objects.get(pk=1),\n        #\n        # language='ru',\n        #\n        # queue='default',\n        # retry_delay=300,\n        # max_retries=3,\n        # retry=True,\n        # time_limit=30,\n        # send_after=60,\n        #\n        # use_celery=True,\n    )\n\n\n*Text to speech supported by default provider. But maybe not supported by your provider.*\n\n\nPush notification API\n---------------------\n\n.. code-block:: python\n\n    from dbmail import send_db_push\n\n\n    send_db_push(\n        # slug which defined on db template\n        slug='welcome',\n\n        # recipient can be list, or str separated with comma or simple string\n        # '34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8a' or '34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8a, 34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8b' or\n        # ['34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8a', '34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8b'] or string Mail group slug\n        recipient='34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8c',\n\n        # All *args params will be accessible on template context\n        {\n            'username': request.user.username,\n            'full_name': request.user.get_full_name(),\n            'signup_date': request.user.date_joined\n        },\n\n        # You can access to all model fields. For m2m and fk fields, you should use module_name\n        MyModel.objects.get(pk=1),\n\n        # Optional kwargs:\n        # backend='dbmail.backends.push',\n        # provider='dbmail.providers.prowl.push',\n        # event='Server is down!',\n        # from_email='ConsoleApp'\n        # user=User.objects.get(pk=1),\n        #\n        # language='ru',\n        #\n        # queue='default',\n        # retry_delay=300,\n        # max_retries=3,\n        # retry=True,\n        # time_limit=30,\n        # send_after=60,\n        #\n        # use_celery=True,\n    )\n\n\nDBMail Backends\n---------------\nBy default ``django-dbmail`` used 4 built-in backends (Mail/Sms/Tts/Push).\nBut nothing prevents to write your own backend to work with all that you want.\n\n\nDemo installation\n-----------------\n\n**Docker**\n\n.. code-block:: bash\n\n    $ git clone --depth 1 -b master https://github.com/LPgenerator/django-db-mailer.git db-mailer\n    $ cd db-mailer\n    $ docker build -t dbmail .\n    $ docker run -it -d -p 8000:8000 --name dbmail dbmail\n    $ docker exec -i -t dbmail /bin/bash\n    $ cd /mailer/\n\n**Vagrant**\n\n.. code-block:: bash\n\n    $ git clone --depth 1 -b master https://github.com/LPgenerator/django-db-mailer.git db-mailer\n    $ cd db-mailer\n    $ vagrant up --provider virtualbox\n    $ vagrant ssh\n    $ cd /mailer/\n\n\n**OS X/Linux**\n\n\n.. code-block:: bash\n\n    $ sudo apt-get install -y virtualenvwrapper redis-server git python-dev libxml2-dev libxslt-dev zlib1g-dev || brew install pyenv-virtualenvwrapper redis git\n    $ source /usr/share/virtualenvwrapper/virtualenvwrapper.sh || source /usr/local/bin/virtualenvwrapper.sh\n    $ mkvirtualenv db-mailer\n    $ workon db-mailer\n    $ git clone --depth 1 https://github.com/LPgenerator/django-db-mailer.git db-mailer\n    $ cd db-mailer\n    $ python setup.py develop\n    $ cd demo\n    $ pip install -r requirements.txt\n    $ python manage.py syncdb --noinput\n    $ python manage.py migrate --noinput\n    $ python manage.py createsuperuser --username admin --email admin@local.host\n    $ redis-server >& /dev/null &\n    $ python manage.py runserver >& /dev/null &\n    $ python manage.py celeryd -Q default >& /dev/null &\n\n\nOpen Shell:\n\n.. code-block:: bash\n\n    $ python manage.py shell_plus --print-sql\n\n\nCreate new template:\n\n.. code-block:: python\n\n    from dbmail.models import MailTemplate\n    from dbmail import send_db_mail\n\n    MailTemplate.objects.create(\n        name=\"Site welcome template\",\n        subject=\"Welcome\",\n        message=\"Welcome to our site. We are glad to see you.\",\n        slug=\"welcome\",\n        is_html=False,\n    )\n\n\nTry to send test email with created template (without celery):\n\n.. code-block:: python\n\n    send_db_mail('welcome', 'user@example.com', use_celery=False)\n\n\nSend email using celery:\n\n.. code-block:: python\n\n    send_db_mail('welcome', 'user@example.com')\n\n\nCheck mail logs:\n\n.. code-block:: python\n\n    from pprint import pprint\n    from django.forms.models import model_to_dict\n    from dbmail.models import MailLog\n\n    pprint([model_to_dict(obj) for obj in MailLog.objects.all()])\n\n\nOpen app in browser (login and password is admin/admin):\n\n.. code-block:: bash\n\n    $ xdg-open http://127.0.0.1:8000/admin/dbmail/ >& /dev/null || open http://127.0.0.1:8000/admin/dbmail/ >& /dev/null\n\n\nAdditional information\n----------------------\n\n**Revision**\n\nFor support template reversion, you can install ``django-reversion``.\nFind information about compatibility with your Django versions `here <http://django-reversion.readthedocs.org/en/latest/django-versions.html>`_.\n\n**Editor**\n\nTo enable editor, you may install and configure ``django-tinymce`` or ``django-ckeditor`` app.\n\n**Theme**\n\n``django-db-mailer`` supported from box ``django-grappelli`` and ``django-suit`` skin. Information about compatibility available `here <https://pypi.python.org/pypi/django-grappelli/2.5.3>`_.\n\n**Queue**\n\nInstall and configure ``django-celery`` for background message sending with priorities. You can find celery settings examples on demo project.\nWe recommended to use ``django-celery-mon`` with ``django-celery`` for monitoring celery and supervisor processes.\n\n**Premailer**\n\nFor turns CSS blocks into style attributes, you can install ``premailer`` from PyPi.\n\n**Translation**\n\nFor use different language on your mail templates, install ``django-modeltranslation`` or ``grappelli-modeltranslation``.\nAdd into settings.py:\n\n.. code-block:: python\n\n    MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'\n    MODELTRANSLATION_LANGUAGES = ('ru', 'en')\n    MODELTRANSLATION_TRANSLATION_FILES = (\n        'dbmail.translation',\n    )\n    INSTALLED_APPS = ('modeltranslation',) + INSTALLED_APPS\n    # INSTALLED_APPS = ('grappelli', 'grappelli_modeltranslation', 'modeltranslation',) + INSTALLED_APPS\n\n\nUpdate dbmail fields:\n\n.. code-block:: bash\n\n    $ ./manage.py sync_translation_fields --noinput\n\n**Postmark Django Backend**\n\nInstall ``python-postmark`` app via pip. Configure your settings:\n\n.. code-block:: python\n\n    POSTMARK_API_KEY = ''\n    POSTMARK_SENDER = 'noreply@example.com'\n    POSTMARK_TEST_MODE = False\n    EMAIL_BACKEND = 'postmark.django_backend.EmailBackend'\n\n\n**Amazon's Simple Email Service Django Backend**\n\nInstall ``django-ses`` app via pip. Configure your settings:\n\n.. code-block:: python\n\n    EMAIL_BACKEND = 'django_ses.SESBackend'\n\n    # These are optional -- if they're set as environment variables they won't\n    # need to be set here as well\n    AWS_ACCESS_KEY_ID = 'YOUR-ACCESS-KEY-ID'\n    AWS_SECRET_ACCESS_KEY = 'YOUR-SECRET-ACCESS-KEY'\n\n    # Additionally, you can specify an optional region, like so:\n    AWS_SES_REGION_NAME = 'us-east-1'\n    AWS_SES_REGION_ENDPOINT = 'email.us-east-1.amazonaws.com'\n\n\n*Note: You can use any backends designed as django email backend*\n\n**Tracking**:\n\n.. code-block:: bash\n\n    $ pip install httpagentparser django-ipware\n\nFor track information about user, or about mail is read, you must be enable logging, and enable tracking on settings.\n\n\n**Older versions**\n\nVery simple version of this app, available `here <https://github.com/LPgenerator/django-db-mailer/tree/1.0>`_.\nThat version do not include celery settings, bcc, api, mail settings, signals, mail groups and model browser.\n\n\n**Notes**\n\nAll app features available only with ``django-celery`` and with ``Redis``.\n\n.. code-block:: bash\n\n    $ pip install redis hiredis django-celery\n\n\n\nExternal API usage\n------------------\n\n.. code-block:: python\n\n    from dbmail.models import ApiKey\n\n    ApiKey.objects.create(name='Test', api_key='ZzriUzE')\n\n\n.. code-block:: bash\n\n    $ pip install httpie\n    $ http -f POST http://127.0.0.1:8000/dbmail/api/ api_key=ZzriUzE slug=welcome recipient=root@local.host data='{\"name\": \"Ivan\", \"age\": 20}'\n        or\n    $ apt-get install curl || brew install curl\n    $ curl -X POST http://127.0.0.1:8000/dbmail/api/ --data 'api_key=ZzriUzE&slug=welcome&recipient=root@local.host&backend=mail'\n\n*API bandwidth is 1k+ rps on i7 2.3GHz*\n\n\nResponsive transactional HTML email templates\n---------------------------------------------\nFixtures with Base transactional HTML email templates was added into dbmail fixtures.\nThis templates was optimized for desktop clients, web clients, mobile clients, various devices, various providers.\nThanks for Mailgun Team. You can use it as default basic templates on your project.\n\n.. code-block:: bash\n\n    python manage.py load_dbmail_base_templates\n\n\n\nPublications\n------------\n* `Установка и использование с примерами на русском <http://habrahabr.ru/post/253445/>`_.\n* `Completely installation and usage with examples. Translated by Google <http://translate.google.com/translate?hl=en&sl=ru&tl=en&u=http://habrahabr.ru/post/253445/>`_.\n\n\nScreenshots\n-----------\n\n.. image:: /screenshots/template_edit.jpg\n.. image:: /screenshots/templates_changelist.jpg\n.. image:: /screenshots/template_log_changelist.jpg\n.. image:: /screenshots/template_log_view.jpg\n.. image:: /screenshots/group_change.jpg\n.. image:: /screenshots/signal_edit.jpg\n.. image:: /screenshots/signals_changelist.jpg\n.. image:: /screenshots/apps_view.jpg\n.. image:: /screenshots/apps_browse_vars.jpg\n.. image:: /screenshots/smtp_changelist.jpg\n.. image:: /screenshots/apikey_changelist.jpg\n.. image:: /screenshots/bcc_changelist.jpg\n.. image:: /screenshots/template_compare.jpg\n.. image:: /screenshots/tracking_edit.jpg\n.. image:: /screenshots/base_template_changelist.jpg\n.. image:: /screenshots/subscriptions_change.jpg\n.. image:: /screenshots/subscriptions_changelist.jpg\n\n\nCompatibility\n-------------\n* Python: 2.6, 2.7, pypy, 3.4, 3.5, pypy3\n* Django: 1.4, 1.5, 1.6, 1.7, 1.8, 1.9",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/django-db-mailer/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/LPgenerator/django-db-mailer/",
    "keywords": "django db mail email html text tts sms push templates mailer",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-db-mailer",
    "package_url": "https://pypi.org/project/django-db-mailer/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-db-mailer/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/LPgenerator/django-db-mailer/"
    },
    "release_url": "https://pypi.org/project/django-db-mailer/2.3.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django module to easily send emails using django templates stored on database (Django 1.9 support).",
    "version": "2.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4377404,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea1e5511ab965cf5b07f710b3f90c1123c0e7a2f5d739299be06082f772206eb",
        "md5": "54e870c80682146660846c39b9624dd8",
        "sha256": "639e7d6c0e95956e0259c3bb682e493b9995155f6186c359d2a994c1407fb04d"
      },
      "downloads": -1,
      "filename": "django_db_mailer-2.3.3-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "54e870c80682146660846c39b9624dd8",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 144416,
      "upload_time": "2016-01-09T20:03:26",
      "upload_time_iso_8601": "2016-01-09T20:03:26.883503Z",
      "url": "https://files.pythonhosted.org/packages/ea/1e/5511ab965cf5b07f710b3f90c1123c0e7a2f5d739299be06082f772206eb/django_db_mailer-2.3.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a30adda798560ffd781aa011143a9978ed7392eded98e0a5bfdece1a8985a9a9",
        "md5": "e55c359ac09ce26285ed4e4f6b998712",
        "sha256": "e8272ba13e69f100f98bf2b91bfd1ed2215277f28eb2c6457850e583cd4825b8"
      },
      "downloads": -1,
      "filename": "django-db-mailer-2.3.3.tar.gz",
      "has_sig": true,
      "md5_digest": "e55c359ac09ce26285ed4e4f6b998712",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 70768,
      "upload_time": "2016-01-09T20:03:04",
      "upload_time_iso_8601": "2016-01-09T20:03:04.163825Z",
      "url": "https://files.pythonhosted.org/packages/a3/0a/dda798560ffd781aa011143a9978ed7392eded98e0a5bfdece1a8985a9a9/django-db-mailer-2.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}