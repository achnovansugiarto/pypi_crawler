{
  "info": {
    "author": "GoTLiuM InSPiRiT",
    "author_email": "gotlium@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Django-Db-Mailer\n----------------\n\n.. image:: https://api.travis-ci.org/LPgenerator/django-db-mailer.png?branch=development\n    :alt: Build Status\n    :target: https://travis-ci.org/LPgenerator/django-db-mailer\n.. image:: https://pypip.in/v/django-db-mailer/badge.png\n    :alt: Current version on PyPi\n    :target: https://crate.io/packages/django-db-mailer/\n.. image:: https://pypip.in/d/django-db-mailer/badge.png\n    :alt: Downloads from PyPi\n    :target: https://crate.io/packages/django-db-mailer/\n.. image:: https://readthedocs.org/projects/django-db-mailer/badge/?version=latest\n    :target: http://django-db-mailer.readthedocs.org/\n    :alt: Documentation Status\n.. image:: https://pypip.in/wheel/django-db-mailer/badge.png\n    :target: https://pypi.python.org/pypi/django-db-mailer/\n    :alt: Wheel\n.. image:: https://pypip.in/license/django-db-mailer/badge.png\n    :target: https://pypi.python.org/pypi/django-db-mailer/\n    :alt: License\n\n\nDocumentation available at `Read the Docs <http://django-db-mailer.readthedocs.org/>`_.\n\n\nWhat's that\n-----------\n| Django module to easily send emails using django templates stored on database.\n| From box you can use it with django-celery for send background messages.\n| Also you have opportunity to create reports from logs by mail categories and slug.\n| Groups with Recipients and send by model signal also available by default.\n| That app very simple to install and use on your projects.\n\n\nInstallation\n------------\n\n1. Using pip:\n\n.. code-block:: bash\n\n    $ pip install django-db-mailer\n\n2. Add the ``dbmail`` application to ``INSTALLED_APPS`` in your settings file (usually ``settings.py``)\n3. Sync database (``./manage.py syncdb`` or ``./manage.py migrate``).\n\n**Important:** South 1.0 or greater is required to run migrations.\n\n\nMail API\n--------\n\n.. code-block:: python\n\n    from dbmail.models import MailTemplate\n    from dbmail import send_db_mail\n\n    # New dbmail template\n    MailTemplate.objects.create(\n        name=\"Site welcome template\",\n        subject=\"Welcome\",\n        message=\"Welcome to our site. We are glad to see you.\",\n        slug=\"welcome\",\n        is_html=False,\n    )\n\n    # Send message with created template\n    send_db_mail(\n        # slug which defined on db template\n        slug='welcome',\n\n        # recipient can be list, or str separated with comma or simple string\n        # 'user1@example.com' or 'user1@example.com, user2@example.com' or\n        # ['user1@example.com', 'user2@example.com'] or string Mail group slug\n        recipient='user1@example.com',\n\n        # All *args params will be accessible on template context\n        {\n            'username': request.user.username,\n            'full_name': request.user.get_full_name(),\n            'signup_date': request.user.date_joined\n        },\n\n        # You can access to all model fields. For m2m and fk fields, you should use module_name\n        MyModel.objects.get(pk=1),\n\n        # Optional kwargs:\n        # backend='dbmail.backends.mail',\n        # provider='apps.utils.some.mail.provider',\n        # from_email='from@example.com'\n        # cc=['cc@example.com'],\n        # bcc=['bcc@example.com'],\n        # user=User.objects.get(pk=1),\n        #\n        # language='ru',\n        #\n        # attachments=[(filename, content, mimetype)],\n        # files=['hello.jpg', 'world.png'],\n        # headers={'Custom-Header':'Some value'},\n        #\n        # queue='default',\n        # retry_delay=300,\n        # max_retries=3,\n        # retry=True,\n        # time_limit=30,\n        # send_after=60,\n        #\n        # use_celery=True,\n    )\n\n\nSms API\n-------\n\n.. code-block:: python\n\n    from dbmail import send_db_sms\n\n\n    send_db_sms(\n        # slug which defined on db template\n        slug='welcome',\n\n        # recipient can be list, or str separated with comma or simple string\n        # '+79031234567' or +79031234567, +79031234568, +79031234569' or\n        # ['+79031234567', '+79031234568'] or string Mail group slug\n        recipient='+79031234567',\n\n        # All *args params will be accessible on template context\n        {\n            'username': request.user.username,\n            'full_name': request.user.get_full_name(),\n            'signup_date': request.user.date_joined\n        },\n\n        # You can access to all model fields. For m2m and fk fields, you should use module_name\n        MyModel.objects.get(pk=1),\n\n        # Optional kwargs:\n        # backend='dbmail.backends.sms',\n        # provider='dbmail.providers.nexmo.sms',\n        # from_email='DBMail'\n        # user=User.objects.get(pk=1),\n        #\n        # language='ru',\n        #\n        # queue='default',\n        # retry_delay=300,\n        # max_retries=3,\n        # retry=True,\n        # time_limit=30,\n        # send_after=60,\n        #\n        # use_celery=True,\n    )\n\n\n\nText to speech API\n------------------\n\n.. code-block:: python\n\n    from dbmail import send_db_tts\n\n\n    send_db_tts(\n        # slug which defined on db template\n        slug='welcome',\n\n        # recipient can be list, or str separated with comma or simple string\n        # '+79031234567' or +79031234567, +79031234568, +79031234569' or\n        # ['+79031234567', '+79031234568'] or string Mail group slug\n        recipient='+79031234567',\n\n        # All *args params will be accessible on template context\n        {\n            'username': request.user.username,\n            'full_name': request.user.get_full_name(),\n            'signup_date': request.user.date_joined\n        },\n\n        # You can access to all model fields. For m2m and fk fields, you should use module_name\n        MyModel.objects.get(pk=1),\n\n        # Optional kwargs:\n        # backend='dbmail.backends.tts',\n        # provider='dbmail.providers.nexmo.tts',\n        # from_email='DBMail'\n        # user=User.objects.get(pk=1),\n        #\n        # language='ru',\n        #\n        # queue='default',\n        # retry_delay=300,\n        # max_retries=3,\n        # retry=True,\n        # time_limit=30,\n        # send_after=60,\n        #\n        # use_celery=True,\n    )\n\n\n*Text to speech supported by default provider. But maybe not supported by your provider.*\n\n\nPush notification API\n---------------------\n\n.. code-block:: python\n\n    from dbmail import send_db_push\n\n\n    send_db_push(\n        # slug which defined on db template\n        slug='welcome',\n\n        # recipient can be list, or str separated with comma or simple string\n        # '+34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8a' or '34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8a, 34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8b' or\n        # ['34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8a', '34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8b'] or string Mail group slug\n        recipient='34cc3e5f0d2abf2ca0f9af170bd8cd2372a22f8c',\n\n        # All *args params will be accessible on template context\n        {\n            'username': request.user.username,\n            'full_name': request.user.get_full_name(),\n            'signup_date': request.user.date_joined\n        },\n\n        # You can access to all model fields. For m2m and fk fields, you should use module_name\n        MyModel.objects.get(pk=1),\n\n        # Optional kwargs:\n        # backend='dbmail.backends.push',\n        # provider='dbmail.providers.prowl.push',\n        # event='Server is down!',\n        # from_email='ConsoleApp'\n        # user=User.objects.get(pk=1),\n        #\n        # language='ru',\n        #\n        # queue='default',\n        # retry_delay=300,\n        # max_retries=3,\n        # retry=True,\n        # time_limit=30,\n        # send_after=60,\n        #\n        # use_celery=True,\n    )\n\n\nDBMail Backends\n---------------\nBy default ``django-dbmail`` used 4 built-in backends (Mail/Sms/Tts/Push).\nBut nothing prevents to write your own backend to work with all that you want.\n\n\nDemo installation\n-----------------\n\n**Docker**\n\n.. code-block:: bash\n\n    $ git clone --depth 1 https://github.com/LPgenerator/django-db-mailer.git db-mailer\n    $ cd db-mailer\n    $ docker build -t dbmail .\n    $ docker run -it -d -p 8000:8000 --name dbmail dbmail\n    $ docker exec -i -t dbmail /bin/bash\n    $ cd /mailer/\n\n**Vagrant**\n\n.. code-block:: bash\n\n    $ git clone --depth 1 https://github.com/LPgenerator/django-db-mailer.git db-mailer\n    $ cd db-mailer\n    $ vagrant up\n    $ vagrant ssh\n    $ cd /mailer/\n\n\n**OS X/Linux**\n\n\n.. code-block:: bash\n\n    $ sudo apt-get install -y virtualenvwrapper redis-server git python-dev libxml2-dev libxslt-dev zlib1g-dev || brew install pyenv-virtualenvwrapper redis git\n    $ source /usr/share/virtualenvwrapper/virtualenvwrapper.sh || source /usr/local/bin/virtualenvwrapper.sh\n    $ mkvirtualenv db-mailer\n    $ workon db-mailer\n    $ git clone --depth 1 https://github.com/LPgenerator/django-db-mailer.git db-mailer\n    $ cd db-mailer\n    $ python setup.py develop\n    $ cd demo\n    $ pip install -r requirements.txt\n    $ python manage.py syncdb --noinput\n    $ python manage.py migrate --noinput\n    $ python manage.py createsuperuser --username admin --email admin@local.host\n    $ redis-server >& /dev/null &\n    $ python manage.py runserver >& /dev/null &\n    $ python manage.py celeryd -Q default >& /dev/null &\n\n\nOpen Shell:\n\n.. code-block:: bash\n\n    $ python manage.py shell_plus --print-sql\n\n\nCreate new template:\n\n.. code-block:: python\n\n    from dbmail.models import MailTemplate\n    from dbmail import send_db_mail\n\n    MailTemplate.objects.create(\n        name=\"Site welcome template\",\n        subject=\"Welcome\",\n        message=\"Welcome to our site. We are glad to see you.\",\n        slug=\"welcome\",\n        is_html=False,\n    )\n\n\nTry to send test email with created template (without celery):\n\n.. code-block:: python\n\n    send_db_mail('welcome', 'user@example.com', use_celery=False)\n\n\nSend email using celery:\n\n.. code-block:: python\n\n    send_db_mail('welcome', 'user@example.com')\n\n\nCheck mail logs:\n\n.. code-block:: python\n\n    from pprint import pprint\n    from django.forms.models import model_to_dict\n    from dbmail.models import MailLog\n\n    pprint([model_to_dict(obj) for obj in MailLog.objects.all()])\n\n\nOpen app on browser:\n\n.. code-block:: bash\n\n    $ xdg-open http://127.0.0.1:8000/admin/dbmail/ >& /dev/null || open http://127.0.0.1:8000/admin/dbmail/ >& /dev/null\n\n\nAdditional information\n----------------------\n\n**Revision**\n\nFor support template reversion, you can install ``django-reversion``.\nFind information about compatibility with your Django versions `here <http://django-reversion.readthedocs.org/en/latest/django-versions.html>`_.\n\n**Editor**\n\nTo enable editor, you may install and configure ``django-tinymce`` app.\n\n**Theme**\n\n``django-db-mailer`` supported from box ``django-grappelli`` skin. Information about compatibility available `here <https://pypi.python.org/pypi/django-grappelli/2.5.3>`_.\n\n**Queue**\n\nInstall and configure ``django-celery`` for background message sending with priorities. You can find celery settings examples on demo project.\nWe recommended to use ``django-celery-mon`` with ``django-celery`` for monitoring celery and supervisor processes.\n\n**Premailer**\n\nFor turns CSS blocks into style attributes, you can install ``premailer`` from PyPi.\n\n**Translation**\n\nFor use different language on your mail templates, install ``django-modeltranslation`` or ``grappelli-modeltranslation``.\nAdd into settings.py:\n\n.. code-block:: python\n\n    MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'\n    MODELTRANSLATION_LANGUAGES = ('ru', 'en')\n    MODELTRANSLATION_TRANSLATION_FILES = (\n        'dbmail.translation',\n    )\n    INSTALLED_APPS = ('modeltranslation',) + INSTALLED_APPS\n    # INSTALLED_APPS = ('grappelli', 'grappelli_modeltranslation', 'modeltranslation',) + INSTALLED_APPS\n\n\nUpdate dbmail fields:\n\n.. code-block:: bash\n\n    $ ./manage.py sync_translation_fields --noinput\n\n**Postmark backend**\n\nInstall ``python-postmark`` app via pip. Configure your settings:\n\n.. code-block:: python\n\n    POSTMARK_API_KEY = ''\n    POSTMARK_SENDER = 'noreply@example.com'\n    POSTMARK_TEST_MODE = False\n    EMAIL_BACKEND = 'postmark.django_backend.EmailBackend'\n\n\n**Tracking**:\n\n.. code-block:: bash\n\n    $ pip install httpagentparser django-ipware\n\nFor track information about user, or about mail is read, you must be enable logging, and enable tracking on settings.\n\n\n**Older versions**\n\nVery simple version of this app, available `here <https://github.com/LPgenerator/django-db-mailer/tree/1.0>`_.\nThat version do not include celery settings, bcc, api, mail settings, signals, mail groups and model browser.\n\n\n**Notes**\n\nAll app features available only with ``django-celery`` and with ``Redis``.\n\n\nExternal API usage\n------------------\n\n.. code-block:: python\n\n    from dbmail.models import ApiKey\n\n    ApiKey.objects.create(name='Test', api_key='ZzriUzE')\n\n\n.. code-block:: bash\n\n    $ pip install httpie\n    $ http -f POST http://127.0.0.1:8000/dbmail/api/ api_key=ZzriUzE slug=welcome recipient=root@local.host data='{\"name\": \"Ivan\", \"age\": 20}'\n        or\n    $ apt-get install curl || brew install curl\n    $ curl -X POST http://127.0.0.1:8000/dbmail/api/ --data 'api_key=ZzriUzE&slug=welcome&recipient=root@local.host&backend=mail'\n\n*API bandwidth is 1k+ rps on i7 2.3GHz*\n\n\nPublications\n------------\n* `Установка и использование с примерами на русском <http://habrahabr.ru/post/253445/>`_.\n* `Completely installation and usage with examples. Translated by Google <http://translate.google.com/translate?hl=en&sl=ru&tl=en&u=http://habrahabr.ru/post/253445/>`_.\n\n\nScreenshots\n-----------\n\n.. image:: /screenshots/template_edit.jpg\n.. image:: /screenshots/templates_changelist.jpg\n.. image:: /screenshots/template_log_changelist.jpg\n.. image:: /screenshots/template_log_view.jpg\n.. image:: /screenshots/group_change.jpg\n.. image:: /screenshots/signal_edit.jpg\n.. image:: /screenshots/signals_changelist.jpg\n.. image:: /screenshots/apps_view.jpg\n.. image:: /screenshots/apps_browse_vars.jpg\n.. image:: /screenshots/smtp_changelist.jpg\n.. image:: /screenshots/apikey_changelist.jpg\n.. image:: /screenshots/bcc_changelist.jpg\n.. image:: /screenshots/template_compare.jpg\n.. image:: /screenshots/tracking_edit.jpg\n\n\nCompatibility\n-------------\n* Python: 2.6, 2.7\n* Django: 1.4, 1.5, 1.6, 1.7, 1.8",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/django-db-mailer/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/LPgenerator/django-db-mailer/",
    "keywords": "django db mail email html text templates mailer",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-db-mailer",
    "package_url": "https://pypi.org/project/django-db-mailer/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-db-mailer/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/LPgenerator/django-db-mailer/"
    },
    "release_url": "https://pypi.org/project/django-db-mailer/2.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django module to easily send emails using django templates stored on database.",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4377404,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d298ce72ef6666f73b3d0b200eead8ef2902ac84651f44e50dd7a83ec82ac7c8",
        "md5": "457a5135b54d6c9cc658a4b7678f6270",
        "sha256": "972911b5fa9f18a9935d15ccffaf632bec36372e4ce025351e244754a1fd00b9"
      },
      "downloads": -1,
      "filename": "django_db_mailer-2.1.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "457a5135b54d6c9cc658a4b7678f6270",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 120707,
      "upload_time": "2015-04-30T21:12:22",
      "upload_time_iso_8601": "2015-04-30T21:12:22.239362Z",
      "url": "https://files.pythonhosted.org/packages/d2/98/ce72ef6666f73b3d0b200eead8ef2902ac84651f44e50dd7a83ec82ac7c8/django_db_mailer-2.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1b95bc11bef26807a13d42a89477ba1158a95b9f5917c278a1fe69910d822e0",
        "md5": "d1087eea2fe363558e8bcdce2cdb0d50",
        "sha256": "1faa70f05c2a8b79b73267e681778ef60212c6bdeb38847e0ac571fc466778ec"
      },
      "downloads": -1,
      "filename": "django-db-mailer-2.1.0.tar.gz",
      "has_sig": true,
      "md5_digest": "d1087eea2fe363558e8bcdce2cdb0d50",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 58961,
      "upload_time": "2015-04-30T21:12:09",
      "upload_time_iso_8601": "2015-04-30T21:12:09.135427Z",
      "url": "https://files.pythonhosted.org/packages/f1/b9/5bc11bef26807a13d42a89477ba1158a95b9f5917c278a1fe69910d822e0/django-db-mailer-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}