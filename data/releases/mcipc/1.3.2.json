{
  "info": {
    "author": "Richard Neumann",
    "author_email": "mail@richard-neumann.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# mcipc\n\nA Minecraft inter-process communication API implementing the [RCON](http://wiki.vg/RCON) and [Query](http://wiki.vg/Query) protocols.\n\n## Requirements\n`mcipc` requires Python 3.8 or higher.\n\n## Usage\n\n### Query protocol\nThe `Query` protcol is used to query a Minecraft server for server information.  \nThe Minecraft query protocol has two query modes: *basic stats* and *full stats*.\n\n#### Basic stats\nTo get *basic stats* from a Minecraft server, it must enable the `Query` protocol.  \nYou can enable the query protocol on a Minecraft server by setting `enable-query = true` in the server's `server.properties` file.\nTo specify a deviating port, you can set `query.port = <port>` in the same file.  \nThe following example assumes a server running on `127.0.0.1` and on the default query port `25565`:\n\n    from mcipc.query import Client\n\n    with Client('127.0.0.1', 25565) as client:\n        basic_stats = client.basic_stats\n\n    print(basic_stats)\n\nThe type of `basic_stats` is a named tuple with the following properties:\n\n* `type`: The packet type (`Type`, protocol information).\n* `session_id`: The query's session ID (`int`, protocol information).\n* `motd`: The server's message of the day (`str`).\n* `game_type`: The game type (`str`).\n* `map`: The current map (`str`).\n* `num_players`: The amount of online players (`int`).\n* `max_players`: The amount of maximally allowed players (`int`).\n* `host_port`: The server's port (`int`).\n* `host_ip`: The server's IP address (`ipaddress.IPv4Address` or `ipaddress.IPv6Address`).\n\n#### Full stats\nFor retrieving full stats of a server, the same premises apply.\n\n    from mcipc.query import Client\n\n    with Client('127.0.0.1', 25565) as client:\n        full_stats = client.full_stats\n\n    print(full_stats)\n\nThe type of `full_stats` is a named tuple with the following properties:\n\n* `type`: The packet type (`Type`, protocol information).\n* `session_id`: The query's session ID (`int`, protocol information).\n* `host_name`: The server's message of the day (`str`, same as BasicStats.motd).\n* `game_type`: The game type (`str`).\n* `game_id`: The game ID (`str`).\n* `version`: The game version (`str`).\n* `plugins`: The used plugins (`dict`).\n* `map`: The current map (`str`).\n* `num_players`: The amount of online players (`int`).\n* `max_players`: The amount of maximally allowed players (`int`).\n* `host_port`: The server's port (`int`).\n* `host_ip`: The server's IP address (`ipaddress.IPv4Address` or `ipaddress.IPv6Address`).\n* `players`: The names of online players (`tuple` of `str`).\n\n### RCON protocol\nThe `RCON` protocol is used to remotely control a Minecraft server, i.e. execute\ncommands on a Minecraft server and receive the respective results.  \nTo enable `RCON` on a Minecraft server, you must set `enable-rcon = true` in the\nserver's `server.properties` file.\nFurthermore, you need to specify a port for the RCON server by setting `rcon.port = <port>`\nand a password by setting `rcon.password = <password>` in the same file.  \nThe following example assumes a server running on `127.0.0.1` and on the RCON port `5000` with password `'mysecretpassword'`:\n\n    from mcipc.rcon import Client\n\n    with Client('127.0.0.1', 5000) as client:\n        client.login('mysecretpassword')    # Perform initial login.\n        seed = client.seed                  # Get the server's seed.\n        players = client.players            # Get the server's players info.\n        mansion = client.locate('Mansion')  # Get the next mansion's location.\n\n    print(seed)\n    print(players)\n    print(mansion)\n\n\nThe type of `seed` is `Seed` which is derived from `int` and can be used just like the latter.  \nThe type of `players` is `Players`, a named tuple:\n\n* `online`: The amount of online players (`int`).\n* `max`: The amount of maximally allowed players (`int`).\n* `names`: The names of online players (`tuple` of `str`).\n\nThe type of `mansion` is `Location` which describes the x-y-z location of the next located object.\n\n* `x`: x-coordinate (`int`).\n* `y`: y-coordinate (`int` or `None`).\n* `z`: z-coordinate (`int`).\n\n*HINT:* The y-component of a location may be `None`, which represents the special Minectaft vector component `'~'`.\n\n### Handling connection timeouts.\nSince version 1.2.1, you can specify an optional `timeout=<sec>` parameter on both `Query` and `RCON` clients.  \nIf a timeout is reached during a connection attempt, it will raise a `socket.timeout` exception.  \nThe following example will raise a connection timeout after 1.5 seconds:\n\n    try:\n        with Client('127.0.0.1', 5000, timeout=1.5) as client:\n            <do_stuff>\n    except socket.timeout as timeout:\n        <handle_connection_timeout>\n\n## Scripts\nThis library also ships a couple of scripts intended as a proof-of-concept.\n\n* `queryclt`: A `Query` client.\n* `rconclt`: An `RCON` client.\n* `rconshell`: An interactive `RCON` shell.\n\n### `queryclt`\n`queryclt` is a Query client script to communicate with minecraft servers via the Query protocol using the shell.  \nTo communicate with a server, run:\n\n    queryclt <server> <stats_type> [<args>...] [options]\n\nThe placeholder `<server>` can either be a pre-defined server's name (see [below](#Configuration)) or server socket identified by `<host>:<port>`.\n\n### `rconclt`\n`rconclt` is an RCON client script to communicate with minecraft servers via the RCON protocol using the shell.  \nTo communicate with a server, run:\n\n    rconclt <server> <command> [<args>...] [options]\n\nThe placeholder `<server>` can either be a pre-defined server's name (see [below](#Configuration)) or server socket identified by `[<password>@]<host>:<port>`.\\\nIf no password was specified in either the pre-defined server entry or the server socket, the script will interactively ask for the server's password.\n\n## Configuration\n`queryclt` servers can be configured in `/etc/mcipc.d/query.conf`.\\\n`rconclt` servers can be configured in `/etc/mcipc.d/rcon.conf`.\\\nThe configuration file format is:\n\n    [<server_name>]\n    host = <hostname_or_ip_address>\n    port = <port>\n    passwd = <password>\n\nThe `passwd` entry is optional for `rcon.conf` and unnecessary for `query.conf`.\n\n## License\nCopyright (C) 2018 Richard Neumann <mail at richard dash neumann period de>\n\nmcipc is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nmcipc is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with mcipc.  If not, see <http://www.gnu.org/licenses/>.\n\n\n## Legal\nMinecraft content and materials are trademarks and copyrights of\nMojang and its licensors. All rights reserved.\nThis program is free software and is not affiliated with Mojang.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/conqp/mcipc",
    "keywords": "minecraft python server rcon query",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mcipc",
    "package_url": "https://pypi.org/project/mcipc/",
    "platform": "",
    "project_url": "https://pypi.org/project/mcipc/",
    "project_urls": {
      "Homepage": "https://github.com/conqp/mcipc"
    },
    "release_url": "https://pypi.org/project/mcipc/1.3.2/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A Minecraft server inter-process communication library.",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14833820,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19a0cbe3ef2a86ecd50fd8ea57c731101039fecb3c124bde0400845de22cde1b",
        "md5": "8cdb80fe1710f4a050ce3db65548c856",
        "sha256": "5f5b8a940618ba312b42bbe9be97025b4714fc836ce4b780b484c924b0720acb"
      },
      "downloads": -1,
      "filename": "mcipc-1.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8cdb80fe1710f4a050ce3db65548c856",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 41866,
      "upload_time": "2020-05-13T07:19:35",
      "upload_time_iso_8601": "2020-05-13T07:19:35.447104Z",
      "url": "https://files.pythonhosted.org/packages/19/a0/cbe3ef2a86ecd50fd8ea57c731101039fecb3c124bde0400845de22cde1b/mcipc-1.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1df47dc4fd1e86a81adb41ea9ae2a6c0ce7d1f355700090851d881de8a291a17",
        "md5": "34f940bfe395eb3f0ae317da81ffa2e4",
        "sha256": "95f62ab8dcce07f904164100b02e06844e082acbea59618e27b363526375e397"
      },
      "downloads": -1,
      "filename": "mcipc-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "34f940bfe395eb3f0ae317da81ffa2e4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 21292,
      "upload_time": "2020-05-13T07:19:36",
      "upload_time_iso_8601": "2020-05-13T07:19:36.781742Z",
      "url": "https://files.pythonhosted.org/packages/1d/f4/7dc4fd1e86a81adb41ea9ae2a6c0ce7d1f355700090851d881de8a291a17/mcipc-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}