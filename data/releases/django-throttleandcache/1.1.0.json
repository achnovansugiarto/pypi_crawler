{
  "info": {
    "author": "Matthew Dapena-Tretter",
    "author_email": "m@tthewwithanm.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Features\n========\n\n- Graceful handling of errors (can fall back to cached value)\n- Readable duration strings (`'1 day'` vs `86400`)\n- Correct handling of `None`\n- Per-call invalidation\n\n\nInstallation\n============\n\n1. `pip install django-throttleandcache`\n2. Set a cache backend in your `settings.py` file.\n\n\nUsage\n=====\n\n.. code-block:: python\n\n    from throttleandcache import cache\n\n    # Cache the result of my_function for 3 seconds.\n    @cache('3s')\n    def my_function():\n        return 'whatever'\n\nIf you call the function multiple times *with the same arguments*, the result\nwill be fetched from the cache. In order to invalidate the cache for that call,\ncall `my_function.invalidate()` with the same arguments:\n\n.. code-block:: python\n\n    my_function()\n    my_function() # Result pulled from cache\n    my_function.invalidate()\n    my_function() # Not from cache\n\nRemember that calling the same method on multiple instances means that each\ninvocation will have a different first positional (`self`) argument:\n\n.. code-block:: python\n\n    class A(object):\n        @cache('100s')\n        def my_function(self):\n            print 'The method is being executed!'\n\n    instance_1 = A()\n    instance_2 = A()\n    instance_1.my_function() # The original method will be invoked\n    instance_2.my_function() # Different \"self\" argument, so the method is invoked again.\n\nIf you wish to cache the result across all instances, use `@cacheforclass`.\n\nThe first argument to the `cache` decorator is the timeout and can be given as\na number (of seconds) or a string. Since strings contain units, they can make\nyour code much more readable. Some examples are `'2s'`, `'3m'`, `'3m 2s'`, and\n`'3 minutes, 2 seconds'`.\n\nThe `cache` decorator also accepts the following (optional) keyword arguments:\n\n- **using**: specifies which cache to use.\n- **key_prefix**: A string to prefix your cache key with.\n- **graceful**: This argument specifies how errors should be handled. If\n    `graceful` is `True` and your function raises an error, throttleandcache\n    will log the error and return the cached value. If no cached value exists,\n    the original error is raised.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/matthewwithanm/django-throttleandcache",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-throttleandcache",
    "package_url": "https://pypi.org/project/django-throttleandcache/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-throttleandcache/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/matthewwithanm/django-throttleandcache"
    },
    "release_url": "https://pypi.org/project/django-throttleandcache/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A utility for caching/throttling function calls.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1437714,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3c40ea028f93eb8e910deb09e07086a7f6382b8a70c86fc2aa0a6cbf99eec32",
        "md5": "bc0ee83f16b3a78438b712cb94f28a4c",
        "sha256": "e7c55a7b27597fe8850f211b0735982d900cb156b80a111e7576bd29ee8d5fec"
      },
      "downloads": -1,
      "filename": "django-throttleandcache-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bc0ee83f16b3a78438b712cb94f28a4c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6171,
      "upload_time": "2014-08-20T21:13:11",
      "upload_time_iso_8601": "2014-08-20T21:13:11.121304Z",
      "url": "https://files.pythonhosted.org/packages/c3/c4/0ea028f93eb8e910deb09e07086a7f6382b8a70c86fc2aa0a6cbf99eec32/django-throttleandcache-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}