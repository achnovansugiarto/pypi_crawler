{
  "info": {
    "author": "asyncee",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Topic :: Software Development :: Widget Sets"
    ],
    "description": "Select2 widget for django admin\n===============================\n\nThis is django application that brings select2 widget to select inputs\nin admin.\n\n\nInstallation\n~~~~~~~~~~~~\n\n1. install this package as usual, using ``python setup.py install``,\n   ``pip install django-easy-select2`` or download sources and install to your\n   python path.\n2. add ``easy_select2`` to ``INSTALLED_APPS`` in your settings.py\n3. Use ``python manage.py collectstatic`` or manually copy easy_select2's static\n   directory to your project's static directory (if you serve your static with\n   nginx, for example).\n4. Modify your admin.py.\n5. Check out admin in browser.\n\n\nConfiguration\n~~~~~~~~~~~~~\n\n``django-easy-select2`` bundles jquery and select2 static files.\nYou can use them, or specify your own files to include in widget.\n\nTo use bundled static, just install an application.\n\nTo use your custom static files, you can specify next settings in your\nsettings.py:\n\n- ``SELECT2_JS`` - path to ``select2.js`` file. Specify path without\n  static directory, because full URL will be interpolated using\n  ``static`` function from ``staticfiles`` application.\n  Default: ``easy_select2/vendor/select2/select2.min.js``\n\n- ``SELECT2_CSS`` - path to ``select2.css`` file.\n  Default: ``easy_select2/vendor/select2/select2.min.css``\n\n- ``SELECT2_USE_BUNDLED_JQUERY`` - default is ``True``. Set to\n  ``False`` if your already have included custom jQuery.\n\n\nQuickstart\n~~~~~~~~~~\n\nIn your admin.py::\n\n    from django.contrib import admin\n    from easy_select2 import select2_modelform\n    from polls.models import Poll\n\n    PollForm = select2_modelform(Poll, attrs={'width': '250px'})\n\n    class PollAdmin(admin.ModelAdmin):\n        form = PollAdmin\n\n\nThats all. All your choice widgets are select2 widgets 250px wide.\n\n\nUsage\n~~~~~\n\nThere are ``Select2`` and ``Select2Multiple`` widget classes.\nYou can use them on any form field, as usual django widget::\n\n    class Form(forms.Form):\n        field = forms.ModelChoiceField(queryset=qs, widget=Select2())\n\nor::\n\n    class Form(forms.Form):\n        field = forms.ModelChoiceField(queryset=qs, widget=Select2Multiple(\n            select2attrs={'width': 'auto'}\n        ))\n\n``Select2`` and ``Select2Multiple`` is simple classes build with\n``Select2Mixin``::\n\n    class Select2Multiple(Select2Mixin, forms.SelectMultiple):\n        pass\n\n    class Select2(Select2Mixin, forms.Select):\n        pass\n\n``Select2Mixin`` is a simple widget mixin with predefined ``Media``\nclass and custom render method, which applies `$.fn.select2()`\nmethod on html input.\n\nIf you want to use it with all form fields automatically, without\nspecifying each field, you can create your ``ModelForm`` class with\n``Meta`` class constructed by custom ``Meta`` factory::\n\n    from easy_select2 import select2_modelform_meta\n\n    class SomeModelForm(forms.ModelForm):\n        Meta = select2_modelform_meta(SomeModel)\n\n``select2_modelform_meta`` is a simple factory, that produces a\n``Meta`` class with model attribute set to specified model and\n``widgets`` attribute set to dictionary, containing all selectable\nfields on model.\nEvery selectable field will be converted from standard widget to\nSelect2 or Select2Multiple widget.\n\nIf you are lazy, you can use ``ModelForm`` factory to build ready-to-use\nModelForm for model::\n\n    from easy_select2 import select2_modelform\n\n    MyModelForm = select2_modelform(MyModel)\n\nis the same like::\n\n    class MyModelForm(forms.ModelForm):\n        Meta = select2_modelform_meta(models.SomeModelForm)\n\nMyModelForm is an instance of ModelForm with ``model`` attribute\nset to ``MyModel``, and appropriate ``Meta`` class.\n\nThere is also an ``apply_select2`` function that dynamically creates\nnew widget class mixed with Select2Mixin.\n\nUsage, for example::\n\n    class SomeModelForm(admin.ModelForm):\n        class Meta:\n            widgets = {\n                'field': apply_select2(forms.Select),\n            }\n\nSo, ``apply_select2(forms.Select)`` will return new class, named\nSelect2Select, mixed with Select2Mixin.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/django-easy-select2/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/asyncee/django-easy-select2",
    "keywords": "django select2",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-easy-select2",
    "package_url": "https://pypi.org/project/django-easy-select2/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-easy-select2/",
    "project_urls": {
      "Download": "https://pypi.python.org/pypi/django-easy-select2/",
      "Homepage": "https://github.com/asyncee/django-easy-select2"
    },
    "release_url": "https://pypi.org/project/django-easy-select2/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django select2 theme for select input widgets.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12416504,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "341e29b2c502e17400a1a80959860460abd1b9dc87da164034b400e6f9443ccb",
        "md5": "27a61cdfcdf66231c4b203d667b9ef3b",
        "sha256": "6afe2cb8218ed7a30625864cbb80efc7193173d36640fb24aefbf284d4ccd9df"
      },
      "downloads": -1,
      "filename": "django-easy-select2-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "27a61cdfcdf66231c4b203d667b9ef3b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 150044,
      "upload_time": "2014-03-06T17:14:27",
      "upload_time_iso_8601": "2014-03-06T17:14:27.702240Z",
      "url": "https://files.pythonhosted.org/packages/34/1e/29b2c502e17400a1a80959860460abd1b9dc87da164034b400e6f9443ccb/django-easy-select2-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}