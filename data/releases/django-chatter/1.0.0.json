{
  "info": {
    "author": "Ahmed Ishtiaque, Dibs",
    "author_email": "ahmedishti27@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django Chatter\n==============\n\n.. image:: https://coveralls.io/repos/github/dibs-devs/chatter/badge.svg?branch=master\n        :target: https://coveralls.io/github/dibs-devs/chatter?branch=master\n\n.. image:: https://travis-ci.org/dibs-devs/chatter.svg?branch=master\n    :target: https://travis-ci.org/dibs-devs/chatter\n\n.. image:: https://pepy.tech/badge/django-chatter/month\n   :target: https://pypi.org/project/django-chatter/\n\nDjango-based Chat app that supports group chat and real-time updates.\n---------------------------------------------------------------------\n\nFull docs here: `Chatter Docs <https://django-chatter.readthedocs.io>`_\n\nChat is a crucial aspect of many web apps at present.\nHowever, Django's package repository does not have well-maintained reusable chat\npackages that Django developers can integrate into their platforms.\n\nChatter is an attempt to change that. This is an open-source fully reusable chat\napplication that has mechanisms to support group chats in place.\n\nThe default templates for this app are made with Bootstrap, one of the most\npopular CSS frameworks out there. This makes it easier for developers to change\nthe templates just by modifying the right CSS files.\n\n[More work to be done] Added to that, it can also possibly be used as a REST API,\nsince all the views generate standard JSON responses that need to be parsed by the\nwebsockets present in the front-end of the app using this package.\n\nThis app makes use of `Django Channels 2 <http://channels.readthedocs.io>`_ and uses\n`Redis <https://redis.io/>`_ as the message broker.\n\n**This app is still in its alpha phase. We plan to improve it so it can be used\nas a package in other Django-based web apps. **\n\nTo run chatter properly, you'll require `python>=3.5` and Redis. **Note:**\nFor development, we are currently using `redis-5.0.3`, built from source on\nUbuntu machines.\n\nThe core mechanisms of Chatter follows the instructions provided in the\n`Django Channels <https://channels.readthedocs.io/en/latest/>`_ tutorial section,\nwith some added modifications and theming.\n\n------------\nInstallation\n------------\n\n* Chatter is on `PyPi <https://pypi.org/project/django-chatter/>`_ now!\n  To install it, run\n\n  .. code-block:: python\n\n    pip install django-chatter\n\n  This should install all the required dependencies for Chatter.\n\n* Once you're done with that, add it to your :code:`settings.INSTALLED_APPS`:\n\n  .. code-block:: python\n\n    INSTALLED_APPS = [\n      ...\n      'django_chatter',\n      ...\n      ]\n\n* Since we use Redis as our message broker, you need to enable channel layers\n  for Chatter's ChatConsumer\n  (see `Channels' Consumers\n  <https://channels.readthedocs.io/en/latest/topics/consumers.html>`_\n  for more details). To enable that, you need to add the following lines to\n  your project's :code:`settings.py` file:\n\n  .. code-block:: python\n\n    CHANNEL_LAYERS = {\n      'default': {\n          'BACKEND': 'channels_redis.core.RedisChannelLayer',\n          'CONFIG': {\n              \"hosts\": [('127.0.0.1', 6379)],\n          },\n      },\n    }\n\n* If you haven't already, create a file named :code:`routing.py` in your\n  project's configuration folder.\n  This is because Django Channels uses a specification called\n  `ASGI <https://channels.readthedocs.io/en/latest/asgi.html>`_\n  for its websocket protocol. To enable Channels on your app, you have to add\n  a file that routes all websocket requests to a Channels app\n  (in this case, Chatter).\n  This should be the same as the folder where your :code:`settings.py`\n  file is located.\n\n  In :code:`routing.py`, add the following lines:\n\n  .. code-block:: python\n\n    from channels.auth import AuthMiddlewareStack\n    from channels.routing import ProtocolTypeRouter, URLRouter\n    import django_chatter.routing\n\n    application = ProtocolTypeRouter({\n      'websocket': AuthMiddlewareStack(\n        URLRouter(\n        django_chatter.routing.websocket_urlpatterns # send websocket requests to chatter's urls\n        )\n      )\n    })\n\n  This routes all websocket requests to Chatter, with the logged in :code:`User`\n  object. If you are using different\n  `django-channels <https://channels.readthedocs.io/en/latest/>`_\n  applications other than Chatter, you may already have this file, and can add\n  the appropriate URL for chatter to handle.\n  More details can be found on Django Channels'\n  `Routing <https://channels.readthedocs.io/en/latest/topics/routing.html>`_ page.\n\n  If you know how the middleware wrapping in\n  `Channels <https://github.com/django/channels/blob/master/channels/auth.py>`_\n  works, then feel free to replace :code:`AuthMiddlewareStack` with what you use\n  as your auth middleware for User object processing (if you're curious to know\n  about this, get in touch! We'd be happy to talk to you about it).\n\n* Now that you're done setting up :code:`routing.py`, add the following line in\n  your :code:`settings.py` file to link to the `routing.py` (again, you may have\n  already done this if you're already using channels)\n\n  .. code-block:: python\n\n    ASGI_APPLICATION = '<project name>.routing.application'\n\n* Chatter uses a context processor to generate a list of all rooms that a user\n  is a member of. To use this context processor, add it to your :code:`TEMPLATES`\n  list in your :code:`settings.py` file:\n\n  .. code-block:: python\n\n    TEMPLATES = [\n      {\n        ...\n        'OPTIONS': {\n          'context_processors': [\n            ...,\n            'django_chatter.context_processors.get_chatroom_list',\n            ...,\n          ],\n        },\n      },\n    ]\n\n* Link :code:`django_chatter.urls` to the URL you want in your\n  URLConf (:code:`<project>/urls.py`).\n\n  Example:\n\n  .. code-block:: python\n\n    from django.urls import path, include\n\n    ...\n    urlpatterns = [\n      ...,\n      path('chat/', include('django_chatter.urls')),\n      ...\n    ]\n\n* Run migrations:\n\n  .. code-block:: bash\n\n    $ python manage.py makeimigrations chat\n    $ python manage.py migrate\n\n* Start your app's development server and go to your :code:`'/chat/'` URL,\n  and you will see Chatter's homepage.\n\n**Tests haven't been setup for this package yet. I built this app before\nI knew what good test practices were like. So, tests welcome!**\n\n-----------\nUsage Notes\n-----------\n\n* Chatter, as of right now, provides a very minimal interface for users to chat\n  with other users.For starters, while group chatting is supported on the model\n  layer, the corresponding templates and front-end logic have not yet been setup.\n\n* If you're using chatter as a package in your own app, you have to make sure\n  that you handle user authentication in your app. Chatter, by default, provides\n  views that require user authentication. If you're developing Chatter on the other\n  hand, the usage will vary a bit. The notes for that can be found in the\n  `Get Involved <https://django-chatter.readthedocs.io/en/latest/templates/develop.html>`_\n  section.\n\n-------------------------------\nRunning list of features to add\n-------------------------------\n\n* Add a \"Create Group\" option for users on the templates\n* Add 'Seen by user x' functionality\n* Add displaying time with messages\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.github.com/dibs-devs/chatter",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-chatter",
    "package_url": "https://pypi.org/project/django-chatter/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-chatter/",
    "project_urls": {
      "Homepage": "https://www.github.com/dibs-devs/chatter"
    },
    "release_url": "https://pypi.org/project/django-chatter/1.0.0/",
    "requires_dist": [
      "channels (==2.1.7)",
      "bleach (==3.1.0)",
      "django (<3,>=2.0.9)",
      "channels-redis (==2.3.3)"
    ],
    "requires_python": "",
    "summary": "A WebSocket-based Chat app for Django developers.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5348870,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8635b56420795efea785dd3eeeba7832babef35ed4de8b0712471f23534d0fa9",
        "md5": "1fbe601ebd8c30708390941aacecd589",
        "sha256": "f14b7be0bd869e99fab206466dd370e463af7f3d0b81e3d576883e065398326d"
      },
      "downloads": -1,
      "filename": "django_chatter-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1fbe601ebd8c30708390941aacecd589",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 34041,
      "upload_time": "2019-05-23T00:09:35",
      "upload_time_iso_8601": "2019-05-23T00:09:35.442121Z",
      "url": "https://files.pythonhosted.org/packages/86/35/b56420795efea785dd3eeeba7832babef35ed4de8b0712471f23534d0fa9/django_chatter-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b60296ab9a81b6e17c92a7ea562fe09a234bff28bb668697cecbaf02cc2d49c8",
        "md5": "8dfea9d83133d40f9b21271c09dbc93e",
        "sha256": "ecd33833e392af64751e34df9c2146517ef62de2c81cae69de5586b940afc158"
      },
      "downloads": -1,
      "filename": "django-chatter-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8dfea9d83133d40f9b21271c09dbc93e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29283,
      "upload_time": "2019-05-23T00:09:37",
      "upload_time_iso_8601": "2019-05-23T00:09:37.219509Z",
      "url": "https://files.pythonhosted.org/packages/b6/02/96ab9a81b6e17c92a7ea562fe09a234bff28bb668697cecbaf02cc2d49c8/django-chatter-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}