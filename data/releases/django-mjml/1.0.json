{
  "info": {
    "author": "Igor Melnyk @liminspace",
    "author_email": "liminspace@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. image:: https://github.com/liminspace/django-mjml/actions/workflows/test.yml/badge.svg?branch=main\n :target: https://github.com/liminspace/django-mjml/actions/workflows/test.yml\n :alt: test\n\n.. image:: https://img.shields.io/pypi/v/django-mjml.svg\n :target: https://pypi.org/project/django-mjml/\n :alt: pypi\n\n|\n\n.. image:: https://cloud.githubusercontent.com/assets/5173158/14615647/5fc03bf8-05af-11e6-8cdd-f87bf432c4a2.png\n  :target: #\n  :alt: Django + MJML\n\ndjango-mjml\n===========\n\nThe simplest way to use `MJML <https://mjml.io/>`_ in `Django <https://www.djangoproject.com/>`_ templates.\n\n|\n\nInstallation\n------------\n\nRequirements:\n^^^^^^^^^^^^^\n\n* ``Django`` from 2.2 to 4.1\n* ``requests`` from 2.24.0 (only if you are going to use API HTTP-server for rendering)\n* ``mjml`` from 3.6.3 to 4.13.0\n\n**\\1\\. Install** ``mjml``.\n\nSee https://github.com/mjmlio/mjml#installation and https://mjml.io/documentation/#installation\n\n**\\2\\. Install** ``django-mjml``. ::\n\n  $ pip install django-mjml\n\nIf you want to use API HTTP-server you also need ``requests`` (at least version 2.24)::\n\n    $ pip install django-mjml[requests]\n\nTo install development version use ``git+https://github.com/liminspace/django-mjml.git@main`` instead ``django-mjml``.\n\n**\\3\\. Set up** ``settings.py`` **in your django project.** ::\n\n  INSTALLED_APPS = (\n    ...,\n    'mjml',\n  )\n\n|\n\nUsage\n-----\n\nLoad ``mjml`` in your django template and use ``mjml`` tag that will compile MJML to HTML::\n\n  {% load mjml %}\n\n  {% mjml %}\n      <mjml>\n          <mj-body>\n              <mj-section>\n                  <mj-column>\n                      <mj-text>Hello world!</mj-text>\n                  </mj-column>\n              </mj-section>\n          </mj-body>\n      </mjml>\n  {% endmjml %}\n\n|\n\nAdvanced settings\n-----------------\n\nThere are three backend modes for compiling: ``cmd``, ``tcpserver`` and ``httpserver``.\n\ncmd mode\n^^^^^^^^\n\nThis mode is very simple, slow and used by default. ::\n\n  MJML_BACKEND_MODE = 'cmd'\n  MJML_EXEC_CMD = 'mjml'\n\nYou can change ``MJML_EXEC_CMD`` and set path to executable ``mjml`` file, for example::\n\n  MJML_EXEC_CMD = '/home/user/node_modules/.bin/mjml'\n\nAlso you can pass addition cmd arguments, for example::\n\n  MJML_EXEC_CMD = ['node_modules/.bin/mjml', '--config.minify', 'true', '--config.validationLevel', 'strict']\n\nOnce you have a working installation, you can skip the sanity check on startup to speed things up::\n\n  MJML_CHECK_CMD_ON_STARTUP = False\n\ntcpserver mode\n^^^^^^^^^^^^^^\n\nThis mode is faster than ``cmd`` but it needs run a separated server process which will render templates. ::\n\n  MJML_BACKEND_MODE = 'tcpserver'\n  MJML_TCPSERVERS = [\n      ('127.0.0.1', 28101),  # host and port\n  ]\n\nYou can set several servers and a random one will be used::\n\n  MJML_TCPSERVERS = [\n      ('127.0.0.1', 28101),\n      ('127.0.0.1', 28102),\n      ('127.0.0.1', 28103),\n  ]\n\nYou can run servers by commands::\n\n  # NODE_PATH=/home/user/node_modules node /home/user/.virtualenv/default/lib/python2.7/site-packages/mjml/node/tcpserver.js --port=28101 --host=127.0.0.1 --touchstop=/tmp/mjmltcpserver.stop\n\n``28101`` - port, ``127.0.0.1`` - host, ``/tmp/mjmltcpserver.stop`` - file that will stop server after touch.\n\nFor daemonize server process you can use, for example, supervisor::\n\n  /etc/supervisor/conf.d/mjml.conf\n\n  [program:mjmltcpserver]\n  user=user\n  environment=NODE_PATH=/home/user/node_modules\n  command=node\n      /home/user/.virtualenv/default/lib/python2.7/site-packages/mjml/node/tcpserver.js\n      --port=28101 --host=127.0.0.1 --touchstop=/tmp/mjmltcpserver.stop --mjml.minify=true --mjml.validationLevel=strict\n  stdout_logfile=/home/user/project/var/log/supervisor/mjml.log\n  autostart=true\n  autorestart=true\n  redirect_stderr=true\n  stopwaitsecs=10\n  stopsignal=INT\n\nOr you can use docker-compose::\n\n  services:\n    mjml-1:\n      image: liminspace/mjml-tcpserver:0.11\n      restart: always\n      ports:\n        - \"28101:28101\"\n\n    mjml-2:\n      image: liminspace/mjml-tcpserver:0.11\n      restart: always\n      environment:\n        HOST: \"0.0.0.0\"\n        PORT: \"28102\"\n        MJML_ARGS: \"--mjml.minify=true --mjml.validationLevel=strict\"\n      expose:\n        - \"28102\"\n      ports:\n        - \"28102:28102\"\n\nYou also can build your own tcpserver with other versions of ``MJML`` by using\n``docker/mjml-tcpserver`` file and editing arguments.\n\nhttpserver mode\n^^^^^^^^^^^^^^^\n\n  don't forget to install ``requests`` to use this mode.\n\nThis mode is faster than ``cmd`` and similar to ``tcpserver`` but you can use official MJML API https://mjml.io/api\nor run your own HTTP-server (for example https://github.com/danihodovic/mjml-server) to render templates. ::\n\n  MJML_BACKEND_MODE = 'httpserver'\n  MJML_HTTPSERVERS = [\n      {\n          'URL': 'https://api.mjml.io/v1/render',  # official MJML API\n          'HTTP_AUTH': ('<Application ID>', '<Secret Key>'),\n      },\n      {\n          'URL': 'http://127.0.0.1:38101/v1/render',  # your own HTTP-server\n      },\n  ]\n\nYou can set one or more servers and a random one will be used.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/liminspace/django-mjml",
    "keywords": "django,mjml,django-mjml,email,layout,template,templatetag",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mjml",
    "package_url": "https://pypi.org/project/django-mjml/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/django-mjml/",
    "project_urls": {
      "Homepage": "https://github.com/liminspace/django-mjml"
    },
    "release_url": "https://pypi.org/project/django-mjml/1.0/",
    "requires_dist": [
      "django (<4.2,>=2.2)",
      "requests (>=2.24) ; extra == 'requests'"
    ],
    "requires_python": ">=3.6",
    "summary": "Use MJML in Django templates",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15329342,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8d4fbd7f09f6c579cdb596b5d0a542c9ad36d8c306b9416cbbc5d4d84608d6f",
        "md5": "546e560a5ee59a187298953fbcb30bc4",
        "sha256": "1543e77aad168885ad6ce2be5866b26d76e4b5b70cc6debd43e1893ee245f5f6"
      },
      "downloads": -1,
      "filename": "django_mjml-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "546e560a5ee59a187298953fbcb30bc4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8209,
      "upload_time": "2022-10-06T23:54:41",
      "upload_time_iso_8601": "2022-10-06T23:54:41.703087Z",
      "url": "https://files.pythonhosted.org/packages/d8/d4/fbd7f09f6c579cdb596b5d0a542c9ad36d8c306b9416cbbc5d4d84608d6f/django_mjml-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c782aaebfc8eac92d3f3e09b1f5437eae024450ae620e112f7d11b0fce03ed35",
        "md5": "d57d4c076ac5f135e614f9705d41079e",
        "sha256": "512dc52380088ac877f78124c4c17d67f4a2c0a58880d53787a4c48e2b37e682"
      },
      "downloads": -1,
      "filename": "django-mjml-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d57d4c076ac5f135e614f9705d41079e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8557,
      "upload_time": "2022-10-06T23:54:44",
      "upload_time_iso_8601": "2022-10-06T23:54:44.974196Z",
      "url": "https://files.pythonhosted.org/packages/c7/82/aaebfc8eac92d3f3e09b1f5437eae024450ae620e112f7d11b0fce03ed35/django-mjml-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}