{
  "info": {
    "author": "Globality Engineering",
    "author_email": "engineering@globality.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Simple Microservice Configuration\n\nWell-written microservices are small and single-purpose; any non-trivial ecosystem will have\na fleet of such services, each performing a different function. Inevitably, these services\nwill use common code and structure; this library provides a simple mechanism for constructing\nthese shared components and wiring them together into services.\n\n[![Circle CI](https://circleci.com/gh/globality-corp/microcosm/tree/develop.svg?style=svg)](https://circleci.com/gh/globality-corp/microcosm/tree/develop)\n\n\n## Terminology\n\n -  A `microservice` is a small software application. It is composed of several smaller pieces\n    of software, many of which are reusable.\n -  A `component` is one of these (possibly reusable) pieces of software.\n -  A `factory` is a function used to create a component; it may be an object's constructor.\n -  A `config dict` is a nested dictionary with string-valued keys. It contains data used\n    by factories to create components.\n -  An `object graph` is a collection of components that may reference each other (acyclically).\n -  A `binding` is a string-valued key. It is used to identify a component within an object graph\n    and the subsection of the config dict reserved for a component's factory.\n\n\n## Basic Usage\n\n 1. Define factory functions for `components`, attach them to a `binding`, and provide\n    (optional) configuration `defaults`:\n\n        from microcosm.api import defaults, binding\n\n        @binding(\"foo\")\n        @defaults(baz=\"value\")\n        def create_foo(graph):\n            return dict(\n                # factories can reference other components\n                bar=graph.bar,\n                # factories can reference configuration\n                baz=graph.config.foo.baz,\n            )\n\n        @binding(\"bar\")\n        def create_bar(graph):\n            return dict()\n\n    Factory functions have access to the `object graph` and, through it, the `config dict`. Default\n    configuration values, if provided, are pre-populated within the provided binding; these may be\n    overridden from data loaded from an external source.\n\n 2. Wire together the microservice by creating a new object graph along with service metadata:\n\n        from microcosm.api import create_object_graph\n\n        graph = create_object_graph(\n            name=\"myservice\",\n            debug=False,\n            testing=False,\n        )\n\n    Factories may access the service metadata via `graph.metadata`. This allows for several\n    best practices:\n\n     -  Components can implement ecosystem-wide conventions (e.g. for logging or persistence),\n        using the service name as a discriminator.\n     -  Components can customize their behavior during development (`debug=True`) and unit\n        testing (`testing=True`)\n\n 3. Reference any `binding` in the `object graph` to access the corresponding `component`:\n\n        print(graph.foo)\n\n    Components are initialized *lazily*. In this example, the first time `graph.foo` is accessed,\n    the bound factory (`create_foo()`) is automatically invoked. Since this factory in turn\n    accesses `graph.bar`, the next factory in the chain (`create_bar()`) would also be called\n    if it had not been called yet.\n\n    Graph cycles are not allowed, although dependent components may cache the graph instance\n    to access depending components after initialization completes.\n\n 4. Optionally, initialize the microservice's components explicitly:\n\n        graph.use(\n            \"foo\",\n            \"bar\",\n        )\n\n    While the same effect could be achieved by accessing `graph.foo` or `graph.bar`, this\n    construction has the advantage of initializes the listed components up front and triggering\n    any configuration errors as early as possible.\n\n    It is also possible to then *disable* any subsequent lazy initialization, preventing any\n    unintended initialization during subsequent operations:\n\n        graph.lock()\n\n\n## Assumptions\n\nThis library was influenced by the [pinject](https://github.com/google/pinject) project, but\nmakes a few assumption that allow for a great deal of simplication:\n\n 1. Microservices are small enough that simple string bindings suffice. Or, put another way,\n    conflicts between identically bound components are a non-concern and there is no need\n    for explicit scopes.\n\n 2. Microservices use processes, not threads to scale. As such, thread synchronization is\n    a non-goal.\n\n 3. Mocking (and patching) of the object graph is important and needs to be easy. Unit tests\n    expect to use `unittest.mock library; it should be trivial to temporarily replace a component.\n\n 4. Some components will be functions that modify other components rather than objects\n    that need to be instantiated.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/globality-corp/microcosm",
    "keywords": "microcosm",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microcosm",
    "package_url": "https://pypi.org/project/microcosm/",
    "platform": "",
    "project_url": "https://pypi.org/project/microcosm/",
    "project_urls": {
      "Homepage": "https://github.com/globality-corp/microcosm"
    },
    "release_url": "https://pypi.org/project/microcosm/2.12.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Microcosm - Simple microservice configuration",
    "version": "2.12.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15312161,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c80f163e26cddefd1b783f34c7c4b35a2323633385519a9fcc5e6ab8cf55ff1f",
        "md5": "ab3852334ccbef1007af57a361497f67",
        "sha256": "4164ef9c39b2949ee804490f980e9daa1806b4c65defd523484ec41f3dd513f7"
      },
      "downloads": -1,
      "filename": "microcosm-2.12.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ab3852334ccbef1007af57a361497f67",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19601,
      "upload_time": "2019-08-02T02:45:06",
      "upload_time_iso_8601": "2019-08-02T02:45:06.525477Z",
      "url": "https://files.pythonhosted.org/packages/c8/0f/163e26cddefd1b783f34c7c4b35a2323633385519a9fcc5e6ab8cf55ff1f/microcosm-2.12.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}