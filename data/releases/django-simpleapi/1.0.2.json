{
  "info": {
    "author": "Alex Kessinger",
    "author_email": "voidfiles@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "django-simpleapi: API's for everyone\n====================================\n\n.. image:: https://api.travis-ci.org/voidfiles/django-simpleapi.svg\n    :target: https://travis-ci.org/voidfiles/django-simpleapi\n\n.. image:: https://badge.fury.io/py/django-simpleapi.png\n    :target: http://badge.fury.io/py/django-simpleapi\n\n.. image:: https://pypip.in/d/django-simpleapi/badge.png\n        :target: https://crate.io/packages/django-simpleapi/\n\n\ndjango-simpleapi is an MIT Licensed django app, written in Python, for developers.\n\nHow many times have you wanted to create a simple JSON api in Django.\nI mean simple. There are great tools out their like * and * but sometimes\nyou just want to send back some JSON.\n\nThis app makes it super simple to do that.\n\n.. code-block:: python\n\n    from simpleapi import api_handler\n\n    @api_handler\n    def get_some_yak(request):\n        return {\n            'yak': 'yummm'\n        }\n\n    urlpatterns = patterns(\n        '',\n        url(r'^get/some/yak$', get_some_yak),\n    )\n\n.. code-block:: shell\n\n    curl http://localhost:8000/get/some/yak\n\n    {\n        \"data\": {\n            \"yak\": \"yummm\"\n        },\n        \"meta\": {\n            \"code\": 200\n        }\n    }\n\n\n\nFeatures\n--------\n\n- A Simple API for Django\n- Easy execption handling, creation\n- Easy addition to meta\n\nInstallation\n------------\n\nTo install Requests, simply:\n\n.. code-block:: bash\n\n    $ pip install django-simpleapi\n\n\nDocumentation\n-------------\n\nThis easyiest way to get started is to use the `api_handler` decorator.\n\n.. code-block:: python\n\n    from simpleapi import api_handler\n\n    @api_handler\n    def get_some_yak(request):\n        return {\n            'yak': 'yummm'\n        }\n\nAny view function that returns a dict object will work with this interface.\n\nNext, often in APIs you need to fail for some reason. Validation, missing params, you name it. There is an easy way to make that happen `SimpleHttpException`\n\n.. code-block:: python\n\n    from simpleapi import api_handler, SimpleHttpException\n\n    @api_handler\n    def get_some_yak(request):\n        required_param = request.GET.get('required_param')\n\n        if required_param is None:\n            raise SimpleHttpException(\"Missing required_param\", 'missing-required-param', 400)\n\n        return {\n            'yak': 'yummm'\n        }\n\n\nNow when you request this view and forget to pass required_param you would see something like this.\n\n\n.. code-block:: shell\n\n    curl http://localhost:8000/get/some/yak\n\n    {\n        \"meta\": {\n            \"code\": 400,\n            \"error_message\": \"Missing required_param\",\n            \"error_slug\": \"missing-required-param\"\n        }\n    }\n\nNot only will the HTTP Status code be in the meta response, it will also be the HTTP Code sent back. Error slug is helpfull in resolving exceptions progrmattically. It's mucher easier then relying on string grepping to figure out what went wrong.\n\nFinally, you might want to add you own information to the meta part of the envelope. This would helpfull for passing information like pagination information.\n\n.. code-block:: python\n\n    from simpleapi import api_handler\n\n    @api_handler\n    def get_some_yak(request):\n        request.META['_simple_api_meta']['yak_count'] = 1\n\n        return {\n            'yak': 'yummm'\n        }\n\nThe response would now look something like this.\n\n.. code-block:: shell\n\n    curl http://localhost:8000/get/some/yak\n\n    {\n        \"data\": {\n            \"yak\": \"yummm\"\n        },\n        \"meta\": {\n            \"code\": 200,\n            \"yak_counter\": 1\n        }\n    }",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/voidfiles/django-simpleapi",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-simpleapi",
    "package_url": "https://pypi.org/project/django-simpleapi/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-simpleapi/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/voidfiles/django-simpleapi"
    },
    "release_url": "https://pypi.org/project/django-simpleapi/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Django package that allows you to write APIs simply",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1428602,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e06e15ea2f471f21e4b6a897ccd87cf23bac19682b992483fe072b1804aad1ec",
        "md5": "05721e99405c232aacacecd502c06c26",
        "sha256": "6c94de3c1e1540ad8c2ddf6cb02dd94ce569556abf5fd588ab1cefedd1647626"
      },
      "downloads": -1,
      "filename": "django-simpleapi-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "05721e99405c232aacacecd502c06c26",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3285,
      "upload_time": "2014-12-23T01:54:21",
      "upload_time_iso_8601": "2014-12-23T01:54:21.929925Z",
      "url": "https://files.pythonhosted.org/packages/e0/6e/15ea2f471f21e4b6a897ccd87cf23bac19682b992483fe072b1804aad1ec/django-simpleapi-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}