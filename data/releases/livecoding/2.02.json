{
  "info": {
    "author": "Richard Tew",
    "author_email": "richard.m.tew@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable"
    ],
    "description": "This library implements something which is often called live coding or code\r\nreloading. It allows an application to have Python code which might be part\r\nof it updated as the files the code is in are changed - while the application is\r\nrunning.\r\n\r\n * No need to restart the application in order to incorporate changes made to\r\n   Python scripts.\r\n * No need to execute Python scripts manually each time you want to use the code\r\n   within them.\r\n\r\nThis library will not allow you to have your existing Python modules reload. \r\nPlease visit the project home page if you wish to understand why.  This is a\r\ncustom solution, not a band-aid for your existing practices.\r\n\r\nChanges from version 2.01:\r\n\r\n * MODE_OVERWRITE is recognised as not working properly and now MODE_UPDATE is\r\n   the default option.\r\n * Now uses the 'logging' module from the standard library for output, whether\r\n   for debugging or just related to normal usage.\r\n * Unit testing for managed scripts was only done when the script was first\r\n   loaded, not when it was subsequently modified and reloaded.  Now it happens\r\n   in both cases.\r\n * When unit tests are located for a managed script, how many were found for\r\n   that script are logged as normal usage output.\r\n * Exceptions that occur during the loading or reloading process are now\r\n   displayed through 'logging.exception', rather than through custom means\r\n   based around the 'traceback' module.\r\n * If the internal monitoring of file changes is used, depending on which\r\n   method it chooses to use to monitor, it may do it in a Python thread.\r\n   If this thread is prevented from exiting with the garbage collection of\r\n   the code reloader, then the main Python thread and therefore whatever\r\n   application is running will not exit until the other thread does as well.\r\n   The other thread can be made to exit, but using the new 'EndMonitoring'\r\n   function.\r\n * The 'filechanges' module was passing notification of all file changes\r\n   within the directories it monitored.  Now it only passes on changes to\r\n   files with a name ending in '.py'.\r\n * For every changed script that MODE_UPDATE loaded and put into effect,\r\n   if there were classes in a script with functions defined on them, those\r\n   classes would be leaked.  Under this mode, those scripts and the objects\r\n   within them, like classes are not necessarily used.\r\n * Added a way to get callbacks when classes are updated.  This is done by\r\n   passing a function or method to 'SetClassUpdateCallback' on the code\r\n   reloader.\r\n * Under MODE_UPDATE, when classes were processed and their functions were\r\n   moved over from the updated script that had been loaded to the original\r\n   script, they were not rebound.  This meant they were referencing the\r\n   globals dictionary of the temporary script, rather than that of the\r\n   original script where they were going.  Now the rebound functions are\r\n   used, rather than just being created and ignored.\r\n * When a script is garbage collected, its globals dictionary is explicitly\r\n   cleared.  This should highlight problems with faulty code reloading, and\r\n   it also works around a class leakage problem too (issue 12).",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://code.google.com/p/livecoding/downloads/list",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://code.google.com/p/livecoding/",
    "keywords": "live-coding, stackless, code reloading",
    "license": "New BSD license.\r\nhttp://livecoding.googlecode.com/svn/trunk/LICENSE",
    "maintainer": "Richard Tew",
    "maintainer_email": "richard.m.tew@gmail.com",
    "name": "livecoding",
    "package_url": "https://pypi.org/project/livecoding/",
    "platform": "",
    "project_url": "https://pypi.org/project/livecoding/",
    "project_urls": {
      "Download": "http://code.google.com/p/livecoding/downloads/list",
      "Homepage": "http://code.google.com/p/livecoding/"
    },
    "release_url": "https://pypi.org/project/livecoding/2.02/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Code reloading support library for Python",
    "version": "2.02",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 147972,
  "urls": [],
  "vulnerabilities": []
}