{
  "info": {
    "author": "datahappy1",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dummy_file_generator\n## version 1.1.21\n### Dummy .csv, flat text or json files generator written in Python 3.7\n\n![](https://github.com/datahappy1/dummy_file_generator/blob/master/docs/img/dfg_logo.PNG)\n\n\nThis tool is able to generate dummy csv, flat text or json files based on the configuration settings you setup for your project(s).\n\n\n- [How to install and run the tool as CLI](#how-to-install-and-run-the-tool-as-CLI)\n\n- [How to install and run the tool as an imported package](#how-to-install-and-run-the-tool-as-an-imported-package)\n\n- [How to setup a new dummy file generator project](#how-to-setup-a-new-dummy-file-generator-project)\n\n- [How to add a new source dataset for your project](#How-to-add-a-new-source-dataset-for-your-project)\n\n- [Developer information](#Developer-information) (for further tool development)\n\n# How to install and run the tool as CLI\nOne common usage scenario can be load / stress / performance testing of file-processing data tools, allowing you to generate the files needed from a command line.\n\n### To install:\n1) `git clone https://github.com/datahappy1/dummy_file_generator c:\\dummy_file_generator\\`\n2) Set PYTHONPATH to c:\\dummy_file_generator\\ [tutorial](https://bic-berkeley.github.io/psych-214-fall-2016/using_pythonpath.html)\n\n### To run:<br />\nThe CLI tool needs these **MANDATORY** arguments defining: \n- projectname `--projectname` or `-pn` based on the projectname, the dummy file project specific settings from `dummy_file_generator/configs/config.json` file are loaded ,\n- absolutepath `--generated_file_path` or `-gp` defining the full output file path to the file you are about to generate\n\n>Provided arguments have higher precedence than fallback values in `settings.py`\n\nThe CLI tool can further consume these **OPTIONAL** arguments defining: \n- filesize `--filesize` or `-fs` defining the desired size (in kBs) of the output file \n- rowcount `--rowcount` or `-rc` defining the desired row count of the output file\n\n>Note if you do NOT specify the filesize and do NOT specify the rowcount, the default `row_count` value from\n`settings.py` will be used ( or the value you provide in the `default_rowcount` optional argument)\n\nThe CLI tool also supports these **OPTIONAL** arguments that can be used to override values in `settings.py`:\n- logging_level `--logging_level` or `-ll` defining the Python logging level \n- default_rowcount `--default_rowcount` or `-drc` defining the rowcount fallback value when neither row_count,neither file_size set\n- file_encoding `--file_encoding` or `-fen` defining the generated files encoding\n- file_line_ending `--file_line_ending` or `-fle` defining the file line ending\n\nThese two **OPTIONAL** arguments are typically needed when running the tool as an imported package, but you can use them even with\nthis tool running as CLI:\n- data_files_location `--data_files_location` or `-dfl` defining the path to the source .txt data files \n- config_json_path `--config_json_path` or `-cjp` defining the custom path to your config.json file\n\n\n#### Example how to run the tool with the -fs argument to set the desired filesize of 256 kB :\n1) `cd c:\\dummy_file_generator\\dummy_file_generator`\n2) `python c:\\dummy_file_generator\\dummy_file_generator\\__main__.py -pn dummy1 -gp c:\\myfiles\\dummy1file.csv -fs 256`\n\n#### Example how to run the tool with the -rc argument to set the desired rowcount of 1000 rows :\n1) `cd c:\\dummy_file_generator\\dummy_file_generator`\n2) `python c:\\dummy_file_generator\\dummy_file_generator\\__main__.py -pn dummy1 -gp c:\\myfiles\\dummy1file.csv -rc 1000`\n\n\n# How to install and run the tool as an imported package\nOne common usage scenario can be load / stress / performance testing of file-processing data tools, where you can generate dummy text files during the test fixtures / setup.\n\n### To install:\n1) `pip install dummy-file-generator`\n\n>You are strongly encouraged to use the Python virtual environment or Pipenv\n\n### To run:<br />\nThe dummy file generator imported package needs these **MANDATORY** arguments defining: \n- projectname `--projectname` or `-pn`, based on the project name, the dummy file specific settings from `config.json` file are loaded\n- generated_file_path `--generated_file_path` or `gp` defining the full output file path to the file you are about to generate\n\n>Provided arguments have higher precedence than fallback values in `settings.py`\n\nThe dummy file generator imported package can further consume these **OPTIONAL** arguments defining: \n- filesize `--filesize` or `-fs` defining the desired size (in kBs) of the output file \n- rowcount `--rowcount` or `-rc` defining the desired row count of the output file\n\n>Note if you do NOT specify the filesize and do NOT specify the rowcount, the `DEFAULT_ROW_COUNT` value from\n`settings.py` will be used ( you can override the `DEFAULT_ROW_COUNT` value in `settings.py` using the `default_rowcount` optional argument)\n\n- data_files_location `--data_files_location` or `-dfl` defining the path to the source .txt data files \n- config_json_path `--config_json_path` or `-cjp` defining the custom path to your `config.json` file\n- logging_level `--logging_level` or `-ll` defining the Python logging level \n- default_rowcount `--default_rowcount` or `-drc` defining the rowcount fallback value when neither row_count,neither file_size set\n- file_encoding `--file_encoding` or `-fen` defining the generated files encoding\n- file_line_ending `--file_line_ending` or `-fle` defining the file line ending\n\n>In the example below, `project_scope_kwargs` arguments `project_name`, `data_files_location`, `config_json_path` and `default_rowcount` are used\nto instantiate a DummyFileGenerator class instance. \n`file_scope_kwargs` arguments `generated_file_path`, `file_size`, `file_encoding` and `file_line_ending` are used to setup the generated file properties.\nOnce there is a instance of DummyFileGenerator, you can use it to generate as many files as needed while only using\nthe `write_output_file` method and it's specific `file_scope_kwargs` arguments\n\n#### Example how to run :\n```\nfrom dummy_file_generator import DummyFileGenerator as Dfg, DummyFileGeneratorException\n\nlogging_level = \"INFO\"\n\nproject_scope_kwargs = {\n    \"project_name\": \"dummy1\",\n    \"data_files_location\": \"c:\\\\dfg_files\\my_data_files\",\n    \"config_json_path\": \"c:\\\\dfg_files\\my_configs\\config.json\",\n    \"default_rowcount\": None,\n}\n\ntry:\n    dfg = Dfg(logging_level, **project_scope_kwargs)\nexcept DummyFileGeneratorException as DFG_ERR:\n    raise DFG_ERR\n\nfile_scope_kwargs = {\n    \"generated_file_path\": \"C:\\dfg\\\\bin\\\\file1.csv\",\n    \"file_size\": 1024,\n    #\"row_count\": 1000, \n    \"file_encoding\": \"utf8\",\n    \"file_line_ending\": \"\\n\",\n}\n\ntry:\n    dfg.write_output_file(**file_scope_kwargs)\nexcept DummyFileGeneratorException as DFG_ERR:\n    raise DFG_ERR\n```\n\n# How to setup a new dummy file generator project\nYou need to generate dummy files based on the content of the text files in your `data_files` folder, and these source text files need to have this plain text format:\n\n![](https://github.com/datahappy1/dummy_file_generator/blob/master/docs/img/first_names.PNG)\n\nThis tool picks random item from each of the files configured for your project in config.json and uses these values to populate the data for \"columns\" for each written row. \n\n### - How to generate a .csv file\nIf you need to generate a dummy .csv file containing 3 columns for Names, Dates and IDs, \nthe project JSON object in your config.json would need to be setup like:\n\n    {\n      \"project_name\":\"dummy1\",\n      \"file_type\":\"csv\",\n      \"header\":true,\n      \"csv_value_separator\": \",\",\n      \"csv_quoting\": \"ALL\",\n      \"csv_quote_char\": \"'\",\n      \"csv_escape_char\": \"\\\\\",\n      \"columns\":[\n        {\n          \"column_name\":\"Name\",\n          \"datafile\":\"first_names.txt\"\n        },\n        {\n          \"column_name\":\"Date\",\n          \"datafile\":\"dates.txt\"\n        },\n        {\n          \"column_name\":\"ID\",\n          \"datafile\":\"ids.txt\"\n        }\n      ]\n    }\n\nThis configuration generates a file like this sample:\n\n    'Name','Date','ID'\n    'Hank','2004-05-22','23432'\n    'Joe','2000-03-12','445'\n\n\n### - How to generate a .txt flat file:\nIf you need to generate a dummy .txt flat file containing 3 columns for Names, Dates and IDs with specific column lengths defined, \nthe \"project\" JSON object in your config.json would need to be setup like:\n\n    {\n      \"project_name\":\"dummy2\",\n      \"file_type\":\"flat\",\n      \"header\":true,\n      \"columns\":[\n        {\n          \"column_name\":\"Name\",\n          \"column_len\":10,\n          \"datafile\":\"first_names.txt\"\n        },\n        {\n          \"column_name\":\"Date\",\n          \"column_len\":12,\n          \"datafile\":\"dates.txt\"\n        },\n        {\n          \"column_name\":\"ID\",\n          \"column_len\":9,\n          \"datafile\":\"ids.txt\"\n        }      \n      ]\n    }\n\nThis configuration generates a file like this sample:\n\n    Name      Date        ID       \n    Hank      2004-05-22  23432    \n    Joe       2000-03-12  445\n\n\n### - How to generate a .json file:\nIf you need to generate a dummy .json file containing 3 columns for Names, Dates and IDs, \nthe \"project\" JSON object in your config.json would need to be setup like:\n\n    {\n      \"project_name\":\"dummy3\",\n      \"file_type\":\"json\",\n      \"columns\":[\n        {\n          \"column_name\":\"Name\",\n          \"datafile\":\"first_names.txt\"\n        },\n        {\n          \"column_name\":\"Date\",\n          \"datafile\":\"dates.txt\"\n        },\n        {\n          \"column_name\":\"ID\",\n          \"datafile\":\"ids.txt\"\n        }      \n      ]\n    }\n\nThis configuration generates a file like this sample:\n\n    [{\"Name\": \"Hank\", \"Date\": \"2004-05-22\", \"ID\": \"23432\"},\n    {\"Name\": \"Joe\", \"Date\": \"2000-03-12\", \"ID\": \"445\"}]\n\n\nIf you need to generate a more complex dummy .json file containing 3 columns for Names, Dates, IDs \nand an array-like column Identifiers containing one IDs array element and an object containing ID1 and ID2 attributes, \nthe \"project\" JSON object in your config.json would need to be setup like:\n\n    {\n      \"project_name\": \"dummy4\",\n      \"file_type\": \"json\",\n      \"columns\": [\n        {\n          \"column_name\": \"Name\",\n          \"datafile\": \"first_names.txt\"\n        },\n        {\n          \"column_name\": \"Date\",\n          \"datafile\": \"dates.txt\"\n        },\n        {\n          \"column_name\": \"ID\",\n          \"datafile\": \"ids.txt\"\n        },\n        {\n          \"column_name\": \"Identifiers\",\n          \"__array_columns\": [\n            {\n              \"datafile\": \"ids.txt\"\n            },\n            {\n              \"columns\": [\n                {\n                  \"column_name\": \"ID1\",\n                  \"datafile\": \"ids.txt\"\n                },\n                {\n                  \"column_name\": \"ID2\",\n                  \"datafile\": \"ids.txt\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n\nThis configuration generates a file like this sample:\n    \n    [{\"Name\": \"Hank\", \"Date\": \"2004-05-22\", \"ID\": \"23432\", \"Identifiers\": [\"445\", {\"ID1\": \"11111\", \"ID2\": \"145546566345\"}]},\n    {\"Name\": \"Joe\", \"Date\": \"2000-03-12\", \"ID\": \"445\", \"Identifiers\": [\"11111\", {\"ID1\": \"145546566345\", \"ID2\": \"156765\"}]}]\n\n>JSON file configuration allows only one level deep nested objects, that have to be defined in the __array_columns array\n\n# How to add a new source dataset for your project\nWhenever you need to add a new source .txt file in the data_files folder, just add it to your `data_files` folder.\n**The filename needs to correspond with the datafile value in your config.json file.**\n\nIf running as a standalone CLI tool, the `data_files` folder is located here:\n`dummy_file_generator/data_files`\n\nWhen running as an imported package, the `data_files` folder is where ever you specify it to be\nusing the argument `data_files_location`.\n\nNow you can use this new data file in your project setup in `config.json` file. \n\n# Developer information\n## testing using Pytest\nPytest unit and performance tests are also a part of this repository.\nYou can install Pytest using `pip install pytest`\n\n### To run tests:\n1) `cd c:\\dummy_file_generator\\dummy_file_generator`\n2) `python -m pytest c:\\dummy_file_generator\\tests`\n( In case when running from IDE, make sure the current working dir is set to `c:\\\\dummy_file_generator`)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/datahappy1/dummy_file_generator",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dummy-file-generator",
    "package_url": "https://pypi.org/project/dummy-file-generator/",
    "platform": null,
    "project_url": "https://pypi.org/project/dummy-file-generator/",
    "project_urls": {
      "Homepage": "https://github.com/datahappy1/dummy_file_generator"
    },
    "release_url": "https://pypi.org/project/dummy-file-generator/1.1.21/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "dummy csv, flat, json text file generator, typical usage scenario can be load / stress / performance testing of file-processing data tools",
    "version": "1.1.21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15603746,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "deacb8b7fa0d933a23c8486960ac28a4e1b9099c9370da03888c6e8ed025009c",
        "md5": "10f0eeff4438b3c4e2427699e3a9926a",
        "sha256": "57360c302a989dfbc87fe158c3e62fc2646cb20cffd0a6f5b113f3093c3616f3"
      },
      "downloads": -1,
      "filename": "dummy-file-generator-1.1.21.tar.gz",
      "has_sig": false,
      "md5_digest": "10f0eeff4438b3c4e2427699e3a9926a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16173,
      "upload_time": "2022-10-31T23:27:30",
      "upload_time_iso_8601": "2022-10-31T23:27:30.943785Z",
      "url": "https://files.pythonhosted.org/packages/de/ac/b8b7fa0d933a23c8486960ac28a4e1b9099c9370da03888c6e8ed025009c/dummy-file-generator-1.1.21.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}