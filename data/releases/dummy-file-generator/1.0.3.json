{
  "info": {
    "author": "datahappy1",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dummy_file_generator\n## version 1.0.3\na dummy csv or flat text files generator written in Python 3.7\n\n![](https://github.com/datahappy1/dummy_file_generator/blob/master/docs/img/rating.svg)\n\n![](https://github.com/datahappy1/dummy_file_generator/blob/master/docs/img/dfg_logo.PNG)\n\n\nThis tool is able to generate dummy csv or flat txt files based on the configuration settings you setup for your project(s).\nIt consumes arguments defining: \n- projectname (mandatory argument, *based on the projectname, the specific settings from config.json file are loaded ),* \n- absolutepath (mandatory argument) defining the full output file path to the file you wish to generate\n- filesize (optional argument) defining the desired size (in kBs) of the output file \n- rowcount (optional argument) defining the desired row count of the output file\n- logging_level (optional argument) defining the Python logging level \n\n- default_rowcount (optional argument) defining the rowcount fallback value when neither row_count,neither file_size set\n- file_encoding (optional argument) defining the generated files encoding\n- file_line_ending (optional argument) defining the file line ending\n- csv_value_separator (optional argument) defining the .csv file value separator\n\nthese arguments are needed when running as an importable library:\n- data_files_location (optional argument) defining the path to the source .txt data files \n- config_json_path (optional argument) defining the custom path to your config.json file\n\n\n\n[How to install and run the program as CLI](#how-to-install-and-run-the-program-as-CLI)\n\n[How to install and run the program as a importable library](#how-to-install-and-run-the-program-as-a-importable-library)\n\n[How to setup a new dummy file generator project](#how-to-setup-a-new-dummy-file-generator-project)\n\n[How to add a new source dataset for your project](#How-to-add-a-new-source-dataset-for-your-project)\n\n[Pytest testing](#Pytest-testing)\n\n\n# How to install and run the program as CLI\n### To install:\n`git clone https://github.com/datahappy1/dummy_file_generator c:\\dummy_file_generator\\`<br />\n\n`cd c:\\dummy_file_generator\\dummy_file_generator`\n\n`python.exe __main__.py -pn my_project -ap c:\\dummy1file.txt -rc 256`\n\n### To run:<br />\nYou need to set the required arguments :\nprojectname `-pn` <br />\nabsolutepath `-ap` <br />\n\nThe optional arguments are :\nfilesize `-fs` (in kB) <br />\nrowcount `-rc` <br />\n\n*Note if you do NOT specify the filesize and do NOT specify the rowcount, the default row_count value ( set to 100 ) from\nsettings.py will be used ( or the value you provide in the `default_rowcount` optional argument)\n\nRun these commands to execute:<br />\n- with the -fs argument to set the desired filesize of 256 kB :<br />\n`cd c:\\dummy_file_generator\\dummy_file_generator`<br />\n`python c:\\dummy_file_generator\\dummy_file_generator\\__main__.py -pn dummy1 -ap c:\\myfiles\\dummy1file.csv -fs 256`<br />\n- with the -rc argument to set the desired rowcount of 1000 rows :<br />\n`cd c:\\dummy_file_generator\\dummy_file_generator`<br />\n`python c:\\dummy_file_generator\\dummy_file_generator\\__main__.py -pn dummy1 -ap c:\\myfiles\\dummy1file.csv -rc 1000`<br />\n\n*You are strongly encouraged to use Python virtual environment\n\n# How to install and run the program as a importable library\n### To install:\n`pip install dummy-file-generator`<br />\n\n### To run:<br />\nYou need to set these arguments as an Python dictionary:\n    kwargs = {\"project_name\": \"dummy1\", \"absolute_path\": \"C:\\\\scrap_files\\dummy1.csv\",\n              \"file_size\": 1024,\n              \"logging_level\": \"DEBUG\",\n              \"data_files_location\": \"c:\\\\dummy_file_generator\\dummy_file_generator\\data_files\",\n              \"config_json_path\": \"c:\\\\dummy_file_generator\\dummy_file_generator\\configurables\\config.json\",\n              }\n\n*Note if you do NOT specify the filesize and do NOT specify the rowcount, the default row_count value ( set to 100 ) from\nsettings.py will be used ( or the value you provide in the `default_rowcount` optional argument)\n\nRun from within a function in your project for example:<br />\n```\nfrom dummy_file_generator import DummyFileGenerator as DFG\n\ndef generate_dummy_file():\n    kwargs = {\"project_name\": \"dummy1\", \"absolute_path\": \"C:\\\\x\\dfxx.csv\",\n              \"file_size\": 1024,\n              \"logging_level\": \"DEBUG\",\n              \"data_files_location\": \"c:\\\\dummy_file_generator\\dummy_file_generator\\data_files\",\n              \"config_json_path\": \"c:\\\\dummy_file_generator\\dummy_file_generator\\configurables\\config.json\",\n              }\n\n    obj = DFG(**kwargs)\n    DFG.executor(obj)\n\ngenerate_dummy_file()\n\n```\n\n# How to setup a new dummy file generator project\n\nLet's say you need to generate dummy files based on the content of the text files in your \"data_files\" folder, and these text files are looking like this:\n\n### - How to generate a .csv file\nLet's say you need to generate a dummy .csv file containing 3 columns for Names, Dates and IDs. \nThe project element in your config.json would need to be setup like:\n\n    {\n      \"project_name\":\"dummy1\",\n      \"file_type\":\"csv\",\n      \"header\":true,\n      \"columns\":[\n        {\n          \"column_name\":\"Name\",\n          \"datafile\":\"firstnames.txt\"\n        },\n        {\n          \"column_name\":\"Date\",\n          \"datafile\":\"dates.txt\"\n        },\n        {\n          \"column_name\":\"ID\",\n          \"datafile\":\"IDs.txt\"\n        }      \n      ]\n    }\n\n### - How to generate a .txt flat file:\nLet's say you need to generate a dummy .txt flat file containing 3 columns for Names, Dates and IDs with specific column lengths defined. \nThe project element in your config.json would need to be setup like:\n\n    {\n      \"project_name\":\"dummy1\",\n      \"file_type\":\"flat\",\n      \"header\":true,\n      \"columns\":[\n        {\n          \"column_name\":\"Name\",\n          \"column_len\":6,\n          \"datafile\":\"firstnames.txt\"\n        },\n        {\n          \"column_name\":\"Date\",\n          \"column_len\":10,\n          \"datafile\":\"dates.txt\"\n        },\n        {\n          \"column_name\":\"ID\",\n          \"column_len\":9,\n          \"datafile\":\"IDs.txt\"\n        }      \n      ]\n    }\n\n# How to add a new source dataset for your project\nWhenever you need to add a new source .txt file in the data_files folder, just add it to the `data_files` folder. \nNow you can use this new data file in your project setup in `config.json` file. \n\n# Pytest testing\nPytest unit and performance tests are also a part of this tool.\nYou can install Pytest with `pip install pytest`<br /> \nTo run tests:<br />\n`cd c:\\dummy_file_generator\\dummy_file_generator`<br />\n`pytest`<br />\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/datahappy1/dummy_file_generator",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dummy-file-generator",
    "package_url": "https://pypi.org/project/dummy-file-generator/",
    "platform": "",
    "project_url": "https://pypi.org/project/dummy-file-generator/",
    "project_urls": {
      "Homepage": "https://github.com/datahappy1/dummy_file_generator"
    },
    "release_url": "https://pypi.org/project/dummy-file-generator/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "dummy flat text/csv file generator",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15603746,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "926955ce7a668059e0349898ac7ed2f451f216884f4a95ee71fba8429a9a7699",
        "md5": "cb95a8037f526255897283692e23c837",
        "sha256": "b0433b35a49a3ef87a8c20937c2a3e8c7a82e7c7f41eeb4361f5133314cfa666"
      },
      "downloads": -1,
      "filename": "dummy_file_generator-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cb95a8037f526255897283692e23c837",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15449,
      "upload_time": "2019-09-30T20:19:35",
      "upload_time_iso_8601": "2019-09-30T20:19:35.734763Z",
      "url": "https://files.pythonhosted.org/packages/92/69/55ce7a668059e0349898ac7ed2f451f216884f4a95ee71fba8429a9a7699/dummy_file_generator-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1cf1fabb857bf7402be177c3181df9c6c14032f76cc23a279e9464d3bc40949",
        "md5": "7c31f6b5cdc4b88fbaf181bb127109cf",
        "sha256": "7f487949713b4d8a0c55d494a7c29095d5453dfe1db0111f0d526ee8c0dcbd58"
      },
      "downloads": -1,
      "filename": "dummy-file-generator-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7c31f6b5cdc4b88fbaf181bb127109cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9688,
      "upload_time": "2019-09-30T20:19:38",
      "upload_time_iso_8601": "2019-09-30T20:19:38.274820Z",
      "url": "https://files.pythonhosted.org/packages/e1/cf/1fabb857bf7402be177c3181df9c6c14032f76cc23a279e9464d3bc40949/dummy-file-generator-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}