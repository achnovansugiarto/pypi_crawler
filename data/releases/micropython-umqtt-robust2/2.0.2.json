{
  "info": {
    "author": "Wojciech Bana≈õ",
    "author_email": "fizista+umqtt.robust2@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: Implementation :: MicroPython"
    ],
    "description": ".. role:: bash(code)\n   :language: bash\n\n.. role:: python(code)\n   :language: python\n\numqtt.robust2\n=============\n\numqtt.robust2 is a MQTT client for MicroPython. (Note that it uses some\nMicroPython shortcuts and doesn't work with CPython). It consists of\ntwo submodules: umqtt.simple2 and umqtt.robust2. umqtt.robust2 is built\non top of umqtt.simple2 and adds auto-reconnect facilities for some of\nnetworking errors.\n\nDifferences between umqtt.robust and umqtt.robust2\n--------------------------------------------------\n\n* works without blocking app\n* in case of network problems, it can send the data itself at a later time\n* we have the ability to track down errors\n* is larger than the previous one, so I recommend compiling this\n  library to MPY files (especially for esp8266)\n\nHow and where to install this code?\n-----------------------------------\nThis library requires the `micropython-umqtt.simple2` library ( https://github.com/fizista/micropython-umqtt.simple2 ).\nTherefore, please read this required library first,\nand then you can install this one.\n\nYou can install using the upip:\n\n.. code-block:: python\n\n    import upip\n    upip.install(\"micropython-umqtt.robust2\")\n\nor\n\n.. code-block:: bash\n\n    micropython -m upip install -p modules micropython-umqtt.robust2\n\n\nYou can also clone this repository, and install it manually:\n\n.. code-block:: bash\n\n    git clone https://github.com/fizista/micropython-umqtt.robust2.git\n\nManual installation gives you more possibilities:\n\n* You can compile this library into MPY files using the :bash:`compile.sh` script.\n* You can remove comments from the code with the command: :bash:`python setup.py minify`\n* You can of course copy the code as it is, if you don't mind.\n\n**Please note that the PyPi repositories contain optimized code (no comments).**\n\n**For more detailed information about API please see the source code\n(which is quite short and easy to review) and provided examples.**\n\nWhat does it mean to be \"robust\" ?\n----------------------------------\n\nModern computing systems are sufficiently complex and have multiple\npoints of failure. Consider for example that nothing will work if\nthere's no power (mains outage or battery ran out). As you may imagine,\numqtt.robust2 won't help you with your flat battery. Most computing\nsystems are now networked, and communication is another weak link.\nThis is especially true for wireless communications. If two of your\nsystems can't connect reliably communicate via WiFi, umqtt.robust2\ncan't magically resolve that (but it may help with intermittent\nWiFi issues).\n\nWhat umqtt.robust2 tries to do is very simple - if while trying to\nperform some operation, it detects that connection to MQTT breaks,\nit tries to reconnect to it. That's good direction towards \"robustness\",\nbut the problem that there is no single definition of what \"robust\"\nis. Let's consider following usecase:\n\n1. A temperature reading gets transmitted once a minute. Then the\nbest option in case of a transmission error might be not doing\nanything at all - in a minute, another reading will be transmitted,\nand for slowly-changing parameter like a temperature, a one-minute\nlost reading is not a problem. Actually, if the sending device is\nbattery-powered, any connection retries will just drain battery and\nmake device \"less robust\" (it will run out of juice sooner and more\nunexpectedly, which may be a criteria for \"robustness\").\n\nWe can also cache some of the results, as far as memory allows,\nuntil we try to connect again. This will increase the reliability\nof data delivery.\n\n2. If there's a button, which communicates its press event, then\nperhaps it's really worth to retry to deliver this event (a user\nexpects something to happen when they press the button, right?).\nBut if a button is battery-power, unconstrained retries won't do\nmuch good still. Consider mains power outage for several hours,\nMQTT server down all this time, and battery-powered button trying\nto re-publish event every second. It will likely drain battery\nduring this time, which is very non-robust. Perhaps, if a press\nisn't delivered in 15 seconds, it's no longer relevant (depending\non what press does, the above may be good for a button turning\non lights, but not for something else!)\n\n3. Finally, let's consider security sensors, like a window broken\nsensor. That's the hardest case. Apparently, those events are\nimportant enough to be delivered no matter what. But if done with\nshort, dumb retries, it will only lead to quick battery drain. So,\na robust device would retry, but in smart manner, to let battery\nrun for as long as possible, to maximize the chance of the message\nbeing delivered.\n\nLet's sum it up:\n\na) There's no single definition of what \"robust\" is. It depends on\n   a particular application.\nb) Robustness is a complex measure, it doesn't depend on one single\n   feature, but rather many different features working together.\n   Consider for example that to make button from the case 2 above\n   work better, it would help to add a visual feedback, so a user\n   knew what happens.\n\nAs you may imagine, umqtt.robust2 doesn't, and can't, cover all possible\n\"robustness\" scenarios, nor it alone can make your MQTT application\n\"robust\". Rather, it's a barebones example of how to reconnect to an\nMQTT server in case of a connection error. As such, it's just one\nof many steps required to make your app robust, and majority of those\nsteps lie on *your application* side. With that in mind, any realistic\napplication would subclass umqtt.robust2.MQTTClient class and override\nadd_msg_to_send() and reconnect() methods and will use the\nsocket_timeout/message_timeout parameters to suit particular usage scenario.\nIt may even happen that umqtt.robust2 won't even suit your needs, and you\nwill need to implement your \"robust\" handling from scratch.\n\n\nPersistent and non-persistent MQTT servers\n------------------------------------------\n\nConsider an example: you subscribed to some MQTT topics, then connection\nwent down. If we talk \"robust\", then once you reconnect, you want any\nmessages which arrived when the connection was down, to be still delivered\nto you. That requires retainment and persistency enabled on MQTT server.\nAs umqtt.robust2 tries to achieve as much \"robustness\" as possible, it\nmakes a requirement that the MQTT server it communicates to has persistency\nenabled. This include persistent sessions, meaning that any client\nsubscriptions are retained across disconnect, and if you subscribed once,\nyou no longer need to resubscribe again on next connection(s). This makes\nit more robust, minimizing amount of traffic to transfer on each connection\n(the more you transfer, the higher probability of error), and also saves\nbattery power.\n\nHowever, not all broker offer true, persistent MQTT support:\n\n* If you use self-hosted broker, you may need to configure it for\n  persistency. E.g., a popular open-source broker Mosquitto requires\n  following line::\n\n    persistence true\n\n  to be added to ``mosquitto.conf``. Please consult documentation of\n  your broker.\n\n* Many so-called \"cloud providers\" offer very limited subset of MQTT for\n  their free/inexpensive tiers. Persistence and QoS are features usually\n  not supported. It's hard to achieve any true robustness with these\n  demo-like offerings, and umqtt.robust2 isn't designed to work with them.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fizista/micropython-umqtt.robust2",
    "keywords": "mqtt micropython",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-umqtt.robust2",
    "package_url": "https://pypi.org/project/micropython-umqtt.robust2/",
    "platform": "",
    "project_url": "https://pypi.org/project/micropython-umqtt.robust2/",
    "project_urls": {
      "Homepage": "https://github.com/fizista/micropython-umqtt.robust2"
    },
    "release_url": "https://pypi.org/project/micropython-umqtt.robust2/2.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MQTT client for MicroPython (\"robust\" version).",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11322813,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "716bd1874260dc69ad2924aacf9437bc1b872648d894008d291c4cc0948b4441",
        "md5": "88816a2cdd962dd831f44006345c75cc",
        "sha256": "a5c03e27928d28a7d321e203b5548fe7af4883b22bea76893e298ac366d45705"
      },
      "downloads": -1,
      "filename": "micropython-umqtt.robust2-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "88816a2cdd962dd831f44006345c75cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5071,
      "upload_time": "2020-03-18T13:17:11",
      "upload_time_iso_8601": "2020-03-18T13:17:11.636643Z",
      "url": "https://files.pythonhosted.org/packages/71/6b/d1874260dc69ad2924aacf9437bc1b872648d894008d291c4cc0948b4441/micropython-umqtt.robust2-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}