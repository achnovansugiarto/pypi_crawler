{
  "info": {
    "author": "Srikandan Raju, Sathish Anandha",
    "author_email": "kandan.sri15@gmail.com, sathishvp7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Model Performance Investigator\n\n## Short Description\n        Model Performance Investigator is used to analyse the performance Machine Learning and\n    Deep learning models. It gives the user basic idea how the model performance on given data.\n    So that user can start work on the right model.\n\n## Installation\n    pip install model-performance-analyzer\n\n## How to use ?\n\n    * Import the package.\n        from model_analyzer import ml_models as ml\n\n    * Call the predector function, assign it to a variable and run.\n        data = [train_X, train_y, text_x]\n        new_out = ml.predector('regression', data, alg_type=['linear','lasso'], \n                  score_type=['r2'], tune_param='default')\n\n## Parameters ?\n    1. 'regression' -> Current Version supports Regression and Classification \n                       type problems. It is mandatory.\n\n    2. data -> data must contain \"train_X, train_y, text_x\". train_X, train_y is for fitting\n               the model and test_x is for predicting. It is mandatory.\n\n    3. alg_type -> Type of the algorithm. It is optional parameter. Provide the parameter\n                   values in list.  \n                   Default is \"Linear Regression\" algorithm.\n\n                   Currently it Supports:\n\n                    Algorithm Name             | Parameter \n                    ---------------------------|----------\n                    Linear Regression        | linear\n                    Polynomial Regression    | polynomial\n                    Redig Regression         | ridge\n                    Lasso Regression         | lasso\n                    ElasticNet Regression    | elasticnet\n                    Random Forest Regression | random_forest_regressor\n                    XG Boost Regressor       | xgb_regressor\n\n    4. score_type -> Type of the score. It is optional parameter. Provide the parameter\n                     values in list.   \n                     Default is \"r2\" algorithm.\n                    1. Regression:\n                       It Supports:\n                        * r2\n                        * explained_variance\n                        * max_error\n                        * neg_mean_absolute_error\n                        * neg_mean_squared_error\n                        * neg_mean_squared_log_error\n                        * neg_median_absolute_error\n                        * neg_mean_poisson_deviance\n                        * neg_mean_gamma_deviance\n\n                    2. Classification:\n                        It Supports:\n                        * jaccard\n                        * f1\n                        * neg_log_loss\n                        * roc_auc\n                        * accuracy\n                        * balanced_accuracy\n                        * average_precision\n\n    5. tune_param -> Tuning Parameter for the model. It is optional. By Default parameter \n                     this package uses some basic parameters for each models.\n                     User can provide own Tuning Parameter.\n\n                     Template:\n                         tune_param = {Name of the model: {parameters}}\n                         Name of the model -> should be similar like alg_type.\n\n                     Example:\n                         linear_tune_param = {\n                              \"fit_intercept\"       : [True, False],\n                              \"normalize\"           : [True, False],\n                              \"copy_X\"              : [True, False],\n                              \"n_jobs\"              : [ -1]\n                            }\n                        lasso_tune_param = {\n                              \"alpha\":[1e-15, 1e-10, 1e-8, 1e-3, 1e-2, \n                                       1, 5, 10, 15, 20, 40, 50,\n                                       85, 100, 300, 500, 1000\n                                       ]\n                            }\n\n                         tune_param = {'linear': linear_tune_param, \n                                      'lasso': lasso_tune_param}\n\n                     Note : User don't have to specify tuning parameter for all the\n                            models used in 'alg_type'. If tuning parameter is not provided\n                            then this package use default tuning parameter.\n\n## Project History\n   The project was started in 2019 by Srikandan Rajua and Sathish Anandha.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/srikandan/model-evaluation",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "model-performance-investigator",
    "package_url": "https://pypi.org/project/model-performance-investigator/",
    "platform": "",
    "project_url": "https://pypi.org/project/model-performance-investigator/",
    "project_urls": {
      "Homepage": "https://github.com/srikandan/model-evaluation"
    },
    "release_url": "https://pypi.org/project/model-performance-investigator/1.0.2/",
    "requires_dist": [
      "tensorflow",
      "keras",
      "mxnet",
      "scikit-learn",
      "numpy",
      "pandas",
      "statsmodels",
      "xgboost",
      "scipy"
    ],
    "requires_python": ">=3.6",
    "summary": "Package give idea of a models performance based on given data",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6592680,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddbcbfe584a924159a4f6c7bec2f42946ff8a64407201a6192d74900aa47539a",
        "md5": "99c09ed7613a681a7d964062b0c1ed9a",
        "sha256": "c070932e04f50841d4c10cf31599678d99ca65738483d6e88b4ad6fbc9dd31c3"
      },
      "downloads": -1,
      "filename": "model_performance_investigator-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "99c09ed7613a681a7d964062b0c1ed9a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16923,
      "upload_time": "2020-02-04T02:41:42",
      "upload_time_iso_8601": "2020-02-04T02:41:42.602787Z",
      "url": "https://files.pythonhosted.org/packages/dd/bc/bfe584a924159a4f6c7bec2f42946ff8a64407201a6192d74900aa47539a/model_performance_investigator-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4758e3b938a7792c1daf0aa0b076325b52ef48b0bcf5ef9e69120b7ab90f08b1",
        "md5": "a97b45ec70450af68d691f18e4d905ae",
        "sha256": "08db682b0803986315f2078d691b51e68b90074fd6b1504fc3e90216b83f52ab"
      },
      "downloads": -1,
      "filename": "model-performance-investigator-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a97b45ec70450af68d691f18e4d905ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9212,
      "upload_time": "2020-02-04T02:41:44",
      "upload_time_iso_8601": "2020-02-04T02:41:44.475894Z",
      "url": "https://files.pythonhosted.org/packages/47/58/e3b938a7792c1daf0aa0b076325b52ef48b0bcf5ef9e69120b7ab90f08b1/model-performance-investigator-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}