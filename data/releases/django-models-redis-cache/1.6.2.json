{
  "info": {
    "author": "Anton Nechaev",
    "author_email": "antonnechaev990@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database :: Front-Ends",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Internet :: WWW/HTTP :: Site Management",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Object Brokering",
      "Topic :: Utilities"
    ],
    "description": "# django-models-redis-cache\n\n## **Django Models Redis Cache (DMoReCa), library that gives your specified Django models regular caching via Redis**\n\nFor one project, I needed to work with redis, but redis-py provides a minimum level of work with redis. I didn't find any Django-like ORM for redis, so I wrote library [python-redis-orm](https://github.com/gh0st-work/python_redis_orm/) ([PyPI](https://pypi.org/project/python-redis-orm/)).\n\nAlso, if you are searching for just django-like redis ORM, please check [django-redis-orm](https://github.com/gh0st-work/django_redis_orm/) ([PyPI](https://pypi.org/project/django-redis-orm/)).\n\n**And this library is port to Django that provides easy-to-use Django models caching via Redis**.\n\n### Working with this library, you are expected:\n\n- Fully works in 2021\n- Saving almost all types of fields automatically\n- Efficient data storage (SET model_name:instance_id \"JSON string\")\n- Async caching\n- Connection pooling\n- Easy adaptation to your needs\n- Adequate informational messages and error messages\n- Built-in RedisRoot class that stores specified models, with:\n    - **prefix** setting - prefix of this RedisRoot to be stored in redis\n    - **connection_pool** setting - your redis.ConnectionPool instance (from redis-py)\n    - **async_db_requests_limit** setting - your database connections limit\n    - **ignore_deserialization_errors** setting - do not raise errors, while deserializing data\n    - **save_consistency** setting - show structure-first data\n    - **economy** setting - to not return full data and save some requests (usually, speeds up your app on 80%)\n- Customizing caching settings by model:\n    - **enabled** setting - to cache or not\n    - **ttl** setting - cache period\n    - **save_related_models** setting - save ForeignKey-s and ManyToMany-s instances\n    - **exclude_fields** setting - field names to be excluded from caching\n    - **filter_by** - setting - only models that passed filter params will be cached\n- CRUD (Create Read Update Delete), in our variation: save, get, filter, order, update, delete:\n    - `example_instance = ExampleModel(example_field='example_data').save()` - to create an instance and get its data dict\n    - `filtered_example_instances = redis_root.get(ExampleModel, example_field='example_data')` - to get all ExampleModel instances with example_field filter and get its data dict\n    - `ordered_instances = redis_root.order(filtered_example_instances, '-id')` - to get ordered filtered_example_instances by id ('-' for reverse)\n    - `updated_example_instances = redis_root.update(ExampleModel, ordered_instances, example_field='another_example_data')` - to update all ordered_instances example_field with value 'another_example_data' and get its data dict\n    - `redis_root.delete(ExampleModel, updated_example_instances)` - to delete updated_example_instances\n\n# Installation\n`pip install django-models-redis-cache`\n\n[Here is PyPI](https://pypi.org/project/django-models-redis-cache/)\n\nAdd \"django_models_redis_cache\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'django_models_redis_cache',\n    ]\n\n# Usage\n\n1. Create **RedisRoot** with params:\n    - **prefix** - (str) prefix for your redis root\n    - **connection_pool** - (redis.ConnectionPool) redis-py redis.ConnectionPool instance, with decode_responses=True\n    - **async_db_requests_limit** - (int) your database has max connections limit, please enter it here\n    - **ignore_deserialization_errors** - (bool) to ignore deserialization errors or raise exception\n    - **economy** - (bool) if True, all create/update requests will return only instance id \n2. Call **register_django_models({...})** on your RedisRoot instance and provide dict, where keys are django models and values are dicts (django_model:dict) with config params (str:value):\n    - **enabled** - (bool) - to cache or not\n    - **ttl** - (int) - to cache every x seconds\n    - **save_related_models** - (bool) - to save ForeignKey-s and ManyToMany-s instances or not\n    - **exclude_fields** - (list of strings) - fields to exclude from caching\n    - **filter_by** - (dict str:value) - filter objects to cache by something\n3. Call **check_cache()** on your RedisRoot instance\n\n# Example usage\n\n### Settings\n\nYou can set this part in your project settings.py:\n\n```python\nfrom django_models_redis_cache.core import *\n\n\ndef get_connection_pool():\n    host = 'localhost'\n    port = 6379\n    db = 0\n    connection_pool = redis.ConnectionPool(\n        decode_responses=True,\n        host=host,\n        port=port,\n        db=db,\n    )\n    return connection_pool\n\n\nREDIS_ROOTS = {\n    'test_caching_root': RedisRoot(\n        prefix='test_caching',\n        connection_pool=get_connection_pool(),\n        async_db_requests_limit=100,\n        ignore_deserialization_errors=True,\n        save_consistency=False,\n        economy=True\n    )\n}\n\n```\n\n### Run in the background\n\nYou can just copy it to:\n\n`app/management/commands/command_name.py`\n    \nAnd just run with:\n\n`python manage.py command_name`\n    \nHelp:\n\n[Django custom management commands](https://docs.djangoproject.com/en/3.2/howto/custom-management-commands/)\n    \n[How to import something from settings](https://stackoverflow.com/a/14617309)\n\n```python\n\nredis_roots = getattr(settings, \"REDIS_ROOTS\", None)\nif redis_roots:\n    if type(redis_roots) == dict:\n        test_caching_root = redis_roots['test_caching_root']\n        test_caching_root.register_django_models({\n            CustomUser: {\n                'enabled': True,\n                'ttl': 60 * 15,\n                'save_related_models': True,\n                'exclude_fields': [\n                    'is_admin',\n                    'api_key',\n                    'first_name',\n                    'last_name',\n                    'email',\n                    'is_staff',\n                    'date_joined',\n                    'password',\n                    'last_login',\n                    'user_permissions',\n                    'is_superuser',\n                    'groups',\n                ],\n            },\n            BotSoft: {\n                'enabled': True,\n                'ttl': 60 * 15,\n                'save_related_models': True,\n                'exclude_fields': [\n                    'name',\n                    'image',\n                    'image_webp',\n                    'developer_url'\n                ],\n            },\n            Service: {\n                'enabled': True,\n                'ttl': 60 * 15,\n                'save_related_models': True,\n                'exclude_fields': [\n                    'name_append',\n                    'description',\n                    'min',\n                    'max',\n                ],\n            },\n            CustomService: {\n                'enabled': True,\n                'ttl': 60 * 15,\n                'save_related_models': True,\n                'exclude_fields': [\n                    'name_append',\n                ],\n            },\n            UniqueTask: {\n                'enabled': True,\n                'ttl': 60 * 5,\n                'save_related_models': True,\n            },\n            Task: {\n                'enabled': True,\n                'ttl': 60 * 5,\n                'save_related_models': False,\n                'filter_by': {\n                    'status': 'in_work',\n                }\n            },\n            Account: {\n                'enabled': True,\n                'ttl': 60 * 5,\n                'save_related_models': True,\n                'filter_by': {\n                    'last_task_completed_in__gte': datetime.datetime.now() - datetime.timedelta(days=14),\n                    'last_checked_in__gte': datetime.datetime.now() - datetime.timedelta(days=14),\n                }\n            },\n            BotSession: {\n                'enabled': True,\n                'ttl': 60 * 5,\n                'save_related_models': True,\n            },\n            TaskChallenge: {\n                'enabled': True,\n                'ttl': 60 * 1,\n                'save_related_models': True,\n            },\n        })\n        roots_to_cache = [\n            test_caching_root,\n        ]\n        print('STARTING CACHING')\n        while True:\n            for redis_root in roots_to_cache:\n                redis_root.check_cache()\n    else:\n        raise Exception('redis_roots must be dict')\nelse:\n    raise Exception('No redis_roots')\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gh0st-work/django_models_redis_cache",
    "keywords": "python,redis,ORM,django,database",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-models-redis-cache",
    "package_url": "https://pypi.org/project/django-models-redis-cache/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-models-redis-cache/",
    "project_urls": {
      "Homepage": "https://github.com/gh0st-work/django_models_redis_cache",
      "Repository": "https://github.com/gh0st-work/django_models_redis_cache"
    },
    "release_url": "https://pypi.org/project/django-models-redis-cache/1.6.2/",
    "requires_dist": [
      "redis (>=3.5.3,<4.0.0)",
      "Django (>=3.0,<4.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Django Models Redis Cache (DMoReCa), library that gives your specified Django models regular caching via Redis",
    "version": "1.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11455507,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7f147cbcdb4a882d91d5adb2805d4a1978933594e324b6f647121a4ba0f4d5a",
        "md5": "829e2bbf656575a22c58edf273086fc9",
        "sha256": "030a2e6ac0b10642a89eee7fa54f3594474a6cbf46d4baf9d0c23728ac1403ce"
      },
      "downloads": -1,
      "filename": "django_models_redis_cache-1.6.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "829e2bbf656575a22c58edf273086fc9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 17474,
      "upload_time": "2021-09-09T23:13:27",
      "upload_time_iso_8601": "2021-09-09T23:13:27.125389Z",
      "url": "https://files.pythonhosted.org/packages/d7/f1/47cbcdb4a882d91d5adb2805d4a1978933594e324b6f647121a4ba0f4d5a/django_models_redis_cache-1.6.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9dfa6bb4cd416b8f229059423bcee8291a7a063000e406570142c0198e710bd",
        "md5": "aaee7b4683732bad7c0cbf87f9791685",
        "sha256": "f7e6c3f6f12812640d979162bbeca5b948a7ac6e10f50e536e60563957173863"
      },
      "downloads": -1,
      "filename": "django-models-redis-cache-1.6.2.tar.gz",
      "has_sig": false,
      "md5_digest": "aaee7b4683732bad7c0cbf87f9791685",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 16601,
      "upload_time": "2021-09-09T23:13:25",
      "upload_time_iso_8601": "2021-09-09T23:13:25.861458Z",
      "url": "https://files.pythonhosted.org/packages/d9/df/a6bb4cd416b8f229059423bcee8291a7a063000e406570142c0198e710bd/django-models-redis-cache-1.6.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}