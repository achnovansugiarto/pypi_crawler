{
  "info": {
    "author": "Anton Nechaev",
    "author_email": "antonnechaev990@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database :: Front-Ends",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Internet :: WWW/HTTP :: Site Management",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Object Brokering",
      "Topic :: Utilities"
    ],
    "description": "# django-models-redis-cache\n\n## **Django Models Redis Cache (DMoReCa), library that gives your specified Django models regular caching via Redis**\n\nFor one project, I needed to work with redis, but redis-py provides a minimum level of work with redis. I didn't find any Django-like ORM for redis, so I wrote library [python-redis-orm](https://github.com/gh0st-work/python_redis_orm/) ([PyPI](https://pypi.org/project/python-redis-orm/)).\n\nAlso, if you are searching for just django-like redis ORM, please check [django-redis-orm](https://github.com/gh0st-work/django_redis_orm/) ([PyPI](https://pypi.org/project/django-redis-orm/)).\n\n**And this library is port to Django that provides easy-to-use Django models caching via Redis**.\n\n### Working with this library, you are expected:\n\n- Fully works in 2021\n- Easy adaptation to your needs\n- Adequate informational messages and error messages\n- Built-in RedisRoot class that stores specified models, with:\n    - **redis_instance** setting - your redis connection (from redis-py)\n    - **prefix** setting - prefix of this RedisRoot to be stored in redis\n    - **ignore_deserialization_errors** setting - do not raise errors, while deserealizing data\n    - **save_consistency** setting - show structure-first data\n    - **economy** setting - to not return full data and save some requests (usually, speeds up your app on 80%)\n- CRUD (Create Read Update Delete), in our variation: save, get, filter, order, update, delete:\n    - `example_instance = ExampleModel(example_field='example_data').save()` - to create an instance and get its data dict\n    - `filtered_example_instances = redis_root.get(ExampleModel, example_field='example_data')` - to get all ExampleModel instances with example_field filter and get its data dict\n    - `ordered_instances = redis_root.order(filtered_example_instances, '-id')` - to get ordered filtered_example_instances by id ('-' for reverse)\n    - `updated_example_instances = redis_root.update(ExampleModel, ordered_instances, example_field='another_example_data')` - to update all ordered_instances example_field with value 'another_example_data' and get its data dict\n    - `redis_root.delete(ExampleModel, updated_example_instances)` - to delete updated_example_instances\n\n\n# Installation\n`pip install django-models-redis-cache`\n\n[Here is PyPI](https://pypi.org/project/django-models-redis-cache/)\n\nAdd \"django_models_redis_cache\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'django_models_redis_cache',\n    ]\n\n# Usage\n\n### You can set this part in your project settings.py\n\n```python\nfrom django_models_redis_cache.core import *\n\n\ndef get_connection_pool():\n    host = 'localhost'\n    port = 6379\n    db = 0\n    connection_pool = redis.ConnectionPool(\n        decode_responses=True,\n        host=host,\n        port=port,\n        db=db,\n    )\n    return connection_pool\n\n\nREDIS_ROOTS = {\n    'test_caching_root': RedisRoot(\n        prefix='test_caching',\n        connection_pool=get_connection_pool(),\n        ignore_deserialization_errors=True,\n        economy=True\n    )\n}\n\n```\n\n### Run in the background\n\nYou can just copy it to:\n\n`app/management/commands/command_name.py`\n    \nAnd just run with:\n\n`python manage.py command_name`\n    \nHelp:\n\n[Django custom management commands](https://docs.djangoproject.com/en/3.2/howto/custom-management-commands/)\n    \n[How to import something from settings](https://stackoverflow.com/a/14617309)\n\n```python\n\nif redis_roots:\n    if type(redis_roots) == dict:\n        some_caching_redis_root = redis_roots['test_caching_root']\n        some_caching_redis_root.register_django_models({\n            DjangoModelToCache1: {\n                'enabled': True,\n                'ttl': 60 * 5,  # Cache every 5 mins\n                'prefix': f'test_caching_root-DjangoModelToCache1-cache', # please make it unique\n            },\n            # DjangoModelToCache2: {\n            #     'enabled': True,\n            #     'ttl': 60 * 10,  # Cache every 10 mins\n            #     'prefix': f'test_caching_root-DjangoModelToCache2-cache', # please make it unique\n            # },\n            # ...\n        })\n        # another_caching_redis_root = redis_roots['another_test_caching_root']\n        # some_caching_redis_root.registered_django_models({...})\n        roots_to_cache = [\n            some_caching_redis_root,\n            # another_caching_redis_root\n        ]\n        print('STARTING CACHING')\n        while True:\n            for redis_root in roots_to_cache:\n                redis_root.check_cache()\n    else:\n        raise Exception('redis_roots must be dict')\nelse:\n    raise Exception('No redis_roots')\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gh0st-work/django_models_redis_cache",
    "keywords": "python,redis,ORM,django,database",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-models-redis-cache",
    "package_url": "https://pypi.org/project/django-models-redis-cache/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-models-redis-cache/",
    "project_urls": {
      "Homepage": "https://github.com/gh0st-work/django_models_redis_cache",
      "Repository": "https://github.com/gh0st-work/django_models_redis_cache"
    },
    "release_url": "https://pypi.org/project/django-models-redis-cache/1.2.2/",
    "requires_dist": [
      "redis (>=3.5.3,<4.0.0)",
      "Django (>=3.0,<4.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Django Models Redis Cache (DMoReCa), library that gives your specified Django models regular caching via Redis",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11455507,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51c6c68c17833ccf85587cab9083ba3ed93da00560642c9ef83fd5fb67fdb95b",
        "md5": "f71d9121fb27c4de65515a4f67fce40d",
        "sha256": "ca2b0ca925b0c58032b0a92ab91419716edbdb53d72132d54c55ddbbbe65d22c"
      },
      "downloads": -1,
      "filename": "django_models_redis_cache-1.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f71d9121fb27c4de65515a4f67fce40d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 15651,
      "upload_time": "2021-09-09T04:51:03",
      "upload_time_iso_8601": "2021-09-09T04:51:03.396146Z",
      "url": "https://files.pythonhosted.org/packages/51/c6/c68c17833ccf85587cab9083ba3ed93da00560642c9ef83fd5fb67fdb95b/django_models_redis_cache-1.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41c1f99d841510119098849c0fe43979f67f6105055e10087370d1b408eee0f1",
        "md5": "d5334e7816ce751a011b4d7f961c90f7",
        "sha256": "e661f052c2ec3505a6bb3d440e05808a4500de78e89706be71aa6943237875d6"
      },
      "downloads": -1,
      "filename": "django-models-redis-cache-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d5334e7816ce751a011b4d7f961c90f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 14607,
      "upload_time": "2021-09-09T04:51:01",
      "upload_time_iso_8601": "2021-09-09T04:51:01.822986Z",
      "url": "https://files.pythonhosted.org/packages/41/c1/f99d841510119098849c0fe43979f67f6105055e10087370d1b408eee0f1/django-models-redis-cache-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}