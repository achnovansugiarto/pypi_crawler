{
  "info": {
    "author": "Raffaele Salmaso",
    "author_email": "raffele@salmaso.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-service-urls\n\n`django-service-urls` is a setting helper for django to represent databases, caches and email settings via a single string.\n\nThis work is based on [dj-database-url](https://github.com/kennethreitz/dj-database-url) and [https://github.com/django/django/pull/8562](https://github.com/django/django/pull/8562).\n\n### Example\n\nOriginal config:\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'mydb',\n        'HOST': 'localhost',\n        'PORT': 5432,\n        'USER': 'myuser',\n        'PASSWORD': 'mypasswd',\n    },\n}\n\nCACHES = {\n    'default': {\n        'BACKEND' : 'django.core.cache.backends.memcached.MemcachedCache',\n        'LOCATION': '127.0.0.1:11211',\n    },\n}\n\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nHOST = 'localhost'\nPORT = 2525\nHOST_USER = ''\nHOST_PASSWORD = ''\nUSE_TLS = True\nUSE_SSL = False\nSSL_CERTFILE = '/etc/ssl/cert'\nSSL_KEYFILE = '/etc/ssl/key'\nTIMEOUT = 600\nUSE_LOCALTIME = False\n```\n\nReplace with:\n\n```python\nDATABASES = {\n    'default': os.environ.get('DATABASE_DEFAULT', 'postgres://myuser:mypasswd@localhost:5432/mydb'),\n}\n\nCACHES = {\n    'default': os.environ.get('CACHE_DEFAULT', ''memcached://127.0.0.1:11211'),\n}\n\nEMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'smtps://localhost:2525?ssl_certfile=/etc/ssl/cert&ssl_keyfile=/etc/ssl/key&timeout=600')\n```\n\n## Backends\n\nCurrently `django-service-urls` supports three different services:\n\n### DATABASES (``service_urls.db``)\n\nService  | Backend | URLString\n---------|---------|-----------\nPostgresql | django.db.backends.postgresql | postgres://user:passws@host:port/db\nPostgresql Socket | django.db.backends.postgresql | postgres://%2Fvar%2Frun%2Fpostgresql/db\nPostgresql alias | django.db.backends.postgresql | postgresql://user:passwd@host:port/db\nPostgresql alias | django.db.backends.postgresql | pgsql://user:passwd@host:port/db\nPostgis | django.contrib.gis.db.backends.postgis | postgis://user:passwd@host:port/db\nSqlite (memory) | django.db.backends.sqlite3 | sqlite://:memory: or sqlite://\nSqlite (file) | django.db.backends.sqlite3 | sqlite:///var/db/database.db\nSpatialite (memory) | django.contrib.gis.db.backends.spatialite | spatialite://:memory: or spatialite://\nSpatialite (file) | django.contrib.gis.db.backends.spatialite | spatialite:///var/db/database.db\nMysql | django.db.backends.mysql | mysql://user:passwd@host:port/db\nMysql + GIS | django.contrib.gis.db.backends.mysql | mysql+gis://user:passwd@host:port/db\nOracle | django.db.backends.oracle | oracle://user:passwd@host:port/db\nOracle + GIS | django.contrib.gis.db.backends.oracle | oracle+gis://user:passwd@host:port/db\n\n### CACHES (``service_urls.cache``)\n\nService | Backend | URLString\n--------|---------|-----------\nMemory | django.core.cache.backends.locmem.LocMemCache | memory://\nMemory | django.core.cache.backends.locmem.LocMemCache | memory://abc\nDatabase | django.core.cache.backends.db.DatabaseCache | db://table-name\nDummy | django.core.cache.backends.dummy.DummyCache | dummy://\nDummy | django.core.cache.backends.dummy.DummyCache | dummy://abc\nMemcached: single ip | django.core.cache.backends.memcached.MemcachedCache | memcached://1.2.3.4:1567\nMemcached+PyLibMCCache: single ip | django.core.cache.backends.memcached.PyLibMCCache | memcached+pylibmccache://1.2.3.4:1567\nMemcached multiple ips | django.core.cache.backends.memcached.MemcachedCache | memcached://1.2.3.4:1567,1.2.3.5:1568\nMemcached+PyLibMCCache multiple ips | django.core.cache.backends.memcached.PyLibMCCache | memcached+pylibmccache://1.2.3.4:1567,1.2.3.5:1568\nMemcached no port | django.core.cache.backends.memcached.MemcachedCache | memcached://1.2.3.4\nMemcached+PyLibMCCache no port | django.core.cache.backends.memcached.PyLibMCCache | memcached+pylibmccache://1.2.3.4\nMemcached unix socket | django.core.cache.backends.memcached.MemcachedCache | memcached:///tmp/memcached.sock\nMemcached+PyLibMCCache unix socket | django.core.cache.backends.memcached.PyLibMCCache | memcached+pylibmccache:///tmp/memcached.sock\nFile | django.core.cache.backends.filebased.FileBasedCache | file://C:/abc/def/xyz\nFile | django.core.cache.backends.filebased.FileBasedCache | file:///abc/def/xyz\n\n### EMAIL (``service_urls.email``)\n\nService | Backend | URLString\n--------|---------|-----------\nConsole | django.core.mail.backends.console.EmailBackend | console://\nSMTP | django.core.mail.backends.smtp.EmailBackend | smtp://localhost:25\nSMTPS | django.core.mail.backends.smtp.EmailBackend | smtps://localhost:465\nSMTP+TLS | django.core.mail.backends.smtp.EmailBackend | smtp+tls://localhost:465\nSMTP+SSL | django.core.mail.backends.smtp.EmailBackend | smtp+ssl://localhost:587\nFile | django.core.mail.backends.filebased.EmailBackend | file:///var/log/emails\nMemory | django.core.mail.backends.locmem.EmailBackend | memory://\nDummy | django.core.mail.backends.dummy.EmailBackend | dummy://\n\n## Installation\n\nInstall package\n\n```shell\n$ python3 -m pip install django-service-urls\n```\n\nand at the end of your main settings file add something like as\n\n```python\nimport service_urls\n\ntry:\n    DATABASES\nexcept:\n    pass\nelse:\n    DATABASES = service_urls.db.parse(DATABASES)\n\ntry:\n    CACHES\nexcept:\n    pass\nelse:\n    CACHES = service_urls.cache.parse(CACHES)\n\ntry:\n    EMAIL_BACKEND\nexcept:\n    pass\nelse:\n    if service_urls.email.validate(EMAIL_BACKEND):\n        for k, v in service_urls.email.parse(EMAIL_BACKEND).items():\n            setting = 'EMAIL_' + ('BACKEND' if k == 'ENGINE' else k)\n            globals()[setting] = v\n```\n\n## Extend `django-service-urls`\n\n### Add another handler\n\nYou can add another handler to an already existing handler:\n\n`my_postgres_backend/service_url.py`\n```python\nfrom service_urls.services import db, postgresql_config_from_url\n\n# postgresql fork)\npostgresql_config_from_url = db.register(('mypgbackend', 'my_postgres_backend'))(postgresql_config_from_url)\n```\n\n`yourapp/settings.py`\n```python\nimport my_postgres_backend.service_url\n\n\nDATABASES = {'default': 'mypgbackend://user:pwd@:/mydb'}\n```\n\n### Add another service\n\n```python\nfrom service_urls import Service\n\n\nclass SearchService(Service):\n    def config_from_url(self, engine, scheme, url):\n        parsed = self.parse_url(url)\n        return {\n            'ENGINE': engine,\n            # here all options from parsed\n        }\n\n\nsearch = SearchService()\n\n\n@search.register(('myengine', 'my_search_engine'))\ndef search_config_from_url(backend, engine, scheme, url):\n    return backend.config_from_url(engine, scheme, url)\n```\n\n## Changes\n\n### 1.0.1\n\n* fix README typos\n\n### 1.0.0\n\n* Add `service_urls.db` service and default parsers\n* Add `service_urls.cache` service and default parsers\n* Add `service_urls.email` service and default parsers\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://bitbucket.org/rsalmaso/django-service-urls/get/1.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/rsalmaso/django-service-urls/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-service-urls",
    "package_url": "https://pypi.org/project/django-service-urls/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-service-urls/",
    "project_urls": {
      "Download": "https://bitbucket.org/rsalmaso/django-service-urls/get/1.0.1.tar.gz",
      "Homepage": "https://bitbucket.org/rsalmaso/django-service-urls/"
    },
    "release_url": "https://pypi.org/project/django-service-urls/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "setting helper for django to represent databases, caches and email settings via a single string",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17483520,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fa94a1d483bf2076af62cf1476d3eccc12163961cac6e8c39ab2e217fe306df",
        "md5": "b5b3d4d4032fb3e2bb54388a085afbde",
        "sha256": "6519cd8b4fc5e45c9c289bff2a492f73227cb2e5ca317ddb5fe72098d3416341"
      },
      "downloads": -1,
      "filename": "django_service_urls-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b5b3d4d4032fb3e2bb54388a085afbde",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 4255,
      "upload_time": "2018-12-23T20:58:21",
      "upload_time_iso_8601": "2018-12-23T20:58:21.064071Z",
      "url": "https://files.pythonhosted.org/packages/6f/a9/4a1d483bf2076af62cf1476d3eccc12163961cac6e8c39ab2e217fe306df/django_service_urls-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}