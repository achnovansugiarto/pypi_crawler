{
  "info": {
    "author": "Moaz Mohammed El-Essawey",
    "author_email": "mohammedmiaz3141@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Optimization Methods\nMethods Discussed\n - Golden Section Search Method\n - BiSection Method\n - Newton Method\n - Secant Method\n\n## Golden Section Search Methods\n```python\n>>> from mloptm.methods import Golden\n>>> def f(x):\n...     return x**4 - 14*x**3 + 60*x**2 - 70*x\n\n>>> op = Golden(f)\n>>> minima = op.Minimize(a0=0, b0=2, eps=0.03)\n>>> op.PrintOptimizationSteps()\n\nUsing Golden Optimization Medhod\nFound Local Minima at x -> [0.777088]\nOptimization Steps with [9] Steps\n---------------------------------\n\t  a0        b0        a1        b1    Minima\n--------  --------  --------  --------  --------\n0         1.23607   0.763932  1.23607   0.618034\n0.472136  1.23607   0.472136  0.763932  0.854102\n0.472136  0.944272  0.763932  0.944272  0.708204\n0.652476  0.944272  0.652476  0.763932  0.798374\n0.652476  0.832816  0.763932  0.832816  0.742646\n0.72136   0.832816  0.72136   0.763932  0.777088\n0.763932  0.832816  0.763932  0.790243  0.798374\n0.763932  0.806504  0.790243  0.806504  0.785218\n0.763932  0.790243  0.780193  0.790243  0.777088\n\n>>> op.PlotOptimizationSteps(xmin=0, xmax=2)\n>>> op.ExportOptimizationSteps(xmin=0, xmax=2, filname=\"OptimizedFunction\")\n```\n\n## BiSection Method\n```python\n>>> from mloptm.methods import BiSection\n>>> def f(x):\n...     return x**4 - 14*x**3 + 60*x**2 - 70*x\n\n>>> def df(x):                                                                      \n...     return 4*x**3 - 14*3*x**2 + 120*x - 70\n\n>>> op = BiSection(f, df)\n>>> minima = op.Minimize(a0=0, b0=2, epochs=10)\n>>> op.PrintOptimizationSteps()\n\nUsing BiSection Optimization Medhod\nFound Local Minima at x -> [0.779297]\n---------------------------------\n\t  a0       b0    (a0+b0)/2    f'((a0+b0)/2)\n--------  -------  -----------  ---------------\n0         1           1              12\n0.5       1           0.5           -20\n0.75      1           0.75           -1.9375\n0.75      0.875       0.875           5.52344\n0.75      0.8125      0.8125          1.91895\n0.75      0.78125     0.78125         0.022583\n0.765625  0.78125     0.765625       -0.949448\n0.773438  0.78125     0.773438       -0.461435\n0.777344  0.78125     0.777344       -0.218928\n0.779297  0.78125     0.779297       -0.0980478\n\n>>> op.PlotOptimizationSteps(xmin=0, xmax=2)\n>>> op.ExportOptimizationSteps(xmin=0, xmax=2, filname=\"OptimizedFunction\")\n```\n\n## Newton Method\n```python\n>>> from mloptm.methods import Newton\n>>> def f(x):\n...     return x**4 - 14*x**3 + 60*x**2 - 70*x\n\n>>> def df(x):\n...     return 4*x**3 - 14*3*x**2 + 120*x - 70\n\n>>> def ddf(x):\n...     return 12*x**2 - 14*6*x + 120\n\n>>> op = Newton(f, df, ddf)\n>>> minima = op.Minimize(x0=0, eps=10**-5)\n>>> op.PrintOptimizationSteps()\n\nUsing Newton Optimization Method\nFound Local Minima at x -> [0.780884]\n---------------------------------\n\t  xk      xk+1       f'(xk+1)    f''(xk+1)\n--------  --------  -------------  -----------\n0         0.583333  -13.4977           75.0833\n0.583333  0.763103   -1.10786          62.8873\n0.763103  0.780719   -0.0101707        61.7339\n0.780719  0.780884   -8.85683e-07      61.7231\n0.780884  0.780884    0                61.7231\n\n>>> op.PlotOptimizationSteps(xmin=0, xmax=2)\n>>> op.ExportOptimizationSteps(xmin=0, xmax=2, filname=\"OptimizedFunction\")\n```\n\n## Secant Method\n```python\n>>> from mloptm.methods import Secant\n>>> def f(x):\n...     return x**4 - 14*x**3 + 60*x**2 - 70*x\n\n>>> def df(x):                                                                      \n...     return 4*x**3 - 14*3*x**2 + 120*x - 70\n\n>>> op = Secant(f, df)\n>>> minima = op.Minimize(a0=0, b0=2, epochs=10)\n>>> op.PrintOptimizationSteps()\n\nUsing Newton Optimization Method\nFound Local Minima at x -> [0.780884]\n---------------------------------\n\t  xk      xk+1    f(xk+1)       f'(xk+1)\n--------  --------  ---------  -------------\n0         0.604282   -23.3462  -11.9401\n0.1       0.733837   -24.3002   -2.97653\n0.604282  0.776858   -24.3691   -0.249017\n0.733837  0.780786   -24.3696   -0.00605475\n0.776858  0.780884   -24.3696   -1.28637e-05\n0.780786  0.780884   -24.3696   -6.67001e-10\n\n>>> op.PlotOptimizationSteps(xmin=0, xmax=2)\n>>> p.ExportOptimizationSteps(xmin=0, xmax=2, filname=\"OptimizedFunction\")\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/moaz-elesawey/mloptm",
    "keywords": "python,python3,ml,optm,mloptm",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mloptm",
    "package_url": "https://pypi.org/project/mloptm/",
    "platform": null,
    "project_url": "https://pypi.org/project/mloptm/",
    "project_urls": {
      "Homepage": "https://github.com/moaz-elesawey/mloptm",
      "Source": "https://github.com/moaz-elesawey/mloptm"
    },
    "release_url": "https://pypi.org/project/mloptm/1.0.5/",
    "requires_dist": [
      "numpy",
      "sympy",
      "matplotlib",
      "tabulate",
      "Pillow"
    ],
    "requires_python": ">=3.7, <4",
    "summary": "Implementation of ML Optimization Methods in Python",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15252308,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78d2bf09f6923a9cf9dd4f9195504257f8b103ce2e72dd3202b9019b45d86a7f",
        "md5": "f59d68cd964e20505e36f86b2c57fd75",
        "sha256": "44c96d7a320bf1b59e54ba82e3e12863a7a98d96a5484ec5e4bbadd40433855f"
      },
      "downloads": -1,
      "filename": "mloptm-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f59d68cd964e20505e36f86b2c57fd75",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7, <4",
      "size": 11207,
      "upload_time": "2022-09-21T18:16:19",
      "upload_time_iso_8601": "2022-09-21T18:16:19.915238Z",
      "url": "https://files.pythonhosted.org/packages/78/d2/bf09f6923a9cf9dd4f9195504257f8b103ce2e72dd3202b9019b45d86a7f/mloptm-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6317efb2267db9ff13c1c850a764b27deb917da7dd162b16125e096a140a7c5e",
        "md5": "64d66cba1458fce6c84ae67e5f8d1604",
        "sha256": "6160345abbdc83452e03f04e48a636b8c5a7f6ad0cb6039646c328a926f09cdc"
      },
      "downloads": -1,
      "filename": "mloptm-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "64d66cba1458fce6c84ae67e5f8d1604",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 10883,
      "upload_time": "2022-09-21T18:16:22",
      "upload_time_iso_8601": "2022-09-21T18:16:22.155460Z",
      "url": "https://files.pythonhosted.org/packages/63/17/efb2267db9ff13c1c850a764b27deb917da7dd162b16125e096a140a7c5e/mloptm-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}