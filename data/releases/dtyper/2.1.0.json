{
  "info": {
    "author": "Tom Ritchford",
    "author_email": "tom@swirly.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# 🗝 `dtyper`: Make `typer` commands callable, or into dataclasses 🗝️\n\n### What is `dtyper`, in one sentence?\n\nUsing `import dtyper as typer` instead of `import typer` would make your\n`typer.command`s directly callable.\n\n(There's also a neat way to make dataclasses from typer commands, but that\nwould be two sentences.)\n\n### Why `dtyper`?\n\n[`typer`](https://typer.tiangolo.com/) is a famously clear and useful system\nfor writing Python CLIs but it has two issues that people seem to run into a lot:\n\n1. You can't call the `typer.command` functions it creates directly because they\nhave the wrong defaults.\n\n2. As you add more arguments to your CLI, there is no easy way to break up the\ncode sitting in one file without passing around long, verbose parameter lists.\n\n`dtyper` is a tiny, single-file library that adds to an existing installation of\n`typer` to solve these two problems without changing existing code at all.\n\n* `dtyper.command` executes `typer.command` then fixes the defaults.\n\n* `dtyper.function` decorates an existing `typer.command` to have correct\n  defaults.\n\n* `dtyper.dataclass` automatically makes a `dataclass` from\n   a `typer.command`.\n\n### How to use `dtyper`?\n\nInstall as usual with `poetry add dtyper`, `pip install dtyper`, or your\nfavorite package manager.\n\n`dtyper` is a drop-in replacement for `typer` - it copies all `typer`s\nproperties - so you can even write\n\n    import dtyper as typer\n\nto experiment with it before deciding.\n\n`dtyper` has two new functions that `typer` doesn't, and overrides a `typer`\nclass:\n\n* `@dtyper.function` is a decorator that takes a `typer` command and returns\n  a callable function with the correct defaults.  It is unncessary if you use\n  `dtyper.Typer` (below)\n\n* `@dtyper.dataclass` is a decorator that takes an existing `typer` or `dtyper`\ncommand and makes a `dataclass` from it.\n\n* `dtyper.Typer`is a class identical to `typer.Typer`, except it fixes\n  `Typer.command` functions so you can call them directly.\n\nNone of the `typer` functionality is changed to the slightest degree - adding\n`dtyper` will not affect how your command line program runs at all.\n\n## Example 1: using `dtyper` instead of `typer`\n\n    from dtyper import Argument, Option, Typer\n\n    app = Typer()\n\n    @app.command(help='test')\n    def get_keys(\n        bucket: str = Argument(\n            'buck', help='The bucket to use'\n        ),\n\n        keys: bool = Option(\n            False, help='The keys to download'\n        ),\n    ):\n        print(bucket, keys)\n\nYou can call `get_keys()` from other code and get the right defaults.\n\nWithout regular `typer`, you sometimes get a `typer.Argument` or\n`typer.Option` in place of an expected `str` or `bool`.\n\n### Example 2: a simple `dtyper.dataclass`\n\nHere's a simple CLI in one Python file with two `Argument`s and an `Option`:\n\n    @command(help='test')\n    def get_keys(\n        bucket: str = Argument(\n            ..., help='The bucket to use'\n        ),\n\n        keys: str = Argument(\n            'keys', help='The keys to download'\n        ),\n\n        pid: Optional[int] = Option(\n            None, '--pid', '-p', help='process id, or None for this process'\n        ),\n    ):\n        get_keys = GetKeys(**locals())\n        print(get_keys.run())\n\n\n    @dtyper.dataclass(get_keys)\n    class GetKeys:\n        site = 'https://www.some-websijt.nl'\n\n        def run(self):\n            return self.url, self.keys, self.pid\n\n        def __post_init__(self):\n            self.pid = self.pid or os.getpid()\n\n        def url(self):\n           return f'{self.site}/{self.url}/{self.pid}'\n\n\n### Example: splitting a large `typer.command` into multiple files\n\nReal world CLIs frequently have dozens if not hundreds of commands, with\nhundreds if not thousands of options, arguments, settings or command line flags.\n\nThe natural structure for this is the \"big ball of mud\", a popular\nanti-pattern known to cause misery and suffering to maintainers.\n\n`dtyper.dataclass` can split the user-facing definition of the API from its\nimplementation and then split that implementation over multiple files in a\nnatural and convenient way.\n\nThe example has three Python files.\n\n`interface.py` contains the Typer CLI definitions for this command.\n\n    @command(help='test')\n    def big_calc(\n        bucket: str = Argument(\n            ..., help='The bucket to use'\n        ),\n        more: str = Argument(\n            '', help='More information'\n        ),\n        enable_something: boolean = Option(\n            False, help='Turn on one of many important parameters'\n        ),\n        # [dozens of parameters here]\n    ):\n        d = dict(locals())  # Capture all the command line arguments as a dict\n\n        from .big_calc import BigCalc  # Lazy import to avoid a cycle\n\n        bc = BigCalc(**d)\n        bc.run()\n\n\n`big_calc.py` contains the `dtyper.dataclass` implementation\n\n    from .interface import big_calc\n    from . import helper\n    import dtyper\n\n\n    @dtyper.dataclass(big_calc)\n    class BigCalc:\n        def run(self):\n           # Each argument in `big_calc` becomes a dataclass field\n           print(self.bucket, self.more)\n           print(self)  # dataclass gives you a nice output of all fields\n\n           if helper.huge_thing(self) and self._etc():\n              self.stuff()\n              helper.more_stuff(self)\n              ...\n\n        def _etc(self):\n           ...\n           # Dozens more methods here perhaps!\n\nSome of the code is offloaded to helper files like `helper.py`:\n\n    def huge_thing(big_calc):\n        if has_hole(big_calc.bucket):\n           fix_it(big_calc.bucket, big_calc.more)\n\n    def more_stuff(big_calc):\n        # even more code\n\n\n### [API Documentation](https://rec.github.io/dtyper#dtyper--api-documentation)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rec/dtyper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtyper",
    "package_url": "https://pypi.org/project/dtyper/",
    "platform": null,
    "project_url": "https://pypi.org/project/dtyper/",
    "project_urls": {
      "Homepage": "https://github.com/rec/dtyper",
      "Repository": "https://github.com/rec/dtyper"
    },
    "release_url": "https://pypi.org/project/dtyper/2.1.0/",
    "requires_dist": [
      "typer"
    ],
    "requires_python": ">=3.7",
    "summary": "🗝 Make `typer` commands callable, or dataclasses 🗝",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17029602,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54ffd7f82fbb136b0198398977b867a8fdd3f14955ce6ea0e06023eb5108a463",
        "md5": "f27568df576e4ef511f88ebca52d40dd",
        "sha256": "331f513b33ccd43c1a803a2a06cdb879ed3925381aed9c04bd65470d58107ac6"
      },
      "downloads": -1,
      "filename": "dtyper-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f27568df576e4ef511f88ebca52d40dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7650,
      "upload_time": "2023-02-25T15:01:30",
      "upload_time_iso_8601": "2023-02-25T15:01:30.966628Z",
      "url": "https://files.pythonhosted.org/packages/54/ff/d7f82fbb136b0198398977b867a8fdd3f14955ce6ea0e06023eb5108a463/dtyper-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77014e9c119bc0595eb2aa5c82b9d6a3106fb9f0fd710c08138613b3cb38dc44",
        "md5": "75bc72bb1c948fdee4ffb807390c5da9",
        "sha256": "c18a7198c4d9f9194f862307dc326f2594acaffb8e2a6f81335ebc8bf6ed9e40"
      },
      "downloads": -1,
      "filename": "dtyper-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "75bc72bb1c948fdee4ffb807390c5da9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6207,
      "upload_time": "2023-02-25T15:01:32",
      "upload_time_iso_8601": "2023-02-25T15:01:32.657050Z",
      "url": "https://files.pythonhosted.org/packages/77/01/4e9c119bc0595eb2aa5c82b9d6a3106fb9f0fd710c08138613b3cb38dc44/dtyper-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}