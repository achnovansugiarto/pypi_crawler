{
  "info": {
    "author": "Tom Ritchford",
    "author_email": "tom@swirly.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ⌨️dtyper: Call `typer` commands, or make a `dataclass` from them  ⌨️\n\n`typer` is a famously easy and useful system for writing Python CLIs but it has\ntwo issues.\n\nYou cannot quite call the `typer.command` functions it creates directly.\n\nAnd as you add more and more functionality into your CLI, there is no obvious\nway to break up the code sitting in one file.\n\n`dtyper` solves these two defects, calling `typer.command` functions\nwith the right defaults, and constructing a `dataclass` from a `typer.command`.\n\n-----------------------------------------------\n\n`dtyper` is a drop-in replacement for `typer`, so you can even write\n\n    import dtyper as typer\n\nif you like!\n\n It overrides one member from `typer`, and adds two new ones:\n\n* `dtyper.Typer`is a class identical to `typer.Typer`, except it fixes\n  `Typer.command` functions so you can call them directly (with the right\n  defaults).\n\n* `@dtyper.dataclass` is a decorator that takes an existing `typer` command\n  and makes a `dataclass` from it.\n\n* `@dtyper.function` is a decorator that takes a new `typer` command and returns\n  a callable function with the correct defaults.  It is unncessary if you use\n  `dtyper.Typer`.\n\n## Installation\n\n    pip install dtyper\n\n## Examples\n\n### Example: a simple `dtyper.dataclass`\n\nHere's a simple CLI in one Python file with two arguments `bucket`, `keys` and\none option `pid`:\n\n    @command(help='test')\n    def get_keys(\n        bucket: str = Argument(\n            ..., help='The bucket to use'\n        ),\n\n        keys: str = Argument(\n            'keys', help='The keys to download'\n        ),\n\n        pid: Optional[int] = Option(\n            None, '--pid', '-p', help='process id, or None for this process'\n        ),\n    ):\n        get_keys = GetKeys(**locals())\n        print(get_keys())\n\n    @dtyper.dataclass(get_keys)\n    class GetKeys:\n        site = 'https://www.some-websijt.nl'\n\n        def __call__(self):\n            return self.url, self.keys, self.pid\n\n        def __post_init(self):\n            self.pid = self.pid or os.getpid()\n\n        def url(self):\n           return f'{self.site}/{self.url}/{self.pid}'\n\n\n### Example: putting the `dtyper.dataclass` into a separate file\n\nIn real world CLIs, there are frequently dozen of commands, each with dozens\nof options or arguments.\n\nTo avoid the \"big bowl of mud\" anti-pattern, you often want to split off the\nuser-dash facing definition of the API from its implementation, and in large\nprograms, you might well want to split the implementation itself into multiple\nfiles.\n\nThis example has three Python files.\n\n`interface.py` contains the CLI API for this command.\n\nThe `big_calc` module is lazy loaded in interface.py - only loaded when this\ncommand is actually called.\n\nLazy loading is extremely useful in large projects, because it means you don't\nload the entire universe that any command _might_ want just to execute one tiny\ncommand that has no dependencies, and it is necessary in this case to avoid\ncircular dependencies.\n\n    # In interface.py\n\n    @command(help='test')\n    def big_calc(\n        bucket: str = Argument(\n            ..., help='The bucket to use'\n        ),\n        # dozens of parameters here\n    ):\n        d = dict(locals())\n\n        from .big_calc import BigCalc\n\n        return BigCalc(**d)()\n\n\nHere's the actual dataclass, which knows about everything.\n\n\n    # In big_calc.py\n\n    from .interface import big_calc\n    from . import helper\n    from dtyper import dataclass\n\n    @dataclass(big_calc)\n    class BigCalc:\n        def __call__(self):\n           if helper.huge_thing(self) and self.etc():\n              self.stuff()\n              helper.more_stuff(self)\n\n           # Dozens of methods here\n\n\n\n    # In helper.py\n\n    def huge_thing(big_calc):\n        # Lots of code\n\n    def more_stuff(big_calc):\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rec/dtyper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtyper",
    "package_url": "https://pypi.org/project/dtyper/",
    "platform": null,
    "project_url": "https://pypi.org/project/dtyper/",
    "project_urls": {
      "Homepage": "https://github.com/rec/dtyper",
      "Repository": "https://github.com/rec/dtyper"
    },
    "release_url": "https://pypi.org/project/dtyper/1.2.2/",
    "requires_dist": [
      "typer"
    ],
    "requires_python": ">=3.7",
    "summary": "⌨️dtyper: Call typer commands or make dataclasses from them ⌨",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17029602,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3246533cc509e375b022086847c025f683ffae99c5fbb69f5573b2181b35f364",
        "md5": "8ac5f52ff268f42966d8eec507d9ee2b",
        "sha256": "5ad3118aec0e8479ea48c5b7bd3452241f32d0bae2038dc0094b7131d361ead2"
      },
      "downloads": -1,
      "filename": "dtyper-1.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ac5f52ff268f42966d8eec507d9ee2b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 4841,
      "upload_time": "2022-10-23T12:06:19",
      "upload_time_iso_8601": "2022-10-23T12:06:19.109320Z",
      "url": "https://files.pythonhosted.org/packages/32/46/533cc509e375b022086847c025f683ffae99c5fbb69f5573b2181b35f364/dtyper-1.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ee82162999e35ca5f3e92ba9f33c873e5c4e04d9f191bfa061d6cf8f6ac9b60",
        "md5": "1331faa98410b0409f0aaba468cb281b",
        "sha256": "a63b74958681f1591a9c52977d8a0dde40c6ecb0defb3e7f5f49cddedfaf4371"
      },
      "downloads": -1,
      "filename": "dtyper-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1331faa98410b0409f0aaba468cb281b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5216,
      "upload_time": "2022-10-23T12:06:20",
      "upload_time_iso_8601": "2022-10-23T12:06:20.302097Z",
      "url": "https://files.pythonhosted.org/packages/6e/e8/2162999e35ca5f3e92ba9f33c873e5c4e04d9f191bfa061d6cf8f6ac9b60/dtyper-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}