{
  "info": {
    "author": "vandersonmota",
    "author_email": "vandersonmota@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Topic :: Software Development"
    ],
    "description": "============================================\nModel Mommy: Smart fixtures for better tests\n============================================\n\n*Model-mommy* offers you a smart way to create fixtures for testing in Django.\nWith a simple and powerful API you can create many objects with a single line of code.\n\n.. image:: https://travis-ci.org/vandersonmota/model_mommy.png?branch=master\n        :target: https://travis-ci.org/vandersonmota/model_mommy\n\nInstall\n=======\n\n.. code-block:: console\n\n    pip install model_mommy\n\n\nBasic usage\n===========\n\nLet's say you have an app **family** with a model like this:\n\n.. code-block:: python\n\n    class Kid(models.Model):\n        happy = models.BooleanField()\n        name = models.CharField(max_length=30)\n        age = models.IntegerField()\n        bio = models.TextField()\n        wanted_games_qtd = models.BigIntegerField()\n        birthday = models.DateField()\n        appointment = models.DateTimeField()\n\nTo create a persisted instance, just call *Mommy*:\n\n.. code-block:: python\n\n    from model_mommy import mommy\n    from family.models import Kid\n\n    kid = mommy.make(Kid)\n\nNo need to pass attributes every damn time.\n\nImporting every model over and over again is boring. So let *Mommy* import them for you:\n\n.. code-block:: python\n\n    from model_mommy import mommy\n\n    # 1st form: app_label.model_name\n    kid = mommy.make('family.Kid')\n\n    # 2nd form: model_name\n    dog = mommy.make('Dog')\n\n\n.. [1] You can only use the 2nd form on unique model names. If you have an app\n       *family* with a *Dog*, and an app *farm* with a *Dog*, you must use the\n       `app_label.model_name` form.\n\n.. [2] `model_name` is case insensitive.\n\n\nModel Relationships\n-------------------\n\n*Mommy* also handles relationships. Say the kid has a dog:\n\n.. code-block:: python\n\n    class Dog(models.Model):\n        owner = models.ForeignKey('Kid')\n\nwhen you ask *Mommy*:\n\n.. code-block:: python\n\n    from model_mommy import mommy\n\n    rex = mommy.make('family.Dog')\n\nShe will also create the `Kid`, automagically.\n\n\nDefining some attributes\n------------------------\n\nOf course it's possible to explicitly set values for attributes.\n\n.. code-block:: python\n\n    from model_mommy import mommy\n\n    another_kid = mommy.make('family.Kid', age=3)\n\nRelated objects attributes are also reachable:\n\n.. code-block:: python\n\n    from model_mommy import mommy\n\n    bobs_dog = mommy.make('family.Dog', owner__name='Bob')\n\n\nNon persistent objects\n----------------------\n\nIf don't need a persisted object, *Mommy* can handle this for you as well:\n\n.. code-block:: python\n\n    from model_mommy import mommy\n\n    kid = mommy.prepare('family.Kid')\n\nIt works like `make`, but it doesn't persist the instance.\n\nMore than one instance\n----------------------\n\nIf you need to create more than one instance of the model, you can use the `_quantity` parameter for it:\n\n.. code-block:: python\n\n    from model_mommy import mommy\n\n    kids = mommy.make('family.Kid', _quantity=3)\n    assert len(kids) == 3\n\nIt also works with `prepare`:\n\n.. code-block:: python\n\n    from model_mommy import mommy\n\n    kids = mommy.prepare('family.Kid', _quantity=3)\n    assert len(kids) == 3\n\nHow mommy behaves?\n==================\n\nBy default, *model-mommy* skips fields with `null=True` or `blank=True`. Also if a field has a *default* value, it will be used.\n\nYou can override this behavior by explicitly defining values.\n\n\nWhen shouldn't you let mommy generate things for you?\n-----------------------------------------------------\n\nIf you have fields with special validation, you should set their values by yourself.\n\n*Model-mommy* should handle fields that:\n\n1. don't matter for the test you're writing;\n2. don't require special validation (like unique, etc);\n3. are required to create the object.\n\n\nCurrently supported fields\n--------------------------\n\n* BooleanField, IntegerField, BigIntegerField, SmallIntegerField, PositiveIntegerField, PositiveSmallIntegerField, FloatField, DecimalField\n* CharField, TextField, SlugField, URLField, EmailField\n* ForeignKey, OneToOneField, ManyToManyField (even with through model)\n* DateField, DateTimeField, TimeField\n* FileField, ImageField\n\nCustom fields\n-------------\n\nModel-mommy allows you to define generators methods for your custom fields or overrides its default generators. This could be achieved by specifing a dict on settings that its keys are the field paths and the values their generators functions, as the example bellow:\n\n.. code-block:: python\n\n    # on your settings.py file:\n    def gen_func():\n        return 'value'\n\n    MOMMY_CUSTOM_FIELDS_GEN = {\n        'test.generic.fields.CustomField': gen_func,\n    }\n\nRecipes\n=======\n\nIf you're not confortable with random data or even you just want to improve the semantics of the generated data, there's hope for you.\n\nYou can define a **recipe**, which is a set of rules to generate data for your models. Create a module called `mommy_recipes.py` at your app's root directory:\n\n.. code-block:: python\n\n    from model_mommy.recipe import Recipe\n    from family.models import Person\n\n    person = Recipe(Person,\n        name = 'John Doe',\n        nickname = 'joe',\n        age = 18,\n        birthday = date.today(),\n        appointment = datetime.now()\n    )\n\nNote you don't have to declare all the fields if you don't want to. Omitted fields will be generated automatically.\n\nThe variable `person` serves as the recipe name:\n\n.. code-block:: python\n\n    from model_mommy import mommy\n\n    mommy.make_recipe('family.person')\n\nOr if you don't want a persisted instance:\n\n.. code-block:: python\n\n    from model_mommy import mommy\n\n    mommy.prepare_recipe('family.person')\n\nYou can use the `_quantity` parameter as well if you want to create more than one object from a single recipe.\n\n\nYou can define recipes locally to your module or test case as well. This can be useful for cases where a particular set of values may be unique to a particular test case, but used repeatedly there.\n\n.. code-block:: python\n\n    company_recipe = Recipe(Company, name='WidgetCo')\n\n    class EmployeeTest(TestCase):\n        def setUp(self):\n            self.employee_recipe = Recipe(\n                Employee, name=seq('Employee '),\n                company=company_recipe.make())\n\n        def test_employee_list(self):\n            self.employee_recipe.make(_quantity=3)\n            # test stuff....\n\n        def test_employee_tasks(self):\n            employee1 = self.employee_recipe.make()\n            task_recipe = Recipe(Task, employee=employee1)\n            task_recipe.make(status='done')\n            task_recipe.make(due_date=datetime(2014, 1, 1))\n            # test stuff....\n\n\nRecipes with foreign keys\n-------------------------\n\nYou can define `foreign_key` relations:\n\n.. code-block:: python\n\n    from model_mommy.recipe import Recipe, foreign_key\n    from family.models import Person, Dog\n\n\n    person = Recipe(Person,\n        name = 'John Doe',\n        nickname = 'joe',\n        age = 18,\n        birthday = date.today(),\n        appointment = datetime.now()\n    )\n\n    dog = Recipe(Dog,\n        breed = 'Pug',\n        owner = foreign_key(person)\n    )\n\nNotice that `person` is a *recipe*.\n\nYou may be thinking: \"I can put the Person model instance directly in the owner field\". That's not recommended.\n\nUsing the `foreign_key` is important for 2 reasons:\n\n* Semantics. You'll know that attribute is a foreign key when you're reading;\n* The associated instance will be created only when you call `make_recipe` and not during recipe definition;\n\n\nRecipes with callables\n----------------------\n\nIt's possible to use *callables* as recipe's attribute value.\n\n.. code-block:: python\n\n    from datetime import date\n    from model_mommy.recipe import Recipe\n    from family.models import Person\n\n    person = Recipe(Person,\n        birthday = date.today,\n    )\n\nWhen you call `make_recipe`, *Mommy* will set the attribute to the value returned by the callable.\n\nSequences in recipes\n----------------------\n\nSometimes, you have a field with an unique value and using `make` can cause random errors. Also, passing an attribute value just to avoid uniqueness validation problems can be tedious. To solve this you can define a sequence with `seq`\n\n.. code-block:: python\n\n\n    from model_mommy.recipe import Recipe, seq\n    from family.models import Person\n\n    person = Recipe(Person,\n        name = seq('Joe'),\n        age = seq(15)\n    )\n\n    p = mommy.make_recipe('myapp.person')\n    p.name\n    >>> 'Joe1'\n    p.age\n    >>> 16\n\n    p = mommy.make_recipe('myapp.person')\n    p.name\n    >>> 'Joe2'\n    p.age\n    >>> 17\n\nThis will append a counter to strings to avoid uniqueness problems and it will sum the counter with numerical values.\n\n\nYou can also provide an optional `increment_by` argument which will modify incrementing behaviour. This can be an integer, float or Decimal.\n\n.. code-block:: python\n\n\n    person = Recipe(Person,\n        age = seq(15, increment_by=3)\n        height_ft = seq(5.5, increment_by=.25)\n    )\n\n    p = mommy.make_recipe('myapp.person')\n    p.age\n    >>> 18\n    p.height_ft\n    >>> 5.75\n\n    p = mommy.make_recipe('myapp.person')\n    p.age\n    >>> 21\n    p.height_ft\n    >>> 6.0\n\n\nOverriding recipe definitions\n-----------------------------\n\nPassing values when calling `make_recipe` or `prepare_recipe` will override the recipe rule.\n\n.. code-block:: python\n\n    from model_mommy import mommy\n\n    mommy.make_recipe('model_mommy.person', name='Peter Parker')\n\nThis is useful when you have to create multiple objects and you have some unique field, for instance.\n\n\nDeprecation Warnings\n====================\n\nBecause of the changes of model_mommy's API, the following methods are deprecated and will be removed in one of the future releases:\n\n  * `mommy.make_one` -> should use the method `mommy.make` instead\n  * `mommy.prepare_one` -> should use the method `mommy.prepare` instead\n  * `mommy.make_many` -> should use the method `mommy.make` with the `_quantity` parameter instead\n  * `mommy.make_many_from_recipe` -> should use the method `mommy.make_recipe` with the `_quantity` parameter instead\n\nKnown Issues\n============\n\ndjango-taggit\n-------------\n\nModel-mommy identifies django-taggit's `TaggableManager` as a normal Django field, which can lead to errors:\n\n.. code-block:: pycon\n\n    TypeError: <class 'taggit.managers.TaggableManager'> is not supported by mommy.\n\nThe fix for this is to set ``blank=True`` on your ``TaggableManager``.\n\nExtensions\n==========\n\nGeoDjango\n---------\nWorks with it? This project has some custom generators for it:\nhttps://github.com/sigma-consultoria/mommy_spatial_generators\n\n\nContributing\n============\n\n1. Prepare a virtual environment.\n\n.. code-block:: console\n\n    pip install virtualenvwrapper\n    mkvirtualenv --no-site-packages --distribute\n\n2. Install the requirements.\n\n.. code-block:: console\n\n    pip install -r requirements.txt\n\n3. Run the tests.\n\n.. code-block:: console\n\n    make test\n\n\nInspiration\n===========\n\n*Model-mommy* was inspired by many great open source software like ruby's ObjectDaddy and FactoryGirl.\n\n\nDoubts? Loved it? Hated it? Suggestions?\n========================================\n\nJoin our mailing list for support, development and ideas!\n\n*  https://groups.google.com/group/model-mommy",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/vandersonmota/model_mommy",
    "keywords": "django testing factory python",
    "license": "Apache 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "model-mommy",
    "package_url": "https://pypi.org/project/model-mommy/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/model-mommy/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/vandersonmota/model_mommy"
    },
    "release_url": "https://pypi.org/project/model-mommy/1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Smart object creation facility for Django.",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6009510,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2905bcad04e173279383e9571429de72031e21729027a099f2fd5b33565b01e7",
        "md5": "1ac839f0742d6e07e8b95c934405dd4a",
        "sha256": "568ba6b903cd132a19a14c7b9cfba7bbd307d6c74e617b21162f8e324ee5e7b5"
      },
      "downloads": -1,
      "filename": "model_mommy-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1ac839f0742d6e07e8b95c934405dd4a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14196,
      "upload_time": "2013-11-07T23:03:55",
      "upload_time_iso_8601": "2013-11-07T23:03:55.144532Z",
      "url": "https://files.pythonhosted.org/packages/29/05/bcad04e173279383e9571429de72031e21729027a099f2fd5b33565b01e7/model_mommy-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}