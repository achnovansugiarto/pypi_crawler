{
  "info": {
    "author": "",
    "author_email": "bkbilly <bkbilly@hotmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![license](https://img.shields.io/badge/license-MIT-blue)](LICENSE.md)\n[![OS - Linux](https://img.shields.io/badge/OS-Linux-blue?logo=linux&logoColor=white)]()\n[![Python 3.5](https://img.shields.io/badge/Python-3.5-blue?logo=python&logoColor=white)]()\n[![PyPI](https://img.shields.io/pypi/v/lnxlink?logo=pypi&logoColor=white)](https://pypi.python.org/pypi/lnxlink/)\n[![Last commit](https://img.shields.io/github/last-commit/bkbilly/lnxlink?color=blue&logo=github&logoColor=white)]()\n\n<img align=\"right\" width=\"170\" height=\"100\" src=\"https://github.com/bkbilly/lnxlink/blob/master/logo.png?raw=true\">\n\n# LNXlink\nThis is a Linux companion app for integrating your system with an external application like Home Assistant using MQTT.\nIt's very usefull for remote controling a linux PC, receiving notifications and monitoring it's stats.\n\n# Table of contents\n\n * [Features](#features)\n * [Installation](#installation)\n * [Headless Installation](#headless-installation)\n * [Examples](#examples)\n * [FAQ](#faq)\n\n\n# Features\n - **System control:** Shutdown, Restart, Suspend, Send Keys, Notify, Media, Screen On/Off, open URL/File, bash, Keep Alive.\n - **System monitor:** CPU, Ram, Network, Media, Microphone, Idle, Battery, Disk usage, Required restart, Nvidia GPU, Camera, Memory, Update required, System updates, Webcam.\n - **Home Assistant:** Uses MQTT Autodiscovery to create entities and shows if update is required.\n - **No sudo required:** No need to be root user to install and use, unless used on server setup.\n - **Easily expanded:** Any new module is automatically imported and custom modules can be added.\n\n# Installation\nInstall or update:\n```shell\n# For debian based distros:\nsudo apt install patchelf meson libdbus-glib-1-dev libglib2.0-dev libasound2-dev python3-pip xdotool xprintidle xdg-utils\n# For Red Hat based distros:\nsudo dnf install python39-pip.noarch gcc cmake dbus-devel glib2-devel python39-devel alsa-lib-devel\npip3 install -U lnxlink\n# When asked, it's recommended to install as a user service.\nlnxlink -c config.yaml\n```\n\nYou can manually update the configuration file `config.yaml` and restart the service with the use of systemctl:\n```shell\nsystemctl --user restart lnxlink.service\n```\n\n# Headless Installation\nThe headless installation is used for linux environments that don't use a Graphical Interface like servers.\n```shell\nsudo apt install patchelf meson libdbus-glib-1-dev libglib2.0-dev libasound2-dev python3-pip\nsudo pip3 install -U lnxlink\n# When asked, it's recommended to answer false on install as a user service.\nsudo lnxlink -c config.yaml\n```\nSome modules depend on graphical interface, so if you choose to use this option for installation, you will have to find which ones stop lnxlink from starting and remove them from the config file.\n```shell\nsudo systemctl restart lnxlink.service\n```\n\n# Examples\n\n### Send a notification with an image as a preview:\n```yaml\nservice: mqtt.publish\ndata:\n  topic: {prefix}/{clientId}/commands/notify\n  payload: >-\n    { \"title\": \"Notification Title\",\n      \"message\": \"Testing notification\",\n      \"iconUrl\": \"http://hass.local:8123/local/myimage.jpg\" }\n```\n\n### Send a command:\n```yaml\nservice: mqtt.publish\ndata:\n  topic: {prefix}/{clientId}/commands/bash\n  payload: \"ctrl+shift+t\"\n```\n\n### Send a series of keys:\n```yaml\nservice: mqtt.publish\ndata:\n  topic: {prefix}/{clientId}/commands/send_keys\n  payload: \"ctrl+f H e l l o space W o r l d\"\n```\n\n### Open a URL or a File\n```yaml\nservice: mqtt.publish\ndata:\n  topic: lnxlink/desktop-linux/commands/xdg_open\n  payload: \"https://www.google.com\"  # or \"myimg.jpeg\" for file\n```\n\n### Combine with [Wake on Lan](https://www.home-assistant.io/integrations/wake_on_lan/) to control your PC with one switch:\n```yaml\nswitch:\n  - platform: template\n    switches:\n      my_pc:\n        friendly_name: \"My PC\"\n        unique_id: my_pc\n        value_template: \"{{ not is_state('button.shutdown', 'unavailable') }}\"\n        turn_on:\n          service: switch.turn_on\n          data:\n            entity_id: switch.pc_wol\n        turn_off:\n          service: button.press\n          data:\n            entity_id: button.shutdown\n```\n\n### Create a media player using [mqtt-mediaplayer](https://github.com/bkbilly/hass-mqtt-mediaplayer) using the information collected from the media sensor:\n\n![image](https://user-images.githubusercontent.com/518494/193397441-f18bb5fa-de37-4d95-9158-32cd81b31c72.png)\n\nSupports playing remote or local media using `cvlc` which should be installed.\n - Text To Speach\n```yaml\nservice: tts.google_say\ndata:\n  entity_id: media_player.desktop_linux\n  message: Hello world!\n```\n - Play Media\n```yaml\nservice: media_player.play_media\ndata:\n  media_content_id: /home/user/imag.jpg\n  media_content_type: media  # Not used, but required by home assistant\ntarget:\n  entity_id: media_player.desktop_linux\n```\n - Camera Play Stream\n```yaml\nservice: camera.play_stream\ndata:\n  media_player: media_player.desktop_linux\ntarget:\n  entity_id: camera.demo_camera\n```\n\n### Create a custom module\nYou can create custom modules and import them to your configuration with their full path. Check out examples [here](https://github.com/bkbilly/lnxlink/tree/master/lnxlink/modules) and this is an example of how to add the `mytest` module to your configuration.\n```yaml\nmodules:\n- /home/user/mytest.py\n```\n\n\n# FAQ\n## Windows compatibility\nOnly Linux is supported and there is no plan on supporting Windows. A recomended companion app for windows is [HASS.Agent](https://github.com/LAB02-Research/HASS.Agent).\n\n## Config file location\nYour config file is located at the directory you were when you first run lnxlink. This can be anything you write instead of the `config.yaml` that I suggested. You can find where it is from the systemd service:\n```shell\ncat ~/.config/systemd/user/lnxlink.service  | grep -i ExecStart\n```\n\n## Reinitiate systemd service\nIf you want to create the service from scratch, you will have to disable the running service and start lnxlink again:\n```shell\nsystemctl --user disable lnxlink.service\nlnxlink -c config.yaml\n```\n\n## One of my integration is not working\nMake sure you have these packages on your system:\n - xdotool\n - shutdown\n - systemctl\n - xprintidle\n - xdg-open\n - upower\n - xset\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bkbilly.github.io/lnxlink",
    "keywords": "lnxlink",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lnxlink",
    "package_url": "https://pypi.org/project/lnxlink/",
    "platform": null,
    "project_url": "https://pypi.org/project/lnxlink/",
    "project_urls": {
      "Home Page": "https://bkbilly.github.io/lnxlink",
      "Homepage": "https://bkbilly.github.io/lnxlink",
      "Source Code": "https://github.com/bkbilly/lnxlink"
    },
    "release_url": "https://pypi.org/project/lnxlink/2023.4.0/",
    "requires_dist": [
      "PyYAML (>=5.3.1)",
      "paho-mqtt (>=1.5.1)",
      "notify2 (>=0.3.1)",
      "psutil (>=5.8.0)",
      "mpris2 (>=1.0.2)",
      "pyalsaaudio (>=0.9.2)",
      "dbus-python (>=1.3.2)",
      "pgi (>=0.0.11.2)",
      "pyOpenSSL (>=22.1.0)",
      "requests (>=2.28.1)",
      "jc (>=1.23.0)",
      "dbus-idle (>=2023.3.2)",
      "opencv-python (>=4.7.0.68)"
    ],
    "requires_python": ">=3.7.0",
    "summary": "Internet Of Things (IOT) integration with Linux using MQTT",
    "version": "2023.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17532359,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f62cd9c66215cee39175fdb50d76f8273d71a9900535cf0b38ff725410c1155",
        "md5": "ab157ff76e59b0d06ab31bd0c99ccb99",
        "sha256": "f0158249a4382046670b365972282c3e16abf437b19027dd7b880947e303eba1"
      },
      "downloads": -1,
      "filename": "lnxlink-2023.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ab157ff76e59b0d06ab31bd0c99ccb99",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 24277,
      "upload_time": "2023-03-31T20:02:59",
      "upload_time_iso_8601": "2023-03-31T20:02:59.431102Z",
      "url": "https://files.pythonhosted.org/packages/4f/62/cd9c66215cee39175fdb50d76f8273d71a9900535cf0b38ff725410c1155/lnxlink-2023.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0ee512a73b778f19424286bb4e82a87c11a1eb85f1c8826171cede233c1a119",
        "md5": "6992bed0d2fa9d4b9697442e80291a5c",
        "sha256": "2feae1f4661a2d42d2069ea1d805095adb4cc350d18a49b2e5d15f3ac6f84fb5"
      },
      "downloads": -1,
      "filename": "lnxlink-2023.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6992bed0d2fa9d4b9697442e80291a5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 18491,
      "upload_time": "2023-03-31T20:03:01",
      "upload_time_iso_8601": "2023-03-31T20:03:01.080263Z",
      "url": "https://files.pythonhosted.org/packages/f0/ee/512a73b778f19424286bb4e82a87c11a1eb85f1c8826171cede233c1a119/lnxlink-2023.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}