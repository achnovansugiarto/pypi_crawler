{
  "info": {
    "author": "Dennis van Gils",
    "author_email": "vangils.dennis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/dvg-pyqt-filelogger\n    :target: https://pypi.org/project/dvg-pyqt-filelogger\n.. image:: https://img.shields.io/pypi/pyversions/dvg-pyqt-filelogger\n    :target: https://pypi.org/project/dvg-pyqt-filelogger\n.. image:: https://requires.io/github/Dennis-van-Gils/python-dvg-pyqt-filelogger/requirements.svg?branch=master\n    :target: https://requires.io/github/Dennis-van-Gils/python-dvg-pyqt-filelogger/requirements/?branch=master\n    :alt: Requirements Status\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n.. image:: https://img.shields.io/badge/License-MIT-purple.svg\n    :target: https://github.com/Dennis-van-Gils/python-dvg-pyqt-filelogger/blob/master/LICENSE.txt\n\nDvG_PyQt_FileLogger\n===================\n*PyQt5 interface to handle logging data to file particularly well suited for\nmultithreaded programs.*\n\n- Github: https://github.com/Dennis-van-Gils/python-dvg-pyqt-filelogger\n- PyPI: https://pypi.org/project/dvg-pyqt-filelogger\n\nInstallation::\n\n    pip install dvg-pyqt-filelogger\n\n\nAPI\n===\n\n\n``class FileLogger(write_header_function: Callable = None, write_data_function: Callable = None)``\n--------------------------------------------------------------------------------------------------\n\n    Bases: ``PyQt5.QtCore.QObject``\n\n    Handles logging data to a file particularly well suited for multithreaded\n    programs where one thread is writing data to the log and the other thread\n    (the main/GUI thread) requests starting and stopping of the log, e.g.,\n    by the user pressing a button.\n\n    The methods ``start_recording()``, ``stop_recording()`` and ``record(bool)``\n    can be directly called from the main/GUI thread.\n\n    In the logging thread you repeatedly need to call ``update()``. This method\n    takes cares of the state machine behind ``FileLogger`` and will perform the\n    appropiate action, such as creating a file on disk, creating the header or\n    writing new data to the log.\n\n        Args:\n            write_header_function (``Callable``, optional):\n                Reference to a function that contains your specific code to write a\n                header to the log file. This will get called during ``update()``.\n\n                Default: ``None``\n\n            write_data_function (``Callable``, optional):\n                Reference to a function that contains your specific code to write\n                new data to the log file. This will get called during ``update()``.\n\n                Default: ``None``\n\n            Both of the above functions can contain calls to the following class\n            members:\n\n                * ``FileLogger.write()``\n                * ``FileLogger.elapsed()``\n\n        NOTE:\n            This class lacks a mutex and is hence not threadsafe from the get-go.\n            As long as ``update()`` is being called from inside another mutex, such\n            as a data-acquisition mutex for instance, it is safe.\n\n        NOTE:\n            By design the code in this class will continue on when exceptions occur.\n            They are reported to the command line.\n\n        .. rubric:: Signals:\n\n        ``signal_recording_started (str)``:\n            Emitted whenever a new recording has started. Useful for, e.g.,\n            updating text of a record button.\n\n            Returns:\n                The filepath as ``str`` of the newly created log file.\n\n            Type:\n                ``PyQt5.QtCore.pyqtSignal()``\n\n        ``signal_recording_stopped (pathlib.Path)``:\n            Emitted whenever the recording has stopped. Useful for, e.g., updating\n            text of a record button.\n\n            Returns:\n                The filepath as ``pathlib.Path()`` of the newly created log file.\n                You could use this to, e.g., automatically navigate to the log in\n                the file explorer or ask the user for a 'save to' destination.\n\n            Type:\n                ``PyQt5.QtCore.pyqtSignal()``\n\n        Example usage:\n\n        .. code-block:: python\n\n            from PyQt5 import QtWidgets as QtWid\n            from dvg_pyqt_filelogger import FileLogger\n\n            #  When using a PyQt5 GUI put this inside your ``MainWindow()`` definition:\n            # ----\n\n            self.qpbt_record = QtWid.QPushButton(\n                text=\"Click to start recording to file\",\n                checkable=True\n            )\n            self.qpbt_record.clicked.connect(lambda state: log.record(state))\n\n            #  Initialize FileLogger at __main__\n            # ----\n\n            window = MainWindow()\n\n            log = FileLogger(\n                write_header_function=write_header_to_log,\n                write_data_function=write_data_to_log\n            )\n            log.signal_recording_started.connect(\n                lambda filepath: window.qpbt_record.setText(\n                    \"Recording to file: %s\" % filepath\n                )\n            )\n            log.signal_recording_stopped.connect(\n                lambda: window.qpbt_record.setText(\n                    \"Click to start recording to file\"\n                )\n            )\n\n            #  Define these functions in your main module:\n            # ----\n\n            def write_header_to_log():\n                log.write(\"elapsed [s]\\treading_1\\n\")\n\n            def write_data_to_log():\n                log.write(\"%.3f\\t%.4f\\n\" % (log.elapsed(), state.reading_1))\n\n            #  Lastly, put this inside your logging thread:\n            # ----\n\n            log.update()\n\nMethods\n-------\n* ``set_write_header_function(write_header_function: Callable)``\n* ``set_write_data_function(write_data_function: Callable)``\n\n* ``record(state: bool = True)``\n    Can be called from any thread.\n\n* ``start_recording()``\n    Can be called from any thread.\n\n* ``stop_recording()``\n    Can be called from any thread.\n\n* ``update(filepath: str = \"\", mode: str = \"a\")``\n    This method will have to get called repeatedly, presumably in the\n    thread where logging is required, e.g., the data-generation thread.\n    This method takes cares of the state machine behind ``FileLogger`` and\n    will perform the appropriate action, such as creating a file on disk,\n    creating the header or writing new data to the log.\n\n    Args:\n        filepath (``str``):\n            Location of the log file in case it has to be created or opened\n            for write access.\n\n            Default: ``\"{yyMMdd_HHmmss}.txt\"`` denoting the current date and time.\n\n        mode (``str``, optional):\n            Mode in which the log file is to be opened, see ``open()`` for\n            more details. Most common options:\n\n                * ``w``: Open for writing, truncating the file first.\n                * ``a``: Open for writing, appending to the end of the file\n                  if it exists.\n\n            Defaults: ``a``\n\n* ``write(data: AnyStr) -> bool``\n    Write binary or ASCII data to the currently opened log file. By\n    design any exceptions occurring in this method will not terminate the\n    execution, but it will report the error to the command line and continue\n    on instead.\n\n    Returns True if successful, False otherwise.\n\n* ``np_savetxt(*args, **kwargs) -> bool``\n    Write 1D or 2D array_like data to the currently opened log file. This\n    method passes all arguments directly to ``numpy.savetxt()``, see\n    https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html.\n    This method outperforms ``FileLogger.write()``, especially when large\n    chunks of 2D data are passed (my test shows 8x faster).\n\n    By design any exceptions occurring in this method will not terminate the\n    execution, but it will report the error to the command line and continue\n    on instead.\n\n    Returns True if successful, False otherwise.\n\n* ``flush()``\n    Force-flush the contents in the OS buffer to file as soon as\n    possible. Do not call repeatedly, because it causes overhead.\n\n* ``close()``\n* ``is_recording() -> bool``\n\n* ``elapsed() -> float``\n    Returns time in seconds (``float``) since start of recording.\n\n* ``pretty_elapsed() -> str``\n    Returns time as \"h:mm:ss\" (``str``) since start of recording.\n\nChangelog\n=========\n\n1.1.0 (2021-05-13)\n------------------\n* Added support for `numpy.savetxt()`\n\n1.0.0 (2020-08-11)\n------------------\n* First release on PyPI\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dennis-van-Gils/python-dvg-pyqt-filelogger",
    "keywords": "log,data,pyqt5,multithread",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dvg-pyqt-filelogger",
    "package_url": "https://pypi.org/project/dvg-pyqt-filelogger/",
    "platform": "",
    "project_url": "https://pypi.org/project/dvg-pyqt-filelogger/",
    "project_urls": {
      "Homepage": "https://github.com/Dennis-van-Gils/python-dvg-pyqt-filelogger",
      "Issue Tracker": "https://github.com/Dennis-van-Gils/python-dvg-pyqt-filelogger/issues"
    },
    "release_url": "https://pypi.org/project/dvg-pyqt-filelogger/1.1.0/",
    "requires_dist": [
      "pyqt5 (~=5.12)",
      "numpy (~=1.15)",
      "dvg-debug-functions (~=2.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "PyQt5 interface to handle logging data to file particularly well suited for multithreaded programs.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17068240,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "44103e0c7033e960c9343321d6cb5b041cc778395db4b9b1209dc54f88fa38b4",
        "md5": "03ce43bea58156f83f056de9daece040",
        "sha256": "b8601b8a3d244436c4b2d45121eb0a5e1c4d79fd5e8a9e368e106d1481279848"
      },
      "downloads": -1,
      "filename": "dvg_pyqt_filelogger-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "03ce43bea58156f83f056de9daece040",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8736,
      "upload_time": "2021-05-13T18:16:02",
      "upload_time_iso_8601": "2021-05-13T18:16:02.384500Z",
      "url": "https://files.pythonhosted.org/packages/44/10/3e0c7033e960c9343321d6cb5b041cc778395db4b9b1209dc54f88fa38b4/dvg_pyqt_filelogger-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3d4d94d9c15efa8d04ab253a0af164dd13f618fa4e65b34df62137bdd9549c5",
        "md5": "5b90d6c06dac2b720f9bdbdb8e0d4fef",
        "sha256": "c01e7680e9c52e8b12cc4e9f331cc5d6433d9be515a9ae53a995bd26cf0f34f4"
      },
      "downloads": -1,
      "filename": "dvg-pyqt-filelogger-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5b90d6c06dac2b720f9bdbdb8e0d4fef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8900,
      "upload_time": "2021-05-13T18:16:03",
      "upload_time_iso_8601": "2021-05-13T18:16:03.790258Z",
      "url": "https://files.pythonhosted.org/packages/a3/d4/d94d9c15efa8d04ab253a0af164dd13f618fa4e65b34df62137bdd9549c5/dvg-pyqt-filelogger-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}