{
  "info": {
    "author": "Tom Flanagan and Jake Wharton",
    "author_email": "tom@zkpq.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "Dominate\n========\n\n`Dominate` is a Python library for creating and manipulating HTML documents using an elegant DOM API.\nIt allows you to write HTML pages in pure Python very concisely, which eliminate the need to learn another template language, and to take advantage of the more powerful features of Python.\n\n\nInstallation\n------------\n\nThe recommended way to install `dominate` is with\n[`pip`](http://pypi.python.org/pypi/pip/):\n\n    sudo pip install dominate\n\n\nDeveloped By\n------------\n\n* Tom Flanagan - <tom@zkpq.ca>\n* Jake Wharton - <jakewharton@gmail.com>\n\nGit repository located at\n[github.com/Knio/dominate](http://github.com/Knio/dominate)\n\n\nExamples\n========\n\nAll examples assume you have imported the appropriate tags or entire tag set (i.e. `from dominate.tags import *`).\n\n\nHello, World!\n-------------\n\nThe most basic feature of `dominate` exposes a class for each HTML element, where the constructor\naccepts child elements, text, or keyword attributes. `dominate` nodes return their HTML representation\nfrom the `__str__`, `__unicode__`, and `render()` methods.\n\n    >>> print html(body(h1('Hello, World!')))\n    <html>\n      <body>\n        <h1>Hello, pyy!</h1>\n      </body>\n    </html>\n\n\nAttributes\n----------\n\n`Dominate` can also use keyword arguments to append attributes onto your tags. Most of the attributes are a direct copy from the HTML spec with a few variations.\n\nUse `cls` for class names. `cls` is used because `class` in python is a [reserved keyword](http://docs.python.org/2/reference/lexical_analysis.html#keywords \"Reserved Keywords\").\n\n    >>> test = div(cls='classname anothername')\n    >>> print test\n    <div class=\"classname anothername\">\n    </div>\n\nUse `data_*` for [custom HTML5 data attributes](http://www.w3.org/html/wg/drafts/html/master/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes \"HTML5 Data Attributes\").\n\n    >>> test = div(data_employee='101011')\n    >>> print test\n    <div data-employee=\"101011\">\n    </div>\n\nYou can also modify the attributes of tags through a dictionary-like interface:\n\n    >>> header = div()\n    >>> header['id'] = 'header'\n    >>> print header\n    <div id=\"header\"></div>\n\n\nComplex Structures\n------------------\n\nThrough the use of the `+=` operator and the `.add()` method you can easily create more advanced structures.\n\nCreate a simple list:\n\n    >>> list = ul()\n    >>> for item in range(4):\n    ...   list += li('Item #', item)\n    ...\n    >>> print list\n    <ul>\n      <li>Item #0</li>\n      <li>Item #1</li>\n      <li>Item #2</li>\n      <li>Item #3</li>\n    </ul>\n\nIf you are using a database or other backend to fetch data, `dominate` supports iterables to help streamline your code:\n\n    >>> print ul(li(a(name, href=link), __inline=True) for name, link in menu_items)\n    <ul>\n      <li><a href=\"/home/\">Home</a></li>\n      <li><a href=\"/about/\">About</a></li>\n      <li><a href=\"/downloads/\">Downloads</a></li>\n      <li><a href=\"/links/\">Links</a></li>\n    </ul>\n\nA simple document tree:\n\n    >>> _html = html()\n    >>> _body = _html.add(body())\n    >>> header  = _body.add(div(id='header'))\n    >>> content = _body.add(div(id='content'))\n    >>> footer  = _body.add(div(id='footer'))\n    >>> print _html\n    <html>\n      <body>\n        <div id=\"header\"></div>\n        <div id=\"content\"></div>\n        <div id=\"footer\"></div>\n      </body>\n    </html>\n\nFor clean code, the `.add()` method returns children in tuples. The above example can be cleaned up and expanded like this:\n\n    >>> _html = html()\n    >>> _head, _body = _html.add(head(title('Simple Document Tree')), body())\n    >>> names = ['header', 'content', 'footer']\n    >>> header, content, footer = _body.add(div(id=name) for name in names)\n    >>> print _html\n    <html>\n      <head>\n        <title>Simple Document Tree</title>\n      </head>\n      <body>\n        <div id=\"header\"></div>\n        <div id=\"content\"></div>\n        <div id=\"footer\"></div>\n      </body>\n    </html>\n\nYou can modify the attributes of tags through a dictionary-like interface:\n\n    >>> header = div()\n    >>> header['id'] = 'header'\n    >>> print header\n    <div id=\"header\"></div>\n\nOr the children of a tag though an array-line interface:\n\n    >>> header = div('Test')\n    >>> header[0] = 'Hello World'\n    >>> print header\n    <div>Hello World</div>\n\n\nComments can be created using objects too!\n\n    >>> print comment('BEGIN HEADER')\n    <!--BEGIN HEADER-->\n    >>> print comment(p('Upgrade to newer IE!'), condition='lt IE9')\n    <!--[if lt IE9]>\n    <p>Upgrade to newer IE!</p>\n    <![endif]-->\n\n\nContext Managers\n----------------\n\nYou can also add child elements using Python's `with` statement:\n\n    >>> h = ul()\n    >>> with h:\n    ...   li('One')\n    ...   li('Two')\n    ...   li('Three')\n    ...\n    >>>\n    >>> print h\n    <ul>\n      <li>One</li>\n      <li>Two</li>\n      <li>Three</li>\n    </ul>\n\n\nYou can use this along with the other mechanisms of adding children elements, including nesting `with` statements, and it works as expected:\n\n    >>> h = html()\n    >>> with h.add(body()).add(div(id='content')):\n    ...   h1('Hello World!')\n    ...   p('Lorem ipsum ...')\n    ...   with table().add(tbody()):\n    ...     l = tr()\n    ...     l += td('One')\n    ...     l.add(td('Two'))\n    ...     with l:\n    ...       td('Three')\n    ...\n    >>>\n    >>> print h\n    <html>\n      <body>\n        <div id=\"content\">\n          <h1>Hello World!</h1>\n          <p>Lorem ipsum ...</p>\n          <table>\n            <tbody>\n              <tr>\n                <td>One</td>\n                <td>Two</td>\n                <td>Three</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </body>\n    </html>\n\n\nWhen the context is closed, any nodes that were not already added to something get added to the current context.\n\nAttributes can be added to the current context with the `attr` function:\n\n    >>> d = div()\n    >>> with d:\n    ...   attr(id='header')\n    ...\n    >>>\n    >>> print d\n    <div id=\"header\"></div>\n\n\nDecorators\n----------\n\n`Dominate` is great for creating reusable widgets for parts of your page. Consider this example:\n\n    >>> def greeting(name):\n    ...     with div() as d\n    ...         p('Hello, %s' % name)\n    ...     return d\n    ...\n    ...\n    >>> print greeting('Bob')\n    <div>\n      <p>Hello, Bob</p>\n    </div>\n    >>>\n\nYou can see the following pattern being repeated here:\n\n    def widget(parameters):\n      with tag() as t:\n          ...\n      return t\n\nThis boilerplate can be avoided by using tags (objects and instances) as decorators\n\n    >>> @div\n    ... def greeting(name):\n    ...     p('Hello %s' % name)\n    ...\n    ...\n    >>> print greeting('Bob')\n    <div>\n      <p>Hello Bob</p>\n    </div>\n    >>>\n\nThe decorated function will return a new instance of the tag used to decorate it, and execute in a `with` context which will collect all the nodes created inside it.\n\nYou can also use instances of tags as decorators, if you need to add attributes or other data to the root node of the widget.\nEach call to the decorated function will return a copy of the node used to decorate it.\n\n    >>> @div(h2('Welcome'), cls='greeting')\n    ... def greeting(name):\n    ...     p('Hello %s' % name)\n    ...\n    ...\n    >>> print greeting('Bob')\n    <div class=\"greeting\">\n      <h2>Welcome</h2>\n      <p>Hello Bob</p>\n    </div>\n    >>>\n\n\n\nCreating Documents\n------------------\n\nSince creating the common structure of an HTML document everytime would be excessively tedious dominate provides a class to create an manage them for you, `document`.\n\nWhen you create a new document, the basic HTML tag structure is created for you.\n\n    >>> d = document()\n    >>> print d\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>PYY Page</title>\n      </head>\n      <body></body>\n    </html>\n\nThe `document` class accepts `title`, `doctype`, and `request` keyword arguments.\nThe default values for these arguments are `Dominate`, `<!DOCTYPE html>`, and `None` respectively.\n\nThe `document` class also provides helpers to allow you to access the `html`, `head`, and `body` nodes directly.\n\n    >>> d = document()\n    >>> d.html\n    <dominate.tags.html: 0 attributes, 2 children>\n    >>> d.head\n    <dominate.tags.head: 0 attributes, 0 children>\n    >>> d.body\n    <dominate.tags.body: 0 attributes, 0 children>\n\nYou should notice that here the `head` tag contains zero children.\nThis is because the default `title` tag is only added when the document is rendered and the `head` element already does not explicitly contain one.\n\nThe `document` class also provides helpers to allow you to directly add nodes to the `body` tag.\n\n    >>> d = document()\n    >>> d += h1('Hello, World!')\n    >>> p += p('This is a paragraph.')\n    >>> print d\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>PYY Page</title>\n      </head>\n      <body>\n        <h1>Hello, World!</h1>\n        <p>This is a paragraph.</p>\n      </body>\n    </html>",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/Knio/dominate/",
    "keywords": "framework templating template html xhtml python html5",
    "license": "LICENSE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dominate",
    "package_url": "https://pypi.org/project/dominate/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dominate/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/Knio/dominate/"
    },
    "release_url": "https://pypi.org/project/dominate/2.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Dominate is a Python library for creating and manipulating HTML documents using an elegant DOM API.",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14537449,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4607219f55157b4fb184d01aaf30da6d4e2b1fe40dad472ed71ccc007204c82c",
        "md5": "809dd8616408ff6336b2f104c18f426b",
        "sha256": "2fff40eb013de558691b1cf78ae27638d805f5b565919ed0017c4696eceac935"
      },
      "downloads": -1,
      "filename": "dominate-2.1.1.zip",
      "has_sig": false,
      "md5_digest": "809dd8616408ff6336b2f104c18f426b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29273,
      "upload_time": "2013-11-24T09:55:12",
      "upload_time_iso_8601": "2013-11-24T09:55:12.747657Z",
      "url": "https://files.pythonhosted.org/packages/46/07/219f55157b4fb184d01aaf30da6d4e2b1fe40dad472ed71ccc007204c82c/dominate-2.1.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}