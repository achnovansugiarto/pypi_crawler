{
  "info": {
    "author": "Tom Flanagan and Jake Wharton",
    "author_email": "tom@zkpq.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "Dominate\r\n========\r\n\r\n| ``Dominate`` is a Python library for creating and manipulating HTML\r\n  documents using an elegant DOM API.\r\n| It allows you to write HTML pages in pure Python very concisely, which\r\n  eliminates the need to learn another template language, and lets you\r\n  take advantage of the more powerful features of Python.\r\n\r\nPython:\r\n\r\n.. code:: python\r\n\r\n    import dominate\r\n    from dominate.tags import *\r\n\r\n    doc = dominate.document(title='Dominate your HTML')\r\n\r\n    with doc.head:\r\n        link(rel='stylesheet', href='style.css')\r\n        script(type='text/javascript', src='script.js')\r\n\r\n    with doc:\r\n        with div(id='header').add(ol()):\r\n            for i in ['home', 'about', 'contact']:\r\n                li(a(i.title(), href='/%s.html' % i))\r\n\r\n        with div():\r\n            attr(cls='body')\r\n            p('Lorem ipsum..')\r\n\r\n    print doc\r\n\r\nOutput:\r\n\r\n.. code:: html\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <title>Dominate your HTML</title>\r\n        <link href=\"style.css\" rel=\"stylesheet\">\r\n        <script src=\"script.js\" type=\"text/javascript\"></script>\r\n      </head>\r\n      <body>\r\n        <div id=\"header\">\r\n          <ol>\r\n            <li>\r\n              <a href=\"/home.html\">Home</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"/about.html\">About</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"/contact.html\">Contact</a>\r\n            </li>\r\n          </ol>\r\n        </div>\r\n        <div class=\"body\">\r\n          <p>Lorem ipsum..</p>\r\n        </div>\r\n      </body>\r\n    </html>\r\n\r\nCompatibility\r\n-------------\r\n\r\n``Dominate`` is compatible with both Python 2.7 and Python 3.3. There\r\nare known issues with Python 3.2 and below.\r\n\r\n| |Build Status|\r\n| |Coverage Status|\r\n\r\nInstallation\r\n------------\r\n\r\n| The recommended way to install ``dominate`` is with\r\n| ```pip`` <http://pypi.python.org/pypi/pip/>`__:\r\n\r\n::\r\n\r\n    sudo pip install dominate\r\n\r\n|PyPI version|\r\n\r\nDeveloped By\r\n------------\r\n\r\n-  Tom Flanagan - tom@zkpq.ca\r\n-  Jake Wharton - jakewharton@gmail.com\r\n-  `Brad Janke <//github.com/bradj>`__\r\n\r\n| Git repository located at\r\n| `github.com/Knio/dominate <//github.com/Knio/dominate>`__\r\n\r\nExamples\r\n========\r\n\r\nAll examples assume you have imported the appropriate tags or entire tag\r\nset:\r\n\r\n.. code:: python\r\n\r\n    from dominate.tags import *\r\n\r\nHello, World!\r\n-------------\r\n\r\n| The most basic feature of ``dominate`` exposes a class for each HTML\r\n  element, where the constructor\r\n| accepts child elements, text, or keyword attributes. ``dominate``\r\n  nodes return their HTML representation\r\n| from the ``__str__``, ``__unicode__``, and ``render()`` methods.\r\n\r\n.. code:: python\r\n\r\n    print html(body(h1('Hello, World!')))\r\n\r\n.. code:: html\r\n\r\n    <html>\r\n        <body>\r\n            <h1>Hello, World!</h1>\r\n        </body>\r\n    </html>\r\n\r\nAttributes\r\n----------\r\n\r\n``Dominate`` can also use keyword arguments to append attributes onto\r\nyour tags. Most of the attributes are a direct copy from the HTML spec\r\nwith a few variations.\r\n\r\nFor attributes ``class`` and ``for`` which conflict with Python's\r\n`reserved\r\nkeywords <http://docs.python.org/2/reference/lexical_analysis.html#keywords>`__,\r\nyou can use the following aliases:\r\n\r\n+------------------------------+-------+\r\n| class                        | for   |\r\n+==============================+=======+\r\n| \\_class \\| \\_for \\|          |\r\n| \\|cls \\| fr \\|               |\r\n| \\|className\\|htmlFor\\|       |\r\n| \\|class\\_name\\|html\\_for\\|   |\r\n+------------------------------+-------+\r\n\r\n.. code:: python\r\n\r\n    test = label(cls='classname anothername', fr='someinput')\r\n    print test\r\n\r\n.. code:: html\r\n\r\n    <label class=\"classname anothername\" for=\"someinput\"></label>\r\n\r\nUse ``data_*`` for `custom HTML5 data\r\nattributes <http://www.w3.org/html/wg/drafts/html/master/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes>`__.\r\n\r\n.. code:: python\r\n\r\n    test = div(data_employee='101011')\r\n    print test\r\n\r\n.. code:: html\r\n\r\n    <div data-employee=\"101011\"></div>\r\n\r\nYou can also modify the attributes of tags through a dictionary-like\r\ninterface:\r\n\r\n.. code:: python\r\n\r\n    header = div()\r\n    header['id'] = 'header'\r\n    print header\r\n\r\n.. code:: html\r\n\r\n    <div id=\"header\"></div>\r\n\r\nComplex Structures\r\n------------------\r\n\r\nThrough the use of the ``+=`` operator and the ``.add()`` method you can\r\neasily create more advanced structures.\r\n\r\nCreate a simple list:\r\n\r\n.. code:: python\r\n\r\n    list = ul()\r\n    for item in range(4):\r\n        list += li('Item #', item)\r\n    print list\r\n\r\n.. code:: html\r\n\r\n    <ul>\r\n        <li>Item #0</li>\r\n        <li>Item #1</li>\r\n        <li>Item #2</li>\r\n        <li>Item #3</li>\r\n    </ul>\r\n\r\n``dominate`` supports iterables to help streamline your code:\r\n\r\n.. code:: python\r\n\r\n    print ul(li(a(name, href=link), __inline=True) for name, link in menu_items)\r\n\r\n.. code:: html\r\n\r\n    <ul>\r\n        <li><a href=\"/home/\">Home</a></li>\r\n        <li><a href=\"/about/\">About</a></li>\r\n        <li><a href=\"/downloads/\">Downloads</a></li>\r\n        <li><a href=\"/links/\">Links</a></li>\r\n    </ul>\r\n\r\nA simple document tree:\r\n\r\n.. code:: python\r\n\r\n    _html = html()\r\n    _body = _html.add(body())\r\n    header  = _body.add(div(id='header'))\r\n    content = _body.add(div(id='content'))\r\n    footer  = _body.add(div(id='footer'))\r\n    print _html\r\n\r\n.. code:: html\r\n\r\n    <html>\r\n        <body>\r\n            <div id=\"header\"></div>\r\n            <div id=\"content\"></div>\r\n            <div id=\"footer\"></div>\r\n        </body>\r\n    </html>\r\n\r\nFor clean code, the ``.add()`` method returns children in tuples. The\r\nabove example can be cleaned up and expanded like this:\r\n\r\n.. code:: python\r\n\r\n    _html = html()\r\n    _head, _body = _html.add(head(title('Simple Document Tree')), body())\r\n    names = ['header', 'content', 'footer']\r\n    header, content, footer = _body.add(div(id=name) for name in names)\r\n    print _html\r\n\r\n.. code:: html\r\n\r\n    <html>\r\n        <head>\r\n           <title>Simple Document Tree</title>\r\n        </head>\r\n        <body>\r\n            <div id=\"header\"></div>\r\n            <div id=\"content\"></div>\r\n            <div id=\"footer\"></div>\r\n        </body>\r\n    </html>\r\n\r\nYou can modify the attributes of tags through a dictionary-like\r\ninterface:\r\n\r\n.. code:: python\r\n\r\n    header = div()\r\n    header['id'] = 'header'\r\n    print header\r\n\r\n.. code:: html\r\n\r\n    <div id=\"header\"></div>\r\n\r\nOr the children of a tag though an array-line interface:\r\n\r\n.. code:: python\r\n\r\n    header = div('Test')\r\n    header[0] = 'Hello World'\r\n    print header\r\n\r\n.. code:: html\r\n\r\n    <div>Hello World</div>\r\n\r\nComments can be created using objects too!\r\n\r\n.. code:: python\r\n\r\n    print comment('BEGIN HEADER')\r\n\r\n.. code:: html\r\n\r\n    <!--BEGIN HEADER-->\r\n\r\n.. code:: python\r\n\r\n    print comment(p('Upgrade to newer IE!'), condition='lt IE9')\r\n\r\n.. code:: html\r\n\r\n    <!--[if lt IE9]>\r\n      <p>Upgrade to newer IE!</p>\r\n    <![endif]-->\r\n\r\nContext Managers\r\n----------------\r\n\r\nYou can also add child elements using Python's ``with`` statement:\r\n\r\n.. code:: python\r\n\r\n    h = ul()\r\n    with h:\r\n        li('One')\r\n        li('Two')\r\n        li('Three')\r\n\r\n    print h\r\n\r\n.. code:: html\r\n\r\n    <ul>\r\n        <li>One</li>\r\n        <li>Two</li>\r\n        <li>Three</li>\r\n    </ul>\r\n\r\nYou can use this along with the other mechanisms of adding children\r\nelements, including nesting ``with`` statements, and it works as\r\nexpected:\r\n\r\n.. code:: python\r\n\r\n    h = html()\r\n    with h.add(body()).add(div(id='content')):\r\n        h1('Hello World!')\r\n        p('Lorem ipsum ...')\r\n        with table().add(tbody()):\r\n            l = tr()\r\n            l += td('One')\r\n            l.add(td('Two'))\r\n            with l:\r\n                td('Three')\r\n\r\n    print h\r\n\r\n.. code:: html\r\n\r\n    <html>\r\n        <body>\r\n            <div id=\"content\">\r\n                <h1>Hello World!</h1>\r\n                <p>Lorem ipsum ...</p>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>One</td>\r\n                            <td>Two</td>\r\n                            <td>Three</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </body>\r\n    </html>\r\n\r\nWhen the context is closed, any nodes that were not already added to\r\nsomething get added to the current context.\r\n\r\nAttributes can be added to the current context with the ``attr``\r\nfunction:\r\n\r\n.. code:: python\r\n\r\n    d = div()\r\n    with d:\r\n        attr(id='header')\r\n\r\n     print d\r\n     ```\r\n\r\n     ```html\r\n    <div id=\"header\"></div>\r\n\r\nDecorators\r\n----------\r\n\r\n``Dominate`` is great for creating reusable widgets for parts of your\r\npage. Consider this example:\r\n\r\n.. code:: python\r\n\r\n    def greeting(name):\r\n        with div() as d:\r\n            p('Hello, %s' % name)\r\n        return d\r\n\r\n    print greeting('Bob')\r\n\r\n.. code:: html\r\n\r\n    <div>\r\n        <p>Hello, Bob</p>\r\n    </div>\r\n\r\nYou can see the following pattern being repeated here:\r\n\r\n.. code:: python\r\n\r\n    def widget(parameters):\r\n        with tag() as t:\r\n            ...\r\n        return t\r\n\r\nThis boilerplate can be avoided by using tags (objects and instances) as\r\ndecorators\r\n\r\n.. code:: python\r\n\r\n    @div\r\n    def greeting(name):\r\n        p('Hello %s' % name)\r\n    print greeting('Bob')\r\n\r\n.. code:: html\r\n\r\n    <div>\r\n        <p>Hello Bob</p>\r\n    </div>\r\n\r\nThe decorated function will return a new instance of the tag used to\r\ndecorate it, and execute in a ``with`` context which will collect all\r\nthe nodes created inside it.\r\n\r\n| You can also use instances of tags as decorators, if you need to add\r\n  attributes or other data to the root node of the widget.\r\n| Each call to the decorated function will return a copy of the node\r\n  used to decorate it.\r\n\r\n.. code:: python\r\n\r\n    @div(h2('Welcome'), cls='greeting')\r\n    def greeting(name):\r\n        p('Hello %s' % name)\r\n\r\n    print greeting('Bob')\r\n\r\n.. code:: html\r\n\r\n\r\n    <div class=\"greeting\">\r\n        <h2>Welcome</h2>\r\n        <p>Hello Bob</p>\r\n    </div>\r\n\r\nCreating Documents\r\n------------------\r\n\r\nSince creating the common structure of an HTML document everytime would\r\nbe excessively tedious dominate provides a class to create and manage\r\nthem for you: ``document``.\r\n\r\nWhen you create a new document, the basic HTML tag structure is created\r\nfor you.\r\n\r\n.. code:: python\r\n\r\n    d = document()\r\n    print d\r\n\r\n.. code:: html\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n        <head>\r\n           <title>Dominate</title>\r\n        </head>\r\n        <body></body>\r\n    </html>\r\n\r\n| The ``document`` class accepts ``title``, ``doctype``, and ``request``\r\n  keyword arguments.\r\n| The default values for these arguments are ``Dominate``,\r\n  ``<!DOCTYPE html>``, and ``None`` respectively.\r\n\r\nThe ``document`` class also provides helpers to allow you to access the\r\n``html``, ``head``, and ``body`` nodes directly.\r\n\r\n.. code:: python\r\n\r\n    d = document()\r\n\r\n::\r\n\r\n    >>> d.html\r\n    <dominate.tags.html: 0 attributes, 2 children>\r\n    >>> d.head\r\n    <dominate.tags.head: 0 attributes, 0 children>\r\n    >>> d.body\r\n    <dominate.tags.body: 0 attributes, 0 children>\r\n\r\n| You should notice that here the ``head`` tag contains zero children.\r\n| This is because the default ``title`` tag is only added when the\r\n  document is rendered and the ``head`` element does not explicitly\r\n  contain one.\r\n\r\nThe ``document`` class also provides helpers to allow you to directly\r\nadd nodes to the ``body`` tag.\r\n\r\n.. code:: python\r\n\r\n    d = document()\r\n    d += h1('Hello, World!')\r\n    d += p('This is a paragraph.')\r\n    print d\r\n\r\n.. code:: html\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n        <head>\r\n           <title>Dominate</title>\r\n        </head>\r\n        <body>\r\n            <h1>Hello, World!</h1>\r\n            <p>This is a paragraph.</p>\r\n        </body>\r\n    </html>\r\n\r\n.. |Build Status| image:: https://travis-ci.org/Knio/dominate.png?branch=master\r\n   :target: https://travis-ci.org/Knio/dominate\r\n.. |Coverage Status| image:: https://coveralls.io/repos/Knio/dominate/badge.png?branch=master\r\n   :target: https://coveralls.io/r/Knio/dominate?branch=master\r\n.. |PyPI version| image:: https://badge.fury.io/py/dominate.png\r\n   :target: http://badge.fury.io/py/dominate",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/Knio/dominate/",
    "keywords": "framework templating template html xhtml python html5",
    "license": "LICENSE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dominate",
    "package_url": "https://pypi.org/project/dominate/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dominate/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/Knio/dominate/"
    },
    "release_url": "https://pypi.org/project/dominate/2.1.15/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Dominate is a Python library for creating and manipulating HTML documents using an elegant DOM API.",
    "version": "2.1.15",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14537449,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2182efdecd128b7dfd314c3ea9b2ae1886a71333bfda76c3bc2a5de21e1b93c",
        "md5": "fef0d29b95b3bd73e9a926a5b3700c27",
        "sha256": "6d13a9b9f3143a26c500a58ac0e4bf63e1fbc4667a6e892f4be1997381e5cc70"
      },
      "downloads": -1,
      "filename": "dominate-2.1.15.zip",
      "has_sig": false,
      "md5_digest": "fef0d29b95b3bd73e9a926a5b3700c27",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36434,
      "upload_time": "2015-09-21T06:03:34",
      "upload_time_iso_8601": "2015-09-21T06:03:34.308938Z",
      "url": "https://files.pythonhosted.org/packages/a2/18/2efdecd128b7dfd314c3ea9b2ae1886a71333bfda76c3bc2a5de21e1b93c/dominate-2.1.15.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}