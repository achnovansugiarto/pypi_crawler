{
  "info": {
    "author": "Kostas Stamatiou",
    "author_email": "kostas.stamatiou@digitalglobe.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=======\nmltools \n=======\n\n.. image:: https://badge.fury.io/py/mltools.svg\n    :target: https://badge.fury.io/py/mltools\n\nTools for fast prototyping of object detection and classification solutions on DG imagery.\nRelies heavily on popular open source machine learning (ML) toolkits such as scikit-learn. \nIt also includes a collection of auxiliary tools necessary for pre- and post- ML processing. These are: \n\n- data_extractors: get pixels and metadata from georeferenced imagery; uses geoio (https://github.com/digitalglobe/geoio);\n- features: functions to derive features from pixels; \n- crowdsourcing: interface with Tomnod to obtain training/test/target data and to write machine output to Tomnod DB;\n- geojson_tools: functions to manipulate geojson files.\n\nExample scripts can be found in /examples. These can be used as a guideline to create object detection/classification \nworkflows which involve one or more of the following steps: \n\n1. retrieve training, test and target data from the Tomnod database;\n2. train the algorithm;\n3. test the algorithm on the test data and compute accuracy metrics;\n4. deploy the algorithm on the target data for detection or classification;\n5. write results back to the Tomnod database.\n\nStep 1 can be omitted if data is available from a source other than Tomnod. \n(However, the data must respect the geojson format found in /examples.)\nStep 5 can also be omitted if we don't want to write the results back to Tomnod.\n\n\nInstallation/Usage\n------------------\n\nFor Ubuntu, install conda with the following commands (choose default options at prompt)::\n\n   wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh\n   bash Miniconda2-latest-Linux-x86_64.sh\n\n   \nFor OS X, install conda with the following commands (choose default options at prompt)::\n\n   wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh\n   bash Miniconda2-latest-MacOSX-x86_64.sh\n\nThen run::\n\n   bash\n\nso that modifications in your .bashrc take effect. \n\nCreate a conda environment::\n\n   conda create -n env python ipython numpy scipy gdal git  \n   \nActivate the environment::\n\n   source activate env\n\nUpgrade pip (if required)::\n\n   pip install pip --upgrade\n\nInstall mltools::\n\n   pip install mltools\n\nIf installation fails for some of the dependencies, (try to) install them with conda::\n\n   conda install <dependency_name>\n\nYou can now copy the scripts found in /examples in your project directory or create your own. \nKeep in mind that the imagery has to be in your project folder and it should have the same name as the image_name \nproperty in the geojson. Imagery in the format required by a MLA (e.g., pansharpened, multi-spectral or orthorectified) can be obtained with the gbdxtools package (https://github.com/digitalglobe/gbdxtools).\n\nTo exit your conda virtual environment::\n\n   source deactivate \n \n\nDevelopment\n-----------\n\nActivate the conda environment::\n\n   source activate env\n\nClone the repo::\n\n   git clone https://github.com/kostasthebarbarian/mltools\n   \n   cd mltools\n   \nInstall the requirements::\n\n   pip install -r requirements.txt\n\nPlease follow this python style guide: https://google.github.io/styleguide/pyguide.html.\n80-90 columns is fine.\n\nTo exit your conda virtual environment::\n\n   source deactivate\n\n\nComments\n--------\n\nHere is a slide my initial ideas on mltools:\n\nhttps://docs.google.com/drawings/d/1tKSgFMp0lLd7Abne8CdOhb1PbdJfgCz5x9XkLwDeET0/edit?usp=sharing\n\nThe vision is to use the solutions created with mltools as part of a Crowd+Machine system along the lines of this document:\n\nhttps://docs.google.com/document/d/1hf82I_jDNGc0NdopXxW9RkbQjLOOGkV4lU5kdM5tqlA/edit?usp=sharing\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kostasthebarbarian/mltools",
    "keywords": "",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mltools",
    "package_url": "https://pypi.org/project/mltools/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mltools/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/kostasthebarbarian/mltools"
    },
    "release_url": "https://pypi.org/project/mltools/1.0.7/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Added mask to data extractor.",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2642656,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a59e4b46309bbc305d9d590b673c2a1e702c650befd7098b9dbcf48b71421ec1",
        "md5": "ba5c5bd5730ef20c51a2817d2950c470",
        "sha256": "03cc345039951af0164e88f49445533fbdbbbaaa64a425b768450c18b9a81816"
      },
      "downloads": -1,
      "filename": "mltools-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "ba5c5bd5730ef20c51a2817d2950c470",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8094,
      "upload_time": "2016-05-18T00:41:26",
      "upload_time_iso_8601": "2016-05-18T00:41:26.268041Z",
      "url": "https://files.pythonhosted.org/packages/a5/9e/4b46309bbc305d9d590b673c2a1e702c650befd7098b9dbcf48b71421ec1/mltools-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}