{
  "info": {
    "author": "Hasenpfote",
    "author_email": "Hasenpfote36@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": "`License <https://github.com/Hasenpfote/malloc_tracer/blob/master/LICENSE>`__\n`Build Status <https://travis-ci.org/Hasenpfote/malloc_tracer>`__ `PyPI\nversion <https://badge.fury.io/py/malloc-tracer>`__\n\nmalloc_tracer\n=============\n\nAbout\n-----\n\nThis is a debugging tool for tracing malloc that occurs inside a\nfunction or class.\n\n.. code:: python\n\n   import numpy as np\n   from malloc_tracer.tracer import *\n\n\n   def func(x, y, z):\n       dataset1 = np.empty((100, ), dtype=np.float64)\n       print('x', x)\n       dataset1 = np.empty((1000, ), dtype=np.float64)\n\n       l = [i for i in range(100000)]\n\n       if x == 0:\n           dataset4a = np.empty((100000, ), dtype=np.float64)\n           return 0\n       elif x == 1:\n           dataset4b = np.empty((100000, ), dtype=np.float64)\n           return 1\n\n       dataset3 = np.empty((3000, ), dtype=np.float64)\n       return 2\n\n\n   tracer = Tracer(func)\n\nThis is equivalent to the following code.\n\n.. code:: python\n\n   import numpy as np\n   from tracemalloc import start, take_snapshot, stop\n\n\n   SNAPSHOT = None\n\n\n   def func(x, y, z):\n       try:\n           start()\n           dataset1 = np.empty((100,), dtype=np.float64)\n           print('x', x)\n           dataset1 = np.empty((1000,), dtype=np.float64)\n\n           l = [i for i in range(100000)]\n\n           if (x == 0):\n               dataset4a = np.empty((100000,), dtype=np.float64)\n               return 0\n           elif (x == 1):\n               dataset4b = np.empty((100000,), dtype=np.float64)\n               return 1\n\n           dataset3 = np.empty((3000,), dtype=np.float64)\n           return 2\n       finally:\n           global SNAPSHOT\n           SNAPSHOT = take_snapshot()\n           stop()\n\nFeature\n-------\n\nCompatibility\n-------------\n\nmalloc_tracer works with Python 3.4 or higher.\n\nDependencies\n------------\n\nInstallation\n------------\n\n::\n\n   pip install malloc-tracer\n\nUsage\n-----\n\n**Trace a function.**\n\n.. code:: python\n\n   import numpy as np\n   from malloc_tracer.tracer import *\n\n\n   def func(x, y, z):\n       dataset1 = np.empty((100, ), dtype=np.float64)\n       print('x', x)\n       dataset1 = np.empty((1000, ), dtype=np.float64)\n\n       l = [i for i in range(100000)]\n\n       if x == 0:\n           dataset4a = np.empty((100000, ), dtype=np.float64)\n           return 0\n       elif x == 1:\n           dataset4b = np.empty((100000, ), dtype=np.float64)\n           return 1\n\n       dataset3 = np.empty((3000, ), dtype=np.float64)\n       return 2\n\n.. code:: python\n\n   tracer = Tracer(func)\n   tracer.trace(\n       target_args=dict(x=1, y=2, z=3)\n   )\n\n.. figure:: https://raw.githubusercontent.com/Hasenpfote/malloc_tracer/master/docs/usage1.png\n   :alt: usage1\n\n   usage1\n\n**Trace a method.**\n\n.. code:: python\n\n   import numpy as np\n   from malloc_tracer.tracer import *\n\n\n   class Klass(object):\n\n       CONSTANT = 'CONSTANT'\n\n       def __init__(self, value):\n           self._value = value\n\n       def method(self, x):\n           dataset1 = np.empty((100, ), dtype=np.float64)\n           print('x', x)\n           dataset1 = np.empty((1000, ), dtype=np.float64)\n\n           l = [i for i in range(100000)]\n\n           if x == 0:\n               dataset4a = np.empty((100000, ), dtype=np.float64)\n               return 0\n           elif x == 1:\n               dataset4b = np.empty((100000, ), dtype=np.float64)\n               return 1\n\n           dataset3 = np.empty((3000, ), dtype=np.float64)\n           return 2\n\n       @staticmethod\n       def smethod():\n           dataset = np.empty((100, ), dtype=np.float64)\n           l = [i for i in range(100000)]\n           print('Hello')\n           return dataset\n\n       @classmethod\n       def cmethod(cls, var):\n           return cls.CONSTANT + var\n\n.. code:: python\n\n   instance = Klass(1)\n   tracer = Tracer(instance.method)\n   tracer.trace(\n       target_args=dict(x=1)\n   )\n\n.. figure:: https://raw.githubusercontent.com/Hasenpfote/malloc_tracer/master/docs/usage2a.png\n   :alt: usage2a\n\n   usage2a\n\n**Trace a static method.**\n\n.. code:: python\n\n   tracer = Tracer(Klass.smethod)\n   tracer.trace(\n       target_args=dict()\n   )\n\n.. figure:: https://raw.githubusercontent.com/Hasenpfote/malloc_tracer/master/docs/usage2b.png\n   :alt: usage2b\n\n   usage2b\n\n**Trace a class method.**\n\n.. code:: python\n\n   tracer = Tracer(Klass.cmethod)\n   tracer.trace(\n       target_args=dict(var='Hello world.')\n   )\n\n.. figure:: https://raw.githubusercontent.com/Hasenpfote/malloc_tracer/master/docs/usage2c.png\n   :alt: usage2c\n\n   usage2c\n\n**Displays related traces for each file.**\n\n.. code:: python\n\n   import numpy as np\n   from malloc_tracer.tracer import *\n\n\n   global_var1 = None\n   global_var2 = None\n\n\n   def func2():\n       global global_var1\n       global global_var2\n       global_var1 = np.empty((1000, ), dtype=np.float64)\n       global_var2 = np.empty((10000, ), dtype=np.float64)\n\n\n   def func(x, y, z):\n       dataset1 = np.empty((100, ), dtype=np.float64)\n       print('x', x)\n       dataset1 = np.empty((1000, ), dtype=np.float64)\n\n       l = [i for i in range(100000)]\n\n       func2()\n\n       if x == 0:\n           dataset4a = np.empty((100000, ), dtype=np.float64)\n           return 0\n       elif x == 1:\n           dataset4b = np.empty((100000, ), dtype=np.float64)\n           return 1\n\n       dataset3 = np.empty((3000, ), dtype=np.float64)\n       return 2\n\n.. code:: python\n\n   tracer = Tracer(func)\n   tracer.trace(\n       target_args=dict(x=1, y=2, z=3),\n       related_traces_output_mode=RelatedTracesOutputMode.FOR_EACH_FILE\n   )\n\n.. figure:: https://raw.githubusercontent.com/Hasenpfote/malloc_tracer/master/docs/usage3a.png\n   :alt: usage3a\n\n   usage3a\n\n**Displays related traces in descending order.**\n\n.. code:: python\n\n   tracer = Tracer(func)\n   tracer.trace(\n       target_args=dict(x=1, y=2, z=3),\n       related_traces_output_mode=RelatedTracesOutputMode.IN_DESCENDING_ORDER\n   )\n\n.. figure:: https://raw.githubusercontent.com/Hasenpfote/malloc_tracer/master/docs/usage3b.png\n   :alt: usage3b\n\n   usage3b\n\nLicense\n-------\n\nThis software is released under the MIT License, see LICENSE.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Hasenpfote/malloc_tracer",
    "keywords": "debug,debugging-tool,tracemalloc",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "malloc-tracer",
    "package_url": "https://pypi.org/project/malloc-tracer/",
    "platform": "",
    "project_url": "https://pypi.org/project/malloc-tracer/",
    "project_urls": {
      "Homepage": "https://github.com/Hasenpfote/malloc_tracer"
    },
    "release_url": "https://pypi.org/project/malloc-tracer/1.3.0/",
    "requires_dist": [
      "sphinx; extra == 'doc'",
      "coverage; extra == 'test'",
      "nose; extra == 'test'"
    ],
    "requires_python": ">=3.4",
    "summary": "This is a debugging tool for tracing malloc that occurs inside a function or class.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9091572,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1b12b7e5a16c253d7cbf6c5bc52391144314c37363ef4f9687a328c16a84001",
        "md5": "b3f2b2c6f54c03254f17ead00562d2b8",
        "sha256": "676257f2e6b0f5275ee9a42dc2b4bc6857e0424e1dfe1ae69b7b682099b904bc"
      },
      "downloads": -1,
      "filename": "malloc_tracer-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3f2b2c6f54c03254f17ead00562d2b8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 6571,
      "upload_time": "2018-08-15T07:32:25",
      "upload_time_iso_8601": "2018-08-15T07:32:25.494230Z",
      "url": "https://files.pythonhosted.org/packages/f1/b1/2b7e5a16c253d7cbf6c5bc52391144314c37363ef4f9687a328c16a84001/malloc_tracer-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b37b02f2a4fc80a5b8bf3afe254e5ed3a5f31b955a05c0da22c1267877c6004",
        "md5": "b5c96ae16ee73eda6eebb560012c56d8",
        "sha256": "e5466aaa219b62b394878dd4e716364b7ac5ffc8161bb313167819fcdcb3ea4e"
      },
      "downloads": -1,
      "filename": "malloc_tracer-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b5c96ae16ee73eda6eebb560012c56d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 199643,
      "upload_time": "2018-08-15T07:32:27",
      "upload_time_iso_8601": "2018-08-15T07:32:27.307218Z",
      "url": "https://files.pythonhosted.org/packages/6b/37/b02f2a4fc80a5b8bf3afe254e5ed3a5f31b955a05c0da22c1267877c6004/malloc_tracer-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}