{
  "info": {
    "author": "Hasenpfote",
    "author_email": "Hasenpfote36@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": "`License <https://github.com/Hasenpfote/malloc_tracer/blob/master/LICENSE>`__\n`Build Status <https://travis-ci.org/Hasenpfote/malloc_tracer>`__ `PyPI\nversion <https://badge.fury.io/py/malloc-tracer>`__\n\nmalloc_tracer\n=============\n\nAbout\n-----\n\nThis is a debugging tool for tracing malloc that occurs inside a\nfunction or class.\n\n.. code:: python\n\n   import numpy as np\n   from malloc_tracer.tracer import *\n\n\n   def func(x, y, z):\n       dataset1 = np.empty((100, ), dtype=np.float64)\n       print('x', x)\n       dataset1 = np.empty((1000, ), dtype=np.float64)\n\n       l = [i for i in range(100000)]\n\n       if x == 0:\n           dataset4a = np.empty((100000, ), dtype=np.float64)\n           return 0\n       elif x == 1:\n           dataset4b = np.empty((100000, ), dtype=np.float64)\n           return 1\n\n       dataset3 = np.empty((3000, ), dtype=np.float64)\n       return 2\n\n\n   tracer = Tracer(func)\n\nThis is equivalent to the following code.\n\n.. code:: python\n\n   import numpy as np\n   from tracemalloc import start, take_snapshot, stop\n\n\n   SNAPSHOT = None\n\n\n   def func(x, y, z):\n       try:\n           start()\n           dataset1 = np.empty((100,), dtype=np.float64)\n           print('x', x)\n           dataset1 = np.empty((1000,), dtype=np.float64)\n\n           l = [i for i in range(100000)]\n\n           if (x == 0):\n               dataset4a = np.empty((100000,), dtype=np.float64)\n               return 0\n           elif (x == 1):\n               dataset4b = np.empty((100000,), dtype=np.float64)\n               return 1\n\n           dataset3 = np.empty((3000,), dtype=np.float64)\n           return 2\n       finally:\n           global SNAPSHOT\n           SNAPSHOT = take_snapshot()\n           stop()\n\nFeature\n-------\n\nCompatibility\n-------------\n\nmalloc_tracer works with Python 3.4 or higher.\n\nDependencies\n------------\n\nInstallation\n------------\n\n::\n\n   pip install malloc-tracer\n\nUsage\n-----\n\n**Trace a function.**\n\n.. code:: python\n\n   import numpy as np\n   from malloc_tracer.tracer import *\n\n\n   def func(x, y, z):\n       dataset1 = np.empty((100, ), dtype=np.float64)\n       print('x', x)\n       dataset1 = np.empty((1000, ), dtype=np.float64)\n\n       l = [i for i in range(100000)]\n\n       if x == 0:\n           dataset4a = np.empty((100000, ), dtype=np.float64)\n           return 0\n       elif x == 1:\n           dataset4b = np.empty((100000, ), dtype=np.float64)\n           return 1\n\n       dataset3 = np.empty((3000, ), dtype=np.float64)\n       return 2\n\n.. code:: python\n\n   tracer = Tracer(func)\n   tracer.trace(\n       target_args=dict(x=1, y=2, z=3)\n   )\n\n.. figure:: https://raw.githubusercontent.com/Hasenpfote/malloc_tracer/master/docs/usage1.png\n   :alt: usage1\n\n   usage1\n\n**Trace a method.**\n\n.. code:: python\n\n   import numpy as np\n   from malloc_tracer.tracer import *\n\n\n   class Klass(object):\n\n       CONSTANT = 'CONSTANT'\n\n       def __init__(self, value):\n           self._value = value\n\n       def method(self, x):\n           dataset1 = np.empty((100, ), dtype=np.float64)\n           print('x', x)\n           dataset1 = np.empty((1000, ), dtype=np.float64)\n\n           l = [i for i in range(100000)]\n\n           if x == 0:\n               dataset4a = np.empty((100000, ), dtype=np.float64)\n               return 0\n           elif x == 1:\n               dataset4b = np.empty((100000, ), dtype=np.float64)\n               return 1\n\n           dataset3 = np.empty((3000, ), dtype=np.float64)\n           return 2\n\n       @staticmethod\n       def smethod():\n           dataset = np.empty((100, ), dtype=np.float64)\n           l = [i for i in range(100000)]\n           print('Hello')\n           return dataset\n\n       @classmethod\n       def cmethod(cls, var):\n           return cls.CONSTANT + var\n\n.. code:: python\n\n   instance = Klass(1)\n   tracer = Tracer(instance.method)\n   tracer.trace(\n       target_args=dict(x=1)\n   )\n\n.. figure:: https://raw.githubusercontent.com/Hasenpfote/malloc_tracer/master/docs/usage2a.png\n   :alt: usage2a\n\n   usage2a\n\n**Trace a static method.**\n\n.. code:: python\n\n   tracer = Tracer(Klass.smethod)\n   tracer.trace(\n       target_args=dict()\n   )\n\n.. figure:: https://raw.githubusercontent.com/Hasenpfote/malloc_tracer/master/docs/usage2b.png\n   :alt: usage2b\n\n   usage2b\n\n**Trace a class method.**\n\n.. code:: python\n\n   tracer = Tracer(Klass.cmethod)\n   tracer.trace(\n       target_args=dict(var='Hello world.')\n   )\n\n.. figure:: https://raw.githubusercontent.com/Hasenpfote/malloc_tracer/master/docs/usage2c.png\n   :alt: usage2c\n\n   usage2c\n\nLicense\n-------\n\nThis software is released under the MIT License, see LICENSE.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Hasenpfote/malloc_tracer",
    "keywords": "debug,debugging-tool,tracemalloc",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "malloc-tracer",
    "package_url": "https://pypi.org/project/malloc-tracer/",
    "platform": "",
    "project_url": "https://pypi.org/project/malloc-tracer/",
    "project_urls": {
      "Homepage": "https://github.com/Hasenpfote/malloc_tracer"
    },
    "release_url": "https://pypi.org/project/malloc-tracer/1.2.0/",
    "requires_dist": [
      "sphinx; extra == 'doc'",
      "coverage; extra == 'test'",
      "nose; extra == 'test'"
    ],
    "requires_python": ">=3.4",
    "summary": "This is a debugging tool for tracing malloc that occurs inside a function or class.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9091572,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b7747a30c191659b2423509f0ae4310d5b4533e442898298aa22aa675ff7d68",
        "md5": "a208933a9448460aabdb0f7a8000aca2",
        "sha256": "5c37fbaf07e4a812f2b2fd39a1a544cea64860b2f6bbc2f3212128b5d577147c"
      },
      "downloads": -1,
      "filename": "malloc_tracer-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a208933a9448460aabdb0f7a8000aca2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 6316,
      "upload_time": "2018-08-13T04:59:52",
      "upload_time_iso_8601": "2018-08-13T04:59:52.262002Z",
      "url": "https://files.pythonhosted.org/packages/1b/77/47a30c191659b2423509f0ae4310d5b4533e442898298aa22aa675ff7d68/malloc_tracer-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d00d55aa3781a2d237470c6a08dd14717e708723692c71942fba6a67c00d2ef",
        "md5": "c7e89b64069ecc5c3dcb8525f6a1d654",
        "sha256": "539de90d53177fe33ade6bf694d2fd238862195203c620a8c150533bf81605eb"
      },
      "downloads": -1,
      "filename": "malloc_tracer-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c7e89b64069ecc5c3dcb8525f6a1d654",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 92918,
      "upload_time": "2018-08-13T04:59:53",
      "upload_time_iso_8601": "2018-08-13T04:59:53.590128Z",
      "url": "https://files.pythonhosted.org/packages/9d/00/d55aa3781a2d237470c6a08dd14717e708723692c71942fba6a67c00d2ef/malloc_tracer-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}