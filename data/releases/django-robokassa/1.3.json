{
  "info": {
    "author": "Mikhail Korobov",
    "author_email": "kmike84@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "================\ndjango-robokassa\n================\n\ndjango-robokassa - это приложение для интеграции платежной системы ROBOKASSA в\nпроекты на Django.\n\nДо использования следует ознакомиться с официальной документацией\nROBOKASSA (http://docs.robokassa.ru/). Приложение реализует\nпротокол взаимодействия, описанный в этом документе.\n\nУстановка\n=========\n\n::\n\n    $ pip install django-robokassa\n\nПотом следует добавить 'robokassa' в INSTALLED_APPS и выполнить ::\n\n    $ python manage.py syncdb\n\nили, если используется South, ::\n\n    $ python manage.py migrate\n\nДля работы требуется django >= 1.3.1.\nИспользуйте django-robokassa версии 0.9.3, если проект на django 1.2.x или django 1.1.x.\n\nНастройка\n=========\n\nВ settings.py нужно указать следующие настройки:\n\n* ROBOKASSA_LOGIN - логин\n* ROBOKASSA_PASSWORD1 - пароль №1\n\nНеобязательные параметры:\n\n* ROBOKASSA_PASSWORD2 - пароль №2. Его можно не указывать, если\n  django-robokassa используется только для вывода формы платежа.\n  Если django-robokassa используется для приема платежей, то этот\n  параметр обязательный.\n\n* ROBOKASSA_USE_POST - используется ли метод POST при приеме результатов от\n  ROBOKASSA. По умолчанию - True. Считается, что для Result URL, Success URL и\n  Fail URL выбран один и тот же метод.\n\n* ROBOKASSA_STRICT_CHECK - использовать ли строгую проверку (требовать\n  предварительного уведомления на ResultURL). По умолчанию - True.\n\n* ROBOKASSA_TEST_MODE - включен ли тестовый режим. По умолчанию False\n  (т.е. включен боевой режим).\n\n* ROBOKASSA_EXTRA_PARAMS - список (list) названий дополнительных параметров,\n  которые будут передаваться вместе с запросами. \"Shp\" к ним приписывать не\n  нужно.\n\n* ROBOKASSA_TEST_FORM_TARGET - url робокассы для тестового режима.\n  Настройка предназначена для случая, когда в распоряжении не имеется\n  доступного в интернете домена (например разработка на localhost) \n  и вместо сервера робокассы необходимо\n  использовать свой.\n\n\nИспользование\n=============\n\nФорма для приема платежей\n-------------------------\n\nДля того, чтобы упростить конструирование html-форм для отправки пользователей в\nRobokassa, в django-robokassa есть форма RobokassaForm. Она нужна\nдля упрощения вывода информации в шаблонах, вычисления контрольной суммы и\nформирования параметров GET-запросов.\n\nПример::\n\n    # views.py\n\n    from django.shortcuts import get_object_or_404, render\n    from django.contrib.auth.decorators import login_required\n\n    from robokassa.forms import RobokassaForm\n\n    @login_required\n    def pay_with_robokassa(request, order_id):\n        order = get_object_or_404(Order, pk=order_id)\n\n        form = RobokassaForm(initial={\n                   'OutSum': order.total,\n                   'InvId': order.id,\n                   'Desc': order.name,\n                   'Email': request.user.email,\n                   # 'IncCurrLabel': '',\n                   # 'Culture': 'ru'\n               })\n\n        return render(request, 'pay_with_robokassa.html', {'form': form})\n\nВ initial все параметры необязательны. Детальную справку по параметрам\nлучше посмотреть в `документации <http://robokassa.ru/ru/Doc/Ru/Interface.aspx#222>`_\nк Robokassa. Можно передавать в initial значения \"пользовательских параметров\",\nописанных в ROBOKASSA_EXTRA_PARAMS ('shp' к ним приписывать опять не нужно).\n\nСоответствующий шаблон::\n\n    {% extends 'base.html' %}\n\n    {% block content %}\n        <form action=\"{{ form.target }}\" method=\"POST\">\n            <p>{{ form.as_p }}</p>\n            <p><input type=\"submit\" value=\"Купить\"></p>\n        </form>\n    {% endblock %}\n\nФорма выведется в виде набора скрытых input-тегов.\n\nУ формы есть атрибут target, содержащий URL, по которому форму следует\nотправлять. В тестовом режиме это будет тестовый URL, в боевом - боевой.\n\nОбратите внимание, {% csrf_token %} в форме не нужен (и более того, добавлять\nего к форме небезопасно), т.к. форма ведет на внешний сайт - сайт робокассы.\n\nВместо отправки формы можно сформировать GET-запрос. У формы есть\nметод get_redirect_url, который возвращает нужный адрес со всеми параметрами.\nРедирект на этот адрес равносилен отправке формы методом GET.\n\ndjango-robokassa не включает в себя модели \"Покупка\" (``Order`` в примере),\nт.к. эта модель будет отличаться от сайта к сайту. Обработку смены статусов\nпокупок следует осуществлять в обработчиках сигналов.\n\n\nПолучение результатов платежей\n------------------------------\nВ Robokassa есть несколько методов определения результата платежа:\n\n1. При переходе на страницы Success и Fail гарантируется, что платеж\n   соответственно прошел и не прошел\n\n2. При успешном или неудачном платеже Robokassa отправляет POST или GET запрос\n   на Result URL.\n\n3. Можно запрашивать статус платежа через XML-сервис.\n\nВ django-robokassa на данный момент поддерживаются методы 1 и 2 и их совмещение\n(дополнительная проверка, что при переходе на Success URL уже было уведомление\nна Result URL при использовании опции ROBOKASSA_STRICT_CHECK = True).\n\nВ целях безопасности лучше всегда использовать строгую проверку\n(с подтверждением через Result URL). Ее механизм:\n\n1. После оплаты robokassa.ru отправляет \"фоновый\" запрос на ResultURL.\n\n2. Внутри view, связанного с ResultURL, происходит проверка содержащейся в\n   запросе md5-подписи через ROBOKASSA_PASSWORD2 (это второй пароль, который не\n   передается по сети и известен только отправителю и получателю).\n   ROBOKASSA_PASSWORD2 нужен для подтверждения того, что запрос был послан\n   именно с robokassa.ru.\n\n3. Если запрос правильный, то view шлет сигнал\n   ``robokassa.signals.result_received``. Чтоб производить\n   манипуляции внутри сайта (например, начислять средства согласно\n   пришедшему запросу или менять статус заказа), нужно добавить\n   соответствующий обработчик этого сигнала.\n\n4. Если все в порядке, то view, связанный с Result URL,\n   отдает robokassa.ru ответ вида ``OK<operation_id>``,\n   где ``<operation_id>`` - уникальный id текущей операции.\n   Этот ответ  необходим для того, чтобы robokassa.ru получила\n   подтверждение того, что все необходимые действия произведены.\n\n5. Если robokassa.ru получает этот ответ, то пользователь перенаправляется\n   на Success URL. На этой страничке обычно лучше вывести сообщение\n   об успешном прохождении платежа/оплаты. Если ответ view, связанной\n   с Result URL, не соответвтует ожидаемому, то пользователь перенаправляется\n   не на Success URL, а на Fail URL; там ему хорошо бы показать\n   сообщение о произошедшей ошибке.\n\n\nСигналы\n-------\n\nОбработку смены статусов покупок следует осуществлять в обработчиках сигналов.\n\n* ``robokassa.signals.result_received`` - шлется при получении уведомления от\n  Robokassa. Получение этого сигнала означает, что оплата была успешной.\n  В качестве sender передается экземпляр модели SuccessNotification, у\n  которой есть атрибуты InvId и OutSum.\n\n* ``robokassa.signals.success_page_visited`` - шлется при переходе пользователя\n  на страницу успешной оплаты. Этот сигнал следует использовать вместо\n  result_received, если не используется строгая проверка\n  (ROBOKASSA_STRICT_CHECK=False)\n\n* ``robokassa.signals.fail_page_visited`` - шлется при переходе пользователя\n  на страницу ошибки оплаты. Получение этого сигнала означает, что оплата\n  не была произведена. В обработчике следует осуществлять разблокирвку товара\n  на складе и т.д.\n\nВсе сигналы получают параметры InvId (номер заказа), OutSum (сумма оплаты) и\nextra (словарь с дополнительными параметрами, описанными в\nROBOKASSA_EXTRA_PARAMS).\n\nПример::\n\n    from robokassa.signals import result_received\n    from my_app.models import Order\n\n    def payment_received(sender, **kwargs):\n        order = Order.objects.get(id=kwargs['InvId'])\n        order.status = 'paid'\n        order.paid_sum = kwargs['OutSum']\n        order.extra_param = kwargs['extra']['my_param']\n        order.save()\n\n    result_received.connect(payment_received)\n\n\n\nurls.py\n-------\n\nДля настройки Result URL, Success URL и Fail URL можно подключить\nмодуль robokassa.urls::\n\n    urlpatterns = patterns('',\n        #...\n        url(r'^robokassa/', include('robokassa.urls')),\n        #...\n    )\n\nАдреса, которые нужно указывать в панели robokassa, в этом случае будут иметь вид\n\n* Result URL: ``http://yoursite.ru/robokassa/result/``\n* Success URL: ``http://yoursite.ru/robokassa/success/``\n* Fail URL: ``http://yoursite.ru/robokassa/fail/``\n\n\nШаблоны\n-------\n\n* ``robokassa/success.html`` - показывается в случае успешной оплаты. В\n  контексте есть переменная form типа ``SuccessRedirectForm``, InvId\n  и OutSum с параметрами заказа, а также все дополнительные параметры, описанные\n  в ROBOKASSA_EXTRA_PARAMS.\n\n* ``robokassa/fail.html`` - показывается в случае неуспешной оплаты. В\n  контексте есть переменная form типа ``FailRedirectForm``, InvId\n  и OutSum с параметрами заказа, а также все дополнительные параметры, описанные\n  в ROBOKASSA_EXTRA_PARAMS.\n\n* ``robokassa/error.html`` - показывается при ошибочном запросе к странице\n  \"успех\" или \"неудача\" (например, при ошибке в контрольной сумме). В контексте\n  есть переменная form класса ``FailRedirectForm`` или ``SuccessRedirectForm``.\n\nРазработка\n==========\n\nРазработка ведется на github: https://github.com/kmike/django-robokassa\n\nПожелания, идеи, баг-репорты и тд. пишите в трекер: https://github.com/kmike/django-robokassa/issues\n\nЛицензия - MIT.\n\nТестирование\n------------\n\nДля запуска тестов установите `tox <http://tox.testrun.org/>`_, склонируйте репозиторий\nи выполните команду\n\n::\n\n    $ tox\n\nиз корня репозитория.\n\n\n\nИстория изменений\n=================\n\n1.3 (2016-03-07)\n----------------\n\n* исправлена работа в тестовом режиме (спасибо Шумихину Ивану);\n* настройка ROBOKASSA_TEST_FORM_TARGET позволяет указать свой тестовый сервер\n  (спасибо https://github.com/superqwer).\n* репозиторий на bitbucket больше не поддерживается;\n* setup.py теперь использует setuptools.\n\n1.2 (2013-12-24)\n----------------\n\n* Добавлена поддержка django 1.6 - спасибо Александру Симкину;\n* Python 2.5 больше не поддерживается.\n\n1.1 (2013-04-12)\n----------------\n\n* На странице FailURL больше не проверяется подпись (т.к. Робокасса ее\n  больше не передает) - спасибо @amureki;\n* улучшена справка - спасибо @bo858585.\n\n1.0 (2012-03-24)\n----------------\n* Для работы теперь требуется django >= 1.3;\n* добавлена поддержка django 1.4;\n* все вьюхи возвращают теперь TemplateResponse;\n* миграции переведены на современную версию south;\n* запуск тестов через tox;\n* небольшие улучшения в README.\n\n0.9.3 (2010-08-05)\n------------------\nСообщения с ошибочной подписью не вызывают исключения.\n\n0.9.2 (2010-06-23)\n------------------\nДобавлена поддержка django 1.2.\n\n0.9.1 (2010-05-10)\n------------------\nИсправлена работа с дополнительными (пользовательскими) параметрами.\n\n0.9.0 (2010-04-15)\n------------------\nПервая версия",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/kmike/django-robokassa/",
    "keywords": null,
    "license": "MIT license",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-robokassa",
    "package_url": "https://pypi.org/project/django-robokassa/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-robokassa/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/kmike/django-robokassa/"
    },
    "release_url": "https://pypi.org/project/django-robokassa/1.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Приложение для интеграции платежной системы ROBOKASSA в проекты на Django.",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1993036,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "321b6a9c2671a331c3f6c0d9f44617693e86916e3ebfd707a44c8d919d5d5423",
        "md5": "2ee078004cf61d09752a63cfdeb950ea",
        "sha256": "86bd4167c2ed408e891939d6f2744ca90ef7c7edb20fbf5340e678c868a02b96"
      },
      "downloads": -1,
      "filename": "django_robokassa-1.3-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ee078004cf61d09752a63cfdeb950ea",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 20977,
      "upload_time": "2016-03-07T05:05:11",
      "upload_time_iso_8601": "2016-03-07T05:05:11.867374Z",
      "url": "https://files.pythonhosted.org/packages/32/1b/6a9c2671a331c3f6c0d9f44617693e86916e3ebfd707a44c8d919d5d5423/django_robokassa-1.3-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92739c7a4e5db3c2b807aae7eceb92bda54e35e10d55cee68c06d94a9f9eacf1",
        "md5": "b9d18b3eca579f889bf1c0a9efa4bd0d",
        "sha256": "8dce73ac4f51aeb11340356b583b5d8d98de5be7c7c746f324fb3ff542761443"
      },
      "downloads": -1,
      "filename": "django-robokassa-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b9d18b3eca579f889bf1c0a9efa4bd0d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13133,
      "upload_time": "2016-03-07T05:04:56",
      "upload_time_iso_8601": "2016-03-07T05:04:56.853343Z",
      "url": "https://files.pythonhosted.org/packages/92/73/9c7a4e5db3c2b807aae7eceb92bda54e35e10d55cee68c06d94a9f9eacf1/django-robokassa-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}