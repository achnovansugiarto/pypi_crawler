{
  "info": {
    "author": "Stefan Eiermann",
    "author_email": "python-org@ultraapp.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "# Python Method Cache\n\n[![Build Status](https://travis-ci.org/eieste/MethodCache.svg?branch=master)](https://travis-ci.org/eieste/MethodCache)\n[![PyPI version](https://badge.fury.io/py/method-cache.svg)](https://badge.fury.io/py/method-cache)\n[![Documentation Status](https://readthedocs.org/projects/methodcache/badge/?version=latest)](https://methodcache.readthedocs.io/en/latest/?badge=latest)\n\n## What it does\n\nMethodCache can be used to cache the result of an method in a flexible way.\nThis libary has no dependencies!\n\n**Currently only TTL Cache available**\n\nThe cache storage can be segmented in categories.\nMethods with the ``@cache`` decorator are saved in these categories.\n\n## Example\n```python\nfrom methodcache import cache, Store\nimport time\n\n# TTL in Seconds (Default TTl is 60)\nst = Store(ttl=60*300)\n\n# Define Store for this Cache, and overwrite Store TTL. And categorize this cache object to demo\n@cache(store=st, ttl=5, category=\"demo\")\ndef doothings(a,b,c):\n    # Do here what ever you want.\n    # eg. MySQL querys or other slow operations\n    time.sleep(2)\n    return a+b+c\n\n# Slow Execution\ndoothings(1,2,3)\n# Slow Execution\n\ndoothings(4,5,6)\n\n# Fast Execution because the Cache was used\ndoothings(1,2,3)\ntime.sleep(2)\n\n# Slow Execution because the Cache TTL is Expired\ndoothings(1,2,3)\n\n```\n\n## Documentation\n\n[Read the Docs](https://methodcache.readthedocs.io/en/latest/)\n\nor \nshow ``example.py``",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eieste/MethodCache",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "method-cache",
    "package_url": "https://pypi.org/project/method-cache/",
    "platform": "",
    "project_url": "https://pypi.org/project/method-cache/",
    "project_urls": {
      "Homepage": "https://github.com/eieste/MethodCache"
    },
    "release_url": "https://pypi.org/project/method-cache/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple TTL Cache for methods and there results.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4873653,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6215fb3889517eb348d2410199c7fdb1a4730cd0feed8487287f729be7a6c0ed",
        "md5": "8dd90613a9120e8746faa080af2471c5",
        "sha256": "8407098a50463641f7bc3f85e4e2ef1200675ddb8025b682c7d1b9b7134ba0d9"
      },
      "downloads": -1,
      "filename": "method_cache-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8dd90613a9120e8746faa080af2471c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5354,
      "upload_time": "2019-02-15T12:54:43",
      "upload_time_iso_8601": "2019-02-15T12:54:43.125084Z",
      "url": "https://files.pythonhosted.org/packages/62/15/fb3889517eb348d2410199c7fdb1a4730cd0feed8487287f729be7a6c0ed/method_cache-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}