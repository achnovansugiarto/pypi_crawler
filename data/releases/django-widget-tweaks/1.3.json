{
  "info": {
    "author": "Mikhail Korobov",
    "author_email": "kmike84@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "====================\ndjango-widget-tweaks\n====================\n\n.. image:: https://travis-ci.org/kmike/django-widget-tweaks.png?branch=master\n    :target: https://travis-ci.org/kmike/django-widget-tweaks\n.. image:: https://coveralls.io/repos/kmike/django-widget-tweaks/badge.png?branch=master\n    :target: https://coveralls.io/r/kmike/django-widget-tweaks\n\nTweak the form field rendering in templates, not in python-level\nform definitions. Altering CSS classes and HTML attributes is supported.\n\nThat should be enough for designers to customize field presentation (using\nCSS and unobtrusive javascript) without touching python code.\n\nThe license is MIT.\n\nInstallation\n============\n\n::\n\n    pip install django-widget-tweaks\n\nThen add 'widget_tweaks' to INSTALLED_APPS.\n\nUsage\n=====\n\nThis app provides two sets of tools that may be used together or standalone:\n\n1. a ``render_field`` template tag for customizing form fields by using an\n   HTML-like syntax.\n2. several template filters for customizing form field HTML attributes and CSS\n   classes\n\nThe ``render_field`` tag should be easier to use and should make form field\ncustomizations much easier for designers and front-end developers.\n\nThe template filters are more powerful than the ``render_field`` tag, but they\nuse a more complex and less HTML-like syntax.\n\nrender_field\n------------\n\nThis is a template tag that can be used as an alternative to aforementioned\nfilters.  This template tag renders a field using a syntax similar to plain\nHTML attributes.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- change input type (e.g. to HTML5) -->\n    {% render_field form.search_query type=\"search\" %}\n\n    <!-- add/change several attributes -->\n    {% render_field form.text rows=\"20\" cols=\"20\" title=\"Hello, world!\" %}\n\n    <!-- append to an attribute -->\n    {% render_field form.title class+=\"css_class_1 css_class_2\" %}\n\n    <!-- template variables can be used as attribute values -->\n    {% render_field form.text placeholder=form.text.label %}\n\nFor fields rendered with ``{% render_field %}`` tag it is possible\nto set error class and required fields class by using\n``WIDGET_ERROR_CLASS`` and  ``WIDGET_REQUIRED_CLASS`` template variables::\n\n    {% with WIDGET_ERROR_CLASS='my_error' WIDGET_REQUIRED_CLASS='my_required' %}\n        {% render_field form.field1 %}\n        {% render_field form.field2 %}\n        {% render_field form.field3 %}\n    {% endwith %}\n\nYou can be creative with these variables: e.g. a context processor could\nset a default CSS error class on all fields rendered by\n``{% render_field %}``.\n\n\nattr\n----\nAdds or replaces any single html atribute for the form field.\n\nExamples::\n\n    {% load widget_tweaks %}\n\n    <!-- change input type (e.g. to HTML5) -->\n    {{ form.search_query|attr:\"type:search\" }}\n\n    <!-- add/change several attributes -->\n    {{ form.text|attr:\"rows:20\"|attr:\"cols:20\"|attr:\"title:Hello, world!\" }}\n\n    <!-- attributes without parameters -->\n    {{ form.search_query|attr:\"autofocus\" }}\n\n\nadd_class\n---------\n\nAdds CSS class to field element. Split classes by whitespace in order to add\nseveral classes at once.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- add 2 extra css classes to field element -->\n    {{ form.title|add_class:\"css_class_1 css_class_2\" }}\n\nset_data\n--------\n\nSets HTML5 data attribute ( http://ejohn.org/blog/html-5-data-attributes/ ).\nUseful for unobtrusive javascript. It is just a shortcut for 'attr' filter\nthat prepends attribute names with 'data-' string.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- data-filters:\"OverText\" will be added to input field -->\n    {{ form.title|set_data:\"filters:OverText\" }}\n\nappend_attr\n-----------\n\nAppends atribute value with extra data.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- add 2 extra css classes to field element -->\n    {{ form.title|append_attr:\"class:css_class_1 css_class_2\" }}\n\n'add_class' filter is just a shortcut for 'append_attr' filter that\nadds values to the 'class' attribute.\n\nadd_error_class\n---------------\n\nThe same as 'add_class' but adds css class only if validation failed for\nthe field (field.errors is not empty).\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- add 'error-border' css class on field error -->\n    {{ form.title|add_error_class:\"error-border\" }}\n\n\nadd_error_attr\n--------------\n\nThe same as 'attr' but sets an attribute only if validation failed for\nthe field (field.errors is not empty). This can be useful when dealing\nwith accessibility::\n\n    {% load widget_tweaks %}\n\n    <!-- add aria-invalid=\"true\" attribute on field error -->\n    {{ form.title|add_error_attr:\"aria-invalid:true\" }}\n\nfield_type and widget_type\n--------------------------\n\n``'field_type'`` and ``'widget_type'`` are template filters that return\nfield class name and field widget class name (in lower case).\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <div class=\"field {{ field|field_type }} {{ field|widget_type }} {{ field.html_name }}\">\n        {{ field }}\n    </div>\n\nOutput::\n\n    <div class=\"field charfield textinput name\">\n        <input id=\"id_name\" type=\"text\" name=\"name\" maxlength=\"100\" />\n    </div>\n\nFilter chaining\n===============\n\nThe order django-widget-tweaks filters apply may seem counter-intuitive\n(leftmost filter wins)::\n\n    {{ form.simple|attr:\"foo:bar\"|attr:\"foo:baz\" }}\n\nreturns::\n\n    <input foo=\"bar\" type=\"text\" name=\"simple\" id=\"id_simple\" />\n\nIt is not a bug, it is a feature that enables creating reusable templates\nwith overridable defaults.\n\nReusable field template example::\n\n    {# inc/field.html #}\n    {% load widget_tweaks %}\n    <div>{{ field|attr:\"foo:default_foo\" }}</div>\n\nExample usage::\n\n    {# my_template.html #}\n    {% load widget_tweaks %}\n    <form method='POST' action=''> {% csrf_token %}\n        {% include \"inc/field.html\" with field=form.title %}\n        {% include \"inc/field.html\" with field=form.description|attr:\"foo:non_default_foo\" %}\n    </form>\n\nWith 'rightmost filter wins' rule it wouldn't be possible to override\n``|attr:\"foo:default_foo\"`` in main template.\n\nContributing\n============\n\nIf you've found a bug, implemented a feature or have a suggestion,\ndo not hesitate to contact me, fire an issue or send a pull request.\n\nSource code:\n\n* https://bitbucket.org/kmike/django-widget-tweaks/\n* https://github.com/kmike/django-widget-tweaks/\n\nBug tracker: https://bitbucket.org/kmike/django-widget-tweaks/issues/new\n\nrunning the tests\n-----------------\n\nMake sure you have `tox <http://tox.testrun.org/>`_ installed, then type\n\n::\n\n    tox\n\nfrom the source checkout.\n\n\n\nChanges\n=======\n\n1.3 (2013-04-05)\n----------------\n\n* added support for ``WIDGET_ERROR_CLASS`` and  ``WIDGET_REQUIRED_CLASS``\n  template variables that affect ``{% render_field %}``.\n\n1.2 (2013-03-23)\n----------------\n\n* new ``add_error_attr`` template filter;\n* testing improvements.\n\n1.1.2 (2012-06-06)\n------------------\n\n* support for template variables is added to ``render_field`` tag;\n* new ``field_type`` and ``widget_type`` filters.\n\n1.1.1 (2012-03-22)\n------------------\n\n* some issues with ``render_field`` tag are fixed.\n\n1.1 (2012-03-22)\n----------------\n\n* ``render_field`` template tag.\n\n1.0 (2012-02-06)\n----------------\n\n* filters return empty strings instead of raising exceptions if field is missing;\n* test running improvements;\n* python 3 support;\n* undocumented 'behave' filter is removed.\n\n0.3 (2011-03-04)\n----------------\n\n* ``add_error_class`` filter.\n\n0.2.1 (2011-02-03)\n------------------\n\n* Attributes customized in widgets are preserved;\n* no more extra whitespaces;\n* tests;\n\n0.1 (2011-01-12)\n----------------\n\nInitial release.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/kmike/django-widget-tweaks/",
    "keywords": null,
    "license": "MIT license",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-widget-tweaks",
    "package_url": "https://pypi.org/project/django-widget-tweaks/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-widget-tweaks/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/kmike/django-widget-tweaks/"
    },
    "release_url": "https://pypi.org/project/django-widget-tweaks/1.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Tweak the form field rendering in templates, not in python-level form definitions.",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12560175,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "966ea364e3381421780f5b155da1cde05d689862b1da60527d66c634857053b9",
        "md5": "b8c5e7458e4421496c308973c15396cf",
        "sha256": "b85e673c235510b83b265af6e6eaea59a241c8f532ef1fa237bb183d162f2271"
      },
      "downloads": -1,
      "filename": "django-widget-tweaks-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b8c5e7458e4421496c308973c15396cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8680,
      "upload_time": "2013-04-04T19:29:16",
      "upload_time_iso_8601": "2013-04-04T19:29:16.070796Z",
      "url": "https://files.pythonhosted.org/packages/96/6e/a364e3381421780f5b155da1cde05d689862b1da60527d66c634857053b9/django-widget-tweaks-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}