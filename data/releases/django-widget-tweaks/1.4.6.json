{
  "info": {
    "author": "Mikhail Korobov",
    "author_email": "kmike84@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "====================\ndjango-widget-tweaks\n====================\n\n.. image:: https://jazzband.co/static/img/badge.svg\n   :target: https://jazzband.co/\n   :alt: Jazzband\n\n.. image:: https://img.shields.io/pypi/v/django-widget-tweaks.svg\n   :target: https://pypi.python.org/pypi/django-widget-tweaks\n   :alt: PyPI Version\n\n.. image:: https://img.shields.io/travis/jazzband/django-widget-tweaks/master.svg\n   :target: http://travis-ci.org/jazzband/django-widget-tweaks\n   :alt: Build Status\n\n\nTweak the form field rendering in templates, not in python-level\nform definitions. Altering CSS classes and HTML attributes is supported.\n\nThat should be enough for designers to customize field presentation (using\nCSS and unobtrusive javascript) without touching python code.\n\nLicense is MIT.\n\nInstallation\n============\n\nYou can get Django Widget Tweaks by using pip::\n\n    $ pip install django-widget-tweaks\n\nTo enable `widget_tweaks` in your project you need to add it to `INSTALLED_APPS` in your projects\n`settings.py` file::\n\n    INSTALLED_APPS = [\n        ...\n        'widget_tweaks',\n        ...\n    ]\n\nUsage\n=====\n\nThis app provides two sets of tools that may be used together or standalone:\n\n1. a ``render_field`` template tag for customizing form fields by using an\n   HTML-like syntax.\n2. several template filters for customizing form field HTML attributes and CSS\n   classes\n\nThe ``render_field`` tag should be easier to use and should make form field\ncustomizations much easier for designers and front-end developers.\n\nThe template filters are more powerful than the ``render_field`` tag, but they\nuse a more complex and less HTML-like syntax.\n\nrender_field\n------------\n\nThis is a template tag that can be used as an alternative to aforementioned\nfilters.  This template tag renders a field using a syntax similar to plain\nHTML attributes.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- change input type (e.g. to HTML5) -->\n    {% render_field form.search_query type=\"search\" %}\n\n    <!-- add/change several attributes -->\n    {% render_field form.text rows=\"20\" cols=\"20\" title=\"Hello, world!\" %}\n\n    <!-- append to an attribute -->\n    {% render_field form.title class+=\"css_class_1 css_class_2\" %}\n\n    <!-- template variables can be used as attribute values -->\n    {% render_field form.text placeholder=form.text.label %}\n\n    <!-- double colon -->\n    {% render_field form.search_query v-bind::class=\"{active:isActive}\" %}\n\n\nFor fields rendered with ``{% render_field %}`` tag it is possible\nto set error class and required fields class by using\n``WIDGET_ERROR_CLASS`` and  ``WIDGET_REQUIRED_CLASS`` template variables::\n\n    {% with WIDGET_ERROR_CLASS='my_error' WIDGET_REQUIRED_CLASS='my_required' %}\n        {% render_field form.field1 %}\n        {% render_field form.field2 %}\n        {% render_field form.field3 %}\n    {% endwith %}\n\nYou can be creative with these variables: e.g. a context processor could\nset a default CSS error class on all fields rendered by\n``{% render_field %}``.\n\n\nattr\n----\nAdds or replaces any single html attribute for the form field.\n\nExamples::\n\n    {% load widget_tweaks %}\n\n    <!-- change input type (e.g. to HTML5) -->\n    {{ form.search_query|attr:\"type:search\" }}\n\n    <!-- add/change several attributes -->\n    {{ form.text|attr:\"rows:20\"|attr:\"cols:20\"|attr:\"title:Hello, world!\" }}\n\n    <!-- attributes without parameters -->\n    {{ form.search_query|attr:\"autofocus\" }}\n\n\n    <!-- attributes with double colon Vuejs output: v-bind:class=\"{active:ValueEnabled}\" -->\n    {{ form.search_query|attr:\"v-bind::class:{active:ValueEnabled}\" }}\n\n\nadd_class\n---------\n\nAdds CSS class to field element. Split classes by whitespace in order to add\nseveral classes at once.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- add 2 extra css classes to field element -->\n    {{ form.title|add_class:\"css_class_1 css_class_2\" }}\n\nset_data\n--------\n\nSets HTML5 data attribute ( http://ejohn.org/blog/html-5-data-attributes/ ).\nUseful for unobtrusive javascript. It is just a shortcut for 'attr' filter\nthat prepends attribute names with 'data-' string.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- data-filters:\"OverText\" will be added to input field -->\n    {{ form.title|set_data:\"filters:OverText\" }}\n\nappend_attr\n-----------\n\nAppends attribute value with extra data.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- add 2 extra css classes to field element -->\n    {{ form.title|append_attr:\"class:css_class_1 css_class_2\" }}\n\n'add_class' filter is just a shortcut for 'append_attr' filter that\nadds values to the 'class' attribute.\n\n\nremove_attr\n-----------\nRemoves any single html attribute for the form field.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- removes autofocus attribute from field element -->\n    {{ form.title|remove_attr:\"autofocus\" }}\n\n\nadd_label_class\n---------------\n\nThe same as `add_class` but adds css class to form labels.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- add 2 extra css classes to field label element -->\n    {{ form.title|add_label_class:\"label_class_1 label_class_2\" }}\n\n\nadd_error_class\n---------------\n\nThe same as 'add_class' but adds css class only if validation failed for\nthe field (field.errors is not empty).\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- add 'error-border' css class on field error -->\n    {{ form.title|add_error_class:\"error-border\" }}\n\n\nadd_error_attr\n--------------\n\nThe same as 'attr' but sets an attribute only if validation failed for\nthe field (field.errors is not empty). This can be useful when dealing\nwith accessibility::\n\n    {% load widget_tweaks %}\n\n    <!-- add aria-invalid=\"true\" attribute on field error -->\n    {{ form.title|add_error_attr:\"aria-invalid:true\" }}\n\nadd_required_class\n------------------\n\nThe same as 'add_error_class' adds css class only for required field.\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <!-- add 'is-required' css class on field required -->\n    {{ form.title|add_required_class:\"is-required\" }}\n\n\nfield_type and widget_type\n--------------------------\n\n``'field_type'`` and ``'widget_type'`` are template filters that return\nfield class name and field widget class name (in lower case).\n\nExample::\n\n    {% load widget_tweaks %}\n\n    <div class=\"field {{ field|field_type }} {{ field|widget_type }} {{ field.html_name }}\">\n        {{ field }}\n    </div>\n\nOutput::\n\n    <div class=\"field charfield textinput name\">\n        <input id=\"id_name\" type=\"text\" name=\"name\" maxlength=\"100\" />\n    </div>\n\n\nMixing render_field and filters\n===============================\n\nThe render_field tag and filters mentioned above can be mixed.\n\nExample::\n\n    {% render_field form.category|append_attr:\"readonly:readonly\" type=\"text\" placeholder=\"Category\" %}\n\n\nreturns::\n\n    <input name=\"category\" placeholder=\"Profession\" readonly=\"readonly\" type=\"text\">\n\n\nFilter chaining\n===============\n\nThe order django-widget-tweaks filters apply may seem counter-intuitive\n(leftmost filter wins)::\n\n    {{ form.simple|attr:\"foo:bar\"|attr:\"foo:baz\" }}\n\nreturns::\n\n    <input foo=\"bar\" type=\"text\" name=\"simple\" id=\"id_simple\" />\n\nIt is not a bug, it is a feature that enables creating reusable templates\nwith overridable defaults.\n\nReusable field template example::\n\n    {# inc/field.html #}\n    {% load widget_tweaks %}\n    <div>{{ field|attr:\"foo:default_foo\" }}</div>\n\nExample usage::\n\n    {# my_template.html #}\n    {% load widget_tweaks %}\n    <form method='POST' action=''> {% csrf_token %}\n        {% include \"inc/field.html\" with field=form.title %}\n        {% include \"inc/field.html\" with field=form.description|attr:\"foo:non_default_foo\" %}\n    </form>\n\nWith 'rightmost filter wins' rule it wouldn't be possible to override\n``|attr:\"foo:default_foo\"`` in main template.\n\nContributing\n============\n\nIf you've found a bug, implemented a feature or have a suggestion,\ndo not hesitate to contact me, fire an issue or send a pull request.\n\n* Source code: https://github.com/jazzband/django-widget-tweaks/\n* Bug tracker: https://github.com/jazzband/django-widget-tweaks/issues\n\nTesting\n-------\n\nMake sure you have `tox <http://tox.testrun.org/>`_ installed, then type\n\n::\n\n    tox\n\nfrom the source checkout.\n\nNOT SUPPORTED\n=============\n\nMultiWidgets: SplitDateTimeWidget, SplitHiddenDateTimeWidget\n\n\nChanges\n=======\n\n\n1.4.7 (2020-03-10)\n------------------\n\n* Fix Travis deployment to Jazzband site\n\n\n1.4.6 (2020-03-09)\n------------------\n\n* Feature remove attribute from field\n* Added documentation for remove_attr feature\n* Reformat code with black for PEP8 compatibility \n* More consistent tox configuration\n* adding a new templatetag, unittest and documentation\n* Deprecate Python 2.7 support\n* Use automatic formatting for all files\n\n\n1.4.5 (2019-06-08)\n------------------\n\n* Fix rST formatting errors.\n\n\n1.4.4 (2019-06-05)\n------------------\n\n* Add support for type attr.\n* Add Python 3.7 and drop Python 3.3 support.\n* Add support for double colon syntax.\n\n\n1.4.3 (2018-09-6)\n------------------\n\n* Added add_label_class filter for CSS on form labels\n* Removed compatibility code for unsupported Django versions\n* Fixed support for non-value attributes in Django < 1.8\n* Support non-value attributes in HTML5 by setting their value to True\n\n\n1.4.2 (2018-03-19)\n------------------\n\n* update readme to make installation more clear\n* shallow copy field before updating attributes\n* drop Python 2.6 and Python 3.2 support\n* always cast the result of render to a string\n* fix import for django >= 2.0\n* moved to jazzband\n\n\n1.4.1 (2015-06-29)\n------------------\n\n* fixed a regression in django-widget-tweaks v1.4\n  (the field is no longer deep copied).\n\n1.4 (2015-06-27)\n----------------\n\n* Django 1.7, 1.8 and 1.9 support;\n* setup.py is switched to setuptools;\n* testing improvements;\n* Python 3.4 support is added;\n* Python 2.5 is not longer supported;\n* bitbucket repository is no longer supported (development is moved to github).\n\n1.3 (2013-04-05)\n----------------\n\n* added support for ``WIDGET_ERROR_CLASS`` and  ``WIDGET_REQUIRED_CLASS``\n  template variables that affect ``{% render_field %}``.\n\n1.2 (2013-03-23)\n----------------\n\n* new ``add_error_attr`` template filter;\n* testing improvements.\n\n1.1.2 (2012-06-06)\n------------------\n\n* support for template variables is added to ``render_field`` tag;\n* new ``field_type`` and ``widget_type`` filters.\n\n1.1.1 (2012-03-22)\n------------------\n\n* some issues with ``render_field`` tag are fixed.\n\n1.1 (2012-03-22)\n----------------\n\n* ``render_field`` template tag.\n\n1.0 (2012-02-06)\n----------------\n\n* filters return empty strings instead of raising exceptions if field is missing;\n* test running improvements;\n* python 3 support;\n* undocumented 'behave' filter is removed.\n\n0.3 (2011-03-04)\n----------------\n\n* ``add_error_class`` filter.\n\n0.2.1 (2011-02-03)\n------------------\n\n* Attributes customized in widgets are preserved;\n* no more extra whitespaces;\n* tests;\n\n0.1 (2011-01-12)\n----------------\n\nInitial release.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jazzband/django-widget-tweaks",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-widget-tweaks",
    "package_url": "https://pypi.org/project/django-widget-tweaks/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-widget-tweaks/",
    "project_urls": {
      "Homepage": "https://github.com/jazzband/django-widget-tweaks"
    },
    "release_url": "https://pypi.org/project/django-widget-tweaks/1.4.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tweak the form field rendering in templates, not in python-level form definitions.",
    "version": "1.4.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12560175,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4ec9228962cd0ee306d3aff7c831b1d09508deee07b2438a76f6961c12a5464",
        "md5": "9778bb52138fee1543ed87f1cbe6655c",
        "sha256": "a4ab4877744238e493c162a1bde2ebcae499d338e45072ebf5569c0664644bf9"
      },
      "downloads": -1,
      "filename": "django_widget_tweaks-1.4.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9778bb52138fee1543ed87f1cbe6655c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 11435,
      "upload_time": "2020-03-11T15:12:05",
      "upload_time_iso_8601": "2020-03-11T15:12:05.578936Z",
      "url": "https://files.pythonhosted.org/packages/a4/ec/9228962cd0ee306d3aff7c831b1d09508deee07b2438a76f6961c12a5464/django_widget_tweaks-1.4.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5bd7af23926bde75af7828621d1b045cf54955206c999b2b63cfceaa0d60dad",
        "md5": "e03ce7f8d596715140012ee7c2cede9d",
        "sha256": "bb81ca73ff17080192801c9bf3abba3b70d44ea0f1fcfd57778edb75f387c82e"
      },
      "downloads": -1,
      "filename": "django-widget-tweaks-1.4.6.tar.gz",
      "has_sig": false,
      "md5_digest": "e03ce7f8d596715140012ee7c2cede9d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11398,
      "upload_time": "2020-03-11T15:12:25",
      "upload_time_iso_8601": "2020-03-11T15:12:25.262876Z",
      "url": "https://files.pythonhosted.org/packages/b5/bd/7af23926bde75af7828621d1b045cf54955206c999b2b63cfceaa0d60dad/django-widget-tweaks-1.4.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}