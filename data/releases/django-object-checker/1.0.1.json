{
  "info": {
    "author": "Adam ≈Ω√∫rek",
    "author_email": "adamzurek14@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# django-object-checker\n\n[![codecov](https://codecov.io/gh/zurek11/django-object-checker/branch/master/graph/badge.svg)](https://codecov.io/gh/zurek11/django-object-checker)\n\nHello. I'm just an abstract object üì¶ and I would be very glad to have user authorization because I hate criminals ü¶π‚Äç‚ôÇÔ∏è like pedophiles, robbers, hackers and so on.\n\n## Introduction\n\nProject django-object-checker extends standard django role base access control to be able to check individual object types.\n\nMain purpose of this extended authorization system is to maintain control for each objects individually with modular solution.\n\n## Installation\n\n```python\n# pip\npip install django-object-checker\n\n# pipenv\npipenv install django-object-checker\n\n# poetry\npoetry add django-object-checker\n```\n\n## Setup\n\n#### Just add checkers module path to `settings.OBJECT_CHECKERS_MODULE`:\n\n> The path is path to the module, where you going to implement all your checkers.\n> This is required for our BaseObjectChecker to be able to find his subclasses.\n\n```python\nOBJECT_CHECKERS_MODULE = 'app.checkers'\n```\n\n## Example\n\n#### 1. Create module according to specified path in settings\n\n#### 2. Create your own RBAC ObjectChecker or ABAC ObjectChecker class with checker method\n\n> Valid check methods are only these, which name starts with `check_`.\n> So if you want to implement your custom methods which you want to be ignored by CheckingManager your hands are free.\n\n##### RbacChecker\n\n---\n\n```python\nfrom django.contrib.auth.models import Group, User\n\nfrom object_checker.base_object_checker import RbacChecker\n\n\nclass MyObjectChecker(RbacChecker):\n    @staticmethod\n    def check_my_object(role: Group, user: User, obj):\n        result = False\n\n        if role.name == 'manager':\n            result = True\n\n        return result\n```\n\n##### AbacChecker\n\n---\n\n```python\nfrom django.contrib.auth.models import User\n\nfrom object_checker.base_object_checker import AbacChecker\n\n\nclass MyObjectChecker(AbacChecker):\n    @staticmethod\n    def check_my_object(user: User, obj):\n        if user.has_specific_attribute:\n            return True\n        return False\n```\n\n#### 3. Add new object check class to module `__init__.py`\n\n```python\nfrom app.checkers.my_object_checker import MyObjectChecker\n```\n\n#### 4. Example usage of your custom object checker in your project\n\n> Method to check is `has_object_permission` and has three arguments:\n> 1. name of check method\n> 2. user object\n> 3. object/objects to be checked\n\n```python\nfrom object_checker.base_object_checker import has_object_permission\n\nif has_object_permission('check_my_object', user, my_object):\n    print('User has access to this/these object/objects.')\nelse:\n    print('User has NOT access to this/these object/objects.')\n```\n\n---\nMade with ‚ù§ by [Adam ≈Ω√∫rek](https://zurek11.github.io/) & [BACKBONE s.r.o.](https://www.backbone.sk/en/)\n\n## 0.1.0 : 2020-09-23\n\n- Initial release\n\n## 0.1.1 : 2020-10-05\n\n- üåß Changed Django version requirement from 3.0.* to >= 2.0\n\n## 0.1.2 : 2020-10-15\n\n- üò∫ Fixed issue, when user has no role, but has permissions and object_checker returned false.\n\n## 0.1.3 : 2020-11-02\n\n- üêÑ Updated version in pyproject.toml file and fixed date in CHANGELOG.md.\n\n## 1.0.0 : 2020-11-24\n\n- üêÇ Added possibility to implement checkers by RBAC or ABAC standards.\n\n## 1.0.1 : 2022-05-23\n\n- üêï‚Äçü¶∫ Added possibility to write custom classes (inherited from ABAC and RBAC).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zurek11/django-object-checker",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-object-checker",
    "package_url": "https://pypi.org/project/django-object-checker/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-object-checker/",
    "project_urls": {
      "Homepage": "https://github.com/zurek11/django-object-checker"
    },
    "release_url": "https://pypi.org/project/django-object-checker/1.0.1/",
    "requires_dist": [
      "Django (>=2.0)"
    ],
    "requires_python": "",
    "summary": "Hello. I'm just an abstract object üì¶ and I would be very glad to have user authorization because I hate criminals ü¶π‚Äç‚ôÇÔ∏è like pedophiles, robbers, hackers and so on.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13930188,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1bac02f08dd1c20b7be3cf39d1532d707394d4d579b227a37f9a5b487b456d8",
        "md5": "09b0957655b0d608332b6132ec84c00b",
        "sha256": "f742f0fde8e8f198db49ad9f47084d7495c056aa25025d2aa17379792f78eaab"
      },
      "downloads": -1,
      "filename": "django_object_checker-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "09b0957655b0d608332b6132ec84c00b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5331,
      "upload_time": "2022-05-23T14:56:04",
      "upload_time_iso_8601": "2022-05-23T14:56:04.280076Z",
      "url": "https://files.pythonhosted.org/packages/b1/ba/c02f08dd1c20b7be3cf39d1532d707394d4d579b227a37f9a5b487b456d8/django_object_checker-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6be1778210f00d9950e95578ff0b66b9d5095d45e011d032deb8159aeffdbe11",
        "md5": "08e739859aaef05a4aa4a7dd633effc3",
        "sha256": "e40e2a9e13928ea8d31604aca45b2488634ce6150ea4c70e21ebe6ffe8a8c37f"
      },
      "downloads": -1,
      "filename": "django-object-checker-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "08e739859aaef05a4aa4a7dd633effc3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4882,
      "upload_time": "2022-05-23T14:56:06",
      "upload_time_iso_8601": "2022-05-23T14:56:06.860909Z",
      "url": "https://files.pythonhosted.org/packages/6b/e1/778210f00d9950e95578ff0b66b9d5095d45e011d032deb8159aeffdbe11/django-object-checker-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}