{
  "info": {
    "author": "Daniel Cavalli",
    "author_email": "daniel@cavalli.dev",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# DataScience Suite\nEste pacote tem o objetivo de agregar os diversos códigos autorais que criamos para todo o pipeline de produção dos modelos.\nAtualmente é apenas um teste e possui apenas a library dssuite(ring.py) com algumas funções que facilitam leitura, tuning e avaliação dos modelos.\n\n## Documentação rudimentar\n### SampleStress(Classe)\n Classe que permite fazer brute force de dataset para identificar melhor amostra de treino, razão de True/False e melhores Hyperparametros.\n É composta por 3 funções construtoras e utiliza várias outras presentes dentro desse pacote.\n Para avaliar o modelo é possível usar função de scoring do próprio Sklearn ou criar o seu próprio parametro de avaliação. Para fazer isso, ver maiores informações na documentação do sklearn: https://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html\n Dentro desse pacote temos a custom_confusion que foi feita para ser usada no maker_scorer do SKlearn\n\n Algumas explicações de parâmetros da classe:\n - **model:** Modelo a ser otimizado\n - **iterations**: Número de rodadas de iteração a serem realizadas, quanto mais rodadas mais tempo vai demorar!(exponencial)\n - **ratio**: ritmo de evolução da proporção True/False entre as iterações. Ex.: Iterações = 10, ratio = 1 então ao todo 10 tamanhos de amostras serão testadas e para cada uma dessas 10 amostras, 10 razões de proporção entre True/False vão ser testadas. Total de rodadas de otimização do exemplo: 100\n - **scorer**: Aceita 'recall', 'precision', 'f1' e etc.. Aceita função própria.\n - **regression**: A classe de sample_stressing, por padrão, foca em modelos de classificação porém é possível usar ela para modelos de regressão também.\n - **drop** : Lista de colunas a serem dropadas do dataset final, se não existir nenhuma só ignorar.\n\n### Resample\nFunção usada pela classe SampleStress para gerar as amostras com diferentes tamanhos e razões de target\n```python\ndef resample(dataframe, sample_ratio=1, sample_size=0):\n    header = dataframe.columns\n    positives = (dataframe.loc[dataframe['target']==1]).to_numpy()\n    pos_ratio = int(sample_size/(sample_ratio+1))\n    if sample_size>0:\n        if pos_ratio < len(positives):\n            positives = positives[:pos_ratio]\n        else:\n            iterations = int(pos_ratio/len(positives))\n            r = int(((pos_ratio/len(positives)) % 1)*len(positives))\n            temp = positives\n            for i in range(iterations-1):\n                temp = np.append(temp, positives, axis=0)\n            positives = np.append(temp, positives[:r], axis=0)\n        sample_size=len(positives)\n    else:\n        sample_size = len(positives)\n    positives = pd.DataFrame(positives)\n    positives.columns = header\n    neg_ratio = sample_size*sample_ratio\n    negatives = (dataframe.loc[dataframe['target']==0])[:neg_ratio].to_numpy()\n    negatives = pd.DataFrame(negatives)\n    negatives.columns = header\n    return negatives.append(positives).reset_index().drop(columns=['index'])\n```\n\n### DataBuilder\nPara datasets muito grandes, construí essa classe que tem duas funções que iteram pelo dataframe e fazem o tratamento dos dados para tornar o dataset mais leve e reduzir o consumo de memória ram. Isso acelera muito o tempo de manipulação dos dados pois impede que os dados vazem para armazenamento mais lento como HD/SSD\n\nA classe ainda está \"especializada\" para o caso que foi construída, isso é rápido de ajeitar e é o próximo passo para ela. Por esse motivo ainda não vou colocar mais detalhes.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danielcavalli/ds-suite",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ds-suite",
    "package_url": "https://pypi.org/project/ds-suite/",
    "platform": "",
    "project_url": "https://pypi.org/project/ds-suite/",
    "project_urls": {
      "Homepage": "https://github.com/danielcavalli/ds-suite"
    },
    "release_url": "https://pypi.org/project/ds-suite/1.0.1/",
    "requires_dist": [
      "awswrangler",
      "scikit-learn"
    ],
    "requires_python": "",
    "summary": "A brute-force based way of fiding the best ratio for your data. Focused on Tree models.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10715577,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa2666f0abecd253a754b0091893bf1e3d5d3d2bc45daafb6466f910548a78ab",
        "md5": "9c7c5cc5465324cedc82b1cd0e4702fe",
        "sha256": "1dd79ea3fb09d67b6d17daf2aabf7db4e09fe31c02ef67d2388c8907dc898b4c"
      },
      "downloads": -1,
      "filename": "ds_suite-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9c7c5cc5465324cedc82b1cd0e4702fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4015,
      "upload_time": "2021-06-16T17:51:00",
      "upload_time_iso_8601": "2021-06-16T17:51:00.306479Z",
      "url": "https://files.pythonhosted.org/packages/fa/26/66f0abecd253a754b0091893bf1e3d5d3d2bc45daafb6466f910548a78ab/ds_suite-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0a3d884ad61f4856e0620933f256eaf7fe61024ff8a8440766ac0df96d7a0f0",
        "md5": "b712ba4af6ca13fb306e9a2eee1f574d",
        "sha256": "72f52d1665671951227dd42582ad14c0703290a34833443313208da3bfd5262d"
      },
      "downloads": -1,
      "filename": "ds-suite-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b712ba4af6ca13fb306e9a2eee1f574d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3238,
      "upload_time": "2021-06-16T17:51:02",
      "upload_time_iso_8601": "2021-06-16T17:51:02.115024Z",
      "url": "https://files.pythonhosted.org/packages/f0/a3/d884ad61f4856e0620933f256eaf7fe61024ff8a8440766ac0df96d7a0f0/ds-suite-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}