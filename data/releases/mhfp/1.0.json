{
  "info": {
    "author": "Daniel Probst",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MHFP\nMHFP6 (MinHash fingerprint, up to six bonds) is a molecular fingerprint which encodes detailed substructures using the extended connectivity principle of ECFP in a fundamentally different manner, increasing the performance of exact nearest neighbor searches in benchmarking studies and enabling the application of locality sensitive hashing (LSH) approximate nearest neighbor search algorithms. To describe a molecule, MHFP6 extracts the SMILES of all circular substructures around each atom up to a diameter of six bonds and applies the MinHash method to the resulting set. MHFP6 outperforms ECFP4 in benchmarking analog recovery studies. Furthermore, MHFP6 outperforms ECFP4 in approximate nearest neighbor searches by two orders of magnitude in terms of speed, while decreasing the error rate.\n\n## Dependencies\nMHFP requires Python 3.x.\n\nMHFP requires the cheminformatics library RDKit.\n\n## Installation\nMHFP can be installed using the Python packet manager pip:\n```bash\npip install mhfp\n```\n\n## Usage\nUsage is straightforward:\n```Python\nfrom mhfp.encoder import MHFPEncoder\n\nmhfp_encoder = MHFPEncoder()\n\nfp_a = mhfp_encoder.encode('CCOC1=C(C=C(C=C1)S(=O)(=O)N(C)C)C2=NC(=O)C3=C(N2)C(=NN3C)C(C)(C)C')\nfp_b = mhfp_encoder.encode('CCCC1=NN(C2=C1NC(=NC2=O)C3=C(C=CC(=C3)S(=O)(=O)N4CCN(CC4)C)OCC)C')\nfp_c = mhfp_encoder.encode('O=C(OC)C(C1CCCCN1)C2=CC=CC=C2')\n\nprint(MHFPEncoder.distance(fp_a, fp_a))\nprint(MHFPEncoder.distance(fp_a, fp_b))\nprint(MHFPEncoder.distance(fp_a, fp_c))\nprint(MHFPEncoder.distance(fp_b, fp_c))\n\n#> 0.0\n#> 0.45849609375\n#> 0.97998046875\n#> 0.97216796875\n```\n\n### LSH Forest\nAs the fingerprints are created using the locality sensitive hashing scheme MinHash, they are ready to be used with LSH-based algorithms:\n```Python\nfrom mhfp.encoder import MHFPEncoder\nfrom mhfp.lsh_forest import LSHForestHelper\n\nmhfp_encoder = MHFPEncoder()\n\nfp_a = mhfp_encoder.encode('CCOC1=C(C=C(C=C1)S(=O)(=O)N(C)C)C2=NC(=O)C3=C(N2)C(=NN3C)C(C)(C)C')\nfp_b = mhfp_encoder.encode('CCCC1=NN(C2=C1NC(=NC2=O)C3=C(C=CC(=C3)S(=O)(=O)N4CCN(CC4)C)OCC)C')\nfp_c = mhfp_encoder.encode('O=C(OC)C(C1CCCCN1)C2=CC=CC=C2')\nfp_q = mhfp_encoder.encode('COC1=C(C=C(C=C1)S(=O)(O)N(C)C)C2=NC(=O)C3=C(N2)C(=NN3C)C(C)(C)C')\n\nlsh_forest_helper = LSHForestHelper()\n\nfps = [fp_a, fp_b, fp_c]\n\nfor i, fp in enumerate(fps):\n    lsh_forest_helper.add(i, fp)\n\nlsh_forest_helper.index()\n\nprint(lsh_forest_helper.query(fp_q, 1, fps))\n\n#> [0]\n```\n\n## Documentation\n### MHFPEncoder\nThe class for encoding SMILES and RDKit molecule instances as MHFP fingerprints.\n\n```Python\n__init__(n_permutations = 2048, seed = 42)\n```\n| Parameter | Default | Description |\n|---|---|---|\n| n_permutations | ```2048``` | Analogous to the number of bits ECFP fingerprints are folded into. Higher is better, lower is less exact. |\n| seed | ```42``` | The seed for the MinHash operation. Has to be the same for comparable fingerprints. |\n\n```Python\nMHFPEncoder.encode(in_smiles, radius = 3, rings = True, kekulize = True, sanitize = True)\n```\n| Parameter | Default | Description |\n|---|---|---|\n| in_smiles | | The input SMILES. |\n| radius | ```3``` | Analogous to the radius for the Morgan fingerprint. The default radius 3 encodes SMILES to MHFP6. |\n| rings | ```True``` | Whether rings in the molecule are included in the fingerprint. As a radii of 3 fails to encode rings and there is no way to determine ring-membership in a substructure SMILES, this considerably increases performance. |\n| kekulize | ```True```  | Whether or not to kekulize the molecule before extracting substructure SMILES. |\n| sanitize | ```True```  | Whether or not to sanitize the molecule (using RDKit) before extracting substructure SMILES. |\n\n**Returns** a `numpy.ndarray` containing the fingerprint hashes.\n\n\n```Python\nMHFPEncoder.encode_mol(in_mol, radius = 3, rings = True, kekulize = True)\n```\n| Parameter | Default | Description |\n|---|---|---|\n| in_mol | | The input RDKit molecule instance. |\n| radius | ```3``` | Analogous to the radius for the Morgan fingerprint. The default radius 3 encodes SMILES to MHFP6. |\n| rings | ```True``` | Whether rings in the molecule are included in the fingerprint. As a radii of 3 fails to encode rings and there is no way to determine ring-membership in a substructure SMILES, this considerably increases performance. |\n| kekulize | ```True```  | Whether or not to kekulize the molecule before extracting substructure SMILES. |\n\n**Returns** a `numpy.ndarray` containing the fingerprint hashes.\n\n```Python\nMHFPEncoder.distance(a, b)\n```\n| Parameter | Default | Description |\n|---|---|---|\n| a | | A `numpy.ndarray` containing fingerprint hashes. |\n| b | | A `numpy.ndarray` containing fingerprint hashes. |\n\n**Returns** a `float` representing the distance between two MHFP encoded molecules.\n\n### LSHForestHelper\nIf you know your way around Python, I suggest you use the ```LSHForest``` class directly. See code for details.\n\n```Python\n__init__(dims = 2048, n_prefix_trees = 64)\n```\n| Parameter | Default | Description |\n|---|---|---|\n| dims | ```2048``` | **Has to be equal to the number of permutations** `n_permutations` **set when initializing** `MHFPEncoder` |\n| n_prefix_trees | ```64``` | The number of prefix trees. Lower number results in lower memory usage but less quality |\n\n```Python\nLSHForestHelper.add(key, mhfp):\n```\n| Parameter | Default | Description |\n|---|---|---|\n| key | | The key that will be retrieved by a query. It's recommended to use integers. |\n| mhfp | | The `numpy.ndarray` containing the fingerprint hashes. |\n\n```Python\nLSHForestHelper.index():\n```\n**Has to be run after adding entities and before running queries!**\n\n```Python\nMHFPEncoder.query(query_mhfp, k, data, kc=10)\n```\n| Parameter | Default | Description |\n|---|---|---|\n| query_mhfp | | A `numpy.ndarray` containing fingerprint hashes. |\n| k | | The number of nearest neighbors to be retrieved. |\n| data | | Data mapping keys to fingerprints. See LSH Forest example for details. |\n| kc | 10 | Initially k is multiplied by kc and k &middot; kc (ANN) results are returned. The top k are then selected from these k &middot; kc using linear scan. |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/reymond-group/mhfp",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mhfp",
    "package_url": "https://pypi.org/project/mhfp/",
    "platform": "",
    "project_url": "https://pypi.org/project/mhfp/",
    "project_urls": {
      "Homepage": "https://github.com/reymond-group/mhfp"
    },
    "release_url": "https://pypi.org/project/mhfp/1.0/",
    "requires_dist": [
      "pytest; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Molecular MHFP fingerprints for cheminformatics applications",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16884822,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "80a508b8f9e692853b81a6f1f70422f9dc2688e08c84099f9209c1008e944e69",
        "md5": "49eb7e93cbbe357f63b867b151a58b6a",
        "sha256": "86a635ba598dd220e8d40f36a7af0f0e995a57f9d6fbfec052742cefdae1a39b"
      },
      "downloads": -1,
      "filename": "mhfp-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "49eb7e93cbbe357f63b867b151a58b6a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8330,
      "upload_time": "2018-10-06T12:04:57",
      "upload_time_iso_8601": "2018-10-06T12:04:57.795377Z",
      "url": "https://files.pythonhosted.org/packages/80/a5/08b8f9e692853b81a6f1f70422f9dc2688e08c84099f9209c1008e944e69/mhfp-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d292543aef20e12da11925476d3eb13c0f00e087bc9327ad5b15e0d3cd3b3eb",
        "md5": "89fb5ed544602b3ced8cf39c0e279fc1",
        "sha256": "c65bfe9ec10f472f9c05e323d3a7a24b8275c35ecd6c0c38a14c6a412f4dbe52"
      },
      "downloads": -1,
      "filename": "mhfp-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "89fb5ed544602b3ced8cf39c0e279fc1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18848,
      "upload_time": "2018-10-06T12:04:59",
      "upload_time_iso_8601": "2018-10-06T12:04:59.463724Z",
      "url": "https://files.pythonhosted.org/packages/0d/29/2543aef20e12da11925476d3eb13c0f00e087bc9327ad5b15e0d3cd3b3eb/mhfp-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}