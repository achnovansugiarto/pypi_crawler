{
  "info": {
    "author": "David W Pettifor",
    "author_email": "dpettifo@nd.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django :: 2.2",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Django-Cog\nA [django-celery-beat](https://github.com/celery/django-celery-beat) extension to build pipelines of chronological stages and parallel tasks.\n\n## About\nUsing the Djano admin, this library allows you to create pipelines of multi-staged tasks.  Each pipeline is launched at a specific time, utilizing the `django-celery-beat` `CrontabSchedule` object to define the time of launch.  Once launched, the pipeline looks for the first stage(s) of parallel tasks.  Each task is submitted to a celery worker for completion.  Once all tasks of a stage complete, the stage is considered complete and any proceeding stages will launch (assuming all previous stages required are completed).\n\n### Pipelines\nA pipeline is a collection of stages.  It has a launch schedule tied to a `CronSchedule` that defines when the pipeline should be launched.  By default, a pipeline will not launch if it detects that a previous launch has not yet completed.\n\n### Stages\nA stage is a collection of tasks that can all be ran independently (and in parallel) of each other.  It can be dependent on any number of previous stages to be complete before launching, but will be launched upon the completion of all prerequisite stages.\n\nIf a stage has no prerequisite stages, it will be launched at the start of the Pipeline's launch.  You can have multiple stages run at the same time.\n\nUpon launching a stage, each task that belongs to it will be sent to the `celery` broker for execution.\n\n### Tasks and Cogs\n\n#### Cogs:\nA `Cog` is a registered python function that can be used in a task.  To register a function, use the `@cog` function decorator:\n```python\nfrom django_cog import cog\n\n@cog\ndef my_task():\n    # do something in a celery worker\n    pass\n```\n\n**NOTE**: These functions *must* be imported in your application's `__init__.py` file.  Otherwise the auto-discovery process will not find them.\n\nOnce Django starts, an auto-discovery process will find all functions with this decorator and create `Cog` records for them in the database.  This allows them to be reference in the Django admin.\n\n#### Tasks:\nOnce you have cogs registered, you can create a task.  Tasks are specific execution definitions for a cog, and are tied to a stage.  This allows you to run the same function through multiple stages, if needed.\n\n##### Parameters\nIf your function has parameters needed, you can set these in the Task creation.  See below for an example:\n\n```python\nfrom django_cog import cog\n\n@cog\ndef add(a, b):\n    # add the two numbers together\n    return a + b\n```\n\nThen in the Task Django admin page, set these variables in the `Arguments as JSON:` field:\n```json\n{\n    \"a\": 1,\n    \"b\": 2\n}\n```\n\n## Installation\n\n**IMPORTANT**: It is required that the library is installed and migrations ran PRIOR to registering functions as `cogs`.\nFirst install the library with:\n\n```bash\npip install django-cog\n```\n\nThen add it to your Django application's `INSTALLED_APPS` inside your `settings.py` file:\n```python\nINSTALLED_APPS = [\n    ...\n\n    # Django-Cog:\n    'django_cog.apps.DjangoCogConfig',\n\n    # Optional (recommended):\n    'django_celery_beat',\n]\n```\n\nLastly, run migrations:\n```python\npython manage.py migrate django_cog\n```\n\n#### Cog Registration\nOnce migrations complete, it is safe to register your functions using the `cog` decorator:\n```python\nfrom django_cog import cog\n\n@cog\ndef my_task():\n    # do something in a celery worker\n    pass\n```\n\n## Docker-Compose\n\nBelow is a sample docker-compose.yml segment to add the required services for Celery workers, Celery-Beat, and Redis:\n\n```yml\nversion: '3'\n\n# 3 name volumes are named here.\nvolumes:\n    volume_postgresdata:        # Store the postgres database data. Only linked with postgres.\n    volume_django_media:        # Store the Django media files. Volume is shared between djangoweb and nginx.\n    volume_django_static:       # Store the Django static files. Volume is shared between djangoweb and nginx.\n\nservices:\n    # Postgresql database settings.\n    postgresdb:\n        image: postgres:9.6-alpine\n        environment:\n            - POSTGRES_DB\n            - POSTGRES_USER\n            - POSTGRES_PASSWORD\n        restart: unless-stopped\n        volumes:\n            - volume_postgresdata:/var/lib/postgresql/data\n        ports:\n            - \"127.0.0.1:5432:5432\"\n        networks:\n            - backend\n\n    # Django settings.\n    djangoweb:\n        build:\n            context: .\n            args:\n                - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT:-production}\n        image: djangoapp:latest\n        networks:\n            - backend\n            - celery\n            - frontend\n        volumes:\n            - .:/app/\n            - volume_django_static:/var/staticfiles\n            - volume_django_media:/var/mediafiles\n        ports: # IMPORTANT: Make sure to use 127.0.0.1 to keep it local. Otherwise, this will be broadcast to the web.\n            - 127.0.0.1:8000:8000\n        depends_on:\n            - postgresdb\n            - mailhog\n        environment:\n            - POSTGRES_DB\n            - POSTGRES_USER\n            - POSTGRES_PASSWORD\n            - POSTGRES_HOST=postgresdb # Name of the postgresql service.\n            - POSTGRES_PORT\n            - DJANGO_SETTINGS_MODULE\n            - FORCE_SCRIPT_NAME\n            - DJANGO_ENVIRONMENT\n            - SECRET_KEY\n            - DJANGO_ALLOWED_HOSTS\n        links:\n            - \"postgresdb\"\n\n    # add redis as a message broker\n    redis:\n        image: \"redis:alpine\"\n        networks:\n            - celery\n\n    # celery worker process -- launches child celery processes equal to the number of available cores\n    celery:\n        build:\n            context: .\n            dockerfile: Dockerfile.celery\n            args:\n                - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT:-production}\n        command: celery -A django_cog worker -l info\n        image: djangoapp_celery:latest\n        volumes:\n            - .:/app/\n        environment:\n            - POSTGRES_DB\n            - POSTGRES_USER\n            - POSTGRES_PASSWORD\n            - POSTGRES_HOST=postgresdb # Name of the postgresql service.\n            - POSTGRES_PORT\n            - FORCE_SCRIPT_NAME\n            - DJANGO_ENVIRONMENT\n            - DJANGO_SETTINGS_MODULE\n            - SECRET_KEY\n            - DJANGO_ALLOWED_HOSTS\n        depends_on:\n            - postgresdb\n            - redis\n        networks:\n            - backend\n            - celery\n        links:\n            - \"postgresdb\"\n\n    # celery worker process -- launches child celery processes equal to the number of available cores\n    celerybeat:\n        build:\n            context: .\n            dockerfile: Dockerfile.celery\n            args:\n                - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT:-production}\n        command: celery -A django_cog beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler\n        image: djangoapp_celerybeat:latest\n        volumes:\n            - .:/app/\n        environment:\n            - POSTGRES_DB\n            - POSTGRES_USER\n            - POSTGRES_PASSWORD\n            - POSTGRES_HOST=postgresdb # Name of the postgresql service.\n            - POSTGRES_PORT\n            - FORCE_SCRIPT_NAME\n            - DJANGO_ENVIRONMENT\n            - DJANGO_SETTINGS_MODULE\n            - SECRET_KEY\n            - DJANGO_ALLOWED_HOSTS\n        depends_on:\n            - celery\n        networks:\n            - backend\n            - celery\n\nnetworks:\n    frontend:\n        name: djangocog_frontend\n    backend:\n        name: djangocog_backend\n    celery:\n        name: djangocog_celery\n```\n\nAnd the matching `Dockerfile.celery` (of which the `celery` and `celerybeat` services will build from):\n```dockerfile\nFROM python:3.8\nENV PYTHONUNBUFFERED 1\n\nARG DJANGO_ENVIRONMENT\n\n# Make the static/media folder.\nRUN mkdir /var/staticfiles\nRUN mkdir /var/mediafiles\n\n# Make a location for all of our stuff to go into\nRUN mkdir /app\n\n# Set the working directory to this new location\nWORKDIR /app\n\n# Add our Django code\nADD . /app/\n\nRUN pip install --upgrade pip\n\n# Install requirements for Django\nRUN pip install -r requirements/base.txt\nRUN pip install -r requirements/${DJANGO_ENVIRONMENT}.txt\nRUN pip install -r requirements/custom.txt\n\n# No need for an entry point as they are defined in the docker-compose.yml services\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/david-pettifor-nd/django_cog.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cog",
    "package_url": "https://pypi.org/project/django-cog/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cog/",
    "project_urls": {
      "Homepage": "https://github.com/david-pettifor-nd/django_cog.git"
    },
    "release_url": "https://pypi.org/project/django-cog/1.1.0/",
    "requires_dist": [
      "celery",
      "django-celery-beat",
      "django-nested-inline (>=0.4.2)"
    ],
    "requires_python": "",
    "summary": "Django library for launching pipelines of multiple stages and parallel tasks.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17498748,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "953bfbecc36a91cede3e1858dddcb9131cc121340fa07ac94a0a074e283a3e78",
        "md5": "f2ce58605aeaabce22772e446d3dc3eb",
        "sha256": "7c958fe9cb98305e741b044c4c7fae84d19fc624b1491e30c74e4af3ecddc0a6"
      },
      "downloads": -1,
      "filename": "django_cog-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f2ce58605aeaabce22772e446d3dc3eb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11916,
      "upload_time": "2021-05-12T13:12:56",
      "upload_time_iso_8601": "2021-05-12T13:12:56.008851Z",
      "url": "https://files.pythonhosted.org/packages/95/3b/fbecc36a91cede3e1858dddcb9131cc121340fa07ac94a0a074e283a3e78/django_cog-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f39596a31f45da5178405c8afb74d3831ec4cfea49b350b3721c679155d193db",
        "md5": "b3c00ae4dc5a78d8698ea113eb9e6b22",
        "sha256": "8ec57227df84d86e030669431fdfa6ee8880211d9100c8b87386da2d2df02c56"
      },
      "downloads": -1,
      "filename": "django-cog-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b3c00ae4dc5a78d8698ea113eb9e6b22",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12957,
      "upload_time": "2021-05-12T13:12:56",
      "upload_time_iso_8601": "2021-05-12T13:12:56.969938Z",
      "url": "https://files.pythonhosted.org/packages/f3/95/96a31f45da5178405c8afb74d3831ec4cfea49b350b3721c679155d193db/django-cog-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}