{
  "info": {
    "author": "Joseph Moon",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "mappgene\n========\n\n[![DOI](https://zenodo.org/badge/367142630.svg)](https://zenodo.org/badge/latestdoi/367142630)\n\nmappgene is a SARS-CoV-2 variant calling pipeline designed for high-performance\nparallel computing. It mainly wraps iVar (https://github.com/andersen-lab/ivar)\nand LoFreq (https://github.com/CSB5/lofreq) variant callers, plus\nsnpEff/snpSift annotation tools.\n\nInputs: short-read paired-end Illumina RTA3 sequencing data in fastq format\n(gzip compressed) (e.g., `SAMPLE_R1.fastq.gz SAMPLE_R2.fastq.gz`)\n\nOutputs: variants in `.vcf` variant call format files, and snpEff/snpSift\ntabular text output\n\n## Quick Start\n\n```bash\nsingularity pull library://khyox/mappgene/image.sif:latest\ngit clone https://github.com/LLNL/mappgene.git\npip install git+file:///absolute/path/to/mappgene\nmappgene --container image.sif --outputs outputs samples/*fastq.gz\n```\n\n## Requirements\n\n* Python 3.7+\n* [Singularity](https://sylabs.io/guides/3.5/user-guide/index.html)\n\n## Installation\n\nWe recommend installing mappgene to a python3 virtualenv. We have found\nit useful to install in \"editable\" mode to easily customize and modify\nmappgene.\n\n```bash\npython3 -m venv mg\nsource mg/bin/activate\npip install -e git+file:///absolute/path/to/mappgene\n```\n\nDon't forget to download the corresponding singularity container!\nIt contains the pipeline components and dependencies.\n\n- iVar v1.3.2\n- LoFreq 2.1.5\n- See `mappgene/data/container/recipe.def` for more details\n\n```bash\nsingularity pull library://khyox/mappgene/image.sif:latest\n```\n\nOr go to <https://cloud.sylabs.io/library/khyox/mappgene/image.sif> and click\n\"Download\".\n\n### Example Testing\n\nCheck that mappgene works on your system by running the example input data,\nsourced from\n[here](https://github.com/cbg-ethz/V-pipe/tree/master/tests/data/sars-cov-2/pos_MN908947_3_1/20200729/raw_data).\n\n```bash\nmappgene --test\n```\n\n## Usage\n\nSee `mappgene -h` for a list of options and detailed usage. In short:\n\n```\nmappgene [OPTIONS] <SAMPLE1_R1.fastq.gz> <SAMPLE1_R2.fastq.gz> [SAMPLEN_R1.fastq.gz ...]\n```\n\nKey options:\n\n- `--container`: tell mappgene where the singularity container is\n- `--slurm`: use the slurm scheduler for processing samples in parallel\n- `--use_full_node`: 1 sample per node\n- `--primers_bp`: specify a bundled primer set to use\n- `--depth_cap`: sets `lofreq call -d` value (read no more than this many reads per position)\n- `--read_cutoff_bp`: sets `ivar trim -m` value (remove reads smaller than this after trimming)\n- `--variant_frequency`: sets `ivar variants -t` value (do not call variants below this frequency)\n\n## Instructions\n\n### Process multiple samples in parallel\n\nYou can specify multiple samples with specific paths or Unix-style globbing.\nReads must be gzip compressed (`.fastq.gz`).\n\nIf there are two input filenames with a matching sample name, plus `_R1`\nand `_R2`, then mappgene will assume they are a deinterleaved pair. For\ndeinterleaved reads, you must ensure:\n\n- first and second read files contain `_R1` and `_R2`, respectively\n- there is only one pair of read files per sample (no orphans, no multi-run\n  samples, samples from multi-sample subjects are treated separately)\n- read pairs appear together on the command line when expanding shell globs\n\n```\nmappgene <SAMPLE1>_R1.fastq.gz <SAMPLE1>_R2.fastq.gz [<SAMPLE2>_R1.fastq.gz <SAMPLE2>_R2.fastq.gz ...]\n```\n\n#### Interleaved samples\n\nIf the input filenames do not contain `_R1` or `_R2`, mappgene will probably\ninterpret the inputs as interleaved samples, and automatically deinterleave\nthem during processing.\n\n```\nmappgene <SAMPLE1.FASTQ.GZ> <SAMPLE2.FASTQ.GZ> <SAMPLE3.FASTQ.GZ>\nmappgene <SAMPLE_DIR>/*.fastq.gz\n```\n\n#### Slurm scheduling\n\nMultiple subjects can be run in parallel on HPC systems using the Slurm job\nscheduler.\n\n```\nmappgene --slurm -n 1 -b mybank -p mypartition <SAMPLE.FASTQ.GZ>\n```\n\n### Output\n\nBy default, results will be in `mappgene_outputs/<SAMPLE>`, or\nwherever specified by `--outputs`.\n\nKey output files:\n\n```bash\nmappgene_outputs/\n  <SAMPLE>/\n    worker.stdout  # (log file capturing stdout)\n    ivar_outputs/\n      <SAMPLE>.ivar.snpEff.vcf  # (ivar variant calls)\n      <SAMPLE>.ivar.snpSift.txt\n      <SAMPLE>.ivar.lofreq.snpEff.vcf  # (lofreq variant calls)\n      <SAMPLE>.ivar.lofreq.snpSift.txt\n```\n\n## Known bugs and quirks\n\n- The `--flux` option to use the Flux scheduler is broken.\n- Only `fastp` respects mappgene's `--threads` option. `bwa mem` and `lofreq`\n  use different numbers of threads. Additionally, if `--use_full_node` is not\n  specified, mappgene will try to run multiple samples per node.\n- `fastp`, `snpEff`, `snpSift` write to disk outside of the current working\n  directory—by default to the user's home—which may be on a different\n  filesystem not intended for parallel I/O.  This output is typically not used,\n  but it can still clobber or corrupt existing files, or impact cluster\n  performance for all users.\n- Viral-recon's `ivar_variants_to_vcf.py` attempts to group consecutive SNPs in\n  the same codon into single multinucleotide variants. Previous combinations of\n  `ivar` and viral-recon script versions have introduced runtime errors\n  (resolved by using patched `dev` branch versions).\n- Running multiple instances of mappgene in the same working directory is **not\n  recommended**, as a common temporary directory is used, resulting in scary\n  warnings, possible errors, and potentially corrupted runs.\n- `mappgene` assumes quality scores are RTA3 \"score category\" labels (error,\n  low, medium, high) for base calls rather than a continuous numeric score.\n  Although the quality score is supposed to reflect an average score for each\n  base call category, mappgene takes a conservative approach and adjusts medium\n  and high scores to the lower bound of those categories, i.e., Q37->Q30 and\n  Q25->Q20. This affects `lofreq`, a quality-aware variant caller, by making it\n  require more evidence (i.e., depth of read coverage) to call variants vs.\n  sequencing errors.\n\nLicense\n-------\n\nMappgene is distributed under the terms of the BSD-3 License.\n\nLLNL-CODE-821512\n\n____\nYou may be interested in\n[MappgeneSummary](https://github.com/LLNL/mappgenesummary), a package for the\nanalysis and summarization of mappgene's results.\n\nIf you use mappgene in your research, please cite the paper. Thanks!\n\nKimbrel J, Moon J, Avila-Herrera A, Martí JM, Thissen J, Mulakken N, Sandholtz\nSH, Ferrell T, Daum C, Hall S, Segelke B, Arrildt KT, Messenger S, Wadford DA,\nJaing C, Allen JE, Borucki MK. Multiple Mutations Associated with Emergent\nVariants Can Be Detected as Low-Frequency Mutations in Early SARS-CoV-2\nPandemic Clinical Samples. Viruses. 2022; 14(12):2775.\nhttps://doi.org/10.3390/v14122775\n____\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "Aram Avila-Herrera",
    "maintainer_email": "avilaherrera1@llnl.gov",
    "name": "mappgene",
    "package_url": "https://pypi.org/project/mappgene/",
    "platform": null,
    "project_url": "https://pypi.org/project/mappgene/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mappgene/1.3.1/",
    "requires_dist": [
      "pip (>=21.2.4)",
      "parsl (>=1.1.0)",
      "pytest (>=6.2.4)"
    ],
    "requires_python": ">=3.7",
    "summary": "Genomic sequence analysis for high-performance computing",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17209541,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e81516c49a9b003a546bd28c7b98126aa0a0388f8d72910f237090b2dca65fa",
        "md5": "5023f7d6e348852af4c114d47d3a0f8b",
        "sha256": "c12acc1ca9a69491fa3b7a02da4ece9e783d3b53711446fdde5fc48a7ba02723"
      },
      "downloads": -1,
      "filename": "mappgene-1.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5023f7d6e348852af4c114d47d3a0f8b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 3243926,
      "upload_time": "2023-03-08T16:42:13",
      "upload_time_iso_8601": "2023-03-08T16:42:13.513791Z",
      "url": "https://files.pythonhosted.org/packages/8e/81/516c49a9b003a546bd28c7b98126aa0a0388f8d72910f237090b2dca65fa/mappgene-1.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84e6298050d289f2e5af269ae8aa773137d4b1dc80eaa0fc5c66e2c62c561034",
        "md5": "03bd6f7c75a3a5779a6656e4f041abd2",
        "sha256": "ac5521e0d85601d0ac927b6bf52df2b07d26c7bf3cb1a2a46157bcfaef9741b6"
      },
      "downloads": -1,
      "filename": "mappgene-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "03bd6f7c75a3a5779a6656e4f041abd2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 3211569,
      "upload_time": "2023-03-08T16:42:15",
      "upload_time_iso_8601": "2023-03-08T16:42:15.844836Z",
      "url": "https://files.pythonhosted.org/packages/84/e6/298050d289f2e5af269ae8aa773137d4b1dc80eaa0fc5c66e2c62c561034/mappgene-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}