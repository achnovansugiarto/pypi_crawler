{
  "info": {
    "author": "Cam Sa√ºl",
    "author_email": "cammsaul@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development"
    ],
    "description": "Django REST Params\n==================\n\nFunction decorator to specify and validate parameters for API calls.\nInvalid params will automatically return a useful error message;\nvalidated params are passed to the wrapped function as kwargs.\n\n.. code:: bash\n\n   pip install django-rest-params==1.0.1\n\nA Few Examples\n--------------------\n\nSpecify the types of parameters, and check that they are within acceptable ranges:\n\n.. code:: python\n\n   from django_rest_params.decorators import params\n\n   @api_view(['GET'])\n   @params(latitude=float, latitude__gte=-90.0, latitude__lte=90.0,\n           longitude=float, longitude__gte=-180.0, longitude__lte=180.0)\n   def get_something(request, latitude, longitude):\n       # If latitude/longitude are missing or out of range, user will get an error message.\n       # If we get here, we know they're valid\n       pass\n\nCreate optional params with default values. Django REST Params supports POST params as well:\n\n.. code:: python\n\n   @api_view(['POST'])\n   @params(offset=int, offset__default=0)\n   def paged_api_call(request, offset):\n       # if offset isn't specified, default value is used\n       pass\n\nDjango REST Params works with ViewSets as well as request functions.\n\n.. code:: python\n\n   class ShirtsViewSet(viewsets.GenericViewSet):\n\n       @params(colors=('red','blue','green','yellow'), colors__many=True,\n               colors__optional=True, colors__name='color_filter')\n       def get_shirts(self, request, colors):\n           # Handle API calls like these:\n           # /shirts?color_filter=red          __name lets you use a function param name different from the API param name\n           # /shirts?color_filter=yellow,blue  __many lets you pass multiple values\n           # /shirts                           __optional will set colors to None if it isn't specified\n           # /shirts?color_filter=black        ERROR! This will return an error stating black is invalid, and listing the valid options\n           pass\n\nOptions\n=======\n\nTYPE\n----\nSpecify the type of a param:\n\n.. code:: python\n\n   latitude=float\n\nvalid options are:\n  - int\n  - float\n  - bool\n  - str/unicode\n  - tuple/list/set/frozenset (which will be treated as a list of valid options)\n  - a django Model subclass (in which case the param will be treated as a PK to that Model)\n\nGT/LT/GTE/LTE\n-------------\nAutomatically check that a param falls within a certain range. Valid for float, int, or Model PK, which all do numerical comparisons.\n\n.. code:: python\n\n   latitude__gte=-90.0\n   latitude__lte=90.0\n\nLENGTH__LT/GT/LTE/GTE/EQ\n------------------------\nOnly valid for str params. Check the length of the str\n\n.. code:: python\n\n  description__length__lt=256\n  country_code__length__eq=2\n\nOPTIONAL\n--------\n\n.. code:: python\n\n   latitude__optional=True # same as latitude__default=None\n\nDefault is False; if set to True, this param will be checked for validity (it will still return a 400 if it doesn't pass gte checks, for example),\nbut will be passed to the wrapped function as None if it wasn't specified.\n\nDEFAULT\n-------\n\n.. code:: python\n\n   sort_by=('messages_count', 'most_recent')\n   sort_by__default='messages_count'\n\nImplies that this param is optional.\nSpecify a default value for this param if it isn't specified.\n\nNAME\n----\nBy default, we'll look for a param with the same name as the kwargs, e.g.\n\n.. code:: python\n\n   user_id=User # User is a Django model. Look for user_id param, fetch corresponding User, pass to wrapped fn as user_id\n\nBut sometimes it makes more sense to call such a param 'user' locally, so you can do:\n\n.. code:: python\n\n   user=User, user__name='user_id' # look for user_id, assign to user\n\nMANY\n----\n\n.. code:: python\n\n   users=int # param 'users=1' is ok, 'users=1,2' is not\n   users__many=True # param 'users=1,2' will return tuple of (1, 2), 'users=1' will return (1)\n\nAllow User to (optionally) specify params as CSV (GET) or Array (JSON POST)\nIf many==True, the params will be returned as a tuple regardless of whether or not there was only one param\n\nDEFERRED\n--------\n.. code:: python\n\n   user__deferred=True\n\nBy default, Django REST Params will retrieve an object like this:\n\n.. code:: python\n\n   User.objects.only('id').get(id=user_id) # all fields except for 'id' are deferred\n\nUsually, this is preferrable, since we usually don't need to fetch the entire object from the DB, and it is significantly faster than doing so.\nBy setting __deferred to False, Django REST Params will change the object retrieval call to this:\n\n.. code:: python\n\n    User.objects.get(id=user_id)  # All fields are fetched\n\nFIELD\n-----\n\n.. code:: python\n\n   category = Category # by default, do Category.get(id=category)\n   category__field='name' # instead, do Category.get(name=category)\n\nApplies to Django models only. By default, we treat the param as an ID; instead, you can treat it as something else, e.g. 'name'\n\nMETHOD\n------\nValid methods for passing this param. Default is 'POST' for POST/PUT requests and GET for all others\n\n.. code:: python\n\n  user__method='GET' # GET only\n  user__method=('GET', 'POST') # allow either source\n\n\nTests\n=====\n\nRun the (fairly extensive) unit tests:\n\n.. code:: bash\n\n   python -m tests.tests\n\nMock classes are used to simulate Django models / managers / Django REST Framework requests, so these tests don't actually need to run inside a Django app.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cammsaul/django-rest-params",
    "keywords": "rest,django,api,params,parameters,djangorestframework,decorator",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-rest-params",
    "package_url": "https://pypi.org/project/django-rest-params/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-rest-params/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/cammsaul/django-rest-params"
    },
    "release_url": "https://pypi.org/project/django-rest-params/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Function decorator for Django REST Framework for specifying and constraining API parameters.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2021722,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "522cb27b9f39d2f1fc8d6b3e43a090bbb9bcc2d1edde0c7313e396d90137cd49",
        "md5": "be3e2e376fe5764b1557a89a92a966dd",
        "sha256": "9e8fa7d9464467f81272adaa4f6a146bd1b1dbde68925ae6629cc9da2f1e72ba"
      },
      "downloads": -1,
      "filename": "django_rest_params-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be3e2e376fe5764b1557a89a92a966dd",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 11745,
      "upload_time": "2014-10-19T14:07:30",
      "upload_time_iso_8601": "2014-10-19T14:07:30.410814Z",
      "url": "https://files.pythonhosted.org/packages/52/2c/b27b9f39d2f1fc8d6b3e43a090bbb9bcc2d1edde0c7313e396d90137cd49/django_rest_params-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad47cae5503861a40644b90805d399eb3727acb3bc8b373ce5738467d9ef2e58",
        "md5": "fee9985d7b8c1e31d6c3e6904031ec25",
        "sha256": "d0f0a6b5996a30a5283cfa1a164b1fa637b9a86d39d3dbb3154d0c091b35c68c"
      },
      "downloads": -1,
      "filename": "django-rest-params-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fee9985d7b8c1e31d6c3e6904031ec25",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6529,
      "upload_time": "2014-10-19T14:07:26",
      "upload_time_iso_8601": "2014-10-19T14:07:26.481785Z",
      "url": "https://files.pythonhosted.org/packages/ad/47/cae5503861a40644b90805d399eb3727acb3bc8b373ce5738467d9ef2e58/django-rest-params-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}