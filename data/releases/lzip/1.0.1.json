{
  "info": {
    "author": "Alexandre Marcireau",
    "author_email": "alexandre.marcireau@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "`lzip` is a Python wrapper for lzlib (https://www.nongnu.org/lzip/lzlib.html) to encode and decode Lzip archives (https://www.nongnu.org/lzip/).\n\nThis package is compatible with arbitrary byte sequences but provides features to facilitate interoperability with Numpy's `frombuffer` and `tobytes` functions. Decoding and encoding can be performed in chunks, enabling the decompression, processing and compression of files that do not fit in RAM. URLs can be used as well to download, decompress and process the chunks of a remote Lzip archive in one go.\n\n```sh\npip3 install lzip\n```\n\n# Quickstart\n\n## Compress\n\nCompress an in-memory buffer and write it to a file:\n```py\nimport lzip\n\nlzip.compress_to_file('/path/to/output.lz', b'data to compress')\n```\n\nCompress multiple chunks and write the result to a single file (useful to avoid large in-memory buffers):\n```py\nimport lzip\n\nwith lzip.FileEncoder('/path/to/output.lz') as encoder:\n    encoder.compress(b'data')\n    encoder.compress(b' to')\n    encoder.compress(b' compress')\n```\n\nUse `FileEncoder` without context management (`with`):\n```py\nimport lzip\n\nencoder = lzip.FileEncoder('/path/to/output.lz')\nencoder.compress(b'data')\nencoder.compress(b' to')\nencoder.compress(b' compress')\nencoder.close()\n```\n\nCompress a Numpy array and write the result to a file:\n```py\nimport lzip\nimport numpy\n\nvalues = numpy.arange(100, dtype='<u4')\n\nlzip.compress_to_file('/path/to/output.lz', values.tobytes())\n```\n\n`lzip` can use different compression levels. See the [documentation](#documentation) below for details.\n\n## Decompress\n\nRead and decompress a file to an in-memory buffer:\n```py\nimport lzip\n\nbuffer = lzip.decompress_file('/path/to/input.lz')\n```\n\nRead and decompress a file one chunk at a time (useful for large files):\n```py\nimport lzip\n\nfor chunk in lzip.decompress_file_iter('/path/to/input.lz'):\n    # chunk is a bytes object\n```\n\nRead and decompress a file one chunk at a time, and ensure that each chunk contains a number of bytes that is a multiple of `word_size` (useful to parse numpy arrays with a known dtype):\n```py\nimport lzip\nimport numpy\n\nfor chunk in lzip.decompress_file_iter('/path/to/input.lz', word_size=4):\n    values = numpy.frombuffer(chunk, dtype='<u4')\n```\n\nDownload and decompress data from a URL:\n```py\nimport lzip\n\n# option 1: store the whole decompressed file in a single buffer\nbuffer = lzip.decompress_url('http://download.savannah.gnu.org/releases/lzip/lzip-1.22.tar.lz')\n\n# option 2: iterate over the decompressed file in small chunks\nfor chunk in lzip.decompress_url_iter('http://download.savannah.gnu.org/releases/lzip/lzip-1.22.tar.lz'):\n    # chunk is a bytes object\n```\n\n`lzip` can also decompress data from an in-memory buffer. See the [documentation](#documentation) below for details.\n\n# Documentation\n\nThe present package contains two libraries. `lzip` deals with high-level operations (open and close files, download remote data, change default arguments...) whereas `lzip_extension` focuses on efficiently compressing and decompressing in-memory byte buffers.\n\n`lzip` uses `lzip_extension` internally. The latter should only be used in advanced scenarios where fine buffer control is required.\n\n- [lzip](#lzip)\n  - [FileEncoder](#fileencoder)\n  - [BufferEncoder](#bufferencoder)\n  - [RemainingBytesError](#remainingbyteserror)\n  - [compress_to_buffer](#compress_to_buffer)\n  - [compress_to_file](#compresstofile)\n  - [decompress_buffer](#decompress_buffer)\n  - [decompress_buffer_iter](#decompress_buffer_iter)\n  - [decompress_file](#decompress_file)\n  - [decompress_file_iter](#decompress_file_iter)\n  - [decompress_file_like](#decompress_file_like)\n  - [decompress_file_like_iter](#decompress_file_like_iter)\n  - [decompress_url](#decompress_url)\n  - [decompress_url_iter](#decompress_url_iter)\n- [lzip_extension](#lzip_extension)\n  - [Decoder](#decoder)\n  - [Encoder](#encoder)\n- [Word size and remaining bytes](word-size-and-remaining-bytes)\n- [Default parameters](default-paramters)\n- [Compare options](compare-options)\n\n## lzip\n\n### FileEncoder\n\n```py\nclass FileEncoder:\n    def __init__(self, path, level=6, member_size=(1 << 51)):\n        \"\"\"\n        Encode sequential byte buffers and write the compressed bytes to a file\n        - path is the output file name, it must be a path-like object such as a string or a pathlib path\n        - level must be either an integer in [0, 9] or a tuple (directory_size, match_length)\n          0 is the fastest compression level, 9 is the slowest\n          see https://www.nongnu.org/lzip/manual/lzip_manual.html for the mapping between\n          integer levels, directory sizes and match lengths\n        - member_size can be used to change the compressed file's maximum member size\n          see the Lzip manual for details on the tradeoffs incurred by this value\n        \"\"\"\n\n    def compress(self, buffer):\n        \"\"\"\n        Encode a buffer and write the compressed bytes into the file\n        - buffer must be a byte-like object, such as bytes or a bytearray\n        \"\"\"\n\n    def close(self):\n        \"\"\"\n        Flush the encoder contents and close the file\n\n        compress must not be called after calling close\n        Failing to call close results in a corrupted encoded file\n        \"\"\"\n```\n\n`FileEncoder` can be used as a context manager (`with FileEncoder(...) as encoder`). `close` is called automatically in this case.\n\n### BufferEncoder\n\n```py\nclass BufferEncoder:\n    def __init__(self, level=6, member_size=(1 << 51)):\n        \"\"\"\n        Encode sequential byte buffers and return the compressed bytes as in-memory buffers\n        - level: see FileEncoder\n        - member_size: see FileEncoder\n        \"\"\"\n\n    def compress(self, buffer):\n        \"\"\"\n        Encode a buffer and return the compressed bytes as an in-memory buffer\n        - buffer must be a byte-like object, such as bytes or a bytearray\n        This function returns a bytes object\n\n        The compression algorithm may decide to buffer part or all of the data,\n        hence the relationship between input (non-compressed) buffers and\n        output (conpressed) buffers is not one-to-one\n        In particular, the returned buffer can be empty (b'') even if the input buffer is not\n        \"\"\"\n\n    def finish(self):\n        \"\"\"\n        Flush the encoder contents\n        This function returns a bytes object\n\n        compress must not be called after calling finish\n        Failing to call finish results in corrupted encoded buffers\n        \"\"\"\n```\n\n### RemainingBytesError\n\n```py\nclass RemainingBytesError(Exception):\n    def __init__(self, word_size, buffer):\n        \"\"\"\n        Raised by decompress_* functions if the total number of bytes is not a multiple of word_size\n        The remaining bytes are stored in self.buffer\n        See 'Word size and remaining bytes' for details\n        \"\"\"\n```\n\n### compress_to_buffer\n\n```py\ndef compress_to_buffer(buffer, level=6, member_size=(1 << 51)):\n    \"\"\"\n    Encode a single buffer and return the compressed bytes as an in-memory buffer\n    - buffer must be a byte-like object, such as bytes or a bytearray\n    - level: see FileEncoder\n    - member_size: see FileEncoder\n    This function returns a bytes object\n    \"\"\"\n```\n\n### compress_to_file\n\n```py\ndef compress_to_file(path, buffer, level=6, member_size=(1 << 51)):\n    \"\"\"\n    Encode a single buffer and write the compressed bytes into a file\n    - path is the output file name, it must be a path-like object such as a string or a pathlib path\n    - buffer must be a byte-like object, such as bytes or a bytearray\n    - level: see FileEncoder\n    - member_size: see FileEncoder\n    \"\"\"\n```\n\n### decompress_buffer\n\n```py\ndef decompress_buffer(buffer, word_size=1):\n    \"\"\"\n    Decode a single buffer and return the decompressed bytes as an in-memory buffer\n    - buffer must be a byte-like object, such as bytes or a bytearray\n    - word_size: see 'Word size and remaining bytes'\n    This function returns a bytes object\n    \"\"\"\n```\n\n### decompress_buffer_iter\n\n```py\ndef decompress_buffer_iter(buffer, word_size=1):\n    \"\"\"\n    Decode a single buffer and return an in-memory buffer iterator\n    - buffer must be a byte-like object, such as bytes or a bytearray\n    - word_size: see 'Word size and remaining bytes'\n    This function returns a bytes object iterator\n    \"\"\"\n```\n\n### decompress_file\n\n```py\ndef decompress_file(path, word_size=1, chunk_size=(1 << 16)):\n    \"\"\"\n    Read and decode a file and return the decompressed bytes as an in-memory buffer\n    - path is the input file name, it must be a path-like object such as a string or a pathlib path\n    - word_size: see 'Word size and remaining bytes'\n    - chunk_size: the number of bytes to read from the file at once\n      large values increase memory usage but very small values impede performance\n    This function returns a bytes object\n    \"\"\"\n```\n\n### decompress_file_iter\n\n```py\ndef decompress_file_iter(path, word_size=1, chunk_size=(1 << 16)):\n    \"\"\"\n    Read and decode a file and return an in-memory buffer iterator\n    - path is the input file name, it must be a path-like object such as a string or a pathlib path\n    - word_size: see 'Word size and remaining bytes'\n    - chunk_size: see decompress_file\n    This function returns a bytes object iterator\n    \"\"\"\n```\n\n### decompress_file_like\n\n```py\ndef decompress_file_like(file_like, word_size=1, chunk_size=(1 << 16)):\n    \"\"\"\n    Read and decode a file-like object and return the decompressed bytes as an in-memory buffer\n    - file_like is a file-like object, such as a file or a HTTP response\n    - word_size: see 'Word size and remaining bytes'\n    - chunk_size: see decompress_file\n    This function returns a bytes object\n    \"\"\"\n```\n\n### decompress_file_like_iter\n\n```py\ndef decompress_file_like_iter(file_like, word_size=1, chunk_size=(1 << 16)):\n    \"\"\"\n    Read and decode a file-like object and return an in-memory buffer iterator\n    - file_like is a file-like object, such as a file or a HTTP response\n    - word_size: see 'Word size and remaining bytes'\n    - chunk_size: see decompress_file\n    This function returns a bytes object iterator\n    \"\"\"\n```\n\n### decompress_url\n\n```py\ndef decompress_url(\n    url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, cafile=None, capath=None, context=None,\n    word_size=1,\n    chunk_size=(1 << 16)):\n    \"\"\"\n    Download and decode data from a URL and return the decompressed bytes as an in-memory buffer\n    - url must be a string or a urllib.Request object\n    - data, timeout, cafile, capath and context are passed to urllib.request.urlopen\n      see https://docs.python.org/3/library/urllib.request.html for details\n    - word_size: see 'Word size and remaining bytes'\n    - chunk_size: see decompress_file\n    This function returns a bytes object\n    \"\"\"\n```\n\n### decompress_url_iter\n\n```py\ndef decompress_url_iter(\n    url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, cafile=None, capath=None, context=None,\n    word_size=1,\n    chunk_size=(1 << 16)):\n    \"\"\"\n    Download and decode data from a URL and return an in-memory buffer iterator\n    - url must be a string or a urllib.Request object\n    - data, timeout, cafile, capath and context are passed to urllib.request.urlopen\n      see https://docs.python.org/3/library/urllib.request.html for details\n    - word_size: see 'Word size and remaining bytes'\n    - chunk_size: see decompress_file\n    This function returns a bytes object iterator\n    \"\"\"\n```\n\n## lzip_extension\n\nEven though `lzip_extension` behaves like a conventional Python module, it is written in C++. To keep the implementation simple, only positional arguments are supported (keyword arguments do not work). The Python classes documented below are equivalent to the classes exported by this low-level implementation.\n\nYou can use `lzip_extension` by importing it like any other module. *lzip.py* uses it extensively.\n\n### Decoder\n\n```py\nclass Decoder:\n    def __init__(self, word_size=1):\n        \"\"\"\n        Decode sequential byte buffers and return the decompressed bytes as in-memory buffers\n        - word_size is a non-zero positive integer\n          all the output buffers contain a number of bytes that is a multiple of word_size\n        \"\"\"\n\n    def decompress(self, buffer):\n        \"\"\"\n        Decode a buffer and return the decompressed bytes as an in-memory buffer\n        - buffer must be a byte-like object, such as bytes or a bytearray\n        This function returns a bytes object\n\n        The compression algorithm may decide to buffer part or all of the data,\n        hence the relationship between input (compressed) buffers and\n        output (decompressed) buffers is not one-to-one\n        In particular, the returned buffer can be empty (b'') even if the input buffer is not\n        \"\"\"\n\n    def finish(self):\n        \"\"\"\n        Flush the encoder contents\n        This function returns a tuple (buffer, remaining_bytes)\n          Both buffer and remaining_bytes and bytes objects\n          buffer should be empty (b'') unless the file was truncated\n          remaining_bytes is empty (b'') unless the total number of bytes decoded\n          is not a multiple of word_size\n\n        decompress must not be called after calling finish\n        Failing to call finish delays garbage collection which can be an issue\n        when decoding many files in a row, and prevents the algorithm from detecting\n        remaining bytes (if the size is not a multiple of word_size)\n        \"\"\"\n```\n\n### Encoder\n\n```py\nclass Encoder:\n    def __init__(self, dictionary_size=(1 << 23), match_len_limit=36, member_size=(1 << 51)):\n        \"\"\"\n        Encode sequential byte buffers and return the compressed bytes as in-memory buffers\n        - dictionary_size is an integer in the range [(1 << 12), (1 << 29)]\n        - match_len_limit is an integer in the range [5, 273]\n        - member_size is an integer in the range [(1 << 12), (1 << 51)]\n        \"\"\"\n\n    def compress(self, buffer):\n        \"\"\"\n        Encode a buffer and return the compressed bytes as an in-memory buffer\n        - buffer must be a byte-like object, such as bytes or a bytearray\n        This function returns a bytes object\n\n        The compression algorithm may decide to buffer part or all of the data,\n        hence the relationship between input (decompressed) buffers and\n        output (compressed) buffers is not one-to-one\n        In particular, the returned buffer can be empty (b'') even if the input buffer is not\n        \"\"\"\n\n    def finish(self):\n        \"\"\"\n        Flush the encoder contents\n        This function returns a bytes object\n\n        compress must not be called after calling finish\n        Failing to call finish results in corrupted encoded buffers\n        \"\"\"\n```\n\n## Compare options\n\nThe script *compare_options.py* uses the `lzip` library to compare the compression ratio of different pairs (dictionary_size, match_len_limit). It runs multiple compressions in parallel and does not store the compressed bytes. About 3 GB of RAM are required to run the script. Processing time depends on the file size and the number of processors on the machine.\n\nThe script requires matplotlib (`pip3 install matplotlib`) to display the results.\n\n```sh\npython3 compare_options /path/to/uncompressed/file [--chunk-size=65536]\n```\n\n\n## Word size and remaining bytes\n\nDecoding functions take an optional parameter `word_size` that defaults to `1`. Decoded buffers are guaranteed to contain a number of bytes that is a multiple of `word_size` to facilitate fixed-sized words parsing (for example `numpy.frombytes`). If the total size of the uncompressed archive is not a multiple of `word_size`, `lzip.RemainingBytesError` is raised after iterating over the last chunk. The raised exception provides access to the remaining bytes.\n\nNon-iter decoding functions do not provide access to the decoded buffers if the total size is not a multiple of `word_size` (only the remaining bytes).\n\nThe following example decodes a file and converts the decoded bytes to 4-bytes unsigned integers:\n```py\nimport lzip\nimport numpy\n\ntry:\n    for chunk in lzip.decompress_file_iter('/path/to/archive.lz', 4):\n        values = numpy.frombuffer(chunk, dtype='<u4')\nexcept lzip.RemainingBytesError as error:\n    # this block is executed only if the number of bytes in '/path/to/archive.lz'\n    # is not a multiple of 4 (after decompression)\n    print(error) # prints 'The total number of bytes is not a multiple of 4 (k remaining)'\n                 # where k is in [1, 3]\n    # error.buffer is a bytes object and contains the k remaining bytes\n```\n\n## Default parameters\n\nThe default parameters in `lzip` functions are not constants, despite what is presented in the documentation. The actual implementation looks like this:\n\n```py\ndef some_function(some_parameter=None):\n    if some_parameter is None:\n        some_paramter = some_paramter_default_value\n```\n\nThis approach makes it possible to change default values at the module level at any time. For example:\n```py\nimport lzip\n\nlzip.compress_to_file('/path/to/output0.lz', b'data to compress') # encoded at level 6 (default)\n\nlzip.default_level = 9\n\nlzip.compress_to_file('/path/to/output1.lz', b'data to compress') # encoded at level 9\nlzip.compress_to_file('/path/to/output2.lz', b'data to compress') # encoded at level 9\n\nlzip_default_level = 0\n\nlzip.compress_to_file('/path/to/output1.lz', b'data to compress') # encoded at level 0\n```\n\n`lzip` exports the following *default* default values:\n\n```py\ndefault_level = 6\ndefault_word_size = 1\ndefault_chunk_size = 1 << 16\ndefault_member_size = 1 << 51\n```\n\n# Publish\n\n1. Bump the version number in *setup.py*.\n\n2. Install Cubuzoa in a different directory (https://github.com/neuromorphicsystems/cubuzoa) to build pre-compiled versions for all major operating systems. Cubuzoa depends on VirtualBox (with its extension pack) and requires about 75 GB of free disk space.\n```sh\ncd cubuzoa\npython3 cubuzoa.py provision\npython3 cubuzoa.py build /path/to/event_stream\n```\n\n3. Install twine\n```sh\npip3 install twine\n```\n\n4. Upload the compiled wheels and the source code to PyPI:\n```sh\npython3 setup.py sdist --dist-dir wheels\npython3 -m twine upload wheels/*\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/neuromorphicsystems/lzip",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lzip",
    "package_url": "https://pypi.org/project/lzip/",
    "platform": "",
    "project_url": "https://pypi.org/project/lzip/",
    "project_urls": {
      "Homepage": "https://github.com/neuromorphicsystems/lzip"
    },
    "release_url": "https://pypi.org/project/lzip/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Lzip (.lz) archives compression and decompression with buffers and URLs support",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15886089,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0bf656b21ade2cda49f90a8fe382f1cbf2cdd524e313f0de0b79988aa9084562",
        "md5": "1dae0a5c60c7ba8d3c446e7872db0d8b",
        "sha256": "ffe01e7804b5a09f3dc3851298f97196bb625640dd0ab7811b6e88efb0aa5f73"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp37-cp37m-macosx_11_0_x86_64.whl",
      "has_sig": false,
      "md5_digest": "1dae0a5c60c7ba8d3c446e7872db0d8b",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 47395,
      "upload_time": "2021-06-15T17:59:23",
      "upload_time_iso_8601": "2021-06-15T17:59:23.581153Z",
      "url": "https://files.pythonhosted.org/packages/0b/f6/56b21ade2cda49f90a8fe382f1cbf2cdd524e313f0de0b79988aa9084562/lzip-1.0.1-cp37-cp37m-macosx_11_0_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0b2454566158b13b164915ad0c4d7b60947b7152e16c2b2fa22b31342af8ad8",
        "md5": "715730dc6f80ff82f978ae38354a8b92",
        "sha256": "fa85522a38c2bdba8290eb5f1dc4b616773b957f570db7b4afec50d5cf91193c"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "715730dc6f80ff82f978ae38354a8b92",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 73059,
      "upload_time": "2021-06-15T17:59:25",
      "upload_time_iso_8601": "2021-06-15T17:59:25.600365Z",
      "url": "https://files.pythonhosted.org/packages/d0/b2/454566158b13b164915ad0c4d7b60947b7152e16c2b2fa22b31342af8ad8/lzip-1.0.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "931fc5713b7e8723cb2d92c6d7cb0d3eca22c2e361d5fedf2f8698f0d933a907",
        "md5": "e209abbd727eb8d3214e2523fcb8cba7",
        "sha256": "b71b8ea09f9dbfaf4679276dce8f6f9eb0c8d57ddeb8ffafd802752985fa53fe"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "e209abbd727eb8d3214e2523fcb8cba7",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 38795,
      "upload_time": "2021-06-15T17:59:27",
      "upload_time_iso_8601": "2021-06-15T17:59:27.198618Z",
      "url": "https://files.pythonhosted.org/packages/93/1f/c5713b7e8723cb2d92c6d7cb0d3eca22c2e361d5fedf2f8698f0d933a907/lzip-1.0.1-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04d8fd6097be9565b6ef7c7f193d6c19502a6c09cf347de8c0e02b9a3fd2a1a9",
        "md5": "34f184a3043a58dac25e7ab25dfefe51",
        "sha256": "805b12543483824b8e5474e41c9f5519bf3d8a37ed6f6d5d6d5244c5842c797e"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "34f184a3043a58dac25e7ab25dfefe51",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 46815,
      "upload_time": "2021-06-15T17:59:29",
      "upload_time_iso_8601": "2021-06-15T17:59:29.449178Z",
      "url": "https://files.pythonhosted.org/packages/04/d8/fd6097be9565b6ef7c7f193d6c19502a6c09cf347de8c0e02b9a3fd2a1a9/lzip-1.0.1-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c2fe1ed183c7a1a3f724efbe0b9e301e72bbfe91484d206f76b9c5bf479ed94",
        "md5": "d5924c3b3b4b2312ffd4bf6c447871e3",
        "sha256": "3aa0816382d9b4d8740b748b2f4fac960235004f994b07126131215b1cdcb189"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp38-cp38-macosx_11_0_x86_64.whl",
      "has_sig": false,
      "md5_digest": "d5924c3b3b4b2312ffd4bf6c447871e3",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 47390,
      "upload_time": "2021-06-15T17:59:31",
      "upload_time_iso_8601": "2021-06-15T17:59:31.280253Z",
      "url": "https://files.pythonhosted.org/packages/4c/2f/e1ed183c7a1a3f724efbe0b9e301e72bbfe91484d206f76b9c5bf479ed94/lzip-1.0.1-cp38-cp38-macosx_11_0_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1fc56d5a9830b8092eea25cbce4b2bcdca2b4c86dd0f8927f0b0cef9dd354ecd",
        "md5": "aa61bc1f05f9856ee4c5ff582a2e7d4b",
        "sha256": "c4a6272d1b98f8dc5874bf146cb6cc86fc08d394e1d55b42a0a428bd52e50ce2"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "aa61bc1f05f9856ee4c5ff582a2e7d4b",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 73055,
      "upload_time": "2021-06-15T17:59:33",
      "upload_time_iso_8601": "2021-06-15T17:59:33.034699Z",
      "url": "https://files.pythonhosted.org/packages/1f/c5/6d5a9830b8092eea25cbce4b2bcdca2b4c86dd0f8927f0b0cef9dd354ecd/lzip-1.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46add58b07080273663dd01c99f45750be13868d4e6d9549fb346cff32daf76a",
        "md5": "ad9e77a6c9f536324d2d667eb1ca2dad",
        "sha256": "053efed74a4d87bdafc7341fb92e35e132b642fd777b7a8531778cb90a45b0b2"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp38-cp38-win32.whl",
      "has_sig": false,
      "md5_digest": "ad9e77a6c9f536324d2d667eb1ca2dad",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 38828,
      "upload_time": "2021-06-15T17:59:35",
      "upload_time_iso_8601": "2021-06-15T17:59:35.391773Z",
      "url": "https://files.pythonhosted.org/packages/46/ad/d58b07080273663dd01c99f45750be13868d4e6d9549fb346cff32daf76a/lzip-1.0.1-cp38-cp38-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f67d75f3da71cf593e54eafa3a8c3b1256b71a32ea5c6c05238a4b3f3d5e57e",
        "md5": "6f0b68062b5a5def408ae7d626033997",
        "sha256": "594bc51bf2e5c5aa0b882bd4c18a6f8cbd33f2f7a3d7021c8c74fd74516d7fc5"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "6f0b68062b5a5def408ae7d626033997",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 46853,
      "upload_time": "2021-06-15T17:59:37",
      "upload_time_iso_8601": "2021-06-15T17:59:37.177908Z",
      "url": "https://files.pythonhosted.org/packages/7f/67/d75f3da71cf593e54eafa3a8c3b1256b71a32ea5c6c05238a4b3f3d5e57e/lzip-1.0.1-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba73b63b81825d3e6a6294c73733d1a28c80793a55938d5e7abe1ceba87505e5",
        "md5": "efa00f7283f52bc9c321d7f79dd8217a",
        "sha256": "03c075e758589bf035865fd7e11f8c39ce09e514fc2ccb27b92dd9f2cbafa978"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp39-cp39-macosx_11_0_x86_64.whl",
      "has_sig": false,
      "md5_digest": "efa00f7283f52bc9c321d7f79dd8217a",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 47390,
      "upload_time": "2021-06-15T17:59:39",
      "upload_time_iso_8601": "2021-06-15T17:59:39.141011Z",
      "url": "https://files.pythonhosted.org/packages/ba/73/b63b81825d3e6a6294c73733d1a28c80793a55938d5e7abe1ceba87505e5/lzip-1.0.1-cp39-cp39-macosx_11_0_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e69f0358867568692423784f1c14155f52f1e59b13773e75f588f5bd1c01e6bd",
        "md5": "14f6c38571407d16aa8239392edca8cd",
        "sha256": "d088ed59ec5432cd7fe8ea8a27e7f1e26cc88951963d0ed0c8074a1f139f3b45"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "14f6c38571407d16aa8239392edca8cd",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 73057,
      "upload_time": "2021-06-15T17:59:41",
      "upload_time_iso_8601": "2021-06-15T17:59:41.347555Z",
      "url": "https://files.pythonhosted.org/packages/e6/9f/0358867568692423784f1c14155f52f1e59b13773e75f588f5bd1c01e6bd/lzip-1.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "653825d76c3d69e9a95beb35535dce274939bf4b4b21701f09760e5db13ecd24",
        "md5": "97ee2edd641f990ea5266338b5944431",
        "sha256": "c6c3f11f54acea6f6a6864ef4ab6f7a316e9d477c20ee3e5c0eab8846c4990be"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp39-cp39-win32.whl",
      "has_sig": false,
      "md5_digest": "97ee2edd641f990ea5266338b5944431",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 38794,
      "upload_time": "2021-06-15T17:59:43",
      "upload_time_iso_8601": "2021-06-15T17:59:43.164426Z",
      "url": "https://files.pythonhosted.org/packages/65/38/25d76c3d69e9a95beb35535dce274939bf4b4b21701f09760e5db13ecd24/lzip-1.0.1-cp39-cp39-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b550a0da7f764e960081c64925708e4811586b4e9e80298c80db156ffdad4b2",
        "md5": "2840ab1c633146c0a97f3fb92a6b024b",
        "sha256": "d55630df88e0533f47c8f5009de5ff7363f3c8967e12ef8f7e89d1628176ba25"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "2840ab1c633146c0a97f3fb92a6b024b",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 46819,
      "upload_time": "2021-06-15T17:59:44",
      "upload_time_iso_8601": "2021-06-15T17:59:44.957131Z",
      "url": "https://files.pythonhosted.org/packages/3b/55/0a0da7f764e960081c64925708e4811586b4e9e80298c80db156ffdad4b2/lzip-1.0.1-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cac722485a9f7b2c1d039a6cbf60c41e1bb9196cfaa0fcfc4edcea7fc5a43bf",
        "md5": "5dca678de822736dacda93d01d01d026",
        "sha256": "2ffdc3136a34ce9766e0f879327cc29432e81645b4f17e876d72f2e859553469"
      },
      "downloads": -1,
      "filename": "lzip-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5dca678de822736dacda93d01d01d026",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15714,
      "upload_time": "2021-06-15T17:59:46",
      "upload_time_iso_8601": "2021-06-15T17:59:46.867979Z",
      "url": "https://files.pythonhosted.org/packages/1c/ac/722485a9f7b2c1d039a6cbf60c41e1bb9196cfaa0fcfc4edcea7fc5a43bf/lzip-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}