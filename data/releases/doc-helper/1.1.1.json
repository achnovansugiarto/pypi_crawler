{
  "info": {
    "author": "Yuning Shen",
    "author_email": "ynshen23@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License"
    ],
    "description": "## Use `DocHelper` to simplify your python docstrings\n\nIf you have been writing classes or functions with many shared arguments, you\nmight have going through the tedious and error prone process of copy-pasting,\nsearching-updating same docstring again and again. Passing through `**kwargs`\nmight not always be the solution not to say it's implicit and makes user to\nlook up multiple documents to find available arguments.\n\nSo how about one place to store and update them all? `DocHelper` keeps the\ndocstrings for arguments in the same place and you only need to write the\ntemplate for each class or functions - it will compose and fill in the\ntemplate in Google format.\n\nWorks from Jupyter notebook to Sphinx where docstrings were read by importing.\n\n## Installation\n### Install using `pip` (recommended)\n\n```bash\npip install doc-helper\n```\n\n### Install from source\n```bash\n# make sure you have setuptools and wheel installed\n\ngit clone https://github.com/ynshen/DocHelper.git\ncd DocHelper\npython setup.py bdist_wheel\npip install dist/the-wheel-file-of-your-version.whl\n```\n\n## Usage\n\n### Initialize a `DocHelper` with argument docstrings\n\n```python\nfrom doc_helper import DocHelper\n\nmy_doc = DocHelper(\n    arg1='Just an simple argument',           # defined as keyword arguments\n    arg2=('Also an simple argument'),         # or a (not really) tuple\n    arg3=('int', 'This argument is integer')  # tuple with data type\n)\n```\n\n### Add arguments when you needed\n```python\nmy_doc.add(\n    arg4=('pd.DataFrame', 'Just a new argument')\n)\n```\n\n### Use `DocHelper.get()` to get formatted docstring for arguments\n\n```python\n# Pass a list/tuple of argument names to `DocHelper.get()`\n>>> my_doc.get(['arg1', 'arg3'])\n    arg1: Just an simple argument\n    arg3 (int): This argument is integer\n\n# Pass a callable (function) to automatic find related arguments (except 'self')\ndef awesome_function(arg1, arg3):\n    pass\n\n>>> my_doc.get(awesome_function)\n    arg1: Just an simple argument\n    arg3 (int): This argument is integer\n```\n\n\n### Use decorator `DocHelper.compose` to write template\n\nSimply write a string with comma separated arguments name in `<<` and `>>`.\nDefault indents is 4, just add a number to change to desired indents.\n\n```python\n# Example 1\n\n@my_doc.compose(\"\"\"This is my awesome function\nArgs:\n<<arg1, arg2>>\n   arg3: This arg3 is special\n\"\"\")\ndef awesome_function(arg1, arg2, arg3):\n    pass\n\n>>> awesome_function.__doc__\nThis is my awesome function\nArgs:\n    arg1: Just an simple argument\n    arg2: Also an simple argument\n    arg3: This arg3 is special\n\n\n# Example 2\n\n@my_doc.compose(\"\"\"This is another awesome function only takes arg1, arg3, and I want indent = 8\nArgs:\n<<arg1, arg2, 8>>\n\"\"\")\ndef another_awesome_function(arg1, arg3):\n    pass\n\n>>> another_awesome_function.__doc__\nThis is another awesome function only takes arg1, arg3, and I wand indent = 8\nArgs:\n        arg1: Just an simple argument\n        arg3 (int): This argument is integer\n\n\n# Example 3\n\n@my_doc.compose(\"\"\"Feeling lazy? left it blank to include all arguments (except 'self')\nArgs:\n<<>>\n\"\"\")\ndef another_another_awesome_function(arg1, arg2, arg3):\n    pass\n\n>>> another_another_awesome_function.__doc__\nThis is my awesome function\nArgs:\n    arg1: Just an simple argument\n    arg2: Also an simple argument\n    arg3 (int): This argument is integer\n\n```\n\n## Update\n- version 1.1.1: indents at the top of `<<  >>` can be controlled through `DocHelper.compose(indent_at_top=False/True)`, default False.\n- version 1.1.0: extra indents at the top of each lines were subtracted\n\n## TODO\n- ~~Add docstring formatting function to subtract extra indents~~\n- Include different formatting (Numpy, reStructuredText)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ynshen/DocHelper/",
    "keywords": "documentation docstring utility",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "doc-helper",
    "package_url": "https://pypi.org/project/doc-helper/",
    "platform": "",
    "project_url": "https://pypi.org/project/doc-helper/",
    "project_urls": {
      "Bug Reports": "https://github.com/ynshen/DocHelper/issues/",
      "Homepage": "https://github.com/ynshen/DocHelper/",
      "Source": "https://github.com/ynshen/DocHelper/"
    },
    "release_url": "https://pypi.org/project/doc-helper/1.1.1/",
    "requires_dist": [
      "pandas"
    ],
    "requires_python": ">=3.5",
    "summary": "Compose docstrings with repeated arguments",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6744637,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a24ab6b150662349282d2a628769ee5fd0ae1f4d829062c8124d9162509f820",
        "md5": "ec6679129790703c881359dc580fcc60",
        "sha256": "25ec57ac2c28af6f5f1e724d462c70a00a82eefb810fbac982683eae437833b7"
      },
      "downloads": -1,
      "filename": "doc_helper-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ec6679129790703c881359dc580fcc60",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 5430,
      "upload_time": "2020-03-04T00:23:05",
      "upload_time_iso_8601": "2020-03-04T00:23:05.324686Z",
      "url": "https://files.pythonhosted.org/packages/4a/24/ab6b150662349282d2a628769ee5fd0ae1f4d829062c8124d9162509f820/doc_helper-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}