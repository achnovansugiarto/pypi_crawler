{
  "info": {
    "author": null,
    "author_email": "Mariusz Okulanis <mariusz.okulanis@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Database",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": "# django-soft-atomic\n\n[![GitHub](https://img.shields.io/github/license/maniek2332/django-soft-atomic)](https://github.com/maniek2332/django-soft-atomic/blob/master/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/django_soft_atomic)](https://pypi.org/project/django_soft_atomic/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django_soft_atomic)](https://pypi.org/project/django_soft_atomic/)\n[![PyPI - Wheel](https://img.shields.io/pypi/wheel/django_soft_atomic)](https://pypi.org/project/django_soft_atomic/)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/django_soft_atomic)](https://pypi.org/project/django_soft_atomic/)\n\nA more forgiving variation of `django`'s `atomic`, allowing you to pass some\nexceptions through atomic block without rollback.\n\n## Rationale\n\nIn big applications you may end up relying on exceptions mechanism to pass information\nabout failure up the stack. Unfortunately, if your business logic involves operations on\ndatabase, there is no easy way to wind up execution through atomic block without\nrolling back entire transaction. `django-soft-atomic` tries to solves this problem\nby allowing certain exceptions to exit atomic block just like sucessful execution\n(still maintaining the raised exception).\n\n## Requirements\n\n * Python 3.6+\n * Django 3.2+\n\n## Installation\n\n### With PIP\n\nExecute: `pip install django_soft_atomic`\n\nSee also: [PyPI Page](https://pypi.org/project/django_soft_atomic/)\n\n### Manual\n\nCopy `django_soft_atomic.py` to your codebase and simply start using it.\n\n## Usage (docs)\n\nThis \"package\" constists of single decorator/context-manager, acting as replacement for django's `atomic`:\n\n`soft_atomic(using=None, savepoint=True, durable=False, *, safe_exceptions=(Exception,))`\n\n * `using` - database name to use\n   ([same as original atomic](https://docs.djangoproject.com/en/4.1/topics/db/transactions/#django.db.transaction.atomic)),\n * `savepoint` - disable usage of savepoints in inner blocks\n   ([same as original atomic](https://docs.djangoproject.com/en/4.1/topics/db/transactions/#django.db.transaction.atomic)),\n * `durable` - ensure this is outermost block\n   ([same as original atomic](https://docs.djangoproject.com/en/4.1/topics/db/transactions/#django.db.transaction.atomic)),\n * `safe_exceptions` - collection (e.g. `tuple`) of exceptions which are allowed to pass through `soft_atomic` block without rollback. Typical DB errors (like `IntegrityError`) will still throw. Defaults to: `(Exception,)`.\n\n## Example\n\nLet's take a simple example, where we would like to perform payment operation and raise an exception if it fails.\nWe want to create a database entry for both outcomes.\n\n```python\nfrom django_soft_atomic import soft_atomic\n\nclass PaymentProcessingException(Exception):\n    pass\n\nclass PaymentRequest(models.Model):\n    payment_id = models.TextField()\n    success = models.BooleanField()\n\n@soft_atomic(safe_exceptions=(PaymentProcessingException,))\ndef process_payment(payment_details):\n    payment_id, success = payment_gateway.process_payment(payment_details)\n    PaymentRequest.objects.create(payment_id=payment_id, success=success)\n    if not success:\n        raise PaymentProcessingException(\"Payment was not sucessful\")\n\ndef payment_endpoint(payment_details):\n    try:\n        process_payment(payment_details)\n    except PaymentProcessingException:\n        ...  # handle a failure\n    else:\n        ...  # payment was successful\n    # in either case the `PaymentRequest` record was created in the database\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "django_soft_atomic",
    "package_url": "https://pypi.org/project/django_soft_atomic/",
    "platform": null,
    "project_url": "https://pypi.org/project/django_soft_atomic/",
    "project_urls": {
      "Bug Tracker": "https://github.com/maniek2332/django_soft_atomic/issues",
      "Homepage": "https://github.com/maniek2332/django_soft_atomic"
    },
    "release_url": "https://pypi.org/project/django_soft_atomic/1.1.0/",
    "requires_dist": [
      "django>=3.2"
    ],
    "requires_python": ">=3.6",
    "summary": "A more forgiving variation of django's transaction handling, allowing you to pass some exceptions through atomic block without rollback.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15231550,
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "bcd91592810d4cc08f4781ff38f96f2f9c771786e0a08c36b5c2d7af35db4cb2",
        "md5": "498a3573bf4e0d0aaf943337b6877afc",
        "sha256": "efe239c049d241f9681de5e792e86712bf35864360718d222f0839b2d3c24b90"
      },
      "downloads": -1,
      "filename": "django_soft_atomic-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "498a3573bf4e0d0aaf943337b6877afc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4693,
      "upload_time": "2022-09-27T17:44:02",
      "upload_time_iso_8601": "2022-09-27T17:44:02.850371Z",
      "url": "https://files.pythonhosted.org/packages/bc/d9/1592810d4cc08f4781ff38f96f2f9c771786e0a08c36b5c2d7af35db4cb2/django_soft_atomic-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "f440cf6f4a9c29e48821d60577146ef820e306e40f22ed13c68c0c2c700e3c2c",
        "md5": "f5f5e570fb71371283781ef9da07c132",
        "sha256": "09ffa8825a0364308e39b9b954503a17cf453b48e17873407200fe44205fc5b4"
      },
      "downloads": -1,
      "filename": "django_soft_atomic-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f5f5e570fb71371283781ef9da07c132",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3454,
      "upload_time": "2022-09-27T17:44:00",
      "upload_time_iso_8601": "2022-09-27T17:44:00.394918Z",
      "url": "https://files.pythonhosted.org/packages/f4/40/cf6f4a9c29e48821d60577146ef820e306e40f22ed13c68c0c2c700e3c2c/django_soft_atomic-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}