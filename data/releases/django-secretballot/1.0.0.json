{
  "info": {
    "author": "James Turk",
    "author_email": "james.p.turk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "===================\ndjango-secretballot\n===================\n\n.. image:: https://travis-ci.org/jamesturk/django-secretballot.svg?branch=master\n    :target: https://travis-ci.org/jamesturk/django-secretballot\n\n.. image:: https://img.shields.io/pypi/v/django-secretballot.svg\n    :target: https://pypi.python.org/pypi/django-secretballot\n\n\nDjango voting application that allows voting without a logged in user.\n\nProvides abstract base model for types that the user wishes to allow voting on as well as related utilities including generic views to ease the addition of 'anonymous' voting to a Django project.\n\nWritten by James Turk <dev@jamesturk.net>\n\nSource: http://github.com/jamesturk/django-secretballot/\n\nRequirements\n============\n\nPython >= 2.7\ndjango >= 1.8\n\nUsage\n=====\n\nsettings.py\n-----------\n\n* add ``secretballot`` to INSTALLED_APPS\n* add a secretballot middleware to MIDDLEWARE_CLASSES (see middleware section for details)\n\nmigrations\n----------\n* run ``./manage.py migrate``\n\nEnabling voting for models\n--------------------------\n\nIn order to attach the voting helpers to a particular model it is enough to call ``secretballot.enable_voting_on`` passing the model class.\n\nIt is recommended you call enable_voting on within apps.py::\n\n    class StoryAppConfig(AppConfig):\n\n        def ready(self):\n            story_model = apps.get_model(\"story_app\", \"Story\")\n            secretballot.enable_voting_on(story_model)\n\n\nUsing voting-enabled models\n---------------------------\n\nOnce a model is 'voting-enabled' a number of special fields are available on all instances:\n\nFields\n~~~~~~\n\nvotes: \n    Manager to of all ``Vote`` objects related to the current model (typically doesn't need to be accessed directly)\n    (can be renamed by passing ``votes_name`` parameter to ``enable_voting_on``)\ntotal_upvotes: \n    Total number of +1 votes\n    (can be renamed by passing ``upvotes_name`` parameter to ``enable_voting_on``)\ntotal_downvotes:\n    Total number of -1 votes\n    (can be renamed by passing ``downvotes_name`` parameter to ``enable_voting_on``)\nvote_total:\n    shortcut accessor for (total_upvotes-total_downvotes)\n    (can be renamed by passing ``total_name`` parameter to ``enable_voting_on``)\n_secretballot_enabled\n    boolean indicating that secretballot is enabled (can be tested for with hasattr)\n    (cannot be renamed, exists for a reliable check that secretballot is available even if all\n     other fields were renamed)\n\nFunctions\n~~~~~~~~~\n\nadd_vote:\n    function that takes a token and a vote (+1 or -1) and adds or updates the vote for said token\n    (can be renamed by passing ``add_vote_name`` parameter to ``enable_voting_on``)\nremove_vote:\n    function that takes a token and removes the vote (if present) for said token\n    (can be renamed by passing ``remove_vote_name`` parameter to ``enable_voting_on``)\n\nManager\n~~~~~~~\n\nA special manager is added that enables the inclusion of ``total_upvotes`` and ``total_downvotes`` as well as some extra functionality.\n\nThis manager by default replaces the ``objects`` manager, but this can be altered by passing the ``manager_name`` parameter to ``enable_voting_on``.\n\nThere is also an additional method on the Votable manager:\n\nfrom_request(self, request):\n    When called on a votable object's queryset will add a ``user_vote`` attribute that is the vote cast by the current 'user' (actually the token assigned to the request)\n\nFor example::\n\n    def story_view(request, slug):\n        story = Story.objects.from_request(request).get(pk=slug)\n        # story has the following extra attributes\n        # user_vote: -1, 0, or +1\n        # total_upvotes: total number of +1 votes\n        # total_downvotes: total number of -1 votes\n        # vote_total: total_upvotes-total_downvotes\n        # votes: related object manager to get specific votes (rarely needed)\n\n\ntokens and SecretBallotMiddleware\n---------------------------------\n\nWithout user logins it is impossible to be certain that a user does not vote more than once, but there are several methods to limit abuses.  secretballot takes a fairly hands-off approach to this problem, the Vote object has a ``token`` field that is used to store a uniquely identifying token generated from a request.  To limit how many votes come from a particular ip address it is sufficient to set the token to the IP address, but it is also possible to develop more sophisticated heuristics to limit voters.\n\nsecretballot uses a simple piece of middleware to do this task, and makes it trival for users to define their own middleware that will use whatever heuristic they desire.\n\nSecretBallotMiddleware is an abstract class that defines a generate_token(request) method that should return a string to be used for the token.  \n\nFor convinience several middleware have already been defined:\n\nSecretBallotIpMiddleware:\n    simply sets the token to request.META['REMOTE_ADDR'] -- the user's IP address\nSecretBallotIpUseragentMiddleware:\n    sets the token to a hash of the user's ip address and user agent -- hopefully slightly more unique than IP alone\n\nIf you wish to define your own middleware simply derive a class from SecretBallotMiddleware and implement the generate_token method. If you come up with something that may be useful for others contributions are always welcome.\n\nGeneric Views\n-------------\n\n``secretballot.views`` includes the following generic views::\n\n    vote(request, content_type, object_id, vote, \n         redirect_url=None, template_name=None, template_loader=loader, \n         extra_context=None, context_processors=None, mimetype=None)\n\nThis view creates or alters a vote on the object of ``content_type`` with a primary key of ``object_id``.\nIf a vote already exists it will be replaced (unless vote is 0 in which case it will be deleted).\n\nThe ``token`` attribute of the vote that is used to prevent unlimited voting is set within this view based on the active SecretBallotMiddleware.\n\nDepending on the parameters given the return value of this view varies:\n\n    #. if redirect_url is specified it will be used no matter what\n    #. if template_name is specified it will be used (along with template_loader, context_processors, etc.)\n    #. without redirect_url or template_name a text/json response will be returned\n\ncontent_type:\n    Class that voting is taking place on (a VotableModel-derived model)\n    May be an instance of ``django.contrib.contenttypes.models.ContentType``,\n    the Model class itself, or an \"app.modelname\" string.\nobject_id:\n    primary key of object to vote on\nvote:\n    value of this vote (+1, 0, or -1) (0 deletes the vote)\ncan_vote_test:\n    (optional) function that allows limiting if user can vote or not (see ``can_vote_test``)\nredirect_url:\n    (optional) url to redirect to, if present will redirect instead of returning a normal HttpResponse\ntemplate_name:\n    (optional) template to render to, recieves a context containing ``content_obj`` which is the object voted upon\ntemplate_loader:\n    (optional) template loader to use, defaults to ``django.template.loader``\nextra_context:\n    (optional) dictionary containing any extra context, callables will be called at render time\ncontext_processors:\n    (optional) list of context processors for this view\nmimetype:\n    (optional) mimetype override\n\n\ncan_vote_test\n~~~~~~~~~~~~~\n\ncan_vote_test is an optional argument to the view that can be specified in the urlconf that is called before a vote is recorded for a user\n\nExample implementation of can_vote_test::\n\n    def only_three_votes(request, content_type, object_id, vote):\n        return Vote.objects.filter(content_type=content_type, token=request.secretballot_token).count() < 3\n\nAll can_vote_test methods must take the non-optional parameters to ``secretballot.views.vote`` and should return True if the vote should be allowed.  If the vote is not allowed by default the view will return a 403, but it is also acceptable to raise a different exception.\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jamesturk/django-secretballot/",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-secretballot",
    "package_url": "https://pypi.org/project/django-secretballot/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-secretballot/",
    "project_urls": {
      "Homepage": "http://github.com/jamesturk/django-secretballot/"
    },
    "release_url": "https://pypi.org/project/django-secretballot/1.0.0/",
    "requires_dist": [
      "django"
    ],
    "requires_python": "",
    "summary": "Django anonymous voting application",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11841761,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e44dfc134d71c674f5d64998a24270b466c66a8c155b8f7296bffe052a039076",
        "md5": "9307f8b318c03e900fe2ab3c85ce8988",
        "sha256": "e182ca18ba891265865605c54ed4ea8c9515a8e8c10b6dd261904f9c6ecd64f1"
      },
      "downloads": -1,
      "filename": "django_secretballot-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9307f8b318c03e900fe2ab3c85ce8988",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16209,
      "upload_time": "2017-12-04T18:50:13",
      "upload_time_iso_8601": "2017-12-04T18:50:13.233626Z",
      "url": "https://files.pythonhosted.org/packages/e4/4d/fc134d71c674f5d64998a24270b466c66a8c155b8f7296bffe052a039076/django_secretballot-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5359e0703e2317713f0ffc894e08aba76c837023c99b3b1658995b40a63f97a6",
        "md5": "32ddfde4d3df08ce15e73da397d0972f",
        "sha256": "3570618acfa2ee75976cae674f91124af35e2139635d7893de2cc3d4d04fecb0"
      },
      "downloads": -1,
      "filename": "django-secretballot-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "32ddfde4d3df08ce15e73da397d0972f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10820,
      "upload_time": "2017-12-04T18:50:14",
      "upload_time_iso_8601": "2017-12-04T18:50:14.228984Z",
      "url": "https://files.pythonhosted.org/packages/53/59/e0703e2317713f0ffc894e08aba76c837023c99b3b1658995b40a63f97a6/django-secretballot-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}