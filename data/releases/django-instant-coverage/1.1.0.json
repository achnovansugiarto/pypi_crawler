{
  "info": {
    "author": "colons",
    "author_email": "pypi@colons.co",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Topic :: Software Development :: Testing"
    ],
    "description": ".. image:: https://colons.co/instant-coverage-small.png\n   :alt: A roll of duct tape; the instant coverage logo\n\nInstant Coverage |status|\n=========================\n\n.. |status| image:: https://travis-ci.org/colons/instant-coverage.svg\n   :target: https://travis-ci.org/colons/instant-coverage\n\nYour new Django site need tests. Nothing super fancy, just enough that you know\nyou've not forgotten to close some <div> somewhere and it's not going to start\n500ing next time you deploy. You *could* write unit tests, but those are boring\nand your client sure as hell isn't going to pay for the time.\n\nYou've got five minutes, though.\n\nFeatures\n--------\n\nSimple\n    Iterates through a list of URLs and complains if any of them 500.\n\nMagic\n    Will loudly complain when there are views missing from the list of URLs to\n    test.\n\nHas what you need\n    Comes with `optional mixins`_ for checking links and validating HTML, JSON,\n    your spelling, or WCAG compliance.\n\nExtensible\n    Easily add tests that will run against every view on your website. If you\n    want tests for things like consistent capitalisation of a particular phrase\n    or the universal inclusion of a particular meta tag, you can have them in\n    minutes.\n\nPortable\n    Tested_ on Python 2.7, 3.4, 3.5, and 3.6 with Django versions 1.4 to 2.0,\n    with `some exclusions`_.\n\n.. _some exclusions: https://github.com/colons/instant-coverage/blob/master/.travis.yml\n.. _tested: https://travis-ci.org/colons/instant-coverage\n\nChanges\n=======\n\nChanges made in each release are listed in tags_ in this repository.\n\n.. _tags: https://github.com/colons/instant-coverage/releases\n\nUsage\n=====\n\nInstall\n-------\n\n``pip install django-instant-coverage``\n\n‘Write’ your tests\n------------------\n\nYou'll want a tests module somewhere. I keep mine in my ``PROJECT_DIR``,\nbecause it's testing the whole site and not just one app. Wherever you put it,\nit should be named such that your test runner will find it (``tests.py``\nusually works well) and should contain at least the following:\n\n.. code-block:: python\n\n   from django.test import TestCase\n   from instant_coverage import InstantCoverageMixin\n\n   class EverythingTest(InstantCoverageMixin, TestCase):\n       pass\n\nWith that in place, you should be able to run your tests with ``python\nmanage.py test``. They'll fail, though. You'll get a list of URLs you've not\ntold it to test, looking something like this:\n\n::\n\n   AssertionError: The following views are untested:\n\n   ('^',) ^$ (index)\n   ('^admin/',) ^$ (index)\n   ('^admin/',) ^logout/$ (logout)\n   ('^admin/',) ^password_change/$ (password_change)\n   [...]\n\nIt'll probably contain a bunch of URLs you don't want to test, though, like\nthose from the Django admin app. To quickly exclude entire URL includes, add\ntuples like the ones shown in the failure you just got to your test's\n``uncovered_includes`` attribute:\n\n.. code-block:: python\n\n   class EverythingTest(InstantCoverageMixin, TestCase):\n       uncovered_includes = [\n           ('^admin/',),\n       ]\n\nAdd paths matching the URLs that you *do* actually want to test to\n``covered_urls``, and add paths that match those you *don't* to\n``uncovered_urls``. If you forget what's still missing, run the tests again to\nget an audit of what's left.\n\n.. code-block:: python\n\n   class EverythingTest(InstantCoverageMixin, TestCase):\n       covered_urls = [\n           '/',\n           '/api/',\n           '/0007C3F2760E0541/',\n       ]\n\n       uncovered_urls = [\n           # requires stuff to be in the session\n           '/upload/confirm/',\n           '/shortlist-selection/',\n\n           # only accepts POST\n           '/shortlist-order/',\n\n           # probably tested pretty thoroughly by the django project\n           '/media/woof.jpg',\n       ]\n\nIf you want to use ``reverse()`` rather than hard-code URLs or if you want to\ntest more than one path for a given URL, that is fully supported. Encouraged_,\neven. It doesn't matter how you build it, as long as ``covered_urls`` is a\nlist.\n\n.. _Encouraged: https://github.com/colons/musicfortheblind.co.uk/blob/master/mftb5/tests.py\n\nIf you have views that you can't test without data present in the database,\n`make a fixtures file`_ and `add it to your test class`_.\n\n.. _make a fixtures file: https://docs.djangoproject.com/en/dev/ref/django-admin/#dumpdata-app-label-app-label-app-label-model\n.. _add it to your test class: https://docs.djangoproject.com/en/dev/topics/testing/tools/#django.test.TransactionTestCase.fixtures\n\nUse the provided optional test mixins\n-------------------------------------\n\nBy default, Instant Coverage will make sure none of your views raise unhandled\nexceptions and all of them return status codes between 200 and 399. There's a\ngood chance at least some of the provided `optional mixins`_ will be\nappropriate for your website, so be sure to have a look through them and see\nwhat strikes your fancy. Use them like this:\n\n.. code-block:: python\n\n   from instant_coverage import InstantCoverageMixin, optional\n\n   class EverythingTest(\n       optional.Spelling, optional.ExternalLinks, optional.ValidHTML5,\n       InstantCoverageMixin, TestCase\n   ):\n       # covered_urls, etc...\n\nWrite your own tests\n--------------------\n\n``InstantCoverageMixin`` provides an ``instant_responses`` method that returns\na dictionary of |responses|_ keyed by URL. Test methods you write should\niterate across that. Have a look at the `optional mixins`_ for some examples.\n\n.. |responses| replace:: Django test client ``Response`` objects\n.. _responses: https://docs.djangoproject.com/en/dev/topics/testing/tools/#django.test.Response\n.. _optional mixins: https://github.com/colons/instant-coverage/blob/master/instant_coverage/optional.py\n\nIf you make any that you think might be useful to any other websites, even if a\nminority, a pull request would be very much appreciated.\n\nTest under different circumstances\n----------------------------------\n\nIf you want to test all the URLs you've listed under different circumstances\n(for instance, when a user is logged in or when a different language has been\nselected), create a subclass of your tests and override ``setUp()``. For\ninstance, you might put the following below your ``EverythingTest``:\n\n.. code-block:: python\n\n   from django.contrib.auth import get_user_model\n\n   class LoggedInEverythingTest(EverythingTest):\n       def setUp(self):\n           super(LoggedInEverythingTest, self).setUp()\n           user = get_user_model()(\n               username='user',\n               is_staff=True,\n               is_superuser=True,\n           )\n           user.set_password('pass')\n           user.save()\n           self.assertTrue(self.client.login(username='user', password='pass'))\n\nBe aware that, by default, the test client will follow redirects. If you do not\nwant this, set the ``follow_redirects`` attribute of your tests to ``False``.\nIf you have more specific requirements, you may have to override the\n``get_client_kwargs`` or ``attempt_to_get_internal_url`` methods of your test.\n\nIf you have a bunch of test classes that test the same collection of URLs, you\nmay want to consider inheriting from ``InstantCoverageAPI`` instead of\n``InstantCoverageMixin``; the former will not run any tests that you don't\nexplicitly add yourself.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/colons/instant-coverage",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-instant-coverage",
    "package_url": "https://pypi.org/project/django-instant-coverage/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-instant-coverage/",
    "project_urls": {
      "Homepage": "https://github.com/colons/instant-coverage"
    },
    "release_url": "https://pypi.org/project/django-instant-coverage/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Better-than-nothing testing for Django",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16485760,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d314b03c8e3b3299f8922d4c37b251f76a9a63184a5e1d366e2fe1e674b312a",
        "md5": "4c3c459dc923e51b55a243a10197083e",
        "sha256": "b26aa84c5b2e7a09e5620ccbb9b638ec42b4d79c184fb4887018ac30a828a163"
      },
      "downloads": -1,
      "filename": "django-instant-coverage-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4c3c459dc923e51b55a243a10197083e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12517,
      "upload_time": "2018-03-07T14:51:45",
      "upload_time_iso_8601": "2018-03-07T14:51:45.360360Z",
      "url": "https://files.pythonhosted.org/packages/6d/31/4b03c8e3b3299f8922d4c37b251f76a9a63184a5e1d366e2fe1e674b312a/django-instant-coverage-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}