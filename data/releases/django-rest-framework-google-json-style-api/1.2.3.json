{
  "info": {
    "author": "Pocheng, Scott",
    "author_email": "pcghuang@gmail.com, scott820914@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# Django REST Framework Google JSON Style API\n\n[![Build Status](https://travis-ci.com/Envive/django-rest-framework-google-json-style-api.svg?branch=master)](https://travis-ci.com/Envive/django-rest-framework-google-json-style-api) \n[![codecov.io](https://codecov.io/github/envive/django-rest-framework-google-json-style-api/coverage.svg?branch=master)](https://codecov.io/github/envive/django-rest-framework-google-json-style-api)\n[![PyPI version](https://badge.fury.io/py/django-rest-framework-google-json-style-api.svg)](https://badge.fury.io/py/django-rest-framework-google-json-style-api)\n\n## Format specification\n- https://google.github.io/styleguide/jsoncstyleguide.xml\n\n## Installation\n\nAt the command line:\n\n```\n$ pip install django-rest-framework-google-json-style-api\n```\n\nAdd the render and parser to your django settings file.\n\n```python\n# ...\nREST_FRAMEWORK = {\n    'PAGE_SIZE': 10,\n    'DEFAULT_PAGINATION_CLASS':\n        'rest_framework_google_json_style_api.pagination.GoogleJsonStylePageNumberPagination',\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_google_json_style_api.renderers.JSONRenderer',\n        # Any other renders\n    ),\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_google_json_style_api.parsers.JSONParser',\n        # Any other parsers\n    ),\n}\n# ...\n```\n\n## Goals\nBy default, Django REST Framework will produce a response like:\n\n```json\n{\n    \"id\": 1,\n    \"username\": \"scott\",\n    \"full_name\": \"Scott Chang\"\n}\n```\n\nand\n\n```json\n[\n    {\n        \"id\": 1,\n        \"username\": \"scott\",\n        \"full_name\": \"Scott Chang\"\n    },\n    {\n        \"id\": 2,\n        \"username\": \"pocheng\",\n        \"full_name\": \"Pocheng Huang\"\n    }\n]\n```\n\nGoogle JSON Style Guide shows a response to look like the following:\n\n```json\n{\n    \"data\": {\n        \"id\": 1,\n        \"username\": \"scott\",\n        \"fullName\": \"Scott Chang\"\n    }\n}\n```\n\nand\n\n```json\n{\n    \"data\": {\n        \"items\":[\n            {\n                \"id\": 1,\n                \"username\": \"scott\",\n                \"fullName\": \"Scott Chang\"\n            },\n            {\n                \"id\": 2,\n                \"username\": \"pocheng\",\n                \"fullName\": \"Pocheng Huang\"\n            }\n        ]\n    }\n}\n```\n\nGoogle JSON Style Guide uses camel case for field names. So, by default the package uses camel case.\nIf you want to use underscores, you must specify it in your django settings file.\n\n```python\nGOOGLE_JSON_STYLE_API = {\n    # ...\n    'CAMELIZE': False\n    # ...\n}\n```\n\n## Pagination\n```json\n{\n    \"method\": \"list\",\n    \"params\": {\n        \"page\": \"1\",\n        \"pageSize\": \"2\"\n    },\n    \"data\": {\n        \"currentItemCount\": 2,\n        \"itemsPerPage\": 2,\n        \"totalItems\": 200,\n        \"pageIndex\": 1,\n        \"totalPages\": 100,\n        \"nextLink\": \"http://example.com/api/v1/?page=2&page_size=2\",\n        \"previousLink\": null,\n        \"items\": [\n            {\n                \"id\": 1,\n                \"username\": \"scott\",\n                \"fullName\": \"Scott Chang\"\n            },\n            {\n                \"id\": 2,\n                \"username\": \"pocheng\",\n                \"fullName\": \"Pocheng Huang\"\n            }\n        ]\n    }\n}\n```\n\n## Attach meta to data object\n\n#### Example\nLet's add the count of items in the data object.\n\n```python\nclass AuthorViewSet(viewsets.ModelViewSet):\n    queryset = Author.objects.all()\n    # ...\n\n    def list(self, request, *args, **kwargs):\n        response = super(AuthorViewSet, self).list(request, *args, **kwargs)\n        response.data = {\n            'meta': {\n                # Add meta data in here\n                'num_items': self.queryset.count(),\n            },\n            # Keep original data in results\n            'results': response.data\n        }\n```\n\n#### Response\n\n```json\n{\n    \"data\": {\n        \"numItems\": 2,\n        \"items\":[\n            {\n                \"id\": 1,\n                \"username\": \"scott\",\n                \"fullName\": \"Scott Chang\"\n            },\n            {\n                \"id\": 2,\n                \"username\": \"pocheng\",\n                \"fullName\": \"Pocheng Huang\"\n            }\n        ]\n    }\n}\n```\n\n\n## Underscoreize Options\nThere are two conventions of snake case.\n\n### Case 1 (default)\n```\nv2Counter -> v_2_counter\nfooBar2 -> foo_bar_2\n```\n\n### Case 2\n```\nv2Counter -> v2_counter\nfooBar2 -> foo_bar2\n```\n\nBy default, the package uses the first case. To use the second case, specify it in your django settings file. The setting only works when you use camel case(default).\n\n```python\nGOOGLE_JSON_STYLE_API = {\n    # ...\n    'JSON_UNDERSCOREIZE': {\n        'no_underscore_before_number': True,\n    },\n    # ...\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Envive",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-framework-google-json-style-api",
    "package_url": "https://pypi.org/project/django-rest-framework-google-json-style-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-framework-google-json-style-api/",
    "project_urls": {
      "Homepage": "https://github.com/Envive"
    },
    "release_url": "https://pypi.org/project/django-rest-framework-google-json-style-api/1.2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Make Google Json Style and Django Rest Framework play nice together.",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9841563,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "538a2624564f760b765f001ed10e7470edc40f6263f9c74196e0ccb618db9e9e",
        "md5": "18d05c53393162e3987383ac510582a5",
        "sha256": "df560a4faf14f4d129d126cfbc3ef7c29c1cae8b7e95596439a1f827a6ac3dd0"
      },
      "downloads": -1,
      "filename": "django-rest-framework-google-json-style-api-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "18d05c53393162e3987383ac510582a5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11614,
      "upload_time": "2021-02-04T07:34:58",
      "upload_time_iso_8601": "2021-02-04T07:34:58.664155Z",
      "url": "https://files.pythonhosted.org/packages/53/8a/2624564f760b765f001ed10e7470edc40f6263f9c74196e0ccb618db9e9e/django-rest-framework-google-json-style-api-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}