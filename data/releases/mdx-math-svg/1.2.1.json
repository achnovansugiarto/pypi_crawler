{
  "info": {
    "author": "Cris Luengo",
    "author_email": "lueng@ieee.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Text Processing :: Markup :: Markdown"
    ],
    "description": "# mdx\\_math\\_svg\n\n[Python-Markdown](https://python-markdown.github.io) extension to render equations as embedded SVG.  \nNo MathJax, no images. Real vector drawings.\n\nThe resulting static pages load fast and will not reflow as equations are formatted.\n\nThe Markdown syntax recognized is:\n```text\n$Equation$, \\(Equation\\)\n\n$$\n    Display Equation\n$$\n\n\\[\n    Display Equation\n\\]\n\n\\begin{align}\n    Display Equations\n\\end{align}\n```\n\n### Examples\n\nThese are some examples of the use of this Markdown plugin:\n\n- My blog, prepared with [Pelican](https://blog.getpelican.com) and Python-Markdown, has some math-heavy posts,\n  for example the post \"[A simple implementation of snakes](https://www.crisluengo.net/archives/217)\".\n\n- The DIPlib documentation, prepared with [dox++](https://crisluengo.github.io/doxpp/), uses this plugin to\n  generate pages like [this one](https://diplib.org/diplib-docs/why_tensors.html) and function documentation like\n  [this ones](https://diplib.org/diplib-docs/nonlinear.html#dip-PeronaMalikDiffusion-dip-Image-CL-dip-Image-L-dip-uint--dip-dfloat--dip-dfloat--dip-String-CL)\n  and the ones below it.\n\n## Installation\n\n### Dependencies\n\nRequires Python 3.6 or newer (I presume, to be tested) and Python-Markdown 3.0 or newer, as\nwell as a LaTeX installation. If you don't have LaTeX, I recommend [TeX Live](https://tug.org/texlive/).\n\nThe extension uses the `latex` and `dvisvgm` commands, which should both be installed with your LaTeX\ndistribution. Make sure these programs are on the path so that they can be found. If you install only a\nsubset of the TeX Live distribution, you will likely need to add the following LaTeX packages using\nthe `tlmgr` tool: `standalone`, `preview`, `ucs`, `newtx`, `fontaxes`, and `xstring`.\n\n### Install from PyPI\n\n```bash\npip install mdx_math_svg\n```\n\n### Install locally\n\n```bash\n./setup.py build\n./setup.py install\n```\n\n## Usage\n\n### Quick and simple\n\nThe simple way to add the extension to the Python-Markdown parser is as follows:\n```python\nimport markdown\n\nextension_configs = {\n    'mdx_math_svg': {\n        'inline_class': 'math',\n        'display_class': 'math'\n    }\n}\nmd = markdown.Markdown(extensions=['mdx_math_svg'], extension_configs=extension_configs)\n```\nSee below for a list of all configuration options. To use the cache, load it before processing your Markdown\ncontent, and save it after:\n```python\nimport mdx_math_svg\n\n# Load cache (if it's there)\nmath_cache_file_name = 'math_cache'\nmdx_math_svg.load_cache(math_cache_file_name)\n\n# Use Python-Markdown instance\nmd.convert(\"My Markdown text\")\n\n# Save cache\nmdx_math_svg.save_cache(math_cache_file_name)\n```\n\n### Preferred method\n\nPython-Markdown documentation says that the preferred method for loading a plugin is to create an instance\nof the plugin and pass it into the Markdown parser, as follows:\n```python\nimport markdown\nimport mdx_math_svg\n\n# Create Python-Markdown instance\nmath_svg_extension = mdx_math_svg.MathSvgExtension(inline_class='math', display_class='math'),\nmd = markdown.Markdown(extensions=[math_svg_extension])\n\n# Load cache (if it's there)\nmath_cache_file_name = 'math_cache'\nmath_svg_extension.latex2svg.load_cache(math_cache_file_name)\n\n# Use Python-Markdown instance\nmd.convert(\"My Markdown text\")\n\n# Save cache\nmath_svg_extension.latex2svg.save_cache(math_cache_file_name)\n```\n\n### Using the cache\n\nThe cache will avoid rendering the same LaTeX equations over and over again every time you rebuild your\nMarkdown content. Only new or changed equations will be rendered.\n\nAny SVG that was in the cache but was not needed this session will be deleted from the cache.\nTherefore, you should never re-use the cache among different projects, each project should have its own cache.\n\nLoad the cache file before you begin any Markdown parsing, and save the cache file when you're done with\nall of the conversion, as shown in the code snippets above. Note that the two code snippets use a different\nsyntax for loading and saving. `math_svg_extension.latex2svg.load_cache()` calls `mdx_math_svg.load_cache()`.\nThere is only one global cache, so it is shared among all instances of the plugin. Programs like Pelican\ncreate a new instance of the plugin for each page they parse, hence the need for a globally-shared cache.\n\n### Usage in Pelican\n\n[Pelican](https://blog.getpelican.com) is a static site generator, a great way to publish a blog. If you choose\nto use it with Markdown formatted input, you can use this plugin to add great-looking equations to your\nblog.\n\nTo enable the plugin, add a line to your `MARKDOWN` extension configuration setting in `pelicanconf.py` with\nthe setting for the `mdx_math_svg` plugin. You should already have this variable declared, all you need to\ndo is add the one line:\n```python\nMARKDOWN = {\n    'extension_configs': {\n        'markdown.extensions.codehilite': {'css_class': 'highlight'},\n        'markdown.extensions.extra': {},\n        'markdown.extensions.meta': {},\n        'mdx_math_svg': {'inline_class': 'math', 'display_class': 'math'},  # Add this line\n    },\n    'output_format': 'html5',\n}\n```\n\nNext, create a file in your Pelican directory called `plugins/mdx_math_svg_cache.py`, and copy the following\ninto it:\n```python\nimport mdx_math_svg\nfrom pelican import signals\n\n_filename = 'math_cache'\n\ndef load_cache(pelican):\n    mdx_math_svg.load_cache(_filename)\n\ndef save_cache(pelican):\n    mdx_math_svg.save_cache(_filename)\n\ndef register():\n    signals.initialized.connect(load_cache)\n    signals.finalized.connect(save_cache)\n```\n\nIn your `pelicanconf.py` file, add the following:\n```python\nPLUGIN_PATHS = [\"plugins\"]\nPLUGINS = [\"mdx_math_svg_cache\"]\n```\nYou might already be using plugins. In this case, simply add the `mdx_math_svg_cache` plugin to the list.\n\nThe plugin code contains the string `'math_cache'`. This is the name of the cache file. Feel free to\nchange its name and/or location.\n\nThis cache doesn't interact well with the cache that Pelican uses. Since it purges equations not processed\nduring the current session, only equations used during the last run of Pelican will be kept. Pages cached\nby Pelican won't be processed by this plugin, and hence their equations will be purged from the cache.\n\n### Configuration parameters\n\nThe extension recognizes the following parameters:\n\n- `inline_class`: Inline math is SVG wrapped in a `<span>` tag, this option adds a class name to it.\n  Defaults to `'math'`.\n- `display_class`: Display math is SVG wrapped in a `<div>` tag, this option adds a class name to it.\n  Defaults to `'math'`.\n- `smart_dollar`: Use mdx\\_math\\_svg's smart dollars. Defaults to `True`. See below for an explanation.\n- `block_syntax`: This is an array that chooses which of the block syntaxes are recognized:\n  \"dollar\" (`$$...$$`), \"square\" (`\\[...\\]`), and/or \"begin\" (`\\begin{env}...\\end{env}`).\n  Defaults to `['dollar', 'square', 'begin']` (all three syntaxes are recognized).\n- `inline_syntax`: This is an array that chooses which of the inline syntaxes are recognized:\n  \"dollar\" (`$...$`), and/or \"round\" (`\\(...\\)`).\n  Defaults to `['dollar', 'round']` (both syntaxes are recognized).\n- `fontsize`: Font size in em for rendering LaTeX equations. Defaults to 1, matching surrounding text,\n  usually. Depending on the font used, you might want to increase or decrease this value a bit.\n- `additional_preamble`: LaTeX commands to add to the LaTeX document preamble. Can be used to load\n  additional packages, for example. Either a string or an array of strings. Defaults to `[]`.  \n  For example, I like to use `'additional_preamble': [r'\\usepackage{nicefrac}']` to enable the `\\nicefrac` command.\n\nThere are other things that can be configured with a bit more difficulty. The `math_svg_extension.latex2svg.params`\nvariable is a struct containing the following:\n```python\nmath_svg_extension.latex2svg.params = {\n    'fontsize': 1,  # em (in the sense used by CSS)\n    'template': r\"\"\"\n\\documentclass[12pt,preview]{standalone}\n{{ preamble }}\n\\begin{document}\n\\begin{preview}\n{{ code }}\n\\end{preview}\n\\end{document}\n\"\"\",\n    'preamble': r\"\"\"\n\\usepackage[utf8x]{inputenc}\n\\usepackage{amsmath}\n\\usepackage{amsfonts}\n\\usepackage{amssymb}\n\\usepackage{newtxtext}\n\\usepackage{newtxmath}\n\"\"\",\n    'latex_cmd': 'latex -interaction nonstopmode -halt-on-error',\n    'dvisvgm_cmd': 'dvisvgm --no-fonts --exact',  # Has '--precision=2' added if the dvisvgm version is >= 2.2.2\n    'libgs': None,  # Gets set through environment variable or default location\n}\n```\nBy changing these values, it is possible to change the preamble, and the options passed to `latex` and `dvisvgm`.\n\nThe `libgs` value contains the path to the Ghostscript library. If it cannot be found through the `LIBGS` environment\nvariable, you can manually set it.\n\n**TODO:** Add extension parameters to modify these values.\n\n### Formatting equations\n\nWe'll assume that you know how to write equations in LaTeX. This extension loads the `amsmath`, `amsfonts` and\n`amssymb` packages in LaTeX. Additional packages can be loaded through the `additional_preamble` setting.\n\nInline equations can (by default) be enclosed in single dollar signs (`$x$`) or escaped parenthesis\n(round brackets, `\\(x\\)`). Note that the dollar signs are \"smart\" (by default), in that it is required for them\nto touch the equation on both sides. That is, no spaces are allowed in between the dollar signs and the contained\nequation. `$ x$` or `$x $` will not be recognized as an equation. This is to prevent sentences such as\n\"I owe you $1.75 and you owe me $2.50\" to be incorrectly recognized as inline equations. This is configured\nwith the `smart_dollar` parameter.\n\nBlock equations can (by default) be enclosed in double dollar signs (`$$xxx$$`), escaped square brackets (`\\[xxx\\]`),\nor any of the LaTeX environments that start math mode, for example `\\begin{align} xxx \\end{align}`. Block equations\nmust have one empty line before and one after, and cannot have any empty lines inside. There should be nothing\nbefore or after the enclosing markers, except for an attribute list at the end if the standard `attr_list`\nextension is enabled.\n\n## License\n\nCopyright 2021 by Cris Luengo   \nDistributed under the MIT license (see [LICENSE](LICENSE)).\n\nBased on:\n\n- Extension logic, recognizing Markdown syntax:  \n  Arithmatex from [PyMdown Extensions](https://github.com/facelessuser/pymdown-extensions)  \n  Copyright 2014 - 2017 Isaac Muse <isaacmuse@gmail.com>  \n  MIT license.\n\n- Converting LaTeX into SVG:  \n  latex2svg.py  \n  Copyright 2017, Tino Wagner  \n  MIT license.\n\n- Tweaking the output of latex2svg for embedding into HTML5, and use of cache:  \n  latex2svgextra.py from [m.css](https://github.com/mosra/m.css)  \n  Copyright 2017, 2018, 2019, 2020 Vladimír Vondruš <mosra@centrum.cz>  \n  MIT license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/crisluengo/mdx_math_svg",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdx-math-svg",
    "package_url": "https://pypi.org/project/mdx-math-svg/",
    "platform": null,
    "project_url": "https://pypi.org/project/mdx-math-svg/",
    "project_urls": {
      "Homepage": "https://github.com/crisluengo/mdx_math_svg"
    },
    "release_url": "https://pypi.org/project/mdx-math-svg/1.2.1/",
    "requires_dist": [
      "Markdown (>=3.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "SVG Math extension for Python-Markdown",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14134034,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ce85c73239d2ea0e7df133066c2925433f1a59645a8f85cf60108a55dfc9827",
        "md5": "9a661c4d51ca4a705f0f291387a45917",
        "sha256": "ab38e7369dd6e8fb10e9acadf85fb91cfe4f6abec414dda57230489b91a93e00"
      },
      "downloads": -1,
      "filename": "mdx_math_svg-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a661c4d51ca4a705f0f291387a45917",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14265,
      "upload_time": "2022-06-14T23:32:29",
      "upload_time_iso_8601": "2022-06-14T23:32:29.944022Z",
      "url": "https://files.pythonhosted.org/packages/2c/e8/5c73239d2ea0e7df133066c2925433f1a59645a8f85cf60108a55dfc9827/mdx_math_svg-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7978fcbf4088a9105cf0da1a53b60f8be0cb10115f439db5d452723256131ab1",
        "md5": "091f0a4dd36b12ea9f2a86ebf0e68395",
        "sha256": "ff0c1e01bd8d2d67fe7ed407875c956c5663b962be13c52650372fcf48d4b173"
      },
      "downloads": -1,
      "filename": "mdx_math_svg-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "091f0a4dd36b12ea9f2a86ebf0e68395",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13278,
      "upload_time": "2022-06-14T23:32:31",
      "upload_time_iso_8601": "2022-06-14T23:32:31.808343Z",
      "url": "https://files.pythonhosted.org/packages/79/78/fcbf4088a9105cf0da1a53b60f8be0cb10115f439db5d452723256131ab1/mdx_math_svg-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}