{
  "info": {
    "author": "Cris Luengo",
    "author_email": "lueng@ieee.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Text Processing :: Markup :: Markdown"
    ],
    "description": "# mdx_math_svg\n\nPython-Markdown extension to render equations as embedded SVG.  \nNo MathJax, no images. Real vector drawings.  \n\nThe resulting static pages load fast and will not reflow as equations are formatted.\n\nThe Markdown syntax recognized is:\n```text\n$Equation$, \\(Equation\\)\n\n$$\n  Display Equation\n$$\n\n\\[\n  Display Equation\n\\]\n\n\\begin{align}\n  Display Equations\n\\end{align}\n```\n\n## Installation\n\n### Dependencies\n\nRequires Python 3.6 or newer (I presume, to be tested) and Python-Markdown 3.0 or newer, as\nwell as a LaTeX installation. If you don't have LaTeX, I recommend [TeX Live](https://tug.org/texlive/).\n\nThe extension uses the `latex` and `dvisvgm` commands, which should both be installed with your LaTeX\ndistribution. Make sure these programs are on the path so that they can be found.\n\n### Install from PyPI\n\n```bash\npip install mdx_math_svg\n```\n\n### Install locally\n\n```bash\n./setup.py build\n./setup.py install\n```\n\n## Usage\n\n### Quick and simple\n\nThe simple way to add the extension to the Python-Markdown parser is as follows:\n```python\nimport markdown\n\nextension_configs = {\n  'mdx_math_svg': {\n    'inline_class': 'math',\n    'display_class': 'math'\n  }\n}\nmd = markdown.Markdown(extensions=['mdx_math_svg'], extension_configs=extension_configs)\n```\nSee below for a list of all configuration options. This does not allow you to use the SVG cache,\nuse the preferred method below instead.\n\n### Preferred method\n\nThe preferred method allows you to use the cache. The cache will avoid rendering the same LaTeX\nequations over and over again every time you rebuild your Markdown content. Only new or changed\nequations will be rendered.\n\n```python\nimport markdown\nimport mdx_math_svg\n\n# Create Python-Markdown instance\nmath_svg_extension = mdx_math_svg.MathSvgExtension(inline_class='math', display_class='math'),\nmd = markdown.Markdown(extensions=[math_svg_extension])\n\n# Load cache (if it's there)\nmath_cache_file_name = 'math_cache'\nmdx_math_svg.load_cache(math_cache_file_name)\n\n# Use Python-Markdown instance\nmd.convert(\"My Markdown text\")\n\n# Save cache\nmdx_math_svg.save_cache(math_cache_file_name)\n```\n\nLoad the cache file before you begin any Markdown parsing, and save the cache file when you're done with\nall of the conversion. Any SVG that was in the cache but was not needed this session will be deleted from\nthe cache. Therefore, you should never re-use the cache among different projects, each project should have\nits own cache.\n\n### Configuration parameters\n\nThe extension recognizes the following parameters:\n\n- `inline_class`: Inline math is SVG wrapped in a `<span>` tag, this option adds a class name to it.\n  Defaults to the empty string.\n- `display_class`: Display math is SVG wrapped in a `<div>` tag, this option adds a class name to it. - Default: ''\"\n  Defaults to the empty string.\n- `smart_dollar`: Use MathSvg's smart dollars. Defaults to `True`. See below for an explanation.\n- `block_syntax`: This is an array that chooses which of the block syntaxes are recognized:\n  \"dollar\" (`$$...$$`), \"square\" (`\\[...\\]`), and/or \"begin\" (`\\begin{env}...\\end{env}`).\n  Defaults to `['dollar', 'square', 'begin']`.\n- `inline_syntax`: This is an array that chooses which of the inline syntaxes are recognized:\n  \"dollar\" (`$...$`), and/or \"round\" (`\\(...\\)`).\n  Defaults to `['dollar', 'round']`.\n- `fontsize`: Font size in em for rendering LaTeX equations. Defaults to 1, matching surrounding text,\n  usually. Depending on the font used, you might want to increase or decrease this value a bit.\n\nThere are other things that can be configured with a bit more difficulty. The `mdx_math_svg.params`\nvariable is a struct containing the following:\n```python\nmdx_math_svg.params = {\n    'fontsize': 1,  # em (in the sense used by CSS)\n    'template': r\"\"\"\n\\documentclass[12pt,preview]{standalone}\n{{ preamble }}\n\\begin{document}\n\\begin{preview}\n{{ code }}\n\\end{preview}\n\\end{document}\n\"\"\",\n    'preamble': r\"\"\"\n\\usepackage[utf8x]{inputenc}\n\\usepackage{amsmath}\n\\usepackage{amsfonts}\n\\usepackage{amssymb}\n\\usepackage{newtxtext}\n\\usepackage{newtxmath}\n\"\"\",\n    'latex_cmd': 'latex -interaction nonstopmode -halt-on-error',\n    'dvisvgm_cmd': 'dvisvgm --no-fonts --exact',\n    'libgs': None,\n}\n```\nBy changing these values, it is possible to change the preamble, and the options passed to `latex` and `dvisvgm`.\n\nThe `libgs` value contains the path to the Ghostscript library. If it cannot be found through the `LIBGS` environment\nvariable, you can manually set it.\n\n### Formatting equations\n\nWe'll assume that you know how to write equations in LaTeX. This extension loads the amsmath, amsfonts and\namssymb packages in LaTeX.\n\nInline equations can (by default) be enclosed in single dollar signs (`$x$`) or escaped parenthesis\n(round brackets, `\\(x\\)`). Note that the dollar signs are \"smart\" (by default), in that it is required for them\nto touch the equation on both sides. That is, no spaces are allowed in between the dollar signs and the contained\nequation. `$ x$` or `$x $` will not be recognized as an equation. This is to prevent sentences such as\n\"I owe you $1.75 and you owe me $2.50\" to be incorrectly recognized as inline equations. This is configured\nwith the `smart_dollar` parameter.\n\nBlock equations can (by default) be enclosed in double dollar signs (`$$xxx$$`), escaped square brackets (`\\[xxx\\]`),\nor any of the LaTeX environments that start math mode, for example `\\begin{align} xxx \\end{align}`. Block equations\nmust have one empty line before and one after, and cannot have any empty lines inside. There should be nothing\nbefore or after the enclosing markers, except for an attribute list at the end if the standard `attr_list`\nextension is enabled.\n\n## License\n\nCopyright 2021 by Cris Luengo   \nDistributed under the MIT license (see [LICENSE](LICENSE)).\n\nBased on:\n\n- Extension logic, recognizing Markdown syntax:  \n  Arithmatex from [PyMdown Extensions](https://github.com/facelessuser/pymdown-extensions)  \n  Copyright 2014 - 2017 Isaac Muse <isaacmuse@gmail.com>  \n  MIT license.\n\n- Converting LaTeX into SVG:  \n  latex2svg.py  \n  Copyright 2017, Tino Wagner  \n  MIT license.\n\n- Tweaking the output of latex2svg for embedding into HTML5, and use of cache:  \n  latex2svgextra.py from [m.css](https://github.com/mosra/m.css)  \n  Copyright 2017, 2018, 2019, 2020 Vladimír Vondruš <mosra@centrum.cz>  \n  MIT license.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/crisluengo/mdx_math_svg",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdx-math-svg",
    "package_url": "https://pypi.org/project/mdx-math-svg/",
    "platform": "",
    "project_url": "https://pypi.org/project/mdx-math-svg/",
    "project_urls": {
      "Homepage": "https://github.com/crisluengo/mdx_math_svg"
    },
    "release_url": "https://pypi.org/project/mdx-math-svg/1.0.0/",
    "requires_dist": [
      "Markdown (>=3.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "SVG Math extension for Python-Markdown",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14134034,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f473963646ef00c176dc168af859729f6efc917f58b857772eff36b2e8aa25b",
        "md5": "3692d92fe2b47e5b973518d63ae063b3",
        "sha256": "9e7bf5c268272501dcb7f2e6b69d98cba25f078930f332ba7600cce8ac702266"
      },
      "downloads": -1,
      "filename": "mdx_math_svg-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3692d92fe2b47e5b973518d63ae063b3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12136,
      "upload_time": "2021-02-02T06:35:04",
      "upload_time_iso_8601": "2021-02-02T06:35:04.635537Z",
      "url": "https://files.pythonhosted.org/packages/5f/47/3963646ef00c176dc168af859729f6efc917f58b857772eff36b2e8aa25b/mdx_math_svg-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d906e49f6d1d7ffea2bd7c66c71f9932d13667cd0d3b945237a6b98bc2e07fa9",
        "md5": "e970173f5e2b775b9196b601cf3bbf7b",
        "sha256": "ea88b2b6c4ad889844bb62bd3c3b333d3fd85cd25c555c3fd2885bee96bb2ea7"
      },
      "downloads": -1,
      "filename": "mdx_math_svg-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e970173f5e2b775b9196b601cf3bbf7b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11213,
      "upload_time": "2021-02-02T06:35:05",
      "upload_time_iso_8601": "2021-02-02T06:35:05.884502Z",
      "url": "https://files.pythonhosted.org/packages/d9/06/e49f6d1d7ffea2bd7c66c71f9932d13667cd0d3b945237a6b98bc2e07fa9/mdx_math_svg-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}