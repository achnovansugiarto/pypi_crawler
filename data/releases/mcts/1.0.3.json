{
  "info": {
    "author": "Paul Sinclair",
    "author_email": "pbsinclair42@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# MCTS\n\nThis package provides a simple way of using Monte Carlo Tree Search in any perfect information domain.  \n\n## Installation \n\nWith pip: `pip install mcts`\n\nWithout pip: Download the zip/tar.gz file of the [latest release](https://github.com/pbsinclair42/MCTS/releases), extract it, and run `python setup.py install`\n\n## Quick Usage\n\nIn order to run MCTS, you must implement a `State` class which can fully describe the state of the world.  It must also implement four methods: \n\n- `getPossibleActions()`: Returns an iterable of all actions which can be taken from this state\n- `takeAction(action)`: Returns the state which results from taking action `action`\n- `isTerminal()`: Returns whether this state is a terminal state\n- `getReward()`: Returns the reward for this state.  Only needed for terminal states. \n\nYou must also choose a hashable representation for an action as used in `getPossibleActions` and `takeAction`.  Typically this would be a class with a custom `__hash__` method, but it could also simply be a tuple or a string.  \n\nOnce these have been implemented, running MCTS is as simple as initializing your starting state, then running:\n\n```python\nfrom mcts import mcts\n\nmcts = mcts(timeLimit=1000)\nbestAction = mcts.search(initialState=initialState)\n```\nSee [naughtsandcrosses.py](https://github.com/pbsinclair42/MCTS/blob/master/naughtsandcrosses.py) for a simple example.  \n\n## Slow Usage\n//TODO\n\n## Collaborating\n\nFeel free to raise a new issue for any new feature or bug you've spotted. Pull requests are also welcomed if you're interested in directly improving the project.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pbsinclair42/MCTS",
    "keywords": "mcts,monte,carlo,tree,search",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mcts",
    "package_url": "https://pypi.org/project/mcts/",
    "platform": "",
    "project_url": "https://pypi.org/project/mcts/",
    "project_urls": {
      "Homepage": "https://github.com/pbsinclair42/MCTS"
    },
    "release_url": "https://pypi.org/project/mcts/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple package to allow users to run Monte Carlo Tree Search on any perfect information domain",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5169762,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "247ec2eaca519533a0d03c4394f3bd012072c9af8ded684d511f861e887b3a3e",
        "md5": "bb47056e6844b31ed4e16081e339e462",
        "sha256": "5ed099bc4c8f5a3350274c0b844c77fbd201ca5846bc8e553bfaac67b848c5f8"
      },
      "downloads": -1,
      "filename": "mcts-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb47056e6844b31ed4e16081e339e462",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4129,
      "upload_time": "2018-12-17T22:04:00",
      "upload_time_iso_8601": "2018-12-17T22:04:00.924849Z",
      "url": "https://files.pythonhosted.org/packages/24/7e/c2eaca519533a0d03c4394f3bd012072c9af8ded684d511f861e887b3a3e/mcts-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af18593f68d4ae18f98cbd6ad25dc1e26bf3f455c5cb7e017272218257c21772",
        "md5": "fd5e0c3a2c7005f8b8f4be9af95ab3d2",
        "sha256": "e4a297e17decb966ba10df87ed56c3fc74c36072dc011a8c5ca2bb3a4d691179"
      },
      "downloads": -1,
      "filename": "mcts-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "fd5e0c3a2c7005f8b8f4be9af95ab3d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3233,
      "upload_time": "2018-12-17T22:07:30",
      "upload_time_iso_8601": "2018-12-17T22:07:30.926958Z",
      "url": "https://files.pythonhosted.org/packages/af/18/593f68d4ae18f98cbd6ad25dc1e26bf3f455c5cb7e017272218257c21772/mcts-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}