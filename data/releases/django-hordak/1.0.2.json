{
  "info": {
    "author": "Adam Charnock",
    "author_email": "adam@adamcharnock.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "django-hordak\n=============\n\n**Double entry bookkeeping in Django.**\n\nDjango Hordak provides a `simple model layer`_ for a double-entry bookkeeping\nsystem. The intention is not to provide a full-featured app, but rather\nto provide a reliable foundation on which to build such apps.\n\nData consistency is enforced in the model layer and by Postgres triggers.\n(It may be possible to use MySQL, MSSQL, Maria et al if one skips the\ninstallation of these triggers).\n\nUltimately the intention is to integrate this with swiftwind_ to provide\nan accounting & billing system for a communal household. This interface\nshould be intuitive and suitable for non-experts.\n\n.. image:: https://img.shields.io/pypi/v/django-hordak.svg\n    :target: https://badge.fury.io/py/django-hordak\n\n.. image:: https://img.shields.io/github/license/waldocollective/django-hordak.svg\n    :target: https://pypi.python.org/pypi/django-hordak/\n\n.. image:: https://travis-ci.org/waldocollective/django-hordak.svg?branch=master\n    :target: https://travis-ci.org/waldocollective/django-hordak/\n\n.. image:: https://coveralls.io/repos/github/waldocollective/django-hordak/badge.svg?branch=master\n    :target: https://coveralls.io/github/waldocollective/django-hordak?branch=master\n\nInstallation\n------------\n\nInstallation using pip::\n\n    pip install django-hordak\n\nTested against:\n\n- Django >= 1.8, <= 1.10\n- Python 2.7, 3.4, 3.5, nightly\n- Postgres 9\n\nHordak *may* work with Postgres 8, but this is not tested for.\n\nIt may also be possible to run Hordak on a\nnon-Postgres RDBMS if one skips the ``*_check_*`` migrations, as these are Postgres-specific.\nHowever, this is not recommended as it could lead to database inconsistency.\n\nDesign\n------\n\nThe core models consist of:\n\n- ``Account`` - Such as 'Accounts Receivable', a bank account, etc. Accounts can be arranged as a tree structure,\n  where the balance of the parent account is the summation of the balances of all its children.\n- ``Transaction`` - Represents a movement between accounts. Each transaction must have two or more legs.\n- ``Leg`` - Represents a flow of money into (debit) or out of (credit) a transaction. Debits are represented by\n  negative amounts, and credits by positive amounts. The sum of all a transaction's legs must equal zero. This is\n  enforced with a database constraint.\n\nAdditionally, there are models which related to the import of external bank statement data:\n\n- ``StatementImport`` - Represents a simple import of zero or more statement lines relating to a specific ``Account``.\n- ``StatementLine`` - Represents a statement line. ``StatementLine.create_transaction()`` may be called to\n  create a transaction for the statement line.\n\nLoading Fixtures\n----------------\n\nFixture data can be loaded as normal::\n\n    ./manage.py loaddata top-level-accounts\n\nCreating Fixtures\n-----------------\n\nCreate fixtures as follows::\n\n    ./manage.py dumpdata hordak --indent=2 --natural-primary --natural-foreign > fixtures/my-fixture.json\n\nUsage\n-----\n\nTBA\n\nExplanation: Double Entry for Software Developers\n-------------------------------------------------\n\nThis explanation may be substantially easier to comprehend for those with a STEM background.\n\nThe core of double entry accounting works as follows:\n\n- Each account has a 'type' (asset, liability, income, expense, equity)\n- **Debits decrease** the value of an account\n- **Credits increase** the value of an account\n- The sign of any *asset* or *expense* account balance is **always flipped** upon calculation (i.e. multiply by -1)\n- A transaction is comprised of 1 or more credits **and** 1 or more debits\n- The value of a transaction's debits and credits must be equal (money into transaction = money out of transaction).\n\nExamples\n~~~~~~~~\n\nYou live in a shared house. Everyone pays their share into a communal bank account\nevery month.\n\nExample 1: Saving money to pay a bill (no flipping)\n'''''''''''''''''''''''''''''''''''''''''''''''''''\n\nYou pay the electricity bill every three months. Therefore every month you take £100\nfrom everyone's contributions and put it into Electricity Payable account (a liability\naccount) in the knowledge that you will pay the bill from this account when it arrives:\n\nThese accounts are income & liability accounts, so neither balance needs to be flipped. Therefore:\n\n* Balances before:\n\n  * *Rent Income*: £500\n  * *Electricity Payable* (liability): £0\n\n* **Transaction**:\n\n  * £100 from *Rent Income* to *Electricity Payable*\n\n* Balances after:\n\n  * *Rent Income*: £400\n  * *Electricity Payable* (liability): £100\n\nThis should also make intuitive sense. Some of the rent income will be used to pay the electricity\nbill, therefore the former decreases and the latter increases.\n\nExample 2: Saving money to pay a bill (flipping)\n''''''''''''''''''''''''''''''''''''''''''''''''\n\nAt the start of every month each housemate pays into the communal bank account. We\nshould therefore represent this somehow in our double entry system.\n\nWe have an account called *Bank*, which is an asset account (because this is money\nwe actually have). We also have a *Rent Income* account which, as the name implies, is an\nincome account.\n\nTherefore, **to represent the fact that we have been paid money, we must create a transaction**.\nHowever, money cannot be injected from outside our double entry system, so how do we deal with this?\n\nLet's show how we represent a single housemate's payment:\n\n* Balances before:\n\n  * *Bank* (asset): £0\n  * *Rent Income*: £0\n\n* **Transaction:**\n\n  * £500 from *Bank* to *Rent Income*\n\n* Balances after:\n\n  * *Bank* (asset): -£500 * -1 = **£500**\n  * *Rent Income*: £500\n\nBecause the bank account is an asset account, we flip the sign of its balance.\n**The result is that both accounts increase in value.**\n\n\ndjango-hordak is packaged using seed_.\n\n.. _seed: https://github.com/adamcharnock/seed/\n\n.. _swiftwind: https://github.com/waldocollective/swiftwind/\n\n.. _simple model layer: https://github.com/waldocollective/django-hordak/blob/master/hordak/models.py",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/waldocollective/django-hordak",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-hordak",
    "package_url": "https://pypi.org/project/django-hordak/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-hordak/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/waldocollective/django-hordak"
    },
    "release_url": "https://pypi.org/project/django-hordak/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Double entry book keeping in Django",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16906653,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbb7600ef0eb6db54a7d0df7ab64fa48f0a0c5699fef715fcf711cba17609f09",
        "md5": "c7601b6a2644818e3c23b0877a54aeb3",
        "sha256": "3907baf9e88c28c5dc49be2dcbbdde5aa3a0973d17b3b8a59371b718071871a8"
      },
      "downloads": -1,
      "filename": "django_hordak-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c7601b6a2644818e3c23b0877a54aeb3",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "requires_python": null,
      "size": 24614,
      "upload_time": "2016-10-09T09:29:09",
      "upload_time_iso_8601": "2016-10-09T09:29:09.809533Z",
      "url": "https://files.pythonhosted.org/packages/bb/b7/600ef0eb6db54a7d0df7ab64fa48f0a0c5699fef715fcf711cba17609f09/django_hordak-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e375836fd6dd9fa9a3d75572ee4a8a389b3275cb909549a2e066283d3c82099",
        "md5": "9c2d8c5143ea12cfc0b94cfeebbfa4f6",
        "sha256": "3c3dd38d954a2004c317f1fe4890e7e252ba722681e94956112dc8e419a5901b"
      },
      "downloads": -1,
      "filename": "django-hordak-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9c2d8c5143ea12cfc0b94cfeebbfa4f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20184,
      "upload_time": "2016-10-09T09:29:07",
      "upload_time_iso_8601": "2016-10-09T09:29:07.254894Z",
      "url": "https://files.pythonhosted.org/packages/0e/37/5836fd6dd9fa9a3d75572ee4a8a389b3275cb909549a2e066283d3c82099/django-hordak-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}