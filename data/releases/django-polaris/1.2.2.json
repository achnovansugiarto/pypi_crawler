{
  "info": {
    "author": "Jake Urban",
    "author_email": "jake@stellar.org",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "==================\nWelcome to Polaris\n==================\n\n.. _readthedocs: https://django-polaris.readthedocs.io/\n.. _tutorial: https://django-polaris.readthedocs.io/en/stable/tutorials/index.html\n.. _`email list`: https://groups.google.com/g/stellar-polaris\n\nTo get a SEP-24 anchor server running quickly, see the tutorial_.\n\nFor important updates on Polaris' development and releases please join the `email list`_.\n\nThe documentation below outlines the common set up needed for any Polaris deployment, but\neach SEP implementation has its own configuration and integration requirements. These\nrequirements are described in the documentation for each SEP.\n\nWhat is Polaris?\n================\n\n.. _Stellar Development Foundation: https://www.stellar.org/\n.. _github: https://github.com/stellar/django-polaris\n.. _django app: https://docs.djangoproject.com/en/2.2/intro/reusable-apps/\n.. _demo wallet: http://demo-wallet.stellar.org\n\nPolaris is an extendable `django app`_ for Stellar Ecosystem Proposal (SEP) implementations\nmaintained by the `Stellar Development Foundation`_ (SDF). Using Polaris, you can run a web\nserver supporting any combination of SEP-1, 6, 10, 12, 24, and 31.\n\nWhile Polaris handles the majority of the business logic described in each SEP, there are\npieces of functionality that can only be implemented by the developer using Polaris.\nFor example, only an anchor can implement the integration with their partner bank.\n\nThis is why each SEP implemented by Polaris comes with a programmable interface, or\nintegration points, for developers to inject their own business logic.\n\nThe complete documentation can be found on readthedocs_. The SDF also runs a reference\nserver using Polaris that can be tested using our `demo wallet`_.\n\nInstallation and Configuration\n==============================\n\n.. _Django docs: https://docs.djangoproject.com/en/3.0/\n\nThese instructions assume you have already set up a django project. If you haven't,\ntake a look at the `Django docs`_. It also assumes you have a database configured\nfrom the project's ``settings.py``.\n\nFirst make sure you have ``cd``'ed into your django project's main directory\nand then run\n::\n\n    pip install django-polaris\n\nSettings\n^^^^^^^^\n\n.. _corsheaders signal: https://github.com/adamchainz/django-cors-headers#signals\n.. _corsheaders documentation: https://github.com/adamchainz/django-cors-headers\n\nAdd the following to ``INSTALLED_APPS`` in settings.py.\n::\n\n    INSTALLED_APPS = [\n        ...,\n        \"corsheaders\",\n        \"rest_framework\",\n        \"polaris\",\n    ]\n\nAdd ``CorsMiddleware`` to your ``settings.MIDDLEWARE``. It should be listed above\nother middleware that can return responses such as ``CommonMiddleware``.\n::\n\n    MIDDLEWARE = [\n        ...,\n        'corsheaders.middleware.CorsMiddleware',\n        ...\n    ]\n\nPolaris will now accept requests from all origins to its endpoints. It does this\nby adding `corsheaders signal`_ that checks the request URI. However this\ndoes not change the CORS policy for any other endpoint on the server. You can change\nthis functionality using the settings listed in the `corsheaders documentation`_.\n\nEnsure ``BASE_DIR`` is defined in your project's settings.py. Django adds this setting\nautomatically. Polaris uses this to find your ``.env`` file. If this setting isn't present,\nPolaris will try to use the ``ENV_PATH`` setting. It should be the path to the ``.env`` file.\n::\n\n    BASE_DIR = \"<path to your django project's top-level directory>\"\n\nOptionally, you can add Polaris' logger to your `LOGGING` configuration. For example:\n::\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'formatters': {\n            'simple': {\n                'format': '{levelname} {message}',\n                'style': '{',\n            },\n        },\n        'handlers': {\n            'console': {\n                'level': 'DEBUG',\n                'class': 'logging.StreamHandler',\n                'formatter': 'simple'\n            }\n        },\n        'loggers': {\n            'myapp': {\n                'handlers': ['console'],\n                'propogate': True,\n                'LEVEL': 'DEBUG'\n            },\n            'polaris': {\n                'handlers': ['console'],\n                'propagate': True,\n                'LEVEL': 'INFO'\n            },\n        }\n    }\n\nYou may want to configure the ``LEVEL`` of the Polaris logger differently depending on whether you're running the service locally or in production. One way to do this by reading a ``POLARIS_LOG_LEVEL`` variable, or something similar, from the project's environment.\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nPolaris uses environment variables that should be defined in the\nenvironment or included in ``BASE_DIR/.env`` or ``ENV_PATH``.\n::\n\n    STELLAR_NETWORK_PASSPHRASE=\"Test SDF Network ; September 2015\"\n    HORIZON_URI=\"https://horizon-testnet.stellar.org/\"\n    HOST_URL=\"https://example.com\"\n\nEndpoints\n^^^^^^^^^\n\nAdd the Polaris endpoints in ``urls.py``\n::\n\n    import polaris.urls\n    from django.urls import path, include\n\n    urlpatterns = [\n        ...,\n        path(\"\", include(polaris.urls)),\n    ]\n\nOnce you have implemented all the steps above, go to the documentation for each SEP\nyou want the anchor server to support and follow the configuration instructions. Once\nyour SEPs are configured, you can build the database and create your an ``Asset``\nobject.\n\nDatabase Models\n^^^^^^^^^^^^^^^\n\n.. _psycopg2: https://pypi.org/project/psycopg2/\n.. _repository: https://github.com/stellar/django-polaris/issues\n.. _Fernet symmetric encryption: https://cryptography.io/en/latest/fernet/\n.. _Asset: https://django-polaris.readthedocs.io/en/stable/models/index.html#polaris.models.Asset\n\nSEP-1, 6, and 24 require Polaris' database models. Polaris currently only supports\nPostgreSQL and uses psycopg2_ to connect to the database. If you use another\ndatabase, file an issue in the project's github repository_.\n\nRun migrations to create these tables in your database.\n::\n\n    python manage.py migrate\n\nNow, create an ``Asset`` database object for each asset you intend to anchor. Get\ninto your python shell, then run something like this:\n::\n\n    from polaris.models import Asset\n    Asset.objects.create(\n        code=\"USD\",\n        issuer=\"<the issuer address>\",\n        distribution_seed=\"<distribution account secret key>\",\n        significant_decimals=2,\n        deposit_fee_fixed=1,\n        deposit_fee_percent=2,\n        withdrawal_fee_fixed=1,\n        withdrawal_fee_percent=2,\n        deposit_min_amount=10,\n        deposit_max_amount=10000,\n        withdrawal_min_amount=10,\n        withdrawal_max_amount=10000,\n        sep24_enabled=True,\n        sep6_enabled=True\n    )\n\nThe ``distribution_seed`` column is encrypted at the database layer using `Fernet symmetric\nencryption`_, and only decrypted when held in memory within an ``Asset`` object. It uses\nyour Django project's ``SECRET_KEY`` setting to generate the encryption key, **so make sure\nits value is unguessable and kept a secret**.\n\nSee the Asset_ documentation for more information on the fields used.\n\nAt this point, you should configure Polaris for one or more of the\nSEPs currently supported. Once configured, check out how to run the\nserver as described in the next section.\n\nRunning the Web Server\n======================\n\nProduction\n^^^^^^^^^^\n\n.. _gunicorn: https://gunicorn.org\n\nPolaris should only be deployed using HTTPS in production. You should do this\nby using a HTTPS web server or running Polaris behind a HTTPS reverse proxy.\nThe steps below outline the settings necessary to ensure your deployment is\nsecure.\n\nTo redirect HTTP traffic to HTTPS, add the following to settings.py:\n::\n\n    SECURE_SSL_REDIRECT = True\n\nAnd if you're running Polaris behind a HTTPS proxy:\n::\n\n    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n\nThis tells Django what header to check and what value it should be in\norder to consider the incoming request secure.\n\nLocal Development\n^^^^^^^^^^^^^^^^^\n\nLocally, Polaris can be run using Django's HTTP development server\n::\n\n    python manage.py runserver\n\nIf you're using Polaris' SEP-24 support, you also need to use the following\nenvironment variable:\n::\n\n    LOCAL_MODE=1\n\nThis is necessary to disable SEP-24's interactive flow authentication mechanism,\nwhich requires HTTPS. **Do not use local mode in production**.\n\nContributing\n============\n\n.. _this tool: https://github.com/stellar/create-stellar-token\n\nTo set up the development environment or run the SDF's reference server, run follow the\ninstructions below.\n::\n\n    git clone git@github.com:stellar/django-polaris.git\n    cd django-polaris\n\nThen, add a ``.env`` file in the ``example`` directory. You'll need to create\na signing account on Stellar's testnet and add it to your environment variables.\n::\n\n    DJANGO_SECRET_KEY=\"supersecretdjangokey\"\n    DJANGO_DEBUG=True\n\n    SIGNING_SEED=<your signing account seed>\n\n    STELLAR_NETWORK_PASSPHRASE=\"Test SDF Network ; September 2015\"\n\n    HORIZON_URI=\"https://horizon-testnet.stellar.org/\"\n    SERVER_JWT_KEY=\"your jwt local secret\"\n    DJANGO_ALLOWED_HOSTS=localhost,0.0.0.0,127.0.0.1\n    HOST_URL=\"http://localhost:8000\"\n    LOCAL_MODE=True\n\nNext, you'll need to create an asset on the Stellar test network and setup a distribution account.\nSee `this tool`_ for creating assets on testnet.\n\nNow you're ready to add your asset to Polaris. Run the following commands:\n::\n\n    $ docker-compose build\n    $ docker-compose up server\n\nGo to http://localhost:8000/admin and login with the default credentials (root, password).\n\nGo to the Assets menu, and click \"Add Asset\"\n\nEnter the code, issuer, and distribution seed for the asset. Make sure that the asset is enabled for SEP-24 and SEP-6\nby selecting the `Deposit Enabled`, `Withdrawal Enabled`, and either both or one of `Sep24 Enabled` and `Sep6 Enabled`.\n\nClick `Save`.\n\nFinally, kill the current ``docker-compose`` process and run a new one:\n::\n\n    $ docker-compose up\n\nYou should now have a anchor server running SEP 6 & 24 on port 8000.\nWhen you make changes locally, the docker containers will restart with the updated code.\n\nTesting\n^^^^^^^\nYou can install the dependencies locally in a virtual environment:\n::\n\n    pip install pipenv\n    cd django-polaris\n    pipenv install --dev\n    pipenv run pytest -c polaris/pytest.ini\n\nOr, you can simply run the tests from inside the docker container. However,\nthis may be slower.\n::\n\n    docker exec -it server pytest -c polaris/pytest.ini\n\nSubmit a PR\n^^^^^^^^^^^\n.. _black: https://pypi.org/project/black/\n\nAfter you've made your changes, push them to you a remote branch\nand make a Pull Request on the stellar/django-polaris master branch.\nNote that Polaris user the `black`_ code formatter, so please format your\ncode before requesting us to merge your changes.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://django-polaris.readthedocs.io/en/stable",
    "keywords": "stellar,sdf,anchor,server,polaris,sep-24,sep24,sep-31,sep31",
    "license": "Apache license 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-polaris",
    "package_url": "https://pypi.org/project/django-polaris/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-polaris/",
    "project_urls": {
      "Homepage": "https://django-polaris.readthedocs.io/en/stable"
    },
    "release_url": "https://pypi.org/project/django-polaris/1.2.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "An extendable Django server for Stellar Ecosystem Proposals",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17290982,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87562f98dc30453fec8c214a884ab450ad97c0a2ab8c3d2212b87663a870e33a",
        "md5": "71067565ccd4f35e5265986cd5bacc48",
        "sha256": "f05dedbe1a646ea436aa7505dc9619ce8734be320cdd7a7312ced2a0190a1c7b"
      },
      "downloads": -1,
      "filename": "django-polaris-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "71067565ccd4f35e5265986cd5bacc48",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 113147,
      "upload_time": "2021-02-17T22:02:40",
      "upload_time_iso_8601": "2021-02-17T22:02:40.055187Z",
      "url": "https://files.pythonhosted.org/packages/87/56/2f98dc30453fec8c214a884ab450ad97c0a2ab8c3d2212b87663a870e33a/django-polaris-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}