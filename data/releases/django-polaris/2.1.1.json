{
  "info": {
    "author": "Jake Urban",
    "author_email": "jake@stellar.org",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "==============\nDjango Polaris\n==============\n\n.. image:: https://circleci.com/gh/stellar/django-polaris.svg?style=shield\n    :target: https://circleci.com/gh/stellar/django-polaris\n\n.. image:: https://codecov.io/gh/stellar/django-polaris/branch/master/graph/badge.svg?token=3DaW3jM6Q8\n    :target: https://codecov.io/gh/stellar/django-polaris\n\n.. image:: https://img.shields.io/badge/python-3.7%20%7C%203.8%20%7C%203.9-blue?style=shield\n    :alt: Python - Version\n    :target: https://pypi.python.org/pypi/django-polaris\n\n.. _readthedocs: https://django-polaris.readthedocs.io/\n.. _tutorial: https://django-polaris.readthedocs.io/en/stable/tutorials/index.html\n.. _`email list`: https://groups.google.com/g/stellar-polaris\n.. _`polaris-project-template`: https://github.com/JakeUrban/polaris-project-template\n\nGetting Started\n===============\n\nIf you're starting without an existing django application, see the `polaris-project-template`_\nrepository for getting started with the boilerplate code. To get a SEP-24 anchor server running\nquickly, see the tutorial_.\n\nFor important updates on Polaris' development and releases please join the `email list`_.\n\nThe documentation below outlines the common set up needed for any Polaris deployment, but\neach SEP implementation has its own configuration and integration requirements. These\nrequirements are described in the documentation for each SEP.\n\nWhat is Polaris?\n================\n\n.. _Stellar Development Foundation: https://www.stellar.org/\n.. _github: https://github.com/stellar/django-polaris\n.. _django app: https://docs.djangoproject.com/en/2.2/intro/reusable-apps/\n.. _demo wallet: http://demo-wallet.stellar.org\n\nPolaris is an extendable `django app`_ for Stellar Ecosystem Proposal (SEP) implementations\nmaintained by the `Stellar Development Foundation`_ (SDF). Using Polaris, you can run a web\nserver supporting any combination of SEP-1, 6, 10, 12, 24, and 31.\n\nWhile Polaris implements the majority of the functionality described in each SEP, there are\npieces of functionality that can only be implemented by the developer using Polaris.\nFor example, only an anchor can implement the integration with their partner bank.\n\nThis is why each SEP implemented by Polaris comes with a programmable interface for developers\nto inject their own business logic.\n\nThe complete documentation can be found on readthedocs_. The SDF also runs a reference\nserver using Polaris that can be tested using our `demo wallet`_.\n\nInstallation and Configuration\n==============================\n\n.. _Django docs: https://docs.djangoproject.com/en/3.0/\n\nThese instructions assume you have already set up a django project. If you haven't,\ntake a look at the `Django docs`_. It also assumes you have a database configured\nfrom the project's ``settings.py``.\n\nFirst make sure you have ``cd``'ed into your django project's main directory\nand then run\n\n.. code-block:: console\n\n    pip install django-polaris\n\nSettings\n^^^^^^^^\n\n.. _corsheaders signal: https://github.com/adamchainz/django-cors-headers#signals\n.. _corsheaders documentation: https://github.com/adamchainz/django-cors-headers\n\nAdd the following to ``INSTALLED_APPS`` in settings.py.\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        ...,\n        \"corsheaders\",\n        \"rest_framework\",\n        \"polaris\",\n        \"<YOUR APP NAME>\"\n    ]\n\nAdd ``CorsMiddleware`` to your ``settings.MIDDLEWARE``. It should be listed above\nother middleware that can return responses such as ``CommonMiddleware``.\n\n.. code-block:: python\n\n    MIDDLEWARE = [\n        ...,\n        'corsheaders.middleware.CorsMiddleware',\n        ...\n    ]\n\nPolaris will now accept requests from all origins to its endpoints. It does this\nby adding `corsheaders signal`_ that checks the request URI. However this\ndoes not change the CORS policy for any other endpoint on the server. You can change\nthis functionality using the settings listed in the `corsheaders documentation`_.\n\nOptionally, you can add Polaris' logger to your `LOGGING` configuration. For example:\n\n.. code-block:: python\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'formatters': {\n            'simple': {\n                'format': '{levelname} {message}',\n                'style': '{',\n            },\n        },\n        'handlers': {\n            'console': {\n                'level': 'DEBUG',\n                'class': 'logging.StreamHandler',\n                'formatter': 'simple'\n            }\n        },\n        'loggers': {\n            'myapp': {\n                'handlers': ['console'],\n                'propogate': True,\n                'LEVEL': 'DEBUG'\n            },\n            'polaris': {\n                'handlers': ['console'],\n                'propagate': True,\n                'LEVEL': 'INFO'\n            },\n        }\n    }\n\nYou may want to configure the ``LEVEL`` of the Polaris logger differently depending on whether you're running the service locally or in production. One way to do this by reading a ``POLARIS_LOG_LEVEL`` variable, or something similar, from the project's environment.\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\n.. _`environment variables documentation`: https://django-polaris.readthedocs.io/en/stable/#environment-variables\n\nSee the `environment variables documentation`_ for a complete list of supported\nenvironment variables. Some environment variables are required for all Polaris\ndeployments, some are required for a specific set of SEPs, and others are optional.\n\nEnvironment variables can be set within the environment itelf, in a ``.env`` file,\nor specified in your Django settings file.\n\nA ``.env`` file must be within the directory specified by Django's ``BASE_DIR``\nsetting or specified explitly using the ``POLARIS_ENV_PATH`` setting.\n\nTo set the variables in the project's settings file, the variable name must be\nprepended with ``POLARIS_``. Make sure not to put sensitive information in the\nproject's settings file, such as Stellar secret keys, encryption keys, etc.\n\nEndpoints\n^^^^^^^^^\n\nAdd the Polaris endpoints in ``urls.py``\n\n.. code-block:: python\n\n    import polaris.urls\n    from django.urls import path, include\n\n    urlpatterns = [\n        ...,\n        path(\"\", include(polaris.urls)),\n    ]\n\nDatabase Models\n^^^^^^^^^^^^^^^\n\n.. _repository: https://github.com/stellar/django-polaris/issues\n.. _Fernet symmetric encryption: https://cryptography.io/en/latest/fernet/\n.. _Asset: https://django-polaris.readthedocs.io/en/stable/models/index.html#polaris.models.Asset\n.. _`Django-supported databases`: https://docs.djangoproject.com/en/3.2/ref/databases/\n.. _`DATABASES setting docs`: https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nPolaris works with all `Django-supported databases`_. Install your database driver and see the `DATABASES setting docs`_\nfor configuring the database connection. If you find Polaris attempts to make queries incompatible with your database,\nfile an issue in the project's github repository_.\n\nOnce configured, run migrations to create these tables in your database.\n\n.. code-block:: console\n\n    python manage.py migrate\n\nNow, create an ``Asset`` database object for each asset you intend to anchor. Get\ninto your python shell, then run something like this:\n\n.. code-block:: python\n\n    from polaris.models import Asset\n    Asset.objects.create(\n        code=\"USD\",\n        issuer=\"<the issuer address>\",\n        distribution_seed=\"<distribution account secret key>\",\n        sep24_enabled=True,\n        ...\n    )\n\nThe ``distribution_seed`` and ``channel_seed`` columns are encrypted at the database layer using\n`Fernet symmetric encryption`_, and only decrypted when held in memory within an ``Asset`` object.\nIt uses your Django project's ``SECRET_KEY`` setting to generate the encryption key, **so make sure\nits value is unguessable and kept a secret**.\n\nSee the Asset_ documentation for more information on the fields used.\n\nAt this point, you should configure Polaris for one or more of the\nSEPs currently supported. Once configured, check out how to run the\nserver as described in the next section.\n\nRunning the Web Server\n======================\n\nProduction\n^^^^^^^^^^\n\n.. _gunicorn: https://gunicorn.org\n.. _example Nginx configuration: https://github.com/stellar/django-polaris/tree/master/example/nginx-letsencrypt.conf\n\nHTTPS\n-----\n\nPolaris should only be deployed using HTTPS in production. You should do this\nby using a HTTPS web server or running Polaris behind a HTTPS reverse proxy\n(see `example Nginx configuration`_).\nThe steps below outline the settings necessary to ensure your deployment is\nsecure.\n\nTo redirect HTTP traffic to HTTPS, add the following to settings.py:\n\n.. code-block:: python\n\n    SECURE_SSL_REDIRECT = True\n\nAnd if you're running Polaris behind a HTTPS proxy:\n\n.. code-block:: python\n\n    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n\nThis tells Django what header to check and what value it should be in\norder to consider the incoming request secure.\n\nIf you're running SEP-24, add the following\n\n.. code-block:: python\n\n    SESSION_COOKIE_SECURE = True\n\nPolaris requires this setting to be ``True`` for SEP-24 deployments if not in\n``LOCAL_MODE``.\n\nRate Limiting\n-------------\n\n.. _`custom middleware`: https://docs.djangoproject.com/en/3.2/topics/http/middleware/#writing-your-own-middleware\n\nIt is highly encouraged to employ a rate limiting strategy when running Polaris to ensure the service\nremains available for all client applications. Many endpoints retrieve and create database records on\neach request, and some endpoints make outgoing web requests to Horizon or a client application's callback\nendpoint.\n\nRate limiting can be particularly important for SEP-6 or SEP-24 deposit requests because the anchor is\nexpected to poll their off-chain rails to detect if any of the funds from pending transactions initiated\nin these requests have arrived in the anchor's account, which can be a resource-intensive process.\n\nRate limiting can be deployed using a number of strategies that often depend on the anchor's deployment\ninfrastructure. Optionally, the anchor could also implement a rate limiting policy using Django\n`custom middleware`_ support.\n\nLocal Development\n^^^^^^^^^^^^^^^^^\n\nLocally, Polaris can be run using Django's HTTP development server\n\n.. code-block:: console\n\n    python manage.py runserver\n\nIf you're using Polaris' SEP-24 support, you also need to use the following\nenvironment variable:\n\n.. code-block:: console\n\n    LOCAL_MODE=1\n\nThis is necessary to disable SEP-24's interactive flow authentication mechanism,\nwhich requires HTTPS. **Do not use local mode in production**.\n\nContributing\n============\n\n.. _this tool: https://github.com/stellar/create-stellar-token\n\nTo set up the development environment or run the SDF's reference server, run follow the\ninstructions below.\n\n.. code-block:: console\n\n    git clone git@github.com:stellar/django-polaris.git\n    cd django-polaris\n\nThen, add a ``.env`` file in the ``example`` directory. You'll need to create\na signing account on Stellar's testnet and add it to your environment variables.\n\n.. code-block:: console\n\n    DJANGO_SECRET_KEY=\"supersecretdjangokey\"\n    DJANGO_DEBUG=True\n    DJANGO_ALLOWED_HOSTS=localhost,0.0.0.0,127.0.0.1\n    SIGNING_SEED=<your signing account seed>\n    STELLAR_NETWORK_PASSPHRASE=\"Test SDF Network ; September 2015\"\n    HORIZON_URI=\"https://horizon-testnet.stellar.org/\"\n    SERVER_JWT_KEY=\"your jwt local secret\"\n    HOST_URL=\"http://localhost:8000\"\n    LOCAL_MODE=True\n\nNext, you'll need to create an asset on the Stellar test network and setup a distribution account.\nPolaris comes with a `testnet issue` command to help with this.\n\nNow you're ready to add your asset to Polaris. Run the following commands:\n\n.. code-block:: console\n\n    docker-compose build\n    docker-compose up server\n\nUse another process to run the following:\n\n.. code-block:: console\n\n    docker exec -it server python manage.py shell\n\nOnce you enter the python console, create the asset database object:\n\n.. code-block:: python\n\n    from polaris.models import Asset\n\n    Asset.objects.create(...)\n\nEnter the code, issuer, and distribution seed for the asset. Enable the SEPs you want to test.\n\nFinally, exit the python console, kill the current ``docker-compose`` process, and run a new one:\n\n.. code-block:: console\n\n    docker-compose up\n\nThis will run all processes, and you should now have a anchor server running on port 8000.\nWhen you make changes locally, the docker containers will restart with the updated code.\n\nTesting\n^^^^^^^\nYou can install the dependencies locally in a virtual environment:\n\n.. code-block:: console\n\n    pip install pipenv\n    cd django-polaris\n    pipenv install --dev\n    pipenv run pytest -c polaris/pytest.ini\n\nOr, you can simply run the tests from inside the docker container. However,\nthis may be slower.\n\n.. code-block:: console\n\n    docker exec -it server pytest -c polaris/pytest.ini\n\nSubmit a PR\n^^^^^^^^^^^\n\n.. _black: https://pypi.org/project/black/\n\nAfter you've made your changes, push them to you a remote branch\nand make a Pull Request on the stellar/django-polaris master branch.\nNote that Polaris uses the `black`_ code formatter, so please format your\ncode before requesting us to merge your changes.\n\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://django-polaris.readthedocs.io/en/stable",
    "keywords": "stellar,sdf,anchor,server,polaris,sep-24,sep24,sep-31,sep31",
    "license": "Apache license 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-polaris",
    "package_url": "https://pypi.org/project/django-polaris/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-polaris/",
    "project_urls": {
      "Homepage": "https://django-polaris.readthedocs.io/en/stable"
    },
    "release_url": "https://pypi.org/project/django-polaris/2.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "An extendable Django server for Stellar Ecosystem Proposals",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17290982,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae86ef98791af47bc95c07903b13cb5076cd3e753c10e9c61a07040bbaebdc0a",
        "md5": "38d27fd7d639d2f6f82c2f190a8b21f7",
        "sha256": "a0b11f9de122d03f15fb7ad763bde32265e9298dcc7a07da00e7d8c9583bcb91"
      },
      "downloads": -1,
      "filename": "django-polaris-2.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "38d27fd7d639d2f6f82c2f190a8b21f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 218526,
      "upload_time": "2021-11-17T16:20:40",
      "upload_time_iso_8601": "2021-11-17T16:20:40.545371Z",
      "url": "https://files.pythonhosted.org/packages/ae/86/ef98791af47bc95c07903b13cb5076cd3e753c10e9c61a07040bbaebdc0a/django-polaris-2.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}