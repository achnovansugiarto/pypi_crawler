{
  "info": {
    "author": "Nikita Balobanov",
    "author_email": "kit-oz@ya.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Django Rest Framework Complex Filter\n\n[![codecov](https://codecov.io/gh/kit-oz/drf-complex-filter/branch/main/graph/badge.svg?token=B6Z1LWBXOP)](https://codecov.io/gh/kit-oz/drf-complex-filter)\n\nDRF filter for complex queries\n\n## Installing\n\nFor installing use ``pip``\n\n```bash\n    pip install drf-complex-filter\n```\n\n## Usage\n\nAdd ``ComplexQueryFilter`` to ``filter_backends``:\n\n```python\n\n  from drf_complex_filter.filters import ComplexQueryFilter\n\n  class UserViewSet(ModelViewSet):\n      queryset = User.objects.all()\n      serializer_class = UserSerializer\n      filter_backends = [ComplexQueryFilter]\n\n```\n\nAnd get some records\n\n```HTTP\n\n  GET /users?filters={\"type\":\"operator\",\"data\":{\"attribute\":\"first_name\",\"operator\":\"=\",\"value\":\"John\"}}\n```\n\n## Filter operator\n\nOperator may be one of three types\n\n```python\n\n  # Will return Q(field_name=value_for_compare)\n  operator_filter = {\n    \"type\": \"operator\",\n    \"data\": {\n      \"attribute\": \"field_name\",\n      \"operator\": \"=\",\n      \"value\": \"value_for_compare\",\n    }\n  }\n\n  # Will combine through AND all operators passed in \"data\"\n  and_filter = {\n    \"type\": \"and\",\n    \"data\": []\n  }\n\n  # Will combine through OR all operators passed in \"data\"\n  or_filter = {\n    \"type\": \"or\",\n    \"data\": []\n  }\n\n```\n\n## Lookup operators\n\nThere are several basic operators in the package, but you are free to replace or expand this list.\n\n### Existing operators\n\nOperator label | Query operator\n-------------- | --------------\nIs | =\nIs not | !=\nCase-insensitive contains | *\nCase-insensitive not contains | !\nGreater | >\nGreater than or is | >=\nLess | <\nLess than or is | <=\nValue in list | in\nValue not in list | not_in\nCurrent user | me\nNot current user | not_me\n\n### Adding operators\n\nFirst, create a class containing your operators. It should contain at least a \"get_operators\" method that returns a dictionary with your operators.\n\n```python\nclass YourClassWithOperators:\n    def get_operators(self):\n        return {\n            \"simple_operator\": lambda f, v, r, m: Q(**{f\"{f}\": v}),\n            \"complex_operator\": self.complex_operator,\n        }\n\n    @staticmethod\n    def complex_operator(field: str, value=None, request=None, model: Model = None)\n      return Q(**{f\"{field}\": value})\n```\n\nNext, specify this class in the configuration.\n\n```python\nCOMPLEX_FILTER_SETTINGS = {\n    \"COMPARISON_CLASSES\": [\n        \"drf_complex_filter.comparisons.CommonComparison\",\n        \"drf_complex_filter.comparisons.DynamicComparison\",\n        \"path.to.your.module.YourClassWithOperators\",\n    ],\n}\n```\n\nYou can now use these operators to filter models.\n\n## Computed value\n\nSometimes you need to get the value dynamically on the server side instead of writing it directly to the filter.\nTo do this, you can create a class containing the \"get_functions\" method.\n\n```python\nclass YourClassWithFunctions:\n    def get_functions(self):\n        return {\n            \"calculate_value\": self.calculate_value,\n        }\n    def calculate_value(request, model, my_arg):\n      return str(my_arg)\n```\n\nThen register this class in settings.\n\n```python\nCOMPLEX_FILTER_SETTINGS = {\n    \"VALUE_FUNCTIONS\": [\n        \"drf_complex_filter.functions.DateFunctions\"\n        \"path.to.your.module.YourClassWithFunctions\",\n    ],\n}\n```\n\nAnd create an operator with a value like this:\n\n```python\n\n  value = {\n    \"func\": \"name_of_func\",\n    \"kwargs\": { \"my_arg\": \"value_of_my_arg\" },\n  }\n\n  operator_filter = {\n    \"type\": \"operator\",\n    \"data\": {\n      \"attribute\": \"field_name\",\n      \"operator\": \"=\",\n      \"value\": value,\n    }\n  }\n```\n\nWhere:\n\n* __func__ - the name of the method to call\n* __kwargs__ - a dictionary with arguments to pass to the method\n\nThe value will be calculated before being passed to the operator. That allows you to use the value obtained in this way with any operator that can correctly process it\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kit-oz/drf-complex-filter",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-complex-filter",
    "package_url": "https://pypi.org/project/drf-complex-filter/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-complex-filter/",
    "project_urls": {
      "Homepage": "https://github.com/kit-oz/drf-complex-filter"
    },
    "release_url": "https://pypi.org/project/drf-complex-filter/1.1.0/",
    "requires_dist": [
      "djangorestframework"
    ],
    "requires_python": ">= 3.6",
    "summary": "DRF filter for complex queries.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15549342,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a1a4d75875517c8ba01e00601ef0aadb6556e956a311455b401d2d2f2a1619a",
        "md5": "9d682511ffd075766fa0e498eefbca97",
        "sha256": "d607693391ae63c67e5112a31bf43732790851ba8305eb52355f4eed8805ece3"
      },
      "downloads": -1,
      "filename": "drf_complex_filter-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9d682511ffd075766fa0e498eefbca97",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">= 3.6",
      "size": 7753,
      "upload_time": "2021-09-07T07:51:05",
      "upload_time_iso_8601": "2021-09-07T07:51:05.966124Z",
      "url": "https://files.pythonhosted.org/packages/2a/1a/4d75875517c8ba01e00601ef0aadb6556e956a311455b401d2d2f2a1619a/drf_complex_filter-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc1ee490f3107847e5d670365cd201dbad30e120514248b2c2212c1fb4f244ea",
        "md5": "f9209611cb4af2296fe8b2e3c278b829",
        "sha256": "d9170404285a66dd35145fee76170132657f4677fd92b79f2c85f97044656d04"
      },
      "downloads": -1,
      "filename": "drf-complex-filter-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f9209611cb4af2296fe8b2e3c278b829",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.6",
      "size": 13559,
      "upload_time": "2021-09-07T07:51:07",
      "upload_time_iso_8601": "2021-09-07T07:51:07.356075Z",
      "url": "https://files.pythonhosted.org/packages/fc/1e/e490f3107847e5d670365cd201dbad30e120514248b2c2212c1fb4f244ea/drf-complex-filter-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}