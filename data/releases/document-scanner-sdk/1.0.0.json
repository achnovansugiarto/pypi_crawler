{
  "info": {
    "author": "yushulx",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C++",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# Python Document Scanner SDK \nThe project is a Python binding to [Dynamsoft C/C++ Document Scanner SDK](https://www.dynamsoft.com/document-normalizer/docs/introduction/?ver=latest). It aims to help developers quickly build desktop document scanner applications in Python on Windows and Linux.\n\n## About Dynamsoft Document Scanner\nGet a [30-day FREE trial license](https://www.dynamsoft.com/customer/license/trialLicense?product=ddn) to activate the SDK.\n\n\n## Supported Python Edition\n* Python 3.x\n\n## Dependencies\n\n```bash \npip install opencv-python\n```\n\n## Command-line Usage\n```bash \n# Scan documents from images\n$ scandocument -f <file-name> -l <license-key>\n\n# Scan documents from camera video stream\n$ scandocument -c 1 -l <license-key>\n```\n\n## Quick Start\n- Scan documents from an image file:\n    ```python\n    import argparse\n    import docscanner\n    import sys\n    import numpy as np\n    import cv2\n    import time\n\n    def showNormalizedImage(name, normalized_image):\n        mat = docscanner.convertNormalizedImage2Mat(normalized_image)\n        cv2.imshow(name, mat)\n        return mat\n\n    def process_file(filename, scanner):\n        image = cv2.imread(filename)\n        results = scanner.detectMat(image)\n        for result in results:\n            x1 = result.x1\n            y1 = result.y1\n            x2 = result.x2\n            y2 = result.y2\n            x3 = result.x3\n            y3 = result.y3\n            x4 = result.x4\n            y4 = result.y4\n            \n            normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n            showNormalizedImage(\"Normalized Image\", normalized_image)\n            cv2.drawContours(image, [np.int0([(x1, y1), (x2, y2), (x3, y3), (x4, y4)])], 0, (0, 255, 0), 2)\n        \n        cv2.imshow('Document Image', image)\n        cv2.waitKey(0)\n        \n        normalized_image.save(str(time.time()) + '.png')\n        print('Image saved')\n\n    def scandocument():\n        \"\"\"\n        Command-line script for scanning documents from a given image\n        \"\"\"\n        parser = argparse.ArgumentParser(description='Scan documents from an image file')\n        parser.add_argument('-f', '--file', help='Path to the image file')\n        parser.add_argument('-l', '--license', default='', type=str, help='Set a valid license key')\n        args = parser.parse_args()\n        # print(args)\n        try:\n            filename = args.file\n            license = args.license\n            \n            if filename is None:\n                parser.print_help()\n                return\n            \n            # set license\n            if  license == '':\n                docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n            else:\n                docscanner.initLicense(license)\n                \n            # initialize mrz scanner\n            scanner = docscanner.createInstance()\n            ret = scanner.setParameters(docscanner.Templates.color)\n\n            if filename is not None:\n                process_file(filename, scanner)\n                \n        except Exception as err:\n            print(err)\n            sys.exit(1)\n\n    scandocument()\n    ```\n\n    ![python document scanner from file](https://www.dynamsoft.com/codepool/img/2022/09/document-perspective-correction.png)\n\n- Scan documents from camera video stream:\n    ```python\n    import argparse\n    import docscanner\n    import sys\n    import numpy as np\n    import cv2\n    import time\n\n    g_results = None\n    g_normalized_images = []\n\n    def callback(results):\n        global g_results\n        g_results = results\n\n    def showNormalizedImage(name, normalized_image):\n        mat = docscanner.convertNormalizedImage2Mat(normalized_image)\n        cv2.imshow(name, mat)\n        return mat\n        \n    def process_video(scanner):\n        scanner.addAsyncListener(callback)\n        \n        cap = cv2.VideoCapture(0)\n        while True:\n            ret, image = cap.read()\n            \n            ch = cv2.waitKey(1)\n            if ch == 27:\n                break\n            elif ch == ord('n'): # normalize image\n                if g_results != None:\n                    g_normalized_images = []\n                    index = 0\n                    for result in g_results:\n                        x1 = result.x1\n                        y1 = result.y1\n                        x2 = result.x2\n                        y2 = result.y2\n                        x3 = result.x3\n                        y3 = result.y3\n                        x4 = result.x4\n                        y4 = result.y4\n                        \n                        normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n                        g_normalized_images.append((str(index), normalized_image))\n                        mat = showNormalizedImage(str(index), normalized_image)\n                        index += 1\n            elif ch == ord('s'): # save image\n                for data in g_normalized_images:\n                    # cv2.imwrite('images/' + str(time.time()) + '.png', image)\n                    cv2.destroyWindow(data[0])\n                    data[1].save(str(time.time()) + '.png')\n                    print('Image saved')\n                    \n                g_normalized_images = []\n                \n            if image is not None:\n                scanner.detectMatAsync(image)\n            \n            if g_results != None:\n                for result in g_results:\n                    x1 = result.x1\n                    y1 = result.y1\n                    x2 = result.x2\n                    y2 = result.y2\n                    x3 = result.x3\n                    y3 = result.y3\n                    x4 = result.x4\n                    y4 = result.y4\n                    \n                    cv2.drawContours(image, [np.int0([(x1, y1), (x2, y2), (x3, y3), (x4, y4)])], 0, (0, 255, 0), 2)\n                \n            cv2.putText(image, 'Press \"n\" to normalize image', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.putText(image, 'Press \"s\" to save image', (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.putText(image, 'Press \"ESC\" to exit', (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.imshow('Document Scanner', image)\n\n    def scandocument():\n        \"\"\"\n        Command-line script for scanning documents from camera video stream.\n        \"\"\"\n        parser = argparse.ArgumentParser(description='Scan documents from camera')\n        parser.add_argument('-c', '--camera', default=False, type=bool, help='Whether to show the image')\n        parser.add_argument('-l', '--license', default='', type=str, help='Set a valid license key')\n        args = parser.parse_args()\n        # print(args)\n        try:\n            license = args.license\n            camera = args.camera\n            \n            if camera is False:\n                parser.print_help()\n                return\n            \n            # set license\n            if  license == '':\n                docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n            else:\n                docscanner.initLicense(license)\n                \n            # initialize mrz scanner\n            scanner = docscanner.createInstance()\n            ret = scanner.setParameters(docscanner.Templates.color)\n\n            if camera is True:\n                process_video(scanner)\n                \n        except Exception as err:\n            print(err)\n            sys.exit(1)\n\n    scandocument()\n    ```\n    \n    ![python document scanner from camera](https://www.dynamsoft.com/codepool/img/2022/09/python-document-scanner.png)\n\n## Methods\n- `docscanner.initLicense('YOUR-LICENSE-KEY')` # set the license key\n    \n    ```python\n    docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n    ```\n\n- `docscanner.createInstance()` # create a Document Scanner instance\n    \n    ```python\n    scanner = docscanner.createInstance()\n    ```\n- `detectFile(filename)` # do edge detection from an image file\n\n    ```python\n    results = scanner.detectFile(<filename>)\n    ```\n- `detectMat(Mat image)` # do edge detection from Mat\n    ```python\n    image = cv2.imread(<filename>)\n    results = scanner.detectMat(image)\n    for result in results:\n        x1 = result.x1\n        y1 = result.y1\n        x2 = result.x2\n        y2 = result.y2\n        x3 = result.x3\n        y3 = result.y3\n        x4 = result.x4\n        y4 = result.y4\n    ```\n\n- `setParameters(Template)` # Select color, binary or grayscale template\n    \n    ```python\n    scanner.setParameters(docscanner.Templates.color)\n    ```\n\n- `addAsyncListener(callback function)` # start a native thread to run document scanning tasks\n- `detectMatAsync(<opencv mat data>)` # put a document scanning task into the native queue\n    ```python\n    def callback(results):\n        for result in results:\n            print(result.x1)\n            print(result.y1)\n            print(result.x2)\n            print(result.y2)\n            print(result.x3)\n            print(result.y3)\n            print(result.x4)\n            print(result.y4)\n                                                        \n    import cv2\n    image = cv2.imread(<filename>)\n    scanner.addAsyncListener(callback)\n    scanner.detectMatAsync(image)\n    sleep(5)\n    ```\n\n- `normalizeBuffer(mat, x1, y1, x2, y2, x3, y3, x4, y4)` # do perspective correction from Mat\n    ```python\n    normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n    ```\n- `normalizeFile(filename, x1, y1, x2, y2, x3, y3, x4, y4)` # do perspective correction from a file\n    ```python\n    normalized_image = scanner.normalizeFile(<filename>, x1, y1, x2, y2, x3, y3, x4, y4)\n    ```\n- `normalized_image.save(filename)` # save the normalized image to a file\n    ```python\n    normalized_image.save(<filename>)\n    ```\n- `normalized_image.recycle()` # release the memory of the normalized image\n\n## C/C++ API\nTo customize Python API based on C/C++, please refer to the\n[online documentation](https://www.dynamsoft.com/document-normalizer/docs/programming/c/api-reference/?ver=latest).\n\n## How to Build the Python Document Scanner Extension\n- Create a source distribution:\n    \n    ```bash\n    python setup.py sdist\n    ```\n\n- setuptools:\n    \n    ```bash\n    python setup_setuptools.py build\n    python setup_setuptools.py develop \n    ```\n\n- Build wheel:\n    \n    ```bash\n    pip wheel . --verbose\n    # Or\n    python setup.py bdist_wheel\n    ```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yushulx/python-document-scanner-sdk",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "document-scanner-sdk",
    "package_url": "https://pypi.org/project/document-scanner-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/document-scanner-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/yushulx/python-document-scanner-sdk"
    },
    "release_url": "https://pypi.org/project/document-scanner-sdk/1.0.0/",
    "requires_dist": [
      "opencv-python"
    ],
    "requires_python": "",
    "summary": "Document Scanner SDK for document edge detection, border cropping, perspective correction and brightness adjustment",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15835249,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "deeb1b548fec8e80922861635ac8fd6fbf994c16473dc245f8f4891a41063d8c",
        "md5": "f61d329f35754676eaacbb09aabaafbc",
        "sha256": "6ff3f8049f55a45ea2a437c35930501b23c9df931012d8315d65964ea5c458a2"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.0-cp310-cp310-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "f61d329f35754676eaacbb09aabaafbc",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 6894321,
      "upload_time": "2022-09-06T08:02:05",
      "upload_time_iso_8601": "2022-09-06T08:02:05.293413Z",
      "url": "https://files.pythonhosted.org/packages/de/eb/1b548fec8e80922861635ac8fd6fbf994c16473dc245f8f4891a41063d8c/document_scanner_sdk-1.0.0-cp310-cp310-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4f50958d05c4dedc504c7ee0d374c782d549b27fb74f655aa81c832e86c079e",
        "md5": "89a0ef4c32420e78dc8ac843eb5af6fe",
        "sha256": "baae2e01b906fb2bc35b9401762a04797239a39b2c5ce86e592c24ef2e996dd7"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.0-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "89a0ef4c32420e78dc8ac843eb5af6fe",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 4323056,
      "upload_time": "2022-09-06T08:02:07",
      "upload_time_iso_8601": "2022-09-06T08:02:07.252896Z",
      "url": "https://files.pythonhosted.org/packages/c4/f5/0958d05c4dedc504c7ee0d374c782d549b27fb74f655aa81c832e86c079e/document_scanner_sdk-1.0.0-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f64e73c144934d5ef1f27aaa4fb114c18aebd7302f1526208d7efb740bb6a8cf",
        "md5": "bd3eb9aa2a548b8e50973eff32a180b9",
        "sha256": "56411016f9cdb5064d62292191fca5451abc3f76aa7420514239755e537f9f68"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.0-cp36-cp36m-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "bd3eb9aa2a548b8e50973eff32a180b9",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 6893531,
      "upload_time": "2022-09-06T08:02:09",
      "upload_time_iso_8601": "2022-09-06T08:02:09.185446Z",
      "url": "https://files.pythonhosted.org/packages/f6/4e/73c144934d5ef1f27aaa4fb114c18aebd7302f1526208d7efb740bb6a8cf/document_scanner_sdk-1.0.0-cp36-cp36m-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d14eade7efa90da457854950e327e500f04dc0fb5b4ca50f2af074be266ef339",
        "md5": "abb36c3ec9d0f10a05c698ca316ae4d5",
        "sha256": "8ae5cc651f83517f6012dc64897f9ab4adf70e80f25c73cb79d67b8746420ae7"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.0-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "abb36c3ec9d0f10a05c698ca316ae4d5",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 4323804,
      "upload_time": "2022-09-06T08:02:10",
      "upload_time_iso_8601": "2022-09-06T08:02:10.871494Z",
      "url": "https://files.pythonhosted.org/packages/d1/4e/ade7efa90da457854950e327e500f04dc0fb5b4ca50f2af074be266ef339/document_scanner_sdk-1.0.0-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "852b8b15046bc01d05ca8667428b29d3f50eae440e0135af577fdcb77e6c10d5",
        "md5": "b4bcbce3e62468f7215a1fb906567e18",
        "sha256": "416eaeb7966bd5cf6ca4e6b08dd1ec1888197c63f9cfcfb9fe95b70f4e150c69"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.0-cp37-cp37m-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b4bcbce3e62468f7215a1fb906567e18",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 6894831,
      "upload_time": "2022-09-06T08:02:13",
      "upload_time_iso_8601": "2022-09-06T08:02:13.006441Z",
      "url": "https://files.pythonhosted.org/packages/85/2b/8b15046bc01d05ca8667428b29d3f50eae440e0135af577fdcb77e6c10d5/document_scanner_sdk-1.0.0-cp37-cp37m-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58069db0eefd92d129ec6429e51bae7f2034a6e6d443f260836426f2d6dda3a1",
        "md5": "ba34ebbee3064981e40bdcabc448fda8",
        "sha256": "449e3aafbf49c615a5d106812cf537b09426fa6269d92e6f5e07a3c1e0e85270"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.0-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "ba34ebbee3064981e40bdcabc448fda8",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 4323034,
      "upload_time": "2022-09-06T08:02:14",
      "upload_time_iso_8601": "2022-09-06T08:02:14.943635Z",
      "url": "https://files.pythonhosted.org/packages/58/06/9db0eefd92d129ec6429e51bae7f2034a6e6d443f260836426f2d6dda3a1/document_scanner_sdk-1.0.0-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6f53dfbbbfb84f0037a0e374509f348daa30178690444d7d67b79139db46872",
        "md5": "c70e9e381b43d57c61362589ad9b2625",
        "sha256": "08b882a57c4c27fad4f2117e3f7a982729b2eb6b65785b4182a65297af54d233"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.0-cp38-cp38-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c70e9e381b43d57c61362589ad9b2625",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 6895259,
      "upload_time": "2022-09-06T08:02:16",
      "upload_time_iso_8601": "2022-09-06T08:02:16.912461Z",
      "url": "https://files.pythonhosted.org/packages/a6/f5/3dfbbbfb84f0037a0e374509f348daa30178690444d7d67b79139db46872/document_scanner_sdk-1.0.0-cp38-cp38-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "340554580a00e1c2968f11890d30f3be0ca3672fb10d4b32591706a58f6b20d5",
        "md5": "a6e3f3f5c62ec8752ff9932729a85a29",
        "sha256": "0855dd197b07fb841e0acfd149cd05f176bd8183c64520b1e2b6b0892e5c95b4"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.0-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "a6e3f3f5c62ec8752ff9932729a85a29",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 4323050,
      "upload_time": "2022-09-06T08:02:19",
      "upload_time_iso_8601": "2022-09-06T08:02:19.011861Z",
      "url": "https://files.pythonhosted.org/packages/34/05/54580a00e1c2968f11890d30f3be0ca3672fb10d4b32591706a58f6b20d5/document_scanner_sdk-1.0.0-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e5da60092bb9c77cbfae5ed2ede31373d72a3228257bec30a35173efe7afe42",
        "md5": "427c8b0f5b42a813aca9123652960d9d",
        "sha256": "145de4991857ef93a4fc0405b76eb39cfbd8d0079e807d2078d7c722ddc89be5"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.0-cp39-cp39-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "427c8b0f5b42a813aca9123652960d9d",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 6894177,
      "upload_time": "2022-09-06T08:02:20",
      "upload_time_iso_8601": "2022-09-06T08:02:20.782229Z",
      "url": "https://files.pythonhosted.org/packages/7e/5d/a60092bb9c77cbfae5ed2ede31373d72a3228257bec30a35173efe7afe42/document_scanner_sdk-1.0.0-cp39-cp39-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0a9f456fe33ac92bf8b9bc94e8cef7055bf42be139d2a60a13e34da56549eb7",
        "md5": "5d545a4d2499378ff778b9a830db4a8b",
        "sha256": "58a447ca34d13eb8e87cd479ef8cb62630b13dea635c5edf46449307a30763bc"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.0-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "5d545a4d2499378ff778b9a830db4a8b",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 4323053,
      "upload_time": "2022-09-06T08:02:22",
      "upload_time_iso_8601": "2022-09-06T08:02:22.767483Z",
      "url": "https://files.pythonhosted.org/packages/e0/a9/f456fe33ac92bf8b9bc94e8cef7055bf42be139d2a60a13e34da56549eb7/document_scanner_sdk-1.0.0-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9625ad4a846a3c1890cc177c3033935fd48c0d7f6f648887c7fb91b14aaf3445",
        "md5": "115ec87976bff28170ddf60a1bdc73a2",
        "sha256": "f750a82749e7b3a55394b43bf351d3dfa1bdb9e90d32ce1a2287ad323746a226"
      },
      "downloads": -1,
      "filename": "document-scanner-sdk-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "115ec87976bff28170ddf60a1bdc73a2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10928718,
      "upload_time": "2022-09-06T08:02:24",
      "upload_time_iso_8601": "2022-09-06T08:02:24.760291Z",
      "url": "https://files.pythonhosted.org/packages/96/25/ad4a846a3c1890cc177c3033935fd48c0d7f6f648887c7fb91b14aaf3445/document-scanner-sdk-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}