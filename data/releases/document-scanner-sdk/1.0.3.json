{
  "info": {
    "author": "yushulx",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C++",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# Python Document Scanner SDK \nThe project is a Python binding to [Dynamsoft C/C++ Document Scanner SDK](https://www.dynamsoft.com/document-normalizer/docs/introduction/?ver=latest). It aims to help developers quickly build desktop document scanner applications in Python on Windows and Linux.\n\n## About Dynamsoft Document Scanner\nGet a [30-day FREE trial license](https://www.dynamsoft.com/customer/license/trialLicense?product=ddn) to activate the SDK.\n\n\n## Supported Python Edition\n* Python 3.x\n\n## Dependencies\n\n```bash \npip install opencv-python\n```\n\n## Command-line Usage\n```bash \n# Scan documents from images\n$ scandocument -f <file-name> -l <license-key>\n\n# Scan documents from camera video stream\n$ scandocument -c 1 -l <license-key>\n```\n\n## Quick Start\n- Scan documents from an image file:\n    ```python\n    import argparse\n    import docscanner\n    import sys\n    import numpy as np\n    import cv2\n    import time\n\n    def showNormalizedImage(name, normalized_image):\n        mat = docscanner.convertNormalizedImage2Mat(normalized_image)\n        cv2.imshow(name, mat)\n        return mat\n\n    def process_file(filename, scanner):\n        image = cv2.imread(filename)\n        results = scanner.detectMat(image)\n        for result in results:\n            x1 = result.x1\n            y1 = result.y1\n            x2 = result.x2\n            y2 = result.y2\n            x3 = result.x3\n            y3 = result.y3\n            x4 = result.x4\n            y4 = result.y4\n            \n            normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n            showNormalizedImage(\"Normalized Image\", normalized_image)\n            cv2.drawContours(image, [np.int0([(x1, y1), (x2, y2), (x3, y3), (x4, y4)])], 0, (0, 255, 0), 2)\n        \n        cv2.imshow('Document Image', image)\n        cv2.waitKey(0)\n        \n        normalized_image.save(str(time.time()) + '.png')\n        print('Image saved')\n\n    def scandocument():\n        \"\"\"\n        Command-line script for scanning documents from a given image\n        \"\"\"\n        parser = argparse.ArgumentParser(description='Scan documents from an image file')\n        parser.add_argument('-f', '--file', help='Path to the image file')\n        parser.add_argument('-l', '--license', default='', type=str, help='Set a valid license key')\n        args = parser.parse_args()\n        # print(args)\n        try:\n            filename = args.file\n            license = args.license\n            \n            if filename is None:\n                parser.print_help()\n                return\n            \n            # set license\n            if  license == '':\n                docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n            else:\n                docscanner.initLicense(license)\n                \n            # initialize mrz scanner\n            scanner = docscanner.createInstance()\n            ret = scanner.setParameters(docscanner.Templates.color)\n\n            if filename is not None:\n                process_file(filename, scanner)\n                \n        except Exception as err:\n            print(err)\n            sys.exit(1)\n\n    scandocument()\n    ```\n\n    ![python document scanner from file](https://www.dynamsoft.com/codepool/img/2022/09/document-perspective-correction.png)\n\n- Scan documents from camera video stream:\n    ```python\n    import argparse\n    import docscanner\n    import sys\n    import numpy as np\n    import cv2\n    import time\n\n    g_results = None\n    g_normalized_images = []\n\n    def callback(results):\n        global g_results\n        g_results = results\n\n    def showNormalizedImage(name, normalized_image):\n        mat = docscanner.convertNormalizedImage2Mat(normalized_image)\n        cv2.imshow(name, mat)\n        return mat\n        \n    def process_video(scanner):\n        scanner.addAsyncListener(callback)\n        \n        cap = cv2.VideoCapture(0)\n        while True:\n            ret, image = cap.read()\n            \n            ch = cv2.waitKey(1)\n            if ch == 27:\n                break\n            elif ch == ord('n'): # normalize image\n                if g_results != None:\n                    g_normalized_images = []\n                    index = 0\n                    for result in g_results:\n                        x1 = result.x1\n                        y1 = result.y1\n                        x2 = result.x2\n                        y2 = result.y2\n                        x3 = result.x3\n                        y3 = result.y3\n                        x4 = result.x4\n                        y4 = result.y4\n                        \n                        normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n                        g_normalized_images.append((str(index), normalized_image))\n                        mat = showNormalizedImage(str(index), normalized_image)\n                        index += 1\n            elif ch == ord('s'): # save image\n                for data in g_normalized_images:\n                    # cv2.imwrite('images/' + str(time.time()) + '.png', image)\n                    cv2.destroyWindow(data[0])\n                    data[1].save(str(time.time()) + '.png')\n                    print('Image saved')\n                    \n                g_normalized_images = []\n                \n            if image is not None:\n                scanner.detectMatAsync(image)\n            \n            if g_results != None:\n                for result in g_results:\n                    x1 = result.x1\n                    y1 = result.y1\n                    x2 = result.x2\n                    y2 = result.y2\n                    x3 = result.x3\n                    y3 = result.y3\n                    x4 = result.x4\n                    y4 = result.y4\n                    \n                    cv2.drawContours(image, [np.int0([(x1, y1), (x2, y2), (x3, y3), (x4, y4)])], 0, (0, 255, 0), 2)\n                \n            cv2.putText(image, 'Press \"n\" to normalize image', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.putText(image, 'Press \"s\" to save image', (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.putText(image, 'Press \"ESC\" to exit', (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.imshow('Document Scanner', image)\n\n    def scandocument():\n        \"\"\"\n        Command-line script for scanning documents from camera video stream.\n        \"\"\"\n        parser = argparse.ArgumentParser(description='Scan documents from camera')\n        parser.add_argument('-c', '--camera', default=False, type=bool, help='Whether to show the image')\n        parser.add_argument('-l', '--license', default='', type=str, help='Set a valid license key')\n        args = parser.parse_args()\n        # print(args)\n        try:\n            license = args.license\n            camera = args.camera\n            \n            if camera is False:\n                parser.print_help()\n                return\n            \n            # set license\n            if  license == '':\n                docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n            else:\n                docscanner.initLicense(license)\n                \n            # initialize mrz scanner\n            scanner = docscanner.createInstance()\n            ret = scanner.setParameters(docscanner.Templates.color)\n\n            if camera is True:\n                process_video(scanner)\n                \n        except Exception as err:\n            print(err)\n            sys.exit(1)\n\n    scandocument()\n    ```\n    \n    ![python document scanner from camera](https://www.dynamsoft.com/codepool/img/2022/09/python-document-scanner.png)\n\n## Methods\n- `docscanner.initLicense('YOUR-LICENSE-KEY')` # set the license key\n    \n    ```python\n    docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n    ```\n\n- `docscanner.createInstance()` # create a Document Scanner instance\n    \n    ```python\n    scanner = docscanner.createInstance()\n    ```\n- `detectFile(filename)` # do edge detection from an image file\n\n    ```python\n    results = scanner.detectFile(<filename>)\n    ```\n- `detectMat(Mat image)` # do edge detection from Mat\n    ```python\n    image = cv2.imread(<filename>)\n    results = scanner.detectMat(image)\n    for result in results:\n        x1 = result.x1\n        y1 = result.y1\n        x2 = result.x2\n        y2 = result.y2\n        x3 = result.x3\n        y3 = result.y3\n        x4 = result.x4\n        y4 = result.y4\n    ```\n\n- `setParameters(Template)` # Select color, binary or grayscale template\n    \n    ```python\n    scanner.setParameters(docscanner.Templates.color)\n    ```\n\n- `addAsyncListener(callback function)` # start a native thread to run document scanning tasks\n- `detectMatAsync(<opencv mat data>)` # put a document scanning task into the native queue\n    ```python\n    def callback(results):\n        for result in results:\n            print(result.x1)\n            print(result.y1)\n            print(result.x2)\n            print(result.y2)\n            print(result.x3)\n            print(result.y3)\n            print(result.x4)\n            print(result.y4)\n                                                        \n    import cv2\n    image = cv2.imread(<filename>)\n    scanner.addAsyncListener(callback)\n    scanner.detectMatAsync(image)\n    sleep(5)\n    ```\n\n- `normalizeBuffer(mat, x1, y1, x2, y2, x3, y3, x4, y4)` # do perspective correction from Mat\n    ```python\n    normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n    ```\n- `normalizeFile(filename, x1, y1, x2, y2, x3, y3, x4, y4)` # do perspective correction from a file\n    ```python\n    normalized_image = scanner.normalizeFile(<filename>, x1, y1, x2, y2, x3, y3, x4, y4)\n    ```\n- `normalized_image.save(filename)` # save the normalized image to a file\n    ```python\n    normalized_image.save(<filename>)\n    ```\n- `normalized_image.recycle()` # release the memory of the normalized image\n- `clearAsyncListener()` # stop the native thread and clear the registered Python function\n## C/C++ API\nTo customize Python API based on C/C++, please refer to the\n[online documentation](https://www.dynamsoft.com/document-normalizer/docs/programming/c/api-reference/?ver=latest).\n\n## How to Build the Python Document Scanner Extension\n- Create a source distribution:\n    \n    ```bash\n    python setup.py sdist\n    ```\n\n- setuptools:\n    \n    ```bash\n    python setup_setuptools.py build\n    python setup_setuptools.py develop \n    ```\n\n- Build wheel:\n    \n    ```bash\n    pip wheel . --verbose\n    # Or\n    python setup.py bdist_wheel\n    ```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yushulx/python-document-scanner-sdk",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "document-scanner-sdk",
    "package_url": "https://pypi.org/project/document-scanner-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/document-scanner-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/yushulx/python-document-scanner-sdk"
    },
    "release_url": "https://pypi.org/project/document-scanner-sdk/1.0.3/",
    "requires_dist": [
      "opencv-python"
    ],
    "requires_python": "",
    "summary": "Document Scanner SDK for document edge detection, border cropping, perspective correction and brightness adjustment",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15835249,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca0a96c4042c7f6e74b9dd6a2b2cf88962975268dc4f52bc931002b905f3ba0d",
        "md5": "7ec1af2a84bcc257c370db5e18ac9c52",
        "sha256": "b103f46442aa6621ce01323f37553ceb5d7b1addcb4bf6c1b7d3f3775414e3dc"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.3-cp310-cp310-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "7ec1af2a84bcc257c370db5e18ac9c52",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 6893361,
      "upload_time": "2022-11-21T01:46:05",
      "upload_time_iso_8601": "2022-11-21T01:46:05.812795Z",
      "url": "https://files.pythonhosted.org/packages/ca/0a/96c4042c7f6e74b9dd6a2b2cf88962975268dc4f52bc931002b905f3ba0d/document_scanner_sdk-1.0.3-cp310-cp310-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb62465f949cb76991091c48fcb02665d8336d13b72eb8328bfde205868d1352",
        "md5": "0b66dce5a6ef143bfc9574f49720bf9a",
        "sha256": "b3ae0f5443debd750cb9627b15a5dce9381b5389b0bc6d2e8ca762afcfc1293d"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.3-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "0b66dce5a6ef143bfc9574f49720bf9a",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 4323757,
      "upload_time": "2022-11-21T01:46:08",
      "upload_time_iso_8601": "2022-11-21T01:46:08.834006Z",
      "url": "https://files.pythonhosted.org/packages/cb/62/465f949cb76991091c48fcb02665d8336d13b72eb8328bfde205868d1352/document_scanner_sdk-1.0.3-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9fa9eecce566bd0166bbab441c1cf7402b57f382c3d2195536667c6b01d01994",
        "md5": "eeb569286693ba8996ccaf681cf0917e",
        "sha256": "f57ca15e59b8906d16d0814d92f7a4a3b1531748b5653b32272df4601b10968d"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.3-cp36-cp36m-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "eeb569286693ba8996ccaf681cf0917e",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 6892697,
      "upload_time": "2022-11-21T01:46:11",
      "upload_time_iso_8601": "2022-11-21T01:46:11.109690Z",
      "url": "https://files.pythonhosted.org/packages/9f/a9/eecce566bd0166bbab441c1cf7402b57f382c3d2195536667c6b01d01994/document_scanner_sdk-1.0.3-cp36-cp36m-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc60e542f55ba1d2dfc3409b502041a26fde7c3abcc70c5ffb34060f9d171d4c",
        "md5": "091c40e63b488dc308801efc2b583746",
        "sha256": "b08daf4fc203c1a72069fa11f457010b121645812a2b98c821377d2d91248a56"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.3-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "091c40e63b488dc308801efc2b583746",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 4324425,
      "upload_time": "2022-11-21T01:46:13",
      "upload_time_iso_8601": "2022-11-21T01:46:13.340693Z",
      "url": "https://files.pythonhosted.org/packages/fc/60/e542f55ba1d2dfc3409b502041a26fde7c3abcc70c5ffb34060f9d171d4c/document_scanner_sdk-1.0.3-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d183f45d1d3858129c2a4c0bfe03aaca79d6759e58d04bc17137fc6259c085b",
        "md5": "0772baba43c8afddea9ac12072ea0e82",
        "sha256": "372f6b2bf26ec59f79a484d79e7330999c3f0e9004f92e1d5a03779f1e4539fe"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.3-cp37-cp37m-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "0772baba43c8afddea9ac12072ea0e82",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 6893952,
      "upload_time": "2022-11-21T01:46:15",
      "upload_time_iso_8601": "2022-11-21T01:46:15.312005Z",
      "url": "https://files.pythonhosted.org/packages/1d/18/3f45d1d3858129c2a4c0bfe03aaca79d6759e58d04bc17137fc6259c085b/document_scanner_sdk-1.0.3-cp37-cp37m-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2359e7c0f6a76eb289beda6eadaa3cc9254a0995872a9688554eb5fc1467aeea",
        "md5": "367fcd2434b2c2d99b9269a709cd6cd0",
        "sha256": "7620f00556886f4d671be39b06b3f4b709f50df7ba3b8d857081a99158b17c65"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.3-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "367fcd2434b2c2d99b9269a709cd6cd0",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 4323729,
      "upload_time": "2022-11-21T01:46:17",
      "upload_time_iso_8601": "2022-11-21T01:46:17.029605Z",
      "url": "https://files.pythonhosted.org/packages/23/59/e7c0f6a76eb289beda6eadaa3cc9254a0995872a9688554eb5fc1467aeea/document_scanner_sdk-1.0.3-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc36f2e281c4a1fccef44fc38527a1a78d69a033f6e0da4fadfe7853e5561bca",
        "md5": "a33d7fb4e1d7e992570d7f90d5b18493",
        "sha256": "a0e7757a599eee01ae79cbd9bbc579d7915ae6e97e2fdef9f5decc649263738e"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.3-cp38-cp38-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "a33d7fb4e1d7e992570d7f90d5b18493",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 6894341,
      "upload_time": "2022-11-21T01:46:19",
      "upload_time_iso_8601": "2022-11-21T01:46:19.294682Z",
      "url": "https://files.pythonhosted.org/packages/dc/36/f2e281c4a1fccef44fc38527a1a78d69a033f6e0da4fadfe7853e5561bca/document_scanner_sdk-1.0.3-cp38-cp38-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2068c6471cc828af7d8f603ae2c5029cbe8b7b28c5f4dfc622f8fd7b890cd5e8",
        "md5": "a020ab79f07f0b13413c7ff96eadbb84",
        "sha256": "d810e691b8d1a8736db9898c81307e7aeebf936c66471346ae3903556ee87101"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.3-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "a020ab79f07f0b13413c7ff96eadbb84",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 4323747,
      "upload_time": "2022-11-21T01:46:21",
      "upload_time_iso_8601": "2022-11-21T01:46:21.351985Z",
      "url": "https://files.pythonhosted.org/packages/20/68/c6471cc828af7d8f603ae2c5029cbe8b7b28c5f4dfc622f8fd7b890cd5e8/document_scanner_sdk-1.0.3-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5268e1cce64fa9b50bdf331a9c99524bccb4703eefd3fe0b4bcb555dd2f327e2",
        "md5": "18ac7acb3141fafb6977bee817c3f2b2",
        "sha256": "7122a15c335d6a078f818c409583decde5e1b914455c92b435adc205ce3a9456"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.3-cp39-cp39-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "18ac7acb3141fafb6977bee817c3f2b2",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 6893258,
      "upload_time": "2022-11-21T01:46:23",
      "upload_time_iso_8601": "2022-11-21T01:46:23.876791Z",
      "url": "https://files.pythonhosted.org/packages/52/68/e1cce64fa9b50bdf331a9c99524bccb4703eefd3fe0b4bcb555dd2f327e2/document_scanner_sdk-1.0.3-cp39-cp39-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8eed5df0092295f3b6fdf94890f6a67ee50be19542debbfeb90f2eef14969a8",
        "md5": "f19df4021b92decacec2e5571816b56e",
        "sha256": "358744433d1678f8da0811dc8d7447d8e5404e05ad65ff15ce8021e48d5759b0"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.3-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "f19df4021b92decacec2e5571816b56e",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 4323753,
      "upload_time": "2022-11-21T01:46:26",
      "upload_time_iso_8601": "2022-11-21T01:46:26.133308Z",
      "url": "https://files.pythonhosted.org/packages/d8/ee/d5df0092295f3b6fdf94890f6a67ee50be19542debbfeb90f2eef14969a8/document_scanner_sdk-1.0.3-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "211b444fa39977fb1df3cf297787ad12f3abb4ea7e5e9592b6733f50a573e8e4",
        "md5": "0bde7f79f474ad5d47ffef01ba160342",
        "sha256": "ed86505250aa30e691ccebd70062479b1e345de4dbf1956d7f8f75a1ac7bfe1b"
      },
      "downloads": -1,
      "filename": "document-scanner-sdk-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0bde7f79f474ad5d47ffef01ba160342",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10928964,
      "upload_time": "2022-11-21T01:46:27",
      "upload_time_iso_8601": "2022-11-21T01:46:27.996460Z",
      "url": "https://files.pythonhosted.org/packages/21/1b/444fa39977fb1df3cf297787ad12f3abb4ea7e5e9592b6733f50a573e8e4/document-scanner-sdk-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}