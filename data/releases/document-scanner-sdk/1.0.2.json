{
  "info": {
    "author": "yushulx",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C++",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# Python Document Scanner SDK \nThe project is a Python binding to [Dynamsoft C/C++ Document Scanner SDK](https://www.dynamsoft.com/document-normalizer/docs/introduction/?ver=latest). It aims to help developers quickly build desktop document scanner applications in Python on Windows and Linux.\n\n## About Dynamsoft Document Scanner\nGet a [30-day FREE trial license](https://www.dynamsoft.com/customer/license/trialLicense?product=ddn) to activate the SDK.\n\n\n## Supported Python Edition\n* Python 3.x\n\n## Dependencies\n\n```bash \npip install opencv-python\n```\n\n## Command-line Usage\n```bash \n# Scan documents from images\n$ scandocument -f <file-name> -l <license-key>\n\n# Scan documents from camera video stream\n$ scandocument -c 1 -l <license-key>\n```\n\n## Quick Start\n- Scan documents from an image file:\n    ```python\n    import argparse\n    import docscanner\n    import sys\n    import numpy as np\n    import cv2\n    import time\n\n    def showNormalizedImage(name, normalized_image):\n        mat = docscanner.convertNormalizedImage2Mat(normalized_image)\n        cv2.imshow(name, mat)\n        return mat\n\n    def process_file(filename, scanner):\n        image = cv2.imread(filename)\n        results = scanner.detectMat(image)\n        for result in results:\n            x1 = result.x1\n            y1 = result.y1\n            x2 = result.x2\n            y2 = result.y2\n            x3 = result.x3\n            y3 = result.y3\n            x4 = result.x4\n            y4 = result.y4\n            \n            normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n            showNormalizedImage(\"Normalized Image\", normalized_image)\n            cv2.drawContours(image, [np.int0([(x1, y1), (x2, y2), (x3, y3), (x4, y4)])], 0, (0, 255, 0), 2)\n        \n        cv2.imshow('Document Image', image)\n        cv2.waitKey(0)\n        \n        normalized_image.save(str(time.time()) + '.png')\n        print('Image saved')\n\n    def scandocument():\n        \"\"\"\n        Command-line script for scanning documents from a given image\n        \"\"\"\n        parser = argparse.ArgumentParser(description='Scan documents from an image file')\n        parser.add_argument('-f', '--file', help='Path to the image file')\n        parser.add_argument('-l', '--license', default='', type=str, help='Set a valid license key')\n        args = parser.parse_args()\n        # print(args)\n        try:\n            filename = args.file\n            license = args.license\n            \n            if filename is None:\n                parser.print_help()\n                return\n            \n            # set license\n            if  license == '':\n                docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n            else:\n                docscanner.initLicense(license)\n                \n            # initialize mrz scanner\n            scanner = docscanner.createInstance()\n            ret = scanner.setParameters(docscanner.Templates.color)\n\n            if filename is not None:\n                process_file(filename, scanner)\n                \n        except Exception as err:\n            print(err)\n            sys.exit(1)\n\n    scandocument()\n    ```\n\n    ![python document scanner from file](https://www.dynamsoft.com/codepool/img/2022/09/document-perspective-correction.png)\n\n- Scan documents from camera video stream:\n    ```python\n    import argparse\n    import docscanner\n    import sys\n    import numpy as np\n    import cv2\n    import time\n\n    g_results = None\n    g_normalized_images = []\n\n    def callback(results):\n        global g_results\n        g_results = results\n\n    def showNormalizedImage(name, normalized_image):\n        mat = docscanner.convertNormalizedImage2Mat(normalized_image)\n        cv2.imshow(name, mat)\n        return mat\n        \n    def process_video(scanner):\n        scanner.addAsyncListener(callback)\n        \n        cap = cv2.VideoCapture(0)\n        while True:\n            ret, image = cap.read()\n            \n            ch = cv2.waitKey(1)\n            if ch == 27:\n                break\n            elif ch == ord('n'): # normalize image\n                if g_results != None:\n                    g_normalized_images = []\n                    index = 0\n                    for result in g_results:\n                        x1 = result.x1\n                        y1 = result.y1\n                        x2 = result.x2\n                        y2 = result.y2\n                        x3 = result.x3\n                        y3 = result.y3\n                        x4 = result.x4\n                        y4 = result.y4\n                        \n                        normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n                        g_normalized_images.append((str(index), normalized_image))\n                        mat = showNormalizedImage(str(index), normalized_image)\n                        index += 1\n            elif ch == ord('s'): # save image\n                for data in g_normalized_images:\n                    # cv2.imwrite('images/' + str(time.time()) + '.png', image)\n                    cv2.destroyWindow(data[0])\n                    data[1].save(str(time.time()) + '.png')\n                    print('Image saved')\n                    \n                g_normalized_images = []\n                \n            if image is not None:\n                scanner.detectMatAsync(image)\n            \n            if g_results != None:\n                for result in g_results:\n                    x1 = result.x1\n                    y1 = result.y1\n                    x2 = result.x2\n                    y2 = result.y2\n                    x3 = result.x3\n                    y3 = result.y3\n                    x4 = result.x4\n                    y4 = result.y4\n                    \n                    cv2.drawContours(image, [np.int0([(x1, y1), (x2, y2), (x3, y3), (x4, y4)])], 0, (0, 255, 0), 2)\n                \n            cv2.putText(image, 'Press \"n\" to normalize image', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.putText(image, 'Press \"s\" to save image', (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.putText(image, 'Press \"ESC\" to exit', (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.imshow('Document Scanner', image)\n\n    def scandocument():\n        \"\"\"\n        Command-line script for scanning documents from camera video stream.\n        \"\"\"\n        parser = argparse.ArgumentParser(description='Scan documents from camera')\n        parser.add_argument('-c', '--camera', default=False, type=bool, help='Whether to show the image')\n        parser.add_argument('-l', '--license', default='', type=str, help='Set a valid license key')\n        args = parser.parse_args()\n        # print(args)\n        try:\n            license = args.license\n            camera = args.camera\n            \n            if camera is False:\n                parser.print_help()\n                return\n            \n            # set license\n            if  license == '':\n                docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n            else:\n                docscanner.initLicense(license)\n                \n            # initialize mrz scanner\n            scanner = docscanner.createInstance()\n            ret = scanner.setParameters(docscanner.Templates.color)\n\n            if camera is True:\n                process_video(scanner)\n                \n        except Exception as err:\n            print(err)\n            sys.exit(1)\n\n    scandocument()\n    ```\n    \n    ![python document scanner from camera](https://www.dynamsoft.com/codepool/img/2022/09/python-document-scanner.png)\n\n## Methods\n- `docscanner.initLicense('YOUR-LICENSE-KEY')` # set the license key\n    \n    ```python\n    docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n    ```\n\n- `docscanner.createInstance()` # create a Document Scanner instance\n    \n    ```python\n    scanner = docscanner.createInstance()\n    ```\n- `detectFile(filename)` # do edge detection from an image file\n\n    ```python\n    results = scanner.detectFile(<filename>)\n    ```\n- `detectMat(Mat image)` # do edge detection from Mat\n    ```python\n    image = cv2.imread(<filename>)\n    results = scanner.detectMat(image)\n    for result in results:\n        x1 = result.x1\n        y1 = result.y1\n        x2 = result.x2\n        y2 = result.y2\n        x3 = result.x3\n        y3 = result.y3\n        x4 = result.x4\n        y4 = result.y4\n    ```\n\n- `setParameters(Template)` # Select color, binary or grayscale template\n    \n    ```python\n    scanner.setParameters(docscanner.Templates.color)\n    ```\n\n- `addAsyncListener(callback function)` # start a native thread to run document scanning tasks\n- `detectMatAsync(<opencv mat data>)` # put a document scanning task into the native queue\n    ```python\n    def callback(results):\n        for result in results:\n            print(result.x1)\n            print(result.y1)\n            print(result.x2)\n            print(result.y2)\n            print(result.x3)\n            print(result.y3)\n            print(result.x4)\n            print(result.y4)\n                                                        \n    import cv2\n    image = cv2.imread(<filename>)\n    scanner.addAsyncListener(callback)\n    scanner.detectMatAsync(image)\n    sleep(5)\n    ```\n\n- `normalizeBuffer(mat, x1, y1, x2, y2, x3, y3, x4, y4)` # do perspective correction from Mat\n    ```python\n    normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n    ```\n- `normalizeFile(filename, x1, y1, x2, y2, x3, y3, x4, y4)` # do perspective correction from a file\n    ```python\n    normalized_image = scanner.normalizeFile(<filename>, x1, y1, x2, y2, x3, y3, x4, y4)\n    ```\n- `normalized_image.save(filename)` # save the normalized image to a file\n    ```python\n    normalized_image.save(<filename>)\n    ```\n- `normalized_image.recycle()` # release the memory of the normalized image\n- `clearAsyncListener()` # stop the native thread and clear the registered Python function\n## C/C++ API\nTo customize Python API based on C/C++, please refer to the\n[online documentation](https://www.dynamsoft.com/document-normalizer/docs/programming/c/api-reference/?ver=latest).\n\n## How to Build the Python Document Scanner Extension\n- Create a source distribution:\n    \n    ```bash\n    python setup.py sdist\n    ```\n\n- setuptools:\n    \n    ```bash\n    python setup_setuptools.py build\n    python setup_setuptools.py develop \n    ```\n\n- Build wheel:\n    \n    ```bash\n    pip wheel . --verbose\n    # Or\n    python setup.py bdist_wheel\n    ```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yushulx/python-document-scanner-sdk",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "document-scanner-sdk",
    "package_url": "https://pypi.org/project/document-scanner-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/document-scanner-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/yushulx/python-document-scanner-sdk"
    },
    "release_url": "https://pypi.org/project/document-scanner-sdk/1.0.2/",
    "requires_dist": [
      "opencv-python"
    ],
    "requires_python": "",
    "summary": "Document Scanner SDK for document edge detection, border cropping, perspective correction and brightness adjustment",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15835249,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04cf4d277921a3e9ef3ac922f9094b932a27348c9695184fe3bf3139e91da8f9",
        "md5": "dc7eb3c4c15e55ad217ebbe3208eb5af",
        "sha256": "abe060e26b6aaf098bf2b08e90c94a8415b063d94a71adbef0892b89c92583f9"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.2-cp310-cp310-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "dc7eb3c4c15e55ad217ebbe3208eb5af",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 6893295,
      "upload_time": "2022-10-18T08:37:07",
      "upload_time_iso_8601": "2022-10-18T08:37:07.028080Z",
      "url": "https://files.pythonhosted.org/packages/04/cf/4d277921a3e9ef3ac922f9094b932a27348c9695184fe3bf3139e91da8f9/document_scanner_sdk-1.0.2-cp310-cp310-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be783c01c7aac4c4df11fdc918e7f8c4afbcd5badb5562a749d094be99847958",
        "md5": "d996ce0e6e0c93c96a8f9d5b8398ce03",
        "sha256": "07507edc6bfee8e9b178af34ee252f16a6729d805f4029a619d3c69bd3ab3899"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.2-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "d996ce0e6e0c93c96a8f9d5b8398ce03",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 4323654,
      "upload_time": "2022-10-18T08:37:10",
      "upload_time_iso_8601": "2022-10-18T08:37:10.035558Z",
      "url": "https://files.pythonhosted.org/packages/be/78/3c01c7aac4c4df11fdc918e7f8c4afbcd5badb5562a749d094be99847958/document_scanner_sdk-1.0.2-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20b9d6d24be8aa2f491736cd6da07282a547638464fa255914d3d31a924f4b93",
        "md5": "6cdc73ed2efaff9e1c4336f5f0d071f0",
        "sha256": "05bec8a27f1090c61353a256cb8ad5cbeb826c07b0b78045a2552a8033580cd7"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.2-cp36-cp36m-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "6cdc73ed2efaff9e1c4336f5f0d071f0",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 6892633,
      "upload_time": "2022-10-18T08:37:12",
      "upload_time_iso_8601": "2022-10-18T08:37:12.331464Z",
      "url": "https://files.pythonhosted.org/packages/20/b9/d6d24be8aa2f491736cd6da07282a547638464fa255914d3d31a924f4b93/document_scanner_sdk-1.0.2-cp36-cp36m-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d443cc98ad26eb4ebfeeee21f43336ead7e1644e5a3497a435e05a07eeeaf62",
        "md5": "0ca937151c8ff72914897a23f2fe7d57",
        "sha256": "f2756f7d2528a7dfbb0d97d31323dc71328af250176825817395557cb9d686d7"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.2-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "0ca937151c8ff72914897a23f2fe7d57",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 4324356,
      "upload_time": "2022-10-18T08:37:14",
      "upload_time_iso_8601": "2022-10-18T08:37:14.403457Z",
      "url": "https://files.pythonhosted.org/packages/9d/44/3cc98ad26eb4ebfeeee21f43336ead7e1644e5a3497a435e05a07eeeaf62/document_scanner_sdk-1.0.2-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2fff51112cbda4a533517b0a900a815cf09b27ee6643b6b444df3b6b30aad5fd",
        "md5": "47c1ac3362b2b2eeec061e12788926f0",
        "sha256": "afa40773c8862285af4d4750c368756a11fd2e7fe0f323880604da388fe1e41d"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.2-cp37-cp37m-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "47c1ac3362b2b2eeec061e12788926f0",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 6893881,
      "upload_time": "2022-10-18T08:37:16",
      "upload_time_iso_8601": "2022-10-18T08:37:16.900954Z",
      "url": "https://files.pythonhosted.org/packages/2f/ff/51112cbda4a533517b0a900a815cf09b27ee6643b6b444df3b6b30aad5fd/document_scanner_sdk-1.0.2-cp37-cp37m-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8abc59bd3a126866b39b07186358fe32a7637c2a33578f81a923120c67360080",
        "md5": "f08c1692c90fae722f3dd6b722a227a4",
        "sha256": "d3928ec3b5473632e193c4ce9aecb556a8b6544b5b62d6c9476ad1dedc08c1c6"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.2-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "f08c1692c90fae722f3dd6b722a227a4",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 4323623,
      "upload_time": "2022-10-18T08:37:19",
      "upload_time_iso_8601": "2022-10-18T08:37:19.210907Z",
      "url": "https://files.pythonhosted.org/packages/8a/bc/59bd3a126866b39b07186358fe32a7637c2a33578f81a923120c67360080/document_scanner_sdk-1.0.2-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "836df0680b7fd68217308a9d4c98e7e6643420546081aee1da738013e38ba362",
        "md5": "fbb0dd5cc3af5eaab5e3d70116950882",
        "sha256": "b53051a0d60b4b2ad265186c61283a29e6ef8b59dfaf83bac3d2c4698285fad4"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.2-cp38-cp38-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "fbb0dd5cc3af5eaab5e3d70116950882",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 6894279,
      "upload_time": "2022-10-18T08:37:21",
      "upload_time_iso_8601": "2022-10-18T08:37:21.266861Z",
      "url": "https://files.pythonhosted.org/packages/83/6d/f0680b7fd68217308a9d4c98e7e6643420546081aee1da738013e38ba362/document_scanner_sdk-1.0.2-cp38-cp38-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6149e9be42e62f8e7201b90857cab411db53036d0aa05e54abf1e67464efba90",
        "md5": "c40bd978aa6477103be8d1a5f9acce6d",
        "sha256": "fa98ca131306e4f7b25c5ea4d1d394ffeed8e159448b7599615db7740a4d5220"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.2-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "c40bd978aa6477103be8d1a5f9acce6d",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 4323645,
      "upload_time": "2022-10-18T08:37:24",
      "upload_time_iso_8601": "2022-10-18T08:37:24.210847Z",
      "url": "https://files.pythonhosted.org/packages/61/49/e9be42e62f8e7201b90857cab411db53036d0aa05e54abf1e67464efba90/document_scanner_sdk-1.0.2-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77b2baf3fdbc588de288eda2a404973eb8a8b971ca360594978378eb408dd124",
        "md5": "7c75699b8eb354778228aae384a73dc7",
        "sha256": "0f9fa34dc12c4e02f810b96cb2cf62d4fd6cac1712f31bae1af9479276c11612"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.2-cp39-cp39-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "7c75699b8eb354778228aae384a73dc7",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 6893188,
      "upload_time": "2022-10-18T08:37:26",
      "upload_time_iso_8601": "2022-10-18T08:37:26.372603Z",
      "url": "https://files.pythonhosted.org/packages/77/b2/baf3fdbc588de288eda2a404973eb8a8b971ca360594978378eb408dd124/document_scanner_sdk-1.0.2-cp39-cp39-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbe275e07e43bd1a4f18c97c90de431ebc639a5cf7eb01b485204a52523899df",
        "md5": "c9921d07499a7b0c779e718e2c7393f2",
        "sha256": "602b309d000eba7b135dabec7f2ac88d57edf687a0d4891ee36286911818dab3"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.2-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "c9921d07499a7b0c779e718e2c7393f2",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 4323650,
      "upload_time": "2022-10-18T08:37:28",
      "upload_time_iso_8601": "2022-10-18T08:37:28.519928Z",
      "url": "https://files.pythonhosted.org/packages/fb/e2/75e07e43bd1a4f18c97c90de431ebc639a5cf7eb01b485204a52523899df/document_scanner_sdk-1.0.2-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d2881913ea3357ccb8a80932618ab871a1b9f14299f6285a17f8f404f835dbc",
        "md5": "2f0d5fd0cafea00528b2a6eb67041352",
        "sha256": "a3c236abd490c546263cc1d0f67ed4f0b946b9040aba5c29c34133676e7d2c52"
      },
      "downloads": -1,
      "filename": "document-scanner-sdk-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2f0d5fd0cafea00528b2a6eb67041352",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10928918,
      "upload_time": "2022-10-18T08:37:32",
      "upload_time_iso_8601": "2022-10-18T08:37:32.633077Z",
      "url": "https://files.pythonhosted.org/packages/9d/28/81913ea3357ccb8a80932618ab871a1b9f14299f6285a17f8f404f835dbc/document-scanner-sdk-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}