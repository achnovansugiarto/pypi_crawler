{
  "info": {
    "author": "yushulx",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C++",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# Python Document Scanner SDK \nThe project is a Python binding to [Dynamsoft C/C++ Document Scanner SDK](https://www.dynamsoft.com/document-normalizer/docs/introduction/?ver=latest). It aims to help developers quickly build desktop document scanner applications in Python on Windows and Linux.\n\n## About Dynamsoft Document Scanner\nGet a [30-day FREE trial license](https://www.dynamsoft.com/customer/license/trialLicense?product=ddn) to activate the SDK.\n\n\n## Supported Python Edition\n* Python 3.x\n\n## Dependencies\n\n```bash \npip install opencv-python\n```\n\n## Command-line Usage\n```bash \n# Scan documents from images\n$ scandocument -f <file-name> -l <license-key>\n\n# Scan documents from camera video stream\n$ scandocument -c 1 -l <license-key>\n```\n\n## Quick Start\n- Scan documents from an image file:\n    ```python\n    import argparse\n    import docscanner\n    import sys\n    import numpy as np\n    import cv2\n    import time\n\n    def showNormalizedImage(name, normalized_image):\n        mat = docscanner.convertNormalizedImage2Mat(normalized_image)\n        cv2.imshow(name, mat)\n        return mat\n\n    def process_file(filename, scanner):\n        image = cv2.imread(filename)\n        results = scanner.detectMat(image)\n        for result in results:\n            x1 = result.x1\n            y1 = result.y1\n            x2 = result.x2\n            y2 = result.y2\n            x3 = result.x3\n            y3 = result.y3\n            x4 = result.x4\n            y4 = result.y4\n            \n            normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n            showNormalizedImage(\"Normalized Image\", normalized_image)\n            cv2.drawContours(image, [np.int0([(x1, y1), (x2, y2), (x3, y3), (x4, y4)])], 0, (0, 255, 0), 2)\n        \n        cv2.imshow('Document Image', image)\n        cv2.waitKey(0)\n        \n        normalized_image.save(str(time.time()) + '.png')\n        print('Image saved')\n\n    def scandocument():\n        \"\"\"\n        Command-line script for scanning documents from a given image\n        \"\"\"\n        parser = argparse.ArgumentParser(description='Scan documents from an image file')\n        parser.add_argument('-f', '--file', help='Path to the image file')\n        parser.add_argument('-l', '--license', default='', type=str, help='Set a valid license key')\n        args = parser.parse_args()\n        # print(args)\n        try:\n            filename = args.file\n            license = args.license\n            \n            if filename is None:\n                parser.print_help()\n                return\n            \n            # set license\n            if  license == '':\n                docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n            else:\n                docscanner.initLicense(license)\n                \n            # initialize mrz scanner\n            scanner = docscanner.createInstance()\n            ret = scanner.setParameters(docscanner.Templates.color)\n\n            if filename is not None:\n                process_file(filename, scanner)\n                \n        except Exception as err:\n            print(err)\n            sys.exit(1)\n\n    scandocument()\n    ```\n\n    ![python document scanner from file](https://www.dynamsoft.com/codepool/img/2022/09/document-perspective-correction.png)\n\n- Scan documents from camera video stream:\n    ```python\n    import argparse\n    import docscanner\n    import sys\n    import numpy as np\n    import cv2\n    import time\n\n    g_results = None\n    g_normalized_images = []\n\n    def callback(results):\n        global g_results\n        g_results = results\n\n    def showNormalizedImage(name, normalized_image):\n        mat = docscanner.convertNormalizedImage2Mat(normalized_image)\n        cv2.imshow(name, mat)\n        return mat\n        \n    def process_video(scanner):\n        scanner.addAsyncListener(callback)\n        \n        cap = cv2.VideoCapture(0)\n        while True:\n            ret, image = cap.read()\n            \n            ch = cv2.waitKey(1)\n            if ch == 27:\n                break\n            elif ch == ord('n'): # normalize image\n                if g_results != None:\n                    g_normalized_images = []\n                    index = 0\n                    for result in g_results:\n                        x1 = result.x1\n                        y1 = result.y1\n                        x2 = result.x2\n                        y2 = result.y2\n                        x3 = result.x3\n                        y3 = result.y3\n                        x4 = result.x4\n                        y4 = result.y4\n                        \n                        normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n                        g_normalized_images.append((str(index), normalized_image))\n                        mat = showNormalizedImage(str(index), normalized_image)\n                        index += 1\n            elif ch == ord('s'): # save image\n                for data in g_normalized_images:\n                    # cv2.imwrite('images/' + str(time.time()) + '.png', image)\n                    cv2.destroyWindow(data[0])\n                    data[1].save(str(time.time()) + '.png')\n                    print('Image saved')\n                    \n                g_normalized_images = []\n                \n            if image is not None:\n                scanner.detectMatAsync(image)\n            \n            if g_results != None:\n                for result in g_results:\n                    x1 = result.x1\n                    y1 = result.y1\n                    x2 = result.x2\n                    y2 = result.y2\n                    x3 = result.x3\n                    y3 = result.y3\n                    x4 = result.x4\n                    y4 = result.y4\n                    \n                    cv2.drawContours(image, [np.int0([(x1, y1), (x2, y2), (x3, y3), (x4, y4)])], 0, (0, 255, 0), 2)\n                \n            cv2.putText(image, 'Press \"n\" to normalize image', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.putText(image, 'Press \"s\" to save image', (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.putText(image, 'Press \"ESC\" to exit', (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)\n            cv2.imshow('Document Scanner', image)\n\n    def scandocument():\n        \"\"\"\n        Command-line script for scanning documents from camera video stream.\n        \"\"\"\n        parser = argparse.ArgumentParser(description='Scan documents from camera')\n        parser.add_argument('-c', '--camera', default=False, type=bool, help='Whether to show the image')\n        parser.add_argument('-l', '--license', default='', type=str, help='Set a valid license key')\n        args = parser.parse_args()\n        # print(args)\n        try:\n            license = args.license\n            camera = args.camera\n            \n            if camera is False:\n                parser.print_help()\n                return\n            \n            # set license\n            if  license == '':\n                docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n            else:\n                docscanner.initLicense(license)\n                \n            # initialize mrz scanner\n            scanner = docscanner.createInstance()\n            ret = scanner.setParameters(docscanner.Templates.color)\n\n            if camera is True:\n                process_video(scanner)\n                \n        except Exception as err:\n            print(err)\n            sys.exit(1)\n\n    scandocument()\n    ```\n    \n    ![python document scanner from camera](https://www.dynamsoft.com/codepool/img/2022/09/python-document-scanner.png)\n\n## Methods\n- `docscanner.initLicense('YOUR-LICENSE-KEY')` # set the license key\n    \n    ```python\n    docscanner.initLicense(\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\")\n    ```\n\n- `docscanner.createInstance()` # create a Document Scanner instance\n    \n    ```python\n    scanner = docscanner.createInstance()\n    ```\n- `detectFile(filename)` # do edge detection from an image file\n\n    ```python\n    results = scanner.detectFile(<filename>)\n    ```\n- `detectMat(Mat image)` # do edge detection from Mat\n    ```python\n    image = cv2.imread(<filename>)\n    results = scanner.detectMat(image)\n    for result in results:\n        x1 = result.x1\n        y1 = result.y1\n        x2 = result.x2\n        y2 = result.y2\n        x3 = result.x3\n        y3 = result.y3\n        x4 = result.x4\n        y4 = result.y4\n    ```\n\n- `setParameters(Template)` # Select color, binary or grayscale template\n    \n    ```python\n    scanner.setParameters(docscanner.Templates.color)\n    ```\n\n- `addAsyncListener(callback function)` # start a native thread to run document scanning tasks\n- `detectMatAsync(<opencv mat data>)` # put a document scanning task into the native queue\n    ```python\n    def callback(results):\n        for result in results:\n            print(result.x1)\n            print(result.y1)\n            print(result.x2)\n            print(result.y2)\n            print(result.x3)\n            print(result.y3)\n            print(result.x4)\n            print(result.y4)\n                                                        \n    import cv2\n    image = cv2.imread(<filename>)\n    scanner.addAsyncListener(callback)\n    scanner.detectMatAsync(image)\n    sleep(5)\n    ```\n\n- `normalizeBuffer(mat, x1, y1, x2, y2, x3, y3, x4, y4)` # do perspective correction from Mat\n    ```python\n    normalized_image = scanner.normalizeBuffer(image, x1, y1, x2, y2, x3, y3, x4, y4)\n    ```\n- `normalizeFile(filename, x1, y1, x2, y2, x3, y3, x4, y4)` # do perspective correction from a file\n    ```python\n    normalized_image = scanner.normalizeFile(<filename>, x1, y1, x2, y2, x3, y3, x4, y4)\n    ```\n- `normalized_image.save(filename)` # save the normalized image to a file\n    ```python\n    normalized_image.save(<filename>)\n    ```\n- `normalized_image.recycle()` # release the memory of the normalized image\n\n## C/C++ API\nTo customize Python API based on C/C++, please refer to the\n[online documentation](https://www.dynamsoft.com/document-normalizer/docs/programming/c/api-reference/?ver=latest).\n\n## How to Build the Python Document Scanner Extension\n- Create a source distribution:\n    \n    ```bash\n    python setup.py sdist\n    ```\n\n- setuptools:\n    \n    ```bash\n    python setup_setuptools.py build\n    python setup_setuptools.py develop \n    ```\n\n- Build wheel:\n    \n    ```bash\n    pip wheel . --verbose\n    # Or\n    python setup.py bdist_wheel\n    ```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yushulx/python-document-scanner-sdk",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "document-scanner-sdk",
    "package_url": "https://pypi.org/project/document-scanner-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/document-scanner-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/yushulx/python-document-scanner-sdk"
    },
    "release_url": "https://pypi.org/project/document-scanner-sdk/1.0.1/",
    "requires_dist": [
      "opencv-python"
    ],
    "requires_python": "",
    "summary": "Document Scanner SDK for document edge detection, border cropping, perspective correction and brightness adjustment",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15835249,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63cd43532bede8df1ea3f7171c2ac615eb063fe193d13781e6803016c41e0496",
        "md5": "8af8605e99ad7779ac635f5d5d8f8ab1",
        "sha256": "e6be0be65f7ca601edd53e4d65fab8fb8e0942ac73361e02b13a9d91f376823f"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.1-cp310-cp310-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "8af8605e99ad7779ac635f5d5d8f8ab1",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 6894374,
      "upload_time": "2022-09-06T09:10:38",
      "upload_time_iso_8601": "2022-09-06T09:10:38.191966Z",
      "url": "https://files.pythonhosted.org/packages/63/cd/43532bede8df1ea3f7171c2ac615eb063fe193d13781e6803016c41e0496/document_scanner_sdk-1.0.1-cp310-cp310-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ed5fe51e9e3b0e7ce4120b27337bb78c94e77f58e5ff073837761d1c0e450f9",
        "md5": "1432341c1255a50e969a2a412ddaf2b8",
        "sha256": "8e7e9790ba3c6cb8f19a3b89496565cc38557c72556210b8c2ed6264fe4cde1b"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.1-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "1432341c1255a50e969a2a412ddaf2b8",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 4323138,
      "upload_time": "2022-09-06T09:10:40",
      "upload_time_iso_8601": "2022-09-06T09:10:40.402060Z",
      "url": "https://files.pythonhosted.org/packages/6e/d5/fe51e9e3b0e7ce4120b27337bb78c94e77f58e5ff073837761d1c0e450f9/document_scanner_sdk-1.0.1-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63d1293491f6476de4b5866394716fa814018f3141102918f36536c79f609849",
        "md5": "dce9da42a9adbce298d6241e0c6a315e",
        "sha256": "b6a5eca220e1930cfb5cb883262d835ee2f31e2ff48f8a1b432bf82d4f3121aa"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.1-cp36-cp36m-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "dce9da42a9adbce298d6241e0c6a315e",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 6893543,
      "upload_time": "2022-09-06T09:10:42",
      "upload_time_iso_8601": "2022-09-06T09:10:42.743792Z",
      "url": "https://files.pythonhosted.org/packages/63/d1/293491f6476de4b5866394716fa814018f3141102918f36536c79f609849/document_scanner_sdk-1.0.1-cp36-cp36m-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "332a0d4601b2b8ebfc11b624b4377a925676416b5061184c0275eca70fa59c77",
        "md5": "146fbf4c90c9acfc25896a650f3deff0",
        "sha256": "f0a0066e5f6072e2280919bc933700b21df0ddebfbb70632ebd3320edb2eb1b4"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.1-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "146fbf4c90c9acfc25896a650f3deff0",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 4323866,
      "upload_time": "2022-09-06T09:10:44",
      "upload_time_iso_8601": "2022-09-06T09:10:44.530902Z",
      "url": "https://files.pythonhosted.org/packages/33/2a/0d4601b2b8ebfc11b624b4377a925676416b5061184c0275eca70fa59c77/document_scanner_sdk-1.0.1-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a237e22ec0bb5aacd9c1925db191f7cc71ff7ff99e2b5d7f3a9b501118ea4b4",
        "md5": "7a4a50fff4674d8876280c3379a1437c",
        "sha256": "2ec5d62e06e7c32b6a17e327ea92d7f6b4c46f24f350529995258c78cf5dcdf4"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.1-cp37-cp37m-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "7a4a50fff4674d8876280c3379a1437c",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 6894847,
      "upload_time": "2022-09-06T09:10:46",
      "upload_time_iso_8601": "2022-09-06T09:10:46.478455Z",
      "url": "https://files.pythonhosted.org/packages/4a/23/7e22ec0bb5aacd9c1925db191f7cc71ff7ff99e2b5d7f3a9b501118ea4b4/document_scanner_sdk-1.0.1-cp37-cp37m-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f86937b71c2651282427cea1acabe90095ad15a37daad62be2a85f0dd297f7d",
        "md5": "abff49b6c88f77e9fb9abaa2cb580ce5",
        "sha256": "aa129feb564cdf88e42d931108a12378886cfdc5f1dff18a069050eb452c4e4d"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.1-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "abff49b6c88f77e9fb9abaa2cb580ce5",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 4323127,
      "upload_time": "2022-09-06T09:10:48",
      "upload_time_iso_8601": "2022-09-06T09:10:48.163766Z",
      "url": "https://files.pythonhosted.org/packages/3f/86/937b71c2651282427cea1acabe90095ad15a37daad62be2a85f0dd297f7d/document_scanner_sdk-1.0.1-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "007278d2f21ce76e233e9a116eaae8a1fb9b12f318b341a848ca1b532d26eed7",
        "md5": "0059e6006a152d2c5698a08b675f739f",
        "sha256": "d9da84af9186aee1b3fa1520d846267f4955f898e2f4716ccc1fcb28db8e6be3"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.1-cp38-cp38-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "0059e6006a152d2c5698a08b675f739f",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 6895296,
      "upload_time": "2022-09-06T09:10:50",
      "upload_time_iso_8601": "2022-09-06T09:10:50.170221Z",
      "url": "https://files.pythonhosted.org/packages/00/72/78d2f21ce76e233e9a116eaae8a1fb9b12f318b341a848ca1b532d26eed7/document_scanner_sdk-1.0.1-cp38-cp38-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efb16ab47941da94434a306734f803829880e13d7db896474d1567b6d11e3194",
        "md5": "313fd7c4f578e644d3e86fbde7125f63",
        "sha256": "85f8c988caca3949f47032342709f196f642c0ac10dbc44317f7240c1779e0de"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.1-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "313fd7c4f578e644d3e86fbde7125f63",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 4323134,
      "upload_time": "2022-09-06T09:10:52",
      "upload_time_iso_8601": "2022-09-06T09:10:52.058780Z",
      "url": "https://files.pythonhosted.org/packages/ef/b1/6ab47941da94434a306734f803829880e13d7db896474d1567b6d11e3194/document_scanner_sdk-1.0.1-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c60a73a0d00862bd53f42baf4f9a7408ebf2ba6faf4a3cd0fa6f4f3b299dd76",
        "md5": "96da0f52759d02f64366548298eb03a2",
        "sha256": "2a1078331e9227d5ad798533ca6374b785c0dccf417f2d4a1f253eb3b8601ddc"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.1-cp39-cp39-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "96da0f52759d02f64366548298eb03a2",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 6894210,
      "upload_time": "2022-09-06T09:10:54",
      "upload_time_iso_8601": "2022-09-06T09:10:54.113280Z",
      "url": "https://files.pythonhosted.org/packages/4c/60/a73a0d00862bd53f42baf4f9a7408ebf2ba6faf4a3cd0fa6f4f3b299dd76/document_scanner_sdk-1.0.1-cp39-cp39-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffff5228e0c627bbc6d9d939d4d6bdf0c7a884ec3c34178c3078820e74b9854c",
        "md5": "84cb6a636628177ad46d35c0cc5bbf07",
        "sha256": "be5b3b93059590f6cc46c7ad004e59558aae9a36b84b3d9593007783d2f0ba06"
      },
      "downloads": -1,
      "filename": "document_scanner_sdk-1.0.1-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "84cb6a636628177ad46d35c0cc5bbf07",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 4323132,
      "upload_time": "2022-09-06T09:10:55",
      "upload_time_iso_8601": "2022-09-06T09:10:55.988902Z",
      "url": "https://files.pythonhosted.org/packages/ff/ff/5228e0c627bbc6d9d939d4d6bdf0c7a884ec3c34178c3078820e74b9854c/document_scanner_sdk-1.0.1-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb960e637a1bdfbbd25eb0fd62dfdbffcd866fe7f91911c1bb6acf497b0e1f6c",
        "md5": "5d93e8a9718c8e7734ea88e5af93f7e6",
        "sha256": "ae2db9f972619dc65069f01f55d3da381f2d423e66f47858f8bc85932bc42158"
      },
      "downloads": -1,
      "filename": "document-scanner-sdk-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5d93e8a9718c8e7734ea88e5af93f7e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10928773,
      "upload_time": "2022-09-06T09:10:57",
      "upload_time_iso_8601": "2022-09-06T09:10:57.812434Z",
      "url": "https://files.pythonhosted.org/packages/eb/96/0e637a1bdfbbd25eb0fd62dfdbffcd866fe7f91911c1bb6acf497b0e1f6c/document-scanner-sdk-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}