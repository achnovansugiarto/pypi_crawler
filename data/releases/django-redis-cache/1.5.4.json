{
  "info": {
    "author": "Sean Bleier",
    "author_email": "sebleier@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "==========================\nRedis Django Cache Backend\n==========================\n\n.. image:: https://img.shields.io/pypi/dm/django-redis-cache.svg\n    :target: https://pypi.python.org/pypi//django-redis-cache/\n    :alt: Downloads\n\n.. image:: https://img.shields.io/pypi/v/django-redis-cache.svg\n    :target: https://pypi.python.org/pypi/django-redis-cache/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/travis/sebleier/django-redis-cache.svg\n    :target: https://travis-ci.org/sebleier/django-redis-cache\n    :alt: Travis-ci Build\n\nA Redis cache backend for Django\n\nDocs can be found at http://django-redis-cache.readthedocs.org/en/latest/.\n\nChangelog\n=========\n\n1.5.0\n-----\n\n* Adds ability to compress/decompress cache values using pluggable compressors\nincluding zlib, bzip2, or a custom implementation.\n\n1.4.0\n-----\n\n* Adds support for providing a socket timeout on the redis-py client.\n\n1.3.0\n-----\n\n* Adds support for pluggable serializers including pickle(default), json,\nmsgpack, and yaml.\n\n1.2.0\n-----\n\n* Deprecate support for Python 2.6.  The cache should still work, but tests\nwill fail and compatibility will not be guaranteed going forward.\n\n**Backward incompatibilities:**\n\n* The ``HashRing`` behavior has changed to maintain a proper keyspace balance.\nThis will lead to some cache misses, so be aware.\n\n* Now requires `redis-py`_ >= 2.10.3\n\n1.0.0\n-----\n\n* Deprecate support for django < 1.3 and redis < 2.4.  If you need support for those versions,\n    pin django-redis-cache to a version less than 1.0, i.e. pip install django-redis-cache<1.0\n* Application level sharding when a list of locations is provided in the settings.\n* Delete keys using wildcard syntax.\n* Clear cache using version to delete only keys under that namespace.\n* Ability to select pickle protocol version.\n* Support for Master-Slave setup\n* Thundering herd protection\n* Add expiration to key using `expire` command.\n* Add persistence to key using `persist` command.\n\n\n0.13.0\n------\n\n* Adds custom `has_key` implementation that uses Redis's `exists` command.\n    This will speed `has_key` up drastically if the key under question is\n    extremely large.\n\n0.12.0\n------\n\n* Keys can now be kept alive indefinitely by setting the timeout to None,\n    e.g. `cache.set('key', 'value', timeout=None)`\n* Adds `ttl` method to the cache.  `cache.ttl(key)` will return the number of\n    seconds before it expires or None if the key is not volitile.\n\n0.11.0\n------\n\n* Adds support for specifying the connection pool class.\n* Adds ability to set the max connections for the connection pool.\n\n\n0.10.0\n------\n\nAdds Support for Python 3.3 and Django 1.5 and 1.6.  Huge thanks to Carl Meyer\nfor his work.\n\n0.9.0\n-----\n\nRedis cache now allows you to use either a TCP connection or Unix domain\nsocket to connect to your redis server.  Using a TCP connection is useful for\nwhen you have your redis server separate from your app server and/or within\na distributed environment.  Unix domain sockets are useful if you have your\nredis server and application running on the same machine and want the fastest\npossible connection.\n\nYou can now specify (optionally) what parser class you want redis-py to use\nwhen parsing messages from the redis server.  redis-py will pick the best\nparser for you implicitly, but using the ``PARSER_CLASS`` setting gives you\ncontrol and the option to roll your own parser class if you are so bold.\n\n\nRequirements\n============\n\n`redis-py`_ >= 2.10.3\n`redis`_ >= 2.4\n`hiredis`_\n`python`_ >= 2.7\n\n1. Run ``pip install django-redis-cache``.\n\n2. Modify your Django settings to use ``redis_cache``.\n\n.. code:: python\n\n    # When using TCP connections\n    CACHES = {\n        'default': {\n            'BACKEND': 'redis_cache.RedisCache',\n            'LOCATION': [\n                '<host>:<port>',\n                '<host>:<port>',\n                '<host>:<port>',\n            ],\n            'OPTIONS': {\n                'DB': 1,\n                'PASSWORD': 'yadayada',\n                'PARSER_CLASS': 'redis.connection.HiredisParser',\n                'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',\n                'CONNECTION_POOL_CLASS_KWARGS': {\n                    'max_connections': 50,\n                    'timeout': 20,\n                },\n                'MAX_CONNECTIONS': 1000,\n                'PICKLE_VERSION': -1,\n            },\n        },\n    }\n\n    # When using unix domain sockets\n    # Note: ``LOCATION`` needs to be the same as the ``unixsocket`` setting\n    # in your redis.conf\n    CACHES = {\n        'default': {\n            'BACKEND': 'redis_cache.RedisCache',\n            'LOCATION': '/path/to/socket/file',\n            'OPTIONS': {\n                'DB': 1,\n                'PASSWORD': 'yadayada',\n                'PARSER_CLASS': 'redis.connection.HiredisParser',\n                'PICKLE_VERSION': 2,\n            },\n        },\n    }\n\n    # For Master-Slave Setup, specify the host:port of the master\n    # redis-server instance.\n    CACHES = {\n        'default': {\n            'BACKEND': 'redis_cache.RedisCache',\n            'LOCATION': [\n                '<host>:<port>',\n                '<host>:<port>',\n                '<host>:<port>',\n            ],\n            'OPTIONS': {\n                'DB': 1,\n                'PASSWORD': 'yadayada',\n                'PARSER_CLASS': 'redis.connection.HiredisParser',\n                'PICKLE_VERSION': 2,\n                'MASTER_CACHE': '<master host>:<master port>',\n            },\n        },\n    }\n\n\n\nUsage\n=====\n\ndjango-redis-cache shares the same API as django's built-in cache backends,\nwith a few exceptions.\n\n``cache.delete_pattern``\n\nDelete keys using glob-style pattern.\n\nexample::\n\n    >>> from news.models import Story\n    >>>\n    >>> most_viewed = Story.objects.most_viewed()\n    >>> highest_rated = Story.objects.highest_rated()\n    >>> cache.set('news.stories.most_viewed', most_viewed)\n    >>> cache.set('news.stories.highest_rated', highest_rated)\n    >>> data = cache.get_many(['news.stories.highest_rated', 'news.stories.most_viewed'])\n    >>> len(data)\n    2\n    >>> cache.delete_pattern('news.stores.*')\n    >>> data = cache.get_many(['news.stories.highest_rated', 'news.stories.most_viewed'])\n    >>> len(data)\n    0\n\n``cache.clear``\n\nSame as django's ``cache.clear``, except that you can optionally specify a\nversion and all keys with that version will be deleted.  If no version is\nprovided, all keys are flushed from the cache.\n\n``cache.reinsert_keys``\n\nThis helper method retrieves all keys and inserts them back into the cache.  This\nis useful when changing the pickle protocol number of all the cache entries.\nAs of django-redis-cache < 1.0, all cache entries were pickled using version 0.\nTo reduce the memory footprint of the redis-server, simply run this method to\nupgrade cache entries to the latest protocol.\n\n\nThundering Herd Protection\n==========================\n\nA common problem with caching is that you can sometimes get into a situation\nwhere you have a value that takes a long time to compute or retrieve, but have\nclients accessing it a lot.  For example, if you wanted to retrieve the latest\ntweets from the twitter api, you probably want to cache the response for a number\nof minutes so you don't exceed your rate limit.  However, when the cache entry\nexpires you can have mulitple clients that see there is no entry and try to\nsimultaneously fetch the latest results from the api.\n\nThe way to get around this problem you pass in a callable and timeout to\n``get_or_set``, which will check the cache to see if you need to compute the\nvalue.  If it does, then the cache sets a placeholder that tells future clients\nto serve data from the stale cache until the new value is created.\n\nExample::\n\n    tweets = cache.get_or_set('tweets', twitter.get_newest, timeout=300)\n\n\nRunning Tests\n=============\n\n``./install_redis.sh``\n\n``make test``\n\n.. _redis-py: http://github.com/andymccurdy/redis-py/\n.. _redis: http://github.com/antirez/redis/\n.. _hiredis: http://github.com/antirez/hiredis/\n.. _python: http://python.org\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/sebleier/django-redis-cache/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-redis-cache",
    "package_url": "https://pypi.org/project/django-redis-cache/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-redis-cache/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/sebleier/django-redis-cache/"
    },
    "release_url": "https://pypi.org/project/django-redis-cache/1.5.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Redis Cache Backend for Django",
    "version": "1.5.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13128900,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b3da6428e8045ea1555a3f7f8ed73fffe37e867853d7b6ba257f50c29df84f4",
        "md5": "ca52d148291cb7eb6a6352318ca70c95",
        "sha256": "fdb348757b051291520a87d6663d9f177d3761d3a43db79554fb5654960f3c19"
      },
      "downloads": -1,
      "filename": "django-redis-cache-1.5.4.tar.gz",
      "has_sig": false,
      "md5_digest": "ca52d148291cb7eb6a6352318ca70c95",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12989,
      "upload_time": "2015-08-05T16:39:10",
      "upload_time_iso_8601": "2015-08-05T16:39:10.823574Z",
      "url": "https://files.pythonhosted.org/packages/0b/3d/a6428e8045ea1555a3f7f8ed73fffe37e867853d7b6ba257f50c29df84f4/django-redis-cache-1.5.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}