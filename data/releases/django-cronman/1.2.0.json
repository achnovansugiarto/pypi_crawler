{
  "info": {
    "author": "Unhaggle Inc.",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "# django-cronman\r\n\r\n## Overview\r\n\r\nDjango app to define and manage periodic tasks at Python level.\r\n\r\n## Installation\r\n\r\n`django-cronman` can be installed directly from PyPI using `pip`:\r\n\r\n```bash\r\npip install django-cronman\r\n```\r\n\r\nYou can also install it with additional dependencies to be able to use Cron Remote Manager.\r\n\r\n```bash\r\npip install django-cronman[redis]\r\n```\r\n\r\n## Define a new cron job\r\n\r\nCron job definition is inspired by Django Admin configuration. To add a new job, you have to create `cron_job.py`\r\nfile inside an app, create `BaseCronJob` subclass inside and register it:\r\n\r\n```python\r\nfrom cronman.job import BaseCronJob, cron_job_registry\r\n\r\nclass HelloWorld(BaseCronJob):\r\n    \"\"\"Demo Cron Job class\"\"\"\r\n\r\n    def run(self):\r\n        \"\"\"Main logic\"\"\"\r\n        pass\r\n\r\ncron_job_registry.register(HelloWorld)\r\n```\r\n\r\nCron job classes are registered (and referred to) by name, which may be customized on registration:\r\n```python\r\ncron_job_registry.register(HelloWorld, name='Hello')\r\n```\r\nIt's also possible to retrieve or unregister a class (e.g. while testing):\r\n```python\r\ncron_job_registry.get('HelloWorld')\r\ncron_job_registry.unregister('HelloWorld')\r\n```\r\nIf there is more than 1 cron job in given app, it's recommended to create a package instead of single `cron_jobs` module, create one submodule per class and do the imports and registration in package's  `__init__.py`.\r\n\r\n## Configure cron jobs\r\n\r\nTo ensure that a cron job is executed periodically, you have add an entry to `CRON_JOBS`:\r\n\r\n```python\r\nCRON_JOBS = (\r\n    ...\r\n    # (<time spec>, <job spec>)\r\n    # 'HelloWorld' will be executed a 5:15AM every day:\r\n    ('   15   5   *   *   *', 'HelloWorld'),\r\n)\r\n```\r\n\r\nSet ```CRONMAN_JOBS_MODULE``` to the dotted path name of the module where cron jobs are specified. Remember, this module MUST have a ```CRON_JOBS``` attribute. ```CRONMAN_JOBS_MODULE``` is ```None``` by default. For example:\r\n\r\n```python\r\n# settings_local.py\r\n\r\nCRONMAN_JOBS_MODULE = 'app.cron_jobs.name'\r\n```\r\n\r\n## Run the scheduler\r\n\r\nCron jobs defined in ```settings.CRONMAN_JOBS_MODULE``` are started by `cron_scheduler` command from `cron` app.\r\nThis command constructs a list of jobs that should be executed in current period (now +/- 1 minute)\r\nand creates **a new subprocess** for each job.\r\n```\r\npython manage.py cron_scheduler run\r\n```\r\nThis command should be added to system's crontab on server responsible for running periodic tasks\r\nand executed every 2 minutes.\r\n\r\n## Run single cron job\r\n\r\nCommand `cron_worker run <job spec>` is responsible for executing cron jobs:\r\n```\r\npython manage.py cron_worker run HelloWorld\r\n```\r\n\r\n## Cron job parameters\r\n\r\nCron job classes can accept parameters which are passed to `run` method as positional or named arguments:\r\n```python\r\nclass HelloWorld(BaseCronJob):\r\n    \"\"\"Demo Cron Job class\"\"\"\r\n\r\n    def run(self, what, sleep=None):\r\n        \"\"\"Main logic\"\"\"\r\n        print \"Hello {}\".format(what)\r\n        if sleep:\r\n            time.sleep(int(sleep))\r\n    ...\r\n```\r\n```\r\npython manage.py cron_worker run HelloWorld:world,sleep=5\r\n```\r\nParameters are passed as string values, any type casts should be made in `run` method.\r\nQuoted string with spaces are supported, but comma can be used only as argument separator:\r\n```\r\npython manage.py cron_worker run HelloWorld:\"big world\",sleep=5\r\n```\r\nThere are utility functions for extracting lists and boolean values in `cronman.utils` module.\r\n\r\n## Configure Cronitor support\r\n\r\n`cron_worker` command can notify Cronitor when a job is started, finished or it has failed.\r\nTo enable this you have to:\r\n1. Enable Cronitor support in settings `CRONMAN_CRONITOR_ENABLED = True`\r\n2. Configure you cron job class:\r\n```python\r\nclass HelloWorld(BaseCronJob):\r\n    \"\"\"Demo Cron Job class\"\"\"\r\n    cronitor_id = 'ab12z'  # ID is assigned in Cronitor's dashboard\r\n```\r\n\r\nWe may disable sending optional \"RUN\" and \"FAIL\" pings to Cronitor when cron job starts by setting `cronitor_ping_run = False` or `cronitor_ping_fail = False` but this doesn't seem to be necessary.\r\n\r\n**Important note:**\r\nWhen adding a new monitor in Cronitor dashboard, please use type **heartbeat**. Avoid using **cron job** monitors, as they're sending false-positive alerts \"Has not run on schedule\".\r\n\r\n\r\n## Configure lock\r\n\r\nTasks can acquire locks to prevent concurrent calls. Locks have form of PIDfiles located in `settings.CRONMAN_DATA_DIR`. To modify lock behavior for given cron job class you can set `lock_type` attribute:\r\n\r\n```python\r\nfrom cronman.taxonomies import LockType\r\n\r\nclass HelloWorld(BaseCronJob):\r\n    \"\"\"Demo Cron Job class\"\"\"\r\n    lock_type = LockType.PARAMS\r\n```\r\nThe following values are supported:\r\n* `None` - no lock, concurrency is allowed\r\n* `LockType.CLASS` (default) - only one instance of given cron job class can be run at the same time (e.g. `Foo:p=1` and `Foo:p=2` can't work concurrently)\r\n* `LockType.PARAMS` - only one combination of class and params can be run at the same time (e.g. `Foo:p=1` and `Foo:p=2` can work concurrently, but another call to `Foo:p=1` will be prohibited)\r\nLocks acquired/released by `cron_worker` command.\r\n\r\nWe can configure a shared lock for several cron job classes to make sure only one of them is running:\r\n\r\n```python\r\nfrom cronman.taxonomies import LockType\r\n\r\nclass HelloWorld1(BaseCronJob):\r\n    \"\"\"Demo Cron Job class (1)\"\"\"\r\n    lock_type = LockType.CLASS\r\n    lock_name = 'HelloWorld'\r\n\r\nclass HelloWorld2(BaseCronJob):\r\n    \"\"\"Demo Cron Job class (2)\"\"\"\r\n    lock_type = LockType.CLASS\r\n    lock_name = 'HelloWorld'\r\n```\r\n\r\n## Configure CPU and IO priority\r\n\r\nWe can assign CPU priority (`nice`) to a cron job class by using `worker_cpu_priority` attribute:\r\n```python\r\nfrom cronman.taxonomies import CPUPriority\r\n\r\nclass NiceHellowWorld(BaseCronJob):\r\n    \"\"\"Hello World running through `nice -n 19`\"\"\"\r\n    worker_cpu_priority = CPUPriority.LOWEST\r\n```\r\nWe can also customize IO priority (`ionice`) by assigning one of values from `cronman.taxonomies.IOPriority` to `worker_io_priority` attribute, but this is not necessary in most cases, as `nice` changes IO priority as well.\r\n\r\nCommands `cron_scheduler run`, `cron_worker resume`, and cron job `RunCronTasks` will spawn worker processes with respect to CPU and IO priorities assigned to cron job classes. These settings **are not** enforced when running `cron_worker run` so you have to prepend `nice`/`ionice` to such calls manually.\r\n\r\n## List and kill running cron jobs\r\n\r\nCommand `cron_worker status` shows currently running cron jobs - PIDfile name, PID and status (`ALIVE`, `DEAD`).\r\nSearch results can be limited by `job spec` (cron job name, parameters):\r\n```\r\npython manage.py cron_worker status\r\npython manage.py cron_worker status Foo\r\npython manage.py cron_worker status Foo:bar=1\r\n```\r\n\r\nCommand `cron_worker kill` kills active cron jobs, gracefully (`SIGTERM`) or by force when process refuses to die (`SIGKILL`). List of tasks can be limited by `job spec`:\r\n```\r\npython manage.py cron_worker kill\r\npython manage.py cron_worker kill Foo\r\npython manage.py cron_worker kill Foo:bar=1\r\n```\r\nSingle process can be killed also using PID:\r\n```\r\npython manage.py cron_worker kill 39078\r\n```\r\n\r\n## Resuming cron jobs\r\n\r\nSubset of cron jobs can be resumed after being killed:\r\n\r\n```python\r\n\r\nclass ResumableHelloWorld(BaseCronJob):\r\n    \"\"\"Demo Cron Job class\"\"\"\r\n    can_resume = True\r\n```\r\n\r\nCommand `cron_worker resume` starts all killed cron jobs with `can_resume` capability:\r\n```\r\npython manage.py cron_worker resume\r\n```\r\n\r\nTo remove all entries about dead cron jobs and make sure they won't be resumed we can run `cron_worker clean` command:\r\n```\r\npython manage.py cron_worker clean\r\n```\r\n\r\nCommand `cron_worker suspend` cleans all previous entries about dead cron jobs and then kills all running ones to make sure that next `resume` will raise only recently killed jobs:\r\n```\r\npython manage.py cron_worker suspend\r\n```\r\n\r\n\r\n## List available cron jobs\r\n\r\nCommand `cron_worker info` shows list of all available cron jobs:\r\n```\r\npython manage.py cron_worker info\r\n```\r\nWhen cron job name is passed to this command, system displays docstring and parameters of given cron job:\r\n```\r\npython manage.py cron_worker info Foo\r\n```\r\n\r\n## Disable the scheduler\r\n\r\nScheduler command can be disabled temporarily:\r\n```\r\npython manage.py cron_scheduler disable\r\n```\r\nand re-enabled later:\r\n```\r\npython manage.py cron_scheduler enable\r\n```\r\nCalls to `cron_scheduler run` will not spawn worker processes while scheduler is disabled.\r\n\r\n## Send errors to sentry\r\n\r\nErrors in cron job classes are intercepted by `cron_worker` and sent to Sentry using the same config as other Django commands (`settings.RAVEN_MANAGEMENT_COMMAND_CONFIG`).\r\nIf `settings.CRONMAN_RAVEN_CMD` is defined, the scheduler will use it as execution script for worker processes, e.g.\r\n`python manage.py cron_worker run Foo:bar=1` will be converted to `{CRONMAN_RAVEN_CMD} -c \"python manage.py cron_worker run Foo:bar=1\"`\r\n\r\n## Cron Tasks - running cron jobs from Admin area\r\n\r\nSome cron jobs can be requested to start from Admin area: **Admin > Cron > Cron Tasks**\r\nTo add a cron job class to the list in Admin we need to set `ALLOWED_CRON_TASKS` setting:\r\n\r\n```python\r\n\r\nALLOWED_CRON_TASKS = (\r\n    'HelloWorld',\r\n)\r\n```\r\nTo request another run of given cron job we can just create a new `CronTask` record in Admin.\r\nCron job `RunCronTasks` started every 4 minutes by the scheduler will spawn a separate worker process for each pending Cron Task.\r\n\r\n## Changelog\r\n\r\n2020-01-09 - 1.2.0 Django 2 compatibility.\r\n2019-04-30 - 1.1.1 Pre-commit.com hooks support. Docs update\r\n2019-03-13 - 1.1.0 Add support for cronitor ping for cron_scheduler\r\n2019-02-25 - 1.0.0 Initial version released\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/unhaggle/django-cronman",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cronman",
    "package_url": "https://pypi.org/project/django-cronman/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cronman/",
    "project_urls": {
      "Homepage": "https://github.com/unhaggle/django-cronman"
    },
    "release_url": "https://pypi.org/project/django-cronman/1.2.0/",
    "requires_dist": [
      "croniter (<0.4)",
      "django (<3.0)",
      "python-dateutil",
      "requests",
      "typing",
      "redis (<2.11) ; extra == 'redis'",
      "raven (<5.33) ; extra == 'sentry'"
    ],
    "requires_python": "",
    "summary": "Cron management app for Django",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9185733,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c24296cf3574b928e03745b59157c6b830d5913da4dc8bf9772f0a58a549119f",
        "md5": "ef4c053e9cba8054386ecb1420ee7826",
        "sha256": "4c94d7ef0ef0b4b62253736da0af85f2b548e67d370fdb2c2d5de0a8128e0d98"
      },
      "downloads": -1,
      "filename": "django_cronman-1.2.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "ef4c053e9cba8054386ecb1420ee7826",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 70682,
      "upload_time": "2020-01-09T08:24:03",
      "upload_time_iso_8601": "2020-01-09T08:24:03.726237Z",
      "url": "https://files.pythonhosted.org/packages/c2/42/96cf3574b928e03745b59157c6b830d5913da4dc8bf9772f0a58a549119f/django_cronman-1.2.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "570db79d7bc6f55605d880d8206543ef3489f37bf96fb32fb0458f4f887354f0",
        "md5": "759eab0254e2081ed4a2b1f123e9cb24",
        "sha256": "4e584b25ff80ce580aa34989bcdc0dfa0201f5073465e66790075b7f68a287f6"
      },
      "downloads": -1,
      "filename": "django-cronman-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "759eab0254e2081ed4a2b1f123e9cb24",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 51177,
      "upload_time": "2020-01-09T08:24:05",
      "upload_time_iso_8601": "2020-01-09T08:24:05.274516Z",
      "url": "https://files.pythonhosted.org/packages/57/0d/b79d7bc6f55605d880d8206543ef3489f37bf96fb32fb0458f4f887354f0/django-cronman-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}