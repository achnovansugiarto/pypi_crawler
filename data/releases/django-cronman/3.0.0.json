{
  "info": {
    "author": "Unhaggle Inc.",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Utilities"
    ],
    "description": "# django-cronman\n\n## Overview\n\nDjango app to define and manage periodic tasks at Python level.\n\n## Installation\n\n`django-cronman` can be installed directly from PyPI using `pip`:\n\n```bash\npip install django-cronman\n```\n\nYou can also install it with additional dependencies to be able to use Cron Remote Manager.\n\n```bash\npip install django-cronman[redis]\n```\n\n## Define a new cron job\n\nCron job definition is inspired by Django Admin configuration. To add a new job, you have to create `cron_job.py`\nfile inside an app, create `BaseCronJob` subclass inside and register it:\n\n```python\nfrom cronman.job import BaseCronJob, cron_job_registry\n\nclass HelloWorld(BaseCronJob):\n    \"\"\"Demo Cron Job class\"\"\"\n\n    def run(self):\n        \"\"\"Main logic\"\"\"\n        pass\n\ncron_job_registry.register(HelloWorld)\n```\n\nCron job classes are registered (and referred to) by name, which may be customized on registration:\n```python\ncron_job_registry.register(HelloWorld, name='Hello')\n```\nIt's also possible to retrieve or unregister a class (e.g. while testing):\n```python\ncron_job_registry.get('HelloWorld')\ncron_job_registry.unregister('HelloWorld')\n```\nIf there is more than 1 cron job in given app, it's recommended to create a package instead of single `cron_jobs` module, create one submodule per class and do the imports and registration in package's  `__init__.py`.\n\n## Configure cron jobs\n\nTo ensure that a cron job is executed periodically, you have add an entry to `CRON_JOBS`:\n\n```python\nCRON_JOBS = (\n    ...\n    # (<time spec>, <job spec>)\n    # 'HelloWorld' will be executed a 5:15AM every day:\n    ('   15   5   *   *   *', 'HelloWorld'),\n)\n```\n\nSet ```CRONMAN_JOBS_MODULE``` to the dotted path name of the module where cron jobs are specified. Remember, this module MUST have a ```CRON_JOBS``` attribute. ```CRONMAN_JOBS_MODULE``` is ```None``` by default. For example:\n\n```python\n# settings_local.py\n\nCRONMAN_JOBS_MODULE = 'app.cron_jobs.name'\n```\n\n## Run the scheduler\n\nCron jobs defined in ```settings.CRONMAN_JOBS_MODULE``` are started by `cron_scheduler` command from `cron` app.\nThis command constructs a list of jobs that should be executed in current period (now +/- 1 minute)\nand creates **a new subprocess** for each job.\n```\npython manage.py cron_scheduler run\n```\nThis command should be added to system's crontab on server responsible for running periodic tasks\nand executed every 2 minutes.\n\n## Run single cron job\n\nCommand `cron_worker run <job spec>` is responsible for executing cron jobs:\n```\npython manage.py cron_worker run HelloWorld\n```\n\n## Cron job parameters\n\nCron job classes can accept parameters which are passed to `run` method as positional or named arguments:\n```python\nclass HelloWorld(BaseCronJob):\n    \"\"\"Demo Cron Job class\"\"\"\n\n    def run(self, what, sleep=None):\n        \"\"\"Main logic\"\"\"\n        print \"Hello {}\".format(what)\n        if sleep:\n            time.sleep(int(sleep))\n    ...\n```\n```\npython manage.py cron_worker run HelloWorld:world,sleep=5\n```\nParameters are passed as string values, any type casts should be made in `run` method.\nQuoted string with spaces are supported, but comma can be used only as argument separator:\n```\npython manage.py cron_worker run HelloWorld:\"big world\",sleep=5\n```\nThere are utility functions for extracting lists and boolean values in `cronman.utils` module.\n\n## Configure Cronitor support\n\n`cron_worker` command can notify Cronitor when a job is started, finished or it has failed.\nTo enable this you have to:\n1. Enable Cronitor support in settings `CRONMAN_CRONITOR_ENABLED = True`\n2. Configure you cron job class:\n```python\nclass HelloWorld(BaseCronJob):\n    \"\"\"Demo Cron Job class\"\"\"\n    cronitor_id = 'ab12z'  # ID is assigned in Cronitor's dashboard\n```\n\nWe may disable sending optional \"RUN\" and \"FAIL\" pings to Cronitor when cron job starts by setting `cronitor_ping_run = False` or `cronitor_ping_fail = False` but this doesn't seem to be necessary.\n\n**Important note:**\nWhen adding a new monitor in Cronitor dashboard, please use type **heartbeat**. Avoid using **cron job** monitors, as they're sending false-positive alerts \"Has not run on schedule\".\n\n\n## Configure lock\n\nTasks can acquire locks to prevent concurrent calls. Locks have form of PIDfiles located in `settings.CRONMAN_DATA_DIR`. To modify lock behavior for given cron job class you can set `lock_type` attribute:\n\n```python\nfrom cronman.taxonomies import LockType\n\nclass HelloWorld(BaseCronJob):\n    \"\"\"Demo Cron Job class\"\"\"\n    lock_type = LockType.PARAMS\n```\nThe following values are supported:\n* `None` - no lock, concurrency is allowed\n* `LockType.CLASS` (default) - only one instance of given cron job class can be run at the same time (e.g. `Foo:p=1` and `Foo:p=2` can't work concurrently)\n* `LockType.PARAMS` - only one combination of class and params can be run at the same time (e.g. `Foo:p=1` and `Foo:p=2` can work concurrently, but another call to `Foo:p=1` will be prohibited)\nLocks acquired/released by `cron_worker` command.\n\nWe can configure a shared lock for several cron job classes to make sure only one of them is running:\n\n```python\nfrom cronman.taxonomies import LockType\n\nclass HelloWorld1(BaseCronJob):\n    \"\"\"Demo Cron Job class (1)\"\"\"\n    lock_type = LockType.CLASS\n    lock_name = 'HelloWorld'\n\nclass HelloWorld2(BaseCronJob):\n    \"\"\"Demo Cron Job class (2)\"\"\"\n    lock_type = LockType.CLASS\n    lock_name = 'HelloWorld'\n```\n\n## Configure CPU and IO priority\n\nWe can assign CPU priority (`nice`) to a cron job class by using `worker_cpu_priority` attribute:\n```python\nfrom cronman.taxonomies import CPUPriority\n\nclass NiceHellowWorld(BaseCronJob):\n    \"\"\"Hello World running through `nice -n 19`\"\"\"\n    worker_cpu_priority = CPUPriority.LOWEST\n```\nWe can also customize IO priority (`ionice`) by assigning one of values from `cronman.taxonomies.IOPriority` to `worker_io_priority` attribute, but this is not necessary in most cases, as `nice` changes IO priority as well.\n\nCommands `cron_scheduler run`, `cron_worker resume`, and cron job `RunCronTasks` will spawn worker processes with respect to CPU and IO priorities assigned to cron job classes. These settings **are not** enforced when running `cron_worker run` so you have to prepend `nice`/`ionice` to such calls manually.\n\n## List and kill running cron jobs\n\nCommand `cron_worker status` shows currently running cron jobs - PIDfile name, PID and status (`ALIVE`, `DEAD`).\nSearch results can be limited by `job spec` (cron job name, parameters):\n```\npython manage.py cron_worker status\npython manage.py cron_worker status Foo\npython manage.py cron_worker status Foo:bar=1\n```\n\nCommand `cron_worker kill` kills active cron jobs, gracefully (`SIGTERM`) or by force when process refuses to die (`SIGKILL`). List of tasks can be limited by `job spec`:\n```\npython manage.py cron_worker kill\npython manage.py cron_worker kill Foo\npython manage.py cron_worker kill Foo:bar=1\n```\nSingle process can be killed also using PID:\n```\npython manage.py cron_worker kill 39078\n```\n\n## Resuming cron jobs\n\nSubset of cron jobs can be resumed after being killed:\n\n```python\n\nclass ResumableHelloWorld(BaseCronJob):\n    \"\"\"Demo Cron Job class\"\"\"\n    can_resume = True\n```\n\nCommand `cron_worker resume` starts all killed cron jobs with `can_resume` capability:\n```\npython manage.py cron_worker resume\n```\n\nTo remove all entries about dead cron jobs and make sure they won't be resumed we can run `cron_worker clean` command:\n```\npython manage.py cron_worker clean\n```\n\nCommand `cron_worker suspend` cleans all previous entries about dead cron jobs and then kills all running ones to make sure that next `resume` will raise only recently killed jobs:\n```\npython manage.py cron_worker suspend\n```\n\n\n## List available cron jobs\n\nCommand `cron_worker info` shows list of all available cron jobs:\n```\npython manage.py cron_worker info\n```\nWhen cron job name is passed to this command, system displays docstring and parameters of given cron job:\n```\npython manage.py cron_worker info Foo\n```\n\n## Disable the scheduler\n\nScheduler command can be disabled temporarily:\n```\npython manage.py cron_scheduler disable\n```\nand re-enabled later:\n```\npython manage.py cron_scheduler enable\n```\nCalls to `cron_scheduler run` will not spawn worker processes while scheduler is disabled.\n\n## Send errors to sentry\n\nErrors in cron job classes are intercepted by `cron_worker` and sent to Sentry using the same config as other Django commands (`settings.RAVEN_MANAGEMENT_COMMAND_CONFIG`).\nIf `settings.CRONMAN_RAVEN_CMD` is defined, the scheduler will use it as execution script for worker processes, e.g.\n`python manage.py cron_worker run Foo:bar=1` will be converted to `{CRONMAN_RAVEN_CMD} -c \"python manage.py cron_worker run Foo:bar=1\"`\n\n## Cron Tasks - running cron jobs from Admin area\n\nSome cron jobs can be requested to start from Admin area: **Admin > Cron > Cron Tasks**\nTo add a cron job class to the list in Admin we need to set `ALLOWED_CRON_TASKS` setting:\n\n```python\n\nALLOWED_CRON_TASKS = (\n    'HelloWorld',\n)\n```\nTo request another run of given cron job we can just create a new `CronTask` record in Admin.\nCron job `RunCronTasks` started every 4 minutes by the scheduler will spawn a separate worker process for each pending Cron Task.\n\n## Changelog\n\n2021-01-20 - 3.0.0 Remove Python 2 checks. Fix issue with suspend all.\n2020-05-25 - 2.1.0 Python 3 + Django 2 compatibility.\n2020-04-30 - 2.0.1 Fix for sentry-sdk.\n2020-04-23 - 2.0.0 Replace raven with sentry-sdk.\n2020-01-09 - 1.2.0 Django 2 compatibility.\n2019-04-30 - 1.1.1 Pre-commit.com hooks support. Docs update\n2019-03-13 - 1.1.0 Add support for cronitor ping for cron_scheduler\n2019-02-25 - 1.0.0 Initial version released",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/unhaggle/django-cronman",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cronman",
    "package_url": "https://pypi.org/project/django-cronman/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cronman/",
    "project_urls": {
      "Homepage": "https://github.com/unhaggle/django-cronman"
    },
    "release_url": "https://pypi.org/project/django-cronman/3.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Cron management app for Django",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9185733,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43d2cad82ea8891bf7d2058526e9e0b998924c8a4845ac1772d88d0f9fc70da6",
        "md5": "e2be4741d28f6fda5f00f8d5c745a7d6",
        "sha256": "ea9bed26b6bc52cf899b93e586ec03dabf3bdc36ce2bcff66ddbf991a2d7eb29"
      },
      "downloads": -1,
      "filename": "django-cronman-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e2be4741d28f6fda5f00f8d5c745a7d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 57366,
      "upload_time": "2021-01-20T20:23:21",
      "upload_time_iso_8601": "2021-01-20T20:23:21.563560Z",
      "url": "https://files.pythonhosted.org/packages/43/d2/cad82ea8891bf7d2058526e9e0b998924c8a4845ac1772d88d0f9fc70da6/django-cronman-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}