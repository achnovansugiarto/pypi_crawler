{
  "info": {
    "author": "Stefan Foulis",
    "author_email": "stefan.foulis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Buildout",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "===================\ndjangoprojectrecipe\n===================\n\nThis buildout recipe can be used to create the necessary commands to replace\n``manage.py`` in a buildout environment. Optionally it can also generate \nscripts for wsgi and fcgi.\n\nsimple example::\n\n  [buildout]\n  parts = django\n  eggs = \n      django\n\n  [django]\n  recipe = djangoprojectrecipe\n  settings = myproject.settings\n  eggs = ${buildout:eggs}\n  extra-paths = src\n  project = myproject\n\n\nSupported options\n=================\n\nThe recipe supports the following options.\n\n``project``\n  This option sets the name for your project package.\n\n``settings``\n  You can set the name of the settings file which is to be used with\n  this option. This is useful if you want to have a different\n  production setup from your development setup. It defaults to\n  ``project.settings``.\n\n``extra-paths``\n  All paths specified here will be used to extend the default Python\n  path for the `bin/*` scripts. It is recommended to define these directly\n  in the ``[buildout]`` section and juste reference them. See the examples.\n\n``control-script``\n  The name of the script created in the bin folder. This script is the\n  equivalent of the ``manage.py`` Django normally creates. By default it\n  uses the name of the section (the part between the ``[ ]``).\n\n``wsgi``\n  An extra script is generated in the bin folder when this is set to\n  ``true``. This can be used with mod_wsgi to deploy the project. The\n  name of the script is ``control-script.wsgi``.\n\n``fcgi``\n  Like ``wsgi`` this creates an extra script within the bin folder. This\n  script can be used with an FCGI deployment.\n\n``logfile``\n  In case the WSGI server you're using does not allow printing to stdout,\n  you can set this variable to a filesystem path - all stdout/stderr data\n  is redirected to the log instead of printed. The same logfile will be used\n  for fcgi. You can use the base directory for relative paths:\n  ``logfile = ${buildout:directory}/log/django.log``\n\n\nFCGI specific settings\n======================\n\nOptions for FCGI can be set within a settings file (``settings.py``). The options\nis ``FCGI_OPTIONS``. It should be set to a dictionary. The part below is an\nexample::\n\n  FCGI_OPTIONS = {\n      'method': 'threaded',\n  }\n\n\nAnother example\n===============\n\nThe next example shows you how to use some more of the options. Here we seperate\nout ``eggs`` and ``extra-paths`` onto the buildout configuration and use it both in\na part to get a general python interpreter and a django instance with the\nsame paths::\n\n  [buildout]\n  versions=versions\n  parts = \n      python\n      django\n  eggs =\n    django\n    South\n    django-cms\n  extra-paths = \n      src\n      ../external_apps/\n      /some/other/directory/to/add/to/pythonpath/\n      parts/django_svn/django/\n  \n  [versions]\n  django = 1.2.4\n  \n  [python]\n  recipe = zc.recipe.egg\n  interpreter = python\n  eggs = ${buildout:eggs}\n  extra-paths = ${buildout:extra-paths}\n  scripts =\n      python\n  \n  [django]\n  recipe = djangoprojectrecipe\n  settings = myproject.settings_live\n  wsgi = true\n  eggs = ${buildout:eggs}\n  extra-paths = ${buildout:extra-paths}\n\n\nUsing django trunk\n==================\n\n``djangoprojectrecipe`` does not handle installing django at all. The easiest \ncase is when installing released versions from pypi (just add ``django`` to \n``eggs``). If you want to use django trunk or some special branch, \n`infrae.subversion` may be of service::\n\n  [buildout]\n  versions=versions\n  develop = \n      parts/svn/django/\n  parts = \n      svn\n      django\n  eggs = \n      django\n      South\n      django-whatever\n  \n  [versions]\n  django=\n  \n  [svn]\n  recipe = infrae.subversion\n  urls = http://code.djangoproject.com/svn/django/trunk/\n  \n  [django]\n  recipe = djangoprojectrecipe\n  settings = myproject.settings_dev\n  eggs = ${buildout:eggs}\n  extra-paths = ${buildout:extra-paths}\n\nDon't forget to add `svn` to `parts` and `parts/svn/django/` to\n`develop`. Also you should remove the specific version setting from `[versions]`\nfor django, because otherwise buildout will continue to use the packaged \nversion.\n\nSee http://pypi.python.org/pypi/infrae.subversion for more examples.\n\n\nExample configuration for mod_wsgi\n==================================\n\nIf you want to deploy a project using mod_wsgi you could use this\nexample as a starting point::\n\n  <Directory /path/to/buildout>\n         Order deny,allow\n         Allow from all\n  </Directory>\n  <VirtualHost 1.2.3.4:80>\n         ServerName      my.rocking.server\n         CustomLog       /var/log/apache2/my.rocking.server/access.log combined\n         ErrorLog        /var/log/apache2/my.rocking.server/error.log\n         WSGIScriptAlias / /path/to/buildout/bin/django.wsgi\n  </VirtualHost>\n\n\nChanges\n=======\n\n\n1.1.1 (2011-05-18)\n------------------\n\n* added support for buildout relative-paths\n\n1.1.0 (2011-03-17)\n------------------\n\n* removed a lot of unneeded functionality that can be solved by other recipes\n\n0.20\n----\n\n- djangoprojectrecipe was forked from djangorecipe",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/stefanfoulis/djangoprojectrecipe",
    "keywords": "",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "djangoprojectrecipe",
    "package_url": "https://pypi.org/project/djangoprojectrecipe/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djangoprojectrecipe/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/stefanfoulis/djangoprojectrecipe"
    },
    "release_url": "https://pypi.org/project/djangoprojectrecipe/1.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "simple buildout recipe for django projects",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3552917,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "604ac268c821760ba3c4ed04858ac0765903322c55f33a7feb978c9acf47ce78",
        "md5": "03fd5d60995af9835eeb101eaebefd20",
        "sha256": "5f91441acdf7d3c7a7d67198f0cdb76de9e5f9c223262d25f21dd6a90c69e05e"
      },
      "downloads": -1,
      "filename": "djangoprojectrecipe-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "03fd5d60995af9835eeb101eaebefd20",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6944,
      "upload_time": "2011-05-18T17:18:30",
      "upload_time_iso_8601": "2011-05-18T17:18:30.625247Z",
      "url": "https://files.pythonhosted.org/packages/60/4a/c268c821760ba3c4ed04858ac0765903322c55f33a7feb978c9acf47ce78/djangoprojectrecipe-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}