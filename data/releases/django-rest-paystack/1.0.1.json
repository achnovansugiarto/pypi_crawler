{
  "info": {
    "author": "Nyior Clement",
    "author_email": "cnyior27@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "<h1 align=\"center\">\n\tdjango-rest-paystack: a minimal SDK for integrating Paystack into your django-rest API backend.\n</h1>\n\n<p align=\"center\">\n    Focus on your business logic. Leave all the mundane payment _serere_ to us.\n    Our package will do all the heavy lifting for you :D\n</p>\n\n\n## What is django-rest-paystack?\n\n### Overview\nCreating those payment endpoints for every single e-commerce project we work on could become\nredundant and perharps somewhat boring overtime. While there are different approaches to integrating and processing payments with a gateway like Paystack(more on this later), in each approach, the flow doesn't really change. If it doesn't change then why repeat yourself? _you nor need stress  lol_\n\n    DRY: Enter django-rest-paystack.\n        when installed and configured, this package generates all the endpoints you'd need to start and\n        complete a transaction. \n\n### Endpoints\n* initialize a transaction: \n```python\n        POST /api/v1/paystack/transaction/initiate\n\n        minimal_payload = {\n            \"amount\": 0,\n            \"email\": \"string\",\n        }\n```\n* verify a transaction:  `GET /api/v1/paystack/transaction/verify/?transaction_ref=\"ref\"`\n\n* Get user authorization code: `GET /api/v1/paystack/paystack-customer/{user__id}/`\n\n* charge an authorization: \n```python\n        POST /api/v1/paystack/transaction/charge-customer`\n        minimal_payload = {\n            \"amount\": 0,\n            \"email\": \"string\",\n            \"authorization_code\": \"string\",\n        }\n```\n\n* handle webhooks: ` api/v1/paystack/webook-handler`\n\n* get all transactions: `/api/v1/paystack/transaction`\n\n* retrieve a single transaction: `/api/v1/paystack/transaction/{uuid}`\n* This package also logs some relevant data like the authorization_code in the db.\n\nIf you're not very familiar with how some of those endpoints work, don't worry, I will get to that in a bit.\n\n\n## How do I use this package in my project?\n\n### Quick Setup\n\nInstall package\n\n    pip install django-rest-paystack\n    \nAdd `paystack` app to INSTALLED_APPS in your django `settings.py`:\n\n```python\nINSTALLED_APPS = (\n    ...,\n    'rest_framework',\n    'rest_framework.authtoken',\n    ...,\n    'paystack'\n)\n```\n\nLoad paystack credentials in your django `settings.py`:\n\n```python\n# Ideally, these values should be stored as environment variables, and loaded like so:\n\nPAYSTACK_PUBLIC_KEY=os.environ.get('name-of-var')\nPAYSTACK_PRIVATE_KEY=os.environ.get('name-of-var')\n\n```\n\nAdd URL patterns\n\n```python\nurlpatterns = [\n    path('paystack/', include('paystack.urls')),\n]\n```\n\nRun migrations to create the `PaystackCustomer, TransactionLog` models that comes with this package\n\n```python\nmanage migrate\n\n# The created models are automically registered and made available to you in the admin view\n```\n\n### Paying for an order\nWhile checkout process could be handled in different ways with Paystack, the general flow is this:\n* Payment is initialized from the frontend. Initializing a payment entails collecting the user details(email, name), and total amount and sending it to Paystack.\n* A response is then returned to the frontend. The response usually contains useful data like the _access code_, and the _redirect url_.\n* The frontend then charges the user's card\n* Once the card is charged and the process completed, paystack then returns the _transaction_reference_(a unique identifier for each transaction) to the frontend\n* The frontend could then use the _transaction_reference_ to verify(get the status) of the  transaction\n* In addition, Once the card is charged and the process completed, paystack then sends an event to a specified webhook url\n\n#### That's the general flow. Let's look at these specific ways...\nThere are about four ways of handling checkouts with Paystack. This package has been designed to cater for the three most common approaches.\nLet's quickly go over the flow for each approach and how you could use this package to process an order in each scenario.\n\n##### Paystack Popup: with Paystack inline Javascript\nHere you'd import Paystack's inline Javascript using the _script_ tag. This will inturn insert the Paystack's pay button somewhere on your page. on lick of the pay button, the popup for collecting a customer's card details is loaded and shown to the user. (oversimplified sha).\n\nFollow the below steps to use this package to process an order in this scenario:\n* Do all the necessary frontend setup. The initialization of payment happens entirely on the frontend.\n* Once a card has been charged from the frontend. You could verify the transaction using the `GET /api/v1/paystack/transaction/verify/?transaction_ref=\"ref\"` endpoint\n\n##### Redirect: redirecting to paystack page outside your website or mobile app\nNo imports required here. A user is redirected to paystack where they make payment.\n\nFollow the below steps to use this package to process an order in this scenario:\n\n* Make a call to the ` POST /api/v1/paystack/transaction/initiate ` with the expected payload from the frontend to initialize a transaction\n* The endpoint then returns a response that contains the _redirect url_ and _access code_ to the frontend\n* The frontend then redirects the customer to the _redirect url_ returned in the reponse. The customer is charged there.\n* Make sure to add a CALL BACK URL on your paystack dashboard. Once the customer has been charged on the redirect page they'd be taken back to the CALL BACK URL you specify(usually a page on your site). When the users are taken back to the CALL BACK URL, the transaction reference for that transaction is appended to the URL. \n* Once a card has been charged from the frontend. You could verify the transaction using the `GET /api/v1/paystack/transaction/verify/?transaction_ref=\"ref\"` endpoint\n* Once the user is taken back to the CALL BACK URL on your site, You could then extract the _transaction reference_ appended to the URL and make a call to the  `GET /api/v1/paystack/transaction/verify/?transaction_ref=\"ref\"` endpoint\n\n##### Paystack mobile SDKs\nNo redirect here. It's the mobile version of the Paystack inline Javascript popup for web applications.\n\nFollow the below steps to use this package to process an order in this scenario:\n* Do all the necessary frontend setup. Essentially, you'd have to integrate some mobile SDK that allows users make payment within your mobile app without redirecting the user.\n* Make a call to the ` POST /api/v1/paystack/transaction/initiate ` with the expected payload from the frontend to initialize a transaction\n* The endpoint then returns a response that contains the _access code_ and _redirect url_ to the frontend\n* The frontend could then use the access code to charge a card within the app using the mobile SDK integrated. \n* Once a card has been charged from the frontend using the mobile SDK a response is returned containing the transaction reference. You could then verify the transaction using the `GET /api/v1/paystack/transaction/verify/?transaction_ref=\"ref\"` endpoint\n\n\nIn all scenarios, make sure to specify the `your-domain + api/v1/paystack/webook-handler` endpoint as your WEBHOOOK URL on your Paystack dashboard. It is important that you do this because, eventhough we have an endpoint where you could verify and get the status of a transaction, it in the webhook that we are logging things like the transaction data as well as other things like the authorization_code that could be used to charge a customer that has already been charged in the past. See code snipet below:\n\n```python\nclass WebhookService(object):\n    def __init__(self, request) -> None:\n        self.request = request\n\n    def webhook_handler(self):\n        secret = getattr(\n            settings, ' PAYSTACK_PRIVATE_KEY', None\n        )\n        webhook_data = self.request.data\n        hash = hmac.new(secret, webhook_data, digestmod=hashlib.sha512).hexdigest()\n\n        if hash != self.request.headers[\"x-paystack-signature\"]:\n            raise ValidationError(\"MAC authentication failed\")\n\n        if webhook_data[\"event\"] == \"charge.success\":\n            paystack_service = TransactionService()\n            paystack_service.log_transaction(webhook_data[\"data\"])\n\n            customer_service = CustomerService() # logs customer data like the auth_code here\n            customer_service.log_customer(webhook_data[\"data\"])\n\n        return webhook_data\n```\n\n\n## Oh okay, I gerrit. Thank you Nyior\nYou're welcome. If you like this repo, click the :star: I'd appreciate that.\n\n\n## TODO:\n* Add split payments feature\n* Enable transfers\n* Enable subscription based(recurring) payments\n* Make tests more encompassing\n\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## Acknowledgements\nIn building this, I found the following repositories really helpful\n* [laravel-paystack](https://github.com/unicodeveloper/laravel-paystack)\n* [popoola/pypaystack](https://github.com/edwardpopoola/pypaystack)\n* [gbozee/pypaystack](https://github.com/gbozee/pypaystack)\n\n## License\nThis project is released under the [MIT](https://choosealicense.com/licenses/mit/) License\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Nyior/django-rest-paystack",
    "keywords": "django,rest,api,paystack,rest-framework,payment,initialize payment,verify payment,charge authorization,handle webhook",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-paystack",
    "package_url": "https://pypi.org/project/django-rest-paystack/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-paystack/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Nyior/django-rest-paystack/issues",
      "Homepage": "https://github.com/Nyior/django-rest-paystack",
      "Source Code": "https://github.com/Nyior/django-rest-paystack"
    },
    "release_url": "https://pypi.org/project/django-rest-paystack/1.0.1/",
    "requires_dist": [
      "Django (>=2.2)",
      "djangorestframework (>=3.1.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "A minimal SDK for integrating Paystack into your django-rest API backend.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12599260,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0518b291ea0b6e18578615a7231115bcb1f2b156d6939fe420552713be6bde5",
        "md5": "18495aa3c6e6c7adfb7b4bd00f73742e",
        "sha256": "4c78d47ffb663e54a21b7fb1f4455aede2089546e80878541d1ac94fdba386a2"
      },
      "downloads": -1,
      "filename": "django_rest_paystack-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "18495aa3c6e6c7adfb7b4bd00f73742e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5581,
      "upload_time": "2021-12-12T18:16:29",
      "upload_time_iso_8601": "2021-12-12T18:16:29.527984Z",
      "url": "https://files.pythonhosted.org/packages/a0/51/8b291ea0b6e18578615a7231115bcb1f2b156d6939fe420552713be6bde5/django_rest_paystack-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b14cd1d4428e1e500aa5e9d9aa7601c32172bee7cc3655b4f4b71cdc6c6579e7",
        "md5": "359098e33bfbb6cc42d69afdd89c0976",
        "sha256": "0dd8bf244b5fa1c0a961013130e1160cc822b5870661fcff1440721c492a6de8"
      },
      "downloads": -1,
      "filename": "django-rest-paystack-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "359098e33bfbb6cc42d69afdd89c0976",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5814,
      "upload_time": "2021-12-12T18:16:31",
      "upload_time_iso_8601": "2021-12-12T18:16:31.484544Z",
      "url": "https://files.pythonhosted.org/packages/b1/4c/d1d4428e1e500aa5e9d9aa7601c32172bee7cc3655b4f4b71cdc6c6579e7/django-rest-paystack-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}