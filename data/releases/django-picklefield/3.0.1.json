{
  "info": {
    "author": "Simon Charette",
    "author_email": "charette.s+django-picklefiel@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-picklefield\n==================\n\n.. image:: https://img.shields.io/pypi/l/django-picklefield.svg?style=flat\n    :target: https://pypi.python.org/pypi/django-picklefield/\n    :alt: License\n\n.. image:: https://img.shields.io/pypi/v/django-picklefield.svg?style=flat\n    :target: https://pypi.python.org/pypi/django-picklefield/\n    :alt: Latest Version\n\n.. image:: https://travis-ci.org/gintas/django-picklefield.svg?branch=master\n    :target: https://travis-ci.org/gintas/django-picklefield\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/gintas/django-picklefield/badge.svg?branch=master\n    :target: https://coveralls.io/r/gintas/django-picklefield?branch=master\n    :alt: Coverage Status\n\n.. image:: https://img.shields.io/pypi/pyversions/django-picklefield.svg?style=flat\n    :target: https://pypi.python.org/pypi/django-picklefield/\n    :alt: Supported Python Versions\n\n.. image:: https://img.shields.io/pypi/wheel/django-picklefield.svg?style=flat\n    :target: https://pypi.python.org/pypi/django-picklefield/\n    :alt: Wheel Status\n\n-----\nAbout\n-----\n\n**django-picklefield** provides an implementation of a pickled object field.\nSuch fields can contain any picklable objects.\n\nThe implementation is taken and adopted from `Django snippet #1694`_ by Taavi\nTaijala, which is in turn based on `Django snippet #513`_  by Oliver Beattie.\n\ndjango-picklefield is available under the MIT license.\n\n.. _Django snippet #1694: http://www.djangosnippets.org/snippets/1694/\n.. _Django snippet #513: http://www.djangosnippets.org/snippets/513/\n\n-----\nUsage\n-----\n\nFirst of all, you need to have **django-picklefield** installed; for your\nconvenience, recent versions should be available from PyPI.\n\nTo use, just define a field in your model:\n\n.. code:: python\n\n    >>> from picklefield.fields import PickledObjectField\n    ... class SomeObject(models.Model):\n    ...     args = PickledObjectField()\n\nand assign whatever you like (as long as it's picklable) to the field:\n\n.. code:: python\n\n    >>> obj = SomeObject()\n    >>> obj.args = ['fancy', {'objects': 'inside'}]\n    >>> obj.save()\n\n\n-----\nNotes\n-----\n\nIf you need to serialize an object with a PickledObjectField for transmission\nto the browser, you may need to subclass the field and override the\n``value_to_string()`` method.  Currently pickle fields are serialized as\nbase64-encoded pickles, which allows reliable deserialization, but such a\nformat is not convenient for parsing in the browser.  By overriding\n``value_to_string()`` you can choose a more convenient serialization format.\n\nFields now accept the boolean key word argument `copy`, which defaults to\n`True`. The `copy` is necessary for lookups to work correctly. If you don't\ncare about performing lookups on the picklefield, you can set `copy=False` to\nsave on some memory usage. This an be especially beneficial for very large\nobject trees.\n\n-------------\nRunning tests\n-------------\n\nThe full test suite can be run with `Tox`_::\n\n    >>> pip install tox\n    >>> tox\n\n.. _Tox: https://testrun.org/tox/latest/\n\n--------------\nOriginal notes\n--------------\n\nHere are the notes by taavi223, the original author:\n\nIncredibly useful for storing just about anything in the database (provided it\nis Pickle-able, of course) when there isn't a 'proper' field for the job.\n\nPickledObjectField is database-agnostic, and should work with any database\nbackend you can throw at it. You can pass in any Python object and it will\nautomagically be converted behind the scenes. You never have to manually pickle\nor unpickle anything. Also works fine when querying; supports exact, in, and\nisnull lookups. It should be noted, however, that calling QuerySet.values()\nwill only return the encoded data, not the original Python object.\n\nThis PickledObjectField has a few improvements over the one in snippet #513.\n\nThis one solves the DjangoUnicodeDecodeError problem when saving an object\ncontaining non-ASCII data by base64 encoding the pickled output stream. This\nensures that all stored data is ASCII, eliminating the problem.\n\nPickledObjectField will now optionally use zlib to compress (and uncompress)\npickled objects on the fly. This can be set per-field using the keyword\nargument \"compress=True\". For most items this is probably not worth the small\nperformance penalty, but for Models with larger objects, it can be a real space\nsaver.\n\nYou can also now specify the pickle protocol per-field, using the protocol\nkeyword argument. The default of 2 should always work, unless you are trying to\naccess the data from outside of the Django ORM.\n\nWorked around a rare issue when using the cPickle and performing lookups of\ncomplex data types. In short, cPickle would sometimes output different streams\nfor the same object depending on how it was referenced. This of course could\ncause lookups for complex objects to fail, even when a matching object exists.\nSee the docstrings and tests for more information.\n\nYou can now use the isnull lookup and have it function as expected. A\nconsequence of this is that by default, PickledObjectField has null=True set\n(you can of course pass null=False if you want to change that). If null=False\nis set (the default for fields), then you wouldn't be able to store a Python\nNone value, since None values aren't pickled or encoded (this in turn is what\nmakes the isnull lookup possible).\n\nYou can now pass in an object as the default argument for the field without it\nbeing converted to a unicode string first. If you pass in a callable though,\nthe field will still call it. It will not try to pickle and encode it.\n\nYou can manually import dbsafe_encode and dbsafe_decode from fields.py if you\nwant to encode and decode objects yourself. This is mostly useful for decoding\nvalues returned from calling QuerySet.values(), which are still encoded\nstrings.\n\nNote: If you are trying to store other django models in the PickledObjectField,\nplease see the comments for a discussion on the problems associated with doing\nthat. The easy solution is to put django models into a list or tuple before\nassigning them to the PickledObjectField.\n\nUpdate 9/2/09: Fixed the value_to_string method so that serialization should\nnow work as expected. Also added deepcopy back into dbsafe_encode, fixing #4\nabove, since deepcopy had somehow managed to remove itself. This means that\nlookups should once again work as expected in all situations. Also made the\nfield editable=False by default (which I swear I already did once before!)\nsince it is never a good idea to have a PickledObjectField be user editable.\n\n-------\nChanges\n-------\n\nChanges in version 3.0.0\n========================\n\n* Allowed default pickle protocol to be overriden using the\n  `PICKLEFIELD_DEFAULT_PROTOCOL` setting.\n* Dropped support for Python 2.\n* Added testing against Django 3.0.\n* Dropped support for Django 1.11.\n\nChanges in version 2.1.0\n========================\n\n* Added official support for Django 2.2 (thanks to joehybird).\n* Dropped support for Django 2.0 and 2.1 (thanks to joehybird).\n* Dropped support for Python 3.4 (thanks to joehybidd).\n\nChanges in version 2.0.0\n========================\n\n* Silenced ``RemovedInDjango30Warning`` warnings on Django 2.0+ (thanks to\n  canarduck).\n* Restructured project directories.\n* Disallowed the usage of empty strings for ``PickledObjectField``. That makes\n  ``.save()``, ``.create()``, etc. raise ``IntegrityError`` if `null` is not\n  ``True`` and no default value was specified like built-in fields do\n  (thanks to Attila-Mihaly Balazs).\n* Added a check for mutable default values to ``PickledObjectField``.\n\nChanges in version 1.1.0\n========================\n\n* Added support for Django 2.1 and dropped support for Django < 1.11.\n\nChanges in version 1.0.0\n========================\n\n* Added a new option to prevent a copy of the object before pickling: `copy=True`\n* Dropped support for Django 1.4\n* Dropped support for Django 1.7\n* Dropped support for Python 3.2\n* Added support for Python 3.6\n\nChanges in version 0.3.2\n========================\n\n* Dropped support for Django 1.3.\n* Dropped support for Python 2.5.\n* Silenced deprecation warnings on Django 1.8+.\n\nChanges in version 0.3.1\n========================\n\n* Favor the built in json module (thanks to Simon Charette).\n\nChanges in version 0.3.0\n========================\n\n* Python 3 support (thanks to Rafal Stozek).\n\nChanges in version 0.2.0\n========================\n\n* Allow pickling of subclasses of django.db.models.Model (thanks to Simon\n  Charette).\n\nChanges in version 0.1.9\n========================\n\n* Added `connection` and `prepared` parameters to `get_db_prep_value()` too\n  (thanks to Matthew Schinckel).\n\nChanges in version 0.1.8\n========================\n\n* Updated link to code repository.\n\nChanges in version 0.1.7\n========================\n\n* Added `connection` and `prepared` parameters to `get_db_prep_lookup()` to\n  get rid of deprecation warnings in Django 1.2.\n\nChanges in version 0.1.6\n========================\n\n* Fixed South support (thanks aehlke@github).\n\nChanges in version 0.1.5\n========================\n\n* Added support for South.\n* Changed default to null=False, as is common throughout Django.\n\nChanges in version 0.1.4\n========================\n\n* Updated copyright statements.\n\nChanges in version 0.1.3\n========================\n\n* Updated serialization tests (thanks to Michael Fladischer).\n\nChanges in version 0.1.2\n========================\n\n* Added Simplified BSD licence.\n\nChanges in version 0.1.1\n========================\n\n* Added test for serialization.\n* Added note about JSON serialization for browser.\n* Added support for different pickle protocol versions (thanks to Michael\n  Fladischer).\n\nChanges in version 0.1\n======================\n\n* First public release.\n\n\n--------\nFeedback\n--------\n\nThere is a home page <http://github.com/gintas/django-picklefield>\nwith instructions on how to access the code repository.\n\nSend feedback and suggestions to gintautas@miliauskas.lt .\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/gintas/django-picklefield",
    "keywords": "django pickle model field",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-picklefield",
    "package_url": "https://pypi.org/project/django-picklefield/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-picklefield/",
    "project_urls": {
      "Homepage": "http://github.com/gintas/django-picklefield"
    },
    "release_url": "https://pypi.org/project/django-picklefield/3.0.1/",
    "requires_dist": [
      "Django (>=2.2)",
      "tox ; extra == 'tests'"
    ],
    "requires_python": ">=3",
    "summary": "Pickled object field for Django",
    "version": "3.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14173681,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59d428d05a25f5d8dcb2f5f73b64badf278ae29a27ad8334a0022730a4ca3eb4",
        "md5": "67257c33c6814dd513add5ebb27848c3",
        "sha256": "3c702a54fde2d322fe5b2f39b8f78d9f655b8f77944ab26f703be6c0ed335a35"
      },
      "downloads": -1,
      "filename": "django_picklefield-3.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67257c33c6814dd513add5ebb27848c3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 9435,
      "upload_time": "2020-06-05T16:08:06",
      "upload_time_iso_8601": "2020-06-05T16:08:06.467075Z",
      "url": "https://files.pythonhosted.org/packages/59/d4/28d05a25f5d8dcb2f5f73b64badf278ae29a27ad8334a0022730a4ca3eb4/django_picklefield-3.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d3d5e8b2ce0be78427ca91e63fcbdce2b98ea356c7c15b1886055b7ad35b959",
        "md5": "cedb9a5ba937b6d9a5b78989e81885ac",
        "sha256": "15ccba592ca953b9edf9532e64640329cd47b136b7f8f10f2939caa5f9ce4287"
      },
      "downloads": -1,
      "filename": "django-picklefield-3.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cedb9a5ba937b6d9a5b78989e81885ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 9506,
      "upload_time": "2020-06-05T16:08:07",
      "upload_time_iso_8601": "2020-06-05T16:08:07.509273Z",
      "url": "https://files.pythonhosted.org/packages/3d/3d/5e8b2ce0be78427ca91e63fcbdce2b98ea356c7c15b1886055b7ad35b959/django-picklefield-3.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}