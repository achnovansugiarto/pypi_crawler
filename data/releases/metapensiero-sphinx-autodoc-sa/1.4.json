{
  "info": {
    "author": "Lele Gaifax",
    "author_email": "lele@metapensiero.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Sphinx :: Extension",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Database",
      "Topic :: Utilities"
    ],
    "description": ".. -*- coding: utf-8 -*-\n.. :Project:   metapensiero.sphinx.autodoc_sa -- Autodoc extension to pretty print canned SA queries\n.. :Created:   Sat 14 Jan 2017 10:34:19 CET\n.. :Author:    Lele Gaifax <lele@metapensiero.it>\n.. :License:   GNU General Public License version 3 or later\n.. :Copyright: Â© 2017 Lele Gaifax\n..\n\n================================\n metapensiero.sphinx.autodoc_sa\n================================\n\nAutodoc extension to pretty print canned SA queries\n===================================================\n\n :author: Lele Gaifax\n :contact: lele@metapensiero.it\n :license: GNU General Public License version 3 or later\n\nThis is a very simple extension to Sphinx__ that injects the ability to recognize and pretty\nprint SQLAlchemy__ statements into its `automodule`__ and autoclass directives.\n\n__ http://www.sphinx-doc.org/\n__ http://www.sqlalchemy.org/\n__ http://www.sphinx-doc.org/en/1.5.1/ext/autodoc.html?highlight=autoclass#directive-automodule\n\nTo use it, first of all you must register the extension within the Sphinx environment, adding\nthe full name of the package to the ``extensions`` list in the file ``conf.py``, for example::\n\n  # Add any Sphinx extension module names here, as strings.\n  extensions = ['metapensiero.sphinx.autodoc_sa']\n\nWithout further settings it uses the default SQLAlchemy `stringification strategy`__, but you\ncan explicitly choose the right *dialect* by setting ``autodoc_sa_dialect`` to a string\ncontaining its fully qualified name, for example::\n\n  autodoc_sa_dialect = 'sqlalchemy.dialects.postgresql.dialect'\n\nOtherwise, you can set it using the ``-D`` option of the ``sphinx-build`` command, e.g. adding\n``-D autodoc_sa_dialect=my.own.dialect`` to the ``SPHINXOPTS`` of the Makefile created by\n``sphinx-quickstart``.\n\n__ http://docs.sqlalchemy.org/en/rel_1_1/faq/sqlexpressions.html#how-do-i-render-sql-expressions-as-strings-possibly-with-bound-parameters-inlined\n\nAt this point, any documented SQLAlchemy core statement or ORM query, appearing either at the\nmodule level or as a class attribute, will be *compiled* into SQL, beautified using\n`sqlparse.format()`__ and added to the documentation wrapped within a ``code-block:: sql``\ndirective.\n\n__ https://sqlparse.readthedocs.io/en/latest/api/#sqlparse.format\n\nIf you chose a specific SQLAlchemy dialect, by any chance you may want to select the right\nPygments lexer__ to adjust the highlighting rules, instead of the default ``sql``::\n\n  autodoc_sa_pygments_lang = 'postgresql'\n\n__ http://pygments.org/docs/lexers/#lexers-for-various-sql-dialects-and-related-interactive-sessions\n\nIf you are using ``PostgreSQL``, you may prefer using the `pg_query`__ SQL prettifier over the\ndefault based on ``sqlparse``::\n\n  autodoc_sa_prettifier = 'pg_query'\n\n__ https://pypi.python.org/pypi/pg_query\n\n\n.. -*- coding: utf-8 -*-\n\nChanges\n-------\n\n1.4 (2017-08-09)\n~~~~~~~~~~~~~~~~\n\n* Replace the dynamic argument placeholders injected by SA with their literal values, leaving\n  the developer's explicit bindparams alone\n\n\n1.3 (2017-08-08)\n~~~~~~~~~~~~~~~~\n\n* Handle also the `pg_query`__ SQL prettifier\n\n* New options, ``autodoc_sa_prettifier`` and ``autodoc_pygments_lang``\n\n__ https://pypi.python.org/pypi/pg_query\n\n\n1.2 (2017-03-22)\n~~~~~~~~~~~~~~~~\n\n* Minor tweak, no externally visible changes\n\n\n1.1 (2017-01-17)\n~~~~~~~~~~~~~~~~\n\n* First release on PyPI\n\n\n1.0 (unreleased)\n~~~~~~~~~~~~~~~~\n\n* Polished, tested and extended to support class' attributes as well\n\n* Extracted from metapensiero.sphinx.patchdb\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/lele/metapensiero.sphinx.autodoc_sa",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metapensiero.sphinx.autodoc-sa",
    "package_url": "https://pypi.org/project/metapensiero.sphinx.autodoc-sa/",
    "platform": "",
    "project_url": "https://pypi.org/project/metapensiero.sphinx.autodoc-sa/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/lele/metapensiero.sphinx.autodoc_sa"
    },
    "release_url": "https://pypi.org/project/metapensiero.sphinx.autodoc-sa/1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Autodoc extension to pretty print canned SA queries",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16124487,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efd6760da9cf4799275213e8ac4681ec6bf7d87d940124a5d757c3414e2d9afe",
        "md5": "3d1c586a01db5ff5128c2bbd9404939a",
        "sha256": "f1c0a1c1757e437f59ff408f2029db3d4dc3aef3c2bc6d8f2c48743d9a6c5dc2"
      },
      "downloads": -1,
      "filename": "metapensiero.sphinx.autodoc_sa-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "3d1c586a01db5ff5128c2bbd9404939a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8807,
      "upload_time": "2017-08-09T08:05:00",
      "upload_time_iso_8601": "2017-08-09T08:05:00.719883Z",
      "url": "https://files.pythonhosted.org/packages/ef/d6/760da9cf4799275213e8ac4681ec6bf7d87d940124a5d757c3414e2d9afe/metapensiero.sphinx.autodoc_sa-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}