{
  "info": {
    "author": "Joost Cassee",
    "author_email": "joost@cassee.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=================\ndjango-geckoboard\n=================\n\nGeckoboard_ is a hosted, real-time status board serving up indicators\nfrom web analytics, CRM, support, infrastructure, project management,\nsales, etc.  It can be connected to virtually any source of quantitative\ndata.  This Django_ application provides view decorators to help create\ncustom widgets.\n\n.. _Geckoboard: http://www.geckoboard.com/\n.. _Django: http://www.djangoproject.com/\n\n\nInstallation\n============\n\nTo install django-geckoboard, simply place the ``django_geckoboard``\npackage somewhere on the Python path.  You do not need to add it to the\n``INSTALLED_APPS`` list, unless you want to run the tests.\n\n\nLimiting access\n===============\n\nIf you want to protect the data you send to Geckoboard from access by\nothers, you can use an API key shared by Geckoboard and your widget\nviews.  Set ``GECKOBOARD_API_KEY`` in the project ``settings.py`` file::\n\n    GECKOBOARD_API_KEY = 'XXXXXXXXX'\n\nIf you do not set an API key, anyone will be able to view the data by\nvisiting the widget URL.\n\n\nCreating custom widgets\n=======================\n\nThe available custom widgets are described in the Geckoboard support\nsection, under `Geckoboard API`_.  From the perspective of a Django\nproject, a custom widget is just a view.  The django-geckoboard\napplication provides view decorators that render the correct response\nfor the different widgets.\n\nLet's say you want to add a widget to your dashboard that shows the\nnumber of number of comments posted today.  First create a view, using a\ndjango-geckoboard decorator::\n\n    from datetime import date, time, datetime\n    from django.contrib.comments.models import Comment\n    from django_geckoboard.decorators import number_widget\n\n    @number_widget\n    def comment_count(request):\n        midnight = datetime.combine(date.today(), time.min)\n        return Comment.objects.filter(submit_date__gte=midnight).count()\n\n\nIf your widget has optional settings, you can pass them in the decorator\ndefinition::\n\n    @number_widget(prefix='$', absolute='true', reverse='true')\n    def comment_count(request):\n        midnight = datetime.combine(date.today(), time.min)\n        return Comment.objects.filter(submit_date__gte=midnight).count()\n\n\nThen use a URLconf module to map a URL to the view::\n\n    from django.conf.urls.defaults import *\n\n    urlpatterns = patterns('YOUR_VIEW_MODULE',\n        ...\n        (r'^geckoboard/comment_count/$', 'comment_count'),\n    )\n\nThis is all the Django code you need to display the comment count on\nyour dashboard. When you create a custom widget in Geckoboard, enter the\nfollowing information:\n\nURL data feed\n    The view URL.  In the example above this would be something like\n    ``http://HOSTNAME/geckoboard/comment_count/``.\n\nAPI key\n    The content of the ``GECKOBOARD_API_KEY`` setting, if you have set\n    it.\n\nWidget type\n    *Custom*\n\nFeed format\n    Either *XML* or *JSON*.  The view decorators will automatically\n    detect and output the correct format.\n\nRequest type\n    Either *GET* or *POST*.  The view decorators accept both.\n\n\nThe following decorators are available from the\n``django_geckoboard.decorators`` module:\n\n\n``number_widget``\n-----------------\n\nRender a *Number & Secondary Stat* widget.\n\nThe decorated view must return a tuple *(current, [previous],\n[prefix])* where the *current* parameter is the current value, optional\n*previous* parameter is the previous value of the measured quantity and\nthe optional parameter *prefix* is the prefix used in Geckoboard widget.\nIf there is only one parameter you do not need to return it in a tuple.\nFor example, to render a widget that shows the number of users and the\ndifference from last week::\n\n    from django_geckoboard.decorators import number_widget\n    from datetime import datetime, timedelta\n    from django.contrib.auth.models import User\n\n    @number_widget\n    def user_count(request):\n        last_week = datetime.now() - timedelta(weeks=1)\n        users = User.objects\n        last_week_users = users.filter(date_joined__lt=last_week)\n        return (users.count(), last_week_users.count())\n\n    @number_widget\n    def users_count_with_prefix(request):\n        last_week = datetime.now() - timedelta(weeks=1)\n        users = User.objects\n        last_week_users = users.filter(date_joined__lt=last_week)\n        return (users.count(), last_week_users.count(), '$')\n\n\n``rag_widget``\n--------------\n\nRender a *RAG Column & Numbers* or *RAG Numbers* widget.\n\nThe decorated view must return a tuple with three tuples *(value,\n[text])*.  The *value* parameters are the numbers shown in red, amber\nand green (in that order).  The optional *text* parameters will be\ndisplayed next to the respective values in the dashboard.\n\nFor example, to render a widget that shows the number of comments that\nwere approved or deleted by moderators in the last 24 hours::\n\n    from django_geckoboard.decorators import rag_widget\n    from datetime import datetime, timedelta\n    from django.contrib.comments.models import Comment, CommentFlag\n\n    @rag_widget\n    def comments(request):\n        start_time = datetime.now() - timedelta(hours=24)\n        comments = Comment.objects.filter(submit_date__gt=start_time)\n        total_count = comments.count()\n        approved_count = comments.filter(\n                flags__flag=CommentFlag.MODERATOR_APPROVAL).count()\n        deleted_count = Comment.objects.filter(\n                flags__flag=CommentFlag.MODERATOR_DELETION).count()\n        pending_count = total_count - approved_count - deleted_count\n        return (\n            (deleted_count, \"Deleted comments\"),\n            (pending_count, \"Pending comments\"),\n            (approved_count, \"Approved comments\"),\n        )\n\n\n``text_widget``\n---------------\n\nRender a *Text* widget.\n\nThe decorated view must return a list of tuples *(message, [type])*.\nThe *message* parameters are strings that will be shown in the widget.\nThe *type* parameters are optional and tell Geckoboard how to annotate\nthe messages.  Use ``TEXT_INFO`` for informational messages,\n``TEXT_WARN`` for for warnings and ``TEXT_NONE`` for plain text (the\ndefault).  If there is only one plain message, you can just return it\nwithout enclosing it in a list and tuple.\n\nFor example, to render a widget showing the latest Geckoboard twitter\nupdates, using Mike Verdone's `Twitter library`_::\n\n    from django_geckoboard.decorators import text_widget, TEXT_NONE\n    import twitter\n\n    @text_widget\n    def twitter_status(request):\n        twitter = twitter.Api()\n        updates = twitter.GetUserTimeline('geckoboard')\n        return [(u.text, TEXT_NONE) for u in updates]\n\n.. _`Twitter library`: http://pypi.python.org/pypi/twitter\n\n\n``pie_chart``\n-------------\n\nRender a *Pie chart* widget.\n\nThe decorated view must return an iterable over tuples *(value, label,\n[color])*.  The optional *color* parameter is a string ``'RRGGBB[TT]'``\nrepresenting red, green, blue and optionally transparency.\n\nFor example, to render a widget showing the number of normal, staff and\nsuperusers::\n\n    from django_geckoboard.decorators import pie_chart\n    from django.contrib.auth.models import User\n\n    @pie_chart\n    def user_types(request):\n        users = User.objects.filter(is_active=True)\n        total_count = users.count()\n        superuser_count = users.filter(is_superuser=True).count()\n        staff_count = users.filter(is_staff=True,\n                                   is_superuser=False).count()\n        normal_count = total_count = superuser_count - staff_count\n        return [\n            (normal_count,    \"Normal users\", \"ff8800\"),\n            (staff_count,     \"Staff\",        \"00ff88\"),\n            (superuser_count, \"Superusers\",   \"8800ff\"),\n        ]\n\n\n``line_chart``\n--------------\n\nRender a *Line chart* widget.\n\nThe decorated view must return a tuple *(values, x_axis, y_axis,\n[color])*.  The *values* parameter is a list of data points.  The\n*x-axis* parameter is a label string or a list of strings, that will be\nplaced on the X-axis.  The *y-axis* parameter works similarly for the\nY-axis.  If there are more than one axis label, they are placed evenly\nalong the axis.  The optional *color* parameter is a string\n``'RRGGBB[TT]'`` representing red, green, blue and optionally\ntransparency.\n\nFor example, to render a widget showing the number of comments per day\nover the last four weeks (including today)::\n\n    from django_geckoboard.decorators import line_chart\n    from datetime import date, timedelta\n    from django.contrib.comments.models import Comment\n\n    @line_chart\n    def comment_trend(request):\n        since = date.today() - timedelta(days=29)\n        days = dict((since + timedelta(days=d), 0)\n                for d in range(0, 29))\n        comments = Comment.objects.filter(submit_date__gte=since)\n        for comment in comments:\n            days[comment.submit_date.date()] += 1\n        return (\n            days.values(),\n            [days[i] for i in range(0, 29, 7)],\n            \"Comments\",\n        )\n\n\n``geck_o_meter``\n----------------\n\nRender a *Geck-O-Meter* widget.\n\nThe decorated view must return a tuple *(value, min, max)*.  The *value*\nparameter represents the current value.  The *min* and *max* parameters\nrepresent the minimum and maximum value respectively.  They are either a\nvalue, or a tuple *(value, text)*.  If used, the *text* parameter will\nbe displayed next to the minimum or maximum value.\n\nFor example, to render a widget showing the number of users that have\nlogged in in the last 24 hours::\n\n    from django_geckoboard.decorators import geck_o_meter\n    from datetime import datetime, timedelta\n    from django.contrib.auth.models import User\n\n    @geck_o_meter\n    def login_count(request):\n        since = datetime.now() - timedelta(hours=24)\n        users = User.objects.filter(is_active=True)\n        total_count = users.count()\n        logged_in_count = users.filter(last_login__gt=since).count()\n        return (logged_in_count, 0, total_count)\n\n\n``funnel``\n----------\n\nRender a *Funnel* widget.\n\nThe decorated view must return a dictionary with at least an *items*\nkey.  To render a funnel showing the breakdown of authenticated users\nvs. anonymous users::\n\n    from django_geckoboard.decorators import funnel\n    from django.contrib.auth.models import User\n\n    @funnel\n    def user_breakdown(request):\n        all_users = User.objects\n        active_users =all_users.filter(is_active=True)\n        staff_users = all_users.filter(is_staff=True)\n        super_users = all_users.filter(is_superuser=True)\n        return {\n            \"items\": [\n                (all_users.count(), 'All users'),\n                (active_users.count(), 'Active users'),\n                (staff_users.count(), 'Staff users'),\n                (super_users.count(), 'Super users'),\n            ],\n            \"type\": \"standard\",   # default, 'reverse' changes direction\n                                  # of the colors.\n            \"percentage\": \"show\", # default, 'hide' hides the percentage\n                                  # values.\n            \"sort\": False,        # default, `True` orders the values\n                                  # descending.\n        }\n\n``bullet``\n----------\n\nRender a *Bullet* widget.\n\nThe decorated view must return a dictionary with at least keys *label*,\n*axis_points*, *current* and *comparative*. To render Geckoboard's own example\nat\nhttp://support.geckoboard.com/entries/274940-custom-chart-widget-type-definitions::\n\n    from django_geckoboard.decorators import bullet\n\n    @bullet\n    def geckoboard_bullet_example(request):\n        return = {\n            'label': 'Revenue 2011 YTD',\n            'axis_points': [0, 200, 400, 600, 800, 1000],\n            'current': 500,\n            'comparative': 600,\n            'sublabel': 'U.S. $ in thousands',\n            'red': [0, 400],\n            'amber': [401, 700],\n            'green': [701, 1000],\n            'projected': [100, 900],\n            'auto_scale': False,\n        }\n\n.. _`Geckoboard API`: http://geckoboard.zendesk.com/forums/207979-geckoboard-api\n\n\nChangelog\n=========\n\nVersion 1.2.5\n-------------\n* Add support for the \"prefix\" parameter (Arthur Furlan)\n\nVersion 1.2.4\n-------------\n* Add \"Content-Type\" header (Arthur Furlan)\n\nVersion 1.2.3\n-------------\n* Fix KeyError bug in auto-scaling code (Ben Belchak)\n\nVersion 1.2.2\n-------------\n* Fix comparative bar on bullet graphs (Rod Begbie)\n\nVersion 1.2.1\n-------------\n* Fix unicode handling (Éric St-Jean)\n\nVersion 1.2.0\n-------------\n* Added *bullet* widget decorator contributed by Hedley Roos.\n\nVersion 1.1.0\n-------------\n* Added *funnel* widget decorator contributed by Simon de Haan.\n\nVersion 1.0.0\n-------------\n* No changes from 0.2.1.\n\nVersion 0.2.1\n-------------\n* Fixed API key detection.\n\nVersion 0.2.0\n-------------\n* Renamed widget decorators.\n\nVersion 0.1.0\n-------------\n* First release, split off from django-analytical_.\n\n.. _django-analytical: http://pypi.python.org/pypi/django-analytical",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://github.com/jcassee/django-geckoboard/archives/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jcassee/django-geckoboard",
    "keywords": "django,geckoboard",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-geckoboard",
    "package_url": "https://pypi.org/project/django-geckoboard/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-geckoboard/",
    "project_urls": {
      "Download": "http://github.com/jcassee/django-geckoboard/archives/master",
      "Homepage": "http://github.com/jcassee/django-geckoboard"
    },
    "release_url": "https://pypi.org/project/django-geckoboard/1.2.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Geckoboard custom widgets for Django projects",
    "version": "1.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1915170,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4dc17d78d674a0a6c5c2280fb6964f92c682dad5eced8e1014d71267a24670a3",
        "md5": "820f9f9d5f4bb96f55ed31eb21905bd4",
        "sha256": "c5bfeeb77886356d2b04a3cbe702ef4e063d389ea2c40774a757484bba3d4a27"
      },
      "downloads": -1,
      "filename": "django-geckoboard-1.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "820f9f9d5f4bb96f55ed31eb21905bd4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17502,
      "upload_time": "2013-08-07T08:08:57",
      "upload_time_iso_8601": "2013-08-07T08:08:57.452102Z",
      "url": "https://files.pythonhosted.org/packages/4d/c1/7d78d674a0a6c5c2280fb6964f92c682dad5eced8e1014d71267a24670a3/django-geckoboard-1.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}