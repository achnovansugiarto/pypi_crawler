{
  "info": {
    "author": "",
    "author_email": "Jay Chan <jay.chan@cern.ch>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# module-qc-analysis-tools\n\nA general python tool for running ITkPixV1.1 module QC test analysis. An\noverview of the steps in the module QC procedure is documented in the\n[Electrical specification and QC procedures for ITkPixV1.1 modules](https://gitlab.cern.ch/atlas-itk/pixel/module/itkpix-electrical-qc/)\ndocument and in\n[this spreadsheet](https://docs.google.com/spreadsheets/d/1qGzrCl4iD9362RwKlstZASbhphV_qTXPeBC-VSttfgE/edit#gid=989740987).\nThe analysis scripts in this repository require input files with measurement\ndata. The measurement data should be collected using the\n[module-qc-measurement-tools](https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-tools)\npackage.\n\n## Requirements\n\nThis tool requires users to have >python3.6 with the following packages\ninstalled:\n\n- `numpy`\n- `scipy`\n- `tabulate`\n- `matplotlib`\n- `jsonschema`\n\n## Installation\n\nFirst clone the project:\n\n```\ngit clone https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-analysis-tools.git\n```\n\nUpon a successful checkout, `cd` to the new `module-qc-analysis-tools` directory\nand run the following to install the necessary software:\n\n```verbatim\n$ python3 -m venv env\n$ source env/bin/activate\n$ python -m pip install --upgrade pip\n$ python -m pip install -e .\n```\n\nNote that users should use the latest python version (check python version via\n`python3 -V`). Python3.7 is the minimum requirement for developers. See\n[For Developer](#for-developer) section.\n\n## Scripts\n\n### `Analyze ADC Calibration`\n\nThis analysis script performs the ADC calibration. It produces several\ndiagnostic plots and an output file with the ADC calibration slope and offset.\n\n<details> <summary> analysis-ADC-CALIBRATION --help </summary>\n\n```\nanalysis-ADC-CALIBRATION --help\nusage: analysis-ADC-CALIBRATION [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule]\n                                [-f {root,numpy}] [-v VERBOSITY]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT_MEAS, --input-meas INPUT_MEAS\n                        path to the input measurement file or directory containing input measurement files.\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        output directory\n  -q QC_CRITERIA, --qc-criteria QC_CRITERIA\n                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)\n  -l LAYER, --layer LAYER\n                        Layer of module, used for applying correct QC criteria settings. Options: L0, L1, L2\n                        (default)\n  --permodule           Store results in one file per module (default: one file per chip)\n  -f {root,numpy}, --fit-method {root,numpy}\n                        fitting method\n  -v VERBOSITY, --verbosity VERBOSITY\n                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]\n```\n\n</details>\n\n### `Analyze Analog Readback`\n\nThis analysis script performs the Analog Readback. It produces an output file\nwith the calculated internal biases, temperature from the internal and external\ntemperature sensor, and VDDA/VDDD vs Trim, including diagnostic plots with slope\nand offset.\n\n<details> <summary> analysis-ANALOG-READBACK --help </summary>\n\n```\n$ analysis-ANALOG-READBACK --help\nusage: analysis-ANALOG-READBACK [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule]\n                                [-f {root,numpy}] [-v VERBOSITY] [--verbose]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT_MEAS, --input-meas INPUT_MEAS\n                        path to the input measurement file or directory containing input measurement files.\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        output directory\n  -q QC_CRITERIA, --qc-criteria QC_CRITERIA\n                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)\n  -l LAYER, --layer LAYER\n                        Layer of module, used for applying correct QC criteria settings. Options: L0, L1, L2\n                        (default)\n  --permodule           Store results in one file per module (default: one file per chip)\n  -f {root,numpy}, --fit-method {root,numpy}\n                        fitting method\n  -v VERBOSITY, --verbosity VERBOSITY\n                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]\n  --verbose             verbose mode\n\n```\n\n</details>\n\n### `Analyze SLDO`\n\nThis script analyses the SLDO curve. It produces several diagnostic plots and an\noutput file with several parameters extracted from the SLDO curves.\n\n<details> <summary> analysis-SLDO --help </summary>\n\n```\n$ analysis-SLDO --help\nusage: analysis-SLDO [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule] [-n NCHIPS]\n                     [-f {root,numpy}] [-v VERBOSITY] [--lp-enable]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT_MEAS, --input-meas INPUT_MEAS\n                        path to the input measurement file or directory containing input measurement files.\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        output directory\n  -q QC_CRITERIA, --qc-criteria QC_CRITERIA\n                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)\n  -l LAYER, --layer LAYER\n                        Layer of module, used for applying correct QC criteria settings. Options: L0, L1, L2\n                        (default)\n  --permodule           Store results in one file per module (default: one file per chip)\n  -n NCHIPS, --nChips NCHIPS\n                        Number of chips powered in parallel (e.g. 4 for a quad module, 3 for a triplet, 1 for an\n                        SCC.)\n  -f {root,numpy}, --fit-method {root,numpy}\n                        fitting method\n  -v VERBOSITY, --verbosity VERBOSITY\n                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]\n  --lp-enable           low power mode\n\n```\n\n</details>\n\n### `Analyze VCal Calibration`\n\nThis analysis script performs the VCal calibration. It produces several\ndiagnostic plots and an output file with the VCal calibration slope and offset.\n\n<details> <summary> analysis-VCAL-CALIBRATION --help </summary>\n\n```\n$ analysis-VCAL-CALIBRATION --help\nusage: analysis-VCAL-CALIBRATION [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule]\n                                 [-f {root,numpy}] [-v VERBOSITY]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT_MEAS, --input-meas INPUT_MEAS\n                        path to the input measurement file or directory containing input measurement files.\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        output directory\n  -q QC_CRITERIA, --qc-criteria QC_CRITERIA\n                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)\n  -l LAYER, --layer LAYER\n                        Layer of module, used for applying correct QC criteria settings. Options: L0, L1, L2\n                        (default)\n  --permodule           Store results in one file per module (default: one file per chip)\n  -f {root,numpy}, --fit-method {root,numpy}\n                        fitting method\n  -v VERBOSITY, --verbosity VERBOSITY\n                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]\n```\n\n</details>\n\n### `Analyze Injection capacitance`\n\nThis analysis script performs the injection capacitance. It produces several\ndiagnostic plots and an output file with the measured pixel injection\ncapacitance.\n\n<details> <summary> analysis-INJECTION-CAPACITANCE --help </summary>\n\n```\n$ analysis-INJECTION-CAPACITANCE\nusage: analysis-INJECTION-CAPACITANCE [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule]\n                                      [-v VERBOSITY]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT_MEAS, --input-meas INPUT_MEAS\n                        path to the input measurement file or directory containing input measurement files.\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        output directory\n  -q QC_CRITERIA, --qc-criteria QC_CRITERIA\n                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)\n  -l LAYER, --layer LAYER\n                        Layer of module, used for applying correct QC criteria settings. Options: L0, L1, L2\n                        (default)\n  --permodule           Store results in one file per module (default: one file per chip)\n  -v VERBOSITY, --verbosity VERBOSITY\n                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]\n```\n\n</details>\n\n## Notes\n\n### `Example commands for a chip in a quad module (L2):`\n\n```\nanalysis-ADC-CALIBRATION -i ../module-qc-tools/emulator/outputs/SLDO_reference/1674670016/ --layer L2\nanalysis-SLDO -i ../module-qc-tools/emulator/outputs/SLDO_reference/1674670016/ --layer L2\nanalysis-ANALOG-READBACK -i ../module-qc-tools/emulator/outputs/SLDO_reference/1674670016/ --layer L2\nanalysis-VCAL-CALIBRATION -i ../module-qc-tools/emulator/outputs/SLDO_reference/1674670016/ --layer L2\nanalysis-INJECTION-CAPACITANCE -i ../module-qc-tools/emulator/outputs/SLDO_reference/1674670016/ --layer L2\n```\n\n### `Update Trim, ADC Calibration Parameters, VCal calibration parameters`\n\nAfter each analysis, update the setting in the chip config by running the\nfollowing scripts:\n\n```\nanalysis-overwrite-ADCcalPar -i <path to ADC CALIBRATION analysis output directory> -c <path to YARR config directory> -t <config type>\nanalysis-overwrite-trim -i <path to ANALOG READBACK analysis output directory> -c <path to YARR config directory> -t <config type>\nanalysis-overwrite-VcalPar -i <path to VCAL CALIBRATION analysis output directory> -c <path to YARR config directory> -t <config type>\n```\n\n### `JsonChecker and DataExtractor`\n\nTwo classes are designed for general purposes of the module qc analysis tool.\n\n1. `JsonChecker` a. Check whether the test type is implemented b. For a specific\n   task, check if required keywords exist c. Check if lengths of measurements\n   are identical d. Check if there are negative numbers of measurements\n\n2. `DataExtractor` This class finds measurements by Vmux value and convert them\n   to quantites.\n\n### `Params overwrite`\n\nThe script `overwrite_config.py` writes fitted parameters to a chip config file.\nRecursion is used to search for the `Parameter` part of the original config file\nand values corresponding to the key in the analysis output json file will\nreplace the original parameters.\n\nUsage:\n\n<details> <summary> analysis-overwrite-config --help </summary>\n```\n\n$ analysis-overwrite-config -h usage: analysis-overwrite-config [-h] -i\nINPUT_FILE -c CONFIG_FILE\n\noptional arguments: -h, --help show this help message and exit -i INPUT_FILE,\n--input-file INPUT_FILE analysis output file -c CONFIG_FILE, --config-file\nCONFIG_FILE the config file to be modified\n\n```\n</details>\n\n<details> <summary> Example </summary>\n```\n\n$ analysis-overwrite-config -i\noverwrite/0x16a4c_vcal_calib_InjVcalHigh_LargeRange_1662583926_anad.json -c\noverwrite/metadata.json\n\n```\n</details>\n\n## For Developer\n\n### python version\n\nA python version higher than 3.7 is needed for this repository. Check the local\npython version with `python -V`.\n\nIf the local python version is lower, set up a virtual python environment\nfollowing the instructions\n[here](https://itk.docs.cern.ch/general/Virtual_Environments/).\n\n### pre-commit\n\nInstall pre-commit to avoid CI failure. Once pre-commit is installed, a git hook\nscript will be run to identify simple issues before submission to code review.\n\nInstruction for installing pre-commit in a python environment:\n\n1. Activate python environment, e.g. `source venv/bin/activate`.\n2. Run `python3 -m pip install pre-commit`.\n3. Run `pre-commit install` to install the hooks in `.pre-commit-config.yaml`.\n\nAfter installing pre-commit, `.pre-commit-config.yaml` will be run every time\n`git commit` is done. Redo `git add` and `git commit`, if the pre-commit script\nchanges any files.\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Copyright (c) 2018 The Python Packaging Authority  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "Giordon Stark <gstark@cern.ch>",
    "name": "module-qc-analysis-tools",
    "package_url": "https://pypi.org/project/module-qc-analysis-tools/",
    "platform": null,
    "project_url": "https://pypi.org/project/module-qc-analysis-tools/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-analysis-tools/-/issues",
      "Homepage": "https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-analysis-tools",
      "Source": "https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-analysis-tools"
    },
    "release_url": "https://pypi.org/project/module-qc-analysis-tools/1.0/",
    "requires_dist": [
      "jsonschema",
      "matplotlib",
      "module-qc-data-tools>=0.3.0",
      "numpy",
      "scipy",
      "tabulate"
    ],
    "requires_python": ">=3.7",
    "summary": "Module qc analysis tools",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17409538,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7e1c2a0577d21af99649ea8bf44bec24571d09c8384fa534b6e02e44153d4c7",
        "md5": "009a7850a306869eb163209e146f2049",
        "sha256": "0136b020d2de2cfaedd6ecf8f0ecffa89756ef417643ca1767ba323b1aed2a1c"
      },
      "downloads": -1,
      "filename": "module_qc_analysis_tools-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "009a7850a306869eb163209e146f2049",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 39920,
      "upload_time": "2023-01-26T14:28:24",
      "upload_time_iso_8601": "2023-01-26T14:28:24.301211Z",
      "url": "https://files.pythonhosted.org/packages/f7/e1/c2a0577d21af99649ea8bf44bec24571d09c8384fa534b6e02e44153d4c7/module_qc_analysis_tools-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f7e66cf3e8160ec26666c703e1b1326f02aab2208be8631325266d1b931c786",
        "md5": "762fa140fa59c4c34cca66bab35f8fa4",
        "sha256": "763f2373e9b02b819001c8a944adb8f7661494c9bd47f92b7a1df63fd2bda004"
      },
      "downloads": -1,
      "filename": "module_qc_analysis_tools-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "762fa140fa59c4c34cca66bab35f8fa4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 27511,
      "upload_time": "2023-01-26T14:28:26",
      "upload_time_iso_8601": "2023-01-26T14:28:26.298206Z",
      "url": "https://files.pythonhosted.org/packages/8f/7e/66cf3e8160ec26666c703e1b1326f02aab2208be8631325266d1b931c786/module_qc_analysis_tools-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}