{
  "info": {
    "author": null,
    "author_email": "Louis-Philippe Véronneau <pollo@debian.org>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Topic :: Multimedia :: Sound/Audio"
    ],
    "description": "``metalfinder`` is a command-line tool that scans a music directory to find\nconcerts near a specified location.\n\nInstallation\n============\n\nUsing pip\n---------\n\nYou can install ``metalfinder`` using pip::\n\n    $ pip install metalfinder\n\nFrom source\n-----------\n\nYou can install ``metalfinder`` from source using flit::\n\n    $ apt install flit\n    $ git clone https://gitlab.com/baldurmen/metalfinder\n    $ cd metafinder\n    $ flit install\n\nAPI Providers\n=============\n\nBandsintown\n-----------\n\nTo use the `Bandsintown`_ API provider, you will need a `Bandsintown App ID`_.\nThis is your API key and it should be kept private.\n\n.. _Bandsintown: https://bandsintown.com\n.. _Bandsintown App ID: https://www.artists.bandsintown.com/support/api-installation\n\nOther providers\n---------------\n\nDo you know a good website that tracks concerts and has a somewhat public API?\nIf keys are not too hard to get, I'd be more than happy to implement it!\n\nCLI options\n===========\n\nHere is an example of how to use ``metalfinder``::\n\n     $ metalfinder -d \"/home/foo/Music\" -o \"/home/foo/metalfinder.atom\" -l \"Montreal\"\n\nThe complete CLI parameters can be found below and in the man page::\n\n    Usage:\n        metalfinder -d <directory> -o <output> -l <location> -b <app_id> [-c <cache>] [-m <date>] [--verbose]\n        metalfinder (-h | --help)\n        metalfinder --version\n\n    Options:\n        -h  --help                   Show the help screen\n        --version                    Output version information\n        --verbose                    Run the program in verbose mode\n        -d  --directory <directory>  Music directory to scan to create artist list\n        -o  --output    <output>     Path to the desired output file. You can either\n                                     chose a text file (foo.txt), a JSON file (foo.json)\n                                     or an ATOM file (foo.atom)\n        -l  --location  <location>   Name of the city to use when looking for concerts\n        -b  --bit-appid <app_id>     Bandsintown App ID (API key)\n        -c  --cache     <cache>      Path to the cache directory. Defaults to\n                                     XDG_CACHE/metalfinder\n        -m  --max-date  <date>       Max date in YYYY-MM-DD format (ISO 8601)\n\nDevelopment\n=============\n\nRunning the test suite\n----------------------\n\nBuilding the man page\n---------------------\n\nThe man page for ``metalfinder`` can be generated using the ``rst2man`` command\nline tool provided by the ``docutils`` project::\n\n    $ rst2man manpage.rst metalfinder.1\n\nLicense\n=======\n\nThis project was written by `Louis-Philippe Véronneau`_ and is licensed under\nthe GNU GPLv3 or any later version.\n\nThe code to query Bandsintown comes from the `python-bandsintown`_ project, was\nwritten by Chris Forrette and is licensed under the MIT license.\n\n.. _Louis-Philippe Véronneau: https://veronneau.org\n.. _python-bandsintown: https://github.com/chrisforrette/python-bandsintown\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "metalfinder",
    "package_url": "https://pypi.org/project/metalfinder/",
    "platform": null,
    "project_url": "https://pypi.org/project/metalfinder/",
    "project_urls": {
      "Home": "https://gitlab.com/baldurmen/metalfinder"
    },
    "release_url": "https://pypi.org/project/metalfinder/1.1.1/",
    "requires_dist": [
      "flit_core >=3.7.1",
      "requests",
      "pyxdg",
      "mutagen",
      "feedgenerator",
      "docutils ; extra == \"doc\""
    ],
    "requires_python": null,
    "summary": "scan a music directory to find concerts near a specified location",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15959986,
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "d23162f3a9595dc5e07794b0623cc70c95e1cc9c10beed67779c8a2771f5831c",
        "md5": "1d08162631d17d9df2f043a4f7a3747a",
        "sha256": "47ccb5b4fd16ddb017896e0f3cd86bb4117f7dc24eebfeebbb6eb6e66d9ab8d8"
      },
      "downloads": -1,
      "filename": "metalfinder-1.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1d08162631d17d9df2f043a4f7a3747a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 22444,
      "upload_time": "2022-05-20T03:56:53",
      "upload_time_iso_8601": "2022-05-20T03:56:53.691774Z",
      "url": "https://files.pythonhosted.org/packages/d2/31/62f3a9595dc5e07794b0623cc70c95e1cc9c10beed67779c8a2771f5831c/metalfinder-1.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "9ed4405863f800b659faa3d6c2b9fefe31fc364819e0ddb1a816250a2fd6279a",
        "md5": "b48ac087a2d04a8a77df0e958c8a4a29",
        "sha256": "589c9bf47d334ff7093a31e3a490c2a8c4e77e90534d72f9a023df4b1b75d7bd"
      },
      "downloads": -1,
      "filename": "metalfinder-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b48ac087a2d04a8a77df0e958c8a4a29",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21917,
      "upload_time": "2022-05-20T03:56:56",
      "upload_time_iso_8601": "2022-05-20T03:56:56.484611Z",
      "url": "https://files.pythonhosted.org/packages/9e/d4/405863f800b659faa3d6c2b9fefe31fc364819e0ddb1a816250a2fd6279a/metalfinder-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}