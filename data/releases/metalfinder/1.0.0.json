{
  "info": {
    "author": null,
    "author_email": "Louis-Philippe Véronneau <pollo@debian.org>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Topic :: Multimedia :: Sound/Audio"
    ],
    "description": "``metalfinder`` is a command-line tool that scans a music directory to find\nconcerts near a specified location.\n\nInstallation\n============\n\nUsing pip\n---------\n\nYou can install ``metalfinder`` using pip::\n\n    $ pip install metalfinder\n\nAPI Providers\n=============\n\nBandsintown\n-----------\n\nTo use the `Bandsintown`_ API provider, you will need a `Bandsintown App ID`_.\nThis is your API key and it should be kept private.\n\n.. _Bandsintown: https://bandsintown.com\n.. _Bandsintown App ID: https://www.artists.bandsintown.com/support/api-installation\n\nSongKick\n--------\n\nThe SongKick API provider is not currently implemented. See `issue #3`_ for more\ndetails.\n\n.. _issue #3: https://gitlab.com/baldurmen/metalfinder/-/issues/3\n\nCLI options\n===========\n\nHere is an example of how to use ``metalfinder``::\n\n     $ metalfinder -d \"/home/foo/Music\" -o \"/home/foo/metalfinder.atom\" -l \"Montreal\"\n\nThe complete CLI parameters can be found below and in the man page::\n\n    Usage:\n        metalfinder -d <directory> -o <output> -l <location> -b <app_id> [-c <cache>] [-m <date>] [--verbose]\n        metalfinder (-h | --help)\n        metalfinder --version\n\n    Options:\n        -h  --help                   Show the help screen\n        --version                    Output version information\n        --verbose                    Run the program in verbose mode\n        -d  --directory <directory>  Music directory to scan to create artist list\n        -o  --output    <output>     Path to the desired output file. You can either\n                                     chose a text file (foo.txt), a JSON file (foo.json)\n                                     or an ATOM file (foo.atom)\n        -l  --location  <location>   Name of the city to use when looking for concerts\n        -b  --bit-appid <app_id>     Bandsintown App ID (API key)\n        -c  --cache     <cache>      Path to the cache directory. Defaults to\n                                     XDG_CACHE/metalfinder\n        -m  --max-date  <date>       Max date in YYYY-MM-DD format (ISO 8601)\n\nDevelopment\n=============\n\nRunning the test suite\n----------------------\n\nBuilding the man page\n---------------------\n\nThe man page for ``metalfinder`` can be generated using the ``rst2man`` command\nline tool provided by the ``docutils`` project::\n\n    $ rst2man manpage.rst metalfinder.1\n\nLicense\n=======\n\nThis project was written by `Louis-Philippe Véronneau`_ and is licensed under\nthe GNU GPLv3 or any later version.\n\nThe code to query Bandsintown comes from the `python-bandsintown`_ project, was\nwritten by Chris Forrette and is licensed under the MIT license.\n\n.. _Louis-Philippe Véronneau: https://veronneau.org\n.. _python-bandsintown: https://github.com/chrisforrette/python-bandsintown\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "metalfinder",
    "package_url": "https://pypi.org/project/metalfinder/",
    "platform": null,
    "project_url": "https://pypi.org/project/metalfinder/",
    "project_urls": {
      "Home": "https://gitlab.com/baldurmen/metalfinder"
    },
    "release_url": "https://pypi.org/project/metalfinder/1.0.0/",
    "requires_dist": [
      "flit_core >=3.7.1",
      "musicbrainzngs",
      "requests",
      "pyxdg",
      "mutagen",
      "feedgenerator",
      "docutils ; extra == \"doc\""
    ],
    "requires_python": null,
    "summary": "scan a music directory to find concerts near a specified location",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15959986,
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "1f7157acca4a30220c251829b4c3389f7490fedd6d9da60339d46deadb9d2d88",
        "md5": "bade57aa33886b32fdc662ae25b63425",
        "sha256": "a304de45157a7a432c58583d5c80e94f90d0be492c39c827b70ae1ccc2401d23"
      },
      "downloads": -1,
      "filename": "metalfinder-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bade57aa33886b32fdc662ae25b63425",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 22173,
      "upload_time": "2022-05-07T19:27:07",
      "upload_time_iso_8601": "2022-05-07T19:27:07.760647Z",
      "url": "https://files.pythonhosted.org/packages/1f/71/57acca4a30220c251829b4c3389f7490fedd6d9da60339d46deadb9d2d88/metalfinder-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "f01254a265439b2bafbe111a4d92de2a8078aee8a592e77b3bf4aa9918b90472",
        "md5": "04962ed34dd0a20b41c29bd08658f38d",
        "sha256": "029aa1fd1c15cce35b3ad6bda47c09a2ba46152e5e2d3483ee0aabd5b788bf17"
      },
      "downloads": -1,
      "filename": "metalfinder-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "04962ed34dd0a20b41c29bd08658f38d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21221,
      "upload_time": "2022-05-07T19:27:23",
      "upload_time_iso_8601": "2022-05-07T19:27:23.458855Z",
      "url": "https://files.pythonhosted.org/packages/f0/12/54a265439b2bafbe111a4d92de2a8078aee8a592e77b3bf4aa9918b90472/metalfinder-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}