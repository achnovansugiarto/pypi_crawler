{
  "info": {
    "author": null,
    "author_email": "Louis-Philippe Véronneau <pollo@debian.org>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Topic :: Multimedia :: Sound/Audio"
    ],
    "description": "``metalfinder`` is a command-line tool that scans a music directory to find\nconcerts near a specified location.\n\nInstallation\n============\n\nUsing pip\n---------\n\nYou can install ``metalfinder`` using pip::\n\n    $ pip install metalfinder\n\nFrom source\n-----------\n\nYou can install ``metalfinder`` from source using flit::\n\n    $ apt install flit\n    $ git clone https://gitlab.com/baldurmen/metalfinder\n    $ cd metafinder\n    $ flit install\n\nRun without installing\n----------------------\n\nIf you already have all the required dependencies, you can run ``metalfinder``\ndirectly from the source without installing it::\n\n    $ python3 -m metalfinder\n\nAPI Providers\n=============\n\nBandsintown\n-----------\n\nTo use the `Bandsintown`_ API provider, you will need a `Bandsintown App ID`_.\nThis is your API key and it should be kept private.\n\n.. _Bandsintown: https://bandsintown.com\n.. _Bandsintown App ID: https://www.artists.bandsintown.com/support/api-installation\n\nOther providers\n---------------\n\nDo you know a good website that tracks concerts and has a somewhat public API?\nIf keys are not too hard to get, I'd be more than happy to implement it!\n\nCLI options\n===========\n\nHere is an example of how to use ``metalfinder``::\n\n     $ export METALFINDER_BIT_APPID=mysecretapikey\n     $ metalfinder -d \"/home/foo/Music\" -o \"/home/foo/metalfinder.atom\" -l \"Montreal\"\n\nThe complete CLI parameters can be found below and in the man page::\n\n    Usage:\n        metalfinder [-d <directory>] -o <output> -l <location> -b <app_id> [-c <cache>] [-m <date>] [--verbose]\n        metalfinder (-h | --help)\n        metalfinder --version\n\n    Options:\n        -h  --help                   Show the help screen\n        --version                    Output version information\n        --verbose                    Run the program in verbose mode\n        -d  --directory <directory>  Music directory to scan to create artist list\n        -o  --output    <output>     Path to the desired output file. You can either\n                                     chose a text file (foo.txt), a JSON file (foo.json)\n                                     or an ATOM file (foo.atom)\n        -l  --location  <location>   Name of the city to use when looking for concerts\n        -b  --bit-appid <app_id>     Bandsintown App ID (API key). Optional when the\n                                     METALFINDER_BIT_APPID environment variable is set.\n        -c  --cache-dir <cache_dir>  Path to the cache directory. Defaults to\n                                     XDG_CACHE/metalfinder/\n        -m  --max-date  <date>       Max date in YYYY-MM-DD format (ISO 8601)\n\nEnvironment Variables\n=====================\n\n``metalfinder`` uses the following environment variables:\n\n*METALFINDER_BIT_APPID*: Bandsintown API key. Useful to keep your API key from\nleaking when running metalfinder on the command line.\n\nRunning without a local directory\n=================================\n\nEven though ``metalfinder`` defaults to scanning a local directory to create a\nlist of artists, it is possible to use an existing artist list created by some\nother program.\n\nUsing a subsonic server\n-----------------------\n\nThis feature has not yet been implemented. See `issue #15`_.\n\n.. _issue #15: https://gitlab.com/baldurmen/metalfinder/-/issues/15\n\nUsing an MDP server\n-------------------\n\nSince the ``--directory`` option is optional, if it is missing, only the cache\ndirectory will be inspected. In this directory, ``metalfinder`` looks for a file\nnamed ``artist_cache`` which consists of a list of artist names separated by\nnew lines.\n\nIf you have an `MPD`_ server, you can generate this file with the help of the\n`mpc`_ client::\n\n    $ mpc list Artist > ~/.cache/metalfinder/artist_cache\n\n.. _MPD: https://musicpd.org/\n.. _mpc: https://www.musicpd.org/clients/mpc/\n\nDevelopment\n=============\n\nRunning the test suite\n----------------------\n\nYou can run the test suite locally using ``pip`` and ``pytest``::\n\n    $ python3 -m venv metalfinder\n    $ cd metalfinder\n    $ source bin/activate\n    $ git clone https://gitlab.com/baldurmen/metalfinder\n    $ cd metafinder\n    $ python3 -m pip install .[test]\n    $ python3 -m pytest\n\nBuilding the man page\n---------------------\n\nThe man page for ``metalfinder`` can be generated using the ``rst2man`` command\nline tool provided by the ``docutils`` project::\n\n    $ rst2man manpage.rst metalfinder.1\n\nLicense\n=======\n\nThis project was written by `Louis-Philippe Véronneau`_ and is licensed under\nthe GNU GPLv3 or any later version.\n\nThe code to query Bandsintown comes from the `python-bandsintown`_ project, was\nwritten by Chris Forrette and is licensed under the MIT license.\n\n.. _Louis-Philippe Véronneau: https://veronneau.org\n.. _python-bandsintown: https://github.com/chrisforrette/python-bandsintown\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "metalfinder",
    "package_url": "https://pypi.org/project/metalfinder/",
    "platform": null,
    "project_url": "https://pypi.org/project/metalfinder/",
    "project_urls": {
      "Home": "https://gitlab.com/baldurmen/metalfinder"
    },
    "release_url": "https://pypi.org/project/metalfinder/2.1.0/",
    "requires_dist": [
      "flit_core >=3.7.1",
      "requests >=2.27",
      "pyxdg",
      "mutagen",
      "feedgenerator",
      "packaging",
      "docutils ; extra == \"doc\"",
      "pytest ; extra == \"test\""
    ],
    "requires_python": null,
    "summary": "scan a music directory to find concerts near a specified location",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15959986,
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "b96ee19e5c8629ceda65bc051318a045d996399cc20b8095d6e30c3de1c44f6f",
        "md5": "46eb9be40800781516dd891224077f6c",
        "sha256": "554829efa20dd4d2e5627244b7034ca05066c46e07f40ec9dd002c75561a0d28"
      },
      "downloads": -1,
      "filename": "metalfinder-2.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "46eb9be40800781516dd891224077f6c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 23576,
      "upload_time": "2022-06-08T03:40:13",
      "upload_time_iso_8601": "2022-06-08T03:40:13.158443Z",
      "url": "https://files.pythonhosted.org/packages/b9/6e/e19e5c8629ceda65bc051318a045d996399cc20b8095d6e30c3de1c44f6f/metalfinder-2.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "d4cea402911fc4aba2b1e7035637cca784dc625c1bee0564e176a4fadef399bb",
        "md5": "b9695f6d60840ae7a6508078c30f3957",
        "sha256": "9a324802145c902207defaeef75c34b5bf99ddfc7403bfa4693ae96a680791ec"
      },
      "downloads": -1,
      "filename": "metalfinder-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b9695f6d60840ae7a6508078c30f3957",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27801,
      "upload_time": "2022-06-08T03:40:16",
      "upload_time_iso_8601": "2022-06-08T03:40:16.813512Z",
      "url": "https://files.pythonhosted.org/packages/d4/ce/a402911fc4aba2b1e7035637cca784dc625c1bee0564e176a4fadef399bb/metalfinder-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}