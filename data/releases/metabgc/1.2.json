{
  "info": {
    "author": "MetaBGC development team.",
    "author_email": "ab50@princeton.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# MetaBGC: Metagenomic identifier of Biosynthetic Gene Clusters \n\n[![DOI](https://zenodo.org/badge/187888803.svg)](https://zenodo.org/badge/latestdoi/187888803)\n\nMetaBGC is a read-based algorithm for the detection of biosynthetic gene clusters (BGCs) directly in metagenomic sequencing data.\n\n## Getting Started\n\nThese instructions will get you setup to run MetaBGC on your local Linux or Apple environment. \n\n### Prerequisites\n\nTo run MetaBGC, you will need the following dependencies and data preprocessing:\n\n* [Python](https://www.python.org/downloads/) (version >= 3.6)\n* [MUSCLE 3.8.31](https://www.drive5.com/muscle/downloads.htm)\n* [EMBOSS Transeq](http://emboss.sourceforge.net/download/) version 6.6.0.0\n* [HMMER](http://hmmer.org/download.html) version 3.1b2\n* [CD-HIT-EST](https://github.com/weizhongli/cdhit/releases) version 4.7\n* [ncbi-blast-2.7.1+](https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/)\n* [R 3.6.1](http://lib.stat.cmu.edu/R/CRAN/)\n* [EMBOSS-6.5.7](http://emboss.sourceforge.net/)\n\n### Installation \n\nObtain the package from Git:\n```\ngit clone https://github.com/donia-lab/MetaBGC.git\ncd MetaBGC/MetaBGC-Development\n```\n\nAll the python dependencies are specified in the setup.py file, so you can just run the install from the source code directory:\n\n```\npip install .\nmetabgc --help\n```\n\n\n### Program Structure\n\nMetaBGC consists of four main modules:\n\n**Build** - This module builds, evaluates, and selects high-performance segmented profile Hidden Markov Models (spHMMs) for a new protein family that is commonly found in the BGC of interest. Pre-built high-performance spHMMs exist for cyclases/aromatases commonly found in TII-PKS BGCs (OxyN, TcmN, TcmJ, and TcmI types), LanC_like proteins (found in lantibiotic BGCs), and IucA/IucC proteins (found in siderophore BGCs). If any of these protein families is to be used, this step can be skipped.\n\n**Identify** - This module runs on translated metagenomic reads from a cohort of samples using a selected set of high-performance spHMMs and their pre-set score cutoffs, as determined in MetaBGC-Build. The results are parsed into a list of identified biosynthetic reads in fasta format.\n\n**Quantify** - This module de-replicates all biosynthetic reads discovered by MetaBGC-Identify from all metagenomic samples in the cohort into a unified set of **unique biosynthetic reads**. An abundance profile martrix is then generated for all unique biosynthetic reads by quantifying them in all samples of the metagenomic cohort.\n\n**Cluster** - This module uses Density-Based Spatial Clustering of Applications with Noise (DBSCAN) to cluster unique biosynthetic reads with similar abundance profiles across different metagenomic samples into distinct bins, based on the abundance profile martrix obtained in MetaBGC-Quantify. \n\n**Search** - **NEW** option to run Identify, Quantify and Cluster together as a single command.  \n\n### Running Build to construct the spHMMs\n\n1. To build and evaluate spHMMs for the protein family of interest, the ```metabgc build``` script has to be executed with required input files. To select high performance spHMMs, a synthetic metagenomic dataset must be generated with reads from true positive genes spiked in to test the performance of each spHMM.\n\n\t```\n    A. --prot_alignment, required=True: Alignment of homologs from the protein family of interest in FASTA format.\n\tB. --prot_family_name, required=True: Name of the protein family. \n         This is used as prefix for spHMM files.\n\tC. --cohort_name, required=True: Name of the cohort of synthetic metagenomic samples used for evaluation.\n\tD. --nucl_seq_directory, required=True:  Directory of reads for the synthetic metagenomic samples. The filenames are used as sample names.  \n    E. --seq_fmt, required=True: {fasta, fastq} Sequence file format and extension.\n    F. --pair_fmt, required=True: {single, split, interleaved} Paired-end information.\n    G. --R1_file_suffix, required=False: Suffix including extension of the file name specifying the forward reads. Not specified for single or interleaved reads. Example: .R1.fastq\n    H. --R2_file_suffix, required=False: Suffix including extension of the file name specifying the reverse reads. Not specified for single or interleaved reads. Example: .R2.fastq \n\tI. --tp_genes_nucl, required=True: Nucleotide sequence of the full-length true-positive genes in the synthetic dataset in multi-FASTA format.\n    J. --F1_Thresh, required=False: Threshold of the F1 score for selection of high performance spHMMs (Def.=0.5).\n\tK. --output_directory, required=True: Directory to save results. \n\tL. --cpu, required=False: Number of CPU threads to use (Def.=4). \n\t```\n2. The high-performance spHMMs will be saved in the ```HiPer_spHMMs``` folder in the output directory specified. The ```HiPer_spHMMs``` folder should have the following files:\n\n\t```\n    A. plot.eps : F1 score plot of all the spHMMs and the F1 cutoff threshold. \n    B. *.hmm : A set of spHMMs that perform above the F1 cutoff threshold.\n    C. prot_family_name_F1_Cutoff.txt: HMM search cutoff scores to be used for each high-performance spHMM interval. \n    ```\n  \t>**Because synthetic datasets do not fully represent real data, please be aware that some of the spHMM cutoffs may need to be further tuned after running MetaBGC on a real metagenomic dataset, as was done with the Type II polyketide cyclase cutoffs in the original MetaBGC publication.**\n\n\n### Running Identify to detect biosynthetic reads\n\n1. For identifying biosynthetic reads from the protein family of interest using the spHMMs constructed in Build step, the ```metabgc identify``` command should be executed with the required input files. To use our pre-built high-performance spHMMs for cyclases/aromatases commonly found in TII-PKS BGCs (OxyN, TcmN, TcmJ, and TcmI types), LanC_like proteins (found in lantibiotic BGCs), and IucA/IucC proteins (found in siderophore BGCs), please find the high performance input folders [here](https://github.com/donia-lab/MetaBGC/tree/master/MetaBGC-V1/MetaBGC-Build_Outputs).\n\n\t```\n\tA. --sphmm_directory, required=True: The high performance spHMM directory generated from MetaBGC-Build.\n\tB. --nucl_seq_directory, required=True: Directory of reads for the metagenomic samples to be analyzed. The filenames are used as sample names.  \n    C. --seq_fmt, required=True: {fasta,fastq} Sequence file format and extension.\n    D. --pair_fmt, required=True: {single, split, interleaved} Paired-end information.\n    E. --R1_file_suffix, required=False: Suffix including extension of the file name specifying the forward reads. Not specified for single or interleaved reads. Example: .R1.fastq\n    F. --R2_file_suffix, required=False: Suffix including extension of the file name specifying the reverse reads. Not specified for single or interleaved reads. Example: .R2.fastq \n\tG. --prot_family_name, required=True: Name of the protein family.\n\tH. --cohort_name, required=True: Name of the cohort of metagenomic samples used for analysis.\n\tI. --output_directory, required=True: Directory to save results in.\n\tJ. --cpu, required=False: Number of CPU threads to use (Def.=4). \n\t```\n\n2. Identify will produce a FASTA file, **identified-biosynthetic-reads.fasta**, comprised of all biosynthetic reads identified in the metagenomic samples of the analyzed cohort, based on the specified cutoffs.\n\n### Running Quantify to de-replicate and quantify biosynthetic reads\n\n1. To de-replicate and quantify the biosynthetic reads found by Identify, the ```metabgc quantify``` script should be executed with the following parameters: \n\n\t```\n    A. --identify_fasta, required=True: Path to the identified-biosynthetic-reads.fasta file produced by MetaBGC-Identify.\n    B. --nucl_seq_directory, required=True: Directory of reads for the metagenomic samples to be analyzed. The filenames are used as sample names.  \n    C. --seq_fmt, required=True: {fasta,fastq} Sequence file format and extension.\n    D. --pair_fmt, required=True: {single, split, interleaved} Paired-end information.\n    E. --R1_file_suffix, required=False: Suffix including extension of the file name specifying the forward reads. Not specified for single or interleaved reads. Example: .R1.fastq\n    F. --R2_file_suffix, required=False: Suffix including extension of the file name specifying the reverse reads. Not specified for single or interleaved reads. Example: .R2.fastq \n\tG. --cohort_name, required=True: Name of the cohort of metagenomic samples used for analysis.\n\tH. --output_directory, required=True: Directory to save results.\n\tI. --cpu, required=False: Number of CPU threads to use (Def.=4). \n\t```\n2. The output of the quantify script is an abundance profile file **unique-biosynthetic-reads-abundance-table.txt**. \n\n### Running Cluster to generate biosynthetic read bins\n1. To generate BGC bins of **unique biosynthetic reads**, users should use the abundance profile file, **unique-biosynthetic-reads-abundance-table.txt**, produced by Quantify as input for ```metabgc cluster```. The input parameters to the script are:\n\n\t```\n\tA. --table, required=True: Path of tab-delimited abundance table,unique-biosynthetic-reads-abundance-table.txt, produced by MetaBGC-Quantify.\n\tB. --max_dist, required=True: Maximum Pearson distance between two reads to be in the same cluster. (Def.=0.1)\n\tC. --min_samples, required=True: Minimum number of samples required for a cluster. If min_samples > 1, noise are labelled as -1. (Def.=1).\n\tD. --cpu, required=False: Number of CPU threads. (Def.=1)\n\t```\n\n2. The cluster script produces a file, unique-biosynthetic-reads-abundance-table_DBSCAN.json, comprised of all the biosynthetic reads clustered in json format.   \n\n3. For synthetic datasets, we suggest examining bins that contain at least 50 reads, and for real datasets, we suggest examining bins that contain at least 10 reads (these are suggested parameters and may have to be tuned depending on the specific dataset and protein family analyzed). The resulting bins can be utilized in downstream analyses, such as targeted or untargeted assemblies to obtain the complete BGC, bin abundance calculations to determine the distribution of a given BGC in the entire cohort, etc. Please see the original MetaBGC publication for example analyses. \n\n### Running Search to detect biosynthetic read bins\n\n1. For detecting biosynthetic reads from the protein family of interest using the spHMMs constructed in Build step, the ```metabgc search``` command should be executed with the required input files to run Identify, Quantify and Cluster in ine command. To use our pre-built high-performance spHMMs for cyclases/aromatases commonly found in TII-PKS BGCs (OxyN, TcmN, TcmJ, and TcmI types), LanC_like proteins (found in lantibiotic BGCs), and IucA/IucC proteins (found in siderophore BGCs), please find the high performance input folders [here](https://github.com/donia-lab/MetaBGC/tree/master/MetaBGC-V1/MetaBGC-Build_Outputs).\n\n\t```\n\tA. --sphmm_directory, required=True: The high performance spHMM directory generated from MetaBGC-Build.\n\tB. --nucl_seq_directory, required=True: Directory of reads for the metagenomic samples to be analyzed. The filenames are used as sample names.  \n    C. --seq_fmt, required=True: {fasta,fastq} Sequence file format and extension.\n    D. --pair_fmt, required=True: {single, split, interleaved} Paired-end information.\n    E. --R1_file_suffix, required=False: Suffix including extension of the file name specifying the forward reads. Not specified for single or interleaved reads. Example: .R1.fastq\n    F. --R2_file_suffix, required=False: Suffix including extension of the file name specifying the reverse reads. Not specified for single or interleaved reads. Example: .R2.fastq \n\tG. --prot_family_name, required=True: Name of the protein family.\n\tH. --cohort_name, required=True: Name of the cohort of metagenomic samples used for analysis.\n\tI. --output_directory, required=True: Directory to save results in.\n\tJ. --cpu, required=False: Number of CPU threads to use (Def.=4). \n\t```\n\n2. Search will produce the same output as the Cluster command described above. \n\n## License\n\nThis project is licensed under the GNU General Public License V3 - see the [LICENSE.md](https://github.com/donia-lab/MetaBGC/blob/master/MetaBGC-V1/LICENSE) file for details.\n\nPlease feel free to report bugs at our [github issue page](https://github.com/donia-lab/MetaBGC-TIIPKS/wiki).\n\n## Contact\nIf there are any questions please contact:\n\n**Mohamed Abou Donia, Ph.D.**\n <br /> Assistant Professor\n <br /> Department of Molecular Biology\n <br /> Princeton University\n <br /> Email: <donia@princeton.edu>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/donia-lab/MetaBGC",
    "keywords": "",
    "license": "GNU General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metabgc",
    "package_url": "https://pypi.org/project/metabgc/",
    "platform": "",
    "project_url": "https://pypi.org/project/metabgc/",
    "project_urls": {
      "Homepage": "https://github.com/donia-lab/MetaBGC"
    },
    "release_url": "https://pypi.org/project/metabgc/1.2/",
    "requires_dist": [
      "click",
      "numpy",
      "matplotlib",
      "scipy",
      "biopython (>=1.72)",
      "scikit-learn (>=0.20.1)",
      "pandas (>=0.19.2)",
      "rpy2 (>=2.9.1tzlocal)"
    ],
    "requires_python": ">=3.6",
    "summary": "Metagenomic identifier of Biosynthetic Gene Clusters.",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10005824,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52b8f35c5d627b25765be4ee5f6c17869261c53317cd12eb6f99127e4288aa08",
        "md5": "baee022f37b099c1a52bacc260de5fa8",
        "sha256": "025eed07be19bae1bfda84a0c023a8874eb15be6cb22733952feeb06b17c5f18"
      },
      "downloads": -1,
      "filename": "metabgc-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "baee022f37b099c1a52bacc260de5fa8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 34825,
      "upload_time": "2019-11-11T08:30:32",
      "upload_time_iso_8601": "2019-11-11T08:30:32.071005Z",
      "url": "https://files.pythonhosted.org/packages/52/b8/f35c5d627b25765be4ee5f6c17869261c53317cd12eb6f99127e4288aa08/metabgc-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}