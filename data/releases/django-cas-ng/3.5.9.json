{
  "info": {
    "author": "Ming Chen",
    "author_email": "mockey.chen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Django CAS NG\n=============\n\n.. image:: https://travis-ci.org/mingchen/django-cas-ng.svg?branch=master\n    :target: https://travis-ci.org/mingchen/django-cas-ng\n\n\n``django-cas-ng`` is a Central Authentication Service (CAS) client implementation.\nThis project inherits from `django-cas`_ (which has not been updated since\nApril 2013). The NG stands for \"next generation\". Our fork will include\nbugfixes and new features contributed by the community.\n\n\nFeatures\n--------\n\n- Supports CAS_ versions 1.0, 2.0 and 3.0.\n- `Support Single Sign Out`_\n- Can fetch Proxy Granting Ticket\n- Supports Django 1.5, 1.6, 1.7, 1.8, 1.9, 1.10, 1.11 and 2.0\n- Supports using a `User custom model`_\n- Supports Python 2.7, 3.x\n\n\nInstallation\n------------\n\nInstall with `pip`_::\n\n    pip install django-cas-ng\n\n\nInstall the latest code::\n\n    pip install https://github.com/mingchen/django-cas-ng/archive/master.zip\n\n\nInstall from source code::\n\n    python setup.py install\n\n\nSettings\n--------\n\nNow add it to the middleware, authentication backends and installed apps in your settings.\nMake sure you also have the authentication middleware installed.\nHere's an example::\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'django_cas_ng',\n        ...\n    )\n\n    MIDDLEWARE_CLASSES = (\n        'django.middleware.common.CommonMiddleware',\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\n        ...\n    )\n\n    AUTHENTICATION_BACKENDS = (\n        'django.contrib.auth.backends.ModelBackend',\n        'django_cas_ng.backends.CASBackend',\n    )\n\nSet the following required setting in ``settings.py``:\n\n* ``CAS_SERVER_URL``: This is the only setting you must explicitly define.\n   Set it to the base URL of your CAS source (e.g. https://account.example.com/cas/).\n\nOptional settings include:\n\n* ``CAS_ADMIN_PREFIX``: The URL prefix of the Django administration site.\n  If undefined, the CAS middleware will check the view being rendered to\n  see if it lives in ``django.contrib.admin.views``.\n* ``CAS_CREATE_USER``: Create a user when the CAS authentication is successful.\n  The default is ``True``.\n* ``CAS_CREATE_USER_WITH_ID``: Create a user using the ``id`` field provided by\n  the attributes returned by the CAS provider. Default is ``False``. Raises\n  ``ImproperlyConfigured`` exception if attributes are not provided or do not\n  contain the field ``id``.\n* ``CAS_LOGIN_MSG``: Welcome message send via the messages framework upon\n  successful authentication. Take the user login as formatting argument.\n  The default is ``\"Login succeeded. Welcome, %s.\"`` or some translation of it\n  if you have enabled django internationalization (``USE_I18N = True``)\n  You cas disable it by setting this parametter to ``None``\n* ``CAS_LOGGED_MSG``: Welcome message send via the messages framework upon\n  authentication attempt if the user is already authenticated.\n  Take the user login as formatting argument.\n  The default is ``\"You are logged in as %s.\"`` or some translation of it\n  if you have enabled django internationalization (``USE_I18N = True``)\n  You cas disable it by setting this parametter to ``None``\n* ``CAS_EXTRA_LOGIN_PARAMS``: Extra URL parameters to add to the login URL\n  when redirecting the user. Example::\n\n    CAS_EXTRA_LOGIN_PARAMS = {'renew': true}\n\n  If you need these parameters to be dynamic, then we recommend to implement\n  a wrapper for our default login view (the same can be done in case of the\n  logout view). See an example in the section below.\n\n* ``CAS_RENEW``: whether pass ``renew`` parameter on login and verification\n  of ticket to enforce that the login is made with a fresh username and password\n  verification in the CAS server. Default is ``False``.\n* ``CAS_IGNORE_REFERER``: If ``True``, logging out of the application will\n  always send the user to the URL specified by ``CAS_REDIRECT_URL``.\n* ``CAS_LOGOUT_COMPLETELY``: If ``False``, logging out of the application\n  won't log the user out of CAS as well.\n* ``CAS_REDIRECT_URL``: Where to send a user after logging in or out if\n  there is no referrer and no next page set. This setting also accepts named\n  URL patterns. Default is ``/``.\n* ``CAS_RETRY_LOGIN``: If ``True`` and an unknown or invalid ticket is\n  received, the user is redirected back to the login page.\n* ``CAS_STORE_NEXT``: If ``True``, the page to redirect to following login will be stored\n  as a session variable, which can avoid encoding errors depending on the CAS implementation.\n* ``CAS_VERSION``: The CAS protocol version to use. ``'1'`` ``'2'`` ``'3'`` and ``'CAS_2_SAML_1_0'`` are\n  supported, with ``'2'`` being the default.\n* ``CAS_USERNAME_ATTRIBUTE``: The CAS user name attribute from response. The default is ``uid``.\n* ``CAS_PROXY_CALLBACK``: The full url to the callback view if you want to\n  retrive a Proxy Granting Ticket\n* ``CAS_ROOT_PROXIED_AS``: Useful if behind a proxy server.  If host is listening on http://foo.bar:8080 but request\n  is https://foo.bar:8443.  Add CAS_ROOT_PROXIED_AS = 'https://foo.bar:8443' to your settings.\n* ``CAS_FORCE_CHANGE_USERNAME_CASE``: If ``lower``, usernames returned from CAS are lowercased before\n  we check whether their account already exists. Allows user `Joe` to log in to CAS either as\n  `joe` or `JOE` without duplicate accounts being created by Django (since Django allows\n  case-sensitive duplicates). If ``upper``, the submitted username will be uppercased. Default is ``False``.\n* ``CAS_APPLY_ATTRIBUTES_TO_USER``: If ``True`` any attributes returned by the CAS provider\n  included in the ticket will be applied to the User model returned by authentication. This is\n  useful if your provider is including details about the User which should be reflected in your model.\n  The default is ``False``.\n\nMake sure your project knows how to log users in and out by adding these to\nyour URL mappings::\n\n    import django_cas_ng.views\n\n    url(r'^accounts/login$', django_cas_ng.views.login, name='cas_ng_login'),\n    url(r'^accounts/logout$', django_cas_ng.views.logout, name='cas_ng_logout'),\n\nYou should also add an URL mapping for the ``CAS_PROXY_CALLBACK`` settings::\n\n    url(r'^accounts/callback$', django_cas_ng.views.callback, name='cas_ng_proxy_callback'),\n\n\nRun ``./manage.py syncdb`` to create Single Sign On and Proxy Granting Ticket tables.\nOn update you can just delete the ``django_cas_ng_sessionticket`` table and the\n``django_cas_ng_proxygrantingticket`` before calling ``./manage.py syncdb``.\n\nConsider running the command ``./manage.py django_cas_ng_clean_sessions`` on a regular basis\nright after the command ``./manage.py clearsessions`` cf `clearsessions`_.\nIt could be a good idea to put it in the crontab.\n\nUsers should now be able to log into your site using CAS.\n\nView-wrappers example\n---------------------\n\nThe ``settings.CAS_EXTRA_LOGIN_PARAMS`` allows you to define a static\ndictionary of extra parameters to be passed on to the CAS login page. But what\nif you want this dictionary to be dynamic (e.g. based on user session)?\n\nOur current advice is to implement simple wrappers for our default views, like\nthese ones:\n\n..  code-block:: python\n\n    from django_cas_ng import views as baseviews\n\n    @csrf_exempt\n    def login(request, **kwargs):\n        return _add_locale(request, baseviews.login(request, **kwargs))\n\n\n    def logout(request, **kwargs):\n        return _add_locale(request, baseviews.logout(request, **kwargs))\n\n\n    def _add_locale(request, response):\n        \"\"\"If the given HttpResponse is a redirect to CAS, then add the proper\n        `locale` parameter to it (and return the modified response). If not, simply\n        return the original response.\"\"\"\n\n        if (\n            isinstance(response, HttpResponseRedirect)\n            and response['Location'].startswith(settings.CAS_SERVER_URL)\n        ):\n            from ourapp.some_module import get_currently_used_language\n            url = response['Location']\n            url += '&' if '?' in url else '&'\n            url += \"locale=%s\" % get_currently_used_language(request)\n            response['Location'] = url\n        return response\n\nCustom backends\n---------------\n\nThe ``CASBackend`` class is heavily inspired from Django's own\n``RemoteUserBackend`` and allows for some configurability through subclassing\nif you need more control than django-cas-ng's settings provide. For instance,\nhere is an example backend that only allows some users to login through CAS:\n\n..  code-block:: python\n\n    from django_cas_ng.backends import CASBackend\n\n    class MyCASBackend(CASBackend):\n        def user_can_authenticate(self, user):\n            if user.has_permission('can_cas_login'):\n                return True\n            return False\n\nIf you need more control over the authentication mechanism of your project than\ndjango-cas-ng's settings provide, you can create your own authentication\nbackend that inherits from ``django_cas_ng.backends.CASBackend`` and override\nthese attributes or methods:\n\n**CASBackend.clean_username(username)**\n\nPerforms any cleaning on the ``username`` prior to using it to get or create a\n``User`` object. Returns the cleaned username. The default implementations\nchanges the case according to the value of ``CAS_FORCE_CHANGE_USERNAME_CASE``.\n\n**CASBackend.user_can_authenticate(user)**\n\nReturns whether the user is allowed to authenticate. For consistency with\nDjango's own behavior, django-cas-ng will allow all users to authenticate\nthrough CAS on Django versions lower than 1.10; starting with Django 1.10\nhowever, django-cas-ng will prevent users with ``is_active=False`` from\nauthenticating.\n\n**CASBackend.configure_user(user)**\n\nConfigures a newly created user. This method is called immediately after a new\nuser is created, and can be used to perform custom setup actions. Returns the\nuser object.\n\n**CASBackend.bad_attributes_reject(request, username, attributes)**\n\nRejects a user if SAML username/attributes are not OK. For example, to accept a user belonging\nto departmentNumber 421 only, define in ``mysite/settings.py`` the key-value constant::\n\n    MY_SAML_CONTROL=('departmentNumber', '421')\n\nand the authentication backends::\n\n    AUTHENTICATION_BACKENDS = [\n        'django.contrib.auth.backends.ModelBackend',\n\t'mysite.backends.MyCASBackend',\n    ]\n\nand create a file ``mysite/backends.py`` containing::\n\n    from django_cas_ng.backends import CASBackend\n    from django.contrib import messages\n    from django.conf import settings\n\n\n    class MyCASBackend(CASBackend):\n        def user_can_authenticate(self, user):\n            return True\n    \n    def bad_attributes_reject(self, request, username, attributes):\n        attribute = settings.MY_SAML_CONTROL[0]\n        value = settings.MY_SAML_CONTROL[1]\n        \n        if attribute not in attributes:\n\t    message = 'No \\''+ attribute + '\\' in SAML attributes'\n\t    messages.add_message(request, messages.ERROR, message)\n\t    return message\n\n        if value not in attributes[attribute]:\n\t    message = 'User ' + str(username) + ' is not in ' + value + ' ' + attribute + ', should be one of ' + str(attributes[attribute])\n            messages.add_message(request, messages.ERROR, message)\n            return message\n\n        return None\n\n\nSignals\n-------\n\ndjango_cas_ng.signals.cas_user_authenticated\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSent on successful authentication, the ``CASBackend`` will fire the ``cas_user_authenticated`` signal.\n\n**Arguments sent with this signal**\n\n**sender**\n  The authentication backend instance that authenticated the user.\n\n**user**\n  The user instance that was just authenticated.\n\n**created**\n  Boolean as to whether the user was just created.\n\n**attributes**\n  Attributes returned during by the CAS during authentication.\n\n**ticket**\n  The ticket used to authenticate the user with the CAS.\n\n**service**\n  The service used to authenticate the user with the CAS.\n  \n**request**\n  The request that was used to login.\n\n\ndjango_cas_ng.signals.cas_user_logout\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSent on user logout. Will be fired over manual logout or logout via CAS SingleLogOut query.\n\n**Arguments sent with this signal**\n\n**sender**\n  ``manual`` if manual logout, ``slo`` on SingleLogOut\n\n**user**\n  The user instance that is logged out.\n\n**session**\n  The current session we are loging out.\n\n**ticket**\n  The ticket used to authenticate the user with the CAS. (if found, else value if set to ``None``)\n\n\nProxy Granting Ticket\n---------------------\n\nIf you want your application to be able to issue Proxy Ticket to authenticate against some other CAS application,\nsetup the CAS_PROXY_CALLBACK parameter.\nAllow on the CAS config django_cas_ng to act as a Proxy application.\nThen after a user has logged in using the CAS, you can retrieve a Proxy Ticket as follow:\n\n    from django_cas_ng.models import ProxyGrantingTicket\n\n    def my_pretty_view(request, ...):\n        proxy_ticket = ProxyGrantingTicket.retrieve_pt(request, service)\n\nwhere ``service`` is the service url for which you want a proxy ticket.\n\n\nInternationalization\n--------------------\n\nYou can contribute to the translation of welcome messages by running ``django-admin makemessages -l lang_code``\ninside of the django_cas_ng directory. Where ``lang_code`` is the language code for which you want to submit a\ntranslation. Then open the file ``django_cas_ng/locale/lang_code/LC_MESSAGES/django.po`` with a gettex translations\neditor (for example https://poedit.net/). Translate and save the file.\nThink to add ``django_cas_ng/locale/lang_code/LC_MESSAGES/django.po`` to repo. Please do not add ``django_cas_ng/locale/lang_code/LC_MESSAGES/django.mo`` to repo since .mo file can be generated by .po file.\n\n\nTesting\n-------\n\nEvery code commit triggers a **travis-ci** build. checkout current build status at https://travis-ci.org/mingchen/django-cas-ng\n\nTesting is managed by ``pytest`` and ``tox``.\nBefore run install, you need install required packages for testing::\n\n    pip install -r requirements-dev.txt\n\n\nTo run testing on locally::\n\n    py.test\n\n\nTo run all testing on all enviroments locally::\n\n    tox\n\n\nContribution\n------------\n\nContributions are welcome!\n\nIf you would like to contribute this project.\nPlease feel free to fork and send pull request.\nPlease make sure tests are passed.\nAlso welcome to add your name to **Credits** section of this document.\n\nNew code should follow both `PEP8`_ and the `Django coding style`_.\n\n\nCredits\n-------\n\n* `django-cas`_\n* `Stefan Horomnea`_\n* `Piotr Buliński`_\n* `Piper Merriam`_\n* `Nathan Brown`_\n* `Jason Brownbridge`_\n* `Bryce Groff`_\n* `Jeffrey P Gill`_\n* `timkung1`_\n* `Domingo Yeray Rodríguez Martín`_\n* `Rayco Abad-Martín`_\n* `Édouard Lopez`_\n* `Guillaume Vincent`_\n* `Wojciech Rygielski`_\n* `Valentin Samir`_\n* `Alexander Kavanaugh`_\n* `Daniel Davis`_\n* `Peter Baehr`_\n\nReferences\n----------\n\n* `django-cas`_\n* `CAS protocol`_\n* `Jasig CAS server`_\n\n.. _CAS: https://www.apereo.org/cas\n.. _CAS protocol: https://www.apereo.org/cas/protocol\n.. _Support Single Sign Out: https://wiki.jasig.org/display/casum/single+sign+out\n.. _django-cas: https://bitbucket.org/cpcc/django-cas\n.. _clearsessions: https://docs.djangoproject.com/en/1.8/topics/http/sessions/#clearing-the-session-store\n.. _pip: http://www.pip-installer.org/\n.. _PEP8: http://www.python.org/dev/peps/pep-0008\n.. _Django coding style: https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style\n.. _User custom model: https://docs.djangoproject.com/en/1.5/topics/auth/customizing/\n.. _Jasig CAS server: http://jasig.github.io/cas\n.. _Piotr Buliński: https://github.com/piotrbulinski\n.. _Stefan Horomnea: https://github.com/choosy\n.. _Piper Merriam: https://github.com/pipermerriam\n.. _Nathan Brown: https://github.com/tsitra\n.. _Jason Brownbridge: https://github.com/jbrownbridge\n.. _Bryce Groff: https://github.com/bgroff\n.. _Jeffrey P Gill: https://github.com/jpg18\n.. _timkung1: https://github.com/timkung1\n.. _Domingo Yeray Rodríguez Martín: https://github.com/dyeray\n.. _Rayco Abad-Martín: https://github.com/Rayco\n.. _Édouard Lopez: https://github.com/edouard-lopez\n.. _Guillaume Vincent: https://github.com/guillaumevincent\n.. _Wojciech Rygielski: https://github.com/wrygiel\n.. _Valentin Samir: https://github.com/nitmir\n.. _Alexander Kavanaugh: https://github.com/kavdev\n.. _Daniel Davis: https://github.com/danizen\n.. _Peter Baehr: https://github.com/pbaehr\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/mingchen/django-cas-ng/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mingchen/django-cas-ng",
    "keywords": "django",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cas-ng",
    "package_url": "https://pypi.org/project/django-cas-ng/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cas-ng/",
    "project_urls": {
      "Download": "https://github.com/mingchen/django-cas-ng/releases",
      "Homepage": "https://github.com/mingchen/django-cas-ng"
    },
    "release_url": "https://pypi.org/project/django-cas-ng/3.5.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "CAS 1.0/2.0 client authentication backend for Django (inherited from django-cas)",
    "version": "3.5.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12516815,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7ea4da01fff13f0258e92ee552a2e6aee74d9c8a1e996d0d207f8d116e2e167",
        "md5": "75a84f77d48f6b6547fe8ee9035c2e84",
        "sha256": "9feed2ba9b4deec172e697f96a65863580e166c8b2f18ea99240694c299ec33a"
      },
      "downloads": -1,
      "filename": "django-cas-ng-3.5.9.tar.gz",
      "has_sig": false,
      "md5_digest": "75a84f77d48f6b6547fe8ee9035c2e84",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24453,
      "upload_time": "2018-03-13T22:02:27",
      "upload_time_iso_8601": "2018-03-13T22:02:27.068685Z",
      "url": "https://files.pythonhosted.org/packages/a7/ea/4da01fff13f0258e92ee552a2e6aee74d9c8a1e996d0d207f8d116e2e167/django-cas-ng-3.5.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}