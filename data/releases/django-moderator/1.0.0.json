{
  "info": {
    "author": "Praekelt Foundation",
    "author_email": "dev@praekelt.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django Moderator\n================\n**Django community trained Bayesian inference based comment moderation app.**\n\n.. contents:: Contents\n    :depth: 5\n\n``django-moderator`` integrates Django's comments framework with SpamBayes_ to classify comments into one of four categories, *ham*, *spam*, *reported* or *unsure*, based on training by users (see Paul Graham's `A Plan for Spam <http://www.paulgraham.com/spam.html>`_ for some background).\n\nUsers classify comments as *reported* using a *report abuse* mechanic. Staff users can then classify these *reported* comments as *ham* or *spam*, thereby training the algorithm to automatically classify similarly worded comments in future. Additionally comments the algorithm fails to clearly classify as either *ham* or *spam* will be classified as *unsure*, allowing staff users to manually classify them as well via admin.\n\nComments classified as *spam* will have their ``is_removed`` field set to ``True`` and as such will no longer be visible in comment listings.\n\nComments *reported* by users will have their ``is_removed`` field set to ``True`` and as such will no longer be visible in comment listings.\n\nComments classified as *ham* or *unsure* will remain unchanged and as such will be visible in comment listings.\n\n``django-moderator`` also implements a user friendly admin interface for efficiently moderating comments.\n\n\nInstallation\n------------\n\n#. Install or add ``django-moderator`` to your Python path.\n\n#. Add ``moderator`` to your ``INSTALLED_APPS`` setting.\n\n#. Configure ``django-likes`` as described `here <http://pypi.python.org/pypi/django-likes>`_.\n\n#. Add a ``MODERATOR`` setting to your project's ``settings.py`` file. This setting specifies what classifier storage backend to use (see below) and also classification thresholds::\n\n    MODERATOR = {\n        'CLASSIFIER': 'moderator.storage.DjangoClassifier',\n        'HAM_CUTOFF': 0.3,\n        'SPAM_CUTOFF': 0.7,\n        'ABUSE_CUTOFF': 3,\n    }\n\n   Specifically a ``HAM_CUTOFF`` value of ``0.3`` as in this example specifies that any comment scoring less than ``0.3`` during Bayesian inference will be classified as *ham*.  A ``SPAM_CUTOFF`` value of ``0.7`` as in this example specifies that any comment scoring more than ``0.7`` during Bayesian inference will be classified as *spam*. Anything between ``0.3`` and ``0.7`` will be classified as *unsure*, awaiting further manual staff user classification. Additionally an ``ABUSE_CUTOFF`` value of ``3`` as in this example specifies that any comment receiving ``3`` or more abuse reports will be classified as *reported*, awaiting further manual staff user classification. ``HAM_CUTOFF``, ``SPAM_CUTOFF`` and ``ABUSE_CUTOFF`` can be ommited in which case the default cutoffs are ``0.3``, ``0.7`` and ``3`` respectively.\n\n#. Optionally, if you want an additional **moderate** object tool on admin change views, configure ``django-apptemplates`` as described `here <http://pypi.python.org/pypi/django-apptemplates>`_ , include ``moderator`` as an ``INSTALLED_APP`` before ``django.contrib.admin`` and add ``moderator.admin.AdminModeratorMixin`` as a base class to those admin classes you want the tool available for.\n\nAdditional Settings\n-------------------\n\n#. By default all comments are classifed as they are created. You can however disable this behaviour by specifying ``REALTIME_CLASSIFICATION`` as ``False``, i.e.::\n\n    MODERATOR = {\n        ...\n        'REALTIME_CLASSIFICATION': False,\n        ...\n    }\n\n#. By default moderator comment replies are posted chronologically **after** the comment being replied to. If however you need replies to be posted **before** the comment being replied to(for example if you display your comments reverse cronologically), you can specify ``REPLY_BEFORE_COMMENT`` as ``True``, i.e.::\n\n    MODERATOR = {\n        ...\n        'REPLY_BEFORE_COMMENT': True,\n        ...\n    }\n\nClassifier Storage Backends\n---------------------------\n``django-moderator`` includes two SpamBayes_ storage backends, ``moderator.storage.DjangoClassifier`` and ``moderator.storage.RedisClassifier`` respectively.\n\n.. note::\n    ``moderator.storage.RedisClassifier`` is recommended for production environments as it should be much faster than ``moderator.storage.DjangoClassifier``.\n\nTo use ``moderator.storage.RedisClassifier`` as your classifier storage backend specify it in your ``MODERATOR`` setting, i.e.::\n\n    MODERATOR = {\n        'CLASSIFIER': 'moderator.storage.RedisClassifier',\n        'CLASSIFIER_CONFIG': {\n            'host': 'localhost',\n            'port': 6379,\n            'db': 0,\n            'password': None,\n        },\n        'HAM_CUTOFF': 0.3,\n        'SPAM_CUTOFF': 0.7,\n        'ABUSE_CUTOFF': 3,\n    }\n\nYou can also create your own backends, in which case take note that the content of ``CLASSIFIER_CONFIG`` will be passed as keyword agruments to your backend's ``__init__`` method.\n\nUsage\n-----\nOnce correctly configured you should use the ``traincommentclassifier`` management command to train the Bayesian inference system using a sample of existing comment objects (comments with ``is_removed`` as ``True`` will be trained as *spam*, *ham* otherwise), i.e.::\n\n    $ ./manage.py traincommentclassifier\n\n.. note::\n    The ``traincommentclassifier`` command will remove/clear any existing classification data and start from scratch.\n\n\nThen you can periodically use the ``classifycomments`` management command to automatically classify comments as either *ham*, *spam*, *reported* or *unsure* based on user reports and previous training, i.e.::\n\n    $ ./manage.py classifycomments\n\nComments can be manually classified as either *ham* or *spam* via admin list view actions.\n\n\n.. _SpamBayes: http://spambayes.sourceforge.net/\n\nAuthors\n=======\n\nPraekelt Foundation\n-------------------\n* Shaun Sephton\n\nChangelog\n=========\n\n0.1.3 (2013-03-07)\n------------------\n#. Include fixtures.\n\n0.1.2 (2013-03-07)\n------------------\n#. Include fixtures.\n\n0.1.1 (2013-03-07)\n------------------\n#. Added elivated abuse reporting functionality.\n\n0.1.0 (2013-03-07)\n------------------\n#. Realtime classification option.\n#. Mark spam with reply action.\n#. Post replies before comment option.\n\n0.0.9 (2013-02-18)\n------------------\n#. Further speed optimizations.\n\n0.0.8 (2013-02-18)\n------------------\n#. Admin speed optimizations.\n#. Add moderator reply admin action.\n\n0.0.7 (2013-01-28)\n------------------\n#. Added moderate admin change view tool.\n\n0.0.6 (2013-01-24)\n------------------\n#. Added site field for canned replies and filter accordingly on comment admin views.\n\n0.0.5 (2012-12-03)\n------------------\n#. Added ``traincommentclassifier`` management command.\n#. Admin proxy model additions to clearly group comments.\n#. Various optimizations.\n\n0.0.4 (2012-08-29)\n------------------\n#. Migration to add moderator_commentreply model.\n\n0.0.3 (2012-08-29)\n------------------\n#. Include templates.\n\n0.0.2 (2012-08-29)\n------------------\n#. Wide range of changes allowing for reporting of abusive comments by users.\n\n0.0.1 (2012-05-23)\n------------------\n#. Initial release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/praekelt/django-moderator",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-moderator",
    "package_url": "https://pypi.org/project/django-moderator/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-moderator/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/praekelt/django-moderator"
    },
    "release_url": "https://pypi.org/project/django-moderator/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django Bayesian inference based comment moderation app.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4623882,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbbc3ba886eff275be2175ec28274a97f826b25e80a8306d7cb22b0cd5083047",
        "md5": "4e3d8008f5b0309eb6d3ebf57da22909",
        "sha256": "73553f22b15f167caf7a4fca282ece162043711a474ee83ad8c06b2034347a76"
      },
      "downloads": -1,
      "filename": "django-moderator-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4e3d8008f5b0309eb6d3ebf57da22909",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23253,
      "upload_time": "2013-11-21T08:52:31",
      "upload_time_iso_8601": "2013-11-21T08:52:31.063475Z",
      "url": "https://files.pythonhosted.org/packages/bb/bc/3ba886eff275be2175ec28274a97f826b25e80a8306d7cb22b0cd5083047/django-moderator-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}