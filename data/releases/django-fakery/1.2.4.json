{
  "info": {
    "author": "Flavio Curella",
    "author_email": "flavio.curella@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta"
    ],
    "description": "Django-fakery\r\n=============\r\n\r\n.. image:: https://travis-ci.org/fcurella/django-fakery.svg?branch=master\r\n    :target: https://travis-ci.org/fcurella/django-fakery\r\n\r\n\r\n.. image:: https://coveralls.io/repos/fcurella/django-fakery/badge.svg?branch=master&service=github\r\n  :target: https://coveralls.io/github/fcurella/django-fakery?branch=master\r\n\r\nAn easy-to-use implementation of `Creation Methods`_ (aka Object Factory) for Django, backed by ``Faker``.\r\n\r\n.. _Creation Methods: http://xunitpatterns.com/Creation%20Method.html\r\n\r\n``django_fakery`` will try to guess the field's value based on the field's name and type.\r\n\r\nInstallation\r\n------------\r\n\r\nInstall with::\r\n\r\n    $ pip install django-fakery\r\n\r\nQuickStart\r\n----------\r\n\r\n.. code-block:: python\r\n\r\n    from django_fakery import factory\r\n\r\n    factory.make(\r\n        'app.Model',\r\n        fields={\r\n            'field': 'value',\r\n        }\r\n    )\r\n\r\nThe value of a field can be any python object, a callable, or a lambda:\r\n\r\n.. code-block:: python\r\n\r\n    from django_fakery import factory\r\n    from django.utils import timezone\r\n\r\n    factory.make(\r\n        'app.Model',\r\n        fields={\r\n            'created': timezone.now\r\n        }\r\n    )\r\n\r\nWhen using a lambda, it will receive two arguments: ``n`` is the iteration number, and ``f`` is an instance of ``faker``:\r\n\r\n.. code-block:: python\r\n\r\n    user = factory.make(\r\n        'auth.User',\r\n        fields={\r\n            'username': lambda n, f: 'user_{}'.format(n),\r\n        }\r\n    )\r\n\r\n\r\nYou can create multiple objects by using the ``quantity`` parameter:\r\n\r\n.. code-block:: python\r\n\r\n    from django_fakery import factory\r\n\r\n    factory.make('app.Model', quantity=4)\r\n\r\nFor convenience, when the value of a field is a string, it will be interpolated with the iteration number:\r\n\r\n.. code-block:: python\r\n\r\n    user = factory.make(\r\n        'auth.User',\r\n        fields={\r\n            'username': 'user_{}',\r\n        },\r\n        quantity=4\r\n    )\r\n\r\nForeign keys\r\n------------\r\n\r\nNon-nullable ``ForeignKey`` s create related objects automatically.\r\n\r\nIf you want to explicitly create a related object, you can pass it to the ``fields`` like any other value:\r\n\r\n.. code-block:: python\r\n\r\n    pizza = factory.make(\r\n        'food.Pizza',\r\n        fields={\r\n            'chef': factory.make('auth.User', fields={'username': 'Gusteau'}),\r\n        }\r\n    )\r\n\r\nManyToManies\r\n------------\r\n\r\nBecause ``ManyToManyField``s are implicitly nullable (ie: they're always allowed to have their ``.count()`` equal to ``0``), related objects on those fields are not automatically created for you.\r\n\r\nIf you want to explicitly create a related objects, you can pass a list to the ``fields`` like any other value:\r\n\r\n.. code-block:: python\r\n\r\n    pizza = factory.make(\r\n        'food.Pizza',\r\n        fields={\r\n            'toppings': [factory.make('food.Tooping', fields={'name': 'Anchovies'})],\r\n        }\r\n    )\r\n\r\nYou can also pass a factory, to create multiple objects:\r\n\r\n.. code-block:: python\r\n\r\n    pizza = factory.make(\r\n        'food.Pizza',\r\n        fields={\r\n            'toppings': factory.make('food.Tooping', quantity=5),\r\n        }\r\n    )\r\n\r\nLazies\r\n------\r\n\r\nYou can refer to the created instance's own attributes or method by using `Lazy` objects.\r\n\r\nFor example, if you'd like to create user with email as username, and have them always match, you could do:\r\n\r\n.. code-block:: python\r\n\r\n    from django_fakery import factory, Lazy\r\n\r\n    factory.make(\r\n        'auth.User',\r\n        fields={\r\n            'username': Lazy('email'),\r\n        }\r\n    )\r\n\r\n\r\nIf you want to assign a value returned by a method on the instance, you can pass the method's arguments to the ``Lazy`` object:\r\n\r\n.. code-block:: python\r\n\r\n    from django_fakery import factory, Lazy\r\n\r\n    factory.make(\r\n        'myapp.Model',\r\n        fields={\r\n            'myfield': Lazy('model_method', 'argument', keyword='keyword value'),\r\n        }\r\n    )\r\n\r\n\r\nPre-save and Post-save hooks\r\n----------------------------\r\n\r\nYou can define functions to be called right before the instance is saved or right after:\r\n\r\n.. code-block:: python\r\n\r\n    from django_fakery import factory\r\n\r\n    factory.make(\r\n        'auth.User',\r\n        fields={\r\n            'username': 'username',\r\n        },\r\n        pre_save=[\r\n            lambda i: i.set_password('password')\r\n        ]\r\n    )\r\n\r\n\r\nSince settings a user's password is such a common case, we special-cased that scenario, so you can just pass it as a field:\r\n\r\n.. code-block:: python\r\n\r\n    from django_fakery import factory\r\n\r\n    factory.make(\r\n        'auth.User',\r\n        fields={\r\n            'username': 'username',\r\n            'password': 'password',\r\n        }\r\n    )\r\n\r\nNon persistent instances\r\n------------------------\r\n\r\nYou can build instances that are not saved to the database by using the `.build()` method, just like you'd use `.make()`:\r\n\r\n.. code-block:: python\r\n\r\n    from django_fakery import factory\r\n\r\n    factory.build(\r\n        'app.Model',\r\n        fields={\r\n            'field': 'value',\r\n        }\r\n    )\r\n\r\nNote that since the instance is not saved to the database, `.build()` does not support ManyToManies or post-save hooks.\r\n\r\nBlueprints\r\n----------\r\n\r\nUse a blueprint:\r\n\r\n.. code-block:: python\r\n\r\n    from django_fakery import factory\r\n\r\n    user = factory.blueprint('auth.User')\r\n\r\n    user.make(quantity=10)\r\n\r\nBlueprints can refer other blueprints:\r\n\r\n.. code-block:: python\r\n\r\n    pizza = factory.blueprint(\r\n        'food.Pizza',\r\n        fields={\r\n            'chef': user,\r\n        }\r\n    )\r\n\r\nSeeding the faker\r\n-----------------\r\n\r\n.. code-block:: python\r\n\r\n    from django_fakery import factory\r\n\r\n    factory.make('auth.User', fields={\r\n        'username': 'regularuser_{}'\r\n    }, seed=1234, quantity=4)\r\n\r\n\r\nCredits\r\n-------\r\n\r\nThe API is heavily inspired by `model_mommy`_.\r\n\r\n.. _model_mommy: https://github.com/vandersonmota/model_mommy\r\n\r\nLicense\r\n-------\r\n\r\nThis software is released under the MIT License.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fcurella/django-fakery/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fakery",
    "package_url": "https://pypi.org/project/django-fakery/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-fakery/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/fcurella/django-fakery/"
    },
    "release_url": "https://pypi.org/project/django-fakery/1.2.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A model instances generator for Django",
    "version": "1.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17178972,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a47d2d569cfd36e4164cf0e155b521b2472e18449a836292ff90fcdac2f237e",
        "md5": "6a0f40ce1e45648101edcfc97dfce347",
        "sha256": "c422a2b3d233f2d08f205015b504c9896e448a9bb5872f7ed0ee07261d190f0c"
      },
      "downloads": -1,
      "filename": "django_fakery-1.2.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6a0f40ce1e45648101edcfc97dfce347",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 15608,
      "upload_time": "2016-01-07T23:07:31",
      "upload_time_iso_8601": "2016-01-07T23:07:31.104291Z",
      "url": "https://files.pythonhosted.org/packages/7a/47/d2d569cfd36e4164cf0e155b521b2472e18449a836292ff90fcdac2f237e/django_fakery-1.2.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50c5a8d8b08e6b7c873abc874752262de9b2232e363b6fa570556cc10d158db9",
        "md5": "4a0f78e6924f9de1e6ab999895310198",
        "sha256": "26ff9dd517d77dbb1fe81cd842daaf2a7da8114910244e4e68e729d40e85d86d"
      },
      "downloads": -1,
      "filename": "django-fakery-1.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "4a0f78e6924f9de1e6ab999895310198",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8857,
      "upload_time": "2016-01-07T23:07:25",
      "upload_time_iso_8601": "2016-01-07T23:07:25.178550Z",
      "url": "https://files.pythonhosted.org/packages/50/c5/a8d8b08e6b7c873abc874752262de9b2232e363b6fa570556cc10d158db9/django-fakery-1.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}