{
  "info": {
    "author": "Flavio Curella",
    "author_email": "flavio.curella@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Django-fakery\n=============\n\n.. image:: https://badge.fury.io/py/django-fakery.svg\n    :target: https://badge.fury.io/py/django-fakery\n\n.. image:: https://travis-ci.org/fcurella/django-fakery.svg?branch=master\n    :target: https://travis-ci.org/fcurella/django-fakery\n\n\n.. image:: https://coveralls.io/repos/fcurella/django-fakery/badge.svg?branch=master&service=github\n  :target: https://coveralls.io/github/fcurella/django-fakery?branch=master\n\nAn easy-to-use implementation of `Creation Methods`_ (aka Object Factory) for Django, backed by ``Faker``.\n\n.. _Creation Methods: http://xunitpatterns.com/Creation%20Method.html\n\n``django_fakery`` will try to guess the field's value based on the field's name and type.\n\nInstallation\n------------\n\nInstall with::\n\n    $ pip install django-fakery\n\nQuickStart\n----------\n\n.. code-block:: python\n\n    from django_fakery import factory\n    from myapp.models import MyModel\n\n    factory.m(MyModel)(field='value')\n\n\nIf you ``pytest``, you can use the ``fakery`` fixture:\n\n.. code-block:: python\n\n    from myapp.models import MyModel\n\n    def test_mymodel(fakery):\n        fakery.m(MyModel)(field='value')\n\nIf you'd rather, you can use a more wordy API:\n\n.. code-block:: python\n\n    from django_fakery import factory\n    from myapp.models import MyModel\n\n    factory.make(\n        MyModel,\n        fields={\n            'field': 'value',\n        }\n    )\n\nWe will use the short API thorough the documentation.\n\nThe value of a field can be any python object, a callable, or a lambda:\n\n.. code-block:: python\n\n    from django.utils import timezone\n    from django_fakery import factory\n    from myapp.models import MyModel\n\n    factory.m(MyModel)(created=timezone.now)\n\nWhen using a lambda, it will receive two arguments: ``n`` is the iteration number, and ``f`` is an instance of ``faker``:\n\n.. code-block:: python\n\n    from django.contrib.auth.models import User\n\n    user = factory.m(User)(\n        username=lambda n, f: 'user_{}'.format(n),\n    )\n\n``django-fakery`` includes some pre-built lambdas for common needs. See shortcuts_  for more info.\n\nYou can create multiple objects by using the ``quantity`` parameter:\n\n.. code-block:: python\n\n    from django_fakery import factory\n    from django.contrib.auth.models import User\n\n    factory.m(User, quantity=4)\n\nFor convenience, when the value of a field is a string, it will be interpolated with the iteration number:\n\n.. code-block:: python\n\n    from myapp.models import MyModel\n\n    user = factory.m(User, quantity=4)(\n        username='user_{}',        \n    )\n\nForeign keys\n------------\n\nNon-nullable ``ForeignKey`` s create related objects automatically.\n\nIf you want to explicitly create a related object, you can pass a factory like any other value:\n\n.. code-block:: python\n\n    from django.contrib.auth.models import User\n    from food.models import Pizza\n\n    pizza = factory.m(Pizza)(\n        chef=factory.m(User)(username='Gusteau'),\n    )\n\nIf you'd rather not create related objects and reuse the same value for a foreign key, you can use the special value ``django_fakery.rels.SELECT``:\n\n.. code-block:: python\n\n    from django_fakery import factory, rels\n    from food.models import Pizza\n\n    pizza = factory.m(Pizza, quantity=5)(\n        chef=rels.SELECT,\n    )\n\n``django-fakery`` will always use the first instance of the related model, creating one if necessary.\n\nManyToManies\n------------\n\nBecause ``ManyToManyField`` s are implicitly nullable (ie: they're always allowed to have their ``.count()`` equal to ``0``), related objects on those fields are not automatically created for you.\n\nIf you want to explicitly create a related objects, you can pass a list as the field's value:\n\n.. code-block:: python\n\n    from food.models import Pizza, Topping\n\n    pizza = factory.m(Pizza)(\n        toppings=[\n            factory.m(Topping)(name='Anchovies')\n        ],\n    )\n\nYou can also pass a factory, to create multiple objects:\n\n.. code-block:: python\n\n    from food.models import Pizza, Topping\n\n    pizza = factory.m(Pizza)(\n        toppings=factory.m(Topping, quantity=5),\n    )\n\n.. _shortcuts:\n\nShortcuts\n---------\n\n``django-fakery`` includes some shortcut functions to generate commonly needed values.\n\n\n``future_datetime(end='+30d')``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns a ``datetime`` object in the future (that is, 1 second from now) up to the specified ``end``. ``end`` can be a string, anotther datetime, or a timedelta. If it's a string, it must start with `+`, followed by and integer and a unit, Eg: ``'+30d'``. Defaults to ``'+30d'``\n\nValid units are:\n\n* ``'years'``, ``'y'``\n* ``'weeks'``, ``'w'``\n* ``'days'``, ``'d'``\n* ``'hours'``, ``'hours'``\n* ``'minutes'``, ``'m'``\n* ``'seconds'``, ``'s'``\n\nExample::\n\n    from django_fakery import factory, shortcuts\n    from myapp.models import MyModel\n    factory.m(MyModel)(field=shortcuts.future_datetime('+1w'))\n\n\n``future_date(end='+30d')``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns a ``date`` object in the future (that is, 1 day from now) up to the specified ``end``. ``end`` can be a string, another date, or a timedelta. If it's a string, it must start with `+`, followed by and integer and a unit, Eg: ``'+30d'``. Defaults to ``'+30d'``\n\n``past_datetime(start='-30d')``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns a ``datetime`` object in the past between 1 second ago and the specified ``start``. ``start`` can be a string, another datetime, or a timedelta. If it's a string, it must start with `-`, followed by and integer and a unit, Eg: ``'-30d'``. Defaults to ``'-30d'``\n\n``past_date(start='-30d')``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns a ``date`` object in the past between 1 day ago and the specified ``start``. ``start`` can be a string, another date, or a timedelta. If it's a string, it must start with `-`, followed by and integer and a unit, Eg: ``'-30d'``. Defaults to ``'-30d'``\n\n\nLazies\n------\n\nYou can refer to the created instance's own attributes or method by using `Lazy` objects.\n\nFor example, if you'd like to create user with email as username, and have them always match, you could do:\n\n.. code-block:: python\n\n    from django_fakery import factory, Lazy\n    from django.contrib.auth.models import User\n\n    factory.m(auth.User)(\n        username=Lazy('email'),\n    )\n\n\nIf you want to assign a value returned by a method on the instance, you can pass the method's arguments to the ``Lazy`` object:\n\n.. code-block:: python\n\n    from django_fakery import factory, Lazy\n    from myapp.models import MyModel\n\n    factory.m(MyModel)(\n        myfield=Lazy('model_method', 'argument', keyword='keyword value'),\n    )\n\nPre-save and Post-save hooks\n----------------------------\n\nYou can define functions to be called right before the instance is saved or right after:\n\n.. code-block:: python\n\n    from django.contrib.auth.models import User\n    from django_fakery import factory\n\n    factory.m(\n        User,\n        pre_save=[\n            lambda u: u.set_password('password')\n        ],\n    )(username='username')\n\nSince settings a user's password is such a common case, we special-cased that scenario, so you can just pass it as a field:\n\n.. code-block:: python\n\n    from django.contrib.auth.models import User\n    from django_fakery import factory\n\n    factory.m(User)(\n        username='username',\n        password='password',\n    )\n\nGet or Make\n-----------\n\nYou can check for existance of a model instance and create it if necessary by using the ``g_m`` (short for ``get_or_make``) method:\n\n.. code-block:: python\n\n    from myapp.models import MyModel\n\n    myinstance, created = factory.g_m(\n        MyModel,\n        lookup={\n            'myfield': 'myvalue',\n        }\n    )(myotherfield='somevalue')\n\nIf you're looking for a more explicit API, you can use the ``.get_or_make()`` method:\n\n.. code-block:: python\n\n    from myapp.models import MyModel\n\n    myinstance, created = factory.get_or_make(\n        MyModel,\n        lookup={\n            'myfield': 'myvalue',\n        },\n        fields={\n            'myotherfield': 'somevalue',\n        },\n    )\n\nGet or Update\n-------------\n\nYou can check for existence of a model instance and update it by using the ``g_u`` (short for ``get_or_update``) method:\n\n.. code-block:: python\n\n    from myapp.models import MyModel\n\n    myinstance, created = factory.g_u(\n        MyModel,\n        lookup={\n            'myfield': 'myvalue',\n        }\n    )(myotherfield='somevalue')\n\nIf you're looking for a more explicit API, you can use the ``.get_or_update()`` method:\n\n.. code-block:: python\n\n    from myapp.models import MyModel\n\n    myinstance, created = factory.get_or_update(\n        MyModel,\n        lookup={\n            'myfield': 'myvalue',\n        },\n        fields={\n            'myotherfield': 'somevalue',\n        },\n    )\n\nNon persistent instances\n------------------------\n\nYou can build instances that are not saved to the database by using the ``.b()`` method, just like you'd use ``.m()``:\n\n.. code-block:: python\n\n    from django_fakery import factory\n    from myapp.models import MyModel\n\n    factory.b(MyModel)(\n        field='value',\n    )\n\nNote that since the instance is not saved to the database, ``.build()`` does not support ManyToManies or post-save hooks.\n\nIf you're looking for a more explicit API, you can use the ``.build()`` method:\n\n.. code-block:: python\n\n    from django_fakery import factory\n    from myapp.models import MyModel\n\n    factory.build(\n        MyModel,\n        fields={\n            'field': 'value',\n        }\n    )\n\n\nBlueprints\n----------\n\nUse a blueprint:\n\n.. code-block:: python\n\n    from django.contrib.auth.models import User\n    from django_fakery import factory\n\n    user = factory.blueprint(User)\n\n    user.make(quantity=10)\n\nBlueprints can refer other blueprints:\n\n.. code-block:: python\n\n    from food.models import Pizza\n\n    pizza = factory.blueprint(Pizza).fields(\n            chef=user,\n        )\n    )\n\nYou can also override the field values you previously specified:\n\n.. code-block:: python\n\n    from food.models import Pizza\n\n    pizza = factory.blueprint(Pizza).fields(\n            chef=user,\n            thickness=1\n        )\n    )\n\n    pizza.m(quantity=10)(thickness=2)\n\nOr, if you'd rather use the explicit api:\n\n.. code-block:: python\n\n    from food.models import Pizza\n\n    pizza = factory.blueprint(Pizza).fields(\n            chef=user,\n            thickness=1\n        )\n    )\n\n    thicker_pizza = pizza.fields(thickness=2)\n    thicker_pizza.make(quantity=10)\n\n\nSeeding the faker\n-----------------\n\n.. code-block:: python\n\n    from django.contrib.auth.models import User\n    from django_fakery import factory\n\n    factory.m(User, seed=1234, quantity=4)(\n        username='regularuser_{}'\n    )\n\nCredits\n-------\n\nThe API is heavily inspired by `model_mommy`_.\n\n.. _model_mommy: https://github.com/vandersonmota/model_mommy\n\nLicense\n-------\n\nThis software is released under the MIT License.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fcurella/django-fakery/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fakery",
    "package_url": "https://pypi.org/project/django-fakery/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-fakery/",
    "project_urls": {
      "Homepage": "https://github.com/fcurella/django-fakery/"
    },
    "release_url": "https://pypi.org/project/django-fakery/2.1.0/",
    "requires_dist": [
      "Faker (<0.9.0,>=0.8.0)",
      "Django (>=1.11)",
      "six (>=1.10.1)"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
    "summary": "A model instances generator for Django",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17178972,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75412f12f7680e9436f9704f75c04d27dabd0034bd8e8fc742041c430000ef92",
        "md5": "3d6cab26be32efc5416289d6b7af68d5",
        "sha256": "6876b5b352d93c6d51163d1c46183b3987c79807d9806959f45c9a6eb8fc4b7e"
      },
      "downloads": -1,
      "filename": "django_fakery-2.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d6cab26be32efc5416289d6b7af68d5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 14762,
      "upload_time": "2019-07-31T20:10:42",
      "upload_time_iso_8601": "2019-07-31T20:10:42.441741Z",
      "url": "https://files.pythonhosted.org/packages/75/41/2f12f7680e9436f9704f75c04d27dabd0034bd8e8fc742041c430000ef92/django_fakery-2.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8926d75a79efe2d12f069cb31127f86da957ab9f52073ee0ed6533fe55d8c47c",
        "md5": "36ee5055768b7881c76d1110a5840a33",
        "sha256": "4b8e0a80b8474b397bc2425097aaa71681b052436fb127d2a708e3dade9c498d"
      },
      "downloads": -1,
      "filename": "django-fakery-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "36ee5055768b7881c76d1110a5840a33",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 15006,
      "upload_time": "2019-07-31T20:10:44",
      "upload_time_iso_8601": "2019-07-31T20:10:44.674396Z",
      "url": "https://files.pythonhosted.org/packages/89/26/d75a79efe2d12f069cb31127f86da957ab9f52073ee0ed6533fe55d8c47c/django-fakery-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}