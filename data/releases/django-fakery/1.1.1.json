{
  "info": {
    "author": "Flavio Curella",
    "author_email": "flavio.curella@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "Django-fakery\n=============\n\n.. image:: https://travis-ci.org/fcurella/django-fakery.svg?branch=master\n    :target: https://travis-ci.org/fcurella/django-fakery\n\n\n.. image:: https://coveralls.io/repos/fcurella/django-fakery/badge.svg?branch=master&service=github\n  :target: https://coveralls.io/github/fcurella/django-fakery?branch=master\n\nAn easy-to-use implementation of `Creation Methods`_ (aka Object Factory) for Django, backed by ``Faker``.\n\n.. _Creation Methods: http://xunitpatterns.com/Creation%20Method.html\n\n``django_fakery`` will try to guess the field's value based on the field's name and type.\n\nInstallation\n------------\n\nInstall with::\n\n    $ pip install django-fakery\n\nQuickStart\n----------\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.make(\n        'app.Model',\n        fields={\n            'field': 'value',\n        }\n    )\n\nThe value of a field can be any python object, a callable, or a lambda:\n\n.. code-block:: python\n\n    from django_fakery import factory\n    from django.utils import timezone\n\n    factory.make(\n        'app.Model',\n        fields={\n            'created': timezone.now\n        }\n    )\n\nWhen using a lambda, it will receive two arguments: ``n`` is the iteration number, and ``f`` is an instance of ``faker``:\n\n.. code-block:: python\n\n    user = factory.make(\n        'auth.User',\n        fields={\n            'username': lambda n, f: 'user_{}'.format(n),\n        }\n    )\n\n\nYou can create multiple objects by using the ``quantity`` parameter:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.make('app.Model', quantity=4)\n\nFor convenience, when the value of a field is a string, it will be interpolated with the iteration number:\n\n.. code-block:: python\n\n    user = factory.make(\n        'auth.User',\n        fields={\n            'username': 'user_{}',\n        },\n        quantity=4\n    )\n\nLazies\n------\n\nYou can refer to the created instance's own attributes or method by using `Lazy` objects.\n\nFor example, if you'd like to create user with email as username, and have them always match, you could do:\n\n.. code-block:: python\n\n    from django_fakery import factory, Lazy\n\n    factory.make(\n        'auth.User',\n        fields={\n            'username': Lazy('email'),\n        }\n    )\n\n\nIf you want to assign a value returned by a method on the instance, you can pass the method's arguments to the ``Lazy`` object:\n\n.. code-block:: python\n\n    from django_fakery import factory, Lazy\n\n    factory.make(\n        'myapp.Model',\n        fields={\n            'myfield': Lazy('model_method', 'argument', keyword='keyword value'),\n        }\n    )\n\nForeign keys\n------------\n\nNon-nullable ``ForeignKey``s create related objects automatically.\n\nIf you want to explicitly create a related object, you can pass it to the ``fields`` like any other value:\n\n.. code-block:: python\n\n    pizza = factory.make(\n        'food.Pizza',\n        fields={\n            'chef': factory.make('auth.User', fields={'username': 'Gusteau'}),\n        }\n    )\n\nManyToManies\n------------\n\nBecause ``ManyToManyField``s are implicitly nullable (ie: they're always allowed to have their ``.count()`` equal to ``0``), related objects on those fields are not automatically created for you.\n\nIf you want to explicitly create a related objects, you can pass a list to the ``fields`` like any other value:\n\n.. code-block:: python\n\n    pizza = factory.make(\n        'food.Pizza',\n        fields={\n            'toppings': [factory.make('food.Tooping', fields={'name': 'Anchovies'})],\n        }\n    )\n\nYou can also pass a factory, to create multiple objects:\n\n.. code-block:: python\n\n    pizza = factory.make(\n        'food.Pizza',\n        fields={\n            'toppings': factory.make('food.Tooping', quantity=5),\n        }\n    )\n\nLazies\n------\n\nYou can refer to the created instance's own attributes or method by using `Lazy` objects.\n\nFor example, if you'd like to create user with email as username, and have them always match, you could do:\n\n.. code-block:: python\n\n    from django_fakery import factory, Lazy\n\n    factory.make(\n        'auth.User',\n        fields={\n            'username': Lazy('email'),\n        }\n    )\n\n\nIf you want to assign a value returned by a method on the instance, you can pass the method's arguments to the ``Lazy`` object:\n\n.. code-block:: python\n\n    from django_fakery import factory, Lazy\n\n    factory.make(\n        'myapp.Model',\n        fields={\n            'myfield': Lazy('model_method', 'argument', keyword='keyword value'),\n        }\n    )\n\n\nPre-save and Post-save hooks\n----------------------------\n\nYou can define functions to be called right before the instance is saved or right after:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.make(\n        'auth.User',\n        fields={\n            'username': 'username',\n        },\n        pre_save=[\n            lambda i: i.set_password('password')\n        ]\n    )\n\n\n\nSince settings a user's password is such a common case, we special-cased that scenario, so you can just pass it as a field:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.make(\n        'auth.User',\n        fields={\n            'username': 'username',\n            'password': 'password',\n        }\n    )\n\n\nBlueprints\n----------\n\nUse a blueprint:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    user = factory.blueprint('auth.User')\n\n    user.make(quantity=10)\n\nBlueprints can refer other blueprints:\n\n.. code-block:: python\n\n    pizza = factory.blueprint(\n        'food.Pizza',\n        fields={\n            'chef': user,\n        }\n    )\n\nSeeding the faker\n-----------------\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.make('auth.User', fields={\n        'username': 'regularuser_{}'\n    }, seed=1234, quantity=4)\n\n\nCredits\n-------\n\nThe API is heavily inspired by `model_mommy`_.\n\n.. _model_mommy: https://github.com/vandersonmota/model_mommy\n\nLicense\n-------\n\nThis software is released under the MIT License.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fcurella/django-fakery/",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-fakery",
    "package_url": "https://pypi.org/project/django-fakery/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-fakery/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/fcurella/django-fakery/"
    },
    "release_url": "https://pypi.org/project/django-fakery/1.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A model instances generator for Django",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17178972,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9743edc1119b51a209bef9bad0bd1d84ed5c1fab8d3b03516721c7dfa23d023",
        "md5": "3a7b4066b161ea7cd7ce986846a4d474",
        "sha256": "35452cac4150f6d7aa17ed8ce99ca0e4b6d2521a756c79ae03168e4cad053788"
      },
      "downloads": -1,
      "filename": "django_fakery-1.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a7b4066b161ea7cd7ce986846a4d474",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 12146,
      "upload_time": "2015-10-31T19:25:08",
      "upload_time_iso_8601": "2015-10-31T19:25:08.092357Z",
      "url": "https://files.pythonhosted.org/packages/c9/74/3edc1119b51a209bef9bad0bd1d84ed5c1fab8d3b03516721c7dfa23d023/django_fakery-1.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7769405ef77585a90081fa929b80159a409af3fdad89e295c4ab605055028db9",
        "md5": "589fa4dbcea9c39348257f61d98c2ab0",
        "sha256": "8c1c546650bb161d3f5c8bb06e6412c4b5a0235329dc84a41280d4fb71164d91"
      },
      "downloads": -1,
      "filename": "django-fakery-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "589fa4dbcea9c39348257f61d98c2ab0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8040,
      "upload_time": "2015-10-31T19:24:54",
      "upload_time_iso_8601": "2015-10-31T19:24:54.644155Z",
      "url": "https://files.pythonhosted.org/packages/77/69/405ef77585a90081fa929b80159a409af3fdad89e295c4ab605055028db9/django-fakery-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}