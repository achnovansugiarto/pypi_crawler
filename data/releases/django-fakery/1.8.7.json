{
  "info": {
    "author": "Flavio Curella",
    "author_email": "flavio.curella@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "Django-fakery\n=============\n\n.. image:: https://travis-ci.org/fcurella/django-fakery.svg?branch=master\n    :target: https://travis-ci.org/fcurella/django-fakery\n\n\n.. image:: https://coveralls.io/repos/fcurella/django-fakery/badge.svg?branch=master&service=github\n  :target: https://coveralls.io/github/fcurella/django-fakery?branch=master\n\nAn easy-to-use implementation of `Creation Methods`_ (aka Object Factory) for Django, backed by ``Faker``.\n\n.. _Creation Methods: http://xunitpatterns.com/Creation%20Method.html\n\n``django_fakery`` will try to guess the field's value based on the field's name and type.\n\nInstallation\n------------\n\nInstall with::\n\n    $ pip install django-fakery\n\nQuickStart\n----------\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.m('app.Model')(field='value')\n\nAlternatively, you can use a more explicit API:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.make(\n        'app.Model',\n        fields={\n            'field': 'value',\n        }\n    )\n\nWe will use the short API throught the documentation.\n\nThe value of a field can be any python object, a callable, or a lambda:\n\n.. code-block:: python\n\n    from django_fakery import factory\n    from django.utils import timezone\n\n    factory.m('app.Model')(created=timezone.now)\n\nWhen using a lambda, it will receive two arguments: ``n`` is the iteration number, and ``f`` is an instance of ``faker``:\n\n.. code-block:: python\n\n    user = factory.m('auth.User')(\n        username=lambda n, f: 'user_{}'.format(n),\n    )\n\n``django-fakery`` includes some pre-built lambdas for common needs. See shortcuts_  for more info.\n\n\nYou can create multiple objects by using the ``quantity`` parameter:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.m('app.Model', quantity=4)\n\nFor convenience, when the value of a field is a string, it will be interpolated with the iteration number:\n\n.. code-block:: python\n\n    user = factory.m('auth.User', quantity=4)(\n        username='user_{}',        \n    )\n\nForeign keys\n------------\n\nNon-nullable ``ForeignKey`` s create related objects automatically.\n\nIf you want to explicitly create a related object, you can pass a factory like any other value:\n\n.. code-block:: python\n\n    pizza = factory.m('food.Pizza')(\n        chef=factory.m('auth.User)(username='Gusteau'),\n    )\n\nManyToManies\n------------\n\nBecause ``ManyToManyField`` s are implicitly nullable (ie: they're always allowed to have their ``.count()`` equal to ``0``), related objects on those fields are not automatically created for you.\n\nIf you want to explicitly create a related objects, you can pass a list as the field's value:\n\n.. code-block:: python\n\n    pizza = factory.m('food.Pizza')(\n        toppings=[\n            factory.m('food.Topping')(name='Anchovies')\n        ],\n    )\n\nYou can also pass a factory, to create multiple objects:\n\n.. code-block:: python\n\n    pizza = factory.m('food.Pizza')(\n        toppings=factory.m('food.Topping', quantity=5),\n    )\n\n.. _shortcuts:\n\nShortcuts\n---------\n\n``django-fakery`` includes some shortcut functions to generate commonly needed values.\n\n\n``future_datetime(end='+30d')``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns a ``datetime`` object in the future (that is, 1 second from now) up to the specified ``end``. ``end`` can be a string, anotther datetime, or a timedelta. If it's a string, it must start with `+`, followed by and integer and a unit, Eg: ``'+30d'``. Defaults to ``'+30d'``\n\nValid units are:\n\n* ``'years'``, ``'y'``\n* ``'weeks'``, ``'w'``\n* ``'days'``, ``'d'``\n* ``'hours'``, ``'hours'``\n* ``'minutes'``, ``'m'``\n* ``'seconds'``, ``'s'``\n\nExample::\n\n    from django_fakery import factory, shortcuts\n    factory.m('app.Model')(field=shortcuts.future_datetime('+1w'))\n\n\n``future_date(end='+30d')``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns a ``date`` object in the future (that is, 1 day from now) up to the specified ``end``. ``end`` can be a string, another date, or a timedelta. If it's a string, it must start with `+`, followed by and integer and a unit, Eg: ``'+30d'``. Defaults to ``'+30d'``\n\n``past_datetime(start='-30d')``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns a ``datetime`` object in the past between 1 second ago and the specified ``start``. ``start`` can be a string, another datetime, or a timedelta. If it's a string, it must start with `-`, followed by and integer and a unit, Eg: ``'-30d'``. Defaults to ``'-30d'``\n\n``past_date(start='-30d')``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns a ``date`` object in the past between 1 day ago and the specified ``start``. ``start`` can be a string, another date, or a timedelta. If it's a string, it must start with `-`, followed by and integer and a unit, Eg: ``'-30d'``. Defaults to ``'-30d'``\n\n\nLazies\n------\n\nYou can refer to the created instance's own attributes or method by using `Lazy` objects.\n\nFor example, if you'd like to create user with email as username, and have them always match, you could do:\n\n.. code-block:: python\n\n    from django_fakery import factory, Lazy\n\n    factory.m('auth.User')(\n        username=Lazy('email'),\n    )\n\n\nIf you want to assign a value returned by a method on the instance, you can pass the method's arguments to the ``Lazy`` object:\n\n.. code-block:: python\n\n    from django_fakery import factory, Lazy\n\n    factory.m('myapp.Model')(\n        myfield=Lazy('model_method', 'argument', keyword='keyword value'),\n    )\n\nPre-save and Post-save hooks\n----------------------------\n\nYou can define functions to be called right before the instance is saved or right after:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.m(\n        'auth.User',\n        pre_save=[\n            lambda u: u.set_password('password')\n        ],\n    )(username='username')\n\nSince settings a user's password is such a common case, we special-cased that scenario, so you can just pass it as a field:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.m('auth.User')(\n        username='username',\n        password='password',\n    )\n\nGet or Make\n-----------\n\nYou can check for existance of a model instance and create it if necessary by using the ``g_m`` (short for ``get_or_make``) method:\n\n.. code-block:: python\n\n    myinstance, created = factory.g_m(\n        'myapp.Model',\n        lookup={\n            'myfield': 'myvalue',\n        }\n    )(myotherfield='somevalue')\n\nIf you're looking for a more explicit API, you can use the ``.get_or_make()`` method:\n\n.. code-block:: python\n\n    myinstance, created = factory.get_or_make(\n        'myapp.Model',\n        lookup={\n            'myfield': 'myvalue',\n        },\n        fields={\n            'myotherfield': 'somevalue',\n        },\n    )\n\nNon persistent instances\n------------------------\n\nYou can build instances that are not saved to the database by using the ``.b()`` method, just like you'd use ``.m()``:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.b('app.Model')(\n        field='value',\n    )\n\nNote that since the instance is not saved to the database, ``.build()`` does not support ManyToManies or post-save hooks.\n\nIf you're looking for a more explicit API, you can use the ``.build()`` method:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.build(\n        'app.Model',\n        fields={\n            'field': 'value',\n        }\n    )\n\n\nBlueprints\n----------\n\nUse a blueprint:\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    user = factory.blueprint('auth.User')\n\n    user.make(quantity=10)\n\nBlueprints can refer other blueprints:\n\n.. code-block:: python\n\n    pizza = factory.blueprint('food.Pizza').fields(\n            chef=user,\n        )\n    )\n\nYou can also override the field values you previously specified:\n\n.. code-block:: python\n\n    pizza = factory.blueprint('food.Pizza').fields(\n            chef=user,\n            thickness=1\n        )\n    )\n\n    pizza.m(quantity=10)(thickness=2)\n\nOr, if you'd rather use the explicit api:\n\n.. code-block:: python\n\n    pizza = factory.blueprint('food.Pizza').fields(\n            chef=user,\n            thickness=1\n        )\n    )\n\n    thicker_pizza = pizza.fields(thickness=2)\n    thicker_pizza.make(quantity=10)\n\n\nSeeding the faker\n-----------------\n\n.. code-block:: python\n\n    from django_fakery import factory\n\n    factory.m('auth.User', seed=1234, quantity=4)(\n        username='regularuser_{}'\n    )\n\nCredits\n-------\n\nThe API is heavily inspired by `model_mommy`_.\n\n.. _model_mommy: https://github.com/vandersonmota/model_mommy\n\nLicense\n-------\n\nThis software is released under the MIT License.\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fcurella/django-fakery/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fakery",
    "package_url": "https://pypi.org/project/django-fakery/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-fakery/",
    "project_urls": {
      "Homepage": "https://github.com/fcurella/django-fakery/"
    },
    "release_url": "https://pypi.org/project/django-fakery/1.8.7/",
    "requires_dist": [
      "Faker (<0.9.0,>=0.8.0)",
      "Django (>=1.8)",
      "django-autoslug (==1.9.3)",
      "six (>=1.10.0)"
    ],
    "requires_python": "",
    "summary": "A model instances generator for Django",
    "version": "1.8.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17178972,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25390e540160335c6e1f12ace80fda101fea2c839866d24e97804524fa68501f",
        "md5": "44f3ec51e37a439ca6b385dc33cbc4be",
        "sha256": "a73c5e08ab795451bd5890ec77003653d548f43dcc18057efdd0357707305bf4"
      },
      "downloads": -1,
      "filename": "django_fakery-1.8.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "44f3ec51e37a439ca6b385dc33cbc4be",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16736,
      "upload_time": "2018-01-26T18:51:31",
      "upload_time_iso_8601": "2018-01-26T18:51:31.314986Z",
      "url": "https://files.pythonhosted.org/packages/25/39/0e540160335c6e1f12ace80fda101fea2c839866d24e97804524fa68501f/django_fakery-1.8.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7abc70724101f239060f2173f1c3884ac87f6e63bcfd2130f23b23b26b4ffcd1",
        "md5": "32a3226e6164fba2315b1f9872937045",
        "sha256": "4207583d6dba0d61cdc9a73bdeec89bc8b6f0058271a856e37dd4bdf8457260d"
      },
      "downloads": -1,
      "filename": "django-fakery-1.8.7.tar.gz",
      "has_sig": false,
      "md5_digest": "32a3226e6164fba2315b1f9872937045",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12578,
      "upload_time": "2018-01-26T18:51:33",
      "upload_time_iso_8601": "2018-01-26T18:51:33.848506Z",
      "url": "https://files.pythonhosted.org/packages/7a/bc/70724101f239060f2173f1c3884ac87f6e63bcfd2130f23b23b26b4ffcd1/django-fakery-1.8.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}