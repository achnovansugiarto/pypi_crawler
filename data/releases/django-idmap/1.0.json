{
  "info": {
    "author": "Thomas Khyn",
    "author_email": "thomas@ksytek.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Database",
      "Topic :: Software Development"
    ],
    "description": "django-idmap\n============\n\n|copyright| 2014-2017 Thomas Khyn\n|copyright| 2009 David Cramer\n\nAn identity mapper for the Django ORM. This is a fork of django-idmapper_,\nwhich is no longer maintained.\n\n``django-idmap`` has been tested against django 1.8 and 1.9 and the latest\nminor versions of Python (2.7 and 3.5). Using it with django versions older\nthan 1.8 is possible only with `version 0.3.3`_.\n\nIf you like ``django-idmap`` and are looking for a way to thank me and/or\nencourage future development, you can send a few mBTC at this Bitcoin address:\n``1EwENyR8RV6tMc1hsLTkPURtn5wJgaBfG9``.\n\n\nWhat is it?\n-----------\n\n``django-idmap`` is a Django application which:\n\n- loads only once the instances in memory the first time they are needed\n- shares them throughout your interpreter until the request is finished\n\nIndeed, the default Django behavior is to expose different instances for the\nsame database entry between the start and the end of the request. It has one\nmain consequence: the temporary attributes you may set are lost if you want\nto access the same database object in another place in your code.\n\n.. warning::\n\n   Deserialization (such as from the cache) will *not* use the identity mapper.\n\nTested with django 1.8+ and latest minor versions of python 2 and 3.\n\nInstallation\n------------\n\nAs straightforward as it can be, using pip::\n\n   pip install django-idmap\n\nYou also need to add ``'idmap'`` to the ``INSTALLED_APPS`` setting.\n\n\nQuick start\n-----------\n\nTo enable the identity mapper for a model, you simply need to make it inherit\nfrom ``idmap.models.IdMapModel`` instead of ``django.db.models.Model``.\n\n.. tip::\n\n   You can import ``idmap.models`` as you would import ``django.db.models``.\n   ``idmap.models`` exposes all that is exposed by ``django.db.models`` plus\n   the ``IdMapModel`` model class.\n\nYou may of course mix and match ``IdMapModel`` and ``Model``::\n\n    from idmap import models\n\n    class MyModel(models.IdMapModel):\n        name = models.CharField(...)\n        fkey = models.ForeignKey('Other')\n\n    class Other(models.Model):\n        name = models.CharField(...)\n\n2 caching modes are available:\n\n- Weak references mode: the instance will be removed from the cache once there\n  are no more references to it. This is the default behavior\n- Strong references mode: the instance will be loaded only once from the\n  database and will be removed from the cache when it is flushed\n\nIf you want to use strong references for a particular model, simply set\n``use_strong_refs`` to ``True`` in the derived model class::\n\n   from idmap import models\n\n   class MyModel(models.IdMapModel):\n      class Meta:\n         use_strong_refs = True\n      [...]\n\n\nManual operations\n-----------------\n\nIn most cases, that's all there is to do with ``django-idmap``. Sometimes, you\nmay need to flush the cache manually before the request is finished.\n\nYou can use:\n\n- ``idmap.flush()`` to erase the whole cache\n- ``IdMapModel.flush_instance_cache()`` to erase the cache for one model\n- ``IdMapModel.flush_cached_instance(instance)`` to erase one instance\n  from the cache\n\nSignals\n-------\n\n``idmap.signals.pre_flush`` and ``idmap.signals.post_flush`` are sent before -\nrespectively after - the cache is flushed. Connect handlers to these if you\nneed to run code at these moments.\n\n.. warning:\n\n   ``pre_flush`` and ``post_flush`` are only sent when the ``flush`` function\n   is used or when the cache is automatically flushed (when the request ends).\n\n\n``django-idmap`` flushes the cache when the ``request_finished`` or\n``post_migrate`` signal are sent. This default behavior may be modified (at\nyour own risk!) by disconnecting the ``idmap.signals.flush_idmap`` handler\nfrom these signals.\n\n\nMultiple database support\n-------------------------\n\nIn some cases, you may need to store instances of the same model in several\ndatabases. It is possible to tell ``django-idmap`` to also take the database\ninto account when creating or getting instances::\n\n   class MyModel(models.IdMapModel):\n      class Meta:\n         multi_db = True\n      [...]\n\nThis way, ``instance1_1`` with primary key ``1`` in database ``db1`` will be\ndifferent from ``instance2_1`` with primary key ``1`` in database ``db2``::\n\n   >>> MyModel.objects.using('db1').create(pk=1)\n   >>> MyModel.objects.using('db2').create(pk=1)\n   >>> idmap.flush()\n   >>> instance1_1 = MyModel.objects.using('db1').get(pk=1)\n   >>> instance2_1 = MyModel.objects.using('db2').get(pk=1)\n   >>> assert instance1_1 is instance 2_1\n   AssertionError\n\nWhen using multiple databases, you may also flush only one database by\nproviding its name to ``idmap.flush()``::\n\n   >>> idmap.flush('db1')\n\nwill only flush instances that were retrieved using the database ``db1``.\n``IdMapModel.flush_instance_cache`` can also take a ``db`` argument.\n\nSimilarly, a keyword-argument ``db`` is provided when the ``pre_flush`` and\n``post_flush`` signals are sent. ``db`` is ``None`` if all databases are\nflushed (i.e. if no database alias was provided).\n\n\nProxy models\n------------\n\nAll instances of models and proxy models using the same base concrete class\n(let's call this a proxy family) are stored in the same cache, and are\naccessible through all the members of the proxy family::\n\n   >>> class MyProxyModel(MyModel):\n   >>>     class Meta:\n   >>>         proxy = True\n   >>> original = MyModel.objects.create(pk=1)\n   >>> proxy = MyProxyModel.objects.create(pk=2)\n   >>> assert original is MyProxyModel.get(pk=1)\n\n\nInheritance catch-ups\n---------------------\n\nIn case you need to use a custom manager or custom metaclass on a model based\non ``IdMapModel``, you need to derive them from ``idmap``'s own manager and\nmetaclass::\n\n   >>> class MyModelBase(models.IdMapModelBase):\n   >>>     [...]\n   >>> class MyManager(models.IdMapManager):\n   >>>     [...]\n   >>> class MyModel(models.IdMapModel,\n                     metaclass=MyModelBase): # on python 3\n   >>>     __metaclass__ = MyModelBase  # on python 2\n   >>>     objects = MyManager()\n\n\nReferences\n----------\n\nDavid Cramer's django-idmapper_\n\nOriginal code and concept: http://code.djangoproject.com/ticket/17\n\n.. |copyright| unicode:: 0xA9\n.. _django-idmapper: https://github.com/dcramer/django-idmapper\n.. _`version 0.3.3`: https://pypi.python.org/pypi/django-idmap/0.3.3\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/tkhyn/django-idmap",
    "keywords": "django",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-idmap",
    "package_url": "https://pypi.org/project/django-idmap/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-idmap/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/tkhyn/django-idmap"
    },
    "release_url": "https://pypi.org/project/django-idmap/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An identity mapper for the Django ORM",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3399107,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0be9d9293c4b83e95d5904889883483a52b680c78cba724ca34d2dca9b37e89a",
        "md5": "3ec25fcc50a4580a60b0352938862d09",
        "sha256": "39308238363070ecfa9bb83179dacf63ab9a8f43e2b86885fd61b3c3a4ac6b61"
      },
      "downloads": -1,
      "filename": "django-idmap-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3ec25fcc50a4580a60b0352938862d09",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12621,
      "upload_time": "2017-05-21T13:48:02",
      "upload_time_iso_8601": "2017-05-21T13:48:02.128069Z",
      "url": "https://files.pythonhosted.org/packages/0b/e9/d9293c4b83e95d5904889883483a52b680c78cba724ca34d2dca9b37e89a/django-idmap-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}