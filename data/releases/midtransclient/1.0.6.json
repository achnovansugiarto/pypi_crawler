{
  "info": {
    "author": "Rizda Prasetya",
    "author_email": "rizda.prasetya@midtrans.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Midtrans Client - Python\n===============\n\n[![Build Status](https://travis-ci.org/rizdaprasetya/midtrans-python-client.svg?branch=master)](https://travis-ci.org/rizdaprasetya/midtrans-python-client)\n\nMidtrans ‚ù§Ô∏è Python! üêç\n\nThis is the Official Python API client/library for Midtrans Payment API. Visit [https://midtrans.com](https://midtrans.com). More information about the product and see documentation at [http://docs.midtrans.com](http://docs.midtrans) for more technical details.\n\n## 1. Installation\n\n### 1.a Using Pip\n\n```\npip install midtransclient\n```\n\n### 1.b Manual Installation\n\nIf you are not using Pip, you can clone or [download](https://github.com/midtrans/midtrans-python-client/archive/master.zip) this repository.\nThen import from `midtransclient` folder.\n\nOr run Pip install from the repo folder.\n```\npip install .\n```\n\n## 2. Usage\n\n### 2.1 Choose Product/Method\n\nWe have [2 different products](https://docs.midtrans.com/en/welcome/index.html) of payment that you can use:\n- [Snap](#22A-snap) - Customizable payment popup will appear on **your web/app** (no redirection). [doc ref](https://snap-docs.midtrans.com/)\n- [Snap Redirect](#22B-snap-redirect) - Customer need to be redirected to payment url **hosted by midtrans**. [doc ref](https://snap-docs.midtrans.com/)\n- [Core API (VT-Direct)](#22C-core-api-vt-direct) - Basic backend implementation, you can customize the frontend embedded on **your web/app** as you like (no redirection). [doc ref](https://api-docs.midtrans.com/)\n\nChoose one that you think best for your unique needs.\n\n### 2.2 Client Initialization and Configuration\n\nGet your client key and server key from [Midtrans Dashboard](https://dashboard.midtrans.com)\n\nCreate API client object\n\n```python\n# Create Core API instance\ncore_api = midtransclient.CoreApi(\n    is_production=False,\n    server_key='YOUR_SERVER_KEY',\n    client_key='YOUR_CLIENT_KEY'\n)\n```\n\n\n```python\n# Create Snap API instance\nsnap = midtransclient.Snap(\n    is_production=False,\n    server_key='YOUR_SERVER_KEY',\n    client_key='YOUR_CLIENT_KEY'\n)\n```\n\nYou can also re-set config using `Snap.api_config.set( ... )`\nexample:\n\n```python\n\n# initialize object, empty config\nsnap = midtransclient.Snap()\n\n# re-set full config\nsnap.api_config.set(\n    is_production=False,\n    server_key='YOUR_SERVER_KEY',\n    client_key='YOUR_CLIENT_KEY'\n)\n\n# re-set server_key only\nsnap.api_config.set(server_key='YOUR_SERVER_KEY')\n\n# re-set is_production only\nsnap.api_config.set(is_production=True)\n```\n\nYou can also set config directly from attribute\n```python\n# initialize object, empty config\nsnap = midtransclient.Snap()\n\n# set config\nsnap.api_config.is_production=False\nsnap.api_config.server_key='YOUR_SERVER_KEY'\nsnap.api_config.client='YOUR_CLIENT_KEY'\n```\n\n\n### 2.2.A Snap\nYou can see Snap example [here](examples/snap).\n\nAvailable methods for `Snap` class\n```python\n# return Snap API /transaction response as Dictionary\ndef create_transactions(parameter):\n\n# return Snap API /transaction token as String\ndef create_transactions_token(parameter):\n\n# return Snap API /transaction redirect_url as String\ndef create_transactions_redirect_url(parameter):\n```\n`parameter` is Dictionary or String of JSON of [SNAP Parameter](https://snap-docs.midtrans.com/#json-objects)\n\n\n#### Get Snap Token\n\n```python\n# Create Snap API instance\nsnap = midtransclient.Snap(\n    is_production=False,\n    server_key='YOUR_SERVER_KEY',\n    client_key='YOUR_CLIENT_KEY'\n)\n# Build API parameter\nparam = {\n    \"transaction_details\": {\n        \"order_id\": \"test-transaction-123\",\n        \"gross_amount\": 200000\n    }, \"credit_card\":{\n        \"secure\" : True\n    }\n}\n\ntransaction = snap.create_transaction(param)\n\ntransaction_token = transaction['token']\n# alternative way to create transaction_token:\n# transaction_token = snap.create_transaction_token(param)\n```\n\n\n#### Initialize Snap JS when customer click pay button\n\nReplace `PUT_TRANSACTION_TOKEN_HERE` with `transaction_token` acquired above\n```html\n<html>\n  <body>\n    <button id=\"pay-button\">Pay!</button>\n    <pre><div id=\"result-json\">JSON result will appear here after payment:<br></div></pre> \n\n<!-- TODO: Remove \".sandbox\" from script src URL for production environment. Also input your client key in \"data-client-key\" -->\n    <script src=\"https://app.sandbox.midtrans.com/snap/snap.js\" data-client-key=\"<Set your ClientKey here>\"></script>\n    <script type=\"text/javascript\">\n      document.getElementById('pay-button').onclick = function(){\n        // SnapToken acquired from previous step\n        snap.pay('PUT_TRANSACTION_TOKEN_HERE', {\n          // Optional\n          onSuccess: function(result){\n            /* You may add your own js here, this is just example */ document.getElementById('result-json').innerHTML += JSON.stringify(result, null, 2);\n          },\n          // Optional\n          onPending: function(result){\n            /* You may add your own js here, this is just example */ document.getElementById('result-json').innerHTML += JSON.stringify(result, null, 2);\n          },\n          // Optional\n          onError: function(result){\n            /* You may add your own js here, this is just example */ document.getElementById('result-json').innerHTML += JSON.stringify(result, null, 2);\n          }\n        });\n      };\n    </script>\n  </body>\n</html>\n```\n\n#### Implement Notification Handler\n[Refer to this section](#23-handle-http-notification)\n\n### 2.2.B Snap Redirect\n\nAlso available as examples [here](examples/snap).\n\n#### Get Redirection URL of a Payment Page\n\n```python\n# Create Snap API instance\nsnap = midtransclient.Snap(\n    is_production=False,\n    server_key='YOUR_SERVER_KEY',\n    client_key='YOUR_CLIENT_KEY'\n)\n# Build API parameter\nparam = {\n    \"transaction_details\": {\n        \"order_id\": \"test-transaction-123\",\n        \"gross_amount\": 200000\n    }, \"credit_card\":{\n        \"secure\" : True\n    }\n}\n\ntransaction = snap.create_transaction(param)\n\ntransaction_redirect_url = transaction['redirect_url']\n# alternative way to create redirect_url:\n# transaction_redirect_url = snap.create_redirect_url(param)\n```\n#### Implement Notification Handler\n[Refer to this section](#23-handle-http-notification)\n\n### 2.2.C Core API (VT-Direct)\n\nYou can see some Core API examples [here](examples/core_api).\n\nAvailable methods for `CoreApi` class\n```python\ndef charge(self,parameters=dict()):\n    \"\"\"\n    Trigger `/charge` API call to Core API\n    :param parameters: dictionary of Core API JSON body as parameter, will be converted to JSON\n    (more params detail refer to: https://api-docs.midtrans.com)\n\n    :return: Dictionary from JSON decoded response\n    \"\"\"\n\ndef capture(self,parameters=dict()):\n    \"\"\"\n    Trigger `/capture` API call to Core API\n    Capture is only used for pre-authorize transaction only\n    :param parameters: dictionary of Core API JSON body as parameter, will be converted to JSON\n    (more params detail refer to: https://api-docs.midtrans.com)\n\n    :return: Dictionary from JSON decoded response\n    \"\"\"\n\ndef card_register(self,parameters=dict()):\n    \"\"\"\n    Trigger `/card/register` API call to Core API\n    :param parameters: dictionary of Core API JSON body as parameter, will be converted to JSON\n    (more params detail refer to: https://api-docs.midtrans.com)\n\n    :return: Dictionary from JSON decoded response\n    \"\"\"\n\ndef card_token(self,parameters=dict()):\n    \"\"\"\n    Trigger `/token` API call to Core API\n    :param parameters: dictionary of Core API JSON body as parameter, will be converted to JSON\n    (more params detail refer to: https://api-docs.midtrans.com)\n\n    :return: Dictionary from JSON decoded response\n    \"\"\"\n\ndef card_point_inquiry(self,token_id):\n    \"\"\"\n    Trigger `/point_inquiry/<token-id>` API call to Core API\n    :param parameters: dictionary of Core API JSON body as parameter, will be converted to JSON\n    (more params detail refer to: https://api-docs.midtrans.com)\n\n    :return: Dictionary from JSON decoded response\n    \"\"\"\n```\n`parameter` is Dictionary or String of JSON of [Core API Parameter](https://api-docs.midtrans.com/#json-objects)\n\n#### Credit Card Get Token\n\nGet token should be handled on  Frontend please refer to [API docs](https://api-docs.midtrans.com)\n\n#### Credit Card Charge\n\n```python\n# Create Core API instance\ncore_api = midtransclient.Snap(\n    is_production=False,\n    server_key='YOUR_SERVER_KEY',\n    client_key='YOUR_CLIENT_KEY'\n)\n# Build API parameter\nparam = {\n    \"payment_type\": \"credit_card\",\n    \"transaction_details\": {\n        \"gross_amount\": 12145,\n        \"order_id\": \"test-transaction-54321\",\n    },\n    \"credit_card\":{\n        \"token_id\": 'CREDIT_CARD_TOKEN' # change with your card token\n    }\n}\n\n# charge transaction\ncharge_response = core_api.charge(param)\nprint('charge_response:')\nprint(charge_response)\n```\n\n\n### 2.3 Handle HTTP Notification\n\nCreate separated web endpoint (notification url) to receive HTTP POST notification callback/webhook. \nHTTP notification will be sent whenever transaction status is changed.\nExample also available [here](examples/transaction_actions/notification_example.py)\n\n```python\n# Create Core API / Snap instance (both have shared `transactions` methods)\napi_client = midtransclient.CoreApi(\n    is_production=False,\n    server_key='YOUR_SERVER_KEY',\n    client_key='YOUR_CLIENT_KEY'\n)\nstatus_response = api_client.transactions.notification(mock_notification)\n\norder_id = status_response['order_id']\ntransaction_status = status_response['transaction_status']\nfraud_status = status_response['fraud_status']\n\nprint('Transaction notification received. Order ID: {0}. Transaction status: {1}. Fraud status: {3}'.format(order_id,\n    transaction_status,\n    fraud_status))\n\n# Sample transaction_status handling logic\n\nif transaction_status == 'capture':\n  if fraud_status == 'challenge':\n    # TODO set transaction status on your databaase to 'challenge'\n  else if fraud_status == 'accept':\n    # TODO set transaction status on your databaase to 'success'\nelse if transaction_status == 'cancel' or \n  transaction_status == 'deny' or \n  transaction_status == 'expire':\n  # TODO set transaction status on your databaase to 'failure'\nelse if transaction_status == 'pending':\n  # TODO set transaction status on your databaase to 'pending' / waiting payment\n```\n\n### 2.4 Transaction Action\nAlso available as examples [here](examples/transaction_actions)\n#### Get Status\n```python\n# get status of transaction that already recorded on midtrans (already `charge`-ed) \nstatus_response = api_client.transactions.status('YOUR_ORDER_ID OR TRANSACTION_ID')\n```\n#### Get Status B2B\n```python\n# get transaction status of VA b2b transaction\nstatusb2b_response = api_client.transactions.statusb2b('YOUR_ORDER_ID OR TRANSACTION_ID')\n```\n#### Approve Transaction\n```python\n# approve a credit card transaction with `challenge` fraud status\napprove_response = api_client.transactions.approve('YOUR_ORDER_ID OR TRANSACTION_ID')\n```\n#### Deny Transaction\n```python\n# deny a credit card transaction with `challenge` fraud status\ndeny_response = api_client.transactions.deny('YOUR_ORDER_ID OR TRANSACTION_ID')\n```\n#### Cancel Transaction\n```python\n# cancel a credit card transaction or pending transaction\ncancel_response = api_client.transactions.cancel('YOUR_ORDER_ID OR TRANSACTION_ID')\n```\n#### Expire Transaction\n```python\n# expire a pending transaction\nexpire_response = api_client.transactions.expire('YOUR_ORDER_ID OR TRANSACTION_ID')\n```\n#### Refund Transaction\n```python\n# refund a transaction (not all payment channel allow refund via API)\nparam = {\n    \"amount\": 5000,\n    \"reason\": \"Item out of stock\"\n}\nrefund_response = api_client.transactions.refund('YOUR_ORDER_ID OR TRANSACTION_ID',param)\n```\n\n## 3. Examples\nExamples are available on [/examples](/examples) folder.\nThere are:\n- [Core Api examples](/examples/core_api)\n- [Snap examples](/examples/snap_api)\n- [Flask App examples](/examples/flask_app) that implement Snap & Core Api\n\n#### Get help\n\n* [Midtrans Docs](https://docs.midtrans.com)\n* [Midtrans Dashboard ](https://dashboard.midtrans.com/)\n* [SNAP documentation](http://snap-docs.midtrans.com)\n* [Core API documentation](http://api-docs.midtrans.com)\n* Can't find answer you looking for? email to [support@midtrans.com](mailto:support@midtrans.com)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/midtrans/midtrans-python-client/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "midtransclient",
    "package_url": "https://pypi.org/project/midtransclient/",
    "platform": "",
    "project_url": "https://pypi.org/project/midtransclient/",
    "project_urls": {
      "Homepage": "https://github.com/midtrans/midtrans-python-client/"
    },
    "release_url": "https://pypi.org/project/midtransclient/1.0.6/",
    "requires_dist": [
      "requests (>=2.3.0)"
    ],
    "requires_python": ">=2.7",
    "summary": "Official Midtrans Payment API Client",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13213448,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57679026025f545d2f647c5d85c607a1fc30c12023d67b1c6c4c518ed948f552",
        "md5": "024dca49b35fba81b147a2045c8807b6",
        "sha256": "79ce95ecfaf252da6d06758050dadf6f78b2feaf4288cf783e8701c5d5a0c98e"
      },
      "downloads": -1,
      "filename": "midtransclient-1.0.6-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "024dca49b35fba81b147a2045c8807b6",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": ">=2.7",
      "size": 14856,
      "upload_time": "2018-11-05T05:35:52",
      "upload_time_iso_8601": "2018-11-05T05:35:52.066913Z",
      "url": "https://files.pythonhosted.org/packages/57/67/9026025f545d2f647c5d85c607a1fc30c12023d67b1c6c4c518ed948f552/midtransclient-1.0.6-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9dabf6d500e0a47c1c337d660c8c82cf66a1a026e4288f563572d4847ed8c1e",
        "md5": "829a5b159da0807d9cd625020b255bbd",
        "sha256": "a916cf21a1403b710149623069d63b13b9aed1231d5a635d364998d41b7706d6"
      },
      "downloads": -1,
      "filename": "midtransclient-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "829a5b159da0807d9cd625020b255bbd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 11101,
      "upload_time": "2018-11-05T05:35:57",
      "upload_time_iso_8601": "2018-11-05T05:35:57.998484Z",
      "url": "https://files.pythonhosted.org/packages/d9/da/bf6d500e0a47c1c337d660c8c82cf66a1a026e4288f563572d4847ed8c1e/midtransclient-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}