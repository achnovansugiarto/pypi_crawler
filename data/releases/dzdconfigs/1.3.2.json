{
  "info": {
    "author": "TB",
    "author_email": "tim.bleimehl@helmholtz-muenchen.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Configs\n\nConfigs is a helper class to manage config and .env files over different environments,instances,test scenarios and so on\n\n## Install\n\npip3 install DZDConfigs\n\n### Dev\n\npip3 install git+https://git.connect.dzd-ev.de/dzdpythonmodules/configs.git\n\n## How to use\n\n\n| **tl;tr**: You can see a full working example in [Configs/smoketest](Configs/smoketest) |\n| --- |\n \nIn short you will use Configs like this:\n\n```python\nfrom Configs import getConfig\nconfig = getConfig()\nprint(config.MY_CONFIG_VALUE)\n```\n\nThere are three possibilites to provide Configs with data.\n\n* [In python code \"config.py\"](#1-a-configpy-file)\n* [In one or more .env files](#2-env-files)\n* [In Environment variables](#3-os-environment-variables)\n\nIn future version there will be yaml and json files supported as well\n\n### 1 : A config.py file\n\nHere you can register values that are controlling your business logic\n\n./config.py:\n```python\nfrom Configs import ConfigBase\n\n#define different classes per environment\n\nclass DEFAULT(ConfigBase):\n    # Always create a DEFAULT class and use it as the base class for other environments classes\n\n    # DEFAULT must have all config variables / class attributes that are used in the other classes\n    MY_CONFIG_VALUE=1\n    MY_CONFIG_VALUE_B=1\n\n# All following config classes inherit from DEFAULT\nclass PRODUCTION(DEFAULT):\n    MY_CONFIG_VALUE=2\n\nclass DEVELOPMENT(DEFAULT):\n    MY_CONFIG_VALUE=2\n```\n\n### 2 : .env files\n\nHere you can register values you dont want to have in a repo (like passwords) or describe connections to external systems (like database hostnames)\n\n⚠ Environment variables need to have the prefix \"**CONFIGS_**\" in order to be parsed by Configs\n\n./env/DEFAULT.env:\n```\nCONFIGS_MYDB_HOST='LOCALHOST'\n```\n\n./env/PRODUCTION.env:\n```\nCONFIGS_MYDB_HOST='THE_PROD_DBHOSTMACHINE.NETWORK.INTERNAL'\n```\n\n⚠ These values will be set as OS environment variable after the getConfig was called.\n\n### 3 : OS environment variables\n\nSimilar like option 2 you can set OS environment variables that do not belong in your repo (like credentials, hostnames etc)\n\n⚠ Environment variables need to have the prefix \"**CONFIGS_**\" in order to be parsed by Configs\n\nThis is convenient for use with docker (see https://docs.docker.com/compose/environment-variables/ and https://docs.docker.com/engine/reference/commandline/run/ see \"--env , -e\")\n\ne.g.\n\n`>>> docker run -e CONFIGS_APP_PATH=\"/mypath/isstrong\" me/mypythonapp` \n\nWill populate the variable `APP_PATH` in your python code running in your container\n\n```python\nfrom Configs import getConfig\nconfig = getConfig()\nprint(config.APP_PATH)\n```\n\nThis will output `/mypath/isstrong`\n\n## How to use the config instance\n\n./main.py:\n```python\nimport os\n# For examples purposes we set an OS environment variables from python\nos.environ[\"CONFIGS_ANOTHER_ENV_VAR\"] = \"ANOTHER_VALUE\"\n\nfrom Configs import getConfig\n\n# get the config instance\nconfig = getConfig()\n\n# the config variables declared in the classes\nprint(config.MY_CONFIG_VALUE)\n# a config variable from the .env-file vars\nprint(config.MYDB_HOST)\n# a config value from the environment variable we set above\nprint(config.ANOTHER_ENV_VAR)\n# prints: ANOTHER_VALUE\n```\n\n### Switch between configurations\n\nTo switch the environment set the envrionemt variable `ENV`. In this example we switch to `PRODUCTION`\n\n**Docker**\n\n`docker run -e ENV=\"PRODUCTION\"`\n\n**Linux**\n\n`export ENV=\"PRODUCTION\"`\n\n**Windows**\n\n`setx ENV=\"PRODUCTION\"`\n\n**Python**\n\nFor testing purposes you can switch the environemt also from python itself\n\n```python\nimport os\nos.environ[\"ENV\"] = \"PRODUCTION\"\n```\n\n### Keep my envs out of the repo!\n\nRegister following pattern in your .gitignore file to prevent you hostnames and passwords landing in git repository\n\n./gitignore:\n```\n[...]\n.env\n!*/env/DEFAULT.env\n[...]\n```\n\n### ⚠️ What else to notice?\n\n**Types**\n\nEvery variable in config.py can have more complex types like custom classes, functions, instances\n\n.env files and environmet variables can only contain following types\n\n* int\n* string\n* boolean\n* json (which will be represent as python dicts)\n\n\n**Who is overriding who**\n\nWhat happens when multiple sources have the same variable name?\n\nFor example in your DEFAULT.env:\n```\nCONFIGS_MY_HAPPY_OVERRIDE=\"ENVFILEVAL\"\n```\nand in your config.py is the same var\n\n```\nclass DEFAULT(ConfigBase):\n    MY_HAPPY_OVERRIDE = \"CONFFILEVAL\"\n``` \n\n```python\nfrom Configs import getConfig\nconfig = getConfig()\nprint(config.MY_HAPPY_OVERRIDE)\n```\nThis will output `ENVFILEVAL`\n\nEnv file values will always override config.py values.\n\nAnd OS env values will override env file values\n\nIf you want env file vars to override allready existing system environment variables you can set the `getConfig()` parameter `env_file_vars_override_system_env_var` to `True`\n\n\n```python\ngetConfig(env_file_vars_override_system_env_vars=True)\n```\n\nThis is helpfull for testing purposes, when switching the environment on the fly (see [Configs/smoketest/main.py](Configs/smoketest/main.py))\n\n\n## What is planned for the future\n\n**Short term**\n\n* Support yaml and json config files\n* Support set, update variables from code\n* Get meta data on variables (source, overwritten-by)\n\n**Long term**\n\n* Server-client architecure, making central configuration servers possible\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.connect.dzd-ev.de/dzdpythonmodules/configs",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DZDConfigs",
    "package_url": "https://pypi.org/project/DZDConfigs/",
    "platform": "",
    "project_url": "https://pypi.org/project/DZDConfigs/",
    "project_urls": {
      "Homepage": "https://git.connect.dzd-ev.de/dzdpythonmodules/configs"
    },
    "release_url": "https://pypi.org/project/DZDConfigs/1.3.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A tiny framework for config management in different environments. Supports configs as classes, .env files, environemt variables",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14738013,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5280cefbe882741cf13fa0704884bdf31363c5469a61dcf245fcea47960f9b5",
        "md5": "b773d9efaf50e87a0808924bfbb994c8",
        "sha256": "4e73515bec78f165b12240b5dfabe20e0ffdd42cd852dd9cc51edfd4a97f3ca1"
      },
      "downloads": -1,
      "filename": "DZDConfigs-1.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b773d9efaf50e87a0808924bfbb994c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6558,
      "upload_time": "2021-12-01T10:13:04",
      "upload_time_iso_8601": "2021-12-01T10:13:04.990778Z",
      "url": "https://files.pythonhosted.org/packages/a5/28/0cefbe882741cf13fa0704884bdf31363c5469a61dcf245fcea47960f9b5/DZDConfigs-1.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f9cd9512e0d8b4b5b530c9119a7ec49c952527bf2c9aeefbe1c7d63ad2bd637",
        "md5": "a60b12deeb7dd68bc5ef013d5183c791",
        "sha256": "1a4099fb3325874bd24644ab43845675b285d34f4f14eb7c9430e966f2729298"
      },
      "downloads": -1,
      "filename": "DZDConfigs-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a60b12deeb7dd68bc5ef013d5183c791",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8248,
      "upload_time": "2021-12-01T10:13:06",
      "upload_time_iso_8601": "2021-12-01T10:13:06.917930Z",
      "url": "https://files.pythonhosted.org/packages/9f/9c/d9512e0d8b4b5b530c9119a7ec49c952527bf2c9aeefbe1c7d63ad2bd637/DZDConfigs-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}