{
  "info": {
    "author": "Tim O'Farrell",
    "author_email": "tofarr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Marshy - Better Marshalling for Python.\n\nThis project is a general purpose externalizer for python objects.\n(Like Marshmallow or Pedantic) The guiding philosophy is convention\nover configuration, with the aim of still making customizations as\npain free as possible, based on python type hints.\n\nOut of the box, it supports primitives, dataclasses, and enums.\n\n## Installation\n\n`pip install marshy`\n\n## General Usage\n\nGiven the following dataclass:\n```\nfrom typing import List, Optional\nimport dataclasses\n\n\n@dataclasses.dataclass\nclass Doohickey:\n  title: str\n  description: Optional[str] = None\n  tags: List[str] = dataclasses.field(default_factory=list)\n```\n\nMarshall data with:\n```\nimport marshy\nresult = marshy.dump(Doohickey('Thingy', tags=['a','b']))\n# result == dict(title='Thingy', tags=['a','b'])\n```\n\nUnmarshall data with:\n```\nresult = marshy.load(Doohickey, dict(title='Thingy'))\n# result == Doohickey('Thingy', description=None, tags=[])\n```\n\n## Custom properties\n\nCustom properties are also serialized by default. (If they\nhave a setter, it is used when loading):\n\n```\n@dataclass\nclass Factorial:\n  value: int\n  \n  @property\n  def factorial(self) -> int:\n    return reduce(lambda a, b: a*b, range(1, self.value+1))\n    \nfactorial = Factorial(4)\ndumped = dump(factorial)\n# dumped == dict(value=4, factorial=24)\nloaded = load(Factorial, dumped)\n# loaded == factorial\n```\n\n## Under The Hood\n\nInternally, API defines 3 core concepts:\n\n* A [Marshaller](marshy/marshaller/marshaller_abc.py): Is \n  responsible for marshalling / unmarshalling a single type of\n  object.\n* A [MarshallerFactory](marshy/factory/marshaller_factory_abc.py): has\n  a `create` method used to create marshallers for types, and has\n  a priority which controls the order in which they are run. \n  (higher first)\n* A [MarshallerContext](marshy/marshaller_context.py): coordinates\n  the activities of Marshallers and Factories\n\n## Creating a Custom Marshaller Context\n\nIf you need multiple independent sets of rules for\nmarshalling data, then you should create your own marshalling\ncontexts and store references to them. The default works well\notherwise:\n\n```\n# Dump a Doohickey using the default context (Same as marshy.dump...)\nfrom marshy import get_default_context\ndumped = get_default_context().dump(Doohickey('Thingy'))\n\n# Create a new blank marshaller context - this will fail\n# because there are no preset types or factories.\nfrom marshy.marshaller_context import MarshallerContext\nmy_marshaller_context = MarshallerContext()\ndumped = my_marshaller_context.dump(Doohickey('Thingy'))\n\n# Create a new marshaller context which copies the default rules.\nfrom marshy.default_context import new_default_context\nmy_default_context = new_default_context()\ndumped = my_default_context.dump(Doohickey('Thingy'))\n```\n\n## Creating a Custom Marshaller\n\nTo customize marshalling for a type, write a marshaller and then\nregister it with your context:\n```\nfrom marshy.marshaller.marshaller_abc import MarshallerABC\nfrom marshy.types import ExternalType\n\n\nclass MyDoohickeyMarshaller(MarshallerABC[Doohickey]):\n\n    def __init__(self):\n        super().__init__(Doohickey)\n\n    def load(self, item: ExternalType) -> Doohickey:\n        return Doohickey(item[0], item[1], item[2])\n\n    def dump(self, item: Doohickey) -> ExternalType:\n        return [item.title, item.description, item.tags]\n\nmy_default_context.register_marshaller(MyDoohickeyMarshaller())\ndumped = my_default_context.dump(Doohickey('Thingy'))\n# dumped == ['Thingy', None, []]\n\nloaded = my_default_context.load(Doohickey, dumped)\n# dumped == Doohickey('Thingy')\n```\n\n## Creating a Custom Marshaller Factory\n\nSometimes you need to create a marshaller for a while concept of\nobject rather than a single type - In this case you need a factory,\n(this is how the default rules work!). Examples:\n* [ListMarshallerFactory](marshy/factory/list_marshaller_factory.py)\n  looks for typed lists (e.g.,: List[str]) and creates marshallers\n  for them - you already saw the results in `Doohickey.tags` above.\n* [OptionalMarshallerFactory](marshy/factory/optional_marshaller_factory.py)\n  looks for optional fields (e.g.,: Optional[str]) and creates \n  marshallers that mean each individual other marshaller does not\n  need to accommodate the case where a value is None - just mark\n  it optional!\n* [DataClassMarshallerFactory](marshy/factory/dataclass_marshaller_factory.py)\n  provides a marshaller for dataclasses assuming they have a standard\n  constructor based on their fields.\n  \n## Customizing dataclass attributes:\n\nTaking the doohickey example:\n\n```\nfrom marshy import dump, get_default_context\nfrom marshy.marshaller import str_marshaller, bool_marshaller\nfrom marshy.marshaller.obj_marshaller import ObjMarshaller\nattr_marshallers = dict(title=str_marshaller, tags=bool_marshaller)\nget_default_context().register_marshaller(ObjMarshaller(Doohickey, attr_marshallers, False))\ndumped = dump(Doohickey('Thingy'))\n# dumped == dict(title='Thingy', tags=False)\n```\n\n## Circular References\n\nDue to the fact that types in the object graph can self reference,\nwe defer resolution of most marshaller until as late as possible.\n[DeferredMarshaller](marshy/marshaller/deferred_marshaller.py) \nis responsible for this, and means types can \n[self reference](test/test_marshall_deferred.py). \n\nCircular references within objects will still cause an error.\n(Unless you decide on an error handling protocol for this an \nimplement a custom Factory to deal with it!)\n\n## Customizing the default context with an environment variable\n\nSuppose you defined the following setup function int the directory\n`/my_app/my_config.py` (Along with the `__init__.py`):\n\n```\nfrom marshy.default_context import new_default_context\n\ndef new_marshy_context():\n    context = new_default_context()\n    # context.register_marshaller( ... marshaller for some class that requires custom marshalling )\n    # context.register_factory( ... some factory for custom logic - maybe circular reference resolution? )\n    return context\n```\n\nOn startup, if the environment variable is present, Marshy will\nuse this as the default rule configuration:\n```\nMARSHY_CONTEXT=my_app.my_config.new_marshy_context\n```\n\n## Performance Tests\n\nBasic Tests show performance is approximate with marshmallow:\n\n```\npython -m timeit -s \"\nfrom test.performance.marshy_performance import run\nrun(1000)\n\"\n```\n\n```\npython -m timeit -s \"\nfrom test.performance.marshmallow_performance import run\nrun(1000)\n\"\n```\n\n\n## Building The Project\n\nYou need an account on pypi before this will work:\n\n```\npip install setuptools wheel\npython setup.py sdist bdist_wheel\npip install twine\npython -m twine upload dist/*\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tofarr/marshy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marshy",
    "package_url": "https://pypi.org/project/marshy/",
    "platform": "",
    "project_url": "https://pypi.org/project/marshy/",
    "project_urls": {
      "Homepage": "https://github.com/tofarr/marshy"
    },
    "release_url": "https://pypi.org/project/marshy/1.3.0/",
    "requires_dist": [
      "typing-inspect (>=0.7.1)"
    ],
    "requires_python": "",
    "summary": "A convention over configuration approach to object marshalling.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15947952,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bae10aa6a2617058132c7151a4ba78a7608a5a5b359e4024caf243103add63b",
        "md5": "797dd02c11bd3bf0df50e6312ceda877",
        "sha256": "7e888d3e447f90242b4313f60f0eb3cf14a9eb817b1f5a664b21ab8769ed56a6"
      },
      "downloads": -1,
      "filename": "marshy-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "797dd02c11bd3bf0df50e6312ceda877",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28619,
      "upload_time": "2021-10-29T21:32:06",
      "upload_time_iso_8601": "2021-10-29T21:32:06.197162Z",
      "url": "https://files.pythonhosted.org/packages/7b/ae/10aa6a2617058132c7151a4ba78a7608a5a5b359e4024caf243103add63b/marshy-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6857f2224d9da9bc6088a235a695a040cc5de6c6b3a4bd4009ae3085a2f4cda",
        "md5": "2c4acaedbac8b0e1139c24dfb1957fb2",
        "sha256": "75513af039ff7a97a8113a9cb31085ff720e98bf9fe0dbd002ff1b0c348cd816"
      },
      "downloads": -1,
      "filename": "marshy-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2c4acaedbac8b0e1139c24dfb1957fb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17015,
      "upload_time": "2021-10-29T21:32:07",
      "upload_time_iso_8601": "2021-10-29T21:32:07.808631Z",
      "url": "https://files.pythonhosted.org/packages/b6/85/7f2224d9da9bc6088a235a695a040cc5de6c6b3a4bd4009ae3085a2f4cda/marshy-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}