{
  "info": {
    "author": "Rozhkov Dmitrii",
    "author_email": "rozhkovdmitrii@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Logged based class\n\nThis distributed library distinct to be used in\n\n## Build package\n\nTo build package `dist/logged-based-class-1.0.tar.gz`, for example, use following command:\n\n```\npython setup.py sdist\n```\n\n## Installation \n\nThen you can install package with the following:\n\n```\npip install logged-based-class-1.0.tar.gz\n```\n\n## Config file\n\nThere should be `log_cfg.json` in where you use `logged_based_class`. It can look like:\n\n```json\n{\n  \"format\": null,\n  \"colored\": true,\n  \"logged_groups\": {\n    \"log_group\": \"DEBUG\",\n    \"other_log_group\": \"DEBUG\"\n  }\n}\n```\n\n##### format\n\nYou can replace format string with your own. There also support extra logging attributes in addition to [standard ones](https://docs.python.org/3/library/logging.html#logrecord-attributes)\n\n  * class - decorated with `logged_group` class name\n  * class_id - class id set by `class_id` argument passed into constructor\n\n```\n{\n  \"format\": \"%(asctime)23s %(levelname)8s %(process)6d:%(threadName)-10s %(class)15s:%(class_id)-8s %(message)s\",\n  \"colored\": true,\n  ...\n}\n```\n\n##### colored\n\nOptional. Default - `false`. If set output well be colored\n\n##### propagation\n\nOptional. Default - `false`. If set log messages will be propagated into parent logger if that are exists\n\n##### logged_groups\n\nEach pair in this dict is definition of logging group and level related to it.\nSo it gets possible to reduce logging level for classes related to this group and decorated with `@logged_group` in appropriate way in sources\n\n\n## Using example\n\n```python\nimport threading\n\nfrom logged_groups import logged_group\n\n\n@logged_group(\"log_group\")\nclass A:\n\n    def __init__(self, **kws):\n        self.info(\"Some information, keep focused on it\")\n\n    def do_stuff(self, value: int):\n        try:\n            self._do_stuff_impl(value)\n        except BaseException as e:\n            self.error(f\"Failed to do stuff because of error: {e}\")\n\n    def _do_stuff_impl(self, value):\n        self.debug(f\"Doing stuff with value: {value}\")\n        if value > 1000:\n            raise Exception(f\"Value critically high: {value}\")\n\n        if value > 100:\n            self.warning(f\"Value higher than 100, it can be wrong: {value}\")\n\n\n@logged_group(\"other_log_group\")\nclass B:\n\n    def __init__(self):\n        self.debug(\"Spam spam spam spam spam \")\n        self.debug(\"Spam spam spam spam spam \")\n        self.debug(\"Spam spam spam spam spam \")\n        self.error(\"Spam spam spam spam spam \")\n        self.debug(\"Spam spam spam spam spam \")\n        self.debug(\"Spam spam spam spam spam \")\n        self.debug(\"Spam spam spam spam spam \")\n        self.debug(\"Spam spam spam spam spam \")\n\n\nif __name__ == \"__main__\":\n    threading.current_thread().name = \"main\"\n    a1 = A(class_id=\"1\")\n    a1.do_stuff(100)\n    a1.do_stuff(101)\n    a1.do_stuff(1001)\n\n    b = B()\n\n    a2 = A(class_id=\"2\")\n    a2.do_stuff(100)\n    a2.do_stuff(101)\n    a2.do_stuff(1001)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://rozhkovdmitrii.ru/",
    "keywords": "",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logged-groups",
    "package_url": "https://pypi.org/project/logged-groups/",
    "platform": "",
    "project_url": "https://pypi.org/project/logged-groups/",
    "project_urls": {
      "Homepage": "http://rozhkovdmitrii.ru/"
    },
    "release_url": "https://pypi.org/project/logged-groups/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Per class logging tools",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12718178,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd95a5c599af1805b7ea3e2196f77b223b966bbff212896cc33fb68c3aa24e71",
        "md5": "5cccb54e004b17ca8c7fee3c962ef908",
        "sha256": "e7bec4f8b3fcc5c9fb34683cae97d83d526c01c498b5fcc756f1f826fd4b6bb2"
      },
      "downloads": -1,
      "filename": "logged-groups-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5cccb54e004b17ca8c7fee3c962ef908",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16000,
      "upload_time": "2021-12-28T11:02:27",
      "upload_time_iso_8601": "2021-12-28T11:02:27.854556Z",
      "url": "https://files.pythonhosted.org/packages/dd/95/a5c599af1805b7ea3e2196f77b223b966bbff212896cc33fb68c3aa24e71/logged-groups-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}