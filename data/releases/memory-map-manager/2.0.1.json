{
  "info": {
    "author": "Kevin Weiss",
    "author_email": "kevin.weiss@haw-hamburg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "# `memory_map_manager`\n\nThe Memory Map Manager (MMM) generates code and documentation for embedded\ndevice parameters intended for external interfaces.\n\n## Motivation\n\nEmbedded systems typically run on constrained systems, providing some sort\nof access to more powerful machines. A number of parameters can be read (such as\na temperature from a sensor) or written (such as the intended state of a light).\nThese amount of parameters and complexity can grow and change over the\ndevelopment cycle of the device. Every parameter needs to not only be available\nin the embedded device but also all the external interfaces as well.\nIf this information is not coordinated it can lead to human error and extra\ndevelopment time. There are solutions available that helps with that, however,\nthey typically don't operate under the asymmetric nature of embedded vs host\ncomputer capabilities or end of being very complex requiring large stacks in\norder to use.\n\n## Solution\n\nThe MMM generates simple C code that allows both named parameter access via\ntypedef structs and byte offset access. Decoding of these parameters are done\non the host, taking advantage of asymmetric computational resources of host vs.\ndevice. The embedded device only needs to expose a way to read or write an\noffset and size.\n\n## Installation\n\n_As this is a \"console application\" one can use a `venv` or `pipx` instead of pip._\n\nStable versions can be installed with:\n```\npip install memory-map-manager\n```\n\n## Generating with the MMM\n\nInstalling the package comes with a console command `mmm-gen`.\n\n```\nusage: mmm-gen [-h] [--cfg-path CFG_PATH] [--clean]\n               [--loglevel {debug,info,warning,error,fatal,critical}]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --cfg-path CFG_PATH, -p CFG_PATH\n                        the path to the memory map manager configuration importer.\n  --clean, -C           clean the generated directories before generation. be careful!\n  --loglevel {debug,info,warning,error,fatal,critical}\n                        python logger log level, defaults to \"info\"\n```\n\nThere are a number of examples available coming with the generation\nconfigurations and the map configurations.\n\nTo run the minimal example run:\n```\nmmm-gen -p examples/minimal/main.yaml\n```\n\nThis generates C files, csv files, and the configuration outputs.\n\n## Writing a Custom Map\n\nAlong with the examples of maps there are schemas available that document the\ncapabilities.\n\nThere are two files that are needed:\n- a [generation configuration](memory_map_manager/data/mm_gen_cfg.json) that\nspecifies generation information such as input configuration files and output directories. The default file is assumed to be `main.yaml`\n- a [map configuration](memory_map_manager/data/mm_map_cfg.json) that specifies\nthe parameters in the map.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/riot-appstore/memory_map_manager",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memory-map-manager",
    "package_url": "https://pypi.org/project/memory-map-manager/",
    "platform": "any",
    "project_url": "https://pypi.org/project/memory-map-manager/",
    "project_urls": {
      "Homepage": "https://github.com/riot-appstore/memory_map_manager"
    },
    "release_url": "https://pypi.org/project/memory-map-manager/2.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "C code generator that unifies interfaces for memory maps",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15772393,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2eefcd24102f7dae05264a8aa2285ea6e0b0d9331b263c752b8c793f5dc759b8",
        "md5": "b8bf398374532d20426740e23e16daaa",
        "sha256": "288b339ed5b52a45dedccd7722bb20c25850f22c8b13e4c316ca99d844362d01"
      },
      "downloads": -1,
      "filename": "memory_map_manager-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b8bf398374532d20426740e23e16daaa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 59381,
      "upload_time": "2022-11-15T08:48:46",
      "upload_time_iso_8601": "2022-11-15T08:48:46.882028Z",
      "url": "https://files.pythonhosted.org/packages/2e/ef/cd24102f7dae05264a8aa2285ea6e0b0d9331b263c752b8c793f5dc759b8/memory_map_manager-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}