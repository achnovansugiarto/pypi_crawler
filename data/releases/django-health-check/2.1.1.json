{
  "info": {
    "author": "Kristian Ollegaard",
    "author_email": "kristian@oellegaard.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "===================\ndjango-health-check\n===================\n\n|version| |ci| |coverage| |health| |license|\n\nThis project checks the health for a number of backends and sees if they are able\nto connect and do a simple action.\n\n.. code:: python\n\n    plugin_dir.register(DjangoDatabaseBackend)\n\nInstall\n-------\n\nAdd this to urls.py\n\n.. code:: python\n\n    url(r'^ht/$', include('health_check.urls'))\n\nAdd required apps:\n\n.. code:: python\n\n        'health_check',  # required\n        'health_check.db',\n        'health_check.cache',\n        'health_check.storage',\n        'health_check.contrib.celery',\n        'health_check.contrib.s3boto_storage',\n\n.. Note:: Not that you will need a result backend configured for celery.\n\nSet up monitoring\n-----------------\n\nYou can use tools like Pingdom_ or other uptime robots.\nThe ``/ht/`` endpoint will respond a HTTP 200 if all checks passed\nand a HTTP 500 if any of the tests failed.\n\nWriting a custom health check\n-----------------------------\n\nWriting a health check:\n\n.. code:: python\n\n    class MyHealthCheckBackend(BaseHealthCheckBackend):\n        def check_status(self):\n            # The test code goes here.\n            # You can use `self.add_error` or raise a\n            # `HealthCheckException`. Similar to Django's form validation.\n            pass\n\n        def identifier(self):\n            return self.__class__.__name__  # Display name on the endpoint.\n\nRegister the backend in your app configuration:\n\n.. code:: python\n\n    from django.apps import AppConfig\n\n    from health_check.plugins import plugin_dir\n\n\n    class MyAppConfig(AppConfig):\n        name = 'my_app'\n\n        def ready(self):\n            from .backends import MyHealthCheckBackend\n            plugin_dir.register(MyHealthCheckBackend)\n\n\n.. |version| image:: https://img.shields.io/pypi/v/django-health-check.svg\n   :target: https://pypi.python.org/pypi/django-health-check/\n.. |ci| image:: https://api.travis-ci.org/KristianOellegaard/django-health-check.svg?branch=master\n   :target: https://travis-ci.org/KristianOellegaard/django-health-check\n.. |coverage| image:: https://coveralls.io/repos/KristianOellegaard/django-health-check/badge.svg?branch=master\n   :target: https://coveralls.io/r/KristianOellegaard/django-health-check\n.. |health| image:: https://landscape.io/github/KristianOellegaard/django-health-check/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/KristianOellegaard/django-health-check/master\n.. |license| image:: https://img.shields.io/badge/license-BSD-blue.svg\n   :target: LICENSE\n\n.. _Pingdom: https://www.pingdom.com/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KristianOellegaard/django-health-check",
    "keywords": "django health check monitoring",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-health-check",
    "package_url": "https://pypi.org/project/django-health-check/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-health-check/",
    "project_urls": {
      "Homepage": "https://github.com/KristianOellegaard/django-health-check"
    },
    "release_url": "https://pypi.org/project/django-health-check/2.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "a pluggable app that runs a full check on the deployment, using a number of plugins to check e.g. database, queue server, celery processes, etc.",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15510176,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f88d064c03b5ce4035a6ba8bc9f70a4e3287d51fae6dd91dd3e44ad9e515c2ec",
        "md5": "c509cfa0ee4715b283a7b79774d785c0",
        "sha256": "b6a183e9b645161330497c67ed8678840b927e7affd3710d6fae5e6ce5597296"
      },
      "downloads": -1,
      "filename": "django-health-check-2.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c509cfa0ee4715b283a7b79774d785c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9918,
      "upload_time": "2017-01-07T14:46:58",
      "upload_time_iso_8601": "2017-01-07T14:46:58.622327Z",
      "url": "https://files.pythonhosted.org/packages/f8/8d/064c03b5ce4035a6ba8bc9f70a4e3287d51fae6dd91dd3e44ad9e515c2ec/django-health-check-2.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}