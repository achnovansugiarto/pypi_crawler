{
  "info": {
    "author": "Kristian Ollegaard",
    "author_email": "kristian@oellegaard.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "License :: Public Domain",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: System :: Logging",
      "Topic :: System :: Monitoring",
      "Topic :: Utilities"
    ],
    "description": "===================\ndjango-health-check\n===================\n\n|version| |ci| |coverage| |health| |license|\n\nThis project checks the health for a number of backends and sees if they are able\nto connect and do a simple action.\n\nThe following health check backends are bundled into this project:\n\n- Cache\n- Database\n- Storage\n- AWS S3 storage\n- Celery task queue\n\nWriting your own custom health checks is also very quick and easy.\n\nWe also like contributions, so don't be afraid to make a pull request.\n\nInstallation\n------------\n\nFirst install the ``django-health-check`` package:\n\n.. code::\n\n    pip install django-health-check\n\nAdd the health checker to an URL you want to use:\n\n.. code:: python\n\n    urlpatterns = [\n        # ...\n        url(r'^ht/$', include('health_check.urls')),\n    ]\n\nAdd the ``health_check`` applications to your ``INSTALLED_APPS``:\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        # ...\n        'health_check',                             # required\n        'health_check.db',                          # stock Django health checkers\n        'health_check.cache',\n        'health_check.storage',\n        'health_check.contrib.celery',              # requires celery\n        'health_check.contrib.s3boto_storage',      # requires boto and S3BotoStorage backend\n    ]\n\nSetting up monitoring\n---------------------\n\nYou can use tools like Pingdom_ or other uptime robots to monitor service status.\nThe ``/ht/`` endpoint will respond a HTTP 200 if all checks passed\nand a HTTP 500 if any of the tests failed.\n\n.. code::\n\n    $ curl -v -X GET -H http://www.example.com/ht/\n\n    > GET /ht/ HTTP/1.1\n    > Host: www.example.com\n    > Accept: */*\n    >\n    < HTTP/1.1 200 OK\n    < Content-Type: text/html; charset=utf-8\n\n    <!-- This is an excerpt -->\n    <div class=\"container\">\n        <h1>System status</h1>\n        <table>\n            <tr>\n                <td class=\"status_1\"></td>\n                <td>CacheBackend</td>\n                <td>working</td>\n            </tr>\n            <tr>\n                <td class=\"status_1\"></td>\n                <td>DatabaseBackend</td>\n                <td>working</td>\n            </tr>\n            <tr>\n                <td class=\"status_1\"></td>\n                <td>S3BotoStorageHealthCheck</td>\n                <td>working</td>\n            </tr>\n        </table>\n    </div>\n\nGetting machine readable JSON reports\n-------------------------------------\n\nIf you want machine readable status reports you can request the ``/ht/``\nendpoint with the ``Accept`` HTTP header set to ``application/json``.\n\nThe backend will return a JSON response:\n\n.. code::\n\n    $ curl -v -X GET -H \"Accept: application/json\" http://www.example.com/ht/\n\n    > GET /ht/ HTTP/1.1\n    > Host: www.example.com\n    > Accept: application/json\n    >\n    < HTTP/1.1 200 OK\n    < Content-Type: application/json\n\n    {\n        \"CacheBackend\": \"working\",\n        \"DatabaseBackend\": \"working\",\n        \"S3BotoStorageHealthCheck\": \"working\"\n    }\n\nWriting a custom health check\n-----------------------------\n\nWriting a health check is quick and easy:\n\n.. code:: python\n\n    from health_check.backends import BaseHealthCheckBackend\n\n    class MyHealthCheckBackend(BaseHealthCheckBackend):\n        def check_status(self):\n            # The test code goes here.\n            # You can use `self.add_error` or\n            # raise a `HealthCheckException`,\n            # similar to Django's form validation.\n            pass\n\n        def identifier(self):\n            return self.__class__.__name__  # Display name on the endpoint.\n\nAfter writing a custom checker, register it in your app configuration:\n\n.. code:: python\n\n    from django.apps import AppConfig\n\n    from health_check.plugins import plugin_dir\n\n    class MyAppConfig(AppConfig):\n        name = 'my_app'\n\n        def ready(self):\n            from .backends import MyHealthCheckBackend\n            plugin_dir.register(MyHealthCheckBackend)\n\nMake sure the application you write the checker into is registered in your ``INSTALLED_APPS``.\n\nCustomizing output\n------------------\n\nYou can customize HTML or JSON rendering by inheriting from ``MainView`` in ``health_check.views``\nand customizing the ``template_name``, ``get``, ``render_to_response`` and ``render_to_response_json`` properties:\n\n.. code:: python\n\n    # views.py\n    from health_check.views import MainView\n\n    class HealthCheckCustomView(MainView):\n        template_name = 'myapp/health_check_dashboard.html'  # customize the used templates\n\n        def get(self, request, *args, **kwargs):\n            plugins = []\n            # ...\n            if 'application/json' in request.META.get('HTTP_ACCEPT', ''):\n                return self.render_to_response_json(plugins, status)\n            return self.render_to_response(plugins, status)\n\n        def render_to_response(self, plugins, status):       # customize HTML output\n            return HttpResponse('COOL' if status == 200 else 'SWEATY', status=status)\n\n        def render_to_response_json(self, plugins, status):  # customize JSON output\n            return JsonResponse(\n                {str(p.identifier()): 'COOL' if status == 200 else 'SWEATY' for p in plugins}\n                status=status\n            )\n\n    # urls.py\n    import views\n\n    urlpatterns = [\n        # ...\n        url(r'^ht/$', views.HealthCheckCustomView.as_view(), name='health_check_custom')),\n    ]\n\nOther resources\n---------------\n\n- django-watchman_ is a package that does some of the same things in a slightly different way.\n- See this weblog_ about configuring Django and health checking with AWS Elastic Load Balancer.\n\n.. |version| image:: https://img.shields.io/pypi/v/django-health-check.svg\n   :target: https://pypi.python.org/pypi/django-health-check/\n.. |ci| image:: https://api.travis-ci.org/KristianOellegaard/django-health-check.svg?branch=master\n   :target: https://travis-ci.org/KristianOellegaard/django-health-check\n.. |coverage| image:: https://coveralls.io/repos/KristianOellegaard/django-health-check/badge.svg?branch=master\n   :target: https://coveralls.io/r/KristianOellegaard/django-health-check\n.. |health| image:: https://landscape.io/github/KristianOellegaard/django-health-check/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/KristianOellegaard/django-health-check/master\n.. |license| image:: https://img.shields.io/badge/license-BSD-blue.svg\n   :target: LICENSE\n\n.. _Pingdom: https://www.pingdom.com/\n.. _django-watchman: https://github.com/mwarkentin/django-watchman\n.. _weblog: https://www.vincit.fi/en/blog/deploying-django-to-elastic-beanstalk-with-https-redirects-and-functional-health-checks/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KristianOellegaard/django-health-check",
    "keywords": "django health check monitoring",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-health-check",
    "package_url": "https://pypi.org/project/django-health-check/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-health-check/",
    "project_urls": {
      "Homepage": "https://github.com/KristianOellegaard/django-health-check"
    },
    "release_url": "https://pypi.org/project/django-health-check/2.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "a pluggable app that runs a full check on the deployment, using a number of plugins to check e.g. database, queue server, celery processes, etc.",
    "version": "2.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15510176,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b38ba4bbd01c243f78018fbcee9e1e2dcfd291a8d4210eb9daa86f585f7e7f3",
        "md5": "6e358a352a7100f42663c6d7a2bed47a",
        "sha256": "0e5667f5481aaa0499d354f4d049d12af3c000d8a48972dfaedf5c8ac776d3fc"
      },
      "downloads": -1,
      "filename": "django-health-check-2.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6e358a352a7100f42663c6d7a2bed47a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19439,
      "upload_time": "2017-03-27T08:02:56",
      "upload_time_iso_8601": "2017-03-27T08:02:56.987971Z",
      "url": "https://files.pythonhosted.org/packages/8b/38/ba4bbd01c243f78018fbcee9e1e2dcfd291a8d4210eb9daa86f585f7e7f3/django-health-check-2.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}