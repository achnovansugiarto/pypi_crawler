{
  "info": {
    "author": "Kristian Ollegaard",
    "author_email": "kristian@oellegaard.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Utilities"
    ],
    "description": "django-health-check\n===================\n\n|version| |ci| |coverage| |health| |license|\n\nThis project checks the health for a number of backends and sees if they are able\nto connect and do a simple action. For example, check out the Django ORM backend:\n\n.. code:: python\n\n    class DjangoDatabaseBackend(BaseHealthCheckBackend):\n        def check_status(self):\n            try:\n                obj = TestModel.objects.create(title=\"test\")\n                obj.title = \"newtest\"\n                obj.save()\n                obj.delete()\n                return True\n            except IntegrityError:\n                raise ServiceReturnedUnexpectedResult(\"Integrity Error\")\n            except DatabaseError:\n                raise ServiceUnavailable(\"Database error\")\n\nThe project is made using some of the same plugin code that the Django\nadmin site uses - so when you have successfully written a new plugin, you\nregister it to the pool, e.g.\n\n.. code:: python\n\n    plugin_dir.register(DjangoDatabaseBackend)\n\nInstall\n=======\n\nAdd this to urls.py\n\n.. code:: python\n\n    url(r'^ht/', include('health_check.urls'))\n\nAdd required apps:\n\n.. code:: python\n\n        'health_check',\n        'health_check_celery',\n        'health_check_db',\n        'health_check_cache',\n        'health_check_storage',\n\nRemember to add dependencies, for example ``djcelery`` for Celery. You should have\nthat already, if you have Celery running. You'll also have to make sure\nthat you have a `result backend`_ configured.\n\n.. _result backend: http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html#keeping-results\n\nIf you are using Celery 3, use the ``health_check_celery3``\napplication instead of ``health_check_celery``.\n\nSet up monitoring\n=================\n\nE.g. add to pingdom - django-health-check will return HTTP 200 if\neverything is OK and HTTP 500 if *anything* is not working.\n\nDependencies\n============\n\nDjango 1.4+\n\n.. |version| image:: https://img.shields.io/pypi/v/django-health-check.svg\n   :target: https://pypi.python.org/pypi/django-health-check/\n.. |ci| image:: https://api.travis-ci.org/KristianOellegaard/django-health-check.svg?branch=master\n   :target: https://travis-ci.org/KristianOellegaard/django-health-check\n.. |coverage| image:: https://coveralls.io/repos/KristianOellegaard/django-health-check/badge.svg?branch=master\n   :target: https://coveralls.io/r/KristianOellegaard/django-health-check\n.. |health| image:: https://landscape.io/github/KristianOellegaard/django-health-check/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/KristianOellegaard/django-health-check/master\n.. |license| image:: https://img.shields.io/badge/license-BSD-blue.svg\n   :target: LICENSE",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KristianOellegaard/django-health-check",
    "keywords": "django health check monitoring",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-health-check",
    "package_url": "https://pypi.org/project/django-health-check/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-health-check/",
    "project_urls": {
      "Homepage": "https://github.com/KristianOellegaard/django-health-check"
    },
    "release_url": "https://pypi.org/project/django-health-check/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "a pluggable app that runs a full check on the deployment, using a number of plugins to check e.g. database, queue server, celery processes, etc.",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15510176,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5978c32119d591ec00a3718099e28ba557539e79624133eafab672acb2f515e0",
        "md5": "e9ef512b901c7a1681aec8a60b140c63",
        "sha256": "3d1045c1e02e250f146a667b37627f9df2f6970e67b38d6906ea9368213186f9"
      },
      "downloads": -1,
      "filename": "django-health-check-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e9ef512b901c7a1681aec8a60b140c63",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9319,
      "upload_time": "2016-12-06T15:57:18",
      "upload_time_iso_8601": "2016-12-06T15:57:18.200017Z",
      "url": "https://files.pythonhosted.org/packages/59/78/c32119d591ec00a3718099e28ba557539e79624133eafab672acb2f515e0/django-health-check-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}