{
  "info": {
    "author": "Ian Bicking",
    "author_email": "ianb@colorstudy.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Topic :: Software Development :: Testing"
    ],
    "description": "MiniMock\r\n========\r\n\r\n.. contents:\r\n\r\nLicense & Repository\r\n--------------------\r\n\r\nMiniMock is by `Ian Bicking <http://blog.ianbicking.org>`_ with\r\nsubstantial contributions by Mike Beachy.  It is licensed under an\r\nMIT-style license.\r\n\r\n\r\nIntroduction\r\n------------\r\n\r\nminimock is a simple library for doing Mock objects with doctest.\r\nWhen using doctest, mock objects can be very simple.\r\n\r\nHere's an example of something we might test, a simple email sender::\r\n\r\n    >>> import smtplib\r\n    >>> def send_email(from_addr, to_addr, subject, body):\r\n    ...     conn = smtplib.SMTP('localhost')\r\n    ...     msg = 'To: %s\\nFrom: %s\\nSubject: %s\\n\\n%s' % (\r\n    ...         to_addr, from_addr, subject, body)\r\n    ...     conn.sendmail(from_addr, [to_addr], msg)\r\n    ...     conn.quit()\r\n\r\nNow we want to make a mock ``smtplib.SMTP`` object.  We'll have to\r\ninject our mock into the ``smtplib`` module::\r\n\r\n    >>> smtplib.SMTP = Mock('smtplib.SMTP')\r\n    >>> smtplib.SMTP.mock_returns = Mock('smtp_connection')\r\n\r\nNow we do the test::\r\n\r\n    >>> send_email('ianb@colorstudy.com', 'joe@example.com',\r\n    ...            'Hi there!', 'How is it going?')\r\n    Called smtplib.SMTP('localhost')\r\n    Called smtp_connection.sendmail(\r\n        'ianb@colorstudy.com',\r\n        ['joe@example.com'],\r\n        'To: joe@example.com\\nFrom: ianb@colorstudy.com\\nSubject: Hi there!\\n\\nHow is it going?')\r\n    Called smtp_connection.quit()\r\n\r\nVoila!  We've tested implicitly that no unexpected methods were called\r\non the object.  We've also tested the arguments that the mock object\r\ngot.  We've provided fake return calls (for the ``smtplib.SMTP()``\r\nconstructor).  These are all the core parts of a mock library.  The\r\nimplementation is simple because most of the work is done by doctest.\r\n\r\nControlling Mocks\r\n-----------------\r\n\r\nMock objects have several attributes, all of which you can set when\r\ninstantiating the object.  To avoid name collision, all the attributes\r\nstart with ``mock_``, while the constructor arguments don't.\r\n\r\n``name``:\r\n    The name of the object, used when printing out messages.  In the\r\n    example about it was ``'smtplib.SMTP'``.\r\n\r\n``returns``:\r\n    When this object is called, it will return this value.  By default\r\n    it is None.\r\n\r\n``returns_iter``:\r\n    Alternately, you can give an iterable of return results, like\r\n    ``returns_iter=[1, 2, 3]``; on each subsequent call it will return\r\n    the next value.\r\n\r\n``returns_func``:\r\n    If given, this will be called to get the return value.  In\r\n    essence, this function will be the *real* implementation of the\r\n    method.\r\n\r\n``raises``:\r\n    An exception (instance or class) that will be raised when this\r\n    object is called.\r\n\r\n``show_attrs``:\r\n    If this is true, everytime a new attribute is set on the mock\r\n    object something will be printed.  Otherwise attribute sets are\r\n    silent, and only function calls print something.\r\n\r\nSo to create an object that always raises ValueError, do::\r\n\r\n    >>> dummy_module = Mock('mylibrary')\r\n    >>> dummy_module.invalid_func.raises = ValueError\r\n\r\nCreating Mocks\r\n--------------\r\n\r\nEvery attribute of a mock object will itself be another mock object,\r\nunless you specifically set it to something else.  For instance, you\r\ncan do::\r\n\r\n    >>> from minimock import Mock\r\n    >>> dummy_module = Mock('mylibrary')\r\n    >>> dummy_module.CONSTANT = 1\r\n\r\nThen the ``CONSTANT`` value will persist.  But you can also traverse\r\nto whatever object you want, and you will get another mock object.\r\n\r\nAnother technique for creating a mock object is the ``mock(...)``\r\nfunction.  This works like::\r\n\r\n    >>> from minimock import mock\r\n    >>> import os.path\r\n    >>> mock('os.path.isfile', returns=True)\r\n\r\nThis looks up the ``os.path.isfile`` object, and changes it to a mock\r\nobject.  Any keyword arguments you give (like ``returns=True`` in this\r\nexample) will be used to create the mock object; you can also give a\r\n``mock_obj`` keyword argument to pass in a mock object you've already\r\ncreated.\r\n\r\nThis function looks in the calling function to figure out what to\r\nreplace (``os.path.isfile`` in the example).  You must import the\r\nproper modules first.  Alternately you can pass in a dictionary like\r\n``[locals(), globals()]`` for it to use for lookup.\r\n\r\nTo restore all the objects mocked with ``mock()``, use\r\n``minimock.restore()`` (with no arguments; all the mocks are kept\r\ntrack of).\r\n\r\nNews\r\n----\r\n\r\n1.0\r\n---\r\n\r\n* Fixed setting special attributes like ``mock_returns`` on\r\n  already-created Mock objects (from Toby White)\r\n\r\n* Separated out printing to a class that accepts call information\r\n  and provided an implementation that prints calls to a file.\r\n\r\n0.9\r\n---\r\n\r\n* Added ``show_attrs``\r\n\r\n0.8\r\n---\r\n\r\nFirst official release.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/MiniMock",
    "keywords": "mock testing unittest",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MiniMock",
    "package_url": "https://pypi.org/project/MiniMock/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/MiniMock/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/MiniMock"
    },
    "release_url": "https://pypi.org/project/MiniMock/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "The simplest possible mock library",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2429912,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e09544630a90579684736576f814eb7ce1d8ec6dff94a04ad424fd42d017771e",
        "md5": "8483d225dbdd0036939a663ec6de396e",
        "sha256": "1869eabe3a6f06d5b2d8b569a282e73da13e0a4a24b6be834bef644cc2b94050"
      },
      "downloads": -1,
      "filename": "MiniMock-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8483d225dbdd0036939a663ec6de396e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6625,
      "upload_time": "2008-10-17T19:41:40",
      "upload_time_iso_8601": "2008-10-17T19:41:40Z",
      "url": "https://files.pythonhosted.org/packages/e0/95/44630a90579684736576f814eb7ce1d8ec6dff94a04ad424fd42d017771e/MiniMock-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}