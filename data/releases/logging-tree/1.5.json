{
  "info": {
    "author": "Brandon Rhodes",
    "author_email": "brandon@rhodesmill.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2.3",
      "Programming Language :: Python :: 2.4",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: System :: Logging"
    ],
    "description": "Introspection for the ``logging`` logger tree in the Standard Library.\n\nYou can install this package with the standard ``pip`` command::\n\n    $ pip install logging_tree\n\nWhile you can write programs that call this package's ``tree()``\nfunction and examine the hierarchy of logger objects that it finds\ninside of the Standard Library ``logging`` module, the simplest use of\nthis package for debugging is to call ``printout()`` to print the\nloggers, filters, and handlers that your application has configured::\n\n    >>> logging.getLogger('a')\n    >>> logging.getLogger('a.b').setLevel(logging.DEBUG)\n    >>> logging.getLogger('x.c')\n    >>> from logging_tree import printout\n    >>> printout()\n    <--\"\"\n       Level WARNING\n       |\n       o<--\"a\"\n       |   Level NOTSET so inherits level WARNING\n       |   |\n       |   o<--\"a.b\"\n       |       Level DEBUG\n       |\n       o<--[x]\n           |\n           o<--\"x.c\"\n               Level NOTSET so inherits level WARNING\n\nThe logger tree should always print successfully, no matter how\ncomplicated.  A node whose ``[name]`` is in square brackets is a \"place\nholder\" that has never actually been named in a ``getLogger()`` call,\nbut was created automatically to serve as the parent of loggers further\ndown the tree.\n\nThere are several interfaces that ``logging_tree`` supports, depending\non how much detail you need.\n\n``logging_tree.printout(node=None)``\n\n    Prints the current logger tree, or the tree based at the given\n    `node`, to the standard output.\n\n``logging_tree.format.build_description(node=None)``\n\n    Builds and returns the multi-line description of the current logger\n    tree, or the tree based at the given ``node``, as a single string\n    with newlines inside and a newline at the end.\n\n``logging_tree.format.describe(node)``\n\n    A generator that yields a series of lines that describe the tree\n    based at the given ``node``.  Note that the lines are returned\n    without newline terminators attached.\n\n``logging_tree.tree()``\n\n    Fetch the current tree of loggers from the ``logging`` module.\n    Returns a node, that is simply a tuple with three fields:\n\n    | ``[0]`` the logger name (``\"\"`` for the root logger).\n    | ``[1]`` the ``logging.Logger`` object itself.\n    | ``[2]`` a list of zero or more child nodes.\n\nI owe great thanks to `Rover Apps <http://roverapps.com/>`_ for letting\nme release this general-purpose tool, whose core logic I developed while\nworking on one of their projects.  They care about the Python community!\n\nI welcome contributions and ideas as this package matures.  You can find\nthe bug tracker at the `repository page on github\n<https://github.com/brandon-rhodes/logging_tree>`_.  Developers can run\nthis package's tests with::\n\n    $ python -m unittest discover logging_tree\n\nOn older versions of Python you will instead have to install\n``unittest2`` and use its ``unit2`` command line tool to run the tests.\n\nChangelog\n---------\n\n**Version 1.5** - 2014 December 24\n    Handlers now display their logging level if one has been set, and\n    their custom logging formatter if one has been installed.\n\n**Version 1.4** - 2014 January 8\n    Thanks to a contribution from Dave Brondsema, disabled loggers are\n    now actually marked as \"Disabled\" to make it less of a surprise that\n    they fail to log anything.\n\n**Version 1.3** - 2013 October 29\n    Be explicit and display the logger level ``NOTSET`` along with the\n    effective level inherited from the logger's ancestors; and display\n    the list of ``.filters`` of a custom logging handler even though it\n    might contain custom code that ignores them.\n\n**Version 1.2** - 2013 January 19\n    Compatible with Python 3.3 thanks to @ralphbean.\n\n**Version 1.1** - 2012 February 17\n    Now compatible with 2.3 <= Python <= 3.2.\n\n**Version 1.0** - 2012 February 13\n    Can display the handler inside a MemoryHandler; entire public\n    interface documented; 100% test coverage.\n\n**Version 0.6** - 2012 February 10\n    Added a display format for every ``logging.handlers`` class.\n\n**Version 0.5** - 2012 February 8\n    Initial release.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brandon-rhodes/logging_tree",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "logging_tree",
    "package_url": "https://pypi.org/project/logging_tree/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/logging_tree/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/brandon-rhodes/logging_tree"
    },
    "release_url": "https://pypi.org/project/logging_tree/1.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Introspect and display the logger tree inside \"logging\"",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10025382,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7973bb6dabb02580c277004a8ef8dbec1d21527675cd23e1da16109701674c2",
        "md5": "209ab116c6b2c83995b50100435f5416",
        "sha256": "5ee15b23bc67cbc02805c9f82216ba1f52f41c0e28f0571017e1fab790359e5b"
      },
      "downloads": -1,
      "filename": "logging_tree-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "209ab116c6b2c83995b50100435f5416",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7403,
      "upload_time": "2014-12-24T21:27:59",
      "upload_time_iso_8601": "2014-12-24T21:27:59.346568Z",
      "url": "https://files.pythonhosted.org/packages/a7/97/3bb6dabb02580c277004a8ef8dbec1d21527675cd23e1da16109701674c2/logging_tree-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}