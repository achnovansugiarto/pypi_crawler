{
  "info": {
    "author": "Brandon Rhodes",
    "author_email": "brandon@rhodesmill.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2.3",
      "Programming Language :: Python :: 2.4",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: System :: Logging"
    ],
    "description": "Introspection for the ``logging`` logger tree in the Standard Library.\n\nYou can install this package with the standard ``pip`` command::\n\n    $ pip install logging_tree\n\nWhile you can write programs that call this package's ``tree()``\nfunction and examine the hierarchy of logger objects that it finds\ninside of the Standard Library ``logging`` module, the simplest use of\nthis package for debugging is to call ``printout()`` to print the\nloggers, filters, and handlers that your application has configured::\n\n    >>> logging.getLogger('a')\n    >>> logging.getLogger('a.b').setLevel(logging.DEBUG)\n    >>> logging.getLogger('x.c')\n    >>> from logging_tree import printout\n    >>> printout()\n    <--\"\"\n       Level WARNING\n       |\n       o<--\"a\"\n       |   Level NOTSET so inherits level WARNING\n       |   |\n       |   o<--\"a.b\"\n       |       Level DEBUG\n       |\n       o<--[x]\n           |\n           o<--\"x.c\"\n               Level NOTSET so inherits level WARNING\n\nThe logger tree should always print successfully, no matter how\ncomplicated.  A node whose ``[name]`` is in square brackets is a \"place\nholder\" that has never actually been named in a ``getLogger()`` call,\nbut was created automatically to serve as the parent of loggers further\ndown the tree.\n\nThere are several interfaces that ``logging_tree`` supports, depending\non how much detail you need.\n\n``logging_tree.printout(node=None)``\n\n    Prints the current logger tree, or the tree based at the given\n    `node`, to the standard output.\n\n``logging_tree.format.build_description(node=None)``\n\n    Builds and returns the multi-line description of the current logger\n    tree, or the tree based at the given ``node``, as a single string\n    with newlines inside and a newline at the end.\n\n``logging_tree.format.describe(node)``\n\n    A generator that yields a series of lines that describe the tree\n    based at the given ``node``.  Note that the lines are returned\n    without newline terminators attached.\n\n``logging_tree.tree()``\n\n    Fetch the current tree of loggers from the ``logging`` module.\n    Returns a node, that is simply a tuple with three fields:\n\n    | ``[0]`` the logger name (``\"\"`` for the root logger).\n    | ``[1]`` the ``logging.Logger`` object itself.\n    | ``[2]`` a list of zero or more child nodes.\n\nI welcome contributions and ideas as this package matures.  You can find\nthe bug tracker at the `repository page on github\n<https://github.com/brandon-rhodes/logging_tree>`_.  Developers can run\nthis package's tests with::\n\n    $ python -m unittest discover logging_tree\n\nOn older versions of Python you will instead have to install\n``unittest2`` and use its ``unit2`` command line tool to run the tests.\n\nChangelog\n---------\n\n**Version 1.8** - 2018 August 5\n    Improve the output to better explain what happens if a \"parent\"\n    attribute has been set to None.\n\n**Version 1.7** - 2016 January 23\n    Detect whether each logger has the correct \"parent\" attribute and,\n    if not, print where its log messages are being sent instead.\n\n**Version 1.6** - 2015 January 8\n    Fixed a crash that would occur if a custom logging Formatter was\n    missing its format string attributes.\n\n**Version 1.5** - 2014 December 24\n    Handlers now display their logging level if one has been set, and\n    their custom logging formatter if one has been installed.\n\n**Version 1.4** - 2014 January 8\n    Thanks to a contribution from Dave Brondsema, disabled loggers are\n    now actually marked as \"Disabled\" to make it less of a surprise that\n    they fail to log anything.\n\n**Version 1.3** - 2013 October 29\n    Be explicit and display the logger level ``NOTSET`` along with the\n    effective level inherited from the logger's ancestors; and display\n    the list of ``.filters`` of a custom logging handler even though it\n    might contain custom code that ignores them.\n\n**Version 1.2** - 2013 January 19\n    Compatible with Python 3.3 thanks to @ralphbean.\n\n**Version 1.1** - 2012 February 17\n    Now compatible with 2.3 <= Python <= 3.2.\n\n**Version 1.0** - 2012 February 13\n    Can display the handler inside a MemoryHandler; entire public\n    interface documented; 100% test coverage.\n\n**Version 0.6** - 2012 February 10\n    Added a display format for every ``logging.handlers`` class.\n\n**Version 0.5** - 2012 February 8\n    Initial release.\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brandon-rhodes/logging_tree",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logging_tree",
    "package_url": "https://pypi.org/project/logging_tree/",
    "platform": "",
    "project_url": "https://pypi.org/project/logging_tree/",
    "project_urls": {
      "Homepage": "https://github.com/brandon-rhodes/logging_tree"
    },
    "release_url": "https://pypi.org/project/logging_tree/1.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Introspect and display the logger tree inside \"logging\"",
    "version": "1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10025382,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8c2ef440ebd44b0106a3b49026e0191a78fc1bfd4daf24aaa4f68d1901b6763",
        "md5": "4b8cb66287961da96f1898f9f84170b7",
        "sha256": "668c5c364f4623e81784e6042e82fb87d9423bd291a68933c7a3c03e72f4f343"
      },
      "downloads": -1,
      "filename": "logging_tree-1.8-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4b8cb66287961da96f1898f9f84170b7",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "requires_python": null,
      "size": 11157,
      "upload_time": "2018-08-05T20:15:28",
      "upload_time_iso_8601": "2018-08-05T20:15:28.919251Z",
      "url": "https://files.pythonhosted.org/packages/c8/c2/ef440ebd44b0106a3b49026e0191a78fc1bfd4daf24aaa4f68d1901b6763/logging_tree-1.8-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d4a17b0bf13bf8d0ec7df1ec54ded2a96689e7559f0a79b269087f34455ae3b",
        "md5": "749ca9fea3bc5e2f3d3c0cf8f9bb39de",
        "sha256": "dc6cf63f2f8e7805dad32b3400fb9685c9d3cf83bd0f0e99267e426b9cf72694"
      },
      "downloads": -1,
      "filename": "logging_tree-1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "749ca9fea3bc5e2f3d3c0cf8f9bb39de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9240,
      "upload_time": "2018-08-05T20:15:27",
      "upload_time_iso_8601": "2018-08-05T20:15:27.342904Z",
      "url": "https://files.pythonhosted.org/packages/6d/4a/17b0bf13bf8d0ec7df1ec54ded2a96689e7559f0a79b269087f34455ae3b/logging_tree-1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}