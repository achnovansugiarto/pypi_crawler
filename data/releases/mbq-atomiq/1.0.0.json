{
  "info": {
    "author": "('Managed by Q, Inc.',)",
    "author_email": "open-source@managedbyq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "mbq.atomiq: database-backed queues\n==================================\n\n.. image:: https://img.shields.io/pypi/v/mbq.atomiq.svg\n    :target: https://pypi.python.org/pypi/mbq.atomiq\n\n.. image:: https://img.shields.io/pypi/l/mbq.atomiq.svg\n    :target: https://pypi.python.org/pypi/mbq.atomiq\n\n.. image:: https://img.shields.io/pypi/pyversions/mbq.atomiq.svg\n    :target: https://pypi.python.org/pypi/mbq.atomiq\n\n.. image:: https://img.shields.io/travis/managedbyq/mbq.atomiq/master.svg\n    :target: https://travis-ci.org/managedbyq/mbq.atomiq\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install mbq.atomiq\n\n\nGetting started\n---------------\n\n1. Add `mbq.atomiq` to `INSTALLED_APPS` in your django application's settings\n\n2. Add `ATOMIQ` specific settings to that same settings file. Those are used for metrics.\n\n.. code-block:: python\n\n    ATOMIQ = {\n        'env': CURRENT_ENV,\n        'service': YOUR_SERICE_NAME,\n    }\n\n3. Set up consumers for each queue type that your app needs. `mbq.atomiq` provides a handy management command for that:\n\n.. code-block:: bash\n\n    python -m manage atomic_run_consumer --queue sns\n\n    python -m manage atomic_run_consumer --queue sqs\n\n    python -m manage atomic_run_consumer --queue celery\n\nNote that atomiq will use the celery task ``name`` attribute to import and call the task. By default, celery sets the task name to be the ``path.to.task.module.task_function_name``. Overriding the name of a task will cause atomiq to break, so plz don't do this.\n\nTo make sure we're not holding on to successfully executed or deleted tasks we also have a clean up management command, that by default will clean up all processed tasks that are older than 30 days. That default can be overriden.\n\n.. code-block:: bash\n\n    python -m manage atomic_cleanup_old_tasks\n\n    or\n\n    python -m manage atomic_cleanup_old_tasks --days N\n\n    or\n\n    python -m manage atomic_cleanup_old_tasks --minutes N\n\n4. Use it!\n\n.. code-block:: python\n\n    import mbq.atomiq\n\n    mbq.atomiq.sns_publish(topic_arn, message)\n\n    mbq.atomiq.sqs_publish(queue_url, message)\n\n    mbq.atomiq.celery_publish(celery_task, *task_args, **task_kwargs)\n\nMonitoring\n----------\n<https://app.datadoghq.com/dash/895710/atomiq>\n\n\nTesting\n-------\nTests are automatically in ``Travis CI https://travis-ci.org/managedbyq/mbq.atomiq`` but you can also run tests locally using ``docker-compose``.\nWe now use `tox` for local testing across multiple python environments. Before this use ``pyenv`` to install the following python interpreters: cpython{2.7, 3.5, 3.6} and pypy3\n\n.. code-block:: bash\n\n    $ docker-compose up py36-pg|py36-mysql|py37-pg|py37-mysql\n\nTesting in Other Services\n-------------------------\nWhen using atomiq in other services, we don't want to mock out atomiq's publish functions. This is because atomiq includes functionality to check that all usages are wrapped in a transaction, and can account for transactions added by Django in test cases. To allow you to test that the tasks you expect have been added the queue, we expose a `test_utils` module.\n\n\nShipping a New Release\n----------------------\n1. Bump the version in ``__version__.py``\n2. Go to ``Releases`` in GitHub and \"Draft a New Release\"\n3. After creating a new release, Travis CI will pick up the new release and ship it to PyPi",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/managedbyq/mbq.atomiq",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "('Managed by Q, Inc.',)",
    "maintainer_email": "open-source@managedbyq.com",
    "name": "mbq.atomiq",
    "package_url": "https://pypi.org/project/mbq.atomiq/",
    "platform": "",
    "project_url": "https://pypi.org/project/mbq.atomiq/",
    "project_urls": {
      "Homepage": "https://github.com/managedbyq/mbq.atomiq"
    },
    "release_url": "https://pypi.org/project/mbq.atomiq/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MBQ Atomiq",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5898048,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b99ed8e8c53934f9f3ef455db6b651defa358352d7354b4a397039621646edd1",
        "md5": "0590e981e1e3efd13c015613eb9c0450",
        "sha256": "83ccf49d9fb3c4dd130143f7cefd82eaee9768c62162f14665b0a0eb69680211"
      },
      "downloads": -1,
      "filename": "mbq.atomiq-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0590e981e1e3efd13c015613eb9c0450",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16754,
      "upload_time": "2019-01-18T17:53:37",
      "upload_time_iso_8601": "2019-01-18T17:53:37.487476Z",
      "url": "https://files.pythonhosted.org/packages/b9/9e/d8e8c53934f9f3ef455db6b651defa358352d7354b4a397039621646edd1/mbq.atomiq-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}