{
  "info": {
    "author": "Yola",
    "author_email": "engineers@yola.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# drf-madprops [![Build Status](https://travis-ci.com/yola/drf-madprops.svg?branch=master)](https://travis-ci.com/yola/drf-madprops)\n\nDRF library of helpers to operate on lists of resource properties as dicts\n\nWritten and used by the folks at Yola to support our [free website builder][1].\n\n## Overview\n\nIt's a typical case for relational DBs when some table (e.g. User) is\nextended via subordinate key-value table (e.g. UserPreference). This allows\nto dynamically add/delete fields to User (stored in UserPreference).\nUsually those property models have very simple structures, e.g:\n\n```python\nclass UserPreference(models.Model):\n    id = models.AutoField()\n    user = models.ForeignKey(User, related_name='preferences')\n    name = models.CharField()\n    value = models.CharField)\n```\n\nBut it's not very convenient to expose/operate on them via standard DRF\nserializers.  We'll get something like:\n\n```json\n[\n    {\"id\": \"id1\", \"user\": \"user1\", \"name\": \"property1\", \"value\": \"value1\"},\n    {\"id\": \"id2\", \"user\": \"user1\", \"name\": \"property2\", \"value\": \"value2\"}\n    ...\n]\n```\n\nThis library contains two base classes for property's serializers (for cases\nwhen properties are exposed as separate resource and as nested resource) which\nallows to retrieve/operate on parent resource properties as dicts. For example,\ninstead of representation listed above, we'll get something like:\n\n```json\n{\n    \"property1\": \"value1\",\n    \"property2\": \"value2\",\n    ...\n}\n```\n\n## Usage\n\n### Additional meta options\n\n- `read_only_props`: list of property names, which values cannot be changed\n  via serializer.\n- `json_props`: list of property names, which values are stored as JSON.\n  Serializer will `json.loads()` those values when converting to representation\n  and will `json.dumps()` them before saving.\n\n### As a nested serializer\n\n```python\nfrom madprops.serializers import NestedPropertySerializer, PropertiesOwnerSerializer\n\n\nclass PreferenceSerializer(NestedPropertySerializer):\n    class Meta:\n        model = Preference\n        read_only_props = ('user_token', 'tutorial_email_sent')\n        json_props = ('packages',)\n\n\nclass UserSerializer(PropertiesOwnerSerializer):\n    preferences = PreferenceSerializer(many=True, required=False)\n```\n\n### As a serializer used for properties endpoint\n```python\nfrom madprops.serializers import PropertySerializer\n\n\nclass PreferenceSerializer(PropertySerializer):\n    class Meta:\n        model = Preference\n        read_only_props = ('user_token', 'tutorial_email_sent')\n\n\nclass PreferencePrivateViewSet(ModelViewSet):\n    serializer_class = PreferenceSerializer\n    paginate_by = None\n```\n\n## Testing\n\nRun the tests with:\n\n    tox\n\nOr install development requirements and run tests with:\n\n    pip install -r requirements.txt\n    pytest tests\n\n\n[1]:https://www.yola.com/",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yola/drf-madprops",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-madprops",
    "package_url": "https://pypi.org/project/drf-madprops/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-madprops/",
    "project_urls": {
      "Homepage": "https://github.com/yola/drf-madprops"
    },
    "release_url": "https://pypi.org/project/drf-madprops/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "DRF library to operate resource's properties as a dictionary",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9317045,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a7b67089d2673f6c65eb74a21a4dff690fec60a5fe11db50ec74571668418bf",
        "md5": "92de1688a55e33866563ee8fc1e34b2d",
        "sha256": "89af47236e6109a9b68bc236c1fc2daf6d225955d903f379c32331fcb995a29a"
      },
      "downloads": -1,
      "filename": "drf-madprops-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "92de1688a55e33866563ee8fc1e34b2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6188,
      "upload_time": "2021-02-04T11:40:23",
      "upload_time_iso_8601": "2021-02-04T11:40:23.870846Z",
      "url": "https://files.pythonhosted.org/packages/1a/7b/67089d2673f6c65eb74a21a4dff690fec60a5fe11db50ec74571668418bf/drf-madprops-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}