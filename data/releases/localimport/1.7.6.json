{
  "info": {
    "author": "Niklas Rosenstein",
    "author_email": "rosensteinniklas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Other Environment",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: Jython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "\n<img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" align=\"right\">\n<p align=\"center\">\n  <b>localimport</b> allows you to import Python modules in an</br>\n  isolated environment, preserving the global importer state.\n</p>\n\n### Features\n\n- Emulates an isolated environment for Python module imports\n- Evaluates `*.pth` files\n- Compatible with `pkg_resources` namespaces\n- Mocks `pkgutil.extend_path()` to support zipped Python eggs\n\nCheck out the [localimport Documentation](http://niklasrosenstein.github.io/python-localimport/).\n\n### Example\n\nGiven your Python script, application or plugin comes with a directory that\ncontains modules for import, you can use localimport to keep the global\nimporter state clean.\n\n```\napp.py\nres/modules/\n  some_package/\n    __init__.py\n```\n\n```python\n# app.py\nwith localimport('res/modules') as _importer:\n  import some_package\nassert 'some_package' not in sys.modules\n```\n\n> **Important**: You must keep the reference to the `localimport` object alive,\n> especially if you use `from xx import yy` imports.\n\n### Usage\n\nIn most cases it would not make sense to use `localimport` as a Python module\nwhen you actually want to import Python modules since the import of the\n`localimport` module itself would not be isolated.  \nThe solution is to use the `localimport` source code directly in your\napplication code. Usually you will use a minified version.\n\nPre-minified versions of `localimport` can be found in this [Gist][pre-minified].\nOf course you can minify the code by yourself, for example using the [nr][nr]\ncommand-line tools.\n\n    nr py.blob localimport.py -cme localimport > localimport-gzb64-w80.py\n\nDepending on your application, you may want to use a bootstrapper entry point.\n\n```python\n# @@@ minified localimport here @@@\n\nwith localimport('.') as _importer:\n  from my_application_package.__main__ import main\n  main()\n```\n\n  [pyminifier]: https://pypi.python.org/pypi/pyminifier\n  [py-blobbify]: https://pypi.python.org/pypi/py-blobbify\n  [pre-minified]: http://bitly.com/localimport-min\n  [nr]: https://github.com/NiklasRosenstein/py-nr\n\n### API\n\n#### `localimport(path, parent_dir=None, do_eggs=True, do_pth=True, do_autodisable=True)`\n\n> A context manager that creates an isolated environment for importing\n> Python modules. Once the context manager exits, the previous global\n> state is restored.\n>\n> Note that the context can be entered multiple times, but it is not recommended\n> generally as the only case where you would want to do that is inside a piece\n> of code that gets executed delayed (eg. a function) which imports a module,\n> and building the isolated environment and restoring to the previous state has\n> some performance impacts.\n>\n> Also note that the context will only remove packages on exit that have\n> actually been imported from the list of paths specified in the *path*\n> argument, but not modules from the standard library, for example.\n>\n> __Parameters__\n>\n> * *path* &ndash; A list of paths that are added to `sys.path` inside the\n>   context manager. Can also be a single string. If one or more relative\n>   paths are passed, they are treated relative to the *parent_dir* argument.\n> * *parent_dir* &ndash; A path that is concatenated with relative paths passed\n>   to the *path* argument. If this argument is omitted or `None`, it will\n>   default to the parent directory of the file that called the `localimport()`\n>   constructor (using `sys._getframe(1).f_globals['__file__']`).\n> * *do_eggs* &ndash; A boolean that indicates whether `.egg` files or\n>   directories found in the additional paths are added to `sys.path`.\n> * *do_pth* &ndash; A boolean that indicates whether `.pth` files found\n>   in the additional paths will be evaluated.\n> * *do_autodisable* &ndash; A boolean that indicates that `localimport.autodisable()`\n>   should be called automatically be the context manager.\n>\n> *Changed in 1.7* Added `do_autodisable` parameter.\n\n#### `localimport.autodisable()`\n\n> Uses `localimport.discover()` to automatically detect modules that could be\n> imported from the paths in the importer context and calls #disable on all\n> of them.\n>\n> *New in 1.7*\n\n#### `localimport.disable(modules)`\n\n\n> Disable one or more modules by moving them from the global module cache\n> (`sys.modules`) to a dictionary of temporary hidden modules in the isolated\n> environment. Once the `localimport()` context manager exits, these modules\n> will be restored. Does nothing when a module does not exist.\n>\n> __Parameters__\n>\n> * *modules* &ndash; A list of module names or a single module name string.\n\n#### `localimport.discover()`\n\n> A shorthand for `pkgutil.walk_packages(importer.path)`.\n>\n> *New in 1.7*\n\n---\n\n<p align=\"center\">Copyright &copy; 2018 Niklas Rosenstein</p>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NiklasRosenstein/localimport",
    "keywords": "import,embedded,modules,packages",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "localimport",
    "package_url": "https://pypi.org/project/localimport/",
    "platform": "",
    "project_url": "https://pypi.org/project/localimport/",
    "project_urls": {
      "Homepage": "https://github.com/NiklasRosenstein/localimport",
      "documentation": "http://niklasrosenstein.github.io/python-localimport/"
    },
    "release_url": "https://pypi.org/project/localimport/1.7.6/",
    "requires_dist": null,
    "requires_python": ">=3.6,<4.0",
    "summary": "Isolated import of Python modules.",
    "version": "1.7.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12977174,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de9af5e392b3d2ef8a8dc2b29aacc07d8c489ac4df0a11534fca7f59d3e00676",
        "md5": "6648b37717be4f39ba8e1fa32f25ebbd",
        "sha256": "bbb72fa67f911ac7960f37616b1cccee388a980b4ce05b37d5eeba2b4e952ab0"
      },
      "downloads": -1,
      "filename": "localimport-1.7.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6648b37717be4f39ba8e1fa32f25ebbd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 7820,
      "upload_time": "2022-02-23T00:41:08",
      "upload_time_iso_8601": "2022-02-23T00:41:08.579264Z",
      "url": "https://files.pythonhosted.org/packages/de/9a/f5e392b3d2ef8a8dc2b29aacc07d8c489ac4df0a11534fca7f59d3e00676/localimport-1.7.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a515769b8a2ba0ded922d1607589b4d243dccb3f9f4c17cb39a3e938834cc9a",
        "md5": "316a565542ed92b278039d0247816650",
        "sha256": "f1485a67219d37f37a53047ba4f6104768590b3dd3ac1c6bd4a381251c76f289"
      },
      "downloads": -1,
      "filename": "localimport-1.7.6.tar.gz",
      "has_sig": false,
      "md5_digest": "316a565542ed92b278039d0247816650",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 8007,
      "upload_time": "2022-02-23T00:41:10",
      "upload_time_iso_8601": "2022-02-23T00:41:10.196809Z",
      "url": "https://files.pythonhosted.org/packages/4a/51/5769b8a2ba0ded922d1607589b4d243dccb3f9f4c17cb39a3e938834cc9a/localimport-1.7.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}