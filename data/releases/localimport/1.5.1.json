{
  "info": {
    "author": "Niklas Rosenstein",
    "author_email": "rosensteinniklas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Other Environment",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: Jython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "localimport\n===========\n\nâ€“ Isolated import of Python modules\n\nFeatures\n--------\n\n-  emulates a partly isolated environment for local modules\n-  evaluates ``*.pth`` files\n-  supports ``pkg_resources`` namespaces\n-  mocks ``pkgutil.extend_path()`` to support zipped Python eggs\n\nExample\n-------\n\nGiven your Python script, application or plugin comes with a directory\nthat contains modules for import, you can use localimport to keep the\nglobal importer state clean.\n\n::\n\n    app.py\n    res/modules/\n      some_package/\n        __init__.py\n\n.. code:: python\n\n    # app.py\n    with localimport('res/modules') as _importer:\n        import some_package\n    assert 'some_package' not in sys.modules\n\n    **Note**: It is very important that you keep the reference to the\n    ``localimport`` object alive, especially if you use\n    ``from xx import yy`` imports.\n\nUse with `require <https://github.com/NiklasRosenstein/py-require>`__\n---------------------------------------------------------------------\n\nThe ``localimport`` class is defines as ``exports`` symbols, thus when\nyou ``require()`` the module, what you get is the class directly rather\nthen the module.\n\n.. code:: python\n\n    import require\n    localimport = require('./localimport')\n\n    with localimport('res/modules') as _importer:\n      # ...\n\nBuilding a minified version\n---------------------------\n\nIn many cases it doesn't make much sense to use localimport as yet\nanother Python package, thus you might want to include an inlined and\nminified version of it into your codebase. For this you can use either\n`pyminifier <https://pypi.python.org/pypi/pyminifier>`__ or\n`py-blobbify <https://pypi.python.org/pypi/py-blobbify>`__ depending on\nwhat format you want to include into your code.\n\n::\n\n    $ pyminifier localimport.py\n    $ py-blobbify localimport.py --export-symbol=localimport -mc\n\nYou can find pre-minified versions\n`here <http://bitly.com/localimport-min>`__.\n\nChangelog\n---------\n\nv1.5.1\n~~~~~~\n\n-  add Python 3 compatibility\n\nv1.5\n~~~~\n\n-  add ``setup.py``\n-  add ``make_min`` and ``make_b64`` commands to ``setup.py``\n-  fix possible error when ``localimport(parent_dir)`` parameter is not\n   specified and the ``__file__`` of the Python module that uses\n   localimport is in the current working directory\n\nv1.4.16\n~~~~~~~\n\n-  fix possible ``KeyError`` when restoring namespace module paths\n-  renamed ``_localimport`` class to ``localimport``\n-  ``localimport(parent_dir)`` parameter is now determined dynamically\n   using ``sys._getframe()``\n-  support for\n   `py-require <https://github.com/NiklasRosenstein/py-require>`__\n\nv1.4.14\n~~~~~~~\n\n-  Mockup ``pkg_resources.declare_namespace()``, making it call\n   ``pkgutil.extend_path()`` afterwards to ensure we find all available\n   namespace paths\n\nv1.4.13\n~~~~~~~\n\n-  fixed possible KeyError and AttributeError when using the\n   ``_localimport.disable()`` method\n\nv1.4.12\n~~~~~~~\n\n-  Removed auto discovering of modules importable from the local site\n-  Add ``_localimport.disable()`` method\n\nv1.4.11\n~~~~~~~\n\n-  Fixed a bug where re-using the ``_localimport`` context added local\n   modules back to ``sys.modules`` but removed them immediately (#15)\n\nv1.4.10\n~~~~~~~\n\n-  Fix #13, ``_extend_path()`` now keeps order of the paths\n-  Updat class docstrings\n-  Add ``do_eggs`` and ``do_pth`` parameters to the constructor\n-  Fix #12, add ``_discover()`` method and automatic disabling of\n   modules that could conflict with modules from the ``_localimport``\n   site\n\nv1.4.9\n~~~~~~\n\n-  Fix #11, remove ``None``-entries of namespace packages in\n   ``sys.modules``\n-  ``_localimport._extend_path()`` is is now less tolerant about\n   extending the namespace path and only does so when a\n   ``__init__.{py,pyc,pyo}`` file exists in the parsed directory\n\nv1.4.8\n~~~~~~\n\n-  Now checks any path for being a zipfile rather than just .egg files\n\nLicense\n-------\n\nThe MIT License (MIT)\n\nCopyright (c) 2015-2016 Niklas Rosenstein\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "import,embedded,modules,packages",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "localimport",
    "package_url": "https://pypi.org/project/localimport/",
    "platform": "",
    "project_url": "https://pypi.org/project/localimport/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/localimport/1.5.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Isolated import of Python Modules",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12977174,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "596f49f1d83ac9e01adf247dc9f7ad4cf978a2a4f95573d4611a981e48e9660b",
        "md5": "b3e8478991491d75ea0c38d1dc441535",
        "sha256": "08f7c3eb6161f5dfbb7db1b7d0ff9d72dd09e8612e42638384740710ec8e8ed0"
      },
      "downloads": -1,
      "filename": "localimport-1.5.1.zip",
      "has_sig": false,
      "md5_digest": "b3e8478991491d75ea0c38d1dc441535",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14425,
      "upload_time": "2017-02-20T16:25:15",
      "upload_time_iso_8601": "2017-02-20T16:25:15.554219Z",
      "url": "https://files.pythonhosted.org/packages/59/6f/49f1d83ac9e01adf247dc9f7ad4cf978a2a4f95573d4611a981e48e9660b/localimport-1.5.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}