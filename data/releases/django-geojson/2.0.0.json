{
  "info": {
    "author": "Mathieu Leplatre",
    "author_email": "mathieu.leplatre@makina-corpus.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": "*django-geojson* is a collection of helpers to serialize GeoDjango objects\ninto GeoJSON.\n\n.. image:: https://travis-ci.org/makinacorpus/django-geojson.png\n    :target: https://travis-ci.org/makinacorpus/django-geojson\n\n.. image:: https://coveralls.io/repos/makinacorpus/django-geojson/badge.png\n    :target: https://coveralls.io/r/makinacorpus/django-geojson\n\n\n=======\nINSTALL\n=======\n\n::\n\n    pip install django-geojson\n\n\nIf you need to load data from GeoJSON files (deserialize), you'll also need shapely ::\n\n    pip install \"django-geojson [shapely]\"\n\n\n=====\nUSAGE\n=====\n\nAdd ``djgeojson`` to your applications :\n\n::\n\n    # settings.py\n\n    INSTALLED_APPS += (\n        'djgeojson',\n    )\n\n*(not required for views)*\n\n\nGeoJSON layer view\n==================\n\nVery useful for web mapping :\n\n::\n\n    # urls.py\n    from djgeojson.views import GeoJSONLayerView\n    ...\n    url(r'^data.geojson$', GeoJSONLayerView.as_view(model=MushroomSpot), name='data'),\n\n\nConsume the vector layer as usual, for example, with Leaflet loaded in Ajax:\n\n::\n\n    var layer = L.geoJson();\n    map.addLayer(layer);\n    $.getJSON(\"{% url 'data' %}\", function (data) {\n        layer.addData(data);\n    });\n\n\nInherit **only** if you need a reusable set of options :\n\n::\n\n    # views.py\n    from djgeojson.views import GeoJSONLayerView\n\n    class MapLayer(GeoJSONLayerView):\n        # Options\n        precision = 4   # float\n        simplify = 0.5  # generalization\n\n\n    # urls.py\n    from .views import MapLayer, MeetingLayer\n    ...\n    url(r'^mushrooms.geojson$', MapLayer.as_view(model=MushroomSpot, fields=('name',)), name='mushrooms')\n\nMost common use-cases of sub-classing are low-fi precision, common list of fields between several views, etc.\n\nOptions are :\n\n* **properties** : ``list`` of properties names, or ``dict`` for mapping field names and properties\n* **simplify** : generalization of geometries (See ``simplify()``)\n* **precision** : number of digit after comma\n* **geometry_field** : name of geometry field (*default*: ``geom``)\n* **srid** : projection (*default*: 4326, for WGS84)\n\n\nGeoJSON template filter\n=======================\n\nMainly useful to dump features in HTML output and bypass AJAX call :\n\n::\n\n    // For example, with Leaflet\n    L.geoJson({{ object_list|geojsonfeature|safe}}).addTo(map);\n\n\nWill work either for a model, a geometry field or a queryset.\n\n::\n\n    {% load geojson_tags %}\n    \n    var feature = {{ object|geojsonfeature|safe }};\n    \n    var geom = {{ object.geom|geojsonfeature|safe }};\n\n    var collection = {{ object_list|geojsonfeature|safe }};\n\n\nBasic serializer\n================\n\n::\n\n    from djgeojson.serializers import Serializer as GeoJSONSerializer\n\n    GeoJSONSerializer().serialize(Restaurants.objects.all(), use_natural_keys=True)\n\n\n\nDump GIS models, or fixtures\n============================\n\nRegister the serializer in your project :\n\n::\n\n    # settings.py\n\n    SERIALIZATION_MODULES = {\n        'geojson' : 'djgeojson.serializers'\n    }\n\nCommand-line ``dumpdata`` can export files, viewable in GIS software like QGis :\n\n::\n\n    django dumpdata --format=geojson yourapp.Model > export.geojson\n\nWorks with ``loaddata`` as well, which can now import GeoJSON files.\n\n\n\n=======\nAUTHORS\n=======\n\n    * Mathieu Leplatre <mathieu.leplatre@makina-corpus.com>\n    * Glen Robertson author of django-geojson-tiles at: https://github.com/glenrobertson/django-geojson-tiles/\n    * @jeffkistler's author of geojson serializer at: https://gist.github.com/967274\n    * Ben Welsh and Lukasz Dziedzia for `quick test script <http://datadesk.latimes.com/posts/2012/06/test-your-django-app-with-travisci/>`_\n\nVersion 1.X:\n\n    * Daniel Sokolowski, serializer snippet\n    * ozzmo, python 2.6 compatibility\n\n|makinacom|_\n\n.. |makinacom| image:: http://depot.makina-corpus.org/public/logo.gif\n.. _makinacom:  http://www.makina-corpus.com\n\n=======\nLICENSE\n=======\n\n    * Lesser GNU Public License\n\n\n=========\nCHANGELOG\n=========\n\n2.0.0 (2013-07-09)\n==================\n\n- Complete rewrite using @jeffkistler and @glenrobertson code\n- CRS is added to GeoJSON ouput by default\n- Ability to build ``pk`` dynamically by passing a lambda\n- Ability to provide a ``bbox``\n- Ability to use Django natural keys\n- Support of *ValuesQuerySet*\n- Support of *ForeignKey* and *ManyToMany*\n- Added ``force2d`` option\n\n** Backwards incompatible changes **\n\n- Geom field is not guessed automatically : Use ``geometry_field`` option, default is ``'geom'``.\n- no more ``pk`` in properties : use feature ``id``, or list ``pk`` in properties explicitly.\n- ``fields`` list in ``GeoJSONLayer`` was renamed ``properties``.\n\n1.2.0 (2013-05-22)\n==================\n\n- Shapely is now optional (used for deserialization only)\n- Add Django to requirements\n- Skip a step in GeoJSON conversion of geometries (fixes #6)\n\n\n1.1.0 (2013-03-06)\n==================\n\n- Django 1.5 support\n- Fix template tag geojsonfeature on empty geometries\n\n1.0.0 (2012-08-03)\n==================\n\n- Initial working version.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://pypi.python.org/pypi/django-geojson/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/makinacorpus/django-geojson",
    "keywords": null,
    "license": "LPGL, see LICENSE file.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-geojson",
    "package_url": "https://pypi.org/project/django-geojson/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-geojson/",
    "project_urls": {
      "Download": "http://pypi.python.org/pypi/django-geojson/",
      "Homepage": "https://github.com/makinacorpus/django-geojson"
    },
    "release_url": "https://pypi.org/project/django-geojson/2.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Serve vectorial map layers with Django",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15434245,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c67c0a046bf68b2ac12e9a9621f1b434ca4a63270de2131c07cbf4703b0595e3",
        "md5": "8fca5a2f5203bd123597c579b45f1e40",
        "sha256": "3ef2ff7777d134d7ce988ef76f4e93c1e1e034c8cf6596253a2cf894d791be50"
      },
      "downloads": -1,
      "filename": "django-geojson-2.0.0.zip",
      "has_sig": false,
      "md5_digest": "8fca5a2f5203bd123597c579b45f1e40",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20632,
      "upload_time": "2013-07-09T07:18:11",
      "upload_time_iso_8601": "2013-07-09T07:18:11.323437Z",
      "url": "https://files.pythonhosted.org/packages/c6/7c/0a046bf68b2ac12e9a9621f1b434ca4a63270de2131c07cbf4703b0595e3/django-geojson-2.0.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}