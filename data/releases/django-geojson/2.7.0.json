{
  "info": {
    "author": "Mathieu Leplatre",
    "author_email": "mathieu.leplatre@makina-corpus.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Topic :: Utilities"
    ],
    "description": "*django-geojson* is a set of tools to manipulate GeoJSON with Django :\n\n* (De)Serializer for (Geo)Django objects, querysets and lists\n* Base views to serve GeoJSON map layers from models\n* GeoJSON model and form fields to avoid spatial database backends\n  (compatible with *django-leaflet* for map widgets)\n\n\n.. image:: https://pypip.in/v/django-geojson/badge.png\n        :target: https://pypi.python.org/pypi/django-geojson\n\n.. image:: https://pypip.in/d/django-geojson/badge.png\n        :target: https://pypi.python.org/pypi/django-geojson\n\n.. image:: https://travis-ci.org/makinacorpus/django-geojson.png?branch=master\n    :target: https://travis-ci.org/makinacorpus/django-geojson\n\n.. image:: https://coveralls.io/repos/makinacorpus/django-geojson/badge.png?branch=master\n    :target: https://coveralls.io/r/makinacorpus/django-geojson\n\n\n=======\nINSTALL\n=======\n\n::\n\n    pip install django-geojson\n\n\nThis package has **optional** `extra dependencies <http://pythonhosted.org/setuptools/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies>`_.\n\n\nIf you need GeoJSON fields with map widgets :\n\n::\n\n    pip install \"django-geojson [field]\"\n\n\n=====\nUSAGE\n=====\n\nAdd ``djgeojson`` to your applications :\n\n::\n\n    # settings.py\n\n    INSTALLED_APPS += (\n        'djgeojson',\n    )\n\n*(not required for views)*\n\n\nGeoJSON layer view\n==================\n\nVery useful for web mapping :\n\n::\n\n    # urls.py\n    from djgeojson.views import GeoJSONLayerView\n    ...\n    url(r'^data.geojson$', GeoJSONLayerView.as_view(model=MushroomSpot), name='data'),\n\n\nConsume the vector layer as usual, for example, with Leaflet loaded with jQuery Ajax:\n\n::\n\n    # Leaflet JS\n    var layer = L.geoJson();\n    map.addLayer(layer);\n    $.getJSON(\"{% url 'data' %}\", function (data) {\n        layer.addData(data);\n    });\n\n\nInherit generic views **only** if you need a reusable set of options :\n\n::\n\n    # views.py\n    from djgeojson.views import GeoJSONLayerView\n\n    class MapLayer(GeoJSONLayerView):\n        # Options\n        precision = 4   # float\n        simplify = 0.5  # generalization\n\n\n    # urls.py\n    from .views import MapLayer, MeetingLayer\n    ...\n    url(r'^mushrooms.geojson$', MapLayer.as_view(model=MushroomSpot, properties=('name',)), name='mushrooms')\n\nMost common use-cases of reusable options are: low-fi precision, common list of fields between several views, etc.\n\nOptions are :\n\n* **properties** : ``list`` of properties names, or ``dict`` for mapping field names and properties\n* **simplify** : generalization of geometries (See ``simplify()``)\n* **precision** : number of digit after comma\n* **geometry_field** : name of geometry field (*default*: ``geom``)\n* **srid** : projection (*default*: 4326, for WGS84)\n* **bbox** : Allows you to set your own bounding box on feature collection level\n* **bbox_auto** : True/False (default false). Will automatically generate a bounding box on a per feature level.\n\n\n\nTiled GeoJSON layer view\n========================\n\nVectorial tiles can help display a great number of objects on the map,\nwith `reasonnable performance <https://groups.google.com/forum/?fromgroups#!searchin/leaflet-js/GeoJSON$20performance$3F$20River$20vector$20tile$20map./leaflet-js/_WJquNpdmH0/qQsasZpCTPUJ>`_.\n\n::\n\n    # urls.py\n    from djgeojson.views import TiledGeoJSONLayerView\n    ...\n\n    url(r'^data/(?P<z>\\d+)/(?P<x>\\d+)/(?P<y>\\d+).geojson$',\n        TiledGeoJSONLayerView.as_view(model=MushroomSpot), name='data'),\n\n\nConsume the vector tiles using `Leaflet TileLayer GeoJSON <https://github.com/glenrobertson/leaflet-tilelayer-geojson/>`_, `Polymaps <http://polymaps.org/>`_, `OpenLayers 3 <http://twpayne.github.io/ol3/remote-vector/examples/tile-vector.html>`_ or `d3.js <http://d3js.org>`_ for example.\n\nOptions are :\n \n* **trim_to_boundary** : if ``True`` geometries are trimmed to the tile boundary\n* **simplifications** : a dict of simplification values by zoom level\n\n\n\nGeoJSON template filter\n=======================\n\nMainly useful to dump features in HTML output and bypass AJAX call :\n\n::\n\n    // Leaflet JS\n    L.geoJson({{ object_list|geojsonfeature|safe}}).addTo(map);\n\n\nWill work either for a model, a geometry field or a queryset.\n\n::\n\n    {% load geojson_tags %}\n    \n    var feature = {{ object|geojsonfeature|safe }};\n    \n    var geom = {{ object.geom|geojsonfeature|safe }};\n\n    var collection = {{ object_list|geojsonfeature|safe }};\n\n\nProperties and custom geometry field name can be provided.\n\n::\n\n    {{ object|geojsonfeature:\"name,age\" }}\n    {{ object|geojsonfeature:\"name,age:the_geom\" }}\n    {{ object|geojsonfeature:\":geofield\" }}\n\n\nModel and forms fields\n======================\n\nGeoJSON fields are based on Brad Jasper's `JSONField <https://pypi.python.org/pypi/jsonfield>`_.\nSee `INSTALL`_ to install extra dependencies.\n\nThey are useful to avoid usual GIS stacks (GEOS, GDAL, PostGIS...)\nfor very simple use-cases (no spatial operation yet).\n\n::\n\n    from djgeojson.fields import PointField\n\n    class Address(models.Model):\n        geom = PointField()\n\n    address = Address()\n    address.geom = {'type': 'Point', 'coordinates': [0, 0]}\n    address.save()\n\n\nForm widgets are rendered with Leaflet maps automatically if\n`django-leaflet <https://github.com/makinacorpus/django-leaflet>`_\nis available.\n\nAll geometry types are supported and respectively validated :\n`GeometryField`, `PointField`, `MultiPointField`, `LineStringField`,\n`MultiLineStringField`, `PolygonField`, `MultiPolygonField`,\n`GeometryCollectionField`.\n\n\nLow-level serializer\n====================\n\n::\n\n    from djgeojson.serializers import Serializer as GeoJSONSerializer\n\n    GeoJSONSerializer().serialize(Restaurants.objects.all(), use_natural_keys=True, with_modelname=False)\n\n\n\nLow-level deserializer\n======================\n\n::\n\n    from djgeojson.serializers import Serializer as GeoJSONSerializer\n\n    GeoJSONSerializer().deserialize('geojson', my_geojson)\n\nYou can optionally specify the model name directly in the parameters:\n\n::\n\n    GeoJSONSerializer().deserialize('geojson', my_geojson, model_name=my_model_name)\n\n\n\n\nDump GIS models, or fixtures\n============================\n\nRegister the serializer in your project :\n\n::\n\n    # settings.py\n\n    SERIALIZATION_MODULES = {\n        'geojson' : 'djgeojson.serializers'\n    }\n\nCommand-line ``dumpdata`` can export files, viewable in GIS software like QGis :\n\n::\n\n    python manage.py dumpdata --format=geojson yourapp.Model > export.geojson\n\nWorks with ``loaddata`` as well, which can now import GeoJSON files.\n\n\n\n=======\nAUTHORS\n=======\n\n    * Mathieu Leplatre <mathieu.leplatre@makina-corpus.com>\n    * Glen Robertson author of django-geojson-tiles at: https://github.com/glenrobertson/django-geojson-tiles/\n    * @jeffkistler's author of geojson serializer at: https://gist.github.com/967274\n    * Ben Welsh and Lukasz Dziedzia for `quick test script <http://datadesk.latimes.com/posts/2012/06/test-your-django-app-with-travisci/>`_\n    * Florent Lebreton http://github.com/fle\n\nVersion 1.X:\n\n    * Daniel Sokolowski, serializer snippet\n    * ozzmo, python 2.6 compatibility\n\n|makinacom|_\n\n.. |makinacom| image:: http://depot.makina-corpus.org/public/logo.gif\n.. _makinacom:  http://www.makina-corpus.com\n\n=======\nLICENSE\n=======\n\n    * Lesser GNU Public License\n\n\n=========\nCHANGELOG\n=========\n\n2.7.0 (2015-02-21)\n==================\n\n** New features **\n\n- Add a with_modelname option to serializer\n\n** Bug fixes **\n\n- change 'fields' to 'properties' in code example\n- Adds a warning for \"Module version, as defined in PEP-0396\n\n\n2.6.0 (2014-07-21)\n==================\n\n** New features **\n\n- Django GeoJSON fields without libgeos installed (thanks Florent Lebreton)\n- Properties can be a tuple (fixes #34)\n\n\n2.5.0 (2014-06-03)\n==================\n\n** New features **\n\n- Add vector tiles view\n- Improved `geojsonfeature` template tag (fixes #15, #16)\n- Add various GeoJSON fields, for each geometry type\n\n** Bug fixes **\n\n- Fix (de)serializers not being usable from command-line (fixes #28)\n- Fix import attempt for *django-leaflet* (fixes #27), by Seyi Ogunyemi\n- Fix missed SRID after copying a geometry in ``_handle_geom``, by Biel Frontera\n\n** Internal changes **\n\n- Specify django-leaflet minimal version for GeoJSON model field\n- Got rid of shapely for deserialization\n\n\n2.4.0 (2014-03-22)\n==================\n\n- Add GeoJSON fields\n\n\n2.3.0 (2014-02-08)\n==================\n\n- Python 3 support (thanks @amarandon)\n- Add bbox at feature level (thanks @7wonders)\n\n\n2.2.0 (2013-12-18)\n==================\n\n- Deserialization: add ability to specify model name as option (thanks @Vross)\n- Deserialization: look-up ``Ã¬d`` value in properties whe missing at feature level: (thanks @Vross)\n\n\n2.1.1 (2013-08-21)\n==================\n\n- Set default SRID to 4326 in generic GeoJSON views.\n\n\n2.1.0 (2013-08-19)\n==================\n\n- Serialize reversed relations using natural keys (fixes #8)\n- Support empty geometries (None or NULL in Db)\n- Fix serializing property in upper class\n\n2.0.1 (2013-07-10)\n==================\n\n- Fix usage of simplify.\n- Expose ``force2d`` option in view\n- Allow to have ``pk`` or ``id`` in properties if explicitly listed\n\n2.0.0 (2013-07-09)\n==================\n\n- Complete rewrite using @jeffkistler and @glenrobertson code\n- CRS is added to GeoJSON ouput by default\n- Ability to build ``pk`` dynamically by passing a lambda\n- Ability to provide a ``bbox``\n- Ability to use Django natural keys\n- Support of *ValuesQuerySet*\n- Support of *ForeignKey* and *ManyToMany*\n- Added ``force2d`` option\n\n** Backwards incompatible changes **\n\n- Geom field is not guessed automatically : Use ``geometry_field`` option, default is ``'geom'``.\n- no more ``pk`` in properties : use feature ``id``, or list ``pk`` in properties explicitly.\n- ``fields`` list in ``GeoJSONLayer`` was renamed ``properties``.\n\n1.2.0 (2013-05-22)\n==================\n\n- Shapely is now optional (used for deserialization only)\n- Add Django to requirements\n- Skip a step in GeoJSON conversion of geometries (fixes #6)\n\n\n1.1.0 (2013-03-06)\n==================\n\n- Django 1.5 support\n- Fix template tag geojsonfeature on empty geometries\n\n1.0.0 (2012-08-03)\n==================\n\n- Initial working version.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://pypi.python.org/pypi/django-geojson/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/makinacorpus/django-geojson",
    "keywords": null,
    "license": "LPGL, see LICENSE file.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-geojson",
    "package_url": "https://pypi.org/project/django-geojson/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-geojson/",
    "project_urls": {
      "Download": "http://pypi.python.org/pypi/django-geojson/",
      "Homepage": "https://github.com/makinacorpus/django-geojson"
    },
    "release_url": "https://pypi.org/project/django-geojson/2.7.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Serve vectorial map layers with Django",
    "version": "2.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15434245,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed2236c1463b03cb6bae8ec28ba7435fd5a0744875b193d6f8f5a27d8158abfd",
        "md5": "782a34f81deb922c582c240bdfe0e4b2",
        "sha256": "b05a23218c337e3a78bc4938c652d3e35d59c561ce479d2ed36522da7836fe72"
      },
      "downloads": -1,
      "filename": "django-geojson-2.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "782a34f81deb922c582c240bdfe0e4b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20608,
      "upload_time": "2015-04-06T20:27:22",
      "upload_time_iso_8601": "2015-04-06T20:27:22.617020Z",
      "url": "https://files.pythonhosted.org/packages/ed/22/36c1463b03cb6bae8ec28ba7435fd5a0744875b193d6f8f5a27d8158abfd/django-geojson-2.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}