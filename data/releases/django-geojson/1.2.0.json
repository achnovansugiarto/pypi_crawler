{
  "info": {
    "author": "Mathieu Leplatre",
    "author_email": "mathieu.leplatre@makina-corpus.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": "*django-geojson* \n\n\n=======\nINSTALL\n=======\n\n::\n\n    pip install django-geojson\n\n\nIf you need to load data from GeoJSON files (deserialize), you'll also need shapely ::\n\n    pip install \"django-geojson [shapely]\"\n\n\n=====\nUSAGE\n=====\n\nAdd ``djgeojson`` to your applications :\n\n::\n\n    # settings.py\n\n    INSTALLED_APPS += (\n        'djgeojson',\n    )\n\n*(not required for views)*\n\nGeoJSON layer view\n==================\n\nVery useful for web mapping :\n\n::\n\n    # urls.py\n    from djgeojson.views import GeoJSONLayerView\n    ...\n    url(r'^data.geojson$', GeoJSONLayerView.as_view(model=MushroomSpot), name='data'),\n\n\nConsume the vector layer as usual, for example, with Leaflet :\n\n::\n\n    var layer = L.GeoJSON();\n    map.addLayer(layer);\n    $.getJSON(\"{% url 'data' %}\", function (data) {\n        layer.addData(data);\n    });\n\n\nInherit **only** if you need a reusable set of options :\n\n::\n\n    # views.py\n    from djgeojson.views import GeoJSONLayerView\n\n    class MapLayer(GeoJSONLayerView):\n        # Options\n        precision = 4   # float\n        simplify = 0.5  # generalization\n\n\n    # urls.py\n    from .views import MapLayer, MeetingLayer\n    ...\n    url(r'^mushrooms.geojson$', MapLayer.as_view(model=MushroomSpot, fields=('name',)), name='mushrooms')\n    \n\n\nMost common use-cases are low-fi precision, common list of fields, etc.\n\n\nGeoJSON template filter\n=======================\n\nWill work either for a model, a geometry field or a queryset.\n\n::\n\n    {% load geojson_tags %}\n    \n    var feature = {{ object|geojsonfeature }};\n    \n    var geom = {{ object.geom|geojsonfeature }};\n\n    var collection = {{ object_list|geojsonfeature }};\n\n\nDump GIS models\n===============\n\nRegister the serializer in your project :\n\n::\n\n    # settings.py\n\n    SERIALIZATION_MODULES = {\n        'geojson' : 'djgeojson.serializers'\n    }\n\nCommand-line ``dumpdata`` can export files, viewable in GIS software like QGis :\n\n::\n\n    django dumpdata --format=geojson yourapp.Model > export.geojson\n\nWorks with ``loaddata`` as well, which can now import GeoJSON files.\n\n\n\n=======\nAUTHORS\n=======\n\n    * Mathieu Leplatre <mathieu.leplatre@makina-corpus.com>\n    * Daniel Sokolowski, author of original serializer snippet\n    * ozzmo, python 2.6 compatibility\n\nRelies massively on Sean Gillies' `geojson <http://pypi.python.org/pypi/geojson>`_ python module.\n\n|makinacom|_\n\n.. |makinacom| image:: http://depot.makina-corpus.org/public/logo.gif\n.. _makinacom:  http://www.makina-corpus.com\n\n=======\nLICENSE\n=======\n\n    * Lesser GNU Public License\n\n\n=========\nCHANGELOG\n=========\n\n1.2.0 (2013-05-22)\n==================\n\n- Shapely is now optional (used for deserialization only)\n- Add Django to requirements\n- Skip a step in GeoJSON conversion of geometries (fixes #6)\n\n\n1.1.0 (2013-03-06)\n==================\n\n- Django 1.5 support\n- Fix template tag geojsonfeature on empty geometries\n\n1.0.0 (2012-08-03)\n==================\n\n- Initial working version.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://pypi.python.org/pypi/django-geojson/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/makinacorpus/django-geojson",
    "keywords": null,
    "license": "LPGL, see LICENSE file.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-geojson",
    "package_url": "https://pypi.org/project/django-geojson/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-geojson/",
    "project_urls": {
      "Download": "http://pypi.python.org/pypi/django-geojson/",
      "Homepage": "https://github.com/makinacorpus/django-geojson"
    },
    "release_url": "https://pypi.org/project/django-geojson/1.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Serve vectorial map layers with Django",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15434245,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8859019b998fef7df964f554d9bf4966097f6806ddf0a0186473c29f2fc69c9a",
        "md5": "a5485de74d84278b2c1b64e543a7df56",
        "sha256": "e349e71b18e2afc15566b83f591e443a3339b37874e32dd0bc9b6aaa00787efc"
      },
      "downloads": -1,
      "filename": "django-geojson-1.2.0.zip",
      "has_sig": false,
      "md5_digest": "a5485de74d84278b2c1b64e543a7df56",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16016,
      "upload_time": "2013-05-22T08:05:57",
      "upload_time_iso_8601": "2013-05-22T08:05:57.378635Z",
      "url": "https://files.pythonhosted.org/packages/88/59/019b998fef7df964f554d9bf4966097f6806ddf0a0186473c29f2fc69c9a/django-geojson-1.2.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}