{
  "info": {
    "author": "Ask Solem",
    "author_email": "ask@celeryproject.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Communications",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "=====================================================================\n Database-backed Periodic Tasks\n=====================================================================\n\n|build-status| |coverage| |license| |wheel| |pyversion| |pyimp|\n\n:Version: 1.0.1\n:Web: http://django-celery-beat.readthedocs.io/\n:Download: http://pypi.python.org/pypi/django-celery-beat\n:Source: http://github.com/celery/django-celery-beat\n:Keywords: django, celery, beat, periodic task, cron, scheduling\n\nAbout\n=====\n\nThis extension enables you to store the periodic task schedule in the\ndatabase.\n\nThe periodic tasks can be managed from the Django Admin interface, where you\ncan create, edit and delete periodic tasks and how often they should run.\n\nUsing the Extension\n===================\n\nUsage and installation instructions for this extension are available\nfrom the `Celery documentation`_:\n\nhttp://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#using-custom-scheduler-classes\n\n\n.. _`Celery documentation`:\n    http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#using-custom-scheduler-classes\n\nImportant Warning about Time Zones\n==================================\n\n.. warning::\n\n    If you change the Django ``TIME_ZONE`` setting your periodic task schedule\n    will still be based on the old timezone.\n\n    To fix that you would have to reset the \"last run time\" for each periodic\n    task::\n\n        >>> from django_celery_beat import PeriodicTask, PeriodicTasks\n        >>> PeriodicTask.objects.all().update(last_run_at=None)\n        >>> PeriodicTasks.changed()\n\n    Note that this will reset the state as if the periodic tasks have never run\n    before.\n\nModels\n======\n\n- ``django_celery_beat.models.PeriodicTask``\n\nThis model defines a single periodic task to be run.\n\nIt must be associated with a schedule, which defines how often the task should\nrun.\n\n- ``django_celery_beat.models.IntervalSchedule``\n\nA schedule that runs at a specific interval (e.g. every 5 seconds).\n\n- ``django_celery_beat.models.CrontabSchedule``\n\nA schedule with fields like entries in cron:\n``minute hour day-of-week day_of_month month_of_year``.\n\n- ``django_celery_beat.models.PeriodicTasks``\n\nThis model is only used as an index to keep track of when the schedule has\nchanged.\n\nWhenever you update a ``PeriodicTask`` a counter in this table is also\nincremented, which tells the ``celery beat`` service to reload the schedule\nfrom the database.\n\nIf you update periodic tasks in bulk, you will need to update the counter\nmanually::\n\n    >>> from django_celery_beat.models import PeriodicTasks\n    >>> PeriodicTasks.changed()\n\nExample creating interval-based periodic task\n---------------------------------------------\n\nTo create a periodic task executing at an interval you must first\ncreate the interval object::\n\n    >>> from django_celery_beat.models import PeriodicTask, IntervalSchedule\n\n    # executes every 10 seconds.\n    >>> schedule, created = IntervalSchedule.objects.get_or_create(\n    ...     every=10,\n    ...     period=IntervalSchedule.SECONDS,\n    ... )\n\nThat's all the fields you need: a period type and the frequency.\n\nYou can choose between a specific set of periods:\n\n\n- ``IntervalSchedule.DAYS``\n- ``IntervalSchedule.HOURS``\n- ``IntervalSchedule.MINUTES``\n- ``IntervalSchedule.SECONDS``\n- ``IntervalSchedule.MICROSECONDS``\n\n.. note::\n\n    If you have multiple periodic tasks executing every 10 seconds,\n    then they should all point to the same schedule object.\n\nThere's also a \"choices tuple\" available should you need to present this\nto the user::\n\n    >>> IntervalSchedule.PERIOD_CHOICES\n\n\nNow that we have defined the schedule object, we can create the periodic task\nentry::\n\n    >>> PeriodicTask.objects.create(\n    ...     interval=schedule,                  # we created this above.\n    ...     name='Importing contacts',          # simply describes this periodic task.\n    ...     task='proj.tasks.import_contacts',  # name of task.\n    ... )\n\n\nNote that this is a very basic example, you can also specify the arguments\nand keyword arguments used to execute the task, the ``queue`` to send it\nto[*], and set an expiry time.\n\nHere's an example specifying the arguments, note how JSON serialization is\nrequired::\n\n    >>> import json\n    >>> from datetime import datetime, timedelta\n\n    >>> PeriodicTask.objects.create(\n    ...     interval=schedule,                  # we created this above.\n    ...     name='Importing contacts',          # simply describes this periodic task.\n    ...     task='proj.tasks.import_contacts',  # name of task.\n    ...     args=json.dumps(['arg1', 'arg2']),\n    ...     kwargs=json.dumps({\n    ...        'be_careful': True,\n    ...     }),\n    ...     expires=datetime.utcnow() + timedelta(seconds=30)\n    ... )\n\n\n.. [*] you can also use low-level AMQP routing using the ``exchange`` and\n       ``routing_key`` fields.\n\nExample creating crontab-based periodic task\n--------------------------------------------\n\nA crontab schedule has the fields: ``minute``, ``hour``, ``day_of_week``,\n``day_of_month`` and ``month_of_year`, so if you want the equivalent\nof a ``30 * * * *`` (execute every 30 minutes) crontab entry you specify::\n\n    >>> from django_celery_beat.models import CrontabSchedule, PeriodicTask\n    >>> schedule, _ = CrontabSchedule.objects.get_or_create(\n    ...     minute='30',\n    ...     hour='*',\n    ...     day_of_week='*',\n    ...     day_of_month='*',\n    ...     month_of_year='*',\n    ... )\n\n\nThen to create a periodic task using this schedule, use the same approach as\nthe interval-based periodic task earlier in this document, but instead\nof ``interval=schedule``, specify ``crontab=schedule``::\n\n    >>> PeriodicTask.objects.create(\n    ...     crontab=schedule,\n    ...     name='Importing contacts',\n    ...     task='proj.tasks.import_contacts',\n    ... )\n\nTemporarily disable a periodic task\n-----------------------------------\n\nYou can use the ``enabled`` flag to temporarily disable a periodic task::\n\n    >>> periodic_task.enabled = False\n    >>> periodic_task.save()\n\nInstallation\n============\n\nYou can install django-celery-beat either via the Python Package Index (PyPI)\nor from source.\n\nTo install using `pip`,::\n\n    $ pip install -U django-celery-beat\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version of django-celery-beat from\nhttp://pypi.python.org/pypi/django-celery-beat\n\nYou can install it by doing the following,::\n\n    $ tar xvfz django-celery-beat-0.0.0.tar.gz\n    $ cd django-celery-beat-0.0.0\n    $ python setup.py build\n    # python setup.py install\n\nThe last command must be executed as a privileged user if\nyou are not currently using a virtualenv.\n\nUsing the development version\n-----------------------------\n\nWith pip\n~~~~~~~~\n\nYou can install the latest snapshot of django-celery-beat using the following\npip command::\n\n    $ pip install https://github.com/celery/django-celery-beat/zipball/master#egg=django-celery-beat\n\n.. |build-status| image:: https://secure.travis-ci.org/celery/django-celery-beat.svg?branch=master\n    :alt: Build status\n    :target: https://travis-ci.org/celery/django-celery-beat\n\n.. |coverage| image:: https://codecov.io/github/celery/django-celery-beat/coverage.svg?branch=master\n    :target: https://codecov.io/github/celery/django-celery-beat?branch=master\n\n.. |license| image:: https://img.shields.io/pypi/l/django-celery-beat.svg\n    :alt: BSD License\n    :target: https://opensource.org/licenses/BSD-3-Clause\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/django-celery-beat.svg\n    :alt: django-celery-beat can be installed via wheel\n    :target: http://pypi.python.org/pypi/django-celery-beat/\n\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/django-celery-beat.svg\n    :alt: Supported Python versions.\n    :target: http://pypi.python.org/pypi/django-celery-beat/\n\n.. |pyimp| image:: https://img.shields.io/pypi/implementation/django-celery-beat.svg\n    :alt: Support Python implementations.\n    :target: http://pypi.python.org/pypi/django-celery-beat/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/celery/django-celery-beat",
    "keywords": "django celery beat periodic task database",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-celery-beat",
    "package_url": "https://pypi.org/project/django-celery-beat/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-celery-beat/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/celery/django-celery-beat"
    },
    "release_url": "https://pypi.org/project/django-celery-beat/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Database-backed Periodic Tasks.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17285243,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc4b9a4a8b59d8bce0d6efd5e8733429b5604085a27536cd9061ddf3d65d69e2",
        "md5": "81205be1699d07e37e3d7027833eb307",
        "sha256": "6d132af1e24c313eb47042da71cf30c5f612f93337a1c85309ad2d490f76bf8b"
      },
      "downloads": -1,
      "filename": "django_celery_beat-1.0.1-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "81205be1699d07e37e3d7027833eb307",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 19026,
      "upload_time": "2016-11-07T23:18:27",
      "upload_time_iso_8601": "2016-11-07T23:18:27.623387Z",
      "url": "https://files.pythonhosted.org/packages/dc/4b/9a4a8b59d8bce0d6efd5e8733429b5604085a27536cd9061ddf3d65d69e2/django_celery_beat-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f38011489d116003d11dd32974f3122fc0e2d8b2b2829b37ffecacae1c2f0edf",
        "md5": "ae264d14db0375ff86a1d6d172aeb6c6",
        "sha256": "c8d5233fd0eb3404a800cc62383d241ac6f95b04d3a87b3720d212f0c85654b9"
      },
      "downloads": -1,
      "filename": "django_celery_beat-1.0.1.tar.gz",
      "has_sig": true,
      "md5_digest": "ae264d14db0375ff86a1d6d172aeb6c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 63281,
      "upload_time": "2016-11-07T23:18:24",
      "upload_time_iso_8601": "2016-11-07T23:18:24.627117Z",
      "url": "https://files.pythonhosted.org/packages/f3/80/11489d116003d11dd32974f3122fc0e2d8b2b2829b37ffecacae1c2f0edf/django_celery_beat-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}