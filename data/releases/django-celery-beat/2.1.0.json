{
  "info": {
    "author": "Asif Saif Uddin, Ask Solem",
    "author_email": "auvipy@gmail.com, ask@celeryproject.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Communications",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "=====================================================================\n Database-backed Periodic Tasks\n=====================================================================\n\n|build-status| |coverage| |license| |wheel| |pyversion| |pyimp|\n\n:Version: 2.1.0\n:Web: http://django-celery-beat.readthedocs.io/\n:Download: http://pypi.python.org/pypi/django-celery-beat\n:Source: http://github.com/celery/django-celery-beat\n:Keywords: django, celery, beat, periodic task, cron, scheduling\n\nAbout\n=====\n\nThis extension enables you to store the periodic task schedule in the\ndatabase.\n\nThe periodic tasks can be managed from the Django Admin interface, where you\ncan create, edit and delete periodic tasks and how often they should run.\n\nUsing the Extension\n===================\n\nUsage and installation instructions for this extension are available\nfrom the `Celery documentation`_.\n\n.. _`Celery documentation`:\n    http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#using-custom-scheduler-classes\n\nImportant Warning about Time Zones\n==================================\n\n.. warning::\n\n    If you change the Django ``TIME_ZONE`` setting your periodic task schedule\n    will still be based on the old timezone.\n\n    To fix that you would have to reset the \"last run time\" for each periodic\n    task::\n\n        >>> from django_celery_beat.models import PeriodicTask, PeriodicTasks\n        >>> PeriodicTask.objects.all().update(last_run_at=None)\n        >>> for task in PeriodicTask.objects.all():\n        >>>     PeriodicTasks.changed(task)\n\n    Note that this will reset the state as if the periodic tasks have never run\n    before.\n\nModels\n======\n\n- ``django_celery_beat.models.PeriodicTask``\n\nThis model defines a single periodic task to be run.\n\nIt must be associated with a schedule, which defines how often the task should\nrun.\n\n- ``django_celery_beat.models.IntervalSchedule``\n\nA schedule that runs at a specific interval (e.g. every 5 seconds).\n\n- ``django_celery_beat.models.CrontabSchedule``\n\nA schedule with fields like entries in cron:\n``minute hour day-of-week day_of_month month_of_year``.\n\n- ``django_celery_beat.models.PeriodicTasks``\n\nThis model is only used as an index to keep track of when the schedule has\nchanged.\n\nWhenever you update a ``PeriodicTask`` a counter in this table is also\nincremented, which tells the ``celery beat`` service to reload the schedule\nfrom the database.\n\nIf you update periodic tasks in bulk, you will need to update the counter\nmanually::\n\n    >>> from django_celery_beat.models import PeriodicTasks\n    >>> PeriodicTasks.update_changed()\n\nExample creating interval-based periodic task\n---------------------------------------------\n\nTo create a periodic task executing at an interval you must first\ncreate the interval object::\n\n    >>> from django_celery_beat.models import PeriodicTask, IntervalSchedule\n\n    # executes every 10 seconds.\n    >>> schedule, created = IntervalSchedule.objects.get_or_create(\n    ...     every=10,\n    ...     period=IntervalSchedule.SECONDS,\n    ... )\n\nThat's all the fields you need: a period type and the frequency.\n\nYou can choose between a specific set of periods:\n\n\n- ``IntervalSchedule.DAYS``\n- ``IntervalSchedule.HOURS``\n- ``IntervalSchedule.MINUTES``\n- ``IntervalSchedule.SECONDS``\n- ``IntervalSchedule.MICROSECONDS``\n\n.. note::\n\n    If you have multiple periodic tasks executing every 10 seconds,\n    then they should all point to the same schedule object.\n\nThere's also a \"choices tuple\" available should you need to present this\nto the user::\n\n    >>> IntervalSchedule.PERIOD_CHOICES\n\n\nNow that we have defined the schedule object, we can create the periodic task\nentry::\n\n    >>> PeriodicTask.objects.create(\n    ...     interval=schedule,                  # we created this above.\n    ...     name='Importing contacts',          # simply describes this periodic task.\n    ...     task='proj.tasks.import_contacts',  # name of task.\n    ... )\n\n\nNote that this is a very basic example, you can also specify the arguments\nand keyword arguments used to execute the task, the ``queue`` to send it\nto[*], and set an expiry time.\n\nHere's an example specifying the arguments, note how JSON serialization is\nrequired::\n\n    >>> import json\n    >>> from datetime import datetime, timedelta\n\n    >>> PeriodicTask.objects.create(\n    ...     interval=schedule,                  # we created this above.\n    ...     name='Importing contacts',          # simply describes this periodic task.\n    ...     task='proj.tasks.import_contacts',  # name of task.\n    ...     args=json.dumps(['arg1', 'arg2']),\n    ...     kwargs=json.dumps({\n    ...        'be_careful': True,\n    ...     }),\n    ...     expires=datetime.utcnow() + timedelta(seconds=30)\n    ... )\n\n\n.. [*] you can also use low-level AMQP routing using the ``exchange`` and\n       ``routing_key`` fields.\n\nExample creating crontab-based periodic task\n--------------------------------------------\n\nA crontab schedule has the fields: ``minute``, ``hour``, ``day_of_week``,\n``day_of_month`` and ``month_of_year``, so if you want the equivalent\nof a ``30 * * * *`` (execute every 30 minutes) crontab entry you specify::\n\n    >>> from django_celery_beat.models import CrontabSchedule, PeriodicTask\n    >>> schedule, _ = CrontabSchedule.objects.get_or_create(\n    ...     minute='30',\n    ...     hour='*',\n    ...     day_of_week='*',\n    ...     day_of_month='*',\n    ...     month_of_year='*',\n    ...     timezone=pytz.timezone('Canada/Pacific')\n    ... )\n\nThe crontab schedule is linked to a specific timezone using the 'timezone' input parameter.\n\nThen to create a periodic task using this schedule, use the same approach as\nthe interval-based periodic task earlier in this document, but instead\nof ``interval=schedule``, specify ``crontab=schedule``::\n\n    >>> PeriodicTask.objects.create(\n    ...     crontab=schedule,\n    ...     name='Importing contacts',\n    ...     task='proj.tasks.import_contacts',\n    ... )\n\nTemporarily disable a periodic task\n-----------------------------------\n\nYou can use the ``enabled`` flag to temporarily disable a periodic task::\n\n    >>> periodic_task.enabled = False\n    >>> periodic_task.save()\n\n\nExample running periodic tasks\n-----------------------------------\n\nThe periodic tasks still need 'workers' to execute them.\nSo make sure the default **Celery** package is installed.\n(If not installed, please follow the installation instructions\nhere: https://github.com/celery/celery)\n\nBoth the worker and beat services need to be running at the same time.\n\n1. Start a Celery worker service (specify your Django project name)::\n\n\n    $ celery -A [project-name] worker --loglevel=info\n\n\n2. As a separate process, start the beat service (specify the Django scheduler)::\n\n\n        $ celery -A [project-name] beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler\n\n\n   **OR** you can use the -S (scheduler flag), for more options see ``celery beat --help``)::\n\n            $ celery -A [project-name] beat -l info -S django\n\n   Also, as an alternative, you can run the two steps above (worker and beat services)\n   with only one command (recommended for **development environment only**)::\n\n\n    $ celery -A [project-name] worker --beat --scheduler django --loglevel=info\n\n\n3. Now you can add and manage your periodic tasks from the Django Admin interface.\n\n\n\n\nInstallation\n============\n\nYou can install django-celery-beat either via the Python Package Index (PyPI)\nor from source.\n\nTo install using ``pip``::\n\n    $ pip install -U django-celery-beat\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version of django-celery-beat from\nhttp://pypi.python.org/pypi/django-celery-beat\n\nYou can install it by doing the following,::\n\n    $ tar xvfz django-celery-beat-0.0.0.tar.gz\n    $ cd django-celery-beat-0.0.0\n    $ python setup.py build\n    # python setup.py install\n\nThe last command must be executed as a privileged user if\nyou are not currently using a virtualenv.\n\n\nAfter installation, add ``django_celery_beat`` to Django settings file::\n\n    INSTALLED_APPS = [\n        ...,\n        'django_celery_beat',\n    ]\n\n    python manage.py migrate django_celery_beat\n\n\nUsing the development version\n-----------------------------\n\nWith pip\n~~~~~~~~\n\nYou can install the latest snapshot of django-celery-beat using the following\npip command::\n\n    $ pip install https://github.com/celery/django-celery-beat/zipball/master#egg=django-celery-beat\n\n\nDeveloping django-celery-beat\n-----------------------------\n\nTo spin up a local development copy of django-celery-beat with Django admin at http://127.0.0.1:58000/admin/ run::\n\n    $ docker-compose up --build\n\nLog-in as user ``admin`` with password ``admin``.\n\n\nTZ Awareness:\n-------------\n\nIf you have a project that is time zone naive, you can set ``DJANGO_CELERY_BEAT_TZ_AWARE=False`` in your settings file.\n\n\n.. |build-status| image:: https://secure.travis-ci.org/celery/django-celery-beat.svg?branch=master\n    :alt: Build status\n    :target: https://travis-ci.org/celery/django-celery-beat\n\n.. |coverage| image:: https://codecov.io/github/celery/django-celery-beat/coverage.svg?branch=master\n    :target: https://codecov.io/github/celery/django-celery-beat?branch=master\n\n.. |license| image:: https://img.shields.io/pypi/l/django-celery-beat.svg#foo\n    :alt: BSD License\n    :target: https://opensource.org/licenses/BSD-3-Clause\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/django-celery-beat.svg#foo\n    :alt: django-celery-beat can be installed via wheel\n    :target: http://pypi.python.org/pypi/django-celery-beat/\n\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/django-celery-beat.svg#foo\n    :alt: Supported Python versions.\n    :target: http://pypi.python.org/pypi/django-celery-beat/\n\n.. |pyimp| image:: https://img.shields.io/pypi/implementation/django-celery-beat.svg#foo\n    :alt: Support Python implementations.\n    :target: http://pypi.python.org/pypi/django-celery-beat/\n\ndjango-celery-beat as part of the Tidelift Subscription\n-------------------------------------------------------\n\nThe maintainers of django-celery-beat and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. `Learn more`_.\n\n.. _Learn more: https://tidelift.com/subscription/pkg/pypi-django-celery-beat?utm_source=pypi-django-celery-beat&utm_medium=referral&utm_campaign=readme&utm_term=repo\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/celery/django-celery-beat",
    "keywords": "django celery beat periodic task database",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-celery-beat",
    "package_url": "https://pypi.org/project/django-celery-beat/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-celery-beat/",
    "project_urls": {
      "Homepage": "https://github.com/celery/django-celery-beat"
    },
    "release_url": "https://pypi.org/project/django-celery-beat/2.1.0/",
    "requires_dist": [
      "django-timezone-field (<5.0,>=4.0)",
      "python-crontab (>=2.3.4)",
      "celery (<6.0,>=4.4)",
      "Django (>=2.2)"
    ],
    "requires_python": "",
    "summary": "Database-backed Periodic Tasks.",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17285243,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34cbe0e8200a57b8b7433448444749ca9be3561e6e029d227f21037f28123d6d",
        "md5": "c3c7a55f724e0b05ce33de4495e7aaa0",
        "sha256": "8a169e11d96faed8b72d505ddbc70e7fe0b16cdc854df43cb209c153ed08d651"
      },
      "downloads": -1,
      "filename": "django_celery_beat-2.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c3c7a55f724e0b05ce33de4495e7aaa0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 38264,
      "upload_time": "2020-10-20T06:14:41",
      "upload_time_iso_8601": "2020-10-20T06:14:41.473691Z",
      "url": "https://files.pythonhosted.org/packages/34/cb/e0e8200a57b8b7433448444749ca9be3561e6e029d227f21037f28123d6d/django_celery_beat-2.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23f55e706413a77ffce06f874835487a84f2b7e5a6f8b18a010011473d35933f",
        "md5": "3c7dae467526b19012b4dede2ae62e29",
        "sha256": "4eb0e8412e2e05ba0029912a6f80d1054731001eecbcb4d59688c4e07cf4d9d3"
      },
      "downloads": -1,
      "filename": "django-celery-beat-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3c7dae467526b19012b4dede2ae62e29",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 85573,
      "upload_time": "2020-10-20T06:14:48",
      "upload_time_iso_8601": "2020-10-20T06:14:48.213378Z",
      "url": "https://files.pythonhosted.org/packages/23/f5/5e706413a77ffce06f874835487a84f2b7e5a6f8b18a010011473d35933f/django-celery-beat-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}