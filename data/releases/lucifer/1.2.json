{
  "info": {
    "author": "Idin",
    "author_email": "py@idin.ca",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Voltaire\nVoltaire is a Python package for creating nice and colourful progress bars using the map() and apply() method as well as for loops.\n\n## Who is Voltaire?\n[François-Marie Arouet](https://en.wikipedia.org/wiki/Voltaire) (French: [fʁɑ̃swa maʁi aʁwɛ]; 21 November 1694 – 30 May 1778), known by his nom de plume Voltaire (/vɒlˈtɛər/; French: [vɔltɛːʁ]), was a French Enlightenment writer, historian and philosopher famous for his wit, his criticism of Christianity, especially the Roman Catholic Church, and his advocacy of freedom of religion, freedom of speech, and separation of church and state.\n\n\n## ProgressBar\nTo use a progress bar you need to initiate a ProgressBar object with the maximum progress amount (total) and call the show method of the object with the amount to update the progress bar.\n\n```python\nfrom lucifer import ProgressBar\nfrom time import sleep\n\nbar = ProgressBar(total=100)\n\nfor i in range(100):\n  sleep(0.05)\n  bar.show(amount=i+1)\n```\n\nYou can also add your own text to the progress bar.\n\n```python\nfrom lucifer import ProgressBar\nfrom time import sleep\n\nbar = ProgressBar(total=100)\nfor i in range(100):\n    sleep(0.05)\n    bar.show(amount=i+1, text=f'working on {i}')\n```\n\n\n## map\nYou can also use the ProgressBar's map method instead of Python's map method. The output is an iterable. As soon as you turn the iterable object into a list the progress bar will be displayed.\n\n```python\nfrom lucifer import ProgressBar\nfrom time import sleep\n\nlist1 = list(range(100))\n\ndef wait_and_double(x, wait_time):\n    sleep(wait_time)\n    return x*2\n\n# this will not make the progress bar appear\niterable2 = ProgressBar.map(\n    function=lambda x: wait_and_double(x=x, wait_time=0.05), \n    iterable=list1\n)\n\n# this will make the progress bar appear\nlist2 = list(iterable2)\n```\n\n## apply\nProgressBar also works with Panda's DataFrame and Series objects. \n\n```python\nfrom lucifer import ProgressBar\nfrom time import sleep\nfrom pandas import DataFrame\n\ndata = DataFrame({\n    'name':['Arminius', 'Boudica', 'Alaric', 'Attila', 'Genseric'],\n    'ethnicity': ['German', 'Celt', 'Goth', 'Hun', 'Vandal']\n})\n\ndata['name_and_ethnicity'] = ProgressBar.apply(\n    data=data, \n    function=lambda x: x['name']+' the '+x['ethnicity']\n)\n\ndata['name_lower'] = ProgressBar.apply(\n    series=data['name'], \n    function=lambda x: x.lower()\n)\n```\n\n## iterate\nYou can also use ProgressBar to for iterating over iterable objects, especially *for* loops.\n\n```python\nfrom lucifer import iterate\n\nfor i in iterate(range(100)):\n    # do something\n    pass\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/idin/lucifer",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lucifer",
    "package_url": "https://pypi.org/project/lucifer/",
    "platform": "",
    "project_url": "https://pypi.org/project/lucifer/",
    "project_urls": {
      "Homepage": "https://github.com/idin/lucifer"
    },
    "release_url": "https://pypi.org/project/lucifer/1.2/",
    "requires_dist": null,
    "requires_python": "~=3.6",
    "summary": "Python library for creating progress bars",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4784112,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b98a3ec9eb462fead481843a669c795e0e7bf4513b797fb5a4eec325d744218",
        "md5": "10d971ef328d3d00b46e9476504cdef9",
        "sha256": "d3949638dda5059c95657fd97bed054bfa4de16ff4e2b866fc0f8f9c5026a3b3"
      },
      "downloads": -1,
      "filename": "lucifer-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "10d971ef328d3d00b46e9476504cdef9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.6",
      "size": 11667,
      "upload_time": "2019-02-05T22:04:11",
      "upload_time_iso_8601": "2019-02-05T22:04:11.694781Z",
      "url": "https://files.pythonhosted.org/packages/4b/98/a3ec9eb462fead481843a669c795e0e7bf4513b797fb5a4eec325d744218/lucifer-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfc029169d990a4dcae505d0904e530bbfb7e9b5c327b168f29f1b87009daa52",
        "md5": "ce8ca645b0e11b81edebac6d76e8c890",
        "sha256": "742f642b938792d2158ad6ec2f82317ba77d6aeb01e509fee0194f9332cbceea"
      },
      "downloads": -1,
      "filename": "lucifer-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ce8ca645b0e11b81edebac6d76e8c890",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 5643,
      "upload_time": "2019-02-05T22:04:16",
      "upload_time_iso_8601": "2019-02-05T22:04:16.168365Z",
      "url": "https://files.pythonhosted.org/packages/bf/c0/29169d990a4dcae505d0904e530bbfb7e9b5c327b168f29f1b87009daa52/lucifer-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}