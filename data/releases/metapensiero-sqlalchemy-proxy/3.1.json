{
  "info": {
    "author": "Lele Gaifax",
    "author_email": "lele@metapensiero.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Database"
    ],
    "description": ".. -*- coding: utf-8 -*-\n.. :Project:   metapensiero.sqlalchemy.proxy\n.. :Created:   gio 30 apr 2009 10:01:20 CEST\n.. :Author:    Lele Gaifax <lele@metapensiero.it>\n.. :License:   GNU General Public License version 3 or later\n.. :Copyright: © 2009, 2010, 2012, 2013, 2014, 2016 Lele Gaifax\n..\n\n===============================\n metapensiero.sqlalchemy.proxy\n===============================\n\nExpose SQLAlchemy's queries and their metadata to a webservice\n==============================================================\n\nThis package contains a few utilities to make it easier applying some filtering to a stock\nquery and obtaining the resultset in various formats.\n\nAn helper decorator explicitly designed for Pylons is included: it provides a `property` like\nsyntax to attach either a ProxiedQuery or a plain Python function to a Controller, handling\n``GET``, ``POST`` or ``DEL`` request methods.\n\nSince version 1.7 there are some Pyramid specific subclasses that help using the proxies within\na Pyramid view as well as a `expose` decorator that simplify their implementation.\n\n\nUsage with Pyramid\n------------------\n\nFirst of all, there are some setup steps to follow:\n\n1. Include the package in the configuration file::\n\n    [app:main]\n    use = egg:ph.data\n\n    ...\n\n    pyramid.includes =\n        metapensiero.sqlalchemy.proxy.pyramid\n        pyramid_tm\n\n   This is not strictly needed, but it will override the standard ``json`` renderer with one\n   that uses ``nssjson``, to handle the datetime type.\n\n2. Configure the ``expose`` decorator, for example adding something like the following snippet\n   to the ``.../views.py`` source::\n\n    from metapensiero.sqlalchemy.proxy.pyramid import expose\n    from .models import DBSession\n\n    # Configure the `expose` decorator\n    expose.create_session = staticmethod(lambda req: DBSession())\n\nThen you can add views to expose either an entity or a plain select::\n\n    @view_config(route_name='users', renderer='json')\n    @expose(User, metadata=dict(\n        password=dict(hidden=True, password=True, width=40),\n        is_anonymous=False,\n        ))\n    def users(request, results):\n        return results\n\n    sessions_t = Session.__table__\n\n    @view_config(route_name='sessions', renderer='json')\n    @expose(select([sessions_t], sessions_t.c.iduser == bindparam('user_id')))\n    def sessions(request, results):\n        return results\n\nThe decorated function may be a generator instead, which has the opportunity of freely\nmanipulate either the arguments received from the request, or the final result, or both as\nfollows::\n\n    @view_config(route_name='users', renderer='json')\n    @expose(User, metadata=dict(\n        password=dict(hidden=True, password=True, width=40),\n        is_anonymous=False,\n        ))\n    def complex():\n        # Receive request and params\n        request, params = (yield)\n\n        # Adjust parameters\n        params['new'] = True\n\n        if 'something' in params:\n            # Inject other conditions\n            something = params.pop('something')\n            conditions = (User.c.foo == something,)\n            result = yield params, conditions\n        else:\n            # Go on, and receive the final result\n            result = yield params\n\n        # Fix it up\n        result['COMPLEX'] = 'MAYBE'\n\n        yield result\n\n\nExamples\n~~~~~~~~\n\nAssuming the ``users`` view is added as ``/views/users``, it could be called in the following\nways:\n\n``GET /views/users``\n  would return a JSON response containing **all** users, like::\n\n    {\n      \"count\": 1234,\n      \"message\": \"Ok\",\n      \"success\": true,\n      \"root\": [\n        {\n          \"first_name\": \"Lele\",\n          \"last_name\": \"Gaifax\",\n          ...\n        },\n        {\n          \"first_name\": \"Mario\",\n          \"last_name\": \"Rossi\",\n          ...\n        },\n        ...\n      ]\n    }\n\n``GET /views/users?limit=1&start=2``\n  would return a JSON response containing just **one** user, the second::\n\n    {\n      \"count\": 1234,\n      \"message\": \"Ok\",\n      \"success\": true,\n      \"root\": [\n        {\n          \"first_name\": \"Mario\",\n          \"last_name\": \"Rossi\",\n          ...\n        }\n      ]\n    }\n\n``GET /views/users?filter_first_name=Lele``\n  would return a JSON response containing the records satisfying the given condition::\n\n    {\n      \"count\": 1,\n      \"message\": \"Ok\",\n      \"success\": true,\n      \"root\": [\n        {\n          \"first_name\": \"Lele\",\n          \"last_name\": \"Gaifax\",\n          ...\n        }\n      ]\n    }\n\n``GET /views/users?limit=1&only_cols=first_name,role_name``\n  would return a JSON response containing only the requested fields of a single record::\n\n    {\n      \"count\": 1234,\n      \"message\": \"Ok\",\n      \"success\": true,\n      \"root\": [\n        {\n          \"first_name\": \"Lele\",\n          \"role_name\": \"administrator\"\n        }\n      ]\n    }\n\n``GET /views/users?metadata=metadata&limit=0``\n  would return a JSON response containing a description of the schema::\n\n    {\n      \"metadata\": {\n        \"success_slot\": \"success\",\n        \"primary_key\": \"iduser\",\n        \"fields\": [\n          {\n            \"width\": 60,\n            \"hint\": \"The unique ID of the user.\",\n            \"align\": \"right\",\n            \"nullable\": false,\n            \"readonly\": true,\n            \"type\": \"int\",\n            \"hidden\": true,\n            \"label\": \"User ID\",\n            \"name\": \"iduser\"\n          },\n          ...\n        ],\n        \"root_slot\": \"root\",\n        \"count_slot\": \"count\"\n      },\n      \"message\": \"Ok\",\n      \"success\": true\n    }\n\nBrowse SoL__ sources for real usage examples.\n\n\n__ https://bitbucket.org/lele/sol/src/master/src/sol/views/data.py\n\n\nChanges\n-------\n\n3.1 (2016-02-07)\n~~~~~~~~~~~~~~~~\n\n* Fix metadata extraction of labelled columns on joined tables\n\n* Adjust size of time fields and align them to the right\n\n\n3.0 (2016-02-03)\n~~~~~~~~~~~~~~~~\n\n* Internal, backward incompatible code reorganization, splitting the main module into smaller\n  pieces\n\n* Handle corner cases with joined queries involving aliased tables\n\n\n2.8 (2015-08-02)\n~~~~~~~~~~~~~~~~\n\n* Use py.test instead of nosetests\n\n* Remove workaround to an async issue caused by a bug fixed in ``arstecnica.sqlalchemy.async``\n\n\n2.7 (2015-07-16)\n~~~~~~~~~~~~~~~~\n\n* Reasonably working asyncio variant of ProxiedQuery (Python 3.4 only, and using the\n  yet-to-be-released ``arstecnica.sqlalchemy.async``)\n\n\n2.6 (2014-11-05)\n~~~~~~~~~~~~~~~~\n\n* Handle ``NULL`` in the multi-valued ``IN`` comparisons\n\n* Minor doc tweaks, added request examples section to the README\n\n* Honor both \"filter\" and \"filters\" request parameters\n\n\n2.5 (2014-09-14)\n~~~~~~~~~~~~~~~~\n\n* Honor the \"key\" of the columns in ProxiedQuery result dictionaries\n\n\n2.4 (2014-03-22)\n~~~~~~~~~~~~~~~~\n\n* Use nssjson instead of simplejson\n\n\n2.3 (2014-02-28)\n~~~~~~~~~~~~~~~~\n\n* Explicitly require simplejson\n\n* Improved test coverage\n\n* Fix SQLAlchemy and_() usage\n\n\n2.2 (2014-02-02)\n~~~~~~~~~~~~~~~~\n\n* Easier syntax to sort on multiple fields\n\n\n2.1 (2014-01-19)\n~~~~~~~~~~~~~~~~\n\n* Fix TypeDecorators in compare_field()\n\n\n2.0 (2013-12-23)\n~~~~~~~~~~~~~~~~\n\n* The generator function may yield a tuple with modified params and\n  other conditions\n\n* Simple Makefile with common recipes\n\n\n1.9.6 (2013-12-12)\n~~~~~~~~~~~~~~~~~~\n\n* Encoding issue on package meta data\n\n\n1.9.5 (2013-12-12)\n~~~~~~~~~~~~~~~~~~\n\n* First official release on PyPI\n\n\n1.9.4 (2013-12-12)\n~~~~~~~~~~~~~~~~~~\n\n* Pyramid expose() can decorate a generator function too\n\n\n1.9.3 (2013-08-04)\n~~~~~~~~~~~~~~~~~~\n\n* Use setuptools instead of distribute\n\n\n1.9.2 (2013-06-09)\n~~~~~~~~~~~~~~~~~~\n\n* New replaceable ``extract_parameters(request)`` static method on\n  Pyramid's `expose` decorator\n\n* **Backward incompatible change**: fix handling of bindparams in\n  ProxiedQuery, which shall be passed as a dictionary with the\n  `params` keyword instead as of individual keywords\n\n* Fix handling of SQLAlchemy custom types\n\n\n1.9.1 (2013-04-17)\n~~~~~~~~~~~~~~~~~~\n\n* Fix and test handling of ORM queries\n\n* Fix Pyramid exposure of ORM queries\n\n\n1.9 (2013-04-08)\n~~~~~~~~~~~~~~~~\n\n* Minor adjustments for SQLAchemy 0.8\n\n* Compatibility tweaks for Python 2.7 and Python 3.3\n\n* Improved test coverage\n\n\n1.8.7 (2013-03-18)\n~~~~~~~~~~~~~~~~~~\n\n* For backward compatibility check for “filters” too\n\n* Ignore the filter condition if the comparison value is missing\n\n\n1.8.6 (2013-03-08)\n~~~~~~~~~~~~~~~~~~\n\n* Use the ExtJS default name, “filter”, not the plural form, “filters”\n  for the filter parameter\n\n\n1.8.5 (2013-02-28)\n~~~~~~~~~~~~~~~~~~\n\n* Factor out the extraction of filtering conditions, so it can be used\n  by other packages\n\n\n1.8.4 (2013-01-28)\n~~~~~~~~~~~~~~~~~~\n\n* Field metadata information can be a callable returning the actual\n  dictionary\n\n\n1.8.3 (2013-01-26)\n~~~~~~~~~~~~~~~~~~\n\n* **Backward incompatible change**: pass the request also the the\n  ``save_changes`` function, it may need it to determine if the user\n  is allowed to make the changes\n\n\n1.8.2 (2013-01-21)\n~~~~~~~~~~~~~~~~~~\n\n* More generic way of specifying an handler for non-GET request\n  methods\n\n\n1.8.1 (2013-01-09)\n~~~~~~~~~~~~~~~~~~\n\n* **Backward incompatible change**: pass the request to the adaptor\n  function, it may need it to do its job\n\n\n1.8 (2012-12-19)\n~~~~~~~~~~~~~~~~\n\n* SQLAlchemy 0.8 compatibility\n\n\n1.7.12 (2012-11-17)\n~~~~~~~~~~~~~~~~~~~\n\n* Properly recognize TIME type\n\n\n1.7.11 (2012-10-22)\n~~~~~~~~~~~~~~~~~~~\n\n* Fix exception\n\n\n1.7.10 (2012-10-22)\n~~~~~~~~~~~~~~~~~~~\n\n* Small code tweaks\n\n\n1.7.9 (2012-10-20)\n~~~~~~~~~~~~~~~~~~\n\n* Attempt to extract the primary key fields of a ProxiedQuery\n\n\n1.7.8 (2012-10-19)\n~~~~~~~~~~~~~~~~~~\n\n* More versatile way of injecting the SA session maker\n\n\n1.7.7 (2012-09-26)\n~~~~~~~~~~~~~~~~~~\n\n* Multicolumns sort\n\n\n1.7.6 (2012-09-25)\n~~~~~~~~~~~~~~~~~~\n\n* Better error reporting\n\n\n1.7.5 (2012-09-21)\n~~~~~~~~~~~~~~~~~~\n\n* Rework how filters are passed\n\n* Emit more compact JSON\n\n\n1.7.4 (2012-09-14)\n~~~~~~~~~~~~~~~~~~\n\n* Tweak the Pyramid ``expose`` to work on selectables\n\n\n1.7.3 (2012-09-12)\n~~~~~~~~~~~~~~~~~~\n\n* New ``expose`` decorator for Pyramid\n\n\n1.7.2 (2012-08-18)\n~~~~~~~~~~~~~~~~~~\n\n* Ability to skip a field, setting its metadata info to ``False``\n\n* Extract the primary key fields of a ProxiedEntity\n\n\n1.7.1 (2012-08-13)\n~~~~~~~~~~~~~~~~~~\n\n* Pyramid glue\n\n\n1.7 (2012-08-08)\n~~~~~~~~~~~~~~~~\n\n* Drop cjson support",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/lele/metapensiero.sqlalchemy.proxy",
    "keywords": null,
    "license": "GPLv3+",
    "maintainer": null,
    "maintainer_email": null,
    "name": "metapensiero.sqlalchemy.proxy",
    "package_url": "https://pypi.org/project/metapensiero.sqlalchemy.proxy/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/metapensiero.sqlalchemy.proxy/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/lele/metapensiero.sqlalchemy.proxy"
    },
    "release_url": "https://pypi.org/project/metapensiero.sqlalchemy.proxy/3.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Expose SQLAlchemy's queries and their metadata to a webservice",
    "version": "3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14507589,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3227786cae5704ef04cc82fbb2767767e21de9d8743669a175774fd320e3d0cc",
        "md5": "2753a79bba81151374a536091085cfb3",
        "sha256": "6ef25f9eff0647f466fe23b11d5a08ea49acbbdeb0b141c08f86bd2269022958"
      },
      "downloads": -1,
      "filename": "metapensiero.sqlalchemy.proxy-3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2753a79bba81151374a536091085cfb3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34593,
      "upload_time": "2016-02-07T09:17:11",
      "upload_time_iso_8601": "2016-02-07T09:17:11.269194Z",
      "url": "https://files.pythonhosted.org/packages/32/27/786cae5704ef04cc82fbb2767767e21de9d8743669a175774fd320e3d0cc/metapensiero.sqlalchemy.proxy-3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}