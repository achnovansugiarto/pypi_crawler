{
  "info": {
    "author": "Lele Gaifax",
    "author_email": "lele@metapensiero.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Database"
    ],
    "description": ".. -*- coding: utf-8 -*-\n.. :Project:   metapensiero.sqlalchemy.proxy\n.. :Created:   gio 30 apr 2009 10:01:20 CEST\n.. :Author:    Lele Gaifax <lele@metapensiero.it>\n.. :License:   GNU General Public License version 3 or later\n.. :Copyright: © 2009, 2010, 2012, 2013, 2014, 2016 Lele Gaifax\n..\n\n===============================\n metapensiero.sqlalchemy.proxy\n===============================\n\nExpose SQLAlchemy's queries and their metadata to a webservice\n==============================================================\n\nThis package contains a few utilities to make it easier applying some filtering to a stock\nquery and obtaining the resultset in various formats.\n\nAn helper decorator explicitly designed for Pylons is included: it provides a `property` like\nsyntax to attach either a ProxiedQuery or a plain Python function to a Controller, handling\n``GET``, ``POST`` or ``DEL`` request methods.\n\nSince version 1.7 there are some Pyramid specific subclasses that help using the proxies within\na Pyramid view as well as a `expose` decorator that simplify their implementation.\n\n\nUsage with Pyramid\n------------------\n\nFirst of all, there are some setup steps to follow:\n\n1. Include the package in the configuration file::\n\n    [app:main]\n    use = egg:ph.data\n\n    ...\n\n    pyramid.includes =\n        metapensiero.sqlalchemy.proxy.pyramid\n        pyramid_tm\n\n   This is not strictly needed, but it will override the standard ``json`` renderer with one\n   that uses ``nssjson``, to handle the datetime type.\n\n2. Configure the ``expose`` decorator, for example adding something like the following snippet\n   to the ``.../views.py`` source::\n\n    from metapensiero.sqlalchemy.proxy.pyramid import expose\n    from .models import DBSession\n\n    # Configure the `expose` decorator\n    expose.create_session = staticmethod(lambda req: DBSession())\n\nThen you can add views to expose either an entity or a plain select::\n\n    @view_config(route_name='users', renderer='json')\n    @expose(User, metadata=dict(\n        password=dict(hidden=True, password=True, width=40),\n        is_anonymous=False,\n        ))\n    def users(request, results):\n        return results\n\n    sessions_t = Session.__table__\n\n    @view_config(route_name='sessions', renderer='json')\n    @expose(select([sessions_t], sessions_t.c.iduser == bindparam('user_id')))\n    def sessions(request, results):\n        return results\n\nThe decorated function may be a generator instead, which has the opportunity of freely\nmanipulate either the arguments received from the request, or the final result, or both as\nfollows::\n\n    @view_config(route_name='users', renderer='json')\n    @expose(User, metadata=dict(\n        password=dict(hidden=True, password=True, width=40),\n        is_anonymous=False,\n        ))\n    def complex():\n        # Receive request and arguments\n        request, args = (yield)\n\n        # Adjust parameters\n        args['new'] = True\n\n        # Note that bindparams by default are extracted from the “params”\n        # keyword argument\n        bindparams = args.setdefault('params', {})\n        bindparams['user_id'] = 2\n\n        if 'something' in params:\n            # Inject other conditions\n            something = args.pop('something')\n            conditions = (User.c.foo == something,)\n            result = yield args, conditions\n        else:\n            # Go on, and receive the final result\n            result = yield args\n\n        # Fix it up\n        result['COMPLEX'] = 'MAYBE'\n\n        yield result\n\n\nExamples\n~~~~~~~~\n\nAssuming the ``users`` view is added as ``/views/users``, it could be called in the following\nways:\n\n``GET /views/users``\n  would return a JSON response containing **all** users, like::\n\n    {\n      \"count\": 1234,\n      \"message\": \"Ok\",\n      \"success\": true,\n      \"root\": [\n        {\n          \"first_name\": \"Lele\",\n          \"last_name\": \"Gaifax\",\n          ...\n        },\n        {\n          \"first_name\": \"Mario\",\n          \"last_name\": \"Rossi\",\n          ...\n        },\n        ...\n      ]\n    }\n\n``GET /views/users?limit=1&start=2``\n  would return a JSON response containing just **one** user, the second::\n\n    {\n      \"count\": 1234,\n      \"message\": \"Ok\",\n      \"success\": true,\n      \"root\": [\n        {\n          \"first_name\": \"Mario\",\n          \"last_name\": \"Rossi\",\n          ...\n        }\n      ]\n    }\n\n``GET /views/users?filter_first_name=Lele``\n  would return a JSON response containing the records satisfying the given condition::\n\n    {\n      \"count\": 1,\n      \"message\": \"Ok\",\n      \"success\": true,\n      \"root\": [\n        {\n          \"first_name\": \"Lele\",\n          \"last_name\": \"Gaifax\",\n          ...\n        }\n      ]\n    }\n\n``GET /views/users?limit=1&only_cols=first_name,role_name``\n  would return a JSON response containing only the requested fields of a single record::\n\n    {\n      \"count\": 1234,\n      \"message\": \"Ok\",\n      \"success\": true,\n      \"root\": [\n        {\n          \"first_name\": \"Lele\",\n          \"role_name\": \"administrator\"\n        }\n      ]\n    }\n\n``GET /views/users?metadata=metadata&limit=0``\n  would return a JSON response containing a description of the schema::\n\n    {\n      \"metadata\": {\n        \"success_slot\": \"success\",\n        \"primary_key\": \"iduser\",\n        \"fields\": [\n          {\n            \"width\": 60,\n            \"hint\": \"The unique ID of the user.\",\n            \"align\": \"right\",\n            \"nullable\": false,\n            \"readonly\": true,\n            \"type\": \"int\",\n            \"hidden\": true,\n            \"label\": \"User ID\",\n            \"name\": \"iduser\"\n          },\n          ...\n        ],\n        \"root_slot\": \"root\",\n        \"count_slot\": \"count\"\n      },\n      \"message\": \"Ok\",\n      \"success\": true\n    }\n\nBrowse SoL__ sources for real usage examples.\n\n\n__ https://bitbucket.org/lele/sol/src/master/src/sol/views/data.py\n\n\nChanges\n-------\n\n3.3 (2016-02-23)\n~~~~~~~~~~~~~~~~\n\n* Handle the case when the column type cannot be determined\n\n\n3.2 (2016-02-19)\n~~~~~~~~~~~~~~~~\n\n* Fix corner case with queries ordered by a subselect\n\n\n3.1 (2016-02-07)\n~~~~~~~~~~~~~~~~\n\n* Fix metadata extraction of labelled columns on joined tables\n\n* Adjust size of time fields and align them to the right\n\n\n3.0 (2016-02-03)\n~~~~~~~~~~~~~~~~\n\n* Internal, backward incompatible code reorganization, splitting the main module into smaller\n  pieces\n\n* Handle corner cases with joined queries involving aliased tables\n\n\nPrevious changes are here__.\n\n__ https://bitbucket.org/lele/metapensiero.sqlalchemy.proxy/src/master/OLDERCHANGES.rst",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/lele/metapensiero.sqlalchemy.proxy",
    "keywords": null,
    "license": "GPLv3+",
    "maintainer": null,
    "maintainer_email": null,
    "name": "metapensiero.sqlalchemy.proxy",
    "package_url": "https://pypi.org/project/metapensiero.sqlalchemy.proxy/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/metapensiero.sqlalchemy.proxy/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/lele/metapensiero.sqlalchemy.proxy"
    },
    "release_url": "https://pypi.org/project/metapensiero.sqlalchemy.proxy/3.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Expose SQLAlchemy's queries and their metadata to a webservice",
    "version": "3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14507589,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f7e3efcb5ab221278cd041318a917a54ff4432ac5faddf8cf8a3bd4ce7b9740",
        "md5": "9da42262f5f515d385eb71588783f440",
        "sha256": "fe004347c4fec8250e7fe4e2dda431fb4b350b3464c3cabd400952761f9113e4"
      },
      "downloads": -1,
      "filename": "metapensiero.sqlalchemy.proxy-3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9da42262f5f515d385eb71588783f440",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 33495,
      "upload_time": "2016-02-23T15:51:52",
      "upload_time_iso_8601": "2016-02-23T15:51:52.622473Z",
      "url": "https://files.pythonhosted.org/packages/2f/7e/3efcb5ab221278cd041318a917a54ff4432ac5faddf8cf8a3bd4ce7b9740/metapensiero.sqlalchemy.proxy-3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}