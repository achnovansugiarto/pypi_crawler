{
  "info": {
    "author": "Michael Williamson",
    "author_email": "mike@zwobble.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Mammoth .docx to HTML converter\n===============================\n\nMammoth is designed to convert .docx documents, such as those created by\nMicrosoft Word, and convert them to HTML. Mammoth aims to produce simple\nand clean HTML by using semantic information in the document, and\nignoring other details. For instance, Mammoth converts any paragraph\nwith the style ``Heading 1`` to ``h1`` elements, rather than attempting\nto exactly copy the styling (font, text size, colour, etc.) of the\nheading.\n\nThere's a large mismatch between the structure used by .docx and the\nstructure of HTML, meaning that the conversion is unlikely to be perfect\nfor more complicated documents. Mammoth works best if you only use\nstyles to semantically mark up your document.\n\nThe following features are currently supported:\n\n-  Headings.\n\n-  Lists.\n\n-  Customisable mapping from your own docx styles to HTML. For instance,\n   you could convert ``WarningHeading`` to ``h1.warning`` by providing\n   an appropriate style mapping.\n\n-  Tables. The formatting of the table itself, such as borders, is\n   currently ignored, but the formatting of the text is treated the same\n   as in the rest of the document.\n\n-  Footnotes and endnotes.\n\n-  Images.\n\n-  Bold, italics, underlines, strikethrough, superscript and subscript.\n\n-  Links.\n\n-  Line breaks.\n\n-  Text boxes. The contents of the text box are treated as a separate\n   paragraph that appears after the paragraph containing the text box.\n\nInstallation\n------------\n\n::\n\n    pip install mammoth\n\nOther supported platforms\n-------------------------\n\n-  `JavaScript <https://github.com/mwilliamson/mammoth.js>`__, both the\n   browser and node.js. Available `on\n   npm <https://www.npmjs.com/package/mammoth>`__.\n\n-  `WordPress <https://wordpress.org/plugins/mammoth-docx-converter/>`__.\n\n-  `Java/JVM <https://github.com/mwilliamson/java-mammoth>`__. Available\n   `on Maven\n   Central <http://search.maven.org/#search|ga|1|g%3A%22org.zwobble.mammoth%22%20AND%20a%3A%22mammoth%22>`__.\n\n-  `.NET <https://github.com/mwilliamson/dotnet-mammoth>`__. Available\n   `on NuGet <https://www.nuget.org/packages/Mammoth/>`__.\n\nUsage\n-----\n\nCLI\n~~~\n\nYou can convert docx files by passing the path to the docx file and the\noutput file. For instance:\n\n::\n\n    mammoth document.docx output.html\n\nIf no output file is specified, output is written to stdout instead.\n\nThe output is an HTML fragment, rather than a full HTML document,\nencoded with UTF-8. Since the encoding is not explicitly set in the\nfragment, opening the output file in a web browser may cause Unicode\ncharacters to be rendered incorrectly if the browser doesn't default to\nUTF-8.\n\nImages\n^^^^^^\n\nBy default, images are included inline in the output HTML. If an output\ndirectory is specified by ``--output-dir``, the images are written to\nseparate files instead. For instance:\n\n::\n\n    mammoth document.docx --output-dir=output-dir\n\nExisting files will be overwritten if present.\n\nStyles\n^^^^^^\n\nA custom style map can be read from a file using ``--style-map``. For\ninstance:\n\n::\n\n    mammoth document.docx output.html --style-map=custom-style-map\n\nWhere ``custom-style-map`` looks something like:\n\n::\n\n    p[style-name='Aside Heading'] => div.aside > h2:fresh\n    p[style-name='Aside Text'] => div.aside > p:fresh\n\nMarkdown\n^^^^^^^^\n\nUsing ``--output-format=markdown`` will cause Markdown to be generated.\nFor instance:\n\n::\n\n    mammoth document.docx --output-format=markdown\n\nMarkdown support is still in its early stages, so you may find some\nfeatures are unsupported.\n\nLibrary\n~~~~~~~\n\nBasic conversion\n^^^^^^^^^^^^^^^^\n\nTo convert an existing .docx file to HTML, pass a file-like object to\n``mammoth.convert_to_html``. The file should be opened in binary mode.\nFor instance:\n\n.. code:: python\n\n    import mammoth\n\n    with open(\"document.docx\", \"rb\") as docx_file:\n        result = mammoth.convert_to_html(docx_file)\n        html = result.value # The generated HTML\n        messages = result.messages # Any messages, such as warnings during conversion\n\nYou can also extract the raw text of the document by using\n``mammoth.extract_raw_text``. This will ignore all formatting in the\ndocument. Each paragraph is followed by two newlines.\n\n.. code:: python\n\n    with open(\"document.docx\", \"rb\") as docx_file:\n        result = mammoth.extract_raw_text(docx_file)\n        text = result.value # The raw text\n        messages = result.messages # Any messages\n\nCustom style map\n^^^^^^^^^^^^^^^^\n\nBy default, Mammoth maps some common .docx styles to HTML elements. For\ninstance, a paragraph with the style name ``Heading 1`` is converted to\na ``h1`` element. You can pass in a custom map for styles by passing an\noptions object with a ``style_map`` property as a second argument to\n``convert_to_html``. A description of the syntax for style maps can be\nfound in the section \"Writing style maps\". For instance, if paragraphs\nwith the style name ``Section Title`` should be converted to ``h1``\nelements, and paragraphs with the style name ``Subsection Title`` should\nbe converted to ``h2`` elements:\n\n.. code:: python\n\n    import mammoth\n\n    style_map = \"\"\"\n    p[style-name='Section Title'] => h1:fresh\n    p[style-name='Subsection Title'] => h2:fresh\n    \"\"\"\n\n    with open(\"document.docx\", \"rb\") as docx_file:\n        result = mammoth.convert_to_html(docx_file, style_map=style_map)\n\nUser-defined style mappings are used in preference to the default style\nmappings. To stop using the default style mappings altogether, pass\n``include_default_style_map=False``:\n\n.. code:: python\n\n    result = mammoth.convert_to_html(docx_file, style_map=style_map, include_default_style_map=False)\n\nCustom image handlers\n^^^^^^^^^^^^^^^^^^^^^\n\nBy default, images are converted to ``<img>`` elements with the source\nincluded inline in the ``src`` attribute. This behaviour can be changed\nby setting the ``convert_image`` argument to an `image\nconverter <#image-converters>`__ .\n\nFor instance, the following would replicate the default behaviour:\n\n.. code:: python\n\n    def convert_image(image):\n        with image.open() as image_bytes:\n            encoded_src = base64.b64encode(image_bytes.read()).decode(\"ascii\")\n        \n        return {\n            \"src\": \"data:{0};base64,{1}\".format(image.content_type, encoded_src)\n        }\n\n    mammoth.convert_to_html(docx_file, convert_image=mammoth.images.img_element(convert_image))\n\nBold\n^^^^\n\nBy default, bold text is wrapped in ``<strong>`` tags. This behaviour\ncan be changed by adding a style mapping for ``b``. For instance, to\nwrap bold text in ``<em>`` tags:\n\n.. code:: python\n\n    style_map = \"b => em\"\n\n    with open(\"document.docx\", \"rb\") as docx_file:\n        result = mammoth.convert_to_html(docx_file, style_map=style_map)\n\nItalic\n^^^^^^\n\nBy default, italic text is wrapped in ``<em>`` tags. This behaviour can\nbe changed by adding a style mapping for ``i``. For instance, to wrap\nitalic text in ``<strong>`` tags:\n\n.. code:: python\n\n    style_map = \"i => strong\"\n\n    with open(\"document.docx\", \"rb\") as docx_file:\n        result = mammoth.convert_to_html(docx_file, style_map=style_map)\n\nUnderline\n^^^^^^^^^\n\nBy default, the underlining of any text is ignored since underlining can\nbe confused with links in HTML documents. This behaviour can be changed\nby adding a style mapping for ``u``. For instance, suppose that a source\ndocument uses underlining for emphasis. The following will wrap any\nexplicitly underlined source text in ``<em>`` tags:\n\n.. code:: python\n\n    import mammoth\n\n    style_map = \"u => em\"\n\n    with open(\"document.docx\", \"rb\") as docx_file:\n        result = mammoth.convert_to_html(docx_file, style_map=style_map)\n\nStrikethrough\n^^^^^^^^^^^^^\n\nBy default, strikethrough text is wrapped in ``<s>`` tags. This\nbehaviour can be changed by adding a style mapping for ``strike``. For\ninstance, to wrap strikethrough text in ``<del>`` tags:\n\n.. code:: python\n\n    style_map = \"strike => del\"\n\n    with open(\"document.docx\", \"rb\") as docx_file:\n        result = mammoth.convert_to_html(docx_file, style_map=style_map)\n\nAPI\n~~~\n\n``mammoth.convert_to_html(fileobj, **kwargs)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nConverts the source document to HTML.\n\n-  ``fileobj``: a file-like object containing the source document. Files\n   should be opened in binary mode.\n\n-  ``style_map``: a string to specify the mapping of Word styles to\n   HTML. See the section \"Writing style maps\" for a description of the\n   syntax.\n\n-  ``include_default_style_map``: by default, the style map passed in\n   ``style_map`` is combined with the default style map. To stop using\n   the default style map altogether, pass\n   ``include_default_style_map=False``.\n\n-  ``convert_image``: by default, images are converted to ``<img>``\n   elements with the source included inline in the ``src`` attribute.\n   Set this argument to an `image converter <#image-converters>`__ to\n   override the default behaviour.\n\n-  ``ignore_empty_paragraphs``: by default, empty paragraphs are\n   ignored. Set this option to ``False`` to preserve empty paragraphs in\n   the output.\n\n-  ``id_prefix``: a string to prepend to any generated IDs, such as\n   those used by bookmarks, footnotes and endnotes. Defaults to an empty\n   string.\n\n-  Returns a result with the following properties:\n\n-  ``value``: the generated HTML\n\n-  ``messages``: any messages, such as errors and warnings, generated\n   during the conversion\n\n``mammoth.convert_to_markdown(fileobj, **kwargs)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nConverts the source document to Markdown. This behaves the same as\n``convert_to_html``, except that the ``value`` property of the result\ncontains Markdown rather than HTML.\n\n``mammoth.extract_raw_text(fileobj)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nExtract the raw text of the document. This will ignore all formatting in\nthe document. Each paragraph is followed by two newlines.\n\n-  ``fileobj``: a file-like object containing the source document. Files\n   should be opened in binary mode.\n\n-  Returns a result with the following properties:\n\n-  ``value``: the raw text\n\n-  ``messages``: any messages, such as errors and warnings\n\n``mammoth.embed_style_map(fileobj, style_map)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nEmbeds the style map ``style_map`` into ``fileobj``. When Mammoth reads\na file object, it will use the embedded style if no explicit style map\nis provided.\n\n-  ``fileobj``: a file-like object containing the source document. Files\n   should be opened for reading and writing in binary mode.\n\n-  ``style_map``: the style map to embed.\n\n-  Returns ``None``.\n\nMessages\n^^^^^^^^\n\nEach message has the following properties:\n\n-  ``type``: a string representing the type of the message, such as\n   ``\"warning\"``\n\n-  ``message``: a string containing the actual message\n\nImage converters\n^^^^^^^^^^^^^^^^\n\nAn image converter can be created by calling\n``mammoth.images.img_element(func)``. This creates an ``<img>`` element\nfor each image in the original docx. ``func`` should be a function that\nhas one argument ``image``. This argument is the image element being\nconverted, and has the following properties:\n\n-  ``open()``: open the image file. Returns a file-like object.\n\n-  ``content_type``: the content type of the image, such as\n   ``image/png``.\n\n``func`` should return a ``dict`` of attributes for the ``<img>``\nelement. At a minimum, this should include the ``src`` attribute. If any\nalt text is found for the image, this will be automatically added to the\nelement's attributes.\n\nFor instance, the following replicates the default image conversion:\n\n.. code:: python\n\n    def convert_image(image):\n        with image.open() as image_bytes:\n            encoded_src = base64.b64encode(image_bytes.read()).decode(\"ascii\")\n        \n        return {\n            \"src\": \"data:{0};base64,{1}\".format(image.content_type, encoded_src)\n        }\n\n    mammoth.images.img_element(convert_image)\n\nWriting style maps\n------------------\n\nA style map is made up of a number of style mappings separated by new\nlines. Blank lines and lines starting with ``#`` are ignored.\n\nA style mapping has two parts:\n\n-  On the left, before the arrow, is the document element matcher.\n-  On the right, after the arrow, is the HTML path.\n\nWhen converting each paragraph, Mammoth finds the first style mapping\nwhere the document element matcher matches the current paragraph.\nMammoth then ensures the HTML path is satisfied.\n\nFreshness\n~~~~~~~~~\n\nWhen writing style mappings, it's helpful to understand Mammoth's notion\nof freshness. When generating, Mammoth will only close an HTML element\nwhen necessary. Otherwise, elements are reused.\n\nFor instance, suppose one of the specified style mappings is\n``p[style-name='Heading 1'] => h1``. If Mammoth encounters a .docx\nparagraph with the style name ``Heading 1``, the .docx paragraph is\nconverted to a ``h1`` element with the same text. If the next .docx\nparagraph also has the style name ``Heading 1``, then the text of that\nparagraph will be appended to the *existing* ``h1`` element, rather than\ncreating a new ``h1`` element.\n\nIn most cases, you'll probably want to generate a new ``h1`` element\ninstead. You can specify this by using the ``:fresh`` modifier:\n\n``p[style-name='Heading 1'] => h1:fresh``\n\nThe two consective ``Heading 1`` .docx paragraphs will then be converted\nto two separate ``h1`` elements.\n\nReusing elements is useful in generating more complicated HTML\nstructures. For instance, suppose your .docx contains asides. Each aside\nmight have a heading and some body text, which should be contained\nwithin a single ``div.aside`` element. In this case, style mappings\nsimilar to ``p[style-name='Aside Heading'] => div.aside > h2:fresh`` and\n``p[style-name='Aside Text'] => div.aside > p:fresh`` might be helpful.\n\nDocument element matchers\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nParagraphs and runs\n^^^^^^^^^^^^^^^^^^^\n\nMatch any paragraph:\n\n::\n\n    p\n\nMatch any run:\n\n::\n\n    r\n\nTo match a paragraph or run with a specific style, you can reference the\nstyle by name. This is the style name that is displayed in Microsoft\nWord or LibreOffice. For instance, to match a paragraph with the style\nname ``Heading 1``:\n\n::\n\n    p[style-name='Heading 1']\n\nStyles can also be referenced by style ID. This is the ID used\ninternally in the .docx file. To match a paragraph or run with a\nspecific style ID, append a dot followed by the style ID. For instance,\nto match a paragraph with the style ID ``Heading1``:\n\n::\n\n    p.Heading1\n\nBold\n^^^^\n\nMatch explicitly bold text:\n\n::\n\n    b\n\nNote that this matches text that has had bold explicitly applied to it.\nIt will not match any text that is bold because of its paragraph or run\nstyle.\n\nItalic\n^^^^^^\n\nMatch explicitly italic text:\n\n::\n\n    i\n\nNote that this matches text that has had italic explicitly applied to\nit. It will not match any text that is italic because of its paragraph\nor run style.\n\nUnderline\n^^^^^^^^^\n\nMatch explicitly underlined text:\n\n::\n\n    u\n\nNote that this matches text that has had underline explicitly applied to\nit. It will not match any text that is underlined because of its\nparagraph or run style.\n\nStrikethough\n^^^^^^^^^^^^\n\nMatch explicitly struckthrough text:\n\n::\n\n    strike\n\nNote that this matches text that has had strikethrough explicitly\napplied to it. It will not match any text that is struckthrough because\nof its paragraph or run style.\n\nHTML paths\n~~~~~~~~~~\n\nSingle elements\n^^^^^^^^^^^^^^^\n\nThe simplest HTML path is to specify a single element. For instance, to\nspecify an ``h1`` element:\n\n::\n\n    h1\n\nTo give an element a CSS class, append a dot followed by the name of the\nclass:\n\n::\n\n    h1.section-title\n\nTo require that an element is fresh, use ``:fresh``:\n\n::\n\n    h1:fresh\n\nModifiers must be used in the correct order:\n\n::\n\n    h1.section-title:fresh\n\nNested elements\n^^^^^^^^^^^^^^^\n\nUse ``>`` to specify nested elements. For instance, to specify ``h2``\nwithin ``div.aside``:\n\n::\n\n    div.aside > h2\n\nYou can nest elements to any depth.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/mwilliamson/python-mammoth",
    "keywords": "docx word office clean html markdown md",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mammoth",
    "package_url": "https://pypi.org/project/mammoth/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mammoth/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/mwilliamson/python-mammoth"
    },
    "release_url": "https://pypi.org/project/mammoth/1.0.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Convert Word documents from docx to simple and clean HTML and Markdown",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14954469,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "280579195d371aeeea7b1d3bf2e94b8f5125a3184428f8b3608ed6293eb486ac",
        "md5": "212303a73dc60762338b36281a15cf0b",
        "sha256": "759dd1cbcb208e6828af9075a86a35c5c384f5397e6b76a2966913a655b26836"
      },
      "downloads": -1,
      "filename": "mammoth-1.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "212303a73dc60762338b36281a15cf0b",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 39213,
      "upload_time": "2016-06-20T18:37:29",
      "upload_time_iso_8601": "2016-06-20T18:37:29.086668Z",
      "url": "https://files.pythonhosted.org/packages/28/05/79195d371aeeea7b1d3bf2e94b8f5125a3184428f8b3608ed6293eb486ac/mammoth-1.0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7856c987a1610af0d8a4ba5729b5f7e13630abc9016596d0f1e213cf482462c5",
        "md5": "2a31a7d6995e91d1a66f78fd8e45e17c",
        "sha256": "3b763ba49c774fa66c4c04afe4cdce33f1e25bc8b49bdd7776a8585952c6bd51"
      },
      "downloads": -1,
      "filename": "mammoth-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "2a31a7d6995e91d1a66f78fd8e45e17c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30679,
      "upload_time": "2016-06-20T18:37:24",
      "upload_time_iso_8601": "2016-06-20T18:37:24.530810Z",
      "url": "https://files.pythonhosted.org/packages/78/56/c987a1610af0d8a4ba5729b5f7e13630abc9016596d0f1e213cf482462c5/mammoth-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}