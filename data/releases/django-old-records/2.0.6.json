{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Django Old Records\n\nA simple Django app with tools to manage old records of Django models\n\n## Install\n\n`pip install django-old-records`\n\nAdd `django_old_records` to your project's `INSTALLED_APPS`\n## Usage\n\nThere is a manager that decides if a record is too old based on a date field (`created_at` by default) and a `max_age`. Ex.:\n\n```python\nfrom django_old_records import OldRecordsManager\nfrom django.db import models\n\nclass Cat(models.Model):\n\n    name = models.CharField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    max_age = 365 * 20 # 20 years\n\n    old_records = OldRecordsManager()\n```\n\n```python\nCat.old_records.all() # lists all cat records older than 20 years\n```\n\n`max_age` could be an integer representing days or a python `timedelta` for a more detailed value. Ex.:\n\n```python\nfrom django_old_records import OldRecordsManager\nfrom django.db import models\nfrom datetime import timedelta\n\nclass Cat(models.Model):\n\n    name = models.CharField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    max_age = timedelta(hours=4, seconds=20)\n\n    old_records = OldRecordsManager()\n```\n\n```python\nCat.old_records.all() # lists all cat records older than 4 hours and 20 seconds\n```\n\nIf your model's `created_at` has a different name you can specify it with the `created_at_field` attribute. Ex.:\n\n```python\nclass Cat(models.Model):\n\n    name = models.CharField()\n    was_born = models.DateTimeField(auto_now_add=True)\n\n    created_at_field = 'was_born'\n    max_age = 365 * 20 # 20 years\n\n    old_records = OldRecordsManager()\n```\nThere is also a management command that deletes all old records from all models with the `old_records` manager:\n\n`python manage.py delete_old_records`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lucashtm/django-old-records",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-old-records",
    "package_url": "https://pypi.org/project/django-old-records/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-old-records/",
    "project_urls": {
      "Homepage": "https://github.com/lucashtm/django-old-records"
    },
    "release_url": "https://pypi.org/project/django-old-records/2.0.6/",
    "requires_dist": [
      "Django (>=2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "A Python library to provide easy old records management for Django models",
    "version": "2.0.6",
    "yanked": true,
    "yanked_reason": "Broken"
  },
  "last_serial": 11607727,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0582147aeff6803a5899ad4f56a645823552c65ecdef7109723c1083fb59ad1b",
        "md5": "1250a07bfff8758f6d7b098b959b6c06",
        "sha256": "cd72a22c64e934cb372712dd970fcbf3ff56cb7352bae666fcf119c7827d0d8c"
      },
      "downloads": -1,
      "filename": "django_old_records-2.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1250a07bfff8758f6d7b098b959b6c06",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9125,
      "upload_time": "2021-09-30T20:29:33",
      "upload_time_iso_8601": "2021-09-30T20:29:33.352508Z",
      "url": "https://files.pythonhosted.org/packages/05/82/147aeff6803a5899ad4f56a645823552c65ecdef7109723c1083fb59ad1b/django_old_records-2.0.6-py3-none-any.whl",
      "yanked": true,
      "yanked_reason": "Broken"
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "114125e1e538c3924387374015764c8e1221906bbebfe64745a6f58542ef8d62",
        "md5": "67c8a4c469d4ff5a723329fadb873c0e",
        "sha256": "3be2d3040b9b3b8ffac74ad99e561dc6d49a6e7f5f20c9bfe491afcd3005376f"
      },
      "downloads": -1,
      "filename": "django-old-records-2.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "67c8a4c469d4ff5a723329fadb873c0e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4973,
      "upload_time": "2021-09-30T20:29:35",
      "upload_time_iso_8601": "2021-09-30T20:29:35.436883Z",
      "url": "https://files.pythonhosted.org/packages/11/41/25e1e538c3924387374015764c8e1221906bbebfe64745a6f58542ef8d62/django-old-records-2.0.6.tar.gz",
      "yanked": true,
      "yanked_reason": "Broken"
    }
  ],
  "vulnerabilities": []
}