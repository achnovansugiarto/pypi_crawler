{
  "info": {
    "author": "Novapost Team",
    "author_email": "peopleask@novapost.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "######################\ndjango-generic-filters\n######################\n\n`django-generic-filters` is a toolkit to filter results of Django's\n``ListView``, using forms.\n\nMain use cases are obviously search forms and filtered lists.\n\nAs a developer, given you have a ``ListView``, in order to let the user\nfilter the results:\n\n* use a form to easily render the filters as HTML;\n* the user typically sends the filters via GET;\n* validate the user's input using a Django form;\n* filter the Django view's queryset using form's cleaned data.\n\n.. image:: https://secure.travis-ci.org/peopledoc/django-generic-filters.png?branch=master\n   :alt: Build Status\n   :target: https://secure.travis-ci.org/peopledoc/django-generic-filters\n\n\n*******\nExample\n*******\n\n**views.py**\n\n.. code-block:: python\n\n    from django_genericfilters.views import FilteredListView\n\n\n    class UserListView(FilteredListView):\n        # ListView options. FilteredListView inherits from ListView.\n        model = User\n        template_name = 'user/user_list.html'\n        paginate_by = 10\n        context_object_name = 'users'\n\n        # FormMixin options. FilteredListView inherits from FormMixin.\n        form_class = UserListForm\n\n        # FilteredListView options.\n        search_fields = ['first_name', 'last_name', 'username', 'email']\n        filter_fields = ['is_active', 'is_staff', 'is_superuser']\n        default_order = 'last_name'\n\n        def form_valid(self, form):\n            \"\"\"Return the queryset when form has been submitted.\"\"\"\n            queryset = super(UserListView, self).form_valid(form)\n\n            # Handle specific fields of the custom ListForm\n            # Others are automatically handled by FilteredListView.\n\n            if form.cleaned_data['is_active'] == 'yes':\n                queryset = queryset.filter(is_active=True)\n            elif form.cleaned_data['is_active'] == 'no':\n                queryset = queryset.filter(is_active=False)\n\n            if form.cleaned_data['is_staff'] == 'yes':\n                queryset = queryset.filter(is_staff=True)\n            elif form.cleaned_data['is_staff'] == 'no':\n                queryset = queryset.filter(is_staff=False)\n\n            if form.cleaned_data['is_superuser'] == 'yes':\n                queryset = queryset.filter(is_superuser=True)\n            elif form.cleaned_data['is_superuser'] == 'no':\n                queryset = queryset.filter(is_superuser=False)\n\n            return queryset\n\n\n**forms.py**\n\n.. code-block:: python\n\n    from django import forms\n    from django.utils.translation import ugettext_lazy as _\n    from django_genericfilters import forms as gf\n\n\n    class UserListForm(gf.QueryFormMixin, gf.OrderFormMixin, gf.FilteredForm):\n        is_active = gf.ChoiceField(label=_('Status'),\n                                   choices=(('yes', _('Active')),\n                                            ('no', _('Unactive'))))\n\n        is_staff = gf.ChoiceField(label=_('Staff'))\n\n        is_superuser = gf.ChoiceField(label=_('Superuser'))\n\n        def get_order_by_choices(self):\n            return [('date_joined', _(u'date joined')),\n                    ('last_login', _(u'last login')),\n                    ('last_name', _(u'Name'))]\n\n\n*****\nForms\n*****\n\nSeveral form mixins are provided to cover frequent use cases:\n\n* ``OrderFormMixin`` with order_by and order_reverse fields.\n* ``QueryFormMixin`` for little full-text search using icontains.\n\nSee \"mixin\" documentation for details.\n\n*******\nRelease\n*******\n\nTo prepare a new version:\n\n* Create a branch named ``release/<version>``\n* In a commit, change the ``CHANGELOG`` and ``VERSION`` file to remove the ``.dev0`` and set the date of the release\n* In a second commit, change the ``VERSION`` to the next version number + ``.dev0``\n* Create a PR for your branch\n* When the PR is merged, tag the first commit with the version number, and create a github release using the ``CHANGELOG``\n\nTo release a new version (including the wheel)::\n\n    pip install twine\n    python setup.py sdist bdist_wheel\n    twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n\nAnd after testing everything works fine on the testing repository::\n\n    twine upload dist/*\n\n**********\nRessources\n**********\n\n* Documentation: https://django-generic-filters.readthedocs.io\n* PyPI page: http://pypi.python.org/pypi/django-generic-filters\n* Code repository: https://github.com/novapost/django-generic-filters\n* Bugtracker: https://github.com/novapost/django-generic-filters/issues\n* Continuous integration: https://travis-ci.org/novapost/django-generic-filters\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/novapost/django-generic-filters",
    "keywords": "class-based view,generic view,filters",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-generic-filters",
    "package_url": "https://pypi.org/project/django-generic-filters/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-generic-filters/",
    "project_urls": {
      "Homepage": "https://github.com/novapost/django-generic-filters"
    },
    "release_url": "https://pypi.org/project/django-generic-filters/2.0.0/",
    "requires_dist": [
      "Django",
      "munch"
    ],
    "requires_python": "",
    "summary": "Easy filters for your Generic ListView with Django.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13331584,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ed3a9182e1aaab9a560ee4ddb8bc7ecb71fc97870b60c4c110be8157764e101",
        "md5": "fef4fa327c5a8ec44fb06f1dfd2ceeee",
        "sha256": "ec767034090b97bc012627cca03fa59ae1763c91b7dbd0a71dba3741067d9569"
      },
      "downloads": -1,
      "filename": "django_generic_filters-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fef4fa327c5a8ec44fb06f1dfd2ceeee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20758,
      "upload_time": "2020-07-27T08:27:33",
      "upload_time_iso_8601": "2020-07-27T08:27:33.851153Z",
      "url": "https://files.pythonhosted.org/packages/6e/d3/a9182e1aaab9a560ee4ddb8bc7ecb71fc97870b60c4c110be8157764e101/django_generic_filters-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d8b65d4b0ccdd33d847bf069eb9abe5dad635893f14fac55c47921ac87bcecc",
        "md5": "f27a67300bc00cb658e76e5f24645f7b",
        "sha256": "ba1a8a27458b668dfbb3e7075fcf23322a94d74f8cc455beaad724eeb63f357a"
      },
      "downloads": -1,
      "filename": "django-generic-filters-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f27a67300bc00cb658e76e5f24645f7b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17791,
      "upload_time": "2020-07-27T08:27:36",
      "upload_time_iso_8601": "2020-07-27T08:27:36.335249Z",
      "url": "https://files.pythonhosted.org/packages/9d/8b/65d4b0ccdd33d847bf069eb9abe5dad635893f14fac55c47921ac87bcecc/django-generic-filters-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}