{
  "info": {
    "author": "Pritom Borogoria",
    "author_email": "pritom.saan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django User Interaction Log\n===========================\n\n.. image:: https://travis-ci.org/saanpritom/django_user_interaction_log.svg?branch=dev\n    :target: https://travis-ci.org/saanpritom/django_user_interaction_log\n\n.. image:: https://coveralls.io/repos/github/saanpritom/django_user_interaction_log/badge.svg\n    :target: https://coveralls.io/github/saanpritom/django_user_interaction_log\n\n.. image:: https://readthedocs.org/projects/django-event-logger/badge/?version=latest\n    :target: https://django-event-logger.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nDescription\n-----------\n\nDjango User Interaction Log keeps the log record of any operation on a Django\nbased application. Such as an user views a page on a Django application\nthen it may keeps record of the event. Like 'ExampleUser has performed\nread operation on ExampleCar at /example/path/ 10 minutes ago'. This is\na dummy log record.\n\nRequirements\n------------\n\nThis package only needs Django to run.\n\nVersion\n-------\n\nCurrent stable version is 1.0\n\nCompatibility\n-------------\n\nThis package is Tox tested with Python version 3.6, 3.7 and 3.8 with Django\nversion 2.0, 2.1, 2.2, 3.0, 3.1. However, this package is compatible with\nPython version > 3.0 and Django version > 2.0 but not compatible with\nPython 2.7 and Django version < 2.0\n\nInstallation\n------------\n\nThis package can be installed in two ways. One is via the pypi package manager\nand other is directly from the Github.\n\nFor pypi installation please use the following command\n\n.. code:: python\n\n    pip install django_user_interaction_log\n\nAnd for directly downloading from the Github repository use the following\ncommands\n\n.. code:: python\n\n    git clone https://github.com/saanpritom/django_user_interaction_log.git\n\nAfter successful installation open Django's settings.py file and add\n'django_user_interaction_log', on your INSTALLED_APPS list.\n\n.. code:: python\n\n   INSTALLED_APPS = [\n       ...\n       'django_user_interaction_log',\n   ]\n\nInclude the event loggers URLconf in your project urls.py like this\n\n.. code:: python\n\n   path('django_user_interaction_log/', include('django_user_interaction_log.urls')),\n\nHere you can put whatever you like on the path. Now run the app migration for\ncreating the database migrations\n\n.. code:: python\n\n   python manage.py makemigrations\n   python manage.py migrate\n\nFor Customizing settings there is a directory available for settings.py\nfile. However, if you do not put the dictionary on the settings.py file\nthen it will use the default values for the keys.\n\n.. code:: python\n\n   DJANGO_USER_INTERACTION_LOG_SETTINGS = {\n       'sensitive_test_cases': True,\n       'user_representer_field': '__str__',\n       'list_paginated_by': 100,\n   }\n\nThese are the default values for the keywords.\n\n1. 'sensitive_test_cases' means the package will run some test cases\n   that are dependent on a specific environment. Most of the cases these\n   tests will not create any error However, if it does then just make it\n   False to avoid those test cases running\n\n2. 'user_representer_field' means the default field that will be used to\n   construct the full log message for the actor. '**str**' means it is\n   pointing to the get_user_model default **str** method. If you want to\n   change it then please write the valid name of a user field. Example:\n   'user_representer_field': 'email' This will print email as the\n   default field for the actor\n\n3. 'list_paginated_by' means the pagination number for the log_list\n   page. It is an integer number. Default is 100 but you can put any\n   valid integer value\n\nBasic Usage\n-----------\n\nThis package ships with one Django Mixin for class based views and one\nfunction for function based views. The full example can be found on\nexamples.py file. However, the examples are explained below:\n\nFunction Based Views:\n'''''''''''''''''''''\n\non your views.py file import the following module\n\n.. code:: python\n\n   from django_user_interaction_log.registrars import create_log_record\n\nand on your function based view just add this method as below\n\n.. code:: python\n\n   def example_function_based_view(request):\n       \"\"\"This example is for the function based view users\"\"\"\n       target_object = None\n       if get_user_model().objects.filter().exists():\n           target_object = get_user_model().objects.first()\n       create_log_record(request=request, log_detail='django_user_interaction_log example function view test operation',\n                         log_target=target_object)\n       return render(request, 'example_templates/example_template.html')\n\nHere the create_log_record() function is taking 3 optional arguments.\n\n1. request (Which is a Django HttpRequest object. If not provide then\n   it's default value is None)\n\n2. log_detail (A text describing the action performed on that view by\n   the user. If not provided then it's default value is None)\n\n3. log_target (The instance of the page object. Suppose the page is\n   showing a Detail view of Books. so the log_target will be the single\n   book object. If the page is a list page and there are multiple\n   objects or no particular object then just do not use the log_target\n   argument. On that case it will use None as the default value. If any\n   string, integer or float number has passed to this argument then it\n   will raise a ValidationError)\n\nClass Based Views:\n''''''''''''''''''\n\non the views.py file import the following Mixin\n\n.. code:: python\n\n   from django_user_interaction_log.mixins import DjangoUserInteractionLogMixin\n\nand on any class based views use this mixin as follow:\n\n.. code:: python\n\n   class ExampleViewWithMixin(DjangoUserInteractionLogMixin, TemplateView):\n       \"\"\"This example is for the class based view users\"\"\"\n       template_name = 'example_templates/example_template.html'\n       django_user_interaction_log_detail_message = 'django_user_interaction_log example class view test operation'\n\n       def get_log_target_object(self, request, *args, **kwargs):\n           if get_user_model().objects.filter().exists():\n               return get_user_model().objects.first()\n           return None\n\nHere two things to notice that the 'django_user_interaction_log_log_detail_message' and\n'get_log_target_object()'\n\n1. 'django_user_interaction_log_log_detail_message' holds the action message performed\n   by the user on this view. If not assign then it will use the default\n   None\n2. 'get_log_target_object()' this method returns the instance of the\n   target object. Same as the log_target on the function based view.\n   Just pass this view specific object here. If the page is a list view\n   or there are no specific target_object then do not override this\n   method. If not overridden the this will use the default value which\n   is None\n\n\nLog Records List\n----------------\n\nThere are two views for the stored log records of this application. But\none cannot add, update or delete anything on these records through these\nviews. To add, delete or update a log record the user must have to use\nthe Django default Admin Panel. Where this app will be found on the name\nof 'Event Logger'\n\n1. The default list view can be checked from this URL\n\n  .. code:: python\n\n     https://your-ip-or-domain/django_user_interaction_log/\n\n  with ?format=table or ?format=file will show table and file formatted\n  lists of the logs. For a detail table format view the URL will be\n  https://your-ip-or-domain/django_user_interaction_log/?format=table and for a file\n  format view the URL will be\n  https://your-ip-or-domain/django_user_interaction_log/?format=file\n\n2. The default detail view can be checked from this URL\n\n  .. code:: python\n\n     https://your-ip-or-domain/django_user_interaction_log/3/\n\n  Here 3 is the primary key for that particular log record\n\nPackage Creator\n---------------\n\nThis package is created by Pritom Borogoria. The package is inspired by\n`Django Activity Stream`_\n\n.. _Django Activity Stream: https://github.com/justquick/django-activity-stream\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/saanpritom/django_user_interaction_log",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-user-interaction-log",
    "package_url": "https://pypi.org/project/django-user-interaction-log/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-user-interaction-log/",
    "project_urls": {
      "Homepage": "https://github.com/saanpritom/django_user_interaction_log"
    },
    "release_url": "https://pypi.org/project/django-user-interaction-log/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django app to keep user actions log records.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8802857,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff903c2719f006077cdfc4ef9ba8bebef190ecd4fbd9122daf922f3a531d5672",
        "md5": "855e4d0e45e58031365ca65b3db5686c",
        "sha256": "1408858cf92cac54f81534bdca18d2423bc39d5e55ec5bbc2de4720f90c61fbd"
      },
      "downloads": -1,
      "filename": "django_user_interaction_log-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "855e4d0e45e58031365ca65b3db5686c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25900,
      "upload_time": "2020-12-02T17:08:13",
      "upload_time_iso_8601": "2020-12-02T17:08:13.575668Z",
      "url": "https://files.pythonhosted.org/packages/ff/90/3c2719f006077cdfc4ef9ba8bebef190ecd4fbd9122daf922f3a531d5672/django_user_interaction_log-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8027f34cb4fcdd0d5f916c332c4dd2aff22485c647fb3f640070160787375896",
        "md5": "ea617afbabbde486030cd5af4ab2e3a7",
        "sha256": "345cc3c7d2244a6c23a468fedf967ea7d8639c32f918bd406b967caa2f3f0f70"
      },
      "downloads": -1,
      "filename": "django_user_interaction_log-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ea617afbabbde486030cd5af4ab2e3a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16340,
      "upload_time": "2020-12-02T17:08:15",
      "upload_time_iso_8601": "2020-12-02T17:08:15.094349Z",
      "url": "https://files.pythonhosted.org/packages/80/27/f34cb4fcdd0d5f916c332c4dd2aff22485c647fb3f640070160787375896/django_user_interaction_log-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}