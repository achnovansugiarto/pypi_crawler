{
  "info": {
    "author": "Robin Aaberg",
    "author_email": "robin.garen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Goto\nv1.6.2\n\n*Goto is a magic tool that takes you were you want to be, now.*\n\nWhen you are involved in different projects,  they all  have their own folders, important files, links to good articles or key websites. The problem is that all these are spread out on different locations.\n\nBy adding shortcuts to goto, so called magic words, you can jump to them.\nThe shortcuts are associated with a project name. And you can switch the project context\nany time.\n\n### Usage\n\n```bash\n$ project your-project\nactive project is now: your-project\n\n$ goto add github https://github.com/user/your-project\nAdded magic word github\n\n$ goto github\n# opens https://github.com/user/your-project in your browser\n```\n\n### Setup\n\n#### Mac OS-X / Linux / Win (git bash)\n```\npip install magicgoto\n```\nAfter install, close and reopen your terminal.\n\n#### Windows (using gitbash)\nOpen git bash and do the same as above.\n\n\ngit bash is included when you install git on windows usually.\n\nSome git bash installs comes without any rcfile. \nIf you get this error: `Ah hoy! Failed to determine rcfile...` \nyou can fix it by running`touch ~/.bash_profile` and then `install_goto`\n\n\n\n\n#### Linux - User Site install\nOn linux, the recommended way to install goto is by `pip install --user magicgoto`\n\n\n> This requires that you have your User site bin  in your path.\n> Usually this is `~/.local/bin`. So adding `PATH=\"${HOME}/.local/bin:$PATH\"` to\n> your rcfile should do the trick in most cases.\n\n\n### Commands\n\n##### goto\n\n*Used to add and jump to shortcuts.*\n\n```\n    The basics\n        goto <magicword>                        Go to shortcut\n        goto [<magicword>...]                   Go to many shortcuts\n        goto add    <magicword> <url or path>   Add shortcut\n        goto update <magicword> <new url/path>  Update shortcut\n        goto rename <magicword> <new name>      Rename shortcut\n        goto rm     <magicword>                 Remove shortcut\n        goto show   <magicword>                 Show url of shortcut\n        goto list                               List all shortcuts\n        goto list -v                            With the urls printed\n\n    Working with folders and files\n        goto <magicword>              Goto will cd to a folder shortcut by default.\n        goto cd   <magicword>         cd in terminal\n        goto open <magicword>         Open in finder/file explorer\n\n    Launching Code editors\n        goto subl                     Opens Sublime Text in code folder*\n        goto idea                     Opens IntelliJ in code folder*\n        goto vscode                   Opens Visual Studio Code in code folder*\n\n    * requires a magicword named code pointing to a folder.\n        goto add code <path to folder with code>\n```\n\n\n\n**project**\n\n*Used to add and switch project contexts.*\n\n```\nUsage: project [add <projectname>] | [list]\n   other commands:\n     add <projectname> - adds a new project and makes it the active project.\n     rm  <projectname> - removes the project\n     list              - lists all projects\n     deactivate        - deactivates goto project\n     help              - if you want to read this one more time.\n```\n\n\n\n\n#### How does Goto know which project is the active one?\n\nYou tell goto with this command:  `project <project-name>`\n\nExamples: `project django-blog`  | `project website`  |  `project goto`\n\n``````bash\n$ project goto\nactive project is now: goto\n``````\n\n\n\nRunning `project` with no arguments, will show you the current active project.\n\n```bash\n$ project\ngoto\n```\n\n\n\n\n#### How does Goto know which projects exists?\n\nYou tell Goto with the command:\n\n     project add <project-name>\n\n\n\n\n\n#### How does Goto know which shortcuts there are in the project?\n\nDefine them once, and use them a thousand times. By this command:\n\n     goto add <magic-word> <URI>\n\nA **magic-word** is the name of your shortcut.\nThe **URI** is the target of your shortcut. It could be a file, a directory, a web-url.\n\n##### Examples:\n\n* `goto add github https://github.com/technocake/goto`\n* `goto add music ~/the/sound/of/music`\n* `goto add jira http://jira.com/project/X`\n\nFirst one adds a url to a repo on github relevant to the project.\nThe second one adds a folder path.\n\nWhen you activate a project, Goto remembers which project you are thinking about right now.\n\nThen it makes sense to call the shortcut visualstudio, because it implicit means the visual studio project associated with this project.\n\nExamples:\n\n    goto add jira http://jira.com/project/X\n\n\n\n## Uninstall\n\n```bash\npip uninstall magicgoto\n# remove source start_goto from your ~/.bash_profile | ~/.bashrc | ~/.zshrc\n# project data is kept intact in ~/.goto\n```\n\n\n## Features\n\n### Goto many things with one command\n\n![goto-many](./images/goto-many.gif)\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gotogoto.ninja",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "magicgoto",
    "package_url": "https://pypi.org/project/magicgoto/",
    "platform": "",
    "project_url": "https://pypi.org/project/magicgoto/",
    "project_urls": {
      "Homepage": "https://gotogoto.ninja"
    },
    "release_url": "https://pypi.org/project/magicgoto/1.6.2/",
    "requires_dist": [
      "pyperclip",
      "gitpython",
      "future"
    ],
    "requires_python": ">=3.3",
    "summary": "Magic goto - goto where you need to be, right now.",
    "version": "1.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12005420,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2776e6feb2225ae99f7ebfbc6d8db9de7a6cc295ef1585e1e1d81b810919aac",
        "md5": "68d1836d7d8aa06ce3a9bb1616bf9515",
        "sha256": "15cd5477f61a28810df6e800aba261cdf2e823307246ddcabc54cdcc3e722beb"
      },
      "downloads": -1,
      "filename": "magicgoto-1.6.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "68d1836d7d8aa06ce3a9bb1616bf9515",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.3",
      "size": 32025,
      "upload_time": "2021-11-12T12:02:02",
      "upload_time_iso_8601": "2021-11-12T12:02:02.929143Z",
      "url": "https://files.pythonhosted.org/packages/d2/77/6e6feb2225ae99f7ebfbc6d8db9de7a6cc295ef1585e1e1d81b810919aac/magicgoto-1.6.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c67fbbf192ba5e69730f05e6e046ebe04b3dd1102d937da2e32ef5bbca004f9",
        "md5": "19cce00a9b222a7135b481bf6af9759b",
        "sha256": "6ad12a6ef86bb249b074705608db8484878414e4acf3e9314e581ecc3b2b96cd"
      },
      "downloads": -1,
      "filename": "magicgoto-1.6.2.tar.gz",
      "has_sig": false,
      "md5_digest": "19cce00a9b222a7135b481bf6af9759b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.3",
      "size": 31512,
      "upload_time": "2021-11-12T12:02:04",
      "upload_time_iso_8601": "2021-11-12T12:02:04.233545Z",
      "url": "https://files.pythonhosted.org/packages/0c/67/fbbf192ba5e69730f05e6e046ebe04b3dd1102d937da2e32ef5bbca004f9/magicgoto-1.6.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}