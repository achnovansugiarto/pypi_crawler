{
  "info": {
    "author": "Bo Arnold",
    "author_email": "bo@ridescout.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Django-Splunk-Logging\n\n## About\nDjango-Splunk-Logging implements a singleton data format and pipes your events into splunk enterprise by utilizing the HTTP Event Collector.\n\n### SplunkEvent Example\n```\ndef update_name_api(request):\n    user = request.user\n    user.name = request.GET['name']\n    user.save()\n    from django_splunk_logging import SplunkEvent\n    SplunkEvent(key=\"User_event\",\n                request=request,\n                name=\"name_change\",\n                obj=user,\n                user=user)\n    return \"Success!\"\n```\n\nThis will send an event into splunk with the sourcetype 'User_event':\n```\n{\n    auth:  true,\n    user:  303,\n    event:  name_change,\n    eventData: {\n      name:\"NEW NAME\",\n      email:\"USER@MAIL.COM\"\n      **other user model data**\n   },\n    request: {\n      GET: {\n        api_key:  xxxxxxxxxxxxxxxxxxxxxx \n     },\n     POST: {\n         name: \"NEW NAME\"\n     },\n      META: {\n        CLIENT:  iPhone,\n        HTTP_HOST:  website.com,\n        HTTP_REFERER:  null,\n        HTTP_USER_AGENT:  iPhone; iOS 9.2.1; Scale/2.00,\n        HTTP_X_FORWARDED_FOR:  70.196.185.31 \n     } \n      host:  website.com,\n      method:  POST,\n      path:  /auth/profile/?api_key=xxxxxxxxxxxxxxxxxxxxxx \n   } \n}\n```\n\n### Logging Example\nAlso contained is a logging handler that you can set up in your django settings to insert logging messages that are raised throughout your application.\n```\ndef api_function(request):\n    if request.GET.get('special', None):\n        logging.info(\"Special function is firing!\")\n        ...\n```\nThis will out throw an event into splunk with the sourcetype 'server_log':\n```\n{\n    auth:  true\n    event:  INFO \n    eventData: {\n      line:  539 \n      message:  \"Special function is firing!\"\n      method:  api_function \n      module:  the_api_module \n      path:  /path/to/the_api_module.py\n   } \n    request: {\n      GET: { \n      special: true,\n      api_key: xxxxxxxxxxxxxxxxxxxxx\n     } \n      META: {\n      ... \n     } \n      Version:  1.0.14 \n      host:  website.com \n      method:  GET \n      path:  /api/function/?api_key=xxxxxxxxxxxxxxxxxxxxx \n   } \n    user:  303 \n}\n```\n\n### Exception example\nThis handler also works with raising an exception:\n```\nclass InvalidParameter(Exception):\n    http_response_code = 400\n    def __init__(self, message=None, **kwargs):\n        super(InvalidParameter, self).__init__(message)\n\ndef location(request):\n    if not request.GET.get('lat', None) and request.GET.get('lng', None):\n        raise InvalidParameter(\"Must supply lat and lng\")\n```\n\nWill send data to splunk as well:\n```\n{\n    auth:  false \n    event:  ERROR \n    eventData: {\n      line:  322 \n      message:  Must supply lat and lng\n      method:  location\n      module:  location_api\n      path:  /path/to/location_api.py\n      response_code:  400 \n      traceback:  Traceback (most recent call last):\n          File \"/home/ubuntu/beta/production/ridescout/api/decorators.py\", line 150, in wrapper\n            api_results = f(*args, **kwargs)\n          File \"/home/ubuntu/beta/production/ridescout/sdk/api.py\", line 322, in sync\n            platform))\n        InvalidParameterError: No app org.trimet.mt.mobiletickets for android\n   } \n    request: {\n      GET: {\n        api_key:  xxxxxxxxxxxxxxxxx \n        lat:  0.0 \n     } \n      META: { [-] \n        CLIENT:  android \n        HTTP_HOST:  website.com \n        HTTP_REFERER:  null \n        HTTP_USER_AGENT:  okhttp/2.5.0 \n        HTTP_X_FORWARDED_FOR:  24.163.101.232 \n     } \n      Version:  1.0.14 \n      host:  website.com \n      method:  GET \n      path:  /location/?lat=0.0&api_key=xxxxxxxxxxxxxxxxx \n   } \n    user:  null \n}\n```\n\n## Installation\nRun `pip install django-splunk-logging`\n\nAdd `splunk` to `INSTALLED_APPS` in your django settings\n```\nINSTALLED_APPS = (\n...\n'django_splunk_logging',\n)\n```\n\nIn your django settings:\n```\n...\nLOGGING = {\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n        'splunk':{\n            'class':'django_splunk_logging.SplunkHandler'\n        },\n    }\n    'loggers':{\n        'django':{\n            'handlers': ['console','splunk',],\n            'propagate':False,\n        },\n    }\n}\n##\n# Django-Splunk-Logging\n##\n# Enable or disable Splunk Logs\nSPLUNK_LOGS = False\n# Generic fallback auth key for unassigned keys\nSPLUNK_DEFAULT_TOKEN = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx\"\n# Registered Auth keys with your splunk event collector\nSPLUNK_TOKENS = {\n    \"server_log\":\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx\",\n    \"user_event\":\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx\",\n    \"my_special_event\":\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx\",\n}\n# Splunk Event Collector has enabled HTTPS\nSPLUNK_HTTPS = False\n# Splunk Server Address\nSPLUNK_ADDRESS = \"12.345.67.891\"\n# Event Collector Port (default: 8088)\nSPLUNK_EVENT_COLLECTOR_PORT = \"8088\"\n# Enable threading on event sending\nSPLUNK_THREAD_EVENTS = True\n```\n\nOptionally, you can specify `VERSION` in settings to add to the splunk data",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RideScout/django-splunk-logging",
    "keywords": "splunk,logging,HTTP Event Collector",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django_splunk_logging",
    "package_url": "https://pypi.org/project/django_splunk_logging/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django_splunk_logging/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/RideScout/django-splunk-logging"
    },
    "release_url": "https://pypi.org/project/django_splunk_logging/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Splunk Logging integration for Django",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2089373,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bcf473122cca8b3d5bf95e2a1fd89d894ae6ac880e34db56455fbecf0cfa1f1",
        "md5": "bace9810d6da92e8cabb2467b97be1c7",
        "sha256": "bdaa2c243eeb78d8c46a01b55d42f762bac72a969af9f1c5cca665f0d6df2dd2"
      },
      "downloads": -1,
      "filename": "django_splunk_logging-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bace9810d6da92e8cabb2467b97be1c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6711,
      "upload_time": "2016-02-26T22:42:27",
      "upload_time_iso_8601": "2016-02-26T22:42:27.592651Z",
      "url": "https://files.pythonhosted.org/packages/6b/cf/473122cca8b3d5bf95e2a1fd89d894ae6ac880e34db56455fbecf0cfa1f1/django_splunk_logging-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}