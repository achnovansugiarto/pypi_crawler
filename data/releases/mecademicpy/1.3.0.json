{
  "info": {
    "author": "Mecademic",
    "author_email": "support@mecademic.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![Mecademic](https://github.com/Mecademic/mecademicpy/blob/main/docs/logo/mecademic_logo.jpg?raw=true  \"Mecademic\")\r\n# Mecademic Python API\r\n\r\nA python module designed for robot products from Mecademic. The module offers tools that give access to the features of the Mecademic Robots such as MoveLin and MoveJoints available through the TCP/IP text interface. The module can be started from a terminal or a python application and controls the Mecademic products. \r\n\r\n#### Supported Robots\r\n\r\n * Meca500 R2, R3\r\n\r\n#### Supported Firmware Versions\r\n\r\n * 8.3 and up\r\n\r\n## Prerequisites\r\n\r\nPlease read the [user programming manual](https://mecademic.com/resources/documentation) to understand concepts necessary for proper usage of the API. This API implements a subset of the commands in the `Communicating over TCP/IP` section. For the exact list of available commands, use the `help()` command as explained in [API Reference](#api-reference).\r\n\r\nTo be able to use the module without unexpected errors, the user must have a copy of python installed on their machine and it is required to use python version 3.7 or higher. We recommend using Python 3.9 since this is the version on which this module is actively tested. [Python](https://www.python.org/) can be installed from its main website (a reboot will be require after the installation to complete the setup).\r\n\r\nThe user can validate their python installation by running `python --version` in a terminal.\r\n\r\nThis library is compatible with Windows, Linux, and Mac.\r\n\r\n## Downloading the package\r\n\r\nTo download and install the package, the user can easily do so through pip. Pip will download and install the package on your machine and place it in the python local packages directory. This is done by running the following command:\r\n\r\n```\r\npip install mecademicpy\r\n``` \r\n\r\n## Quick Start\r\n\r\n**Ensure the robot is properly connected to the computer, powered on, and in a nominal state.**\r\n\r\nIn a python shell or script, import the library. Then initialize an instance of the `Robot` class. Finally, use the `Connect` function by passing the IP Address of the robot as an argument to establish a connection:\r\n\r\n```python\r\nimport mecademicpy.robot as mdr\r\nrobot = mdr.Robot()\r\nrobot.Connect(address='192.168.0.100')\r\n```\r\n\r\nThe `Connect` function will raise if connection with robot fails.\r\nThis function is synchronous (awaits for success or timeout) even when using the `Robot` class in [asynchronous mode](#synchronous-vs.-asynchronous-mode). \r\n\r\nBefore using the robot, it must be activated and homed. To do so, run the following functions:\r\n\r\n```python\r\nrobot.ActivateRobot()\r\nrobot.Home()\r\n```\r\n\r\nThe robot should move slightly to perform its homing routine. We can also use `robot.WaitHomed()` or [synchronous mode](#synchronous-vs.-asynchronous-mode) to block execution until homing is done. \r\n\r\nOnce homing is complete, the robot is now ready to perform operations. [The user programming manual](https://mecademic.com/resources/documentation) or the documentation in the module is sufficient to be able to make the Robot perform actions and control the robot. \r\n\r\nHere is an example of a simple motion to perform:\r\n\r\n```python\r\nrobot.MoveJoints(0, 0, 0, 0, 0, 0)\r\nrobot.MoveJoints(0, -60, 60, 0, 0, 0)\r\n```\r\n\r\nWhen done with the robot, the user should always deactivate and disconnect. Note that deactivating before the motion is complete will cause the motion to immediately stop. The user can wait for motions to complete using `WaitIdle()`.\r\n\r\nDeactivating and disconnecting can be done with the following commands:\r\n\r\n```python\r\nrobot.WaitIdle()\r\nrobot.DeactivateRobot()\r\nrobot.Disconnect()\r\n```\r\n\r\nIf the robot encounters an error during operation, the robot will go into an error mode. In this mode, the module will block any command to the robot unless the error is reset. To properly reset errors on the robot, the following function must be run:\r\n\r\n```python\r\nrobot.ResetError()\r\n```\r\n\r\nIt is recommended to use `GetStatusRobot()` to learn about the current robot status before resuming operation.\r\n\r\nFor complete and working examples, please refer to the `examples` folder.\r\n\r\n## Features and Additional Information\r\n\r\n### Synchronous vs. Asynchronous Mode\r\n\r\nBy default the API operates in 'asynchronous mode', which means sending a command to the robot does not block program execution. To illustrate, the following code will be able to successfully print out the changing joint values resulting from the `MoveJoints` command:\r\n\r\n```python\r\nimport mecademicpy.robot as mdr\r\nimport time\r\n\r\nrobot = mdr.Robot()\r\nrobot.Connect(address='192.168.0.100', enable_synchronous_mode=False)\r\nrobot.ActivateAndHome()\r\n\r\nrobot.MoveJoints(0, 0, 0, 0, 0, 0)\r\nrobot.MoveJoints(0, -60, 60, 0, 0, 0)\r\n\r\nfor _ in range(100):\r\n    print(robot.GetJoints())\r\n    time.sleep(0.05)\r\n\r\nrobot.WaitIdle()\r\nrobot.DeactivateRobot()\r\nrobot.Disconnect()\r\n```\r\n\r\nHowever, sometimes it is desired for programs to wait until the previous command is completed before sending the next command. It is generally encouraged to use the [checkpoints](#checkpoints) system or the various `Wait()` functions, but for smaller or simpler programs, the user can set `enable_synchronous_mode=True` to have each command block until the robot has completed the command.\r\n\r\nThe code block below will only print out the final joint position, since `robot.GetJoints()` doesn't execute until the motion is complete.\r\n\r\n```python\r\nimport mecademicpy.robot as mdr\r\nrobot = mdr.Robot()\r\nrobot.Connect(address='192.168.0.100', enable_synchronous_mode=True)\r\nrobot.ActivateAndHome()\r\n\r\nrobot.MoveJoints(0, 0, 0, 0, 0, 0)\r\nrobot.MoveJoints(0, -60, 60, 0, 0, 0)\r\n\r\n# The returned robot position will be (0, -60, 60, 0, 0, 0), because this line will only be executed once MoveJoints(0, -60, 60, 0, 0, 0) has completed.\r\nprint(robot.GetJoints())\r\n\r\nrobot.DeactivateRobot()\r\nrobot.Disconnect()\r\n```\r\n\r\nOne disadvantage of using synchronous mode is that blending between motions is not possible, since the next motion is not sent to the robot until the previous motion is complete.\r\n\r\n### Disconnect on Exception\r\n\r\nBy default, if any unrecoverable error occurs during usage of the Robot class, the class will automatically disconnect from the robot to avoid possible issues. Disconnection also causes the robot to pause its motion.\r\n\r\nHowever, disconnecting on exceptions may be undesired when using an interactive terminal or Jupyter notebook, as an accidental mal-formed function call may cause disconnection. As such, this feature can be disabled by setting `disconnect_on_exception=False` when attempting the connection:\r\n\r\n```python\r\nrobot.Connect(address='192.168.0.100', disconnect_on_exception=False)\r\n```\r\n\r\n### Checkpoints\r\n\r\nThe checkpoint system allows for creating event objects which will be triggered once the robot reaches a specified point in its execution. The `SetCheckpoint(n)` call registers a checkpoint with the robot (with `n` as the ID), and returns an event-type object that can be used to wait for the checkpoint. This is true for both robot connection type (asynchronous and synchronous mode). For example, the following code will wait until both `MoveJoints()` motions have completed, and then print \"`The MoveJoints() motions are complete.`\":\r\n\r\n```python\r\nrobot.MoveJoints(0, -60, 60, 0, 0, 0)\r\nrobot.MoveJoints(0, 0, 0, 0, 0, 0)\r\ncheckpoint_1 = robot.SetCheckpoint(1)\r\n\r\ncheckpoint_1.wait(timeout=10) # A timeout of 10s is set to avoid infinite wait in case of error.\r\nprint('The MoveJoints() motions are complete.')\r\n```\r\n\r\nNote that creating multiple checkpoints with the same ID is possible but not recommended. The checkpoints will be triggered in the order they are set.\r\n\r\nCheckpoints may also be set in an offline program, saved to robot memory. Use `ExpectExternalCheckpoint(n)` to receive these checkpoints while the robot is running the offline program. The call to `ExpectExternalCheckpoint(n)` should be made before the offline program is started, or otherwise must be guaranteed to occur before the robot can possibly send the checkpoint. For example, the following code will start an offline program and expect to receive a checkpoint from the program, and then print \"`Received expected external checkpoint`\":\r\n\r\n```python\r\nrobot.StartOfflineProgram(1)\r\ncheckpoint_event = robot.ExpectExternalCheckpoint(5)\r\ncheckpoint_event.wait(30)\r\nprint(\"Received expected external checkpoint\")\r\n```\r\nwhere offline program 1 is\r\n```\r\nStartSaving(1)\r\nMoveJoints(100,0,0,0,0,0)\r\nMoveJoints(-100,0,0,0,0,0)\r\nSetCheckpoint(5)\r\nMoveJoints(0,-60,60,0,0,0)\r\nMoveJoints(0,0,0,0,0,0)\r\nSetOfflineProgramLoop(1)\r\nStopSaving\r\n```\r\n\r\nIf the robot motion command queue is cleared (using `ClearMotion()` for example), or the robot is disconnected, all pending checkpoints will be aborted, and all active `wait()` calls will raise an `InterruptException`.\r\n\r\n### Callbacks\r\n\r\nThe `Robot` class supports user-provided callback functions on a variety of events. These callbacks are entirely optional and are not required, but useful to implement asynchronous applications. The available events are listed in the `RobotCallbacks` class. Here are some of these callbacks:\r\n\r\n- `on_connected`\r\n- `on_disconnected`\r\n- `on_activated`\r\n- `on_deactivated`\r\n- `on_homed`\r\n- `on_error`\r\n- `on_checkpoint_reached`\r\n- etc... (refer to class `RobotCallbacks` for exhaustive list of callbacks)\r\n\r\nNote that some callbacks pass arguments. For example `on_checkpoint_reached` passes the ID of the checkpoint, `on_command_message` and `on_monitor_message` passes a `mecademicpy.robot.Message` object. Refer to class documentation for details.\r\n\r\nA simple usage example:\r\n\r\n```python\r\nimport mecademicpy.robot as mdr\r\nrobot = mdr.Robot()\r\n\r\ndef print_connected():\r\n    print('Connected!')\r\n\r\ncallbacks = mdr.RobotCallbacks()\r\ncallbacks.on_connected = print_connected\r\n\r\nrobot.RegisterCallbacks(callbacks=callbacks, run_callbacks_in_separate_thread=True)\r\nrobot.Connect(address='192.168.0.100') # Will print 'Connected!' if successful.\r\n```\r\n\r\nIf the user does not want to automatically run callbacks in a separate thread, set `run_callbacks_in_separate_thread=False` and call `RunCallbacks()` when ready to run all triggered callbacks.\r\n\r\nRunning any callback in a separate thread (either through the `Robot` class or otherwise) requires that the callback function is thread-safe and uses the proper locks when accessing shared state. Calling any public method of the `Robot` class is thread-safe.\r\n\r\nNote that, due to a Python limitation, all Python threads share the same CPU core and will not take advantage of parallelism and multiple CPU cores of a PC. Unfortunately, this means that an application performing heavy computations (in callback thread or in any other thread) may impact the performance of the `Robot` class (especially when processing many monitoring messages at high frequency).\r\n\r\nIf non-trivial computation and high-frequency monitoring are both necessary, the user may offload computation into a separate python process using the built-in [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) library.\r\n\r\n### Handling Robot Errors\r\n\r\nIf the robot encounters an error during use, the robot will go into error mode. In this mode, the module will refuse any command to the robot unless the error is reset. If the robot is in an error state, `GetStatusRobot().error_status` will return `True`. To properly reset errors on the robot, the following function must be run:\r\n\r\n```python\r\nrobot.ResetError()\r\n```\r\n\r\nIt is recommended to use `GetStatusRobot()` to learn about the current robot status and reset the relevant flags to an appropriate state before resuming operation. For example, an error may require to call `ResumeMotion()`. In this case, verify that `GetStatusRobot().pause_motion_status` is set to `True` before calling `ResumeMotion()`.\r\n\r\nThe `on_error` callback can also be used to manage robot errors.\r\n\r\nImproper use of the class can also cause exceptions to be raised. For example, calling `MoveJoints()` without any arguments will raise an exception. \r\n\r\nIf the user is waiting on an event or checkpoint that the `Robot` class later determines will never occur, the event will unblock and raise an exception. For example, if the user is waiting on a checkpoint (`WaitCheckpoint`), but calls `Disconnect()` or `ClearMotion()` before the checkpoint is received, the checkpoint will unblock and raise an exception. Events and checkpoints will also unblock with exception on robot error state.\r\n\r\nThe user should use python's built-in `try...except` blocks to handle appropriate exceptions.\r\n\r\n### Preserved State on Disconnection\r\n\r\nOnce the robot is disconnected, not all states are immediately cleared. Therefore, it is possible to still get the last-known state of the robot. \r\n\r\n### Logging Data to File\r\n\r\nIt is possible to continuously log the robot state to a file using the API either using the `StartLogging` and `EndLogging` functions or using the `FileLogger` context. \r\n\r\nAn example usage of `StartLogging` and `EngLogging`:\r\n\r\n```python\r\nrobot.WaitIdle()\r\nrobot.WaitEndOfCycle()\r\nrobot.StartLogging(0.001)\r\ntry:\r\n    robot.MoveJoints(0, -60, 60, 0, 0, 0)\r\n    robot.MoveJoints(0, 0, 0, 0, 0, 0)\r\n    robot.WaitIdle()\r\nexcept BaseException as e:\r\n    print(f'Logging unsuccessful, exception encountered: {e}')\r\nfinally:\r\n    robot.EndLogging()\r\n```\r\n\r\nNote that the user should wait for the robot to be idle before starting to log, and also wait for idle before ending the log. This is to ensure the log correctly captures the movements of interest. It is also recommended to wait for the end of a monitoring cycle before and after logging, as the logger will thus produce more consistently sized files.\r\n\r\nIt should also be noted that it is mandatory to give a monitoring interval, in seconds, to `StartLogging`, to specify at which rate data should be logged. In the example above, the monitoring interval is set at 0.001 seconds, or 1 ms. It is the minimum monitoring interval that can be set using `SetMonitoringInterval`, which is the robot command used by `StartLogging` to choose the monitoring interval.\r\n\r\nThe user can also use the `FileLogger` context:\r\n\r\n```python\r\nrobot.WaitIdle()\r\nrobot.WaitEndOfCycle()\r\nwith robot.FileLogger(0.001):\r\n    robot.MoveJoints(0, -60, 60, 0, 0, 0)\r\n    robot.MoveJoints(0, 0, 0, 0, 0, 0)\r\n    robot.WaitIdle()\r\n```\r\n\r\nThe `FileLogger` context will automatically end logging after either completing the `with` block or encountering an exception.\r\n\r\nThe user can select which fields to log using the `fields` parameter in `StartLogging` or `FileLogger`. By default, all available fields are logged. The available fields are currently:\r\n\r\n- `\"TargetJointPos\"` \r\n- `\"TargetCartPos\"`\r\n- `\"TargetJointVel\"`\r\n- `\"TargetCartVel\"`\r\n- `\"TargetConf\"`\r\n- `\"TargetConfTurn\"`\r\n\r\n- `\"JointPos\"`\r\n- `\"CartPos\"`\r\n- `\"JointVel\"` \r\n- `\"JointTorq\"` \r\n- `\"CartVel\"` \r\n- `\"Conf\"` \r\n- `\"ConfTurn\"`\r\n\r\n- `\"Accel\"`\r\n\r\n\r\nThese strings should be placed into the list given to the `fields` parameter.\r\n\r\nThe following example only logs the `\"TargetJointPos\"` and `\"JointPos\"`.\r\n\r\n```python\r\nrobot.WaitIdle()\r\nrobot.WaitEndOfCycle()\r\nwith robot.FileLogger(0.001, fields=['TargetJointPos', 'JointPos']):\r\n    robot.MoveJoints(0, -60, 60, 0, 0, 0)\r\n    robot.MoveJoints(0, 0, 0, 0, 0, 0)\r\n    robot.WaitIdle()\r\n```\r\n\r\nNote that the `SetRealTimeMonitoring` command is used by in `StartLogging` or `FileLogger` to enable all the real-time monitoring events which are logged.\r\n\r\n### Sending Custom Commands\r\n\r\nIt is possible to send an arbitrary command to the robot using the `SendCustomCommand()` call. The user can optionally provide expected response codes, which will cause `SendCustomCommand()` to return an event which can be used to wait for the response.\r\n\r\nExample usage:\r\n```python\r\nimport mecademicpy.robot as mdr\r\nimport mecademicpy.mx_robot_def as mdr_def\r\n# Connect, activate, and home robot...\r\n\r\nresponse_codes = [mdr_def.MX_ST_ERROR_RESET, mdr_def.MX_ST_NO_ERROR_RESET]\r\nresponse_event = robot.SendCustomCommand('ResetError', expected_responses=response_codes)\r\nresponse = response_event.wait(timeout=10)\r\n```\r\n\r\nAlthough raw numerical response codes can also be used, it is recommended to use the named aliases provided in `mx_robot_def.py` for clarity.\r\n\r\n### API Reference\r\n\r\nFor a complete list of available methods and further documentation, use the help() function on any class in a python terminal (such as `ipython`).\r\n\r\n```python\r\n>>> import mecademicpy.robot as mdr\r\n>>> help(mdr.Robot)\r\n>>> help(mdr.Message)\r\n>>> help(mdr.RobotCallbacks)\r\n```\r\n\r\n## Getting Help\r\n\r\n\r\n\r\nTo get support, you can start an issue on the Mecademic github page, issues section or send an email to support@mecademic.com.\r\n\r\n## License\r\n\r\nAll packages in this repository are licensed under the MIT license.\r\n\r\n## Authors \r\n\r\n* **Mecademic** - *Continuous work*\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Mecademic/mecademicpy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mecademicpy",
    "package_url": "https://pypi.org/project/mecademicpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/mecademicpy/",
    "project_urls": {
      "Homepage": "https://github.com/Mecademic/mecademicpy"
    },
    "release_url": "https://pypi.org/project/mecademicpy/1.3.0/",
    "requires_dist": [
      "dataclasses-json (>=0.5.4)",
      "deprecation",
      "pandas",
      "requests",
      "pyyaml"
    ],
    "requires_python": ">=3.7",
    "summary": "A package to control the Mecademic robots through python",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15869499,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62b04c668bc220cad9c08a544fdadd8f36023bac9f9be0668829a9c4976c1845",
        "md5": "c80eb035239fe09fb5c7e328e9499b4f",
        "sha256": "aaef8cd1679d4775d3a2bff28b1c8ffc14079bcebe3d9d1cdf1de0af1b85bb6d"
      },
      "downloads": -1,
      "filename": "mecademicpy-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c80eb035239fe09fb5c7e328e9499b4f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 94162,
      "upload_time": "2022-11-23T16:56:25",
      "upload_time_iso_8601": "2022-11-23T16:56:25.684152Z",
      "url": "https://files.pythonhosted.org/packages/62/b0/4c668bc220cad9c08a544fdadd8f36023bac9f9be0668829a9c4976c1845/mecademicpy-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b3c8c0017e24c2b3edba777914cdb8e76d7142f70f8cbfc23264724d37d4c99",
        "md5": "1563bd82d51b5b5cc0a4021669c5f03b",
        "sha256": "20b88985524a17f230e4330fa252c5bba4e7dd32c5a95fc0559d62018257f36a"
      },
      "downloads": -1,
      "filename": "mecademicpy-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1563bd82d51b5b5cc0a4021669c5f03b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 89550,
      "upload_time": "2022-11-23T16:56:27",
      "upload_time_iso_8601": "2022-11-23T16:56:27.482735Z",
      "url": "https://files.pythonhosted.org/packages/1b/3c/8c0017e24c2b3edba777914cdb8e76d7142f70f8cbfc23264724d37d4c99/mecademicpy-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}