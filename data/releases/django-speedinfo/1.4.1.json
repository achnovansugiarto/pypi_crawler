{
  "info": {
    "author": "Evgeniy Krysanov",
    "author_email": "evgeniy.krysanov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "================\ndjango-speedinfo\n================\n\n.. image:: https://travis-ci.org/catcombo/django-speedinfo.svg?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/catcombo/django-speedinfo\n\nSpeedInfo is a live profiling tool for the Django framework to find\nmost highload views in your project for the next optimization.\nSpeedInfo counts number of calls, cache hits, SQL queries,\nmeasures average and total call time and more for each of your views.\nDetailed report and profiler controls are available in Django admin.\n\n.. image:: https://github.com/catcombo/django-speedinfo/raw/master/screenshots/main.png\n    :width: 64%\n    :align: center\n\n\nInstallation\n============\n\n1. Run ``pip install django-speedinfo``.\n2. Add ``speedinfo`` to ``INSTALLED_APPS``.\n3. Add ``speedinfo.middleware.ProfilerMiddleware`` to the end of ``MIDDLEWARE`` (or ``MIDDLEWARE_CLASSES`` for Django < 1.10) list, but before ``django.middleware.cache.FetchFromCacheMiddleware`` (if used)::\n\n    MIDDLEWARE = [\n        ...,\n        'speedinfo.middleware.ProfilerMiddleware',\n        'django.middleware.cache.FetchFromCacheMiddleware',\n    ]\n\n4. Setup any cache backend, except local-memory and dummy caching, using our proxy cache backend. Speedinfo needs cache to store profiler state between requests and to intercept calls to cache::\n\n    CACHES = {\n        'default': {\n            'BACKEND': 'speedinfo.backends.proxy_cache',\n            'CACHE_BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',\n            'LOCATION': '/var/tmp/django_cache',\n        }\n    }\n\n5. Run ``python manage.py migrate``.\n6. Run ``python manage.py collectstatic``.\n\n\nUsage\n=====\n\nOpen ``Views profiler`` in Django admin. Click the ``Turn on`` / ``Turn off`` button\nto control profiler state. Press ``Reset`` button to reset all data.\n\n\nConfiguration\n=============\n\n``SpeedInfo`` automatically detects when using Django per-site caching via\n``UpdateCacheMiddleware`` and ``FetchFromCacheMiddleware`` middlewares\nor per-view caching via ``cache_page`` decorator and counts cache hit\nwhen retrieving page from cache.\n\nIn case you implement your own caching logic and want to mark\nview response as obtained from the cache, set attribute with name taken\nfrom ``SPEEDINFO_CACHED_RESPONSE_ATTR_NAME`` to True to the ``HttpResponse`` object.\nExample::\n\n    from django.views import View\n    from speedinfo.settings import SPEEDINFO_CACHED_RESPONSE_ATTR_NAME\n\n    class CachedView(View):\n        def get(self, request, *args, **kwargs):\n            # ...\n            # `response` was taken from the cache\n            # mark it in appropriate way\n            setattr(response, SPEEDINFO_CACHED_RESPONSE_ATTR_NAME, True)\n            return response\n\nChange ``SPEEDINFO_REPORT_COLUMNS`` setting to customize Django admin profiler columns.\nDefault value::\n\n    SPEEDINFO_REPORT_COLUMNS = (\n        'view_name', 'method', 'anon_calls_ratio', 'cache_hits_ratio',\n        'sql_count_per_call', 'sql_time_ratio', 'total_calls', 'time_per_call', 'total_time'\n    )\n\n\nProfiling conditions\n====================\n\n``SPEEDINFO_PROFILING_CONDITIONS`` setting allows to declare a list of imported by path classes\nto define the conditions for profiling the processed view. By default, the only condition is enabled::\n\n    SPEEDINFO_PROFILING_CONDITIONS = [\n        'speedinfo.conditions.exclude_urls.ExcludeURLCondition',\n    ]\n\n\n``ExcludeURLCondition`` allows you to exclude some urls from profiling by adding them to\nthe ``SPEEDINFO_EXCLUDE_URLS`` list. ``ExcludeURLCondition`` uses ``re.match`` internally to test\nrequested url. Example::\n\n    SPEEDINFO_EXCLUDE_URLS = [\n        r'/admin/',\n        r'/news/$',\n        r'/movie/\\d+/$',\n    ]\n\n\nTo define your own condition class, you must inherit from the base class ``speedinfo.conditions.base.Condition``\nand implement all abstract methods. See ``ExcludeURLCondition`` source code for implementation example. Then add\nfull path to your class to ``SPEEDINFO_PROFILING_CONDITIONS`` list as shown above. Conditions in mentioned list\nare executed in a top-down order. The first condition returning ``False`` interrupts the further check.\n\n\nSeparate storage for data\n=========================\n\nIf you want to use different database (e.g. Redis) to store ``django-speedinfo`` data:\n\n1. Define separate database in ``DATABASES`` option in the `project settings <https://docs.djangoproject.com/en/2.2/topics/db/multi-db/>`_.\n2. Configure `database router <https://docs.djangoproject.com/en/2.2/topics/db/multi-db/#automatic-database-routing>`_ to return appropriate database for ``speedinfo`` application (see an example in documentation).\n\n\nNotice\n======\n\nThe number of SQL queries measured by ``django-speedinfo`` may differ from the values\nof ``django-debug-toolbar`` for the same view. First of all, because we show the average number\nof SQL queries for each view. Secondly, we don't take into account SQL queries\nmade before the call of a view (e.g. in the preceding middlewares), as well SQL queries\nmade after the call view.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/catcombo/django-speedinfo",
    "keywords": "django profiler views performance",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-speedinfo",
    "package_url": "https://pypi.org/project/django-speedinfo/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-speedinfo/",
    "project_urls": {
      "Homepage": "https://github.com/catcombo/django-speedinfo"
    },
    "release_url": "https://pypi.org/project/django-speedinfo/1.4.1/",
    "requires_dist": [
      "Django (>=1.8)"
    ],
    "requires_python": "",
    "summary": "Live profiling tool for Django framework to measure views performance",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8377261,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "096f3f8fd8de15101d03a5193b2e3949beee47d2425abb89f7678ba8f9404ba9",
        "md5": "6228fc0c9cdcd17eda6f548ecaee77f3",
        "sha256": "1d50df3e43319b0169f9632c28b3da36c03e79c4de209a78ed9cdd75b78d13fc"
      },
      "downloads": -1,
      "filename": "django_speedinfo-1.4.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6228fc0c9cdcd17eda6f548ecaee77f3",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18873,
      "upload_time": "2019-06-16T14:59:57",
      "upload_time_iso_8601": "2019-06-16T14:59:57.295777Z",
      "url": "https://files.pythonhosted.org/packages/09/6f/3f8fd8de15101d03a5193b2e3949beee47d2425abb89f7678ba8f9404ba9/django_speedinfo-1.4.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45d9c74c62043e21e8d7ac25fcedb3cfe249412faa25aacfe2dfddd05d1188d9",
        "md5": "e45528fed3f26d8d852d339eee5e05dc",
        "sha256": "b7bf6d3d1bf982a219e92f963f09fcda9c90a2b01e85b828bb5cd79fec02a32e"
      },
      "downloads": -1,
      "filename": "django-speedinfo-1.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e45528fed3f26d8d852d339eee5e05dc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12363,
      "upload_time": "2019-06-16T14:59:59",
      "upload_time_iso_8601": "2019-06-16T14:59:59.126353Z",
      "url": "https://files.pythonhosted.org/packages/45/d9/c74c62043e21e8d7ac25fcedb3cfe249412faa25aacfe2dfddd05d1188d9/django-speedinfo-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}