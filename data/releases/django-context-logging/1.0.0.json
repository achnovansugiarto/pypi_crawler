{
  "info": {
    "author": "Lev Orekhov",
    "author_email": "lev.orekhov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# About\n\n`django_context_logging` is a library for adding request context to logs.\nTypical usage is for adding some request_id to all logs in order to make troubleshooting\nmore comfortable.\n\n\n# Usage\n\nFirst enable middleware for storing request context.\n\n    MIDDLEWARE_CLASSES = [\n        'django_context_logging.ExtractRequestContextMiddleware',\n        # rest middlewares\n    ]\n    \n    DJANGO_CONTEXT_LOGGING_EXTRACTOR = lambda request: {'rid': request.GET.getlist('rid')}\n\n\nHere DJANGO_CONTEXT_LOGGING_EXTRACTOR is a callable which takes django.http.request.HttpRequest\nand returns dictionary with extracted context.\n\n**Note:** ExtractRequestContextMiddleware will fail with exception if no DJANGO_CONTEXT_LOGGING_EXTRACTOR specified.\n\nNow it is possible to configure logging in one of two possible ways.\n\n## Using filter\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'formatters': {\n            'verbose': {\n                'format': '%(levelname)s %(asctime)s %(process)d %(rid)s %(name)s %(message)s'\n            },\n        },\n        'filters': {\n            'context_filter': {\n                '()': 'django_context_logging.AddContextFilter', \n                'default': {'rid': None}\n            }\n        },\n        'handlers': {\n            'file': {\n                'level': 'DEBUG',\n                'class': 'logging.FileHandler',\n                'filename': '/path/to/django/debug.log',\n                'filters': ['context_filter']\n            },\n        },\n        'loggers': {\n            '': {\n                'handlers': ['file'],\n                'level': 'DEBUG'\n            },\n        }\n    }\n\nNote three things:\n\n  * `%(rid)` in format string is for logging rid (for request_id) from our context;\n  * `django_context_logging.AddContextFilter` - filter which converts keys from context dict to attributes of LogRecord;\n  *  `'default': {'rid': None}` - some of our log events could be without context for example logs emitted on worker start. All these logs will not be recorded due to the lack of 'rid' attribute (in our example) on LogRecord instance. To fix this we provide default value for 'rid'.  \n\n## Using formatter\n\nIf you do not want to bother with custom log format and default context values for a filter - you can use `django_context_logging.AddContextFormatter`.\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'formatters': {\n            'verbose': {\n                '()': 'django_context_logging.AddContextFormatter'\n                'format': '%(levelname)s %(asctime)s %(process)d %(name)s %(message)s'\n            },\n        },\n        'handlers': {\n            'file': {\n                'level': 'DEBUG',\n                'class': 'logging.FileHandler',\n                'filename': '/path/to/django/debug.log',\n            },\n        },\n        'loggers': {\n            '': {\n                'handlers': ['file'],\n                'level': 'DEBUG'\n            },\n        }\n    }\n\nAs you can see in this case we doesn't add any context related fields to a log format string.\nThis is because `django_context_logging.AddContextFormatter` will append all context information to every log.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lorehov/django_context_logging",
    "keywords": "django context logging",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-context-logging",
    "package_url": "https://pypi.org/project/django-context-logging/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-context-logging/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/lorehov/django_context_logging"
    },
    "release_url": "https://pypi.org/project/django-context-logging/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Library for adding request context to log records",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2146901,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0ee4d8a833c49560966c113b490f9fefb57f4a3f318f54b3877a4cf52d13789",
        "md5": "84c7f0c6034728cc08fa43a06b220080",
        "sha256": "e7d51cc37dec094924c2a9e98143055c31df6b81f563c99854c7696a0afa7c53"
      },
      "downloads": -1,
      "filename": "django-context-logging-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "84c7f0c6034728cc08fa43a06b220080",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4048,
      "upload_time": "2016-05-25T15:12:50",
      "upload_time_iso_8601": "2016-05-25T15:12:50.907391Z",
      "url": "https://files.pythonhosted.org/packages/e0/ee/4d8a833c49560966c113b490f9fefb57f4a3f318f54b3877a4cf52d13789/django-context-logging-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}