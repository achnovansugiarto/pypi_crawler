{
  "info": {
    "author": "Jonathan Shimon",
    "author_email": "jonatanshimon@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "EASY REST\n=========\n\nEasy rest framework is built under django rest framework.\n\nThe easy rest adds many useful mixins, and make it very easy to create\nrest apps\n\nand to integrate rest apps with existing apps\n\nLinks:\n======\n\n```Contributing`` </CONTRIBUTING.md>`__ :bust\\_in\\_silhouette:\n\n# Quick start\n-------------\n\n1. install using pip:\n\n.. code:: !sh\n\n        pip3 install django-easy-rest\n\n2. Add \"easy\\_rest\" to your INSTALLED\\_APPS setting like this::\n\n   INSTALLED\\_APPS = [ ... 'easy\\_rest',]\n\n3. Include the easy\\_rest URLconf in your project urls.py like this::\n\n   url(r'^easy\\_rest/', include('easy\\_rest.urls')),\n\n4. Configure the url root of easy rest in your project settings.py like\n   this::\n\n   EASY\\_REST\\_ROOT\\_URL = \"easy\\_rest\"\n\nDemo\n====\n\n1. clone this repo\n\n2. install easy rest by\n\n.. code:: !sh\n\n        pip3 install django-easy-rest\n\n3. head to demo and execute\n\n.. code:: !sh\n\n        python3 manage.py migrate\n\n4. create your self a superuser by:\n\n.. code:: !sh\n\n        python3 manage.py createsuperuser\n\n5. that's all now run the server by:\n\n.. code:: !sh\n\n        python3 manage.py runserver\n\neasy rest mixins:\n=================\n\n1. ApiAbstractionsMixin\n\n2. DecorativeKeysMixin\n\n3. HelpMixin\n\n4. FormPostMixin\n\n5. FunctionUnPackerMixin\n\n6. ModelUnpacker\n\neasy rest views:\n================\n\n1. RestApiView\n\neasy rest template-tags:\n========================\n\n1. {% load\\_rest\\_scripts %}\n\n2. {% load\\_rest\\_all %}\n\nmore features:\n==============\n\n1. auto testing\n\nexample of the rest view:\n=========================\n\nIn this example you are going to learn how to write\n\nclass based view using the rest mixin.\n\nThis example also shows the power of the easy rest\n\nCode:\n=====\n\nviews.py\n\n.. code:: python\n\n\n    from easy_rest import views\n    from easy_rest.mixins import MethodApiHelpMixin,DecorativeKeysMethodApi\n\n    class MethodBased(HelpMixin, DecorativeKeysMixin, FunctionUnPackerMixin, ModelUnpacker, views.RestApiView):\n       method_helpers = {'get_username': {\"help\": {\"general\": \"returns the username of the requested user\",\n                                                     \"general_usage\": \"suggestting to use the model unpacker mixin\"}}}\n        def get_username(self, user):\n            return {\"username\": user.username}\n\nand that's it\n\nPreview\n=======\n\ninput\n\n.. code:: json\n\n    {\"action\":\"get_username\", \"with-model\": {\"field\":\"auth.User\", \"query\":{\"pk\":1}}}\n\noutput (debug mode)\n\n.. code:: json\n\n\n    {\n        \"debug\": {\n            \"processed-data\": {\n                \"user\": {\n                    \"_state\": {\n                        \"db\": \"default\",\n                        \"adding\": false\n                    },\n                    \"first_name\": \"\",\n                    \"is_superuser\": true,\n                    \"is_staff\": true,\n                    \"last_login\": \"2017-07-23T11:49:41.804352Z\",\n                    \"is_active\": true,\n                    \"email\": \"jonatanshimon@gmail.com\",\n                    \"id\": 1,\n                    \"date_joined\": \"2017-07-21T19:02:39.414653Z\",\n                    \"username\": \"jonatan\",\n                    \"last_name\": \"\",\n                    \"_password\": null,\n                    \"password\": \"pbkdf2_sha256$36000$oqbcQyNRQE2S$QOS41M4rvGlvLZmS4mzlBPA7CftTRuoG3jcQzYL0QvQ=\"\n                },\n                \"action\": \"get_username\"\n            }\n        },\n        \"data\": {\n            \"username\": \"jonatan\"\n        }\n    }\n\nas we can see the unpacker got the user with a pk of 1\n\nand returned it to the function because the call was made under debug\nmode the easy-rest\n\nreturned a debug field in the data, with useful information about the\ncurrent query.\n\nAdditional fields:\n==================\n\n1. query many users into a users variable\n\n.. code:: json\n\n    {\"action\":\"get_username\", \"with-model\": [{\"field\":\"auth.User\", \"query\":{\"pk\":1}, \"name\":\"users\"},\n    {\"field\":\"auth.User\", \"query\":{\"pk\":2}, \"name\":\"users\"}]}\n\nthis will return a list called users into a function containing two\nmodels,\n\na user with a pk of 1 and a user with the pk of 2\n\n2. help and errors\n\nthe following input will raise an error because field contains app.model\n\n.. code:: json\n\n    {\"action\":\"get_username\", \"with-model\": {\"field\":\"User\", \"query\":{\"pk\":1}}}\n\neasy rest will add the following to the ouput:\n\n.. code:: json\n\n        \"help\": {\n            \"help-list\": \"available help entries dict_keys(['general', 'general_usage'])\",\n            \"message\": \"returns the username of the requested user\",\n            \"general_usage\": \"specific help use {action:'get_username', help-prefix:'general_usage'}\"\n        }\n\nfor a more complex help we can use the following command\n\n.. code:: json\n\n    {\"action\":\"get_username\", \"with-model\": {\"field\":\"User\", \"query\":{\"pk\":1}}, \"help-prefix\":\"general_usage\"}\n\nthe output is:\n\n.. code:: json\n\n        \"help\": {\n            \"help-list\": \"available help entries dict_keys(['general', 'general_usage'])\",\n            \"message\": \"suggestting to use the model unpacker mixin\",\n            \"general_usage\": \"specific help use {action:'get_username', help-prefix:'general_usage'}\"\n        }\n\nIntegrating rest with django GCBV:\n==================================\n\nThe following example is django GCBV update view with a rest post\n\nviews.py:\n\n.. code:: python\n\n\n    class UpdateViewApi(FormPostMixin, UpdateView):\n        fields = ['first_name', 'last_name']\n        template_name = 'easy_rest/test.html'\n        model = User\n        success_message = 'model has been changed {}'.format(datetime.now())\n\n        def get_object(self, queryset=None):\n            return User.objects.get(pk=1)\n\ntemplate\n\n.. code:: html\n\n    {% load easy_rest %}\n    <html lang=\"en\">\n    <head>\n    {% load_rest_all %}\n    </head>\n    <body>\n    {% include \"easy_rest/easy_rest_form.html\" with form=form %}\n    </body>\n    </html>\n\nThat's it now the easy rest will make the form post rest,\n\nthe easy rest also adds success message of post and it places form\nerrors above the form fields.\n\nAuto testing:\n=============\n\n1. the auto test creates a test file based on your api posts\n\n# **how to use**\\ # add the following to your view\n\n.. code:: python\n\n        class ApiTest(PostRecordTestGenerator, RestApiView):\n            def __init__(self, *args, **kwargs):\n                super(ApiTest, self).__init__(*args, **kwargs)\n                self.init_test(app_name='demo_app')\n\n**structure**\n=============\n\nthis test will generate test.py for your app if not exists already\n\nand will create a file called auto\\_generated\\_post\\_record\\_test.py\n\neach api post will be recoded and converted into a test, so you only\nneed to make api posts in order to create your test files\n\n! remember remove the PostRecordTestGenerator mixin upon done\n\nMixins:\n=======\n\n**FunctionUnPackerMixin**\n=========================\n\n::\n\n        this mixin is used to unpack json data into python variables\n        \n        for example unpacking\n        \n\n.. code:: json\n\n        {\"a\":\"value of a\", \"b\":\"value of b\"}\n\n.. code:: python\n\n\n    def test(a, b):\n        pass\n\n::\n\n        give a result of a=\"value of a\", b=\"value of b\"\n        \n        and the python call is\n      \n\n.. code:: python\n\n    test(a=\"value of a\", b=\"value of b\")\n\n\\*HelpMixin\\*\\* #\n=================\n\n::\n\n        this mixin decorate api errors with a specific or a general error\n                \n        this mixin can also display specific information about methods in the api\n        \n        see examples above.\n       \n\n**DecorativeKeysMixin**\n=======================\n\n::\n\n        this mixin is used to allow api keys translations for example:\n        \n        without this mixin api calls can be only under the python language convention\n        \n        example:\n       \n\n.. code:: json\n\n    {\"action\":\"read_book\"}\n\n::\n\n        using this mixin the following can be\n        \n\n.. code:: json\n\n    {\"action\":\"read_book\"}\n\n    {\"action\":\"read book\"}\n\n    {\"action\":\"read-book\"}\n\n    {\"action\":\"read:book\"}",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jonatanSh/django-easy-rest/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-easy-rest",
    "package_url": "https://pypi.org/project/django-easy-rest/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-easy-rest/",
    "project_urls": {
      "Homepage": "https://github.com/jonatanSh/django-easy-rest/"
    },
    "release_url": "https://pypi.org/project/django-easy-rest/1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple Django app to create rest applications",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4273402,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35fed6e55748d8e9b2ded6c217a5332cdcc7c4e5796653cd7904d8268c37b267",
        "md5": "af18e3bc26ae97af439a4ebecd61c960",
        "sha256": "0b8b8f557f697975ec0006603e63583b029dc392ab6960afb951c59c66e30515"
      },
      "downloads": -1,
      "filename": "django-easy-rest-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "af18e3bc26ae97af439a4ebecd61c960",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 183422,
      "upload_time": "2017-08-26T11:24:59",
      "upload_time_iso_8601": "2017-08-26T11:24:59.210369Z",
      "url": "https://files.pythonhosted.org/packages/35/fe/d6e55748d8e9b2ded6c217a5332cdcc7c4e5796653cd7904d8268c37b267/django-easy-rest-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}