{
  "info": {
    "author": "Jonathan Shimon",
    "author_email": "jonatanshimon@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# EASY REST\n\nEasy rest framework is built under django rest framework.\n\nThe easy rest adds many useful mixins, and make it very easy to create rest apps\n\nand to integrate rest apps with existing apps\n\nQuick start\n-----------\n1. install using pip:\n\n```!sh\n    pip3 install django-easy-rest\n```\n\n2. Add \"easy_rest\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'easy_rest',\n    ]\n\n3. Include the easy_rest URLconf in your project urls.py like this::\n\n    url(r'^easy_rest/', include('easy_rest.urls')),\n\n4. Configure the url root of easy rest in your project settings.py like this::\n\n    EASY_REST_ROOT_URL = \"easy_rest\"\n\n# Demo\n\n1. clone this repo\n\n2. install easy rest by\n\n```!sh\n    pip3 install django-easy-rest\n```\n\n3. head to demo and execute\n\n```!sh\n    python3 manage.py migrate\n```\n\n4. create your self a superuser by:\n\n```!sh\n    python3 manage.py createsuperuser\n```\n\n5. that's all now run the server by:\n\n```!sh\n    python3 manage.py runserver\n```\n\n# easy rest mixins:\n\n1. ApiAbstractionsMixin\n\n2. DecorativeKeysMixin\n\n3. HelpMixin\n\n4. FormPostMixin\n\n5. FunctionUnPackerMixin \n\n6. ModelUnpacker \n\n# easy rest views:\n\n1. RestApiView\n\n# easy rest template-tags:\n\n1. {% load_rest_scripts %}\n\n2. {% load_rest_all %}\n\n# more features:\n\n1. auto testing\n\n# example of the rest view:\n\nIn this example you are going to learn how to write \n\nclass based view using the rest mixin.\n\nThis example also shows the power of the easy rest\n\n# Code:\n\nviews.py\n\n```python\n\nfrom easy_rest import views\nfrom easy_rest.mixins import MethodApiHelpMixin,DecorativeKeysMethodApi\n\nclass MethodBased(HelpMixin, DecorativeKeysMixin, FunctionUnPackerMixin, ModelUnpacker, views.RestApiView):\n   method_helpers = {'get_username': {\"help\": {\"general\": \"returns the username of the requested user\",\n                                                 \"general_usage\": \"suggestting to use the model unpacker mixin\"}}}\n    def get_username(self, user):\n        return {\"username\": user.username}\n```\n\nand that's it\n\n# Preview\n\ninput\n\n```json\n{\"action\":\"get_username\", \"with-model\": {\"field\":\"auth.User\", \"query\":{\"pk\":1}}}\n```\n\noutput (debug mode)\n\n```json\n\n{\n    \"debug\": {\n        \"processed-data\": {\n            \"user\": {\n                \"_state\": {\n                    \"db\": \"default\",\n                    \"adding\": false\n                },\n                \"first_name\": \"\",\n                \"is_superuser\": true,\n                \"is_staff\": true,\n                \"last_login\": \"2017-07-23T11:49:41.804352Z\",\n                \"is_active\": true,\n                \"email\": \"jonatanshimon@gmail.com\",\n                \"id\": 1,\n                \"date_joined\": \"2017-07-21T19:02:39.414653Z\",\n                \"username\": \"jonatan\",\n                \"last_name\": \"\",\n                \"_password\": null,\n                \"password\": \"pbkdf2_sha256$36000$oqbcQyNRQE2S$QOS41M4rvGlvLZmS4mzlBPA7CftTRuoG3jcQzYL0QvQ=\"\n            },\n            \"action\": \"get_username\"\n        }\n    },\n    \"data\": {\n        \"username\": \"jonatan\"\n    }\n}\n\n```\n\nas we can see the unpacker got the user with a pk of 1\n\nand returned it to the function because the call was made under debug mode the easy-rest\n\nreturned a debug field in the data, with useful information about the current query.\n\n# Additional fields:\n\n1. query many users into a users variable\n\n```json\n{\"action\":\"get_username\", \"with-model\": [{\"field\":\"auth.User\", \"query\":{\"pk\":1}, \"name\":\"users\"},\n{\"field\":\"auth.User\", \"query\":{\"pk\":2}, \"name\":\"users\"}]}\n```\n\nthis will return a list called users into a function containing two models,\n \na user with a pk of 1 and a user with the pk of 2\n\n2. help and errors\n\nthe following input will raise an error because field contains app.model \n\n```json\n{\"action\":\"get_username\", \"with-model\": {\"field\":\"User\", \"query\":{\"pk\":1}}}\n```\neasy rest will add the following to the ouput:\n\n```json\n    \"help\": {\n        \"help-list\": \"available help entries dict_keys(['general', 'general_usage'])\",\n        \"message\": \"returns the username of the requested user\",\n        \"general_usage\": \"specific help use {action:'get_username', help-prefix:'general_usage'}\"\n    }\n```\nfor a more complex help we can use the following command\n\n```json\n{\"action\":\"get_username\", \"with-model\": {\"field\":\"User\", \"query\":{\"pk\":1}}, \"help-prefix\":\"general_usage\"}\n```\n\nthe output is:\n\n```json\n    \"help\": {\n        \"help-list\": \"available help entries dict_keys(['general', 'general_usage'])\",\n        \"message\": \"suggestting to use the model unpacker mixin\",\n        \"general_usage\": \"specific help use {action:'get_username', help-prefix:'general_usage'}\"\n    }\n```\n\n# Integrating rest with django GCBV:\n\nThe following example is django GCBV update view with a rest post\n\nviews.py:\n\n```python\n\nclass UpdateViewApi(FormPostMixin, UpdateView):\n    fields = ['first_name', 'last_name']\n    template_name = 'easy_rest/test.html'\n    model = User\n    success_message = 'model has been changed {}'.format(datetime.now())\n\n    def get_object(self, queryset=None):\n        return User.objects.get(pk=1)\n\n```\n\ntemplate \n\n```html\n{% load easy_rest %}\n<html lang=\"en\">\n<head>\n{% load_rest_all %}\n</head>\n<body>\n{% include \"easy_rest/easy_rest_form.html\" with form=form %}\n</body>\n</html>\n```\n\nThat's it now the easy rest will make the form post rest,\n\nthe easy rest also adds success message of post and it places form errors above the form fields.\n\n\n# Auto testing:\n\n1. the auto test creates a test file based on your api posts\n\n   # **how to use**#\n   add the following to your view\n```python\n    class ApiTest(PostRecordTestGenerator, RestApiView):\n        def __init__(self, *args, **kwargs):\n            super(ApiTest, self).__init__(*args, **kwargs)\n            self.init_test(app_name='demo_app')\n```\n\n# **structure** #\n\nthis test will generate test.py for your app if not exists already\n\nand will create a file called auto_generated_post_record_test.py\n\neach api post will be recoded and converted into a test,\nso you only need to make api posts in order to create your test files\n\n! remember remove the PostRecordTestGenerator mixin upon done\n\n# Mixins:\n\n# **FunctionUnPackerMixin** # \n        \n        this mixin is used to unpack json data into python variables\n        \n        for example unpacking\n        \n```json\n    {\"a\":\"value of a\", \"b\":\"value of b\"}\n```\n\n```python\n\ndef test(a, b):\n    pass\n\n```\n\n        give a result of a=\"value of a\", b=\"value of b\"\n        \n        and the python call is\n      \n```python \ntest(a=\"value of a\", b=\"value of b\")\n```\n\n\n# *HelpMixin** # \n\n        this mixin decorate api errors with a specific or a general error\n                \n        this mixin can also display specific information about methods in the api\n        \n        see examples above.\n       \n# **DecorativeKeysMixin** # \n\n        this mixin is used to allow api keys translations for example:\n        \n        without this mixin api calls can be only under the python language convention\n        \n        example:\n       \n```json\n{\"action\":\"read_book\"}\n```\n\n        using this mixin the following can be\n        \n```json\n{\"action\":\"read_book\"}\n\n{\"action\":\"read book\"}\n\n{\"action\":\"read-book\"}\n\n{\"action\":\"read:book\"}\n```",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jonatanSh/django-easy-rest/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-easy-rest",
    "package_url": "https://pypi.org/project/django-easy-rest/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-easy-rest/",
    "project_urls": {
      "Homepage": "https://github.com/jonatanSh/django-easy-rest/"
    },
    "release_url": "https://pypi.org/project/django-easy-rest/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple Django app to create rest applications",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4273402,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "218ad542b206227aec85e5eb88b5a7ee3c670750c533af2132f02fe234aeb39c",
        "md5": "dcb9693bc6bdd55d0bd42ab778af38f8",
        "sha256": "cfec72428a2d6794cd9386e0268cafd015cdc21b04023252691744fb24fe47a4"
      },
      "downloads": -1,
      "filename": "django-easy-rest-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dcb9693bc6bdd55d0bd42ab778af38f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 181547,
      "upload_time": "2017-08-19T20:40:07",
      "upload_time_iso_8601": "2017-08-19T20:40:07.746247Z",
      "url": "https://files.pythonhosted.org/packages/21/8a/d542b206227aec85e5eb88b5a7ee3c670750c533af2132f02fe234aeb39c/django-easy-rest-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}