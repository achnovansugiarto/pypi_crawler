{
  "info": {
    "author": "Andreas Baum, Laurent Vermue",
    "author_email": "<andba@dtu.dk>, <lauve@dtu.dk>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "Multiblock Partial Least Squares Package\n========================================\n\n.. image:: https://img.shields.io/pypi/v/mbpls.svg\n    :target: https://pypi.python.org/pypi/mbpls\n    :alt: Pypi Version\n.. image:: https://travis-ci.com/DTUComputeStatisticsAndDataAnalysis/MBPLS.svg?branch=master\n   :target: https://travis-ci.com/DTUComputeStatisticsAndDataAnalysis/MBPLS\n   :alt: Build Status\n.. image:: https://img.shields.io/pypi/l/mbpls.svg\n    :target: https://pypi.python.org/pypi/mbpls/\n    :alt: License\n.. image:: https://readthedocs.org/projects/mbpls/badge/?version=latest\n    :target: https://mbpls.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n.. image:: http://joss.theoj.org/papers/10.21105/joss.01190/status.svg\n   :target: https://doi.org/10.21105/joss.01190\n   :alt: JOSS Paper DOI\n\nAn easy to use Python package for (Multiblock) Partial Least Squares\nprediction modelling of univariate or multivariate outcomes. Four state\nof the art algorithms have been implemented and optimized for robust\nperformance on large data matrices. The package has been designed to be\nable to handle missing data, such that application is straight forward\nusing the commonly known Scikit-learn API and its model selection\ntoolbox.\n\nThe documentation is available at https://mbpls.readthedocs.io\nand elaborate (real-world) Jupyter Notebook examples can be found at\nhttps://github.com/DTUComputeStatisticsAndDataAnalysis/MBPLS/tree/master/examples\n\nThis package can be cited using the following reference. \n\n*Baum et al., (2019). Multiblock PLS: Block dependent prediction modeling for Python. Journal of Open Source Software, 4(34), 1190*\n\n\n\nInstallation\n------------\n\n-  | Install the package for Python3 using the following command. Some\n     dependencies might require an upgrade (scikit-learn, numpy and\n     scipy).\n   | ``$ pip install mbpls``\n\n-  | Now you can import the MBPLS class by typing\n   | ``from mbpls.mbpls import MBPLS``\n\nQuick Start\n-----------\n\nUse the mbpls package for Partial Least Squares (PLS) prediction modeling\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   import numpy as np\n   from mbpls.mbpls import MBPLS\n\n   num_samples = 40\n   num_features = 200\n\n   # Generate random data matrix X\n   x = np.random.rand(num_samples, num_features)\n\n   # Generate random reference vector y\n   y = np.random.rand(num_samples,1)\n\n   # Establish prediction model using 2 latent variables (components)\n   pls = MBPLS(n_components=2)\n   pls.fit(x,y)\n   y_pred = pls.predict(x)\n\nThe mbpls package for Multiblock Partial Least Squares (MB-PLS) prediction modeling\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   import numpy as np\n   from mbpls.mbpls import MBPLS\n\n   num_samples = 40\n   num_features_x1 = 200\n   num_features_x2 = 250\n\n   # Generate two random data matrices X1 and X2 (two blocks)\n   x1 = np.random.rand(num_samples, num_features_x1)\n   x2 = np.random.rand(num_samples, num_features_x2)\n\n   # Generate random reference vector y\n   y = np.random.rand(num_samples, 1)\n\n   # Establish prediction model using 3 latent variables (components)\n   mbpls = MBPLS(n_components=3)\n   mbpls.fit([x1, x2],y)\n   y_pred = mbpls.predict([x1, x2])\n\n   # Use built-in plot method for exploratory analysis of multiblock pls models\n   mbpls.plot(num_components=3)\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DTUComputeStatisticsAndDataAnalysis/MBPLS",
    "keywords": "",
    "license": "new BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mbpls",
    "package_url": "https://pypi.org/project/mbpls/",
    "platform": "",
    "project_url": "https://pypi.org/project/mbpls/",
    "project_urls": {
      "Homepage": "https://github.com/DTUComputeStatisticsAndDataAnalysis/MBPLS"
    },
    "release_url": "https://pypi.org/project/mbpls/1.0.2/",
    "requires_dist": [
      "numpy (>=1.13.3)",
      "scipy (>=1.0.0)",
      "scikit-learn (>=0.21.2)",
      "pandas (>=0.20.0)",
      "sphinx (>=1.6); extra == 'docs'",
      "sphinx-rtd-theme; extra == 'docs'",
      "nbsphinx; extra == 'docs'",
      "nbsphinx-link; extra == 'docs'",
      "matplotlib; extra == 'extras'",
      "pytest; extra == 'tests'"
    ],
    "requires_python": ">=3.5",
    "summary": "An implementation of the most common partial least squares algorithms as multi-block methods",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6454315,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "671c583109a7b38da09383bf7ab2e793418ce1de4c703a05c0f67bce317dab33",
        "md5": "e4355e5234c358c9b26beb715dd9680e",
        "sha256": "21c170afb7b28438312f23ccf3f847f2e2223e43f0d2ea5cb57f0a2802f8a401"
      },
      "downloads": -1,
      "filename": "mbpls-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e4355e5234c358c9b26beb715dd9680e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 24371,
      "upload_time": "2019-06-08T12:34:41",
      "upload_time_iso_8601": "2019-06-08T12:34:41.533638Z",
      "url": "https://files.pythonhosted.org/packages/67/1c/583109a7b38da09383bf7ab2e793418ce1de4c703a05c0f67bce317dab33/mbpls-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9c1318202134c855ced2acdbb1c9b51330e4252f4cae8c0745c7471d6864735",
        "md5": "7081a3be377b32f370b9db2093dfa537",
        "sha256": "2b1c2e749de2eb604164080327f75f09b14ef4c351eea0fcb933b9c13fe6342a"
      },
      "downloads": -1,
      "filename": "mbpls-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7081a3be377b32f370b9db2093dfa537",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 20803,
      "upload_time": "2019-06-08T12:34:45",
      "upload_time_iso_8601": "2019-06-08T12:34:45.367995Z",
      "url": "https://files.pythonhosted.org/packages/e9/c1/318202134c855ced2acdbb1c9b51330e4252f4cae8c0745c7471d6864735/mbpls-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}