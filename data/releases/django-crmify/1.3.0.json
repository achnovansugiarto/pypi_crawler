{
  "info": {
    "author": "Bobby Steinbach",
    "author_email": "developers@meanpug.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# django-crmify\nA django app for quickly integrating a full-featured 3rd party CRM into an application\n\n## Purpose\nTo begin, the purpose of crmify is **NOT** to be a full featured CRM. It's utility is as a bridge between a Django application\nand a 3rd party CRM. Some sample use cases below.\n \n*Basic Lead Management*\n1. User comes to site and registers for account, this triggers a crmify event to create a lead in Insightly\n2. In Insightly, we have a pipeline set up to automatically email new leads\n3. When the user clicks a link in the email, it triggers a change in the status of the User in the backend.\n4. This status change is automatically synced by django-crmify to Insightly, which updates the Lead from a status of `NotContacted` to `Contacted`.\n\n*Basic Sales Funnel*\n1. User comes to site and registers, triggers crmify to create a lead\n2. User makes a purchase, triggering a Conversion event which syncs to Insightly and updates the Lead from a status of `NotContacted` to `Converted`\n\n## Installation\n```\npip install django-crmify\n```\n\n## Quick Start\nTo start using django-crmify, you need to setup some basic configuration parameters. While a number of the parameters will likely need tweaking, the most important settings to get started are: `BACKEND`, `LEAD_MODEL`, and `LEAD_MODEL_FIELDMAPPER`(each of these explained in more detail in the settings [section](#settings) below). Additionally, you will likely need to set the authentication parameters of the CRM backend via environment variables. Here is an example configuration for an integration with the Insightly CRM:`\n\n```python\n# Backend auth for insightly is API key based, therefore the backend will be looking for an environment variable CRMIFY_BACKEND_AUTH_API_KEY for auth\nCRMIFY = {\n  'BACKEND': 'crmify.backends.insightly.InsightlyBackend',\n  'LEAD_MODEL': 'myapp.models.UserProfile',\n  'LEAD_MODEL_FIELDMAPPER': 'myapp.mappers.UserProfileFieldMapper'\n}\n```\n\nAfter setting the `LEAD_MODEL`, it is necessary to run `makemigrations` and then `migrate` to finalize setup.\n\n---\n\nThe next step is setting the value of the `LEAD_MODEL_FIELDMAPPER` to a dot-separated path of a `LeadModelFieldMapper` subclass, a simple class responsible for mapping fields from your Lead model onto the internal `crmify.models.Lead` model. For example, the default mapper looks as follows:\n\n```python\nclass DjangoUserFieldMapper(LeadModelFieldMapper):\n    field_mapping = {\n        'first_name': 'first_name',\n        'last_name': 'last_name',\n        'email': 'email',\n    }\n    fallbacks = {\n        'username': 'email'\n    }\n```\n\nTo break this down a bit, the `field_mapping` consists of our model's fields on the left and the internal crmify Lead models' fields on the right. The `fallbacks` field defines the mapping to use in the case that the primary `field_mapping` has no value for a specified Lead field. \n\n## Settings\n| Setting                | Default                                       | Description                               |\n| ---------------------- | --------------------------------------------- | ----------------------------------------- |\n| BACKEND                | 'crmify.backends.insightly.InsightlyBackend'  | dot separated path to a CRM backend       |\n| BACKEND_AUTH           | {}                                            | authentication parameters for the CRM backend. Stored in env vars CRMIFY_BACKEND_AUTH_API_KEY, CRMIFY_BACKEND_AUTH_USERNAME, and CRMIFY_BACKEND_AUTH_PASSWORD |     \n| LEAD_MODEL             | 'django.contrib.auth.models.User'             | dot separated path to your applications model you'd like treated as a CRM lead |\n| LEAD_MODEL_FIELDMAPPER | 'crmify.mappers.DjangoUserFieldMapper'        | dot separated path to a class defining a mapping between LEAD_MODEL and crmify Lead fields |\n| LEAD_STATUS_MODEL      | None                                          | dot separated path to a class subclassing the `crmify.mixins.LeadStatusMixin`. In order to track lead status, this class must implement the `lead_status` method. |\n| LEAD_NEW_STATUS        | 'NotContacted'                                | the status to use for new leads           |\n| LEAD_CONVERTED_STATUS  | 'Converted'                                   | the status to use for converted leads     |\n| LEAD_DEAD_STATUS       | 'Disqualified'                                | the status to use for dead leads          |\n\n## Customization\nA CRM backend is simply a class implementing two methods:\n\n```\ndef sync_lead(self, lead):\n   \"\"\" sync the given lead to the CRM \n   :param lead: `Lead` object to sync to the CRM\n   :return: `str` the ID of the lead in the CRM\n   \"\"\"\n   pass\n\ndef delete_lead(self, lead_id):\n    \"\"\" delete the lead with the given ID from the CRM \n    :param lead_id: `str` the ID of the lead in the external CRM\n    :return: `bool` True if the lead was deleted, False otherwise\n    \"\"\"\n    pass\n```\n\nAfter creating this class, you need only point the `BACKEND` setting to the dot separated path to your CRM backend.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MeanPug/django-crmify",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-crmify",
    "package_url": "https://pypi.org/project/django-crmify/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-crmify/",
    "project_urls": {
      "Homepage": "https://github.com/MeanPug/django-crmify"
    },
    "release_url": "https://pypi.org/project/django-crmify/1.3.0/",
    "requires_dist": null,
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
    "summary": "Connect your Django Application to your CRM of choice",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3615867,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "129175650cbdb10681bce755ac7f699d9361bcf268b4b38c65834271f622bd19",
        "md5": "52448dd0d44643ceabcd761de197c8b1",
        "sha256": "85a17501dbe6eaba747f513b76e1700b3e0f2cbc9fc754cd0cf9f069e80f29c4"
      },
      "downloads": -1,
      "filename": "django-crmify-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "52448dd0d44643ceabcd761de197c8b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 12873,
      "upload_time": "2018-02-26T03:27:22",
      "upload_time_iso_8601": "2018-02-26T03:27:22.746840Z",
      "url": "https://files.pythonhosted.org/packages/12/91/75650cbdb10681bce755ac7f699d9361bcf268b4b38c65834271f622bd19/django-crmify-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}