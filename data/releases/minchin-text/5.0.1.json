{
  "info": {
    "author": "W. Minchin",
    "author_email": "w_minchin@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: IronPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities"
    ],
    "description": "minchin.text\n============\n\nPython library for text formatting on the command line.\n\nAvaiable Data\n-------------\n\n\\_\\_version\\_\\_\n```````````````\nlibrary version.\n\nre_ansi_control_codes\n`````````````````````\nCompiled regex pattern for ANSI control codes, including colors.\n\nre_weburl\n`````````\nCompiled regex pattern for web URL's -- http, https, and naked domains like \"example.com\"\n\nre_allurl\n`````````\nCompiled regex pattern to match all URL's, including \"mailto:foo@example.com\", \"x-whatever://foo\", etc.\n\nAvailable Commands\n------------------\n\nlength_no_ansi(mystring)\n````````````````````````\nTakes a string, strips out the ANSI escape codes\n(used for colouring terminal output, etc.), and returns\nthe length of the resulting string\n\ncentered (mystring, linewidth=79, fill=\" \")\n```````````````````````````````````````````\nTakes a string, centres it, and pads it on both sides\n\nclock_on_right(mystring)\n````````````````````````\nTakes a string, and prints it with the time right aligned\n\nquery_yes_no(question, default=\"yes\")\n`````````````````````````````````````\nAsk a yes/no question via raw_input() and return their answer.\n\n - \"question\" is a string that is presented to the user.\n - \"default\" is the presumed answer if the user just hits <Enter>. It must be \"yes\" (the default), \"no\" or None (meaning an answer is required of the user).\n - The \"answer\" return value is one of \"yes\" or \"no\".\n\nquery_yes_no_all(question, default=\"yes\")\n`````````````````````````````````````````\nAsk a yes/no/all question via raw_input() and return their answer.\n\n - \"question\" is a string that is presented to the user.\n - \"default\" is the presumed answer if the user just hits <Enter>. It must be \"yes\" (the default), \"no\", \"all\" or None (meaning an answer is required of the user).\n - The \"answer\" return value is one of \"yes\", \"no\", or \"all\".\n\ndef query_yes_quit(question, default=\"quit\")\n````````````````````````````````````````````\nAsk a yes/quit question via raw_input() and return their answer.\n\n - \"question\" is a string that is presented to the user.\n - \"default\" is the presumed answer if the user just hits <Enter>. It must be \"yes\" (the default), \"quit\" or None (meaning an answer is required of the user).\n - The \"answer\" return value is one of \"yes\" or \"quit\".\n\nwait(sec)\n`````````\nPrints a timer with the format 0:00 to the console,\nand then clears the line when the timer is done.\n\ntitle(mytitle)\n``````````````\nTakes 'mytitle', centers it, and prints it in yellow letters on a blue background.\n\n\nsubtitle(mysubtitle)\n````````````````````\nTakes 'mysubtitle', centers it, and prints it in bright (white) letters on a normal (black) background.\n\nprogressbar (class)\n-------------------\n\nThis class is used to create and then update a 'progress bar', like:\n\n.. code-block:: shell\n\n    [================>                                                      ] 17 / 70\n\n\nprogressbar(current=0, maximum=100, bar_color=colorama.Fore.GREEN)\n``````````````````````````````````````````````````````````````````\nCreates a progress bar class. Prints the progress bar.\n\nprogressbar.update(currently=None)\n``````````````````````````````````\nUpdates the value of the progress bar and prints it.\n\nprogressbar.reset()\n```````````````````\nSets the value of the progress bar to 0 (zero) and prints it.\n\nCode\n----\n\nThe code is available at `https://github.com/MinchinWeb/minchin.text <https://github.com/MinchinWeb/minchin.text>`_\n\nContributions are welcome!\n\nTests\n-----\nLocated in the `test` folder. Each is a \"visual test\", so they need to be run and the output manually examined.\n\nLicense\n-------\nThe code is licensed under the MIT license. See that attached `LICENSE` file.\n\n\nv 5.0 [2015-06-10]\n==================\n - move package to `minchin.text`\n - add tests for `minchin.text.centered()`\n - add end character to progress bar\n - add documentation to README.rst\n\nv 4.4 [2014-10-26]\n==================\n - typographic changes to allow wmtext to work in Python 3\n\nv 4.1 [2014-03-10]\n==================\n - allow access as a direct object.   \n     i.e. use `import wmtext` rather than `from wmtext import wmtext`\n\nv 4.0 [2014-02-06]\n==================\n - packaged as a separate module\n - added progress bar\n - first public release\n \nv 3.2 [2014-02-02]\n==================\n - add `length_no_ansi()` allowing you to determine the length of a string\n     after stripping out ANSI codes.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MinchinWeb/minchin.text",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "minchin.text",
    "package_url": "https://pypi.org/project/minchin.text/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/minchin.text/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/MinchinWeb/minchin.text"
    },
    "release_url": "https://pypi.org/project/minchin.text/5.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python library for text formatting on the command line.",
    "version": "5.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9368798,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "526c7e5e701909b7cb519dacb5f90fa22755c98bb6eaf46198206ac9ce443439",
        "md5": "956c8ac6d63a0010a3bcdfc7f2170aa8",
        "sha256": "18f867f6558da4b25790c012e8133377212b70bae82cf19cc30216b23ed98b2e"
      },
      "downloads": -1,
      "filename": "minchin.text-5.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "956c8ac6d63a0010a3bcdfc7f2170aa8",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "requires_python": null,
      "size": 8997,
      "upload_time": "2015-06-10T21:59:46",
      "upload_time_iso_8601": "2015-06-10T21:59:46.037889Z",
      "url": "https://files.pythonhosted.org/packages/52/6c/7e5e701909b7cb519dacb5f90fa22755c98bb6eaf46198206ac9ce443439/minchin.text-5.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e707863e22c9887868ffe818ae48eb0b5fbbad9a6b09b82e7fc904feff3a8f8a",
        "md5": "0f644bfdbc612a1638675fe091d87a23",
        "sha256": "b2079bbcec5c9dbe259827f251ad471fcaa1d3eb816a6f98f7dbcf11c47a136d"
      },
      "downloads": -1,
      "filename": "minchin.text-5.0.1-py3.4.egg",
      "has_sig": false,
      "md5_digest": "0f644bfdbc612a1638675fe091d87a23",
      "packagetype": "bdist_egg",
      "python_version": "3.4",
      "requires_python": null,
      "size": 10759,
      "upload_time": "2015-06-10T21:59:57",
      "upload_time_iso_8601": "2015-06-10T21:59:57.429525Z",
      "url": "https://files.pythonhosted.org/packages/e7/07/863e22c9887868ffe818ae48eb0b5fbbad9a6b09b82e7fc904feff3a8f8a/minchin.text-5.0.1-py3.4.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94e8e91d429dcfa9706b6361f0daef036e396adc484d5dc3f1295a98080d73ed",
        "md5": "5b08503af18f62cbfd8ca53f71dd1791",
        "sha256": "57011b18ee528d2b0d2b6eca19ba391db045130b32cb2dd28c3edfb6ebd52ded"
      },
      "downloads": -1,
      "filename": "minchin.text-5.0.1.zip",
      "has_sig": false,
      "md5_digest": "5b08503af18f62cbfd8ca53f71dd1791",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13394,
      "upload_time": "2015-06-10T21:59:27",
      "upload_time_iso_8601": "2015-06-10T21:59:27.594302Z",
      "url": "https://files.pythonhosted.org/packages/94/e8/e91d429dcfa9706b6361f0daef036e396adc484d5dc3f1295a98080d73ed/minchin.text-5.0.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}