{
  "info": {
    "author": "William Minchin",
    "author_email": "w_minchin@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "minchin.text\n============\n\nPython library for text formatting on the command line.\n\nAvailable Data\n---------------\n\n\\_\\_version\\_\\_\n```````````````\nlibrary version.\n\nre_ansi_control_codes\n`````````````````````\nCompiled regex pattern for ANSI control codes, including colors.\n\nre_weburl\n`````````\nCompiled regex pattern for web URL's -- http, https, and naked domains like \"example.com\"\n\nre_allurl\n`````````\nCompiled regex pattern to match all URL's, including \"mailto:foo@example.com\",\n\"x-whatever://foo\", etc.\n\nAnswers\n```````\nAn Enum containing the possible query answers. Current contains ``YES``,\n``NO``, ``QUIT``, ``ALL``, and ``NONE``. ``YES`` and ``ALL`` are \"truth-y\"\nwhile ``NO``, ``QUIT``, and ``NONE`` are \"false-y\".\n\n\nAvailable Commands\n------------------\n\nlength_no_ansi(mystring)\n````````````````````````\nTakes a string, strips out the ANSI escape codes\n(used for colouring terminal output, etc.), and returns\nthe length of the resulting string\n\ncentered (mystring, linewidth=None, fill=\" \")\n`````````````````````````````````````````````\nTakes a string, centres it, and pads it on both sides. Default ``linewidth`` is\none less than the console width.\n\nclock_on_right(mystring)\n````````````````````````\nTakes a string, and prints it with the time right aligned\n\nquery_yes_no(question, default=\"yes\")\n`````````````````````````````````````\nAsk a yes/no question via raw_input() and return their answer.\n\n- \"question\" is a string that is presented to the user.\n- \"default\" is the presumed answer if the user just hits <Enter>. It must be\n  \"yes\" (the default), \"no\" or None (meaning an answer is required of the\n  user).\n- Returns one of Answer.YES or Answer.NO\n\nquery_yes_no_all(question, default=\"yes\")\n`````````````````````````````````````````\nAsk a yes/no/all question via raw_input() and return their answer.\n\n- \"question\" is a string that is presented to the user.\n- \"default\" is the presumed answer if the user just hits <Enter>. It must be\n  \"yes\" (the default), \"no\", \"all\" or None (meaning an answer is required of\n  the user).\n- Returns one of Answer.YES, Answer.NO, or Answer.ALL\n\ndef query_yes_quit(question, default=\"quit\")\n````````````````````````````````````````````\nAsk a yes/quit question via raw_input() and return their answer.\n\n- \"question\" is a string that is presented to the user.\n- \"default\" is the presumed answer if the user just hits <Enter>. It must be\n  \"yes\" (the default), \"quit\" or None (meaning an answer is required of the\n  user).\n- Returns one of Answer.YES or Answer.QUIT\n\nquery_yes_no_all_none(question, default=\"yes\")\n``````````````````````````````````````````````\nAsk a yes/no/all/none question via raw_input() and return their answer.\n\n- \"question\" is a string that is presented to the user.\n- \"default\" is the presumed answer if the user just hits <Enter>. It must be\n  \"yes\" (the default), \"no\", \"all\", \"none\" (i.e. the string) or None (meaning\n  an answer is required of the user).\n- Returns one of Answer.YES, Answer.NO, Answer.ALL, or Answer.NONE\n\nwait(sec)\n`````````\nPrints a timer with the format 0:00 to the console,\nand then clears the line when the timer is done.\n\ntitle(mytitle)\n``````````````\nTakes ``mytitle``, centers it, and prints it in yellow letters on a blue\nbackground.\n\nsubtitle(mysubtitle)\n````````````````````\nTakes ``mysubtitle``, centers it, and prints it in bright (white) letters on a\nnormal (black) background.\n\nrainbow_print(text, offset=0)\n`````````````````````````````\nPrints out ``text`` and prints it in a cycle of rainbow colors!\n\n\nprogressbar (class)\n-------------------\n\nThis class is used to create and then update a 'progress bar', like:\n\n.. code-block:: shell\n\n    [================>                                                    ] 17 / 70\n\n\nprogressbar(current=0, maximum=100, bar_color=colorama.Fore.GREEN)\n``````````````````````````````````````````````````````````````````\nCreates a progress bar class. Prints the progress bar.\n\nprogressbar.update(currently=None)\n``````````````````````````````````\nUpdates the value of the progress bar and prints it.\n\nprogressbar.reset()\n```````````````````\nSets the value of the progress bar to 0 (zero) and prints it.\n\nCode\n----\n\nThe code is available at `https://github.com/MinchinWeb/minchin.text <https://github.com/MinchinWeb/minchin.text>`_\n\nContributions are welcome!\n\nTests\n-----\nLocated in the `test` folder. Each is a \"visual test\", so they need to be run and the output manually examined.\n\nLicense\n-------\nThe code is licensed under the MIT license. See that attached `LICENSE` file.\n\n\nMinchin.Text Changelog\n======================\n\nv 6.0.1 [2020-04-10]\n--------------------\n\n- fixed alignment issues if you change the maximum value for ``progressbar``\n- fixed ``progressbar`` numbers to be displayed with thousands commas, if large\n  enough\n\nv 6.0.0 [2019-02-08]\n--------------------\n\n- [BREAKING CHANGE] queries now return one of ``Answer.YES``, ``Answer.NO``,\n  ``Answer.QUIT``, ``Answer.ALL``, or ``Answer.NONE``, as appropriate. ``YES``\n  and ``ALL`` are \"Truth-y\", while ``NO``, ``QUIT``, and ``NONE`` are \"False-y\"\n- added ``query_yes_no_all_none()``\n- added ``rainbow_print()`` to print strings in all the colours!\n\nv 5.1.1 [2017-10-03]\n--------------------\n\n- allow ``setup.py`` to work with versions of Python before 3.6\n- remove hardcoded terminal width of 79 characters\n\nv 5.1.0 [2017-01-29]\n--------------------\n\n- ``minchin.text.progressbar()`` will only print (by default) every 0.1 seconds\n- fixed progressbar bug where \"overfull\" bars would go on to multiple lines\n- added ``get_terminal_size()``\n- upgraded release machinery\n\nv 5.0 [2015-06-10]\n------------------\n\n- [BREAKING CHANGE] moved package to ``minchin.text``\n- added tests for ``minchin.text.centered()``\n- added end character to progress bar\n- added documentation to README.rst\n\nv 4.4 [2014-10-26]\n------------------\n\n- typographic changes to allow wmtext to work in Python 3\n\nv 4.1 [2014-03-10]\n------------------\n\n- allow access as a direct object. i.e. use ``import wmtext`` rather than\n  ``from wmtext import wmtext``\n\nv 4.0 [2014-02-06]\n------------------\n\n- packaged as a separate module\n- added progress bar\n- first public release\n\nv 3.2 [2014-02-02]\n------------------\n\n- add ``length_no_ansi()`` allowing you to determine the length of a string\n  after stripping out ANSI codes.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MinchinWeb/minchin.text",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minchin.text",
    "package_url": "https://pypi.org/project/minchin.text/",
    "platform": "any",
    "project_url": "https://pypi.org/project/minchin.text/",
    "project_urls": {
      "Homepage": "https://github.com/MinchinWeb/minchin.text"
    },
    "release_url": "https://pypi.org/project/minchin.text/6.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python library for text formatting on the command line.",
    "version": "6.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9368798,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9743788ae8e413f036642211b76016ec70558bb7dcccaee5f89bdb170fac0a84",
        "md5": "d56882c7b718b63125279bd07fc12e09",
        "sha256": "879950d215ebfb023ec81f344847fad4950bc8481ea403cf1bb1fa55758b43c4"
      },
      "downloads": -1,
      "filename": "minchin.text-6.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d56882c7b718b63125279bd07fc12e09",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 9843,
      "upload_time": "2020-04-10T20:49:25",
      "upload_time_iso_8601": "2020-04-10T20:49:25.042206Z",
      "url": "https://files.pythonhosted.org/packages/97/43/788ae8e413f036642211b76016ec70558bb7dcccaee5f89bdb170fac0a84/minchin.text-6.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cdeb96fe808945ae5037b2b37bd0870d04b484a1332863e180ac9362adb8d996",
        "md5": "1ed50550b36ae85134e738231b679224",
        "sha256": "987336af095faff68ce6c686a392d9d61d08b1409cad4c37abc4e88d20678972"
      },
      "downloads": -1,
      "filename": "minchin.text-6.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1ed50550b36ae85134e738231b679224",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12594,
      "upload_time": "2020-04-10T20:49:13",
      "upload_time_iso_8601": "2020-04-10T20:49:13.487322Z",
      "url": "https://files.pythonhosted.org/packages/cd/eb/96fe808945ae5037b2b37bd0870d04b484a1332863e180ac9362adb8d996/minchin.text-6.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}