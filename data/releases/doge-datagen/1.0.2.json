{
  "info": {
    "author": "GetInData",
    "author_email": "office@getindata.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Data Online Generator (doge_datagen)\n\n## Description\nDataOnlineGenerator can be used to simulate user, system or other actor behaviour bases on probabilistic model. \nIt is a state machine which is traversed by multiple subjects automatically based on probability defined for each \npossible transition. \n\nEach Subject instance can hold additional attributes that can be modified during transition with use of action_callback.\nAction callback can also be used to make transition fail and to remain in current state.\n\nIn transition definition event_sinks can be passed which will be called on successful transition to log, generate event\nor do other actions.\n\nState machine works in ticks which length and number is defined in constructor. In each tick DataOnlineGenerate\nevaluates each subject and makes a transition based on provided probabilities. Sum of probabilities of doing \na transition from given state have to be less or equal to 100. If probabilities of all transitions are less than 100 \nremaining value is treated as probability of staying in the same state in given tick.\n\n## Usage\n\n### DataOnlineGenerator\n*Please refer to examples for full reference.*\n\nLet's consider a user of a banking application that might take or consider taking a loan. Such user will have some\naccount and loan balance. Will be able to receive an income and spend his money. He will be also able to open his\nbanking application, open a loan screen and possible take a loan or exit application. \n\nWe can model this behaviour as states and transitions:\n![State machine](doc/states.png)\n\nAnd define it as code:\n\n```python\ndatagen = DataOnlineGenerator(['offline', 'online', 'loan_screen'], 'offline', UserFactory(), 10, 60000, 1000)\ndatagen.add_transition('income', 'offline', 'offline', 0.01,\n                       action_callback=income_callback, event_sinks=[balance_sink])\ndatagen.add_transition('spending', 'offline', 'offline', 0.1,\n                       action_callback=spending_callback, event_sinks=[trx_sink, balance_sink])\ndatagen.add_transition('login', 'offline', 'online', 0.1, event_sinks=[clickstream_sink])\ndatagen.add_transition('logout', 'online', 'offline', 70, event_sinks=[])\ndatagen.add_transition('open_loan_screen ', 'online', 'loan_screen', 30, event_sinks=[clickstream_sink])\ndatagen.add_transition('close_loan_screen', 'loan_screen', 'online', 40, event_sinks=[clickstream_sink])\ndatagen.add_transition('take_loan', 'loan_screen', 'online', 10,\n                       action_callback=take_loan_callback, event_sinks=[clickstream_sink, loan_sink, balance_sink])\n```\n\nExcept defining state machine, we also provide factory that will be called to generate Subjects, in above example called\nUsers. We also provide tick length (1 min) and number of ticks (1000).\n\nProbability of login into application 0.1 [%] can be interpreted as on average 1/1000 of all users in each minute will \nlog in or that specific User will log in to an app on average once in 1000 minutes (a little more than once a day).\n\n### Sink factories\n\n#### Printing sink\nSimple sink that can be used to print transition results on screen. It requires a format function that converts \ntransition details into a string.\n\n```python\ndef format_function(timestamp: int, user: Subject, transition: Transition) -> str:\n    return '[{}] User id: {}, balance: {}, loan_balance: {} made a transition {} from {} to {}'\\\n        .format(timestamp,\n                user.user_id,\n                user.balance,\n                user.loan_balance,\n                transition.trigger,\n                transition.from_state,\n                transition.to_state)\n\nsink = PrintingSink(format_function)\n```\n\n#### Kafka sink\nKafka sink allows emitting events into Kafka topics. By default, it uses String Serializers which can be overridden by\nproviding different serializers to `create` method. It requires `key_function` and `value_function` to be provided\nwhich converts transition details into a format that is serializable by provided serializers.\n\n```python\ndef key_function(subject: Subject, transition: Transition) -> str:\n    return str(subject.user_id)\n\ndef value_function(timestamp: int, subject: Subject, transition: Transition) -> str:\n    value = {\n        'timestamp': timestamp,\n        'user': {\n            'user_id': subject.user_id,\n            'balance': subject.balance,\n            'loan_balance': subject.loan_balance\n        },\n        'event': transition.trigger\n    }\n    return json.dumps(value)\n\nfactory = KafkaSinkFactory(['localhost:9092'], 'doge-kafka-example')\nsink = factory.create('test_topic', key_function, value_function)\n```\n\n#### Kafka Avro sink\n`KafkaAvroSinkFactory` is a bit of convenience factory that wraps around regular `KafkaSinkFactory` that hides away creation\ndetails of classes needed to push Avro events into Kafka. It requires functions that convert transition details into a\nformat suitable for `AvroSerializer` (typically it will be a structure of nested dicts, with sometimes tuples or type\nhints in case of type unions in schema. \n[Fast avro documentation](https://fastavro.readthedocs.io/en/latest/writer.html#using-the-tuple-notation-to-specify-which-branch-of-a-union-to-take))\nand avro schemas for key and value to be provided.\n\n```python\ndef key_function(subject: Subject, transition: Transition) -> Dict[str, Any]:\n    return {'key': str(subject.user_id)}\n\ndef value_function(timestamp: int, subject: Subject, transition: Transition) -> Dict[str, Any]:\n    value = {\n        'timestamp': timestamp,\n        'user': {\n            'userId': str(subject.user_id),\n            'balance': str(subject.balance),\n            'loanBalance': str(subject.loan_balance)\n        },\n        'event': transition.trigger\n    }\n    return value\n\ndef get_schema(schema_path):\n    with open(schema_path) as f:\n        return f.read()\n\nkey_schema = get_schema('./avro/Key.avsc')\nevent_schema = get_schema('./avro/Event.avsc')\n\nfactory = KafkaAvroSinkFactory(['localhost:9092'], 'http://localhost:8081', 'doge-kafka-example')\nsink = factory.create('test_avro_topic', key_function, key_schema, value_function, event_schema)\n```\n\n#### DB sink\n`DbSinkFactory` uses SQLAlchemy core. It requires DB Url in acceptable format and a function that is able to convert\ntransition details into a flat dict of values.\n\n```python\ndef row_mapper_function(timestamp: int, subject: Subject, transition: Transition) -> Dict[str, Any]:\n    row = {\n        'timestamp': timestamp,\n        'user_id': subject.user_id,\n        'balance': subject.balance,\n        'loan_balance': subject.loan_balance,\n        'event': transition.trigger\n    }\n    return row\n\nfactory = DbSinkFactory('postgresql://postgres:postgres@localhost:5432/postgres')\nsink = factory.create('events', row_mapper_function)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/getindata/doge-datagen",
    "keywords": "",
    "license": "Apache Software License (Apache 2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "doge-datagen",
    "package_url": "https://pypi.org/project/doge-datagen/",
    "platform": "",
    "project_url": "https://pypi.org/project/doge-datagen/",
    "project_urls": {
      "Homepage": "https://github.com/getindata/doge-datagen"
    },
    "release_url": "https://pypi.org/project/doge-datagen/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Data Online Generator",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13474390,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fcd6bb2ea7e9f076093ecaf7a430d341a5beddeb2550b635fb1e4ef290c1fa76",
        "md5": "50d4c1a67d0c3a364e249fba320b0e03",
        "sha256": "b56934cc7a9cd4f62ea72cd4d319c5060633ed6a922581e946de55750aa8191b"
      },
      "downloads": -1,
      "filename": "doge_datagen-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "50d4c1a67d0c3a364e249fba320b0e03",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 18748,
      "upload_time": "2022-02-10T16:03:30",
      "upload_time_iso_8601": "2022-02-10T16:03:30.560357Z",
      "url": "https://files.pythonhosted.org/packages/fc/d6/bb2ea7e9f076093ecaf7a430d341a5beddeb2550b635fb1e4ef290c1fa76/doge_datagen-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}