{
  "info": {
    "author": "Fusionbox, Inc.",
    "author_email": "programmers@fusionbox.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "django-separated\r\n================\r\n\r\n.. image:: https://api.travis-ci.org/fusionbox/django-separated.png\r\n   :alt: Building Status\r\n   :target: https://travis-ci.org/fusionbox/django-separated\r\n\r\nClass-based view and mixins for responding with CSV in Django.  django-separated\r\nsupports Django 1.3+.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n::\r\n\r\n    $ pip install django-separated\r\n\r\n\r\nDocumentation\r\n-------------\r\n\r\nViews\r\n`````\r\n\r\nseparated.views.CsvView\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nA ListView that returns a ``CsvResponse``.\r\n\r\nYou can specify the data for each row using the ``columns`` attribute.\r\n``columns`` should be an iterable of 2-tuples where the first index is\r\nan accessor to get the value off of an object and the second is a column\r\nheader. ::\r\n\r\n    class UserCsvView(CsvView):\r\n        model = User\r\n        columns = [\r\n            ('first_name', 'First name'),\r\n            ('last_name', 'Last name'),\r\n            ('email', 'Email'),\r\n        ]\r\n\r\nThe accessor can be a string or a callable.  If it isn't a callable, it\r\nwill be passed into attrgetter to turn into a callable.  If the accessor\r\nreturns a callable, it will be called.  All of the following are valid\r\nexamples of accessors:\r\n\r\n-  ``first_name``\r\n-  ``first_name.upper``\r\n-  ``get_absolute_url``\r\n-  ``lambda x: x.upvotes.count() - x.downvotes.count()``\r\n\r\nThere is a corresponding ``get_columns`` method if you need to have\r\nmore dynamic behavior.\r\n\r\nThe header index is optional, if you want a header to be generated from the\r\naccessor, you can write a simpler ``columns`` declaration::\r\n\r\n    class UserCsvView(CsvView):\r\n        model = User\r\n        columns = [\r\n            'first_name',\r\n            'last_name',\r\n            'email',\r\n        ]\r\n\r\nAdditionally, you can specify the filename of the CSV file that will be\r\ndownloaded.  It will default to the model name + ``_list.csv`` if you don't\r\nprovide one. For example::\r\n\r\n    class UserCsvView(CsvView):\r\n        model = User\r\n\r\nwill have a filename of ``user_list.csv``.  But you can override it by\r\nsettings the ``filename`` attribute.  There is a corresponding\r\n``get_filename`` that you can override for more complicated behavior.\r\n\r\nBy default, ``CsvView`` will output the headers as the first line.  If you\r\nwant to suppress this behavior, set ``output_headers`` to ``False``.\r\n\r\nseparated.views.CsvResponseMixin\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nA MultipleObjectMixin subclass that returns a ``CsvResponse``.\r\n\r\nThis is useful in instances where you want to substitute BaseListView for a\r\nListView of your own.  ``CsvResponseMixin`` supports all the behavior\r\nmentioned in ``CsvView``, the only machinery you need to hook it up is a\r\nView class that calls ``render_to_response`` with a context that has a\r\nqueryset available in the ``object_list`` key. ::\r\n\r\n    class MyWeirdBaseListView(View):\r\n        def get(self, request, *args, **kwargs):\r\n            return self.render_to_response({\r\n                'object_list': User.objects.all(),\r\n            })\r\n\r\n    class MyWeirdCsvView(CsvResponseMixin, MyWeirdBaseListView):\r\n        pass\r\n\r\nseparated.views.CsvResponse\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nA subclass of HttpResponse that will download as CSV.  ``CsvResponse``\r\nrequires a ``filename`` as the first argument of the constructor.\r\n\r\n\r\nAdmin\r\n`````\r\n\r\nYou can use django-separated in the admin center to export CSV from the admin\r\nsite. ::\r\n\r\n    from separated.admin import CsvExportModelAdmin\r\n\r\n    class NewsAdmin(CsvExportModelAdmin):\r\n        csv_export_columns = [\r\n            'title',\r\n            'pub_date',\r\n            'author.full_name',\r\n        ]\r\n\r\nThis adds an action to the change list.\r\n\r\n``csv_export_columns`` corresponds to the ``CsvView.columns`` attribute.  If\r\nyou want more fine-grained control, you can override ``csv_export_view_class``\r\ninstead::\r\n\r\n    from datetime import datetime\r\n\r\n    from separated.admin import CsvExportModelAdmin\r\n    from separated.views import CsvView\r\n\r\n    class NewsCsvView(CsvView):\r\n        columns = [\r\n            'title',\r\n            'pub_date',\r\n            'author.full_name',\r\n        ]\r\n        output_headers = False\r\n\r\n        def get_filename(self, model):\r\n            return '%s-news-export.csv' % datetime.today().strftime('Y-m-d')\r\n\r\n    class NewsAdmin(CsvExportModelAdmin):\r\n        csv_export_view_class = NewsCsvView\r\n\r\n``csv_export_columns`` and ``csv_export_view_class`` also exist as methods\r\n(``get_csv_export_columns`` and ``get_csv_export_view_class`` respectively) if\r\nyou need change them based on request. ::\r\n\r\n\r\n    from separated.admin import CsvExportModelAdmin\r\n\r\n    class NewsAdmin(CsvExportModelAdmin):\r\n        staff_export_columns = (\r\n            'title',\r\n            'pub_date',\r\n            'author.full_name',\r\n        )\r\n\r\n        superuser_export_columns = staff_export_columns + (\r\n            'secret_column',\r\n        )\r\n\r\n        def get_csv_export_columns(self, request):\r\n            if request.user.is_superuser:\r\n                return self.superuser_export_columns\r\n            else:\r\n                return self.staff_export_columns\r\n\r\n\r\nGetters\r\n```````\r\ndjango-separated provides a couple of helpers for normalizing the data that\r\ncomes off of the model before sending it to the CSV writer.  These are all\r\nbased on a ``Getter`` class which handles the different types of accessors.\r\n\r\n\r\nseparated.utils.BooleanGetter\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nIf you have a boolean value that you wish to be transformed into ``Yes`` or\r\n``No``, you can use the ``BooleanGetter``::\r\n\r\n    from separated.utils import BooleanGetter\r\n\r\n    class UserCsvView(CsvView):\r\n        model = User\r\n        columns = [\r\n            BooleanGetter('is_admin'),\r\n        ]\r\n\r\nseparated.utils.DisplayGetter\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nIf you have a model field that has choices and you want the human readable\r\ndisplay to appear in the CSV, you can use the ``DisplayGetter``::\r\n\r\n    from separated.utils import BooleanGetter\r\n\r\n    class User(models.Model):\r\n        favorite_color = models.CharField(max_length=255,\r\n            choices=(\r\n                ('blue', 'Blue'),\r\n                ('green', 'Green'),\r\n                ('red', 'Red'),\r\n            ))\r\n\r\n    class UserCsvView(CsvView):\r\n        model = User\r\n        columns = [\r\n            DisplayGetter('favorite_color'),\r\n        ]\r\n\r\nThis will end up using the ``get_favorite_color_display`` method that Django\r\nautomatically adds.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fusionbox/django-separated",
    "keywords": "django csv class-based views",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-separated",
    "package_url": "https://pypi.org/project/django-separated/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-separated/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/fusionbox/django-separated"
    },
    "release_url": "https://pypi.org/project/django-separated/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Class-based view and mixins for handling CSV with Django.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2066231,
  "urls": [],
  "vulnerabilities": []
}