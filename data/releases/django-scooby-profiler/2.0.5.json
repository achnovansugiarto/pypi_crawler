{
  "info": {
    "author": "Shubham Jain",
    "author_email": "sj.iitr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# django-scooby-profiler\n\nThis is a developer tool package to debug Django applications.\nThe aim of this package is more or less same as of Django debug toolbar,\nbut I made it because of these shortcomings of django-debug-toolbar package:\n\n1) You can not debug AJAX requests with django-debug-toolbar.\n2) If you have a big Django project, the django-debug-toolbar makes web pages more slower\nbecause it injects its own html by rendering which takes time.\n\n## With django-scooby-profiler:\n\n1) You can debug AJAX requests as well.\n2) It comes with a chrome extension named \"Scooby profiler\", so rendering happens at front-end only.\n3) You have to switch on debugging in chrome extension, only then backend will collect profiled data for all queries.\nThis way, the overhead caused by debugging is not always ON by default.\n\nHere's how the issues are mitigated in django-scooby-profiler.\nAll the profiled data collected is dumped to a backend (E.g. Redis) where the data resides temporarily.\nThe chrome extension collects those data and renders it to you for different HTTP requests.\n\n## Plugins supported\nCurrently plugins for these type of queries are supported by this package:\n\n1) **SQL**:\nDebug SQL queries happening inside the app, while serving a request. It shows all SQL queries with proper stacktrace.\nYou can group together similar queries at front-end, so that you would know what queries you can optimize.\nThis is what generally happens in case of `for` loops.\n\n2) **Memcache**:\nIt shows different operations on memcache with stacktraces.\n\n3) **Scooby logs**:\nInstead of debugging/printing on console, you can log things directly to extension.\nDo it by putting following anywhere in you code where you want to log.\n\n```python\nimport scooby\nscooby.log(\"foo\", \"bar\")\n# or\nscooby.log()         # It works without giving any argument too.\n```\n\n4) **Python cProfile**:\nIf you want to use raw python profiler on your Django view, you don't need to add any extra code for that.\nThis plugin does the job for you.\n\nIf you don't find a plugin here which you think should be here, you are most welcome to contribute it to this package.\n\n## Installation\n\n```bash\n# Use pip in case of Python 2\npip3 install django-scooby-profiler \n```\n\n## Backend configuration\n\n1) Add 'scooby' to `INSTALLED_APPS` setting.\n```python\nINSTALLED_APPS = [\n  ...,\n  'scooby',\n]\n```\n\n2) Add this middeware to `MIDDLEWARE`/`MIDDLEWARE_CLASSES` setting:\n```python\nMIDDLEWARE = [\n  'scooby.middleware.ScoobyMiddleware',\n  ...,\n]\n```\n\n3) Add following manadatory settings:\n\n* **SCOOBY_SECRET_KEY** (type: string)\n\nYou can generate a secret key by\n```\n>>> import os\n>>> import binascii\n>>> print(binascii.hexlify(os.urandom(24)))\n0ccd512f8c3493797a23557c32db38e7d51ed74f14fa758\n```\n\n\n* **SCOOBY_REDIS_BACKEND_CONFIG** (type: dict, connection params required for redis connection)\n\nThis is not required if SCOOBY_BACKEND is set as some other backend.\nThe setting would look like\n\n```python\nSCOOBY_REDIS_BACKEND_CONFIG = {\n  'host': 'localhost',\n  'port': 6379\n}\n```\n\n4) Add scooby base url to your project's urlconf by\n\nwith Django 2.x.x:\n```\nurlpatterns = [\n    ...,\n    path('scooby/', include('scooby.urls')),\n]\n```\n\nwith lower versions of Django:\n```\nurlpatterns = [\n    ...,\n    url(r'^scooby/', include('scooby.urls')),\n]\n```\n\n### Other optional Settings\n\n* **SCOOBY_DEBUG** (type: boolean, default: DEBUG)\nWhether to debug or not regarding this package.\n\n* **SCOOBY_BACKEND** (type: string, path to the class which acts as backend, default: 'scooby.backends.RedisBackend')\nYou can specify your own backend if you don't want to use Redis.\nYou need to create a class similar to `RedisBackend` defined in `scooby/backends.py`\n\n\n## Install chrome extension\nInstall the chrome extension from https://chrome.google.com/webstore/detail/scooby-profiler/kicgfdanpohconjegfkojbpceodecjad\n\nOpen the developer tools in your browser, you will see a section named \"Scooby\".\nIt will ask for the secret key, which you need to put as same you have put in the backend.\nReload your page, you will start seeing HTTP requests with profiled data for all supported plugins.\n\n## LICENCE\nMIT",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shhaumb/django-scooby-profiler",
    "keywords": "django debugging profiler profiling sql tool",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-scooby-profiler",
    "package_url": "https://pypi.org/project/django-scooby-profiler/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-scooby-profiler/",
    "project_urls": {
      "Homepage": "https://github.com/shhaumb/django-scooby-profiler"
    },
    "release_url": "https://pypi.org/project/django-scooby-profiler/2.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A debugging tool for Django applications which works for all HTTP requests including AJAX. Using this, you can profile Django views. It shows you all SQL, Memcache queries with proper stacktrace happening in app while serving a request, with the help of 'Scooby profiler' chrome extension.",
    "version": "2.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4624498,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "814ee6581cea2b8c736dfce904c9ab3b96eea673ae9d162353f1708bd234c177",
        "md5": "05c9f0fb64f2ff684edf1a424f86a780",
        "sha256": "f69f2ef95c1a32b1c0d565d34236e82b93af3075026052b4d3d915687584ee58"
      },
      "downloads": -1,
      "filename": "django_scooby_profiler-2.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "05c9f0fb64f2ff684edf1a424f86a780",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18140,
      "upload_time": "2018-11-27T14:28:25",
      "upload_time_iso_8601": "2018-11-27T14:28:25.336467Z",
      "url": "https://files.pythonhosted.org/packages/81/4e/e6581cea2b8c736dfce904c9ab3b96eea673ae9d162353f1708bd234c177/django_scooby_profiler-2.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2550fd1f6ebd7508ab557af27e5122f80281ded70cde75060b58a0b76abb2e0b",
        "md5": "5a6b90e468b726ddb60cddfaeb5698d3",
        "sha256": "f5f89ba3c0a2c60a8cdb8b7fb1bcb426927e07ff8c796d4bdb09d54964ba7bce"
      },
      "downloads": -1,
      "filename": "django-scooby-profiler-2.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "5a6b90e468b726ddb60cddfaeb5698d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9366,
      "upload_time": "2018-11-27T14:28:05",
      "upload_time_iso_8601": "2018-11-27T14:28:05.408340Z",
      "url": "https://files.pythonhosted.org/packages/25/50/fd1f6ebd7508ab557af27e5122f80281ded70cde75060b58a0b76abb2e0b/django-scooby-profiler-2.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}